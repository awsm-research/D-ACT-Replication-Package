private void addSELinuxModes(org.ovirt.engine.api.model.VersionCaps version, org.ovirt.engine.core.common.businessentities.SELinuxMode[] values) { if (org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual(version, org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_5)) { version.setSelinuxModes(new org.ovirt.engine.api.model.SELinuxModes()); for (org.ovirt.engine.core.common.businessentities.SELinuxMode mode : values) { version.getSelinuxModes().getSELinuxModes().add(mode.toString()); } } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Reset Option") java.lang.String resetOptionVolumeTitle();
private boolean executeWithoutTransaction() { boolean functionReturnValue = false; boolean exceptionOccurred = true; try { logRunningCommand(); if (hasTaskHandlers()) { getCurrentTaskHandler().execute(); } else { executeCommand(); } functionReturnValue = getSucceeded(); exceptionOccurred = false; } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { log.error(java.lang.String.format("Command %1$s throw Vdc Bll exception. With error message %2$s", getClass().getName(), e.getMessage())); if (log.isDebugEnabled()) { log.debug(java.lang.String.format("Command %1$s throw Vdc Bll exception", getClass().getName()), e); } processExceptionToClient(new org.ovirt.engine.core.common.errors.VdcFault(e, e.getVdsError().getCode())); } catch (java.lang.RuntimeException e) { processExceptionToClient(new org.ovirt.engine.core.common.errors.VdcFault(e, org.ovirt.engine.core.common.errors.VdcBllErrors.ENGINE)); log.error(java.lang.String.format("Command %1$s throw exception", getClass().getName()), e); } finally { if (!exceptionOccurred) { setCommandExecuted(); } if (exceptionOccurred || (!(getSucceeded()))) { clearChildAsyncTasksWithOutVdsmId(); setCommandStatus(CommandStatus.FAILED); setSucceeded(false); compensate(); } else { if (((((getTaskType()) == (org.ovirt.engine.core.common.asynctasks.AsyncTaskType.notSupported)) && (getReturnValue().getVdsmTaskIdList().isEmpty())) && ((getCallBack()) == null)) && ((commandStatus) == (org.ovirt.engine.core.compat.CommandStatus.ACTIVE))) { setCommandStatus(CommandStatus.SUCCEEDED); } cleanUpCompensationData(); } } return functionReturnValue; }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_STORAGE_DOMAIN : org.ovirt.engine.core.common.AuditLogType.USER_UPDATE_STORAGE_DOMAIN_FAILED; }
public void testCannotUpdateOSNotSupportVirtioScsi() { prepareVmToPassValidate(); group.setCompatibilityVersion(Version.v4_0); when(command.isVirtioScsiEnabledForVm(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(true); when(osRepository.getDiskInterfaces(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(new java.util.ArrayList(java.util.Arrays.asList("VirtIO"))); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI); }
public void setHighlyAvailableIsActive(boolean value) { this.mVdsStatistics.setHighlyAvailableIsActive(value); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.ProcessOvfUpdateForStoragePoolCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.OVF_UPDATE, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
@org.junit.Test public void diskImagesDontExist() { doReturn(false).when(validator).isDiskExists(disk1.getId()); doReturn(false).when(validator).isDiskExists(disk2.getId()); assertThat(validator.diskImagesNotExist(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_DISKS_NOT_EXIST)); }
@org.junit.Test public void unmanagedVlanAddedToNic() { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic("nic0", null); mockExistingIfaces(nic); java.lang.String networkName = "net"; org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(nic, createVlan(nic.getName(), 100, networkName))); validateAndExpectViolation(helper, VdcBllMessages.NETWORKS_DONT_EXIST_IN_CLUSTER, networkName); }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { java.lang.Object[] array = ((java.lang.Object[]) (result.getState())); org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel) (array[0])); org.ovirt.engine.core.common.businessentities.StorageDomain sdToAdd1 = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (array[1])); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = result.getReturnValue(); boolean success = (returnVal != null) && (returnVal.getSucceeded()); if (success) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (storageListModel.getWindow())); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = model.getDataCenter().getSelectedItem(); if (!(dataCenter.getId().equals(StorageModel.UnassignedDataCenterId))) { storageListModel.attachStorageToDataCenter(sdToAdd1.getId(), dataCenter.getId(), model.getActivateDomain().getEntity()); onFinish(storageListModel.context, true, storageListModel.storageModel, null); } else { postImportFileStorage(storageListModel.context, true, storageListModel.storageModel, null); } } else { postImportFileStorage(storageListModel.context, false, storageListModel.storageModel, ""); } }
public java.util.List<java.lang.Long> allocateAvailableMacs(int numberOfMacs) { if ((getAvailableMacsCount()) < numberOfMacs) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.MAC_POOL_NO_MACS_LEFT); } final java.util.List<java.lang.Long> result = new java.util.ArrayList<>(numberOfMacs); int remainingMacs = numberOfMacs; while (remainingMacs > 0) { final org.ovirt.engine.core.bll.network.macpoolmanager.Range rangeWithAvailableMac = getRangeWithAvailableMac(); org.apache.commons.lang.Validate.notNull(rangeWithAvailableMac); final java.util.List<java.lang.Long> allocatedMacs = rangeWithAvailableMac.allocateMacs(remainingMacs); remainingMacs -= allocatedMacs.size(); result.addAll(allocatedMacs); } return result; }
private boolean stopSuspendedVm() { boolean returnVal = false; org.ovirt.engine.core.bll.StopVmCommandBase.setVm(null); org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getstatus(); if ((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getstatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked)) { org.ovirt.engine.core.bll.StopVmCommandBase.getVm().setstatus(VMStatus.ImageLocked); updateVmData(org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getDynamicData()); if ((!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(org.ovirt.engine.core.bll.StopVmCommandBase.getVm().gethibernation_vol_handle()))) && (handleHibernatedVm(org.ovirt.engine.core.bll.StopVmCommandBase.getActionType(), false))) { returnVal = true; } else { org.ovirt.engine.core.bll.StopVmCommandBase.getVm().setstatus(vmStatus); updateVmData(org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getDynamicData()); } } return returnVal; }
public boolean isFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(isFieldUpdatable(name))) { if (((fieldContainer != null) && ((container) != null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values != null) ? values.contains(name) : false; if ((!returnValue) && hotsetEnabled) { returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn("Field '{}' can not be updated when status is '{}'", name, status); } } return returnValue; }


public void isClusterEmpty(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid id) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return ((java.lang.Boolean) (source)); } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.IsClusterEmpty, new org.ovirt.engine.core.common.queries.IdQueryParameters(id), aQuery); }

@java.lang.Override public void setMainTabSelectedItem(org.ovirt.engine.core.common.businessentities.VDSGroup selectedItem) { org.ovirt.engine.ui.webadmin.section.main.view.tab.cluster.SubTabClusterGeneralView.Driver.driver.edit(getDetailModel()); formBuilder.showForm(getDetailModel()); if (selectedItem.supportsVirtService()) { if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.PowerSave)) { setVisibility(true); leftSlider.setValue(selectedItem.getlow_utilization()); rightSlider.setValue(selectedItem.gethigh_utilization()); policyTimeLabel.setText((((((constants.clusterPolicyForTimeLabel()) + " ") + (selectedItem.getcpu_over_commit_duration_minutes())) + " ") + (constants.clusterPolicyMinTimeLabel()))); policyFieldLabel.setText(constants.clusterPolicyPowSaveLabel()); } else if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.EvenlyDistribute)) { setVisibility(true); leftSlider.setVisible(false); leftDummySlider.setVisible(true); rightSlider.setValue(selectedItem.gethigh_utilization()); policyTimeLabel.setText((((((constants.clusterPolicyForTimeLabel()) + " ") + (selectedItem.getcpu_over_commit_duration_minutes())) + " ") + (constants.clusterPolicyMinTimeLabel()))); policyFieldLabel.setText(constants.clusterPolicyEvenDistLabel()); } else { setVisibility(false); policyFieldLabel.setText(constants.clusterPolicyNoneLabel()); } } policyPanel.setVisible(selectedItem.supportsVirtService()); volumeSummaryPanel.setVisible(selectedItem.supportsGlusterService()); }
@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } super.syncSearch(); org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableListModel = ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> domains = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue())); for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : domains) { java.lang.String guid = ((domain.getStoragePoolId()) != null) ? domain.getStoragePoolId().toString() : Guid.Empty.toString(); domain.setQueryableId((((domain.getId()) + "_") + guid)); } searchableListModel.setItems(domains); setIsEmpty(((((java.util.List) (searchableListModel.getItems())).size()) == 0)); } }; org.ovirt.engine.core.common.queries.IdQueryParameters tempVar = new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId()); tempVar.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainListById, tempVar, _asyncQuery); }


@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (!(args instanceof org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs)) { return; } java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName; if ("IsLinuxOS".equals(propName)) { changeApplicationLevelVisibility(linuxBootOptionsPanel, vm.getIsLinuxOS()); } }


@java.lang.Override protected void onEntityChanged() { if ((getEntity()) != null) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (getEntity())).getVm(); setItems(vm.getInterfaces()); } else { setItems(null); } }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("New Role") java.lang.String newRoleTitle();
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEquallyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); assertThat(factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor.capture()); java.util.List<java.util.concurrent.locks.ReentrantReadWriteLock> capturesValues = captor.getAllValues(); assertEquals(capturesValues.get(0), capturesValues.get(1)); }
public java.lang.String getDisplayValue() { if (isDefault()) { final java.lang.String defaultTimeZoneKey = org.ovirt.engine.ui.uicommonweb.models.vms.TimeZoneModel.getDefaultTimeZoneKey(timeZoneType); return org.ovirt.engine.ui.uicommonweb.models.vms.TimeZoneModel.cachedTimeZones.get(timeZoneType).get(defaultTimeZoneKey); } else { return org.ovirt.engine.ui.uicommonweb.models.vms.TimeZoneModel.cachedTimeZones.get(timeZoneType).get(timeZoneKey); } }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(org.ovirt.engine.core.bll.pm.VAR__ACTION__STOP); }
@java.lang.Override protected void executeQueryCommand() { java.lang.String internal = org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.AdminDomain); java.util.List<org.ovirt.engine.core.extensions.mgr.ExtensionProxy> extensions = getExtensionsManager().getExtensionsByService(org.ovirt.engine.api.extensions.aaa.Authz.class.getName()); java.util.List<java.lang.String> names = new java.util.ArrayList(extensions.size()); for (org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension : extensions) { names.add(org.ovirt.engine.core.aaa.AuthzUtils.getName(extension)); } if (org.ovirt.engine.core.bll.GetDomainListQuery.getParameters().getFilterInternalDomain()) { names.remove(internal); } java.util.Collections.sort(names, new org.ovirt.engine.core.bll.LoginDomainComparator(internal)); org.ovirt.engine.core.bll.GetDomainListQuery.getQueryReturnValue().setReturnValue(names); }
@org.junit.Test public void testInterfaceByNameExistsWhenInterfaceIsNull() throws java.lang.Exception { assertThat(new org.ovirt.engine.core.bll.validator.HostInterfaceValidator(null).interfaceByNameExists(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST)); }
private java.lang.String getMigrationNetworkIp() { org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork = null; java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allNetworksInCluster = org.ovirt.engine.core.bll.MigrateVmCommand.getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getClusterId()); for (org.ovirt.engine.core.common.businessentities.network.Network tempNetwork : allNetworksInCluster) { if (tempNetwork.getCluster().isMigration()) { migrationNetwork = tempNetwork; break; } } if (migrationNetwork != null) { if ((getMigrationNetworkAddress(org.ovirt.engine.core.bll.MigrateVmCommand.getVds().getId(), migrationNetwork.getName())) == null) { return null; } return getMigrationNetworkAddress(getDestinationVds().getId(), migrationNetwork.getName()); } return null; }

private java.lang.String getMigrationNetworkIp() { if (!(org.ovirt.engine.core.common.FeatureSupported.migrationNetwork(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getVdsGroupCompatibilityVersion()))) { return null; } org.ovirt.engine.core.common.businessentities.network.Network migrationNetwork = null; java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> allNetworksInCluster = org.ovirt.engine.core.bll.MigrateVmCommand.getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getVdsGroupId()); for (org.ovirt.engine.core.common.businessentities.network.Network tempNetwork : allNetworksInCluster) { if (tempNetwork.getCluster().isMigration()) { migrationNetwork = tempNetwork; break; } } if (migrationNetwork != null) { if ((getMigrationNetworkAddress(org.ovirt.engine.core.bll.MigrateVmCommand.getVds().getId(), migrationNetwork.getName())) == null) { return null; } return getMigrationNetworkAddress(getDestinationVds().getId(), migrationNetwork.getName()); } return null; }

public static java.lang.String renderVmNamesList(java.util.List<java.lang.String> names) { return org.ovirt.engine.ui.uicompat.external.StringUtils.join(names, ", "); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VM getEntity() { return ((org.ovirt.engine.core.common.businessentities.VM) (super.getEntity())); }
@java.lang.Override public java.lang.Void runInTransaction() { getImageStorageDomainMapDao().remove(new org.ovirt.engine.core.common.businessentities.ImageStorageDomainMapId(getParameters().getImageId(), getParameters().getStorageDomainId())); unLockImage(); return null; }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getUnderUtilizedCPUHosts(java.util.Collection<org.ovirt.engine.core.common.businessentities.VDS> relevantHosts, final int lowUtilization, final int minVmCount, final int cpuOverCommitDurationMinutes) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> underUtilizedHosts = org.ovirt.engine.core.utils.linq.LinqUtils.filter(relevantHosts, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.VDS>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.VDS p) { return ((((p.getUsageCpuPercent()) + (calcSpmCpuConsumption(p))) < lowUtilization) && ((p.getVmCount()) >= minVmCount)) && (((p.getCpuOverCommitTimestamp()) == null) || (((getTime().getTime()) - (p.getCpuOverCommitTimestamp().getTime())) < (java.util.concurrent.TimeUnit.MINUTES.toMillis(cpuOverCommitDurationMinutes)))); } }); if ((underUtilizedHosts.size()) > 1) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getVdsGroupDao().get(underUtilizedHosts.get(0).getVdsGroupId()); java.util.Collections.sort(underUtilizedHosts, new org.ovirt.engine.core.bll.scheduling.utils.VdsCpuUsageComparator(((cluster != null) && (cluster.getCountThreadsAsCores())))); } return underUtilizedHosts; }
@java.lang.Override public void templateWithVersion_SelectedItemChanged() { super.templateWithVersion_SelectedItemChanged(); org.ovirt.engine.core.common.businessentities.VmTemplate template = ((getModel().getTemplateWithVersion().getSelectedItem()) != null) ? getModel().getTemplateWithVersion().getSelectedItem().getTemplateVersion() : null; if (template == null) { return; } setupWindowModelFrom(template); doChangeDefautlHost(template.getDedicatedVmForVds()); updateRngDevice(template.getId()); getModel().getCustomPropertySheet().deserialize(template.getCustomProperties()); }

@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { if (org.ovirt.engine.core.bll.ShutdownVmCommand.shouldSkipCommandExecutionCached()) { return org.ovirt.engine.core.bll.ShutdownVmCommand.logCommandExecutionSkipped("Shutdown VM"); } if (org.ovirt.engine.core.bll.ShutdownVmCommand.getSuspendedVm()) { return org.ovirt.engine.core.bll.ShutdownVmCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_STOP_SUSPENDED_VM : org.ovirt.engine.core.common.AuditLogType.USER_STOP_SUSPENDED_VM_FAILED; } else { return org.ovirt.engine.core.bll.ShutdownVmCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_INITIATED_SHUTDOWN_VM : org.ovirt.engine.core.common.AuditLogType.USER_FAILED_SHUTDOWN_VM; } }
private void queryNetworkAttachments() { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.setModel(this); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValueObj) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValueObj)); java.lang.Object returnValue2 = returnValue.getReturnValue(); org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel.this.existingNetworkAttachments = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>) (returnValue2)); queryVfsConfig(); } }; org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(vds.getId()); params.setRefresh(false); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetNetworkAttachmentsByHostId, params, asyncQuery); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterHookUpdate(java.lang.String glusterCommand, java.lang.String stage, java.lang.String hookName, java.lang.String content, java.lang.String checksum) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterHook.update").withParameter("glusterCmd", glusterCommand).withParameter("hookLevel", stage).withParameter("hookName", hookName).withParameter("hookData", content).withParameter("hookMd5Sum", checksum).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }

@org.junit.Test public void lunAlreadyPartOfStorageDomains() { org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[0].toString()); lun1.setStorageDomainId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[1].toString()); lun2.setStorageDomainId(org.ovirt.engine.core.compat.Guid.newGuid()); doReturn(lunDao).when(cmd).getLunDao(); when(lunDao.getAll()).thenReturn(java.util.Arrays.asList(lun1, lun2)); java.util.List<java.lang.String> specifiedLunIds = java.util.Collections.singletonList(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[0].toString()); assertTrue(cmd.isLunsAlreadyInUse(specifiedLunIds)); java.util.List<java.lang.String> messages = cmd.getReturnValue().getCanDoActionMessages(); assertEquals(messages.size(), 2); assertEquals(messages.get(0), VdcBllMessages.ACTION_TYPE_FAILED_LUNS_ALREADY_PART_OF_STORAGE_DOMAINS.toString()); assertEquals(messages.get(1), java.lang.String.format("$lunIds %1$s", cmd.getFormattedLunId(lun1, lun1.getStorageDomainName()))); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), diskImages, lunDisks, interfaces, vmBase, clusterName, affinityGroups); }

public org.ovirt.engine.core.common.businessentities.LdapRefStatus getStatus() { return status; }
public abstract void DataCenter_SelectedItemChanged();
@org.ovirt.engine.ui.uicompat.DefaultStringValue("You are about to attach the network to all the selected clusters and to detach the network from all the unselected clusters.\n\nAre you sure you want to continue?") java.lang.String youAreAboutToAttachDetachNetworkToFromTheClustersMsg();

@java.lang.Override protected boolean canDoAction() { boolean retValue; org.ovirt.engine.core.compat.Guid subscriberId = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getsubscriber_id(); java.lang.String eventName = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getevent_up_name(); org.ovirt.engine.core.common.EventNotificationMethod eventNotificationMethod = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getevent_notification_method(); java.util.List<org.ovirt.engine.core.common.businessentities.event_subscriber> subscriptions = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getEventDao().getAllForSubscriber(subscriberId); if (org.ovirt.engine.core.bll.AddEventSubscriptionCommand.IsAlreadySubscribed(subscriptions, subscriberId, eventName, eventNotificationMethod)) { addCanDoActionMessage(VdcBllMessages.EN_ALREADY_SUBSCRIBED); retValue = false; } else { if (eventNotificationMethod != null) { java.util.List<org.ovirt.engine.core.common.businessentities.EventMap> eventMap = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getEventDao().getEventMapByName(eventName); if ((eventMap.size()) > 0) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().get(subscriberId); if (user == null) { addCanDoActionMessage(VdcBllMessages.USER_MUST_EXIST_IN_DB); retValue = false; } else { retValue = ValidateAdd(eventNotificationMethod, org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber(), user); } } else { org.ovirt.engine.core.bll.AddEventSubscriptionCommand.addCanDoActionMessageVariable("eventName", eventName); addCanDoActionMessage(VdcBllMessages.EN_UNSUPPORTED_NOTIFICATION_EVENT); retValue = false; } } else { addCanDoActionMessage(VdcBllMessages.EN_UNKNOWN_NOTIFICATION_METHOD); retValue = false; } } return retValue; }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.roles> getForAdElement(org.ovirt.engine.core.compat.Guid id) { org.hibernate.Query query = getSession().createQuery(("from roles role, permissions perms " + ("where perms.roleId = role.id " + "and perms.adElementId = :id"))); query.setParameter("id", id); return query.list(); }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Attached") java.lang.String attachedHost();
private boolean isNetworkDeviceFree(org.ovirt.engine.core.common.businessentities.HostDevice networkDevice) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vfNic = getNicByPciDevice(networkDevice); return ((vfNic != null) && (!(isNetworkAttached(vfNic)))) && (!(isVlanDeviceAttached(vfNic))); }



@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Storage.class, to = org.ovirt.engine.core.common.businessentities.storage.LUNs.class) public static org.ovirt.engine.core.common.businessentities.storage.LUNs map(org.ovirt.engine.api.model.Storage model, org.ovirt.engine.core.common.businessentities.storage.LUNs template) { org.ovirt.engine.core.common.businessentities.storage.LUNs entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.storage.LUNs(); if (model.isSetLogicalUnits()) { org.ovirt.engine.api.model.LogicalUnit logicalUnit = model.getLogicalUnits().get(0); entity.setLUN_id(logicalUnit.getId()); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>(); connections.add(org.ovirt.engine.api.restapi.types.StorageLogicalUnitMapper.map(logicalUnit, null)); entity.setLunConnections(connections); } if (model.isSetType()) { org.ovirt.engine.api.model.StorageType storageType = org.ovirt.engine.api.model.StorageType.fromValue(model.getType()); if (storageType != null) { entity.setLunType(org.ovirt.engine.api.restapi.types.StorageDomainMapper.map(storageType, null)); } } return entity; }
protected void addErrorMessages(org.ovirt.engine.core.common.errors.EngineMessage messageActionTypeParameter, org.ovirt.engine.core.common.errors.EngineMessage messageReason) { addCanDoActionMessage(EngineMessage.VAR__TYPE__BOOKMARK); addCanDoActionMessage(messageActionTypeParameter); addCanDoActionMessage(messageReason); }
private static void mapQosToEntity(org.ovirt.engine.api.model.Qos model, org.ovirt.engine.core.common.businessentities.qos.QosBase entity, org.ovirt.engine.api.model.QosType qosType) { switch (qosType) { case STORAGE : org.ovirt.engine.api.restapi.types.QosMapper.mapStorageQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.qos.StorageQos) (entity))); break; case CPU : org.ovirt.engine.api.restapi.types.QosMapper.mapCpuQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.qos.CpuQos) (entity))); break; case NETWORK : org.ovirt.engine.api.restapi.types.QosMapper.mapNetworkQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (entity))); break; case HOSTNETWORK : org.ovirt.engine.api.restapi.types.QosMapper.mapHostNetworkQosToEntity(model, ((org.ovirt.engine.core.common.businessentities.network.HostNetworkQos) (entity))); break; default : break; } }


public java.lang.String getGroupIds() { java.lang.String groupIds = ""; if (!(mGroups.isEmpty())) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (java.util.Iterator<org.ovirt.engine.core.common.businessentities.LdapGroup> iterator = mGroups.values().iterator(); iterator.hasNext();) { sb.append(iterator.next().getid().toString()); if (iterator.hasNext()) { sb.append(","); } } groupIds = sb.toString(); } return groupIds; }

@java.lang.Override public void onSuccess(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase> operation, final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Frontend: sucessfully executed runAction, determining result!"); handleActionResult(actionType, parameters, result, (callback != null ? callback : org.ovirt.engine.ui.frontend.Frontend.NULLABLE_ASYNC_CALLBACK), state, showErrorDialog); org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent.fire(this, state); org.ovirt.engine.ui.frontend.communication.RefreshActiveModelEvent.fire(this, true); }
public static boolean isHostedEngineDomain(final org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { return org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.HostedEngineStorageDomainName).equals(storageDomain.getName()); }

@java.lang.Override protected void readOsSection(XmlNode section) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(section.Attributes.get("ovf:id").getValue())); XmlNode node = section.SelectSingleNode("Description"); if (node != null) { if (node.InnerText.equals(java.lang.String.valueOf(OsRepository.OLD_OTHER_ID))) { node.InnerText = java.lang.String.valueOf(OsRepository.DEFAULT_OS); } _vmTemplate.setOsId(osRepository.getOsIdByUniqueName(node.InnerText)); } }
private void UpdateActionAvailability() { java.util.List tempVar = getSelectedItems(); java.util.ArrayList selectedItems = ((java.util.ArrayList) ((tempVar != null) ? tempVar : new java.util.ArrayList())); boolean anyEngine = false; for (java.lang.Object item : selectedItems) { org.ovirt.engine.core.common.businessentities.network network = ((org.ovirt.engine.core.common.businessentities.network) (item)); if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(network.getname(), org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterNetworkListModel.ENGINE_NETWORK)) { anyEngine = true; break; } } getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed((((selectedItems.size()) > 0) && (!anyEngine))); }


@java.lang.Override public int compareTo(org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics o) { return org.ovirt.engine.core.common.businessentities.comparators.BusinessEntityGuidComparator.<org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics>newInstance().compare(this, o); }



@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate getByName(java.lang.String name, org.ovirt.engine.core.compat.Guid datacenterId, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getCallsHandler().executeRead("GetVmTemplateByVmtName", org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("vmt_name", name).addValue("storage_pool_id", datacenterId).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }

private void PostUpdateTimeZone(java.lang.String selectedTimeZone) { if ((getModel().getIsWindowsOS()) != (lastIsWinOS)) { lastIsWinOS = getModel().getIsWindowsOS(); if (selectedTimeZone != null) { if (getModel().getIsWindowsOS()) { generalTimezonesString = selectedTimeZone; } else { winTimezoneString = selectedTimeZone; } } selectedTimeZone = (getModel().getIsWindowsOS()) ? winTimezoneString : generalTimezonesString; } else { if (selectedTimeZone != null) { if (getModel().getIsWindowsOS()) { winTimezoneString = selectedTimeZone; } else { generalTimezonesString = selectedTimeZone; } } } final org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase.TimezoneType timezoneType = org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase.TimezoneType.getTimezoneByOs(getModel().getIsWindowsOS()); getModel().getTimeZone().setItems(cachedTimeZones.get(timezoneType)); java.util.Map.Entry<java.lang.String, java.lang.String> selectedTimeZoneEntry = getTimezoneEntryByKey(selectedTimeZone, cachedTimeZones.get(timezoneType)); java.util.Map.Entry<java.lang.String, java.lang.String> selectedItem = (selectedTimeZoneEntry != null) ? selectedTimeZoneEntry : ((java.util.Map.Entry<java.lang.String, java.lang.String>) (getModel().getTimeZone().getSelectedItem())); getModel().getTimeZone().setSelectedItem((selectedItem == null ? null : org.ovirt.engine.ui.uicommonweb.Linq.FirstOrDefault(cachedTimeZones.get(timezoneType), new org.ovirt.engine.ui.uicommonweb.Linq.TimeZonePredicate(selectedItem.getKey())))); }
@java.lang.Override public javax.ws.rs.core.Response performRemove(java.lang.String id) { return performAction(VdcActionType.RemovePermission, new org.ovirt.engine.core.common.action.PermissionsOperationsParametes(getPermission(id))); }
private void doInit(org.ovirt.engine.api.extensions.ExtMap inputMap, org.ovirt.engine.api.extensions.ExtMap outputMap) { context = inputMap.<org.ovirt.engine.api.extensions.ExtMap>get(Base.InvokeKeys.CONTEXT); configuration = context.<java.util.Properties>get(Base.ContextKeys.CONFIGURATION); broker = org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapFactory.getInstance(getAuthzName()); context.<java.util.List<java.lang.String>>get(Base.ContextKeys.CONFIGURATION_SENSITIVE_KEYS).add("config.authn.user.password"); context.mput(Base.ContextKeys.AUTHOR, "The oVirt Project").mput(Base.ContextKeys.EXTENSION_NAME, "Kerberos/Ldap Authn (Built-in)").mput(Base.ContextKeys.LICENSE, "ASL 2.0").mput(Base.ContextKeys.HOME_URL, "http://www.ovirt.org").mput(Base.ContextKeys.VERSION, "N/A").mput(Authn.ContextKeys.CAPABILITIES, Authn.Capabilities.AUTHENTICATE_PASSWORD).mput(Base.ContextKeys.BUILD_INTERFACE_VERSION, Base.INTERFACE_VERSION_CURRENT); org.ovirt.engine.extensions.aaa.builtin.kerberosldap.KerberosManager.getInstance(); org.ovirt.engine.extensions.aaa.builtin.kerberosldap.UsersDomainsCacheManagerService.getInstance().init(); }

@java.lang.Override protected void showErrataListWithDetailsPopup() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.HostErrataCountModel transferObj = new org.ovirt.engine.ui.uicommonweb.models.HostErrataCountModel(); transferObj.setTitle(org.ovirt.engine.ui.uicommonweb.models.HostErrataCountModel.messages.errataForHost(getName())); transferObj.setGuid(getGuid()); transferObj.setName(getName()); setWindow(transferObj); initCommands(transferObj); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.Cluster model, org.ovirt.engine.api.model.Cluster transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getComment(), transform.getComment()); assertNotNull(transform.getCpu()); assertEquals(model.getCpu().getId(), transform.getCpu().getId()); assertNotNull(transform.getDataCenter()); assertEquals(model.getDataCenter().getId(), transform.getDataCenter().getId()); assertNotNull(transform.getSchedulingPolicy()); assertEquals(model.getSchedulingPolicy().getPolicy(), transform.getSchedulingPolicy().getPolicy()); assertEquals(model.getErrorHandling().getOnError(), transform.getErrorHandling().getOnError()); assertNotNull(transform.getMemoryPolicy()); assertNotNull(transform.getMemoryPolicy().getTransparentHugepages()); assertEquals(transform.getMemoryPolicy().getTransparentHugepages().isEnabled(), transform.getMemoryPolicy().getTransparentHugepages().isEnabled()); assertEquals(model.isVirtService(), transform.isVirtService()); assertEquals(model.isGlusterService(), transform.isGlusterService()); assertEquals(model.isTunnelMigration(), transform.isTunnelMigration()); assertEquals(model.isTrustedService(), transform.isTrustedService()); assertEquals(model.isBallooningEnabled(), transform.isBallooningEnabled()); assertEquals(model.getDisplay().getProxy(), transform.getDisplay().getProxy()); }

private static boolean addQosForDevice(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.compat.Version vdsGroupCompatibilityVersion) { org.ovirt.engine.core.compat.Guid qosId = vnicProfile.getNetworkQosId(); if (qosId != null) { if (!(org.ovirt.engine.core.common.FeatureSupported.networkQoS(vdsGroupCompatibilityVersion))) { return false; } java.util.Map<java.lang.String, java.lang.Object> specParams = ((java.util.Map<java.lang.String, java.lang.Object>) (struct.get(VdsProperties.SpecParams))); if (specParams == null) { specParams = new java.util.HashMap<>(); struct.put(VdsProperties.SpecParams, specParams); } org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQoS = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getQosDao().get(qosId); org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper qosMapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper(specParams, VdsProperties.QOS_INBOUND, VdsProperties.QOS_OUTBOUND); qosMapper.serialize(networkQoS); } return true; }
@java.lang.Override public void run() { try { java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> vmsToMigrate = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStaticDao().getAllWithFailbackByVds(vds.getId()); if ((vmsToMigrate.size()) > 0) { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> vmToServerParametersList = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(org.ovirt.engine.core.utils.linq.LinqUtils.foreach(vmsToMigrate, new org.ovirt.engine.core.utils.linq.Function<org.ovirt.engine.core.common.businessentities.VmStatic, org.ovirt.engine.core.common.action.VdcActionParametersBase>() { @java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase eval(org.ovirt.engine.core.common.businessentities.VmStatic vm) { org.ovirt.engine.core.common.action.MigrateVmToServerParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmToServerParameters(false, vm.getId(), vds.getId()); parameters.setShouldBeLogged(false); return parameters; } })); org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); executionContext.setMonitored(true); org.ovirt.engine.core.bll.Backend.getInstance().runInternalMultipleActions(VdcActionType.MigrateVmToServer, vmToServerParametersList, executionContext); } } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.VdsEventListener.log.errorFormat("Failed to initialize Vds on up. Error: {0}", e); } }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.VmDevice entity) { return createIdParameterMapper(entity.getId()).addValue("device", entity.getDevice()).addValue("type", entity.getType().getValue()).addValue("address", entity.getAddress()).addValue("boot_order", entity.getBootOrder()).addValue("spec_params", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(entity.getSpecParams())).addValue("is_managed", entity.getIsManaged()).addValue("is_plugged", entity.getIsPlugged()).addValue("is_readonly", entity.getIsReadOnly()).addValue("alias", entity.getAlias()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(entity.getCustomProperties())).addValue("snapshot_id", entity.getSnapshotId()).addValue("logical_name", entity.getLogicalName()); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (((getAllUpServers()) == null) || (getAllUpServers().isEmpty())) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_NO_UP_SERVER_FOUND); return false; } return true; }
protected void addVmNetwork() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> nics = getVmInterfaces(); org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(org.ovirt.engine.core.bll.AddVmCommand.getMacPool()); vmInterfaceManager.sortVmNics(nics, getVmInterfaceDevices()); java.util.List<java.lang.String> macAddresses = org.ovirt.engine.core.bll.AddVmCommand.getMacPool().allocateMacAddresses(nics.size()); for (int i = 0; i < (nics.size()); ++i) { org.ovirt.engine.core.common.businessentities.network.VmNic iface = nics.get(i); org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.compat.Guid.newGuid(); srcVmNicIdToTargetVmNicIdMapping.put(iface.getId(), id); iface.setId(id); iface.setMacAddress(macAddresses.get(i)); iface.setSpeed(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(iface.getType()).getSpeed()); iface.setVmTemplateId(null); iface.setVmId(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getId()); updateProfileOnNic(iface); org.ovirt.engine.core.bll.AddVmCommand.getVmNicDao().save(iface); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(iface); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkStatisticsDao().save(iface.getStatistics()); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(iface.getStatistics()); } }
private void oSType_SelectedItemChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.Integer osType = ((java.lang.Integer) (getOSType().getSelectedItem())); setIsWindowsOS(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType(osType)); setIsLinuxOS(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isLinuxOsType(osType)); getInitrd_path().setIsChangable(getIsLinuxOS()); getInitrd_path().setIsAvailable(getIsLinuxOS()); getKernel_path().setIsChangable(getIsLinuxOS()); getKernel_path().setIsAvailable(getIsLinuxOS()); getKernel_parameters().setIsChangable(getIsLinuxOS()); getKernel_parameters().setIsAvailable(getIsLinuxOS()); getDomain().setIsChangable(getIsWindowsOS()); getBehavior().updateDefaultTimeZone(); }



@org.junit.Test public void onlyOutboundAveragePresent() { qos.setOutboundAverage(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_MEDIUM); valuesPresentTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_MISSING_VALUES)); }


@org.junit.Test public void testIscsiLunCanBeAdded() { org.ovirt.engine.core.common.businessentities.LunDisk disk = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createISCSILunDisk(); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createParameters(); parameters.setDiskInfo(disk); initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid(), parameters); when(diskLunMapDAO.getDiskIdByLunId(disk.getLun().getLUN_id())).thenReturn(null); assertTrue("checkIfLunDiskCanBeAdded() failed for valid iscsi lun", command.checkIfLunDiskCanBeAdded()); }
public void setKsmCpuPercent(java.lang.Integer value) { this.mVdsStatistics.setKsmCpuPercent(value); }




@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.ActionReturnValue returnValue = new org.ovirt.engine.core.common.action.ActionReturnValue(); final org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVdsId(); final java.lang.String sessionId = org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getSessionId(); if (new org.ovirt.engine.core.bll.pm.HostFenceActionExecutor(org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVds()).isHostPoweredOff()) { returnValue.setSucceeded(true); } else { returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.StopVds); if ((org.ovirt.engine.core.bll.pm.RestartVdsCommand.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.ActionType.VdsNotRespondingTreatment)) { updateHostInFenceFlow(vdsId, true); } } if (wasSkippedDueToPolicy(returnValue)) { org.ovirt.engine.core.bll.pm.RestartVdsResult restartVdsResult = new org.ovirt.engine.core.bll.pm.RestartVdsResult(); restartVdsResult.setSkippedDueToFencingPolicy(true); setActionReturnValue(restartVdsResult); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); setVdsStatus(VDSStatus.NonResponsive); return; } else if (returnValue.getSucceeded()) { executeFenceVdsManuallyAction(vdsId, sessionId); returnValue = executeVdsFenceAction(vdsId, sessionId, ActionType.StartVds); setSucceeded(returnValue.getSucceeded()); } else { handleError(); org.ovirt.engine.core.bll.pm.RestartVdsCommand.setSucceeded(false); } if (!(org.ovirt.engine.core.bll.pm.RestartVdsCommand.getSucceeded())) { log.warn("Restart host action failed, updating host '{}' to '{}'", vdsId, VDSStatus.NonResponsive.name()); setVdsStatus(VDSStatus.NonResponsive); } updateHostInFenceFlow(vdsId, false); }
private void InitVdsBroker() { org.ovirt.engine.core.vdsbroker.VdsManager.log.infoFormat("Initialize vdsBroker ({0},{1})", _vds.getHostName(), _vds.getPort()); _vdsProxy = new org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerWrapper(_vds.getHostName(), _vds.getPort()); }
java.util.List<org.ovirt.engine.core.common.businessentities.network> getAllForCluster(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered);
public static org.ovirt.engine.core.common.businessentities.LdapUser getUserByUserGuid(org.ovirt.engine.core.compat.Guid userGuid) { org.ovirt.engine.core.common.businessentities.LdapUser retVal = null; org.ovirt.engine.core.common.businessentities.DbUser dbUser = org.ovirt.engine.core.bll.adbroker.InternalBrokerUtils.getDbUserDAO().get(userGuid); if (dbUser != null) { retVal = new org.ovirt.engine.core.common.businessentities.LdapUser(dbUser); } return retVal; }
@org.junit.Test public void calculateNetworkImplementationDetailsNetworkQosOutOfSync() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice(); org.ovirt.engine.core.common.businessentities.network.NetworkQoS qos = createQos(); qos.setOutboundAverage(30); qos.setOutboundPeak(30); qos.setOutboundBurst(30); calculateNetworkImplementationDetailsAndAssertSync(iface, false, iface.getNetworkName(), iface.isBridged(), iface.getMtu(), iface.getVlanId(), qos); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType parse(java.lang.CharSequence text) throws java.text.ParseException { if (org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(text.toString())) { return null; } return org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType.valueOf(text.toString().toUpperCase()); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.VDSGroup.class, to = org.ovirt.engine.api.model.SchedulingPolicy.class) public static org.ovirt.engine.api.model.SchedulingPolicy map(org.ovirt.engine.core.common.businessentities.VDSGroup entity, org.ovirt.engine.api.model.SchedulingPolicy template) { org.ovirt.engine.api.model.SchedulingPolicy model = (template != null) ? template : new org.ovirt.engine.api.model.SchedulingPolicy(); if ((entity.getselection_algorithm()) != null) { model.setPolicy(org.ovirt.engine.api.restapi.types.ClusterMapper.map(entity.getselection_algorithm(), null)); if (model.isSetPolicy()) { model.setThresholds(new org.ovirt.engine.api.model.SchedulingPolicyThresholds()); switch (entity.getselection_algorithm()) { case PowerSave : model.getThresholds().setLow(entity.getlow_utilization()); case EvenlyDistribute : model.getThresholds().setHigh(entity.gethigh_utilization()); model.getThresholds().setDuration(((entity.getcpu_over_commit_duration_minutes()) * 60)); break; default : break; } } } return model; }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VmManagementParametersBase param = getUpdateVmParameters(applyCpuChangesLater); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UpdateVm, param, new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModelNetworkAsyncCallback(model, defaultNetworkCreatingManager, gettempVm().getId()), this); }
private void activate() { for (org.ovirt.engine.core.extensions.mgr.ExtensionManager.ExtensionEntry entry : loadedEntries.values()) { if (entry.enabled) { try { entry.extension = ((org.ovirt.engine.core.extensions.mgr.Extension) (lookupService(org.ovirt.engine.core.extensions.mgr.Extension.class, entry.getConfig().getProperty(org.ovirt.engine.core.extensions.mgr.ExtensionManager.CLASS), entry.getConfig().getProperty(org.ovirt.engine.core.extensions.mgr.ExtensionManager.MODULE)).newInstance())); entry.extension.setContext(entry.context); entry.extension.init(); activatedEntries.put(entry.getName(), entry); org.ovirt.engine.core.utils.collections.MultiValueMapUtils.addToMap(entry.getProvides(), entry, providesEntries); } catch (java.lang.Exception ex) { org.ovirt.engine.core.extensions.mgr.ExtensionManager.log.error(java.lang.String.format("Error in activating extension %1$s. Exception message is %2$s", entry.getName(), ex.getMessage())); if (org.ovirt.engine.core.extensions.mgr.ExtensionManager.log.isDebugEnabled()) { org.ovirt.engine.core.extensions.mgr.ExtensionManager.log.error("", ex); } } } } }

public void setGroupNames(java.util.LinkedList<java.lang.String> value) { groupNames = value; }
public void notifyVdsJobProgress(org.ovirt.engine.core.compat.Guid jobId, org.ovirt.engine.core.common.businessentities.VdsJob obj) { org.ovirt.engine.core.common.JobListener listener = jobListeners.get(jobId); }
@org.junit.Test public void sameBondNameSentTwice() { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = createBond(org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME, null); mockExistingIfaces(bond); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(bond, bond)); validateAndExpectViolation(helper, VdcBllMessages.NETWORK_INTERFACES_ALREADY_SPECIFIED, bond.getName()); }
private void UpdateVmTemplate() { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().update(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateSmartcardDevice(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplateId(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().getVmTemplateData().isSmartcardEnabled()); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__EXPORT); addCanDoActionMessage(EngineMessage.VAR__TYPE__VM_DISK); }



public void setHighlyAvailableIsConfigured(boolean value) { this.mVdsStatistics.setHighlyAvailableIsConfigured(value); }
public void setIsExecutionAllowed(boolean value) { if ((isExecutionAllowed) != value) { isExecutionAllowed = value; if (value) { getExecuteProhibitionReasons().clear(); } onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("IsExecutionAllowed")); } }
public static void GetClusterDesktopMemoryOverCommit(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 0; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommit, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }
public void remove() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeQuotaAssignmentFromUsersTitle()); model.setHashName("remove_quota_assignment_from_user"); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.permissions item : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.permissions>cast(getSelectedItems())) { list.add(item.getOwnerName()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnRemove", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.roles role) { if (role.getis_readonly()) { return getApplicationResources().lockImage(); } return null; }
private static void translateErrors(java.util.List<org.ovirt.engine.core.common.action.VdcReturnValueBase> errors) { for (org.ovirt.engine.core.common.action.VdcReturnValueBase retVal : errors) { retVal.setCanDoActionMessages(org.ovirt.engine.ui.frontend.Frontend.canDoActionErrorsTranslator.translateErrorText(retVal.getCanDoActionMessages())); } }
protected void addVmInterfaces() { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(); java.util.List<java.lang.String> invalidNetworkNames = new java.util.ArrayList<>(); java.util.List<java.lang.String> invalidIfaceNames = new java.util.ArrayList<>(); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.Network> networksInClusterByName = org.ovirt.engine.core.common.businessentities.Entities.entitiesByName(org.ovirt.engine.core.bll.ImportVmCommand.getNetworkDAO().getAllForCluster(getVm().getVdsGroupId())); java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> vnicProfilesInDc = org.ovirt.engine.core.bll.ImportVmCommand.getDbFacade().getVnicProfileViewDao().getAllForDataCenter(org.ovirt.engine.core.bll.ImportVmCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : getVm().getInterfaces()) { initInterface(iface); if (!(vmInterfaceManager.updateNicWithVnicProfile(iface, getVdsGroup().getcompatibility_version(), networksInClusterByName, vnicProfilesInDc, org.ovirt.engine.core.bll.ImportVmCommand.getCurrentUser().getUserId()))) { markNicHasNoProfile(invalidNetworkNames, invalidIfaceNames, iface); } vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.ImportVmCommand.getCompensationContext(), getParameters().isImportAsNewEntity(), getVdsGroup().getcompatibility_version()); macsAdded.add(iface.getMacAddress()); } org.ovirt.engine.core.bll.ImportVmCommand.auditInvalidInterfaces(invalidNetworkNames, invalidIfaceNames); }

@org.junit.Test public void nameExists() { newPoolNameIsAlreadyTaken(); canDoActionFailed(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NAME_ALREADY_EXIST); }
private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.VdcBllErrors errorCode) { doReturn(backend).when(cmd).getBackend(); when(backend.getResourceManager()).thenReturn(vdsBrokerFrontend); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } when(vdsBrokerFrontend.RunVdsCommand(eq(VDSCommandType.AddGlusterHook), argThat(anyHookVDS()))).thenReturn(vdsReturnValue); }
@org.junit.Test public void clusterAlreadyInLocalFs() { createCommandWithDefaultVdsGroup(); oldGroupIsDetachedDefault(); storagePoolIsLocalFS(); cpuExists(); cpuManufacturersMatch(); allQueriesForVms(); storagePoolAlreadyHasCluster(); architectureIsUpdatable(); canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE); }
private void OSType_SelectedItemChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.core.common.businessentities.VmOsType osType = ((org.ovirt.engine.core.common.businessentities.VmOsType) (getOSType().getSelectedItem())); setIsWindowsOS(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsWindowsOsType(osType)); setIsLinuxOS(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsLinuxOsType(osType)); getInitrd_path().setIsChangable(getIsLinuxOS()); getInitrd_path().setIsAvailable(getIsLinuxOS()); getKernel_path().setIsChangable(getIsLinuxOS()); getKernel_path().setIsAvailable(getIsLinuxOS()); getKernel_parameters().setIsChangable(getIsLinuxOS()); getKernel_parameters().setIsAvailable(getIsLinuxOS()); getDomain().setIsChangable(getIsWindowsOS()); if ((getTimeZone().getSelectedItem()) == null) { getBehavior().updateTimeZone(); } else { getBehavior().updateTimeZone(((java.util.Map.Entry<java.lang.String, java.lang.String>) (getTimeZone().getSelectedItem())).getKey()); } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("The relevant Data-Center is not active.") java.lang.String relevantDCnotActive();
private void handleInactiveStorageDomain(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.debug(("Storage domain id '{}', is not active, and therefore could not be refreshed for '{}'" + " file type (Iso domain status is '{}')."), storageDomainId, imageType, status); }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to configure Host's Network physical interfaces (Nics)") java.lang.String allowToConfigureHostsNetworkPhysicalInterfacesRoleTreeTooltip();
void localize(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { pathLabel.setText(constants.storagePopupPosixPathLabel()); pathHintLabel.setText(constants.storagePopupPosixPathHintLabel()); vfsTypeLabel.setText(constants.storagePopupVfsTypeLabel()); mountOptionsLabel.setText(constants.storagePopupMountOptionsLabel()); nfsPosixAlertIcon.setTitle(constants.storagePopupPosixNfsWarningLabel()); }

@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.VolumeSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.volumes.VolumeListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.gluster.SubTabVolumePermissionPresenter.constants.volumePermissionSubTabLabel(), 3, modelProvider); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc glusterVolumeRebalanceStatus(java.lang.String volumeName) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.rebalanceStatus").withParameter("volumeName", volumeName).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc(response); }
private java.lang.String[] createIncoherentNetworkIdentificationErrorReplacements(org.ovirt.engine.core.compat.Guid violatingEntityId, org.ovirt.engine.core.compat.Guid networkId, java.lang.String networkName) { return new java.lang.String[]{ java.lang.String.format("$id %s", violatingEntityId), java.lang.String.format("$networkId %s", networkId), java.lang.String.format("$networkName %s", networkName) }; }
@java.lang.Override public boolean getSpiceFullScreen() { return placeManager.isMainSectionBasicPlaceVisible(); }
public void maintenance() { if ((getConfirmWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().maintenanceHostsTitle()); model.setHelpTag(HelpTag.maintenance_host); model.setHashName("maintenance_host"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().areYouSureYouWantToPlaceFollowingHostsIntoMaintenanceModeMsg()); java.util.ArrayList<java.lang.String> vdss = new java.util.ArrayList<java.lang.String>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (item)); vdss.add(vds.getName()); } model.setItems(vdss); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnMaintenance", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirm", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
private void handleNonResponsiveHosts(java.util.List<java.lang.String> hostNotRespondingList) { if (!(hostNotRespondingList.isEmpty())) { addCanDoActionMessage(EngineMessage.VDS_CANNOT_MAINTENANCE_VDS_IS_NOT_RESPONDING_WITH_VMS); org.ovirt.engine.core.bll.MaintenanceNumberOfVdssCommand.getReturnValue().getCanDoActionMessages().add(java.lang.String.format("$HostNotResponding %1$s", org.apache.commons.lang.StringUtils.join(hostNotRespondingList, ","))); } }
public static void GetClusterList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid dataCenterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> list = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>) (source)); java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer()); return list; } return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVdsGroupsByStoragePoolId, new org.ovirt.engine.core.common.queries.StoragePoolQueryParametersBase(dataCenterId), aQuery); }

@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.authentication.DirectoryUser.class, to = org.ovirt.engine.api.model.User.class) public static org.ovirt.engine.api.model.User map(org.ovirt.engine.core.authentication.DirectoryUser entity, org.ovirt.engine.api.model.User template) { org.ovirt.engine.api.model.User model = (template != null) ? template : new org.ovirt.engine.api.model.User(); model.setName(entity.getFirstName()); model.setUserName((((entity.getName()) + "@") + (entity.getDirectory().getName()))); model.setId(entity.getId().toHex()); model.setLastName(entity.getLastName()); model.setEmail(entity.getEmail()); model.setDepartment(entity.getDepartment()); if ((entity.getGroups()) != null) { model.setGroups(new org.ovirt.engine.api.model.Groups()); for (org.ovirt.engine.core.authentication.DirectoryGroup directoryGroup : entity.getGroups()) { org.ovirt.engine.api.model.Group group = new org.ovirt.engine.api.model.Group(); group.setName(directoryGroup.getName()); model.getGroups().getGroups().add(group); } } if (!(org.apache.commons.lang.StringUtils.isEmpty(entity.getDirectory().getName()))) { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain(); dom.setId(new org.ovirt.engine.core.compat.Guid(entity.getDirectory().getName().getBytes(), true).toString()); model.setDomain(dom); } return model; }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (!(getGlusterVolume().isOnline())) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); return false; } if (((getParameters().getExistingBrick()) == null) || ((getParameters().getNewBrick()) == null)) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_BRICKS_REQUIRED); return false; } if (!(updateBrickServerAndInterfaceName(getParameters().getExistingBrick(), true))) { return false; } if (!(updateBrickServerAndInterfaceName(getParameters().getNewBrick(), true))) { return false; } if (!(isValidVolumeBrick(getParameters().getExistingBrick()))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NOT_A_GLUSTER_VOLUME_BRICK); return false; } return true; }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepConfigReset(java.lang.String volumeName, java.lang.String slaveHost, java.lang.String slaveVolumeName, java.lang.String configKey);

@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue)); updateBootableFrom(disks); }


@org.junit.Test public void testJsonNullDiskDescription() throws java.io.IOException { java.lang.String jsonDescription = org.ovirt.engine.core.bll.ImagesHandler.getJsonDiskDescription("DiskAlias", null); assertEquals("Should be map of disk alias and disk description", "{\"DiskAlias\":\"DiskAlias\",\"DiskDescription\":\"\"}", jsonDescription); }
@java.lang.Override protected void executeCommand() { updateQuotaCache(); if ((_oldStoragePool.getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Up)) { if (!(org.apache.commons.lang.StringUtils.equals(_oldStoragePool.getName(), org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getName()))) { runVdsCommand(VDSCommandType.SetStoragePoolDescription, new org.ovirt.engine.core.common.vdscommands.SetStoragePoolDescriptionVDSCommandParameters(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getName())); } } org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.copyUnchangedStoragePoolProperties(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool(), _oldStoragePool); org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePoolDAO().updatePartial(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool()); updateStoragePoolFormatType(); org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.setSucceeded(true); }

@java.lang.Override protected org.ovirt.engine.core.common.businessentities.VmNetworkInterface setNetwork(org.ovirt.engine.api.model.NIC device, org.ovirt.engine.core.common.businessentities.VmNetworkInterface ni) { if (device.isSetNetwork()) { org.ovirt.engine.core.compat.Guid clusterId = getEntity(org.ovirt.engine.core.common.businessentities.VmTemplate.class, VdcQueryType.GetVmTemplate, new org.ovirt.engine.core.common.queries.GetVmTemplateParameters(parentId), "id").getvds_group_id(); org.ovirt.engine.core.common.businessentities.Network net = lookupClusterNetwork(clusterId, (device.getNetwork().isSetId() ? asGuid(device.getNetwork().getId()) : null), device.getNetwork().getName()); if (net != null) { ni.setNetworkName(net.getname()); } } return ni; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VDS getFirstUpRhelForVdsGroup(org.ovirt.engine.core.compat.Guid vdsGroupId) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vds = getCallsHandler().executeReadList("getFirstUpRhelForVdsGroupId", org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("vds_group_id", vdsGroupId)); return (vds.size()) != 0 ? vds.iterator().next() : null; }
public java.util.List<org.ovirt.engine.core.dal.VdcBllMessages> validate() { java.util.Set<java.lang.String> ifaceNames = new java.util.HashSet<java.lang.String>(); java.util.Set<java.lang.String> bonds = new java.util.HashSet<java.lang.String>(); java.util.Set<java.lang.String> attachedNetworksNames = new java.util.HashSet<java.lang.String>(); java.util.Map<java.lang.String, java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface>> bondSlaves = new java.util.HashMap<java.lang.String, java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface>>(); for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : params.getInterfaces()) { java.lang.String name = iface.getName(); java.lang.String networkName = iface.getNetworkName(); java.lang.String bondName = iface.getBondName(); if (ifaceNames.contains(name)) { violations.add(VdcBllMessages.NETWORK_INTERFACE_NAME_ALREADY_IN_USE); continue; } else { ifaceNames.add(name); } if (isBond(iface)) { extractBondIfModified(bonds, iface, name); } else { if (org.apache.commons.lang.StringUtils.isNotBlank(bondName)) { extractBondSlave(bondSlaves, iface, bondName); } if (!(getExistingIfaces().containsKey(org.ovirt.engine.core.utils.NetworkUtils.StripVlan(name)))) { violations.add(VdcBllMessages.NETWORK_INTERFACE_NOT_EXISTS); } } if ((violations.isEmpty()) && (org.apache.commons.lang.StringUtils.isNotBlank(networkName))) { extractNetwork(attachedNetworksNames, iface, networkName); } } validateBonds(bonds, bondSlaves); detectSlaveChanges(bondSlaves); extractRemoveNetworks(attachedNetworksNames, getExisitingHostNetworkNames()); this.removedBonds = extractRemovedBonds(bonds); return violations; }

@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (getGeoRepSession().getStatus().equals(GeoRepSessionStatus.STOPPED)) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_GEOREP_SESSION_STOPPED); } return true; }

@java.lang.Override public java.lang.Void runInTransaction() { curVm.guestLogoutTimeTreatmentAfterDestroy(); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDao().update(curVm.getDynamicData()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStatisticsDao().update(curVm.getStatisticsData()); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> interfaces = curVm.getInterfaces(); if ((interfaces != null) && ((interfaces.size()) > 0)) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface ifc : interfaces) { org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics stats = ifc.getStatistics(); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkStatisticsDao().update(stats); } } getVds().setMemCommited(((getVds().getMemCommited()) - (curVm.getVmMemSizeMb()))); getVds().setMemCommited(((getVds().getMemCommited()) - (getVds().getGuestOverhead()))); getVds().setVmsCoresCount(((getVds().getVmsCoresCount()) - (curVm.getNumOfCpus()))); _vdsManager.UpdateDynamicData(getVds().getDynamicData()); return null; }
protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (getWatchdogs().isEmpty()) { return failCanDoAction(VdcBllMessages.WATCHDOG_NOT_FOUND); } return true; }
public void setEndTime(java.util.Date value) { mUseTimeout = true; mEndTime = value; }
@java.lang.Override protected void executeCommand() { java.sql.Time originalExecutionTime = getSchedule().getExecutionTime(); java.lang.String jobId = scheduleJob(); if (jobId != null) { setSucceeded(true); getSchedule().setJobId(jobId); getSchedule().setExecutionTime(originalExecutionTime); getGlusterVolumeSnapshotScheduleDao().save(getSchedule()); } else { setSucceeded(false); } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Root") java.lang.String rootTag();
@org.junit.Test public void canDoAction() { java.util.List lunsFromDb = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("1"); lun1.setStorageDomainId(sdId); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id("2"); lun2.setStorageDomainId(sdId); lunsFromDb.add(lun1); lunsFromDb.add(lun2); when(lunsDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.RefreshLunsSizeCommandTest.STORAGE)).thenReturn(lunsFromDb); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(cmd); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("backupCheck") public void backupCheck() { if (lock.tryLock()) { try { org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Backup check started."); doBackupCheck(); org.ovirt.engine.core.bll.EngineBackupAwarenessManager.log.info("Backup check completed."); } finally { lock.unlock(); } } }

public void init() { org.ovirt.engine.ui.uicommonweb.ICommandTarget target = ((org.ovirt.engine.ui.uicommonweb.ICommandTarget) (getEntity())); org.ovirt.engine.ui.uicommonweb.UICommand actionCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("OnExecute", this); actionCommand.setTitle(constants.ok()); actionCommand.setIsDefault(true); getCommands().add(actionCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", target); cancelCommand.setTitle(constants.cancel()); cancelCommand.setIsCancel(true); getCommands().add(cancelCommand); }
public java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> getVmInitByIds(java.util.List<org.ovirt.engine.core.compat.Guid> ids, boolean secure) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> all = vmInitDao.getVmInitByIds(ids); for (org.ovirt.engine.core.common.businessentities.VmInit vmInit : all) { if (secure) { vmInit.setPasswordAlreadyStored((!(org.apache.commons.lang.StringUtils.isEmpty(vmInit.getRootPassword())))); vmInit.setRootPassword(null); } else { vmInit.setPasswordAlreadyStored(false); } } return all; }
@org.junit.Test public void invalidVdsGroup() { createSimpleCommand(); when(vdsGroupDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); canDoActionFailedWithReason(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID); }

@java.lang.Override protected void init() { super.init(); setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getContainerId()); setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getStoragePoolId()); imageToDestinationDomainMap = org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getImageToDestinationDomainMap(); if (((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getVm()) != null) && ((org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap()) != null)) { imageList = new java.util.ArrayList(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { imageList.add(((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))); } } } ensureDomainMap(imageList, org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getParameters().getDestDomainId()); }

private void UpdateActionAvailability() { java.util.List tempVar = getSelectedItems(); java.util.ArrayList selectedItems = ((java.util.ArrayList) ((tempVar != null) ? tempVar : new java.util.ArrayList())); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); }
@java.lang.Override protected void executeCommand() { updateVmInitPassword(); org.ovirt.engine.core.bll.VmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVdsGroup().getcompatibility_version()); org.ovirt.engine.core.compat.Guid poolId = getPoolId(); boolean isAtLeastOneVMCreationFailed = false; setActionReturnValue(poolId); org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid(), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getCompensationContext()); int subsequentFailedAttempts = 0; int vmPoolMaxSubsequentFailures = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VmPoolMaxSubsequentFailures); for (int i = 0; i < (org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmsCount()); i++) { java.lang.String currentVmName = generateUniqueVmName(); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.AddVmAndAttachToPool, buildAddVmAndAttachToPoolParameters(poolId, currentVmName), createAddVmStepContext(currentVmName)); if (((returnValue != null) && (!(returnValue.getSucceeded()))) && (!(returnValue.getCanDoActionMessages().isEmpty()))) { for (java.lang.String msg : returnValue.getCanDoActionMessages()) { if (!(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue().getCanDoActionMessages().contains(msg))) { org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue().getCanDoActionMessages().add(msg); } } addVmsSucceded = (returnValue.getSucceeded()) && (addVmsSucceded); subsequentFailedAttempts++; } else { subsequentFailedAttempts = 0; } if (subsequentFailedAttempts == vmPoolMaxSubsequentFailures) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.USER_VM_POOL_MAX_SUBSEQUENT_FAILURES_REACHED); break; } isAtLeastOneVMCreationFailed = isAtLeastOneVMCreationFailed || (!(addVmsSucceded)); } org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue().setCanDoAction((!isAtLeastOneVMCreationFailed)); org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.setSucceeded((!isAtLeastOneVMCreationFailed)); org.ovirt.engine.core.bll.VmTemplateHandler.unlockVmTemplate(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().getVmtGuid()); org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getCompensationContext().resetCompensation(); }
private java.lang.String getJsonDiskDescription() throws java.io.IOException { return org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.getInstance().generateJsonDiskDescription(org.ovirt.engine.core.bll.UpdateVmDiskCommand.getParameters().getDiskInfo()); }

protected boolean hostToRunExist() { java.util.List<org.ovirt.engine.core.compat.Guid> dedicatedHostsList = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getDedicatedVmForVdsList(); if (dedicatedHostsList.isEmpty()) { return true; } for (org.ovirt.engine.core.compat.Guid candidateHostGuid : dedicatedHostsList) { if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(candidateHostGuid)) == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST); return false; } } return true; }


@java.lang.Override public org.ovirt.engine.core.common.businessentities.StorageServerConnections mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.StorageServerConnections entity = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); entity.setconnection(rs.getString("connection")); entity.setid(rs.getString("id")); entity.setiqn(rs.getString("iqn")); entity.setport(rs.getString("port")); entity.setportal(rs.getString("portal")); entity.setpassword(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.decryptPassword(rs.getString("password"))); entity.setstorage_type(org.ovirt.engine.core.common.businessentities.storage.StorageType.forValue(rs.getInt("storage_type"))); entity.setuser_name(rs.getString("user_name")); entity.setMountOptions(rs.getString("mount_options")); entity.setVfsType(rs.getString("vfs_type")); entity.setNfsVersion(((rs.getString("nfs_version")) != null ? org.ovirt.engine.core.common.businessentities.NfsVersion.forValue(rs.getString("nfs_version")) : null)); entity.setNfsRetrans(org.ovirt.engine.core.dao.StorageServerConnectionDAODbFacadeImpl.getShort(rs, "nfs_retrans")); entity.setNfsTimeo(org.ovirt.engine.core.dao.StorageServerConnectionDAODbFacadeImpl.getShort(rs, "nfs_timeo")); return entity; }
@java.lang.Override protected void readGeneralData(org.ovirt.engine.core.compat.backendcompat.XmlNode content) { org.ovirt.engine.core.compat.backendcompat.XmlNode node = content.SelectSingleNode("Name"); if (node != null) { _vmTemplate.setName(node.innerText); name = _vmTemplate.getName(); } node = content.SelectSingleNode("TemplateId"); if (node != null) { if (org.apache.commons.lang.StringUtils.isNotEmpty(node.innerText)) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(node.innerText)); } } node = content.SelectSingleNode("IsDisabled"); if (node != null) { _vmTemplate.setDisabled(java.lang.Boolean.parseBoolean(node.innerText)); } node = content.SelectSingleNode("TrustedService"); if (node != null) { _vmTemplate.setTrustedService(java.lang.Boolean.parseBoolean(node.innerText)); } node = content.SelectSingleNode("TemplateType"); if (node != null) { _vmTemplate.setTemplateType(org.ovirt.engine.core.common.businessentities.VmEntityType.valueOf(node.innerText)); } node = content.SelectSingleNode("BaseTemplateId"); if (node != null) { _vmTemplate.setBaseTemplateId(org.ovirt.engine.core.compat.Guid.createGuidFromString(node.innerText)); } else { _vmTemplate.setBaseTemplateId(_vmTemplate.getId()); } node = content.SelectSingleNode("TemplateVersionNumber"); if (node != null) { _vmTemplate.setTemplateVersionNumber(java.lang.Integer.parseInt(node.innerText)); } node = content.SelectSingleNode("TemplateVersionName"); if (node != null) { _vmTemplate.setTemplateVersionName(node.innerText); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { onExportChanged(); }


public void setEntity(java.lang.Object value) { if ((entity) != value) { EntityChanging(value, entity); entity = value; OnEntityChanged(); getEntityChangedEvent().raise(this, EventArgs.Empty); OnPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("Entity")); } }


@java.lang.Override public abstract void onLogout();
@org.junit.Test public void testGetAllForAdElementFilteredWithNoPermissions() { java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> result = dao.getAllForAdElement(org.ovirt.engine.core.dao.PermissionDAOTest.AD_ELEMENT_ID, org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID, true); org.ovirt.engine.core.dao.PermissionDAOTest.assertInvalidGetPermissionList(result); }
private void removeUnselectableHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.compat.Guid run_on_vds, boolean allRunOnSameVds) { if ((getVmsOnSameCluster()) && allRunOnSameVds) { org.ovirt.engine.core.common.businessentities.VDS runOnSameVDS = null; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getId().equals(run_on_vds)) { runOnSameVDS = host; } } hosts.remove(runOnSameVDS); } }
protected boolean migrateVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.job.ExecutionContext parentContext) { org.ovirt.engine.core.common.action.InternalMigrateVmParameters parameters = new org.ovirt.engine.core.common.action.InternalMigrateVmParameters(vm.getId(), org.ovirt.engine.core.bll.MaintenanceVdsCommand.getActionType()); parameters.setMigrationReason(new org.ovirt.engine.core.common.migration.MigrationReason(MigrationReason.Type.HOST_IN_MAINTENANCE)); return runInternalAction(VdcActionType.InternalMigrateVm, parameters, createMigrateVmContext(parentContext, vm)).getSucceeded(); }
org.ovirt.engine.core.common.job.Step getStep(org.ovirt.engine.core.compat.Guid stepId);




public static java.lang.String createAndTranslate(java.lang.Enum<?> enumObj) { java.lang.String title = org.ovirt.engine.ui.uicompat.EnumTranslator.constants.notAvailableLabel(); if (enumObj != null) { org.ovirt.engine.ui.uicompat.Translator translator = org.ovirt.engine.ui.uicompat.EnumTranslator.create(enumObj.getDeclaringClass()); title = enumObj.name(); try { title = translator.get(enumObj); } catch (java.util.MissingResourceException e) { org.ovirt.engine.ui.uicompat.EnumTranslator.logger.info(("Missing Enum resource: " + (e.getLocalizedMessage()))); } } return title; }

@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.HostDeviceView object) { return (object.getMdevTypes()) == null ? "" : java.lang.String.join(", ", object.getMdevTypes()); }

protected boolean isDiskPlugged() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices = getVmDeviceDao().getVmDevicesByDeviceId(getImageGroupId(), org.ovirt.engine.core.bll.RemoveDiskSnapshotsCommand.getVmId()); return (!(devices.isEmpty())) && (devices.get(0).getIsPlugged()); }
private static void saveToDb(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.AuditLogType logType, java.lang.String loggerString) { java.lang.String message = null; java.lang.String resolvedMessage = null; org.ovirt.engine.core.common.AuditLogSeverity severity = logType.getSeverity(); if (severity == null) { severity = org.ovirt.engine.core.common.AuditLogSeverity.NORMAL; org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.infoFormat("No severity for {0} audit log type, assuming Normal severity", logType); } org.ovirt.engine.core.common.businessentities.AuditLog auditLog = null; if (auditLogable.isExternal()) { resolvedMessage = message = loggerString; auditLog = new org.ovirt.engine.core.common.businessentities.AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), ((auditLogable.getUserId()) != null ? org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getDbFacadeInstance().getDbUserDao().get(auditLogable.getUserId()).getLoginName() : null), auditLogable.getVmIdRef(), ((auditLogable.getVmIdRef()) != null ? org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getDbFacadeInstance().getVmDao().get(auditLogable.getVmIdRef()).getName() : null), auditLogable.getVdsIdRef(), ((auditLogable.getVdsIdRef()) != null ? org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getDbFacadeInstance().getVdsDao().get(auditLogable.getVdsIdRef()).getName() : null), auditLogable.getVmTemplateIdRef(), ((auditLogable.getVmTemplateIdRef()) != null ? org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getDbFacadeInstance().getVmTemplateDao().get(auditLogable.getVmTemplateIdRef()).getName() : null), auditLogable.getOrigin(), auditLogable.getCustomEventId(), auditLogable.getEventFloodInSec(), auditLogable.getCustomData()); } else if ((message = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.messages.get(logType)) != null) { resolvedMessage = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.resolveMessage(message, auditLogable); auditLog = new org.ovirt.engine.core.common.businessentities.AuditLog(logType, severity, resolvedMessage, auditLogable.getUserId(), auditLogable.getUserName(), auditLogable.getVmIdRef(), auditLogable.getVmName(), auditLogable.getVdsIdRef(), auditLogable.getVdsName(), auditLogable.getVmTemplateIdRef(), auditLogable.getVmTemplateName()); } if (auditLog != null) { auditLog.setstorage_domain_id(auditLogable.getStorageDomainId()); auditLog.setstorage_domain_name(auditLogable.getStorageDomainName()); auditLog.setstorage_pool_id(auditLogable.getStoragePoolId()); auditLog.setstorage_pool_name(auditLogable.getStoragePoolName()); auditLog.setvds_group_id(auditLogable.getVdsGroupId()); auditLog.setvds_group_name(auditLogable.getVdsGroupName()); auditLog.setCorrelationId(auditLogable.getCorrelationId()); auditLog.setJobId(auditLogable.getJobId()); auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId()); auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName()); auditLog.setExternal(auditLogable.isExternal()); auditLog.setQuotaId(auditLogable.getQuotaIdForLog()); auditLog.setQuotaName(auditLogable.getQuotaNameForLog()); auditLog.setCallStack(auditLogable.getCallStack()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.getDbFacadeInstance().getAuditLogDao().save(auditLog); java.lang.String logMessage; if (!("".equals(loggerString))) { logMessage = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.transform(loggerString, resolvedMessage); } else { logMessage = auditLog.toStringForLogging(); } switch (severity) { case NORMAL : org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.info(logMessage); break; case ERROR : org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.error(logMessage); break; case ALERT : case WARNING : org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.warn(logMessage); break; } } }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); org.ovirt.engine.core.dao.VdsDAO vdsDAO = dbFacade.getVdsDao(); existingVds = vdsDAO.get(FixturesTool.VDS_RHEL6_NFS_SPM); org.ovirt.engine.core.dao.StoragePoolDAO storagePoolDAO = dbFacade.getStoragePoolDao(); storagePool = storagePoolDAO.get(FixturesTool.STORAGE_POOL_RHEL6_ISCSI_OTHER); dao = dbFacade.getVdsGroupDao(); existingVdsGroup = dao.get(existingVds.getVdsGroupId()); groupWithNoRunningVms = dbFacade.getVdsGroupDao().get(FixturesTool.VDS_GROUP_NO_RUNNING_VMS); newGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup(); newGroup.setName("New VDS Group"); newGroup.setcompatibility_version(new org.ovirt.engine.core.compat.Version("3.0")); newGroup.setVirtService(true); newGroup.setGlusterService(false); newGroup.setClusterPolicyId(existingVdsGroup.getClusterPolicyId()); clusterPolicyDao = dbFacade.getClusterPolicyDao(); newGroup.setClusterPolicyName(clusterPolicyDao.get(existingVdsGroup.getClusterPolicyId()).getName()); newGroup.setClusterPolicyProperties(new java.util.LinkedHashMap<java.lang.String, java.lang.String>()); }
private void updateOptionsNonLocalFSData() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostListByCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); clusterGuideModel.hosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); clusterGuideModel.updateOptionsNonLocalFS(); } }), getEntity().getName()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); clusterGuideModel.allHosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); clusterGuideModel.updateOptionsNonLocalFS(); } })); if (getEntity().supportsGlusterService()) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isAnyHostUpInCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel clusterGuideModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); isAnyHostUpInCluster = ((java.lang.Boolean) (returnValue)); clusterGuideModel.updateOptionsNonLocalFS(); } }), getEntity().getName()); } }

@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult Validate(java.lang.String value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); try { new org.ovirt.engine.ui.uicompat.MailAddress(value); } catch (java.lang.RuntimeException e) { result.setSuccess(false); result.getReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().invalidEmailAddressInvalidReason()); } return result; }
@org.junit.Test public void testCanDoActionInstanceNameDuplicate() { cmd.getParameters().setTemplateType(VmEntityType.INSTANCE_TYPE); doReturn(true).when(cmd).isInstanceWithSameNameExists("templateName"); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED); }
@java.lang.Override protected void setObjectName(java.lang.Object object, java.lang.String name, boolean isSuffix) { org.ovirt.engine.core.common.businessentities.VmTemplate template = ((org.ovirt.engine.core.common.businessentities.VmTemplate) (object)); if (isSuffix) { template.setname(((template.getname()) + name)); } else { template.setname(name); } }



@java.lang.Override protected void SortCommands() { java.util.ArrayList<org.ovirt.engine.core.bll.CommandBase<?>> commands = getCommands(); final java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM>(commands.size()); for (org.ovirt.engine.core.bll.CommandBase<?> cmd : commands) { vms.put(cmd.getVmId(), org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(cmd.getVmId())); } java.util.Collections.sort(commands, java.util.Collections.reverseOrder(new java.util.Comparator<org.ovirt.engine.core.bll.CommandBase<?>>() { private final org.ovirt.engine.core.common.businessentities.VmsComparer vmComparator = new org.ovirt.engine.core.common.businessentities.VmsComparer(); @java.lang.Override public int compare(org.ovirt.engine.core.bll.CommandBase<?> o1, org.ovirt.engine.core.bll.CommandBase<?> o2) { org.ovirt.engine.core.common.businessentities.VM vm1 = vms.get(o1.getVmId()); org.ovirt.engine.core.common.businessentities.VM vm2 = vms.get(o2.getVmId()); return vmComparator.Compare(vm1, vm2); } })); }
protected void testAction(org.ovirt.engine.core.common.action.VdcActionType actionType, java.lang.String networkId, java.lang.String networkName) throws java.lang.Exception { org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setNetwork(new org.ovirt.engine.api.model.Network()); if (networkId != null) { action.getNetwork().setId(networkId); } else { action.getNetwork().setName(networkName); } setUpEntityQueryExpectations(VdcQueryType.GetAllNetworks, org.ovirt.engine.core.common.queries.GetAllNetworkQueryParamenters.class, new java.lang.String[]{ "StoragePoolId" }, new java.lang.Object[]{ org.ovirt.engine.core.compat.Guid.Empty }, asList(org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.getNetwork())); setUpEntityQueryExpectations(); setUriInfo(setUpActionExpectations(actionType, org.ovirt.engine.core.common.action.AttachNetworkToVdsParameters.class, new java.lang.String[]{ "VdsId" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendHostNicsResourceTest.PARENT_GUID }, true, true, null, null, true)); if (actionType == (org.ovirt.engine.core.common.action.VdcActionType.AttachNetworkToVdsInterface)) { verifyActionResponse(resource.attach(action)); } else { verifyActionResponse(resource.detach(action)); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForVnicProfile(org.ovirt.engine.core.compat.Guid vNicProfileId) { return getCallsHandler().executeReadList("GetVmsByVnicProfileId", org.ovirt.engine.core.dao.VmDAODbFacadeImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("vnic_profile_id", vNicProfileId)); }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { model.setIsEveryoneSelected(false); model.setIsMyGroupsSelected(true); getView().changeStateOfElementsWhenAccessIsForEveryoneOrMyGroups(false, true); getModel().getSearchMyGroupsCommand().execute(); }
public void refreshHost() { refreshHost(cachedVds); }

private static org.ovirt.engine.core.common.action.InstallVdsParameters createParameters() { org.ovirt.engine.core.common.action.InstallVdsParameters param = new org.ovirt.engine.core.common.action.InstallVdsParameters(org.ovirt.engine.core.compat.Guid.NewGuid(), null); param.setIsReinstallOrUpgrade(true); return param; }
@java.lang.Override public void endSuccessfully() { super.endSuccessfully(); if (getEnclosingCommand().getParameters().getImportAsTemplate()) { org.ovirt.engine.core.compat.Guid newTemplateId = createTemplate(); if (newTemplateId != null) { attachDiskToTemplate(newTemplateId); } } getEnclosingCommand().getParameters().getDiskImage().setImageStatus(ImageStatus.OK); org.ovirt.engine.core.bll.ImagesHandler.updateImageStatus(getEnclosingCommand().getParameters().getDiskImage().getImageId(), ImageStatus.OK); getEnclosingCommand().getReturnValue().setSucceeded(true); }
protected boolean updateVnicForBackwardCompatibility() { org.ovirt.engine.core.bll.network.VmInterfaceManager nicManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(); if (!(validate(nicManager.updateNicForBackwardCompatibility(org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase.getParameters().getInterface(), org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase.getVmTemplate(), org.ovirt.engine.core.bll.network.template.VmTemplateInterfaceCommandBase.getCurrentUser().getUserId())))) { return false; } return true; }

@java.lang.Override public void onPowerringUp() { decreasePendingVm(org.ovirt.engine.core.bll.RunVmCommand.getVmStaticDao().get(org.ovirt.engine.core.bll.RunVmCommand.getVmId())); }
private void mapIpConfiguration(org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper, org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration) { boolean hasPrimaryAddressSet = ipConfiguration.hasPrimaryAddressSet(); org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = (hasPrimaryAddressSet) ? ipConfiguration.getPrimaryAddress() : null; mapper.addValue("boot_protocol", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(ipConfiguration.getBootProtocol())).addValue("address", (hasPrimaryAddressSet ? primaryAddress.getAddress() : null)).addValue("netmask", (hasPrimaryAddressSet ? primaryAddress.getNetmask() : null)).addValue("gateway", (hasPrimaryAddressSet ? primaryAddress.getGateway() : null)); }

@java.lang.Override public java.lang.String toString() { if (!(valid)) { return null; } java.lang.String authority = new java.lang.String(); authority += host; if (!(port.isEmpty())) { authority += ':' + (port); } return authority; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(selectedItemChangedEventDefinition)) { if (sender == (getDataCenter())) { dataCenter_SelectedItemChanged(); } else if (sender == (getHost())) { host_SelectedItemChanged(); } else if (sender == (getAvailableStorageTypeItems())) { setSelectedItem(null); setSelectedItem(getAvailableStorageItems().getSelectedItem()); updateWipeAfterDelete(); } } else if (ev.matchesDefinition(NfsStorageModel.pathChangedEventDefinition)) { nfsStorageModel_PathChanged(sender, args); } }

@org.junit.Test public void testCanDoSuccessOnAddFloatingDiskWithPlugUnset() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createDiskImage(1); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(disk); parameters.setVmId(Guid.Empty); parameters.setPlugDiskToVm(false); org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId, parameters); mockStorageDomain(storageId); mockStoragePoolIsoMap(); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); }


public void disconnect() { if ((_session) != null) { _session.close(true); _session = null; } if ((_client) != null) { _client.stop(); _client = null; } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.network.ExternalSubnet.class, to = org.ovirt.engine.api.model.OpenStackSubnet.class) public static org.ovirt.engine.api.model.OpenStackSubnet map(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet entity, org.ovirt.engine.api.model.OpenStackSubnet template) { org.ovirt.engine.api.model.OpenStackSubnet model = (template != null) ? template : new org.ovirt.engine.api.model.OpenStackSubnet(); if ((entity.getId()) != null) { model.setId(entity.getId()); } if ((entity.getName()) != null) { model.setName(entity.getName()); } if ((entity.getCidr()) != null) { model.setCidr(entity.getCidr()); } if ((entity.getIpVersion()) != null) { model.setIpVersion(org.ovirt.engine.api.restapi.types.IpVersionMapper.map(entity.getIpVersion()).value()); } if ((entity.getGateway()) != null) { model.setGateway(entity.getGateway()); } java.util.List<java.lang.String> entityDnsServers = entity.getDnsServers(); if ((entityDnsServers != null) && (!(entityDnsServers.isEmpty()))) { org.ovirt.engine.api.model.DnsServers modelDnsServers = new org.ovirt.engine.api.model.DnsServers(); for (java.lang.String entityDnsServer : entityDnsServers) { modelDnsServers.getDnsServers().add(entityDnsServer); } model.setDnsServers(modelDnsServers); } return model; }
@java.lang.Override protected boolean canDoAction() { if ((getNic()) == null) { return failCanDoAction(VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST); } if (((getNic().getLabels()) != null) && (getNic().getLabels().contains(getLabel()))) { return failCanDoAction(VdcBllMessages.INTERFACE_ALREADY_LABELED); } if (!(org.ovirt.engine.core.common.utils.ValidationUtils.validateInputs(org.ovirt.engine.core.bll.network.host.LabelNicCommand.getValidationGroups(), getNic()).isEmpty())) { return failCanDoAction(VdcBllMessages.IMPROPER_INTERFACE_IS_LABELED); } return true; }
@org.junit.Test public void testPositiveCanDoActionWithDisks() { setUpGeneralValidations(); setUpDiskValidations(); doReturn(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getNonEmptyDiskList()).when(cmd).getDisksList(); doReturn(org.ovirt.engine.core.compat.Guid.newGuid()).when(cmd).getStorageDomainId(); assertTrue(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().isEmpty()); }





protected void addVmStatic() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData(); if ((vmStatic.getOrigin()) == null) { vmStatic.setOrigin(org.ovirt.engine.core.common.businessentities.OriginType.valueOf(org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.OriginType))); } vmStatic.setId(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); vmStatic.setQuotaId(getQuotaId()); vmStatic.setCreationDate(new java.util.Date()); vmStatic.setCreatedByUserId(org.ovirt.engine.core.bll.AddVmCommand.getUserId()); org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.bll.AddVmCommand.getVdsGroupDAO().get(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getVdsGroupId()); vmStatic.setArchitecture(vdsGroup.getArchitectureType()); if ((vmStatic.getCustomProperties()) != null) { org.ovirt.engine.core.utils.customprop.VmPropertiesUtils.VMCustomProperties properties = org.ovirt.engine.core.utils.customprop.VmPropertiesUtils.getInstance().parseProperties(org.ovirt.engine.core.bll.AddVmCommand.getVdsGroupDAO().get(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getVdsGroupId()).getcompatibility_version(), vmStatic.getCustomProperties()); java.lang.String predefinedProperties = properties.getPredefinedProperties(); java.lang.String userDefinedProperties = properties.getUseDefinedProperties(); vmStatic.setPredefinedProperties(predefinedProperties); vmStatic.setUserDefinedProperties(userDefinedProperties); } getVmStaticDao().save(vmStatic); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(vmStatic); }
private boolean isOutAverageLinkShareInSync() { return org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(ifaceQos.getOutAverageLinkshare(), networkQos.getOutAverageLinkshare()); }

@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { return (disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE) ? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)).getImageId().toString() : null; }
@java.lang.Override protected void executeVmCommand() { org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateVmDevices(org.ovirt.engine.core.bll.RunVmCommand.getVm().getStaticData()); setActionReturnValue(VMStatus.Down); initVm(); if ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Paused)) { resumeVm(); } else { if (((!(_isRerun)) && (java.lang.Boolean.TRUE.equals(org.ovirt.engine.core.bll.RunVmCommand.getParameters().getRunAsStateless()))) && ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Suspended))) { if (org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskList().isEmpty()) { warnIfNotAllDisksPermitSnapshots(); runVm(); } else { statelessVmTreatment(); } } else if (((((!(org.ovirt.engine.core.bll.RunVmCommand.isInternalExecution())) && (!(_isRerun))) && ((org.ovirt.engine.core.bll.RunVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Suspended))) && (isStatelessSnapshotExistsForVm())) && (!(isVMPartOfManualPool()))) { removeVmStatlessImages(); } else { runVm(); } } }


@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { return java.util.Collections.singletonMap(getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.REMOTE_VM, getVmIsBeingImportedMessage())); }

public void updateAll() { final org.ovirt.engine.core.compat.Guid selectedInstanceTypeId = getSelectedInstanceTypeId(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllInstanceTypes, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue res = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if ((res == null) || (!(res.getSucceeded()))) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.InstanceType> instanceTypes = new java.util.ArrayList<>(); if (!(getModel().isCreateInstanceOnly())) { instanceTypes.add(CustomInstanceType.INSTANCE); } for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : ((java.lang.Iterable<org.ovirt.engine.core.common.businessentities.InstanceType>) (res.getReturnValue()))) { instanceTypes.add(instanceType); } getModel().getInstanceTypes().setItems(instanceTypes); for (org.ovirt.engine.core.common.businessentities.InstanceType instanceType : instanceTypes) { if ((instanceType instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) && (selectedInstanceTypeId == null)) { getModel().getInstanceTypes().setSelectedItem(CustomInstanceType.INSTANCE); break; } if (((instanceType.getId()) == null) || (selectedInstanceTypeId == null)) { continue; } if (instanceType.getId().equals(selectedInstanceTypeId)) { getModel().getInstanceTypes().setSelectedItem(instanceType); break; } } if ((getModel().getInstanceTypes().getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.CustomInstanceType) { getModel().getAttachedToInstanceType().setEntity(false); } updateFields(); } })); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove System Permission(s)") java.lang.String removeSystemPermissionsTitle();
@java.lang.Override public java.lang.Boolean getValue(org.ovirt.engine.core.common.businessentities.VmDevice object) { return object.getReadOnly(); }
void saveVmsToDb() { getDbFacade().getVmDynamicDao().updateAllInBatch(_vmDynamicToSave.values()); getDbFacade().getVmStatisticsDao().updateAllInBatch(_vmStatisticsToSave.values()); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics> allVmInterfaceStatistics = new java.util.LinkedList<org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics>(); for (java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> list : _vmInterfaceStatisticsToSave.values()) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : list) { allVmInterfaceStatistics.add(iface.getStatistics()); } } getDbFacade().getVmNetworkStatisticsDao().updateAllInBatch(allVmInterfaceStatistics); getDbFacade().getDiskImageDynamicDao().updateAllInBatch(_vmDiskImageDynamicToSave.values()); getDbFacade().getLunDao().updateAllInBatch(vmLunDisksToSave); saveVmDevicesToDb(); saveVmGuestAgentNetworkDevices(); getVdsEventListener().addExternallyManagedVms(_externalVmsToAdd); }

protected com.google.gwt.dom.client.LabelElement getLabelElement() { return labelElement; }

@org.junit.Test public void testJsonNullDiskDescription() throws java.io.IOException { assertDiskDescriptionMap("DiskAlias", null); }

public org.ovirt.engine.core.bll.ValidationResult dataCenterVersionMismatch() { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = getDataCenter(); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.VDS_GROUP_CANNOT_ADD_COMPATIBILITY_VERSION_WITH_LOWER_STORAGE_POOL).when(((dataCenter != null) && ((dataCenter.getCompatibilityVersion().compareTo(cluster.getCompatibilityVersion())) > 0))); }
@java.lang.Override public void invoke(org.ovirt.engine.api.extensions.ExtMap context, java.util.Map<java.lang.String, java.lang.Object> args) { context.mput(Schema.InvokeKeys.MODIFICATION_TYPE, Sql.ModificationTypes.INSERT); context.put(Schema.InvokeKeys.ENTITY_KEYS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.getGroupKeys(args, context.get(ContextKeys.POSITIONAL, java.lang.String.class))); if (!(context.containsKey(ContextKeys.EXIT_STATUS))) { org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.commands.get("_schema-modify").invoke(context); context.put(ContextKeys.EXIT_STATUS, org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.SUCCESS); } }
protected void handleError() { addCanDoActionMessage(org.ovirt.engine.core.bll.pm.VDS_FENCE_OPERATION_FAILED); addCanDoActionMessage(org.ovirt.engine.core.bll.pm.VAR__TYPE__HOST); addCanDoActionMessage(org.ovirt.engine.core.bll.pm.VAR__ACTION__RESTART); log.error("Failed to run RestartVdsCommand on vds '{}'", org.ovirt.engine.core.bll.pm.RestartVdsCommand.getVdsName()); }
@org.junit.Test public void validateDomainNotWithinThreshold() { setupForStorageTests(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(multipleSdValidator).allDomainsWithinThresholds(); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN.toString())); verify(multipleSdValidator).allDomainsWithinThresholds(); verify(multipleSdValidator, never()).allDomainsHaveSpaceForNewDisks(anyListOf(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createHAThatShutdownAbnormally(); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__REVERT_TO); addCanDoActionMessage(EngineMessage.VAR__TYPE__SNAPSHOT); }

private void updatePlugChangeability() { if ((getVm()) == null) { return; } org.ovirt.engine.core.common.businessentities.DiskInterface diskInterface = getDiskInterface().getSelectedItem(); boolean isVmRunning = ((getVm()) != null) && ((getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)); if ((DiskInterface.IDE.equals(diskInterface)) && isVmRunning) { getIsPlugged().setChangeProhibitionReason(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.cannotHotPlugDiskWithIdeInterface()); getIsPlugged().setIsChangable(false); getIsPlugged().setEntity(false); } else { getIsPlugged().setIsChangable(isEditEnabled()); getIsPlugged().setEntity(true); } }

private org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap loadStoragePoolIsoMap() { return org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePoolIsoMapDao().get(new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId(org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand.getParameters().getStoragePoolId())); }
@org.junit.Test public void canDoActionImagesNotFound() { command.getParameters().setParametersList(createMoveDisksParameters()); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_DISK_NOT_EXIST.toString())); }


protected boolean validateUniqueVmName() { return org.ovirt.engine.core.bll.VmHandler.isVmWithSameNameExistStatic(org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getName(), org.ovirt.engine.core.bll.ImportVmCommandBase.getStoragePoolId()) ? failCanDoAction(EngineMessage.VM_CANNOT_IMPORT_VM_NAME_EXISTS) : true; }
public org.ovirt.engine.core.bll.ValidationResult networksAreAttachedToThisInterface(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> hostInterfaces, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworksWithLabel) { java.util.List<java.lang.String> assignedNetworks = validateNetworksNotAssignedToIncorrectNics(hostInterfaces, clusterNetworksWithLabel); return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.LABELED_NETWORK_ATTACHED_TO_WRONG_INTERFACE, ("$AssignedNetworks " + (org.apache.commons.lang.StringUtils.join(assignedNetworks, ", ")))).when((!(assignedNetworks.isEmpty()))); }
@java.lang.Override public void onSuccess(java.lang.Object innerModel, java.lang.Object innerReturnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Quota> quotaList = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (innerReturnValue)).getReturnValue(); if ((quotaList != null) && (!(quotaList.isEmpty()))) { getQuota().setItems(quotaList); } org.ovirt.engine.core.compat.Guid defaultQuota = ((getDisk()) != null) ? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getQuotaId() : null; if (defaultQuota != null) { for (org.ovirt.engine.core.common.businessentities.Quota quota : quotaList) { if (quota.getId().equals(defaultQuota)) { getQuota().setSelectedItem(quota); return; } } org.ovirt.engine.core.common.businessentities.Quota quota = new org.ovirt.engine.core.common.businessentities.Quota(); quota.setId(defaultQuota); if ((getDisk()) != null) { quota.setQuotaName(getDiskImage().getQuotaName()); } quotaList.add(quota); getQuota().setItems(quotaList); getQuota().setSelectedItem(quota); } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Copy Role") java.lang.String copyRoleTitle();
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Status") java.lang.String statusStorageTree();
protected boolean validateVmProperties(org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String runOnceCustomProperties, java.util.List<java.lang.String> messages) { java.lang.String customProperties = (runOnceCustomProperties != null) ? runOnceCustomProperties : vm.getCustomProperties(); return getVmPropertiesUtils().validateVmProperties(vm.getVdsGroupCompatibilityVersion(), customProperties, messages); }
public org.ovirt.engine.core.dao.network.NetworkQoSDao getQosDao() { return getDao(org.ovirt.engine.core.dao.network.NetworkQoSDao.class); }
@org.junit.Test public void canDoActionFailsOnServerNotUp() { cmd = spy(new org.ovirt.engine.core.bll.gluster.AddGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); setUpMocksForAdd(VDSStatus.Down); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP.toString())); }

private boolean isQuietTimeFromLastActionPassed() { int secondsLeftToNextPmOp = ((org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.isInternalExecution()) || ((org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.VdcActionType.RestartVds))) ? 0 : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAuditLogDao().getTimeToWaitForNextPmOp(org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.getVds().getName(), getRequestedAuditEvent()); if (secondsLeftToNextPmOp > 0) { addCanDoActionMessage(EngineMessage.VDS_FENCE_DISABLED_AT_QUIET_TIME); org.ovirt.engine.core.bll.pm.FenceVdsBaseCommand.addCanDoActionMessageVariable("seconds", secondsLeftToNextPmOp); return false; } else { return true; } }

@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.StorageServerConnections paramConnection = org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getConnection(); if (org.apache.commons.lang.StringUtils.isNotEmpty(paramConnection.getid())) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY); } if (!(isValidConnection(paramConnection))) { return false; } org.ovirt.engine.core.compat.Guid storagePoolId = (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getParameters().getVdsId())) ? null : org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getVds().getStoragePoolId(); if (isConnWithSameDetailsExists(paramConnection, storagePoolId)) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS); } if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getParameters().getVdsId()))) { if ((org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getVds()) == null) { return failCanDoAction(EngineMessage.VDS_INVALID_SERVER_ID); } if ((org.ovirt.engine.core.bll.storage.connection.AddStorageServerConnectionCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { return failCanDoAction(EngineMessage.VDS_ADD_STORAGE_SERVER_STATUS_MUST_BE_UP); } } return true; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Edit Quota") java.lang.String defineStorageQuotaOnDataCenterTitle();
@java.lang.Override public void setEntity(java.lang.Object value) { super.setEntity(value); UpdateIsCloneVmSupported(); }
protected void LogSettingVmToDown(org.ovirt.engine.core.compat.Guid vdsId, org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(vdsId, vmId); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(logable, AuditLogType.VM_WAS_SET_DOWN_DUE_TO_HOST_REBOOT_OR_MANUAL_FENCE); }

@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.storage.BaseDisk entity) { return createIdParameterMapper(entity.getId()).addValue("disk_alias", entity.getDiskAlias()).addValue("disk_description", entity.getDiskDescription()).addValue("disk_interface", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getDiskInterface())).addValue("wipe_after_delete", entity.isWipeAfterDelete()).addValue("propagate_errors", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(entity.getPropagateErrors())).addValue("shareable", entity.isShareable()).addValue("boot", entity.isBoot()).addValue("sgio", entity.getSgio()).addValue("alignment", entity.getAlignment()).addValue("last_alignment_scan", entity.getLastAlignmentScan()); }

private void validateQueryType(javax.servlet.http.HttpServletRequest request) throws java.lang.Exception { java.lang.String queryType = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, SSOConstants.HTTP_PARAM_SEARCH_QUERY_TYPE); if ((!(directoryQueries.containsKey(queryType))) && (!(directoryPublicQueries.containsKey(queryType)))) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SSOConstants.ERR_CODE_INVALID_REQUEST, java.lang.String.format("The request contains unsupported parameter value '%s' for parameter '%s'.", queryType, SSOConstants.HTTP_PARAM_SEARCH_QUERY_TYPE)); } }
protected boolean isDiskPassPCIAndIDELimit(org.ovirt.engine.core.common.businessentities.Disk diskInfo) { java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> vmInterfaces = org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmNetworkInterfaceDAO().getAllForVm(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.Disk> allVmDisks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getDiskMap().values()); allVmDisks.add(diskInfo); return CheckPCIAndIDELimit(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getnum_of_monitors(), vmInterfaces, allVmDisks, org.ovirt.engine.core.bll.AbstractDiskVmCommand.getReturnValue().getCanDoActionMessages()); }

@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs changedArgs = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)); if ("IsDiskHotPlugAvailable".equals(changedArgs.propertyName)) { com.google.gwt.event.logical.shared.InitializeEvent.fire(plugButtonDefinition); com.google.gwt.event.logical.shared.InitializeEvent.fire(unPlugButtonDefinition); } }
private void setEventList(org.ovirt.engine.ui.uicommonweb.models.SearchableListModel value) { privateEventList = value; }
protected org.ovirt.engine.api.model.Roles mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.roles> entities) { org.ovirt.engine.api.model.Roles collection = new org.ovirt.engine.api.model.Roles(); for (org.ovirt.engine.core.common.businessentities.roles entity : entities) { collection.getRoles().add(addLinks(map(entity))); } return collection; }
@java.lang.Override protected void executeIrsBrokerCommand() { _isoList = org.ovirt.engine.core.vdsbroker.irsbroker.GetFloppyListVDSCommand.getIrsProxy().getFloppyList(org.ovirt.engine.core.vdsbroker.irsbroker.GetFloppyListVDSCommand.getParameters().getStoragePoolId().toString()); org.ovirt.engine.core.vdsbroker.irsbroker.GetFloppyListVDSCommand.proceedProxyReturnValue(); if (((_isoList.mVMList) != null) && ((_isoList.mVMList.length) > 0)) { org.ovirt.engine.core.vdsbroker.irsbroker.GetFloppyListVDSCommand.setReturnValue(new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(_isoList.mVMList))); } else { org.ovirt.engine.core.vdsbroker.irsbroker.GetFloppyListVDSCommand.setReturnValue(new java.util.ArrayList<java.lang.String>()); } }

@java.lang.SuppressWarnings("unchecked") private <T extends org.ovirt.engine.core.dao.DAO> T getDao(java.lang.Class<T> daoType) { for (org.ovirt.engine.core.dao.DAO dao : daos) { if (daoType.isAssignableFrom(dao.getClass())) { return ((T) (dao)); } } org.ovirt.engine.core.dal.dbbroker.DbFacade.log.error(("Can't find dao for " + daoType)); return null; }
public java.lang.Integer getMaxVmNameLengthWin() { java.lang.Integer maxVmNameLengthWindows = ((java.lang.Integer) (getConfigValuePreConverted(ConfigurationValues.MaxVmNameLengthWindows))); if (maxVmNameLengthWindows == null) { return 15; } return maxVmNameLengthWindows; }
public org.ovirt.engine.core.bll.network.macpool.MacPool createMacPool(org.ovirt.engine.core.common.businessentities.MacPool macPool, boolean engineStartup) { org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges macPoolUsingRanges = new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges(macPool.getId(), org.ovirt.engine.core.utils.MacAddressRangeUtils.macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses(), auditLogDirector); macPoolUsingRanges.initialize(engineStartup, macPoolDao.getAllMacsForMacPool(macPool.getId())); return macPoolUsingRanges; }
@java.lang.Override public void finished(org.ovirt.engine.core.common.businessentities.VmBase source, org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel destination) { getModel().getIsStateless().setIsAvailable(((vm.getVmPoolId()) == null)); getModel().getIsRunAndPause().setIsAvailable(((vm.getVmPoolId()) == null)); getModel().getCpuSharesAmount().setEntity(vm.getCpuShares()); updateCpuSharesSelection(); updateRngDevice(getVm().getId()); updateTimeZone(vm.getTimeZone()); updateGraphics(); getModel().getHostCpu().setEntity(vm.isUseHostCpuFlags()); getModel().getStorageDomain().setIsChangeable(false); getModel().getProvisioning().setIsAvailable(false); getModel().getProvisioning().setEntity(Guid.Empty.equals(vm.getVmtGuid())); getModel().getCpuPinning().setEntity(vm.getCpuPinning()); getModel().getCustomPropertySheet().deserialize(vm.getCustomProperties()); if (isHotSetCpuSupported()) { getModel().getTotalCPUCores().getEntityChangedEvent().removeListener(getModel()); getModel().getCoresPerSocket().getSelectedItemChangedEvent().removeListener(getModel()); getModel().getNumOfSockets().getSelectedItemChangedEvent().removeListener(getModel()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostById(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { runningOnHost = ((org.ovirt.engine.core.common.businessentities.VDS) (returnValue)); hostCpu = calculateHostCpus(); updateNumOfSockets(); } }), vm.getRunOnVds()); } updateCpuProfile(vm.getVdsGroupId(), vm.getVdsGroupCompatibilityVersion(), vm.getCpuProfileId()); }
@java.lang.Override protected void executeCommand() { initializeStorageDomain(); addStorageDomainInDb(); org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer> connectReturnValue = connectStorage(); if (!(connectReturnValue.getFirst())) { org.ovirt.engine.core.common.errors.VdcFault fault = new org.ovirt.engine.core.common.errors.VdcFault(); fault.setError(org.ovirt.engine.core.common.errors.VdcBllErrors.forValue(connectReturnValue.getSecond())); org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getReturnValue().setFault(fault); org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.setSucceeded(false); } else if (addStorageDomainInIrs()) { updateStorageDomainDynamicFromIrs(); org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.setSucceeded(true); } }
@java.lang.Override public void onSuccess(java.lang.Object model1, java.lang.Object result1) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel) (model1)); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel unitVmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (vmListModel.getWindow())); org.ovirt.engine.core.common.action.AddVmFromTemplateParameters param = new org.ovirt.engine.core.common.action.AddVmFromTemplateParameters(vmListModel.getcurrentVm(), unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap(), org.ovirt.engine.core.compat.Guid.Empty); param.setSoundDeviceEnabled(((java.lang.Boolean) (model.getIsSoundcardEnabled().getEntity()))); param.setConsoleEnabled(((java.lang.Boolean) (model.getIsConsoleDeviceEnabled().getEntity()))); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.AddVmFromTemplate, param, new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModelNetworkAsyncCallbacks.NetworkCreateOrUpdateFrontendActionAsyncCallback(model, defaultNetworkCreatingManager), vmListModel); param.setCopyTemplatePermissions(((java.lang.Boolean) (model.getCopyPermissions().getEntity()))); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); parameters.add(param); org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel1 = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel) (result.getState())); vmListModel1.getWindow().stopProgress(); vmListModel1.cancel(); } }, vmListModel); }
@org.junit.Test public void customPropertiesNotSupported() { org.ovirt.engine.core.common.businessentities.network.Network network = createManagementNetwork(); mockExistingNetworks(network); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork("eth0", network); mockExistingIfaces(iface); iface.setCustomProperties(createCustomProperties()); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(iface)); validateAndExpectViolation(helper, VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_NOT_SUPPORTED, network.getName()); }
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetEquallyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); assertThat(factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy, times(2)).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor.capture()); java.util.List<java.util.concurrent.locks.ReentrantReadWriteLock> capturesValues = captor.getAllValues(); assertEquals(capturesValues.get(0), capturesValues.get(1)); }


@java.lang.Override public org.ovirt.engine.core.common.businessentities.network lookupEntity(org.ovirt.engine.core.compat.Guid id) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { return lookupNetwork(id, name, dataCenterId); }
@org.junit.Test public void positiveEnforcementUAGTest() { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = arem.perClusterMap.keySet().iterator().next(); org.ovirt.engine.core.bll.scheduling.arem.AffinityRulesEnforcementPerCluster perCluster = arem.perClusterMap.get(vdsGroup); java.util.List<org.ovirt.engine.core.compat.Guid> agList = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.compat.Guid> vmList = new java.util.ArrayList<>(); vmList.add(addNewVm(vdsGroup.getId(), true)); agList.add(addAffinityGroup(vmList, vdsGroup.getId(), true)); vmList = new java.util.ArrayList(); vmList.add(addNewVm(vdsGroup.getId(), true)); agList.add(addAffinityGroup(vmList, vdsGroup.getId(), true)); org.ovirt.engine.core.compat.Guid vmId = addNewVm(vdsGroup.getId(), true); for (org.ovirt.engine.core.compat.Guid id : agList) { org.ovirt.engine.core.common.scheduling.AffinityGroup ag = _affinityGroupDao.get(id); java.util.List<org.ovirt.engine.core.compat.Guid> entities = ag.getEntityIds(); entities.add(vmId); ag.setEntityIds(entities); } assertNull(perCluster.chooseNextVmToMigrate()); }

@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkQoS> qos = ((java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkQoS>) (returnValue)); getQos().setItems(qos); getQos().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.findNetworkQosById(qos, getNetwork().getQosId())); }

@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSParametersBase getVDSParameters() { return new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(getEnclosingCommand().getParameters().getStoragePoolId(), getEnclosingCommand().getParameters().getSourceStorageDomainId(), getEnclosingCommand().getParameters().getImageGroupID(), org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskImageDao().get(getEnclosingCommand().getParameters().getDestinationImageId()).isWipeAfterDelete(), getEnclosingCommand().getParameters().getForceDelete()); }

private void rollback5() { org.ovirt.engine.ui.uicompat.Enlistment enlistment = context.enlistment; org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext enlistmentContext = ((org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext) (enlistment.getContext())); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = context.changeVDSClusterReturnValue; if ((enlistmentContext.getDataCenterId()) != null) { org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.RemoveStoragePool, new org.ovirt.engine.core.common.action.StoragePoolParametersBase(enlistmentContext.getDataCenterId())); } context.enlistment = null; enlistment.Done(); }
private org.ovirt.engine.ui.webadmin.widget.table.column.MenuCell<org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport> getRemoveBrickActivityMenu(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { org.ovirt.engine.ui.webadmin.widget.table.column.MenuCell<org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport> menuCell = new org.ovirt.engine.ui.webadmin.widget.table.column.MenuCell<org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport>() { @java.lang.Override protected boolean isVisible(org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport value) { return (value.getAsyncTask().getType()) == (org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REMOVE_BRICK); } }; menuCell.addMenuItem(constants.removeBricksStop(), getDetailModel().getStopRemoveBricksCommand()); menuCell.addMenuItem(constants.removeBricksCommit(), getDetailModel().getCommitRemoveBricksCommand()); return menuCell; }

public static java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType> GetNicTypeList(org.ovirt.engine.core.common.businessentities.VmOsType osType, boolean hasDualmode) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType> list = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType>(java.util.Arrays.asList(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.values())); list.remove(VmInterfaceType.rtl8139_pv); if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsWindowsOsType(osType)) { if ((osType == (org.ovirt.engine.core.common.businessentities.VmOsType.WindowsXP)) && hasDualmode) { list.add(VmInterfaceType.rtl8139_pv); } } return list; }


@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { macs.forEach(macPool::freeMac); }


protected org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { return createTask(taskId, asyncTaskCreationInfo, parentCommand, null, null, org.ovirt.engine.core.bll.CommandBase.EMPTY_GUID_ARRAY); }
@java.lang.Override protected void buildVmSoundDevices() { if ((vm.getVmType()) == (org.ovirt.engine.core.common.businessentities.VmType.Desktop)) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdAndType(vm.getId(), VmDeviceGeneralType.SOUND); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map struct = new java.util.HashMap(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); struct.put(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); devices.add(struct); } } }
public org.ovirt.engine.core.bll.ValidationResult qosBaloonSupported() { org.ovirt.engine.core.compat.Version version = cluster.getCompatibilityVersion(); return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.QOS_BALLOON_NOT_SUPPORTED).when((((version != null) && ((Version.v3_3.compareTo(version)) > 0)) && (cluster.isEnableBallooning()))); }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__DETACH); addCanDoActionMessage(EngineMessage.VAR__TYPE__STORAGE__CONNECTION); }

@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (!(getGlusterUtil().isGlusterSnapshotSupported(org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup().getCompatibilityVersion(), org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup().getId()))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VOLUME_SNAPSHOT_NOT_SUPPORTED); } return true; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("At least one transport type should be selected.") java.lang.String volumeTransportTypesValidationMsg();
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to create Disk") java.lang.String allowToCreateDiskRoleTreeTooltip();
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.validator.storage.StorageConnectionValidator storageConnectionValidator = createStorageConnectionValidator(); if (((!(validate(storageConnectionValidator.isConnectionExists()))) || (!(validate(storageConnectionValidator.isDomainOfConnectionExistsAndInactive(org.ovirt.engine.core.bll.storage.connection.DetachStorageConnectionFromStorageDomainCommand.getStorageDomain()))))) || (!(validate(storageConnectionValidator.isISCSIConnectionAndDomain(org.ovirt.engine.core.bll.storage.connection.DetachStorageConnectionFromStorageDomainCommand.getStorageDomain()))))) { return false; } if (!(storageConnectionValidator.isConnectionForISCSIDomainAttached(org.ovirt.engine.core.bll.storage.connection.DetachStorageConnectionFromStorageDomainCommand.getStorageDomain()))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_FOR_DOMAIN_NOT_EXIST); } return true; }




@org.junit.Test public void insufficientStorageSpace() { setupForStorageTests(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(multipleSdValidator).allDomainsHaveSpaceForClonedDisks(anyList()); assertFalse(cmd.imagesRelatedChecks()); }
public void setIsBootSequenceTabValid(boolean value) { if ((isBootSequenceTabValid) != value) { isBootSequenceTabValid = value; onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("IsBootSequenceTabValid")); } }
private void managePolicyUnits() { if ((getWindow()) != null) { return; } policyUnitModel = new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ManagePolicyUnitModel(); policyUnitModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().managePolicyUnits()); policyUnitModel.setHashName("manage_policy_units"); policyUnitModel.setPolicyUnits(new org.ovirt.engine.ui.uicommonweb.models.ListModel()); policyUnitModel.getPolicyUnits().setItems(sort(policyUnits)); policyUnitModel.getRefreshPolicyUnitsEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { setIsQueryFirstTime(true); syncSearch(); } }); org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()); command.setIsCancel(true); policyUnitModel.getCommands().add(command); setWindow(policyUnitModel); }
@org.junit.Test public void updateChangeConnectionType() { oldConnection.setstorage_type(StorageType.ISCSI); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_CHANGE_STORAGE_TYPE); }
@java.lang.Override protected void initDetailModels() { super.initDetailModels(); networkExternalSubnetListModel = new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkExternalSubnetListModel(); org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkGeneralModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkProfileListModel()); list.add(networkExternalSubnetListModel); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkClusterListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkHostListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkVmListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.networks.NetworkTemplateListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel()); setDetailModels(list); }
protected final void execute() { setCommandStatus(CommandStatus.ACTIVE); getReturnValue().setCanDoAction(true); getReturnValue().setIsSyncronious(true); if ((!(hasTaskHandlers())) || ((getExecutionIndex()) == 0)) { org.ovirt.engine.core.bll.job.ExecutionHandler.addStep(getExecutionContext(), StepEnum.EXECUTING, null); } try { handleTransactivity(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(scope, this); } catch (javax.ejb.TransactionRolledbackLocalException e) { log.infoFormat("Transaction was aborted in {0}", this.getClass().getName()); compensate(); } finally { try { if (getCommandShouldBeLogged()) { logRenamedEntity(); logCommand(); } if (getSucceeded()) { startPollingAsyncTasks(); } } finally { if ((!(hasTasks())) && (!(org.ovirt.engine.core.bll.job.ExecutionHandler.checkIfJobHasTasks(getExecutionContext())))) { org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(getExecutionContext(), getSucceeded()); } } } }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.HostNIC model, org.ovirt.engine.api.model.HostNIC transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertNotNull(transform.getNetwork()); assertEquals(model.getNetwork().getName(), transform.getNetwork().getName()); assertNotNull(transform.getIp()); assertEquals(model.getIp().getAddress(), transform.getIp().getAddress()); assertEquals(model.getIp().getNetmask(), transform.getIp().getNetmask()); assertEquals(model.getIp().getGateway(), transform.getIp().getGateway()); assertNotNull(transform.getMac()); assertEquals(model.getMac().getAddress(), transform.getMac().getAddress()); assertNotNull(model.getBonding()); assertEquals(model.getBonding().getOptions().getOptions().size(), transform.getBonding().getOptions().getOptions().size()); for (int i = 0; i < (model.getBonding().getOptions().getOptions().size()); i++) { assertEquals(model.getBonding().getOptions().getOptions().get(i).getName(), transform.getBonding().getOptions().getOptions().get(i).getName()); assertEquals(model.getBonding().getOptions().getOptions().get(i).getValue(), transform.getBonding().getOptions().getOptions().get(i).getValue()); } }



@org.junit.Test public void canDoActionFailWithUnsupportedDiskInterface() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId); mockVm(); mockStorageDomain(storageId); mockStoragePoolIsoMap(); mockMaxPciSlots(); when(diskValidator.isReadOnlyPropertyCompatibleWithInterface()).thenReturn(ValidationResult.VALID); when(diskValidator.isDiskInterfaceSupported(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED)); when(diskValidator.isVirtIoScsiValid(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(ValidationResult.VALID); when(command.getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class))).thenReturn(diskValidator); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED.toString())); }
public int getAnonymousHugePages() { return this.mVdsStatistics.getAnonymousHugePages(); }
public void setpm_options(java.lang.String value) { mVdsStatic.setpm_options(value); }
protected java.lang.Object resolveCreated(org.ovirt.engine.core.common.action.VdcReturnValueBase result, org.ovirt.engine.api.restapi.resource.EntityResolver entityResolver, java.lang.Class<? extends org.ovirt.engine.api.model.BaseResource> suggestedParentType) { try { return entityResolver.resolve(((org.ovirt.engine.core.compat.Guid) (result.getActionReturnValue()))); } catch (java.lang.Exception e) { return null; } }
public org.ovirt.engine.core.bll.tasks.SPMAsyncTask concreteCreateTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters p = new org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters(asyncTaskCreationInfo, getAsyncTask(taskId, command, asyncTaskCreationInfo, parentCommand)); p.setEntityInfo(command.getParameters().getEntityInfo()); return createTask(internalGetTaskType(command), p); }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.Quota quota) { if ((quota.getQuotaEnforcementType()) == null) { return getApplicationResources().iconDisable(); } setEnumTitle(quota.getQuotaEnforcementType()); switch (quota.getQuotaEnforcementType()) { case HARD_ENFORCEMENT : return getApplicationResources().iconEnforce(); case SOFT_ENFORCEMENT : return getApplicationResources().iconAudit(); case DISABLED : return getApplicationResources().iconDisable(); default : return getApplicationResources().iconDisable(); } }
@java.lang.Override public java.lang.String encodedId(org.ovirt.engine.core.common.utils.ExternalId id) { org.ovirt.engine.core.compat.Guid guid = new org.ovirt.engine.core.compat.Guid(id.getBytes(), true); return getNsUniqueIdFromGuidString(guid.toString()); }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.Disk o1, org.ovirt.engine.core.common.businessentities.Disk o2) { return o1.getDiskAlias().compareTo(o2.getDiskAlias()); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> getUserRequestForStorageDomainRepoFileList() { return org.ovirt.engine.core.bll.IsoDomainListSyncronizer.getInstance().getUserRequestForStorageDomainRepoFileList(getStorageDomainIdForQuery(), GetImagesListQueryBase.getParameters().getImageType(), GetImagesListQueryBase.getParameters().getForceRefresh()); }
public void setserver_SSL_enabled(boolean value) { this.mVdsStatic.setserver_SSL_enabled(value); }
@java.lang.Override public void execute(int iterationId) { org.ovirt.engine.core.common.businessentities.VDS vds = getVdss().get(iterationId); try { boolean isConnectSucceeded = org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(getStorageDomain().getStorageType()).connectStorageToDomainByVdsId(getStorageDomain(), vds.getId()); if (isConnectSucceeded) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().runVdsCommand(VDSCommandType.ConnectStoragePool, new org.ovirt.engine.core.common.vdscommands.ConnectStoragePoolVDSCommandParameters(vds.getId(), getStoragePool().getId(), vds.getVdsSpmId(), getStorageDomain().getId(), getStoragePool().getmaster_domain_version())); } else { org.ovirt.engine.core.bll.storage.ConntectVDSToPoolAndDomains.log.errorFormat("Failed to connect host {0} to domain {1}", vds.getName(), getStorageDomain().getStorageName()); } } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.storage.ConntectVDSToPoolAndDomains.log.errorFormat("Failed to connect host {0} to storage pool {1}. Exception: {3}", vds.getName(), getStoragePool().getName(), e); } }
public void OnRemove() { for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.roles role = ((org.ovirt.engine.core.common.businessentities.roles) (item)); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.RemoveRole, new org.ovirt.engine.core.common.action.RolesParameterBase(role.getId())); } Cancel(); getSearchCommand().Execute(); }
protected org.ovirt.engine.core.common.businessentities.ad_groups getAdGroup(org.ovirt.engine.api.model.Group group) { if ((group.getId()) != null) { return lookupGroupById(asGuid(group.getId())); } java.util.List<org.ovirt.engine.core.common.businessentities.ad_groups> adGroups = asCollection(getEntity(java.util.ArrayList.class, SearchType.AdGroup, getSearchPattern("*", getDomainName(group.getName())))); for (org.ovirt.engine.core.common.businessentities.ad_groups adGroup : adGroups) { if (adGroup.getname().equals(group.getName())) { return adGroup; } } return entityNotFound(); }

private void initNetworkModels() { java.util.Map<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> networkModels = new java.util.HashMap<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(); networkLabelMap = new java.util.HashMap<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkLabelModel>(); for (org.ovirt.engine.core.common.businessentities.network.Network network : allNetworks) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel(network, this); networkModels.put(network.getName(), networkModel); if (!(network.isExternal())) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkLabelModel labelModel = networkLabelMap.get(network.getLabel()); if (labelModel == null) { labelModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkLabelModel(network.getLabel(), this); networkLabelMap.put(network.getLabel(), labelModel); } labelModel.getNetworks().add(networkModel); } } setNetworks(networkModels); }
@java.lang.Override public java.lang.Object mapFromContext(java.lang.Object ctx) { if (ctx == null) { return null; } org.springframework.ldap.core.DirContextAdapter searchResult = ((org.springframework.ldap.core.DirContextAdapter) (ctx)); javax.naming.directory.Attributes attributes = searchResult.getAttributes(); if (attributes == null) { return null; } if ((attributes.get(org.ovirt.engine.extensions.aaa.builtin.kerberosldap.OpenLdapGroupAttributes.entryuuid.name())) == null) { return null; } try { java.util.List<java.lang.String> memberOf = new java.util.ArrayList<java.lang.String>(); javax.naming.directory.Attribute att = attributes.get(org.ovirt.engine.extensions.aaa.builtin.kerberosldap.OpenLdapGroupAttributes.memberof.name()); if (att != null) { javax.naming.NamingEnumeration<?> groupsNames = att.getAll(); while (groupsNames.hasMoreElements()) { memberOf.add(((java.lang.String) (groupsNames.nextElement()))); } } java.lang.String objectGuid = ((java.lang.String) (attributes.get(org.ovirt.engine.extensions.aaa.builtin.kerberosldap.OpenLdapGroupAttributes.entryuuid.name()).get(0))); java.lang.String distinguishedName = searchResult.getNameInNamespace(); distinguishedName = org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapBrokerUtils.hadleNameEscaping(distinguishedName); org.ovirt.engine.extensions.aaa.builtin.kerberosldap.GroupSearchResult groupSearchResult = new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.GroupSearchResult(new org.ovirt.engine.core.common.utils.ExternalId(org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(objectGuid).toByteArray()), memberOf, distinguishedName); return groupSearchResult; } catch (java.lang.Exception ex) { org.ovirt.engine.extensions.aaa.builtin.kerberosldap.OpenLdapGroupContextMapper.log.error("Failed populating group", ex); return null; } }
@java.lang.Override protected boolean canDoAction() { java.lang.String sshPublicKey = org.ovirt.engine.core.bll.UserProfilesOperationCommandBase.getParameters().getUserProfile().getSshPublicKey(); if ((sshPublicKey == null) || (sshPublicKey.isEmpty())) { return true; } if (!(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeyValid(sshPublicKey))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_PUBLIC_SSH_KEY); } return true; }
private void cleanZombieTasks() { long maxTime = org.ovirt.engine.core.compat.DateTime.getNow().AddMinutes(((-1) * (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.AsyncTaskZombieTaskLifeInMinutes)))).getTime(); for (org.ovirt.engine.core.bll.SPMAsyncTask task : _tasks.values()) { if ((task.getParameters().getDbAsyncTask().getStartTime().getTime()) < maxTime) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("CommandName", task.getParameters().getDbAsyncTask().getaction_type().toString()); logable.addCustomValue("Date", task.getParameters().getDbAsyncTask().getStartTime().toString()); if (((task.getLastTaskStatus().getStatus()) != (org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.finished)) && ((task.getLastTaskStatus().getStatus()) != (org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.unknown))) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.TASK_STOPPING_ASYNC_TASK); org.ovirt.engine.core.bll.AsyncTaskManager.log.infoFormat("Cleaning zombie tasks: Stopping async task {0} that started at {1}", task.getParameters().getDbAsyncTask().getaction_type(), task.getParameters().getDbAsyncTask().getStartTime()); task.stopTask(true); } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.TASK_CLEARING_ASYNC_TASK); org.ovirt.engine.core.bll.AsyncTaskManager.log.infoFormat("Cleaning zombie tasks: Clearing async task {0} that started at {1}", task.getParameters().getDbAsyncTask().getaction_type(), task.getParameters().getDbAsyncTask().getStartTime()); task.clearAsyncTask(true); } } } }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getVdsGroup(); if (cluster == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID); return false; } if (!(cluster.supportsGlusterService())) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_DOES_NOT_SUPPORT_GLUSTER); return false; } if (volumeNameExists(volume.getName())) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NAME_ALREADY_EXISTS); addCanDoActionMessageVariable("volumeName", volume.getName()); return false; } if (!(validate(createVolumeValidator().isForceCreateVolumeAllowed(getVdsGroup().getCompatibilityVersion(), getParameters().isForce())))) { return false; } return validateBricks(volume); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { if ((((org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getVmId()) != null) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getVmId())))) && ((org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getParentCommand()) != (org.ovirt.engine.core.common.action.VdcActionType.ImportVmFromExternalProvider))) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); } return null; }
private void UpdateProperties() { org.ovirt.engine.core.common.businessentities.Network network = ((org.ovirt.engine.core.common.businessentities.Network) (getEntity())); setName(network.getName()); setDescription(network.getdescription()); setVm(network.isVmNetwork()); setVlan(network.getvlan_id()); setMtu(network.getMtu()); }


private boolean validateAndCompleteParameters(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> auditLogPair) throws org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException { if ((org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType())) { return true; } boolean hardEnforcement = (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType()); for (org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter param : parameters.getParameters()) { boolean validQuotaId = checkAndFetchQuota(parameters, param, auditLogPair); boolean validCluster = true; boolean validStorageDomain = true; if (validQuotaId) { if (param instanceof org.ovirt.engine.core.bll.quota.QuotaClusterConsumptionParameter) { validCluster = checkClusterMatchQuota(parameters, param); } if (param instanceof org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) { validStorageDomain = checkStoragePoolMatchQuota(parameters, param); } } if (((!validQuotaId) || (!validCluster)) || (!validStorageDomain)) { if (hardEnforcement) { return false; } else { parameters.getValidationMessages().clear(); if ((org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType())) { auditLogPair.setFirst(null); } } } } parameters.getParameters().removeAll(corruptedParameters); corruptedParameters.clear(); return true; }



@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveHasNetworkAssignedWhichIsNotRemovedAsAPartOfRequest() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond(); org.ovirt.engine.core.common.businessentities.network.Network networkBeingRemoved = new org.ovirt.engine.core.common.businessentities.network.Network(); networkBeingRemoved.setName("assignedNetwork"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveA = createBondSlave(bond, "slaveA"); slaveA.setNetworkName("assignedNetwork"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveB = createBondSlave(bond, "slaveB"); bond.setSlaves(java.util.Arrays.asList(slaveA.getName(), slaveB.getName())); org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId()); params.setBonds(java.util.Collections.singletonList(bond)); doTestValidateModifiedBondSlaves(params, java.util.Arrays.asList(bond, slaveA, slaveB), java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>emptyList(), java.util.Collections.singletonList(networkBeingRemoved), ValidationResult.VALID, ValidationResult.VALID, new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_INTERFACE_ATTACHED_TO_NETWORK_CANNOT_BE_SLAVE)); }

private static java.util.Map<java.lang.String, java.lang.String> generateQoSData(int average, int peak, int burst) { java.util.Map<java.lang.String, java.lang.String> qosData = new java.util.HashMap<>(); qosData.put(VdsProperties.QOS_AVERAGE, java.lang.String.valueOf(average)); qosData.put(VdsProperties.QOS_PEAK, java.lang.String.valueOf(peak)); qosData.put(VdsProperties.QOS_BURST, java.lang.String.valueOf(burst)); return qosData; }


public org.ovirt.engine.core.bll.ValidationResult nameNotUsed() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED).when(((hostDao.getByName(host.getName())) != null)); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Running") java.lang.String runningVm();
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.OperationCadidateEventArgs evtArgs = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.OperationCadidateEventArgs) (args)); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation candidate = evtArgs.getCandidate(); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1 = evtArgs.getOp1(); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2 = evtArgs.getOp2(); if (candidate == null) { setErrorStatus(constants.noValidActionSetupNetwork()); } else { if (candidate.isErroneousOperation()) { setErrorStatus(candidate.getMessage(op1, op2)); } else { if (candidate.isDisplayNetworkAffected(op1, op2)) { setWarningStatus(applicationMessages.moveDisplayNetworkWarning(candidate.getMessage(op1, op2))); } else { setValidStatus(candidate.getMessage(op1, op2)); } } } }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = ((super.canDoAction()) && (org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.checkStorageDomain())) && (((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)) || (checkStorageDomainStatusNotEqual(StorageDomainStatus.Active))); if ((returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStoragePool()) != null)) { if ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.electNewMaster()) == null) { returnValue = false; addCanDoActionMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN); } else if (!(org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.initializeVds())) { returnValue = false; addCanDoActionMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN_HOST_NOT_ACTIVE); } } if (returnValue && ((org.ovirt.engine.core.bll.storage.domain.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLANCE))) { addCanDoActionMessage(EngineMessage.ERROR_CANNOT_MANAGE_STORAGE_DOMAIN); returnValue = false; } return returnValue; }
public static final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip<org.ovirt.engine.core.common.businessentities.Disk> getInterfaceColumn(java.lang.String sortBy) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip<org.ovirt.engine.core.common.businessentities.Disk> column = new org.ovirt.engine.ui.common.widget.table.column.AbstractEnumColumn<org.ovirt.engine.core.common.businessentities.Disk, org.ovirt.engine.core.common.businessentities.DiskInterface>() { @java.lang.Override protected org.ovirt.engine.core.common.businessentities.DiskInterface getRawValue(org.ovirt.engine.core.common.businessentities.Disk object) { return object.getDiskInterface(); } }; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable(column, sortBy); }
@org.junit.Test public void canDoActionFailsForGlusterServerWhenNoUpServer() throws java.lang.Exception { setupGlusterMock(true, null, false); assertFalse(commandMock.canDoAction()); assertTrue(commandMock.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_NO_GLUSTER_HOST_TO_PEER_PROBE.toString())); }

public void setAnonymousHugePages(int value) { this.mVdsStatistics.setAnonymousHugePages(value); }



public static boolean CheckImageConfiguration(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain, org.ovirt.engine.core.common.businessentities.DiskImageBase diskInfo, java.util.List<java.lang.String> messages) { boolean result = true; if (((((diskInfo.getvolume_type()) == (org.ovirt.engine.core.common.businessentities.VolumeType.Preallocated)) && ((diskInfo.getvolume_format()) == (org.ovirt.engine.core.common.businessentities.VolumeFormat.COW))) || ((((storageDomain.getstorage_type()) == (org.ovirt.engine.core.common.businessentities.StorageType.FCP)) || ((storageDomain.getstorage_type()) == (org.ovirt.engine.core.common.businessentities.StorageType.ISCSI))) && (((diskInfo.getvolume_type()) == (org.ovirt.engine.core.common.businessentities.VolumeType.Sparse)) && ((diskInfo.getvolume_format()) == (org.ovirt.engine.core.common.businessentities.VolumeFormat.RAW))))) || (((diskInfo.getvolume_format()) == (org.ovirt.engine.core.common.businessentities.VolumeFormat.Unassigned)) || ((diskInfo.getvolume_type()) == (org.ovirt.engine.core.common.businessentities.VolumeType.Unassigned)))) { result = false; messages.add(VdcBllMessages.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED.toString()); } return result; }
@java.lang.Override public void endSuccessfully() { super.endSuccessfully(); if (org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.getParameters().getImportAsTemplate()) { org.ovirt.engine.core.compat.Guid newTemplateId = createTemplate(); if (newTemplateId != null) { attachDiskToTemplate(newTemplateId); } } updateDiskStatus(ImageStatus.OK); org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand.setSucceeded(true); }
@java.lang.Override protected void initSelectedType() { getNicType().setSelectedItem(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetDefaultNicType(getVm().getOs())); }
@java.lang.Override public void onSuccess(java.lang.Object model1, java.lang.Object result1) { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>) (result1)); profilesQuery.setModel(clusterNetworks); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVnicProfilesByDcId(profilesQuery, dcId); }

@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.Disk object) { setTitle(((object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.LUN) ? getDefaultTitle() : null)); return (object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.LUN) ? org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.resources.externalDiskIcon() : null; }
private boolean validRemovedBonds(org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Bond> removedBonds) { java.util.Set<java.lang.String> requiredNicsNames = getRemovedBondsUsedByNetworks(removedBonds); boolean passed = true; for (org.ovirt.engine.core.common.businessentities.network.Bond removedBond : params.getRemovedBonds()) { if ((removedBond.getName()) == null) { addViolation(VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST, null); passed = false; continue; } org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingBond = existingIfaces.get(removedBond.getName()); if ((existingBond != null) && (!(isBond(existingBond)))) { addViolation(VdcBllMessages.NETWORK_INTERFACE_IS_NOT_BOND, removedBond.getName()); passed = false; continue; } if (requiredNicsNames.contains(removedBond.getName())) { addViolation(VdcBllMessages.BOND_USED_BY_NETWORK_ATTACHMENTS, removedBond.getName()); passed = false; continue; } } return passed; }
@java.lang.Override public void dispatchEvent(org.ovirt.engine.core.notifier.filter.Event event, java.lang.String address) { org.ovirt.engine.core.notifier.filter.AuditLogEvent auditLogEvent; auditLogEvent = ((org.ovirt.engine.core.notifier.filter.AuditLogEvent) (event)); org.ovirt.engine.core.notifier.transport.smtp.EventMessageContent message = new org.ovirt.engine.core.notifier.transport.smtp.EventMessageContent(); message.prepareMessage(hostName, auditLogEvent, isBodyHtml); if (org.apache.commons.lang.StringUtils.isEmpty(address)) { org.ovirt.engine.core.notifier.transport.smtp.Smtp.log.error(("Address is empty, cannot distribute message." + (event.getName()))); return; } org.ovirt.engine.core.notifier.transport.smtp.Smtp.log.info(java.lang.String.format("Send email to [%s]%n subject:%n [%s]", address, message.getMessageSubject())); if (org.ovirt.engine.core.notifier.transport.smtp.Smtp.log.isDebugEnabled()) { org.ovirt.engine.core.notifier.transport.smtp.Smtp.log.debug(java.lang.String.format("body:%n [%s]", message.getMessageBody())); } java.lang.String errorMessage = null; int attempts = 0; boolean success = false; while ((!success) && (attempts < (org.ovirt.engine.core.notifier.transport.smtp.Smtp.ATTEMPTS))) { try { mailSender.send(address, message.getMessageSubject(), message.getMessageBody()); setChanged(); notifyObservers(org.ovirt.engine.core.notifier.dao.DispatchData.success(event, address, EventNotificationMethod.EMAIL)); success = true; } catch (javax.mail.MessagingException ex) { errorMessage = ex.getMessage(); } if (!success) { try { java.lang.Thread.sleep(30000); } catch (java.lang.InterruptedException e) { org.ovirt.engine.core.notifier.transport.smtp.Smtp.log.error("Failed to suspend thread for 30 seconds while trying to resend a mail message.", e); } attempts++; } } if (!success) { setChanged(); notifyObservers(org.ovirt.engine.core.notifier.dao.DispatchData.failure(event, address, EventNotificationMethod.EMAIL, errorMessage)); } }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getDisabledHtml() { return !(showTitle) ? disabledImage : !(imageAfterTitle) ? org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.TEMPLATES.imageTextButton(disabledImage, org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.getTitle()) : org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.TEMPLATES.textImageButton(org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.getTitle(), disabledImage); }
@java.lang.Override public java.lang.Void runInTransaction() { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); getCompensationContext().stateChanged(); return null; }




@org.junit.Test public void canDoActionFailsMaster() { sd.setStorageDomainType(StorageDomainType.Master); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); }





@java.lang.Override protected org.ovirt.engine.api.model.DataCenter postPopulate(org.ovirt.engine.api.model.DataCenter model) { model.setStorageFormat(org.ovirt.engine.api.restapi.types.MappingTestHelper.shuffle(org.ovirt.engine.api.restapi.model.StorageFormat.class).value()); return model; }
@org.junit.Test public void testQueryFailsIfServerExists() { mockQueryParameters(org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.EXISTING_SERVER, org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.PASSWORD); try { getQuery().executeQueryCommand(); fail("Query didn't fail when the server already exists!"); } catch (java.lang.RuntimeException e) { assertEquals(VdcBllMessages.SERVER_ALREADY_EXISTS_IN_ANOTHER_CLUSTER.toString(), e.getMessage()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ("SearchString".equals(((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName)) { clearSelection(); } }

@org.junit.Test public void testGetAllWithNameUsingInvalidName() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = dao.getAllWithName("farkle"); org.ovirt.engine.core.dao.VdsDAOTest.assertIncorrectGetResult(result); }
@java.lang.Override protected org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, org.ovirt.engine.core.common.errors.EngineFault> runConnectionStorageToDomain(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain, org.ovirt.engine.core.compat.Guid vdsId, int type) { return new org.ovirt.engine.core.common.utils.Pair(true, null); }
@org.junit.Test public void testNotRemovingLabeledNetworksWhenRemovingLabeledNetworkUnrelatedToRemovedBond() throws java.lang.Exception { java.lang.String nicName = "nicName"; java.lang.String label = "label"; org.ovirt.engine.core.common.businessentities.network.Network labeledNetwork = new org.ovirt.engine.core.common.businessentities.network.Network(); labeledNetwork.setId(org.ovirt.engine.core.compat.Guid.newGuid()); labeledNetwork.setLabel(label); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = createNetworkAttachment(labeledNetwork); networkAttachment.setNicName(nicName); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingNic = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); existingNic.setLabels(java.util.Collections.singleton(label)); existingNic.setName(nicName); org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId()); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setHost(host).setParams(params).setExistingInterfaces(java.util.Collections.singletonList(existingNic)).setNetworkBusinessEntityMap(new org.ovirt.engine.core.common.businessentities.BusinessEntityMap(java.util.Collections.singletonList(labeledNetwork))).build(); assertThat(validator.notRemovingLabeledNetworks(networkAttachment), failsWith(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_LABELED_NETWORK_FROM_NIC)); }


public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getDcInventoryStatus(javax.sql.DataSource engineDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.DataCenterDAO(engineDataSource); return dao.getDcInventoryStatus(); }
protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return tsb.append("id", getId()).append("name", getName()).append("vdsId", getVdsId()).append("networkName", getNetworkName()).append("ipv4BootProtocol", getIpv4BootProtocol()).append("ipv4Address", getIpv4Address()).append("ipv4Subnet", getIpv4Subnet()).append("ipv4Gateway", getIpv4Gateway()).append("ipv6BootProtocol", getIpv6BootProtocol()).append("ipv6Address", getIpv6Address()).append("ipv6Prefix", getIpv6Prefix()).append("ipv6Gateway", getIpv6Gateway()).append("mtu", getMtu()).append("bridged", isBridged()).append("type", getType()).append("networkImplementationDetails", getNetworkImplementationDetails()).append("qos", getQos()); }
public void setVmCount(int value) { this.mVdsDynamic.setVmCount(value); }
@org.junit.Test public void updateNonNFSConnection() { newConnection.setstorage_type(StorageType.ISCSI); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_UNSUPPORTED_ACTION_FOR_STORAGE); }
private void logRunningCommand() { java.lang.StringBuilder logInfo = new java.lang.StringBuilder("Running command: ").append(getClass().getSimpleName()); if (hasTaskHandlers()) { logInfo.append(" Task handler: ").append(getCurrentTaskHandler().getClass().getSimpleName()); } logInfo.append(" internal: ").append(org.ovirt.engine.core.bll.CommandBase.isInternalExecution()).append("."); java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permissionSubjectList = getPermissionCheckSubjects(); if ((permissionSubjectList != null) && (!(permissionSubjectList.isEmpty()))) { java.lang.StringBuilder logEntityIdsInfo = new java.lang.StringBuilder(); for (org.ovirt.engine.core.bll.utils.PermissionSubject permSubject : permissionSubjectList) { if ((permSubject.getObjectId()) != null) { if ((logEntityIdsInfo.length()) != 0) { logEntityIdsInfo.append(", "); } logEntityIdsInfo.append(" ID: ").append(permSubject.getObjectId()).append(" Type: ").append(permSubject.getObjectType()); } } if ((logEntityIdsInfo.length()) != 0) { logInfo.append(" Entities affected : ").append(logEntityIdsInfo); } } log.info(logInfo); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove Virtual Machine(s)") java.lang.String removeVirtualMachinesTitle();
private boolean isUser(org.ovirt.engine.core.common.businessentities.DbUser user) { return org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(user.getusername()) ? false : true; }

public void onSave() { if (!(Validate())) { return; } org.ovirt.engine.core.common.businessentities.Provider provider = new org.ovirt.engine.core.common.businessentities.Provider(); provider.setName(((java.lang.String) (privateName.getEntity()))); provider.setDescription(((java.lang.String) (privateDescription.getEntity()))); provider.setApiAddress(((java.lang.String) (privateUrl.getEntity()))); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.AddProvider, new org.ovirt.engine.core.common.action.ProviderParameters(provider)); cancel(); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Event Details") java.lang.String eventDetailsTitle();
public static void GetMaxNumOfVmSockets(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, java.lang.String version) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 1; } }; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.MaxNumOfVmSockets); tempVar.setVersion(version); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(tempVar, aQuery); }
public void show() { call(widget.getElement(), org.ovirt.engine.ui.common.widget.tooltip.Tooltip.SHOW); }
@java.lang.Override protected void executeVdsBrokerCommand() { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand.getBroker().discoverSendTargets(org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStorageServerVDSCommand.createStructFromConnection(org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand.getParameters().getConnection(), null)); org.ovirt.engine.core.vdsbroker.vdsbroker.DiscoverSendTargetsVDSCommand.proceedProxyReturnValue(); setReturnValue((_result.isFullTargets() ? parseFullTargets(_result.getIqnList()) : parseTargets(_result.getIqnList()))); }
private void updateActionAvailability() { getEditParameterCommand().setIsExecutionAllowed((((getSelectedItems()) != null) && ((getSelectedItems().size()) == 1))); getResetParameterCommand().setIsExecutionAllowed((((getSelectedItems()) != null) && ((getSelectedItems().size()) == 1))); }
@java.lang.Override protected void executeCommand() { super.executeCommand(); org.ovirt.engine.core.bll.Backend.getInstance().triggerPoolMonitoringJob(); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Storages") java.lang.String storagesTitle();


private boolean validateAndCompleteParameters(org.ovirt.engine.core.bll.quota.QuotaConsumptionParametersWrapper parameters, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> auditLogPair) throws org.ovirt.engine.core.bll.quota.InvalidQuotaParametersException { if ((org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType())) { return true; } boolean hardEnforcement = (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.HARD_ENFORCEMENT) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType()); for (org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter param : parameters.getParameters()) { boolean validQuotaId = checkAndFetchQuota(parameters, param, auditLogPair); boolean validVdsGroup = true; boolean validStorageDomain = true; if (validQuotaId) { if (param instanceof org.ovirt.engine.core.bll.quota.QuotaVdsGroupConsumptionParameter) { validVdsGroup = checkVdsGroupMatchQuota(parameters, param); } if (param instanceof org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter) { validStorageDomain = checkStoragePoolMatchQuota(parameters, param); } } if (((!validQuotaId) || (!validVdsGroup)) || (!validStorageDomain)) { if (hardEnforcement) { return false; } else { parameters.getCanDoActionMessages().clear(); if ((org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED) == (parameters.getAuditLogable().getStoragePool().getQuotaEnforcementType())) { auditLogPair.setFirst(null); } } } } parameters.getParameters().removeAll(corruptedParameters); corruptedParameters.clear(); return true; }
public java.lang.String getHardwareProductName() { return this.mVdsDynamic.getHardwareProductName(); }

@java.lang.Override protected void proceedProxyReturnValue() { org.ovirt.engine.core.common.errors.VdcBllErrors returnStatus = getReturnValueFromStatus(org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getReturnStatus()); switch (returnStatus) { case StoragePoolUnknown : case SpmStatusError : break; case TaskInProgress : org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getVDSReturnValue().setVdsError(new org.ovirt.engine.core.common.errors.VDSError(returnStatus, org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getReturnStatus().mMessage)); org.ovirt.engine.core.vdsbroker.vdsbroker.SpmStopVDSCommand.getVDSReturnValue().setSucceeded(false); break; default : super.proceedProxyReturnValue(); initializeVdsError(returnStatus); break; } }
@java.lang.Override public void updateIfNeeded(org.ovirt.engine.core.common.businessentities.VdsDynamic vdsDynamic) { org.ovirt.engine.core.common.businessentities.VdsDynamic dbData = get(vdsDynamic.getId()); if (!(dbData.equals(vdsDynamic))) { update(vdsDynamic); } else { org.ovirt.engine.core.dao.VdsDynamicDAODbFacadeImpl.log.debug("Ignored an unneeded update of VdsDynamic"); } }
public void addSubTab(org.ovirt.engine.ui.webadmin.plugin.entity.EntityType entityType, java.lang.String label, java.lang.String historyToken, java.lang.String contentUrl) { switch (entityType) { case DataCenter : addTab(DataCenterSubTabPanelPresenter.TYPE_RequestTabs, DataCenterSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl); break; case Cluster : addTab(ClusterSubTabPanelPresenter.TYPE_RequestTabs, ClusterSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl); break; case Host : addTab(HostSubTabPanelPresenter.TYPE_RequestTabs, HostSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl); break; case Storage : addTab(StorageSubTabPanelPresenter.TYPE_RequestTabs, StorageSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl); break; case Disk : addTab(DiskSubTabPanelPresenter.TYPE_RequestTabs, DiskSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl); break; case VirtualMachine : addTab(VirtualMachineSubTabPanelPresenter.TYPE_RequestTabs, VirtualMachineSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl); break; case Template : addTab(TemplateSubTabPanelPresenter.TYPE_RequestTabs, TemplateSubTabPanelPresenter.TYPE_SetTabContent, label, historyToken, false, contentUrl); break; } }




@org.junit.Test public void vlanNetworkWithVmNetworkDenied() { org.ovirt.engine.core.common.businessentities.network.Network net1 = createNetwork("net1"); org.ovirt.engine.core.common.businessentities.network.Network net2 = createNetwork("net2"); net2.setVlanId(100); mockExistingNetworks(net1, net2); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic("nic0", null); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic = createVlan(nic.getName(), net2.getVlanId(), net2.getName()); mockExistingIfaces(nic, vlanNic); nic.setNetworkName(net1.getName()); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(nic, vlanNic)); validateAndExpectViolation(helper, VdcBllMessages.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK, nic.getName()); }

@java.lang.Override protected void setUriInfo(javax.ws.rs.core.UriInfo uriInfo) { resource.setUriInfo(uriInfo); ((org.ovirt.engine.api.restapi.resource.BackendDataCenterClusterResource) (resource)).getParent().setUriInfo(uriInfo); }
protected abstract void showErrataListWithDetailsPopup();
@java.lang.Override protected boolean canDoAction() { setStoragePoolId(getVm().getStoragePoolId()); org.ovirt.engine.core.bll.validator.LiveSnapshotValidator validator = new org.ovirt.engine.core.bll.validator.LiveSnapshotValidator(org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getStoragePool().getcompatibility_version(), org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getVds()); if (!(validate(validator.canDoSnapshot()))) { return false; } if ((((!(isValidParametersList())) || (!(checkImagesStatus()))) || (!(validateSpaceRequirements()))) || (!(performVmRelatedChecks()))) { return false; } for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : getParameters().getParametersList()) { org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getReturnValue().setCanDoAction((((((isDiskNotShareable(parameters.getImageId())) && (isDiskSnapshotNotPluggedToOtherVmsThatAreNotDown(parameters.getImageId()))) && (isTemplateInDestStorageDomain(parameters.getImageId(), parameters.getTargetStorageDomainId()))) && (performStorageDomainsChecks(parameters))) && (isSameSourceAndDest(parameters)))); if (!(org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getReturnValue().getCanDoAction())) { return false; } } if (!(setAndValidateDiskProfiles())) { return false; } return true; }
private boolean isAlreadyInRequestedStatus(java.lang.String options) { boolean ret = false; org.ovirt.engine.core.common.businessentities.FenceActionType action = org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getAction(); _result = org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getBroker().fenceNode(org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getIp(), "", org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getType(), org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getUser(), org.ovirt.engine.core.vdsbroker.vdsbroker.FenceVdsVDSCommand.getParameters().getPassword(), "status", "", options); if ((_result.power) != null) { java.lang.String powerStatus = _result.power.toLowerCase(); if (((action == (org.ovirt.engine.core.common.businessentities.FenceActionType.Start)) && (powerStatus.equals("on"))) || ((action == (org.ovirt.engine.core.common.businessentities.FenceActionType.Stop)) && (powerStatus.equals("off")))) ret = true; } return ret; }
private boolean executeBasicAuthentication(javax.ws.rs.core.HttpHeaders headers, javax.servlet.http.HttpSession httpSession, boolean preferPersistentAuth) { boolean successful = false; java.util.List<java.lang.String> auth = headers.getRequestHeader(HttpHeaders.AUTHORIZATION); java.lang.String engineSessionId = org.ovirt.engine.api.common.security.auth.SessionUtils.generateEngineSessionId(); org.ovirt.engine.api.common.security.auth.SessionUtils.setEngineSessionId(httpSession, engineSessionId); if ((auth != null) && ((auth.size()) != 0)) { org.ovirt.engine.api.common.security.auth.Principal principal = scheme.decode(headers); if (((validator) == null) || (validator.validate(principal, engineSessionId))) { successful = true; updateAuthenticationProperties(preferPersistentAuth, principal); } } return successful; }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> buildFromOVFs(java.util.List<java.lang.String> ovfList) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<>(); for (java.lang.String ovf : ovfList) { try { if (!(ovfHelper.isOvfTemplate(ovf))) { vms.add(ovfHelper.readVmFromOvf(ovf)); } } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException ex) { auditLogOvfLoadError(ex.getName(), ex.getMessage()); } } return vms; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove Quota(s)") java.lang.String removeQuotasTitle();
@java.lang.Override public org.ovirt.engine.api.model.Templates list() { org.ovirt.engine.api.model.Templates templates = new org.ovirt.engine.api.model.Templates(); templates.getTemplates().addAll(getCollection()); return templates; }

@javax.ws.rs.Path("{action: (end)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }

@java.lang.Override public boolean execute() { java.lang.String sessionId = getSessionId(); if (sessionId != null) { sendRequest(createRequest(null), new org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.RestApiRequestCallback()); return true; } else { return false; } }

@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.models.hosts.ValueEventArgs e = ((org.ovirt.engine.ui.uicommonweb.models.hosts.ValueEventArgs) (args)); org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIterator<T>.CallbackContext<T> context = ((org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIterator<T>.CallbackContext<T>) (ev.getContext())); org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIterator<T> iterator = context.getIterator(); org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncIteratorPredicate<T> action = context.getAction(); T item = context.getItem(); java.lang.Object value = e.getValue(); boolean callComplete = false; if (action.match(item, value)) { callComplete = true; iterator.setStopped(true); } iterator.setCounter(((iterator.getCounter()) + 1)); if ((!(iterator.getStopped())) && ((iterator.getCounter()) == (org.ovirt.engine.ui.uicommonweb.Linq.count(iterator.getSource())))) { callComplete = true; } if (callComplete && ((iterator.getComplete()) != null)) { iterator.getComplete().run(item, value); } }
public static void init(final com.google.gwt.event.shared.EventBus eventBus) { org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel = org.ovirt.engine.ui.uicommonweb.models.CommonModel.newInstance(); org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.common.uicommon.model.MainModelSelectionChangeEvent.fire(eventBus, org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.commonModel.getSelectedItem()); } }); }
@java.lang.Override public java.lang.Integer getProgressValue(org.ovirt.engine.core.common.businessentities.VM object) { return object.getMigrationProgressPercent(); }




@org.junit.Test public void testCanDoActionPoolInMaintenance() { getStoragePool().setstatus(StoragePoolStatus.Maintenance); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND); }
public static org.ovirt.engine.core.common.businessentities.ServerCpu findMaxServerCpuByFlags(java.lang.String flags, org.ovirt.engine.core.compat.Version ver) { final org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager cpuFlagsManager = org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary.get(ver); if (cpuFlagsManager != null) { return cpuFlagsManager.FindMaxServerCpuByFlags(flags); } return null; }

private void init() { leftBound.setEntity(((macRange.getMacFrom()) == null ? "" : macRange.getMacFrom())); rightBound.setEntity(((macRange.getMacTo()) == null ? "" : macRange.getMacTo())); }

@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.storage.LUNs dummyLun = createDummyLun(); org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap connectionMapRecord = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap(dummyLun.getLUN_id(), org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getParameters().getStorageConnectionId()); java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connectionsForDomain; if ((org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getLunDao().get(dummyLun.getLUN_id())) == null) { org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getLunDao().save(dummyLun); connectionsForDomain = org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getStorageServerConnectionDao().getAllForDomain(org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getStorageDomainId()); for (org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : connectionsForDomain) { saveConnection(new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap(dummyLun.getLUN_id(), connection.getid())); } } saveConnection(connectionMapRecord); org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.setSucceeded(true); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.ActionVersionMap> getAllActionVersionMap() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource(); return getCallsHandler().executeReadList("GetAllFromaction_version_map", org.ovirt.engine.core.dao.ActionGroupDAODbFacadeImpl.ActionVersionMapMapper.instance, parameterSource); }
@java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.proceedLUNInDb(lun, lun.getLunType()); getBaseDiskDao().save(getParameters().getDiskInfo()); getDiskLunMapDao().save(new org.ovirt.engine.core.common.businessentities.storage.DiskLunMap(getParameters().getDiskInfo().getId(), lun.getLUN_id())); if ((getVm()) != null) { addManagedDeviceForDisk(getParameters().getDiskInfo().getId(), ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (getParameters().getDiskInfo())).isUsingScsiReservation()); } return null; }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = true; if (((org.ovirt.engine.core.bll.RemoveTagCommand.getTagId()) == null) || ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().get(org.ovirt.engine.core.bll.RemoveTagCommand.getTagId())) == null)) { addCanDoActionMessage(VdcBllMessages.TAGS_CANNOT_REMOVE_TAG_NOT_EXIST); returnValue = false; } return returnValue; }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.bll.aaa.RemoveGroupCommand.getParameters().getId(); if (isLastSuperUserGroup(id)) { addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE); return false; } if (MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID.equals(id)) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_BUILTIN_GROUP_EVERYONE); return false; } return true; }
protected void mapNfsOrLocalOrPosix(org.ovirt.engine.api.model.StorageDomain model, org.ovirt.engine.core.common.businessentities.StorageDomain entity) { final org.ovirt.engine.api.model.Storage storage = model.getStorage(); org.ovirt.engine.core.common.businessentities.StorageServerConnections cnx = getStorageServerConnection(entity.getStorage()); if (cnx.getconnection().contains(":")) { java.lang.String[] parts = cnx.getconnection().split(":"); model.getStorage().setAddress(parts[0]); model.getStorage().setPath(parts[1]); } else { model.getStorage().setPath(cnx.getconnection()); } storage.setMountOptions(cnx.getMountOptions()); storage.setVfsType(cnx.getVfsType()); if ((cnx.getNfsRetrans()) != null) { storage.setNfsRetrans(cnx.getNfsRetrans().intValue()); } if ((cnx.getNfsTimeo()) != null) { storage.setNfsTimeo(cnx.getNfsTimeo().intValue()); } if ((cnx.getNfsVersion()) != null) { storage.setNfsVersion(org.ovirt.engine.api.restapi.types.StorageDomainMapper.map(cnx.getNfsVersion(), null)); } }

public org.ovirt.engine.core.bll.ValidationResult isPosixSupportedInDC() { if ((!(storagePool.isLocal())) && (!(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.PosixStorageEnabled, storagePool.getCompatibilityVersion().toString())))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.DATA_CENTER_POSIX_STORAGE_NOT_SUPPORTED_IN_CURRENT_VERSION); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }


@org.junit.Test public void validateVmMemoryCanStartOnVdsHighPendingButSwapHelps() { vds.setSwapFree(80L); boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, true); }

protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntityPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); updates.setPhase(phase); return updateEntity(updates); }


public org.ovirt.engine.ui.uicommonweb.models.ListModel flush() { return getValue(); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getDismissCommand())) { dismissAlert(); } else if (command == (getClearAllCommand())) { clearAllDismissedAlerts(); } }


@java.lang.Override protected void perform() { final org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.RebootVm, new org.ovirt.engine.core.common.vdscommands.VdsAndVmIDVDSParametersBase(org.ovirt.engine.core.bll.RebootVmCommand.getVdsId(), org.ovirt.engine.core.bll.RebootVmCommand.getVmId())); setActionReturnValue(returnValue.getReturnValue()); setSucceeded(returnValue.getSucceeded()); }
private boolean validate() { getName().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.AsciiNameValidation() }); getType().validateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getUsername().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getPassword().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getTenantName().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getUrl().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.UrlValidation(org.ovirt.engine.ui.uicommonweb.Uri.SCHEME_HTTP, org.ovirt.engine.ui.uicommonweb.Uri.SCHEME_HTTPS) }); getNeutronAgentModel().validate(); return ((((((getName().getIsValid()) && (getType().getIsValid())) && (getUrl().getIsValid())) && (getUsername().getIsValid())) && (getPassword().getIsValid())) && (getTenantName().getIsValid())) && (getNeutronAgentModel().getIsValid()); }
private void importChain() { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.ImportProviderCertificateChain, new org.ovirt.engine.core.common.action.ProviderParameters(provider), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue(); if ((res != null) && (res.getSucceeded())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TestProviderConnectivity, new org.ovirt.engine.core.common.action.ProviderParameters(provider), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue(); setTestResultValue(res); stopProgress(); } }, null, false); } else { setTestResultValue(res); stopProgress(); } } }); sourceListModel.setConfirmWindow(null); }
@java.lang.Override protected boolean canDoAction() { return networkNotAttachedToCluster(org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters().getNetwork()); }
public boolean check(final org.ovirt.engine.core.common.businessentities.VDS host) { org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller poller = new org.ovirt.engine.core.bll.network.host.HostSetupNetworkPoller(); final long startTime = java.lang.System.nanoTime(); while (((java.lang.System.nanoTime()) - startTime) < (org.ovirt.engine.core.bll.host.HostConnectivityChecker.VDSM_RESPONSIVENESS_PERIOD_IN_NANOS)) { if (poller.poll(host.getId())) { org.ovirt.engine.core.bll.host.HostConnectivityChecker.log.info("Engine managed to communicate with VDSM agent on host '{}' with address '{}' ('{}')", host.getName(), host.getHostName(), host.getId()); return true; } } return false; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__PERMISSION); }

@org.junit.Test public void validateCanDoAction() { setupForStorageTests(); assertTrue(command.canDoAction()); }

@org.junit.Test public void updateConnectionOfUnattachedFileDomain() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0); org.ovirt.engine.core.common.businessentities.StorageDomain domain1 = new org.ovirt.engine.core.common.businessentities.StorageDomain(); domain1.setStorage(newNFSConnection.getconnection()); domain1.setStatus(StorageDomainStatus.Unknown); domain1.setStorageDomainSharedStatus(StorageDomainSharedStatus.Unattached); initDomainListForConnection(newNFSConnection.getid(), domain1); parameters.setStorageServerConnection(newNFSConnection); when(storageConnDao.get(newNFSConnection.getid())).thenReturn(oldNFSConnection); doReturn(false).when(command).isConnWithSameDetailsExists(newNFSConnection, null); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); }



@org.junit.Test public void testImportVMFromConfigurationXMLCouldNotGetParsed() { org.ovirt.engine.core.common.businessentities.OvfEntityData ovfEntity = getOvfEntityData(); ovfEntity.setOvfData("This is not a valid XML"); initCommand(ovfEntity); java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> ovfEntityDataList = new java.util.ArrayList<>(); ovfEntityDataList.add(ovfEntity); when(unregisteredOVFDataDao.getByEntityIdAndStorageDomain(vmId, storageDomainId)).thenReturn(ovfEntityDataList); when(validator.validateUnregisteredEntity(any(org.ovirt.engine.core.common.businessentities.IVdcQueryable.class), any(org.ovirt.engine.core.common.businessentities.OvfEntityData.class), anyList())).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED); }

@org.junit.Test public void testUpdateNetworkInfo() { when(mockTargetVnicProfileFinder.findTargetVnicProfile(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings)).thenReturn(vnicProfile); when(mockNetworkDao.get(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_ID)).thenReturn(targetNetwork); underTest.updateNetworkInfo(mockVmNetworkInterface, externalVnicProfileMappings); verify(mockTargetVnicProfileFinder).findTargetVnicProfile(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.EXTERNAL_NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME, externalVnicProfileMappings); verify(mockVmNetworkInterface).setVnicProfileId(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_ID); verify(mockVmNetworkInterface).setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.VNIC_PROFILE_NAME); verify(mockVmNetworkInterface).setNetworkName(org.ovirt.engine.core.bll.exportimport.ImportedNetworkInfoUpdaterTest.TARGET_NETWORK_NAME); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Bricks") java.lang.String hostBricksTitle();

@java.lang.Override protected boolean canDoAction() { if (!(checkRemoveEditValidations())) { return false; } if ((getVdsGroupDao().getClustersByClusterPolicyId(getParameters().getClusterPolicyId()).size()) > 0) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_POLICY_INUSE, java.lang.String.format("$clusters %1$s", clustersListIntoTokenizedString())); } return true; }


@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm()) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND); } return true; }




@java.lang.Override public void onFailure(final java.lang.Throwable caught) { if (org.ovirt.engine.ui.frontend.Frontend.ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ("Failed to execute RunAction: " + caught), caught); org.ovirt.engine.ui.frontend.Frontend.failureEventHandler(caught); org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult(actionType, parameters, null, state); callback.executed(f); }
private boolean evaluateHostUpgradeInternalCommandProgress(java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.bll.CommandBase<?> rootCommand) { org.ovirt.engine.core.common.businessentities.CommandEntity upgradeCommand = getHostUpgradeInternalCommand(childCmdIds); if (upgradeCommand != null) { switch (upgradeCommand.getCommandStatus()) { case ACTIVE : case NOT_STARTED : return false; case FAILED : case FAILED_RESTARTED : case UNKNOWN : rootCommand.setCommandStatus(CommandStatus.FAILED); return true; case SUCCEEDED : rootCommand.setCommandStatus(CommandStatus.SUCCEEDED); return true; } } return false; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow migrating VM between Hosts in a Cluster") java.lang.String allowMigratingVmBetweenHostsInClusterRoleTreeTooltip();
private void handleException(java.lang.Throwable e) { log.error(java.lang.String.format("Failed to import certificate: %1$s", e.getMessage())); log.debug("Exception", e); throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.PROVIDER_IMPORT_CERTIFICATE_ERROR, e.getMessage()); }
private void discoverTargets() { if (!(validateDiscoverTargetFields())) { return; } org.ovirt.engine.core.common.businessentities.VDS host = getContainer().getHost().getSelectedItem(); org.ovirt.engine.core.common.businessentities.StorageServerConnections tempVar = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); tempVar.setConnection(getAddress().getEntity().trim()); tempVar.setPort(getPort().getEntity().trim()); tempVar.setStorageType(StorageType.ISCSI); tempVar.setUserName((getUseUserAuth().getEntity() ? getUserName().getEntity() : "")); tempVar.setPassword((getUseUserAuth().getEntity() ? getPassword().getEntity() : "")); org.ovirt.engine.core.common.queries.DiscoverSendTargetsQueryParameters parameters = new org.ovirt.engine.core.common.queries.DiscoverSendTargetsQueryParameters(host.getId(), tempVar); setMessage(null); final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase model = this; java.lang.Object target = ((getWidgetModel()) != null) ? getWidgetModel() : getContainer(); org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(target, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object result = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); model.postDiscoverTargetsInternal((result != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>) (result)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>())); } }, true); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.DiscoverSendTargets, parameters, asyncQuery); }
private void initCommandExecutor() { if (!(cmdExecutorInitialized)) { for (org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity : coco.getCommandsWithCallBackEnabled()) { switch (cmdEntity.getCommandStatus()) { case ACTIVE_SYNC : case NOT_STARTED : coco.retrieveCommand(cmdEntity.getId()).setCommandStatus(CommandStatus.FAILED_RESTARTED); break; default : if (!(cmdEntity.isCallBackNotified())) { addToCallBackMap(cmdEntity); } break; } } cmdExecutorInitialized = true; } }
private boolean isStoragePoolMatching(org.ovirt.engine.core.common.businessentities.VM vm) { if ((org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getStoragePoolIsoMapDao().get(new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId(getStorageDomainId(), vm.getStoragePoolId()))) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_OF_VM_NOT_MATCH); } return true; }

public void run() { org.ovirt.vdsm.jsonrpc.client.internal.MessageContext context = null; org.codehaus.jackson.map.ObjectMapper mapper = new org.codehaus.jackson.map.ObjectMapper(); while (true) { try { context = this.queue.take(); if ((context.getClient()) == null) { break; } org.ovirt.vdsm.jsonrpc.client.internal.ResponseWorker.log.info(("Message received :" + (new java.lang.String(context.getMessage(), UTF8)))); org.codehaus.jackson.JsonNode rootNode = mapper.readTree(context.getMessage()); if (!(rootNode.isArray())) { processIncomingObject(context.getClient(), rootNode); } else { final java.util.Iterator<org.codehaus.jackson.JsonNode> iter = rootNode.getElements(); while (iter.hasNext()) { final org.codehaus.jackson.JsonNode node = iter.next(); processIncomingObject(context.getClient(), node); } } } catch (java.lang.Exception e) { org.ovirt.vdsm.jsonrpc.client.internal.ResponseWorker.log.warn("Exception thrown during message processing", e); continue; } } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.ActionGroup.class, to = org.ovirt.engine.api.model.PermitType.class) public static org.ovirt.engine.api.model.PermitType map(org.ovirt.engine.core.common.businessentities.ActionGroup entity, org.ovirt.engine.api.model.PermitType template) { try { return org.ovirt.engine.api.model.PermitType.valueOf(entity); } catch (java.lang.IllegalArgumentException e) { org.ovirt.engine.api.restapi.types.PermitMapper.log.error(new org.ovirt.engine.api.restapi.utils.MappingException(((("Missing mapping " + entity) + " --> ") + (org.ovirt.engine.api.model.PermitType.class.getName())), e)); return null; } }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if (!(org.apache.commons.lang.StringUtils.isBlank(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm().getName()))) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm().getName(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_NAME, VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_BEING_UPDATED)); } return null; }

public static java.util.List<org.ovirt.engine.core.common.businessentities.ad_groups> getAllGroups() { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.ad_groups>(); }
@java.lang.Override protected void onEntityChanged() { super.onEntityChanged(); if ((getEntity()) != null) { updateProperties(); } }

public java.lang.String getVncKeyboardLayout() { return vmStatic.getVncKeyboardLayout(); }
protected void handleCopyResult(org.ovirt.engine.core.common.businessentities.DiskImage copiedDiskImage, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, org.ovirt.engine.core.common.action.VdcReturnValueBase result) { if (!(result.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.VolumeCreationError); } else { org.ovirt.engine.core.bll.ImagesHandler.addDiskImageWithNoVmDevice(copiedDiskImage); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getTaskIdList().addAll(result.getInternalVdsmTaskIdList()); newDiskImages.add(copiedDiskImage); } }
protected void restartVdsVms() { java.util.List<org.ovirt.engine.core.compat.Guid> autoStartVmIdsToRerun = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : mVmList) { destroyVmOnDestination(vm); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.SetVmStatus, new org.ovirt.engine.core.common.vdscommands.SetVmStatusVDSCommandParameters(vm.getId(), org.ovirt.engine.core.common.businessentities.VMStatus.Down, org.ovirt.engine.core.common.businessentities.VmExitStatus.Error)); if ((returnValue != null) && (returnValue.getSucceeded())) { LogSettingVmToDown(org.ovirt.engine.core.bll.FenceVdsBaseCommand.getVds().getId(), vm.getId()); } setVmId(vm.getId()); setVmName(vm.getName()); setVm(vm); org.ovirt.engine.core.bll.VmPoolHandler.processVmPoolOnStopVm(vm.getId(), org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks(org.ovirt.engine.core.bll.FenceVdsBaseCommand.getExecutionContext())); if (vm.isAutoStartup()) { autoStartVmIdsToRerun.add(vm.getId()); } } if (!(autoStartVmIdsToRerun.isEmpty())) { org.ovirt.engine.core.bll.AutoStartVmsRunner.getInstance().addVmsToRun(autoStartVmIdsToRerun); } org.ovirt.engine.core.bll.FenceVdsBaseCommand.setVm(null); setVmId(Guid.Empty); org.ovirt.engine.core.bll.FenceVdsBaseCommand.setVmName(null); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (getEnabled().equals(sender)) { updateChangeability(); } }
private void writeEventMap() { logger.log(Type.DEBUG, "Strating to write EventMap"); sw.println(); sw.println("@Override"); sw.println((("protected " + (org.ovirt.engine.ui.common.editor.UiCommonEventMap.class.getName())) + " getEventMap() {")); sw.indent(); sw.println(((((org.ovirt.engine.ui.common.editor.UiCommonEventMap.class.getName()) + " eventMap = new ") + (org.ovirt.engine.ui.common.editor.UiCommonEventMap.class.getName())) + "();")); logger.log(Type.DEBUG, "Looking for Model Fields"); for (com.google.gwt.editor.rebind.model.EditorData editorData : model.getEditorData()) { logger.log(Type.DEBUG, ("Going over Field: " + editorData)); java.lang.String path = editorData.getPath(); if ((path.length()) == 0) { continue; } com.google.gwt.core.ext.typeinfo.JClassType propertyOwnerType = eraseType(editorData.getPropertyOwnerType()); if (propertyOwnerType == (entityModelType)) { logger.log(Type.DEBUG, ("Found EntityModel Field: " + editorData)); sw.println("eventMap.addEvent(\"%s\", \"EntityChanged\", getObject()%s.getEntityChangedEvent());", path, editorData.getBeanOwnerExpression()); } else if (propertyOwnerType == (listModelType)) { logger.log(Type.DEBUG, ("Found ListModel Field: " + editorData)); sw.println("eventMap.addEvent(\"%s\", \"ItemsChanged\", getObject()%s.getItemsChangedEvent());", path, editorData.getBeanOwnerExpression()); sw.println("eventMap.addEvent(\"%s\", \"SelectedItemsChanged\", getObject()%s.getSelectedItemsChangedEvent());", path, editorData.getBeanOwnerExpression()); sw.println("eventMap.addEvent(\"%s\", \"SelectedItemChanged\", getObject()%s.getSelectedItemChangedEvent());", path, editorData.getBeanOwnerExpression()); } } sw.println("return eventMap;"); sw.outdent(); sw.println("}"); }





@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel<java.lang.Void> clusterListModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel<java.lang.Void>) (target)); org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (clusterListModel.getWindow())); model.setEntity(returnValue); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", clusterListModel); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().configureLaterTitle()); tempVar.setIsDefault(true); tempVar.setIsCancel(true); model.getCommands().add(tempVar); }

private org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel resolveSelectedConsoleModel(org.ovirt.engine.core.compat.Guid vmId) { for (org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel model : cachedConsoleModels.get(vmId)) { if (model.isUserSelected()) { return model; } } return null; }
@java.lang.Override protected void cretaeVirtIODisk() { org.ovirt.engine.core.common.businessentities.DiskImage disk = getDiskImage(); disk.setDiskInterface(DiskInterface.VirtIO); disk.setActive(true); doReturn(diskDao).when(command).getDiskDao(); when(diskDao.get(diskImageGuid)).thenReturn(disk); mockVmDevice(true); }
public void setEntity(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity value) { super.setEntity(value); }

public boolean getPostZeros() { return postZeros; }
public static org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus getEventStatus(javax.sql.DataSource dataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus result = new org.ovirt.engine.ui.frontend.server.dashboard.InventoryStatus(); org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO(dataSource); java.util.Map<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> data = dao.getEventStatusCount(); for (java.util.Map.Entry<org.ovirt.engine.core.common.AuditLogSeverity, java.lang.Integer> entry : data.entrySet()) { switch (entry.getKey()) { case ALERT : result.setStatusCount(AuditLogSeverity.ALERT.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; case ERROR : result.setStatusCount(AuditLogSeverity.ERROR.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; case NORMAL : break; case WARNING : result.setStatusCount(AuditLogSeverity.WARNING.name().toLowerCase(), entry.getValue()); result.setTotalCount(((result.getTotalCount()) + (entry.getValue()))); break; default : break; } } return result; }
private void hasIllegalStatusMessage() { assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2.toString())); }

private boolean connectStorageServer(org.ovirt.engine.core.common.businessentities.StorageType type, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections) { boolean connectSucceeded = true; if ((connections != null) && ((connections.size()) > 0)) { java.util.Map<java.lang.String, java.lang.String> retValues = ((java.util.HashMap<java.lang.String, java.lang.String>) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ConnectStorageServer, new org.ovirt.engine.core.common.vdscommands.StorageServerConnectionManagementVDSParameters(getVds().getId(), getStoragePool().getId(), type, connections)).getReturnValue())); connectSucceeded = org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(type).isConnectSucceeded(retValues, connections); log.infoFormat("Host {0} storage connection was {1} ", getVds().getName(), (connectSucceeded ? "succeeded" : "failed")); } return connectSucceeded; }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__UPDATE_VM_VERSION); addCanDoActionMessage(EngineMessage.VAR__TYPE__VM); }
protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((!(isRngSupportedByCluster())) && ((getTemplateType()) != (org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE))) { return failCanDoAction(VdcBllMessages.ACTION_NOT_SUPPORTED_FOR_CLUSTER_POOL_LEVEL); } if (!(getRngDevices().isEmpty())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_RNG_ALREADY_EXISTS); } return true; }
@java.lang.Override protected void executeVmCommand() { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retValue = runVdsCommand(VDSCommandType.ConvertVm, buildConvertParameters()); if (retValue.getSucceeded()) { getVdsManager().addV2VJobInfoForVm(org.ovirt.engine.core.bll.ConvertVmCommand.getVmId(), JobStatus.WAIT_FOR_START); org.ovirt.engine.core.bll.ConvertVmCommand.setSucceeded(true); } else { org.ovirt.engine.core.bll.ConvertVmCommand.log.error("Failed to convert VM"); setCommandStatus(CommandStatus.FAILED); } } catch (org.ovirt.engine.core.common.errors.EngineException e) { org.ovirt.engine.core.bll.ConvertVmCommand.log.error("Failed to convert VM", e); setCommandStatus(CommandStatus.FAILED); } }
@java.lang.Override public int getQuotaCount() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource(); return getCallsHandler().executeRead("getQuotaCount", org.ovirt.engine.core.dao.QuotaDAODbFacadeImpl.longMapper, parameterSource).intValue(); }
@java.lang.Override public boolean isValid(java.lang.String name, javax.validation.ConstraintValidatorContext context) { return (name != null) && (org.ovirt.engine.core.common.utils.ValidationUtils.validHostname(name)); }
static void handleActionResult(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, org.ovirt.engine.core.common.action.VdcReturnValueBase result, org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback callback, final java.lang.Object state, final boolean showErrorDialog) { org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.FINER, "Retrieved action result from RunAction."); org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult(actionType, parameters, result, state); boolean success = false; if (!(result.getCanDoAction())) { callback.executed(f); } else if ((showErrorDialog && (result.getIsSyncronious())) && (!(result.getSucceeded()))) { org.ovirt.engine.ui.frontend.Frontend.runActionExecutionFailed(actionType, result.getFault()); callback.executed(f); success = true; } else { success = true; callback.executed(f); } if (((!success) && ((org.ovirt.engine.ui.frontend.Frontend.getEventsHandler()) != null)) && (org.ovirt.engine.ui.frontend.Frontend.getEventsHandler().isRaiseErrorModalPanel(actionType, result.getFault()))) { if ((result.getCanDoActionMessages().size()) <= 1) { java.lang.String errorMessage = ((!(result.getCanDoAction())) || (!(result.getCanDoActionMessages().isEmpty()))) ? org.ovirt.engine.ui.frontend.Frontend.getRunActionErrorMessage(result.getCanDoActionMessages()) : result.getFault().getMessage(); org.ovirt.engine.ui.frontend.Frontend.failureEventHandler(result.getDescription(), errorMessage); } else { org.ovirt.engine.ui.frontend.Frontend.failureEventHandler(result.getDescription(), result.getCanDoActionMessages()); } } }

private void assertCanDoActionFailure(final java.lang.String messageToVerify) { assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(messageToVerify)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel model = ((org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel) (sender)); java.lang.String propertyName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName; if ("SelectionNodeList".equals(propertyName)) { updateTree(model); } }
@java.lang.Override protected boolean canDoAction() { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap> poolDomains = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().getAllForStoragePool(org.ovirt.engine.core.bll.storage.ReconstructMasterDomainCommand.getStoragePool().getId()); for (org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap poolDomain : poolDomains) { if ((poolDomain.getstatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Locked)) { addInvalidSDStatusMessage(poolDomain.getstatus()); return false; } } return org.ovirt.engine.core.bll.storage.ReconstructMasterDomainCommand.initializeVds(); }

public void setrole_id(org.ovirt.engine.core.compat.Guid value) { this.roleId = value; }

@org.junit.Test public void executeCommandWhenFailed() { cmd = spy(new org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommand<org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters>(new org.ovirt.engine.core.common.action.gluster.GlusterClusterParameters(org.ovirt.engine.core.bll.gluster.RefreshGlusterHooksCommandTest.CLUSTER_ID))); setupMocks(); doThrow(new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.GlusterHookListException)).when(hookSyncJob).refreshHooksInCluster(getVdsGroup(), true); try { cmd.executeCommand(); fail("Expected VdcBLLException"); } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { assertEquals(e.getErrorCode(), VdcBllErrors.GlusterHookListException); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_REFRESH_FAILED); } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Are you sure you want to reset the following option?") java.lang.String resetOptionVolumeMsg();


private void showCheckBoxes() { for (java.util.Map.Entry<T, com.google.gwt.user.client.ui.CheckBox> currentEntry : checkBoxes.entrySet()) { wrapperPanel.add(currentEntry.getValue()); } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VMInfoListReturnForXmlRpc getVmStats(java.lang.String vmId) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.getStats").withParameter("vmID", vmId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("statsList"); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMInfoListReturnForXmlRpc(response); }

org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> createHANotRunningAndUknown() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), null); pair.getFirst().setAutoStartup(true); pair.getFirst().setStatus(VMStatus.Unknown); return pair; }
protected java.util.List<org.ovirt.engine.core.common.businessentities.qos.NetworkQoS> getAllQosInDc() { if ((allQos) == null) { allQos = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getQosDao().getAllForStoragePoolId(qos.getStoragePoolId()); } return allQos; }



@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel hostListModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel) (model)); org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel innerHostModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel) (hostListModel.getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>) (result)); org.ovirt.engine.core.common.businessentities.VDS host = ((org.ovirt.engine.core.common.businessentities.VDS) (hostListModel.getSelectedItem())); innerHostModel.updateModelFromVds(host, dataCenters, false, getSystemTreeSelectedItem()); innerHostModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editAndApproveHostTitle()); innerHostModel.setHashName("edit_and_approve_host"); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnApprove", hostListModel); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); innerHostModel.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", hostListModel); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); innerHostModel.getCommands().add(tempVar2); }
private void endCopyCollapseOperations(org.ovirt.engine.core.common.businessentities.VM vm) { vm.setVmtGuid(VmTemplateHandler.BlankVmTemplateId); vm.setVmtName(null); org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSnapshotDao().get(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSnapshotDao().getId(vm.getId(), SnapshotType.ACTIVE)); vm.setSnapshots(java.util.Arrays.asList(activeSnapshot)); updateCopyVmInSpm(org.ovirt.engine.core.bll.ExportVmCommand.getVm().getStoragePoolId(), vm, org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getStorageDomainId()); }
protected boolean checkStorageConnection(java.lang.String storageDomainConnection) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domains = null; org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommon.getStorageServerConnectionDao().get(storageDomainConnection); if (connection == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_NOT_EXIST); } if (connection.getStorageType().isFileDomain()) { domains = getStorageDomainsByConnId(connection.getId()); if ((domains.size()) > 0) { java.lang.String domainNames = createDomainNamesListFromStorageDomains(domains); return prepareFailureMessageForDomains(domainNames); } } return true; }

private boolean isTemplateInDestStorageDomain(org.ovirt.engine.core.compat.Guid imageId, org.ovirt.engine.core.compat.Guid sourceDomainId) { org.ovirt.engine.core.compat.Guid templateId = getDiskImageByImageId(imageId).getImageTemplateId(); if (!(Guid.Empty.equals(templateId))) { org.ovirt.engine.core.common.businessentities.storage.DiskImage templateImage = org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getDiskImageDao().get(templateId); if (!(templateImage.getStorageIds().contains(sourceDomainId))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return true; }
protected boolean proceedVdsStats() { boolean returnValue = true; try { runVdsCommand(VDSCommandType.GetStats, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(getVds())); java.util.List<org.ovirt.engine.core.compat.Guid> problematicDomainsIds = org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.fetchDomainsReportedAsProblematic(getVds().getStoragePoolId(), getVds().getDomains()); for (org.ovirt.engine.core.compat.Guid domainId : problematicDomainsIds) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainInfo = getStorageDomainStaticDAO().get(domainId); log.errorFormat("Storage Domain {0} of pool {1} is in problem in host {2}", (domainInfo != null ? domainInfo.getStorageName() : domainId), getStoragePool().getName(), getVds().getName()); if ((domainInfo == null) || (domainInfo.getStorageDomainType().isDataDomain())) { returnValue = false; } } } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { log.errorFormat("Could not get Host statistics for Host {0}, Error is {1}", getVds().getName(), e); returnValue = false; } return returnValue; }
private static java.lang.String composeObjectId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable, org.ovirt.engine.core.common.AuditLogType logType) { final java.lang.StringBuilder builder = new java.lang.StringBuilder(); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.compose(builder, "type", logType.toString()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.compose(builder, "sd", org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.nullToEmptyString(logable.getStorageDomainId())); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.compose(builder, "dc", org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.nullToEmptyString(logable.getStoragePoolId())); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.compose(builder, "user", org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.nullToEmptyString(logable.getUserId())); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.compose(builder, "cluster", logable.getVdsGroupId().toString()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.compose(builder, "vds", logable.getVdsId().toString()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.compose(builder, "vm", org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.emptyGuidToEmptyString(logable.getVmId())); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.compose(builder, "template", org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.emptyGuidToEmptyString(logable.getVmTemplateId())); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.compose(builder, "customId", org.apache.commons.lang.StringUtils.defaultString(logable.getCustomId())); return builder.toString(); }

@org.junit.Test public void testCDAVdsIsSPM() { vds.setSpmStatus(VdsSpmStatus.SPM); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure("canDoAction did not fail on a VDS that is already set as SPM", command, VdcBllMessages.CANNOT_FORCE_SELECT_SPM_VDS_ALREADY_SPM); }
protected javax.ws.rs.core.Response doAction(final org.ovirt.engine.core.common.action.VdcActionType task, final org.ovirt.engine.core.common.action.VdcActionParametersBase params, final org.ovirt.engine.api.model.Action action, org.ovirt.engine.api.restapi.resource.AbstractBackendResource.PollingType pollingType) { awaitGrace(action); try { org.ovirt.engine.core.common.action.VdcReturnValueBase actionResult = doAction(task, params); if (actionResult.getHasAsyncTasks()) { if (expectBlocking(action)) { org.ovirt.engine.api.model.CreationStatus status = awaitCompletion(actionResult, pollingType); return actionStatus(status, action); } else { return actionAsync(actionResult, action); } } else { return actionSuccess(action); } } catch (java.lang.Exception e) { return handleError(e, action); } }
private void addCpuPinning(final java.lang.String compatibilityVersion) { final java.lang.String cpuPinning = vm.getCpuPinning(); if (((!(org.apache.commons.lang.StringUtils.isEmpty(cpuPinning))) && (java.lang.Boolean.TRUE.equals(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>GetValue(ConfigValues.CpuPinningEnabled, compatibilityVersion)))) && (cpuPinning != null)) { final org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct pinDict = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct(); for (java.lang.String pin : cpuPinning.split("_")) { final java.lang.String[] split = pin.split("#"); pinDict.add(split[0], split[1]); } createInfo.add(VdsProperties.cpuPinning, pinDict); } }
public boolean entityStateEqualTo(org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel other) { if (((getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VmPool) && ((other.getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VmPool)) { return getEntity().equals(other.getEntity()); } else if (((getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VM) && ((other.getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VM)) { org.ovirt.engine.core.common.businessentities.VM thisVm = ((org.ovirt.engine.core.common.businessentities.VM) (getEntity())); org.ovirt.engine.core.common.businessentities.VM otherVm = ((org.ovirt.engine.core.common.businessentities.VM) (other.getEntity())); return (thisVm.getDynamicData().getStatus().equals(otherVm.getDynamicData().getStatus())) && (thisVm.getStaticData().equals(otherVm.getStaticData())); } return false; }

public static void GetRoleList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.roles>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.roles>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllRoles, new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters(), aQuery); }


@javax.ws.rs.Path("{action: (approve|install|fence|activate|deactivate|commitnetconfig|iscsidiscover|iscsilogin)}/{oid}") public org.ovirt.engine.api.resource.ActionResource getActionSubresource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid);
@org.junit.Test public void testGetClustersHavingHosts() { java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = ((org.ovirt.engine.core.dao.VdsGroupDAODbFacadeImpl) (dao)).getClustersHavingHosts(); assertNotNull(clusters); assertThat(clusters, hasSize(4)); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__ADD); addCanDoActionMessage(EngineMessage.VAR__TYPE__USER_PROFILE); }

protected boolean checkQuotaValidationCommon(org.ovirt.engine.core.common.businessentities.Quota quota, java.util.List<java.lang.String> messages) { if (quota == null) { messages.add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID.toString()); return false; } if (((!(checkQuotaNameExisting(quota, messages))) || (!(org.ovirt.engine.core.bll.QuotaCRUDCommand.validateQuotaStorageLimitation(quota, messages)))) || (!(org.ovirt.engine.core.bll.QuotaCRUDCommand.validateQuotaVdsGroupLimitation(quota, messages)))) { return false; } return true; }

@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveAlreadySlavesForDifferentBond() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond("bond1"); org.ovirt.engine.core.common.businessentities.network.Bond differentBond = createBond("bond2"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveA = createBondSlave(bond, "slaveA"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveB = createBondSlave(differentBond, "slaveB"); setBondSlaves(bond, slaveA, slaveB); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_ALREADY_IN_BOND; org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(bond)).addExistingInterfaces(bond, differentBond, slaveA, slaveB).build(); _doTestValidateModifiedBondSlaves(spy(validator), ValidationResult.VALID, ValidationResult.VALID, failsWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(engineMessage, slaveB.getName()))); }
public java.lang.Integer getVmsCoresCount() { return this.mVdsDynamic.getVmsCoresCount(); }





private void restoreNetworkParameters(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { org.ovirt.engine.ui.uicommonweb.models.hosts.NetworkParameters netParams = getSetupModel().getNetworkToLastDetachParams().get(getName()); if (netParams != null) { nic.setBootProtocol(netParams.getBootProtocol()); nic.setAddress(netParams.getAddress()); nic.setSubnet(netParams.getSubnet()); nic.setGateway(netParams.getGateway()); nic.setQosOverridden(netParams.getQosOverridden()); nic.setQos(netParams.getQos()); nic.setCustomProperties(netParams.getCustomProperties()); } else if ((nic.getBootProtocol()) == null) { nic.setBootProtocol((isManagement() ? org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.DHCP : org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.NONE)); } }
@java.lang.Override public void testQuery() throws java.lang.Exception { setUpGetGraphicsExpectations(3); super.testQuery(); }

protected boolean checkMasterDomainIsUp() { boolean returnValue = true; java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomainDao().getAllForStoragePool(org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStoragePool().getId()); storageDomains = org.ovirt.engine.core.utils.linq.LinqUtils.filter(storageDomains, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.StorageDomain a) { return ((a.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master)) && ((a.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)); } }); if (storageDomains.isEmpty()) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_MASTER_STORAGE_DOMAIN_NOT_ACTIVE); returnValue = false; } return returnValue; }
private void applyKerberosConfiguration() throws org.ovirt.engine.core.utils.kerberos.ManageDomainsResult { try { if (org.ovirt.engine.core.utils.FileUtil.fileExists(utilityConfiguration.getkrb5confFilePath())) { java.text.SimpleDateFormat ft = new java.text.SimpleDateFormat("yyyyMMddhhmmsszzz"); java.lang.String destFileName = ((utilityConfiguration.getkrb5confFilePath()) + ".backup_") + (ft.format(new java.util.Date())); org.ovirt.engine.core.utils.kerberos.ManageDomains.log.info(("Performing backup of kerberos configuration file to " + destFileName)); org.ovirt.engine.core.utils.FileUtil.copyFile(utilityConfiguration.getkrb5confFilePath(), destFileName); } org.ovirt.engine.core.utils.kerberos.ManageDomains.log.info("Applying kerberos configuration"); org.ovirt.engine.core.utils.FileUtil.copyFile(((utilityConfiguration.getkrb5confFilePath()) + (TESTING_KRB5_CONF_SUFFIX)), utilityConfiguration.getkrb5confFilePath()); org.ovirt.engine.core.utils.FileUtil.deleteFile(((utilityConfiguration.getkrb5confFilePath()) + (TESTING_KRB5_CONF_SUFFIX))); } catch (java.io.IOException e) { throw new org.ovirt.engine.core.utils.kerberos.ManageDomainsResult(ManageDomainsResultEnum.FAILURE_WHILE_APPLYING_KERBEROS_CONFIGURATION, e.getMessage()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (((connectAutomatically.readConnectAutomatically()) && (model.getCanConnectAutomatically())) && (!(alreadyOpened))) { try { model.getAutoConnectableConsoles().get(0).connect(); alreadyOpened = true; } catch (org.ovirt.engine.ui.uicommonweb.models.VmConsoles e) { errorPopupManager.show(e.getLocalizedErrorMessage()); } } unregisterModels(); }

public java.lang.String determineProtocolMessage(org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel item) { if (item.getIsPool()) { return ""; } if (!((isRDPAvailable()) || (isSpiceAvailable()))) { return org.ovirt.engine.ui.userportal.widget.basic.ConsoleUtils.BROWSER_NOT_SUPPORTED_MESSAGE; } boolean isSpice = ((item.getDefaultConsole()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel) && (isSpiceAvailable()); boolean isRdp = (item.getHasAdditionalConsole()) && (isRDPAvailable()); if ((!isSpice) && (!isRdp)) { return org.ovirt.engine.ui.userportal.widget.basic.ConsoleUtils.VNC_NOT_SUPPORTED_MESSAGE; } return ""; }

@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.VdcQueryParametersBase tempVar = org.ovirt.engine.core.bll.GetTagsByUserIdQuery.getParameters(); org.ovirt.engine.core.bll.GetTagsByUserIdQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.DbFacade.getInstance().getTagDao().getAllForUsers(org.ovirt.engine.core.bll.GetTagsByUserIdQuery.getParameters().getUserId())); }
@org.junit.Test public void testStop() throws java.lang.Exception { setUriInfo(setUpActionExpectations(VdcActionType.StopVm, org.ovirt.engine.core.common.action.StopVmParameters.class, new java.lang.String[]{ "VmId", "StopVmType" }, new java.lang.Object[]{ GUIDS[0], org.ovirt.engine.core.common.action.StopVmTypeEnum.NORMAL })); verifyActionResponse(resource.stop(new org.ovirt.engine.api.model.Action())); }
private void postExportGetMissingTemplates(java.util.ArrayList<java.lang.String> missingTemplatesFromVms) { org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel) (getWindow())); if (!(missingTemplatesFromVms.isEmpty())) { model.stopProgress(); org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().baseTemplatesNotFoundOnExportDomainTitle()); confirmModel.setHelpTag(HelpTag.base_template_not_found_on_export_domain); confirmModel.setHashName("base_template_not_found_on_export_domain"); confirmModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().theFollowingTemplatesAreMissingOnTargetExportDomainForTemplateVersionsMsg()); confirmModel.setItems(missingTemplatesFromVms); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnExportNoTemplates", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); confirmModel.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); confirmModel.getCommands().add(tempVar2); } else { doExport(); } }
private void setNode() { _isNode = true; _deploy.getVds().setVdsType(VDSType.oVirtNode); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsStaticDao().update(_deploy.getVds().getStaticData()); return null; }); }
@java.lang.Override protected void endSuccessfully() { if ((org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getDestinationDiskImage()) != null) { org.ovirt.engine.core.common.businessentities.storage.DiskImage curr = org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getDestinationDiskImage(); org.ovirt.engine.core.common.businessentities.storage.DiskImage volumeBasedOnsnapshot = org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getDiskImageDao().getAllSnapshotsForLeaf(curr.getImageId()).get(0); org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getImageDao().remove(curr.getImageId()); volumeBasedOnsnapshot.setParentId(curr.getParentId()); org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getBaseDiskDao().update(volumeBasedOnsnapshot); org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getImageDao().update(volumeBasedOnsnapshot.getImage()); } if (!(org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getParameters().isParentHasTasks())) { org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getBackend().endAction(org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getParameters().getParentCommand(), org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.getParameters().getParentParameters(), null); } org.ovirt.engine.core.bll.RemoveCinderSnapshotDiskCommand.setSucceeded(true); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.VDS.class, to = org.ovirt.engine.api.model.HardwareInformation.class) public static org.ovirt.engine.api.model.HardwareInformation map(org.ovirt.engine.core.common.businessentities.VDS entity, org.ovirt.engine.api.model.HardwareInformation template) { org.ovirt.engine.api.model.HardwareInformation model = (template != null) ? template : new org.ovirt.engine.api.model.HardwareInformation(); model.setManufacturer(entity.getHardwareManufacturer()); model.setFamily(entity.getHardwareFamily()); model.setProductName(entity.getHardwareProductName()); model.setSerialNumber(entity.getHardwareSerialNumber()); model.setUuid(entity.getHardwareUUID()); model.setVersion(entity.getHardwareVersion()); model.setSupportedRngSources(org.ovirt.engine.api.restapi.types.RngDeviceMapper.mapRngSources(entity.getSupportedRngSources(), null)); return model; }

private org.ovirt.engine.core.bll.network.macpool.MacPool createPoolInternal(org.ovirt.engine.core.common.businessentities.MacPool macPool) { if (macPools.containsKey(macPool.getId())) { throw new java.lang.IllegalStateException(org.ovirt.engine.core.bll.network.macpool.MacPoolPerDc.UNABLE_TO_CREATE_MAC_POOL_IT_ALREADY_EXIST); } org.ovirt.engine.core.bll.network.macpool.MacPool poolForScope = new org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges(macPoolToRanges(macPool), macPool.isAllowDuplicateMacAddresses()); macPools.put(macPool.getId(), new org.ovirt.engine.core.bll.network.macpool.MacPoolLockingProxy(poolForScope)); return poolForScope; }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.GlusterBricks bricks) { for (org.ovirt.engine.api.model.GlusterBrick brick : bricks.getGlusterBricks()) { validateParameters(brick, "serverId", "brickDir"); } java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> brickEntities = mapBricks(asGuid(getVolumeId()), bricks); int replicaCount = (bricks.isSetReplicaCount()) ? bricks.getReplicaCount() : 0; int stripeCount = (bricks.isSetStripeCount()) ? bricks.getStripeCount() : 0; return performCreationMultiple(VdcActionType.AddBricksToGlusterVolume, new org.ovirt.engine.core.common.action.gluster.GlusterVolumeBricksActionParameters(asGuid(getVolumeId()), brickEntities, replicaCount, stripeCount, isForce()), new org.ovirt.engine.api.restapi.resource.gluster.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetGlusterBrickById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult mtuValid() { return (network.getMtu()) == 0 ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_CANNOT_HAVE_MTU); }
public org.ovirt.engine.core.bll.ValidationResult isStorageDomainFormatCorrectForDC() { if (isStorageDomainOfTypeIsoOrExport()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((storagePool) != null) { if ((org.ovirt.engine.core.common.utils.VersionStorageFormatUtil.getPreferredForVersion(storagePool.getCompatibilityVersion(), storageDomainStatic.getStorageType()).compareTo(storageDomainStatic.getStorageFormat())) < 0) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_FORMAT_ILLEGAL, java.lang.String.format("$storageFormat %1$s", storageDomainStatic.getStorageFormat().toString())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }

@java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { sourceListModel.setConfirmWindow(null); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = ((org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface) (bondPopup.getBond().getSelectedItem())); setBondOptions(bond, bondPopup); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic1 = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (networkCommand.getOp1())); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic2 = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (networkCommand.getOp2())); java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> networks = ((nic1.getItems().size()) != 0) ? new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(nic1.getItems()) : new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(nic2.getItems()); networkCommand.Execute(bond); redraw(); for (org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic : getNics()) { if (nic.getName().equals(bond.getName())) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.attachNetworks(nic, networks, allNics); redraw(); return; } } }
@org.junit.Before public void setup() { validator = spy(new org.ovirt.engine.core.bll.validator.VnicProfileValidator(vmDao, vnicProfile)); doReturn(dbFacade).when(validator).getDbFacade(); when(dbFacade.getVnicProfileDao()).thenReturn(vnicProfileDao); when(dbFacade.getNetworkDao()).thenReturn(networkDao); when(dbFacade.getNetworkQosDao()).thenReturn(networkQosDao); when(dbFacade.getVmDao()).thenReturn(vmDao); when(vnicProfileDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vnicProfile); when(vnicProfileDao.getAllForNetwork(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vnicProfiles); }

public org.ovirt.engine.core.bll.ValidationResult isVirtIoScsiValid(org.ovirt.engine.core.common.businessentities.VM vm) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI) != (disk.getDiskInterface())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((disk.getSgio()) != null) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE) == (disk.getDiskStorageType())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.SCSI_GENERIC_IO_IS_NOT_SUPPORTED_FOR_IMAGE_DISK); } } if (vm != null) { if (!(org.ovirt.engine.core.common.FeatureSupported.virtIoScsi(vm.getVdsGroupCompatibilityVersion()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL); } if (!(isVirtioScsiControllerAttached(vm.getId()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.CANNOT_PERFORM_ACTION_VIRTIO_SCSI_IS_DISABLED); } return isOsSupportedForVirtIoScsi(vm); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@org.junit.Test public void failsIfImported() throws java.lang.Exception { when(hostedEngineHelper.getStorageDomain()).thenReturn(new org.ovirt.engine.core.common.businessentities.StorageDomainStatic()); cmd.canDoAction(); org.ovirt.engine.core.bll.CanDoActionTestUtils.assertCanDoActionMessages("", cmd, EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); verify(backend, times(0)).runInternalQuery(eq(VdcQueryType.GetExistingStorageDomainList), any(org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class)); verify(cmd, times(0)).executeCommand(); }

public void isAnyHostUpInCluster(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, java.lang.String clusterName) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if ((source != null) && (!(((java.util.List<?>) (source)).isEmpty()))) { return true; } return false; } }; getUpHostListByCluster(aQuery, clusterName, 1); }
@java.lang.Override public void doPolling(org.ovirt.engine.core.compat.Guid cmdId, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandExecutionStatus(cmdId); if ((status != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) && ((org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandStatus(cmdId)) == (org.ovirt.engine.core.compat.CommandStatus.ACTIVE))) { return; } boolean anyFailed = false; int completedChildren = 0; org.ovirt.engine.core.bll.CommandBase<?> command = getCommand(cmdId); for (org.ovirt.engine.core.compat.Guid childCmdId : childCmdIds) { org.ovirt.engine.core.bll.CommandBase<?> child = getCommand(childCmdId); switch (org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandStatus(childCmdId)) { case NOT_STARTED : case ACTIVE : log.info("Waiting on child command id: '{}' type:'{}' of '{}' (id: '{}') to complete", childCmdId, child.getActionType(), command.getActionType(), cmdId); return; case FAILED : case FAILED_RESTARTED : case UNKNOWN : anyFailed = true; break; default : org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(childCmdId); if ((cmdEntity.isCallbackNotified()) || (!(cmdEntity.isCallbackEnabled()))) { ++completedChildren; break; } else { log.info("Waiting on child command id: '{}' type:'{}' of '{}' (id: '{}') to complete", childCmdId, child.getActionType(), command.getActionType(), cmdId); return; } } } childCommandsExecutionEnded(command, anyFailed, childCmdIds, status, completedChildren); }
@java.lang.Override public org.ovirt.engine.core.aaa.AuthenticationResult authenticate(java.lang.String name, java.lang.String password) { return new org.ovirt.engine.core.aaa.nop.NopAuthenticationResult(); }
@org.junit.Test public void testCanDoActionWithEmptySnapshotGuid() { org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters params = new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vmId, org.ovirt.engine.core.compat.Guid.Empty); cmd = spy(new org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand<org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters>(params)); doNothing().when(cmd).updateVmDisksFromDb(); doReturn(snapshotDao).when(cmd).getSnapshotDao(); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_CORRUPTED_VM_SNAPSHOT_ID); }
@java.lang.Override public java.lang.Boolean runInTransaction() { org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CollectVdsNetworkData, new org.ovirt.engine.core.common.vdscommands.CollectHostNetworkDataVdsCommandParameters(getVds(), getInterfaces())); for (org.ovirt.engine.core.common.businessentities.network.Network net : getNetworks()) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus(getVdsGroupId(), net); } return java.lang.Boolean.TRUE; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__HOT_SET_CPUS); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM); addCanDoActionMessageVariable("clusterVersion", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getVdsGroupCompatibilityVersion()); addCanDoActionMessageVariable("architecture", org.ovirt.engine.core.bll.HotSetNumberOfCpusCommand.getVm().getClusterArch()); }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("High") java.lang.String highTitle();
@java.lang.Override public void initTable(org.ovirt.engine.ui.common.CommonApplicationConstants constants) { this.constants = constants; initTableOverhead(); handleRadioButtonClick(null); org.ovirt.engine.ui.common.widget.uicommon.vm.BaseVmDiskListModelTable.getModel().getItemsChangedEvent().addListener(new org.ovirt.engine.core.compat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.core.compat.Event ev, java.lang.Object sender, org.ovirt.engine.core.compat.EventArgs args) { disksViewRadioGroup.setDiskStorageType(((org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType) (getModel().getDiskViewType().getEntity()))); } }); }
protected final java.util.Collection<T> sortItems(java.util.Collection<T> items) { if ((items == null) || ((comparator) == null)) { return items; } java.util.SortedSet<T> sortedItems = new java.util.TreeSet<T>(comparator); sortedItems.addAll(items); return sortedItems; }
public org.ovirt.engine.core.bll.ValidationResult validate() { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = getAttachmentsToConfigure(); org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NicLabelValidator(params, existingInterfacesMap, bondsMap).validate(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validRemovedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedBonds(); vr = (skipValidation(vr)) ? vr : validRemovedBonds(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : attachmentsDontReferenceSameNetworkDuplicately(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : networksUniquelyConfiguredOnHost(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateNetworkExclusiveOnNics(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NetworkMtuValidator(networkBusinessEntityMap).validateMtu(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateCustomProperties(); return vr; }
@org.junit.Before public void setUp() { mappingLocator = new org.ovirt.engine.api.restapi.types.MappingLocator(); mappingLocator.populate(); org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); java.util.HashMap<java.lang.Integer, java.lang.String> osNames = new java.util.HashMap<>(1); osNames.put(0, "Unassigned"); org.mockito.Mockito.when(osRepository.getOsNames()).thenReturn(osNames); org.mockito.Mockito.when(osRepository.osNameUpperCasedAndUnderscored("Unassigned")).thenReturn("UNASSIGNED"); }
protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue removeImage(org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters parameters) { try { return org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.DeleteImageGroup, parameters); } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { if ((e.getErrorCode()) == (org.ovirt.engine.core.common.errors.VdcBllErrors.ImageDoesNotExistInDomainError)) { return createImageDoesNotExistInDomainReturnValue(); } throw e; } }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to add/remove disk to the VM") java.lang.String allowToAddRemoveDiskToTheVmRoleTreeTooltip();
public static void GetMaximalVmMemSize64OS(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, java.lang.String version) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : -1; } }; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.VM64BitMaxMemorySizeInMB); tempVar.setVersion(version); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(tempVar, aQuery); }

@org.junit.Test public void canDoActionFailsPoolSpecifiedDoesNotExist() { params.setStoragePoolId(spId); when(spDao.get(spId)).thenReturn(null); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST); }
public java.util.HashSet<org.ovirt.engine.core.compat.Version> getSupportedClusterVersionsSet() { return this.mVdsDynamic.getSupportedClusterVersionsSet(); }




@org.ovirt.engine.ui.uicompat.DefaultStringValue("Configure System") java.lang.String configureSystemRoleTree();
public java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> getInterfaces() { return this.mInterfaceList; }

@org.junit.Test public void testHandleActionResult_SucceededFalse() { org.ovirt.engine.core.common.action.VdcActionParametersBase testParameters = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnValue.setCanDoAction(true); returnValue.setIsSyncronious(true); returnValue.setSucceeded(false); org.ovirt.engine.core.common.errors.EngineFault testFault = new org.ovirt.engine.core.common.errors.EngineFault(); returnValue.setFault(testFault); frontend.handleActionResult(VdcActionType.AddDisk, testParameters, returnValue, mockActionCallback, testState, true); verify(mockActionCallback).executed(callbackParam.capture()); assertEquals("Parameters should match", testParameters, callbackParam.getValue().getParameters()); assertEquals("Result should match", returnValue, callbackParam.getValue().getReturnValue()); assertEquals("States should match", testState, callbackParam.getValue().getState()); assertEquals("Action type should match", VdcActionType.AddDisk, callbackParam.getValue().getActionType()); verify(mockEventsHandler).runActionExecutionFailed(VdcActionType.AddDisk, testFault); }



public void setOldClusterSnapshotWithMemory(boolean value) { oldClusterSnapshotWithMemory = value; }

private void afterVMsRefreshTreatment() { for (org.ovirt.engine.core.compat.Guid vm_guid : _vmsToRerun) { org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.log.errorFormat("Rerun vm {0}. Called from vds {1}", vm_guid, _vds.getName()); org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().RerunFailedCommand(vm_guid, _vds.getId()); } for (org.ovirt.engine.core.compat.Guid vm_guid : _succededToRunVms) { _vdsManager.succededToRunVm(vm_guid); } _autoVmsToRun.removeAll(_vmsToRerun); getVdsEventListener().runFailedAutoStartVMs(_autoVmsToRun); for (java.util.Map.Entry<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDynamic> pair : _vmsClientIpChanged.entrySet()) { getVdsEventListener().processOnClientIpChange(_vds, pair.getValue().getId()); } for (org.ovirt.engine.core.common.businessentities.VmDynamic runningVm : _poweringUpVms) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().getEventListener().processOnVmPoweringUp(_vds.getId(), runningVm.getId(), runningVm.getDisplayIp(), runningVm.getDisplay()); } for (org.ovirt.engine.core.compat.Guid vm_guid : _vmsMovedToDown) { getVdsEventListener().processOnVmStop(vm_guid); } for (org.ovirt.engine.core.compat.Guid vm_guid : _vmsToRemoveFromAsync) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().RemoveAsyncRunningVm(vm_guid); } }

@org.junit.Test public void canDoActionFailure() { when(validator.isConnectionExists()).thenReturn(ValidationResult.VALID); when(validator.isConnectionForISCSIDomainAttached(domain)).thenReturn(java.lang.Boolean.FALSE); when(validator.isISCSIConnectionAndDomain(domain)).thenReturn(ValidationResult.VALID); when(validator.isDomainOfConnectionExistsAndInactive(domain)).thenReturn(ValidationResult.VALID); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_FOR_DOMAIN_NOT_EXIST); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionResume(java.lang.String volumeName, java.lang.String slaveHostName, java.lang.String slaveVolumeName, boolean force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.geoRepSessionResume").withParameter("volumeName", volumeName).withParameter("remoteHost", slaveHostName).withParameter("remoteVolumeName", slaveVolumeName).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }

@java.lang.Override protected boolean canDoAction() { if (!(getGlusterUtil().isGlusterGeoReplicationSupported(getVdsGroup().getCompatibilityVersion(), getVdsGroup().getId()))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GEO_REP_NOT_SUPPORTED); } slaveHost = getSlaveHost(); if ((slaveHost) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_HOST_NOT_EXIST); } if ((slaveHost.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP, java.lang.String.format("$%1$s %2$s", "VdsName", slaveHost.getName())); } slaveVolume = getSlaveVolume(); if ((slaveVolume) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID); } if ((slaveVolume.getStatus()) != (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED); } if (!(areAllRemoteServersUp())) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_ONE_OR_MORE_REMOTE_HOSTS_ARE_NOT_ACCESSIBLE); } org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession geoRepSession = getGeoRepDao().getGeoRepSession(getGlusterVolumeId(), slaveHost.getId(), getParameters().getSlaveVolumeName()); if (geoRepSession != null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_GEOREP_SESSION_ALREADY_CREATED); } return super.canDoAction(); }
@java.lang.Override protected void readGeneralData(org.ovirt.engine.core.compat.backendcompat.XmlNode content) { org.ovirt.engine.core.compat.backendcompat.XmlNode node = content.SelectSingleNode("Name"); if (node != null) { _vmTemplate.setName(node.innerText); name = _vmTemplate.getName(); } node = content.SelectSingleNode("TemplateId"); if (node != null) { if (org.apache.commons.lang.StringUtils.isNotEmpty(node.innerText)) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(node.innerText)); } } node = content.SelectSingleNode("IsDisabled"); if (node != null) { _vmTemplate.setDisabled(java.lang.Boolean.parseBoolean(node.innerText)); } node = content.SelectSingleNode("TrustedService"); if (node != null) { _vmTemplate.setTrustedService(java.lang.Boolean.parseBoolean(node.innerText)); } node = content.SelectSingleNode("TemplateType"); if (node != null) { _vmTemplate.setTemplateType(org.ovirt.engine.core.common.businessentities.VmEntityType.valueOf(node.innerText)); } }

@java.lang.Override public void freeMacs(java.util.List<java.lang.String> macs) { for (java.lang.String mac : macs) { macsStorage.freeMac(org.ovirt.engine.core.utils.MacAddressRangeUtils.macToLong(mac)); } }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase runInternalAction(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, org.ovirt.engine.core.bll.context.CommandContext context) { return org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(actionType, parameters, context); }

<T extends org.ovirt.engine.core.common.businessentities.BusinessEntity<? extends org.ovirt.engine.core.compat.NGuid>> void addActionButton(java.lang.String label, final org.ovirt.engine.ui.webadmin.plugin.api.ActionButtonInterface actionButtonInterface, final org.ovirt.engine.ui.common.widget.table.ActionTable<T> table) { final org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand(label, new org.ovirt.engine.ui.uicommonweb.BaseCommandTarget() { @java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand uiCommand) { actionButtonInterface.onClick().invoke(org.ovirt.engine.ui.webadmin.plugin.entity.EntityObject.arrayFrom(table.getSelectedItems()), null); } }); table.addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<T>(label) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return command; } }); table.getSelectionModel().addSelectionChangeHandler(new com.google.gwt.view.client.SelectionChangeEvent.Handler() { @java.lang.Override public void onSelectionChange(com.google.gwt.view.client.SelectionChangeEvent event) { updateActionButtonCommand(command, actionButtonInterface, table.getSelectedItems()); } }); updateActionButtonCommand(command, actionButtonInterface, table.getSelectedItems()); }


public static void GetMaximalVmMemSize32OS(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 20480; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.VM32BitMaxMemorySizeInMB, org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion), aQuery); }
public boolean validate() { getName().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.AsciiNameValidation() }); getCidr().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getIpVersion().validateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); return ((getName().getIsValid()) && (getCidr().getIsValid())) && (getIpVersion().getIsValid()); }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource createInterfaceParametersMapper(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { return getCustomMapSqlParameterSource().addValue("addr", nic.getAddress()).addValue("bond_name", nic.getBondName()).addValue("bond_type", nic.getBondType()).addValue("gateway", nic.getGateway()).addValue("id", nic.getId()).addValue("is_bond", nic.getBonded()).addValue("bond_opts", nic.getBondOptions()).addValue("mac_addr", nic.getMacAddress()).addValue("name", nic.getName()).addValue("network_name", nic.getNetworkName()).addValue("speed", nic.getSpeed()).addValue("subnet", nic.getSubnet()).addValue("boot_protocol", nic.getBootProtocol()).addValue("type", nic.getType()).addValue("vds_id", nic.getVdsId()).addValue("vlan_id", nic.getVlanId()).addValue("mtu", nic.getMtu()).addValue("bridged", nic.isBridged()).addValue("qos_overridden", nic.isQosOverridden()).addValue("labels", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(nic.getLabels())).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(nic.getCustomProperties())); }
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource getFullParameterSource(org.ovirt.engine.core.common.businessentities.VmInit vmInit) { return getCustomMapSqlParameterSource().addValue("vm_id", vmInit.getId()).addValue("host_name", vmInit.getHostname()).addValue("domain", vmInit.getDomain()).addValue("authorized_keys", vmInit.getAuthorizedKeys()).addValue("regenerate_keys", vmInit.getRegenerateKeys()).addValue("dns_servers", vmInit.getDnsServers()).addValue("dns_search_domains", vmInit.getDnsSearch()).addValue("time_zone", vmInit.getTimeZone()).addValue("networks", org.ovirt.engine.core.utils.VmInitUtils.networkListToJson(vmInit.getNetworks())).addValue("password", org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.encryptPassword(vmInit.getRootPassword())).addValue("winkey", vmInit.getWinKey()).addValue("custom_script", vmInit.getCustomScript()).addValue("input_locale", vmInit.getInputLocale()).addValue("ui_language", vmInit.getUiLanguage()).addValue("system_locale", vmInit.getSystemLocale()).addValue("user_locale", vmInit.getUserLocale()).addValue("user_name", vmInit.getUserName()); }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = ((super.canDoAction()) && (org.ovirt.engine.core.bll.storage.ForceRemoveStorageDomainCommand.checkStorageDomain())) && (((org.ovirt.engine.core.bll.storage.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainSharedStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus.Unattached)) || (checkStorageDomainStatusNotEqual(StorageDomainStatus.Active))); if ((returnValue && ((org.ovirt.engine.core.bll.storage.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) && ((org.ovirt.engine.core.bll.storage.ForceRemoveStorageDomainCommand.getStoragePool()) != null)) { if ((org.ovirt.engine.core.bll.storage.ForceRemoveStorageDomainCommand.electNewMaster()) == null) { returnValue = false; addCanDoActionMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN); } else if (!(org.ovirt.engine.core.bll.storage.ForceRemoveStorageDomainCommand.initializeVds())) { returnValue = false; addCanDoActionMessage(EngineMessage.ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN_HOST_NOT_ACTIVE); } } if (returnValue && ((org.ovirt.engine.core.bll.storage.ForceRemoveStorageDomainCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLANCE))) { addCanDoActionMessage(EngineMessage.ERROR_CANNOT_MANAGE_STORAGE_DOMAIN); returnValue = false; } return returnValue; }

private static org.ovirt.engine.core.common.businessentities.VDSGroup cloneVDSGroup(org.ovirt.engine.core.common.businessentities.VDSGroup instance) { org.ovirt.engine.core.common.businessentities.VDSGroup obj = new org.ovirt.engine.core.common.businessentities.VDSGroup(); obj.setId(instance.getId()); obj.setName(instance.getName()); obj.setDescription(instance.getDescription()); obj.setComment(instance.getComment()); obj.setCpuName(instance.getCpuName()); obj.setCompatibilityVersion(instance.getCompatibilityVersion()); obj.setMigrateOnError(instance.getMigrateOnError()); obj.setTransparentHugepages(instance.getTransparentHugepages()); obj.setStoragePoolId(instance.getStoragePoolId()); obj.setMaxVdsMemoryOverCommit(instance.getMaxVdsMemoryOverCommit()); obj.setCountThreadsAsCores(instance.getCountThreadsAsCores()); obj.setEmulatedMachine(instance.getEmulatedMachine()); obj.setDetectEmulatedMachine(instance.isDetectEmulatedMachine()); obj.setArchitecture(instance.getArchitecture()); obj.setSerialNumberPolicy(instance.getSerialNumberPolicy()); obj.setCustomSerialNumber(instance.getCustomSerialNumber()); obj.setFencingPolicy(new org.ovirt.engine.core.common.businessentities.FencingPolicy(instance.getFencingPolicy())); obj.setAutoConverge(instance.getAutoConverge()); obj.setMigrateCompressed(instance.getMigrateCompressed()); return obj; }
public static void GetDocumentationBaseURL(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.String) (source)) : ""; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.DocsURL, org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion), aQuery); }
public static java.util.Set<java.lang.String> getPresetDisplayStrings() { return org.ovirt.engine.ui.uicommonweb.models.providers.NeutronPluginTranslator.pluginForDisplay.keySet(); }
public void calculateFreeVirtualMemory() { if ((((getmem_commited()) != null) && ((getphysical_mem_mb()) != null)) && ((getreserved_mem()) != null)) { maxSchedulingMemory = (((getmax_vds_memory_over_commit()) * (getphysical_mem_mb())) / 100.0F) - ((getmem_commited()) + (getreserved_mem())); } }





@java.lang.Override public boolean validateAndSetQuota() { if (org.ovirt.engine.core.bll.RunVmOnceCommand.isInternalExecution()) { return true; } boolean quotaAcc = super.validateAndSetQuota(); if (!quotaAcc) { return false; } if (!(org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getRunAsStateless())) { return quotaAcc; } return org.ovirt.engine.core.bll.quota.QuotaManager.getInstance().validateAndSetStorageQuota(org.ovirt.engine.core.bll.RunVmOnceCommand.getStoragePool(), getStorageQuotaListParameters(), org.ovirt.engine.core.bll.RunVmOnceCommand.getReturnValue().getCanDoActionMessages()); }
@java.lang.Override public java.lang.String getDisplayStringNullSafe(java.lang.String data) { if ((data == null) || (data.trim().isEmpty())) { data = constants.clusterDefaultOption(); } return typeAheadNameTemplateNullSafe(data); }
private java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> searchStoragePool() { java.util.Optional<org.ovirt.engine.core.compat.Version> retVal = org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>getValue(ConfigValues.SupportedClusterLevels).stream().max(( v1, v2) -> v1.compareTo(v2)); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = genericSearch(storagePoolDao, true); if (retVal.isPresent()) { dataCenters.stream().forEach(( dataCenter) -> dataCenter.setStoragePoolCompatibilityLevelUpgradeNeeded(((retVal.get().compareTo(dataCenter.getCompatibilityVersion())) > 0))); } return dataCenters; }
private boolean isPrimaryAddressExist() { return ((networkDataCenterIpConfigurationDefinition) != null) && (networkDataCenterIpConfigurationDefinition.hasIpv4PrimaryAddressSet()); }
@java.lang.Override protected void verifyModel(org.ovirt.engine.api.model.Permission model, int index) { assertEquals(GUIDS[index].toString(), model.getId()); assertTrue(model.isSetUser()); assertEquals(GUIDS[1].toString(), model.getUser().getId()); assertTrue(model.isSetRole()); assertEquals(GUIDS[2].toString(), model.getRole().getId()); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Cannot change Data Center in tree context") java.lang.String cannotChangeDCInTreeContext();
private org.ovirt.engine.api.extensions.Extension loadExtension(java.util.Properties props) throws java.lang.Exception { org.ovirt.engine.api.extensions.Extension extension; org.ovirt.engine.core.extensions.mgr.ExtensionsManager.BindingsLoader loader = bindingsLoaders.get(props.getProperty(Base.ConfigKeys.BINDINGS_METHOD)); if (loader == null) { throw new org.ovirt.engine.core.extensions.mgr.ConfigurationException(java.lang.String.format("Invalid binding method '%1$s'.", props.getProperty(Base.ConfigKeys.BINDINGS_METHOD))); } return loader.load(props); }

private boolean changesAreClusterCompatible() { if (!(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getParameters().getNetwork().isVmNetwork())) { if (!(org.ovirt.engine.core.common.FeatureSupported.nonVmNetwork(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getVdsGroup().getCompatibilityVersion()))) { addCanDoActionMessage(VdcBllMessages.NON_VM_NETWORK_NOT_SUPPORTED_FOR_POOL_LEVEL); return false; } } return true; }
private void addInterfacesFromTemplate() { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(); for (org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : getVm().getInterfaces()) { if ((iface.getId()) == null) { iface.setId(org.ovirt.engine.core.compat.Guid.NewGuid()); } iface.setVmTemplateId(null); iface.setVmId(getVm().getStaticData().getId()); iface.setVmName(getVm().getvm_name()); if (getParameters().isImportAsNewEntity()) { macAdded = true; } else { macAdded = vmInterfaceManager.add(iface, getCompensationContext()); } } }
@org.junit.Test public void testVmDuringSnaoshot() { setUpGeneralValidations(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT)).when(snapshotsValidator).vmNotDuringSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList()).when(cmd).getDisksList(); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT.name())); }
public static boolean isMemorySizeLegal(org.ovirt.engine.core.common.businessentities.VmOsType osType, int memSizeInMB, java.lang.String clsuter_version) { return (memSizeInMB >= (org.ovirt.engine.core.common.utils.VmValidationUtils.getMinMemorySizeInMb())) && (memSizeInMB <= (org.ovirt.engine.core.common.utils.VmValidationUtils.getMaxMemorySizeInMb(osType, clsuter_version))); }
private boolean refreshVdsmFileList(org.ovirt.engine.core.compat.Guid repoStoragePoolId, org.ovirt.engine.core.compat.Guid repoStorageDomainId, org.ovirt.engine.core.bll.IsoDomainListSyncronizer.FileListRefreshed fileListRefreshed, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> fileStats) { if (repoStorageDomainId == null) { return false; } try { boolean vdsmRefreshOk = fileStats != null; org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.debug("The refresh process from VDSM, for {}, {}.", imageFileType, succeededOrFailed(vdsmRefreshOk)); if (!vdsmRefreshOk) { return false; } boolean refreshSucceeded = org.ovirt.engine.core.bll.IsoDomainListSyncronizer.refreshIsoFileListMetaData(repoStorageDomainId, repoStorageDom, fileStats, imageFileType); if (refreshSucceeded && (fileListRefreshed != null)) { fileListRefreshed.onFileListRefreshed(repoStoragePoolId, fileStats.keySet()); } return refreshSucceeded; } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.warn("The refresh process for {} failed: {}", imageFileType, e.getMessage()); org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.debug("Exception", e); return false; } }
protected java.util.Map[] getVmInfo(java.util.List<java.lang.String> vmsToUpdate) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(vdsManager.getVdsId()); return ((java.util.Map[]) (new org.ovirt.engine.core.vdsbroker.vdsbroker.FullListVdsCommand<org.ovirt.engine.core.common.vdscommands.FullListVDSCommandParameters>(new org.ovirt.engine.core.common.vdscommands.FullListVDSCommandParameters(vds, vmsToUpdate)).executeWithReturnValue())); }
@org.junit.Test public void encodeWhenNonAsciiAliasIsTruncated() throws java.io.IOException { java.lang.String nonAsciiDiskAlias = "ááááááááááááááááááááááááááááááááááááááááááááááá"; disk.setDiskAlias(nonAsciiDiskAlias); disk.setDiskDescription("DiskDescription"); assertDiskDescriptionMap(disk, org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.generateDiskAliasJsonEntry(org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.encodeString(nonAsciiDiskAlias.substring(0, 46))), org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.generateEncodingJsonEntry(1)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) { if (sender == (getFloppyImage())) { FloppyImage_SelectedItemChanged(); } else if (sender == (getSysPrepDomainName())) { SysPrepDomainName_SelectedItemChanged(); } } else if (ev.matchesDefinition(EntityModel.EntityChangedEventDefinition)) { if (sender == (getAttachFloppy())) { AttachFloppy_EntityChanged(); } else if (sender == (getAttachIso())) { AttachIso_EntityChanged(); } else if (sender == (getIsVmFirstRun())) { IsVmFirstRun_EntityChanged(); } else if (sender == (getUseAlternateCredentials())) { UseAlternateCredentials_EntityChanged(); } else if ((sender == (getDisplayConsole_Vnc_IsSelected())) && ((java.lang.Boolean) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity()))) { getDisplayConsole_Spice_IsSelected().setEntity(false); } else if ((sender == (getDisplayConsole_Spice_IsSelected())) && ((java.lang.Boolean) (((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity()))) { getDisplayConsole_Vnc_IsSelected().setEntity(false); } else if (sender == (getIsAutoAssign())) { IsAutoAssign_EntityChanged(sender, args); } } }

@javax.annotation.PostConstruct private void initialize() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.PMHealthCheckEnabled)) { org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Start initializing {}", getClass().getSimpleName()); java.lang.Integer pmHealthCheckInterval = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.PMHealthCheckIntervalInSec); org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.utils.timer.SchedulerUtilQuartzImpl.class).scheduleAFixedDelayJob(this, "pmHealthCheck", new java.lang.Class[]{ }, new java.lang.Object[]{ }, pmHealthCheckInterval, pmHealthCheckInterval, java.util.concurrent.TimeUnit.SECONDS); } recover(vdsDao.getAll()); org.ovirt.engine.core.bll.pm.PmHealthCheckManager.log.info("Finished initializing {}", getClass().getSimpleName()); }
public void setStorageDomains(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_domains> value) { if ((storageDomains) != value) { storageDomains = value; OnPropertyChanged(new org.ovirt.engine.core.compat.PropertyChangedEventArgs("Storage Domains")); } }



@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> list = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate>(); if (source != null) { org.ovirt.engine.core.common.businessentities.VmTemplate blankTemplate = null; for (org.ovirt.engine.core.common.businessentities.VmTemplate template : ((java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate>) (source))) { if (template.getId().equals(Guid.Empty)) { blankTemplate = template; } else if ((template.getStatus()) == (org.ovirt.engine.core.common.businessentities.VmTemplateStatus.OK)) { list.add(template); } } java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.VmTemplateByNameComparer()); if (blankTemplate != null) { list.add(0, blankTemplate); } } return list; }
private boolean isVmInterfacesConfigured() { for (org.ovirt.engine.core.common.businessentities.VmNetworkInterface nic : org.ovirt.engine.core.bll.RunVmCommand.getVm().getInterfaces()) { if ((nic.getNetworkName()) == null) { if (!(org.ovirt.engine.core.bll.validator.FeatureSupported.networkLinking(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVdsGroupCompatibilityVersion()))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_INTERFACE_NETWORK_NOT_CONFIGURED); return false; } else { return true; } } } return true; }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = createSnapshotsValidator(); if ((!(validate(snapshotsValidator.snapshotExists(getSnapshot())))) || (!(validate(snapshotsValidator.vmNotDuringSnapshot(getSnapshot().getVmId()))))) { return false; } vmFromConfiguration = getVmFromConfiguration(); if ((vmFromConfiguration) == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_SNAPSHOT_HAS_NO_CONFIGURATION); addCanDoActionMessageVariable("VmName", org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmName()); addCanDoActionMessageVariable("SnapshotName", org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getSnapshotName()); return false; } org.ovirt.engine.core.bll.validator.VmValidator vmValidator = createVmValidator(vmFromConfiguration); if ((java.lang.Boolean.FALSE.equals(org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().isVirtioScsiEnabled())) && (!(validate(vmValidator.canDisableVirtioScsi(getAdjustedDiskImagesFromConfiguration()))))) { return false; } if (!(super.canDoAction())) { return false; } return true; }

@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Erratum> getErrataForHost(java.lang.String hostName) { org.ovirt.engine.core.bll.host.provider.foreman.ContentHost contentHost = findContentHost(hostName); if (contentHost == null) { return java.util.Collections.emptyList(); } return runErrataListMethod(java.lang.String.format(org.ovirt.engine.core.bll.host.provider.foreman.ForemanHostProviderProxy.CONTENT_HOST_ERRATA_ENTRY_POINT, contentHost.getId())); }
public static void GetDomainList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, boolean filterInternalDomain) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? new java.util.ArrayList<java.lang.String>(((java.util.ArrayList<java.lang.String>) (source))) : new java.util.ArrayList<java.lang.String>(); } }; org.ovirt.engine.core.common.queries.GetDomainListParameters tempVar = new org.ovirt.engine.core.common.queries.GetDomainListParameters(); tempVar.setFilterInternalDomain(filterInternalDomain); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetDomainList, tempVar, aQuery); }

@java.lang.Override public void runningSucceded() { try { super.runningSucceded(); } finally { org.ovirt.engine.core.bll.MigrateVmCommand.freeLock(); } }



@java.lang.Override protected java.lang.String getWarning(java.util.List<java.lang.String> disks) { return messages.cannotMoveDisks(org.ovirt.engine.core.compat.StringHelper.join(", ", disks.toArray())); }
public static void GetConfigFromCache(org.ovirt.engine.core.common.queries.GetConfigurationValueParameters parameters, org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { final java.util.Map.Entry<org.ovirt.engine.core.common.queries.ConfigurationValues, java.lang.String> config_key = new org.ovirt.engine.core.compat.KeyValuePairCompat<org.ovirt.engine.core.common.queries.ConfigurationValues, java.lang.String>(parameters.getConfigValue(), parameters.getVersion()); if (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValues.containsKey(config_key)) { java.lang.Object cached = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValues.get(config_key); if (cached != null) { aQuery.asyncCallback.OnSuccess(aQuery.getModel(), cached); return; } } final org.ovirt.engine.ui.frontend.IAsyncConverter origConverter = aQuery.converterCallback; aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object returnValue, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { if (origConverter != null) { returnValue = origConverter.Convert(returnValue, asyncQuery); } if (returnValue != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedConfigValues.put(config_key, returnValue); } return returnValue; } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetConfigurationValue, parameters, aQuery); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData) { int size = registerVmData.getVm().getVmMemSizeMb(); return size + " MB"; }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.TagsVmMap tagsVmMap; tagsVmMap = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVmByTagIdAndByVmId(org.ovirt.engine.core.bll.UpdateTagsVmMapDefaultDisplayTypeCommand.getParameters().getTagsVmMap().gettag_id(), org.ovirt.engine.core.bll.UpdateTagsVmMapDefaultDisplayTypeCommand.getParameters().getTagsVmMap().getvm_id()); if (tagsVmMap == null) { addCanDoActionMessage(VdcBllMessages.TAGS_SPECIFY_TAG_IS_NOT_EXISTS); return false; } return true; }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue(); if ((res != null) && (res.getSucceeded())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TestProviderConnectivity, new org.ovirt.engine.core.common.action.ProviderParameters(provider), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue(); setTestResultValue(res); stopProgress(); } }, null, false); } else { setTestResultValue(res); stopProgress(); } }
@java.lang.Override public void process() throws java.io.IOException, org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { final java.lang.Runnable op = pendingOperations(); if (op != null) { key.interestOps(0); this.executorService.execute(new java.lang.Runnable() { @java.lang.Override public void run() { try { op.run(); updateInterestedOps(); selector.wakeup(); } catch (org.ovirt.vdsm.jsonrpc.client.ClientConnectionException e) { org.ovirt.vdsm.jsonrpc.client.reactors.SSLClient.log.error("Unable to process messages", e); } } }); } if (((nioEngine) != null) && (nioEngine.handshakeInProgress())) { return; } super.process(); }
@org.junit.Test public void testClone() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUriInfo(setUpBasicUriExpectations()); setUpGetPayloadExpectations(1, 2); setUpGetBallooningExpectations(1, 2); setUpGetConsoleExpectations(new int[]{ 1, 2 }); setUpGetVmOvfExpectations(new int[]{ 2 }); setUpGetVirtioScsiExpectations(new int[]{ 2 }); setUpGetRngDeviceExpectations(new int[]{ 2 }); setUpGetCertuficateExpectations(1, 2); setUpEntityQueryExpectations(VdcQueryType.GetVmTemplate, org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[1] }, getTemplateEntity(0)); setUpEntityQueryExpectations(VdcQueryType.GetVdsGroupByVdsGroupId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[2] }, getVdsGroupEntity()); setUpCreationExpectations(VdcActionType.AddVmFromTemplate, org.ovirt.engine.core.common.action.AddVmFromTemplateParameters.class, new java.lang.String[]{ "StorageDomainId" }, new java.lang.Object[]{ GUIDS[0] }, true, true, GUIDS[2], VdcQueryType.GetVmByVmId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[2] }, getEntity(2)); javax.ws.rs.core.Response response = collection.add(createModel(new org.ovirt.engine.api.model.Disks() { { setClone(true); } })); assertEquals(201, response.getStatus()); assertTrue(((response.getEntity()) instanceof org.ovirt.engine.api.model.VM)); verifyModel(((org.ovirt.engine.api.model.VM) (response.getEntity())), 2); }
@java.lang.Override protected boolean canDoAction() { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.FreezeVmCommand.getVm(); if (vm == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.FreezeVmCommand.canRunActionOnNonManagedVm())) { return false; } if ((org.ovirt.engine.core.bll.FreezeVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) { return org.ovirt.engine.core.bll.FreezeVmCommand.failVmStatusIllegal(); } return true; }
private void doTestIncludes(java.lang.String details, java.lang.String[] rels, boolean[] expected) throws java.lang.Exception { javax.ws.rs.core.HttpHeaders httpheaders = createMock(javax.ws.rs.core.HttpHeaders.class); java.util.List<java.lang.String> requestHeaders = new java.util.ArrayList<java.lang.String>(); expect(httpheaders.getRequestHeader("Accept")).andReturn(requestHeaders).anyTimes(); requestHeaders.add(((org.ovirt.engine.api.common.util.DetailHelperTest.ACCEPTABLE) + details)); replay(httpheaders); for (int i = 0; i < (rels.length); i++) { assertEquals(expected[i], org.ovirt.engine.api.common.util.DetailHelper.include(httpheaders, rels[i])); } verify(httpheaders); }
public void remove() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeRolesTitle()); model.setHashName("remove_role"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().rolesMsg()); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.roles role : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.roles>Cast(getSelectedItems())) { list.add(role.getname()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnRemove", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }



@java.lang.Override public void onSuccess(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.LoginUserParameters> operation, final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Succesful returned result from Login."); org.ovirt.engine.ui.frontend.Frontend.getInstance().setLoggedInUser(((org.ovirt.engine.core.common.users.VdcUser) (result.getActionReturnValue()))); result.setCanDoActionMessages(((java.util.ArrayList<java.lang.String>) (translateError(result)))); callback.getDel().onSuccess(callback.getModel(), result); if (((org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoginHandler()) != null) && (result.getSucceeded())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoginHandler().onLoginSuccess(userName, password, domain); } }
@java.lang.Override protected void initSelectedType() { java.lang.Integer selectedNicType = getNic().getType(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType> nicTypes = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType>) (getNicType().getItems())); nicTypes = (nicTypes == null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType>() : nicTypes; if ((selectedNicType == null) || (!(nicTypes.contains(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(selectedNicType))))) { selectedNicType = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetDefaultNicType(getVm().getOs()).getValue(); } getNicType().setSelectedItem(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(selectedNicType)); }
public java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmImagesFromDb(org.ovirt.engine.core.common.businessentities.VM vm) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allVmImages = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> filteredDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(vm.getDiskList(), false, true, true); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : filteredDisks) { allVmImages.addAll(getAllImageSnapshots(diskImage)); } for (org.ovirt.engine.core.common.businessentities.storage.DiskImage disk : allVmImages) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskVmElementDao().get(new org.ovirt.engine.core.common.businessentities.VmDeviceId(disk.getId(), vm.getId())); disk.setDiskVmElements(java.util.Collections.singletonList(dve)); } return allVmImages; }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, reportedDnsResolverConfiguration); }


private void onSelectedHookSourceChanged() { org.ovirt.engine.ui.uicommonweb.models.EntityModel selectedItem = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (getHookSources().getSelectedItem())); if (selectedItem == null) { return; } startProgress(null); org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook selectedServer = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook) (selectedItem.getEntity())); getServerHooksList().setSelectedItem(selectedServer); if ((selectedServer.getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStatus.MISSING)) { getContentModel().getContent().setEntity(null); getContentModel().getStatus().setEntity(null); getContentModel().getMd5Checksum().setEntity(null); stopProgress(); return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getGlusterHookContent(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.lang.String content = ((java.lang.String) (returnValue)); getContentModel().getContent().setEntity(content); stopProgress(); } }), getGlusterHookEntiry().getId(), selectedServer.getServerId()); if ((selectedServer.getServerId()) == null) { getContentModel().getStatus().setEntity(getGlusterHookEntiry().getStatus()); getContentModel().getMd5Checksum().setEntity(getGlusterHookEntiry().getChecksum()); } else { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook serverHook : getGlusterHookEntiry().getServerHooks()) { if (((serverHook.getServerId()) != null) && (serverHook.getServerId().equals(selectedServer.getServerId()))) { getContentModel().getStatus().setEntity(serverHook.getStatus()); getContentModel().getMd5Checksum().setEntity(serverHook.getChecksum()); break; } } } }
public static java.lang.String getDisplayStringForPluginName(java.lang.String pluginName) { try { return org.ovirt.engine.ui.uicompat.EnumTranslator.createAndTranslate(org.ovirt.engine.core.common.businessentities.OpenstackNetworkPluginType.valueOf(pluginName)); } catch (java.lang.Exception e) { return pluginName == null ? "" : pluginName; } }

@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()) != null) { vmPoolDao.removeVmFromVmPool(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmId()); if (org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getParameters().isUpdatePrestartedVms()) { vmPoolDao.boundVmPoolPrestartedVms(org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()); } org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.setSucceeded(true); } }
@java.lang.Override public void execute(int iterationId) { try { org.ovirt.engine.core.compat.Guid masterDomainIdFromDb = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().getMasterStorageDomainIdForPool(getStoragePool().getId()); org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.RefreshStoragePool, new org.ovirt.engine.core.common.vdscommands.RefreshStoragePoolVDSCommandParameters(getVdss().get(iterationId).getId(), getStoragePool().getId(), masterDomainIdFromDb, getStoragePool().getmaster_domain_version())); org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(getStorageDomain().getStorageType()).disconnectStorageFromDomainByVdsId(getStorageDomain(), getVdss().get(iterationId).getId()); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.storage.RefreshStoragePoolAndDisconnectAsyncOperation.log.errorFormat("Failed to connect/refresh storagePool. Host {0} to storage pool {1}. Exception: {3}", getVdss().get(iterationId).getName(), getStoragePool().getName(), e); } }


protected boolean checkIfImageDiskCanBeAdded(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator) { if (Guid.Empty.equals(getStorageDomainId())) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_SPECIFIED); } boolean returnValue; org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = createStorageDomainValidator(); returnValue = (((((((((org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getParameters().isSkipDomainCheck()) || (validate(storageDomainValidator.isDomainExistAndActive()))) && (!(isShareableDiskOnGlusterDomain()))) && (checkImageConfiguration())) && (validate(storageDomainValidator.hasSpaceForNewDisk(getDiskImageInfo())))) && (validate(storageDomainValidator.isDomainWithinThresholds()))) && (checkExceedingMaxBlockDiskSize())) && (canAddShareableDisk())) && (validate(diskValidator.isVirtIoScsiValid(vm)))) && (validate(diskValidator.isDiskInterfaceSupported(org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getVm()))); if (returnValue && (vm != null)) { org.ovirt.engine.core.common.businessentities.StoragePool sp = org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.getStoragePool(); returnValue = (((validate(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(sp).isUp())) && (isStoragePoolMatching(vm))) && (org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.isVmNotLocked())) && (org.ovirt.engine.core.bll.storage.disk.AddDiskCommand.isVmNotInPreviewSnapshot()); } return returnValue; }
@java.lang.Override protected void executeQueryCommand() { if ((org.ovirt.engine.core.bll.GetStorageDomainDefaultWipeAfterDeleteQuery.getParameters().getStorageType()) != null) { org.ovirt.engine.core.bll.GetStorageDomainDefaultWipeAfterDeleteQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.utils.WipeAfterDeleteUtils.getDefaultWipeAfterDeleteFlag(org.ovirt.engine.core.bll.GetStorageDomainDefaultWipeAfterDeleteQuery.getParameters().getStorageType())); } }
protected boolean validateNotificationMethod(org.ovirt.engine.core.common.EventNotificationMethod eventNotificationMethod, org.ovirt.engine.core.common.businessentities.EventSubscriber eventSubscriber, org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { boolean retValue = true; org.ovirt.engine.core.common.EventNotificationMethod notificationMethod = eventNotificationMethod; switch (notificationMethod) { case SMTP : java.lang.String mailAddress = (org.apache.commons.lang.StringUtils.isEmpty(eventSubscriber.getMethodAddress())) ? user.getEmail() : eventSubscriber.getMethodAddress(); if (!(org.ovirt.engine.core.bll.EventSubscriptionCommandBase.isEmailValid(mailAddress))) { addCanDoActionMessage(EngineMessage.USER_DOES_NOT_HAVE_A_VALID_EMAIL); retValue = false; } break; default : addCanDoActionMessage(EngineMessage.EN_UNKNOWN_NOTIFICATION_METHOD); retValue = false; break; } return retValue; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove Provider(s)") java.lang.String removeProviderTitle();
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.GetStorageDomainByNameQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.storage.GetStorageDomainByNameQuery.getDbFacade().getStorageDomainStaticDao().getByName(org.ovirt.engine.core.bll.storage.GetStorageDomainByNameQuery.getParameters().getName(), org.ovirt.engine.core.bll.storage.GetStorageDomainByNameQuery.getUserID(), org.ovirt.engine.core.bll.storage.GetStorageDomainByNameQuery.getParameters().isFiltered())); }
@org.junit.Test public void checkRemoveIscsiConnectionDomainsExist() { parameters.setStorageServerConnection(iSCSIConnection); when(storageServerConnectionDao.get(iSCSIConnection.getid())).thenReturn(iSCSIConnection); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("3600144f09dbd05000000517e730b1212"); lun1.setStorageDomainName("storagedomain1"); lun1.setvolume_group_id("G95OWd-Wvck-vftu-pMq9-9SAC-NF3E-ulDPsQ"); luns.add(lun1); when(lunDao.getAllForStorageServerConnection(iSCSIConnection.getid())).thenReturn(luns); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS); }

@java.lang.Override public java.lang.Void runInTransaction() { addInterfaceToDb(getInterface()); addInterfaceDeviceToDb(); getCompensationContext().stateChanged(); return null; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("note: Permissions containing these operations should be associated with Disk or Storage Domain Object (or above)") java.lang.String notePermissionsContainingOperationsRoleTreeTooltip();
@org.junit.Test public void testAddingIDELunExceedsSlotLimit() { org.ovirt.engine.core.common.businessentities.LunDisk disk = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createISCSILunDisk(); disk.setDiskInterface(DiskInterface.IDE); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createParameters(); parameters.setDiskInfo(disk); initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid(), parameters); when(diskLunMapDAO.getDiskIdByLunId(disk.getLun().getLUN_id())).thenReturn(null); org.ovirt.engine.core.common.businessentities.VM vm = mockVm(); fillDiskMap(disk, vm, ((VmCommand.MAX_IDE_SLOTS) - 1)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); vm.getDiskMap().put(org.ovirt.engine.core.compat.Guid.newGuid(), disk); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_EXCEEDED_MAX_IDE_SLOTS); }
@org.junit.Test public void gatewayChanged() { org.ovirt.engine.core.common.businessentities.network.Network net = createNetwork("net"); mockExistingNetworks(net); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNicSyncedWithNetwork("nic0", net); nic.setBootProtocol(NetworkBootProtocol.STATIC_IP); nic.setGateway(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); mockExistingIfaces(nic); nic.setGateway(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(nic)); validateAndAssertNetworkModified(helper, net); }
@java.lang.Override public void onSuccess(final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Frontend: sucessfully executed RunAction, determining result!"); org.ovirt.engine.ui.frontend.Frontend.handleActionResult(actionType, parameters, result, callback, state, showErrorDialog); }



@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove Host(s)") java.lang.String removeHostsTitle();

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM); addCanDoActionMessage(VdcBllMessages.VAR__ACTION__HIBERNATE); }
public boolean validate() { leftBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.MacAddressValidation() }); rightBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.MacAddressValidation() }); if ((leftBound.getIsValid()) && (rightBound.getIsValid())) { rightBound.validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.MacRangeValidation(leftBound.getEntity()) }); } setIsValid(((leftBound.getIsValid()) && (rightBound.getIsValid()))); return getIsValid(); }
@java.lang.Override protected org.ovirt.engine.api.model.Disk deprecatedPopulate(org.ovirt.engine.api.model.Disk model, org.ovirt.engine.core.common.businessentities.Disk entity) { return addStatistics(model, entity, uriInfo, httpHeaders); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to delete Disk") java.lang.String allowToDeleteDiskRoleTreeTooltip();
private void updateImportedVmDevice(org.ovirt.engine.core.common.businessentities.VmBase vmBase, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.compat.Guid deviceId, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevicesToUpdate) { org.ovirt.engine.core.common.businessentities.VmDevice exportedDevice = vmBase.getManagedDeviceMap().get(deviceId); if (exportedDevice != null) { vmDevice.setAddress(exportedDevice.getAddress()); vmDevice.setBootOrder(exportedDevice.getBootOrder()); vmDevice.setIsPlugged(exportedDevice.getIsPlugged()); vmDevice.setIsReadOnly(exportedDevice.getIsReadOnly()); vmDevicesToUpdate.add(vmDevice); } }
public static boolean isCpuSupported(int osId, org.ovirt.engine.core.compat.Version version, java.lang.String cpuName, java.util.ArrayList<java.lang.String> canDoActionMessages) { if (org.ovirt.engine.core.bll.VmHandler.osRepository.isCpuSupported(osId, version, org.ovirt.engine.core.bll.CpuFlagsManagerHandler.getCpuId(cpuName, version))) { return true; } java.lang.String unsupportedCpus = org.ovirt.engine.core.bll.VmHandler.osRepository.getUnsupportedCpus(osId, version).toString(); canDoActionMessages.add(VdcBllMessages.CPU_TYPE_UNSUPPORTED_FOR_THE_GUEST_OS.name()); canDoActionMessages.add(("$unsupportedCpus " + (org.apache.commons.lang.StringUtils.strip(unsupportedCpus.toString(), "[]")))); return false; }

@org.ovirt.engine.ui.webadmin.DefaultMessage("The Network will be added to the Data Center {0} as well.") java.lang.String theNetworkWillBeAddedToTheDataCenterAsWell(java.lang.String dcName);
public void addMenuItem(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { final com.google.gwt.user.client.ui.MenuItem menuItem = new com.google.gwt.user.client.ui.MenuItem(buttonDef.getText(), new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { menuPanelPopup.asPopupPanel().hide(); buttonDef.onClick(null); } }); menuItem.setEnabled(buttonDef.isEnabled(null)); buttonDef.addInitializeHandler(new com.google.gwt.event.logical.shared.InitializeHandler() { @java.lang.Override public void onInitialize(com.google.gwt.event.logical.shared.InitializeEvent event) { menuItem.setEnabled(buttonDef.isEnabled(null)); } }); menuPanelPopup.getMenuBar().addItem(menuItem); }



@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); addCanDoActionMessage(VdcBllMessages.VAR__ACTION__RESTART); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM); }





@org.junit.Test public void addPosixNonEmptyVFSType() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newPosixConnection = createPosixConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.POSIXFS, "nfs", "timeo=30"); parameters.setStorageServerConnection(newPosixConnection); parameters.setVdsId(Guid.Empty); doReturn(false).when(command).isConnWithSameDetailsExists(newPosixConnection, null); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); }
private static void switchTab(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> mapping, org.ovirt.engine.ui.common.view.TabbedView view) { int lowestIndex = java.lang.Integer.MAX_VALUE; java.util.List<org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> allTabs = view.getTabPanel().getTabs(); for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if ((allTabs.indexOf(mapping.get(invalidTabName))) < lowestIndex) { lowestIndex = allTabs.indexOf(mapping.get(invalidTabName)); } } if (lowestIndex != (java.lang.Integer.MAX_VALUE)) { view.getTabPanel().switchTab(allTabs.get(lowestIndex)); } }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__STOP_PROFILE); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_VOLUME); }

private boolean removeVm() { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.RemoveVmCommand.getVm(); hasImages = (vm.getDiskList().size()) > 0; if ((org.ovirt.engine.core.bll.RemoveVmCommand.getParameters().isRemoveDisks()) && (hasImages)) { if (!(removeVmImages(null))) { return false; } } else { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { removeVmFromDb(); return null; } }); } return true; }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__DISK__SNAPSHOT); }

public org.ovirt.engine.core.bll.ValidationResult notChangingDataCenterId(org.ovirt.engine.core.compat.Guid dataCenterId) { final org.ovirt.engine.core.compat.Guid oldDataCenterId = network.getDataCenterId(); return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_DATA_CENTER_ID_CANNOT_BE_CHANGED).when((!(oldDataCenterId.equals(dataCenterId)))); }

private void updateInstanceImages() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmDiskList(new org.ovirt.engine.ui.frontend.AsyncQuery(getModel(), new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel> imageLineModels = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk>) (returnValue))) { org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel lineModel = new org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel(getModel().getInstanceImages()); lineModel.initialize(disk, getVm()); imageLineModels.add(lineModel); } getModel().getInstanceImages().setItems(imageLineModels); getModel().getInstanceImages().setVm(getVm()); } }), getVm().getId()); }
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN); } if ((!(org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm().isUseLatestVersion())) && ((org.ovirt.engine.core.bll.UpdateVmVersionCommand.getParameters().getNewTemplateVersion()) == null)) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_SET_FOR_LATEST); } if ((org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVmTemplate()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST); } if (org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVmTemplateId().equals(org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm().getVmtGuid())) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_ALREADY_IN_LATEST_VERSION); } org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVm().setVmtGuid(org.ovirt.engine.core.bll.UpdateVmVersionCommand.getVmTemplate().getId()); return true; }
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getView().getAboutLink().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { com.gwtplatform.mvp.client.proxy.RevealRootPopupContentEvent.fire(org.ovirt.engine.ui.userportal.section.main.presenter.HeaderPresenterWidget.this, aboutPopup); } })); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Number of bricks should be equal to Replica Count") java.lang.String replicateVolumeAddBricksMsg();

private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVdsInterface(org.ovirt.engine.core.compat.Guid id, java.lang.String name, java.lang.Boolean bonded, java.lang.String bondName, java.lang.Integer vlanId, java.lang.String networkName, boolean bridged, java.lang.String address) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); iface.setId(id); iface.setName(name); iface.setBonded(bonded); iface.setBondName(bondName); iface.setVlanId(vlanId); iface.setNetworkName(networkName); iface.setBridged(bridged); iface.setAddress(address); return iface; }
public org.ovirt.engine.core.bll.tasks.SPMAsyncTask concreteCreateTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters p = new org.ovirt.engine.core.common.asynctasks.AsyncTaskParameters(asyncTaskCreationInfo, getAsyncTask(taskId, command, asyncTaskCreationInfo, parentCommand)); p.setEntityInfo(command.getParameters().getEntityInfo()); return createTask(internalGetTaskType(command), p); }
@java.lang.Override protected boolean canDoAction() { if (((org.ovirt.engine.core.bll.network.host.RemoveFenceAgentsByVdsIdCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.network.host.RemoveFenceAgentsByVdsIdCommand.getParameters().getVdsId()) == null)) { return failCanDoAction(EngineMessage.VDS_REMOVE_FENCE_AGENTS_VDS_ID_REQUIRED); } return super.canDoAction(); }

@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command.equals(getAddBricksCommand())) { checkUpServerAndAddBricks(); } else if (command.getName().equals("OnAddBricks")) { onAddBricks(); } else if (command.getName().equals("OnAddBricksInternal")) { onAddBricksInternal(); } else if (command.getName().equals("CancelConfirmation")) { cancelConfirmation(); } else if (command.equals(getRemoveBricksCommand())) { removeBricks(); } else if (command.getName().equals("OnRemove")) { onRemoveBricks(); } else if (command.equals(getStopRemoveBricksCommand())) { stopRemoveBricks(); } else if (command.getName().equals("OnStopRemoveBricks")) { onStopRemoveBricks(); } else if (command.equals(getCommitRemoveBricksCommand())) { commitRemoveBricks(); } else if (command.getName().equals("OnCommitRemoveBricks")) { onCommitRemoveBricks(); } else if (command.equals(getReplaceBrickCommand())) { replaceBrick(); } else if (command.getName().equals("OnReplace")) { onReplaceBrick(); } else if (command.equals(getBrickAdvancedDetailsCommand())) { showBrickAdvancedDetails(); } else if (command.getName().equals("Cancel")) { setWindow(null); } else if (command.getName().equals("CancelConfirmation")) { setConfirmWindow(null); } }
@java.lang.Override public void setUp() { super.setUp(); generateStorageToDisksMap(); initDestSDs(); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Can not ${action} ${type}. The given name contains special characters. Only lower-case and upper-case letters, numbers, '_', '-' allowed.") java.lang.String ACTION_TYPE_FAILED_NAME_MAY_NOT_CONTAIN_SPECIAL_CHARS();
private void updateHaMaintenanceAvailability(java.util.List items) { if ((items == null) || ((items.size()) != 1)) { setHaMaintenanceAvailability(false); return; } org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.getSelectedItem(); if (((vm == null) || (!(vm.isHostedEngine()))) || ((vm.getVdsGroupCompatibilityVersion().compareTo(Version.v3_4)) < 0)) { setHaMaintenanceAvailability(false); } else { setHaMaintenanceAvailability(true); } }



@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to manipulate Gluster Volumes") java.lang.String allowToManipulateGlusterVolumesRoleTree();


private void doInit(org.ovirt.engine.api.extensions.ExtMap input) { javax.sql.DataSource ds = new org.ovirt.engine.extension.aaa.jdbc.core.datasource.DataSourceProvider(configuration).provide(); this.authentication = new org.ovirt.engine.extension.aaa.jdbc.core.Authentication(ds); this.tasks = new org.ovirt.engine.extension.aaa.jdbc.core.Tasks(ds, this.authentication); }

@java.lang.Override protected void readOsSection(XmlNode section) { _vm.getStaticData().setId(new org.ovirt.engine.core.compat.Guid(section.attributes.get("ovf:id").getValue())); XmlNode node = section.SelectSingleNode("Description"); if (node != null) { int osId = osRepository.getOsIdByUniqueName(node.innerText); _vm.getStaticData().setOsId(osId); _vm.setClusterArch(osRepository.getArchitectureFromOS(osId)); } else { _vm.setClusterArch(ArchitectureType.undefined); } }
@java.lang.Override public void runFailedAutoStartVMs(java.util.List<org.ovirt.engine.core.compat.Guid> vmIds) { for (org.ovirt.engine.core.compat.Guid vmId : vmIds) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVmId(vmId); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(event, AuditLogType.HA_VM_FAILED); org.ovirt.engine.core.bll.VdsEventListener.log.infoFormat("Highly Available VM went down. Attempting to restart. VM Name: {0}, VM Id: {1}", event.getVmName(), vmId); } org.ovirt.engine.core.bll.AutoStartVmsRunner.getInstance().addVmsToRun(vmIds); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetworkDAO().update(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork()); for (org.ovirt.engine.core.common.businessentities.network.NetworkCluster clusterAttachment : org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getClusterAttachments()) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus(clusterAttachment.getClusterId(), org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork()); } org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.setSucceeded(true); }
static void verify(org.ovirt.engine.api.model.Statistic statistic, java.lang.String name) { assertEquals(java.util.UUID.nameUUIDFromBytes(name.getBytes()).toString(), statistic.getId()); assertEquals(name, statistic.getName()); assertEquals(StatisticUnit.BYTES, statistic.getUnit()); assertEquals(StatisticType.GAUGE, statistic.getType()); assertTrue(statistic.isSetValues()); assertEquals(ValueType.INTEGER, statistic.getValues().getType()); }

@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.RemoveUserProfileCommand.getUserProfile()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_PROFILE_NOT_EXIST); } return true; }

@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getJobMessageProperties() { if ((jobProperties) == null) { jobProperties = new java.util.HashMap<java.lang.String, java.lang.String>(); org.ovirt.engine.core.common.businessentities.VmPool vmPool = org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getParameters().getVmPool(); java.lang.String vmPoolName = (vmPool != null) ? vmPool.getVmPoolName() : org.apache.commons.lang.StringUtils.EMPTY; jobProperties.put(VdcObjectType.VmPool.name().toLowerCase(), vmPoolName); org.ovirt.engine.core.compat.Guid vmTemplateId = org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getVmTemplateId(); java.lang.String templateName = org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getVmTemplateName(); if (org.apache.commons.lang.StringUtils.isEmpty(templateName)) { templateName = (vmTemplateId == null) ? org.apache.commons.lang.StringUtils.EMPTY : vmTemplateId.toString(); } jobProperties.put(VdcObjectType.VmTemplate.name().toLowerCase(), templateName); } return jobProperties; }


@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler(( event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.modelProvider.setSelectedItems(getSelectedItems()); fireTableSelectionChangeEvent(); if (!(isVisible())) { handlePlaceTransition(); } })); registerHandler(org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getEventBus().addHandler(org.ovirt.engine.ui.uicommonweb.models.ApplySearchStringEvent.getType(), ( event) -> { applySearchString(event.getSearchString()); })); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setDetailPlaceTransitionHandler(this); java.lang.String searchString = searchStringCollector.getSearchStringPrefix(modelProvider.getModel().getSearchString()); if (searchString != null) { applySearchString(searchString); } }

private void plugToExternalNetwork() { java.util.Map<java.lang.String, java.lang.String> runtimeProperties = getProviderProxy().allocate(getNetwork(), vnicProfile, org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic()); if (runtimeProperties != null) { org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getVm().getRuntimeDeviceCustomProperties().put(vmDevice.getId(), runtimeProperties); } }

@java.lang.Override public void OnSuccess(java.lang.Object model1, java.lang.Object result1) { org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceListModel vmInterfaceListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceListModel) (model1)); org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel vmInterfaceModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel) (vmInterfaceListModel.getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network> networks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network>(); for (org.ovirt.engine.core.common.businessentities.network a : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network>) (result1))) { if ((a.getStatus()) == (org.ovirt.engine.core.common.businessentities.NetworkStatus.Operational)) { networks.add(a); } } if (vmInterfaceModel.getIsNew()) { vmInterfaceModel.getNetwork().setItems(networks); vmInterfaceModel.getNetwork().setSelectedItem(((networks.size()) > 0 ? networks.get(0) : null)); } else { org.ovirt.engine.core.common.businessentities.VmNetworkInterface nic = ((org.ovirt.engine.core.common.businessentities.VmNetworkInterface) (vmInterfaceListModel.getSelectedItem())); vmInterfaceModel.getNetwork().setItems(networks); vmInterfaceModel.getNetwork().setSelectedItem(null); for (org.ovirt.engine.core.common.businessentities.network a : networks) { if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(a.getname(), nic.getNetworkName())) { vmInterfaceModel.getNetwork().setSelectedItem(a); break; } } } okCommand.setIsExecutionAllowed(true); }
@java.lang.Override protected boolean canDoAction() { boolean result = true; if (!(canDoSnapshot(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm()))) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList = getDisksList(); if ((disksList.size()) > 0) { org.ovirt.engine.core.bll.validator.VmValidator vmValidator = new org.ovirt.engine.core.bll.validator.VmValidator(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm()); org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotValidator = new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(); result = ((((((validate(snapshotValidator.vmNotDuringSnapshot(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId()))) && (validate(snapshotValidator.vmNotInPreview(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId())))) && (validate(vmValidator.vmNotDuringMigration()))) && (validate(vmValidator.vmNotRunningStateless()))) && (validate(vmValidator.vmNotIlegal()))) && (org.ovirt.engine.core.bll.ImagesHandler.PerformImagesChecks(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getReturnValue().getCanDoActionMessages(), org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getStoragePoolId(), Guid.Empty, true, true, true, true, true, true, disksList))) && (validate(vmValidator.vmNotLocked())); } return result; }
private static boolean verifyByteArray(java.io.DataInputStream dataInputStream, byte[] expected) throws java.io.IOException { int length = dataInputStream.readInt(); byte[] contents = new byte[length]; int numBytes = dataInputStream.read(contents, 0, length); if (numBytes != length) { return false; } if (expected != null) { return java.util.Arrays.equals(contents, expected); } return true; }

@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.VdsStatistics stats) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cpu_idle", stats.getcpu_idle()).addValue("cpu_load", stats.getcpu_load()).addValue("cpu_sys", stats.getcpu_sys()).addValue("cpu_user", stats.getcpu_user()).addValue("usage_cpu_percent", stats.getusage_cpu_percent()).addValue("usage_mem_percent", stats.getusage_mem_percent()).addValue("usage_network_percent", stats.getusage_network_percent()).addValue("vds_id", stats.getId()).addValue("mem_available", stats.getmem_available()).addValue("mem_free", stats.getMemFree()).addValue("mem_shared", stats.getmem_shared()).addValue("swap_free", stats.getswap_free()).addValue("swap_total", stats.getswap_total()).addValue("ksm_cpu_percent", stats.getksm_cpu_percent()).addValue("ksm_pages", stats.getksm_pages()).addValue("ksm_state", stats.getksm_state()).addValue("ha_score", stats.getHighlyAvailableScore()); getCallsHandler().executeModification("InsertVdsStatistics", parameterSource); }
private void updateAuditLog(org.ovirt.engine.core.bll.storage.disk.cinder.ExtendCinderDiskCommand command, org.ovirt.engine.core.common.AuditLogType auditLogType, java.lang.Long imageSizeInGigabytes) { command.addCustomValue("DiskAlias", getDisk(command).getDiskAlias()); command.addCustomValue("NewSize", java.lang.String.valueOf(imageSizeInGigabytes)); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(command, auditLogType); }

@java.lang.Override protected void afterReadResponse(java.net.HttpURLConnection connection, byte[] response) throws java.lang.Exception { if (((connection.getResponseCode()) != (java.net.HttpURLConnection.HTTP_OK)) && ((connection.getResponseCode()) != (java.net.HttpURLConnection.HTTP_MOVED_TEMP))) { org.ovirt.engine.core.bll.host.provider.foreman.ForemanErrorWrapper ferr = objectMapper.readValue(response, org.ovirt.engine.core.bll.host.provider.foreman.ForemanErrorWrapper.class); java.lang.String err = org.apache.commons.lang.StringUtils.join(ferr.getForemanError().getFull_messages(), ", "); throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.PROVIDER_FAILURE, err); } }
private void commitLabelChanges(org.ovirt.engine.ui.uicommonweb.models.hosts.NicLabelModel labelModel, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> potentialNetworks) { labelModel.commit(iface); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel ifaceModel = nicMap.get(iface.getName()); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.clearNetworks(ifaceModel, allNics); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.attachNetworks(ifaceModel, new java.util.ArrayList(potentialNetworks), allNics); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((args != null) && (args instanceof org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs)) { java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName; if ("IsChangable".equals(propName)) { cloudInitPasswordSetEditor.setTitle((model.getCloudInitPasswordSet().getIsChangable() ? org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmInitWidget.constants.vmInitPasswordSetToolTip() : org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmInitWidget.constants.vmInitPasswordNotSetToolTip())); } } }
public final java.lang.String consoleClientResourcesUrl() { return getString(org.ovirt.engine.ui.common.utils.DynamicMessages.DynamicMessageKey.CONSOLE_CLIENT_RESOURCES_URL); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if ((ev.matchesDefinition(ListModel.SelectedItemChangedEventDefinition)) && (sender == (getDataCenter()))) { DataCenter_SelectedItemChanged(); } else if ((ev.matchesDefinition(ListModel.SelectedItemChangedEventDefinition)) && (sender == (getCluster()))) { Cluster_SelectedItemChanged(); } else if (sender == (getConsoleAddressEnabled())) { consoleAddressChanged(); } }
@java.lang.Override protected void executeVmCommand() { if (diskShouldBeUnPlugged()) { performPlugCommand(VDSCommandType.HotUnPlugDisk, disk, vmDevice); } org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVmDeviceDao().remove(vmDevice.getId()); if ((!(disk.isDiskSnapshot())) && ((org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE) == (disk.getDiskStorageType()))) { org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getImageDao().updateImageVmSnapshotId(((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)).getImageId(), null); } org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrderInVmDeviceAndStoreToDB(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm().getStaticData()); org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVmStaticDAO().incrementDbGeneration(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm().getId()); org.ovirt.engine.core.bll.DetachDiskFromVmCommand.setSucceeded(true); }


private void createConcreteSSLSocketFactory() throws org.ovirt.engine.core.notifier.NotificationServiceException { java.lang.String keystorePass = getConfigurationProperty(ConfigValues.keystorePass.name(), prop.get(NotificationProperties.keystorePassVersion)); java.lang.String keystoreUrl = getConfigurationProperty(ConfigValues.keystoreUrl.name(), prop.get(NotificationProperties.keystoreUrlVersion)); validateConfigurationProperty(keystorePass); validateConfigurationProperty(keystoreUrl); try { java.lang.String sslProtocol = prop.get(NotificationProperties.SSL_PROTOCOL); if (org.apache.commons.lang.StringUtils.isEmpty(sslProtocol)) { sslProtocol = org.ovirt.engine.core.notifier.EngineMonitorService.DEFAULT_SSL_PROTOCOL; } java.security.KeyStore keyStore = org.ovirt.engine.core.utils.crypt.EncryptionUtils.getKeyStore(keystoreUrl, keystorePass, org.ovirt.engine.core.notifier.EngineMonitorService.CERTIFICATION_TYPE); javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()); tmf.init(keyStore); javax.net.ssl.SSLContext ctx = javax.net.ssl.SSLContext.getInstance(sslProtocol); ctx.init(null, tmf.getTrustManagers(), null); sslFactory = ctx.getSocketFactory(); } catch (java.lang.Exception e) { throw new org.ovirt.engine.core.notifier.NotificationServiceException("Failed to create SSL factory when running with SSL mode.", e); } }
private void logProxySelection(java.lang.String proxy, java.lang.String origin, java.lang.String command) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("Proxy", proxy); logable.addCustomValue("Origin", origin); logable.addCustomValue("Command", command); logable.setVdsId(_vds.getId()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.PROXY_HOST_SELECTION); org.ovirt.engine.core.bll.FenceExecutor.log.infoFormat("Using Host {0} from {1} as proxy to execute {2} command on Host {3}", proxy, origin, command, _vds.getName()); }
public void onConfirmPMHost() { org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel) (getWindow())); if (!(model.validate())) { return; } if (!((java.lang.Boolean) (model.getIsPm().getEntity()))) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().powerManagementConfigurationTitle()); confirmModel.setHashName("power_management_configuration"); confirmModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().youHavntConfigPmMsg()); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnAddHost", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); confirmModel.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmWithFocus", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); confirmModel.getCommands().add(tempVar2); } else { onAddHost(); } }

@org.junit.Test public void testSaveWithEntities() { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.NewGuid(); dao.save(newAsyncTask, VdcObjectType.Storage, storageId); java.util.List<org.ovirt.engine.core.compat.Guid> asyncTasks = dao.getAsyncTaskIdsByEntity(storageId); assertNotNull(asyncTasks); assertEquals(asyncTasks.size(), 1); assertEquals(asyncTasks.get(0), newAsyncTask.gettask_id()); }


protected void setVdsRuntimeError(java.lang.RuntimeException ex) { getVDSReturnValue().setSucceeded(false); getVDSReturnValue().setExceptionString(ex.toString()); getVDSReturnValue().setExceptionObject(ex); org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase vdsExp = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) ((ex instanceof org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) ? ex : null)); if (vdsExp != null) { if ((vdsExp.getVdsError()) != null) { getVDSReturnValue().setVdsError(((org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) (ex)).getVdsError()); } else if ((vdsExp.getCause()) instanceof org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) { getVDSReturnValue().setVdsError(((org.ovirt.engine.core.vdsbroker.vdsbroker.VDSExceptionBase) (vdsExp.getCause())).getVdsError()); } } logException(ex); }
java.lang.String getDetailMessage(T entity);

@org.junit.Test public void testIt() { org.ovirt.engine.core.compat.backendcompat.PropertyInfo pc = org.ovirt.engine.core.compat.backendcompat.TypeCompat.GetProperty(this.getClass(), "someValue"); java.lang.String result = ((java.lang.String) (pc.GetValue(this, "JarJar"))); assertEquals("Standard", "Anakin", result); this.someValue = null; result = ((java.lang.String) (pc.GetValue(this, "JarJar"))); assertEquals("Null Value", "JarJar", result); }




@java.lang.Override protected void toggleGhost(org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType value, org.ovirt.engine.ui.common.widget.profile.ProfileInstanceTypeEditor item, boolean becomingGhost) { item.profileEditor.setEnabled((!becomingGhost)); item.profileEditor.asWidget().setEnabled(true); realEntryCount += (becomingGhost) ? -1 : 1; updateHeaderLabel(); }

@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((id) == null ? 0 : id.hashCode()); result = (prime * result) + ((LVER) == null ? 0 : LVER.hashCode()); result = (prime * result) + ((description) == null ? 0 : description.hashCode()); result = (prime * result) + ((comment) == null ? 0 : comment.hashCode()); result = (prime * result) + ((compatibilityVersion) == null ? 0 : compatibilityVersion.hashCode()); result = (prime * result) + (masterDomainVersion); result = (prime * result) + ((name) == null ? 0 : name.hashCode()); result = (prime * result) + ((recovery_mode) == null ? 0 : recovery_mode.hashCode()); result = (prime * result) + ((spmVdsId) == null ? 0 : spmVdsId.hashCode()); result = (prime * result) + ((status) == null ? 0 : status.hashCode()); result = (prime * result) + ((storageType) == null ? 0 : storageType.hashCode()); result = (prime * result) + ((storagePoolFormatType) == null ? 0 : storagePoolFormatType.hashCode()); result = (prime * result) + ((quotaEnforcementType) == null ? 0 : quotaEnforcementType.hashCode()); return result; }


@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel clusterModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel) (model)); java.util.ArrayList<org.ovirt.engine.core.compat.Version> versions = ((java.util.ArrayList<org.ovirt.engine.core.compat.Version>) (result)); clusterModel.getVersion().setItems(versions); if (!(versions.contains(clusterModel.getVersion().getSelectedItem()))) { if (versions.contains(((org.ovirt.engine.core.common.businessentities.StoragePool) (clusterModel.getDataCenter().getSelectedItem())).getcompatibility_version())) { clusterModel.getVersion().setSelectedItem(((org.ovirt.engine.core.common.businessentities.StoragePool) (clusterModel.getDataCenter().getSelectedItem())).getcompatibility_version()); } else { clusterModel.getVersion().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.selectHighestVersion(versions)); } } else if (clusterModel.getIsEdit()) { clusterModel.getVersion().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(versions, new org.ovirt.engine.ui.uicommonweb.Linq.VersionPredicate(clusterModel.getEntity().getcompatibility_version()))); } }


@java.lang.Override protected boolean canDoAction() { initializeObjectState(); if ((org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.canRunActionOnNonManagedVm())) { return false; } org.ovirt.engine.core.bll.validator.VmValidator vmValidator = createVmValidator(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm()); if (((((((!(validate(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getStoragePool()).isUp()))) || (!(validateVmNotDuringSnapshot()))) || (!(validateVmNotInPreview()))) || (!(validateSnapshotExists()))) || (!(validateSnapshotType()))) || (org.ovirt.engine.core.common.FeatureSupported.liveMerge(org.ovirt.engine.core.bll.snapshots.RemoveSnapshotCommand.getVm().getVdsGroupCompatibilityVersion()) ? (!(validate(vmValidator.vmQualifiedForSnapshotMerge()))) || (!(validate(vmValidator.vmHostCanLiveMerge()))) : !(validate(vmValidator.vmDown())))) || (!(validate(vmValidator.vmNotHavingDeviceSnapshotsAttachedToOtherVms(false))))) { return false; } if (hasImages()) { if (!(validateImages())) { return false; } if (!(validateImageNotInTemplate())) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_IMAGE_TEMPLATE); } if (!(validateStorageDomains())) { return false; } } return true; }
private org.ovirt.engine.core.common.businessentities.roles getRole() { org.ovirt.engine.core.common.businessentities.roles role = new org.ovirt.engine.core.common.businessentities.roles(); role.setId(GUIDS[1]); return role; }
public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc moveImage(java.lang.String spUUID, java.lang.String srcDomUUID, java.lang.String dstDomUUID, java.lang.String imgGUID, java.lang.String vmGUID, int op, java.lang.String postZero, java.lang.String force) { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = irsServer.moveImage(spUUID, srcDomUUID, dstDomUUID, imgGUID, vmGUID, op, postZero, force); org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(xmlRpcReturnValue); return wrapper; }


@java.lang.Override protected void initMtu() { getHasMtu().setEntity(((getNetwork().getMtu()) != 0)); getMtu().setEntity(((getNetwork().getMtu()) != 0 ? getNetwork().getMtu() : null)); }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel getSelectedItem() { return ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (super.getSelectedItem())); }
private boolean IsFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer) { boolean returnValue = true; if (!(IsFieldUpdatable(name))) { if (((fieldContainer != null) && ((mContainer) != null)) && (!(mContainer.CanUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.List<java.lang.String> values = null; if (((values = mDictionary.get(status)) != null) && (values != null)) { returnValue = values.contains(name); } else { returnValue = false; } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.LogError(name, status); } } return returnValue; }
@java.lang.Override public void onSuccess(final java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.queries.VdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase>> operationList, final java.util.List<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> resultObject) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Succesful returned result from runMultipleQueries!"); org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult(queryTypeList, queryParamsList, resultObject); callback.executed(f); org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent.fire(this, state); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VM vm) { java.lang.String tooltipContent; if ((vm.getVmPoolId()) == null) { org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig config = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig.from(vm.getVmType(), vm.isStateless(), vm.isNextRunConfigurationExists()); tooltipContent = config.getTooltip(); } else { tooltipContent = getPoolVmTooltip(vm.getVmType()); } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(tooltipContent); }
@java.lang.Override protected void executeCommand() { updateQuotaCache(); if ((_oldStoragePool.getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Up)) { if (!(org.apache.commons.lang.StringUtils.equals(_oldStoragePool.getName(), org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getName()))) { runVdsCommand(VDSCommandType.SetStoragePoolDescription, new org.ovirt.engine.core.common.vdscommands.SetStoragePoolDescriptionVDSCommandParameters(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool().getName())); } } org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.copyUnchangedStoragePoolProperties(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool(), _oldStoragePool); org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePoolDAO().updatePartial(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getStoragePool()); updateStoragePoolFormatType(); org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.setSucceeded(true); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { if (returnValue != null) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); updateVms(java.util.Collections.singletonList(vm)); clearError(); } else { setError(messages.failedToLoadOva(getOvaPath().getEntity())); } stopProgress(); }
@java.lang.Override protected org.ovirt.engine.core.compat.Guid getExistingEntityId() { return org.ovirt.engine.core.compat.Guid.createGuidFromString("1115c1c6-cb15-4832-b2a4-023770607111"); }
@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc hotunplugDisk(java.util.Map info) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.hotunplugDisk").withParameter("vmID", getVmId(info)).withParameter("params", info).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { commonModel.getClearSearchStringCommand().execute(); }
public org.ovirt.engine.core.common.businessentities.VDSStatus getPreviousStatus() { return this.mVdsDynamic.getPreviousStatus(); }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__REFRESH); addCanDoActionMessage(EngineMessage.VAR__TYPE__HOST_DEVICES); }

private void initRanges(java.lang.String ranges) { java.lang.String[] rangesArray = ranges.split("[,]", (-1)); for (java.lang.String range : rangesArray) { java.lang.String[] startendArray = range.split("[-]", (-1)); if ((startendArray.length) == 2) { if (!(initRange(startendArray[0], startendArray[1]))) { org.ovirt.engine.core.bll.network.MacPoolManager.log.errorFormat("Failed to initialize Mac Pool range. Please fix Mac Pool range: {0}", range); } } else { org.ovirt.engine.core.bll.network.MacPoolManager.log.errorFormat("Failed to initialize Mac Pool range. Please fix Mac Pool range: {0}", range); } } if (availableMacs.isEmpty()) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.MAC_POOL_INITIALIZATION_FAILED); } }
private void HandleEndedTask() { if ((getState()) != (AsyncTaskState.Ended)) { setState(AsyncTaskState.Ended); setLastStatusAccessTime(); } if (isPartiallyCompletedCommandTask()) { getParameters().getDbAsyncTask().getTaskParameters().setTaskGroupSuccess(false); org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.FAILED); OnTaskEndFailure(); } if (HasTaskEndedSuccessfully()) { org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.FINISHED); OnTaskEndSuccess(); } else if (HasTaskEndedInFailure()) { org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.FAILED); OnTaskEndFailure(); } else if (!(DoesTaskExist())) { org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(privateParameters.getDbAsyncTask().getStepId(), JobExecutionStatus.UNKNOWN); OnTaskDoesNotExist(); } }



@java.lang.Override public void execute() { if ((connected.getCount()) == 0) { connected = new java.util.concurrent.CountDownLatch(1); } if ((subscribed.getCount()) == 0) { subscribed = new java.util.concurrent.CountDownLatch(1); } send(new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().connect().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ACCEPT, "1.2").build()); subscribtionId = java.util.UUID.randomUUID().toString(); send(new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().subscribe().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompClient.RESPONSE_QUEUE).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ID, subscribtionId).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ACK, "client").build()); }

@org.junit.Test public void testAdd() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = mockUri("hosts", "00000001-0001-0001-0001-000000000011", "nics"); javax.ws.rs.core.Request request = mockRequest("POST"); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/apidoc#services/host_nics/methods/add", fault.getDetail()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.event_subscriber> getAllForSubscriber(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("subscriber_id", id); return getCallsHandler().executeReadList("Getevent_subscriberBysubscriber_id", org.ovirt.engine.core.dao.EventDAODbFacadeImpl.EventSubscriberRowMapper.instance, parameterSource); }


@java.lang.Override protected void onLoad() { super.onLoad(); if ((selectionModel.getLastSelectedRow()) == (-1)) { return; } com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { setFocus(true); } }); }
void processOnClientIpChange(org.ovirt.engine.core.compat.Guid vmId);
public static void copyVmDevices(org.ovirt.engine.core.compat.Guid srcId, org.ovirt.engine.core.compat.Guid dstId, java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disks, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> ifaces) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(dstId); org.ovirt.engine.core.common.businessentities.VmBase vmBase = (vm != null) ? vm.getStaticData() : null; boolean isVm = vmBase != null; if (!isVm) { vmBase = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().get(dstId); } java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dao.getVmDeviceByVmId(srcId); org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices(srcId, dstId, vm, vmBase, isVm, devices, disks, ifaces); }

@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllDirectPermissionsForAdElement(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("ad_element_id", id); return getCallsHandler().executeReadList("GetDirectPermissionsByAdElementId", org.ovirt.engine.core.dao.PermissionDAODbFacadeImpl.PermissionRowMapper.instance, parameterSource); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.RemoveDiskCommand.getParameters().getEntityId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, getDiskIsBeingRemovedLockMessage())); }


public static void ProcessVmPoolOnStopVm(org.ovirt.engine.core.compat.Guid vmId, org.ovirt.engine.core.bll.context.CommandContext context) { org.ovirt.engine.core.common.businessentities.VmPoolMap map = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().getVmPoolMapByVmGuid(vmId); java.util.List<org.ovirt.engine.core.common.businessentities.DbUser> users = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().getAllForVm(vmId); if (((map != null) && (users != null)) && (!(users.isEmpty()))) { org.ovirt.engine.core.common.businessentities.vm_pools pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().get(map.getvm_pool_id()); if ((pool != null) && ((pool.getvm_pool_type()) == (org.ovirt.engine.core.common.businessentities.VmPoolType.Automatic))) { for (org.ovirt.engine.core.common.businessentities.DbUser dbUser : users) { org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.DetachUserFromVmFromPool, new org.ovirt.engine.core.common.action.VmPoolSimpleUserParameters(map.getvm_pool_id(), dbUser.getuser_id()), context); } } } else { org.ovirt.engine.core.bll.VmPoolHandler.removeVmStatelessImages(vmId, context); } org.ovirt.engine.core.bll.quota.QuotaManager.getInstance().rollbackQuotaByVmId(vmId); org.ovirt.engine.core.bll.VmHandler.removeStatelessVmUnmanagedDevices(vmId); }
@com.google.gwt.uibinder.client.UiChild(tagname = "logo", limit = 1) public void setLogo(com.google.gwt.user.client.ui.Widget widget) { logoPanel.setWidget(widget); }
@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); addCanDoActionMessage(EngineMessage.VAR__ACTION__REMOVE_BRICKS_START); addCanDoActionMessage(EngineMessage.VAR__TYPE__GLUSTER_BRICK); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Unassigned Logical Networks panel") java.lang.String unassignedLogicalNetworksPanel();
protected void extractBond(java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> bonds, org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface, java.lang.String name) { if (org.apache.commons.lang.StringUtils.isBlank(iface.getNetworkName())) { violations.add(VdcBllMessages.NETWROK_NOT_EXISTS); } else { if (bonds.containsKey(name)) { violations.add(VdcBllMessages.NETWORK_BOND_NAME_EXISTS); } else { bonds.put(name, iface); } } }

@java.lang.Override @org.ovirt.engine.api.restapi.resource.SingleEntityResource public org.ovirt.engine.api.resource.InstanceTypeResource getInstanceTypeSubResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendInstanceTypeResource(id)); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage_pool runInTransaction() { getStoragePoolDAO().update(getStoragePool()); return null; }
@java.lang.Override protected void Perform() { if (org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(mTicket)) { mTicket = org.ovirt.engine.core.utils.Ticketing.GenerateOTP(); } final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.SetVmTicketCommand.getVm(); final org.ovirt.engine.core.common.interfaces.IVdcUser user = org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser(); vm.setConsoleUserId(user.getUserId()); final org.ovirt.engine.core.dao.VmDynamicDAO dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDAO(); if ((vm.getAllowConsoleReconnect()) || (neededPermissions)) { dao.update(vm.getDynamicData()); sendTicket(); } else { final boolean saved = dao.updateConsoleUserWithOptimisticLocking(vm.getDynamicData()); if (saved) { sendTicket(); } else { dontSendTicket(); } } }


@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__UPDATE); addCanDoActionMessage(EngineMessage.VAR__TYPE__CLUSTER_POLICY); }
protected void initGraphicsConsoles() { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getSelectedCluster(); java.lang.Integer osType = getOSType().getSelectedItem(); if ((cluster == null) || (osType == null)) { return; } initGraphicsConsoles(osType, cluster.getCompatibilityVersion()); }
private void setDiskProfilesList(java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> diskProfiles) { if ((diskProfiles != null) && (!(diskProfiles.isEmpty()))) { getDiskProfile().setItems(diskProfiles); } org.ovirt.engine.core.compat.Guid defaultProfileId = (((getDisk()) != null) && ((getDisk().getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE))) ? ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (getDisk())).getDiskProfileId() : null; if (defaultProfileId != null) { for (org.ovirt.engine.core.common.businessentities.profiles.DiskProfile profile : diskProfiles) { if (profile.getId().equals(defaultProfileId)) { getDiskProfile().setSelectedItem(profile); return; } } org.ovirt.engine.core.common.businessentities.profiles.DiskProfile diskProfile = new org.ovirt.engine.core.common.businessentities.profiles.DiskProfile(); diskProfile.setId(defaultProfileId); if ((getDisk()) != null) { diskProfile.setName(getDiskImage().getDiskProfileName()); } diskProfiles.add(diskProfile); getDiskProfile().setItems(diskProfiles); getDiskProfile().setSelectedItem(diskProfile); } }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Permit permit) { validateParameters(permit, "name|id"); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.ActionGroup> actionGroups = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.ActionGroup>(); actionGroups.add(map(permit)); return performCreation(VdcActionType.AttachActionGroupsToRole, new org.ovirt.engine.core.common.action.ActionGroupsToRoleParameter(roleId, actionGroups), new org.ovirt.engine.api.restapi.resource.BackendPermitsResource.PermitIdResolver(actionGroups.get(0))); }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.network.NetworkView profile = getEntity(); getEditCommand().setIsExecutionAllowed((((getSelectedItems()) != null) && ((getSelectedItems().size()) == 1))); getRemoveCommand().setIsExecutionAllowed((((getSelectedItems()) != null) && ((getSelectedItems().size()) > 0))); }

@java.lang.Override public void markAsValid() { applyCommonValidationStyles(); getValidatedWidgetStyle().setBorderColor("gray"); getValidatedWidget().setTitle(null); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmNetworkInterface mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.VmNetworkInterface entity = new org.ovirt.engine.core.common.businessentities.VmNetworkInterface(); entity.getStatistics().setId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("id"))); entity.getStatistics().setReceiveRate(rs.getDouble("rx_rate")); entity.getStatistics().setTransmitRate(rs.getDouble("tx_rate")); entity.getStatistics().setReceiveDropRate(rs.getDouble("rx_drop")); entity.getStatistics().setTransmitDropRate(rs.getDouble("tx_drop")); entity.getStatistics().setStatus(org.ovirt.engine.core.common.businessentities.InterfaceStatus.forValue(rs.getInt("iface_status"))); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setMacAddress(rs.getString("mac_addr")); entity.setNetworkName(rs.getString("network_name")); entity.setName(rs.getString("name")); entity.setVmId(org.ovirt.engine.core.compat.NGuid.createGuidFromString(rs.getString("vm_guid"))); entity.setVmTemplateId(org.ovirt.engine.core.compat.NGuid.createGuidFromString(rs.getString("vmt_guid"))); entity.setVmName(rs.getString("vm_name")); entity.setId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("id"))); entity.setSpeed(((java.lang.Integer) (rs.getObject("speed")))); entity.setActive(rs.getBoolean("is_plugged")); return entity; }
@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); addCanDoActionMessage(EngineMessage.VAR__ACTION__FREEZE); addCanDoActionMessage(EngineMessage.VAR__TYPE__VM); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterHookEnable(java.lang.String glusterCommand, java.lang.String stage, java.lang.String hookName) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterHook.enable").withParameter("glusterCmd", glusterCommand).withParameter("hookLevel", stage).withParameter("hookName", hookName).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@org.junit.Test public void canDoActionFailsOnRemoveLastAdGroupWithSuperUserPrivileges() throws java.lang.Exception { mockIsLastSuperUserGroup(true); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString())); }


private void onTest() { if (!(validateConnectionSettings())) { getTestResult().setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().testFailedInsufficientParams()); return; } flush(); startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TestProviderConnectivity, new org.ovirt.engine.core.common.action.ProviderParameters(provider), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase res = result.getReturnValue(); if (isFailedOnSSL(res)) { org.ovirt.engine.ui.frontend.AsyncQuery getCertChainQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getCertChainQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { if (result != null) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = getImportChainConfirmationModel(((java.lang.String) (result))); sourceListModel.setConfirmWindow(confirmationModel); } else { stopProgress(); getTestResult().setEntity(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().testFailedUnknownErrorMsg()); } } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getProviderCertificateChain(getCertChainQuery, provider); } else { stopProgress(); setTestResultValue(res); } } }, null, false); }
private void createImageForVmMetaData() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CreateImage, new org.ovirt.engine.core.common.vdscommands.CreateImageVDSCommandParameters(storagePool.getId(), storageDomainId, vmConfImageGroupId, MemoryUtils.METADATA_SIZE_IN_BYTES, org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW, vmConfVolumeId, "")); if (!(retVal.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.VolumeCreationError, "Failed to create image for vm configuration!"); } org.ovirt.engine.core.compat.Guid taskId = enclosingCommand.persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder.CREATE_IMAGE_FOR_VM_TASK_KEY); org.ovirt.engine.core.compat.Guid guid = enclosingCommand.createTask(taskId, retVal.getCreationInfo(), enclosingCommand.getActionType()); enclosingCommand.getTaskIdList().add(guid); }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hookEntity) { if (hookEntity.hasConflicts()) { return getApplicationResources().alertImage(); } return null; }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Any Host in Cluster") java.lang.String anyHostInCluster();
@java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> list = getClusterByServiceList(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>) (source)), supportsVirtService, supportsGlusterService); java.util.Collections.sort(list, new org.ovirt.engine.core.common.businessentities.comparators.NameableComparator()); return list; } return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster>(); }

@org.junit.Test public void updateStatusOfImagesByImageGroupId() { org.ovirt.engine.core.common.businessentities.storage.Image image = dao.get(org.ovirt.engine.core.dao.ImageDaoTest.EXISTING_IMAGE_ID); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = dbFacade.getDiskImageDao().getAllSnapshotsForImageGroup(image.getDiskId()); assertFalse(((snapshots.size()) == 1)); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : snapshots) { assertFalse(((org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED) == (diskImage.getImageStatus()))); } dao.updateStatusOfImagesByImageGroupId(image.getDiskId(), ImageStatus.LOCKED); snapshots = dbFacade.getDiskImageDao().getAllSnapshotsForImageGroup(image.getDiskId()); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : snapshots) { assertEquals(ImageStatus.LOCKED, diskImage.getImageStatus()); } }

@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmOsType extractOsType(org.ovirt.engine.core.common.businessentities.VmTemplate item) { return item.getOs(); }
@java.lang.Override protected boolean canDoAction() { if (org.ovirt.engine.core.bll.ChangeDiskCommand.shouldSkipCommandExecutionCached()) { return true; } if ((org.ovirt.engine.core.bll.ChangeDiskCommand.getVm()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.ChangeDiskCommand.canRunActionOnNonManagedVm())) { return false; } if (!(org.ovirt.engine.core.bll.ChangeDiskCommand.getVm().isRunningOrPaused())) { return org.ovirt.engine.core.bll.ChangeDiskCommand.failVmStatusIllegal(); } if (((org.ovirt.engine.core.bll.IsoDomainListSyncronizer.getInstance().findActiveISODomain(org.ovirt.engine.core.bll.ChangeDiskCommand.getVm().getStoragePoolId())) == null) && (!(org.apache.commons.lang.StringUtils.isEmpty(cdImagePath)))) { return failCanDoAction(EngineMessage.VM_CANNOT_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO); } if ((org.apache.commons.lang.StringUtils.isNotEmpty(cdImagePath)) && (!(org.apache.commons.lang.StringUtils.endsWithIgnoreCase(cdImagePath, ValidationUtils.ISO_SUFFIX)))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_INVALID_CDROM_DISK_FORMAT); } return true; }

public <T extends org.ovirt.engine.core.bll.scheduling.pending.PendingResource> java.lang.Iterable<T> pendingResources(java.lang.Class<T> type) { java.util.List<T> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.bll.scheduling.pending.PendingResource resource : pendingResources.values()) { if (resource.getClass().equals(type)) { list.add(((T) (resource))); } } return list; }

protected org.ovirt.engine.core.common.businessentities.VmStatic getVm(org.ovirt.engine.api.model.Template template) { org.ovirt.engine.core.common.businessentities.VM vm; if (template.getVm().isSetId()) { vm = getEntity(org.ovirt.engine.api.model.VM.class, VdcQueryType.GetVmByVmId, new org.ovirt.engine.core.common.queries.GetVmByVmIdParameters(asGuid(template.getVm().getId())), template.getVm().getId()); } else { vm = getEntity(org.ovirt.engine.api.model.VM.class, SearchType.VM, ("VM: name=" + (template.getVm().getName()))); } return vm.getStaticData(); }
void initTable(org.ovirt.engine.ui.common.widget.table.SimpleActionTable<org.ovirt.engine.core.common.businessentities.AuditLog> table) { table.addColumn(new org.ovirt.engine.ui.common.widget.table.column.AuditLogSeverityColumn(), constants.empty(), "30px"); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip<org.ovirt.engine.core.common.businessentities.AuditLog> logTimeColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractFullDateTimeColumn<org.ovirt.engine.core.common.businessentities.AuditLog>() { @java.lang.Override protected java.util.Date getRawValue(org.ovirt.engine.core.common.businessentities.AuditLog object) { return object.getLogTime(); } }; table.addColumn(logTimeColumn, constants.timeEvent(), "160px"); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip<org.ovirt.engine.core.common.businessentities.AuditLog> messageColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip<org.ovirt.engine.core.common.businessentities.AuditLog>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.AuditLog object) { return object.getMessage(); } }; table.addColumn(messageColumn, constants.messageEvent()); }

@org.junit.Test public void canDoActionMaxBlockDiskSizeCheckFails() { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(org.ovirt.engine.core.bll.AddDiskCommandTest.createDiskImage(((org.ovirt.engine.core.bll.AddDiskCommandTest.MAX_BLOCK_SIZE) * 2))); initializeCommand(storageId, parameters); mockVm(); mockStorageDomain(storageId, StorageType.ISCSI); mockStoragePoolIsoMap(); mockMaxPciSlots(); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_DISK_MAX_SIZE_EXCEEDED.toString())); }
public org.ovirt.engine.core.bll.ValidationResult virtIoRngSupported() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_RNG_SOURCE_NOT_SUPPORTED).unless(((cluster.getRequiredRngSources().isEmpty()) || (virtIoRngSupportedInCluster()))); }
@org.junit.Test public void canDoActionVmShareableDisk() { createParameters(); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED.toString())); }
@java.lang.Override protected java.lang.String getTitle(org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel value) { return constants.rebootVm(); }


public void migrateMacsToAnotherMacPoolIfNeeded(org.ovirt.engine.core.common.businessentities.Cluster sourceCluster, org.ovirt.engine.core.compat.Guid targetMacPoolId, org.ovirt.engine.core.bll.context.CommandContext commandContext) { java.util.Objects.requireNonNull(sourceCluster); java.util.Objects.requireNonNull(targetMacPoolId); java.util.Objects.requireNonNull(commandContext); org.ovirt.engine.core.compat.Guid sourceMacPoolId = java.util.Objects.requireNonNull(sourceCluster.getMacPoolId()); org.ovirt.engine.core.compat.Guid clusterId = java.util.Objects.requireNonNull(sourceCluster.getId()); boolean macPoolChanged = !(sourceMacPoolId.equals(targetMacPoolId)); if (macPoolChanged) { java.util.List<java.lang.String> macsToMigrate = vmNicDao.getAllMacsByClusterId(clusterId); migrateMacsToAnotherMacPool(sourceMacPoolId, targetMacPoolId, macsToMigrate, false, commandContext); } }

void updateListHeader(org.ovirt.engine.ui.uicommonweb.models.storage.DisksAllocationModel model) { java.lang.String width = (showQuota) ? "85px" : "100px"; listHeader = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable(false, ((com.google.gwt.user.cellview.client.CellTable.Resources) (com.google.gwt.core.client.GWT.create(org.ovirt.engine.ui.common.PopupSimpleTableResources.class))), true); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.aliasDisk(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.provisionedSizeDisk(), width); if (showVolumeType) listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.allocationDisk(), width); if (showSource) listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.sourceDisk(), width); listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.targetDisk(), width); if (showQuota) listHeader.addColumn(new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn(), constants.quotaDisk(), width); listHeader.setRowData(new java.util.ArrayList()); listHeader.setWidth("100%", true); diskListHeaderPanel.setWidget(listHeader); }
@org.junit.Test public void canDoPass() { when(hostedEngineHelper.getStorageDomain()).thenReturn(null); org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain(); int i = new java.util.Random().nextInt(SUPPORTED_DOMAIN_TYPES.length); sd.setStorageType(org.ovirt.engine.core.bll.ImportHostedEngineStorageDomainCommand.SUPPORTED_DOMAIN_TYPES[i]); sd.setStorageName(org.ovirt.engine.core.bll.ImportHostedEngineStorageDomainCommandTest.HOSTED_STORAGE_NAME); doReturn(createQueryReturnValueWith(java.util.Arrays.asList(sd))).when(backend).runInternalQuery(eq(VdcQueryType.GetExistingStorageDomainList), any(org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class)); assertTrue(cmd.canDoAction()); }


@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.storage.pool.AbstractSyncLunsCommand.checkStoragePool())) { return false; } return super.validate(); }

public final void AddFields(java.lang.Iterable<java.lang.Enum<?>> statuses, java.lang.Iterable<java.lang.String> fields) { for (java.lang.String field : fields) { AddField(statuses, field); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> listFailedAutorecoverables() { return getCallsHandler().executeReadList("GetFailingStorage_domains", org.ovirt.engine.core.dao.StorageDomainDAODbFacadeImpl.StorageDomainRowMapper.instance, null); }
private void moveVDSToMaintenanceIfNeeded() { if ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.PreparingForMaintenance)) { if (monitoringStrategy.canMoveToMaintenance(vds)) { vdsManager.setStatus(VDSStatus.Maintenance, vds); saveVdsDynamic = true; saveVdsStatistics = true; org.ovirt.engine.core.vdsbroker.HostMonitoring.log.info("Updated vds status from 'Preparing for Maintenance' to 'Maintenance' in database, vds '{}'({})", vds.getName(), vds.getId()); } else { vdsMaintenanceTimeoutOccurred = vdsManager.isTimeToRetryMaintenance(); } } }
@org.ovirt.engine.ui.common.DefaultStringValue("Spice") java.lang.String spice();
public void setport(int value) { this.mVdsStatic.setport(value); }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume = getGlusterVolume(); if (!(super.canDoAction())) { return false; } if ((!(getGlusterTaskUtils().isTaskOfType(glusterVolume, GlusterTaskType.REBALANCE))) || (!(getGlusterTaskUtils().isTaskStatus(glusterVolume, JobExecutionStatus.STARTED)))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REBALANCE_NOT_STARTED); } return true; }
protected boolean isVmTemplateWithSameNameExist() { return org.ovirt.engine.core.bll.VmTemplateCommand.isVmTemlateWithSameNameExist(getParameters().getVmTemplate().getName()); }
private boolean insertExclusiveLock(java.lang.String key, boolean isCheckOnly) { if (locks.containsKey(key)) { return false; } if (!isCheckOnly) { locks.put(key, new org.ovirt.engine.core.bll.lock.InMemoryLockManager.InternalLockView(0, true)); } return true; }

@java.lang.Override public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem) { super.initialize(systemTreeSelectedItem); getModel().getVmType().setIsChangeable(true); getModel().getPoolStateful().setIsChangeable(true); templateValidate(); instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.NewPoolInstanceTypeManager(getModel()); getModel().getVmInitModel().init(null); }
@java.lang.Override protected boolean canDoAction() { boolean retValue; org.ovirt.engine.core.compat.Guid subscriberId = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getSubscriberId(); java.lang.String eventName = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getEventUpName(); org.ovirt.engine.core.common.EventNotificationMethod eventNotificationMethod = org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber().getEventNotificationMethod(); java.util.List<org.ovirt.engine.core.common.businessentities.EventSubscriber> subscriptions = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getEventDao().getAllForSubscriber(subscriberId); if (org.ovirt.engine.core.bll.AddEventSubscriptionCommand.isAlreadySubscribed(subscriptions, subscriberId, eventName, eventNotificationMethod)) { addCanDoActionMessage(EngineMessage.EN_ALREADY_SUBSCRIBED); retValue = false; } else if (!(eventExists(eventName))) { addCanDoActionMessage(EngineMessage.EN_UNSUPPORTED_NOTIFICATION_EVENT); retValue = false; } else { if (eventNotificationMethod != null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().get(subscriberId); if (user == null) { addCanDoActionMessage(EngineMessage.USER_MUST_EXIST_IN_DB); retValue = false; } else { retValue = validateAdd(eventNotificationMethod, org.ovirt.engine.core.bll.AddEventSubscriptionCommand.getParameters().getEventSubscriber(), user); } } else { addCanDoActionMessage(EngineMessage.EN_UNKNOWN_NOTIFICATION_METHOD); retValue = false; } } return retValue; }

public org.ovirt.engine.core.common.action.SetupNetworksParameters buildParameters(org.ovirt.engine.core.compat.Guid hostId, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networksToRemove, java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsBylabels) { org.ovirt.engine.core.common.action.SetupNetworksParameters parameters = createSetupNetworksParameters(hostId); for (java.lang.String label : nicsBylabels.keySet()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicToConfigure = getNicToConfigure(parameters.getInterfaces(), nicsBylabels.get(label).getId()); if (nicToConfigure == null) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.LABELED_NETWORK_INTERFACE_NOT_FOUND); } java.util.Set<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsToRemove = getNicsToRemove(parameters.getInterfaces(), networksToRemove, nicToConfigure); parameters.getInterfaces().removeAll(nicsToRemove); } return parameters; }
private static java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> findNetworkInterfaces(org.ovirt.engine.core.common.businessentities.VDS vds, java.util.Map<java.lang.String, java.lang.Object> xmlRpcStruct, java.util.Map<java.lang.String, java.lang.Object> network) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> vdsInterfaces = org.ovirt.engine.core.common.businessentities.Entities.entitiesByName(vds.getInterfaces()); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfaces = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(); if (org.ovirt.engine.core.common.FeatureSupported.bridgesReportByVdsm(vds.getVdsGroupCompatibilityVersion())) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = null; java.lang.String interfaceName = ((java.lang.String) (network.get(VdsProperties.INTERFACE))); if (interfaceName != null) { iface = vdsInterfaces.get(interfaceName); if (iface == null) { java.util.Map<java.lang.String, java.lang.Object> bridges = ((java.util.Map<java.lang.String, java.lang.Object>) (xmlRpcStruct.get(VdsProperties.NETWORK_BRIDGES))); if ((bridges != null) && (bridges.containsKey(interfaceName))) { interfaces.addAll(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.findBridgedNetworkInterfaces(((java.util.Map<java.lang.String, java.lang.Object>) (bridges.get(interfaceName))), vdsInterfaces)); } } else { interfaces.add(iface); } } } else { interfaces.addAll(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.findBridgedNetworkInterfaces(network, vdsInterfaces)); } return interfaces; }

private void newTemplate() { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel selectedItem = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (getSelectedItem())); if (selectedItem == null) { return; } org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (selectedItem.getEntity())); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel windowModel = new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateVmModelBehavior(vm)); setWindow(windowModel); windowModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newTemplateTitle()); windowModel.setHashName("new_template"); windowModel.setIsNew(true); windowModel.getVmType().setSelectedItem(vm.getVmType()); windowModel.initialize(null); windowModel.getIsTemplatePublic().setEntity(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnNewTemplate", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); windowModel.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); windowModel.getCommands().add(tempVar2); }


@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAllWithUniqueId(java.lang.String id) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getCallsHandler().executeReadList("GetVdsByUniqueID", org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("vds_unique_id", id)); return uniteAgents(vdsList); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((id) == null ? 0 : id.hashCode()); result = (prime * result) + ((compatVersion) == null ? 0 : compatVersion.hashCode()); result = (prime * result) + ((compatibility_version) == null ? 0 : compatibility_version.hashCode()); result = (prime * result) + ((cpu_name) == null ? 0 : cpu_name.hashCode()); result = (prime * result) + ((description) == null ? 0 : description.hashCode()); result = (prime * result) + (max_vds_memory_over_commit); result = (prime * result) + (countThreadsAsCores ? 1231 : 1237); result = (prime * result) + ((migrateOnError) == null ? 0 : migrateOnError.hashCode()); result = (prime * result) + ((name) == null ? 0 : name.hashCode()); result = (prime * result) + ((storagePoolId) == null ? 0 : storagePoolId.hashCode()); result = (prime * result) + ((storagePoolName) == null ? 0 : storagePoolName.hashCode()); result = (prime * result) + (transparentHugepages ? 1231 : 1237); result = (prime * result) + (virtService ? 1231 : 1237); result = (prime * result) + (glusterService ? 1231 : 1237); result = (prime * result) + (tunnelMigration ? 1231 : 1237); result = (prime * result) + ((emulatedMachine) == null ? 0 : emulatedMachine.hashCode()); result = (prime * result) + (trustedService ? 1231 : 1237); result = (prime * result) + ((clusterPolicyName) == null ? 0 : clusterPolicyName.hashCode()); result = (prime * result) + ((clusterPolicyProperties) == null ? 0 : clusterPolicyProperties.hashCode()); result = (prime * result) + (enableBallooning ? 1231 : 1237); return result; }
@org.junit.Test public void testStoragePoolIsNotUp() { setUpGeneralValidations(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND)).when(storagePoolValidator).isUp(); doReturn(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList()).when(cmd).getDisksList(); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND.name())); }
protected boolean checkTemplateInStorageDomain() { boolean retValue = validate(org.ovirt.engine.core.bll.ImportVmCommand.getImportValidator().verifyDisks(imageList, imageToDestinationDomainMap)); if ((retValue && (!(VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVm().getVmtGuid())))) && (!(getParameters().getCopyCollapse()))) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domains = runInternalQuery(VdcQueryType.GetStorageDomainsByVmTemplateId, new org.ovirt.engine.core.common.queries.IdQueryParameters(getVm().getVmtGuid())).getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> domainsId = org.ovirt.engine.core.utils.linq.LinqUtils.transformToList(domains, new org.ovirt.engine.core.utils.linq.Function<org.ovirt.engine.core.common.businessentities.StorageDomain, org.ovirt.engine.core.compat.Guid>() { @java.lang.Override public org.ovirt.engine.core.compat.Guid eval(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomainStatic) { return storageDomainStatic.getId(); } }); if (java.util.Collections.disjoint(domainsId, imageToDestinationDomainMap.values())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return retValue; }

@org.ovirt.engine.ui.webadmin.DefaultMessage("Note that some of the selected VMs are already running on this Host and will not be migrated.") java.lang.String migrateSomeVmsAlreadyRunningOnHost();
private boolean validateDestStorageAndSourceStorageOfSameTypes(org.ovirt.engine.core.common.businessentities.StorageDomain destDomain, org.ovirt.engine.core.common.businessentities.StorageDomain sourceDomain) { if ((destDomain.getStorageType().getStorageSubtype()) != (sourceDomain.getStorageType().getStorageSubtype())) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_DESTINATION_AND_SOURCE_STORAGE_SUB_TYPES_DIFFERENT); } return true; }
@org.junit.Test public void vmNotHavingPassthroughVnicsValid() { vmNotHavingPassthroughVnicsCommon(vm.getId(), 0, 2); assertThatVmNotHavingPassthroughVnics(true); }

@org.junit.Test public void canDoActionSameSourceAndDest() throws java.lang.Exception { createParameters(srcStorageId, srcStorageId); org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); initDiskImage(diskImageGroupId, diskImageId); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_SOURCE_AND_TARGET_SAME.name())); }
public static boolean isImagesExists(java.lang.Iterable<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images, org.ovirt.engine.core.compat.Guid storagePoolId) { return org.ovirt.engine.core.bll.ImagesHandler.isImagesExists(images, storagePoolId, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.DiskImage>()); }


java.util.List<org.ovirt.engine.core.common.businessentities.bookmarks> getAll();

@org.junit.Test public void onTimerFullConfig() { org.ovirt.engine.core.common.config.Config.<java.util.Map<java.lang.String, java.lang.String>>GetValue(ConfigValues.AutoRecoveryAllowedTypes).put("storage domains", java.lang.Boolean.TRUE.toString()); org.ovirt.engine.core.common.config.Config.<java.util.Map<java.lang.String, java.lang.String>>GetValue(ConfigValues.AutoRecoveryAllowedTypes).put("hosts", java.lang.Boolean.TRUE.toString()); manager.onTimer(); verify(backendMock, times(vdss.size())).runInternalAction(eq(VdcActionType.ActivateVds), any(org.ovirt.engine.core.common.action.VdcActionParametersBase.class)); verify(backendMock, times(storageDomains.size())).runInternalAction(eq(VdcActionType.ActivateStorageDomain), any(org.ovirt.engine.core.common.action.VdcActionParametersBase.class)); }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainStatic> filterAttachedStorageDomains() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainStatic> storageDomainStaticList = new java.util.ArrayList<>(); if ((org.ovirt.engine.core.bll.storage.GetFileStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageDomainList()) != null) { storageDomainStaticList = getAttachedStorageDomains(org.ovirt.engine.core.bll.storage.GetFileStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageDomainList()); } else if ((org.ovirt.engine.core.bll.storage.GetFileStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageServerConnection()) != null) { storageDomainStaticList = getStorageDomainsByStorageServerConnections(org.ovirt.engine.core.bll.storage.GetFileStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageServerConnection()); } return storageDomainStaticList; }
public java.util.Map createStorageDomain(java.lang.Integer storageType, java.lang.String sdUUID, java.lang.String domainName, java.lang.String typeSpecificArg, java.lang.Integer domClass, java.lang.String storageFormatType) { log.info("Storage domain sdUUID: {}, name: {} created.", sdUUID, domainName); org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(sdUUID); storageDomain.setName(domainName); storageDomain.setConnection(typeSpecificArg); storageDomain.setDomainClass(StorageDomain.DomainClass.getByCode(domClass)); storageDomain.setStorageType(StorageDomain.StorageType.getByCode(storageType)); updateStorageDomain(storageDomain); return getOKStatus(); }

public boolean canRunVm(java.util.List<java.lang.String> messages, org.ovirt.engine.core.common.businessentities.StoragePool storagePool, java.util.List<org.ovirt.engine.core.compat.Guid> vdsBlackList, org.ovirt.engine.core.compat.Guid destVds, org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup) { if (((((((((!(validateVmProperties(vm, messages))) || (!(validate(validateBootSequence(vm, runVmParam.getBootSequence(), getVmDisks()), messages)))) || (!(validate(new org.ovirt.engine.core.bll.validator.VmValidator(vm).vmNotLocked(), messages)))) || (!(validate(getSnapshotValidator().vmNotDuringSnapshot(vm.getId()), messages)))) || (!(validate(validateVmStatusUsingMatrix(vm), messages)))) || (!(validate(validateIsoPath(vm, runVmParam.getDiskPath(), runVmParam.getFloppyPath()), messages)))) || (!(validate(vmDuringInitialization(vm), messages)))) || (!(validate(validateVdsStatus(vm), messages)))) || (!(validate(validateStatelessVm(vm, getVmDisks(), runVmParam.getRunAsStateless()), messages)))) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> images = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks(getVmDisks(), true, false); if ((!(images.isEmpty())) && (((!(validate(validateStoragePoolUp(vm, storagePool), messages))) || (!(validate(validateStorageDomains(vm, isInternalExecution, images), messages)))) || (!(validate(validateImagesForRunVm(vm, images), messages))))) { return false; } if (!(org.ovirt.engine.core.bll.scheduling.SchedulingManager.getInstance().canSchedule(vdsGroup, vm, vdsBlackList, null, destVds, messages))) { return false; } return true; }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.VM.class, to = org.ovirt.engine.api.model.VmPool.class) public static org.ovirt.engine.api.model.VmPool map(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.api.model.VmPool template) { org.ovirt.engine.api.model.VmPool model = (template != null) ? template : new org.ovirt.engine.api.model.VmPool(); org.ovirt.engine.api.model.VM vmModel = org.ovirt.engine.api.restapi.types.VmMapper.map(vm, ((org.ovirt.engine.api.model.VM) (null))); vmModel.setCluster(null); vmModel.setTemplate(null); vmModel.setVmPool(null); model.setVm(vmModel); return model; }
@org.junit.Test public void checkCidrNetworkAddressValidation() { runSetup(org.ovirt.engine.core.common.validation.CidrConstraintTest.TEST_CIDR, true, false, VdcBllMessages.CIDR_NOT_NETWORK_ADDRESS.name()); runVerify(org.ovirt.engine.core.common.validation.CidrConstraintTest.TEST_CIDR, VdcBllMessages.CIDR_NOT_NETWORK_ADDRESS.name()); }
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.profiles.ProfileBaseModel<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile, org.ovirt.engine.core.common.businessentities.qos.StorageQos, org.ovirt.engine.core.common.businessentities.StorageDomain> getEditProfileModel() { return new org.ovirt.engine.ui.uicommonweb.models.profiles.EditDiskProfileModel(this, ((org.ovirt.engine.core.common.businessentities.profiles.DiskProfile) (getSelectedItem())), getStoragePoolId()); }
protected void updateQuery(final javax.persistence.Query query) { query.executeUpdate(); }



public org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal getTotalCpuMemCount() throws java.sql.SQLException { org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal result = new org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal(); try (java.sql.Connection con = dwhDataSource.getConnection();java.sql.PreparedStatement totalPS = con.prepareStatement(hostProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.TOTAL_CPU_MEMORY_COUNT));java.sql.ResultSet totalRS = totalPS.executeQuery()) { while (totalRS.next()) { result.setCpuTotal(totalRS.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.CPU_TOTAL)); result.setMemTotal(totalRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO.MEM_TOTAL)); } } return result; }
@org.junit.Test public void PctThresholdMoreThan100() { org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings settings = new org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings(); settings.diskSpaceFree = 10; settings.diskSpaceUsed = 0; settings.spaceThresholdGB = 5; settings.spaceThresholdPct = 110; org.ovirt.engine.core.common.businessentities.storage_domains domain = setupForSpaceTest(settings); assertFalse(org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.isBelowThresholds(domain)); }

private void generateRequestImplementation(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Name name = method.getName(); java.lang.String request = getRequestName(method); java.lang.String requestImpl = getRequestImplName(method); buffer.addLine("private class %1$s implements %2$s {", requestImpl, request); method.parameters().filter(Parameter::isIn).sorted().forEach(this::generateRequestParameterImplementation); buffer.addLine("public %1$s send() {", getResponseName(method)); if (org.ovirt.sdk.java.ServicesImplGenerator.ADD.equals(name)) { generateAddRequestImplementation(method); } else if ((org.ovirt.sdk.java.ServicesImplGenerator.GET.equals(name)) || (org.ovirt.sdk.java.ServicesImplGenerator.LIST.equals(name))) { generateListRequestImplementation(method); } else if (org.ovirt.sdk.java.ServicesImplGenerator.REMOVE.equals(name)) { generateRemoveRequestImplementation(method); } else if (org.ovirt.sdk.java.ServicesImplGenerator.UPDATE.equals(name)) { generateUpdateRequestImplementation(method); } else { generateActionRequestImplementation(method); } buffer.addLine("}"); buffer.addLine(); buffer.addLine("}"); buffer.addLine(); }


@org.junit.Test public void testAddGroupPermission() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUpCreationExpectations(VdcActionType.AddPermission, org.ovirt.engine.core.common.action.PermissionsOperationsParameters.class, new java.lang.String[]{ "Group.Id", "Permission.ad_element_id", "Permission.ObjectId", "Permission.role_id" }, new java.lang.Object[]{ GUIDS[1], GUIDS[1], targetId, GUIDS[3] }, true, true, GUIDS[0], VdcQueryType.GetPermissionById, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[0] }, getEntity(0)); org.ovirt.engine.api.model.Permission model = new org.ovirt.engine.api.model.Permission(); model.setRole(new org.ovirt.engine.api.model.Role()); model.getRole().setId(GUIDS[3].toString()); model.setGroup(new org.ovirt.engine.api.model.Group()); model.getGroup().setId(GUIDS[1].toString()); javax.ws.rs.core.Response response = collection.add(model); assertEquals(201, response.getStatus()); assertTrue(((response.getEntity()) instanceof org.ovirt.engine.api.model.Permission)); verifyModel(((org.ovirt.engine.api.model.Permission) (response.getEntity())), 0); }

private org.ovirt.engine.core.bll.network.host.SetupNetworksHelper createHelper(org.ovirt.engine.core.common.action.SetupNetworksParameters params) { org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = spy(new org.ovirt.engine.core.bll.network.host.SetupNetworksHelper(params, org.ovirt.engine.core.compat.Guid.Empty)); when(helper.getVmInterfaceManager()).thenReturn(vmInterfaceManager); org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacade = mock(org.ovirt.engine.core.dal.dbbroker.DbFacade.class); doReturn(dbFacade).when(helper).getDbFacade(); doReturn(interfaceDAO).when(dbFacade).getInterfaceDao(); doReturn(mock(org.ovirt.engine.core.dao.VdsDAO.class)).when(dbFacade).getVdsDao(); doReturn(networkDAO).when(dbFacade).getNetworkDao(); return helper; }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand.getParameters().getVdsId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VDS, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
@java.lang.Override public java.lang.Void runInTransaction() { for (org.ovirt.engine.core.common.businessentities.DiskImage disk : disks) { org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters p = new org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters(containerID, disk.getId(), disk.getImageId(), getParameters().getStorageDomainId(), getMoveOrCopyImageOperation()); p.setParentCommand(getActionType()); p.setEntityId(getParameters().getEntityId()); p.setAddImageDomainMapping(((getMoveOrCopyImageOperation()) == (org.ovirt.engine.core.common.businessentities.ImageOperation.Copy))); p.setSourceDomainId(imageFromSourceDomainMap.get(disk.getId()).getStorageIds().get(0)); p.setParentParameters(getParameters()); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcRetValue = getBackend().runInternalAction(VdcActionType.MoveOrCopyImageGroup, p, org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks(getExecutionContext())); getReturnValue().getVdsmTaskIdList().addAll(vdcRetValue.getInternalVdsmTaskIdList()); } return null; }
@java.lang.Override public javax.ws.rs.core.Response deactivate(org.ovirt.engine.api.model.Action action) { return doAction(ActionType.DeactivateStorageDomainWithOvfUpdate, new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase(guid, dataCenterId), action); }
@org.junit.Test public void canDoActionFailsOnNullHookId() { cmd = spy(new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand<org.ovirt.engine.core.common.action.gluster.GlusterHookParameters>(new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters(null))); setupMocks(cmd); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED.toString())); }


void addMenuItem(int index, java.lang.String label, java.lang.String href);
@java.lang.Override public org.ovirt.engine.core.common.businessentities.AsyncTask getByVdsmTaskId(org.ovirt.engine.core.compat.Guid vdsmTaskId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vdsm_task_id", vdsmTaskId); return getCallsHandler().executeRead("GetAsyncTasksByVdsmTaskId", org.ovirt.engine.core.dao.AsyncTaskDAODbFacadeImpl.AsyncTaskRowMapper.instance, parameterSource); }


@java.lang.Override public javax.ws.rs.core.Response undelete(org.ovirt.engine.api.model.Action action) { return performAction(VdcActionType.ClearAllDismissedAuditLogs, new org.ovirt.engine.core.common.action.VdcActionParametersBase(), action, false); }

@org.junit.Test public void testHandleActionResult() { org.ovirt.engine.core.common.action.VdcActionParametersBase testParameters = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnValue.setCanDoAction(false); frontend.handleActionResult(VdcActionType.AddDisk, testParameters, returnValue, mockActionCallback, testState, false); verify(mockActionCallback).executed(callbackParam.capture()); assertEquals("Parameters should match", testParameters, callbackParam.getValue().getParameters()); assertEquals("Result should match", returnValue, callbackParam.getValue().getReturnValue()); assertEquals("States should match", testState, callbackParam.getValue().getState()); assertEquals("Action type should match", VdcActionType.AddDisk, callbackParam.getValue().getActionType()); }
@org.junit.Test public void diskImagesOnAnyApplicableDomainsValidDomains() { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Set<org.ovirt.engine.core.compat.Guid>> validDomainsForDisk = createDiskValidDomainsMap(disk1, disk2); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomainMap = createStorageDomainsMap(disk1, disk2); assertThat(validator.diskImagesOnAnyApplicableDomains(validDomainsForDisk, storageDomainMap, VdcBllMessages.ACTION_TYPE_FAILED_NO_VALID_DOMAINS_STATUS_FOR_TEMPLATE_DISKS, java.util.EnumSet.of(StorageDomainStatus.Active)), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
public static void store(org.ovirt.vdsmfake.domain.BaseObject baseObject, java.io.File f) { java.io.ObjectOutputStream oos = null; try { oos = new java.io.ObjectOutputStream(new java.io.FileOutputStream(f)); oos.writeObject(baseObject); } catch (java.lang.Exception e) { org.ovirt.vdsmfake.PersistUtils.log.error("Cannot save object", e); throw new java.lang.RuntimeException("Cannot save object", e); } finally { org.apache.commons.io.IOUtils.closeQuietly(oos); baseObject.setLastUpdate(f.lastModified()); } }
private void initLoadBalance() { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> balancePolicyUnits = getBalancePolicyUnits(policyUnits); getLoadBalanceList().setItems(balancePolicyUnits); if ((clusterPolicy.getBalance()) != null) { currentLoadBalance = policyUnitsMap.get(clusterPolicy.getBalance()); } else { currentLoadBalance = policyUnitsMap.get(org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.NewClusterPolicyModel.NONE_POLICY_UNIT); } getLoadBalanceList().setIsChangable((!(clusterPolicy.isLocked()))); getLoadBalanceList().setSelectedItem(currentLoadBalance); getLoadBalanceList().getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { refreshCustomProperties(currentLoadBalance, false); currentLoadBalance = ((org.ovirt.engine.core.common.scheduling.PolicyUnit) (getLoadBalanceList().getSelectedItem())); } }); }

public static void GetWANDisableEffects(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects>(); } java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects> res = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects>(); java.lang.String fromDb = ((java.lang.String) (source)); for (java.lang.String value : fromDb.split(",")) { if (value == null) { continue; } java.lang.String trimmedValue = value.trim(); if ("".equals(trimmedValue)) { continue; } res.add(org.ovirt.engine.ui.uicommonweb.models.vms.WANDisableEffects.fromString(trimmedValue)); } return res; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.WANDisableEffects, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }
public int getPort() { return this.mVdsStatic.getPort(); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__CREATE); addCanDoActionMessage(EngineMessage.VAR__TYPE__GLUSTER_VOLUME); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getExportCommand())) { export(); } else if ("Cancel".equals(command.getName())) { cancel(); } else if ("OnExport".equals(command.getName())) { onExport(); } else if ("OnSave".equals(command.getName())) { onSave(); } else if ("OnRemove".equals(command.getName())) { onRemove(); } else if ("OnExportNoTemplates".equals(command.getName())) { doExport(); } else if ("CancelConfirmation".equals(command.getName())) { cancelConfirmation(); } }
@org.junit.Test public void testGetAllRolesForUserAndGroupByAdElement() { java.util.List<org.ovirt.engine.core.common.businessentities.roles> result = dao.getAllForAdElement(org.ovirt.engine.core.dao.RoleDAOTest.USER_ID); assertNotNull(result); assertFalse(result.isEmpty()); }
public org.ovirt.engine.core.common.businessentities.AsyncTasks createAsyncTask(org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { org.ovirt.engine.core.common.action.VdcActionParametersBase parentParameters = command.getParentParameters(parentCommand); if (VdcActionType.Unknown.equals(command.getParameters().getCommandType())) { command.getParameters().setCommandType(command.getActionType()); } org.ovirt.engine.core.common.businessentities.AsyncTasks asyncTask = new org.ovirt.engine.core.common.businessentities.AsyncTasks(parentCommand, org.ovirt.engine.core.common.businessentities.AsyncTaskResultEnum.success, org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.running, asyncTaskCreationInfo.getVdsmTaskId(), parentParameters, command.getParameters(), asyncTaskCreationInfo.getStepId(), command.getCommandId(), ((command.getParameters().getParentParameters()) == null ? org.ovirt.engine.core.compat.Guid.Empty : command.getParameters().getParentParameters().getCommandId()), asyncTaskCreationInfo.getStoragePoolID(), asyncTaskCreationInfo.getTaskType(), command.getCommandStatus()); return asyncTask; }
@org.junit.Test public void vmNotHavingPassthroughVnicsMulitpleVmsNotValid() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = initValidatorWithMultipleVms(3); vmNotHavingPassthroughVnicsCommon(vmList.get(0).getId(), 0, 2); vmNotHavingPassthroughVnicsCommon(vmList.get(1).getId(), 3, 8); vmNotHavingPassthroughVnicsCommon(vmList.get(2).getId(), 0, 4); assertThat(validator.vmNotHavingPassthroughVnics(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED)); }
public static <TSource> java.lang.Iterable<TSource> Where(java.lang.Iterable<TSource> source, org.ovirt.engine.ui.uicommonweb.Linq.IPredicate<TSource> predicate) { java.util.ArrayList<TSource> list = new java.util.ArrayList<TSource>(); for (TSource item : source) { if (predicate.Match(item)) { list.add(item); } } return list; }
void attachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().add(alertPanel); com.google.gwt.dom.client.Element messageDivElement = alertPanel.getMessageAt(0).getElement(); if (org.ovirt.engine.ui.common.utils.ElementUtils.detectOverflowUsingScrollWidth(messageDivElement)) { com.google.gwt.safehtml.shared.SafeHtml tooltipContent = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(messageDivElement.getInnerText()); org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltipContent, alertPanel.getElement(), Placement.BOTTOM); } }
private void vmInitLoaded(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.UserPortalExistingVmModelBehavior(vm)); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editVmTitle()); model.setHelpTag(HelpTag.edit_vm); model.setHashName("edit_vm"); model.getVmType().setSelectedItem(vm.getVmType()); model.setCustomPropertiesKeysList(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getCustomPropertiesList()); model.setIsAdvancedModeLocalStorageKey("up_vm_dialog"); setWindow(model); model.initialize(null); org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand switchModeCommand = new org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand(); switchModeCommand.init(model); model.getCommands().add(switchModeCommand); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSave", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
private org.ovirt.engine.core.bll.context.CommandContext buildCommandContext(org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getJobId()))) { executionContext.setJob(jobRepository.getJobWithSteps(cmdEntity.getJobId())); } else if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getStepId()))) { executionContext.setStep(jobRepository.getStep(cmdEntity.getStepId())); } return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext); }
@java.lang.Override public void onResponse(java.util.Map<java.lang.String, java.lang.Object> response) { try { processRefreshVdsStatsResponse(((org.ovirt.engine.core.common.vdscommands.VDSReturnValue) (response.get("result")))); refreshVdsRunTimeInfo(true); } catch (java.lang.Throwable t) { onFailure(t); } }
public void setIsMyGroupsSelected(boolean value) { if ((isMyGroupsSelected) != value) { isMyGroupsSelected = value; onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("IsMyGroupsSelected")); } }

@java.lang.Override protected boolean canDoAction() { if (((getParameters()) == null) || ((getParameters().getQuotaId()) == null)) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } org.ovirt.engine.core.common.businessentities.Quota quota = getQuota(); if (quota == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } if (getQuotaDAO().isQuotaInUse(quota)) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_IN_USE_BY_VM_OR_DISK); return false; } return true; }
@java.lang.Override protected void readGeneralData(org.ovirt.engine.core.compat.backendcompat.XmlNode content) { org.ovirt.engine.core.compat.backendcompat.XmlNode node = content.SelectSingleNode("Name"); if (node != null) { _vmTemplate.setname(node.InnerText); name = _vmTemplate.getname(); } node = content.SelectSingleNode("TemplateId"); if (node != null) { if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(node.InnerText))) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(node.InnerText)); } } node = content.SelectSingleNode("default_display_type"); if (node != null) { if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(node.InnerText))) { _vmTemplate.setdefault_display_type(org.ovirt.engine.core.common.businessentities.DisplayType.forValue(java.lang.Integer.parseInt(node.InnerText))); } } }
private void warnIfNotAllDisksPermitSnapshots() { for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.RunVmCommand.getVm().getDiskMap().values()) { if (!(disk.isAllowSnapshot())) { auditLogDirector.log(this, AuditLogType.USER_RUN_VM_AS_STATELESS_WITH_DISKS_NOT_ALLOWING_SNAPSHOT); break; } } }
public void runQuery(org.ovirt.engine.core.compat.Guid guid) { startProgress("getCount"); org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.setHandleFailure(true); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { stopProgress(); org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel errataCountModel = ((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel) (model)); org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValueObject = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); org.ovirt.engine.core.common.businessentities.ErrataCounts resultEntity = returnValueObject.getReturnValue(); errataCountModel.setMessage(null); if ((resultEntity != null) && (returnValueObject.getSucceeded())) { errataCountModel.setErrataCounts(resultEntity); } else { errataCountModel.setMessage((((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel.constants.katelloProblemRetrievingErrata()) + " ") + (returnValueObject.getExceptionMessage()))); } } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(getQueryType(), new org.ovirt.engine.core.common.queries.GetErrataCountsParameters(guid), _asyncQuery); }

@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.numa.vm.AbstractVmNumaNodeCommand.getVm()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } return validate(org.ovirt.engine.core.bll.numa.vm.NumaValidator.checkVmNumaNodesIntegrity(org.ovirt.engine.core.bll.numa.vm.AbstractVmNumaNodeCommand.getVm(), getVmNumaNodesForValidation())); }
private boolean refreshRepos(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.ImageFileType imageType, boolean forceRefresh) { boolean res = true; java.util.List<org.ovirt.engine.core.common.businessentities.RepoImage> tempProblematicRepoFileList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoImage>(); if (forceRefresh) { if (refreshIsoDomain(storageDomainId, tempProblematicRepoFileList, imageType)) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.handleErrorLog(tempProblematicRepoFileList); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(storageDomainId); org.ovirt.engine.core.bll.IsoDomainListSyncronizer.addToAuditLogSuccessMessage(storageDomain.getStorageName(), imageType.name()); } else { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.handleErrorLog(tempProblematicRepoFileList); res = false; } } return res; }
public java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> getUserRequestForStorageDomainRepoFileList(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, boolean forceRefresh) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> repoList = null; if (!(isStorageDomainValid(storageDomainId, imageType, forceRefresh))) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.GetIsoListError); } repoList = getCachedIsoListByDomainId(storageDomainId, imageType); return repoList; }


private org.ovirt.engine.core.bll.job.ExecutionContext createMigrateVmContext(org.ovirt.engine.core.bll.job.ExecutionContext parentContext, org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.bll.job.ExecutionContext ctx = new org.ovirt.engine.core.bll.job.ExecutionContext(); try { java.util.Map<java.lang.String, java.lang.String> values = new java.util.HashMap<java.lang.String, java.lang.String>(); values.put(VdcObjectType.VM.name().toLowerCase(), vm.getVmName()); values.put(VdcObjectType.VDS.name().toLowerCase(), vm.getRunOnVdsName()); org.ovirt.engine.core.common.job.Step step = org.ovirt.engine.core.bll.job.ExecutionHandler.addSubStep(org.ovirt.engine.core.bll.MaintananceVdsCommand.getExecutionContext(), parentContext.getJob().getStep(StepEnum.EXECUTING), StepEnum.MIGRATE_VM, org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage(StepEnum.MIGRATE_VM, values)); ctx.setStep(step); ctx.setMonitored(true); } catch (java.lang.RuntimeException e) { log.error("Failed to create ExecutionContext for MigrateVmCommand", e); } return ctx; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM); }
private void copyTemplatePermissions(org.ovirt.engine.core.bll.UniquePermissionsSet permissionsToAdd) { org.ovirt.engine.core.dao.PermissionDAO dao = org.ovirt.engine.core.bll.AddVmCommand.getDbFacade().getPermissionDao(); java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> templatePermissions = dao.getAllForEntity(org.ovirt.engine.core.bll.AddVmCommand.getVmTemplateId(), org.ovirt.engine.core.bll.AddVmCommand.getCurrentUser().getId(), false); for (org.ovirt.engine.core.common.businessentities.Permissions templatePermission : templatePermissions) { boolean templateOwnerRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_OWNER.getId()); boolean templateUserRole = templatePermission.getrole_id().equals(PredefinedRoles.TEMPLATE_USER.getId()); if (templateOwnerRole || templateUserRole) { continue; } permissionsToAdd.addPermission(templatePermission.getad_element_id(), templatePermission.getrole_id(), org.ovirt.engine.core.bll.AddVmCommand.getVmId(), VdcObjectType.VM); } }

@java.lang.Override public void updateReportsPanel(java.lang.String url, java.util.Map<java.lang.String, java.util.List<java.lang.String>> params) { reportPostableFrame.setUrl(url); reportPostableFrame.removeOldParams(); for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> entry : params.entrySet()) { for (java.lang.String param : entry.getValue()) { reportPostableFrame.addParameter(entry.getKey(), param); } } reportPostableFrame.post(); }


@org.junit.Test public void testLocalDcAndMatchingCompatiblityVersion() { storagePool.setcompatibility_version(Version.v3_0); storagePool.setStorageType(StorageType.LOCALFS); assertTrue(validator.isPosixDcAndMatchingCompatiblityVersion().isValid()); }

protected void setDefaultSwitchTypeIfNeeded() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster(); if ((cluster.getRequiredSwitchTypeForCluster()) == null) { org.ovirt.engine.core.common.network.SwitchType defaultSwitchType = org.ovirt.engine.core.common.network.DefaultSwitchType.getDefaultSwitchType(cluster.getCompatibilityVersion()); cluster.setRequiredSwitchTypeForCluster(defaultSwitchType); } }


private java.lang.String createSpiceInvocationInfo() { return new org.ovirt.engine.ui.common.view.popup.ConsolePopupView.KeyValueHtmlRowMaker(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.auto(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeAuto()).append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.nativeClient(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.consoleInvokeNative()).append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.browserPlugin(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokePlugin()).append(org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceHtml5(), org.ovirt.engine.ui.common.view.popup.ConsolePopupView.constants.spiceInvokeHtml5()).toString(); }
public static boolean isSpecialDevice(java.lang.String device, java.lang.String type) { return ((((VmDeviceType.SOUND.getName().equals(type)) || (VmDeviceType.USB.getName().equals(device))) || ((VmDeviceType.SMARTCARD.getName().equals(device)) && (VmDeviceType.SMARTCARD.getName().equals(type)))) || ((VmDeviceType.SPICEVMC.getName().equals(device)) && (VmDeviceType.REDIR.getName().equals(type)))) || ((VmDeviceType.MEMBALLOON.getName().equals(device)) && (VmDeviceType.BALLOON.getName().equals(type))); }
protected java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> getAllImageSnapshots(org.ovirt.engine.core.common.businessentities.DiskImage diskImage) { return org.ovirt.engine.core.bll.ImagesHandler.getAllImageSnapshots(diskImage.getImageId(), diskImage.getit_guid()); }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Import") java.lang.String importNetworksButton();
@org.junit.Test public void testFenceStatus() throws java.lang.Exception { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); retVal.setSucceeded(true); retVal.setReturnValue(new org.ovirt.engine.core.common.businessentities.FenceStatusReturnValue("on", "")); setUpEntityQueryExpectations(VdcQueryType.GetVdsFenceStatus, org.ovirt.engine.core.common.queries.VdsIdParametersBase.class, new java.lang.String[]{ "VdsId" }, new java.lang.Object[]{ GUIDS[0] }, retVal); control.replay(); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setFenceType(FenceType.STATUS.value()); verifyActionResponse(resource.fence(action)); org.ovirt.engine.api.model.PowerManagementStatus status = org.ovirt.engine.api.model.PowerManagementStatus.fromValue(action.getPowerManagement().getStatus().getState()); assertTrue(status.equals(PowerManagementStatus.ON)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean isAutoAssign = object.getIsAutoAssign().getEntity(); defaultHostEditor.setEnabled((!isAutoAssign)); specificHost.setValue((!isAutoAssign)); }
@java.lang.Override protected void buildSysprepVmPayload(java.lang.String strSysPrepContent) { byte[] binarySysPrep = org.ovirt.engine.core.utils.StringUtils.charsetDecodeStringUTF8(strSysPrepContent); createInfo.add(VdsProperties.sysprepInf, binarySysPrep); }

private org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters createSetupNetworksParameters(int timeout) { org.ovirt.engine.core.common.network.SwitchType clusterSwitchType = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getCluster().getRequiredSwitchTypeForCluster(); final org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters hostCmdParams = new org.ovirt.engine.core.common.vdscommands.HostSetupNetworksVdsCommandParameters(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds(), getNetworksToConfigure(), getAllNetworksToRemove(), org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getCreateOrUpdateBonds(), getRemovedBondNames(), clusterSwitchType); hostCmdParams.setRollbackOnFailure(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().rollbackOnFailure()); hostCmdParams.setConnectivityTimeout(timeout); hostCmdParams.setManagementNetworkChanged(isManagementNetworkChanged()); return hostCmdParams; }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Group group) { validateParameters(group, "name"); if (!(isNameContainsDomain(group))) { validateParameters(group, "domain.id|name"); } java.lang.String directoryName = getDirectoryName(group); org.ovirt.engine.core.aaa.DirectoryGroup directoryGroup = findDirectoryGroup(directoryName, group); if (directoryGroup == null) { return javax.ws.rs.core.Response.status(Status.BAD_REQUEST).entity(((("No such group: " + (group.getName())) + " in directory ") + directoryName)).build(); } org.ovirt.engine.core.common.action.AddGroupParameters parameters = new org.ovirt.engine.core.common.action.AddGroupParameters(); parameters.setGroupToAdd(new org.ovirt.engine.core.common.businessentities.aaa.DbGroup(directoryGroup)); org.ovirt.engine.api.restapi.resource.aaa.QueryIdResolver<org.ovirt.engine.core.compat.Guid> resolver = new org.ovirt.engine.api.restapi.resource.aaa.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetDbGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class); return performCreate(VdcActionType.AddGroup, parameters, resolver, org.ovirt.engine.api.model.BaseResource.class); }

public static org.ovirt.engine.core.bll.ValidationResult validateIconId(org.ovirt.engine.core.compat.Guid iconId, java.lang.String nameForErrorMessage) { if (org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmIconDao().exists(iconId)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ICON_OF_PROVIDED_ID_DOES_NOT_EXIST, ("$iconName " + nameForErrorMessage)); }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); if (!(super.canDoAction())) { return false; } if (!(validate(getBrickValidator().canStopOrCommitRemoveBrick(volume, getParameters().getBricks())))) { return false; } if ((!(getGlusterTaskUtils().isTaskOfType(volume, GlusterTaskType.REMOVE_BRICK))) || (!(getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.FINISHED)))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REMOVE_BRICKS_NOT_FINISHED); } return true; }
@org.junit.Test public void testCDAVdsSPMPrioritySetToNever() { vds.setVdsSpmPriority(BusinessEntitiesDefinitions.HOST_MIN_SPM_PRIORITY); assertFalse("canDoAction did not fail on a VDS that is set to never be elected as SPM", command.canDoAction()); org.ovirt.engine.core.bll.CommandAssertUtils.checkMessagesContains(command, VdcBllMessages.CANNOT_FORCE_SELECT_SPM_VDS_MARKED_AS_NEVER_SPM); }
public void connectStoragePool() { java.util.Map<java.lang.String, java.lang.String> storageDomains = null; storageDomains = org.ovirt.engine.core.vdsbroker.storage.StoragePoolDomainHelper.buildStoragePoolDomainsMap(ConnectStoragePoolVDSCommand.getParameters().getStorageDomains()); status = ConnectStoragePoolVDSCommand.getBroker().connectStoragePool(ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), ConnectStoragePoolVDSCommand.getParameters().getVds().getVdsSpmId(), ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), ConnectStoragePoolVDSCommand.getParameters().getMasterDomainId().toString(), ConnectStoragePoolVDSCommand.getParameters().getStoragePool().getMasterDomainVersion(), storageDomains); }


public static void GetDiskList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(); } }; org.ovirt.engine.core.common.queries.SearchParameters searchParams = new org.ovirt.engine.core.common.queries.SearchParameters("Disks:", org.ovirt.engine.core.common.interfaces.SearchType.Disk); searchParams.setMaxCount(9999); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.Search, searchParams, aQuery); }
public boolean validate() { boolean res = true; for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : getItems()) { java.lang.String label = labelModel.getSelectedItem(); java.lang.String usingIface = labelToIface.get(label); if ((usingIface != null) && (!(containedIfaces.contains(usingIface)))) { labelModel.getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().labelInUse(label, usingIface)); labelModel.setIsValid(false); res = false; } } return res; }

public java.util.List<java.lang.String> getVirtioScsiControllersForEntity(org.ovirt.engine.core.compat.Guid id) { return getEntity(java.util.List.class, VdcQueryType.GetVirtioScsiControllers, new org.ovirt.engine.core.common.queries.IdQueryParameters(id), "GetVirtioScsiControllers", true); }
public void setvm_guid(org.ovirt.engine.core.compat.Guid value) { this.vmId = value; }

@java.lang.Override protected boolean canDoAction() { return (((super.canDoAction()) && (vdsGroupExists())) && (changesAreClusterCompatible())) && (logicalNetworkExists()); }
@org.junit.Test public void testDeactivate() throws java.lang.Exception { setUriInfo(setUpActionExpectations(VdcActionType.DeactivateStorageDomain, org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase.class, new java.lang.String[]{ "StorageDomainId", "StoragePoolId" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.STORAGE_DOMAIN_ID, org.ovirt.engine.api.restapi.resource.BackendAttachedStorageDomainResourceTest.DATA_CENTER_ID })); verifyActionResponse(resource.deactivate(new org.ovirt.engine.api.model.Action())); }


private boolean checkInstanceTypeImagePermissions(org.ovirt.engine.core.compat.Guid id) { java.util.Collection<java.lang.String> createInstanceMessages = new java.util.ArrayList<>(); java.util.Collection<java.lang.String> actionGroupMessages = new java.util.ArrayList<>(); org.ovirt.engine.core.bll.utils.PermissionSubject createInstanceSubject = new org.ovirt.engine.core.bll.utils.PermissionSubject(id, org.ovirt.engine.core.common.VdcObjectType.VmTemplate, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_INSTANCE); org.ovirt.engine.core.bll.utils.PermissionSubject actionGroupSubject = new org.ovirt.engine.core.bll.utils.PermissionSubject(id, org.ovirt.engine.core.common.VdcObjectType.VmTemplate, org.ovirt.engine.core.bll.AddVmCommand.getActionType().getActionGroup()); if ((!(checkSinglePermission(createInstanceSubject, createInstanceMessages))) && (!(checkSinglePermission(actionGroupSubject, actionGroupMessages)))) { org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages().addAll(actionGroupMessages); return false; } return true; }
@java.lang.Override protected boolean canDoAction() { clusterId = getParameters().getClusterId(); serverId = getParameters().getServerId(); serviceType = getParameters().getServiceType(); actionType = getParameters().getActionType(); if (!(org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand.manageActionDetailsMap.keySet().contains(actionType))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_INVALID_ACTION_TYPE); } if ((org.ovirt.engine.core.compat.Guid.isNullOrEmpty(clusterId)) && (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(serverId))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_CLUSTERID_AND_SERVERID_BOTH_NULL); } if ((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(clusterId))) && ((getClusterUtils().getAllUpServers(clusterId).size()) == 0)) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_NO_SERVERS_FOR_CLUSTER); } return true; }
public static java.util.Map<java.lang.String, java.lang.Object> createHotplugMemoryParamsMap(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, boolean copyAlias) { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); data.put("vmId", vmDevice.getVmId().toString()); data.put("memory", org.ovirt.engine.core.vdsbroker.architecture.MemoryUtils.createVmMemoryDeviceMap(vmDevice, copyAlias)); return data; }
protected void refreshLunsInfo(java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromVgInfo, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> lunsFromDb) { for (org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromVgInfo : lunsFromVgInfo) { org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDB = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getLunDao().get(lunFromVgInfo.getLUNId()); if (lunFromDB == null) { org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getLunDao().save(lunFromVgInfo); log.info("New LUN discovered, ID '{}'", lunFromVgInfo.getLUNId()); } else if ((lunFromDB.getDeviceSize()) != (lunFromVgInfo.getDeviceSize())) { org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getLunDao().update(lunFromVgInfo); log.info("Updated LUN device size - ID '{}', previous size {}, new size {}.", lunFromVgInfo.getLUNId(), lunFromDB.getDeviceSize(), lunFromVgInfo.getDeviceSize()); } for (org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : lunFromVgInfo.getLunConnections()) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connectionFromDb = org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageServerConnectionDao().getForIqn(connection.getIqn()); if (connectionFromDb == null) { continue; } org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap lunConnection = new org.ovirt.engine.core.common.businessentities.storage.LUNStorageServerConnectionMap(lunFromVgInfo.getLUNId(), connectionFromDb.getId()); if ((getStorageServerConnectionLunMapDao().get(lunConnection.getId())) == null) { getStorageServerConnectionLunMapDao().save(lunConnection); } } } for (org.ovirt.engine.core.common.businessentities.storage.LUNs lunFromDb : lunsFromDb) { if ((!(isDummyLun(lunFromDb))) && (!(containsLun(lunsFromVgInfo, lunFromDb)))) { org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getLunDao().remove(lunFromDb.getLUNId()); log.info("Removed LUN ID '{}'", lunFromDb.getLUNId()); } } }
private void initConfigurationProperties() throws org.ovirt.engine.core.notifier.NotificationServiceException { java.lang.String daysHistoryStr = prop.get(NotificationProperties.DAYS_TO_KEEP_HISTORY); if (org.apache.commons.lang.StringUtils.isNotEmpty(daysHistoryStr)) { try { daysToKeepHistory = java.lang.Integer.valueOf(daysHistoryStr).intValue(); if ((daysToKeepHistory) < 0) { throw new java.lang.NumberFormatException(((org.ovirt.engine.core.notifier.utils.NotificationProperties.DAYS_TO_KEEP_HISTORY) + " value should be a positive number")); } daysToKeepHistory = (daysToKeepHistory) * (-1); shouldDeleteHistory = true; } catch (java.lang.NumberFormatException e) { java.lang.String err = java.lang.String.format("Invalid format of %s: %s", NotificationProperties.DAYS_TO_KEEP_HISTORY, daysHistoryStr); org.ovirt.engine.core.notifier.NotificationService.log.error(err, e); throw new org.ovirt.engine.core.notifier.NotificationServiceException(err, e); } } initConnectivity(); initMethodMapper(); }

public static void GetMinimalVmMemSize(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 1; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.VMMinMemorySizeInMB, org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion), aQuery); }
@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, T vm) { vm.setMemSizeMb(model.getMemSize().getEntity()); vm.setNumOfSockets(model.getNumOfSockets().getSelectedItem()); vm.setCpuPerSocket(((java.lang.Integer.parseInt(model.getTotalCPUCores().getEntity())) / (model.getNumOfSockets().getSelectedItem()))); vm.setDefaultDisplayType(model.getDisplayType().getSelectedItem()); vm.setNumOfMonitors(model.getNumOfMonitors().getSelectedItem()); vm.setSmartcardEnabled(model.getIsSmartcardEnabled().getEntity()); vm.setSsoMethod(model.extractSelectedSsoMethod()); vm.setMinAllocatedMem(model.getMinAllocatedMemory().getEntity()); vm.setDefaultBootSequence(model.getBootSequence()); vm.setSingleQxlPci(model.getIsSingleQxlEnabled().getEntity()); vm.setCustomEmulatedMachine(model.getEmulatedMachine().getSelectedItem()); vm.setCustomCpuName(model.getCustomCpu().getSelectedItem()); }

@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeDelete(java.lang.String volumeName) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.delete").withParameter("volumeName", volumeName).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
private boolean isIsoFileValid(java.lang.String isoFile) { return (org.apache.commons.lang.StringUtils.isNotBlank(isoFile)) && (new java.io.File((((org.ovirt.engine.core.common.config.Config.resolveOVirtISOsRepositoryPath()) + (java.io.File.separator)) + isoFile)).exists()); }

protected java.util.List<java.lang.String> listFiles() { org.ovirt.engine.core.common.queries.GetImagesListParameters queryParams = new org.ovirt.engine.core.common.queries.GetImagesListParameters(asGuid(storageDomainId), org.ovirt.engine.core.common.businessentities.ImageFileType.ISO); queryParams.setForceRefresh(true); java.util.List<org.ovirt.engine.core.common.businessentities.RepoFileMetaData> files = getBackendCollection(org.ovirt.engine.core.common.businessentities.RepoFileMetaData.class, VdcQueryType.GetImagesList, queryParams); java.util.List<java.lang.String> fileNames = new java.util.LinkedList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.RepoFileMetaData file : files) { fileNames.add(file.getRepoImageId()); } return fileNames; }

@java.lang.Override protected void initDetailModels() { super.initDetailModels(); org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); list.add(new org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyClusterListModel()); setDetailModels(list); }
@java.lang.Override protected void ExecuteVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getBroker().glusterVolumeRebalanceStart(org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters().isFixLayoutOnly(), org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters().isForceAction()); org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.proceedProxyReturnValue(); }
protected boolean checkExistingStorageDomain() { if ((org.ovirt.engine.core.bll.storage.AddExistingFileStorageDomainCommand.getStorageDomainStaticDao().get(org.ovirt.engine.core.bll.storage.AddExistingFileStorageDomainCommand.getStorageDomain().getId())) != null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); } org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid> domainFromIrs = executeHSMGetStorageDomainInfo(new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.AddExistingFileStorageDomainCommand.getVdsId(), org.ovirt.engine.core.bll.storage.AddExistingFileStorageDomainCommand.getStorageDomain().getId())); if (domainFromIrs == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); } return concreteCheckExistingStorageDomain(domainFromIrs); }

@java.lang.Override public void init() { context.put(ExtensionProperties.AUTHOR, "The oVirt Project"); context.put(ExtensionProperties.EXTENSION_NAME, "Internal Authentication (Built-in)"); context.put(ExtensionProperties.LICENSE, "ASL 2.0"); context.put(ExtensionProperties.HOME, "http://www.ovirt.org"); context.put(ExtensionProperties.VERSION, "N/A"); }

public java.lang.String getDuration() { return java.lang.String.valueOf((((new java.util.Date().getTime()) - (org.ovirt.engine.core.bll.MigrateVmCommand.getParameters().getStartTime().getTime())) / 1000)); }
@java.lang.Override public void setValue(java.util.List<T> values, boolean fireEvents) { if (changing) { return; } for (T value : values) { if (selectedList.contains(value)) { selectedList.remove(value); } else { selectedList.add(value); } } listPanel.setSelected(selectedList); updateCurrentValue(selectedList, fireEvents); }
public void addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { org.ovirt.engine.ui.common.widget.action.ActionButton newButton = ActionPanelPresenterWidget.getView().addActionButton(buttonDef); actionButtonDefinitions.add(buttonDef); initButton(buttonDef, newButton); }
@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult parentEntityExists() { if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsGroupDao().get(getProfile().getClusterId())) == null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_CAN_NOT_BE_EMPTY); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }

private static java.lang.String buildDetailedAuditLogMessage(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { java.lang.String storageDomainName = "Repository not found"; if ((repoImage != null) && ((repoImage.getRepoDomainId()) != null)) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().get(repoImage.getRepoDomainId()); if (storageDomain != null) { storageDomainName = java.lang.String.format("%s (%s file type)", storageDomain.getStorageName(), repoImage.getFileType().name()); } } else { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.error("Repository file meta data not found for logging"); } return storageDomainName; }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Hard") java.lang.String hardEnforcingAffinity();
protected boolean CanDoAddVmCommand() { boolean returnValue = false; returnValue = areParametersLegal(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages()); returnValue = returnValue && (checkNumberOfMonitors()); returnValue = ((returnValue && (CheckPCIAndIDELimit(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getnum_of_monitors(), getVmInterfaces(), getVmDisks(), org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages()))) && (canAddVm(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages(), destStorages.values()))) && (hostToRunExist()); return returnValue; }
@org.junit.Test public void testChangeToExistingName() { prepareVmToPassCanDoAction(); mockSameNameQuery(true); assertFalse("canDoAction should have failed with vm name already in use.", command.canDoAction()); assertCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED); }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.providers.DiscoverNetworksModel object) { driver.edit(object); }

@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.network.NetworkCluster cluster) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("cluster_id", cluster.getClusterId()).addValue("network_id", cluster.getNetworkId()).addValue("status", cluster.getStatus()).addValue("is_display", cluster.isDisplay()).addValue("required", cluster.isRequired()).addValue("migration", cluster.isMigration()); getCallsHandler().executeModification("Updatenetwork_cluster", parameterSource); }
@org.junit.Test public void testMacPoolGetByDataCenterIdExist() throws java.lang.Exception { final org.ovirt.engine.core.common.businessentities.MacPool macPool = dao.getByDataCenterId(FixturesTool.STORAGE_POOL_RHEL6_ISCSI_OTHER); assertThat(macPool, notNullValue()); assertThat(macPool.getId(), is(FixturesTool.NON_DEFAULT_MAC_POOL)); }

private boolean isTaskStateError(org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue) { if (((vdsReturnValue != null) && ((vdsReturnValue.getVdsError()) != null)) && ((vdsReturnValue.getVdsError().getCode()) == (org.ovirt.engine.core.common.errors.VdcBllErrors.TaskStateError))) { org.ovirt.engine.core.bll.tasks.SPMAsyncTask.log.info(("SPMAsyncTask::ClearAsyncTask: At time of attempt to clear task '{}' the response code" + " was '{}' and message was '{}'. Task will not be cleaned"), getVdsmTaskId(), vdsReturnValue.getVdsError().getCode(), vdsReturnValue.getVdsError().getMessage()); return true; } return false; }
private boolean stopSuspendedVm() { boolean returnVal = false; org.ovirt.engine.core.bll.StopVmCommandBase.setVm(null); org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getStatus(); if ((org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked)) { updateVmStatus(VMStatus.ImageLocked); if ((org.apache.commons.lang.StringUtils.isNotEmpty(org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getHibernationVolHandle())) && (removeMemoryVolumes(org.ovirt.engine.core.bll.StopVmCommandBase.getVm().getHibernationVolHandle(), org.ovirt.engine.core.bll.StopVmCommandBase.getActionType(), false))) { returnVal = true; } else { updateVmStatus(vmStatus); } } return returnVal; }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.GetConnectionsByDataCenterAndStorageTypeQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.storage.GetConnectionsByDataCenterAndStorageTypeQuery.getDbFacade().getStorageServerConnectionDao().getConnectableStorageConnectionsByStorageType(org.ovirt.engine.core.bll.storage.GetConnectionsByDataCenterAndStorageTypeQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.GetConnectionsByDataCenterAndStorageTypeQuery.getParameters().getStorageType())); }
@java.lang.Override protected java.lang.String[] getRequiredAddFields() { return new java.lang.String[]{ "name" }; }
private void validateQosNotPartiallyConfigured() { java.util.Set<java.lang.String> someSubInterfacesHaveQos = new java.util.HashSet<>(); java.util.Set<java.lang.String> notAllSubInterfacesHaveQos = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : params.getInterfaces()) { java.lang.String networkName = iface.getNetworkName(); org.ovirt.engine.core.common.businessentities.network.Network network = getExistingClusterNetworks().get(networkName); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface baseNic = calculateBaseNic.getBaseNic(iface, existingIfaces); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = ((baseNic == null) || (network == null)) ? null : networkAttachmentDao.getNetworkAttachmentByNicIdAndNetworkId(baseNic.getId(), network.getId()); java.lang.String baseIfaceName = (baseNic == null) ? null : baseNic.getName(); if (org.ovirt.engine.core.utils.NetworkUtils.qosConfiguredOnInterface(networkAttachment, network)) { someSubInterfacesHaveQos.add(baseIfaceName); } else { notAllSubInterfacesHaveQos.add(baseIfaceName); } } for (java.lang.String ifaceName : someSubInterfacesHaveQos) { if (notAllSubInterfacesHaveQos.contains(ifaceName)) { addViolation(EngineMessage.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_INTERFACES_WITHOUT_QOS, ifaceName); } } }

private static double getLast5MinutesStorageAverage(javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO(dwhDataSource); return (dao.getLast5MinutesStorageAverage()) / 1024; }

protected boolean prepareFailureMessageForDomainsAndDisks(java.lang.String domainNames, java.lang.String diskNames) { org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.addCanDoActionMessageVariable("domainNames", domainNames); org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.addCanDoActionMessageVariable("diskNames", diskNames); return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS_AND_DISKS); }
private void OnUserAndAdGroupsLoaded(org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel adElementListModel) { if (((adElementListModel.getusers()) != null) && ((adElementListModel.getgroups()) != null)) { getSearchInProgress().setEntity(false); java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> items = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); items.addAll(getusers()); items.addAll(getgroups()); adElementListModel.getSelectAll().setEntity(false); adElementListModel.setItems(items); setusers(null); setgroups(getusers()); setIsEmpty(items.isEmpty()); } }
@com.google.inject.Provides @com.google.inject.Singleton public org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.RepoImage, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageIsoListModel> getStorageIsoListProvider(org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector) { return new org.ovirt.engine.ui.common.uicommon.model.SearchableDetailTabModelProvider<org.ovirt.engine.core.common.businessentities.RepoImage, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel, org.ovirt.engine.ui.uicommonweb.models.storage.StorageIsoListModel>(ginjector, org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel.class, org.ovirt.engine.ui.uicommonweb.models.storage.StorageIsoListModel.class); }
public static void init() { final java.lang.Class<?>[] inspectedClassNames = new java.lang.Class<?>[]{ org.ovirt.engine.core.common.businessentities.VmBase.class, org.ovirt.engine.core.common.businessentities.VmTemplate.class }; org.ovirt.engine.core.bll.VmTemplateHandler.updateVmTemplate = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.bll.VmTemplateHandler.class); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.EditableField, java.lang.reflect.Field> pair : org.ovirt.engine.core.common.backendinterfaces.BaseHandler.extractAnnotatedFields(org.ovirt.engine.core.common.businessentities.EditableField.class, inspectedClassNames)) { org.ovirt.engine.core.bll.VmTemplateHandler.updateVmTemplate.addPermittedFields(pair.getSecond().getName()); } for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.EditableOnTemplate, java.lang.reflect.Field> pair : org.ovirt.engine.core.common.backendinterfaces.BaseHandler.extractAnnotatedFields(org.ovirt.engine.core.common.businessentities.EditableOnTemplate.class, inspectedClassNames)) { org.ovirt.engine.core.bll.VmTemplateHandler.updateVmTemplate.addPermittedFields(pair.getSecond().getName()); } }
private void editConsole() { if (((getWindow()) != null) || ((getSelectedItem()) == null)) { return; } final org.ovirt.engine.ui.uicommonweb.models.VmConsoles activeVmConsoles = consoleModelsCache.getVmConsolesForEntity(getSelectedItem()); final org.ovirt.engine.ui.uicommonweb.models.ConsolePopupModel model = new org.ovirt.engine.ui.uicommonweb.models.ConsolePopupModel(); model.setVmConsoles(activeVmConsoles); model.setHelpTag(HelpTag.editConsole); model.setHashName("editConsole"); setWindow(model); final org.ovirt.engine.ui.uicommonweb.UICommand saveCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("OnEditConsoleSave", this); saveCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); saveCommand.setIsDefault(true); model.getCommands().add(saveCommand); final org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); cancelCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); cancelCommand.setIsCancel(true); model.getCommands().add(cancelCommand); }
@org.junit.Test public void subnetChanged() { org.ovirt.engine.core.common.businessentities.Network net = createNetwork("net"); mockExistingNetworks(net); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNic("nic0", net.getName()); nic.setBootProtocol(NetworkBootProtocol.StaticIp); nic.setSubnet(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); mockExistingIfaces(nic); nic.setSubnet(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForNics(nic)); validateAndAssertNetworkModified(helper, net); }

void bindInfrastructure() { bindCommonInfrastructure(org.ovirt.engine.ui.webadmin.place.WebAdminPlaceManager.class); bind(org.ovirt.engine.ui.webadmin.system.ApplicationInit.class).asEagerSingleton(); bind(org.ovirt.engine.ui.webadmin.system.InternalConfiguration.class).asEagerSingleton(); bind(org.ovirt.engine.ui.webadmin.system.PostMessageDispatcher.class).asEagerSingleton(); }
protected boolean checkExistingStorageDomain() { if ((org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getStorageDomainStaticDao().get(org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getStorageDomain().getId())) != null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); } org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid> domainFromIrs = executeHSMGetStorageDomainInfo(new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getVdsId(), org.ovirt.engine.core.bll.storage.domain.AddExistingFileStorageDomainCommand.getStorageDomain().getId())); if (domainFromIrs == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); } return concreteCheckExistingStorageDomain(domainFromIrs); }
@org.junit.Test public void testSaveNetworkQos() { org.ovirt.engine.core.common.businessentities.network.NetworkQoS qosD = new org.ovirt.engine.core.common.businessentities.network.NetworkQoS(); qosD.setId(org.ovirt.engine.core.dao.network.NetworkQosDaoTest.qosDId); qosD.setName("qos_d"); qosD.setStoragePoolId(FixturesTool.STORAGE_POOL_NFS_2); qosD.setInboundAverage(200); qosD.setInboundPeak(200); qosD.setInboundBurst(200); qosD.setOutboundAverage(200); qosD.setOutboundPeak(200); qosD.setOutboundBurst(200); dao.save(qosD); org.ovirt.engine.core.common.businessentities.network.NetworkQoS returnedD = dao.get(org.ovirt.engine.core.dao.network.NetworkQosDaoTest.qosDId); assertTrue(qosD.equals(returnedD)); }
@java.lang.Override public void update(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity) { super.update(entity); removeNameServersByDnsResolverConfigurationId(entity.getId()); saveNameServersByDnsResolverConfigurationId(entity.getId(), entity.getNameServers()); }
@org.junit.Test public void canDoActionShareableDiskOnGlusterFails() { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = org.ovirt.engine.core.bll.AddDiskCommandTest.createShareableDiskImage(); image.setvolumeFormat(VolumeFormat.RAW); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(image); org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId, parameters); mockVm(); mockStorageDomain(storageId, StorageType.GLUSTERFS, Version.v3_1); mockStoragePoolIsoMap(); mockMaxPciSlots(); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_SHAREABLE_DISKS_NOT_SUPPORTED_ON_GLUSTER_DOMAIN.toString())); }
private static javax.sql.DataSource createDataSource() { javax.sql.DataSource result = null; java.util.Properties properties = new java.util.Properties(); org.ovirt.engine.core.common.config.Config.setConfigUtils(new org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils(false)); try { java.lang.String job = java.lang.System.getProperty("JOB_NAME"); if (job == null) job = ""; java.lang.String number = java.lang.System.getProperty("BUILD_NUMBER"); if (number == null) number = ""; java.lang.String schemaNamePostfix = job + number; properties.load(org.ovirt.engine.core.dao.BaseDAOTestCase.class.getResourceAsStream("/test-database.properties")); java.lang.ClassLoader.getSystemClassLoader().loadClass(properties.getProperty("database.driver")); java.lang.String dbUrl = (properties.getProperty("database.url")) + schemaNamePostfix; result = new org.springframework.jdbc.datasource.SingleConnectionDataSource(dbUrl, properties.getProperty("database.username"), properties.getProperty("database.password"), true); org.ovirt.engine.core.dao.BaseDAOTestCase.initSql = properties.getProperty("database.initsql"); org.ovirt.engine.core.dao.BaseDAOTestCase.loadDataFactory(properties.getProperty("database.testing.datafactory")); if (((org.ovirt.engine.core.dao.BaseDAOTestCase.initSql) != null) && (!(org.ovirt.engine.core.dao.BaseDAOTestCase.initSql.isEmpty()))) { org.ovirt.engine.core.dao.BaseDAOTestCase.needInitializationSql = true; } } catch (java.lang.Exception error) { error.printStackTrace(); throw new java.lang.RuntimeException("Cannot create data source", error); } return result; }
private void reset() { currentRate = 0; repetitions = org.ovirt.engine.ui.uicommonweb.models.GridTimer.RATE.NORMAL.getRepetitions(); }
@java.lang.Override public org.ovirt.engine.api.model.Users list() { return mapDbUserCollection(getBackendCollection(SearchType.DBUser, getSearchPattern())); }





public void removeNetworkFromParameters(org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters params, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.Network net) { if (org.ovirt.engine.core.utils.NetworkUtils.isVlan(net)) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlan = getVlanDevice(params.getInterfaces(), nic, net); if (vlan == null) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.NETWORK_LABEL_CONFLICT); } else { params.getInterfaces().remove(vlan); } } else if (org.apache.commons.lang.StringUtils.equals(net.getName(), nic.getNetworkName())) { nic.setNetworkName(null); } }
public static <B, G extends B> java.util.List<B> upcast(java.util.List<G> entities) { java.util.List<B> baseEntities = new java.util.ArrayList<B>(entities.size()); for (G entity : entities) { baseEntities.add(entity); } return baseEntities; }
@org.junit.Test public void failUpdateStats() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValueUpdate = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); returnValueUpdate.setSucceeded(false); org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(); doReturn(map).when(command).getStoragePoolIsoMap(); doReturn(returnValueUpdate).when(command).getStatsForDomain(); doReturn(true).when(command).connectToStorage(); org.ovirt.engine.core.common.businessentities.StorageDomainDynamic domainDynamic = new org.ovirt.engine.core.common.businessentities.StorageDomainDynamic(); doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Locked); doNothing().when(command).changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Maintenance); doNothing().when(command).disconnectFromStorage(); command.executeCommand(); org.ovirt.engine.core.bll.CommandAssertUtils.checkSucceeded(command, false); verify(storageDomainDynamicDao, never()).update(domainDynamic); verify(storageConnDao, never()).update(newConnection); }

protected boolean isDiskPassPciAndIdeLimit(org.ovirt.engine.core.common.businessentities.Disk diskInfo) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> vmInterfaces = org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmNicDao().getAllForVm(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.Disk> allVmDisks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getDiskMap().values()); allVmDisks.add(diskInfo); return checkPciAndIdeLimit(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getNumOfMonitors(), vmInterfaces, allVmDisks, isVirtioScsiControllerAttached(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId()), org.ovirt.engine.core.bll.AbstractDiskVmCommand.getReturnValue().getCanDoActionMessages()); }
private void Edit() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel(); model.getMAC().setIsAvailable(false); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetClusterNetworkList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel vmInterfaceListModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network> network_list = (returnValue != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network>) (returnValue)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network>(); vmInterfaceListModel.PostGetClusterNetworkList_Edit(network_list); } }), getEntityStronglyTyped().getvds_group_id()); }
private java.util.ArrayList<java.lang.String> trimElements(java.lang.String... elements) { java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(elements.length); for (java.lang.String e : elements) { e = e.trim(); if ((e.length()) > 0) { list.add(e); } } return list; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAllForStorageDomain(org.ovirt.engine.core.compat.Guid storageDomainId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("storage_domain_id", storageDomainId); return getCallsHandler().executeReadList("GetAllForStorageDomain", org.ovirt.engine.core.dao.DiskImageDAODbFacadeImpl.DiskImageRowMapper.instance, parameterSource); }

void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(dynamicMessages.ovirtVersionAbout()); userNameLabel.setText(org.ovirt.engine.ui.webadmin.section.main.view.AboutPopupView.constants.userNameAboutLabel()); }
private void addSharedLockEntry(org.ovirt.engine.core.common.businessentities.VDS vds) { if ((sharedLockMap) == null) { sharedLockMap = new java.util.HashMap(); } sharedLockMap.put(vds.getStoragePoolId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.POOL, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
@org.junit.Test public void executeCommand() { cmd = spy(new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookStatusChangeParameters(CLUSTER_ID, HOOK_ID))); setupMocks(cmd); mockBackendStatusChange(cmd, true); cmd.executeCommand(); verify(cmd, atLeast(1)).addServerHookInDb(any(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerHook.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_ENABLE); }
private void processVmsWithDevicesChange() { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vdsManager.getGroupCompatibilityVersion()))) { if (!(vmsWithChangedDevices.isEmpty())) { java.util.ArrayList<java.lang.String> vmsToUpdate = new java.util.ArrayList(vmsWithChangedDevices.size()); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> pair : vmsWithChangedDevices) { org.ovirt.engine.core.compat.Guid vmId = pair.getFirst().getId(); if (vmDynamicToSave.containsKey(vmId)) { vmDynamicToSave.get(vmId).setHash(pair.getSecond().getVmDynamic().getHash()); vmsToUpdate.add(vmId.toString()); } else { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.warn("VM '{}' not in changed list, skipping devices update.", vmId); } } updateVmDevices(vmsToUpdate); } } }
protected static org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils getVmPropertiesUtils() { return org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.getInstance(); }

private void translateVolumeType(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity) { org.ovirt.engine.ui.uicompat.Translator translator = org.ovirt.engine.ui.uicompat.EnumTranslator.create(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType.class); if (translator.containsKey(volumeEntity.getVolumeType())) { getDetailModel().setVolumeTypeSilently(translator.get(volumeEntity.getVolumeType())); } }


private void onSaveConfirmCV(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model) { if (!(model.getVersion().getSelectedItem().equals(((org.ovirt.engine.core.common.businessentities.VDSGroup) (getSelectedItem())).getcompatibility_version()))) { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().changeClusterCompatibilityVersionTitle()); confirmModel.setHelpTag(HelpTag.change_cluster_compatibility_version); confirmModel.setHashName("change_cluster_compatibility_version"); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSaveConfirmCpuThreads", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); getConfirmWindow().getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); getConfirmWindow().getCommands().add(tempVar2); checkForNonResponsiveHosts(confirmModel); } else { onSaveConfirmCpuThreads(); } }
@org.junit.Test public void testNetworksUniquelyConfiguredOnHostWhenNotUniquelyConfigured() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.network.Network networkA = new org.ovirt.engine.core.common.businessentities.network.Network(); networkA.setId(id); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = createNetworkAttachment(networkA); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachmentReferencingSameNetwork = createNetworkAttachment(networkA); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = createHostSetupNetworksValidator(java.util.Collections.singletonList(networkA)); assertThat(validator.networksUniquelyConfiguredOnHost(java.util.Arrays.asList(networkAttachment, networkAttachmentReferencingSameNetwork)), failsWith(VdcBllMessages.NETWORKS_ALREADY_ATTACHED_TO_IFACES)); }
private void prestartVms(org.ovirt.engine.core.common.businessentities.VmPool vmPool, int numOfVmsToPrestart) { java.util.List<org.ovirt.engine.core.common.businessentities.VmPoolMap> vmPoolMaps = vmPoolDao.getVmMapsInVmPoolByVmPoolIdAndStatus(vmPool.getVmPoolId(), VMStatus.Down); int failedAttempts = 0; int prestartedVmsCounter = 0; final int maxFailedAttempts = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VmPoolMonitorMaxAttempts); java.util.Map<java.lang.String, java.util.Set<org.ovirt.engine.core.compat.Guid>> failureReasonsForVms = new java.util.HashMap<>(); if ((vmPoolMaps != null) && ((vmPoolMaps.size()) > 0)) { for (org.ovirt.engine.core.common.businessentities.VmPoolMap map : vmPoolMaps) { if ((failedAttempts < maxFailedAttempts) && (prestartedVmsCounter < numOfVmsToPrestart)) { java.util.List<java.lang.String> messages = new java.util.ArrayList<>(); if (prestartVm(map.getVmId(), (!(vmPool.isStateful())), vmPool.getName(), messages)) { prestartedVmsCounter++; failedAttempts = 0; } else { failedAttempts++; collectVmPrestartFailureReasons(map.getVmId(), failureReasonsForVms, messages); } } else { break; } } logResultOfPrestartVms(prestartedVmsCounter, numOfVmsToPrestart, vmPool.getVmPoolId(), failureReasonsForVms); } else { org.ovirt.engine.core.bll.VmPoolMonitor.log.info("No VMs available for prestarting"); } }
private java.lang.String getNetworkId(java.lang.String networkName, java.lang.String clusterId) { org.ovirt.engine.core.compat.NGuid dataCenterId = getEntity(org.ovirt.engine.core.common.businessentities.VDSGroup.class, VdcQueryType.GetVdsGroupById, new org.ovirt.engine.core.common.queries.GetVdsGroupByIdParameters(asGuid(clusterId)), null).getstorage_pool_id(); org.ovirt.engine.core.common.queries.GetAllNetworkQueryParamenters params = new org.ovirt.engine.core.common.queries.GetAllNetworkQueryParamenters(asGuid(dataCenterId)); java.util.List<org.ovirt.engine.core.common.businessentities.network> networks = getBackendCollection(VdcQueryType.GetAllNetworks, params); for (org.ovirt.engine.core.common.businessentities.network nw : networks) { if (nw.getname().equals(networkName)) { return nw.getId().toString(); } } return null; }




private org.ovirt.engine.core.bll.FenceProxyLocator.PMProxyOptions[] getPmProxyPreferences() { java.lang.String pmProxyPreferences = (org.apache.commons.lang.StringUtils.isEmpty(_vds.getPmProxyPreferences())) ? org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.FenceProxyDefaultPreferences) : _vds.getPmProxyPreferences(); java.lang.String[] pmProxyOptions = pmProxyPreferences.split(","); org.ovirt.engine.core.bll.FenceProxyLocator.PMProxyOptions[] proxyOptions = new org.ovirt.engine.core.bll.FenceProxyLocator.PMProxyOptions[pmProxyOptions.length]; for (int i = 0; i < (pmProxyOptions.length); i++) { proxyOptions[i] = getProxyOption(pmProxyOptions[i]); } return proxyOptions; }
@java.lang.Override public void eventRaised(org.ovirt.engine.core.compat.Event ev, java.lang.Object sender, org.ovirt.engine.core.compat.EventArgs args) { org.ovirt.engine.ui.frontend.FrontendFailureEventArgs failureArgs = ((org.ovirt.engine.ui.frontend.FrontendFailureEventArgs) (args)); if ((failureArgs.getMessage()) != null) { errorPopupManager.show(org.ovirt.engine.ui.common.uicommon.FrontendFailureEventListener.MESSAGES.uiCommonFrontendFailure(org.ovirt.engine.ui.common.uicommon.ErrorMessageFormatter.formatMessage(failureArgs.getMessage()))); } else if ((failureArgs.getMessages()) != null) { errorPopupManager.show(org.ovirt.engine.ui.common.uicommon.FrontendFailureEventListener.MESSAGES.uiCommonFrontendFailure(org.ovirt.engine.ui.common.uicommon.ErrorMessageFormatter.formatMessages(failureArgs.getMessages()))); } }
private static void markTabs(java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs, java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> mapping) { for (java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> entry : mapping.entrySet()) { if (invalidTabs.contains(entry.getKey())) { entry.getValue().markAsInvalid(null); } else { entry.getValue().markAsValid(); } } }
@java.lang.Override public void setListValue(java.util.List<T> value) { selectedList.clear(); selectedList.addAll(value); com.google.gwt.user.client.ui.ListBox listBox = org.ovirt.engine.ui.common.widget.editor.ListModelMultipleSelectListBox.asListBox(); if ((listBox.getSelectedIndex()) > (-1)) { listBox.setItemSelected(listBox.getSelectedIndex(), false); } for (T item : selectedList) { listBox.setItemSelected(itemIndex.indexOf(item), true); } }
@org.junit.Test public void canDoActionThinProvisioningSpaceCheckSucceeds() throws java.lang.Exception { final int availableSize = 6; final int usedSize = 4; org.ovirt.engine.core.compat.Guid sdid = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(sdid, VolumeType.Sparse); mockVm(); mockStorageDomain(sdid, availableSize, usedSize); mockStoragePoolIsoMap(); assertTrue(command.canDoAction()); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("OS Version -") java.lang.String osVersionAbout();


@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel object) { driver.edit(object); diskAliasLabel.asValueBox().setValue(object.getAlias().getEntity()); diskSizeLabel.asValueBox().setValue(new org.ovirt.engine.ui.common.widget.renderer.DiskSizeRenderer<java.lang.Integer>(SizeConverter.SizeUnit.GB).render(object.getSize().getEntity())); object.getVolumeType().setSelectedItem(((org.ovirt.engine.core.common.businessentities.DiskImage) (object.getDisk())).getVolumeType()); sourceStorageLabel.getElement().getElementsByTagName("input").getItem(0).getStyle().setBorderColor("transparent"); updateStyles(object.getQuota().getIsAvailable()); }
@org.junit.BeforeClass public static void beforeClass() { org.ovirt.engine.core.notifier.utils.NotificationProperties.setDefaults("src/test/resources/conf/notifier-prop-test.conf", "src/test/resources/conf/missing.conf"); org.ovirt.engine.core.notifier.utils.NotificationPropertiesTest.prop = org.ovirt.engine.core.notifier.utils.NotificationProperties.getInstance(); assertNotNull(org.ovirt.engine.core.notifier.utils.NotificationPropertiesTest.prop); }
@org.ovirt.engine.ui.uicompat.DefaultMessage("Name field is empty for host with address {0}") java.lang.String importClusterHostNameEmpty(java.lang.String address);

private org.ovirt.engine.core.common.businessentities.network.NetworkCluster getNetworkCluster() { if ((networkCluster) == null) { org.ovirt.engine.core.common.businessentities.network.NetworkClusterId networkClusterId = new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(host.getClusterId(), attachment.getNetworkId()); networkCluster = networkClusterDao.get(networkClusterId); } return networkCluster; }


@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.disk.image.RegisterDiskCommand.getParameters().getDiskImage().getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.DISK, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }



@java.lang.Override public void update(java.util.Observable o, java.lang.Object arg) { org.ovirt.engine.core.notifier.dao.DispatchData dispatch = ((org.ovirt.engine.core.notifier.dao.DispatchData) (arg)); org.ovirt.engine.core.notifier.filter.AuditLogEvent event = ((org.ovirt.engine.core.notifier.filter.AuditLogEvent) (dispatch.getEvent())); java.sql.Connection connection = null; java.sql.CallableStatement cs = null; try { connection = ds.getConnection(); cs = connection.prepareCall("{call Insertevent_notification_hist(?,?,?,?,?,?)}"); cs.setLong(1, event.getId()); cs.setString(2, event.getLogTypeName()); cs.setString(3, dispatch.getNotificationMethod().name()); cs.setString(4, dispatch.getErrorMessage()); cs.setTimestamp(5, new java.sql.Timestamp(new java.util.Date().getTime())); cs.setBoolean(6, dispatch.isSuccess()); cs.setString(7, null); cs.executeUpdate(); } catch (java.sql.SQLException e) { org.ovirt.engine.core.notifier.dao.EventsManager.log.error("Could not insert event notification history event", e); } finally { org.ovirt.engine.core.utils.db.DbUtils.closeQuietly(cs, connection); } }
@org.junit.Test public void testAddInvalidSDStatusMessageLocked() { testAddInvalidSDStatusMessage(StorageDomainStatus.Locked); }

@org.junit.Test public void testExecuteCommandFailsWithClusterIdForStart() { cmd = spy(new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand(new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters(org.ovirt.engine.core.compat.Guid.newGuid(), null, org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT, org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START))); setUpMockUpForStart(); mockBackend(false, VdcBllErrors.GlusterServicesActionFailed, GlusterServiceStatus.STOPPED); cmd.executeCommand(); verify(serverServiceDao, never()).updateByServerIdAndServiceType(any(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_SERVICE_START_FAILED); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.ExternalSubnet object) { return org.ovirt.engine.ui.uicompat.external.StringUtils.join(object.getDnsServers(), ", "); }

private void writeListenerMap() { logger.log(Type.DEBUG, "Strating to write ListenerMap"); sw.println(); sw.println("@Override"); sw.println((("protected " + (org.ovirt.engine.ui.common.editor.UiCommonListenerMap.class.getName())) + " getListenerMap() {")); sw.indent(); sw.println(((((org.ovirt.engine.ui.common.editor.UiCommonListenerMap.class.getName()) + " listenerMap = new ") + (org.ovirt.engine.ui.common.editor.UiCommonListenerMap.class.getName())) + "();")); sw.println(); logger.log(Type.DEBUG, "Looking for top-level Editor Fields"); for (com.google.gwt.editor.rebind.model.EditorData editorData : model.getEditorData()) { logger.log(Type.DEBUG, ("Going over Field: " + editorData)); java.lang.String path = editorData.getPath(); path = (java.lang.Character.toUpperCase(path.charAt(0))) + (path.substring(1, path.length())); if ((path.length()) == 0) { continue; } if (!(editorData.isDeclaredPathNested())) { logger.log(Type.DEBUG, ("Found top-level Field: " + editorData)); sw.println("listenerMap.addListener(\"%s\", \"PropertyChanged\", new org.ovirt.engine.ui.uicompat.IEventListener() {", path); sw.indent(); sw.println("@Override"); sw.println("public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) {"); sw.indent(); sw.println("getEditor().%s.setValue(getObject()%s);", editorData.getExpression(), editorData.getGetterExpression()); sw.outdent(); sw.println("}"); sw.outdent(); sw.println("});"); sw.println(); } } sw.println("return listenerMap;"); sw.outdent(); sw.println("}"); }

private org.ovirt.engine.core.common.action.VdcReturnValueBase runActionImpl(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, boolean runAsInternal, org.ovirt.engine.core.bll.context.CommandContext context) { org.ovirt.engine.core.common.action.VdcReturnValueBase result; if (((!(actionType.isActionMonitored())) && (!(isActionExternal(actionType)))) && (((parameters.getJobId()) != null) || ((parameters.getStepId()) != null))) { result = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); result.getValidationMessages().add(EngineMessage.ACTION_TYPE_NON_MONITORED.toString()); result.setValid(false); result.setSucceeded(false); } else { org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameters, context); result = runAction(command, runAsInternal); } return result; }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("vmsMonitoring") public void vmsMonitoring() { if (isMonitoringNeeded()) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = (getRefreshStatistics()) ? new org.ovirt.engine.core.vdsbroker.VmsStatisticsFetcher(this) : new org.ovirt.engine.core.vdsbroker.VmsListFetcher(this); fetcher.fetch(); new org.ovirt.engine.core.vdsbroker.VmsMonitoring(this, fetcher.getChangedVms(), fetcher.getVmsWithChangedDevices(), auditLogDirector).perform(); } }

@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.CommandEntity entity) { return getCustomMapSqlParameterSource().addValue("command_id", (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(entity.getId()) ? org.ovirt.engine.core.compat.Guid.Empty : entity.getId())).addValue("command_type", entity.getCommandType().getValue()).addValue("root_command_id", (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(entity.getRootCommandId()) ? org.ovirt.engine.core.compat.Guid.Empty : entity.getRootCommandId())).addValue("job_id", (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(entity.getJobId()) ? org.ovirt.engine.core.compat.Guid.Empty : entity.getJobId())).addValue("step_id", (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(entity.getStepId()) ? org.ovirt.engine.core.compat.Guid.Empty : entity.getStepId())).addValue("action_parameters", serializeParameters(entity.getActionParameters())).addValue("action_parameters_class", ((entity.getActionParameters()) == null ? null : entity.getActionParameters().getClass().getName())).addValue("status", entity.getCommandStatus().toString()).addValue("executed", entity.isExecuted()).addValue("callback_enabled", entity.isCallBackEnabled()).addValue("return_value", serializeReturnValue(entity.getReturnValue())).addValue("return_value_class", ((entity.getReturnValue()) == null ? null : entity.getReturnValue().getClass().getName())); }
private void validateImageType() { try { final java.io.InputStream inputStream = new java.io.ByteArrayInputStream(rawImageData); final javax.imageio.stream.ImageInputStream imageInputStream = javax.imageio.ImageIO.createImageInputStream(inputStream); final java.util.Iterator<javax.imageio.ImageReader> imageReaders = javax.imageio.ImageIO.getImageReaders(imageInputStream); if (!(imageReaders.hasNext())) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.PROVIDED_VM_ICON_OF_UNKNOWN_TYPE); return; } final java.lang.String formatName = imageReaders.next().getFormatName(); imageType = org.ovirt.engine.core.bll.validator.IconValidator.FileType.getByFormatName(formatName); if ((imageType) == null) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.PROVIDED_VM_ICONS_OF_UNSUPPORTED_TYPE, ("$fileType " + formatName), ("$supportedFileTypes " + (org.ovirt.engine.core.bll.validator.IconValidator.FileType.getSupportedTypes()))); } } catch (java.io.IOException e) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.PROVIDED_VM_ICON_CANT_BE_READ); } }

private void PrepareSanStorageForEdit(final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModel model) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel storageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (getWindow())); org.ovirt.engine.core.common.businessentities.storage_domains storage = ((org.ovirt.engine.core.common.businessentities.storage_domains) (getSelectedItem())); boolean isStorageActive = storageModel.isStorageActive(); if (isStorageActive) { storageModel.getHost().getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { PostPrepareSanStorageForEdit(model, true); } }); } else { PostPrepareSanStorageForEdit(model, false); } }

@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type} if some of the specified custom properties are not configured by the system. These keys are: $MissingKeys") java.lang.String ACTION_TYPE_FAILED_INVALID_CUSTOM_VM_PROPERTIES_INVALID_KEYS();
public void setRunTime(int runTime) { this.runTime = runTime; }


@java.lang.Override public javax.ws.rs.core.Response undelete(org.ovirt.engine.api.model.Action action) { return performAction(VdcActionType.ClearAllDismissedAuditLogs, new org.ovirt.engine.core.common.action.VdcActionParametersBase(), action, false); }
private void updateTimeoutLogableObject(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.AuditLogType logType) { int eventFloodRate = ((auditLogable.isExternal()) && ((auditLogable.getEventFloodInSec()) == 0)) ? 30 : logType.getEventFloodRate(); if (eventFloodRate > 0) { auditLogable.setEndTime(java.util.concurrent.TimeUnit.SECONDS.toMillis(eventFloodRate)); auditLogable.setTimeoutObjectId(composeObjectId(auditLogable, logType)); } }

public org.ovirt.engine.core.bll.ValidationResult notRenamingLabel(java.lang.String oldLabel) { if ((((network.getLabel()) == null) || (oldLabel == null)) || (network.getLabel().equals(oldLabel))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics = getDbFacade().getInterfaceDao().getVdsInterfacesByNetworkId(network.getId()); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { if ((org.ovirt.engine.core.utils.NetworkUtils.isLabeled(nic)) && (nic.getLabels().contains(oldLabel))) { new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_LABEL_RENAMING_NOT_SUPPORTED); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }

@org.junit.Test public void testSaveOrUpdate() { existingAsyncTask.setstatus(AsyncTaskStatusEnum.aborting); existingAsyncTask.setresult(AsyncTaskResultEnum.failure); existingAsyncTask.setaction_type(VdcActionType.AddDisk); org.ovirt.engine.core.common.action.AddDiskParameters addDiskToVmParams = new org.ovirt.engine.core.common.action.AddDiskParameters(); addDiskToVmParams.setSessionId("SESSION_ID"); org.ovirt.engine.core.common.action.AddImageFromScratchParameters taskParameters = new org.ovirt.engine.core.common.action.AddImageFromScratchParameters(); taskParameters.setParentParameters(addDiskToVmParams); taskParameters.setParentCommand(VdcActionType.AddDisk); existingAsyncTask.setActionParameters(addDiskToVmParams); existingAsyncTask.setTaskParameters(taskParameters); java.util.List<org.ovirt.engine.core.common.businessentities.AsyncTasks> tasks = dao.getAll(); assertNotNull(tasks); int tasksNumber = tasks.size(); dao.saveOrUpdate(existingAsyncTask, VdcObjectType.Disk); tasks = dao.getAll(); assertEquals(tasksNumber, tasks.size()); org.ovirt.engine.core.common.businessentities.AsyncTasks taskFromDb = dao.get(existingAsyncTask.gettask_id()); assertNotNull(taskFromDb); assertEquals(taskFromDb, existingAsyncTask); dao.saveOrUpdate(newAsyncTask, VdcObjectType.Disk, org.ovirt.engine.core.compat.Guid.NewGuid()); tasks = dao.getAll(); assertNotNull(tasks); assertEquals((tasksNumber + 1), tasks.size()); taskFromDb = dao.get(newAsyncTask.gettask_id()); assertEquals(taskFromDb, newAsyncTask); }
public org.ovirt.engine.core.bll.ValidationResult passthroughIsLinked() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_UNLINKING_OF_PASSTHROUGH_VNIC_IS_NOT_SUPPORTED).when(((nic.isPassthrough()) && (!(nic.isLinked())))); }

java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus> getAllTasksStatuses(org.ovirt.engine.core.compat.Guid storagePoolID);

private javax.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.model.Disk disk) { boolean isDiskActive = (disk.isSetActive()) ? disk.isActive() : false; org.ovirt.engine.core.common.action.AttachDettachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDettachVmDiskParameters(parentId, org.ovirt.engine.core.compat.Guid.createGuidFromString(disk.getId()), isDiskActive); return performAction(VdcActionType.AttachDiskToVm, params); }
boolean isLink(java.lang.Object object);
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Import provider certificates") java.lang.String importProviderCertificatesTitle();

@org.ovirt.engine.ui.frontend.DefaultStringValue("Failed to delete the snapshots for the gluster volume") java.lang.String GlusterSnapshotDeleteVolumeFailedException();
public java.util.List<org.ovirt.engine.core.common.businessentities.network> getNetworks() { return networks; }



public static boolean isNetworkInSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.network.Network network) { return ((((network.getMtu()) == 0) || ((iface.getMtu()) == (network.getMtu()))) && (java.util.Objects.equals(iface.getVlanId(), network.getVlanId()))) && ((iface.isBridged()) == (network.isVmNetwork())); }
@java.lang.Override public void runningSucceded() { try { getDowntime(); vmDynamicDao.clearMigratingToVds(org.ovirt.engine.core.bll.MigrateVmCommand.getVmId()); updateVmAfterMigrationToDifferentCluster(); plugPassthroughNics(); } finally { super.runningSucceded(); } }
public org.ovirt.engine.core.bll.ValidationResult isCinderSupportedInDC() { if ((!(getStoragePool().isLocal())) && (!(org.ovirt.engine.core.common.FeatureSupported.cinderProviderSupported(getStoragePool().getCompatibilityVersion())))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.DATA_CENTER_CINDER_STORAGE_NOT_SUPPORTED_IN_CURRENT_VERSION); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if (!(hostDeviceManager.checkVmNeedsDirectPassthrough(vm))) { return hosts; } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.isHostDevicePassthroughEnabled()) { list.add(host); } else { messages.addMessage(host.getId(), VdcBllMessages.VAR__DETAIL__HOSTDEV_DISABLED.toString()); org.ovirt.engine.core.bll.scheduling.policyunits.HostDeviceFilterPolicyUnit.log.debug("Host '{}' does not support host device passthrough", host.getName()); } } return list; }
@java.lang.Override protected boolean validate() { if (!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.canRunActionOnNonManagedVm())) { return false; } if ((!(org.ovirt.engine.core.bll.ChangeVMClusterCommand.isInternalExecution())) && (!(org.ovirt.engine.core.utils.ObjectIdentityChecker.canUpdateField(org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm(), "clusterId", org.ovirt.engine.core.bll.ChangeVMClusterCommand.getVm().getStatus())))) { addValidationMessage(EngineMessage.VM_STATUS_NOT_VALID_FOR_UPDATE); return false; } org.ovirt.engine.core.bll.ChangeVmClusterValidator validator = new org.ovirt.engine.core.bll.ChangeVmClusterValidator(this, org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getClusterId(), org.ovirt.engine.core.bll.ChangeVMClusterCommand.getParameters().getVmCustomCompatibilityVersion()); return validator.validate(); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterServicesReturnForXmlRpc glusterServicesAction(org.ovirt.engine.core.compat.Guid serverId, java.lang.String[] serviceList, java.lang.String actionType) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterService.action").withParameter("serviceNames", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(serviceList))).withParameter("action", actionType).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterServicesReturnForXmlRpc(serverId, response); }
@org.junit.Test public void managedNetworkAddedToNic() { org.ovirt.engine.core.common.businessentities.network net = createNetwork("net"); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNic("nic0", null); mockExistingNetworks(net); mockExistingIfaces(nic); nic.setNetworkName(net.getName()); org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForNics(nic)); validateAndExpectNoViolations(helper); assertNoBondsModified(helper); assertNetworkModified(helper, net); assertNoNetworksRemoved(helper); assertNoBondsRemoved(helper); }






public org.ovirt.engine.core.bll.ValidationResult diskImagesNotExist() { java.util.List<java.lang.String> disksNotExistInDbIds = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { if (!(isDiskExists(diskImage.getId()))) { disksNotExistInDbIds.add(diskImage.getId().toString()); } } if (!(disksNotExistInDbIds.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISKS_NOT_EXIST, java.lang.String.format("$diskIds %s", org.apache.commons.lang.StringUtils.join(disksNotExistInDbIds, ", "))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }


@java.lang.Override protected void InitDetailModels() { super.InitDetailModels(); org.ovirt.engine.core.compat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new org.ovirt.engine.core.compat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); list.add(new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateGeneralModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateImportInterfaceListModel()); this.templateImportDiskListModel = new org.ovirt.engine.ui.uicommonweb.models.templates.TemplateImportDiskListModel(); list.add(templateImportDiskListModel); setDetailModels(list); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__REMOVE); addCanDoActionMessage(EngineMessage.VAR__TYPE__POLICY_UNIT); }

java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAllWithName(java.lang.String name);


protected boolean validateBallonDevice() { if (!(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isBalloonDeviceExists(org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getManagedVmDeviceMap().values()))) { return true; } org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().get(org.ovirt.engine.core.common.osinfo.OsRepository.class); if (!(osRepository.isBalloonEnabled(org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getStaticData().getOsId(), org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroup().getCompatibilityVersion()))) { addCanDoActionMessageVariable("clusterArch", org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroup().getArchitecture()); return failCanDoAction(VdcBllMessages.BALLOON_REQUESTED_ON_NOT_SUPPORTED_ARCH); } return true; }
private void AttachIso_EntityChanged() { getIsoImage().setIsChangable(((java.lang.Boolean) (getAttachIso().getEntity()))); getBootSequence().getCdromOption().setIsChangable(((java.lang.Boolean) (getAttachIso().getEntity()))); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc glusterVolumeCreate(java.lang.String volumeName, java.lang.String[] brickList, int replicaCount, int stripeCount, java.lang.String[] transportList) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.create").withParameter("volumeName", volumeName).withParameter("bricklist", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(brickList))).withParameter("replicaCount", replicaCount).withParameter("stripeCount", stripeCount).withParameter("transportList", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(transportList))).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(response); }
private org.ovirt.engine.ui.common.widget.MenuBar menuFor(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item) { org.ovirt.engine.ui.common.widget.MenuBar menu = rootMenu(item); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> operationMap = item.getSetupModel().commandsFor(item); for (final java.util.Map.Entry<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation, java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand>> entry : operationMap.entrySet()) { final java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand> commands = entry.getValue(); if (entry.getKey().isUnary()) { assert (commands.size()) == 1 : "Got a NetworkCommand List with more than one Unary Operation"; menu.addItem(entry.getKey().getVerb(item), () -> executeCommand(entry.getKey(), commands.get(0))); } else { java.util.Collections.sort(commands, java.util.Comparator.comparing(NetworkCommand::getName, new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator())); org.ovirt.engine.ui.common.widget.MenuBar subMenu = subMenu(); for (final org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkCommand command : commands) { subMenu.addItem(new com.google.gwt.user.client.ui.MenuItem(command.getName(), () -> executeCommand(entry.getKey(), command))); } menu.addItem(entry.getKey().getVerb(item), subMenu); } } return menu; }

@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((getSnapshot().getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterSnapshotStatus.ACTIVATED)) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_ALREADY_ACTIVATED, getSnapshot().getSnapshotName()); } return true; }
private org.ovirt.engine.core.common.businessentities.VM mockVm() { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(VMStatus.Down); vm.setVmtGuid(vmTemplateId); vm.setStaticData(getVmStatic()); vm.setClusterArch(ArchitectureType.x86_64); return vm; }

private void setAttachedTagsConverter(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags> ret = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Tags tags : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags>) (source))) { if ((tags.getType()) == (org.ovirt.engine.core.common.businessentities.TagsType.GeneralTag)) { ret.add(tags); } } return ret; } return new org.ovirt.engine.core.common.businessentities.Tags(); } }; }

@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.ProcessDownVmCommand.getVm()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } return true; }

@org.junit.Test public void testAllDomainsHaveSpaceForNewDisksFailure() { setUpGeneralValidations(); setUpDiskValidations(); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList = java.util.Collections.emptyList(); doReturn(disksList).when(cmd).getDisksList(); doReturn(disksList).when(cmd).getDisksListForChecks(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(multipleStorageDomainsValidator).allDomainsHaveSpaceForNewDisks(disksList); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN); verify(multipleStorageDomainsValidator).allDomainsHaveSpaceForNewDisks(disksList); }




private void filterServices() { org.ovirt.engine.core.common.businessentities.VDS selectedVds = ((org.ovirt.engine.core.common.businessentities.VDS) (hostList.getSelectedItem())); org.ovirt.engine.core.common.businessentities.gluster.ServiceType serviceType = ((org.ovirt.engine.core.common.businessentities.gluster.ServiceType) (serviceTypeList.getSelectedItem())); java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService service : getActualServiceList()) { if (((selectedVds == null) || (service.getHostName().equals(selectedVds.getHostName()))) && ((serviceType == null) || ((service.getServiceType()) == serviceType))) { list.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(service)); } } getServiceList().setItems(list); }

private void init() { setApplyCommand(new org.ovirt.engine.ui.uicommonweb.UICommand(org.ovirt.engine.ui.uicommonweb.models.datacenters.EditNetworkModel.APPLY_COMMAND_NAME, getSourceListModel())); setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editLogicalNetworkTitle()); setHashName("edit_logical_network"); getName().setEntity(getNetwork().getName()); getDescription().setEntity(getNetwork().getDescription()); getIsStpEnabled().setEntity(getNetwork().getStp()); getHasVLanTag().setEntity(((getNetwork().getVlanId()) != null)); getVLanTag().setEntity(((getNetwork().getVlanId()) == null ? 0 : getNetwork().getVlanId())); initMtu(); initIsVm(); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to remove Data Center") java.lang.String allowToRemoveDataCenterRoleTreeTooltip();
@java.lang.Override public java.lang.Void runInTransaction() { addPermission(); AddVmTemplateImages(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmInterfaces = addVmInterfaces(); org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices(getVmId(), getVmTemplateId(), newDiskImages, vmInterfaces); setSucceeded(true); return null; }
public void setIsPowerManagementTabValid(boolean value) { if ((isPowerManagementTabValid) != value) { isPowerManagementTabValid = value; onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("IsPowerManagementTabValid")); } }
@java.lang.Override public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel systemTreeSelectedItem) { super.initialize(systemTreeSelectedItem); if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(pool.getVmPoolSpiceProxy()))) { getModel().getSpiceProxyEnabled().setEntity(true); getModel().getSpiceProxy().setEntity(pool.getVmPoolSpiceProxy()); getModel().getSpiceProxy().setIsChangeable(true); } instanceTypeManager = new org.ovirt.engine.ui.uicommonweb.models.vms.instancetypes.ExistingPoolInstanceTypeManager(getModel(), pool); instanceTypeManager.setAlwaysEnabledFieldUpdate(true); getModel().getCustomProperties().setIsChangeable(false); getModel().getCustomPropertySheet().setIsChangeable(false); }
@javax.annotation.PostConstruct void init() { entityName = entityManager.getMetamodel().entity(entityType).getName(); }

public static void GetSANWipeAfterDelete(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Boolean) (source)).booleanValue() : false; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.SANWipeAfterDelete, org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion), aQuery); }
private void updateTaskStatuses(java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus>> poolsAllTasksMap) { for (org.ovirt.engine.core.bll.tasks.interfaces.SPMTask task : _tasks.values()) { if (task.getShouldPoll()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.AsyncTaskStatus> asyncTasksForPoolMap = poolsAllTasksMap.get(task.getStoragePoolID()); if (asyncTasksForPoolMap != null) { org.ovirt.engine.core.common.businessentities.AsyncTaskStatus cachedAsyncTaskStatus = asyncTasksForPoolMap.get(task.getVdsmTaskId()); task.updateTask(cachedAsyncTaskStatus); } } } }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__TYPE__STORAGE__POOL); addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE); }
protected boolean validateSpaceRequirements() { boolean retValue = true; if (!(isStorageDomainSpaceBelowThresholds())) { retValue = false; addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN); addCanDoActionMessage(java.lang.String.format("$%1$s %2$s", "storageName", org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getStorageDomain().getstorage_name())); } if (retValue) { org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().getSnapshots().addAll(getAllImageSnapshots()); if (!(doesStorageDomainHaveSpaceForRequest(java.lang.Math.round(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().getActualDiskWithSnapshotsSize())))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW); retValue = false; } } return retValue; }
@java.lang.Override public java.lang.Void runInTransaction() { getBaseDiskDao().save(cinderDisk); getImageDao().save(cinderDisk.getImage()); getImageStorageDomainMapDao().save(new org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap(cinderDisk.getImageId(), cinderDisk.getStorageIds().get(0), cinderDisk.getQuotaId(), cinderDisk.getDiskProfileId())); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic(); diskDynamic.setId(cinderDisk.getImageId()); getDiskImageDynamicDao().save(diskDynamic); if ((getVm()) != null) { org.ovirt.engine.core.bll.storage.VmDeviceUtils.addManagedDevice(new org.ovirt.engine.core.bll.storage.VmDeviceId(cinderDisk.getId(), getVmId()), VmDeviceGeneralType.DISK, VmDeviceType.DISK, null, shouldDiskBePlugged(), java.lang.Boolean.TRUE.equals(cinderDisk.getReadOnly()), null); } return null; }
public org.ovirt.engine.core.bll.ValidationResult validateAmountOfIsoAndExportDomainsInDC() { if (!(isStorageDomainOfTypeIsoOrExport())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } final org.ovirt.engine.core.common.businessentities.StorageDomainType type = storageDomainStatic.getStorageDomainType(); int count = org.ovirt.engine.core.utils.linq.LinqUtils.filter(getStorageDomainDao().getAllForStoragePool(storagePool.getId()), new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.StorageDomain a) { return (a.getStorageDomainType()) == type; } }).size(); if (count == 0) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if (type == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ERROR_CANNOT_ATTACH_MORE_THAN_ONE_ISO_DOMAIN); } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ERROR_CANNOT_ATTACH_MORE_THAN_ONE_EXPORT_DOMAIN); } }



private org.ovirt.engine.core.bll.ValidationResult modifiedAttachmentExists(org.ovirt.engine.core.compat.Guid networkAttachmentId) { boolean doesNotReferenceExistingNetworkAttachment = networkAttachmentId == null; if (doesNotReferenceExistingNetworkAttachment) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingAttachment : existingAttachments) { if (existingAttachment.getId().equals(networkAttachmentId)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_ATTACHMENT_NOT_EXISTS); }


private boolean validateManagementNetworkAttachement() { final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork; final org.ovirt.engine.core.compat.Guid managementNetworkId = org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getParameters().getManagementNetworkId(); if (managementNetworkId == null) { managementNetwork = getDefaultManagementNetworkFinder().findDefaultManagementNetwork(org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup().getStoragePoolId()); if (managementNetwork == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } } else { managementNetwork = getNetworkDao().get(managementNetworkId); if (managementNetwork == null) { addCanDoActionMessage(VdcBllMessages.NETWORK_NOT_EXISTS); return false; } } managementNetworkCluster = createManagementNetworkCluster(managementNetwork); final org.ovirt.engine.core.bll.network.cluster.UpdateClusterNetworkClusterValidator networkClusterValidator = createManagementNetworkClusterValidator(); return validate(networkClusterValidator.managementNetworkChange()); }
@org.junit.Test public void testNetworkNotUsedByVmsWhenUsed() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setId(org.ovirt.engine.core.compat.Guid.newGuid()); network.setName("name"); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); networkAttachment.setNetworkId(network.getId()); org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator validator = createNetworkAttachmentValidator(networkAttachment); when(vmInterfaceManager.findActiveVmsUsingNetworks(eq(host.getId()), collectionContainingOneGivenNetworkName(network.getName()))).thenReturn(java.util.Collections.singletonList("networkName")); when(networkDaoMock.get(eq(network.getId()))).thenReturn(network); assertThat(validator.networkNotUsedByVms(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_IN_ONE_USE)); }

public static boolean isValidVmNetwork(org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface, org.ovirt.engine.core.compat.Guid clusterId) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network> networksByName = org.ovirt.engine.core.common.businessentities.Entities.entitiesByName(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDAO().getAllForCluster(clusterId)); java.lang.String networkName = iface.getNetworkName(); return (networksByName.containsKey(networkName)) && (networksByName.get(networkName).isVmNetwork()); }

@org.junit.Before public void setUp() throws java.lang.Exception { manager = new org.ovirt.engine.core.utils.ovf.OvfManager(); }
@org.junit.Test public void executeCommandWhenFailed() { cmd = spy(new org.ovirt.engine.core.bll.gluster.RemoveGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); setUpMocksForRemove(); mockBackend(false, VdcBllErrors.GlusterHookRemoveFailed); cmd.executeCommand(); verify(hooksDao, never()).remove(any(org.ovirt.engine.core.compat.Guid.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_HOOK_REMOVE_FAILED); }
private void UpdateCanSpecify() { org.ovirt.engine.core.common.businessentities.network network = ((org.ovirt.engine.core.common.businessentities.network) (getNetwork().getSelectedItem())); boolean isChangable = ((getIsStaticAddress()) && (network != null)) && (!(network.getId().equals(NGuid.Empty))); getAddress().setIsChangable(isChangable); getSubnet().setIsChangable(isChangable); }
private void generateUpdateMethod(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = method.getParameters().stream().filter(( x) -> (x.getType()) instanceof org.ovirt.api.metamodel.concepts.StructType).findFirst().orElse(null); if (mainParameter == null) { java.lang.System.err.println((("Method \"" + method) + "\" doesn\'t have any struct parameter")); return; } org.ovirt.api.metamodel.concepts.Type mainType = mainParameter.getType(); org.ovirt.api.metamodel.tool.JavaTypeReference mainTypeReference = schemaNames.getXjcTypeReference(mainType); javaBuffer.addImport(javax.ws.rs.Consumes.class); javaBuffer.addImport(javax.ws.rs.PUT.class); javaBuffer.addImports(mainTypeReference.getImports()); generateDoc(method); javaBuffer.addLine("@PUT"); javaBuffer.addLine("@Consumes({ %s })", generateMediaTypes()); addMethod(mainTypeReference.getText(), "update(%s %s)", mainTypeReference.getText(), javaNames.getJavaMemberStyleName(mainParameter.getName())); javaBuffer.addLine(); }
public java.lang.Boolean getKsmState() { return this.mVdsStatistics.getKsmState(); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Override the default SPICE proxy value") java.lang.String clusterSpiceProxyInfo();
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.bll.network.host.LabelNicCommand.getBackend().runInternalAction(VdcActionType.PersistentSetupNetworks, new org.ovirt.engine.core.bll.network.AddNetworksByLabelParametersBuilder().buildParameters(getNic(), getLabel(), getClusterNetworksByLabel())); if (result.getSucceeded()) { org.ovirt.engine.core.bll.network.host.LabelNicCommand.getReturnValue().setActionReturnValue(getLabel()); } else { propagateFailure(result); } setSucceeded(result.getSucceeded()); }
@org.junit.Test public void testUpdate() { java.lang.String oldName = existingVdsGroup.getName(); existingVdsGroup.setName("This is the new name"); existingVdsGroup.setVirtService(false); existingVdsGroup.setGlusterService(true); dao.update(existingVdsGroup); org.ovirt.engine.core.common.businessentities.VDSGroup result = dao.get(existingVdsGroup.getId()); assertCorrectVDSGroup(result); result = dao.getByName(oldName); assertNull(result); }
private void updateName(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { if (disk == null) { return; } java.lang.String diskName = disk.getDiskAlias(); java.lang.String size = java.lang.Long.toString(disk.getSize()); if ((disk.getDiskStorageType()) == (Disk.DiskStorageType.IMAGE)) { size = java.lang.Long.toString(((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)).getSizeInGigabytes()); } java.lang.String type; if (diskExists) { type = constants.existingDisk(); } else if ((getDiskModel().getEntity()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImagesAttachDiskModel) { type = constants.attachingDisk(); } else { type = constants.creatingDisk(); } java.lang.String boot = ""; if (disk.isBoot()) { boot = constants.bootDisk(); } name.setEntity(messages.vmDialogDisk(diskName, size, type, boot)); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.datacenter.DataCenterSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(ginjector.getApplicationConstants().dataCenterEventSubTabLabel(), 5, ginjector.getSubTabDataCenterEventModelProvider(), org.ovirt.engine.ui.common.widget.Align.RIGHT); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Console connection denied. Another user has already accessed the console of this VM. The VM should be rebooted to allow another user to access it, or changed by an admin to not enforce reboot between users accessing its console.") java.lang.String USER_CANNOT_FORCE_RECONNECT_TO_VM();


@org.ovirt.engine.ui.webadmin.DefaultStringValue("Guaranty Resources") java.lang.String guarantyResourcesLabel();

@java.lang.Override public java.lang.String toString() { return java.lang.String.format("%s, syncType=%s", super.toString(), getSyncType()); }
@java.lang.Override public java.lang.String renderNullSafe(java.lang.Object object) { return ((org.ovirt.engine.core.common.businessentities.StoragePool) (object)).getname(); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.VdsStatic vds) { java.util.Map<java.lang.String, java.lang.Object> dbResults = new org.springframework.jdbc.core.simple.SimpleJdbcCall(jdbcTemplate).withProcedureName("InsertVdsStatic").execute(getInsertOrUpdateParams(vds)); vds.setId(new org.ovirt.engine.core.compat.Guid(dbResults.get("vds_id").toString())); }
@java.lang.Override protected void UpdateActionAvailability() { super.UpdateActionAvailability(); getConnectCommand().setIsExecutionAllowed(((((getEntity()) != null) && (((getEntity().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) || ((getEntity().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.PoweringDown)))) && (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsWindowsOsType(getEntity().getVmOs())))); }
@java.lang.Override protected void executeVdsBrokerCommand() { httpTask = org.ovirt.engine.core.vdsbroker.vdsbroker.PollVDSCommand.getBroker().poll(); }
public java.lang.Integer getReservedMem() { return this.mVdsDynamic.getReservedMem(); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__SHUTDOWN); addCanDoActionMessage(EngineMessage.VAR__TYPE__VM); }
public org.ovirt.engine.core.bll.ValidationResult uuidNotExist() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.LIBVIRT_SECRET_UUID_ALREADY_EXISTS).unless(((libvirtSecretDao.get(libvirtSecret.getId())) == null)); }
@java.lang.Override protected void onSelectedItemChanged() { super.onSelectedItemChanged(); if ((getSelectedItem()) != null) { updateFormat(); updateHost(); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmPool getByName(java.lang.String name) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_pool_name", name); return getCallsHandler().executeRead("GetVm_poolsByvm_pool_name", org.ovirt.engine.core.dao.VmPoolDAODbFacadeImpl.VmPoolNonFullRowMapper.instance, parameterSource); }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.providers.HostNetworkProviderModel model) { driver.edit(model); final org.ovirt.engine.ui.uicommonweb.models.providers.NeutronAgentModel neutronAgentModel = model.getNeutronAgentModel(); neutronAgentWidget.edit(neutronAgentModel); neutronAgentPanel.setVisible(neutronAgentModel.isPluginConfigurationAvailable().getEntity()); neutronAgentModel.isPluginConfigurationAvailable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { neutronAgentPanel.setVisible(neutronAgentModel.isPluginConfigurationAvailable().getEntity()); } }); }

protected static boolean canRunPoolVm(org.ovirt.engine.core.compat.Guid vmId, java.util.ArrayList<java.lang.String> messages) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(vmId); if (vm == null) { messages.add(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND.name()); return false; } org.ovirt.engine.core.bll.VmHandler.updateNetworkInterfacesFromDb(vm); org.ovirt.engine.core.common.action.RunVmParams runVmParams = new org.ovirt.engine.core.common.action.RunVmParams(vmId); runVmParams.setUseVnc(((vm.getVmOs().isLinux()) || ((vm.getVmType()) == (org.ovirt.engine.core.common.businessentities.VmType.Server)))); org.ovirt.engine.core.bll.VdsSelector vdsSelector = new org.ovirt.engine.core.bll.VdsSelector(vm, ((runVmParams.getDestinationVdsId()) != null ? runVmParams.getDestinationVdsId() : vm.getDedicatedVmForVds()), true, new org.ovirt.engine.core.bll.VdsFreeMemoryChecker(new org.ovirt.engine.core.bll.NonWaitingDelayer())); return org.ovirt.engine.core.bll.VmRunHandler.getInstance().canRunVm(vm, messages, runVmParams, vdsSelector, new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(), org.ovirt.engine.core.bll.VmPoolCommandBase.getVmPropertiesUtils()); }


@org.junit.Test public void testFcpFoundUnregisteredDomain() { when(getQueryParameters().getStorageType()).thenReturn(StorageType.FCP); when(getQueryParameters().getVdsId()).thenReturn(org.ovirt.engine.core.compat.Guid.newGuid()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = getLUNs(storageDomainId, vgId); doReturn(java.util.Collections.emptyList()).when(lunDao).getAll(); doReturn(org.ovirt.engine.core.bll.storage.GetUnregisteredBlockStorageDomainsQueryTest.createGetDeviceListReturnValue(luns)).when(getQuery()).executeGetDeviceList(any(org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters.class)); doReturn(org.ovirt.engine.core.bll.storage.GetUnregisteredBlockStorageDomainsQueryTest.createGetVGInfoReturnValue(luns)).when(getQuery()).executeGetVGInfo(any(org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters.class)); doReturn(createGetStorageDomainInfoReturnValue()).when(getQuery()).executeHSMGetStorageDomainInfo(any(org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters.class)); getQuery().executeQueryCommand(); org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain>, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections>> returnValue = getQuery().getQueryReturnValue().getReturnValue(); java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = returnValue.getFirst(); assertEquals(1, storageDomains.size()); assertEquals(storageDomains.get(0).getId(), storageDomainId); }


public static java.util.List<java.lang.String> assertCanDoActionMessages(java.lang.String assertionMessage, org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.errors.VdcBllMessages message) { java.util.List<java.lang.String> canDoActionMessages = command.getReturnValue().getCanDoActionMessages(); assertTrue(java.text.MessageFormat.format("{0}canDoAction messages doesn''t contain expected message: {1}, messages are: {2}", org.ovirt.engine.core.bll.CanDoActionTestUtils.optionalMessage(assertionMessage), message.name(), canDoActionMessages), canDoActionMessages.contains(message.name())); return canDoActionMessages; }


@org.ovirt.engine.ui.uicompat.DefaultStringValue("V4") java.lang.String nfsVersion4();
@java.lang.Override protected void executeVDSCommand() { try { org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxyData proxyData = org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getCurrentIrsProxyData(); proxyData.clearPoolTimers(); proxyData.clearCache(); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.log.error("Could not change timers for pool '{}': {}", org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getParameters().getStoragePoolId(), e.getMessage()); org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.log.debug("Exception", e); } org.ovirt.engine.core.vdsbroker.irsbroker.MarkPoolInReconstructModeVDSCommand.getVDSReturnValue().setSucceeded(true); }


private static void setPropertiesFromAuditLogableBase(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { auditLog.setstorage_domain_id(auditLogable.getStorageDomainId()); auditLog.setstorage_domain_name(auditLogable.getStorageDomainName()); auditLog.setstorage_pool_id(auditLogable.getStoragePoolId()); auditLog.setstorage_pool_name(auditLogable.getStoragePoolName()); auditLog.setvds_group_id(auditLogable.getVdsGroupId()); auditLog.setvds_group_name(auditLogable.getVdsGroupName()); auditLog.setCorrelationId(auditLogable.getCorrelationId()); auditLog.setJobId(auditLogable.getJobId()); auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId()); auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName()); auditLog.setExternal(auditLogable.isExternal()); auditLog.setQuotaId(auditLogable.getQuotaIdForLog()); auditLog.setQuotaName(auditLogable.getQuotaNameForLog()); auditLog.setCallStack(auditLogable.getCallStack()); }
private static void logVmStatusTransionFromUnknown(org.ovirt.engine.core.common.businessentities.VM vmToUpdate, org.ovirt.engine.core.common.businessentities.VmDynamic runningVm) { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLogable.setVmId(vmToUpdate.getId()); auditLogable.addCustomValue("VmStatus", runningVm.getStatus().toString()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(auditLogable, AuditLogType.VM_STATUS_RESTORED); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { final org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if (!(queryReturnValue.getSucceeded())) { final org.ovirt.engine.ui.uicommonweb.ErrorPopupManager popupManager = ((org.ovirt.engine.ui.uicommonweb.ErrorPopupManager) (org.ovirt.engine.ui.uicommonweb.TypeResolver.getInstance().resolve(org.ovirt.engine.ui.uicommonweb.ErrorPopupManager.class))); popupManager.show(queryReturnValue.getExceptionMessage()); return; } onRealSuccessCallback.onSuccess(model, returnValue); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyListModel clusterPolicyListModel = ((org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyListModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> list = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); clusterPolicyListModel.setPolicyUnits(list); clusterPolicyListModel.fetchClusterPolicies(); if ((policyUnitModel) != null) { policyUnitModel.getPolicyUnits().setItems(sort(policyUnits)); } }

@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.STORAGE, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
private void saveVmDevicesToDb() { org.ovirt.engine.core.vdsbroker.VdsUpdateRunTimeInfo.updateAllInTransaction(vmDeviceToSave.values(), getDbFacade().getVmDeviceDAO()); if (!(removedDeviceIds.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { getDbFacade().getVmDeviceDAO().removeAll(removedDeviceIds); return null; } }); } if (!(newVmDevices.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { getDbFacade().getVmDeviceDAO().saveAll(newVmDevices); return null; } }); } }
@java.lang.Override public void setSelectedItems(java.util.List<org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel> items) { getModel().setSelectedItem(((items.size()) > 0 ? items.get(0) : null)); }



private org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters buildLiveSnapshotParameters(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.common.businessentities.Disk> pluggedDisks = org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getId(), true); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> filteredPluggedDisks = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks(pluggedDisks, false, true, true); if (org.ovirt.engine.core.common.FeatureSupported.memorySnapshot(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getVdsGroupCompatibilityVersion())) { return new org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getId(), filteredPluggedDisks, snapshot.getMemoryVolume()); } else { return new org.ovirt.engine.core.common.vdscommands.SnapshotVDSCommandParameters(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getId(), filteredPluggedDisks); } }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((compatVersion) == null ? 0 : compatVersion.hashCode()); result = (prime * result) + ((compatibility_version) == null ? 0 : compatibility_version.hashCode()); result = (prime * result) + ((cpu_name) == null ? 0 : cpu_name.hashCode()); result = (prime * result) + (cpu_over_commit_duration_minutes); result = (prime * result) + ((description) == null ? 0 : description.hashCode()); result = (prime * result) + (high_utilization); result = (prime * result) + ((id) == null ? 0 : id.hashCode()); result = (prime * result) + (low_utilization); result = (prime * result) + (max_vds_memory_over_commit); result = (prime * result) + (countThreadsAsCores ? 1231 : 1237); result = (prime * result) + ((migrateOnError) == null ? 0 : migrateOnError.hashCode()); result = (prime * result) + ((name) == null ? 0 : name.hashCode()); result = (prime * result) + ((selection_algorithm) == null ? 0 : selection_algorithm.hashCode()); result = (prime * result) + ((storagePool) == null ? 0 : storagePool.hashCode()); result = (prime * result) + (transparentHugepages ? 1231 : 1237); result = (prime * result) + (virtService ? 1231 : 1237); result = (prime * result) + (glusterService ? 1231 : 1237); return result; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { getModel().getIsSoundcardEnabled().setEntity(((java.lang.Boolean) (returnValue))); }






@org.junit.Test public void testIsUsingScsiReservationValidWhenSgioIsFiltered() { setupForLun(); org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk(ScsiGenericIO.FILTERED, true); assertThat(lunValidator.isUsingScsiReservationValid(org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(), lunDisk1), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.ACTION_TYPE_FAILED_SGIO_IS_FILTERED)); }
protected void setUpGetHostIdExpectations(int idx) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest.setUpEntityExpectations(control.createMock(org.ovirt.engine.core.common.businessentities.VDS.class), idx); setUpGetEntityExpectations(VdcQueryType.GetVdsByName, org.ovirt.engine.core.common.queries.GetVdsByNameParameters.class, new java.lang.String[]{ "Name" }, new java.lang.Object[]{ NAMES[idx] }, host); }
public org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties.AgentConfiguration flush() { org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties.AgentConfiguration agentConfiguration = new org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties.AgentConfiguration(); agentConfiguration.setNetworkMappings(((java.lang.String) (getInterfaceMappings().getEntity()))); org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties.QpidConfiguration qpidConfiguration = new org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties.QpidConfiguration(); agentConfiguration.setQpidConfiguration(qpidConfiguration); qpidConfiguration.setAddress(((java.lang.String) (getQpidHost().getEntity()))); java.lang.String port = ((java.lang.String) (getQpidPort().getEntity())); qpidConfiguration.setPort((port == null ? null : java.lang.Integer.valueOf(port))); qpidConfiguration.setUsername(((java.lang.String) (getQpidUsername().getEntity()))); qpidConfiguration.setPassword(((java.lang.String) (getQpidPassword().getEntity()))); return agentConfiguration; }
public void setGuestOverhead(java.lang.Integer value) { this.mVdsDynamic.setGuestOverhead(value); }
@java.lang.Override public void UpdateMinAllocatedMemory() { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ((org.ovirt.engine.core.common.businessentities.VDSGroup) (getModel().getCluster().getSelectedItem())); if (cluster == null) { return; } if (((java.lang.Integer) (getModel().getMemSize().getEntity())) < (vm.getVmMemSizeMb())) { double overCommitFactor = 100.0 / (cluster.getmax_vds_memory_over_commit()); getModel().getMinAllocatedMemory().setEntity(((int) (((java.lang.Integer) (getModel().getMemSize().getEntity())) * overCommitFactor))); } else { getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem()); } }
private void initNetworkList(org.ovirt.engine.core.compat.Guid dataCenterId) { startProgress(); org.ovirt.engine.core.common.queries.IdQueryParameters queryParams = new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(QueryType.GetAllNetworks, queryParams, new org.ovirt.engine.ui.uicommonweb.models.profiles.AsyncQuery<org.ovirt.engine.core.common.queries.QueryReturnValue>(( returnValue) -> { Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks = returnValue.getReturnValue(); getNetwork().setItems(networks); updateNetworks(networks); stopProgress(); })); }
@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public void setItems(java.lang.Iterable value) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> disks = (value != null) ? org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.Disk>Cast(value) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> filteredDisks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType diskStorageType = ((org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType) (getDiskViewType().getEntity())); for (org.ovirt.engine.core.common.businessentities.Disk disk : disks) { if ((diskStorageType == null) || (diskStorageType == (disk.getDiskStorageType()))) { filteredDisks.add(disk); } } super.setItems(filteredDisks); }

@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc setMOMPolicyParameters(java.util.Map<java.lang.String, java.lang.Object> values) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.setMOMPolicyParameters").withParameter("key_value_store", values).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }



@java.lang.Override protected com.google.gwt.user.client.ui.TreeItem getLeafItem(org.ovirt.engine.core.common.job.Step step) { com.google.gwt.user.client.ui.HorizontalPanel panel = new com.google.gwt.user.client.ui.HorizontalPanel(); panel.setSpacing(1); panel.setWidth("100%"); addItemToPanel(panel, new com.google.gwt.user.client.ui.Image(getStatusImage(step.getStatus())), "25px"); addTextBoxToPanel(panel, new org.ovirt.engine.ui.common.widget.label.TextBoxLabel(), step.getDescription(), ""); addValueLabelToPanel(panel, new org.ovirt.engine.ui.webadmin.widget.label.FullDateTimeLabel(), step.getStartTime(), "150px"); addTextBoxToPanel(panel, new org.ovirt.engine.ui.common.widget.label.TextBoxLabel(), ((step.getEndTime()) == null ? "" : "till"), "40px"); addValueLabelToPanel(panel, new org.ovirt.engine.ui.webadmin.widget.label.FullDateTimeLabel(), step.getEndTime(), "150px"); com.google.gwt.user.client.ui.TreeItem treeItem = new com.google.gwt.user.client.ui.TreeItem(panel); treeItem.setUserObject(step.getId()); return treeItem; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Cannot change Cluster in tree context") java.lang.String cannotChangeClusterInTreeContext();
@java.lang.Override protected boolean canDoAction() { if ((hostedEngineHelper.getStorageDomain()) != null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); } if (!(fetchStorageDomainInfo())) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); } if (!(java.util.Arrays.asList(org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.SUPPORTED_DOMAIN_TYPES).contains(heStorageDomain.getStorageType()))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_UNSUPPORTED); } return true; }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.InstallModel model) { driver.edit(model); rbPublicKey.setValue(true); model.setAuthenticationMethod(AuthenticationMethod.PublicKey); displayPassPkWindow(false); rbPassword.addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { model.setAuthenticationMethod(AuthenticationMethod.Password); displayPassPkWindow(true); } }); rbPublicKey.addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { model.setAuthenticationMethod(AuthenticationMethod.PublicKey); displayPassPkWindow(false); } }); userNameEditor.setEnabled(false); networkProviderWidget.edit(model.getNetworkProviderModel()); }
public static void getUnknownImageList(org.ovirt.engine.ui.frontend.AsyncQuery<java.util.List<java.lang.String>> aQuery, org.ovirt.engine.core.compat.Guid storagePoolId, boolean forceRefresh) { org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.getIrsImageList(aQuery, storagePoolId, forceRefresh, ImageFileType.All, new org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.RepoImageToImageFileNameAsyncConverter() { @java.lang.Override protected java.lang.String transform(java.util.ArrayList<java.lang.String> fileNameList, org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.ui.uicommonweb.dataprovider.ImagesDataProvider.ISO_PREFIX) + (super.transform(fileNameList, repoImage)); } @java.lang.Override protected boolean desiredImage(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { return (org.ovirt.engine.core.common.businessentities.storage.ImageFileType.Unknown) == (repoImage.getFileType()); } }); }
private java.lang.String createVG() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CreateVG, new org.ovirt.engine.core.common.vdscommands.CreateVGVDSCommandParameters(org.ovirt.engine.core.bll.storage.AddSANStorageDomainCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.AddSANStorageDomainCommand.getStorageDomain().getId(), org.ovirt.engine.core.bll.storage.AddSANStorageDomainCommand.getParameters().getLunIds(), org.ovirt.engine.core.bll.storage.AddSANStorageDomainCommand.getParameters().isForce())); java.lang.String volumeGroupId = ((java.lang.String) (((returnValue.getReturnValue()) instanceof java.lang.String) ? returnValue.getReturnValue() : null)); return volumeGroupId; }

private void loadCurrentClusterManagementNetwork() { final org.ovirt.engine.ui.frontend.AsyncQuery getManagementNetworkQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { final org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel clusterModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel) (model)); final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork = ((org.ovirt.engine.core.common.businessentities.network.Network) (returnValue)); clusterModel.getManagementNetwork().setSelectedItem(managementNetwork); } }); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getManagementNetwork(getManagementNetworkQuery, getEntity().getId()); }
@java.lang.Override public java.lang.String toString() { return java.lang.String.format("CreateBrickVDSParameters %s, lvName=%s, mountPoint=%s, storageDevices=%s, raidParams=%s, fsType=%s, ", super.toString(), lvName, mountPoint, storageDevices, raidParams, fsType); }
public org.ovirt.engine.core.bll.ValidationResult isAnyDomainInProcess() { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap> poolIsoMaps = getStoragePoolIsoMapDao().getAllForStoragePool(storagePool.getId()); for (org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainIsoMap : poolIsoMaps) { if (((domainIsoMap.getStatus()) != null) && (domainIsoMap.getStatus().isStorageDomainInProcess())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2, java.lang.String.format("$status %1$s", domainIsoMap.getStatus())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
protected boolean acquireLock() { org.ovirt.engine.core.bll.LockIdNameAttribute annotation = getClass().getAnnotation(org.ovirt.engine.core.bll.LockIdNameAttribute.class); boolean returnValue = true; if (annotation != null) { if (!(annotation.isWait())) { returnValue = acquireLockInternal(); } else { acquireLockAndWait(); } } return returnValue; }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getDeviceList() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = new java.util.ArrayList<>(); org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = executeGetDeviceList(new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(org.ovirt.engine.core.bll.storage.GetUnregisteredBlockStorageDomainsQuery.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.GetUnregisteredBlockStorageDomainsQuery.getParameters().getStorageType())); if (returnValue.getSucceeded()) { luns.addAll(returnValue.<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>getReturnValue()); } else { throw new java.lang.RuntimeException(java.lang.String.format("GetDeviceList execution failed. Exception message: %1$s", returnValue.getExceptionString())); } return luns; }
@org.junit.Test public void testStart() throws java.lang.Exception { setUpWindowsGetEntityExpectations(1, false); setUriInfo(setUpActionExpectations(VdcActionType.RunVmOnce, org.ovirt.engine.core.common.action.RunVmOnceParams.class, new java.lang.String[]{ "VmId" }, new java.lang.Object[]{ GUIDS[0] })); verifyActionResponse(resource.start(new org.ovirt.engine.api.model.Action())); }

private boolean correctStorageDomainFormat() { final java.util.Set<org.ovirt.engine.core.common.businessentities.StorageFormatType> supportedStorageFormats = getSupportedStorageFormatSet(org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getVds().getvds_group_compatibility_version()); final org.ovirt.engine.core.common.businessentities.StorageFormatType storageFormat = org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStorageDomain().getStorageFormat(); if (!(supportedStorageFormats.contains(storageFormat))) { return false; } if (storageFormat == (org.ovirt.engine.core.common.businessentities.StorageFormatType.V2)) { final org.ovirt.engine.core.common.businessentities.StorageType storageType = org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStorageDomain().getstorage_type(); if ((storageType != (org.ovirt.engine.core.common.businessentities.StorageType.ISCSI)) && (storageType != (org.ovirt.engine.core.common.businessentities.StorageType.FCP))) { return false; } } return true; }
protected org.ovirt.engine.core.bll.validator.storage.StorageConnectionValidator createStorageConnectionValidator() { java.lang.String connectionId = org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getParameters().getStorageConnectionId(); org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = org.ovirt.engine.core.bll.storage.AttachStorageConnectionToStorageDomainCommand.getStorageServerConnectionDao().get(connectionId); return new org.ovirt.engine.core.bll.validator.storage.StorageConnectionValidator(connection); }

private void mockHostDevices(java.util.List<org.ovirt.engine.core.common.businessentities.HostDevice> extraDevices) { java.util.List<org.ovirt.engine.core.common.businessentities.HostDevice> devices = new java.util.ArrayList<>(); devices.add(pciDevice); devices.add(netDevice); devices.addAll(extraDevices); when(hostDeviceDao.getHostDevicesByHostId(org.ovirt.engine.core.bll.network.host.HostNicVfsConfigHelperImplTest.HOST_ID)).thenReturn(devices); when(hostDeviceDao.getAll()).thenReturn(devices); }

@java.lang.Override protected org.ovirt.engine.api.model.Template doPopulate(org.ovirt.engine.api.model.Template model, org.ovirt.engine.core.common.businessentities.VmTemplate entity) { if (!(model.isSetConsole())) { model.setConsole(new org.ovirt.engine.api.model.Console()); } model.getConsole().setEnabled((!(getConsoleDevicesForEntity(entity.getId()).isEmpty()))); if (!(model.isSetVirtioScsi())) { model.setVirtioScsi(new org.ovirt.engine.api.model.VirtIOSCSI()); } model.getVirtioScsi().setEnabled((!(org.ovirt.engine.api.restapi.util.VmHelper.getInstance().getVirtioScsiControllersForEntity(entity.getId()).isEmpty()))); setRngDevice(model); return model; }



@java.lang.Override protected void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params) { assert op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op1)); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity = nic.getEntity(); entity.setBondName(null); org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel bond = nic.getBond(); if ((bond.getBonded().size()) == 2) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.BREAK_BOND.getCommand(bond, null, allNics).execute(); } }



public void updateConfigureLocalStorageCommandAvailability() { if ((hasAdminSystemPermission) == null) { org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoggedInUser(); if (dbUser == null) { hasAdminSystemPermission = false; updateConfigureLocalStorageCommandAvailability1(); return; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetPermissionsByAdElementId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dbUser.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue response = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if ((response == null) || (!(response.getSucceeded()))) { hasAdminSystemPermission = false; updateConfigureLocalStorageCommandAvailability1(); } else { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Permission> permissions = response.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.Permission permission : permissions) { if (((permission.getObjectType()) == (org.ovirt.engine.core.common.VdcObjectType.System)) && ((permission.getRoleType()) == (org.ovirt.engine.core.common.businessentities.RoleType.ADMIN))) { hasAdminSystemPermission = true; break; } } updateConfigureLocalStorageCommandAvailability1(); } } }, true)); } else { updateConfigureLocalStorageCommandAvailability1(); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.aaa.DbGroup getByName(java.lang.String name) { return getCallsHandler().executeRead("GetGroupByName", org.ovirt.engine.core.dao.DbGroupDAODbFacadeImpl.DbGroupRowMapper.instance, getCustomMapSqlParameterSource().addValue("name", name)); }
private static void addCdDetails(org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.util.Map<java.lang.String, java.lang.Object> struct) { struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); struct.put(VdsProperties.Index, "2"); struct.put(VdsProperties.INTERFACE, VdsProperties.Ide); struct.put(VdsProperties.ReadOnly, java.lang.Boolean.TRUE.toString()); struct.put(VdsProperties.Shareable, java.lang.Boolean.FALSE.toString()); }


@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.RemoveVmCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
protected boolean doDomainsUseConnection(org.ovirt.engine.core.common.businessentities.StorageServerConnections connection) { if (((domains) == null) || (domains.isEmpty())) { domains = getStorageDomainsByConnId(connection.getid()); } return ((domains) != null) && (!(domains.isEmpty())); }
@java.lang.Override protected void postSaveAction(org.ovirt.engine.core.compat.Guid networkGuid, boolean succeeded) { super.postSaveAction(networkGuid, succeeded); if (!succeeded) { return; } org.ovirt.engine.core.compat.Guid networkId = ((getNetwork().getId()) == null) ? networkGuid : getNetwork().getId(); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> actionParameters1 = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel networkClusterModel : getClustersToAttach()) { org.ovirt.engine.core.common.businessentities.network.Network tempVar = new org.ovirt.engine.core.common.businessentities.network.Network(); tempVar.setId(networkId); tempVar.setName(getNetwork().getName()); org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = new org.ovirt.engine.core.common.businessentities.network.NetworkCluster(); networkCluster.setRequired(networkClusterModel.isRequired()); tempVar.setCluster(networkCluster); actionParameters1.add(new org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter(networkClusterModel.getEntity(), tempVar)); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1); if ((((java.lang.Boolean) (getExport().getEntity())) && ((getSubnetName().getEntity()) != null)) && (!(getSubnetName().getEntity().isEmpty()))) { org.ovirt.engine.core.common.businessentities.network.ExternalSubnet subnet = new org.ovirt.engine.core.common.businessentities.network.ExternalSubnet(); subnet.setName(getSubnetName().getEntity()); subnet.setCidr(getSubnetCidr().getEntity()); subnet.setIpVersion(getSubnetIpVersion().getSelectedItem()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.AddSubnetToProvider, new org.ovirt.engine.core.common.action.AddExternalSubnetParameters(subnet, networkId)); } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("note: Permissions containig these operations should be associated with Storage Domain Object (or above)") java.lang.String notePermissionsContainigTheseOperationsShuoldAssociatSdOrAboveRoleTreeTooltip();
public static void GetTemplateListByStorage(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid storageId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> list = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate>(); if (source != null) { for (org.ovirt.engine.core.common.businessentities.VmTemplate template : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate>) (source))) { if ((template.getStatus()) == (org.ovirt.engine.core.common.businessentities.VmTemplateStatus.OK)) { list.add(template); } } java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.VmTemplateByNameComparer()); } return list; } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVmTemplatesFromStorageDomain, new org.ovirt.engine.core.common.queries.StorageDomainQueryParametersBase(storageId), aQuery); }


@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__ADD); addCanDoActionMessage(EngineMessage.VAR__TYPE__VM_TEMPLATE); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.aaa.AuthenticationProfile profile = org.ovirt.engine.core.bll.aaa.SessionDataContainer.getInstance().getProfile(org.ovirt.engine.core.bll.aaa.LogoutUserCommand.getParameters().getSessionId()); if (profile == null) { org.ovirt.engine.core.bll.aaa.LogoutUserCommand.setSucceeded(false); } else { if (((profile.getAuthn().getContext().<java.lang.Long>get(Authn.ContextKeys.CAPABILITIES)) & (Authn.Capabilities.LOGOUT)) != 0) { profile.getAuthn().invoke(new org.ovirt.engine.api.extensions.ExtMap().mput(Base.InvokeKeys.COMMAND, Authn.InvokeCommands.LOGOUT).mput(Authn.InvokeKeys.PRINCIPAL, org.ovirt.engine.core.bll.aaa.SessionDataContainer.getInstance().getPrincipalName(org.ovirt.engine.core.bll.aaa.LogoutUserCommand.getParameters().getSessionId()))); } org.ovirt.engine.core.bll.aaa.SessionDataContainer.getInstance().removeSessionOnLogout(org.ovirt.engine.core.bll.aaa.LogoutUserCommand.getParameters().getSessionId()); org.ovirt.engine.core.bll.aaa.LogoutUserCommand.setSucceeded(true); } }
@java.lang.Override protected void executeCommand() { try { _returnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); getVDSReturnValue().setSucceeded(true); executeVDSCommand(); } catch (java.lang.RuntimeException ex) { setVdsRuntimeError(ex); } }
@javax.ws.rs.Path("{action: (start|stop|shutdown|reboot|suspend|detach|migrate|export|move|ticket|cancelmigration|preview_snapshot|commit_snapshot|undo_snapshot)}/{oid}") public org.ovirt.engine.api.resource.ActionResource getActionSubresource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid);
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (target)); @java.lang.SuppressWarnings("unchecked") Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); for (org.ovirt.engine.core.common.businessentities.VmWatchdog watchdog : watchdogs) { model.getWatchdogAction().setSelectedItem(watchdog.getAction()); model.getWatchdogModel().setSelectedItem(watchdog.getModel()); } }


private void populateVmData(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(vm.getStaticData(), true); org.ovirt.engine.core.bll.utils.VmDeviceUtils.setVmDevices(vm.getStaticData()); }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = true; if ((org.ovirt.engine.core.bll.ActivateVdsCommand.getVds()) == null) { addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_ACTIVATE_VDS_NOT_EXIST); returnValue = false; } if (returnValue && ((org.ovirt.engine.core.bll.ActivateVdsCommand.getVds().getstatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { addCanDoActionMessage(VdcBllMessages.VDS_CANNOT_ACTIVATE_VDS_ALREADY_UP); returnValue = false; } return returnValue; }
private void doBackupCheck() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase alert = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); org.ovirt.engine.core.common.businessentities.EngineBackupLog lastBackup = engineBackupLogDao.getLastSuccessfulEngineBackup(org.ovirt.engine.core.bll.EngineBackupAwarenessManager.SCOPE); if (lastBackup == null) { auditLogDirector.log(alert, AuditLogType.ENGINE_NO_BACKUP); } else { java.lang.Integer backupAlertPeriodInDays = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.BackupAlertPeriodInDays); java.util.Date lastBackupDate = lastBackup.getDoneAt(); long diffInDays = ((java.util.Calendar.getInstance().getTimeInMillis()) - (lastBackupDate.getTime())) / (java.util.concurrent.TimeUnit.DAYS.toMillis(1)); if (diffInDays > backupAlertPeriodInDays) { alert.addCustomValue("Date", lastBackupDate.toString()); auditLogDirector.log(alert, AuditLogType.ENGINE_NO_WARM_BACKUP); } } }
private java.lang.Integer deserializeValue(java.util.Map<java.lang.String, java.lang.Object> entry, java.lang.String curveKey, int conversionRate) { java.util.Map<java.lang.String, java.lang.Integer> parameters = ((java.util.Map<java.lang.String, java.lang.Integer>) (entry.get(curveKey))); if (parameters == null) { return null; } java.lang.Integer average = parameters.get(VdsProperties.HOST_QOS_AVERAGE); return average == null ? null : average / conversionRate; }
@org.junit.Test public void testActivate() throws java.lang.Exception { setUriInfo(setUpActionExpectations(VdcActionType.ActivateVds, org.ovirt.engine.core.common.action.VdsActionParameters.class, new java.lang.String[]{ "VdsId" }, new java.lang.Object[]{ GUIDS[0] })); verifyActionResponse(resource.activate(new org.ovirt.engine.api.model.Action())); }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_VOLUME); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Note: To receive email notifications, ensure that the mail server is configured and the ovirt-event-notifier service is running.") java.lang.String manageEventsPopupInfoLabel();

private void waitForConnect() { try { this.connected.await(policy.getRetryTimeOut(), policy.getTimeUnit()); } catch (java.lang.InterruptedException e) { disconnect(); throw new java.lang.IllegalStateException("Communication interrupted"); } }
@java.lang.Override protected void executeVdsBrokerCommand() { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getBroker().getStorageDomainsList(org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStorageDomainType().getValue(), ((org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStorageType()) != null ? java.lang.Integer.valueOf(org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStorageType().getValue()).toString() : ""), ((org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getPath()) != null ? org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getPath() : "")); org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.proceedProxyReturnValue(); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> domains = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); for (java.lang.String domain : _result.mStorageDomainList) { domains.add(new org.ovirt.engine.core.compat.Guid(domain)); } setReturnValue(domains); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, supportedClusterVersionsSet, supportedEngineVersionsSet, buildName, cpuCores, cpuThreads, cpuFlags, cpuModel, cpuSockets, cpuSpeedMh, onlineCpus, guestOverhead, hooksStr, hostOs, iScsiInitiatorName, ifTotalSpeed, kernelVersion, kvmEnabled, kvmVersion, libvirtVersion, rpmVersion, memCommited, netConfigDirty, nonOperationalReason, pendingVcpusCount, pendingVmemSize, physicalMemMb, previousStatus, reservedMem, softwareVersion, spiceVersion, glusterVersion, status, supportedClusterLevels, supportedEngines, transparentHugePagesState, versionName, vmActive, vmCount, supportedRngSources, vmMigrating, incomingMigrations, outgoingMigrations, vmsCoresCount, hwManufacturer, hwProductName, hwVersion, hwSerialNumber, hwUUID, hwFamily, HBAs, powerManagementControlledByPolicy, kdumpStatus, selinuxEnforceMode, autoNumaBalancing, numaSupport, additionalFeatures, maintenanceReason, updateAvailable, hostDevicePassthroughEnabled, kernelArgs, prettyName, hostedEngineConfigured, reportedDnsResolverConfiguration, inFenceFlow, kernelFeatures); }



@org.junit.Test public void testAddClusterNamedDataCenter() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUpEntityQueryExpectations(VdcQueryType.GetStoragePoolByDatacenterName, org.ovirt.engine.core.common.queries.NameQueryParameters.class, new java.lang.String[]{ "Name" }, new java.lang.Object[]{ NAMES[1] }, setUpStoragePool(1)); setUpCreationExpectations(VdcActionType.AddVdsGroup, org.ovirt.engine.core.common.action.VdsGroupOperationParameters.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, true, true, GUIDS[0], VdcQueryType.GetVdsGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[0] }, getEntity(0)); org.ovirt.engine.api.model.Cluster model = org.ovirt.engine.api.restapi.resource.BackendClustersResourceTest.getModel(0); model.getDataCenter().setName(NAMES[1]); javax.ws.rs.core.Response response = collection.add(model); assertEquals(201, response.getStatus()); assertTrue(((response.getEntity()) instanceof org.ovirt.engine.api.model.Cluster)); verifyModel(((org.ovirt.engine.api.model.Cluster) (response.getEntity())), 0); }
@java.lang.Override protected void executeVmCommand() { super.executeVmCommand(); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.setVm(null); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm().setVmtGuid(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVmStaticDao().update(org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getVm().getStaticData()); }


protected boolean isDetachAllowed(final boolean isRemoveLast) { boolean returnValue = true; if ((getStoragePoolIsoMap()) == null) { returnValue = false; addCanDoActionMessage(EngineMessage.STORAGE_DOMAIN_NOT_ATTACHED_TO_STORAGE_POOL); } else if ((!isRemoveLast) && (isMaster())) { org.ovirt.engine.core.common.businessentities.StorageDomain storage_domains = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomainDao().getAllForStoragePool(org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomain().getStoragePoolId()), new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.StorageDomain>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.StorageDomain a) { return (a.getId().equals(getStorageDomain().getId())) && ((a.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)); } }); if (storage_domains == null) { returnValue = false; addCanDoActionMessage(EngineMessage.ERROR_CANNOT_DETACH_LAST_STORAGE_DOMAIN); } } return returnValue; }
public void testGetConsoleAware(boolean allContent) throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); if (allContent) { java.util.List<java.lang.String> populates = new java.util.ArrayList<java.lang.String>(); populates.add("true"); expect(httpHeaders.getRequestHeader(BackendResource.POPULATE)).andReturn(populates).anyTimes(); setUpGetConsoleExpectations(new int[]{ 0 }); setUpGetVirtioScsiExpectations(new int[]{ 0 }); setUpGetRngDeviceExpectations(new int[]{ 0 }); setUpGetVmOvfExpectations(new int[]{ 0 }); } setUpGetEntityExpectations(1); setUpGetPayloadExpectations(0, 1); setUpGetBallooningExpectations(); setUpGetCertuficateExpectations(); control.replay(); org.ovirt.engine.api.model.VM response = resource.get(); verifyModel(response, 0); verifyCertificate(response); java.util.List<java.lang.String> populateHeader = httpHeaders.getRequestHeader(BackendResource.POPULATE); boolean populated = (populateHeader != null) ? populateHeader.contains("true") : false; assertTrue((populated ? response.isSetConsole() : !(response.isSetConsole()))); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<java.lang.String> domains = org.ovirt.engine.core.bll.adbroker.LdapBrokerUtils.getDomainsList(org.ovirt.engine.core.bll.GetDomainListQuery.getParameters().getFilterInternalDomain()); java.lang.String internalDomainName = org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.AdminDomain); java.util.Collections.sort(domains, new org.ovirt.engine.core.bll.LoginDomainComparator(internalDomainName)); org.ovirt.engine.core.bll.GetDomainListQuery.getQueryReturnValue().setReturnValue(domains); }
@org.junit.Test public void testPosixDcAndNotMatchingCompatiblityVersion() { storagePool.setcompatibility_version(Version.v3_0); storagePool.setStorageType(StorageType.POSIXFS); org.ovirt.engine.core.bll.ValidationResult result = validator.isPosixDcAndMatchingCompatiblityVersion(); assertFalse(result.isValid()); org.ovirt.engine.core.bll.storage.StoragePoolValidatorTest.assertMessage(result, VdcBllMessages.DATA_CENTER_POSIX_STORAGE_NOT_SUPPORTED_IN_CURRENT_VERSION); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepStatus(java.lang.String volumeName, java.lang.String slaveHost, java.lang.String slaveVolumeName) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.geoRepStatus").withParameter("volName", volumeName).withParameter("remoteHost", slaveHost).withParameter("remoteVolName", slaveVolumeName).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc(response); }
@java.lang.Override protected void endWithFailure() { if ((commandCoordinatorUtil.getCommandExecutionStatus(org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCommandId())) != (org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus.EXECUTED)) { changeStorageDomainStatusInTransaction(loadStoragePoolIsoMap(), StorageDomainStatus.Unknown); auditLogDirector.log(this, AuditLogType.USER_DEACTIVATE_STORAGE_DOMAIN_OVF_UPDATE_INCOMPLETE); } else { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Active, org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.getCompensationContext()); } org.ovirt.engine.core.bll.storage.domain.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }

@java.lang.Override protected void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params) { assert op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel; assert op2 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op1)); org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel bond = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel) (op2)); java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> networksToReatach = ((nic.getItems()) != null) ? new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(nic.getItems()) : new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.clearNetworks(nic, allNics); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.attachNetworks(bond, networksToReatach, allNics); nic.getEntity().setBondName(bond.getEntity().getName()); }
java.lang.String getSessionTimeout() { return (sessionTimeout) != null ? sessionTimeout : org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.DEFAULT_SESSION_TIMEOUT; }

private java.lang.String generateTicket() { org.ovirt.engine.core.common.action.SetVmTicketParameters parameters = new org.ovirt.engine.core.common.action.SetVmTicketParameters(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getParameters().getOptions().getVmId(), null, org.ovirt.engine.core.common.console.ConsoleOptions.TICKET_VALIDITY_SECONDS, org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getParameters().getOptions().getGraphicsType()); parameters.setSessionId(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getEngineContext().getSessionId()); parameters.setParametersCurrentUser(org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getUser()); org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getBackend().runInternalAction(VdcActionType.SetVmTicket, parameters); if (result.getSucceeded()) { return result.getActionReturnValue(); } return null; }



protected boolean setAndValidateCpuProfile() { return validate(org.ovirt.engine.core.bll.profiles.CpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVdsGroup().getCompatibilityVersion())); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.StorageDeviceListReturnForXmlRpc getStorageDeviceList() { try { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = vdsServer.glusterStorageDevicesList(); org.ovirt.engine.core.vdsbroker.gluster.StorageDeviceListReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.gluster.StorageDeviceListReturnForXmlRpc(xmlRpcReturnValue); return wrapper; } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
public org.ovirt.engine.core.bll.ValidationResult defaultPoolFlagIsNotSet() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_SETTING_DEFAULT_MAC_POOL_IS_NOT_SUPPORTED).when(macPool.isDefaultPool()); }

public java.util.List<org.ovirt.engine.core.common.businessentities.VmDynamic> getLastVmsList() { return lastVmsList; }
@javax.annotation.PostConstruct private void init() { autoStartVmsToRestart = new java.util.concurrent.CopyOnWriteArraySet<>(getInitialVmsToStart()); int autoStartVmsRunnerIntervalInSeconds = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.AutoStartVmsRunnerIntervalInSeconds); schedulerUtil.scheduleAFixedDelayJob(this, "startFailedAutoStartVms", new java.lang.Class[]{ }, new java.lang.Object[]{ }, autoStartVmsRunnerIntervalInSeconds, autoStartVmsRunnerIntervalInSeconds, java.util.concurrent.TimeUnit.SECONDS); }
protected boolean canAddVm(java.util.ArrayList<java.lang.String> reasons, java.util.Collection<org.ovirt.engine.core.common.businessentities.StorageDomain> destStorages) { org.ovirt.engine.core.common.businessentities.VmStatic vmStaticFromParams = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData(); if (!(canAddVm(reasons, vmStaticFromParams.getName(), org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId(), vmStaticFromParams.getPriority()))) { return false; } if (!(validateCustomProperties(vmStaticFromParams, reasons))) { return false; } if (shouldCheckSpaceInStorageDomains()) { if (!(org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId().equals(getStoragePoolIdFromSourceImageContainer()))) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH.toString()); return false; } for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : destStorages) { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); if (!(validate(storageDomainValidator.isDomainExistAndActive()))) { return false; } } if (!(validateSpaceRequirements())) { return false; } } return org.ovirt.engine.core.bll.VmHandler.validateDedicatedVdsExistOnSameCluster(vmStaticFromParams, org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages()); }
@java.lang.Override public boolean isValid(java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> value, javax.validation.ConstraintValidatorContext context) { java.util.Collection<java.lang.String> staticIps = new java.util.HashSet<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface networkInterface : value) { if (((networkInterface.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.NetworkBootProtocol.StaticIp)) && (validAddress(networkInterface.getAddress()))) { if (staticIps.contains(networkInterface.getAddress())) { return false; } else { staticIps.add(networkInterface.getAddress()); } } } return true; }
protected void closeChannel() { try { if ((this.channel) != null) { this.channel.close(); } } catch (java.io.IOException e) { } finally { this.channel = null; } }
@java.lang.Override protected boolean canMigrateVm(org.ovirt.engine.core.compat.Guid vmGuid, java.util.List<java.lang.String> reasons) { if ((org.ovirt.engine.core.bll.InternalMigrateVmCommand.getVm().getMigrationSupport()) == (org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE)) { return super.canMigrateVm(vmGuid, reasons); } else { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NON_MIGRTABLE); } }

@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); if (!(super.canDoAction())) { return false; } if (!(validate(getBrickValidator().canStopOrCommitRemoveBrick(volume, getParameters().getBricks())))) { return false; } if ((!(getGlusterTaskUtils().isTaskOfType(volume, GlusterTaskType.REMOVE_BRICK))) || (!((getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.STARTED)) || (getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.FINISHED))))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REMOVE_BRICKS_NOT_STARTED); } return true; }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove Permission") java.lang.String removePermissionTitle();
@java.lang.Override protected boolean canDoAction() { boolean retValue = true; if ((org.ovirt.engine.core.bll.pm.StopVdsCommand.getParameters().getParentCommand()) == (org.ovirt.engine.core.common.action.VdcActionType.Unknown)) { retValue = super.canDoAction(); if (((org.ovirt.engine.core.bll.pm.StopVdsCommand.getVds()) != null) && ((org.ovirt.engine.core.bll.pm.StopVdsCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance))) { addCanDoActionMessage(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_STOP); retValue = false; } } org.ovirt.engine.core.bll.pm.StopVdsCommand.getReturnValue().setCanDoAction(retValue); return retValue; }

private void revertPreviousHandlers() { getParameters().decrementExecutionIndex(); if ((getExecutionIndex()) >= 0) { log.errorFormat("Reverting task handler: {0}", getCurrentTaskHandler().getClass().getName()); getParameters().setExecutionReason(CommandExecutionReason.ROLLBACK_FLOW); getCurrentTaskHandler().compensate(); if (!(hasRevertTask())) { revertPreviousHandlers(); } } }


@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)); if ((e.propertyName) == "SelectedItem") { updateUsbNativeMessageVisibility(object); } }
private int calculateCpuUsage(org.ovirt.engine.core.common.businessentities.VDS o1) { return ((o1.getusage_cpu_percent()) * (o1.getcpu_cores())) / (o1.getvds_strength()); }

@java.lang.Override @org.junit.Test public void canDoActionFailedWrongPlugStatus() throws java.lang.Exception { mockVmStatusUp(); mockInterfaceList(); cretaeDiskWrongPlug(false); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(EngineMessage.HOT_UNPLUG_DISK_IS_NOT_PLUGGED.toString())); }


@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.ProviderType providerType = org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getParameters().getProviderType(); if (providerType == null) { setReturnValue(org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getDbFacade().getProviderDao().getAll()); } else { setReturnValue(org.ovirt.engine.core.bll.provider.GetAllProvidersQuery.getDbFacade().getProviderDao().getAllByType(providerType)); } }
@java.lang.Override public java.lang.String toString() { return ((serializeId(getFirst())) + '.') + (serializeId(getSecond())); }
protected boolean canDoAddVmCommand() { boolean returnValue = false; returnValue = areParametersLegal(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages()); returnValue = (returnValue && (checkNumberOfMonitors())) && (checkSingleQxlDisplay()); returnValue = ((returnValue && (checkPciAndIdeLimit(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getNumOfMonitors(), getVmInterfaces(), getVmDisks(), isVirtioScsiEnabled(), org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages()))) && (canAddVm(org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages(), destStorages.values()))) && (hostToRunExist()); return returnValue; }
private void setSessionUser(org.ovirt.engine.api.model.Session session) { org.ovirt.engine.api.model.User user = getUserResource().getUserByNameAndDomain(session.getUser().getUserName(), session.getUser().getDomain().getName()); if (user != null) { session.getUser().setId(user.getId()); session.getUser().setHref(user.getHref()); session.getUser().getDomain().setId(user.getDomain().getId()); session.getUser().getDomain().setHref(user.getDomain().getHref()); } }

protected void updateMetadataDevices() { if (((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getVds().getId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommand.getStorageDomain().getStorageStaticData()); } }
@org.junit.Test public void testListWithEveryonePermissions() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations(null); setUpGetEntityExpectations(VdcQueryType.GetDbUserByUserId, org.ovirt.engine.core.common.queries.GetDbUserByUserIdParameters.class, new java.lang.String[]{ "UserId" }, new java.lang.Object[]{ GUIDS[1] }, getUserByIdx(1)); setUpQueryExpectations("", null, org.ovirt.engine.api.restapi.resource.EVERYONE); collection.setUriInfo(uriInfo); verifyCollection(getCollection()); }
private java.lang.String resolveMessage(java.lang.String message, java.util.Map<java.lang.String, java.util.LinkedList<java.lang.String>> variables) { java.lang.String returnValue = message; com.google.gwt.regexp.shared.RegExp regex = com.google.gwt.regexp.shared.RegExp.compile(org.ovirt.engine.ui.frontend.ErrorTranslator.VARIABLE_PATTERN, "gi"); int fromIndex = 0; int length = message.length(); com.google.gwt.regexp.shared.MatchResult result; while (fromIndex < length) { result = regex.exec(message); if (result == null) { break; } int index = result.getIndex(); java.lang.String match = result.getGroup(0); java.lang.String key = match.substring(2, ((match.length()) - 1)); if (variables.containsKey(key)) { java.util.LinkedList<java.lang.String> values = variables.get(key); java.lang.String value = ((values.size()) == 1) ? values.getFirst() : (values.size()) > 1 ? values.removeFirst() : ""; returnValue = returnValue.replace(match, value); } } return returnValue; }
protected boolean initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); org.ovirt.engine.core.compat.Guid vdsToRunOn = org.ovirt.engine.core.bll.scheduling.SchedulingManager.getInstance().schedule(org.ovirt.engine.core.bll.MigrateVmCommand.getVdsGroup(), org.ovirt.engine.core.bll.MigrateVmCommand.getVm(), getVdsBlackList(), getVdsWhiteList(), getDestinationVdsId(), new java.util.ArrayList<java.lang.String>(), new org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(this), org.ovirt.engine.core.bll.MigrateVmCommand.getCorrelationId()); setDestinationVdsId(vdsToRunOn); if ((vdsToRunOn != null) && (!(Guid.Empty.equals(vdsToRunOn)))) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn); } org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); if ((vdsToRunOn != null) && (vdsToRunOn.equals(Guid.Empty))) { return false; } if (((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { return false; } return true; }

private void validateNicForNotRemovingLabeledNetworks(java.lang.String network, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic) { org.ovirt.engine.core.common.businessentities.network.Network removedNetwork = getExistingClusterNetworks().get(network); if (((org.ovirt.engine.core.utils.NetworkUtils.isLabeled(nic)) && (removedNetwork != null)) && (nic.getLabels().contains(removedNetwork.getLabel()))) { addViolation(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_LABELED_NETWORK_FROM_NIC, network); } }
private void verifyLocalDataCenterNoCluster(final java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.StoragePool>> filteredDataCenters, final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = ((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue)); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } } localDataCenters.removeAll(localDataCenterWithCluster); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(dataCenter)); } displayAddDataCenter(filteredDataCenters); } })); }

@java.lang.Override protected boolean canDoAction() { if ((getProvider()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST); } org.ovirt.engine.core.bll.provider.ProviderProxy providerProxy = getProviderProxy(); if (providerProxy == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_NOT_SUPPORTED, java.lang.String.format("$providerType %1$s", getProvider().getType())); } org.ovirt.engine.core.bll.provider.ProviderValidator validator = getProviderProxy().getProviderValidator(); return (validate(validator.nameAvailable())) && (validate(validator.validateAddProvider())); }
public java.lang.String getTemplate(java.lang.String docParams, org.ovirt.engine.sdk.entities.DetailedLink detailedLink) { java.lang.StringBuffer methodExtraParamsDef = new java.lang.StringBuffer(); java.lang.StringBuffer headersToBuild = new java.lang.StringBuffer(); java.lang.StringBuffer urlParamsToBuild = new java.lang.StringBuffer(); java.lang.StringBuffer templateBuff = new java.lang.StringBuffer(); if ((((detailedLink.isSetRequest()) && (detailedLink.getRequest().isSetUrl())) && (detailedLink.getRequest().getUrl().isSetParametersSets())) && (!(detailedLink.getRequest().getUrl().getParametersSets().isEmpty()))) { for (org.ovirt.engine.sdk.entities.ParametersSet parametersSet : detailedLink.getRequest().getUrl().getParametersSets()) { for (org.ovirt.engine.sdk.entities.Parameter parameter : parametersSet.getParameters()) { addUrlParams(methodExtraParamsDef, urlParamsToBuild, parameter); } methodExtraParamsDef = addHeaderParams(detailedLink, methodExtraParamsDef, headersToBuild, urlParamsToBuild, templateBuff); } } else { methodExtraParamsDef = addHeaderParams(detailedLink, methodExtraParamsDef, headersToBuild, urlParamsToBuild, templateBuff); } if ((methodExtraParamsDef.length()) > 0) { templateBuff.append(getTemplate(detailedLink.getRequest().getBody().getType(), org.ovirt.engine.sdk.codegen.utils.StringUtils.combine(docParams, org.ovirt.engine.sdk.codegen.documentation.DocsGen.generateUrlAndHeadersParams(detailedLink)), methodExtraParamsDef.toString(), headersToBuild.toString(), urlParamsToBuild.toString())); } return templateBuff.toString(); }


protected void updateParameters() { java.util.Map<org.ovirt.engine.core.common.businessentities.VM, java.util.List<org.ovirt.engine.core.common.action.MoveDiskParameters>> vmDiskParamsMap = createVmDiskParamsMap(); for (java.util.Map.Entry<org.ovirt.engine.core.common.businessentities.VM, java.util.List<org.ovirt.engine.core.common.action.MoveDiskParameters>> vmDiskParamsEntry : vmDiskParamsMap.entrySet()) { org.ovirt.engine.core.common.businessentities.VM vm = vmDiskParamsEntry.getKey(); java.util.List<org.ovirt.engine.core.common.action.MoveDiskParameters> moveDiskParamsList = vmDiskParamsEntry.getValue(); if (((vm == null) || (vm.isDown())) || (areAllDisksPluggedToVm(moveDiskParamsList, false))) { moveDiskParametersList.addAll(moveDiskParamsList); } else if (vm.isRunningAndQualifyForDisksMigration()) { if (!(areAllDisksPluggedToVm(moveDiskParamsList, true))) { addDisksDeactivatedMessage(moveDiskParamsList); continue; } liveMigrateVmDisksParametersList.add(createLiveMigrateVmDisksParameters(moveDiskParamsList, vm.getId())); } else { addInvalidVmStateMessage(vm); } } }

private boolean networksUniquelyConfiguredOnHost(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure) { boolean passed = true; java.util.Set<org.ovirt.engine.core.compat.Guid> networkIds = new java.util.HashSet(attachmentsToConfigure.size()); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : attachmentsToConfigure) { if (networkIds.contains(attachment.getNetworkId())) { org.ovirt.engine.core.common.businessentities.network.Network network = clusterNetworks.get(attachment.getNetworkId()); addViolation(VdcBllMessages.NETWORKS_ALREADY_ATTACHED_TO_IFACES, network.getName()); passed = false; } else { networkIds.add(attachment.getNetworkId()); } } return passed; }

@java.lang.Override public int compareTo(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<T> o) { return org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator.comp(getName(), o.getName()); }

public boolean evaluate(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm) { if (!(org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasMemoryToRunVM(vds, vm))) { if ((vds.getPendingVmemSize()) == 0) { return false; } org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker.log.debug("not enough memory on host. throttling..."); delayer.delay(vds.getId()); vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vds.getId()); return org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasMemoryToRunVM(vds, vm); } return true; }
@org.junit.Test public void testGetEntityNameByIdAndTypeForRole() { org.ovirt.engine.core.common.businessentities.roles role = dbFacade.getRoleDAO().get(org.ovirt.engine.core.dao.DbFacadeDAOTest.ROLE_ID); assertNotNull(role); java.lang.String name = role.getname(); assertTrue(name.equals(dbFacade.getEntityNameByIdAndType(org.ovirt.engine.core.dao.DbFacadeDAOTest.ROLE_ID, VdcObjectType.Role))); }

private void refreshBootParameters(org.ovirt.engine.core.common.action.RunVmParams runVmParameters) { refreshBootSequenceParameter(runVmParameters); if (!(org.apache.commons.lang.StringUtils.isEmpty(runVmParameters.getinitrd_url()))) { org.ovirt.engine.core.bll.RunVmCommand.getVm().setinitrd_url(runVmParameters.getinitrd_url()); } if (!(org.apache.commons.lang.StringUtils.isEmpty(runVmParameters.getkernel_url()))) { org.ovirt.engine.core.bll.RunVmCommand.getVm().setkernel_url(runVmParameters.getkernel_url()); } if (!(org.apache.commons.lang.StringUtils.isEmpty(runVmParameters.getkernel_params()))) { org.ovirt.engine.core.bll.RunVmCommand.getVm().setkernel_params(runVmParameters.getkernel_params()); } if (!(org.apache.commons.lang.StringUtils.isEmpty(runVmParameters.getCustomProperties()))) { org.ovirt.engine.core.bll.RunVmCommand.getVm().setCustomProperties(runVmParameters.getCustomProperties()); } org.ovirt.engine.core.bll.RunVmCommand.getVm().setLastStartTime(new java.util.Date()); }
private void refreshReposIfNeeded(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType, boolean forceRefresh) { org.apache.commons.lang.mutable.MutableLong lastRefreshed = domainsLastRefreshedTime.computeIfAbsent(storageDomainId, ( k) -> new org.apache.commons.lang.mutable.MutableLong((-1))); if (forceRefresh || (shouldInvalidateCache(lastRefreshed.longValue()))) { synchronized(lastRefreshed) { if (forceRefresh || (shouldInvalidateCache(lastRefreshed.longValue()))) { boolean refreshSucceeded = refreshRepos(storageDomainId, imageType); lastRefreshed.setValue(java.lang.System.currentTimeMillis()); if (!refreshSucceeded) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.IMAGES_NOT_SUPPORTED_ERROR); } } } } }

@java.lang.Override protected void executeCommand() { final org.ovirt.engine.core.common.businessentities.StorageDomain dom = org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand.getStorageDomain(); org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand.getVds(); boolean format = org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand.getParameters().getDoFormat(); org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand.setSucceeded(false); if (detachLocalStorageDomain(dom)) { return; } if (format) { org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, org.ovirt.engine.core.common.errors.EngineFault> connectResult = connectStorage(); if (!(connectResult.getFirst())) { org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand.getReturnValue().setFault(connectResult.getSecond()); return; } boolean failed = !(formatStorage(dom, vds)); disconnectStorage(); if (failed) { return; } } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Object>() { @java.lang.Override public java.lang.Object runInTransaction() { getStorageHelper(dom).storageDomainRemoved(dom.getStorageStaticData()); getStorageDomainDao().remove(dom.getId()); return null; } }); org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand.setSucceeded(true); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.Template incoming, org.ovirt.engine.core.common.businessentities.VmTemplate entity) { org.ovirt.engine.core.common.businessentities.VmTemplate updated = getMapper(modelType, org.ovirt.engine.core.common.businessentities.VmTemplate.class).map(incoming, entity); updated.setUsbPolicy(org.ovirt.engine.api.restapi.types.VmMapper.getUsbPolicyOnUpdate(incoming.getUsb(), entity.getUsbPolicy(), lookupCluster(updated.getVdsGroupId()))); return new org.ovirt.engine.core.common.action.UpdateVmTemplateParameters(updated); }

protected org.ovirt.engine.core.dao.gluster.GlusterBrickDao getGlusterBrickDao() { return GlusterCommandBase.getDbFacade().getGlusterBrickDao(); }

protected org.ovirt.engine.core.vdsbroker.vdsbroker.FenceStatusReturnForXmlRpc fenceNode(org.ovirt.engine.core.common.businessentities.pm.FenceActionType actionType, boolean applyFencingPolicy) { return FenceVdsVDSCommand.getBroker().fenceNode(FenceVdsVDSCommand.getParameters().getFenceAgent().getIp(), ((FenceVdsVDSCommand.getParameters().getFenceAgent().getPort()) == null ? "" : FenceVdsVDSCommand.getParameters().getFenceAgent().getPort().toString()), FenceVdsVDSCommand.getParameters().getFenceAgent().getType(), FenceVdsVDSCommand.getParameters().getFenceAgent().getUser(), FenceVdsVDSCommand.getParameters().getFenceAgent().getPassword(), actionType.getValue(), "", getVdsFenceOptions(FenceVdsVDSCommand.getParameters().getFenceAgent().getType(), FenceVdsVDSCommand.getParameters().getFenceAgent().getOptions(), getProxyVds().getVdsGroupCompatibilityVersion().toString()), (applyFencingPolicy ? convertFencingPolicy() : null)); }

void localize() { applicationTitle.setText(dynamicMessages.applicationTitle()); copyrightNotice.setText(dynamicMessages.copyRightNotice()); versionLabel.setText(dynamicMessages.ovirtVersionAbout()); }

@org.junit.Test public void testTemplateOvfImportWithoutDbGenerationBackwardCompatiliblity() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmTemplate template = org.ovirt.engine.core.utils.ovf.OvfManagerTest.createVmTemplate(); java.lang.String xml = manager.ExportTemplate(template, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(), Version.v3_0); assertNotNull(xml); java.lang.String replacedXml = xml.replaceAll("Generation", "test_replaced"); final org.ovirt.engine.core.common.businessentities.VmTemplate newtemplate = new org.ovirt.engine.core.common.businessentities.VmTemplate(); manager.ImportTemplate(replacedXml, newtemplate, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(), new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>()); assertEquals("imported template is different than expected", template, newtemplate); assertTrue("imported db generation is different than expected", ((newtemplate.getDbGeneration()) == 1)); }
@org.junit.Test public void testHandleActionResult_isRaiseErrorModalPanel_withActionMessageSize1() { org.ovirt.engine.core.common.errors.VdcFault testFault = new org.ovirt.engine.core.common.errors.VdcFault(); when(mockEventsHandler.isRaiseErrorModalPanel(VdcActionType.AddDisk, testFault)).thenReturn(true); java.lang.Object testState = new java.lang.Object(); org.ovirt.engine.core.common.action.VdcActionParametersBase testParameters = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnValue.setFault(testFault); returnValue.setDescription("This is a description"); returnValue.getCanDoActionMessages().add("Message 1"); returnValue.setCanDoAction(false); org.ovirt.engine.ui.frontend.Frontend.handleActionResult(VdcActionType.AddDisk, testParameters, returnValue, mockActionCallback, testState, false); verify(mockActionCallback).executed(callbackParam.capture()); assertEquals("Parameters should match", testParameters, callbackParam.getValue().getParameters()); assertEquals("Result should match", returnValue, callbackParam.getValue().getReturnValue()); assertEquals("States should match", testState, callbackParam.getValue().getState()); assertEquals("Action type should match", VdcActionType.AddDisk, callbackParam.getValue().getActionType()); org.mockito.ArgumentCaptor<org.ovirt.engine.ui.frontend.FrontendFailureEventArgs> failureCaptor = org.mockito.ArgumentCaptor.forClass(org.ovirt.engine.ui.frontend.FrontendFailureEventArgs.class); verify(mockFrontendFailureEvent).raise(eq(org.ovirt.engine.ui.frontend.Frontend.class), failureCaptor.capture()); assertEquals("Descriptions should match", "This is a description", failureCaptor.getValue().getMessage().getDescription()); assertEquals("Text should match", "Message 1", failureCaptor.getValue().getMessage().getText()); }

public void calculateFreeVirtualMemory() { if ((((getMemCommited()) != null) && ((getPhysicalMemMb()) != null)) && ((getReservedMem()) != null)) { maxSchedulingMemory = (((getMaxVdsMemoryOverCommit()) * (getPhysicalMemMb())) / 100.0F) - ((getMemCommited()) + (getReservedMem())); maxSchedulingMemory = ((maxSchedulingMemory) > 0) ? maxSchedulingMemory : 0; } }
@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, org.ovirt.engine.core.common.businessentities.VmBase vm) { super.build(model, vm); vm.setAllowConsoleReconnect(model.getAllowConsoleReconnect().getEntity()); vm.setVmType(model.getVmType().getSelectedItem()); vm.setVdsGroupId(model.getSelectedCluster().getId()); vm.setTimeZone(((model.getTimeZone().getIsAvailable()) && ((model.getTimeZone().getSelectedItem()) != null) ? model.getTimeZone().getSelectedItem().getTimeZoneKey() : "")); vm.setIsoPath((model.getCdImage().getIsChangable() ? model.getCdImage().getSelectedItem() : "")); vm.setDeleteProtected(model.getIsDeleteProtected().getEntity()); vm.setOsId(model.getOSType().getSelectedItem()); vm.setVncKeyboardLayout(model.getVncKeyboardLayout().getSelectedItem()); vm.setSerialNumberPolicy(model.getSerialNumberPolicy().getSelectedSerialNumberPolicy()); vm.setCustomSerialNumber(model.getSerialNumberPolicy().getCustomSerialNumber().getEntity()); vm.setBootMenuEnabled(model.getBootMenuEnabled().getEntity()); vm.setSpiceFileTransferEnabled(model.getSpiceFileTransferEnabled().getEntity()); vm.setSpiceCopyPasteEnabled(model.getSpiceCopyPasteEnabled().getEntity()); }


public static void GetRedirectServletReportsPage(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.String) (source)) : ""; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.RedirectServletReportsPage, org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion), aQuery); }
@java.lang.SuppressWarnings({ "rawtypes", "unchecked" }) private static java.lang.Object parseValue(java.lang.String value, java.lang.String name, java.lang.Class<?> fieldType) { if (value == null) { return null; } try { if (fieldType == (java.lang.Integer.class)) { return java.lang.Integer.parseInt(value); } else if (fieldType == (java.lang.Boolean.class)) { return java.lang.Boolean.parseBoolean(value); } else if (fieldType == (org.ovirt.engine.core.compat.Version.class)) { return new org.ovirt.engine.core.compat.Version(value); } else if (fieldType == (java.util.Date.class)) { return new java.text.SimpleDateFormat("k:m:s").parse(value); } else if (fieldType == (java.lang.Double.class)) { return java.lang.Double.parseDouble(value); } else if (java.util.Map.class.isAssignableFrom(fieldType)) { if ((org.apache.commons.lang.StringUtils.startsWith(value, "{")) && (org.apache.commons.lang.StringUtils.endsWith(value, "}"))) { return new org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer().deserialize(value, java.util.HashMap.class); } else { return value; } } else if (fieldType.isEnum()) { return java.lang.Enum.valueOf(((java.lang.Class<java.lang.Enum>) (fieldType)), value.toUpperCase()); } else { return value; } } catch (java.lang.Exception e2) { org.ovirt.engine.core.dal.dbbroker.generic.DBConfigUtils.log.errorFormat("Could not parse option {0} value.", name); return null; } }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase object) { driver.edit(object); initLists(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName; if (propName.equals("IsValid")) { onIsValidPropertyChange(object); } } }); }
protected <T> T doGetEntity(java.lang.Class<T> clz, org.ovirt.engine.core.common.queries.VdcQueryType query, org.ovirt.engine.core.common.queries.VdcQueryParametersBase queryParams, java.lang.String identifier) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = runQuery(query, queryParams); if ((!(result.getSucceeded())) || ((result.getReturnValue()) == null)) { if ((result.getExceptionString()) != null) { throw new org.ovirt.engine.api.restapi.resource.BackendFailureException(localize(result.getExceptionString())); } else { throw new org.ovirt.engine.api.restapi.resource.EntityNotFoundException(identifier); } } return clz.cast(result.getReturnValue()); }
protected void removeVmNetwork() { new org.ovirt.engine.core.bll.network.VmInterfaceManager().removeAll(macAdded, getVmId()); }
@java.lang.Override protected boolean canDoAction() { if ((((!(isValidParametersList())) || (!(isLiveMigrationEnabled()))) || (!(checkImagesStatus()))) || (!(isValidSpaceRequirements()))) { return false; } for (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters : getParameters().getParametersList()) { org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getReturnValue().setCanDoAction(((((isDiskNotShareable(parameters.getImageId())) && (isTemplateInDestStorageDomain(parameters.getImageId(), parameters.getStorageDomainId()))) && (validateSourceStorageDomain(parameters.getImageId(), parameters.getSourceStorageDomainId()))) && (validateDestStorage(parameters.getImageId(), parameters.getStorageDomainId())))); if (!(org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getReturnValue().getCanDoAction())) { return false; } } return true; }


@org.junit.Test public void validateSpaceNotWithinThreshold() throws java.lang.Exception { initCommand(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(storageDomainValidator).isDomainWithinThresholds(); doReturn(storageDomainValidator).when(command).createStorageDomainValidator(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); assertFalse(command.validateSpaceRequirements()); }

public static boolean validateDedicatedVdsExistOnSameCluster(org.ovirt.engine.core.common.businessentities.VmBase vm, java.util.ArrayList<java.lang.String> canDoActionMessages) { boolean result = true; for (org.ovirt.engine.core.compat.Guid vdsId : vm.getDedicatedVmForVdsList()) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vdsId); if (vds == null) { if (canDoActionMessages != null) { canDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_DEDICATED_VDS_DOES_NOT_EXIST.toString()); } result = false; } else if (!(java.util.Objects.equals(vm.getVdsGroupId(), vds.getVdsGroupId()))) { if (canDoActionMessages != null) { canDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_DEDICATED_VDS_NOT_IN_SAME_CLUSTER.toString()); } result = false; } } return result; }
protected void updateUsbNativeMessageVisibility(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel object) { org.ovirt.engine.core.compat.Version vdsGroupVersion = clusterVersionOrNull(object); changeApplicationLevelVisibility(nativeUsbWarningMessage, ((((object.getUsbPolicy().getSelectedItem()) == (org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE)) && (vdsGroupVersion != null)) && (!((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.MigrationSupportForNativeUsb, vdsGroupVersion.getValue())))))); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.dao.DbGroupDAO dao = org.ovirt.engine.core.bll.AddGroupCommand.getAdGroupDAO(); org.ovirt.engine.core.common.businessentities.DbGroup dbGroup = dao.getByExternalId(org.ovirt.engine.core.bll.AddGroupCommand.getParameters().getDirectory(), groupRecord.<java.lang.String>get(GroupRecord.NAME)); if (dbGroup == null) { dbGroup = org.ovirt.engine.core.aaa.DirectoryUtils.mapGroupRecordToDbGroup(org.ovirt.engine.core.bll.AddGroupCommand.getParameters().getDirectory(), groupRecord); dbGroup.setId(org.ovirt.engine.core.compat.Guid.newGuid()); dao.save(dbGroup); } else { org.ovirt.engine.core.compat.Guid id = dbGroup.getId(); dbGroup = org.ovirt.engine.core.aaa.DirectoryUtils.mapGroupRecordToDbGroup(org.ovirt.engine.core.bll.AddGroupCommand.getParameters().getDirectory(), groupRecord); dbGroup.setId(id); dao.update(dbGroup); } setActionReturnValue(dbGroup.getId()); org.ovirt.engine.core.bll.AddGroupCommand.setSucceeded(true); }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = createSnapshotsValidator(); if ((!(validate(snapshotsValidator.snapshotExists(getSnapshot())))) || (!(validate(snapshotsValidator.vmNotDuringSnapshot(getSnapshot().getVmId()))))) { return false; } vmFromConfiguration = getVmFromConfiguration(); if ((vmFromConfiguration) == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_SNAPSHOT_HAS_NO_CONFIGURATION); addCanDoActionMessageVariable("VmName", org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmName()); addCanDoActionMessageVariable("SnapshotName", org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getSnapshotName()); return false; } if (!(super.canDoAction())) { return false; } if (!(checkCanDisableVirtIoScsi())) { return false; } return true; }



@java.lang.Override public void init(final T model) { super.init(model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel model = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkModel) (sender)); java.lang.String propertyName = args.propertyName; if ("Message".equals(propertyName)) { getView().setMessageLabel(model.getMessage()); } } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleSubnetVisibility(model.getExport().getEntity()); model.getExport().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { getView().toggleSubnetVisibility(model.getExport().getEntity()); } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().toggleProfilesVisibility(model.getProfiles().getIsAvailable()); model.getProfiles().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsAvailable".equals(args.propertyName)) { getView().toggleProfilesVisibility(model.getProfiles().getIsAvailable()); } } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().setCommand(model.getAddQosCommand()); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().getQosButton().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { getView().getQosButton().getCommand().execute(); } }); org.ovirt.engine.ui.webadmin.section.main.presenter.popup.AbstractNetworkPopupPresenterWidget.getView().addMtuEditor(); }


@javax.ws.rs.Path("{action: (start|stop|shutdown|reboot|suspend|detach|migrate|export|move|ticket|cancelmigration|preview_snapshot|commit_snapshot|undo_snapshot|clone|maintenance)}/{oid}") public org.ovirt.engine.api.resource.ActionResource getActionSubresource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid);
@java.lang.Override public void initSelectedProfile(org.ovirt.engine.ui.uicommonweb.models.ListModel profileList, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface networkInterface) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> profiles = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>) (profileList.getItems())); profiles = (profiles == null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>() : profiles; for (org.ovirt.engine.core.common.businessentities.network.VnicProfileView profile : profiles) { if ((((org.ovirt.engine.ui.uicommonweb.models.vms.NewProfileBehavior.ENGINE_NETWORK_NAME) != null) && (profile != null)) && (org.ovirt.engine.ui.uicommonweb.models.vms.NewProfileBehavior.ENGINE_NETWORK_NAME.equals(profile.getNetworkName()))) { profileList.setSelectedItem(profile); return; } } profileList.setSelectedItem(((profiles.size()) > 0 ? profiles.get(0) : org.ovirt.engine.core.common.businessentities.network.VnicProfileView.EMPTY)); }
@org.junit.Test public void testIsUpdInvalid() { storagePool.setStatus(StoragePoolStatus.NonResponsive); assertThat(validator.isUp(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND)); }
@org.junit.Test public void appendCustomValueAppend() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String newVal = "bar"; final java.lang.String sep = "_"; b.addCustomValue(key, value); b.appendCustomValue(key, newVal, sep); final java.lang.String s = b.getCustomValue(key); assertEquals(((value + sep) + newVal), s); }
private void updateMemoryBoxVisibility() { org.ovirt.engine.core.common.businessentities.VM vm = model.getVm(); if (vm == null) { return; } boolean memorySnapshotSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MemorySnapshotSupported, vm.getVdsGroupCompatibilityVersion().toString()))); memoryEditor.setVisible((memorySnapshotSupported && (vm.isRunning()))); if (!(memoryEditor.isVisible())) { model.getMemory().setEntity(false); } }
protected void addVmStatic() { logImportEvents(); getVm().getStaticData().setId(getVmId()); getVm().getStaticData().setCreationDate(new java.util.Date()); getVm().getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getClusterId()); getVm().getStaticData().setMinAllocatedMem(computeMinAllocatedMem()); getVm().getStaticData().setQuotaId(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getQuotaId()); if (!(org.ovirt.engine.core.bll.VmHandler.validateDedicatedVdsExistOnSameCluster(getVm().getStaticData(), null))) { getVm().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } if (((getVm().getOriginalTemplateGuid()) != null) && (!(VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVm().getOriginalTemplateGuid())))) { org.ovirt.engine.core.common.businessentities.VmTemplate originalTemplate = org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getVmTemplateDao().get(getVm().getOriginalTemplateGuid()); if (originalTemplate != null) { getVm().getStaticData().setOriginalTemplateName(originalTemplate.getName()); } } if (org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().getCopyCollapse()) { getVm().setVmtGuid(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); } org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getVmStaticDao().save(getVm().getStaticData()); org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCompensationContext().snapshotNewEntity(getVm().getStaticData()); }

@java.lang.Override public void rerun() { org.ovirt.engine.core.bll.MigrateVmCommand.setVm(null); if (((org.ovirt.engine.core.bll.MigrateVmCommand.getVm()) != null) && ((org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up))) { determineMigrationFailureForAuditLog(); setVdsDestinationId(null); super.rerun(); } else { failedToMigrate(); _isRerun = true; } }
@org.junit.Test public void updateSeveralConnectionsWithSamePath() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0); parameters.setStorageServerConnection(newNFSConnection); java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>(); org.ovirt.engine.core.common.businessentities.StorageServerConnections conn1 = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); conn1.setconnection(newNFSConnection.getconnection()); conn1.setid(newNFSConnection.getid()); org.ovirt.engine.core.common.businessentities.StorageServerConnections conn2 = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); conn2.setconnection(newNFSConnection.getconnection()); conn2.setid(org.ovirt.engine.core.compat.Guid.newGuid().toString()); connections.add(conn1); connections.add(conn2); when(storageConnDao.getAllForStorage(newNFSConnection.getconnection())).thenReturn(connections); when(storageConnDao.get(newNFSConnection.getid())).thenReturn(oldNFSConnection); doReturn(true).when(command).isConnWithSameDetailsExists(newNFSConnection, null); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_ALREADY_EXISTS); }


protected boolean isUnregisteredDiskExistsForCopyTemplate() { if ((isTemplate()) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy))) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.UnregisteredDisk> unregisteredDisks = unregisteredDisksDao.getByDiskIdAndStorageDomainId(getImage().getId(), org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()); if (!(unregisteredDisks.isEmpty())) { return true; } } return false; }
private void onAddBricksInternal() { org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel volumeBrickModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickModel) (getWindow())); cancelConfirmation(); if (!(volumeBrickModel.validate())) { return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType selectedVolumeType = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeType) (getTypeList().getSelectedItem())); if (selectedVolumeType.isReplicatedType()) { getReplicaCount().setEntity(volumeBrickModel.getReplicaCount().getEntity()); } if (selectedVolumeType.isStripedType()) { getStripeCount().setEntity(volumeBrickModel.getStripeCount().getEntity()); } java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> brickList = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); for (java.lang.Object object : volumeBrickModel.getBricks().getItems()) { org.ovirt.engine.ui.uicommonweb.models.EntityModel entityModel = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (object)); brickList.add(entityModel); } volumeBrickModel.getBricks().setItems(null); org.ovirt.engine.ui.uicommonweb.models.ListModel brickListModel = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); brickListModel.setItems(brickList); brickListModel.setSelectedItems(brickList); setBricks(brickListModel); setWindow(null); }


@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> getAllForStoragePool(org.ovirt.engine.core.compat.Guid pool) { return getCallsHandler().executeReadList("Getstorage_server_connectionsByStoragePoolId", org.ovirt.engine.core.dao.StorageServerConnectionDAODbFacadeImpl.mapper, getCustomMapSqlParameterSource().addValue("storage_pool_id", pool)); }

@java.lang.Override protected void executeVmCommand() { org.ovirt.engine.core.compat.Guid createdSnapshotId = getSnapshotDao().getId(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId(), SnapshotType.ACTIVE); getParameters().setSnapshotType(determineSnapshotType()); getSnapshotDao().updateId(createdSnapshotId, newActiveSnapshotId); setActionReturnValue(createdSnapshotId); org.ovirt.engine.core.bll.memory.MemoryImageBuilder memoryImageBuilder = getMemoryImageBuilder(); addSnapshotToDB(createdSnapshotId, memoryImageBuilder); createSnapshotsForDisks(); fastForwardDisksToActiveSnapshot(); memoryImageBuilder.build(); if (getTaskIdList().isEmpty()) { getParameters().setTaskGroupSuccess(true); incrementVmGeneration(); } org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.setSucceeded(true); }


@org.ovirt.engine.ui.uicompat.DefaultMessage("Please use your VNC client to connect to this VM.<br/><br/>Use the following parameters:<br/>IP:Port -- {0}:{1}<br/><br/> Password: {2}<br/>(note: this password is valid for {3} seconds)") java.lang.String vncInfoMessage(java.lang.String hostIp, int port, java.lang.String password, int seconds);


@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Architecture.class, to = org.ovirt.engine.core.common.businessentities.ArchitectureType.class) public static org.ovirt.engine.core.common.businessentities.ArchitectureType map(org.ovirt.engine.api.model.Architecture model, org.ovirt.engine.core.common.businessentities.ArchitectureType template) { if (model != null) { switch (model) { case UNDEFINED : return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined; case X86_64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.x86_64; case PPC64 : return org.ovirt.engine.core.common.businessentities.ArchitectureType.ppc64; default : return null; } } return null; }

@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnaValue = runVdsCommand(VDSCommandType.StopRebalanceGlusterVolume, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters(upServer.getId(), getGlusterVolumeName())); setSucceeded(vdsReturnaValue.getSucceeded()); if (!(getSucceeded())) { handleVdsError(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP_FAILED, vdsReturnaValue.getVdsError().getMessage()); return; } endStepJob(); releaseVolumeLock(); getReturnValue().setActionReturnValue(vdsReturnaValue); }
@javax.annotation.PostConstruct public void init() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = vmStaticDao.get(vmId); if (vmStatic != null) { updateStaticFields(vmStatic); } }

private void newEntity() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = org.ovirt.engine.ui.uicommonweb.models.vms.NewVmInterfaceModel.createInstance(getEntity().getStaticData(), getEntity().getStatus(), getEntity().getStoragePoolId(), getEntity().getVdsGroupCompatibilityVersion(), ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>) (getItems())), this); setWindow(model); }

@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.DiskImage mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.storage.DiskImage entity = null; org.ovirt.engine.core.common.businessentities.storage.DiskStorageType diskStorageType = org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.forValue(rs.getInt("disk_storage_type")); switch (diskStorageType) { case IMAGE : entity = super.mapRow(rs, rowNum); mapEntity(rs, entity); break; case CINDER : entity = org.ovirt.engine.core.dao.DiskImageDAODbFacadeImpl.CinderDiskRowMapper.instance.mapRow(rs, rowNum); break; } return entity; }
protected void syncSearch(org.ovirt.engine.core.common.queries.VdcQueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase, org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, asyncCallback); setIsQueryFirstTime(false); }
public static void GetAllAttachableDisks(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid vmId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); } }; org.ovirt.engine.core.common.queries.GetAllAttachableDisks params = new org.ovirt.engine.core.common.queries.GetAllAttachableDisks(storagePoolId); params.setVmId(vmId); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllAttachableDisks, params, aQuery); }
private void hostName_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (getExternalHostName().getSelectedItem())); if (vds == null) { vds = new org.ovirt.engine.core.common.businessentities.VDS(); } updateModelFromVds(vds, null, false, null); }

private org.ovirt.engine.core.common.businessentities.VDSGroup mockVdsGroup() { org.ovirt.engine.core.common.businessentities.VDSGroup group = new org.ovirt.engine.core.common.businessentities.VDSGroup(); group.setvds_group_id(vdsGroupId); group.setcompatibility_version(new org.ovirt.engine.core.compat.Version()); group.setStoragePoolId(storagePoolId); return group; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> getAll() { throw new org.apache.commons.lang.NotImplementedException(); }
@org.junit.Test public void testHotsetUpdateableWhenHotsetRequestedWithStatus() { org.ovirt.engine.core.utils.ObjectIdentityChecker oic = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.utils.Jedi.class); oic.AddField(VMStatus.Down, "name"); oic.AddHotsetFields("name"); assertTrue("hot set requested for hot set fields should be true", oic.IsFieldUpdatable(VMStatus.Down, "name", null, true)); }

@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name", "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), getClusterId(action)); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); boolean collapseSnapshots = org.ovirt.engine.api.restapi.util.ParametersHelper.getBooleanParameter(httpHeaders, uriInfo, org.ovirt.engine.api.restapi.resource.BackendStorageDomainVmResource.COLLAPSE_SNAPSHOTS, true, false); if (collapseSnapshots) { params.setCopyCollapse(collapseSnapshots); } setVolumesTypeFormat(action); if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(ActionType.ImportVm, params, action); }
@java.lang.Override protected boolean canDoAction() { boolean result = true; if ((org.ovirt.engine.core.bll.SetNonOperationalVdsCommand.getVds()) == null) { addCanDoActionMessage(EngineMessage.VDS_INVALID_SERVER_ID); result = false; } return result; }

@org.junit.Test public void testCanDoActionDomainInMaintenance() { getDiskStorageDomain().setStatus(StorageDomainStatus.Maintenance); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2); }

static org.ovirt.engine.core.common.businessentities.StorageServerConnections setUpEntityExpectations(org.ovirt.engine.core.common.businessentities.StorageServerConnections entity, int index) { expect(entity.getid()).andReturn(GUIDS[index].toString()).anyTimes(); expect(entity.getstorage_type()).andReturn(org.ovirt.engine.api.restapi.resource.BackendStorageDomainServerConnectionsResourceTest.STORAGE_TYPES_MAPPED[index]).anyTimes(); expect(entity.getconnection()).andReturn("1.1.1.255").anyTimes(); if (org.ovirt.engine.api.restapi.resource.BackendStorageDomainServerConnectionsResourceTest.STORAGE_TYPES_MAPPED[index].equals(StorageType.ISCSI)) { expect(entity.getport()).andReturn("3260").anyTimes(); } return entity; }


private void addDisksDeactivatedMessage(java.util.List<org.ovirt.engine.core.common.action.MoveDiskParameters> moveDiskParamsList) { setActionMessageParameters(); addCanDoActionMessageVariable("diskAliases", org.apache.commons.lang.StringUtils.join(getDisksAliases(moveDiskParamsList), ", ")); addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_MOVE_DISKS_MIXED_PLUGGED_STATUS); org.ovirt.engine.core.bll.MoveDisksCommand.getReturnValue().setCanDoAction(false); }

private org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms() { java.util.Collection<java.lang.String> removedNetworks = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : removedNetworkAttachments) { removedNetworks.add(existingNetworkRelatedToAttachment(removedAttachment).getName()); } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(host.getId(), removedNetworks); if (vmNames.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, commaSeparated(vmNames)); } }
@java.lang.Override protected void init() { fetchStorageDomainInfo(); setVdsId(org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.getParameters().getVdsId()); }

private org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms() { java.util.Collection<java.lang.String> removedNetworks = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : removedNetworkAttachments) { removedNetworks.add(existingNetworkRelatedToAttachment(removedAttachment).getName()); } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(host.getId(), removedNetworks); if (vmNames.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, commaSeparated(vmNames)); } }

@java.lang.Override public void onResizeEnd(com.google.gwt.user.cellview.client.Column<T, ?> column, com.google.gwt.dom.client.Element headerElement) { super.onResizeEnd(column, headerElement); table.redraw(); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ("IsAvailable".equals(((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).PropertyName)) { neutronAgentPanel.setVisible(model.getIsAvailable()); } }
private void updateActionAvailability() { java.util.List tempVar = getSelectedItems(); java.util.ArrayList selectedItems = ((java.util.ArrayList) ((tempVar != null) ? tempVar : new java.util.ArrayList())); boolean anyEngine = false; for (java.lang.Object item : selectedItems) { org.ovirt.engine.core.common.businessentities.network.Network network = ((org.ovirt.engine.core.common.businessentities.network.Network) (item)); if (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(network.getName(), org.ovirt.engine.ui.uicommonweb.models.networks.NetworkListModel.ENGINE_NETWORK)) { anyEngine = true; break; } } getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed((((selectedItems.size()) > 0) && (!anyEngine))); boolean isAvailable = !(((getSystemTreeSelectedItem()) != null) && ((getSystemTreeSelectedItem().getType()) == (org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemType.Network))); getNewCommand().setIsAvailable(isAvailable); getRemoveCommand().setIsAvailable(isAvailable); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__START); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_VOLUME); }




public void setSelection(java.lang.Boolean value) { if (((selection) == null) && (value == null)) { return; } if (((selection) == null) || (!(selection.equals(value)))) { selection = value; getSelectionChangedEvent().raise(this, EventArgs.Empty); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("Selection")); } }
public void initMocks(org.ovirt.engine.core.vdsbroker.VmTestPairs vmData, boolean run) { stubDaos(); when(vdsManager.getVdsId()).thenReturn(VmTestPairs.SRC_HOST_ID); when(vdsManager.getClusterId()).thenReturn(VmTestPairs.CLUSTER_ID); when(vdsManager.getCopyVds()).thenReturn(vdsManagerVds); when(vmManager.isColdReboot()).thenReturn(false); when(vmsMonitoring.getVdsManager()).thenReturn(vdsManager); when(vmsMonitoring.getVmManager(any())).thenReturn(vmManager); when(vmsMonitoring.getResourceManager()).thenReturn(resourceManager); when(resourceManager.getVdsManager(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vdsManager); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(true); when(vmsMonitoring.getResourceManager().runVdsCommand(any(org.ovirt.engine.core.common.vdscommands.VDSCommandType.class), any(org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class))).thenReturn(vdsReturnValue); mockDstHostStatus(VDSStatus.Up); mockVmInDbForDstVms(vmData); vmAnalyzer = spy(new org.ovirt.engine.core.vdsbroker.VmAnalyzer(vmData.dbVm(), vmData.vdsmVm(), vmsMonitoring)); doReturn(auditLogDirector).when(vmAnalyzer).getAuditLogDirector(); if (run) { vmAnalyzer.analyze(); } }

private void stopRebalance() { if ((getSelectedItems()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().confirmStopVolumeRebalanceTitle()); model.setHashName("volume_rebalance_stop"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().confirmStopVolumeRebalanceMsg()); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity item : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>cast(getSelectedItems())) { list.add(item.getName()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("onStopRebalance", this); okCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); okCommand.setIsDefault(true); model.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); cancelCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); cancelCommand.setIsCancel(true); model.getCommands().add(cancelCommand); }
private org.ovirt.engine.core.bll.ValidationResult noVmsContainBootableDisks(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { java.util.List<java.lang.String> vmsWithBoot = new java.util.ArrayList(vms.size()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { org.ovirt.engine.core.common.businessentities.storage.Disk bootDisk = org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getDiskDao().getVmBootActiveDisk(vm.getId()); if (bootDisk != null) { vmsWithBoot.add(vm.getName()); } } if (!(vmsWithBoot.isEmpty())) { addCanDoActionMessageVariable("VmsName", org.apache.commons.lang.StringUtils.join(vmsWithBoot.toArray(), ", ")); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VMS_BOOT_IN_USE); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, java.lang.Boolean value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb) { java.lang.Object key = context.getKey(); java.lang.Boolean viewData = getViewData(key); if ((viewData != null) && (viewData.equals(value))) { clearViewData(key); viewData = null; } if ((value != null) && (viewData != null ? viewData : value)) { sb.append(org.ovirt.engine.ui.common.widget.table.cell.RadioboxCell.INPUT_CHECKED); } else { sb.append(org.ovirt.engine.ui.common.widget.table.cell.RadioboxCell.INPUT_UNCHECKED); } }
@java.lang.Override public void processOnVmPoweringUp(org.ovirt.engine.core.compat.Guid vds_id, org.ovirt.engine.core.compat.Guid vmid, java.lang.String display_ip, int display_port) { org.ovirt.engine.core.common.businessentities.IVdsAsyncCommand command = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().GetAsyncCommandForVm(vmid); if (command != null) { command.onPowerringUp(); if ((command.getAutoStart()) && ((command.getAutoStartVdsId()) != null)) { try { java.lang.String otp64 = org.ovirt.engine.core.utils.Ticketing.generateOTP(); org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.SetVmTicket, new org.ovirt.engine.core.common.vdscommands.SetVmTicketVDSCommandParameters(vds_id, vmid, otp64, 60, "", org.ovirt.engine.core.compat.Guid.Empty)); org.ovirt.engine.core.bll.VdsEventListener.log.infoFormat("VdsEventListener.ProcessOnVmPoweringUp - Auto start logic, starting spice to vm - {0} ", vmid); org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.StartSpice, new org.ovirt.engine.core.common.vdscommands.StartSpiceVDSCommandParameters(command.getAutoStartVdsId(), display_ip, display_port, otp64)); } catch (java.lang.RuntimeException ex) { org.ovirt.engine.core.bll.VdsEventListener.log.errorFormat("VdsEventListener.ProcessOnVmPoweringUp - failed to start spice on VM - {0} - {1} - {2}", vmid, ex.getMessage(), ex.getStackTrace()); } } } }
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); getNewCommand().setIsExecutionAllowed(true); getAttachCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk != null) && (isSingleDiskSelected())) && (!(isDiskLocked(disk)))) && (((isVmDown()) || (!(disk.getPlugged()))) || (isExtendImageSizeEnabled())))); getRemoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isRemoveCommandAvailable()))); getSparsifyCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && (isSparsifyCommandAvailable()))); getMoveCommand().setIsExecutionAllowed(((atLeastOneDiskSelected()) && ((isMoveCommandAvailable()) || (isLiveMoveCommandAvailable())))); updateScanAlignmentCommandAvailability(); getPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(true)); getUnPlugCommand().setIsExecutionAllowed(isPlugCommandAvailable(false)); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems()) != null ? ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk>) (getItems())) : null), ((getSelectedItems()) != null ? getSelectedItems() : null), getSystemTreeSelectedItem(), getChangeQuotaCommand()); }

public boolean isUpdateAvailable(org.ovirt.engine.core.common.businessentities.VDS host) { return create(host.getVdsType()).isUpdateAvailable(host); }

@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllActiveForStorageDomain(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeReadList("GetActiveVmsByStorageDomainId", org.ovirt.engine.core.dao.VmDAODbFacadeImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("storage_domain_id", id)); }

private org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters buildGetRemoteVmsInfoParameters() { return new org.ovirt.engine.core.common.vdscommands.GetVmsFromExternalProviderParameters(getProxyHostId(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getUrl(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getUsername(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getPassword(), org.ovirt.engine.core.bll.GetVmsFromExternalProviderQuery.getParameters().getOriginType()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc list() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.getVMList").withOptionalParameterAsList("vmList", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(new java.lang.String[]{ }))).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("vmList").withResponseType(java.lang.Object[].class).withSubTypeClazz(new java.util.HashMap<java.lang.String, java.lang.Object>().getClass()).withSubtypeKey("vmId"); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc(response); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Cannot remove more than one brick from a Replicate volume at a time") java.lang.String cannotRemoveBricksReplicateVolume();
public org.ovirt.engine.core.compat.Guid getTaskID() { return getCreationInfo().getTaskID(); }
private void injectHeaders(org.apache.http.client.methods.HttpUriRequest request) { java.util.List<org.apache.http.Header> updated = excludeNullHeaders(request.getAllHeaders()); if ((updated != null) && (!(updated.isEmpty()))) { request.setHeaders(updated.toArray(new org.apache.http.Header[updated.size()])); } for (org.apache.http.NameValuePair nameValuePair : org.apache.http.client.utils.URLEncodedUtils.parse(request.getURI(), HTTP.UTF_8)) { if (nameValuePair.getName().equalsIgnoreCase("all_content")) { request.addHeader("All-Content", nameValuePair.getValue()); } } request.addHeader("Version", "4"); request.addHeader("Content-type", "application/xml"); request.addHeader("User-Agent", "JavaSDK"); request.addHeader("Accept", "application/xml"); request.addHeader("Authorization", ("Bearer " + (getAccessToken()))); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Number of VMs") java.lang.String numberOfVmsCluster();


public boolean Validate() { return true; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.NetworkQoS> networkQoSes = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.NetworkQoS>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue())); org.ovirt.engine.core.common.businessentities.network.NetworkQoS none = new org.ovirt.engine.core.common.businessentities.network.NetworkQoS(); none.setName(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().unlimitedQoSTitle()); none.setId(Guid.Empty); networkQoSes.add(0, none); getNetworkQoS().setItems(networkQoSes); setSelectedNetworkQoSId(selectedItemId); }
public static void prepareCommandForMonitoring(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.action.VdcActionType actionType, boolean runAsInternal, boolean hasCorrelationId) { org.ovirt.engine.core.bll.job.ExecutionContext context = command.getExecutionContext(); if (context == null) { context = new org.ovirt.engine.core.bll.job.ExecutionContext(); } try { boolean isMonitored = org.ovirt.engine.core.bll.job.ExecutionHandler.shouldMonitorCommand(actionType, runAsInternal, hasCorrelationId); if (isMonitored || (context.isJobRequired())) { org.ovirt.engine.core.common.job.Job job = org.ovirt.engine.core.bll.job.ExecutionHandler.createJob(actionType, command); org.ovirt.engine.core.bll.job.JobRepositoryFactory.getJobRepository().saveJob(job); context.setExecutionMethod(ExecutionMethod.AsJob); context.setJob(job); command.setExecutionContext(context); command.setJobId(job.getId()); context.setMonitored(true); } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.job.ExecutionHandler.log.errorFormat("Failed to prepare command of type {0} for monitoring due to error {1}", actionType.name(), org.apache.commons.lang.exception.ExceptionUtils.getMessage(e), e); } }
@org.junit.Test public void testLogoffAsync_ignored_failure() { java.lang.Object model = new java.lang.Object(); when(mockAsyncQuery.getModel()).thenReturn(model); org.ovirt.engine.core.common.users.VdcUser testUser = new org.ovirt.engine.core.common.users.VdcUser(); testUser.setUserName("testUser"); testUser.setPassword("testpassword"); org.ovirt.engine.ui.frontend.Frontend.LogoffAsync(testUser, mockAsyncQuery, mockService); verify(mockService).logOff(eq(testUser), callbackAction.capture()); com.google.gwt.user.client.rpc.StatusCodeException exception = new com.google.gwt.user.client.rpc.StatusCodeException(0, "0 status code"); callbackAction.getValue().onFailure(exception); verify(mockFrontendFailureEvent, never()).raise(eq(org.ovirt.engine.ui.frontend.Frontend.class), ((org.ovirt.engine.ui.uicompat.EventArgs) (any()))); verify(mockEventsHandler, never()).runQueryFailed(null); verify(mockAsyncCallback, never()).onSuccess(model, null); }
@java.lang.Override public java.lang.String render(java.util.ArrayList<com.google.gwt.user.client.ui.ValueLabel<V>> widgets) { java.lang.String formattedStr = ""; for (int i = 0; i < (widgets.size()); i++) { formattedStr += ((widgets.get(i).getElement().getInnerHTML()) + " ") + (delimiters[i]); if (i < ((widgets.size()) - 1)) { formattedStr += ", "; } } return formattedStr; }


protected org.ovirt.engine.core.common.businessentities.LdapUser populateUserData(org.ovirt.engine.core.common.businessentities.LdapUser user, java.lang.String domain) { if (user == null) { return null; } user.setDomainControler(domain); java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.businessentities.LdapGroup> groupsDict = new java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.businessentities.LdapGroup>(); org.ovirt.engine.core.bll.adbroker.GroupsDNQueryGenerator generator = new org.ovirt.engine.core.bll.adbroker.GroupsDNQueryGenerator(); proceedGroupsSearchResult(user.getMemberof(), groupsDict, generator); user.setGroups(groupsDict); if (((user.getUserName()) != null) && (!(user.getUserName().contains("@")))) { user.setUserName((((user.getUserName()) + "@") + (user.getDomainControler()))); } return user; }

@org.junit.Test public void testValidateNetworkExclusiveOnNicsVmNetworkMustBeSoleAttachedInterface2() throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK), vmNetwork1, nonVmNetwork1); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> getAll() { throw new org.apache.commons.lang.NotImplementedException(); }
private void sendTicket() { final org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser(); final boolean sent = runVdsCommand(VDSCommandType.SetVmTicket, new org.ovirt.engine.core.common.vdscommands.SetVmTicketVDSCommandParameters(org.ovirt.engine.core.bll.SetVmTicketCommand.getVdsId(), org.ovirt.engine.core.bll.SetVmTicketCommand.getVmId(), mTicket, mValidTime, user.getLoginName(), user.getId())).getSucceeded(); if (sent) { org.ovirt.engine.core.bll.SetVmTicketCommand.setActionReturnValue(mTicket); } org.ovirt.engine.core.bll.SetVmTicketCommand.setSucceeded(sent); }
public void setSupportedEngines(java.lang.String value) { this.mVdsDynamic.setSupportedEngines(value); }
@org.junit.Test public void diskImagesHasDerivedDisksOnStorageDomain() { org.ovirt.engine.core.compat.Guid storageDomainId = org.ovirt.engine.core.compat.Guid.Empty; disk1.setVmEntityType(VmEntityType.TEMPLATE); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> storageDomainIds = new java.util.ArrayList<>(); storageDomainIds.add(storageDomainId); disk2.setStorageIds(storageDomainIds); when(diskImageDao.getAllSnapshotsForParent(disk1.getImageId())).thenReturn(java.util.Arrays.asList(disk2)); assertThat(validator.diskImagesHaveNoDerivedDisks(storageDomainId), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_DETECTED_DERIVED_DISKS)); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (sender == (getSelectAll())) { if ((getItems()) == null) { return; } boolean selectAll = ((java.lang.Boolean) (getSelectAll().getEntity())); org.ovirt.engine.ui.uicommonweb.models.EntityModel entityModel; for (java.lang.Object item : getItems()) { entityModel = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (item)); entityModel.setIsSelected(selectAll); } } }

@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel object) { driver.edit(object); org.ovirt.engine.ui.uicommonweb.models.EntityModel version = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (object.getVersion().getSelectedItem())); versionReadOnlyEditor.asValueBox().setValue((version != null ? version.getTitle() : null)); pathExampleLabel.setVisible(object.getPath().getIsChangable()); object.getMountOptions().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (args.propertyName.equals("Title")) { mountOptionsEditor.setTitle(object.getMountOptions().getTitle()); } } }); styleTextBoxEditor(pathEditor, object.getPath().getIsChangable()); styleTextBoxEditor(timeoutEditor, object.getOverride().getIsChangable()); styleTextBoxEditor(retransmissionsEditor, object.getOverride().getIsChangable()); styleTextBoxEditor(versionReadOnlyEditor, object.getOverride().getIsChangable()); styleTextBoxEditor(mountOptionsEditor, object.getOverride().getIsChangable()); setElementVisibility(versionEditor, object.getOverride().getIsChangable()); setElementVisibility(versionReadOnlyEditor, (!(object.getOverride().getIsChangable()))); setElementVisibility(versionLabel, object.getVersion().getIsAvailable()); setElementVisibility(retransmissionsLabel, object.getRetransmissions().getIsAvailable()); setElementVisibility(timeoutLabel, object.getTimeout().getIsAvailable()); setElementVisibility(mountOptionsLabel, object.getMountOptions().getIsAvailable()); boolean anyField = (((object.getVersion().getIsAvailable()) || (object.getRetransmissions().getIsAvailable())) || (object.getTimeout().getIsAvailable())) || (object.getMountOptions().getIsAvailable()); expander.getElement().getStyle().setVisibility((anyField ? Style.Visibility.VISIBLE : Style.Visibility.HIDDEN)); }




private java.util.List<org.ovirt.engine.core.common.businessentities.UserSession> searchSessions() { return genericSearch(org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getEngineSessionDao(), false).stream().map(UserSession::new).collect(java.util.stream.Collectors.toList()); }
@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricksList = getParameters().getBricks(); if ((bricksList != null) && ((bricksList.size()) > 0)) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { addGlusterVolumeBricks(bricksList, getParameters().getReplicaCount(), getParameters().getStripeCount(), getParameters().isForce()); return null; } }); } }



@java.lang.Override protected void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params) { assert op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel; assert op2 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel; org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkToAttach = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel) (op1)); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel targetNic = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op2)); if (networkToAttach.isAttached()) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.DETACH_NETWORK.getCommand(op1, null, allNics).execute(); } org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanBridge = networkToAttach.attach(targetNic, true); if (vlanBridge != null) { java.util.Iterator<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> i = allNics.iterator(); while (i.hasNext()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = i.next(); if (vlanBridge.getVlanId().equals(nic.getVlanId())) { if (vlanBridge.getBaseInterface().equals(nic.getBaseInterface())) { vlanBridge.setName(nic.getName()); } i.remove(); break; } } allNics.add(vlanBridge); } }
public boolean isRebootCommandExecutionAllowed(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { if ((vms.isEmpty()) || (!(org.ovirt.engine.core.common.VdcActionUtils.canExecutePartially(vms, org.ovirt.engine.core.common.businessentities.VM.class, VdcActionType.RebootVm)))) { return false; } for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { boolean guestAgentPresent = !(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(vm.getIp())); boolean acpiEnabled = java.lang.Boolean.TRUE.equals(vm.getAcpiEnable()); if (!(guestAgentPresent || acpiEnabled)) { return false; } } return true; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.DiskImage getDiskSnapshotForVmSnapshot(org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid vmSnapshotId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_snapshot_id", vmSnapshotId).addValue("image_group_id", diskId); return getCallsHandler().executeRead("GetDiskSnapshotForVmSnapshot", org.ovirt.engine.core.dao.DiskImageDAODbFacadeImpl.DiskImageRowMapper.instance, parameterSource); }


@org.junit.Test public void canDoActionFailsOnNullHookId() { cmd = spy(new org.ovirt.engine.core.bll.gluster.RemoveGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(null))); setUpMocksForRemove(); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_ID_IS_REQUIRED.toString())); }
private java.lang.String findFreeVfForVnic(java.util.List<org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig> vfsConfigs, java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.String>> nicToUsedVfs, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> fetchedNics, org.ovirt.engine.core.common.businessentities.network.Network vnicNetwork) { for (org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig vfsConfig : vfsConfigs) { if (((vfsConfig.getNumOfVfs()) != 0) && (isNetworkInVfsConfig(vnicNetwork, vfsConfig))) { java.lang.String freeVf = getFreeVf(vfsConfig, nicToUsedVfs, fetchedNics); if (freeVf != null) { return freeVf; } } } return null; }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.Disk object) { setEnumTitle(object.getVmEntityType()); return (object.getVmEntityType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.VM) ? org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.resources.vmsImage() : (object.getVmEntityType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.TEMPLATE) ? org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.resources.templatesImage() : null; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>) (returnValue)); allNetworks = networks; initNetworkModels(); initDcNetworkParams(); queryInterfaces(); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalActionWithTasksContext(VdcActionType.UpdateVmVersion, new org.ovirt.engine.core.common.action.UpdateVmVersionParameters(org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVmId()), org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getLock()); if ((!(result.getSucceeded())) && (!(result.getCanDoAction()))) { log.warn("Couldn't update VM '{}' ({}) version from it's template, continue with restoring stateless snapshot.", org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVm().getName(), org.ovirt.engine.core.bll.RestoreStatelessVmCommand.getVmId()); org.ovirt.engine.core.bll.RestoreStatelessVmCommand.setSucceeded(restoreInitialState()); } else { setSucceeded(result.getSucceeded()); } }
public void guide() { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newClusterGuideMeTitle()); model.setHelpTag(HelpTag.new_cluster___guide_me); model.setHashName("new_cluster_-_guide_me"); if ((getGuideContext()) == null) { org.ovirt.engine.core.common.businessentities.Cluster cluster = org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.getSelectedItem(); setGuideContext(cluster.getId()); } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel<java.lang.Void> clusterListModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel<java.lang.Void>) (target)); org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (clusterListModel.getWindow())); model.setEntity(returnValue); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", clusterListModel); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().configureLaterTitle()); tempVar.setIsDefault(true); tempVar.setIsCancel(true); model.getCommands().add(tempVar); } }), ((org.ovirt.engine.core.compat.Guid) (getGuideContext()))); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Error in fetching the brick details, please try again.") java.lang.String errorInFetchingBrickAdvancedDetails();
@org.junit.Test public void canDoActionSucceedsOnDiskDomainCheckWhenStorageGuidInParamsMatches() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId); mockVmWithDisk(storageId); mockStorageDomain(storageId); mockStoragePoolIsoMap(); runAndAssertCanDoActionSuccess(); }





public void getDefaultSpmPriority(AsyncQuery<java.lang.Integer> aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.DefaultValueConverter(0); aQuery.asyncCallback.onSuccess(5); }

public boolean isDone() { if ((this.map) == null) { return false; } return this.map.isDone(); }
public void newEntity() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.pools.PoolModel model = new org.ovirt.engine.ui.uicommonweb.models.pools.PoolModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewPoolModelBehavior()); model.setIsNew(true); model.setCustomPropertiesKeysList(getCustomPropertiesKeysList()); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newPoolTitle()); model.setHashName("new_pool"); model.getVmType().setSelectedItem(VmType.Desktop); model.initialize(getSystemTreeSelectedItem()); org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand switchModeCommand = new org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand(); switchModeCommand.init(model); model.getCommands().add(switchModeCommand); org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSave", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); command.setIsDefault(true); model.getCommands().add(command); command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); command.setIsCancel(true); model.getCommands().add(command); }
protected void addVmWatchdog() { org.ovirt.engine.core.common.businessentities.VmWatchdog vmWatchdog = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getWatchdog(); if (vmWatchdog != null) { org.ovirt.engine.core.common.action.WatchdogParameters parameters = new org.ovirt.engine.core.common.action.WatchdogParameters(); parameters.setId(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmId()); parameters.setAction(vmWatchdog.getAction()); parameters.setModel(vmWatchdog.getModel()); org.ovirt.engine.core.bll.AddVmCommand.getBackend().runInternalAction(VdcActionType.AddWatchdog, parameters); } }
private void activeDetailModelChanging(org.ovirt.engine.ui.uicommonweb.models.EntityModel newValue, org.ovirt.engine.ui.uicommonweb.models.EntityModel oldValue) { if (oldValue != null) { oldValue.setEntity(null); if (oldValue instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) { ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (oldValue)).stopRefresh(); } } if (newValue != null) { newValue.setEntity(provideDetailModelEntity(getSelectedItem())); } }

@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForEntity(org.ovirt.engine.core.compat.Guid id, long engineSessionSeqId, boolean isFiltered, boolean allUsersWithPermission, int appMode) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id).addValue("engine_session_seq_id", engineSessionSeqId).addValue("is_filtered", isFiltered).addValue("app_mode", appMode); java.lang.String functionName = "GetPermissionsByEntityId"; if (allUsersWithPermission) { functionName = "GetAllUsersWithPermissionsOnEntityByEntityId"; } return getCallsHandler().executeReadList(functionName, org.ovirt.engine.core.dao.PermissionDAODbFacadeImpl.PermissionRowMapper.instance, parameterSource); }


private java.util.ArrayList<java.lang.String> getLunIds(org.ovirt.engine.api.model.Storage storage, org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, org.ovirt.engine.core.compat.Guid hostId) { java.util.List<org.ovirt.engine.api.model.LogicalUnit> logicalUnits = new java.util.ArrayList<org.ovirt.engine.api.model.LogicalUnit>(); if (storage.isSetLogicalUnits()) { logicalUnits = storage.getLogicalUnits(); } else if ((storage.isSetVolumeGroup()) && (storage.getVolumeGroup().isSetLogicalUnits())) { logicalUnits = storage.getVolumeGroup().getLogicalUnits(); } java.util.ArrayList<java.lang.String> lunIds = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.api.model.LogicalUnit unit : logicalUnits) { validateParameters(unit, 4, "id"); if ((storageType == (org.ovirt.engine.core.common.businessentities.storage.StorageType.ISCSI)) && (!(isConnectionAssumed(unit)))) { connectStorageToHost(hostId, storageType, unit); } lunIds.add(unit.getId()); } refreshHostStorage(hostId); return !(lunIds.isEmpty()) ? lunIds : null; }



private void revertChanges() { if ((originalNetParams) != null) { setIpv4BootProtocol(originalNetParams.getBootProtocol()); getIpv4Address().setEntity(originalNetParams.getAddress()); getIpv4Subnet().setEntity(originalNetParams.getSubnet()); getIpv4Gateway().setEntity(originalNetParams.getGateway()); getQosOverridden().setEntity(originalNetParams.isQosOverridden()); getQosModel().init(originalNetParams.getQos()); getCustomPropertiesModel().deserialize(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueModel.convertProperties(originalNetParams.getCustomProperties())); } }
public void setFallbackProtocol() { final org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = this.vds.getStaticData(); vdsStatic.setProtocol(VdsProtocol.XML); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsStaticDao().update(vdsStatic); return null; } }); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Low") java.lang.String lowTitle();
private void dontSendTicket() { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.SetVmTicketCommand.getVm(); final org.ovirt.engine.core.common.businessentities.aaa.DbUser user = org.ovirt.engine.core.bll.SetVmTicketCommand.getCurrentUser(); org.ovirt.engine.core.bll.SetVmTicketCommand.log.warn("Can't give console of virtual machine '{}' to user '{}', it has probably been taken by another user.", vm.getId(), user.getId()); addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_IN_USE_BY_OTHER_USER); org.ovirt.engine.core.bll.SetVmTicketCommand.setSucceeded(false); }
private static java.lang.String nullToEmptyString(java.lang.Object obj) { return org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.toStringNullToDefault(obj, ""); }




public org.ovirt.engine.core.bll.ValidationResult validateCinderDisksAlreadyRegistered() { return validate(new java.util.concurrent.Callable<org.ovirt.engine.core.bll.ValidationResult>() { @java.lang.Override public org.ovirt.engine.core.bll.ValidationResult call() { for (org.ovirt.engine.core.common.businessentities.storage.CinderDisk disk : cinderDisks) { org.ovirt.engine.core.common.businessentities.storage.Disk diskFromDB = getDiskDao().get(disk.getId()); if (diskFromDB != null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.CINDER_DISK_ALREADY_REGISTERED, java.lang.String.format("$diskAlias %s", diskFromDB.getDiskAlias())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; } }); }
private org.springframework.ldap.core.support.LdapContextSource getContextSource(java.lang.String domain, java.lang.String username, java.lang.String password, java.lang.String ldapServer) { org.springframework.ldap.core.support.LdapContextSource context = new org.springframework.ldap.core.support.LdapContextSource(); java.lang.String ldapBaseDn = org.ovirt.engine.core.utils.ipa.SimpleAuthenticationCheck.domainToDN(domain); java.lang.StringBuilder ldapUserDn = new java.lang.StringBuilder(); if (ldapProviderType.equals(LdapProviderType.ipa)) { ldapUserDn.append("uid=").append(username).append(",cn=Users").append(",cn=Accounts,"); } else if (ldapProviderType.equals(LdapProviderType.rhds)) { ldapUserDn.append("uid=").append(username).append(",ou=People"); } else { ldapUserDn.append("CN=").append(username).append(",CN=Users,"); } ldapUserDn.append(ldapBaseDn); context.setUrl(getLdapUrl(ldapServer)); context.setBase(ldapBaseDn); context.setUserDn(ldapUserDn.toString()); context.setPassword(password); context.setReferral("follow"); java.util.Map<java.lang.String, java.lang.String> baseEnvironmentProperties = new java.util.HashMap<java.lang.String, java.lang.String>(); baseEnvironmentProperties.put("java.naming.ldap.attributes.binary", "objectGUID"); context.setBaseEnvironmentProperties(baseEnvironmentProperties); return context; }
public void getClusterNetworkList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid clusterId) { if ((aQuery.converterCallback) == null) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>(); } return source; } }; } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworksByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), aQuery); }
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags> ret = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Tags tags : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags>) (source))) { if ((tags.getType()) == (org.ovirt.engine.core.common.businessentities.TagsType.GeneralTag)) { ret.add(tags); } } return ret; } return new org.ovirt.engine.core.common.businessentities.Tags(); }

public static void removeVmStatelessImages(org.ovirt.engine.core.compat.Guid vmId, org.ovirt.engine.core.bll.context.CommandContext context) { if (org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSnapshotDao().exists(vmId, SnapshotType.STATELESS)) { org.ovirt.engine.core.bll.ProcessDownVmCommand.log.infoFormat("Deleting snapshot for stateless vm {0}", vmId); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.RestoreStatelessVm, new org.ovirt.engine.core.common.action.VmOperationParameterBase(vmId), context); } }






public java.lang.String getSupportedEngines() { return this.mVdsDynamic.getSupportedEngines(); }

@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { warningLabel.setVisible((!((java.lang.Boolean) (object.getMigrateData().getEntity())))); }
private void applyNetworkChangesToHosts() { org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand<T>.SyncNetworkParametersBuilder builder = new SyncNetworkParametersBuilder(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getContext()); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = builder.buildParameters(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork(), getOldNetwork()); if (!(parameters.isEmpty())) { org.ovirt.engine.core.bll.network.NetworkParametersBuilder.updateParametersSequencing(parameters); runInternalMultipleActions(VdcActionType.PersistentSetupNetworks, parameters); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.RoleGroupMap> getAllForRole(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("role_id", id); return getCallsHandler().executeReadList("Get_role_groups_By_role_id", org.ovirt.engine.core.dao.RoleGroupMapDAODbFacadeImpl.RoleGroupMapRowMapper.instance, parameterSource); }

protected java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.DiskImage> getDiskToDestinationMap(org.ovirt.engine.api.model.VM vm, org.ovirt.engine.core.compat.Guid storageDomainId, boolean isDomainSet) { java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.DiskImage> diskToDestinationMap = null; if ((vm.isSetDisks()) && (vm.getDisks().isSetDisks())) { diskToDestinationMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.DiskImage>(); for (org.ovirt.engine.api.model.Disk disk : vm.getDisks().getDisks()) { if ((((disk.isSetId()) && (disk.isSetStorageDomains())) && (disk.getStorageDomains().isSetStorageDomains())) && (disk.getStorageDomains().getStorageDomains().get(0).isSetId())) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.DiskImage(); diskImage.setId(asGuid(disk.getId())); diskImage.setStorageIds(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>()); org.ovirt.engine.core.compat.Guid newStorageDomainId = (isDomainSet) ? storageDomainId : asGuid(disk.getStorageDomains().getStorageDomains().get(0).getId()); diskImage.getStorageIds().add(newStorageDomainId); diskToDestinationMap.put(diskImage.getId(), diskImage); } } } return diskToDestinationMap; }


protected org.ovirt.engine.api.model.Templates mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> entities) { org.ovirt.engine.core.common.queries.IdsQueryParameters params = new org.ovirt.engine.core.common.queries.IdsQueryParameters(); java.util.List<org.ovirt.engine.core.compat.Guid> ids = org.ovirt.engine.core.common.businessentities.Entities.getIds(entities); params.setId(ids); org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = runQuery(VdcQueryType.GetVmsInit, params); if ((queryReturnValue.getSucceeded()) && ((queryReturnValue.getReturnValue()) != null)) { java.util.List<org.ovirt.engine.core.common.businessentities.VmInit> vmInits = queryReturnValue.getReturnValue(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmInit> initMap = org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById(vmInits); for (org.ovirt.engine.core.common.businessentities.VmTemplate template : entities) { template.setVmInit(initMap.get(template.getId())); } } org.ovirt.engine.api.model.Templates collection = new org.ovirt.engine.api.model.Templates(); for (org.ovirt.engine.core.common.businessentities.VmTemplate entity : entities) { collection.getTemplates().add(addLinks(populate(map(entity), entity))); } return collection; }


private void poplate(java.util.Map<java.lang.String, java.lang.Boolean> activeBonds, java.util.List<org.ovirt.engine.core.common.businessentities.network> clusterNetworks, java.util.List<java.lang.String> networks, java.util.Map<java.lang.String, java.util.List<java.lang.String>> bondNics, org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface) { org.ovirt.engine.core.utils.Pair<java.lang.Boolean, java.lang.String> retVal = IsNetworkInCluster(iface.getBondName(), clusterNetworks); java.lang.String networkName = retVal.getSecond(); if (retVal.getFirst()) { if (!(activeBonds.containsKey(iface.getBondName()))) { activeBonds.put(iface.getBondName(), false); } activeBonds.put(iface.getBondName(), ((activeBonds.get(iface.getBondName())) || ((iface.getStatistics().getStatus()) == (org.ovirt.engine.core.common.businessentities.InterfaceStatus.Up)))); if ((!(networks.contains(networkName))) && (!(activeBonds.containsKey(iface.getName())))) { networks.add(networkName); } else if ((networks.contains(networkName)) && (activeBonds.containsKey(iface.getBondName()))) { networks.remove(networkName); } if (!(bondNics.containsKey(iface.getBondName()))) { bondNics.put(iface.getBondName(), new java.util.ArrayList<java.lang.String>()); } bondNics.get(iface.getBondName()).add(iface.getName()); } }
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult Validate(java.lang.String value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult ipValidation = org.ovirt.engine.ui.uicommonweb.validation.SubnetMaskValidation.IP_VALIDATOR.Validate(value); if (!(ipValidation.getSuccess())) { return ipValidation; } org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if (value != null) { result.setSuccess(validateNetMask(value)); result.setReasons(org.ovirt.engine.ui.uicommonweb.validation.SubnetMaskValidation.reasons); } return result; }


private void logBrickStatusChange(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick, final org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus fetchedStatus) { log.debug("Detected that status of brick '{}' in volume '{}' changed from '{}' to '{}'", brick.getQualifiedName(), volume.getName(), brick.getStatus(), fetchedStatus); logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_CHANGED, new java.util.HashMap<java.lang.String, java.lang.String>() { { put(GlusterConstants.BRICK_PATH, brick.getQualifiedName()); put(GlusterConstants.OPTION_OLD_VALUE, brick.getStatus().toString()); put(GlusterConstants.OPTION_NEW_VALUE, fetchedStatus.toString()); } }); if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.DOWN)) { logUtil.logAuditMessage(volume.getClusterId(), volume, null, AuditLogType.GLUSTER_BRICK_STATUS_DOWN, brick.getId(), brick.getQualifiedName()); } else if (fetchedStatus == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AlertDirector.removeAlertsByBrickIdLogType(brick.getId(), AuditLogType.GLUSTER_BRICK_STATUS_DOWN); } }
@java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.network n) { return n.getname().equals(network.getname()); }

@java.lang.Override public void onSuccess(java.lang.Object model, final java.lang.Object returnValue) { if ((getSystemTreeSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.Cluster selectedCluster = ((org.ovirt.engine.core.common.businessentities.Cluster) (getSystemTreeSelectedItem().getEntity())); clusterSnapshotConfigModel.getClusters().setItems(((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue)), selectedCluster); } else { if ((getSelectedItems()) != null) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getSelectedItems().get(0); if (volumeEntity != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue1) { clusterSnapshotConfigModel.getClusters().setItems(((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue)), ((org.ovirt.engine.core.common.businessentities.Cluster) (returnValue1))); } }), volumeEntity.getClusterId()); } } else { clusterSnapshotConfigModel.getClusters().setItems(((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue))); } } }
@java.lang.Override protected void executeCommand() { createJob(org.ovirt.engine.core.bll.AddInternalJobCommand.getParameters().getActionType(), false); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Note: You chose to detach all VMs from the pool - this will remove the pool itself.") java.lang.String detachAllVmsWarning();

@java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return ((clusterNetworkModel.isAttached()) && (!(clusterNetworkModel.isExternal()))) && (!((multiCluster) && (isManagementOriginally(clusterNetworkModel)))); }
public void getGlusterHostsNewlyAdded(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid clusterId, boolean isFingerprintRequired) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAddedGlusterServers, new org.ovirt.engine.core.common.queries.gluster.AddedGlusterServersParameters(clusterId, isFingerprintRequired), aQuery); }
public static java.util.List<java.lang.String> initRange(java.lang.String start, java.lang.String end, int size) { return org.ovirt.engine.core.utils.MacAddressRangeUtils.innerInitRange(start, end, size); }


public void signOut() { for (org.ovirt.engine.ui.uicommonweb.models.SearchableListModel listModel : getItems()) { listModel.stopRefresh(); } getEventList().stopRefresh(); getAlertList().stopRefresh(); getTaskList().stopRefresh(); getBookmarkList().stopRefresh(); getRoleListModel().stopRefresh(); getSystemPermissionListModel().stopRefresh(); getClusterPolicyListModel().stopRefresh(); if (org.ovirt.engine.ui.frontend.Frontend.getInstance().getIsUserLoggedIn()) { org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setHandleFailure(true); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { } }; setLoggedInUser(null); getSignedOutEvent().raise(this, EventArgs.Empty); org.ovirt.engine.ui.frontend.Frontend.LogoffAsync(org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoggedInUser(), _asyncQuery); } }
protected void addVmTemplateToDb() { getVmTemplate().setClusterId(getParameters().getClusterId()); if (!(org.ovirt.engine.core.bll.VmHandler.validateDedicatedVdsExistOnSameCluster(getVmTemplate(), null))) { getVmTemplate().setDedicatedVmForVdsList(java.util.Collections.emptyList()); } getVmTemplate().setStatus(VmTemplateStatus.Locked); getVmTemplate().setQuotaId(getParameters().getQuotaId()); org.ovirt.engine.core.bll.VmHandler.updateImportedVmUsbPolicy(getVmTemplate()); vmTemplateDao.save(getVmTemplate()); getCompensationContext().snapshotNewEntity(getVmTemplate()); int count = 1; for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : getImages()) { image.setActive(true); org.ovirt.engine.core.common.businessentities.storage.ImageStorageDomainMap map = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.saveImage(image); getCompensationContext().snapshotNewEntity(image.getImage()); getCompensationContext().snapshotNewEntity(map); if (!(baseDiskDao.exists(image.getId()))) { image.setDiskAlias(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getSuggestedDiskAlias(image, getVmTemplateName(), count)); count++; baseDiskDao.save(image); getCompensationContext().snapshotNewEntity(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic(); diskDynamic.setId(image.getImageId()); diskDynamic.setActualSize(image.getActualSizeInBytes()); diskImageDynamicDao.save(diskDynamic); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = org.ovirt.engine.core.common.businessentities.storage.DiskVmElement.copyOf(image.getDiskVmElementForVm(sourceTemplateId), image.getId(), getVmTemplateId()); diskVmElementDao.save(dve); getCompensationContext().snapshotNewEntity(diskDynamic); } }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__ADD); addCanDoActionMessage(EngineMessage.VAR__TYPE__STORAGE__CONNECTION); }
@org.junit.Test public void testInterfaceAlreadyLabeledWithWhenInterfaceIsLabeledBySameLabel() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName(); vdsNetworkInterface.setLabels(java.util.Collections.singleton("labelA")); assertThat(new org.ovirt.engine.core.bll.validator.HostInterfaceValidator(vdsNetworkInterface).interfaceAlreadyLabeledWith("labelA"), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.INTERFACE_ALREADY_LABELED)); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase login(org.ovirt.engine.core.common.action.LoginUserParameters parameters) { switch (parameters.getActionType()) { case LoginUser : case LoginAdminUser : org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(parameters.getActionType(), parameters); return command.executeAction(); default : return getErrorCommandReturnValue(VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION); } }
public org.ovirt.engine.core.utils.ssh.EngineSSHClient getSSHClient() { java.lang.Long timeout = java.util.concurrent.TimeUnit.SECONDS.toMillis(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.ConnectToServerTimeoutInSeconds)); org.ovirt.engine.core.utils.ssh.EngineSSHClient sshclient = new org.ovirt.engine.core.utils.ssh.EngineSSHClient(); if (org.ovirt.engine.core.bll.AddVdsCommand.getParameters().getvds().getSSHKeyFingerprint().isEmpty()) { sshclient.setVds(org.ovirt.engine.core.bll.AddVdsCommand.getParameters().getvds()); try { org.ovirt.engine.core.bll.AddVdsCommand.getParameters().getvds().setSSHKeyFingerprint(sshclient.getHostFingerprint()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsStaticDao().save(org.ovirt.engine.core.bll.AddVdsCommand.getParameters().getVdsStaticData()); } catch (java.lang.Exception e) { log.warnFormat("couldn't set fingerprint for vds", e); } } else { sshclient.setVds(org.ovirt.engine.core.bll.AddVdsCommand.getParameters().getvds()); } sshclient.setHardTimeout(timeout); sshclient.setSoftTimeout(timeout); sshclient.setPassword(org.ovirt.engine.core.bll.AddVdsCommand.getParameters().getPassword()); return sshclient; }
@org.junit.Test public void testNfsOptions() { newServerConnection.setNfsVersion(NfsVersion.V4); newServerConnection.setNfsRetrans(((short) (5))); dao.save(newServerConnection); org.ovirt.engine.core.common.businessentities.StorageServerConnections result = dao.get(newServerConnection.getid()); assertEquals(result.getNfsVersion(), NfsVersion.V4); assertTrue(((result.getNfsRetrans()) == 5)); assertNull(result.getNfsTimeo()); result = dao.get(existingNfsAutoConnection.getid()); assertEquals(result.getNfsVersion(), NfsVersion.AUTO); assertTrue(((result.getNfsRetrans()) == 7)); assertTrue(((result.getNfsTimeo()) == 42)); result = dao.get(existingConnection.getid()); assertNull(result.getNfsVersion()); assertNull(result.getNfsRetrans()); assertNull(result.getNfsTimeo()); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Quota") java.lang.String quotaTitle();

@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenterWithCluster = new java.util.ArrayList<>(); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = ((java.util.List<org.ovirt.engine.core.common.businessentities.Cluster>) (returnValue)); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : localDataCenters) { for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (cluster.getStoragePoolId().equals(dataCenter.getId()))) { localDataCenterWithCluster.add(dataCenter); break; } } } localDataCenters.removeAll(localDataCenterWithCluster); model.updateOptionsRequiredAddDataCenter((!(localDataCenters.isEmpty()))); }
@java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel vmInterfaceListModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network> network_list = (returnValue != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network>) (returnValue)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network>(); vmInterfaceListModel.PostGetClusterNetworkList_Edit(network_list); }
private org.ovirt.engine.core.common.businessentities.network.NetworkAttachment getExistingAttachmentByNetworkId(org.ovirt.engine.core.compat.Guid networkId) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingNetworkAttachment = new org.ovirt.engine.core.common.utils.MapNetworkAttachments(existingNetworkAttachments).byNetworkId().get(networkId); return existingNetworkAttachment; }
private void mockDiskImageDao() { when(diskImageDao.getSnapshotById(org.mockito.Matchers.<org.ovirt.engine.core.compat.Guid>any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.CommonVmPoolCommandTestAbstract.getDiskImageList().get(0)); }

private boolean checkServerStatus(java.lang.String serverUrl, java.util.Set<java.lang.String> errors) { boolean isResponsive = true; java.net.HttpURLConnection engineConn = null; java.net.URL engine; try { engine = new java.net.URL(serverUrl); if (isHttpsProtocol) { engineConn = ((javax.net.ssl.HttpsURLConnection) (engine.openConnection())); ((javax.net.ssl.HttpsURLConnection) (engineConn)).setSSLSocketFactory(sslFactory); if (sslIgnoreHostVerification) { ((javax.net.ssl.HttpsURLConnection) (engineConn)).setHostnameVerifier(org.ovirt.engine.core.notifier.EngineMonitorService.IgnoredHostnameVerifier); } } else { engineConn = ((java.net.HttpURLConnection) (engine.openConnection())); } } catch (java.io.IOException e) { errors.add(e.getMessage()); isResponsive = false; } if (isResponsive) { try { int responseCode = engineConn.getResponseCode(); if (responseCode != (java.net.HttpURLConnection.HTTP_OK)) { isResponsive = false; org.ovirt.engine.core.notifier.EngineMonitorService.log.debug(java.text.MessageFormat.format("Server is non responsive with response code: {0}", responseCode)); } } catch (java.lang.Exception e) { errors.add(e.getMessage()); isResponsive = false; } finally { if (engineConn != null) { engineConn.disconnect(); engineConn = null; } } } org.ovirt.engine.core.notifier.EngineMonitorService.log.debug(("checkServerStatus return: " + isResponsive)); return isResponsive; }
org.ovirt.engine.core.common.businessentities.Guid getit_guid();

@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((org.ovirt.engine.core.common.businessentities.VM) (source)) : null; }
protected void updateDefaultHost() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getModel().getSelectedCluster(); final org.ovirt.engine.ui.uicompat.UIConstants constants = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants(); if (cluster == null) { getModel().getDefaultHost().setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); getModel().getDefaultHost().setSelectedItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); return; } getHostListByCluster(cluster, asyncQuery(( hosts) -> { List<org.ovirt.engine.core.common.businessentities.VDS> oldDefaultHosts = getModel().getDefaultHost().getSelectedItems(); if (((getModel().getBehavior().getSystemTreeSelectedItem()) != null) && ((getModel().getBehavior().getSystemTreeSelectedItem().getType()) == SystemTreeItemType.Host)) { org.ovirt.engine.core.common.businessentities.VDS host = ((org.ovirt.engine.core.common.businessentities.VDS) (getModel().getBehavior().getSystemTreeSelectedItem().getEntity())); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { if (host.getId().equals(vds.getId())) { getModel().getDefaultHost().setItems(new org.ovirt.engine.ui.uicommonweb.models.vms.ArrayList<>(java.util.Collections.singletonList(vds))); getModel().getDefaultHost().setSelectedItems(java.util.Collections.singletonList(vds)); getModel().getDefaultHost().setIsChangeable(false); getModel().getDefaultHost().setChangeProhibitionReason(constants.cannotChangeHostInTreeContext()); break; } } } else { getModel().getDefaultHost().setItems(hosts); if ((oldDefaultHosts != null) && (!(oldDefaultHosts.isEmpty()))) { Set<org.ovirt.engine.core.common.businessentities.VDS> oldSelectedIntersectionNewHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.HashSet<>(oldDefaultHosts); oldSelectedIntersectionNewHosts.retainAll(hosts); oldDefaultHosts = new org.ovirt.engine.ui.uicommonweb.models.vms.ArrayList<>(oldSelectedIntersectionNewHosts); } List<org.ovirt.engine.core.common.businessentities.VDS> hostsToSelect = ((oldDefaultHosts != null) && (!(oldDefaultHosts.isEmpty()))) ? oldDefaultHosts : !(hosts.isEmpty()) ? java.util.Collections.singletonList(hosts.get(0)) : java.util.Collections.<org.ovirt.engine.core.common.businessentities.VDS>emptyList(); getModel().getDefaultHost().setSelectedItems(hostsToSelect); } changeDefaultHost(); })); }
public static org.ovirt.engine.core.common.action.VdcReturnValueBase evaluateCorrelationId(org.ovirt.engine.core.common.action.VdcActionParametersBase parameters) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = null; java.lang.String correlationId = parameters.getCorrelationId(); if (org.apache.commons.lang.StringUtils.isEmpty(correlationId)) { correlationId = org.ovirt.engine.core.utils.CorrelationIdTracker.getCorrelationId(); if (org.apache.commons.lang.StringUtils.isEmpty(correlationId)) { correlationId = org.ovirt.engine.core.utils.log.LoggedUtils.getObjectId(parameters); } parameters.setCorrelationId(correlationId); } else { java.util.List<java.lang.String> messages = org.ovirt.engine.core.common.utils.ValidationUtils.validateInputs(org.ovirt.engine.core.bll.job.ExecutionHandler.validationGroups, parameters); if (!(messages.isEmpty())) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnErrorValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnErrorValue.setValid(false); returnErrorValue.getValidationMessages().addAll(messages); return returnErrorValue; } } return returnValue; }
private static void setPropertiesFromAuditLogableBase(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { auditLog.setStorageDomainId(auditLogable.getStorageDomainId()); auditLog.setStorageDomainName(auditLogable.getStorageDomainName()); auditLog.setStoragePoolId(auditLogable.getStoragePoolId()); auditLog.setStoragePoolName(auditLogable.getStoragePoolName()); auditLog.setVdsGroupId(auditLogable.getVdsGroupId()); auditLog.setVdsGroupName(auditLogable.getVdsGroupName()); auditLog.setCorrelationId(auditLogable.getCorrelationId()); auditLog.setJobId(auditLogable.getJobId()); auditLog.setGlusterVolumeId(auditLogable.getGlusterVolumeId()); auditLog.setGlusterVolumeName(auditLogable.getGlusterVolumeName()); auditLog.setExternal(auditLogable.isExternal()); auditLog.setQuotaId(auditLogable.getQuotaIdForLog()); auditLog.setQuotaName(auditLogable.getQuotaNameForLog()); auditLog.setCallStack(auditLogable.getCallStack()); }
public org.ovirt.engine.core.bll.ValidationResult imageProvidedForOvirtNode(java.lang.String image) { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE).when(((host.isOvirtNode()) && (org.apache.commons.lang.StringUtils.isBlank(image)))); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Tags> getAllVmTagsWithIds(java.lang.String ids) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("tag_ids", ids); return getCallsHandler().executeReadList("GetVmTagsByTagId", org.ovirt.engine.core.dao.TagDAODbFacadeImpl.TagRowMapper.instance, parameterSource); }

public static void clearNetworks(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> attachedNetworks = nic.getItems(); if ((attachedNetworks.size()) > 0) { for (org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkModel : new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(attachedNetworks)) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.DETACH_NETWORK.getCommand(networkModel, null, allNics).execute(); } } }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Attach more Storage") java.lang.String dataCenterAttachMoreStorageAction();
public void UpdateMaxNumOfVmCpus() { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ((org.ovirt.engine.core.common.businessentities.VDSGroup) (getModel().getCluster().getSelectedItem())); java.lang.String version = cluster.getcompatibility_version().toString(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetMaxNumOfVmCpus(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase) (target)); behavior.maxCpus = ((java.lang.Integer) (returnValue)); behavior.PostUpdateNumOfSockets2(); } }, getModel().getHash()), version); }
private <T extends org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid> & org.ovirt.engine.core.common.businessentities.Nameable> boolean isNameAndIdIncoherent(org.ovirt.engine.core.compat.Guid id, java.lang.String name, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<T> map) { T entityById = map.get(id); T entityByName = map.get(name); return !(java.util.Objects.equals(entityById, entityByName)); }

protected javax.ws.rs.core.Response performNonBlockingAction(org.ovirt.engine.core.common.action.VdcActionType task, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.api.model.Action action) { try { doNonBlockingAction(task, params); if (action != null) { action.setStatus(org.ovirt.engine.api.common.util.StatusUtils.create(CreationStatus.IN_PROGRESS)); return javax.ws.rs.core.Response.status(Response.Status.ACCEPTED).entity(action).build(); } else { return javax.ws.rs.core.Response.status(Response.Status.ACCEPTED).build(); } } catch (java.lang.Exception e) { return handleError(javax.ws.rs.core.Response.class, e, false); } }

@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((!(getAllowClusterWithVirtGlusterEnabled())) && (getEnableGlusterService().getEntity())) { getEnableOvirtService().setEntity(java.lang.Boolean.FALSE); } if (((!isEdit) && ((getEnableGlusterService().getEntity()) != null)) && (getEnableGlusterService().getEntity())) { getIsImportGlusterConfiguration().setIsAvailable(true); getGlusterHostAddress().setIsAvailable(true); getGlusterHostFingerprint().setIsAvailable(true); getGlusterHostPassword().setIsAvailable(true); } else { getIsImportGlusterConfiguration().setIsAvailable(false); getIsImportGlusterConfiguration().setEntity(false); getGlusterHostAddress().setIsAvailable(false); getGlusterHostFingerprint().setIsAvailable(false); getGlusterHostPassword().setIsAvailable(false); } if (((getEnableGlusterService().getEntity()) != null) && (getEnableGlusterService().getEntity())) { getEnableTrustedService().setEntity(false); getEnableTrustedService().setIsChangable(false); } else { if (((getEnableOvirtService().getEntity()) != null) && (getEnableOvirtService().getEntity())) { getEnableTrustedService().setIsChangable(true); } else { getEnableTrustedService().setIsChangable(false); } } }
private void updateDestinationVdsOnTimer(final org.ovirt.engine.core.vdsbroker.VdsManager vdsManager, final org.ovirt.engine.core.common.businessentities.VM vm) { synchronized(vdsManager.getLockObj()) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vdsManager.getVdsId()); try { vds.setVmCount(((vds.getVmCount()) + 1)); vds.setPendingVcpusCount(((vds.getPendingVcpusCount()) + (vm.getNumOfCpus()))); vds.setPendingVmemSize(((vds.getPendingVmemSize()) + (vm.getMinAllocatedMem()))); if (org.ovirt.engine.core.vdsbroker.MigrateVDSCommand.log.isDebugEnabled()) { org.ovirt.engine.core.vdsbroker.MigrateVDSCommand.log.debugFormat("IncreasePendingVms::MigrateVm Increasing vds {0} pending vcpu count, now {1}, and pending vmem size, now {2}. Vm: {3}", vds.getName(), vds.getPendingVcpusCount(), vds.getPendingVmemSize(), vm.getName()); } vdsManager.UpdateDynamicData(vds.getDynamicData()); } catch (java.lang.RuntimeException ex) { if (vds == null) { org.ovirt.engine.core.vdsbroker.MigrateVDSCommand.log.fatalFormat("VDS::migrate:: Could not update destination vds commited memory to db. vds {0} : was not find, error: {1}, {2}", vdsManager.getVdsId(), ex.toString(), ex.getStackTrace()[0]); } else { org.ovirt.engine.core.vdsbroker.MigrateVDSCommand.log.fatalFormat("VDS::migrate:: Could not update destination vds commited memory to db. vds {0} : {1}, error: {2}, {3}", vds.getId(), vds.getName(), ex.toString(), ex.getStackTrace()[0]); } } } }


@org.junit.Test public void testExportWithStorageDomainName() throws java.lang.Exception { setUpGetEntityExpectations(("Storage: name=" + (NAMES[2])), SearchType.StorageDomain, getStorageDomain(2)); org.ovirt.engine.api.model.StorageDomain storageDomain = new org.ovirt.engine.api.model.StorageDomain(); storageDomain.setName(NAMES[2]); doTestExport(storageDomain, false, false); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName; if ("IsLinuxOS".equals(propName)) { changeApplicationLevelVisibility(linuxBootOptionsPanel, vm.getIsLinuxOS()); } }

@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Failed to add VM. The reasons are: {}", java.lang.String.join(",", errorMessages)); return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } }
public void setNetworkQoS(org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQoS) { this.networkQoS = networkQoS; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if ((vm.getRunOnVds()) != null) { for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getId().equals(vm.getRunOnVds())) { org.ovirt.engine.core.bll.scheduling.policyunits.MigrationPolicyUnit.log.debug("Vm '{}' run on host '{}', filtering host", vm.getName(), host.getName()); hosts.remove(host); break; } } } return hosts; }


@java.lang.Override protected boolean canDoAction() { if (org.ovirt.engine.core.bll.RemoveVmCommand.isVmRunning(org.ovirt.engine.core.bll.AddVmToPoolCommand.getParameters().getVmId())) { return failCanDoAction(VdcBllMessages.VM_POOL_CANNOT_ADD_RUNNING_VM_TO_POOL); } if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().getVmPoolId()) != null) { return failCanDoAction(VdcBllMessages.VM_POOL_CANNOT_ADD_VM_ATTACHED_TO_POOL); } if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getParameters().getVmPoolId()) != null) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.AddVmToPoolCommand.getVmDAO().get(org.ovirt.engine.core.bll.AddVmToPoolCommand.getParameters().getVmId()); if (vm != null) { org.ovirt.engine.core.common.businessentities.VmPool pool = org.ovirt.engine.core.bll.AddVmToPoolCommand.getVmPoolDAO().get(org.ovirt.engine.core.bll.AddVmToPoolCommand.getParameters().getVmPoolId()); if (pool != null) { if (!(pool.getVdsGroupId().equals(vm.getVdsGroupId()))) { return failCanDoAction(VdcBllMessages.VM_POOL_CANNOT_ADD_VM_DIFFERENT_CLUSTER); } } } } return true; }
@org.junit.Test public void testGetAllForCluster() { java.util.List<org.ovirt.engine.core.common.businessentities.network> result = dao.getAllForCluster(cluster); org.ovirt.engine.core.dao.NetworkDAOTest.assertGetAllForClusterResult(result); }
@java.lang.Override public java.lang.String toString() { java.lang.String prefix = ""; if ((TotalMilliseconds) < 0) { prefix = "-"; } return java.lang.String.format("%s%d.%02d:%02d:%02d.%03d", prefix, Days, Hours, Minutes, Seconds, Milliseconds); }
private boolean removeDeprecatedOvirtEntry(final org.ovirt.engine.core.compat.Guid oVirtId) { final org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(oVirtId); if ((vds == null) || (!(org.ovirt.engine.core.bll.VdsHandler.isPendingOvirt(vds)))) { return false; } java.lang.String vdsName = org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getParameters().getVdsStaticData().getName(); log.info("Host '{}', id '{}' of type '{}' is being re-registered as Host '{}'", vds.getName(), vds.getId(), vds.getVdsType().name(), vdsName); org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<org.ovirt.engine.core.common.action.VdcReturnValueBase>() { @java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase runInTransaction() { return runInternalAction(VdcActionType.RemoveVds, new org.ovirt.engine.core.common.action.RemoveVdsParameters(oVirtId)); } }); if (!(result.getSucceeded())) { java.lang.String errors = (result.getCanDoAction()) ? result.getFault().getError().name() : org.apache.commons.lang.StringUtils.join(result.getCanDoActionMessages(), ","); log.warn("Failed to remove Host '{}', id '{}', re-registering it as Host '{}' fails with errors {}", vds.getName(), vds.getId(), vdsName, errors); } else { log.info("Host '{}' is now known as Host '{}'", vds.getName(), vdsName); } return result.getSucceeded(); }

@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { if (!(bondDialogModel.validate())) { return; } sourceListModel.setConfirmWindow(null); java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> potentialNetworks = computeLabelChanges(bondDialogModel.getLabelsModel(), nicMap.get(entity.getName()).getItems()); if (validateLabelChanges(potentialNetworks)) { setBondOptions(entity, bondDialogModel); commitLabelChanges(bondDialogModel.getLabelsModel(), entity, potentialNetworks); redraw(); } }

public org.ovirt.engine.core.bll.ValidationResult notExternalNetwork() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.EXTERNAL_NETWORK_CANNOT_BE_PROVISIONED).when(getNetwork().isExternal()); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc glusterVolumeRemoveBrickStatus(java.lang.String volumeName, java.lang.String[] bricksList) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.removeBrickStatus").withParameter("volumeName", volumeName).withParameter("brickList", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(bricksList))).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeTaskReturnForXmlRpc(response); }
@java.lang.Override public void init(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> disksImages) { setDiskImages(disksImages); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDiskList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.CopyDiskModel copyDiskModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.CopyDiskModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>) (returnValue)); copyDiskModel.onInitAllDisks(disks); copyDiskModel.onInitDisks(); } })); }


@java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call() { getParameters().setStorageDomainId(getMasterDomainIdFromDb()); org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainPoolMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(getParameters().getNewMasterDomainId(), getParameters().getStoragePoolId(), org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().save(domainPoolMap); getParameters().setVdsId(getVds().getId()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = getBackend().runInternalAction(VdcActionType.ReconstructMasterDomain, getParameters()); boolean reconstructVerbExecuted = ((returnVal.getActionReturnValue()) != null) ? ((java.lang.Boolean) (returnVal.getActionReturnValue())) : false; getStoragePoolDAO().updateStatus(getStoragePool().getId(), StoragePoolStatus.NonResponsive); if (!reconstructVerbExecuted) { getStoragePoolIsoMapDAO().remove(domainPoolMap.getId()); } if (returnVal.getSucceeded()) { updateStorageDomainFormat(loadTargetedMasterDomain()); } setSucceeded(returnVal.getSucceeded()); return new org.ovirt.engine.core.common.eventqueue.EventResult(reconstructVerbExecuted, org.ovirt.engine.core.common.eventqueue.EventType.RECONSTRUCT); }

void showModels(java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel> interfaceLineModels) { this.setVisible(true); grid.resizeRows(interfaceLineModels.size()); int row = 0; for (org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel : interfaceLineModels) { setGridWidget(row, 0, createInterfacePanel(lineModel)); setGridWidget(row, 1, createBondPanel(lineModel)); setGridWidget(row, 2, createVLanPanel(lineModel)); row++; } }
void detachAlert(org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel) { com.google.gwt.user.client.ui.RootPanel.get().remove(alertPanel); }

@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(IVdcQueryable quota) { boolean quotaExceeded = false; if (quota instanceof org.ovirt.engine.core.common.businessentities.QuotaStorage) { quotaExceeded = getQuotaExceeded(((org.ovirt.engine.core.common.businessentities.QuotaStorage) (quota))); } else if (quota instanceof org.ovirt.engine.core.common.businessentities.QuotaVdsGroup) { quotaExceeded = getQuotaExceeded(((org.ovirt.engine.core.common.businessentities.QuotaVdsGroup) (quota))); } else { return null; } if (quotaExceeded) { setTitle(org.ovirt.engine.ui.webadmin.widget.table.column.QuotaUtilizationStatusColumn.applicationConstants.quotaExceeded()); } return quotaExceeded ? getResources().alertImage() : null; }

@java.lang.Override public void onSuccess(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase> operation, final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Frontend: sucessfully executed runAction, determining result!"); handleActionResult(actionType, parameters, result, (callback != null ? callback : org.ovirt.engine.ui.frontend.Frontend.NULLABLE_ASYNC_CALLBACK), state, showErrorDialog); org.ovirt.engine.ui.frontend.communication.RefreshActiveModelEvent.fire(this, true); }

public abstract java.lang.String getVerb(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1);
protected void removeVmStatic(boolean removePermissions) { org.ovirt.engine.core.bll.VmCommand.getVmStaticDao().remove(org.ovirt.engine.core.bll.VmCommand.getVmId(), removePermissions); }
@java.lang.Override protected boolean canDoAction() { if (!(schedulingManager.getPolicyUnitsMap().containsKey(getPolicyUnitId()))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_POLICY_UNKNOWN_POLICY_UNIT); } java.util.List<java.lang.String> clusterPoliciesNames = schedulingManager.getClusterPoliciesNamesByPolicyUnitId(getPolicyUnitId()); if ((clusterPoliciesNames != null) && ((clusterPoliciesNames.size()) > 0)) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_CANNOT_REMOVE_POLICY_UNIT_ATTACHED_TO_CLUSTER_POLICY, java.lang.String.format("$cpNames %1$s", org.apache.commons.lang.StringUtils.join(clusterPoliciesNames, ','))); } return true; }


protected int getMaxClonedNameLength(java.lang.Object object) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm(); return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isWindowsOsType(vm.getOs()) ? org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.WINDOWS_VM_NAME_MAX_LIMIT : org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.NON_WINDOWS_VM_NAME_MAX_LIMIT; }
@java.lang.Override protected void buildSysprepVmPayload(java.lang.String sysPrepContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setType(VmDeviceType.FLOPPY); vmPayload.setFileName(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.SYSPREP_FILE_NAME); vmPayload.setContent(org.apache.commons.codec.binary.Base64.encodeBase64String(sysPrepContent.getBytes())); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.NewGuid(), vm.getId()), VmDeviceType.DISK.getName(), VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, ""); org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct struct = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct(); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addFloppyDetails(vmDevice, struct); addDevice(struct, vmDevice, vm.getFloppyPath()); }

@org.junit.Test public void tooLowPct() { org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings settings = new org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings(); settings.diskSpaceFree = 6; settings.diskSpaceUsed = 4; settings.spaceThresholdGB = 5; settings.spaceThresholdPct = 70; org.ovirt.engine.core.common.businessentities.storage_domains domain = setupForSpaceTest(settings); assertFalse(org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.isBelowThresholds(domain)); }
public org.ovirt.engine.core.common.businessentities.Snapshot addActiveSnapshot(org.ovirt.engine.core.compat.Guid snapshotId, org.ovirt.engine.core.common.businessentities.VM vm, java.lang.String memoryVolume, final org.ovirt.engine.core.bll.context.CompensationContext compensationContext) { return addActiveSnapshot(snapshotId, vm, SnapshotStatus.OK, memoryVolume, null, compensationContext); }
private void glusterHostRemove() { if ((clusterHasMultipleHosts()) && (!(hasVolumeBricksOnServer()))) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.RemoveGlusterServer, new org.ovirt.engine.core.common.vdscommands.gluster.RemoveGlusterServerVDSParameters(upServer.getId(), org.ovirt.engine.core.bll.RemoveVdsCommand.getVds().getHostName(), org.ovirt.engine.core.bll.RemoveVdsCommand.getParameters().isForceAction())); setSucceeded(returnValue.getSucceeded()); if (!(org.ovirt.engine.core.bll.RemoveVdsCommand.getSucceeded())) { org.ovirt.engine.core.bll.RemoveVdsCommand.getReturnValue().getFault().setError(returnValue.getVdsError().getCode()); org.ovirt.engine.core.bll.RemoveVdsCommand.getReturnValue().getFault().setMessage(returnValue.getVdsError().getMessage()); errorType = org.ovirt.engine.core.common.AuditLogType.GLUSTER_SERVER_REMOVE_FAILED; return; } } }


@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getSysPrepUserName()) == null) ^ ((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getSysPrepPassword()) == null)) { return failCanDoAction(VdcBllMessages.VM_CANNOT_RUN_ONCE_WITH_ILLEGAL_SYSPREP_PARAM); } if ((org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit()) != null) { if ((!(OsRepositoryImpl.INSTANCE.isWindows(org.ovirt.engine.core.bll.RunVmOnceCommand.getVm().getOs()))) && (!(org.ovirt.engine.core.common.FeatureSupported.cloudInit(org.ovirt.engine.core.bll.RunVmOnceCommand.getVm().getVdsGroupCompatibilityVersion())))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLOUD_INIT_IS_NOT_SUPPORTED); } if (org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit().isPasswordAlreadyStored()) { org.ovirt.engine.core.common.businessentities.VmBase temp = new org.ovirt.engine.core.common.businessentities.VmBase(); temp.setId(org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmId()); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(temp, false); org.ovirt.engine.core.bll.RunVmOnceCommand.getParameters().getVmInit().setRootPassword(temp.getVmInit().getRootPassword()); } } return true; }
@java.lang.Override protected void executeCommand() { setQuotaParameter(); getQuotaDAO().save(getQuota()); getReturnValue().setSucceeded(true); }
private java.util.List<org.ovirt.engine.core.common.businessentities.ad_groups> searchAdGroups() { return adSearch(LdapQueryType.searchGroups, AdActionType.SearchGroupsByQuery); }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getVmDisksFromDB() { if ((cachedDisksFromDb) == null) { cachedDisksFromDb = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVm().getDiskMap().values(), false, true, true); cachedDisksFromDb.addAll(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(org.ovirt.engine.core.bll.AddVmTemplateFromSnapshotCommand.getVm().getDiskMap().values(), true)); } return cachedDisksFromDb; }
private void createDiskBasedOnLun() { final org.ovirt.engine.core.common.businessentities.LUNs lun = ((org.ovirt.engine.core.common.businessentities.LunDisk) (org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo())).getLun(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.proceedLUNInDb(lun, lun.getLunType()); getBaseDiskDao().save(getParameters().getDiskInfo()); getDiskLunMapDao().save(new org.ovirt.engine.core.common.businessentities.DiskLunMap(getParameters().getDiskInfo().getId(), lun.getLUN_id())); if ((getVm()) != null) { org.ovirt.engine.core.bll.utils.VmDeviceUtils.addManagedDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getParameters().getDiskInfo().getId(), getVmId()), VmDeviceType.DISK, VmDeviceType.DISK, null, ((getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Down)), false); } return null; } }); org.ovirt.engine.core.bll.AddDiskCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo().getId()); org.ovirt.engine.core.bll.AddDiskCommand.setSucceeded(true); }

public static boolean copyNonEditableFieldsToDestination(org.ovirt.engine.core.common.businessentities.VmStatic source, org.ovirt.engine.core.common.businessentities.VmStatic destination) { return org.ovirt.engine.core.bll.VmHandler.mUpdateVmsStatic.copyNonEditableFieldsToDestination(source, destination); }

private void addDataCenter() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel guideModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel) (target)); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> allDataCenters = ((java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>) (returnValue)); java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.StoragePool>> filteredDataCenters = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> localDataCenters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StoragePool dataCenter : allDataCenters) { if ((guideModel.getEntity().getCompatibilityVersion().compareTo(dataCenter.getCompatibilityVersion())) >= 0) { if (dataCenter.isLocal()) { localDataCenters.add(dataCenter); } else { filteredDataCenters.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(dataCenter)); } } } if (localDataCenters.isEmpty()) { displayAddDataCenter(filteredDataCenters); } else { verifyLocalDataCenterNoCluster(filteredDataCenters, localDataCenters); } } })); }

@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior) (array[0])); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (array[1])); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>) (returnValue)); InitClusters(clusters, model); behavior.InitTemplate(); behavior.InitCdImage(); }
protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool() { return poolPerDc.poolForDataCenter(getStoragePoolId()); }
public void Activate() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> pb = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain a : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.StorageDomain>cast(getSelectedItems())) { pb.add(new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase(a.getId(), getEntity().getId())); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.ActivateStorageDomain, pb); }
@java.lang.Override protected void onSelectedItemChanged() { super.onSelectedItemChanged(); if ((getSelectedItem()) != null) { updateDetailsAvailability(); if ((getDetailModels()) != null) { if ((((getActiveDetailModel()) != null) && (!(getActiveDetailModel().getIsAvailable()))) || ((getActiveDetailModel()) == null)) { org.ovirt.engine.ui.uicommonweb.models.EntityModel model = null; for (org.ovirt.engine.ui.uicommonweb.models.EntityModel item : getDetailModels()) { if (item.getIsAvailable()) { model = item; break; } } setActiveDetailModel(model); } } } else { if (((getActiveDetailModel()) != null) && ((getActiveDetailModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel)) { ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (getActiveDetailModel())).stopRefresh(); } } org.ovirt.engine.ui.uicommonweb.models.EntityModel activeDetailModel = getActiveDetailModel(); if (((getSelectedItem()) != null) && (activeDetailModel != null)) { if (activeDetailModel instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel) { ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel) (activeDetailModel)).setEntity(((org.ovirt.engine.core.common.businessentities.VDS) (provideDetailModelEntity(getSelectedItem())))); } else { activeDetailModel.setEntity(provideDetailModelEntity(getSelectedItem())); } } }
public static org.ovirt.engine.core.bll.ValidationResult.ValidationResultBuilder failWith(org.ovirt.engine.core.common.errors.VdcBllMessages expectedError, java.lang.String... replacements) { return new org.ovirt.engine.core.bll.ValidationResult.ValidationResultBuilder(expectedError, replacements); }
public boolean Validate() { getDescription().ValidateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.AsciiOrNoneValidation() }); return getDescription().getIsValid(); }
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.permissions>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.permissions>(); }



com.google.gwt.user.client.ui.Grid createBlankRow(final org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceLineModel lineModel) { com.google.gwt.user.client.ui.Grid row = new com.google.gwt.user.client.ui.Grid(1, 3); row.getColumnFormatter().setWidth(0, org.ovirt.engine.ui.webadmin.widget.host.VLanPanel.CHECK_BOX_COLUMN_WIDTH); row.getColumnFormatter().setWidth(1, org.ovirt.engine.ui.webadmin.widget.host.VLanPanel.NETWORK_NAME_COLUMN_WIDTH); row.getColumnFormatter().setWidth(2, org.ovirt.engine.ui.webadmin.widget.host.VLanPanel.ADDRESS_COLUMN_WIDTH); row.setWidth("100%"); row.setHeight("100%"); row.setWidget(0, 0, new com.google.gwt.user.client.ui.Label()); com.google.gwt.user.client.ui.Label networkName = new com.google.gwt.user.client.ui.Label(lineModel.getNetworkName()); if (lineModel.getIsManagement()) { networkName.getElement().getStyle().setFontWeight(FontWeight.BOLD); networkName.setText(("* " + (lineModel.getNetworkName()))); } row.setWidget(0, 1, networkName); row.setWidget(0, 2, new com.google.gwt.user.client.ui.Label(lineModel.getAddress())); return row; }
@javax.ws.rs.Path("{action: (proxyticket)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
void localize(org.ovirt.engine.ui.common.CommonApplicationConstants constants) { nameEditor.setLabel(constants.makeTemplatePopupNameLabel()); descriptionEditor.setLabel(constants.makeTemplatePopupDescriptionLabel()); commentEditor.setLabel(constants.commentLabel()); clusterEditor.setLabel(constants.makeTemplateClusterLabel()); quotaEditor.setLabel(constants.makeTemplateQuotaLabel()); isTemplatePublicEditor.setLabel(constants.makeTemplateIsTemplatePublicEditorLabel()); copyVmPermissions.setLabel(constants.copyVmPermissions()); disksAllocationLabel.setText(constants.disksAllocation()); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Cann't switch host cluster between trust cluster and non-trust cluster due to host existed in the cluster") java.lang.String trustedServiceDisabled();
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.VmTemplate vmt; if ((org.ovirt.engine.core.bll.GetVmTemplateQuery.getParameters().getName()) != null) { vmt = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().getByName(org.ovirt.engine.core.bll.GetVmTemplateQuery.getParameters().getName(), org.ovirt.engine.core.bll.GetVmTemplateQuery.getUserID(), org.ovirt.engine.core.bll.GetVmTemplateQuery.getParameters().isFiltered()); } else { vmt = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().get(org.ovirt.engine.core.bll.GetVmTemplateQuery.getParameters().getId(), org.ovirt.engine.core.bll.GetVmTemplateQuery.getUserID(), org.ovirt.engine.core.bll.GetVmTemplateQuery.getParameters().isFiltered()); } if (vmt != null) { org.ovirt.engine.core.bll.VmTemplateHandler.updateDisksFromDb(vmt); org.ovirt.engine.core.bll.VmHandler.updateVmInitFromDB(vmt, true); } org.ovirt.engine.core.bll.GetVmTemplateQuery.getQueryReturnValue().setReturnValue(vmt); }
public org.ovirt.engine.core.bll.ValidationResult notRemovingUsedPool() { final int dcUsageCount = getMacPoolDao().getDcUsageCount(macPool.getId()); return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_STILL_USED_MAC_POOL).when((dcUsageCount != 0)); }
protected boolean checkCanBeMoveInVm() { return validate(new org.ovirt.engine.core.bll.validator.storage.DiskValidator(getImage()).isDiskPluggedToVmsThatAreNotDown(false, getVmsWithVmDeviceInfoForDiskId())); }
@java.lang.Override public void processOnClientIpChange(final org.ovirt.engine.core.common.businessentities.VDS vds, final org.ovirt.engine.core.compat.Guid vmId) { final org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDAO().get(vmId); if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(vmDynamic.getclient_ip()))) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(new java.lang.Runnable() { @java.lang.Override public void run() { org.ovirt.engine.core.bll.RunVmCommandBase.DoCompressionCheck(vds, vmDynamic); if ((org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>GetValue(ConfigValues.PowerClientAutoMigrateToPowerClientOnConnect)) || (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>GetValue(ConfigValues.PowerClientAutoMigrateFromPowerClientToVdsWhenConnectingFromRegularClient))) { org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.PowerClientMigrateOnConnectCheck, new org.ovirt.engine.core.common.action.PowerClientMigrateOnConnectCheckParameters(false, vmDynamic.getId(), vmDynamic.getclient_ip(), vds.getId()), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); } } }); } else { vmDynamic.setguest_cur_user_id(null); vmDynamic.setguest_cur_user_name(null); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDAO().update(vmDynamic); } }
@java.lang.SuppressWarnings("unchecked") private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLunsFromVgInfo() { org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStorageDomain().getStorage()); if ((org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getParameters().getVdsId()) == null) { return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithoutFailover(VDSCommandType.GetVGInfo, params, org.ovirt.engine.core.bll.storage.domain.SyncLunsInfoForBlockStorageDomainCommand.getStoragePoolId(), null).getReturnValue())); } return ((java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>) (runVdsCommand(VDSCommandType.GetVGInfo, params).getReturnValue())); }





@java.lang.Override protected void executeCommand() { if (org.ovirt.engine.core.bll.VmTemplateHandler.isTemplateStatusIsNotLocked(org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getVmTemplateId())) { org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getVmTemplateId(), org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getCompensationContext()); if (!(getTemplateDisks().isEmpty())) { MoveOrCopyAllImageGroups(); } else { endVmTemplateRelatedOps(); } org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.setSucceeded(true); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getAll() { try { com.woorea.openstack.quantum.model.Networks networks = getClient().networks().list().execute(); return map(networks.getList()); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.PROVIDER_FAILURE, e); } }
@java.lang.Override public void initializeHandlers() { super.initializeHandlers(); final org.ovirt.engine.ui.uicommonweb.models.hosts.HostGeneralModel model = getModelProvider().getModel(); updateAlerts(getView(), model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (args instanceof org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs changedArgs = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)); if (changedArgs.propertyName.contains("Alert")) { updateAlerts(getView(), model); } } } }); }
protected void map(java.sql.ResultSet rs, org.ovirt.engine.core.common.businessentities.HostDevice device) throws java.sql.SQLException { device.setHostId(org.ovirt.engine.core.dao.HostDeviceDaoImpl.BaseHostDeviceRowMapper.getGuid(rs, "host_id")); device.setDeviceName(rs.getString("device_name")); device.setParentDeviceName(rs.getString("parent_device_name")); device.setCapability(rs.getString("capability")); device.setIommuGroup(((java.lang.Integer) (rs.getObject("iommu_group")))); device.setProductName(rs.getString("product_name")); device.setProductId(rs.getString("product_id")); device.setVendorName(rs.getString("vendor_name")); device.setVendorId(rs.getString("vendor_id")); device.setParentPhysicalFunction(rs.getString("physfn")); device.setTotalVirtualFunctions(((java.lang.Integer) (rs.getObject("total_vfs")))); device.setNetworkInterfaceName(rs.getString("net_iface_name")); device.setVmId(org.ovirt.engine.core.dao.HostDeviceDaoImpl.BaseHostDeviceRowMapper.getGuid(rs, "vm_id")); }
public void setModel(M model) { this.model = model; getModel().getSelectedItemChangedEvent().addListener(( ev, sender, args) -> updateInfoPanel()); getModel().getItemsChangedEvent().addListener(( ev, sender, args) -> updateInfoPanel()); }
protected void updateCpuPinningVisibility() { if ((getModel().getCluster().getSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ((org.ovirt.engine.core.common.businessentities.VDSGroup) (getModel().getCluster().getSelectedItem())); java.lang.String compatibilityVersion = cluster.getcompatibility_version().toString(); boolean hasCpuPinning = java.lang.Boolean.FALSE.equals(getModel().getIsAutoAssign().getEntity()); if (java.lang.Boolean.FALSE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigValuePreConverted(ConfigurationValues.CpuPinningEnabled, compatibilityVersion))) { hasCpuPinning = false; } else if ((java.lang.Boolean.FALSE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigValuePreConverted(ConfigurationValues.CpuPinMigrationEnabled, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()))) && (isVmMigratable())) { hasCpuPinning = false; } getModel().getCpuPinning().setIsChangable(hasCpuPinning); if (!hasCpuPinning) { getModel().getCpuPinning().setEntity(""); } } }

public static void handleTooltipEvent(com.google.gwt.dom.client.Element parent, com.google.gwt.safehtml.shared.SafeHtml tooltipContent, com.google.gwt.dom.client.NativeEvent event) { if (BrowserEvents.MOUSEOVER.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.configureTooltip(parent, tooltipContent, event); } if (BrowserEvents.MOUSEOUT.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.reapAllTooltips(); } if (BrowserEvents.MOUSEDOWN.equals(event.getType())) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.hideAllTooltips(); } }
@org.junit.Test public void updateWithLowerVersionThanHosts() { createCommandWithDefaultVdsGroup(); setupCpu(); VdsExistWithHigherVersion(); architectureIsUpdatable(); canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_COMPATIBILITY_VERSION_WITH_LOWER_HOSTS); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove Storage(s)") java.lang.String removeStoragesTitle();

public static org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy getFromStorageDomainId(org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic = getDbFacade().getStorageDomainStaticDao().get(storageDomainId); if (storageDomainStatic != null) { org.ovirt.engine.core.common.businessentities.Provider<?> provider = getDbFacade().getProviderDao().get(new org.ovirt.engine.core.compat.Guid(storageDomainStatic.getStorage())); return org.ovirt.engine.core.bll.provider.ProviderProxyFactory.getInstance().create(provider); } return null; }



@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQoS) { return getCustomMapSqlParameterSource().addValue("id", networkQoS.getId()).addValue("name", networkQoS.getName()).addValue("storage_pool_id", networkQoS.getStoragePoolId()).addValue("inbound_average", networkQoS.getInboundAverage()).addValue("inbound_peak", networkQoS.getInboundPeak()).addValue("inbound_burst", networkQoS.getInboundBurst()).addValue("outbound_average", networkQoS.getOutboundAverage()).addValue("outbound_peak", networkQoS.getOutboundPeak()).addValue("outbound_burst", networkQoS.getOutboundBurst()); }
@org.junit.Test public void invalidCpuSelection() { createCommandWithDefaultVdsGroup(); canDoActionFailedWithReason(VdcBllMessages.ACTION_TYPE_FAILED_CPU_NOT_FOUND); }

protected org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateEntity() { org.ovirt.engine.core.common.businessentities.VmTemplate entity = control.createMock(org.ovirt.engine.core.common.businessentities.VmTemplate.class); expect(entity.getId()).andReturn(GUIDS[1]).anyTimes(); expect(entity.getVdsGroupId()).andReturn(GUIDS[2]).anyTimes(); expect(entity.getName()).andReturn(NAMES[1]).anyTimes(); expect(entity.getDescription()).andReturn(DESCRIPTIONS[1]).anyTimes(); expect(entity.getNumOfCpus()).andReturn(8).anyTimes(); expect(entity.getNumOfSockets()).andReturn(2).anyTimes(); expect(entity.getDefaultDisplayType()).andReturn(DisplayType.vnc).anyTimes(); expect(entity.getNumOfMonitors()).andReturn(2).anyTimes(); expect(entity.getVmType()).andReturn(VmType.Server).anyTimes(); return entity; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Tags> getAll() { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource(); return getCallsHandler().executeReadList("GetAllFromtags", org.ovirt.engine.core.dao.TagDAODbFacadeImpl.TagRowMapper.instance, parameterSource); }

@java.lang.Override public void render(org.ovirt.engine.ui.userportal.widget.extended.vm.Context context, org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel model, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb) { sb.append(org.ovirt.engine.ui.userportal.widget.extended.vm.AbstractConsoleButtonCell.template.consoleButton(org.ovirt.engine.ui.common.utils.ElementIdUtils.createTableCellElementId(elementIdPrefix, columnId, context), title, (shouldRenderCell(model) ? enabledCss : disabledCss))); }
private void mockJobSubjectEntityDao(org.ovirt.engine.core.compat.Guid jobId) { when(jobSubjectEntityDao.getJobSubjectEntityByJobId(eq(jobId))).thenReturn(org.ovirt.engine.core.bll.job.JobRepositoryTest.JOB_SUBJECT_ENTITIES_MAP); when(jobSubjectEntityDao.getJobIdByEntityId(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Arrays.<org.ovirt.engine.core.compat.Guid>asList(jobId)); }


@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass()) != (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.DbUser other = ((org.ovirt.engine.core.common.businessentities.DbUser) (obj)); return (((((((((((((org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(id, other.id)) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(department, other.department))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(desktopDevice, other.desktopDevice))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(domain, other.domain))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(email, other.email))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(groups, other.groups))) && ((lastAdminCheckStatus) == (other.lastAdminCheckStatus))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(name, other.name))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(note, other.note))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(role, other.role))) && ((status) == (other.status))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(surname, other.surname))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(userIconPath, other.userIconPath))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(username, other.username)); }
private void preview() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getEntity())); if (vm == null) { return; } org.ovirt.engine.core.common.businessentities.Snapshot snapshot = ((org.ovirt.engine.core.common.businessentities.Snapshot) (getSelectedItem())); if ((!(isMemorySnapshotSupported())) || (snapshot.getMemoryVolume().isEmpty())) { org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId()), null); } else { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().previewSnapshotTitle()); model.setHashName("preview_snapshot"); model.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("OnPreview", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true)); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()).setIsCancel(true); model.getCommands().add(cancelCommand); model.setCancelCommand(cancelCommand); model.setCloseCommand(new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()).setIsCancel(true)); } }
protected boolean hasWatchdog(org.ovirt.engine.core.compat.Guid vmId) { return org.ovirt.engine.core.bll.utils.VmDeviceUtils.hasWatchdog(vmId); }
@java.lang.Override protected void executeCommand() { if (shouldSkipCommandExecutionCached()) { org.ovirt.engine.core.bll.VmCommand.setSucceeded(true); return; } executeVmCommand(); }
@java.lang.Override protected void logToAudit() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLogableBase.addCustomValue("message", org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.getReturnStatus().message); auditLogDirector.log(auditLogableBase, AuditLogType.IRS_BROKER_COMMAND_FAILURE); }
@java.lang.Override public void updateInterface(org.ovirt.engine.core.compat.Version clusterVersion) { super.updateInterface(clusterVersion); getDiskInterface().setSelectedItem(getDisk().getDiskInterface()); }


protected boolean checkSingleQxlDisplay() { if (!(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData().getSingleQxlPci())) { return true; } return org.ovirt.engine.core.bll.VmHandler.isSingleQxlDeviceLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getDefaultDisplayType(), org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getOs(), org.ovirt.engine.core.bll.AddVmCommand.getReturnValue().getCanDoActionMessages(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); }
public static java.util.List<org.ovirt.engine.core.aaa.DirectoryGroup> findGroupsByIds(final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension, final java.lang.String namespace, final java.util.List<java.lang.String> ids, final boolean resolveGroups, final boolean resolveGroupsRecursive) { java.util.List<org.ovirt.engine.core.aaa.DirectoryGroup> results = new java.util.ArrayList<>(); for (java.util.List<java.lang.String> batch : org.ovirt.engine.core.aaa.SearchQueryParsingUtils.getIdsBatches(extension.getContext(), ids)) { results.addAll(org.ovirt.engine.core.aaa.AuthzUtils.queryGroups(extension, namespace, org.ovirt.engine.core.aaa.SearchQueryParsingUtils.generateQueryMap(batch, QueryEntity.GROUP), resolveGroups, resolveGroupsRecursive)); } return results; }
@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { updateDefaultHost(); updateCustomPropertySheet(); updateMinAllocatedMemory(); updateNumOfSockets(); if ((getModel().getTemplate().getSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel().getTemplate().getSelectedItem(); updateQuotaByCluster(template.getQuotaId(), template.getQuotaName()); } updateCpuPinningVisibility(); updateTemplate(); updateNetworkInterfaces(networkBehavior, null); updateOSValues(); updateMemoryBalloon(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); }

protected void updateInputTitle(java.util.ArrayList<java.lang.String> grayOutReasons, com.google.gwt.dom.client.Element input) { java.lang.StringBuilder title = new java.lang.StringBuilder(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.empty()); for (java.lang.String reason : grayOutReasons) { title.append(reason).append(org.ovirt.engine.ui.common.widget.uicommon.storage.AbstractSanStorageList.constants.space()); } org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(title.toString()), input, Placement.LEFT); }
public void updateMigrationAvailability() { java.lang.Boolean haHost = getModel().getIsHighlyAvailable().getEntity(); if (haHost) { getModel().getMigrationMode().setChangeProhibitionReason(constants.hostIsHa()); getModel().getMigrationMode().setSelectedItem(MigrationSupport.MIGRATABLE); } getModel().getMigrationMode().setIsChangeable((!haHost)); }

private void detach() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().detachStorageTitle()); model.setHashName("detach_storage"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().areYouSureYouWantDetachStorageFromDcsMsg()); java.util.ArrayList<java.lang.String> items = new java.util.ArrayList<java.lang.String>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.StorageDomain a = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (item)); items.add(a.getStoragePoolName()); } model.setItems(items); if (containsLocalStorage(model)) { model.getLatch().setIsAvailable(true); model.getLatch().setIsChangable(true); model.setNote(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().detachNote(getLocalStoragesFormattedString())); } org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnDetach", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
@java.lang.Override protected void ExecuteVdsBrokerCommand() { if (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>GetValue(ConfigValues.SendVmTicketUID, org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getVds().getVdsGroupCompatibilityVersion().toString())) { java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<java.lang.String, java.lang.String>(); params.put("userName", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getUserName()); params.put("userId", org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getParameters().getUserId().toString()); status = org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getBroker().setVmTicket(mVmId.toString(), mTicket, new java.lang.Integer(mValidTime).toString(), connectionAction, params); } else { status = org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.getBroker().setVmTicket(mVmId.toString(), mTicket, new java.lang.Integer(mValidTime).toString()); } org.ovirt.engine.core.vdsbroker.vdsbroker.SetVmTicketVDSCommand.ProceedProxyReturnValue(); }
public static void GetClusterServerMemoryOverCommit(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.Integer) (source)).intValue() : 0; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.MaxVdsMemOverCommitForServers, org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion), aQuery); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, hostName, consoleAddress, name, otpValidity, pmEnabled, pmKdumpDetection, port, protocol, sshPort, sshUsername, serverSslEnabled, uniqueId, clusterId, vdsStrength, vdsType, disablePowerManagementPolicy, hostProviderId); }
private static java.lang.String generateDiskDescriptionJsonEntry(java.lang.String diskDescription) { return org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.getInstance().generateJsonField("DiskDescription", diskDescription); }

private void reportServerStatus(boolean isResponsive) { boolean statusChanged; boolean lastServerStatus = isServerUp; isServerUp = isResponsive; statusChanged = lastServerStatus ^ isResponsive; if (statusChanged || (repeatNonResponsiveNotification)) { if (isResponsive) { if (statusChanged) { insertEventIntoAuditLogSafe(AuditLogType.VDC_START, AuditLogSeverity.NORMAL, org.ovirt.engine.core.notifier.EngineMonitorService.ENGINE_RESPONDING_MESSAGE, "Failed auditing event down (for responsive server)."); } } else { if (new java.io.File(pidFile).exists()) { insertEventIntoAuditLogSafe(AuditLogType.VDC_STOP, AuditLogSeverity.ERROR, org.ovirt.engine.core.notifier.EngineMonitorService.ENGINE_NOT_RESPONDING_ERROR, "Failed auditing event up (for crashed non-responsive server)."); } else { insertEventIntoAuditLogSafe(AuditLogType.VDC_STOP, AuditLogSeverity.WARNING, org.ovirt.engine.core.notifier.EngineMonitorService.ENGINE_NOT_RESPONDING_ERROR, "Failed auditing event up (for stopped non-responsive server)."); } } } }
@java.lang.Override public void onFailure(final java.lang.Throwable caught) { if (org.ovirt.engine.ui.frontend.Frontend.ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ("Failed to execute RunQuery: " + caught), caught); org.ovirt.engine.ui.frontend.Frontend.getEventsHandler().runQueryFailed(null); org.ovirt.engine.ui.frontend.Frontend.failureEventHandler(caught); if (callback.isHandleFailure()) { org.ovirt.engine.ui.frontend.Frontend.setLoggedInUser(null); callback.getDel().onSuccess(callback.getModel(), null); } }
@java.lang.Override public void migrateVM(java.util.List<org.ovirt.engine.core.compat.Guid> initialHosts, org.ovirt.engine.core.compat.Guid vmToMigrate) { org.ovirt.engine.core.common.action.MigrateVmParameters parameters = new org.ovirt.engine.core.common.action.MigrateVmParameters(false, vmToMigrate); parameters.setInitialHosts(new java.util.ArrayList(initialHosts)); backendInternal.runInternalAction(VdcActionType.MigrateVm, parameters, org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); }



@org.junit.Test public void testJsonDiskDescription() throws java.io.IOException { assertDiskDescriptionMap("DiskAlias", "DiskDescription"); }

protected void readHardwareSection(org.ovirt.engine.core.compat.backendcompat.XmlNode section) { for (org.ovirt.engine.core.compat.backendcompat.XmlNode node : section.SelectNodes("Item")) { switch (node.SelectSingleNode("rasd:ResourceType", _xmlNS).innerText) { case OvfHardware.CPU : readCpuItem(node); break; case OvfHardware.Memory : readMemoryItem(node); break; case OvfHardware.DiskImage : readDiskImageItem(node); break; case OvfHardware.Network : readNetworkItem(node); break; case OvfHardware.USB : readUsbItem(node); break; case OvfHardware.Monitor : readMonitorItem(node); break; case OvfHardware.CD : readCdItem(node); break; case OvfHardware.OTHER : readOtherHardwareItem(node); break; } } }



public static void GetLocalFSPath(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.lang.String) (source)) : ""; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.RhevhLocalFSPath, org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion), aQuery); }
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> pair = pairOf(createDbVm(), createVmInternalData()); pair.getSecond().getVmDynamic().setStatus(VMStatus.Up); pair.getSecond().getVmDynamic().setRunOnVds(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs.DST_HOST_ID); return pair; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate getTemplateWithLatestVersionInChain(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeRead("GetTemplateWithLatestVersionInChain", org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("template_id", id)); }



public void AddMessage(java.lang.String message) { if (org.apache.commons.lang.StringUtils.isEmpty(message)) { return; } java.lang.String[] msgs = message.split("[\\n]", (-1)); if ((msgs.length) > 1) { for (java.lang.String msg : msgs) { AddMessage(msg); } return; } if (org.apache.commons.lang.StringUtils.isNotEmpty(message)) { if ((message.charAt(0)) == '<') { try { parseMessage(message); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.InstallerMessages.log.errorFormat("Installation of Host. Received illegal XML from Host. Message: {1}, Exception: {2}", message, e.toString()); } } else { org.ovirt.engine.core.bll.InstallerMessages.log.info(("VDS message: " + message)); } } }
private void UpdateVmNetworks() { org.ovirt.engine.core.common.businessentities.VmStatic dbVm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStaticDAO().get(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getId()); if (!(dbVm.getvds_group_id().equals(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getvds_group_id()))) { java.util.List<org.ovirt.engine.core.common.businessentities.network> networks = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDAO().getAllForCluster(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getvds_group_id()); java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> interfaces = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDAO().getAllForVm(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getId()); for (final org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : interfaces) { org.ovirt.engine.core.common.businessentities.network net = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(networks, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.network>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.network n) { return iface.getNetworkName().equals(n.getname()); } }); if (net == null) { iface.setNetworkName(null); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDAO().update(iface); } } } }
@org.junit.Test public void vnicProfileNameTakenByDifferentVnicProfile() throws java.lang.Exception { vnicProfileAvailableTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_VNIC_PROFILE_NAME_IN_USE), getSingletonNamedVnicProfileList(DEFAULT_VNIC_PROFILE_NAME, OTHER_GUID)); }


private void prepareVmToPassCanDoAction() { vmStatic.setName("vm1"); vmStatic.setMemSizeMb(256); vmStatic.setSingleQxlPci(false); mockVmDaoGetVm(); mockSameNameQuery(false); mockValidateCustomProperties(); mockValidatePciAndIdeLimit(); }
private org.ovirt.engine.core.common.businessentities.network.IpConfiguration createIpConfiguration() { org.ovirt.engine.core.common.businessentities.network.IPv4Address address = new org.ovirt.engine.core.common.businessentities.network.IPv4Address(); address.setAddress(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.IP_ADDRESS); address.setNetmask(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.NETMASK); address.setGateway(org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersisterTest.GATEWAY); address.setBootProtocol(NetworkBootProtocol.STATIC_IP); org.ovirt.engine.core.common.businessentities.network.IpConfiguration result = new org.ovirt.engine.core.common.businessentities.network.IpConfiguration(); result.setIPv4Addresses(java.util.Collections.singletonList(address)); return result; }

@java.lang.Override protected void onLoadingStateChanged(com.google.gwt.user.cellview.client.LoadingStateChangeEvent.LoadingState state) { super.onLoadingStateChanged(state); enforceScrollPosition(); if (state == (com.google.gwt.user.cellview.client.LoadingStateChangeEvent.LoadingState.LOADING)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { doAutoSelect = true; } }); } }
public static org.ovirt.engine.core.bll.ValidationResult canRunActionOnNonManagedVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.action.VdcActionType actionType) { org.ovirt.engine.core.bll.ValidationResult validationResult = ValidationResult.VALID; if (((vm.isHostedEngine()) && (!(org.ovirt.engine.core.bll.VmHandler.COMMANDS_ALLOWED_ON_HOSTED_ENGINE.contains(actionType)))) || ((vm.isExternalVm()) && (!(org.ovirt.engine.core.bll.VmHandler.COMMANDS_ALLOWED_ON_EXTERNAL_VMS.contains(actionType))))) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_CANNOT_RUN_ACTION_ON_NON_MANAGED_VM); } return validationResult; }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> thisLocks = java.util.Collections.singletonMap(getSourceVmFromDb().getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED)); java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> parentLocks = super.getExclusiveLocks(); if (parentLocks == null) { return thisLocks; } java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> union = new java.util.HashMap<>(); union.putAll(parentLocks); union.putAll(thisLocks); return union; }

private java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> prepareSnapshotConfigWithoutImage(org.ovirt.engine.core.compat.Guid imageGroupToRemove) { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> result = new java.util.LinkedList<org.ovirt.engine.core.common.businessentities.Snapshot>(); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> snapshotDisks = org.ovirt.engine.core.bll.RemoveImageCommand.getDiskImageDao().getAllSnapshotsForImageGroup(imageGroupToRemove); for (org.ovirt.engine.core.common.businessentities.DiskImage snapshotDisk : snapshotDisks) { org.ovirt.engine.core.compat.NGuid vmSnapshotId = snapshotDisk.getvm_snapshot_id(); if ((vmSnapshotId != null) && (!(Guid.Empty.equals(vmSnapshotId.getValue())))) { org.ovirt.engine.core.common.businessentities.Snapshot updated = prepareSnapshotConfigWithoutImageSingleImage(vmSnapshotId.getValue(), snapshotDisk.getImageId()); if (updated != null) { result.add(updated); } } } return result; }


private org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickStatus getBrickStatus() { return (getGlusterVolume().getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeStatus.UP) ? org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickStatus.UP : org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickStatus.DOWN; }

private void calculateNetworkImplementationDetailsAndAssertSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, boolean expectSync, java.lang.String networkName, boolean vmNet, int mtu, int vlanId, org.ovirt.engine.core.common.businessentities.network.NetworkQoS qos) { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork(networkName, vmNet, mtu, vlanId); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = org.ovirt.engine.core.utils.NetworkUtils.calculateNetworkImplementationDetails(network, qos, iface); assertNotNull("Network implementation details should be filled.", networkImplementationDetails); assertEquals((("Network implementation details should be " + (expectSync ? "in" : "out of")) + " sync."), expectSync, networkImplementationDetails.isInSync()); }


public org.ovirt.engine.core.compat.Guid getStoragePoolId() { if ((_storagePoolId) == null) { if ((_storagePool) != null) { _storagePoolId = _storagePool.getId(); } else if ((getStorageDomain()) != null) { _storagePoolId = getStorageDomain().getStoragePoolId(); } } return _storagePoolId; }

public org.ovirt.engine.core.bll.ValidationResult ipConfiguredForStaticBootProtocol() { org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = attachment.getIpConfiguration(); boolean failWhen = ((ipConfiguration != null) && ((ipConfiguration.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP))) && (unsetAddress(ipConfiguration)); return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.NETWORK_ADDR_MANDATORY_IN_STATIC_IP).when(failWhen); }
@java.lang.Override public void onSuccess(final java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase>> operationList, final java.util.List<org.ovirt.engine.core.common.action.VdcReturnValueBase> resultObject) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Frontend: successfully executed runMultipleAction, determining result!"); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> failed = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.action.VdcReturnValueBase v : resultObject) { if (!(v.getCanDoAction())) { failed.add(v); } } if (showErrorDialog && (!(failed.isEmpty()))) { translateErrors(failed); getEventsHandler().runMultipleActionFailed(actionType, failed); } if (callback != null) { callback.executed(new org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult(actionType, parameters, resultObject, state)); } fireAsyncActionSucceededEvent(state); }

@java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call() { setStorageDomain(null); setStoragePool(null); if (canDoAction()) { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainPoolMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(getRecoveryStoragePoolParametersData().getNewMasterDomainId(), getRecoveryStoragePoolParametersData().getStoragePoolId(), org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().save(domainPoolMap); getStoragePool().setstatus(StoragePoolStatus.Problematic); executeReconstruct(); } return new org.ovirt.engine.core.common.eventqueue.EventResult(reconstructOpSucceeded, org.ovirt.engine.core.common.eventqueue.EventType.RECONSTRUCT); }
public void setiqn(java.lang.String value) { this.iqn = value; }

@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Bond (id=${id}}) does not reference nic coherently. Nic name and id references different nic: nicId=${nicId} nicName=${nicName}}.") java.lang.String BOND_REFERENCES_NICS_INCOHERENTLY();
public void newEntity() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel model = new org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newDataCenterTitle()); model.setHashName("new_data_center"); model.setIsNew(true); model.getStorageTypeList().setSelectedItem(StorageType.NFS); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSave", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.ad_groups> setUpGroups() { java.util.List<org.ovirt.engine.core.common.businessentities.ad_groups> groups = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.ad_groups>(); for (int i = 0; i < (NAMES.length); i++) { groups.add(getEntity(i)); } return groups; }
public void logServerMessage(final org.ovirt.engine.core.common.businessentities.VDS server, final org.ovirt.engine.core.common.AuditLogType logType) { logAuditMessage(null, null, server, logType, null); }

@org.junit.After public void tearDown() { java.util.Locale.setDefault(locale); control.verify(); org.ovirt.engine.api.restapi.invocation.CurrentManager.remove(); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Network engine is mandatory, it cannot be modified.") java.lang.String NETWORK_DEFAULT_UPDATE_NAME_INVALID();
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void> vmListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>) (result.getState())); vmListModel.stopProgress(); vmListModel.setConfirmWindow(null); vmListModel.setWindow(null); vmListModel.clearCachedAssignedVmNames(); java.util.List<org.ovirt.engine.core.common.action.VdcReturnValueBase> retVals = result.getReturnValue(); if ((retVals != null) && ((vmListModel.getSelectedItems().size()) == (retVals.size()))) { java.lang.StringBuilder importedVms = new java.lang.StringBuilder(); int counter = 0; boolean toShowConfirmWindow = false; for (java.lang.Object item : vmListModel.getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (item)); if (((retVals.get(counter)) != null) && (retVals.get(counter).getCanDoAction())) { importedVms.append(vm.getName()).append(", "); toShowConfirmWindow = true; } counter++; } if (toShowConfirmWindow) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); vmListModel.setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().importVirtualMachinesTitle()); confirmModel.setHelpTag(HelpTag.import_virtual_machine); confirmModel.setHashName("import_virtual_machine"); confirmModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().importProcessHasBegunForVms(org.ovirt.engine.core.compat.StringHelper.trimEnd(importedVms.toString().trim(), ','))); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirm", vmListModel); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()); tempVar2.setIsDefault(true); tempVar2.setIsCancel(true); confirmModel.getCommands().add(tempVar2); } } }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__HOT_SET_CPUS); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM); }

private void addVmsStatus(java.util.List<org.ovirt.engine.core.compat.Guid> vmAndTemplatesIds, java.util.Map<java.lang.String, java.lang.Object> data) { java.util.Map<java.lang.String, java.lang.Object> vmsStatus = new java.util.HashMap<>(); for (org.ovirt.engine.core.compat.Guid vmId : vmAndTemplatesIds) { org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = vmDynamicDao.get(vmId); if ((vmDynamic.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { vmsStatus.put(vmId.toString(), vmDynamic.getStatus().getValue()); log.debug("OVF_STORE - Add vm id '{}' with status: '{}'", vmId, vmDynamic.getStatus()); } else { log.debug("OVF_STORE - Skip vm id '{}' with status: '{}'", vmId, vmDynamic.getStatus()); } } data.put(OvfInfoFileConstants.VmStatus, vmsStatus); }
public boolean equals(java.lang.Object other, boolean deepCompare) { if (other == (this)) { return true; } if ((other == null) || ((other.getClass()) != (getClass()))) { return false; } org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel otherModel = ((org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel) (other)); boolean result = true; if ((!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getType(), otherModel.getType()))) || (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getEntity(), otherModel.getEntity())))) { result = false; } if ((result && ((!(getChildren().isEmpty())) || (!(otherModel.getChildren().isEmpty())))) && deepCompare) { if ((getChildren().size()) != (otherModel.getChildren().size())) { result = false; } else { for (int i = 0; i < (getChildren().size()); i++) { if (!(getChildren().get(i).equals(otherModel.getChildren().get(i), deepCompare))) { result = false; break; } } } } return result; }
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.RemoveVmPoolCommand.getVmPool()) == null) { return failCanDoAction(EngineMessage.VM_POOL_NOT_FOUND); } return true; }
public void setKvmVersion(java.lang.String value) { this.mVdsDynamic.setKvmVersion(value); }
private boolean validateManagementNetworkAttachement() { final org.ovirt.engine.core.common.businessentities.network.Network managementNetwork; final org.ovirt.engine.core.compat.Guid managementNetworkId = org.ovirt.engine.core.bll.UpdateClusterCommand.getParameters().getManagementNetworkId(); if (managementNetworkId == null) { managementNetwork = getDefaultManagementNetworkFinder().findDefaultManagementNetwork(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getStoragePoolId()); if (managementNetwork == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } } else { managementNetwork = networkDao.get(managementNetworkId); if (managementNetwork == null) { addValidationMessage(EngineMessage.NETWORK_NOT_EXISTS); return false; } } managementNetworkCluster = createManagementNetworkCluster(managementNetwork); final org.ovirt.engine.core.bll.network.cluster.UpdateClusterNetworkClusterValidator networkClusterValidator = createManagementNetworkClusterValidator(); return validate(networkClusterValidator.managementNetworkChange()); }
public static org.ovirt.engine.core.common.businessentities.network FindNetworkByName(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network> items, java.lang.String name) { for (org.ovirt.engine.core.common.businessentities.network n : items) { if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(n.getname(), name)) { return n; } } return null; }



@java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase) (target)); java.util.HashMap<java.lang.String, java.lang.String> timeZones = ((java.util.HashMap<java.lang.String, java.lang.String>) (returnValue)); cachedTimeZones.put(timezoneType, timeZones.entrySet()); behavior.PostUpdateTimeZone(selectedTimeZone); }
@java.lang.Override protected void postSaveAction(org.ovirt.engine.core.compat.Guid networkGuid, boolean succeeded) { super.postSaveAction(networkGuid, succeeded); if (!succeeded) { return; } org.ovirt.engine.core.compat.Guid networkId = ((getNetwork().getId()) == null) ? networkGuid : getNetwork().getId(); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> actionParameters1 = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.core.common.businessentities.VDSGroup attachNetworkToCluster : getClustersToAttach()) { org.ovirt.engine.core.common.businessentities.network.Network tempVar = new org.ovirt.engine.core.common.businessentities.network.Network(); tempVar.setId(networkId); tempVar.setName(getNetwork().getName()); tempVar.setCluster(new org.ovirt.engine.core.common.businessentities.network.NetworkCluster()); actionParameters1.add(new org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter(attachNetworkToCluster, tempVar)); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1); }
private void setOvfVolumeDescription(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid diskId, org.ovirt.engine.core.compat.Guid volumeId, java.lang.String description) { org.ovirt.engine.core.common.vdscommands.SetVolumeDescriptionVDSCommandParameters vdsCommandParameters = new org.ovirt.engine.core.common.vdscommands.SetVolumeDescriptionVDSCommandParameters(storagePoolId, storageDomainId, diskId, volumeId, description); try { runVdsCommand(VDSCommandType.SetVolumeDescription, vdsCommandParameters); } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLogableBase.addCustomValue("DataCenterName", org.ovirt.engine.core.bll.ProcessOvfUpdateForStorageDomainCommand.getStoragePool().getName()); auditLogableBase.addCustomValue("StorageDomainName", storageDomain.getName()); auditLogableBase.addCustomValue("DiskId", diskId.toString()); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(auditLogableBase, AuditLogType.UPDATE_DESCRIPTION_FOR_OVF_STORE_FAILED); throw e; } }
public void setIScsiInitiatorName(java.lang.String value) { this.mVdsDynamic.setIScsiInitiatorName(value); }

private void restoreConfiguration(org.ovirt.engine.core.common.businessentities.Snapshot targetSnapshot) { org.ovirt.engine.core.bll.snapshots.SnapshotsManager snapshotsManager = new org.ovirt.engine.core.bll.snapshots.SnapshotsManager(); removedSnapshotId = getSnapshotDao().getId(org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVmId(), SnapshotType.ACTIVE); snapshotsToRemove.add(removedSnapshotId); snapshotsManager.removeAllIllegalDisks(removedSnapshotId, org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVmId()); snapshotsManager.attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVm(), targetSnapshot, targetSnapshot.getId(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getCompensationContext(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVm().getVdsGroupCompatibilityVersion(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getCurrentUser()); getSnapshotDao().remove(targetSnapshot.getId()); snapshotsManager.addActiveSnapshot(targetSnapshot.getId(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getVm(), SnapshotStatus.LOCKED, targetSnapshot.getMemoryVolume(), org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getCompensationContext()); }
public java.lang.String getFingerprint(java.lang.String hostName) { org.ovirt.engine.core.utils.ssh.EngineSSHClient client = null; try { client = connect(hostName); return client.getHostFingerprint(); } catch (java.io.IOException e) { log.error("Could not get server key"); return null; } finally { if (client != null) { client.disconnect(); } } }
@org.junit.Test public void nonZeroMtuWhenNotSupported() throws java.lang.Exception { mtuValidTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.NETWORK_MTU_OVERRIDE_NOT_SUPPORTED), 1, false); }
protected boolean checkIfDisksExist(java.lang.Iterable<org.ovirt.engine.core.common.businessentities.DiskImage> disksList) { for (org.ovirt.engine.core.common.businessentities.DiskImage disk : disksList) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue runVdsCommand = org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getBackend().getResourceManager().RunVdsCommand(VDSCommandType.GetImageDomainsList, new org.ovirt.engine.core.common.vdscommands.GetImageDomainsListVDSCommandParameters(org.ovirt.engine.core.bll.MoveOrCopyTemplateCommand.getStoragePool().getId().getValue(), disk.getId())); if (runVdsCommand.getSucceeded()) { java.util.ArrayList<org.ovirt.engine.core.compat.Guid> domains = ((java.util.ArrayList<org.ovirt.engine.core.compat.Guid>) (runVdsCommand.getReturnValue())); if (domains.contains(imageToDestinationDomainMap.get(disk.getId()))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_CONTAINS_DISK); return false; } } else if ((runVdsCommand.getVdsError().getCode()) == (org.ovirt.engine.core.common.errors.VdcBllErrors.GetStorageDomainListError)) { addCanDoActionMessage(VdcBllMessages.ERROR_GET_STORAGE_DOMAIN_LIST); return false; } } return true; }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to get or set System Configuration") java.lang.String allowToGetOrSetSystemConfigurationRoleTreeTooltip();
protected boolean isUserAuthorizedToRunAction() { if (org.ovirt.engine.core.bll.CommandBase.isInternalExecution()) { if (log.isDebugEnabled()) { log.debug("Permission check skipped for internal action {}.", getActionType()); } return true; } if (!(org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isMultilevelAdministrationOn())) { if (log.isDebugEnabled()) { log.debug("Permission check for action '{}' skipped because multilevel administration is disabled.", getActionType()); } return true; } if ((org.ovirt.engine.core.bll.CommandBase.getCurrentUser()) == null) { addCanDoActionMessage(EngineMessage.USER_IS_NOT_LOGGED_IN); return false; } final java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> permSubjects = getPermissionCheckSubjects(); if ((permSubjects == null) || (permSubjects.isEmpty())) { if (log.isDebugEnabled()) { log.debug("The set of objects to check is null or empty for action '{}'.", getActionType()); } addCanDoActionMessage(EngineMessage.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION); return false; } if (isQuotaDependant()) { addQuotaPermissionSubject(permSubjects); } if (log.isDebugEnabled()) { java.lang.StringBuilder builder = getPermissionSubjectsAsStringBuilder(permSubjects); log.debug("Checking whether user '{}' or one of the groups he is member of, have the following permissions: {}", org.ovirt.engine.core.bll.CommandBase.getCurrentUser().getId(), builder.toString()); } return checkPermissions(permSubjects); }
private void initAppsTable() { appsTable = new org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel>(false, true); org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip<java.lang.String> appNameColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip<java.lang.String>() { @java.lang.Override public java.lang.String getValue(java.lang.String appName) { return appName; } }; appsTable.addColumn(appNameColumn, constants.nameSnapshot()); appsTable.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); appsTable.setWidth("100%", true); appsTable.setSelectionModel(new com.google.gwt.view.client.NoSelectionModel()); }
public static void GetVmsRunningOnOrMigratingToVds(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid id) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>(); } return source; } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVmsRunningOnOrMigratingToVds, new org.ovirt.engine.core.common.queries.GetVmsRunningOnOrMigratingToVdsParameters(id), aQuery); }
public boolean discover() { boolean dbUpdated = false; java.util.Optional<org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryResult> discoveryResult = broker.runDiscover(); if (discoveryResult.isPresent()) { updateDB(discoveryResult.get()); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.debug("PolicyUnits updated for external broker."); dbUpdated = true; } else { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = org.ovirt.engine.core.di.Injector.injectMembers(new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase()); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Discovery returned empty result when talking to broker. Disabling external units"); java.util.List<org.ovirt.engine.core.common.scheduling.PolicyUnit> failingPolicyUnits = policyUnitDao.getAll().stream().collect(java.util.stream.Collectors.toList()); markExternalPoliciesAsDisabled(failingPolicyUnits); dbUpdated = true; } return dbUpdated; }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> filterVmsInClusterNeedUpdate() { return vmStaticDao.getAllByCluster(org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getId()).stream().filter(( vm) -> ((vm.getOrigin()) != OriginType.EXTERNAL) && (!(vm.isHostedEngine()))).filter(( vm) -> (vm.getCustomCompatibilityVersion()) == null).sorted().collect(java.util.stream.Collectors.toList()); }
public static org.ovirt.engine.core.bll.ValidationResult checkNumaPreferredTuneMode(org.ovirt.engine.core.common.businessentities.NumaTuneMode numaTuneMode, java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes, org.ovirt.engine.core.compat.Guid vmId) { if (numaTuneMode != (org.ovirt.engine.core.common.businessentities.NumaTuneMode.PREFERRED)) { return ValidationResult.VALID; } if ((vmNumaNodes == null) && (vmId != null)) { vmNumaNodes = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNumaNodeDao().getAllVmNumaNodeByVmId(vmId); } if ((vmNumaNodes != null) && ((vmNumaNodes.size()) == 1)) { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>> vdsNumaNodeList = vmNumaNodes.get(0).getVdsNumaNodeList(); boolean pinnedToSingleNode = (((vdsNumaNodeList != null) && ((vdsNumaNodeList.size()) == 1)) && ((vdsNumaNodeList.get(0).getSecond()) != null)) && (vdsNumaNodeList.get(0).getSecond().getFirst()); if (pinnedToSingleNode) { return ValidationResult.VALID; } } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.VM_NUMA_NODE_PREFERRED_NOT_PINNED_TO_SINGLE_NODE); }
private boolean checkQuotaStorageLimits(org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum quotaEnforcementTypeEnum, org.ovirt.engine.core.common.businessentities.Quota quota, double limit, double storageUsagePercentage, java.util.ArrayList<java.lang.String> canDoActionMessages, org.ovirt.engine.core.utils.Pair<org.ovirt.engine.core.common.AuditLogType, org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase> log) { if ((limit == (org.ovirt.engine.core.bll.quota.QuotaManager.UNLIMITED)) || (storageUsagePercentage <= (quota.getThresholdStoragePercentage()))) { return true; } else if (storageUsagePercentage <= 100) { log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_THRESHOLD); log.setSecond(getLoggableQuotaStorageParams(quota.getQuotaName(), storageUsagePercentage)); } else if (storageUsagePercentage <= (quota.getGraceStoragePercentage())) { log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_LIMIT); log.setSecond(getLoggableQuotaStorageParams(quota.getQuotaName(), storageUsagePercentage)); } else { log.setFirst(AuditLogType.USER_EXCEEDED_QUOTA_STORAGE_GRACE_LIMIT); log.setSecond(getLoggableQuotaStorageParams(quota.getQuotaName(), storageUsagePercentage)); if (QuotaEnforcementTypeEnum.HARD_ENFORCEMENT.equals(quotaEnforcementTypeEnum)) { canDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_STORAGE_LIMIT_EXCEEDED.toString()); return false; } } return true; }

public static java.util.Collection<java.lang.String> replaceWith(java.lang.String propertyName, java.util.Collection<?> items, java.lang.String separator, int maxNumberOfPrintedItems) { org.apache.commons.lang.Validate.isTrue((maxNumberOfPrintedItems >= 1)); org.apache.commons.lang.Validate.isTrue(org.apache.commons.lang.StringUtils.isNotEmpty(separator)); int maxNumOfItems = java.lang.Math.min(maxNumberOfPrintedItems, items.size()); java.util.List<java.lang.String> printedItems = new java.util.ArrayList<>(maxNumOfItems); for (java.lang.Object item : items) { if ((--maxNumOfItems) < 0) { break; } printedItems.add(java.lang.String.format("\t%s", java.lang.String.valueOf(item))); } if ((items.size()) > maxNumberOfPrintedItems) { printedItems.add("\t..."); } java.util.ArrayList<java.lang.String> replacements = new java.util.ArrayList<>(); replacements.add(org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(propertyName, org.apache.commons.lang.StringUtils.join(printedItems, separator))); replacements.add(org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString((propertyName + (org.ovirt.engine.core.utils.ReplacementUtils.COUNTER_SUFFIX)), items.size())); return replacements; }

@java.lang.Override public int setTabIndexes(int nextTabIndex) { sizeEditor.setTabIndex((nextTabIndex++)); sizeExtendEditor.setTabIndex((nextTabIndex++)); aliasEditor.setTabIndex((nextTabIndex++)); descriptionEditor.setTabIndex((nextTabIndex++)); interfaceEditor.setTabIndex((nextTabIndex++)); datacenterEditor.setTabIndex((nextTabIndex++)); storageDomainEditor.setTabIndex((nextTabIndex++)); volumeTypeEditor.setTabIndex((nextTabIndex++)); diskProfileEditor.setTabIndex((nextTabIndex++)); quotaEditor.setTabIndex((nextTabIndex++)); hostListEditor.setTabIndex((nextTabIndex++)); storageTypeEditor.setTabIndex((nextTabIndex++)); plugDiskToVmEditor.setTabIndex((nextTabIndex++)); wipeAfterDeleteEditor.setTabIndex((nextTabIndex++)); isBootableEditor.setTabIndex((nextTabIndex++)); isShareableEditor.setTabIndex((nextTabIndex++)); isReadOnlyEditor.setTabIndex((nextTabIndex++)); isScsiPassthroughEditor.setTabIndex((nextTabIndex++)); isSgIoUnfilteredEditor.setTabIndex((nextTabIndex++)); return nextTabIndex; }
protected void addStyles() { vlanTag.addContentWidgetStyleName(style.vlanEditor()); mtuEditor.addContentWidgetStyleName(style.mtuEditor()); isVmNetworkEditor.addContentWidgetStyleName(style.checkBox()); isVmNetworkEditor.asCheckBox().addStyleName(style.checkBox()); vlanTagging.addContentWidgetStyleName(style.checkBox()); vlanTagging.asCheckBox().addStyleName(style.checkBox()); hasMtuEditor.addContentWidgetStyleName(style.checkBox()); hasMtuEditor.asCheckBox().addStyleName(style.checkBox()); }
private void findNegotiatingProfiles() { if ((profiles) == null) { synchronized(this) { if ((profiles) == null) { profiles = new java.util.ArrayList<org.ovirt.engine.core.aaa.AuthenticationProfile>(1); for (org.ovirt.engine.core.aaa.AuthenticationProfile profile : org.ovirt.engine.core.aaa.AuthenticationProfileRepository.getInstance().getProfiles()) { if (profile != null) { org.ovirt.engine.core.aaa.Authenticator authenticator = profile.getAuthenticator(); if (authenticator.isNegotiationAuth()) { profiles.add(0, profile); } } } } } } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to Add/Remove Users from the System") java.lang.String allowToAddRemoveUsersFromTheSystemRoleTreeTooltip();



@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.Erratum erratum) { if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.BUGFIX)) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.ErrataTableView.resources.bug(); } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.ENHANCEMENT)) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.ErrataTableView.resources.enhancement(); } else if ((erratum.getType()) == (org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.SECURITY)) { return org.ovirt.engine.ui.webadmin.section.main.view.popup.ErrataTableView.resources.security(); } return null; }


@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs pcArgs = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)); if (PropertyChangedEventArgs.Args.PROGRESS.toString().equals(pcArgs.propertyName)) { if ((modelProvider.getModel().getProgress()) != null) { if ((getTable()) != null) { getTable().setLoadingState(LoadingState.LOADING); } } } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { rngPanel.setVisible(object.getIsRngEnabled().getEntity()); }
@java.lang.Override public boolean equals(final java.lang.Object other) { if ((this) == other) { return true; } if (other == null) { return false; } if ((getClass()) != (other.getClass())) { return false; } boolean result = false; @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.ui.frontend.communication.VdcOperation<T, P> otherOperation = ((org.ovirt.engine.ui.frontend.communication.VdcOperation<T, P>) (other)); result = (operationType.equals(otherOperation.getOperation())) && (parameter.equals(otherOperation.getParameter())); return result; }
@java.lang.Override protected void executeCommand() { final org.ovirt.engine.core.bll.network.cluster.helper.DisplayNetworkClusterHelper displayNetworkClusterHelper = new org.ovirt.engine.core.bll.network.cluster.helper.DisplayNetworkClusterHelper(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getNetworkClusterDAO(), org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getVmDAO(), getNetworkCluster(), getNetworkName(), this); if (displayNetworkClusterHelper.isDisplayToBeUpdated()) { displayNetworkClusterHelper.warnOnActiveVm(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.updateNetworkAttachment(getVdsGroupId(), getNetworkCluster(), getNetwork()); return null; } }); if (((!(getPersistedNetwork().isExternal())) && (org.ovirt.engine.core.utils.NetworkUtils.isLabeled(getPersistedNetwork()))) && (org.ovirt.engine.core.bll.network.cluster.NetworkHelper.setupNetworkSupported(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getVdsGroup().getcompatibility_version()))) { addNetworkToHosts(); } org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.setSucceeded(true); }
public static boolean isGraphicsAndDisplaySupported(int osId, java.util.Collection<org.ovirt.engine.core.common.businessentities.GraphicsType> graphics, org.ovirt.engine.core.common.businessentities.DisplayType displayType, java.util.List<java.lang.String> reasons, org.ovirt.engine.core.compat.Version clusterVersion) { boolean result = org.ovirt.engine.core.bll.validator.VmValidationUtils.isGraphicsAndDisplaySupported(osId, clusterVersion, graphics, displayType); if (!result) { reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_VM_DISPLAY_TYPE_IS_NOT_SUPPORTED_BY_OS.name()); } return result; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (!(args instanceof org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs)) { return; } java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName; if ("IsCustomPropertiesTabAvailable".equals(propName)) { setupCustomPropertiesAvailability(object); } else if ("IsDisksAvailable".equals(propName)) { addDiskAllocation(object); } }



@java.lang.Override protected void executeCommand() { boolean addedGroupThatAllowsViewingChildren = false; java.util.List<org.ovirt.engine.core.common.businessentities.ActionGroup> groups = org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getParameters().getActionGroups(); for (org.ovirt.engine.core.common.businessentities.ActionGroup group : groups) { addedGroupThatAllowsViewingChildren |= group.allowsViewingChildren(); org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRoleGroupMapDAO().save(new org.ovirt.engine.core.common.businessentities.RoleGroupMap(group, org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getParameters().getRoleId())); AppendCustomValue("ActionGroup", group.toString(), ", "); } if (addedGroupThatAllowsViewingChildren) { org.ovirt.engine.core.common.businessentities.roles role = org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRole(); if (!(role.allowsViewingChildren())) { role.setAllowsViewingChildren(true); org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.getRoleDao().update(role); } } org.ovirt.engine.core.bll.AttachActionGroupsToRoleCommand.setSucceeded(true); }
@java.lang.Override public void onMouseOver(com.google.gwt.event.dom.client.MouseOverEvent event) { setWidget(infoImageHover); infoPanel.showRelativeTo(this); }
@java.lang.Override protected void onBind() { super.onBind(); org.ovirt.engine.ui.common.widget.table.OrderedMultiSelectionModel<?> tableSelectionModel = ((getTable()) != null) ? getTable().getSelectionModel() : null; if (tableSelectionModel != null) { registerHandler(tableSelectionModel.addSelectionChangeHandler(new com.google.gwt.view.client.SelectionChangeEvent.Handler() { @java.lang.Override public void onSelectionChange(com.google.gwt.view.client.SelectionChangeEvent event) { updateDetailModelSelection(); } })); } initializeHandlers(); }



@java.lang.Override protected boolean canDoAction() { if (((org.ovirt.engine.core.bll.ConvertVmCommand.getVds()) != null) && ((org.ovirt.engine.core.bll.ConvertVmCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL); } if (((org.ovirt.engine.core.bll.ConvertVmCommand.getVds()) == null) && (!(selectProxyHost()))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NO_VDS_IN_POOL); } return true; }

public org.ovirt.engine.core.common.errors.VdcBllErrors getError() { return _Error; }
@java.lang.Override protected void readSnapshotsSection(XmlNode section) { org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = section.SelectNodes("Snapshot"); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot> snapshots = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot>(); _vm.setSnapshots(snapshots); for (XmlNode node : list) { XmlNode vmConfiguration = node.SelectSingleNode("VmConfiguration", _xmlNS); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = new org.ovirt.engine.core.common.businessentities.Snapshot((vmConfiguration != null)); snapshot.setId(new org.ovirt.engine.core.compat.Guid(node.attributes.get("ovf:id").getValue())); snapshot.setVmId(_vm.getId()); snapshot.setType(org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotType.valueOf(node.SelectSingleNode("Type", _xmlNS).innerText)); snapshot.setStatus(SnapshotStatus.OK); snapshot.setDescription(node.SelectSingleNode("Description", _xmlNS).innerText); XmlNode memory = node.SelectSingleNode("Memory", _xmlNS); if (memory != null) { snapshot.setMemoryVolume(memory.innerText); } final java.util.Date creationDate = org.ovirt.engine.core.utils.ovf.OvfParser.utcDateStringToLocaDate(node.SelectSingleNode("CreationDate", _xmlNS).innerText); if (creationDate != null) { snapshot.setCreationDate(creationDate); } snapshot.setVmConfiguration((vmConfiguration == null ? null : new java.lang.String(org.apache.commons.codec.binary.Base64.decodeBase64(vmConfiguration.innerText)))); XmlNode appList = node.SelectSingleNode("ApplicationList", _xmlNS); if (appList != null) { snapshot.setAppList(appList.innerText); } snapshots.add(snapshot); } }
private org.ovirt.engine.core.common.action.LiveMigrateDiskParameters createLiveMigrateDiskParameters(org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters, org.ovirt.engine.core.compat.Guid vmId) { return new org.ovirt.engine.core.common.action.LiveMigrateDiskParameters(moveDiskParameters.getImageId(), moveDiskParameters.getSourceDomainId(), moveDiskParameters.getStorageDomainId(), vmId, moveDiskParameters.getQuotaId(), moveDiskParameters.getDiskProfileId(), diskMap.get(moveDiskParameters.getImageId()).getId()); }
@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult isLastProfileInParentEntity() { if ((getProfileDao().getAllForCluster(getProfile().getClusterId()).size()) == 1) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_CANNOT_REMOVE_LAST_CPU_PROFILE_IN_CLUSTER); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }

private static org.ovirt.engine.core.common.businessentities.DiskImage isImageExist(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.common.businessentities.DiskImage image) { org.ovirt.engine.core.common.businessentities.DiskImage fromIrs = null; try { org.ovirt.engine.core.compat.Guid storageDomainId = image.getStorageIds().get(0); org.ovirt.engine.core.compat.Guid imageGroupId = ((image.getId()) != null) ? image.getId() : org.ovirt.engine.core.compat.Guid.Empty; fromIrs = ((org.ovirt.engine.core.common.businessentities.DiskImage) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.GetImageInfo, new org.ovirt.engine.core.common.vdscommands.GetImageInfoVDSCommandParameters(storagePoolId, storageDomainId, imageGroupId, image.getImageId())).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.ImagesHandler.log.debug("Unable to get image info from from storage", e); } return fromIrs; }



private static org.ovirt.engine.api.model.IpAddressAssignment mapIpAddressAssignment(org.ovirt.engine.core.common.businessentities.network.IPv4Address iPv4Address) { org.ovirt.engine.api.model.IpAddressAssignment ipAddressAssignment = new org.ovirt.engine.api.model.IpAddressAssignment(); org.ovirt.engine.api.model.Ip ip = new org.ovirt.engine.api.model.Ip(); if ((iPv4Address.getAddress()) != null) { ip.setAddress(iPv4Address.getAddress()); } if ((iPv4Address.getGateway()) != null) { ip.setGateway(iPv4Address.getGateway()); } if ((iPv4Address.getNetmask()) != null) { ip.setNetmask(iPv4Address.getNetmask()); } ipAddressAssignment.setIp(ip); org.ovirt.engine.api.model.BootProtocol assignmentMethod = org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(iPv4Address.getBootProtocol(), null); ipAddressAssignment.setAssignmentMethod((assignmentMethod == null ? null : assignmentMethod.value())); return ipAddressAssignment; }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("CPU Architecture") java.lang.String clusterPopupArchitectureLabel();
private void add() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel model = createAdElementListModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().addPermissionToUserTitle()); model.setHashName("add_permission_to_user"); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnAdd", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }


private void createDiskBasedOnLun() { final org.ovirt.engine.core.common.businessentities.storage.LUNs lun = ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo())).getLun(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.proceedLUNInDb(lun, lun.getLunType()); getBaseDiskDao().save(getParameters().getDiskInfo()); getDiskLunMapDao().save(new org.ovirt.engine.core.common.businessentities.storage.DiskLunMap(getParameters().getDiskInfo().getId(), lun.getLUN_id())); if ((getVm()) != null) { addManagedDeviceForDisk(getParameters().getDiskInfo().getId(), ((org.ovirt.engine.core.common.businessentities.storage.LunDisk) (getParameters().getDiskInfo())).isUsingScsiReservation()); } return null; } }); org.ovirt.engine.core.bll.AddDiskCommand.getReturnValue().setActionReturnValue(org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo().getId()); plugDiskToVmIfNeeded(); org.ovirt.engine.core.bll.AddDiskCommand.setSucceeded(true); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Directory Groups") java.lang.String directoryGroupsTitle();
private void onSaveConfirmCpuThreads() { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel) (getWindow())); cancelConfirmation(); if (((!(model.getVersionSupportsCpuThreads().getEntity())) && (model.getCountThreadsAsCores().getEntity())) && (((org.ovirt.engine.core.common.businessentities.VDSGroup) (getSelectedItem())).getCountThreadsAsCores())) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().disableClusterCpuThreadSupportTitle()); confirmModel.setHelpTag(HelpTag.disable_cpu_thread_support); confirmModel.setHashName("disable_cpu_thread_support"); confirmModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().youAreAboutChangeClusterCpuThreadSupportMsg()); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSaveConfirmCpuLevel", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); getConfirmWindow().getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); getConfirmWindow().getCommands().add(tempVar2); } else { onSaveConfirmCpuLevel(); } }

public org.ovirt.engine.core.bll.ValidationResult hostProviderExists() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST).when((((getHost().getHostProviderId()) != null) && ((getProvider()) == null))); }
@java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = coco.getCommandEntity(asyncTask.getCommandId()); if ((asyncTask.getstatus()) == (org.ovirt.engine.core.common.businessentities.AsyncTaskStatusEnum.finished)) { cmdEntity.setCommandStatus(CommandStatus.SUCCEEDED); } coco.persistCommand(map(asyncTask, cmdEntity)); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAsyncTaskDao().saveOrUpdate(asyncTask); return null; }
protected boolean validateTemplateArchitecture() { if ((getVmTemplate().getClusterArch()) == (org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined)) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_CANNOT_IMPORT_TEMPLATE_WITH_NOT_SUPPORTED_ARCHITECTURE); return false; } return true; }
@org.junit.Test public void networkLabeled() throws java.lang.Exception { when(network.getLabel()).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextPropertyString(10)); assertThat(validator.notLabeled(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_ALREADY_LABELED)); }
public static org.ovirt.engine.core.common.businessentities.VmDynamic buildVmDynamicFromEvent(org.ovirt.engine.core.common.businessentities.VmDynamic baseVmDynamic, java.util.Map<java.lang.String, java.lang.Object> xmlRpcStruct) { org.ovirt.engine.core.common.businessentities.VmDynamic clonedVmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(baseVmDynamic); if (xmlRpcStruct.containsKey(VdsProperties.status)) { clonedVmDynamic.setStatus(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.convertToVmStatus(((java.lang.String) (xmlRpcStruct.get(VdsProperties.status))))); } if (xmlRpcStruct.containsKey(VdsProperties.hash)) { clonedVmDynamic.setHash(((java.lang.String) (xmlRpcStruct.get(VdsProperties.hash)))); } if (xmlRpcStruct.containsKey(VdsProperties.exit_code)) { java.lang.String exitCodeStr = xmlRpcStruct.get(VdsProperties.exit_code).toString(); clonedVmDynamic.setExitStatus(org.ovirt.engine.core.common.businessentities.VmExitStatus.forValue(java.lang.Integer.parseInt(exitCodeStr))); } if (xmlRpcStruct.containsKey(VdsProperties.exit_message)) { java.lang.String exitMsg = ((java.lang.String) (xmlRpcStruct.get(VdsProperties.exit_message))); clonedVmDynamic.setExitMessage(exitMsg); } if (xmlRpcStruct.containsKey(VdsProperties.exit_reason)) { java.lang.String exitReasonStr = xmlRpcStruct.get(VdsProperties.exit_reason).toString(); clonedVmDynamic.setExitReason(org.ovirt.engine.core.common.businessentities.VmExitReason.forValue(java.lang.Integer.parseInt(exitReasonStr))); } return clonedVmDynamic; }


public org.ovirt.engine.api.model.HostNIC lookupNic(java.lang.String id) { java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> ifaces = getCollection(); for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : ifaces) { if (iface.getId().toString().equals(id)) { org.ovirt.engine.api.model.HostNIC hostNic = populate(map(iface, ifaces), iface); for (org.ovirt.engine.core.common.businessentities.network nwk : getClusterNetworks()) { if (nwk.getname().equals(iface.getNetworkName())) { hostNic.getNetwork().setId(nwk.getId().toString()); hostNic.getNetwork().setName(null); break; } } return addLinks(hostNic); } } return notFound(); }
private boolean restoreSlaveVolumesToSnapshot(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> geoRepSessions, java.lang.String snapshotName) { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session : geoRepSessions) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity slaveVolume = getDbFacade().getGlusterVolumeDao().getById(session.getSlaveVolumeId()); if (slaveVolume == null) { continue; } org.ovirt.engine.core.common.businessentities.VDS slaveUpServer = org.ovirt.engine.core.bll.utils.ClusterUtils.getInstance().getRandomUpServer(slaveVolume.getClusterId()); if (slaveUpServer == null) { handleVdsError(AuditLogType.GLUSTER_VOLUME_SNAPSHOT_RESTORE_FAILED, VdcBllErrors.NoUpServerFoundInRemoteCluster.name()); setSucceeded(false); return false; } try (org.ovirt.engine.core.utils.lock.EngineLock lock = acquireEngineLock(session.getSlaveVolumeId(), LockingGroup.GLUSTER_SNAPSHOT)) { if (!(restoreVolumeToSnapshot(slaveUpServer.getId(), slaveVolume, getSnapshot().getSnapshotName()))) { return false; } } } return true; }
public static void prepareCommandForMonitoring(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.action.VdcActionType actionType, boolean runAsInternal) { org.ovirt.engine.core.bll.job.ExecutionContext context = command.getExecutionContext(); if (context == null) { context = new org.ovirt.engine.core.bll.job.ExecutionContext(); } try { boolean isMonitored = org.ovirt.engine.core.bll.job.ExecutionHandler.shouldMonitorCommand(actionType, runAsInternal); if (isMonitored || (context.isJobRequired())) { org.ovirt.engine.core.common.job.Job job = org.ovirt.engine.core.bll.job.ExecutionHandler.getJob(command, actionType); context.setExecutionMethod(ExecutionMethod.AsJob); context.setJob(job); command.setExecutionContext(context); command.setJobId(job.getId()); context.setMonitored(true); } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.job.ExecutionHandler.log.errorFormat("Failed to prepare command of type {0} for monitoring due to error {1}", actionType.name(), org.apache.commons.lang.exception.ExceptionUtils.getMessage(e), e); } }

@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVmsListByInstanceType(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeReadList("GetVmsByInstanceTypeId", org.ovirt.engine.core.dao.VmDAODbFacadeImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("instance_type_id", id)); }
public java.util.Map refreshStoragePool(java.lang.String spUUID, java.lang.String msdUUID, java.lang.Integer masterVersion) { try { log.info("Refreshing storage pool, spUUID: {} msdUUID: {}", new java.lang.Object[]{ spUUID, msdUUID }); final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); dataCenter.setMasterStorageDomainId(msdUUID); dataCenter.setMasterVersion(masterVersion); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = getStorageDomainById(msdUUID); dataCenter.getStorageDomainMap().put(storageDomain.getId(), storageDomain); setMasterDomain(spUUID, msdUUID); return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
@java.lang.Override public void setItems(java.util.Collection value) { consoleModelsCache.updateVmCache(value); super.setItems(value); }


public static boolean checkCpuSockets(int num_of_sockets, int cpu_per_socket, java.lang.String compatibility_version, java.util.List<java.lang.String> CanDoActionMessages) { boolean retValue = true; if (retValue && ((num_of_sockets * cpu_per_socket) > (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmCpus, compatibility_version)))) { CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_NUM_CPU.toString()); retValue = false; } if (retValue && (num_of_sockets > (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmSockets, compatibility_version)))) { CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_NUM_SOCKETS.toString()); retValue = false; } if (retValue && (cpu_per_socket > (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfCpuPerSocket, compatibility_version)))) { CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MAX_CPU_PER_SOCKET.toString()); retValue = false; } if (retValue && (cpu_per_socket < 1)) { CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MIN_CPU_PER_SOCKET.toString()); retValue = false; } if (retValue && (num_of_sockets < 1)) { CanDoActionMessages.add(VdcBllMessages.ACTION_TYPE_FAILED_MIN_NUM_SOCKETS.toString()); retValue = false; } return retValue; }

@java.lang.Override public void runningSucceded() { org.ovirt.engine.core.bll.RunVmCommandBase.setSucceeded(true); setActionReturnValue(VMStatus.Up); org.ovirt.engine.core.bll.RunVmCommandBase.log(); org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.RunVmCommandBase.getExecutionContext(), false); org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(org.ovirt.engine.core.bll.RunVmCommandBase.getExecutionContext(), true); notifyHostsVmFailed(); if (((org.ovirt.engine.core.bll.RunVmCommandBase.getVm().getLastVdsRunOn()) == null) || (!(org.ovirt.engine.core.bll.RunVmCommandBase.getVm().getLastVdsRunOn().equals(getCurrentVdsId())))) { org.ovirt.engine.core.bll.RunVmCommandBase.getVm().setLastVdsRunOn(getCurrentVdsId()); } if (org.apache.commons.lang.StringUtils.isNotEmpty(org.ovirt.engine.core.bll.RunVmCommandBase.getVm().getHibernationVolHandle())) { removeVmHibernationVolumes(); org.ovirt.engine.core.bll.RunVmCommandBase.getVm().setStatus(VMStatus.Up); org.ovirt.engine.core.bll.RunVmCommandBase.getVm().setHibernationVolHandle(null); org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.UpdateVmDynamicData, new org.ovirt.engine.core.common.vdscommands.UpdateVmDynamicDataVDSCommandParameters(getCurrentVdsId(), org.ovirt.engine.core.bll.RunVmCommandBase.getVm().getDynamicData())); } }

@org.junit.Test public void testUpdateIscsiServerConnection() { existingConnection.setiqn("1.2.3.4"); dao.update(existingConnection); org.ovirt.engine.core.common.businessentities.StorageServerConnections result = dao.get(existingConnection.getid()); assertEquals(existingConnection, result); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Cluster cluster) { validateParameters(cluster, "name"); validateEnums(org.ovirt.engine.api.model.Cluster.class, cluster); org.ovirt.engine.api.model.DataCenter dataCenter = new org.ovirt.engine.api.model.DataCenter(); dataCenter.setId(dataCenterId.toString()); cluster.setDataCenter(dataCenter); org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.api.restapi.resource.BackendDataCenterResource.getStoragePool(cluster.getDataCenter(), this); org.ovirt.engine.core.common.businessentities.VDSGroup entity = map(cluster, map(pool)); return performCreate(VdcActionType.AddVdsGroup, new org.ovirt.engine.core.common.action.VdsGroupOperationParameters(entity), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetVdsGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
public void setpm_port(java.lang.Integer value) { mVdsStatic.setpm_port(value); }
public static java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getPluggedActiveImagesForVm(org.ovirt.engine.core.compat.Guid vmId) { return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(vmId, true), true, false, true); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmDevice mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(); vmDevice.setId(new org.ovirt.engine.core.common.businessentities.VmDeviceId(getGuidDefaultEmpty(rs, "device_id"), getGuidDefaultEmpty(rs, "vm_id"))); vmDevice.setDevice(rs.getString("device")); vmDevice.setType(org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.forValue(rs.getString("type"))); vmDevice.setAddress(rs.getString("address")); vmDevice.setBootOrder(rs.getInt("boot_order")); vmDevice.setSpecParams(org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserializeOrCreateNew(rs.getString("spec_params"), java.util.HashMap.class)); vmDevice.setIsManaged(rs.getBoolean("is_managed")); vmDevice.setIsPlugged(rs.getBoolean("is_plugged")); vmDevice.setIsReadOnly(rs.getBoolean("is_readonly")); vmDevice.setAlias(rs.getString("alias")); vmDevice.setCustomProperties(org.ovirt.engine.core.utils.SerializationFactory.getDeserializer().deserializeOrCreateNew(rs.getString("custom_properties"), java.util.LinkedHashMap.class)); vmDevice.setSnapshotId(getGuid(rs, "snapshot_id")); vmDevice.setLogicalName(rs.getString("logical_name")); return vmDevice; }

protected boolean checkTemplateInDestStorageDomain() { boolean retValue = true; if (((org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.ImageOperation.Move)) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().getit_guid())))) { org.ovirt.engine.core.common.businessentities.DiskImage templateImage = org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getDiskImageDao().get(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().getit_guid()); if (!(templateImage.getstorage_ids().contains(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()))) { retValue = false; addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_NOT_FOUND_ON_DESTINATION_DOMAIN); } } return retValue; }
@org.junit.Test public void passwordNotProvidedForHostInstallation() { when(host.getVdsType()).thenReturn(VDSType.VDS); validator = createValidatorForHostInstallation(); assertThat(validator.passwordProvidedForHostInstallation(AuthenticationMethod.Password, null), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD)); }




@java.lang.Override public void OnSuccess(java.lang.Object model1, java.lang.Object result1) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network> networks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>(); for (org.ovirt.engine.core.common.businessentities.network.Network a : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>) (result1))) { if (((a.getCluster().getStatus()) == (org.ovirt.engine.core.common.businessentities.network.NetworkStatus.OPERATIONAL)) && (a.isVmNetwork())) { networks.add(a); } } if (hotUpdateSupported) { networks.add(null); } getNetwork().setItems(networks); initSelectedNetwork(); okCommand.setIsExecutionAllowed(true); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__CREATE); addCanDoActionMessage(EngineMessage.VAR__TYPE__SNAPSHOT); }
protected javax.ws.rs.core.Response attachDiskToVm(org.ovirt.engine.api.restapi.resource.AbstractBackendCollectionResource resource, org.ovirt.engine.api.model.DiskAttachment attachment, org.ovirt.engine.api.restapi.resource.IResolver entityResolver) { org.ovirt.engine.core.compat.Guid diskId = org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(attachment.getDisk().getId()); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = map(attachment); dve.getId().setVmId(vmId); dve.getId().setDeviceId(diskId); org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters params = new org.ovirt.engine.core.common.action.AttachDetachVmDiskParameters(dve); org.ovirt.engine.api.model.Disk disk = attachment.getDisk(); boolean isDiskActive = false; if (attachment.isSetActive()) { isDiskActive = org.apache.commons.lang.BooleanUtils.toBoolean(attachment.isActive()); } params.setPlugUnPlug(isDiskActive); boolean isDiskReadOnly = false; if (disk.isSetReadOnly()) { isDiskReadOnly = org.apache.commons.lang.BooleanUtils.toBoolean(disk.isReadOnly()); } params.setReadOnly(isDiskReadOnly); if (disk.isSetSnapshot()) { validateParameters(disk, "snapshot.id"); params.setSnapshotId(asGuid(disk.getSnapshot().getId())); } return resource.performCreate(VdcActionType.AttachDiskToVm, params, entityResolver); }
@org.junit.Test public void testAddHostedEngineStorageFails() { parameters.getStorageDomain().setStorageName(StorageConstants.HOSTED_ENGINE_STORAGE_DOMAIN_NAME); when(command.getStorageDomainStaticDAO().get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdStatic = command.getStorageDomain().getStorageStaticData(); doReturn(new org.ovirt.engine.core.common.utils.Pair(sdStatic, sdStatic.getId())).when(command).executeHSMGetStorageDomainInfo(any(org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters.class)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_HOSTED_ENGINE_STORAGE); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm)) { return false; } org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm other = ((org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm) (obj)); return (((((java.util.Objects.equals(vmDynamic, other.vmDynamic)) && (java.util.Objects.equals(vmGuestAgentInterfaces, other.vmGuestAgentInterfaces))) && (java.util.Objects.equals(vmStatistics, other.vmStatistics))) && (java.util.Objects.equals(vNumaNodeStatisticsList, other.vNumaNodeStatisticsList))) && (java.util.Objects.equals(lunsMap, other.lunsMap))) && (java.util.Objects.equals(interfaceStatistics, other.interfaceStatistics)); }
public void OnRemove() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> pb = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.core.common.businessentities.network a : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.network>Cast(getSelectedItems())) { pb.add(new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(getEntity().getId(), a)); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.RemoveNetwork, pb); Cancel(); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Bricks") java.lang.String bricksStatusVolume();
public void getGlusterHook(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid hookId, boolean includeServerHooks) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterHookById, new org.ovirt.engine.core.common.queries.gluster.GlusterHookQueryParameters(hookId, includeServerHooks), aQuery); }
private void doDataCenterSearch() { final org.ovirt.engine.ui.frontend.AsyncQuery dcQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); dcQuery.setModel(this); dcQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { final org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel systemTreeModel = ((org.ovirt.engine.ui.uicommonweb.models.SystemTreeModel) (model)); systemTreeModel.setDataCenters(((java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool>) (result))); doNetworksSearch(); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterList(dcQuery, false); }
@java.lang.Override public org.ovirt.engine.api.model.Disk update(org.ovirt.engine.api.model.Disk resource) { return super.update(resource); }



@java.lang.Override public boolean runInThread(java.lang.Runnable runnable) { try { executorService.submit(runnable); return true; } catch (java.util.concurrent.RejectedExecutionException e) { return false; } }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { java.lang.String path = request.getPathInfo(); java.io.File file = null; if (path == null) { file = base; } else if (!(org.ovirt.engine.core.utils.ServletUtils.isSane(path))) { org.ovirt.engine.core.FileServlet.log.error((("The path \"" + path) + "\" is not sane, will send a 404 error response.")); response.sendError(HttpServletResponse.SC_NOT_FOUND); return; } else { file = new java.io.File(base, path); } if (file.isDirectory()) { java.io.File index = new java.io.File(file, org.ovirt.engine.core.FileServlet.INDEX); org.ovirt.engine.core.FileServlet.log.info((("Index is \"" + (index.getAbsolutePath())) + "\".")); if (index.isFile()) { java.lang.String redirect = null; if (path == null) { redirect = ((request.getServletPath()) + "/") + (org.ovirt.engine.core.FileServlet.INDEX); } else { redirect = (((request.getServletPath()) + path) + "/") + (org.ovirt.engine.core.FileServlet.INDEX); } response.sendRedirect(redirect); } else { org.ovirt.engine.core.FileServlet.log.error((("There is no index page for directory \"" + (file.getAbsolutePath())) + "\", will send a 404 error response.")); response.sendError(HttpServletResponse.SC_NOT_FOUND); } return; } java.lang.String mime = type; if (mime == null) { mime = org.ovirt.engine.core.utils.ServletUtils.getMimeMap().getContentType(file); } org.ovirt.engine.core.utils.ServletUtils.sendFile(request, response, file, mime); }
@org.junit.Test public void typeMatchesProfileOnlyTypePassthrough() { typeMatchesProfileCommon(true, false); assertThat(validator.typeMatchesProfile(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_VM_INTERFACE_TYPE_NOT_MATCH_PROFILE)); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to configure Temlate Network") java.lang.String allowToConfigureTemlateNetworkRoleTreeTooltip();
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.numa.vm.RemoveVmNumaNodesCommand.getVm()) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND); } return true; }
@org.junit.Test public void shouldNotElectUnknownHostedEngineDomain() { prepareStorageDomainForElection(StorageDomainStatus.Unknown, org.ovirt.engine.core.bll.storage.domain.StorageDomainCommandBaseTest.HE_STORAGE_DOMAIN_NAME); assertEquals(null, cmd.electNewMaster()); }



@java.lang.Override public org.ovirt.engine.core.common.businessentities.Role get(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id); return getCallsHandler().executeRead("GetRolsByid", org.ovirt.engine.core.dao.RoleDAODbFacadeImpl.RolesRowMapper.instance, parameterSource); }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } oldMacPool = macPoolDao.get(getMacPoolId()); return ((validate(new org.ovirt.engine.core.bll.MacPoolValidator(oldMacPool).macPoolExists())) && (validate(new org.ovirt.engine.core.bll.MacPoolValidator(getMacPoolEntity()).hasUniqueName()))) && (validate(org.ovirt.engine.core.bll.UpdateMacPoolCommand.validateDefaultFlagIsNotChanged(oldMacPool, getMacPoolEntity()))); }


@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.StoragePool pool) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("description", pool.getdescription()).addValue("id", pool.getId()).addValue("name", pool.getname()).addValue("storage_pool_type", pool.getstorage_pool_type()).addValue("status", pool.getstatus()).addValue("master_domain_version", pool.getmaster_domain_version()).addValue("spm_vds_id", pool.getspm_vds_id()).addValue("quota_enforcement_type", pool.getQuotaEnforcementType()).addValue("compatibility_version", pool.getcompatibility_version()); getCallsHandler().executeModification("Insertstorage_pool", parameterSource); }

public java.util.List<java.lang.Long> allocateAvailableMacs(int numberOfMacs) { if ((getAvailableMacsCount()) < numberOfMacs) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.MAC_POOL_NO_MACS_LEFT); } final java.util.List<java.lang.Long> result = new java.util.ArrayList<>(numberOfMacs); int remainingMacs = numberOfMacs; while (remainingMacs > 0) { final java.util.List<java.lang.Long> allocatedMacs = getRangeWithAvailableMac().allocateMacs(remainingMacs); remainingMacs -= allocatedMacs.size(); result.addAll(allocatedMacs); } return result; }

@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) return true; if ((o == null) || ((getClass()) != (o.getClass()))) return false; org.ovirt.engine.ui.uicommonweb.models.vms.IconWithOsDefault that = ((org.ovirt.engine.ui.uicommonweb.models.vms.IconWithOsDefault) (o)); return (((java.util.Objects.equals(icon, that.icon)) && (java.util.Objects.equals(osDefaultIcon, that.osDefaultIcon))) && (java.util.Objects.equals(smallIconId, that.smallIconId))) && (java.util.Objects.equals(validationResult, that.validationResult)); }

public void applyData(java.util.List<org.ovirt.engine.core.common.businessentities.LUNs> source, boolean isIncluded) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel> newItems = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.LunModel>(); for (org.ovirt.engine.core.common.businessentities.LUNs a : source) { if (((a.getLunType()) == (getType())) || ((a.getLunType()) == (org.ovirt.engine.core.common.businessentities.StorageType.UNKNOWN))) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.storage.SanTargetModel> targets = createTargetModelList(a); org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lunModel = new org.ovirt.engine.ui.uicommonweb.models.storage.LunModel(); lunModel.setLunId(a.getLUN_id()); lunModel.setVendorId(a.getVendorId()); lunModel.setProductId(a.getProductId()); lunModel.setSerial(a.getSerial()); lunModel.setMultipathing(a.getPathCount()); lunModel.setTargets(targets); lunModel.setSize(a.getDeviceSize()); lunModel.setIsAccessible(a.getAccessible()); lunModel.setStatus(a.getStatus()); lunModel.setIsIncluded(isIncluded); lunModel.setIsSelected(isIncluded); lunModel.setEntity(a); newItems.add(lunModel); updateGrayedOut(lunModel); if (isIncluded) { includedLUNs.add(lunModel); } } } initializeItems(newItems, null); proposeDiscover(); }
protected java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { return java.util.stream.IntStream.range(0, NAMES.length).filter(( x) -> !notFound).boxed().collect(java.util.stream.Collectors.toMap(this::getVmTemplateEntity, java.util.ArrayList::new, ( u, v) -> null, java.util.HashMap::new)); }

@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveIsNotValid() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond(); bond.setSlaves(java.util.Arrays.asList("slaveA", "slaveB")); org.ovirt.engine.core.bll.ValidationResult cannotBeSlaveValidationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_INTERFACE_BOND_OR_VLAN_CANNOT_BE_SLAVE, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostInterfaceValidator.VAR_INTERFACE_NAME, bond.getName())); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(bond)).build(); _doTestValidateModifiedBondSlaves(spy(validator), ValidationResult.VALID, cannotBeSlaveValidationResult, failsWith(cannotBeSlaveValidationResult)); }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); }
@java.lang.Override protected void OnEntityChanged() { super.OnEntityChanged(); if ((super.getEntity()) != null) { UpdateProperties(); } }


@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__UPDATE); addCanDoActionMessage(EngineMessage.VAR__TYPE__QUOTA); }
private static org.ovirt.engine.core.common.businessentities.VmTemplate cloneVmTemplate(org.ovirt.engine.core.common.businessentities.VmTemplate instance) { org.ovirt.engine.core.common.businessentities.VmTemplate obj = new org.ovirt.engine.core.common.businessentities.VmTemplate(); obj.setStoragePoolId(instance.getStoragePoolId()); obj.setStoragePoolName(instance.getStoragePoolName()); obj.setDefaultDisplayType(instance.getDefaultDisplayType()); obj.setPriority(instance.getPriority()); obj.setIsoPath(instance.getIsoPath()); obj.setOrigin(instance.getOrigin()); obj.setSizeGB(instance.getSizeGB()); obj.setDiskImageMap(instance.getDiskImageMap()); obj.setInterfaces(instance.getInterfaces()); obj.setAutoStartup(instance.isAutoStartup()); obj.setChildCount(instance.getChildCount()); obj.setCpuPerSocket(instance.getCpuPerSocket()); obj.setCreationDate(instance.getCreationDate()); obj.setDefaultBootSequence(instance.getDefaultBootSequence()); obj.setComment(instance.getComment()); obj.setDomain(instance.getDomain()); obj.setFailBack(instance.isFailBack()); obj.setStateless(instance.isStateless()); obj.setMemSizeMb(instance.getMemSizeMb()); obj.setName(instance.getName()); obj.setNiceLevel(instance.getNiceLevel()); obj.setNumOfMonitors(instance.getNumOfMonitors()); obj.setAllowConsoleReconnect(instance.isAllowConsoleReconnect()); obj.setNumOfSockets(instance.getNumOfSockets()); obj.setStatus(instance.getStatus()); obj.setTimeZone(instance.getTimeZone()); obj.setUsbPolicy(instance.getUsbPolicy()); obj.setVdsGroupId(instance.getVdsGroupId()); obj.setVdsGroupName(instance.getVdsGroupName()); obj.setVmType(instance.getVmType()); obj.setId(instance.getId()); obj.setDiskList(instance.getDiskList()); obj.setRunAndPause(instance.isRunAndPause()); return obj; }
@org.junit.Test public void testValidateNetworkExclusiveOnNicAtMostOneNonVmNetworkViolated() throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK), nonVmNetwork1, nonVmNetwork2); }
public java.lang.String getIfTotalSpeed() { return this.mVdsDynamic.getIfTotalSpeed(); }
private void initClusters(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters, org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> filteredList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>(); org.ovirt.engine.core.common.businessentities.StoragePool selectedDataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (getModel().getDataCenter().getSelectedItem())); boolean listContainsVmCluster = false; for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (selectedDataCenter.getId().equals(cluster.getStoragePoolId()))) { filteredList.add(cluster); if (org.ovirt.engine.core.compat.Guid.OpEquality(cluster.getId(), vm.getVdsGroupId().getValue())) { listContainsVmCluster = true; } } } if (!listContainsVmCluster) { addVmCluster(filteredList); } else { java.util.Collections.sort(filteredList, new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer()); model.setClusters(model, filteredList, vm.getVdsGroupId().getValue()); } }
@java.lang.Override public java.lang.String toString() { java.lang.String response = ((this.getResult()) != null) ? " result: " + (this.getResult().toString()) : " error: " + (this.getError().toString()); return (("<JsonRpcResponse id: " + (this.getId())) + response) + ">"; }
public void clearCache() { synchronized(_lockObject) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.info(("clearing cache for problematic entities in pool " + (_storagePoolId))); _timers.clear(); _domainsInProblem.clear(); _vdssInProblem.clear(); duringReconstructMaster.set(false); } }
protected boolean verifyAddVM() { return org.ovirt.engine.core.bll.VmHandler.verifyAddVm(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue().getCanDoActionMessages(), ((org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmsCount()) * (org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmNicDao().getAllForTemplate(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplateId()).size())), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().getPriority()); }
protected static org.dbunit.database.IDatabaseConnection getConnection() throws java.lang.Exception { java.sql.Connection con = org.ovirt.engine.core.dao.BaseDaoTestCase.dataSource.getConnection(); org.dbunit.database.IDatabaseConnection connection = new org.dbunit.database.DatabaseConnection(con); connection.getConfig().setProperty(DatabaseConfig.PROPERTY_DATATYPE_FACTORY, org.ovirt.engine.core.dao.BaseDaoTestCase.dataFactory); if (org.ovirt.engine.core.dao.BaseDaoTestCase.needInitializationSql) { try (java.sql.Statement stmt = con.createStatement()) { stmt.executeUpdate(org.ovirt.engine.core.dao.BaseDaoTestCase.initSql); } } return connection; }

@java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call() { getParameters().setStorageDomainId(getMasterDomainIdFromDb()); org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainPoolMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(getParameters().getNewMasterDomainId(), getParameters().getStoragePoolId(), org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().save(domainPoolMap); getParameters().setVdsId(getVds().getId()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = getBackend().runInternalAction(VdcActionType.ReconstructMasterDomain, getParameters()); boolean reconstructVerbExecuted = ((returnVal.getActionReturnValue()) != null) ? ((java.lang.Boolean) (returnVal.getActionReturnValue())) : false; getStoragePoolDAO().updateStatus(getStoragePool().getId(), StoragePoolStatus.NonResponsive); if (!reconstructVerbExecuted) { getStoragePoolIsoMapDAO().remove(domainPoolMap.getId()); } if (returnVal.getSucceeded()) { updateStorageDomainFormat(loadTargetedMasterDomain()); } setSucceeded(returnVal.getSucceeded()); return new org.ovirt.engine.core.common.eventqueue.EventResult(reconstructVerbExecuted, org.ovirt.engine.core.common.eventqueue.EventType.RECONSTRUCT); }



private java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> getDbNetworkAttachments() { if ((dbNetworkAttachments) == null) { dbNetworkAttachments = networkAttachmentDao.getAllForHost(hostId); } return dbNetworkAttachments; }



void clearAllDismissed();



protected boolean isVmInUpPausedDownStatus() { if ((((org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) && ((org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down))) && ((org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Paused))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL, org.ovirt.engine.core.bll.validator.LocalizedVmStatus.from(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVm().getStatus())); } return true; }
public org.ovirt.engine.core.bll.ValidationResult anotherInterfaceAlreadyLabeledWithThisLabel(java.lang.String label, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfacesToCheck) { for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : interfacesToCheck) { boolean notTheSameNic = !(org.apache.commons.lang.StringUtils.equals(nic.getName(), iface.getName())); if (notTheSameNic) { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.OTHER_INTERFACE_ALREADY_LABELED, ("$LabeledNic " + (nic.getName()))).when(((org.ovirt.engine.core.utils.NetworkUtils.isLabeled(nic)) && (nic.getLabels().contains(label)))); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public void run() { try { java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> vmsToMigrate = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStaticDao().getAllWithFailbackByVds(vds.getId()); if (!(vmsToMigrate.isEmpty())) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); executionContext.setMonitored(true); org.ovirt.engine.core.bll.Backend.getInstance().runInternalMultipleActions(VdcActionType.MigrateVmToServer, new java.util.ArrayList(createMigrateVmToServerParametersList(vmsToMigrate, vds)), executionContext); } } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.bll.VdsEventListener.log.errorFormat("Failed to initialize Vds on up. Error: {0}", e); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> runExternalFilters(java.util.ArrayList<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl> filters, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, java.util.List<java.lang.String> messages) { java.util.List<org.ovirt.engine.core.compat.Guid> filteredIDs = null; if (filters != null) { java.util.List<java.lang.String> filterNames = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl filter : filters) { filterNames.add(filter.getName()); } java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hostList) { hostIDs.add(host.getId()); } filteredIDs = org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerFactory.getInstance().runFilters(filterNames, hostIDs, vm.getId(), parameters); } return intersectHosts(hostList, filteredIDs); }
public static void mockOsTypes() { org.easymock.IMocksControl control = org.easymock.EasyMock.createNiceControl(); org.ovirt.engine.core.common.osinfo.OsRepository osRepositoryMock = control.createMock(org.ovirt.engine.core.common.osinfo.OsRepository.class); java.util.HashMap<java.lang.Integer, java.lang.String> osNames = new java.util.HashMap<>(1); osNames.put(0, "Unassigned"); expect(osRepositoryMock.getUniqueOsNames()).andReturn(osNames).anyTimes(); org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepositoryMock); control.replay(); }
void setwrite_rate_kb_per_sec(int value);

private boolean validateLabelChanges(java.util.Collection<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel> potentialNetworks) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel mockSrc = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel(this); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel mockDst = new org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel(this); mockSrc.setEntity(new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface()); mockDst.setEntity(new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface()); mockDst.setItems(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel>(potentialNetworks)); boolean res = candidateOperation(mockSrc, mockDst, false); if (!res) { candidateOperation(mockSrc, mockDst, true); } return res; }
java.util.List<org.ovirt.engine.core.common.businessentities.storage_server_connections> GetStorageServerConnectionsByDomain(org.ovirt.engine.core.common.businessentities.storage_domain_static storageDomain);
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__IMPORT); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__PROVIDER_CERTIFICATE); }


@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Role>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Role>(); }
@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { super.postDataCenterWithClusterSelectedItemChanged(); setupWindowModelFrom(pool.getStaticData()); getModel().setIsDisksAvailable(true); java.lang.Iterable<org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster> dataCenterWithClusters = getModel().getDataCenterWithClustersList().getItems(); org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster selectDataCenterWithCluster = org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(dataCenterWithClusters, new org.ovirt.engine.ui.uicommonweb.Linq.DataCenterWithClusterPredicate(pool.getStoragePoolId(), pool.getVdsGroupId())); getModel().getDataCenterWithClustersList().setSelectedItem((selectDataCenterWithCluster != null ? selectDataCenterWithCluster : org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(dataCenterWithClusters))); }

public java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> isVmReadyForUpgrade(final org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Objects.requireNonNull(vm); final java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> errors = new java.util.ArrayList<>(); if (vm.getStatus().isSuspended()) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_SUSPENDED); } if (!(org.apache.commons.lang.StringUtils.isEmpty(vm.getCpuPinning()))) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_CPUS_PINNED); } for (org.ovirt.engine.core.common.businessentities.VmNumaNode vmNumaNode : vm.getvNumaNodeList()) { if (!(org.ovirt.engine.core.utils.NumaUtils.getPinnedNodeIndexList(vmNumaNode.getVdsNumaNodeList()).isEmpty())) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_NUMA_PINNED); break; } } if ((!(vm.getDedicatedVmForVdsList().isEmpty())) && ((org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST) == (vm.getMigrationSupport()))) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_PINNED_TO_HOSTS); } if (hostDeviceManager.checkVmNeedsDirectPassthrough(vm)) { errors.add(org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR.VM_NEEDS_PASSTHROUGH); } return errors; }
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper(networkAttachment.getId()).addValue("network_id", networkAttachment.getNetworkId()).addValue("nic_id", networkAttachment.getNicId()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(networkAttachment.getProperties())); mapIpConfiguration(networkAttachment, mapper); return mapper; }
protected boolean validateImagesAndVMStates() { return org.ovirt.engine.core.bll.ImagesHandler.PerformImagesChecks(org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().getCanDoActionMessages(), org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVm().getStoragePoolId(), Guid.Empty, hasImages(), hasImages(), hasImages(), hasImages(), true, true, org.ovirt.engine.core.bll.RemoveSnapshotCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVmId())); }
protected void DetachAllVmsFromUser() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().getAllForUser(org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.getAdUserId()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.getVmPoolId().equals(vm.getVmPoolId())) { org.ovirt.engine.core.common.businessentities.permissions perm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getPermissionDao().getForRoleAndAdElementAndObject(PredefinedRoles.ENGINE_USER.getId(), org.ovirt.engine.core.bll.DetachUserFromVmFromPoolCommand.getAdUserId(), vm.getId()); if (perm != null) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getPermissionDao().remove(perm.getId()); RestoreVmFromBaseSnapshot(vm); } } } }
private java.util.Map<java.lang.String, java.lang.String> getAddressMapForScsiDisk(java.lang.String address, java.util.Map<org.ovirt.engine.core.common.businessentities.VmDevice, java.lang.Integer> vmDeviceUnitMap, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, int controllerIndex, boolean reserveFirstAddress) { java.util.Map<java.lang.String, java.lang.String> addressMap; int availableUnit = vmInfoBuildUtils.getAvailableUnitForScsiDisk(vmDeviceUnitMap, reserveFirstAddress); if (org.apache.commons.lang.StringUtils.isNotBlank(address)) { addressMap = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(address); int unit = java.lang.Integer.parseInt(addressMap.get(VdsProperties.Unit)); if (vmDeviceUnitMap.containsValue(unit)) { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } } else { addressMap = vmInfoBuildUtils.createAddressForScsiDisk(controllerIndex, availableUnit); } updateVmDeviceAddress(addressMap.toString(), vmDevice); return addressMap; }

private void updateCanSpecify() { org.ovirt.engine.core.common.businessentities.network.Network network = ((org.ovirt.engine.core.common.businessentities.network.Network) (getNetwork().getSelectedItem())); boolean isChangable = (bootProtocolsAvailable) && (getIsStaticAddress()); getAddress().setIsChangable(isChangable); getSubnet().setIsChangable(isChangable); }


private void assertCanDoActionMessage(org.ovirt.engine.core.common.errors.VdcBllMessages msg) { assertTrue("canDoAction failed for the wrong reason", command.getReturnValue().getCanDoActionMessages().contains(msg.name())); }
private boolean internalCanDoAction() { boolean returnValue = false; try { javax.transaction.Transaction transaction = null; if (!(isCanDoActionSupportsTransaction())) { transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); } try { returnValue = (((((isUserAuthorizedToRunAction()) && (isBackwardsCompatible())) && (validateInputs())) && (acquireLock())) && (canDoAction())) && (internalValidateAndSetQuota()); if ((!returnValue) && ((getReturnValue().getCanDoActionMessages().size()) > 0)) { log.warn("CanDoAction of action '{}' failed for user {}. Reasons: {}", getActionType(), org.ovirt.engine.core.bll.CommandBase.getUserName(), org.apache.commons.lang.StringUtils.join(getReturnValue().getCanDoActionMessages(), ',')); } } finally { if (transaction != null) { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); } } } catch (org.springframework.dao.DataAccessException dataAccessEx) { log.error("Data access error during CanDoActionFailure.", dataAccessEx); addCanDoActionMessage(EngineMessage.CAN_DO_ACTION_DATABASE_CONNECTION_FAILURE); } catch (java.lang.RuntimeException ex) { log.error("Error during CanDoActionFailure.", ex); addCanDoActionMessage(EngineMessage.CAN_DO_ACTION_GENERAL_FAILURE); } finally { if (!returnValue) { freeLock(); } } return returnValue; }
@org.junit.Test public void testGetAllIds() { java.util.List<org.ovirt.engine.core.compat.Guid> ids = dao.getAllIds(); assertTrue(ids.remove(FixturesTool.EXISTING_VM_JOB)); assertTrue(ids.remove(FixturesTool.EXISTING_VM_BLOCK_JOB)); assertTrue(ids.isEmpty()); }

@java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior) (array[0])); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (array[1])); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>) (returnValue)); model.SetClusters(model, clusters, null); behavior.InitTemplate(); behavior.InitCdImage(); }
@java.lang.Override protected boolean canDoAction() { if ((getProvider()) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST); } org.ovirt.engine.core.bll.provider.ProviderProxy providerProxy = getProviderProxy(); if (providerProxy == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_PROVIDER_NOT_SUPPORTED, java.lang.String.format("$providerType %1$s", getProvider().getType())); } org.ovirt.engine.core.bll.provider.ProviderValidator validator = getProviderProxy().getProviderValidator(); return (validate(validator.nameAvailable())) && (validate(validator.validateAddProvider())); }
protected void populateDomains(java.util.List<java.lang.String> domains) { getDomain().setItems(domains); getDomain().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(domains)); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.host.provider.HostProviderProxy proxy = systemProviderFinder.findSystemProvider(); if (proxy == null) { org.ovirt.engine.core.bll.GetErrataForEngineQuery.getQueryReturnValue().setSucceeded(false); org.ovirt.engine.core.bll.GetErrataForEngineQuery.getQueryReturnValue().setExceptionString(EngineMessage.NO_FOREMAN_PROVIDER_FOR_ENGINE.name()); } else { setReturnValue(proxy.getErrataForHost(systemProviderFinder.getSystemHostName())); } }
@java.lang.Override public org.ovirt.engine.api.model.Events list() { return mapCollection(getBackendCollection()); }
@org.junit.Test(expected = java.lang.NullPointerException.class) public void appendCustomValueUsesNullSeparator() { final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase b = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.TestAuditLogableBase(); final java.lang.String key = "foo"; final java.lang.String value = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBaseTest.NAME; final java.lang.String newVal = "bar"; final java.lang.String sep = null; b.addCustomValue(key, value); b.appendCustomValue(key, newVal, sep); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Add Bricks") java.lang.String addBricksVolume();




public void addDisk() { if ((getEntity()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.NewDiskModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.NewGuideDiskModel(this); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().addVirtualDiskTitle()); model.setHashName("new_virtual_disk"); model.setVm(getEntity()); setWindow(model); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); cancelCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); cancelCommand.setIsCancel(true); model.setCancelCommand(cancelCommand); model.initialize(); }

public void updateNetworkInterfacesByTemplate(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { org.ovirt.engine.core.common.queries.VdcQueryType queryType = (vmBase instanceof org.ovirt.engine.core.common.businessentities.VmTemplate) ? org.ovirt.engine.core.common.queries.VdcQueryType.GetTemplateInterfacesByTemplateId : org.ovirt.engine.core.common.queries.VdcQueryType.GetVmInterfacesByVmId; org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object parentModel, java.lang.Object returnValue) { if (returnValue == null) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); updateNetworkInterfaces(getNetworkProfileBehavior(), nics); } }); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(queryType, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmBase.getId()), query); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("refreshAllUsers") public void refreshAllUsers() { java.util.List<org.ovirt.engine.core.common.businessentities.DbUser> activeUsers = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.DbUser dbUser : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().getAll()) { if (dbUser.isActive()) { activeUsers.add(dbUser); } } for (org.ovirt.engine.core.common.businessentities.DbUser user : org.ovirt.engine.core.bll.SyncUsers.sync(activeUsers)) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().update(user); } }
private org.ovirt.engine.core.utils.kerberos.AuthenticationResult checkAuthentication(java.lang.String username, java.lang.String password) { org.ovirt.engine.core.utils.kerberos.AuthenticationResult result = AuthenticationResult.OK; try { lc = new javax.security.auth.login.LoginContext("KerberosUtil", new org.ovirt.engine.core.utils.kerberos.KerberosConfigCheck.KerberosUtilCallbackHandler(username, password)); lc.login(); org.ovirt.engine.core.utils.kerberos.KerberosConfigCheck.log.debug("Check authentication finished successfully "); } catch (javax.security.auth.login.LoginException ex) { java.lang.String resultMessage = ex.getMessage(); java.lang.String formattedMessage = ((org.ovirt.engine.core.utils.kerberos.InstallerConstants.ERROR_PREFIX) + " exception message: ") + resultMessage; org.ovirt.engine.core.utils.kerberos.KerberosConfigCheck.log.error(formattedMessage); org.ovirt.engine.core.utils.kerberos.KerberosReturnCodeParser parser = new org.ovirt.engine.core.utils.kerberos.KerberosReturnCodeParser(); result = parser.parse(resultMessage); if (result != (AuthenticationResult.OTHER)) { return result; } else { java.lang.System.out.println(formattedMessage); } } return result; }



public static void InitDictionaries() { org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary.clear(); for (org.ovirt.engine.core.compat.Version ver : org.ovirt.engine.core.common.config.Config.<java.util.HashSet<org.ovirt.engine.core.compat.Version>>GetValue(ConfigValues.SupportedClusterLevels)) { org.ovirt.engine.core.bll.CpuFlagsManagerHandler._managersDictionary.put(ver, new org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager(ver)); } }
@java.lang.Override protected boolean canDoAction() { return ((((((((((((isImageExist()) && (checkOperationIsCorrect())) && (canFindVmOrTemplate())) && (isDiskUsedAsOvfStore())) && (isImageNotLocked())) && (isSourceAndDestTheSame())) && (validateSourceStorageDomain())) && (validateDestStorage())) && (checkTemplateInDestStorageDomain())) && (validateSpaceRequirements())) && (checkCanBeMoveInVm())) && (checkIfNeedToBeOverride())) && (setAndValidateDiskProfiles()); }
protected java.util.List<java.lang.String> missingServerCpuFlags(org.ovirt.engine.core.common.businessentities.VDS vds) { return org.ovirt.engine.core.bll.CpuFlagsManagerHandler.missingServerCpuFlags(org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup().getCpuName(), vds.getCpuFlags(), org.ovirt.engine.core.bll.UpdateVdsGroupCommand.getVdsGroup().getCompatibilityVersion()); }
protected boolean uniqueInterfaceName(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { return org.ovirt.engine.core.bll.VmHandler.isNotDuplicateInterfaceName(interfaces, getInterfaceName(), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getReturnValue().getCanDoActionMessages()); }

@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel) (array[0])); org.ovirt.engine.ui.uicommonweb.models.storage.RemoveStorageModel removeStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.RemoveStorageModel) (array[1])); org.ovirt.engine.core.common.businessentities.StorageDomain storage = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (storageListModel.getSelectedItem())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); removeStorageModel.getHostList().setItems(hosts); removeStorageModel.getHostList().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(hosts)); removeStorageModel.getFormat().setIsAvailable(storage.getStorageDomainType().isIsoOrImportExportDomain()); if (hosts.isEmpty()) { org.ovirt.engine.ui.uicommonweb.UICommand tempVar = createCancelCommand("Cancel"); tempVar.setIsDefault(true); removeStorageModel.getCommands().add(tempVar); } else { org.ovirt.engine.ui.uicommonweb.UICommand command; command = createOKCommand("OnRemove"); removeStorageModel.getCommands().add(command); command = createCancelCommand("Cancel"); removeStorageModel.getCommands().add(command); } }
@org.junit.Test public void canRemoveLastBrick() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getDistributedVolume(volumeId1, 1); org.ovirt.engine.core.bll.ValidationResult validationResult = brickValidator.canRemoveBrick(volumeEntity.getBricks(), volumeEntity, 1, false); assertFalse(validationResult.isValid()); assertTrue(((org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_CAN_NOT_REMOVE_ALL_BRICKS_FROM_VOLUME) == (validationResult.getMessage()))); }
private void addMacPool(final org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterModel dcModel) { org.ovirt.engine.ui.uicommonweb.models.macpool.SharedMacPoolModel macPoolModel = new org.ovirt.engine.ui.uicommonweb.models.macpool.NewSharedMacPoolModel(this) { @java.lang.Override protected void onActionSucceeded(org.ovirt.engine.core.compat.Guid macPoolId) { org.ovirt.engine.core.common.businessentities.MacPool macPool = getEntity(); macPool.setId(macPoolId); java.util.Collection<org.ovirt.engine.core.common.businessentities.MacPool> macPools = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.MacPool>(dcModel.getMacPoolListModel().getItems()); macPools.add(macPool); dcModel.getMacPoolListModel().setItems(macPools); dcModel.getMacPoolListModel().setSelectedItem(macPool); org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterListModel.this.setConfirmWindow(null); } }; macPoolModel.setEntity(new org.ovirt.engine.core.common.businessentities.MacPool()); setConfirmWindow(macPoolModel); }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__TYPE__HOST); addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE); }



@java.lang.Override public boolean canBeSelected() { org.ovirt.engine.core.common.businessentities.DisplayType vmDisplayType = ((getEntity().getDisplayType()) != null) ? getEntity().getDisplayType() : getEntity().getDefaultDisplayType(); return vmDisplayType == (org.ovirt.engine.core.common.businessentities.DisplayType.vnc); }



@org.junit.Test public void testCDAStoragePoolNotUp() { storagePool.setStatus(StoragePoolStatus.Uninitialized); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure("canDoAction did not fail on a Storage Pool which is not up", command, VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND); }

@java.lang.Override protected void proceedProxyReturnValue() { org.ovirt.engine.core.common.errors.VdcBllErrors returnStatus = getReturnValueFromStatus(getReturnStatus()); switch (returnStatus) { case GetStorageDomainListError : org.ovirt.engine.core.vdsbroker.irsbroker.GetVolumesListVDSCommand.getVDSReturnValue().setVdsError(new org.ovirt.engine.core.common.errors.VDSError(returnStatus, getReturnStatus().mMessage)); org.ovirt.engine.core.vdsbroker.irsbroker.GetVolumesListVDSCommand.getVDSReturnValue().setSucceeded(false); break; default : super.proceedProxyReturnValue(); break; } }
@java.lang.Override public org.ovirt.engine.core.searchbackend.IConditionValueAutoCompleter getFieldValueAutoCompleter(java.lang.String fieldName) { if ("OS".equals(fieldName)) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter(org.ovirt.engine.core.common.businessentities.VmOsType.class); } else if ("STATUS".equals(fieldName)) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter(org.ovirt.engine.core.common.businessentities.VMStatus.class); } else if ("TYPE".equals(fieldName)) { return new org.ovirt.engine.core.searchbackend.EnumValueAutoCompleter(org.ovirt.engine.core.common.businessentities.VmType.class); } else if ("QUOTA".equals(fieldName)) { return new org.ovirt.engine.core.searchbackend.NullableStringAutoCompleter(); } return null; }
@org.junit.Test public void runSingleQuery() { org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters parameters = new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters(); org.ovirt.engine.core.common.queries.VdcQueryReturnValue value = backend.runInternalQuery(VdcQueryType.GetAllRoles, parameters); assertTrue(value.getSucceeded()); java.util.Collection<org.ovirt.engine.core.common.businessentities.roles> roles = ((java.util.Collection<org.ovirt.engine.core.common.businessentities.roles>) (value.getReturnValue())); for (org.ovirt.engine.core.common.businessentities.roles role : roles) { java.lang.System.out.println(role.getname()); } }
@java.lang.Override protected boolean canDoAction() { return ((super.canDoAction()) && (VdsGroupExists())) && (changesAreClusterCompatible()); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Brick Directory field is mandatory") java.lang.String emptyBrickDirectoryMsg();

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__WRITE_PUB_KEYS); }
@java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand command, java.lang.Object... parameters) { super.ExecuteCommand(command); if (command == (getEditCommand())) { Edit(); } else if (command == (getEditManagementNetworkCommand())) { EditManagementNetwork(); } else if (command == (getSetupNetworksCommand())) { SetupNetworks(); } else if (command == (getBondCommand())) { Bond(); } else if (command == (getDetachCommand())) { Detach(); } else if (command == (getSaveNetworkConfigCommand())) { SaveNetworkConfig(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnSave")) { OnSave(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnEditManagementNetwork")) { OnEditManagementNetwork(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnEditManagementNetworkConfirmation")) { OnEditManagementNetworkConfirmation(false); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnEditManagementNetworkConfirmation_Bond")) { OnEditManagementNetworkConfirmation(true); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnBond")) { OnBond(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnDetach")) { OnDetach(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnConfirmManagementDetach")) { OnConfirmManagementDetach(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "Cancel")) { Cancel(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "CancelConfirm")) { CancelConfirm(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnSaveNetworkConfig")) { OnSaveNetworkConfig(); } }
private void failOnDowngradingWithStorageType(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { storagePoolVersion35(); cmd.getStoragePool().setCompatibilityVersion(Version.v3_1); org.ovirt.engine.core.common.businessentities.StorageDomain sd = createStorageDomain(StorageFormatType.V3, storageType); setAttachedDomains(sd); canDoActionFailed(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAINS_ARE_NOT_SUPPORTED_IN_DOWNGRADED_VERSION); }

protected org.ovirt.engine.core.common.businessentities.VMStatus createVm() { final java.lang.String cdPath = chooseCd(); if (org.apache.commons.lang.StringUtils.isNotEmpty(cdPath)) { org.ovirt.engine.core.bll.RunVmCommand.log.info("Running VM with attached cd '{}'", cdPath); } updateCurrentCd(cdPath); org.ovirt.engine.core.bll.RunVmCommand.getVm().setCdPath(cdPathWindowsToLinux(cdPath)); if (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getParameters().getFloppyPath()))) { org.ovirt.engine.core.bll.RunVmCommand.getVm().setFloppyPath(cdPathWindowsToLinux(org.ovirt.engine.core.bll.RunVmCommand.getParameters().getFloppyPath())); } if (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getVm().getInitrdUrl()))) { org.ovirt.engine.core.bll.RunVmCommand.getVm().setInitrdUrl(getIsoPrefixFilePath(org.ovirt.engine.core.bll.RunVmCommand.getVm().getInitrdUrl())); } if (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.RunVmCommand.getVm().getKernelUrl()))) { org.ovirt.engine.core.bll.RunVmCommand.getVm().setKernelUrl(getIsoPrefixFilePath(org.ovirt.engine.core.bll.RunVmCommand.getVm().getKernelUrl())); } initParametersForExternalNetworks(); initParametersForPassthroughVnics(); org.ovirt.engine.core.common.businessentities.VMStatus vmStatus = ((org.ovirt.engine.core.common.businessentities.VMStatus) (org.ovirt.engine.core.bll.RunVmCommand.getVdsBroker().runAsyncVdsCommand(VDSCommandType.Create, buildCreateVmParameters(), this).getReturnValue())); memoryFromSnapshotUsed = (vmStatus.isRunning()) || (vmStatus == (org.ovirt.engine.core.common.businessentities.VMStatus.RestoringState)); return vmStatus; }
public org.ovirt.engine.core.bll.ValidationResult validateCinderDiskSnapshotsLimits() { return validate(new java.util.concurrent.Callable<org.ovirt.engine.core.bll.ValidationResult>() { @java.lang.Override public org.ovirt.engine.core.bll.ValidationResult call() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageMap = getRelatedCinderDisksToStorageDomainMap(); java.util.Collection<org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageCollection = relatedCinderDisksByStorageMap.values(); for (org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy relatedCinderDisksByStorage : relatedCinderDisksByStorageCollection) { com.woorea.openstack.cinder.model.Limits limits = relatedCinderDisksByStorage.getProxy().getLimits(); int numOfDisks = relatedCinderDisksByStorage.getCinderDisks().size(); if (isLimitExceeded(limits, VolumeClassification.Snapshot, numOfDisks)) { java.lang.String storageName = getStorageDomainDao().get(relatedCinderDisksByStorage.getStorageDomainId()).getStorageName(); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.CANNOT_ADD_CINDER_DISK_SNAPSHOT_LIMIT_EXCEEDED, java.lang.String.format("$maxTotalSnapshots %d", limits.getAbsolute().getMaxTotalVolumes()), java.lang.String.format("$storageName %s", storageName)); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; } }); }

private void containerChanged() { if ((getContainer()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenter = getContainer().getDataCenter(); dataCenter.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { containerDataCenterChanged(); } }); if ((dataCenter.getSelectedItem()) != null) { containerDataCenterChanged(); } }
@java.lang.Override public org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> runBalance(java.lang.String balanceName, java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs, java.util.Map<java.lang.String, java.lang.String> propertiesMap) { try { org.apache.xmlrpc.client.XmlRpcClient client = new org.apache.xmlrpc.client.XmlRpcClient(); client.setConfig(config); java.lang.Object result = client.execute(org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.BALANCE, createBalanceArgs(balanceName, hostIDs, propertiesMap)); return org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerObjectBuilder.getBalanceResults(result).getResult(); } catch (org.apache.xmlrpc.XmlRpcException e) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.log.error("Could not communicate with the external scheduler while balancing", e); auditLogFailedToConnect(); return null; } }
private void removeMemoryVolumesOfSnapshot(org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = runInternalAction(VdcActionType.RemoveMemoryVolumes, new org.ovirt.engine.core.common.action.RemoveMemoryVolumesParameters(snapshot.getMemoryVolume(), org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVmId()), org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.cloneContextAndDetachFromParent()); if (!(retVal.getSucceeded())) { log.error("Failed to remove memory volumes of snapshot '{}' ({})", snapshot.getDescription(), snapshot.getId()); } }
@java.lang.Override public void reportCompleted() { try { super.reportCompleted(); } finally { if ((getVdsDestinationId()) != null) { decreasePendingVms(getVdsDestinationId()); } org.ovirt.engine.core.bll.MigrateVmCommand.freeLock(); } }
private org.ovirt.engine.core.common.action.ImportVmParameters createImportParams(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.StorageDomain sd) { org.ovirt.engine.core.common.action.ImportVmParameters parameters = new org.ovirt.engine.core.common.action.ImportVmParameters(vm, sd.getId(), sd.getId(), sd.getStoragePoolId(), vm.getClusterId()); org.ovirt.engine.core.compat.Guid sdProfileId = diskProfileDao.getAllForStorageDomain(sd.getId()).get(0).getId(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : vm.getImages()) { image.setDiskProfileId(sdProfileId); image.setStorageIds(new java.util.ArrayList(java.util.Arrays.asList(sd.getId()))); image.setVmSnapshotId(org.ovirt.engine.core.compat.Guid.newGuid()); } parameters.setImagesExistOnTargetStorageDomain(true); vm.setOrigin(OriginType.MANAGED_HOSTED_ENGINE); org.ovirt.engine.core.common.businessentities.Cluster cluster = clusterDAO.get(vm.getClusterId()); vm.setClusterArch(cluster.getArchitecture()); vm.setVmCreationDate(new java.util.Date()); vm.setMigrationSupport(MigrationSupport.IMPLICITLY_NON_MIGRATABLE); vm.setVmOs(osRepository.getLinuxOss().stream().sorted().findFirst().get()); return parameters; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove Bricks Status") java.lang.String removeBricksStatusTitle();


@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type} without at least one bootable disk.\nAlternatives:\n-Create a disk for this VM, and rerun the VM.\n-Change the boot sequence using the Edit VM command (Boot Option Sub-Tab).\n-Use the \'Run Once\' command to select a different boot option and rerun the VM.") java.lang.String VM_CANNOT_RUN_FROM_DISK_WITHOUT_DISK();

public void setMemoryStats(long totalMemory, long usedMemory) { java.lang.String totalMemoryString = messages.numaMemory(totalMemory); totalLabel.setTitle(totalMemoryString); totalLabel.setText(totalMemoryString); java.lang.String usedMemoryString = messages.numaMemoryUsed(usedMemory); usedLabel.setTitle(usedMemoryString); usedLabel.setText(usedMemoryString); }


@java.lang.Override public void onDragLeave(com.google.gwt.event.dom.client.DragLeaveEvent event) { table.getElement().removeClassName(style.networkGroupDragOver()); }
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue handleVdsResult(org.ovirt.engine.core.common.vdscommands.VDSReturnValue result) { if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(result.getExceptionString()))) { org.ovirt.engine.core.common.errors.VdcBLLException exp; if ((result.getVdsError()) != null) { exp = new org.ovirt.engine.core.common.errors.VdcBLLException(result.getVdsError().getCode(), result.getExceptionString()); } else { exp = new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.ENGINE, result.getExceptionString()); } throw exp; } return result; }

@org.junit.Test public void testGetLunsThatBreakDiscardFunctionalityFullDiscardFunctionalityBreaks() { createVmDiskOnSd(false, false); createVmDiskOnSd(true, true); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardSupport = createLunWithDiscardFunctionality(0L, false); org.ovirt.engine.core.common.businessentities.storage.LUNs lunThatBreaksDiscardZeroesTheDataSupport = createLunWithDiscardFunctionality(1024L, false); assertGetLunsThatBreakDiscardFunctionalityContainsExpectedLuns(java.util.Arrays.asList(createLunWithDiscardFunctionality(1024L, true), lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport), java.util.Arrays.asList(lunThatBreaksDiscardSupport, lunThatBreaksDiscardZeroesTheDataSupport)); }
@java.lang.Override public java.lang.String toString() { return java.lang.String.format("%s, description = %s", super.toString(), getDescription()); }

public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc destroyStoragePool(java.lang.String spUUID, int hostSpmId, java.lang.String SCSIKey) { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = irsServer.destroyStoragePool(spUUID, hostSpmId, SCSIKey); org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(xmlRpcReturnValue); return wrapper; }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__ACTIVATE); super.setActionMessageParameters(); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((getParameters().getAction()) == null) { return failCanDoAction(VdcBllMessages.WATCHDOG_ACTION_REQUIRED); } if ((getParameters().getModel()) == null) { return failCanDoAction(VdcBllMessages.WATCHDOG_MODEL_REQUIRED); } org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = runInternalQuery(VdcQueryType.GetWatchdog, new org.ovirt.engine.core.common.queries.IdQueryParameters(getParameters().getId())); java.util.Collection<org.ovirt.engine.core.common.businessentities.VmWatchdog> watchdogs = returnValue.getReturnValue(); if (!(watchdogs.isEmpty())) { return failCanDoAction(VdcBllMessages.WATCHDOG_ALREADY_EXISTS); } if ((!(getParameters().isClusterIndependent())) && (!(validate(validateModelCompatibleWithOs())))) { return false; } return true; }

@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.OpenStackVolumeProvider provider) { validateParameters(provider, "name", "dataCenter.name|id"); org.ovirt.engine.core.common.businessentities.StoragePool storagePool = getStoragePool(provider.getDataCenter()); provider.setDataCenter(org.ovirt.engine.api.restapi.types.DataCenterMapper.map(storagePool, null)); return performCreate(VdcActionType.AddProvider, new org.ovirt.engine.core.common.action.ProviderParameters(map(provider)), new org.ovirt.engine.api.restapi.resource.openstack.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetProviderById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
public static void GetAttachedTagsToUser(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.SetAttachedTagsConverter(aQuery); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetTagsByUserId, new org.ovirt.engine.core.common.queries.GetTagsByUserIdParameters(id.toString()), aQuery); }
@java.lang.Override public java.lang.String toString() { return org.ovirt.engine.core.utils.ObjectDescriptor.toString(this); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__QUOTA); }


@java.lang.Override @org.junit.Test public void testListCrashClientLocale() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectations(null); locales.add(org.ovirt.engine.api.restapi.resource.CLIENT_LOCALE); java.lang.Throwable t = new java.lang.RuntimeException(FAILURE); setUpEntityQueryExpectations(VdcQueryType.GetAllImagesList, org.ovirt.engine.core.common.queries.GetAllIsoImagesListParameters.class, new java.lang.String[]{ "StorageDomainId" }, new java.lang.Object[]{ GUIDS[0] }, setUpFiles(), AbstractBackendCollectionResourceTest.FAILURE); collection.setUriInfo(uriInfo); setupGetStorageDomainExpectations(StorageDomainType.ISO); control.replay(); try { getCollection(); fail("expected WebApplicationException"); } catch (javax.ws.rs.WebApplicationException wae) { verifyFault(wae, org.ovirt.engine.api.restapi.resource.BACKEND_FAILED_CLIENT_LOCALE, t); } finally { locales.clear(); } }
static void LogoffAsync(org.ovirt.engine.core.common.users.VdcUser vdcUser, final org.ovirt.engine.ui.frontend.AsyncQuery callback, final org.ovirt.engine.ui.frontend.gwtservices.GenericApiGWTServiceAsync service) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Frontend: Invoking async Logoff."); service.logOff(vdcUser, new com.google.gwt.user.client.rpc.AsyncCallback<org.ovirt.engine.core.common.action.VdcReturnValueBase>() { @java.lang.Override public void onSuccess(final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Succesful returned result from Logoff."); callback.getDel().onSuccess(callback.getModel(), result); if ((org.ovirt.engine.ui.frontend.Frontend.getLoginHandler()) != null) { org.ovirt.engine.ui.frontend.Frontend.getLoginHandler().onLogout(); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { if (org.ovirt.engine.ui.frontend.Frontend.ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ("Failed to execute Logoff: " + caught), caught); org.ovirt.engine.ui.frontend.Frontend.getEventsHandler().runQueryFailed(null); org.ovirt.engine.ui.frontend.Frontend.failureEventHandler(caught); callback.getDel().onSuccess(callback.getModel(), null); } }); }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNetworkIdentification(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { org.ovirt.engine.core.compat.Guid networkId = attachment.getNetworkId(); java.lang.String networkName = attachment.getNetworkName(); org.ovirt.engine.core.compat.Guid violatingEntityId = attachment.getId(); return validateCoherentIdentification((violatingEntityId == null ? null : violatingEntityId.toString()), networkId, networkName, EngineMessage.NETWORK_ATTACHMENT_REFERENCES_NETWORK_INCOHERENTLY, networkBusinessEntityMap); }


private void showBrickAdvancedDetails() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (getEntity())); final org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brickEntity = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity) (getSelectedItem())); final org.ovirt.engine.ui.uicommonweb.models.gluster.BrickAdvancedDetailsModel brickModel = new org.ovirt.engine.ui.uicommonweb.models.gluster.BrickAdvancedDetailsModel(); setWindow(brickModel); brickModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().advancedDetailsBrickTitle()); brickModel.setHashName("brick_advanced"); brickModel.StartProgress(null); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetGlusterVolumeBrickDetails(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object result) { brickModel.StopProgress(); org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (result)); if ((returnValue == null) || (!(returnValue.getSucceeded()))) { brickModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().errorInFetchingBrickAdvancedDetails()); return; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails advDetails = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails) (returnValue.getReturnValue())); brickModel.getBrick().setEntity(brickEntity.getQualifiedName()); if (((advDetails != null) && ((advDetails.getBrickDetails()) != null)) && ((advDetails.getBrickDetails().size()) == 1)) { org.ovirt.engine.core.common.businessentities.gluster.BrickDetails brickDetails = advDetails.getBrickDetails().get(0); brickModel.getBrickProperties().setProperties(brickDetails.getBrickProperties()); java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> clients = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterClientInfo client : brickDetails.getClients()) { clients.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(client)); } brickModel.getClients().setItems(clients); brickModel.getMemoryStatistics().updateMemoryStatistics(brickDetails.getMemoryStatus().getMallInfo()); java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> memoryPools = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); for (org.ovirt.engine.core.common.businessentities.gluster.Mempool mempool : brickDetails.getMemoryStatus().getMemPools()) { memoryPools.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(mempool)); } brickModel.getMemoryPools().setItems(memoryPools); } } }, true), volumeEntity.getClusterId(), volumeEntity.getName(), brickEntity.getQualifiedName()); org.ovirt.engine.ui.uicommonweb.UICommand command = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); command.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()); command.setIsDefault(true); brickModel.getCommands().add(command); }
public java.lang.String getName() { return name; }
public void setClientPolicy(org.ovirt.vdsm.jsonrpc.client.internal.ClientPolicy policy) { this.policy = policy; this.validate(); if (isOpen()) { disconnect("Policy reset"); } }
private void verifyServiceOnServer1(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService service) { assertEquals(org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.SERVICE1_ID, service.getServiceId().toString()); assertEquals(org.ovirt.engine.core.dao.gluster.GlusterServerServiceDaoTest.PID_1, service.getPid()); assertEquals(GlusterServiceStatus.RUNNING, service.getStatus()); }

protected void syncSearch(org.ovirt.engine.core.common.queries.VdcQueryType vdcQueryType, final java.util.Comparator<? super T> comparator) { if ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity()) == null) { return; } org.ovirt.engine.core.common.queries.IdQueryParameters parameters = new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getEntity().getId()); parameters.setRefresh(org.ovirt.engine.ui.uicommonweb.models.storage.StorageRegisterEntityListModel.getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, parameters, new org.ovirt.engine.ui.uicommonweb.models.storage.SetSortedItemsAsyncQuery(comparator)); }
private void registerModelPropertyChangeListener() { model.getPropertyChangedEvent().addListener(new org.ovirt.engine.core.compat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.core.compat.Event ev, java.lang.Object sender, org.ovirt.engine.core.compat.EventArgs args) { boolean isSelected = model.getIsSelected(); org.ovirt.engine.ui.common.widget.ModelBoundCheckBox.super.setValue(isSelected, true); } }); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.utils.PairQueryable<org.ovirt.engine.core.common.businessentities.VDSGroup, org.ovirt.engine.core.common.businessentities.network.NetworkCluster> object) { java.util.Map<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String> imagesToText = new java.util.LinkedHashMap<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String>(); if ((object.getSecond()) != null) { if (object.getSecond().isDisplay()) { imagesToText.put(displayImage, constants.displayItemInfo()); } if (object.getSecond().isMigration()) { imagesToText.put(migrationImage, constants.migrationItemInfo()); } } return org.ovirt.engine.ui.webadmin.widget.table.column.NetworkRoleColumnHelper.getTooltip(imagesToText); }
public void setCanDoActionMessages(java.util.ArrayList<java.lang.String> value) { canDoActionMessages = value; }
private void prepareMocks(org.ovirt.engine.core.bll.gluster.AddBricksToGlusterVolumeCommand command) { doReturn(volumeDao).when(command).getGlusterVolumeDao(); doReturn(vdsStaticDao).when(command).getVdsStaticDao(); doReturn(brickDao).when(command).getGlusterBrickDao(); doReturn(validator).when(command).createVolumeValidator(); doReturn(networkDao).when(command).getNetworkDao(); doReturn(interfaceDao).when(command).getInterfaceDao(); doReturn(getVds(VDSStatus.Up)).when(command).getUpServer(); doReturn(getSingleBrickVolume(volumeId1)).when(volumeDao).getById(volumeId1); doReturn(getMultiBrickVolume(volumeId2)).when(volumeDao).getById(volumeId2); doReturn(getBrick(volumeId1)).when(brickDao).getBrickByServerIdAndDirectory(serverId, org.ovirt.engine.core.bll.gluster.AddBricksToGlusterVolumeCommandTest.BRICK_DIRECTORY); doReturn(null).when(volumeDao).getById(null); doReturn(getVdsStatic()).when(vdsStaticDao).get(serverId); doReturn(getVDsGroup()).when(command).getVdsGroup(); doReturn(ValidationResult.VALID).when(validator).isForceCreateVolumeAllowed(Version.v3_1, false); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_ADD_BRICK_FORCE_NOT_SUPPORTED)).when(validator).isForceCreateVolumeAllowed(Version.v3_1, true); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValueObj) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValueObj)); java.lang.Object returnValue2 = returnValue.getReturnValue(); this.existingNetworkAttachments = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>) (returnValue2)); queryVfsConfig(); }

private org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage cinderDisk) { org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters createParams = new org.ovirt.engine.core.common.action.CreateCinderSnapshotParameters(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getDiskDao().get(cinderDisk.getId()))).getImageId()); createParams.setVmSnapshotId(newActiveSnapshotId); createParams.setParentHasTasks(((!(cachedImagesDisks.isEmpty())) || (getMemoryImageBuilder().isCreateTasks()))); createParams.setStorageDomainId(cinderDisk.getStorageIds().get(0)); createParams.setDescription(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().getDescription()); return withRootCommandInfo(createParams); }


@org.junit.Test public void canSetNumaConfigurationWithVmFromDb() { final org.ovirt.engine.core.bll.numa.vm.SetVmNumaNodesCommand command = mockedCommandWithVmFromDb(); command.executeCommand(); verify(vmNumaNodeDao).massRemoveNumaNodeByNumaNodeId(eq(existingNumaNodeIds)); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class)); }

@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc migrateCancel(java.lang.String vmId) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.migrateCancel").withParameter("vmID", vmId).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__TYPE__STORAGE__DOMAIN); addCanDoActionMessage(EngineMessage.VAR__ACTION__DETACH); }


@java.lang.Override protected void addVmToDb() { super.addVmToDb(); if ((org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getOrigin()) == (org.ovirt.engine.core.common.businessentities.OriginType.KVM)) { importUtils.updateGraphicsDevices(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getStoragePool().getCompatibilityVersion()); if (org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getParameters().isImportAsNewEntity()) { for (org.ovirt.engine.core.common.businessentities.VmDevice device : org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values()) { device.getId().setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVmId()); } } vmDeviceDao.saveAll(org.ovirt.engine.core.bll.exportimport.ImportVmFromExternalProviderCommand.getVm().getStaticData().getManagedDeviceMap().values()); } }
private boolean canRemoveVmWithDetachDisks() { if (!(Guid.Empty.equals(org.ovirt.engine.core.bll.RemoveVmCommand.getVm().getVmtGuid()))) { return failCanDoAction(VdcBllMessages.VM_CANNOT_REMOVE_WITH_DETACH_DISKS_BASED_ON_TEMPLATE); } for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : org.ovirt.engine.core.bll.RemoveVmCommand.getVm().getDiskList()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImageList = org.ovirt.engine.core.bll.RemoveVmCommand.getDiskImageDao().getAllSnapshotsForImageGroup(disk.getId()); if ((diskImageList.size()) > 1) { return failCanDoAction(VdcBllMessages.VM_CANNOT_REMOVE_WITH_DETACH_DISKS_SNAPSHOTS_EXIST); } } return true; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disks = ((java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> diskList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(); diskList.addAll(disks); java.util.Collections.sort(diskList, new org.ovirt.engine.ui.uicommonweb.Linq.DiskByAliasComparer()); org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableListModel = ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (model)); searchableListModel.setItems(diskList); }
protected void synchronizeNics(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.context.CompensationContext compensationContext, org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(getMacPool(vm.getStoragePoolId())); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(vm.getVdsGroupId(), vm.getStoragePoolId(), vm.getVdsGroupCompatibilityVersion(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_SNAPSHOT_VM_INVALID_INTERFACES); vmInterfaceManager.removeAll(vm.getId()); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmInterface : vm.getInterfaces()) { vmInterface.setVmId(vm.getId()); if ((vmInterface.getId()) == null) { vmInterface.setId(org.ovirt.engine.core.compat.Guid.newGuid()); } vnicProfileHelper.updateNicWithVnicProfileForUser(vmInterface, user); vmInterfaceManager.add(vmInterface, compensationContext, true, vm.getOs(), vm.getVdsGroupCompatibilityVersion()); } vnicProfileHelper.auditInvalidInterfaces(vm.getName()); }

private void updateIscsiBondListAvailability(org.ovirt.engine.core.common.businessentities.StoragePool storagePool) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getAllDataCenterStorageConnections(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { boolean hasIscsiStorage = false; java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>) (returnValue)); for (org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : connections) { if ((connection.getstorage_type()) == (org.ovirt.engine.core.common.businessentities.StorageType.ISCSI)) { hasIscsiStorage = true; break; } } iscsiBondListModel.setIsAvailable(hasIscsiStorage); } }), storagePool.getId()); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.network getByName(java.lang.String name) { java.util.Map<java.lang.String, java.lang.Object> dbResults = dialect.createJdbcCallForQuery(jdbcTemplate).withProcedureName("GetnetworkByName").returningResultSet("RETURN_VALUE", org.ovirt.engine.core.dao.NetworkDAODbFacadeImpl.NetworkRowMapper.instance).execute(getCustomMapSqlParameterSource().addValue("networkName", name)); return ((org.ovirt.engine.core.common.businessentities.network) (org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.asSingleResult(((java.util.List<?>) (dbResults.get("RETURN_VALUE")))))); }
@org.junit.Test public void testCopyBySdName() throws java.lang.Exception { setUpEntityQueryExpectations(1); setUpGetEntityExpectations(("Storage: name=" + (NAMES[2])), SearchType.StorageDomain, getStorageDomainEntity(0)); setUriInfo(setUpActionExpectations(VdcActionType.MoveOrCopyDisk, org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters.class, new java.lang.String[]{ "ImageId", "SourceDomainId", "StorageDomainId", "Operation" }, new java.lang.Object[]{ GUIDS[1], org.ovirt.engine.core.compat.Guid.Empty, GUIDS[3], org.ovirt.engine.core.common.businessentities.ImageOperation.Copy })); verifyActionResponse(resource.copy(setUpCopyParams(true))); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__UPDATE); addCanDoActionMessage(EngineMessage.VAR__TYPE__VM_DISK); }
public org.ovirt.engine.core.common.action.VdcReturnValueBase canDoActionOnly() { setActionMessageParameters(); getReturnValue().setCanDoAction(internalCanDoAction()); java.lang.String tempVar = getDescription(); getReturnValue().setDescription((tempVar != null ? tempVar : getReturnValue().getDescription())); return _returnValue; }

@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { populateDomains(((java.util.List<java.lang.String>) (result))); }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__CREATE); super.setActionMessageParameters(); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.LUNs> luns = getLunsForVgId(getVgId()); org.ovirt.engine.core.common.businessentities.StorageType storageType = getStorageType(luns); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.LUNs> lunsFromDeviceMap = getLunsFromDeviceMap(storageType); for (org.ovirt.engine.core.common.businessentities.LUNs lun : luns) { for (org.ovirt.engine.core.common.businessentities.LUN_storage_server_connection_map map : getLunConnections(lun.getLUN_id())) { addConnection(lun, getConnection(map.getstorage_server_connection())); } org.ovirt.engine.core.common.businessentities.LUNs lunFromDeviceList = lunsFromDeviceMap.get(lun.getLUN_id()); if (lunFromDeviceList != null) { lun.setPathsDictionary(lunFromDeviceList.getPathsDictionary()); } } setReturnValue(luns); }

@org.junit.Test public void checkIfDisksExistFailedVDSMReturnError() { org.ovirt.engine.core.common.action.MoveOrCopyParameters params = createParameters(true); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = createGetImageListReturnValue(false, java.util.Collections.<org.ovirt.engine.core.compat.Guid>emptyList()); org.ovirt.engine.core.bll.storage.export.MoveOrCopyTemplateCommand cmd = createCommand(params, returnValue); assertFalse(cmd.checkIfDisksExist(createImageList())); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ERROR_GET_IMAGE_LIST.name())); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains("$sdName SD")); verify(cmd, times(1)).runVdsCommand(any(org.ovirt.engine.core.common.vdscommands.VDSCommandType.class), any(org.ovirt.engine.core.common.vdscommands.GetImagesListVDSCommandParameters.class)); }
protected boolean isStorageDomainTypeCorrect(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { if ((storageDomain.isLocal()) != (org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool().isLocal())) { addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_ATTACH_STORAGE_DOMAIN_STORAGE_TYPE_NOT_MATCH); return false; } return true; }


@org.junit.Test public void hostProviderDoesNotExist() { when(host.getHostProviderId()).thenReturn(org.ovirt.engine.core.compat.Guid.newGuid()); when(providerDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(null); when(dbFacade.getProviderDao()).thenReturn(providerDao); validator = new org.ovirt.engine.core.bll.validator.UpdateHostValidator(dbFacade, oldHost, host, false); assertThat(validator.hostProviderExists(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST)); }


@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((getGeoRepSession()) == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GEOREP_SESSION_INVALID); return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = org.ovirt.engine.core.bll.gluster.GeoRepSessionCommandBase.getGlusterVolume(); if (!(volume.isOnline())) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_DOWN); addCanDoActionMessageVariable("volumeName", volume.getName()); return false; } return true; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate get(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getCallsHandler().executeRead("GetVmTemplateByVmtGuid", org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateRowMapper.instance, createIdParameterMapper(id).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }
@org.junit.Test public void testAddWithStorageDomain() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUriInfo(setUpBasicUriExpectations()); setUpGetPayloadExpectations(1, 2); setUpGetBallooningExpectations(1, 2); setUpGetConsoleExpectations(new int[]{ 1, 2 }); setUpGetVmOvfExpectations(new int[]{ 2 }); setUpGetVirtioScsiExpectations(new int[]{ 2 }); setUpGetRngDeviceExpectations(new int[]{ 2 }); setUpGetCertuficateExpectations(1, 2); setUpEntityQueryExpectations(VdcQueryType.GetVmTemplate, org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[1] }, getTemplateEntity(0)); setUpEntityQueryExpectations(VdcQueryType.GetVdsGroupByVdsGroupId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[2] }, getVdsGroupEntity()); setUpCreationExpectations(VdcActionType.AddVm, org.ovirt.engine.core.common.action.VmManagementParametersBase.class, new java.lang.String[]{ "StorageDomainId" }, new java.lang.Object[]{ GUIDS[1] }, true, true, GUIDS[2], VdcQueryType.GetVmByVmId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[2] }, getEntity(2)); org.ovirt.engine.api.model.VM model = createModel(null); addStorageDomainToModel(model); javax.ws.rs.core.Response response = collection.add(model); assertEquals(201, response.getStatus()); assertTrue(((response.getEntity()) instanceof org.ovirt.engine.api.model.VM)); verifyModel(((org.ovirt.engine.api.model.VM) (response.getEntity())), 2); }

@java.lang.SuppressWarnings("unused") public boolean isDisplayNetworkAffected(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2) { return false; }
public static void GetFloppyImageList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid storagePoolId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoFileMetaData> repoList = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoFileMetaData>) (source)); java.util.ArrayList<java.lang.String> fileNameList = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.RepoFileMetaData RepoFileMetaData : repoList) { fileNameList.add(RepoFileMetaData.getRepoImageId()); } java.util.Collections.sort(fileNameList, new org.ovirt.engine.ui.uicommonweb.Linq.CaseInsensitiveComparer()); return fileNameList; } return new java.util.ArrayList<java.lang.String>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetImagesListByStoragePoolId, new org.ovirt.engine.core.common.queries.GetImagesListByStoragePoolIdParameters(storagePoolId, org.ovirt.engine.core.common.businessentities.ImageFileType.Floppy), aQuery); }

@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getAllSnapshotsForVmSnapshot(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_snapshot_id", id); return getCallsHandler().executeReadList("GetSnapshotsByVmSnapshotId", org.ovirt.engine.core.dao.DiskImageDAODbFacadeImpl.DiskImageRowMapper.instance, parameterSource); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.AdUser.class, to = org.ovirt.engine.api.model.User.class) public static org.ovirt.engine.api.model.User map(org.ovirt.engine.core.common.businessentities.AdUser entity, org.ovirt.engine.api.model.User template) { org.ovirt.engine.api.model.User model = (template != null) ? template : new org.ovirt.engine.api.model.User(); model.setName(entity.getName()); model.setUserName(entity.getUserName()); model.setId(entity.getUserId().toString()); model.setLastName(entity.getSurName()); model.setEmail(entity.getEmail()); model.setDepartment(entity.getDepartment()); if ((entity.getGroups()) != null) { model.setGroups(new org.ovirt.engine.api.model.Groups()); for (org.ovirt.engine.core.common.businessentities.ad_groups adgroup : entity.getGroups().values()) { org.ovirt.engine.api.model.Group group = new org.ovirt.engine.api.model.Group(); group.setName(adgroup.getname()); model.getGroups().getGroups().add(group); } } if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(entity.getDomainControler()))) { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain(); dom.setName(entity.getDomainControler()); dom.setId(new org.ovirt.engine.core.compat.NGuid(entity.getDomainControler().getBytes(), true).toString()); model.setDomain(dom); } return model; }

private static void setGateway(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.VDS host, org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol bootProtocol, org.ovirt.engine.core.vdsbroker.vdsbroker.IpInfoFetcher ipInfoFetcher, java.util.function.Consumer<java.lang.String> gatewaySetter) { if (bootProtocol == (org.ovirt.engine.core.common.businessentities.network.Ipv4BootProtocol.STATIC_IP)) { java.lang.String gateway = ipInfoFetcher.fetchGateway(); if (org.apache.commons.lang.StringUtils.isNotEmpty(gateway)) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGatewayIfNecessary(iface, host, gateway, gatewaySetter); } } }

protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool() { return poolPerDc.poolForDataCenter(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getStoragePoolId()); }
public static void GetHostById(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid id) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVdsByVdsId, new org.ovirt.engine.core.common.queries.GetVdsByVdsIdParameters(id), aQuery); }

@org.junit.Test public void testAliasGenerationByAddVmImagesAndSnapshotsWithoutCollapse() { org.ovirt.engine.core.common.action.ImportVmParameters params = createParameters(); params.setCopyCollapse(false); org.ovirt.engine.core.bll.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> cmd = spy(new org.ovirt.engine.core.bll.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters>(params) { @java.lang.Override protected void initUser() { } @java.lang.Override public org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup() { return null; } }); cmd.postConstruct(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : params.getVm().getImages()) { doNothing().when(cmd).saveImage(image); doNothing().when(cmd).saveSnapshotIfNotExists(any(org.ovirt.engine.core.compat.Guid.class), eq(image)); doNothing().when(cmd).saveDiskImageDynamic(image); } org.ovirt.engine.core.common.businessentities.storage.DiskImage activeDisk = params.getVm().getImages().get(1); doNothing().when(cmd).updateImage(activeDisk); doNothing().when(cmd).saveBaseDisk(activeDisk); doNothing().when(cmd).updateActiveSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); cmd.addVmImagesAndSnapshots(); assertEquals("Disk alias not generated", "testVm_Disk1", activeDisk.getDiskAlias()); }
@java.lang.Override protected void addCustomModelsDetailModelList(org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list) { list.add(2, new org.ovirt.engine.ui.uicommonweb.models.templates.UserPortalTemplateDiskListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.templates.UserPortalTemplateEventListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.configure.UserPortalPermissionListModel()); }
public org.ovirt.engine.core.bll.ValidationResult vmNotDuringSnapshot(org.ovirt.engine.core.compat.Guid vmId) { if (getSnapshotDao().exists(vmId, SnapshotStatus.LOCKED)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT); } return new org.ovirt.engine.core.bll.ValidationResult(); }



@org.ovirt.engine.ui.uicompat.DefaultStringValue("No Templates exist") java.lang.String templateNoExistsMsg();


protected boolean isNicSupportedForPlugUnPlug() { if (osRepository.hasNicHotplugSupport(org.ovirt.engine.core.bll.VmCommand.getVm().getOs(), org.ovirt.engine.core.bll.VmCommand.getVm().getVdsGroupCompatibilityVersion())) { return true; } return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.ResetGlusterVolumeOptions, new org.ovirt.engine.core.common.vdscommands.gluster.ResetGlusterVolumeOptionsVDSParameters(upServer.getId(), getGlusterVolumeName(), getParameters().getVolumeOption(), getParameters().isForceAction())); setSucceeded(returnValue.getSucceeded()); if (getSucceeded()) { if (((getParameters().getVolumeOption()) != null) && (!(getParameters().getVolumeOption().isEmpty()))) { removeOptionInDb(getGlusterVolume().getOption(getParameters().getVolumeOption())); } else { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity option : getGlusterVolume().getOptions()) { removeOptionInDb(option); } } } else { handleVdsError(AuditLogType.GLUSTER_VOLUME_OPTIONS_RESET_FAILED, returnValue.getVdsError().getMessage()); return; } }
@java.lang.Override protected boolean canDoAction() { if (!(org.ovirt.engine.core.bll.scheduling.SchedulingManager.getInstance().getPolicyUnitsMap().containsKey(getPolicyUnitId()))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_POLICY_UNKNOWN_POLICY_UNIT); } java.util.List<java.lang.String> clusterPoliciesNames = org.ovirt.engine.core.bll.scheduling.SchedulingManager.getInstance().getClusterPoliciesNamesByPolicyUnitId(getPolicyUnitId()); if ((clusterPoliciesNames != null) && ((clusterPoliciesNames.size()) > 0)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_POLICY_UNIT_ATTACHED_TO_CLUSTER_POLICY, java.lang.String.format("$cpNames %1$s", org.apache.commons.lang.StringUtils.join(clusterPoliciesNames, ','))); } return true; }
private void Network_SelectedItemChanged(org.ovirt.engine.core.compat.EventArgs e) { UpdateCanSpecify(); org.ovirt.engine.core.common.businessentities.network network = ((org.ovirt.engine.core.common.businessentities.network) (getNetwork().getSelectedItem())); setBootProtocolsAvailable(((network != null) && (org.ovirt.engine.core.compat.StringHelper.stringsEqual(network.getname(), "None")) ? false : true)); if ((getNetworks()) != null) { for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface item : getNetworks()) { if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(item.getNetworkName(), network.getname())) { getAddress().setEntity((org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(item.getAddress()) ? null : item.getAddress())); getSubnet().setEntity((org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(item.getSubnet()) ? null : item.getSubnet())); setBootProtocol(((!(getNoneBootProtocolAvailable())) && ((item.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.NetworkBootProtocol.None)) ? org.ovirt.engine.core.common.businessentities.NetworkBootProtocol.Dhcp : item.getBootProtocol())); break; } } } }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepConfigListXmlRpc glusterVolumeGeoRepConfigList(java.lang.String volumeName, java.lang.String slaveHost, java.lang.String slaveVolumeName) { try { return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepConfigListXmlRpc(vdsServer.glusterVolumeGeoRepConfigList(volumeName, slaveHost, slaveVolumeName)); } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
@org.junit.Test public void testExecuteCommandFailsWithServerIdForStart() { cmd = spy(new org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand(new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters(org.ovirt.engine.core.compat.Guid.newGuid(), null, org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER_SWIFT, org.ovirt.engine.core.common.constants.gluster.GlusterConstants.MANAGE_GLUSTER_SERVICE_ACTION_TYPE_START))); setUpMockUpForStart(); mockBackend(false, VdcBllErrors.GlusterServicesActionFailed, GlusterServiceStatus.STOPPED); cmd.executeCommand(); verify(serverServiceDao, never()).updateByServerIdAndServiceType(any(org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService.class)); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_SERVICE_START_FAILED); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.aaa.AuthenticationProfile> profiles = org.ovirt.engine.core.aaa.AuthenticationProfileRepository.getInstance().getProfiles(); java.util.List<java.lang.String> names = new java.util.ArrayList(profiles.size()); for (org.ovirt.engine.core.aaa.AuthenticationProfile profile : profiles) { names.add(profile.getName()); } org.ovirt.engine.core.bll.GetAAAProfileListQuery.getQueryReturnValue().setReturnValue(names); }
@org.junit.Test public void testAllDomainsHaveSpaceForNewDisksFail() { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList = generateDisksList(org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidatorTest.NUM_DISKS); org.ovirt.engine.core.bll.validator.StorageDomainValidator storageDomainValidator = mock(org.ovirt.engine.core.bll.validator.StorageDomainValidator.class); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(storageDomainValidator).hasSpaceForNewDisks(anyList()); org.ovirt.engine.core.bll.ValidationResult result = validator.allDomainsHaveSpaceForNewDisks(disksList); assertFalse(result.isValid()); assertEquals("Wrong validation error", VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN, result.getMessage()); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Name must contain alphanumeric characters or '_' (maximum length 15 characters).") java.lang.String nameMustContainAlphanumericMaxLenMsg();

private void updateActionAvailability() { java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> tempVar = getSelectedItems(); java.util.Collection<org.ovirt.engine.core.common.businessentities.Provider> selectedItems = (tempVar != null) ? tempVar : new java.util.ArrayList(); getEditCommand().setIsExecutionAllowed(((selectedItems.size()) == 1)); getRemoveCommand().setIsExecutionAllowed(((selectedItems.size()) > 0)); getAddCommand().setIsAvailable(true); getRemoveCommand().setIsAvailable(true); }


private void addBondOptionIfMissing(java.lang.String candidateOption, boolean doesBondHaveVmNetworkAttached) { java.lang.String bondMode = org.ovirt.engine.core.common.businessentities.network.BondMode.getBondMode(candidateOption); if (doesBondHaveVmNetworkAttached && (!(org.ovirt.engine.core.common.businessentities.network.BondMode.isBondModeValidForVmNetwork(bondMode)))) { return; } if (!(pairForBondOption.containsKey(candidateOption))) { org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> entityModel = new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>(); entityModel.setEntity(candidateOption); java.util.Map.Entry<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>> newPair = new org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>>("custom", entityModel); bondOptions.add(newPair); pairForBondOption.put(candidateOption, newPair); } }
public org.ovirt.engine.core.bll.ValidationResult nameNotEmpty() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_NAME_MAY_NOT_BE_EMPTY).when(org.apache.commons.lang.StringUtils.isEmpty(host.getName())); }

public void PostUpdateDefaultTimeZone() { updateTimeZone(cachedDefaultTimeZoneKey); }
public void onRestore() { importModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel) (getWindow())); if ((importModel.getProgress()) != null) { return; } if (!(importModel.validate())) { return; } cloneObjectMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.lang.Object>(); objectsToClone = new java.util.ArrayList<java.lang.Object>(); for (java.lang.Object object : ((java.util.ArrayList<java.lang.Object>) (importModel.getItems()))) { org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData item = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData) (object)); if (((java.lang.Boolean) (item.getClone().getEntity()))) { objectsToClone.add(object); } } executeImportClone(); }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.validator.IscsiBondValidator validator = new org.ovirt.engine.core.bll.validator.IscsiBondValidator(); if (!(validate(validator.isIscsiBondExist(getExistingIscsiBond())))) { return false; } if ((isNameChanged()) && (!(validate(validator.iscsiBondWithTheSameNameExistInDataCenter(getIscsiBond()))))) { return false; } return true; }
public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> score(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters) { org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl.log.error("Policy unit '{}' function is not implemented", getPolicyUnit().getName()); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> pairs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { pairs.add(new org.ovirt.engine.core.common.utils.Pair(vds.getId(), 1)); } return pairs; }
@org.junit.Test public void checkNoHost() { org.ovirt.engine.core.common.businessentities.StorageServerConnections newNFSConnection = createNFSConnection("multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0); parameters.setStorageServerConnection(newNFSConnection); parameters.setVdsId(null); parameters.setStorageServerConnection(newNFSConnection); when(storageConnDao.get(newNFSConnection.getid())).thenReturn(oldNFSConnection); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); }
void save(org.ovirt.engine.core.common.businessentities.bookmarks bookmark);
@java.lang.Override public void postDataCenterWithClusterSelectedItemChanged() { updateDefaultHost(); updateCustomPropertySheet(); updateNumOfSockets(); updateQuotaByCluster(vm.getQuotaId(), vm.getQuotaName()); updateCpuPinningVisibility(); updateMemoryBalloon(); updateCpuSharesAvailability(); updateVirtioScsiAvailability(); updateOSValues(); instanceTypeManager.updateAll(); }

protected boolean validateDestStorage() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain()); if ((!(validate(validator.isDomainExistAndActive()))) || (!(validate(validator.domainIsValidDestination())))) { return false; } boolean moveOrCopy = (isMoveOperation()) || (isCopyOperation()); if ((moveOrCopy && (getImage().isShareable())) && ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.GLUSTERFS))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_CANT_MOVE_SHAREABLE_DISK_TO_GLUSTERFS, java.lang.String.format("$%1$s %2$s", "diskAlias", getImage().getDiskAlias())); } return true; }
public static void populateCpuUtilizationHosts(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> resourceUsage = dao.getCpuUtilizationHosts(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : resourceUsage) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed((((usage.getUsed()) * (usage.getTotal())) / 100)); entity.setTotal(usage.getTotal()); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addResource(entity); } }
@java.lang.Override public void setInputFieldsEnabled(boolean enabled) { nameEditor.setEnabled(enabled); descriptionEditor.setEnabled(enabled); isVmNetworkEditor.setEnabled(enabled); vlanTagging.setEnabled(enabled); vlanTag.setEnabled(enabled); hasMtuEditor.setEnabled(enabled); mtuEditor.setEnabled(enabled); }

@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = new org.ovirt.engine.core.bll.validator.VnicProfileValidator(vmDao, org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getVnicProfile()); return (((((((validate(validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getCanDoActionMessages()))) && (validate(validator.passthroughProfileContainsSupportedProperties())); }



protected org.ovirt.engine.core.common.businessentities.ad_groups getAdGroupWithDomain(int index) { org.ovirt.engine.core.common.businessentities.ad_groups adGroup = new org.ovirt.engine.core.common.businessentities.ad_groups(); adGroup.setid(GUIDS[index]); adGroup.setname((((DOMAIN) + "/") + (NAMES[index]))); adGroup.setdomain(org.ovirt.engine.api.restapi.resource.DOMAIN); return adGroup; }
public org.ovirt.engine.api.model.Disk lookupEntity(org.ovirt.engine.core.compat.Guid guid) throws org.ovirt.engine.api.restapi.resource.BackendFailureException { return collection.lookupEntity(guid); }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("No active source Storage Domain is available") java.lang.String noActiveSourceStorageDomainAvailableMsg();
public void selectHost() { final java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Cluster> clusters = new java.util.ArrayList<>(); clusters.add(getEntity()); final org.ovirt.engine.ui.uicommonweb.models.hosts.MoveHost model = new org.ovirt.engine.ui.uicommonweb.models.hosts.MoveHost(); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().selectHostTitle()); model.setHelpTag(HelpTag.select_host); model.setHashName("select_host"); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); boolean isMultiHostDC = dataCenter.isLocal(); if (isMultiHostDC) { model.setMultiSelection(false); } setWindow(model); model.getCluster().setItems(clusters); model.getCluster().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(clusters)); model.getCluster().setIsAvailable(false); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSelectHost", org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel.this); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGuideModel.this); model.getCommands().add(tempVar2); } }), getEntity().getStoragePoolId()); }
public org.ovirt.engine.api.resource.ActionResource getActionResource(java.lang.String action, java.lang.String oid) { return new org.ovirt.engine.api.resource.ActionResource() { @java.lang.Override public javax.ws.rs.core.Response get() { java.net.URI uri = java.net.URI.create(org.ovirt.engine.api.restapi.util.LinkHelper.addLinks(newModel(id)).getHref()); javax.ws.rs.core.Response.Status status = Response.Status.MOVED_PERMANENTLY; return javax.ws.rs.core.Response.status(status).location(uri).build(); } @java.lang.Override public org.ovirt.engine.api.model.Action getAction() { return null; } }; }
@java.lang.Override protected boolean canDoAction() { if ((getNic()) == null) { return failCanDoAction(EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST); } if ((!(org.ovirt.engine.core.utils.NetworkUtils.isLabeled(getNic()))) || (!(getNic().getLabels().contains(getLabel())))) { return failCanDoAction(EngineMessage.INTERFACE_NOT_LABELED); } return true; }

@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.NetworkQoS object) { return (object.getInboundPeak()) == null ? constants.UnlimitedNetworkQoS() : object.getInboundPeak().toString(); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Cluster cluster) { validateParameters(cluster, "name"); validateEnums(org.ovirt.engine.api.model.Cluster.class, cluster); org.ovirt.engine.api.model.DataCenter dataCenter = new org.ovirt.engine.api.model.DataCenter(); dataCenter.setId(dataCenterId.toString()); cluster.setDataCenter(dataCenter); org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.api.restapi.resource.BackendDataCenterResource.getStoragePool(cluster, this); org.ovirt.engine.core.common.businessentities.VDSGroup entity = map(cluster, map(pool)); return performCreate(VdcActionType.AddVdsGroup, new org.ovirt.engine.core.common.action.VdsGroupOperationParameters(entity), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetVdsGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.compat.Guid vdsgroupid = org.ovirt.engine.core.bll.GetNetworkDisplayByClusterIdQuery.getParameters().getVdsGroupId(); java.util.List<org.ovirt.engine.core.common.businessentities.network_cluster> all = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkClusterDAO().getAllForCluster(vdsgroupid); final org.ovirt.engine.core.common.businessentities.network_cluster nc = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(all, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.network_cluster>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.network_cluster network_cluster) { return network_cluster.getis_display(); } }); if (nc != null) { org.ovirt.engine.core.bll.GetNetworkDisplayByClusterIdQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDAO().getAllForCluster(vdsgroupid), new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.network>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.network network) { return network.getId().equals(nc.getnetwork_id()); } })); } }
protected void runCommands() { java.util.List<org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter> params = new java.util.ArrayList<>(); java.util.Set<org.ovirt.engine.core.compat.Guid> networkIds = new java.util.HashSet<>(); for (org.ovirt.engine.core.bll.CommandBase<?> command : getCommands()) { if (command.getReturnValue().getCanDoAction()) { org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter parameters = ((org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter) (command.getParameters())); params.add(parameters); org.ovirt.engine.core.common.businessentities.network.Network network = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDao().get(parameters.getNetworkCluster().getNetworkId()); if (org.ovirt.engine.core.utils.NetworkUtils.isConfiguredByLabel(network)) { networkIds.add(network.getId()); } } } if ((networkIds.size()) <= 1) { super.runCommands(); return; } if (!(params.isEmpty())) { org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.AttachNetworksToCluster, new org.ovirt.engine.core.common.action.ClusterNetworksParameters(params.get(0).getVdsGroupId(), params)); } }
public static void log(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable, org.ovirt.engine.core.common.AuditLogType logType, java.lang.String loggerString) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.updateTimeoutLogableObject(auditLogable, logType); if (auditLogable.getLegal()) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.saveToDb(auditLogable, logType, loggerString); } }


protected void setPostZeros(boolean value) { postZeros = value; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.storage.DiskImage object) { return (java.lang.String.valueOf(object.getSizeInGigabytes())) + " GB"; }
public void InternalSetVmStatus(org.ovirt.engine.core.common.businessentities.VM vm, final org.ovirt.engine.core.common.businessentities.VMStatus status) { vm.setStatus(status); boolean isVmStatusDown = org.ovirt.engine.core.common.businessentities.VM.isStatusDown(status); if (isVmStatusDown || (status == (org.ovirt.engine.core.common.businessentities.VMStatus.Unknown))) { resetVmAttributes(vm); if (isVmStatusDown) { vm.setRunOnVds(null); vm.setVmPauseStatus(VmPauseStatus.NONE); } } }


private static boolean addQosForDevice(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, org.ovirt.engine.core.compat.Version vdsGroupCompatibilityVersion) { org.ovirt.engine.core.compat.Guid qosId = vnicProfile.getNetworkQosId(); if (qosId != null) { if (!(org.ovirt.engine.core.common.FeatureSupported.networkQoS(vdsGroupCompatibilityVersion))) { return false; } java.util.Map<java.lang.String, java.lang.Object> specParams = ((java.util.Map<java.lang.String, java.lang.Object>) (struct.get(VdsProperties.SpecParams))); if (specParams == null) { specParams = new java.util.HashMap<>(); struct.put(VdsProperties.SpecParams, specParams); } org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQoS = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getQosDao().get(qosId); org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper qosMapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper(specParams, VdsProperties.QOS_INBOUND, VdsProperties.QOS_OUTBOUND); qosMapper.serialize(networkQoS); } return true; }
@java.lang.Override protected void init(org.ovirt.engine.ui.uicommonweb.models.hosts.VfsNicLabelModel model) { super.init(model); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : model.getItems()) { labelModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.webadmin.section.main.view.popup.host.VfsNicLabelWidget.this, null); } }); } }
protected abstract void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params);

@org.junit.Ignore @org.junit.Test public void testDecreaseStorageQuota() throws java.lang.Exception { java.util.List<org.ovirt.engine.core.bll.quota.StorageQuotaValidationParameter> parameters = new java.util.ArrayList<org.ovirt.engine.core.bll.quota.StorageQuotaValidationParameter>(); quotaManager.rollbackQuota(org.ovirt.engine.core.bll.quota.QuotaManagerTest.STORAGE_QUOTA_GLOBAL_IN_GRACE); parameters.add(new org.ovirt.engine.core.bll.quota.StorageQuotaValidationParameter(org.ovirt.engine.core.bll.quota.QuotaManagerTest.STORAGE_QUOTA_GLOBAL_IN_GRACE, org.ovirt.engine.core.bll.quota.QuotaManagerTest.DESTINATION_GUID, 8)); quotaManager.decreaseStorageQuota(storage_pool, parameters); parameters.clear(); parameters.add(new org.ovirt.engine.core.bll.quota.StorageQuotaValidationParameter(org.ovirt.engine.core.bll.quota.QuotaManagerTest.STORAGE_QUOTA_GLOBAL_IN_GRACE, org.ovirt.engine.core.bll.quota.QuotaManagerTest.DESTINATION_GUID, 1)); assertTrue(quotaManager.validateAndSetStorageQuota(storage_pool, parameters, org.ovirt.engine.core.bll.quota.QuotaManagerTest.canDoActionMessages)); org.ovirt.engine.core.bll.quota.QuotaManagerTest.assertEmptyCanDoActionMessage(); parameters.clear(); org.ovirt.engine.core.bll.quota.QuotaManagerTest.canDoActionMessages.clear(); }
public void safeSetValue(java.lang.String value) throws java.lang.Exception, java.security.InvalidParameterException { if (!(valueHelper.validate(this, value))) { throw new java.security.InvalidParameterException(((("Cannot set value " + value) + "to key ") + (keyName))); } this.value = valueHelper.setValue(value); }
protected org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitecture() { if (org.apache.commons.lang.StringUtils.isNotEmpty(getVdsGroup().getCpuName())) { return org.ovirt.engine.core.bll.CpuFlagsManagerHandler.getArchitectureByCpuName(getVdsGroup().getCpuName(), getVdsGroup().getCompatibilityVersion()); } else if ((getVdsGroup().getArchitecture()) == null) { return org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined; } return getVdsGroup().getArchitecture(); }

@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> createGhostValue() { org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); value.setItems(suggestions); value.setSelectedItem(""); return value; }


private boolean checkDerivedVmFromTemplateExists(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { java.util.List<java.lang.String> vmNames = getNamesOfDerivedVmsFromTemplate(diskImage); if (!(vmNames.isEmpty())) { addCanDoActionMessage(EngineMessage.VMT_CANNOT_REMOVE_DETECTED_DERIVED_VM); addCanDoActionMessageVariable("vmsList", org.apache.commons.lang.StringUtils.join(vmNames, ",")); return false; } return true; }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Copy) ? org.ovirt.engine.core.common.errors.EngineMessage.VAR__ACTION__COPY : org.ovirt.engine.core.common.errors.EngineMessage.VAR__ACTION__MOVE)); addCanDoActionMessage(EngineMessage.VAR__TYPE__VM_DISK); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Error in retrieving the relevant Storage Domain.") java.lang.String errorRetrievingRelevantStorageDomainMsg();
private void saveNetworkFields() { if ((lastSelectedNetworkName) != null) { org.ovirt.engine.core.common.businessentities.VmInitNetwork obj = networkMap.get(lastSelectedNetworkName); if (obj != null) { obj.setBootProtocol((((getNetworkDhcp().getEntity()) != null) && (getNetworkDhcp().getEntity()) ? org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.DHCP : org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)); obj.setIp(getNetworkIpAddress().getEntity()); obj.setNetmask(getNetworkNetmask().getEntity()); obj.setGateway(getNetworkGateway().getEntity()); if (((getNetworkStartOnBoot().getEntity()) != null) && (getNetworkStartOnBoot().getEntity())) { networkStartOnBoot.add(lastSelectedNetworkName); } else { networkStartOnBoot.remove(lastSelectedNetworkName); } } } }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Configure Later") java.lang.String configureLaterTitle();
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Stripe count can be increased by only one") java.lang.String addBricksStripeCountIncreaseValidationMsg();

@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.network.NetworkSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(ginjector.getApplicationConstants().networkGeneralSubTabLabel(), 0, ginjector.getSubTabNetworkGeneralModelProvider()); }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow Change VM properties") java.lang.String allowChangeVmPropertiesRoleTreeTooltip();
private void InitOSType() { getOSType().setItems(org.ovirt.engine.ui.uicommonweb.DataProvider.GetOSList()); getOSType().setSelectedItem(VmOsType.Unassigned); }
private boolean updateVmLease() { if (java.util.Objects.equals(oldVm.getLeaseStorageDomainId(), newVmStatic.getLeaseStorageDomainId())) { return true; } if (!(addVmLease(newVmStatic.getLeaseStorageDomainId(), newVmStatic.getId()))) { return false; } removeVmLease(oldVm.getLeaseStorageDomainId(), oldVm.getId()); return true; }
protected void testStartWithHost(org.ovirt.engine.api.model.Host host, org.ovirt.engine.core.compat.Guid hostId) throws java.lang.Exception { setUpWindowsGetEntityExpectations(1, false); setUriInfo(setUpActionExpectations(VdcActionType.RunVmOnce, org.ovirt.engine.core.common.action.RunVmOnceParams.class, new java.lang.String[]{ "VmId", "DestinationVdsId" }, new java.lang.Object[]{ GUIDS[0], hostId })); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setVm(new org.ovirt.engine.api.model.VM()); org.ovirt.engine.api.model.VmPlacementPolicy placementPolicy = new org.ovirt.engine.api.model.VmPlacementPolicy(); placementPolicy.setHost(host); action.getVm().setPlacementPolicy(placementPolicy); verifyActionResponse(resource.start(action)); }
private org.ovirt.engine.core.common.vdscommands.VDSParametersBase createVDSParameters() { return org.ovirt.engine.core.bll.storage.PostZeroHandler.fixParametersWithPostZero(new org.ovirt.engine.core.common.vdscommands.DestroyImageVDSCommandParameters(org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().getImageList(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().isPostZero(), org.ovirt.engine.core.bll.DestroyImageCommand.getParameters().isForce())); }

protected final void decreasePendingVm(org.ovirt.engine.core.common.businessentities.VmStatic vm) { org.ovirt.engine.core.compat.Guid vdsId = getCurrentVdsId(); if ((vdsId == null) || (vdsId.equals(lastDecreasedVds))) { org.ovirt.engine.core.bll.RunVmCommandBase.log.debug("PendingVms for the guest '{}' running on host '{}' was already released, not releasing again", vm.getName(), vdsId); return; } lastDecreasedVds = vdsId; org.ovirt.engine.core.bll.VmHandler.decreasePendingVm(vm, vdsId); getBlockingQueue(vdsId).offer(java.lang.Boolean.TRUE); }
@java.lang.Override public org.ovirt.engine.api.model.Tags list() { java.util.List<org.ovirt.engine.core.common.businessentities.tags> tags = getTags(); tags.add(getRootTag()); return mapCollection(tags); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__HOT_PLUG); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_DISK); }
@java.lang.Override public java.lang.String toString() { return java.lang.String.format("%s, deviceList=%s, force=%b", super.toString(), getDeviceList(), isForce()); }

@org.junit.Test public void canDoActionLunsNotPartOfStorageDomain() { java.util.List lunsFromDb = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("111"); lun1.setStorageDomainId(sdId); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id("222"); lun2.setStorageDomainId(sdId); lunsFromDb.add(lun1); lunsFromDb.add(lun2); when(lunsDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommandTest.STORAGE)).thenReturn(lunsFromDb); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_LUNS_NOT_PART_OF_STORAGE_DOMAIN); }


@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.VM object) { boolean isDiskPlugged = getDetailModel().isDiskPluggedToVm(object); setTitle((isDiskPlugged ? constants.active() : constants.inactive())); return isDiskPlugged ? getCommonResources().upImage() : getCommonResources().downImage(); }
private org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, org.ovirt.engine.core.common.errors.EngineFault> connectStorage() { return getStorageHelper(org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand.getStorageDomain()).connectStorageToDomainByVdsIdDetails(org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.RemoveStorageDomainCommand.getVds().getId()); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Change CD") java.lang.String changeCd();

public java.util.List<java.lang.String> getCanDoActionMessages() { return canDoActionMessages; }

private void assertNumOfVfsInValidRange(int numOfVfs) { assertThat(validator.numOfVfsInValidRange(numOfVfs), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NUM_OF_VFS_NOT_IN_VALID_RANGE, java.lang.String.format(VfsConfigValidator.NIC_NAME_REPLACEMENT, nic.getName()), java.lang.String.format(VfsConfigValidator.NUM_OF_VFS_REPLACEMENT, numOfVfs), java.lang.String.format(VfsConfigValidator.MAX_NUM_OF_VFS_REPLACEMENT, oldVfsConfig.getMaxNumOfVfs()))); }
private org.ovirt.engine.core.bll.network.host.SetupNetworksHelper createHelper(org.ovirt.engine.core.common.action.SetupNetworksParameters params, org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.compat.Version compatibilityVersion) { when(vds.getVdsGroupCompatibilityVersion()).thenReturn(compatibilityVersion); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = spy(new org.ovirt.engine.core.bll.network.host.SetupNetworksHelper(params, vds)); when(helper.getVmInterfaceManager()).thenReturn(vmInterfaceManager); doReturn(null).when(helper).translateErrorMessages(any(java.util.List.class)); org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacade = mock(org.ovirt.engine.core.dal.dbbroker.DbFacade.class); doReturn(dbFacade).when(helper).getDbFacade(); doReturn(interfaceDAO).when(dbFacade).getInterfaceDao(); doReturn(mock(org.ovirt.engine.core.dao.VdsDAO.class)).when(dbFacade).getVdsDao(); doReturn(networkDAO).when(dbFacade).getNetworkDao(); doReturn(qosDao).when(dbFacade).getNetworkQosDao(); return helper; }
@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.widget.table.cell.Context context, T value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb) { if (!(isVisible(value))) { return; } com.google.gwt.resources.client.ImageResource image = resources.expanderDownImage(); com.google.gwt.safehtml.shared.SafeHtml imageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(image).getHTML()); sb.append(templates.volumeActivityMenu(imageHtml)); }

@java.lang.Override protected boolean validate() { if (!(checkQuotaValidationCommon(getParameters().getQuota(), getReturnValue().getValidationMessages()))) { return false; } else if ((getParameters().getQuota().getId()) == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_IS_NOT_VALID); return false; } else if ((getQuotaDao().getById(getParameters().getQuota().getId())) == null) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } return true; }
boolean areRequiredNetworksAvailable(final java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> vmNetworkInterfaces, final java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> allInterfacesForVds) { for (final org.ovirt.engine.core.common.businessentities.VmNetworkInterface vmIf : vmNetworkInterfaces) { boolean found = false; for (final org.ovirt.engine.core.common.businessentities.VdsNetworkInterface vdsIf : allInterfacesForVds) { if (org.apache.commons.lang.StringUtils.equals(vmIf.getNetworkName(), vdsIf.getNetworkName())) { found = true; break; } } if (!found) { return false; } } return true; }
@java.lang.Override public void loadFromLocalStorage(org.ovirt.engine.ui.uicommonweb.models.VmConsoles vmConsoles) { java.lang.String vmId = vmConsoles.getVm().getId().toString(); org.ovirt.engine.ui.common.utils.ConsoleContext context = vmConsoles.getConsoleContext(); org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker keyMaker = new org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker(vmId, context); java.lang.String selectedProtocolString = clientStorage.getLocalItem(keyMaker.make(org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.SELECTED_PROTOCOL)); if ((selectedProtocolString == null) || ("".equals(selectedProtocolString))) { return; } org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol selectedProtocol = org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.valueOf(selectedProtocolString); if (!(vmConsoles.canSelectProtocol(selectedProtocol))) { return; } if (selectedProtocol == (org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.SPICE)) { loadSpiceData(vmConsoles, keyMaker); } else if (selectedProtocol == (org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.VNC)) { loadVncData(vmConsoles, keyMaker); } else if (selectedProtocol == (org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.RDP)) { loadRdpData(vmConsoles, keyMaker); } }
public org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface getNetworkInterface(org.ovirt.engine.core.utils.ovf.xml.XmlNode node) { java.lang.String str = node.SelectSingleNode("rasd:InstanceId", _xmlNS).innerText; final org.ovirt.engine.core.compat.Guid guid; org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface; if (!(org.apache.commons.lang.StringUtils.isNumeric(str))) { guid = new org.ovirt.engine.core.compat.Guid(str); iface = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(interfaces, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface) { return iface.getId().equals(guid); } }); if (iface == null) { iface = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); iface.setId(guid); } } else { iface = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); } return iface; }
protected java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>> populateTemplatesMetadataForOvfUpdate(java.util.List<org.ovirt.engine.core.compat.Guid> idsToProcess) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>> vmsAndTemplateMetadata = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>>(); java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> templates = getVmTemplateDao().getVmTemplatesByIds(idsToProcess); for (org.ovirt.engine.core.common.businessentities.VmTemplate template : templates) { if ((org.ovirt.engine.core.common.businessentities.VmTemplateStatus.Locked) != (template.getStatus())) { updateTemplateDisksFromDb(template); boolean verifyDisksNotLocked = verifyDisksNotLocked(template.getDiskList()); if (verifyDisksNotLocked) { loadTemplateData(template); java.lang.Long currentDbGeneration = getVmStaticDao().getDbGeneration(template.getId()); if ((currentDbGeneration != null) && ((template.getDbGeneration()) == currentDbGeneration)) { buildMetadataDictionaryForTemplate(template, vmsAndTemplateMetadata); proccessedIdsInfo.add(template.getId()); proccessedOvfGenerationsInfo.add(template.getDbGeneration()); } } } } return vmsAndTemplateMetadata; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (((connectAutomatically.readConnectAutomatically()) && (model.getCanConnectAutomatically())) && (!(alreadyOpened))) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel userPortalItemModel = model.GetUpVms(model.getItems()).get(0); if (userPortalItemModel != null) { userPortalItemModel.getDefaultConsole().getConnectCommand().Execute(); alreadyOpened = true; } } unregisterModels(); }


private static java.util.List<org.ovirt.engine.api.extensions.ExtMap> flatGroups(org.ovirt.engine.api.extensions.ExtMap entity, org.ovirt.engine.api.extensions.ExtKey key, java.util.List<org.ovirt.engine.api.extensions.ExtMap> accumulator) { for (org.ovirt.engine.api.extensions.ExtMap group : entity.<java.util.Collection<org.ovirt.engine.api.extensions.ExtMap>>get(key, java.util.Collections.<org.ovirt.engine.api.extensions.ExtMap>emptyList())) { accumulator.add(group); org.ovirt.engine.core.bll.aaa.DirectoryUtils.flatGroups(group, GroupRecord.GROUPS, accumulator); } return accumulator; }
@java.lang.Override protected void buildVmVideoCards() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmVideoDevices = vmDeviceDao.getVmDeviceByVmIdAndType(vm.getId(), VmDeviceGeneralType.VIDEO); for (org.ovirt.engine.core.common.businessentities.VmDevice vmVideoDevice : vmVideoDevices) { if (!(vmVideoDevice.getIsManaged())) { continue; } java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, vmVideoDevice.getType().getValue()); struct.put(VdsProperties.Device, vmVideoDevice.getDevice()); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmVideoDevice, struct); struct.put(VdsProperties.SpecParams, vmVideoDevice.getSpecParams()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmVideoDevice.getId().getDeviceId())); addToManagedDevices(vmVideoDevice); devices.add(struct); } }
@java.lang.Override @org.junit.Before public void setUp() { super.setUp(); org.ovirt.engine.core.common.action.ImportRepoImageParameters importParameters = new org.ovirt.engine.core.common.action.ImportRepoImageParameters(); importParameters.setSourceRepoImageId(getRepoImageId()); importParameters.setSourceStorageDomainId(getRepoStorageDomainId()); importParameters.setStoragePoolId(getStoragePoolId()); importParameters.setStorageDomainId(getStorageDomainId()); cmd = spy(new org.ovirt.engine.core.bll.storage.repoimage.ImportRepoImageCommand(importParameters, null)); doReturn(getStorageDomainDao()).when(cmd).getStorageDomainDao(); doReturn(getStoragePoolDao()).when(cmd).getStoragePoolDao(); doReturn(getProviderProxy()).when(cmd).getProviderProxy(); doReturn(true).when(cmd).validateSpaceRequirements(any(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class)); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VdsStatistics get(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", id); return getCallsHandler().executeRead("GetVdsStatisticsByVdsId", org.ovirt.engine.core.dao.VdsStatisticsDAODbFacadeImpl.VdsStatisticsRowMapper.instance, parameterSource); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { boolean isNameUnique = ((java.lang.Boolean) (returnValue)); if (isNameUnique) { postInstanceTypeNameUniqueCheck(); } else { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel VmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())); VmModel.getInvalidityReasons().clear(); VmModel.getName().getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason()); VmModel.getName().setIsValid(false); VmModel.setIsValid(false); } }
private com.google.gwt.safehtml.shared.SafeHtml createLabelToolTip(java.util.Set<java.lang.String> labels) { com.google.gwt.safehtml.shared.SafeHtmlBuilder tooltip = new com.google.gwt.safehtml.shared.SafeHtmlBuilder(); boolean isFirst = true; if (labels == null) { return null; } java.lang.String[] sortedLabels = labels.toArray(new java.lang.String[]{ }); java.util.Arrays.sort(sortedLabels, new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator()); for (java.lang.String label : sortedLabels) { if (isFirst) { isFirst = false; } else { tooltip = tooltip.appendHtmlConstant("<BR>"); } tooltip = tooltip.appendEscaped(label); } return tooltip.toSafeHtml(); }
private org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct generateOptions() { org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct options = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct(); options.add(VdsProperties.connectivityCheck, java.lang.Boolean.toString(org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand.getParameters().isCheckConnectivity())); if ((org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand.getParameters().getConectivityTimeout()) >= 0) { options.add(VdsProperties.connectivityTimeout, org.ovirt.engine.core.vdsbroker.vdsbroker.SetupNetworksVDSCommand.getParameters().getConectivityTimeout()); } return options; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Provider<?>> getAllByType(org.ovirt.engine.core.common.businessentities.ProviderType providerType) { return getCallsHandler().executeReadList("GetAllFromProvidersByType", org.ovirt.engine.core.dao.provider.ProviderDaoImpl.ProviderRowMapper.INSTANCE, getCustomMapSqlParameterSource().addValue("provider_type", providerType.toString())); }
@org.junit.Test public void qosCommitmentMissingBondSpeedMode3() { org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = qosCommitmendMissingBondSpeed(org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_MODE_3); validateAndExpectViolation(helper, VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_OVERCOMMITMENT, org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.BOND_NAME); }

@java.lang.Override protected boolean canDoAction() { if (!(org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterGeoReplication(getVdsGroup().getCompatibilityVersion()))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GEO_REP_NOT_SUPPORTED); } slaveHost = getSlaveHost(); if ((slaveHost) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NOT_EXIST); } if ((slaveHost.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP, java.lang.String.format("$%1$s %2$s", "VdsName", slaveHost.getName())); } slaveVolume = getSlaveVolume(); if ((slaveVolume) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID); } if ((slaveVolume.getStatus()) != (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED); } if (!(areAllRemoteServersUp())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_ONE_OR_MORE_REMOTE_HOSTS_ARE_NOT_ACCESSIBLE); } org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession geoRepSession = getGeoRepDao().getGeoRepSession(getGlusterVolumeId(), slaveHost.getId(), getParameters().getSlaveVolumeName()); if (geoRepSession != null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_GEOREP_SESSION_ALREADY_CREATED); } return super.canDoAction(); }


@java.lang.Override protected void beforeUiCommonInitEvent(org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel) { org.ovirt.engine.ui.common.uicommon.model.CommonModelManager.init(eventBus); }
@java.lang.Override @org.ovirt.engine.api.restapi.resource.SingleEntityResource public org.ovirt.engine.api.resource.ReadOnlyDeviceResource<org.ovirt.engine.api.model.Disk> getDeviceSubResource(java.lang.String id) { return inject(new org.ovirt.engine.api.restapi.resource.BackendReadOnlyDeviceResource<org.ovirt.engine.api.model.Disk, org.ovirt.engine.api.model.Disks, org.ovirt.engine.core.common.businessentities.Disk>(modelType, entityType, asGuidOr404(id), this)); }

public void setuser_name(java.lang.String value) { this.username = value; }
private java.lang.String getPrintableConnectionsList() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.vdscommands.storage_server_connections con : getConnectionList()) { sb.append("{ id: "); sb.append(con.getid()); sb.append(", connection: "); sb.append(con.getconnection()); sb.append(" };"); } return sb.toString(); }
private void finalizeDownloadIfNecessary(final org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand<T>.StateContext context, org.ovirt.engine.core.common.businessentities.storage.ImageTransfer upToDateImageTransfer) { if ((((upToDateImageTransfer.getBytesTotal()) != 0) && (upToDateImageTransfer.getBytesTotal().equals(upToDateImageTransfer.getBytesSent()))) && (!(upToDateImageTransfer.getActive()))) { if (!(context.entity.getActive())) { org.ovirt.engine.core.common.businessentities.storage.ImageTransfer statusUpdate = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(); statusUpdate.setPhase(ImageTransferPhase.FINALIZING_SUCCESS); runInternalAction(ActionType.TransferImageStatus, new org.ovirt.engine.core.common.action.TransferImageStatusParameters(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId(), statusUpdate)); } } }
private boolean refreshVdsmFileList(org.ovirt.engine.core.compat.Guid repoStoragePoolId, org.ovirt.engine.core.compat.Guid repoStorageDomainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> fileStats, org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.FileListRefreshed fileListRefreshed) { if (repoStorageDomainId == null) { return false; } boolean vdsmRefreshOk = fileStats != null; org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.log.debug("The refresh process from VDSM, for {}, {}.", imageFileType, succeededOrFailed(vdsmRefreshOk)); if (!vdsmRefreshOk) { return false; } boolean refreshSucceeded = org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.refreshIsoFileListMetaData(repoStorageDomainId, repoStorageDom, fileStats, imageFileType); if (refreshSucceeded && (fileListRefreshed != null)) { fileListRefreshed.onFileListRefreshed(repoStoragePoolId, fileStats.keySet()); } return refreshSucceeded; }

private java.lang.String commaSeparated(java.util.List<?> invalidBondIds) { return org.apache.commons.lang.StringUtils.join(invalidBondIds, ", "); }
public void setTitle(com.google.gwt.safehtml.shared.SafeHtml text) { tooltipPanel.setText(text); }

private void validateDataSize() { if ((dataUrl.length()) > (org.ovirt.engine.core.bll.validator.IconValidator.MAX_DATAURL_SIZE)) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.DATA_SIZE_OF_PROVIDED_VM_ICON_TOO_LARGE, ("$maxSize " + (org.ovirt.engine.core.bll.validator.IconValidator.getSizeEstimateByDataUrlLength(org.ovirt.engine.core.bll.validator.IconValidator.MAX_DATAURL_SIZE))), ("$currentSize " + (org.ovirt.engine.core.bll.validator.IconValidator.getSizeEstimateByDataUrlLength(dataUrl.length())))); } }
public boolean isAttached() { return (attachedToNic) != null; }
private void collectVmPrestartFailureReasons(java.util.Map<java.lang.String, java.lang.Integer> failureReasons, java.util.List<java.lang.String> messages) { if (org.ovirt.engine.core.bll.VmPoolMonitor.log.isInfoEnabled()) { java.lang.String reason = messages.stream().filter(ErrorMessageUtils::isMessage).collect(java.util.stream.Collectors.joining(", ")); java.lang.Integer count = failureReasons.get(reason); failureReasons.put(reason, (count == null ? 1 : count + 1)); } }

public java.lang.String getSoftwareVersion() { return this.mVdsDynamic.getSoftwareVersion(); }

private static org.ovirt.engine.core.common.businessentities.Network CloneNetwork(org.ovirt.engine.core.common.businessentities.Network instance) { org.ovirt.engine.core.common.businessentities.Network obj = new org.ovirt.engine.core.common.businessentities.Network(null); obj.setaddr(instance.getaddr()); obj.setdescription(instance.getdescription()); obj.setId(instance.getId()); obj.setname(instance.getname()); obj.setsubnet(instance.getsubnet()); obj.setgateway(instance.getgateway()); obj.settype(instance.gettype()); obj.setvlan_id(instance.getvlan_id()); obj.setstp(instance.getstp()); obj.setStatus(instance.getStatus()); obj.setstorage_pool_id(instance.getstorage_pool_id()); obj.setis_display(instance.getis_display()); return obj; }
@org.junit.Test public void testIsUsingScsiReservationValidWhenSgioIsFiltered() { setupForLun(); org.ovirt.engine.core.common.businessentities.storage.LunDisk lunDisk1 = createLunDisk(ScsiGenericIO.FILTERED, true); assertThat(lunValidator.isUsingScsiReservationValid(org.ovirt.engine.core.bll.validator.storage.DiskValidatorTest.createVM(), lunDisk1), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_SGIO_IS_FILTERED)); }
private void mockExistingNetworks(org.ovirt.engine.core.common.businessentities.network.Network... networks) { when(networkDAO.getAllForCluster(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Arrays.asList(networks)); }

@org.junit.Test public void testVirtIoScsiNotSupportedByOs() { org.ovirt.engine.core.common.businessentities.DiskImage disk = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createVirtIoScsiDiskImage(); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskToVmCommandTest.createParameters(); parameters.setDiskInfo(disk); org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId, parameters); mockStorageDomain(storageId); mockStoragePoolIsoMap(); org.ovirt.engine.core.common.businessentities.VM vm = mockVm(); vm.setVdsGroupCompatibilityVersion(Version.v3_3); org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); java.util.HashMap<java.lang.Integer, java.lang.String> uniqueOsNames = new java.util.HashMap<java.lang.Integer, java.lang.String>(); uniqueOsNames.put(7, "RHEL5"); when(osRepository.getUniqueOsNames()).thenReturn(uniqueOsNames); vm.setVmOs(7); org.ovirt.engine.core.bll.validator.DiskValidator diskValidator = spyDiskValidator(disk); doReturn(true).when(diskValidator).isVirtioScsiControllerAttached(any(org.ovirt.engine.core.compat.Guid.class)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_GUEST_OS_VERSION_IS_NOT_SUPPORTED); }

@org.junit.Test public void onlyOutboundBurstPresent() { qos.setOutboundBurst(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_MEDIUM); valuesPresentTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_MISSING_VALUES)); }
public java.util.Map<java.lang.String, java.lang.Object> glusterVolumeGeoRepConfigSet(java.lang.String volumeName, java.lang.String slaveHost, java.lang.String slaveVolumeName, java.lang.String configKey, java.lang.String configValue);
private void addViolation(org.ovirt.engine.core.common.errors.VdcBllMessages violation, java.lang.String violatingEntity) { java.util.List<java.lang.String> violatingEntities = violations.get(violation); if (violatingEntities == null) { violatingEntities = new java.util.ArrayList<java.lang.String>(); violations.put(violation, violatingEntities); } if (violatingEntity != null) { violatingEntities.add(violatingEntity); } }
com.google.gwt.user.cellview.client.Header<?> createHeader(com.google.gwt.user.cellview.client.Column<T, ?> column, java.lang.String headerTextOrHtml, boolean allowHtml) { com.google.gwt.safehtml.shared.SafeHtml headerHtml = (allowHtml) ? com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(headerTextOrHtml) : com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(headerTextOrHtml); return createHeader(column, headerHtml); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAuditLogDao().remove(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.setSucceeded(true); }
@org.junit.Test public void invalidProviderType() { when(provider.getType()).thenReturn(org.ovirt.engine.core.bll.provider.NetworkProviderValidatorTest.NON_NETWORK_PROVIDER_TYPE); assertThat(validator.providerTypeIsOpenstack(), failsWith(EngineMessage.ACTION_TYPE_FAILED_PROVIDER_TYPE_MISMATCH)); }
private void ReturnVm() { org.ovirt.engine.core.common.businessentities.VM entity = ((org.ovirt.engine.core.common.businessentities.VM) (getItem().getEntity())); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.ShutdownVm, new org.ovirt.engine.core.common.action.ShutdownVmParameters(entity.getId(), false), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void Executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { } }, null); }

private static java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> createTestVmNumaNodes() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> newVmNodes = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VmNumaNode newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(0, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(0); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(new org.ovirt.engine.core.common.utils.Pair(org.ovirt.engine.core.compat.Guid.newGuid(), new org.ovirt.engine.core.common.utils.Pair(true, 0))); newVmNodes.add(newVmNumaNode); newVmNumaNode = new org.ovirt.engine.core.common.businessentities.VmNumaNode(); newVmNumaNode.setCpuIds(org.ovirt.engine.core.vdsbroker.vdsbroker.NumaSettingFactoryTest.generateCpuList(4, 4)); newVmNumaNode.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newVmNumaNode.setIndex(1); newVmNumaNode.setMemTotal(1024); newVmNumaNode.getVdsNumaNodeList().add(new org.ovirt.engine.core.common.utils.Pair(org.ovirt.engine.core.compat.Guid.newGuid(), new org.ovirt.engine.core.common.utils.Pair(true, 1))); newVmNodes.add(newVmNumaNode); return newVmNodes; }
public static org.ovirt.engine.core.bll.adbroker.RootDSE get(org.ovirt.engine.core.ldap.LdapProviderType ldapProviderType, javax.naming.directory.Attributes rootDseRecords) throws java.lang.NumberFormatException, javax.naming.NamingException { switch (ldapProviderType) { case activeDirectory : return new org.ovirt.engine.core.bll.adbroker.ADRootDSE(rootDseRecords); case ipa : return new org.ovirt.engine.core.bll.adbroker.IPARootDSE(rootDseRecords); case rhds : return new org.ovirt.engine.core.bll.adbroker.RHDSRootDSE(rootDseRecords); case itds : return new org.ovirt.engine.core.bll.adbroker.ITDSRootDSE(rootDseRecords); case openLdap : return new org.ovirt.engine.core.bll.adbroker.DefaultRootDSE(rootDseRecords); case general : default : return new org.ovirt.engine.core.bll.adbroker.GeneralRootDSE(rootDseRecords); } }


@org.junit.Test public void canDoActionFailsOnNoConflictServers() { cmd = spy(new org.ovirt.engine.core.bll.gluster.AddGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook = getHookEntity(); setUpMocksForAdd(true, hook); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_NO_CONFLICT_SERVERS.toString())); }
public void start() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (item)); list.add(new org.ovirt.engine.core.common.action.FenceVdsActionParameters(vds.getId(), org.ovirt.engine.core.common.businessentities.FenceActionType.Start)); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.StartVds, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { } }, null); }

private void mockBackend(boolean succeeded, org.ovirt.engine.core.common.errors.EngineError errorCode) { doReturn(backend).when(cmd).getBackend(); doNothing().when(cmd).endStepJobAborted(any(java.lang.String.class)); doNothing().when(cmd).releaseVolumeLock(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); vdsReturnValue.setSucceeded(succeeded); if (!succeeded) { vdsReturnValue.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(errorCode, "")); } else { vdsReturnValue.setReturnValue(new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity()); } when(vdsBrokerFrontend.runVdsCommand(eq(VDSCommandType.StopRemoveGlusterVolumeBricks), argThat(anyGlusterVolumeVDS()))).thenReturn(vdsReturnValue); }
private boolean equals(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> item2) { if ((item1 == null) && (item2 == null)) { return true; } return item1 != null ? item1.equals(item2) : item2.equals(item1); }

@java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters().getUploadSize()); imageTransferDao.save(entity); log.info("Creating {} image", getUploadType()); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters().getImageId())) { createImage(); } else { handleImageIsReadyForUpload(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.setSucceeded(true); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> getVmInterfaces() { if ((_vmInterfaces) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmNetworkInterfaces = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao().getAllForTemplate(org.ovirt.engine.core.bll.AddVmCommand.getVmTemplate().getId()); _vmInterfaces = (vmNetworkInterfaces != null) ? vmNetworkInterfaces : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>(); } return _vmInterfaces; }

boolean ValidateStoragePoolConnectionsInHost(org.ovirt.engine.core.common.businessentities.VDS vds, java.util.List<org.ovirt.engine.core.common.businessentities.storage_server_connections> connections, org.ovirt.engine.core.compat.Guid storagePoolId);
public org.ovirt.engine.core.bll.ValidationResult nameAvailable() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED).when(((getProviderDao().getByName(provider.getName())) != null)); }



public void setError(int value) { _Error = org.ovirt.engine.core.common.errors.VdcBllErrors.forValue(value); }
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel) (result.getState())); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = result.getReturnValue(); boolean success = (returnVal != null) && (returnVal.getSucceeded()); if (success) { storageListModel.fileConnection.setid(((java.lang.String) (returnVal.getActionReturnValue()))); checkFileDomainAttachedToDc("OnImportFile", storageListModel.fileConnection); } else { postImportFileStorage(storageListModel.context, false, storageListModel.storageModel, org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().failedToRetrieveExistingStorageDomainInformationMsg()); } }

public boolean hasPhysMemoryToRunVM(org.ovirt.engine.core.common.businessentities.VDS curVds, org.ovirt.engine.core.common.businessentities.VM vm, int pendingMemory) { if (((curVds.getMemFree()) != null) && ((curVds.getGuestOverhead()) != null)) { double vmMemRequired = (vm.getMemSizeMb()) + (curVds.getGuestOverhead()); double vdsMemLimit = (curVds.getMemFree()) - pendingMemory; org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("hasPhysMemoryToRunVM: host '{}'; free memory is : {} MB (+ {} MB pending); free swap is: {} MB, required memory is {} MB; Guest overhead {} MB", curVds.getName(), vdsMemLimit, pendingMemory, curVds.getSwapFree(), vmMemRequired, curVds.getGuestOverhead()); if ((curVds.getSwapFree()) != null) { vdsMemLimit += curVds.getSwapFree(); } org.ovirt.engine.core.bll.scheduling.SlaValidator.log.debug("{} <= ??? {}", vmMemRequired, vdsMemLimit); return vmMemRequired <= vdsMemLimit; } else { return false; } }

@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, org.ovirt.engine.ui.common.widget.ImageWithDecorator value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb) { if (value != null) { com.google.gwt.safehtml.shared.SafeHtml mainImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(""); com.google.gwt.safehtml.shared.SafeHtml decorateImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(""); if ((value.getImage()) != null) { mainImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(value.getImage()).getHTML()); } if ((value.getDecorator()) != null) { decorateImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(value.getDecorator()).getHTML()); } sb.append(org.ovirt.engine.ui.common.widget.table.cell.DecoratedImageResouceCell.template.doubleImageContainer(mainImageHtml, decorateImageHtml, value.getDecoratorPositionLeft(), value.getDecoratorPositionTop())); } }

@java.lang.Override public void init(javax.servlet.ServletConfig config) throws javax.servlet.ServletException { super.init(config); url = org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().expandString(config.getInitParameter(org.ovirt.engine.core.utils.servlet.RedirectServlet.URL).replaceAll("%\\{", "\\${")); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.QoS.class, to = org.ovirt.engine.core.common.businessentities.qos.QosBase.class) public static org.ovirt.engine.core.common.businessentities.qos.QosBase map(org.ovirt.engine.api.model.QoS model, org.ovirt.engine.core.common.businessentities.qos.QosBase template) { org.ovirt.engine.core.common.businessentities.qos.QosBase entity = null; if (template != null) { entity = template; } org.ovirt.engine.api.model.QosType qosType = ((model.getType()) != null) ? org.ovirt.engine.api.model.QosType.valueOf(model.getType().toUpperCase()) : entity != null ? org.ovirt.engine.api.model.QosType.valueOf(entity.getQosType().toString().toUpperCase()) : org.ovirt.engine.api.model.QosType.STORAGE; switch (qosType) { case STORAGE : if (entity == null) { entity = new org.ovirt.engine.core.common.businessentities.qos.StorageQos(); } if (model.isSetMaxThroughput()) { ((org.ovirt.engine.core.common.businessentities.qos.StorageQos) (entity)).setMaxThroughput(org.ovirt.engine.api.restapi.types.IntegerMapper.mapMinusOneToNull(model.getMaxThroughput())); } if (model.isSetMaxReadThroughput()) { ((org.ovirt.engine.core.common.businessentities.qos.StorageQos) (entity)).setMaxReadThroughput(org.ovirt.engine.api.restapi.types.IntegerMapper.mapMinusOneToNull(model.getMaxReadThroughput())); } if (model.isSetMaxWriteThroughput()) { ((org.ovirt.engine.core.common.businessentities.qos.StorageQos) (entity)).setMaxWriteThroughput(org.ovirt.engine.api.restapi.types.IntegerMapper.mapMinusOneToNull(model.getMaxWriteThroughput())); } if (model.isSetMaxIops()) { ((org.ovirt.engine.core.common.businessentities.qos.StorageQos) (entity)).setMaxIops(org.ovirt.engine.api.restapi.types.IntegerMapper.mapMinusOneToNull(model.getMaxIops())); } if (model.isSetMaxReadIops()) { ((org.ovirt.engine.core.common.businessentities.qos.StorageQos) (entity)).setMaxReadIops(org.ovirt.engine.api.restapi.types.IntegerMapper.mapMinusOneToNull(model.getMaxReadIops())); } if (model.isSetMaxWriteIops()) { ((org.ovirt.engine.core.common.businessentities.qos.StorageQos) (entity)).setMaxWriteIops(org.ovirt.engine.api.restapi.types.IntegerMapper.mapMinusOneToNull(model.getMaxWriteIops())); } break; case CPU : if (entity == null) { entity = new org.ovirt.engine.core.common.businessentities.qos.CpuQos(); } if (model.isSetCpuLimit()) { ((org.ovirt.engine.core.common.businessentities.qos.CpuQos) (entity)).setCpuLimit(org.ovirt.engine.api.restapi.types.IntegerMapper.mapMinusOneToNull(model.getCpuLimit())); } break; case NETWORK : if (entity == null) { entity = new org.ovirt.engine.core.common.businessentities.network.NetworkQoS(); } if (model.isSetInboundAverage()) { ((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (entity)).setInboundAverage(org.ovirt.engine.api.restapi.types.IntegerMapper.mapMinusOneToNull(model.getInboundAverage())); } if (model.isSetInboundPeak()) { ((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (entity)).setInboundPeak(org.ovirt.engine.api.restapi.types.IntegerMapper.mapMinusOneToNull(model.getInboundPeak())); } if (model.isSetInboundBurst()) { ((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (entity)).setInboundBurst(org.ovirt.engine.api.restapi.types.IntegerMapper.mapMinusOneToNull(model.getInboundBurst())); } if (model.isSetOutboundAverage()) { ((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (entity)).setOutboundAverage(org.ovirt.engine.api.restapi.types.IntegerMapper.mapMinusOneToNull(model.getOutboundAverage())); } if (model.isSetOutboundPeak()) { ((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (entity)).setOutboundPeak(org.ovirt.engine.api.restapi.types.IntegerMapper.mapMinusOneToNull(model.getOutboundPeak())); } if (model.isSetOutboundBurst()) { ((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (entity)).setOutboundBurst(org.ovirt.engine.api.restapi.types.IntegerMapper.mapMinusOneToNull(model.getOutboundBurst())); } break; default : break; } if (model.isSetId()) { entity.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.setName(model.getName()); } if ((model.isSetDataCenter()) && (model.getDataCenter().isSetId())) { entity.setStoragePoolId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getDataCenter().getId())); } if (model.isSetDescription()) { entity.setDescription(model.getDescription()); } return entity; }

@java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { eventHandler = com.google.gwt.user.client.Event.addNativePreviewHandler(new com.google.gwt.user.client.Event.NativePreviewHandler() { @java.lang.Override public void onPreviewNativeEvent(com.google.gwt.user.client.Event.NativePreviewEvent event) { com.google.gwt.dom.client.NativeEvent nativeEvent = event.getNativeEvent(); if ((((nativeEvent.getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) && (((event.getTypeInt()) == (com.google.gwt.user.client.Event.ONKEYPRESS)) || ((event.getTypeInt()) == (com.google.gwt.user.client.Event.ONKEYDOWN)))) && (!(event.isCanceled()))) { nativeEvent.preventDefault(); nativeEvent.stopPropagation(); event.cancel(); if ((event.getTypeInt()) == (com.google.gwt.user.client.Event.ONKEYDOWN)) { enterPressed(); } } } }); }


@java.lang.Override protected void executeCommand() { InitConnectionList(); setSucceeded(connectStorageServer(getStoragePool().getstorage_pool_type(), getConnections())); if (getNeedToConnectIso()) { if (!(connectStorageServer(getIsoType(), getIsoConnections()))) { log.infoFormat("Failed to connect host {0} to StoragePool {1} Iso domain/s connections", getVds().getName(), getStoragePool().getname()); } } if (getNeedToConnectExport()) { if (!(connectStorageServer(getExportType(), getExportConnections()))) { log.infoFormat("Failed to connect host {0} to StoragePool {1} Export domain/s connections", getVds().getName(), getStoragePool().getname()); } } }
public void remove(ID id) { final T entity = entityManager.find(entityType, id); if (entity == null) { org.ovirt.engine.core.dao.jpa.AbstractJpaDao.LOG.warn("Trying to remove non-existent {} with id = '{}'", entityType.getSimpleName(), id); } else { entityManager.remove(entity); } }



private boolean areDisksLocked(org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue) { return vdcReturnValue.getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED.name()); }

public static org.ovirt.engine.core.common.job.Job createJob(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.bll.CommandBase<?> command) { org.ovirt.engine.core.common.job.Job job = new org.ovirt.engine.core.common.job.Job(); job.setId(org.ovirt.engine.core.compat.Guid.newGuid()); job.setActionType(actionType); job.setDescription(org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveJobMessage(actionType, command.getJobMessageProperties())); job.setJobSubjectEntities(org.ovirt.engine.core.bll.job.ExecutionHandler.getSubjectEntities(command.getPermissionCheckSubjects())); job.setOwnerId(command.getUserId()); job.setStatus(JobExecutionStatus.STARTED); job.setStartTime(new java.util.Date()); job.setCorrelationId(command.getCorrelationId()); return job; }
@java.lang.Override public javax.ws.rs.core.Response remove() { org.ovirt.engine.core.common.businessentities.Provider provider = org.ovirt.engine.api.restapi.resource.BackendExternalProviderHelper.getProvider(this, id); org.ovirt.engine.core.common.action.ProviderParameters parameters = new org.ovirt.engine.core.common.action.ProviderParameters(provider); return performAction(ActionType.RemoveProvider, parameters); }
@java.lang.Override protected void executeCommand() { java.util.Map<java.lang.String, java.lang.Object> raidParams = new java.util.HashMap<>(); if ((!(getParameters().getRaidType().equals(RaidType.NONE))) && (!(getParameters().getRaidType().equals(RaidType.RAID0)))) { raidParams.put("type", getParameters().getRaidType().getValue()); raidParams.put("pdCount", getParameters().getNoOfPhysicalDisksInRaidVolume()); raidParams.put("stripeSize", getParameters().getStripeSize()); } org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.CreateBrick, new org.ovirt.engine.core.common.vdscommands.gluster.CreateBrickVDSParameters(getVdsId(), getParameters().getLvName(), getParameters().getMountPoint(), raidParams, org.ovirt.engine.core.common.constants.gluster.GlusterConstants.FS_TYPE_XFS, getParameters().getDisks())); setSucceeded(returnValue.getSucceeded()); if (getSucceeded()) { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice = ((org.ovirt.engine.core.common.businessentities.gluster.StorageDevice) (returnValue.getReturnValue())); storageDevice.setMountPoint(getParameters().getMountPoint()); storageDevice.setGlusterBrick(true); saveStoageDevice(storageDevice); resetIsFreeFlag(getParameters().getDisks()); } else { handleVdsError(returnValue); } }
@org.junit.Test public void testConstructor() { java.lang.String session = org.apache.commons.lang.RandomStringUtils.random(10); org.ovirt.engine.core.common.users.VdcUser user = mock(org.ovirt.engine.core.common.users.VdcUser.class); when(user.getUserId()).thenReturn(Guid.EVERYONE); org.ovirt.engine.core.common.action.VdcActionParametersBase paramterMock = mock(org.ovirt.engine.core.common.action.VdcActionParametersBase.class); when(paramterMock.getSessionId()).thenReturn(session); org.ovirt.engine.core.bll.session.SessionDataContainer.getInstance().setUser(session, user); org.ovirt.engine.core.bll.CommandBase<org.ovirt.engine.core.common.action.VdcActionParametersBase> command = new org.ovirt.engine.core.bll.CommandBaseTest.CommandBaseDummy(paramterMock); assertEquals("wrong user id on command", user.getUserId(), command.getUserId()); assertEquals("wrong user id on threadlocal", user, org.ovirt.engine.core.utils.ThreadLocalParamsContainer.getVdcUser()); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__REMOVE); addCanDoActionMessage(EngineMessage.VAR__TYPE__HOST_DEVICES); }
private boolean addInterfaceToProcessedList(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface) { if (ifaceByNames.containsKey(iface.getName())) { addViolation(VdcBllMessages.NETWORK_INTERFACES_ALREADY_SPECIFIED, iface.getName()); return false; } ifaceByNames.put(iface.getName(), iface); return true; }
@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); dao = prepareDAO(dbFacade.getBookmarkDao()); new_bookmark = new org.ovirt.engine.core.common.businessentities.bookmarks(); java.util.Random r = new java.util.Random(java.lang.System.currentTimeMillis()); new_bookmark.setbookmark_name(("newbookmarkname" + ((r.nextInt()) % (org.ovirt.engine.core.dao.BookmarkDAOTest.BOOKMARK_MAX_RANDOM_NUMBER)))); new_bookmark.setbookmark_value("newbookmarkvalue"); existing_bookmark = dao.get(new org.ovirt.engine.core.compat.Guid("a4affabf-7b45-4a6c-b0a9-107d0bbe265e")); }


@org.ovirt.engine.ui.webadmin.DefaultStringValue("Memory Page Sharing is Disabled") java.lang.String clusterPopupOptimizationNoneExplainationLabel();

public org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol determineConnectionProtocol(org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel item) { if (item.isPool()) { return null; } org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol selectedProtocol = item.getSelectedProtocol(); if ((((item.getAdditionalConsoleModel()) != null) && (isRDPAvailable())) && (selectedProtocol.equals(ConsoleProtocol.RDP))) { return org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.RDP; } else if ((((item.getDefaultConsoleModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.SpiceConsoleModel) && (isSpiceAvailable())) && (selectedProtocol.equals(ConsoleProtocol.SPICE))) { return org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.SPICE; } else if ((item.getDefaultConsoleModel()) instanceof org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel) { return org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.VNC; } return null; }


public static org.ovirt.engine.core.bll.context.CommandContext createInternalJobContext(org.ovirt.engine.core.utils.lock.EngineLock lock) { org.ovirt.engine.core.bll.job.ExecutionContext executionContext = new org.ovirt.engine.core.bll.job.ExecutionContext(); executionContext.setJobRequired(true); executionContext.setMonitored(true); return new org.ovirt.engine.core.bll.context.CommandContext(new org.ovirt.engine.core.bll.context.EngineContext()).withExecutionContext(executionContext).withLock(lock).withoutCompensationContext(); }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity fetchRemobeBricksStatusDetails() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterVolumeRemoveBricksStatus, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeRemoveBricksVDSParameters(getUpServerId(clusterId), volume.getName(), org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRemoveBricksStatusQuery.getParameters().getBricks(), volume.getReplicaCount())); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity entity = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity) (returnValue.getReturnValue())); org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask asyncTask = volume.getAsyncTask(); if ((asyncTask != null) && ((asyncTask.getTaskId()) != null)) { java.util.List<org.ovirt.engine.core.common.job.Step> stepsList = getStepDao().getStepsByExternalId(asyncTask.getTaskId()); if ((stepsList != null) && (!(stepsList.isEmpty()))) { entity.setStartTime(stepsList.get(0).getStartTime()); } } updateHostIP(entity); return entity.sort(); }

@java.lang.Override public void execute() { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.logger.fine(((this.getClass().getName()) + ": Executing search")); syncSearch(); }
public void destroy() { call(widget.getElement(), org.ovirt.engine.ui.common.widget.tooltip.Tooltip.DESTROY); if ((clickHandler) != null) { clickHandler.removeHandler(); clickHandler = null; } }

@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if ((ev.matchesDefinition(EntityModel.entityChangedEventDefinition)) && (sender == (getPath()))) { getPathChangedEvent().raise(this, EventArgs.Empty); } else if ((ev.matchesDefinition(EntityModel.entityChangedEventDefinition)) && (sender == (getOverride()))) { override_EntityChanged(args); } }
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm()) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVmPoolId()) == null) { return failCanDoAction(VdcBllMessages.VM_POOL_CANNOT_DETACH_VM_NOT_ATTACHED_TO_POOL); } if ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm().isRunningOrPaused()) || ((org.ovirt.engine.core.bll.RemoveVmFromPoolCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Unknown))) { return failCanDoAction(VdcBllMessages.VM_POOL_CANNOT_REMOVE_RUNNING_VM_FROM_POOL); } return true; }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__TYPE__STORAGE__DOMAIN); addCanDoActionMessage(EngineMessage.VAR__ACTION__ACTIVATE); }

public org.ovirt.engine.core.bll.ValidationResult networkQosExistsOrNull() { return ((vnicProfile.getNetworkQosId()) == null) || ((getDbFacade().getQosDao().get(vnicProfile.getNetworkQosId())) != null) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_NOT_EXISTS); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (vdsManager.isMonitoringNeeded()) { org.ovirt.engine.core.vdsbroker.monitoring.VmsListFetcher fetcher = new org.ovirt.engine.core.vdsbroker.monitoring.VmsStatisticsFetcher(vdsManager); long fetchTime = java.lang.System.nanoTime(); if (fetcher.fetch()) { getVmsMonitoring().perform(fetcher.getChangedVms(), fetchTime, vdsManager, true); processDevices(fetcher.getVdsmVms().stream(), fetchTime); } else { org.ovirt.engine.core.vdsbroker.monitoring.PollVmStatsRefresher.log.info("Failed to fetch vms info for host '{}' - skipping VMs monitoring.", vdsManager.getVdsName()); } } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("You must approve the action by clicking on this checkbox.") java.lang.String youMustApproveTheActionByClickingOnThisCheckboxInvalidReason();



@org.junit.Test public void someAddedStorageConnectionsAreNotAnIscsi() { org.ovirt.engine.core.common.businessentities.IscsiBond iscsiBond = createIscsiBond("First", org.ovirt.engine.core.compat.Guid.newGuid()); java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> conns = new java.util.ArrayList<>(); conns.add(createStorageConnection()); doReturn(conns).when(storageServerConnectionDao).getConnectableStorageConnectionsByStorageType(iscsiBond.getStoragePoolId(), StorageType.ISCSI); iscsiBond.getStorageConnectionIds().add(conns.get(0).getid()); iscsiBond.getStorageConnectionIds().add(org.ovirt.engine.core.compat.Guid.newGuid().toString()); org.ovirt.engine.core.bll.ValidationResult res = validator.validateAddedStorageConnections(iscsiBond); assertEquals(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTIONS_CANNOT_BE_ADDED_TO_ISCSI_BOND, res.getMessage()); assertEquals(1, res.getVariableReplacements().size()); assertEquals(("$connectionIds " + (iscsiBond.getStorageConnectionIds().get(1).toString())), res.getVariableReplacements().get(0)); }
@org.junit.Before public void setUpContainer() { when(engineSessionDao.remove(any(java.lang.Long.class))).thenReturn(1); when(ssoSessionValidator.isSessionValid(anyString())).thenReturn(true); org.ovirt.engine.core.common.businessentities.aaa.DbUser user = mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); container.setSSOSessionValidaor(ssoSessionValidator); container.setUser(org.ovirt.engine.core.bll.aaa.SessionDataContainerTest.TEST_SESSION_ID, user); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.DbUser.class, to = org.ovirt.engine.api.model.User.class) public static org.ovirt.engine.api.model.User map(org.ovirt.engine.core.common.businessentities.DbUser entity, org.ovirt.engine.api.model.User template) { org.ovirt.engine.api.model.User model = (template != null) ? template : new org.ovirt.engine.api.model.User(); model.setName(entity.getname()); model.setUserName(entity.getusername()); model.setId(entity.getuser_id().toString()); model.setLastName(entity.getsurname()); model.setEmail(entity.getemail()); model.setDepartment(entity.getdepartment()); if ((entity.getgroups()) != null) { model.setGroups(new org.ovirt.engine.api.model.Groups()); for (java.lang.String name : entity.getgroups().split(",")) { org.ovirt.engine.api.model.Group group = new org.ovirt.engine.api.model.Group(); group.setName(name); model.getGroups().getGroups().add(group); } } if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(entity.getdomain()))) { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain(); dom.setName(entity.getdomain()); dom.setId(new org.ovirt.engine.core.compat.NGuid(entity.getdomain().getBytes(), true).toString()); model.setDomain(dom); } return model; }
@java.lang.Override public org.ovirt.engine.core.aaa.DirectoryGroup findGroup(org.ovirt.engine.core.common.utils.ExternalId id) { org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapReturnValueBase ldapResult = broker.runAdAction(AdActionType.GetAdGroupByGroupId, new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapSearchByIdParameters(getName(), id)); org.ovirt.engine.core.common.businessentities.LdapGroup ldapGroup = ((org.ovirt.engine.core.common.businessentities.LdapGroup) (ldapResult.getReturnValue())); return mapGroup(ldapGroup); }
@org.junit.Test public void testGetTreeForEntityWithRoleTypeFilteredWithNoPermissions() { java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> result = dao.getTreeForEntity(org.ovirt.engine.core.dao.PermissionDAOTest.STORAGE_ENTITY_ID, VdcObjectType.Storage, org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID, true); org.ovirt.engine.core.dao.PermissionDAOTest.assertInvalidGetPermissionList(result); }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeGeoRepSessionVDSParameters parameter = org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeGeoRepStatusDetailVDSCommand.getParameters(); result = org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeGeoRepStatusDetailVDSCommand.getBroker().glusterVolumeGeoRepStatusDetail(parameter.getVolumeName(), parameter.getSlaveHost(), parameter.getSlaveVolume()); org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeGeoRepStatusDetailVDSCommand.proceedProxyReturnValue(); if (org.ovirt.engine.core.vdsbroker.gluster.GetGlusterVolumeGeoRepStatusDetailVDSCommand.getVDSReturnValue().getSucceeded()) { setReturnValue(result.getGeoRepDetails()); } }

private void UpdateVmNetworks() { if (!(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getVdsGroupId().equals(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getvds_group_id()))) { java.util.List<org.ovirt.engine.core.common.businessentities.Network> networks = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDao().getAllForCluster(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getvds_group_id()); java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> interfaces = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao().getAllForVm(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData().getId()); for (final org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : interfaces) { org.ovirt.engine.core.common.businessentities.Network net = org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(networks, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.Network>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.Network n) { return iface.getNetworkName().equals(n.getname()); } }); if (net == null) { iface.setNetworkName(null); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao().update(iface); } } } }
@java.lang.Override public void template_SelectedItemChanged() { super.template_SelectedItemChanged(); org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel().getTemplate().getSelectedItem(); if (template == null) { return; } setupWindowModelFrom(template); updateHostPinning(template.getMigrationSupport()); doChangeDefautlHost(template.getDedicatedVmForVds()); }
@org.junit.Test public void canDoChangeComment() { sd.setComment(org.apache.commons.lang.StringUtils.reverse(sd.getComment())); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(cmd); }

public org.ovirt.engine.api.model.RSDL loadRsdl(org.ovirt.engine.core.common.mode.ApplicationMode applicationMode) throws java.io.IOException { java.io.InputStream stream = (applicationMode == (org.ovirt.engine.core.common.mode.ApplicationMode.GlusterOnly)) ? this.getClass().getResourceAsStream(org.ovirt.engine.api.rsdl.RsdlManager.GLUSTER_RSDL_FILE_NAME) : this.getClass().getResourceAsStream(org.ovirt.engine.api.rsdl.RsdlManager.RSDL_FILE_NAME); return javax.xml.bind.JAXB.unmarshal(stream, org.ovirt.engine.api.model.RSDL.class); }

@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; if ((getClass()) != (obj.getClass())) return false; org.ovirt.engine.core.common.scheduling.ClusterPolicy other = ((org.ovirt.engine.core.common.scheduling.ClusterPolicy) (obj)); if ((balance) == null) { if ((other.balance) != null) return false; } else if (!(balance.equals(other.balance))) return false; if ((defaultPolicy) != (other.defaultPolicy)) return false; if ((description) == null) { if ((other.description) != null) return false; } else if (!(description.equals(other.description))) return false; if ((filterPositionMap) == null) { if ((other.filterPositionMap) != null) return false; } else if (!(filterPositionMap.equals(other.filterPositionMap))) return false; if ((filters) == null) { if ((other.filters) != null) return false; } else if (!(filters.equals(other.filters))) return false; if ((functions) == null) { if ((other.functions) != null) return false; } else if (!(functions.equals(other.functions))) return false; if ((id) == null) { if ((other.id) != null) return false; } else if (!(id.equals(other.id))) return false; if ((locked) != (other.locked)) return false; if ((name) == null) { if ((other.name) != null) return false; } else if (!(name.equals(other.name))) return false; if ((parameterMap) == null) { if ((other.parameterMap) != null) return false; } else if (!(parameterMap.equals(other.parameterMap))) return false; return true; }
public void ensureColumnPresent(com.google.gwt.user.cellview.client.Column<T, ?> column, java.lang.String headerText, boolean present, java.lang.String width) { java.lang.Integer index = getColumnIndex(column); boolean columnPresent = index != (-1); if (!columnPresent) { if (width == null) { addColumnWithHtmlHeader(column, headerText); } else { addColumnWithHtmlHeader(column, headerText, width); } index = getColumnIndex(column); } columnVisibleMap.put(index, present); if (columnResizePersistenceEnabled) { java.lang.String persistedWidth = readColumnWidth(column); if (persistedWidth != null) { width = persistedWidth; } } setColumnWidth(column, width); }
public void setStateless(boolean value) { vmStatic.setis_stateless(value); }

protected byte[] runHttpMethod(org.ovirt.engine.core.bll.provider.BaseProviderProxy.HttpMethodType httpMethod, java.lang.String contentType, java.lang.String body, java.net.HttpURLConnection connection) { byte[] result = null; try { connection.setRequestProperty("Content-Type", contentType); connection.setDoInput(true); connection.setDoOutput((httpMethod != (org.ovirt.engine.core.bll.provider.BaseProviderProxy.HttpMethodType.GET))); connection.setRequestMethod(httpMethod.toString()); if (body != null) { byte[] bytes = body.getBytes(java.nio.charset.StandardCharsets.UTF_8); connection.setRequestProperty("Content-Length", new java.lang.StringBuilder().append(bytes.length).toString()); try (java.io.OutputStream outputStream = connection.getOutputStream()) { outputStream.write(bytes); } } result = getResponse(connection); } catch (javax.net.ssl.SSLException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_SSL_FAILURE, e.getMessage()); } catch (java.io.IOException e) { org.ovirt.engine.core.bll.provider.BaseProviderProxy.handleException(e); } finally { if (connection != null) { connection.disconnect(); } } return result; }

@java.lang.Override protected void copyVmDevices() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmDevice>(vmFromConfiguration.getVmUnamagedDeviceList()); devices.addAll(vmFromConfiguration.getManagedVmDeviceMap().values()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.copyVmDevices(getVmIdFromSnapshot(), org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVmId(), org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVm(), org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getVm().getStaticData(), true, devices, newDiskImages, _vmInterfaces, org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().isSoundDeviceEnabled(), org.ovirt.engine.core.bll.AddVmFromSnapshotCommand.getParameters().isConsoleEnabled()); }
@org.junit.Test public void vmNetworkWithVlanNetworkDenied() { org.ovirt.engine.core.common.businessentities.network.Network net1 = createNetwork("net1"); org.ovirt.engine.core.common.businessentities.network.Network net2 = createNetwork("net2"); net2.setVlanId(100); mockExistingNetworks(net1, net2); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNic("nic0", null); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlanNic = createVlan(nic.getName(), net2.getVlanId(), net2.getName()); mockExistingIfaces(nic, vlanNic); nic.setNetworkName(net1.getName()); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(vlanNic, nic)); validateAndExpectViolation(helper, VdcBllMessages.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK, nic.getName()); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("System Permission") java.lang.String systemPermissionTitle();
@java.lang.Override public javax.ws.rs.core.Response performRemove(java.lang.String id) { org.ovirt.engine.core.common.businessentities.network.Network entity = lookupNetwork(asGuidOr404(id)); if (entity == null) { notFound(); return null; } return performAction(removeAction, getActionParameters(null, entity)); }


@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.userportal.IUserPortalListModel model) { this.model = model; ctrlAltDel.asEditor().getSubEditor().setValue(((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (model.getSelectedItem())).getDefaultConsole()); enableUsbAutoshare.asEditor().getSubEditor().setValue(((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (model.getSelectedItem())).getDefaultConsole()); openInFullScreen.asEditor().getSubEditor().setValue(((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (model.getSelectedItem())).getDefaultConsole()); useLocalDrives.asEditor().getSubEditor().setValue(((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (model.getSelectedItem())).getDefaultConsole()); }

public java.util.Map<java.lang.String, java.lang.Object> glusterVolumeGeoRepSessionDelete(java.lang.String volumeName, java.lang.String remoteHost, java.lang.String remoteVolumeName);
private void newTemplate() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getSelectedItem())); if (vm == null) { return; } if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateVmModelBehavior(vm)); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newTemplateTitle()); model.setHashName("new_template"); model.setIsNew(true); model.getVmType().setSelectedItem(vm.getVmType()); model.initialize(getSystemTreeSelectedItem()); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnNewTemplate", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); model.getIsHighlyAvailable().setEntity(vm.getStaticData().isAutoStartup()); }


public java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSetupNetworksLock(org.ovirt.engine.core.compat.Guid hostId) { return java.util.Collections.singletonMap(((LockingGroup.HOST_NETWORK.name()) + (hostId.toString())), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.HOST_NETWORK, EngineMessage.ACTION_TYPE_FAILED_SETUP_NETWORKS_OR_REFRESH_IN_PROGRESS)); }

public org.ovirt.engine.core.bll.ValidationResult validateCinderDiskLimits() { return validate(new java.util.concurrent.Callable<org.ovirt.engine.core.bll.ValidationResult>() { @java.lang.Override public org.ovirt.engine.core.bll.ValidationResult call() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageMap = getRelatedCinderDisksToStorageDomainMap(); java.util.Collection<org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageCollection = relatedCinderDisksByStorageMap.values(); for (org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy relatedCinderDisksByStorage : relatedCinderDisksByStorageCollection) { com.woorea.openstack.cinder.model.Limits limits = relatedCinderDisksByStorage.getProxy().getLimits(); int numOfDisks = relatedCinderDisksByStorage.getCinderDisks().size(); if (isLimitExceeded(limits, VolumeClassification.Volume, numOfDisks)) { java.lang.String storageName = getStorageDomainDao().get(relatedCinderDisksByStorage.getStorageDomainId()).getStorageName(); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.CANNOT_ADD_CINDER_DISK_VOLUME_LIMIT_EXCEEDED, java.lang.String.format("$maxTotalVolumes %d", limits.getAbsolute().getMaxTotalVolumes()), java.lang.String.format("$storageName %s", storageName)); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; } }); }
private void updateItems(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.AuditLog> source) { if ((getItems()) == null) { return; } if (!(source.isEmpty())) { org.ovirt.engine.ui.frontend.communication.RefreshActiveModelEvent.fire(this, false); } java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog> list = ((java.util.List<org.ovirt.engine.core.common.businessentities.AuditLog>) (getItems())); java.util.Collections.sort(source, new org.ovirt.engine.ui.uicommonweb.Linq.AuditLogComparer()); for (org.ovirt.engine.core.common.businessentities.AuditLog item : source) { if ((list.size()) == (getSearchPageSize())) { list.remove(((list.size()) - 1)); } list.add(0, item); } getItemsChangedEvent().raise(this, EventArgs.Empty); setLastEvent(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(list)); if ((org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(list)) == null) { onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("LastEvent")); } }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.StorageDomain get(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getCallsHandler().executeRead("Getstorage_domains_By_id", org.ovirt.engine.core.dao.StorageDomainDAODbFacadeImpl.StorageDomainRowMapper.instance, getCustomMapSqlParameterSource().addValue("id", id).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }
@org.junit.Test public void testUpdateOvfDiskNotSupported() { org.ovirt.engine.core.common.businessentities.storage.DiskImage updatedDisk = createDiskImage(); updatedDisk.setReadOnly(true); updatedDisk.setDiskInterface(DiskInterface.IDE); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskFromDB = createDiskImage(); diskFromDB.setReadOnly(false); diskFromDB.setDiskInterface(DiskInterface.IDE); diskFromDB.setContentType(DiskContentType.OVF_STORE); when(diskDao.get(diskImageGuid)).thenReturn(diskFromDB); initializeCommand(new org.ovirt.engine.core.common.action.UpdateVmDiskParameters(vmId, diskImageGuid, updatedDisk)); when(diskValidator.isDiskUsedAsOvfStore()).thenCallRealMethod(); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_OVF_DISK_NOT_SUPPORTED); }

@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.roles object) { return object.getname(); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to copy Template between Storage Domains") java.lang.String allowToCopyTemplateBetweenStorageDomainsRoleTreeTooltip();


@org.junit.Test public void NameLengthIsTooLong() { when(host.getName()).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(((org.ovirt.engine.core.bll.validator.HostValidatorTest.HOST_NAME_SIZE) * 2))); assertThat(validator.nameLengthIsLegal(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG)); }
@java.lang.Override public void selectSpiceImplementation(org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel.ClientConsoleMode consoleMode) { switch (consoleMode) { case Native : spiceAutoImplRadioButton.asRadioButton().setValue(false); spicePluginImplRadioButton.asRadioButton().setValue(false); spiceNativeImplRadioButton.asRadioButton().setValue(true); break; case Plugin : spiceAutoImplRadioButton.asRadioButton().setValue(false); spicePluginImplRadioButton.asRadioButton().setValue(true); spiceNativeImplRadioButton.asRadioButton().setValue(false); break; default : spiceAutoImplRadioButton.asRadioButton().setValue(true); spicePluginImplRadioButton.asRadioButton().setValue(false); spiceNativeImplRadioButton.asRadioButton().setValue(false); break; } }
protected org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer> connect(org.ovirt.engine.core.compat.Guid vdsId) { java.util.HashMap<java.lang.String, java.lang.String> result = ((java.util.HashMap<java.lang.String, java.lang.String>) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ConnectStorageServer, new org.ovirt.engine.core.common.vdscommands.ConnectStorageServerVDSCommandParameters(vdsId, org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getParameters().getStorageServerConnection().getstorage_type(), new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageServerConnections>(java.util.Arrays.asList(new org.ovirt.engine.core.common.businessentities.StorageServerConnections[]{ org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getConnection() })))).getReturnValue())); return new org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>(org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getParameters().getStorageServerConnection().getstorage_type()).isConnectSucceeded(result, java.util.Arrays.asList(org.ovirt.engine.core.bll.storage.ConnectStorageToVdsCommand.getConnection())), java.lang.Integer.parseInt(result.values().iterator().next())); }
private void initStorageDomainDiscardAfterDelete(org.ovirt.engine.core.compat.Version compatibilityVersion) { if ((org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().getDiscardAfterDelete()) == null) { org.ovirt.engine.core.bll.storage.domain.AddStorageDomainCommand.getStorageDomain().setDiscardAfterDelete(getDefaultDiscardAfterDelete(compatibilityVersion)); } }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (!(org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterSnapshot(org.ovirt.engine.core.bll.gluster.GlusterSnapshotCommandBase.getVdsGroup().getCompatibilityVersion()))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VOLUME_SNAPSHOT_NOT_SUPPORTED); } return true; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Invalid E-Mail address") java.lang.String invalidEmailAddressInvalidReason();

@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } super.syncSearch(); org.ovirt.engine.core.common.businessentities.VmTemplate template = ((org.ovirt.engine.core.common.businessentities.VmTemplate) (getEntity())); super.syncSearch(VdcQueryType.GetStorageDomainsByVmTemplateId, new org.ovirt.engine.core.common.queries.IdQueryParameters(template.getId())); }
@java.lang.Override protected void setActionMessageParameters() { if (!(org.apache.commons.lang.StringUtils.isEmpty(cdImagePath))) { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__CHANGE_CD); } else { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__EJECT_CD); } addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM); }
public org.ovirt.engine.core.bll.ValidationResult validBond(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { if (!(java.lang.Boolean.TRUE.equals(iface.getBonded()))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } int slavesCount = getSlaveCount(nics); return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.NETWORK_BONDS_INVALID_SLAVE_COUNT, ("$NETWORK_BONDS_INVALID_SLAVE_COUNT_LIST " + slavesCount)).when((slavesCount < 2)); }
@org.junit.experimental.theories.Theory public void testConcreateCreateTaskBackwardsComaptibility(org.ovirt.engine.core.bll.CommandBase<? extends org.ovirt.engine.core.common.action.VdcActionParametersBase> cmd) { org.ovirt.engine.core.common.action.VdcActionParametersBase params = cmd.getParameters(); params.setEntityId(org.ovirt.engine.core.compat.Guid.NewGuid()); params.setParentCommand(org.ovirt.engine.core.utils.RandomUtils.instance().nextEnum(org.ovirt.engine.core.common.action.VdcActionType.class)); params.setParentParameters(params); org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo info = org.ovirt.engine.core.bll.BackwardCompatibilityTaskCreationTest.nextAsyncTaskCreationInfo(); org.ovirt.engine.core.bll.SPMAsyncTask spmAsyncTask = cmd.concreteCreateTask(Guid.Empty, info, cmd.getParameters().getParentCommand()); assertEquals("wrong storage pool ID", info.getStoragePoolID(), spmAsyncTask.getStoragePoolID()); assertEquals("wrong task ID", info.getVdsmTaskId(), spmAsyncTask.getVdsmTaskId()); assertEquals("wrong task result", AsyncTaskResultEnum.success, spmAsyncTask.getLastTaskStatus().getResult()); assertEquals("wrong task status", AsyncTaskStatusEnum.init, spmAsyncTask.getLastTaskStatus().getStatus()); assertEquals("wrong task state", AsyncTaskState.Initializing, spmAsyncTask.getState()); assertTrue("wrong task type", (spmAsyncTask instanceof org.ovirt.engine.core.bll.EntityAsyncTask)); }
@org.junit.Test public void providerIsNotSet() throws java.lang.Exception { validator = new org.ovirt.engine.core.bll.provider.ProviderValidator(null); assertThat(validator.providerIsSet(), failsWith(VdcBllMessages.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST)); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getExportCommand())) { export(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().exportTemplateTitle()); } else if ("Cancel".equals(command.getName())) { cancel(); } else if ("OnExport".equals(command.getName())) { onExport(); } else if ("OnSave".equals(command.getName())) { onSave(); } else if ("OnRemove".equals(command.getName())) { onRemove(); } }
@java.lang.Override protected void EndSuccessfully() { setVmTemplateId(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getVmTemplateId()); org.ovirt.engine.core.bll.AddVmTemplateCommand.setVmTemplate(null); for (org.ovirt.engine.core.common.action.VdcActionParametersBase p : org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getImagesParameters()) { org.ovirt.engine.core.bll.Backend.getInstance().EndAction(VdcActionType.CreateImageTemplate, p); } if ((org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplate()) != null) { UpdateTemplateInSpm(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplate().getstorage_pool_id().getValue(), new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate>(java.util.Arrays.asList(new org.ovirt.engine.core.common.businessentities.VmTemplate[]{ org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplate() }))); if ((org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm()) != null) { org.ovirt.engine.core.bll.VmHandler.UnLockVm(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm().getId()); } else { log.warn("AddVmTemplateCommand::EndSuccessfully: Vm is null, cannot unlock Vm"); } org.ovirt.engine.core.bll.VmTemplateHandler.UnLockVmTemplate(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); } else { org.ovirt.engine.core.bll.AddVmTemplateCommand.setCommandShouldBeLogged(false); log.warn("AddVmTemplateCommand::EndSuccessfully: VmTemplate is null - not performing full EndAction"); } org.ovirt.engine.core.bll.AddVmTemplateCommand.setSucceeded(true); }
private void createConfigurationProvider(java.lang.String engineConfigProperties) throws org.ovirt.engine.core.domains.ManageDomainsResult { try { java.lang.String engineConfigExecutable = utilityConfiguration.getEngineConfigExecutablePath(); java.lang.String adUserName = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserName); java.lang.String domainName = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.DomainName); java.lang.String ldapSecurityAuthentication = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LDAPSecurityAuthentication); java.lang.String adUserPassword = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserPassword); java.lang.String adUserId = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.AdUserId); java.lang.String ldapServers = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LdapServers); java.lang.String ldapProviderTypes = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LDAPProviderTypes); java.lang.String ldapPort = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.LDAPServerPort); if (ldapPort == null) { ldapPort = org.ovirt.engine.core.domains.ManageDomains.DEFAULT_LDAP_SERVER_PORT; } java.lang.String changePasswordUrl = getConfigValue(engineConfigExecutable, engineConfigProperties, ConfigValues.ChangePasswordUrl); if (changePasswordUrl == null) { changePasswordUrl = ""; } configurationProvider = new org.ovirt.engine.core.domains.ConfigurationProvider(adUserName, adUserPassword, domainName, ldapSecurityAuthentication, ldapServers, adUserId, ldapProviderTypes, utilityConfiguration.getEngineConfigExecutablePath(), engineConfigProperties, ldapPort, changePasswordUrl); } catch (java.lang.Throwable e) { throw new org.ovirt.engine.core.domains.ManageDomainsResult(ManageDomainsResultEnum.FAILED_READING_CURRENT_CONFIGURATION, e.getMessage()); } }
@org.junit.Before public void setup() { cluster1 = createCluster(); cluster2 = createCluster(); when(clusterDao.getWithoutMigratingVms()).thenReturn(java.util.Arrays.asList(cluster1, cluster2)); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster1))).thenReturn(vm1); when(rulesEnforcer.chooseNextVmToMigrate(eq(cluster2))).thenReturn(vm2); arem.wakeup(); }
@java.lang.Override protected void doSetCallback(com.google.gwt.http.client.RequestBuilder rb, final com.google.gwt.http.client.RequestCallback callback) { rb.setCallback(new com.google.gwt.http.client.RequestCallback() { @java.lang.Override public void onResponseReceived(com.google.gwt.http.client.Request request, com.google.gwt.http.client.Response response) { java.lang.String tokenValue = response.getHeader("OVIRT-SSO-TOKEN"); if (tokenValue != null) { org.ovirt.engine.ui.frontend.communication.SSOTokenChangeEvent.fire(eventBus, tokenValue); } callback.onResponseReceived(request, response); } @java.lang.Override public void onError(com.google.gwt.http.client.Request request, java.lang.Throwable exception) { callback.onError(request, exception); } }); }

protected boolean checkUserAndGroupsAuthorization(org.ovirt.engine.core.compat.Guid userId, java.util.HashSet<org.ovirt.engine.core.compat.Guid> groupIds, final org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup, final org.ovirt.engine.core.compat.Guid object, final org.ovirt.engine.core.common.VdcObjectType type, final boolean ignoreEveryone) { final org.ovirt.engine.core.compat.Guid permId = org.ovirt.engine.core.bll.CommandBase.getPermissionDAO().getEntityPermissionsForUserAndGroups(userId, org.apache.commons.lang.StringUtils.join(groupIds, ","), actionGroup, object, type, ignoreEveryone); if (permId != null) { if (log.isDebugEnabled()) { log.debugFormat("Found permission {0} for user when running {1}, on {2} with id {3}", permId, getActionType(), type.getVdcObjectTranslation(), object); } return true; } if (log.isDebugEnabled()) { log.debugFormat("No permission found for user when running action {0}, on object {1} for action group {2} with id {3}.", getActionType(), type.getVdcObjectTranslation(), actionGroup, object); } return false; }
private void updateSnapshotIdOnShareableChange(org.ovirt.engine.core.common.businessentities.storage.Disk oldDisk, org.ovirt.engine.core.common.businessentities.storage.Disk newDisk) { if (((oldDisk.isShareable()) != (newDisk.isShareable())) && ((oldDisk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.Disk.DiskStorageType.IMAGE))) { org.ovirt.engine.core.common.businessentities.DiskImage oldDiskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (oldDisk)); org.ovirt.engine.core.compat.Guid vmSnapshotId = (isUpdatedToShareable(oldDisk, newDisk)) ? null : org.ovirt.engine.core.bll.UpdateVmDiskCommand.getSnapshotDao().getId(org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVmId(), SnapshotType.ACTIVE); oldDiskImage.setVmSnapshotId(vmSnapshotId); } }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters buildDeleteMemoryImageParams(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.storage.domain.PostDeleteActionHandler.class).fixParameters(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(guids.get(1), guids.get(0), guids.get(2), isPostZero(), false)); }

@java.lang.Override public void onFailure(final java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.queries.VdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase>> operationList, final java.lang.Throwable caught) { try { if (ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ("Failed to execute runMultipleQueries: " + caught), caught); org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult(queryTypeList, queryParamsList, null); failureEventHandler(caught); callback.executed(f); } finally { org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent.fire(this, state); raiseQueryCompleteEvent(queryTypeList, state); } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to create Storage Domain") java.lang.String allowToCreateStorageDomainRoleTreeTooltip();
private void setupParentExpectations() { bricksResourceMock = control.createMock(org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBricksResource.class); volumeResourceMock = control.createMock(org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterVolumeResource.class); expect(bricksResourceMock.getParent()).andReturn(volumeResourceMock).anyTimes(); expect(volumeResourceMock.getId()).andReturn(org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBrickResourceTest.volumeId.toString()).anyTimes(); expect(bricksResourceMock.addParents(isA(org.ovirt.engine.api.model.GlusterBrick.class))).andDelegateTo(new org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBricksResource() { @java.lang.Override protected org.ovirt.engine.api.model.GlusterBrick addParents(org.ovirt.engine.api.model.GlusterBrick glusterBrick) { org.ovirt.engine.api.model.Cluster cluster = new org.ovirt.engine.api.model.Cluster(); cluster.setId(org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBrickResourceTest.clusterId.toString()); org.ovirt.engine.api.model.GlusterVolume volume = new org.ovirt.engine.api.model.GlusterVolume(); volume.setId(org.ovirt.engine.api.restapi.resource.gluster.BackendGlusterBrickResourceTest.volumeId.toString()); volume.setCluster(cluster); glusterBrick.setGlusterVolume(volume); return glusterBrick; } }).anyTimes(); }

@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Disk object) { getCell().setTitle(org.ovirt.engine.ui.uicompat.external.StringUtils.join(object.getVmNames(), ", ")); if ((object.getNumberOfVms()) == 0) { return ""; } java.lang.String entityType = org.ovirt.engine.ui.uicompat.EnumTranslator.createAndTranslate(object.getVmEntityType()); if ((object.getNumberOfVms()) == 1) { java.lang.String entityName = object.getVmNames().get(0); return entityName; } else { return (((object.getNumberOfVms()) + " ") + entityType) + "s"; } }
private void checkVdsSwapThreshold(org.ovirt.engine.core.common.businessentities.VdsStatistics stat) { java.lang.Integer minAvailableThreshold = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.LogPhysicalMemoryThresholdInMB); java.lang.Integer maxUsedPercentageThreshold = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.LogMaxPhysicalMemoryUsedThresholdInPercentage); if ((((stat.getswap_total()) == null) || ((stat.getswap_free()) == null)) || ((stat.getswap_total()) == 0)) { return; } java.lang.Long swapUsedPercent = ((stat.getswap_total()) - (stat.getswap_free())) / (stat.getswap_total()); org.ovirt.engine.core.common.AuditLogType valueToLog = ((stat.getswap_free()) < minAvailableThreshold) ? org.ovirt.engine.core.common.AuditLogType.VDS_LOW_SWAP : org.ovirt.engine.core.common.AuditLogType.VDS_HIGH_SWAP_USE; if (((stat.getswap_free()) < minAvailableThreshold) || (swapUsedPercent > maxUsedPercentageThreshold)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(stat.getId()); logable.addCustomValue("HostName", _vds.getName()); logable.addCustomValue("UsedSwap", swapUsedPercent.toString()); logable.addCustomValue("AvailableSwapMemory", stat.getswap_free().toString()); logable.addCustomValue("Threshold", ((stat.getswap_free()) < minAvailableThreshold ? minAvailableThreshold.toString() : maxUsedPercentageThreshold.toString())); auditLog(logable, valueToLog); } }

@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.DbGroup.class, to = org.ovirt.engine.api.model.Group.class) public static org.ovirt.engine.api.model.Group map(org.ovirt.engine.core.common.businessentities.DbGroup entity, org.ovirt.engine.api.model.Group template) { org.ovirt.engine.api.model.Group model = (template != null) ? template : new org.ovirt.engine.api.model.Group(); model.setName(entity.getName()); model.setId(entity.getId().toString()); if (!(org.apache.commons.lang.StringUtils.isEmpty(entity.getDomain()))) { org.ovirt.engine.api.model.Domain dom = new org.ovirt.engine.api.model.Domain(); dom.setId(new org.ovirt.engine.core.compat.Guid(entity.getDomain().getBytes(), true).toString()); model.setDomain(dom); } return model; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.initializeStorageDomain(); java.lang.String storage = ((org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage()) != null) ? org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage() : ""; org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(""); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInDb(); if (org.apache.commons.lang.StringUtils.isEmpty(storage)) { storage = createVG(); } org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().setStorage(storage); if ((org.apache.commons.lang.StringUtils.isNotEmpty(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorage())) && (org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.addStorageDomainInIrs())) { org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.updateStorageDomainDynamicFromIrs(); proceedVGLunsInDb(); blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getVds().getId()); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData()); org.ovirt.engine.core.bll.storage.domain.AddSANStorageDomainCommand.setSucceeded(true); } }

public java.lang.String getLastReport() { return lastReport; }
@java.lang.Override public void addQuotaPermissionSubject(java.util.List<org.ovirt.engine.core.common.PermissionSubject> quotaPermissionList) { if ((((org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePool()) != null) && ((getQuotaId()) != null)) && (!(org.ovirt.engine.core.bll.UpdateVmCommand.getStoragePool().getQuotaEnforcementType().equals(QuotaEnforcementTypeEnum.DISABLED)))) { quotaPermissionList.add(new org.ovirt.engine.core.common.PermissionSubject(getQuotaId(), org.ovirt.engine.core.common.VdcObjectType.Quota, org.ovirt.engine.core.common.businessentities.ActionGroup.CONSUME_QUOTA)); } }
@org.junit.Test public void testHasPeersFalse() { doReturn(org.ovirt.engine.core.utils.gluster.GlusterUtilTest.OUTPUT_XML_NO_PEERS).when(glusterUtil).executePeerStatusCommand(client); assertTrue(glusterUtil.getPeers(client).isEmpty()); }
@org.junit.Test public void testGetOperationResult_Empty() { java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<?, ?>> testOperationList = new java.util.ArrayList<org.ovirt.engine.ui.frontend.communication.VdcOperation<?, ?>>(); java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<?, ?>> allOperationList = new java.util.ArrayList<org.ovirt.engine.ui.frontend.communication.VdcOperation<?, ?>>(); java.util.List<?> allResults = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase>(); java.util.List<?> result = testProvider.getOperationResult(testOperationList, allOperationList, allResults); assertEquals("Result should have no results", 0, result.size()); }

@org.ovirt.engine.ui.webadmin.DefaultStringValue("Subnets") java.lang.String networkExternalSubnetSubTabLabel();
private boolean ensureDestinationImageMap() { if (diskInfoDestinationMap.isEmpty()) { if (((org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getStorageDomainId()) != null) && (!(Guid.Empty.equals(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getStorageDomainId())))) { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getStorageDomainId(); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> storageIds = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); storageIds.add(storageId); for (org.ovirt.engine.core.common.businessentities.DiskImage image : org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplate().getDiskTemplateMap().values()) { image.setStorageIds(storageIds); diskInfoDestinationMap.put(image.getId(), image); } } else { org.ovirt.engine.core.bll.ImagesHandler.fillImagesMapBasedOnTemplate(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplate(), diskInfoDestinationMap, destStorages, false); } } if ((org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplate().getDiskTemplateMap().values().size()) != (diskInfoDestinationMap.size())) { log.error("Can not found any default active domain for one of the disks of template with id '{}'", org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getVmTemplate().getId()); addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_MISSED_STORAGES_FOR_SOME_DISKS); return false; } return true; }

public org.ovirt.engine.core.bll.ValidationResult isReadOnlyPropertyCompatibleWithInterface() { if (java.lang.Boolean.TRUE.equals(disk.getReadOnly())) { org.ovirt.engine.core.common.businessentities.storage.DiskInterface diskInterface = disk.getDiskInterface(); if (diskInterface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR, java.lang.String.format("$interface %1$s", diskInterface)); } if (disk.isScsiPassthrough()) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.SCSI_PASSTHROUGH_IS_NOT_SUPPORTED_FOR_READ_ONLY_DISK); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private javax.ws.rs.core.Response performCreate(org.ovirt.engine.api.model.ImageTransfer imageTransfer, org.ovirt.engine.core.common.action.TransferDiskImageParameters params) { updateTransferType(imageTransfer, params); if ((imageTransfer.isSetHost()) && (imageTransfer.getHost().isSetId())) { params.setVdsId(org.ovirt.engine.core.compat.Guid.createGuidFromString(imageTransfer.getHost().getId())); } return performCreate(ActionType.TransferDiskImage, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.QueryType.GetImageTransferById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
private org.ovirt.engine.core.common.queries.VdcQueryReturnValue getErrorQueryReturnValue(org.ovirt.engine.core.common.errors.VdcBllMessages errorMessage) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = new org.ovirt.engine.core.common.queries.VdcQueryReturnValue(); returnValue.setSucceeded(false); returnValue.setExceptionString(errorMessage.toString()); return returnValue; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc setSafeNetworkConfig() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.setSafeNetworkConfig").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@org.ovirt.engine.ui.common.DefaultStringValue("Make Private") java.lang.String makeTemplateIsTemplatePrivateEditorLabel();
private boolean validateStoragePropertiesUpdate() { if ((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.getChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.domain.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn("There was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failValidation(EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
private boolean checkIsDomainLocked(org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainMap) { if ((org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Locked) == (domainMap.getStatus())) { addInvalidSDStatusMessage(StorageDomainStatus.Locked); return true; } return false; }

private void initVm(org.ovirt.engine.core.common.businessentities.VMStatus vmStatus, org.ovirt.engine.core.compat.NGuid runOnVds, org.ovirt.engine.core.compat.Guid diskImageId) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setStatus(vmStatus); vm.setRunOnVds(runOnVds); when(vmDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(vm); when(vmDao.getVmsListForDisk(diskImageId)).thenReturn(java.util.Collections.singletonList(vm)); }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Edit Template") java.lang.String editTemplateTitle();
protected void setUpEntityQueryExpectations(org.ovirt.engine.core.common.queries.VdcQueryType query, java.lang.Class<? extends org.ovirt.engine.core.common.queries.VdcQueryParametersBase> queryClass, java.lang.String[] queryNames, java.lang.Object[] queryValues, java.lang.Object queryReturn, java.lang.Object failure) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = control.createMock(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); expect(queryResult.getSucceeded()).andReturn((failure == null)).anyTimes(); if (failure == null) { expect(queryResult.getReturnValue()).andReturn(queryReturn).anyTimes(); } else { if (failure instanceof java.lang.String) { expect(queryResult.getExceptionString()).andReturn(((java.lang.String) (failure))).anyTimes(); setUpL10nExpectations(((java.lang.String) (failure))); } else if (failure instanceof java.lang.Exception) { expect(queryResult.getExceptionString()).andThrow(((java.lang.Exception) (failure))).anyTimes(); } } if (queryClass == (org.ovirt.engine.core.common.queries.GetPermissionsForObjectParameters.class)) { expect(backend.runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).andReturn(queryResult).anyTimes(); } else { expect(backend.runQuery(eq(query), eqQueryParams(queryClass, addSession(queryNames), addSession(queryValues)))).andReturn(queryResult); } }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.GraphicsDevice dev = org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getParameters().getDev(); if (dev == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_DEVICE_MUST_BE_SPECIFIED); } if ((org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getParameters().isVm()) && ((org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getVm()) == null)) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((!(org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getParameters().isVm())) && ((org.ovirt.engine.core.bll.AbstractGraphicsDeviceCommand.getVmTemplate()) == null)) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST); } if ((dev.getGraphicsType()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GRAPHIC_TYPE_MUST_BE_SPECIFIED); } return true; }
@org.junit.Test public void testResetAllOptions() throws java.lang.Exception { setUriInfo(setUpActionExpectations(VdcActionType.ResetGlusterVolumeOptions, org.ovirt.engine.core.common.action.gluster.ResetGlusterVolumeOptionsParameters.class, new java.lang.String[]{ "VolumeId" }, new java.lang.Object[]{ GUIDS[0] })); verifyActionResponse(resource.resetAllOptions(new org.ovirt.engine.api.model.Action())); }
private void updateCachedIsoFileListFromVdsm(org.ovirt.engine.core.common.businessentities.storage.RepoImage repoImage) { boolean isRefreshed = false; try { java.util.List<org.ovirt.engine.core.common.businessentities.storage.RepoImage> problematicRepoFileList = new java.util.ArrayList<>(); isRefreshed = refreshIsoDomain(repoImage.getRepoDomainId(), problematicRepoFileList, repoImage.getFileType()); addRepoFileToProblematicList(problematicRepoFileList); } finally { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.info("Finished automatic refresh process for '{}' file type with {}, for storage domain id '{}'.", repoImage.getFileType(), (isRefreshed ? "success" : "failure"), repoImage.getRepoDomainId()); } }

@java.lang.Override protected org.ovirt.engine.core.common.businessentities.HostDevice generateNewEntity() { org.ovirt.engine.core.common.businessentities.HostDevice device = new org.ovirt.engine.core.common.businessentities.HostDevice(); device.setHostId(org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_HOST_ID); device.setDeviceName(((org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME) + "___child")); device.setParentDeviceName(org.ovirt.engine.core.dao.HostDeviceDaoTest.EXISTING_DEVICE_NAME); device.setCapability("pci"); return device; }
public void setFreeSize(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Double> freeSize) { this.freeSize = freeSize; }
private void processStorageOnVdsInactive(final org.ovirt.engine.core.common.businessentities.VDS vds) { if (!(Guid.Empty.equals(vds.getStoragePoolId()))) { org.ovirt.engine.core.utils.lock.EngineLock lock = new org.ovirt.engine.core.utils.lock.EngineLock(java.util.Collections.singletonMap(vds.getId().toString(), new org.ovirt.engine.core.common.utils.Pair(LockingGroup.VDS_POOL_AND_STORAGE_CONNECTIONS.toString(), EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED.toString())), null); try { org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager().acquireLockWait(lock); clearDomainCache(vds); org.ovirt.engine.core.common.businessentities.StoragePool storage_pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolDao().get(vds.getStoragePoolId()); if ((org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Uninitialized) != (storage_pool.getStatus())) { backend.getResourceManager().RunVdsCommand(VDSCommandType.DisconnectStoragePool, new org.ovirt.engine.core.common.vdscommands.DisconnectStoragePoolVDSCommandParameters(vds.getId(), vds.getStoragePoolId(), vds.getVdsSpmId())); org.ovirt.engine.core.common.action.HostStoragePoolParametersBase params = new org.ovirt.engine.core.common.action.HostStoragePoolParametersBase(storage_pool, vds); backend.runInternalAction(VdcActionType.DisconnectHostFromStoragePoolServers, params); } } finally { org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager().releaseLock(lock); } } }



private void updateVolume(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity existingVolume, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity fetchedVolume) { updateVolumeProperties(existingVolume, fetchedVolume); updateBricks(existingVolume, fetchedVolume); updateOptions(existingVolume, fetchedVolume); updateTransportTypes(existingVolume, fetchedVolume); }
public void setSelectedNetworkQoSId(org.ovirt.engine.core.compat.Guid networkQoSId) { if (networkQoSId != null) { for (java.lang.Object item : getNetworkQoS().getItems()) { if (((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (item)).getId().equals(networkQoSId)) { getNetworkQoS().setSelectedItem(item); break; } } } else { setSelectedNetworkQoSId(Guid.Empty); } }
public java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> buildParameters(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { java.util.Set<org.ovirt.engine.core.compat.Guid> nonUpdateableHosts = new java.util.HashSet<>(); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<>(); boolean vlanNetwork = org.ovirt.engine.core.utils.NetworkUtils.isVlan(network); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters setupNetworkParams = createSetupNetworksParameters(nic.getVdsId()); setupNetworkParams.setNetworkNames(network.getName()); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicToConfigure = getNicToConfigure(setupNetworkParams.getInterfaces(), nic.getId()); if (nicToConfigure == null) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.LABELED_NETWORK_INTERFACE_NOT_FOUND); } org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = getNetworkCluster(nicToConfigure, network); if (vlanNetwork) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlan = createVlanDevice(nic, network); addBootProtocolForRoleNetwork(networkCluster, vlan); setupNetworkParams.getInterfaces().add(vlan); } else if ((nicToConfigure.getNetworkName()) == null) { nicToConfigure.setNetworkName(network.getName()); addBootProtocolForRoleNetwork(networkCluster, nicToConfigure); } else { nonUpdateableHosts.add(nic.getVdsId()); continue; } parameters.add(setupNetworkParams); } reportNonUpdateableHosts(AuditLogType.ADD_NETWORK_BY_LABEL_FAILED, nonUpdateableHosts); return parameters; }
protected abstract org.ovirt.engine.core.common.action.VdcActionParametersBase getActionParameters(org.ovirt.engine.api.model.Network network, org.ovirt.engine.core.common.businessentities.network entity);

@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel) (array[0])); org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel tagListModel = ((org.ovirt.engine.ui.uicommonweb.models.tags.TagListModel) (array[1])); vmListModel.allAttachedTags.addAll(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Tags>) (returnValue))); (vmListModel.selectedItemsCounter)++; if ((vmListModel.selectedItemsCounter) == (vmListModel.getSelectedItems().size())) { postGetAttachedTags(vmListModel, tagListModel); } }
org.ovirt.engine.core.bll.ValidationResult validateNotRemovingUsedNetworkByVms() { java.util.Collection<java.lang.String> removedNetworks = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : removedNetworkAttachments) { removedNetworks.add(existingNetworkRelatedToAttachment(removedAttachment).getName()); } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(host.getId(), removedNetworks); if (vmNames.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, commaSeparated(vmNames)); } }
@java.lang.Override public java.lang.Void call() { try { if (isPerformConnectOps && (connectVdsToNewMaster(vds))) { try { runVdsCommand(VDSCommandType.RefreshStoragePool, new org.ovirt.engine.core.common.vdscommands.RefreshStoragePoolVDSCommandParameters(vds.getId(), getStoragePool().getId(), _newMasterStorageDomainId, getStoragePool().getmaster_domain_version())); } catch (org.ovirt.engine.core.common.errors.VdcBLLException ex) { if ((org.ovirt.engine.core.common.errors.VdcBllErrors.StoragePoolUnknown) == (ex.getVdsError().getCode())) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnVal = runVdsCommand(VDSCommandType.ConnectStoragePool, new org.ovirt.engine.core.common.vdscommands.ConnectStoragePoolVDSCommandParameters(vds.getId(), getStoragePool().getId(), vds.getVdsSpmId(), _newMasterStorageDomainId, getStoragePool().getmaster_domain_version())); if (!(returnVal.getSucceeded())) { log.errorFormat("Post reconstruct actions (connectPool) did not complete on host {0} in the pool. error {1}", vds.getId(), returnVal.getVdsError().getMessage()); } } else { log.errorFormat(("Post reconstruct actions (refreshPool)" + " did not complete on host {0} in the pool. error {1}"), vds.getId(), ex.getMessage()); } } } } catch (java.lang.Exception e) { log.errorFormat(("Post reconstruct actions (connectPool,refreshPool,disconnect storage)" + " did not complete on host {0} in the pool. error {1}"), vds.getId(), e.getMessage()); } return null; }
public java.lang.Boolean getBootMenuEnabled() { return bootMenuEnabled; }
@org.junit.Test public void testCanDoActionPoolInMaintenance() { getStoragePool().setStatus(StoragePoolStatus.Maintenance); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND); }

@java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.network n) { return n.getname().equals(getParameters().getInterface().getNetworkName()); }
@java.lang.Override protected org.ovirt.engine.core.common.businessentities.network.NetworkAttachment postPopulate(org.ovirt.engine.api.model.NetworkAttachment model) { model.getIpAddressAssignments().getIpAddressAssignments().get(0).setAssignmentMethod("dhcp"); return super.postPopulate(model); }
@java.lang.Override protected void executeVmCommand() { if (diskShouldBeUnPlugged()) { performPlugCommand(VDSCommandType.HotUnPlugDisk, disk, vmDevice); } org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVmDeviceDao().remove(vmDevice.getId()); if ((!(disk.isDiskSnapshot())) && ((org.ovirt.engine.core.common.businessentities.storage.Disk.DiskStorageType.IMAGE) == (disk.getDiskStorageType()))) { org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getImageDao().updateImageVmSnapshotId(((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)).getImageId(), null); } org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm()); org.ovirt.engine.core.bll.utils.VmDeviceUtils.updateBootOrderInVmDeviceAndStoreToDB(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm().getStaticData()); org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVmStaticDAO().incrementDbGeneration(org.ovirt.engine.core.bll.DetachDiskFromVmCommand.getVm().getId()); org.ovirt.engine.core.bll.DetachDiskFromVmCommand.setSucceeded(true); }
org.ovirt.engine.core.common.businessentities.VDSType getHostType();
public static boolean isNetworkInSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.network.Network network, org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos) { return ((((((network.getMtu()) == 0) && ((iface.getMtu()) == (org.ovirt.engine.core.utils.NetworkUtils.getDefaultMtu()))) || ((iface.getMtu()) == (network.getMtu()))) && (java.util.Objects.equals(iface.getVlanId(), network.getVlanId()))) && ((iface.isBridged()) == (network.isVmNetwork()))) && ((org.ovirt.engine.core.utils.NetworkUtils.isQosInSync(iface, qos)) || (iface.isQosOverridden())); }
@java.lang.Override public void run() { org.ovirt.engine.core.bll.VdsEventListener.log.infoFormat("ResourceManager::vdsNotResponding entered for Host {0}, {1}", vds.getId(), vds.getHostName()); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.VdsNotRespondingTreatment, new org.ovirt.engine.core.common.action.FenceVdsActionParameters(vds.getId(), org.ovirt.engine.core.common.businessentities.FenceActionType.Restart), org.ovirt.engine.core.bll.job.ExecutionHandler.createInternalJobContext()); }

public org.ovirt.engine.core.utils.lock.EngineLock acquireGlusterLockWait(org.ovirt.engine.core.compat.Guid clusterId) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> exclusiveLocks = new java.util.HashMap<>(); exclusiveLocks.put(clusterId.toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.GLUSTER, VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_OPERATION_INPROGRESS)); org.ovirt.engine.core.utils.lock.EngineLock lock = new org.ovirt.engine.core.utils.lock.EngineLock(exclusiveLocks, null); org.ovirt.engine.core.utils.lock.LockManagerFactory.getLockManager().acquireLockWait(lock); return lock; }

@java.lang.Override protected boolean canDoAction() { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksToCheck = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getDiskDao().getAllForVm(getSourceVmFromDb().getId()), true, false, true); org.ovirt.engine.core.bll.validator.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.DiskImagesValidator(disksToCheck); if (!(validate(diskImagesValidator.diskImagesNotLocked()))) { return false; } java.util.Set<org.ovirt.engine.core.compat.Guid> storageIds = org.ovirt.engine.core.bll.ImagesHandler.getAllStorageIdsForImageIds(disksToCheck); org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator storageValidator = new org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator(org.ovirt.engine.core.bll.AddVmAndCloneImageCommand.getStoragePoolId(), storageIds); if (!(validate(storageValidator.allDomainsExistAndActive()))) { return false; } if (!(validate(new org.ovirt.engine.core.bll.validator.VmValidator(getSourceVmFromDb()).vmNotLocked()))) { return false; } if (!(super.canDoAction())) { return false; } for (org.ovirt.engine.core.common.businessentities.DiskImage diskImage : getDiskImagesToBeCloned()) { if (!(checkImageConfiguration(diskImage))) { return false; } } return true; }

public org.ovirt.engine.core.bll.ValidationResult changeProtocolAllowed() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE).when(((((getHost().getProtocol()) != (oldHost.getProtocol())) && ((oldHost.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance))) && ((oldHost.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallingOS)))); }
private void processSingleClusterChanges(org.ovirt.engine.core.common.action.ManageNetworkClustersParameters param) { final java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> setupNetworksParams = new java.util.ArrayList(createNetworkClustersToSetupNetworksParametersTransformer().transform(param.getAttachments(), param.getDetachments())); org.ovirt.engine.core.bll.network.HostSetupNetworksParametersBuilder.updateParametersSequencing(setupNetworksParams); runInternalMultipleActions(VdcActionType.PersistentHostSetupNetworks, setupNetworksParams); }

@java.lang.Override protected void onRemove(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> value, org.ovirt.engine.ui.webadmin.section.main.view.popup.host.NicLabelEditor widget) { super.onRemove(value, widget); com.google.gwt.event.logical.shared.ValueChangeEvent.fire(this, null); }


protected java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> setUpTemplates(boolean notFound) { java.util.HashMap<org.ovirt.engine.core.common.businessentities.VmTemplate, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage>> ret = new java.util.HashMap<>(); if (notFound) { return ret; } for (int i = 0; i < (NAMES.length); i++) { ret.put(getEntity(i), new java.util.ArrayList()); } return ret; }


protected void testListAllConsoleAware(boolean allContent) throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.setUpUriExpectations(null); if (allContent) { java.util.List<java.lang.String> populates = new java.util.ArrayList<java.lang.String>(); populates.add("true"); expect(httpHeaders.getRequestHeader(BackendResource.POPULATE)).andReturn(populates).anyTimes(); org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.setUpGetConsoleExpectations(new int[]{ 0, 1, 2 }); setUpGetVirtioScsiExpectations(new int[]{ 0, 1, 2 }); setUpGetSoundcardExpectations(new int[]{ 0, 1, 2 }); org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.setUpGetRngDeviceExpectations(new int[]{ 0, 1, 2 }); } setUpGetGraphicsExpectations(3); org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.setUpQueryExpectations(""); collection.setUriInfo(uriInfo); verifyCollection(org.ovirt.engine.api.restapi.resource.BackendTemplatesBasedResourceTest.getCollection()); }
@java.lang.Override protected void updateMoveOrCopySingleDiskParameters(java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters, org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_domains> selectedStorageDomains = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_domains>(); if ((diskModel.getStorageDomain().getSelectedItems()) != null) { selectedStorageDomains.addAll(diskModel.getStorageDomain().getSelectedItems()); } else { selectedStorageDomains.add(((org.ovirt.engine.core.common.businessentities.storage_domains) (diskModel.getStorageDomain().getSelectedItem()))); } for (org.ovirt.engine.core.common.businessentities.storage_domains storageDomain : selectedStorageDomains) { addMoveOrCopyParameters(parameters, Guid.Empty, storageDomain.getId(), ((org.ovirt.engine.core.common.businessentities.DiskImage) (diskModel.getDisk()))); } }
public java.lang.String getpm_type() { return mVdsStatic.getpm_type(); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> getHostsAndVmsForClusters(java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> vdsGroups) throws java.lang.Exception { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VDSGroup> groupsById = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup : vdsGroups) { groupsById.put(vdsGroup.getId(), vdsGroup); } java.sql.Connection c = getJdbcTemplate().getDataSource().getConnection(); java.sql.Array groups = c.createArrayOf("uuid", groupsById.keySet().toArray()); java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroupHostsAndVMs> dataList = getCallsHandler().executeReadList("GetHostsAndVmsForClusters", org.ovirt.engine.core.dao.VdsGroupDAODbFacadeImpl.VDSGroupHostsAndVMsRowMapper.instance, getCustomMapSqlParameterSource().addValue("vds_group_ids", groups)); c.close(); for (org.ovirt.engine.core.common.businessentities.VDSGroupHostsAndVMs groupDetail : dataList) { groupsById.get(groupDetail.getVdsGroupId()).setGroupHostsAndVms(groupDetail); } return vdsGroups; }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("VNIC Profiles") java.lang.String vnicProfilesTitle();
protected org.ovirt.engine.core.common.businessentities.DiskImage getDiskImage() { if ((diskImage) == null) { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getDiskDao().get(org.ovirt.engine.core.bll.ExportRepoImageCommand.getParameters().getImageGroupID()); if ((disk != null) && ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.Disk.DiskStorageType.IMAGE))) { diskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)); } } return diskImage; }

@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmStatic mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { final org.ovirt.engine.core.common.businessentities.VmStatic entity = new org.ovirt.engine.core.common.businessentities.VmStatic(); map(rs, entity); entity.setId(getGuidDefaultEmpty(rs, "vm_guid")); entity.setVdsGroupId(getGuidDefaultEmpty(rs, "vds_group_id")); entity.setName(rs.getString("vm_name")); entity.setVmtGuid(getGuidDefaultEmpty(rs, "vmt_guid")); entity.setInitialized(rs.getBoolean("is_initialized")); entity.setCpuPinning(rs.getString("cpu_pinning")); entity.setUseHostCpuFlags(rs.getBoolean("host_cpu_flags")); entity.setInstanceTypeId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("instance_type_id"))); entity.setImageTypeId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("image_type_id"))); entity.setOriginalTemplateName(rs.getString("original_template_name")); entity.setOriginalTemplateGuid(getGuid(rs, "original_template_id")); entity.setUseLatestVersion(((rs.getObject("template_version_number")) == (org.ovirt.engine.core.dao.VmStaticDAODbFacadeImpl.USE_LATEST_VERSION_NUMBER_INDICATOR))); return entity; }

@java.lang.Override protected void updateNetworkChangability() { super.updateNetworkChangability(); if (!(getNetwork().getIsChangable())) { return; } boolean isPlugged = isPluggedBeforeAndAfterEdit(); boolean isPortMirroring = ((java.lang.Boolean) (getPortMirroring().getEntity())); if ((isVmUp()) && (hotUpdateSupported)) { if (isPlugged && isPortMirroring) { getNetwork().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hotNetworkUpdateNotSupportedWithPortMirroring()); getNetwork().setIsChangable(false); initSelectedNetwork(); return; } } else if ((isVmUp()) && isPlugged) { getNetwork().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().hotNetworkUpdateNotSupported(getClusterCompatibilityVersion().toString())); getNetwork().setIsChangable(false); initSelectedNetwork(); return; } }


protected <E> void setUpGetEntityExpectations(java.lang.String query, org.ovirt.engine.core.common.interfaces.SearchType type, E entity) throws java.lang.Exception { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = control.createMock(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); org.ovirt.engine.core.common.queries.SearchParameters params = new org.ovirt.engine.core.common.queries.SearchParameters(query, type); expect(backend.runQuery(eq(VdcQueryType.Search), eqSearchParams(params))).andReturn(queryResult); expect(queryResult.getSucceeded()).andReturn(true).anyTimes(); java.util.List<E> entities = new java.util.ArrayList<>(); entities.add(entity); expect(queryResult.getReturnValue()).andReturn(entities).anyTimes(); }

