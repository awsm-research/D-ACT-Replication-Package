private static java.util.Map<java.lang.String, java.lang.Object> search(java.lang.String token, java.util.Map<java.lang.String, java.lang.Object> params, java.lang.String queryType, java.lang.String scope) { <START_MOD>try { org.apache.http.client.methods.HttpPost request<END_MOD> = <START_MOD>org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createPost("/oauth/token-info"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(request); java.util.List<org.apache.http.message.BasicNameValuePair> form = new java.util.ArrayList<>(4); form.add(new org.apache.http.message.BasicNameValuePair("query_type", queryType)); form.add(new org.apache.http.message.BasicNameValuePair("scope", scope)); if (org.apache.commons.lang.StringUtils.isNotEmpty(token)) { form.add(new org.apache.http.message.BasicNameValuePair("token", token)); } if (params != <END_MOD>null<START_MOD>)<END_MOD> { <START_MOD>form.add(new org.apache.http.message.BasicNameValuePair("params",<END_MOD> org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.<START_MOD>encode(new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer().serialize(params)))); } request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); return<END_MOD> org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.<START_MOD>getResponse(request); } catch (java.lang.Exception ex<END_MOD>) { <START_MOD>return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()<END_MOD>); } }
private void analyzeServiceMember(com.thoughtworks.qdox.model.JavaClass javaClass, org.ovirt.api.metamodel.concepts.Service service) { if (isAnnotatedWith(javaClass, ModelAnnotations.METHOD)) { analyzeMethod(javaClass, service); } <START_MOD>else { analyzeMethod(javaClass, service); <END_MOD>}<START_MOD> }<END_MOD>
<START_MOD>protected<END_MOD> org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntityPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase) { org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); updates.setPhase(phase); return updateEntity(updates); }
<START_MOD>private boolean matchesProtocolColonHostColonPort(java.lang.String s) { if (s == null) { return false; } return s.matches("\\S+:\\S+:\\d+"); }<END_MOD>
private boolean checkCanPerformPlugUnPlugDisk() { if (org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.getVm().getStatus().isUpOrPaused()) { setVdsId(org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.getVm().getRunOnVds()); if (!(canPerformDiskHotPlug(disk))) { return false; } } if (((getPlugAction()) == (org.ovirt.engine.core.common.vdscommands.VDSCommandType.HotPlugDisk)) && (oldVmDevice.getIsPlugged())) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.HOT_PLUG_DISK_IS_NOT_UNPLUGGED); } if (((getPlugAction()) == (org.ovirt.engine.core.common.vdscommands.VDSCommandType.HotUnPlugDisk)) && (!(oldVmDevice.getIsPlugged()))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.HOT_UNPLUG_DISK_IS_NOT_PLUGGED); } return true; }
<START_MOD>public static org.ovirt.engine.core.compat.Version getEffective(org.ovirt.engine.core.compat.Version vmCompatibilityVersion, org.ovirt.engine.core.compat.Version vdsGroupCompatibilityVersion, org.ovirt.engine.core.compat.Version defaultVersion) { if (vmCompatibilityVersion != null) { return vmCompatibilityVersion; } else if (vdsGroupCompatibilityVersion != null) { return vdsGroupCompatibilityVersion; } else { return defaultVersion; } }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.common.DefaultStringValue("") java.lang.String namespacePermissionsPopup();<END_MOD>
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.SetVmTicketCommand.getVm(); if (vm == null) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); return false; } if (!(org.ovirt.engine.core.bll.SetVmTicketCommand.canRunActionOnNonManagedVm())) { return false; } final org.ovirt.engine.core.common.businessentities.VMStatus status = vm.getStatus(); if (((((status != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) && (status != (org.ovirt.engine.core.common.businessentities.VMStatus.Paused))) && (status != (org.ovirt.engine.core.common.businessentities.VMStatus.PoweringUp))) && (status != (org.ovirt.engine.core.common.businessentities.VMStatus.PoweringDown))) && (status != (org.ovirt.engine.core.common.businessentities.VMStatus.RebootInProgress))) { return org.ovirt.engine.core.bll.SetVmTicketCommand.failVmStatusIllegal(); } return true; }
public void flush() { network.setDataCenterId(getSelectedDc().getId()); network.setName(((java.lang.String) (getName().getEntity()))); network.setStp(((java.lang.Boolean) (getIsStpEnabled().getEntity()))); network.setDescription(((java.lang.String) (getDescription().getEntity()))); network.<START_MOD>setComment(((java.lang.String) (getComment().getEntity()))); network.<END_MOD>setVmNetwork(((java.lang.Boolean) (getIsVmNetwork().getEntity()))); network.setMtu(0); if ((getMtu().getEntity()) != null) { network.setMtu(java.lang.Integer.parseInt(getMtu().getEntity().toString())); } network.setVlanId(null); if (((java.lang.Boolean) (getHasVLanTag().getEntity()))) { network.setVlanId(java.lang.Integer.parseInt(getVLanTag().getEntity().toString())); } }
private org.ovirt.engine.core.common.action.<START_MOD>ImagesContainterParametersBase buildCloneCinderDiskCommandParameters(<END_MOD>org.ovirt.engine.core.common.businessentities.storage.CinderDisk<START_MOD> cinderDisk<END_MOD>) { org.ovirt.engine.core.common.action.<START_MOD>ImagesContainterParametersBase<END_MOD> createParams = new org.ovirt.engine.core.common.action.<START_MOD>ImagesContainterParametersBase(cinderDisk.getImageId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage templateDisk =<END_MOD> diskInfoDestinationMap<START_MOD>.get(cinderDisk.getId()); createParams.setDiskAlias(templateDisk.getDiskAlias()); createParams.setStorageDomainId(templateDisk.getStorageIds().get(0)); createParams.setEntityInfo(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getEntityInfo()); createParams.setParentCommand(org.ovirt.engine.core.bll.AddVmTemplateCommand.getActionType()); createParams.setParentParameters(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters()); createParams.setVmSnapshotId(getVmSnapshotId()<END_MOD>); return withRootCommandInfo(createParams); }
public java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask> getTaskListForCluster(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.common.businessentities.VDS upServer = org.ovirt.engine.core.bll.utils.ClusterUtils.getInstance().getRandomUpServer(id); if (upServer == null) { org.ovirt.engine.core.bll.gluster.tasks.GlusterTasksService.log.info( up server in cluster return null; } org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterTasksList, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(upServer.getId())); if (returnValue.getSucceeded()) { java.util.List<org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask> tasks = ((java.util.List<org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask>) (returnValue.getReturnValue())); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask> tasksMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask task : tasks) { tasksMap.put(task.getTaskId(), task); } return tasksMap; } else { org.ovirt.engine.core.bll.gluster.tasks.GlusterTasksService.log.error( {} returnValue.getVdsError()); throw new org.ovirt.engine.core.common.errors.<START_MOD>EngineException<END_MOD>(org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.GlusterVolumeStatusAllFailedException, returnValue.getVdsError().getMessage()); } }
public java.util.ArrayList<java.lang.String> <START_MOD>getValidateMessages<END_MOD>() { return <START_MOD>validateMessages<END_MOD>; }
<START_MOD>@java.lang.Override public void init(T qos) { this.qos = qos; org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.EditQosModel.getName().setEntity(qos.getName()); org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.EditQosModel.getDescription().setEntity(qos.getDescription()); }<END_MOD>
<START_MOD>java.lang.String CANNOT_FORCE_SELECT_SPM_CLUSTER_DOES_NOT_SUPPORT_VIRT_SERVICES();<END_MOD>
private static java.lang.String <START_MOD>extractAddress(<END_MOD>java.util.Map<java.lang.String, java.lang.Object> <START_MOD>nic<END_MOD>) { <START_MOD>return<END_MOD> ((java.lang.String) (<START_MOD>nic<END_MOD>.get("addr"))); }
<START_MOD>private java.lang.String getTokenFromHeader(javax.servlet.http.HttpServletRequest request) { java.lang.String token = null; java.lang.String headerValue = request.getHeader(SsoConstants.HEADER_AUTHORIZATION); if ((headerValue != null) && (headerValue.startsWith(org.ovirt.engine.core.sso.servlets.OpenIdUserInfoServlet.BEARER))) { token = headerValue.substring("Bearer".length()).trim(); } return token; }<END_MOD>
@org.ovirt.engine.ui.webadmin.DefaultMessage(<START_MOD> Machine<END_MOD> {0} already exist java.lang.String sameVmNameExists(java.lang.String vmName);
@org.ovirt.engine.ui.common.Template( style= 200px; width: 100%; border-bottom: 1px solid   + ((( style= 49%; +   style= 2%; border-left: 1px solid   +   style= normal; width: 49%; color:   + "</tr></table>")) com.google.gwt.safehtml.shared.SafeHtml typeAheadNameDescription(java.lang.String name, java.lang.String description);
@java.lang.Override protected void executeCommand() { java.lang.String connectionId = org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.getConnection().getid(); getStorageServerConnectionDao().remove(connectionId); <START_MOD>if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.getParameters().getVdsId()))) { <END_MOD>org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.disconnectStorage();<START_MOD> }<END_MOD> org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.setSucceeded(true); }
private org.ovirt.engine.core.common.action.ImagesContainterParametersBase buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk) { org.ovirt.engine.core.common.action.ImagesContainterParametersBase createParams = new org.ovirt.engine.core.common.action.ImagesContainterParametersBase(cinderDisk.getImageId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage templateDisk = org.ovirt.engine.core.bll.storage.CloneCinderDisksCommand.getParameters().getDisksMap().get(cinderDisk.getId()); createParams.setDiskAlias(templateDisk.getDiskAlias()); createParams.setStorageDomainId(templateDisk.getStorageIds().get(0)); createParams.setEntityInfo(org.ovirt.engine.core.bll.storage.CloneCinderDisksCommand.getParameters().getEntityInfo()); createParams.setParentCommand(org.ovirt.engine.core.bll.storage.CloneCinderDisksCommand.getActionType()); createParams.setParentParameters(org.ovirt.engine.core.bll.storage.CloneCinderDisksCommand.getParameters()); <START_MOD>createParams.setVmSnapshotId(cinderDisk.getVmSnapshotId()); <END_MOD>return createParams; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { setItems(((java.util.Collection<START_MOD><org.ovirt.engine.core.common.businessentities.VDSGroup><END_MOD>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); }
<START_MOD>@org.junit.Test public void testAllDomainsExistAndActive() { setUpGeneralValidations(); setUpDiskValidations(); doReturn(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommandTest.getFullDiskList()).when(cmd).getDisksList(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST)).when(multipleStorageDomainsValidator).allDomainsExistAndActive(); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST.name())); }<END_MOD>
protected void onExportChanged() { boolean externalNetwork = <START_MOD>getExternal<END_MOD>().getEntity(); getNetworkLabel().setIsChangeable((!externalNetwork)); getNeutronPhysicalNetwork().setIsChangeable(externalNetwork); getQos().setIsChangeable((!externalNetwork)); getAddQosCommand().setIsExecutionAllowed((!externalNetwork)); <START_MOD>getPhysicalNetwork().setIsChangeable(externalNetwork); getPhysicalNetworkCustomRB().setIsChangeable(externalNetwork); getPhysicalNetworkDatacentreRB().setIsChangeable(externalNetwork); <END_MOD>updateMtuSelectorsChangeability(); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( do not match java.lang.String cloudInitRootPasswordMatchMessage();
<START_MOD>private void onVnicProfileMap() { if ((getWindow()) != null) { return; } createVnicProfileMappingsModel(); setConfirmWindow(vnicProfileMappingsModel); }<END_MOD>
private void AttachFloppy_EntityChanged() { getFloppyImage().setIsChangable(((java.lang.Boolean) (getAttachFloppy().getEntity()))); <START_MOD>updateInitialRunFields<END_MOD>(); }
private boolean validateNotRemovingUsedNetworkByVms() { boolean passed = true; java.util.Collection<java.lang.String> removedNetworks = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : params.getRemovedNetworkAttachments()) { removedNetworks.add(<START_MOD>networkBusinessEntityMap<END_MOD>.get(removedAttachment.getNetworkId()).getName()); } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(host.getId(), removedNetworks); for (java.lang.String vmName : vmNames) { addViolation(VdcBllMessages.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, vmName); passed = false; } return passed; }
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.ClearNonResponsiveVdsVmsCommand.getVds()) == null) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.VDS_INVALID_SERVER_ID); } if ((((hasVMs()) && ((org.ovirt.engine.core.bll.ClearNonResponsiveVdsVmsCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive))) && ((org.ovirt.engine.core.bll.ClearNonResponsiveVdsVmsCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Reboot))) && ((org.ovirt.engine.core.bll.ClearNonResponsiveVdsVmsCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Kdumping))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.VDS_CANNOT_CLEAR_VMS_WRONG_STATUS); } return true; }
@org.junit.Test public void disableGlusterWhenVolumesExist() { createCommandWithVirtEnabled(); when(vdsGroupDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName()); when(vdsGroupDao.getByName(anyString())).thenReturn(org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName()); cpuExists(); cpuFlagsNotMissing(); allQueriesForVms(); clusterHasGlusterVolumes(); canDoActionFailedWithReason(<START_MOD>EngineMessages<END_MOD>.VDS_GROUP_CANNOT_DISABLE_GLUSTER_WHEN_CLUSTER_CONTAINS_VOLUMES); }
protected boolean isImageExist() { if ((<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST); } return true; }
@java.lang.Override protected java.lang.Class<? extends org.ovirt.engine.core.bll<START_MOD>.storage.disk.image<END_MOD>.GetImagesListByStoragePoolIdQuery<? extends org.ovirt.engine.core.common.queries.GetImagesListByStoragePoolIdParameters>> getQueryType() { return queryClass; }
<START_MOD>protected java.util.List<org.ovirt.engine.core.common.businessentities.VM> getVmsFromExportDomain() { org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters p = new org.ovirt.engine.core.common.queries.GetAllFromExportDomainQueryParameters(getParameters().getStoragePoolId(), getParameters().getSourceDomainId()); org.ovirt.engine.core.common.queries.VdcQueryReturnValue qretVal = getBackend().runInternalQuery(VdcQueryType.GetVmsFromExportDomain, p); if (!(qretVal.getSucceeded())) { return null; } return ((java.util.List<org.ovirt.engine.core.common.businessentities.VM>) (qretVal.getReturnValue())); }<END_MOD>
<START_MOD>@java.lang.Override public void run() { try { if (isPerformConnectOps && (connectVdsToNewMaster(vds))) { try { runVdsCommand(VDSCommandType.RefreshStoragePool, new org.ovirt.engine.core.common.vdscommands.RefreshStoragePoolVDSCommandParameters(vds.getId(), getStoragePool().getId(), _newMasterStorageDomainId, getStoragePool().getmaster_domain_version())); } catch (org.ovirt.engine.core.common.errors.VdcBLLException ex) { if ((org.ovirt.engine.core.common.errors.VdcBllErrors.StoragePoolUnknown) == (ex.getVdsError().getCode())) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnVal = runVdsCommand(VDSCommandType.ConnectStoragePool, new org.ovirt.engine.core.common.vdscommands.ConnectStoragePoolVDSCommandParameters(vds.getId(), getStoragePool().getId(), vds.getvds_spm_id(), _newMasterStorageDomainId, getStoragePool().getmaster_domain_version())); if (!(returnVal.getSucceeded())) { log.errorFormat("Post reconstruct actions (connectPool) did not complete on host {0} in pool {1}. error {2}", vds.getId(), getStoragePool().getId(), returnVal.getVdsError().getMessage()); } } else { log.errorFormat(("Post reconstruct actions (refreshPool)" + " did not complete on host {0} in pool {1}. error {2}"), vds.getId(), getStoragePool().getId(), ex.getMessage()); } } } if (isPerformDisconnect) { org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(getStorageDomain().getstorage_type()).DisconnectStorageFromDomainByVdsId(getStorageDomain(), vds.getId()); } } catch (java.lang.Exception e) { log.errorFormat(("Post reconstruct actions (connectPool,refreshPool,disconnect storage)" + " did not complete on host {0} in the pool. error {1}"), vds.getId(), e.getMessage()); } }<END_MOD>
protected boolean shouldCheckSpaceInStorageDomains() { return (!(getImagesToCheckDestinationStorageDomains().isEmpty())) && (!(org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(getImagesToCheckDestinationStorageDomains(), new org.ovirt.engine.core.utils.linq.All()).getImageId().equals(VmTemplateHandler.BLANK_VM_TEMPLATE_ID))); }
@java.lang.Override public void updateInterface(<START_MOD>int osId, <END_MOD>org.ovirt.engine.core.compat.Version clusterVersion) { <START_MOD>org<END_MOD>.<START_MOD>ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery<END_MOD>();<START_MOD> asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) {<END_MOD> getDiskInterface().setSelectedItem(DiskInterface.VirtIO); }<START_MOD> }; updateInterface(osId, clusterVersion, asyncQuery); }<END_MOD>
public java.lang.Boolean call() throws java.lang.Exception { if (((java.lang.Boolean) (_deploy.getParser().cliEnvironmentGet(VdsmEnv.<START_MOD>OVIRT_LEGACY_NODE<END_MOD>)))) { _deploy.userVisibleLog(java.util.logging.Level.INFO,   is hypervisor setNode(); } return true; }
private boolean updateParameters() { for (org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters : org.ovirt.engine.core.bll.MoveDisksCommand.getParameters().getParametersList()) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = getDiskImageDao().getAncestor(moveDiskParameters.getImageId()); if (diskImage == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_NOT_EXIST); } java.util.List<org.ovirt.engine.core.common.businessentities.VM> allVms = org.ovirt.engine.core.bll.MoveDisksCommand.getVmDAO().getVmsListForDisk(diskImage.getId()); org.ovirt.engine.core.common.businessentities.VM vm = (!(allVms.isEmpty())) ? allVms.get(0) : null;<START_MOD> org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(); if ((vm != null) && (!(validate(snapshotsValidator.vmNotInPreview(vm.getId()))))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IN_PREVIEW); } else<END_MOD> if ((vm == null) || (isVmDown(vm))) { moveParametersList.add(moveDiskParameters); } else if (isVmRunning(vm)) { org.ovirt.engine.core.utils.MultiValueMapUtils.addToMap(vm.getId(), createLiveMigrateDiskParameters(moveDiskParameters, vm.getId()), vmsLiveMigrateParametersMap); } else { addCanDoActionMessage(java.lang.String.format( %2$s "VmName", vm.getVmName())); return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN_OR_UP); } } return true; }
protected boolean validateVdsCluster() { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroupDao().get(org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroupId()); return vdsGroup == null ? <START_MOD>failValidate<END_MOD>(EngineMessage.VDS_CLUSTER_IS_NOT_VALID) : (vdsGroup.getArchitecture()) != (org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getClusterArch()) ? <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_VM_CANNOT_IMPORT_VM_ARCHITECTURE_NOT_SUPPORTED_BY_CLUSTER) : true; }
public java.lang.String getUser() { return <START_MOD>(<END_MOD>user<START_MOD>) != null ? user : ""<END_MOD>; }
<START_MOD>private void addRoleColumn(org.ovirt.engine.ui.common.CommonApplicationConstants constants) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip<org.ovirt.engine.core.common.businessentities.Permissions> roleColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip<org.ovirt.engine.core.common.businessentities.Permissions>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Permissions object) { return object.getRoleName(); } }; roleColumn.makeSortable(); org.ovirt.engine.ui.common.widget.uicommon.permissions.PermissionListModelTable.getTable().addColumn(roleColumn, constants.rolePermission(), "300px"); }<END_MOD>
<START_MOD>@java.lang.Override public void onMouseOver(com.google.gwt.event.dom.client.MouseOverEvent event) { if (!("".equals(title))) { tooltip.setHTML(title); tooltipPanel.showRelativeTo(this); } }<END_MOD>
<START_MOD>private void setColorDepth(org.ovirt.engine.ui.uicommonweb.models.userportal.IUserPortalListModel model, org.ovirt.engine.ui.uicommonweb.models.vms.WanColorDepth depth) { org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice = extractSpice(model); if (spice != null) { extractSpice(model).setWANColorDepth(depth); } }<END_MOD>
public void setGroups(java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD>> value) { mGroups = value; }
<START_MOD>java.lang.String ACTION_TYPE_FAILED_DESTINATION_STORAGE_DOMAIN_IS_NOT_VALID();<END_MOD>
public static java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> filterImageDisks(java.util.Collection<? extends org.ovirt.engine.core.common.businessentities.storage.Disk> listOfDisks, boolean allowOnlyNotShareableDisks, boolean allowOnlySnapableDisks, boolean allowOnlyActiveDisks) { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> diskImages = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : listOfDisks) { if (((((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) && ((!allowOnlyNotShareableDisks) || (!(disk.isShareable())))) && ((!allowOnlySnapableDisks) || (disk.isAllowSnapshot()))) && ((!allowOnlyActiveDisks) || (java.lang.Boolean.TRUE.equals(((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)).getActive())))) { diskImages.add(((org.ovirt.engine.core.common.businessentities.DiskImage) (disk))); } } return diskImages; }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); if (((volume.getAsyncTask()) != null) && (((volume.getAsyncTask().getType()) == (org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REBALANCE)) || ((volume.getAsyncTask().getType()) == (org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REMOVE_BRICK)))) { <START_MOD>addCanDoActionMessageVariable("asyncTask", volume.getAsyncTask().getType().name().toLowerCase()); <END_MOD>return failCanDoAction(VdcBllMessages.<START_MOD>ACTION_TYPE_FAILED_VOLUME_ASYNC_OPERATION_IN_PROGRESS<END_MOD>); } for (org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session : georepSessions) { if (((session.getSlaveVolumeId()) == null) || ((session.getSlaveNodeUuid()) == null)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_REMOTE_CLUSTER_NOT_MAINTAINED_BY_ENGINE); } } return true; }
@org.junit.Test public void validateVmShareableDisk() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); <START_MOD>org.ovirt.engine.core.bll.storage.lsm.ValidateTestUtils.runAndAssertValidateFailure<END_MOD>(command<START_MOD>,<END_MOD> EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED); }
private boolean initGlusterHost() { <START_MOD>glusterFeaturesAreCompatible = true; if (((org.apache.commons.lang.ObjectUtils.equals(getVdsGroup().getCompatibilityVersion(), Version.v3_5)) && (getVdsGroup().getGluster37Support())) && (!(getVds().getGluster37Support()))) { glusterFeaturesAreCompatible = false; java.util.Map<java.lang.String, java.lang.String> customLogValues = new java.util.HashMap<>(); customLogValues.put("installedGlusterVersion", (((getVds().getGlusterVersion().getMajor()) + ".") + (getVds().getGlusterVersion().getMinor()))); customLogValues.put("requiredGlusterVersion", "3.7"); setNonOperational(NonOperationalReason.GLUSTER_VERSION_INCOMPATIBLE_WITH_CLUSTER, customLogValues); return false; } <END_MOD>glusterHostUuidFound = true; if (org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterHostUuidSupported(getVdsGroup().getCompatibilityVersion())) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterHostUUID, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(getVds().getId())); if ((returnValue.getSucceeded()) && ((returnValue.getReturnValue()) != null)) { org.ovirt.engine.core.compat.Guid addedServerUuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(((java.lang.String) (returnValue.getReturnValue()))); if (hostUuidExists(addedServerUuid)) { setNonOperational(NonOperationalReason.GLUSTER_HOST_UUID_ALREADY_EXISTS, null); return false; } saveGlusterHostUuid(addedServerUuid); } else { glusterHostUuidFound = false; setNonOperational(NonOperationalReason.GLUSTER_HOST_UUID_NOT_FOUND, null); } } return (glusterHostUuidFound) && (initGlusterPeerProcess()); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Used java.lang.String volumeCapacity();
<START_MOD>public void removeSpmFromMap(java.lang.String spId) { spmMap.remove(spId); }<END_MOD>
protected org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator createMultipleDiskVmElementValidator() { return new org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage(), diskVmElementDao.getAllDiskVmElementsByDiskId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getImageGroupID())); }
public static <T> org.ovirt.engine.core.common.utils.Pair<T, org.apache.commons.httpclient.HttpClient> getConnection(java.lang.String hostName, int port, int clientTimeOut, int connectionTimeOut, int clientRetries<START_MOD>, int maxConnectionsPerHost<END_MOD>, java.lang.Class<T> type, boolean isSecure) { org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.net.URL> urlInfo = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcUtils.getConnectionUrl(hostName, port, null, isSecure); if (urlInfo == null) { return null; } return org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcUtils.getHttpConnection(urlInfo.getSecond(), clientTimeOut, connectionTimeOut, clientRetries, <START_MOD>maxConnectionsPerHost, <END_MOD>type); }
protected boolean pciAndIdeWithinLimit(org.ovirt.engine.core.common.businessentities.VmStatic vm, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> allInterfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.Disk> allDisks = org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()); return checkPciAndIdeLimit(vm.getNumOfMonitors(), allInterfaces, allDisks, org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.<START_MOD>getVm().isVirtioScsiEnabled(), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.<END_MOD>getReturnValue().getCanDoActionMessages()); }
@java.lang.Override public boolean Validate() { boolean isNew = getModel().getIsNew(); int maxAllowedVms = <START_MOD>configurator.getMaxVmsInPool<END_MOD>(); int assignedVms = getModel().getAssignedVms().AsConvertible().Integer(); getModel().getNumOfDesktops().ValidateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(4), new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation((isNew ? 1 : 0), (isNew ? maxAllowedVms : maxAllowedVms - assignedVms)) }); getModel().getPrestartedVms().ValidateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(0, assignedVms) }); getModel().setIsGeneralTabValid(((((getModel().getIsGeneralTabValid()) && (getModel().getName().getIsValid())) && (getModel().getNumOfDesktops().getIsValid())) && (getModel().getPrestartedVms().getIsValid()))); getModel().setIsPoolTabValid(true); return (((super.Validate()) && (getModel().getName().getIsValid())) && (getModel().getNumOfDesktops().getIsValid())) && (getModel().getPrestartedVms().getIsValid()); }
public java.util.List<java.lang.String> validate() { for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : params.getInterfaces()) { java.lang.String name = iface.getName(); if (addInterfaceToProcessedList(iface)) { if (isBond(iface)) { extractBondIfModified(iface, name); } else { if (org.apache.commons.lang.StringUtils.isNotBlank(iface.getBondName())) { extractBondSlave(iface); } if (!(getExistingIfaces().containsKey(org.ovirt.engine.core.utils.NetworkUtils.StripVlan(name)))) { addViolation(VdcBllMessages.<START_MOD>NETWORK_INTERFACES_DONT_EXIST, org.ovirt.engine.core.utils.NetworkUtils.StripVlan(name)<END_MOD>); } } if ((violations.isEmpty()) && (org.apache.commons.lang.StringUtils.isNotBlank(iface.getNetworkName()))) { extractNetwork(iface); } } } validateBondSlavesCount(); extractRemovedNetworks(); extractRemovedBonds(); detectSlaveChanges(); return translateViolations(); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllVMsWithDisksOnOtherStorageDomain(org.ovirt.engine.core.compat.Guid storageDomainGuid) { return getCallsHandler().executeReadList("GetAllVMsWithDisksOnOtherStorageDomain", org.ovirt.engine.core.dao.<START_MOD>VmDAOImpl<END_MOD>.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("storage_domain_id", storageDomainGuid)); }
private void setJobStatusExpectations(org.ovirt.engine.core.compat.Guid jobId, org.ovirt.engine.core.common.job.JobExecutionStatus jobStatus, org.ovirt.engine.core.common.queries.VdcQueryReturnValue monitorResult, org.ovirt.engine.core.common.action.VdcReturnValueBase result) { <START_MOD>when<END_MOD>(result.getJobId()).<START_MOD>thenReturn(jobId<END_MOD>); if (jobId != null) { org.ovirt.engine.core.common.job.Job jobMock = <START_MOD>mock<END_MOD>(org.ovirt.engine.core.common.job.Job.class); <START_MOD>when<END_MOD>(jobMock.getStatus()).<START_MOD>thenReturn<END_MOD>(jobStatus); <START_MOD>when<END_MOD>(monitorResult.getReturnValue()).<START_MOD>thenReturn<END_MOD>(jobMock)<START_MOD>; when<END_MOD>(backend.runQuery(eq(VdcQueryType.GetJobByJobId), eqQueryParams(org.ovirt.engine.core.common.queries.IdQueryParameters.class, addSession("Id"), addSession(jobId)))).<START_MOD>thenReturn<END_MOD>(monitorResult); } }
<START_MOD>public void enableSelectionElements(boolean enableElements) { selectHostAutomaticallyEditor.setEnabled(enableElements); selectDestinationHostEditor.setEnabled(enableElements); hostsListEditor.setEnabled(enableElements); }<END_MOD>
@java.lang.Override public void init(final org.ovirt.engine.ui.uicommonweb.models.providers.ProviderModel model) { super.init(model); registerHandler(getView().getTestButton().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { model.getTestCommand().execute(); } })); model.getTestResult().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { getView().setTestResultImage(((java.lang.String) (model.getTestResult().getEntity()))); } }); model.<START_MOD>getNeutronAgentTab().getPropertyChangedEvent<END_MOD>().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { <START_MOD>if ("IsAvailable".equals(((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (<END_MOD>args)<START_MOD>).PropertyName)) { getView().setAgentTabVisibility(model.getNeutronAgentTab().getIsAvailable()); } } }); }<END_MOD>
<START_MOD>private boolean shouldProcessVdsDomainReport(org.ovirt.engine.core.common.businessentities.VDS vds) { return (StoragePoolDomainHelper.reportingVdsStatus.contains(vds.getStatus())) && (vds.getVdsGroupSupportsVirtService()); }<END_MOD>
@java.lang.Override protected boolean canDoAction() { boolean result = true; if (!(canDoSnapshot(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm()))) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList = getDisksList(); if ((disksList.size()) > 0) { org.ovirt.engine.core.bll.validator.VmValidator vmValidator = new org.ovirt.engine.core.bll.validator.VmValidator(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm()); org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotValidator = new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(); result = ((((((<START_MOD>(<END_MOD>validate(snapshotValidator.vmNotDuringSnapshot(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId()))) && (validate(snapshotValidator.vmNotInPreview(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId())))) && (validate(vmValidator.vmNotDuringMigration()))) && (validate(vmValidator.vmNotRunningStateless()))) && (validate(vmValidator.vmNotIlegal()))) && (org.ovirt.engine.core.bll.ImagesHandler.PerformImagesChecks(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getReturnValue().getCanDoActionMessages(), org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getStoragePoolId(), Guid.Empty, true, true, true, true, true, true, disksList))) && (validate(vmValidator.vmNotLocked()))<START_MOD>) && (validate(vmValidator.vmNotInSuspendProcess()))<END_MOD>; } return result; }
protected void endActionOnVmConfiguration() { if ((org.ovirt.engine.core.bll.VmCommand.getVm()) != null) { if ((org.ovirt.engine.core.bll.VmCommand.getVm().getstatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked)) { org.ovirt.engine.core.bll.VmHandler.unlockVm(org.ovirt.engine.core.bll.VmCommand.getVm(), org.ovirt.engine.core.bll.VmCommand.getCompensationContext()); } <START_MOD>org.ovirt.engine.core.bll.VmCommand.getVmDAO().incrementVmDbGeneration(org.ovirt.engine.core.bll.VmCommand.getVm().getId()<END_MOD>); } else { org.ovirt.engine.core.bll.VmCommand.setCommandShouldBeLogged(false); log.warn( Vm is null - not performing EndAction on Vm } }
@org.junit.Test public void testTemplateOvfCreationBackwardCompatiliblity() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmTemplate template = org.ovirt.engine.core.<START_MOD>bll<END_MOD>.OvfManagerTest.createVmTemplate(); java.lang.String xml = manager.ExportTemplate(template, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(), Version.v3_0); assertNotNull(xml); final org.ovirt.engine.core.common.businessentities.VmTemplate newtemplate = new org.ovirt.engine.core.common.businessentities.VmTemplate(); manager.ImportTemplate(xml, newtemplate, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(), new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>()); assertEquals( template is different than expected template, newtemplate); assertEquals( db generation is different than expected template.getDbGeneration(), newtemplate.getDbGeneration()); }
@java.lang.Override public java.lang.Long getRawValue(org.ovirt.engine.core.common.businessentities.StorageDomain object) { long availableDiskSize = ((object.getAvailableDiskSize()) != null) ? object.getAvailableDiskSize() : 0; return availableDiskSize; }
private void addVideoCardByDisplayType(org.ovirt.engine.core.common.businessentities.DisplayType displayType) { <START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>Map<END_MOD> struct = new <START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>HashMap<END_MOD>(); struct.<START_MOD>put<END_MOD>(VdsProperties.Type, VmDeviceType.VIDEO.getName()); struct.<START_MOD>put<END_MOD>(VdsProperties.Device, displayType.getVmDeviceType().getName()); struct.<START_MOD>put<END_MOD>(VdsProperties.SpecParams, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getNewMonitorSpecParams()); struct.<START_MOD>put<END_MOD>(VdsProperties.DeviceId, java.lang.String.valueOf(org.ovirt.engine.core.compat.Guid.NewGuid())); devices.add(struct); }
protected org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel getImportModel() { org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel(); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().importVirtualMachinesTitle()); model.setHashName("import_virtual_machine"); model.<START_MOD>setHelpTag(model.getHashName(),   > Import VM > Import Virtual Machine(s) model.<END_MOD>setEntity(getEntity()); return model; }
@java.lang.Override protected void configure() { bind(org.ovirt.engine.ui.uicommonweb.ConsoleOptionsFrontendPersister.class).to(org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.class).in(com.google.inject.Singleton.class); <START_MOD>bind(org.ovirt.engine.ui.uicommonweb.ConsoleUtils.class).to(org.ovirt.engine.ui.common.utils.ConsoleUtilsImpl.class).in(com.google.inject.Singleton.class); bind(org.ovirt.engine.ui.common.utils.ConsoleManager.class).in(com.google.inject.Singleton.class); <END_MOD>}
@org.junit.Test public void testGetAllForStorageEmpty() { java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> result = dao.getAllForStorageDomain(org.ovirt.engine.core.compat.Guid.newGuid()<START_MOD>, null, false<END_MOD>); assertNotNull(result); assertTrue(result.isEmpty()); }
<START_MOD>private void addBondToUpdateList(org.ovirt.engine.core.common.businessentities.network.Bond bond) { for (org.ovirt.engine.core.common.businessentities.network.Bond oldModifiedBond : hostSetupNetworksParametersData.newOrModifiedBonds) { if (oldModifiedBond.getName().equals(bond.getName())) { hostSetupNetworksParametersData.newOrModifiedBonds.remove(oldModifiedBond); break; } } hostSetupNetworksParametersData.newOrModifiedBonds.add(bond); }<END_MOD>
@java.lang.Override protected void executeVdsBrokerCommand() { mVmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmStatsVDSCommand.getBroker().getVmStats(org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmStatsVDSCommand.getParameters().getVmId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmStatsVDSCommand.proceedProxyReturnValue(); setReturnValue(createVmInternalData(mVmListReturn.mInfoList[0]<START_MOD>, org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmStatsVDSCommand.getVds()<END_MOD>)); }
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.EntityModel getUiLanguage() { return privateUiLanguage; }<END_MOD>
<START_MOD>@org.junit.Test public void updateVmDevicesNotNull() { org.ovirt.engine.core.compat.Guid vmGuid = org.ovirt.engine.core.compat.Guid.newGuid(); when(vmDeviceDAO.getVmDeviceByVmId(vmGuid)).thenReturn(java.util.Collections.<org.ovirt.engine.core.common.businessentities.VmDevice>emptyList()); java.util.HashMap vm = new java.util.HashMap(); vm.put(VdsProperties.vm_guid, vmGuid.toString()); java.util.Map<java.lang.String, java.lang.Object> deviceProperties = new java.util.HashMap<java.lang.String, java.lang.Object>(); org.ovirt.engine.core.compat.Guid deviceID = org.ovirt.engine.core.compat.Guid.newGuid(); deviceProperties.put(VdsProperties.DeviceId, deviceID.toString()); deviceProperties.put(VdsProperties.Address, java.util.Collections.emptyMap()); deviceProperties.put(VdsProperties.Device, "aDevice"); deviceProperties.put(VdsProperties.Type, VmDeviceGeneralType.DISK.getValue()); vm.put(VdsProperties.Devices, new java.util.HashMap[]{ new java.util.HashMap(deviceProperties) }); vmInfo = new java.util.HashMap[]{ vm }; vmsMonitoring.updateVmDevices(java.util.Collections.singletonList(vmGuid.toString())); junit.framework.Assert.assertEquals("wrong number of new devices", 1, vmsMonitoring.getNewVmDevices().size()); junit.framework.Assert.assertEquals("wrong number of removed devices", 0, vmsMonitoring.getRemovedVmDevices().size()); }<END_MOD>
<START_MOD>private double getSizeInGigabytes(T size) { double sizeInGB = -1; switch (unit) { case BYTE : sizeInGB = (size.doubleValue()) / (java.lang.Math.pow(1024, 3)); break; case GIGABYTE : sizeInGB = size.doubleValue(); break; } return sizeInGB; }<END_MOD>
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.AsyncTask task) { org.ovirt.engine.core.dao.<START_MOD>AsyncTaskDAOImpl<END_MOD>.AsyncTaskParameterSource parameterSource = getTaskParameterSource(task); parameterSource.addValue("started_at", task.getStartTime()); parameterSource.addValue("storage_pool_id", task.getStoragePoolId()); parameterSource.addValue("async_task_type", task.getTaskType()); getCallsHandler().executeModification("Insertasync_tasks", parameterSource); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.ActionGroup> getAllForRole(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id); return getCallsHandler().executeReadList("GetRoleActionGroupsByRoleId", org.ovirt.engine.core.dao.<START_MOD>ActionGroupDAOImpl<END_MOD>.ActionGroupMapper.instance, parameterSource); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( mount path is illegal, please use [IP:/path or FQDN:/path] convention. java.lang.String nfsMountPashIsIllegalMsg();
<START_MOD>@java.lang.Override public void onFailed(org.ovirt.engine.core.compat.Guid cmdId, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds) { getCommand(cmdId).onStopVmsFailed(); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.removeAllCommandsInHierarchy(cmdId); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> runBalance(java.lang.String balanceName, java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs, java.util.Map<java.lang.String, java.lang.String> propertiesMap) { try { org.apache.xmlrpc.client.XmlRpcClient client = new org.apache.xmlrpc.client.XmlRpcClient(); client.setConfig(config); java.lang.Object result = client.execute(org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.BALANCE, createBalanceArgs(balanceName, hostIDs, propertiesMap)); return parseBalanceResults(result); } catch (org.apache.xmlrpc.XmlRpcException e) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.log.error( not communicate with the external scheduler while balancing e); <START_MOD>org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); <END_MOD>return null; } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.aaa.DirectoryUser> findUsers(java.util.List<<START_MOD>java.lang.String<END_MOD>> ids) {<START_MOD> java.util.List<org.ovirt.engine.extensions.aaa.builtin.kerberosldap.IdType> idTypes = new java.util.ArrayList<>(); for (java.lang.String id : ids) { idTypes.add(new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.IdType(id)); }<END_MOD> org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapReturnValueBase ldapResult = broker.runAdAction(AdActionType.GetAdUserByUserIdList, new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapSearchByUserIdListParameters(getName(), <START_MOD>idTypes<END_MOD>)); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.LdapUser> ldapUsers = ((java.util.List<org.ovirt.engine.core.common.businessentities.LdapUser>) (ldapResult.getReturnValue())); return mapUsers(ldapUsers); }
private static java.util.Map getData(java.net.HttpURLConnection connection) throws java.lang.Exception { try (java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream()) { try (java.io.InputStream input = connection.getInputStream()) { org.ovirt.engine.core.aaa.filters.FiltersHelper.copy(input, os); } java.lang.ClassLoader loader = java.lang.Thread.currentThread().getContextClassLoader(); java.lang.Thread.currentThread().setContextClassLoader(org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.class.getClassLoader()); try { <START_MOD>org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.log.info(new java.lang.String(os.toByteArray(), java.nio.charset.StandardCharsets.UTF_8.name())); <END_MOD>return new org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer().deserialize(new java.lang.String(os.toByteArray(), java.nio.charset.StandardCharsets.UTF_8.name()), java.util.HashMap.class); } finally { java.lang.Thread.currentThread().setContextClassLoader(loader); } } }
<START_MOD>private void saveHookContent(java.util.List<java.util.concurrent.Callable<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity, org.ovirt.engine.core.common.vdscommands.VDSReturnValue>>> contentTasksList) { if (contentTasksList.isEmpty()) { return; } java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity, org.ovirt.engine.core.common.vdscommands.VDSReturnValue>> pairResults = org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.invokeAll(contentTasksList); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity, org.ovirt.engine.core.common.vdscommands.VDSReturnValue> pairResult : pairResults) { final org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook = pairResult.getFirst(); final java.lang.String content = ((java.lang.String) (pairResult.getSecond().getReturnValue())); getHooksDao().updateGlusterHookContent(hook.getId(), hook.getChecksum(), content); } }<END_MOD>
<START_MOD>protected void UpdateHookStatusInDb(org.ovirt.engine.core.compat.Guid clusterId, java.lang.String hookName, org.ovirt.engine.core.common.businessentities.gluster.GlusterHookStatus status) { org.ovirt.engine.core.bll.gluster.GlusterCommandBase.getGlusterHookDao().updateGlusterHookStatusByName(clusterId, hookName, status); }<END_MOD>
@java.lang.Override public java.lang.String toString() { return super.<START_MOD>appendAttributes<END_MOD>(<START_MOD>org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this<END_MOD>))<START_MOD>.append("storageDomainId",<END_MOD> getStorageDomainId())<START_MOD>.build(<END_MOD>); }
private boolean noChangesDetected() { return <START_MOD>(<END_MOD>(((getNetworks().isEmpty()) && (getRemovedNetworks().isEmpty())) && (org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getBonds().isEmpty())) && (getRemovedBonds().isEmpty())<START_MOD>) && (getRemovedUnmanagedNetworks().isEmpty())<END_MOD>; }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + (<START_MOD>scope<END_MOD>.hashCode()); result = (prime * result) + (doneAt.hashCode()); return result; }
@org.junit.Test public void testVmsWithNoIsoAttached() { mockDomain(); doReturn(domain).when(cmd).getStorageDomain(); doReturn(vmStaticDao).when(cmd).getVmStaticDao(); when(vmStaticDao.getAllByStoragePoolId(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.<org.ovirt.engine.core.common.businessentities.VmStatic>emptyList()); assertTrue(cmd.isRunningVmsWithIsoAttached()); assertTrue(cmd.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().isEmpty()); }
@java.lang.Override protected void executeVmCommand() { org.ovirt.engine.core.bll.VmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error( to add VM. The reasons are: {} java.lang.String.join(",", errorMessages)); return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } }
<START_MOD>@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper snapshotVmConfigurationHelper = getSnapshotVmConfigurationHelper(); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSnapshotDao().get(org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getParameters().getId(), Snapshot.SnapshotType.NEXT_RUN, org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getUserID(), org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getParameters().isFiltered()); org.ovirt.engine.core.common.businessentities.VM vm = null; if (snapshot != null) { vm = snapshotVmConfigurationHelper.getVmFromConfiguration(snapshot.getVmConfiguration(), snapshot.getVmId(), snapshot.getId()); } org.ovirt.engine.core.bll.GetVmNextRunConfigurationQuery.getQueryReturnValue().setReturnValue(vm); }<END_MOD>
private void updateAddAndSelectHostAvailability(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> availableHosts) { org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("AddHost", this); tempVar.setIsExecutionAllowed(((clusters.size()) > 0)); if (hosts.isEmpty()) { <START_MOD>tempVar<END_MOD>.setTitle(DataCenterConfigureHostsAction); getCompulsoryActions().add(<START_MOD>tempVar<END_MOD>); } else { <START_MOD>tempVar<END_MOD>.setTitle(DataCenterAddAnotherHostAction); getOptionalActions().add(<START_MOD>tempVar<END_MOD>); } org.ovirt.engine.ui.uicommonweb.UICommand selectHostAction = new org.ovirt.engine.ui.uicommonweb.UICommand("SelectHost", this); selectHostAction.setIsChangeable(((availableHosts.size()) > 0)); selectHostAction.setIsExecutionAllowed(((availableHosts.size()) > 0)); if ((clusters.size()) > 0) { if (hosts.isEmpty()) { selectHostAction.setTitle(DataCenterSelectHostsAction); getCompulsoryActions().add(selectHostAction); } else { selectHostAction.setTitle(DataCenterSelectHostsAction); getOptionalActions().add(selectHostAction); } } }
<START_MOD>@org.junit.Test public void canDoActionUpdateWipeAfterDeleteVmUp() { org.ovirt.engine.core.common.businessentities.DiskImage disk = createDiskImage(); disk.setReadOnly(false); when(diskDao.get(diskImageGuid)).thenReturn(disk); org.ovirt.engine.core.common.action.UpdateVmDiskParameters parameters = createParameters(); parameters.getDiskInfo().setReadOnly(false); parameters.getDiskInfo().setWipeAfterDelete(true); initializeCommand(parameters, java.util.Arrays.asList(createVm(VMStatus.Up))); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(command); }<END_MOD>
<START_MOD>private java.lang.String getToolTip(org.ovirt.engine.ui.webadmin.widget.table.column.VolumeStatusCell.VOLUMESTATUS status) { switch (status) { case DOWN : return constants.down(); case UP : return constants.up(); case SOMEBRICKSDOWN : return constants.volumeBricksDown(); case ALLBRICKSDOWN : return constants.volumeAllBricksDown(); default : return constants.down(); } }<END_MOD>
protected boolean isImageExclusiveLockNeeded() { return ((getDiskType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) && ((((org.ovirt.engine.core.common.businessentities.DiskImage) (getDisk())).getVolumeFormat()) != (org.ovirt.engine.core.common.businessentities.VolumeFormat.RAW)); }
<START_MOD>public int getCpuLimit() { return cpuLimit; }<END_MOD>
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { imagesToPreview = ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks()) != null) ? org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks() : org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getDbFacade().getDiskImageDao().getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter.filterCinderDisks<END_MOD>(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview, org.ovirt.engine.core.bll.snapshots.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.snapshots.ONLY_SNAPABLE); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }
<START_MOD>@org.junit.Test public void testGetFileFromStringHappy() { java.io.File file = new java.io.File("/etc"); java.io.File testFile = org.ovirt.engine.core.utils.ServletUtils.getFileFromString("hosts", file); assertEquals("new file should be same as old file", new java.io.File("/etc/hosts"), testFile); }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> getAll(org.ovirt.engine.core.compat.Guid userID, boolean isFiltered, org.ovirt.engine.core.common.businessentities.VmEntityType entityType) { return getCallsHandler().executeReadList("GetAllFromVmTemplates", org.ovirt.engine.core.dao.<START_MOD>VmTemplateDAOImpl<END_MOD>.VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("entity_type", entityType.name()).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }
private void handleNotLoggedInEvent(final java.lang.String errorMessage) { if ((errorMessage != null) && (errorMessage.equals("USER_IS_NOT_LOGGED_IN"))) { frontendNotLoggedInEvent.raise(org.ovirt.engine.ui.frontend.Frontend.class, EventArgs.<START_MOD>empty<END_MOD>); } }
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.common.utils.ToStringBuilder appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder tsb) { return super.appendAttributes(tsb).append("path", path); }<END_MOD>
@org.junit.Test public void testFindMappingEntryEmptyInput() {<START_MOD> org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); vnic.setNetworkName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME); vnic.setVnicProfileName(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE1_NAME);<END_MOD> final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(<START_MOD>vnic<END_MOD>, java.util.Collections.emptyList()); assertThat(actual, is(java.util.Optional.empty())); }
<START_MOD>private void isModelCompatibleWithOsTest(org.hamcrest.Matcher<org.ovirt.engine.core.bll.ValidationResult> matcher, org.ovirt.engine.core.common.businessentities.VmWatchdogType watchDogModel) { org.ovirt.engine.core.compat.Version version = new org.ovirt.engine.core.compat.Version(); org.ovirt.engine.core.common.businessentities.VmWatchdog vmWatchdog = new org.ovirt.engine.core.common.businessentities.VmWatchdog(); vmWatchdog.setModel(watchDogModel); org.ovirt.engine.core.bll.validator.VmWatchdogValidator validator = spy(new org.ovirt.engine.core.bll.validator.VmWatchdogValidator(0, vmWatchdog, version)); org.ovirt.engine.core.common.osinfo.OsRepository osRepository = mock(org.ovirt.engine.core.common.osinfo.OsRepository.class); when(validator.getOsRepository()).thenReturn(osRepository); when(osRepository.getWatchDogModels(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(org.ovirt.engine.core.bll.validator.VmWatchdogValidatorTest.WATCHDOG_MODELS); assertThat(validator.isModelCompatibleWithOs(), matcher); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate getVmTemplate() { org.ovirt.engine.core.common.businessentities.VmTemplate template = super.getVmTemplate(); if ((!(areTemplateDisksUpdated)) && (template != null)) { org.ovirt.engine.core.bll.VmTemplateHandler.UpdateDisksFromDb(template); areTemplateDisksUpdated = true; } return template; }<END_MOD>
@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc diskReplicateStart(java.lang.String vmUUID, java.util.Map srcDisk, java.util.Map dstDisk) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.diskReplicateStart").withParameter("vmID", vmUUID).withParameter("srcDisk", srcDisk).withParameter("dstDisk", dstDisk).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
private boolean validateBondSlavesCount() { boolean returnValue = true; for (java.util.Map.Entry<java.lang.String, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>> bondEntry : bonds.entrySet()) { if ((bondEntry.getValue().size()) < 2) { returnValue = false; addViolation(<START_MOD>EngineMessages<END_MOD>.NETWORK_BONDS_INVALID_SLAVE_COUNT, bondEntry.getKey()); } } return returnValue; }
private static org.ovirt.engine.core.common.businessentities.VDSGroup cloneVDSGroup(org.ovirt.engine.core.common.businessentities.VDSGroup instance) { org.ovirt.engine.core.common.businessentities.VDSGroup obj = new org.ovirt.engine.core.common.businessentities.VDSGroup(); obj.setId(instance.getId()); obj.setName(instance.getName()); obj.setdescription(instance.getdescription()); obj.setComment(instance.getComment()); obj.setcpu_name(instance.getcpu_name()); obj.setcompatibility_version(instance.getcompatibility_version()); obj.setMigrateOnError(instance.getMigrateOnError()); obj.setTransparentHugepages(instance.getTransparentHugepages()); obj.setStoragePoolId(instance.getStoragePoolId()); obj.setmax_vds_memory_over_commit(instance.getmax_vds_memory_over_commit()); obj.setCountThreadsAsCores(instance.getCountThreadsAsCores()); <START_MOD>obj.setArchitecture(instance.getArchitecture()); <END_MOD>return obj; }
@java.lang.Override protected void executeIrsBrokerCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.log.info( GetVolumeInfo using the current SPM org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getCurrentIrsProxyData().getCurrentVdsId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getImageId()); <START_MOD>params.setDisplayAuditLogMessage(org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().isDisplayAuditLogMessage()); <END_MOD>setVDSReturnValue(resourceManager.runVdsCommand(VDSCommandType.GetVolumeInfo, params)); }
<START_MOD>@org.junit.Test public void testGetAll() throws java.lang.Exception { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces = dao.getAll(); assertNotNull(interfaces); assertEquals(FixturesTool.NUMBER_OF_VM_INTERFACES, interfaces.size()); }<END_MOD>
<START_MOD>public static int getContentLength(java.lang.String message) { java.lang.String[] messageLines = message.split("\n"); int lenght = 0; int i = 0; while (i < ((messageLines.length) - 1)) { java.lang.String currentLine = messageLines[(++i)]; while ((currentLine.length()) > 0) { currentLine = messageLines[(++i)]; } i++; java.lang.StringBuilder content = new java.lang.StringBuilder(); java.lang.String endLine = null; for (int k = i; k < (messageLines.length); k++ , i++) { java.lang.String line = messageLines[k]; if (line.contains(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.END_OF_MESSAGE)) { int idx = line.indexOf(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message.END_OF_MESSAGE); content.append(line.substring(0, idx)); endLine = line.substring((idx + 1), line.length()); break; } else { content.append(line); } } lenght += content.length(); if (!(isEmpty(endLine))) { messageLines[i] = endLine; } else { i++; } } return lenght; }<END_MOD>
public void init(org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS qos) { if (qos == null) { networkQoS = new org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS(); } else { networkQoS = qos; } if ((((networkQoS.getInboundAverage()) == null) || ((networkQoS.getInboundPeak()) == null)) || ((networkQoS.getInboundBurst()) == null)) { getInbound().getEnabled().setEntity(false); } else { getInbound().getAverage().setEntity(networkQoS.getInboundAverage()); getInbound().getPeak().setEntity(networkQoS.getInboundPeak()); getInbound().getBurst().setEntity(networkQoS.getInboundBurst()); } if ((((networkQoS.getOutboundAverage()) == null) || ((networkQoS.getOutboundPeak()) == null)) || ((networkQoS.getOutboundBurst()) == null)) { getOutbound().getEnabled().setEntity(false); } else { getOutbound().getAverage().setEntity(networkQoS.getOutboundAverage()); getOutbound().getPeak().setEntity(networkQoS.getOutboundPeak()); getOutbound().getBurst().setEntity(networkQoS.getOutboundBurst()); } }
<START_MOD>@org.ovirt.engine.ui.common.Template("<i>Any valid libvirt URI format is allowed for KVM URI. <br />" + (((("Examples: <br />" + "qemu+tcp://&lthostname&gt/system <br />") + "qemu+ssh://root@&lthostname&gt/path <br />") + "Where '&lthostname&gt' is the remote host hypervisor. <br /> <br />") + "Please see libvirt documentation for more information on libvirt URI formats and authentication.</i>")) com.google.gwt.safehtml.shared.SafeHtml kvmUriInfo();<END_MOD>
private void updateAlerts(final org.ovirt.engine.ui.webadmin.section.main.presenter.tab.host.SubTabHostGeneralPresenter.ViewDef view, final org.ovirt.engine.ui.uicommonweb.models.hosts.HostGeneralModel model) { view.clearAlerts(); if (model.getHasUpgradeAlert()) { addTextAlert(view, messages.hostHasUpgradeAlert()); } if (model.getHasReinstallAlertNonResponsive()) { addTextAlert(view, messages.hostHasReinstallAlertNonResponsive()); } if (model.getHasReinstallAlertInstallFailed()) { addTextAndLinkAlert(view, messages.hostHasReinstallAlertInstallFailed(), model.getInstallCommand()); } if (model.getHasReinstallAlertMaintenance()) { addTextAndLinkAlert(view, messages.hostHasReinstallAlertMaintenance(), model.getInstallCommand()); } if (model.getHasNICsAlert()) { addTextAndLinkAlert(view, messages.hostHasNICsAlert(), model.getSaveNICsConfigCommand()); } if (model.getHasManualFenceAlert()) { addTextAlert(view, messages.hostHasManualFenceAlert()); } if (((org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.getUiMode()) != (org.ovirt.engine.core.common.mode.ApplicationMode.GlusterOnly)) && (model.getHasNoPowerManagementAlert())) { addTextAndLinkAlert(view, messages.hostHasNoPowerManagementAlert(), model.getEditHostCommand()); } if ((model.getNonOperationalReasonEntity()) != null) { <START_MOD>addTextAlert(view, new <END_MOD>org.ovirt.engine.ui.uicompat.EnumTranslator<START_MOD>()<END_MOD>.get(model.getNonOperationalReasonEntity())); } }
private void addSpecParamsColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD>> specParamsColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD>>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD> device) { return device.getSpecParams().toString(); } }; specParamsColumn.makeSortable(); getTable().addColumn(specParamsColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceSpecParamsAlias(), "300px"); }
public abstract java.util.Map<java.lang.String, java.lang.<START_MOD>Integer<END_MOD>> <START_MOD>getVideoDeviceParams<END_MOD>(org.ovirt.engine.core.common.businessentities.VmBase vmBase);
<START_MOD>@java.lang.Override public void setEnabled(boolean b) { }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult vmNotHavingDeviceSnapshotsAttachedToOtherVms(boolean onlyPlugged) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> vmDisks = getDbFacade().getDiskDao().getAllForVm(vm.getId()); org.ovirt.engine.core.bll.ValidationResult result = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(vmDisks, <START_MOD>org.ovirt.engine.core.bll.validator.NOT_SHAREABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.validator.ACTIVE_DISKS_ONLY<END_MOD>)).diskImagesSnapshotsNotAttachedToOtherVms(onlyPlugged); if (result != (org.ovirt.engine.core.bll.ValidationResult.VALID)) { return result; } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override protected boolean canDoAction() { boolean retValue = true; step = getStepDao().get(org.ovirt.engine.core.bll.EndExternalStepCommand.getParameters().getId()); if ((step) == null) { retValue = false; addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_NO_STEP); } else if (!(step.isExternal())) { retValue = false; addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_NOT_EXTERNAL); } else { job = getJobDao().get(step.getJobId()); if ((job) == null) { retValue = false; addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_NO_JOB); } if (!retValue) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__END); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__EXTERNAL_STEP); } } return retValue; }
private void doDrag(com.google.gwt.event.dom.client.DragDropEventBase<?> event, boolean isDrop) { java.lang.String dragDropEventData = org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.getDragDropEventData(event, isDrop); java.lang.String type = org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.getType(dragDropEventData); java.lang.String data = org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.getData(dragDropEventData); if (data != null) { animatedPanel.getElement().addClassName(style.networkGroupDragOver()); event.preventDefault(); } }
protected boolean canAddVm(java.util.ArrayList<java.lang.String> reasons, java.util.Collection<org.ovirt.engine.core.common.businessentities.StorageDomain> destStorages) { org.ovirt.engine.core.common.businessentities.VmStatic vmStaticFromParams = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData(); if (!(canAddVm(reasons, vmStaticFromParams.getName(), org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId(), vmStaticFromParams.getPriority()))) { return false; } if (!(validateCustomProperties(vmStaticFromParams, reasons))) { return false; } if (shouldCheckSpaceInStorageDomains()) { if (!(org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId().equals(getStoragePoolIdFromSourceImageContainer()))) { reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH.toString()); return false; } for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : destStorages) { org.ovirt.engine.core.bll.validator.<START_MOD>storage.<END_MOD>StorageDomainValidator storageDomainValidator = new org.ovirt.engine.core.bll.validator.<START_MOD>storage.<END_MOD>StorageDomainValidator(domain); if (!(validate(storageDomainValidator.isDomainExistAndActive()))) { return false; } } if (!(validateSpaceRequirements())) { return false; } } return isDedicatedVdsOnSameCluster(vmStaticFromParams); }
@org.junit.experimental.theories.Theory public void updateRepository_MIGRATION_FROM(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, true); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); verify(resourceManager, never()).internalSetVmStatus(data.dbVm(), VMStatus.MigratingTo); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((addr) == null ?   : addr.hashCode()); result = (prime * result) + ((description) == null ?   : description.hashCode()); result = (prime * result) + ((gateway) == null ?   : gateway.hashCode()); result = (prime * result) + ((id) == null ?   : id.hashCode()); result = (prime * result) + ((name) == null ?   : name.hashCode()); result = (prime * result) + ((dataCenterId) == null ?   : dataCenterId.hashCode()); result = (prime * result) + (stp ? 1231 : 1237); result = (prime * result) + ((subnet) == null ?   : subnet.hashCode()); result = (prime * result) + ((type) == null ?   : type.hashCode()); result = (prime * result) + ((vlanId) == null ?   : vlanId.hashCode()); result = (prime * result) + (mtu); result = (prime * result) + (vmNetwork ? 11 : 13); result = (prime * result) + ((providedBy) == null ?   : providedBy.hashCode()); result = (prime * result) + ((label) == null ?   : label.hashCode()); <START_MOD>result = (prime * result) + ((qos) == null ?   : qos.hashCode()); <END_MOD>return result; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( is no active Storage Domain to create the Disk in. Please activate a Storage Domain. java.lang.String thereIsNoActiveStorageDomainCreateDiskInMsg();
public org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> lookupNetwork(org.ovirt.engine.core.compat.Guid id) { return lookupNetwork(id, null); }
public org.ovirt.engine.ui.uicommonweb.models.vms.VmInitModel <START_MOD>getVmInitModel<END_MOD>() { return privateVmInitModel; }
private boolean isUpdateRequired(org.ovirt.vdsmfake.domain.VM.VMStatus status) { <START_MOD>if<END_MOD> <START_MOD>(((<END_MOD>status == (VM.VMStatus.Up)<START_MOD>)<END_MOD> <START_MOD>||<END_MOD> <START_MOD>(<END_MOD>status == (VM.VMStatus.PoweringDown)<START_MOD>))<END_MOD> <START_MOD>||<END_MOD> <START_MOD>(<END_MOD>status == (VM.VMStatus.Paused)<START_MOD>))<END_MOD> <START_MOD>{ return<END_MOD> true<START_MOD>;<END_MOD> <START_MOD>} return<END_MOD> false; }
<START_MOD>@org.junit.Test public void allValuesPresent() { qos.setInboundAverage(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_MEDIUM); qos.setInboundPeak(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_MEDIUM); qos.setInboundBurst(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_MEDIUM); valuesPresentTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }<END_MOD>
protected void removeFromExternalNetworks(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { org.ovirt.engine.core.bll.network.ExternalNetworkManager<START_MOD>.create<END_MOD>(iface).deallocateIfExternal(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); }
public static org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType forValue(org.ovirt.engine.core.common.utils.VmDeviceType value) { org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type; switch (value) { case DISK : case CDROM : case FLOPPY : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK; break; case INTERFACE : case BRIDGE : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.INTERFACE; break; case VIDEO : case CIRRUS : case QXL : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.VIDEO; break; case SOUND : case AC97 : case ICH6 : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.SOUND; break; case CONTROLLER : case USB : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.CONTROLLER; break; case BALLOON : case MEMBALLOON : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.BALLOON; break; case REDIR : case SPICEVMC : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.<START_MOD>REDIR<END_MOD>; break; case SMARTCARD : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.SMARTCARD; break; case WATCHDOG : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.WATCHDOG; break; default : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.forValue(value.getName()); break; } return type; }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Memory saved on a different compatibility version cannot be properly restored, following VMs should be off:") java.lang.String CLUSTER_WARN_CHANGE();<END_MOD>
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel item) { switch (item.getStatus()) { case Up : <START_MOD>org.ovirt.engine.core.common.businessentities.VM vm = item.getVM(); if (vm == null) { <END_MOD>return getApplicationResources().vmStatusRunning(); <START_MOD>} if (vm.isRunOnce()) { getApplicationResources().runOnceImage(); } else { getApplicationResources().vmStatusRunning(); } case MigratingFrom : case MigratingTo : return getApplicationResources().migrationImage(); <END_MOD>case WaitForLaunch : case ImageLocked : case PreparingForHibernate : case SavingState : return getApplicationResources().vmStatusWaiting(); case PoweringUp : case RebootInProgress : case RestoringState : return getApplicationResources().vmStatusStarting(); case Paused : <START_MOD>return getApplicationResources().frozenImage(); <END_MOD>case Suspended : return getApplicationResources().vmStatusPaused(); case Unknown : return getApplicationResources().vmStatusUnknown(); case Unassigned : case ImageIllegal : case Down : case NotResponding : case PoweredDown : return getApplicationResources().vmStatusStopped(); case PoweringDown : return getApplicationResources().vmStatusStopping(); default : return getApplicationResources().vmStatusUnknown(); } }
@java.lang.Override public org.ovirt.engine.api.model.Tag update(org.ovirt.engine.api.model.Tag incoming) { if (parent.isSetParentName(incoming)) { incoming.getParent().getTag().setId(parent.getParentId(incoming)); } <START_MOD>java.lang.String existingParentId = getEntity(new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetTagByTagId, org.ovirt.engine.core.common.queries.GetTagByTagIdParameters.class), true).getparent_id().toString(); <END_MOD>if (<START_MOD>(<END_MOD>isSetParent(incoming)) <START_MOD>&& (!(existingParentId.equals(incoming.getParent().getTag().getId())))) <END_MOD>{ moveTag(asGuid(incoming.getParent().getTag().getId())); } return performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetTagByTagId, org.ovirt.engine.core.common.queries.GetTagByTagIdParameters.class), VdcActionType.UpdateTag, new org.ovirt.engine.api.restapi.resource.BackendTagResource.UpdateParametersProvider()); }
<START_MOD>@org.junit.Test public void testMapNullFromModelToBE() { org.junit.Assert.assertThat(underTest.map(((org.ovirt.engine.api.model.Ipv6BootProtocol) (null)), null), org.hamcrest.CoreMatchers.is(((org.ovirt.engine.core.common.businessentities.network.Ipv6BootProtocol) (null)))); }<END_MOD>
@java.lang.Override protected boolean validate() { if (<START_MOD>org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVds().isPmEnabled()) { java.util.List<org.ovirt.engine.core.common.businessentities.pm.FenceAgent> fenceAgents = fenceAgentDao.getFenceAgentsForHost(org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getVdsId()); if ((fenceAgents.size()) == 1) { return failValidation(EngineMessage.VDS_REMOVE_LAST_FENCE_AGENT_PM_ENABLED); } } if (<END_MOD>(((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return failValidation(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } return super.validate(); }
<START_MOD>private void storeIpv4(java.lang.StringBuilder output, org.ovirt.engine.core.common.businessentities.VmInitNetwork iface) { storeIp(output, new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.Ipv4InfoFetcher(iface)); }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ("raidTypeChanged".equals(propName)) { if (((model.getRaidTypeList().getSelectedItem()) != (org.ovirt.engine.core.common.businessentities.RaidType.None)) && ((model.getRaidTypeList().getSelectedItem()) != (org.ovirt.engine.core.common.businessentities.RaidType.Raid0))) { getView().setDeviceInfoText(model.getRaidTypeList().getSelectedItem().name()); getView().setDeviceInfoVisibility(true); } else { getView().setDeviceInfoVisibility(false); } } }<END_MOD>
<START_MOD>@java.lang.Override public void updateAllInTransaction(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmStatistics> vmStatisticsToSave) { updateAllInBatch("updatevmstatistics", vmStatisticsToSave.values(), new org.ovirt.engine.core.dal.dbbroker.EntityToMapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.VmStatistics>() { @java.lang.Override public org.springframework.jdbc.core.namedparam.MapSqlParameterSource map(org.ovirt.engine.core.common.businessentities.VmStatistics entity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource paramValue = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource(); paramValue.addValue("cpu_sys", entity.getcpu_sys()); paramValue.addValue("cpu_user", entity.getcpu_user()); paramValue.addValue("elapsed_time", entity.getelapsed_time()); paramValue.addValue("usage_cpu_percent", entity.getusage_cpu_percent()); paramValue.addValue("usage_mem_percent", entity.getusage_mem_percent()); paramValue.addValue("usage_network_percent", entity.getusage_network_percent()); paramValue.addValue("disks_usage", entity.getDisksUsage()); paramValue.addValue("vm_guid", entity.getId()); return paramValue; } }); }<END_MOD>
<START_MOD>private void writeEnumValues(org.ovirt.api.metamodel.concepts.EnumType type) { java.util.Iterator<org.ovirt.api.metamodel.concepts.EnumValue> iterator = type.getValues().iterator(); while (iterator.hasNext()) { org.ovirt.api.metamodel.concepts.EnumValue value = iterator.next(); javaBuffer.addLine((("@XmlEnumValue(\"" + (java.lang.String.join("_", value.getName().getWords()).toLowerCase())) + "\")")); javaBuffer.addLine(getEnumValueLine(value, (!(iterator.hasNext())))); } javaBuffer.addLine(); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.Object put(java.lang.Object key, java.lang.Object value) { java.lang.String stringKey = ((java.lang.String) (key)); boolean found = false; int numEnums = classes.length; if (!(stringKey.startsWith(org.ovirt.engine.core.utils.EnumTranslationProperties.VALIDATION_PREFIX))) { for (int i = 0; (i < numEnums) && (!found); ++i) { try { java.lang.Enum.valueOf(classes[i], stringKey); found = true; } catch (java.lang.IllegalArgumentException ignore) { org.ovirt.engine.core.utils.EnumTranslationProperties.log.debug(((stringKey + " is not a key in ") + (classes[i].getName()))); } } if (!found) { java.lang.StringBuilder sb = new java.lang.StringBuilder("No translation for key [").append(stringKey).append("] in enums: [").append(classes[0].getName()); for (int i = 1; i < (classes.length); ++i) { sb.append(", ").append(classes[i]); } sb.append(']'); throw new org.ovirt.engine.core.utils.MissingEnumTranslationException(sb.toString()); } } return super.put(key, value); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc hostdevChangeNumvfs(java.lang.String deviceName, int numOfVfs) { try { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = vdsServer.hostdevChangeNumvfs(deviceName, numOfVfs); org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(xmlRpcReturnValue); return wrapper; } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }<END_MOD>
@org.jboss.arquillian.container.test.api.Deployment public static org.jboss.shrinkwrap.api.spec.JavaArchive createDeployment() { return org.jboss.shrinkwrap.api.ShrinkWrap.create(org.jboss.shrinkwrap.api.spec.JavaArchive.class).addClasses(<START_MOD>org.ovirt.engine.core.di.Injector.class, <END_MOD>org.ovirt.engine.core.bll.scheduling.CommonTestMocks.class, org.ovirt.engine.core.bll.scheduling.SchedulingManager.class, org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.class, org.ovirt.engine.core.bll.scheduling.BasicMigrationHandler.class).addAsManifestResource(EmptyAsset.INSTANCE, org.jboss.shrinkwrap.api.ArchivePaths.create("beans.xml")); }
<START_MOD>@org.junit.Test public void validateSpaceNotEnough() throws java.lang.Exception { org.ovirt.engine.core.bll.AddVmCommand<org.ovirt.engine.core.common.action.VmManagementParametersBase> command = setupCanAddVmTests(0, 0); doReturn(ValidationResult.VALID).when(storageDomainValidator).isDomainWithinThresholds(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN)).when(storageDomainValidator).hasSpaceForNewDisks(any(java.util.List.class)); doReturn(storageDomainValidator).when(command).createStorageDomainValidator(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); junit.framework.Assert.assertFalse(command.validateSpaceRequirements()); verify(storageDomainValidator).hasSpaceForNewDisks(any(java.util.List.class)); verify(storageDomainValidator, never()).hasSpaceForClonedDisks(any(java.util.List.class)); }<END_MOD>
private void createSnapshotsForDisks(org.ovirt.engine.core.compat.Guid vmSnapshotId) { for (org.ovirt.engine.core.common.businessentities.DiskImage image : getDisksList()) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = <START_MOD>runCommand(commandsMap<END_MOD>.<START_MOD>get<END_MOD>(image.<START_MOD>getImageId<END_MOD>())); if (vdcReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList()); } else { throw new org.ovirt.engine.core.common.errors.VdcBLLException(vdcReturnValue.getFault().getError(),   Failed to create snapshot! } } }
@org.junit.Test public void canDoPass() { when(hostedEngineHelper.getStorageDomain()).thenReturn(null); org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain(); int i = new java.util.Random().nextInt(SUPPORTED_DOMAIN_TYPES.length); sd.setStorageType(org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.SUPPORTED_DOMAIN_TYPES[i]); sd.setStorageName(org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommandTest.HOSTED_STORAGE_NAME); doReturn(createQueryReturnValueWith(java.util.Arrays.asList(sd))).when(backend).runInternalQuery(eq(VdcQueryType.GetExistingStorageDomainList), any(org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class)); assertTrue(cmd.<START_MOD>validate<END_MOD>()); }
<START_MOD>@java.lang.Override public boolean isMemBalloonEnabled(org.ovirt.engine.core.compat.Guid vmId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_id", vmId); java.util.Map<java.lang.String, java.lang.Object> dbResults = new org.springframework.jdbc.core.simple.SimpleJdbcCall(jdbcTemplate).withFunctionName("isMemBalloonEnabled").execute(parameterSource); java.lang.String resultKey = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbEngineDialect().getFunctionReturnKey(); return (dbResults.get(resultKey)) != null ? ((java.lang.Boolean) (dbResults.get(resultKey))).booleanValue() : false; }<END_MOD>
<START_MOD>@java.lang.Override protected void executeVdsBrokerCommand() { try { init(); status = org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getBroker().updateVmPolicy(struct); org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.setVdsRuntimeError(e); org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getVDSReturnValue().setExceptionString(null); } }<END_MOD>
<START_MOD>private static synchronized javax.naming.InitialContext getInitialContext() throws javax.naming.NamingException { if ((org.ovirt.engine.core.utils.ejb.EJBUtilsStrategy.context) == null) org.ovirt.engine.core.utils.ejb.EJBUtilsStrategy.context = new javax.naming.InitialContext(); return org.ovirt.engine.core.utils.ejb.EJBUtilsStrategy.context; }<END_MOD>
<START_MOD>private org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator createHostSetupNetworksValidator(java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks) { return new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setHost(host).setParams(new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId())).setNetworkBusinessEntityMap(new org.ovirt.engine.core.common.businessentities.BusinessEntityMap(networks)).build(); }<END_MOD>
private void preview() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getEntity())); if (vm == null) { return; } org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSelectedItem(); if ((!(isMemorySnapshotSupported())) || (snapshot.getMemoryVolume().isEmpty())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId()), null); } else { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().previewSnapshotTitle()); model.setHelpTag(HelpTag.preview_snapshot); model.setHashName("preview_snapshot"); addCommands(model, "OnPreview"); } }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE); addCanDoActionMessage(VdcBllMessages.<START_MOD>VAR__TYPE__POLICY_UNIT<END_MOD>); }
@org.junit.Test public void testHasUniqueNamePersistingNewRecordWithNullIdAndSameName() throws java.lang.Exception { final java.lang.String macPoolName = "macPool1"; assertThat(callHasUniqueName(org.ovirt.engine.core.compat.Guid.newGuid(), null, macPoolName, macPoolName), failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NAME_ALREADY_USED)); }
<START_MOD>@java.lang.Override <END_MOD>public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc setMaxHosts(int maxHosts) { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = irsServer.setMaxHosts(maxHosts); org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(xmlRpcReturnValue); return wrapper; }
@org.junit.Test public void testGetEntityNameByIdAndTypeForRole() { org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD> role = dbFacade.getRoleDAO().get(org.ovirt.engine.core.dao.DbFacadeDAOTest.ROLE_ID); assertNotNull(role); java.lang.String name = role.getname(); assertTrue(name.equals(dbFacade.getEntityNameByIdAndType(org.ovirt.engine.core.dao.DbFacadeDAOTest.ROLE_ID, VdcObjectType.Role))); }
protected org.ovirt.engine.core.compat.Guid removeMemoryImage(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { org.ovirt.engine.core.compat.Guid taskId1 = enclosingCommand.persistAsyncTaskPlaceHolder(VmCommand.DELETE_PRIMARY_IMAGE_TASK_KEY); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsRetValue<START_MOD>; try { vdsRetValue<END_MOD> = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.DeleteImageGroup, buildDeleteMemoryImageParams(guids)); if (!(vdsRetValue.getSucceeded())) { return null; } <START_MOD>} catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { if ((e.getErrorCode()) == (org.ovirt.engine.core.common.errors.VdcBllErrors.ImageDoesNotExistInDomainError)) { return org.ovirt.engine.core.compat.Guid.Empty; } throw e; } <END_MOD>org.ovirt.engine.core.compat.Guid guid1 = enclosingCommand.createTask(taskId1, vdsRetValue.getCreationInfo(), enclosingCommand.getActionType(), VdcObjectType.Storage, guids.get(0)); enclosingCommand.getTaskIdList().add(guid1); return guid1; }
@java.lang.Override protected boolean canDoAction() { <START_MOD>org.ovirt.engine.core.common.businessentities.storage.Disk<END_MOD> <START_MOD>disk = org.ovirt.engine.core.bll.CopyImageGroupCommand.getDiskDao<END_MOD>(<START_MOD>).get(org.ovirt.engine.core.bll.CopyImageGroupCommand.getParameters().getImageGroupID<END_MOD>()); <START_MOD>org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = new org.ovirt.engine.core.bll.validator.storage.DiskValidator(disk); return (validate(diskValidator.validateDiskIsNotLun())) && (validate(diskValidator.validateDiskIsNotCinder())); <END_MOD>}
@org.junit.Before public void setUp() throws java.lang.Exception { setUpMockQueryParameters(); setUpSpyQuery(); <START_MOD>for (org.ovirt.engine.core.bll.MockConfigDescriptor<?> mcd : getExtraCofigDescriptors()) { org.ovirt.engine.core.bll.AbstractQueryTest.mcr.mockConfigValue(mcd); <END_MOD>}<START_MOD> }<END_MOD>
protected byte[] runHttpMethod(org.ovirt.engine.core.bll.provider.BaseProviderProxy.HttpMethodType httpMethod, java.lang.String contentType, java.lang.String relativeUrl, java.lang.String body, java.net.HttpURLConnection connection) { byte[] result = null; try { connection.setRequestProperty("Content-Type", contentType); connection.setDoInput(true); connection.setDoOutput((httpMethod != (org.ovirt.engine.core.bll.provider.BaseProviderProxy.HttpMethodType.GET))); connection.setRequestMethod(httpMethod.toString()); if (body != null) { byte[] bytes = body.getBytes(java.nio.charset.Charset.forName("UTF-8")); connection.setRequestProperty("Content-Length", new java.lang.StringBuilder().append(bytes.length).toString()); try (java.io.OutputStream outputStream = connection.getOutputStream()) { outputStream.write(bytes); } } result = getResponse(connection); } catch (javax.net.ssl.SSLException e) { throw new org.ovirt.engine.core.common.errors.<START_MOD>EngineException<END_MOD>(org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.PROVIDER_SSL_FAILURE, e.getMessage()); } catch (java.io.IOException e) { org.ovirt.engine.core.bll.provider.BaseProviderProxy.handleException(e); } finally { if (connection != null) { connection.disconnect(); } } return result; }
@java.lang.Override protected void EndSuccessfully() { org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.EndActionOnDisks(); if ((org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getVm()) != null) { <START_MOD>tryBackToVmConfigurationSnapshot<END_MOD>(); } else { org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.setCommandShouldBeLogged(false); log.warn( Vm is null - not performing EndAction on Vm } org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.setSucceeded(true); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(RegistrationResult.RetrievedEventDefinition)) { asyncResult_Retrieved(); } if (ev.matchesDefinition(ProvideTickEvent.definition)) { syncSearch(); } <START_MOD>entityModel.eventRaised(ev, sender, args); <END_MOD>}
<START_MOD>@org.junit.Test public void testValidateNetworkExclusiveOnNic_atMostOneNonVmNetwork() throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid(), vlanNetwork, nonVmNetwork1); }<END_MOD>
@org.junit.Test public void <START_MOD>removeAllInterfacesAndMacs<END_MOD>() { <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.VmNetworkInterface> interfaces = java.util.Arrays.asList<END_MOD>(<START_MOD>createNewInterface(), createNewInterface()); when(vmNetworkInterfaceDAO.getAllForVm(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(interfaces); vmInterfaceManager.removeAllInterfacesAndMacs(org.ovirt.engine.core.compat.Guid.NewGuid()); for (org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : interfaces) { verifyRemoveAllDelegatedCorrectly(iface<END_MOD>, times(1)); }<START_MOD> }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__START); }
<START_MOD>protected boolean isSystemSuperUser() { org.ovirt.engine.core.compat.Guid userId = org.ovirt.engine.core.bll.GetAllRolesQuery.getUserID(); return isSystemSuperUserPredicate.eval(userId); }<END_MOD>
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { getView().selectSpiceImplementation(SpiceConsoleModel.ClientConsoleMode.Auto); <START_MOD>getView().setSpiceProxyEnabled(true, null); getView().setSpiceProxy(spiceProxyUserPreference); <END_MOD>}
<START_MOD>@java.lang.Override protected boolean isGhost(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> value) { java.lang.String text = value.getEntity(); return (text == null) || (text.isEmpty()); }<END_MOD>
@java.lang.Override protected void verify(org.ovirt.engine.api.model.VmPool model, org.ovirt.engine.api.model.VmPool transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getName(), transform.getName()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getSize(), transform.getSize()); assertNotNull(transform.getCluster()); assertEquals(model.getCluster().getId(), transform.getCluster().getId()); <START_MOD>assertEquals(model.getMaxAssignedVmsPerUser(), transform.getMaxAssignedVmsPerUser()); <END_MOD>}
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.createVnicProfileValidator(); boolean useDefaultNetworkFilterId = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().<START_MOD>isUseDefaultNetworkFilterId<END_MOD>(); return (((((((((validate(validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughProfileContainsSupportedProperties(useDefaultNetworkFilterId)))) && (validate(validator.validUseDefaultNetworkFilterFlag(useDefaultNetworkFilterId)))) && (validate(validator.validNetworkFilterId())); }
<START_MOD>private void setCustomProperties(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsByNetworkId, java.util.Map<java.lang.String, org.ovirt.engine.core.compat.Guid> networkNameToNetworkIdMap, org.ovirt.engine.api.restapi.resource.HostNic hostNic) { org.ovirt.engine.api.model.Network network = hostNic.getNetwork(); if (network == null) { return; } java.lang.String networkName = network.getName(); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = attachmentsByNetworkId.get(networkNameToNetworkIdMap.get(networkName)); if (networkAttachment == null) { return; } java.util.Map<java.lang.String, java.lang.String> properties = networkAttachment.getProperties(); if (properties != null) { hostNic.setProperties(org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.fromMap(properties)); } }<END_MOD>
@java.lang.Override public void init(javax.servlet.ServletConfig config) throws javax.servlet.ServletException { super.init(config); type = config.getInitParameter(org.ovirt.engine.core.FileServlet.TYPE); final java.lang.String name = config.getInitParameter(org.ovirt.engine.core.FileServlet.FILE); if (name == null) { final java.lang.String message = ( get base name from parameter   + (org.ovirt.engine.core.FileServlet.FILE)) + "\"."; org.ovirt.engine.core.FileServlet.log.error(message); throw new javax.servlet.ServletException(message); } base = new java.io.File(<START_MOD>org.ovirt.engine.core.utils.LocalConfig.getInstance().expandString(name)<END_MOD>); }
<START_MOD>@java.lang.Override public void init(final org.ovirt.engine.ui.uicommonweb.models.gluster.CreateBrickModel model) { super.init(model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ("raidTypeChanged".equals(propName)) { if (((model.getRaidTypeList().getSelectedItem()) != (org.ovirt.engine.core.common.businessentities.RaidType.None)) && ((model.getRaidTypeList().getSelectedItem()) != (org.ovirt.engine.core.common.businessentities.RaidType.Raid0))) { getView().setDeviceInfoText(model.getRaidTypeList().getSelectedItem().name()); getView().setDeviceInfoVisibility(true); } else { getView().setDeviceInfoVisibility(false); } } } }); }<END_MOD>
@org.junit.Before public void setup() { <START_MOD>mockCustomPropertiesUtils<END_MOD>(); mockIsoDomainListSyncronizer(); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( CD java.lang.String changeCDTitle();
<START_MOD>protected void setIconAndFireChangeEvent(java.lang.String icon) { final org.ovirt.engine.ui.uicommonweb.models.vms.IconWithDefault oldPair = getValue(); setIcon(icon); final org.ovirt.engine.ui.uicommonweb.models.vms.IconWithDefault newPair = getValue(); com.google.gwt.event.logical.shared.ValueChangeEvent.fireIfNotEqual(this, oldPair, newPair); }<END_MOD>
@org.junit.Test public void searchNotUsingTags() { java.lang.String[] searchTexts = new java.lang.String[]{<START_MOD> "Users:",   type=user   type=group<END_MOD> "Hosts:", "Vms:", "Datacenters:", "Clusters:" }; for (java.lang.String searchText : searchTexts) { assertFalse(new org.ovirt.engine.core.searchbackend.SyntaxChecker().analyzeSyntaxState(searchText, false).isSearchUsingTags()); } }
com.google.gwt.user.client.ui.Grid createRow(final org.ovirt.engine.ui.uicommonweb.models.hosts.HostVLan hostVLan) { com.google.gwt.user.client.ui.<START_MOD>HorizontalPanel checkboxPanel = new com.google.gwt.user.client.ui.HorizontalPanel(); checkboxPanel.setWidth("100%"); if (isSelectionAvailable) { checkboxPanel.add(getCheckBox()); } checkboxPanel.add(new com.google.gwt.user.client.ui.Image(org.ovirt.engine.ui.webadmin.widget.host.VLanElementPanel.resources.splitRotateImage())); checkboxPanel.add(new com.google.gwt.user.client.ui.Label(new org.ovirt.engine.ui.webadmin.widget.renderer.HostVLanNameRenderer().render(hostVLan))); com.google.gwt.user.client.ui.<END_MOD>Grid row = <START_MOD>createVlanRowColumn(checkboxPanel, hostVLan.getInterface().getIsManagement(), hostVLan.getNetworkName(), new com.google.gwt.user.client.ui.Label(hostVLan.getAddress())); com.google.gwt.dom.client.Style gridStyle = row.getElement().getStyle(); gridStyle.setBorderColor("white"); gridStyle.setBorderWidth<END_MOD>(1, <START_MOD>Unit.PX); gridStyle.setBorderStyle(BorderStyle.SOLID); return<END_MOD> row; }
private static java.util.Properties loadPropertiesFromFile(java.lang.String filename) { try (java.io.FileReader reader = new java.io.FileReader(new java.io.File(filename))) { java.util.Properties p = new java.util.Properties(); p.load(reader); org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.LOG.trace( properties from {}: filename); for (java.util.Map.Entry<java.lang.Object, java.lang.Object> e : p.entrySet()) { <START_MOD>if (<END_MOD>org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.<START_MOD>SENSISTIVE_DATA.contains(e.getKey())) { org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.<END_MOD>LOG.trace("{}=>{}", e.getKey(), <START_MOD>"****"); } else { org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.LOG.trace("{}=>{}", e.getKey(), <END_MOD>e.getValue());<START_MOD> }<END_MOD> } return p; } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(( not read properties from:   + filename), e); } }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { }
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { getView().selectSpiceImplementation(SpiceConsoleModel.ClientConsoleMode.Native); <START_MOD>getView().setSpiceProxyEnabled(true, null); getView().setSpiceProxy(spiceProxyUserPreference); <END_MOD>}
<START_MOD>@java.lang.Override public org.ovirt.engine.api.model.GraphicsConsoles list() { org.ovirt.engine.api.model.GraphicsConsoles consoles = new org.ovirt.engine.api.model.GraphicsConsoles(); java.util.Map<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> graphicsTypeToGraphicsInfo; org.ovirt.engine.api.model.InstanceType entity = loadEntity(); java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsType> graphicsTypes = org.ovirt.engine.api.restapi.util.DisplayHelper.getGraphicsTypesForEntity(this, guid, true); graphicsTypeToGraphicsInfo = new java.util.HashMap(); for (org.ovirt.engine.core.common.businessentities.GraphicsType type : graphicsTypes) { graphicsTypeToGraphicsInfo.put(type, null); } for (java.util.Map.Entry<org.ovirt.engine.core.common.businessentities.GraphicsType, org.ovirt.engine.core.common.businessentities.GraphicsInfo> graphicsInfo : graphicsTypeToGraphicsInfo.entrySet()) { consoles.getGraphicsConsoles().add(addLinks(populate(org.ovirt.engine.api.restapi.types.VmMapper.map(graphicsInfo, null), entity))); } return consoles; }<END_MOD>
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((balance) == null ?   : balance.hashCode()); result = (prime * result) + (<START_MOD>(selector) == null ?   : selector.hashCode()); result = (prime * result) + (<END_MOD>defaultPolicy ? 1231 : 1237); result = (prime * result) + ((description) == null ?   : description.hashCode()); result = (prime * result) + ((filterPositionMap) == null ?   : filterPositionMap.hashCode()); result = (prime * result) + ((filters) == null ?   : filters.hashCode()); result = (prime * result) + ((functions) == null ?   : functions.hashCode()); result = (prime * result) + ((id) == null ?   : id.hashCode()); result = (prime * result) + (locked ? 1231 : 1237); result = (prime * result) + ((name) == null ?   : name.hashCode()); result = (prime * result) + ((parameterMap) == null ?   : parameterMap.hashCode()); return result; }
<START_MOD>private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVlan(java.lang.String baseIfaceName) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = new org.ovirt.engine.core.common.businessentities.network.Vlan(); int vlanId = org.ovirt.engine.core.utils.RandomUtils.instance().nextInt(100); iface.setBaseInterface(baseIfaceName); iface.setVlanId(vlanId); iface.setName(((baseIfaceName + ".") + vlanId)); return iface; }<END_MOD>
@java.lang.SuppressWarnings("unchecked") public static <P extends org.ovirt.engine.core.common.action.VdcActionParametersBase> org.ovirt.engine.core.bll.CommandBase<P> CreateCommand(org.ovirt.engine.core.common.action.VdcActionType action, P parameters) { try { java.lang.reflect.Constructor<org.ovirt.engine.core.bll.CommandBase<? extends org.ovirt.engine.core.common.action.VdcActionParametersBase>> constructor = org.ovirt.engine.core.bll.CommandsFactory.findCommandConstructor(org.ovirt.engine.core.bll.CommandsFactory.getCommandClass(action.name(), org.ovirt.engine.core.bll.CommandsFactory.CommandSuffix), parameters.getClass()); <START_MOD>org.ovirt.engine.core.bll.CommandBase<P> cmd =<END_MOD> ((org.ovirt.engine.core.bll.CommandBase<P>) (constructor.newInstance(new java.lang.Object[]{ parameters }))); <START_MOD>org.ovirt.engine.core.bll.CommandsFactory.injectionHelper.bind(cmd); return cmd; <END_MOD>} catch (java.lang.Exception e) { org.ovirt.engine.core.bll.CommandsFactory.log.error((( [parameter: VdcActionParametersBase]: Failed to get type information using   +   for Action:   + action), e); return null; } }
public void setActiveDetailModel(org.ovirt.engine.ui.uicommonweb.models.<START_MOD>HasEntity<E><END_MOD> value) { if ((activeDetailModel) != value) { activeDetailModelChanging(value, getActiveDetailModel()); activeDetailModel = value; activeDetailModelChanged(); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("ActiveDetailModel")); } }
protected boolean setAndValidateCpuProfile() { org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getStaticData().setVdsGroupId(org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroupId()); org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getStaticData().setCpuProfileId(org.ovirt.engine.core.bll.ImportVmCommandBase.getParameters().getCpuProfileId()); return validate(org.ovirt.engine.core.bll.profiles.CpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getStaticData(), org.ovirt.engine.core.bll.ImportVmCommandBase.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())); }
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.VmDevice graphicsDev = getParameters().getDev().toVmDevice(); getVmDeviceDao().update(graphicsDev); setSucceeded(true); setActionReturnValue(graphicsDev.getId().getDeviceId()); }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { externalHostGroups_SelectedItemChanged(); }<END_MOD>
<START_MOD>@java.lang.Override public int compare(org.ovirt.engine.ui.uicommonweb.models.macpool.MacRangeModel range1, org.ovirt.engine.ui.uicommonweb.models.macpool.MacRangeModel range2) { return range1.getLeftBound().getEntity().compareTo(range2.getRightBound().getEntity()); }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { deactivate(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); getModel().setRngDevice(rngDevice); } activate(); updateVirtioScsi(vmBase); }
@java.lang.SuppressWarnings("unchecked") @org.junit.Test public void testRetryWithException() throws java.lang.Exception { java.util.concurrent.Callable<java.lang.Object> callable = mock(java.util.concurrent.Callable.class); org.ovirt.vdsm.jsonrpc.client.<START_MOD>internal.ClientPolicy<END_MOD> policy = new org.ovirt.vdsm.jsonrpc.client.<START_MOD>internal.ClientPolicy<END_MOD>(5, 3, 10, java.io.IOException.class); org.ovirt.vdsm.jsonrpc.client.utils.retry.Retryable<java.lang.Object> retryable = new org.ovirt.vdsm.jsonrpc.client.utils.retry.Retryable(callable, policy); stub(callable.call()).toThrow(new java.io.IOException()).toThrow(new java.io.IOException()).toReturn(new java.lang.Object()); retryable.call(); verify(callable, times(3)).call(); }
<START_MOD>@java.lang.Override public boolean isBalloonDisabledByDefault(int osId, org.ovirt.engine.core.compat.Version version) { return getBoolean(getValueByVersion(idToUnameLookup.get(osId), "devices.balloonDisabledByDefault", version), false); }<END_MOD>
<START_MOD>public void setPhysicalNetworkCustomRB(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> physicalNetworkCustomRB) { this.physicalNetworkCustomRB = physicalNetworkCustomRB; }<END_MOD>
@java.lang.Override protected void SyncSearch() { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (getEntity())); if (diskImage == null) { return; } org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableListModel = ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (model)); searchableListModel.setItems(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); } }; org.ovirt.engine.core.common.queries.<START_MOD>GetStorageDomainsByImageIdParameters<END_MOD> getImageByImageIdParameters = new org.ovirt.engine.core.common.queries.<START_MOD>GetStorageDomainsByImageIdParameters<END_MOD>(diskImage.getImageId()); getImageByImageIdParameters.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetStorageDomainsByImageId, getImageByImageIdParameters, _asyncQuery); setIsQueryFirstTime(false); }
private boolean storageDomainStatusIsValid() { boolean returnValue; if (org.ovirt.engine.core.bll.storage<START_MOD>.domains<END_MOD>.ActivateStorageDomainCommand.isInternalExecution()) { returnValue = checkStorageDomainStatus(StorageDomainStatus.Inactive, StorageDomainStatus.Unknown, StorageDomainStatus.Locked, StorageDomainStatus.Maintenance, StorageDomainStatus.PreparingForMaintenance); } else { returnValue = checkStorageDomainStatus(StorageDomainStatus.Inactive, StorageDomainStatus.Unknown, StorageDomainStatus.Maintenance, StorageDomainStatus.PreparingForMaintenance); } return returnValue; }
<START_MOD>private boolean customPropertiesChanged(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingIface) { return ((iface.hasCustomProperties()) != (existingIface.hasCustomProperties())) || ((iface.hasCustomProperties()) && (!(iface.getCustomProperties().equals(existingIface.getCustomProperties())))); }<END_MOD>
@org.junit.Test public void <START_MOD>validateFailsOnServerNotUp<END_MOD>() { cmd = spy(new org.ovirt.engine.core.bll.gluster.RemoveGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); setUpMocksForRemove(true, getHookEntity(), VDSStatus.Down); assertFalse(cmd.<START_MOD>validate<END_MOD>()); assertTrue(cmd.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().contains(EngineMessage.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP.toString())); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Description") java.lang.String descriptionAffinityGroup();
<START_MOD>private boolean isAttributes(com.thoughtworks.qdox.model.JavaMethod javaMethod) { return javaMethod.getName().equals("attributes"); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Play") java.lang.String playSpiceConsole();
<START_MOD>public boolean isBrickTabSelected() { return isBrickTabSelected; }<END_MOD>
public java.lang.String getMac() { return <START_MOD>(<END_MOD>mac<START_MOD>) != null ? mac : ""<END_MOD>; }
@java.lang.Override public java.lang.String toString() { <START_MOD>return org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>common.utils.ToStringBuilder.forInstance<END_MOD>(<START_MOD>this<END_MOD>).append(<START_MOD>"id"<END_MOD>, <START_MOD>getId()).append("status"<END_MOD>, <START_MOD>getStatus()).append("display"<END_MOD>, <START_MOD>isDisplay()).append("required"<END_MOD>, <START_MOD>isRequired()).append("migration"<END_MOD>, <START_MOD>isMigration()).append("management"<END_MOD>, <START_MOD>isManagement()).append("gluster",<END_MOD> <START_MOD>isGluster())<END_MOD>.<START_MOD>build<END_MOD>(); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> getAllWithoutIcon() { return getCallsHandler().executeReadList("GetVmStaticWithoutIcon", org.ovirt.engine.core.dao.<START_MOD>VmStaticDAOImpl<END_MOD>.getRowMapper(), getCustomMapSqlParameterSource()); }
public void warnOnActiveVm() { if (activeVmAttachedToClusterPredicate.evaluate(networkCluster.getClusterId())) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = createLoggable(); <START_MOD>auditLogableBase<END_MOD>.auditLog(loggable, AuditLogType.NETWORK_UPDATE_DISPLAY_FOR_CLUSTER_WITH_ACTIVE_VM); } }
private org.ovirt.engine.core.compat.Guid getQuotaId() { <START_MOD>if<END_MOD> <START_MOD>((quotaId) == null) { quotaId = defaultQuotaIfNull(<END_MOD>AddVmCommand.getParameters().getVmStaticData().getQuotaId()<START_MOD>)<END_MOD>; }<START_MOD> return quotaId; }<END_MOD>
@java.lang.Override protected void executeCommand() { initPoolUser(); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.VM, <START_MOD>getVmId())<END_MOD>); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = attachUserToVm(); if (!(vdcReturnValue.getSucceeded())) { log.info( to give user '{}' permission to Vm '{}' getAdUserId(), <START_MOD>getVmId()<END_MOD>); setActionReturnValue(vdcReturnValue); <START_MOD>vmPoolHandler.releaseVm(getVmId(), (!(isVmPrestarted()))<END_MOD>); return; } else { log.info( giving user '{}' permission to Vm '{}' getAdUserId(), <START_MOD>getVmId());<END_MOD> } if (!<START_MOD>(isVmPrestarted())) { vdcReturnValue = runVm(); setSucceeded(vdcReturnValue.getSucceeded()); <END_MOD>org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.<START_MOD>getReturnValue().getVdsmTaskIdList().addAll(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue().getInternalVdsmTaskIdList()); } else { org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.<END_MOD>setSucceeded(<START_MOD>true); }<END_MOD> setActionReturnValue(<START_MOD>getVmId()); }<END_MOD>
@java.lang.Override public java.lang.String toString() { <START_MOD>return org.ovirt.engine.core.common.utils.ToStringBuilder.forInstance(this).append("id", getLUN_id()).append("physicalVolumeId", getphysical_volume_id()).append("volumeGroupId", getvolume_group_id()).append("serial", getSerial()).append("lunMapping", getLunMapping()).append("vendorId", getVendorId()).append("productId", getProductId()).append("lunConnections", getLunConnections()).append("deviceSize", getDeviceSize()).append("vendorName", getVendorName()).append("pathsDictionary", getPathsDictionary()).append("lunType", getLunType()).append("status", getStatus()).append("diskId", getDiskId()).append("diskAlias", getDiskAlias()).append("storageDomainId", getStorageDomainId()).append("storageDomainName", getStorageDomainName()).build<END_MOD>(); }
@java.lang.Override public <START_MOD>org.ovirt.engine.ui.uicommonweb.models.EntityModel<END_MOD> setEntity(java.lang.Object value) {<START_MOD> return<END_MOD> super.setEntity((value == null ? null : ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData) (value)).getTemplate())); }
private java.lang.String <START_MOD>getMountPointsFilterPattern<END_MOD>() { java.<START_MOD>lang<END_MOD>.<START_MOD>String[] mountPointsToIgnore = <END_MOD>org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.GlusterStorageDeviceListMountPointsToIgore).split(",")<START_MOD>; java.lang.StringBuilder pattern = new java.lang.StringBuilder(); for (java.lang.String mointPoint : mountPointsToIgnore) { pattern.append("^"); pattern.append(mointPoint); pattern.append("$"); pattern.append("|"<END_MOD>); }<START_MOD> return pattern.toString(); }<END_MOD>
@org.junit.Test public void testGetByNameWithInvalidName() { org.ovirt.engine.core.common.businessentities.<START_MOD>Bookmarks<END_MOD> result = dao.getByName("thisnameisinvalid"); assertNull(result); }
byte[] digestFile(java.io.File file) throws java.io.FileNotFoundException, java.io.IOException { java.security.MessageDigest digest; try { digest = java.security.MessageDigest.getInstance("MD5"); } catch (java.security.NoSuchAlgorithmException e) { throw new java.lang.RuntimeException(e); } java.io.InputStream is = new java.io.FileInputStream(file); byte[] buffer = new byte[1024]; int n; while ((n = is.read(buffer)) != (-1)) { digest.update(buffer, 0, n); } <START_MOD>is.close(); <END_MOD>return digest.digest(); }
private void saveIllegalDisk(final org.ovirt.engine.core.common.businessentities.DiskImage diskImage) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { diskImage.setImageId(org.ovirt.engine.core.compat.Guid.NewGuid()); diskImage.setId(org.ovirt.engine.core.compat.Guid.NewGuid()); diskImage.setParentId(Guid.Empty); diskImage.<START_MOD>setItGuid<END_MOD>(Guid.Empty); org.ovirt.engine.core.bll.ImagesHandler.setDiskAlias(diskImage, getVm()); org.ovirt.engine.core.bll.ImagesHandler.addDiskImage(diskImage, getVmId()); return null; } }); }
<START_MOD>@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VmHostDevice> result = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmHostDevices = dbFacade.getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(org.ovirt.engine.core.bll.GetVmHostDevicesQuery.getParameters().getId(), VmDeviceGeneralType.HOST_DEVICE, VmDeviceType.HOST_DEVICE.getName(), org.ovirt.engine.core.bll.GetVmHostDevicesQuery.getUserID(), org.ovirt.engine.core.bll.GetVmHostDevicesQuery.getParameters().isFiltered()); for (org.ovirt.engine.core.common.businessentities.VmDevice device : vmHostDevices) { result.add(new org.ovirt.engine.core.common.businessentities.VmHostDevice(device)); } setReturnValue(result); }<END_MOD>
<START_MOD>public static boolean isRebootCommandExecutionAllowed(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms) { if ((vms.isEmpty()) || (!(org.ovirt.engine.core.common.VdcActionUtils.canExecute(vms, org.ovirt.engine.core.common.businessentities.VM.class, VdcActionType.RebootVm)))) { return false; } for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { org.ovirt.engine.core.compat.Version version = vm.getVdsGroupCompatibilityVersion(); if ((!(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isCommandCompatible(VdcActionType.RebootVm, version, version))) || (org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(vm.getVmIp()))) { return false; } } return true; }<END_MOD>
public static java.lang.String GenerateOTP() { java.security.SecureRandom secr = new java.security.SecureRandom(); byte[] arrRandom = new byte[9]; secr.nextBytes(arrRandom); return org.apache.commons.codec.binary.<START_MOD>StringUtils.newStringUtf8(org.apache.commons.codec.binary.<END_MOD>Base64.<START_MOD>encodeBase64<END_MOD>(arrRandom<START_MOD>, false)<END_MOD>); }
<START_MOD>@java.lang.Override public void reportCompleted() { super.reportCompleted(); org.ovirt.engine.core.bll.MigrateVmCommand.freeLock(); }<END_MOD>
<START_MOD>public static void updateParametersSequencing(java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters) { for (int i = 0; i < (parameters.size()); i++) { org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters setupNetworkParameters = ((org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters) (parameters.get(i))); setupNetworkParameters.setSequence((i + 1)); setupNetworkParameters.setTotal(parameters.size()); } }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( already exist on all available Storage Domains. java.lang.String disksAlreadyExistMsg();
@org.junit.Test public void testInterfaceIsValidSlaveWhenInterfaceIsBond() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName(); vdsNetworkInterface.setBonded(true); assertThat(new org.ovirt.engine.core.bll.validator.HostInterfaceValidator(vdsNetworkInterface).interfaceIsValidSlave(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.NETWORK_INTERFACE_BOND_OR_VLAN_CANNOT_BE_SLAVE)); }
@org.junit.Test public void testDiskImageWithSgioCantBeAdded() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = org.ovirt.engine.core.bll.AddDiskCommandTest.createVirtIoScsiDiskImage(); disk.setSgio(ScsiGenericIO.UNFILTERED); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(disk); org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId, parameters); mockStorageDomain(storageId); mockStoragePoolIsoMap(); org.ovirt.engine.core.common.businessentities.VM vm = mockVm(); vm.setVdsGroupCompatibilityVersion(Version.v3_3); mockMaxPciSlots(); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = spyDiskValidator(disk); doReturn(true).when(diskValidator).isVirtioScsiControllerAttached(any(org.ovirt.engine.core.compat.Guid.class)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, <START_MOD>EngineMessages<END_MOD>.SCSI_GENERIC_IO_IS_NOT_SUPPORTED_FOR_IMAGE_DISK); }
private void confirmUnplug() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<START_MOD><java.lang.String><END_MOD> model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<START_MOD><java.lang.String><END_MOD>(); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().deactivateVmDisksTitle()); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().areYouSureYouWantDeactivateVMDisksMsg()); model.setHashName("deactivate_vm_disk"); setWindow(model); java.util.ArrayList<java.lang.String> items = new java.util.ArrayList<java.lang.String>(); for (<START_MOD>org.ovirt.engine.core.common.businessentities.Disk<END_MOD> selected : getSelectedItems()) { items.add(selected.getDiskAlias()); } model.setItems(items); org.ovirt.engine.ui.uicommonweb.UICommand unPlug = new org.ovirt.engine.ui.uicommonweb.UICommand("OnUnplug", this); unPlug.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); unPlug.setIsDefault(true); model.getCommands().add(unPlug); org.ovirt.engine.ui.uicommonweb.UICommand cancel = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); cancel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); cancel.setIsCancel(true); model.getCommands().add(cancel); }
@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER) == (event.getNativeEvent().getKeyCode())) { if (ctx.canSetInModel()) { <START_MOD>boolean editorValid = true; if (editor instanceof org.ovirt.engine.ui.common.widget.editor.generic.EntityModelTextBox) { editorValid = ((org.ovirt.engine.ui.common.widget.editor.generic.EntityModelTextBox<?>) (editor)).isStateValid(); } if (editorValid) { <END_MOD>ctx.setInModel(editor.getValue()); } } }<START_MOD> }<END_MOD>
@java.lang.Override public boolean validate(org.ovirt.engine.core.config.entity.ConfigKey key, java.lang.String value) { <START_MOD>if<END_MOD> <START_MOD>((!(org.apache.commons.lang.StringUtils.isNotBlank(<END_MOD>value<START_MOD>))) && ((parser.getAdminPassFile())<END_MOD> == null<START_MOD>))<END_MOD> <START_MOD>{ return<END_MOD> false; }<START_MOD> return true; }<END_MOD>
@org.junit.Test public void validateVmMemoryCantStartOnVdsHighPendingSwapSmall() { vds.setSwapFree(60L); boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, true); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The storage selected contains the hosted engine.") java.lang.String ACTION_TYPE_FAILED_HOSTED_ENGINE_STORAGE();<END_MOD>
private void copy() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>) (getSelectedItems())); if (disks == null) { return; } if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.templates.CopyDiskModel model = new org.ovirt.engine.ui.uicommonweb.models.templates.CopyDiskModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().copyDisksTitle()); model.setHashName("copy_disk"); model.<START_MOD>setHelpTag(model.getHashName(),   > Virtual Disks > Copy Template model.<END_MOD>setEntity(this); model.init(disks); model.startProgress(null); }
private java.lang.String decodeDiskProperty(java.lang.String diskProperty) throws org.apache.commons.codec.DecoderException { return new java.lang.String(org.apache.commons.codec.binary.Hex.decodeHex(diskProperty.toCharArray()), org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandler.CHARSET); }
<START_MOD>private void writeAnnotationParameter(org.ovirt.api.metamodel.concepts.AnnotationParameter parameter) { writeName(parameter); java.util.List<java.lang.String> values = parameter.getValues(); if (!(values.isEmpty())) { writer.writeStartElement("values"); values.forEach(( x) -> writer.writeElement("value", x)); writer.writeEndElement(); } }<END_MOD>
<START_MOD>@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.common.action.RemoveCinderDiskVolumeParameters parameters = ((org.ovirt.engine.core.common.action.RemoveCinderDiskVolumeParameters) (command.getParameters())); org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskVolumeCommand removeCinderDiskVolumeCommand = ((org.ovirt.engine.core.bll.storage.disk.cinder.RemoveCinderDiskVolumeCommand) (command)); org.ovirt.engine.core.common.businessentities.storage.CinderDisk removedVolume = parameters.getRemovedVolume(); if (!(removeCinderDiskVolumeCommand.getCinderBroker().isVolumeExistsByClassificationType(removedVolume))) { super.childCommandsExecutionEnded(command, false, childCmdIds, status, completedChildren); } org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus = checkImageStatus(removedVolume, removeCinderDiskVolumeCommand); if ((imageStatus != null) && (imageStatus != (removedVolume.getImageStatus()))) { switch (imageStatus) { case ILLEGAL : super.childCommandsExecutionEnded(command, true, childCmdIds, status, completedChildren); break; } } }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult updateParametersForBackwardCompatibility(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic, org.ovirt.engine.core.common.businessentities.VmBase vm, org.ovirt.engine.core.compat.Guid userId) { if ((nic.getVnicProfileId()) != null) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((nic.getNetworkName()) == null) { if (nic.isPortMirroring()) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.PORT_MIRRORING_REQUIRES_NETWORK); } else { return org.ovirt.engine.core.bll.ValidationResult.VALID; } } org.ovirt.engine.core.common.businessentities.network.Network network = getNetworkDao().getByNameAndCluster(nic.getNetworkName(), vm.getVdsGroupId()); if (network == null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_NOT_EXISTS_IN_CLUSTER); } java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfile> vnicProfiles = getVnicProfileDao().getAllForNetwork(network.getId()); for (org.ovirt.engine.core.common.businessentities.network.VnicProfile profile : vnicProfiles) { if (isVnicProfilePermitted(userId, profile, nic.isPortMirroring())) { nic.setVnicProfileId(profile.getId()); return org.ovirt.engine.core.bll.ValidationResult.VALID; } } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_FIND_VNIC_PROFILE_FOR_NETWORK); }<END_MOD>
@java.lang.Override public void onBootstrap() { user.setLogoutHandler(this); initUiCommon(); initFrontend(); initLoginModel(); org.ovirt.engine.ui.common.auth.AutoLoginData autoLoginData = org.ovirt.engine.ui.common.auth.AutoLoginData.instance(); if (autoLoginData != null) { handleAutoLogin(autoLoginData); } <START_MOD>org.ovirt.engine.ui.common.restapi.EngineSessionTimeoutData engineSessionTimeoutData = org.ovirt.engine.ui.common.restapi.EngineSessionTimeoutData.instance(); if (engineSessionTimeoutData != null) { restApiSessionManager.setSessionTimeout(engineSessionTimeoutData.getValue()); <END_MOD>}<START_MOD> }<END_MOD>
<START_MOD>private static void updateV2VJobs(org.ovirt.engine.core.common.businessentities.VDS vds, java.util.Map<java.lang.String, java.lang.Object> xmlRpcStruct) { if (!(xmlRpcStruct.containsKey(VdsProperties.v2vJobs))) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.V2VJob> v2vJobs = new java.util.ArrayList<>(); for (java.util.Map.Entry<java.lang.String, java.lang.Object> job : ((java.util.Map<java.lang.String, java.lang.Object>) (xmlRpcStruct.get(VdsProperties.v2vJobs))).entrySet()) { v2vJobs.add(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.buildV2VJobData(job.getKey(), ((java.util.Map<java.lang.String, java.lang.Object>) (job.getValue())))); } vds.getStatisticsData().setV2vJobs(v2vJobs); }<END_MOD>
private void displayProtocol_SelectedItemChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.models.EntityModel entityModel = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (getDisplayProtocol().getSelectedItem())); if (entityModel == null) { return; } org.ovirt.engine.core.common.businessentities.DisplayType type = ((org.ovirt.engine.core.common.businessentities.DisplayType) (entityModel.getEntity())); if (type == (org.ovirt.engine.core.common.businessentities.DisplayType.vnc)) { getUsbPolicy().setSelectedItem(org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED); getIsSmartcardEnabled().setEntity(false); } getUsbPolicy().setIsChangable((type == (org.ovirt.engine.core.common.businessentities.DisplayType.qxl))); getIsSmartcardEnabled().setIsChangable((type == (org.ovirt.engine.core.common.businessentities.DisplayType.qxl))); getVncKeyboardLayout().setIsAvailable((type == (org.ovirt.engine.core.common.businessentities.DisplayType.vnc))); updateNumOfMonitors(); <START_MOD>getBehavior().updateSingleQxl(); <END_MOD>}
private void hotSetMemory(int newAmountOfMemory) { int currentMemory = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getMemSizeMb(); if (((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) && (<START_MOD>org.ovirt.engine.core.common.utils.VmCommonUtils.isMemoryToBeHotplugged(org.ovirt.engine.core.bll.UpdateVmCommand.getVm(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm()))) { org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters params = new org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters(newVmStatic, (<END_MOD>currentMemory <START_MOD><<END_MOD> newAmountOfMemory<START_MOD> ? org.ovirt.engine.core.common.action.PlugAction.PLUG : org.ovirt.engine.core.common.action.PlugAction.UNPLUG), 0); org.ovirt.engine.core.common.action.VdcReturnValueBase setAmountOfMemoryResult = runInternalAction(VdcActionType.HotSetAmountOfMemory,<END_MOD> params<START_MOD>, org.ovirt.engine.core.bll.UpdateVmCommand.cloneContextAndDetachFromParent()); <END_MOD>newVmStatic<START_MOD>.setMemSizeMb((setAmountOfMemoryResult.getSucceeded() ? newAmountOfMemory : <END_MOD>currentMemory<START_MOD>)); hotSetMemlog(params,<END_MOD> setAmountOfMemoryResult); } }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Balloon is not supported on '${VdsName}'.") java.lang.String BALLOON_REQUESTED_ON_NOT_SUPPORTED_ARCH();<END_MOD>
@java.lang.Override <START_MOD>protected<END_MOD> <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.utils.ToStringBuilder<END_MOD> <START_MOD>appendAttributes<END_MOD>(<START_MOD>org.ovirt.engine.core.common.utils.ToStringBuilder tsb<END_MOD>) { return super.<START_MOD>appendAttributes<END_MOD>(<START_MOD>tsb<END_MOD>)<START_MOD>.append("deviceList"<END_MOD>, getDeviceList()); }
@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc updateVmPolicy(java.util.Map params) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.updateVmPolicy").withParameter("vmID", ((java.lang.String) (params.get("vmId")))).withParameter("params", params).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Webapp deployment is in progress, please try again in a few minutes. java.lang.String reportsWebAppNotDeployedMsg();
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("OnTimer") public void OnTimer(org.ovirt.engine.core.compat.Guid domainId) { synchronized(_lockObject) { if (_domainsInProblem.containsKey(domainId)) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.info(( ProcessDomainRecovery for domain   + <START_MOD>(getDomainIdTuple(<END_MOD>domainId<START_MOD>))<END_MOD>)); ProcessDomainRecovery(domainId); } _timers.remove(domainId); } }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Edit") java.lang.String editVolume();
<START_MOD>protected void setUpEntityQueryExpectations(int times, java.lang.Object failure) throws java.lang.Exception { while ((times--) > 0) { setUpEntityQueryExpectations(QueryType.GetAllDisks, org.ovirt.engine.core.common.queries.QueryParametersBase.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, getEntityList(), failure); } }<END_MOD>
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.Snapshot>) (source)) : new java.util.ArrayList<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.Snapshot>(); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.<START_MOD>Permission<END_MOD>.class, to = org.ovirt.engine.<START_MOD>core.common.businessentities<END_MOD>.Permission.class) public static org.ovirt.engine.<START_MOD>core.common.businessentities<END_MOD>.Permission map(org.ovirt.engine.core.common.businessentities.<START_MOD>Permission<END_MOD> entity, org.ovirt.engine.api.model.Permission template) { org.ovirt.engine.api.model.Permission model = (template != null) ? template : new org.ovirt.engine.api.model.Permission(); model.setId(entity.getId().toString()); if ((entity.getRoleId()) != null) { model.setRole(new org.ovirt.engine.api.model.Role()); model.getRole().setId(entity.getRoleId().toString()); } if (((entity.getAdElementId()) != null) && ((template == null) || (!(template.isSetGroup())))) { model.setUser(new org.ovirt.engine.api.model.User()); model.getUser().setId(entity.getAdElementId().toString()); } if ((entity.getObjectId()) != null) { org.ovirt.engine.api.restapi.types.PermissionMapper.setObjectId(model, entity); } return model; }
<START_MOD>@org.junit.Test public void testCredentialsWithConnectionExtension() { org.ovirt.engine.core.common.businessentities.StorageServerConnections conn = createConnectionWithCredentials("target1", "userConn", "pwdConn"); org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension connExt = createConnectionExtension(org.ovirt.engine.core.compat.Guid.newGuid(), "target1", "userConnExt", "pwdConnExt"); when(connExtDaoMock.getByHostIdAndTarget(connExt.getHostId(), connExt.getIqn())).thenReturn(connExt); org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> credentials = getStorageConnectionCredentialsForhost(connExt.getHostId(), conn); assertCredentials(credentials, connExt.getUserName(), connExt.getPassword()); }<END_MOD>
@org.junit.Test public void testStartWithVnc() throws java.lang.Exception { setUpWindowsGetEntityExpectations(<START_MOD>2<END_MOD>, false<START_MOD>); setUpGetPayloadExpectations(0); setUpGetBallooningExpectations(<END_MOD>); setUriInfo(setUpActionExpectations(VdcActionType.RunVmOnce, org.ovirt.engine.core.common.action.RunVmOnceParams.class, new java.lang.String[]{ "VmId", "UseVnc" }, new java.lang.Object[]{ GUIDS[0], java.lang.Boolean.TRUE })); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setVm(new org.ovirt.engine.api.model.VM()); action.getVm().setDisplay(new org.ovirt.engine.api.model.Display()); action.getVm().getDisplay().setType(DisplayType.VNC.value()); verifyActionResponse(resource.start(action)); }
<START_MOD>private void initQueries() { if (providedTypes.contains(VdcObjectType.Network)) { queriesRun.put(VdcObjectType.Network, true); } }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult validate() { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = getAttachmentsToConfigure(); org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; vr = (skipValidation(vr)) ? vr : validNewOrModifiedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validRemovedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedBonds(); vr = (skipValidation(vr)) ? vr : validRemovedBonds(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : <START_MOD>new org.ovirt.engine.core.bll.network.host.LabelValidator(params, existingInterfacesMap, bondsMap).validate(); vr = (skipValidation(vr)) ? vr : <END_MOD>attachmentsDontReferenceSameNetworkDuplicately(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : networksUniquelyConfiguredOnHost(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateNetworkExclusiveOnNics(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NetworkMtuValidator(networkBusinessEntityMap).validateMtu(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateCustomProperties(); return vr; }
<START_MOD>private void hotUnplugMemory(org.ovirt.engine.core.common.businessentities.VM newVm) { final org.ovirt.engine.core.common.businessentities.VM vmFromDb = org.ovirt.engine.core.bll.UpdateVmCommand.getVm(); final java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmMemoryDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(getVmId(), VmDeviceGeneralType.MEMORY, VmDeviceType.MEMORY); final org.ovirt.engine.core.common.businessentities.VmDevice memoryDeviceToUnplug = computeMemoryDeviceToHotUnplug(vmMemoryDevices); final int oldMemoryMb = vmFromDb.getMemSizeMb(); final int oldMinMemoryMb = vmFromDb.getMinAllocatedMem(); if (memoryDeviceToUnplug == null) { logNoDeviceToHotUnplug(vmMemoryDevices); newVmStatic.setMemSizeMb(oldMemoryMb); newVmStatic.setMinAllocatedMem(oldMinMemoryMb); return; } final org.ovirt.engine.core.common.action.ActionReturnValue hotUnplugReturnValue = runInternalAction(ActionType.HotUnplugMemoryWithoutVmUpdate, new org.ovirt.engine.core.common.action.HotUnplugMemoryWithoutVmUpdateParameters(memoryDeviceToUnplug.getId(), newVm.getMinAllocatedMem()), org.ovirt.engine.core.bll.UpdateVmCommand.cloneContextAndDetachFromParent()); if (!(vmFromDb.isHostedEngine())) { final int memoryDeviceSizeMb = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(memoryDeviceToUnplug).get(); final int memoryAfterHotUnplugMb = oldMemoryMb - memoryDeviceSizeMb; newVmStatic.setMemSizeMb((hotUnplugReturnValue.getSucceeded() ? memoryAfterHotUnplugMb : oldMemoryMb)); newVmStatic.setMinAllocatedMem((hotUnplugReturnValue.getSucceeded() ? newVm.getMinAllocatedMem() : oldMinMemoryMb)); } }<END_MOD>
@java.lang.Override public final void run() { org.ovirt.engine.ui.uicommonweb.models.GridTimer.logger.fine((("GridTimer[" + (name)) +   called if ((repetitions) > 0) { (repetitions)--; } else if ((repetitions) == 0) { cycleRate(); } org.ovirt.engine.ui.uicommonweb.models.GridTimer.logger.fine(((((((("GridTimer[" + (name)) +   Executing! Current Rate:   + (rateCycle[<START_MOD>org.ovirt.engine.ui.uicommonweb.models.GridTimer.<END_MOD>currentRate])) + ":") + (getRefreshRate())) +   Reps:   + (repetitions))); execute(); }
private static org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator mockStorageDomainValidatorWithoutSpace() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = org.ovirt.engine.core.bll.MoveOrCopyDiskCommandTest.mockStorageDomainValidator(); when(storageDomainValidator.hasSpaceForClonedDisk(any(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)); return storageDomainValidator; }
@java.lang.Override public void setEntityId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable) { logable.setStoragePoolId(<START_MOD>get_oldStoragePool()<END_MOD>.getId()); }
<START_MOD>public java.util.List<org.ovirt.engine.core.bll.validator.InClusterUpgradeValidator.UPGRADE_ERROR> getVm() { return vm; }<END_MOD>
<START_MOD>@org.junit.Test public void storageDomainMappings() { assertEquals(LunStatus.Free.name(), org.ovirt.engine.api.restapi.types.StorageLogicalUnitMapper.map(org.ovirt.engine.core.common.businessentities.LunStatus.Free, null)); assertEquals(LunStatus.Used.name(), org.ovirt.engine.api.restapi.types.StorageLogicalUnitMapper.map(org.ovirt.engine.core.common.businessentities.LunStatus.Used, null)); assertEquals(LunStatus.Unusable.name(), org.ovirt.engine.api.restapi.types.StorageLogicalUnitMapper.map(org.ovirt.engine.core.common.businessentities.LunStatus.Unusable, null)); }<END_MOD>
<START_MOD>public static void refreshVmsToolsVersion(org.ovirt.engine.core.compat.Guid poolId, java.util.Set<java.lang.String> isoList) { java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsGroupDao().getAllForStoragePool(poolId); for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().getAllForVdsGroup(cluster.getId()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (((vm.getAppList()) != null) && (vm.getAppList().toLowerCase().contains("rhev-tools"))) { java.util.regex.Matcher m = org.ovirt.engine.core.bll.VmHandler.TOOLS_PATTERN.matcher(vm.getAppList().toLowerCase()); if (m.matches()) { org.ovirt.engine.core.common.businessentities.GuestAgentStatus oldStatus = vm.getGuestAgentStatus(); org.ovirt.engine.core.common.businessentities.GuestAgentStatus currStatus = org.ovirt.engine.core.bll.VmHandler.getAgentStatus(m.group(1), isoList); if (oldStatus != currStatus) { vm.setGuestAgentStatus(currStatus); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDao().update(vm.getDynamicData()); } } } } } }<END_MOD>
@java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.ExecuteCommand(command); if (command == (getNewCommand())) { New(); } else if (command == (getEditCommand())) { Edit(); } else if (command == (getRemoveCommand())) { Remove(); } else if (command == (getMoveCommand())) { Move(); } else if (command == (getCopyCommand())) { Copy(); } else if (<START_MOD>command == (getScanAlignmentCommand())) { ScanAlignment(); } else if (<END_MOD>org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnSave")) { OnSave(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnForceSave")) { OnForceSave(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "Cancel")) { Cancel(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "CancelConfirm")) { CancelConfirm(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnRemove")) { OnRemove(); } else if (command == (getChangeQuotaCommand())) { changeQuota(); } else if (command.getName().equals("onChangeQuota")) { onChangeQuota(); } }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase endAction() { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValueBase = super.endAction(); org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.freeLock(); return vdcReturnValueBase; }<END_MOD>
private static void getDefaultConfigurationVersion(java.lang.Object target) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(target, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { if (returnValue != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider._defaultConfigurationVersion = ((java.lang.String) (((org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.VdcQueryReturnValue) (returnValue)).getReturnValue())); } else { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider._defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel = ((org.ovirt.engine.ui.uicommonweb.models.LoginModel) (model)); loginModel.getLoggedInEvent().raise(loginModel, EventArgs.Empty); } }); callback.setHandleFailure(true); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetDefaultConfigurationVersion, new org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.VdcQueryParametersBase(), callback); }
<START_MOD>@java.lang.Override protected boolean canDoAction() { if (((org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()) == (-1)) || ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAuditLogDao().get(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId())) == null)) { addCanDoActionMessage(VdcBllMessages.AUDIT_LOG_CANNOT_REMOVE_AUDIT_LOG_NOT_EXIST); return false; } return true; }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc sparsifyInplace(org.ovirt.engine.core.compat.Guid jobId, java.util.Map<java.lang.String, java.lang.Object> volumeAddress) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("SDM.sparsify_inplace").withParameter("job_id", jobId).withParameter("vol_addr", volumeAddress).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.Void runInTransaction() { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDynamicDao().smartUpdatePartialVds(dstVdsId, 1, vm.getNumOfCpus(), vm.getMinAllocatedMem(), 0, 0); return null; }<END_MOD>
@org.junit.Test public void testActionWithCorrelationId() throws java.lang.Exception { setUpGetEntityExpectations(false, false); expect(httpHeaders.getRequestHeader("Correlation-Id")).andReturn(asList("Some-Correlation-id")).anyTimes(); resource.setUriInfo(setUpActionExpectations(VdcActionType.UpdateVds, org.ovirt.engine.core.common.action.UpdateVdsActionParameters.class, new java.lang.String[]{ "RootPassword", "CorrelationId" }, new java.lang.Object[]{ NAMES[2], "Some-Correlation-id" }, true, true)); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.<START_MOD>setPassword<END_MOD>(NAMES[2]<START_MOD>); action.setUsername("root"<END_MOD>); resource.install(action); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(cluster().id()), mandatory(cluster().name())); optional(clone()); optional(exclusive()); optional(template().name()); <START_MOD>optional(configuration()); <END_MOD>}
<START_MOD>protected org.ovirt.engine.core.common.action.ImportVmParameters createParametersWhenImagesExistOnTargetStorageDomain() { org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(); params.setContainerId(vmId); params.setStorageDomainId(storageDomainId); params.setVdsGroupId(clusterId); params.setImagesExistOnTargetStorageDomain(true); return params; }<END_MOD>
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume = org.ovirt.engine.core.bll.gluster.GlusterAsyncCommandBase.getGlusterVolume(); if (!(super.canDoAction())) { return false; } if (!(org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterAsyncTasks(org.ovirt.engine.core.bll.gluster.GlusterAsyncCommandBase.getVdsGroup().getCompatibilityVersion()))) { addCanDoActionMessageVariable("compatibilityVersion", org.ovirt.engine.core.bll.gluster.GlusterAsyncCommandBase.getVdsGroup().getCompatibilityVersion().getValue()); return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.GLUSTER_TASKS_NOT_SUPPORTED_FOR_CLUSTER_LEVEL); } if (!(glusterVolume.isOnline())) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED); } return true; }
public org.ovirt.engine.core.bll.ValidationResult isVirtIoScsiValid(org.ovirt.engine.core.common.businessentities.VM vm) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI) != (disk.getDiskInterface())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((disk.getSgio()) != null) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE) == (disk.getDiskStorageType())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.SCSI_GENERIC_IO_IS_NOT_SUPPORTED_FOR_IMAGE_DISK); } } if (vm != null) { if (!(org.ovirt.engine.core.common.FeatureSupported.virtIoScsi(vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL); } if (!(isVirtioScsiControllerAttached(vm.getId()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_PERFORM_ACTION_VIRTIO_SCSI_IS_DISABLED); } return isOsSupportedForVirtIoScsi(vm); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
<START_MOD>@java.lang.Override protected void init(org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentListModel listModel) { this.listModel = listModel; super.init(listModel); }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. iSCSI Bond is only supported on Data Center compatibility version 3.4 and higher.") java.lang.String ISCSI_BOND_NOT_SUPPORTED();<END_MOD>
protected boolean setAndValidateDiskProfiles() { org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().setDiskProfileId(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters().getDiskProfileId()); return validate(org.ovirt.engine.core.bll.profiles.DiskProfileHelper.setAndValidateDiskProfiles(java.util.Collections.singletonMap(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage(), org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()), org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getStoragePool().getcompatibility_version()<START_MOD>, org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getCurrentUser()<END_MOD>)); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VdcOption getByNameAndVersion(java.lang.String name, java.lang.String version) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("option_name", name).addValue("version", version); return getCallsHandler().executeRead("GetVdcOptionByName", org.ovirt.engine.core.dao.<START_MOD>VdcOptionDAOImpl<END_MOD>.VdcOptionRowMapper.instance, parameterSource); }
protected void postDataCentersLoaded(final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getClusterListByService(new org.ovirt.engine.ui.frontend.AsyncQuery(getModel(), new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (target)); model.setDataCentersAndClusters(model, dataCenters, ((java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup>) (returnValue)), null); initCdImage(); getPoolModelBehaviorInitializedEvent().raise(this, EventArgs.<START_MOD>empty<END_MOD>); } }, getModel().getHash()), true, false); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForRoleAndAdElement(org.ovirt.engine.core.compat.Guid roleid, org.ovirt.engine.core.compat.Guid elementid) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("role_id", roleid).addValue("ad_element_id", elementid); return getCallsHandler().executeReadList("GetPermissionsByRoleIdAndAdElementId", org.ovirt.engine.core.dao.<START_MOD>PermissionDAOImpl<END_MOD>.PermissionRowMapper.instance, parameterSource); }
@org.junit.Test public void testDelete() { dao.remove(FixturesTool.EXISTING_VM_JOB); java.util.List<org.ovirt.engine.core.compat.Guid> ids = <START_MOD>getAllJobIds<END_MOD>(); assertTrue(ids.remove(FixturesTool.EXISTING_VM_BLOCK_JOB)); assertTrue(ids.isEmpty()); }
@java.lang.Override public javax.ws.rs.core.Response remove() { org.ovirt.engine.api.model.StorageDomain storageDomain = get(); if (storageDomain.<START_MOD>getHostStorage<END_MOD>().getType().equals(StorageType.LOCALFS.value())) { org.ovirt.engine.core.common.action.RemoveStorageDomainParameters params = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(guid); params.setDoFormat(true); return performAction(VdcActionType.RemoveStorageDomain, params); } else { org.ovirt.engine.core.common.action.DetachStorageDomainFromPoolParameters params = new org.ovirt.engine.core.common.action.DetachStorageDomainFromPoolParameters(guid, dataCenterId); return performAction(VdcActionType.DetachStorageDomainFromPool, params); } }
<START_MOD>public org.ovirt.engine.core.common.businessentities.DiskImage getImageAsDiskImage(java.lang.String id) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = new org.ovirt.engine.core.common.businessentities.DiskImage(); com.woorea.openstack.glance.model.Image glanceImage = getGlanceClient().images().show(id).execute(); validateContainerFormat(glanceImage); java.lang.String shortHash = glanceImage.getId().substring(0, 7); diskImage.setDiskAlias(("DownloadedDisk-" + shortHash)); if ((glanceImage.getName()) != null) { diskImage.setDiskDescription(((((glanceImage.getName()) + " (") + shortHash) + ")")); } else { diskImage.setDiskDescription(("DownloadedDisk: " + shortHash)); } diskImage.setSize(getImageVirtualSize(glanceImage)); diskImage.setActualSizeInBytes(glanceImage.getSize()); if (glanceImage.getDiskFormat().equals(org.ovirt.engine.core.bll.provider.OpenstackImageProviderProxy.GlanceImageFormat.RAW.getValue())) { diskImage.setvolumeFormat(VolumeFormat.RAW); } else if (glanceImage.getDiskFormat().equals(org.ovirt.engine.core.bll.provider.OpenstackImageProviderProxy.GlanceImageFormat.COW.getValue())) { diskImage.setvolumeFormat(VolumeFormat.COW); } else { throw new java.lang.RuntimeException(("Unknown disk format: " + (glanceImage.getDiskFormat()))); } return diskImage; }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn addVmLease(java.lang.String leaseUUID, java.lang.String sdUUID) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Lease.create").withParameter("lease_id", leaseUUID).withParameter("sd_id", sdUUID).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturn(response); }<END_MOD>
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getDbFacade().getVmDao().getAllVmsRelatedToQuotaId(org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getParameters().getQuotaId()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); java.util.Collections.sort(vm.getDiskList(), new org.ovirt.engine.core.common.businessentities.<START_MOD>comperators.<END_MOD>ImagesComparerByName()); org.ovirt.engine.core.bll.ImagesHandler.fillImagesBySnapshots(vm); } org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getQueryReturnValue().setReturnValue(vms); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.DiscoverSendTargetsQuery.getQueryReturnValue().setReturnValue(<START_MOD>vdsBroker<END_MOD>.RunVdsCommand(VDSCommandType.DiscoverSendTargets, new org.ovirt.engine.core.common.vdscommands.DiscoverSendTargetsVDSCommandParameters(org.ovirt.engine.core.bll.storage.DiscoverSendTargetsQuery.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.DiscoverSendTargetsQuery.getParameters().getConnection())).getReturnValue()); }
<START_MOD>private void setRngSourcesCheckboxes(org.ovirt.engine.core.compat.Version ver) { boolean rngSupported = isRngSupportedForClusterVersion(ver); getRngRandomSourceRequired().setIsAvailable(rngSupported); getRngHwrngSourceRequired().setIsAvailable(rngSupported); java.lang.String defaultRequiredRngSourcesCsv = defaultClusterRngSourcesCsv(ver); if (rngSupported) { getRngRandomSourceRequired().setEntity((getIsNew() ? defaultRequiredRngSourcesCsv.contains(VmRngDevice.Source.RANDOM.toString()) : getEntity().getRequiredRngSources().contains(VmRngDevice.Source.RANDOM))); getRngHwrngSourceRequired().setEntity((getIsNew() ? defaultRequiredRngSourcesCsv.contains(VmRngDevice.Source.HWRNG.toString()) : getEntity().getRequiredRngSources().contains(VmRngDevice.Source.HWRNG))); } else { getRngRandomSourceRequired().setEntity(false); getRngHwrngSourceRequired().setEntity(false); } }<END_MOD>
@org.junit.Test public void externalNetworkPortMirroring() throws java.lang.Exception { externalNetworkPortMirroringTest(true, true, org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_CANNOT_BE_PORT_MIRRORED)); }
protected <T> T getEntity(java.lang.Class<T> clz, org.ovirt.engine.core.common.interfaces.SearchType searchType, java.lang.String constraint) { try { org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = runQuery(VdcQueryType.Search, new org.ovirt.engine.core.common.queries.SearchParameters(constraint, searchType)); if (!(result.getSucceeded())) { throw new org.ovirt.engine.api.restapi.resource.BackendFailureException(localize(result.getExceptionString())<START_MOD>, org.ovirt.engine.api.restapi.util.ErrorMessageHelper.getErrorStatus(result.getExceptionString())<END_MOD>); } T entity; if ((java.util.List.class.isAssignableFrom(clz)) && ((result.getReturnValue()) instanceof java.util.List)) { entity = clz.cast(result.getReturnValue()); } else { java.util.List<T> list = asCollection(clz, result.getReturnValue()); if ((list == null) || (list.isEmpty())) { throw new org.ovirt.engine.api.restapi.resource.EntityNotFoundException(constraint); } entity = clz.cast(list.get(0)); } return entity; } catch (java.lang.Exception e) { return handleError(clz, e, false); } }
@java.lang.Override public void initialize() { super.initialize(); disableNonChangeableEntities(); getAlias().setEntity(getDisk().getDiskAlias()); getDescription().setEntity(getDisk().getDiskDescription()); getIsShareable().setEntity(getDisk().isShareable()); getIsWipeAfterDelete().setEntity(getDisk().isWipeAfterDelete()); getIsScsiPassthrough().setEntity(getDisk().isScsiPassthrough()); getIsSgIoUnfiltered().setEntity(((getDisk().getSgio()) == (org.ovirt.engine.core.common.businessentities.ScsiGenericIO.UNFILTERED))); getIsReadOnly().setEntity(getDisk().getReadOnly()); if ((getDisk().getDiskStorageType()) == (<START_MOD>org.ovirt.engine.core.common.businessentities.storage<END_MOD>.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (getDisk())); getDiskStorageType().setEntity(DiskStorageType.IMAGE); getSize().setEntity(((int) (diskImage.getSizeInGigabytes()))); getVolumeType().setSelectedItem(diskImage.getVolumeType()); setVolumeFormat(diskImage.getVolumeFormat()); boolean isExtendImageSizeEnabled = (((getVm()) != null) && (!(diskImage.isDiskSnapshot()))) && (org.ovirt.engine.core.common.VdcActionUtils.canExecute(java.util.Arrays.asList(getVm()), org.ovirt.engine.core.common.businessentities.VM.class, VdcActionType.ExtendImageSize)); getSizeExtend().setIsChangable(isExtendImageSizeEnabled); } else { org.ovirt.engine.core.common.businessentities.LunDisk lunDisk = ((org.ovirt.engine.core.common.businessentities.LunDisk) (getDisk())); getDiskStorageType().setEntity(DiskStorageType.LUN); getSize().setEntity(lunDisk.getLun().getDeviceSize()); getSizeExtend().setIsAvailable(false); } updateReadOnlyChangeability(); updateWipeAfterDeleteChangeability(); }
public org.ovirt.engine.core.compat.Guid getVdsGroupId() { return mVdsStatic.getVdsGroupId(); }
public void setSwapTotal(java.lang.Long value) { mVdsStatistics.setSwapTotal(value); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc reconstructMaster(java.lang.String spUUID<START_MOD>, int hostSpmId<END_MOD>, java.lang.String poolName, java.lang.String masterDom, java.util.Map<java.lang.String, java.lang.String> domDict, int masterVersion, java.lang.String lockPolicy, int lockRenewalIntervalSec, int leaseTimeSec, int ioOpTimeoutSec, int leaseRetries) { try { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = vdsServer.reconstructMaster(spUUID, <START_MOD>hostSpmId, <END_MOD>poolName, masterDom, domDict, masterVersion, lockPolicy, lockRenewalIntervalSec, leaseTimeSec, ioOpTimeoutSec, leaseRetries); org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(xmlRpcReturnValue); return wrapper; } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
@org.junit.Test public void imageNotProvidedForOvirtNode() { mockOvirtNode(); assertThat(validator.imageProvidedForOvirtNode(null), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE)); }
<START_MOD>@java.lang.Override public java.lang.Boolean getValue() { for (org.ovirt.engine.ui.uicommonweb.models.EntityModel model : clustersTable.getVisibleItems()) { org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel networkClusterModel = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.NetworkClusterModel) (model)); if (networkClusterModel.getIsChangable()) { if (!(networkClusterModel.isAttached())) { return false; } } } return true; }<END_MOD>
@java.lang.Override protected boolean canDoAction() { boolean retValue = true; if ((org.ovirt.engine.core.bll.ChangeDiskCommand.getVm()) == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_EXIST); retValue = false; } if (retValue && (!(org.ovirt.engine.core.bll.ChangeDiskCommand.canRunActionOnNonManagedVm()))) { retValue = false; } if (retValue && (!(org.ovirt.engine.core.bll.ChangeDiskCommand.getVm().isRunningOrPaused()))) { org.ovirt.engine.core.bll.ChangeDiskCommand.setSucceeded(false); retValue = false; addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM); if (!(org.apache.commons.lang.StringUtils.isEmpty(mCdImagePath))) { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__CHANGE_CD); } else { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__EJECT_CD); } <START_MOD>failCanDoAction<END_MOD>(VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL<START_MOD>, org.ovirt.engine.core.bll.validator.LocalizedVmStatus.byVmStatus(org.ovirt.engine.core.bll.ChangeDiskCommand.getVm().getStatus())<END_MOD>); } else if (((org.ovirt.engine.core.bll.IsoDomainListSyncronizer.getInstance().findActiveISODomain(org.ovirt.engine.core.bll.ChangeDiskCommand.getVm().getStoragePoolId())) == null) && (!(org.apache.commons.lang.StringUtils.isEmpty(mCdImagePath)))) { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__CHANGE_CD); addCanDoActionMessage(VdcBllMessages.VM_CANNOT_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO); org.ovirt.engine.core.bll.ChangeDiskCommand.setSucceeded(false); retValue = false; } return retValue; }
<START_MOD>public java.lang.String getMetadataDevice() { return getStorageStaticData().getMetadataDevice(); }<END_MOD>
@java.lang.Override public void <START_MOD>dataCenterWithClusterSelectedItemChanged<END_MOD>() { <START_MOD>super.dataCenterWithClusterSelectedItemChanged(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetVmDiskList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateVmModelBehavior behavior<END_MOD> = ((org.ovirt.engine.ui.uicommonweb.<START_MOD>models.vms.NewTemplateVmModelBehavior) (<END_MOD>target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>Disk<END_MOD>> <START_MOD>imageDisks<END_MOD> = <START_MOD>new <END_MOD>java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>Disk<END_MOD>><START_MOD>(<END_MOD>); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> <START_MOD>vmDisks<END_MOD> = <START_MOD>((<END_MOD>java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk><START_MOD>) (returnValue)); for (org.ovirt.engine.core.common.businessentities.Disk disk :<END_MOD> vmDisks<START_MOD>) { if (((<END_MOD>disk<START_MOD>.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE)) && (!(disk.isShareable()))) { imageDisks.add(disk); } } behavior.InitStorageDomains(); InitDisks(imageDisks); org.ovirt.engine.ui.uicommonweb.models.vms.VmModelHelper.sendWarningForNonExportableDisks(getModel(),<END_MOD> vmDisks<START_MOD>, VmModelHelper.WarningType.VM_TEMPLATE<END_MOD>); } }<START_MOD>, <END_MOD>getModel()<START_MOD>.getHash()), vm.getId(), true<END_MOD>); }
@java.lang.Override public void setMainTabSelectedItem(org.ovirt.engine.core.common.businessentities.VDSGroup selectedItem) { driver.edit(getDetailModel()); if (selectedItem.supportsVirtService()) { if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.PowerSave)) { setVisibility(true); leftSlider.setValue(selectedItem.getlow_utilization()); rightSlider.setValue(selectedItem.gethigh_utilization()); policyTimeLabel.setText((((((constants.clusterPolicyForTimeLabel()) +     + (selectedItem.getcpu_over_commit_duration_minutes())) +     + (constants.clusterPolicyMinTimeLabel()))); policyFieldLabel.setText(constants.clusterPolicyPowSaveLabel()); } else if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.EvenlyDistribute)) { setVisibility(true); leftSlider.setVisible(false); leftDummySlider.setVisible(true); rightSlider.setValue(selectedItem.gethigh_utilization()); policyTimeLabel.setText((((((constants.clusterPolicyForTimeLabel()) +     + (selectedItem.getcpu_over_commit_duration_minutes())) +     + (constants.clusterPolicyMinTimeLabel()))); policyFieldLabel.setText(constants.clusterPolicyEvenDistLabel()); } else { setVisibility(false); policyFieldLabel.setText(constants.clusterPolicyNoneLabel()); } } policyPanel.setVisible(selectedItem.supportsVirtService()); form.update(); }
private void InitializeHelpers() { try { for (java.lang.String helperName : org.ovirt.engine.core.<START_MOD>compat<END_MOD>.EnumCompat.GetNames(org.ovirt.engine.core.<START_MOD>common.businessentities<END_MOD>.StorageType.class)) { java.lang.Class<START_MOD><?><END_MOD> actionType = null; try { actionType = java.lang.Class.forName(java.lang.String.format("%1$s.%2$s%3$s", "org.ovirt.engine.core.bll.storage", helperName, "StorageHelper")); } catch (java.lang.ClassNotFoundException cnfe) { } if (actionType != null) { java.lang.reflect.Constructor<START_MOD><?><END_MOD> info = actionType.getConstructors()[0]; java.lang.Object tempVar = info.newInstance(null); org.ovirt.engine.core.bll.storage.IStorageHelper currentHelper = ((org.ovirt.engine.core.bll.storage.IStorageHelper) ((tempVar instanceof org.ovirt.engine.core.bll.storage.IStorageHelper) ? tempVar : null)); if (currentHelper != null) { _helpers.put(org.ovirt.engine.core.<START_MOD>common.businessentities<END_MOD>.StorageType.valueOf(helperName), currentHelper); } } } } catch (java.lang.Exception ex) { throw new org.ovirt.engine.core.<START_MOD>compat<END_MOD>.ApplicationException( missing exception ex); } }
<START_MOD>@org.ovirt.engine.ui.common.DefaultStringValue("Aligned") java.lang.String alignedDisk();<END_MOD>
protected void setXmlResponse(java.lang.String path, final int code, final java.lang.String body, final int delay) { io.undertow.server.HttpHandler xmlResponseHandler = new io.undertow.server.HttpHandler() { @java.lang.Override public void handleRequest(io.undertow.server.HttpServerExchange exchange) throws java.lang.Exception { if (!(exchange.getRequestHeaders().getFirst("Authorization").equals((   + (org.ovirt.engine.sdk4.ServerTest.TOKEN))))) { exchange.setStatusCode(401); exchange.getResponseSender().send(""); } else { java.lang.Thread.sleep(delay); exchange.setStatusCode(code); exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/xml"); exchange.getResponseSender().send(body); <START_MOD>lastRequestQuery = exchange.getQueryString(); <END_MOD>} } }; testHandler().addPrefixPath((((testPrefix()) + "/api/") + path), xmlResponseHandler); }
<START_MOD>@com.google.gwt.uibinder.client.UiHandler("container") void onDragLeave(com.google.gwt.event.dom.client.DragLeaveEvent event) { container.removeStyleName(style.dragOver()); }<END_MOD>
protected org.ovirt.engine.core.bll.<START_MOD>validator<END_MOD>.<START_MOD>RunVmValidator getRunVmValidator<END_MOD>() <START_MOD>{<END_MOD> <START_MOD>return<END_MOD> <START_MOD>runVmValidator<END_MOD>; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>UpdateStorageDomainCommand.getStorageDomainStaticDao().update(org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); if ((storageDomainNameChanged) && ((org.ovirt.engine.core.bll.storage<START_MOD>.domains<END_MOD>.UpdateStorageDomainCommand.getStoragePool()) != null)) { runVdsCommand(VDSCommandType.SetStorageDomainDescription, new org.ovirt.engine.core.common.vdscommands.SetStorageDomainDescriptionVDSCommandParameters(org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>UpdateStorageDomainCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>UpdateStorageDomainCommand.getStorageDomain().getId(), org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>UpdateStorageDomainCommand.getStorageDomain().getStorageName())); } org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>UpdateStorageDomainCommand.setSucceeded(true); }
<START_MOD>private void setInputLocale(org.ovirt.engine.ui.uicommonweb.models.EntityModel value) { privateInputLocale = value; }<END_MOD>
private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> runInternalFilters(java.util.ArrayList<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl> filters, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> filterPositionMap, java.util.List<java.lang.String> messages, org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker memoryChecker) { if (filters != null) { for (org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl filterPolicyUnit : filters) { if ((hostList == null) || (hostList.isEmpty())) { break; } filterPolicyUnit.setMemoryChecker(memoryChecker); <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.VDS> newHostList<END_MOD> = filterPolicyUnit.filter(hostList, vm, parameters, messages); <START_MOD>logFilterActions(hostList, newHostList, ( filter   + (filterPolicyUnit.getName()))); hostList = newHostList; <END_MOD>} } return hostList; }
<START_MOD>@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { handleEscapeKey(); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Messages<END_MOD>.DefaultMessage( out of unlimited vCPUs java.lang.String unlimitedVcpuConsumption(int vcpu);
public org.ovirt.engine.core.bll.ValidationResult networkNotChanged(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment oldAttachment) { boolean when = (oldAttachment != null) && (!(java.util.Objects.equals(oldAttachment.getNetworkId(), attachment.getNetworkId()))); return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>___VdcBllMessages<END_MOD>.CANNOT_CHANGE_ATTACHED_NETWORK).when(when); }
@java.lang.Override protected void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?<START_MOD>, ?, ?<END_MOD>> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<<START_MOD>?, ?, <END_MOD>?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.DETACH_NETWORK.getCommand(op1, op2, allNics).execute(); }
public org.ovirt.engine.core.bll.ValidationResult isUp() { if (((storagePool) == null) || ((storagePool.getStatus()) != (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Up))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void newInternal() { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.UserPortalNewVmModelBehavior()); model.getVmType().setSelectedItem(VmType.Server); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newVmTitle()); model.setHashName("new_vm"<START_MOD>); model.setHelpTag(model.getHashName(), ""<END_MOD>); model.setIsNew(true); model.setCustomPropertiesKeysList(CustomPropertiesKeysList); setWindow(model); model.initialize(null); org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand switchModeCommand = new org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand(); switchModeCommand.init(model); model.getCommands().add(switchModeCommand); model.getProvisioning().setEntity(true); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSave", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
<START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> getAllForNetworkQoS(org.ovirt.engine.core.compat.Guid qosId);<END_MOD>
protected void beforeReadResponse(java.net.HttpURLConnection connection) throws java.lang.Exception { if (((connection.getResponseCode()) != (java.net.HttpURLConnection.HTTP_OK)) && ((connection.getResponseCode()) != (java.net.HttpURLConnection.HTTP_MOVED_TEMP))) { throw new org.ovirt.engine.core.common.errors.<START_MOD>EngineException<END_MOD>(org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.PROVIDER_FAILURE); } }
@org.junit.Test public void testNicExistsWhenNicNameIsNull() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNicName(null); assertThat(createNetworkAttachmentValidator(attachment).<START_MOD>nicNameIsSet<END_MOD>(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST)); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (getRngDevices().isEmpty()) { return failCanDoAction(VdcBllMessages.RNG_NOT_FOUND); } <START_MOD>if (!(isRngSourceCompatibleWithCluster())) { org.ovirt.engine.core.common.businessentities.VmRngDevice device = getParameters().getRngDevice(); log.infoFormat( Device id: %s of VM id: %s is no more compatible with cluster. Removing the device. device.getId(), device.getVmId()); org.ovirt.engine.core.bll.Backend.getInstance().runAction(VdcActionType.RemoveRngDevice, getParameters()); return failCanDoAction(VdcBllMessages.RNG_SOURCE_NOT_SUPPORTED); } <END_MOD>return true; }
@java.lang.Override public java.util.ArrayList<java.lang.String> getNetworkDevices(int osId, org.ovirt.engine.core.compat.Version version) { java.lang.String devices = getValueByVersion(idToUnameLookup.get(osId), "devices.network", version); return <START_MOD>org.ovirt.engine.core.utils.OsRepositoryImpl.<END_MOD>trimElements(devices.split(",")); }
<START_MOD>@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.hosts.NicLabelModel model) { super.edit(model); suggestions = model.getSuggestedLabels(); }<END_MOD>
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.TagsVdsMap map; if ((org.ovirt.engine.core.bll.AttachVdsToTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid vdsId : org.ovirt.engine.core.bll.AttachVdsToTagCommand.getVdsList()) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vdsId); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVdsByTagIdAndByVdsId(org.ovirt.engine.core.bll.AttachVdsToTagCommand.getTagId(), vdsId)) == null) { if (vds != null) { <START_MOD>appendCustomValue<END_MOD>("VdsNames", vds.getvds_name(),     } map = new org.ovirt.engine.core.common.businessentities.TagsVdsMap(org.ovirt.engine.core.bll.AttachVdsToTagCommand.getTagId(), vdsId); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().attachVdsToTag(map); noActionDone = false; } else { if (vds != null) { <START_MOD>appendCustomValue<END_MOD>("VdsNamesExists", vds.getvds_name(),     } } } } org.ovirt.engine.core.bll.AttachVdsToTagCommand.setSucceeded(true); }
<START_MOD>@org.junit.Test public void canDoActionFailsOnNullHookName() { cmd = spy(new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters(org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommandTest.CLUSTER_ID, null, org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommandTest.GLUSTER_COMMAND, org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommandTest.LEVEL))); prepareMocks(cmd, getGlusterServers()); assertFalse(cmd.canDoAction()); }<END_MOD>
protected java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> getParameters() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : getDisks()) { org.ovirt.engine.core.common.businessentities.StorageDomain destStorageDomain = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (diskModel.getStorageDomain().getSelectedItem())); org.ovirt.engine.core.common.businessentities.StorageDomain sourceStorageDomain = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (diskModel.getSourceStorageDomain().getSelectedItem())); org.ovirt.engine.core.compat.Guid <START_MOD>sourceStorageDomaiGuid<END_MOD> = (sourceStorageDomain != null) ? sourceStorageDomain.getId() : org.ovirt.engine.core.compat.Guid.Empty; org.ovirt.engine.core.common.businessentities.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.DiskImage) (diskModel.getDisk())); if ((diskModel.getQuota().getSelectedItem()) != null) { disk.setQuotaId(((org.ovirt.engine.core.common.businessentities.Quota) (diskModel.getQuota().getSelectedItem())).getId()); } if ((destStorageDomain == null) || (sourceStorageDomain == null)) { continue; } org.ovirt.engine.core.compat.Guid <START_MOD>destStorageDomaiGuid<END_MOD> = destStorageDomain.getId(); addMoveOrCopyParameters(parameters, <START_MOD>sourceStorageDomaiGuid<END_MOD>, <START_MOD>destStorageDomaiGuid<END_MOD>, disk); } return parameters; }
<START_MOD>@java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.gluster.StorageDevice entity) { return entity.getName(); }<END_MOD>
private boolean supportsGlusterDiskProvisioning(org.ovirt.engine.core.common.businessentities.VDSGroup cluster) { return (cluster.supportsGlusterService()) && (<START_MOD>(<END_MOD>org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterBrickProvisioning(cluster.getCompatibilityVersion()))<START_MOD> || (getClusterUtils().isFeatureSupportedAsAdditionalFeature(cluster.getId(), ClusterUtils.FEATURE_GLUSTER_BRICK_MANAGEMENT)))<END_MOD>; }
<START_MOD>private org.snmp4j.Snmp createSnmp3(org.ovirt.engine.core.notifier.transport.snmp.Snmp.Profile profile) { try { org.snmp4j.TransportMapping<?> transport = new org.snmp4j.transport.DefaultUdpTransportMapping(); org.snmp4j.Snmp snmp = new org.snmp4j.Snmp(transport); org.snmp4j.security.SecurityProtocols securityProtocols = org.snmp4j.security.SecurityProtocols.getInstance(); securityProtocols.addDefaultProtocols(); securityProtocols.addPrivacyProtocol(new org.snmp4j.security.PrivAES192()); org.snmp4j.security.USM usm = new org.snmp4j.security.USM(securityProtocols, profile.engineId, 0); ((org.snmp4j.mp.MPv3) (snmp.getMessageProcessingModel(org.ovirt.engine.core.notifier.transport.snmp.org.snmp4j.mp.MPv3))).setLocalEngineID(profile.engineId.getValue()); ((org.snmp4j.mp.MPv3) (snmp.getMessageProcessingModel(org.ovirt.engine.core.notifier.transport.snmp.org.snmp4j.mp.MPv3))).getSecurityModels().addSecurityModel(usm); org.snmp4j.security.SecurityModels.getInstance().addSecurityModel(usm); transport.listen(); snmp.getUSM().addUser(profile.username, getUsmUser(profile)); return snmp; } catch (java.io.IOException e) { throw new org.ovirt.engine.core.notifier.NotificationServiceException(("error creating version 3 snmp " + (getClass().getName()))); } }<END_MOD>
<START_MOD>@java.lang.Override <END_MOD>public final boolean IsDynamicVariable(java.lang.String strMessage) { return strMessage.startsWith("$"); }
protected void addVmStatic() { logImportEvents(); getVm().getStaticData().setId(getVmId()); getVm().getStaticData().setCreationDate(new java.util.Date()); getVm().getStaticData().setVdsGroupId(getParameters().getVdsGroupId()); getVm().getStaticData().setMinAllocatedMem(computeMinAllocatedMem()); getVm().getStaticData().setQuotaId(getParameters().getQuotaId()); if (<START_MOD>!(isDedicatedVdsExistOnSameCluster(getVm().getStaticData(), true))) { getVm().setDedicatedVmForVds(null); } if (<END_MOD>((getVm().getOriginalTemplateGuid()) != null) && (!(VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVm().getOriginalTemplateGuid())))) { org.ovirt.engine.core.common.businessentities.VmTemplate originalTemplate = org.ovirt.engine.core.bll.ImportVmCommand.getVmTemplateDAO().get(getVm().getOriginalTemplateGuid()); if (originalTemplate != null) { getVm().getStaticData().setOriginalTemplateName(originalTemplate.getName()); } } if (getParameters().getCopyCollapse()) { getVm().setVmtGuid(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); } org.ovirt.engine.core.bll.ImportVmCommand.getVmStaticDAO().save(getVm().getStaticData()); org.ovirt.engine.core.bll.ImportVmCommand.getCompensationContext().snapshotNewEntity(getVm().getStaticData()); }
@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error( to add VM. The reasons are: {} java.lang.String.join(",", errorMessages)); return; } if (!(addVmLease(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.AddVmCommand.getVmId()))) { return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); <START_MOD>getVmDeviceUtils().updateVirtioScsiController(getVm().getStaticData(), getParameters().isVirtioScsiEnabled()); <END_MOD>setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } discardHelper.logIfDisksWithIllegalPassDiscardExist(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The provided disk is of type Cinder.") java.lang.String ACTION_TYPE_FAILED_CINDER_DISK();<END_MOD>
@java.lang.Override protected void buildModel(org.ovirt.engine.core.common.businessentities.VmBase vm) { <START_MOD>if (templateVersionWasChanged) { <END_MOD>org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor.build(vm, getModel(), new org.ovirt.engine.ui.uicommonweb.builders.vm.<START_MOD>CoreVmBaseToUnitBuilder(), new org.ovirt.engine.ui.uicommonweb.builders.vm.HwOnlyVmBaseToUnitBuilder()); } else { org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor.build(vm, getModel(), new org.ovirt.engine.ui.uicommonweb.builders.vm.<END_MOD>NameAndDescriptionVmBaseToUnitBuilder(), new org.ovirt.engine.ui.uicommonweb.builders.vm.CommentVmBaseToUnitBuilder(), new org.ovirt.engine.ui.uicommonweb.builders.vm.CommonVmBaseToUnitBuilder()); }<START_MOD> }<END_MOD>
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.common.businessentities.VM getEntity(int index) { return org.ovirt.engine.api.restapi.resource.AbstractBackendVmApplicationsResourceTest.setUpEntityExpectations(control.createMock(org.ovirt.engine.core.common.businessentities.VM.class), control.createMock(org.ovirt.engine.core.common.businessentities.VmDynamic.class), index); }<END_MOD>
java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> getAllForCluster(org.ovirt.engine.core.compat.Guid id);
@java.lang.Override public java.util.ArrayList<java.lang.String> getWatchDogModels(int osId, org.ovirt.engine.core.compat.Version version) { java.lang.String models = getValueByVersion(idToUnameLookup.get(osId), "devices.watchdog.models", version); return <START_MOD>org.ovirt.engine.core.utils.OsRepositoryImpl.<END_MOD>trimElements(models.split(",")); }
<START_MOD>private boolean stopSlaveVolumes(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> geoRepSessions) { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session : geoRepSessions) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity slaveVolume = getDbFacade().getGlusterVolumeDao().getById(session.getSlaveVolumeId()); if (slaveVolume == null) { continue; } if (!(stopVolume(slaveVolume.getId()))) { return false; } } return true; }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.<START_MOD>String<END_MOD> <START_MOD>content<END_MOD>) { <START_MOD>contentModel<END_MOD>.getContent().setEntity(content); if (content == null) { <START_MOD>contentModel<END_MOD>.getContent().setIsAvailable(false); <START_MOD>contentModel<END_MOD>.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentErrorGlusterHook()); } else if ((content.length()) == 0) { <START_MOD>contentModel<END_MOD>.getContent().setIsAvailable(false); <START_MOD>contentModel<END_MOD>.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentEmptyGlusterHook()); } <START_MOD>contentModel<END_MOD>.stopProgress(); }
private boolean canRemoveTemplateDisk() { if ((org.ovirt.engine.core.bll.RemoveDiskCommand.getVmTemplate().getStatus()) == (org.ovirt.engine.core.common.businessentities.VmTemplateStatus.Locked)) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.VM_TEMPLATE_IMAGE_IS_LOCKED); } org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getDiskImage(); if ((diskImage.getStorageIds().size()) == 1) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.VM_TEMPLATE_IMAGE_LAST_DOMAIN); } if ((!(checkDerivedVmFromTemplateExists(diskImage))) || (!(checkDerivedDisksFromDiskNotExist(diskImage)))) { return false; } return true; }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model) { driver.edit(model); model.getStorageDomain().getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { addDiskAllocation(model); } }); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName; if ("Message".equals(propName)) { appendMessage(model.getMessage()); } } }); <START_MOD>model.getIsSubTemplate().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { subTemplateExpanderContent.setVisible(model.getIsSubTemplate().getEntity()); } }); subTemplateExpanderContent.setVisible(false); }<END_MOD>
@java.lang.SuppressWarnings("unchecked") public <P extends org.ovirt.engine.core.bll.provider.ProviderProxy> P create(org.ovirt.engine.core.common.businessentities.Provider<?> provider) { return ((P) (new org.ovirt.engine.core.bll.provider.network.openstack.OpenstackNetworkProviderProxy(<START_MOD>((org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.MultiTenantProviderProperties>) (<END_MOD>provider<START_MOD>))<END_MOD>))); }
<START_MOD>protected org.ovirt.engine.core.common.businessentities.StoragePool getStoragePool() { if ((cachedStoragePool) == null) { cachedStoragePool = getStoragePoolDAO().get(params.getStoragePoolId()); } return cachedStoragePool; }<END_MOD>
public static void main(java.lang.String... args) { org.ovirt.engine.core.config.EngineConfigCLIParser parser = null; try { parser = new org.ovirt.engine.core.config.EngineConfigCLIParser(); parser.parse(args); org.ovirt.engine.core.config.EngineConfigMap argsMap = parser.getEngineConfigMap(); if ((argsMap.getLogFile()) != null) { org.ovirt.engine.core.<START_MOD>uutils<END_MOD>.log.JavaLoggingUtils.addFileHandler(argsMap.getLogFile()); } if ((argsMap.getLogLevel()) != null) { org.ovirt.engine.core.<START_MOD>uutils<END_MOD>.log.JavaLoggingUtils.setLogLevel(argsMap.getLogLevel()); } } catch (java.lang.Throwable t) { java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } try { org.ovirt.engine.core.config.EngineConfig.getInstance().setUpAndExecute(parser); } catch (java.lang.Throwable t) { org.slf4j.LoggerFactory.getLogger(org.ovirt.engine.core.config.EngineConfigExecutor.class).debug( with error:   t); java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } }
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.common.errors.VdcBllErrors getCommandError() { return org.ovirt.engine.core.common.errors.VdcBllErrors.RETRIEVE_FAILURE; }<END_MOD>
@java.lang.Override protected void ExecuteVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.vdsbroker.VmLogoffVDSCommand.getBroker().desktopLogoff(mVmId.toString(), java.lang.Boolean<START_MOD>.valueOf<END_MOD>(mForce).toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.VmLogoffVDSCommand.ProceedProxyReturnValue(); }
<START_MOD>private void settingSpecificNetworksAllowedTest(boolean isAllNetworksAllowed) { simulateVfsConfigExists(); when(oldVfsConfig.isAllNetworksAllowed()).thenReturn(isAllNetworksAllowed); }<END_MOD>
@org.junit.Test public void testCDAVdsIsSPM() { vds.setSpmStatus(VdsSpmStatus.SPM); org.ovirt.engine.core.bll.<START_MOD>CanDoActionTestUtils<END_MOD>.<START_MOD>runAndAssertCanDoActionFailure<END_MOD>(command, VdcBllMessages.CANNOT_FORCE_SELECT_SPM_VDS_ALREADY_SPM); }
<START_MOD>@org.junit.Test public void dataCenterDoesntExist() throws java.lang.Exception { doReturn(null).when(validator).getDataCenter(); assertEquals(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST).getMessage(), validator.dataCenterExists().getMessage()); }<END_MOD>
@org.junit.Test public void managementNetworkChangedIncorrectly() {<START_MOD> java.lang.String hostName = "1.1.1.1"; java.lang.String newAddress = "1.1.1.2";<END_MOD> org.ovirt.engine.core.common.businessentities.network.Network net = createNetwork(org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME); mockExistingNetworks(net); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNicSyncedWithNetwork("nic0", net); nic.setBootProtocol(NetworkBootProtocol.STATIC_IP); nic.setAddress(<START_MOD>newAddress<END_MOD>); mockExistingIfaces(nic); <START_MOD>interfaceDAO.getAllInterfacesForVds(mock(org.ovirt.engine.core.compat.Guid.class)).get(0)<END_MOD>.setAddress(<START_MOD>hostName<END_MOD>); org.ovirt.engine.core.common.businessentities.VDS vds = mock(org.ovirt.engine.core.common.businessentities.VDS.class); when(vds.getId()).thenReturn(Guid.Empty); when(vds.getHostName()).thenReturn(<START_MOD>hostName<END_MOD>); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(nic), vds); validateAndExpectViolation(helper, VdcBllMessages.ACTION_TYPE_FAILED_MANAGEMENT_NETWORK_ADDRESS_CANNOT_BE_CHANGED); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.NicConfiguration.class, to = org.ovirt.engine.core.common.businessentities.VmInitNetwork.class) public static org.ovirt.engine.core.common.businessentities.VmInitNetwork map(org.ovirt.engine.api.model.NicConfiguration model, org.ovirt.engine.core.common.businessentities.VmInitNetwork template) { org.ovirt.engine.core.common.businessentities.VmInitNetwork entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); if (model.isSetName()) { entity.setName(model.getName()); } if (model.isOnBoot()) { entity.setStartOnBoot(model.isOnBoot()); } if (model.isSetBootProtocol()) { entity.setBootProtocol(org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(org.ovirt.engine.api.model.BootProtocol.fromValue(model.getBootProtocol()), <START_MOD>Ipv4BootProtocol<END_MOD>.NONE)); } if (model.isSetIp()) { if (model.getIp().isSetAddress()) { entity.setIp(model.getIp().getAddress()); } if (model.getIp().isSetNetmask()) { entity.setNetmask(model.getIp().getNetmask()); } if (model.getIp().isSetGateway()) { entity.setGateway(model.getIp().getGateway()); } } return entity; }
<START_MOD>@org.junit.Test public void testInsertAsyncTaskEntitities() { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = generateNewEntity(); dao.save(cmdEntity); java.util.Set<org.ovirt.engine.core.common.businessentities.CoCoCmdEntity> cocoCmdEntities = new java.util.HashSet<>(); cocoCmdEntities.add(new org.ovirt.engine.core.common.businessentities.CoCoCmdEntity(cmdEntity.getId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.compat.Guid.newGuid())); cocoCmdEntities.add(new org.ovirt.engine.core.common.businessentities.CoCoCmdEntity(cmdEntity.getId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.compat.Guid.newGuid())); dao.insertCoCoCmdEntities(cocoCmdEntities); java.util.List<org.ovirt.engine.core.common.businessentities.CoCoCmdEntity> entities = dao.getAllCoCoCmdEntities(cmdEntity.getId()); assertNotNull(entities); assertEquals(2, entities.size()); for (org.ovirt.engine.core.common.businessentities.CoCoCmdEntity entity : cocoCmdEntities) { assertTrue(entities.contains(entity)); } }<END_MOD>
public void setInitialHosts(java.util.<START_MOD>List<END_MOD><org.ovirt.engine.core.compat.Guid> initialHosts) { this.initialHosts = initialHosts; }
protected void cluster_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster().getSelectedItem(); if (cluster == null) { return; } getFencingEnabled().setEntity(cluster.getFencingPolicy().isFencingEnabled()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getPmTypeList(new org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncQuery(( pmTypes) -> updatePmTypeList(pmTypes)), cluster.getCompatibilityVersion()); if (((getDataCenter()) != null) && ((getDataCenter().getItems()) != null)) { for (org.ovirt.engine.core.common.businessentities.StoragePool datacenter : getDataCenter().getItems()) { if (datacenter.getId().equals(cluster.getStoragePoolId())) { getDataCenter().setSelectedItem(datacenter, false); break; } } } final org.ovirt.engine.core.common.utils.CpuVendor newCpuVendor = getCurrentCpuVendor(); if ((newCpuVendor != null) && (!(newCpuVendor.equals(lastNonNullCpuVendor)))) { lastNonNullCpuVendor = newCpuVendor; cpuVendorChanged(); } getHostedEngineWarning().setIsAvailable(cluster.getCompatibilityVersion().less(Version.v4_0)); <START_MOD>getNetworkProviderModel().setDefaultProviderById(cluster.getDefaultNetworkProviderId()); }<END_MOD>
@org.ovirt.engine.ui.uicompat.DefaultMessage( greater than {1}. java.lang.String integerValidationNumberGreaterInvalidReason(java.lang.String prefixMsg, <START_MOD>long<END_MOD> min);
<START_MOD>private java.util.Collection<java.lang.String> getFreeLabels() { java.util.Set<java.lang.String> freeLabels = new java.util.HashSet<java.lang.String>(dcLabels); freeLabels.removeAll(labelToIface.keySet()); return freeLabels; }<END_MOD>
@java.lang.Override public long save(org.ovirt.engine.core.common.businessentities.EngineSession session) { org.ovirt.engine.core.dao.<START_MOD>EngineSessionDAOImpl<END_MOD>.EngineSessionParameterSource parameterSource = getEngineSessionParameterSource(session); return ((java.lang.Integer) (getCallsHandler().executeModification("InsertEngineSession", parameterSource).get("id"))).longValue(); }
<START_MOD>void init(java.lang.String title, java.lang.String width, java.lang.String height, boolean resizeEnabled);<END_MOD>
private void endCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> listVms = getVmsForDiskId(); org.ovirt.engine.core.bll.Backend.getInstance().EndAction(VdcActionType.RemoveImage, org.ovirt.engine.core.bll.RemoveDiskCommand.getParameters().getImagesParameters().get(0)); <START_MOD>for (<END_MOD>org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>businessentities<END_MOD>.<START_MOD>VM vm : listVms) { <END_MOD>org.ovirt.engine.core.bll.RemoveDiskCommand.<START_MOD>getVmDAO<END_MOD>().<START_MOD>incrementVmDbGeneration(vm.getId<END_MOD>());<START_MOD> }<END_MOD> org.ovirt.engine.core.bll.RemoveDiskCommand.setSucceeded(true); }
private org.ovirt.engine.core.common.businessentities.VM <START_MOD>getUpdatedVmForOperation<END_MOD>() { setVm(null); return getVm(); }
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("Num of VFs setting") java.lang.String numOfVfsSetting();<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.Step> getStepsByJobId(org.ovirt.engine.core.compat.Guid jobId) { <START_MOD>return <END_MOD>org.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.core.<START_MOD>dal<END_MOD>.<START_MOD>dbbroker.DbFacade.getInstance<END_MOD>().<START_MOD>getJobDao<END_MOD>().<START_MOD>get<END_MOD>(<START_MOD>jobId).getSteps<END_MOD>(); }
<START_MOD>@org.junit.Test public void testList_LimitResults() throws java.lang.Exception { javax.ws.rs.core.UriInfo uriInfo = setUpUriExpectationsWithMax(); setUpQueryExpectations(""); collection.setUriInfo(uriInfo); java.util.List<org.ovirt.engine.api.model.Tag> results = getCollection(); assertNotNull(collection); assertEquals(2, results.size()); }<END_MOD>
protected void handleEscapeKey() { beforeCommandExecuted(model.getCancelCommand()); <START_MOD>modelCommandInvoker<END_MOD>.invokeCancelCommand(); }
private static java.util.List<org.ovirt.engine.core.aaa.DirectoryUser> queryPrincipals(final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension, final java.lang.String namespace, final org.ovirt.engine.api.extensions.ExtMap filter, boolean recursiveGroupsResolving) { org.ovirt.engine.api.extensions.ExtMap inputMap = new org.ovirt.engine.api.extensions.ExtMap().mput(Authz.InvokeKeys.QUERY_ENTITY, Authz.QueryEntity.PRINCIPAL).mput(Authz.InvokeKeys.RESOLVE_GROUPS_RECURSIVE, recursiveGroupsResolving).mput(Authz.InvokeKeys.<START_MOD>RESOLVE_GROUPS, recursiveGroupsResolving).mput(Authz.InvokeKeys.<END_MOD>QUERY_FILTER, filter).mput(Authz.InvokeKeys.NAMESPACE, namespace); return org.ovirt.engine.core.aaa.AuthzUtils.populatePrincipals(extension, namespace, inputMap); }
@java.lang.Override protected void ExecuteIrsBrokerCommand() { uuidReturn = org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getIrsProxy().mergeSnapshots(org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getParameters().getVmId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getParameters().getImageGroupId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getParameters().getImageId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getParameters().getImageId2().toString(), <START_MOD>java.lang.Boolean.valueOf(org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getParameters().getPostZero()).toString().toLowerCase()); org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.ProceedProxyReturnValue(); org.ovirt.engine.core.compat.Guid taskID = <END_MOD>new <START_MOD>org.ovirt.engine.core.compat.Guid(uuidReturn.mUuid<END_MOD>); org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.<START_MOD>getVDSReturnValue().setCreationInfo(new org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo(taskID, org.ovirt.engine.core.common.asynctasks.AsyncTaskType.mergeSnapshots, org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getParameters().getStoragePoolId())<END_MOD>); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Cluster cluster) { validateParameters(cluster, "name", "dataCenter.name|id"); validateEnums(org.ovirt.engine.api.model.Cluster.class, cluster); org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.api.restapi.resource.BackendDataCenterResource.getStoragePool(cluster, this); org.ovirt.engine.core.common.businessentities.VDSGroup entity = map(cluster, map(pool)); <START_MOD>if ((!(cluster.isSetErrorHandling())) || (!(cluster.getErrorHandling().isSetOnError()))) { org.ovirt.engine.core.common.businessentities.MigrateOnErrorOptions resiliencePolicy = getEntity(org.ovirt.engine.core.common.businessentities.MigrateOnErrorOptions.class, VdcQueryType.GetDefaultResiliencePolicy, new org.ovirt.engine.core.common.queries.GetDefaultResiliencePolicyParameters(entity), ""); entity.setMigrateOnError(resiliencePolicy); } <END_MOD>return performCreate(VdcActionType.AddVdsGroup, new org.ovirt.engine.core.common.action.VdsGroupOperationParameters(entity), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetVdsGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@org.junit.Test public void testIsNetworkInSyncWhenIpConfigurationIsEmpty() throws java.lang.Exception { when(mockedIpConfiguration.<START_MOD>hasPrimaryIpv4AddressSet<END_MOD>()).thenReturn(false); assertThat(createTestedInstance().isNetworkInSync(), is(true)); }
<START_MOD>private java.lang.Integer getAutoMaxBandwidth() { if (getSourceClusterId().equals(getDestinationClusterId())) { return getAutoMaxBandwidthForCluster(getSourceClusterId()); } return org.ovirt.engine.core.bll.MigrateVmCommand.minIfExists(getAutoMaxBandwidthForCluster(getSourceClusterId()), getAutoMaxBandwidthForCluster(getDestinationClusterId())); }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__UPDATE); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__ISCSI_BOND); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAll(org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getCallsHandler().executeReadList("GetAllFromVds", org.ovirt.engine.core.dao.<START_MOD>VdsDAOImpl<END_MOD>.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("user_id", userID).addValue("is_filtered", isFiltered)); return uniteAgents(vdsList); }
@java.lang.Override protected void executeVdsBrokerCommand() { java.lang.String storageDomainId = CreateVGVDSCommand.getParameters().getStorageDomainId().toString(); java.util.List<java.lang.String> deviceList = CreateVGVDSCommand.getParameters().getDeviceList(); java.lang.String[] deviceArray = deviceList.toArray(new java.lang.String[deviceList.size()]); boolean isForce = CreateVGVDSCommand.getParameters().isForce(); boolean supportForceCreateVG = org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.SupportForceCreateVG, CreateVGVDSCommand.getVds().getVdsGroupCompatibilityVersion().toString()); _result = (supportForceCreateVG) ? CreateVGVDSCommand.getBroker().createVG(storageDomainId, deviceArray, isForce) : CreateVGVDSCommand.getBroker().createVG(storageDomainId, deviceArray); CreateVGVDSCommand.proceedProxyReturnValue(); setReturnValue(_result.<START_MOD>uuid<END_MOD>); }
org.ovirt.engine.core.bll.ValidationResult networksUniquelyConfiguredOnHost(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure) { java.util.Set<org.ovirt.engine.core.compat.Guid> usedNetworkIds = new java.util.HashSet(attachmentsToConfigure.size()); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : attachmentsToConfigure) { boolean alreadyUsedNetworkId = usedNetworkIds.contains(attachment.getNetworkId()); if (alreadyUsedNetworkId) { org.ovirt.engine.core.common.businessentities.network.Network network = existingNetworkRelatedToAttachment(attachment); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORKS_ALREADY_ATTACHED_TO_IFACES<START_MOD>, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_NETWORKS_ALREADY_ATTACHED_TO_IFACES_LIST, network.getName())<END_MOD>); } else { usedNetworkIds.add(attachment.getNetworkId()); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void init() { setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editLogicalNetworkTitle()); setHashName("edit_logical_network"); <START_MOD>setHelpTag(getHashName(),   Center > Logical Network > Edit Logical Network <END_MOD>getName().setEntity(getNetwork().getName()); if (isManagemet()) { getName().setIsChangable(false); } getDescription().setEntity(getNetwork().getDescription()); getComment().setEntity(getNetwork().getComment()); getIsStpEnabled().setEntity(getNetwork().getStp()); getHasVLanTag().setEntity(((getNetwork().getVlanId()) != null)); getVLanTag().setEntity(((getNetwork().getVlanId()) == null ? java.lang.Integer.valueOf(0) : getNetwork().getVlanId())); initMtu(); initIsVm(); getExport().setEntity(getNetwork().isExternal()); getExport().setIsChangable(false); getExternalProviders().setIsChangable(false); getNetworkLabel().setIsChangable(false); }
<START_MOD>private void commonSave(boolean allNetworksAllowed) { org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig newConfig = new org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig(); newConfig.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newConfig.setNicId(FixturesTool.VDS_NETWORK_INTERFACE2); newConfig.setMaxNumOfVfs(10); newConfig.setNumOfVfs(10); newConfig.setNumOfFreeVfs(10); newConfig.setAllNetworksAllowed(allNetworksAllowed); if (!allNetworksAllowed) { addNetworks(newConfig); addLabels(newConfig); } dao.save(newConfig); org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig result = dao.get(newConfig.getId()); assertNotNull(result); assertHostNicVfsConfigEquals(newConfig, result); }<END_MOD>
<START_MOD>@java.lang.Override protected void buildParameters(org.ovirt.engine.core.common.businessentities.network.Network network) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.RenameNetworkParametersBuilder.getVdsDAO().getAllForNetwork(network.getId()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (!(setupNetworkSupported(host))) { continue; } org.ovirt.engine.core.common.action.SetupNetworksParameters setupNetworkParams = createSetupNetworksParameters(host); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics = setupNetworkParams.getInterfaces(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { if (org.apache.commons.lang.StringUtils.equals(nic.getNetworkName(), getOldNetwork().getName())) { nic.setNetworkName(network.getName()); break; } } getParameters().add(setupNetworkParams); } }<END_MOD>
private org.ovirt.engine.core.bll.ValidationResult diskImagesNotInStatus(org.ovirt.engine.core.common.businessentities.storage.ImageStatus status, org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD> failMessage) { java.util.List<java.lang.String> disksInStatus = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { if ((diskImage.getImageStatus()) == status) { disksInStatus.add(diskImage.getDiskAlias()); } } if (!(disksInStatus.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(failMessage, java.lang.String.format( %s org.apache.commons.lang.StringUtils.join(disksInStatus,     } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
<START_MOD>public void setVdsGroupSupportsVirtSerice(boolean value) { this.vdsGroupVirtSerice = value; }<END_MOD>
protected boolean failPassthroughVnicHotPlug() { if ((org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.pciPassthrough) == (org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic().getType()))) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.HOT_PLUG_UNPLUG_PASSTHROUGH_VNIC_NOT_SUPPORTED); return true; } return false; }
private boolean auditLogIfFieldWasNotAddedSuccessfully(java.util.Map<java.lang.String, java.lang.Object> descriptionFields, java.util.Map<java.lang.String, java.lang.Object> descriptionMap, java.lang.String fieldName, java.lang.String fieldValue, java.lang.String[] descriptionFieldsPriority, int fieldPriorityIndex) { java.lang.String diskAlias = descriptionFields.get(org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandler.DISK_ALIAS).toString(); java.lang.String storedFieldValue = ((java.lang.String) (descriptionMap.get(fieldName))); if (storedFieldValue == null) { auditLogFailedToStoreDiskFields(diskAlias, getDiskFieldsNamesLeft(descriptionFieldsPriority, fieldPriorityIndex)); return false; } else { java.lang.String fullFieldValue = (stringMatchesAsciiPattern(fieldValue)) ? fieldValue : encodeDiskProperty(fieldValue); if ((storedFieldValue.length()) < (fullFieldValue.length())) { if (((descriptionFieldsPriority.length) - fieldPriorityIndex) > 1) { auditLogDiskFieldTruncatedAndOthersWereLost(diskAlias, fieldName, getDiskFieldsNamesLeft(descriptionFieldsPriority, (fieldPriorityIndex + 1))); } else { auditLogDiskFieldTruncated(diskAlias, fieldName); } return false; } } return true; }
<START_MOD>private org.ovirt.engine.core.common.action.CustomPropertiesFor<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsToCustomProperties(java.util.List<org.ovirt.engine.api.model.HostNIC> hostNics) { org.ovirt.engine.core.common.action.CustomPropertiesFor<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> result = new org.ovirt.engine.core.common.action.CustomPropertiesFor(); for (org.ovirt.engine.api.model.HostNIC hostNic : hostNics) { if (hostNic.isSetProperties()) { result.add(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(hostNic.getId()), org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.toMap(hostNic.getProperties())); } } return result; }<END_MOD>
<START_MOD>public org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmPopupWidgetConfig copy() { org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmPopupWidgetConfig copy = new org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmPopupWidgetConfig(advancedOnly, alwaysHidden, markedAsSpecial, adminOnly); copy.setApplicationLevelVisible(isApplicationLevelVisible()); return copy; }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("$action refresh capabilities") java.lang.String VAR__ACTION__GET_CAPABILITIES();<END_MOD>
@org.junit.Test public void testValidateClusterSupportForVirtioScsi() { org.ovirt.engine.core.bll.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> cmd = setupDiskSpaceTest(createParameters()); doReturn(true).when(cmd).validateImages(any(java.util.Map.class)); cmd.getParameters().getVm().getDiskMap().values().iterator().next().setDiskInterface(DiskInterface.VirtIO_SCSI); cmd.getVdsGroup().setCompatibilityVersion(Version.v3_2); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, <START_MOD>EngineMessages<END_MOD>.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL); }
<START_MOD>@org.junit.Test public void testDetachingPreviouslyAddedNetworkAttachment() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.newNetworkAttachment(networkA, nicA); hsnp.getNetworkAttachments().add(networkAttachment); when(logicalNetworkModelOfNetworkA.hasVlan()).thenReturn(false); when(logicalNetworkModelOfNetworkA.isAttached()).thenReturn(true); NetworkOperation.DETACH_NETWORK.getTarget().executeNetworkCommand(logicalNetworkModelOfNetworkA, null, allNics, allNetworkAttachments, hsnp); assertThat(hsnp.getNetworkAttachments().size(), is(0)); assertThat(hsnp.getRemovedNetworkAttachments().size(), is(0)); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.businessentities.permissions getForRoleAndAdElementAndObjectWithGroupCheck(org.ovirt.engine.core.compat.Guid roleid, org.ovirt.engine.core.compat.Guid elementid, org.ovirt.engine.core.compat.Guid objectid) { org.hibernate.Query query = getSession().createQuery( DbUser where id = :id query.setParameter("id", objectid); org.ovirt.engine.core.common.businessentities.DbUser user = ((org.ovirt.engine.core.common.businessentities.DbUser) (query.uniqueResult())); query = getSession().createQuery( ad_groups where name in :names query.setParameterList("names", user.getGroupsAsArray()); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD>> groups = query.list(); java.util.List<org.ovirt.engine.core.compat.Guid> ids = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); ids.add(user.getuser_id()); for (org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD> group : groups) { ids.add(group.getid()); } return fillInPermissionDetails(findOneByCriteria(org.hibernate.criterion.Restrictions.eq("roleId", roleid), org.hibernate.criterion.Restrictions.eq("adElementId", elementid), org.hibernate.criterion.Restrictions.eq("objectId", objectid), org.hibernate.criterion.Restrictions.in("adElementId", ids))); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getHostsForStorageOperation(org.ovirt.engine.core.compat.Guid storagePoolId, boolean localFsOnly) { if ((storagePoolId == null) || (storagePoolId.equals(Guid.Empty))) { storagePoolId = null; } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getCallsHandler().executeReadList("getHostsForStorageOperation", org.ovirt.engine.core.dao.<START_MOD>VdsDAOImpl<END_MOD>.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("storage_pool_id", storagePoolId).addValue("local_fs_only", localFsOnly)); return uniteAgents(vdsList); }
<START_MOD>public void setTemplateChanged(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> templateChanged) { this.templateChanged = templateChanged; }<END_MOD>
@java.lang.Override java.lang.String getSubCollectionsVariables() { java.lang.<START_MOD>StringBuilder buffer<END_MOD> = new java.lang.<START_MOD>StringBuilder(); java.util.Map<java.lang.String, org.ovirt.engine.sdk.codegen.holders.CollectionHolder> subCollections = getSubcollections(); java.util.List<java.lang.String> keys = new java.util.ArrayList(subCollections.keySet()); java.util.Collections.sort(keys<END_MOD>); for (<START_MOD>java.lang.String key : keys) { <END_MOD>org.ovirt.engine.sdk.codegen.holders.CollectionHolder ch <START_MOD>= subCollections.get(key); buffer<END_MOD>.append(variableTemplate.getTemplate(ch.getName(), org.ovirt.engine.sdk.codegen.utils.StringUtils.toLowerCase(ch.getName()))); } return <START_MOD>buffer<END_MOD>.toString(); }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.setExecutorService(<START_MOD>new org.ovirt.engine.core.common.utils.EngineThreadPools.InternalThreadExecutor(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_MIN_SIZE"), org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_MAX_SIZE"), org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getInteger("ENGINE_THREAD_POOL_QUEUE_SIZE"))<END_MOD>); }
protected void addVmInterfaces() { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getClusterId(), org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getStoragePoolId(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_IMPORT_VM_INVALID_INTERFACES); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = getVm().getInterfaces(); vmInterfaceManager.sortVmNics(nics, getVm().getStaticData().getManagedDeviceMap()); if ((!(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().isImportAsNewEntity())) && (isExternalMacsToBeReported())) { reportExternalMacs(); } for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : getVm().getInterfaces()) { initInterface(iface); vnicProfileHelper.updateNicWithVnicProfileForUser(iface, org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCurrentUser()); boolean reassignMac = (shouldMacBeReassigned(iface)) || (org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().isImportAsNewEntity()); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCompensationContext(), reassignMac); macsAdded.add(iface.getMacAddress()); } vnicProfileHelper.auditInvalidInterfaces(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getVmName()); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Illegal USB policy is provided, cannot determine whether a legacy or native USB policy should be set.") java.lang.String ACTION_TYPE_FAILED_ILLEGAL_USB_POLICY();<END_MOD>
<START_MOD>private void assertCredentials(org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String> credentials, java.lang.String userName, java.lang.String password) { assertEquals(userName, credentials.getFirst()); assertEquals(password, credentials.getSecond()); }<END_MOD>
@java.lang.Override public void updateMinAllocatedMemory() { <START_MOD>if (((getModel().getMinAllocatedMemory().getEntity()) != null) && ((getVm().getMemSizeMb()) == (getModel().getMinAllocatedMemory().getEntity()))) { getModel().getMinAllocatedMemory().setEntity(getModel().getMemSize().getEntity()); } else { <END_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster dataCenterWithCluster = getModel().getDataCenterWithClustersList().getSelectedItem(); if (dataCenterWithCluster == null) { return; } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = dataCenterWithCluster.getCluster(); if (cluster == null) { return; } if ((getModel().getMemSize().getEntity()) < (vm.getVmMemSizeMb())) { double overCommitFactor = 100.0 / (cluster.getMaxVdsMemoryOverCommit()); getModel().getMinAllocatedMemory().setEntity(((int) ((getModel().getMemSize().getEntity()) * overCommitFactor))); } else { getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem()); } }<START_MOD> }<END_MOD>
@org.junit.Test public void canDoActionInvalidVmStatus() { command.getParameters().setParametersList(createMoveDisksParameters()); initDiskImage(diskImageId); initVm(VMStatus.Unknown, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageId); command.updateParameters(); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN_OR_UP.toString())); }
<START_MOD>@java.lang.Override public void onMouseOver(com.google.gwt.event.dom.client.MouseOverEvent event) { com.google.gwt.safehtml.shared.SafeHtml tooltipHtml = getTooltip(); if (!("".equals(tooltipHtml.asString()))) { tooltip.setHTML(getTooltip()); org.ovirt.engine.ui.common.utils.PopupUtils.adjustPopupLocationToFitScreenAndShow(tooltipPanel, event.getClientX(), ((event.getClientY()) + 20)); } }<END_MOD>
<START_MOD>private void remove() { if ((org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeAffinityLabelsTitle()); model.setHelpTag(HelpTag.remove_affinity_groups); model.setHashName("remove_affinity_labels"); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Label affinityLabel : org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.getSelectedItems()) { list.add(affinityLabel.getName()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand command = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnRemove", this); model.getCommands().add(command); model.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); }<END_MOD>
<START_MOD>@java.lang.Override protected void initDeviceStructure() { org.ovirt.engine.core.common.businessentities.VmNetworkInterface nic = getParameters().getNic(); if ((nic.getNetworkName()) != null) { struct.add(VdsProperties.network, nic.getNetworkName()); } struct.add(VdsProperties.linkActive, java.lang.String.valueOf(nic.isLinked())); if (nic.isPortMirroring()) { if ((nic.getNetworkName()) != null) { struct.add(VdsProperties.portMirroring, java.util.Collections.singletonList(nic.getNetworkName())); } else { struct.add(VdsProperties.portMirroring, new java.util.ArrayList<java.lang.String>()); } } }<END_MOD>
<START_MOD>private static java.util.List<java.lang.String> innerInitRange(int stopAfter, long startNum, long endNum) { if (startNum > endNum) { return java.util.Collections.emptyList(); } java.util.List<java.lang.String> macAddresses = new java.util.ArrayList<>(stopAfter); for (long i = startNum; i <= endNum; i++) { if (((org.ovirt.engine.core.utils.MacAddressRangeUtils.MAC_ADDRESS_MULTICAST_BIT) & i) != 0) { continue; } macAddresses.add(org.ovirt.engine.core.utils.MacAddressRangeUtils.macAddressIntToString(i)); if ((stopAfter--) <= 0) { return macAddresses; } } return new java.util.ArrayList<>(macAddresses); }<END_MOD>
private void execute(org.ovirt.engine.core.ldap.LdapProviderType ldapProviderType, java.lang.String domain) { java.util.Hashtable<java.lang.String, java.lang.String> env = new java.util.Hashtable<java.lang.String, java.lang.String>(); org.ovirt.engine.core.bll.adbroker.LdapBrokerUtils.addLdapConfigValues(env); initContextVariables(env); javax.naming.directory.Attributes results = null; javax.naming.directory.DirContext ctx = null; try { ctx = createContext(env); org.ovirt.engine.core.bll.adbroker.LdapQueryData ldapQueryData = new org.ovirt.engine.core.bll.adbroker.LdapQueryDataImpl(); ldapQueryData.setLdapQueryType(LdapQueryType.rootDSE); ldapQueryData.setDomain(domain); org.ovirt.engine.core.bll.adbroker.LdapQueryExecution queryExecution = org.ovirt.engine.core.bll.adbroker.LdapQueryExecutionBuilderImpl.getInstance().build(ldapProviderType, ldapQueryData); javax.naming.directory.SearchControls searchControls = new javax.naming.directory.SearchControls(); searchControls.setReturningAttributes(queryExecution.getReturningAttributes()); searchControls.setSearchScope(queryExecution.getSearchScope()); searchControls.setReturningObjFlag(true); searchControls.setTimeLimit(((org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.LDAPOperationTimeout)) * 1000)); javax.naming.NamingEnumeration<javax.naming.directory.SearchResult> search = ctx.search(queryExecution.getBaseDN(), queryExecution.getFilter(), searchControls); try { results = search.next().getAttributes(); } finally { search.close(); } } catch (javax.naming.NamingException e) { org.ovirt.engine.core.bll.adbroker.GetRootDSE.log.errorFormat( to query rootDSE for LDAP server {0} due to {1} ldapURI, e.getMessage()); <START_MOD>throw new java.lang.RuntimeException(e); <END_MOD>} finally { closeContext(ctx); } attributes = results; }
@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveAlreadySlavesForDifferentBondButItsDetachedFromItAsAPartOfRequest() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond("bond1"); org.ovirt.engine.core.common.businessentities.network.Bond differentBond = createBond("bond2"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveA = createBondSlave(bond, "slaveA"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveB = createBondSlave(differentBond, "slaveB"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveC = createBondSlave(differentBond, "slaveC"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveD = createBondSlave(differentBond, "slaveD"); setBondSlaves(bond, slaveA, slaveB); setBondSlaves(differentBond, slaveC, slaveD); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator build = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(<START_MOD>org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond), org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(differentBond)<END_MOD>)).addExistingInterfaces(bond, differentBond, slaveA, slaveB, slaveC, slaveD).build(); _doTestValidateModifiedBondSlaves(spy(build), ValidationResult.VALID, ValidationResult.VALID, isValid()); }
<START_MOD>public void setMenuItemSelectedEvent(org.ovirt.engine.core.compat.Event menuItemSelectedEvent) { this.menuItemSelectedEvent = menuItemSelectedEvent; }<END_MOD>
@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.widget.tree.Context context, org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb) { com.google.gwt.resources.client.ImageResource imageResource; switch (value.getType()) { case Cluster : imageResource = applicationResources.clusterImage(); break; case Clusters : imageResource = applicationResources.clustersImage(); break; case DataCenter : imageResource = applicationResources.dataCenterImage(); break; case DataCenters : imageResource = applicationResources.dataCenterImage(); break; case Cluster_Gluster : imageResource = applicationResources.glusterClusterImage(); break; case Host : imageResource = applicationResources.hostImage(); break; case Hosts : imageResource = applicationResources.hostsImage(); break; case Storage : imageResource = applicationResources.storageImage(); break; case Storages : imageResource = applicationResources.storagesImage(); break; case System : imageResource = applicationResources.systemImage(); break; case Templates : imageResource = applicationResources.templatesImage(); break; case VMs : imageResource = applicationResources.vmsImage(); break; case Volume : imageResource = applicationResources.volumeImage(); break; case Volumes : imageResource = applicationResources.volumesImage(); break; case Network : imageResource = applicationResources.networkTreeImage(); break; case Networks : imageResource = applicationResources.networksTreeImage(); break; <START_MOD>case Provider : imageResource = applicationResources.networkTreeImage(); break; case Providers : imageResource = applicationResources.networksTreeImage(); break; <END_MOD>default : imageResource = applicationResources.questionMarkImage(); } com.google.gwt.safehtml.shared.SafeHtml imageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(imageResource).getHTML()); sb.append(templates.treeItem(imageHtml, value.getTitle())); }
<START_MOD>@java.lang.Override public void Executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue(); boolean success = (returnValue != null) && (returnValue.getSucceeded()); if (success) { localConnection = null; } java.lang.Object[] array = ((java.lang.Object[]) (result.getState())); OnFinish(((org.ovirt.engine.ui.uicompat.TaskContext) (array[0])), ((java.lang.Boolean) (array[1])), ((org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel) (array[2])), ((java.lang.String) (array[3]))); }<END_MOD>
private java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> prepareSnapshotConfigWithoutImage(org.ovirt.engine.core.compat.Guid imageGroupToRemove) { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> result = new java.util.LinkedList<org.ovirt.engine.core.common.businessentities.Snapshot>(); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> snapshotDisks = org.ovirt.engine.core.bll.RemoveImageCommand.getDiskImageDao().getAllSnapshotsForImageGroup(imageGroupToRemove); for (org.ovirt.engine.core.common.businessentities.DiskImage snapshotDisk : snapshotDisks) { org.ovirt.engine.core.<START_MOD>compat.Guid vmSnapshotId = snapshotDisk.getvm_snapshot_id().getValue(); if (!(Guid.Empty.equals(vmSnapshotId))) { org.ovirt.engine.core.<END_MOD>common.businessentities.Snapshot updated = prepareSnapshotConfigWithoutImageSingleImage(snapshotDisk.getvm_snapshot_id().getValue(), snapshotDisk.getImageId()); if (updated != null) { result.add(updated); } } <START_MOD>} <END_MOD>return result; }
<START_MOD>public boolean isType(java.lang.String value) { org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus volStatus = org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.valueOf(value); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status : values) { if (status.equals(volStatus)) { return true; } } return false; }<END_MOD>
<START_MOD>private boolean saveGlusterHostUuid() { org.ovirt.engine.core.dao.gluster.VdsGlusterDao vdsGlusterDao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsGlusterDao(); org.ovirt.engine.core.common.businessentities.gluster.VdsGluster vdsGluster = vdsGlusterDao.getByVdsId(getVds().getId()); if (vdsGluster == null) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterHostUUID, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(getVds().getId())); if ((returnValue.getSucceeded()) && ((returnValue.getReturnValue()) != null)) { vdsGluster = new org.ovirt.engine.core.common.businessentities.gluster.VdsGluster(); vdsGluster.setVdsId(getVds().getId()); vdsGluster.setHostUuid(((org.ovirt.engine.core.compat.Guid) (returnValue.getReturnValue()))); vdsGlusterDao.save(vdsGluster); } else { return false; } } return true; }<END_MOD>
public void setVmAttachedToPool(boolean value) { if (value) { getDataCenter().setIsChangable(false); getCluster().setIsChangable((!value)); getQuota().setIsChangable(false); getDescription().setIsChangable(false); getNumOfDesktops().setIsChangable(false); getPrestartedVms().setIsChangable(false); getTemplate().setIsChangable(false); getMemSize().setIsChangable(false); getTotalCPUCores().setIsChangable(false); getCoresPerSocket().setIsChangable(false); getNumOfSockets().setIsChangable(false); getOSType().setIsChangable(false); getIsStateless().setIsChangable(false); getIsDeleteProtected().setIsChangable(false); getTimeZone().setIsChangable(false); getDomain().setIsChangable(false); getDisplayProtocol().setIsChangable(false); getUsbPolicy().setIsChangable(false); getNumOfMonitors().setIsChangable(false); getIsSmartcardEnabled().setIsChangable(false); getAllowConsoleReconnect().setIsChangable(false); <START_MOD>getVncKeyboardLayout().setIsChangable(false); <END_MOD>getIsAutoAssign().setIsChangable(false); getDefaultHost().setIsChangable(false); getRunVMOnSpecificHost().setIsChangable(false); getHostCpu().setIsChangable(false); getDontMigrateVM().setIsChangable(false); getCpuPinning().setIsChangable(false); getMinAllocatedMemory().setIsChangable(false); getProvisioning().setIsChangable(false); getProvisioningThin_IsSelected().setIsChangable(false); getProvisioningClone_IsSelected().setIsChangable(false); getDisksAllocationModel().setIsChangable(false); getFirstBootDevice().setIsChangable(false); getSecondBootDevice().setIsChangable(false); getCdAttached().setIsChangable(false); getCdImage().setIsChangable(false); getKernel_path().setIsChangable(false); getInitrd_path().setIsChangable(false); getKernel_parameters().setIsChangable(false); getCustomProperties().setIsChangable(false); vmAttachedToPool = true; } }
private boolean pauseTransferIfNecessary(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval()) > 0) && (((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.INITIALIZING)) || ((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.TRANSFERRING)))) && ((((entity.getLastUpdated().getTime()) / 1000) + (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval())) < ts)) { log.warn( paused due to no updates in {} seconds. {} (ts - ((entity.getLastUpdated().getTime()) / 1000)), getTransferDescription()); <START_MOD>pausedBySystemReason = org.ovirt.engine.core.common.AuditLogType.TRANSFER_IMAGE_PAUSED_BY_SYSTEM_TIMEOUT; <END_MOD>updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); return true; } return false; }
private org.ovirt.engine.core.common.businessentities.VmTemplate mockVmTemplate() { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); template.setId(vmTemplateId); template.setStoragePoolId(storagePoolId); <START_MOD>template.setArchitecture(ArchitectureType.x86_64); <END_MOD>org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommandTestAbstract.setDiskList(template); return template; }
<START_MOD>@java.lang.Override public void setEnabled(boolean enabled) { this.enabled = enabled; nameEditor.setEnabled(enabled); valueEditor.setEnabled(enabled); }<END_MOD>
<START_MOD>protected org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.dao.scheduling.ClusterPolicyDaoImpl.ClusterPolicyUnit> createClusterPolicyUnitRowMapper() { return new org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.dao.scheduling.ClusterPolicyDaoImpl.ClusterPolicyUnit>() { @java.lang.Override public org.ovirt.engine.core.dao.scheduling.ClusterPolicyDaoImpl.ClusterPolicyUnit mapRow(java.sql.ResultSet rs, int arg1) throws java.sql.SQLException { org.ovirt.engine.core.dao.scheduling.ClusterPolicyDaoImpl.ClusterPolicyUnit unit = new org.ovirt.engine.core.dao.scheduling.ClusterPolicyDaoImpl.ClusterPolicyUnit(); unit.setClusterPolicyId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("cluster_policy_id"))); unit.setPolicyUnitId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("policy_unit_id"))); unit.setFilterSelected(rs.getBoolean("filter_selected")); unit.setFilterSequence(rs.getInt("filter_sequence")); unit.setFunctionSelected(rs.getBoolean("function_selected")); unit.setFactor(rs.getInt("factor")); unit.setBalanceSelected(rs.getBoolean("balance_selected")); return unit; } }; }<END_MOD>
void localize(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { titleLabel.setText(constants.configurePopupTitle()); closeButton.setText(constants.closeButtonLabel()); rolesTab.setLabel(constants.configureRoleTabLabel()); clusterPoliciesTab.setLabel(constants.configureClusterPolicyTabLabel()); systemPermissionsTab.setLabel(constants.configureSystemPermissionTabLabel()); <START_MOD>macPoolsTab.setLabel(constants.configureMacPoolsTabLabel()); <END_MOD>}
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Quota.class, to = org.ovirt.engine.api.model.StorageQuotaLimit.class) public static org.ovirt.engine.api.model.StorageQuotaLimit map(org.ovirt.engine.core.common.businessentities.Quota entity, org.ovirt.engine.api.model.StorageQuotaLimit template) { if (template == null) { assert false : "StorageQuotaLimit cannot be null"; return null; } org.ovirt.engine.core.compat.Guid guid = org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(template.getId()); if (guid.equals(entity.getId())) { org.ovirt.engine.api.restapi.types.QuotaMapper.map(template, entity.getGlobalQuotaStorage(), null, entity.getStoragePoolId().toString(), entity.getId().toString()); } else { if ((entity.getQuotaStorages()) != null) { for (org.ovirt.engine.core.common.businessentities.QuotaStorage quotaStorage : entity.getQuotaStorages()) { if (((quotaStorage.getStorageId()) != null) && (quotaStorage.getStorageId().equals(guid))) { org.ovirt.engine.api.restapi.types.QuotaMapper.map(template, quotaStorage, quotaStorage.getStorageId().toString(), entity.getStoragePoolId().toString(), entity.getId().toString()); } } } } return template; }<END_MOD>
@org.junit.Test public void testReportConfigurationsOnHostWhenBootProtocolNotStatic() { initIpConfigurationBootProtocolAddress(NetworkBootProtocol.NONE, false); initIpConfigurationBootProtocolNetmask(NetworkBootProtocol.NONE, false); initIpConfigurationBootProtocolGateway(NetworkBootProtocol.NONE, false); org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface testedInstanceWithSameNonQosValues = createTestedInstanceWithSameNonQosValues(); java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> reportedConfigurationList = testedInstanceWithSameNonQosValues.reportConfigurationsOnHost().getReportedConfigurationList(); <START_MOD>org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = this.testedNetworkAttachment.getIpConfiguration().getIpv4PrimaryAddress(); <END_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> expectedReportedConfigurations = <START_MOD>combineReportedConfigurations(createBasicAndQosReportedConfigurations(), new org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurationType.BOOT_PROTOCOL, iface.getIpv4BootProtocol().name(),<END_MOD> primaryAddress<START_MOD>.getBootProtocol().name(), true)); assertThat(reportedConfigurationList.containsAll(<END_MOD>expectedReportedConfigurations<START_MOD>), is(<END_MOD>true)); assertThat(reportedConfigurationList.<START_MOD>size(), is<END_MOD>(expectedReportedConfigurations.size())); }
public boolean isMonitoringNeeded() { return ((((((<START_MOD>(<END_MOD>monitoringStrategy.isMonitoringNeeded(_vds)) && ((_vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing))) && ((_vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallFailed))) && ((_vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Reboot))) && ((_vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance))) && ((_vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.PendingApproval))) && ((_vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Down))<START_MOD>) && ((_vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Kdumping))<END_MOD>; }
@org.junit.Test public void nicNotExist() { nicExists(false); assertCanDoActionFailure(<START_MOD>EngineMessages<END_MOD>.HOST_NETWORK_INTERFACE_NOT_EXIST.toString()); }
public static final org.ovirt.engine.ui.common.widget.table.column.AbstractDiskSizeColumn<org.ovirt.engine.core.common.businessentities.Disk> getSizeColumn(java.lang.String sortBy) { org.ovirt.engine.ui.common.widget.table.column.AbstractDiskSizeColumn<org.ovirt.engine.core.common.businessentities.Disk> column = new org.ovirt.engine.ui.common.widget.table.column.AbstractDiskSizeColumn<org.ovirt.engine.core.common.businessentities.Disk>() { @java.lang.Override protected java.lang.Long getRawValue(org.ovirt.engine.core.common.businessentities.Disk object) { return (object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE) ? ((org.ovirt.engine.core.common.businessentities.DiskImage) (object)).getSize() : ((long) ((((org.ovirt.engine.core.common.businessentities.LunDisk) (object)).getLun().getDeviceSize()) * (java.lang.Math.pow(1024, 3)))); } <START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.Disk object) { return null; } <END_MOD>}; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable(column, sortBy); }
<START_MOD>protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue executeVerb(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storage) { try { org.ovirt.engine.core.common.vdscommands.GetVmsInfoVDSCommandParameters tempVar = new org.ovirt.engine.core.common.vdscommands.GetVmsInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.GetAllFromExportDomainQuery.getParameters().getStoragePoolId()); tempVar.setStorageDomainId(org.ovirt.engine.core.bll.storage.GetAllFromExportDomainQuery.getParameters().getStorageDomainId()); tempVar.setVmIdList(org.ovirt.engine.core.bll.storage.GetAllFromExportDomainQuery.getParameters().getIds()); return org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.GetVmsInfo, tempVar); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("StorageDomainName", storage.getStorageName()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.IMPORTEXPORT_GET_VMS_INFO_FAILED); throw e; } }<END_MOD>
<START_MOD>private java.util.Set<org.ovirt.engine.core.compat.Guid> getCriticalSnapshotsChain(java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> imagesFromActiveSnapshot, java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderImagesForPreviewedSnapshot) { java.util.Set<org.ovirt.engine.core.compat.Guid> criticalSnapshotsChain = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : imagesFromActiveSnapshot) { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage previewedDiskImage : cinderImagesForPreviewedSnapshot) { if (diskImage.getId().equals(previewedDiskImage.getId())) { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : org.ovirt.engine.core.bll.RestoreAllSnapshotsCommand.getDiskImageDao().getAllSnapshotsForLeaf(cinderDiskFromSnapshot.get(0).getImageId())) { criticalSnapshotsChain.add(diskImage.getVmSnapshotId()); } } } return criticalSnapshotsChain; } }<END_MOD>
@java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { com.google.gwt.user.cellview.client.TreeNode expandNode = findNode(<START_MOD>getDataDisplayWidget()<END_MOD>.getRootTreeNode(), modelProvider.getSelectionModel().getSelectedObject()); if (expandNode != null) { expandTree(expandNode); } }
<START_MOD>public void setTabIndex(int index) { this.tabIndex = index; }<END_MOD>
<START_MOD>@org.junit.BeforeClass public static void initTestCase() throws java.lang.Exception { org.ovirt.engine.core.dao.BaseDAOTestCase.initTestCase(); java.util.Properties properties = new java.util.Properties(); java.io.InputStream is = null; is = org.ovirt.engine.core.dao.BaseDAOTestCase.class.getResourceAsStream("/test-database.properties"); properties.load(is); java.util.Map<java.lang.String, java.lang.String> props = new java.util.HashMap<>(); props.put("javax.persistence.jdbc.driver", properties.getProperty("database.driver")); props.put("javax.persistence.jdbc.user", properties.getProperty("database.username")); props.put("javax.persistence.jdbc.password", properties.getProperty("database.password")); props.put("javax.persistence.jdbc.url", properties.getProperty("database.url")); javax.persistence.EntityManagerFactory emf = javax.persistence.Persistence.createEntityManagerFactory("ovirt-test", props); org.ovirt.engine.core.dao.HibernateFacade.setEntityManagerFactory(emf); }<END_MOD>
private void removeCinderDisks(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks) { org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters removeParam = new org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId(), cinderDisks); removeParam.setParentHasTasks((!(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getReturnValue().getVdsmTaskIdList().isEmpty()))); java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> future = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveAllVmCinderDisks, withRootCommandInfo(removeParam, org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getActionType()), org.ovirt.engine.core.bll.RemoveVmTemplateCommand.cloneContextAndDetachFromParent()<START_MOD>, org.ovirt.engine.core.bll.storage.CINDERStorageHelper.getStorageEntitiesForCoco(cinderDisks)<END_MOD>); try { future.get().getActionReturnValue(); } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { log.error("Exception", e); } }
<START_MOD>protected static org.ovirt.engine.api.restapi.resource.BackendDeviceResource<org.ovirt.engine.api.model.Application, org.ovirt.engine.api.model.Applications, org.ovirt.engine.core.common.businessentities.VM> getResource(org.ovirt.engine.core.compat.Guid id) { return new org.ovirt.engine.api.restapi.resource.BackendVmApplicationResource(org.ovirt.engine.api.model.Application.class, org.ovirt.engine.core.common.businessentities.VM.class, id, org.ovirt.engine.api.restapi.resource.BackendVmApplicationResourceTest.collection, org.ovirt.engine.core.common.action.VdcActionType.UpdateVm, org.ovirt.engine.api.restapi.resource.BackendVmApplicationResourceTest.collection.getUpdateParametersProvider(), org.ovirt.engine.api.restapi.resource.BackendVmApplicationResourceTest.collection.getRequiredUpdateFields()); }<END_MOD>
<START_MOD>@java.lang.Override public void preventRollback() { org.ovirt.engine.core.bll.RemoveSnapshotImagesCommand.getParameters().setExecutionIndex(0); }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel) (array[0])); org.ovirt.engine.ui.uicommonweb.models.storage.RemoveStorageModel removeStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.RemoveStorageModel) (array[1])); org.ovirt.engine.core.common.businessentities.StorageDomain storage = storageListModel.getSelectedItem(); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((java.util.List<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); removeStorageModel.getHostList().setItems(hosts); removeStorageModel.getHostList().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(hosts)); removeStorageModel.getFormat().setEntity(<START_MOD>false<END_MOD>); if (hosts.isEmpty()) { org.ovirt.engine.ui.uicommonweb.UICommand tempVar = createCancelCommand("Cancel"); tempVar.setIsDefault(true); removeStorageModel.getCommands().add(tempVar); } else { org.ovirt.engine.ui.uicommonweb.UICommand command; command = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnRemove", this); removeStorageModel.getCommands().add(command); command = createCancelCommand("Cancel"); removeStorageModel.getCommands().add(command); } }
<START_MOD>public<END_MOD> <START_MOD>org.ovirt.engine.ui.uicommonweb.models.reports.ReportsListModel<END_MOD> <START_MOD>getReportsList() { return new org.ovirt.engine.ui.uicommonweb.models.reports.ReportsListModel<END_MOD>(org.ovirt.engine.ui.<START_MOD>uicommonweb<END_MOD>.<START_MOD>ReportInit.getInstance().getReportBaseUrl(), <END_MOD>org.ovirt.engine.ui.<START_MOD>uicommonweb<END_MOD>.<START_MOD>ReportInit.getInstance().getSsoToken(),<END_MOD> <START_MOD>null<END_MOD>); }
<START_MOD>protected boolean setAndValidateDiskProfiles() { setDiskProfileParameters(); if (isDiskImage()) { org.ovirt.engine.core.common.businessentities.DiskImage newDiskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (getNewDisk())); if (!(validate(new org.ovirt.engine.core.bll.profiles.DiskProfileValidator(newDiskImage.getDiskProfileId()).isStorageDomainValid(newDiskImage.getDiskProfileId())))) { return false; } } return true; }<END_MOD>
public synchronized void updateQuotaCache() { if (!(isCacheUpdateNeeded())) { return; } log.debug( Quota Cache... long timeStart = java.lang.System.currentTimeMillis(); java.util.List<org.ovirt.engine.core.common.businessentities.Quota> allQuotaIncludingConsumption = getQuotaDao().getAllQuotaIncludingConsumption(); if (allQuotaIncludingConsumption.isEmpty()) { return; } java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.Quota>> newStoragePoolQuotaMap = new java.util.HashMap<>(); java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> newDefaultQuotaIdMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.Quota quota : allQuotaIncludingConsumption) { if (!(newStoragePoolQuotaMap.containsKey(quota.getStoragePoolId()))) { newStoragePoolQuotaMap.put(quota.getStoragePoolId(), new java.util.HashMap()); } newStoragePoolQuotaMap.get(quota.getStoragePoolId()).put(quota.getId(), quota); if (quota.isDefault()) { newDefaultQuotaIdMap.put(quota.getStoragePoolId(), quota.getId()); } } lock.writeLock().lock(); try { storagePoolQuotaMap = newStoragePoolQuotaMap; storagePoolDefaultQuotaIdMap = newDefaultQuotaIdMap; } finally { lock.writeLock().unlock(); } long timeEnd = java.lang.System.currentTimeMillis(); log.info( Cache updated. ({} msec) (timeEnd - timeStart)); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.VmPool pool) { org.ovirt.engine.core.compat.Guid id = pool.getVmPoolId(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(id)) { id = org.ovirt.engine.core.compat.Guid.newGuid(); pool.setVmPoolId(id); } org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_pool_description", pool.getVmPoolDescription()).addValue("vm_pool_comment", pool.getComment()).addValue("vm_pool_id", pool.getVmPoolId()).addValue("vm_pool_name", pool.getName()).addValue("vm_pool_type", pool.getVmPoolType()).addValue("parameters", pool.getParameters()).addValue("prestarted_vms", pool.getPrestartedVms()).addValue("vds_group_id", pool.getVdsGroupId()).addValue("max_assigned_vms_per_user", pool.getMaxAssignedVmsPerUser()).addValue("spice_proxy", pool.getSpiceProxy())<START_MOD>.addValue("vm_pool_vmt_guid", pool.getVmtGuid()).addValue("vm_pool_is_latest", pool.isUseLatestVersion())<END_MOD>; getCallsHandler().executeModification("InsertVm_pools", parameterSource); }
@java.lang.Override protected void readOsSection(XmlNode section) { _vm.getStaticData().setId(new org.ovirt.engine.core.compat.Guid(section.Attributes.get("ovf:id").getValue())); XmlNode node = section.SelectSingleNode("Description"); if (node != null) { if (node.InnerText.equals(java.lang.String.valueOf(OsRepository.OLD_OTHER_ID))) { node.InnerText = java.lang.String.valueOf(OsRepository.DEFAULT_OS); } _vm.getStaticData().setOsId(osRepository.getOsIdByUniqueName(node.InnerText)); } <START_MOD>_vm.setArchitecture(ArchitectureType.x86_64); <END_MOD>}
<START_MOD>private static void logAndFailPartiallyCompletedCommandTask(final org.ovirt.engine.core.common.businessentities.AsyncTasks task) { org.ovirt.engine.core.bll.AsyncTaskManager.log.infoFormat("Failing partially completed task AsyncTaskType {0} : Task '{1}' Parent Command {2}", task.getTaskType(), task.getTaskId(), task.getaction_type()); task.getTaskParameters().setTaskGroupSuccess(false); org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(task.getStepId(), JobExecutionStatus.FAILED); org.ovirt.engine.core.bll.AsyncTaskManager.removeTaskFromDbByTaskId(task.getTaskId()); if ((task.getTaskType()) == (org.ovirt.engine.core.common.asynctasks.AsyncTaskType.unknown)) { org.ovirt.engine.core.bll.AsyncTaskManager.log.infoFormat("Not calling endAction for task with out vdsm id and AsyncTaskType {0} : Task '{1}' Parent Command {2}", task.getTaskType(), task.getTaskId(), task.getaction_type()); return; } org.ovirt.engine.core.compat.NGuid stepId = task.getStepId(); org.ovirt.engine.core.bll.job.ExecutionContext context = null; if (stepId != null) { context = org.ovirt.engine.core.bll.job.ExecutionHandler.createFinalizingContext(stepId.getValue()); } org.ovirt.engine.core.bll.Backend.getInstance().endAction(task.getaction_type(), task.getActionParameters(), new org.ovirt.engine.core.bll.context.CommandContext(context)); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call() { java.util.Set<org.ovirt.engine.core.compat.Guid> vdsConnectedToPool = org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxyData.getVdsConnectedToPool(_storagePoolId); java.util.Set<org.ovirt.engine.core.compat.Guid> vdsDomInMaintenance = _domainsInMaintenance.get(domain.getId()); if ((vdsConnectedToPool.isEmpty()) || ((vdsDomInMaintenance != null) && (vdsDomInMaintenance.containsAll(vdsConnectedToPool)))) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxyData.log.info( domain '{}' to maintenance domain.getId()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().updateStatus(domain.getStoragePoolIsoMapData().getId(), StorageDomainStatus.Maintenance); <START_MOD>org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLogableBase.addCustomValue("StorageDomainName", domain.getName()); auditLogableBase.addCustomValue("StoragePoolName", pool.getName()); <END_MOD>} return null; }
void update(org.ovirt.engine.core.common.businessentities.<START_MOD>Bookmarks<END_MOD> bookmark);
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__NETWORK); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__ATTACH); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Virtual Machine(s) java.lang.String migrateVirtualMachinesTitle();
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.bll.aaa.RemoveUserCommand.getParameters().getId(); if (org.ovirt.engine.core.bll.aaa.RemoveUserCommand.getCurrentUser().getId().equals(id)) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.USER_CANNOT_REMOVE_HIMSELF); return false; } org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = org.ovirt.engine.core.bll.aaa.RemoveUserCommand.getDbUserDao().get(id); if (dbUser == null) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.USER_MUST_EXIST_IN_DB); return false; } return true; }
private void prepareMocks(org.ovirt.engine.core.bll.gluster.CommitRemoveGlusterVolumeBricksCommand command) { doReturn(volumeDao).when(command).getGlusterVolumeDao(); doReturn(brickDao).when(command).getGlusterBrickDao(); doReturn(dbUtils).when(command).getDbUtils(); doReturn(getVds(VDSStatus.Up)).when(command).getUpServer(); doReturn(getVolumeWithRemoveBricksTask(volumeWithRemoveBricksTask)).when(volumeDao).getById(volumeWithRemoveBricksTask); doReturn(<START_MOD>getBricks(volumeWithoutRemoveBricksTask, 2)).when(brickDao).getGlusterVolumeBricksByTaskId(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(<END_MOD>getVolumeWithRemoveBricksTaskNotFinished(volumeWithRemoveBricksTaskNotFinished)).when(volumeDao).getById(volumeWithRemoveBricksTaskNotFinished); doReturn(getVolume(volumeWithoutAsyncTask)).when(volumeDao).getById(volumeWithoutAsyncTask); doReturn(getvolumeWithoutRemoveBricksTask(volumeWithoutRemoveBricksTask)).when(volumeDao).getById(volumeWithoutRemoveBricksTask); doReturn(getVolumeWithRemoveBricksTaskNull(volumeWithRemoveBricksTaskNull)).when(volumeDao).getById(volumeWithRemoveBricksTaskNull); doReturn(null).when(volumeDao).getById(null); }
public void PostNetworkAction(org.ovirt.engine.core.compat.Guid networkGuid, boolean succeeded) { org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterNetworkModel networkModel = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterNetworkModel) (getWindow())); if (succeeded) { Cancel(); } else { networkModel.StopProgress(); return; } networkModel.StopProgress(); org.ovirt.engine.core.common.businessentities.Network network = networkModel.getcurrentNetwork(); org.ovirt.engine.core.compat.Guid networkId = (networkModel.getIsNew()) ? networkGuid : network.getId(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> attachNetworkToClusters = org.ovirt.engine.ui.uicommonweb.Linq.Except(networkModel.getnewClusters(), networkModel.getOriginalClusters()); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> actionParameters1 = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.core.common.businessentities.VDSGroup attachNetworkToCluster : attachNetworkToClusters) { org.ovirt.engine.core.common.businessentities.Network tempVar = new org.ovirt.engine.core.common.businessentities.Network(null); tempVar.setId(networkId); tempVar.setname(network.getname()); <START_MOD>tempVar.setCluster(new org.ovirt.engine.core.common.businessentities.network_cluster()); <END_MOD>actionParameters1.add(new org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter(attachNetworkToCluster, tempVar)); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1); }
<START_MOD>private java.lang.Long parseSafeLong(java.util.Map<java.lang.String, java.lang.Object> innerMap, java.lang.String key) { return (innerMap.containsKey(key)) && (org.apache.commons.lang.StringUtils.isNumeric(key)) ? java.lang.Long.parseLong(innerMap.get(key).toString()) : null; }<END_MOD>
public static void GetStorageDomainById(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid storageDomainId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.StorageDomain) (source)) : null; } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetStorageDomainById, new org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.StorageDomainQueryParametersBase(storageDomainId), aQuery); }
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> getAllForMac(java.lang.String macAddress) { return getCallsHandler().executeReadList("GetVmInterfacesByMacAddress", mapper, getCustomMapSqlParameterSource().addValue("mac_address", macAddress)); }<END_MOD>
@org.junit.Test public void readOnlyIsSupportedByDiskInterface() { disk.setReadOnly(true); disk.setDiskInterface(DiskInterface.VirtIO<START_MOD>); assertThat(validator.isReadOnlyPropertyCompatibleWithInterface(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); disk.setReadOnly(true); disk.setDiskInterface(DiskInterface.VirtIO_SCSI<END_MOD>); assertThat(validator.isReadOnlyPropertyCompatibleWithInterface(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); disk.setReadOnly(false); disk.setDiskInterface(DiskInterface.IDE); assertThat(validator.isReadOnlyPropertyCompatibleWithInterface(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
@org.junit.Test public void testReadBooleanListEndElement() { org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader(<START_MOD>"<values><value>true</value><value>false</value></values>"<END_MOD>); reader.readBooleans(); assertEquals(javax.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getEventType()); assertEquals(<START_MOD>"values"<END_MOD>, reader.getLocalName()); }
<START_MOD>@java.lang.Override public void onLoad() { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { recalculateSize(); showScrollButtons(); } }); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getName(T item) { java.lang.String result = ""; if (item instanceof org.ovirt.engine.core.common.businessentities.Nameable) { result = ((org.ovirt.engine.core.common.businessentities.Nameable) (item)).getName(); } return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(result); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult valuesConsistent() { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = getQos(); if (qos == null) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.lang.Integer outUpperlimit = qos.getOutAverageUpperlimit(); java.lang.Integer outRealtime = qos.getOutAverageRealtime(); return ((outUpperlimit != null) && (outRealtime != null)) && (outUpperlimit < outRealtime) ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_INCONSISTENT_VALUES) : org.ovirt.engine.core.bll.ValidationResult.VALID; }
<START_MOD>protected org.ovirt.engine.api.model.Users mapDbUserCollection(java.util.List<org.ovirt.engine.core.common.businessentities.DbUser> entities) { org.ovirt.engine.api.model.Users collection = new org.ovirt.engine.api.model.Users(); for (org.ovirt.engine.core.common.businessentities.DbUser entity : entities) { collection.getUsers().add(addLinks(modifyDomain(map(entity)), org.ovirt.engine.api.model.BaseResource.class)); } return collection; }<END_MOD>
<START_MOD>@org.junit.Test public void testRemoveCantDo() throws java.lang.Exception { setUpGetEntityExpectations(); doTestBadRemove(false, true, org.ovirt.engine.api.restapi.resource.CANT_DO); }<END_MOD>
@org.junit.Test public void testAlreadyExistStorageDomain() { when(command.getStorageDomainStaticDao().get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommandTest.getStorageDomain()); assertFalse( Domain already exists command.canAddDomain()); assertTrue( block Storage Domain should have failed due to already existing Storage Domain command.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().contains(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST.toString())); }
protected void forceCreationWarning(java.util.ArrayList<java.lang.String> usedLunsMessages) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmationModel); confirmationModel.setTitle(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.forceStorageDomainCreation()); confirmationModel.setMessage(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.lunsAlreadyPartOfSD()); confirmationModel.setHashName("force_lun_disk_creation"); confirmationModel.<START_MOD>setHelpTag(confirmationModel.getHashName(), ""); confirmationModel.<END_MOD>setItems(usedLunsMessages); org.ovirt.engine.ui.uicommonweb.UICommand forceSaveCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("OnForceSave", this); forceSaveCommand.setTitle(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.ok()); forceSaveCommand.setIsDefault(true); confirmationModel.getCommands().add(forceSaveCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelconfirmCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirm", this); cancelconfirmCommand.setTitle(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.cancel()); cancelconfirmCommand.setIsCancel(true); confirmationModel.getCommands().add(cancelconfirmCommand); }
<START_MOD>protected abstract HostJobInfo.HostJobType getHostJobType();<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Host(s) java.lang.String maintenanceHostsTitle();
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult <START_MOD>validate<END_MOD>(java.lang.String value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if ((value != null) && ((value.length()) > (getMaxLength()))) { result.setSuccess(false); result.getReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().lenValidationFieldMusnotExceed(getMaxLength())); } return result; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { initImportClonedTemplateDisks(); addVmTemplateToDb(); mapDbUsers(); updateOriginalTemplateNameOnDerivedVms(); addVmInterfaces(); getCompensationContext().stateChanged(); org.ovirt.engine.core.bll.exportimport.vmHandler.addVmInitToDB(getVmTemplate().getVmInit()); return null; }); boolean doesVmTemplateContainImages = !(getImages().isEmpty()); if (doesVmTemplateContainImages && (!(org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImagesExistOnTargetStorageDomain()))) { moveOrCopyAllImageGroups(getVmTemplateId(), getImages()); } org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getVmDeviceUtils().addImportedDevices(getVmTemplate(), org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImportAsNewEntity(), false<START_MOD>, getImages().stream().map(DiskImage::getId).collect(java.util.stream.Collectors.toList())<END_MOD>); if ((!doesVmTemplateContainImages) || (org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImagesExistOnTargetStorageDomain())) { endMoveOrCopyCommand(); } discardHelper.logIfDisksWithIllegalPassDiscardExist(getVmTemplateId()); checkTrustedService(); org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.setSucceeded(true); }
<START_MOD>public java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> buildParameters(java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { java.util.Set<org.ovirt.engine.core.compat.Guid> nonUpdateableHosts = new java.util.HashSet<>(); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<>(); boolean vlanNetwork = org.ovirt.engine.core.utils.NetworkUtils.isVlan(network); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { org.ovirt.engine.core.common.action.SetupNetworksParameters setupNetworkParams = createSetupNetworksParameters(nic.getVdsId()); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicToConfigure = getNicToConfigure(setupNetworkParams.getInterfaces(), nic.getId()); if (nicToConfigure == null) { continue; } if (network.getName().equals(nicToConfigure.getNetworkName())) { nicToConfigure.setNetworkName(null); } else if (vlanNetwork) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlan = getVlanDevice(setupNetworkParams, nicToConfigure); if (vlan == null) { nonUpdateableHosts.add(nic.getVdsId()); } else { setupNetworkParams.getInterfaces().remove(vlan); } } else { nonUpdateableHosts.add(nic.getVdsId()); continue; } parameters.add(setupNetworkParams); } reportNonUpdateableHosts(nonUpdateableHosts); return parameters; }<END_MOD>
@java.lang.Override protected void setUpQueryExpectations(java.lang.String query, java.lang.Object failure) throws java.lang.Exception { setUpEntityQueryExpectations(VdcQueryType.GetErrataForHost, org.ovirt.engine.core.common.queries.<START_MOD>GetErrataCountsParameters<END_MOD>.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[0] }, getErrata(), failure); control.replay(); }
private void extractRemovedNetworks() { for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : getExistingIfaces().values()) { java.lang.String net = iface.getNetworkName(); if ((org.apache.commons.lang.StringUtils.isNotBlank(net)) && (!(attachedNetworksNames.contains(net)))) { removedNetworks.add(net); } } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(params.getVdsId(), removedNetworks); <START_MOD>if ((vmNames.size()) == 1) { addViolation(EngineMessage.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_SINGLE_VM, vmNames.get(0)); } else { <END_MOD>for (java.lang.String vmName : vmNames) { addViolation(EngineMessage.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, vmName); } }<START_MOD> }<END_MOD>
<START_MOD>public void dismissEvent() { org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.businessentities.AuditLog<END_MOD> <START_MOD>auditLog<END_MOD> <START_MOD>=<END_MOD> <START_MOD>org.ovirt.engine.ui.uicommonweb.models.events.EventListModel.getSelectedItem<END_MOD>(<START_MOD>); org.ovirt.engine.core.common.action.RemoveAuditLogByIdParameters params = new org.ovirt.engine.core.common.action.RemoveAuditLogByIdParameters(auditLog.getAuditLogId()); <END_MOD>org.ovirt.engine.ui.frontend.<START_MOD>Frontend<END_MOD>.<START_MOD>getInstance().runAction(VdcActionType.RemoveAuditLogById,<END_MOD> <START_MOD>params<END_MOD>); }
<START_MOD>@org.junit.Test public void testUpdateWithNonGuidId() { try { javax.ws.rs.core.UriInfo uriInfo = mockUri("vms", "00000001-0001-0001-0001-000000000011", "disks", "116"); javax.ws.rs.core.Request request = mockRequest("PUT"); control.replay(); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/api/model#services/vm-disk/methods/update", fault.getDetail()); } catch (java.net.URISyntaxException | java.lang.ClassNotFoundException | java.io.IOException e) { fail(); } }<END_MOD>
@java.lang.Override protected void ExecuteVdsBrokerCommand() { <START_MOD>task<END_MOD> =<START_MOD> new<END_MOD> org.ovirt.engine.core.<START_MOD>common.businessentities<END_MOD>.gluster.<START_MOD>GlusterAsyncTask<END_MOD>()<START_MOD>; task<END_MOD>.<START_MOD>setTaskId<END_MOD>(org.ovirt.engine.core.<START_MOD>compat<END_MOD>.<START_MOD>Guid<END_MOD>.<START_MOD>NewGuid<END_MOD>()<START_MOD>); setReturnValue<END_MOD>(<START_MOD>task<END_MOD>); org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.ProceedProxyReturnValue(); }
<START_MOD>private boolean shouldCommandEndOnAsyncOpEnd(org.ovirt.engine.core.bll.CommandBase<?> cmd) { return (cmd.getParameters().getEndProcedure()) == (org.ovirt.engine.core.common.action.VdcActionParametersBase.EndProcedure.ASYNC_OPERATIONS_END); }<END_MOD>
@org.junit.Test public void vmNotDuringSnapshotReturnsInvalidResultWhenInSnapshot() throws java.lang.Exception { when(snapshotDao.exists(vmId, SnapshotStatus.LOCKED)).thenReturn(true); org.ovirt.engine.core.bll.snapshots.SnapshotsValidatorTest.validateInvalidResult(validator.vmNotDuringSnapshot(vmId), <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT); }
<START_MOD>private boolean shouldBeConfigureAsBondSlave(java.lang.String interfaceName) { for (org.ovirt.engine.core.common.businessentities.network.Bond bond : params.getBonds()) { if (bond.getSlaves().contains(interfaceName)) { return true; } } org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingNic = existingInterfacesMap.get(interfaceName); return (existingNic.isPartOfBond()) && (!(params.getRemovedBonds().contains(existingNic.getBondName()))); }<END_MOD>
private void updateSpiceUsbAutoShare(final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getSpiceUsbAutoShare(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.lang.Boolean><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.<START_MOD>Boolean<END_MOD> returnValue) { spice.getOptions().setUsbAutoShare(returnValue); } })); }
@java.lang.Override protected boolean canDoAction() { if ((((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } return super.canDoAction(); }
private void updateRngDeviceIfNecessary(org.ovirt.engine.core.compat.Guid vmBaseId, org.ovirt.engine.core.compat.Version customCompatibilityLevel, org.ovirt.engine.core.common.action.HasRngDevice updateParameters) { final org.ovirt.engine.core.compat.Version oldEffectiveVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(customCompatibilityLevel, () -> oldCluster.getCompatibilityVersion()); final org.ovirt.engine.core.compat.Version newEffectiveVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(customCompatibilityLevel, () -> getCluster().getCompatibilityVersion()); <START_MOD>vmUpdateUtils<END_MOD>.<START_MOD>upgradeRngDevices<END_MOD>(oldEffectiveVersion, newEffectiveVersion, vmBaseId, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContext()<START_MOD>,<END_MOD> updateParameters); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getVdsGroupDao().get(vds.getVdsGroupId()); java.lang.Integer cores = org.ovirt.engine.core.bll.scheduling.SlaValidator.getEffectiveCpuCores(vds, ((cluster != null) && (cluster.getCountThreadsAsCores()))); if ((cores != null) && ((vm.getNumOfCpus()) > cores)) { messages.addMessage(vds.getId(), <START_MOD>EngineMessages<END_MOD>.VAR__DETAIL__NOT_ENOUGH_CORES.toString()); org.ovirt.engine.core.bll.scheduling.policyunits.CPUPolicyUnit.log.debug( '{}' has less cores ({}) than vm cores ({}) vds.getName(), cores, vm.getNumOfCpus()); continue; } list.add(vds); } return list; }
public void signOut() { for (org.ovirt.engine.ui.uicommonweb.models.SearchableListModel listModel : getItems()) { listModel.stopRefresh(); } getEventList().stopRefresh(); getAlertList().stopRefresh(); getTaskList().stopRefresh(); getBookmarkList().stopRefresh(); getRoleListModel().stopRefresh(); getSystemPermissionListModel().stopRefresh(); getClusterPolicyListModel().stopRefresh(); if (org.ovirt.engine.ui.frontend.Frontend.getInstance().getIsUserLoggedIn()) { org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setHandleFailure(true); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { } }; setLoggedInUser(null); getSignedOutEvent().raise(this, EventArgs.<START_MOD>empty<END_MOD>); org.ovirt.engine.ui.frontend.Frontend.getInstance().logoffAsync(org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoggedInUser(), _asyncQuery); } }
public static org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD> forValue(int value) { return org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.values()[value]; }
<START_MOD>public org.ovirt.engine.ui.uicommonweb.UICommand getRequestConsoleKeysCommand() { return requestConsoleKeysCommand; }<END_MOD>
<START_MOD>public void addDevice(org.ovirt.engine.core.common.businessentities.VmDevice device) { addedDevices.add(device); }<END_MOD>
<START_MOD>@<END_MOD>org.<START_MOD>junit<END_MOD>.<START_MOD>Test<END_MOD> <START_MOD>public void shouldAddCluster<END_MOD>() { <START_MOD>arem<END_MOD>.<START_MOD>onClusterDeleted(vdsGroup2); arem<END_MOD>.<START_MOD>refresh<END_MOD>(); <START_MOD>verify(arem, never())<END_MOD>.<START_MOD>migrateVM<END_MOD>(<START_MOD>eq(vm2)<END_MOD>); <START_MOD>arem.onClusterAdded<END_MOD>(<START_MOD>vdsGroup2<END_MOD>)<START_MOD>; arem<END_MOD>.<START_MOD>refresh<END_MOD>(); <START_MOD>verify<END_MOD>(<START_MOD>arem<END_MOD>).<START_MOD>migrateVM<END_MOD>(<START_MOD>eq(vm2<END_MOD>)); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Disk disk) { validateParameters(disk, "provisionedSize|size", "format", "interface"); org.ovirt.engine.<START_MOD>api.restapi.resource.validation.ValidatorLocator.getValidator(org.ovirt.engine.api.model.Disk.class).validateEnums(disk); org.ovirt.engine.<END_MOD>core.common.action.AddDiskParameters params = new org.ovirt.engine.core.common.action.AddDiskParameters(); params.setDiskInfo(getMapper(org.ovirt.engine.api.model.Disk.class, org.ovirt.engine.api.model.Disk.class).map(disk, null)); if (((disk.isSetStorageDomains()) && (disk.getStorageDomains().isSetStorageDomains())) && (disk.getStorageDomains().getStorageDomains().get(0).isSetId())) { params.setStorageDomainId(org.ovirt.engine.core.compat.Guid.createGuidFromString(disk.getStorageDomains().getStorageDomains().get(0).getId())); } else if ((disk.isSetStorageDomains()) && (disk.getStorageDomains().getStorageDomains().get(0).isSetName())) { params.setStorageDomainId(getEntity(org.ovirt.engine.core.common.businessentities.storage_domains.class, SearchType.StorageDomain, ( name= + (disk.getStorageDomains().getStorageDomains().get(0).getName()))).getId()); } return performCreation(VdcActionType.AddDisk, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetDiskByDiskId, org.ovirt.engine.core.common.queries.GetDiskByDiskIdParameters.class)); }
public static void GetAllVmTemplates(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.TemplateConverter(); org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.VdcQueryParametersBase params = new org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.VdcQueryParametersBase(); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllVmTemplates, params, aQuery); }
<START_MOD>public void setGluster37Support(boolean value) { vdsDynamic.setGluster37Support(value); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.<START_MOD>ClearDismissedAuditLogsBySeverityCommand<END_MOD>.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_CLEAR_ALL_DISMISSED_AUDIT_LOG : org.ovirt.engine.core.common.AuditLogType.USER_CLEAR_ALL_DISMISSED_AUDIT_LOG_FAILED; }
public java.util.Map<java.lang.String, java.util.List<java.util.Map<java.lang.String, java.lang.String>>> getHBAs() { return mVdsDynamic.getHBAs(); }
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult diskImagesHaveNoDerivedDisks(org.ovirt.engine.core.compat.Guid storageDomainId) { java.util.List<java.lang.String> disksInfo = null; for (org.ovirt.engine.core.common.businessentities.DiskImage diskImage : diskImages) { if (((diskImage.getVmEntityType()) != null) && (diskImage.getVmEntityType().isTemplateType())) { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> basedDisks = getDiskImageDAO().getAllSnapshotsForParent(diskImage.getImageId()); for (org.ovirt.engine.core.common.businessentities.DiskImage basedDisk : basedDisks) { if ((storageDomainId == null) || (basedDisk.getStorageIds().contains(storageDomainId))) { if (disksInfo == null) { disksInfo = new java.util.LinkedList<>(); } disksInfo.add(java.lang.String.format("%s (%s) ", basedDisk.getDiskAlias(), basedDisk.getId())); } } } } if (disksInfo != null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DETECTED_DERIVED_DISKS, java.lang.String.format("$disksInfo %s", java.lang.String.format(org.apache.commons.lang.StringUtils.join(disksInfo, "%n")))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
public void <START_MOD>setIsLocal<END_MOD>(<START_MOD>boolean<END_MOD> <START_MOD>isLocal<END_MOD>) { <START_MOD>this.isLocal<END_MOD> = <START_MOD>isLocal<END_MOD>; }
<START_MOD>private void expandTree(com.google.gwt.user.cellview.client.TreeNode node) { if (node == null) { return; } for (int i = 0; i < (node.getChildCount()); i++) { expandTree(node.setChildOpen(i, true)); } }<END_MOD>
<START_MOD>@org.junit.Before public void setUp() { host = createHost(); org.mockito.Mockito.when(vdsDao.get(org.ovirt.engine.core.bll.host.util.HostIdToLoggableNameFunctionTest.hostId)).thenReturn(host); }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("Node:") java.lang.String numaNodeLabel();<END_MOD>
public void Manage() { if ((getWindow()) != null) { return; } org.ovirt.engine.core.compat.Guid storagePoolId = ((getEntity().getstorage_pool_id()) != null) ? getEntity().getstorage_pool_id().getValue() : org.ovirt.engine.core.compat.NGuid.Empty; org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkListModel clusterNetworkListModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkListModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> dcNetworks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>>) (result)); org.ovirt.engine.ui.uicommonweb.models.ListModel networkToManage = createNetworkList(dcNetworks); clusterNetworkListModel.setWindow(networkToManage); networkToManage.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().assignDetachNetworksTitle()); networkToManage.setHashName("assign_networks"); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetNetworkList(_asyncQuery, storagePoolId); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Directory should not contain any space java.lang.String invalidBrickDirectoryContainsSpaceMsg();
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.<START_MOD>validator.HostValidator<END_MOD> validator = new org.ovirt.engine.core.bll.<START_MOD>validator.HostValidator<END_MOD>(org.ovirt.engine.core.bll.ActivateVdsCommand.getVds()); return ((validate(validator.exists())) && (validate(validator.validateStatusForActivation()))) && (validate(validator.validateUniqueId())); }
public static java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> GetClusterNetworkList(org.ovirt.engine.core.compat.Guid clusterId) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllNetworksByClusterId, new org.ovirt.engine.core.common.queries.VdsGroupQueryParamenters(clusterId)); if (((returnValue != null) && (returnValue.getSucceeded())) && ((returnValue.getReturnValue()) != null)) { return ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>>) (returnValue.getReturnValue())); } return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>>(); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.storage.LUNs)) { return false; } org.ovirt.engine.core.common.businessentities.storage.LUNs other = ((org.ovirt.engine.core.common.businessentities.storage.LUNs) (obj)); return ((((((((((((((((((<START_MOD>((<END_MOD>java.util.Objects.equals(id, other.id)) && (java.util.Objects.equals(_lunConnections, other._lunConnections))) && (java.util.Objects.equals(lunMapping, other.lunMapping))) && (java.util.Objects.equals(physicalVolumeId, other.physicalVolumeId))) && ((deviceSize) == (other.deviceSize))) && ((pvSize) == (other.pvSize))) && (<START_MOD>java.util.Objects.equals(discardMaxBytes, other.discardMaxBytes))) && (java.util.Objects.equals(discardZeroesData, other.discardZeroesData))) && (<END_MOD>(lunType) == (other.lunType))) && (java.util.Objects.equals(pathsDictionary, other.pathsDictionary))) && (java.util.Objects.equals(pathsCapacity, other.pathsCapacity))) && (java.util.Objects.equals(vendorName, other.vendorName))) && (java.util.Objects.equals(productId, other.productId))) && (java.util.Objects.equals(serial, other.serial))) && (java.util.Objects.equals(vendorId, other.vendorId))) && (java.util.Objects.equals(volumeGroupId, other.volumeGroupId))) && (java.util.Objects.equals(status, other.status))) && (java.util.Objects.equals(diskId, other.diskId))) && (java.util.Objects.equals(diskAlias, other.diskAlias))) && (java.util.Objects.equals(storageDomainId, other.storageDomainId))) && (java.util.Objects.equals(storageDomainName, other.storageDomainName)); }
@java.lang.Override protected org.ovirt.engine.api.model.Template doPopulate(org.ovirt.engine.api.model.Template model, org.ovirt.engine.core.common.businessentities.VmTemplate entity) { if (!(model.isSetConsole())) { model.setConsole(new org.ovirt.engine.api.model.Console()); } model.getConsole().setEnabled((!(getConsoleDevicesForEntity(entity.getId()).isEmpty()))); if (!(model.isSetVirtioScsi())) { model.setVirtioScsi(new org.ovirt.engine.api.model.VirtIOSCSI()); } model.getVirtioScsi().setEnabled(org.ovirt.engine.api.restapi.util.VmHelper.<START_MOD>hasVirtioScsiControllers(this, <END_MOD>entity.getId())); java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> rngDevices = getRngDevices(entity.getId()); if ((rngDevices != null) && (!(rngDevices.isEmpty()))) { model.setRngDevice(org.ovirt.engine.api.restapi.types.RngDeviceMapper.map(rngDevices.get(0), null)); } return model; }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel storageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (target)); org.ovirt.engine.ui.uicommonweb.models.storage.StorageModelBehavior storageModelBehavior = behavior; java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>) (returnValue)); dataCenters = storageModelBehavior.filterDataCenter(dataCenters); org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel.addEmptyDataCenterToList(dataCenters); org.ovirt.engine.core.common.businessentities.StoragePool oldSelectedItem = storageModel.getDataCenter().getSelectedItem(); storageModel.getDataCenter().setItems(dataCenters); if (oldSelectedItem != null) { storageModel.getDataCenter().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(dataCenters, new org.ovirt.engine.ui.uicommonweb.Linq.<START_MOD>IdPredicate<END_MOD>(oldSelectedItem.getId()))); } else { storageModel.getDataCenter().setSelectedItem(((getStorage()) == null ? org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(dataCenters) : org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(dataCenters, new org.ovirt.engine.ui.uicommonweb.Linq.<START_MOD>IdPredicate<END_MOD>(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel.UnassignedDataCenterId)))); } }
private void InitVdsBroker() { org.ovirt.engine.core.vdsbroker.VdsManager.log.infoFormat( vdsBroker ({0},{1}) _vds.getHostName(), _vds.getPort()); int clientTimeOut = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.vdsTimeout)) * 1000; int connectionTimeOut = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.vdsConnectionTimeout)) * 1000; int clientRetries = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.vdsRetries); if ((_vds.getPort()) == (JSONRPC_PORT)) { _vdsProxy = new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer(org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.<START_MOD>createStompClient<END_MOD>(_vds.getHostName(), <START_MOD>61613, connectionTimeOut, clientTimeOut, clientRetries, org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EncryptHostCommunication))); } else { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerConnector, org.apache.commons.httpclient.HttpClient> returnValue = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcUtils.getConnection(_vds.getHostName(), <END_MOD>_vds.getPort(), <START_MOD>clientTimeOut, <END_MOD>connectionTimeOut, clientRetries, org.ovirt.engine.core.<START_MOD>vdsbroker.vdsbroker.VdsServerConnector.class, org.ovirt.engine.core.<END_MOD>common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EncryptHostCommunication))<START_MOD>; _vdsProxy = new org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerWrapper(returnValue.getFirst(), returnValue.getSecond()<END_MOD>); } }
<START_MOD>@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__DISABLE_GLUSTER_HOOK); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_HOOK); }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.<START_MOD>Integer<END_MOD> returnValue) { maxSpmPriority = returnValue; InitSpmPriorities1(); }
<START_MOD>@org.junit.Test public void testAllDomainsHaveSpaceForNewDisksSuccess() { setUpGeneralValidations(); setUpDiskValidations(); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList = org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommandTest.getNonEmptyDiskList(); doReturn(disksList).when(cmd).getDisksList(); doReturn(ValidationResult.VALID).when(multipleStorageDomainsValidator).allDomainsHaveSpaceForNewDisks(disksList); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionSuccess(cmd); verify(multipleStorageDomainsValidator).allDomainsHaveSpaceForNewDisks(disksList); }<END_MOD>
public java.util.Collection<java.lang.String> getReasonMessages() { java.util.List<java.lang.String> lines = new java.util.ArrayList<>(); for (java.util.Map.Entry<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>, java.lang.String>> line : filteredOutReasons.entrySet()) { lines.add(line.getValue().getFirst().name()); lines.add(java.lang.String.format( %2$s "hostName", hostNames.get(line.getKey()))); lines.add(java.lang.String.format( %2$s "filterName", line.getValue().getSecond())); final java.util.List<java.lang.String> detailMessages = details.getMessages(line.getKey()); if ((detailMessages == null) || (detailMessages.isEmpty())) { lines.add(<START_MOD>EngineMessages<END_MOD>.SCHEDULING_HOST_FILTERED_REASON.name()); } else { lines.addAll(detailMessages); lines.add(<START_MOD>EngineMessages<END_MOD>.SCHEDULING_HOST_FILTERED_REASON_WITH_DETAIL.name()); } } return lines; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( to create new Cluster java.lang.String allowToCreateNewClusterRoleTreeTooltip();
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.VmPool pool) { validateParameters(pool, "name", "template.id|name", "cluster.id|name"); org.ovirt.engine.core.common.businessentities.VmTemplate template = getVmTemplate(pool); if (namedTemplate(pool)) { pool.getTemplate().setId(template.getId().toString()); } if (namedCluster(pool)) { pool.getCluster().setId(getClusterId(pool)); } org.ovirt.engine.core.common.businessentities.VmPool entity = map(pool); entity.setVmPoolType(VmPoolType.Automatic); org.ovirt.engine.core.common.businessentities.VM vm = mapToVM(pool, template); int size = (pool.isSetSize()) ? pool.getSize() : 1; org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters params = new org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters(entity, vm, size, (-1)); params.setConsoleEnabled((!(getConsoleDevicesForEntity(template.getId()).isEmpty()))); params.setVirtioScsiEnabled((!(org.ovirt.engine.api.restapi.util.VmHelper.getInstance().getVirtioScsiControllersForEntity(template.getId()).isEmpty()))); <START_MOD>params.setSoundDeviceEnabled((!(org.ovirt.engine.api.restapi.util.VmHelper.getInstance().getSoundDevicesForEntity(template.getId()).isEmpty()))); <END_MOD>return performCreate(VdcActionType.AddVmPoolWithVms, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetVmPoolById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
<START_MOD>@java.lang.Override public void init(final org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepSessionDetailsModel model) { super.init(model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs e = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)); if (e.propertyName.equalsIgnoreCase("selectedSessionSummaryRow")) { org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionDetails selectedSessionDetail = model.getGeoRepSessionSummary().getSelectedItem().getEntity(); getView().setCheckPointCompletedAtVisibility(selectedSessionDetail.isCheckpointCompleted()); getView().updateSessionDetailProperties(selectedSessionDetail); } } }); }<END_MOD>
<START_MOD>@java.lang.Override protected boolean canDoAction() { serverService = getGlusterServerServiceDao().get(getParameters().getServerServiceId()); if ((serverService) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_SERVER_SERVICE_NOT_FOUND); } if ((serverService.getStatus()) == (org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand.manageActionDetailsMap.get(getParameters().getActionType()).getStatus())) { addCanDoActionMessage(org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand.manageActionDetailsMap.get(getParameters().getActionType()).getStatusMsg()); addCanDoActionMessage(java.lang.String.format("$server %1$s", serverService.getHostName())); addCanDoActionMessage(java.lang.String.format("$service %1$s", serverService.getServiceName())); return false; } return true; }<END_MOD>
private void UpdateActionAvailability() { getCopyCommand().setIsExecutionAllowed(((((getSelectedItems()) != null) && ((getSelectedItems().size()) > 0)) && (isCopyCommandAvailable()))); org.ovirt.engine.ui.uicommonweb.models.<START_MOD>quota<END_MOD>.<START_MOD>ChangeQuotaModel.updateChangeQuotaActionAvailability<END_MOD>(<START_MOD>this<END_MOD>); }
private void unplugFromExternalNetwork() { org.ovirt.engine.core.bll.network.ExternalNetworkManager<START_MOD>.create<END_MOD>(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic(), getNetwork()).deallocateIfExternal(); }
@java.lang.Override public final void freeMacs(java.util.List<java.lang.String> macs) { java.util.List<java.lang.String> macsToRelease = filterOutUnusedMacs(macs); if (macsToRelease.isEmpty()) {<START_MOD> org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.log.warn( to release with empty collection as parameter. } else { org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.TransactionalStrategyState strategyForMacRelease =<END_MOD> getStrategyForMacRelease()<START_MOD>; org.ovirt.engine.core.bll.network.macpool.TransactionalMacPoolDecorator.log.debug( {} as release strategy strategyForMacRelease); strategyForMacRelease<END_MOD>.releaseMacsOnCommit(macsToRelease); } }
@java.lang.Override protected void <START_MOD>executeVmCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = runHibernateBrokerVDSCommand();<END_MOD> if (<START_MOD>retVal.getSucceeded()) { vmManager.succededToHibernate();<END_MOD> org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVDSReturnValue().setSucceeded(<START_MOD>true); } else { log.errorFormat( to hibernate vm '{0}' in vds = {1} : error = {2} org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getParameters().getVmId(), org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getParameters().getVdsId(), retVal.getExceptionString()); org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVDSReturnValue().setSucceeded(<END_MOD>false); <START_MOD>org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVDSReturnValue().setExceptionString(<END_MOD>retVal.getExceptionString()); org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVDSReturnValue().setExceptionObject(retVal.getExceptionObject()); org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVDSReturnValue().setVdsError(retVal.getVdsError()); } }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.<START_MOD>QueryParametersBase<END_MOD> <START_MOD>queryParametersBase<END_MOD>, org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { <START_MOD>queryParametersBase<END_MOD>.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, <START_MOD>queryParametersBase<END_MOD>, asyncCallback); setIsQueryFirstTime(false); }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(getName()).append( {id=").append(getId()).append(", description=").append(getDescription()).append(", comment=").append(getComment()).append(", subnet=").append(getSubnet()).append(", gateway=").append(getGateway()).append(", type=").append(getType()).append(", vlanId=").append(getVlanId()).append(", stp=").append(getStp()).append(", dataCenterId=").append(getDataCenterId()).append(", mtu=").append(getMtu()).append(", vmNetwork=").append(isVmNetwork()).append(", cluster=").append(getCluster()).append(", providedBy=").append(getProvidedBy()).append(", label=").append(getLabel()).append("<START_MOD>, qos=").append(getQos()).append("<END_MOD>} return builder.toString(); }
<START_MOD>@org.junit.Test public void testWithNullChildObjects() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails volDetailsEntity = new org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails(); volDetailsEntity.setBrickDetails(getBrickDetails(1, 0, 0)); volDetailsEntity.getBrickDetails().get(0).setClients(null); volDetailsEntity.getBrickDetails().get(0).setMemoryStatus(null); org.ovirt.engine.api.model.GlusterBrickAdvancedDetails model = org.ovirt.engine.api.restapi.types.GlusterBrickDetailMapper.map(volDetailsEntity, null); assertNotNull(model); assertNull(model.getClients()); assertEquals(model.getMntOptions(), volDetailsEntity.getBrickDetails().get(0).getBrickProperties().getMntOptions()); assertNull(model.getMemoryInfo()); }<END_MOD>
<START_MOD>@org.junit.Test public void testAdd() { try { javax.ws.rs.core.UriInfo uriInfo = mockUri("vms", "00000001-0001-0001-0001-000000000011", "disks"); javax.ws.rs.core.Request request = mockRequest("POST"); control.replay(); org.ovirt.engine.api.model.Fault fault = usageFinder.getUsageMessage(uriInfo, request); assertEquals("For correct usage, see: http://localhost:8080/ovirt-engine/api/model#services/vm-disks/methods/add", fault.getDetail()); } catch (java.lang.ClassNotFoundException | java.io.IOException | java.net.URISyntaxException e) { fail(); } }<END_MOD>
@java.lang.Override protected boolean canDoAction() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.Role oldRole = org.ovirt.engine.core.bll.UpdateRoleCommand.getRoleDao().get(org.ovirt.engine.core.bll.UpdateRoleCommand.getRole().getId()); if (oldRole == null) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ERROR_CANNOT_UPDATE_ROLE_ID); returnValue = false; } else { if (checkIfRoleIsReadOnly(org.ovirt.engine.core.bll.UpdateRoleCommand.getReturnValue().getCanDoActionMessages())) { returnValue = false; addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__UPDATE); } else if ((!(org.apache.commons.lang.StringUtils.equals(org.ovirt.engine.core.bll.UpdateRoleCommand.getRole().getName(), oldRole.getName()))) && ((org.ovirt.engine.core.bll.UpdateRoleCommand.getRoleDao().getByName(org.ovirt.engine.core.bll.UpdateRoleCommand.getRole().getName())) != null)) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NAME_ALREADY_USED); returnValue = false; } else if ((org.ovirt.engine.core.bll.UpdateRoleCommand.getRole().getType()) != (oldRole.getType())) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ERROR_CANNOT_UPDATE_ROLE_TYPE); returnValue = false; } } if (!returnValue) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__ROLE); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__UPDATE); } return returnValue; }
<START_MOD>@org.ovirt.engine.ui.common.DefaultStringValue("The selected snapshot's memory can't be properly restored since it was created in previous cluster version. Please confirm the memory shall be restored anyway.") java.lang.String snapshotContainsMemoryIncompatibleCluster();<END_MOD>
<START_MOD>@org.junit.Test public void testStoragePoolDoesntExist() { final int domainSizeGB = 20; final int sizeRequired = 5; org.ovirt.engine.core.bll.AddVmCommand<org.ovirt.engine.core.bll.AddVmParameters> cmd = setupCanAddVmTests(domainSizeGB, sizeRequired); doReturn(null).when(cmd).getStoragePool(); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST.toString())); }<END_MOD>
<START_MOD>@java.lang.Override public boolean isFloppySupported(int osId, org.ovirt.engine.core.compat.Version version) { return getBoolean(getValueByVersion(idToUnameLookup.get(osId), "devices.floppySupport", version), false); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.DeleteGlusterVolumeGeoRepSession, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeGeoRepSessionVDSParameters(upServer.getId(), getGeoRepSession().getMasterVolumeName(), getGeoRepSession().getSlaveHostName(), getGeoRepSession().getSlaveVolumeName())); setSucceeded(returnValue.getSucceeded()); if (getSucceeded()) { getGlusterGeoRepDao().remove(getGeoRepSession().getId()); } else { handleVdsError(AuditLogType.GEOREP_SESSION_DELETE_FAILED, returnValue.getVdsError().getMessage()); return; } }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Content java.lang.String viewContentGlusterHookTitle();
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.SchedulingPolicyUnit.class, to = org.ovirt.engine.core.common.scheduling.PolicyUnit.class) public static org.ovirt.engine.core.common.scheduling.PolicyUnit map(org.ovirt.engine.api.model.SchedulingPolicyUnit model, org.ovirt.engine.core.common.scheduling.PolicyUnit template) { org.ovirt.engine.core.common.scheduling.PolicyUnit entity = (template != null) ? template : new org.ovirt.engine.core.common.scheduling.PolicyUnit(); if (model.isSetId()) { entity.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(model.getId())); } if (model.isSetName()) { entity.setName(model.getName()); } if (model.isSetDescription()) { entity.setDescription(model.getDescription()); } if (model.isSetType()) { entity.setPolicyUnitType(org.ovirt.engine.core.common.scheduling.PolicyUnitType.valueOf(model.getType().toUpperCase())); } if (model.isSetEnabled()) { entity.setEnabled(model.isEnabled()); } if (model.isSetInternal()) { entity.setInternal(model.isInternal()); } if (model.isSetRegexValidationMap()) { entity.setParameterRegExMap(org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.toMap(model.getRegexValidationMap())); } return entity; }<END_MOD>
private org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilderBase createBuilder() { if (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())) { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmOldInfoBuilder(vm, createInfo); } else { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder(vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getParameters().getVdsId(), createInfo); } }
private void <START_MOD>handlePartiallyCompletedTask<END_MOD>(final org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>SPMAsyncTask<END_MOD> task) { org.ovirt.engine.core.<START_MOD>utils<END_MOD>.<START_MOD>threadpool<END_MOD>.<START_MOD>ThreadPoolUtil<END_MOD>.<START_MOD>execute<END_MOD>(<START_MOD>new<END_MOD> <START_MOD>java.lang.Runnable()<END_MOD> { <START_MOD>@java<END_MOD>.<START_MOD>lang.SuppressWarnings<END_MOD>(<START_MOD>"synthetic-access"<END_MOD>) <START_MOD>@java.lang.Override<END_MOD> <START_MOD>public void run<END_MOD>() { org.ovirt.engine.core.<START_MOD>utils<END_MOD>.<START_MOD>transaction<END_MOD>.<START_MOD>TransactionSupport<END_MOD>.<START_MOD>executeInNewTransaction<END_MOD>(new org.ovirt.engine.core.<START_MOD>utils<END_MOD>.<START_MOD>transaction<END_MOD>.<START_MOD>TransactionMethod<java.lang.Object><END_MOD>()<START_MOD> { @java.lang.Override public java.lang.Object runInTransaction() { task.stopTask(true); task.clearAsyncTask(true); return null; } }<END_MOD>); }<START_MOD> }); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VDSGroup object) { return object.getname(); }<END_MOD>
private void addReportedIpConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { if (!(isPrimaryAddressExist())) { return; } org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol definedBootProtocol = getPrimaryAddress().getBootProtocol(); result.add(ReportedConfigurationType.BOOT_PROTOCOL, iface.<START_MOD>getIpv4BootProtocol<END_MOD>(), definedBootProtocol); if ((definedBootProtocol == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) && ((iface.<START_MOD>getIpv4BootProtocol<END_MOD>()) == definedBootProtocol)) { result.add(ReportedConfigurationType.NETMASK, iface.<START_MOD>getIpv4Subnet<END_MOD>(), getPrimaryAddress().getNetmask(), isNetworkSubnetInSync()); result.add(ReportedConfigurationType.IP_ADDRESS, iface.<START_MOD>getIpv4Address(), getPrimaryAddress().<END_MOD>getAddress()); result.add(ReportedConfigurationType.GATEWAY, iface.<START_MOD>getIpv4Gateway(), getPrimaryAddress().<END_MOD>getGateway()); } }
<START_MOD>private void logStorageDeviceMessage(org.ovirt.engine.core.common.AuditLogType logType, org.ovirt.engine.core.common.businessentities.VDS vds, final org.ovirt.engine.core.common.businessentities.gluster.StorageDevice device) { logUtil.logAuditMessage(vds.getVdsGroupId(), null, vds, logType, new java.util.HashMap<java.lang.String, java.lang.String>() { { put("storageDevice", device.getName()); } }); }<END_MOD>
public static java.util.List<java.lang.String> runAndAssertCanDoActionFailure(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.errors.VdcBllMessages message) { assertFalse( canDoAction expected to fail, but succeeded <START_MOD>command.<END_MOD>canDoAction()); return <START_MOD>org.ovirt.engine.core.bll.CanDoActionTestUtils.assertCanDoActionMessages(command, message)<END_MOD>; }
@java.lang.Override <START_MOD>protected<END_MOD> void <START_MOD>performBootstrap<END_MOD>() { super.<START_MOD>performBootstrap<END_MOD>(); com.google.gwt.user.client.Window.setTitle(dynamicMessages.applicationTitle()); org.ovirt.engine.ui.webadmin.uimode.UiModeData uiModeData = org.ovirt.engine.ui.webadmin.uimode.UiModeData.instance(); if (uiModeData != null) { handleUiMode(uiModeData); } org.ovirt.engine.ui.webadmin.plugin.restapi.EngineSessionTimeoutData engineSessionTimeoutData = org.ovirt.engine.ui.webadmin.plugin.restapi.EngineSessionTimeoutData.instance(); if (engineSessionTimeoutData != null) { restApiSessionManager.setSessionTimeout(engineSessionTimeoutData.getValue()); } placeManager.revealCurrentPlace(); }
@java.lang.Override protected void perform() { java.lang.String iface = null; int index = 0; if (org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getCompatibilityVersion().greaterOrEquals(Version.v4_0)) { iface = <START_MOD>vmDeviceUtils.getCdInterface(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm()); index = org.ovirt.engine.core.common<END_MOD>.utils.<START_MOD>VmDeviceCommonUtils.getCdDeviceIndex(iface); } cdImagePath = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.cdPathWindowsToLinux(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getParameters().getCdImagePath(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getRunOnVds()); setActionReturnValue(runVdsCommand(VDSCommandType.ChangeDisk, new org.ovirt.engine.core.common.vdscommands.ChangeDiskVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVdsId(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getId(), iface,<END_MOD> index<START_MOD>, cdImagePath)).getReturnValue()); org.ovirt.engine.core.bll.VmHandler.updateCurrentCd(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVdsId(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getParameters().getCdImagePath()); org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.setSucceeded(true<END_MOD>); }
<START_MOD>private boolean isMatchePath(java.lang.String[] linkPathSegments, java.util.List<javax.ws.rs.core.PathSegment> uriPathSegments) { for (int i = 0; i < (linkPathSegments.length); i++) { java.lang.String uriPathSegment = uriPathSegments.get(i).getPath(); if ((isUUID(uriPathSegment)) || (uriPathSegment.equals(linkPathSegments[i]))) { continue; } else { return false; } } return true; }<END_MOD>
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(EntityModel.entityChangedEventDefinition)) <START_MOD>{ if (sender == (getIsWipeAfterDelete())) { wipeAfterDelete_EntityChanged(args); } else if (sender == (getIsAttachDisk())) { attachDisk_EntityChanged(args); } else if (sender == (getIsReadOnly())) { updateSgIoUnfilteredChangeability(); } else if (sender == (getIsSgIoUnfiltered())) { updateReadOnlyChangeability(); } else if (sender == (getIsInternal())) { isInternal_EntityChanged(); } } else if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) <END_MOD>&& (sender == (<START_MOD>getVolumeType()))) { volumeType_SelectedItemChanged(); } else if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition<END_MOD>)) && (sender == (<START_MOD>getDiskInterface()))) { DiskInterface_SelectedItemChanged(<END_MOD>); } else if ((ev.matchesDefinition(ListModel.<START_MOD>selectedItemChangedEventDefinition<END_MOD>)) && (sender == (<START_MOD>getDataCenter()))) { datacenter_SelectedItemChanged<END_MOD>(); } else if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (<START_MOD>getStorageDomain()))) { storageDomain_SelectedItemChanged(); } else if ((ev.matchesDefinition(org.ovirt.engine.ui.frontend.Frontend.getInstance().getQueryStartedEventDefinition()<END_MOD>)) && (<START_MOD>org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(org.ovirt.engine.ui.frontend.Frontend.getInstance().getCurrentContext(), getHash()))) { frontend_QueryStarted(); } else if ((ev.matchesDefinition(org.ovirt.engine.ui.frontend.Frontend.getInstance().getQueryCompleteEventDefinition()<END_MOD>)) && (<START_MOD>org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual<END_MOD>(org.ovirt.engine.ui.frontend.Frontend.getInstance().getCurrentContext(), getHash()))) { frontend_QueryComplete(); } }
private void nameNotChangedOrNotTakenTest(org.hamcrest.Matcher<org.ovirt.engine.core.bll.ValidationResult> matcher) { org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS otherQos = new org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS(); allQos.add(otherQos); allQos.add(oldQos); otherQos.setName("foo"); oldQos.setName("bar"); assertThat(validator.nameNotChangedOrNotTaken(), matcher); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getVmPoolDao(); vmDao = dbFacade.getVmDao(); existingVmPool = dao.get(org.ovirt.engine.core.dao.VmPoolDAOTest.EXISTING_VM_POOL_ID); deletableVmPool = dao.get(org.ovirt.engine.core.dao.VmPoolDAOTest.DELETABLE_VM_POOL_ID); newVmPool = new org.ovirt.engine.core.common.businessentities.VmPool(); newVmPool.setName( VM Pool newVmPool.setVmPoolDescription( is a new VM pool. newVmPool.setVdsGroupId(org.ovirt.engine.core.dao.VmPoolDAOTest.VDS_GROUP_ID); <START_MOD>newVmPool.setVmtGuid(org.ovirt.engine.core.dao.VmPoolDAOTest.POOL_TEMPLATE_ID); <END_MOD>newVmPoolMap = new org.ovirt.engine.core.common.businessentities.VmPoolMap(org.ovirt.engine.core.dao.VmPoolDAOTest.FREE_VM_ID, org.ovirt.engine.core.dao.VmPoolDAOTest.EXISTING_VM_POOL_ID); }
@org.junit.Test public void portIsInvalid() { assertThat(validator.portIsValid(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VDS_WITH_INVALID_SSH_PORT)); }
public void install() { final org.ovirt.engine.core.common.businessentities.VDS host = ((org.ovirt.engine.core.common.businessentities.VDS) (getSelectedItem())); org.ovirt.engine.ui.uicommonweb.models.hosts.InstallModel model = new org.ovirt.engine.ui.uicommonweb.models.hosts.InstallModel(); model.setVds(host); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().installHostTitle()); model.setHelpTag(HelpTag.install_host); model.setHashName("install_host"); model.getOVirtISO().setIsAvailable(false); model.getOverrideIpTables().setIsAvailable(false); model.getHostVersion().setEntity(host.getHostOs()); model.getHostVersion().setIsAvailable(false); getWindow().startProgress(null); model.getUserPassword().setIsAvailable(true); model.getUserPassword().setIsChangable(true); org.ovirt.engine.core.compat.Version v3 = new org.ovirt.engine.core.compat.Version(3, 0); boolean isLessThan3 = (host.getVdsGroupCompatibilityVersion().compareTo(v3)) < 0; if (!isLessThan3) { model.getOverrideIpTables().setIsAvailable(true); model.getOverrideIpTables().setEntity(true); } addInstallCommands(model, host, false); getWindow().stopProgress(); }
public org.ovirt.engine.core.common.businessentities.VmInit buildCloudInitParameters() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); if (getHostnameEnabled()) { vmInit.setHostname(((java.lang.String) (getHostname().getEntity()))); } if (getRootPasswordEnabled()) { vmInit.setRootPassword(((java.lang.String) (getRootPassword().getEntity()))); } if (getAuthorizedKeysEnabled()) { vmInit.setAuthorizedKeys(((java.lang.String) (getAuthorizedKeys().getEntity()))); } if (((java.lang.Boolean) (getRegenerateKeysEnabled().getEntity()))) { vmInit.setRegenerateKeys(java.lang.Boolean.TRUE); } if (((java.lang.Boolean) (getNetworkEnabled().getEntity()))) { saveNetworkFields(); if (!(networkMap.isEmpty())) { for (java.util.Map.Entry<java.lang.String, org.ovirt.engine.core.common.businessentities.VmInitNetwork> entry : networkMap.entrySet()) { org.ovirt.engine.core.common.businessentities.VmInitNetwork params = entry.getValue(); if ((params.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.DHCP)) { params.setIp(null); params.setNetmask(null); params.setGateway(null); } params.setStartOnBoot(networkStartOnBoot.contains(entry.getKey())); params.setName(entry.getKey()); } vmInit.setNetworks(new java.util.ArrayList(networkMap.values())); } } vmInit.setDnsServers(((java.lang.String) (getDnsServers().getEntity()))); vmInit.setDnsSearch(((java.lang.String) (getDnsSearchDomains().getEntity()))); vmInit.setCustomScript(((java.lang.String) (getCustomScript().getEntity()))); <START_MOD>vmInit.setPasswordSet(((java.lang.Boolean) (getPasswordSet().getEntity()))); <END_MOD>return vmInit; }
private <T> T execute(java.util.concurrent.Callable<T> callable) { try { return callable.call(); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { executeFailedMessages.add(<START_MOD>EngineErrors<END_MOD>.CINDER_ERROR.name()); executeFailedMessages.add(java.lang.String.format( %1$s e.getMessage())); throw e; } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }
<START_MOD>private void addQosData(java.lang.String qosEntryName, java.lang.Integer average, java.lang.Integer peak, java.lang.Integer burst) { if ((average != null) && (average > 0)) { java.util.Map<java.lang.String, java.lang.String> qosData = new java.util.HashMap<>(); qosData.put(VdsProperties.QOS_AVERAGE, java.lang.String.valueOf((average * (org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper.MEGABITS_TO_KILOBYTES)))); qosData.put(VdsProperties.QOS_PEAK, java.lang.String.valueOf((peak * (org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper.MEGABITS_TO_KILOBYTES)))); qosData.put(VdsProperties.QOS_BURST, java.lang.String.valueOf((burst * (org.ovirt.engine.core.vdsbroker.vdsbroker.NetworkQosMapper.MEGABYTES_TO_KILOBYTES)))); map.put(qosEntryName, qosData); } }<END_MOD>
<START_MOD>private static java.util.Map<java.lang.String, java.lang.String> getStoragePoolIsoMap(org.ovirt.engine.core.compat.Guid storagePoolId) { java.util.Map<java.lang.String, java.lang.String> storageDomains = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domain : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().getAllForStoragePool(storagePoolId)) { if (((domain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Maintenance)) || ((domain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.MovingToMaintenance))) { storageDomains.put(domain.getstorage_id().toString(), "attached"); } else { storageDomains.put(domain.getstorage_id().toString(), StorageDomainStatus.Active.toString().toLowerCase()); } } return storageDomains; }<END_MOD>
private org.ovirt.engine.core.common.businessentities.storage.VolumeType getVolumeTypeForDomain() { if ((volumeTypeForDomain) == null) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdStatic = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainStaticDao().get(storageDomainId); volumeTypeForDomain = org.ovirt.engine.core.bll.<START_MOD>memory<END_MOD>.<START_MOD>MemoryUtils.storateDomainTypeToMemoryVolumeType<END_MOD>(sdStatic.getStorageType()); } return volumeTypeForDomain; }
public void remove() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<START_MOD><java.lang.String><END_MOD> model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<START_MOD><java.lang.String><END_MOD>(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeRolesTitle()); model.setHelpTag(HelpTag.remove_role); model.setHashName("remove_role"); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.Role role : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.Role>cast(getSelectedItems())) { list.add(role.getname()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnRemove", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
private void connectToConsoles() { java.lang.StringBuilder errorMessages = null; final java.util.List<org.ovirt.engine.core.common.businessentities.VM> list = getSelectedItems(); if ((list == null) || (list.isEmpty())) { return; } for (org.ovirt.engine.core.common.businessentities.VM vm : list) { try { consoleModelsCache.<START_MOD>getVmConsolesForVmId<END_MOD>(vm<START_MOD>.getId()<END_MOD>).connect(); } catch (org.ovirt.engine.ui.uicommonweb.models.VmConsoles e) { final java.lang.String errorMessage = e.getLocalizedErrorMessage(); if (errorMessage != null) { if (errorMessages == null) { errorMessages = new java.lang.StringBuilder(); } else { errorMessages.append("\r\n"); } errorMessages.append(vm.getName()).append( -   } } } if (errorMessages != null) { errorPopupManager.show(errorMessages.toString()); } }
@java.lang.Override public void validateEnums(org.ovirt.engine.api.model.VM vm) { if (vm.isSetType()) { validateEnum(org.ovirt.engine.api.model.VmType.class, vm.getType(), true); } if (vm.isSetUsb()) { usbValidator.validateEnums(vm.getUsb()); } if (vm.isSetOs()) { osValidator.validateEnums(vm.getOs()); } if (vm.isSetDisplay()) { displayValidator.validateEnums(vm.getDisplay()); } if (vm.isSetPlacementPolicy()) { placementPolicyValidator.validateEnums(vm.getPlacementPolicy()); } if (vm.<START_MOD>isSetCpu()) { cpuValidator.validateEnums(vm.getCpu()); } if (vm.<END_MOD>isSetPayloads()) { for (org.ovirt.engine.api.model.Payload payload : vm.getPayloads().getPayload()) { payloadValidator.validateEnums(payload); } } if ((vm.isSetInitialization()) && (vm.getInitialization().isSetConfiguration())) { configurationValidator.validateEnums(vm.getInitialization().getConfiguration()); } }
protected void setVirtioScsiController(org.ovirt.engine.api.model.VM model) { if (!(model.isSetVirtioScsi())) { model.setVirtioScsi(new org.ovirt.engine.api.model.VirtIOSCSI()); } model.getVirtioScsi().setEnabled(org.ovirt.engine.api.restapi.util.VmHelper.<START_MOD>hasVirtioScsiControllers<END_MOD>(<START_MOD>this, <END_MOD>new org.ovirt.engine.core.compat.Guid(model.getId()))); }
@java.lang.Override protected void performBootstrap() { super.performBootstrap(); com.google.gwt.user.client.Window.setTitle(dynamicMessages.applicationTitle()); <START_MOD>if<END_MOD> <START_MOD>(<END_MOD>org.ovirt.engine.ui.webadmin.uimode.UiModeData.<START_MOD>isAvailable<END_MOD>()) { handleUiMode(<START_MOD>org.ovirt.engine.ui.webadmin.uimode.UiModeData.getUiMode()<END_MOD>); } placeManager.revealCurrentPlace(); }
public boolean initGlusterHost(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterHostUUID, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(vds.getId())); if ((returnValue.getSucceeded()) && ((returnValue.getReturnValue()) != null)) { org.ovirt.engine.core.compat.Guid addedServerUuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(((java.lang.String) (returnValue.getReturnValue()))); if (hostUuidExists(vds, addedServerUuid)) { setNonOperational(vds, NonOperationalReason.GLUSTER_HOST_UUID_ALREADY_EXISTS, null); return false; } saveGlusterHostUuid(vds, addedServerUuid); } else { setNonOperational(vds, NonOperationalReason.GLUSTER_HOST_UUID_NOT_FOUND, null); return false; } refreshGlusterStorageDevices(vds); boolean ret = initGlusterPeerProcess(vds); glusterServerDao.updatePeerStatus(vds.getId(), (ret == true ? org.ovirt.engine.core.common.businessentities.gluster.PeerStatus.CONNECTED : org.ovirt.engine.core.common.businessentities.gluster.PeerStatus.DISCONNECTED)); <START_MOD>addGlusterWebhook(vds); <END_MOD>return ret; }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.StorageDomain storage = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().getForStoragePool(org.ovirt.engine.core.bll.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); if (storage == null) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); } if (((storage.getStatus()) == null) || ((storage.getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL); } if ((storage.getStorageDomainType()) != (org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport)) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); } if ((getVm()) == null) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_NOT_FOUND_ON_EXPORT_DOMAIN); } org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.RemoveVmFromImportExportCommand.getVmDao().get(org.ovirt.engine.core.bll.RemoveVmFromImportExportCommand.getVmId()); if ((vm != null) && ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked))) { if (org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.hasTasksForEntityIdAndAction(vm.getId(), VdcActionType.ExportVm)) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_DURING_EXPORT); } } return true; }
public org.ovirt.engine.core.vdsbroker.irsbroker.IIrsServer getIrsProxy() { if ((getmIrsProxy()) == null) { final org.ovirt.engine.core.common.businessentities.StoragePool storagePool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolDao().get(_storagePoolId); if ((storagePool.getStatus()) != (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Uninitialized)) { java.lang.String host = org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Suppress, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.String>() { @java.lang.Override public java.lang.String runInTransaction() { return gethostFromVds(); } }); if (host != null) { int clientTimeOut = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.vdsTimeout)) * 1000; int connectionTimeOut = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.vdsConnectionTimeout)) * 1000; int <START_MOD>heartBeat = (<END_MOD>org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.<START_MOD>vdsHeartBeat)) * 1000; int clientRetries = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.<END_MOD>vdsRetries); irsProxy = org.ovirt.engine.core.vdsbroker.jsonrpc.TransportFactory.createIrsServer(getProtocol(), host, getmIrsPort(), clientTimeOut, connectionTimeOut, clientRetries<START_MOD>, heartBeat<END_MOD>); runStoragePoolUpEvent(storagePool); } } } return getmIrsProxy(); }
@java.lang.Override protected boolean canDoAction() { <START_MOD>if<END_MOD> <START_MOD>(<END_MOD>super.canDoAction()<START_MOD>) { return false<END_MOD>;<START_MOD> }<END_MOD> oldPool = org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPoolDAO().get(org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPool().getVmPoolId()); if ((oldPool) == null) { <START_MOD>return failCanDoAction<END_MOD>(VdcBllMessages.VM_POOL_CANNOT_UPDATE_POOL_NOT_FOUND); } if ((org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getParameters().getVmsCount()) < 0) { <START_MOD>return failCanDoAction<END_MOD>(VdcBllMessages.VM_POOL_CANNOT_DECREASE_VMS_FROM_POOL); } return <START_MOD>true<END_MOD>; }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.businessentities.VDS getValue(S object) { if (object instanceof org.ovirt.engine.core.common.businessentities.VDS) { return ((org.ovirt.engine.core.common.businessentities.VDS) (object)); } if (object instanceof org.ovirt.engine.core.common.utils.PairQueryable) { if ((((org.ovirt.engine.core.common.utils.PairQueryable<?, ?>) (object)).getSecond()) instanceof org.ovirt.engine.core.common.businessentities.VDS) { return ((org.ovirt.engine.core.common.businessentities.VDS) (((org.ovirt.engine.core.common.utils.PairQueryable<?, ?>) (object)).getSecond())); } } return null; }<END_MOD>
<START_MOD>public void setClusterConfigOptions(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeSnapshotConfigModel>> clusterConfigOptions) { this.clusterConfigOptions = clusterConfigOptions; }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeBrickAdd(java.lang.String volumeName, java.lang.String[] bricks, int replicaCount, int stripeCount, boolean force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.addBrick").withParameter("volumeName", volumeName).withParameter("brickList", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(bricks))).withParameter("replicaCount", replicaCount).withParameter("stripeCount", stripeCount).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
private void initListerners(final org.ovirt.engine.ui.uicommonweb.models.storage.DisksAllocationModel model) { model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { if ("Disks".equals(<START_MOD>args<END_MOD>.propertyName)) { addDiskList(model); } else if ("QuotaEnforcmentType".equals(<START_MOD>args<END_MOD>.propertyName)) { updateColumnsAvailability(model); updateListHeader(model); } } }); }
<START_MOD>protected org.ovirt.engine.core.common.businessentities.StorageDomain electNewMaster(boolean duringReconstruct, boolean selectInactiveWhenNoActiveUnknownDomains) { org.ovirt.engine.core.common.businessentities.StorageDomain newMaster = null; org.ovirt.engine.core.common.businessentities.StorageDomain suggestedInactiveDomain = null; if ((getStoragePool()) != null) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomainDAO().getAllForStoragePool(getStoragePool().getId()); java.util.Collections.sort(storageDomains, org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.LastTimeUsedAsMasterComp.instance); if ((storageDomains.size()) > 0) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomain(); for (org.ovirt.engine.core.common.businessentities.StorageDomain dbStorageDomain : storageDomains) { if (((storageDomain == null) || (duringReconstruct || (!(dbStorageDomain.getId().equals(storageDomain.getId()))))) && ((dbStorageDomain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Data))) { if (((dbStorageDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active)) || ((dbStorageDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Unknown))) { newMaster = dbStorageDomain; break; } else if ((selectInactiveWhenNoActiveUnknownDomains && (suggestedInactiveDomain == null)) && ((dbStorageDomain.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.InActive))) { suggestedInactiveDomain = dbStorageDomain; } } } } } return newMaster != null ? newMaster : suggestedInactiveDomain; }<END_MOD>
<START_MOD>private java.util.Date getDateFromDiskDescription(java.util.Map<java.lang.String, java.lang.Object> map) { try { return new java.text.SimpleDateFormat(org.ovirt.engine.core.utils.ovf.OvfParser.formatStrFromDiskDescription).parse(map.get(OvfInfoFileConstants.LastUpdated).toString()); } catch (java.text.ParseException e) { log.errorFormat("LastUpdate Date could not be parsed from disk desscription"); e.printStackTrace(); return null; } }<END_MOD>
<START_MOD>@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.widget.table.column.Context context, java.io.Serializable value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb) { if (value == null) { clearAll(); } int progress = getProgressValue(freeSize, totalSize); java.lang.String sizeString = getProgressText(freeSize, totalSize); java.lang.String color = (progress < 70) ? "#669966" : progress < 95 ? "#FF9900" : "#FF0000"; java.lang.String toolTip = org.ovirt.engine.ui.webadmin.widget.table.column.GlusterCapacityCell.messages.glusterCapacityInfo(getSizeString(freeSize, inUnit), getSizeString(usedSize, inUnit), getSizeString(totalSize, inUnit)); com.google.gwt.safehtml.shared.SafeHtml safeHtml = org.ovirt.engine.ui.webadmin.widget.table.column.GlusterCapacityCell.templates.glusterCapcityProgressBar(progress, sizeString, color, toolTip); sb.append(safeHtml); }<END_MOD>
public static void updateImportedVmUsbPolicy(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { if ((<START_MOD>OsRepositoryImpl.INSTANCE.isLinux(<END_MOD>vmBase.getOs())) && (vmBase.getUsbPolicy().equals(UsbPolicy.ENABLED_LEGACY))) { vmBase.setUsbPolicy(UsbPolicy.DISABLED); } }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Messages<END_MOD>.DefaultMessage( references to objects that reside on Storage Domain {0} in the database will be removed. You may need to manually clean the storage in order to reuse it. java.lang.String storageDestroyPopupMessageLabel(java.lang.String storageName);
<START_MOD>@java.lang.Override public void handleFailure() { org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.log.error("Failed child command status for step '{}'", org.ovirt.engine.core.bll.snapshots.RemoveSnapshotSingleDiskLiveCommand.getParameters().getCommandStep()); }<END_MOD>
private static <START_MOD>java.lang.String<END_MOD> <START_MOD>extractSubnet<END_MOD>(java.util.Map<java.lang.String, java.lang.Object> <START_MOD>nic<END_MOD>) { <START_MOD>return<END_MOD> ((<START_MOD>java<END_MOD>.lang.<START_MOD>String<END_MOD>) <START_MOD>(nic<END_MOD>.<START_MOD>get<END_MOD>(<START_MOD>"netmask"<END_MOD>))); }
public static void LogoffAsync(org.ovirt.engine.core.common.<START_MOD>businessentities.DbUser dbUser<END_MOD>, final org.ovirt.engine.ui.frontend.AsyncQuery callback) { org.ovirt.engine.ui.frontend.Frontend.logger.finer( Invoking async Logoff. org.ovirt.engine.ui.frontend.gwtservices.GenericApiGWTServiceAsync service = GenericApiGWTServiceAsync.Util.getInstance(); service.logOff(<START_MOD>dbUser<END_MOD>, new com.google.gwt.user.client.rpc.AsyncCallback<VdcReturnValueBase>() { @java.lang.Override public void onSuccess(final VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer( returned result from Logoff. callback.asyncCallback.onSuccess(callback.getModel(), result); if ((org.ovirt.engine.ui.frontend.Frontend.getLoginHandler()) != null) { org.ovirt.engine.ui.frontend.Frontend.getLoginHandler().onLogout(); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { if (org.ovirt.engine.ui.frontend.Frontend.ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ( to execute Logoff:   + caught), caught); org.ovirt.engine.ui.frontend.Frontend.getEventsHandler().runQueryFailed(null); org.ovirt.engine.ui.frontend.Frontend.failureEventHandler(caught); callback.asyncCallback.onSuccess(callback.getModel(), null); } }); }
<START_MOD>private void queryVfMap() { final org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.setModel(this); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValueObj) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValueObj)); vfMap = returnValue.getReturnValue(); queryNetworkAttachments(); } }; org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(vds.getId()); params.setRefresh(false); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVfMap, params, asyncQuery); }<END_MOD>
public org.ovirt.engine.core.bll.CommandMultiAsyncTasks getCommandMultiAsyncTasks() { org.ovirt.engine.core.bll.CommandMultiAsyncTasks entityInfo = null; synchronized(org.ovirt.engine.core.bll.tasks.CommandAsyncTask.<START_MOD>class<END_MOD>) { entityInfo = org.ovirt.engine.core.bll.tasks.CommandAsyncTask._multiTasksByCommandIds.get(getCommandId()); } return entityInfo; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( changing VM administrative properties java.lang.String allowChangingVmAdminPropertiesRoleTreeTooltip();
@java.lang.Override public org.ovirt.engine.core.compat.Guid getStorageDomainId() { if ((cachedStorageDomainId) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskDummiesForMemSize = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies(org.ovirt.engine.core.bll.<START_MOD>utils.VmDeviceUtils.getTotalMemorySizeInBytes(org.ovirt.engine.core.bll.<END_MOD>HibernateVmCommand.getVm()), MemoryUtils.METADATA_SIZE_IN_BYTES); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler.getInstance().findStorageDomainForMemory(org.ovirt.engine.core.bll.HibernateVmCommand.getStoragePoolId(), diskDummiesForMemSize, org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.HibernateVmCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.HibernateVmCommand.getVmId()), false, false, false), org.ovirt.engine.core.bll.HibernateVmCommand.getVm()); if (storageDomain != null) { cachedStorageDomainId = storageDomain.getId(); } } return cachedStorageDomainId; }
@java.lang.Override protected boolean canDoAction() { <START_MOD>org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator<END_MOD> <START_MOD>validator = new org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator<END_MOD>(<START_MOD>getNetworkCluster<END_MOD>())<START_MOD>;<END_MOD> <START_MOD>return<END_MOD> (validate(networkClusterAttachmentExists()))<START_MOD> && ((!(org.ovirt.engine.core.bll.network.NetworkHelper.managementNetwork(getNetwork()))) || (validate(validator.managementNetworkAttachment(getNetworkName()))))<END_MOD>; }
<START_MOD>@java.lang.Override public void markAsInvalid(java.util.List<java.lang.String> validationHints) { super.markAsInvalid(validationHints); java.lang.String tooltipText = org.ovirt.engine.ui.common.widget.AbstractValidatedWidgetWithLabel.getValidationTooltipText(validationHints); labelElementTooltip.setText(tooltipText); labelElementTooltip.reconfigure(); contentWidgetContainerTooltip.setText(tooltipText); contentWidgetContainerTooltip.reconfigure(); }<END_MOD>
<START_MOD>@java.lang.Override public javax.ws.rs.core.Response remove(org.ovirt.engine.api.model.Action action) { get(); org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtensions connection = new org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtensions(); return null; }<END_MOD>
private void validateUpdateWipeAfterDelete(org.ovirt.engine.core.common.businessentities.VMStatus status) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = createDiskImage(); disk.<START_MOD>setWipeAfterDelete<END_MOD>(false); when(diskDao.get(diskImageGuid)).thenReturn(disk); command.getParameters().getDiskInfo().setWipeAfterDelete(true); initializeCommand(createVm(status)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(command); }
public static void GetDomainListViaPublic(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, boolean filterInternalDomain) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? new java.util.ArrayList<java.lang.String>(((java.util.ArrayList<java.lang.String>) (source))) : new java.util.ArrayList<java.lang.String>(); } }; org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetDomainListParameters tempVar = new org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetDomainListParameters(); tempVar.setFilterInternalDomain(filterInternalDomain); org.ovirt.engine.ui.frontend.Frontend.RunPublicQuery(VdcQueryType.GetDomainList, tempVar, aQuery); }
<START_MOD>@org.ovirt.engine.ui.common.DefaultStringValue("EGD backend") java.lang.String rngEgd();<END_MOD>
<START_MOD>private java.lang.String getVmIsBeingImportedMessage() { java.lang.StringBuilder builder = new java.lang.StringBuilder(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_BEING_IMPORTED.name()); builder.append(java.lang.String.format("$VmName %1$s", getVmName())); return builder.toString(); }<END_MOD>
<START_MOD>private void notMgmtNetworkTest(org.ovirt.engine.core.bll.ValidationResult expected, java.lang.String networkName) { mockConfigRule.mockConfigValue(ConfigValues.ManagementNetwork, MGMT_NETWORK_NAME); when(network.getName()).thenReturn(networkName); assertEquals(expected.getMessage(), validator.notManagementNetwork().getMessage()); }<END_MOD>
private void onRemove() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); if ((model.getProgress()) != null) { return; } java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (java.util.Map.Entry<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.ui.uicommonweb.models.EntityModel> entry : vmsRemoveMap.entrySet()) { list.add(new org.ovirt.engine.core.common.action.RemoveVmParameters(entry.getKey(), false, ((java.lang.Boolean) (entry.getValue().getEntity())))); } model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.<START_MOD>getInstance().runMultipleAction<END_MOD>(VdcActionType.RemoveVm, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); } }, model); }
public void EnsureAsyncSearchStopped() { getTimer().stop(); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((id) == null ?   : id.hashCode()); result = (prime * result) + ((defaultEndTime) == null ?   : defaultEndTime.hashCode()); result = (prime * result) + ((defaultStartTime) == null ?   : defaultStartTime.hashCode()); result = (prime * result) + (defaultTimeInDays); result = (prime * result) + ((parameters) == null ?   : parameters.hashCode()); result = (prime * result) + ((vdsGroupId) == null ?   : vdsGroupId.hashCode()); result = (prime * result) + ((vdsGroupName) == null ?   : vdsGroupName.hashCode()); result = (prime * result) + (vmPoolAssignedCount); result = (prime * result) + ((description) == null ?   : description.hashCode()); result = (prime * result) + ((name) == null ?   : name.hashCode()); result = (prime * result) + (vmPoolRunningCount); result = (prime * result) + ((type) == null ?   : type.hashCode()); result = (prime * result) + (maxAssignedVmsPerUser); <START_MOD>result = (prime * result) + ((vmtGuid) == null ?   : vmtGuid.hashCode()); result = (prime * result) + (useLatestVersion ? 1249 : 1259); <END_MOD>return result; }
@java.lang.Override public org.ovirt.engine.api.model.NIC update(org.ovirt.engine.api.model.NIC resource) { validateParameters(resource, requiredUpdateFields); org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> network = findNetwork(resource); if (network != null) { resource.getNetwork().setName(network.getname()); resource.getNetwork().setId(null); } return performUpdate(resource, entityResolver, updateType, updateParametersProvider); }
<START_MOD>protected org.ovirt.engine.core.common.businessentities.VmDevice getVmDeviceByDiskId(org.ovirt.engine.core.compat.Guid diskId) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().get(new org.ovirt.engine.core.common.businessentities.VmDeviceId(diskId, vm.getId())); }<END_MOD>
@org.junit.Test public void testOtherFieldsNotValidatedInImport() { org.ovirt.engine.core.common.action.ImportVmParameters parameters = createParameters(); java.lang.String tooLongString = org.ovirt.engine.core.utils.RandomUtils.instance().nextPropertyString(((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.GENERAL_MAX_SIZE) + 1)); parameters.getVm().setUserDefinedProperties(tooLongString); parameters.setImportAsNewEntity(true); org.ovirt.engine.core.bll.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> command = new org.ovirt.engine.core.bll.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters>(parameters) { @java.lang.Override protected void initUser() { } @java.lang.Override public org.ovirt.engine.core.common.businessentities.<START_MOD>Cluster getCluster<END_MOD>() { return null; } }; command.postConstruct(); java.util.Set<javax.validation.ConstraintViolation<org.ovirt.engine.core.common.action.ImportVmParameters>> validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, command.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertTrue(validate.isEmpty()); parameters.getVm().setUserDefinedProperties(tooLongString); parameters.setImportAsNewEntity(false); command = new org.ovirt.engine.core.bll.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters>(parameters) { @java.lang.Override protected void initUser() { } @java.lang.Override public org.ovirt.engine.core.common.businessentities.<START_MOD>Cluster getCluster<END_MOD>() { return null; } }; command.postConstruct(); validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, command.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertTrue(validate.isEmpty()); }
<START_MOD>@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.network.NetworkSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(ginjector.getApplicationConstants().networkProfileSubTabLabel(), 1, ginjector.getSubTabNetworkProfileModelProvider()); }<END_MOD>
@java.lang.Override protected void changeDefualtHost() { super.changeDefualtHost(); doChangeDefautlHost(vm.getDedicatedVmForVds()); <START_MOD>org.ovirt.engine.core.compat.Guid dedicatedHostsGuid = (vm.getDedicatedVmForVdsList().isEmpty()) ? null : vm.getDedicatedVmForVdsList().get(0); doChangeDefautlHost(dedicatedHostsGuid); core : enable = $missing$; org.ovirt.engine.ui.uicommonweb.models.vms.pinning to; org.ovirt.engine.ui.uicommonweb.models.vms.multiple hosts; <END_MOD>}
protected Q setUpSpyQuery(P parameters) throws java.lang.Exception { org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacadeMock = org.ovirt.engine.core.bll.AbstractQueryTest.mock(org.ovirt.engine.core.dal.dbbroker.DbFacade.class); org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUserMock = org.ovirt.engine.core.bll.AbstractQueryTest.mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class<START_MOD>); when(jobDao.getJobsBySessionId(org.ovirt.engine.core.bll.AbstractQueryTest.any(java.lang.String.class))).thenReturn(java.util.Collections.emptyList()<END_MOD>); when(engineSessionDao.save(org.ovirt.engine.core.bll.AbstractQueryTest.any(org.ovirt.engine.core.common.businessentities.EngineSession.class))).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextLong()); when(engineSessionDao.remove(org.ovirt.engine.core.bll.AbstractQueryTest.any(java.lang.Long.class))).thenReturn(1); sessionDataContainer.setUser(parameters.getSessionId(), dbUserMock); java.lang.reflect.Constructor<? extends Q> con = getQueryType().getConstructor(getParameterType()); query = org.ovirt.engine.core.bll.AbstractQueryTest.spy(con.newInstance(parameters)); doReturn(sessionDataContainer).when(query).getSessionDataContainer(); doReturn(dbFacadeMock).when(query).getDbFacade(); doReturn(dbUserMock).when(query).initUser(); initQuery(query); query.postConstruct(); return query; }
public static org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD> getGroupByGroupGuid(org.ovirt.engine.core.compat.Guid groupGuid) { return null; }
<START_MOD>@org.junit.Test public void canDoActionFailedShareableDiskOnGlusterDomain() throws java.lang.Exception { org.ovirt.engine.core.common.action.UpdateVmDiskParameters parameters = createParameters(); org.ovirt.engine.core.common.businessentities.DiskImage disk = createShareableDisk(VolumeFormat.RAW); org.ovirt.engine.core.common.businessentities.StorageDomain storage = addNewStorageDomainToDisk(disk, StorageType.GLUSTERFS); parameters.setDiskInfo(disk); when(diskDao.get(diskImageGuid)).thenReturn(createDiskImage()); when(storageDomainDao.get(storage.getId())).thenReturn(storage); initializeCommand(parameters); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_SHAREABLE_DISKS_NOT_SUPPORTED_ON_GLUSTER_DOMAIN.toString())); }<END_MOD>
private boolean canRemoveVmImageDisk() {<START_MOD> if (!(listVms.isEmpty())) { org.ovirt.engine.core.compat.Guid storagePoolId = listVms.get(0).getStoragePoolId(); org.ovirt.engine.core.common.businessentities.storage_pool sp = org.ovirt.engine.core.bll.RemoveDiskCommand.getStoragePoolDAO().get(storagePoolId); if (!(validate(new org.ovirt.engine.core.bll.storage.StoragePoolValidator(sp).isUp()))) { return false; }<END_MOD> java.util.List<org.ovirt.engine.core.common.businessentities.Disk> diskList = java.util.Arrays.asList(getDisk()); if (!(<START_MOD>org.ovirt.engine.core.bll.ImagesHandler.PerformImagesChecks(org.ovirt.engine.core.bll.RemoveDiskCommand.getReturnValue().getCanDoActionMessages(), storagePoolId, true, false, false, true, org.ovirt.engine.core.bll.ImagesHandler.filterEditableImageDisks(diskList)))) { return false; } } org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(); for (org.ovirt.engine.core.common.businessentities.VM vm : <END_MOD>listVms<START_MOD>) {<END_MOD> if (<START_MOD>(<END_MOD>!(validate(<START_MOD>snapshotsValidator.vmNotDuringSnapshot(vm.getId())))) || (!(validate(snapshotsValidator.vmNotInPreview(vm.getId())<END_MOD>)))) { return false; } <START_MOD>} return<END_MOD> true<START_MOD>; }<END_MOD>
@org.ovirt.engine.ui.webadmin.Template( cellspacing=<START_MOD>'0'<END_MOD> cellpadding=<START_MOD>'0'<END_MOD> style= 5px; + (((((("<tr>" +   (</td> +   style= 10px; text-align: center; + "<td>)</td>") + "</tr>") + "</table>") + "</div>")) com.google.gwt.safehtml.shared.SafeHtml vmCountWithMigrating(java.lang.String vmCountStr, java.lang.String vmMigratingStr, com.google.gwt.safehtml.shared.SafeHtml image);
private static void notifyClientOfLogoutEvent(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, java.lang.String clientId, java.lang.String token) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.ClientInfo clientInfo = ssoContext.getClienInfo(clientId); java.lang.String url = clientInfo.getClientNotificationCallback(); if (org.apache.commons.lang.StringUtils.isNotEmpty(url)) { <START_MOD>org.apache.http.client.methods.HttpPost request<END_MOD> = <START_MOD>org.ovirt.engine.core.sso.utils.SsoUtils.createPost(url); java.util.List<org.apache.http.message.BasicNameValuePair> form<END_MOD> = <START_MOD>new java.util.ArrayList<>(3); form.add(new org.apache.http.message.BasicNameValuePair("event", "logout")); form.add(new org.apache.http.message.BasicNameValuePair("token", token)); form.add(new org.apache.http.message.BasicNameValuePair("token_type", "bearer")); request.setEntity(new org.apache.http.client.entity.UrlEncodedFormEntity(form)); <END_MOD>org.ovirt.engine.core.sso.utils.SsoUtils.<START_MOD>execute(request, <END_MOD>ssoContext<START_MOD>, clientId<END_MOD>); } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.StorageServerConnections currConnection = getConnection(); boolean isValidConnection = true; <START_MOD>org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer> result = connect(org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.getVds().getId()); <END_MOD>isValidConnection = <START_MOD>result<END_MOD>.getFirst(); if (isValidConnection && ((org.apache.commons.lang.StringUtils.isNotEmpty(currConnection.getid())) || ((org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.getDbFacade().getStorageServerConnectionDao().get(currConnection.getid())) == null))) { currConnection.setid(org.ovirt.engine.core.compat.Guid.NewGuid().toString()); org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.getDbFacade().getStorageServerConnectionDao().save(currConnection); <START_MOD>org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.getReturnValue().setActionReturnValue(getConnection().getid()); org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.setSucceeded(true); <END_MOD>} <START_MOD>else { org.ovirt.engine.core.common.errors.VdcFault fault = new org.ovirt.engine.core.common.errors.VdcFault(); fault.setError(org.ovirt.engine.core.common.errors.VdcBllErrors.forValue(result.getSecond())); <END_MOD>org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.getReturnValue().<START_MOD>setFault(fault<END_MOD>); }<START_MOD> }<END_MOD>
@java.lang.Override public org.ovirt.engine.ui.common.widget.action.ActionButton addMenuListItem(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef<START_MOD>, int order<END_MOD>) { org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem menuItem = new org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem(menuItemDef.getText()); java.lang.String menuItemId = menuItemDef.getUniqueId(); if (menuItemId != null) { menuItem.asWidget().getElement().setId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(getElementId(), menuItemId)); } actionItemMap.put(menuItemDef, menuItem); actionKebab.addMenuItem(menuItem<START_MOD>, order<END_MOD>); return menuItem; }
@java.lang.Override public void saveOrUpdate(org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { setIdIfNeeded(user); new org.springframework.jdbc.core.simple.SimpleJdbcCall(getJdbcTemplate()).withProcedureName("InsertOrUpdateUser").execute(new org.ovirt.engine.core.dao.<START_MOD>DbUserDAOImpl<END_MOD>.DbUserMapSqlParameterSource(user)); }
@java.lang.Override protected void executeCommand() {<START_MOD> setMacPoolIdForLog(getParameters().getMacPoolId()); setMacPoolNameForLog(oldMacPool.getName());<END_MOD> final org.ovirt.engine.core.compat.Guid macPoolId = getParameters().getMacPoolId(); getMacPoolDao().remove(macPoolId); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.getInstance().removePool(macPoolId); getReturnValue().setSucceeded(true); }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase attemptRollback(org.ovirt.engine.core.common.action.VdcActionType commandType, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.core.bll.context.CommandContext rollbackContext) { if (canPerformRollbackUsingCommand(commandType, params)) { params.setExecutionReason(CommandExecutionReason.ROLLBACK_FLOW); params.setTransactionScopeOption(TransactionScopeOption.RequiresNew); <START_MOD>entailContext(rollbackContext); <END_MOD>return getBackend().runInternalAction(commandType, params, rollbackContext); } return new org.ovirt.engine.core.common.action.VdcReturnValueBase(); }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if (!(super.<START_MOD>validate<END_MOD>())) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); if (volume.isOnline()) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_UP); <START_MOD>addValidateMessageVariable<END_MOD>("volumeName", volume.getName()); return false; } if ((volume.getSnapshotsCount()) > 0) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_HAS_SNAPSHOTS); <START_MOD>addValidateMessageVariable<END_MOD>("volumeName", volume.getName()); <START_MOD>addValidateMessageVariable<END_MOD>("noOfSnapshots", volume.getSnapshotsCount()); return false; } return true; }
public static boolean validHostname(java.lang.String s) { if ((s == null) || (s.trim().isEmpty())) { return false; } <START_MOD>return<END_MOD> <START_MOD>(org.ovirt.engine.core.common.utils.ValidationUtils.isValidIpAddressOrHostname(s))<END_MOD> <START_MOD>|| (org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>common.utils.ValidationUtils.isValidIpv6Address<END_MOD>(s)); }
<START_MOD>@java.lang.Override public java.lang.String getOldName() { return _oldVds.getvds_name(); }<END_MOD>
<START_MOD>@org.junit.Test public void testRemoveFailed() throws java.lang.Exception { setUpGetEntityExpectations(); doTestBadRemove(true, false, org.ovirt.engine.api.restapi.resource.FAILURE); }<END_MOD>
public static void populateMemoryUtilizationHosts(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getMemoryUtilizationHosts(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addResource(entity); } }
public void setQos(org.ovirt.engine.core.common.businessentities.network.<START_MOD>HostNetworkQos<END_MOD> qos) { this.qos = qos; }
<START_MOD>@org.junit.Test public void shouldDetectDupliciteCpuAssignment() { vmNumaNodes.get(0).setCpuIds(java.util.Collections.singletonList(0)); vmNumaNodes.get(1).setCpuIds(java.util.Collections.singletonList(0)); assertValidationFailure(underTest.checkVmNumaNodesIntegrity(vm, vm.getvNumaNodeList()), EngineMessage.VM_NUMA_NODE_DUPLICATE_CPU_ID); }<END_MOD>
private void run() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VM a = ((org.ovirt.engine.core.common.businessentities.VM) (item)); boolean reinitialize = (!(a.isInitialized())) && (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsWindowsOsType(a.<START_MOD>getVmOsId<END_MOD>())); org.ovirt.engine.core.common.action.RunVmParams tempVar = new org.ovirt.engine.core.common.action.RunVmParams(a.getId()); tempVar.setReinitialize(reinitialize); list.add(tempVar); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.RunVm, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { } }, null); }
public java.lang.StringBuilder GetTagNameAndChildrenNames() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(org.ovirt.engine.core.compat.StringFormat.format("'%1$s'", gettag_name())); for (org.ovirt.engine.core.common.businessentities.tags tag : _children) { builder.append((<START_MOD>","<END_MOD> <START_MOD>+ (<END_MOD>tag.GetTagNameAndChildrenNames(<START_MOD>)<END_MOD>))); } return builder; }
<START_MOD>public void setSELinuxEnforceMode(java.lang.Integer value) { mVdsDynamic.setselinux_enforce_mode(value); }<END_MOD>
protected void writeAdditionalJsData(javax.servlet.http.HttpServletRequest request, java.io.PrintWriter writer) { org.ovirt.engine.core.common.users.VdcUser loggedUser = getLoggedInUser(request); if (loggedUser != null) { java.util.Map<java.lang.String, java.lang.String> userInfoData = new java.util.HashMap<java.lang.String, java.lang.String>(); userInfoData.put("id", loggedUser.getUserId().toString()); userInfoData.put("userName", loggedUser.getUserName()); userInfoData.put("domain", loggedUser.getDomainControler()); <START_MOD>userInfoData.put("restApiAuthString", org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.getRestApiAuthString(loggedUser)); <END_MOD>writeJsObject(writer, "userInfo", userInfoData); } }
@org.junit.Test public void testGetNetworkQos() { org.ovirt.engine.core.common.businessentities.<START_MOD>qos.NetworkQoS result = dao.get(org.ovirt.engine.core.dao.<END_MOD>network.<START_MOD>NetworkQosDaoTest.qosAId); org.ovirt.engine.core.common.businessentities.qos.<END_MOD>NetworkQoS <START_MOD>trueA = new org.ovirt.engine.core.common.businessentities.qos.NetworkQoS(); trueA.setId(org.ovirt.engine.core.dao.network.NetworkQosDaoTest.qosAId); trueA.setName("qos_a"); trueA.setStoragePoolId(FixturesTool.STORAGE_POOL_NFS_2); trueA.setInboundAverage(1000); trueA.setInboundPeak(2000); trueA.setInboundBurst(500); trueA.setOutboundAverage(1000); trueA.setOutboundPeak(2000); trueA.setOutboundBurst(500); assertNotNull(<END_MOD>result<START_MOD>); assertTrue(trueA.equals<END_MOD>(result)); }
<START_MOD>private static org.apache.http.client.methods.HttpPost createPost(java.lang.String url) throws java.lang.Exception { org.apache.http.client.methods.HttpPost request = new org.apache.http.client.methods.HttpPost(); request.setURI(new java.net.URI(url)); request.setHeader("Accept", "application/json"); request.setHeader("Content-Type", "application/x-www-form-urlencoded"); return request; }<END_MOD>
<START_MOD>private java.util.stream.Stream<? extends org.ovirt.engine.core.bll.CommandBase> findFailedChildCommands(org.ovirt.engine.core.bll.CommandBase command) { final java.util.List<? extends org.ovirt.engine.core.bll.CommandBase> childCommands = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.findChildCommands(command.getCommandId()); return childCommands.stream().filter(( childCommand) -> !(childCommand.getReturnValue().getSucceeded())); }<END_MOD>
@java.lang.Override @java.lang.SuppressWarnings("serial") protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if (((org.ovirt.engine.core.bll.ImportVmCommandBase.getParameters().getVm()) != null) && (!(org.apache.commons.lang.StringUtils.isBlank(org.ovirt.engine.core.bll.ImportVmCommandBase.getParameters().getVm().getName())))) { return new java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>>() { { put(getParameters().getVm().getName(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_NAME, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NAME_ALREADY_USED)); put(getParameters().getVm().getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, getVmIsBeingImportedMessage())); } }; } return null; }
<START_MOD>public void setLabel(java.lang.String label) { button.setText(label); }<END_MOD>
<START_MOD>@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageSnapshotListModel storageSnapshotListModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageSnapshotListModel) (model)); storageSnapshotListModel.setItems(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue()))); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.businessentities.VDSGroup createVdsGroup() { if ((vdsGroup) == null) { vdsGroup = new org.ovirt.engine.core.common.businessentities.VDSGroup(); vdsGroup.setvds_group_id(org.ovirt.engine.core.compat.Guid.newGuid()); vdsGroup.setcompatibility_version(new org.ovirt.engine.core.compat.Version()); vdsGroup.setcpu_name("Intel Conroe Family"); vdsGroup.setArchitectureType(ArchitectureType.x86_64); } return vdsGroup; }<END_MOD>
private void onCreateQuota() { if (hasUnlimitedSpecificQuota()) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().changeDCQuotaEnforcementModeTitle()); confirmModel.setHashName("set_unlimited_specific_quota"<START_MOD>); confirmModel.setHelpTag(confirmModel.getHashName(), ""<END_MOD>); confirmModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().youAreAboutToCreateUnlimitedSpecificQuotaMsg()); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnCreateQuotaInternal", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); getConfirmWindow().getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); tempVar2.setIsDefault(true); getConfirmWindow().getCommands().add(tempVar2); } else { onCreateQuotaInternal(false); } }
@java.lang.Override protected void syncSearch() { super.syncSearch(); org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { <START_MOD>setItems(((java.util.Collection<org.ovirt.engine.core.common.businessentities.VDSGroup>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); } }); org.ovirt.engine.core.common.queries.IdQueryParameters params<END_MOD> = <START_MOD>new <END_MOD>org.ovirt.engine.core.common.queries.<START_MOD>IdQueryParameters(getEntity().getId()); params.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAttachedClustersByClusterPolicyId, params, asyncQuery); setIsQueryFirstTime(false<END_MOD>); }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionDelete(java.lang.String volumeName, java.lang.String remoteHost, java.lang.String remoteVolumeName<START_MOD>, java.lang.String remoteUserName<END_MOD>);
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (manager.isMonitoringNeeded()) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = (getRefreshStatistics()) ? new org.ovirt.engine.core.vdsbroker.VmsStatisticsFetcher(manager) : new org.ovirt.engine.core.vdsbroker.VmsListFetcher(manager); long fetchTime = java.lang.System.nanoTime(); fetcher.fetch(); new org.ovirt.engine.core.vdsbroker.VmsMonitoring(manager, fetcher.getChangedVms(), fetcher.getVmsWithChangedDevices(), auditLogDirector, fetchTime).perform(); } updateIteration(); }
private void refreshVmStats(<START_MOD>java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> monitoredVms<END_MOD>) { for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> monitoredVm : monitoredVms) { if (tryLockVmForUpdate(monitoredVm)) { org.ovirt.engine.core.vdsbroker.VmAnalyzer vmAnalyzer = getVmAnalyzer(monitoredVm); vmAnalyzers.add(vmAnalyzer); vmAnalyzer.analyze(); } } processVmsWithDevicesChange(); addUnmanagedVms(); flush(); }
<START_MOD>@org.ovirt.engine.core.bll.network.macpool.AcquireWriteLock <END_MOD>boolean addMac(java.lang.String mac);
<START_MOD>private static java.lang.Integer minIfExists(java.lang.Integer a, java.lang.Integer b) { return (a != null) && (b != null) ? java.lang.Math.min(a, b) : null; }<END_MOD>
<START_MOD>public static org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity findBrick(java.util.Collection<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks, org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity searchBrick) { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : bricks) { if ((brick.getServerId().equals(searchBrick.getServerId())) && (brick.getBrickDirectory().equals(searchBrick.getBrickDirectory()))) { return brick; } } return null; }<END_MOD>
protected org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters() { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters params = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(enclosingCommand.getParameters().getVmId(), <START_MOD> <END_MOD> for Live Storage Migration params.setParentCommand(VdcActionType.<START_MOD>LiveMigrateDisks<END_MOD>); params.setSnapshotType(SnapshotType.REGULAR); params.setParentParameters(enclosingCommand.getParameters()); params.setImagesParameters(enclosingCommand.getParameters().getImagesParameters()); params.setTaskGroupSuccess(enclosingCommand.getParameters().getTaskGroupSuccess()); params.setNeedsLocking(false); return params; }
<START_MOD>@org.junit.Test public void testAttributeAndElement() { org.ovirt.engine.api.types.V4Vm object = newVm().setId("123").setName("myvm").build(); assertEquals("<vm id=\"123\"><name>myvm</name></vm>", objectToXml(object)); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(T item) { java.lang.String osTypeName = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getOsUniqueOsNames().get(extractor.extractOsType(item)); com.google.gwt.resources.client.ResourcePrototype resource = org.ovirt.engine.ui.userportal.widget.table.column.AbstractMaskedVmImageColumn.getApplicationResourcesWithLookup().getResource((osTypeName + "SmallImage")); if (!(resource instanceof com.google.gwt.resources.client.ImageResource)) { resource = org.ovirt.engine.ui.userportal.widget.table.column.AbstractMaskedVmImageColumn.getApplicationResourcesWithLookup().otherSmallImage(); } return ((com.google.gwt.resources.client.ImageResource) (resource)); }<END_MOD>
<START_MOD>@java.lang.Override public void updateIfNeeded(org.ovirt.engine.core.common.businessentities.VdsDynamic vdsDynamic) { org.ovirt.engine.core.common.businessentities.VdsDynamic dbData = get(vdsDynamic.getId()); if (!(dbData.equals(vdsDynamic))) { update(vdsDynamic); } else { org.ovirt.engine.core.dao.VdsDynamicDAODbFacadeImpl.log.info("Ignored an unneeded update of VdsDynamic"); } }<END_MOD>
private java.util.Map<java.lang.String, java.lang.String> getServerFingerprints(org.w3c.dom.NodeList listOfPeers) { java.util.Map<java.lang.String, java.lang.String> fingerprints = new java.util.HashMap<java.lang.String, java.lang.String>(); fingerprints.put(org.ovirt.engine.core.bll.gluster.<START_MOD>GetGlusterServersForImportQuery<END_MOD>.getParameters().getServerName(), org.ovirt.engine.core.bll.gluster.<START_MOD>GetGlusterServersForImportQuery<END_MOD>.getParameters().getFingerprint()); for (int i = 0; i < (listOfPeers.getLength()); i++) { org.w3c.dom.Node firstPeer = listOfPeers.item(i); if ((firstPeer.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) { org.w3c.dom.Element firstHostElement = ((org.w3c.dom.Element) (firstPeer)); int state = org.ovirt.engine.core.utils.XmlUtils.getIntValue(firstHostElement, org.ovirt.engine.core.bll.gluster.<START_MOD>GetGlusterServersForImportQuery<END_MOD>.STATE); if (state == (org.ovirt.engine.core.bll.gluster.<START_MOD>GetGlusterServersForImportQuery<END_MOD>.PEER_IN_CLUSTER)) { java.lang.String hostName = org.ovirt.engine.core.utils.XmlUtils.getTextValue(firstHostElement, org.ovirt.engine.core.bll.gluster.<START_MOD>GetGlusterServersForImportQuery<END_MOD>.HOST_NAME); <START_MOD>if ((getVdsStaticDao().get(hostName)) != null) { return null; } <END_MOD>fingerprints.put(hostName, getFingerprint(hostName)); } } } return fingerprints; }
<START_MOD>private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface getGlusterNetworkAddress(org.ovirt.engine.core.compat.Guid hostId, java.lang.String glusterNetworkName) { final java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics = getInterfaceDAO().getAllInterfacesForVds(hostId); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { if (glusterNetworkName.equals(nic.getNetworkName())) { return nic; } } return null; }<END_MOD>
public static java.lang.String crypt(java.lang.String password) { <START_MOD>byte[] r<END_MOD> = new byte[<START_MOD>org.ovirt.engine.core.uutils.crypto.CryptMD5.SALT_MAX_LENGTH]; char[] salt<END_MOD> = new char[r.length]; <START_MOD>org.ovirt.engine.core.uutils.crypto.CryptMD5.secureRandom<END_MOD>.nextBytes(r); for (int i = 0; i < (r.length); i++) { salt[i] = org.ovirt.engine.core.uutils.crypto.CryptMD5.b64t[(((r[i]) & 255) % (org.ovirt.engine.core.uutils.crypto.CryptMD5.b64t.length))]; } return org.ovirt.engine.core.uutils.crypto.CryptMD5.crypt(password, new java.lang.String(salt)); }
<START_MOD>@org.junit.Test public void shouldFilterHostsWithNotEnoughCpus() { cluster.setCountThreadsAsCores(false); final java.util.List<org.ovirt.engine.core.common.businessentities.VDS> candidates = filter(); assertThat(candidates, not(hasItem(vdsWithCores))); }<END_MOD>
<START_MOD>protected<END_MOD> com.woorea.openstack.glance.Glance getClient() { if ((client) == null) { client = new com.woorea.openstack.glance.Glance(((getProvider().getUrl()) + (org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy.API_VERSION))); client.setTokenProvider(getTokenProvider()); } return client; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Local") java.lang.String storageTypeLocal();
<START_MOD>@org.junit.Test public void testGet() { org.ovirt.engine.core.common.businessentities.aaa.UserProfile result = dao.get(existingProfile.getId()); assertNotNull(result); assertEquals(existingProfile, result); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.businessentities.DbGroup getByIdOrExternalId(org.ovirt.engine.core.compat.Guid id, java.lang.String domain, <START_MOD>java.lang.String<END_MOD> externalId) { if (id != null) { org.ovirt.engine.core.common.businessentities.DbGroup existing = get(id); if (existing != null) { return existing; } } if ((domain != null) && (externalId != null)) { org.ovirt.engine.core.common.businessentities.DbGroup existing = getByExternalId(domain, externalId); if (existing != null) { return existing; } } if ((domain != null) && (id != null)) { externalId = <START_MOD>guidToExternalId(id<END_MOD>); org.ovirt.engine.core.common.businessentities.DbGroup existing = getByExternalId(domain, externalId); if (existing != null) { return existing; } } return null; }
<START_MOD>private void commonUpdate(org.ovirt.engine.core.compat.Guid vfsConfigId, boolean allNetworksAllowed) { org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig before = dao.get(vfsConfigId); before.setNicId(FixturesTool.VDS_NETWORK_INTERFACE2); before.setMaxNumOfVfs(((before.getMaxNumOfVfs()) + 1)); before.setNumOfVfs(((before.getNumOfVfs()) + 1)); before.setNumOfFreeVfs(((before.getNumOfFreeVfs()) + 1)); before.setAllNetworksAllowed(allNetworksAllowed); if (allNetworksAllowed) { before.setNetworks(new java.util.HashSet<org.ovirt.engine.core.compat.Guid>()); before.setLabels(new java.util.HashSet<java.lang.String>()); } else { addNetworks(before); addLabels(before); } dao.update(before); org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig after = dao.get(vfsConfigId); assertNotNull(after); assertHostNicVfsConfigEquals(before, after); }<END_MOD>
private <START_MOD>void detachStorageDomain(org.ovirt.engine.core.compat.Guid storageDomainId<END_MOD>) { <START_MOD>log.info( '{}' is already attached to a different storage pool, clean the storage domain metadata. storageDomainId); org.ovirt.engine.core.common.vdscommands.StorageDomainVdsCommandParameters params = new org.ovirt.engine.core.common.vdscommands.StorageDomainVdsCommandParameters(storageDomainId, org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getVds().getId()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue ret = runVdsCommand(VDSCommandType.CleanStorageDomainMetaData, params); <END_MOD>if (<START_MOD>ret.getSucceeded(<END_MOD>)) { <START_MOD>log.info( cleaned metadata <END_MOD>for <START_MOD>storage domain '{}'. storageDomainId); } else<END_MOD> { <START_MOD>log.warn( to clean metadata for storage<END_MOD> domain <START_MOD>'{}'. storageDomainId<END_MOD>); } }
@java.lang.Override public void setSubTabPanelVisible(boolean subTabPanelVisible) { if ((this.subTabPanelVisible) != subTabPanelVisible) { splitPanel.clear(); if (subTabPanelVisible) { splitPanel.addSouth(subTabPanelContainer, org.ovirt.engine.ui.userportal.section.main.view.AbstractSideTabWithDetailsView.subTabPanelHeight); splitPanel.add(table); <START_MOD>splitPanel.initWidget(); <END_MOD>} else { splitPanel.add(table); } this.subTabPanelVisible = subTabPanelVisible; } }
<START_MOD>@java.lang.Override protected void handleAutoLogin(org.ovirt.engine.ui.common.auth.AutoLoginData autoLoginData) { super.handleAutoLogin(autoLoginData); final java.lang.String authString = autoLoginData.getRestApiAuthString(); if (authString != null) { acquireRestApiSession(authString); } }<END_MOD>
@java.lang.Override protected boolean canDoAction() { parameters = getParameters(); if (!(super.canDoAction())) { return false; } if (getGeoRepSession().getStatus().equals(GeoRepSessionStatus.ACTIVE)) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_GEOREP_SESSION_ALREADY_RESUMED); return false; } return true; }
<START_MOD>@org.junit.Test public void testValidateNetworkExclusiveOnNic_atMostOneNonVmNetworkViolated() throws java.lang.Exception { checkVmNetworkIsSoleAssignedInterface(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.NETWORK_INTERFACES_NOT_EXCLUSIVELY_USED_BY_NETWORK), nonVmNetwork1, nonVmNetwork2); }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__GLUSTER_VOLUME_SNAPSHOT_CONFIG); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__VOLUME_SNAPSHOT_CONFIG_UPDATE); }
<START_MOD>private org.ovirt.engine.core.bll.ValidationResult referencedNetworkAttachmentActuallyExists(org.ovirt.engine.core.compat.Guid networkAttachmentId) { boolean doesNotReferenceExistingNetworkAttachment = networkAttachmentId == null; if (doesNotReferenceExistingNetworkAttachment) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment existingAttachment : existingAttachments) { if (existingAttachment.getId().equals(networkAttachmentId)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_ATTACHMENT_NOT_EXISTS); }<END_MOD>
@org.junit.Test public void canDoActionSucceedsOnDiskDomainCheckWhenNoDisks() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId); mockVm(); mockStorageDomain(storageId); mockStoragePoolIsoMap(); <START_MOD>mockMaxPciSlots(); <END_MOD>runAndAssertCanDoActionSuccess(); }
<START_MOD>private java.lang.String showRpdConsole(org.ovirt.engine.ui.uicommonweb.models.ConsoleAwareModel model) { if (consoleUtils.canOpenRDPConsole(model)) { model.getAdditionalConsoleModel().getConnectCommand().Execute(); } else if (!(consoleUtils.isRDPAvailable())) { return createErrorMessage(model, "RDP"); } return null; }<END_MOD>
<START_MOD>@java.lang.Override public void onNext(java.util.Map<java.lang.String, java.lang.Object> map) { if (manager.isMonitoringNeeded()) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> dbVms = dbFacade.getVmDao().getAllRunningByVds(manager.getVdsId()); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> changedVms = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData>> devicesChangedVms = new java.util.ArrayList<>(); new org.ovirt.engine.core.vdsbroker.VmsMonitoring(manager, changedVms, devicesChangedVms).perform(); } subscription.request(1); }<END_MOD>
<START_MOD>@java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.VDS p) { return (getOccupiedVMSLots(p, parameters)) >= (getOccupiedVMSLots(worstVDS, parameters)); }<END_MOD>
private boolean updateFileList(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType) { switch (imageType) { case All : return updateAllFileListFromVDSM(storagePoolId, storageDomainId); case ISO : return updateIsoListFromVDSM(storagePoolId, storageDomainId); case Floppy : return updateFloppyListFromVDSM(storagePoolId, storageDomainId); default : org.ovirt.engine.core.bll.<START_MOD>storage.domains.<END_MOD>IsoDomainListSyncronizer.log.warn( Iso domain using unsupported imageType: {} imageType); return false; } }
public org.ovirt.engine.core.bll.ValidationResult validateCinderDiskSnapshotsLimits() { return validate(<START_MOD>() -><END_MOD> { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageMap = getRelatedCinderDisksToStorageDomainMap(); java.util.Collection<org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageCollection = relatedCinderDisksByStorageMap.values(); for (org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy relatedCinderDisksByStorage : relatedCinderDisksByStorageCollection) { com.woorea.openstack.cinder.model.Limits limits = relatedCinderDisksByStorage.getProxy().getLimits(); int numOfDisks = relatedCinderDisksByStorage.getCinderDisks().size(); if (isLimitExceeded(limits, VolumeClassification.Snapshot, numOfDisks)) { java.lang.String storageName = getStorageDomainDao().get(relatedCinderDisksByStorage.getStorageDomainId()).getStorageName(); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_ADD_CINDER_DISK_SNAPSHOT_LIMIT_EXCEEDED, java.lang.String.format( %d limits.getAbsolute().getMaxTotalVolumes()), java.lang.String.format( %s storageName)); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }<START_MOD>);<END_MOD> }
<START_MOD>@java.lang.Override protected org.ovirt.engine.api.model.ForemanHostProvider doPopulate(org.ovirt.engine.api.model.ForemanHostProvider model, org.ovirt.engine.core.common.businessentities.Provider entity) { return model; }<END_MOD>
<START_MOD>public java.util.List<java.lang.Integer> readIntegers() { return read(java.lang.Integer.class, this::readInteger); }<END_MOD>
public void AttachTask(org.ovirt.engine.core.bll.<START_MOD>CommandAsyncTask<END_MOD> asyncTask) { synchronized(_listTasks) { if (!(_listTasks.containsKey(asyncTask.getVdsmTaskId()))) { org.ovirt.engine.core.bll.<START_MOD>CommandMultiAsyncTasks<END_MOD>.log.infoFormat( Attaching task '{0}' to command '{1}'. asyncTask.getVdsmTaskId(), getCommandId()); _listTasks.put(asyncTask.getVdsmTaskId(), asyncTask); } } }
<START_MOD>public static java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> getBaseMethodsMap(java.util.List<org.ovirt.api.metamodel.concepts.Method> methods) { java.util.Map<org.ovirt.api.metamodel.concepts.Method, java.util.Set<org.ovirt.api.metamodel.concepts.Method>> baseMethods = new java.util.HashMap<>(); methods.forEach(( x) -> updateBaseMethodsMap(x, methods, baseMethods)); return baseMethods; }<END_MOD>
<START_MOD>private void storeTimeZone() { if ((params.getTimeZone()) != null) { userData.put("timezone", params.getTimeZone().getID()); } }<END_MOD>
@java.lang.Override public void deallocate(org.ovirt.engine.core.common.businessentities.network.VmNic nic) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic); if (port != null) { getClient().ports().delete(port.getId()).execute(); } } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.<START_MOD>EngineException<END_MOD>(org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.PROVIDER_FAILURE, e); } }
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow Manual and Automatic migration") java.lang.String autoAndManMigration();<END_MOD>
@java.lang.Override protected void executeCommand() { java.lang.String connectionId = org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommand.getConnection().<START_MOD>geIid<END_MOD>(); org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommand.getStorageServerConnectionDao().remove(connectionId); log.info( connection '{}' from database   connectionId); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommand.getParameters().getVdsId())) { log.info( vdsId passed - hosts will not be disconnected. } else { org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommand.disconnectStorage(); } org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommand.setSucceeded(true); }
<START_MOD>protected org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntity(org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates, boolean clearResourceId) { return imageTransferUpdater.updateEntity(updates, org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId(), clearResourceId); }<END_MOD>
protected org.ovirt.engine.core.dao.<START_MOD>qos<END_MOD>.<START_MOD>NetworkQosDao<END_MOD> getNetworkQoSDao() { return getDbFacade().<START_MOD>getNetworkQosDao<END_MOD>(); }
<START_MOD>protected<END_MOD> void setBondingOptions(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.util.Map.Entry<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>>> value) { privateBondingOptions = value; }
@java.lang.Override public void updateInterfaceForVds(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface stats) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("addr", stats.getAddress()).addValue("bond_name", stats.getBondName()).addValue("bond_type", stats.getBondType()).addValue("gateway", stats.getGateway()).addValue("id", stats.getId()).addValue("is_bond", stats.getBonded()).addValue("bond_opts", stats.getBondOptions()).addValue("mac_addr", stats.getMacAddress()).addValue("name", stats.getName()).addValue("network_name", stats.getNetworkName()).addValue("speed", stats.getSpeed()).addValue("subnet", stats.getSubnet()).addValue("boot_protocol", stats.getBootProtocol()).addValue("type", stats.getType()).addValue("vds_id", stats.getVdsId()).addValue("vlan_id", stats.getVlanId()).addValue("mtu", stats.getMtu()).addValue("bridged", stats.isBridged())<START_MOD>.addValue("labels", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(stats.getLabels()))<END_MOD>; getCallsHandler().executeModification("Updatevds_interface", parameterSource); }
protected void doNonBlockingAction(final org.ovirt.engine.core.common.action.VdcActionType task, final org.ovirt.engine.core.common.action.VdcActionParametersBase params) { setCorrelationId(params); setJobOrStepId(params); org.ovirt.engine.core.common.action.VdcActionParametersBase sp = sessionize(params); org.ovirt.engine.core.common.businessentities.aaa.DbUser currentUser = getCurrent().getUser(); org.ovirt.engine.core.common.action.VdcActionParametersBase logout = (currentUser != null) ? sessionize(new org.ovirt.engine.core.common.action.VdcActionParametersBase()) : null; try { backend.runAction<START_MOD>(VdcActionType.RunAsyncAction, new org.ovirt.engine.core.common.action.RunAsyncActionParameters<END_MOD>(task, sp)<START_MOD>)<END_MOD>; } finally { if (currentUser != null) { backend.logoff(logout); } } }
<START_MOD>protected<END_MOD> java.util.List<org.ovirt.engine.core.common.businessentities.RepoFileMetaData> <START_MOD>getUserRequestForStorageDomainRepoFileList<END_MOD>() { return org.ovirt.engine.core.bll.IsoDomainListSyncronizer.getInstance().getUserRequestForStorageDomainRepoFileList(getStorageDomainId(), <START_MOD>GetAllImagesListQuery.getParameters().getFileTypeExtension()<END_MOD>, GetAllImagesListQuery.getParameters().getForceRefresh()); }
public org.ovirt.engine.core.bll.ValidationResult dataCenterExists() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>___VdcBllMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST).when(((getDataCenter()) == null)); }
<START_MOD>@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { setItems(null); return; } super.syncSearch(); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = getEntity(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVmsWithLeaseByStorageId, new org.ovirt.engine.core.common.queries.IdQueryParameters(storageDomain.getId()), new org.ovirt.engine.ui.uicommonweb.models.storage.SetItemsAsyncQuery()); }<END_MOD>
static org.ovirt.engine.api.model.VM setUpEntityExpectations(org.ovirt.engine.core.common.businessentities.VM entity, org.ovirt.engine.core.common.businessentities.VmStatistics statistics, int index, org.ovirt.engine.core.compat.Guid vmId) { expect(entity.getId()).andReturn(vmId).anyTimes(); expect(entity.getVdsGroupId()).andReturn(GUIDS[2]).anyTimes(); expect(entity.getName()).andReturn(NAMES[index]).anyTimes(); expect(entity.getVmDescription()).andReturn(DESCRIPTIONS[index]).anyTimes(); expect(entity.getNumOfCpus()).andReturn(8).anyTimes(); expect(entity.getNumOfSockets()).andReturn(2).anyTimes(); expect(entity.getUsageMemPercent()).andReturn(java.lang.Integer.valueOf(20)).anyTimes(); expect(entity.getDisplayType()).andReturn(DisplayType.<START_MOD>vga<END_MOD>).anyTimes(); expect(entity.getDisplaySecurePort()).andReturn(5900).anyTimes(); expect(entity.getNumOfMonitors()).andReturn(2).anyTimes(); expect(entity.getVmType()).andReturn(VmType.Server).anyTimes(); expect(entity.getRunOnVdsName()).andReturn(NAMES[((NAMES.length) - 1)]).anyTimes(); expect(entity.isHostedEngine()).andReturn((index == 0)).anyTimes(); org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest.setUpStatisticalEntityExpectations(entity, statistics); return entity; }
public void flush() { network.setDataCenterId(getSelectedDc().getId()); network.setName(((java.lang.String) (getName().getEntity()))); network.setStp(((java.lang.Boolean) (getIsStpEnabled().getEntity()))); network.setDescription(((java.lang.String) (getDescription().getEntity()))); network.<START_MOD>setLabel(((java.lang.String) (getNetworkLabel().getEntity()))); network.<END_MOD>setVmNetwork(((java.lang.Boolean) (getIsVmNetwork().getEntity()))); network.setMtu(0); if ((getMtu().getEntity()) != null) { network.setMtu(java.lang.Integer.parseInt(getMtu().getEntity().toString())); } network.setVlanId(null); if (((java.lang.Boolean) (getHasVLanTag().getEntity()))) { network.setVlanId(java.lang.Integer.parseInt(getVLanTag().getEntity().toString())); } }
private boolean validateStoragePropertiesUpdate() { if ((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.GetChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn( was an attempt to update the following fields although they are not allowed to be updated: {} org.apache.commons.lang.StringUtils.join(props, ",")); return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }
<START_MOD>public void resetEmulatedMachine() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().resetClusterEmulatedMachineTitle()); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().resetClusterEmulatedMachineMessage()); model.setHelpTag(HelpTag.reset_emulated_machine_cluster); model.setHashName("reset_cluster_emulated_machine"); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.VDSGroup>cast(getSelectedItems())) { list.add(vdsGroup.getName()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand applyCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("OnResetClusterEmulatedMachine", this); applyCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); applyCommand.setIsDefault(true); model.getCommands().add(applyCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); cancelCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); cancelCommand.setIsCancel(true); model.getCommands().add(cancelCommand); }<END_MOD>
<START_MOD>private void determineLabelValue(org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel model) { if (org.ovirt.engine.ui.uicompat.external.StringUtils.isEmpty(model.getManagementIp().getEntity())) { agentLabel.setText(constants.clickEditFenceAgent()); showControls(false); } else if (model.isInConcurrentGroup()) { agentLabel.setText(constants.concurrentAgentGroupLabel()); showControls(true); showConcurrentGroup(model); } else { agentLabel.setText((((model.getPmType().getSelectedItem()) + " : ") + (model.getManagementIp().getEntity()))); showControls(true); } }<END_MOD>
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase object) { driver.edit(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { java.lang.String propName = args.propertyName; if (propName.equals("ProposeDiscoverTargets")) { setProposeDiscover(object.getProposeDiscoverTargets()); } else if (propName.equals("Message")) { messageLabel.setText(object.getMessage()); } } }); addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER) == (event.getNativeEvent().getKeyCode())) { object.getDiscoverTargetsCommand().execute(); setIsFocused(false); } } }); setProposeDiscover(object.getProposeDiscoverTargets()); initButtons(object); }
public boolean isHostedEngine() { return <START_MOD>org<END_MOD>.<START_MOD>ovirt.engine.core.common.validation.VmActionValidator.isHostedEngine<END_MOD>(getOrigin()); }
<START_MOD>public void setImageTypeId(org.ovirt.engine.core.compat.NGuid imageTypeId) { this.imageTypeId = imageTypeId; }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Events") java.lang.String eventsTitle();
<START_MOD>public java.lang.Object call() throws java.lang.Exception { if (((java.lang.Boolean) (_parser.cliEnvironmentGet(VdsmEnv.OVIRT_NODE)))) { _messages.post(InstallerMessages.Severity.INFO, java.lang.String.format("Host is hypervisor")); _setNode(); } return null; }<END_MOD>
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { return getCustomMapSqlParameterSource().addValue("id", volume.getId()).addValue("cluster_id", volume.getClusterId()).addValue("vol_name", volume.getName()).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getVolumeType())).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()).addValue("disperse_count", volume.getDisperseCount()).addValue("redundancy_count", volume.getRedundancyCount())<START_MOD>.addValue("arbiter_count", volume.getArbiterCount())<END_MOD>; }
protected final void execute() { setCommandStatus(CommandStatus.ACTIVE); if ((getCallBack()) != null) { persistCommand(getParameters().getParentCommand(), true); } getReturnValue().setCanDoAction(true); getReturnValue().setIsSyncronious(true); if ((!(hasTaskHandlers())) || ((getExecutionIndex()) == 0)) { org.ovirt.engine.core.bll.job.ExecutionHandler.addStep(getExecutionContext(), StepEnum.EXECUTING, null); } try { handleTransactivity(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(scope, this); } catch (javax.ejb.TransactionRolledbackLocalException e) { log.info( was aborted in '{}' this.getClass().getName()); compensate(); } finally { try { if (getCommandShouldBeLogged()) { logRenamedEntity(); logCommand(); } if (getSucceeded()) { startPollingAsyncTasks(); } } finally { if ((<START_MOD>((getCallBack()) == null) && (<END_MOD>!(hasTasks()))<START_MOD>)<END_MOD> && (!(org.ovirt.engine.core.bll.job.ExecutionHandler.checkIfJobHasTasks(getExecutionContext())))) { org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(getExecutionContext(), getSucceeded()); } } } }
<START_MOD>public static void setParameters(org.ovirt.engine.core.common.businessentities.CommandEntity commandEntity, org.ovirt.engine.core.common.action.VdcActionParametersBase params) { if ((commandEntity.getData()) == null) { commandEntity.setData(new java.util.HashMap<java.lang.String, java.lang.Object>()); } commandEntity.getData().put(org.ovirt.engine.core.bll.tasks.CommandEntityUtils.PARAMETERS_KEY, params); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( MoM Policy java.lang.String updateMomPolicyClusterHost();
<START_MOD>public void auditInvalidInterfaces(java.lang.String entityName, org.ovirt.engine.core.common.AuditLogType logType) { if (!(invalidNetworkNames.isEmpty())) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.addCustomValue("EntityName", entityName); logable.addCustomValue("Networks", org.apache.commons.lang.StringUtils.join(invalidNetworkNames, ',')); logable.addCustomValue("Interfaces", org.apache.commons.lang.StringUtils.join(invalidIfaceNames, ',')); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, logType); } }<END_MOD>
@java.lang.Override public void init(final org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model) { super.init(model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { java.lang.String propName = args.propertyName; if ("AllowClusterWithVirtGlusterEnabled".equals(propName)) { getView().allowClusterWithVirtGlusterEnabled(model.getAllowClusterWithVirtGlusterEnabled()); } } }); java.lang.String spiceProxyInConfig = ((java.lang.String) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.SpiceProxyDefault))); java.lang.String spiceProxyMessage = (org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(spiceProxyInConfig)) ? messages.noSpiceProxyDefined() : spiceProxyInConfig; getView().setSpiceProxyOverrideExplanation(messages.consoleOverrideSpiceProxyMessage(messages.consoleOverrideDefinedInGlobalConfig(), spiceProxyMessage)); }
<START_MOD>protected org.ovirt.engine.core.utils.ssh.SSHClient createSSHClient() { return new org.ovirt.engine.core.utils.ssh.SSHClient(); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.StorageDeviceInfoListReturnForXmlRpc getDeviceInfos() { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Gluster.getDeviceInfo").build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.StorageDeviceInfoListReturnForXmlRpc(response); }<END_MOD>
protected final void updateNumaEnabledHelper() { boolean enabled = true; if (((((<START_MOD>(<END_MOD>getModel().getMigrationMode().getSelectedItem()) != (org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST)) || (getModel().getIsAutoAssign().getEntity())) || (getModel().getDefaultHost().<START_MOD>getSelectedItems().isEmpty())) || ((getModel().getDefaultHost().getSelectedItems().size()) > 1<END_MOD>)) || (!(getModel().getDefaultHost().<START_MOD>getSelectedItems().get(0<END_MOD>).isNumaSupport()))) { enabled = false; } if (enabled) { getModel().getNumaEnabled().setMessage(constants.numaInfoMessage()); } else { getModel().getNumaEnabled().setMessage(constants.numaDisabledInfoMessage()); getModel().getNumaNodeCount().setEntity(0); } getModel().getNumaEnabled().setEntity(enabled); }
<START_MOD>private int getTotalHostsStat() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSystemStatisticsValue(QueryConstants.SYSTEM_STATS_HOST_ENTITY); }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__CREATE); addCustomValue(GlusterConstants.VOLUME_SNAPSHOT_NAME, getParameters().getSnapshot().getSnapshotName()); super.setActionMessageParameters(); }
<START_MOD>private org.ovirt.engine.api.model.GlusterBrick populateAdvancedDetails(org.ovirt.engine.api.model.GlusterBrick model, org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volumeEntity = getEntity(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity.class, VdcQueryType.GetGlusterVolumeById, new org.ovirt.engine.core.common.queries.IdQueryParameters(entity.getVolumeId()), null, true); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails detailsEntity = getEntity(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails.class, VdcQueryType.GetGlusterVolumeAdvancedDetails, new org.ovirt.engine.core.common.queries.gluster.GlusterVolumeAdvancedDetailsParameters(volumeEntity.getClusterId(), volumeEntity.getName(), entity.getQualifiedName(), true), null, true); org.ovirt.engine.api.model.GlusterBrickAdvancedDetails detailsModel = getMapper(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails.class, org.ovirt.engine.api.model.GlusterBrickAdvancedDetails.class).map(detailsEntity, null); model.setBrickDetails(detailsModel); return model; }<END_MOD>
<START_MOD>public static org.ovirt.engine.core.bll.ValidationResult isConnectionDoesNotExistForHostAndTarget(org.ovirt.engine.core.compat.Guid hostId, java.lang.String iqn) { org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension existingConnExt = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageServerConnectionExtensionDao().getByHostIdAndTarget(hostId, iqn); if (existingConnExt != null) { org.ovirt.engine.core.common.businessentities.VDS host = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(hostId); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_EXTENSION_ALREADY_EXISTS, java.lang.String.format(java.lang.String.format("$target %s", iqn)), java.lang.String.format("$vdsName %s", host.getName())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
public static void Init() { org.ovirt.engine.core.bll.VmTemplateHandler.mUpdateVmTemplate = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.bll.VmTemplateHandler.class); org.ovirt.engine.core.bll.VmTemplateHandler.BlankVmTemplateId = new org.ovirt.engine.core.compat.Guid("00000000-0000-0000-0000-000000000000"); org.ovirt.engine.core.bll.VmTemplateHandler.mUpdateVmTemplate.AddPermittedFields(new java.lang.String[]{ "name", "description", "domain", "os", "osType", "autoSuspend", "interfaces", "memSizeMb", "numOfSockets", "cpuPerSocket", "vdsGroupId", "numOfMonitors", "allowConsoleReconnect", "usbPolicy", "timeZone", "diskMap", "defaultBootSequence", "disabled", "isoPath", "diskImageMap", "defaultDisplayType", "priority", "autoStartup", "stateless", "initrdUrl", "kernelUrl", "kernelParams", "images", "interfaces", "quotaId", "quotaName", "quotaEnforcementType", "migrationSupport", "dedicatedVmForVds", "smartcardEnabled", "dbGeneration", "deleteProtected", "quotaDefault"<START_MOD>, "vncKeyboardLayout"<END_MOD> }); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Running VM is hosted on {hostName}. Include {hostName} in dedicated hosts, or migrate VM to dedicated host prior to pinning.") java.lang.String ACTION_TYPE_FAILED_PINNED_VM_NOT_RUNNING_ON_DEDICATED_HOST();<END_MOD>
@java.lang.Override protected boolean canDoAction() { final org.ovirt.engine.core.bll.validator.ClusterValidator validator = new org.ovirt.engine.core.bll.validator.ClusterValidator(org.ovirt.engine.core.bll.AddVdsGroupCommand.getDbFacade(), org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroup()); <START_MOD>if (!(org.ovirt.engine.core.bll.AddVdsGroupCommand.validateClusterPolicy())) { <END_MOD>return <START_MOD>false; } return <END_MOD>((((((((((((validate(validator.nameNotUsed())) && (validate(validator.cpuTypeSupportsVirtService()))) && (validate(validator.versionSupported()))) && (validate(validator.dataCenterVersionMismatch()))) && (validate(validator.dataCenterExists()))) && (validate(validator.localStoragePoolAttachedToSingleCluster()))) && (validate(validator.qosBaloonSupported()))) && (validate(validator.glusterServiceSupported()))) && (validate(validator.clusterServiceDefined()))) && (validate(validator.mixedClusterServicesSupported()))) && (validate(validator.attestationServerConfigured()))) && (validate(validator.migrationSupported(org.ovirt.engine.core.bll.AddVdsGroupCommand.getArchitecture())))) && (validate(validator.virtIoRngSupported())); }
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.SetAmountOfMemory, new org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.Params(org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getRunOnVds(), org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getId(), org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getParameters().getVm().getMemSizeMb())); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.setSucceeded(true); } else { org.ovirt.engine.core.common.errors.VdcFault fault = new org.ovirt.engine.core.common.errors.VdcFault(); fault.setError(vdsReturnValue.getVdsError().getCode()); fault.setMessage(vdsReturnValue.getVdsError().getMessage()); org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getReturnValue().setFault(fault); } }<END_MOD>
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> getDynamicWarning() { return dynamicWarning; }<END_MOD>
<START_MOD>private void addKernelCmdlineCheckboxesListeners() { final org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs> listener = new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.EventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (isKernelCmdlineParsable()) { updateKernelCmdline(); } } }; getKernelCmdlineIommu().getEntityChangedEvent().addListener(listener); getKernelCmdlineKvmNested().getEntityChangedEvent().addListener(listener); getKernelCmdlineUnsafeInterrupts().getEntityChangedEvent().addListener(listener); getKernelCmdlinePciRealloc().getEntityChangedEvent().addListener(listener); }<END_MOD>
@java.lang.Override public org.ovirt.engine.api.common.security.auth.Principal validate(java.lang.String sessionId) { org.ovirt.engine.api.common.security.auth.Principal principal = null; org.ovirt.engine.core.common.queries.VdcQueryParametersBase params = new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(); params.setSessionId(sessionId); org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = backend.RunPublicQuery(VdcQueryType.ValidateSession, params); if (queryReturnValue != null) { org.ovirt.engine.core.common.<START_MOD>businessentities.DbUser user = ((org.ovirt.engine.core.common.businessentities.DbUser<END_MOD>) (queryReturnValue.getReturnValue())); if (<START_MOD>user<END_MOD> != null) { principal = new org.ovirt.engine.api.common.security.auth.Principal(<START_MOD>user.getLoginName<END_MOD>(), null, <START_MOD>user.getDomain<END_MOD>()); sessionHelper.setSessionId(sessionId); current.set(<START_MOD>user<END_MOD>); } } if (principal != null) { validateSessionSucceeded(queryReturnValue); } else { validateSessionFailed(queryReturnValue); } return principal; }
public void setForceLabel(java.lang.String forceLabel) { this.forceLabel = forceLabel; <START_MOD>force.setIsAvailable(true); <END_MOD>onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("forceLabel")); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.network.VnicProfile)) { return false; } org.ovirt.engine.core.common.businessentities.network.VnicProfile other = ((org.ovirt.engine.core.common.businessentities.network.VnicProfile) (obj)); if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getCustomProperties(), other.getCustomProperties()))) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getId(), other.getId()))) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getName(), other.getName()))) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getNetworkId(), other.getNetworkId()))) { return false; } if (<START_MOD>!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getNetworkQoSId(), other.getNetworkQoSId()))) { return false; } if (<END_MOD>(isPortMirroring()) != (other.isPortMirroring())) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getDescription(), other.getDescription()))) { return false; } return true; }
public void fillMetadataDevicesInfo(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic, org.ovirt.engine.core.compat.Guid vdsId) { try { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainFromIrs = ((org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.HSMGetStorageDomainInfo, new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(vdsId, storageDomainStatic.getId())).getReturnValue())).getFirst(); storageDomainStatic.setFirstMetadataDevice(domainFromIrs.getFirstMetadataDevice()); storageDomainStatic.setVgMetadataDevice(domainFromIrs.getVgMetadataDevice()); } catch (java.lang.Exception e) { <START_MOD>storageDomainStatic.setFirstMetadataDevice(null); storageDomainStatic.setVgMetadataDevice(null); <END_MOD>org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info( to get the domain info, ignoring } }
<START_MOD>private boolean doesNicHaveMacAddress(org.ovirt.engine.core.common.businessentities.network.VmNic vmNic) { return (vmNic.getMacAddress()) != null; }<END_MOD>
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.qos.QosBase.class, to = org.ovirt.engine.api.model.QoS.class) public static org.ovirt.engine.api.model.QoS map(org.ovirt.engine.core.common.businessentities.qos.QosBase entity, org.ovirt.engine.api.model.QoS template) { org.ovirt.engine.api.model.QoS model = (template != null) ? template : new org.ovirt.engine.api.model.QoS(); model.setId(entity.getId().toString()); model.setName(entity.getName()); model.setType(org.ovirt.engine.api.model.QosType.fromValue(entity.getQosType().toString()).name().toLowerCase()); model.setDataCenter(new org.ovirt.engine.api.model.DataCenter()); model.getDataCenter().setId(entity.getStoragePoolId().toString()); model.setDescription(entity.getDescription()); <START_MOD>org.ovirt.engine.api.restapi.types.QosMapper.mapQosTypeToModel(entity, model); return model<END_MOD>; }
<START_MOD>private void updateGraphicsDevice() { for (org.ovirt.engine.core.common.businessentities.GraphicsType type : org.ovirt.engine.core.common.businessentities.GraphicsType.values()) { if (!(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().shouldUpdateGraphicsDevice(type))) { continue; } org.ovirt.engine.core.common.businessentities.GraphicsDevice vmGraphicsDevice = getGraphicsDevOfType(type); if (vmGraphicsDevice == null) { if ((org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getGraphicsDevice(type)) != null) { org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getGraphicsDevice(type).setVmId(getVmId()); org.ovirt.engine.core.bll.UpdateVmCommand.getBackend().runInternalAction(VdcActionType.AddGraphicsDevice, new org.ovirt.engine.core.bll.GraphicsParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getGraphicsDevice(type))); } } else { if ((org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getGraphicsDevice(type)) == null) { org.ovirt.engine.core.bll.UpdateVmCommand.getBackend().runInternalAction(VdcActionType.RemoveGraphicsDevice, new org.ovirt.engine.core.bll.GraphicsParameters(vmGraphicsDevice)); } else { org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getGraphicsDevice(type).setVmId(getVmId()); org.ovirt.engine.core.bll.UpdateVmCommand.getBackend().runInternalAction(VdcActionType.UpdateGraphicsDevice, new org.ovirt.engine.core.bll.GraphicsParameters(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getGraphicsDevice(type))); } } } }<END_MOD>
protected void updateLiveStorageMigrationEnabled() { final org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); org.ovirt.engine.core.compat.Version dcCompatibilityVersion = ((dataCenter.getCompatibilityVersion()) != null) ? dataCenter.getCompatibilityVersion() : new org.ovirt.engine.core.compat.Version(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); model.setIsLiveStorageMigrationEnabled(((java.lang.Boolean) (returnValue))); } }), VdcActionType.LiveMigrateVmDisks, vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), dcCompatibilityVersion); } }), vm.getStoragePoolId()); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand.getParameters().getVdsId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VDS, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult isVersionCompatible() { org.ovirt.engine.core.common.osinfo.OsRepository osRepository = org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().get(org.ovirt.engine.core.common.osinfo.OsRepository.class); java.util.ArrayList<java.lang.String> networkDevices = osRepository.getNetworkDevices(osId, version); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType> interfaceTypes = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType>(); for (java.lang.String networkDevice : networkDevices) { interfaceTypes.add(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.valueOf(networkDevice)); } return !(interfaceTypes.contains(org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(nic.getType()))) ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.VM_INTERFACE_VERSION_IS_NOT_SUPPORTED) : org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.StoragePool dc) { return dc.getname(); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { getDbFacade().getDiskProfileDao().remove(getParameters().getProfileId()); }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessageVariable<END_MOD>("volumeName", org.ovirt.engine.core.bll.gluster.GlusterAsyncCommandBase.getGlusterVolumeName()); <START_MOD>addValidateMessageVariable<END_MOD>("vdsGroup", org.ovirt.engine.core.bll.gluster.GlusterAsyncCommandBase.getVdsGroupName()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if (vm.isHostedEngine()) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostsToRunOn = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { int haScore = host.getHighlyAvailableScore(); if (haScore > 0) { hostsToRunOn.add(host); org.ovirt.engine.core.bll.scheduling.policyunits.HostedEngineHAClusterFilterPolicyUnit.log.debug( '{}' wasn filtered out as it has a score of {} host.getName(), haScore); } else { org.ovirt.engine.core.bll.scheduling.policyunits.HostedEngineHAClusterFilterPolicyUnit.log.debug( '{}' was filtered out as it doesn have a positive score (the score is {}) host.getName(), haScore); messages.addMessage(host.getId(), <START_MOD>EngineMessages<END_MOD>.VAR__DETAIL__NOT_HE_HOST.name()); } } return hostsToRunOn; } else { return hosts; } }
public static boolean CommonNetworkValidation(final org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> network, java.util.ArrayList<java.lang.String> canDoActionMessages) { if ((network.getstorage_pool_id()) != null) { java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> groups = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsGroupDAO().getAllForStoragePool(network.getstorage_pool_id().getValue()); for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : groups) { java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> networks = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDAO().getAllForCluster(cluster.getId()); if (null != (org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(networks, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.NetworkEntity n) { return n.getname().equals(<END_MOD>network<START_MOD>.getname()); } }))) { canDoActionMessages.add(VdcBllMessages.NETWORK_CLUSTER_NETWORK_IN_USE.toString());<END_MOD> return <START_MOD>false; } } }<END_MOD> return true; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("disk_type=") java.lang.String diskTypeSearchPrefix();
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeStatusReturnForXmlRpc glusterVolumeStatus(org.ovirt.engine.core.compat.Guid clusterId, java.lang.String volumeName, java.lang.String brickName, java.lang.String volumeStatusOption) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.status").withParameter("volumeName", volumeName).withParameter("brick", brickName).withParameter("statusOption", volumeStatusOption).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeStatusReturnForXmlRpc(clusterId, response); }
public <START_MOD>void<END_MOD> <START_MOD>auditClientIpChange<END_MOD>() { <START_MOD>final<END_MOD> <START_MOD>org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVmId(dbVm.getId()); event.setUserName(dbVm.getDynamicData().getConsoleCurrentUserName()); auditLogDirector.log(event, (org.apache.commons.lang.StringUtils.isEmpty(dbVm.getDynamicData().getClientIp()) ? org.ovirt.engine.core.common.AuditLogType.VM_CONSOLE_DISCONNECTED : org.ovirt.engine.core.common.AuditLogType.VM_CONSOLE_CONNECTED))<END_MOD>; }
public org.ovirt.engine.core.bll.ValidationResult validateUniqueId() { if ((org.apache.commons.lang.StringUtils.isBlank(vds.getUniqueId())) && (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.InstallVds))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.VDS_NO_UUID); } return ValidationResult.VALID; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.scheduling.AffinityGroup group) { java.lang.String hostNames = getHostNames(group)<START_MOD>.stream().collect(java.util.stream.Collectors.joining(<END_MOD>   if (hostNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityGroupsView.constants.noMembersAffinityGroup(); } return hostNames; }
public static void proceedLUNInDb(final org.ovirt.engine.core.common.businessentities.storage.LUNs lun, org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>StorageDomainCommandBase.proceedLUNInDb(lun, storageType, ""); }
<START_MOD>@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.event_subscriber o1, org.ovirt.engine.core.common.businessentities.event_subscriber o2) { return new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator().compare(o1.getevent_up_name(), o2.getevent_up_name()); }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultMessage("Error Connecting to {0} using {1} protocol") java.lang.String errorConnectingToConsole(java.lang.String name, java.lang.String protocol);<END_MOD>
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm()) == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND); return false; } if (!(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.canRunActionOnNonManagedVm())) { return false; } if (!(isSpecifiedDisksExist(getParameters().getDisks()))) { return false; } org.ovirt.engine.core.bll.validator.VmValidator vmValidator = createVmValidator(); org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotValidator = createSnapshotValidator(); org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator spValidator = createStoragePoolValidator(); if (!((((((((validateVM(vmValidator)) && (validate(spValidator.isUp()))) && (validate(vmValidator.vmNotIlegal()))) && (validate(vmValidator.vmNotLocked()))) && (validate(snapshotValidator.vmNotDuringSnapshot(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId())))) && (validate(snapshotValidator.vmNotInPreview(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId())))) && (validate(vmValidator.vmNotDuringMigration()))) && (validate(vmValidator.vmNotRunningStateless())))) { return false; } <START_MOD>return <END_MOD>validateStorageDomains(<START_MOD>); }<END_MOD>
@org.junit.Test public void testIsDomainExistAndActiveDomainNotExists() { validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(null); assertEquals( failure for null domain <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST, validator.isDomainExistAndActive().getMessage()); }
@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult vmNotInPreview(org.ovirt.engine.core.compat.Guid vmId) { if (vmInPreview) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_IN_PREVIEW); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void initListBoxEditors() { raidTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.RaidType>()); <START_MOD>cacheDevicePathEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.CacheDevicePathType>()); cacheModeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.CacheModeType>()); <END_MOD>}
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command);<START_MOD> if (command == (getNewCommand())) { newSubnet(); } else<END_MOD> if (command == (getRemoveCommand())) { remove(); } else if ("Cancel".equals(command.getName())) { cancel(); } }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.vm_pools> getAllForUser(org.ovirt.engine.core.compat.Guid userid) { java.util.List<org.ovirt.engine.core.common.businessentities.vm_pools> result = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.vm_pools>(); org.hibernate.Query query = getSession().createQuery( DbUser where id = :user_id query.setParameter("user_id", userid); org.ovirt.engine.core.common.businessentities.DbUser user = ((org.ovirt.engine.core.common.businessentities.DbUser) (query.uniqueResult())); if (user != null) { org.hibernate.Criteria criteria = getSession().createCriteria(org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD>.class).add(org.hibernate.criterion.Restrictions.in("name", org.ovirt.engine.core.dao.VmPoolDAOHibernateImpl.splitApartNames(user.getgroups()))); java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD>> adElements = criteria.list(); org.ovirt.engine.core.compat.Guid[] ids = new org.ovirt.engine.core.compat.Guid[(adElements.size()) + 1]; ids[0] = userid; for (int index = 0; index < (adElements.size()); index++) { ids[(index + 1)] = adElements.get(index).getid(); } query = getSession().createQuery(( pool   + (((( vm_pools pool, permissions perms, roles role   +   pool.id = perms.objectId   +   perms.adElementId in ( :adElements )   +   perms.roleId = role.id   +   role.type = 2 query.setParameterList("adElements", ids); result = query.list(); } return result; }
<START_MOD>private boolean isNewServer(java.lang.String serverName, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks = volume.getBricks(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity currentBrick : bricks) { if (currentBrick.getServerName().equals(serverName)) { return false; } } return true; }<END_MOD>
<START_MOD>@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.GetAllDataCentersQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.GetAllDataCentersQuery.getDbFacade().getStoragePoolDAO().getAll(org.ovirt.engine.core.bll.GetAllDataCentersQuery.getUserID(), org.ovirt.engine.core.bll.GetAllDataCentersQuery.getParameters().isFiltered())); }<END_MOD>
public static void runAndAssertCanDoActionSuccess(org.ovirt.engine.core.bll.CommandBase<?> command) { boolean canDoAction = command.canDoAction(); assertTrue(java.text.MessageFormat.format( canDoAction expected to succeed<START_MOD>,<END_MOD> but failed, messages are: {0} command.getReturnValue().getCanDoActionMessages()), canDoAction); }
private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> runExternalFilters(java.util.ArrayList<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl> filters, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, java.util.List<java.lang.String> messages<START_MOD>) { java.util.List<org.ovirt.engine.core.compat.Guid> filteredIDs = null; if (filters != null) { java.util.List<java.lang.String> filterNames = new java.util.ArrayList<java.lang.String>(); for (<END_MOD>org.ovirt.engine.core.bll.scheduling.<START_MOD>PolicyUnitImpl filter : filters<END_MOD>) { <START_MOD>filterNames.add(filter.getName()); } <END_MOD>java.util.List<org.ovirt.engine.core.compat.Guid> <START_MOD>hostIDs = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hostList) { hostIDs.add(host.getId()); } <END_MOD>filteredIDs = <START_MOD>org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerFactory.getInstance().runFilters(<END_MOD>filterNames<START_MOD>, hostIDs, vm.getId(), parameters<END_MOD>); } <START_MOD>return intersectHosts(<END_MOD>hostList<START_MOD>, filteredIDs<END_MOD>); }
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("Tenant ID") java.lang.String storagePopupGlanceTenantIdLabel();<END_MOD>
@java.lang.Override protected void Connect() { if ((getEntity()) != null) { getLogger().Debug( to Spice console... if (!(getspice().getIsInstalled())) { getLogger().Info( client is not installed. getspice().Install(); return; } if ((getConfigurator().getIsAdmin()) && ((getspice().getCurrentVersion().compareTo(getspice().getDesiredVersion())) < 0)) { getLogger().Info((( client version is not as desired ( + (getspice().getDesiredVersion())) + ")")); getspice().Install(); return; } if ((getEntity().getRunOnVds()) == null) { return; } if ((!(getEntity().getVmOs().isWindows())) || ((getEntity().getSpiceDriverVersion()) == null)) { getspice().setIsWanOptionsEnabled(false); } <START_MOD>org.ovirt.engine.ui.uicommonweb.UICommand setVmTicketCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("setVmCommand", new org.ovirt.engine.ui.uicommonweb.BaseCommandTarget() { @java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand uiCommand) { setVmTicket(); } }); executeCommandWithConsoleSafenessWarning(setVmTicketCommand); } }<END_MOD>
private boolean checkCanPerformRegularUpdate() { if ((oldDisk.getDiskInterface()) != (newDisk.getDiskInterface())) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> allVmInterfaces = org.ovirt.engine.core.<START_MOD>bll.UpdateVmDiskCommand<END_MOD>.getVmNetworkInterfaceDao().getAllForVm(org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.Disk> allVmDisks = new java.util.LinkedList<org.ovirt.engine.core.common.businessentities.Disk>(getOtherVmDisks()); allVmDisks.add(newDisk); if (!(checkPciAndIdeLimit(org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVm().getNumOfMonitors(), allVmInterfaces, allVmDisks, org.ovirt.engine.core.bll.UpdateVmDiskCommand.getReturnValue().getCanDoActionMessages()))) { return false; } } if (newDisk.isBoot()) { org.ovirt.engine.core.bll.VmHandler.updateDisksForVm(org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVm(), getOtherVmDisks()); for (org.ovirt.engine.core.common.businessentities.Disk disk : org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVm().getDiskMap().values()) { if (disk.isBoot()) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_BOOT_IN_USE); org.ovirt.engine.core.bll.UpdateVmDiskCommand.getReturnValue().getCanDoActionMessages().add(java.lang.String.format( %1$s disk.getDiskAlias())); return false; } } } org.ovirt.engine.core.bll.ImagesHandler.setDiskAlias(newDisk, org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVm()); return validateShareableDisk(); }
@java.lang.Override <START_MOD>protected<END_MOD> <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.utils.ToStringBuilder<END_MOD> <START_MOD>appendAttributes<END_MOD>(<START_MOD>org.ovirt.engine.core.common.utils.ToStringBuilder tsb<END_MOD>) { return super.<START_MOD>appendAttributes<END_MOD>(<START_MOD>tsb<END_MOD>)<START_MOD>.append("storageType"<END_MOD>, getStorageType()); }
<START_MOD>public void setSnapshotPreviewAction(org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotPreviewAction snapshotPreviewAction) { this.snapshotPreviewAction = snapshotPreviewAction; }<END_MOD>
@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic<END_MOD>, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createHANotRunningAndUknown(); }
org.ovirt.engine.ui.common.uicommon.model.DetailModelProvider<org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel, org.ovirt.engine.ui.uicommonweb.models.vms.<START_MOD>VmGuestInfoModel<END_MOD>> <START_MOD>getSubTabVirtualMachineGuestInfoModelProvider<END_MOD>();
<START_MOD>private org.ovirt.engine.core.common.businessentities.network.NetworkFilter resolveVnicProfileDefaultNetworkFilter() { final org.ovirt.engine.core.compat.Version dataCenterVersion = resolveDataCenterVersion(); final java.lang.String networkFilterName = ((org.ovirt.engine.core.common.FeatureSupported.antiMacSpoofing(dataCenterVersion)) && (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EnableMACAntiSpoofingFilterRules))) ? org.ovirt.engine.core.common.businessentities.network.NetworkFilter.VDSM_NO_MAC_SPOOFING : org.ovirt.engine.core.common.businessentities.network.NetworkFilter.NON_CONFIGURABLE_NETWORK_FILTER; org.ovirt.engine.core.common.businessentities.network.NetworkFilter networkFilter = networkFilterDao.getNetworkFilterByName(networkFilterName); return networkFilter; }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Directory should be at least 2 characters java.lang.String invalidBrickDirectoryAtleastTwoCharacterseMsg();
public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel SystemTreeSelectedItem) { super.initialize(); setHash(((getHashName()) + (new java.util.Date()))); getMemSize().setEntity(256); getMinAllocatedMemory().setEntity(256); getIsStateless().setEntity(false); getIsRunAndPause().setEntity(false); getIsSmartcardEnabled().setEntity(false); isConsoleDeviceEnabled.setEntity(false); getIsHighlyAvailable().setEntity(false); getIsAutoAssign().setEntity(true); getIsTemplatePublic().setEntity(true); getIsSingleQxlEnabled().setEntity(false); <START_MOD>selectSsoMethod(SsoMethod.GUEST_AGENT); <END_MOD>getHostCpu().setEntity(false); getMigrationMode().setIsChangable(true); getCdImage().setIsChangable(false); initOSType(); initDisplayProtocol(); initFirstBootDevice(); initNumOfMonitors(); initAllowConsoleReconnect(); initMinimalVmMemSize(); initMaximalVmMemSize32OS(); initMigrationMode(); initVncKeyboardLayout(); behavior.initialize(SystemTreeSelectedItem); }
<START_MOD>@org.junit.Test public void testRemoveNonExistant() throws java.lang.Exception { setUpEntityQueryExpectations(VdcQueryType.GetNetworksByStoragePoolId, org.ovirt.engine.core.common.queries.StoragePoolQueryParametersBase.class, new java.lang.String[]{ "StoragePoolId" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworksResourceTest.DATA_CENTER_ID }, new java.util.LinkedList<org.ovirt.engine.core.common.businessentities.network.Network>(), null); control.replay(); try { collection.remove(org.ovirt.engine.api.restapi.resource.NON_EXISTANT_GUID.toString()); fail("expected WebApplicationException"); } catch (javax.ws.rs.WebApplicationException wae) { assertNotNull(wae.getResponse()); assertEquals(404, wae.getResponse().getStatus()); } }<END_MOD>
<START_MOD>private static org.ovirt.engine.api.rsdl.Node buildNode(java.lang.Class<?> resource, java.lang.String path) { return new org.ovirt.engine.api.rsdl.Node.Builder().name(resource.getSimpleName()).path(path).subCollections(org.ovirt.engine.api.rsdl.ResourceTree.getSubResources(resource)).actions(org.ovirt.engine.api.rsdl.ResourceTree.getActions(resource)).build(); }<END_MOD>
<START_MOD>public void edit() { final T qos = ((T) (org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.DataCenterQosListModel.getSelectedItem())); if ((org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.DataCenterQosListModel.getWindow()) != null) { return; } final org.ovirt.engine.ui.uicommonweb.models.datacenters.qos.EditQosModel<T, P> qosModel = getEditQosModel(qos); setWindow(qosModel); qosModel.getDataCenters().setItems(java.util.Arrays.asList(getEntity())); qosModel.getDataCenters().setSelectedItem(getEntity()); }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__DESTROY_DOMAIN); }
<START_MOD>private void generateWriter(org.ovirt.api.metamodel.concepts.EnumType type) { javaBuffer = new org.ovirt.api.metamodel.tool.JavaClassBuffer(); org.ovirt.api.metamodel.tool.JavaClassName writerName = javaTypes.getXmlWriterName(type); javaBuffer.setClassName(writerName); generateWriterSource(type); try { javaBuffer.write(outDir); } catch (java.io.IOException exception) { throw new java.lang.RuntimeException((("Can\'t write file for XML writer \"" + writerName) + "\""), exception); } }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VDS get(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getCallsHandler().executeReadList("GetVdsByVdsId", org.ovirt.engine.core.dao.<START_MOD>VdsDAOImpl<END_MOD>.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("vds_id", id).addValue("user_id", userID).addValue("is_filtered", isFiltered)); return (vdsList.size()) ==   ? null : uniteAgentsSingleVds(vdsList); }
<START_MOD>private void updateAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> selectedLabels = org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.common.businessentities.Label> previouslySelectedLabels = labelDao.getAllByEntityIds(java.util.Collections.singletonList(getVmId())); java.util.Set<org.ovirt.engine.core.common.businessentities.Label> labelsToAdd = new java.util.HashSet(selectedLabels); labelsToAdd.removeAll(previouslySelectedLabels); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToAdd) { label.addVm(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); labelDao.update(label); } java.util.Set<org.ovirt.engine.core.common.businessentities.Label> labelsToRemove = new java.util.HashSet(previouslySelectedLabels); labelsToRemove.removeAll(selectedLabels); for (org.ovirt.engine.core.common.businessentities.Label label : labelsToRemove) { label.removeVm(org.ovirt.engine.core.bll.UpdateVmCommand.getVm()); labelDao.update(label); } }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (target)); org.ovirt.engine.core.common.businessentities.VmTemplate template = ((org.ovirt.engine.core.common.businessentities.VmTemplate) (returnValue)); <START_MOD>setupRootTemplate(template.getBaseTemplateId()); <END_MOD>model.getTemplate().setItems(java.util.<START_MOD>Collections<END_MOD>.<START_MOD>singletonList<END_MOD>(template)); model.getTemplate().setSelectedItem(template); model.getTemplate().setIsChangable(false); postInitTemplate(); }
private org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue fence(org.ovirt.engine.core.common.businessentities.FenceAgent fenceAgent, int retries) { org.ovirt.engine.core.bll.FenceExecutor fenceExecutor = createFenceExecutor(); org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue fenceExecutionResult = fenceExecutor.fence(getAction(), fenceAgent); if (wasSkippedDueToStatus(fenceExecutionResult)) { log.info( to {} VDS using fence agent{} skipped: Host is already at the requested state. getAction().name().toLowerCase(), fenceAgent.getId()); } else <START_MOD>if (wasSkippedDueToPolicy(fenceExecutionResult)) { return fenceExecutionResult; } else <END_MOD>{ if (fenceExecutionResult.getSucceeded()) { boolean requiredStatusAchieved = waitForStatus(); int i = 0; while ((!requiredStatusAchieved) && (i < retries)) { fenceExecutionResult = fenceExecutor.fence(getAction(), fenceAgent); requiredStatusAchieved = waitForStatus(); i++; } if (requiredStatusAchieved) { handleSpecificCommandActions(); } else { auditFailure(); } fenceExecutionResult.setSucceeded(requiredStatusAchieved); } else { logAgentFailure(fenceExecutionResult); } } return fenceExecutionResult; }
@java.lang.Override public void onFailure(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase> operation, final java.lang.Throwable caught) { if (ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ( to execute runAction:   + caught), caught); failureEventHandler(caught); org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult(actionType, parameters, null, state); if (callback != null) { callback.executed(f); } <START_MOD>org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent.fire(this, state); <END_MOD>}
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pool.PoolSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.pools.PoolListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.VmPool>> modelProvider) { return new org.ovirt.engine.ui.common.<START_MOD>uicommon<END_MOD>.<START_MOD>model<END_MOD>.<START_MOD>GroupedTabData<END_MOD>(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pool.SubTabPoolPermissionPresenter.constants.poolPermissionSubTabLabel(), 2); }
<START_MOD>@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__ATTACH_ACTION_TO); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__STORAGE__CONNECTION); }<END_MOD>
@java.lang.Override public int hashCode() { <START_MOD>return<END_MOD> <START_MOD>java.util.Objects.hash<END_MOD>(id.tagId<START_MOD>,<END_MOD> id.templateId<START_MOD>, defaultDisplayType<END_MOD>); }
<START_MOD>private void updateFunctions(org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.NewClusterPolicyModel model) { org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.FunctionPolicyUnitPanel functionPolicyUnitPanel; usedFunctionPanel.clear(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.scheduling.PolicyUnit, java.lang.Integer> pair : model.getUsedFunctions()) { functionPolicyUnitPanel = new org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.FunctionPolicyUnitPanel(pair.getFirst(), model, true, false, pair.getSecond()); usedFunctionPanel.add(functionPolicyUnitPanel); functionPolicyUnitPanel.initWidget(); } unusedFunctionPanel.clear(); for (org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit : model.getUnusedFunctions()) { functionPolicyUnitPanel = new org.ovirt.engine.ui.webadmin.section.main.view.popup.scheduling.panels.FunctionPolicyUnitPanel(policyUnit, model, false, false, null); unusedFunctionPanel.add(functionPolicyUnitPanel); functionPolicyUnitPanel.initWidget(); } }<END_MOD>
<START_MOD>private void updatePassDiscardAvailability() { if (getIsFloating()) { getPassDiscard().setIsAvailable(false); } else { org.ovirt.engine.core.common.businessentities.storage.DiskInterface selectedInterface = getDiskInterface().getSelectedItem(); org.ovirt.engine.core.common.businessentities.storage.DiskStorageType selectedDiskStorageType = getDiskStorageType().getEntity(); boolean isApplicableInterface = (selectedInterface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI)) || (selectedInterface == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.IDE)); boolean isApplicableDiskStorageType = (selectedDiskStorageType == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.LUN)) || (selectedDiskStorageType == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)); boolean isApplicalbeStorageType = (selectedDiskStorageType != (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) || (((getStorageDomain().getSelectedItem()) != null) && (getStorageDomain().getSelectedItem().getStorageType().isBlockDomain())); if ((isApplicableInterface && isApplicableDiskStorageType) && isApplicalbeStorageType) { getPassDiscard().setIsAvailable(true); if (!(getIsNew())) { getPassDiscard().setEntity(getDiskVmElement().isPassDiscard()); } } else { getPassDiscard().setIsAvailable(false); getPassDiscard().setEntity(false); } } }<END_MOD>
<START_MOD>@org.junit.Test public void readOnlyIsNotSupportedByDiskInterface() { disk.setReadOnly(true); disk.setDiskInterface(DiskInterface.IDE); assertThat(validator.isDiskInterfaceSupportReadOnly(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_IDE_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR)); }<END_MOD>
<START_MOD>@javax.validation.constraints.NotNull <END_MOD>private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> runExternalFilters(<START_MOD>@javax.validation.constraints.NotNull <END_MOD>java.util.ArrayList<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl> filters, <START_MOD>@javax.validation.constraints.NotNull <END_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, <START_MOD>@javax.validation.constraints.NotNull <END_MOD>org.ovirt.engine.core.common.businessentities.VM vm, <START_MOD>@javax.validation.constraints.NotNull <END_MOD>java.util.Map<java.lang.String, java.lang.String> parameters, <START_MOD>@javax.validation.constraints.NotNull <END_MOD>java.util.List<java.lang.String> messages, <START_MOD>@javax.validation.constraints.NotNull <END_MOD>java.lang.String correlationId, <START_MOD>@javax.validation.constraints.NotNull <END_MOD>org.ovirt.engine.core.bll.scheduling.SchedulingManager.SchedulingResult result) { <START_MOD>java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = hostList.stream().map(VDS::getId).collect(java.util.stream.Collectors.toList()); for (final org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBroker broker : externalBrokers) { java.util.List<java.lang.String> filterNames = <END_MOD>filters<START_MOD>.stream().filter(( f) -> f.getPolicyUnit().getBroker().equals(broker.getId())).map(( f) -> f.getPolicyUnit().getName()).collect(java.util.stream.Collectors.toList());<END_MOD> java.util.List<org.ovirt.engine.core.compat.Guid> <START_MOD>filteredIDs = broker.runFilters(filterNames, <END_MOD>hostIDs<START_MOD>, vm.getId(), parameters); logFilterActions(hostList, new java.util.HashSet(filteredIDs), EngineMessage.VAR__FILTERTYPE__EXTERNAL, java.util.Arrays.toString(filterNames.toArray()), result, correlationId); hostList<END_MOD> = <START_MOD>intersectHosts(hostList, filteredIDs<END_MOD>); } return hostList; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( must be Base64 java.lang.String cloudInitBase64Message();
<START_MOD>public void addJob(org.ovirt.engine.core.common.businessentities.VmJob vmJob) { vmJobDao.save(vmJob); vmJobs.add(vmJob); org.ovirt.engine.core.vdsbroker.monitoring.VmJobsMonitoring.log.info("Stored placeholder for job id '{}'", vmJob.getId()); }<END_MOD>
<START_MOD>private int getActiveHostsStat() { java.lang.String[] activeVdsStatuses = new java.lang.String[]{ java.lang.String.valueOf(VDSStatus.Up.getValue()), java.lang.String.valueOf(VDSStatus.PreparingForMaintenance.getValue()) }; return org.ovirt.engine.core.bll.GetSystemStatisticsQuery.getDbFacade().getSystemStatisticsValue(QueryConstants.SYSTEM_STATS_HOST_ENTITY, org.apache.commons.lang.StringUtils.join(activeVdsStatuses, org.ovirt.engine.core.bll.GetSystemStatisticsQuery.COMMA_DELIMITER)); }<END_MOD>
<START_MOD>@java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { final org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExportVmModel) (target)); @java.lang.SuppressWarnings("unchecked") final java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> diskList = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>) (returnValue)); final java.util.List<org.ovirt.engine.core.common.businessentities.Disk> nonExportableDisks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); for (org.ovirt.engine.core.common.businessentities.Disk disk : diskList) { if (!(disk.isAllowSnapshot())) { nonExportableDisks.add(disk); } } if (!(nonExportableDisks.isEmpty())) { final java.lang.StringBuilder s = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.businessentities.Disk disk : nonExportableDisks) { if ((s.length()) > 0) { s.append(", "); } s.append(disk.getDiskAlias()); } model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().disksWillNotBePartOfTheExportedVM(s.toString())); } }<END_MOD>
<START_MOD>@java.lang.Override protected org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget createWidget(org.ovirt.engine.ui.uicommonweb.models.vms.key_value.KeyValueLineModel value) { org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget keyLineWidget = new org.ovirt.engine.ui.common.widget.form.key_value.KeyLineWidget(); keyLineWidget.edit(value); keyLineWidget.setUsePatternFly(usePatternFly); widgets.add(keyLineWidget); return keyLineWidget; }<END_MOD>
private org.ovirt.engine.core.common.businessentities.VolumeType getMemoryVolumeType() { return org.ovirt.engine.core.bll.HibernateVmCommand.getMemoryVolumeTypeForPool(org.ovirt.engine.core.bll.HibernateVmCommand.<START_MOD>getStorageDomain<END_MOD>().getStorageType()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if ((vm.getRunOnVds()) != null) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostsToRunOn = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VDS srcVds = getVdsDao().get(vm.getRunOnVds()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getId().equals(vm.getRunOnVds())) { org.ovirt.engine.core.bll.scheduling.policyunits.MigrationPolicyUnit.log.debug( '{}' already runs on host '{}', filtering host vm.getName(), host.getName()); messages.addMessage(host.getId(), <START_MOD>EngineMessages<END_MOD>.VAR__DETAIL__SAME_HOST.toString()); continue; } if (!(validateDestinationVdsAddress(srcVds, host))) { org.ovirt.engine.core.bll.scheduling.policyunits.MigrationPolicyUnit.log.debug( '{}' resolves to the same machine as host '{}', filtering out srcVds.getName(), host.getName()); messages.addMessage(host.getId(), <START_MOD>EngineMessages<END_MOD>.VAR__DETAIL__SAME_HOST.toString()); continue; } hostsToRunOn.add(host); } return hostsToRunOn; } return hosts; }
<START_MOD>public java.lang.Boolean isSupportsDiscard() { return supportsDiscard; }<END_MOD>
public void updateConvertOperation(java.lang.String description, int progress) { this.convertOperationDescription = description; this.convertOperationProgress = progress; <START_MOD>if (progress == (-1)) { convertProxyHostId = null; <END_MOD>}<START_MOD> }<END_MOD>
public org.ovirt.engine.core.bll.network.macpool.MacPool createDecoratedPool(org.ovirt.engine.core.bll.network.macpool.MacPool <START_MOD>macPool<END_MOD>, java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool = decoratePool(<START_MOD>macPool<END_MOD>, decorators); return lockedObjectFactory.createLockingInstance(decoratedPool, org.ovirt.engine.core.bll.network.macpool.MacPool.class, lockForMacPool(<START_MOD>macPool.getId()<END_MOD>)); }
void initTableActionButtons() { getTable().addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.core.common.businessentities.storage.Disk>(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageDiskView.constants.removeDisk()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getRemoveCommand(); } }); <START_MOD>getTable().addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.core.common.businessentities.storage.Disk>(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageDiskView.constants.uploadImage()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getUploadCommand(); } }); }<END_MOD>
<START_MOD>@org.junit.Test public void canDoActionFailsMissingIsoFile() { mockVdsWithOsVersion(org.ovirt.engine.core.bll.UpgradeOvirtNodeCommandTest.VALID_OVIRT_VERSION); org.ovirt.engine.core.common.action.InstallVdsParameters param = org.ovirt.engine.core.bll.UpgradeOvirtNodeCommandTest.createParameters(); param.setoVirtIsoFile(org.ovirt.engine.core.bll.UpgradeOvirtNodeCommandTest.INVALID_VERSION_OVIRT_ISO_FILENAME); org.ovirt.engine.core.bll.UpgradeOvirtNodeCommand<org.ovirt.engine.core.common.action.InstallVdsParameters> command = createCommand(param); org.ovirt.engine.core.bll.UpgradeOvirtNodeCommandTest.assertFailsWithCanDoActionMessage(command, VdcBllMessages.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE); }<END_MOD>
private void addVmCluster(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(new java.lang.Object[]{ getModel(), clusters }, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (array[0])); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusterList = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>) (array[1])); org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ((org.ovirt.engine.core.common.businessentities.VDSGroup) (returnValue)); if (cluster != null) { clusterList.add(cluster); } java.util.Collections.sort(clusterList, new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer()); model.setClusters(model, clusterList, vm.getVdsGroupId()); } }, getModel().getHash()), vm.getVdsGroupId()); }
public java.lang.String getProvider() { return <START_MOD>(<END_MOD>provider<START_MOD>) != null ? provider : ""<END_MOD>; }
<START_MOD>@java.lang.Override public void buildBackendFromFrontend(F frontend, B backend, org.ovirt.engine.ui.uicommonweb.builders.BuilderList<F, B> rest) { parentsRest.head().buildBackendFromFrontend(frontend, backend, parentsRest.tail()); }<END_MOD>
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase; final org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.RestartVdsCommand.getVdsId(); final java.lang.String sessionId = org.ovirt.engine.core.bll.RestartVdsCommand.getParameters().getSessionId(); returnValueBase = executeVdsFenceAction(vdsId, sessionId, FenceActionType.Stop, VdcActionType.StopVds); if (returnValueBase.getSucceeded()) { executeFenceVdsManuallyAction(vdsId, sessionId); returnValueBase = executeVdsFenceAction(vdsId, sessionId, FenceActionType.Start, VdcActionType.StartVds); setSucceeded(returnValueBase.getSucceeded()); setFenceSucceeded(org.ovirt.engine.core.bll.RestartVdsCommand.getSucceeded()); <START_MOD>org.ovirt.engine.core.bll.RestartVdsCommand.setActionReturnValue(null); <END_MOD>} else { <START_MOD>setActionReturnValue(VdcActionType.StopVds); <END_MOD>org.ovirt.engine.core.bll.RestartVdsCommand.setSucceeded(false); } if (!(org.ovirt.engine.core.bll.RestartVdsCommand.getSucceeded())) { log.warnFormat( host action failed, updating host {0} to {1} vdsId, VDSStatus.NonResponsive.name()); runVdsCommand(VDSCommandType.SetVdsStatus, new org.ovirt.engine.core.common.vdscommands.SetVdsStatusVDSCommandParameters(vdsId, org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive)); } }
public static void GetNumOfMonitorList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { java.util.ArrayList<java.lang.Integer> nums = new java.util.ArrayList<java.lang.Integer>(); if (source != null) { java.lang.Iterable numEnumerable = ((java.lang.Iterable) (source)); java.util.Iterator numIterator = numEnumerable.iterator(); while (numIterator.hasNext()) { nums.add(java.lang.Integer.parseInt(numIterator.next().toString())); } } return nums; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetConfigurationValueParameters(ConfigurationValues.ValidNumOfMonitors, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }
public static <T extends org.ovirt.engine.core.common.action.VdcActionParametersBase> java.util.List<java.lang.String> validateInputs(java.util.List<java.lang.Class<?>> validationGroupList, T parameters) { java.util.List<java.lang.String> messages = java.util.Collections.emptyList(); java.util.Set<javax.validation.ConstraintViolation<T>> violations = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, validationGroupList.toArray(new java.lang.Class<?>[validationGroupList.size()])); if (!(violations.isEmpty())) { messages = new java.util.ArrayList<java.lang.String>(violations.size()); for (javax.validation.ConstraintViolation<T> constraintViolation : violations) { <START_MOD>if (!(constraintViolation.getMessage().isEmpty())) { <END_MOD>messages.add(constraintViolation.getMessage()); } } <START_MOD>} <END_MOD>return messages; }
private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.<START_MOD>storage.StorageJobCommand<END_MOD><?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info( {} id: '{}': attempting to determine the job status by polling the entity. cmd.getActionType(), cmd.getCommandId()); <START_MOD>org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus status = pollEntity(cmd); if (status != null) { <END_MOD>return <START_MOD>status; } org.ovirt.engine.core.bll.storage.EntityPollingCommand entityPollingCommand = ((org.ovirt.engine.core.bll.storage.EntityPollingCommand) (cmd));<END_MOD> if (<START_MOD>(entityPollingCommand.isJobFencingSupported()) && (!(cmd.getParameters().getJobStarted()))) { log.info( {} id: '{}': attempting to fence job {} cmd.getActionType(), cmd.getCommandId(), cmd.getJobId()); entityPollingCommand.attemptToFenceJob(); } return null; } if (<END_MOD>jobsReportedByHost) { log.error(( {} id: '{}': entity polling isn supported and the job isn reported by the host, +   it failed so that the command execution will end. cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } if (cmd.failJobWithUndeterminedStatus()) { log.error(( {} id: '{}': failed to determine the actual job status, considering as failed as per +   the command implementation cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } <START_MOD>log.error( {} id: '{}': failed to determine the actual job status, will retry to poll the job soon cmd.getActionType(), cmd.getCommandId()); return null; }<END_MOD>
@org.junit.Test public void lunAlreadyPartOfStorageDomains() { org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id(org.ovirt.engine.core.bll.storage<START_MOD>.domains<END_MOD>.StorageDomainCommandBaseTest.GUIDS[0].toString()); lun1.setStorageDomainId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id(org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>StorageDomainCommandBaseTest.GUIDS[1].toString()); lun2.setStorageDomainId(org.ovirt.engine.core.compat.Guid.newGuid()); doReturn(lunDao).when(cmd).getLunDao(); when(lunDao.getAll()).thenReturn(java.util.Arrays.asList(lun1, lun2)); java.util.List<java.lang.String> specifiedLunIds = java.util.Collections.singletonList(org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>StorageDomainCommandBaseTest.GUIDS[0].toString()); assertTrue(cmd.isLunsAlreadyInUse(specifiedLunIds)); java.util.List<java.lang.String> messages = cmd.getReturnValue().getCanDoActionMessages(); assertEquals(messages.size(), 2); assertEquals(messages.get(0), EngineMessage.ACTION_TYPE_FAILED_LUNS_ALREADY_PART_OF_STORAGE_DOMAINS.toString()); assertEquals(messages.get(1), java.lang.String.format( %1$s cmd.getFormattedLunId(lun1, lun1.getStorageDomainName()))); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( cannot be created since the VM contains a stateless Snapshot. java.lang.String snapshotCannotBeCreatedStatelessSnapshotMsg();
protected void updateUsbNativeMessageVisibility(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel object) { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = ((org.ovirt.engine.core.common.businessentities.VDSGroup) (object.<START_MOD>getSelectedCluster<END_MOD>())); changeApplicationLevelVisibility(nativeUsbWarningMessage, (((((object.getUsbPolicy().getSelectedItem()) == (org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE)) && (vdsGroup != null)) && ((vdsGroup.getcompatibility_version()) != null)) && (!((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigValuePreConverted(ConfigurationValues.MigrationSupportForNativeUsb, vdsGroup.getcompatibility_version().getValue())))))); }
<START_MOD>@java.lang.Override public void updateExternalStatus(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.common.businessentities.ExternalStatus status) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_guid", id).addValue("external_status", status); getCallsHandler().executeModification("UpdateVdsDynamiciExternalStatus", parameterSource); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(getDisksList()).isEmpty() ? null : new org.ovirt.engine.core.bll.storage.disk.cinder.GenericCinderCommandCallback<org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand<T>>(); }<END_MOD>
public static void getLoggedInUser(final org.ovirt.engine.ui.uicompat.IAsyncCallback<org.ovirt.engine.core.common.<START_MOD>businessentities.DbUser<END_MOD>> callback) { org.ovirt.engine.ui.frontend.Frontend.logger.finer( whether user is logged in... final org.ovirt.engine.ui.frontend.gwtservices.GenericApiGWTServiceAsync service = GenericApiGWTServiceAsync.Util.getInstance(); service.getLoggedInUser(new com.google.gwt.user.client.rpc.AsyncCallback<org.ovirt.engine.core.common.<START_MOD>businessentities.DbUser<END_MOD>>() { @java.lang.Override public void onFailure(final java.lang.Throwable caught) { if (org.ovirt.engine.ui.frontend.Frontend.ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ( to execute sync getIsUserLoggedIn:   + caught), caught); org.ovirt.engine.ui.frontend.Frontend.failureEventHandler(caught); callback.onFailure(null); } @java.lang.Override public void onSuccess(final org.ovirt.engine.core.common.<START_MOD>businessentities.DbUser<END_MOD> result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer( executed sync getIsUserLoggedIn! callback.onSuccess(result); } }); }
<START_MOD>protected<END_MOD> <START_MOD>org.ovirt.engine.core.common.utils.ToStringBuilder<END_MOD> <START_MOD>appendAttributes(org.ovirt.engine.core.common.utils.ToStringBuilder<END_MOD> <START_MOD>tsb<END_MOD>) { <START_MOD>return tsb<END_MOD>.append(<START_MOD>"id", getId<END_MOD>()).append(<START_MOD>"vdsId", getVdsId()<END_MOD>).append(<START_MOD>"networkName", getNetworkName())<END_MOD>.<START_MOD>append("bootProtocol", getBootProtocol()).append("address", getAddress()).append("subnet", getSubnet()).append("gateway", getGateway()).append("mtu", getMtu()).append("bridged", isBridged()).append("type", getType()).append("networkImplementationDetails", getNetworkImplementationDetails()).append("qos", getQos()).append("qosOverridden", isQosOverridden()).append("customProperties", getCustomProperties<END_MOD>()); }
<START_MOD>protected<END_MOD> org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel createDefaultProfile() { <START_MOD>if ((defaultProfile) != null) { return defaultProfile; } defaultProfile = new<END_MOD> org.ovirt.engine.ui.uicommonweb.models.profiles.NewVnicProfileModel<START_MOD>(); defaultProfile<END_MOD>.getName().setEntity(getName().getEntity()); final org.ovirt.engine.ui.uicompat.IEventListener networkNameListener = new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { <START_MOD>defaultProfile<END_MOD>.getName().setEntity(getName().getEntity()); } }; getName().getEntityChangedEvent().addListener(networkNameListener); <START_MOD>defaultProfile<END_MOD>.getName().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (!(<START_MOD>defaultProfile<END_MOD>.getName().getEntity().equals(getName().getEntity()))) { getName().getEntityChangedEvent().removeListener(networkNameListener); <START_MOD>defaultProfile<END_MOD>.getName().getEntityChangedEvent().removeListener(this); } } }); return <START_MOD>defaultProfile; }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Gluster Volume Geo-Replication Session Creation Failed") java.lang.String GlusterVolumeGeoReplicationSessionCreateFailed();<END_MOD>
private boolean updateVms() { for (org.ovirt.engine.core.common.businessentities.VmStatic vm : vmsLockedForUpdate) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); updateParams.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); <START_MOD>vmUpdateUtils.<END_MOD>upgradeGraphicsDevices(vm, updateParams<START_MOD>, oldCluster.getCompatibilityVersion()<END_MOD>); updateRngDeviceIfNecessary(vm.getId(), vm.getCustomCompatibilityVersion(), updateParams); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { java.util.List<java.lang.String> params = new java.util.ArrayList<>(); params.add( Update params.add( VM params.add(parseErrorMessage(result.getValidationMessages())); java.util.List<java.lang.String> messages = org.ovirt.engine.core.bll.Backend.getInstance().getErrorsTranslator().translateErrorText(params); failedUpgradeEntities.put(vm.getName(), getFailedMessage(messages)); } } return true; }
private boolean diskContainsPreExtendSnapshots() { return validate(createDiskValidator(getImage()).<START_MOD>childDiskWasExtended<END_MOD>(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain())); }
<START_MOD>@org.junit.Test public void updatePosixEmptyVFSType() { newPosixConnection.setVfsType(null); parameters.setStorageServerConnection(newPosixConnection); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.VALIDATION_STORAGE_CONNECTION_EMPTY_VFSTYPE); }<END_MOD>
<START_MOD>private org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel PrepareGlusterStorageForEdit(org.ovirt.engine.core.common.businessentities.storage_domains storage) { final org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel model = new org.ovirt.engine.ui.uicommonweb.models.storage.GlusterStorageModel(); model.setRole(storage.getstorage_domain_type()); model.getPath().setIsChangable(true); model.getVfsType().setIsChangable(false); model.getMountOptions().setIsChangable(false); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetStorageConnectionById(new org.ovirt.engine.ui.frontend.AsyncQuery(null, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.storage_server_connections connection = ((org.ovirt.engine.core.common.businessentities.storage_server_connections) (returnValue)); model.getPath().setEntity(connection.getconnection()); model.getVfsType().setEntity(connection.getVfsType()); model.getMountOptions().setEntity(connection.getMountOptions()); } }), storage.getstorage(), true); return model; }<END_MOD>
@java.lang.Override public void loadFromLocalStorage(org.ovirt.engine.ui.uicommonweb.models.<START_MOD>VmConsoles vmConsoles<END_MOD>) { java.lang.String vmId = <START_MOD>vmConsoles.getVm<END_MOD>().getId().toString(); org.ovirt.engine.ui.common.utils.ConsoleContext context = <START_MOD>vmConsoles<END_MOD>.getConsoleContext(); org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker keyMaker = new org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker(vmId, context); java.lang.String selectedProtocolString = clientStorage.getLocalItem(keyMaker.make(org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.SELECTED_PROTOCOL)); if ((selectedProtocolString == null) || ("".equals(selectedProtocolString))) { return; } org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol selectedProtocol = org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.valueOf(selectedProtocolString); if (selectedProtocol == (org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.SPICE)) { loadSpiceData(<START_MOD>vmConsoles<END_MOD>, keyMaker); } else if (selectedProtocol == (org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.VNC)) { loadVncData(<START_MOD>vmConsoles<END_MOD>, keyMaker); } else if (selectedProtocol == (org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.RDP)) { loadRdpData(<START_MOD>vmConsoles<END_MOD>, keyMaker); } }
void onWindowFocusChange(boolean inFocus) { org.ovirt.engine.ui.uicommonweb.models.GridTimer modelTimer = getModelTimer(); if ((modelTimer.isActive()) && (!(modelTimer.isPaused()))) { if (inFocus) { modelTimer.<START_MOD>stop(); modelTimer.<END_MOD>setRefreshRate(readRefreshRate()); } else {<START_MOD> modelTimer.stop();<END_MOD> modelTimer.setRefreshRate(org.ovirt.engine.ui.common.widget.refresh.AbstractRefreshManager.OUT_OF_FOCUS_REFRESH_RATE); } <START_MOD>modelTimer.start(); <END_MOD>} }
@org.junit.Test public void canDoActionFailsLongName() { sd.setStorageName(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(11)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG); }
<START_MOD>@java.lang.Override public javax.ws.rs.core.Response move(org.ovirt.engine.api.model.Action action) { validateParameters(action, "storageDomain.id|name"); org.ovirt.engine.core.common.action.MoveDisksParameters params = new org.ovirt.engine.core.common.action.MoveDisksParameters(java.util.Collections.singletonList(new org.ovirt.engine.core.common.action.MoveDiskParameters(asGuid(get().getImageId()), org.ovirt.engine.core.compat.Guid.Empty, getStorageDomainId(action)))); return doAction(VdcActionType.MoveDisks, params, action); }<END_MOD>
<START_MOD>public void updateStorageSelectedItem(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, org.ovirt.engine.core.common.businessentities.StorageDomainType domainType) { for (org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel model : getItems()) { if (((model.getType()) == storageType) && ((model.getRole()) == domainType)) { setCurrentItem(model); break; } } }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Center can be changed only when the Host is in Maintenance mode. java.lang.String dcCanOnlyBeChangedWhenHostInMaintMode();
<START_MOD>@org.junit.Test public void testReadOneSkipsAndIngoresUnknownElements() { org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader(("<vm>" + (("<junk>ungly</junk>" + "<name>myvm</name>") + "</vm>"))); org.ovirt.engine.api.types.V4Vm vm = org.ovirt.engine.api.xml.V4XmlVmReader.readOne(reader); assertEquals("myvm", vm.name()); }<END_MOD>
<START_MOD>private void addGraphicsDevice() { for (org.ovirt.engine.core.common.businessentities.GraphicsType type : org.ovirt.engine.core.common.businessentities.GraphicsType.values()) { org.ovirt.engine.core.common.businessentities.GraphicsDevice graphicsDevice = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getGraphicsDevice(type); if (graphicsDevice == null) { continue; } graphicsDevice.setVmId(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); org.ovirt.engine.core.bll.AddVmCommand.getBackend().runInternalAction(VdcActionType.AddGraphicsDevice, new org.ovirt.engine.core.bll.GraphicsParameters(graphicsDevice)); } }<END_MOD>
private void buildFaultResult() { org.ovirt.engine.core.common.errors.VdcFault fault = new org.ovirt.engine.core.common.errors.VdcFault(); fault.setError(<START_MOD>EngineErrors<END_MOD>.ReachedMaxNumberOfHostsInDC); fault.setMessage(org.ovirt.engine.core.bll.Backend.getInstance().getVdsErrorsTranslator().TranslateErrorTextSingle(fault.getError().toString())); org.ovirt.engine.core.bll.AddVdsSpmIdCommand.getReturnValue().setFault(fault); }
private void updateVdsData() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { getCompensationContext().snapshotEntity(getVds().getStaticData()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsStaticDao().update(getParameters().getVdsStaticData()); getCompensationContext().stateChanged(); return null; } }); if (org.ovirt.engine.core.bll.UpdateVdsCommand.getParameters().getInstallVds()) { <START_MOD>setVdsStatus<END_MOD>(VDSStatus.Installing); } }
@java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS qos) { return qos.getName(); }
@java.lang.Override protected void revealInParent() { com.gwtplatform.mvp.client.proxy.RevealContentEvent.fire(this, MainContentPresenter.TYPE_SetSubTabPanelContent, this); <START_MOD>org.ovirt.engine.ui.webadmin.section.main.presenter.UpdateMainContentLayoutEvent.fire(this, true); <END_MOD>}
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultStringValue("Selected IDE disk/s will be attached but will need to be activated manually after the VM is shut down.") java.lang.String ideDisksWillBeAttachedButNotActivated();<END_MOD>
@org.ovirt.engine.ui.common.Template( cellspacing='0' cellpadding='0'><tr> + (((((( style= url({2});width:2px; +   style='text-align:center;'> +   class= {5} {6} style= url({3}) repeat-x; height: 20px; display: flex; +   style= middle; line-height: <START_MOD>15<END_MOD>px; margin-top: 2px; class= style= 19px; + "</td>") +   style= url({4});width:2px; + "</tr></table>")) com.google.gwt.safehtml.shared.SafeHtml dialogButton(com.google.gwt.safehtml.shared.SafeHtml image, java.lang.String text, java.lang.String start, java.lang.String stretch, java.lang.String end, java.lang.String contentStyleName, java.lang.String customContentStyleName);
private void runStoragePoolUpEvent(final org.ovirt.engine.core.common.businessentities.StoragePool storagePool) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(new java.lang.Runnable() { @java.lang.Override public void run() { try { if (org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().<START_MOD>getStorageDomainDao().getStorageDomains<END_MOD>(_storagePoolId<START_MOD>, StorageDomainType.Master).stream().anyMatch(( d) -> ((d.getStatus()) == StorageDomainStatus.Active) || ((d.getStatus()) == StorageDomainStatus.Unknown)<END_MOD>)) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().getEventListener().storagePoolUpEvent(storagePool); } } catch (java.lang.RuntimeException exp) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxyData.log.error( in StoragePoolUpEvent: {} exp.getMessage()); org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxyData.log.debug("Exception", exp); } } }); }
@org.junit.Test public void parametersWithSecureDeletionAreNotFixedOnBlockDomainWhenPostZeroIsFalse() { org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>PostZeroHandlerTest.ParametersWithPostZero parameters = org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>PostZeroHandler.fixParametersWithPostZero(new org.ovirt.engine.core.bll.storage<START_MOD>.domains<END_MOD>.PostZeroHandlerTest.ParametersWithPostZero(false), false); assertPostZeroValue(parameters, false); }
public static org.ovirt.engine.sdk4.ConnectionBuilder connection() { java.lang.Class<? extends org.ovirt.engine.sdk4.ConnectionBuilder> clazz = null; try { clazz = ((java.lang.Class<org.ovirt.engine.sdk4.ConnectionBuilder>) (java.lang.Class.forName("org.ovirt.engine.sdk4.internal.ConnectionBuilder45"))); } catch (java.lang.ClassNotFoundException <START_MOD>| java.lang.LinkageError <END_MOD>ex) { try { clazz = ((java.lang.Class<org.ovirt.engine.sdk4.ConnectionBuilder>) (java.lang.Class.forName("org.ovirt.engine.sdk4.internal.ConnectionBuilder42"))); } catch (java.lang.ClassNotFoundException <START_MOD>| java.lang.LinkageError <END_MOD>e) { throw new java.lang.Error( connection implementation found e); } } try { return clazz.newInstance(); } catch (java.lang.Exception e) { throw new java.lang.Error( to initialize connection implementation e); } }
@org.junit.Test public void canDoActionFailWithUnsupportedDiskInterface() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId); mockVm(); mockStorageDomain(storageId); mockStoragePoolIsoMap(); mockMaxPciSlots(); when(diskValidator.isReadOnlyPropertyCompatibleWithInterface()).thenReturn(ValidationResult.VALID); when(diskValidator.isDiskInterfaceSupported(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED)); when(diskValidator.isVirtIoScsiValid(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(ValidationResult.VALID); when(<START_MOD>diskValidator.isDiskShareableAndBootable()).thenReturn(ValidationResult.VALID); when(<END_MOD>command.getDiskValidator(any(org.ovirt.engine.core.common.businessentities.Disk.class))).thenReturn(diskValidator); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED.toString())); }
@java.lang.Override protected boolean canDoAction() { boolean result = true; org.ovirt.engine.core.common.businessentities.AuditLog event = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAuditLogDao().get(org.ovirt.engine.core.bll.RemoveExternalEventCommand.getParameters().getId()); if (event == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_EVENT_NOT_FOUND); result = false; } if (<START_MOD>((<END_MOD>event.getOrigin()<START_MOD>) != null) && (event.getOrigin()<END_MOD>.equalsIgnoreCase(OVIRT))<START_MOD>)<END_MOD> { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLEGAL_ORIGIN); result = false; } if (!(event.getseverity().equals(AuditLogSeverity.ALERT))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLRGAL_OPERATION); result = false; } if (!result) { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__EXTERNAL_EVENT); } return result; }
<START_MOD>private void updateDiscoveredHostList(java.lang.String searchFilter) { org.ovirt.engine.core.common.businessentities.Provider provider = getProviders().getSelectedItem(); if (provider != null) { org.ovirt.engine.ui.frontend.AsyncQuery getHostsQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getHostsQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (result)); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.VDS> hostNameListModel = getExternalHostName(); hostNameListModel.setItems(hosts); hostNameListModel.setIsChangable(true); setEnableSearchHost(true); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getExternalProviderHostList(getHostsQuery, provider.getId(), true, searchFilter); } else { getExternalHostName().setItems(null); getExternalHostName().setIsChangable(false); setEnableSearchHost(false); } ui : fixing = $missing$; org.ovirt.engine.ui.uicommonweb.models.hosts.display of; org.ovirt.engine.ui.uicommonweb.models.hosts.fqdn in; org.ovirt.engine.ui.uicommonweb.models.hosts.addHost form; }<END_MOD>
private void canDoActionFailedWithReason(final org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD> message) { assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(message.toString())); }
@java.lang.Override protected void onLoadingStateChanged(com.google.gwt.user.cellview.client.LoadingStateChangeEvent.LoadingState state) { super.onLoadingStateChanged(state); enforceScrollPosition(); if (<START_MOD>(((table.getParent()) != null) && ((table.getParent().getElement()) != null)) && ((scrollOffset) > 0)) { table.getParent().getElement().setScrollTop(scrollOffset); } if (<END_MOD>state == (com.google.gwt.user.cellview.client.LoadingStateChangeEvent.LoadingState.LOADING)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { doAutoSelect = true; } }); } }
<START_MOD>@java.lang.Override protected void childCommandsExecutionEnded(org.ovirt.engine.core.bll.CommandBase<?> command, boolean anyFailed, java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.compat.backendcompat.CommandExecutionStatus status, int completedChildren) { org.ovirt.engine.core.bll.storage.disk.cinder.AddCinderDiskCommand addCinderDiskCommand = ((org.ovirt.engine.core.bll.storage.disk.cinder.AddCinderDiskCommand) (command)); org.ovirt.engine.core.compat.Guid diskId = ((org.ovirt.engine.core.common.action.AddDiskParameters) (addCinderDiskCommand.getParameters())).getDiskInfo().getId(); org.ovirt.engine.core.common.businessentities.storage.ImageStatus imageStatus = addCinderDiskCommand.getCinderBroker().getDiskStatus(diskId); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().get(diskId))); if ((imageStatus != null) && (imageStatus != (disk.getImageStatus()))) { switch (imageStatus) { case OK : super.childCommandsExecutionEnded(command, false, childCmdIds, status, completedChildren); break; case ILLEGAL : super.childCommandsExecutionEnded(command, true, childCmdIds, status, completedChildren); break; } } }<END_MOD>
@org.junit.Test public void testOtherFieldsNotValidatedInImport() { org.ovirt.engine.core.common.action.ImportVmParameters parameters = createParameters(); java.lang.String tooLongString = org.ovirt.engine.core.utils.RandomUtils.instance().nextPropertyString(((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.GENERAL_MAX_SIZE) + 1)); parameters.getVm().setUserDefinedProperties(tooLongString); parameters.setImportAsNewEntity(true); org.ovirt.engine.core.bll.exportimport.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> command = new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(parameters, poolPerCluster, externalVmMacsFinder<START_MOD>, externalVnicProfileMappingValidator<END_MOD>); command.init(); java.util.Set<javax.validation.ConstraintViolation<org.ovirt.engine.core.common.action.ImportVmParameters>> validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, command.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertTrue(validate.isEmpty()); parameters.getVm().setUserDefinedProperties(tooLongString); parameters.setImportAsNewEntity(false); command = new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(parameters, poolPerCluster, externalVmMacsFinder<START_MOD>, externalVnicProfileMappingValidator<END_MOD>); command.init(); validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, command.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertTrue(validate.isEmpty()); }
<START_MOD>public void setXenHosts(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.VDS> hosts) { this.xenHosts = hosts; }<END_MOD>
<START_MOD>protected org.ovirt.engine.core.compat.Guid getUpServerId() { if ((brick) == null) { return super.getUpServerId(clusterId); } org.ovirt.engine.core.common.businessentities.VDS brickServer = org.ovirt.engine.core.bll.gluster.GetGlusterVolumeAdvancedDetailsQuery.getVdsDao().get(brick.getServerId()); if ((brickServer.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { return brickServer.getId(); } return super.getUpServerId(clusterId); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult networkNotUsedByRunningVms() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> runningVms = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = getDbFacade().getVmNetworkInterfaceDao().getAllForNetwork(network.getId()); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>> vnicsByVmId = org.ovirt.engine.core.common.businessentities.Entities.vmInterfacesByVmId(vnics); for (org.ovirt.engine.core.common.businessentities.VM vm : getVms()) { if (vm.isRunningOrPaused()) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic : vnicsByVmId.get(vm.getId())) { if (<START_MOD>org.ovirt.engine.core.bll.common.predicates.VnicNetworkCanBeUpdatedPredicate.getInstance().eval<END_MOD>(nic)) { runningVms.add(vm); break; } } } } return networkNotUsed(runningVms, VdcBllMessages.VAR__ENTITIES__VMS); }
@javax.ws.rs.Path( (allocatevm)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
private void cluster_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getCluster().getSelectedItem(); if (cluster != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getPmTypeList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.<START_MOD>List<END_MOD><java.lang.String> pmTypes = ((java.util.ArrayList<java.lang.String>) (returnValue)); updatePmTypeList(pmTypes); } }), cluster.getCompatibilityVersion()); } }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__REGISTER); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__VM_DISK); }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.VM vm) { if ((vm.getVmPoolId()) == null) { <START_MOD>org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.VmTypeConfig config = new org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.VmTypeConfig(vm.isStateless(), isInPreview(vm), <END_MOD>vm.getVmType())<START_MOD>; if (configToIcon.containsKey(config)) { org.ovirt.engine.core.common.utils.Pair<com.google.gwt.resources.client.ImageResource, java.lang.String> value = configToIcon.get(config); setTitle(value.getSecond());<END_MOD> return <START_MOD>value.getFirst(); } else { return <END_MOD>getApplicationResources().<START_MOD>manyDesktopsImage(); } } else {<END_MOD> return getApplicationResources().manyDesktopsImage(); } }
protected void setUpGetSystemVersionExpectations() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue <START_MOD>productRpmQueryResult<END_MOD> = createMock(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); expect(<START_MOD>productRpmQueryResult.getSucceeded()).andReturn(true).anyTimes(); expect(productRpmQueryResult.getReturnValue()).andReturn(org.ovirt.engine.api.restapi.resource.BackendApiResourceTest.SYSTEM_VERSION).anyTimes(); expect(<END_MOD>backend.runQuery(eq(VdcQueryType.GetConfigurationValue), <START_MOD>getProductRPMVersionParam())).andReturn(productRpmQueryResult); org.ovirt.engine.core.common.queries.VdcQueryReturnValue productVersionQueryResult = createMock(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); expect(productVersionQueryResult.getSucceeded()).andReturn(true).anyTimes(); expect(productVersionQueryResult.getReturnValue()).andReturn(new org.ovirt.engine.core.compat.Version(org.ovirt.engine.api.restapi.resource.BackendApiResourceTest.MAJOR, org.ovirt.engine.api.restapi.resource.BackendApiResourceTest.MINOR, org.ovirt.engine.api.restapi.resource.BackendApiResourceTest.BUILD, org.ovirt.engine.api.restapi.resource.BackendApiResourceTest.REVISION)).anyTimes(<END_MOD>); expect(backend.runQuery(eq(VdcQueryType.<START_MOD>GetProductVersion), getProductVersionParams())).andReturn(productVersionQueryResult<END_MOD>); }
<START_MOD>public java.util.List<org.ovirt.api.metamodel.concepts.Parameter.AttributeNode> getNodes() { return nodes; }<END_MOD>
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getUserProfile(new org.ovirt.engine.ui.frontend.AsyncQuery(<START_MOD>new org.ovirt.engine.ui.frontend.INewAsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(java.lang.Object <END_MOD>model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { org.ovirt.engine.core.common.businessentities.UserProfile profile = returnValue.getReturnValue(); java.lang.Boolean connectAutomatically = (profile == null) ? java.lang.Boolean.TRUE : profile.isUserPortalVmLoginAutomatically(); if (connectAutomatically) { handleConnectAutomatically(); } } })); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( is not usable java.lang.String lunUnusable();
<START_MOD>@org.junit.Test public void canDoActionSucceeds() { mockVdsWithOsVersion(org.ovirt.engine.core.bll.UpgradeOvirtNodeCommandTest.VALID_OVIRT_VERSION); org.ovirt.engine.core.common.action.InstallVdsParameters param = org.ovirt.engine.core.bll.UpgradeOvirtNodeCommandTest.createParameters(); param.setoVirtIsoFile(org.ovirt.engine.core.bll.UpgradeOvirtNodeCommandTest.VALID_VERSION_OVIRT_ISO_FILENAME); org.ovirt.engine.core.bll.UpgradeOvirtNodeCommand<org.ovirt.engine.core.common.action.InstallVdsParameters> command = createCommand(param); assertTrue(command.canDoAction()); }<END_MOD>
<START_MOD>@java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalBasicListModel userPortalBasicListModel = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalBasicListModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.vm_pools> pools = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.vm_pools>(); org.ovirt.engine.core.common.queries.VdcQueryReturnValue retValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if ((retValue != null) && (retValue.getSucceeded())) { java.util.List<java.lang.Object> list = ((java.util.ArrayList<java.lang.Object>) (retValue.getReturnValue())); for (java.lang.Object object : list) { if (object instanceof org.ovirt.engine.core.common.businessentities.VM) { vms.add(((org.ovirt.engine.core.common.businessentities.VM) (object))); } else if (object instanceof org.ovirt.engine.core.common.businessentities.vm_pools) { pools.add(((org.ovirt.engine.core.common.businessentities.vm_pools) (object))); } } } userPortalBasicListModel.setvms(vms); userPortalBasicListModel.setpools(pools); userPortalBasicListModel.OnVmAndPoolLoad(); }<END_MOD>
protected void removeVmNetworkInterfaces() { new org.ovirt.engine.core.bll.network.VmInterfaceManager(<START_MOD>macPool<END_MOD>).removeAll(getVmId()); }
public void setIsHostTabValid(boolean value) { if (value) { <START_MOD>invalidTabs.remove<END_MOD>(org.ovirt.engine.ui.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models.vms.UnitVmModel.UnitVmTabNames.HOST_TAB); } else { invalidTabs.add<END_MOD>(<START_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.UnitVmTabNames.HOST_TAB<END_MOD>); } }
<START_MOD>@java.lang.Override public void executeCommand() { java.util.Collection<org.ovirt.engine.core.common.businessentities.Disk> vmDisksToAttach = org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getVm().getDiskMap().values(); clearVmDisks(); org.ovirt.engine.core.common.action.ImportVmParameters importParams = new org.ovirt.engine.core.common.action.ImportVmParameters(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getVm(), org.ovirt.engine.core.compat.Guid.Empty, org.ovirt.engine.core.compat.Guid.Empty, org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getVdsGroup().getStoragePoolId().getValue(), org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getVdsGroup().getId()); importParams.setVm(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getVm()); importParams.setVdsGroupId(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getParameters().getVdsGroupId()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getBackend().runInternalAction(VdcActionType.ImportVm, importParams, new org.ovirt.engine.core.bll.context.CommandContext(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getCompensationContext())); if ((returnVal.getSucceeded()) && (!(vmDisksToAttach.isEmpty()))) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(this, attemptToAttachDisksToImportedVm(vmDisksToAttach)); } setActionReturnValue(org.ovirt.engine.core.bll.ImportVmFromConfigurationCommand.getVm().getId()); setSucceeded(returnVal.getSucceeded()); }<END_MOD>
@java.lang.Override public java.lang.String getVerb(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<<START_MOD>?, ?, <END_MOD>?> op1) { return org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.BOND_WITH.getVerb(op1); }
<START_MOD>@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); if (!(super.canDoAction())) { return false; } if ((((volume.getAsyncTask()) == null) || ((volume.getAsyncTask().getType()) != (org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REMOVE_BRICK))) || ((volume.getAsyncTask().getStatus()) != (org.ovirt.engine.core.common.job.JobExecutionStatus.STARTED))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REMOVE_BRICK_NOT_STARTED); } return true; }<END_MOD>
@java.lang.Override protected void executeCommand() { for (org.ovirt.engine.core.compat.Guid vdsId : org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getVdsList()) { if (((org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getTagId()) != null) && ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVdsByTagIdAndByVdsId(org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getTagId(), vdsId)) != null)) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vdsId); if (vds != null) { <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("VdsNames", vds.getName()<START_MOD>); } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachVdsFromTag(org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getTagId()<END_MOD>, vdsId); org.ovirt.engine.core.bll.DetachVdsFromTagCommand.setSucceeded(true); } } }
@java.lang.Override protected org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.businessentities.VmDynamic> createEntityRowMapper() { return org.ovirt.engine.core.dao.<START_MOD>VmDynamicDAOImpl<END_MOD>.VmDynamicRowMapper.instance; }
<START_MOD>private void toggleVisibleWidgets(int currentWidth) { int widgetWidth = 0; boolean foundEdge = false; if ((contentPanel.getWidgetCount()) > 1) { for (int i = 0; i < ((contentPanel.getWidgetCount()) - 1); i++) { com.google.gwt.user.client.ui.Widget widget = contentPanel.getWidget(i); widget.setVisible(true); if (foundEdge || ((widgetWidth + (widget.getOffsetWidth())) > currentWidth)) { widget.setVisible(false); actionToolbarButtonList.get(i).setCascaded(true); foundEdge = true; } else { actionToolbarButtonList.get(i).setCascaded(false); widget.setVisible(true); } widgetWidth += widget.getOffsetWidth(); } } }<END_MOD>
@org.ovirt.engine.ui.webadmin.DefaultStringValue( select <START_MOD>Hosts<END_MOD> from the same data center java.lang.String reportFromDifferentDCsError();
protected void setNetworkId(org.ovirt.engine.api.model.NIC nic) { if ((nic.isSetNetwork()) && (!(nic.getNetwork().isSetId()))) { org.ovirt.engine.core.compat.Guid clusterId = getClusterId(); org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> network = lookupClusterNetwork(clusterId, ((nic.getNetwork().getId()) == null ? null : asGuid(nic.getNetwork().getId())), nic.getNetwork().getName()); if (network != null) { nic.getNetwork().setName(null); nic.getNetwork().setId(network.getId().toString()); } } }
<START_MOD>@java.lang.Override protected void executeQueryCommand() { try { executeQueryCommandChecked(); } catch (java.io.IOException ex) { log.error("Failed to create signed websocket proxy ticket.", ex); log.debug("Exception", ex); org.ovirt.engine.core.bll.GetSignedWebsocketProxyTicketQuery.getQueryReturnValue().setSucceeded(false); } }<END_MOD>
<START_MOD>private java.util.Map<java.lang.String, java.lang.String> getServerFingerprints(org.w3c.dom.NodeList listOfPeers) { java.util.Map<java.lang.String, java.lang.String> fingerprints = new java.util.HashMap<java.lang.String, java.lang.String>(); for (int i = 0; i < (listOfPeers.getLength()); i++) { org.w3c.dom.Node firstPeer = listOfPeers.item(i); if ((firstPeer.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) { org.w3c.dom.Element firstHostElement = ((org.w3c.dom.Element) (firstPeer)); int state = org.ovirt.engine.core.utils.XmlUtils.getIntValue(firstHostElement, org.ovirt.engine.core.utils.gluster.GlusterUtil.STATE); if (state == (org.ovirt.engine.core.utils.gluster.GlusterUtil.PEER_IN_CLUSTER)) { java.lang.String hostName = org.ovirt.engine.core.utils.XmlUtils.getTextValue(firstHostElement, org.ovirt.engine.core.utils.gluster.GlusterUtil.HOST_NAME); fingerprints.put(hostName, getFingerprint(hostName)); } } } return fingerprints; }<END_MOD>
<START_MOD>@org.junit.Test public void testIsBalloonDisabledByDefault() throws java.lang.Exception { assertFalse(OsRepositoryImpl.INSTANCE.getBalloonDisabledByDefaultMatrix().get(777).get(null)); }<END_MOD>
<START_MOD>private boolean isSucceededWithReasonGiven() { return (isSucceededWithHA()) && (!(org.apache.commons.lang.StringUtils.isEmpty(org.ovirt.engine.core.bll.MaintenanceVdsCommand.getVds().getMaintenanceReason()))); }<END_MOD>
<START_MOD>@java.lang.Override protected void writeHeader() { super.writeHeader(); _writer.setPrefix("ovirt", "http://www.ovirt.org/ovf"); _writer.writeNamespace("ovirt", "http://www.ovirt.org/ovf"); }<END_MOD>
@org.junit.Before public void prepareParams() { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.compat.Guid.NewGuid(); <START_MOD>org.ovirt.engine.core.compat.Guid id2<END_MOD> = <START_MOD>org.ovirt.engine.core.compat.Guid.NewGuid(); newNFSConnection = createNFSConnection<END_MOD>(id, "multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0); <START_MOD>newPosixConnection<END_MOD> = <START_MOD>createPosixConnection(id2,<END_MOD> <START_MOD>"multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType<END_MOD>.<START_MOD>POSIXFS, "nfs", "timeo=30"<END_MOD>); <START_MOD>oldNFSConnection<END_MOD> = <START_MOD>createNFSConnection<END_MOD>(id, "multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.NFS, NfsVersion.V4, 50, 0); <START_MOD>oldPosixConnection = createPosixConnection<END_MOD>(<START_MOD>id, "multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType<END_MOD>.<START_MOD>POSIXFS, "nfs", "timeo=30"); prepareCommand<END_MOD>(<START_MOD>newNFSConnection<END_MOD>); }
@java.lang.Override public void setSpicePluginImplEnabled(boolean enabled, java.lang.String reason) { spicePluginImplRadioButton.<START_MOD>setVisible(enabled); spicePluginImplRadioButton.<END_MOD>setEnabled(enabled); if (!enabled) { spicePluginImplRadioButtonTooltip.setText(reason); } }
private void beforeFirstRefreshTreatment(boolean isVdsUpOrGoingToMaintenance) { if (_vdsManager.getbeforeFirstRefresh()) { boolean flagsChanged = false; final java.util.concurrent.atomic.AtomicBoolean processHardwareCapsNeededTemp = new java.util.concurrent.atomic.AtomicBoolean(); _vdsManager.refreshCapabilities(processHardwareCapsNeededTemp, _vds); flagsChanged = processHardwareCapsNeededTemp.get(); _vdsManager.setbeforeFirstRefresh(false); refreshedCapabilities = true; _saveVdsDynamic = true; processHardwareCapsNeeded = (processHardwareCapsNeeded) ? processHardwareCapsNeeded : flagsChanged; } else if (isVdsUpOrGoingToMaintenance || ((_vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Error))) { return; } <START_MOD>if ((_vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { <END_MOD>org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(_vds.getId()); logable.addCustomValue("VdsStatus", _vds.getStatus().toString()); auditLog(logable, AuditLogType.VDS_DETECTED); }<START_MOD> }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS> networkQoSes = ((java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS>) (ReturnValue)); getNetworkQoS().setItems(networkQoSes); getNetworkQoS().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.findNetworkQosById(networkQoSes, defaultQosId)); }
<START_MOD>@java.lang.Override public void init(final org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeGeoRepCreateModel model) { super.init(model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (args.propertyName.equalsIgnoreCase("RecommendationViolations")) { getView().setSuggestedConfigViolations(model.getRecommendationViolations()); } else if (args.propertyName.equalsIgnoreCase("QueryFailed")) { getView().setFailureMessage(model.getQueryFailureMessage()); } } }); }<END_MOD>
public static java.util.Collection<java.lang.String> replaceWith(java.lang.String propertyName, java.util.List<java.lang.Object> items) { int size = java.lang.Math.min(org.ovirt.engine.core.utils.ReplacementUtils.MAX_NUMBER_OF_PRINTED_ITEMS, items.size()); java.util.List<java.lang.String> printedItems = new java.util.ArrayList<java.lang.String>(size); for (int i = 0; i < size; i++) { <START_MOD>java.lang.Object item = items.get(i); if (item != null) { <END_MOD>printedItems.add(java.lang.String.format("\t%s", <START_MOD>item<END_MOD>.toString())); } <START_MOD>} <END_MOD>if ((items.size()) > (org.ovirt.engine.core.utils.ReplacementUtils.MAX_NUMBER_OF_PRINTED_ITEMS)) { printedItems.add("\t..."); } java.util.ArrayList<java.lang.String> replacements = new java.util.ArrayList<java.lang.String>(); replacements.add(java.text.MessageFormat.format( {1} propertyName, org.apache.commons.lang.StringUtils.join(printedItems, ",\n"))); replacements.add(java.text.MessageFormat.format( {1} propertyName, items.size())); return replacements; }
protected boolean ValidateNotificationMethod(java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>EventNotificationMethod<END_MOD>> event_notification_methods, org.ovirt.engine.core.common.businessentities.event_subscriber event_subscriber, org.ovirt.engine.core.common.businessentities.DbUser user) { boolean retValue = true; org.ovirt.engine.core.common.EventNotificationMethods notificationMethod = event_notification_methods.get(0).getmethod_type(); switch (notificationMethod) { case EMAIL : java.lang.String mailAdress = (org.apache.commons.lang.StringUtils.isEmpty(event_subscriber.getmethod_address())) ? user.getemail() : event_subscriber.getmethod_address(); if ((org.apache.commons.lang.StringUtils.isEmpty(mailAdress)) || (!(org.ovirt.engine.core.bll.EventSubscriptionCommandBase.ValidatMailAddress(mailAdress)))) { addCanDoActionMessage(VdcBllMessages.USER_DOES_NOT_HAVE_A_VALID_EMAIL); retValue = false; } break; default : addCanDoActionMessage(VdcBllMessages.EN_UNKNOWN_NOTIFICATION_METHOD); retValue = false; break; } return retValue; }
protected void setObjectName(java.lang.Object object, java.lang.String name, boolean isSuffix) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm(); <START_MOD>java.lang.String nameForTheClonedVm =<END_MOD> (isSuffix) <START_MOD>?<END_MOD> (vm.getName()) + name<START_MOD> : name<END_MOD>; vm.setName(<START_MOD>nameForTheClonedVm); assignedVmNames.add(nameForTheClonedVm<END_MOD>); }
<START_MOD>java.lang.String storageIscsiYouCanRemoveLUNsLabel();<END_MOD>
@java.lang.Override <START_MOD>protected<END_MOD> <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.utils.ToStringBuilder<END_MOD> <START_MOD>appendAttributes<END_MOD>(<START_MOD>org.ovirt.engine.core.common.utils.ToStringBuilder tsb<END_MOD>) { return super.<START_MOD>appendAttributes<END_MOD>(<START_MOD>tsb<END_MOD>)<START_MOD>.append("storageDomain"<END_MOD>, getStorageDomain()<START_MOD>).append("args"<END_MOD>, getArgs()); }
protected void handleSetMessageQueryResult(org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult result) { setHelpTag(getRemoveQosHelpTag()); setHashName(getRemoveQosHashName()); int index = 0; int numberOfTimesUsedByDiskProfiles = 0; java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.queries.QueryReturnValue returnValue : result.getReturnValues()) { java.util.List<org.ovirt.engine.core.common.businessentities.Nameable> diskProfileEntities = returnValue.getReturnValue(); java.lang.String qosName = sourceListModel.getSelectedItems().get(index).getName(); if ((diskProfileEntities.size()) == 0) { list.add(qosName); } else { numberOfTimesUsedByDiskProfiles += diskProfileEntities.size(); java.util.List<java.lang.String> diskProfileNames = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Nameable diskProfileEntity : diskProfileEntities) { java.lang.String diskProfileName = diskProfileEntity.getName(); diskProfileNames.add(diskProfileName); } java.lang.String diskProfileNamesAsString = diskProfileNames<START_MOD>.stream().collect(java.util.stream.Collectors.joining(<END_MOD>   list.add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().removeStorageQoSItem(qosName, diskProfileNamesAsString)); } index++; } setMessage(getRemoveQosMessage(numberOfTimesUsedByDiskProfiles)); setItems(list); }
protected void loadTemplateData(org.ovirt.engine.core.common.businessentities.VmTemplate template) { <START_MOD>setManagedDevices<END_MOD>(template); if (((template.getInterfaces()) == null) || (template.getInterfaces().isEmpty())) { template.setInterfaces(getVmNetworkInterfaceDao().getAllForTemplate(template.getId())); } }
<START_MOD>public java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainOvfInfo> loadStorageDomainsInfoByPoolId(org.ovirt.engine.core.compat.Guid storagePoolId);<END_MOD>
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if (!(org.ovirt.engine.core.bll.gluster.GeoRepSessionCommandBase.isInternalExecution())) { return java.util.Collections.singletonMap(getGeoRepSession().getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.GLUSTER_GEOREP, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_GEOREP_SESSION_LOCKED)); } return null; }
@org.junit.Test public void canDoAction_vmNameExists_Test() { doReturn(new org.ovirt.engine.core.common.scheduling.AffinityGroup()).when(affinityGroupDao).getByName(anyString()); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_AFFINITY_GROUP_NAME_EXISTS); }
public void forceRemove() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().forceRemoveDataCenterTitle()); model.setHelpTag(HelpTag.force_remove_data_center); model.setHashName("force_remove_data_center"); model.getLatch().setIsAvailable(true); model.getLatch().setIsChangable(true); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.StoragePool a : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.StoragePool>cast(getSelectedItems())) { list.add(a.getName()); <START_MOD>if ((a.getStatus()) != (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Uninitialized)) { shouldAddressWarnning = true; } <END_MOD>} model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnForceRemove", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(VdcActionType.RemoveVmTemplate); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>PostZeroHandler.fixParametersWithPostZero(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getWipeAfterDelete(), false))); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getReturnValue().getInternalVdsmTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), VdcActionType.RemoveVmTemplate, VdcObjectType.Storage, org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.setSucceeded(true); } }
<START_MOD>@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalBasicListModel model = basicListProvider.getModel(); model.executeCommand(model.getEditCommand()); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(org.ovirt.engine.core.bll.network.host.AddNetworkAttachmentCommand.getParameters().getVdsId()); params.getNetworkAttachments().add(org.ovirt.engine.core.bll.network.host.AddNetworkAttachmentCommand.getParameters().getNetworkAttachment()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalAction(VdcActionType.HostSetupNetworks, params); org.ovirt.engine.core.compat.Guid createdAttachmentId = resolveCreatedAttachmentId(); org.ovirt.engine.core.bll.network.host.AddNetworkAttachmentCommand.getReturnValue().setActionReturnValue(createdAttachmentId); propagateFailure(returnValue); setSucceeded(returnValue.getSucceeded()); }<END_MOD>
@org.junit.Test public void testGustIp() { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(); vmDynamic.setStatus(VMStatus.Up); vmDynamic.setVmIp("2.2.2.2"); vm.setDynamicData(vmDynamic); org.ovirt.engine.api.model.VM map = org.ovirt.engine.api.restapi.types.VmMapper.map(vm, ((org.ovirt.engine.api.model.VM) (null))); assertNotNull(map.getGuestInfo().getIps().<START_MOD>getIps<END_MOD>().get(0)); assertEquals(map.getGuestInfo().getIps().<START_MOD>getIps<END_MOD>().get(0).getAddress(), "2.2.2.2"); }
public static org.ovirt.engine.core.common.businessentities.VmNumaNode createVmNumaNode(int index, java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNumaNodes) { org.ovirt.engine.core.common.businessentities.VmNumaNode numaNode = org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode(index); final java.util.List<org.ovirt.engine.core.common.<START_MOD>businessentities.VmNumaNode.Pinning<END_MOD>> numaPinning = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VdsNumaNode vdsNumaNode : vdsNumaNodes) { numaPinning.add(<START_MOD>new org.ovirt.engine.core.common.businessentities.VmNumaNode.Pinning<END_MOD>(vdsNumaNode<START_MOD>.getId(), true, vdsNumaNode.getIndex()<END_MOD>)); } numaNode.setVdsNumaNodeList(numaPinning); return numaNode; }
private void Run() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VM a = ((org.ovirt.engine.core.common.businessentities.VM) (item)); boolean reinitialize = (!(a.getis_initialized())) && (org.ovirt.engine.ui.uicommonweb.<START_MOD>dataprovider.AsyncDataProvider<END_MOD>.IsWindowsOsType(a.getvm_os())); org.ovirt.engine.core.common.action.RunVmParams tempVar = new org.ovirt.engine.core.common.action.RunVmParams(a.getId()); tempVar.setReinitialize(reinitialize); list.add(tempVar); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.RunVm, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void Executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { } }, null); }
@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.widget.table.column.Context context, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb<START_MOD>, java.lang.String id<END_MOD>) { if (volume == null) { return; } int upBricks = 0; int downBricks = 0; for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : volume.getBricks()) { if (brick.isOnline()) { upBricks++; } else { downBricks++; } } com.google.gwt.resources.client.ImageResource upImage = resources.upImage(); com.google.gwt.resources.client.ImageResource downImage = resources.downImage(); com.google.gwt.safehtml.shared.SafeHtml upImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(upImage).getHTML()); com.google.gwt.safehtml.shared.SafeHtml downImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(downImage).getHTML()); sb.append(applicationTemplates.volumeBrickStatusTemplate(upImageHtml, upBricks, downImageHtml, downBricks<START_MOD>, id)); }<END_MOD>
@org.junit.Test public void testJsonEmptyDiskDescription() throws java.io.IOException { <START_MOD>disk1.setDiskAlias<END_MOD>("DiskAlias"<START_MOD>);<END_MOD> <START_MOD>disk1.setDiskDescription(<END_MOD>""); <START_MOD>assertDiskDescriptionMap(); <END_MOD>}
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.DiskImage disk) { org.ovirt.engine.ui.uicommonweb.models.vms.ImportData importData = object.getDiskImportData(disk.getId()); java.util.ArrayList<java.lang.String> storageDomainsNameList = new java.util.ArrayList<java.lang.String>(); org.ovirt.engine.core.common.businessentities.<START_MOD>StorageDomain<END_MOD> selectedStorageDomain = null; if ((importData != null) && ((importData.getStorageDomains()) != null)) { for (org.ovirt.engine.core.common.businessentities.<START_MOD>StorageDomain<END_MOD> storageDomain : importData.getStorageDomains()) { storageDomainsNameList.add(storageDomain.getstorage_name()); if ((importData.getSelectedStorageDomain()) != null) { if (storageDomain.getId().equals(importData.getSelectedStorageDomain().getId())) { selectedStorageDomain = storageDomain; } } } } ((org.ovirt.engine.ui.webadmin.widget.table.column.CustomSelectionCell) (getCell())).setOptions(storageDomainsNameList); if (!(storageDomainsNameList.isEmpty())) { if (selectedStorageDomain != null) { return selectedStorageDomain.getstorage_name(); } else { return storageDomainsNameList.get(0); } } return ""; }
<START_MOD>public static boolean isUpdateSignature(org.ovirt.api.metamodel.concepts.Method method) { return ((method.getBase()) != null) && (method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.UPDATE)); }<END_MOD>
<START_MOD>private static void fetchStorageStatus(org.ovirt.engine.core.compat.Guid storageDomainId, java.util.List<org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData> storageExtraData, java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap) { org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus storageStatus = ((org.ovirt.engine.core.common.businessentities.StorageDomainSharedStatus) (diskDescriptionMap.get(OvfInfoFileConstants.DomainStatus))); org.ovirt.engine.core.utils.OvfUtils.log.debug("Storage domain status '{}' fetched from metadata json file for storage id '{}'.", storageStatus, storageDomainId); if (storageStatus != null) { storageExtraData.add(new org.ovirt.engine.core.common.businessentities.storage.StorageOvfExtraData(storageDomainId, org.ovirt.engine.core.common.VdcObjectType.Storage, storageDomainId, storageStatus.name())); } }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice> mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { @java.lang.SuppressWarnings("synthetic-access") org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice> entity = new org.ovirt.engine.core.common.utils.Pair(); entity.setFirst(org.ovirt.engine.core.dao.<START_MOD>VmDAOImpl<END_MOD>.VMRowMapper.instance.mapRow(rs, rowNum)); entity.setSecond(<START_MOD>VmDeviceDAOImpl<END_MOD>.VmDeviceRowMapper.instance.mapRow(rs, rowNum)); return entity; }
<START_MOD>private void storeIpv6(java.lang.StringBuilder output, org.ovirt.engine.core.common.businessentities.VmInitNetwork iface) { storeIp(output, new org.ovirt.engine.core.vdsbroker.vdsbroker.CloudInitHandler.Ipv6InfoFetcher(iface)); }<END_MOD>
<START_MOD>types.DnsServers dnsServers();<END_MOD>
protected org.ovirt.engine.core.common.businessentities.AdUser populateUserData(org.ovirt.engine.core.common.businessentities.AdUser user, java.lang.String domain) { if (user == null) { return null; } user.setDomainControler(domain); java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD>> groupsDict = new java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD>>(); org.ovirt.engine.core.bll.adbroker.GroupsDNQueryGenerator generator = new org.ovirt.engine.core.bll.adbroker.GroupsDNQueryGenerator(); proceedGroupsSearchResult(user.getMemberof(), groupsDict, generator); user.setGroups(groupsDict); return user; }
private static org.ovirt.engine.core.common.businessentities.StoragePool createNewStoragePool() { org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.createBasicPool(); pool.setcompatibility_version(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.VERSION_1_1); return pool; }
public boolean validateVmProperties(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<java.lang.String> messages) { java.util.List<org.ovirt.engine.core.utils.<START_MOD>customprop<END_MOD>.<START_MOD>CustomPropertiesUtils<END_MOD>.ValidationError> validationErrors = getVmPropertiesUtils().validateVMProperties(vm.getVdsGroupCompatibilityVersion(), vm.getStaticData()); if (!(validationErrors.isEmpty())) { org.ovirt.engine.core.bll.VmHandler.handleCustomPropertiesError(validationErrors, messages); return false; } return true; }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { org.ovirt.engine.core.common.businessentities.Tags tag = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getByName(org.ovirt.engine.core.bll.UpdateTagCommand.getParameters().getTag().getTagName()); if ((tag != null) && (!(tag.getTagId().equals(org.ovirt.engine.core.bll.UpdateTagCommand.getParameters().getTag().getTagId())))) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.TAGS_SPECIFY_TAG_IS_IN_USE); return false; } tag = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().get(org.ovirt.engine.core.bll.UpdateTagCommand.getParameters().getTag().getTagId()); if (((tag.getIsReadonly()) != null) && (tag.getIsReadonly())) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.TAGS_CANNOT_EDIT_READONLY_TAG); return false; } return true; }
protected static void reportUnsupportedVnicProfileFeatures(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, java.util.List<org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilderBase.VNIC_PROFILE_PROPERTIES> unsupportedFeatures) { if (unsupportedFeatures.isEmpty()) { return; } org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVmId(vm.getId()); event.setVdsGroupId(vm.getVdsGroupId()); event.setCustomId(nic.getId().toString()); event.setCompatibilityVersion(vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>().toString()); event.addCustomValue("NicName", nic.getName()); event.addCustomValue("VnicProfile", (vnicProfile == null ? null : vnicProfile.getName())); java.lang.String[] unsupportedFeatureNames = new java.lang.String[unsupportedFeatures.size()]; for (int i = 0; i < (unsupportedFeatures.size()); i++) { unsupportedFeatureNames[i] = unsupportedFeatures.get(i).getFeatureName(); } event.addCustomValue("UnsupportedFeatures", org.apache.commons.lang.StringUtils.join(unsupportedFeatureNames,     new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(event, AuditLogType.VNIC_PROFILE_UNSUPPORTED_FEATURES); }
private void setVolumeOptions(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { java.util.List<java.lang.String> errors = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity option : volume.getOptions()) { option.setVolumeId(volume.getId()); org.ovirt.engine.core.common.action.VdcReturnValueBase setOptionReturnValue = runInternalAction(VdcActionType.SetGlusterVolumeOption, new org.ovirt.engine.core.common.action.gluster.GlusterVolumeOptionParameters(option), createCommandContext(volume, option)); if (!(setOptionReturnValue.getSucceeded())) { setSucceeded(false); errors.addAll(setOptionReturnValue.<START_MOD>getValidateMessages<END_MOD>()); errors.addAll(setOptionReturnValue.getExecuteFailedMessages()); } } if (!(errors.isEmpty())) { handleVdsErrors(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, errors); } }
<START_MOD>public void persistCoCoCmdEntities(java.util.Collection<org.ovirt.engine.core.common.businessentities.CoCoCmdEntity> coCoCmdEntities) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getCommandEntityDao().insertCoCoCmdEntities(coCoCmdEntities); }<END_MOD>
@com.gwtplatform.mvp.client.annotations.ProxyEvent public void onUiCommonInit(org.ovirt.engine.ui.common.uicommon.model.UiCommonInitEvent event) { modelProvider.getModel().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.Object entity = modelProvider.getModel().getEntity(); if (entity != null) { onDetailModelEntityChange(entity); } } }); modelProvider.getModel().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs pcArgs = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)); if (PropertyChangedEventArgs.Args.PROGRESS.toString().equals(pcArgs.propertyName)) { if ((modelProvider.getModel().getProgress()) != null) { <START_MOD>com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { <END_MOD>if ((getTable()) != null) { getTable().setLoadingState(LoadingState.LOADING); } } }<START_MOD>); } } } }); }<END_MOD>
@java.lang.<START_MOD>SuppressWarnings("unchecked") @java.lang.<END_MOD>Override public org.ovirt.engine.api.model.GlusterBricks list() { <START_MOD>try { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = runQuery(VdcQueryType.GetGlusterVolumeBricks, new org.ovirt.engine.core.common.queries.gluster.IdQueryParameters(asGuid(getVolumeId()))); if (!(returnValue.getSucceeded())) { <END_MOD>throw new org.ovirt.engine.<START_MOD>api.restapi.resource.gluster.BackendFailureException(localize(returnValue.getExceptionString())); } java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks = ((java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>) (returnValue.getReturnValue())); return mapCollection(bricks); } catch (java.lang.Exception e) { return handleError(e, false); } }<END_MOD>
<START_MOD>public boolean isQualifyForCheckUpdates() { return ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) || ((this) == (org.ovirt.engine.core.common.businessentities.VDSStatus.NonOperational)); }<END_MOD>
@java.lang.Override public void onSuccess(final java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase>> operationList, final java.util.List<org.ovirt.engine.core.common.action.VdcReturnValueBase> resultObject) { org.ovirt.engine.ui.frontend.Frontend.logger.finer( successfully executed runMultipleAction, determining result! java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> failed = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase>(); for (org.ovirt.engine.core.common.action.VdcReturnValueBase v : resultObject) { if (!(v.getCanDoAction())) { failed.add(v); } } if (!(failed.isEmpty())) { translateErrors(failed); getEventsHandler().runMultipleActionFailed(actionType, failed); } if (callback != null) { callback.executed(new org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult(actionType, parameters, resultObject, state)); } org.ovirt.engine.ui.frontend.communication.<START_MOD>AsyncOperationCompleteEvent.fire(this, state); org.ovirt.engine.ui.frontend.communication.<END_MOD>RefreshActiveModelEvent.fire(this, true); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( you sure you want to Power Off the following Virtual Machines? java.lang.String areYouSureYouWantToStopTheFollowingVirtualMachinesMsg();
public static void GetVmTemplatesWithPermittedAction(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> list = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate>(); if (source != null) { org.ovirt.engine.core.common.businessentities.VmTemplate blankTemplate = <START_MOD>null<END_MOD>; for (org.ovirt.engine.core.common.businessentities.VmTemplate template : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate>) (source))) { if (template.getId().equals(Guid.Empty)) { blankTemplate = template; } else if ((template.getstatus()) == (org.ovirt.engine.core.common.businessentities.VmTemplateStatus.OK)) { list.add(template); } } java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.VmTemplateByNameComparer()); <START_MOD>if (blankTemplate != null) { <END_MOD>list.add(0, blankTemplate); } <START_MOD>} <END_MOD>return list; } }; org.ovirt.engine.core.common.queries.GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new org.ovirt.engine.core.common.queries.GetEntitiesWithPermittedActionParameters(); getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVmTemplatesWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery); }
@java.lang.Override public org.ovirt.engine.api.model.StorageDomain update(org.ovirt.engine.api.model.StorageDomain incoming) { validateEnums(org.ovirt.engine.api.model.StorageDomain.class, incoming); org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid> storageDomainResolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetStorageDomainById, org.ovirt.engine.core.common.queries.IdQueryParameters.class); org.ovirt.engine.core.common.businessentities.StorageDomain entity = getEntity(storageDomainResolver, true); org.ovirt.engine.api.model.StorageDomain model = map(entity, new org.ovirt.engine.api.model.StorageDomain()); org.ovirt.engine.core.common.businessentities.storage.StorageType storageType = entity.getStorageType(); if (storageType != null) { switch (storageType) { case ISCSI : case FCP : extendStorageDomain<START_MOD>(incoming, model, storageType); refreshLunSize<END_MOD>(incoming, model, storageType); break; default : break; } } return addLinks(performUpdate(incoming, entity, model, storageDomainResolver, VdcActionType.UpdateStorageDomain, new org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.UpdateParametersProvider()), new java.lang.String[]{ "templates", "vms" }); }
private void copyVmPermissions(org.ovirt.engine.core.bll.UniquePermissionsSet permissionsToAdd) { if ((!(isVmInDb)) || (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().isCopyVmPermissions()))) { return; } org.ovirt.engine.core.dao.PermissionDAO dao = org.ovirt.engine.core.bll.AddVmTemplateCommand.getDbFacade().getPermissionDao(); java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> vmPermissions = dao.getAllForEntity(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmId(), org.ovirt.engine.core.bll.AddVmTemplateCommand.getCurrentUser().getId(), <START_MOD>org.ovirt.engine.core.bll.AddVmTemplateCommand.getSessionId(), <END_MOD>false); for (org.ovirt.engine.core.common.businessentities.Permissions vmPermission : vmPermissions) { permissionsToAdd.addPermission(vmPermission.getad_element_id(), vmPermission.getrole_id(), org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getVmTemplateId(), VdcObjectType.VmTemplate); } }
@java.lang.Override protected void initializeModelHandlers() { super.initializeModelHandlers(); getModel().getResetRequestedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.EventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel> items = getModel().getItems(); if ((items != null) && (!(items.isEmpty()))) { selectionModel.setSelected(items.get(0), true); } } }); }
<START_MOD>@org.junit.Test public void testExecuteQueryNotSupported() { setup(org.ovirt.engine.core.bll.network.host.GetMultipleTlvsByHostIdTest.ExpectedError.NOT_SUPPORTED); getQuery().executeQueryCommand(); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.LldpInfo> returnValue = getQuery().getQueryReturnValue().getReturnValue(); assertTrue(checkEmptyValuesForIfaces(returnValue)); }<END_MOD>
protected void setGetNetworksQueryExpectations(int times, java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> networks) throws java.lang.Exception { while ((times--) > 0) { setUpEntityQueryExpectations(VdcQueryType.GetAllNetworksByClusterId, org.ovirt.engine.core.common.queries.VdsGroupQueryParamenters.class, new java.lang.String[]{ "VdsGroupId" }, new java.lang.Object[]{ GUIDS[0] }, networks); } }
<START_MOD>@org.ovirt.engine.core.bll.network.macpool.AcquireWriteLock <END_MOD>java.util.List<java.lang.String> allocateMacAddresses(int numberOfAddresses);
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( to Edit Cluster properties java.lang.String allowToEditClusterPropertiesRoleTreeTooltip();
<START_MOD>public static void GetExternalProviderHostList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>(); } return source; } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetHostListFromExternalProvider, new org.ovirt.engine.core.common.queries.GetHostListFromExternalProviderParameters(), aQuery); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.api.model.ClusterFeatures list() { org.ovirt.engine.api.model.ClusterFeatures features = new org.ovirt.engine.api.model.ClusterFeatures(); java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> addlFeatures = getOptionalEntity(java.util.Set.class, QueryType.GetClusterFeaturesByClusterId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), clusterId.toString(), false); if (addlFeatures != null) { for (org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature entity : addlFeatures) { if (entity.isEnabled()) { features.getClusterFeatures().add(addLinks(map(entity.getFeature(), null))); } } } return features; }<END_MOD>
@org.junit.Test public void testIscsiLunDiskWithNoAddressCantBeAdded() { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createISCSILunDisk(); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(disk); initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid(), parameters); disk.getLun().getLunConnections().get(0).setConnection(null); assertFalse( succeded for ISCSI lun which LUNs has storage_server_connection with a null address command.checkIfLunDiskCanBeAdded(spyDiskValidator(disk))); assertTrue( failed but correct can do action hasn been added to the return response <START_MOD>verifyValidateMessagesContainMessage<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_DISK_LUN_ISCSI_MISSING_CONNECTION_PARAMS)); <START_MOD>clearValidateMessages<END_MOD>(); disk.getLun().getLunConnections().get(0).setConnection(""); assertFalse( succeded for ISCSI lun which LUNs has storage_server_connection with a empty address command.checkIfLunDiskCanBeAdded(spyDiskValidator(disk))); assertTrue( failed but correct can do action hasn been added to the return response <START_MOD>verifyValidateMessagesContainMessage<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_DISK_LUN_ISCSI_MISSING_CONNECTION_PARAMS)); }
@org.junit.Test public void getHugeMemoryFitsIntoOneHugePage() { org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setCustomProperties("hugepages=1024"); base.setMemSizeMb(1024); assertThat(<START_MOD>org.ovirt.engine.core.common.<END_MOD>utils<START_MOD>.HugePageUtils<END_MOD>.getHugePages(base).size(), is(1)); assertThat(<START_MOD>org.ovirt.engine.core.common.<END_MOD>utils<START_MOD>.HugePageUtils<END_MOD>.getHugePages(base).get(1024), is(1)); }
public void setvds_name(java.lang.String value) { this.mVdsStatic.<START_MOD>setVdsName<END_MOD>(value); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.StoragePool> pools = ((java.util.ArrayList<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.StoragePool>) (returnValue)); org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.StoragePool pool = pools.get(0); if (pool != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetStorageDomainList(((org.ovirt.engine.ui.frontend.AsyncQuery) (model)), pool.getId()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((disk.getVm()) == null) { return; } boolean isVirtioScsiEnabled = java.lang.Boolean.TRUE.equals(((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity()); org.ovirt.engine.core.compat.Version clusterVersion = disk.getVm().getCompatibilityVersion(); interfaceInfoIcon.setVisible((!isVirtioScsiEnabled)); }
public org.ovirt.engine.core.bll.ValidationResult networkNotUsedByRunningVms() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> runningVms = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = getDbFacade().getVmNetworkInterfaceDao().getAllForNetwork(network.getId()); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>> vnicsByVmId = org.ovirt.engine.core.common.businessentities.Entities.vmInterfacesByVmId(vnics); for (org.ovirt.engine.core.common.businessentities.VM vm : getVms()) { if (vm.isRunningOrPaused()) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic : vnicsByVmId.get(vm.getId())) { if (org.ovirt.engine.core.bll.common.predicates.VmNetworkCanBeUpdatedPredicate.getInstance().eval(nic)) { runningVms.add(vm); break; } } } } return networkNotUsed(runningVms, <START_MOD>EngineMessages<END_MOD>.VAR__ENTITIES__VMS, <START_MOD>EngineMessages<END_MOD>.VAR__ENTITIES__VM); }
@java.lang.Override public void Executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase ticketReturnValue = result.getReturnValue(); if ((ticketReturnValue != null) && ((ticketReturnValue.getActionReturnValue()) != null)) { otp64 = ((java.lang.String) (ticketReturnValue.getActionReturnValue())); if ((org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(getEntity().getdisplay_ip())) || (org.ovirt.engine.core.compat.StringHelper.stringsEqual(getEntity().getdisplay_ip(), "0"))) { org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object ReturnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel consoleModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel) (model)); <START_MOD>consoleModel.postGetHost(((java.lang.String<END_MOD>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue()))<START_MOD>); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetManagementInterfaceAddressByVdsId, new<END_MOD> org.ovirt.engine.core.common.<START_MOD>queries.GetManagementInterfaceAddressByVdsIdParameters(getEntity().getrun_on_vds().getValue()), _asyncQuery); } else { <END_MOD>postGetHost(getEntity().getdisplay_ip()); } } }
public org.ovirt.engine.sdk.Api <START_MOD>getConnection<END_MOD>() throws java.io.IOException, org.ovirt.engine.sdk.exceptions.ServerException, org.ovirt.engine.sdk.exceptions.UnsecuredConnectionAttemptError<START_MOD> { if ((api) == null)<END_MOD> { java.lang.String url = java.lang.String.format("%s://%s:%s/ovirt-engine/api", protocol, server, port); org.ovirt.optimizer.service.OvirtClient.log.debug(java.lang.String.format( to %s as %s url, username)); <START_MOD>api =<END_MOD> new org.ovirt.engine.sdk.Api(url, username, password, true); }<START_MOD> return api; }<END_MOD>
public static java.util.ArrayList<org.ovirt.engine.core.common.businessentities.LUNs> ParseLUNList(<START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>Map<END_MOD>[] lunList) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.LUNs> result = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.LUNs>(lunList.length); for (<START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>Map<END_MOD> xlun : lunList) { result.add(org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.ParseLunFromXmlRpc(xlun)); } return result; }
public org.ovirt.engine.core.bll.ValidationResult glusterNetworkSupported() { return (networkCluster.isGluster()) && (!(org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterNetworkRoleSupported(version))) ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.GLUSTER_NETWORK_NOT_SUPPORTED_FOR_POOL_LEVEL) : org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getExternalVmList(java.lang.String uri, java.lang.String username, java.lang.String password<START_MOD>, java.util.List<java.lang.String> vmsNames<END_MOD>) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request<START_MOD>; if (vmsNames == null) { request<END_MOD> = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.getExternalVMs").withParameter("uri", uri).withParameter("username", username).withParameter("password", password).build();<START_MOD> } else { request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.getExternalVMs").withParameter("uri", uri).withParameter("username", username).withParameter("password", password).withParameter("vm_names", vmsNames).build(); }<END_MOD> java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("vmList").withResponseType(java.lang.Object[].class); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc(response); }
<START_MOD>@org.ovirt.engine.ui.common.DefaultStringValue("Check Alignment") java.lang.String checkAlignmentDisk();<END_MOD>
private void onRemove() { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (<START_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.<END_MOD>getWindow())); if ((model.getProgress()) != null) { return; } final java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (java.util.Map.Entry<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.ui.uicommonweb.models.EntityModel> entry : vmsRemoveMap.entrySet()) { list.add(new org.ovirt.engine.core.common.action.RemoveVmParameters(entry.getKey(), false, ((java.lang.Boolean) (entry.getValue().getEntity())))); } model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.RemoveVm, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); } }, model); }
@org.junit.Test public void bridgePropertiesNonVm() { org.ovirt.engine.core.common.businessentities.network.Network network = createManagementNetwork(); network.setVmNetwork(false); mockExistingNetworks(network); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork("eth0", network); mockExistingIfaces(iface); iface.setCustomProperties(createCustomProperties()); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(iface), Version.v3_5); validateAndExpectViolation(helper, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_BAD_INPUT, org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME); }
private void updatePmModels() { boolean isPm = getIsPm().getEntity(); getPmProxyPreferencesList().setIsChangeable(getIsPm().getEntity()); java.lang.String proxySelectedItem = getPmProxyPreferencesList().getSelectedItem(); getProxyUpCommand().setIsExecutionAllowed((isPm && (proxySelectedItem != null))); getProxyDownCommand().setIsExecutionAllowed((isPm && (proxySelectedItem != null))); getDisableAutomaticPowerManagement().setIsValid(true); getDisableAutomaticPowerManagement().setIsChangeable(isPm); getPmKdumpDetection().setIsChangeable(isPm); <START_MOD>getFenceAgents<END_MOD>().<START_MOD>setIsChangeable<END_MOD>(isPm); <START_MOD>getFenceAgents().setHost(this); <END_MOD>}
public java.util.Map<java.lang.String, java.lang.Object> reconstructMaster(java.lang.String spUUID<START_MOD>, int hostSpmId<END_MOD>, java.lang.String poolName, java.lang.String masterDom, java.util.Map<java.lang.String, java.lang.String> domDict, int masterVersion, java.lang.String lockPolicy, int lockRenewalIntervalSec, int leaseTimeSec, int ioOpTimeoutSec, int leaseRetries);
<START_MOD>@org.junit.Test public void testVmDuringSnaoshot() { setUpGeneralValidations(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT)).when(snapshotValidator).vmNotDuringSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList()).when(cmd).getDisksList(); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT.name())); }<END_MOD>
<START_MOD>public void setKeystoneURL(java.lang.String keystoneURL) { this.keystoneURL = keystoneURL; }<END_MOD>
public void engineInitialize() { createInternalAAAConfigurations(); createKerberosLdapAAAConfigurations(); for (java.io.File directory : org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExtensionsDirectories()) { if (!(directory.exists())) { org.ovirt.engine.core.utils.extensionsmgr.EngineExtensionsManager.log.warn( directory '{}' cotaning configuration files does not exist. directory.getAbsolutePath()); } else { java.io.File[] files = directory.listFiles(); if (files != null) { java.util.Arrays.sort(files); for (java.io.File file : files) { if (file.getName().endsWith(".properties")) { <START_MOD>try { <END_MOD>load(file);<START_MOD> } catch (java.lang.Exception ex) { org.ovirt.engine.core.utils.extensionsmgr.EngineExtensionsManager.log.error( not load extension based on configuration file '{}'. Please check the configuration file is valid. file.getAbsolutePath()); }<END_MOD> } } } } } for (org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension : getLoadedExtensions()) { if (org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getBoolean(((org.ovirt.engine.core.utils.extensionsmgr.EngineExtensionsManager.ENGINE_EXTENSION_ENABLED) + (extension.getContext().<java.lang.String>get(Base.ContextKeys.INSTANCE_NAME))), java.lang.Boolean.parseBoolean(extension.getContext().<java.util.Properties>get(Base.ContextKeys.CONFIGURATION).getProperty(Base.ConfigKeys.ENABLED, "true")))) { initialize(extension.getContext().<java.lang.String>get(Base.ContextKeys.INSTANCE_NAME)); } } dump(); }
<START_MOD>public void setSkipFencingIfNetworkUnstableEnabled(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> skipFencingIfNetworkUnstableEnabled) { this.skipFencingIfNetworkUnstableEnabled = skipFencingIfNetworkUnstableEnabled; }<END_MOD>
@org.junit.Test public void testNetworkAttachedToClusterWhenNotAttached() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNetworkId(network.getId()); org.ovirt.engine.core.common.businessentities.network.NetworkClusterId networkClusterId = new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(host.getVdsGroupId(), network.getId()); when(networkClusterDaoMock.get(eq(networkClusterId))).thenReturn(null); when(networkDaoMock.get(eq(network.getId()))).thenReturn(network); assertThat(createNetworkAttachmentValidator(attachment).networkAttachedToCluster(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.NETWORK_NOT_EXISTS_IN_CLUSTER)); }
private void registerHandlers() { model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if ((<START_MOD>Model.PROP_WINDOW<END_MOD>.equals(propName)) && ((model.getWindow()) == null)) { if (model.getSpecificClusterQuota().getEntity()) { quotaClusterTable.asEditor().edit(model.getAllDataCenterClusters()); } else { quotaClusterTable.asEditor().edit(model.getQuotaClusters()); } if (model.getSpecificStorageQuota().getEntity()) { quotaStorageTable.asEditor().edit(model.getAllDataCenterStorages()); } else { quotaStorageTable.asEditor().edit(model.getQuotaStorages()); } } } }); model.getSpecificClusterQuota().getEntityChangedEvent().addListener(clusterListener); model.getSpecificStorageQuota().getEntityChangedEvent().addListener(storageListener); }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity> getBatchMapper() { throw new java.lang.RuntimeException("Unsupported operation"); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult isDiskAttachedToVm(org.ovirt.engine.core.<START_MOD>common.businessentities.VM vm<END_MOD>) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = getVmDao().getVmsListForDisk(disk.getId(), true); <START_MOD>java.lang.String[] replacements = new java.lang.String[]{ java.lang.String.format(org.ovirt.engine.core.bll.validator.storage.DiskValidator.DISK_NAME_REPLACEMENT, disk.getDiskAlias()), java.lang.String.format(org.ovirt.engine.core.bll.validator.storage.DiskValidator.VM_NAME_REPLACEMENT, vm.getName()) }; <END_MOD>return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_ATTACHED_TO_VM<START_MOD>, replacements<END_MOD>).when(vms.stream().noneMatch(( <START_MOD>vm1) -> vm1.getId().equals(<END_MOD>vm.getId()))); }
protected java.lang.String getSizeString(java.lang.Double size, org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit inUnit) { if (size == null) { return constants.notAvailableLabel(); } else { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit, java.lang.Double> sizeWithUnits = org.ovirt.engine.core.common.utils.SizeConverter.autoConvert(size.longValue(), inUnit); return <START_MOD>org.ovirt.engine.ui.webadmin.widget.table.column.GlusterCapacityCell.MESSAGES.sizeUnitString<END_MOD>(formatSize(sizeWithUnits.getSecond())<START_MOD>,<END_MOD> sizeWithUnits.getFirst()); } }
<START_MOD>public static java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> filterImageDisks(java.util.Collection<? extends org.ovirt.engine.core.common.businessentities.Disk> listOfDisks, boolean allowOnlyNotShareableDisks, boolean allowOnlySnapableDisks, boolean allowIllegalDisks) { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> diskImages = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(); for (org.ovirt.engine.core.common.businessentities.Disk disk : listOfDisks) { if ((((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE)) && ((!allowOnlyNotShareableDisks) || (!(disk.isShareable())))) && ((!allowOnlySnapableDisks) || (disk.isAllowSnapshot()))) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)); if (allowIllegalDisks || ((diskImage.getImageStatus()) != (org.ovirt.engine.core.common.businessentities.ImageStatus.ILLEGAL))) { diskImages.add(diskImage); } } } return diskImages; }<END_MOD>
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = getVdsGroup(); boolean initSucceeded = true; if (vdsGroup.supportsTrustedService()) { initSucceeded = initTrustedService(); } if (initSucceeded && (vdsGroup.supportsVirtService())) { initSucceeded = initVirtResources(); } if (initSucceeded && (vdsGroup.supportsGlusterService())) { initSucceeded = initGlusterHost(); } setSucceeded(initSucceeded); <START_MOD>if (getSucceeded()) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(getVds().getId()); logable.addCustomValue("VdsStatus", getVds().getStatus().toString()); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.VDS_DETECTED); } }<END_MOD>
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.InstanceType.class, to = org.ovirt.engine.api.model.InstanceType.class) public static org.ovirt.engine.api.model.InstanceType map(org.ovirt.engine.core.common.businessentities.InstanceType entity, org.ovirt.engine.api.model.InstanceType incoming) { org.ovirt.engine.api.model.InstanceType <START_MOD>model<END_MOD> = (incoming != null) ? incoming : new org.ovirt.engine.api.model.InstanceType(); <START_MOD>mapCommonEntityToModel(model, ((org.ovirt.engine.core.common.businessentities.VmTemplate) (entity))); model.setDisplay(<END_MOD>org.ovirt.engine.api.restapi.types.<START_MOD>DisplayMapper<END_MOD>.map(<START_MOD>entity, null)); if ((entity.getDefaultBootSequence()) != null) { org.ovirt.engine.api.model.OperatingSystem os = new org.ovirt.engine.api.model.OperatingSystem(); if ((entity.getDefaultBootSequence()) != null) { for (org.ovirt.engine.api.model.Boot boot : org.ovirt.engine.api.restapi.types.VmMapper.map(entity.getDefaultBootSequence(), null)) { os.getBoot().add(boot); } } model.setOs(os); }<END_MOD> return <START_MOD>model<END_MOD>; }
<START_MOD>public static org.ovirt.engine.core.common.businessentities.VmRngDevice.Backend getBackendEgd(java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice.Backend.Source> sources) { return new org.ovirt.engine.core.common.businessentities.VmRngDevice.Backend(org.ovirt.engine.core.common.businessentities.VmRngDevice.Model.EGD, sources); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBatchMapper() { return new org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>() { @java.lang.Override public org.springframework.jdbc.core.namedparam.MapSqlParameterSource map(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource paramValue = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource().addValue("volume_id", entity.getVolumeId()).addValue("server_id", entity.getServerId()).addValue("brick_dir", entity.getBrickDirectory()).addValue("status", entity.getStatus().name()).addValue("id", entity.getId().toString()).addValue("brick_order", entity.getBrickOrder()).addValue("network_id", entity.getNetworkId()).addValue("task_id", ((entity.getAsyncTask().getTaskId()) != null ? entity.getAsyncTask().getTaskId().toString() : ""))<START_MOD>.addValue("unsynced_entries", entity.getUnsycnedEntries()).addValue("unsynced_entires_history", entity.getUnSyncedEntiresTrend())<END_MOD>; return paramValue; } }; }
<START_MOD>private java.lang.String getVdsCertificateSubject() { return org.ovirt.engine.core.bll.ConfigureConsoleOptionsQuery.getBackend().runInternalQuery(VdcQueryType.GetVdsCertificateSubjectByVmId, new org.ovirt.engine.core.common.queries.IdQueryParameters(cachedVm.getId())).getReturnValue(); }<END_MOD>
@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, java.lang.String value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { if (value != null) { sb.appendHtmlConstant( href='javascript:;' style= inline-block super.render(context, value, sb<START_MOD>, id<END_MOD>); sb.appendHtmlConstant("</a>"); } }
@java.lang.Override public void cleanup() { driver.cleanup(); <START_MOD>unitVmModel.cleanup(); unitVmModel = null; <END_MOD>}
@java.lang.Override protected boolean canDoAction() { clusterId = getParameters().getClusterId(); serverId = getParameters().getServerId(); serviceType = getParameters().getServiceType(); actionType = getParameters().getActionType(); if (!(org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand.manageActionDetailsMap.keySet().contains(actionType))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_INVALID_ACTION_TYPE); } if ((org.ovirt.engine.core.compat.Guid.isNullOrEmpty(clusterId)) && (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(serverId))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_CLUSTERID_AND_SERVERID_BOTH_NULL); } if ((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(clusterId))) && ((getClusterUtils().getAllUpServers(clusterId).size()) == 0)) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NO_SERVERS_FOR_CLUSTER); } return true; }
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DnsResolverConfiguration.class, to = org.ovirt.engine.api.model.DnsResolverConfiguration.class) public static org.ovirt.engine.api.model.DnsResolverConfiguration map(org.ovirt.engine.core.common.businessentities.network.DnsResolverConfiguration entity, org.ovirt.engine.api.model.DnsResolverConfiguration template) { if (entity == null) { return null; } java.util.List<org.ovirt.engine.core.common.businessentities.network.NameServer> nameServers = entity.getNameServers(); if (nameServers == null) { return null; } java.util.List<java.lang.String> nameServerList = nameServers.stream().map(NameServer::getAddress).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.api.model.DnsResolverConfiguration.NameServersList nameServersList = new org.ovirt.engine.api.model.DnsResolverConfiguration.NameServersList(); nameServersList.getNameServers().addAll(nameServerList); org.ovirt.engine.api.model.DnsResolverConfiguration dnsResolverConfiguration = new org.ovirt.engine.api.model.DnsResolverConfiguration(); dnsResolverConfiguration.setNameServers(nameServersList); return dnsResolverConfiguration; }<END_MOD>
@java.lang.Override public T mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { T entity = createNetworkEntity(); entity.setId(org.ovirt.engine.core.dao.network.NetworkDaoDbFacadeImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "id")); entity.setName(rs.getString("name")); entity.setDescription(rs.getString("description")); entity.setComment(rs.getString("free_text_comment")); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setAddr(rs.getString("addr")); entity.setSubnet(rs.getString("subnet")); entity.setGateway(rs.getString("gateway")); entity.setVlanId(((java.lang.Integer) (rs.getObject("vlan_id")))); entity.setStp(rs.getBoolean("stp")); entity.setDataCenterId(org.ovirt.engine.core.dao.network.NetworkDaoDbFacadeImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "storage_pool_id")); entity.setMtu(rs.getInt("mtu")); entity.setVmNetwork(rs.getBoolean("vm_network")); org.ovirt.engine.core.compat.Guid providerId = org.ovirt.engine.core.dao.network.NetworkDaoDbFacadeImpl.NetworkRowMapperBase.getGuid(rs, "provider_network_provider_id"); if (providerId != null) { entity.setProvidedBy(new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(providerId, rs.getString("provider_network_external_id"))); } <START_MOD>entity.setQos(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getQosDao().get(org.ovirt.engine.core.dao.network.NetworkDaoDbFacadeImpl.NetworkRowMapperBase.getGuid(rs, "qos_id"))); <END_MOD>return entity; }
public java.lang.String <START_MOD>getGetSessionUserServletURL<END_MOD>() { return <START_MOD>getSessionUserGetSessionUserServletURL<END_MOD>; }
<START_MOD>protected boolean pciAndIdeWithinLimit(org.ovirt.engine.core.common.businessentities.VmStatic vm, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> allInterfaces, java.util.List<org.ovirt.engine.core.common.businessentities.Disk> allDisks) { if (!(checkPciAndIdeLimit(vm.getNumOfMonitors(), allInterfaces, allDisks, org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getReturnValue().getCanDoActionMessages()))) { return false; } else { return true; } }<END_MOD>
protected void addVmTemplateToDb() { getVmTemplate().setVdsGroupId(getParameters().getVdsGroupId());<START_MOD> if (!(isDedicatedVdsExistOnSameCluster(getVmTemplate(), true))) { getVmTemplate().setDedicatedVmForVds(null); }<END_MOD> getVmTemplate().setStatus(VmTemplateStatus.Locked); getVmTemplate().setQuotaId(getParameters().getQuotaId()); org.ovirt.engine.core.bll.VmHandler.updateImportedVmUsbPolicy(getVmTemplate()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().save(getVmTemplate()); getCompensationContext().snapshotNewEntity(getVmTemplate()); int count = 1; for (org.ovirt.engine.core.common.businessentities.DiskImage image : getImages()) { image.setActive(true); org.ovirt.engine.core.common.businessentities.image_storage_domain_map map = org.ovirt.engine.core.bll.BaseImagesCommand.saveImage(image); getCompensationContext().snapshotNewEntity(image.getImage()); getCompensationContext().snapshotNewEntity(map); if (!(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getBaseDiskDao().exists(image.getId()))) { image.setDiskAlias(org.ovirt.engine.core.bll.ImagesHandler.getSuggestedDiskAlias(image, getVmTemplateName(), count)); count++; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getBaseDiskDao().save(image); getCompensationContext().snapshotNewEntity(image); } org.ovirt.engine.core.common.businessentities.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.DiskImageDynamic(); diskDynamic.setId(image.getImageId()); diskDynamic.setactual_size(image.getActualSizeInBytes()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskImageDynamicDao().save(diskDynamic); getCompensationContext().snapshotNewEntity(diskDynamic); } }
protected void loadRdpData(org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel model, org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker keyMaker) { if ((!(consoleUtils.isRDPAvailable())) || ((model.getAdditionalConsoleModel()) == null)) { return; } model.setSelectedProtocol(ConsoleProtocol.RDP); <START_MOD>try { <END_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.<START_MOD>RdpConsoleModel.ClientConsoleModeRdp consoleMode = org.ovirt.engine.ui.uicommonweb.models.vms.RdpConsoleModel.ClientConsoleModeRdp.valueOf(clientStorage.getLocalItem(keyMaker.make(org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.RDP_CLIENT_MODE))); asRdpConsoleModel(model).setRdpImplementation(consoleMode); } catch (java.lang.Exception e) { } org.ovirt.engine.ui.uicommonweb.models.vms.<END_MOD>IRdp rdp = <START_MOD>asRdpConsoleModel(model).getrdp(<END_MOD>); rdp.setUseLocalDrives(readBool(keyMaker.make(org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.USE_LOCAL_DRIVES))); }
protected org.ovirt.engine.core.bll.ValidationResult macAvailable() { org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPool<END_MOD> macPool = org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getMacPool(); java.lang.Boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); if (allowDupMacs || (!(vmInterfaceManager.existsPluggedInterfaceWithSameMac(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic())))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE); } }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.storage.ImportCloneModel object) { if ((object.getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VM) { dialogLabelEditor.setText(messages.sameVmNameExists(((org.ovirt.engine.core.common.businessentities.VM) (object.getEntity())).getName())); cloneEditor.asRadioButton().setHTML(templates.twoLinesRadioButtonLabel(constants.cloneImportVm(), constants.cloneImportVmDetails()).asString()); suffixEditor.setLabel(constants.cloneImportSuffixVm()); } else { dialogLabelEditor.setText(((((constants.sameTemplateNameExists()) +   ( + (((org.ovirt.engine.core.common.businessentities.VmTemplate) (object.getEntity())).<START_MOD>getName<END_MOD>())) + ")")); cloneEditor.setLabel(constants.cloneImportTemplate()); suffixEditor.setLabel(constants.cloneImportSuffixTemplate()); } org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportCloneDialogPopupView.Driver.driver.edit(object); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Step step) { validateParameters(step, "type", "status.state", "description"); java.lang.String id; if (step.isSetParentStep()) { validateParameters(step, <START_MOD>"parentStep.id"<END_MOD>); id = step.getParentStep().getId(); } else { id = jobId.toString(); } <START_MOD>javax.ws.rs.core.Response response =<END_MOD> performCreate(VdcActionType.AddExternalStep, new org.ovirt.engine.core.common.action.AddExternalStepParameters(asGuid(id), step.getDescription(), org.ovirt.engine.api.restapi.types.StepMapper.map(org.ovirt.engine.api.model.StepEnum.fromValue(step.getType())), org.ovirt.engine.api.restapi.types.JobMapper.map(step.getStatus(), null)), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetStepByStepId, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); <START_MOD>org.ovirt.engine.api.model.Step createdStep = ((org.ovirt.engine.api.model.Step) (response.getEntity())); injectParent(createdStep); return response; <END_MOD>}
<START_MOD>public void loadVmFromOva() { if (!(validateOvaConfiguration())) { return; } startProgress(null); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVmFromOva(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { updateVms(java.util.Collections.singletonList(((org.ovirt.engine.core.common.businessentities.VM) (returnValue)))); } }), getHosts().getSelectedItem().getId(), getOvaPath().getEntity()); }<END_MOD>
<START_MOD>void afterVMsRefreshTreatment() { for (org.ovirt.engine.core.compat.Guid vm_guid : _vmsToRerun) { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.errorFormat("Rerun vm {0}. Called from vds {1}", vm_guid, vds.getName()); org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().RerunFailedCommand(vm_guid, vds.getId()); } for (org.ovirt.engine.core.compat.Guid vm_guid : _succededToRunVms) { vdsManager.succededToRunVm(vm_guid); } _autoVmsToRun.removeAll(_vmsToRerun); getVdsEventListener().runFailedAutoStartVMs(_autoVmsToRun); for (java.util.Map.Entry<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDynamic> pair : _vmsClientIpChanged.entrySet()) { getVdsEventListener().processOnClientIpChange(vds, pair.getValue().getId()); } for (org.ovirt.engine.core.common.businessentities.VmDynamic runningVm : _poweringUpVms) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().getEventListener().processOnVmPoweringUp(vds.getId(), runningVm.getId(), runningVm.getDisplayIp(), runningVm.getDisplay()); } for (org.ovirt.engine.core.compat.Guid vm_guid : _vmsMovedToDown) { getVdsEventListener().processOnVmStop(vm_guid); } for (org.ovirt.engine.core.compat.Guid vm_guid : _vmsToRemoveFromAsync) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().RemoveAsyncRunningVm(vm_guid); } }<END_MOD>
public void initializeHandlers() { modelProvider.getModel().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.EventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.Object entity = modelProvider.getModel().getEntity(); if (entity != null) { onDetailModelEntityChange(entity); } } }); modelProvider.getModel().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (PropertyChangedEventArgs.PROGRESS.equals(args.propertyName)) { if ((modelProvider.getModel().getProgress()) != null) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if ((getTable()) != null) { getTable().setLoadingState(LoadingState.LOADING); } } }); } } } }); }
private static void AddBootProtocol(org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct cfg, org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface) { if (cfg != null) { if ((cfg.getItem("BOOTPROTO")) != null) { if (cfg.getItem("BOOTPROTO").toString().toLowerCase().equals("dhcp")) { iface.setBootProtocol(NetworkBootProtocol.Dhcp); } else { iface.setBootProtocol(NetworkBootProtocol.None); } } else if ((cfg.containsKey("IPADDR")) && (!(org.apache.commons.lang.StringUtils.isEmpty(cfg.getItem("IPADDR").toString())))) { iface.setBootProtocol(NetworkBootProtocol.StaticIp); if (cfg.containsKey(VdsProperties.gateway)) { java.lang.Object gateway = cfg.getItem(VdsProperties.gateway); if ((gateway != null) && (!(org.apache.commons.lang.StringUtils.isEmpty(gateway.toString())))) { <START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGatewayForManagementNetwork(iface, <END_MOD>gateway.toString()); } } } else { iface.setBootProtocol(NetworkBootProtocol.None); } } }
public void <START_MOD>getVmsForDisplayingFromExternalServer<END_MOD>(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.compat.Guid vdsId, java.lang.String url, java.lang.String username, java.lang.String password, org.ovirt.engine.core.common.businessentities.OriginType originType<START_MOD>, boolean dcSupportsApiForLoadingExternalVmsNamesOnly<END_MOD>) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>(); } return source; } }; <START_MOD>if (dcSupportsApiForLoadingExternalVmsNamesOnly) { <END_MOD>org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.<START_MOD>GetVmsNamesFromExternalProvider<END_MOD>, new org.ovirt.engine.core.common.queries.GetVmsFromExternalProviderQueryParameters(url, username, password, originType, vdsId, dataCenterId), aQuery); }<START_MOD> else { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVmsFullInfoFromExternalProvider, new org.ovirt.engine.core.common.queries.GetVmsFromExternalProviderQueryParameters(url, username, password, originType, vdsId, dataCenterId), aQuery); } }<END_MOD>
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid groupGuid : org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getGroupList()) { org.ovirt.engine.core.common.businessentities.aaa.DbGroup group = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbGroupDao().get(groupGuid); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagUserGroupByGroupIdAndByTagId(org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getTagId(), groupGuid)) != null) { if (group != null) { <START_MOD>appendCustomValueSeparatedByComma<END_MOD>("DetachGroupsNames", group.getName()<START_MOD>); } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachUserGroupFromTag(org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getTagId()<END_MOD>, groupGuid); noActionDone = false; org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.setSucceeded(true); } } } }
public void refreshGeoRepDataForVolume(final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { if (volume == null) { throw new org.ovirt.engine.core.common.errors.<START_MOD>EngineException<END_MOD>(org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.GlusterVolumeGeoRepSyncFailed,   volume information } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getClusterDao().get(volume.getClusterId()); discoverGeoRepDataInCluster(cluster, volume); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> geoRepSessions = getGeoRepDao().getGeoRepSessions(volume.getId()); refreshGeoRepSessionStatusForSessions(cluster, geoRepSessions); }
@java.lang.Override protected void initStorageDomains() {<START_MOD> final<END_MOD> org.ovirt.engine.core.common.businessentities.Disk disk = getDisks().get(0).getDisk(); if ((disk.getDiskStorageType()) != (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE)) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getStorageDomainList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.MoveDiskModel moveDiskModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.MoveDiskModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>) (returnValue)); moveDiskModel.onInitStorageDomains(storageDomains<START_MOD>, disk<END_MOD>); } }), ((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)).getStoragePoolId()); }
@java.lang.Override protected void endWithFailure() { org.ovirt.engine.core.bll.CreateSnapshotCommand.revertTasks(); if (((org.ovirt.engine.core.bll.CreateSnapshotCommand.getDestinationDiskImage()) != null) && (!(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().getVmsListForDisk(org.ovirt.engine.core.bll.CreateSnapshotCommand.getDestinationDiskImage().getId()).isEmpty()))) { if (!(org.ovirt.engine.core.bll.CreateSnapshotCommand.getDestinationDiskImage().getParentId().equals(Guid.Empty))) { if (!(org.ovirt.engine.core.bll.CreateSnapshotCommand.getDestinationDiskImage().getParentId().equals(org.ovirt.engine.core.bll.CreateSnapshotCommand.getDestinationDiskImage().<START_MOD>getItGuid<END_MOD>()))) { org.ovirt.engine.core.common.businessentities.DiskImage previousSnapshot = org.ovirt.engine.core.bll.CreateSnapshotCommand.getDiskImageDao().getSnapshotById(org.ovirt.engine.core.bll.CreateSnapshotCommand.getDestinationDiskImage().getParentId()); previousSnapshot.<START_MOD>setActive<END_MOD>(true); if ((org.ovirt.engine.core.bll.CreateSnapshotCommand.getParameters().getOldLastModifiedValue()) != null) { previousSnapshot.<START_MOD>setLastModified<END_MOD>(org.ovirt.engine.core.bll.CreateSnapshotCommand.getParameters().getOldLastModifiedValue()); } org.ovirt.engine.core.bll.CreateSnapshotCommand.getImageDao().update(previousSnapshot.getImage()); } } } super.endWithFailure(); }
@org.junit.Test @java.lang.SuppressWarnings("unchecked") public void nameNotAvailable() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.Provider.AdditionalProperties> otherProvider = createProvider(provider.getName()); when(((org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.Provider.AdditionalProperties>) (providerDao.getByName(provider.getName())))).thenReturn(otherProvider); assertThat(validator.nameAvailable(), failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NAME_ALREADY_USED)); }
<START_MOD>@org.junit.Test public void testListWithMultipleObjects() { java.util.List<org.ovirt.engine.api.types.V4Vm> list = new java.util.ArrayList<>(); list.add(newVm().build()); list.add(newVm().build()); assertEquals("<vms><vm></vm><vm></vm></vms>", listToXml(list.iterator())); }<END_MOD>
<START_MOD>public void setLevel(java.lang.String level) { setLevel(org.ovirt.engine.core.common.businessentities.gluster.GlusterHookLevel.valueOf(level)); }<END_MOD>
@javax.ws.rs.Path( (restore)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
<START_MOD>public org.ovirt.engine.core.bll.network.macpool.ReadOnlyMacPool getMacPoolForCluster(org.ovirt.engine.core.compat.Guid clusterId) { return getMacPoolById(getMacPoolId(clusterId)); }<END_MOD>
@java.lang.Override protected void init() { <START_MOD>macPool = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getMacPool(); <END_MOD>org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm(); if (vmFromConfiguration != null) { vmFromConfiguration.getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterId()); if (!(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget())) { setDisksToBeAttached(vmFromConfiguration); } org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setContainerId(vmFromConfiguration.getId()); } else { initUnregisteredVM(); } if ((Guid.Empty.equals(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVmId())) && ((org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm()) != null)) { org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm().getId()); } setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterId()); org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getCluster().getStoragePoolId()); super.init(); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } for (org.ovirt.engine.core.common.businessentities.VDS vds : getServersInCluster()) { if ((vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { setVdsName(vds.getName()); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP); addCanDoActionMessage(java.lang.String.format( %2$s "VdsName", vds.getName())); return false; } } return true; }
<START_MOD>private static java.lang.Integer convert(java.lang.Integer num, int conversionRate) { if (num == null) { return null; } else { return ((int) ((num.floatValue()) / conversionRate)); } }<END_MOD>
private void upgradeNode() { try (final org.ovirt.engine.core.bll.OVirtNodeUpgrade upgrade = new org.ovirt.engine.core.bll.OVirtNodeUpgrade(org.ovirt.engine.core.bll.InstallVdsCommand.getVds(), _iso)) { upgrade.setCorrelationId(org.ovirt.engine.core.bll.InstallVdsCommand.getCorrelationId()); org.ovirt.engine.core.bll.InstallVdsCommand.log.infoFormat( upgrade host {0}, {1} org.ovirt.engine.core.bll.InstallVdsCommand.getVds().getId(), org.ovirt.engine.core.bll.InstallVdsCommand.getVds().getName()); setVdsStatus(VDSStatus.Installing); upgrade.execute(); switch (upgrade.getDeployStatus()) { case Failed : throw new org.ovirt.engine.core.bll.InstallVdsCommand.VdsInstallException(org.ovirt.engine.core.common.businessentities.VDSStatus.InstallFailed, org.apache.commons.lang.StringUtils.EMPTY); case Reboot : setVdsStatus(VDSStatus.Reboot); RunSleepOnReboot(getStatusOnReboot()); break; case Complete : <START_MOD>if (VDSStatus.Maintenance.equals(vdsInitialStatus)) { <END_MOD>setVdsStatus(VDSStatus.<START_MOD>Maintenance); } else { setVdsStatus(VDSStatus.<END_MOD>Initializing); <START_MOD>} <END_MOD>break; } org.ovirt.engine.core.bll.InstallVdsCommand.log.infoFormat( upgrade host {0}, {1}: success org.ovirt.engine.core.bll.InstallVdsCommand.getVds().getId(), org.ovirt.engine.core.bll.InstallVdsCommand.getVds().getName()); org.ovirt.engine.core.bll.InstallVdsCommand.setSucceeded(true); } catch (org.ovirt.engine.core.bll.InstallVdsCommand.VdsInstallException e) { handleError(e, e.getStatus()); } catch (java.lang.Exception e) { handleError(e, VDSStatus.InstallFailed); } }
public static boolean IsVersionMatchStorageType(org.ovirt.engine.core.compat.Version version, org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.StorageType type) { return !((((type == (StorageType.LOCALFS)) && ((version.compareTo(new org.ovirt.engine.core.compat.Version(2, 2))) <= 0)) || ((type == (StorageType.POSIXFS)) && ((version.compareTo(new org.ovirt.engine.core.compat.Version(3, 0))) <= 0))) || ((type == (StorageType.GLUSTERFS)) && ((version.compareTo(new org.ovirt.engine.core.compat.Version(3, 2))) <= 0))); }
private void <START_MOD>updateMtu<END_MOD>() { getMtu().setIsChangable(((getHasMtu().getEntity()) && (!(getExport().getEntity())))); <START_MOD>if ((getExport().getEntity()) || (getHasMtu().getEntity())) { getMtu().setEntity(null); <END_MOD>}<START_MOD> else { getMtu().setEntity(((java.lang.Integer) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.DefaultMTU)))); } }<END_MOD>
@org.junit.Test public void testIpConfiguredForStaticBootProtocolWhenIpConfigurationIsNotNullAndBootProtocolIsStaticAndAddressIsNull() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = createNetworkAttachmentWithIpConfiguration(NetworkBootProtocol.STATIC_IP, null, "255.255.255.0"); assertThat(createNetworkAttachmentValidator(attachment).ipConfiguredForStaticBootProtocol(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>___VdcBllMessages<END_MOD>.NETWORK_ADDR_MANDATORY_IN_STATIC_IP)); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Rebalance java.lang.String stopRebalance();
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { getView().spiceSelected(event.getValue()); getView().rdpSelected((!(event.getValue()))); <START_MOD>getView().setWanOptionsVisible(((wanOptionsAvailable) && (event.getValue()))); <END_MOD>}
<START_MOD>public static java.lang.String createConnectionString(java.lang.String host, java.lang.String port) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(host).append(":").append(port); return sb.toString(); }<END_MOD>
@java.lang.Override protected void populateTabMap() { getTabNameMapping().put(TabName.IPV4_TAB, this.ipv4Tab); getTabNameMapping().put(TabName.IPV6_TAB, this.ipv6Tab); getTabNameMapping().put(TabName.QOS_TAB, this.qosTab); getTabNameMapping().put(TabName.CUSTOM_PROPERTIES_TAB, this.customPropertiesTab); <START_MOD>getTabNameMapping().put(TabName.DNS_CONFIGURATION_TAB, this.dnsConfigurationTab); <END_MOD>}
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getDeviceList(org.ovirt.engine.core.compat.Guid hostId, org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { return getEntity(java.util.List.class, VdcQueryType.GetDeviceList, new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(hostId, storageType<START_MOD>, false<END_MOD>), "GetDeviceList", true); }
@java.lang.Override protected void updateMoveOrCopySingleDiskParameters(java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters, org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel) { org.ovirt.engine.core.common.businessentities.<START_MOD>StorageDomain<END_MOD> selectedStorageDomain = ((org.ovirt.engine.core.common.businessentities.<START_MOD>StorageDomain<END_MOD>) (diskModel.getStorageDomain().getSelectedItem())); addMoveOrCopyParameters(parameters, Guid.Empty, selectedStorageDomain.getId(), ((org.ovirt.engine.core.common.businessentities.DiskImage) (diskModel.getDisk()))); }
private org.ovirt.engine.core.utils.<START_MOD>customprop.CustomPropertiesUtils mockCustomPropertiesUtils<END_MOD>() { org.ovirt.engine.core.utils.<START_MOD>customprop.CustomPropertiesUtils<END_MOD> utils = spy(new org.ovirt.engine.core.utils.<START_MOD>customprop.CustomPropertiesUtils<END_MOD>()); doReturn(("sap_agent=^(true|false)$;sndbuf=^[0-9]+$;" + ("vhost=^(([a-zA-Z0-9_]*):(true|false))(,(([a-zA-Z0-9_]*):(true|false)))*$;" + "viodiskcache=^(none|writeback|writethrough)$"))).when(utils).getPredefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn("").when(utils).getUserdefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn(new java.util.HashSet<org.ovirt.engine.core.compat.Version>(java.util.Arrays.asList(Version.v3_2, Version.v3_3))).when(utils).getSupportedClusterLevels(); doReturn(utils).when(runVmValidator).getVmPropertiesUtils(); try { utils.init(); } catch (org.ovirt.engine.core.utils.exceptions.InitializationException e) { e.printStackTrace(); } return utils; }
<START_MOD>private java.util.Map<java.lang.String, java.lang.Integer> getSystemStatistics() { java.util.Map<java.lang.String, java.lang.Integer> res = new<END_MOD> java.util.HashMap<java.lang.String, java.lang.Integer><START_MOD>(); int totalVMs = getTotalVMsStat(); int activeVMs = getActiveVMsStat(); int downVMs = ((totalVMs - activeVMs) <END_MOD><<START_MOD> 0) ?   : totalVMs - activeVMs; int totalHosts = getTotalHostsStat(); int activeHosts = getActiveHostsStat(); int maintenanceHosts = getMaintenanceHostsStat(); int downHosts = (((totalHosts - activeHosts) - maintenanceHosts) <END_MOD><<START_MOD> 0) ?   : (totalHosts - activeHosts) - maintenanceHosts; int totalUsers = getTotalUsersStat(); int activeUsers = getActiveUsersStat(); int totalStorageDomains = getTotalStorageDomainsStat(); int activeStorageDomains = getActiveStorageDomainsStat(); res.put(QueryConstants.SYSTEM_STATS_TOTAL_VMS_FIELD, totalVMs); res.put(QueryConstants.SYSTEM_STATS_ACTIVE_VMS_FIELD, activeVMs); res.put(QueryConstants.SYSTEM_STATS_DOWN_VMS_FIELD, downVMs); res.put(QueryConstants.SYSTEM_STATS_TOTAL_HOSTS_FIELD, totalHosts); res.put(QueryConstants.SYSTEM_STATS_ACTIVE_HOSTS_FIELD, activeHosts); res.put(QueryConstants.SYSTEM_STATS_MAINTENANCE_HOSTS_FIELD, maintenanceHosts); res.put(QueryConstants.SYSTEM_STATS_DOWN_HOSTS_FIELD, downHosts); res.put(QueryConstants.SYSTEM_STATS_TOTAL_USERS_FIELD, totalUsers); res.put(QueryConstants.SYSTEM_STATS_ACTIVE_USERS_FIELD, activeUsers); res.put(QueryConstants.SYSTEM_STATS_TOTAL_STORAGE_DOMAINS_FIELD, totalStorageDomains); res.put(QueryConstants.SYSTEM_STATS_ACTIVE_STORAGE_DOMAINS_FIELD, activeStorageDomains); return res;<END_MOD> }
<START_MOD>private<END_MOD> org.ovirt.engine.core.common.utils.<START_MOD>Pair<java.lang.String<END_MOD>, <START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String> parseGraphicsAndDisplayPair(java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String<END_MOD> <START_MOD>displayAndGraphicsString<END_MOD>) {<START_MOD> java.lang.String[] displayAndGraphicsSplit = displayAndGraphicsString.split("/"); if ((displayAndGraphicsSplit.length) == 2) { return new<END_MOD> org.ovirt.engine.core.common.utils.<START_MOD>Pair<END_MOD>(<START_MOD>displayAndGraphicsSplit[0].trim()<END_MOD>, <START_MOD>displayAndGraphicsSplit[1].trim(<END_MOD>)); <START_MOD>} <END_MOD>return null; }
<START_MOD>@java.lang.Override protected void endSuccessfully() { org.ovirt.engine.core.bll.SpmCommand.setSucceeded(true); }<END_MOD>
@org.junit.Test public void updateWithLowerVersionThanHosts() { createCommandWithDefaultVdsGroup(); cpuExists(); <START_MOD>architectureIsValid(); <END_MOD>cpuManufacturersMatch(); VdsExistWithHigherVersion(); canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_COMPATIBILITY_VERSION_WITH_LOWER_HOSTS); }
protected void getHostLists(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> allHosts, java.util.Map<java.lang.String, java.lang.String> parameters, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> emptyHosts, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> maintenanceHosts, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> downHosts) { for (org.ovirt.engine.core.common.businessentities.VDS vds : allHosts) { if (((((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) && ((vds.getVmCount()) == 0)) && ((vds.getVmMigrating()) == 0)) && ((<START_MOD>org.ovirt.engine.core.bll.scheduling.pending.PendingVM.collectForHost(getPendingResourceManager(), vds).size<END_MOD>()) == 0)) <START_MOD>{ emptyHosts.add(vds); } else if ((vds.isPowerManagementControlledByPolicy()) <END_MOD>&& (<START_MOD>!(vds.isDisablePowerManagementPolicy()))) { if ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)) { maintenanceHosts<END_MOD>.add(vds); } else if ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.<START_MOD>Down)) { downHosts<END_MOD>.add(vds); } <START_MOD>} } }<END_MOD>
<START_MOD>private org.ovirt.engine.core.bll.context.CommandContext createInheritingContext(org.ovirt.engine.core.bll.job.ExecutionContext executionContext) { org.ovirt.engine.core.bll.context.CommandContext ctx = new org.ovirt.engine.core.bll.context.CommandContext(executionContext); ctx.setEngineSessionId(context.getEngineSessionId()); return ctx; }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( in fetching fingerprint java.lang.String errorLoadingFingerprint();
<START_MOD>@java.lang.Override protected void ExecuteVdsIdCommand() { if ((_vdsManager) == null) { org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVDSReturnValue().setSucceeded(false); return; } org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = runHibernateBrokerVDSCommand(); if (retVal.getSucceeded()) { changeVmStatusToSavingState(); org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVDSReturnValue().setSucceeded(true); } else { log.errorFormat("VDS::hibernate Failed hibernate vm '{0}' in vds = {1} : {2}, error = {3}", org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getParameters().getVmId(), org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVds().getId(), org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVds().getName(), retVal.getExceptionString()); org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVDSReturnValue().setSucceeded(false); org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVDSReturnValue().setExceptionString(retVal.getExceptionString()); org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVDSReturnValue().setExceptionObject(retVal.getExceptionObject()); org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVDSReturnValue().setVdsError(retVal.getVdsError()); } }<END_MOD>
@java.lang.Override public void remove(org.ovirt.engine.core.compat.Guid id) { org.hibernate.Session session = getSession(); org.hibernate.Transaction transaction = session.beginTransaction(); org.hibernate.Query query = session.createQuery( from tags_user_group_map tugm where tugm.groupId = :group_id query.setParameter("group_id", id); query.executeUpdate(); org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD> instance = get(id); if (instance != null) { session.delete(instance); } transaction.commit(); }
public org.ovirt.engine.core.common.businessentities.StorageDomain getStorageDomain(org.ovirt.engine.core.compat.Guid poolId, org.ovirt.engine.core.common.businessentities.StorageDomainType type, org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { java.lang.Integer statusNum = (status == null) ? null : status.getValue(); return getCallsHandler().executeRead("Getstorage_domain_by_type_storagePoolId_and_status", org.ovirt.engine.core.dao.<START_MOD>StorageDomainDAOImpl<END_MOD>.StorageDomainRowMapper.instance, getCustomMapSqlParameterSource().addValue("storage_pool_id", poolId).addValue("storage_domain_type", type.getValue()).addValue("status", statusNum)); }
@org.junit.Test public void testAllDomainsWithinThresholdsOneLacking() { domain1.getStorageDynamicData().setAvailableDiskSize(((org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidatorTest.CRITICAL_SPACE_THRESHOLD) + 1)); domain2.getStorageDynamicData().setAvailableDiskSize(((org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidatorTest.CRITICAL_SPACE_THRESHOLD) - 1)); domain1.setCriticalSpaceActionBlocker(org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidatorTest.CRITICAL_SPACE_THRESHOLD); domain2.setCriticalSpaceActionBlocker(org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidatorTest.CRITICAL_SPACE_THRESHOLD); org.ovirt.engine.core.bll.ValidationResult result = validator.allDomainsWithinThresholds(); assertFalse( should not be within thresholds result.isValid()); assertEquals( validation error <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN, result.getMessage()); }
protected boolean isSecured() { boolean secured = true; if (url.getProtocol().equalsIgnoreCase(java.lang.String.valueOf(<START_MOD>"http"<END_MOD>))) { secured = false; } return secured; }
private static org.ovirt.engine.api.model.OperatingSystem mapOperatingSystem(org.ovirt.engine.core.common.businessentities.VDS entity) { final org.ovirt.engine.api.model.OperatingSystem model = new org.ovirt.engine.api.model.OperatingSystem(); <START_MOD>if (org.apache.commons.lang.StringUtils.isNotBlank(entity.getHostOs())) { org.ovirt.engine.core.utils.OS hostOs = org.ovirt.engine.core.utils.OS.fromPackageVersionString(entity.getHostOs()); org.ovirt.engine.api.model.Version version = new org.ovirt.engine.api.model.Version(); version.setMajor(hostOs.getVersion().getMajor()); if ((hostOs.getVersion().getMinor()) != (org.ovirt.engine.api.model.Version.VERSION_NOT_SET)) { version.setMinor(hostOs.getVersion().getMinor()); } if ((hostOs.getVersion().getBuild()) != (org.ovirt.engine.api.model.Version.VERSION_NOT_SET)) { version.setBuild(hostOs.getVersion().getBuild()); } version.setFullVersion(hostOs.getFullVersion()); model.setVersion(version); model.setType(hostOs.getName()); } model.setCustomKernelCmdline(<END_MOD>java.<START_MOD>util.Objects.toString(entity.getCurrentKernelCmdline()<END_MOD>, <START_MOD>"")); model.setReportedKernelCmdline(entity.getKernelArgs()); return model<END_MOD>; }
@org.junit.Test public void testInstall() throws java.lang.Exception { setUpGetEntityWithNoCertificateInfoExpectations(1); setUriInfo(setUpActionExpectations(VdcActionType.UpdateVds, org.ovirt.engine.core.common.action.UpdateVdsActionParameters.class, new java.lang.String[]{ "RootPassword" }, new java.lang.Object[]{ NAMES[2] })); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.<START_MOD>setPassword<END_MOD>(NAMES[2]); verifyActionResponse(resource.install(action)); }
private org.ovirt.engine.api.model.Hosts mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> entities) { org.ovirt.engine.<START_MOD>core.common.mode.ApplicationMode appMode = getCurrent().get(org.ovirt.engine.core.common.mode.ApplicationMode.class); org.ovirt.engine.<END_MOD>api.model.Hosts collection = new org.ovirt.engine.api.model.Hosts(); for (org.ovirt.engine.core.common.businessentities.VDS entity : entities) { <START_MOD>if (appMode == (org.ovirt.engine.core.common.mode.ApplicationMode.GlusterOnly)) { <END_MOD>collection.getHosts().add(addLinks(populate(map(entity), entity)<START_MOD>, "storage")); } else { collection.getHosts().add(addLinks(populate(map(entity), entity))); }<END_MOD> } return collection; }
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.RegisterDiskCommand.getParameters().getDiskImage().getDiskStorageType()) != (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE)) { addCanDoActionMessage((   + (org.ovirt.engine.core.bll.RegisterDiskCommand.getParameters().getDiskImage().getId()))); addCanDoActionMessage((   + (org.ovirt.engine.core.bll.RegisterDiskCommand.getParameters().getDiskImage().getDiskStorageType()))); addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_UNSUPPORTED_DISK_STORAGE_TYPE); return false; } if (!(validate(new org.ovirt.engine.core.bll.validator.StorageDomainValidator(org.ovirt.engine.core.bll.RegisterDiskCommand.getStorageDomain()).isDomainExistAndActive()))) { addCanDoActionMessage((   + (org.ovirt.engine.core.bll.RegisterDiskCommand.getParameters().getDiskImage().getId()))); addCanDoActionMessage((   + (org.ovirt.engine.core.bll.RegisterDiskCommand.getStorageDomainId()))); addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_UNAVAILABLE); return false; } if (!(org.ovirt.engine.core.bll.RegisterDiskCommand.getStorageDomain().getStorageDomainType().isDataDomain())) { addCanDoActionMessage((   + (org.ovirt.engine.core.bll.RegisterDiskCommand.getParameters().getStorageDomainId()))); addCanDoActionMessage((   + (org.ovirt.engine.core.bll.RegisterDiskCommand.getStorageDomain().getStorageDomainType()))); addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_UNSUPPORTED); return false; } <START_MOD>if (!(setAndValidateDiskProfiles())) { <END_MOD>return <START_MOD>false; } return <END_MOD>true; }
@java.lang.Override public java.lang.String getRawValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel model) { return (java.lang.String.valueOf(model.getSize())) + <START_MOD>(org.ovirt.engine.ui.common.widget.uicommon.storage.SanStorageTargetToLunList.constants.gb())<END_MOD>; }
<START_MOD>org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturn copyImage(java.lang.String sdUUID, java.lang.String spUUID, java.lang.String vmGUID, java.lang.String srcImgGUID, java.lang.String srcVolUUID, java.lang.String dstImgGUID, java.lang.String dstVolUUID, java.lang.String descr, java.lang.String dstSdUUID, int volType, int volFormat, int preallocate, java.lang.String postZero, boolean discard, java.lang.String force);<END_MOD>
<START_MOD>@java.lang.Override public javax.net.ssl.TrustManager[] getTrustManagers() throws java.security.GeneralSecurityException { return null; }<END_MOD>
@org.junit.Test public void testStartWithPauseAndStateless() throws java.lang.Exception { setUpWindowsGetEntityExpectations(2, false<START_MOD>); setupGetVmExpectations(<END_MOD>); setUriInfo(setUpActionExpectations(VdcActionType.RunVmOnce, org.ovirt.engine.core.common.action.RunVmOnceParams.class, new java.lang.String[]{ "VmId", "RunAndPause", "RunAsStateless" }, new java.lang.Object[]{ GUIDS[0], true, java.lang.Boolean.TRUE })); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setPause(true); action.setVm(new org.ovirt.engine.api.model.VM()); action.getVm().setStateless(true); verifyActionResponse(resource.start(action)); }
java.util.List getNetworkInterfaces(org.ovirt.vdsmfake.domain.VM vm) { java.util.List net = new java.util.ArrayList(); java.util.List<org.ovirt.vdsmfake.domain.Device> nicDevices = vm.getDevicesByType(Device.DeviceType.NIC); for (org.ovirt.vdsmfake.domain.Device device : nicDevices) { java.util.<START_MOD>Map resultMap = new java.util.HashMap(); java.util.<END_MOD>List templist = new java.util.ArrayList(); java.util.List templist2 = new java.util.ArrayList(); <START_MOD>resultMap.put("name", "eth0"); templist.add("fe80::21a:4aff:fe16:2016"); templist.add("2620:52:0:2380:21a:4aff:fe16:2016"<END_MOD>); resultMap.put("inet6", templist); <START_MOD>templist2.add(vm.getIp()); resultMap.put("inet", templist2); <END_MOD>resultMap.put("hw", <START_MOD>vm.getMacAddress()); net.add(resultMap); break<END_MOD>; } log.debug( list is {} net.toString()); return net; }
public org.ovirt.engine.core.bll.ValidationResult clusterNotChanged() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.VDS_CANNOT_UPDATE_CLUSTER).unless(oldHost.getVdsGroupId().equals(getHost().getVdsGroupId())); }
<START_MOD>@org.junit.Test public void testNetworkAttachedToClusterWhenAttached() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.VDS host = new org.ovirt.engine.core.common.businessentities.VDS(); host.setVdsGroupId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNetworkId(network.getId()); org.ovirt.engine.core.common.businessentities.network.NetworkClusterId networkClusterId = new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(host.getVdsGroupId(), attachment.getNetworkId()); when(networkClusterDaoMock.get(eq(networkClusterId))).thenReturn(new org.ovirt.engine.core.common.businessentities.network.NetworkCluster()); when(networkDaoMock.get(org.mockito.Mockito.eq(network.getId()))).thenReturn(network); assertThat(new org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator(attachment, host).networkAttachedToCluster(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult vmNotDuringMigration() { for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) || ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingTo))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_MIGRATION_IN_PROGRESS); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
<START_MOD>public java.util.Map deleteVolume(java.lang.String imgUUID, java.lang.String spUUID, java.lang.String sdUUID, boolean postZero, boolean force) { try { org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); org.ovirt.vdsmfake.domain.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); log.info("Removing volume: {}", imgUUID); final java.util.Map resultMap = getOKStatus(); final org.ovirt.vdsmfake.domain.Task task = new org.ovirt.vdsmfake.domain.Task(getUuid()); resultMap.put("uuid", task.getId()); org.ovirt.vdsmfake.task.TaskProcessor.getInstance().addTask(new org.ovirt.vdsmfake.task.TaskRequest(org.ovirt.vdsmfake.task.TaskType.FINISH_REMOVE_VOLUME, 5000L, task)); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }<END_MOD>
<START_MOD>public java.lang.String getProviderName() { org.ovirt.engine.core.common.businessentities.Provider provider = org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getDbFacade().getNetworkProviderDao().get(org.ovirt.engine.core.bll.provider.RemoveProviderCommand.getParameters().getProvider().getId()); return provider == null ? null : provider.getName(); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters.CreateSnapshotStage getCreateSnapshotStage() { return createSnapshotStage; }<END_MOD>
@org.ovirt.engine.ui.frontend.DefaultStringValue( ${action} ${type}: The <START_MOD>disk<END_MOD> ${<START_MOD>diskAlias<END_MOD>} <START_MOD>is<END_MOD> locked. Please try again in a few minutes. java.lang.String ACTION_TYPE_FAILED_VM_IMAGE_IS_LOCKED();
<START_MOD>@java.lang.Override public int compare(org.ovirt.engine.core.common.scheduling.PolicyUnit pu1, org.ovirt.engine.core.common.scheduling.PolicyUnit pu2) { if ((pu1.isInternal()) != (pu2.isInternal())) { return !(pu1.isInternal()) ? -1 : 1; } if ((pu1.isEnabled()) != (pu2.isEnabled())) { return !(pu1.isEnabled()) ? -1 : 1; } if ((pu1.getPolicyUnitType()) != (pu2.getPolicyUnitType())) { if (pu1.getPolicyUnitType().equals(PolicyUnitType.Filter)) { return -1; } if (pu2.getPolicyUnitType().equals(PolicyUnitType.Filter)) { return 1; } if (pu1.getPolicyUnitType().equals(PolicyUnitType.LoadBalancing)) { return 1; } if (pu2.getPolicyUnitType().equals(PolicyUnitType.LoadBalancing)) { return -1; } } return lexoNumeric.compare(pu1.getName(), pu2.getName()); }<END_MOD>
<START_MOD>private boolean setRunningVmsUnknown(java.util.HashSet<org.ovirt.engine.core.compat.Guid> nonResponsiveHosts) { boolean runningVmsInTransition = false; final java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = vmDao.getAll(); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (!(vm.isNotRunning())) { if (((vm.getRunOnVds()) != null) && (nonResponsiveHosts.contains(vm.getRunOnVds()))) { resourceManager.SetVmUnknown(vm); } } if (((!runningVmsInTransition) && (vm.isRunning())) && ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Up))) { runningVmsInTransition = true; } } return runningVmsInTransition; }<END_MOD>
<START_MOD>private<END_MOD> void <START_MOD>runBooleanQueryByEntityId<END_MOD>(<START_MOD>org.ovirt.engine.core.common.queries.VdcQueryType queryType, <END_MOD>org.ovirt.engine.ui.frontend.AsyncQuery aQuery<START_MOD>, org.ovirt.engine.core.compat.Guid id<END_MOD>) { <START_MOD>aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.BooleanAsyncConverter<END_MOD>(<START_MOD>); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(queryType, <END_MOD>new org.ovirt.engine.core.common.queries.<START_MOD>IdQueryParameters<END_MOD>(<START_MOD>id<END_MOD>), aQuery); }
@org.junit.Test public void noVdsGroup() { simulateVdsGroupDoesNotExist(); assertCanDoActionFailure(<START_MOD>EngineMessages<END_MOD>.VDS_CLUSTER_IS_NOT_VALID.toString()); }
<START_MOD>@java.lang.Override protected void executeQueryCommand() { getDbFacade().getDiskProfileDao().getAllForStorageDomain(getParameters().getId()); }<END_MOD>
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.EntityModel getAllowOverbooking() { return allowOverbooking; }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult nicExists() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>___VdcBllMessages<END_MOD>.HOST_NETWORK_INTERFACE_NOT_EXIST).when(((attachment.getNicName()) == null)); }
<START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VDS vds, com.google.gwt.dom.client.Element parent, com.google.gwt.dom.client.NativeEvent event) { com.google.gwt.dom.client.Element target = event.getEventTarget().cast(); if (ImageElement.TAG.equals(target.getTagName())) { switch (org.ovirt.engine.ui.common.utils.JqueryUtils.index(target)) { case 0 : return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(getStatusTooltipText(vds.getStatus())); case 1 : return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(getAlertTooltipText(vds)); } } return null; }<END_MOD>
public org.ovirt.engine.core.common.businessentities.VDSType getvds_type() { return this.mVdsStatic.<START_MOD>getVdsType<END_MOD>(); }
private boolean evaluateHostUpgradeInternalCommandProgress(java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.bll.CommandBase<?> rootCommand) { org.ovirt.engine.core.common.businessentities.CommandEntity upgradeCommand = getHostUpgradeInternalCommand(childCmdIds); if (upgradeCommand == null) { return false; } switch (upgradeCommand.getCommandStatus()) { case ACTIVE : case NOT_STARTED : case FAILED : case FAILED_RESTARTED : case <START_MOD>ENDED_WITH_FAILURE : case <END_MOD>UNKNOWN : rootCommand.setCommandStatus(CommandStatus.FAILED); return true; case SUCCEEDED<START_MOD> : case ENDED_SUCCESSFULLY<END_MOD> : rootCommand.setCommandStatus(CommandStatus.SUCCEEDED); return true; } return true; }
private void onRestoreSnapshot() { runAction(VdcActionType.RestoreGlusterVolumeSnapshot, new org.ovirt.engine.core.common.action.gluster.GlusterVolumeSnapshotActionParameters(getEntity().getId(), getSelectedItem().getSnapshotName(), true)); }
<START_MOD>@javax.ws.rs.Path("{action: (test)}/{id}") public org.ovirt.engine.api.resource.ActionResource getActionSubresource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String id);<END_MOD>
@java.lang.Override public void vdsNonOperational(org.ovirt.engine.core.compat.Guid vdsId, org.ovirt.engine.core.common.businessentities.NonOperationalReason reason, boolean logCommand, org.ovirt.engine.core.compat.Guid domainId) { <START_MOD>org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainStaticDao().get(domainId); java.util.Map<java.lang.String, java.lang.String> customLogValues = null; if (storageDomain != null) { customLogValues = new java.util.HashMap<>(); customLogValues.put("StorageDomainNames", storageDomain.getName()); } <END_MOD>vdsNonOperational(vdsId, reason, logCommand, domainId, <START_MOD>customLogValues<END_MOD>); }
static org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> setUpEntityExpectations(org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> entity, boolean isDisplay, int index) { expect(entity.getis_display()).andReturn(isDisplay).anyTimes(); return org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest.setUpEntityExpectations(entity, index); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( to define/configure roles in the System java.lang.String allowToDefineConfigureRolesInTheSystemRoleTreeTooltip();
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if (getParameters().getPubKeys().isEmpty()) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_NO_PUB_KEYS_PASSED); } if ((getParameters().getId()) == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_HOST_NOT_EXIST); } return super.<START_MOD>validate<END_MOD>(); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { switch (org.ovirt.engine.core.bll.RemoveVmCommand.getActionState()) { case EXECUTE : return org.ovirt.engine.core.bll.RemoveVmCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_REMOVE_VM_FINISHED : <START_MOD>hasImages ? org.ovirt.engine.core.common.AuditLogType.USER_REMOVE_VM_FINISHED_WITH_ILLEGAL_DISKS : <END_MOD>org.ovirt.engine.core.common.AuditLogType.USER_FAILED_REMOVE_VM; default : return org.ovirt.engine.core.common.AuditLogType.<START_MOD>UNASSIGNED<END_MOD>; } }
public java.util.Map getStorageDomainsList(java.lang.String spUUID, int domainType, int poolType, java.lang.String path) { try { org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.DataCenter dataCenter = getDataCenterById(spUUID); java.util.Map resultMap = getOKStatus(); java.util.List domlist = lst(); for (org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.StorageDomain storageDomain : dataCenter.getStorageDomainMap().values()) { if ((spUUID != null) && (!(storageDomain.getId().equals(spUUID)))) { continue; } if ((domainType != 0) && ((StorageDomain.DomainClass.getByCode(domainType)) != (storageDomain.getDomainClass()))) { continue; } if ((poolType != 0) && ((StorageDomain.StorageType.getByCode(poolType)) != (storageDomain.getStorageType()))) { continue; } if ((path != null) && (!(path.equals(storageDomain.getConnection())))) { continue; } domlist.add(storageDomain.getId()); } resultMap.put("domlist", domlist); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }
<START_MOD>private void changeStatus(org.ovirt.engine.core.common.vdscommands.DestroyVmVDSCommandParameters parameters, org.ovirt.engine.core.common.businessentities.VM curVm) { if (((curVm.getRunOnVds()) != null) || ((curVm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingTo))) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().InternalSetVmStatus(curVm, (parameters.getGracefully() ? org.ovirt.engine.core.common.businessentities.VMStatus.PoweringDown : org.ovirt.engine.core.common.businessentities.VMStatus.Down)); } }<END_MOD>
<START_MOD>public static java.util.Set<java.lang.String> initRange(java.lang.String start, java.lang.String end) { java.lang.String parsedRangeStart = org.ovirt.engine.core.utils.MacAddressRangeUtils.parseRangePart(start); java.lang.String parsedRangeEnd = org.ovirt.engine.core.utils.MacAddressRangeUtils.parseRangePart(end); if ((parsedRangeEnd == null) || (parsedRangeStart == null)) { return java.util.Collections.emptySet(); } long startNum = java.lang.Long.parseLong(org.ovirt.engine.core.utils.MacAddressRangeUtils.parseRangePart(start), org.ovirt.engine.core.utils.MacAddressRangeUtils.HEX_RADIX); long endNum = java.lang.Long.parseLong(org.ovirt.engine.core.utils.MacAddressRangeUtils.parseRangePart(end), org.ovirt.engine.core.utils.MacAddressRangeUtils.HEX_RADIX); if (startNum > endNum) { return java.util.Collections.emptySet(); } java.util.Set<java.lang.String> availableMacs = new java.util.HashSet<java.lang.String>(); for (long i = startNum; i <= endNum; i++) { java.lang.String value = java.lang.String.format("%x", i); if ((value.length()) > 12) { return availableMacs; } else if ((value.length()) < 12) { value = org.apache.commons.lang.StringUtils.leftPad(value, 12, '0'); } value = org.ovirt.engine.core.utils.MacAddressRangeUtils.createMacAddress(value); if (value == null) { break; } availableMacs.add(value); } return availableMacs; }<END_MOD>
<START_MOD>@com.google.gwt.i18n.client.Constants.DefaultStringValue("Edit ISCSI Bundle") java.lang.String editIscsiBundleTitle();<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior) (array[0])); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (array[1])); org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior) (array[0])).vm; java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>) (returnValue)); model.setClusters(model, clusters, vm.getVdsGroupId()); behavior.initTemplate(); behavior.initCdImage(); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( kernel parameters are specified, kernel path must be specified as well. java.lang.String kernelParamsInvalid();
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult exist() { if ((vds) == null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.VDS_DOES_NOT_EXIST); } return ValidationResult.VALID; }<END_MOD>
<START_MOD>public java.util.List<org.ovirt.engine.core.compat.Guid> getSelectedVmIds() { java.util.List<org.ovirt.engine.core.compat.Guid> list = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); for (org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.VmSelectionModel vmSelectionModel : getItems()) { org.ovirt.engine.core.common.utils.Pair<java.lang.String, org.ovirt.engine.core.common.businessentities.VM> selectedItem = vmSelectionModel.getVms().getSelectedItem(); if (isKeyValid(selectedItem)) { list.add(selectedItem.getSecond().getId()); } } return list; }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.businessentities.Permission getForRoleAndAdElementAndObject(org.ovirt.engine.core.compat.Guid roleid, org.ovirt.engine.core.compat.Guid elementid, org.ovirt.engine.core.compat.Guid objectid) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("role_id", roleid).addValue("ad_element_id", elementid).addValue("object_id", objectid); return getCallsHandler().executeRead("GetPermissionsByRoleIdAndAdElementIdAndObjectId", org.ovirt.engine.core.dao.<START_MOD>PermissionDAOImpl<END_MOD>.PermissionRowMapper.instance, parameterSource); }
protected org.ovirt.engine.core.common.businessentities.VmDevice createVmDevice() { return new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(disk.getId(), org.ovirt.engine.core.bll.AttachDiskToVmCommand.getVmId()), VmDeviceType.DISK.getName(), VmDeviceType.DISK.getName(), "", 0, null, true, org.ovirt.engine.core.bll.AttachDiskToVmCommand.getParameters().isPlugUnPlug(), <START_MOD>disk.isReadOnly()<END_MOD>, ""); }
<START_MOD>private org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validateDimensions(java.lang.String icon) { final int maxWidth = 150; final int maxHeight = 120; final com.google.gwt.user.client.ui.Image image = new com.google.gwt.user.client.ui.Image(icon); boolean valid = ((image.getWidth()) <= maxWidth) && ((image.getHeight()) <= maxHeight); if (valid) { return org.ovirt.engine.ui.uicommonweb.validation.ValidationResult.ok(); } return org.ovirt.engine.ui.uicommonweb.validation.ValidationResult.fail(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().iconDimensionsTooLarge(image.getWidth(), image.getWidth(), maxWidth, maxHeight)); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Interface Profile java.lang.String vnicProfileTitle();
@org.junit.Test public void syncNetworkQosNotSupported() { org.ovirt.engine.core.common.businessentities.network.Network network = createManagementNetwork(); mockExistingNetworks(network); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork("eth0", network); mockExistingIfaces(iface); org.ovirt.engine.core.compat.Guid qosId = org.ovirt.engine.core.compat.Guid.newGuid(); when(qosDao.get(qosId)).thenReturn(createQos()); network.setQosId(qosId); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForSync(iface)); validateAndExpectViolation(helper, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_NOT_SUPPORTED, org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME); }
public boolean hasCommandEntitiesWithRootCommandId(org.ovirt.engine.core.compat.Guid rootCommandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.<START_MOD>get().<END_MOD>keySet()) { cmdEntity = commandsCache<START_MOD>.get()<END_MOD>.get(cmdId); if ((((cmdEntity != null) && (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getRootCommandId())))) && (!(cmdEntity.getRootCommandId().equals(cmdId)))) && (cmdEntity.getRootCommandId().equals(rootCommandId))) { return true; } } return false; }
protected void addVmStatic() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData(); if ((vmStatic.getOrigin()) == null) { vmStatic.setOrigin(org.ovirt.engine.core.common.businessentities.OriginType.valueOf(org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.OriginType))); } vmStatic.setId(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); vmStatic.setQuotaId(getQuotaId()); vmStatic.setCreationDate(new java.util.Date()); if ((vmStatic.getCustomProperties()) != null) { org.ovirt.engine.core.utils.<START_MOD>customprop.CustomPropertiesUtils<END_MOD>.VMCustomProperties properties = org.ovirt.engine.core.utils.<START_MOD>customprop.CustomPropertiesUtils<END_MOD>.getInstance().parseProperties(org.ovirt.engine.core.bll.AddVmCommand.getVdsGroupDAO().get(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getVdsGroupId()).getcompatibility_version(), vmStatic.getCustomProperties()); java.lang.String predefinedProperties = properties.getPredefinedProperties(); java.lang.String userDefinedProperties = properties.getUseDefinedProperties(); vmStatic.setPredefinedProperties(predefinedProperties); vmStatic.setUserDefinedProperties(userDefinedProperties); } getVmStaticDao().save(vmStatic); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(vmStatic); }
private com.google.gwt.user.client.ui.Widget getRadioGroupPanel() { allButton = new com.google.gwt.user.client.ui.RadioButton("diskTypeView"); imagesButton = new com.google.gwt.user.client.ui.RadioButton("diskTypeView"); lunsButton = new com.google.gwt.user.client.ui.RadioButton("diskTypeView"); <START_MOD>searchButton = new com.google.gwt.user.client.ui.RadioButton("diskTypeView"); <END_MOD>allButton.getElement().getStyle().setMarginRight(20, Unit.PX); imagesButton.getElement().getStyle().setMarginRight(20, Unit.PX); lunsButton.getElement().getStyle().setMarginRight(20, Unit.PX); <START_MOD>searchButton.getElement().getStyle().setMarginRight(20, Unit.PX); searchButton.setEnabled(false); searchButton.setVisible(false); <END_MOD>com.google.gwt.user.client.ui.FlowPanel buttonsPanel = new com.google.gwt.user.client.ui.FlowPanel(); buttonsPanel.getElement().getStyle().setProperty("marginLeft", "auto"); buttonsPanel.getElement().getStyle().setProperty("marginRight", "auto"); buttonsPanel.add(allButton); buttonsPanel.add(imagesButton); buttonsPanel.add(lunsButton); <START_MOD>buttonsPanel.add(searchButton); setDiskViewType(DiskViewType<END_MOD>.IMAGE); localize(constants); return buttonsPanel; }
<START_MOD>@org.junit.Test public void nullTest() { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validationResult = underTest.validate(input); org.junit.Assert.assertEquals(expectedResult, validationResult.getSuccess()); }<END_MOD>
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { boolean hasError = false; for (org.ovirt.engine.core.common.action.VdcReturnValueBase singleResult : result.getReturnValue()) { if ((!(singleResult.<START_MOD>getValidate<END_MOD>())) || ((waitForResult) && (!(singleResult.getSucceeded())))) { hasError = true; getActionFlowState().addFailure(actionType, singleResult); } } if (hasError && (!(runNextInCaseOfError))) { then(null); } runNextAction(); }
<START_MOD>private boolean fetchStorageDomainInfo() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue allDomainsQuery = runInternalQuery(VdcQueryType.GetExistingStorageDomainList, new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters(org.ovirt.engine.core.bll.ImportHostedEngineStorageDomainCommand.getVdsId(), null, null, null)); if (allDomainsQuery.getSucceeded()) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> domains = allDomainsQuery.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.StorageDomain sd : domains) { if (sd.getName().equals(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.HostedEngineStorageDomainName))) { heStorageDomain = sd; return true; } } } return false; }<END_MOD>
@org.junit.Test public void externalNetworkNotSupported() throws java.lang.Exception { externalNetworkSupportTest(failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_NOT_SUPPORTED), false); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>Permission<END_MOD>> setUpPermissionsWithAdElementId(org.ovirt.engine.core.compat.Guid adElementId) { java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>Permission<END_MOD>> perms = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>Permission<END_MOD>>(); for (int i = 0; i < (NAMES.length); i++) { org.ovirt.engine.core.common.businessentities.<START_MOD>Permission<END_MOD> entity = getEntity(i); entity.setAdElementId(adElementId); perms.add(entity); } return perms; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { java.lang.String propName = args.propertyName; if ("IsCiscoUcsPrimaryPmTypeSelected".equals(propName)) { getView().updatePrimaryPmSlotLabelText(model.isCiscoUcsPrimaryPmTypeSelected()); } else if ("IsCiscoUcsSecondaryPmTypeSelected".equals(propName)) { getView().updateSecondaryPmSlotLabelText(model.isCiscoUcsSecondaryPmTypeSelected()); } }
public org.ovirt.engine.core.bll.ValidationResult hotUpdateDoneWithInternalNetwork(org.ovirt.engine.core.common.businessentities.network.Network oldNetwork, org.ovirt.engine.core.common.businessentities.network.Network newNetwork) { return ((oldNetwork == null) || (!(oldNetwork.isExternal()))) && ((newNetwork == null) || (!(newNetwork.isExternal()))) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_CANNOT_BE_REWIRED); }
<START_MOD>@java.lang.Override protected org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.businessentities.VmIcon> createEntityRowMapper() { return new org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.businessentities.VmIcon>() { @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmIcon mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.VmIcon icon = new org.ovirt.engine.core.common.businessentities.VmIcon(); icon.setId(getGuid(rs, org.ovirt.engine.core.dao.VmIconDaoImpl.ID_COLUMN)); icon.setDataUrl(rs.getString(org.ovirt.engine.core.dao.VmIconDaoImpl.DATA_URL_COLUMN)); icon.setDefaultForOs(((java.lang.Integer) (rs.getObject(org.ovirt.engine.core.dao.VmIconDaoImpl.DEFAULT_FOR_OS_COLUMN)))); return icon; } }; }<END_MOD>
@java.lang.Override protected org.ovirt.engine.core.common.businessentities.VDS getEntity(int index) { org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = control.createMock(org.ovirt.engine.core.common.businessentities.VdsStatic.class); expect(vdsStatic.getId()).andReturn(GUIDS[index]).anyTimes(); <START_MOD>org.ovirt.engine.core.common.businessentities.VDS entity = org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest.setUpEntityExpectations<END_MOD>(<START_MOD>control<END_MOD>.<START_MOD>createMock<END_MOD>(<START_MOD>org.ovirt.engine.core.common.businessentities.VDS.class<END_MOD>)<START_MOD>, null, <END_MOD>vdsStatic<START_MOD>, index<END_MOD>); expect(entity.getStoragePoolId()).andReturn(GUIDS[1]).anyTimes(); return entity; }
<START_MOD>@java.lang.Override protected<END_MOD> org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue, org.ovirt.engine.core.compat.Guid storageDomainId) { java.lang.String message = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage(StepEnum.MERGE_SNAPSHOTS, <START_MOD>org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskCommand.<END_MOD>getJobMessageProperties()); return super.createTask(taskId, vdsReturnValue.getCreationInfo(), VdcActionType.RemoveSnapshot, message, VdcObjectType.Storage, storageDomainId); }
<START_MOD>private org.ovirt.engine.core.common.businessentities.VmInit buildModelSpecificParameters(boolean isWindows) { org.ovirt.engine.core.common.businessentities.VmInit vmInit = buildCloudInitParameters(); if (isWindows && ((java.lang.Boolean) (getWindowsSysprepTimeZoneEnabled().getEntity()))) { java.util.Map.Entry<java.lang.String, java.lang.String> entry = ((java.util.Map.Entry<java.lang.String, java.lang.String>) (getWindowsSysprepTimeZone().getSelectedItem())); vmInit.setTimeZone(entry.getKey()); } else if ((!isWindows) && ((java.lang.Boolean) (getTimeZoneEnabled().getEntity()))) { java.util.Map.Entry<java.lang.String, java.lang.String> entry = ((java.util.Map.Entry<java.lang.String, java.lang.String>) (getTimeZoneList().getSelectedItem())); vmInit.setTimeZone(entry.getKey()); } if (isWindows) { vmInit.setDomain(getSysprepDomain().getSelectedItem()); } else { vmInit.setDomain(((java.lang.String) (getDomain().getEntity()))); } return vmInit; }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__SET); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__GLUSTER_GEOREP_CONFIG); <START_MOD>addValidateMessageVariable<END_MOD>("configName", getParameters().getConfigKey()); <START_MOD>addValidateMessageVariable<END_MOD>("geoRepSessionKey", getGeoRepSession().getSessionKey()); <START_MOD>addValidateMessageVariable<END_MOD>("configValue", getParameters().getConfigValue()); }
@org.junit.Test public void testRunPublicQuery_GetConfigurationValue() { java.lang.String sessionId = "sessionId"; org.ovirt.engine.core.common.queries.VdcQueryType queryType = org.ovirt.engine.core.common.queries.VdcQueryType.GetConfigurationValue; <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnIntValue = new org.ovirt.engine.core.common.queries.VdcQueryReturnValue(); returnIntValue.setSucceeded(true); returnIntValue.setReturnValue(java.lang.Integer.valueOf(255)); when(mockBackend.runPublicQuery(eq(VdcQueryType.GetConfigurationValue), eq(mockConfigQueryParams))).thenReturn(returnIntValue); <END_MOD>java.lang.Object result = testServlet.runPublicQuery(queryType, mockConfigQueryParams, sessionId); assertThat(result, org.ovirt.engine.ui.frontend.server.gwt.AbstractGwtDynamicHostPageServletTest.is(java.lang.Integer.class)); verify(mockConfigQueryParams).setSessionId(sessionId); verify(mockConfigQueryParams).setHttpSessionId(sessionId); verify(mockConfigQueryParams).setFiltered(testServlet.filterQueries()); verify(mockBackend).runPublicQuery(queryType, mockConfigQueryParams); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Pool java.lang.String editPoolTitle();
@java.lang.Override public void setMainTabSelectedItem(org.ovirt.engine.core.common.businessentities.StorageDomain selectedItem) { driver.edit(getDetailModel()); org.ovirt.engine.core.common.businessentities.StorageDomain entity = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (getDetailModel().getEntity())); if (entity != null) { totalSize.setValue(entity.getTotalDiskSize()); availableSize.setValue(entity.getAvailableDiskSize()); usedSize.setValue(entity.getUsedDiskSize()); allocatedSize.setValue(entity.getCommittedDiskSize()); overAllocationRatio.setValue(entity.getStorageDomainOverCommitPercent()); warningLowSpaceIndicator.setValue(entity.getWarningLowSpaceIndicator()); <START_MOD>warningLowSpaceSize.setValue(entity.getWarningLowSpaceSize()); java.util.ArrayList<org.ovirt.engine.ui.common.widget.label.TextBoxLabelBase<java.lang.Integer>> warningLowSpaceDetailsArray = new java.util.ArrayList<org.ovirt.engine.ui.common.widget.label.TextBoxLabelBase<java.lang.Integer>>(java.util.Arrays.asList(warningLowSpaceIndicator, warningLowSpaceSize)); warningLowSpaceDetails.setValue(warningLowSpaceDetailsArray); <END_MOD>criticalSpaceActionBlocker.setValue(entity.getCriticalSpaceActionBlocker()); } formBuilder.update(getDetailModel()); }
@java.lang.Override protected boolean canDoAction() { disk = org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.getDiskDao().get(org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.getParameters().getDiskId()); return ((((<START_MOD>((<END_MOD>org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.isVmExist()) && (org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.isVmUpOrDown())) && (isDiskExist(disk))) && (checkCanPerformPlugUnPlugDisk())) && (validate(getSnapshotsValidator().vmNotDuringSnapshot(org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.getVmId())))<START_MOD>) && (validate(getSnapshotsValidator().vmNotInPreview(org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.getVmId())))) && (validate(new org.ovirt.engine.core.bll.validator.VmValidator(org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.getVm()).vmNotLocked()))<END_MOD>; }
<START_MOD>private static java.util.Map<java.lang.String, java.lang.Object> searchImpl(java.lang.String token, org.ovirt.engine.core.aaa.QueryData queryData, java.lang.String queryType) { java.net.HttpURLConnection connection = null; try { connection = org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.createConnection("/search-directory"); org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.setClientIdSecretBasicAuthHeader(connection); org.ovirt.engine.core.uutils.net.URLBuilder urlBuilder = new org.ovirt.engine.core.uutils.net.URLBuilder(connection.getURL()).addParameter("token", token).addParameter("scope", "ovirt-app-admin ovirt-app-api").addParameter("query_type", queryType).addParameter("query_data", new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer().serialize(queryData)); org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.postData(connection, urlBuilder.buildURL().getQuery()); return org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.getData(connection); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } finally { if (connection != null) { connection.disconnect(); } } }<END_MOD>
<START_MOD>public static org.ovirt.engine.core.vdsbroker.VMStatsRefresher create(final org.ovirt.engine.core.vdsbroker.VdsManager manager) { return new org.ovirt.engine.core.vdsbroker.PollVMStatsRefresher(manager); }<END_MOD>
@java.lang.Override protected void executeCommand() { if (org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplate().isBaseTemplate()) { shiftBaseTemplateToSuccessor(); } java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> templateImages = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId()); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(templateImages); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(templateImages, <START_MOD>org.ovirt.engine.core.bll.ACTIVE_DISKS_ONLY); org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId()<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getCompensationContext()); if ((!(diskImages.isEmpty())) || (!(cinderDisks.isEmpty()))) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { if ((!(diskImages.isEmpty())) && (removeVmTemplateImages())) { org.ovirt.engine.core.bll.VmHandler.removeVmInitFromDB(getVmTemplate()); setSucceeded(<END_MOD>true); <START_MOD>} if (!(cinderDisks.isEmpty())) { removeCinderDisks(cinderDisks); setSucceeded(true); } return null; }); } if <END_MOD>(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.noAsyncOperations()) { handleEndAction(); } }
@java.lang.Override public int hashCode() { final int prime = 31; int result = super.hashCode(); result = (prime * result) + ((defaultDisplayType) == null ?   : defaultDisplayType.hashCode()); result = (prime * result) + (<START_MOD>initialized<END_MOD> ? 1231 : 1237); result = (prime * result) + (<START_MOD>diskSize<END_MOD>); result = (prime * result) + ((name) == null ?   : name.hashCode()); result = (prime * result) + ((predefinedProperties) == null ?   : predefinedProperties.hashCode()); result = (prime * result) + ((userDefinedProperties) == null ?   : userDefinedProperties.hashCode()); result = (prime * result) + ((<START_MOD>vmtGuid) == null ?   : vmtGuid<END_MOD>.hashCode()); return result; }
@java.lang.Override public boolean isReadable(java.lang.Class<?> type, java.lang.reflect.Type genericType, java.lang.annotation.Annotation[] annotations, javax.ws.rs.core.MediaType mediaType) { return <START_MOD>(type.getPackage()) == (org.ovirt.engine.api.restapi.xml.JAXBProvider.typesPackage)<END_MOD>; }
@org.junit.Test public void canSetNumaConfigurationWithVmFromParams() { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class)); }
<START_MOD>protected org.ovirt.engine.core.compat.Guid addStorageDomain(org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, org.ovirt.engine.core.common.businessentities.StorageDomainType storageDomainType) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainStaticEntry = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); domainStaticEntry.setId(org.ovirt.engine.core.compat.Guid.newGuid()); domainStaticEntry.setStorage(provider.getId().toString()); domainStaticEntry.setStorageName(provider.getName()); domainStaticEntry.setDescription(provider.getDescription()); domainStaticEntry.setStorageFormat(StorageFormatType.V1); domainStaticEntry.setStorageType(storageType); domainStaticEntry.setStorageDomainType(storageDomainType); domainStaticEntry.setWipeAfterDelete(false); org.ovirt.engine.core.bll.provider.storage.AbstractOpenStackStorageProviderProxy.getDbFacade().getStorageDomainStaticDao().save(domainStaticEntry); org.ovirt.engine.core.common.businessentities.StorageDomainDynamic domainDynamicEntry = new org.ovirt.engine.core.common.businessentities.StorageDomainDynamic(); domainDynamicEntry.setId(domainStaticEntry.getId()); domainDynamicEntry.setAvailableDiskSize(StorageConstants.SIZE_IS_NOT_AVAILABLE); domainDynamicEntry.setUsedDiskSize(StorageConstants.SIZE_IS_NOT_AVAILABLE); org.ovirt.engine.core.bll.provider.storage.AbstractOpenStackStorageProviderProxy.getDbFacade().getStorageDomainDynamicDao().save(domainDynamicEntry); return domainStaticEntry.getId(); }<END_MOD>
public org.ovirt.engine.core.common.businessentities.AsyncTasks getAsyncTaskFromDb(org.ovirt.engine.core.compat.Guid asyncTaskId) { org.ovirt.engine.core.common.businessentities.AsyncTasks asyncTask = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAsyncTaskDao().get(asyncTaskId); if (asyncTask != null) { <START_MOD>asyncTask.setParentCmdEntity<END_MOD>(<START_MOD>getCommandEntity(asyncTask<END_MOD>.<START_MOD>getRootCommandId())); asyncTask.setChildCmdEntity(<END_MOD>getCommandEntity(asyncTask.getCommandId())); } return asyncTask; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Storage java.lang.String detachStorageTitle();
private boolean canRemoveVmImageDisk() { if (!(listVms.isEmpty())) { org.ovirt.engine.core.compat.Guid storagePoolId = listVms.get(0).getStoragePoolId(); org.ovirt.engine.core.common.businessentities.StoragePool sp = org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.getStoragePoolDao().get(storagePoolId); if (!(validate(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(sp).isUp()))) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskList = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(java.util.Collections.singletonList(getDisk()), <START_MOD>org.ovirt.engine.core.bll.storage.disk.NOT_SHAREABLE_DISKS_ONLY, org.ovirt.engine.core.bll.storage.disk.ACTIVE_DISKS_ONLY); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(diskList); if (!(validate(diskImagesValidator.diskImagesNotLocked()))) { return false; } } org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(); for (org.ovirt.engine.core.common.businessentities.VM vm : listVms) { if ((!(validate(snapshotsValidator.vmNotDuringSnapshot(vm.getId())))) || (!(validate(snapshotsValidator.vmNotInPreview(vm.getId()))))) { return false; } } return <END_MOD>true<START_MOD>; }<END_MOD>
<START_MOD>private boolean isUnsetRoleProhibited(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return (isMultipleSelectionAllowed()) && (isDisplayOriginally(clusterNetworkModel)); }<END_MOD>
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(VdcActionType.RemoveVmTemplate); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.domain.<START_MOD>ActionAfterDeleteHandler.fixParameters<END_MOD>(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getWipeAfterDelete(), false))); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getReturnValue().getInternalVdsmTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), VdcActionType.RemoveVmTemplate, VdcObjectType.Storage, org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.setSucceeded(true); } }
<START_MOD>public void setProfileWindow(org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeProfileStatisticsModel profileStatsModel) { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel cModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())); cModel.stopProgress(); setConfirmWindow(null); setWindow(profileStatsModel); setHelpTag(HelpTag.volume_profile_statistics); setHashName("volume_profile_statistics"); }<END_MOD>
private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { <START_MOD>org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd<END_MOD> = <START_MOD>validateStorageDomainExistsInDb(snapshot, memoryDiskDomainMap.get(snapshot.getMetadataDiskId())); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk<END_MOD> = <START_MOD>isMemoryDiskAlreadyExistsInDb<END_MOD>(snapshot, <START_MOD>snapshot.getMetadataDiskId(<END_MOD>)); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMetadataDisk(org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(<START_MOD>snapshot.getMetadataDiskId(<END_MOD>)); memoryDisk.setImageId(<START_MOD>org.ovirt.engine.core.compat.Guid.newGuid(<END_MOD>)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(<START_MOD>sd.getId(<END_MOD>)))); memoryDisk.setStoragePoolId(<START_MOD>org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getStoragePoolId(<END_MOD>)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(DiskImage::isWipeAfterDelete)); return memoryDisk; }
private void validateBase64() { try { rawImageData = javax.xml.bind.DatatypeConverter.parseBase64Binary(base64Data); } catch (java.lang.ArrayIndexOutOfBoundsException | java.lang.IllegalArgumentException e) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.VM_ICON_BASE64_PART_MALFORMED); } }
@java.lang.Override public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml tooltip) { org.ovirt.engine.ui.common.<START_MOD>utils<END_MOD>.<START_MOD>ElementTooltipUtils<END_MOD>.<START_MOD>setTooltipOnElement<END_MOD>(getElement()<START_MOD>, tooltip<END_MOD>); }
public boolean candidateOperation(java.lang.String op1Key, java.lang.String op1Type, java.lang.String op2Key, java.lang.String op2Type, boolean drop) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic1 = null; org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel network1 = null; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic2 = null; org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel network2 = null; if (org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel.NIC.equals(op1Type)) { nic1 = nicMap.get(op1Key); } else if (org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel.NETWORK.equals(op1Type)) { network1 = networkMap.get(op1Key); } if (org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel.NIC.equals(op2Type)) { nic2 = nicMap.get(op2Key); } else if (org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel.NETWORK.equals(op2Type)) { network2 = networkMap.get(op2Key); } org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1 = (nic1 == null) ? network1 : nic1; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2 = (nic2 == null) ? network2 : nic2; return candidateOperation(op1, op2, drop<START_MOD>, false<END_MOD>); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { final boolean versionChanged = !(java.util.Objects.equals(oldGroup.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion())); if (!versionChanged) { return null; } final java.lang.String lockMessage = (EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_BEING_UPDATED.name()) + (org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("clusterName", oldGroup.getName())); vmsLockedForUpdate = org.ovirt.engine.core.bll.UpdateClusterCommand.getVmStaticDao().getAllByCluster(oldGroup.getId()).stream().filter(( vm) -> ((vm.getOrigin()) != OriginType.EXTERNAL) && (!(vm.isHostedEngine()))).filter(( vm) -> (vm.getCustomCompatibilityVersion()) == null).<START_MOD>sorted().<END_MOD>collect(java.util.stream.Collectors.toList()); return vmsLockedForUpdate.stream().collect(java.util.stream.Collectors.toMap(( vm) -> vm.getId().toString(), ( vm) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, lockMessage))); }
<START_MOD>@org.junit.Test public void dontSyncNetworkOnDefaultMtu() { org.ovirt.engine.core.common.businessentities.Network net = createNetwork("net"); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNicOnNetwork("nic0", net); nic.setMtu(org.ovirt.engine.core.utils.RandomUtils.instance().nextInt()); mockExistingNetworks(net); mockExistingIfaces(nic); org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForSync(nic)); validateAndAssertNoChanges(helper); }<END_MOD>
<START_MOD>public java.util.Date getCertificationExpirationDate() { if ((this.nioEngine) == null) { return null; } return this.nioEngine.getCertificateExpirationDate(); }<END_MOD>
@org.junit.Test public void testNotRemovingUsedPoolRecordIsUsed() throws java.lang.Exception { macPool.setId(org.ovirt.engine.core.compat.Guid.newGuid()); <START_MOD>final org.ovirt.engine.core.common.businessentities.StoragePool storagePool = new org.ovirt.engine.core.common.businessentities.StoragePool(); storagePool.setName("storagePool"); <END_MOD>when(<START_MOD>storagePoolDao<END_MOD>.<START_MOD>getAllDataCentersByMacPoolId<END_MOD>(macPool.getId())).thenReturn(<START_MOD>java.util.Collections.singletonList(storagePool)<END_MOD>); final org.ovirt.engine.core.bll.ValidationResult validationResult = new org.ovirt.engine.core.bll.MacPoolValidator(macPool).notRemovingUsedPool(); org.junit.Assert.assertThat(validationResult, failsWith(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_STILL_USED_MAC_POOL)); }
public java.lang.Integer getMemCommited() { return mVdsDynamic.getMemCommited(); }
@java.lang.Override public boolean <START_MOD>validateStoragePoolConnectionsInHost<END_MOD>(org.ovirt.engine.core.common.businessentities.VDS vds, java.util.List<org.ovirt.engine.core.common.businessentities.storage_server_connections> connections, org.ovirt.engine.core.compat.Guid storagePoolId) { if ((connections.size()) > 0) { @java.lang.SuppressWarnings("unchecked") java.util.Map<java.lang.String, java.lang.String> validateConnections = ((java.util.Map<java.lang.String, java.lang.String>) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ValidateStorageServerConnection, new org.ovirt.engine.core.common.vdscommands.ConnectStorageServerVDSCommandParameters(vds.getId(), storagePoolId, org.ovirt.engine.core.common.businessentities.StorageType.ISCSI, connections)).getReturnValue())); return IsConnectSucceeded(validateConnections, connections); } return true; }
<START_MOD>protected org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters<END_MOD>() { <START_MOD>org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters params = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getVmId(),   for Live Storage Migration params.setParentCommand(VdcActionType.LiveMigrateVmDisks); params.setSnapshotType(SnapshotType.REGULAR); params.setParentParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters()); params.setImagesParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getImagesParameters()); params.setTaskGroupSuccess(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getTaskGroupSuccess()); params.setDisks(getMovedDisks()); params.setDiskIdsToIgnoreInChecks(getMovedDiskIds()); params.setNeedsLocking(false); params.setShouldBeEndedByParent(false); return params; <END_MOD>}
<START_MOD>public static org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmPopupWidgetConfig simpleField() { return new org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmPopupWidgetConfig(false, false, false, false); }<END_MOD>
<START_MOD>private java.util.Locale getLocaleFromCookies(javax.servlet.http.Cookie[] cookies) { java.util.Locale locale = null; if (null != cookies) { for (javax.servlet.http.Cookie cookie : cookies) { if (org.ovirt.engine.core.LocaleFilter.LOCALE.equalsIgnoreCase(cookie.getName())) { locale = org.ovirt.engine.core.utils.LocaleUtils.getLocaleFromString(cookie.getValue()); break; } } } return locale; }<END_MOD>
private org.ovirt.engine.core.common.action.VdcReturnValueBase executeCommand(final org.ovirt.engine.core.bll.CommandBase<?> command) { <START_MOD>org.ovirt.engine.core.bll.context.CommandContext context = command.getContext(); <END_MOD>command.persistCommand(command.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.tasks.interfaces.CommandCallBack callBack = command.getCallBack(); if (callBack != null) { cmdCallBackMap.put(command.getCommandId(), callBack); } org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.bll.utils.BackendUtils.getBackendCommandObjectsHandler(org.ovirt.engine.core.bll.tasks.CommandExecutor.log).runAction(command, null); updateCommand(command, result); if (callBack != null) { callBack.executed(result); } return result; }
@java.lang.Override public boolean <START_MOD>getIsAvailable<END_MOD>() { return getDetailModel().getIsNfs(); }
<START_MOD>@org.junit.Test public void vlanIdTakenBySameNetwork() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network otherNetwork = new org.ovirt.engine.core.common.businessentities.network.Network(); otherNetwork.setVlanId(DEFAULT_VLAN_ID); otherNetwork.setId(new org.ovirt.engine.core.compat.Guid(DEFAULT_GUID)); java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>(); networks.add(otherNetwork); vlanIdAvailableTest(ValidationResult.VALID, networks); }<END_MOD>
public static <START_MOD>int<END_MOD> getSizeOfMemoryDeviceMb(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if ((memoryDevice.getType()) != (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) { throw new java.lang.RuntimeException(((( device expected but device   + memoryDevice) +   passed of type   + (memoryDevice.getType()))); } <START_MOD>final java.lang.String sizeText =<END_MOD> ((java.lang.<START_MOD>String<END_MOD>) (memoryDevice.getSpecParams().get(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE))); <START_MOD>return java.lang.Integer.parseInt(sizeText); <END_MOD>}
@java.lang.Override protected boolean canDoAction() { if (!(org.ovirt.engine.core.common.FeatureSupported.isIscsiMultipathingSupported(org.ovirt.engine.core.bll.storage.AddIscsiBondCommand.getStoragePool().getCompatibilityVersion()))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ISCSI_BOND_NOT_SUPPORTED); } org.ovirt.engine.core.bll.validator.IscsiBondValidator validator = new org.ovirt.engine.core.bll.validator.IscsiBondValidator(); return ((validate(validator.iscsiBondWithTheSameNameExistInDataCenter(getIscsiBond()))) && (validate(validator.validateAddedLogicalNetworks(getIscsiBond())))) && (validate(validator.validateAddedStorageConnections(getIscsiBond()))); }
<START_MOD>public java.util.List<java.lang.String> getVmsNames() { return this.vmsNames; }<END_MOD>
protected void logToAudit() { <START_MOD>if (org.ovirt.engine.core.vdsbroker.vdsbroker.BrokerCommandBase.getParameters().getExpectedEngineErrors().contains(getReturnValueFromStatus(getReturnStatus()))) { return; <END_MOD>}<START_MOD> }<END_MOD>
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.User.class, to = org.ovirt.engine.core.common.businessentities.DbUser.class) public static org.ovirt.engine.core.common.businessentities.DbUser map(org.ovirt.engine.api.model.User model, org.ovirt.engine.core.common.businessentities.DbUser template) { org.ovirt.engine.core.common.businessentities.DbUser entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.DbUser(); if (model.isSetName()) { entity.setLoginName(model.getName()); } if (model.isSetId()) { java.lang.String id = model.getId(); try { <START_MOD>java.lang.String internalId = org.ovirt.engine.api.restapi.utils.DirectoryEntryIdUtils.getInternalId(id); java.lang.String providerId = org.ovirt.engine.api.restapi.utils.DirectoryEntryIdUtils.getProviderId(id); java.lang.String externalId = org.ovirt.engine.api.restapi.utils.DirectoryEntryIdUtils.getIdInDirectory(providerId); if (internalId.isEmpty()) { <END_MOD>entity.setId(org.ovirt.engine.<START_MOD>core.compat.Guid.newGuid()); } else { entity.setId(org.ovirt.engine.<END_MOD>api.restapi.utils.GuidUtils.asGuid(<START_MOD>internalId)); }<END_MOD> entity.setExternalId(<START_MOD>externalId<END_MOD>); } catch (org.ovirt.engine.api.restapi.utils.MalformedIdException exception) { } } if (model.isSetDomain()) { org.ovirt.engine.api.model.Domain domain = model.getDomain(); if (domain.isSetName()) { entity.setDomain(domain.getName()); } } return entity; }
protected java.lang.String getChangePasswordMsg(boolean edit) throws java.io.UnsupportedEncodingException, org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsResult { if (!(args.contains(org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsArguments.ARG_CHANGE_PASSWORD_MSG))) { return null; } java.lang.String emptyValueDescription = (edit) ?   (Not providing a value will cause the existing value to be reset) : ""; java.lang.String changePasswordMsgStr = java.lang.System.console().readLine((( enter message or URL to appear when user tries to login with an expired password + emptyValueDescription) + ":")); if (((changePasswordMsgStr<START_MOD> != null) && ((changePasswordMsgStr<END_MOD>.indexOf("http")) == 0<START_MOD>)<END_MOD>) || ((changePasswordMsgStr.indexOf("https")) == 0)) { try { java.net.URL url = new java.net.URL(changePasswordMsgStr); org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomains.log.debug((( that   + url) +   is in correct format } catch (java.net.MalformedURLException ex) { throw new org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsResult(ManageDomainsResultEnum.INVALID_ARGUMENT_VALUE,   provided value begins with a URL prefix of either http or https. However this is not a valid URL } } return org.apache.commons.lang.StringUtils.isNotEmpty(changePasswordMsgStr) ? java.net.URLEncoder.encode(changePasswordMsgStr, "UTF-8") : ""; }
@org.junit.<START_MOD>Before<END_MOD> public void beforeClass() { org.ovirt.engine.core.bll.BackwardCompatibilityTaskCreationTest.<START_MOD>Dbs testClass = new org.ovirt.engine.core.bll.BackwardCompatibilityTaskCreationTest.Dbs(); org.mockito.MockitoAnnotations.initMocks(testClass); org.ovirt.engine.core.dao.AsyncTaskDAO asyncTaskDao =<END_MOD> mock(<START_MOD>org.ovirt.engine.core.dao.AsyncTaskDAO.class); when(asyncTaskDao.getAll()).thenReturn(<END_MOD>java.<START_MOD>util.Collections.EMPTY_LIST); when(testClass.getDbFacade().getAsyncTaskDao()).thenReturn(asyncTaskDao); org.ovirt.engine.core.dao.CommandEntityDao cmdEntityDao = mock(org.ovirt.engine.core.dao.CommandEntityDao<END_MOD>.class)<START_MOD>; when(testClass.getDbFacade().getCommandEntityDao()).thenReturn(cmdEntityDao); when(cmdEntityDao<END_MOD>.getAll()).thenReturn(java.util.Collections.EMPTY_LIST); }
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.compat.Version getVdsGroupCompatibilityVersion() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVmStaticData(); if ((vmStatic != null) && ((vmStatic.getVdsGroupId()) != null)) { return getCachedVdsGroupCompatibilityVersionById(vmStatic.getVdsGroupId()); } else { return null; } }<END_MOD>
<START_MOD>private void addSpmStates(org.ovirt.engine.api.model.VersionCaps version, org.ovirt.engine.api.model.SpmState[] values) { if (org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual(version, org.ovirt.engine.api.restapi.resource.BackendCapabilitiesResource.VERSION_3_5)) { org.ovirt.engine.api.model.SpmStates states = new org.ovirt.engine.api.model.SpmStates(); for (org.ovirt.engine.api.model.SpmState state : values) { states.getSpmState().add(state.value()); } version.setSpmStates(states); } }<END_MOD>
protected void mockVmRunHandler() { org.ovirt.engine.core.common.businessentities.storage_pool sp = new org.ovirt.engine.core.common.businessentities.storage_pool(); sp.setstatus(StoragePoolStatus.Up); when(spDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(sp); doReturn(spDao).when(vmRunHandler).getStoragePoolDAO(); doReturn(vmRunHandler).when(command).getVmRunHandler(); doReturn(true).when(vmRunHandler).<START_MOD>validateAllDomainsUp(any(org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator.class), anyListOf(java.lang.String.class)); doReturn(true).when(vmRunHandler).validateAllDomainsThresholds(any(org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator.class), anyListOf(java.lang.String.class)); doReturn(true).when(vmRunHandler).<END_MOD>performImageChecksForRunningVm(any(org.ovirt.engine.core.common.businessentities.VM.class), anyListOf(java.lang.String.class), any(org.ovirt.engine.core.common.action.RunVmParams.class), anyListOf(org.ovirt.engine.core.common.businessentities.<START_MOD>DiskImage<END_MOD>.class)); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (obj)); return ((((((((((((((((<START_MOD>(<END_MOD>java.util.Objects.equals(name, other.getName())) && (java.util.Objects.equals(clusterId, other.clusterId))) && ((volumeType) == (other.volumeType))) && ((status) == (other.status))) && (java.util.Objects.equals(replicaCount, other.replicaCount))) && (java.util.Objects.equals(stripeCount, other.stripeCount))) && (java.util.Objects.equals(disperseCount, other.disperseCount))) && (java.util.Objects.equals(redundancyCount, other.redundancyCount))) && (<START_MOD>java.util.Objects.equals(arbiterCount, other.arbiterCount))) && (<END_MOD>org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(getOptions(), other.getOptions()))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(accessProtocols, other.accessProtocols))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(transportTypes, other.transportTypes))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(bricks, other.bricks))) && (java.util.Objects.equals(asyncTask, other.asyncTask))) && (java.util.Objects.equals(advancedDetails, other.advancedDetails))) && (java.util.Objects.equals(snapshotsCount, other.snapshotsCount))) && (java.util.Objects.equals(snapMaxLimit, other.snapMaxLimit))) && (java.util.Objects.equals(snapshotScheduled, other.snapshotScheduled)); }
static org.ovirt.engine.core.bll.ValidationResult validateDefaultFlagIsNotChanged(org.ovirt.engine.core.common.businessentities.MacPool macPoolFromDb, org.ovirt.engine.core.common.businessentities.MacPool newMacPool) { if ((macPoolFromDb == null) || (newMacPool == null)) { throw new java.lang.IllegalArgumentException(); } final boolean defaultChanged = (macPoolFromDb.isDefaultPool()) != (newMacPool.isDefaultPool()); return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_CHANGING_DEFAULT_MAC_POOL_IS_NOT_SUPPORTED).when(defaultChanged); }
<START_MOD>private org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails getVolumeAdvancedDetailsEntity(int index) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails entity = control.createMock(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeAdvancedDetails.class); org.ovirt.engine.core.common.businessentities.gluster.BrickDetails brickDetails = control.createMock(org.ovirt.engine.core.common.businessentities.gluster.BrickDetails.class); expect(brickDetails.getBrickProperties()).andReturn(control.createMock(org.ovirt.engine.core.common.businessentities.gluster.BrickProperties.class)).anyTimes(); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.BrickDetails> brickDetailsList = java.util.Arrays.asList(brickDetails); expect(entity.getBrickDetails()).andReturn(brickDetailsList).anyTimes(); return entity; }<END_MOD>
<START_MOD>private boolean isLibrbdAvailable() { if (!(org.ovirt.engine.core.bll.storage.CINDERStorageHelper.isLibrbdAvailable(getVds()))) { log.error("Couldn't found librbd1 package on vds {} (needed for Cinder storage domains).", getVds().getName()); setNonOperational(NonOperationalReason.LIBRBD_PACKAGE_NOT_AVAILABLE, getVds()); return false; } return true; }<END_MOD>
<START_MOD>private void newMacPool() { org.ovirt.engine.ui.uicommonweb.models.macpool.SharedMacPoolModel model = new org.ovirt.engine.ui.uicommonweb.models.macpool.SharedMacPoolModel(this, $missing$); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newSharedMacPoolTitle()); model.setHashName("new_shared_mac_pool"); model.setHelpTag(HelpTag.new_shared_mac_pool); setWindow(model); }<END_MOD>
<START_MOD>@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testGetLocaleStringFromPathIllegalPath() { testServlet.getLocaleStringFromPath("index.html"); fail("Should not get here."); }<END_MOD>
<START_MOD>@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Boolean isUnique = ((java.lang.Boolean) (returnValue)); if (((model.getIsNew()) && (!isUnique)) || (((!(model.getIsNew())) && (!isUnique)) && ((name.compareToIgnoreCase(getCurrentPool().getName())) != 0))) { model.getName().getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason()); model.getName().setIsValid(false); model.setValidTab(TabName.GENERAL_TAB, false); return; } java.lang.String selectedCpu = model.getCustomCpu().getSelectedItem(); if (((selectedCpu != null) && (!(selectedCpu.isEmpty()))) && (!(model.getCustomCpu().getItems().contains(selectedCpu)))) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().vmUnsupportedCpuTitle()); confirmModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().vmUnsupportedCpuMessage()); confirmModel.setHelpTag(HelpTag.edit_unsupported_cpu); confirmModel.setHashName("edit_unsupported_cpu"); confirmModel.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand("OnSave_Phase2", this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true)); confirmModel.getCommands().add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("CancelConfirmation", this)); setConfirmWindow(confirmModel); } else { onSave(); } }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response approve(org.ovirt.engine.api.model.Action action) { if ((action.isSetCluster()) && ((action.getCluster().isSetId()) || (action.getCluster().isSetName()))) { update(setCluster(get(), action.getCluster())); } validateEnums(org.ovirt.engine.api.model.Action.class, action); org.ovirt.engine.core.common.action.ApproveVdsParameters params = new org.ovirt.engine.core.common.action.ApproveVdsParameters(guid); params = ((org.ovirt.engine.core.common.action.ApproveVdsParameters) (getMapper(org.ovirt.engine.api.model.Action.class, org.ovirt.engine.core.common.action.VdsOperationActionParameters.class).map(action, ((org.ovirt.engine.core.common.action.VdsOperationActionParameters) (params))))); <START_MOD>params.setAuthMethod(VdsOperationActionParameters.AuthenticationMethod.PublicKey); <END_MOD>return doAction(VdcActionType.ApproveVds, params, action); }
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = returnValue.getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); getModel().setRngDevice(rngDevice); } }
private void registerAllOvfDisks(java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ovfStoreDiskImages) { for (org.ovirt.engine.core.common.businessentities.DiskImage ovfStoreDiskImage : ovfStoreDiskImages) { ovfStoreDiskImage.setDiskAlias(OvfInfoFileConstants.OvfStoreDescriptionLabel); ovfStoreDiskImage.setDiskDescription(OvfInfoFileConstants.OvfStoreDescriptionLabel); ovfStoreDiskImage.setShareable(true); org.ovirt.engine.core.common.action.RegisterDiskParameters registerDiskParams = new org.ovirt.engine.core.common.action.RegisterDiskParameters(ovfStoreDiskImage, org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getParameters().getStorageDomainId()); <START_MOD>boolean registerDiskResult<END_MOD> = <START_MOD>runInternalAction(VdcActionType.RegisterDisk, registerDiskParams, org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.cloneContext()).getSucceeded(); log.infoFormat( new floating OVF_STORE disk with disk id {0} for storage domain {1} has {2} ovfStoreDiskImage.getId(), org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getParameters().getStorageDomainId(), (registerDiskResult ? <END_MOD>"succeeded"<START_MOD> : "failed"))<END_MOD>; if (<START_MOD>registerDiskResult) { log.infoFormat( OVF_STORE disk with disk id {0} to storage domain {1} ovfStoreDiskImage.getId()<END_MOD>, org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getParameters().getStorageDomainId()); addOvfStoreDiskToDomain(ovfStoreDiskImage); } }<START_MOD> }<END_MOD>
@org.junit.Test public void testrunMultipleActions_1action() { java.util.List<org.ovirt.engine.core.common.action.VdcActionType> actionTypes = new java.util.ArrayList<>(); actionTypes.add(VdcActionType.AddDisk); java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> testParameters = new java.util.ArrayList<>(); testParameters.add(new org.ovirt.engine.core.common.action.VdcActionParametersBase()); java.util.List<org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback> callbacks = new java.util.ArrayList<>(); callbacks.add(mockActionCallback); frontend.runMultipleActions(actionTypes, testParameters, callbacks, mockActionFailureCallback, testState); verify(mockService).runAction(eq(VdcActionType.AddDisk), eq(testParameters.get(0)), callbackAction.capture()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnValue.<START_MOD>setValidate<END_MOD>(true); returnValue.setSucceeded(true); callbackAction.getValue().onSuccess(returnValue); verify(mockActionCallback).executed(callbackParam.capture()); assertEquals(callbackParam.getValue().getReturnValue(), returnValue); assertEquals( size should be 0 0, actionTypes.size()); assertEquals( size should be 0 0, testParameters.size()); assertEquals( size should be 0 0, callbacks.size()); verifyAsyncActionStartedAndSucceeded(); }
<START_MOD>@java.lang.SuppressWarnings("unchecked") public void onDiscover() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> mulipleActionParameters = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); org.ovirt.engine.core.compat.Guid dcId = ((org.ovirt.engine.core.common.businessentities.StoragePool) (getDataCenters().getSelectedItem())).getId(); for (org.ovirt.engine.ui.uicommonweb.models.providers.ExternalNetwork externalNetwork : ((java.util.List<org.ovirt.engine.ui.uicommonweb.models.providers.ExternalNetwork>) (getNetworkList().getItems()))) { if (externalNetwork.isAttached()) { externalNetwork.getNetwork().setDataCenterId(dcId); org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters params = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(dcId, externalNetwork.getNetwork()); params.setPublicUse(externalNetwork.isPublicUse()); mulipleActionParameters.add(params); } } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.AddNetwork, mulipleActionParameters); cancel(); }<END_MOD>
public static boolean verifyAddVm(java.util.List<java.lang.String> reasons, int nicsCount, int vmPriority<START_MOD>, org.ovirt.engine.core.bll.network.MacPoolManagerStrategy macPool<END_MOD>) { boolean returnValue = true; if ((<START_MOD>macPool<END_MOD>.getAvailableMacsCount()) < nicsCount) { if (reasons != null) { reasons.add(VdcBllMessages.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES.toString()); } returnValue = false; } else if (!(org.ovirt.engine.core.bll.VmTemplateCommand.isVmPriorityValueLegal(vmPriority, reasons))) { returnValue = false; } return returnValue; }
public void getHostListByStatus(org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.VDS>><END_MOD> aQuery, org.ovirt.engine.core.common.businessentities.VDSStatus status, boolean doRefresh) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.VDS>><END_MOD>() { @java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.VDS> convert(java.<END_MOD>lang.Object <START_MOD>source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { return org.ovirt.engine.ui.uicommonweb.Linq.cast((<END_MOD>(java.lang.<START_MOD>Iterable) (<END_MOD>source<START_MOD>))); } return new java.util.ArrayList<>(); } }; org.ovirt.engine.core.common.queries.SearchParameters searchParameters = new org.ovirt.engine.core.common.queries.SearchParameters((   + (status == null ? "" : "status=" + (status.name()))), org.ovirt.engine.core.common.interfaces.SearchType.VDS); searchParameters.setMaxCount(9999);<END_MOD> org.ovirt.engine.ui.frontend.<START_MOD>Frontend.getInstance().runQuery(VdcQueryType.Search, (doRefresh ? searchParameters : searchParameters.withoutRefresh()), aQuery)<END_MOD>; }
public org.ovirt.engine.ui.uicommonweb.models.<START_MOD>providers.NeutronAgentBehavior<END_MOD> <START_MOD>getNeutronAgentTab<END_MOD>() { return <START_MOD>neutronAgentTab<END_MOD>; }
@org.junit.Test public void testBreakingExistingBondWithNetworkAttached() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.newNetworkAttachment(networkA, existingBond, null, dataFromHostSetupNetworksModel.networksToSync<START_MOD>, null<END_MOD>); existingNetworkAttachments.add(networkAttachment); when(logicalNetworkModelOfNetworkA.hasVlan()).thenReturn(false); when(logicalNetworkModelOfNetworkA.isAttached()).thenReturn(true); when(logicalNetworkModelOfNetworkA.getAttachedToNic()).thenReturn(networkInterfaceModelOfNicA); when(bondNetworkInterfaceModelA.getItems()).thenReturn(java.util.Collections.singletonList(logicalNetworkModelOfNetworkA)); when(bondNetworkInterfaceModelA.getIface()).thenReturn(existingBond); NetworkOperation.BREAK_BOND.getTarget().executeNetworkCommand(bondNetworkInterfaceModelA, null, dataFromHostSetupNetworksModel); assertThat(dataFromHostSetupNetworksModel.newOrModifiedNetworkAttachments.size(), is(0)); assertThat(dataFromHostSetupNetworksModel.removedNetworkAttachments.size(), is(1)); org.ovirt.engine.core.compat.Guid removedNetworkAttachmentId = dataFromHostSetupNetworksModel.removedNetworkAttachments.iterator().next().getId(); assertThat( mismatch removedNetworkAttachmentId, nullValue()); assertThat(dataFromHostSetupNetworksModel.newOrModifiedBonds.size(), is(0)); assertThat(dataFromHostSetupNetworksModel.removedBonds.size(), is(1)); org.ovirt.engine.core.compat.Guid removedBondId = dataFromHostSetupNetworksModel.removedBonds.iterator().next().getId(); assertThat( mismatch removedBondId, is(existingBond.getId())); }
@java.lang.SuppressWarnings("unchecked") public void initModelSortHandler(org.ovirt.engine.ui.uicommonweb.models.SortedListModel<T> sortedModel) { org.ovirt.engine.ui.common.widget.table.ColumnResizeCellTable.addColumnSortHandler(( event) -> <START_MOD>applySort(event<END_MOD>, sortedModel)); }
<START_MOD>@java.lang.Override public java.lang.Object getQueryableId() { return queryableId; }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> getAllInterfacesForVdsGroup(org.ovirt.engine.core.compat.Guid vdsGroupId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_group_id", vdsGroupId); return getCallsHandler().executeReadList("Getinterface_viewByVdsGroupId", org.ovirt.engine.core.dao.network.InterfaceDaoDbFacadeImpl.vdsNetworkInterfaceRowMapper, parameterSource); }<END_MOD>
void initTable(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { org.ovirt.engine.ui.common.widget.table.column.TextColumnWithTooltip<org.ovirt.engine.core.common.businessentities.event_subscriber> eventNameColumn = new org.ovirt.engine.ui.common.widget.table.column.EnumColumn<org.ovirt.engine.core.common.businessentities.event_subscriber, org.ovirt.engine.core.common.AuditLogType>() { @java.lang.Override protected org.ovirt.engine.core.common.AuditLogType getRawValue(org.ovirt.engine.core.common.businessentities.event_subscriber object) { return java.lang.Enum.valueOf(org.ovirt.engine.core.common.AuditLogType.class, object.getevent_up_name()); } }; <START_MOD>eventNameColumn.makeSortable(new java.util.Comparator<org.ovirt.engine.core.common.businessentities.event_subscriber>() { @java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.event_subscriber o1, org.ovirt.engine.core.common.businessentities.event_subscriber o2) { return new org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator().compare(o1.getevent_up_name(), o2.getevent_up_name()); } }); <END_MOD>getTable().addColumn(eventNameColumn, constants.eventNameEventNotifier()); getTable().addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.core.common.businessentities.event_subscriber>(constants.manageEventsEventNotifier()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getManageEventsCommand(); } }); }
<START_MOD>private XmlNode getNode(org.ovirt.engine.core.compat.backendcompat.XmlNodeList nodeList, java.lang.String attributeName, java.lang.String attributeValue) { for (XmlNode section : nodeList) { java.lang.String value = section.Attributes.get(attributeName).getValue(); if (value.equals(attributeValue)) { return section; } } return null; }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.api.model.Statistic> getStatistics(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface) { org.ovirt.engine.core.common.businessentities.network.NetworkStatistics s = iface.getStatistics(); return asList(setDatum(clone(org.ovirt.engine.api.restapi.resource.NicStatisticalQuery.DATA_RX), <START_MOD>org.ovirt.engine.api.restapi.util.RxTxCalculator.calcRxTx(iface.getSpeed(), <END_MOD>s.getReceiveRate())<START_MOD>)<END_MOD>, setDatum(clone(org.ovirt.engine.api.restapi.resource.NicStatisticalQuery.DATA_TX), <START_MOD>org.ovirt.engine.api.restapi.util.RxTxCalculator.calcRxTx(iface.getSpeed(), <END_MOD>s.getTransmitRate())<START_MOD>)<END_MOD>, setDatum(clone(org.ovirt.engine.api.restapi.resource.NicStatisticalQuery.ERRS_RX), s.getReceiveDropRate()), setDatum(clone(org.ovirt.engine.api.restapi.resource.NicStatisticalQuery.ERRS_TX), s.getTransmitDropRate())); }
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.EntityModel getPromisc() { return privatePromisc; }<END_MOD>
private void propagateInternalCommandFailure(org.ovirt.engine.core.common.action.VdcReturnValueBase internalReturnValue) { org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getReturnValue().getExecuteFailedMessages().clear(); org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getReturnValue().getExecuteFailedMessages().addAll(internalReturnValue.getExecuteFailedMessages()); org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getReturnValue().setFault(internalReturnValue.getFault()); org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().clear(); org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().addAll(internalReturnValue.<START_MOD>getValidateMessages()); org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getReturnValue().setValidate(internalReturnValue.getValidate<END_MOD>()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainStatic> getAllForStoragePool(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeReadList("Getstorage_domain_staticBystorage_pool_id", org.ovirt.engine.core.dao.<START_MOD>StorageDomainStaticDAOImpl<END_MOD>.StorageDomainStaticRowMapper.instance, getStoragePoolIdParameterSource(id)); }
public int removeByVdsmTaskId(final org.ovirt.engine.core.compat.Guid vdsmTaskId) { return org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Integer>() { @java.lang.Override public java.lang.Integer runInTransaction() { org.ovirt.engine.core.common.businessentities.AsyncTask asyncTask = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAsyncTaskDao().getByVdsmTaskId(vdsmTaskId); int retVal = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAsyncTaskDao().removeByVdsmTaskId(vdsmTaskId); if ((asyncTask != null) && (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(asyncTask.getCommandId())))) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = coco.getCommandEntity(asyncTask.getCommandId()); <START_MOD>org.ovirt.engine.core.common.businessentities.CommandEntity parentEntity = coco.getCommandEntity(asyncTask.getRootCommandId()); <END_MOD>if ((<START_MOD>(<END_MOD>cmdEntity != null) && (!(cmdEntity.isCallBackEnabled()))) <START_MOD>&& ((parentEntity == null) || (!(parentEntity.isCallBackEnabled())))) <END_MOD>{ coco.removeCommand(asyncTask.getCommandId()); if (!(coco.hasCommandEntitiesWithRootCommandId(asyncTask.getRootCommandId()))) { coco.removeCommand(asyncTask.getRootCommandId()); } } } return retVal; } }); }
public void setStatus(org.ovirt.engine.core.compat.Guid clusterId, final java.util.Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks) { <START_MOD>for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster<END_MOD> = <START_MOD>networkClusterDao.get(<END_MOD>new org.ovirt.engine.core.<START_MOD>common.businessentities.network.NetworkClusterId<END_MOD>(clusterId<START_MOD>, network.getId())); boolean doUpdateNetworkClusterStatus<END_MOD> = <START_MOD>networkCluster != null; if (<END_MOD>doUpdateNetworkClusterStatus<START_MOD>) {<END_MOD> if (networkCluster.isRequired()) { <START_MOD>updateStatusOfRequiredNetworkCluster<END_MOD>(networkCluster, network.getName()); } else { updateNetworkClusterStatus(networkCluster, NetworkStatus.OPERATIONAL); } } } }
private org.ovirt.engine.core.common.businessentities.network.Network <START_MOD>getOldNetwork<END_MOD>() { if ((<START_MOD>oldNetwork<END_MOD>) <START_MOD>==<END_MOD> <START_MOD>null<END_MOD>) { <START_MOD>oldNetwork<END_MOD> <START_MOD>= getNetworkById(getNetworks())<END_MOD>; } return <START_MOD>oldNetwork<END_MOD>; }
private void validate() { }
<START_MOD>@java.lang.Override public java.lang.String getValue(java.lang.Object object) { return java.lang.String.valueOf(((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm().getArchitecture()); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.notifier.filter.Event getEvent() { return event; }<END_MOD>
@javax.annotation.PostConstruct public void initialize() { org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info( initializing {} getClass().getSimpleName()); succeededJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SucceededJobCleanupTimeInMinutes); failedJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.FailedJobCleanupTimeInMinutes); java.lang.Integer cleanupFrequency = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.JobCleanupRateInMinutes); <START_MOD>executor.scheduleWithFixedDelay(() -> cleanCompletedJob()<END_MOD>, cleanupFrequency, cleanupFrequency, java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info( initializing {} getClass().getSimpleName()); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("refreshGlusterServices") public void refreshGlusterServices() { if (getServiceNameMap().isEmpty()) { populateServiceMap(); } java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = getClusterDao().getAll(); for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters) { if (supportsGlusterServicesFeature(cluster)) { try { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> serversList = getClusterUtils().getAllServers(cluster.getId()); if (serversList.isEmpty()) { java.util.Map<org.ovirt.engine.core.common.businessentities.gluster.ServiceType, org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus> statusMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.gluster.ServiceType type : getClusterServiceMap(cluster).keySet()) { statusMap.put(type, GlusterServiceStatus.UNKNOWN); } addOrUpdateClusterServices(cluster, statusMap); } else { java.util.List<java.util.concurrent.Callable<java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus>>> taskList = createTaskList(serversList); if ((taskList != null) && ((taskList.size()) > 0)) { refreshClusterServices(cluster, org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.invokeAll(taskList)); } } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.gluster.GlusterServiceSyncJob.log.<START_MOD>error<END_MOD>( while refreshing service statuses of cluster <START_MOD>'{}'<END_MOD>! cluster.getName()<START_MOD>); org.ovirt.engine.core.bll.gluster.GlusterServiceSyncJob.log.error("Exception"<END_MOD>, e); } } } }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(vmDynamic, vmGuestAgentInterfaces, vmStatistics, lunsMap, interfaceStatistics, vNumaNodeStatisticsList<START_MOD>, diskStatistics<END_MOD>); }
<START_MOD>@java.lang.Override protected java.lang.String getText(org.ovirt.engine.core.common.businessentities.gluster.FopStats entity) { return (entity.getMinLatency()) + ""; }<END_MOD>
private void onSaveConfirmCV(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model) { if (!(model.getVersion().getSelectedItem().equals(<START_MOD>org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.<END_MOD>getSelectedItem().getcompatibility_version()))) { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().changeClusterCompatibilityVersionTitle()); confirmModel.setHelpTag(HelpTag.change_cluster_compatibility_version); confirmModel.setHashName("change_cluster_compatibility_version"); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSaveConfirmCpuThreads", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); <START_MOD>org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.<END_MOD>getConfirmWindow().getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); <START_MOD>org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterListModel.<END_MOD>getConfirmWindow().getCommands().add(tempVar2); checkForNonResponsiveHosts(confirmModel); } else { onSaveConfirmCpuThreads(); } }
<START_MOD>public static void GetGlusterHosts(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, java.lang.String hostAddress, java.lang.String rootPassword) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetGlusterHosts, new org.ovirt.engine.core.common.queries.gluster.GlusterHostQueryParameters(hostAddress, rootPassword), aQuery); }<END_MOD>
@org.junit.Test public void testAlreadyExistStorageDomain() { when(command.getStorageDomainStaticDao().get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.storage<START_MOD>.domains<END_MOD>.AddExistingBlockStorageDomainCommandTest.getStorageDomain()); assertFalse( Domain already exists command.canAddDomain()); assertTrue( block Storage Domain should have failed due to already existing Storage Domain command.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST.toString())); }
public org.ovirt.engine.core.bll.ValidationResult networkNotChanged() { if (org.apache.commons.lang.ObjectUtils.equals(vnicProfile.getNetworkId(), getOldVnicProfile().getNetworkId())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_CANNOT_CHANGE_VNIC_PROFILE_NETWORK); }
private org.ovirt.engine.core.common.scheduling.PolicyUnit createFromDiscoveryUnit(org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryUnit discoveryUnit, org.ovirt.engine.core.common.scheduling.PolicyUnitType type) { org.ovirt.engine.core.common.scheduling.PolicyUnit policy = new org.ovirt.engine.core.common.scheduling.PolicyUnit(); policy.setInternal(false); policy.setName(discoveryUnit.getName()); policy.setPolicyUnitType(type<START_MOD>); policy.setDescription(discoveryUnit.getDescription()<END_MOD>); if (!(org.apache.commons.lang.StringUtils.isBlank(discoveryUnit.getRegex()))) { policy.setParameterRegExMap(org.ovirt.engine.core.utils.customprop.SimpleCustomPropertiesUtil.getInstance().convertProperties(discoveryUnit.getRegex())); } else { policy.setParameterRegExMap(new java.util.HashMap<java.lang.String, java.lang.String>()); } return policy; }
private void createSyncNetworkParameters(java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters, java.util.Collection<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { java.util.Set<org.ovirt.engine.core.compat.Guid> hostIdsToSync = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = networkImplementationDetailsUtils.calculateNetworkImplementationDetails(nic, org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.SyncNetworkParametersBuilder.getNetwork()); boolean networkShouldBeSynced = (networkImplementationDetails != null) && (!(networkImplementationDetails.isInSync())); if (networkShouldBeSynced) { hostIdsToSync.add(nic.getVdsId()); } } for (org.ovirt.engine.core.compat.Guid hostId : hostIdsToSync) { org.ovirt.engine.core.common.action.PersistentHostSetupNetworksParameters setupNetworkParams = createHostSetupNetworksParameters(hostId); setupNetworkParams.setNetworkNames(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.SyncNetworkParametersBuilder.getNetworkName()); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = <START_MOD>getNetworkIdToAttachmentMap<END_MOD>(hostId).get(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.SyncNetworkParametersBuilder.getNetwork().getId()); attachment.setOverrideConfiguration(true); setupNetworkParams.getNetworkAttachments().add(attachment); parameters.add(setupNetworkParams); } }
public org.ovirt.engine.core.bll.ValidationResult interfaceInHost(org.ovirt.engine.core.compat.Guid hostId) { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.NIC_NOT_EXISTS_ON_HOST).when((!(iface.getVdsId().equals(hostId)))); }
@org.junit.Test public void canDoActionFailedVMHasNotDisk() throws java.lang.Exception { initializeCommand(createParameters()); createNullDisk(); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_NOT_EXIST); }
<START_MOD>public void setIncludeSeverHooks(boolean includeSeverHooks) { this.includeSeverHooks = includeSeverHooks; }<END_MOD>
<START_MOD>public static void isClusterHasAnyUpHost(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, java.lang.String clusterName) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if ((source != null) && ((((java.util.List) (source)).size()) > 0)) { return true; } return false; } }; org.ovirt.engine.core.common.queries.SearchParameters searchParameters = new org.ovirt.engine.core.common.queries.SearchParameters((("Host: cluster = " + clusterName) + " and status = Up"), org.ovirt.engine.core.common.interfaces.SearchType.VDS); searchParameters.setMaxCount(1); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.Search, searchParameters, aQuery); }<END_MOD>
@org.ovirt.engine.ui.frontend.DefaultStringValue( ${action} ${type}. <START_MOD>${interface}<END_MOD> <START_MOD>disks<END_MOD> can be read-only java.lang.String <START_MOD>ACTION_TYPE_FAILED_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR<END_MOD>();
public static org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskToModel(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = new org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel(); diskModel.getAlias().setEntity(disk.getDiskAlias()); if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)); org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Integer> sizeEntity = new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Integer>(); sizeEntity.setEntity(((int) (diskImage.getSizeInGigabytes()))); diskModel.setSize(sizeEntity); org.ovirt.engine.ui.uicommonweb.models.ListModel volumeList = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); volumeList.setItems(((diskImage.getVolumeType()) == (org.ovirt.engine.core.common.businessentities.VolumeType.Preallocated) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VolumeType>(java.util.Arrays.asList(new org.ovirt.engine.core.common.businessentities.VolumeType[]{ org.ovirt.engine.core.common.businessentities.VolumeType.Preallocated })) : org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVolumeTypeList())); volumeList.setSelectedItem(diskImage.getVolumeType()); diskModel.setVolumeType(volumeList); } diskModel.setDisk(disk); return diskModel; }
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult settingSpecificNetworksAllowed() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_SET_SPECIFIC_NETWORKS, getNicNameReplacement()).when(getOldVfsConfig().isAllNetworksAllowed()); }<END_MOD>
<START_MOD>@org.junit.Test public void testGetLocalesKeysUnSupported() { returnValue.setReturnValue("ko_KR"); java.util.List<java.lang.String> locales = org.ovirt.engine.core.utils.servlet.UnsupportedLocaleHelper.getLocalesKeys(mockBackend, ConfigurationValues.UnsupportedLocalesFilter); assertNotNull("Result should not be null", locales); assertEquals("There should be 1 locales", 1, locales.size()); assertEquals("Locale should be ko_KR", "ko_KR", locales.get(0)); }<END_MOD>
<START_MOD>public java.lang.Integer getTemplateVersion() { return vmStatic.getTemplateVersion(); }<END_MOD>
<START_MOD>@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (target)); model.setDataCentersAndClusters(model, dataCenters, ((java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup>) (returnValue)), null); InitTemplate(); InitCdImage(); getPoolModelBehaviorInitializedEvent().raise(this, EventArgs.Empty); }<END_MOD>
@org.junit.Test public void testSave() { org.ovirt.engine.core.common.businessentities.storage.DiskImage newImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); newImage.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); newImage.setVolumeFormat(VolumeFormat.COW<START_MOD>); newImage.setQcowComapt(QcowCompat.QCOW2_V3<END_MOD>); newImage.setVolumeType(VolumeType.Sparse); newImage.setActive(true); newImage.setImageTemplateId(org.ovirt.engine.core.dao.DiskImageDynamicDaoTest.EXISTING_IMAGE_DISK_TEMPLATE); newImage.setId(org.ovirt.engine.core.compat.Guid.newGuid()); imageDao.save(newImage.getImage()); diskDao.save(newImage); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic dynamic = createDiskImageDynamic(newImage.getImageId()); dao.save(createDiskImageDynamic(newImage.getImageId())); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic result = dao.get(dynamic.getId()); assertNotNull(result); assertEquals(dynamic, result); }
@java.lang.Override public org.ovirt.engine.api.model.Templates list() { <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> entities; <END_MOD>if (isFiltered()) <START_MOD>{<END_MOD> <START_MOD>entities = <END_MOD>getBackendCollection(VdcQueryType.GetAllVmTemplates, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase());<START_MOD> }<END_MOD> else <START_MOD>{<END_MOD> <START_MOD>entities = <END_MOD>getBackendCollection(SearchType.VmTemplate)<START_MOD>; } return mapCollection(entities<END_MOD>); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.Network incoming, org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> entity) { org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> updated = getMapper(modelType, org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>.class).map(incoming, entity); return new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(entity.getstorage_pool_id().getValue(), updated); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getVmNetworkInterfaceDao(); vmDevicesDao = dbFacade.getVmDeviceDao(); StatsDao = dbFacade.getVmNetworkStatisticsDao(); existingVmInterface = dao.get(FixturesTool.VM_NETWORK_INTERFACE); existingTemplateInterface = dao.get(FixturesTool.TEMPLATE_NETWORK_INTERFACE); newVmInterface = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); newVmInterface.setStatistics(new org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics()); newVmInterface.setId(org.ovirt.engine.core.compat.Guid.NewGuid()); newVmInterface.setName("eth77"); newVmInterface.setNetworkName("enginet"); newVmInterface.setLinked(true); newVmInterface.setSpeed(1000); newVmInterface.setType(3); newVmInterface.setMacAddress("01:C0:81:21:71:17"); newVmDevice.setType(VmDeviceGeneralType.INTERFACE); newVmDevice.setDevice("bridge"); newVmDevice.setAddress("sample"); newVmDevice.setBootOrder(1); newVmDevice.setIsManaged(true); newVmDevice.setIsPlugged(true); newVmDevice.setIsReadOnly(false); <START_MOD>newVmDevice.setCustomProperties("prop1=val1"); <END_MOD>}
@java.lang.Override protected void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?<START_MOD>, ?, ?<END_MOD>> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<<START_MOD>?, ?, <END_MOD>?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params) { assert (op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) && (!(op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel)); assert (op2 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) && (!(op2 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel)); assert (params.length) == 1 :   params length org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic1 = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op1)); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic2 = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op2)); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.clearNetworks(nic1, allNics); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.clearNetworks(nic2, allNics); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = ((org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface) (params[0])); java.lang.String bondName = bond.getName(); allNics.add(bond); nic1.getEntity().setBondName(bondName); nic2.getEntity().setBondName(bondName); }
@java.lang.Override protected org.ovirt.engine.ui.common.widget.table.SimpleActionTable<org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel> createActionTable() { return new org.ovirt.engine.ui.userportal.widget.table.column.UserPortalSimpleActionTable<org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel>(modelProvider, getTableResources(), org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.instance().getEventBus(), <START_MOD>org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.instance().getClientStorage(), <END_MOD>new org.ovirt.engine.ui.userportal.widget.refresh.UserPortalRefreshManager(modelProvider, org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.instance().getEventBus(), org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.instance().getClientStorage())); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Center Re-Initialize java.lang.String dataCenterReInitializeTitle();
public org.ovirt.engine.core.bll.ValidationResult hasSpaceForAllDisks(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> newDiskImages, java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> clonedDiskImages) { <START_MOD>if ((storageDomain.getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.CINDER)) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } <END_MOD>java.lang.Long availableSize = storageDomain.getAvailableDiskSizeInBytes(); double totalSizeForNewDisks = getTotalSizeForNewDisks(newDiskImages); double totalSizeForClonedDisks = getTotalSizeForClonedDisks(clonedDiskImages); double totalSizeForDisks = totalSizeForNewDisks + totalSizeForClonedDisks; return validateRequiredSpace(availableSize, totalSizeForDisks); }
public java.util.List<org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>> getErrorMessages() { return errorMessages; }
public static org.ovirt.engine.api.v3.types.V3VM addDisksLink(org.ovirt.engine.api.v3.types.V3VM vm) { if (vm == null) { return null; } <START_MOD>java.lang.StringBuilder href = org.ovirt.engine.api.v3.helpers.V3LinkHelper.linkBuffer(); <END_MOD>org.ovirt.engine.api.restapi.invocation.Current current = org.ovirt.engine.api.restapi.invocation.CurrentManager.get(); <START_MOD>href.append(current.getPath()); if (!(current.getPath().contains(vm.getId()))) { href.append(vm.getId()); } href.append("/disks"); org.ovirt.engine.api.v3.types.V3Link link<END_MOD> = new <START_MOD>org.ovirt.engine.api.v3.types.V3Link(); link.setRel("disks"); link.setHref(href.toString()); vm.getLinks().add(link); return vm<END_MOD>; }
@java.lang.Override public org.ovirt.engine.core.bll.provider.ProviderValidator getProviderValidator() { return new org.ovirt.engine.core.bll.provider.ProviderValidator(provider) { @java.lang.Override public org.ovirt.engine.core.bll.ValidationResult validateAddProvider() { org.ovirt.engine.core.common.businessentities.VmwareVmProviderProperties properties = org.ovirt.engine.core.bll.provider.vms.VmwareVmProviderProxy.this.provider.getAdditionalProperties(); org.ovirt.engine.core.compat.Guid proxyHostId = properties.getProxyHostId(); if (proxyHostId != null) { org.ovirt.engine.core.common.businessentities.VDS proxyHost = getVdsDao().get(proxyHostId); if (proxyHost == null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.VDS_DOES_NOT_EXIST); } if (!(proxyHost.getStoragePoolId().equals(properties.getStoragePoolId()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VDS_NOT_IN_DEST_STORAGE_POOL); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; } private org.ovirt.engine.core.dao.VdsDao getVdsDao() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao(); } }; }
protected boolean formatStorage(org.ovirt.engine.core.common.businessentities.StorageDomain dom, org.ovirt.engine.core.common.businessentities.VDS vds) { <START_MOD>org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = getVdsBroker().RunVdsCommand(VDSCommandType.FormatStorageDomain, new org.ovirt.engine.core.common.vdscommands.FormatStorageDomainVDSCommandParameters(vds.getId(), dom.getId())); if ((org.ovirt.engine.core.common.errors.VdcBllErrors.StorageDomainDoesNotExist) == (vdsReturnValue.getVdsError().getCode())) { log.warnFormat( Domain {0} which was about to be formatted is not exists in VDS id {1} vds.getId(), dom.getId()); <END_MOD>return <START_MOD>true; } return vdsReturnValue<END_MOD>.getSucceeded(); }
private void localize(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { dataCenterEditor.setLabel(constants.dataCenterVolume()); clusterEditor.setLabel(constants.volumeClusterVolume()); nameEditor.setLabel(constants.clusterPopupNameLabel()); typeListEditor.setLabel(constants.typeVolume()); replicaCountEditor.setLabel(constants.replicaCountVolume()); stripeCountEditor.setLabel(constants.stripeCountVolume()); transportTypesLabel.setText(constants.transportTypeVolume()); tcpTransportTypeEditor.setLabel(constants.tcpVolume()); rdmaTransportTypeEditor.setLabel(constants.rdmaVolume()); bricksLabel.setText(constants.bricksVolume()); addBricksButton.setLabel(constants.addBricksVolume()); accessProtocolsLabel.setText(constants.accessProtocolsVolume()); gluster_accecssProtocolEditor.setLabel(constants.glusterVolume()); nfs_accecssProtocolEditor.setLabel(constants.nfsVolume()); cifs_accecssProtocolEditor.setLabel(constants.cifsVolume()); allowAccessEditor.setLabel(constants.allowAccessFromVolume()); allowAccessLabel.setText(constants.allowAccessFromLabelVolume()); <START_MOD>optmizeForVirtEditor.setLabel(constants.optimizeForVirtStoreVolume()); <END_MOD>}
<START_MOD>private static org.ovirt.engine.core.common.businessentities.storage.DiskVmElement buildDiskVmElementWithDiskInterfaceFromExternalProvider(java.util.Map<java.lang.String, java.lang.Object> map, org.ovirt.engine.core.common.businessentities.storage.DiskImage image, org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(image.getId(), vmId); java.lang.String diskDevName = ((java.lang.String) (map.get(VdsProperties.DISK_TARGET_DEV_NAME))); diskDevName = ((diskDevName == null) || ((diskDevName.length()) < 3)) ? "" : diskDevName.substring(0, 2); switch (diskDevName) { case "sd" : dve.setDiskInterface(DiskInterface.VirtIO_SCSI); break; case "hd" : dve.setDiskInterface(DiskInterface.IDE); break; case "vd" : default : dve.setDiskInterface(DiskInterface.VirtIO); break; } return dve; }<END_MOD>
private void processImages(final boolean useCopyImages) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmImagesAndSnapshots(); addMemoryImages(); updateSnapshotsFromExport(); if (useCopyImages) { moveOrCopyAllImageGroups(); } <START_MOD>vmDeviceUtils<END_MOD>.addImportedDevices(getVm().getStaticData(), getParameters().isImportAsNewEntity()); if (getParameters().isImportAsNewEntity()) { getParameters().setVm(getVm()); setVmId(getVm().getId()); } return null; }); }
org.ovirt.engine.ui.common.widget.action.ActionButton addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef<START_MOD>, int order<END_MOD>);
<START_MOD>@org.junit.Test public void testValidateBondOptionsForNewAttachementExistingBond() { validateBondOptionsForNewAttachement(Guid.Empty, EngineMessage.NETWORK_ATTACHMENT_INVALID_BONDMODE, false); }<END_MOD>
@java.lang.Override protected void EndSuccessfully() { org.ovirt.engine.core.<START_MOD>common.businessentities.VM vm = org.ovirt.engine.core.bll.ExportVmCommand.getVm<END_MOD>(); if (<START_MOD>vm<END_MOD> != null) { org.ovirt.engine.core.bll.VmHandler.UnLockVm(vm.getId()); <START_MOD>endDiskRelatedActions(vm<END_MOD>); if (org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getCopyCollapse()) { <START_MOD>this.endCopyCollapseOps(vm); } else { this.endDefaultOps(vm); } org.ovirt.engine.core.bll.ExportVmCommand.setSucceeded(true); } else { org.ovirt.engine.core.bll.ExportVmCommand.setCommandShouldBeLogged(false); log.warn( Vm is <END_MOD>null - not performing full EndAction } <START_MOD>}<END_MOD>
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepStatus(java.lang.String volumeName) { try { java.util.Map<java.lang.String, java.lang.Object> response; response = vdsServer.<START_MOD>glusterVolumeGeoRepSessionList<END_MOD>(volumeName); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc(response); } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.compat.Guid> getAsyncTaskIdsByUser(org.ovirt.engine.core.compat.Guid userId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("user_id", userId); return getCallsHandler().executeReadList("GetAsyncTasksIdsByUserId", org.ovirt.engine.core.dao.<START_MOD>AsyncTaskDAOImpl<END_MOD>.IdRowMapper.instance, parameterSource); }
public java.lang.String scheduleACronJob(java.lang.Object instance, java.lang.String methodName, java.lang.Class<?>[] inputTypes, java.lang.Object[] inputParams, java.lang.String cronExpression, java.util.Date startAt, java.util.Date endBy) <START_MOD>throws java.lang.Exception <END_MOD>{ org.quartz.JobDetail job = createJobWithBasicMapValues(instance, methodName, inputTypes, inputParams); try { java.lang.String triggerName = generateUniqueNameForInstance(instance, org.ovirt.engine.core.utils.timer.SchedulerUtilBaseImpl.TRIGGER_PREFIX); org.quartz.Trigger trigger = newTrigger().withIdentity(triggerName, Scheduler.DEFAULT_GROUP).withSchedule(cronSchedule(cronExpression)).startAt(startAt).endAt(endBy).build(); sched.scheduleJob(job, trigger); } catch (java.lang.Exception se) { log.error( to schedule job: {} se.getMessage()); log.debug("Exception", se); <START_MOD>throw se; } <END_MOD>return job.getKey().getName(); }
<START_MOD>private void logNoDeviceToHotUnplug(java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmMemoryDevices) { final org.ovirt.engine.core.common.AuditLogType message = (vmMemoryDevices.isEmpty()) ? org.ovirt.engine.core.common.AuditLogType.NO_MEMORY_DEVICE_TO_HOT_UNPLUG : org.ovirt.engine.core.common.AuditLogType.NO_SUITABLE_MEMORY_DEVICE_TO_HOT_UNPLUG; if (!(vmMemoryDevices.isEmpty())) { final int originalMemoryMb = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getMemSizeMb(); org.ovirt.engine.core.bll.UpdateVmCommand.addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_OLD_MEMORY_MB, java.lang.String.valueOf(originalMemoryMb)); addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_NEW_MEMORY_MB, java.lang.String.valueOf(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm().getMemSizeMb())); final java.lang.String unplugOptions = vmMemoryDevices.stream().filter(VmDeviceCommonUtils::isMemoryDeviceHotUnpluggable).map(( device) -> org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getSizeOfMemoryDeviceMb(device).get()).map(( deviceSize) -> java.lang.String.format("%dMB (%dMB)", deviceSize, memoryAfterHotUnplug(originalMemoryMb, deviceSize))).collect(java.util.stream.Collectors.joining(", ")); org.ovirt.engine.core.bll.UpdateVmCommand.addCustomValue(org.ovirt.engine.core.bll.UpdateVmCommand.AUDIT_LOG_MEMORY_HOT_UNPLUG_OPTIONS, unplugOptions); } auditLogDirector.log(this, message); }<END_MOD>
protected boolean checkStoragePool() { if ((org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool()) == null) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST); return false; } return true; }
<START_MOD>@org.junit.Test public void jsonInvalidJson() throws java.io.IOException { provider.initMigrationPolicies("this is not a valid json"); org.ovirt.engine.core.bll.migration.MigrationPolicy policy = provider.getMigrationPolicy(org.ovirt.engine.core.compat.Guid.newGuid()); assertNull(policy); }<END_MOD>
private javax.ws.rs.core.Response addDomain(org.ovirt.engine.core.common.action.VdcActionType action, org.ovirt.engine.api.model.StorageDomain model, org.ovirt.engine.core.common.businessentities.StorageDomainStatic entity, org.ovirt.engine.core.compat.Guid hostId, org.ovirt.engine.core.common.businessentities.StorageServerConnections connection) { javax.ws.rs.core.Response response = null; boolean isConnNew = false; <START_MOD>entity.setStorage(connection.getid()); <END_MOD>if ((<START_MOD>(action == (org.ovirt.engine.core.common.action.VdcActionType.AddNFSStorageDomain)) || (action == (org.ovirt.engine.core.common.action.VdcActionType.AddPosixFsStorageDomain))) || (action == (org.ovirt.engine.core.common.action.VdcActionType.AddGlusterFsStorageDomain))) { org.ovirt.engine.core.common.businessentities.StorageDomain existing = getExistingStorageDomain(hostId, entity.getStorageType(), entity.getStorageDomainType(), connection); if (existing != null) { org.ovirt.engine.api.restapi.types.StorageDomainMapper.map(model, existing.getStorageStaticData()); entity = existing.getStorageStaticData(); action = org.ovirt.engine.core.common.action.VdcActionType.AddExistingFileStorageDomain; } } if (action != (org.ovirt.engine.core.common.action.VdcActionType.AddExistingFileStorageDomain)) { validateParameters(model, 2, "name"); } if ((<END_MOD>connection.getstorage_type().isFileDomain()) && (org.apache.commons.lang.StringUtils.isEmpty(connection.getid()))) { isConnNew = true; connection.setid(addStorageServerConnection(connection, hostId)); } <START_MOD>try { response = performCreate(action, getAddParams(<END_MOD>entity<START_MOD>, hostId), ID_RESOLVER); } catch (org.ovirt.engine.api.restapi.resource.WebFaultException e) {<END_MOD> if (<START_MOD>isConnNew) { removeStorageServerConnection(connection, <END_MOD>hostId<START_MOD>); } throw e; } return<END_MOD> response<START_MOD>; }<END_MOD>
<START_MOD>@org.junit.Test public void testRangeStartAndRangeStopAreInclusive() throws java.lang.Exception { assertThat(new org.ovirt.engine.core.bll.network.Range(org.ovirt.engine.core.bll.network.RangeTest.MAC_FROM_RANGE, org.ovirt.engine.core.bll.network.RangeTest.MAC_FROM_RANGE).getAvailableCount(), is(1)); }<END_MOD>
private void removeHostedEngineLunDisk() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.BaseDisk> disks = org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.getDbFacade().getBaseDiskDao().getDisksByAlias(StorageConstants.HOSTED_ENGINE_LUN_DISK_ALIAS); if ((disks != null) && (!(disks.isEmpty()))) { org.ovirt.engine.core.common.businessentities.storage.BaseDisk heDirectLun = disks.get(0); org.ovirt.engine.core.common.action.VdcReturnValueBase removeDisk = org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.getBackend().runInternalAction(VdcActionType.RemoveDisk, new org.ovirt.engine.core.common.action.RemoveDiskParameters(heDirectLun.getId())); if (!(removeDisk.getSucceeded())) { <START_MOD>log.error( to remove the hosted engine direct lun disk } <END_MOD>setSucceeded(<START_MOD>removeDisk.getSucceeded());<END_MOD> } }
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultStringValue("Permissive") java.lang.String permissive();<END_MOD>
private java.<START_MOD>lang.Iterable<org.ovirt.engine.core.common.businessentities.VDSGroup> findMigrationFreeClusters() { final java.<END_MOD>util.List<org.ovirt.engine.core.<START_MOD>common.businessentities.VmDynamic> migratingVms = vmDynamicDao.getAllByStatus(VMStatus.MigratingFrom); final java.util.Map<org.ovirt.engine.core.<END_MOD>compat.Guid<START_MOD>, org.ovirt.engine.core.common.businessentities.VDSGroup> allClusters = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : vdsGroupDao.getAll()<END_MOD>) { <START_MOD>allClusters.put(cluster.getId(), cluster); }<END_MOD> for (org.ovirt.engine.core.common.businessentities.<START_MOD>VmDynamic vmDynamic<END_MOD> : <START_MOD>migratingVms<END_MOD>) { <START_MOD>allClusters.remove(vmDynamic.getMigratingToVds()); allClusters.remove(vmDynamic.getRunOnVds<END_MOD>()); } return <START_MOD>allClusters.values()<END_MOD>; }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("refreshHeavyWeightData") public void refreshHeavyWeightData() { log.debug( Gluster Data [heavyweight] for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : getClusterDao().getAll()) { if ((org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.refreshHeavyWeight(cluster.getcompatibility_version())) && (cluster.supportsGlusterService())) { try { refreshClusterHeavyWeightData(cluster); } catch (java.lang.Exception e) { log.<START_MOD>error<END_MOD>( while refreshing Gluster heavyweight data of cluster <START_MOD>'{}'<END_MOD>! cluster.getName()<START_MOD>); log.error("Exception"<END_MOD>, e); } } } }
public void updateCpuSharesSelection() { boolean foundEnum = false; for (org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.CpuSharesAmount cpuSharesAmount : UnitVmModel.CpuSharesAmount.values()) { if ((cpuSharesAmount.getValue()) == (getModel().getCpuSharesAmount().getEntity())) { getModel().getCpuSharesAmountSelection().setSelectedItem(cpuSharesAmount); foundEnum = true; break; } } if (!foundEnum) { int currentVal = java.lang.Integer.parseInt(getModel().getCpuSharesAmount().getEntity().toString()); getModel().getCpuSharesAmountSelection().setSelectedItem(UnitVmModel.CpuSharesAmount.CUSTOM); getModel().getCpuSharesAmount().setEntity(currentVal); } }
public static synchronized java.lang.String[] getLinksToExclude(org.ovirt.engine.api.model.StorageDomain storageDomain) { return org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.isIsoDomain(storageDomain) ? new java.lang.String[]{ "templates", "vms", "disks", "images" } : org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.isExportDomain(storageDomain) ? new java.lang.String[]{ "files", "images" } : org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.isImageDomain(storageDomain) ? new java.lang.String[]{ "templates", "vms", "files", "disks", "storageconnections" } : new java.lang.String[]{ "templates", "files", "images" }; }
public void setActualSizeFromDiskImage(long size) { actualSizeFromDiskImageDynamic = size; setActualSize((((<START_MOD>getActualSizeInBytes<END_MOD>()) * 1.0) / ((1024 * 1024) * 1024))); }
private java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.Integer>> getAllNumaNodeCpuMap() { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> numaNodesCpus = getCallsHandler().executeReadList("GetAllFromNumaNodeCpuMap", org.ovirt.engine.core.dao.<START_MOD>VmNumaNodeDAOImpl<END_MOD>.vmNumaNodeCpusRowMapper, null); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.Integer>> numaNodesCpusMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer> pair : numaNodesCpus) { if (!(numaNodesCpusMap.containsKey(pair.getFirst()))) { numaNodesCpusMap.put(pair.getFirst(), new java.util.ArrayList<java.lang.Integer>()); } numaNodesCpusMap.get(pair.getFirst()).add(pair.getSecond()); } return numaNodesCpusMap; }
private static void updateCommonInterfaceData(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.VDS vds, java.util.Map.Entry<java.lang.String, java.lang.Object> entry) { iface.setName(entry.getKey()); iface.setId(org.ovirt.engine.core.compat.Guid.newGuid()); iface.setVdsId(vds.getId()); org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics iStats = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics(); iStats.setId(iface.getId()); iStats.setVdsId(vds.getId()); iface.setStatistics(iStats); java.util.Map<java.lang.String, java.lang.Object> nic = ((java.util.Map<java.lang.String, java.lang.Object>) (entry.getValue())); if (nic != null) { iface.setAddress(<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractAddress(nic<END_MOD>)); iface.setSubnet(<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.extractSubnet(nic<END_MOD>)); java.lang.String mtu = ((java.lang.String) (nic.get(VdsProperties.MTU))); if (org.apache.commons.lang.StringUtils.isNotBlank(mtu)) { iface.setMtu(java.lang.Integer.parseInt(mtu)); } org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.addBootProtocol(((java.util.Map<java.lang.String, java.lang.Object>) (nic.get("cfg"))), vds, iface); } }
@java.lang.Override protected boolean canDoAction() { if ((getNic()) == null) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.HOST_NETWORK_INTERFACE_NOT_EXIST); } if ((!(org.ovirt.engine.core.utils.NetworkUtils.isLabeled(getNic()))) || (!(getNic().getLabels().contains(getLabel())))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.INTERFACE_NOT_LABELED); } return true; }
<START_MOD>@org.junit.Test public void testBondNotUpdatedAndRemovedSimultaneouslyNotValid() { org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(org.ovirt.engine.core.common.action.CreateOrUpdateBond.fromBond(bond)).addRemovedBonds(bond.getId()).build(); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(params).build(); org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.BOND_UPDATED_AND_REMOVED_SIMULTANEOUSLY; assertThat(validator.bondNotUpdatedAndRemovedSimultaneously(), failsWith(engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getListVariableAssignmentString(engineMessage, java.util.Collections.singletonList(bond.getName())))); }<END_MOD>
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnaValue = runVdsCommand(VDSCommandType.StopRebalanceGlusterVolume, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters(upServer.getId(), getGlusterVolumeName())); if (!(vdsReturnaValue.getSucceeded())) { handleVdsError(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP_FAILED, vdsReturnaValue.getVdsError().getMessage()); setSucceeded(false); return; } <START_MOD>org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity rebalanceStatusEntity = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity) (vdsReturnaValue.getReturnValue())); org.ovirt.engine.core.common.job.JobExecutionStatus stepStatus = rebalanceStatusEntity.getStatusSummary().getStatus(); if (JobExecutionStatus.FINISHED.equals(stepStatus)) { endStepJob(stepStatus, getStepMessageMap(stepStatus), true); } else { endStepJob(stepStatus, getStepMessageMap(stepStatus), false); }<END_MOD> releaseVolumeLock(); setSucceeded(vdsReturnaValue.getSucceeded()); <START_MOD>getReturnValue().setActionReturnValue(rebalanceStatusEntity); }<END_MOD>
@java.lang.Override public void run() { <START_MOD>params.setShouldBeLogged(false); <END_MOD>getBackend().runInternalAction(VdcActionType.PersistentSetupNetworks, params); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Virtual Machine java.lang.String exportVirtualMachineTitle();
<START_MOD>@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = createSnapshotsValidator(); if ((!(validate(snapshotsValidator.snapshotExists(getSnapshot())))) || (!(validate(snapshotsValidator.vmNotDuringSnapshot(getSnapshot().getVmId()))))) { return false; } return super.canDoAction(); }<END_MOD>
<START_MOD>private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter() { return policyUnit.filter(java.util.Arrays.asList(hostWithCpus, hostWithoutCpus), vm, null, null); }<END_MOD>
<START_MOD>@org.junit.Test public void internalMovingToMaintenanceAllowed() { internalActionAllowed(StorageDomainStatus.MovingToMaintenance); }<END_MOD>
private void endCreateAllSnapshots() {<START_MOD> org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters snapshotsParameters = getCreateSnapshotParameters();<END_MOD> org.ovirt.engine.core.bll.Backend.getInstance().endAction(VdcActionType.CreateAllSnapshotsFromVm, <START_MOD>snapshotsParameters<END_MOD>, org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks(enclosingCommand.getExecutionContext())); <START_MOD>enclosingCommand.getParameters().setLiveSnapshotSucceeded(snapshotsParameters.getLiveSnapshotSucceeded()); <END_MOD>}
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.businessentities.MacPool flush() { getEntity().setName(getName().getEntity()); getEntity().setComment(getDescription().getEntity()); return super.flush(); }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult hasUniqueName() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NAME_ALREADY_USED).when((!(macPoolNameUnique()))); }
private void removeNetworkFromHosts() { org.ovirt.engine.core.bll.network.cluster.<START_MOD>NetworkHelper<END_MOD>.<START_MOD>removeNetworkFromHostsInCluster(getPersistedNetwork<END_MOD>()<START_MOD>, <END_MOD>org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand.getParameters().getVdsGroupId(), org.ovirt.engine.core.bll.network.<START_MOD>cluster<END_MOD>.<START_MOD>DetachNetworkToVdsGroupCommand<END_MOD>.<START_MOD>getContext<END_MOD>(), org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand.<START_MOD>getDbFacade().getInterfaceDao<END_MOD>()); }
java.util.Map<java.lang.String, java.lang.String> getMessageMap(final java.lang.String prefix, final java.util.Locale locale) { java.util.List<org.ovirt.engine.core.utils.branding.BrandingTheme> messageThemes = getBrandingThemes(); java.util.Map<java.lang.String, java.lang.String> keyValues = new java.util.HashMap<java.lang.String, java.lang.String>(); if (messageThemes != null) { for (org.ovirt.engine.core.utils.branding.BrandingTheme theme : messageThemes) { java.util.ResourceBundle messagesBundle = theme.getMessagesBundle(locale); for (java.lang.String key : messagesBundle.keySet()) { if ((key.startsWith((((org.ovirt.engine.core.utils.branding.BrandingManager.BRAND_PREFIX) + ".") + prefix))) || (key.startsWith(org.ovirt.engine.core.utils.branding.BrandingManager.COMMON_PREFIX))) { keyValues.put(key.replaceFirst(((((org.ovirt.engine.core.utils.branding.BrandingManager.BRAND_PREFIX) + "\\.") + prefix) + "\\."), "").replaceFirst(((org.ovirt.engine.core.utils.branding.BrandingManager.<START_MOD>COMMON_PREFIX) + "\\."), "").replaceFirst(((org.ovirt.engine.core.utils.branding.BrandingManager.<END_MOD>BRAND_PREFIX) + "\\."), ""), messagesBundle.getString(key)); } } } } return keyValues; }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((getParameters().getClusterId()) == null) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID); return false; } if (!(getGlusterUtil().isGlusterSnapshotSupported(getVdsGroup().getCompatibilityVersion(), getVdsGroup().getId()))) { failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VOLUME_SNAPSHOT_NOT_SUPPORTED); } if ((getParameters().getConfigParams()) == null) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_CONFIG_PARAMS_IS_EMPTY); return false; } for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig param : getParameters().getConfigParams()) { if (org.apache.commons.lang.StringUtils.isEmpty(param.getParamValue())) { addCustomValue("snapshotConfigParam", param.getParamName()); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_CONFIG_PARAM_VALUE_IS_EMPTY); return false; } } return true; }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((imagesParameters) == null ?   : imagesParameters.hashCode()); result = (prime * result) + (shouldbelogged ? 1231 : 1237); result = (prime * result) + ((transctionOption) == null ?   : transctionOption.hashCode()); result = (prime * result) + ((entityId) == null ?   : entityId.hashCode()); result = (prime * result) + (multipleAction ? 1231 : 1237); result = (prime * result) + ((parametersCurrentUser) == null ?   : parametersCurrentUser.hashCode()); result = (prime * result) + ((parentCommand) == null ?   : parentCommand.hashCode()); result = (prime * result) + ((taskIds) == null ?   : taskIds.hashCode()); result = (prime * result) + ((correlationId) == null ?   : correlationId.hashCode()); result = (prime * result) + (executionIndex); <START_MOD>result = (prime * result) + ((jobId) == null ?   : jobId.hashCode()); result = (prime * result) + ((stepId) == null ?   : stepId.hashCode()); <END_MOD>return result; }
<START_MOD>@org.junit.Test public void testPlainHeartbeat() { org.ovirt.vdsm.jsonrpc.client.reactors.Reactor listeningReactor = null; org.ovirt.vdsm.jsonrpc.client.reactors.Reactor sendingReactor = null; try { listeningReactor = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompReactor(); sendingReactor = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.StompReactor(); this.testHeartbeat(listeningReactor, sendingReactor); } catch (java.io.IOException | org.ovirt.vdsm.jsonrpc.client.ClientConnectionException | java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { fail(); } finally { if (sendingReactor != null) { try { sendingReactor.close(); } catch (java.io.IOException ignored) { } } if (listeningReactor != null) { try { listeningReactor.close(); } catch (java.io.IOException ignored) { } } } }<END_MOD>
@org.junit.Test public void testErrorHandling() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue value = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); value.setSucceeded(false); value.setExceptionObject(new org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException( host when(resourceManager.getEventListener()).thenReturn(vdsEventlistener); when(resourceManager.runVdsCommand(any(org.ovirt.engine.core.common.vdscommands.VDSCommandType.class), any(org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class))).thenReturn(value); when(updater.getResourceManager()).thenReturn(resourceManager); try { updater.refreshVdsStats(); } catch (java.lang.Exception e) { verify(vdsManager).handleNetworkException(any(org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException.class)<START_MOD>); verify(vdsManager).updateDynamicData(<END_MOD>vds.getDynamicData()); } }
<START_MOD>@org.junit.Test public void shouldDoNothingWithoutGroups() { assertEquals(null, enforcer.chooseNextVmToMigrate()); }<END_MOD>
@org.junit.Test public void testGetPeers() throws javax.naming.AuthenticationException { java.util.Set<java.lang.String> peers = glusterUtil.getPeers(org.ovirt.engine.core.<START_MOD>bll.<END_MOD>utils.GlusterUtilTest.SERVER_NAME1, org.ovirt.engine.core.<START_MOD>bll.<END_MOD>utils.GlusterUtilTest.PASSWORD); assertNotNull(peers); assertTrue(peers.contains(org.ovirt.engine.core.<START_MOD>bll.<END_MOD>utils.GlusterUtilTest.SERVER_NAME1)); assertTrue(peers.contains(org.ovirt.engine.core.<START_MOD>bll.<END_MOD>utils.GlusterUtilTest.SERVER_NAME2)); }
<START_MOD>protected java.lang.Integer extractDisplayPort(org.ovirt.engine.core.common.businessentities.GraphicsType graphicsType) { if ((getEntity().getGraphicsInfos().get(graphicsType).getPort()) != null) { return getEntity().getGraphicsInfos().get(graphicsType).getPort(); } return 0; }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick.setId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("id"))); brick.setVolumeId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("volume_id"))); org.ovirt.engine.core.compat.Guid serverId = org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("server_id")); brick.setServerId(serverId); brick.setServerName(getHostNameOfServer(serverId)); brick.setBrickDirectory(rs.getString("brick_dir")); brick.<START_MOD>setBrickOrder(java.lang.Integer.parseInt(rs.getString("brick_order"))); brick.<END_MOD>setStatus(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickStatus.valueOf(rs.getString("status"))); return brick; }
private void verifyCalls(boolean attachToAllClusters) { verify(backend).runInternalAction(eq(ActionType.AddNetwork), any(), any()); verify(networkHelper).createVnicProfile(any()); verify(<START_MOD>networkHelper<END_MOD>).<START_MOD>addVnicProfile<END_MOD>(any(), <START_MOD>anyBoolean<END_MOD>()); org.mockito.verification.VerificationMode expectedNumberOfCalls = (attachToAllClusters) ? times(1) : never(); verify(backend, expectedNumberOfCalls).runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any(), any()); verify(networkHelper, expectedNumberOfCalls).attachNetworkToClusters(eq(NETWORK_ID), any()); }
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultStringValue("New Shared MAC Address Pool") java.lang.String newSharedMacPoolTitle();<END_MOD>
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand.getStorageDomainId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.STORAGE, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
<START_MOD>@java.lang.Override @javax.ws.rs.Path("numanodes") public org.ovirt.engine.api.resource.HostNumaNodesResource getHostNumaNodesResource() { return inject(new org.ovirt.engine.api.restapi.resource.BackendNumaNodesResource(id)); }<END_MOD>
private void setDetailList() { vmGeneralModel.setIsAvailable(false); vmSnapshotListModel.setIsAvailable(false); vmMonitorModel.setIsAvailable(false); vmDiskListModel.setIsAvailable(false); vmInterfaceListModel.setIsAvailable(false); poolGeneralModel.setIsAvailable(false); poolDiskListModel.setIsAvailable(false); poolInterfaceListModel.setIsAvailable(false); permissionListModel.setIsAvailable(true); vmEventListModel.setIsAvailable(true); vmAppListModel.setIsAvailable(true); <START_MOD>userPortalGuestInfoModel<END_MOD>.setIsAvailable(true); vmGuestContainerListModel.setIsAvailable(true); java.util.List<org.ovirt.engine.ui.uicommonweb.models.HasEntity<?>> list = new java.util.ArrayList<>(); list.add(vmGeneralModel); list.add(poolGeneralModel); list.add(vmInterfaceListModel); list.add(poolInterfaceListModel); list.add(vmDiskListModel); list.add(poolDiskListModel); list.add(vmSnapshotListModel); list.add(permissionListModel); list.add(vmEventListModel); list.add(vmAppListModel); list.add(vmMonitorModel); list.add(<START_MOD>userPortalGuestInfoModel<END_MOD>); list.add(vmGuestContainerListModel); setDetailModels(((java.util.List) (list))); }
<START_MOD>@org.junit.Test public void testGuestOs2() { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(); vmDynamic.setStatus(VMStatus.Up); vmDynamic.setGuestOsType(OsType.Windows); vmDynamic.setGuestOsCodename(""); vmDynamic.setGuestOsDistribution(""); vmDynamic.setGuestOsVersion("6.2"); vmDynamic.setGuestOsArch(ArchitectureType.x86_64); vmDynamic.setGuestOsKernelVersion(""); vm.setDynamicData(vmDynamic); org.ovirt.engine.api.model.VM map = org.ovirt.engine.api.restapi.types.VmMapper.map(vm, ((org.ovirt.engine.api.model.VM) (null))); assertNotNull(map.getGuestInfo().getGuestOs()); assertEquals(map.getGuestInfo().getGuestOs().getType(), "Windows"); assertEquals(map.getGuestInfo().getGuestOs().getCodename(), ""); assertEquals(map.getGuestInfo().getGuestOs().getDistribution(), ""); assertEquals(map.getGuestInfo().getGuestOs().getVersion(), "6.2"); assertEquals(map.getGuestInfo().getGuestOs().getArch(), "x86_64"); assertEquals(map.getGuestInfo().getGuestOs().getKernelVersion(), ""); }<END_MOD>
void updateHost() { if ((getDataCenter().getItems()) == null) { return; } if ((getSelectedItem()) == null) { return; } org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (getDataCenter().getSelectedItem())); <START_MOD>boolean localFsOnly = <END_MOD>(getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel<START_MOD>; org.ovirt.engine.core.compat.Guid dataCenterId = <END_MOD>(dataCenter == null) <START_MOD>? null : <END_MOD>dataCenter.getId()<START_MOD>; <END_MOD>org.ovirt.engine.ui.uicommonweb.<START_MOD>dataprovider.AsyncDataProvider.getSpmCandidates(<END_MOD>new <START_MOD>org.ovirt.engine.ui.frontend.AsyncQuery(this,<END_MOD> new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object <START_MOD>returnValue<END_MOD>) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel storageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (model)); java.lang.Iterable<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((java.<START_MOD>lang.Iterable<END_MOD><org.ovirt.engine.core.common.businessentities.VDS>) (<START_MOD>returnValue<END_MOD>)); storageModel.postUpdateHost(hosts); } }, getHash())<START_MOD>, dataCenterId, localFsOnly); }<END_MOD>
public org.ovirt.engine.api.model.Network get() { org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> entity = parent.lookupNetwork(guid); if (entity == null) { return notFound(); } return addLinks(map(entity)); }
private void createNewGeoRepSession() { <START_MOD>if ((getWindow()) != null) { return; <END_MOD>}<START_MOD> org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeGeoRepCreateModel geoRepCreateModel = new org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeGeoRepCreateModel(); setWindow(geoRepCreateModel); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("createGeoRepSession", this); okCommand.setTitle(constants.ok()); okCommand.setIsDefault(true); geoRepCreateModel.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("cancel", this); cancelCommand.setTitle(constants.cancel()); cancelCommand.setIsCancel(true); geoRepCreateModel.getCommands().add(cancelCommand); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.vdscommands.VDSReturnValue get(long timeout, java.util.concurrent.TimeUnit unit) throws java.util.concurrent.TimeoutException { try { status = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(httpTask.get(timeout, unit)); org.ovirt.engine.core.vdsbroker.vdsbroker.FutureVDSCommand.proceedProxyReturnValue(); } catch (java.util.concurrent.TimeoutException e) { httpTask.cancel(true); org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ex = new org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException( during xml-rpc call ex.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(org.ovirt.engine.core.common.errors.VdcBllErrors.VDS_NETWORK_ERROR,   during xml-rpc call setVdsRuntimeError(ex); log.error(( waiting for VDSM response.   + e)); throw e; } catch (java.lang.Exception e) { log.error(<START_MOD> {} e.getMessage()); log.debug("Exception", <END_MOD>e); org.ovirt.engine.core.vdsbroker.vdsbroker.FutureVDSCommand.setVdsRuntimeError((e instanceof java.lang.RuntimeException ? ((java.lang.RuntimeException) (e)) : new java.lang.RuntimeException(e))); } return org.ovirt.engine.core.vdsbroker.vdsbroker.FutureVDSCommand.getVDSReturnValue(); }
@org.junit.Before public void setUp() throws java.lang.Exception { <START_MOD>java.io.File etcDir<END_MOD> = new <START_MOD>java.io.File(this.getClass().getClassLoader().getResource("./org/ovirt/engine/ui/frontend/server/gwt").getFile()); testServlet = new <END_MOD>org.ovirt.engine.ui.frontend.server.gwt.BrandingServlet(); testServlet.init(<START_MOD>etcDir<END_MOD>); testServlet.setBrandingManager(mockBrandingManager); when(mockBrandingManager.getBrandingRootPath()).thenReturn(mockFile); when(mockFile.getAbsolutePath()).thenReturn("/abs/test"); when(mockRequest.getPathInfo()).thenReturn("/test/something.txt"); when(mockResponse.getOutputStream()).thenReturn(mockResponseOutputStream); java.io.File testFile = new java.io.File(this.getClass().getClassLoader().getResource("./org/ovirt/engine/ui/frontend/server/gwt/BrandingServletTest.class").getFile()); testFileEtag = testServlet.generateEtag(testFile); }
public void load() throws org.ovirt.engine.core.extensions.mgr.ConfigurationException { for (java.io.File directory : <START_MOD>org.ovirt.engine.core.utils.EngineLocalConfig.getInstance()<END_MOD>.getExtensionsDirectories()) { load(directory); } activate(); }
@org.junit.Test public void oldHostDoesNotExist() { validator = new org.ovirt.engine.core.bll.validator.UpdateHostValidator(dbFacade, oldHost, null, false); assertThat(validator.hostExists(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.VDS_INVALID_SERVER_ID)); }
<START_MOD>private void setResetEmulatedMachineCommand(org.ovirt.engine.ui.uicommonweb.UICommand value) { privateResetEmulatedMachineCommand = value; }<END_MOD>
protected org.ovirt.engine.core.bll.ValidationResult networkNotUsed(java.util.List<? extends org.ovirt.engine.core.common.businessentities.Nameable> entities, org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD> entitiesReplacementPlural, org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD> entitiesReplacementSingular) { return new org.ovirt.engine.core.common.utils.PluralMessages().getNetworkInUse(getEntitiesNames(entities), entitiesReplacementSingular, entitiesReplacementPlural); }
<START_MOD>public static void RemoveVolumeAlert(org.ovirt.engine.core.compat.Guid volumeId, org.ovirt.engine.core.common.AuditLogType type) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAuditLogDao().removeAllOfTypeForVolume(volumeId, type.getValue()); }<END_MOD>
@org.junit.Test public void passwordIsEmpty() { assertThat(validator.passwordNotEmpty(false, AuthenticationMethod.Password, null), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.VDS_CANNOT_INSTALL_EMPTY_PASSWORD)); }
public static void populateStorageUtilizationDomains(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getStorageDomainUtilization(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addResource(entity); } }
<START_MOD>@org.junit.Test public void getMixedLunConnections() { org.ovirt.engine.core.common.businessentities.LUNs lun = new org.ovirt.engine.core.common.businessentities.LUNs(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_server_connections> connections = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_server_connections>(); connections.add(new org.ovirt.engine.core.common.businessentities.storage_server_connections("Some LUN connection", "id", "iqn", "password", org.ovirt.engine.core.common.businessentities.StorageType.ISCSI, "Username", "port", "portal")); connections.add(new org.ovirt.engine.core.common.businessentities.storage_server_connections("Other LUN connection", "id", "iqn", "password", org.ovirt.engine.core.common.businessentities.StorageType.FCP, "Username", "port", "portal")); lun.setLunConnections(connections); java.util.Map<org.ovirt.engine.core.common.businessentities.StorageType, java.util.List<org.ovirt.engine.core.common.businessentities.storage_server_connections>> connectionsByType = org.ovirt.engine.core.bll.storage.StorageHelperBase.filterLUNsByStorageType(lun); assertTrue("Map of storage connections should not be empty.", (!(connectionsByType.isEmpty()))); assertEquals("Map of storage connections should have only two types of connections.", 2, connectionsByType.size()); assertEquals("Map of ISCSI storage connections should have only 1 ISCSI connections.", 1, connectionsByType.get(StorageType.ISCSI).size()); assertEquals("Map of FCP storage connections should have only 1 FCP connections.", 1, connectionsByType.get(StorageType.FCP).size()); }<END_MOD>
@java.lang.Override protected boolean canDoAction() { java.util.List<java.lang.String> canDoActionMessages = getReturnValue().getCanDoActionMessages(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage_domains> domainsMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage_domains>(); <START_MOD>if<END_MOD> <START_MOD>(!(<END_MOD>canDoAction_beforeCloneVm(canDoActionMessages, domainsMap)<START_MOD>)) { return failCanDoActionWithType()<END_MOD>; <START_MOD>} <END_MOD>if (getParameters().isImportAsNewEntity()) { initImportClonedVm(); } <START_MOD>if<END_MOD> <START_MOD>(!<END_MOD>(canDoAction_afterCloneVm(canDoActionMessages, domainsMap))) { <START_MOD>return failCanDoActionWithType<END_MOD>(); } return <START_MOD>true<END_MOD>; }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume = getGlusterVolume(); if (!(super.<START_MOD>validate<END_MOD>())) { return false; } boolean isVolumeDistributed = glusterVolume.getVolumeType().isDistributedType(); if (!isVolumeDistributed) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NOT_DISTRIBUTED); } else if ((glusterVolume.getBricks().size()) == 1) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_DISTRIBUTED_AND_HAS_SINGLE_BRICK); } org.ovirt.engine.core.bll.validator.gluster.GlusterBrickValidator brickValidator = new org.ovirt.engine.core.bll.validator.gluster.GlusterBrickValidator(); return validate(brickValidator.canRebalance(glusterVolume)); }
private int getResourceType(org.ovirt.engine.core.utils.ovf.xml.XmlNode node, java.lang.String resource) {<START_MOD> this.lastReadEntry = resource;<END_MOD> if (((node.SelectSingleNode(resource, _xmlNS)) != null) && (!(org.apache.commons.lang.StringUtils.isEmpty(node.SelectSingleNode(resource, _xmlNS).innerText)))) { return java.lang.Integer.parseInt(node.SelectSingleNode(resource, _xmlNS).innerText); } return -1; }
protected java.util.List<org.ovirt.engine.core.utils.<START_MOD>customprop<END_MOD>.<START_MOD>CustomPropertiesUtils<END_MOD>.ValidationError> validateCustomProperties(org.ovirt.engine.core.common.businessentities.VmStatic vmStaticFromParams) { return org.ovirt.engine.core.utils.<START_MOD>customprop<END_MOD>.<START_MOD>CustomPropertiesUtils<END_MOD>.getInstance().validateVMProperties(org.ovirt.engine.core.bll.VmCommand.getVdsGroup().getcompatibility_version(), vmStaticFromParams); }
<START_MOD>@java.lang.Override protected void updateDetailsAvailability() { super.updateDetailsAvailability(); org.ovirt.engine.core.common.businessentities.network.NetworkView network = ((org.ovirt.engine.core.common.businessentities.network.NetworkView) (getSelectedItem())); networkExternalSubnetListModel.setIsAvailable(network.isExternal()); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String getName() { return this.name; }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.businessentities.Role getByName(java.lang.String name) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("name", name); return getCallsHandler().executeRead("GetRoleByName", org.ovirt.engine.core.dao.<START_MOD>RoleDAOImpl<END_MOD>.RolesRowMapper.instance, parameterSource); }
@org.junit.Test public void testVmLocked() { setUpGeneralValidations(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_LOCKED)).when(vmValidator).vmNotLocked(); doReturn(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList()).when(cmd).getDisksList(); assertFalse(cmd.<START_MOD>validate<END_MOD>()); assertTrue(cmd.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().contains(EngineMessage.ACTION_TYPE_FAILED_VM_IS_LOCKED.name())); }
@org.junit.Before public void setup() {<START_MOD> when(network.getId()).thenReturn(org.ovirt.engine.core.bll.network.dc.UpdateNetworkValidatorTest.NETWORK_ID);<END_MOD> validator = spy(new org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.UpdateNetworkValidator(network<START_MOD>, managementNetworkUtil<END_MOD>)); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__MANUAL_FENCE); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__HOST); }
public void <START_MOD>appendCustomValueSeparatedByComma<END_MOD>(final java.lang.String name, final java.lang.String value) { <START_MOD>appendCustomValueUsingCustomSeparator<END_MOD>(<START_MOD>name, value<END_MOD>,     }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Hooks java.lang.String hostHooksTitle();
<START_MOD>public static void isClusterHasAnyUpHost(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid clusterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { return true; } else { return false; } } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVdsInUpStatusByVdsGroupId, new org.ovirt.engine.core.common.queries.IdQueryParameters(clusterId), aQuery); }<END_MOD>
<START_MOD>private java.lang.String getNetworkName() { return PlugUnplugVmNicCommand.getVmNetworkInterfaceDAO().get(PlugUnplugVmNicCommand.getParameters().getNicId()).getNetworkName(); }<END_MOD>
@org.ovirt.engine.ui.common.DefaultMessage( <START_MOD>that<END_MOD> <START_MOD>require<END_MOD> <START_MOD>Virtual<END_MOD> <START_MOD>Machine<END_MOD> <START_MOD>reboot<END_MOD>. java.lang.String nextRunConfigurationExists();
@java.lang.Override protected boolean canDoAction() { if ((getDiskImage()) == null) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_NOT_EXIST); } if (!(validate(new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.ExportRepoImageCommand.getStorageDomain()).isDomainExistAndActive()))) { return false; } if (!(getDiskImage().getParentId().equals(Guid.Empty))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED); } for (org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.core.bll.ExportRepoImageCommand.getVmDao().getVmsListForDisk(getDiskImage().getId(), false)) { if ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_IS_RUNNING); } } org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(java.util.Arrays.asList(getDiskImage())); if ((!(validate(diskImagesValidator.diskImagesNotIllegal()))) || (!(validate(diskImagesValidator.diskImagesNotLocked())))) { return false; } return true; }
public static void GetAllowClusterWithVirtGlusterEnabled(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? source : java.lang.Boolean.TRUE; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.GetConfigurationValueParameters(ConfigurationValues.AllowClusterWithVirtGlusterEnabled, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue runFenceAction(org.ovirt.engine.core.common.businessentities.FenceActionType actionType, org.ovirt.engine.core.common.businessentities.FenceAgentOrder order) { java.lang.String managementIp = getManagementIp(order); java.lang.String managementPort = getManagementPort(order); java.lang.String managementAgent = getManagementAgent(order); java.lang.String managementUser = getManagementUser(order); java.lang.String managementPassword = getManagementPassword(order); java.lang.String managementOptions = getManagementOptions(order); org.ovirt.engine.core.bll.FenceExecutor.log.infoFormat(( <{0}> Power Management command, Proxy Host:{1},   +   Target Host:{3}, Management IP:{4}, User:{5}, Options:{6} actionType, proxyHostName, managementAgent, _vds.getName(), managementIp, managementUser, managementOptions); return org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.FenceVds, new org.ovirt.engine.core.common.vdscommands.FenceVdsVDSCommandParameters(proxyHostId, _vds.getId(), managementIp, managementPort, managementAgent, managementUser, managementPassword, managementOptions, actionType<START_MOD>, fencingPolicy)); }<END_MOD>
<START_MOD>@java.lang.Override protected void syncSearch() { if ((getEntity()) == null) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getGlusterVolumeGeoRepStatusForMasterVolume(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> geoRepSessions = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession>) (returnValue)); java.util.Collections.sort(geoRepSessions, new org.ovirt.engine.ui.uicommonweb.Linq.GlusterVolumeGeoRepSessionComparer()); setItems(geoRepSessions); } }), getEntity().getId()); }<END_MOD>
private double calcDistributeMetric(org.ovirt.engine.core.bll.VDS vds, org.ovirt.engine.core.bll.VM vm) { int vcpu = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.VcpuConsumptionPercentage); int spmCpu = ((vds.getspm_status()) == (VdsSpmStatus.None)) ?   : org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.SpmVCpuConsumption); int hostCores = <START_MOD>org.ovirt.engine.core.bll.VdsSelector.geteffective_cpu_cores(vds<END_MOD>); double hostCpu = vds.getusage_cpu_percent(); double pendingVcpus = vds.getpending_vcpus_count(); return (hostCpu / vcpu) + (((pendingVcpus + (vm.getNumOfCpus())) + spmCpu) / hostCores); }
<START_MOD>private boolean isIpAddressInSync() { return org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(iface.getAddress(), (isPrimaryAddressExist() ? networkDataCenterIpConfigurationDefinition.getPrimaryAddress().getAddress() : null)); }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.common.DefaultStringValue("Netmask") java.lang.String cloudInitNetworkNetmaskLabel();<END_MOD>
public void getVmGuestAgentInterfacesByVmId(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid vmId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface>(); } return source; } }; org.ovirt.engine.<START_MOD>core.common.queries.IdQueryParameters queryParams = new org.ovirt.engine.core.common.queries.IdQueryParameters(vmId); queryParams.setRefresh(false); org.ovirt.engine.<END_MOD>ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVmGuestAgentInterfacesByVmId, <START_MOD>queryParams<END_MOD>, aQuery); }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { <START_MOD>getEntry<END_MOD>(widget).swapButton(createButton(item)); addGhostEntry(); onAdd(value, widget); }
public void addOrUpdateTaskInDB(final org.ovirt.engine.core.common.businessentities.AsyncTask asyncTask) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { if (<START_MOD>(<END_MOD>!(<START_MOD>org.ovirt.engine.core.compat.Guid.isNullOrEmpty(<END_MOD>asyncTask.getChildCmdEntity().getRootCommandId()<START_MOD>))) && (!(asyncTask.getChildCmdEntity().getRootCommandId()<END_MOD>.equals(asyncTask.getChildCmdEntity().getId())))<START_MOD>)<END_MOD> { coco.persistCommand(asyncTask.getRootCmdEntity()); } coco.persistCommand(asyncTask.getChildCmdEntity()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAsyncTaskDao().saveOrUpdate(asyncTask); return null; } }); }
<START_MOD>public void init(final java.io.File etcDir) { setBrandingManager(new org.ovirt.engine.ui.frontend.server.gwt.branding.BrandingManager(etcDir)); }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult canDisableVirtioScsi(java.util.Collection<? extends org.ovirt.engine.core.common.businessentities.Disk> vmDisks) { if (vmDisks == null) { vmDisks = getDiskDao().getAllForVm(vms.iterator().next().getId(), true); } boolean isVirtioScsiDiskExists = org.apache.commons.collections.CollectionUtils.exists(vmDisks, new org.apache.commons.collections.Predicate() { @java.lang.Override public boolean evaluate(java.lang.Object disk) { return (((org.ovirt.engine.core.common.businessentities.Disk) (disk)).getDiskInterface()) == (org.ovirt.engine.core.common.businessentities.DiskInterface.VirtIO_SCSI); } }); if (isVirtioScsiDiskExists) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.CANNOT_DISABLE_VIRTIO_SCSI_PLUGGED_DISKS); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
<START_MOD>public void releaseSession() { if ((sessionId) != null) { sessionId = null; com.google.gwt.http.client.RequestBuilder requestBuilder = createRequest(); sendRequest(requestBuilder, new org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.RestApiRequestCallback()); } }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Add") java.lang.String addIscsiBond();
@java.lang.Override protected void perform() { createMemoryDumpDisk(); createMemoryMetadataDisk(); org.ovirt.engine.core.bll.HibernateVmCommand.setSucceeded(true); }
<START_MOD>@org.junit.Test public void frontendToBackend_twoBuilders() { new org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor<org.ovirt.engine.ui.uicommonweb.builders.TestingFrontendModel, org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel>(new org.ovirt.engine.ui.uicommonweb.builders.Property1Builder(), new org.ovirt.engine.ui.uicommonweb.builders.Property2Builder()).buildBackendFromFrontend(frontendModel, backendModel); assertThat(backendModel, is(equalTo(new org.ovirt.engine.ui.uicommonweb.builders.TestingBackendModel(org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutorTest.fe1, org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutorTest.fe2)))); }<END_MOD>
<START_MOD>@org.junit.Test public void shouldDetectSameOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).isSameOs(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")))).isTrue(); }<END_MOD>
private boolean validateNetworkInterfaces() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.VmNetworkInterface> interfaceNetworkMap = org.ovirt.engine.core.common.businessentities.Entities.interfacesByNetworkName(org.ovirt.engine.core.bll.RunVmCommand.getVm().getInterfaces()); java.util.Set<java.lang.String> interfaceNetworkNames = interfaceNetworkMap.keySet(); java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> clusterNetworks = org.ovirt.engine.core.bll.RunVmCommand.getNetworkDAO().getAllForCluster(org.ovirt.engine.core.bll.RunVmCommand.getVm().getvds_group_id()); java.util.Set<java.lang.String> clusterNetworksNames = org.ovirt.engine.core.common.businessentities.Entities.objectNames(clusterNetworks); return ((isVmInterfacesConfigured(interfaceNetworkMap)) && (isVmInterfacesAttachedToClusterNetworks(clusterNetworksNames, interfaceNetworkNames))) && (isVmInterfacesAttachedToVmNetworks(clusterNetworks, interfaceNetworkNames)); }
private org.ovirt.engine.core.common.businessentities.DiskImage createNotVirtIODisk() { org.ovirt.engine.core.common.businessentities.DiskImage disk = getDiskImage(); disk.setActive(true); disk.setDiskInterface(DiskInterface.IDE); doReturn(diskDao).when(command).getDiskDao(); when(diskDao.get(diskImageGuid)).thenReturn(disk); <START_MOD>when(osRepository.getDiskHotpluggableInterfaces(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(org.ovirt.engine.core.bll.HotPlugDiskToVmCommandTest.DISK_HOTPLUGGABLE_INTERFACES); <END_MOD>return disk; }
public boolean Validate() { getNetwork().ValidateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getBond().ValidateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.<START_MOD>BondNameValidation<END_MOD>() }); getAddress().setIsValid(true); getSubnet().setIsValid(true); getGateway().setIsValid(true); if (getIsStaticAddress()) { getAddress().ValidateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.IpAddressValidation() }); getSubnet().ValidateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.SubnetMaskValidation() }); getGateway().ValidateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.IpAddressValidation() }); } return ((((getBond().getIsValid()) && (getNetwork().getIsValid())) && (getAddress().getIsValid())) && (getSubnet().getIsValid())) && (getGateway().getIsValid()); }
public static void setGatewayIfNecessary(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.VDS host, java.lang.String gateway<START_MOD>, java.util.function.Consumer<java.lang.String> gatewaySetter<END_MOD>) { <START_MOD>if<END_MOD> <START_MOD>(<END_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.<START_MOD>isGatewayNecessary<END_MOD>().<START_MOD>test<END_MOD>(iface, host)) { <START_MOD>gatewaySetter<END_MOD>.<START_MOD>accept<END_MOD>(gateway); } }
public static java.util.List<java.lang.String> runAndAssertCanDoActionFailure(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.dal.VdcBllMessages message) { boolean canDoAction = command.canDoAction(); java.util.List<java.lang.String> canDoActionMessages = command.getReturnValue().getCanDoActionMessages(); assertFalse( canDoAction expected to fail<START_MOD>,<END_MOD> but <START_MOD>succeeded<END_MOD> canDoAction); assertTrue(java.text.MessageFormat.format( messages doesn contain expected message: {0}, messages are: {1} message.name(), canDoActionMessages), canDoActionMessages.contains(message.name())); return canDoActionMessages; }
private org.ovirt.engine.core.bll.ValidationResult networkNotUsedByHost() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostsWithNetwork = org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getVdsDAO().getAllForNetwork(getOldNetwork().getId()); if (hostsWithNetwork.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } <START_MOD>java.util.List<java.lang.String> replacements = java.util.Arrays.asList(org.ovirt.engine.core.utils.ReplacementUtils.replaceWithNameable("ENTITIES_USING_NETWORK", hostsWithNetwork)); replacements.add(VdcBllMessages.VAR__TYPE__HOSTS.name()); <END_MOD>return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.<START_MOD>ACTION_TYPE_FAILED_NETWORK_IN_USE<END_MOD>, <START_MOD>replacements.toArray(new java.lang.String[replacements.size()]<END_MOD>)); }
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.EntityModel getIsRngEnabled() { return isRngEnabled; }<END_MOD>
<START_MOD>public void setDb_generation(long db_generation) { this.db_generation = db_generation; }<END_MOD>
private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? ((java.util.ArrayList) (getSelectedItems())) : null; boolean shouldAllowEdit = true; if (disk != null) { shouldAllowEdit = (<START_MOD>(disk.getContentType()) != (org.ovirt.engine.core.common.businessentities.storage.DiskContentType.OVF_STORE)) && (<END_MOD>!(<START_MOD>((<END_MOD>disk.<START_MOD>getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) && ((((org.ovirt.engine.core.common.businessentities.storage.DiskImage) <END_MOD>(disk<START_MOD>)).getImageStatus<END_MOD>()) == (org.ovirt.engine.core.common.businessentities.storage.<START_MOD>ImageStatus.LOCKED)))); } getNewCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed((((<END_MOD>(disk<START_MOD> != null) && (disks != null)) && ((disks.size<END_MOD>()) == <START_MOD>1)) && shouldAllowEdit)); getRemoveCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isScanAlignmentCommandAvailable()))); getExportCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveCommandAvailability(disks); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems()) != null ? ((java.util.List) (getItems())) : null), ((getSelectedItems()) != null ? ((java.util.List) (getSelectedItems())) : null), getSystemTreeSelectedItem(), getChangeQuotaCommand(<END_MOD>)); }
<START_MOD>@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(getClass().getSimpleName(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.STORAGE, EngineMessage.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }<END_MOD>
@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { final org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void> vmListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>) (result.getState())); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result.getReturnValue(); if ((returnValueBase != null) && (returnValueBase.getSucceeded())) { org.ovirt.engine.core.common.businessentities.VM vm = vmListModel.getcurrentVm(); org.ovirt.engine.core.common.action.VmManagementParametersBase updateVmParams = vmListModel.getUpdateVmParameters(applyCpuChangesLater<START_MOD>, vmIcon<END_MOD>); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UpdateVm, updateVmParams, new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModelNetworkAsyncCallback(model, defaultNetworkCreatingManager, vm.getId()), vmListModel); } else { vmListModel.getWindow().stopProgress(); } }
<START_MOD>public java.util.Optional<org.ovirt.engine.core.common.businessentities.VM> getSnapshotUsingMac(org.ovirt.engine.core.compat.Guid macPoolId, java.lang.String mac) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> allVms = getAllVmsInSystem(getIdsOfAllClustersHavingMacPool(macPoolId)).collect(java.util.stream.Collectors.toList()); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> snapshotsById = getAllStatelessVms(allVms).map(VM::getId).map(snapshotsManager::getVmConfigurationInStatelessSnapshotOfVm).filter(java.util.Optional::isPresent).map(java.util.Optional::get).collect(java.util.stream.Collectors.toMap(VM::getId, java.util.function.Function.identity())); java.util.Optional<org.ovirt.engine.core.compat.Guid> snapshotUsingMacId = getVmIdUsingMac(snapshotsById.values().stream().flatMap(( vm) -> vm.getInterfaces().stream()), mac); return snapshotUsingMacId.map(snapshotsById::get); }<END_MOD>
<START_MOD>private java.util.Map<java.lang.String, java.lang.Object> parseBalloon(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( dev) -> (dev.getType()) == VmDeviceGeneralType.BALLOON).findFirst(); if (!(db.isPresent())) { return java.util.Collections.emptyMap(); } org.ovirt.engine.core.common.businessentities.VmDevice device = db.get(); org.ovirt.engine.core.utils.ovf.xml.XmlNode node = document.selectSingleNode("//*/memballoon"); java.util.Map<java.lang.String, java.lang.Object> result = new java.util.HashMap<>(); result.put(VdsProperties.Device, "memballoon"); result.put(VdsProperties.DeviceId, device.getId().getDeviceId().toString()); result.put(VdsProperties.Address, parseAddress(node)); result.put(VdsProperties.Alias, parseAlias(node)); return result; }<END_MOD>
private void <START_MOD>initAnchor<END_MOD>(<START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String<END_MOD> <START_MOD>url<END_MOD>, <START_MOD>boolean<END_MOD> <START_MOD>isBrickTabSelected<END_MOD>) { <START_MOD>com<END_MOD>.<START_MOD>google.gwt.user.client.ui.Anchor profileExport = new com.google.gwt.user.client.ui.Anchor<END_MOD>(constants.<START_MOD>exportToPdf<END_MOD>()<START_MOD>, false, url, "_blank"<END_MOD>); <START_MOD>if (isBrickTabSelected) { brickProfileAnchorContainer<END_MOD>.<START_MOD>add<END_MOD>(<START_MOD>profileExport<END_MOD>); }<START_MOD> else { nfsProfileAnchorContainer.add(profileExport); } }<END_MOD>
@java.lang.Override public java.lang.Object runInTransaction() { <START_MOD>updateStorageDomainFormat(<END_MOD>getStorageDomain()); return null; }
<START_MOD>private void updateStorageTypesByDomainType(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel storageModel) { org.ovirt.engine.core.common.businessentities.StorageDomainType storageDomainType = domainFunctionListEditor.asEditor().getActualEditor().getValue(); java.util.Set<org.ovirt.engine.core.common.businessentities.storage.StorageType> filteredStorageTypes = new java.util.HashSet<>(); for (org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel currModel : storageModel.getItems()) { if ((currModel.getRole()) == storageDomainType) { filteredStorageTypes.add(currModel.getType()); } } storageModel.getAvailableStorageTypeItems().setItems(filteredStorageTypes); }<END_MOD>
public org.ovirt.engine.core.common.businessentities.StorageDomain getStorage() { return <START_MOD>storageDoamin<END_MOD>; }
@java.lang.Override public org.ovirt.engine.core.common.job.Job mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.job.Job job = new org.ovirt.engine.core.common.job.Job(); job.setId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("job_id"))); job.setActionType(org.ovirt.engine.core.common.action.VdcActionType.valueOf(rs.getString("action_type"))); job.setDescription(rs.getString("description")); job.setStatus(org.ovirt.engine.core.common.job.JobExecutionStatus.valueOf(rs.getString("status"))); job.setOwnerId(org.ovirt.engine.core.compat.NGuid.createGuidFromString(rs.getString("owner_id"))); job.setVisible(rs.getBoolean("visible")); job.setStartTime(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.fromDate(rs.getTimestamp("start_time"))); job.setEndTime(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.fromDate(rs.getTimestamp("end_time"))); job.setLastUpdateTime(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.fromDate(rs.getTimestamp("last_update_time"))); job.setCorrelationId(rs.getString("correlation_id")); <START_MOD>job.setExternal(rs.getBoolean("is_external")); job.setExternal(rs.getBoolean("is_auto_cleared")); <END_MOD>return job; }
<START_MOD>public java.util.List<java.lang.String> readStrings() { return read(java.lang.String.class, this::readString); }<END_MOD>
@java.lang.Override protected boolean canDoAction() { if (((getParameters()) == null) || ((getParameters().getQuotaId()) == null)) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } org.ovirt.engine.core.common.businessentities.Quota quota = getQuota(); if (quota == null) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } if ((!(QuotaEnforcementTypeEnum.DISABLED.equals(quota.getQuotaEnforcementType()))) && (getQuotaDao().isQuotaInUse(quota))) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_QUOTA_IN_USE_BY_VM_OR_DISK); return false; } return true; }
protected boolean isConnWithSameDetailsExists(org.ovirt.engine.core.common.businessentities.StorageServerConnections connection, org.ovirt.engine.core.compat.Guid storagePoolId) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections = null; if ((connection.<START_MOD>getStorageType<END_MOD>()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.LOCALFS)) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connectionsForPool = (storagePoolId == null) ? java.util.Collections.<org.ovirt.engine.core.common.businessentities.StorageServerConnections>emptyList() : getStorageConnDao().getAllConnectableStorageSeverConnection(storagePoolId); java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connectionsForPath = getStorageConnDao().getAllForStorage(connection.<START_MOD>getConnection<END_MOD>()); connections = ((java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections>) (org.apache.commons.collections.CollectionUtils.intersection(connectionsForPool, connectionsForPath))); } else if (connection.<START_MOD>getStorageType<END_MOD>().isFileDomain()) { java.lang.String connectionField = connection.<START_MOD>getConnection<END_MOD>(); connections = getStorageConnDao().getAllForStorage(connectionField); } else { org.ovirt.engine.core.common.businessentities.StorageServerConnections sameConnection = findConnectionWithSameDetails(connection); connections = (sameConnection != null) ? java.util.Arrays.asList(sameConnection) : java.util.Collections.<org.ovirt.engine.core.common.businessentities.StorageServerConnections>emptyList(); } boolean isDuplicateConnExists = ((connections.size()) > 1) || (((connections.size()) == 1) && (!(connections.get(0).<START_MOD>geIid<END_MOD>().equalsIgnoreCase(connection.<START_MOD>geIid<END_MOD>())))); return isDuplicateConnExists; }
<START_MOD>private static void populateModelWithIpv6Details(org.ovirt.engine.core.common.businessentities.VmInitNetwork entity, org.ovirt.engine.api.model.NicConfiguration model) { if ((entity.getIpv6BootProtocol()) != null) { model.setIpv6BootProtocol(org.ovirt.engine.api.restapi.types.Ipv6BootProtocolMapper.map(entity.getIpv6BootProtocol())); } model.setIp(org.ovirt.engine.api.restapi.types.InitializationMapper.createIpModel(new org.ovirt.engine.core.common.network.vm.VmInitNetworkIpv6InfoFetcher(entity))); }<END_MOD>
protected void bindResourceConfiguration(java.lang.Class<? extends org.ovirt.engine.ui.common.CommonApplicationConstants> constants, java.lang.Class<? extends org.ovirt.engine.ui.common.CommonApplicationMessages> messages, java.lang.Class<? extends org.ovirt.engine.ui.common.CommonApplicationResources> resources, java.lang.Class<? extends org.ovirt.engine.ui.common.CommonApplicationTemplates> templates, java.lang.Class<? extends org.ovirt.engine.ui.common.utils.<START_MOD>DynamicMessages<END_MOD>> dynamicConstants) { bind(org.ovirt.engine.ui.common.CommonApplicationConstants.class).to(constants).in(com.google.inject.Singleton.class); bind(org.ovirt.engine.ui.common.CommonApplicationMessages.class).to(messages).in(com.google.inject.Singleton.class); bind(org.ovirt.engine.ui.common.CommonApplicationResources.class).to(resources).in(com.google.inject.Singleton.class); bind(org.ovirt.engine.ui.common.CommonApplicationTemplates.class).to(templates).in(com.google.inject.Singleton.class); bind(org.ovirt.engine.ui.common.utils.<START_MOD>DynamicMessages<END_MOD>.class).to(dynamicConstants).in(com.google.inject.Singleton.class); }
<START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.VmStatic vmStatic) { }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.NetworkQoS object) { return (object.getInboundBurst()) == null ? constants.notAvailableLabel() : object.getInboundAverage().toString(); }<END_MOD>
protected org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> createVmFromTemplateCommand(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.action.AddVmParameters param = new org.ovirt.engine.core.common.action.AddVmParameters(); param.setVm(vm); org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> concrete = new org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters>(param) { @java.lang.Override protected void initUser() { } @java.lang.Override protected void initTemplateDisks() { } @java.lang.Override protected void initStoragePoolId() { } @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate getVmTemplate() { return createVmTemplate(); } }; org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> result = spy(concrete); doReturn(<START_MOD>mock(org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy.class)).when(result).getMacPool(); doReturn(<END_MOD>true).when(result).checkNumberOfMonitors(); doReturn(createVmTemplate()).when(result).getVmTemplate(); doReturn(true).when(result).validateCustomProperties(any(org.ovirt.engine.core.common.businessentities.VmStatic.class), any(java.util.ArrayList.class)); mockDaos(result); mockBackend(result); org.ovirt.engine.core.bll.AddVmCommandTest.initCommandMethods(result); result.postConstruct(); return result; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS flush() { super.flush(); networkQoS.setName(((java.lang.String) (getName().getEntity()))); networkQoS.setStoragePoolId(((org.ovirt.engine.core.common.businessentities.StoragePool) (getDataCenters().getSelectedItem())).getId()); return networkQoS; }
<START_MOD>protected<END_MOD> void <START_MOD>createNumOfDesktopEditors<END_MOD>() { <START_MOD>incraseNumOfVmsEditor = new org<END_MOD>.<START_MOD>ovirt.engine.ui.common.widget.editor.EntityModelTextBoxOnlyEditor<END_MOD>(<START_MOD>new org.ovirt.engine.ui.common.widget.uicommon.popup.ModeSwitchingVisibilityRenderer()<END_MOD>); <START_MOD>numOfVmsEditor = new org<END_MOD>.<START_MOD>ovirt.engine.ui.common.widget.editor.EntityModelTextBoxEditor<END_MOD>(<START_MOD>new org.ovirt.engine.ui.common.widget.uicommon.popup.ModeSwitchingVisibilityRenderer(<END_MOD>)); }
<START_MOD>@org.junit.Test public void shouldHandleNumMajorVersion() { final org.ovirt.engine.core.bll.scheduling.OS validOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - 7 - release"); assertThat(validOs.isValid()).isTrue(); assertThat(validOs.getVersion().getMajor()).isEqualTo(7); assertThat(validOs.getVersion().getMinor()).isEqualTo((-1)); }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>StoragePool<END_MOD>> storagePools = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>StoragePool<END_MOD>>) (returnValue)); org.ovirt.engine.core.common.businessentities.<START_MOD>StoragePool<END_MOD> storagePool = ((storagePools.size()) > 0) ? storagePools.get(0) : null; vmListModel.PostGetTemplatesNotPresentOnExportDomain(storagePool); }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_PLACEHOLDER_CREATION)) { updateStage(LiveDiskMigrateStage.VM_REPLICATE_DISK_START); replicateDiskStart(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_START); syncImageData(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END); return true; } if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END)) { updateStage(LiveDiskMigrateStage.VM_REPLICATE_DISK_FINISH); completeLiveMigration(); updateStage(LiveDiskMigrateStage.SOURCE_IMAGE_DELETION); org.ovirt.engine.core.bll.storage.lsm.LiveStorageMigrationHelper.removeImage(this, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getSourceStorageDomainId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getDestinationImageId(), AuditLogType.USER_MOVE_IMAGE_GROUP_FAILED_TO_DELETE_SRC_IMAGE); <START_MOD>updateStage(LiveDiskMigrateStage.AUTO_GENERATED_SNAPSHOT_REMOVE_START); removeAutogeneratedSnapshot(); updateStage(LiveDiskMigrateStage.AUTO_GENERATED_SNAPSHOT_REMOVE_END); <END_MOD>return <START_MOD>true; } return <END_MOD>false; }
<START_MOD>public java.lang.String getProxyHost() { if (org.ovirt.engine.ui.common.uicommon.NoVncImpl.NoVncProxyConfig.HOST.equals(configValue)) { return getVncHost(); } else if (org.ovirt.engine.ui.common.uicommon.NoVncImpl.NoVncProxyConfig.ENGINE.equals(configValue)) { java.lang.String host = com.google.gwt.user.client.Window.Location.getHostName(); return com.google.gwt.user.client.Window.Location.getHostName(); } else if (matchesHostColonPort(configValue)) { return configValue.split(":")[0]; } else { throw new java.lang.IllegalArgumentException("Illegal NoVncImpl configuration."); } }<END_MOD>
@java.lang.Override public <START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt.safehtml.shared.SafeHtml<END_MOD> <START_MOD>getTooltip<END_MOD>(<START_MOD>org.ovirt.engine.core.common.businessentities.Disk object) { if (object.isBoot()<END_MOD>) { return <START_MOD>com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(<END_MOD>org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.constants.bootableDisk()<START_MOD>)<END_MOD>; }<START_MOD> return null; }<END_MOD>
<START_MOD>public void setRefreshVolumeCapcity(org.ovirt.engine.ui.uicommonweb.UICommand refreshVolumeCapcity) { this.refreshVolumeCapcity = refreshVolumeCapcity; }<END_MOD>
@java.lang.Override protected void logToAudit() {<START_MOD> if ( reset { return; }<END_MOD> org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(vds.getId()); auditLogableBase.setVds(vds); auditLogableBase.addCustomValue("message", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getReturnStatus().message); auditLogDirector.log(auditLogableBase, AuditLogType.VDS_BROKER_COMMAND_FAILURE); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot entitySnapshot) { org.<START_MOD>ovirt.engine.core.compat.Guid id = entitySnapshot.getId(); if (id == null) { id = org.ovirt.engine.core.compat.Guid.NewGuid(); entitySnapshot.setId(id); } org.<END_MOD>springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue(<START_MOD>"id", entitySnapshot.getId()).addValue(<END_MOD>"command_id", entitySnapshot.getCommandId()).addValue("command_type", entitySnapshot.getCommandType()).addValue("entity_id", entitySnapshot.getEntityId()).addValue("entity_type", entitySnapshot.getEntityType()).addValue("entity_snapshot", entitySnapshot.getEntitySnapshot()).addValue("snapshot_class", entitySnapshot.getSnapshotClass()).addValue("snapshot_type", entitySnapshot.getSnapshotType()).addValue("insertion_order", entitySnapshot.getInsertionOrder()); getCallsHandler().executeModification("insert_entity_snapshot", parameterSource); }
<START_MOD>public<END_MOD> org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>validator<END_MOD>.<START_MOD>storage.AttachDomainValidator<END_MOD> <START_MOD>getAttachDomainValidator()<END_MOD> <START_MOD>{<END_MOD> <START_MOD>return new org.ovirt.engine.core.bll.validator.storage.AttachDomainValidator(<END_MOD>org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStorageDomain()<START_MOD>,<END_MOD> getTargetStoragePool()); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotSchedule fetchedSchedule = getGlusterVolumeSnapshotScheduleDao().getByVolumeId(getGlusterVolumeId()); if (fetchedSchedule != null) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_ALREADY_SCHEDULED); } if (!(getParameters().getForce())) { if (((getGlusterVolumeDao().getByName(getVdsGroupId(), org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.GlusterMetaVolumeName))) != null) && (getVdsGroup().isGlusterCliBasedSchedulingOn())) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_GLUSTER_CLI_SCHEDULING_ENABLED); } } return true; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( All java.lang.String resetAllVolume();
<START_MOD>@org.junit.Test public void testMoveOrCopyMemoryDiskFails() { initializeCommand(new org.ovirt.engine.core.common.businessentities.storage.DiskImage()); initVmDiskImage(false); command.getImage().setContentType(DiskContentType.MEMORY_DUMP_VOLUME); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.ACTION_TYPE_FAILED_DISK_CONTENT_TYPE_NOT_SUPPORTED_FOR_OPERATION); }<END_MOD>
<START_MOD>protected java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> getRngDevices() { return org.ovirt.engine.core.bll.AbstractRngDeviceCommand.getDbFacade().getVmDeviceDao().getVmDeviceByVmIdAndType(org.ovirt.engine.core.bll.AbstractRngDeviceCommand.getParameters().getRngDevice().getId(), VmDeviceGeneralType.RNG); }<END_MOD>
@java.lang.Override protected void EndWithFailure() { setVm(null); org.ovirt.engine.core.common.businessentities.VM vmFromParams = getParameters().getVm(); if ((getVm()) != null) { org.ovirt.engine.core.bll.VmHandler.UnLockVm(getVm().getId()); for (org.ovirt.engine.core.common.businessentities.DiskImage disk : imageList) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskImageDynamicDAO().remove(disk.getImageId()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getImageDao().remove(disk.getImageId()); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> imagesForDisk = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskImageDAO().getAllSnapshotsForImageGroup(disk.getId()); if ((imagesForDisk == null) || (imagesForDisk.isEmpty())) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getBaseDiskDao().remove(disk.getId()); } } new org.ovirt.engine.core.bll.snapshots.SnapshotsManager().removeSnapshots(getVm().getId()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDAO().remove(getVmId()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStatisticsDAO().remove(getVmId()); new org.ovirt.engine.core.bll.snapshots.SnapshotsManager().removeSnapshots(getVmId()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStaticDAO().remove(getVmId()); setSucceeded(true); } else { setVm(vmFromParams); getReturnValue().setEndActionTryAgain(false); } }
public void initStorageDomains() { if ((getModel().getDisks()) == null) { return; } org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel().getTemplate().getSelectedItem(); if ((<START_MOD>(<END_MOD>template != null) && (!(template.getId().equals(Guid.Empty<START_MOD>)))) && (!(getModel().getTemplateChanged().getEntity(<END_MOD>)))) { postInitStorageDomains(); } else { getModel().getStorageDomain().setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>()); getModel().getStorageDomain().setSelectedItem(null); getModel().getStorageDomain().setIsChangable(false); } }
@java.lang.Override public java.<START_MOD>util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView><END_MOD> convert(java.lang.Object returnValue, org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>><END_MOD> asyncQuery) { <START_MOD>this.clusterNetworks = clusterNetworks; <END_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.network.<START_MOD>VnicProfileView> vnicProfiles = new java.util.ArrayList<>(); vnicProfiles.add(VnicProfileView.EMPTY); if (returnValue == null) { return vnicProfiles; } for (org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile : ((java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>) (returnValue))) { org.ovirt.engine.core.common.businessentities.network.<END_MOD>Network<START_MOD> network<END_MOD> = <START_MOD>findNetworkById(vnicProfile.getNetworkId()); if ((network != null) && (network.isVmNetwork())) { vnicProfiles.add(vnicProfile); } } java.util.Collections.sort(vnicProfiles,<END_MOD> new <START_MOD>org.ovirt.engine.ui.uicommonweb.Linq.VnicProfileViewComparator());<END_MOD> return vnicProfiles; }
private void checkVmName(boolean isImportAsNewEntity, java.lang.String name) { org.ovirt.engine.core.common.action.ImportVmParameters parameters = createParameters(); parameters.getVm().setName(name); parameters.setImportAsNewEntity(isImportAsNewEntity); org.ovirt.engine.core.bll.exportimport.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> command = new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(parameters, poolPerCluster, externalVmMacsFinder<START_MOD>, externalVnicProfileMappingValidator<END_MOD>); command.init(); java.util.Set<javax.validation.ConstraintViolation<org.ovirt.engine.core.common.action.ImportVmParameters>> validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, command.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertEquals(validate.isEmpty(), (!isImportAsNewEntity)); }
<START_MOD>@org.junit.Test public void isMgmtNetwork() throws java.lang.Exception { notMgmtNetworkTest(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.NETWORK_CAN_NOT_REMOVE_DEFAULT_NETWORK), MGMT_NETWORK_NAME); }<END_MOD>
<START_MOD>private boolean isSameSourceAndDest(org.ovirt.engine.core.common.action.LiveMigrateDiskParameters parameters) { org.ovirt.engine.core.common.businessentities.StorageDomain sourceDomain = getImageSourceDomain(parameters.getImageId()); org.ovirt.engine.core.common.businessentities.StorageDomain destDomain = getStorageDomainById(parameters.getStorageDomainId(), org.ovirt.engine.core.bll.lsm.LiveMigrateVmDisksCommand.getStoragePoolId()); if (sourceDomain.getId().equals(destDomain.getId())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_SOURCE_AND_TARGET_SAME); } return true; }<END_MOD>
<START_MOD>@java.lang.Override <END_MOD>public void setUsePatternFly(boolean use) { keyField.setUsePatternFly(use); valueField.setUsePatternFly(use); valuesField.setUsePatternFly(use); }
private void migrate() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getSelectedItem())); if (vm == null) { return; } if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().migrateVirtualMachinesTitle()); model.setHashName("migrate_virtual_machine");<START_MOD> model.setHelpTag(model.getHashName(),   > Migrate Virtual Machine(s)<END_MOD> model.setVmsOnSameCluster(true); model.setIsAutoSelect(true); model.setVmList(org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.VM>cast(getSelectedItems())); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getUpHostListByCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel) (target)); vmListModel.postMigrateGetUpHosts(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue))); } }), vm.getVdsGroupName()); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( can contain only 'A-Z', 'a-z', '0-9', '_' or '-' characters. java.lang.String asciiNameValidationMsg();
<START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForVdsGroup(org.ovirt.engine.core.compat.Guid vdsGroupId);<END_MOD>
@org.junit.Test public void networkDoesntExist() { simulateVdsGroupExists(); assertCanDoActionFailure(<START_MOD>EngineMessages<END_MOD>.NETWORK_NOT_EXISTS.toString()); }
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { java.util.ArrayList<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.VM> vms = org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.VM>cast(((java.util.ArrayList<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.IVdcQueryable>) (source))); return vms; }
public static void deserialize(com.google.gwt.user.client.rpc.SerializationStreamReader streamReader, org.ovirt.engine.core.common.queries.VdcQueryReturnValue instance) throws com.google.gwt.user.client.rpc.SerializationException { instance.setSucceeded(streamReader.readBoolean()); instance.setExceptionString(streamReader.readString()); java.lang.String type = streamReader.readString(); if (type.equals("java.lang.String")) { instance.setReturnValue(streamReader.readString()); } else if (type.equals("java.lang.Integer")) { instance.setReturnValue(streamReader.readInt()); } else if (type.equals("java.lang.Boolean")) { instance.setReturnValue(streamReader.readBoolean()); } else if (type.equals("java.lang.Double")) { instance.setReturnValue(streamReader.readDouble()); } else if (type.equals("java.lang.Float")) { instance.setReturnValue(streamReader.readFloat()); } else if (type.equals("java.lang.Character")) { instance.setReturnValue(streamReader.readChar()); } else if (type.equals("java.lang.Short")) { instance.setReturnValue(streamReader.readShort()); } else if (type.equals("java.lang.Byte")) { instance.setReturnValue(streamReader.readByte()); } else if (type.equals("java.util.List")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("java.util.Map")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("java.util.Set")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("IVdcQueryable")) { instance.setReturnValue(streamReader.readObject()); } else if (type.equals("UNKNOWN")) { instance.setReturnValue(streamReader.readObject()); } }
public void subscribe(org.ovirt.vdsm.jsonrpc.client.events.EventSubscriber subscriber) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.getWorker(<START_MOD>org.ovirt.engine.core.vdsbroker.ResourceManager.PARALLELISM<END_MOD>).getPublisher().subscribe(subscriber); }
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("Splitted") java.lang.String numaSplittedLabel();<END_MOD>
<START_MOD>private org.ovirt.engine.core.bll.ValidationResult networkNotUsedByHost() { return org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getVdsDAO().getAllForNetwork(getOldNetwork().getId()).isEmpty() ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.NETWORK_IN_USE_BY_HOSTS); }<END_MOD>
@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), sysPrepDomainName, sysPrepUserName, sysPrepPassword, vmInit, destinationVdsId, customEmulatedMachine, customCpuName<START_MOD>, bootSequence<END_MOD>); }
private void parseSecondArgWithKeyValue(java.lang.String arg, java.lang.String key, java.lang.String value) { if (<START_MOD>(<END_MOD>getConfigAction().equals(ConfigActionType.ACTION_SET<START_MOD>)) || (getConfigAction().equals(ConfigActionType.ACTION_MERGE)<END_MOD>)) { engineConfigMap.setKey(key); engineConfigMap.setValue(value); } else { org.ovirt.engine.core.config.EngineConfigCLIParser.log.debug((( error: second argument   + arg) +   has an '=' char but action is not 'set'. throw new java.lang.IllegalArgumentException((( second argument:   + arg) + ".")); } }
public void remove() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeBookmarksTitle()); model.setHashName("remove_bookmark"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().bookmarsMsg()); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.<START_MOD>Bookmarks<END_MOD> i = ((org.ovirt.engine.core.common.businessentities.<START_MOD>Bookmarks<END_MOD>) (item)); list.add(i.getbookmark_name()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnRemove", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
@java.lang.Override public void setItems(java.lang.Iterable value) { if ((items) != value) { itemsChanging(value, items); items = value; getItemsChangedEvent().raise(this, EventArgs.<START_MOD>empty<END_MOD>); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("Items")); org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel selectedItem = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (getSelectedItem())); if (((items) != null) && (selectedItem != null)) { for (java.lang.Object object : items) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel itemModel = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (object)); if (itemModel.getEntity().equals(selectedItem.getEntity())) { this.selectedItem = itemModel; break; } } } onSelectedItemChanged(); } }
@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult call() { final org.ovirt.engine.core.common.businessentities.storage.CinderDisk disk = cinderDisks.iterator().next(); org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy proxy = diskProxyMap.get(disk.getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType> volumeTypes = proxy.getVolumeTypes(); boolean volumeTypeExists = org.apache.commons.collections.CollectionUtils.exists(volumeTypes, new org.apache.commons.collections.Predicate() { @java.lang.Override public boolean evaluate(java.lang.Object o) { return ((org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType) (o)).getName().equals(disk.getCinderVolumeType()); } }); if (!volumeTypeExists) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.CINDER_VOLUME_TYPE_NOT_EXISTS, java.lang.String.format( %s disk.getCinderVolumeType())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public <START_MOD>java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> getQuotaStorageConsumptionParameters() { java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> list = new java.util.ArrayList<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter>(); if ((imageTemplates) != null) { for (org.ovirt.engine.core.common.businessentities.DiskImage disk : imageTemplates) { if ((disk.<END_MOD>getQuotaId()<START_MOD>) != null) { list.add(new org.ovirt.engine.core.bll.quota.QuotaStorageConsumptionParameter(disk.getQuotaId(), null, QuotaStorageConsumptionParameter.QuotaAction.RELEASE, disk.getstorage_ids().get(0), ((double) (disk.getSizeInGigabytes())))); } } }<END_MOD> return <START_MOD>list<END_MOD>; }
@org.junit.Test public void migrationNotSupported() { when(cluster.getCompatibilityVersion()).thenReturn(mock(org.ovirt.engine.core.compat.Version.class)); validator = spy(new org.ovirt.engine.core.bll.validator.ClusterValidator(dbFacade, cluster)); doReturn(false).when(validator).migrationSupportedForArch(any(org.ovirt.engine.core.common.businessentities.ArchitectureType.class)); assertThat(validator.migrationSupported(org.ovirt.engine.core.utils.RandomUtils.instance().nextEnum(org.ovirt.engine.core.common.businessentities.ArchitectureType.class)), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.MIGRATION_ON_ERROR_IS_NOT_SUPPORTED)); }
private boolean isRunningConfigurationNeeded() { return ((<START_MOD>(<END_MOD>org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNextRunConfigurationExists()) || (!(org.ovirt.engine.core.bll.VmHandler.isUpdateValid(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus(), isHotSetEnabled())))) || (!(org.ovirt.engine.core.bll.VmHandler.isUpdateValidForVmDevices(getVmId(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters())))<START_MOD>) || (!(org.ovirt.engine.core.bll.VmHandler.isUpdateValidForMigrationPolicy(org.ovirt.engine.core.bll.UpdateVmCommand.getVm(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVm())))<END_MOD>; }
@org.junit.Test public void testLogoffAsync_success() { java.lang.Object model = new java.lang.Object(); when(mockAsyncQuery.getModel()).thenReturn(model); org.ovirt.engine.core.common.users.VdcUser testUser = new org.ovirt.engine.core.common.users.VdcUser(); testUser.setUserName("testUser"); testUser.setPassword("testpassword"); frontend.<START_MOD>logoffAsync<END_MOD>(testUser, mockAsyncQuery); verify(mockService).logOff(eq(testUser), callbackAction.capture()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); callbackAction.getValue().onSuccess(returnValue); verify(mockAsyncCallback).onSuccess(model, returnValue); verify(mockLoginHandler).onLogout(); }
@java.lang.Override protected void syncSearch() { super.syncSearch(); if (getIsQueryFirstTime()) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllPolicyUnits, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> list = returnValue.getReturnValue(); setPolicyUnits(list); fetchClusterPolicies(); if ((policyUnitModel) != null) { policyUnitModel.getPolicyUnits().setItems(sort(policyUnits)); } } })); } else { fetchClusterPolicies(); } }
@java.lang.Override protected java.util.List<java.lang.Class<?>> getValidationGroups() { org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>AddStorageDomainCommand.addValidationGroup(org.ovirt.engine.core.common.validation.group.CreateEntity.class); return super.getValidationGroups(); }
<START_MOD>public void refreshVolume() { org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.MergeExtendCommand.getParameters().getBaseImage().getImageId(); org.ovirt.engine.core.common.action.RefreshVolumeParameters parameters = new org.ovirt.engine.core.common.action.RefreshVolumeParameters(org.ovirt.engine.core.bll.MergeExtendCommand.getParameters().getBaseImage().getStoragePoolId(), org.ovirt.engine.core.bll.MergeExtendCommand.getParameters().getBaseImage().getStorageIds().get(0), org.ovirt.engine.core.bll.MergeExtendCommand.getParameters().getBaseImage().getId(), imageId); parameters.setParentCommand(VdcActionType.MergeExtend); parameters.setParentParameters(org.ovirt.engine.core.bll.MergeExtendCommand.getParameters()); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RefreshVolume, parameters, org.ovirt.engine.core.bll.MergeExtendCommand.cloneContextAndDetachFromParent()); org.ovirt.engine.core.bll.MergeExtendCommand.log.info("Refreshing size of extended volume {} on hosts", imageId); }<END_MOD>
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.InstallModel model) { driver.edit(model); rbPublicKey.setValue(true); model.setAuthenticationMethod(AuthenticationMethod.PublicKey); displayPassPkWindow(false); rbPassword.addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { model.setAuthenticationMethod(AuthenticationMethod.Password); displayPassPkWindow(true); } }); rbPublicKey.addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { model.setAuthenticationMethod(AuthenticationMethod.PublicKey); displayPassPkWindow(false); } }); <START_MOD>}<END_MOD>
<START_MOD>public org.ovirt.engine.core.compat.Version getGroupCompatibilityVersion() { return lightVds.getCompatVersion(); }<END_MOD>
<START_MOD>private java.util.Comparator<java.lang.String> getSpiceLastStringComparator() { return ( a, b) -> { if (java.util.Objects.equals(a, b)) { return 0; } final java.lang.String spice = "spice"; if (spice.equals(a)) { return 1; } if (spice.equals(b)) { return -1; } return java.util.Comparator.<java.lang.String>naturalOrder().compare(a, b); }; }<END_MOD>
@org.junit.Before public void setUp() throws java.lang.Exception { injectorRule.bind(org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPoolPerCluster<END_MOD>.class, mock(org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPoolPerCluster<END_MOD>.class)); existingSnapshot = createSnapshot(existingSnapshotId); existingVm = createVm(existingVmId); existingSnapshot.setVmConfiguration(org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelperTest.EXISTING_VM_NAME); existingDiskImage = createDiskImage(existingImageId, existingImageGroupId); snapshotVmConfigurationHelper = spy(new org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper()); snapshotsManager = mock(org.ovirt.engine.core.bll.snapshots.SnapshotsManager.class); when(snapshotVmConfigurationHelper.getSnapshotManager()).thenReturn(snapshotsManager); setUpDaoMocks(); }
<START_MOD>private org.ovirt.engine.core.common.businessentities.network.HostNetworkQos getOverridingHostNetworkQos() { boolean qosAvailableAndSet = (networkDialogModel.getQosModel().getIsAvailable()) && (networkDialogModel.getQosOverridden().getEntity()); if (qosAvailableAndSet) { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = new org.ovirt.engine.core.common.businessentities.network.HostNetworkQos(); networkDialogModel.getQosModel().flush(qos); return qos; } else { return null; } }<END_MOD>
java.lang.String getFullPath(<START_MOD>final java.lang.String brandingRootPath, <END_MOD>final java.lang.String path) { java.lang.String result = null<START_MOD>; java.lang.String mergedPath = org.ovirt.engine.core.utils.servlet.ServletUtils.mergePaths(brandingRootPath, path)<END_MOD>; if ((path != null) && (org.ovirt.engine.core.utils.servlet.ServletUtils.isSane(<START_MOD>mergedPath<END_MOD>))) { result = <START_MOD>mergedPath<END_MOD>; } else { org.ovirt.engine.ui.frontend.server.gwt.BrandingServlet.log.error((( path   + <START_MOD>mergedPath<END_MOD>) +   is not sane } return result; }
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.core.compat.Event ev, java.lang.Object sender, org.ovirt.engine.core.compat.EventArgs args) { }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { if (result != null) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (result)).getReturnValue(); if (vm == null) { return; } org.ovirt.engine.ui.uicommonweb.models.pools.PoolDiskListModel poolDiskListModel = ((org.ovirt.engine.ui.uicommonweb.models.pools.PoolDiskListModel) (model)); poolDiskListModel.setVM(vm); poolDiskListModel.syncSearch(); } }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Export Domain is inactive. Data can be retrieved only when the Domain is activated java.lang.String theExportDomainIsInactiveMsg();
@org.junit.Before public void setup() { <START_MOD>vdsGroup1 = createVdsGroup<END_MOD>(); <START_MOD>vdsGroup2 = createVdsGroup<END_MOD>(); <START_MOD>when(vdsGroupDao<END_MOD>.<START_MOD>getAll<END_MOD>()).<START_MOD>thenReturn<END_MOD>(java.util.<START_MOD>Arrays<END_MOD>.<START_MOD>asList(vdsGroup1<END_MOD>, <START_MOD>vdsGroup2<END_MOD>))<START_MOD>;<END_MOD> <START_MOD>when(<END_MOD>perClusterProvider.get()<START_MOD>).thenReturn(clusterEnforcer1, clusterEnforcer2)<END_MOD>; <START_MOD>when(clusterEnforcer1<END_MOD>.<START_MOD>checkIfCurrentlyMigrating<END_MOD>()).<START_MOD>thenReturn<END_MOD>(<START_MOD>false<END_MOD>); <START_MOD>when(clusterEnforcer1<END_MOD>.<START_MOD>chooseNextVmToMigrate<END_MOD>(<START_MOD>)).thenReturn(vm1<END_MOD>); <START_MOD>when(clusterEnforcer2<END_MOD>.<START_MOD>checkIfCurrentlyMigrating<END_MOD>()<START_MOD>)<END_MOD>.<START_MOD>thenReturn<END_MOD>(<START_MOD>false<END_MOD>); <START_MOD>when(clusterEnforcer2<END_MOD>.<START_MOD>chooseNextVmToMigrate<END_MOD>()<START_MOD>)<END_MOD>.<START_MOD>thenReturn<END_MOD>(<START_MOD>vm2<END_MOD>); arem.wakeup(); }
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return <START_MOD>this.<END_MOD>sharedMacPoolModelProvider.getModel().getRemoveCommand(); }
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__UPDATE); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__PROVIDER); }
<START_MOD>private org.ovirt.engine.core.bll.context.CommandContext cloneOnlyEngineContext() { return commandContext.clone().withoutCompensationContext().withoutExecutionContext(); }<END_MOD>
private static boolean canPlugInterface(org.ovirt.engine.core.common.businessentities.network.VmNic iface, org.ovirt.engine.core.compat.Guid vdsGroupId) { <START_MOD>if<END_MOD> <START_MOD>(<END_MOD>org.ovirt.engine.core.bll.utils.VmDeviceUtils.<START_MOD>noOtherPluggedVmNicHasSameMacAddress<END_MOD>(<START_MOD>iface<END_MOD>))<START_MOD> { return true<END_MOD>; <START_MOD>}<END_MOD> boolean canPlugInterface = org.ovirt.engine.core.bll.utils.VmDeviceUtils.canPlugInterfaceInDc(<START_MOD>iface.getMacAddress()<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.utils.VmDeviceUtils.vdsGroupIdToDataCenterId(vdsGroupId)<END_MOD>); if (!canPlugInterface) { new org.ovirt.engine.core.bll.network.VmInterfaceManager().auditLogMacInUseUnplug(iface); } return canPlugInterface; }
<START_MOD>@java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel1 = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> domains = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>) (returnValue)); if (domains != null) { if (domains.isEmpty()) { PostImportLocalStorage(storageListModel1.context, false, storageListModel1.storageModel, org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().thereIsNoStorageDomainUnderTheSpecifiedPathMsg()); } else { storageListModel1.ImportLocalStorageAddDomain(domains); } } else { PostImportLocalStorage(storageListModel1.context, false, storageListModel1.storageModel, org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().failedToRetrieveExistingStorageDomainInformationMsg()); } }<END_MOD>
<START_MOD>public java.lang.Boolean getIsGeoRepSlave() { return isGeoRepSlave; }<END_MOD>
<START_MOD>private void storeRootPassword() { if (!(org.apache.commons.lang.StringUtils.isEmpty(params.getRootPassword()))) { metaData.put("password", params.getRootPassword()); } }<END_MOD>
@org.junit.Test public void testGetAllForClusterFilteredWithPermissionsNoPermissionsAndNoFilter() { java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> result = dao.getAllForCluster(cluster, org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID, false); org.ovirt.engine.core.dao.NetworkDAOTest.assertGetAllForClusterResult(result); }
<START_MOD>@java.lang.Override public void setAffinityLabelMap(java.util.Map<java.lang.String, java.lang.Object> affinityLabelMap) { }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> getAllVmNumaNodeByVdsNumaNodeId(org.ovirt.engine.core.compat.Guid vdsNumaNodeId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_numa_node_id", vdsNumaNodeId); java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = getCallsHandler().executeReadList("GetVmNumaNodeByVdsNumaNodeId", org.ovirt.engine.core.dao.<START_MOD>VmNumaNodeDAOImpl<END_MOD>.vmNumaNodeRowMapper, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.Integer>> numaNodesCpusMap = getAllNumaNodeCpuMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>>> vmNumaNodesPinMap = getAllVmNumaNodePinInfo(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { if (numaNodesCpusMap.containsKey(node.getId())) { node.setCpuIds(numaNodesCpusMap.get(node.getId())); } if (vmNumaNodesPinMap.containsKey(node.getId())) { node.setVdsNumaNodeList(vmNumaNodesPinMap.get(node.getId())); } } return vmNumaNodes; }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name", "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), getClusterId(action)); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); <START_MOD>java.lang.Boolean collapseSnapshots = org.ovirt.engine.api.common.util.QueryHelper.getBooleanMatrixParameter(uriInfo, "collapse_snapshots"); <END_MOD>if (<START_MOD>collapseSnapshots != null) { params.setCopyCollapse(collapseSnapshots); } if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if <END_MOD>((action.isSetVm()) && (action.getVm().<START_MOD>isSetName())) { params<END_MOD>.getVm().<START_MOD>setName<END_MOD>(action.getVm().<START_MOD>getName<END_MOD>()); } } <START_MOD>return doAction(VdcActionType.ImportVm, params, action); <END_MOD>}
@org.junit.Test public void encodeDecodeWithNonAsciiDiskAlias() throws java.lang.Exception { disk.setDiskAlias("áéíñ"); disk.setDiskDescription("DiskDescription"); assertDiskDescriptionMap(disk, org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandlerTest.generateDiskAliasJsonEntry(org.ovirt.engine.core.bll<START_MOD>.storage.disk<END_MOD>.MetadataDiskDescriptionHandlerTest.encodeString("áéíñ")), org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandlerTest.generateDiskDescriptionJsonEntry("DiskDescription"), org.ovirt.engine.core.bll<START_MOD>.storage.disk<END_MOD>.MetadataDiskDescriptionHandlerTest.generateEncodingJsonEntry(1)); org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandlerTest.assertDiskDescriptionDecoding(disk); }
<START_MOD>private org.ovirt.engine.core.compat.Guid getStoragePoolId(org.ovirt.engine.core.common.queries.GetVmTemplateParameters params) { return (params.getStoragePoolId()) != null ? params.getStoragePoolId() : (params.getVdsGroupId()) != null ? org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsGroupDao().get(params.getVdsGroupId()).getStoragePoolId() : null; }<END_MOD>
private void UpdateExternalHostModels() { boolean enabled = ((java.lang.Boolean) (getExternalHostProviderEnabled().getEntity())); if (enabled && ((getProviders().getItems()) == null)) { org.ovirt.engine.ui.frontend.AsyncQuery getProvidersQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getProvidersQuery.setModel(this); getProvidersQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Provider> providers = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Provider>) (result)); org.ovirt.engine.ui.uicommonweb.models.ListModel providersListModel = getProviders(); providers.add(0, null); providersListModel.setItems(providers); providersListModel.setIsChangable(true); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.<START_MOD>GetAllProvidersByType<END_MOD>(getProvidersQuery<START_MOD>, ProviderType.Foreman<END_MOD>); } else { getProviders().setIsChangable(enabled); getProviders().setSelectedItem(null); } }
public boolean isFastForwarding() { return (rateCycle[<START_MOD>org.ovirt.engine.ui.uicommonweb.models.GridTimer.<END_MOD>currentRate]) != (org.ovirt.engine.ui.uicommonweb.models.GridTimer.RATE.NORMAL); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__ATTACH); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__STORAGE__CONNECTION); }
protected boolean performImagesChecks() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImagesToCheck = org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(getImagesList(), <START_MOD>org.ovirt.engine.core.bll.snapshots.NOT_SHAREABLE_DISKS_ONLY<END_MOD>, <START_MOD>org.ovirt.engine.core.bll.snapshots.ACTIVE_DISKS_ONLY<END_MOD>); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(diskImagesToCheck); return validate(diskImagesValidator.diskImagesNotLocked()); }
@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.widget.table.column.Context context, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity object, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb) { org.ovirt.engine.core.common.businessentities.gluster.<START_MOD>GlusterVolumeAdvancedDetails advancedDetails = object.getAdvancedDetails(); org.ovirt.engine.core.common.businessentities.gluster.<END_MOD>GlusterVolumeSizeInfo sizeInfo = null; if (<START_MOD>advancedDetails != null) { sizeInfo = advancedDetails.getCapacityInfo(); if (sizeInfo != null) { setFreeSize(sizeInfo.getFreeSize().doubleValue()); setTotalSize(sizeInfo.getTotalSize().doubleValue()); setUsedSize(sizeInfo.getUsedSize().doubleValue()); setInUnit(SizeUnit.BYTES); } } super.render(context, (advancedDetails<END_MOD> == null<START_MOD> ? null : sizeInfo<END_MOD> == null<START_MOD> ? null : sizeInfo), sb<END_MOD>); }
<START_MOD>@java.lang.Override protected void syncSearch() { org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.setModel(this); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ret) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.IscsiBundle> items = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ret)).getReturnValue(); org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableListModel = ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (model)); searchableListModel.setItems(items); } }; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId()); params.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetIscsiBundlesByStoragePoolId, params, asyncQuery); }<END_MOD>
@org.junit.Test public void testRemove() { org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> result = dao.getByName(existing_net_name); assertNotNull(result); dao.remove(result.getId()); result = dao.getByName(existing_net_name); assertNull(result); }
<START_MOD>private void updatePassDiscardChangeabilityForDirectLun() { if (((getSanStorageModelBase()) != null) && ((getSanStorageModelBase().getAddedLuns()) != null)) { if (getSanStorageModelBase().getAddedLuns().isEmpty()) { getPassDiscard().setIsChangeable(false); } else { getPassDiscard().setIsChangeable(isLunSupportDiscard(getSanStorageModelBase().getAddedLuns().get(0).getEntity()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); if (!(getPassDiscard().getIsChangable())) { getPassDiscard().setEntity(false); } } } else if ((getLunDisk()) != null) { getPassDiscard().setIsChangeable(isLunSupportDiscard(getLunDisk().getLun()), org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.constants.discardIsNotSupportedByUnderlyingStorage()); } }<END_MOD>
private org.ovirt.engine.core.common.action.ColdMergeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.<START_MOD>common.businessentities.storage.DiskImage baseVolume, org.ovirt.engine.core.common.businessentities.storage.DiskImage topVolume<END_MOD>) { org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo = new org.ovirt.engine.core.common.businessentities.SubchainInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), <START_MOD>baseVolume, topVolume<END_MOD>); org.ovirt.engine.core.common.action.ColdMergeCommandParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeCommandParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStoragePoolId(), subchainInfo); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }
<START_MOD>@java.lang.Override protected void initTemplateDisks(java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disks) { adjustInstanceImages(disks); super.initTemplateDisks(disks); }<END_MOD>
<START_MOD>private void addLabels(org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig newConfig) { java.util.Set<java.lang.String> labels = new java.util.HashSet<>(); labels.add("lbl1"); labels.add("lbl2"); labels.add("lbl3"); labels.add("lbl4"); newConfig.setLabels(labels); }<END_MOD>
<START_MOD>@java.lang.Override protected void getNics(org.ovirt.engine.ui.frontend.AsyncQuery getNicsQuery, org.ovirt.engine.core.compat.Guid id) {<END_MOD> org.ovirt.engine.ui.uicommonweb.<START_MOD>dataprovider<END_MOD>.<START_MOD>AsyncDataProvider<END_MOD>.<START_MOD>getVmNicList(getNicsQuery,<END_MOD> <START_MOD>id<END_MOD>); }
private static java.net.HttpURLConnection create(java.net.URL url) throws java.io.IOException, java.security.GeneralSecurityException { return new org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder(url).setHttpsProtocol(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_SERVICE_SSL_PROTOCOL")).setReadTimeout(0).setTrustManagerAlgorithm(javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()).setTrustStore(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty(<START_MOD>"ENGINE_SSO_PKI_TRUST_STORE"<END_MOD>)).setTrustStorePassword(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().<START_MOD>getProperty("ENGINE_SSO_PKI_TRUST_STORE_PASSWORD"<END_MOD>)).setTrustStoreType(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().<START_MOD>getProperty("ENGINE_SSO_PKI_TRUST_STORE_TYPE"<END_MOD>)).setURL(url).setVerifyChain(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getBoolean("ENGINE_SSO_SERVICE_SSL_VERIFY_CHAIN")).setVerifyHost(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getBoolean("ENGINE_SSO_SERVICE_SSL_VERIFY_HOST")).create(); }
<START_MOD>public java.lang.String getServiceName() { return serviceName; }<END_MOD>
private void setVmWatchdogToParams(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, org.ovirt.engine.core.common.action.VmTemplateParametersBase updateVmParams) { org.ovirt.engine.core.common.businessentities.VmWatchdogType wdModel = <START_MOD>org.ovirt.engine.core.common.businessentities.VmWatchdogType.getByName(<END_MOD>model.<START_MOD>getWatchdogModelWithPlaceHolderEditor<END_MOD>().getSelectedItem(<START_MOD>)<END_MOD>); updateVmParams.setUpdateWatchdog(true); if (wdModel != null) { org.ovirt.engine.core.common.businessentities.VmWatchdog vmWatchdog = new org.ovirt.engine.core.common.businessentities.VmWatchdog(); vmWatchdog.setAction(model.getWatchdogAction().getSelectedItem()); vmWatchdog.setModel(wdModel); updateVmParams.setWatchdog(vmWatchdog); } }
<START_MOD>@org.junit.Before public void setUp() throws java.lang.Exception { org.ovirt.engine.ui.frontend.Frontend.setAppErrorsTranslator(mockCanDoActionErrorsTranslator); org.ovirt.engine.ui.frontend.Frontend.setVdsmErrorsTranslator(mockVdsmErrorsTranslator); Frontend.QueryCompleteEvent = queryCompleteEvent; Frontend.QueryStartedEvent = queryStartEvent; Frontend.frontendNotLoggedInEvent = frontendNotLoggedInEvent; org.ovirt.engine.ui.frontend.Frontend.Subscribe(new org.ovirt.engine.core.common.queries.VdcQueryType[]{ org.ovirt.engine.core.common.queries.VdcQueryType.Search }); org.ovirt.engine.ui.frontend.Frontend.setEventsHandler(mockEventsHandler); Frontend.constants = mockConstants; when(mockAsyncQuery.getContext()).thenReturn("test"); when(mockAsyncQuery.getDel()).thenReturn(mockAsyncCallback); }<END_MOD>
@java.lang.Override protected void ReadOsSection(XmlNode section) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(section.Attributes.get("ovf:id").getValue())); XmlNode node = section.SelectSingleNode("Description"); if (node != null) { _vmTemplate.<START_MOD>setOs<END_MOD>(org.ovirt.engine.core.common.businessentities.VmOsType.valueOf(node.InnerText)); } else { _vmTemplate.<START_MOD>setOs<END_MOD>(VmOsType.Unassigned); } }
public org.ovirt.engine.core.common.businessentities.NonOperationalReason getNonOperationalReason() { return mVdsDynamic.getNonOperationalReason(); }
@org.junit.experimental.theories.Theory public void lastVmListNotIncludingExternalVm(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { stubCalls(data); assertTrue(vmsListFetcher.fetch()); assumeTrue(((data.vdsmVm()) != null)); assumeTrue(((data.dbVm()) != null)); verify(vdsManager).setLastVmsList(vdsManagerArgumentCaptor.capture()); assertEquals(data.vdsmVm().getVmDynamic(), vdsManagerArgumentCaptor.getValue().get(0)<START_MOD>.getDynamicData()<END_MOD>); }
<START_MOD>public void setDomainMap(java.util.Map<java.lang.String, java.lang.Object> domainMap);<END_MOD>
@org.junit.Test public void testCreateDecoratedTwoRequestsToGetDifferentlyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); <START_MOD>org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPoolA = factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)); org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPoolB = factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorB)); <END_MOD>assertThat(<START_MOD>decoratedPoolA, is<END_MOD>(macPoolDecoratorA)); assertThat(<START_MOD>decoratedPoolB, is<END_MOD>(macPoolDecoratorB)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor1 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy<START_MOD>, times(2)<END_MOD>).createLockingInstance(eq(<START_MOD>macPool<END_MOD>), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), <START_MOD>any<END_MOD>()); }
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String mountPoint = ((getDefaultMountFolder().getEntity()) + "/") + (getLvName().getEntity()); getMountPoint().setEntity(mountPoint); }<END_MOD>
private void init() { setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editLogicalNetworkTitle()); setHelpTag(HelpTag.edit_logical_network); setHashName("edit_logical_network"); getName().setEntity(getNetwork().getName()); getDescription().setEntity(getNetwork().getDescription()); getComment().setEntity(getNetwork().getComment()); getIsStpEnabled().setEntity(getNetwork().getStp()); getHasVLanTag().setEntity(((getNetwork().getVlanId()) != null)); getVLanTag().setEntity(getNetwork().getVlanId()); initMtu(); initIsVm(); <START_MOD>getExternal<END_MOD>().setEntity(getNetwork().isExternal()); <START_MOD>getExternal<END_MOD>().setIsChangeable(false); getExternalProviders().setIsChangeable(false); <START_MOD>getPhysicalNetwork().setEntity(isConnectedToPhysicalNetwork()); getPhysicalNetwork().setIsChangeable(false); <END_MOD>if (<START_MOD>isConnectedToPhysicalNetwork()) { getPhysicalNetworkDatacentre().setEntity(false); } getPhysicalNetworkDatacentreRB().setIsChangeable(false); getPhysicalNetworkCustomRB().setIsChangeable(false); getDatacentrePhysicalNetwork().setIsChangeable(false); if ((<END_MOD>getNetwork().isExternal()) <START_MOD>&& (isConnectedToPhysicalNetwork())) <END_MOD>{ getNeutronPhysicalNetwork().setEntity(getNetwork().getLabel()); } else { getNetworkLabel().setSelectedItem(getNetwork().getLabel()); } toggleProfilesAvailability(); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel templateListModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel) (target)); boolean isNameUnique = ((java.lang.Boolean) (returnValue)); <START_MOD>org.ovirt.engine.core.common.businessentities.VmTemplate selectedItem = ((org.ovirt.engine.ui.uicommonweb.models.vms.TemplateVmModelBehavior) (model.getBehavior())).getVmTemplate(); if ((!<END_MOD>isNameUnique)<START_MOD> && ((name.compareToIgnoreCase(selectedItem.getName())) != 0)) { model.getName().getInvalidityReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().nameMustBeUniqueInvalidReason()); model.getName().setIsValid(false); model.setValidTab(TabName.GENERAL_TAB, false); return<END_MOD>; }<START_MOD> }<END_MOD>
<START_MOD>org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeRebalanceTaskReturnForXmlRpc glusterVolumeRebalanceStatus(java.lang.String volumeName);<END_MOD>
private void initializeGeoRepActionConfirmation(java.lang.String title, org.ovirt.engine.ui.uicommonweb.help.HelpTag helpTag, java.lang.String hashName, java.lang.String forceHelp, java.lang.String forceLabelText, java.lang.String commandName, java.lang.String masterVolumeName, java.lang.String slaveVolumeName, java.lang.String slaveHostName) { org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeGeoRepActionConfirmationModel cModel<START_MOD>; if ((getWindow()) != null) { cModel<END_MOD> = <START_MOD>((org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeGeoRepActionConfirmationModel) (getWindow())); } else { cModel = <END_MOD>new org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeGeoRepActionConfirmationModel(); cModel.setTitle(title); <START_MOD>} <END_MOD>cModel.setHelpTag(helpTag); cModel.setHashName(hashName); setWindow(cModel); cModel.initWindow(masterVolumeName, slaveVolumeName, slaveHostName); cModel.setForceHelp(forceHelp); cModel.setForceLabel(forceLabelText); <START_MOD>java.util.List<<END_MOD>org.ovirt.engine.ui.uicommonweb.UICommand<START_MOD>> geoRepActionCommands<END_MOD> = <START_MOD>java.util.Arrays.asList(<END_MOD>org.ovirt.engine.ui.uicommonweb.UICommand<START_MOD>.createDefaultOkUiCommand<END_MOD>(commandName, this)<START_MOD>, org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("closeWindow", this)); if ((<END_MOD>cModel.getCommands()<START_MOD>) != null) { cModel.setCommands(geoRepActionCommands<END_MOD>); }<START_MOD> }<END_MOD>
protected void init() { org.ovirt.engine.core.bll.TagsDirector.log.info(<START_MOD>(<END_MOD> <START_MOD>initializing   + (this.getClass().getSimpleName())));<END_MOD> tagsMapByID.clear(); tagsMapByName.clear(); org.ovirt.engine.core.common.businessentities.tags root = new org.ovirt.engine.core.common.businessentities.tags("root", null, true, org.ovirt.engine.core.bll.TagsDirector.ROOT_TAG_ID, "root"); AddTagToHash(root); AddChildren(root); <START_MOD>org.ovirt.engine.core.bll.TagsDirector.log.info(( initializing   + (this.getClass().getSimpleName()))); <END_MOD>}
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((correlationId) == null ?   : correlationId.hashCode()); result = (prime * result) + ((description) == null ?   : description.hashCode()); result = (prime * result) + ((endTime) == null ?   : endTime.hashCode()); result = (prime * result) + ((externalSystem) == null ?   : externalSystem.hashCode()); result = (prime * result) + ((id) == null ?   : id.hashCode()); result = (prime * result) + ((jobId) == null ?   : jobId.hashCode()); result = (prime * result) + ((parentStepId) == null ?   : parentStepId.hashCode()); result = (prime * result) + ((startTime) == null ?   : startTime.hashCode()); result = (prime * result) + ((status) == null ?   : status.hashCode()); result = (prime * result) + (stepNumber); result = (prime * result) + ((stepType) == null ?   : stepType.hashCode()); result = (prime * result) + ((steps) == null ?   : steps.hashCode()); <START_MOD>result = (prime * result) + (isExternal ? 1231 : 1237); <END_MOD>return result; }
@java.lang.Override protected <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>common.utils.ToStringBuilder<END_MOD> <START_MOD>appendAttributes(org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.utils.ToStringBuilder<END_MOD> <START_MOD>tsb<END_MOD>) { <START_MOD>return<END_MOD> super.<START_MOD>appendAttributes<END_MOD>(<START_MOD>tsb<END_MOD>).<START_MOD>append<END_MOD>("baseInterface", getBaseInterface()).<START_MOD>append<END_MOD>("vlanId", getVlanId()); }
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (!(getShowEligibleVolumes().getEntity())) { getVolumesForForceSessionCreate(); } else { getEligibleVolumes(); setRecommendationViolations(null); } }<END_MOD>
@org.ovirt.engine.ui.frontend.DefaultStringValue( switch Host to Maintenance mode. still has running VMs on it and is in Non<START_MOD> <END_MOD>Responsive state. java.lang.String VDS_CANNOT_MAINTENANCE_VDS_IS_NOT_RESPONDING_WITH_VMS();
@java.lang.Override protected org.ovirt.engine.api.model.NIC <START_MOD>doPopulate<END_MOD>(org.ovirt.engine.api.model.NIC model, org.ovirt.engine.core.common.businessentities.VmNetworkInterface entity) { return addStatistics(model, entity, uriInfo, httpHeaders); }
<START_MOD>@java.lang.SuppressWarnings("ConstantConditions") <END_MOD>private org.ovirt.engine.core.common.businessentities.network.IPv4Address getPrimaryAddress() { <START_MOD>org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = getIpConfigurationOfNetworkAttachment(); <END_MOD>return <START_MOD>ipConfiguration<END_MOD>.getIpv4PrimaryAddress(); }
private java.util.<START_MOD>Map<END_MOD><org.ovirt.engine.core.compat.Guid<START_MOD>, org.ovirt.engine.core.compat.Guid<END_MOD>> mapDisks(org.ovirt.engine.api.model.DiskAttachments diskAttachments) { java.util.<START_MOD>Map<END_MOD><org.ovirt.engine.core.compat.Guid<START_MOD>, org.ovirt.engine.core.compat.Guid<END_MOD>> <START_MOD>diskToImageIds<END_MOD> = null; if (diskAttachments.isSetDiskAttachments()) { <START_MOD>diskToImageIds<END_MOD> = diskAttachments.getDiskAttachments().stream().map(DiskAttachment::getDisk).filter(java.util.Objects::nonNull).map(( d) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (org.ovirt.engine.api.restapi.types.DiskMapper.map(d, null)))).<START_MOD>collect(java.util.stream.Collectors.toMap<END_MOD>(BaseDisk::getId<START_MOD>, DiskImage::getImageId<END_MOD>)); } return <START_MOD>diskToImageIds<END_MOD>; }
public static void addVmInitToDB(org.ovirt.engine.core.common.businessentities.VmBase vm) { if ((vm.getVmInit()) != null) { vm.getVmInit().setId(vm.getId()); org.ovirt.engine.core.dao.VmInitDAO db = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmInitDao(); <START_MOD>org.ovirt.engine.core.common.businessentities.VmInit oldVmInit = db.get(vm.getId()); <END_MOD>if (<START_MOD>oldVmInit<END_MOD> == null) { db.save(vm.getVmInit()); } else { <START_MOD>if (vm.getVmInit().isPasswordSet()) { vm.getVmInit().setRootPassword(oldVmInit.getRootPassword()); } <END_MOD>db.update(vm.getVmInit()); } } }
public void setHighlyAvailableGlobalMaintenance(boolean value) { mVdsStatistics.setHighlyAvailableGlobalMaintenance(value); }
@java.lang.Override protected void executeVdsBrokerCommand() { <START_MOD>if<END_MOD> ((org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStoragePoolVDSCommand.getParameters().<START_MOD>isRefreshOnly<END_MOD>())<START_MOD> && (!(isPoolWithoutMetadata()))) { refreshStoragePool()<END_MOD>; <START_MOD>proceedConnectProxyReturnValue<END_MOD>(); }<START_MOD> else { connectStoragePool(); proceedConnectProxyReturnValue(); } }<END_MOD>
@java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.VDS p) { return (p.getvm_count()) < (vmCountTemp * (<START_MOD>org.ovirt.engine.core.bll.VdsSelector.geteffective_cpu_cores(<END_MOD>p))); }
public static org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand, java.lang.String description, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType> entitiesMap) { return org.ovirt.engine.core.bll.tasks.<START_MOD>CommandCoordinatorImpl<END_MOD>.getInstance().createTask(taskId, command, asyncTaskCreationInfo, parentCommand, description, entitiesMap); }
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.RngSources.class, to = VmRngDevice.Source.class) public static java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice.Source> mapRngSources(org.ovirt.engine.api.model.RngSources model, java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice.Source> template) { if ((model.getSource()) != null) { java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice.Source> result = new java.util.ArrayList<>(); for (java.lang.String sourceString : model.getSource()) { try { result.add(VmRngDevice.Source.valueOf(sourceString)); } catch (java.lang.IllegalArgumentException iae) { } } return result; } return null; }<END_MOD>
protected java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> getAllOVFDisks() { if ((ovfDisks) == null) { ovfDisks = new java.util.ArrayList(); java.util.List<org.ovirt.engine.core.common.businessentities.Disk> unregisteredDisks = <START_MOD>getUnregisteredDisks<END_MOD>(); for (org.ovirt.engine.core.common.businessentities.Disk disk : unregisteredDisks) { org.ovirt.engine.core.common.businessentities.DiskImage ovfStoreDisk = ((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)); java.lang.String diskDecription = ovfStoreDisk.getDescription(); if (diskDecription.contains(OvfInfoFileConstants.OvfStoreDescriptionLabel)) { java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap; try { diskDescriptionMap = org.ovirt.engine.core.utils.JsonHelper.jsonToMap(diskDecription); } catch (java.io.IOException e) { log.warnFormat( while generating json containing ovf store info. Exception: {0} e); continue; } if (!(isDomainExistsInDiskDescription(diskDescriptionMap, org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getParameters().getStorageDomainId()))) { log.warnFormat( disk description does not contain the storage domain id {0} org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getParameters().getStorageDomainId()); continue; } ovfDisks.add(ovfStoreDisk); } } } return ovfDisks; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeModel volumeModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>) (result)); org.ovirt.engine.core.common.businessentities.VDSGroup oldCluster = volumeModel.getCluster().getSelectedItem(); org.ovirt.engine.core.common.businessentities.StoragePool selectedDataCenter = getDataCenter().getSelectedItem(); java.util.Iterator<org.ovirt.engine.core.common.businessentities.VDSGroup> iterator = clusters.iterator(); while (iterator.hasNext()) { if (!(iterator.next().supportsGlusterService())) { iterator.remove(); } } if ((clusters.isEmpty()) || (((clusters.size()) > 0) && (clusters.get(0).getStoragePoolId().equals(selectedDataCenter.getId())))) { volumeModel.getCluster().setItems(clusters); if (oldCluster != null) { org.ovirt.engine.core.common.businessentities.VDSGroup newSelectedItem = org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(clusters, new org.ovirt.engine.ui.uicommonweb.Linq.<START_MOD>IdPredicate<END_MOD>(oldCluster.getId())); if (newSelectedItem != null) { volumeModel.getCluster().setSelectedItem(newSelectedItem); } } if ((volumeModel.getCluster().getSelectedItem()) == null) { volumeModel.getCluster().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(clusters)); } } }
<START_MOD>@org.junit.Test public void testDeleteAllUnusedIcons() { reinitializeDatabase(); prepareDao().removeAllUnusedIcons(); reinitializeDatabase(); }<END_MOD>
protected void initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); org.ovirt.engine.core.<START_MOD>compat.Guid vdsToRunOn<END_MOD> = org.ovirt.engine.core.bll.scheduling.SchedulingManager.getInstance().schedule(org.ovirt.engine.core.bll.MigrateVmCommand.getVdsGroup(), org.ovirt.engine.core.bll.MigrateVmCommand.getVm(), getVdsBlackList(), getVdsWhiteList(), <START_MOD>getDestinationVdsId(<END_MOD>), new java.util.ArrayList<java.lang.String>(), new org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(this), org.ovirt.engine.core.bll.MigrateVmCommand.getCorrelationId()); setDestinationVdsId(vdsToRunOn); if ((vdsToRunOn != null) && (!(Guid.Empty.equals(vdsToRunOn)))) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn); } org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); <START_MOD>if (((destinationVdsId) !=<END_MOD> null<START_MOD>) && (destinationVdsId.equals(Guid.Empty))) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.RESOURCE_MANAGER_CANT_ALLOC_VDS_MIGRATION); }<END_MOD> if (((<START_MOD>getDestinationVds()) ==<END_MOD> null) <START_MOD>|| ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null<END_MOD>)) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.<START_MOD>RESOURCE_MANAGER_VDS_NOT_FOUND<END_MOD>); } }
public java.lang.Boolean getKvmEnabled() { return mVdsDynamic.getKvmEnabled(); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Template java.lang.String copyTemplateTitle();
<START_MOD>private static java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> populateRecords(final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension, final java.lang.String namespace, final org.ovirt.engine.api.extensions.ExtMap input) { final java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> records = new java.util.ArrayList<>(); org.ovirt.engine.core.sso.search.DirectoryUtils.queryImpl(extension, namespace, input, new org.ovirt.engine.core.sso.search.DirectoryUtils.QueryResultHandler() { @java.lang.Override public boolean handle(java.util.Collection<org.ovirt.engine.api.extensions.ExtMap> queryResults) { boolean result = true; for (org.ovirt.engine.api.extensions.ExtMap queryResult : queryResults) { if ((records.size()) < (org.ovirt.engine.core.sso.search.DirectoryUtils.QUERIES_RESULTS_LIMIT)) { records.add(queryResult); } else { result = false; break; } } return result; } }); return records; }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultMessage("MTU override is not supported for Cluster version {0}") java.lang.String mtuOverrideNotSupported(java.lang.String version);<END_MOD>
@java.lang.Override protected org.ovirt.engine.core.common.action.VdcActionParametersBase getAddParameters(org.ovirt.engine.core.common.businessentities.VmWatchdog entity, org.ovirt.engine.api.model.WatchDog device) { org.ovirt.engine.core.common.action.WatchdogParameters watchdogParameters = new org.ovirt.engine.core.common.action.WatchdogParameters(); watchdogParameters.setAction(<START_MOD>getMapper(org.ovirt.engine.api.restapi.types.WatchdogAction.class, org.ovirt.engine.core.common.businessentities.VmWatchdogAction.class).map(org.ovirt.engine.api.restapi.types.WatchdogAction.valueOf(org.apache.commons.lang.StringUtils.upperCase(device<END_MOD>.getAction())<START_MOD>), null))<END_MOD>; watchdogParameters.setModel(<START_MOD>getMapper(org.ovirt.engine.api.restapi.types.WatchdogModel.class, org.ovirt.engine.core.common.businessentities.VmWatchdogType.class).map(org.ovirt.engine.api.restapi.types.WatchdogModel.valueOf(org.apache.commons.lang.StringUtils.upperCase(device<END_MOD>.getModel())<START_MOD>), null))<END_MOD>; watchdogParameters.setId(parentId); watchdogParameters.setVm(isVm(parentId)); return watchdogParameters; }
@org.junit.Test public void encodeDecodeWithNonAsciiDiskAliasAndDescription() throws java.lang.Exception { disk.setDiskAlias("áéíñáéíñ"); disk.setDiskDescription("áéíñ"); assertDiskDescriptionMap(disk, org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandlerTest.generateDiskAliasJsonEntry(org.ovirt.engine.core.bll<START_MOD>.storage.disk<END_MOD>.MetadataDiskDescriptionHandlerTest.encodeString("áéíñáéíñ")), org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandlerTest.generateDiskDescriptionJsonEntry(org.ovirt.engine.core.bll<START_MOD>.storage.disk<END_MOD>.MetadataDiskDescriptionHandlerTest.encodeString("áéíñ")), org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandlerTest.generateEncodingJsonEntry(3)); org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandlerTest.assertDiskDescriptionDecoding(disk); }
<START_MOD>public static boolean isDisplayTypeSupported(int osId, org.ovirt.engine.core.common.businessentities.DisplayType defaultDisplayType, java.util.List<java.lang.String> reasons, org.ovirt.engine.core.compat.Version clusterVersion) { if (defaultDisplayType == (org.ovirt.engine.core.common.businessentities.DisplayType.vnc)) { return true; } else if (defaultDisplayType == (org.ovirt.engine.core.common.businessentities.DisplayType.qxl)) { boolean result = org.ovirt.engine.core.bll.validator.VmValidationUtils.hasSpiceSupport(osId, clusterVersion); if (!result) { reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_VM_DISPLAY_TYPE_IS_NOT_SUPPORTED_BY_OS.toString()); } return result; } return true; }<END_MOD>
<START_MOD>public java.util.List<org.ovirt.engine.core.common.businessentities.NumaNode> getNumaNodesList() { if ((_numa_nodes_list) == null) { _numa_nodes_list = parseNumaNodes(getnuma_nodes()); } return _numa_nodes_list; }<END_MOD>
protected java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainStatic> filterAttachedStorageDomains() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> connectedStorageDomainsToVds = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain : org.ovirt.engine.core.bll.storage.GetStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageDomainList()) { if (!(connectStorageDomain(storageDomain))) { logErrorMessage(storageDomain); } else { connectedStorageDomainsToVds.add(storageDomain); } } java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainStatic> storageDomainsWithAttachedStoragePoolId = getAttachedStorageDomains(connectedStorageDomainsToVds); for (org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain : connectedStorageDomainsToVds) { if (<START_MOD>containsRunningVMs(storageDomain)) { log.warn( disconnect Storage Domain {} from VDS '{}' because it has running VMs on it.   storageDomain.getName(), getVdsId()); continue; } if (<END_MOD>!(disconnectStorageDomain(storageDomain))) { log.warn( not disconnect Storage Domain {} from VDS '{}'.   storageDomain.getName(), getVdsId()); } } return storageDomainsWithAttachedStoragePoolId; }
<START_MOD>public void testValidateClonedDisk() { org.ovirt.engine.core.bll.validator.StorageDomainValidator sdValidator = new org.ovirt.engine.core.bll.validator.StorageDomainValidator(sd); assertEquals((((((disk.getVolumeFormat()) + ", ") + (disk.getVolumeType())) + ", ") + (sd.getStorageType())), isValidForCloned, sdValidator.hasSpaceForClonedDisk(disk).isValid()); }<END_MOD>
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEnabledHtml() { return !(showTitle) ? enabledImage : !(imageAfterTitle) ? org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.TEMPLATES.imageTextButton(enabledImage, org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.<START_MOD>getText<END_MOD>()) : org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.TEMPLATES.textImageButton(org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.<START_MOD>getText<END_MOD>(), enabledImage); }
<START_MOD>public static org.ovirt.engine.core.common.businessentities.network.Network findManagentNetwork(java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks) { for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { if (org.ovirt.engine.ui.uicommonweb.Linq.isManagementNetwork(network)) { return network; } } return null; }<END_MOD>
protected void findUsers(java.lang.String searchString, org.ovirt.engine.ui.frontend.AsyncQuery query) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, new org.ovirt.engine.core.common.queries.<START_MOD>DirectorySearchParameters<END_MOD>(((("ADUSER@" + (((org.ovirt.engine.core.aaa.ProfileEntry) (getProfile().getSelectedItem())).getAuthz())) +     + searchString), org.ovirt.engine.core.common.interfaces.SearchType.DirectoryUser<START_MOD>, ((java.lang.String) (getNamespace().getSelectedItem()))<END_MOD>), query); }
<START_MOD>@org.junit.Test public void testBootProtocolSetForDisplayNetworkWhenBootProtocolIsNone() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = createNetworkAttachmentWithIpConfiguration(NetworkBootProtocol.NONE, null, null); attachment.setNetworkId(network.getId()); org.ovirt.engine.core.common.businessentities.VDS host = new org.ovirt.engine.core.common.businessentities.VDS(); host.setVdsGroupId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = new org.ovirt.engine.core.common.businessentities.network.NetworkCluster(); networkCluster.setDisplay(true); org.ovirt.engine.core.common.businessentities.network.NetworkClusterId networkClusterId = new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(host.getVdsGroupId(), attachment.getNetworkId()); when(networkClusterDaoMock.get(eq(networkClusterId))).thenReturn(networkCluster); when(networkDaoMock.get(org.mockito.Mockito.eq(network.getId()))).thenReturn(network); assertThat(new org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator(attachment, host).bootProtocolSetForDisplayNetwork(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_DISPLAY_NETWORK_HAS_NO_BOOT_PROTOCOL)); }<END_MOD>
<START_MOD>public static boolean canReadFile(final java.io.File file) { return ((null != file) && (file.exists())) && (file.canRead()); }<END_MOD>
@java.lang.Override protected void verify(org.ovirt.engine.api.model.Cluster model, org.ovirt.engine.api.model.Cluster transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getComment(), transform.getComment()); assertNotNull(transform.getCpu()); assertEquals(model.getCpu().getId(), transform.getCpu().getId()); assertNotNull(transform.getDataCenter()); assertEquals(model.getDataCenter().getId(), transform.getDataCenter().getId()); assertNotNull(transform.getSchedulingPolicy()); assertEquals(model.getSchedulingPolicy().<START_MOD>getId(), transform.getSchedulingPolicy().getId()); assertEquals(model.getSchedulingPolicy().<END_MOD>getPolicy(), transform.getSchedulingPolicy().getPolicy()); assertEquals(model.<START_MOD>getSchedulingPolicy().getName(), transform.getSchedulingPolicy().getName()); assertNotNull(model.getSchedulingPolicyProperties()); assertEquals(org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.toMap(model.getSchedulingPolicyProperties()), org.ovirt.engine.api.restapi.utils.CustomPropertiesParser.toMap(transform.getSchedulingPolicyProperties())); assertEquals(model.<END_MOD>getErrorHandling().getOnError(), transform.getErrorHandling().getOnError()); assertNotNull(transform.getMemoryPolicy()); assertNotNull(transform.getMemoryPolicy().getTransparentHugepages()); assertEquals(transform.getMemoryPolicy().getTransparentHugepages().isEnabled(), transform.getMemoryPolicy().getTransparentHugepages().isEnabled()); assertEquals(model.isVirtService(), transform.isVirtService()); assertEquals(model.isGlusterService(), transform.isGlusterService()); assertEquals(model.isTunnelMigration(), transform.isTunnelMigration()); assertEquals(model.isTrustedService(), transform.isTrustedService()); assertEquals(model.isBallooningEnabled(), transform.isBallooningEnabled()); assertEquals(model.getKsm().isEnabled(), transform.getKsm().isEnabled()); assertEquals(model.getDisplay().getProxy(), transform.getDisplay().getProxy()); assertEquals(model.getSerialNumber().getPolicy(), transform.getSerialNumber().getPolicy()); assertEquals(model.getSerialNumber().getValue(), transform.getSerialNumber().getValue()); }
<START_MOD>@org.junit.Test public void testPopulate() throws java.lang.Exception { setupParentExpectations(); setUriInfo(setUpBasicUriExpectations()); setUpGetEntityExpectationsAllContent(1, false); resource.setParent(bricksResourceMock); control.replay(); verifyModel(resource.get(), 0); }<END_MOD>
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.network.NetworkSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(ginjector.getApplicationConstants().networkHostSubTabLabel(), <START_MOD>3<END_MOD>, ginjector.getSubTabNetworkHostModelProvider()); }
void registerModelEventListeners(final org.ovirt.engine.ui.common.uicommon.model.ModelProvider<? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel> modelProvider) { modelProvider.getModel().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if ("IsAvailable".equals(<START_MOD>args<END_MOD>.propertyName)) { boolean isAvailable = modelProvider.getModel().getIsAvailable(); setAccessible(isAvailable); } } }); }
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel createEmptyModel(org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel host) { final org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel emptyModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel(); emptyModel.getPmType().setItems(getPmTypes()); emptyModel.setHost(host); emptyModel.setOrder(((getItems().size()) + 1)); return emptyModel; }<END_MOD>
@org.junit.Test public void canDoActionFailsNullParameterForIsoFile() { mockVdsWithOsVersion(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.VALID_OVIRT_VERSION); org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.createParameters(); param.setoVirtIsoFile(null); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand<org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters> command = createCommand(param); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.assertFailsWithCanDoActionMessage(command, <START_MOD>EngineMessages<END_MOD>.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE); }
<START_MOD>@java.lang.Override protected boolean validate() { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.getForStoragePool(org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.storage.lease.VmLeaseCommandBase.getParameters().getStoragePoolId()); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(domain); return (validate(validator.isDomainExistAndActive())) && (validate(validator.isDataDomain())); }<END_MOD>
private void handleRadioButtonClick(com.google.gwt.event.dom.client.ClickEvent event) { getDetailModel().setViewFilterType(viewRadioGroup.getSelectedValue()); boolean attached = (viewRadioGroup.getSelectedValue()) == (org.ovirt.engine.ui.uicommonweb.models.networks.NetworkHostFilter.attached); getTable().ensureColumnPresent(hostStatus, constants.empty(), true, "30px"); getTable().ensureColumnPresent(nameColumn, constants.nameHost(), true, "200px"); getTable().ensureColumnPresent(clusterColumn, constants.clusterHost(), true, "200px"); getTable().ensureColumnPresent(dcColumn, constants.dcHost(), true, "200px"); getTable().ensureColumnPresent(nicStatusColumn, constants.statusNetworkHost(), attached, "140px"); getTable().ensureColumnPresent(nicColumn, constants.nicNetworkHost(), attached, "100px"); getTable().ensureColumnPresent(speedColumn, templates.sub(constants.speedNetworkHost(), constants.mbps()).asString(), attached, "100px"); getTable().ensureColumnPresent(nicRxColumn, templates.sub(constants.rxNetworkHost(), constants.mbps()).asString(), attached, "100px"); getTable().ensureColumnPresent(nicTxColumn, templates.sub(constants.txNetworkHost(), constants.mbps()).asString(), attached, "100px"); <START_MOD>getTable().ensureColumnPresent(totalRxColumn, templates.sub(constants.rxTotal(), constants.bytes()).asString(), attached, "100px"); getTable().ensureColumnPresent(totalTxColumn, templates.sub(constants.txTotal(), constants.bytes()).asString(), attached, "100px"); <END_MOD>}
<START_MOD>@org.ovirt.api.metamodel.annotations.Link types.NetworkLabel virtualFunctionAllowedLabels();<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { return java.util.Collections.singletonList(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.SYSTEM_OBJECT_ID, org.ovirt.engine.core.common.VdcObjectType.System, org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>AddStorageDomainCommand.getActionType().getActionGroup())); }
<START_MOD>public org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder addLabels(org.ovirt.engine.core.common.businessentities.network.NicLabel... nicLabels) { if (emptyParameters(nicLabels)) { return this; } if ((parameters.getLabels()) == null) { parameters.setLabels(new java.util.HashSet<org.ovirt.engine.core.common.businessentities.network.NicLabel>()); } parameters.getLabels().addAll(java.util.Arrays.asList(nicLabels)); return this; }<END_MOD>
<START_MOD>public void setIcon(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.NotChangableForVmInPoolEntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.IconWithDefault> icon) { this.icon = icon; }<END_MOD>
@org.junit.Test public void testCanDoActionStorageDomainIsFileStorage() { storageDomain.setStorageType(StorageType.NFS); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_ALIGNMENT_SCAN_STORAGE_TYPE); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("VM") java.lang.String vmRoleTree();
<START_MOD>private java.util.List<java.util.Map<java.lang.String, java.lang.Object>> parseChannels(org.ovirt.engine.core.utils.ovf.xml.XmlDocument document, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> db = devices.stream().filter(( d) -> (d.getType()) == VmDeviceGeneralType.CHANNEL).collect(java.util.stream.Collectors.toList()); if (db.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); for (org.ovirt.engine.core.utils.ovf.xml.XmlNode node : document.selectNodes("//*/channel")) { java.util.Map<java.lang.String, java.lang.Object> dev = new java.util.HashMap<>(); dev.put(VdsProperties.Device, "channel"); dev.put(VdsProperties.Address, parseAddress(node)); java.lang.String alias = parseAlias(node); dev.put(VdsProperties.Alias, alias); java.util.Optional<org.ovirt.engine.core.common.businessentities.VmDevice> dbDev = db.stream().filter(( d) -> d.getAlias().equals(alias)).findFirst(); if (dbDev.isPresent()) { dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } else { dbDev = db.stream().filter(( d) -> d.getAlias().isEmpty()).findFirst(); dbDev.get().setAlias(alias); dev.put(VdsProperties.DeviceId, dbDev.get().getId().getDeviceId().toString()); } result.add(dev); } return result; }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult diskImagesNotIllegal() { return diskImagesNotInStatus(ImageStatus.ILLEGAL, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISKS_ILLEGAL); }
<START_MOD>@java.lang.Override public void onSuccess(java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storages) { if ((storages != null) && ((storages.size()) > 0)) { java.lang.String storageName = storages.get(0).getStorageName(); onFinish(context, false, storageModel, org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().createOperationFailedDcGuideMsg(storageName)); } else { saveNewPosixStorage(); } }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__ADD); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__CLUSTER_POLICY); }
protected boolean isDiskCanBeAddedToVm(org.ovirt.engine.core.common.businessentities.storage.Disk diskInfo, org.ovirt.engine.core.common.businessentities.VM vm) { if ((!(diskInfo.isDiskSnapshot())) && (diskInfo.isBoot())) { for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : vm.getDiskMap().values()) { if ((disk.isBoot()) && (!(disk.isDiskSnapshot()))) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_DISK_BOOT_IN_USE); org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().add(java.lang.String.format( %1$s disk.getDiskAlias())); org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().add(java.lang.String.format( %1$s vm.getName())); return false; } } } return true; }
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.VDS.class, to = org.ovirt.engine.api.model.ForemanHost.class) public static org.ovirt.engine.api.model.ForemanHost map(org.ovirt.engine.core.common.businessentities.VDS entity, org.ovirt.engine.api.model.ForemanHost template) { org.ovirt.engine.api.model.ForemanHost model = (template != null) ? template : new org.ovirt.engine.api.model.ForemanHost(); java.lang.String name = entity.getName(); if (name != null) { model.setId(string2hex(name)); model.setName(name); } if ((entity.getHostName()) != null) { model.setAddress(entity.getHostName()); } return model; }<END_MOD>
<START_MOD>public void loadEntitiesNameMap() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getEntitiesNameMap(new org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AsyncQuery(new org.ovirt.engine.ui.frontend.AsyncCallback<java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String>>() { @java.lang.Override public void onSuccess(java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.String> nameMap) { entitiesNameMap.getEntity().clear(); entitiesNameMap.getEntity().putAll(nameMap); entitiesNameMap.getEntityChangedEvent().raise(org.ovirt.engine.ui.uicommonweb.models.configure.labels.list.AffinityLabelListModel.this, EventArgs.EMPTY); } })); }<END_MOD>
@org.junit.Test public void testUpdateLastAdminCheckStatus() { org.ovirt.engine.core.common.businessentities.aaa.DbUser nonAdminUser = dbFacade.getDbUserDao().getByUsernameAndDomain(<START_MOD>"user2@testportal.redhat.com"<END_MOD>, "testportal.redhat.com"); assertNotNull(nonAdminUser); assertFalse(nonAdminUser.isAdmin()); dao.updateLastAdminCheckStatus(nonAdminUser.getId()); nonAdminUser = dbFacade.getDbUserDao().get(nonAdminUser.getId()); assertFalse(nonAdminUser.isAdmin()); org.ovirt.engine.core.common.businessentities.Permission perms = new org.ovirt.engine.core.common.businessentities.Permission(); perms.setRoleType(RoleType.ADMIN); perms.setRoleId(org.ovirt.engine.core.dao.DbUserDaoTest.ADMIN_ROLE_TYPE_FROM_FIXTURE_ID); perms.setAdElementId(nonAdminUser.getId()); perms.setObjectId(org.ovirt.engine.core.dao.DbUserDaoTest.SYSTEM_OBJECT_ID); perms.setObjectType(VdcObjectType.System); dbFacade.getPermissionDao().save(perms); assertNotNull(dbFacade.getPermissionDao().get(perms.getId())); dao.updateLastAdminCheckStatus(nonAdminUser.getId()); nonAdminUser = dbFacade.getDbUserDao().get(nonAdminUser.getId()); assertTrue(nonAdminUser.isAdmin()); }
private void InitializeHelpers() { try { for (org.ovirt.engine.core.common.businessentities.StorageType storageType : org.ovirt.engine.core.common.businessentities.StorageType.values()) { java.lang.Class<?> actionType = null; java.lang.String formattedClassName = java.lang.String.format("%1$s.%2$s%3$s", org.ovirt.engine.core.bll.storage.StorageHelperDirector.ACTION_TYPE_PACKAGE, storageType.name(), org.ovirt.engine.core.bll.storage.StorageHelperDirector.ACTION_TYPE_CLASS); try { actionType = java.lang.Class.forName(formattedClassName); } catch (java.lang.ClassNotFoundException cnfe) { org.ovirt.engine.core.bll.storage.StorageHelperDirector.log.<START_MOD>debug<END_MOD>(( Error:: the lookup for following class has failed:   + formattedClassName), cnfe); } if (actionType != null) { java.lang.reflect.Constructor<?> info = actionType.getConstructors()[0]; org.ovirt.engine.core.bll.storage.IStorageHelper currentHelper = ((org.ovirt.engine.core.bll.storage.IStorageHelper) (info.newInstance(null))); _helpers.put(storageType, currentHelper); } } } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.storage.StorageHelperDirector.log.error( Error:: exception was encountered during InitializeHelpers() execution ex); throw new org.ovirt.engine.core.compat.ApplicationException( missing exception ex); } }
<START_MOD>public void setGlusterNetwork(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel model, boolean value) { if (!(isMultiCluster())) { if (value) { if ((getGlusterNetwork()) != null) { getGlusterNetwork().setGlusterNetwork(false); } } else { managementNetwork.setGlusterNetwork(true); } } model.setGlusterNetwork(value); }<END_MOD>
<START_MOD>public static boolean isMemoryToBeHotplugged(org.ovirt.engine.core.common.businessentities.VM source, org.ovirt.engine.core.common.businessentities.VM destination) { return (source.getMemSizeMb()) < (destination.getMemSizeMb()); }<END_MOD>
@org.junit.Test public void refuseBalloonOnPPC() { final org.ovirt.engine.core.bll.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> c = setupDiskSpaceTest(createParameters()); addBalloonToVm(c.getVmFromExportDomain(null)); c.getParameters().getVm().setClusterArch(ArchitectureType.ppc64); org.ovirt.engine.core.common.businessentities.VDSGroup cluster = new org.ovirt.engine.core.common.businessentities.VDSGroup(); cluster.setArchitecture(ArchitectureType.ppc64); cluster.setCompatibilityVersion(org.ovirt.engine.core.compat.Version.getLast()); doReturn(cluster).when(c).getVdsGroup(); doReturn(true).when(c).validateImages(any(java.util.Map.class)); when(osRepository.isBalloonEnabled(c.getParameters().getVm().getVmOsId(), cluster.getCompatibilityVersion())).thenReturn(false); assertFalse(c.canDoAction()); assertTrue(c.getReturnValue().getCanDoActionMessages().contains(<START_MOD>EngineMessages<END_MOD>.BALLOON_REQUESTED_ON_NOT_SUPPORTED_ARCH.toString())); }
private static org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo nextAsyncTaskCreationInfo() { org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo info = new org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo(); info.setStepId(org.ovirt.engine.core.compat.Guid.NewGuid()); info.setStoragePoolID(org.ovirt.engine.core.compat.Guid.NewGuid()); info.<START_MOD>setVdsmTaskId<END_MOD>(org.ovirt.engine.core.compat.Guid.NewGuid()); info.setTaskType(org.ovirt.engine.core.utils.RandomUtils.instance().nextEnum(org.ovirt.engine.core.common.asynctasks.AsyncTaskType.class)); return info; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Cancel") java.lang.String cancel();
public org.ovirt.engine.core.bll.ValidationResult unplugPlugNotRequired() { return (liveActionRequired()) && (propertiesRequiringUnplugPlugWereUpdated()) ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.CANNOT_PERFORM_HOT_UPDATE) : org.ovirt.engine.core.bll.ValidationResult.VALID; }
<START_MOD>public void storeValue(final java.lang.String key, final java.lang.String value) { getOperationManager().store(key, value); }<END_MOD>
<START_MOD>private boolean validateName(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData data) { if (data.getClone().getEntity()) { return true; } for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (vm.getName().equals(data.getVm().getName())) { if (!(vm.getId().equals(data.getVm().getId()))) { data.setError(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().vmWithSameNameExists()); return false; } } } return true; }<END_MOD>
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.VDSGroup> list = ((java.util.ArrayList<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.VDSGroup>) (source)); java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer()); return list; } return new java.util.ArrayList<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.VDSGroup>(); }
private void buildIdToUnameLookup() { try { java.lang.String[] uniqueNames = preferences.node(<START_MOD>org.ovirt.engine.core.common.osinfo.OsRepositoryImpl.OS_ROOT_NODE<END_MOD>).childrenNames(); idToUnameLookup = new java.util.HashMap<java.lang.Integer, java.lang.String>(uniqueNames.length); for (java.lang.String uniqueName : java.util.Arrays.asList(uniqueNames)) { java.util.prefs.Preferences idNode = getKeyNode(uniqueName, "id", null); if (idNode != null) { idToUnameLookup.put(idNode.getInt("value", 0), uniqueName); } } } catch (java.util.prefs.BackingStoreException e) { throw new java.lang.RuntimeException(( to initialize Os Repository due to   + e)); } }
private void gatherNonRunningVms(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.<START_MOD>VM<END_MOD>> dbVms) { for (org.ovirt.engine.core.common.businessentities.<START_MOD>VM<END_MOD> dbVm : dbVms.values()) { if (!(vdsmVms.containsKey(dbVm.getId()))) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, null)); } } }
private void changeCD(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs e) { org.ovirt.engine.ui.uicommonweb.models.configure.ChangeCDModel model = ((org.ovirt.engine.ui.uicommonweb.models.configure.ChangeCDModel) (sender)); java.lang.String isoName = model.getTitle(); if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(isoName, org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().noCds())) { return; } java.lang.Object tempVar = getSelectedItem(); org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) ((tempVar instanceof org.ovirt.engine.core.common.businessentities.VM) ? tempVar : null)); if (vm == null) { return; } org.ovirt.engine.ui.frontend.Frontend.<START_MOD>getInstance().runMultipleAction<END_MOD>(VdcActionType.ChangeDisk, new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(java.util.Arrays.asList(new org.ovirt.engine.core.common.action.VdcActionParametersBase[]{ new org.ovirt.engine.core.common.action.ChangeDiskCommandParameters(vm.getId(), (org.ovirt.engine.core.compat.StringHelper.stringsEqual(isoName, ConsoleModel.EjectLabel) ? "" : isoName)) })), new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { } }, null); }
@org.junit.Test public void testSave() { dao.save(newAdGroup); org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD> result = dao.getByName(newAdGroup.getname()); assertEquals(newAdGroup, result); }
public void setLocalItem(java.lang.String key, java.lang.String value) { if ((org.ovirt.engine.ui.common.system.ClientStorage.localStorage) != null) { org.ovirt.engine.ui.common.system.ClientStorage.localStorage.setItem(<START_MOD>getItemKey(<END_MOD>key<START_MOD>)<END_MOD>, value); } else { com.google.gwt.user.client.Cookies.setCookie(<START_MOD>getItemKey(<END_MOD>key<START_MOD>)<END_MOD>, value, new java.util.Date(((new java.util.Date().getTime()) + (org.ovirt.engine.ui.common.system.ClientStorage.PERSISTENT_COOKIE_EXPIRATION)))); } }
<START_MOD>@java.lang.Override @javax.ws.rs.Path("numanodes") public org.ovirt.engine.api.resource.VmNumaNodesResource getVmNumaNodesResource() { return null; }<END_MOD>
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if ((((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return <START_MOD>failValidate<END_MOD>(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } return super.<START_MOD>validate<END_MOD>(); }
<START_MOD>private java.util.Map<java.lang.String, java.lang.Object>[] parseDevices(java.lang.String xml, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { org.ovirt.engine.core.utils.ovf.xml.XmlDocument document; try { document = new org.ovirt.engine.core.utils.ovf.xml.XmlDocument(xml); } catch (java.lang.Exception e) { return new java.util.Map[0]; } java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = new java.util.ArrayList<>(); result.add(parseBalloon(document, devices)); result.add(parseRng(document, devices)); result.addAll(parseVideos(document, devices)); result.add(parseWatchdog(document, devices)); result.addAll(parseControllers(document, devices)); result.addAll(parseInterfaces(document, devices)); result.addAll(parseChannels(document, devices)); return result.toArray(new java.util.Map[0]); }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllWithTemplate(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeReadList("GetVmsByVmtGuid", org.ovirt.engine.core.dao.<START_MOD>VmDAOImpl<END_MOD>.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("vmt_guid", id)); }
private void updatePath() { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (getWindow())); org.ovirt.engine.core.common.businessentities.VDS host = model.getHost().getSelectedItem(); org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.compat.Guid.Empty; if (host != null) { hostId = host.getId(); } org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel storageModel = model.<START_MOD>getCurrentItem<END_MOD>(); connection = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); connection.setid(storageDomain.getStorage()); connection.setconnection(path); connection.setstorage_type(storageModel.getType()); if (storageModel.getType().equals(StorageType.NFS)) { updateNFSProperties(storageModel); } else if (storageModel instanceof org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel) { updatePosixProperties(storageModel); } org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase parameters = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase(connection, hostId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UpdateStorageServerConnection, parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel) (result.getState())); storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel); } }, this); }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> o1, org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> o2) { return HostInterfaceListModel.ENGINE_NETWORK_NAME.equals(o1.getname()) ? -1 : o1.getname().compareTo(o2.getname()); }
@java.lang.Override public void addColumn(com.google.gwt.user.cellview.client.Column<T, ?> column, com.google.gwt.user.cellview.client.Header<?> header) { <START_MOD>if ((columnResizingEnabled) && (header instanceof org.ovirt.engine.ui.common.widget.table.header.AbstractCheckboxHeader)) { header = createResizableCheckboxHeader(header, column); } else if (columnResizingEnabled) { header = createResizableHeader(column, header); } else if ((applyHeaderStyle) && (header instanceof org.ovirt.engine.ui.common.widget.table.header.SafeHtmlHeader)) { org.ovirt.engine.ui.common.widget.table.header.SafeHtmlHeader safeHtmlHeader = ((org.ovirt.engine.ui.common.widget.table.header.SafeHtmlHeader) (header)); com.google.gwt.safehtml.shared.SafeHtml newValue = templates.nonResizeableColumnHeader(safeHtmlHeader.getValue()); header = new org.ovirt.engine.ui.common.widget.table.header.SafeHtmlHeader(newValue, safeHtmlHeader.getTooltip()); } <END_MOD>super.addColumn(column, <START_MOD>header<END_MOD>); if (columnResizingEnabled) { if ((emptyNoWidthColumn) != null) { removeColumn(emptyNoWidthColumn); } emptyNoWidthColumn = new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn<T>(); <START_MOD>super.<END_MOD>addColumn(emptyNoWidthColumn); } }
private org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Boolean> updateVdsNetworksInTx() { return new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean runInTransaction() {<START_MOD> java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(getInterfaces()); ifaces.addAll(getRemovedBonds().values());<END_MOD> org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CollectVdsNetworkData, new org.ovirt.engine.core.common.vdscommands.CollectHostNetworkDataVdsCommandParameters(getVds(), <START_MOD>ifaces<END_MOD>)); for (org.ovirt.engine.core.common.businessentities.network.Network net : getNetworks()) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus(getVdsGroupId(), net); } return java.lang.Boolean.TRUE; } }; }
<START_MOD>@java.lang.Override protected void executeIrsBrokerCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getIrsProxy().prepareMerge(org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getParameters().getStorageJobId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.FinalizeMergeVDSCommand.getParameters().getSubchainInfo().convertToVdsmMergeSnapshotsInfo()); }<END_MOD>
public <START_MOD>org.ovirt.engine.ui.common.widget.panel.AlertPanel<END_MOD> showAlert(final org.ovirt.engine.ui.common.widget.panel.AlertPanel.Type type, final com.google.gwt.safehtml.shared.SafeHtml message) {<START_MOD> final org.ovirt.engine.ui.common.widget.panel.AlertPanel alertPanel = createAlert(type, message);<END_MOD> com.google.gwt.core.client.Scheduler.ScheduledCommand command = new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { attachAlert(<START_MOD>alertPanel<END_MOD>); } }; if (canShowAlerts) { command.execute(); } else { deferredAlertCommands.add(command); } <START_MOD>return alertPanel; <END_MOD>}
public static void UpdateHardwareSystemInformation(<START_MOD>java.util.Map<END_MOD> hwInfo, org.ovirt.engine.core.common.businessentities.VDS vds) { vds.setHardwareManufacturer(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignStringValue(hwInfo, VdsProperties.hwManufacturer)); vds.setHardwareProductName(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignStringValue(hwInfo, VdsProperties.hwProductName)); vds.setHardwareVersion(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignStringValue(hwInfo, VdsProperties.hwVersion)); vds.setHardwareSerialNumber(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignStringValue(hwInfo, VdsProperties.hwSerialNumber)); vds.setHardwareUUID(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignStringValue(hwInfo, VdsProperties.hwUUID)); vds.setHardwareFamily(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignStringValue(hwInfo, VdsProperties.hwFamily)); }
public void setItems(java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel> value) { if ((items) != value) { itemsChanging(value, items); items = value; itemsChanged(); getItemsChangedEvent().raise(this, EventArgs.<START_MOD>empty<END_MOD>); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("Items")); } }
protected boolean validateParameters() { if ((getVdsGroup()) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_CLUSTER_FOR_AFFINITY_GROUP); } if ((getParameters().getAffinityGroup().getEntityIds()) != null) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = null; java.util.Set<org.ovirt.engine.core.compat.Guid> vmSet = new java.util.HashSet<>(); for (org.ovirt.engine.core.compat.Guid vmId : getParameters().getAffinityGroup().getEntityIds()) { vmStatic = getVmStaticDAO().get(vmId); if (vmStatic == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_VM_FOR_AFFINITY_GROUP); } if (!(java.util.Objects.equals(vmStatic.getVdsGroupId(), getVdsGroupId()))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_IN_AFFINITY_GROUP_CLUSTER); } if (vmSet.contains(vmStatic.getId())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DUPLICTE_VM_IN_AFFINITY_GROUP); } else { vmSet.add(vmStatic.getId()); } } } return <START_MOD>hasAffinityCollisions(getParameters()); }<END_MOD>
<START_MOD>public boolean isIncludeSeverHooks() { return includeSeverHooks; }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface createVdsNetworkInterface(java.lang.String name) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface(); vdsNetworkInterface.setName(name); return vdsNetworkInterface; }<END_MOD>
@java.lang.Override public int hashCode() { <START_MOD>return<END_MOD> <START_MOD>java.util.Objects.hash<END_MOD>(tagId<START_MOD>,<END_MOD> <START_MOD>userId<END_MOD>); }
<START_MOD>@org.junit.Test public void subnetChanged() { org.ovirt.engine.core.common.businessentities.network net = createNetwork("net"); mockExistingNetworks(net); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic = createNic("nic0", net.getName()); nic.setBootProtocol(NetworkBootProtocol.StaticIp); nic.setSubnet(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); mockExistingIfaces(nic); nic.setSubnet(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); validateAndAssertNetworkModified(net, nic); }<END_MOD>
@org.junit.Test public void testAllDomainsHaveSpaceForClonedDisksFail() { java.util.List<org.ovirt.engine.core.compat.Guid> sdIds = java.util.Arrays.asList(sdId1, sdId2); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList = generateDisksList(org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidatorTest.NUM_DISKS, sdIds); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = mock(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator.class); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(storageDomainValidator).hasSpaceForClonedDisks(anyList()); doReturn(storageDomainValidator).when(validator).getStorageDomainValidator(any(java.util.Map.Entry.class)); org.ovirt.engine.core.bll.ValidationResult result = validator.allDomainsHaveSpaceForClonedDisks(disksList); assertFalse(result.isValid()); assertEquals( validation error <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN, result.getMessage()); }
public abstract java.util.List<<START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String<END_MOD>> resolveMessage();
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator createDiskValidator() { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator(<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage()); }
public void setIsDisplayTabValid(boolean value) { if (value) { <START_MOD>invalidTabs.remove<END_MOD>(org.ovirt.engine.ui.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models.vms.UnitVmModel.UnitVmTabNames.CONSOLE_TAB); } else { invalidTabs.add<END_MOD>(<START_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.UnitVmTabNames.CONSOLE_TAB<END_MOD>); } }
protected org.codehaus.jackson.node.ObjectNode <START_MOD>getUserInfoObject<END_MOD>(<START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.businessentities.aaa.DbUser<END_MOD> <START_MOD>loggedInUser<END_MOD>, java.lang.<START_MOD>String<END_MOD> <START_MOD>engineSessionId, java.lang.String ssoToken<END_MOD>) { org.codehaus.jackson.node.ObjectNode obj = createObjectNode(); obj.put(<START_MOD>"id"<END_MOD>, <START_MOD>loggedInUser<END_MOD>.<START_MOD>getId()<END_MOD>.<START_MOD>toString<END_MOD>()); obj.put(<START_MOD>"userName"<END_MOD>, <START_MOD>loggedInUser<END_MOD>.<START_MOD>getLoginName()); obj<END_MOD>.<START_MOD>put("domain", loggedInUser<END_MOD>.<START_MOD>getDomain<END_MOD>()<START_MOD>); obj.put("engineSessionId", engineSessionId); obj.put("ssoToken", ssoToken<END_MOD>); return obj; }
@java.lang.Override protected void ExecuteVdsBrokerCommand() { status = snapshot(); org.ovirt.engine.core.vdsbroker.vdsbroker.SnapshotVDSCommand.ProceedProxyReturnValue(); }
<START_MOD>@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { this.getModel().getSelectedItems().remove(selectedLabel); this.refreshItems(); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterHookEnable(java.lang.String glusterCommand, java.lang.String level, java.lang.String hookName) { try { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = vdsServer.glusterHookEnable(glusterCommand, level, hookName); org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(xmlRpcReturnValue); return wrapper; } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }<END_MOD>
<START_MOD>public void refreshCdImages() { updateCdImage(); }<END_MOD>
<START_MOD>@org.junit.Test public void networkToSyncMovedToAnotherNic() { org.ovirt.engine.core.common.businessentities.Network net = createNetwork("net"); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic1 = createNicOnNetwork("nic0", net); nic1.setBridged((!(net.isVmNetwork()))); org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic2 = createNic("nic1", null); mockExistingNetworks(net); mockExistingIfaces(nic1, nic2); nic2.setNetworkName(nic1.getNetworkName()); nic1.setNetworkName(null); org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForSync(nic2.getNetworkName(), nic1, nic2)); validateAndAssertNetworkModified(helper, net); }<END_MOD>
@org.junit.Test public void testVmsWithIsoAttached() { setup(); mockDomain(); doReturn(domain).when(cmd).getStorageDomain(); doReturn(vmStaticDao).when(cmd).getVmStaticDao(); doReturn(vmDynamicDao).when(cmd).getVmDynamicDao(); org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic(); vmStatic.setName("TestVM"); vmStatic.setId(org.ovirt.engine.core.compat.Guid.newGuid()); doReturn(java.util.Collections.singletonList(vmStatic)).when(cmd).getVmsWithAttachedISO(); assertFalse(cmd.isRunningVmsWithIsoAttached()); assertTrue(cmd.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().contains(EngineMessage.ERROR_CANNOT_DEACTIVATE_STORAGE_DOMAIN_WITH_ISO_ATTACHED.toString())); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { if ((object.getVersion().getSelectedItem()) != null) { java.lang.String clusterVersion = object.getVersion().getSelectedItem().getValue(); serialNumberPolicyEditor.setVisible(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isSerialNumberPolicySupported(clusterVersion)); } }
<START_MOD>protected org.ovirt.engine.core.compat.Guid getStoragePoolId() { return org.ovirt.engine.core.bll.GetUnregisteredDisksQuery.getDbFacade().getStoragePoolDao().getAllForStorageDomain(getStorageDomainId()).get(0).getId(); }<END_MOD>
protected java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBricks(org.ovirt.engine.core.compat.Guid volumeId) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick1 = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick1.setVolumeId(volumeId); brick1.setId(<START_MOD>FixturesTool.GLUSTER_BRICK_UUID1<END_MOD>); brick1.setBrickDirectory("/tmp/test-vol0"); brick1.setServerId(SERVER_ID); brick1.setStatus(GlusterStatus.UP); bricks.add(brick1); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick2 = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick2.setVolumeId(volumeId); brick2.setId(<START_MOD>FixturesTool.GLUSTER_BRICK_UUID1<END_MOD>); brick2.setBrickDirectory("/tmp/test-vol1"); brick2.setServerId(SERVER_ID); brick2.setStatus(GlusterStatus.UP); bricks.add(brick2); return bricks; }
<START_MOD>@java.lang.Deprecated <END_MOD>@javax.ws.rs.POST @org.jboss.resteasy.annotations.providers.jaxb.Formatted @javax.ws.rs.Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON, MediaType.APPLICATION_X_YAML }) @org.ovirt.engine.api.model.Actionable @javax.ws.rs.Path("activate") public javax.ws.rs.core.Response activate(org.ovirt.engine.api.model.Action action);
public void onStorageModelUpdated(org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel model) { getModel().updatedStorageModels.add(model); if ((getModel().updatedStorageModels.size()) == (org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel>cast(getModel().getItems()).size())) { getModel().updatedStorageModels.clear(); getModel().getHost().setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); getModel().getHost().setSelectedItem(null); <START_MOD>setStorageItems<END_MOD>(); if ((getModel().<START_MOD>getCurrentItem<END_MOD>()) != null) { getModel().updateFormat(); } } }
private org.ovirt.engine.core.bll.ValidationResult reportMtuDifferences(java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ifaceNetworks) { java.util.List<java.lang.String> mtuDiffNetworks = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.network.Network net : ifaceNetworks) { mtuDiffNetworks.add(java.lang.String.format("%s(%s)", net.getName(), ((net.getMtu()) ==   ? "default" : java.lang.String.valueOf(net.getMtu())))); } java.lang.String replacements = java.lang.String.format("[%s]", commaSeparated(mtuDiffNetworks)); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.NETWORK_MTU_DIFFERENCES, replacements); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> getClustersWithPermittedAction(org.ovirt.engine.core.compat.Guid userId, org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("user_id", userId).addValue("action_group_id", actionGroup.getId()); return getCallsHandler().executeReadList("fn_perms_get_vds_groups_with_permitted_action", org.ovirt.engine.core.dao.<START_MOD>VdsGroupDAOImpl<END_MOD>.VdsGroupRowMapper.instance, parameterSource); }
private boolean networkNotAttachedToCluster() { if (networkExists()) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.NETWORK_ALREADY_ATTACHED_TO_CLUSTER); } return true; }
void save(org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD> group);
@org.junit.Test public void validateFailsForDifferentStorageDevice() { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice1 = getStorageDevice("sda"); org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice2 = getStorageDevice("sdb"); storageDevice2.setDevType("SDA"); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Arrays.asList(storageDevice1, storageDevice2)<START_MOD>, org.ovirt.engine.core.common.businessentities.CacheDevicePathType.sdb, org.ovirt.engine.core.common.businessentities.CacheModeType.writethrough, "10"<END_MOD>)).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
@org.junit.Test public void testQueryFailsIfWrongPassword() { mockQueryParameters(org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.NEW_SERVER, org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.WRONG_PASSWORD); try { getQuery().executeQueryCommand(); fail( didn fail when wrong password was passed! } catch (java.lang.RuntimeException e) { assertEquals(<START_MOD>EngineMessages<END_MOD>.SSH_AUTHENTICATION_FAILED.toString(), e.getMessage()); } }
private java.lang.String messageFormatter(java.lang.String msg, java.lang.String vmid<START_MOD>, java.lang.String module, java.lang.String callType<END_MOD>) { org.codehaus.jackson.node.ObjectNode vmDetailNode = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); vmDetailNode.put("status", msg); vmDetailNode.put("hash", java.lang.Integer.toString(vmid.hashCode())); org.codehaus.jackson.node.ObjectNode paramsNode = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); paramsNode.put(vmid.toString(), vmDetailNode); org.codehaus.jackson.node.ObjectNode node = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); node.put("params", paramsNode); node.put("jsonrpc", "2.0"); node.put("method", (<START_MOD>(((("|" + module) + "|") + callType) + "|")<END_MOD> + vmid)); return node.toString(); }
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> getPhysicalNetwork() { return physicalNetwork; }<END_MOD>
public org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters buildParameters(org.ovirt.engine.core.compat.Guid hostId, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networksToRemove, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters parameters = createSetupNetworksParameters(hostId); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicToConfigure = getNicToConfigure(parameters.getInterfaces(), nic.getId()); if (nicToConfigure == null) { throw new org.ovirt.engine.core.common.errors.<START_MOD>EngineException<END_MOD>(org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.LABELED_NETWORK_INTERFACE_NOT_FOUND); } java.util.Set<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsToRemove = getNicsToRemove(parameters.getInterfaces(), networksToRemove, nicToConfigure); parameters.getInterfaces().removeAll(nicsToRemove); } parameters.setNetworkNames(org.apache.commons.lang.StringUtils.join(org.ovirt.engine.core.common.businessentities.Entities.objectNames(networksToRemove),     return parameters; }
private void updateAdminStatus(org.ovirt.engine.core.common.businessentities.permissions perm) { org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD> role = org.ovirt.engine.core.bll.AddPermissionCommand.getRoleDao().get(perm.getrole_id()); if ((role.getType()) == (org.ovirt.engine.core.common.businessentities.RoleType.ADMIN)) { org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.setIsAdminGUIFlag(perm.getad_element_id(), true); } }
org.ovirt.engine.core.bll.ValidationResult validateCustomProperties(org.ovirt.engine.core.common.utils.customprop.SimpleCustomPropertiesUtil util, java.util.Map<java.lang.String, java.lang.String> validPropertiesForVm, java.util.Map<java.lang.String, java.lang.String> validPropertiesForNonVm) { for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : params.getNetworkAttachments()) { org.ovirt.engine.core.common.businessentities.network.Network network = existingNetworkRelatedToAttachment(attachment); if (attachment.hasProperties()) { if (!(networkCustomPropertiesSupported)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_NOT_SUPPORTED, <START_MOD>org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_NOT_SUPPORTED_LIST, <END_MOD>network.getName(<START_MOD>)<END_MOD>)); } java.util.List<org.ovirt.engine.core.common.utils.customprop.ValidationError> errors = util.validateProperties((network.isVmNetwork() ? validPropertiesForVm : validPropertiesForNonVm), attachment.getProperties()); if (!(errors.isEmpty())) { handleCustomPropertiesError(util, errors); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_BAD_INPUT, <START_MOD>org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.VAR_ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_BAD_INPUT_LIST, <END_MOD>network.getName())<START_MOD>)<END_MOD>; } } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private org.ovirt.engine.core.bll.ValidationResult validateNetworkExclusiveOnNics(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure) { return new org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator(attachmentsToConfigure, networkBusinessEntityMap<START_MOD>, networkExclusivenessValidator<END_MOD>).validateNetworkExclusiveOnNics(); }
public static void Init() { org.ovirt.engine.core.bll.VmHandler.mUpdateVmsStatic = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.bll.VmHandler.class, java.util.Arrays.asList(new java.lang.String[]{ "VM", "VmStatic", "VmDynamic" }), org.ovirt.engine.core.common.businessentities.VMStatus.class); org.ovirt.engine.core.bll.VmHandler.mUpdateVmsStatic.AddPermittedFields(new java.lang.String[]{ "vm_name", "description", "domain", "os", "osType", "creation_date", "num_of_monitors", "allowConsoleReconnect", "usb_policy", "is_auto_suspend", "auto_startup", "dedicated_vm_for_vds", "default_display_type", "priority", "default_boot_sequence", "initrd_url", "kernel_url", "kernel_params", "migrationSupport", "minAllocatedMem", "quotaId", "quotaName", "quotaEnforcementType", "cpuPinning", "vmPayload", "balloonEnabled" }); org.ovirt.engine.core.bll.VmHandler.mUpdateVmsStatic.AddFields(java.util.Arrays.asList(new java.lang.Enum<?>[]{ org.ovirt.engine.core.common.businessentities.VMStatus.Down }), java.util.Arrays.asList(new java.lang.String[]{ "vds_group_id", "time_zone", "is_stateless", "nice_level", "mem_size_mb", "num_of_sockets", "cpu_per_socket", "iso_path", "userDefinedProperties", "predefinedProperties", "customProperties"<START_MOD> })); org.ovirt.engine.core.bll.VmHandler.mUpdateVmsStatic.AddIgnoredFields(java.util.Arrays.asList(new java.lang.String[]{<END_MOD> "images", "interfaces" })); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.ForceRemoveStorageDomainCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.STORAGE, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }
<START_MOD>@org.ovirt.engine.ui.common.DefaultStringValue("When the VM is up, only non IDE disks are activated after attached.") java.lang.String activateVmDiskPopupToolTip();<END_MOD>
<START_MOD>public static java.util.List<? extends org.ovirt.engine.core.bll.CommandBase> findChildCommands(org.ovirt.engine.core.compat.Guid commandId) { final java.util.List<org.ovirt.engine.core.bll.CommandBase> childCommands = new java.util.ArrayList<>(); final java.util.List<org.ovirt.engine.core.compat.Guid> childCommandIds = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(commandId); for (org.ovirt.engine.core.compat.Guid childCommandId : childCommandIds) { final org.ovirt.engine.core.bll.CommandBase<?> childCommand = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand(childCommandId); childCommands.add(childCommand); } return childCommands; }<END_MOD>
<START_MOD>private org.ovirt.engine.core.bll.ValidationResult networkDoesNotExist(java.util.List<org.ovirt.engine.core.common.businessentities.Network> networks) { return (getNetworkByName(networks)) == null ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.NETWORK_NAME_ALREADY_EXISTS); }<END_MOD>
<START_MOD>private java.lang.Boolean hasAffinityCollisions(org.ovirt.engine.core.common.scheduling.parameters.AffinityGroupCRUDParameters parameters) { java.util.List<org.ovirt.engine.core.common.scheduling.AffinityGroup> affinity_groups = getAllAffinityGroups(parameters.getAffinityGroup().getClusterId()); affinity_groups.add(parameters.getAffinityGroup()); return getUnifiedAffinityGroups(affinity_groups); }<END_MOD>
private org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Boolean> updateVdsNetworksInTx(final T bckndCmdParams) { return new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean runInTransaction() { org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CollectVdsNetworkData, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(bckndCmdParams.getVdsId())); for (org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> net : getNetworks()) { org.ovirt.engine.core.bll.AttachNetworkToVdsGroupCommand.SetNetworkStatus(getVdsGroupId(), net); } return java.lang.Boolean.TRUE; } }; }
@java.lang.Override protected void executeCommand() { if (networkExists()) { org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getNetworkClusterDAO().update(getNetworkCluster()); } else { org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getNetworkClusterDAO().save(new org.ovirt.engine.core.common.businessentities.network.NetworkCluster(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getVdsGroupId(), getNetwork().getId(), org.ovirt.engine.core.common.businessentities.network.NetworkStatus.OPERATIONAL, false, getNetworkCluster().isRequired()<START_MOD>, getNetworkCluster().isMigration()<END_MOD>)); } if (getNetwork().getCluster().isDisplay()) { org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getNetworkClusterDAO().setNetworkExclusivelyAsDisplay(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getVdsGroupId(), getNetwork().getId()); } org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getVdsGroupId(), getNetwork()); org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.setSucceeded(true); }
private void chooseHostForExecution(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase parametersBase, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.bll.CommandBase<?> cmd, java.util.Collection<org.ovirt.engine.core.compat.Guid> executedHosts) { org.ovirt.engine.core.compat.Guid vdsForExecution = getHostForExecution(storagePoolId, executedHosts); parametersBase.setVdsId(vdsForExecution); if (cmd != null) { if (((cmd.getCommandStep()) != null) && ((cmd.getExecutionContext().getStep()) != null)) { org.ovirt.engine.core.compat.Guid stepId = cmd.getExecutionContext().getStep().getId(); if ((cmd.getParameters().getVdsRunningOn()) != null) { <START_MOD>stepSubjectEntityDao<END_MOD>.remove(cmd.getParameters().getVdsRunningOn(), stepId); } if (vdsForExecution != null) { <START_MOD>stepSubjectEntityDao<END_MOD>.saveAll(java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(stepId, org.ovirt.engine.core.common.VdcObjectType.EXECUTION_HOST, vdsForExecution))); } } cmd.getParameters().setVdsRunningOn(vdsForExecution); cmd.persistCommand(cmd.getParameters().getParentCommand(), ((cmd.getCallback()) != null)); } }
<START_MOD>@org.junit.Test public void qosNullAndSupported() throws java.lang.Exception { vnicProfileValidationTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid(), true, true, false, true); }<END_MOD>
@org.junit.Test public void testCanDoAction() { doReturn(true).when(cmd).validateVmNotDuringSnapshot(); vm.setStatus(VMStatus.Up); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, <START_MOD>EngineMessages<END_MOD>.VMT_CANNOT_CREATE_TEMPLATE_FROM_DOWN_VM); }
<START_MOD>private void addVmsToPool(org.ovirt.engine.core.compat.Guid poolId) { int subsequentFailedAttempts = 0; for (int i = 0; i < (org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmsCount()); i++) { java.lang.String currentVmName = generateUniqueVmName(); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.AddVmAndAttachToPool, buildAddVmAndAttachToPoolParameters(poolId, currentVmName), createAddVmStepContext(currentVmName)); if (((returnValue != null) && (!(returnValue.getSucceeded()))) && (!(returnValue.getCanDoActionMessages().isEmpty()))) { for (java.lang.String msg : returnValue.getCanDoActionMessages()) { if (!(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue().getCanDoActionMessages().contains(msg))) { org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue().getCanDoActionMessages().add(msg); } } addVmsSucceeded = false; subsequentFailedAttempts++; } else { subsequentFailedAttempts = 0; } if (subsequentFailedAttempts == (org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.VM_POOL_MAX_SUBSEQUENT_FAILURES)) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.USER_VM_POOL_MAX_SUBSEQUENT_FAILURES_REACHED); break; } } }<END_MOD>
<START_MOD>@java.lang.Override public void update() { }<END_MOD>
protected void updateCpuPinningVisibility() { if ((getModel().getCluster().getSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ((org.ovirt.engine.core.common.businessentities.VDSGroup) (getModel().getCluster().getSelectedItem())); <START_MOD>java.lang.String compatibilityVersion = cluster.getcompatibility_version().toString(); <END_MOD>boolean hasCpuPinning = <START_MOD>true; if (java.lang.Boolean.FALSE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigValuePreConverted(ConfigurationValues.CpuPinningEnabled<END_MOD>, <START_MOD>compatibilityVersion))) { hasCpuPinning = false; } else if ((java.lang.Boolean.FALSE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigValuePreConverted(ConfigurationValues.CpuPinMigrationEnabled, "general"))) && (isVmMigratable())) { hasCpuPinning = false; }<END_MOD> getModel().getCpuPinning().setIsAvailable(hasCpuPinning); if (!hasCpuPinning) { getModel().getCpuPinning().setEntity(""); } } }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue performImageVdsmOperation() { if (org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getParameters().isShouldLockImage()) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatusWithCompensation(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getRelevantDiskImage().getId(), ImageStatus.LOCKED, ImageStatus.ILLEGAL, org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getCompensationContext()); } return runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.domain.<START_MOD>ActionAfterDeleteHandler.fixParameters<END_MOD>(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().getId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().isWipeAfterDelete(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getParameters().getForceDelete()))); }
<START_MOD>@java.lang.Override protected void executeCommand() { if (getDiskImages().isEmpty()) { org.ovirt.engine.core.bll.SealVmTemplateCommand.setSucceeded(true); return; } org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters(); parameters.setVmId(org.ovirt.engine.core.bll.SealVmTemplateCommand.getParameters().getVmTemplateId()); parameters.setJobId(org.ovirt.engine.core.bll.SealVmTemplateCommand.getParameters().getHostJobId()); getDiskImages().forEach(( diskImage) -> parameters.addVolume(diskImage.getStorageIds().get(0), diskImage.getId(), diskImage.getImageId())); lockTemplateInDb(); lockDiskImagesInDb(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.runVdsCommandWithFailover(VDSCommandType.SealDisks, parameters, getDiskImages().get(0).getStoragePoolId(), this); if (!(vdsReturnValue.getSucceeded())) { setCommandStatus(CommandStatus.FAILED); unlockDiskImagesInDb(); unlockTemplateInDb(); } setSucceeded(vdsReturnValue.getSucceeded()); }<END_MOD>
protected org.ovirt.engine.core.compat.Guid getStoragePoolIdFromVds() { return org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>AttachStorageDomainToPoolCommand.getVds().getStoragePoolId(); }
<START_MOD>@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().runInternalQuery(VdcQueryType.GetAuthzGroupsByUserId, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId())); java.util.Collection<org.ovirt.engine.core.common.businessentities.aaa.AuthzGroup> authzGroups = returnValue.getReturnValue(); java.util.List<org.ovirt.engine.core.compat.Guid> groupsIds = authzGroups.stream().map(( g) -> dbGroupDao.getByExternalId(g.getAuthz(), g.getId())).filter(java.util.Objects::nonNull).map(( g) -> g.getId()).collect(java.util.stream.Collectors.toList()); org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getQueryReturnValue().setReturnValue(permissionDao.getAllForAdElementAndGroups(org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().getId(), groupsIds, org.ovirt.engine.core.bll.GetPermissionsOnBehalfByAdElementIdQuery.getParameters().isFiltered())); }<END_MOD>
<START_MOD>private java.lang.Integer getEngineSessionTimeout(java.lang.String sessionId) { return ((java.lang.Integer) (runPublicQuery(VdcQueryType.GetConfigurationValue, new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.UserSessionTimeOutInterval, org.ovirt.engine.core.common.config.ConfigCommon.defaultConfigurationVersion), sessionId))); }<END_MOD>
<START_MOD>public java.util.List<java.lang.String> getVmsNames() { return vmsNames; }<END_MOD>
private void <START_MOD>verifyDomainForMemory<END_MOD>(java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains<START_MOD>, org.ovirt.engine.core.common.businessentities.StorageDomain expectedStorageDomain<END_MOD>) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = memoryStorageHandler.findStorageDomainForMemory(storageDomains, disksList); <START_MOD>assertEquals<END_MOD>(<START_MOD>expectedStorageDomain, <END_MOD>storageDomain); }
@org.junit.Test public void networkBelongsToClusterDataCenterNotValid() throws java.lang.Exception { when(cluster.getStoragePoolId()).thenReturn(org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorTestBase.TEST_DC_ID1); when(network.getDataCenterId()).thenReturn(org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorTestBase.TEST_DC_ID2); assertThat(validator.networkBelongsToClusterDataCenter(cluster, network), both(failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NETWORK_FROM_DIFFERENT_DC)).and(replacements(org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorTestBase.hasItem(org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorTestBase.NETWORK_NAME_REPLACEMENT)))); }
<START_MOD>public javax.ws.rs.core.Response performImport() { org.ovirt.engine.core.common.businessentities.VM vm = loadExternalVm(); return performAction(VdcActionType.ImportVmFromExternalProvider, buildImportVmFromExternalProviderParameters(vm)); }<END_MOD>
<START_MOD>private java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage>> getStorageToDiskMap() { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage>> storageToDisksMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage>>(); for (org.ovirt.engine.core.common.businessentities.DiskImage disk : getSourceImages()) { org.ovirt.engine.core.utils.MultiValueMapUtils.addToMap(disk.getstorage_ids().get(0), disk, storageToDisksMap); } return storageToDisksMap; }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("UUID") java.lang.String hostUUIDGeneral();<END_MOD>
<START_MOD>@org.junit.Test public void testAddSupportedClusterFeature() { java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> previouslySupportedFeatures = dao.getSupportedFeaturesByClusterId(org.ovirt.engine.core.dao.ClusterFeatureDaoTest.EXISTING_VDS_GROUP); dao.addSupportedClusterFeature(buildSupportedFeature(org.ovirt.engine.core.dao.ClusterFeatureDaoTest.NEW_SUPPORTED_FEATURE_1, org.ovirt.engine.core.dao.ClusterFeatureDaoTest.EXISTING_VDS_GROUP, true)); java.util.Set<org.ovirt.engine.core.common.businessentities.SupportedAdditionalClusterFeature> supportedFeatures = dao.getSupportedFeaturesByClusterId(org.ovirt.engine.core.dao.ClusterFeatureDaoTest.EXISTING_VDS_GROUP); assertThat(supportedFeatures, hasSize(((previouslySupportedFeatures.size()) + 1))); }<END_MOD>
<START_MOD>private void endUnlockRelatedOperations() { org.ovirt.engine.core.bll.VmHandler.UnLockVm(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVm().getId()); org.ovirt.engine.core.bll.VmTemplateHandler.UnLockVmTemplate(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmTemplateId()); }<END_MOD>
<START_MOD>private void validateValues() { }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultMessage("Label {0} cannot be attached, it is already in use by interface {1}.") java.lang.String labelInUse(java.lang.String label, java.lang.String ifaceName);<END_MOD>
<START_MOD>public void setgluster_version(java.lang.String value) { this.gluster_version = value; }<END_MOD>
<START_MOD>private void sendWarningForNonExportableDisks(java.util.List<org.ovirt.engine.core.common.businessentities.Disk> nonExportableDisks) { if (!(nonExportableDisks.isEmpty())) { final java.lang.StringBuilder s = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.businessentities.Disk disk : nonExportableDisks) { if ((s.length()) > 0) { s.append(", "); } s.append(disk.getDiskAlias()); } getModel().setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().disksWillNotBePartOfTheExportedVMTemplate(s.toString())); } }<END_MOD>
@java.lang.Override public void onSelectionChange(com.google.gwt.view.client.SelectionChangeEvent event) { org.ovirt.engine.core.common.businessentities.<START_MOD>Bookmarks<END_MOD> selectedObject = selectionModel.getSelectedObject(); java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>Bookmarks<END_MOD>> selectedItems = (selectedObject != null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>Bookmarks<END_MOD>>(java.util.Arrays.asList(selectedObject)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>Bookmarks<END_MOD>>(); this.setSelectedItems(selectedItems); }
private void onConfigureVmsToImport() { final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel importVmsModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel) (getWindow())); if (importVmsModel == null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmFromExportDomainModel model = importVmsModel.getSpecificImportModel(); setWindow(null); setWindow(model); model.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand(org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.CMD_RESTORE_FROM_EXPORT_DOMAIN, new org.ovirt.engine.ui.uicommonweb.BaseCommandTarget() { @java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand uiCommand) { onRestoreFromExportDomain(<START_MOD>importVmsModel<END_MOD>); } }).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true)); model.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand(org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.CMD_BACK, new org.ovirt.engine.ui.uicommonweb.BaseCommandTarget() { @java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand uiCommand) { setWindow(null); setWindow(importVmsModel); } }).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().back())); model.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand(org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.CMD_CANCEL, this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()).setIsCancel(true)); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__ADD); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__LABEL); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.core.common.utils.PairQueryable<org.ovirt.engine.core.common.businessentities.VDSGroup, org.ovirt.engine.core.common.businessentities.network.NetworkCluster> object) { java.util.List<com.google.gwt.safehtml.shared.SafeHtml> images = new java.util.LinkedList<com.google.gwt.safehtml.shared.SafeHtml>(); if ((object.getSecond()) != null) { if (object.getSecond().isDisplay()) { images.add(displayImage); } else { images.add(emptyImage); } if (object.getSecond().isMigration()) { images.add(migrationImage); } else { images.add(emptyImage); } <START_MOD>if (object.getSecond().isGluster()) { images.add(glusterNwImage); } else { images.add(emptyImage); } <END_MOD>} return org.ovirt.engine.ui.webadmin.widget.table.column.NetworkRoleColumnHelper.getValue(images); }
private void createMenu(final java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> numaNodeList, int indexToSkip) { menuBar = new org.ovirt.engine.ui.common.widget.MenuBar(true); for (final org.ovirt.engine.core.common.businessentities.VdsNumaNode numaNode : numaNodeList) { final int nodeIndex = numaNode.getIndex(); menuBar.addItem(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.messages.numaNode(nodeIndex), <START_MOD>((<END_MOD>com.google.gwt.user.client.Command<START_MOD>) (() -><END_MOD> { org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(<START_MOD>this, nodeModel.getVm().getId(), true, nodeModel.getIndex(), nodeIndex); <END_MOD>org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.<START_MOD>menuPopup.hide(); }))); } if (nodeModel.isPinned()) { menuBar.addSeparator(); menuBar.addItem(<END_MOD>org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.constants.unPinNode(), <START_MOD>((<END_MOD>com.google.gwt.user.client.Command<START_MOD>) (() -><END_MOD> { org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(this, nodeModel.getVm().getId(), false, nodeModel.getIndex(), (-1)); org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.menuPopup.hide(); }<START_MOD>))); } }<END_MOD>
@org.junit.Test public void testGetAllForVmWithNonExistentVm() { java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> jobs = getAllForVm(Guid.Empty); assertTrue(jobs.isEmpty()); }
<START_MOD>protected boolean isVMPartOfManualPool(org.ovirt.engine.core.compat.Guid vmId) { final org.ovirt.engine.core.common.businessentities.VmPoolMap vmPoolMap = org.ovirt.engine.core.bll.RunVmCommand.getDbFacade().getVmPoolDao().getVmPoolMapByVmGuid(vmId); if (vmPoolMap == null) { return false; } final org.ovirt.engine.core.common.businessentities.VmPool vmPool = org.ovirt.engine.core.bll.RunVmCommand.getDbFacade().getVmPoolDao().get(vmPoolMap.getvm_pool_id()); return vmPool.getVmPoolType().equals(VmPoolType.Manual); }<END_MOD>
public static void GetMaxVmMemSize(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, boolean is64) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { return source; } return 262144; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters((is64 ? org.ovirt.engine.core.common.queries.ConfigurationValues.VM64BitMaxMemorySizeInMB : org.ovirt.engine.core.common.queries.ConfigurationValues.VM32BitMaxMemorySizeInMB), org.ovirt.engine.core.common.config.<START_MOD>ConfigCommon.defaultConfigurationVersion<END_MOD>), aQuery); }
@org.junit.Test public void testFailedRoDiskResize() { org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain(); sd.setAvailableDiskSize(java.lang.Integer.MAX_VALUE); sd.setStatus(StorageDomainStatus.Active); when(storageDomainDao.getForStoragePool(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(sd); org.ovirt.engine.core.common.action.UpdateVmDiskParameters parameters = createParameters(); ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (parameters.getDiskInfo())).setSize(((parameters.getDiskInfo().getSize()) * 2)); initializeCommand(parameters); org.ovirt.engine.core.common.businessentities.storage.DiskImage oldDisk = createDiskImage(); doReturn(oldDisk).when(command).getOldDisk(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = stubVmDevice(diskImageGuid, vmId); vmDevice.setIsReadOnly(true); assertFalse(command.validateCanResizeDisk()); org.ovirt.engine.core.bll.CanDoActionTestUtils.assertCanDoActionMessages( failure command, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_CANNOT_RESIZE_READ_ONLY_DISK); }
private static org.ovirt.engine.core.common.action.AddDiskParameters createParameters() { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(null, org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.vmId); dve.setDiskInterface(DiskInterface.IDE); <START_MOD>dve.setUsingScsiReservation(true); <END_MOD>return new org.ovirt.engine.core.common.action.AddDiskParameters(dve, image); }
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getPoolVms(org.ovirt.engine.core.compat.Guid poolId) { return getCallsHandler().executeReadList("GetPoolVmsFromVms", org.ovirt.engine.core.dao.VmDAODbFacadeImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("user_id", null).addValue("is_filtered", false).addValue("pool_id", poolId)); }<END_MOD>
<START_MOD>@org.junit.Test public void shouldFallbackToLastHost() { final org.ovirt.engine.core.common.businessentities.VM stoppedVM = new org.ovirt.engine.core.common.businessentities.VM(); stoppedVM.setLastVdsRunOn(currentHost.getId()); assertThat(filter(stoppedVM, tooOldHost, newEnoughHost)).containsOnly(newEnoughHost); }<END_MOD>
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<START_MOD><? extends org.ovirt.engine.ui.uicompat.EventArgs><END_MOD> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { hostModel.<START_MOD>setProtocolValue<END_MOD>(); }
<START_MOD>public void showProfileErrorWindow() { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel cModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getConfirmWindow())); if (cModel != null) { cModel.stopProgress(); cModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().volumeProfileStatisticsFailed(((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (getSelectedItem())).getName())); } }<END_MOD>
private org.ovirt.engine.core.compat.Guid getQuotaId() { if (((org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo()) != null) && ((org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE) == (org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo().getDiskStorageType()))) { org.ovirt.engine.core.compat.Guid quotaId = ((org.ovirt.engine.core.common.businessentities.DiskImage) (org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo())).getQuotaId(); if (!(Guid.Empty.equals(quotaId))) { return quotaId; } } return null; }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { slaveVolume = getSlaveVolume(); if ((slaveVolume) != null) { setGlusterVolumeId(slaveVolume.getId()); setVdsGroupId(slaveVolume.getClusterId()); } else { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID); } if ((slaveVolume.getStatus()) != (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED); } return super.<START_MOD>validate<END_MOD>(); }
<START_MOD>@org.junit.Test public void networkExists() throws java.lang.Exception { assertEquals(ValidationResult.VALID.getMessage(), validator.networkExists().getMessage()); }<END_MOD>
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.NetworkView> getNetwork() { return network; }<END_MOD>
<START_MOD>private void setUpEntityQueryExpectations(int times) throws java.lang.Exception { while ((times--) > 0) { setUpEntityQueryExpectations(VdcQueryType.GetVmTemplate, org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendTemplateCdromResourceTest.TEMPLATE_ID }, getEntityList()); } }<END_MOD>
public java.lang.String getIp() { return <START_MOD>(<END_MOD>ip<START_MOD>) != null ? ip : ""<END_MOD>; }
@org.junit.Test public void testNetworksUniquelyConfiguredOnHostWhenUniquelyConfigured() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network networkA = new org.ovirt.engine.core.common.businessentities.network.Network(); networkA.setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.network.Network networkB = new org.ovirt.engine.core.common.businessentities.network.Network(); networkB.setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachmentA = createNetworkAttachment(networkA); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachmentB = createNetworkAttachment(networkB); org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId()); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator(host, params, java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>emptyList(), null, new org.ovirt.engine.core.common.businessentities.BusinessEntityMap(java.util.Arrays.asList(networkA, networkB)), managementNetworkUtil<START_MOD>, mockNetworkExclusivenessValidatorResolver<END_MOD>); assertThat(validator.networksUniquelyConfiguredOnHost(java.util.Arrays.asList(networkAttachmentA, networkAttachmentB)), is(true)); }
<START_MOD>public java.util.List<org.ovirt.engine.core.common.businessentities.UnmanagedNetwork> getUnmanagedNetworks() { if ((unmanagedNetworks) == null) { unmanagedNetworks = calculateUnmanagedNetworks(); } return unmanagedNetworks; }<END_MOD>
<START_MOD>public boolean isThinProvisioning() { return thinProvisioning; }<END_MOD>
@org.junit.Test public void testSecuredEventMailSender() { org.ovirt.engine.core.common.businessentities.EventAuditLogSubscriber eventData = new org.ovirt.engine.core.common.businessentities.EventAuditLogSubscriber(); eventData.setlog_time(new java.util.Date()); eventData.setevent_type(0); eventData.setuser_name( test user name eventData.setvm_name( fine test VM eventData.setvds_name( fine test host eventData.setmethod_address("mailtest.redhat@gmail.com"); eventData.setvm_template_name( test template eventData.setstorage_pool_name( test storage pool name eventData.setstorage_domain_name( test storage pool domain eventData.setseverity(3); org.ovirt.engine.core.notifier.utils.NotificationProperties.setDefaults("src/test/resources/conf/notifier-mail-test-secured.conf", "src/test/resources/conf/missing.conf"); org.ovirt.engine.core.notifier.utils.sender.mail.<START_MOD>eventMailSender<END_MOD> mailSender = new org.ovirt.engine.core.notifier.utils.sender.mail.<START_MOD>eventMailSender<END_MOD>(org.ovirt.engine.core.notifier.utils.NotificationProperties.getInstance()); eventData.setmessage( test message to be sent via secured mode mailSender.send(eventData, null); org.ovirt.engine.core.notifier.utils.sender.EventSenderResult sentResult = null; try { sentResult = mailSender.send(eventData, null); } catch (java.lang.Exception e) { sentResult = new org.ovirt.engine.core.notifier.utils.sender.EventSenderResult(); sentResult.setSent(false); } assertTrue(sentResult.isSent()); }
protected void addVmInterfaces() { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(); java.util.List<java.lang.String> invalidNetworkNames = new java.util.ArrayList<java.lang.String>(); java.util.List<java.lang.String> invalidIfaceNames = new java.util.ArrayList<java.lang.String>(); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.Network> networksInVdsByName = org.ovirt.engine.core.common.businessentities.Entities.entitiesByName(getNetworkDAO().getAllForCluster(getVm().getvds_group_id())); for (org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : getVm().getInterfaces()) { initInterface(iface); if (!(vmInterfaceManager.isValidVmNetwork(iface, networksInVdsByName))) { invalidNetworkNames.add(iface.getNetworkName()); invalidIfaceNames.add(iface.getName()); iface.setNetworkName(StringUtils.EMPTY); } <START_MOD>if (<END_MOD>vmInterfaceManager.add(iface, getCompensationContext(), getParameters().isImportAsNewEntity())<START_MOD>) { macsAdded.add(iface.getMacAddress())<END_MOD>; } <START_MOD>} <END_MOD>auditInvalidInterfaces(invalidNetworkNames, invalidIfaceNames); }
@org.junit.Before public void setup() { <START_MOD>org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); command = spy(createCommand()); mockVds(); mockVmDevice(false); when(command.getActionType()).thenReturn(getCommandActionType()); org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = mock(org.ovirt.engine.core.bll.snapshots.SnapshotsValidator.class); doReturn(snapshotsValidator).when(command).getSnapshotsValidator(); doReturn(ValidationResult.VALID).when(snapshotsValidator).vmNotDuringSnapshot(any(org.ovirt.engine.core.compat.Guid.class)); doReturn(ValidationResult.VALID).when(snapshotsValidator).vmNotInPreview(any(org.ovirt.engine.core.compat.Guid.class)); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = mock(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator.class); doReturn(storageDomainValidator).when(command).getStorageDomainValidator(any(org.ovirt.engine.core.common.businessentities.StorageDomain.class)); doReturn(ValidationResult.VALID).when(storageDomainValidator).isDomainExistAndActive(); doReturn(vmNetworkInterfaceDao).when(command).getVmNetworkInterfaceDao(); <END_MOD>doReturn(diskValidator).when(command).getDiskValidator(disk); doReturn(ValidationResult.VALID).when(diskValidator).isDiskExists(); doReturn(ValidationResult.VALID).when(diskValidator).isDiskAttachedToVm(vm); }
public org.ovirt.engine.core.bll.ValidationResult providerExist() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST).when(((providerDao.get(libvirtSecret.getProviderId())) == null)); }
@org.junit.Test public void PctThresholdLessThanZero() { org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings settings = new org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings(); settings.diskSpaceFree = 10; settings.diskSpaceUsed = 0; settings.spaceThresholdGB = 5; settings.spaceThresholdPct = -10; org.ovirt.engine.core.common.businessentities.storage_domains domain = setupForSpaceTest(settings); assertTrue(org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.<START_MOD>isAboveThresholds<END_MOD>(domain)); }
protected boolean updateVmImSpm() {<START_MOD> org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(org.ovirt.engine.core.bll.ExportVmCommand.getVm());<END_MOD> return org.ovirt.engine.core.bll.<START_MOD>OvfDataUpdater<END_MOD>.<START_MOD>executeUpdateVmInSpmCommand(org.ovirt.engine.core.bll.ExportVmCommand.getVm().getstorage_pool_id(), org.ovirt.engine.core.bll.OvfDataUpdater.getVmsMetadataDictionary<END_MOD>(org.ovirt.engine.core.bll.ExportVmCommand.getVm().getstorage_pool_id(), java.util.Arrays.asList(org.ovirt.engine.core.bll.ExportVmCommand.getVm())<START_MOD>)<END_MOD>, org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getStorageDomainId()); }
@java.lang.Override public void initialize() { super.initialize(); disableNonChangeableEntities(); getAlias().setEntity(getDisk().getDiskAlias()); getDescription().setEntity(getDisk().getDiskDescription()); getIsShareable().setEntity(getDisk().isShareable()); getIsWipeAfterDelete().setEntity(getDisk().isWipeAfterDelete()); getIsScsiPassthrough().setEntity(getDisk().isScsiPassthrough()); getIsSgIoUnfiltered().setEntity(((getDisk().getSgio()) == (org.ovirt.engine.core.common.businessentities.ScsiGenericIO.UNFILTERED))); getIsReadOnly().setEntity(getDisk().getReadOnly()); if ((getDisk().getDiskStorageType()) == (Disk.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (getDisk())); getDiskStorageType().setEntity(<START_MOD>Disk.<END_MOD>DiskStorageType.IMAGE); getSize().setEntity(((int) (diskImage.getSizeInGigabytes()))); getVolumeType().setSelectedItem(diskImage.getVolumeType()); setVolumeFormat(diskImage.getVolumeFormat()); boolean isExtendImageSizeEnabled = (((getVm()) != null) && (!(diskImage.isDiskSnapshot()))) && (org.ovirt.engine.core.common.VdcActionUtils.canExecute(java.util.Arrays.asList(getVm()), org.ovirt.engine.core.common.businessentities.VM.class, VdcActionType.ExtendImageSize)); getSizeExtend().setIsChangable(isExtendImageSizeEnabled); <START_MOD>} else { org.ovirt.engine.core.common.businessentities.LunDisk lunDisk<END_MOD> = <START_MOD>((org.ovirt.engine.core.common.businessentities.LunDisk) (getDisk())); getDiskStorageType().setEntity(Disk.DiskStorageType.LUN); getSize().setEntity(lunDisk.getLun().getDeviceSize()); getSizeExtend().setIsAvailable(false<END_MOD>); } <START_MOD>updateReadOnlyChangeability(); <END_MOD>}
private void callPersistNetworkAttachmentsAndVerifyThatNetworkAttachmentIsSynced(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment<START_MOD>) {<END_MOD> org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister persister<START_MOD> = createPersister(java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>emptyList());<END_MOD> when(networkAttachmentDao.getAllForHost(eq(hostId))).thenReturn(java.util.Collections.singletonList(attachment)); persister.persistNetworkAttachments(); verify(networkAttachmentDao).getAllForHost(any(org.ovirt.engine.core.compat.Guid.class)); verify(networkAttachmentDao).update(argThat(new org.mockito.ArgumentMatcher<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>() { @java.lang.Override public boolean matches(java.lang.Object o) { if (!(o instanceof org.ovirt.engine.core.common.businessentities.network.NetworkAttachment)) { return false; } org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = org.ovirt.engine.core.utils.NetworkUtils.createIpConfigurationFromVdsNetworkInterface(interfaceWithAttachedClusterNetworkA); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = ((org.ovirt.engine.core.common.businessentities.network.NetworkAttachment) (o)); return ((((((networkAttachment.getId()) != null) && (networkAttachment.getId().equals(attachment.getId()))) && ((networkAttachment.getNicId()) != null)) && (networkAttachment.getNicId().equals(interfaceWithAttachedClusterNetworkA.getId()))) && (java.util.Objects.equals(networkAttachment.getIpConfiguration(), ipConfiguration))) && (java.util.Objects.equals(networkAttachment.getProperties(), customPropertiesForNics.getCustomPropertiesFor(interfaceWithAttachedClusterNetworkA))); } })); verifyNoMoreInteractions(networkAttachmentDao); }
<START_MOD>private static java.util.List<java.lang.String> assertCanDoActionMessages(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.errors.VdcBllMessages message) { java.util.List<java.lang.String> canDoActionMessages = command.getReturnValue().getCanDoActionMessages(); assertTrue(java.text.MessageFormat.format("canDoAction messages doesn''t contain expected message: {0}, messages are: {1}", message.name(), canDoActionMessages), canDoActionMessages.contains(message.name())); return canDoActionMessages; }<END_MOD>
<START_MOD>public void setProfile(T Profile) { this.profile = Profile; }<END_MOD>
@org.junit.Test public void testSetDetectEmulatedMachine() { boolean preUpdate = existingCluster.isDetectEmulatedMachine(); boolean updateValue = false; assertNotSame(<START_MOD>updateValue<END_MOD>, <START_MOD>preUpdate<END_MOD>); dao.setEmulatedMachine(existingCluster.getId(), existingCluster.getEmulatedMachine(), updateValue); assertEquals(updateValue, dao.get(existingCluster.getId()).isDetectEmulatedMachine()); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("The engine is not associated with a Foreman provider. No errata for the engine are available.") java.lang.String NO_FOREMAN_PROVIDER_FOR_ENGINE();<END_MOD>
<START_MOD>private void populateDashboardCache() throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { long startTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.Dashboard dashboard = getDashboard(); long endTime = java.lang.System.currentTimeMillis(); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.dashboardCache.put(org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.UTILIZATION_KEY, dashboard, 5, java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataServlet.log.debug("Dashboard cache updated in {}ms", (endTime - startTime)); }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__ADD); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__GLUSTER_BRICK); }
protected void unlockVm() { org.ovirt.engine.core.bll.VmCommand.setVm(null); if ((org.ovirt.engine.core.bll.VmCommand.getVm()) != null) { if ((org.ovirt.engine.core.bll.VmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked)) { org.ovirt.engine.core.bll.VmHandler.unlockVm(org.ovirt.engine.core.bll.VmCommand.getVm(), org.ovirt.engine.core.bll.VmCommand.getCompensationContext()); } } else { setLoggingForCommand(); log.warn( is null - not performing endAction on Vm } }
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultStringValue("Cluster Policy(ies):") java.lang.String removeClusterPolicyMessage();<END_MOD>
<START_MOD>public java.lang.Boolean call() throws java.lang.Exception { _deploy.getParser().cliEnvironmentSet(VdsmEnv.ENGINE_HOST_CLUSTER_VERSION, clusterVersion.getValue()); return true; }<END_MOD>
<START_MOD>public void setNfsServers(org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.gluster.NfsProfileDetails> nfsServers) { this.nfsServers = nfsServers; }<END_MOD>
<START_MOD>protected void setUpEntityQueryExpectations(int times) throws java.lang.Exception { setUpGetEntityExpectations(times, null); }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__SET); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__GLUSTER_GEOREP_CONFIG); addCanDoActionMessageVariable("configName", getParameters().getConfigKey()); addCanDoActionMessageVariable("geoRepSessionKey", getGeoRepSession().getSessionKey()); addCanDoActionMessageVariable("configValue", getParameters().getConfigValue()); }
<START_MOD>@org.junit.Test public void asJsonTwoConvItems() throws java.io.IOException { schedule.addConvergenceStep(new org.ovirt.engine.core.bll.migration.ConvergenceItemWithStallingLimit(8, "action", 10)).addConvergenceStep(new org.ovirt.engine.core.bll.migration.ConvergenceItemWithStallingLimit(12, "action2", 12)); assertEquals("[[],[[8,[\"action\",[10]]],[12,[\"action2\",[12]]]]]", schedule.asJson()); }<END_MOD>
<START_MOD>@java.lang.SuppressWarnings("unchecked") <END_MOD>@org.junit.Test public void testExecuteCommand() { cmd = spy(new org.ovirt.engine.core.bll.gluster.CommitRemoveGlusterVolumeBricksCommand(new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTask, getBricks(volumeWithRemoveBricksTask, 2)))); prepareMocks(cmd); mockBackend(true, null); assertTrue(cmd.canDoAction()); cmd.executeCommand(); verify(cmd, times(1)).endStepJob(<START_MOD>any(org.ovirt.engine.core.common.job.JobExecutionStatus.class), any(java.util.Map.class)<END_MOD>); verify(cmd, times(1)).releaseVolumeLock(); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_COMMIT); }
<START_MOD>@java.lang.Override public void onValidationComplete(org.ovirt.engine.ui.uicommonweb.models.ValidationCompleteEvent event) { if (((event.getModel()) != null) && (event.getModel().equals(presenterWidget.getModel()))) { java.util.Set<org.ovirt.engine.ui.uicommonweb.models.TabName> invalidTabs = ((org.ovirt.engine.ui.uicommonweb.models.HasValidatedTabs) (presenterWidget.getModel())).getInvalidTabs(); java.util.Map<org.ovirt.engine.ui.uicommonweb.models.TabName, org.ovirt.engine.ui.common.widget.dialog.tab.DialogTab> mapping = view.getTabNameMapping(); boolean alreadySelected = false; for (org.ovirt.engine.ui.uicommonweb.models.TabName invalidTabName : invalidTabs) { if (view.getTabPanel().getActiveTab().equals(mapping.get(invalidTabName))) { alreadySelected = true; break; } } org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.markTabs(invalidTabs, mapping); if (!alreadySelected) { org.ovirt.engine.ui.common.utils.ValidationTabSwitchHelper.switchTab(invalidTabs, mapping, view); } } }<END_MOD>
protected void disableElement(com.google.gwt.dom.client.Element element) { element.getStyle().setProperty("disabled", "true"); element.getStyle().setColor("#999999"); if ((getNodeDisabledTooltip()) != null) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(getNodeDisabledTooltip(), element); } }
public org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid vdsId, boolean shouldPrepareAndTeardown) { if (vdsId == null) { vdsId = <START_MOD>vdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndTeardown) { prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (resourceManager.runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { <END_MOD>org.ovirt.engine.core.bll.storage.<START_MOD>disk.image.ImagesHandler.log.error( to get qemu image info from storage e); } finally { if (shouldPrepareAndTeardown) { teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } } return<END_MOD> qemuImageInfo<START_MOD>; }<END_MOD>
<START_MOD>@org.junit.Test public void checkExecuteCommandWithNullVdsId() { parameters.setStorageServerConnection(NFSConnection); parameters.setVdsId(null); doNothing().when(storageServerConnectionDAO).remove(NFSConnection.getid()); command.executeCommand(); }<END_MOD>
<START_MOD>private boolean singleHostSelected(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> items) { return ((items.size()) == 1) && ((items.get(0)) instanceof org.ovirt.engine.core.common.businessentities.VDS); }<END_MOD>
private void performDiskUpdate(final boolean unlockImage) { final org.ovirt.engine.core.common.businessentities.Disk disk = org.ovirt.engine.core.bll.UpdateVmDiskCommand.getDiskDao().get(org.ovirt.engine.core.bll.UpdateVmDiskCommand.getParameters().getDiskId()); applyUserChanges(disk); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Object>() { @java.lang.Override public java.lang.Object runInTransaction() { getVmStaticDAO().incrementDbGeneration(getVm().getId()); updateDeviceProperties(); getBaseDiskDao().update(disk); if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)); diskImage.setQuotaId(getQuotaId()); <START_MOD>diskImage.setDiskProfileId(((org.ovirt.engine.core.common.businessentities.DiskImage) (getNewDisk())).getDiskProfileId()); <END_MOD>if (unlockImage && ((diskImage.getImageStatus()) == (org.ovirt.engine.core.common.businessentities.ImageStatus.LOCKED))) { diskImage.setImageStatus(ImageStatus.OK); } getImageDao().update(diskImage.getImage()); updateQuota(diskImage); <START_MOD>updateDiskProfile(diskImage); <END_MOD>} reloadDisks(); updateBootOrder(); setSucceeded(true); return null; } private void updateDeviceProperties() { if (updateReadOnlyRequested()) { vmDeviceForVm.setIsReadOnly(getNewDisk().getReadOnly()); getVmDeviceDao().update(vmDeviceForVm); } if ((getOldDisk().getDiskInterface()) != (getNewDisk().getDiskInterface())) { getVmDeviceDao().clearDeviceAddress(getOldDisk().getId()); } } }); }
@java.lang.Override public org.ovirt.engine.core.compat.Guid getMasterStorageDomainIdForPool(org.ovirt.engine.core.compat.Guid pool) { return <START_MOD>getStorageDomainId<END_MOD>(pool, StorageDomainType.Master); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.<START_MOD>String<END_MOD> <START_MOD>content<END_MOD>) { getContentModel().getContent().setEntity(content); stopProgress(); }
@java.lang.Override protected void executeCommand() {<START_MOD> if ((subTemplatesLock) != null) { shiftBaseTemplateToSuccessor(); }<END_MOD> final java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.ImagesHandler.filterDisksBasedOnCinder(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId())); org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId(), org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getCompensationContext()); if ((!(imageTemplates.isEmpty())) || (!(cinderDisks.isEmpty()))) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { if ((!(imageTemplates.isEmpty())) && (removeVmTemplateImages())) { org.ovirt.engine.core.bll.VmHandler.removeVmInitFromDB(getVmTemplate()); setSucceeded(true); } if (!(cinderDisks.isEmpty())) { removeCinderDisks(cinderDisks); setSucceeded(true); } return null; } }); } else { HandleEndAction(); } }
<START_MOD>private com.google.gwt.user.client.ui.Grid createVlanRowColumn(com.google.gwt.user.client.ui.Widget checkBoxWidget, boolean networkManagementFlag, java.lang.String networkName, com.google.gwt.user.client.ui.Label addressLabel) { com.google.gwt.user.client.ui.Grid row = new com.google.gwt.user.client.ui.Grid(1, 3); row.getColumnFormatter().setWidth(0, org.ovirt.engine.ui.webadmin.widget.host.VLanPanel.CHECK_BOX_COLUMN_WIDTH); row.getColumnFormatter().setWidth(1, org.ovirt.engine.ui.webadmin.widget.host.VLanPanel.NETWORK_NAME_COLUMN_WIDTH); row.getColumnFormatter().setWidth(2, org.ovirt.engine.ui.webadmin.widget.host.VLanPanel.ADDRESS_COLUMN_WIDTH); row.setWidth("100%"); row.setHeight("100%"); row.setWidget(0, 0, checkBoxWidget); com.google.gwt.user.client.ui.Label networkNameLabel = new com.google.gwt.user.client.ui.Label(networkName); if (networkManagementFlag) { networkNameLabel.getElement().getStyle().setFontWeight(FontWeight.BOLD); networkNameLabel.setText(("* " + networkName)); } row.setWidget(0, 1, networkNameLabel); row.setWidget(0, 2, addressLabel); return row; }<END_MOD>
private void UpdateProperties() { org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); setOS(vds.gethost_os()); setKernelVersion(vds.getkernel_version()); setKvmVersion(vds.getkvm_version()); setLibvirtVersion(vds.getlibvirt_version()); setVdsmVersion(vds.getVersion()); setSpiceVersion(vds.getspice_version()); setIScsiInitiatorName(vds.getIScsiInitiatorName()); setActiveVms(vds.getvm_active()); <START_MOD>setCpuName(((vds.getCpuName()) != null ? vds.getCpuName().getCpuName() : null)); setCpuType(vds.getcpu_model()); setNumberOfSockets(vds.getcpu_sockets()); setCoresPerSocket((((vds.getcpu_cores()) != null) && ((vds.getcpu_sockets()) != null) ? (vds.getcpu_cores()) / (vds.getcpu_sockets()) : null)); setCpuHyperthreading(((vds.getvdsm_count_threads_as_cores()) == null ? "Unknown" : vds.getvdsm_count_threads_as_cores() ?   (vdsm.conf setting) : vds.getcpu_ht_enabled() ? "Enabled" : "Disabled")); setPhysicalMemory(vds.getphysical_mem_mb()); setSwapTotal(vds.getswap_total()); setSwapFree(vds.getswap_free()); setSharedMemory(vds.getmem_shared_percent()); <END_MOD>setMemoryPageSharing(vds.getksm_state()); setAutomaticLargePage(vds.getTransparentHugePagesState()); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( KSM java.lang.String enableKsmLabel();
<START_MOD>@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.providers.NeutronAgentBehavior behavior) { qpidTitle.setVisible(behavior.getIsAvailable()); interfaceMappings.setLabel(((java.lang.String) (behavior.getInterfaceMappingsLabel().getEntity()))); behavior.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ("IsAvailable".equals(((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).PropertyName)) { qpidTitle.setVisible(behavior.getIsAvailable()); } } }); behavior.getInterfaceMappingsLabel().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { interfaceMappings.setLabel(((java.lang.String) (behavior.getInterfaceMappingsLabel().getEntity()))); } }); driver.edit(behavior); }<END_MOD>
@java.lang.Override public java.lang.Object runInTransaction() { final org.ovirt.engine.core.common.businessentities.StorageDomainType sdType = getStorageDomain().getStorageDomainType(); map.setStatus(StorageDomainStatus.Maintenance); getStoragePoolIsoMapDAO().updateStatus(map.getId(), map.getStatus()); if (sdType == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master)) { calcStoragePoolStatusByDomainsStatus(); } if ((sdType == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Data)) || (sdType == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) { updateStorageDomainFormat(getStorageDomain()); } registerAllOvfDisks(getAllOVFDisks()); <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ovfStoreDiskImages = getAllOVFDisks(getParameters().getStorageDomainId(), getStoragePoolIdFromVds()); registerAllOvfDisks(ovfStoreDiskImages, getParameters().getStorageDomainId()); <END_MOD>for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : unregisteredEntitiesFromOvfDisk) { getUnregisteredOVFDataDao().removeEntity(ovf.getEntityId(), getParameters().getStorageDomainId()); getUnregisteredOVFDataDao().saveOVFData(ovf); log.infoFormat( OVF data of entity id {0} and entity name {1} ovf.getEntityId(), ovf.getEntityName()); } return null; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass()) != (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.VmPool other = ((org.ovirt.engine.core.common.businessentities.VmPool) (obj)); return (((((((<START_MOD>((<END_MOD>org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(id, other.id)) && ((defaultTimeInDays) == (other.defaultTimeInDays))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(parameters, other.parameters))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(vdsGroupId, other.vdsGroupId))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(description, other.description))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(name, other.name))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(type, other.type))) && ((maxAssignedVmsPerUser) == (other.maxAssignedVmsPerUser))<START_MOD>) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(vmtGuid, other.vmtGuid))) && ((useLatestVersion) == (other.useLatestVersion))<END_MOD>; }
private static void updateNetworkDetailsInInterface(org.ovirt.engine.core.common.businessentities.<START_MOD>VdsNetworkInterface iface<END_MOD>, java.util.Map<java.lang.String, java.lang.Integer> currVlans, java.util.Map<java.lang.String, java.lang.Integer> networkVlans, java.util.Map<java.lang.String, java.lang.Object> network, org.ovirt.engine.core.common.businessentities.Network net, <START_MOD>boolean bridged<END_MOD>) { <START_MOD>if (iface !=<END_MOD> null) { <START_MOD>iface.setNetworkName(net.getname()); <END_MOD>if (<START_MOD>currVlans.containsKey(iface<END_MOD>.getName()<START_MOD>)) { networkVlans.put(net.getname(), currVlans.get(iface.getName())); } if (org.apache.commons.lang.StringUtils<END_MOD>.equals(<START_MOD>iface.getNetworkName(), org.ovirt.engine.core.utils.NetworkUtils.getEngineNetwork()<END_MOD>)) { iface<START_MOD>.setType(((iface.getType()) | (VdsInterfaceType.Management.getValue())))<END_MOD>; } <START_MOD>if (bridged) { iface.setAddress(net.getaddr()); iface.setSubnet(net.getsubnet()); <END_MOD>} iface.setBridged(<START_MOD>bridged<END_MOD>); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGatewayIfManagementNetwork(iface, net.getgateway()); java.util.Map<java.lang.String, java.lang.Object> networkConfigAsMap = ((java.util.Map<java.lang.String, java.lang.Object>) (((network.get("cfg")) instanceof java.util.Map) ? network.get("cfg") : null)); org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct networkConfig = (networkConfigAsMap == null) ? null : new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct(networkConfigAsMap); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AddBootProtocol(networkConfig, iface); } }
@java.lang.Override public com.google.gwt.<START_MOD>safehtml<END_MOD>.<START_MOD>shared<END_MOD>.<START_MOD>SafeHtml<END_MOD> <START_MOD>getValue<END_MOD>(<START_MOD>T reasoned) { if (((reasoned.getStopReason()) != null) && (!(reasoned.getStopReason().trim().isEmpty()))<END_MOD>) { return <START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client<END_MOD>.ui.<START_MOD>AbstractImagePrototype<END_MOD>.<START_MOD>create<END_MOD>(<START_MOD>resources<END_MOD>.commentImage()<START_MOD>).getHTML())<END_MOD>; }<START_MOD> return null; }<END_MOD>
protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.<START_MOD>setPassthroughVnicToVfMap(initParametersForPassthroughVnics()); parameters.<END_MOD>setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setVmPayload(vmPayload); if ((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }
@java.lang.Override public java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType> getJobSubjectEntityByJobId(org.ovirt.engine.core.compat.Guid jobId) { <START_MOD>org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("job_id", jobId); <END_MOD>java.util.List<org.ovirt.engine.core.common.<START_MOD>businessentities.SubjectEntity<END_MOD>> list = <START_MOD>getCallsHandler().executeReadList("GetJobSubjectEntityByJobId", org.ovirt.engine.core.dao.JobSubjectEntityDaoFacadeImpl.jobSubjectEntityRowMapper, parameterSource<END_MOD>); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType> entityMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType>(); for (org.ovirt.engine.core.common.<START_MOD>businessentities.SubjectEntity<END_MOD> jobSubjectEntity : list) { entityMap.put(jobSubjectEntity.getEntityId(), jobSubjectEntity.getEntityType()); } return entityMap; }
<START_MOD>private void setActiveDirectoryOU(org.ovirt.engine.ui.uicommonweb.models.EntityModel value) { privateActiveDirectoryOU = value; }<END_MOD>
private int getResourceType(org.ovirt.engine.core.utils.ovf.xml.XmlNode node, java.lang.String resource) { if (((node.<START_MOD>selectSingleNode<END_MOD>(resource, _xmlNS)) != null) && (!(org.apache.commons.lang.StringUtils.isEmpty(node.<START_MOD>selectSingleNode<END_MOD>(resource, _xmlNS).innerText)))) { return java.lang.Integer.parseInt(node.<START_MOD>selectSingleNode<END_MOD>(resource, _xmlNS).innerText); } return -1; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity fetchRemobeBricksStatusDetails() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterVolumeRemoveBricksStatus, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeRemoveBricksVDSParameters(getUpServerId(clusterId), volume.getName(), org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRemoveBricksStatusQuery.getParameters().getBricks(), volume.getReplicaCount())); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity entity = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity) (returnValue.getReturnValue())); org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask asyncTask = volume.getAsyncTask(); if ((asyncTask != null) && ((asyncTask.getTaskId()) != null)) { java.util.List<org.ovirt.engine.core.common.job.Step> stepsList = getStepDao().getStepsByExternalId(asyncTask.getTaskId()); if ((stepsList != null) && (!(stepsList.isEmpty()))) { entity.setStartTime(stepsList.get(0).getStartTime()); } <START_MOD>updateTaskStepDetails(asyncTask, entity.getStatusSummary().getStatus()); if ((asyncTask.getStatus()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.ABORTED)) { entity.getStatusSummary().setStatus(JobExecutionStatus.ABORTED); <END_MOD>} <START_MOD>} <END_MOD>updateHostIP(entity); return entity; }
<START_MOD>@org.junit.Test public void testAllDomainsWithinTheshold() { setUpGeneralValidations(); setUpDiskValidations(); doReturn(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommandTest.getFullDiskList()).when(cmd).getDisksList(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN)).when(multipleStorageDomainsValidator).allDomainsExistAndActive(); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_TARGET_STORAGE_DOMAIN.name())); }<END_MOD>
@org.junit.Test public void testInterfaceInHostWhenInDifferentHost() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName(); vdsNetworkInterface.setVdsId(org.ovirt.engine.core.compat.Guid.newGuid()); <START_MOD>org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.compat.Guid.newGuid(); org.hamcrest.Matcher<org.ovirt.engine.core.bll.ValidationResult> matcher = org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.NIC_NOT_EXISTS_ON_HOST, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(HostInterfaceValidator.VAR_NIC_NOT_EXISTS_ON_HOST_ENTITY, hostId.toString())); <END_MOD>assertThat(new org.ovirt.engine.core.bll.validator.HostInterfaceValidator(vdsNetworkInterface).interfaceInHost(<START_MOD>hostId<END_MOD>), <START_MOD>matcher<END_MOD>); }
private java.util.<START_MOD>List<END_MOD><org.ovirt.engine.core.<START_MOD>common.vdscommands.HostNetwork> getNetworks() { if ((networksToConfigure) == null) { networksToConfigure = new java.util.ArrayList(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getNetworkAttachments().size()); org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics = new org.ovirt.engine.core.common.businessentities.BusinessEntityMap(getExistingNics()); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getNetworkAttachments()) { org.ovirt.engine.core.common.businessentities.network.Network network = getNetworkBusinessEntityMap().get(attachment.getNetworkId()); org.ovirt.engine.core.common.vdscommands.HostNetwork networkToConfigure = new org.ovirt.engine.core.common.vdscommands.HostNetwork(network<END_MOD>, <START_MOD>attachment); networkToConfigure.setBonding(isBonding(attachment, nics)); if ((defaultRouteSupported()) && (defaultRouteRequired(network, attachment.getIpConfiguration()))<END_MOD>) { <START_MOD>networkToConfigure.setDefaultRoute(true<END_MOD>); } <START_MOD>networksToConfigure.add(networkToConfigure); } } <END_MOD>return <START_MOD>networksToConfigure<END_MOD>; }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if (org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.shouldSkipCommandExecutionCached()) { return true; } if ((org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm()) == null) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.canRunActionOnNonManagedVm())) { return false; } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().isRunningOrPaused())) { return org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.failVmStatusIllegal(); } if (((org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.getInstance().findActiveISODomain(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getStoragePoolId())) == null) && (!(org.apache.commons.lang.StringUtils.isEmpty(cdImagePath)))) { return <START_MOD>failValidate<END_MOD>(EngineMessage.VM_CANNOT_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO); } if ((org.apache.commons.lang.StringUtils.isNotEmpty(cdImagePath)) && (!(org.apache.commons.lang.StringUtils.endsWithIgnoreCase(cdImagePath, ValidationUtils.ISO_SUFFIX)))) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_INVALID_CDROM_DISK_FORMAT); } return true; }
protected boolean pciAndIdeWithinLimit(org.ovirt.engine.core.common.businessentities.<START_MOD>VM<END_MOD> vm, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> allInterfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.Disk> allDisks = org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()); return checkPciAndIdeLimit(vm.<START_MOD>getOs(), vm.getVdsGroupCompatibilityVersion(), vm.<END_MOD>getNumOfMonitors(), allInterfaces, allDisks, org.ovirt.engine.core.bll.utils.VmDeviceUtils.isVirtioScsiControllerAttached(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getReturnValue().getCanDoActionMessages()); }
public org.ovirt.engine.core.bll.ValidationResult stpForVmNetworkOnly() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.NON_VM_NETWORK_CANNOT_SUPPORT_STP).unless(((network.isVmNetwork()) || (!(network.getStp())))); }
@java.lang.Override public java.lang.String getLabel() { if (useRadioButtonWidgetLabel) { return asRadioButton().<START_MOD>getHTML<END_MOD>(); } else { return super.getLabel(); } }
<START_MOD>private java.lang.reflect.Method resolveGet() throws java.lang.NoSuchMethodException, java.lang.SecurityException { java.lang.reflect.Method methodSignature = org.ovirt.engine.api.restapi.resource.BackendResource.findGetSignature(this.getClass()); java.lang.reflect.Method methodImplementation = this.getClass().getMethod(methodSignature.getName(), methodSignature.getParameterTypes()); return methodImplementation; }<END_MOD>
@org.junit.Test public void canDoActionLunsNotPartOfStorageDomain() { java.util.List lunsFromDb = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("111"); lun1.setStorageDomainId(sdId); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id("222"); lun2.setStorageDomainId(sdId); lunsFromDb.add(lun1); lunsFromDb.add(lun2); when(lunsDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.<START_MOD>disk.lun<END_MOD>.RefreshLunsSizeCommandTest.STORAGE)).thenReturn(lunsFromDb); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_LUNS_NOT_PART_OF_STORAGE_DOMAIN); }
protected boolean isStorageDomainTypeCorrect(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { <START_MOD>return<END_MOD> (storageDomain.<START_MOD>isLocal<END_MOD>()) <START_MOD>==<END_MOD> (org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool().<START_MOD>isLocal<END_MOD>()); }
private <START_MOD>org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.util.Set<java.lang.String>> insertSharedLock(java.lang.String key, java.lang.String message, <END_MOD>boolean isCheckOnly) { org.ovirt.engine.core.bll.lock.InMemoryLockManager.InternalLockView lock = locks.get(key); if (lock != null) { if (!isCheckOnly) { lock.increaseCount(); <START_MOD>lock.addMessage(message); <END_MOD>} else if (lock.getExclusive()) { <START_MOD>return new org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.util.Set<java.lang.String>>(java.lang.Boolean.FALSE, lock.getMessages())<END_MOD>; } } else if (!isCheckOnly) { locks.put(key, new org.ovirt.engine.core.bll.lock.InMemoryLockManager.InternalLockView(1, <START_MOD>message, <END_MOD>false)); } return <START_MOD>org.ovirt.engine.core.bll.lock.InMemoryLockManager.LOCK_INSER_SUCCESS_RESULT; }<END_MOD>
@java.lang.Override public void handleRequest(io.undertow.server.HttpServerExchange exchange) throws java.lang.Exception { if (!(exchange.getRequestHeaders().getFirst("Authorization").equals((   + (org.ovirt.engine.sdk4.ServerTest.TOKEN))))) { exchange.setStatusCode(401); exchange.getResponseSender().send(""); } else { java.lang.Thread.sleep(delay); exchange.setStatusCode(code); exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/xml"); exchange.getResponseSender().send(body); <START_MOD>lastRequestQuery = exchange.getQueryString(); <END_MOD>} }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel> profilesModels = new java.util.LinkedList<org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel>(); for (org.ovirt.engine.core.common.businessentities.network.VnicProfileView profileView : ((java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>) (returnValue))) { org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel editModel = new org.ovirt.engine.ui.uicommonweb.models.profiles.EditVnicProfileModel(getSourceListModel(), getSelectedDc().getcompatibility_version(), profileView, false); <START_MOD>editModel.initNetworkQoSList(getSelectedDc().getId()); <END_MOD>profilesModels.add(editModel); editModel.getName().setIsChangable(false); } if (profilesModels.isEmpty()) { <START_MOD>org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel newProfileModel = new org.ovirt.engine.ui.uicommonweb.models.profiles.NewVnicProfileModel(getSourceListModel(), getSelectedDc().getcompatibility_version(), false); newProfileModel.initNetworkQoSList(getSelectedDc().getId()); <END_MOD>profilesModels.add(<START_MOD>newProfileModel<END_MOD>); } getProfiles().setItems(profilesModels); originalProfileModels = profilesModels; }
<START_MOD>protected boolean validateSpaceRequirements(java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList) { org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator sdValidator = createMultipleStorageDomainsValidator(disksList); return ((validate(sdValidator.allDomainsExistAndActive())) && (validate(sdValidator.allDomainsWithinThresholds()))) && (validate(sdValidator.allDomainsHaveSpaceForClonedDisks(disksList))); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Template cannot be copied java.lang.String blankTemplateCannotBeCopied();
@org.junit.Test public void qosNotSupported() { org.ovirt.engine.core.common.businessentities.network.Network network = <START_MOD>createManagementNetwork<END_MOD>(); mockExistingNetworks(network); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork("eth0", network); mockExistingIfaces(iface); iface.setQosOverridden(true); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(iface)); validateAndExpectViolation(helper, VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_NOT_SUPPORTED, org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME); }
private boolean executeSshPowerDown(java.lang.String version) { boolean ret = false; try (final org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient();final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream();final java.io.ByteArrayOutputStream cmdErr = new java.io.ByteArrayOutputStream()) { try { log.info( SSH power down session on host {} org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName()); sshClient.setVds(org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.connect(); sshClient.authenticate(); log.info( SSH power down command on host {} org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName()); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SshVdsPowerdownCommand, version), null, cmdOut, cmdErr); ret = true; } catch (java.lang.Exception ex) { log.error( power down command failed on host   {} {} {} org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName(), ex.getMessage(), cmdOut, cmdErr); log.debug("Exception", ex); } } catch (java.io.IOException e) { log.error("IOException"<START_MOD>); log.debug("Exception"<END_MOD>, e); } return ret; }
<START_MOD>private void setSystemLocale(org.ovirt.engine.ui.uicommonweb.models.EntityModel value) { privateSystemLocale = value; }<END_MOD>
@java.lang.Override protected void convert() { boolean useVirtV2V = (org.ovirt.engine.core.bll.exportimport.ImportVmFromOvaCommand.getParameters().getVm().getOrigin()) != (org.ovirt.engine.core.common.businessentities.OriginType.OVIRT); if (useVirtV2V) { org.ovirt.engine.core.bll.exportimport.ImportVmFromOvaCommand.<START_MOD>freeLock(); runInternalAction(ActionType.ConvertOva, buildConvertOvaParameters<END_MOD>()); } else { <START_MOD>runInternalAction<END_MOD>(ActionType.ExtractOva, buildExtractOvaParameters()); } }
private static boolean isRequiredInterfaceDown(java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.Network> networksByName, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfaces, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface) { if ((((<START_MOD>iface.getNetworkName()) != null) && (!(org.ovirt.engine.core.vdsbroker.NetworkMonitoringHelper.isBaseInterfaceUp(iface, interfaces)))) && (networksByName.containsKey(iface.getNetworkName()))) { org.ovirt.engine.core.common.businessentities.network.Network net = networksByName.get(iface.getNetworkName()); if (((net.getCluster<END_MOD>().getStatus()) <START_MOD>== (org.ovirt.engine.core.common.businessentities.network.NetworkStatus.OPERATIONAL<END_MOD>)) && (net.getCluster().isRequired())) { return true; } } return false; }
private boolean fetchStorageDomainInfo() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue allDomainsQuery = <START_MOD>getBackend().runInternalQuery(VdcQueryType.GetExistingStorageDomainList, new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters(<END_MOD>org.ovirt.engine.core.bll.<START_MOD>storage.domains<END_MOD>.ImportHostedEngineStorageDomainCommand.getParameters().getVdsId(), null, org.ovirt.engine.core.common.businessentities.StorageDomainType.Data, null)); if (allDomainsQuery.getSucceeded()) { for (org.ovirt.engine.core.common.businessentities.StorageDomain sd : ((java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain>) (allDomainsQuery.getReturnValue()))) { if (sd.getName().equals(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.HostedEngineStorageDomainName))) { heStorageDomain = sd; return true; } } } else { log.error(( query for all Storage Domains. +   The import command can not proceed without this info } return false; }
void registerSelectionChangeHandler(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { final org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.EventArgs><END_MOD> itemSelectionChangeHandler = new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.EventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { buttonDef.update(); } }; addSelectionChangeListener(itemSelectionChangeHandler); }
<START_MOD>private void assertInterfaceModified(org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface) { junit.framework.Assert.assertTrue(java.text.MessageFormat.format("Expected interface ''{0}'' to be modified but it wasn''t. Modified interfaces: {1}", iface, helper.getModifiedInterfaces()), helper.getModifiedInterfaces().contains(iface)); }<END_MOD>
@org.junit.Test public void testVmOvfCreationBackwardCompatilibily() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.<START_MOD>bll<END_MOD>.OvfManagerTest.createVM(); java.lang.String xml = manager.ExportVm(vm, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(), Version.v3_0); assertNotNull(xml); final org.ovirt.engine.core.common.businessentities.VM newVm = new org.ovirt.engine.core.common.businessentities.VM(); manager.ImportVm(xml, newVm, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(), new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>()); org.ovirt.engine.core.<START_MOD>bll<END_MOD>.OvfManagerTest.assertVm(vm, newVm, vm.getDbGeneration()); }
<START_MOD>@java.lang.Override public java.lang.String getDefaultManagementNetworkName() { return org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.DefaultManagementNetwork); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.businessentities.storage.ImageTransfer filteredGet(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userId, boolean isFiltered) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource sqlParams = createIdParameterMapper(id); sqlParams.addValue("user_id", userId); sqlParams.addValue("is_filtered", isFiltered); return getCallsHandler().executeRead("GetImageUploadsByCommandId", createEntityRowMapper(), sqlParams); }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> list = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>) (result)); org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterStorageListModel dcStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterStorageListModel) (model)); java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> models; models = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> items = ((dcStorageModel.getItems()) != null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.StorageDomain>cast(dcStorageModel.getItems())) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain a : list) { if (!(org.ovirt.engine.ui.uicommonweb.Linq.isSDItemExistInList(items, a.getId()))) { org.ovirt.engine.ui.uicommonweb.models.EntityModel<START_MOD><org.ovirt.engine.core.common.businessentities.StorageDomain><END_MOD> tempVar = new org.ovirt.engine.ui.uicommonweb.models.EntityModel<START_MOD><org.ovirt.engine.core.common.businessentities.StorageDomain><END_MOD>(); tempVar.setEntity(a); models.add(tempVar); } } dcStorageModel.postAttachInternal(models); }
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__REMOVE); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__PROVIDER); }
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeSnapshotSetConfig(java.lang.String volumeName, java.util.Map<java.lang.String, java.lang.String> params, boolean force);<END_MOD>
public void reuseSession() { <START_MOD>getSessionId(new org.ovirt.engine.ui.frontend.communication.StorageCallback() { @java.lang.Override public void onSuccess(<END_MOD>java.lang.String <START_MOD>result) { if (result != null) { restApiSessionId<END_MOD> = <START_MOD>result;<END_MOD> org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionAcquiredEvent.fire(eventBus, <START_MOD>result<END_MOD>); scheduleKeepAliveHeartbeat(); } else { org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.logger.severe( REST API session ID is not available } }<START_MOD> @java.lang.Override public void onFailure(java.lang.Throwable caught) { org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.logger.severe( REST API session ID is not available } }); }<END_MOD>
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getDeviceList(java.util.<START_MOD>Set<END_MOD><java.lang.String> lunsIds) { if ((AbstractSyncLunsCommand.getParameters().getDeviceList()) == null) { return runGetDeviceList(lunsIds); } if (lunsIds == null) { return AbstractSyncLunsCommand.getParameters().getDeviceList(); } java.util.Set<java.lang.String> lunsIdsSet = new java.util.HashSet<>(lunsIds); return AbstractSyncLunsCommand.getParameters().getDeviceList().stream().filter(( lun) -> lunsIdsSet.contains(lun.getId())).collect(java.util.stream.Collectors.toList()); }
public java.util.List<org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapQueryData> getLdapQueriesData(java.lang.String domain) { int queryLimit = java.lang.Integer<START_MOD>.parseInt("MaxLDAPQueryPartsNumber"<END_MOD>); java.util.List<org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapQueryData> results = new java.util.ArrayList<org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapQueryData>(); org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapQueryData subQueryData = new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapQueryDataImpl(); java.util.ArrayList<java.lang.Object> filterParameters = new java.util.ArrayList<java.lang.Object>(); int counter = 0; for (org.ovirt.engine.core.compat.Guid identifier : ldapIdentifiers) { filterParameters.add(identifier); if (counter >= queryLimit) { subQueryData.setFilterParameters(filterParameters.toArray()); subQueryData.setLdapQueryType(LdapQueryType.getUsersByUserGuids); subQueryData.setBaseDNParameters(null); subQueryData.setDomain(domain); results.add(subQueryData); subQueryData = new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapQueryDataImpl(); filterParameters = new java.util.ArrayList<java.lang.Object>(); counter = 0; } counter++; } if (!(filterParameters.isEmpty())) { subQueryData.setFilterParameters(filterParameters.toArray()); subQueryData.setLdapQueryType(LdapQueryType.getUsersByUserGuids); subQueryData.setBaseDNParameters(null); subQueryData.setDomain(domain); results.add(subQueryData); } return results; }
<START_MOD>protected void log() { final javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); try { try { auditLogDirector.log(this, org.ovirt.engine.core.bll.CommandBase.getAuditLogTypeValue()); } catch (final java.lang.RuntimeException ex) { log.error("Error during log command: {}. Exception {}", getClass().getName(), ex.getMessage()); log.debug("Exception", ex); } } finally { org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); } }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Role role) { validateParameters(role, "id|name"); if (!(role.isSetId())) { org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD> entity = getEntity(org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD>.class, VdcQueryType.GetRoleByName, new org.ovirt.engine.core.common.queries.MultilevelAdministrationByRoleNameParameters(role.getName()), role.getName()); role.setId(entity.getId().toString()); } return performCreation(VdcActionType.AddSystemPermission, new org.ovirt.engine.core.common.action.PermissionsOperationsParametes(newPermission(role.getId())), new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetPermissionById, org.ovirt.engine.core.common.queries.MultilevelAdministrationByPermissionIdParameters.class)); }
<START_MOD>@java.lang.Override public void scheduleEntry(org.ovirt.engine.ui.frontend.RepeatingCommand cmd) { }<END_MOD>
<START_MOD>@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionCommand.getParameters().getStorageServerConnection().getid(), LockMessagesMatchUtil.STORAGE); }<END_MOD>
@java.lang.Override protected void executeCommand() { boolean isDomainUpdateRequired = doDomainsUseConnection(<START_MOD>org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionCommand.getConnection()<END_MOD>); org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = getStoragePoolIsoMap(); if (isDomainUpdateRequired) { changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Locked); } boolean hasConnectStorageSucceeded = connectToStorage(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValueUpdatedStorageDomain = null; if (!hasConnectStorageSucceeded) { org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionCommand.setSucceeded(false); org.ovirt.engine.core.common.errors.VdcFault f = new org.ovirt.engine.core.common.errors.VdcFault(); f.setError(VdcBllErrors.StorageServerConnectionError); org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionCommand.getReturnValue().setFault(f); return; } if (isDomainUpdateRequired) { returnValueUpdatedStorageDomain = getStatsForDomain(); if (returnValueUpdatedStorageDomain.getSucceeded()) { final org.ovirt.engine.core.common.businessentities.StorageDomain updatedStorageDomain = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (returnValueUpdatedStorageDomain.getReturnValue())); executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { getStorageDomainDynamicDao().update(updatedStorageDomain.getStorageDynamicData()); return null; } }); } else { restoreStateAfterUpdate(map, false); return; } } getStorageConnDao().update(org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionCommand.getParameters().getStorageServerConnection()); restoreStateAfterUpdate(map, true); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.Cluster model, org.ovirt.engine.api.model.Cluster transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getComment(), transform.getComment()); assertNotNull(transform.getCpu()); assertEquals(model.getCpu().getId(), transform.getCpu().getId()); assertNotNull(transform.getDataCenter()); assertEquals(model.getDataCenter().getId(), transform.getDataCenter().getId()); assertNotNull(transform.getSchedulingPolicy()); assertEquals(model.getSchedulingPolicy().getPolicy(), transform.getSchedulingPolicy().getPolicy()); assertEquals(model.getErrorHandling().getOnError(), transform.getErrorHandling().getOnError()); assertNotNull(transform.getMemoryPolicy()); assertNotNull(transform.getMemoryPolicy().getTransparentHugepages()); assertEquals(transform.getMemoryPolicy().getTransparentHugepages().isEnabled(), transform.getMemoryPolicy().getTransparentHugepages().isEnabled()); assertEquals(model.isVirtService(), transform.isVirtService()); assertEquals(model.isGlusterService(), transform.isGlusterService()); assertEquals(model.isTunnelMigration(), transform.isTunnelMigration()); assertEquals(model.isTrustedService(), transform.isTrustedService()); assertEquals(model.isBallooningEnabled(), transform.isBallooningEnabled()); <START_MOD>assertEquals(model.getSpiceProxy(), transform.getSpiceProxy()); <END_MOD>}
<START_MOD>java.lang.String GlusterUpdateWebhookException();<END_MOD>
@java.lang.Override public void setHasSelectedTags(boolean hasSelectedTags) { }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info( initializing {} getClass().getSimpleName()); java.util.Calendar calendar = new java.util.GregorianCalendar(); java.util.Date commandEntityCleanupTime = org.ovirt.engine.core.common.config.Config.<org.ovirt.engine.core.compat.DateTime>getValue(ConfigValues.CommandEntityCleanupTime); calendar.setTimeInMillis(commandEntityCleanupTime.getTime()); java.lang.String cronExpression = java.lang.String.format( %d %d * * ? calendar.get(java.util.Calendar.SECOND), calendar.get(java.util.Calendar.MINUTE), calendar.get(java.util.Calendar.HOUR_OF_DAY)); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info( command entity cleanup manager to run at: {} cronExpression); <START_MOD>executor.schedule(() -> doCleanup()<END_MOD>, new <START_MOD>org.ovirt.engine.core.common.utils.EngineCronTrigger(<END_MOD>cronExpression<START_MOD>)<END_MOD>); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info( initializing {} getClass().getSimpleName()); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.DataCenter model, org.ovirt.engine.api.model.DataCenter transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getComment(), transform.getComment()); assertEquals(model.isLocal(), transform.isLocal()); assertEquals(model.getStorageFormat(), transform.getStorageFormat()); assertEquals(model.getQuotaMode(), transform.getQuotaMode()); }
@java.lang.Override <START_MOD>protected<END_MOD> void <START_MOD>onSelectedItemChanging<END_MOD>(<START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>Object<END_MOD> <START_MOD>newValue<END_MOD>, java.lang.Object <START_MOD>oldValue) { super.onSelectedItemChanging(newValue<END_MOD>, <START_MOD>oldValue); java.lang.String url = ((java.lang.String) (getUrl().getEntity())); if (((url == null) || (url.equals(""))) || (url.equals(getDefaultUrl(((<END_MOD>org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>businessentities.ProviderType)<END_MOD> <START_MOD>(oldValue)))))<END_MOD>) { <START_MOD>getUrl<END_MOD>().<START_MOD>setEntity<END_MOD>(<START_MOD>getDefaultUrl(((org.ovirt.engine.core.common.businessentities.ProviderType<END_MOD>) (<START_MOD>newValue<END_MOD>)<START_MOD>))<END_MOD>); }<START_MOD> }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("Snapshot Support") java.lang.String snapShotSupport();<END_MOD>
<START_MOD>@org.junit.Test public void testGetByUserId() { org.ovirt.engine.core.common.businessentities.aaa.UserProfile result = dao.getByUserId(existingProfile.getUserId()); assertNotNull(result); assertEquals(existingProfile, result); }<END_MOD>
public void postOnSetupNetworks() { final org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel) (sourceListModel.getWindow())); org.ovirt.engine.core.common.action.SetupNetworksParameters params = new org.ovirt.engine.core.common.action.SetupNetworksParameters(); params.setInterfaces(model.getAllNics()); params.setCheckConnectivity(model.getCheckConnectivity().getEntity()); params.setConectivityTimeout(model.getConnectivityTimeout().getEntity()); params.setVdsId(getEntity().getId()); params.setNetworksToSync(model.getNetworksToSync()); model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.<START_MOD>HostSetupNetworks<END_MOD>, <START_MOD>hostSetupNetworksParameters<END_MOD>, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result.getReturnValue(); if ((returnValueBase != null) && (returnValueBase.getSucceeded())) { org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> commitChanges = model.getCommitChanges(); if (commitChanges.getEntity()) { new org.ovirt.engine.ui.uicommonweb.models.hosts.SaveNetworkConfigAction(sourceListModel, model, getEntity()).execute(); } else { model.stopProgress(); sourceListModel.setWindow(null); sourceListModel.search(); } } else { model.stopProgress(); } } }); }
protected org.ovirt.engine.ui.common.widget.table.SimpleActionTable<T> createActionTable() { return new org.ovirt.engine.ui.common.widget.table.SimpleActionTable<T>(modelProvider, org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.instance().getEventBus(), <START_MOD>new org.ovirt.engine.ui.userportal.widget.refresh.UserPortalRefreshManager(modelProvider, org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.instance().getEventBus(), <END_MOD>org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.instance().getClientStorage())<START_MOD>)<END_MOD>; }
<START_MOD>public void setPasswordSet(boolean passwordSet) { this.passwordSet = passwordSet; }<END_MOD>
<START_MOD>@org.junit.Test public void testOperationSubscription() { org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder holder = mock(org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder.class); when(holder.getId()).thenReturn("*.*.test.*"); org.ovirt.vdsm.jsonrpc.client.events.SubscriptionMatcher matcher = new org.ovirt.vdsm.jsonrpc.client.events.SubscriptionMatcher(); matcher.add(holder); org.ovirt.vdsm.jsonrpc.client.JsonRpcEvent event = mock(org.ovirt.vdsm.jsonrpc.client.JsonRpcEvent.class); when(event.getMethod()).thenReturn("localhost.testcase.test.uuid"); java.util.Set<org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder> holders = matcher.match(event); assertEquals(1, holders.size()); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( to edit Logical Networks properties within the Cluster (e.g. non-required or display network) java.lang.String allowToEditLogicalNetworksForTheClusterRoleTreeTooltip();
<START_MOD>java.lang.String parseVolumeIdFromPath(java.lang.String path) { if (org.apache.commons.lang.StringUtils.isEmpty(path)) { return ""; } int slashIndex = path.lastIndexOf("/"); if (slashIndex == (-1)) { return ""; } return path.substring((slashIndex + 1)); }<END_MOD>
protected boolean prepareFailureMessageForDomains(java.lang.String domainNames) { org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.addCanDoActionMessageVariable("domainNames", domainNames); return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS); }
@org.junit.Test public void lowerVersion() { storagePoolWithLowerVersion(); canDoActionFailed(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION); }
private void create(long timestamp) throws java.io.IOException { java.io.File temp = <START_MOD>java.io.File.createTempFile(this.archive.getName(), "tmp", this.archive.getParentFile()); try (java.io.OutputStream os = new java.io.FileOutputStream(temp)) { org.ovirt.engine.core.utils.archivers.tar.Tar.doTar(os, this.dir); } catch (java.io.IOException e) { java.lang.String message = java.lang.String.format( create tarball '%1$s' this.archive); org.ovirt.engine.core.utils.archivers.tar.CachedTar.log.error(message, e); throw new java.io.IOException(message, e); } try { if (!(temp.setLastModified(timestamp))) { throw new java.io.IOException(java.lang.String.format( set last modified '%1$s' to '%2$d' temp.getCanonicalPath(), timestamp)); } if (!(temp.renameTo(this.archive))) { throw new java.io.IOException(java.lang.String.format( rename '%1$s' to '%2$s' temp.getCanonicalPath(), archive.getCanonicalPath())); } temp = <END_MOD>null; <START_MOD>} catch (java.io.IOException e) { org.ovirt.engine.core.utils.archivers.tar.CachedTar.log.error("Exception", e); throw e; } finally { if ((temp !=<END_MOD> null<START_MOD>) && (!(temp.delete()))) {<END_MOD> org.ovirt.engine.core.utils.archivers.tar.CachedTar.log.error(<START_MOD> <END_MOD>delete<START_MOD> '{}'<END_MOD> temp.getAbsolutePath())<START_MOD>; } } }<END_MOD>
private static void <START_MOD>setVmTemplateStatus<END_MOD>(org.ovirt.engine.core.compat.Guid vmTemplateGuid, org.ovirt.engine.core.common.businessentities.VmTemplateStatus status, org.ovirt.engine.core.bll.context.CompensationContext compensationContext) { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().get(vmTemplateGuid); if (vmTemplate != null) { if (compensationContext != null) { compensationContext.snapshotEntityStatus(vmTemplate); } vmTemplate.setStatus(status); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().update(vmTemplate); } else { org.ovirt.engine.core.bll.VmTemplateHandler.log.warnFormat( vmTemplate is null, not setting status '{0}' to vmTemplate status); } }
public void checkInvalidAddress() { assertFalse(underTest.test(generateVdsNetworkInterface(org.ovirt.engine.core.utils.network.predicate.AbstractVdsNetworkInterfacePredicateTest.INVALID))); }
<START_MOD>@java.lang.Override protected void populateTabMap() { getTabNameMapping().put(TabName.PF_TAB, this.pfTab); getTabNameMapping().put(TabName.VFS_CONFIG_TAB, this.vfsConfigTab); }<END_MOD>
<START_MOD>public void detachCinderDomainFromPool(final org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap mapToRemove) { execute(new java.util.concurrent.Callable<java.lang.Object>() { @java.lang.Override public java.lang.Object call() { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().remove(new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId(mapToRemove.getstorage_id(), mapToRemove.getstorage_pool_id())); return null; } }); }<END_MOD>
@org.junit.Test public void testAttachFailDomainAlreadyInPool() { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap> isoMap = new java.util.ArrayList<>(); isoMap.add(new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap()); when(storagePoolIsoMapDao.getAllForStorage(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(isoMap); org.ovirt.engine.core.bll.ValidationResult attachedDomainInsertionResult = validator.validateDomainCanBeAttachedToPool(); assertFalse( domain that is already in a pool succeeded while it should have failed attachedDomainInsertionResult.isValid()); assertFailingMessage( domain that is already in a pool failed with the wrong message attachedDomainInsertionResult, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> getAllTemplatesRelatedToQuotaId(org.ovirt.engine.core.compat.Guid quotaId) { return getCallsHandler().executeReadList("GetAllVmTemplatesRelatedToQuotaId", org.ovirt.engine.core.dao.<START_MOD>VmTemplateDAOImpl<END_MOD>.VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("quota_id", quotaId)); }
<START_MOD>public static java.lang.Integer geteffective_cpu_cores(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsGroupDao().get(vds.getvds_group_id()); return ((((vdsGroup != null) && ((vds.getcpu_cores()) != null)) && ((vds.getvdsm_count_threads_as_cores()) != null)) && (vdsGroup.getcount_threads_as_cores())) && (vds.getcpu_ht_enabled()) ? (vds.getcpu_cores()) * 2 : vds.getcpu_cores(); }<END_MOD>
protected org.ovirt.engine.api.model.Templates mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> entities) { org.ovirt.engine.<START_MOD>core.common.queries.GetVmsInitParameters params = new org.ovirt.engine.core.common.queries.GetVmsInitParameters(); params.setTemplates(entities); org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = runQuery(VdcQueryType.GetVmsInit, params); if ((queryReturnValue.getSucceeded()) && ((queryReturnValue.getReturnValue()) != null)) { entities = queryReturnValue.getReturnValue(); } org.ovirt.engine.<END_MOD>api.model.Templates collection = new org.ovirt.engine.api.model.Templates(); for (org.ovirt.engine.core.common.businessentities.VmTemplate entity : entities) { collection.getTemplates().add(addLinks(populate(map(entity), entity))); } return collection; }
private void addDefaultNetworks() { org.ovirt.engine.core.common.businessentities.network.Network net = new org.ovirt.engine.core.common.businessentities.network.Network(); net.setId(org.ovirt.engine.core.compat.Guid.newGuid()); net.setName(org.ovirt.engine.core.utils.NetworkUtils.getEngineNetwork()); net.setDescription(AddVdsGroupCommand.DefaultNetworkDescription); net.setDataCenterId(org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand.getStoragePool().getId()); net.setVmNetwork(true); org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand.getNetworkDAO().save(net); org.ovirt.engine.core.bll.network.cluster.NetworkHelper.addPermissions(org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand.getCurrentUser().<START_MOD>getId<END_MOD>(), net.getId(), true); }
<START_MOD>public java.lang.String getSpiceProxy() { return vmStatic.getSpiceProxy(); }<END_MOD>
@java.lang.Override protected void executeCommand() { addVmToDb(); <START_MOD>org.ovirt.engine.core.common.businessentities.VM vm = getVm(); if (vm.getImages().isEmpty()) { endVmRelatedOps(); } else { <END_MOD>processImages();<START_MOD> }<END_MOD> setSucceeded(true); }
<START_MOD>@org.junit.Test public void lunAlreadyPartOfStorageDomains() { org.ovirt.engine.core.common.businessentities.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.LUNs(); lun1.setLUN_id(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[0].toString()); lun1.setStorageDomainId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.LUNs(); lun2.setLUN_id(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[1].toString()); lun2.setStorageDomainId(org.ovirt.engine.core.compat.Guid.newGuid()); doReturn(lunDAO).when(cmd).getLunDao(); when(lunDAO.getAll()).thenReturn(java.util.Arrays.asList(lun1, lun2)); java.util.List<java.lang.String> specifiedLunIds = java.util.Collections.singletonList(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[0].toString()); assertTrue(cmd.isLunsAlreadyPartOfStorageDomains(specifiedLunIds)); java.util.List<java.lang.String> messages = cmd.getReturnValue().getCanDoActionMessages(); assertEquals(messages.size(), 2); assertEquals(messages.get(0), VdcBllMessages.ACTION_TYPE_FAILED_LUNS_ALREADY_PART_OF_STORAGE_DOMAINS.toString()); assertEquals(messages.get(1), java.lang.String.format("$lunIds %1$s", specifiedLunIds.get(0))); }<END_MOD>
@<START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>ui<END_MOD>.<START_MOD>webadmin<END_MOD>.DefaultMessage( Desktop Load - Enable memory page sharing to {0}% java.lang.String clusterPopupMemoryOptimizationForDesktopLabel(java.lang.String a);
<START_MOD>@java.lang.Override <END_MOD>protected java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> getVdsGroups() { return getBackendCollection(VdcQueryType.GetVdsGroupsByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(<START_MOD>id<END_MOD>)); }
@org.junit.Test public void noClusterServiceDefined() { assertThat(validator.clusterServiceDefined(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.VDS_GROUP_AT_LEAST_ONE_SERVICE_MUST_BE_ENABLED)); }
@javax.ws.rs.Path( (undelete)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.Permission p = org.ovirt.engine.core.bll.RemovePermissionCommand.getPermissionDao().get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getPermission().getId()); if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isLastSuperUserPermission(p.getRoleId())) { org.ovirt.engine.core.bll.RemovePermissionCommand.getReturnValue().getCanDoActionMessages().add(EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString()); returnValue = false; } else if ((p.getRoleType().equals(RoleType.ADMIN)) && (!(org.ovirt.engine.core.bll.RemovePermissionCommand.isSystemSuperUser()))) { addCanDoActionMessage(EngineMessage.PERMISSION_REMOVE_FAILED_ONLY_SYSTEM_SUPER_USER_CAN_REMOVE_ADMIN_ROLES); returnValue = false; } <START_MOD>if ((!(java.util.Objects.equals(p.getAdElementId(), org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId()))) && ((org.ovirt.engine.core.bll.RemovePermissionCommand.getDbUserDao().get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getTargetId())) != null)) { addCanDoActionMessage(EngineMessage.INHERITED_PERMISSION_CANT_BE_REMOVED); returnValue = false; } <END_MOD>return returnValue; }
@java.lang.Override protected org.ovirt.engine.core.common.action.LockProperties applyLockProperties(org.ovirt.engine.core.common.action.LockProperties lockProperties) { org.ovirt.engine.core.common.action.LockProperties.Scope scope = (org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>DeactivateStorageDomainCommand.getParameters().isSkipLock()) ? org.ovirt.engine.core.common.action.LockProperties.Scope.None : org.ovirt.engine.core.common.action.LockProperties.Scope.Execution; return lockProperties.withScope(scope); }
private <START_MOD>java.util.List<<END_MOD>org.ovirt.engine.core.common.businessentities.DbUser<START_MOD>> refreshUsers(java.util.List<org.ovirt.engine.core.common.businessentities.DbUser> dbUsers<END_MOD>, org.ovirt.engine.core.<START_MOD>authentication.Directory directory) { java.util.List<org.ovirt.engine.core.common.utils.ExternalId> ids = new java.util.ArrayList(dbUsers.size()); for (org.ovirt.engine.core.<END_MOD>common.businessentities.<START_MOD>DbUser dbUser : dbUsers) { ids.add(dbUser.getExternalId()); } java.util.List<org.ovirt.engine.core.authentication.DirectoryUser> directoryUsers = directory.findUsers(ids); java.util.Map<org.ovirt.engine.core.common.utils.ExternalId<END_MOD>, <START_MOD>org.ovirt.engine.core.authentication.DirectoryUser> index = new java.util.HashMap<>(); for (org.ovirt.engine.core.authentication.DirectoryUser directoryUser : directoryUsers<END_MOD>) { <START_MOD>index.put(directoryUser.getId(), directoryUser); } java.util.List<org.ovirt.engine.core.common.businessentities.DbUser> refreshed = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.DbUser dbUser : dbUsers) { org.ovirt.engine.core.authentication.DirectoryUser directoryUser = index.get(dbUser.getId()); dbUser = refreshUser(dbUser, directoryUser)<END_MOD>; if (<START_MOD>dbUser !=<END_MOD> null) { <START_MOD>refreshed.add(dbUser); <END_MOD>} } <START_MOD>return refreshed; <END_MOD>}
@org.junit.Test public void networkNotInVfsConfigNotValid() { networkInVfsConfigCommonTest(true); assertThat(validator.networkNotInVfsConfig(org.ovirt.engine.core.bll.validator.VfsConfigValidatorTest.NETWORK_ID), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NETWORK_ALREADY_IN_VFS_CONFIG, java.lang.String.format(VfsConfigValidator.NIC_NAME_REPLACEMENT, nic.getName()), java.lang.String.format(VfsConfigValidator.NETWORK_NAME_REPLACEMENT, network.getName()))); }
@java.lang.Override protected java.util.Map<java.lang.String, java.lang.String> getExclusiveLocks(<START_MOD>) { if (!(org.ovirt.engine.core.bll.gluster.GlusterCommandBase.getParameters().isNested())<END_MOD>) { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.gluster.GlusterCommandBase.getVdsGroupId().toString(), LockingGroup.GLUSTER.name()); }<START_MOD> return super.getExclusiveLocks(); }<END_MOD>
<START_MOD>private void localize(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { nameEditor.setLabel(constants.affinityGroupNameLabel()); descriptionEditor.setLabel(constants.affinityDescriptionLabel()); polarityEditor.setLabel(constants.affinityGroupPolarityLabel()); enforcementTypeEditor.setLabel(constants.affinityGroupEnforceTypeLabel()); }<END_MOD>
public void setContentType(java.lang.String contentType) { if (contentType != null) { this.contentType = <START_MOD>org.ovirt.engine.core.common.businessentities.gluster.<END_MOD>GlusterHookContentType.<START_MOD>fromMimeType(<END_MOD>contentType<START_MOD>)<END_MOD>; } }
<START_MOD>@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost> hosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.ExternalDiscoveredHost>) (result)); org.ovirt.engine.ui.uicommonweb.models.ListModel externalDiscoveredHostsListModel = getExternalDiscoveredHosts(); hosts.add(0, null); externalDiscoveredHostsListModel.setItems(hosts); externalDiscoveredHostsListModel.setIsChangable(true); }<END_MOD>
<START_MOD>@java.lang.Override public boolean check(org.ovirt.engine.core.common.businessentities.VDS vds) { return org.ovirt.engine.core.bll.EmulatedMachineClusterEditChecker.getHostEmulatedMachines(vds).containsAll(emulatedMachines); }<END_MOD>
@java.lang.Override public void onSuccess(final org.ovirt.engine.<START_MOD>ui.frontend.communication.VdcOperation<org.ovirt.engine.<END_MOD>core.common.action.<START_MOD>VdcActionType, org.ovirt.engine.core.common.action.LoginUserParameters> operation, final org.ovirt.engine.core.common.action.<END_MOD>VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer( returned result from Login. org.ovirt.engine.ui.frontend.Frontend.<START_MOD>getInstance().<END_MOD>setLoggedInUser(<START_MOD>((org.ovirt.engine.core.common.users.VdcUser) (result.getActionReturnValue()))); callback.getDel().onSuccess(callback.getModel(), result); if (((org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoginHandler()) != <END_MOD>null)<START_MOD> && (result.getSucceeded())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoginHandler().onLoginSuccess(userName, password, domain)<END_MOD>; } }
private boolean <START_MOD>primaryIpv4AddressNotSet<END_MOD>() { return (!(hasIpConfiguration())) || (!(getIpConfiguration().<START_MOD>hasPrimaryIpv4AddressSet<END_MOD>())); }
<START_MOD>protected<END_MOD> java.util.<START_MOD>Set<END_MOD><org.ovirt.engine.core.compat.Guid> <START_MOD>getStorageDomainsIds<END_MOD>() { java.util.<START_MOD>Set<END_MOD><org.ovirt.engine.core.compat.Guid> <START_MOD>storageIds<END_MOD> = new java.util.<START_MOD>HashSet<END_MOD><>(); for (org.ovirt.engine.core.common.businessentities.DiskImage disk : getSourceImages()) { <START_MOD>storageIds<END_MOD>.<START_MOD>addAll<END_MOD>(disk.getStorageIds()); } return <START_MOD>storageIds<END_MOD>; }
<START_MOD>void saveVmsToDb() { getDbFacade().getVmDynamicDao().updateAllInBatch(_vmDynamicToSave.values()); getDbFacade().getVmStatisticsDao().updateAllInBatch(_vmStatisticsToSave.values()); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics> allVmInterfaceStatistics = new java.util.LinkedList<org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics>(); for (java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> list : _vmInterfaceStatisticsToSave.values()) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : list) { allVmInterfaceStatistics.add(iface.getStatistics()); } } getDbFacade().getVmNetworkStatisticsDao().updateAllInBatch(allVmInterfaceStatistics); getDbFacade().getDiskImageDynamicDao().updateAllInBatch(_vmDiskImageDynamicToSave.values()); getDbFacade().getLunDao().updateAllInBatch(vmLunDisksToSave); saveVmDevicesToDb(); saveVmGuestAgentNetworkDevices(); getVdsEventListener().addExternallyManagedVms(_externalVmsToAdd); }<END_MOD>
private java.util.Map<org.ovirt.engine.core.<START_MOD>bll<END_MOD>.storage.<START_MOD>domain.SyncLunsInfoForBlockStorageDomainCommand.LunUpdateHandler<END_MOD>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid lunFromVgLunId, org.ovirt.engine.core.compat.Guid lunFromDbLunId, org.ovirt.engine.core.compat.Guid lunFromVgPvId, org.ovirt.engine.core.compat.Guid lunFromDbPvId) { setLunsIds(lunFromVgLunId, lunFromDbLunId, lunFromVgPvId, lunFromDbPvId); return getLunsToUpdateInDb(); }
@java.lang.Override public void updateStep(final org.ovirt.engine.core.common.job.Step step) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { try { jobDao.updateJobLastUpdateTime(step.getJobId(), new java.util.Date()); stepDao.update(step); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.job.JobRepositoryImpl.log.<START_MOD>error<END_MOD>( to update step <START_MOD>'{}', '{}'<END_MOD>. step.getId(), step.getStepName()<START_MOD>); org.ovirt.engine.core.bll.job.JobRepositoryImpl.log.error("Exception"<END_MOD>, e); } return null; } }); }
@java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object returnValue) { if (((java.<START_MOD>lang<END_MOD>.<START_MOD>Boolean<END_MOD>) (returnValue))) { getAddBricksCommand().setIsExecutionAllowed(true); setMessage(null); } <START_MOD>else {<END_MOD> getAddBricksCommand().setIsExecutionAllowed(false); setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().volumeEmptyClusterValidationMsg()); }<START_MOD> }<END_MOD>
private boolean isConsoleCommandsExecutionAllowed() { final java.util.List<org.ovirt.engine.core.common.businessentities.VM> list = getSelectedItems(); if (list == null) { return false; } for (org.ovirt.engine.core.common.businessentities.VM vm : list) { if (consoleModelsCache.<START_MOD>getVmConsolesForVmId<END_MOD>(vm<START_MOD>.getId()<END_MOD>).canConnectToConsole()) { return true; } } return false; }
@java.lang.Override protected void endSuccessfully() { <START_MOD>handleEndAction<END_MOD>(); }
@java.lang.Override public int hashCode() { <START_MOD>return<END_MOD> <START_MOD>java.util.Objects.hash<END_MOD>(id<START_MOD>,<END_MOD> <START_MOD>created<END_MOD>); }
@java.lang.Override public void setMainTabSelectedItem(org.ovirt.engine.core.common.businessentities.VDSGroup selectedItem) { org.ovirt.engine.ui.webadmin.section.main.view.tab.cluster.SubTabClusterGeneralView.Driver.driver.edit(getDetailModel()); formBuilder.showForm(getDetailModel()); if (selectedItem.supportsVirtService()) { if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.PowerSave)) { setVisibility(true); leftSlider.setValue(selectedItem.getlow_utilization()); rightSlider.setValue(selectedItem.gethigh_utilization()); policyTimeLabel.setText((((((constants.clusterPolicyForTimeLabel()) +     + (selectedItem.getcpu_over_commit_duration_minutes())) +     + (constants.clusterPolicyMinTimeLabel()))); policyFieldLabel.setText(constants.clusterPolicyPowSaveLabel()); } else if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.EvenlyDistribute)) { setVisibility(true); leftSlider.setVisible(false); leftDummySlider.setVisible(true); rightSlider.setValue(selectedItem.gethigh_utilization()); policyTimeLabel.setText((((((constants.clusterPolicyForTimeLabel()) +     + (selectedItem.getcpu_over_commit_duration_minutes())) +     + (constants.clusterPolicyMinTimeLabel()))); policyFieldLabel.setText(constants.clusterPolicyEvenDistLabel()); } else { setVisibility(false); policyFieldLabel.setText(constants.clusterPolicyNoneLabel()); } } policyPanel.setVisible(selectedItem.supportsVirtService()); volumeSummaryPanel.setVisible(selectedItem.supportsGlusterService()); <START_MOD>form.update(); }<END_MOD>
private void removeHostedEngineLunDisk() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.BaseDisk> disks = org.ovirt.engine.core.bll.<START_MOD>storage.domains.<END_MOD>ImportHostedEngineStorageDomainCommand.getDbFacade().getBaseDiskDao().getDisksByAlias(StorageConstants.HOSTED_ENGINE_LUN_DISK_ALIAS); if ((disks != null) && (!(disks.isEmpty()))) { org.ovirt.engine.core.common.businessentities.storage.BaseDisk heDirectLun = disks.get(0); org.ovirt.engine.core.common.action.VdcReturnValueBase removeDisk = getBackend().runInternalAction(VdcActionType.RemoveDisk, new org.ovirt.engine.core.common.action.RemoveDiskParameters(heDirectLun.getId())); if (!(removeDisk.getSucceeded())) { org.ovirt.engine.core.bll.<START_MOD>storage.domains.<END_MOD>ImportHostedEngineStorageDomainCommand.setSucceeded(false); log.error( to remove the hosted engine direct lun disk } } }
public java.util.List<java.lang.String> validate() { for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : params.getInterfaces()) { java.lang.String name = iface.getName(); if (addInterfaceToProcessedList(iface)) { if (isBond(iface)) { extractBondIfModified(iface, name); } else { if (org.apache.commons.lang.StringUtils.isNotBlank(iface.getBondName())) { extractBondSlave(iface); } java.lang.String nameWithoutVlanId = org.ovirt.engine.core.utils.NetworkUtils.StripVlan(name); if (!(getExistingIfaces().containsKey(nameWithoutVlanId))) { addViolation(VdcBllMessages.NETWORK_INTERFACES_DONT_EXIST, nameWithoutVlanId); } } if ((violations.isEmpty()) && (org.apache.commons.lang.StringUtils.isNotBlank(iface.getNetworkName()))) { extractNetwork(iface); } } } validateBondSlavesCount(); <START_MOD>java.util.List<java.lang.String> violations = <END_MOD>extractRemovedNetworks(); extractRemovedBonds(); detectSlaveChanges(); <START_MOD>violations.addAll(translateViolations()); <END_MOD>return <START_MOD>violations; }<END_MOD>
@java.lang.Override public boolean canBeSelected() { boolean hasVmSpiceSupport = java.lang.Boolean.TRUE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().hasSpiceSupport(getEntity().getOs(), getEntity().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())); return (getEntity().getGraphicsInfos().containsKey(GraphicsType.SPICE)) && hasVmSpiceSupport; }
<START_MOD>private boolean isCheckStatusSupported() { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.getDbFacade().getVdsDao().get(org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.getParameters().getVdsId()); return org.ovirt.engine.core.common.FeatureSupported.getDeviceListWithoutStatusSupported(vds.getVdsGroupCompatibilityVersion()); }<END_MOD>
protected void updateTimeZone(<START_MOD>final java.lang.String selectedTimeZone) { final org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase.TimezoneType timezoneType = getTimeZoneType(); if ((cachedTimeZones.get(timezoneType)) == <END_MOD>null)<START_MOD> { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetTimeZoneList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmModelBehaviorBase) (target)); java.util.Map<java.lang.String, java.lang.String> timezones = ((java.util.Map<java.lang.String, java.lang.String>) (returnValue)); cachedTimeZones.put(timezoneType, timezones.entrySet()); behavior.postUpdateTimeZone(selectedTimeZone); } }, getModel().getHash())); } else { postUpdateTimeZone(selectedTimeZone); } }<END_MOD>
protected boolean checkIfImageDiskCanBeAdded(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator) { if (Guid.Empty.equals(getStorageDomainId())) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_SPECIFIED); } boolean returnValue; org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = createStorageDomainValidator(); returnValue = (((((((((org.ovirt.engine.core.bll.AddDiskCommand.getParameters().isSkipDomainCheck()) || (validate(storageDomainValidator.isDomainExistAndActive()))) && (!(isShareableDiskOnGlusterDomain()))) && (checkImageConfiguration())) && (validate(storageDomainValidator.hasSpaceForNewDisk(getDiskImageInfo())))) && (validate(storageDomainValidator.isDomainWithinThresholds()))) && (checkExceedingMaxBlockDiskSize())) && (canAddShareableDisk())) && (validate(diskValidator.isVirtIoScsiValid(vm)))) && (validate(diskValidator.isDiskInterfaceSupported(org.ovirt.engine.core.bll.AddDiskCommand.getVm()))); if (returnValue && (vm != null)) { org.ovirt.engine.core.common.businessentities.StoragePool sp = org.ovirt.engine.core.bll.AddDiskCommand.getStoragePool(); returnValue = (((validate(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(sp).isUp())) && (isStoragePoolMatching(vm))) && (org.ovirt.engine.core.bll.AddDiskCommand.isVmNotLocked())) && (org.ovirt.engine.core.bll.AddDiskCommand.isVmNotInPreviewSnapshot()); } return returnValue; }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> locks = new java.util.HashMap<>(); locks.put(org.ovirt.engine.core.bll.RemoveVdsCommand.getParameters().getVdsId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VDS, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_OBJECT_LOCKED)); return locks; }
<START_MOD>@java.lang.Override public boolean isRequiredNetworkAffected(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2) { final org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel logicalNetworkModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel) (op1)); return ((logicalNetworkModel.getNetwork().getCluster()) != null) && (logicalNetworkModel.getNetwork().getCluster().isRequired()); }<END_MOD>
<START_MOD>private boolean consoleDeviceChanged() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> consoleDevices = org.ovirt.engine.core.bll.UpdateVmCommand.getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmId(), VmDeviceGeneralType.CONSOLE, VmDeviceType.CONSOLE.getName()); return (org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().isConsoleEnabled()) == (consoleDevices.isEmpty()); }<END_MOD>
<START_MOD>private void guestAgentIsUpOrBalloonDeflated(org.ovirt.engine.core.compat.Guid vmId) { vmsWithUncontrolledBalloon.remove(vmId); }<END_MOD>
@org.junit.Test public void testSave() { newVmStatistics.setId(newVmStatic.getId()); newVmStatistics.setMigrationProgressPercent(0<START_MOD>); newVmStatistics.setMemoryUsageHistory("2,3,4"); newVmStatistics.setCpuUsageHistory("5,6,7"); newVmStatistics.setNetworkUsageHistory(null<END_MOD>); dao.save(newVmStatistics); org.ovirt.engine.core.common.businessentities.VmStatistics stats = dao.get(newVmStatic.getId()); assertNotNull(stats); assertEquals(newVmStatistics, stats); }
<START_MOD>@java.lang.Override public int hashCode() { if (((service) == null) && ((parentService) == null)) { return 0; } if ((service) == null) { return parentService.hashCode(); } if ((parentService) == null) { return service.hashCode(); } return (997 * ((int) (service.hashCode()))) ^ (991 * ((int) (parentService.hashCode()))); }<END_MOD>
private javax.ws.rs.core.Response cloneVmFromSnapshot(org.ovirt.engine.core.common.businessentities.VmStatic staticVm<START_MOD>, org.ovirt.engine.api.model.VM vm<END_MOD>, java.lang.String snapshotId, java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.DiskImage> images) { org.ovirt.engine.core.compat.Guid sourceSnapshotId = asGuid(snapshotId); org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters params = new org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters(staticVm, sourceSnapshotId); params.setDiskInfoDestinationMap(images); params.setMakeCreatorExplicitOwner(shouldMakeCreatorExplicitOwner()); <START_MOD>if (vm.isSetConsoleDeviceEnabled()) { params.setConsoleEnabled(vm.isConsoleDeviceEnabled()); } <END_MOD>return performCreate(VdcActionType.AddVmFromSnapshot, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetVmByVmId, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
<START_MOD>private boolean isBondModeFailover(java.lang.String bondOptions) { java.util.regex.Matcher matcher = org.ovirt.engine.core.bll.network.host.InterfacesSpeed.BOND_OPTS_MODE_CAPTURE.matcher(bondOptions); matcher.find(); int bondMode = java.lang.Integer.parseInt(matcher.group(1)); return (bondMode == 1) || (bondMode == 3); }<END_MOD>
<START_MOD>private void editMacPool() { org.ovirt.engine.ui.uicommonweb.models.macpool.SharedMacPoolModel model = new org.ovirt.engine.ui.uicommonweb.models.macpool.SharedMacPoolModel(this, $missing$); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editSharedMacPoolTitle()); model.setHashName("edit_shared_mac_pool"); model.setHelpTag(HelpTag.edit_shared_mac_pool); setWindow(model); model.setEntity(((org.ovirt.engine.core.common.businessentities.MacPool) (getSelectedItem()))); }<END_MOD>
<START_MOD>private void initTunedProfiles() { this.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetGlusterTunedProfiles, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel.this.stopProgress(); java.util.List<java.lang.String> tunedProfiles = new java.util.ArrayList<>(); if (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getSucceeded()) { tunedProfiles.addAll(java.util.Arrays.asList(((java.lang.String) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())).split(","))); } tunedProfile.setItems(tunedProfiles); } })); }<END_MOD>
<START_MOD>public java.lang.String getFaviconPath() { java.io.File favicon = new java.io.File(((filePath) + "/favicon.ico")); if (favicon.exists()) { return (path) + "/favicon.ico"; } return null; }<END_MOD>
@org.junit.Test public void testRemoveRole() { dao.remove(existingRole.getId()); org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD> result = dao.get(existingRole.getId()); assertNull(result); }
protected void syncSearch(org.ovirt.engine.core.common.queries.<START_MOD>QueryType<END_MOD> vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase) { syncSearch(vdcQueryType, vdcQueryParametersBase, new SetItemsAsyncQuery()); }
public static org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractTextColumn<END_MOD><org.ovirt.engine.core.common.businessentities.Disk> getAliasColumn(java.lang.String sortBy) { org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractTextColumn<END_MOD><org.ovirt.engine.core.common.businessentities.Disk> column = new org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractTextColumn<END_MOD><org.ovirt.engine.core.common.businessentities.Disk>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Disk object) { return object.getDiskAlias(); } <START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.Disk object) {<END_MOD> return <START_MOD>null; } }; return <END_MOD>org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable(column, sortBy); }
private org.ovirt.engine.core.common.businessentities.ErrataData runErrataListMethod(java.lang.String relativeUrl, java.lang.String hostName) { org.ovirt.engine.core.common.businessentities.ErrataData errataData = new org.ovirt.engine.core.common.businessentities.ErrataData(); try { org.ovirt.engine.core.bll.host.provider.foreman.ErrataWrapper wrapper = objectMapper.readValue(runHttpGetMethod(relativeUrl), org.ovirt.engine.core.bll.host.provider.foreman.ErrataWrapper.class); errataData.setErrata(mapErrata(java.util.Arrays.asList(wrapper.getResults()))); errataData.setErrataCounts(mapErrataCounts(wrapper)); java.util.stream.Stream.of(org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.values()).forEach(( errataType) -> addErrataCountForType(errataData, errataType)); } catch (java.lang.Exception e) { log.error( to retrieve errata for content host '{}' via url '{}': <START_MOD>with error <END_MOD>{} hostName, relativeUrl, e.getMessage()); log.debug("Exception", e); return org.ovirt.engine.core.common.businessentities.ErrataData.emptyData(); } return errataData; }
@java.lang.Override public java.lang.Void runInTransaction() { for (org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter param : getParameters().getClusterNetworksParameters()) { org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.updateNetworkAttachment(param.getVdsGroupId(), param.getNetworkCluster(), param.getNetwork()<START_MOD>, this<END_MOD>); } return null; }
public static org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer createVdsServer(java.lang.String hostname, int port, int clientTimeOut, int connectionTimeOut, int clientRetries, int heartbeat) { org.<START_MOD>apache.commons.httpclient.HttpClient client<END_MOD> = <START_MOD>org.ovirt.engine.core.vdsbroker.HttpUtils.getConnection(clientTimeOut, connectionTimeOut, clientRetries, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsMaxConnectionsPerHost), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.MaxTotalConnections))<END_MOD>; <START_MOD>java.lang.String eventQueue<END_MOD> = org.ovirt.engine.core.<START_MOD>common.config.Config.getValue(ConfigValues.EventQueueName); return new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer(org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.createStompClient<END_MOD>(hostname, port, <START_MOD>connectionTimeOut, <END_MOD>clientTimeOut, clientRetries, <START_MOD>heartbeat<END_MOD>, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EncryptHostCommunication)<START_MOD>, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsmSSLProtocol), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EventProcessingPoolSize), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsRequestQueueName), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsResponseQueueName), eventQueue), client<END_MOD>); }
protected boolean isFenceAgentValid(org.ovirt.engine.core.common.businessentities.pm.FenceAgent agent) { if ((org.apache.commons.lang.StringUtils.isEmpty(agent.getUser())) || (org.apache.commons.lang.StringUtils.isEmpty(agent.getPassword()))) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_PM_ENABLED_WITHOUT_AGENT_CREDENTIALS); return false; } else { return true; } }
<START_MOD>@org.junit.Test public void basicTestWithoutEnoughSparesMemory() throws java.lang.Exception { parameters.put(HostedEngineMemoryReservationFilterPolicyUnit.SPARES_COUNT, "3"); hostedEngine.setVmMemSizeMb(7000); hosts.get(3).setPhysicalMemMb(2048); hosts.get(4).setPhysicalMemMb(2048); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> result = uut.filter(hosts, vm, parameters, messages); assertEquals(3, result.size()); }<END_MOD>
@org.junit.Test public void testSave() { dao.save(vnicProfile); org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(vnicProfile.getId()); assertNotNull(result); assertEquals(vnicProfile.getId(), result.getId()); assertFalse(result.isPortMirroring()); assertFalse(result.isPassthrough()); <START_MOD>assertTrue(result.isMigratable()); <END_MOD>}
<START_MOD>void localize(org.ovirt.engine.ui.common.CommonApplicationConstants constants) { memoryEditor.setLabel(constants.virtualMachineSnapshotPreviewPopupMemoryLabel()); messageLabel.setText(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().snapshotContainsMemory()); }<END_MOD>
<START_MOD>@java.lang.Override <END_MOD>public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc importCandidate(java.lang.String sdUUID, java.lang.String vmGUID, java.lang.String templateGUID, java.lang.String templateVolGUID, java.lang.String path, java.lang.String type, java.lang.String force) { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = irsServer.importCandidate(sdUUID, vmGUID, templateGUID, templateVolGUID, path, type, force); org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(xmlRpcReturnValue); return wrapper; }
private boolean canFindVmOrTemplate() { boolean retValue = true; if ((org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.ImageOperation.Copy)) { java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>VmTemplate> listTemplates = org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getVmTemplateDAO().getVmTemplatesListForDisk(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().getId()); if (listTemplates.isEmpty()) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST); retValue = false; } else { setVmTemplate(listTemplates.get(0)); sharedLockMap = java.util.Collections.singletonMap(listTemplates.get(0).getId(), LockingGroup.TEMPLATE.name()); } } else { java.util.List<org.ovirt.engine.core.common.businessentities.<END_MOD>VM> listVms = getVmsForDiskId(); if (!(listVms.isEmpty())) { sharedLockMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.VM vm : listVms) { sharedLockMap.put(vm.getId(), LockingGroup.VM.name()); } } } return retValue; }
private void onSave() { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())); if (!(model.validate())) { return; } java.lang.String name = model.getName().getEntity(); <START_MOD>boolean isBaseTemplate = false; <END_MOD>if ((<START_MOD>model.getBehavior()) instanceof <END_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.TemplateVmModelBehavior) <START_MOD>{ isBaseTemplate = ((org.ovirt.engine.ui.uicommonweb.models.vms.TemplateVmModelBehavior) <END_MOD>(model.getBehavior())).getVmTemplate().isBaseTemplate()<START_MOD>; } else if ((model.getBehavior()) instanceof org.ovirt.engine.ui.uicommonweb.models.templates.ExistingBlankTemplateModelBehavior) { isBaseTemplate = true; } if (isBaseTemplate<END_MOD>) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isTemplateNameUnique(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel templateListModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel) (target)); boolean isNameUnique = ((java.lang.Boolean) (returnValue)); templateListModel.postNameUniqueCheck(isNameUnique); } }), name); } else { postNameUniqueCheck(true); } }
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.HasSerialNumberPolicy.class, to = org.ovirt.engine.api.model.SerialNumber.class) public static org.ovirt.engine.api.model.SerialNumber map(org.ovirt.engine.core.common.businessentities.HasSerialNumberPolicy entity, org.ovirt.engine.api.model.SerialNumber template) { if (template == null) { template = new org.ovirt.engine.api.model.SerialNumber(); } org.ovirt.engine.api.model.SerialNumberPolicy policy = org.ovirt.engine.api.restapi.types.SerialNumberMapper.map(entity.getSerialNumberPolicy(), null); if (policy != null) { template.setPolicy(policy.value()); } if (policy == (org.ovirt.engine.api.model.SerialNumberPolicy.CUSTOM)) { template.setValue(entity.getCustomSerialNumber()); } return template; }<END_MOD>
private void updateWANDisableEffects(final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getWANDisableEffects(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects>><END_MOD>() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object target, java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects><START_MOD> returnValue<END_MOD>) <START_MOD>{ spice.getOptions().setWanDisableEffects<END_MOD>(returnValue); } })); }
protected boolean updateVmInSpm() { org.ovirt.engine.core.bll.storage.ovfstore.OvfUpdateProcessHelper ovfHelper = new org.ovirt.engine.core.bll.storage.ovfstore.OvfUpdateProcessHelper(<START_MOD>vmDeviceUtils<END_MOD>); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>> metaDictionary = new java.util.HashMap<>(); ovfHelper.loadVmData(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm()); ovfHelper.buildMetadataDictionaryForVm(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm(), metaDictionary, ovfHelper.getVmImagesFromDb(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm())); return ovfHelper.executeUpdateVmInSpmCommand(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm().getStoragePoolId(), metaDictionary, org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getParameters().getStorageDomainId()); }
private void logCommandInfo() { final char EQUAL = '='; final java.lang.String SEP = ","; java.lang.StringBuilder info = new java.lang.StringBuilder(); java.lang.String sep = ""; for (java.<START_MOD>util.Map.Entry<java.<END_MOD>lang.String<START_MOD>,<END_MOD> <START_MOD>java.lang.Object> stringObjectEntry<END_MOD> : createInfo.<START_MOD>entrySet<END_MOD>()) { info.append(sep); info.append(<START_MOD>stringObjectEntry.getKey()<END_MOD>); info.append(EQUAL); info.append(<START_MOD>stringObjectEntry<END_MOD>.<START_MOD>getValue<END_MOD>()); sep = SEP; } org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.log.infoFormat( {1} getClass().getName(), info.toString()); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__UPDATE); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__VM__CLUSTER); }
public org.ovirt.engine.api.model.Features getFeatures(org.ovirt.engine.api.model.Version version) { org.ovirt.engine.api.model.Features features = new org.ovirt.engine.api.model.Features(); if (org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual(version, BackendCapabilitiesResource.VERSION_3_0)) { addFeatureTransparentHugePages(features); } if (org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual(version, BackendCapabilitiesResource.VERSION_3_1)) { addFeatureGluster(features); addFeaturePosixDevice(features); addFeaturePortMirroring(features); addFeatureServerTime(features); addFeatureHostMemory(features); addFeatureHostSockets(features, version); addFeatureIgnoreCase(features); addFeatureMaxResults(features); addFeatureJSONContentType(features); addFeatureCorrelationId(features); addFeatureDiskActivation(features); addFeatureNicActivation(features); addFeatureSnapshotsRefactoring(features); addFeatureRemoveTemplateFromSD(features); addFeatureFloatingDisks(features); addFeatureAsyncDelete(features); addFeatureSessionBasedAuthentication(features); } if (org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual(version, BackendCapabilitiesResource.VERSION_3_3)) { addFeatureVmApplications(features); addFeatureVnicCustomProperties(features); <START_MOD>addFeatureGetHostCapabilities(features); <END_MOD>} return features; }
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("This will skip fencing operations on a Host that has active Storage Domains") java.lang.String skipFencingIfSDActiveInfo();<END_MOD>
@org.junit.Test public void canDoActionFailsOnSnapshotTypeRegularNotInPreview() { mockSnapshotExists(); mockSnapshot = new org.ovirt.engine.core.common.businessentities.Snapshot(); when(snapshotDao.exists(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(true); mockSnapshotFromDb(); mockSnapshot.setType(SnapshotType.REGULAR); mockSnapshot.setStatus(SnapshotStatus.OK); assertFalse(spyCommand.canDoAction()); assertTrue(spyCommand.getReturnValue().getCanDoActionMessages().contains(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_SNAPSHOT_NOT_IN_PREVIEW.toString())); }
<START_MOD>public void setPmOptions(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String> value) { options = value; }<END_MOD>
public boolean isProxyHostAvailable(org.ovirt.engine.core.common.businessentities.VDS vds, java.util.List<java.lang.String> messages) { org.ovirt.engine.core.bll.pm.FenceProxyLocator proxyHostLocator = getProxyLocator(vds); if (!(proxyHostLocator.isProxyHostAvailable())) { messages.add(<START_MOD>EngineMessages<END_MOD>.VDS_NO_VDS_PROXY_FOUND.name()); return false; } else { return true; } }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Virtual Machine - Guide Me java.lang.String newVirtualMachineGuideMeTitle();
protected void moveOrCopyAllImageGroups() { moveOrCopyAllImageGroups(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getId(), org.ovirt.engine.core.bll.storage.disk.image.<START_MOD>DisksFilter<END_MOD>.filterImageDisks(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap().values(), <START_MOD>org.ovirt.engine.core.bll.exportimport.ACTIVE_DISKS_ONLY<END_MOD>)); copyAllMemoryImages(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getId()); }
<START_MOD>private void initIpConfigurationNetmask() { networkAttachments.get(0).getIpConfiguration().getPrimaryAddress().setNetmask(org.ovirt.engine.core.bll.validator.network.NetworkAttachmentIpConfigurationValidatorTest.NETMASK); }<END_MOD>
public void setvds_strength(int value) { this.mVdsStatic.<START_MOD>setVdsStrength<END_MOD>(value); }
protected void doChangeDefautlHost(org.ovirt.engine.core.compat.Guid hostGuid) { if (<START_MOD>(<END_MOD>hostGuid != null<START_MOD>) && (firstRun)<END_MOD>) { org.ovirt.engine.core.compat.Guid vdsId = hostGuid; if ((getModel().getDefaultHost().getItems()) != null) { getModel().getDefaultHost().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(getModel().getDefaultHost().getItems(), new org.ovirt.engine.ui.uicommonweb.Linq.HostPredicate(vdsId))); } getModel().getIsAutoAssign().setEntity(false); } else { getModel().getIsAutoAssign().setEntity(true); } <START_MOD>firstRun = false; <END_MOD>}
<START_MOD>private int getTotalStorageDomainsStat() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSystemStatisticsValue(QueryConstants.SYSTEM_STATS_TOTAL_STORAGE_DOMAIN_ENTITY); }<END_MOD>
<START_MOD>private void generateAdditionalQueryParameters() { buffer.addLine("if (query != null) {"); buffer.addLine("for (Map.Entry<String, String> queryParam : query.entrySet()) {"); buffer.addLine("uriBuilder.addParameter(queryParam.getKey(), queryParam.getValue());"); buffer.addLine("}"); buffer.addLine("}"); }<END_MOD>
@org.junit.Test public void shouldDetectDifferentOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).<START_MOD>isEqualOs<END_MOD>(new org.ovirt.engine.core.bll.scheduling.OS("os2", new org.ovirt.engine.core.compat.Version("6.3"))), is(false)); }
<START_MOD>@java.lang.Override protected void executeVdsBrokerCommand() { try { status = org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getBroker().setAmountOfMemory(org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getVmId().toString(), java.lang.String.valueOf(org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getParameters().getAmountOfMemory())); org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.proceedProxyReturnValue(); } catch (java.lang.RuntimeException e) { org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.setVdsRuntimeError(e); org.ovirt.engine.core.vdsbroker.SetAmountOfMemoryVDSCommand.getVDSReturnValue().setExceptionString(null); } }<END_MOD>
public static void addProfileDataToNic(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.common.businessentities.network.VmNic nic) { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = null; org.ovirt.engine.core.common.businessentities.network.Network network = null; if ((nic.getVnicProfileId()) != null) { vnicProfile = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVnicProfileDao().get(nic.getVnicProfileId()); if (vnicProfile != null) { network = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDao().get(vnicProfile.getNetworkId()); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addQosForDevice(struct, vnicProfile, vm.getVdsGroupCompatibilityVersion()); } } struct.put(VdsProperties.NETWORK, (network == null ? "" : network.getName())); if ((vnicProfile != null) && (vnicProfile.isPortMirroring())) { struct.put(VdsProperties.PORT_MIRRORING, (network == null ? java.util.Collections.<java.lang.String>emptyList() : java.util.Collections.singletonList(network.getName()))); } <START_MOD>log.debugFormat( {0} is using profile {1} on network {2} nic.getName(), vnicProfile, network.getName()); <END_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addCustomPropertiesForDevice(struct, vm, vmDevice, vm.getVdsGroupCompatibilityVersion(), org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getVnicCustomProperties(vnicProfile)); }
<START_MOD>@java.lang.Override protected com.gwtplatform.mvp.shared.proxy.PlaceRequest getMainTabRequest() { org.ovirt.engine.ui.webadmin.section.main.presenter.tab.MainTabEngineErrataPresenter.logger.info(((this.getClass().toString()) + " getMainTabRequest")); return org.ovirt.engine.ui.common.place.PlaceRequestFactory.get(WebAdminApplicationPlaces.errataMainTabPlace); }<END_MOD>
public java.lang.String translateErrorTextSingle(java.lang.String errorMsg, java.lang.Boolean changeIfNotFound) { java.lang.String ret = ""; try { if ((errorMsg != null) && ((errorMsg.length()) > 0)) { java.lang.String errMsgCopy = errorMsg; if (!(isDynamicVariable(errorMsg))) { errorMsg = errorMsg.replace('.', '_'); } java.lang.String errorsString = errors.getString(errorMsg); if (errorsString != null) { ret = errorsString.replace("\n", "<br/>"); } else { if ((isDynamicVariable(errorMsg)) || (!changeIfNotFound)) { ret = errorMsg; } else { errorMsg = errMsgCopy; java.lang.String[] splitted = errorMsg.toLowerCase().split("_"); ret = <START_MOD>java.util.Arrays.stream(<END_MOD>splitted)<START_MOD>.collect(java.util.stream.Collectors.joining(  <END_MOD> } } } } catch (java.util.MissingResourceException e) { ret = errorMsg; } return ret; }
<START_MOD>@java.lang.Override protected void executeQueryCommand() { getDbFacade().getDiskProfileDao().get(getParameters().getId()); }<END_MOD>
<START_MOD>public java.lang.String getWatchdogAction() { return watchdogAction; }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response start(org.ovirt.engine.api.model.Action action) { <START_MOD>if (isStartRunOnce(action)) { <END_MOD>org.ovirt.engine.core.common.action.RunVmOnceParams params = map(map(getEntity(entityType, VdcQueryType.GetVmByVmId, new org.ovirt.engine.core.common.queries.IdQueryParameters(guid), id, true), new org.ovirt.engine.api.model.VM()), new org.ovirt.engine.core.common.action.RunVmOnceParams(guid)); if (action.isSetVm()) { validateEnums(org.ovirt.engine.api.model.VM.class, action.getVm()); org.ovirt.engine.api.model.VM vm = action.getVm(); params = map(vm, params); if ((vm.isSetPlacementPolicy()) && (vm.getPlacementPolicy().isSetHost())) { validateParameters(vm.getPlacementPolicy(), "host.id|name"); params.setDestinationVdsId(getHostId(vm.getPlacementPolicy().getHost())); } } if ((action.isSetPause()) && (action.isPause())) { params.setRunAndPause(true); } return doAction(VdcActionType.RunVmOnce, params, action); }<START_MOD> else { org.ovirt.engine.core.common.action.RunVmParams params = new org.ovirt.engine.core.common.action.RunVmParams(guid); if ((action.isSetPause()) && (action.isPause())) { params.setRunAndPause(true); } return doAction(VdcActionType.RunVm, params, action); } }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel userPortalListModel1 = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel) (model)); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel unitVmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (userPortalListModel1.getWindow())); org.ovirt.engine.core.common.action.AddVmFromTemplateParameters param = new org.ovirt.engine.core.common.action.AddVmFromTemplateParameters(gettempVm(), unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap(), org.ovirt.engine.core.compat.Guid.Empty); param.setMakeCreatorExplicitOwner(true<START_MOD>); param.setConsoleEnabled(((java.lang.Boolean) (unitVmModel.getIsConsoleDeviceEnabled().getEntity()))<END_MOD>); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); parameters.add(param); org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult a) { stopProgress(a.getState()); cancel(); } }, this); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLogicalUnits() { return getBackendCollection(VdcQueryType.GetDeviceList, new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(asGuid(hostId), org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN<START_MOD>, true<END_MOD>)); }
<START_MOD>public void addVolume(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid imageId, org.ovirt.engine.core.compat.Guid volumeId) { volumes.add(new org.ovirt.engine.core.common.vdscommands.SealDisksVDSCommandParameters.VolumeAddress(storageDomainId, imageId, volumeId)); }<END_MOD>
<START_MOD>private boolean stopVolume(org.ovirt.engine.core.compat.Guid volumeId) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolumeDao().getById(volumeId); if ((volume != null) && ((volume.getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP))) { org.ovirt.engine.core.common.action.VdcReturnValueBase retVal = runInternalAction(VdcActionType.StopGlusterVolume, new org.ovirt.engine.core.common.action.gluster.GlusterVolumeActionParameters(volumeId, true)); if (!(retVal.getSucceeded())) { handleVdsError(AuditLogType.GLUSTER_VOLUME_STOP_FAILED, retVal.getExecuteFailedMessages().toString()); setSucceeded(false); return false; } } return true; }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Disk is not supported by the selected configuration java.lang.String shareableDiskNotSupportedByConfiguration();
public void fatal(java.lang.Object <START_MOD>msg<END_MOD>) { log.<START_MOD>error<END_MOD>(addPrefixToLogMessage(<START_MOD>msg<END_MOD>)); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.<START_MOD>RepoImage<END_MOD> mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.<START_MOD>RepoImage<END_MOD> entity = new org.ovirt.engine.core.common.businessentities.<START_MOD>RepoImage<END_MOD>(); entity.setRepoDomainId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("storage_domain_id"))); entity.setLastRefreshed(rs.getLong("last_refreshed")); entity.setFileType(org.ovirt.engine.core.common.businessentities.ImageFileType.forValue(rs.getInt("file_type"))); return entity; }
private void UpdateExternalHostModels() { boolean enabled = getExternalHostProviderEnabled().getEntity(); if (enabled && ((getProviders().getItems()) == null)) { org.ovirt.engine.ui.frontend.AsyncQuery getProvidersQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getProvidersQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Provider> providers = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Provider>) (result)); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.Provider> providersListModel = getProviders(); providersListModel.setItems(providers); providersListModel.setIsChangable(true); <START_MOD>providersListModel.setSelectedItem(providers.get(0)); updateHostList(""); <END_MOD>} }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getAllProvidersByType(getProvidersQuery, ProviderType.FOREMAN); } setHostProviderWidgetsAvailability(enabled); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( bricks selected for removal in Distributed Replicate volume. <br/> Either all the selected bricks should be from the same sub volume or one brick each for every sub volume! java.lang.String cannotRemoveBricksDistributedReplicateVolume();
public static void Init() { org.ovirt.engine.core.bll.VmTemplateHandler.mUpdateVmTemplate = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.bll.VmTemplateHandler.class); org.ovirt.engine.core.bll.VmTemplateHandler.BlankVmTemplateId = new org.ovirt.engine.core.compat.Guid("00000000-0000-0000-0000-000000000000"); org.ovirt.engine.core.bll.VmTemplateHandler.mUpdateVmTemplate.AddPermittedFields(new java.lang.String[]{ "name", "description", "domain", "os", "osType", "is_auto_suspend", "interfaces", "mem_size_mb", "num_of_sockets", "cpu_per_socket", "vds_group_id", "num_of_monitors", "allowConsoleReconnect", "usb_policy", "time_zone", "diskMap", "default_boot_sequence", "iso_path", "diskImageMap", "default_display_type", "priority", "auto_startup", "is_stateless", "initrd_url", "kernel_url", "kernel_params", "images", "interfaces", "quotaId", "quotaName", "quotaEnforcementType", "migrationSupport", "dedicated_vm_for_vds", "smartcardEnabled"<START_MOD>, "preventDeletion"<END_MOD> }); }
@java.lang.Override public boolean validateAndSetQuota() { if (org.ovirt.engine.core.bll.quota.QuotaManager.getInstance().validateQuotaForStoragePool(getStoragePool(), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().getvds_group_id(), getQuotaId(), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue().getCanDoActionMessages())) { return org.ovirt.engine.core.bll.quota.QuotaManager.getInstance().validateAndSetStorageQuota(getStoragePool(), getStorageQuotaListParameters(), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue().getCanDoActionMessages()); } return false; }
private static java.util.concurrent.locks.Lock getSyncObject(org.ovirt.engine.core.compat.Guid domainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType) { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.ImageFileType> domainPerFileType = new org.ovirt.engine.core.common.utils.Pair(domainId, imageType); org.ovirt.engine.core.bll.<START_MOD>storage.domains.<END_MOD>IsoDomainListSyncronizer.syncDomainForFileTypeMap.putIfAbsent(domainPerFileType, new java.util.concurrent.locks.ReentrantLock()); return org.ovirt.engine.core.bll.<START_MOD>storage.domains.<END_MOD>IsoDomainListSyncronizer.syncDomainForFileTypeMap.get(domainPerFileType); }
@org.junit.Test public void vmNotInPreviewReturnsInvalidResultWhenInSnapshot() throws java.lang.Exception { when(snapshotDao.exists(vmId, SnapshotStatus.IN_PREVIEW)).thenReturn(true); org.ovirt.engine.core.bll.snapshots.SnapshotsValidatorTest.validateInvalidResult(validator.vmNotInPreview(vmId), <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_IN_PREVIEW); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> getPermittedStorageDomainsByStoragePool(org.ovirt.engine.core.compat.Guid userId, org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup, org.ovirt.engine.core.compat.Guid storagePoolId) { return getCallsHandler().executeReadList("Getstorage_domains_by_storage_pool_id_with_permitted_action", org.ovirt.engine.core.dao.<START_MOD>StorageDomainDAOImpl<END_MOD>.StorageDomainRowMapper.instance, getCustomMapSqlParameterSource().addValue("user_id", userId).addValue("action_group_id", actionGroup.getId()).addValue("storage_pool_id", storagePoolId)); }
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("Name") java.lang.String geoRepConfigName();<END_MOD>
<START_MOD>@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getMainModel().getRequestConsoleKeysCommand(); }<END_MOD>
private void setupMock() throws java.lang.Exception { mockEngineSSHDialog = mock(org.ovirt.engine.core.<START_MOD>bll.<END_MOD>utils.EngineSSHDialog.class); doNothing().when(mockEngineSSHDialog).connect(); doNothing().when(mockEngineSSHDialog).authenticate(); doReturn(mockEngineSSHDialog).when(getQuery()).getEngineSSHDialog(); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.dao.DbUserDAO dao = org.ovirt.engine.core.bll.AddUserCommand.getDbUserDAO(); java.util.HashSet<org.ovirt.engine.core.compat.Guid> groupIds = org.ovirt.engine.core.aaa.DirectoryUtils.getGroupIdsFromUser(directoryUser); org.ovirt.engine.core.<START_MOD>aaa.DirectoryUtils.flatGroups(directoryUser); org.ovirt.engine.core.<END_MOD>common.businessentities.DbUser dbUser = dao.getByExternalId(directoryUser.getDirectoryName(), directoryUser.getId()); if (dbUser == null) { dbUser = new org.ovirt.engine.core.common.businessentities.DbUser(directoryUser); dbUser.setId(org.ovirt.engine.core.compat.Guid.newGuid()); dbUser.setGroupIds(groupIds); dao.save(dbUser); } else { org.ovirt.engine.core.compat.Guid id = dbUser.getId(); dbUser = new org.ovirt.engine.core.common.businessentities.DbUser(directoryUser); dbUser.setId(id); dbUser.setGroupIds(groupIds); dao.update(dbUser); } setActionReturnValue(dbUser.getId()); org.ovirt.engine.core.bll.AddUserCommand.setSucceeded(true); }
@org.junit.Test public void validateVmMemoryCanStartOnVds() { boolean vmPassedMemoryRequirement = <START_MOD>slaValidator<END_MOD>.hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }
protected boolean validateFreeSpace(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator, java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList) { <START_MOD>for (org.ovirt.engine.core.common.businessentities.DiskImage disk : disksList) { disk.setVolumeType(VolumeType.Sparse); disk.setvolumeFormat(VolumeFormat.COW); } <END_MOD>return validate(storageDomainValidator.hasSpaceForNewDisks(disksList)); }
<START_MOD>public void updateNetworksFromParams(final org.ovirt.engine.core.compat.Guid vmId, java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters) { if ((parameters.size()) == 0) { callback.networkCreated(); return; } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.UpdateVmInterface, parameters, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { callback.networkCreated(); } }, this); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Disk(s) java.lang.String removeDisksTitle();
protected boolean checkExistingStorageDomain() { if ((org.ovirt.engine.core.bll.storage.AddExistingFileStorageDomainCommand.getStorageDomainStaticDAO().get(org.ovirt.engine.core.bll.storage.AddExistingFileStorageDomainCommand.getStorageDomain().getId())) != null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); } org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid> domainFromIrs = executeHSMGetStorageDomainInfo(new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.AddExistingFileStorageDomainCommand.getVdsId(), org.ovirt.engine.core.bll.storage.AddExistingFileStorageDomainCommand.getStorageDomain().getId())); if (domainFromIrs == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); } <START_MOD>org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.storage.AddExistingFileStorageDomainCommand.getStorageDomain()); if (!(validate(validator.isHostedEngineStorage()))) { <END_MOD>return <START_MOD>false; } return <END_MOD>concreteCheckExistingStorageDomain(domainFromIrs); }
public static void GetDataCentersWithPermittedActionOnClusters(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.StoragePool>(); } return source; } }; org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetDataCentersWithPermittedActionOnClustersParameters getDataCentersWithPermittedActionOnClustersParameters = new org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetDataCentersWithPermittedActionOnClustersParameters(); getDataCentersWithPermittedActionOnClustersParameters.setActionGroup(actionGroup); getDataCentersWithPermittedActionOnClustersParameters.setSupportsVirtService(supportsVirtService); getDataCentersWithPermittedActionOnClustersParameters.setSupportsGlusterService(supportsGlusterService); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetDataCentersWithPermittedActionOnClusters, getDataCentersWithPermittedActionOnClustersParameters, aQuery); }
<START_MOD>org.ovirt.engine.core.vdsbroker.irsbroker.StatusReturnForXmlRpc prepareMerge(java.lang.String spUUID, java.lang.String jobUUID, java.util.Map<java.lang.String, java.lang.String> subchainInfo);<END_MOD>
@java.lang.Override protected boolean canDoAction() { initializeObjectState(); <START_MOD>org.ovirt.engine.core.bll.RemoveSnapshotCommand<END_MOD>.getVmDAO().get(org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVmId()); org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().setCanDoAction(validate(<START_MOD>validateVmNotDuringSnapshot())); if (!(validateSnapshotExists(<END_MOD>))) { org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().setCanDoAction(false); } if (!(<START_MOD>validateImages(<END_MOD>))) { org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().setCanDoAction(false); } if (<START_MOD>!(validateImageNotInTemplate())<END_MOD>) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_IMAGE_TEMPLATE); org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().setCanDoAction(false); } if (<START_MOD>!(validateImageNotActive())<END_MOD>) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_ACTIVE_IMAGE); org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().setCanDoAction(false); } if (!(org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().getCanDoAction())) { addCanDoActionMessage(VdcBllMessages.VAR__TYPE__SNAPSHOT); addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE); } return org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().getCanDoAction(); }
public static void populateMemoryUtilizationVms(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getMemoryUtilizationVms(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addVm(entity); } }
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ("IsAvailable".equals(((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).PropertyName)) { qpidTitle.setVisible(behavior.getIsAvailable()); } }<END_MOD>
protected void setupTemplate(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.ui.uicommonweb.models.ListModel model) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getTemplateById(new org.ovirt.engine.ui.frontend.AsyncQuery(getModel(), new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (target)); org.ovirt.engine.core.common.businessentities.VmTemplate template = ((org.ovirt.engine.core.common.businessentities.VmTemplate) (returnValue)); <START_MOD>setupRootTemplate(template.getBaseTemplateId()); <END_MOD>model.getTemplate().setItems(java.util.<START_MOD>Collections.singletonList(template)); model.getTemplate().setSelectedItem(template); model.getTemplate().setIsChangable(false); postInitTemplate();<END_MOD> } }<START_MOD>, getModel().getHash()), vm.getVmtGuid());<END_MOD> }
<START_MOD>@java.lang.Override public org.ovirt.engine.api.model.Label get() { return performGet(VdcQueryType.GetNetworkLabelsByNetworkId, new org.ovirt.engine.core.common.queries.IdQueryParameters(guid)); }<END_MOD>
protected void refreshModel() { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.events.EventListModel eventListModel = ((org.ovirt.engine.ui.uicommonweb.models.events.EventListModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.AuditLog> list = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.AuditLog>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); requestingData = false; for (org.ovirt.engine.core.common.businessentities.AuditLog auditLog : list) { if (((auditLog.getCorrelationId()) != null) && (auditLog.getCorrelationId().startsWith(TaskListModel._WEBADMIN_))) { auditLog.setCorrelationId(auditLog.getCorrelationId().split("_")[2]); } } eventListModel.updateItems(list); } }); org.ovirt.engine.core.common.queries.SearchParameters params = new org.ovirt.engine.core.common.queries.SearchParameters(applySortOptions(<START_MOD>org.ovirt.engine.ui.uicommonweb.models.events.EventListModel.<END_MOD>getSearchString()), org.ovirt.engine.core.common.interfaces.SearchType.AuditLog, <START_MOD>org.ovirt.engine.ui.uicommonweb.models.events.EventListModel.<END_MOD>isCaseSensitiveSearch()); params.setMaxCount(<START_MOD>org.ovirt.engine.ui.uicommonweb.models.events.EventListModel.<END_MOD>getSearchPageSize()); params.setSearchFrom(((getLastEvent()) != null ? getLastEvent().getaudit_log_id() : 0)); params.setRefresh(false); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, params, query); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DisplayType.class, to = java.lang.String.class) public static java.lang.String map(org.ovirt.engine.core.common.businessentities.DisplayType type, java.lang.String incoming) { <START_MOD>if (type == null) { return null; } else { <END_MOD>switch (type) { case vnc : return DisplayType.VNC.value(); case qxl : return DisplayType.SPICE.value(); default : return null; } }<START_MOD> }<END_MOD>
<START_MOD>@java.lang.Override protected void setUpEntityQueryExpectations(int times, java.lang.Object failure) throws java.lang.Exception { while ((times--) > 0) { setUpEntityQueryExpectations(VdcQueryType.GetNetworksByStoragePoolId, org.ovirt.engine.core.common.queries.StoragePoolQueryParametersBase.class, new java.lang.String[]{ "StoragePoolId" }, new java.lang.Object[]{ org.ovirt.engine.api.restapi.resource.BackendDataCenterNetworksResourceTest.DATA_CENTER_ID }, getEntityList(), failure); } }<END_MOD>
private void updateDiskVmSnapshotId() { org.ovirt.engine.core.compat.Guid snapshotId = org.ovirt.engine.core.bll.AttachDiskToVmCommand.getSnapshotDao().getId(org.ovirt.engine.core.bll.AttachDiskToVmCommand.getVmId(), SnapshotType.ACTIVE); if (disk.getDiskStorageType().isInternal()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); org.ovirt.engine.core.bll.AttachDiskToVmCommand.getImageDao().updateImageVmSnapshotId(diskImage.getImageId(), snapshotId); } else { throw new org.ovirt.engine.core.common.errors.<START_MOD>EngineException<END_MOD>(org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.StorageException,   of snapshot id was initiated for unsupported disk type } }
<START_MOD>public java.lang.Double getLastWatchdogEvent() { return lastWatchdogEvent; }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__ADD); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__QUOTA); }
private java.lang.Boolean getMigrateCompressed() { if (org.ovirt.engine.core.common.FeatureSupported.migrationCompression(MigrateVmCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())) { if ((MigrateVmCommand.getVm().getMigrateCompressed()) != null) { return MigrateVmCommand.getVm().getMigrateCompressed(); } if ((MigrateVmCommand.getVdsGroup().getMigrateCompressed()) != null) { return MigrateVmCommand.getVdsGroup().getMigrateCompressed(); } return org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DefaultMigrationCompression); } return null; }
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult networkQosExistsOrNull() { return ((vnicProfile.getNetworkQosId()) != null) && ((getNetworkQos()) == null) ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_QOS_NOT_EXISTS) : org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
@java.lang.Override public void setEnabled(boolean enabled) { contentWidget.setEnabled(enabled); if (enabled) { getFormLabel().getElement().replaceClassName(OvirtCss.LABEL_DISABLED, OvirtCss.LABEL_ENABLED); } else { getFormLabel().getElement().replaceClassName(OvirtCss.LABEL_ENABLED, OvirtCss.LABEL_DISABLED); } if (!(<START_MOD>setKeepTooltipOnSetEnabled<END_MOD>)) { updateWidgetTitle(null); } }
public static org.ovirt.engine.core.common.businessentities.VmDynamic buildVMDynamicDataFromList(<START_MOD>java.util.Map<END_MOD> xmlRpcStruct) { org.ovirt.engine.core.common.businessentities.VmDynamic vmdynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(); if (xmlRpcStruct.<START_MOD>containsKey<END_MOD>(VdsProperties.vm_guid)) { try { vmdynamic.setId(new org.ovirt.engine.core.compat.Guid(((java.lang.String) (xmlRpcStruct.<START_MOD>get<END_MOD>(VdsProperties.vm_guid))))); } catch (org.ovirt.engine.core.compat.FormatException e) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.log.info( id is not in uuid format,   e); vmdynamic.setId(new org.ovirt.engine.core.compat.Guid()); } } if (xmlRpcStruct.<START_MOD>containsKey<END_MOD>(VdsProperties.status)) { vmdynamic.setStatus(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.convertToVmStatus(((java.lang.String) (xmlRpcStruct.<START_MOD>get<END_MOD>(VdsProperties.status))))); } return vmdynamic; }
@java.lang.Override public java.nio.channels.SocketChannel call() throws java.io.IOException { java.net.InetAddress address = java.net.InetAddress.getByName(hostname); org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info(( to   + address)); final java.net.InetSocketAddress addr = new java.net.InetSocketAddress(address, port); final java.nio.channels.SocketChannel socketChannel = java.nio.channels.SocketChannel.open(); socketChannel.connect(addr); socketChannel.configureBlocking(false); <START_MOD>updateLastHeartBeat(); <END_MOD>return socketChannel; }
<START_MOD>public static java.util.List<org.ovirt.engine.core.aaa.DirectoryUser> fetchUsersByIdsRecursively(final java.lang.String authz, final java.lang.String namespace, final java.util.List<java.lang.String> ids) { return org.ovirt.engine.core.aaa.DirectoryUtils.fetchUsersByIdsRecursively(org.ovirt.engine.core.utils.extensionsmgr.EngineExtensionsManager.getInstance().getExtensionByName(authz), namespace, ids); }<END_MOD>
<START_MOD>private static org.ovirt.engine.core.common.utils.Pair noneAndNone() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); java.lang.String expectedOutput = "{}"; return new org.ovirt.engine.core.common.utils.Pair(vmInit, expectedOutput); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.SpmStopOnIrsVDSCommandParameters params = new org.ovirt.engine.core.vdsbroker.irsbroker.SpmStopOnIrsVDSCommandParameters(org.ovirt.engine.core.bll.ReinitializeSPMCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.ReinitializeSPMCommand.getParameters().getPreferredSPMId()); runVdsCommand(VDSCommandType.SpmStopOnIrs, params); org.ovirt.engine.core.bll.ReinitializeSPMCommand.setSucceeded(true); }<END_MOD>
@org.ovirt.engine.ui.frontend.DefaultStringValue( ID must be a number between   and <START_MOD>4094<END_MOD> java.lang.String NETWORK_VLAN_OUT_OF_RANGE();
<START_MOD>@java.lang.Override public com.google.gwt.event.shared.HandlerRegistration addValueChangeHandler(com.google.gwt.event.logical.shared.ValueChangeHandler<org.ovirt.engine.ui.uicommonweb.models.vms.IconWithDefault> handler) { return this.addHandler(handler, com.google.gwt.event.logical.shared.ValueChangeEvent.getType()); }<END_MOD>
@java.lang.Override public boolean IsBetter(org.ovirt.engine.core.bll.VDS x, org.ovirt.engine.core.bll.VDS y, org.ovirt.engine.core.bll.VM vm) { if (((((((<START_MOD>org.ovirt.engine.core.bll.VdsSelector.geteffective_cpu_cores(x)) == null) || ((org.ovirt.engine.core.bll.VdsSelector.geteffective_cpu_cores(y<END_MOD>)) == null)) || ((x.getusage_cpu_percent()) == null)) || ((y.getusage_cpu_percent()) == null)) || ((x.getpending_vcpus_count()) == null)) || ((y.getpending_vcpus_count()) == null)) { return false; } return (calcDistributeMetric(x, vm)) > (calcDistributeMetric(y, vm)); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(ginjector.getApplicationConstants().virtualMachineEventSubTabLabel(), <START_MOD>8<END_MOD>, ginjector.getSubTabVirtualMachineEventModelProvider(), org.ovirt.engine.ui.common.widget.Align.RIGHT); }
@java.lang.Override <START_MOD>protected<END_MOD> <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.core.common.utils.ToStringBuilder<END_MOD> <START_MOD>appendAttributes<END_MOD>(<START_MOD>org.ovirt.engine.core.common.utils.ToStringBuilder tsb<END_MOD>) { return <START_MOD>super<END_MOD>.<START_MOD>appendAttributes(tsb)<END_MOD>.<START_MOD>append<END_MOD>(<START_MOD>"vmId",<END_MOD> getVmId()); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("System") java.lang.String systemRoleTree();
private void mockExistingIfaces(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface... nics) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingIfaces = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(); for (int i = 0; i < (nics.length); i++) { existingIfaces.add(createVdsInterface(nics[i].getId(), nics[i].getName(), nics[i].getBonded(), nics[i].getBondName(), nics[i].getVlanId(), nics[i].getNetworkName(), nics[i].isBridged(), nics[i].getAddress()<START_MOD>, nics[i].isQosOverridden()<END_MOD>)); } when(interfaceDAO.getAllInterfacesForVds(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(existingIfaces); }
<START_MOD>public org.ovirt.engine.core.common.businessentities.ExternalStatus getExternalStatus() { return storagePoolIsoMapData.getExternalStatus(); }<END_MOD>
<START_MOD>protected boolean validateImagesNotActive() { for (org.ovirt.engine.core.common.businessentities.DiskImage image : org.ovirt.engine.core.bll.RemoveSnapshotImagesCommand.getParameters().getImages()) { if ((org.ovirt.engine.core.bll.RemoveSnapshotImagesCommand.getDiskImageDao().get(image.getImageId())) != null) { return false; } } return true; }<END_MOD>
<START_MOD>public void setVmsSelectionModel(org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.affinity_groups.VmsSelectionModel vmsSelectionModel) { this.vmsSelectionModel = vmsSelectionModel; }<END_MOD>
@org.junit.Test public void testGetBaseNicVerifyDelegation() throws java.lang.Exception { org.ovirt.engine.core.vdsbroker.CalculateBaseNic spy = spy(calculateBaseNic); spy.getBaseNic(baseNic); verify(spy).getBaseNic(org.mockito.Matchers.any(), org.mockito.Matchers.any()); }
<START_MOD>private boolean searchContainsSortByPart(java.lang.String searchQuery) { return searchQuery.toLowerCase().contains(SyntaxChecker.SORTBY.toLowerCase()); }<END_MOD>
<START_MOD>public com.google.gwt.view.client.SelectionModel<T> getSelectionModel() { if ((selectionModel) == null) { if (singleSelectionOnly) { selectionModel = new com.google.gwt.view.client.SingleSelectionModel(new org.ovirt.engine.ui.uicommonweb.models.QueryableEntityKeyProvider()); } else { selectionModel = new org.ovirt.engine.ui.uicommonweb.models.OrderedMultiSelectionModel(new org.ovirt.engine.ui.uicommonweb.models.QueryableEntityKeyProvider()); } } return selectionModel; }<END_MOD>
<START_MOD>public java.util.Map<?, java.lang.Integer> getOperationsWeight() { return operationsWeight; }<END_MOD>
<START_MOD>@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskInterface> diskInterfaces = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskInterface>) (returnValue)); boolean isOsSupportVirtioScsi = diskInterfaces.contains(DiskInterface.VirtIO_SCSI); getModel().getIsVirtioScsiEnabled().setIsChangable(isOsSupportVirtioScsi); if (!isOsSupportVirtioScsi) { getModel().getIsVirtioScsiEnabled().setEntity(false); getModel().getIsVirtioScsiEnabled().setChangeProhibitionReason(constants.cannotEnableVirtioScsiForOs()); } else { if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(vmId)) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel().getSelectedCluster(); boolean isVirtioScsiEnabled = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.VirtIoScsiEnabled, cluster.getcompatibility_version().getValue()))); getModel().getIsVirtioScsiEnabled().setEntity(isVirtioScsiEnabled); } else { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isVirtioScsiEnabledForVm(new org.ovirt.engine.ui.frontend.AsyncQuery(getModel(), new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { getModel().getIsVirtioScsiEnabled().setEntity(((java.lang.Boolean) (returnValue))); } }), vmId); } } }<END_MOD>
<START_MOD>public final boolean setAuthRecord(org.ovirt.engine.api.extensions.ExtMap authRecord) { return setData(org.ovirt.engine.core.bll.session.SessionDataContainer.AUTH_RECORD_PARAMETER_NAME, authRecord); }<END_MOD>
<START_MOD>@java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object ReturnValue) { setItems(((java.util.List<org.ovirt.engine.core.common.businessentities.Provider>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue()))); }<END_MOD>
@java.lang.Override protected void init(T parameters) { super.init(parameters); org.ovirt.engine.core.common.businessentities.storage.DiskImage representativeImage = getRepresentativeImage(); if (representativeImage == null) { return; } setImage(representativeImage); setStorageDomainId(representativeImage.getStorageIds().get(0)); <START_MOD>org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().setContainCinderDisks((!(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(getImages()).isEmpty()))); <END_MOD>if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getContainerId()))) { setVmId(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getContainerId()); } else { java.util.List<org.ovirt.engine.core.common.businessentities.VM> listVms = org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getVmDao().getVmsListForDisk(representativeImage.getId(), false); if (!(listVms.isEmpty())) { org.ovirt.engine.core.common.businessentities.VM vm = listVms.get(0); setVm(vm); } } if (isLiveMerge()) { org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.clearTaskHandlers(); } }
<START_MOD>private<END_MOD> void <START_MOD>refreshClusters() { log.debug( clusters... java.util.Set<java.lang.String> availableClusters = discovery.getClusters(); if (availableClusters == null) { log.error( discovery failed return; } availableClusters.removeAll(clusterOptimizers.keySet()); java.util.Properties config = new org.ovirt.optimizer.config.ConfigProvider().load().getConfig(); <END_MOD>final <START_MOD>int maxSteps = java.lang.Integer.parseInt(config.getProperty(ConfigProvider.SOLVER_STEPS)); for (java.lang.String clusterId : availableClusters<END_MOD>) { log.<START_MOD>info<END_MOD>(java.lang.String.format( <START_MOD>cluster<END_MOD> %s <START_MOD>detected clusterId)); long timeout = (java.lang.Integer.parseInt(configProvider.load().getConfig().getProperty(ConfigProvider.SOLVER_TIMEOUT))) * 1000; int refresh = java.lang.Integer.parseInt(configProvider.load().getConfig().getProperty(ConfigProvider.SOLVER_DATA_REFRESH)); org.ovirt.optimizer.solver.thread.ClusterOptimizer optimizer = new org.ovirt.optimizer.solver.thread.ClusterOptimizer(clusterId, maxSteps, timeout, configProvider.customRuleFiles()); org.ovirt.optimizer.solver.thread.ClusterInfoUpdater updater = new org.ovirt.optimizer.solver.thread.ClusterInfoUpdater(client, optimizer); clusterOptimizers.put(clusterId, optimizer); java.util.concurrent.CompletableFuture.supplyAsync(optimizer, executors.getThreadPool()).thenApply(OptimalDistributionStepsSolution::getClusterId).thenApply(clusterOptimizers::remove); executors.getScheduler().schedule(() -> executors.getThreadPool().submit(updater), refresh, java.util.concurrent.TimeUnit.SECONDS)<END_MOD>; } }
<START_MOD>public static org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmPopupWidgetConfig hiddenField() { return new org.ovirt.engine.ui.common.widget.uicommon.popup.vm.VmPopupWidgetConfig(false, true, false, false); }<END_MOD>
<START_MOD>public void parseConfigurations(java.util.List<org.ovirt.engine.core.extensions.mgr.Configuration> configurations) { for (org.ovirt.engine.core.extensions.mgr.Configuration config : configurations) { java.lang.String name = null; if (isAuthenticationConfig(config)) { name = config.getString(org.ovirt.engine.core.aaa.AuthenticationProfileRepository.AUTHN_PROFILE_NAME); org.ovirt.engine.core.aaa.Directory directory = org.ovirt.engine.core.aaa.DirectoryManager.getInstance().parseDirectory(config); directoryMap.put(name, directory); } else if (isAuthorizationConfig(config)) { name = config.getString(org.ovirt.engine.core.aaa.AuthenticationProfileRepository.AUTHZ_PROFILE_NAME); org.ovirt.engine.core.aaa.Authenticator authenticator = org.ovirt.engine.core.aaa.AuthenticatorManager.getInstance().parseAuthenticator(config); authenticatorMap.put(name, authenticator); } } for (java.util.Map.Entry<java.lang.String, org.ovirt.engine.core.aaa.Authenticator> entry : authenticatorMap.entrySet()) { java.lang.String name = entry.getKey(); org.ovirt.engine.core.aaa.Directory directory = directoryMap.get(name); if (directory != null) { org.ovirt.engine.core.aaa.AuthenticationProfile profile = new org.ovirt.engine.core.aaa.AuthenticationProfile(name, entry.getValue(), directory); profiles.put(name, profile); } entry.getValue(); } }<END_MOD>
<START_MOD>public void setSelectVolumesCommand(org.ovirt.engine.ui.uicommonweb.UICommand selectVolumesCommand) { this.selectVolumesCommand = selectVolumesCommand; }<END_MOD>
<START_MOD>@java.lang.Override <END_MOD>public final java.util.List<java.lang.String> TranslateMessages(java.util.List<java.lang.String> errorMsg, boolean changeIfNotFound) { return doTranslation(errorMsg, changeIfNotFound, java.util.Locale.getDefault()); }
@java.lang.Override protected void executeQueryCommand() { <START_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = diskDao.getAllFromDisksIncludingSnapshotsByDiskId(<END_MOD>org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.<START_MOD>getParameters().getId(), org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getUserID(), org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getParameters().isFiltered()); if (((disks.size()) == 1) && ((disks.get(0)) instanceof org.ovirt.engine.core.common.businessentities.storage.LunDisk)) { org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.<END_MOD>getQueryReturnValue().setReturnValue(<START_MOD>disks<END_MOD>.get(<START_MOD>0)); return; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> snapshots = new java.util.ArrayList<>(); disks.stream().filter(( disk) -> !(disk instanceof org.ovirt.engine.core.common.businessentities.storage.LunDisk)).map(( disk) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk))).forEach(( disk) -> { if (disk.getActive()) { disk.getSnapshots().add(org.ovirt.engine.core.common.businessentities.storage.DiskImage.copyOf(disk)); activeDisk = disk; activeDisk.getSnapshots().addAll(snapshots); } else { if ((activeDisk) != null) { activeDisk.getSnapshots().add(disk); } else { snapshots.add(disk); } } }); <END_MOD>org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.<START_MOD>getQueryReturnValue().setReturnValue(activeDisk); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc monitorCommand(java.lang.String vmId, java.lang.String monitorCommand) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.monitorCommand").withParameter("vmID", vmId).withParameter("command", monitorCommand).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
<START_MOD>public boolean isExtendTicketFailed() { return extendTicketFailed; }<END_MOD>
<START_MOD>public abstract void updateInterface(int osId, org.ovirt.engine.core.compat.Version clusterVersion);<END_MOD>
<START_MOD>public void reconfigure() { destroy(); if (((container) != null) && ((selector) != null)) { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip.logger.info(("tooltip mode 1 on element id " + (element.getId()))); tooltip(element, isAnimated, isHTML, placement.getCssName(), selector, content.asString(), trigger.getCssName(), showDelayMs, hideDelayMs, container); } else if ((container) != null) { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip.logger.info(("tooltip mode 2 on element id " + (element.getId()))); tooltip(element, isAnimated, isHTML, placement.getCssName(), content.asString(), trigger.getCssName(), showDelayMs, hideDelayMs, container); } else if ((selector) != null) { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip.logger.info(("tooltip mode 3 on element id " + (element.getId()))); tooltip(element, isAnimated, isHTML, placement.getCssName(), selector, content.asString(), trigger.getCssName(), showDelayMs, hideDelayMs); } else { org.ovirt.engine.ui.common.widget.tooltip.ElementTooltip.logger.info(("tooltip mode 4 on element id " + (element.getId()))); tooltip(element, isAnimated, isHTML, placement.getCssName(), content.asString(), trigger.getCssName(), showDelayMs, hideDelayMs); } }<END_MOD>
<START_MOD>private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> map(java.util.List<org.ovirt.engine.core.bll.host.provider.foreman.ForemanHostWrapper> foremanHosts) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>(foremanHosts.size()); for (org.ovirt.engine.core.bll.host.provider.foreman.ForemanHostWrapper host : foremanHosts) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); java.lang.String hostName = host.getHost().getName(); vds.setVdsName(hostName); vds.setManagementIp(hostName); hosts.add(vds); } return hosts; }<END_MOD>
@java.lang.Override public boolean isDisplayNetworkAffected(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?<START_MOD>, ?, ?<END_MOD>> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<<START_MOD>?, ?, <END_MOD>?> op2) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkToBeAttached = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel) (op1)); return (org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.isDisplayNetwork(networkToBeAttached)) && (networkToBeAttached.isAttached()); }
<START_MOD>private void debugQuery(org.ovirt.engine.core.common.queries.VdcQueryType queryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase parameters) { if (org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.isDebugEnabled()) { java.lang.StringBuilder builder = new java.lang.StringBuilder(50); builder.append("Query type: "); builder.append(queryType); builder.append(", Parameters: "); builder.append(parameters); org.ovirt.engine.ui.frontend.server.gwt.GenericApiGWTServiceImpl.log.debug(builder.toString()); } }<END_MOD>
<START_MOD>protected org.ovirt.engine.core.common.businessentities.storage_pool setUpStoragePool(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.common.businessentities.storage_pool pool = control.createMock(org.ovirt.engine.core.common.businessentities.storage_pool.class); expect(pool.getId()).andReturn(id).anyTimes(); return pool; }<END_MOD>
<START_MOD>@javax.validation.constraints.Size(min = 1, max = org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.HOST_NIC_NAME_LENGTH) @javax.validation.constraints.Pattern(regexp = org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.BOND_NAME_PATTERN, message = "NETWORK_BOND_NAME_BAD_FORMAT") <END_MOD>public java.lang.String getBondName() { return bondName; }
protected boolean checkDomainCanBeAttached(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { return ((((<START_MOD>((<END_MOD>checkStorageDomainType(storageDomain)) && (isStorageDomainFormatCorrectForPool(storageDomain, org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool()))) && (checkStorageDomainSharedStatusNotLocked(storageDomain))) && ((((storageDomain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) || ((storageDomain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport))) || (isStorageDomainNotInPool(storageDomain)))) && (isStorageDomainTypeCorrect(storageDomain))<START_MOD>) && (isStorageDomainTypeCompatibleWithPool(storageDomain))) && ((isMixedTypesAllowedOnPool()) || (!(isStoragePoolContainsOtherTypes(storageDomain))))<END_MOD>; }
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD>>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD>>(); }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.ProviderType type1, org.ovirt.engine.core.common.businessentities.ProviderType type2) { <START_MOD>final org.ovirt.engine.ui.uicompat.EnumTranslator enumTranslator = new org.ovirt.engine.ui.uicompat.EnumTranslator(); <END_MOD>return org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator.comp(<START_MOD>enumTranslator<END_MOD>.<START_MOD>get<END_MOD>(type1), <START_MOD>enumTranslator<END_MOD>.<START_MOD>get<END_MOD>(type2)); }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { org.ovirt.engine.core.bll.validator.HostValidator hostValidator = new org.ovirt.engine.core.bll.validator.HostValidator(getVds()); if ((!(validate(hostValidator.hostExists()))) || (!(validate(hostValidator.isUp())))) { return false; } if ((getVds().getVdsGroupCompatibilityVersion().compareTo(Version.v3_4)) < 0) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_VDS_HA_MAINT_NOT_SUPPORTED); } if (!(getVds().getHighlyAvailableIsConfigured())) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_VDS_HA_NOT_CONFIGURED); } return true; }
private org.ovirt.engine.core.bll.ValidationResult hostStatusLegalForSetupNetworks() { java.util.List<org.ovirt.engine.core.common.businessentities.VDSStatus> supportedStatuses = java.util.Arrays.asList(VDSStatus.Maintenance, VDSStatus.Up, VDSStatus.NonOperational); boolean hostStatusLegalForSetupNetworks = (supportedStatuses.contains(host.getStatus())) || (((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing)) && (internalExecution)); if (!hostStatusLegalForSetupNetworks) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL, host.getName(), host.getStatus().name()); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@org.junit.Test public void testGetAllConnectionsOfNfsDomain() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections = dao.getAllForDomain(org.ovirt.engine.core.compat.Guid.createGuidFromString("d9ede37f-e6c3-4bf9-a984-19174070aa31")); assertEquals(connections.size(), 1); assertEquals(connections.get(0).<START_MOD>geIid<END_MOD>(), "0cc146e8-e5ed-482c-8814-270bc48c2981"); }
<START_MOD>private java.util.List<org.ovirt.engine.core.common.businessentities.NumaNode> parseNumaNodes(java.lang.String numaNodes) { java.util.List<org.ovirt.engine.core.common.businessentities.NumaNode> parsedNumaNodes = null; if ((numaNodes != null) && (!(numaNodes.trim().isEmpty()))) { parsedNumaNodes = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.NumaNode>(); for (java.lang.String numaNode : numaNodes.split(";")) { try { parsedNumaNodes.add(new org.ovirt.engine.core.common.businessentities.NumaNode(numaNode)); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(org.ovirt.engine.core.compat.StringFormat.format("Could not parse numa nodes %s for vds %s", numaNodes, getId())); } } } return parsedNumaNodes; }<END_MOD>
@org.junit.Test public void testValidateAllClustersLevel() { storagePoolWithVersionHigherThanCluster(); java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> clusterList = org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.createClusterList(); org.ovirt.engine.core.common.businessentities.VDSGroup secondCluster = new org.ovirt.engine.core.common.businessentities.VDSGroup(); secondCluster.setCompatibilityVersion(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.VERSION_1_2); secondCluster.setName("secondCluster"); clusterList.add(secondCluster); org.ovirt.engine.core.common.businessentities.VDSGroup thirdCluster = new org.ovirt.engine.core.common.businessentities.VDSGroup(); thirdCluster.setCompatibilityVersion(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.VERSION_1_1); thirdCluster.setName("thirdCluster"); clusterList.add(thirdCluster); when(vdsGroupDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(clusterList); assertFalse(cmd.checkAllClustersLevel()); java.util.List<java.lang.String> messages = cmd.getReturnValue().getCanDoActionMessages(); assertTrue(messages.contains(<START_MOD>EngineMessages<END_MOD>.ERROR_CANNOT_UPDATE_STORAGE_POOL_COMPATIBILITY_VERSION_BIGGER_THAN_CLUSTERS.toString())); assertTrue(messages.get(0).contains("firstCluster")); assertFalse(messages.get(0).contains("secondCluster")); assertTrue(messages.get(0).contains("thirdCluster")); }
private boolean supportsGlusterSnapshotFeature(org.ovirt.engine.core.common.businessentities.VDSGroup cluster) { return (cluster.supportsGlusterService()) && (<START_MOD>(<END_MOD>org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterSnapshot(cluster.getCompatibilityVersion()))<START_MOD> || (getClusterUtils().isFeatureSupportedAsAdditionalFeature(cluster.getId(), ClusterUtils.FEATURE_GLUSTER_SNAPSHOT)))<END_MOD>; }
<START_MOD>public boolean executeUpdateVmInSpmCommand(org.ovirt.engine.core.compat.Guid storagePoolId, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>> metaDictionary, org.ovirt.engine.core.compat.Guid storageDomainId) { org.ovirt.engine.core.common.vdscommands.UpdateVMVDSCommandParameters tempVar = new org.ovirt.engine.core.common.vdscommands.UpdateVMVDSCommandParameters(storagePoolId, metaDictionary); tempVar.setStorageDomainId(storageDomainId); return org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.UpdateVM, tempVar).getSucceeded(); }<END_MOD>
<START_MOD>public java.util.Map<java.lang.String, java.lang.Object> glusterVolumeCreateGeoRepSession(org.ovirt.engine.core.compat.Guid masterServerId, java.lang.String masterVolumeName, java.lang.String slaveServerIp, java.lang.String slaveVolumeName);<END_MOD>
<START_MOD>@org.junit.Test public void shouldMigrateVm4ToHost1() { org.ovirt.engine.core.common.scheduling.AffinityGroup positiveGroup = createAffinityGroup(vdsGroup, true, vm1, vm2, vm4); affinityGroups.add(positiveGroup); assertEquals(vm4, enforcer.chooseNextVmToMigrate()); }<END_MOD>
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, autoRecoverable, connection, name, storage, storageFormat, storagePoolType, storageType, description, sanState, wipeAfterDelete, discardAfterDelete, firstMetadataDevice, vgMetadataDevice, warningLowSpaceIndicator, criticalSpaceActionBlocker<START_MOD>, useForBackup<END_MOD>); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase Login(java.lang.String userName, java.lang.String password, java.lang.String domain) { org.ovirt.engine.core.common.action.LoginUserParameters params = new org.ovirt.engine.core.common.action.LoginUserParameters(<START_MOD>domain, <END_MOD>userName, password); params.setSessionId(getSessionId()); params.setActionType(VdcActionType.LoginAdminUser); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = getBackend().Login(params); return returnValue; }
<START_MOD>private void clearConcurrentGroup() { concurrentPanel.clear(); concurrentPanel.add(agentLabel); }<END_MOD>
protected java.lang.Object[] getEncodedParameters(java.lang.Object[] parameters, org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapIdEncoder idEncoder) { if (parameters == null) { return null; } java.lang.Object[] retVal = parameters.clone(); int index = 0; for (java.lang.Object parameter : parameters) { if (parameter instanceof org.ovirt.engine.<START_MOD>extensions<END_MOD>.<START_MOD>aaa<END_MOD>.<START_MOD>builtin<END_MOD>.<START_MOD>kerberosldap.IdType<END_MOD>) { retVal[index] = idEncoder.encodedId(((org.ovirt.engine.<START_MOD>extensions<END_MOD>.<START_MOD>aaa<END_MOD>.<START_MOD>builtin<END_MOD>.<START_MOD>kerberosldap.IdType<END_MOD>) (parameter))); } index++; } return retVal; }
<START_MOD>public org.ovirt.engine.core.dal.VdcBllMessages getCanDoActionMsg() { return canDoActionMsg; }<END_MOD>
<START_MOD>private void addDnsData(org.ovirt.engine.core.common.businessentities.VmInit vmInit, java.util.Map<java.lang.String, java.lang.Object> network) { if (network == null) { return; } if (hasDnsServers(vmInit)) { network.put("dns_nameservers", java.util.Arrays.asList(vmInit.getDnsServers().split(" "))); } if (hasDnsSearch(vmInit)) { network.put("dns_search", java.util.Arrays.asList(vmInit.getDnsSearch().split(" "))); } }<END_MOD>
public void updateDynamicData(org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicData) { vdsDynamicDao.<START_MOD>update<END_MOD>(dynamicData); cachedVds.setDynamicData(dynamicData); <START_MOD>cachedDynamicData = dynamicData; <END_MOD>}
<START_MOD>public void setVolumeType(org.ovirt.engine.core.common.businessentities.VolumeType volumeType) { this.volumeType = volumeType; }<END_MOD>
<START_MOD>@org.junit.Test public void testLibvirtVersion() { final java.lang.String testVersion = "some-string-value"; org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS(); vds.setId(Guid.Empty); vds.setlibvirt_version(testVersion); org.ovirt.engine.api.model.Host host = org.ovirt.engine.api.restapi.types.HostMapper.map(vds, ((org.ovirt.engine.api.model.Host) (null))); assertNotNull(host.getLibvirtVersion()); assertEquals(host.getLibvirtVersion(), testVersion); }<END_MOD>
public static boolean hasCpuToRunVM(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm) { if (((vds.getusage_cpu_percent()) == null) || ((vm.getUsageCpuPercent()) == null)) { return false; } int predictedVmCpu = ((vm.getUsageCpuPercent()) * (vm.getNumOfCpus())) / (org.ovirt.engine.core.bll.VdsSelector.getEffectiveCpuCores(vds)); boolean result = ((vds.getusage_cpu_percent()) + predictedVmCpu) <= (vds.gethigh_utilization()); if (org.ovirt.engine.core.bll.RunVmCommandBase.log.isDebugEnabled()) { org.ovirt.engine.core.bll.RunVmCommandBase.log.debugFormat(( {0} has {1}% CPU load; VM {2} is predicted to have {3}% CPU load;   +   threshold is {4}%. Host is {5}suitable in terms of CPU. vds.getvds_name(), vds.getusage_cpu_percent(), vm.<START_MOD>getName<END_MOD>(), predictedVmCpu, vds.gethigh_utilization(), (result ? "" :     } return result; }
<START_MOD>private void localize() { }<END_MOD>
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue runFencingAction(org.ovirt.engine.core.common.businessentities.FenceActionType actionType<START_MOD>, org.ovirt.engine.core.common.businessentities.FenceAgentOrder order) { java.lang.String managementIp = getManagementIp(order);<END_MOD> java.lang.String managementPort = <START_MOD>getManagementPort(order); java.lang.String managementAgent = getManagementAgent(order); java.lang.String managementUser = getManagementUser(order); java.lang.String managementPassword = getManagementPassword(order); java.lang.String managementOptions = getManagementOptions(order); org.ovirt.engine.core.bll.FencingExecutor.log.infoFormat(( <{0}> Power Management command, Proxy Host:{1},   +   Target Host:{3}, Management IP:{4}, User:{5}, Options:{6} actionType, _vdsToRunName, managementAgent, <END_MOD>_vds.<START_MOD>getvds_name(), managementIp, managementUser, managementOptions); return org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.FenceVds, new org.ovirt.engine.core.common.vdscommands.FenceVdsVDSCommandParameters(_vdsToRunId, <END_MOD>_vds.<START_MOD>getId(), managementIp,<END_MOD> managementPort<START_MOD>, managementAgent, managementUser, managementPassword,<END_MOD> managementOptions<START_MOD>,<END_MOD> actionType<START_MOD>)); }<END_MOD>
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(org.ovirt.engine.core.bll.network.host.RemoveNetworkAttachmentCommand.getParameters().getVdsId()); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachmentForRemove = org.ovirt.engine.core.bll.network.host.RemoveNetworkAttachmentCommand.getDbFacade().getNetworkAttachmentDao().get(org.ovirt.engine.core.bll.network.host.RemoveNetworkAttachmentCommand.getParameters().getNetworkAttachment().getId()); params.getRemovedNetworkAttachments().add(networkAttachmentForRemove); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = runInternalAction(VdcActionType.HostSetupNetworks, params); propagateFailure(returnValue); setSucceeded(returnValue.getSucceeded()); }<END_MOD>
@java.lang.Override protected void initLoginModel() { super.initLoginModel(); final org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalLoginModel loginModel = getLoginModel(); loginModel.getIsENGINEUser().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { java.lang.Boolean isEngineUser = loginModel.getIsENGINEUser().getEntity(); if (isEngineUser != null) { userRole.setEngineUser(isEngineUser); performLogin(loginModel); } } }); }
<START_MOD>public void setUseForBackup(java.lang.Boolean useForBackup) { this.useForBackup = useForBackup; }<END_MOD>
private javax.ws.rs.core.Response getFenceStatus(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue result = getEntity(org.ovirt.engine.core.common.vdscommands.VDSReturnValue.class, VdcQueryType.GetVdsFenceStatus, new org.ovirt.engine.core.common.queries.VdsIdParametersBase(guid), guid.toString()); org.ovirt.engine.core.common.businessentities.<START_MOD>pm.FenceOperationResult<END_MOD> fenceResult = ((org.ovirt.engine.core.common.businessentities.<START_MOD>pm.FenceOperationResult<END_MOD>) (result.getReturnValue())); if (<START_MOD>(fenceResult.getStatus()) == (org.ovirt.engine.core.common.businessentities.pm.FenceOperationResult.Status.SUCCESS<END_MOD>)) { org.ovirt.engine.api.model.PowerManagement pm = new org.ovirt.engine.api.model.PowerManagement(); pm.setStatus(org.ovirt.engine.api.common.util.StatusUtils.create(<START_MOD>convertHostPowerStatus(fenceResult.getPowerStatus())<END_MOD>)); action.setPowerManagement(pm); return actionSuccess(action); } else { return handleFailure(action, fenceResult.getMessage()); } }
<START_MOD>private boolean isPassDiscardSupported() { return validate(getDiskValidator(disk).isPassDiscardSupported(getDiskVmElement(), HotPlugDiskToVmCommand.getStorageDomain())); }<END_MOD>
@java.lang.Override protected void endWithFailure() { if ((org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.getParameters().getCommandStep()) == (org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskLiveStep.DESTROY_IMAGE)) {<START_MOD> org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.getReturnValue().setEndActionTryAgain(false);<END_MOD> org.ovirt.engine.core.compat.Guid currentChildId = org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.getParameters().getChildCommands().get(org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.getParameters().getCommandStep()); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(currentChildId))) { org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand(currentChildId); if (command != null) { command.getParameters().setTaskGroupSuccess(false); org.ovirt.engine.core.bll.Backend.getInstance().endAction(VdcActionType.DestroyImage, command.getParameters(), org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.cloneContextAndDetachFromParent()); } } } else { org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.setSucceeded(true); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAllForStoragePoolAndStatus(org.ovirt.engine.core.compat.Guid storagePool, org.ovirt.engine.core.common.businessentities.VDSStatus status) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getCallsHandler().executeReadList("getVdsByStoragePoolIdWithStatus", org.ovirt.engine.core.dao.<START_MOD>VdsDAOImpl<END_MOD>.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("storage_pool_id", storagePool).addValue("status", (status != null ? status.getValue() : null))); return uniteAgents(vdsList); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( to move VM image to another Storage Domain java.lang.String allowToMoveVmImageToAnotherStorageDomainRoleTreeTooltip();
private void initExternalHostProviderWidgets(boolean isAvailable) { externalHostProviderEnabledEditor.setVisible(isAvailable); externalHostNameEditor.setVisible(false); <START_MOD>externalHostsTypeEditor.setVisible(false); <END_MOD>providersEditor<START_MOD>.setVisible(false); externalDiscoveredHostsEditor.setVisible(false); externalHostGroupsEditor<END_MOD>.setVisible(false); searchProviderPanel.setVisible(false); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Virtual Machine java.lang.String removeVirtualMachineTitle();
<START_MOD>public void setHighlyAvailableLocalMaintenance(java.lang.Boolean value) { highlyAvailableLocalMaintenance = value; }<END_MOD>
@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, compatVersion, compatibilityVersion, cpuName, description, maxVdsMemoryOverCommit, countThreadsAsCores, migrateOnError, name, storagePoolId, storagePoolName<START_MOD>, switchType<END_MOD>, transparentHugepages, virtService, glusterService, glusterCliBasedSchedulingOn, tunnelMigration, emulatedMachine, trustedService, haReservation, clusterPolicyName, clusterPolicyProperties, requiredRngSources, enableKsm, enableBallooning, optimizationType, serialNumberPolicy, customSerialNumber, groupHostsAndVms, fencingPolicy, autoConverge, migrateCompressed, glusterTunedProfile, addtionalFeaturesSupported, maintenanceReasonRequired, ksmMergeAcrossNumaNodes, customMigrationNetworkBandwidth, migrationBandwidthLimitType); }
@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__RESUME); }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if (!(super.<START_MOD>validate<END_MOD>())) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDiskImages = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getVmTemplate().getDiskTemplateMap().values(), true, false, false); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage dit : templateDiskImages) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = diskInfoDestinationMap.get(dit.getId()); if (!(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.checkImageConfiguration(destStorages.get(diskImage.getStorageIds().get(0)).getStorageStaticData(), diskImage, org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getReturnValue().<START_MOD>getValidateMessages<END_MOD>()))) { return false; } } return true; }
<START_MOD>@org.ovirt.engine.ui.common.DefaultStringValue("Remove selected") java.lang.String cloudInitNetworkRemoveLabel();<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( System Permission to User java.lang.String addSystemPermissionToUserTitle();
@org.junit.Test public void testGetNotFound() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUpEntityQueryExpectations(VdcQueryType.GetAllNetworks, org.ovirt.engine.core.common.queries.GetAllNetworkQueryParamenters.class, new java.lang.String[]{ "StoragePoolId" }, new java.lang.Object[]{ org.ovirt.engine.core.compat.Guid.Empty }, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>>()); control.replay(); try { resource.get(); fail( WebApplicationException } catch (javax.ws.rs.WebApplicationException wae) { verifyNotFoundException(wae); } }
public java.lang.String <START_MOD>getSourceNetworkName<END_MOD>() { return <START_MOD>(source.getCustomProperties()) != null ? source.getCustomProperties().get("networkName") : null<END_MOD>; }
<START_MOD>public java.lang.String cantConnectReason();<END_MOD>
public static java.lang.String resource(org.ovirt.engine.sdk.generator.<START_MOD>utils<END_MOD>.<START_MOD>Tree<org<END_MOD>.<START_MOD>ovirt.engine.sdk.generator.rsdl.Location> entityTree<END_MOD>) <START_MOD>{<END_MOD> org.ovirt.engine.sdk.generator.rsdl.templates.SubResourceTemplate template = new org.ovirt.engine.sdk.generator.rsdl.templates.SubResourceTemplate(); template.set(<START_MOD>"entity_type"<END_MOD>, <START_MOD>org.ovirt.engine.sdk.generator.rsdl.SchemaRules.getSchemaType<END_MOD>(<START_MOD>entityTree<END_MOD>)); template.set(<START_MOD>"entity_broker_type"<END_MOD>, <START_MOD>org.ovirt.engine.sdk.generator.rsdl.BrokerRules.getBrokerType<END_MOD>(<START_MOD>entityTree<END_MOD>)); return template.evaluate(); }
private static java.lang.Long AssignLongValue(<START_MOD>java.util.Map<END_MOD> input, java.lang.String name) { if (input.containsKey(name)) { if (((input.<START_MOD>get<END_MOD>(name)) instanceof java.lang.Long) || ((input.<START_MOD>get<END_MOD>(name)) instanceof java.lang.Integer)) { return java.lang.Long.parseLong(input.<START_MOD>get<END_MOD>(name).toString()); } java.lang.String stringValue = ((java.lang.String) (((input.<START_MOD>get<END_MOD>(name)) instanceof java.lang.String) ? input.<START_MOD>get<END_MOD>(name) : null)); if (!(org.apache.commons.lang.StringUtils.isEmpty(stringValue))) { stringValue = stringValue.split("[.]", (-1))[0]; } try { return java.lang.Long.parseLong(stringValue); } catch (java.lang.NumberFormatException e) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.log.errorFormat( to parse {0} value {1} to long name, stringValue); } } return null; }
@org.junit.Test public void testCanDoFailReadOnlyOnInterface() { org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createParameters(); initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid(), parameters); mockVm(); doReturn(true).when(command).isDiskPassPciAndIdeLimit(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class)); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR)).when(diskValidator).isReadOnlyPropertyCompatibleWithInterface(); doReturn(diskValidator).when(command).getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class)); org.ovirt.engine.core.bll.<START_MOD>ValidateTestUtils.runAndAssertValidateFailure<END_MOD>(command, EngineMessage.ACTION_TYPE_FAILED_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR); }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { boolean retValue = true; if (org.apache.commons.lang.StringUtils.isBlank(org.ovirt.engine.core.bll.AddJobCommand.getParameters().getDescription())) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.ACTION_TYPE_EMPTY_DESCRIPTION); retValue = false; } return retValue; }
@java.lang.Override protected boolean canDoAction() { initVmTemplate(); if (<START_MOD>(<END_MOD>org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.isImagesAlreadyOnTarget()) <START_MOD>&& (!(validateImagesOnStorage(vmTemplateFromConfiguration, ovfEntityData)))) <END_MOD>{ return false; } java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> disks = new java.util.ArrayList(org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getVmTemplate().getDiskTemplateMap().values()); setImagesWithStoragePoolId(org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getStorageDomain().getStoragePoolId(), disks); org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().setImages(disks); org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getVmTemplate().setImages(disks); return super.canDoAction(); }
<START_MOD>@java.lang.Override public void onResult(java.sql.ResultSet rs) throws java.sql.SQLException { while (rs.next()) { result.put(org.ovirt.engine.core.common.AuditLogSeverity.forValue(rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO.SEVERITY)), rs.getInt(org.ovirt.engine.ui.frontend.server.dashboard.dao.EventDAO.COUNT)); } }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.bll.tasks.interfaces.CommandCallback getCallback() { return org.ovirt.engine.core.bll.RemoveVmCommand.getParameters().isContainCinderDisks() ? new org.ovirt.engine.core.bll.storage.disk.cinder.GenericCinderCommandCallback<org.ovirt.engine.core.bll.RemoveVmCommand<T>>() : null; }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot update the name of Template Version, Only the Version name can be updated.") java.lang.String VMT_CANNOT_UPDATE_VERSION_NAME();<END_MOD>
<START_MOD>@org.junit.Test public void testImportVMFromConfigurationWhenStorageDomainIsInactive() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = createStorageDomain(); storageDomain.setStatus(StorageDomainStatus.Inactive); doReturn(storageDomain).when(cmd).getStorageDomain(); assertFalse(cmd.canDoAction()); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Host java.lang.String configureHostRoleTree();
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { <START_MOD>vms<END_MOD> = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData> vmDataList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : ((java.lang.Iterable<org.ovirt.engine.core.common.businessentities.VM>) (value))) { org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData vmData = new org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData(vm); <START_MOD>if (vms<END_MOD>.contains(vm)<START_MOD>) {<END_MOD> vmData.setExistsInSystem(<START_MOD>true); vmData.getClone().setEntity(true); vmData.getClone().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().importVMThatExistsInSystemMustClone()); vmData.getClone().setIsChangable(false); } else<END_MOD> { <START_MOD>vms.add(vm<END_MOD>); } vmDataList.add(vmData); } org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmFromExportDomainModel.super.setItems(vmDataList); doInit(storageDomainId); }
@java.lang.Override protected java.util.Map<java.lang.String, java.lang.String> getExclusiveLocks() { if (!(org.apache.commons.lang.StringUtils.isBlank(getParameters().getVm().<START_MOD>getName<END_MOD>()))) { return java.util.Collections.singletonMap(getParameters().getVm().<START_MOD>getName<END_MOD>(), LockingGroup.VM_NAME.name()); } return null; }
<START_MOD>private void updateBricks(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity existingVolume, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity fetchedVolume) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> fetchedBricks = fetchedVolume.getBricks(); updateExistingAndNewBricks(existingVolume, fetchedBricks); removeDeletedBricks(existingVolume, fetchedBricks); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( import/export operations java.lang.String allowImportExportOperationsRoleTreeTooltip();
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__RESET); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__GLUSTER_VOLUME_OPTION); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (getPassthrough().getEntity()) { getPortMirroring().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().portMirroringNotChangedIfPassthrough()); getPortMirroring().setIsChangeable(false); getPortMirroring().setEntity(false); getNetworkQoS().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().networkQosNotChangedIfPassthrough()); getNetworkQoS().setIsChangeable(false); getNetworkQoS().setSelectedItem(<START_MOD>null<END_MOD>); } else { getPortMirroring().setIsChangeable(true); getNetworkQoS().setIsChangeable(true); } }
<START_MOD>public void cancel() { }<END_MOD>
<START_MOD>@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetHardwareInfoAsyncVDSCommand.getBroker().getHardwareInfo(new GetHardwareInfoVDSCommandCallback()); }<END_MOD>
<START_MOD>@java.lang.Override protected void afterExecution() { java.lang.String response; try { response = org.ovirt.engine.core.vdsbroker.irsbroker.RetrieveImageDataVDSCommand.getMethod().getResponseHeader("Result").getValue(); } catch (java.lang.Exception e) { throw org.ovirt.engine.core.vdsbroker.irsbroker.RetrieveImageDataVDSCommand.createNetworkException(e); } org.ovirt.engine.core.vdsbroker.irsbroker.RetrieveImageDataVDSCommand.handleJsonResponse(response); processResponseHeaderValue(org.ovirt.engine.core.vdsbroker.irsbroker.RetrieveImageDataVDSCommand.getMethod(), "Content-Length", org.ovirt.engine.core.vdsbroker.irsbroker.RetrieveImageDataVDSCommand.getParameters().getSize().toString()); byte[] result; try { result = org.ovirt.engine.core.vdsbroker.irsbroker.RetrieveImageDataVDSCommand.getMethod().getResponseBody(); } catch (java.io.IOException e) { log.debug(e); throw org.ovirt.engine.core.vdsbroker.irsbroker.RetrieveImageDataVDSCommand.createNetworkException(e); } if ((result.length) != (org.ovirt.engine.core.vdsbroker.irsbroker.RetrieveImageDataVDSCommand.getParameters().getSize())) { throwVdsErrorException(java.lang.String.format("retrieving failed: requested %s bytes, received %s bytes ", result.length, org.ovirt.engine.core.vdsbroker.irsbroker.RetrieveImageDataVDSCommand.getParameters().getSize()), VdcBllErrors.RETRIEVE_FAILURE); } org.ovirt.engine.core.vdsbroker.irsbroker.RetrieveImageDataVDSCommand.getVDSReturnValue().setReturnValue(result); org.ovirt.engine.core.vdsbroker.irsbroker.RetrieveImageDataVDSCommand.getVDSReturnValue().setSucceeded(true); }<END_MOD>
@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.widget.table.cell.Context context, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb<START_MOD>, java.lang.String id<END_MOD>) { if (volume == null) { return; } int upBricks = 0; int downBricks = 0; for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : volume.getBricks()) { if (brick.isOnline()) { upBricks++; } else { downBricks++; } } com.google.gwt.resources.client.ImageResource upImage = resources.upImage(); com.google.gwt.resources.client.ImageResource downImage = resources.downImage(); com.google.gwt.safehtml.shared.SafeHtml upImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(upImage).getHTML()); com.google.gwt.safehtml.shared.SafeHtml downImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(downImage).getHTML()); sb.append(applicationTemplates.volumeBrickStatusTemplate(upImageHtml, upBricks, downImageHtml, downBricks<START_MOD>, id)); }<END_MOD>
<START_MOD>@java.lang.Override protected boolean vetoRemoveWidget(final org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel, org.ovirt.engine.ui.common.widget.uicommon.instanceimages.InstanceImageLineEditor> item, final org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImageLineModel value, final org.ovirt.engine.ui.common.widget.uicommon.instanceimages.InstanceImageLineEditor widget) { model.approveRemoveDisk(item.getFirst(), new org.ovirt.engine.ui.uicommonweb.models.vms.InstanceImagesModel.RemoveApprovedCallback() { @java.lang.Override public void removeApproved(boolean approved) { if (approved) { doRemoveItem(item, value, widget); } } }); return false; }<END_MOD>
@java.lang.Override protected org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.businessentities.VmStatistics> createEntityRowMapper() { return new org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.businessentities.VmStatistics>() { @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmStatistics mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.VmStatistics entity = new org.ovirt.engine.core.common.businessentities.VmStatistics(); entity.setcpu_sys(rs.getDouble("cpu_sys")); entity.setcpu_user(rs.getDouble("cpu_user")); entity.setelapsed_time(rs.getDouble("elapsed_time")); entity.setusage_cpu_percent(((java.lang.Integer) (rs.getObject("usage_cpu_percent")))); entity.setusage_mem_percent(((java.lang.Integer) (rs.getObject("usage_mem_percent")))); entity.setMigrationProgressPercent(rs.getInt("migration_progress_percent")); entity.setusage_network_percent(((java.lang.Integer) (rs.getObject("usage_network_percent")))); entity.setDisksUsage(((java.lang.String) (rs.getObject("disks_usage")))); entity.<START_MOD>setMemoryUsageHistory(((java.lang.String) (rs.getObject("memory_usage_history")))); entity.setCpuUsageHistory(((java.lang.String) (rs.getObject("cpu_usage_history")))); entity.setNetworkUsageHistory(((java.lang.String) (rs.getObject("network_usage_history")))); entity.<END_MOD>setId(getGuidDefaultEmpty(rs, "vm_guid")); return entity; } }; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmPool mapRow(final java.sql.ResultSet rs, final int rowNum) throws java.sql.SQLException { final org.ovirt.engine.core.common.businessentities.VmPool entity = new org.ovirt.engine.core.common.businessentities.VmPool(); entity.setVmPoolDescription(rs.getString("vm_pool_description")); entity.setVmPoolId(getGuidDefaultEmpty(rs, "vm_pool_id")); entity.setComment(rs.getString("vm_pool_comment")); entity.setName(rs.getString("vm_pool_name")); entity.setVmPoolType(org.ovirt.engine.core.common.businessentities.VmPoolType.forValue(rs.getInt("vm_pool_type"))); entity.setStateful(rs.getBoolean("stateful")); entity.setParameters(rs.getString("parameters")); entity.setPrestartedVms(rs.getInt("prestarted_vms")); entity.setClusterId(getGuidDefaultEmpty(rs, "cluster_id")); entity.setClusterName(rs.getString("cluster_name")); entity.setAssignedVmsCount(rs.getInt("assigned_vm_count")); entity.setRunningVmsCount(rs.getInt("vm_running_count")); entity.setMaxAssignedVmsPerUser(rs.getInt("max_assigned_vms_per_user")); entity.setSpiceProxy(rs.getString("spice_proxy")); entity.setBeingDestroyed(rs.getBoolean("is_being_destroyed")); <START_MOD>entity.setAutoStorageSelect(rs.getBoolean("auto_storage_select")); <END_MOD>return entity; }
@java.lang.Override public void onSuccess(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.queries.VdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase> operation, final org.ovirt.engine.core.common.queries.VdcQueryReturnValue result) { try { if (!(result.getSucceeded())) { org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.WARNING, (( while invoking runQuery [ + (result.getExceptionString())) + "]")); if ((getEventsHandler()) != null) { java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> failedResult = new java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>(); failedResult.add(result); java.lang.String errorMessage = result.getExceptionString(); handleNotLoggedInEvent(errorMessage); } if (callback.isHandleFailure()) { callback.getDel().onSuccess(callback.getModel(), result); } } else { callback.setOriginalReturnValue(result); if ((callback.getConverter()) != null) { callback.getDel().onSuccess(callback.getModel(), callback.getConverter().Convert(result.getReturnValue(), callback)); } else { callback.getDel().onSuccess(callback.getModel(), result); } } } finally { org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent.fire(this, callback.getModel()); <START_MOD>} }<END_MOD>
@org.junit.Test public void testSave() { java.util.List<org.ovirt.engine.core.common.businessentities.network_cluster> clustersFromDB = dbFacade.getNetworkClusterDAO().getAllForCluster(cluster); org.ovirt.engine.core.common.businessentities.network_cluster clusterFromDB = clustersFromDB.get(0); assertNotNull(clusterFromDB); new_net.setCluster(clusterFromDB); new_net.setId(org.ovirt.engine.core.compat.Guid.NewGuid()); dao.save(new_net); org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD> result = dao.getByName(new_net.getname()); assertNotNull(result); assertEquals(new_net, result); }
<START_MOD>private boolean areDisksLocked(org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue) { return vdcReturnValue.getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_DISKS_LOCKED.name()); }<END_MOD>
@org.junit.Test public void canAddVmWithVirtioScsiControllerNotSupportedOs() { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.AddVmCommandTest.createVm(); org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> cmd = createVmFromTemplateCommand(vm); org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = createVdsGroup(); mockStorageDomainDaoGetForStoragePool(); mockVmTemplateDaoReturnVmTemplate(); mockDiskImageDaoGetSnapshotById(); org.ovirt.engine.core.bll.AddVmCommandTest.mockVerifyAddVM(cmd); mockConfig(); mockMaxPciSlots(); mockStorageDomainDaoGetAllStoragesForPool(20); mockUninterestingMethods(cmd); mockDisplayTypes(vm.getOs(), vdsGroup.getCompatibilityVersion()); mockGraphicsDevices(vm.getId()); doReturn(true).when(cmd).checkCpuSockets(); doReturn(vdsGroup).when(cmd).getVdsGroup(); doReturn(createStoragePool()).when(cmd).getStoragePool(); cmd.getParameters().setVirtioScsiEnabled(true); when(osRepository.getArchitectureFromOS(any(java.lang.Integer.class))).thenReturn(ArchitectureType.x86_64); when(osRepository.getDiskInterfaces(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(new java.util.ArrayList(java.util.Arrays.asList("VirtIO"))); mockGetAllSnapshots(cmd); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI); }
<START_MOD>@java.lang.Override public java.lang.String toString() { return java.lang.String.format("%s, amountOfMemory=%s", super.toString(), getAmountOfMemory()); }<END_MOD>
@org.ovirt.engine.ui.frontend.DefaultStringValue( ${action} ${type}. Storage connection parameters are related to <START_MOD>the<END_MOD> <START_MOD>following<END_MOD> storage <START_MOD>domains : ${domainNames}.<END_MOD> java.lang.String ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS();
<START_MOD>public void setNetworkUsageHistory(java.lang.String networkUsageHistory) { this.vmStatistics.setNetworkUsageHistory(networkUsageHistory); }<END_MOD>
@org.ovirt.engine.ui.uicompat.DefaultStringValue(<START_MOD>"")<END_MOD> java.lang.String cloudInitNewNetworkItem();
protected boolean validateDiskInterface(java.lang.Iterable<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images) { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : images) { if (((diskImage.getDiskInterface()) == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI)) && (!(org.ovirt.engine.core.common.FeatureSupported.virtIoScsi(org.ovirt.engine.core.bll.ImportVmCommand.getEffectiveCompatibilityVersion())))) { return <START_MOD>failValidate<END_MOD>(EngineMessage.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL); } } return true; }
<START_MOD>@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.diskHotpluggableInterfacesMap = ((java.util.Map<org.ovirt.engine.core.common.utils.Pair<java.lang.Integer, org.ovirt.engine.core.compat.Version>, java.util.ArrayList<java.lang.String>>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); }<END_MOD>
private void prepareMessageSubject(java.lang.String hostName, org.ovirt.engine.core.common.businessentities.<START_MOD>AuditLogEvent<END_MOD> <START_MOD>event<END_MOD>) { subject = org.ovirt.engine.core.notifier.utils.sender.mail.MessageHelper.prepareMessageSubject(<START_MOD>event<END_MOD>.<START_MOD>getType<END_MOD>(), hostName, <START_MOD>event<END_MOD>.<START_MOD>getMessage<END_MOD>()); }
@java.lang.Override protected void executeCommand() { boolean success = true; if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.getParameters().getVdsId()))) { org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer> result = org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.connectHostToStorage(); boolean isValidConnection = result.getFirst(); if (!isValidConnection) { <START_MOD>throw new <END_MOD>org.ovirt.engine.core.common.errors.<START_MOD>VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.forValue(result.getSecond())); } } if (success) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connection<END_MOD> = <START_MOD>org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.getConnection(); connection.setid(org.ovirt.engine.core.compat.Guid.newGuid().toString()); saveConnection(connection<END_MOD>); org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.getReturnValue().<START_MOD>setActionReturnValue(connection.getid()); } org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.setSucceeded(<END_MOD>success<START_MOD>)<END_MOD>; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( bricks selected for removal in Distributed Stripe volume. <br/> Selected bricks should be from the same sub volume! java.lang.String cannotRemoveBricksDistributedStripeVolume();
@org.ovirt.engine.ui.webadmin.DefaultStringValue( <START_MOD>Machines<END_MOD> java.lang.String runningVms();
protected void <START_MOD>onAdGroupsLoaded<END_MOD>(org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel adElementListModel) { <START_MOD>getSearchInProgress().setEntity(false)<END_MOD>; java.util.<START_MOD>List<END_MOD><org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.aaa.DbUser>> <START_MOD>items<END_MOD> = new java.util.<START_MOD>ArrayList<END_MOD><>(); <START_MOD>items.addAll<END_MOD>(<START_MOD>getgroups<END_MOD>())<START_MOD>;<END_MOD> adElementListModel.<START_MOD>getSelectAll<END_MOD>()<START_MOD>.setEntity(false<END_MOD>)<START_MOD>;<END_MOD> <START_MOD>adElementListModel.setItems(items);<END_MOD> <START_MOD>setIsEmpty(items<END_MOD>.<START_MOD>isEmpty<END_MOD>()); }
<START_MOD>@org.junit.Test public void testNicExists_WhenNicNameIsNotNull() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNicId(null); attachment.setNicName("whatever"); assertThat(new org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator(attachment, new org.ovirt.engine.core.common.businessentities.VDS()).nicExists(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }<END_MOD>
<START_MOD>private java.util.Set<org.ovirt.engine.core.compat.Guid> getImagesToRemove() { java.util.Set<org.ovirt.engine.core.compat.Guid> removedImages = new java.util.HashSet<>(); org.ovirt.engine.core.common.businessentities.DiskImage curr = org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.getDestinationDiskImage(); removedImages.add(curr.getImageId()); while (!(curr.getParentId().equals(org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.getDiskImage().getParentId()))) { curr = org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.getDiskImageDao().getSnapshotById(curr.getParentId()); removedImages.add(curr.getImageId()); } return removedImages; }<END_MOD>
@java.lang.Override public void dataCenterWithClusterSelectedItemChanged() { super.dataCenterWithClusterSelectedItemChanged(); if ((getModel().getSelectedCluster()) != null) { updateCpuProfile(getModel().getSelectedCluster().getId(), <START_MOD>getEffectiveCompatibilityVersion<END_MOD>(), vm.getCpuProfileId()); } }
private<START_MOD> <T extends org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid> & org.ovirt.engine.core.common.businessentities.Nameable><END_MOD> boolean <START_MOD>nameAndIdIsIncoherent<END_MOD>(org.ovirt.engine.core.compat.Guid nicId, java.lang.String nicName<START_MOD>,<END_MOD> org.ovirt.engine.core.common.businessentities.<START_MOD>BusinessEntityMap<T> map) { T<END_MOD> interfaceById = <START_MOD>map<END_MOD>.get(nicId); <START_MOD>T<END_MOD> interfaceByName = <START_MOD>map<END_MOD>.get(nicName); return !(java.util.Objects.equals(interfaceById, interfaceByName)); }
<START_MOD>private void updateProperties() { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = getEntity(); setName(vdsGroup.getname()); setDescription(vdsGroup.getdescription()); setCpuName(vdsGroup.getcpu_name()); setDataCenterName(vdsGroup.getStoragePoolName()); setMemoryOverCommit(vdsGroup.getmax_vds_memory_over_commit()); setClusterPolicy(vdsGroup.getselection_algorithm()); setResiliencePolicy(vdsGroup.getMigrateOnError()); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.<START_MOD>FileListReturnForXmlRpc<END_MOD> getFloppyList(java.lang.String spUUID) { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = irsServer.getFloppyList(spUUID); org.ovirt.engine.core.vdsbroker.irsbroker.<START_MOD>FileListReturnForXmlRpc<END_MOD> wrapper = new org.ovirt.engine.core.vdsbroker.irsbroker.<START_MOD>FileListReturnForXmlRpc<END_MOD>(xmlRpcReturnValue); return wrapper; }
<START_MOD>@org.junit.Test public void testGetByNameFilteredWithPermissions() { org.ovirt.engine.core.common.businessentities.VM result = dao.getByName(existingVm.getName(), org.ovirt.engine.core.dao.PRIVILEGED_USER_ID, true); assertGetResult(result); }<END_MOD>
private void host_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.VDS host = getHost().getSelectedItem(); if ((<START_MOD>getCurrentItem<END_MOD>()) != null) { if ((<START_MOD>getCurrentItem<END_MOD>()) instanceof org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) { org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase sanStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) (<START_MOD>getCurrentItem<END_MOD>())); if ((getStorage()) == null) { sanStorageModel.setItems(null); } } if (host != null) { <START_MOD>getCurrentItem<END_MOD>().getUpdateCommand().execute(); java.lang.String prefix = (host.isOvirtNode()) ? localFSPath : ""; if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(prefix))) { for (java.lang.Object item : getItems()) { if (item instanceof org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel) { org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel) (item)); model.getPath().setEntity(prefix); model.getPath().setIsChangeable(false); } } } } } }
@org.ovirt.engine.ui.webadmin.DefaultStringValue(<START_MOD>"New")<END_MOD> java.lang.String createVolumeVolume();
@java.lang.Override public org.jboss.resteasy.core.ServerResponse preProcess(org.jboss.resteasy.spi.HttpRequest request, org.jboss.resteasy.core.ResourceMethod method) throws javax.ws.rs.WebApplicationException, org.jboss.resteasy.spi.Failure { org.jboss.resteasy.core.ServerResponse response = null; boolean successful = false; javax.ws.rs.core.HttpHeaders headers = request.getHttpHeaders(); boolean preferPersistentAuth = checkPersistentAuthentication(headers); <START_MOD>java.util.List<java.lang.String> requestHeaders = headers.getRequestHeader(HttpHeaders.AUTHORIZATION); <END_MOD>javax.servlet.http.HttpSession httpSession = getCurrentSession(true); if ((((<START_MOD>(<END_MOD>validator) != null) && (httpSession != null)) && (!(httpSession.isNew()))) <START_MOD>&& (!((requestHeaders != null) && (!(requestHeaders.isEmpty()))))) <END_MOD>{ successful = executeSessionValidation(httpSession, preferPersistentAuth); } else { <START_MOD>if ((((validator) != null) && (httpSession != null)) && (!(httpSession.isNew()))) { httpSession.invalidate(); httpSession = getCurrentSession(true); } <END_MOD>successful = executeBasicAuthentication(headers, httpSession, preferPersistentAuth); } if (!successful) { response = challenge(); if (httpSession != null) { httpSession.invalidate(); } } return response; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Management Configuration java.lang.String powerManagementConfigurationTitle();
@org.junit.Test public void testNotRemovingManagementNetwork() throws java.lang.Exception { org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator networkAttachmentValidatorSpy = org.mockito.Mockito.spy(new org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator(new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(), new org.ovirt.engine.core.common.businessentities.VDS())); org.ovirt.engine.core.bll.validator.NetworkValidator networkValidatorSpy = org.mockito.Mockito.spy(new org.ovirt.engine.core.bll.validator.NetworkValidator(new org.ovirt.engine.core.common.businessentities.network.Network())); doReturn(networkValidatorSpy).when(networkAttachmentValidatorSpy).createNetworkValidator(); org.ovirt.engine.core.bll.ValidationResult propagatedResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_CANNOT_REMOVE_MANAGEMENT_NETWORK, "a"); doReturn(propagatedResult).when(networkValidatorSpy).<START_MOD>notRemovingManagementNetwork<END_MOD>(); assertThat( is not correctly propagated networkAttachmentValidatorSpy.notRemovingManagementNetwork(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.NETWORK_CANNOT_REMOVE_MANAGEMENT_NETWORK, "a")); }
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.scheduling.enums.AffinityEnforcementType> getEnforcementType() { return enforcementType; }<END_MOD>
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS object) { return (object.getOutboundPeak()) == null ? constants.UnlimitedNetworkQoS() : object.getOutboundPeak().toString(); }
private boolean ExecuteWithoutTransaction() { boolean functionReturnValue = false; boolean exceptionOccurred = true; try { logRunningCommand(); <START_MOD>getCurrentTaskHandler().beforeTask<END_MOD>(); functionReturnValue = getSucceeded(); exceptionOccurred = false; } catch (org.ovirt.engine.core.dal.dbbroker.generic.RepositoryException e) { log.error(java.lang.String.format( %1$s throw Database exception getClass().getName()), e); ProcessExceptionToClient(new org.ovirt.engine.core.common.errors.VdcFault(e, org.ovirt.engine.core.common.errors.VdcBllErrors.DB)); } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { log.error(java.lang.String.format( %1$s throw Vdc Bll exception. With error message %2$s getClass().getName(), e.getMessage())); if (log.isDebugEnabled()) { log.debug(java.lang.String.format( %1$s throw Vdc Bll exception getClass().getName()), e); } ProcessExceptionToClient(new org.ovirt.engine.core.common.errors.VdcFault(e, e.getVdsError().getCode())); } catch (java.lang.RuntimeException e) { ProcessExceptionToClient(new org.ovirt.engine.core.common.errors.VdcFault(e, org.ovirt.engine.core.common.errors.VdcBllErrors.ENGINE)); log.error(java.lang.String.format( %1$s throw exception getClass().getName()), e); } finally { if (exceptionOccurred || (!(getSucceeded()))) { compensate(); } else { cleanUpCompensationData(); } } return functionReturnValue; }
<START_MOD>private boolean isGlusterOriginally(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel clusterNetworkModel) { return ((clusterNetworkModel.getOriginalNetworkCluster()) != null) && (clusterNetworkModel.getOriginalNetworkCluster().isGluster()); }<END_MOD>
<START_MOD>public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(<END_MOD>java.lang.<START_MOD>Object value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if (!(value instanceof<END_MOD> java.lang.String<START_MOD>)<END_MOD>) { <START_MOD>result.setSuccess(false); result.setReasons(java.util.Arrays.asList(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().StringArgExpected())); <END_MOD>return <START_MOD>result; } java.lang.String cidr = ((java.lang.String) (value)); if (!(org.ovirt.engine.core.common.validation.CidrValidator.isCidrFormatValid(cidr))) { result.setSuccess(false); result.setReasons(java.util.Arrays.asList(<END_MOD>org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().<START_MOD>CidrBadFormat())); return result<END_MOD>; }<START_MOD> if (!(org.ovirt.engine.core.common.validation.CidrValidator.isCidrValidNetworkAddress(cidr))) { result.setSuccess(false); result.setReasons(java.util.Arrays.asList(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().CidrNotNetworkAddress())); return result; } result.setSuccess(true); return result; }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { if (org.ovirt.engine.core.bll.ApproveVdsCommand.getSucceeded()) { return org.ovirt.engine.core.common.AuditLogType.VDS_APPROVE; } <START_MOD>else { return super.getAuditLogTypeValue(); <END_MOD>}<START_MOD> }<END_MOD>
@java.lang.Override public void <START_MOD>setItGuid<END_MOD>(org.ovirt.engine.core.compat.Guid <START_MOD>itGuid<END_MOD>) { getImage().setTemplateImageId(<START_MOD>itGuid<END_MOD>); }
public final java.util.List<java.lang.String> ResolveMessages(java.util.List<java.lang.String> translatedMessages) { java.util.ArrayList<java.lang.String> translatedErrors = new java.util.ArrayList<java.lang.String>(); java.util.HashMap<java.lang.String, java.lang.String> variables = new java.util.HashMap<java.lang.String, java.lang.String>(); for (java.lang.String currentMessage : translatedMessages) { if (<START_MOD>(<END_MOD>currentMessage.startsWith("$")) <START_MOD>&& (!(org.ovirt.engine.core.utils.ErrorTranslatorImpl.startsWithVariableReference(currentMessage)))) <END_MOD>{ AddVariable(currentMessage, variables); } else { translatedErrors.add(currentMessage); } } java.util.ArrayList<java.lang.String> returnValue = new java.util.ArrayList<java.lang.String>(); for (java.lang.String error : translatedErrors) { returnValue.add(resolveMessage(error, variables)); } return returnValue; }
<START_MOD>private org.ovirt.engine.core.common.businessentities.Network getNetworkByName(java.util.List<org.ovirt.engine.core.common.businessentities.Network> networks) { return org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(networks, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.Network>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.Network network) { return network.getname().equals(getNetworkName()); } }); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Network java.lang.String configureNetworkRoleTree();
private void addStyles() { overrideIpTablesEditor.addContentWidgetStyleName(style.overrideIpStyle()); externalHostProviderEnabledEditor.addContentWidgetStyleName(style.checkBox()); providerSearchFilterEditor.addContentWidgetStyleName(style.searchFilter()); providerSearchFilterEditor.setStyleName(style.searchFilterLabel()); providerSearchFilterEditor.setLabelStyleName(style.emptyEditor()); providerSearchFilterLabel.addContentWidgetStyleName(style.emptyEditor()); providerSearchFilterLabel.setStyleName(style.searchFilterLabel()); <START_MOD>fetchSshFingerprint.addContentWidgetStyleName(style.fingerprintEditor()); expanderContent.setStyleName(style.expanderContent()); <END_MOD>}
protected void setUpGetEntityExpectations(int index) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD> user = org.ovirt.engine.api.restapi.resource.BackendGroupsResourceTest.setUpEntityExpectations(control.createMock(org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD>.class), index); setUpGetEntityExpectations((("ADGROUP@" + (DOMAIN)) +   name=* SearchType.AdGroup, user); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.vds_spm_id_map vds_spm_id_map) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("storage_pool_id", vds_spm_id_map.getstorage_pool_id()).addValue("vds_id", vds_spm_id_map.getId()); getCallsHandler().executeModification("Insertvds_spm_id_map", parameterSource); }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if (((org.ovirt.engine.core.bll.AbstractRngDeviceCommand.getParameters().getRngDevice().getVmId()) == null) || ((cachedEntity) == null)) { return <START_MOD>failValidate<END_MOD>((org.ovirt.engine.core.bll.AbstractRngDeviceCommand.getParameters().isVm() ? org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND : org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST)); } if (((org.ovirt.engine.core.bll.AbstractRngDeviceCommand.getParameters().isVm()) && ((org.ovirt.engine.core.bll.AbstractRngDeviceCommand.getVm()) != null)) && (org.ovirt.engine.core.bll.AbstractRngDeviceCommand.getVm().isRunningOrPaused())) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_VM_IS_RUNNING); } return true; }
<START_MOD>public void setRole(java.lang.Boolean value) { if ((privateRole) != value) { privateRole = value; OnPropertyChanged(new org.ovirt.engine.core.compat.PropertyChangedEventArgs("Role")); } }<END_MOD>
<START_MOD>@org.junit.Test public void shouldOnlyTakeStartingDigits() { final org.ovirt.engine.core.bll.scheduling.OS invalidOs = org.ovirt.engine.core.bll.scheduling.OS.fromPackageVersionString("Centos - Server7 - release"); assertThat(invalidOs.isValid()).isFalse(); }<END_MOD>
<START_MOD>@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.ForemanHostProvider provider) { validateParameters(provider, "name"); return performCreate(VdcActionType.AddProvider, new org.ovirt.engine.core.common.action.ProviderParameters(map(provider)), new org.ovirt.engine.api.restapi.resource.foreman.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetProviderById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }<END_MOD>
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.Network network) { return getCustomMapSqlParameterSource().addValue("addr", network.getAddr()).addValue("description", network.getDescription()).addValue(<START_MOD>"comment", network.getComment()).addValue(<END_MOD>"id", network.getId()).addValue("name", network.getName()).addValue("subnet", network.getSubnet()).addValue("gateway", network.getGateway()).addValue("type", network.getType()).addValue("vlan_id", network.getVlanId()).addValue("stp", network.getStp()).addValue("storage_pool_id", network.getDataCenterId()).addValue("mtu", network.getMtu()).addValue("vm_network", network.isVmNetwork()); }
private org.ovirt.engine.core.compat.Guid getVmToAttach(org.ovirt.engine.core.compat.NGuid poolId<START_MOD>) { if ((vmToAttach) == null<END_MOD>) { org.ovirt.engine.core.compat.Guid vmGuid = org.ovirt.engine.core.compat.Guid.Empty; vmGuid = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getPrestartedVmToAttach(poolId); if ((vmGuid == null) || (Guid.Empty.equals(vmGuid))) { vmGuid = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getNonPrestartedVmToAttach(poolId); } <START_MOD>vmToAttach =<END_MOD> vmGuid; }<START_MOD> return vmToAttach; }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Messages<END_MOD>.DefaultMessage( Desktop Load - Enable memory page sharing to {0}% java.lang.String clusterPopupMemoryOptimizationForDesktopLabel(java.lang.String a);
protected boolean isImageNotLocked() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = <START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage(); if ((diskImage.getImageStatus()) == (org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED)) { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED, java.lang.String.format( %2$s "diskAliases", diskImage.getDiskAlias())); } else { return failValidation(EngineMessage.VM_TEMPLATE_IMAGE_IS_LOCKED); } } return true; }
<START_MOD>@java.lang.Override protected void onActionExecuted() { for (org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig originalVfsConfig : originalVfsConfigs) { org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig updatedVfsConfig = updatedNicToVfsConfig.get(originalVfsConfig.getNicId()); initUpdateVfsConfigParams(originalVfsConfig, updatedVfsConfig); if (!(updatedVfsConfig.isAllNetworksAllowed())) { initAddedNetworksParams(originalVfsConfig, updatedVfsConfig); initRemovedNetworksParams(originalVfsConfig, updatedVfsConfig); initAddedLabelsParams(originalVfsConfig, updatedVfsConfig); initRemovedLabelsParams(originalVfsConfig, updatedVfsConfig); } } org.ovirt.engine.ui.uicommonweb.UiAction updateAction = new org.ovirt.engine.ui.uicommonweb.UiVdcMultipleAction(org.ovirt.engine.core.common.action.VdcActionType.UpdateHostNicVfsConfig, updatedVfsConfigsParams, getModel()); updateAction.then(new org.ovirt.engine.ui.uicommonweb.UiVdcMultipleAction(org.ovirt.engine.core.common.action.VdcActionType.AddVfsConfigNetwork, addedNetworksParams, getModel())).and(new org.ovirt.engine.ui.uicommonweb.UiVdcMultipleAction(org.ovirt.engine.core.common.action.VdcActionType.RemoveVfsConfigNetwork, removedNetworksParams, getModel())).and(new org.ovirt.engine.ui.uicommonweb.UiVdcMultipleAction(org.ovirt.engine.core.common.action.VdcActionType.AddVfsConfigLabel, addedLabelsParams, getModel())).and(new org.ovirt.engine.ui.uicommonweb.UiVdcMultipleAction(org.ovirt.engine.core.common.action.VdcActionType.RemoveVfsConfigLabel, removedLabelsParams, getModel())); updateAction.runAction(getActionFlowMutex()); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.businessentities.GraphicsDevice getGraphicsDevOfType(org.ovirt.engine.core.common.businessentities.GraphicsType type) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue query = org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getBackend().runInternalQuery(VdcQueryType.GetGraphicsDevices, new org.ovirt.engine.core.common.queries.IdQueryParameters(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().getVmTemplateId())); java.util.List<org.ovirt.engine.core.common.businessentities.GraphicsDevice> graphicsDevices = query.getReturnValue(); for (org.ovirt.engine.core.common.businessentities.GraphicsDevice dev : graphicsDevices) { if ((dev.getVmDeviceType()) == (type.getCorrespondingDeviceType())) { return dev; } } return null; }<END_MOD>
@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, T vm) { vm.setMemSizeMb(model.getMemSize().getEntity()); vm.setMaxMemorySizeMb(model.getMaxMemorySize().getEntity()); if (model.getIoThreadsEnabled().getEntity()) { vm.setNumOfIoThreads(org.ovirt.engine.ui.uicommonweb.builders.vm.HwOnlyCoreUnitToVmBaseBuilder.DEFAULT_NUM_OF_IOTHREADS); } else { vm.setNumOfIoThreads(0); } vm.setNumOfSockets(model.getNumOfSockets().getSelectedItem()); vm.setCpuPerSocket(model.getCoresPerSocket().getSelectedItem()); vm.setThreadsPerCpu(model.getThreadsPerCore().getSelectedItem()); vm.setDefaultDisplayType(model.getDisplayType().getSelectedItem()); vm.setNumOfMonitors(model.getNumOfMonitors().getSelectedItem()); vm.setSmartcardEnabled(model.getIsSmartcardEnabled().getEntity()); vm.setSsoMethod(model.extractSelectedSsoMethod()); vm.setMinAllocatedMem(model.getMinAllocatedMemory().getEntity()); vm.setDefaultBootSequence(model.getBootSequence()); vm.setSingleQxlPci(model.getIsSingleQxlEnabled().getEntity()); vm.setCustomEmulatedMachine(model.getEmulatedMachine().getSelectedItem()); vm.<START_MOD>setBiosType(BiosType.SEA_BIOS); vm.<END_MOD>setCustomCpuName(model.getCustomCpu().getSelectedItem()); }
@org.junit.Test public void <START_MOD>validateDiskIsLocked<END_MOD>() throws java.lang.Exception { initializeCommand(ImageOperation.Move, new org.ovirt.engine.core.common.businessentities.storage.DiskImage()); initVmDiskImage(false); mockGetVmsListForDisk(); command.getImage().setImageStatus(ImageStatus.LOCKED); doReturn(vmDeviceDao).when(command).getVmDeviceDao(); assertFalse(command.<START_MOD>validate<END_MOD>()); assertTrue(command.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().contains(EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED.toString())); }
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult updatesAvailable() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.NO_AVAILABLE_UPDATES_FOR_HOST).unless(getHost().isUpdateAvailable()); }<END_MOD>
@org.junit.Test public void <START_MOD>internalActiveAllowed<END_MOD>() { <START_MOD>internalActionAllowed<END_MOD>(StorageDomainStatus.Active); }
<START_MOD>private static java.lang.String toStringNullToDefault(java.lang.Object obj, java.lang.String defaultValue) { return obj == null ? defaultValue : obj.toString(); }<END_MOD>
<START_MOD>private void connect(boolean isPasswordDelegationPossible) { if (isPasswordDelegationPossible) { try { model.getAutoConnectableConsoles().get(0).connect(); alreadyOpened = true; } catch (org.ovirt.engine.ui.uicommonweb.models.VmConsoles e) { errorPopupManager.show(e.getLocalizedErrorMessage()); } } }<END_MOD>
public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel SystemTreeSelectedItem) { super.initialize(); setHash(((getHashName()) + (new java.util.Date()))); getMemSize().setEntity(256); getMinAllocatedMemory().setEntity(256); getIsStateless().setEntity(false); getIsRunAndPause().setEntity(false); getIsSmartcardEnabled().setEntity(false); isConsoleDeviceEnabled.setEntity(false); getIsHighlyAvailable().setEntity(false); getIsAutoAssign().setEntity(true); getIsTemplatePublic().setEntity(true); getBehavior().enableSinglePCI(false); isRngEnabled.setEntity(false); rngSourceRandom.setEntity(true); getHostCpu().setEntity(false); getMigrationMode().setIsChangable(true); getCdImage().setIsChangable(false); initGraphicsAndDisplayListeners(); initFirstBootDevice(); initNumOfMonitors(); initAllowConsoleReconnect(); initMigrationMode(); initVncKeyboardLayout(); behavior.initialize(SystemTreeSelectedItem); <START_MOD>getWatchdogModelWithPlaceHolderEditor().setSelectedItem(null); <END_MOD>}
@org.junit.Test public void onlyInboundPeakPresent() { qos.setInboundPeak(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.<START_MOD>BANDWIDTH<END_MOD>); valuesPresentTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_MISSING_VALUES)); }
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("stats:") java.lang.String numaStatsLabel();<END_MOD>
<START_MOD>protected boolean networksUniquelyConfiguredOnHost(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure) { boolean passed = true; java.util.Set<org.ovirt.engine.core.compat.Guid> networkIds = new java.util.HashSet(attachmentsToConfigure.size()); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : attachmentsToConfigure) { if (networkIds.contains(attachment.getNetworkId())) { org.ovirt.engine.core.common.businessentities.network.Network network = clusterNetworks.get(attachment.getNetworkId()); addViolation(VdcBllMessages.NETWORKS_ALREADY_ATTACHED_TO_IFACES, network.getName()); passed = false; } else { networkIds.add(attachment.getNetworkId()); } } return passed; }<END_MOD>
<START_MOD>@java.lang.Override protected boolean canDoAction() { if ((getParameters().getVdsId()) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_UPDATE_MOM_POLICY_UPDATE_NULL_HOST); } vds = getVdsDao().get(getParameters().getVdsId()); if ((vds) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_UPDATE_MOM_POLICY_UPDATE_NULL_HOST); } if ((vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_UPDATE_MOM_POLICY_UPDATE_HOST_DOWN); } return true; }<END_MOD>
@java.lang.Override protected void verify(org.ovirt.engine.api.model.DiskSnapshot model, org.ovirt.engine.api.model.DiskSnapshot transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.<START_MOD>getReadOnly(), transform.getReadOnly<END_MOD>()); assertEquals(model.getDescription(), transform.getDescription()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals( status model.getStatus(), transform.getStatus()); assertEquals( sparse model.isSparse(), transform.isSparse()); assertEquals( propagate errors model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals( wipe after delete model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals( shareable model.isShareable(), transform.isShareable()); }
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterHookEnable(java.lang.String glusterCommand, java.lang.String level, java.lang.String hookName);<END_MOD>
<START_MOD>@java.lang.Override protected org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.job.Job> createEntityRowMapper() { return org.ovirt.engine.core.dao.JobDaoDbFacadeImpl.jobRowMapper; }<END_MOD>
<START_MOD>public org.ovirt.engine.core.bll.ValidationResult isIsoDiskAttachedToAnyNonDownVm() { java.util.List<java.lang.String> vmNames = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStaticDao().getAllRunningNamesWithSpecificIsoAttached(disk.getId()); if (!(vmNames.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ERROR_ISO_DISK_ATTACHED_TO_RUNNING_VMS, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.storage.DiskValidator.DISK_NAME_VARIABLE, disk.getDiskAlias()), org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString(org.ovirt.engine.core.bll.validator.storage.DiskValidator.VM_LIST, vmNames)); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }<END_MOD>
private void createVMFromTemplate() { org.ovirt.engine.core.common.businessentities.VmTemplate template = getSelectedItem();<START_MOD> final<END_MOD> java.util.List<org.ovirt.engine.ui.uicommonweb.UICommand> commands = new java.util.ArrayList<>(); commands.add(org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSaveVm", this)); commands.add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); <START_MOD>org.ovirt.engine.ui.frontend.AsyncQuery getVmInitQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getVmInitQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.core.common.businessentities.VmTemplate withVmInit = ((org.ovirt.engine.core.common.businessentities.VmTemplate) (result)); <END_MOD>setupNewVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewVmFromTemplateModelBehavior(<START_MOD>withVmInit), org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel.this), withVmInit.getVmType(), getSystemTreeSelectedItem(), commands); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getTemplateById(getVmInitQuery, <END_MOD>template<START_MOD>.getId()<END_MOD>); }
private boolean changesAreClusterCompatible() { if (!(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getParameters().getNetwork().isVmNetwork())) { if (!(org.ovirt.engine.core.common.FeatureSupported.nonVmNetwork(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getVdsGroup().getCompatibilityVersion()))) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.NON_VM_NETWORK_NOT_SUPPORTED_FOR_POOL_LEVEL); return false; } } return true; }
<START_MOD>private java.lang.Boolean getAutoConverge() { if (org.ovirt.engine.core.common.FeatureSupported.autoConvergence(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getVdsGroupCompatibilityVersion())) { return org.ovirt.engine.core.bll.MigrateVmCommand.getVm().isAutoConverge(); } return null; }<END_MOD>
<START_MOD>@org.junit.Test public void canDoActionFailsOnNullCluster() { cmd = spy(new org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters(null, org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommandTest.HOOK_NAME, org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommandTest.GLUSTER_COMMAND, org.ovirt.engine.core.bll.gluster.DisableGlusterHookCommandTest.LEVEL))); prepareMocks(cmd, getGlusterServers()); assertFalse(cmd.canDoAction()); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String getGlusterHookcontent(org.ovirt.engine.core.compat.Guid hookId) { java.lang.String content = getCallsHandler().executeRead("GetGlusterHookById", org.ovirt.engine.core.dao.gluster.GlusterHooksDaoDbFacadeImpl.GlusterHookContentRowMapper, createGlusterHookIdParams(hookId)); return content; }<END_MOD>
@java.lang.Override protected org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic> createEntityRowMapper() { return org.ovirt.engine.core.dao.<START_MOD>DiskImageDynamicDAOImpl<END_MOD>.DiskImageDynamicRowMapper.instance; }
<START_MOD>@java.lang.Override public void run() { resourceManager.GetVdsManager(vdsException.getVdsError().getVdsId()).handleNetworkException(vdsException); }<END_MOD>
<START_MOD>private void setRngDeviceToParams(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, org.ovirt.engine.core.common.action.VmManagementParametersBase parameters) { parameters.setUpdateRngDevice(true); parameters.setRngDevice(((org.ovirt.engine.core.common.businessentities.VmRngDevice) (model.getRngDevice().getEntity()))); }<END_MOD>
<START_MOD>@org.junit.Test public void testAddPassTemplateByName() throws java.lang.Exception { setUpEntityQueryExpectations(VdcQueryType.GetVmTemplate, org.ovirt.engine.core.common.queries.GetVmTemplateParameters.class, new java.lang.String[]{ "Name", "StoragePoolId" }, new java.lang.Object[]{ NAMES[1], GUIDS[3] }, getTemplateEntity(1)); setupAddExpectations(); org.ovirt.engine.api.model.VM model = org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest.getModel(2); model.setTemplate(new org.ovirt.engine.api.model.Template()); model.getTemplate().setName(NAMES[1].toString()); javax.ws.rs.core.Response response = collection.add(model); assertEquals(201, response.getStatus()); assertTrue(((response.getEntity()) instanceof org.ovirt.engine.api.model.VM)); verifyModel(((org.ovirt.engine.api.model.VM) (response.getEntity())), 2); }<END_MOD>
private java.lang.String createVG() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.bll.<START_MOD>storage.AddSANStorageDomainCommand.getVdsBroker<END_MOD>().RunVdsCommand(VDSCommandType.CreateVG, new org.ovirt.engine.core.common.vdscommands.CreateVGVDSCommandParameters(org.ovirt.engine.core.bll.storage.AddSANStorageDomainCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.AddSANStorageDomainCommand.getStorageDomain().getId(), org.ovirt.engine.core.bll.storage.AddSANStorageDomainCommand.getParameters().getLunIds(), org.ovirt.engine.core.bll.storage.AddSANStorageDomainCommand.getParameters().isForce())); java.lang.String volumeGroupId = ((java.lang.String) (((returnValue.getReturnValue()) instanceof java.lang.String) ? returnValue.getReturnValue() : null)); return volumeGroupId; }
@java.lang.Override public void remove(java.lang.String id) { try { getClient().networks().delete(id).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e<START_MOD>, true<END_MOD>); } }
<START_MOD>public void addColumn(com.google.gwt.user.cellview.client.Column column, com.google.gwt.safehtml.shared.SafeHtml headerHtml, java.lang.String width) { super.addColumnWithHtmlHeader(column, headerHtml.asString()); super.setColumnWidth(column, width); }<END_MOD>
public static org.ovirt.engine.core.bll<START_MOD>.storage.disk<END_MOD>.MetadataDiskDescriptionHandler getInstance() { return org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandler.instance; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc desktopLogin(java.lang.String vmId, java.lang.String domain, java.lang.String user, java.lang.String password) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.desktopLogin").withParameter("vmID", vmId).withParameter("domain", domain).withParameter("username", user).withParameter("password", password).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot add network interface ${nic} to bond ${bond}. Network interface has an unmanaged network attached.") java.lang.String ACTION_TYPE_FAILED_HOST_NETWORK_ADD_UNMANAGED_TO_BOND();<END_MOD>
@org.junit.Test public void testValidateAllClustersLevel() { storagePoolWithVersionHigherThanCluster(); java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> clusterList = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.createClusterList(); org.ovirt.engine.core.common.businessentities.VDSGroup secondCluster = new org.ovirt.engine.core.common.businessentities.VDSGroup(); secondCluster.setCompatibilityVersion(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.VERSION_1_2); secondCluster.setName("secondCluster"); clusterList.add(secondCluster); org.ovirt.engine.core.common.businessentities.VDSGroup thirdCluster = new org.ovirt.engine.core.common.businessentities.VDSGroup(); thirdCluster.setCompatibilityVersion(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.VERSION_1_1); thirdCluster.setName("thirdCluster"); clusterList.add(thirdCluster); when(vdsGroupDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(clusterList); assertFalse(cmd.checkAllClustersLevel()); java.util.List<java.lang.String> messages = cmd.getReturnValue().<START_MOD>getValidateMessages<END_MOD>(); assertTrue(messages.contains(EngineMessage.ERROR_CANNOT_UPDATE_STORAGE_POOL_COMPATIBILITY_VERSION_BIGGER_THAN_CLUSTERS.toString())); assertTrue(messages.get(0).contains("firstCluster")); assertFalse(messages.get(0).contains("secondCluster")); assertTrue(messages.get(0).contains("thirdCluster")); }
<START_MOD>public void searchMyGroups() { stopRefresh(); if (getIsQueryFirstTime()) { setSelectedItem(null); setSelectedItems(null); } if ((getIsTimerDisabled()) == false) { setIsQueryFirstTime(true); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs(org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs.PROGRESS)); searchMyGroupsImpl(); setIsQueryFirstTime(false); startGridTimer(); } else { searchMyGroupsImpl(); } }<END_MOD>
private static void mapBlockStats(org.ovirt.engine.api.model.ProfileDetail profileDetail, org.ovirt.engine.core.common.businessentities.gluster.StatsInfo statsInfo) { for (org.ovirt.engine.core.common.businessentities.gluster.BlockStats blockStat : statsInfo.getBlockStats()) { org.ovirt.engine.api.model.BlockStatistic bStat = new org.ovirt.engine.api.model.BlockStatistic(); bStat.<START_MOD>getStatistics().getStatistics<END_MOD>().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.clone(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.BLOCK_SIZE), blockStat.getSize())); bStat.<START_MOD>getStatistics().getStatistics<END_MOD>().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.clone(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.BYTES_BLOCK_READ), blockStat.getBlockRead())); bStat.<START_MOD>getStatistics().getStatistics<END_MOD>().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.clone(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.BYTES_BLOCK_WRITE), blockStat.getBlockWrite())); profileDetail.<START_MOD>getBlockStatistics().getBlockStatistics<END_MOD>().add(bStat); } }
@java.lang.Override protected void readOsSection(XmlNode section) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(section.Attributes.get("ovf:id").getValue())); XmlNode node = section.SelectSingleNode("Description"); if (node != null) { if (node.InnerText.equals(java.lang.String.valueOf(OsRepository.OLD_OTHER_ID))) { node.InnerText = java.lang.String.valueOf(OsRepository.DEFAULT_OS); } <START_MOD>int osId = <END_MOD>osRepository.getOsIdByUniqueName(node.InnerText)<START_MOD>; _vmTemplate.setOsId(osId); _vmTemplate.setArchitecture(osRepository.getArchitectureFromOS(osId)<END_MOD>); }<START_MOD> else {<END_MOD> _vmTemplate.setArchitecture(ArchitectureType.<START_MOD>undefined<END_MOD>); }<START_MOD> }<END_MOD>
public java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>StorageDomain<END_MOD>> getStorageDomains() { return storageDomains; }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (((getParameters().getBricks()) == null) || ((getParameters().getBricks().size()) == 0)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED); return false; } if (getGlusterVolume().getVolumeType().isReplicatedType()) { if ((getParameters().getReplicaCount()) > ((getGlusterVolume().getReplicaCount()) + 1)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT_MORE_THAN_ONE); } else if ((getParameters().getReplicaCount()) < (getGlusterVolume().getReplicaCount())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT); } } if (getGlusterVolume().getVolumeType().isStripedType()) { if ((getParameters().getStripeCount()) > ((getGlusterVolume().getStripeCount()) + 1)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_STRIPE_COUNT_MORE_THAN_ONE); } else if ((getParameters().getStripeCount()) < (getGlusterVolume().getStripeCount())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_STRIPE_COUNT); } } if (getGlusterVolume().getVolumeType().isDispersedType()) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_ADD_BRICK_TO_DISPERSE_VOLUME_NOT_SUPPORTED); return false; } <START_MOD>boolean ret = (updateBrickServerAndInterfaceNames(getParameters().getBricks(), true)) && (validateDuplicateBricks(getParameters().getBricks())); if ((getCluster().supportsGlusterService()) && (getCluster().supportsVirtService())) { ret = ret && (validateNotSameServer(getParameters().getBricks(), getParameters().getReplicaCount())); } <END_MOD>return <START_MOD>ret; }<END_MOD>
@org.junit.Test public void canDoChangeForbiddenField() { sd.setStorageType(StorageType.UNKNOWN); org.ovirt.engine.core.bll.<START_MOD>ValidateTestUtils<END_MOD>.<START_MOD>runAndAssertValidateFailure<END_MOD>(cmd, EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); }
<START_MOD>public void setUploadCommand(org.ovirt.engine.ui.uicommonweb.UICommand uploadCommand) { this.uploadCommand = uploadCommand; }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__UPDATE); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__VM_TEMPLATE); }
<START_MOD>private static void initGuestContainerList(java.util.Map<java.lang.String, java.lang.Object> vmStruct, org.ovirt.engine.core.common.businessentities.VmDynamic vm) { if (vmStruct.containsKey(VdsProperties.guest_containers)) { vm.setGuestContainerList(new java.util.ArrayList()); java.lang.Object obj = vmStruct.get(VdsProperties.guest_containers); if (obj instanceof java.lang.Object[]) { java.lang.Object[] containerList = ((java.lang.Object[]) (obj)); for (java.lang.Object containerObj : containerList) { java.util.Map<java.lang.String, java.lang.Object> container = ((java.util.Map<java.lang.String, java.lang.Object>) (containerObj)); vm.getGuestContainerList().add(new org.ovirt.engine.core.common.businessentities.GuestContainer(((java.lang.String) (container.get(VdsProperties.guest_container_id))), ((java.util.List<java.lang.Object>) (container.get(VdsProperties.guest_container_names))).stream().map(( nameObj) -> ((java.lang.String) (nameObj))).collect(java.util.stream.Collectors.toList()), ((java.lang.String) (container.get(VdsProperties.guest_container_image))), ((java.lang.String) (container.get(VdsProperties.guest_container_command))), ((java.lang.String) (container.get(VdsProperties.guest_container_status))))); } } } }<END_MOD>
<START_MOD>protected boolean isMigrationInterfaceUp(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { if ((nic.getVlanId()) != null) { java.lang.String physicalNic = org.ovirt.engine.core.utils.NetworkUtils.stripVlan(nic.getName()); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : nics) { if (iface.equals(physicalNic)) { return (iface.getStatistics().getStatus()) == (org.ovirt.engine.core.common.businessentities.network.InterfaceStatus.UP); } } } return (nic.getStatistics().getStatus()) == (org.ovirt.engine.core.common.businessentities.network.InterfaceStatus.UP); }<END_MOD>
protected boolean setAndValidateCpuProfile() { if ((org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getTemplateType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE)) { return true; } return validate(org.ovirt.engine.core.bll.profiles.CpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getMasterVm(), org.ovirt.engine.core.bll.AddVmTemplateCommand.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> getAllForStorageDomain(org.ovirt.engine.core.compat.Guid storageDomain, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getCallsHandler().executeReadList("GetVmTemplatesByStorageDomainId", org.ovirt.engine.core.dao.<START_MOD>VmTemplateDAOImpl<END_MOD>.VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("storage_domain_id", storageDomain).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.compat.Guid userId = org.ovirt.engine.core.bll.UserProfilesOperationCommandBase.getParameters().getUserProfile().getUserId(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(userId)) { userId = org.ovirt.engine.core.bll.UserProfilesOperationCommandBase.getUserId(); org.ovirt.engine.core.bll.UserProfilesOperationCommandBase.getParameters().getUserProfile().setUserId(userId); } else if (!(userId.equals(org.ovirt.engine.core.bll.UserProfilesOperationCommandBase.getUserId()))) { return failCanDoAction(EngineMessage.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION); } java.lang.String sshPublicKey = org.ovirt.engine.core.bll.UserProfilesOperationCommandBase.getParameters().getUserProfile().getSshPublicKey(); if ((sshPublicKey == null) || (sshPublicKey.isEmpty())) { return true; } if (!(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.<START_MOD>isPublicKeysValid<END_MOD>(sshPublicKey))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_INVALID_PUBLIC_SSH_KEY); } return true; }
<START_MOD>@org.junit.Test public void hasLocalDomain() { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdc = new org.ovirt.engine.core.common.businessentities.StorageDomainStatic(); sdc.setStorageType(StorageType.LOCALFS); storagePoolWithLocalFS(); when(spDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.createNewStoragePool()); when(sdDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.singletonList(sdc)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(cmd, EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_POOL_TYPE_WITH_LOCAL); }<END_MOD>
@java.lang.Override public java.lang.String getValue(java.lang.Object object) { return ((org.ovirt.engine.core.common.businessentities.VmTemplate) (object)).<START_MOD>getName<END_MOD>(); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAllForNetwork(org.ovirt.engine.core.compat.Guid networkId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("network_id", networkId); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getCallsHandler().executeReadList("GetVdsByNetworkId", org.ovirt.engine.core.dao.<START_MOD>VdsDAOImpl<END_MOD>.VdsRowMapper.instance, parameterSource); return uniteAgents(vdsList); }
private void toggleVisibleWidgets(int currentWidth) { int widgetWidth = 0; boolean foundEdge = false; if ((contentPanel.getWidgetCount()) > 1) { for (int i = 0; i < ((contentPanel.getWidgetCount()) - 1); i++) { com.google.gwt.user.client.ui.Widget widget = contentPanel.getWidget(i); <START_MOD>if (!(widget.isVisible())) { continue; } if (foundEdge || ((widgetWidth + (widget.getOffsetWidth())) > currentWidth)) { <END_MOD>widget.setVisible(<START_MOD>false); toolbarOnlyActionButtonList.get(i).setCascaded(<END_MOD>true); foundEdge <START_MOD>= true; } else { toolbarOnlyActionButtonList.get(i).setCascaded(false); <END_MOD>widgetWidth <START_MOD>+= <END_MOD>widget.getOffsetWidth()<START_MOD>; } } } }<END_MOD>
public static void GetoVirtISOsList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid id) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? new java.util.ArrayList<org.ovirt.engine.core.compat.RpmVersion>(((java.util.ArrayList<org.ovirt.engine.core.compat.RpmVersion>) (source))) : new java.util.ArrayList<org.ovirt.engine.core.compat.RpmVersion>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetoVirtISOs, new org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.VdsIdParametersBase(id), aQuery); }
private void extractRemovedNetworks() { for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : getExistingIfaces().values()) { java.lang.String net = iface.getNetworkName(); if ((org.apache.commons.lang.StringUtils.isNotBlank(net)) && (!(attachedNetworksNames.contains(net)))) { removedNetworks.add(net); } } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(params.getVdsId(), removedNetworks); for (java.lang.String vmName : vmNames) { addViolation(<START_MOD>EngineMessages<END_MOD>.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, vmName); } }
private void endCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> listVms = getVmsForDiskId(); for (org.ovirt.engine.core.common.businessentities.VM vm : listVms) { org.ovirt.engine.core.bll.RemoveDiskCommand.getVmStaticDAO().incrementDbGeneration(vm.getId()); } <START_MOD>disk = getDiskDao().get(((org.ovirt.engine.core.compat.Guid) (org.ovirt.engine.core.bll.RemoveDiskCommand.getParameters().getEntityId()))); <END_MOD>org.ovirt.engine.core.bll.Backend.getInstance().EndAction(VdcActionType.RemoveImage, org.ovirt.engine.core.bll.RemoveDiskCommand.getParameters().getImagesParameters().get(0)); org.ovirt.engine.core.bll.RemoveDiskCommand.setSucceeded(true); }
private void createHostedEngineVm(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic(); vmStatic.setId(id); vmStatic.setClusterId(FixturesTool.CLUSTER_RHEL6_ISCSI); vmStatic.setName("HostedEngine"); vmStatic.setOrigin(OriginType.HOSTED_ENGINE); getDbFacade().getVmStaticDao().save(vmStatic); org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(); vmDynamic.setId(id); getDbFacade().getVmDynamicDao().save(vmDynamic); org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = new org.ovirt.engine.core.common.businessentities.VmStatistics(); vmStatistics.setId(id); }
@java.lang.Override protected void buildSysprepVmPayload(java.lang.String sysPrepContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setDeviceType(VmDeviceType.FLOPPY); vmPayload.getFiles().put(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.SYSPREP_FILE_NAME, org.apache.commons.<START_MOD>lang.StringUtils.remove(org.apache.commons.<END_MOD>codec.binary.Base64.encodeBase64String(sysPrepContent.getBytes()<START_MOD>), '\r'<END_MOD>)); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vm.getId()), org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null, null); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<java.lang.String, java.lang.Object>(); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addFloppyDetails(vmDevice, struct); addDevice(struct, vmDevice, vm.getFloppyPath()); }
<START_MOD>private void recoverKdumpingHosts(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts) { final java.util.List<org.ovirt.engine.core.common.businessentities.VDS> kdumpingHosts = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Kdumping)) { kdumpingHosts.add(host); } } if (!(kdumpingHosts.isEmpty())) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(new java.lang.Runnable() { @java.lang.Override public void run() { int mSecToWait = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.DisableFenceAtStartupInSec)) * 1000; org.ovirt.engine.core.utils.ThreadUtils.sleep(mSecToWait); executeNotRespondingTreatment(kdumpingHosts); } }); } }<END_MOD>
private boolean updateIsoListFromVDSM(org.ovirt.engine.core.compat.Guid repoStoragePoolId, org.ovirt.engine.core.compat.Guid repoStorageDomainId, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> fileStats) { org.ovirt.engine.core.bll.<START_MOD>storage.domains.<END_MOD>IsoDomainListSyncronizer.FileListRefreshed fileListRefreshed = new org.ovirt.engine.core.bll<START_MOD>.storage.domains<END_MOD>.IsoDomainListSyncronizer.FileListRefreshed() { @java.lang.Override public void onFileListRefreshed(org.ovirt.engine.core.compat.Guid poolId, java.util.Set<java.lang.String> isoList) { org.ovirt.engine.core.bll.VmHandler.refreshVmsToolsVersion(poolId, isoList); } }; return refreshVdsmFileList(repoStoragePoolId, repoStorageDomainId, ImageFileType.ISO, fileStats, fileListRefreshed); }
protected static void updateLocalDisksUsage(org.ovirt.engine.core.common.businessentities.VDS vds, <START_MOD>java.util.Map xmlRpcStruct) { if (xmlRpcStruct.containsKey(VdsProperties.DISK_STATS)) { java.util.Map<java.lang.String, java.lang.Object> diskStatsStruct = ((java.util.Map<java.lang.String, java.lang.Object>) (xmlRpcStruct.get(VdsProperties.DISK_STATS))); java.util.Map<java.lang.String, java.lang.Long> diskStats = new java.util.HashMap<java.lang.String, java.lang.Long>(); vds.setLocalDisksUsage(diskStats); for (java.lang.String path : diskStatsStruct.keySet()) { java.util.Map<java.lang.String, java.lang.Object> pathStatsStruct = ((java.util.Map<java.lang.String, java.lang.Object>) (diskStatsStruct.get(path))); diskStats.put(path, <END_MOD>org.ovirt.engine.core.vdsbroker.<START_MOD>vdsbroker.VdsBrokerObjectsBuilder.AssignLongValue(pathStatsStruct, <END_MOD>VdsProperties.DISK_STATS_FREE)); } } }
<START_MOD>private void initUnregisteredVM() { org.ovirt.engine.core.common.businessentities.VmTemplate vmFromConfiguration; ovfEntityData = org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getUnregisteredOVFDataDao().getByVmId(org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().getContainerId()); if ((ovfEntityData) != null) { try { org.ovirt.engine.core.bll.OvfHelper ovfHelper = new org.ovirt.engine.core.bll.OvfHelper(); vmFromConfiguration = ovfHelper.readVmTemplateFromOvf(ovfEntityData.getOvfData()); vmFromConfiguration.setVdsGroupId(org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().getVdsGroupId()); org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().setVmTemplate(vmFromConfiguration); org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().setDestDomainId(ovfEntityData.getStorageDomainId()); org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().setSourceDomainId(ovfEntityData.getStorageDomainId()); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.log.errorFormat(("failed to parse a given ovf configuration: \n" + (ovfEntityData.getOvfData())), e); } } }<END_MOD>
<START_MOD>java.lang.String id();<END_MOD>
@java.lang.Override public void rollback() { super.rollback(); <START_MOD>poolPerCluster<END_MOD>.modifyPool(oldMacPool); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>AddStorageDomainCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_ADD_STORAGE_DOMAIN : org.ovirt.engine.core.common.AuditLogType.USER_ADD_STORAGE_DOMAIN_FAILED; }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.storage.ImportCloneModel object) { if ((object.getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VM) { dialogLabelEditor.setText(messages.sameVmNameExists(((org.ovirt.engine.core.common.businessentities.VM) (object.getEntity())).<START_MOD>getName<END_MOD>())); cloneEditor.asRadioButton().setHTML(templates.twoLinesRadioButtonLabel(constants.cloneImportVm(), constants.cloneImportVmDetails()).asString()); suffixEditor.setLabel(constants.cloneImportSuffixVm()); } else { dialogLabelEditor.setText(((((constants.sameTemplateNameExists()) +   ( + (((org.ovirt.engine.core.common.businessentities.VmTemplate) (object.getEntity())).getname())) + ")")); cloneEditor.setLabel(constants.cloneImportTemplate()); suffixEditor.setLabel(constants.cloneImportSuffixTemplate()); } org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportCloneDialogPopupView.Driver.driver.edit(object); }
protected void executeImport(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmFromExportDomainModel importVmModel) { importVmModel.importVms(new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.<START_MOD>this<END_MOD>.setWindow(null); } }, cloneObjectMap); }
private void buildVmUsbControllers() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.USB.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<START_MOD><java.lang.String, java.lang.Object><END_MOD> struct = new java.util.HashMap<<START_MOD>>(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); vmInfoBuildHelper.setVdsPropertiesFromSpecParams(vmDevice.getSpecParams(), struct); struct.put(VdsProperties.SpecParams, new java.util.HashMap<<END_MOD>java.lang.String, java.lang.Object>()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); <START_MOD>vmInfoBuildHelper<END_MOD>.addAddress(vmDevice, struct); java.lang.String model = ((java.lang.String) (struct.get(VdsProperties.Model))); if ((model != null) && (vmInfoBuildHelper.isFirstMasterController(model))) { devices.add(0, struct); } else { devices.add(struct); } } }
private boolean validateAttachment() { org.ovirt.engine.core.compat.Version clusterVersion = org.ovirt.engine.core.bll.network.cluster.UpdateNetworkOnClusterCommand.getVdsGroupDAO().get(getNetworkCluster().getClusterId()).getcompatibility_version(); org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator validator = new org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator(getNetworkCluster(), clusterVersion); return (((<START_MOD>validate<END_MOD>(<START_MOD>validator<END_MOD>.<START_MOD>managementNetworkAttachment<END_MOD>(getNetwork()))) <START_MOD>&&<END_MOD> (validate(validator.<START_MOD>managementNetworkChange<END_MOD>(<START_MOD>getOldNetworkCluster<END_MOD>())))) && (validate(validator.migrationPropertySupported()))) && ((!(getNetwork().isExternal())) || (validateExternalNetwork(validator))); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.<START_MOD>frontend<END_MOD>.<START_MOD>FrontendFailureEventArgs<END_MOD> args) { errorPopupManager.show(messages.uiCommonRunActionFailed(org.ovirt.engine.ui.common.uicommon.ErrorMessageFormatter.formatMessages(<START_MOD>args<END_MOD>.getMessages()))); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { <START_MOD>if (!(foundCPU)) { <END_MOD>return <START_MOD>org.ovirt.engine.core.common.AuditLogType.CPU_TYPE_UNSUPPORTED_IN_THIS_CLUSTER_VERSION; } else if (_architectureMismatch) { return org.ovirt.engine.core.common.AuditLogType.VDS_ARCHITECTURE_NOT_SUPPORTED_FOR_CLUSTER; } else if (<END_MOD>!(_hasFlags)<START_MOD>)<END_MOD> <START_MOD>{ return<END_MOD> org.ovirt.engine.core.common.AuditLogType.VDS_CPU_RETRIEVE_FAILED<START_MOD>;<END_MOD> <START_MOD>} else { return<END_MOD> org.ovirt.engine.core.common.AuditLogType.VDS_CPU_LOWER_THAN_CLUSTER; }<START_MOD> }<END_MOD>
public static boolean isVmPriorityValueLegal(int value, java.util.List<java.lang.String> reasons) { boolean res = false; if ((value >= 0) && (value <= (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VmPriorityMaxValue)))) { res = true; } else { reasons.add(<START_MOD>EngineMessages<END_MOD>.VM_OR_TEMPLATE_ILLEGAL_PRIORITY_VALUE.toString()); reasons.add(java.lang.String.format( %1$s org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VmPriorityMaxValue))); } return res; }
private org.ovirt.engine.core.compat.Guid getVdsToRunOn(java.lang.Iterable<org.ovirt.engine.core.common.businessentities.VDS> vdss) { <START_MOD>java.lang.StringBuffer sb = new java.lang.StringBuffer(); <END_MOD>final java.util.List<org.ovirt.engine.core.common.businessentities.VDS> readyToRun = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>(); for (org.ovirt.engine.core.common.businessentities.VDS curVds : vdss) { if (<START_MOD>(validateHostIsReadyToRun<END_MOD>(curVds, <START_MOD>sb)) == (ValidationResult.VALID)) { readyToRun.add(curVds); } }<END_MOD> if (<START_MOD>readyToRun.isEmpty()) { <END_MOD>org.ovirt.engine.core.bll.VdsSelector.<START_MOD>log.info(sb.toString());<END_MOD> return org.ovirt.engine.core.compat.Guid.Empty<START_MOD>; } else { return<END_MOD> getBestVdsToRun(readyToRun); }<START_MOD> }<END_MOD>
<START_MOD>@javax.ws.rs.GET @org.jboss.resteasy.annotations.providers.jaxb.Formatted public org.ovirt.engine.api.model.NetworkDevice get();<END_MOD>
<START_MOD>@java.lang.Override public void onMouseUp(com.google.gwt.event.dom.client.MouseUpEvent mouseUpEvent) { mouseDownOnDropDownImage = false; }<END_MOD>
<START_MOD>java.lang.String unit();<END_MOD>
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(VdcActionType.RemoveVmTemplate); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.DeleteImageGroup, <START_MOD>org.ovirt.engine.core.bll.storage.SecureDeletionHandler.fixParametersWithSecureDeletion(<END_MOD>new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getWipeAfterDelete(), false))<START_MOD>)<END_MOD>; if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getReturnValue().getInternalVdsmTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), VdcActionType.RemoveVmTemplate, VdcObjectType.Storage, org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.setSucceeded(true); } }
<START_MOD>public void populateDwhOsInfo(java.util.Map<java.lang.Integer, java.lang.String> osIdToName) { getCallsHandler().executeRead("clear_osinfo", ((java.util.List < org.springframework.jdbc.core.namedparam.MapSqlParameterSource) > org.ovirt.engine.core.dal.dbbroker.executions)) = new ArrayList<org.springframework.jdbc.core.namedparam.MapSqlParameterSource>(); for (java.util.Map.Entry<java.lang.Integer, java.lang.String> e : osIdToName.entrySet()) { executions.add(new org.springframework.jdbc.core.namedparam.MapSqlParameterSource().addValue("os_id", e.getKey()).addValue("os_name", e.getValue())); } getCallsHandler().executeStoredProcAsBatch("populateOsInfo", executions); }<END_MOD>
<START_MOD>private java.util.function.Predicate<? super org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> isVnicMigratable(org.ovirt.engine.core.common.businessentities.VM vm) { return ( vnic) -> (!(vnic.isPassthrough())) || ((org.ovirt.engine.core.common.FeatureSupported.sriovHotPlugSupported(vm.getClusterCompatibilityVersion())) && (getVnicProfile(vnic).isMigratable())); }<END_MOD>
protected void deactivateStorageDomainAfterTaskExecution() { final org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase params = new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase(org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePoolId()); params.setSkipChecks(true); boolean newThread = ((org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master)) && ((org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand.getNewMaster(false)) == null); if (newThread) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(new java.lang.Runnable() { @java.lang.Override public void run() { try { <START_MOD>org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = loadStoragePoolIsoMap(); org.ovirt.engine.core.bll.context.CompensationContext context = createDefaultCompensationContext(org.ovirt.engine.core.compat.Guid.newGuid()); changeDomainStatusWithCompensation(map, StorageDomainStatus.Unknown, StorageDomainStatus.Locked, context); <END_MOD>waitForTasksToBeCleared(); executeDeactivateCommnad(false); <START_MOD>context.resetCompensation(); <END_MOD>} catch (java.lang.Exception e) { setSucceeded(false); log.error( when attempting to deactivate storage domain {0} getStorageDomainId(), e); compensate(); } } }); } else { executeDeactivateCommnad(false); } }
<START_MOD>@java.lang.Override protected void selectPhysicalDatacentreNetwork() { final org.ovirt.engine.core.common.businessentities.network.Network network = getNetwork(); }<END_MOD>
<START_MOD>@java.lang.Override public void validateEnums(org.ovirt.engine.api.model.Host host) { if (host.isSetType()) { validateEnum(org.ovirt.engine.api.model.PmProxyType.class, host.getType(), true); } }<END_MOD>
public void rollbackQuotaByVmId(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(vmId); if (vm != null) { rollbackQuota(vm.<START_MOD>getStoragePoolId<END_MOD>(), java.util.Arrays.asList(vm.getQuotaId())); } }
@java.lang.Override public void save(T entity) { <START_MOD>save<END_MOD>(entity<START_MOD>, defaultFlash<END_MOD>); }
@java.lang.Override protected void executeCommand() { log.info( ImageTransfer entity for command '{}' org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); if (<START_MOD>isImageSupplied()) { handleImageIsReadyForTransfer<END_MOD>(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())<START_MOD>; } else<END_MOD> { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(false); return; } log.info( {} image getImageType()); createImage(); } <START_MOD>setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true<END_MOD>); }
protected void addMoveOrCopyParameters(java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters, org.ovirt.engine.core.compat.Guid sourceStorageDomainGuid, org.ovirt.engine.core.compat.Guid destStorageDomainGuid, org.ovirt.engine.core.common.businessentities.DiskImage disk, org.ovirt.engine.core.common.businessentities.ImageOperation imageOperation) { org.ovirt.engine.core.common.action.<START_MOD>VdcActionParametersBase diskParameters; if ((getVmId()) == null) { diskParameters = new org.ovirt.engine.core.common.action.<END_MOD>MoveOrCopyImageGroupParameters<START_MOD>(disk.getImageId(), sourceStorageDomainGuid, destStorageDomainGuid, imageOperation); ((org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters) (diskParameters)).setQuotaId(disk.getQuotaId()); } else {<END_MOD> diskParameters = new org.ovirt.engine.core.common.action.<START_MOD>LiveMigrateDiskParameters<END_MOD>(disk.getImageId(), sourceStorageDomainGuid, destStorageDomainGuid, <START_MOD>getVmId()); }<END_MOD> parameters.add(diskParameters); }
@java.lang.Override public boolean isUpdateAvailable(final org.ovirt.engine.core.common.businessentities.VDS host) { final java.util.<START_MOD>Collection<END_MOD><java.lang.String> packages = org.ovirt.engine.core.common.config.Config.getPackagesForUpdateCheck(); try (final org.ovirt.engine.core.bll.hostdeploy.VdsMgmtPackages hostPackagesManager = createPackagesManager(host, true)) { hostPackagesManager.setPackages(packages); hostPackagesManager.execute(); if (!(hostPackagesManager.getUpdates().isEmpty())) { org.ovirt.engine.core.bll.host.HostUpgradeManager.log.info( are available packages ({}) for host '{}' org.apache.commons.lang.StringUtils.join(hostPackagesManager.getUpdates(),     host.getName()); } return !(hostPackagesManager.getUpdates().isEmpty()); } catch (final java.lang.Exception e) { org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error( to refresh host '{}' packages '{}'. host.getName(), org.apache.commons.lang.StringUtils.join(packages,     org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Exception", e); throw new java.lang.RuntimeException(e.getMessage(), e); } }
private boolean executeSshSoftFencingCommand(java.lang.String version) { boolean result = true; org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = null; java.io.ByteArrayOutputStream bos = null; try { sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient(); sshClient.setVds(org.ovirt.engine.core.bll.SshSoftFencingCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.connect(); sshClient.authenticate(); bos = new java.io.ByteArrayOutputStream(); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.SshSoftFencingCommand, version), null, bos, null); log.info(( Soft Fencing command executed on host   + (org.ovirt.engine.core.bll.SshSoftFencingCommand.getVds().getHostName()))); <START_MOD>} catch (java.lang.Exception ex) { <END_MOD>log.<START_MOD>error<END_MOD>(( Soft Fencing command <START_MOD>failed on host   + (org.ovirt.engine.core.bll.SshSoftFencingCommand.getVds().getHostName())), ex); if (bos != null) { log.error(( Soft Fencing command <END_MOD>output   + (bos.toString()))); } result = false; } finally { closeSshConnection(sshClient); } return result; }
<START_MOD>private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface interfaceRelatedToAttachment(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment) { return existingInterfacesMap.get(networkAttachment.getNicId()); }<END_MOD>
<START_MOD>private void checkRequiredArgs(java.lang.String... args) throws org.ovirt.engine.core.domains.ManageDomainsResult { for (java.lang.String arg : args) { if (!(contains(arg))) { throw new org.ovirt.engine.core.domains.ManageDomainsResult(ManageDomainsResultEnum.ARGUMENT_IS_REQUIRED, arg); } } }<END_MOD>
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc resumeGeoRepGlusterVolume(java.lang.String volumeName, java.lang.String slaveHostName, java.lang.String slaveVolumeName, boolean force);<END_MOD>
protected org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters() { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters params = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getVmId(), <START_MOD>org.ovirt.engine.core.common.constants.StorageConstants.LSM_AUTO_GENERATED_SNAPSHOT_DESCRIPTION);<END_MOD> params.setParentCommand(VdcActionType.LiveMigrateVmDisks); params.setSnapshotType(SnapshotType.REGULAR); params.setParentParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters()); params.setImagesParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getImagesParameters()); params.setTaskGroupSuccess(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getTaskGroupSuccess()); params.setDisks(getMovedDisks()); params.setDiskIdsToIgnoreInChecks(getMovedDiskIds()); params.setNeedsLocking(false); params.setEndProcedure(EndProcedure.COMMAND_MANAGED); return params; }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = <START_MOD>CreateGlusterVolumeVDSCommand.getParameters().getVolume(); boolean isForce = CreateGlusterVolumeVDSCommand.getParameters().isForce(); boolean supportForceCreateVolume = <END_MOD>org.ovirt.engine.core.<START_MOD>common.config.Config.<java.lang.Boolean>GetValue(ConfigValues.GlusterSupportForceCreateVolume, CreateGlusterVolumeVDSCommand.getVds().getVdsGroupCompatibilityVersion().toString()<END_MOD>); uuidReturn = <START_MOD>(supportForceCreateVolume) ? <END_MOD>CreateGlusterVolumeVDSCommand.getBroker().glusterVolumeCreate(volume.getName(), volume.getBrickDirectories().toArray(new java.lang.String[0]), volume.getReplicaCount(), volume.getStripeCount(), getTransportTypeArr(volume)<START_MOD>, isForce) : CreateGlusterVolumeVDSCommand.getBroker().glusterVolumeCreate(volume.getName(), volume.getBrickDirectories().toArray(new java.lang.String[0]), volume.getReplicaCount(), volume.getStripeCount(), getTransportTypeArr(volume)); CreateGlusterVolumeVDSCommand.proceedProxyReturnValue(); if (CreateGlusterVolumeVDSCommand.getVDSReturnValue().getSucceeded()) { volume.setId(<END_MOD>org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(uuidReturn.mUuid)); setReturnValue(volume); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> searchVDSsByDb() { return genericSearch(org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getVdsDao(), true, new org.ovirt.engine.core.common.utils.ListUtils.Filter<org.ovirt.engine.core.common.businessentities.VDS>() { @java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> data) { for (org.ovirt.engine.core.common.businessentities.VDS vds : data) { vds.setCpuName(<START_MOD>cpuFlagsManagerHandler<END_MOD>.findMaxServerCpuByFlags(vds.getCpuFlags(), vds.getVdsGroupCompatibilityVersion())); } return data; } }); }
@java.lang.Override public void eventRaised(org.ovirt.engine.core.compat.Event ev, java.lang.Object sender, org.ovirt.engine.core.compat.EventArgs args) { if ((args instanceof org.ovirt.engine.core.compat.PropertyChangedEventArgs) && (((org.ovirt.engine.core.compat.PropertyChangedEventArgs) (args)).PropertyName.equals(object.ON_DISK_LOAD))) { addStorageQuotaColumn(); diskTable.edit(object.getImportDiskListModel()); <START_MOD>if ((<END_MOD>customSelectionCellFormatType<START_MOD>) != null) { customSelectionCellFormatType<END_MOD>.setEnabledWithToolTip(((java.lang.Boolean) (object.getCollapseSnapshots().getEntity())), constants.importAllocationModifiedCollapse()); <START_MOD>} <END_MOD>if ((<START_MOD>(<END_MOD>object.getProblematicItems()<START_MOD>) != null) && ((object.getProblematicItems()<END_MOD>.size()) > 0)<START_MOD>)<END_MOD> { image.setVisible(true); } } else if ((args instanceof org.ovirt.engine.core.compat.PropertyChangedEventArgs) && (((org.ovirt.engine.core.compat.PropertyChangedEventArgs) (args)).PropertyName.equals("Message"))) { message.setText(object.getMessage()); } }
@java.lang.Override public java.lang.String getMessage() { return java.lang.String.format( (Failed with error %1$s and code %2$s) <START_MOD>super.getMessage(), <END_MOD>privateVdsError.getCode(), privateVdsError.getCode().getValue()); }
<START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc convertVmFromXen(java.lang.String url, java.util.Map<java.lang.String, java.lang.Object> vm, java.lang.String jobUUID);<END_MOD>
@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.FileStatsReturnForXmlRpc getIsoList(java.lang.String spUUID) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("StoragePool.getIsoList").withParameter("storagepoolID", spUUID).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request).withResponseKey("isolist").withResponseType(java.lang.Object[].class); return new org.ovirt.engine.core.vdsbroker.irsbroker.FileStatsReturnForXmlRpc(response); }
<START_MOD>public org.ovirt.engine.core.common.businessentities.CacheDevicePathType getCacheDevicePath() { return cacheDevicePath; }<END_MOD>
<START_MOD>@org.junit.Test public void testSeverity() throws java.lang.Exception { java.lang.String expected1 = "test1@example.com"; java.lang.String expected2 = "test2@example.com"; filter.clearFilterEntries(); filter.addFilterEntries(org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilter.parse(((((((((((("include:*:WARNING(smtp:" + expected1) + ") ") + "exclude:*(smtp:") + expected1) + ")") + "exclude:*:WARNING(smtp:") + expected2) + ") ") + "include:*(smtp:") + expected2) + ")"))); filter.processEvent(new org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilterTest.E("message1", org.ovirt.engine.core.common.AuditLogSeverity.NORMAL)); filter.processEvent(new org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilterTest.E("message2", org.ovirt.engine.core.common.AuditLogSeverity.WARNING)); filter.processEvent(new org.ovirt.engine.core.notifier.filter.FirstMatchSimpleFilterTest.E("message3", org.ovirt.engine.core.common.AuditLogSeverity.ERROR)); org.junit.Assert.assertTrue(smtp.getEvents().contains(("message2-->" + expected1))); org.junit.Assert.assertTrue(smtp.getEvents().contains(("message3-->" + expected1))); org.junit.Assert.assertTrue(smtp.getEvents().contains(("message3-->" + expected2))); org.junit.Assert.assertEquals(3, smtp.getEvents().size()); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.businessentities.aaa.DbGroup getByExternalId(java.lang.String domain, java.lang.String externalId) { return getCallsHandler().executeRead("GetGroupByExternalId", org.ovirt.engine.core.dao.<START_MOD>DbGroupDAOImpl<END_MOD>.DbGroupRowMapper.instance, getCustomMapSqlParameterSource().addValue("domain", domain).addValue("external_id", externalId)); }
<START_MOD>private void vmBalloonDriverIsRequestedAndUnavailable(org.ovirt.engine.core.compat.Guid vmId) { java.lang.Integer currentVal = vmsWithBalloonDriverProblem.get(vmId); if (currentVal == null) { vmsWithBalloonDriverProblem.put(vmId, 1); } else { vmsWithBalloonDriverProblem.put(vmId, (currentVal + 1)); if (currentVal >= (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.IterationsWithBalloonProblem))) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); auditLogable.setVmId(vmId); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(auditLogable, AuditLogType.VM_BALLOON_DRIVER_ERROR); } } }<END_MOD>
@java.lang.Override protected void executeQueryCommand() { java.util.List<? extends org.ovirt.engine.core.common.businessentities.IVdcQueryable> returnValue = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.IVdcQueryable>(); switch (org.ovirt.engine.core.bll.SearchQuery.getParameters().getSearchTypeValue()) { case VM : { returnValue = searchVmsFromDb(); break; } case AdGroup : { returnValue = searchAdGroups(); break; } case AdUser : { returnValue = searchAdUsers(); break; } case AuditLog : { returnValue = searchAuditLogEvents(); break; } case DBUser : { returnValue = searchDbUsers(); break; } case VDS : { returnValue = searchVDSsByDb(); break; } case VmTemplate : { returnValue = searchVMTemplates(); break; } case VmPools : { returnValue = searchVmPools(); break; } case Cluster : { returnValue = searchClusters(); break; } case StoragePool : { returnValue = searchStoragePool(); break; } case StorageDomain : { returnValue = searchStorageDomain(); break; } case Quota : { returnValue = searchQuota(); break; } case Disk : { returnValue = searchDisk(); break; } case GlusterVolume : { returnValue = searchGlusterVolumes(); break; } case Network : { returnValue = searchNetworks(); break; } <START_MOD>case InstanceType : { returnValue = searchInstanceTypes(); break; } case ImageType : { returnValue = searchVMTemplates(); break; } <END_MOD>default : { log.errorFormat( object type not handled: {0} org.ovirt.engine.core.bll.SearchQuery.getParameters().getSearchTypeValue()); break; } } getQueryReturnValue().setReturnValue(returnValue); }
@java.lang.Override protected void Connect() { if ((getEntity()) != null) { getLogger().Debug( to Spice console... if (!(getspice().getIsInstalled())) { getLogger().Info( client is not installed. getspice().Install(); return; } if ((getConfigurator().getIsAdmin()) && ((getspice().getCurrentVersion().compareTo(getspice().getDesiredVersion())) < 0)) { getLogger().Info((( client version is not as desired ( + (getspice().getDesiredVersion())) + ")")); getspice().Install(); return; } if ((getEntity().getrun_on_vds()) == null) { return; } <START_MOD>if (!(getEntity().getvm_os().isWindows())) { getspice().setIsWanOptionsEnabled(false); } <END_MOD>SendVmTicket(); } }
<START_MOD>public int getControllerForScsiDisk(org.ovirt.engine.core.common.businessentities.VmDevice disk, org.ovirt.engine.core.common.businessentities.VM vm) { java.util.Map<java.lang.String, java.lang.String> address = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStringUtils.string2Map(disk.getAddress()); java.lang.String controllerStr = address.get(VdsProperties.Controller); int defaultIndex = getDefaultVirtioScsiIndex(vm); if (org.apache.commons.lang.StringUtils.isNotEmpty(controllerStr)) { return java.lang.Integer.parseInt(controllerStr); } if (((vm.getNumOfIoThreads()) > 0) && (org.ovirt.engine.core.common.FeatureSupported.virtioScsiIoThread(vm.getCompatibilityVersion()))) { int numOfDisks = ((vm.getDiskMap()) != null) ? vm.getDiskMap().values().size() : 0; return (numOfDisks % (vm.getNumOfIoThreads())) + defaultIndex; } return defaultIndex; }<END_MOD>
@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getParameters().getVmNumaNodeList(); vmNumaNodes.stream().forEach(( node) -> node.setId(org.ovirt.engine.core.compat.Guid.newGuid())); org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVmNumaNodeDao().massSaveNumaNode(vmNumaNodes, org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVm().getId()); setActionReturnValue(vmNumaNodes.get(0).getId()); org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.setSucceeded(true); }
public org.ovirt.engine.core.bll.ValidationResult notIscsiBondNetwork() { java.util.List<org.ovirt.engine.core.common.businessentities.IscsiBond> iscsiBonds = getDbFacade().getIscsiBondDao().getIscsiBondsByNetworkId(network.getId()); if (!(iscsiBonds.isEmpty())) { java.util.Collection<java.lang.String> replaceNameables = org.ovirt.engine.core.utils.ReplacementUtils.replaceWithNameable("IscsiBonds", iscsiBonds); replaceNameables.add(getNetworkNameReplacement()); return new org.ovirt.engine.core.bll.ValidationResult(<START_MOD>___VdcBllMessages<END_MOD>.NETWORK_CANNOT_REMOVE_ISCSI_BOND_NETWORK, replaceNameables); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public java.util.Map spmStart(java.lang.String spUUID, java.lang.String prevID, java.lang.String prevLVER, java.lang.String recoveryMode, java.lang.String scsiFencing) { final org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.Host host = getActiveHost(); java.util.Map resultMap = getOKStatus(); org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.Task task = new org.ovirt.vdsmfake.<START_MOD>service<END_MOD>.Task(getUuid()); resultMap.put("uuid", task.getId()); task.setTarget(host); getActiveHost().getRunningTasks().put(task.getId(), task); org.ovirt.vdsmfake.task.TaskProcessor.setTasksMap(host.getName(), task.getId()); org.ovirt.vdsmfake.task.TaskProcessor.getInstance().addTask(new org.ovirt.vdsmfake.task.TaskRequest(org.ovirt.vdsmfake.task.TaskType.FINISH_START_SPM, 10000L, task)); <START_MOD>org.ovirt.vdsmfake.service.VdsmManager.getInstance().setSpmMap(spUUID, host); <END_MOD>return resultMap; }
<START_MOD>private<END_MOD> void onEditSnapshotSchedule() { final org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel snapshotModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel) (getWindow())); if (!(snapshotModel.validate(false))) { return; } <START_MOD>setConfirmWindow(null); <END_MOD>scheduleSnapshot(snapshotModel, true); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( allowing PK authentication, copy the following PK to host under /root/.ssh/authorized_keys java.lang.String publicKeyUsage();
<START_MOD>private void addAffinityLabels() { java.util.List<org.ovirt.engine.core.common.businessentities.Label> affinityLabels = org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getParameters().getAffinityLabels(); java.util.List<org.ovirt.engine.core.compat.Guid> labelIds = affinityLabels.stream().map(Label::getId).collect(java.util.stream.Collectors.toList()); labelDao.addHostToLabels(org.ovirt.engine.core.bll.hostdeploy.AddVdsCommand.getVdsId(), labelIds); }<END_MOD>
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm()) == null) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().isRunningOrPaused()) || ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Unknown))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.VM_POOL_CANNOT_ADD_RUNNING_VM_TO_POOL); } if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().getVmPoolId()) != null) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.VM_POOL_CANNOT_ADD_VM_ATTACHED_TO_POOL); } if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getParameters().getVmPoolId()) != null) { org.ovirt.engine.core.common.businessentities.VmPool pool = org.ovirt.engine.core.bll.AddVmToPoolCommand.getVmPoolDao().get(org.ovirt.engine.core.bll.AddVmToPoolCommand.getParameters().getVmPoolId()); if ((pool != null) && (!(pool.getVdsGroupId().equals(org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().getVdsGroupId())))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.VM_POOL_CANNOT_ADD_VM_DIFFERENT_CLUSTER); } } return true; }
private void issueTokenForLoginOnBehalf(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, java.lang.String scope) throws java.lang.Exception { org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug( issueTokenForLoginOnBehalf java.lang.String[] clientIdAndSecret = org.ovirt.engine.core.sso.utils.SSOUtils.getClientIdClientSecret(request); java.lang.String username = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, "username", null); org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug( to issueTokenForLoginOnBehalf for client: {}, user: {} clientIdAndSecret[0], username); org.ovirt.engine.core.sso.utils.AuthenticationUtils.loginOnBehalf(ssoContext, request, username); java.lang.String token = ((java.lang.String) (request.getAttribute(SSOConstants.HTTP_REQ_ATTR_ACCESS_TOKEN))); org.ovirt.engine.core.sso.utils.SSOUtils.validateRequestScope(request, token, scope); org.ovirt.engine.core.sso.utils.SSOSession ssoSession = org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession(request, token, true); if (ssoSession == null) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SSOConstants.ERR_CODE_INVALID_GRANT, <START_MOD>ssoContext.getLocalizationUtils().localize(SSOConstants.APP_ERROR_AUTHORIZATION_GRANT_EXPIRED_FOR_USERNAME_PASSWORD, request.getLocale()));<END_MOD> } org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug( json response org.ovirt.engine.core.sso.utils.SSOUtils.sendJsonData(response, buildResponse(ssoSession)); }
private void importImages() { @java.lang.SuppressWarnings("unchecked") java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoImage> repoImages = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoImage>) (getSelectedItems())); if ((repoImages == null) || ((getWindow()) != null)) { return; } org.ovirt.engine.ui.uicommonweb.models.storage.ImportRepoImageModel model = new org.ovirt.engine.ui.uicommonweb.models.storage.ImportRepoImageModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().importImagesTitle()); model.setHashName("import_images"); model.<START_MOD>setHelpTag(model.getHashName(), ""); model.<END_MOD>setEntity(this); model.init(((org.ovirt.engine.core.common.businessentities.StorageDomain) (getEntity())), repoImages); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); cancelCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); cancelCommand.setIsCancel(true); model.setCancelCommand(cancelCommand); model.getCommands().add(cancelCommand); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> <START_MOD>getAllForCpuProfiles<END_MOD>(<START_MOD>java.util.Collection<<END_MOD>org.ovirt.engine.core.compat.Guid<START_MOD>><END_MOD> <START_MOD>cpuProfileIds<END_MOD>) {<START_MOD> java.util.UUID[] uuids = cpuProfileIds.stream().map(Guid::getUuid).toArray(( size) -> new java.util.UUID[size]);<END_MOD> return getCallsHandler().executeReadList(<START_MOD>"GetVmsByCpuProfileIds"<END_MOD>, org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue(<START_MOD>"cpu_profile_ids"<END_MOD>, <START_MOD>createArrayOf("uuid", uuids)<END_MOD>)); }
<START_MOD>private org.ovirt.engine.core.bll.ValidationResult validateDevices() { java.util.Set<java.lang.String> devices = org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().stream().collect(java.util.stream.Collectors.toSet()); if ((devices.size()) != (org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce().size())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DUPLICATE_DEVICE); } return blockSDValidator.lunsInDomain(org.ovirt.engine.core.bll.storage.domain.EditSANStorageDomainDevicesCommand.getStorageDomain(), devices); }<END_MOD>
<START_MOD>private static <T extends org.ovirt.engine.core.common.businessentities.Nameable> java.util.List<org.ovirt.engine.core.common.businessentities.ClusterEditWarnings.Warning> getProblematicEntities(org.ovirt.engine.core.common.businessentities.VDSGroup oldCluster, org.ovirt.engine.core.common.businessentities.VDSGroup newCluster, java.lang.Iterable<org.ovirt.engine.core.bll.ClusterEditChecker<T>> checkers, java.util.List<T> entities) { java.util.List<org.ovirt.engine.core.bll.ClusterEditChecker<T>> vmChecks = org.ovirt.engine.core.bll.GetClusterEditWarningsQuery.getApplicableChecks(oldCluster, newCluster, checkers); java.util.List<org.ovirt.engine.core.common.businessentities.ClusterEditWarnings.Warning> warnings = new java.util.ArrayList<>(); for (org.ovirt.engine.core.bll.ClusterEditChecker<T> checker : vmChecks) { org.ovirt.engine.core.common.businessentities.ClusterEditWarnings.Warning warning = new org.ovirt.engine.core.common.businessentities.ClusterEditWarnings.Warning(checker.getMainMessage()); for (T entity : entities) { if (!(checker.check(entity))) { warning.getDetailsByName().put(entity.getName(), checker.getDetailMessage(entity)); } } if (!(warning.isEmpty())) { warnings.add(warning); } } return warnings; }<END_MOD>
<START_MOD>public java.util.Map<java.lang.String, java.lang.Object> glusterVolumeSnapshotActivate(java.lang.String snapshotName, boolean force);<END_MOD>
private org.ovirt.engine.core.bll.ValidationResult vmNotInStatus(org.ovirt.engine.core.compat.Guid vmId, org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotStatus status, org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD> msg) { if (getSnapshotDao().exists(vmId, status)) { return new org.ovirt.engine.core.bll.ValidationResult(msg); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public org.ovirt.engine.api.model.Networks list() { org.ovirt.engine.api.model.Networks networks<START_MOD>; if (isFiltered()) { networks = mapCollection(getBackendCollection(VdcQueryType.GetAllNetworksByUserId, new org.ovirt.engine.core.common.queries.GetAllNetworkQueryParamenters())); } else { networks<END_MOD> = mapCollection(getBackendCollection(queryType, getQueryParameters()));<START_MOD> }<END_MOD> for (org.ovirt.engine.api.model.Network network : networks.getNetworks()) { network.setDisplay(null); } return networks; }
@java.lang.Override protected boolean canDoAction() { return ((((validate(networkExists(geRemovedtNetwork()))) && (validate(notManagementNetwork()))) && (validate(org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.<START_MOD>networkNotUsedByVms<END_MOD>()))) && (validate(networkNotUsedByTemplates(geRemovedtNetwork())))) && (validate(<START_MOD>networkNotUsedByHosts<END_MOD>(geRemovedtNetwork()))); }
@java.lang.Override public int hashCode() { <START_MOD>return<END_MOD> <START_MOD>java.util.Objects.hash<END_MOD>(id<START_MOD>,<END_MOD> <START_MOD>_children,<END_MOD> <START_MOD>description,<END_MOD> <START_MOD>parent,<END_MOD> <START_MOD>readonly,<END_MOD> <START_MOD>name,<END_MOD> <START_MOD>type<END_MOD>); }
<START_MOD>@org.junit.Test public void testPersistNetworkAttachments_createNetworkAttachmentWhichWasntYetCreatedForEachNetworkOnReportedNic() { org.mockito.Mockito.when(networkAttachmentDao.getAllForHost(eq(hostId))).thenReturn(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>()); createPersister(java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>emptyList(), interfaceWithAttachedClusterNetworkA).persistNetworkAttachments(); verify(networkAttachmentDao).getAllForHost(any(org.ovirt.engine.core.compat.Guid.class)); org.mockito.ArgumentCaptor<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> networkAttachmentCaptor = org.mockito.ArgumentCaptor.forClass(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment.class); verify(networkAttachmentDao).save(networkAttachmentCaptor.capture()); assertThat(networkAttachmentCaptor.getValue().getNetworkId(), is(clusterNetworkA.getId())); assertThat(networkAttachmentCaptor.getValue().getNicId(), is(interfaceWithAttachedClusterNetworkA.getId())); assertThat(networkAttachmentCaptor.getValue().getId(), notNullValue()); verifyNoMoreInteractions(networkAttachmentDao); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( of bricks should be equal to Stripe Count java.lang.String stripeVolumeAddBricksMsg();
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (<START_MOD>getCloneVmCommand())) { cloneVm(); } if (command == (<END_MOD>getNewVmCommand())) { newInternal(); } else if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getSaveCommand())) { onSave(); } else if (command == (getRunOnceCommand())) { runOnce(); } else if (command == (getChangeCdCommand())) { changeCD(); } else if (command == (getNewTemplateCommand())) { newTemplate(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnRemove")) { onRemove(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnRunOnce")) { cancel(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnChangeCD")) { onChangeCD(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnNewTemplate")) { onNewTemplate(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnSave")) { onSave(); } else if (command.getName().equals("closeVncInfo")) { setWindow(null); } <START_MOD>else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnClone")) { onClone(); } }<END_MOD>
<START_MOD>public void executeCommand() { if (isBaseRawBlock()) { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.MergeExtendCommand.getParameters().getParentCommand()); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = extendImageSize(); if ((vdsReturnValue != null) && ((vdsReturnValue.getCreationInfo()) != null)) { org.ovirt.engine.core.bll.MergeExtendCommand.getParameters().setVdsmTaskIds(new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>()); org.ovirt.engine.core.compat.Guid result = createTask(taskId, vdsReturnValue.getCreationInfo(), org.ovirt.engine.core.bll.MergeExtendCommand.getParameters().getParentCommand(), VdcObjectType.Storage, org.ovirt.engine.core.bll.MergeExtendCommand.getParameters().getStorageDomainId()); org.ovirt.engine.core.bll.MergeExtendCommand.getReturnValue().getInternalVdsmTaskIdList().add(result); org.ovirt.engine.core.bll.MergeExtendCommand.getReturnValue().getVdsmTaskIdList().add(result); org.ovirt.engine.core.bll.MergeExtendCommand.getParameters().getVdsmTaskIds().add(result); setSucceeded(vdsReturnValue.getSucceeded()); persistCommand(org.ovirt.engine.core.bll.MergeExtendCommand.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.MergeExtendCommand.log.info("Successfully started task to extend base image size in preparation for live merge"); } else { org.ovirt.engine.core.bll.MergeExtendCommand.log.error("Failed to extend base image for live merge"); org.ovirt.engine.core.bll.MergeExtendCommand.setSucceeded(false); setCommandStatus(CommandStatus.FAILED); } } else { updateSizeInDb(); org.ovirt.engine.core.bll.MergeExtendCommand.setSucceeded(true); setCommandStatus(CommandStatus.SUCCEEDED); } }<END_MOD>
@org.junit.Test public void testUpdateQuota() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.Quota quotaGeneralToSpecific = dao.getById(FixturesTool.QUOTA_GENERAL); java.lang.String quotaName =   Temporary name java.util.List<org.ovirt.engine.core.common.businessentities.QuotaCluster> quotaClusterList = org.ovirt.engine.core.dao.QuotaDaoTest.getQuotaCluster(org.ovirt.engine.core.dao.QuotaDaoTest.getSpecificQuotaCluster(quotaGeneralToSpecific.getId())); java.lang.Long newStorageLimit = 2345L; <START_MOD>assertFalse(quotaName.equals(quotaGeneralToSpecific.getQuotaName())); assertFalse(((quotaClusterList.size()) == (quotaGeneralToSpecific.getQuotaClusters().size()))); assertFalse(quotaGeneralToSpecific.getGlobalQuotaStorage().getStorageSizeGB().equals(newStorageLimit)); quotaGeneralToSpecific.setQuotaName(quotaName); quotaGeneralToSpecific.getGlobalQuotaStorage().setStorageSizeGB(newStorageLimit); quotaGeneralToSpecific.setQuotaClusters(quotaClusterList); dao.update(quotaGeneralToSpecific); quotaGeneralToSpecific = dao.getById(FixturesTool.QUOTA_GENERAL); <END_MOD>assertEquals(quotaName<START_MOD>, <END_MOD>quotaGeneralToSpecific.getQuotaName())<START_MOD>; assertEquals(quotaClusterList.size()<END_MOD>, <START_MOD>quotaGeneralToSpecific.getQuotaClusters().size()<END_MOD>); assertEquals(<START_MOD>newStorageLimit<END_MOD>, quotaGeneralToSpecific.getGlobalQuotaStorage().getStorageSizeGB()); }
<START_MOD>public java.lang.String getIpv6Address() { if (primaryIpv6AddressNotSet()) { return null; } return getIpConfiguration().getIpv4PrimaryAddress().getAddress(); }<END_MOD>
<START_MOD>@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { model.getRemoveNetworkCommand().Execute(); }<END_MOD>
<START_MOD>public void setVds(org.ovirt.engine.core.common.businessentities.VDS v) { vds = v; }<END_MOD>
<START_MOD>protected<END_MOD> <START_MOD>java.util.List<<END_MOD>org.ovirt.engine.core.common.businessentities.StorageDomain<START_MOD>><END_MOD> <START_MOD>filterStorageDomains(java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> domainsInPool<END_MOD>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList) { <START_MOD>for (<END_MOD>org.ovirt.engine.core.bll.<START_MOD>memory<END_MOD>.<START_MOD>storageDomainFilters<END_MOD>.<START_MOD>StorageDomainFilter<END_MOD> <START_MOD>storageDomainFilter<END_MOD> <START_MOD>:<END_MOD> <START_MOD>getStorageDomainFilters<END_MOD>()) <START_MOD>{<END_MOD> <START_MOD>domainsInPool = storageDomainFilter.filterStorageDomains<END_MOD>(<START_MOD>domainsInPool, <END_MOD>disksList); }<START_MOD> return domainsInPool; }<END_MOD>
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; if ((getClass()) != (obj.getClass())) return false; org.ovirt.engine.core.common.businessentities.network.NetworkCluster other = ((org.ovirt.engine.core.common.businessentities.network.NetworkCluster) (obj)); if ((display) != (other.display)) return false; if ((status) == null) { if ((other.status) != null) return false; } else if (!(status.equals(other.status))) return false; if ((id) == null) { if ((other.id) != null) return false; } else if (!(id.equals(other.id))) return false; if ((required) != (other.required)) { return false; } if ((migration) != (other.migration)) { return false; } <START_MOD>if ((gluster) != (other.gluster)) { return false; } <END_MOD>return true; }
@org.junit.Before public void setUp() throws java.lang.Exception { fakeScheduler = new org.ovirt.engine.ui.frontend.FakeGWTScheduler(); <START_MOD>mockService = mock(org.ovirt.engine.ui.frontend.gwtservices.GenericApiGWTServiceAsync.class, withSettings().extraInterfaces(com.google.gwt.user.client.rpc.ServiceDefTarget.class)); mockXsrfService = mock(com.google.gwt.user.client.rpc.XsrfTokenServiceAsync.class, withSettings().extraInterfaces(com.google.gwt.user.client.rpc.ServiceDefTarget.class)); <END_MOD>org.ovirt.engine.ui.frontend.communication.CommunicationProvider communicationsProvider = new org.ovirt.engine.ui.frontend.communication.GWTRPCCommunicationProvider(mockService<START_MOD>, mockXsrfService); ((org.ovirt.engine.ui.frontend.communication.GWTRPCCommunicationProvider) (communicationsProvider)).getXsrfRequestBuilder().setXsrfToken(new com.google.gwt.user.client.rpc.XsrfToken("Something")); ((org.ovirt.engine.ui.frontend.communication.GWTRPCCommunicationProvider) (communicationsProvider)).setBaseURL("/baseurl"<END_MOD>); org.ovirt.engine.ui.frontend.communication.OperationProcessor operationProcessor = new org.ovirt.engine.ui.frontend.communication.OperationProcessor(communicationsProvider); operationProcessor.setScheduler(fakeScheduler); org.ovirt.engine.ui.frontend.communication.VdcOperationManager operationsManager = new org.ovirt.engine.ui.frontend.communication.VdcOperationManager(operationProcessor); operationsManager.setLoggedIn(true); frontend = new org.ovirt.engine.ui.frontend.Frontend(operationsManager, mockCanDoActionErrorsTranslator, mockVdsmErrorsTranslator, mockEventBus); frontend.setEventsHandler(mockEventsHandler); frontend.setConstants(mockConstants); frontend.frontendFailureEvent = mockFrontendFailureEvent; frontend.setLoginHandler(mockLoginHandler); when(mockAsyncQuery.getDel()).thenReturn(mockAsyncCallback); }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate().getTemplateType()) != (org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE)) { org.ovirt.engine.core.bll.VmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().getVmTemplateData(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVdsGroup().getcompatibility_version()); } if ((org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate()) != null) { org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmStaticDAO().incrementDbGeneration(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate().getId()); updateOriginalTemplateNameOnDerivedVms(); UpdateVmTemplate(); updateWatchdog(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().getVmTemplateData().getId()); <START_MOD>updateGraphicsDevice(); <END_MOD>checkTrustedService(); org.ovirt.engine.core.bll.UpdateVmTemplateCommand.setSucceeded(true); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Snapshot.class, to = org.ovirt.engine.api.model.Snapshot.class) public static org.ovirt.engine.api.model.Snapshot map(org.ovirt.engine.core.common.businessentities.Snapshot entity, org.ovirt.engine.api.model.Snapshot template) { org.ovirt.engine.api.model.Snapshot model = (template != null) ? template : new org.ovirt.engine.api.model.Snapshot(); model.setId(entity.getId().toString()); if ((entity.getDescription()) != null) { model.setDescription(entity.getDescription()); } if ((entity.getCreationDate()) != null) { model.setDate(org.ovirt.engine.api.restapi.types.DateMapper.map(entity.getCreationDate(), null)); } if ((entity.getStatus()) != null) { model.setSnapshotStatus(org.ovirt.engine.api.restapi.types.SnapshotMapper.map(entity.getStatus(), null)); } if ((entity.getType()) != null) { model.setSnapshotType(org.ovirt.engine.api.restapi.types.SnapshotMapper.map(entity.getType(), null)); } if (<START_MOD>entity.containsMemory()<END_MOD>) { model.setPersistMemorystate(<START_MOD>true<END_MOD>); } return model; }
public java.lang.Integer getVmMigrating() { return mVdsDynamic.getVmMigrating(); }
<START_MOD><T extends org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> java.util.Map<org.ovirt.engine.core.compat.Guid, T> loadEntities(java.lang.Class<T> type, java.lang.String fixtureName, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache) throws java.io.IOException, java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.NoSuchFieldException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException { java.util.Map<org.ovirt.engine.core.compat.Guid, T> entities = new java.util.HashMap<>(); java.io.InputStream inputStream = getClass().getResourceAsStream(("/scheduling/" + fixtureName)); java.io.BufferedReader bufferedReader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream)); java.lang.String header = bufferedReader.readLine(); java.lang.String[] fields = header.split(","); java.lang.String line = bufferedReader.readLine(); while (line != null) { T entity = type.newInstance(); java.lang.String[] values = line.split(","); for (int i = 0; i < (java.lang.Math.min(values.length, fields.length)); i++) { java.lang.String value = values[i].trim(); if (value.isEmpty()) { continue; } setField(entity, fields[i], value, cache); } entities.put(entity.getId(), entity); cache.put(entity.getId(), entity); line = bufferedReader.readLine(); } return entities; }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> listPermissionSubjects = new java.util.ArrayList<>(); if (org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.isImageProvided()) { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.<START_MOD>getImageGroupId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_DISK_PROPERTIES)); } else { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.<END_MOD>getParameters().<START_MOD>getStorageDomainId<END_MOD>(), org.ovirt.engine.core.common.VdcObjectType.<START_MOD>Storage<END_MOD>, org.ovirt.engine.core.common.businessentities.ActionGroup.<START_MOD>CREATE_DISK<END_MOD>)); } <START_MOD>return listPermissionSubjects<END_MOD>; }
<START_MOD>private org.ovirt.engine.core.common.businessentities.StoragePool fetchStoragePool(org.ovirt.engine.core.compat.Guid storagePoolId) { return getStoragePoolDao().get(storagePoolId); }<END_MOD>
@java.lang.Override protected boolean canDoAction() {<START_MOD> setUserName(org.ovirt.engine.core.bll.aaa.LoginAdminUserCommand.getParameters().getLoginName());<END_MOD> boolean autheticated = org.ovirt.engine.core.bll.aaa.LoginAdminUserCommand.isUserCanBeAuthenticated(); if (autheticated) { autheticated = org.ovirt.engine.core.bll.aaa.LoginAdminUserCommand.getCurrentUser().isAdmin(); if (!autheticated) { addCanDoActionMessage(VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION); } } if (!autheticated) { org.ovirt.engine.core.bll.aaa.LoginAdminUserCommand.logAutheticationFailure(); } return autheticated; }
<START_MOD>public java.util.List<org.ovirt.engine.core.common.businessentities.network.ExternalSubnet> getSubnets() { return subnets; }<END_MOD>
private org.springframework.jdbc.core.namedparam.MapSqlParameterSource getInsertOrUpdateParams(final org.ovirt.engine.core.common.businessentities.VdsStatic vds) { return getCustomMapSqlParameterSource().addValue("host_name", vds.gethost_name()).addValue("ip", vds.getManagmentIp()).addValue("vds_unique_id", vds.getUniqueID()).addValue("port", vds.getport()).addValue("vds_group_id", vds.getvds_group_id()).addValue("vds_id", vds.getId()).addValue("vds_name", vds.getvds_name()).addValue("server_SSL_enabled", vds.getserver_SSL_enabled()).addValue("vds_type", vds.getvds_type()).addValue("vds_strength", vds.getvds_strength()).addValue("pm_type", vds.getpm_type()).addValue("pm_user", vds.getpm_user()).addValue("pm_password", org.ovirt.engine.core.dao.VdsStaticDAODbFacadeImpl.encryptPassword(vds.getpm_password())).addValue("pm_port", vds.getpm_port()).addValue("pm_options", vds.getpm_options()).addValue("pm_enabled", vds.getpm_enabled()).addValue("otp_validity", vds.getOtpValidity()).addValue("vds_spm_priority", vds.getVdsSpmPriority())<START_MOD>.addValue("fingerprint", vds.getFingerprint())<END_MOD>; }
@java.lang.Override protected void executeQueryCommand(<START_MOD>) { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getDbFacade().getUnregisteredOVFDataDao().getAllForStorageDomain(org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getParameters().getId(), org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getParameters().getName()); if ((org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getParameters().getName()) == "VM"<END_MOD>) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = new java.util.ArrayList<>(); <START_MOD>for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setId(ovf.getVmId()); vm.setName(ovf.getVmName()); vmList.add(vm); } org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setReturnValue(vmList); } else { <END_MOD>java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>VmTemplate> vmTemplates = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.<END_MOD>OvfEntityData<START_MOD> ovf :<END_MOD> entityList<START_MOD>) { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate<END_MOD> = new org.ovirt.engine.core.common.businessentities.<START_MOD>VmTemplate(); vmTemplate<END_MOD>.setId(ovf.getVmId()); <START_MOD>vmTemplate<END_MOD>.setName(ovf.getVmName()); <START_MOD>vmTemplates<END_MOD>.add(<START_MOD>vmTemplate<END_MOD>); } org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setReturnValue(<START_MOD>vmTemplates<END_MOD>); }<START_MOD> }<END_MOD>
<START_MOD>protected java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> getNonBlankBaseTemplates(java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> templates) { java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> baseTemplates = getBaseTemplates(templates); for (org.ovirt.engine.core.common.businessentities.VmTemplate baseTemplate : baseTemplates) { if (Guid.Empty.equals(baseTemplate.getId())) { baseTemplates.remove(baseTemplate); break; } } return baseTemplates; }<END_MOD>
private java.lang.String generateDomainXml() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getNic(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVmDevice(); org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder builder = new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVm(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getVds().getId(), nic, vmDevice, vmInfoBuildUtils, (nic.isPassthrough() ? <START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker<END_MOD>.Collections.singletonMap(nic.getId(), vmDevice.getHostDevice()) : <START_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker<END_MOD>.Collections.emptyMap())); java.lang.String libvirtXml = builder.buildHotplugNic(); java.lang.String prettyLibvirtXml = org.ovirt.engine.core.utils.XmlUtils.prettify(libvirtXml); if (prettyLibvirtXml != null) { log.info( hot-set: {} prettyLibvirtXml); } return libvirtXml; }
@org.junit.Test public void shouldDetectPinnedVM() { invalidVM.setDedicatedVmForVdsList(org.ovirt.engine.core.compat.Guid.newGuid()); invalidVM.setMigrationSupport(org.ovirt.engine.core.bll.validator.PINNED_TO_HOST); assertThat(validator.<START_MOD>checkVmReadyForUpgrade<END_MOD>(invalidVM), hasItem(UPGRADE_ERROR.VM_PINNED_TO_HOSTS)); }
<START_MOD>@java.lang.Override public void removeAllVdsNumaNodeByVdsId(org.ovirt.engine.core.compat.Guid vdsId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_or_vds_guid", vdsId); getCallsHandler().executeModification("DeleteNumaNodeByVmOrVdsId", parameterSource); }<END_MOD>
public boolean add(org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface, org.ovirt.engine.core.bll.context.CompensationContext compensationContext<START_MOD>,<END_MOD> boolean <START_MOD>allocateMac) { boolean <END_MOD>macAdded = false; if (<START_MOD>(!allocateMac) && (<END_MOD>getMacPoolManager().IsMacInUse(iface.getMacAddress()))<START_MOD>)<END_MOD> { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.AddCustomValue("MACAddr", iface.getMacAddress()); logable.AddCustomValue("VmName", iface.getVmName()); log(logable, AuditLogType.MAC_ADDRESS_IS_IN_USE); } else { <START_MOD>if (allocateMac) { iface.setMacAddress(org.ovirt.engine.core.bll.MacPoolManager.getInstance().allocateNewMac()); } <END_MOD>macAdded = getMacPoolManager().AddMac(iface.getMacAddress()); } getVmNetworkInterfaceDAO().save(iface); getVmNetworkStatisticsDAO().save(iface.getStatistics()); compensationContext.snapshotNewEntity(iface); compensationContext.snapshotNewEntity(iface.getStatistics()); return macAdded; }
@java.lang.Override public boolean match(org.ovirt.engine.core.common.action.VdcReturnValueBase source) { return source.<START_MOD>getValidate<END_MOD>(); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__ATTACH_ACTION_TO); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__VM_DISK); }
private void refreshServerData(org.ovirt.engine.core.common.businessentities.VDSGroup cluster, org.ovirt.engine.core.common.businessentities.VDS upServer, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> existingServers) { if (cluster.supportsVirtService()) { log.debugFormat( cluster {0} supports virt service as well, it servers will not be synced with glusterfs cluster.getname()); return; } acquireLock(cluster.getId()); try { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo> fetchedServers = fetchServers(cluster, upServer, existingServers); if (fetchedServers != null) { removeDetachedServers(existingServers, fetchedServers); } } <START_MOD>catch (java.lang.Exception e) { log.errorFormat( while refreshing server data for cluster {0} from database! cluster.getname(), e); } <END_MOD>finally { releaseLock(cluster.getId()); } }
<START_MOD>protected void updateIteration() { refreshIteration = ((refreshIteration)++) % (org.ovirt.engine.core.vdsbroker.PollVMStatsRefresher.NUMBER_VMS_REFRESHES_BEFORE_SAVE); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.authentication.DirectoryUser findUser(java.lang.String name) { org.ovirt.engine.core.common.utils.ExternalId id = new org.ovirt.engine.core.common.utils.ExternalId(name.getBytes()); return new org.ovirt.engine.core.authentication.DirectoryUser(this, id, name); }<END_MOD>
@org.junit.Test public void onlyOutboundPeakPresent() { qos.setOutboundPeak(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_MEDIUM); valuesPresentTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NETWORK_QOS_MISSING_VALUES)); }
private org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid rootCommandId, boolean enableCallback) { return org.ovirt.engine.core.common.businessentities.CommandEntity.buildCommandEntity(<START_MOD>getContext().getEngineContext().getSessionId(), <END_MOD>org.ovirt.engine.core.bll.CommandBase.getUserId(), getCommandId(), ((getParameters().getParentParameters()) == null ? org.ovirt.engine.core.compat.Guid.Empty : getParameters().getParentParameters().getCommandId()), rootCommandId, (((getExecutionContext()) == null) || ((getExecutionContext().getJob()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getJob().getId()), (((getExecutionContext()) == null) || ((getExecutionContext().getStep()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getStep().getId()), getActionType(), getParameters(), commandStatus, enableCallback, getReturnValue(), getCommandData()); }
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String selectedCluster = getSlaveClusters().getSelectedItem(); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumesInCurrentCluster = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>(); if (selectedCluster != null) { volumesInCurrentCluster = getVolumesInCluster(selectedCluster, getVolumeList()); } if ((volumesInCurrentCluster.size()) > 0) { getSlaveVolumes().setItems(volumesInCurrentCluster, volumesInCurrentCluster.get(0)); } else { getSlaveVolumes().setItems(volumesInCurrentCluster); } }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> getAllForEntity(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userID, <START_MOD>java.lang.String engineSessionId, <END_MOD>boolean isFiltered) { return getAllForEntity(id, userID, <START_MOD>engineSessionId, <END_MOD>isFiltered, false); }
public static java.util.<START_MOD>List<END_MOD><<START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String<END_MOD>> Get64bitOsTypes() { org.ovirt.engine.ui.uicommonweb.dataprovider.<START_MOD>AsyncReturnValue<java<END_MOD>.<START_MOD>util.List<java.lang.String>><END_MOD> <START_MOD>asyncReturnValue = new<END_MOD> org.ovirt.engine.ui.uicommonweb.dataprovider.<START_MOD>AsyncReturnValue<<END_MOD>java.util.<START_MOD>List<END_MOD><<START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String><END_MOD>>(<START_MOD>);<END_MOD> org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>frontend<END_MOD>.<START_MOD>Frontend<END_MOD>.<START_MOD>RunQuery(VdcQueryType<END_MOD>.<START_MOD>OsRepository<END_MOD>, <START_MOD>new<END_MOD> org.ovirt.engine.ui.uicommonweb.dataprovider.<START_MOD>OsQueryParameters(OsRepositoryVerb<END_MOD>.<START_MOD>Get64BitsOSs), asyncReturnValue); return asyncReturnValue.get()<END_MOD>; }
@javax.ws.rs.Path( (resetemulatedmachine)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
<START_MOD>@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.storage.StorageServerConnectionExtension connFromParams = org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionExtensionCommand.getParameters().getStorageServerConnectionExtension(); if ((getConnectionExtension(connFromParams.getId())) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_EXTENSION_DOES_NOT_EXIST); } return true; }<END_MOD>
<START_MOD>public static boolean isActionSignature(org.ovirt.api.metamodel.concepts.Method method) { return (((method.getBase()) != null) && (!(method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.ADD)))) && (!(method.getBase().getName().equals(org.ovirt.api.metamodel.tool.util.JaxrsGeneratorUtils.UPDATE))); }<END_MOD>
@org.junit.Test public void testIsDomainExistAndActiveDomainNotUp() { domain.setStatus(StorageDomainStatus.Inactive); assertEquals( failure for inactive domain <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2, validator.isDomainExistAndActive().getMessage()); }
@java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.pools.PoolListModel model = ((org.ovirt.engine.ui.uicommonweb.models.pools.PoolListModel) (target)); if (returnValue != null) { model.setCustomPropertiesKeysList(new java.util.HashMap<org.ovirt.engine.core.compat.Version, java.util.ArrayList<java.lang.String>>()); java.util.HashMap<org.ovirt.engine.core.compat.Version, java.lang.String> dictionary = ((java.util.HashMap<org.ovirt.engine.core.compat.Version, java.lang.String>) (returnValue)); for (java.util.Map.Entry<org.ovirt.engine.core.compat.Version, java.lang.String> keyValuePair : dictionary.entrySet()) { <START_MOD>java.lang.String[] split =<END_MOD> keyValuePair.getValue().split("[;]", (-1))<START_MOD>; if (((split.length) == 1) && (((split[0]) == null) || (split[0].isEmpty()))<END_MOD>) { model.getCustomPropertiesKeysList().<START_MOD>put(keyValuePair.getKey(), null); } else { model.getCustomPropertiesKeysList().put(keyValuePair.getKey(), new java.util.ArrayList<java.lang.String>()); for (java.lang.String s : split) { model.getCustomPropertiesKeysList().<END_MOD>get(keyValuePair.getKey()).add(s); } } } }<START_MOD> }<END_MOD>
protected void setDefaultSelectedProtocol() { java.util.List<org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol> allProtocols = org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.<START_MOD>getProtocolsByPriority<END_MOD>(); if ((selectedProtocol) != null) { allProtocols.remove(selectedProtocol); allProtocols.add(0, selectedProtocol); } for (org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol protocol : allProtocols) { if (canSelectProtocol(protocol)) { selectProtocol(protocol); break; } } }
<START_MOD>@java.lang.Override public org.ovirt.engine.api.resource.externalhostproviders.KatelloErrataResource getKatelloErrataResource() { return inject(new org.ovirt.engine.api.restapi.resource.externalhostproviders.BackendHostKatelloErrataResource(id)); }<END_MOD>
<START_MOD>private boolean isDiskValidForStorage(org.ovirt.engine.core.common.businessentities.Disk disk, org.ovirt.engine.core.common.businessentities.StorageDomain storage) { if ((disk.isShareable()) && (storage.getStorageType().equals(StorageType.GLUSTERFS))) { return false; } return true; }<END_MOD>
@org.ovirt.engine.ui.webadmin.DefaultStringValue( <START_MOD>Vm<END_MOD> java.lang.String <START_MOD>newVm<END_MOD>();
<START_MOD>@java.lang.Override protected boolean isGhost(org.ovirt.engine.ui.uicommonweb.models.macpool.MacRangeModel value) { return (value.getLeftBound().getEntity().isEmpty()) || (value.getRightBound().getEntity().isEmpty()); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.businessentities.network.NetworkCluster mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network.NetworkCluster entity = new org.ovirt.engine.core.common.businessentities.network.NetworkCluster(); entity.setClusterId(getGuidDefaultEmpty(rs, "cluster_id")); entity.setNetworkId(getGuidDefaultEmpty(rs, "network_id")); entity.setStatus(org.ovirt.engine.core.common.businessentities.network.NetworkStatus.forValue(rs.getInt("status"))); entity.setDisplay(rs.getBoolean("is_display")); entity.setRequired(rs.getBoolean("required")); entity.setMigration(rs.getBoolean("migration")); <START_MOD>entity.setGluster(rs.getBoolean("gluster")); <END_MOD>return entity; }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> returnValue = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().getAllForStorageDomain(org.ovirt.engine.core.bll.GetVmTemplatesFromStorageDomainQuery.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.GetVmTemplatesFromStorageDomainQuery.getUserID(), org.ovirt.engine.core.bll.GetVmTemplatesFromStorageDomainQuery.getParameters().isFiltered()); for (org.ovirt.engine.core.common.businessentities.VmTemplate template : returnValue) { org.ovirt.engine.core.bll.VmTemplateHandler.UpdateDisksFromDb(template); java.util.Collections.sort(template.getDiskList(), new org.ovirt.engine.core.common.businessentities.<START_MOD>comperators.<END_MOD>ImagesComparerByName()); } java.util.Collections.sort(returnValue, java.util.Collections.reverseOrder(new org.ovirt.engine.core.common.businessentities.<START_MOD>comperators.<END_MOD>VmTemplateComparerByDiskSize())); org.ovirt.engine.core.bll.GetVmTemplatesFromStorageDomainQuery.getQueryReturnValue().setReturnValue(returnValue); }
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId != null; if (shouldSetNewMacPoolOnAllClusters) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { this.<START_MOD>moveMacs<END_MOD>.updateClusterAndMoveMacs(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); } } }
private <START_MOD>void<END_MOD> connectStorageServer(org.ovirt.engine.core.common.businessentities.StorageType type, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections) { if ((connections != null) && ((connections.size()) > 0)) { java.util.Map<java.lang.String, java.lang.String> retValues = ((java.util.HashMap<java.lang.String, java.lang.String>) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ConnectStorageServer, new org.ovirt.engine.core.common.vdscommands.ConnectStorageServerVDSCommandParameters(getVds().getId(), getStoragePool().getId(), type, connections)).getReturnValue())); } }
private org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue fence(org.ovirt.engine.core.common.businessentities.FenceAgent fenceAgent, int retries) { org.ovirt.engine.core.bll.FenceExecutor fenceExecutor = <START_MOD>getFenceExecutor<END_MOD>(); org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue fenceExecutionResult = fenceExecutor.fence(getAction(), fenceAgent); if (wasSkippedDueToStatus(fenceExecutionResult)) { log.info( to {} host using fence agent '{}' skipped, host is already at the requested state. getAction().name().toLowerCase(), fenceAgent.getId()); } else { if (fenceExecutionResult.getSucceeded()) { boolean requiredStatusAchieved = waitForStatus(); int i = 0; while ((!requiredStatusAchieved) && (i < retries)) { fenceExecutionResult = fenceExecutor.fence(getAction(), fenceAgent); requiredStatusAchieved = waitForStatus(); i++; } if (requiredStatusAchieved) { handleSpecificCommandActions(); } else { auditFailure(); } fenceExecutionResult.setSucceeded(requiredStatusAchieved); } else { logAgentFailure(fenceExecutionResult); } } return fenceExecutionResult; }
public boolean validate() { if (<START_MOD>(<END_MOD>getIsAvailable()) <START_MOD>&& (getIsChangable())) { getPluginType().validateSelectedItem<END_MOD>(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.<START_MOD>NotEmptyValidation() }); getInterfaceMappings<END_MOD>().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.<START_MOD>InterfaceMappingsValidation() }); getQpidHost<END_MOD>().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.<START_MOD>HostAddressValidation(true) }); getQpidPort().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.<END_MOD>IntegerValidation(org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.NETWORK_MIN_LEGAL_PORT, org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.NETWORK_MAX_LEGAL_PORT) }); setIsValid((((<START_MOD>(getPluginType().getIsValid()) && (<END_MOD>getInterfaceMappings().getIsValid())<START_MOD>)<END_MOD> && (getQpidHost().getIsValid())) && (getQpidPort().getIsValid()))); } return getIsValid(); }
<START_MOD>public boolean isEmpty() { return (((getOutAverageLinkshare()) == null) && ((getOutAverageUpperlimit()) == null)) && ((getOutAverageRealtime()) == null); }<END_MOD>
<START_MOD>private java.lang.String showSpiceConsole(org.ovirt.engine.ui.uicommonweb.models.ConsoleAwareModel model) { if (consoleUtils.canOpenSpiceConsole(model)) { model.getDefaultConsoleModel().getConnectCommand().Execute(); } else if (!(consoleUtils.isSpiceAvailable())) { return createErrorMessage(model, "SPICE"); } return null; }<END_MOD>
private void addQuotaToMemoryQuotaList(org.ovirt.engine.core.common.businessentities.QuotaUsagePerUser quotaPerUserUsageEntity) { org.ovirt.engine.ui.userportal.widget.QuotaProgressBar memoryQuotaProgressBar = new org.ovirt.engine.ui.userportal.widget.QuotaProgressBar(<START_MOD>org.ovirt.engine.ui.userportal.section.main.view.tab.extended.SideTabExtendedResourceView.templates, quotaPerUserUsageEntity, <END_MOD>QuotaProgressBar.QuotaType.MEM); addQuotaRow(memoryQuotasList, quotaPerUserUsageEntity.getQuotaName(), memoryQuotaProgressBar); }
public void updateRunTimeDynamicData(org.ovirt.engine.core.common.businessentities.VmDynamic vm, org.ovirt.engine.core.compat.Guid vdsId, java.lang.String vdsName) { setStatus(vm.getStatus()); setRunOnVds(vdsId); setRunOnVdsName(vdsName); setVmHost(vm.getVmHost()); setVmIp(vm.getVmIp()); setVmFQDN(vm.getVmFQDN()); if ((vm.getCurrentCd()) != null) { setCurrentCd(vm.getCurrentCd()); } setAppList(vm.getAppList()); setGuestOs(vm.getGuestOs()); setDisplayType(vm.getDisplayType()); getDynamicData().setVncKeyboardLayout(vm.getVncKeyboardLayout()); setKvmEnable(vm.getKvmEnable()); setAcpiEnable(vm.getAcpiEnable()); setGuestCurrentUserName(vm.getGuestCurrentUserName()); setWin2kHackEnable(vm.getWin2kHackEnable()); setUtcDiff(vm.getUtcDiff()); setExitStatus(vm.getExitStatus()); setExitMessage(vm.getExitMessage()); setExitReason(vm.getExitReason()); setClientIp(vm.getClientIp()); setVmPauseStatus(vm.getPauseStatus()); setLastWatchdogEvent(vm.getLastWatchdogEvent()); setGuestCpuCount(vm.getGuestCpuCount()); getGraphicsInfos().putAll(vm.getGraphicsInfos()); }
private void execute(org.ovirt.engine.core.ldap.LdapProviderType ldapProviderType, java.lang.String domain) { java.util.Hashtable<java.lang.String, java.lang.String> env = new java.util.Hashtable<java.lang.String, java.lang.String>(); <START_MOD>int timeLimit = <END_MOD>(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.LDAPQueryTimeout)) * 1000<START_MOD>; env.put("com.sun.jndi.ldap.connect.timeout", java.lang.Long.toString(timeLimit)); initContextVariables(env); javax.naming.directory.Attributes results = null; javax.naming.directory.DirContext ctx = null; try { ctx = createContext(env); org.ovirt.engine.core.bll.adbroker.LdapQueryData ldapQueryData = new org.ovirt.engine.core.bll.adbroker.LdapQueryDataImpl(); ldapQueryData.setLdapQueryType(LdapQueryType.rootDSE); ldapQueryData.setDomain(domain); org.ovirt.engine.core.bll.adbroker.LdapQueryExecution queryExecution = org.ovirt.engine.core.bll.adbroker.LdapQueryExecutionBuilderImpl.getInstance().build(ldapProviderType, ldapQueryData); javax.naming.directory.SearchControls searchControls = new javax.naming.directory.SearchControls(); searchControls.setReturningAttributes(queryExecution.getReturningAttributes()); searchControls.setSearchScope(queryExecution.getSearchScope()); searchControls.setReturningObjFlag(true); searchControls.setTimeLimit(timeLimit<END_MOD>); javax.naming.NamingEnumeration<javax.naming.directory.SearchResult> search = ctx.search(queryExecution.getBaseDN(), queryExecution.getFilter(), searchControls); try { results = search.next().getAttributes(); } finally { search.close(); } } catch (javax.naming.NamingException e) { org.ovirt.engine.core.bll.adbroker.GetRootDSE.log.errorFormat( to query rootDSE for LDAP server {0} due to {1} ldapURI, e.getMessage()); } finally { closeContext(ctx); } attributes = results; }
protected void validateDiskForCreation(org.ovirt.engine.api.model.Disk disk) { validateParameters(disk, 2, "interface"); if (org.ovirt.engine.api.restapi.resource.utils.DiskResourceUtils.isLunDisk(disk)) { validateParameters(disk.getLunStorage(), 3, "type"); org.ovirt.engine.api.model.StorageType storageType = org.ovirt.engine.api.model.StorageType.fromValue(disk.getLunStorage().getType()); if ((storageType != null) && (storageType == (org.ovirt.engine.api.model.StorageType.ISCSI))) { validateParameters(disk.getLunStorage().getLogicalUnits().<START_MOD>getLogicalUnits().<END_MOD>get(0), 3, "address", "target", "port", "id"); } } else if ((disk.isSetLunStorage()) && (disk.getLunStorage().getLogicalUnits().<START_MOD>getLogicalUnits().<END_MOD>isEmpty())) { throw new org.ovirt.engine.api.restapi.resource.WebFaultException(null, localize(Messages.INCOMPLETE_PARAMS_REASON), localize(Messages.INCOMPLETE_PARAMS_DETAIL_TEMPLATE, "LogicalUnit", "", "add"), Response.Status.BAD_REQUEST); } else { validateParameters(disk, 2, "provisionedSize|size", "format"); } validateEnums(org.ovirt.engine.api.model.Disk.class, disk); }
<START_MOD>public java.lang.String asJson() { java.util.List<java.lang.Object> both = new java.util.ArrayList<>(); both.add(init); both.add(convergence); try { return org.ovirt.engine.core.utils.JsonHelper.objectToJson(both, false); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } }<END_MOD>
<START_MOD>@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeGeoRepCreateModel object) { driver.edit(object); selectVolumes.setCommand(object.getSelectVolumesCommand()); selectVolumes.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { object.getSelectVolumesCommand().execute(); } }); }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> domains = ((org.ovirt.engine.core.common.<START_MOD>queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue(); for (org.ovirt.engine.core.common.<END_MOD>businessentities.StorageDomain domain : domains) { java.lang.String guid = ((domain.getStoragePoolId()) != null) ? domain.getStoragePoolId().toString() : Guid.Empty.toString(); domain.setQueryableId((((domain.getId()) + "_") + guid)); } setItems(domains); setIsEmpty(((getItems().size()) == 0)); }
private boolean findDefaultManagementNetwork() { managementNetwork = defaultManagementNetworkFinder.findDefaultManagementNetwork(org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroup().getStoragePoolId()); if ((managementNetwork) == null) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } return true; }
<START_MOD>private void spyValidator() { validator = spy(new org.ovirt.engine.core.bll.validator.storage.AttachDomainValidator(storageDomain, storagePool)); domainValidator = spy(new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(storageDomain)); poolValidator = spy(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(storagePool)); doReturn(storagePoolIsoMapDAO).when(domainValidator).getStoragePoolIsoMapDao(); doReturn(poolValidator).when(validator).getPoolValidator(); doReturn(domainValidator).when(validator).getDomainValidator(); doReturn(storagePoolDAO).when(validator).getStoragePoolDao(); doReturn(storageDomainDAO).when(validator).getStorageDomainDao(); }<END_MOD>
protected boolean proceedStorageDomainTreatmentByDomainType(final org.ovirt.engine.core.common.businessentities.StorageDomain newMaster, final boolean lockNewMaster) { if (newMaster == null) { return true; } newMaster.getStorageStaticData().setLastTimeUsedAsMaster(java.lang.System.currentTimeMillis()); if ((newMaster.getStorageDomainType()) != (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master)) { org.ovirt.engine.core.bll.storage<START_MOD>.domains<END_MOD>.DeactivateStorageDomainCommand.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Object>() { @java.lang.Override public java.lang.Object runInTransaction() { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap newMasterMap = newMaster.getStoragePoolIsoMapData(); getCompensationContext().snapshotEntityUpdated(newMaster.getStorageStaticData()); newMaster.setStorageDomainType(StorageDomainType.Master); if (lockNewMaster) { newMasterMap.setStatus(StorageDomainStatus.Unknown); getCompensationContext().snapshotEntityStatus(newMasterMap); newMaster.setStatus(StorageDomainStatus.Locked); getStoragePoolIsoMapDao().updateStatus(newMasterMap.getId(), newMasterMap.getStatus()); } updateStorageDomainStaticData(newMaster.getStorageStaticData()); getCompensationContext().snapshotEntityUpdated(getStorageDomain().getStorageStaticData()); getStorageDomain().setStorageDomainType(StorageDomainType.Data); updateStorageDomainStaticData(getStorageDomain().getStorageStaticData()); getCompensationContext().stateChanged(); return null; } }); } else { updateStorageDomainStaticData(newMaster.getStorageStaticData()); } org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>DeactivateStorageDomainCommand.updateStoragePoolMasterDomainVersionInDiffTransaction(); return false; }
private void flush() { provider.setName(((java.lang.String) (name.getEntity()))); provider.setType(((org.ovirt.engine.core.common.businessentities.ProviderType) (type.getSelectedItem()))); provider.setDescription(((java.lang.String) (description.getEntity()))); provider.setUrl(((java.lang.String) (url.getEntity()))); if (isTypeOpenStackNetwork()) { org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties properties = new org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties(); properties.setPluginType(org.ovirt.engine.ui.uicommonweb.models.providers.NeutronPluginTranslator.getPluginNameForDisplayString(((java.lang.String) (getPluginType().getSelectedItem())))); properties.setAgentConfiguration(getNeutronAgentModel().flush()); provider.setAdditionalProperties(properties); } <START_MOD>boolean authenticationRequired = ((java.lang.Boolean) (requiresAuthentication.getEntity())); provider.setRequiringAuthentication(authenticationRequired); if (authenticationRequired) { provider.setUsername(((java.lang.String) (getUsername().getEntity()))); provider.setPassword(((java.lang.String) (getPassword().getEntity()))); if (getTenantName().getIsAvailable()) { org.ovirt.engine.core.common.businessentities.TenantProviderProperties properties = ((org.ovirt.engine.core.common.businessentities.TenantProviderProperties) (provider.getAdditionalProperties())); if (properties == null) { properties = new org.ovirt.engine.core.common.businessentities.TenantProviderProperties(); provider.setAdditionalProperties(properties); } properties.setTenantName(((java.lang.String) (getTenantName().getEntity()))); } } <END_MOD>else <START_MOD>{ provider.setUsername(null); provider.setPassword(null); <END_MOD>if (<START_MOD>getTenantName().getIsAvailable()) { org.ovirt.engine.core.common.businessentities.TenantProviderProperties<END_MOD> properties = <START_MOD>((org.ovirt.engine.core.common.businessentities.TenantProviderProperties) (provider.getAdditionalProperties())<END_MOD>); if (<START_MOD>properties != null) { properties<END_MOD>.setTenantName(<START_MOD>null); } } } }<END_MOD>
private static void assertDiskDescriptionDecoding(org.ovirt.engine.core.common.businessentities.storage.Disk disk) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.storage.Disk diskToEnrich = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandler.getInstance().enrichDiskByJsonDescription(org.ovirt.engine.core.bll<START_MOD>.storage.disk<END_MOD>.MetadataDiskDescriptionHandler.getInstance().generateJsonDiskDescription(disk), diskToEnrich); assertEquals(disk, diskToEnrich); }
private void sendToDb(org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBroker broker, org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryUnit discovery, org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit, org.ovirt.engine.core.common.scheduling.PolicyUnitType type) { org.ovirt.engine.core.common.scheduling.PolicyUnit policy = createFromDiscoveryUnit(discovery, type); if ((policyUnit != null) && ((policyUnit.getBroker()) != null)) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn( unit {} already reported by broker {} policyUnit.getName(), broker.getId()); } policy.setBroker(broker.getId()); if ((policyUnit != null) && ((policyUnit.getId()) != null)) { policy.setId(policyUnit.getId()); policyUnitDao.update(policy); } else { policy.setId(org.ovirt.engine.core.compat.Guid.newGuid()); policyUnitDao.save(policy); } }
@java.lang.Override protected void syncSearch() { super.syncSearch(); org.ovirt.engine.ui.frontend.AsyncQuery<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD> asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback<START_MOD><org.ovirt.engine.core.common.queries.VdcQueryReturnValue><END_MOD>() { @java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { setItems(((java.util.Collection) (returnValue.getReturnValue()))); } }); org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId()); params.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAttachedClustersByClusterPolicyId, params, asyncQuery); setIsQueryFirstTime(false); }
private void revertPreviousHandlers() { getParameters().decrementExecutionIndex(); if (<START_MOD>canRevertTasks<END_MOD>()) { logRollbackedTask(); getParameters().setExecutionReason(CommandExecutionReason.ROLLBACK_FLOW); getCurrentTaskHandler().compensate(); if (!(hasRevertTask())) { revertPreviousHandlers(); } } <START_MOD>else { setSucceeded(true); <END_MOD>}<START_MOD> }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> getAllByStoragePoolId(org.ovirt.engine.core.compat.Guid spId) { return getCallsHandler().executeReadList("GetAllFromVmStaticByStoragePoolId", org.ovirt.engine.core.dao.<START_MOD>VmStaticDAOImpl<END_MOD>.VMStaticRowMapper.instance, getCustomMapSqlParameterSource().addValue("sp_id", spId)); }
<START_MOD>public boolean containsAction(java.lang.String actionName) { if ((actions) != null) { return actions.contains(actionName); } return false; }<END_MOD>
private void clearVm(org.ovirt.engine.core.common.businessentities.VM vm<START_MOD>, java.lang.String exitMessage<END_MOD>) { if ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) { if ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Suspended)) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().InternalSetVmStatus(vm, VMStatus.Down); <START_MOD>vm.setExitStatus(VmExitStatus.Error); vm.setExitMessage(exitMessage); <END_MOD>} AddVmDynamicToList(vm.getDynamicData()); AddVmStatisticsToList(vm.getStatisticsData()); AddVmInterfaceStatisticsToList(vm.getInterfaces()); if (!(org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().IsVmInAsyncRunningList(vm.getId()))) { _vmsMovedToDown.add(vm.getId()); } } }
@org.junit.Test public void testNonSecuredEventMailSender() { org.ovirt.engine.core.common.businessentities.EventAuditLogSubscriber eventData = new org.ovirt.engine.core.common.businessentities.EventAuditLogSubscriber(); eventData.setlog_time(new java.util.Date()); eventData.setevent_type(0); eventData.setuser_name( test user name eventData.setvm_name( fine test VM eventData.setvds_name( fine test host eventData.setmethod_address("mailtest.redhat@gmail.com"); eventData.setvm_template_name( test template eventData.setstorage_pool_name( test storage pool name eventData.setstorage_domain_name( test storage pool domain eventData.setseverity(3); org.ovirt.engine.core.notifier.utils.NotificationProperties.setDefaults("src/test/resources/conf/notifier-mail-test-plain.conf", "src/test/resources/conf/missing.conf"); org.ovirt.engine.core.notifier.utils.sender.mail.<START_MOD>eventMailSender<END_MOD> mailSender = new org.ovirt.engine.core.notifier.utils.sender.mail.<START_MOD>eventMailSender<END_MOD>(org.ovirt.engine.core.notifier.utils.NotificationProperties.getInstance()); eventData.setmessage( test message to be sent via non-secured mode org.ovirt.engine.core.notifier.utils.sender.EventSenderResult sentResult = null; try { sentResult = mailSender.send(eventData, null); } catch (java.lang.Exception e) { sentResult = new org.ovirt.engine.core.notifier.utils.sender.EventSenderResult(); sentResult.setSent(false); } assertTrue(sentResult.isSent()); }
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultStringValue("Only available when the VM is UP or starting") java.lang.String onlyUpVmsCanIncludeMemory();<END_MOD>
<START_MOD>protected void updateCompatibilityVersion() { org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster dataCenterWithCluster = getModel().getDataCenterWithClustersList().getSelectedItem(); if (dataCenterWithCluster == null) { return; } final<END_MOD> org.ovirt.engine.core.<START_MOD>common.businessentities.StoragePool dataCenter = dataCenterWithCluster.getDataCenter(); if (dataCenter == null) { return; } org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.setModel(this); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.ArrayList<org.ovirt.engine.core.<END_MOD>compat.Version<START_MOD>> versions = ((java.util.ArrayList<org.ovirt.engine.core.compat.Version>) (result)); versions.add(0, null); org.ovirt.engine.core.compat.Version selectedVersion; selectedVersion = getModel().getCompatibilityVersion().getSelectedItem(); if ((selectedVersion != null) && (versions.contains(selectedVersion))) { getModel().getCompatibilityVersion().setItems(versions, selectedVersion); } else { getModel().getCompatibilityVersion().setItems(versions); } } }; <END_MOD>org.ovirt.engine.ui.uicommonweb.<START_MOD>dataprovider.AsyncDataProvider.getInstance().getDataCenterVersions(asyncQuery, dataCenter.getId()); }<END_MOD>
private static void loadExtensions(org.ovirt.engine.exttool.core.ModuleService moduleService, java.util.Map<java.lang.String, java.lang.Object> argMap) { org.ovirt.engine.core.extensions.mgr.ExtensionsManager extensionsManager = new org.ovirt.engine.core.extensions.mgr.ExtensionsManager(); <START_MOD>moduleService.getContext().put(ModuleService.EXTENSION_MANAGER, extensionsManager); <END_MOD>java.util.Map<java.lang.String, org.ovirt.engine.core.extensions.mgr.ExtensionProxy> proxies = moduleService.getContext().get(ModuleService.EXTENSIONS_MAP); java.util.List<java.io.File> files = ((java.util.List<java.io.File>) (argMap.get("extension-file"))); if (files == null) { files = org.ovirt.engine.exttool.core.ExtensionsToolExecutor.listFiles(((java.lang.String) (argMap.get("extensions-dir"))).replace("@ENGINE_ETC@", org.ovirt.engine.exttool.core.ExtensionsToolExecutor.ENGINE_ETC), "properties"); } for (java.io.File f : files) { <START_MOD>org.ovirt.engine.exttool.core.ExtensionsToolExecutor.logger.debug( extension file '{}' f.getName()); try { <END_MOD>proxies.put(extensionsManager.load(f), null);<START_MOD> } catch (java.lang.Exception ex) { org.ovirt.engine.exttool.core.ExtensionsToolExecutor.logger.error(ex.getMessage()); org.ovirt.engine.exttool.core.ExtensionsToolExecutor.logger.debug("Exception:", ex); }<END_MOD> } for (java.util.Map.Entry<java.lang.String, org.ovirt.engine.core.extensions.mgr.ExtensionProxy> entry : proxies.entrySet()) { extensionsManager.initialize(entry.getKey()); entry.setValue(extensionsManager.getExtensionByName(entry.getKey())); <START_MOD>org.ovirt.engine.exttool.core.ExtensionsToolExecutor.logger.debug( '{}' initilized entry.getKey()); <END_MOD>} }
private org.ovirt.engine.core.dao.<START_MOD>profiles<END_MOD>.VnicProfileViewDao getVnicProfileViewDao() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVnicProfileViewDao(); }
<START_MOD>public static java.lang.String createJWT(javax.servlet.http.HttpServletRequest request, org.ovirt.engine.core.sso.utils.SsoSession ssoSession, java.lang.String clientId, java.lang.String clientSecret) throws com.nimbusds.jose.JOSEException, java.security.NoSuchAlgorithmException { com.nimbusds.jose.JWSSigner signer = new com.nimbusds.jose.crypto.MACSigner(clientSecret); com.nimbusds.jwt.SignedJWT signedJWT = new com.nimbusds.jwt.SignedJWT(new com.nimbusds.jose.JWSHeader(com.nimbusds.jose.JWSAlgorithm.HS256), org.ovirt.engine.core.sso.utils.SsoUtils.createJWTClaimSet(request, ssoSession, clientId)); signedJWT.sign(signer); return signedJWT.serialize(); }<END_MOD>
@java.lang.Override public void edit(<START_MOD>final <END_MOD>org.ovirt.engine.ui.uicommonweb.models.<START_MOD>profiles.NetworkProfilesModel<END_MOD> model) { <START_MOD>super.<END_MOD>edit(model<START_MOD>); model.getDcId().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev<END_MOD>, <START_MOD>java.lang.Object sender<END_MOD>, <START_MOD>org.ovirt.engine.ui.uicompat.EventArgs<END_MOD> <START_MOD>args) { init(model<END_MOD>); }<START_MOD> }); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Time java.lang.String bootTimeHostGeneral();
private void extractRemovedNetworks() { for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : getExistingIfaces().values()) { java.lang.String <START_MOD>networkName<END_MOD> = iface.getNetworkName(); if ((org.apache.commons.lang.StringUtils.isNotBlank(<START_MOD>networkName<END_MOD>)) && (!(attachedNetworksNames.contains(<START_MOD>networkName<END_MOD>)))) { removedNetworks.add(<START_MOD>networkName); final<END_MOD> java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(params.getVdsId(), <START_MOD>java.util.Collections.singleton(networkName)<END_MOD>); for (java.lang.String vmName : vmNames) { addViolation(EngineMessage.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, vmName<START_MOD>, org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("networkNames", networkName)); } } } }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Data Center java.lang.String configureDataCenterRoleTree();
<START_MOD>@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.ImportIscsiStorageModel object) { this.model = object; driver.edit(object); iscsiDiscoverTargetsView.edit(object); targetsTable.asEditor().edit(object.getTargets()); storageDomainsTable.asEditor().edit(object.getStorageDomains()); addEventsHandlers(object); }<END_MOD>
<START_MOD>public boolean validate() { if (!(getIsChangable())) { return true; } getAverage().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(0, ((java.lang.Integer) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MaxAverageNetworkQoSValue)))) }); getPeak().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(0, ((java.lang.Integer) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MaxPeakNetworkQoSValue)))) }); getBurst().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(0, ((java.lang.Integer) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MaxBurstNetworkQoSValue)))) }); setIsValid((((getAverage().getIsValid()) && (getPeak().getIsValid())) && (getBurst().getIsValid()))); return getIsValid(); }<END_MOD>
<START_MOD>private java.util.List<org.ovirt.engine.core.common.businessentities.Network> getNetworks() { if (((org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getstorage_pool_id()) != null) && (!(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getstorage_pool_id().getValue().equals(Guid.Empty)))) { return org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetworkDAO().getAllForDataCenter(org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetwork().getstorage_pool_id().getValue()); } else { return org.ovirt.engine.core.bll.network.dc.AddNetworkCommand.getNetworkDAO().getAll(); } }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult externalNetworkNotDisplay(java.lang.String networkName) { return networkCluster.isDisplay() ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_CANNOT_BE_DISPLAY, java.lang.String.format(org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase.NETWORK_NAME_REPLACEMENT, networkName)) : org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void DomainRecoveredFromProblem(org.ovirt.engine.core.compat.Guid domainId, org.ovirt.engine.core.compat.Guid vdsId, java.lang.String vdsName) {<START_MOD> java.lang.String domainIdTuple = getDomainIdTuple(domainId);<END_MOD> org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.infoFormat( {0} recovered from problem. vds: {1} <START_MOD>domainIdTuple<END_MOD>, vdsName); ClearVds(vdsId, domainId); _domainsInProblem.get(domainId).remove(vdsId); if ((_domainsInProblem.get(domainId).size()) == 0) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.infoFormat(( {0} has recovered from problem. No active host in the DC is reporting it as +   problematic, so clearing the domain recovery timer. <START_MOD>domainIdTuple<END_MOD>); _domainsInProblem.remove(domainId); ClearTimer(domainId); } }
<START_MOD>@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.ImportExportImageModel model) { driver.edit(model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (args instanceof org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs changedArgs = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)); if ("RepoImages".equals(changedArgs.PropertyName)) { if ((model.getRepoImages()) != null) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> repoImageModels = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); for (org.ovirt.engine.core.common.businessentities.RepoImage i : model.getRepoImages()) { repoImageModels.add(new org.ovirt.engine.ui.uicommonweb.models.EntityModel(i)); } imageList.setRowData(repoImageModels); } } } } }); }<END_MOD>
<START_MOD>@java.lang.Override public void setFeedbackLink(java.lang.String feedbackLink) { this.feedbackLink = feedbackLink; if ((feedbackLink != null) && ((feedbackLink.length()) > 0)) { feedbackImage.setVisible(true); } }<END_MOD>
private void saveNewVm(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model) { if ((model.getProgress()) != null) { return; } model.startProgress(null); org.ovirt.engine.core.common.businessentities.VM vm = getcurrentVm(); <START_MOD>vm.setUseLatestVersion(((model.getTemplate().getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.templates.LatestVmTemplate)); org.ovirt.engine.core.common.action.AddVmParameters parameters = new org.ovirt.engine.core.common.action.AddVmParameters(vm); parameters.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap()); parameters.setConsoleEnabled(model.getIsConsoleDeviceEnabled().getEntity()); parameters.setBalloonEnabled(balloonEnabled(model)); parameters.setCopyTemplatePermissions(model.getCopyPermissions().getEntity()); parameters.setSoundDeviceEnabled(model.getIsSoundcardEnabled().getEntity()); parameters.setVirtioScsiEnabled(model.getIsVirtioScsiEnabled().getEntity()); setVmWatchdogToParams(model, parameters); setRngDeviceToParams(model, parameters); setGraphicsDevicesToParams(model, parameters); <END_MOD>if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(model.getVmId().getEntity()))) { <START_MOD>parameters.setNewVmId(new org.ovirt.engine.core.compat.Guid(model.getVmId().getEntity())); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction((model.getProvisioning().getEntity() ? org.ovirt.engine.core.common.action.VdcActionType.AddVmFromTemplate : org.ovirt.engine.core.common.action.VdcActionType.AddVm), parameters, createUnitVmModelNetworkAsyncCallback(<END_MOD>vm<START_MOD>, model), this<END_MOD>); }
@org.junit.Test public void encodeWhenAliasIsTruncated() throws java.io.IOException { java.lang.String alias = org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandlerTest.generateRandomString(200); disk.setDiskAlias(alias); disk.setDiskDescription("DiskDescription"); assertDiskDescriptionMap(disk, org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandlerTest.generateDiskAliasJsonEntry(alias.substring(0, org.ovirt.engine.core.bll.<START_MOD>storage.disk.<END_MOD>MetadataDiskDescriptionHandlerTest.DISK_ALIAS_MAX_LENGTH))); }
protected java.lang.String addToAuditLogErrorMessage(java.lang.String connection, java.lang.String errorCode, java.util.List<org.ovirt.engine.core.common.businessentities.storage_server_connections> connections, org.ovirt.engine.core.common.businessentities.LUNs lun) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); java.lang.String connectionField = (getConnectionDescription(connections, connection)) + (lun == null ? "" : ( (LUN   + (lun.<START_MOD>getLUN_id<END_MOD>())) + ")"); logable.AddCustomValue("Connection", connectionField); java.lang.String translatedError = getTranslatedStorageError(errorCode); logable.AddCustomValue("ErrorCode", translatedError); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.STORAGE_DOMAIN_ERROR); return connectionField; }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.Boolean value<START_MOD>, com.google.gwt.safehtml.shared.SafeHtml tooltipContent<END_MOD>, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.Boolean> valueUpdater) { java.lang.String type = event.getType(); boolean enterPressed = (BrowserEvents.KEYDOWN.equals(type)) && ((event.getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)); if ((BrowserEvents.CHANGE.equals(type)) || enterPressed) { com.google.gwt.dom.client.InputElement input = parent.getFirstChild().cast(); java.lang.Boolean isChecked = input.isChecked(); if (enterPressed && ((handlesSelection()) || (!(dependsOnSelection())))) { isChecked = !isChecked; input.setChecked(isChecked); } if (((value == null ? false : value.booleanValue()) != (isChecked == null ? false : isChecked.booleanValue())) && (!(dependsOnSelection()))) { setViewData(context.getKey(), isChecked); } else { clearViewData(context.getKey()); } if (valueUpdater != null) { valueUpdater.update(isChecked); } } }
@java.lang.Override protected org.ovirt.engine.api.model.VM <START_MOD>doPopulate<END_MOD>(org.ovirt.engine.api.model.VM model, org.ovirt.engine.core.common.businessentities.VM entity) { java.util.Set<org.ovirt.engine.api.common.util.DetailHelper.Detail> details = org.ovirt.engine.api.common.util.DetailHelper.getDetails(getHttpHeaders()); model = addInlineDetails(details, model); if (details.contains(Detail.STATISTICS)) { addInlineStatistics(model); } return model; }
@org.junit.Test public void testUpdateRole() { existingRole.setdescription( is an updated description dao.update(existingRole); org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD> result = dao.get(existingRole.getId()); assertNotNull(result); assertEquals(existingRole, result); }
<START_MOD>private boolean isAuthenticationConfig(org.ovirt.engine.core.extensions.mgr.Configuration config) { java.lang.String serviceValue = config.getString(ExtensionManagerKeys.service.getKeyName()); return (serviceValue != null) && (serviceValue.equalsIgnoreCase(org.ovirt.engine.core.aaa.AuthenticationProfileRepository.AUTHN_SERVICE_NAME)); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.businessentities.VM getVm() { org.ovirt.engine.core.common.businessentities.VM vm = super.getVm(); if (vm != null) { return vm; } vm = org.ovirt.engine.core.bll.lsm.LiveMigrateDisksCommand.getVmDAO().get(getParameters().getVmId()); if (vm != null) { setVm(vm); setVmId(vm.getId()); } return vm; }<END_MOD>
<START_MOD>public org.ovirt.engine.core.common.businessentities.ArchitectureType getArchitecture() { return this.vmStatic.getArchitecture(); }<END_MOD>
<START_MOD>protected void exportOva() { }<END_MOD>
<START_MOD>@java.lang.Override <END_MOD>public <START_MOD>boolean<END_MOD> <START_MOD>equals(java.lang.Object o) { if ((this) == o) return true; if ((o == null) || ((getClass()) != (o.getClass()))) return false; org.ovirt.engine.core.bll.scheduling.arem.AffinityRulesEnforcementPerCluster that = (<END_MOD>(org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>scheduling<END_MOD>.<START_MOD>arem.AffinityRulesEnforcementPerCluster<END_MOD>) <START_MOD>(o));<END_MOD> <START_MOD>return new org<END_MOD>.<START_MOD>apache.commons.lang.builder.EqualsBuilder<END_MOD>().<START_MOD>append<END_MOD>(<START_MOD>clusterId, that.getClusterId()).isEquals(<END_MOD>); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The host network interface (id ${nicId}, name ${nicName}) does not exist.") java.lang.String HOST_NETWORK_INTERFACE_HAVING_ID_AND_NAME_DOES_NOT_EXIST();<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel userPortalListModel = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmPool> pools = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmPool>(); org.ovirt.engine.core.common.queries.VdcQueryReturnValue retValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if ((retValue != null) && (retValue.getSucceeded())) { java.util.List<java.lang.Object> list = ((java.util.ArrayList<java.lang.Object>) (retValue.getReturnValue())); if (list != null) { for (java.lang.Object object : list) { if (object instanceof org.ovirt.engine.core.common.businessentities.VM) { vms.add(((org.ovirt.engine.core.common.businessentities.VM) (object))); } else if (object instanceof org.ovirt.engine.core.common.businessentities.VmPool) { pools.add(((org.ovirt.engine.core.common.businessentities.VmPool) (object))); } } } } <START_MOD>onVmAndPoolLoad<END_MOD>(vms<START_MOD>, <END_MOD>pools); <START_MOD>}<END_MOD>
<START_MOD>protected void updateMemoryBalloon() { if ((getModel().getSelectedCluster()) != null) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel().getSelectedCluster(); boolean hasMemoryBalloon = (cluster.getcompatibility_version().compareTo(new org.ovirt.engine.core.compat.Version(3, 1))) >= 0; getModel().getMemoryBalloonDeviceEnabled().setIsAvailable(hasMemoryBalloon); } }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Label object) { java.lang.String join = join(getHostNames(object), ", "); if (join.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityLabelsView.constants.affinityLabelsNoMembers(); } return join; }<END_MOD>
private void processStoragePoolStatus() { if ((getVds().getSpmStatus()) != (org.ovirt.engine.core.common.businessentities.VdsSpmStatus.None)) { org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolDao().get(getVds().getStoragePoolId()); if ((pool != null) && ((pool.<START_MOD>getStatus<END_MOD>()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational))) { pool.<START_MOD>setStatus<END_MOD>(StoragePoolStatus.NonResponsive); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolDao().updateStatus(pool.getId(), pool.<START_MOD>getStatus<END_MOD>()); org.ovirt.engine.core.bll.storage.StoragePoolStatusHandler.PoolStatusChanged(pool.getId(), pool.<START_MOD>getStatus<END_MOD>()); } } }
@java.lang.Override protected void InitDetailModels() { super.InitDetailModels(); setClusterServiceModel(new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterServiceModel()); <START_MOD>setClusterGlusterHookListModel(new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGlusterHookListModel()); <END_MOD>org.ovirt.engine.core.compat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new org.ovirt.engine.core.compat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); clusterGeneralModel = new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel(); list.add(clusterGeneralModel); list.add(new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterHostListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterVmListModel()); list.add(getClusterServiceModel()); list.add(<START_MOD>getClusterGlusterHookListModel()); list.add(<END_MOD>new org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel()); setDetailModels(list); }
@java.lang.Override protected void executeVmCommand() { createdSnapshotId = org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getSnapshotDao().getId(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId(), SnapshotType.ACTIVE); getParameters().setSnapshotType(determineSnapshotType()); org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getSnapshotDao().updateId(createdSnapshotId, newActiveSnapshotId); setActionReturnValue(createdSnapshotId); org.ovirt.engine.core.bll.memory.MemoryImageBuilder memoryImageBuilder = getMemoryImageBuilder(); freezeVm(); createSnapshotsForDisks(); addSnapshotToDB(createdSnapshotId, memoryImageBuilder); fastForwardDisksToActiveSnapshot(); memoryImageBuilder.build(); boolean pendingAsyncTasks = (!(getTaskIdList().isEmpty())) || (!(org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getCommandId()).isEmpty())); if (!pendingAsyncTasks) { getParameters().setTaskGroupSuccess(true); incrementVmGeneration(); } org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.setSucceeded(true); }
private void updatePanelsVisibility(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel model) { exportPanel.setVisible(((model.getImportSources().getSelectedItem()) == (org.ovirt.engine.ui.uicommonweb.models.vms.ImportSource.EXPORT_DOMAIN))); vmwarePanel.setVisible(((model.getImportSources().getSelectedItem()) == (org.ovirt.engine.ui.uicommonweb.models.vms.ImportSource.VMWARE))); <START_MOD>providersEditor.setVisible(((model.getImportSources().getSelectedItem()) == (org.ovirt.engine.ui.uicommonweb.models.vms.ImportSource.VMWARE))); <END_MOD>}
public synchronized org.ovirt.engine.api.model.RSDL getRSDL()<START_MOD> throws java.io.IOException, java.lang.ClassNotFoundException<END_MOD> { if ((org.ovirt.engine.api.restapi.resource.BackendApiResource.rsdl) == null) { org.ovirt.engine.<START_MOD>api<END_MOD>.<START_MOD>rsdl<END_MOD>.<START_MOD>RsdlManager<END_MOD> <START_MOD>rsdlManager<END_MOD> <START_MOD>=<END_MOD> <START_MOD>new<END_MOD> org.ovirt.engine.api.<START_MOD>rsdl<END_MOD>.<START_MOD>RsdlManager<END_MOD>(); org.ovirt.engine.api.restapi.resource.BackendApiResource.rsdl = <START_MOD>rsdlManager<END_MOD>.<START_MOD>loadRsdl<END_MOD>(); } return org.ovirt.engine.api.restapi.resource.BackendApiResource.rsdl; }
private void saveDataToDb() { if (saveVdsDynamic) { vdsManager.updateDynamicData(vds.getDynamicData()); <START_MOD>} <END_MOD>if (refreshedCapabilities) { vdsManager.updateNumaData(vds); } if (saveVdsStatistics) { org.ovirt.engine.core.common.businessentities.VdsStatistics stat = vds.getStatisticsData(); vdsManager.updateStatisticsData(stat); checkVdsMemoryThreshold(stat); checkVdsCpuThreshold(stat); checkVdsNetworkThreshold(stat); checkVdsSwapThreshold(stat); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics> statistics = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : vds.getInterfaces()) { statistics.add(iface.getStatistics()); } if (!(statistics.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getDbFacade().getInterfaceDao().massUpdateStatisticsForVds(statistics); return null; }); } saveNumaStatisticsDataToDb(); } }
protected boolean checkRemoveEditValidations() { org.ovirt.engine.core.compat.Guid clusterPolicyId = getParameters().getClusterPolicyId(); if (clusterPolicyId == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_POLICY_PARAMETERS_INVALID); } org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy = <START_MOD>schedulingManager<END_MOD>.getClusterPolicy(clusterPolicyId); if (clusterPolicy == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_POLICY_PARAMETERS_INVALID); } if (clusterPolicy.isLocked()) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_POLICY_PARAMETERS_INVALID); } return true; }
<START_MOD>private void initCustomPropertySheet(final org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel iface) { iface.getCustomPropertySheet().getKeyValueLines().getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { customPropertiesSheetEditor.edit(iface.getCustomPropertySheet()); } }); }<END_MOD>
private java.lang.String getClientUrl() { return ((((<START_MOD>((config.getClientProtocol()) + "://")<END_MOD> + (com.google.gwt.user.client.Window.Location.getHost())) + "/ovirt-engine-novnc-main.html?host=") + (<START_MOD>config.<END_MOD>getProxyHost())) + "&port=") + (<START_MOD>config.<END_MOD>getProxyPort()); }
<START_MOD>@org.junit.Test public void areAllVfsFreeTrue() { areAllVfsFreeCommon(1, false, true, false, false); assertTrue(hostNicVfsConfigHelper.areAllVfsFree(nic)); }<END_MOD>
public void runQuery(org.ovirt.engine.core.compat.Guid guid) {<START_MOD> startProgress("getCount");<END_MOD> org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.setHandleFailure(true); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { <START_MOD>stopProgress(); <END_MOD>org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel errataCountModel = ((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel) (model)); org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValueObject = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); org.ovirt.engine.core.common.businessentities.ErrataCounts resultEntity = returnValueObject.getReturnValue(); if ((resultEntity != null) && (returnValueObject.getSucceeded())) { errataCountModel.<START_MOD>setMessage(null); errataCountModel.<END_MOD>setErrataCounts(resultEntity); } else { errataCountModel.setMessage(<START_MOD>null); errataCountModel.setMessage(<END_MOD>(((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel.constants.katelloProblemRetrievingErrata()) +     + (returnValueObject.getExceptionMessage()))); } } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(getQueryType(), new org.ovirt.engine.core.common.queries.IdQueryParameters(guid), _asyncQuery); }
@java.lang.Override public java.lang.String getVerb(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<<START_MOD>?, ?, <END_MOD>?> op1) { return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().attachTo(op1.getName()); }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.VM vm) { if ((vm.getVmPoolId()) == null) { org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig config = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig.from(vm.getVmType(), vm.isStateless(), vm.isNextRunConfigurationExists()); return config.getImageResource(getApplicationResources()); } else { if (!(vm.isNextRunConfigurationExists())) { return getApplicationResources().manyDesktopsImage(); } else { return getApplicationResources().manyDesktopsChangesImage(); } } }
@java.lang.Override protected void executeVdsBrokerCommand() { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getBroker().getStorageDomainsList(org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStorageDomainType().getValue(), <START_MOD>((<END_MOD>org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStorageType()<START_MOD>) != null ? new java.lang.Integer(org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStorageType()<END_MOD>.getValue(<START_MOD>)).toString() : ""<END_MOD>), ((org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getPath()) != null ? org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getPath() : "")); org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.proceedProxyReturnValue(); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> domains = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); for (java.lang.String domain : _result.mStorageDomainList) { domains.add(new org.ovirt.engine.core.compat.Guid(domain)); } setReturnValue(domains); }
<START_MOD>public static java.lang.String getTokenContent(java.lang.String token) { java.lang.String[] s = token.split("\\|", 3); if ((s.length) != 3) { throw new java.lang.IllegalArgumentException("Invalid session token format"); } if (!("0".equals(s[0]))) { throw new java.lang.IllegalArgumentException("Invalid session token version"); } if ((s[1].isEmpty()) || (s[2].isEmpty())) { throw new java.lang.IllegalArgumentException("Invalid session token format"); } if (!(s[2].equals(org.ovirt.engine.core.aaa.filters.FiltersHelper.hmacString(s[1])))) { throw new java.lang.IllegalArgumentException("Invalid session token instance"); } return s[1]; }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Overriding MTU is not supported for this Data Center compatibility version.") java.lang.String NETWORK_MTU_OVERRIDE_NOT_SUPPORTED();<END_MOD>
<START_MOD>@org.junit.Test public void canDoActionFailsOnNullCluster() { cmd = spy(new org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookParameters(null, org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommandTest.HOOK_NAME, org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommandTest.GLUSTER_COMMAND, org.ovirt.engine.core.bll.gluster.EnableGlusterHookCommandTest.LEVEL))); prepareMocks(cmd, getGlusterServers()); assertFalse(cmd.canDoAction()); }<END_MOD>
private java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> getExistingIfaces() { if ((existingIfaces) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces = getDbFacade().getInterfaceDao().getAllInterfacesForVds(params.getVdsId()); org.ovirt.engine.core.dao.<START_MOD>qos.NetworkQosDao<END_MOD> qosDao = getDbFacade().<START_MOD>getNetworkQosDao<END_MOD>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : ifaces) { org.ovirt.engine.core.common.businessentities.network.Network network = getExistingClusterNetworks().get(iface.getNetworkName()); iface.setNetworkImplementationDetails(org.ovirt.engine.core.utils.NetworkUtils.calculateNetworkImplementationDetails(network, (network == null ? null : qosDao.get(network.getQosId())), iface)); } existingIfaces = org.ovirt.engine.core.common.businessentities.Entities.entitiesByName(ifaces); } return existingIfaces; }
public <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.ui.uicommonweb.models.hosts.FenceAgentListModel<END_MOD> <START_MOD>getFenceAgents<END_MOD>() { return <START_MOD>fenceAgents<END_MOD>; }
<START_MOD>@java.lang.Override protected java.lang.String getText(org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSessionDetails entity) { return entity.getDeletesPending().toString(); }<END_MOD>
public static void GetPmTypeList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Version version) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); if (source != null) { java.lang.String[] array = ((java.lang.String) (source)).split("[,]", (-1)); for (java.lang.String item : array) { list.add(item); } } return list; } }; org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetConfigurationValueParameters tempVar = new org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.GetConfigurationValueParameters(ConfigurationValues.VdsFenceType); tempVar.setVersion((version != null ? version.toString() : org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion())); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(tempVar, aQuery); }
<START_MOD>public java.util.ArrayList<java.lang.String> getUsedLunsMessages() { java.util.ArrayList<java.lang.String> usedLunsMessages = new java.util.ArrayList<java.lang.String>(); org.ovirt.engine.ui.uicompat.Messages messages = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages(); for (org.ovirt.engine.ui.uicommonweb.models.storage.LunModel lunModel : getAddedLuns()) { if ((lunModel.getStatus()) == (org.ovirt.engine.core.common.businessentities.LunStatus.Used)) { java.lang.String reason = null; org.ovirt.engine.core.common.businessentities.LUNs lun = ((org.ovirt.engine.core.common.businessentities.LUNs) (lunModel.getEntity())); if ((lun.getStorageDomainId()) != null) { reason = messages.lunPartOfStorageDomain(lun.getStorageDomainName()); } else if ((lun.getDiskId()) != null) { reason = messages.lunUsedByDisk(lun.getDiskAlias()); } else if (((lun.getvolume_group_id()) != null) && (!(lun.getvolume_group_id().isEmpty()))) { reason = messages.lunUsedByVG(lun.getvolume_group_id()); } usedLunsMessages.add((reason == null ? lunModel.getLunId() : (((lunModel.getLunId()) + " (") + reason) + ")")); } } return usedLunsMessages; }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultStringValue("You are about to change the Data Center Compatibility Version. This will cause the upgrade of all the Storage Domains belonging to it. Are you sure you want to continue?") java.lang.String youAreAboutChangeDcCompatibilityVersionWithUpgradeMsg();<END_MOD>
private void readUsbItem(org.ovirt.engine.core.utils.ovf.xml.XmlNode node) { vmBase.setUsbPolicy(org.ovirt.engine.core.common.businessentities.UsbPolicy.forStringValue(node.<START_MOD>selectSingleNode<END_MOD>("rasd:UsbPolicy", _xmlNS).innerText)); }
@java.lang.Override public void OnSuccess(java.lang.Object model1, java.lang.Object ReturnValue1) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel innerHostInterfaceListModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel) (model1)); org.ovirt.engine.ui.uicommonweb.models.hosts.HostBondInterfaceModel bModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostBondInterfaceModel) (innerHostInterfaceListModel.getWindow())); java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> bonds = ((java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue1)).getReturnValue())); bModel.getBond().setItems(bonds); bModel.getBond().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.FirstOrDefault(bonds)); boolean hasManagement = false; for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface innerItem : innerHostInterfaceListModel.getSelectedItemsWithVlans()) { if (innerItem.getIsManagement()) { hasManagement = true; break; } } innerHostInterfaceListModel.PostBond(innerHostInterfaceListModel, bModel, ((bModel.getNetwork().getItems()) != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>>) (bModel.getNetwork().getItems())) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>>()), hasManagement); }
private void updateDefaultSelectedConsoleProtocol(final org.ovirt.engine.core.common.businessentities.VM vm) { if ((vm.getId()) == null) { return; } final java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel> cachedModels = cachedConsoleModels.get(vm.getId()); if (cachedModels == null) { return; } deselectUserSelectedProtocol(vm.getId()); final boolean isWindowsExplorer = parentModel.getConfigurator().isClientWindowsExplorer(); <START_MOD>java.lang.Boolean hasSpiceSupport =<END_MOD> org.ovirt.engine.ui.<START_MOD>uicommonweb.dataprovider.AsyncDataProvider.hasSpiceSupport(vm.getOs(), vm.getVdsGroupCompatibilityVersion()); if ((isWindowsExplorer && (hasSpiceSupport != null)) && (hasSpiceSupport.booleanValue())) { cachedModels.get(<END_MOD>org.ovirt.engine.ui.<START_MOD>uicommonweb.models.ConsoleModelsCache.RDP_INDEX).setUserSelected(true); } else { determineConsoleModelFromVm(vm<END_MOD>, <START_MOD>cachedModels<END_MOD>).setUserSelected(true); } setupSelectionContext(vm); }
public static boolean isPublicKeyValid(java.lang.String publicKey) {<START_MOD> int i; i = publicKey.indexOf("\n"); if ((i != (-1)) && (i != ((publicKey.length()) - 1))) { return false; }<END_MOD> java.lang.String[] words = publicKey.split("\\s+", 3); if ((words.length) < 2) { return false; } if (!(words[0].matches("^[\\p{Alpha}\\p{Digit}-]*$"))) { return false; } if (!(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isBase64(words[1].getBytes(java.nio.charset.Charset.forName("UTF-8"))))) { return false; } return true; }
@org.junit.Test public void networkInVfsConfigNotValid() { networkInVfsConfigCommonTest(false); assertThat(validator.networkInVfsConfig(org.ovirt.engine.core.bll.validator.VfsConfigValidatorTest.NETWORK_ID), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NETWORK_NOT_IN_VFS_CONFIG, java.lang.String.format(VfsConfigValidator.NIC_NAME_REPLACEMENT, nic.getName()), java.lang.String.format(VfsConfigValidator.NETWORK_NAME_REPLACEMENT, network.getName()))); }
private void updateMemoryColumnVisibility() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotListModelTable.getModel().getEntity())); if (vm == null) { return; } org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotListModelTable.getTable().ensureColumnPresent(SnapshotsViewColumns.dateColumn, constants.dateSnapshot(), true, "150px"); org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotListModelTable.getTable().ensureColumnPresent(SnapshotsViewColumns.statusColumn, constants.statusSnapshot(), true, "75px"); boolean <START_MOD>archSnapshotSupported = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.isSnapshotSupported(vm.getClusterArch(), vm.getVdsGroupCompatibilityVersion()); boolean <END_MOD>memorySnapshotSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MemorySnapshotSupported, vm.getVdsGroupCompatibilityVersion().toString())))<START_MOD> && archSnapshotSupported<END_MOD>; org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotListModelTable.getTable().ensureColumnPresent(SnapshotsViewColumns.memoryColumn, constants.memorySnapshot(), memorySnapshotSupported, "55px"); org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotListModelTable.getTable().ensureColumnPresent(SnapshotsViewColumns.descriptionColumn, constants.descriptionSnapshot(), true, "185px"); }
<START_MOD>@org.junit.Test public void testGetLocaleFromRequestBrazilian() { java.util.Locale result = testServlet.getLocaleFromRequest(mockRequest); assertEquals("The locale should be en-US", java.util.Locale.US, result); when(mockRequest.getHeader(DocsServlet.REFERER)).thenReturn("http://127.0.0.1:8700/webadmin/webadmin/WebAdmin.html?locale=pt_BR"); result = testServlet.getLocaleFromRequest(mockRequest); assertEquals("The locale should be pt_BR", new java.util.Locale("pt", "BR"), result); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Messages<END_MOD>.DefaultMessage( {0} to Bond java.lang.String addToBond(java.lang.String name);
public org.ovirt.engine.core.bll.ValidationResult glusterServiceSupported() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.GLUSTER_NOT_SUPPORTED, "compatibilityVersion", cluster.getCompatibilityVersion().getValue()).when(((cluster.supportsGlusterService()) && (!(glusterFeatureEnabled())))); }
<START_MOD>public void setHighlyAvailableScore(int value) { this.mVdsDynamic.setHighlyAvailableScore(value); }<END_MOD>
<START_MOD>private org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> selectedOrNull(java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel>> list, org.ovirt.engine.core.common.businessentities.Disk prevSelected, org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType diskStorageType) { if (prevSelected == null) { return null; } if ((prevSelected.getDiskStorageType()) != diskStorageType) { return null; } for (org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> item : list) { if (item.getEntity().getDisk().getId().equals(prevSelected.getId())) { return item; } } return null; }<END_MOD>
<START_MOD>protected abstract void onShowErrata();<END_MOD>
@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getUserProfileDao(); existingProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-96bc-485c-834a-cbbc03acc820")); deletableProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-96bc-485c-834a-cbbc03acc821")); newProfile = new org.ovirt.engine.core.common.businessentities.UserProfile(); newProfile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newProfile.setUserId(new org.ovirt.engine.core.compat.Guid("81940459-2ec4-4afa-bbaa-22549555293c")); newProfile.setSshPublicKeyId(new org.ovirt.engine.core.compat.Guid("67bc5484-d4eb-47ce-8b6a-e9624b70b676")); newProfile.setSshPublicKey("key3"); newProfile.setLoginName(<START_MOD>"user4@testportal.redhat.com@testportal.redhat.com"<END_MOD>); }
<START_MOD>@java.lang.Override public java.util.Map<java.lang.Integer, java.util.Map<org.ovirt.engine.core.compat.Version, java.lang.Boolean>> getSoundDeviceSupportMap() { java.util.Map<java.lang.Integer, java.util.Map<org.ovirt.engine.core.compat.Version, java.lang.Boolean>> soundDeviceSupportMap = new java.util.HashMap<java.lang.Integer, java.util.Map<org.ovirt.engine.core.compat.Version, java.lang.Boolean>>(); java.util.Set<org.ovirt.engine.core.compat.Version> versionsWithNull = new java.util.HashSet<org.ovirt.engine.core.compat.Version>(org.ovirt.engine.core.compat.Version.ALL); versionsWithNull.add(null); java.util.Set<java.lang.Integer> osIds = new java.util.HashSet<java.lang.Integer>(getOsIds()); for (java.lang.Integer osId : osIds) { soundDeviceSupportMap.put(osId, new java.util.HashMap<org.ovirt.engine.core.compat.Version, java.lang.Boolean>()); for (org.ovirt.engine.core.compat.Version ver : versionsWithNull) { soundDeviceSupportMap.get(osId).put(ver, isSoundDeviceEnabled(osId, ver)); } } return soundDeviceSupportMap; }<END_MOD>
private org.ovirt.engine.api.model.RSDL addSystemVersion(org.ovirt.engine.api.model.RSDL rsdl) { rsdl.setVersion(org.ovirt.engine.api.restapi.util.VersionHelper.parseVersion(getConfigurationValueDefault(java.lang.String.class, ConfigurationValues.<START_MOD>ProductRPMVersion<END_MOD>))); return rsdl; }
<START_MOD>@java.lang.Override protected void hideAllDetails() { detailExpand.toggleExpanded(false); statisticsExpand.toggleExpanded(false); }<END_MOD>
<START_MOD>private void handleRemovedDevices(org.ovirt.engine.core.compat.Guid vmId, java.util.Set<org.ovirt.engine.core.compat.Guid> processedDevices, java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> devices) { for (org.ovirt.engine.core.common.businessentities.VmDevice device : devices) { if (processedDevices.contains(device.getDeviceId())) { continue; } if (device.getIsManaged()) { if (device.getIsPlugged()) { device.setAddress(""); addVmDeviceToList(device); org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.debugFormat("VM {0} managed pluggable device was unplugged : {1}", vmId, device); } else if (!(devicePluggable(device))) { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.errorFormat("VM {0} managed non pluggable device was removed unexpectedly from libvirt: {1}", vmId, device); } } else { removedDeviceIds.add(device.getId()); org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.debugFormat("VM {0} unmanaged device was marked for remove : {1}", vmId, device); } } }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> getAllForNetwork(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeReadList("GetVmTemplatesByNetworkId", org.ovirt.engine.core.dao.<START_MOD>VmTemplateDAOImpl<END_MOD>.VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("network_id", id)); }
@java.lang.Override <START_MOD>protected<END_MOD> java.lang.String <START_MOD>serializeAdditionalAttributes<END_MOD>() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append( macAddress=").append(getMacAddress()).append(", bondName=").append(getBondName()).append(", speed=").append(getSpeed()).append(", <START_MOD>labels<END_MOD>= return builder.toString(); }
private void InitTemplate() { getModel().getMemSize().setEntity(this.vm.getvm_mem_size_mb()); getModel().getOSType().setSelectedItem(this.vm.getvm_os()); getModel().getDomain().setSelectedItem(this.vm.getvm_domain()); getModel().getUsbPolicy().setSelectedItem(this.vm.getusb_policy()); getModel().getNumOfMonitors().setSelectedItem(this.vm.getnum_of_monitors()); getModel().getAllowConsoleReconnect().setEntity(this.vm.getAllowConsoleReconnect()); getModel().setBootSequence(this.vm.getdefault_boot_sequence()); getModel().getTotalCPUCores().setEntity(java.lang.Integer.toString(this.vm.getnum_of_cpus())); getModel().getNumOfSockets().setSelectedItem(this.vm.getnum_of_sockets()); getModel().getIsStateless().setEntity(this.vm.getis_stateless()); getModel().<START_MOD>getPreventDeletion().setEntity(this.vm.getPreventDeletion()); getModel().<END_MOD>getIsSmartcardEnabled().setEntity(this.vm.isSmartcardEnabled()); if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(this.vm.gettime_zone()))) { updateTimeZone(this.vm.gettime_zone()); } else { UpdateDefaultTimeZone(); } UpdateDomain(); getModel().getStorageDomain().setIsChangable(true); getModel().getProvisioning().setIsAvailable(false); for (java.lang.Object item : getModel().getDisplayProtocol().getItems()) { org.ovirt.engine.ui.uicommonweb.models.EntityModel model = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (item)); org.ovirt.engine.core.common.businessentities.DisplayType displayType = ((org.ovirt.engine.core.common.businessentities.DisplayType) (model.getEntity())); if (displayType == (this.vm.getdefault_display_type())) { getModel().getDisplayProtocol().setSelectedItem(item); break; } } InitPriority(this.vm.getpriority()); }
private void loadVmwareProviders() {<START_MOD> clearErrorAndWarning();<END_MOD> org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getAllProvidersByType(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.VmwareVmProviderProperties>> providers = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.VmwareVmProviderProperties> provider : ((java.util.List<org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.VmwareVmProviderProperties>>) (returnValue))) { if (getDataCenters().getSelectedItem().getId().equals(provider.getAdditionalProperties().getStoragePoolId())) { providers.add(provider); } } providers.add(0, null); getVmwareProviders().setItems(providers); } }), ProviderType.VMWARE); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__REMOVE); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__POLICY_UNIT); }
<START_MOD>protected java.lang.String joinMembers(java.util.List<java.lang.String> strings, java.lang.String separator, java.lang.String skipString, org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { if ((strings == null) || (strings.isEmpty())) { return constants.noMembersAffinityGroup(); } java.lang.StringBuffer result = new java.lang.StringBuffer(); for (java.lang.String s : strings) { if (s.equals(skipString)) { continue; } if ((result.length()) != 0) { result.append(separator); } result.append(s); } return result.toString(); }<END_MOD>
<START_MOD>@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((operationType) == null ? 0 : operationType.hashCode()); result = (prime * result) + ((operationCallback) == null ? 0 : operationCallback.hashCode()); result = (prime * result) + ((parameter) == null ? 0 : parameter.hashCode()); result = (prime * result) + ((source) == null ? 0 : source.hashCode()); return result; }<END_MOD>
@java.lang.Override public java.lang.Integer parse(java.lang.CharSequence text) throws java.text.ParseException { com.google.gwt.regexp.shared.MatchResult match = com.google.gwt.regexp.shared.RegExp.compile(<START_MOD>"^(\\d*)\\s*(\\w*)$"<END_MOD>).exec(text.toString()); java.lang.String prefix = match.getGroup(1); java.lang.String suffix = match.getGroup(2); java.lang.Integer size = null; try { size = java.lang.Integer.parseInt(prefix); } catch (java.lang.NumberFormatException e) { return 0; } if ((suffix.equalsIgnoreCase(<START_MOD>"TB")) || (suffix.equalsIgnoreCase("T"))) { size *= 1024 * 1024; return size; } if ((suffix.equalsIgnoreCase(<END_MOD>"GB")) || (suffix.equalsIgnoreCase("G"))) { size *= 1024; return size; } if ((suffix.equalsIgnoreCase("MB")) || (suffix.equalsIgnoreCase("M"))) { return <START_MOD>size; } return size; }<END_MOD>
@org.junit.Test public void statusNotSupportedForHostInstallation() { when(oldHost.getStatus()).thenReturn(VDSStatus.Up); validator = createValidatorForHostInstallation(); assertThat(validator.statusSupportedForHostInstallation(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>EngineMessages<END_MOD>.VDS_CANNOT_INSTALL_STATUS_ILLEGAL)); }
@java.lang.Override protected void ProceedProxyReturnValue() { org.ovirt.engine.core.common.errors.VdcBllErrors returnStatus = GetReturnValueFromStatus(org.ovirt.engine.core.vdsbroker.gluster.AbstractGlusterBrokerCommand.getReturnStatus()); switch (returnStatus) { case GlusterVolumeCreateFailed : case GlusterVolumeStartFailed : case GlusterVolumeStopFailed : case AddBricksToGlusterVolumeFailed : case GlusterVolumeSetOptionFailed : case GlusterVolumeRebalanceStartFailed : case GlusterVolumeDeleteFailed : case GlusterVolumeReplaceBrickStartFailed : case GlusterVolumeListFailed : case GlusterVolumeOptionInfoFailed : case GlusterVolumeResetOptionsFailed : case GlusterVolumeRemoveBricksFailed : case GlusterVolumeProfileStartFailed : case GlusterVolumeProfileStopFailed : case GlusterAddHostFailed : case RemoveGlusterServerFailed : case GlusterPeerListFailed : case GlusterVolumeStatusFailed : case GlusterVolumeProfileInfoFailed : <START_MOD>case GlusterHookFailed : case GlusterHookEnableFailed : case GlusterHookAlreadyEnabled : case GlusterHookNotFound : case GlusterHookReadFailed : case GlusterHookUpdateFailed : <END_MOD>org.ovirt.engine.core.vdsbroker.gluster.AbstractGlusterBrokerCommand.getVDSReturnValue().setVdsError(new org.ovirt.engine.core.common.errors.VDSError(returnStatus, org.ovirt.engine.core.vdsbroker.gluster.AbstractGlusterBrokerCommand.getReturnStatus().mMessage)); org.ovirt.engine.core.vdsbroker.gluster.AbstractGlusterBrokerCommand.getVDSReturnValue().setSucceeded(false); break; default : super.ProceedProxyReturnValue(); break; } }
public org.ovirt.engine.core.bll.ValidationResult hotUpdatePossible() { if ((getRequiredAction()) == (org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.RequiredAction.UPDATE_VM_DEVICE)) { if (!(org.ovirt.engine.core.<START_MOD>common.validation<END_MOD>.FeatureSupported.networkLinking(version))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.HOT_VM_INTERFACE_UPDATE_IS_NOT_SUPPORTED, org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.UpdateVmNicValidator.clusterVersion()); } else if (nic.isPortMirroring()) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.CANNOT_PERFOM_HOT_UPDATE_WITH_PORT_MIRRORING); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public void startNextLiveMerge(int completedChildren) { if (completedChildren == 0) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatus(getImageGroupId(), ImageStatus.LOCKED); } else { checkImageIdConsistency((completedChildren - 1)); } org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().get(completedChildren); org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.log.info( child command {} of {}, image '{}' (completedChildren + 1), org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().size(), imageId); org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters = buildRemoveSnapshotSingleDiskLiveParameters(imageId); parameters.<START_MOD>setEndProcedure(EndProcedure.ASYNC_OPERATIONS_END<END_MOD>); if ((org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getChildImageIds()) == null) { org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().setChildImageIds(java.util.Arrays.asList(new org.ovirt.engine.core.compat.Guid[org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().size()])); } org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getChildImageIds().set(completedChildren, parameters.getDestinationImageId()); persistCommand(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveSnapshotSingleDiskLive, parameters, org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.cloneContextAndDetachFromParent()); }
<START_MOD>@com.gwtplatform.mvp.client.annotations.ProxyEvent public void onErratumSelectionChange(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.ErrataSelectionChangeEvent event) { org.ovirt.engine.ui.webadmin.section.main.presenter.tab.errata.SubTabEngineErrataDetailsPresenter.logger.info(((this.getClass().toString()) + " onErratumSelectionChange")); updateMainTabSelection(event.getSelectedItems()); }<END_MOD>
<START_MOD>@java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (result)); java.util.List<org.ovirt.engine.core.common.businessentities.ActionGroup> resultList = ((java.util.List<org.ovirt.engine.core.common.businessentities.ActionGroup>) (returnValue.getReturnValue())); if (resultList.contains(ActionGroup.RECONNECT_TO_VM)) { command.Execute(); } else { displayConsoleConnectConfirmPopup(command); } }<END_MOD>
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if (!(super.<START_MOD>validate<END_MOD>())) { return false; } if ((getParameters().getClusterId()) == null) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID); return false; } if (!(getGlusterUtil().isGlusterSnapshotSupported(getVdsGroup().getCompatibilityVersion(), getVdsGroup().getId()))) { <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_VOLUME_SNAPSHOT_NOT_SUPPORTED); } if ((getParameters().getConfigParams()) == null) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_CONFIG_PARAMS_IS_EMPTY); return false; } for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig param : getParameters().getConfigParams()) { if (org.apache.commons.lang.StringUtils.isEmpty(param.getParamValue())) { addCustomValue("snapshotConfigParam", param.getParamName()); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_CONFIG_PARAM_VALUE_IS_EMPTY); return false; } } return true; }
public static boolean canRemoveVmPool(org.ovirt.engine.core.compat.Guid vmPoolId, java.util.ArrayList<java.lang.String> reasons) { boolean returnValue = true; if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().getVmPoolsMapByVmPoolId(vmPoolId).size()) != 0) { returnValue = false; reasons.add(<START_MOD>EngineMessages<END_MOD>.VM_POOL_CANNOT_REMOVE_VM_POOL_WITH_VMS.toString()); } return returnValue; }
@java.lang.Override public void render(<START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine.ui.webadmin.widget.table<END_MOD>.cell.Context context, com.google.gwt.safehtml.shared.SafeHtml data, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb) { if (data != null) { sb.appendHtmlConstant( type= style= tabindex= sb.append(data); sb.appendHtmlConstant("</button>"); } }
@java.lang.Override public void run() { org.ovirt.engine.core.bll.<START_MOD>DownVmsHandler<END_MOD>.processVmPoolOnStopVm(getVm().getId(), org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks(getExecutionContext())); }
<START_MOD>public<END_MOD> void setChangeQuotaCommand(org.ovirt.engine.ui.uicommonweb.UICommand value) { privateChangeQuotaCommand = value; }
<START_MOD>private void onRemove() { org.ovirt.engine.ui.uicommonweb.models.datacenters.RemoveIscsiBundleModel model = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.RemoveIscsiBundleModel) (getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> params = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (java.lang.Object item : getSelectedItems()) { params.add(new org.ovirt.engine.core.common.action.RemoveIscsiBundleParameters(((org.ovirt.engine.core.common.businessentities.IscsiBundle) (item)).getId(), getEntity().getId())); } model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.RemoveIscsiBundle, params, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterIscsiBundleListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterIscsiBundleListModel) (result.getState())); localModel.stopProgress(); cancel(); } }, this); }<END_MOD>
<START_MOD>@org.junit.Test public void testRunQuery_success_not_succeeded_eventshandler_nocallbackhandler() { org.ovirt.engine.core.common.queries.VdcQueryParametersBase testParameters = new org.ovirt.engine.core.common.queries.SearchParameters("*win*", org.ovirt.engine.core.common.interfaces.SearchType.VM); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.Search, testParameters, mockService, mockAsyncQuery); verify(mockService).RunQuery(eq(VdcQueryType.Search), eq(testParameters), callback.capture()); org.ovirt.engine.core.common.queries.VdcQueryReturnValue mockReturnValue = new org.ovirt.engine.core.common.queries.VdcQueryReturnValue(); mockReturnValue.setExceptionString("USER_IS_NOT_LOGGED_IN"); mockReturnValue.setSucceeded(false); callback.getValue().onSuccess(mockReturnValue); verify(frontendNotLoggedInEvent).raise(org.ovirt.engine.ui.frontend.Frontend.class, EventArgs.Empty); }<END_MOD>
@java.lang.Override public boolean <START_MOD>getIsAvailable<END_MOD>() { org.ovirt.engine.core.common.businessentities.StorageDomainType storageDomainType = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (getDetailModel().getEntity())).getStorageDomainType(); return (!(storageDomainType.equals(StorageDomainType.ISO))) && (!(storageDomainType.equals(StorageDomainType.ImportExport))); }
private static void runActionExecutionFailed(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.errors.VdcFault fault) { if ((org.ovirt.engine.ui.frontend.Frontend.getEventsHandler()) != null) { java.lang.String translatedMessage = org.ovirt.engine.ui.frontend.Frontend.<START_MOD>getVdsmErrorsTranslator()<END_MOD>.TranslateErrorTextSingle(((fault.getError()) == null ? fault.getMessage() : fault.getError().toString())); fault.setMessage(translatedMessage); org.ovirt.engine.ui.frontend.Frontend.getEventsHandler().runActionExecutionFailed(actionType, fault); } }
<START_MOD>public org.ovirt.engine.core.bll.tasks.interfaces.SPMTask construct(org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo creationInfo);<END_MOD>
public java.util.List<java.lang.String> findActiveVmsUsingNetworks(org.ovirt.engine.core.compat.Guid vdsId, java.util.List<java.lang.String> networks) { if (networks.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<org.ovirt.engine.core.common.businessentities.VM> runningVms = getVmDAO().getAllRunningForVds(vdsId); java.util.List<java.lang.String> vmNames = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.VM vm : runningVms) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmInterfaces = getVmNetworkInterfaceDao().getAllForVm(vm.getId()); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmNic : vmInterfaces) { if (((<START_MOD>org.ovirt.engine.core.bll.common.predicates.VnicNetworkCanBeUpdatedPredicate.getInstance().eval(<END_MOD>vmNic)) && ((vmNic.getNetworkName()) != null)) && (networks.contains(vmNic.getNetworkName()))) { vmNames.add(vm.getName()); break; } } } return vmNames; }
@org.junit.Test public void outboundAverageMissing() { qos.setOutboundPeak(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.<START_MOD>BANDWIDTH<END_MOD>); qos.setOutboundBurst(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.<START_MOD>BANDWIDTH<END_MOD>); valuesPresentTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_MISSING_VALUES)); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Storage java.lang.String dataCenterAttachStorageAction();
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.common.action.VdcActionParametersBase getAddParameters(org.ovirt.engine.core.common.businessentities.VM mapped, org.ovirt.engine.api.model.Application cdrom) { return new org.ovirt.engine.core.common.action.VmManagementParametersBase(getUpdatable(mapped.getStaticData().getIsoPath())); }<END_MOD>
protected org.ovirt.engine.api.model.Group mapAdGroup(org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD> entity) { return getMapper(org.ovirt.engine.core.common.businessentities.<START_MOD>AdGroups<END_MOD>.class, org.ovirt.engine.api.model.Group.class).map(entity, null); }
<START_MOD>public static org.ovirt.api.metamodel.concepts.Parameter getMainAddParameter(org.ovirt.api.metamodel.concepts.Method method) { org.ovirt.api.metamodel.concepts.Parameter mainParameter = method.getParameters().stream().filter(( x) -> ((x.getType()) instanceof org.ovirt.api.metamodel.concepts.StructType) || ((x.getType()) instanceof org.ovirt.api.metamodel.concepts.ListType)).findFirst().orElse(null); return mainParameter; }<END_MOD>
@java.lang.Override public java.util.List<java.lang.String> allocateMacAddresses(int numberOfAddresses) { <START_MOD>org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug( {} mac addresses from {}. numberOfAddresses, this); <END_MOD>java.util.List<java.lang.Long> macs = macsStorage.allocateAvailableMacs(numberOfAddresses); java.util.<START_MOD>List<java.lang.String> result = org.ovirt.engine.core.utils.MacAddressRangeUtils.macAddressesToStrings(macs); org.ovirt.engine.core.bll.network.macpool.MacPoolUsingRanges.log.debug( mac addresses: {} from {}. java.util.Arrays.toString(result.toArray()), this); java.util.<END_MOD>Collections.sort(<START_MOD>result<END_MOD>); logWhenMacPoolIsEmpty(); return <START_MOD>result; }<END_MOD>
<START_MOD>public void setConflictType(org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterHookConflictType conflictType) { this.conflictType = conflictType; }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Retain") java.lang.String retainBricksButton();
protected void runVm() { setActionReturnValue(VMStatus.Down); if (getVdsToRunOn()) { org.ovirt.engine.core.common.businessentities.VMStatus status = null; try { if (connectLunDisks(org.ovirt.engine.core.bll.RunVmCommand.getVdsId())) { status = createVm(); org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.RunVmCommand.getExecutionContext(), true); } } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { <START_MOD>switch (e.getErrorCode()) { case Done : case exist : case VDS_NETWORK_ERROR : case PROVIDER_FAILURE : runningFailed(); throw e; default : org.ovirt.engine.core.bll.RunVmCommand.log.warn( to run VM '{}': {} org.ovirt.engine.core.bll.RunVmCommand.getVmName(), e.getMessage()); } } finally { org.ovirt.engine.core.bll.RunVmCommand.freeLock(); } setActionReturnValue(status); if ((status != null) && ((status.isRunning()) || (status == (<END_MOD>org.ovirt.engine.core.common.<START_MOD>businessentities.VMStatus.RestoringState)))) { org.ovirt.engine.core.bll.RunVmCommand.setSucceeded(true); } else {<END_MOD> org.ovirt.engine.core.bll.RunVmCommand.log.<START_MOD>info<END_MOD>( to <START_MOD>rerun<END_MOD> VM '{}'<START_MOD> org.ovirt.engine.core.bll.RunVmCommand.getVm().getName()); org.ovirt.engine.core.bll.RunVmCommand.setCommandShouldBeLogged(false);<END_MOD> org.ovirt.engine.core.bll.RunVmCommand.setSucceeded(true); <START_MOD>rerun(); } <END_MOD>} else { runningFailed(); } }
<START_MOD>@org.junit.Test public void networkNameTakenBySameNetwork() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network otherNetwork = new org.ovirt.engine.core.common.businessentities.network.Network(); otherNetwork.setName(DEFAULT_NETWORK_NAME); otherNetwork.setId(new org.ovirt.engine.core.compat.Guid(DEFAULT_GUID)); java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>(); networks.add(otherNetwork); networkNameAvailableTest(ValidationResult.VALID, networks); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.FenceStatusReturnForXmlRpc fenceNode(java.lang.String ip, java.lang.String port, java.lang.String type, java.lang.String user, java.lang.String password, java.lang.String action, java.lang.String secured, java.lang.String options<START_MOD>,<END_MOD> java.util.Map<java.lang.String, java.lang.Object> <START_MOD>fencingPolicy) { try { java.util.Map<java.lang.String, java.lang.Object> <END_MOD>xmlRpcReturnValue = vdsServer.fenceNode(ip, port, type, user, password, action, secured, options<START_MOD>, fencingPolicy<END_MOD>); org.ovirt.engine.core.vdsbroker.vdsbroker.FenceStatusReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.FenceStatusReturnForXmlRpc(xmlRpcReturnValue); return wrapper; } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
<START_MOD>@java.lang.Override protected java.lang.Object provideDetailModelEntity(org.ovirt.engine.ui.uicommonweb.models.EditOptionsModel selectedItem) { return selectedItem; }<END_MOD>
protected boolean isCinderStorageHasNoDisks() { if ((org.ovirt.engine.core.bll.storage<START_MOD>.domains<END_MOD>.StorageDomainCommandBase.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.CINDER)) { return validate(org.ovirt.engine.core.bll.storage.CINDERStorageHelper.isCinderHasNoImages(getStorageDomainId())); } return true; }
@java.lang.Override protected org.ovirt.engine.core.bll.snapshots.SnapshotsValidator getSnapshotValidator() { return new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator() { @java.lang.Override public org.ovirt.engine.core.bll.ValidationResult vmNotInPreview(org.ovirt.engine.core.compat.Guid vmId) { if (vmInPreview) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_IN_PREVIEW); } return org.ovirt.engine.core.bll.ValidationResult.VALID; } }; }
@java.lang.Override protected void executeVdsBrokerCommand() { vmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getBroker().list(); org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.proceedProxyReturnValue(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> returnVMs = new java.util.HashMap<>(); for (int idx = 0; idx < (vmListReturn.vmList.length); ++idx) { java.util.Map<java.lang.String, java.lang.Object> vm = vmListReturn.vmList[idx]; org.ovirt.engine.core.compat.Guid vmId = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getVmId(vm); org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm = new org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm(vmId, org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getVdsmCallTimestamp(vm)).setVmDynamic(org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.buildVMDynamicDataFromList(vm))<START_MOD>.setDevicesHash(org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getVmDevicesHash(vm))<END_MOD>; returnVMs.put(vmId, vdsmVm); } setReturnValue(returnVMs); }
private boolean validatePciAndIdeLimit(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsDiskPluggedTo) { for (org.ovirt.engine.core.common.businessentities.VM vm : vmsDiskPluggedTo) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> allVmInterfaces = org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVmNicDao().getAllForVm(vm.getId()); java.util.List<org.ovirt.engine.core.common.businessentities.Disk> allVmDisks = new java.util.LinkedList<org.ovirt.engine.core.common.businessentities.Disk>(getOtherVmDisks(vm.getId())); allVmDisks.add(getNewDisk()); if (!(checkPciAndIdeLimit(vm.getNumOfMonitors(), allVmInterfaces, allVmDisks, org.ovirt.engine.core.bll.utils.VmDeviceUtils.isVirtioScsiControllerAttached(vm.getId()), org.ovirt.engine.core.bll.<START_MOD>utils.VmDeviceUtils.isWatchdogSetted(vm.getId()), org.ovirt.engine.core.bll.<END_MOD>UpdateVmDiskCommand.getReturnValue().getCanDoActionMessages()))) { return false; } } return true; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Enforcing") java.lang.String enforceAffinityGroup();
<START_MOD>private boolean isVmInterfacesAttachedToClusterNetworks(java.util.List<org.ovirt.engine.core.common.businessentities.network> clusterNetworks, java.util.Set<java.lang.String> interfaceNetworkNames) { java.util.List<java.lang.String> nonExistingNetworkNames = org.ovirt.engine.core.utils.NetworkUtils.getNonExistingNetworkNames(clusterNetworks, interfaceNetworkNames); if ((nonExistingNetworkNames.size()) > 0) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_NOT_IN_CLUSTER); org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().getCanDoActionMessages().add(java.lang.String.format("$networks %1$s", org.apache.commons.lang.StringUtils.join(nonExistingNetworkNames, ","))); return false; } return true; }<END_MOD>
<START_MOD>private java.util.Collection<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> getVnicProfileMappings(org.ovirt.engine.api.model.Action action) { return new org.ovirt.engine.api.restapi.types.ExternalVnicProfileMappingMapper().mapFromModel(action.getVnicProfileMappings()); }<END_MOD>
public void update(org.ovirt.engine.core.common.businessentities.VM vm) { if (vm == null) { return; } definedMemory.setValue(((vm.getVmMemSizeMb()) + (constants.mb()))); minAllocatedMemory.setValue(((vm.getMinAllocatedMem()) + (constants.mb()))); cpuInfo.setValue(messages.cpuInfoLabel(vm.getNumOfCpus(), vm.getNumOfSockets(), vm.getCpuPerSocket())); }
@java.lang.Override public void onDoubleClick(com.google.gwt.event.dom.client.DoubleClickEvent event) { <START_MOD>try { model<END_MOD>.<START_MOD>getVmConsoles()<END_MOD>.<START_MOD>connect<END_MOD>(); <START_MOD>} catch<END_MOD> (<START_MOD>org.ovirt.engine.ui.uicommonweb.models.VmConsoles<END_MOD> <START_MOD>e<END_MOD>) { getView().showErrorDialog(<START_MOD>e.getLocalizedErrorMessage()<END_MOD>); } }
public static void updateNetworkData(org.ovirt.engine.core.common.businessentities.VDS vds, <START_MOD>java.util.Map<END_MOD> xmlRpcStruct) { vds.setActiveNic(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignStringValue(xmlRpcStruct, VdsProperties.NETWORK_LAST_CLIENT_INTERFACE)); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> oldInterfaces = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getInterfaceDao().getAllInterfacesForVds(vds.getId()); vds.getInterfaces().clear(); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.addHostNetworkInterfaces(vds, xmlRpcStruct); java.util.Map<java.lang.String, java.lang.Integer> currVlans = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.addHostVlanDevices(vds, xmlRpcStruct); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.addHostBondDevices(vds, xmlRpcStruct); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.addHostNetworksAndUpdateInterfaces(vds, xmlRpcStruct, currVlans); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setBondingOptions(vds, oldInterfaces); if (xmlRpcStruct.containsKey(VdsProperties.netConfigDirty)) { vds.setNetConfigDirty(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignBoolValue(xmlRpcStruct, VdsProperties.netConfigDirty)); } }
@java.lang.Override protected void executeCommand() { <START_MOD>try { <END_MOD>getStorageDeviceSyncJobInstance().<START_MOD>refreshStorageDevicesFromServer<END_MOD>(org.ovirt.engine.core.bll.gluster.SyncStorageDevicesCommand.getVds()); org.ovirt.engine.core.bll.gluster.SyncStorageDevicesCommand.setSucceeded(true); }<START_MOD> catch (java.lang.Exception exp) { org.ovirt.engine.core.bll.gluster.SyncStorageDevicesCommand.setSucceeded(false); } }<END_MOD>
@javax.ws.rs.Path( (copy|export)}/{oid} public <START_MOD>javax<END_MOD>.<START_MOD>ws<END_MOD>.<START_MOD>rs<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>Response<END_MOD> <START_MOD>getActionStatus<END_MOD>(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return <START_MOD>adaptResponse<END_MOD>(getDelegate().<START_MOD>getActionStatus<END_MOD>(action, oid)); }
@java.lang.Override public void onLogout() { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(); query.setHandleFailure(true); query.setModel(this); query.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { if (clientAgentType.isIE8OrBelow()) { Window.Location.reload(); } org.ovirt.engine.ui.frontend.Frontend.setLoggedInUser(null); <START_MOD>org.ovirt.engine.ui.frontend.Frontend.setLoginPassword(null); <END_MOD>getLoginModel().resetAfterLogout(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.clearCache(); connectAutomaticallyManager.resetAlreadyOpened(); org.ovirt.engine.ui.userportal.system.ApplicationInit.super.onLogout(); } }; org.ovirt.engine.ui.frontend.Frontend.LogoffAsync(org.ovirt.engine.ui.frontend.Frontend.getLoggedInUser(), query); }
<START_MOD>public void setRuntimeCustomProperties(java.util.Map<java.lang.String, java.lang.String> runtimeCustomProperties) { this.runtimeCustomProperties = runtimeCustomProperties; }<END_MOD>
private static void addNetworkInterfaceProperties(org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct struct, org.ovirt.engine.core.common.businessentities.VmNetworkInterface vmInterface, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String nicModel, org.ovirt.engine.core.compat.Version clusterVersion) { struct.add(VdsProperties.Type, vmDevice.getType()); struct.add(VdsProperties.Device, vmDevice.getDevice()); <START_MOD>if ((vmInterface.getNetworkName()) != null) { <END_MOD>struct.add(VdsProperties.network, vmInterface.getNetworkName(<START_MOD>)); } struct.add(VdsProperties.linkState, (vmInterface.isLinked() ? "up" : "down"<END_MOD>)); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); struct.add(VdsProperties.mac_addr, vmInterface.getMacAddress()); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addBootOrder(vmDevice, struct); struct.add(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.add(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); struct.add(VdsProperties.nic_type, nicModel); if (vmInterface.isPortMirroring()) { java.util.List<java.lang.String> networks = new java.util.ArrayList<java.lang.String>(); networks.add(vmInterface.getNetworkName()); struct.add(VdsProperties.portMirroring, networks); } org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addNetworkFiltersToNic(struct, clusterVersion); }
private java.util.ArrayList<java.lang.String> getLunIds(org.ovirt.engine.api.model.Storage storage, org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, org.ovirt.engine.core.compat.Guid hostId) { java.util.List<org.ovirt.engine.api.model.LogicalUnit> logicalUnits = new java.util.ArrayList<org.ovirt.engine.api.model.LogicalUnit>(); if (storage.isSetLogicalUnits()) { logicalUnits = storage.getLogicalUnits(); } else if ((<START_MOD>(<END_MOD>storage.isSetVolumeGroup()) && (storage.getVolumeGroup().isSetLogicalUnits())) <START_MOD>&& (storage.getVolumeGroup().getLogicalUnits().isSetLogicalUnits())) <END_MOD>{ logicalUnits = storage.getVolumeGroup().getLogicalUnits()<START_MOD>.getLogicalUnits()<END_MOD>; } java.util.ArrayList<java.lang.String> lunIds = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.api.model.LogicalUnit unit : logicalUnits) { validateParameters(unit, 4, "id"); if ((storageType == (org.ovirt.engine.core.common.businessentities.storage.StorageType.ISCSI)) && (!(isConnectionAssumed(unit)))) { connectStorageToHost(hostId, storageType, unit); } lunIds.add(unit.getId()); } refreshHostStorage(hostId); return !(lunIds.isEmpty()) ? lunIds : null; }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.InstallModel model) { driver.edit(model); <START_MOD>rbPassword.setValue(true); displayPassPkWindow(true); model.setAuthenticationMethod(AuthenticationMethod.Password); rbPassword.addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { model.setAuthenticationMethod(AuthenticationMethod.Password); displayPassPkWindow(true); } }); rbPublicKey.addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { model.setAuthenticationMethod(AuthenticationMethod.PublicKey); displayPassPkWindow(false); } }); userNameEditor.setEnabled(false); }<END_MOD>
protected java.lang.String getJsonDiskDescription(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { try { return org.ovirt.engine.core.bll.<START_MOD>MetadataDiskDescriptionHandler<END_MOD>.<START_MOD>generateJsonDiskDescription<END_MOD>(disk); } catch (java.io.IOException e) { log.error( while generating json for disk. ERROR: '{}' e); return org.apache.commons.lang.StringUtils.EMPTY; } }
@java.lang.Override protected org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap createWidgetConfiguration() { return super.createWidgetConfiguration().update(highAvailabilityTab, hiddenField()).update(spiceProxyEditor, simpleField().visibleInAdvancedModeOnly()).update(spiceProxyEnabledCheckboxWithInfoIcon, simpleField().visibleInAdvancedModeOnly()).update(spiceProxyOverrideEnabledEditor, simpleField().visibleInAdvancedModeOnly()).putOne(isStatelessEditor, hiddenField()).putOne(isRunAndPauseEditor, hiddenField()).putOne(editPoolEditVmsPanel, hiddenField()).putOne(editPoolIncraseNumOfVmsPanel, hiddenField()).putOne(logicalNetworksEditorPanel, hiddenField()).putOne(editPoolEditMaxAssignedVmsPerUserPanel, hiddenField())<START_MOD>.putOne(detachableMemSizeEditor, simpleField().detachable().visibleInAdvancedModeOnly())<END_MOD>; }
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.EntityModel getGateway() { return privateGateway; }<END_MOD>
private void initClusters(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters, org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> filteredList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>(); org.ovirt.engine.core.common.businessentities.StoragePool selectedDataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (getModel().getDataCenter().getSelectedItem())); boolean listContainsVmCluster = false; for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (selectedDataCenter.getId().equals(cluster.getStoragePoolId()))) { filteredList.add(cluster); if (vm.getVdsGroupId().equals(cluster.getId())) { listContainsVmCluster = true; } } } if (!listContainsVmCluster) { addVmCluster(filteredList); } else { java.util.Collections.sort(filteredList, new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer()); model.setClusters(model, filteredList, vm.getVdsGroupId()<START_MOD>); } }<END_MOD>
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(getName()).append( {id=").append(getId()).append(", vdsId=").append(getVdsId()).append(", macAddress=").append(getMacAddress()).append(", networkName=").append(getNetworkName()).append(", vlanId=").append(getVlanId()).append(", bonded=").append(getBonded()).append(", bondName=").append(getBondName()).append(", bondOptions=").append(getBondOptions()).append(", bootProtocol=").append(getBootProtocol()).append(", address=").append(getAddress()).append(", subnet=").append(getSubnet()).append(", gateway=").append(getGateway()).append(", mtu=").append(getMtu()).append(", bridged=").append(isBridged()).append(", speed=").append(getSpeed()).append(", type=").append(getType()).append(", networkImplementationDetails=").append(getNetworkImplementationDetails()).append("<START_MOD>, labels=").append(labels).append("<END_MOD>} return builder.toString(); }
<START_MOD>@org.ovirt.engine.ui.common.DefaultStringValue("&nbsp;") java.lang.String htmlSpace();<END_MOD>
<START_MOD>private void validateDomainMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetDomainMappings())) && (action.getRegistrationConfiguration().getDomainMappings().isSetRegistrationDomainMappings())) { action.getRegistrationConfiguration().getDomainMappings().getRegistrationDomainMappings().forEach(this::validateDomainMapping); } }<END_MOD>
private void updateIsLiveMergeSupported(<START_MOD>org.ovirt.engine.core.common.businessentities.VM vm<END_MOD>) { if (<START_MOD>vm<END_MOD> == null) { return; } if (((vm.getRunOnVds()) == null) || (!(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isLiveMergeSupported(vm)))) { setLiveMergeSupported(false); return; } org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel vmSnapshotListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (model)); org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (returnValue)); vmSnapshotListModel.setLiveMergeSupported(vds.getLiveMergeSupport()); } }); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostById(query, vm.getRunOnVds()); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { defaultType = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider<START_MOD>.getInstance()<END_MOD>.getDefaultNicType(((java.util.Collection<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType>) (returnValue))); supportedInterfaceTypes = ((java.util.Collection<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType>) (returnValue)); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getVmNicList(getNicsQuery, vmId); }
private void populate(java.util.Map<java.lang.String, java.lang.Boolean> bondsWithStatus, java.util.List<org.ovirt.engine.core.common.businessentities.Network> clusterNetworks, java.util.List<java.lang.String> networks, java.util.Map<java.lang.String, java.util.List<java.lang.String>> bondsWithListOfNics, org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface) { org.ovirt.engine.core.utils.Pair<java.lang.Boolean, java.lang.String> retVal = isRequiredNetworkInCluster(iface.getBondName(), clusterNetworks); java.lang.String networkName = retVal.getSecond(); if (retVal.getFirst()) { if (!(bondsWithStatus.containsKey(iface.getBondName()))) { bondsWithStatus.put(iface.getBondName(), false); } bondsWithStatus.put(iface.getBondName(), ((bondsWithStatus.get(iface.getBondName())) || ((iface.getStatistics().getStatus()) == (org.ovirt.engine.core.common.businessentities.InterfaceStatus.Up)))); if ((!(networks.contains(networkName))) && (!(bondsWithStatus.containsKey(iface.getName())))) { networks.add(networkName); } else if ((<START_MOD>(<END_MOD>networks.contains(networkName)) && (bondsWithStatus.containsKey(iface.getBondName()))) <START_MOD>&& (bondsWithStatus.get(iface.getBondName()))) <END_MOD>{ networks.remove(networkName); } if (!(bondsWithListOfNics.containsKey(iface.getBondName()))) { bondsWithListOfNics.put(iface.getBondName(), new java.util.ArrayList<java.lang.String>()); } bondsWithListOfNics.get(iface.getBondName()).add(iface.getName()); } }
@java.lang.Override protected org.ovirt.engine.api.model.VM doPopulate(org.ovirt.engine.api.model.VM model, org.ovirt.engine.core.common.businessentities.VM entity) { setPayload(model); setBallooning(model); setConsoleDevice(model); setVirtioScsiController(model); setCertificateInfo(model); <START_MOD>setVmOvfConfiguration(model); <END_MOD>return model; }
<START_MOD>@java.lang.Override public void perform() { if ((this.manager.isMonitoringNeeded()) && (getRefreshStatistics())) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = new org.ovirt.engine.core.vdsbroker.VmsStatisticsFetcher(this.manager); fetcher.fetch(); new org.ovirt.engine.core.vdsbroker.VmsMonitoring(this.manager, fetcher.getChangedVms(), fetcher.getVmsWithChangedDevices()).perform(); } }<END_MOD>
@org.junit.Test public void testUpdateMovingCluster() throws java.lang.Exception { setUpGetEntityExpectations(3); setUpEntityQueryExpectations(VdcQueryType.GetVdsGroupByVdsGroupId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[1] }, getVdsGroupEntity()); setUpGetPayloadExpectations(0, 2); setUpGetBallooningExpectations(); setUpGetBallooningExpectations(); setUpGetConsoleExpectations(new int[]{   }); setUpGetVmOvfExpectations(new int[]{   }); setUpGetVirtioScsiExpectations(new int[]{   }); <START_MOD>setUpGetSoundcardExpectations(new int[]{   }); <END_MOD>setUpGetRngDeviceExpectations(new int[]{   }); setUriInfo(setUpActionExpectations(VdcActionType.ChangeVMCluster, org.ovirt.engine.core.common.action.ChangeVMClusterParameters.class, new java.lang.String[]{ "ClusterId", "VmId" }, new java.lang.Object[]{ GUIDS[1], GUIDS[0] }, true, true, false)); setUpActionExpectations(VdcActionType.UpdateVm, org.ovirt.engine.core.common.action.VmManagementParametersBase.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, true, true); org.ovirt.engine.api.model.VM model = org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest.getModel(0); model.setId(GUIDS[0].toString()); model.setCluster(new org.ovirt.engine.api.model.Cluster()); model.getCluster().setId(GUIDS[1].toString()); verifyModelOnNewCluster(resource.update(model), 0); }
<START_MOD>@org.codehaus.jackson.annotate.JsonIgnore public double getActualDiskWithSnapshotsSizeInBytes() { return (((getActualDiskWithSnapshotsSize()) * 1024L) * 1024L) * 1024L; }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.scheduling.ClusterPolicy> getAll() { java.util.List<org.ovirt.engine.core.common.scheduling.ClusterPolicy> clusterPolicies = super.getAll(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.scheduling.ClusterPolicy> map = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.scheduling.ClusterPolicy>(); for (org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy : clusterPolicies) { map.put(clusterPolicy.getId(), clusterPolicy); } java.util.List<org.ovirt.engine.core.dao.scheduling.ClusterPolicyDaoImpl.ClusterPolicyUnit> clusterPolicyUnits = getCallsHandler().executeReadList("GetAllFromClusterPolicyUnitsGet", createClusterPolicyUnitRowMapper(), getCustomMapSqlParameterSource()); fillClusterPolicy(map, clusterPolicyUnits); return clusterPolicies; }<END_MOD>
<START_MOD>public void setVm(boolean vm) { isVm = vm; }<END_MOD>
<START_MOD>public java.lang.String getNumaNodes() { return this.mVdsDynamic.getnuma_nodes(); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData) { java.lang.String problem; if ((registerVmData.getError()) != null) { problem = registerVmData.getError(); } else { problem = registerVmData.getWarning(); } return problem == null ? null : com.google.gwt.safehtml.shared.SafeHtmlUtils.fromSafeConstant(problem); }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { clusterSelectedItemChanged(); }<END_MOD>
@java.lang.Override public java.lang.String getVerb(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<<START_MOD>?, ?, <END_MOD>?> op1) { return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().detachNetwork(op1.getName()); }
<START_MOD>public void testOvfDataUpdaterRunWithUpdateAndRemoveLowerThanCount(boolean ovfOnAnyDomainSupported) { int size = (ITEMS_COUNT_PER_UPDATE) - 1; doReturn(ovfOnAnyDomainSupported).when(command).ovfOnAnyDomainSupported(any(org.ovirt.engine.core.common.businessentities.StoragePool.class)); java.util.List<org.ovirt.engine.core.compat.Guid> vmGuids = generateGuidList(size); addVms(vmGuids, 2, VMStatus.Down, ImageStatus.OK, pool1.getId()); java.util.List<org.ovirt.engine.core.compat.Guid> templatesGuids = generateGuidList(size); addTemplates(templatesGuids, 2, VmTemplateStatus.OK, ImageStatus.OK, pool1.getId()); java.util.List<org.ovirt.engine.core.compat.Guid> removedGuids = generateGuidList(size); initTestForPool(pool1, vmGuids, templatesGuids, removedGuids); executeCommand(); verify(command, times(numberOfTimesToBeCalled(size, true))).performOvfUpdate(any(org.ovirt.engine.core.common.businessentities.StoragePool.class), anyMap()); if (!ovfOnAnyDomainSupported) { verify(ovfUpdateProcessHelper, times(size)).executeRemoveVmInSpm(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class)); } java.util.List<org.ovirt.engine.core.compat.Guid> needToBeUpdated = new java.util.LinkedList<org.ovirt.engine.core.compat.Guid>(vmGuids); needToBeUpdated.addAll(templatesGuids); verifyCorrectOvfDataUpdaterRun(pool1, needToBeUpdated, removedGuids); }<END_MOD>
private void onSavePostNameValidation() { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (getWindow())); if (!(model.validate())) { return; } if ((model.<START_MOD>getCurrentItem<END_MOD>()) instanceof org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel) { saveNfsStorage(); } else if ((model.<START_MOD>getCurrentItem<END_MOD>()) instanceof org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel) { saveLocalStorage(); } else if ((model.<START_MOD>getCurrentItem<END_MOD>()) instanceof org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel) { savePosixStorage(); } else { saveSanStorage(); } }
<START_MOD>public void restartGluster() { org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters parameters = new org.ovirt.engine.core.common.action.gluster.GlusterServiceParameters(getEntity().getClusterId(), getEntity().getId(), org.ovirt.engine.core.common.businessentities.gluster.ServiceType.GLUSTER, "restart"); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.ManageGlusterService, new java.util.ArrayList(java.util.Arrays.asList(new org.ovirt.engine.core.common.action.VdcActionParametersBase[]{ parameters })), new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { } }, null); }<END_MOD>
public static java.util.<START_MOD>List<END_MOD><<START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String<END_MOD>> GetLinuxOsTypes() { org.ovirt.engine.ui.uicommonweb.dataprovider.<START_MOD>AsyncReturnValue<java<END_MOD>.<START_MOD>util.List<java.lang.String>><END_MOD> <START_MOD>asyncReturnValue = new<END_MOD> org.ovirt.engine.ui.uicommonweb.dataprovider.<START_MOD>AsyncReturnValue<<END_MOD>java.util.<START_MOD>List<END_MOD><<START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String><END_MOD>>(<START_MOD>);<END_MOD> org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>frontend<END_MOD>.<START_MOD>Frontend<END_MOD>.<START_MOD>RunQuery(VdcQueryType<END_MOD>.<START_MOD>OsRepository<END_MOD>, <START_MOD>new<END_MOD> org.ovirt.engine.ui.uicommonweb.dataprovider.<START_MOD>OsQueryParameters(OsRepositoryVerb<END_MOD>.<START_MOD>GetlinuxOSs), asyncReturnValue); return asyncReturnValue.get()<END_MOD>; }
<START_MOD>private void updateActionAvailability() { boolean allowRestore = true; boolean allowDelete = true; boolean allowDeleteAll = true; boolean allowActivate = true; boolean allowDeactivate = true; if (((getSelectedItems()) == null) || ((getSelectedItems().size()) == 0)) { allowRestore = false; allowDelete = false; allowActivate = false; allowDeactivate = false; } else { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity> snapshots = org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity>cast(getSelectedItems()); if ((snapshots.size()) == 1) { allowRestore = true; allowActivate = (snapshots.get(0).getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterSnapshotStatus.STOPPED); allowDeactivate = (snapshots.get(0).getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterSnapshotStatus.STARTED); } } getRestoreSnapshotCommand().setIsExecutionAllowed(allowRestore); getDeleteSnapshotCommand().setIsExecutionAllowed(allowDelete); getDeleteAllSnapshotsCommand().setIsExecutionAllowed(allowDeleteAll); getActivateSnapshotCommand().setIsExecutionAllowed(allowActivate); getDeactivateSnapshotCommand().setIsExecutionAllowed(allowDeactivate); }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__CLUSTER); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__REMOVE); }
public static void GetNetworkList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid dataCenterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllNetworks, new org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.IdQueryParameters(dataCenterId), aQuery); }
<START_MOD>@org.ovirt.engine.ui.webadmin.Source("images/glusterRebalance/remove_brick_failed.png") com.google.gwt.resources.client.ImageResource removeBrickFailed();<END_MOD>
public boolean canRunVm(java.util.List<java.lang.String> messages, <START_MOD>org.ovirt.engine.core.common.businessentities.StoragePool storagePool, <END_MOD>java.util.List<org.ovirt.engine.core.<START_MOD>compat.Guid> vdsBlackList, org.ovirt.engine.core.compat.Guid destVds, org.ovirt.engine.core.<END_MOD>common.businessentities.<START_MOD>VDSGroup vdsGroup) { if (((((((((!(validateVmProperties(vm, messages))) || (!(validate(validateBootSequence(vm, runVmParam.getBootSequence(), getVmDisks()), messages)))) || (!(validate(new org.ovirt.engine.core.bll.validator.VmValidator(vm).vmNotLocked(), messages)))) || (!(validate(getSnapshotValidator().vmNotDuringSnapshot(vm.getId()), messages)))) || (!(validate(validateVmStatusUsingMatrix(vm), messages)))) || (!(validate(validateIsoPath(vm, runVmParam.getDiskPath(), runVmParam.getFloppyPath()), messages)))) || (!(validate(vmDuringInitialization(vm), messages)))) || (!(validate(validateVdsStatus(vm), messages)))) || (!(validate(validateStatelessVm(vm, getVmDisks(), runVmParam.getRunAsStateless()), messages)))) { return false; }<END_MOD> java.util.List<org.ovirt.engine.core.<START_MOD>common.businessentities.DiskImage<END_MOD>> <START_MOD>images = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks(getVmDisks(), true, false);<END_MOD> if ((<START_MOD>!(images.isEmpty())) && (((!(validate(validateStoragePoolUp(vm, storagePool), messages))) || (!(validate(validateStorageDomains(vm, isInternalExecution, images), messages)))) || (!(validate(validateImagesForRunVm(vm, images), messages)<END_MOD>)))) { return false; } <START_MOD>if (!(<END_MOD>org.ovirt.engine.core.bll.<START_MOD>scheduling.SchedulingManager.getInstance().canSchedule(vdsGroup, vm, vdsBlackList, null, destVds, messages<END_MOD>))) { return false; } return true; }
private static boolean isQosInSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS networkQos) { org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS ifaceQos = iface.getQos(); if (ifaceQos == networkQos) { return true; } else if ((ifaceQos == null) || (networkQos == null)) { return false; } else { return ifaceQos.equalValues(networkQos); } }
@java.lang.Override public org.ovirt.engine.api.model.DataCenter update(org.ovirt.engine.api.model.DataCenter incoming) {<START_MOD> org.ovirt.engine.api.restapi.resource.validation.ValidatorLocator.getValidator(org.ovirt.engine.api.model.DataCenter.class).validateEnums(incoming);<END_MOD> return performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetStoragePoolById, org.ovirt.engine.core.common.queries.StoragePoolQueryParametersBase.class), VdcActionType.UpdateStoragePool, new org.ovirt.engine.api.restapi.resource.BackendDataCenterResource.UpdateParametersProvider()); }
public void <START_MOD>setRdpImplementation(org.ovirt.engine.ui.uicommonweb.models.vms.RdpConsoleModel.ClientConsoleModeRdp consoleMode<END_MOD>) { <START_MOD>this.clientConsoleMode = consoleMode; switch (consoleMode<END_MOD>) { <START_MOD>case Native : setrdp(((org.ovirt.engine.ui.uicommonweb.models.vms.IRdp) (org.ovirt.engine.ui.uicommonweb.TypeResolver.getInstance().resolve(org.ovirt.engine.ui.uicommonweb.models.vms.IRdpNative.class)))); break; case Plugin : setrdp(((org.ovirt.engine.ui.uicommonweb.models.vms.IRdp) (org.ovirt.engine.ui.uicommonweb.TypeResolver.getInstance().resolve(org.ovirt.engine.ui.uicommonweb.models.vms.IRdpPlugin.class)))); break; default : org.ovirt.engine.ui.uicommonweb.models.vms.IRdpPlugin impl = ((org.ovirt.engine.ui.uicommonweb.models.vms.IRdpPlugin) (org.ovirt.engine.ui.uicommonweb.TypeResolver.getInstance().resolve(org.ovirt.engine.ui.uicommonweb.models.vms.IRdpPlugin.class))); setrdp((consoleUtils.isBrowserPluginSupported(ConsoleProtocol.RDP) ? impl : ((org.ovirt.engine.ui.uicommonweb.models.vms.IRdp) (org.ovirt.engine.ui.uicommonweb.TypeResolver.getInstance().resolve(org.ovirt.engine.ui.uicommonweb.models.vms.IRdpNative.class))))); break<END_MOD>; } }
public void setName(java.lang.String value) { if (!(org.ovirt.engine.core.compat.StringHelper.stringsEqual(name, value))) { name = value; OnPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs(<START_MOD>org.ovirt.engine.ui.uicommonweb.models.providers.ProviderGeneralModel.PROPERTY_NAME<END_MOD>)); } }
<START_MOD>public void setTasksMonitored(boolean tasksMonitored) { isTasksMonitored = tasksMonitored; }<END_MOD>
<START_MOD>@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.StorageConnection storageConnection) { validateParameters(storageConnection, "id"); return performAction(VdcActionType.AttachStorageConnectionToStorageDomain, new org.ovirt.engine.core.common.AttachDetachStorageConnectionParameters(storageDomainId, storageConnection.getId())); }<END_MOD>
private void ApplyNextRunConfiguration(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.Snapshot runSnap = <START_MOD>getSnapshotDAO<END_MOD>().get(vmId, SnapshotType.NEXT_RUN); if (runSnap != null) { <START_MOD>getSnapshotDAO().remove(runSnap.getId()); org.ovirt.engine.core.common.businessentities.VM vm = <END_MOD>org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().<START_MOD>getVmDao().get(vmId); if (vm != null) { java.util.Date originalCreationDate = vm.getVmCreationDate(); new org.ovirt.engine.core.bll.snapshots.SnapshotsManager().updateVmFromConfiguration(vm, runSnap.getVmConfiguration()); vm.setVmCreationDate(originalCreationDate<END_MOD>); org.ovirt.engine.core.common.action.VmManagementParametersBase updateVmParams = createUpdateVmParameters(vm); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.UpdateVm, updateVmParams); } } }
private void edit(org.ovirt.engine.ui.uicommonweb.models.ListModel model, final boolean topTableIsEdited) { org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel> table = getTable(topTableIsEdited); org.ovirt.engine.ui.uicompat.IEventListener listener = (topTableIsEdited) ? topItemsChangedListener : bottomItemsChangedListener; if (listener != null) { table.asEditor().flush().getItemsChangedEvent().removeListener(listener); } listener = new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { getSelectionModel(topTableIsEdited).clear(); } }; <START_MOD>if (topTableIsEdited) { topItemsChangedListener = listener; } else { bottomItemsChangedListener = listener; } <END_MOD>model.getItemsChangedEvent().addListener(listener); table.asEditor().edit(model); }
private java.lang.String getDiskIsBeingMigratedMessage() { if ((cachedDiskIsBeingMigratedMessage) == null) { cachedDiskIsBeingMigratedMessage = new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_IS_BEING_MIGRATED).withOptional("DiskName", ((<START_MOD>org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.<END_MOD>getImage()) != null ? getDiskAlias() : null)).toString(); } return cachedDiskIsBeingMigratedMessage; }
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { return source; } return new java.util.ArrayList<org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.DiskImage>(); }
@org.ovirt.engine.ui.frontend.DefaultStringValue( ${action} ${type}. Values are out of range. java.lang.String <START_MOD>ACTION_TYPE_FAILED_QOS_CPU_OUT_OF_RANGE_VALUES<END_MOD>();
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType model) { driver.edit(model); profileEditor.addLabelStyleName(style.noDisplay()); profileEditor.addContentWidgetStyleName(style.contentStyle()); profileEditor.setElementId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(elementId, model.getNetworkInterface().getName())); syncSelectedItemWithNetworkInterface(model); model.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.EventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { syncSelectedItemWithNetworkInterface(model); com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.common.widget.profile.ProfileInstanceTypeEditor.this, model); } }); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) {<START_MOD> clearVms();<END_MOD> org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = dataCenters.getSelectedItem(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenter.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(this, createGetStorageDomainsByStoragePoolIdCallback(dataCenter))); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(getId(), parentDeviceName, capability, iommuGroup, productName, productId, vendorName, vendorId, parentPhysicalFunction, totalVirtualFunctions, networkInterfaceName, <START_MOD>assignable, <END_MOD>vmId); }
@java.lang.Override public void flush(org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos) { if (getThroughput().<START_MOD>getChoiceGroupTotal<END_MOD>().getEntity()) { storageQos.setMaxThroughput(getThroughput().getTotal().getEntity()); <START_MOD>} else if (getThroughput().getChoiceGroupReadWrite().getEntity()) { <END_MOD>storageQos.setMaxReadThroughput(getThroughput().getRead().getEntity()); storageQos.setMaxWriteThroughput(getThroughput().getWrite().getEntity()); } else { storageQos.setMaxThroughput(null); storageQos.setMaxReadThroughput(null); storageQos.setMaxWriteThroughput(null); } if (getIops().<START_MOD>getChoiceGroupTotal<END_MOD>().getEntity()) { storageQos.setMaxIops(getIops().getTotal().getEntity()); <START_MOD>} else if (getIops().getChoiceGroupReadWrite().getEntity()) { <END_MOD>storageQos.setMaxReadIops(getIops().getRead().getEntity()); storageQos.setMaxWriteIops(getIops().getWrite().getEntity()); } else { storageQos.setMaxIops(null); storageQos.setMaxReadIops(null); storageQos.setMaxWriteIops(null); } }
@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.widget.table.column.Context context, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb) { if (volume == null) { return; } <START_MOD>org.ovirt.engine.ui.webadmin.widget.table.column.VolumeStatusCell.VOLUMESTATUS vStatus = getVolumeStatus(<END_MOD>volume); com.google.gwt.resources.client.ImageResource statusImage = <START_MOD>getStatusImage(vStatus)<END_MOD>; java.lang.String tooltip<START_MOD> = getToolTip(vStatus);<END_MOD> com.google.gwt.safehtml.shared.SafeHtml statusImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(statusImage).getHTML()); sb.append(applicationTemplates.statusTemplate(statusImageHtml, tooltip)); }
private void Run() { org.ovirt.engine.core.common.businessentities.VM entity = ((org.ovirt.engine.core.common.businessentities.VM) (getItem().getEntity())); boolean reinitialize = (!(entity.isInitialized())) && (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsWindowsOsType(entity.getVmOs())); org.ovirt.engine.core.common.action.RunVmParams tempVar = new org.ovirt.engine.core.common.action.RunVmParams(entity.getId()); tempVar.<START_MOD>setInitializationType<END_MOD>(<START_MOD>InitializationType.Sysprep<END_MOD>); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.RunVm, tempVar); }
<START_MOD>private boolean refreshVdsmFileList(org.ovirt.engine.core.compat.Guid repoStoragePoolId, org.ovirt.engine.core.compat.Guid repoStorageDomainId, org.ovirt.engine.core.bll.IsoDomainListSyncronizer.FileListRefreshed fileListRefreshed, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageFileType, org.ovirt.engine.core.common.vdscommands.VDSReturnValue fileStats) { if (repoStorageDomainId == null) { return false; } try { @java.lang.SuppressWarnings("unchecked") java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> fileStatsReturnValue = ((java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>>) (fileStats.getReturnValue())); boolean vdsmRefreshOk = (fileStats.getSucceeded()) && (fileStatsReturnValue != null); org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.debug("The refresh process from VDSM, for {}, {}.", imageFileType, succeededOrFailed(vdsmRefreshOk)); if (!vdsmRefreshOk) { return false; } boolean refreshSucceeded = org.ovirt.engine.core.bll.IsoDomainListSyncronizer.refreshIsoFileListMetaData(repoStorageDomainId, repoStorageDom, fileStatsReturnValue, imageFileType); if (refreshSucceeded && (fileListRefreshed != null)) { fileListRefreshed.onFileListRefreshed(repoStoragePoolId, fileStatsReturnValue.keySet()); } return refreshSucceeded; } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.warn("The refresh process for {} failed: {}", imageFileType, e.getMessage()); org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.debug("Exception", e); return false; } }<END_MOD>
@java.lang.Override protected void AsyncSearch() { super.AsyncSearch(); org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object ReturnValue) { org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleListModel roleListModel = ((org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleListModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD>> filteredList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD>>(); for (org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD> item : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD>>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue()))) { if (((roleListModel.getItemsFilter()) == null) || ((roleListModel.getItemsFilter()) == (item.getType()))) { filteredList.add(item); } } roleListModel.setItems(filteredList); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllRoles, new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters(), _asyncQuery); }
<START_MOD>private void newSecret() { if ((getWindow()) != null) { return; } final org.ovirt.engine.ui.uicommonweb.models.storage.LibvirtSecretModel secretModel = createSecretModel(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().createSecretTitle(), HelpTag.create_secret, "create_secret"); setWindow(secretModel); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getNewGuid(new org.ovirt.engine.ui.frontend.AsyncQuery(secretModel, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.compat.Guid randomGuid = ((org.ovirt.engine.core.compat.Guid) (returnValue)); secretModel.getUuid().setEntity(randomGuid.toString()); } })); }<END_MOD>
protected boolean disconnectStorageDomain(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain)<START_MOD> { try<END_MOD> { return org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(storageDomain.getStorageType()).disconnectStorageFromDomainByVdsId(storageDomain, getVdsId()); }<START_MOD> catch (java.lang.RuntimeException e) { log.error( while disconnect storage domain e); return false; } }<END_MOD>
public boolean IsFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled<START_MOD>, boolean statelessEnabled<END_MOD>) { boolean returnValue = true; if (!(IsFieldUpdatable(name))) { if (((fieldContainer != null) && ((container) != null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values != null) ? values.contains(name) : false; if ((!returnValue) && <START_MOD>(<END_MOD>hotsetEnabled<START_MOD> || statelessEnabled)) { returnValue = (<END_MOD>isHotSetField(name)<START_MOD>) || (isStatelessField(name))<END_MOD>; } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn( '{}' can not be updated when status is '{}' name, status); } } return returnValue; }
<START_MOD>private void setType(org.ovirt.engine.ui.uicommonweb.models.EntityModel value) { privateType = value; }<END_MOD>
<START_MOD>private void getMenuLayout(org.ovirt.engine.ui.webadmin.widget.tab.PrimaryMenuItem[] items, org.ovirt.engine.ui.webadmin.widget.tab.SecondaryMenuItem[] secondaryItems) { layoutMap.clear(); for (org.ovirt.engine.ui.webadmin.widget.tab.PrimaryMenuItem layout : items) { if ((layout.getHref()) != null) { org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails details = new org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails(); details.setPrimaryPriority(layout.getIndex()); details.setSecondaryTitle(layout.getTitle()); details.setIcon(layout.getIcon()); layoutMap.put(layout.getHref(), details); } } for (org.ovirt.engine.ui.webadmin.widget.tab.SecondaryMenuItem subMenu : secondaryItems) { org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails details = new org.ovirt.engine.ui.webadmin.widget.tab.MenuLayoutMenuDetails(); details.setPrimaryPriority(subMenu.getPrimaryMenu().getIndex()); details.setPrimaryTitle(subMenu.getPrimaryMenu().getTitle()); details.setSecondaryPriority(subMenu.getPriority()); details.setSecondaryTitle(subMenu.getTitle()); details.setIcon(subMenu.getIcon()); layoutMap.put(subMenu.getHref(), details); } }<END_MOD>
<START_MOD>private void logDeviceInformation(org.ovirt.engine.core.compat.Guid vmId, java.util.Map device) { java.lang.String message = "Received a {0} Device without an address when processing VM {1} devices, skipping device"; java.lang.String deviceType = ((java.lang.String) (device.get(VdsProperties.Device))); if (shouldLogDeviceDetails(deviceType)) { java.util.Map<java.lang.String, java.lang.Object> deviceInfo = device; org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.infoFormat((message + ": {2}"), org.apache.commons.lang.StringUtils.defaultString(deviceType), vmId, deviceInfo); } else { org.ovirt.engine.core.vdsbroker.VmsMonitoring.log.infoFormat(message, org.apache.commons.lang.StringUtils.defaultString(deviceType), vmId); } }<END_MOD>
<START_MOD>@org.junit.Test public void test0() { org.ovirt.engine.api.types.V4Vm object = newVm().setMemory(0).build(); assertEquals("{'memory':0}", objectToJson(object)); }<END_MOD>
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { <START_MOD>getProviders().setIsChangable(false); providers_SelectedItemChanged<END_MOD>(); if ((getIsDiscorveredHosts().getEntity()) != null) { updateHostList(getIsDiscorveredHosts().getEntity()); } <START_MOD>else { updateHostList(true); updateHostList(false); <END_MOD>}<START_MOD> }<END_MOD>
private void newVm() { if ((<START_MOD>org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.<END_MOD>getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior()); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newVmTitle()); model.setHelpTag(HelpTag.new_vm); model.setHashName("new_vm"); model.setIsNew(true); model.getVmType().setSelectedItem(VmType.Server); model.setCustomPropertiesKeysList(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getCustomPropertiesList()); model.setIsAdvancedModeLocalStorageKey("wa_vm_dialog"); setWindow(model); model.initialize(getSystemTreeSelectedItem()); org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand switchModeCommand = new org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand(); switchModeCommand.init(model); model.getCommands().add(switchModeCommand); model.getProvisioning().setEntity(true); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSave", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__MAC__POOL); }
<START_MOD>public void setHelpTag(java.lang.String helpTag, java.lang.String helpComment) { this.helpTag = helpTag; this.helpComment = helpComment; }<END_MOD>
<START_MOD>private void expandTree(com.google.gwt.user.cellview.client.TreeNode node, boolean expand, int expandLevel) { if (node == null) { return; } if ((node.getChildCount()) > 0) { for (int i = 0; i < (node.getChildCount()); i++) { boolean expandNode = (i == 0) ? expandLevel > 0 : expand; expandTree(node.setChildOpen(i, expandNode), expand, (expandLevel - 1)); } } }<END_MOD>
<START_MOD>public void setResourceManager(org.ovirt.engine.core.vdsbroker.ResourceManager resourceManager) { this.resourceManager = resourceManager; }<END_MOD>
@java.lang.Override public void execute() { if ((connected.getCount()) == 0) { connected = new java.util.concurrent.CountDownLatch(1); } if ((subscribed.getCount()) == 0) { subscribed = new java.util.concurrent.CountDownLatch(1); } org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message message = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().connect().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ACCEPT, "1.2"); if (policy.isHeartbeat()) { message.withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_HEART_BEAT, (( + ",") + (reduceGracePeriod(policy.getHeartbeat())))); } send(message.build()); subscribtionId = java.util.UUID.randomUUID().toString(); send(new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().subscribe().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, <START_MOD>getResponseQueue()<END_MOD>).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ID, subscribtionId).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ACK, "client").build()); }
@java.lang.Override protected void executeQueryCommand() { clusterId = org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRebalanceStatusQuery.getParameters().getClusterId(); org.ovirt.engine.core.compat.Guid volumeId = org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRebalanceStatusQuery.getParameters().getVolumeId(); if (volumeId != null) { volume = org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRebalanceStatusQuery.getGlusterVolumeDao().getById(volumeId); if ((volume) == null) { throw new java.lang.RuntimeException(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID.toString()); } if ((clusterId) == null) { clusterId = volume.getClusterId(); } asyncTask = volume.getAsyncTask(); org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRebalanceStatusQuery.getQueryReturnValue().setReturnValue(fetchTaskStatusDetails()); } }
private void validateQosNotPartiallyConfigured() { java.util.Set<java.lang.String> someSubInterfacesHaveQos = new java.util.HashSet<>(); java.util.Set<java.lang.String> notAllSubInterfacesHaveQos = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : params.getInterfaces()) { org.ovirt.engine.core.common.businessentities.network.Network network = getExistingClusterNetworks().get(iface.getNetworkName()); java.lang.String baseIfaceName = org.ovirt.engine.core.utils.NetworkUtils.stripVlan(iface); if (org.ovirt.engine.core.utils.NetworkUtils.qosConfiguredOnInterface(iface, network)) { someSubInterfacesHaveQos.add(baseIfaceName); } else { notAllSubInterfacesHaveQos.add(baseIfaceName); } } for (java.lang.String ifaceName : someSubInterfacesHaveQos) { if (notAllSubInterfacesHaveQos.contains(ifaceName)) { addViolation(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_INTERFACES_WITHOUT_QOS, ifaceName); } } }
<START_MOD>@org.ovirt.engine.ui.common.widget.table.cell.Template("<span class=\"fa {0} inline-icon\" style=\"color: {1}\"/>") com.google.gwt.safehtml.shared.SafeHtml icon(java.lang.String className, java.lang.String color);<END_MOD>
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel object) { driver.edit(object); final org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel storageModel = object; storageModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.EventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { revealStorageView(storageModel); } }); storageModel.getDataCenterAlert().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.EventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { datacenterAlertIcon.setVisible(storageModel.getDataCenterAlert().getIsAvailable()); datacenterAlertIcon.setTitle(storageModel.getDataCenterAlert().getEntity()); } }); }
public static org.ovirt.engine.core.bll.ValidationResult canRunActionOnNonManagedVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.action.VdcActionType actionType) { org.ovirt.engine.core.bll.ValidationResult validationResult = ValidationResult.VALID; if (((vm.isHostedEngine()) && (!(org.ovirt.engine.core.bll.VmHandler.COMMANDS_ALLOWED_ON_HOSTED_ENGINE.contains(actionType)))) || ((vm.isExternalVm()) && (!(org.ovirt.engine.core.bll.VmHandler.COMMANDS_ALLOWED_ON_EXTERNAL_VMS.contains(actionType))))) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_CANNOT_RUN_ACTION_ON_NON_MANAGED_VM); } return validationResult; }
<START_MOD>private void fastForwardDisksToActiveSnapshot() { if ((getParameters().getDisks()) != null) { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> diskImagesToUpdate = getDiskImagesForVm(); diskImagesToUpdate.removeAll(getParameters().getDisks()); for (org.ovirt.engine.core.common.businessentities.DiskImage diskImage : diskImagesToUpdate) { org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getImageDao().updateImageVmSnapshotId(diskImage.getImageId(), newActiveSnapshotId); } } }<END_MOD>
private <START_MOD>org.ovirt.engine.ui.uicommonweb.validation.ValidationResult<END_MOD> <START_MOD>failWith<END_MOD>(org.ovirt.engine.ui.uicommonweb.validation.<START_MOD>ValidationResult result, java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String errorMessage<END_MOD>) { <START_MOD>result.setSuccess(false); result.setReasons(java.util.Arrays.asList(errorMessage)); <END_MOD>return <START_MOD>result<END_MOD>; }
<START_MOD>protected void initTableColumns(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { deviceTable.addEntityModelColumn(new org.ovirt.engine.ui.common.widget.table.column.EntityModelTextColumn<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice>() { @java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.gluster.StorageDevice entity) { return entity.getName(); } }, constants.deviceName()); deviceTable.addEntityModelColumn(new org.ovirt.engine.ui.common.widget.table.column.EntityModelTextColumn<org.ovirt.engine.core.common.businessentities.gluster.StorageDevice>() { @java.lang.Override public java.lang.String getText(org.ovirt.engine.core.common.businessentities.gluster.StorageDevice entity) { if ((entity.getSize()) != null) { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit, java.lang.Double> convertedSize = org.ovirt.engine.core.common.utils.SizeConverter.autoConvert(entity.getSize(), SizeUnit.MB); return ((formatSize(convertedSize.getSecond())) + " ") + (convertedSize.getFirst().toString()); } else { return ""; } } }, constants.size()); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( already exist java.lang.String templateAlreadyExistsMsg();
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); if (!(super.canDoAction())) { return false; } if (!(validate(getBrickValidator().canStopOrCommitRemoveBrick(volume, getParameters().getBricks())))) { return false; } if ((!(getGlusterTaskUtils().isTaskOfType(volume, GlusterTaskType.REMOVE_BRICK))) || (!((getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.STARTED)) || (getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.FINISHED))))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REMOVE_BRICKS_NOT_STARTED); } return true; }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.TEMPLATE); java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> vmTemplates = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { vmTemplates.add(ovfHelper.readVmTemplateFromOvf(ovf.getOvfData())<START_MOD>.getFirst()<END_MOD>); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(( to parse a given ovf configuration:   + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setExceptionString(( to parse a given ovf configuration   + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setReturnValue(vmTemplates); }
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__HOT_SET_MEMORY); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__VM); <START_MOD>addValidateMessageVariable<END_MOD>("clusterVersion", org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getVdsGroupCompatibilityVersion()); <START_MOD>addValidateMessageVariable<END_MOD>("architecture", org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getClusterArch()); }
private void validateSource() { <START_MOD>clearErrorAndWarning<END_MOD>(); if (((importSources.getSelectedItem()) == (ImportSource.EXPORT_DOMAIN)) && ((exportDomain) == null)) { setError(constants.notAvailableWithNoActiveExportDomain()); } }
@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__EXTEND); }
<START_MOD>@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = org.ovirt.engine.core.bll.ExtendImageSizeCommand.getImage(); org.ovirt.engine.core.bll.ExtendImageSizeCommand.getParameters().setStoragePoolId(diskImage.getStoragePoolId().getValue()); org.ovirt.engine.core.bll.ExtendImageSizeCommand.getParameters().setStorageDomainId(diskImage.getStorageIds().get(0)); org.ovirt.engine.core.bll.ExtendImageSizeCommand.getParameters().setImageGroupID(diskImage.getId()); org.ovirt.engine.core.bll.ExtendImageSizeCommand.lockImage(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.ExtendImageSize, createExtendImageSizeVDSCommandParameters(diskImage)); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.compat.Guid taskId = createTask(vdsReturnValue.getCreationInfo(), VdcActionType.ExtendImageSize); org.ovirt.engine.core.bll.ExtendImageSizeCommand.getReturnValue().getTaskIdList().add(taskId); org.ovirt.engine.core.bll.ExtendImageSizeCommand.setSucceeded(true); } }<END_MOD>
@java.lang.Override public void setEntity(<START_MOD>E<END_MOD> value) { if ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.getEntity()) == null) { super.setEntity(value); return; } if (value != null) { if (!(((org.ovirt.engine.core.common.businessentities.IVdcQueryable) (value)).getQueryableId().equals(((org.ovirt.engine.core.common.businessentities.IVdcQueryable) (org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.getEntity())).getQueryableId()))) { super.setEntity(value); return; } } if (!(org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.getEntity().equals(value))) { super.setEntity(value); return; } setEntity(value, false); }
<START_MOD>@org.junit.Test public void canDoActionFailsOnNoConflictServers() { cmd = spy(new org.ovirt.engine.core.bll.gluster.UpdateGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterResolveHookParameters(HOOK_ID))); org.ovirt.engine.core.common.businessentities.gluster.GlusterHookEntity hook = getHookEntity(); hook.setServerHooks(java.util.Collections.singletonList(getGlusterServerHook(0, GlusterHookStatus.MISSING))); setupMocks(cmd, true, hook); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_HOOK_NO_CONFLICT_SERVERS.toString())); }<END_MOD>
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((userProfileDao.getByUserId(org.ovirt.engine.core.bll.UpdateUserProfileCommand.getUserId())) == null) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_PROFILE_NOT_EXIST); } return true; }
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("vNode-") java.lang.String numaVNodeLabel();<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult externalNetworkIsVmNetwork() { return network.isVmNetwork() ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_MUST_BE_VM_NETWORK); }
<START_MOD>private org.ovirt.engine.ui.webadmin.widget.table.column.MenuCell<org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport> getRemoveBrickActivityMenu(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { org.ovirt.engine.ui.webadmin.widget.table.column.MenuCell<org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport> menuCell = new org.ovirt.engine.ui.webadmin.widget.table.column.MenuCell<org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport>() { @java.lang.Override protected boolean isVisible(org.ovirt.engine.core.common.businessentities.gluster.GlusterTaskSupport value) { return (value.getAsyncTask().getType()) == (org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REMOVE_BRICK); } }; menuCell.addMenuItem(constants.removeBricksStop(), getMainModel().getBrickListModel().getStopRemoveBricksCommand()); menuCell.addMenuItem(constants.removeBricksCommit(), getMainModel().getBrickListModel().getCommitRemoveBricksCommand()); return menuCell; }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> runScores(java.util.List<org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.Integer>> scoreNameAndWeight, java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs, org.ovirt.engine.core.compat.Guid vmID, java.util.Map<java.lang.String, java.lang.String> propertiesMap) { try { <START_MOD>if (scoreNameAndWeight.isEmpty()) return null; <END_MOD>org.apache.xmlrpc.client.XmlRpcClient client = new org.apache.xmlrpc.client.XmlRpcClient(); client.setConfig(config); java.lang.Object result = client.execute(org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.SCORE, createScoreArgs(scoreNameAndWeight, hostIDs, vmID, propertiesMap)); return parseScoreResults(result); } catch (org.apache.xmlrpc.XmlRpcException e) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.log.error( not communicate with the external scheduler while running weight modules e); <START_MOD>org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(loggable, AuditLogType.FAILED_TO_CONNECT_TO_SCHEDULER_PROXY); <END_MOD>return null; } }
@org.junit.Test public void testNetworkAttachedToClusterWhenNotAttached() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setId(org.ovirt.engine.core.compat.Guid.newGuid()); <START_MOD>network.setName("networkName"); <END_MOD>org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNetworkId(network.getId()); <START_MOD>attachment.setNetworkName(network.getName()); <END_MOD>org.ovirt.engine.core.common.businessentities.network.NetworkClusterId networkClusterId = new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(host.getVdsGroupId(), network.getId()); when(networkClusterDaoMock.get(eq(networkClusterId))).thenReturn(null); when(networkDaoMock.get(eq(network.getId()))).thenReturn(network); <START_MOD>org.ovirt.engine.core.common.errors.EngineMessage engineMessage = org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_OF_GIVEN_NAME_NOT_EXISTS_IN_CLUSTER; <END_MOD>assertThat(createNetworkAttachmentValidator(attachment).networkAttachedToCluster(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(<START_MOD>engineMessage, org.ovirt.engine.core.utils.ReplacementUtils.getVariableAssignmentString(engineMessage, network.getName())<END_MOD>)); }
protected void listenOnRadioButtons(<START_MOD>final org.ovirt.engine.ui.uicommonweb.models.userportal.IUserPortalListModel model<END_MOD>) { registerHandler(getView().getRdpRadioButton().addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { getView().rdpSelected(event.getValue()); getView().spiceSelected((!(event.getValue()))); <START_MOD>getView().setWanOptionsVisible(((wanOptionsAvailable) && (!(event.getValue())))); <END_MOD>} })); registerHandler(getView().getSpiceRadioButton().addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { getView().spiceSelected(event.getValue()); getView().rdpSelected((!(event.getValue()))); <START_MOD>getView().setWanOptionsVisible(((wanOptionsAvailable) && (event.getValue()))); } })); }<END_MOD>
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.gluster.StorageDeviceListModel getStorageDeviceListModel() { return storageDeviceListModel; }<END_MOD>
@java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object result) { getWindow().StopProgress();<START_MOD> org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (result)); if ((returnValue == null) || (!(returnValue.getSucceeded()))) { onEmptyGlusterHosts(clusterModel); return; }<END_MOD> java.util.Map<java.lang.String, java.lang.String> hostMap = ((java.util.Map<java.lang.String, java.lang.String>) (<START_MOD>returnValue.getReturnValue()<END_MOD>)); if (hostMap == null) { onEmptyGlusterHosts(clusterModel); return; } if ((hostMap.containsValue(null)) || (hostMap.containsValue(""))) { onGlusterHostsWithoutFingerprint(hostMap, clusterModel); return; } java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); for (java.util.Map.Entry<java.lang.String, java.lang.String> host : hostMap.entrySet()) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostDetailModel hostModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.HostDetailModel(host.getKey(), host.getValue()); hostModel.setName(host.getKey()); hostModel.setPassword(""); org.ovirt.engine.ui.uicommonweb.models.EntityModel entityModel = new org.ovirt.engine.ui.uicommonweb.models.EntityModel(hostModel); list.add(entityModel); } importClusterHosts(clusterModel, list); }
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to create Vnic Profile") java.lang.String allowToCreateVnicProfileRoleTreeTooltip();<END_MOD>
private void handleAnyChildSPMTaskCompletion(boolean succeeded) { java.util.List<org.ovirt.engine.core.compat.Guid> childCommandIds = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.MergeExtendCommand.getCommandId()); if (childCommandIds.isEmpty()) { return; } org.ovirt.engine.core.compat.Guid currentChildId = childCommandIds.get(0); org.ovirt.engine.core.bll.MergeExtendCommand.log.info( child command {} completion currentChildId); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(currentChildId))) { org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand(currentChildId); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(currentChildId); if (((command != null) && (cmdEntity != null)) && (!(cmdEntity.isCallbackNotified()))) { if (!succeeded) { command.getParameters().setTaskGroupSuccess(false); } org.ovirt.engine.core.bll.Backend.getInstance().endAction(VdcActionType.ExtendImageSize, command.getParameters(), org.ovirt.engine.core.bll.MergeExtendCommand.cloneContextAndDetachFromParent()); if (succeeded<START_MOD> && ((<END_MOD>org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(currentChildId)<START_MOD>) != null)) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(currentChildId)<END_MOD>.setCallbackNotified(true); } } } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> getAllForCluster(org.ovirt.engine.core.compat.Guid id) { return getAllForCluster(id, null, false); }
<START_MOD>public<END_MOD> java.lang.Integer calcMaxVCpu() { <START_MOD>return<END_MOD> vm.<START_MOD>calcMaxVCpu<END_MOD>(); }
private boolean canRemoveVmPool(org.ovirt.engine.core.compat.Guid vmPoolId) { return (<START_MOD>org.ovirt.engine.core.bll.RemoveVmPoolCommand.getVmPoolDao().getVmPoolsMapByVmPoolId<END_MOD>(vmPoolId).size()) == 0; }
private void validateRemove() { if (((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.<START_MOD>getVds().getStoragePoolId<END_MOD>()); validateRetrievedMetadataDevices(); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageStaticData()); java.util.List<java.lang.String> metadataDevices = blockStorageDomainHelper.findMetadataDevices(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce()); if (!(metadataDevices.isEmpty())) { org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.setCustomCommaSeparatedValues("deviceIds", metadataDevices); auditLogDirector.log(this, AuditLogType.USER_REDUCE_DOMAIN_DEVICES_FAILED_METADATA_DEVICES); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException,   perform on metadata devices } } validateFreeSpace(); }
public static void getAllNetworkQos(org.ovirt.engine.core.compat.Guid dcId, org.ovirt.engine.ui.frontend.AsyncQuery query) { query.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS>>() { @java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS> Convert(java.lang.Object returnValue, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS> qosList = (returnValue == null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS>() : ((java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS>) (returnValue)); qosList.add(0, NetworkQoSModel.EMPTY_QOS); return qosList; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworkQosByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dcId), query); }
<START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.ui.uicommonweb.models.EntityModel object) { return null; }<END_MOD>
<START_MOD>public void setSpmPriority(java.lang.String value) { if (((spmPriority) == null) || (!(spmPriority.equals(value)))) { this.spmPriority = value; OnPropertyChanged(new org.ovirt.engine.core.compat.PropertyChangedEventArgs("SpmPriority")); } }<END_MOD>
private void setConfigurationEntries(org.ovirt.engine.core.domains.DomainsConfigurationEntry domainNameEntry, org.ovirt.engine.core.domains.DomainsConfigurationEntry adUserNameEntry, org.ovirt.engine.core.domains.DomainsConfigurationEntry adPasswordEntry, org.ovirt.engine.core.domains.DomainsConfigurationEntry authModeEntry, org.ovirt.engine.core.domains.DomainsConfigurationEntry ldapServersEntry, org.ovirt.engine.core.domains.DomainsConfigurationEntry adUserIdEntry, org.ovirt.engine.core.domains.DomainsConfigurationEntry ldapProviderTypeEntry, org.ovirt.engine.core.domains.DomainsConfigurationEntry changePasswordUrlEntry) throws org.ovirt.engine.core.domains.ManageDomainsResult { configurationProvider.setConfigValue(ConfigValues.AdUserName, adUserNameEntry); configurationProvider.setConfigValue(ConfigValues.AdUserPassword, adPasswordEntry, false); configurationProvider.setConfigValue(ConfigValues.LdapServers, ldapServersEntry); configurationProvider.setConfigValue(ConfigValues.AdUserId, adUserIdEntry); configurationProvider.setConfigValue(ConfigValues.LDAPSecurityAuthentication, authModeEntry); configurationProvider.setConfigValue(ConfigValues.DomainName, domainNameEntry); configurationProvider.setConfigValue(ConfigValues.LDAPProviderTypes, ldapProviderTypeEntry); if (changePasswordUrl) { configurationProvider.setConfigValue(ConfigValues.<START_MOD>ChangePasswordMsg<END_MOD>, changePasswordUrlEntry); } }
<START_MOD>private void OnSaveHosts() { org.ovirt.engine.ui.uicommonweb.models.hosts.MultipleHostsModel hostsModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.MultipleHostsModel) (getWindow())); if (hostsModel == null) { return; } if (!(hostsModel.validate())) { return; } OnSaveInternalWithModel(hostsModel.getClusterModel()); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( you sure you want to Shut down the following Virtual Machines? java.lang.String areYouSureYouWantToShutDownTheFollowingVirtualMachinesMsg();
@org.junit.Test public void <START_MOD>validateFailsOnNoHook<END_MOD>() { cmd = spy(new org.ovirt.engine.core.bll.gluster.AddGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); setUpMocksForAdd(false); assertFalse(cmd.<START_MOD>validate<END_MOD>()); assertTrue(cmd.getReturnValue().<START_MOD>getValidateMessages<END_MOD>().contains(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_DOES_NOT_EXIST.toString())); }
<START_MOD>@java.lang.Override protected void perform() { org.ovirt.engine.core.bll.RebootVmCommand.log.infoFormat("Sending reboot command for VM {0}.", org.ovirt.engine.core.bll.RebootVmCommand.getVm().getName()); final org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.RebootVm, new org.ovirt.engine.core.common.vdscommands.VdsAndVmIDVDSParametersBase(org.ovirt.engine.core.bll.RebootVmCommand.getVdsId(), org.ovirt.engine.core.bll.RebootVmCommand.getVmId())); setActionReturnValue(returnValue.getReturnValue()); setSucceeded(returnValue.getSucceeded()); }<END_MOD>
protected int getMaxVolumeChain() { return org.ovirt.engine.core.<START_MOD>common<END_MOD>.<START_MOD>config<END_MOD>.<START_MOD>Config<END_MOD>.<START_MOD><java<END_MOD>.<START_MOD>lang.Integer>getValue(ConfigValues.MaxImagesInChain)<END_MOD>; }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { <START_MOD>log.debug( non-compensation state, immediately releasing <END_MOD>macs<START_MOD> {}<END_MOD>.<START_MOD> macs); macPool.freeMacs<END_MOD>(<START_MOD>macs<END_MOD>); }
<START_MOD>public java.lang.String getHelpNote() { java.lang.String s = "\n\n\n" + (((((((("### Notes:\n" + "## 1. Passwords: password can be set in interacetive mode ie:\n") + "### engine-config -s PasswordEntry=interactive\n") + "### or via file with one of the following options:\n") + "### engine-config -s PasswordEntry --admin-pass-file=/tmp/mypass\n") + "### engine-config -s PasswordEntry=/tmp/mypass\n") + "### 2. In order for your change(s) to take effect,\n") + "### restart the oVirt engine service (using: \'service ovirt-engine restart\').\n") + "################################################################################\n\n"); return s; }<END_MOD>
private java.lang.String getProxyUri() { <START_MOD>java.lang.String<END_MOD> <START_MOD>scheme<END_MOD> <START_MOD>=<END_MOD> (org.ovirt.engine.core.common.config.Config.<java.lang.<START_MOD>Boolean<END_MOD>>getValue(ConfigValues.<START_MOD>ImageProxySSLEnabled<END_MOD>))<START_MOD> ? "https" : "http"; java.lang.String address = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.ImageProxyAddress); return ((scheme + "://") + address<END_MOD>) + "/images"; }
<START_MOD>java.lang.String GlusterAddWebhookException();<END_MOD>
<START_MOD>@java.lang.Override protected void addPermissions() { org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.addPermission(new org.ovirt.engine.core.common.businessentities.Permission(org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.EVERYONE_OBJECT_ID, PredefinedRoles.CPU_PROFILE_OPERATOR.getId(), getProfileId(), org.ovirt.engine.core.common.VdcObjectType.CpuProfile)); }<END_MOD>
<START_MOD>private org.ovirt.engine.core.common.action.ImagesActionsParametersBase buildCreateSnapshotParameters(org.ovirt.engine.core.common.businessentities.storage.DiskImage image) { org.ovirt.engine.core.common.action.ImagesActionsParametersBase result = new org.ovirt.engine.core.common.action.ImagesActionsParametersBase(image.getImageId()); result.setDescription(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDescription()); result.setSessionId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getSessionId()); result.setQuotaId(image.getQuotaId()); result.setDiskProfileId(image.getDiskProfileId()); result.setVmSnapshotId(newActiveSnapshotId); result.setEntityInfo(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getEntityInfo()); result.setParentCommand(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getActionType()); result.setParentParameters(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters()); result.setDestinationImageId(org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskToImageIds().get(image.getId())); if (org.ovirt.engine.core.bll.snapshots.CreateSnapshotForVmCommand.getParameters().getDiskIdsToIgnoreInChecks().contains(image.getId())) { result.setLeaveLocked(true); } return result; }<END_MOD>
protected void addVmPermission() { if (org.ovirt.engine.core.bll.AddVmCommand.getParameters().isMakeCreatorExplicitOwner()) { org.ovirt.engine.core.common.businessentities.permissions perms = new org.ovirt.engine.core.common.businessentities.permissions(org.ovirt.engine.core.bll.AddVmCommand.getCurrentUser().<START_MOD>getId<END_MOD>(), PredefinedRoles.VM_OPERATOR.getId(), org.ovirt.engine.core.bll.AddVmCommand.getVmId(), org.ovirt.engine.core.common.VdcObjectType.VM); org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.addPermission(perms); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(perms); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().isCopyTemplatePermissions()) && (!(org.ovirt.engine.core.bll.AddVmCommand.getVmTemplateId().equals(VmTemplateHandler.BlankVmTemplateId)))) { copyTemplatePermissions(); } }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); if (!(volume.isOnline())) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_ALREADY_STOPPED); addCanDoActionMessage(java.lang.String.format( %1$s volume.getName())); return false; } <START_MOD>if (((volume.getAsyncTask()) != null) && ((volume.getAsyncTask().getStatus()) == (org.ovirt.engine.core.common.job.JobExecutionStatus.STARTED))) { if ((volume.getAsyncTask().getType()) == (org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REBALANCE)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_CANNOT_STOP_REBALANCE_IN_PROGRESS); } } <END_MOD>return true; }
protected void ProceedVGLunsInDb() { final java.util.ArrayList<org.ovirt.engine.core.common.businessentities.LUNs> luns = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.LUNs>) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.GetVGInfo, new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.AddSANStorageDomainCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.AddSANStorageDomainCommand.getStorageDomain().getstorage())).getReturnValue()));<START_MOD> org.ovirt.engine.core.common.businessentities.storage_server_connections sdConn = org.ovirt.engine.core.bll.storage.AddSANStorageDomainCommand.getStorageDomain().getStorageStaticData().getConnection(); if (((sdConn != null) && ((sdConn.getuser_name()) != null)) && ((sdConn.getpassword()) != null)) { for (org.ovirt.engine.core.common.businessentities.LUNs lun : luns) { for (org.ovirt.engine.core.common.businessentities.storage_server_connections lunConn : lun.getLunConnections()) { lunConn.setuser_name(sdConn.getuser_name()); lunConn.setpassword(sdConn.getpassword()); } } }<END_MOD> org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { for (org.ovirt.engine.core.common.businessentities.LUNs lun : luns) { proceedLUNInDb(lun, getStorageDomain().getstorage_type()); } return null; } }); }
<START_MOD>public void setCpuLimit(int cpuLimit) { this.cpuLimit = cpuLimit; }<END_MOD>
void registerModelEventListeners(final org.ovirt.engine.ui.common.uicommon.model.ModelProvider<? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel> modelProvider) { modelProvider.getModel().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs pcArgs = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)); if ("IsAvailable".equals(pcArgs.PropertyName)) { boolean isAvailable = modelProvider.getModel().getIsAvailable(); setAccessible(isAvailable); <START_MOD>org.ovirt.engine.ui.common.widget.tab.TabAccessibleChangeEvent.fire(org.ovirt.engine.ui.common.widget.tab.ModelBoundTab.this, org.ovirt.engine.ui.common.widget.tab.ModelBoundTab.this); } } }); }<END_MOD>
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNicIdentification(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { return <START_MOD>org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator.<END_MOD>validateCoherentIdentification(((attachment.getId()) == null ? null : attachment.getId().toString()), attachment.getNicId(), attachment.getNicName(), EngineMessage.NETWORK_ATTACHMENT_REFERENCES_NICS_INCOHERENTLY, existingInterfacesMap); }
private void <START_MOD>setNetworkBootProtocolList<END_MOD>(org.ovirt.engine.ui.uicommonweb.models.<START_MOD>ListModel<java.util.Map.Entry<END_MOD><java.lang.<START_MOD>String, org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol><END_MOD>> value) { <START_MOD>privateNetworkBootProtocolList<END_MOD> = value; }
<START_MOD>public java.lang.Integer getBytesWrite() { return bytesWrite; }<END_MOD>
@org.ovirt.engine.ui.frontend.DefaultStringValue( ${action} ${type}. The following bonds consist of less than two Network Interfaces: ${<START_MOD>NETWORK_BONDS_INVALID_SLAVE_COUNT_ENTITY<END_MOD>}. java.lang.String NETWORK_BONDS_INVALID_SLAVE_COUNT();
<START_MOD>@org.junit.Test public void testValidRemovedBondsWhenBondIsRequired() throws java.lang.Exception { java.lang.String nicName = "nicName"; bond.setName(nicName); org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId()); params.setRemovedBonds(java.util.Collections.singleton(bond.getId())); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = createHostSetupNetworksValidator(params, java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>singletonList(bond)); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment requiredNetworkAttachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); requiredNetworkAttachment.setNicName(nicName); assertThat(validator.validRemovedBonds(java.util.Collections.singletonList(requiredNetworkAttachment)), failsWith(VdcBllMessages.BOND_USED_BY_NETWORK_ATTACHMENTS)); }<END_MOD>
@java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.ExecuteCommand(command); if (command == (getNewCommand())) { New(); } else if (command == (getEditCommand())) { Edit(); } else if (command == (getRemoveCommand())) { Remove(); } else if (command == (getMoveCommand())) { Move(); } else if (command == (getCopyCommand())) { Copy(); } else if (<START_MOD>command == (getCheckAlignmentCommand())) { CheckAlignment(); } else if (<END_MOD>org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnSave")) { OnSave(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnForceSave")) { OnForceSave(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "Cancel")) { Cancel(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "CancelConfirm")) { CancelConfirm(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnRemove")) { OnRemove(); } else if (command == (getChangeQuotaCommand())) { changeQuota(); } else if (command.getName().equals("onChangeQuota")) { onChangeQuota(); } }
public static void removeVmStatelessImages(org.ovirt.engine.core.compat.Guid vmId, org.ovirt.engine.core.bll.context.CommandContext context) { if (org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSnapshotDao().exists(vmId, SnapshotType.STATELESS)) { org.ovirt.engine.core.bll.<START_MOD>DownVmsHandler<END_MOD>.log.infoFormat( snapshot for stateless vm {0} vmId); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.RestoreStatelessVm, new org.ovirt.engine.core.common.action.VmOperationParameterBase(vmId), context); } }
<START_MOD>private void updateMigrateOnError(org.ovirt.engine.core.common.businessentities.VDSGroup group) { boolean isMigrationSupported = true; org.ovirt.engine.core.common.businessentities.ArchitectureType arch = getArchitecture(group); if (!(arch.equals(ArchitectureType.undefined))) { isMigrationSupported = org.ovirt.engine.core.common.archstrategy.ArchStrategyFactory.getStrategy(arch).run(new org.ovirt.engine.core.bll.architecture.IsMigrationSupported(group.getcompatibility_version())).returnValue(); } if (!isMigrationSupported) { group.setMigrateOnError(MigrateOnErrorOptions.NO); } }<END_MOD>
<START_MOD>private void moveMacsOfUpdatedDataCenter(org.ovirt.engine.core.compat.Guid oldMacPoolId, org.ovirt.engine.core.compat.Guid newMacPoolId) { org.ovirt.engine.core.compat.Guid dataCenterId = org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommand.getParameters().getStoragePoolId(); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc poolPerDc = org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDcSingleton.getInstance(); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy sourcePool = poolPerDc.getPoolById(oldMacPoolId); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy targetPool = poolPerDc.getPoolById(newMacPoolId); java.util.List<java.lang.String> vmInterfaceMacs = vmNicDao.getAllMacsByDataCenter(dataCenterId); for (java.lang.String mac : vmInterfaceMacs) { sourcePool.freeMac(mac); targetPool.forceAddMac(mac); } }<END_MOD>
private void updateWatchdogItems(java.util.Set<org.ovirt.engine.core.common.businessentities.VmWatchdogType> vmWatchdogTypes) { java.util.List<java.lang.String> watchDogModels = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.VmWatchdogType vmWatchdogType : vmWatchdogTypes) { watchDogModels.add(<START_MOD>new <END_MOD>org.ovirt.engine.ui.uicompat.EnumTranslator<START_MOD>()<END_MOD>.<START_MOD>get<END_MOD>(vmWatchdogType)); } watchDogModels.add(0, null); java.lang.String oldWatchdogSelected = getWatchdogModel().getSelectedItem(); getWatchdogModel().setItems(watchDogModels); if (watchDogModels.contains(oldWatchdogSelected)) { getWatchdogModel().setSelectedItem(oldWatchdogSelected); } }
<START_MOD>void appendCustomValueUsingCustomSeparator(java.lang.String name, java.lang.String value, java.lang.String separator) { java.util.Objects.requireNonNull(separator, "It makes no sense having 'null' literal as separator"); final java.lang.String key = name.toLowerCase(); java.lang.String newValue = value; allocateCustomValues(); if (customValues.containsKey(key)) { newValue = java.lang.String.format("%1$s%2$s%3$s", customValues.get(key), separator, value); } customValues.put(name.toLowerCase(), newValue); }<END_MOD>
<START_MOD>public boolean isActionName(org.ovirt.api.metamodel.concepts.Name name) { java.lang.String first = name.words().findFirst().get(); switch (first) { case "add" : case "get" : case "list" : case "remove" : case "update" : return false; default : return true; } }<END_MOD>
@org.junit.Test public void testDeallocateIfExternalThrowException() { nic.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_NAME); nic.setId(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_ID); provider.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_NAME); doThrow(new org.ovirt.engine.core.common.errors.EngineException()).when(networkProviderProxy).deallocate(nic); underTest.deallocateIfExternal(); verify(auditLogDirector).log(<START_MOD>auditLogableCaptor<END_MOD>.capture(), same(AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED)); final java.util.Map<java.lang.String, java.lang.String> capturedCustomValues = <START_MOD>auditLogableCaptor<END_MOD>.getValue().getCustomValues(); assertThat(capturedCustomValues, hasEntry("nicname", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_NAME)); assertThat(capturedCustomValues, hasEntry("nicid", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_ID.toString())); assertThat(capturedCustomValues, hasEntry("providername", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_NAME)); }
<START_MOD>private void showConcurrentGroup(org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel model) { editFenceAgent.setVisible(false); org.ovirt.engine.ui.webadmin.widget.host.FenceAgentConcurrentWidget concurrentWidget = new org.ovirt.engine.ui.webadmin.widget.host.FenceAgentConcurrentWidget(); concurrentWidget.edit(model); concurrentPanel.add(concurrentWidget); for (org.ovirt.engine.ui.uicommonweb.models.hosts.FenceAgentModel concurrentModel : model.getConcurrentList()) { concurrentWidget = new org.ovirt.engine.ui.webadmin.widget.host.FenceAgentConcurrentWidget(); concurrentWidget.edit(concurrentModel); concurrentPanel.add(concurrentWidget); } }<END_MOD>
<START_MOD>org.ovirt.engine.ui.common.widget.UiCommandButton getMacPoolButton();<END_MOD>
@java.lang.Override public boolean storageDomainRemoved(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> list = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageServerConnectionDao().getAllForVolumeGroup(storageDomain.getStorage()); for (org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : filterConnectionsUsedByOthers(list, storageDomain.getStorage(), "")) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageServerConnectionDao().remove(connection.<START_MOD>geIid<END_MOD>()); } removeStorageDomainLuns(storageDomain); return true; }
boolean isBalloonEnabled() { java.lang.Boolean balloonEnabled = UpdateVmCommand.getParameters().isBalloonEnabled(); return balloonEnabled != null ? balloonEnabled : org.ovirt.engine.core.bll.utils.VmDeviceUtils.isBalloonEnabled(getVmId()); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { java.lang.String propName = args.propertyName; if (propName.equals("ProposeDiscoverTargets")) { setProposeDiscover(object.getProposeDiscoverTargets()); } }
@java.lang.Override public void executeCommand() { <START_MOD>boolean isMergeSucceeded = false; try { <END_MOD>org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.Merge, createVDSParameters()); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.compat.Guid jobId = ((org.ovirt.engine.core.compat.Guid) (vdsReturnValue.getReturnValue())); persistBlockJobPlaceholder(jobId); org.ovirt.engine.core.bll.MergeCommand.getParameters().setVmJobId(jobId); <START_MOD>persistCommand(org.ovirt.engine.core.bll.MergeCommand.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.MergeCommand.log.debug( started successfully isMergeSucceeded = true; } else { org.ovirt.engine.core.bll.MergeCommand.log.error( to start Merge on VDS } } catch (org.ovirt.engine.core.common.errors.EngineException e) { org.ovirt.engine.core.bll.MergeCommand.log.error( exception thrown while sending merge command e); if (((e.getErrorCode()) == (org.ovirt.engine.core.common.errors.EngineError.imageErr)) || ((e.getErrorCode()) == (org.ovirt.engine.core.common.errors.EngineError.mergeErr))) { isMergeSucceeded = true; } } finally { if (isMergeSucceeded) { <END_MOD>org.ovirt.engine.core.bll.MergeCommand.setSucceeded(true); } else { setCommandStatus(CommandStatus.FAILED); } }<START_MOD> }<END_MOD>
public void addQuotaPermissionSubject(java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> quotaPermissionList) { if ((((!(org.ovirt.engine.core.bll.CommandBase.isInternalExecution())) && ((org.ovirt.engine.core.bll.CommandBase.getStoragePool()) != null)) && ((org.ovirt.engine.core.bll.CommandBase.getStoragePool().getQuotaEnforcementType()) != (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED))) && ((org.ovirt.engine.core.bll.CommandBase.getStoragePool().getQuotaEnforcementType()) != (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.SOFT_ENFORCEMENT))) { java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> consumptionParameters = getQuotaConsumptionParameters(); if (consumptionParameters != null) { for (org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter parameter : getQuotaConsumptionParameters()) { if (((<START_MOD>(<END_MOD>parameter.getQuotaGuid()) != null) && (!(Guid.Empty.equals(parameter.getQuotaGuid())<START_MOD>))) && (parameter.getQuotaAction().equals(QuotaConsumptionParameter.QuotaAction.CONSUME<END_MOD>))) { quotaPermissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(parameter.getQuotaGuid(), org.ovirt.engine.core.common.VdcObjectType.Quota, org.ovirt.engine.core.common.businessentities.ActionGroup.CONSUME_QUOTA)); } } } } }
<START_MOD>public void syncAllHostNetworks() { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.SyncAllHostNetworks, new org.ovirt.engine.core.common.action.VdsActionParameters(getEntity().getId()), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { } }, null); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmPool mapRow(final java.sql.ResultSet rs, final int rowNum) throws java.sql.SQLException { final org.ovirt.engine.core.common.businessentities.VmPool entity = new org.ovirt.engine.core.common.businessentities.VmPool(); entity.setVmPoolDescription(rs.getString("vm_pool_description")); entity.<START_MOD>setComment(rs.getString("vm_pool_comment")); entity.<END_MOD>setVmPoolId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("vm_pool_id"))); entity.setName(rs.getString("vm_pool_name")); entity.setVmPoolType(org.ovirt.engine.core.common.businessentities.VmPoolType.forValue(rs.getInt("vm_pool_type"))); entity.setParameters(rs.getString("parameters")); entity.setPrestartedVms(rs.getInt("prestarted_vms")); entity.setVdsGroupId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("vds_group_id"))); entity.setVdsGroupName(rs.getString("vds_group_name")); entity.setAssignedVmsCount(rs.getInt("assigned_vm_count")); entity.setRunningVmsCount(rs.getInt("vm_running_count")); entity.setMaxAssignedVmsPerUser(rs.getInt("max_assigned_vms_per_user")); return entity; }
<START_MOD>public org.ovirt.engine.core.bll.host.provider.foreman.ForemanHostGroup getHostgroup() { return hostGroup; }<END_MOD>
@java.lang.Override protected void executeSave() { final org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(getSelectedDc().getId(), getNetwork()); parameters.setVnicProfileRequired(false); if (<START_MOD>getExternal<END_MOD>().getEntity()) { org.ovirt.engine.core.common.businessentities.Provider<?> externalProvider = getExternalProviders().getSelectedItem(); org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providerNetwork = new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(); providerNetwork.setProviderId(externalProvider.getId()); getNetwork().setProvidedBy(providerNetwork); <START_MOD>if (getPhysicalNetworkDatacentre().getEntity()) { } <END_MOD>org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetworkOnProvider, parameters, addNetworkCallback(), null); } else { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetwork, parameters, addNetworkCallback(), null); } }
<START_MOD>private void setNonOperational(org.ovirt.engine.core.common.businessentities.NonOperationalReason reason, org.ovirt.engine.core.common.businessentities.VDS vds) { vds.setNonOperationalReason(reason); vds.setStatus(VDSStatus.NonOperational); vdsDynamicDao.update(vds.getDynamicData()); }<END_MOD>
private void validateQosOverriddenInterfaces() { for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : params.getInterfaces()) { java.lang.String networkName = iface.getNetworkName(); if (networkName == null) { continue; } if (<START_MOD>(<END_MOD>iface.isQosOverridden(<START_MOD>)) && (!(iface.getQos().isEmpty())<END_MOD>)) { if (!(hostNetworkQosSupported)) { addViolation(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_NOT_SUPPORTED, networkName); } org.ovirt.engine.core.bll.validator.HostNetworkQosValidator qosValidator = new org.ovirt.engine.core.bll.validator.HostNetworkQosValidator(iface.getQos()); if ((qosValidator.requiredValuesPresent()) != (org.ovirt.engine.core.bll.ValidationResult.VALID)) { addViolation(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_SETUP_NETWORKS_MISSING_VALUES, networkName); } if ((qosValidator.valuesConsistent()) != (org.ovirt.engine.core.bll.ValidationResult.VALID)) { addViolation(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_SETUP_NETWORKS_INCONSISTENT_VALUES, networkName); } } } }
<START_MOD>private int getAdditionalAvailableSize(org.ovirt.engine.core.common.businessentities.storage.LUNs lun) { int additionalAvailableSize = ((lun.getDeviceSize()) - (lun.getPvSize())) - 1; return additionalAvailableSize; }<END_MOD>
<START_MOD>protected java.util.Set<java.lang.String> getRemovedBondsUsedByNetworks(org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Bond> removedBonds) { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = getAttachmentsToConfigure(removedBonds); java.util.Set<java.lang.String> requiredNicsNames = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : attachmentsToConfigure) { requiredNicsNames.add(attachment.getNicName()); } return requiredNicsNames; }<END_MOD>
<START_MOD>public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusForXmlRpc getmStatus() { return mStatus; }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> getAllWithQuery(java.lang.String query) { return getJdbcTemplate().query(query, org.ovirt.engine.core.dao.<START_MOD>VmTemplateDAOImpl<END_MOD>.VMTemplateRowMapper.instance); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Role role) { validateParameters(role, "id|name"); <START_MOD>org.ovirt.engine.api.restapi.resource.validation.ValidatorLocator.getValidator(org.ovirt.engine.api.model.Role.class).validateEnums(role); <END_MOD>if (!(role.isSetId())) { org.ovirt.engine.core.common.businessentities.roles entity = getEntity(org.ovirt.engine.core.common.businessentities.roles.class, VdcQueryType.GetRoleByName, new org.ovirt.engine.core.common.queries.MultilevelAdministrationByRoleNameParameters(role.getName()), role.getName()); role.setId(entity.getId().toString()); } return performCreation(VdcActionType.AddSystemPermission, new org.ovirt.engine.core.common.action.PermissionsOperationsParametes(newPermission(role.getId())), new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetPermissionById, org.ovirt.engine.core.common.queries.MultilevelAdministrationByPermissionIdParameters.class)); }
<START_MOD>@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.widget.table.cell.Context context, org.ovirt.engine.core.common.businessentities.VDS host, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { if ((host == null) || (!(host.isUpdateAvailable()))) { return; } com.google.gwt.resources.client.ImageResource statusImage = org.ovirt.engine.ui.webadmin.widget.table.cell.HostAdditionalStatusCell.resources.updateAvailableImage(); com.google.gwt.safehtml.shared.SafeHtml statusImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(statusImage).getHTML()); sb.append(statusImageHtml); sb.appendHtmlConstant((("<div id=\"" + id) + "\" style=\"text-align: center;\">")); sb.appendHtmlConstant("</div>"); }<END_MOD>
<START_MOD>public java.lang.String getVirtioDriversIso() { return virtioDriversIso; }<END_MOD>
<START_MOD>private static org.ovirt.engine.core.bll.scheduling.InternalClusterPolicies.Builder create(java.lang.String guid) { final org.ovirt.engine.core.compat.Guid realGuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(guid); final org.ovirt.engine.core.bll.scheduling.InternalClusterPolicies.Builder builder = new org.ovirt.engine.core.bll.scheduling.InternalClusterPolicies.Builder(realGuid); org.ovirt.engine.core.bll.scheduling.InternalClusterPolicies.clusterPolicies.put(realGuid, builder.getPolicy()); return builder; }<END_MOD>
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.vdsbroker.vdsbroker.StatusForXmlRpc getReturnStatus() { return _result.mStatus; }<END_MOD>
private void extractModifiedInterfaces() { for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : params.getInterfaces()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingNic = getExistingIfaces().get(nic.getName()); if (existingNic != null) { java.util.Set<java.lang.String> newLabels = (org.ovirt.engine.core.utils.NetworkUtils.isLabeled(nic)) ? nic.getLabels() : java.util.Collections.<java.lang.String>emptySet(); java.util.Set<java.lang.String> existingLabels = (org.ovirt.engine.core.utils.NetworkUtils.isLabeled(existingNic)) ? existingNic.getLabels() : java.util.Collections.<java.lang.String>emptySet(); if ((<START_MOD>(<END_MOD>!(org.apache.commons.collections.CollectionUtils.isEqualCollection(newLabels, existingLabels))) || ((nic.isQosOverridden()) != (existingNic.isQosOverridden()))) <START_MOD>|| (!(java.util.Objects.equals(nic.getCustomProperties(), existingNic.getCustomProperties())))) <END_MOD>{ existingNic.setLabels(newLabels); existingNic.setQosOverridden(nic.isQosOverridden()); <START_MOD>existingNic.setCustomProperties(nic.getCustomProperties()); <END_MOD>modifiedInterfaces.add(existingNic); } } } }
@java.lang.Override public <START_MOD>void<END_MOD> <START_MOD>handleFailure<END_MOD>() { <START_MOD>updateDiskStatus(ImageStatus<END_MOD>.<START_MOD>ILLEGAL<END_MOD>); }
<START_MOD>private void restoreSnapshot() { if ((getSelectedItem()) == null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity snapshot = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity) (getSelectedItem())); setConfirmWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().confirmRestoreSnapshot(getEntity().getName())); model.setHelpTag(HelpTag.volume_restore_snapshot_confirmation); model.setHashName("volume_restore_snapshot_confirmation"); if ((snapshot.getStatus()) == (org.ovirt.engine.core.common.businessentities.gluster.GlusterSnapshotStatus.ACTIVATED)) { model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().confirmVolumeSnapshotRestoreWithStopMessage()); } else { model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().confirmVolumeSnapshotRestoreMesage()); } org.ovirt.engine.ui.uicommonweb.UICommand okCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("onRestoreSnapshot", this); model.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("cancelConfirmation", this); model.getCommands().add(cancelCommand); }<END_MOD>
<START_MOD>public void removeNetworkFromParameters(org.ovirt.engine.core.common.action.SetupNetworksParameters params, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic, org.ovirt.engine.core.common.businessentities.network.Network net) { if (org.ovirt.engine.core.utils.NetworkUtils.isVlan(net)) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vlan = getVlanDevice(params.getInterfaces(), nic, net); if (vlan == null) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.NETWORK_LABEL_CONFLICT); } else { params.getInterfaces().remove(vlan); } } }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Messages<END_MOD>.DefaultMessage( <START_MOD>by<END_MOD> <START_MOD>Storage<END_MOD> <START_MOD>Domain<END_MOD>: {0} java.lang.String <START_MOD>lunPartOfStorageDomain<END_MOD>(java.lang.String storageDomainName);
private void copyQuotaPermissions() { org.ovirt.engine.core.bll.UniquePermissionsSet permissionsToAdd = new org.ovirt.engine.core.bll.UniquePermissionsSet(); java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> vmPermissions = getDbFacade().getPermissionDao().getAllForEntity(getParameters().getQuotaId(), getCurrentUser().getId(), <START_MOD>getSessionId(), <END_MOD>false); for (org.ovirt.engine.core.common.businessentities.Permissions vmPermission : vmPermissions) { permissionsToAdd.addPermission(vmPermission.getad_element_id(), vmPermission.getrole_id(), getQuotaId(), vmPermission.getObjectType()); } if (!(permissionsToAdd.isEmpty())) { java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> permissionsList = permissionsToAdd.asPermissionList(); org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.addPermission(permissionsList.toArray(new org.ovirt.engine.core.common.businessentities.Permissions[permissionsList.size()])); } }
public org.ovirt.engine.core.bll.ValidationResult statusSupportedForHostUpgrade() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.VDS_CANNOT_INSTALL_STATUS_ILLEGAL).unless(org.ovirt.engine.core.common.VdcActionUtils.canExecute(java.util.Arrays.asList(host), org.ovirt.engine.core.common.businessentities.VDS.class, VdcActionType.UpgradeHost)); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); org.ovirt.engine.core.common.businessentities.VM vm = model.getEntity(); org.ovirt.engine.core.compat.Version <START_MOD>minVmVersion<END_MOD> = vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>(); org.ovirt.engine.core.compat.Version minDcVersion = dataCenter.getCompatibilityVersion(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (target)); model.setIsCloneVmSupported(((java.lang.Boolean) (returnValue))); } }), VdcActionType.AddVmFromSnapshot, <START_MOD>minVmVersion<END_MOD>, minDcVersion); }
private org.ovirt.engine.core.common.businessentities.storage.ImageStatus checkImageStatus(org.ovirt.engine.core.common.businessentities.storage.CinderDisk removedVolume) { try { return getCinderBroker().getImageStatusByClassificationType(removedVolume); } catch (<START_MOD>com.woorea.openstack.base.client.OpenStackResponseException ex) { if ((ex.getStatus()) == (org.apache.commons.httpclient.HttpStatus.SC_NOT_FOUND)) { return org.ovirt.engine.core.common.businessentities.storage.ImageStatus.OK; } printError(removedVolume, ex); } catch (<END_MOD>java.lang.Exception e) { <START_MOD>printError<END_MOD>(removedVolume, e);<START_MOD> }<END_MOD> return org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL; }
private void buildImageReference() {<START_MOD> this.lastReadEntry = "//*/File";<END_MOD> org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = _document.SelectNodes("//*/File", _xmlNS); for (XmlNode node : list) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); if ((node.attributes.get("ovf:disk_storage_type")) != null) { java.lang.String diskStorageType = node.attributes.get("ovf:disk_storage_type").getValue(); if ((diskStorageType != null) && (diskStorageType.equals(DiskStorageType.CINDER.name()))) { disk = new org.ovirt.engine.core.common.businessentities.storage.CinderDisk(); } } disk.setImageId(new org.ovirt.engine.core.compat.Guid(node.attributes.get("ovf:id").getValue())); disk.setId(org.ovirt.engine.core.utils.ovf.OvfParser.GetImageGrupIdFromImageFile(node.attributes.get("ovf:href").getValue())); disk.setActive(true); disk.setImageStatus(ImageStatus.OK); disk.setDescription(node.attributes.get("ovf:description").getValue()); _images.add(disk); } }
private boolean initGlusterHost() { glusterHostUuidFound = true; if (org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterHostUuidSupported(getVdsGroup().getcompatibility_version())) { <START_MOD>org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterHostUUID, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(getVds().getId())); org.ovirt.engine.core.compat.Guid addServerGlusterUuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(((java.lang.String) (returnValue.getReturnValue()))); <END_MOD>if (<START_MOD>(returnValue.getSucceeded()) && ((returnValue.getReturnValue()) != null)) { if (<END_MOD>!(<START_MOD>validateGlusterHostUuid(addServerGlusterUuid))) { glusterHostUuidFound = true; setNonOperational(NonOperationalReason.GLUSTER_HOST_UUID_ALREADY_FOUND, null); return false; } <END_MOD>saveGlusterHostUuid(<START_MOD>addServerGlusterUuid); } else<END_MOD> { glusterHostUuidFound = false; setNonOperational(NonOperationalReason.GLUSTER_HOST_UUID_NOT_FOUND, null); } } return (glusterHostUuidFound) && (initGlusterPeerProcess()); }
<START_MOD>public void getConnectAutomatically(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetConnectAutomatically, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), aQuery); }<END_MOD>
public void validateWithDirectLunIdAndInvalidVds() { command.getParameters().setDirectLunId(org.ovirt.engine.core.compat.Guid.newGuid()); <START_MOD>doReturn(false).<END_MOD>when(<START_MOD>command)<END_MOD>.<START_MOD>validateVds<END_MOD>()<START_MOD>; assertFalse(command<END_MOD>.<START_MOD>validate<END_MOD>()); }
public void OnSetupNetworks() { <START_MOD>org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetNetworkConnectivityCheckTimeoutInSeconds(<END_MOD>new org.ovirt.engine.<START_MOD>ui.frontend.AsyncQuery(this,<END_MOD> new org.ovirt.engine.ui.<START_MOD>frontend.INewAsyncCallback<END_MOD>() { @java.lang.Override public void <START_MOD>OnSuccess(java.lang.Object target, java.lang.Object returnValue<END_MOD>) { org.ovirt.engine.<START_MOD>ui.uicommonweb.models.hosts.HostInterfaceListModel listModel<END_MOD> = <START_MOD>((org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel) (target)); org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel model<END_MOD> = <START_MOD>((org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel) (listModel.getWindow())); <END_MOD>model.<START_MOD>getConnectivityTimeout().setEntity(returnValue); listModel.PostOnSetupNetwork(<END_MOD>); } }<START_MOD>));<END_MOD> }
<START_MOD>public void updateSuggestedLabels() { suggestedLabels = new java.util.TreeSet<>(suggestedLabelsCache); suggestedLabels.removeAll(computeSelecetedLabels()); for (org.ovirt.engine.ui.uicommonweb.models.ListModel<java.lang.String> labelModel : getItems()) { labelModel.setItems(suggestedLabels, labelModel.getSelectedItem()); } }<END_MOD>
<START_MOD>@java.lang.Override public void addColumn(com.google.gwt.user.cellview.client.Column<T, ?> column, com.google.gwt.user.cellview.client.Header<?> header) { if ((columnResizingEnabled) && (header instanceof org.ovirt.engine.ui.common.widget.table.header.AbstractCheckboxHeader)) { header = createResizableCheckboxHeader(header, column); } else if (columnResizingEnabled) { header = createResizableHeader(column, header); } else if ((applyHeaderStyle) && (header instanceof org.ovirt.engine.ui.common.widget.table.header.SafeHtmlHeader)) { org.ovirt.engine.ui.common.widget.table.header.SafeHtmlHeader safeHtmlHeader = ((org.ovirt.engine.ui.common.widget.table.header.SafeHtmlHeader) (header)); com.google.gwt.safehtml.shared.SafeHtml newValue = org.ovirt.engine.ui.common.widget.table.ColumnResizeCellTable.templates.nonResizeableColumnHeader(safeHtmlHeader.getValue()); header = new org.ovirt.engine.ui.common.widget.table.header.SafeHtmlHeader(newValue, safeHtmlHeader.getTooltip()); } super.addColumn(column, header); if (columnResizingEnabled) { if (isColumnPresent(emptyNoWidthColumn)) { removeColumn(emptyNoWidthColumn); } super.addColumn(emptyNoWidthColumn, emptyNoWidthColumnHeader); } if (header instanceof org.ovirt.engine.ui.common.widget.table.header.AbstractHeader) { ((org.ovirt.engine.ui.common.widget.table.header.AbstractHeader) (header)).setContextMenuHandler(ensureContextMenuHandler()); contextPopup.getContextMenu().addItem(resolveContextMenuTitle(column, header), column); } }<END_MOD>
@java.lang.Override protected void updateSingleNic(org.ovirt.engine.core.utils.ovf.xml.XmlNode node, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface) { super.updateSingleNic(node, iface); <START_MOD>this.lastReadEntry = "rasd:MACAddress"; <END_MOD>iface.setMacAddress(((node.SelectSingleNode("rasd:MACAddress", _xmlNS)) != null ? node.SelectSingleNode("rasd:MACAddress", _xmlNS).innerText : "")); }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { boolean returnValue = true; synchronized(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand._lockObject) { if (Guid.Empty.equals(getVmToAttach(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().getVmPoolId()))) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_NO_AVAILABLE_POOL_VMS); returnValue = false; } } if (returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsForUser = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmDao().getAllForUser(getAdUserId()); int vmCount = 0; for (org.ovirt.engine.core.common.businessentities.VM vm : vmsForUser) { if (((vm.getVmPoolId()) != null) && (getVmPoolId().equals(vm.getVmPoolId()))) { vmCount++; } } int limit = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPool().getMaxAssignedVmsPerUser(); if (vmCount >= limit) { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VM_POOL_CANNOT_ATTACH_TO_MORE_VMS_FROM_POOL); returnValue = false; } } if (!returnValue) { setActionMessageParameters(); } return returnValue; }
@java.lang.Override protected void buildVmSoundDevices() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmSoundDevices = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdAndType(vm.getId(), VmDeviceGeneralType.SOUND); if (!(vmSoundDevices.isEmpty())) { createInfo.put(VdsProperties.soundDevice, osRepository.getSoundDevice(vm.getStaticData().getOsId(), vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())); } }
<START_MOD>private void validateAndAssertNetworkModified(org.ovirt.engine.core.common.businessentities.network net, org.ovirt.engine.core.common.businessentities.VdsNetworkInterface nic) { org.ovirt.engine.core.bll.SetupNetworksHelper helper = createHelper(createParametersForNics(nic)); validateAndExpectNoViolations(helper); assertNoBondsModified(helper); assertNetworkModified(helper, net); assertNoNetworksRemoved(helper); assertNoBondsRemoved(helper); }<END_MOD>
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Host.class, to = org.ovirt.engine.core.common.businessentities.VdsStatic.class) public static org.ovirt.engine.core.common.businessentities.VdsStatic map(org.ovirt.engine.api.model.Host model, org.ovirt.engine.core.common.businessentities.VdsStatic template) { org.ovirt.engine.core.common.businessentities.VdsStatic entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.VdsStatic(); if (model.isSetId()) { entity.setId(<START_MOD>org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid<END_MOD>(model.getId())); } if (model.isSetName()) { entity.setvds_name(model.getName()); } if ((model.isSetCluster()) && (model.getCluster().isSetId())) { entity.setvds_group_id(<START_MOD>org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid<END_MOD>(model.getCluster().getId())); } if (model.isSetAddress()) { entity.sethost_name(model.getAddress()); } if ((model.isSetPort()) && ((model.getPort()) > 0)) { entity.setport(model.getPort()); } else { entity.setport(org.ovirt.engine.api.restapi.types.HostMapper.DEFAULT_VDSM_PORT); } if (model.isSetPowerManagement()) { entity = org.ovirt.engine.api.restapi.types.HostMapper.map(model.getPowerManagement(), entity); } if (model.isSetStorageManager()) { if ((model.getStorageManager().getPriority()) != null) { entity.setVdsSpmPriority(model.getStorageManager().getPriority()); } } if ((model.isSetDisplay()) && (model.getDisplay().isSetAddress())) { entity.setConsoleAddress(("".equals(model.getDisplay().getAddress()) ? null : model.getDisplay().getAddress())); } return entity; }
@org.junit.Test public void checkRemoveIscsiConnectionDomainsAndDisksExist() { parameters.setStorageServerConnection(iSCSIConnection); when(storageServerConnectionDao.get(iSCSIConnection.<START_MOD>geIid<END_MOD>())).thenReturn(iSCSIConnection); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("3600144f09dbd05000000517e730b1212"); lun1.setStorageDomainName("storagedomain1"); lun1.setvolume_group_id("G95OWd-Wvck-vftu-pMq9-9SAC-NF3E-ulDPsQ"); luns.add(lun1); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id("3600144f09dbd05000000517e730b1212"); lun2.setStorageDomainName(""); lun2.setvolume_group_id(""); lun2.setDiskAlias("disk2"); luns.add(lun2); when(lunDao.getAllForStorageServerConnection(iSCSIConnection.<START_MOD>geIid<END_MOD>())).thenReturn(luns); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS_AND_DISKS); }
<START_MOD>@java.lang.Override public void massUpdateVdsNumaNodeStatistics(java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNumaNodes) { java.util.List<org.springframework.jdbc.core.namedparam.MapSqlParameterSource> executions = new java.util.ArrayList(vdsNumaNodes.size()); for (org.ovirt.engine.core.common.businessentities.VdsNumaNode node : vdsNumaNodes) { executions.add(createVdsNumaNodeStatisticsParametersMapper(node)); } getCallsHandler().executeStoredProcAsBatch("UpdateNumaNodeStatistics", executions); }<END_MOD>
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { getView().selectSpiceImplementation(SpiceConsoleModel.ClientConsoleMode.Html5); <START_MOD>getView().setSpiceProxyEnabled(false, constants.spiceProxyCantBeCombinedWithSpiceHtml5()); getView().setSpiceProxy(false); <END_MOD>}
public void prepare1() { org.ovirt.engine.ui.uicompat.PreparingEnlistment enlistment = ((org.ovirt.engine.ui.uicompat.PreparingEnlistment) (context.enlistment)); org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext enlistmentContext = ((org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext) (context.enlistment.getContext())); org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel model = enlistmentContext.getModel(); org.ovirt.engine.core.common.businessentities.VDS host = ((org.ovirt.engine.core.common.businessentities.VDS) (model.getSelectedItem())); if (!(enlistmentContext.getClusterId().equals(host.getVdsGroupId()))) { enlistmentContext.setOldClusterId(host.getVdsGroupId()); org.ovirt.engine.core.common.action.ChangeVDSClusterParameters parameters = new org.ovirt.engine.core.common.action.ChangeVDSClusterParameters(enlistmentContext.getClusterId(), host.getId()); parameters.setCorrelationId(getCorrelationId()); org.ovirt.engine.ui.frontend.Frontend.<START_MOD>getInstance().runAction<END_MOD>(VdcActionType.ChangeVDSCluster, parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue(); context.changeVDSClusterReturnValue = returnValue; prepare2(); } }); } else { context.enlistment = null; enlistment.Prepared(); } }
<START_MOD>@java.lang.Override public void attemptToFenceJob() { if (isDstVdsmImage()) { org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo info = ((org.ovirt.engine.core.common.businessentities.VdsmImageLocationInfo) (org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getDstInfo())); org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters p = new org.ovirt.engine.core.common.action.FenceVolumeJobCommandParameters(info); p.setParentCommand(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getActionType()); p.setParentParameters(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters()); p.setStoragePoolId(org.ovirt.engine.core.bll.storage.disk.image.CopyDataCommand.getParameters().getStoragePoolId()); runInternalActionWithTasksContext(VdcActionType.FenceVolumeJob, p); } }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue("Clone") java.lang.String cloneTitle();
private static void getTotalCpuMemCount(org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary cpuSummary, org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary memSummary, javax.sql.DataSource dwhDataSource) throws org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO(dwhDataSource); org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal total = dao.getTotalCpuMemCount(); cpuSummary.setPhysicalTotal(total.getCpuTotal()); memSummary.setPhysicalTotal(((total.getMemTotal()) / 1024)); }
<START_MOD>private boolean validateNetworkInterfaces() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.VmNetworkInterface> interfaceNetworkMap = org.ovirt.engine.core.common.businessentities.Entities.interfacesByNetworkName(org.ovirt.engine.core.bll.RunVmCommand.getVm().getInterfaces()); java.util.Set<java.lang.String> interfaceNetworkNames = interfaceNetworkMap.keySet(); java.util.List<org.ovirt.engine.core.common.businessentities.network> clusterNetworks = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDAO().getAllForCluster(org.ovirt.engine.core.bll.RunVmCommand.getVm().getvds_group_id()); return ((isVmInterfacesConfigured(interfaceNetworkMap)) && (isVmInterfacesAttachedToClusterNetworks(clusterNetworks, interfaceNetworkNames))) && (isVmInterfacesAttachedToVmNetworks(clusterNetworks, interfaceNetworkNames)); }<END_MOD>
@org.ovirt.engine.ui.frontend.DefaultStringValue( destroy the master Storage Domain from the Data Center without another active Storage Domain to take its place. activate another Storage Domain in the Data Center, or remove the Data Center. you have problems with <START_MOD>the <END_MOD>master <START_MOD>Data<END_MOD> Domain, consider <START_MOD>following the <END_MOD>recovery process<START_MOD> described in the documentation, or contact Red Hat Support<END_MOD>. java.lang.String ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN();
<START_MOD>public void setDiskOperatorUserId(org.ovirt.engine.core.compat.Guid diskOperatorUserId) { this.diskOperatorUserId = diskOperatorUserId; }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult disksInStatus(org.ovirt.engine.core.common.businessentities.storage.ImageStatus applicableStatus, org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD> message) { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { if ((diskImage.getImageStatus()) != applicableStatus) { return new org.ovirt.engine.core.bll.ValidationResult(message, java.lang.String.format( %s applicableStatus.name())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void Edit() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel(); model.getMAC().setIsAvailable(false); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle()); model.setHashName("edit_network_interface_tmps"); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetClusterNetworkList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel vmInterfaceListModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network> network_list = (returnValue != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network>) (returnValue)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network>(); vmInterfaceListModel.PostGetClusterNetworkList_Edit(network_list); } }), getEntityStronglyTyped().<START_MOD>getVdsGroupId<END_MOD>()); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel userPortalListModel1 = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel) (model)); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel unitVmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (userPortalListModel1.getWindow())); org.ovirt.engine.core.common.action.AddVmFromTemplateParameters param = new org.ovirt.engine.core.common.action.AddVmFromTemplateParameters(gettempVm(), unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap(), org.ovirt.engine.core.compat.Guid.Empty); param.setMakeCreatorExplicitOwner(true<START_MOD>); param.setCopyTemplatePermissions(((java.lang.Boolean) (unitVmModel.getCopyTemplatePermissions().getEntity()))<END_MOD>); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); parameters.add(param); org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult a) { stopProgress(a.getState()); cancel(); } }, this); }
<START_MOD>private static void setGatewayForManagementNetwork(org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface, java.lang.String gateway) { if (org.ovirt.engine.core.utils.NetworkUtils.getEngineNetwork().equals(iface.getNetworkName())) { iface.setGateway(gateway); } }<END_MOD>
@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler(( event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.modelProvider.setSelectedItems(getSelectedItems()); fireTableSelectionChangeEvent(); if (!(isVisible())) { handlePlaceTransition(); } })); <START_MOD>registerHandler(<END_MOD>org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.<START_MOD>getEventBus().addHandler(org.ovirt.engine.ui.uicommonweb.models.ApplySearchStringEvent.getType(), ( event) -> { applySearchString(event.getSearchString()); })); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.<END_MOD>getView().setDetailPlaceTransitionHandler(this); this.breadCrumbs.setSelectionModel(getTable().getSelectionModel()); <START_MOD>searchStringCollector.markActivePrefix(modelProvider.getModel().getDefaultSearchString()); java.lang.String searchString = searchStringCollector.getSearchString(modelProvider.getModel().getSearchString()); if (searchString != null) { applySearchString(searchString); } }<END_MOD>
<START_MOD>@org.junit.Test public void testEmptyId() { org.ovirt.engine.api.types.V4Vm object = newVm().setId("").build(); assertEquals("{'id':''}", objectToJson(object)); }<END_MOD>
<START_MOD>types.Boot[] boot();<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.EntityModel setIsChangable(boolean value) { super.setIsSelectable(value); return this; }<END_MOD>
<START_MOD>private boolean isManagementNetworkChanged() { java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> newAttachments = org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getNetworkAttachments(); java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> existingAttachments = this.existingAttachments; java.lang.String mgmtNetworkName = managementNetworkUtil.getManagementNetwork(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVds().getVdsGroupId()).getName(); for (org.ovirt.engine.core.common.vdscommands.HostNetwork network : getNetworksToConfigure()) { if (mgmtNetworkName.equals(network.getNetworkName())) { return true; } } for (org.ovirt.engine.core.common.businessentities.network.Bond bond : org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getBonds()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bondNic = getExistingNicsBusinessEntityMap().get(bond.getId()); if ((bondNic != null) && (mgmtNetworkName.equals(bondNic.getNetworkName()))) { return true; } } return false; }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("Download") java.lang.String downloadImage();<END_MOD>
public java.util.List<java.lang.String> getClusterPoliciesNamesByPolicyUnitId(org.ovirt.engine.core.compat.Guid policyUnitId) { java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); <START_MOD>final org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl policyUnitImpl = policyUnits.get(policyUnitId); if (policyUnitImpl == null) { org.ovirt.engine.core.bll.scheduling.SchedulingManager.log.warnFormat( to find usages of non-existing policy unit %s policyUnitId.toString()); return null; } <END_MOD>org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit = <START_MOD>policyUnitImpl<END_MOD>.getPolicyUnit(); if (policyUnit != null) { for (org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy : policyMap.values()) { switch (policyUnit.getPolicyUnitType()) { case Filter : if (clusterPolicy.getFilters().contains(policyUnitId)) { list.add(clusterPolicy.getName()); } break; case Weight : for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer> pair : clusterPolicy.getFunctions()) { if (pair.getFirst().equals(policyUnitId)) { list.add(clusterPolicy.getName()); break; } } break; case LoadBalancing : if (policyUnitId.equals(clusterPolicy.getBalance())) { list.add(clusterPolicy.getName()); } break; default : break; } } } return list; }
public org.ovirt.engine.core.bll.ValidationResult validate() { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = getAttachmentsToConfigure(); org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NicLabelValidator(params, existingInterfacesMap, bondsMap, hostSetupNetworksValidatorHelper).validate(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validRemovedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedBonds(); vr = (skipValidation(vr)) ? vr : validRemovedBonds(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : attachmentsDontReferenceSameNetworkDuplicately(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : networksUniquelyConfiguredOnHost(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateNetworkExclusiveOnNics(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NetworkMtuValidator(networkBusinessEntityMap).validateMtu(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateCustomProperties(); vr = (skipValidation(vr)) ? vr : validateQos(attachmentsToConfigure); <START_MOD>vr = (skipValidation(vr)) ? vr : createUnmanagedNetworkValidator().validate(params, existingInterfaces, existingInterfacesMap, networkBusinessEntityMap); <END_MOD>return vr; }
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultStringValue("Test failed: ") java.lang.String testFailedWithErrorMsg();<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( control java.lang.String ksmLabelTitle();
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("Root Password") java.lang.String geoRepSlaveNodeRootPassword();<END_MOD>
<START_MOD>public void setGuestOsArch(org.ovirt.engine.core.common.businessentities.GuestOsArchitectureType guestOsArch) { if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(this.guestOsArch, guestOsArch))) { this.guestOsArch = guestOsArch; onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("GuestOsArch")); } }<END_MOD>
<START_MOD>@org.junit.Before public void setUp() { validation = new org.ovirt.engine.ui.uicommonweb.validation.BrickMountPointValidation(); }<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Tags> getAllForParent(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("parent_id", id); return getCallsHandler().executeReadList("GettagsByparent_id", org.ovirt.engine.core.dao.<START_MOD>TagDAOImpl<END_MOD>.TagRowMapper.instance, parameterSource); }
public java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> executeAsyncCommand(final org.ovirt.engine.core.common.action.VdcActionType actionType, final org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, final org.ovirt.engine.core.bll.context.CommandContext cmdContext) { final org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameters, cmdContext); <START_MOD>org.ovirt.engine.core.bll.tasks.interfaces.CommandCallBack callBack = command.getCallBack(); <END_MOD>command.persistCommand(command.getParameters().getParentCommand(), cmdContext, <START_MOD>(<END_MOD>callBack <START_MOD>!= null)); if (callBack != null) { cmdCallBackMap.put(command.getCommandId(), callBack); }<END_MOD> if (callBack != null) { cmdCallBackMap.put(command.getCommandId(), callBack); } java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> retVal; try { retVal = org.ovirt.engine.core.bll.tasks.CommandExecutor.executor.submit(new java.util.concurrent.Callable<org.ovirt.engine.core.common.action.VdcReturnValueBase>() { @java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase call() throws java.lang.Exception { return executeCommand(command, cmdContext); } }); } catch (java.util.concurrent.RejectedExecutionException ex) { command.setCommandStatus(CommandStatus.FAILED); org.ovirt.engine.core.bll.tasks.CommandExecutor.log.errorFormat( to submit command to executor service, command {0} status has been set to FAILED command.getCommandId().toString()); retVal = new org.ovirt.engine.core.bll.tasks.CommandExecutor.RejectedExecutionFuture(); } return retVal; }
<START_MOD>@java.lang.Override public void setEnabled(boolean enabled, java.util.List<java.lang.String> disabilityHints) { setEnabled(enabled); contentWidget.asWidget().setTitle(getDisabilityTitle(disabilityHints)); }<END_MOD>
<START_MOD>public static org.ovirt.engine.core.aaa.DirectoryUser mapPrincipalRecordToDirectoryUser(final java.lang.String authzName, final org.ovirt.engine.api.extensions.ExtMap principalRecord) { org.ovirt.engine.core.aaa.DirectoryUser directoryUser = null; if (principalRecord != null) { directoryUser = new org.ovirt.engine.core.aaa.DirectoryUser(authzName, principalRecord.<java.lang.String>get(Authz.PrincipalRecord.NAMESPACE), principalRecord.<java.lang.String>get(Authz.PrincipalRecord.ID), principalRecord.<java.lang.String>get(Authz.PrincipalRecord.NAME)); directoryUser.setDepartment(principalRecord.<java.lang.String>get(Authz.PrincipalRecord.DEPARTMENT)); directoryUser.setFirstName(principalRecord.<java.lang.String>get(Authz.PrincipalRecord.FIRST_NAME)); directoryUser.setLastName(principalRecord.<java.lang.String>get(Authz.PrincipalRecord.LAST_NAME)); directoryUser.setEmail(principalRecord.<java.lang.String>get(Authz.PrincipalRecord.EMAIL)); directoryUser.setTitle(principalRecord.<java.lang.String>get(Authz.PrincipalRecord.TITLE)); java.util.List<org.ovirt.engine.core.aaa.DirectoryGroup> directoryGroups = new java.util.ArrayList<org.ovirt.engine.core.aaa.DirectoryGroup>(); java.util.List<org.ovirt.engine.api.extensions.ExtMap> groups = principalRecord.<java.util.List<org.ovirt.engine.api.extensions.ExtMap>>get(Authz.PrincipalRecord.GROUPS); if (groups != null) { for (org.ovirt.engine.api.extensions.ExtMap group : groups) { directoryGroups.add(org.ovirt.engine.core.aaa.DirectoryUtils.mapGroupRecord(authzName, group)); } } directoryUser.setGroups(directoryGroups); } return directoryUser; }<END_MOD>
private void onRemove() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> params = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (<START_MOD>org.ovirt.engine.core.common.businessentities.IscsiBond<END_MOD> item : getSelectedItems()) { params.add(new org.ovirt.engine.core.common.action.RemoveIscsiBondParameters(item.getId())); } model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.RemoveIscsiBond, params, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterIscsiBondListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterIscsiBondListModel) (result.getState())); localModel.stopProgress(); cancel(); } }, this); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { java.lang.String propName = args.propertyName; if ("AllowClusterWithVirtGlusterEnabled".equals(propName)) { getView().allowClusterWithVirtGlusterEnabled(model.getAllowClusterWithVirtGlusterEnabled()); } }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Zone is not changeable for Linux VMs java.lang.String timeZoneNotChangeableForLinuxVms();
public static boolean checkImageConfiguration(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain, org.ovirt.engine.core.common.businessentities.storage.DiskImageBase diskInfo, java.util.List<java.lang.String> messages) { if (!(org.ovirt.engine.core.bll.ImagesHandler.checkImageConfiguration(storageDomain, diskInfo.getVolumeType(), diskInfo.getVolumeFormat()))) { messages.add(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED.toString()); messages.add(java.lang.String.format( %2$s "volumeFormat", diskInfo.getVolumeFormat())); messages.add(java.lang.String.format( %2$s "volumeType", diskInfo.getVolumeType())); return false; } return true; }
protected org.ovirt.engine.core.utils.lock.EngineLock lockVmDiskHotPlugWithWait() { org.ovirt.engine.core.utils.lock.EngineLock vmDiskHotPlugEngineLock = new org.ovirt.engine.core.utils.lock.EngineLock(); vmDiskHotPlugEngineLock.setExclusiveLocks(java.util.Collections.singletonMap(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_DISK_HOT_PLUG, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_OBJECT_LOCKED))); org.ovirt.engine.core.bll.AbstractDiskVmCommand.getLockManager().acquireLockWait(vmDiskHotPlugEngineLock); return vmDiskHotPlugEngineLock; }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { java.lang.Integer applicationMode = getApplicationMode(request.getSession().getId()); request.setAttribute(org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_APPLICATION_MODE, getApplicationModeObject(applicationMode)); java.util.List<org.ovirt.engine.ui.frontend.server.gwt.plugin.PluginData> pluginData = getPluginData(); request.setAttribute(org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_PLUGIN_DEFS, getPluginDefinitionsArray(pluginData)); <START_MOD>java.lang.Integer engineSessionTimeout = getEngineSessionTimeout(); request.setAttribute(org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_ENGINE_SESSION_TIMEOUT, getEngineSessionTimeoutObject(engineSessionTimeout)); <END_MOD>super.doGet(request, response); }
<START_MOD>protected boolean validateUsbPolicy() { org.ovirt.engine.core.common.businessentities.VM vm = getParameters().getVm(); org.ovirt.engine.core.bll.VmHandler.updateImportedVmUsbPolicy(vm.getStaticData()); return org.ovirt.engine.core.bll.VmHandler.isUsbPolicyLegal(vm.getusb_policy(), vm.getos(), getVdsGroup(), getReturnValue().getCanDoActionMessages()); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Host java.lang.String editHostTitle();
private java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getNetworks(java.lang.String clusterId<START_MOD>) { if ((networks) == null<END_MOD>) { org.ovirt.engine.core.compat.NGuid dataCenterId = getEntity(org.ovirt.engine.core.common.businessentities.VDSGroup.class, VdcQueryType.GetVdsGroupById, new org.ovirt.engine.core.common.queries.GetVdsGroupByIdParameters(asGuid(clusterId)), null).getStoragePoolId(); org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(asGuid(dataCenterId)); <START_MOD>networks =<END_MOD> getBackendCollection(VdcQueryType.GetAllNetworks, params); }<START_MOD> return networks; }<END_MOD>
public static void main(java.lang.String... args) { org.ovirt.engine.core.config.EngineConfigCLIParser parser = null; try { parser = new org.ovirt.engine.core.config.EngineConfigCLIParser(); parser.parse(args); org.ovirt.engine.core.config.EngineConfigMap argsMap = parser.getEngineConfigMap(); <START_MOD>if (<END_MOD>(argsMap.<START_MOD>getLogFile()) != null) { org.ovirt.engine.core.utils.log.JavaLoggingUtils.addFileHandler(argsMap.getLogFile<END_MOD>(), argsMap.getLogLevel()); } <START_MOD>} <END_MOD>catch (java.lang.Throwable t) { java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } try { org.ovirt.engine.core.config.EngineConfig.getInstance().setUpAndExecute(parser); } catch (java.lang.Throwable t) { org.<START_MOD>slf4j.LoggerFactory<END_MOD>.getLogger(org.ovirt.engine.core.config.EngineConfigExecutor.class).debug( with error:   t); java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } }
<START_MOD>private void updateDiscoveredHostList(java.lang.String searchFilter) { org.ovirt.engine.core.common.businessentities.Provider provider = getProviders().getSelectedItem(); if (provider != null) { org.ovirt.engine.ui.frontend.AsyncQuery getHostsQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getHostsQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (result)); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.VDS> hostNameListModel = getExternalHostName(); hosts.add(0, null); hostNameListModel.setItems(hosts); hostNameListModel.setIsChangable(true); setEnableSearchHost(true); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getExternalProviderHostList(getHostsQuery, provider.getId(), true, searchFilter); } else { getExternalHostName().setItems(null); getExternalHostName().setIsChangable(false); setEnableSearchHost(false); } }<END_MOD>
protected boolean canAddVm(java.util.ArrayList<java.lang.String> reasons, java.util.Collection<org.ovirt.engine.core.common.businessentities.storage_domains> destStorages) { org.ovirt.engine.core.common.businessentities.VmStatic vmStaticFromParams = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData(); boolean returnValue = canAddVm(reasons, vmStaticFromParams.getVmName(), org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId().getValue(), vmStaticFromParams.getPriority()); if (returnValue) { java.util.List<org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.ValidationError> validationErrors = validateCustomProperties(vmStaticFromParams); if (!(validationErrors.isEmpty())) { org.ovirt.engine.core.bll.VmHandler.handleCustomPropertiesError(validationErrors, reasons); returnValue = false; } } if (returnValue && (shouldCheckSpaceInStorageDomains())) { if (!(org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId().equals(getStoragePoolIdFromSourceImageContainer()))) { reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH.toString()); returnValue = false; } else { for (org.ovirt.engine.core.common.businessentities.storage_domains domain : destStorages) { if (<START_MOD>validate(new org.ovirt.engine.core.bll.validator.StorageDomainValidator(org.ovirt.engine.core.bll.AddVmCommand.getStorageDomain()).isDomainWithinThresholds())) { return false; } if (<END_MOD>!(org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.<START_MOD>hasSpaceForRequest<END_MOD>(domain<START_MOD>, getNeededDiskSize(domain.getId())<END_MOD>))) { returnValue = false; reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW.toString()); break; } } } } if (returnValue) { returnValue = isDedicatedVdsOnSameCluster(vmStaticFromParams); } return returnValue; }
private boolean validateStorage() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> vmDisksList = getDisksListForChecks(); vmDisksList = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDisksDummiesForStorageAllocations(vmDisksList); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = new java.util.ArrayList(vmDisksList); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> memoryDisksList = null; if (org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) { memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies(org.ovirt.engine.core.bll.<START_MOD>utils.VmDeviceUtils.getTotalMemorySizeInBytes(org.ovirt.engine.core.bll.<END_MOD>snapshots.CreateAllSnapshotsFromVmCommand.getVm()), MemoryUtils.METADATA_SIZE_IN_BYTES); if (Guid.Empty.equals(getStorageDomainIdForVmMemory(memoryDisksList))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NO_SUITABLE_DOMAIN_FOUND); } allDisks.addAll(memoryDisksList); } org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator sdValidator = createMultipleStorageDomainsValidator(allDisks); if (((!(validate(sdValidator.allDomainsExistAndActive()))) || (!(validate(sdValidator.allDomainsWithinThresholds())))) || (!(validateCinder()))) { return false; } if (memoryDisksList == null) { return validate(sdValidator.allDomainsHaveSpaceForNewDisks(vmDisksList)); } return validate(sdValidator.allDomainsHaveSpaceForAllDisks(vmDisksList, memoryDisksList)); }
<START_MOD>public java.lang.String getReason() { if (((mReason) == null) && ((getVm()) != null)) { mReason = getVm().getReason(); } return mReason; }<END_MOD>
<START_MOD>private void addQuotaToVcpuQuotaList(org.ovirt.engine.core.common.businessentities.QuotaPerUserUsageEntity quotaPerUserUsageEntity) { org.ovirt.engine.ui.userportal.widget.QuotaProgressBar vcpuQuotaProgressBar = new org.ovirt.engine.ui.userportal.widget.QuotaProgressBar(); if (quotaPerUserUsageEntity.isUnlimitedVcpu()) { vcpuQuotaProgressBar.setUnlimited(true); } else { vcpuQuotaProgressBar.setValueA(((int) (quotaPerUserUsageEntity.getOthersVcpuUsagePercentage()))); vcpuQuotaProgressBar.setValueB(((int) (quotaPerUserUsageEntity.getUserVcpuUsagePercentage()))); vcpuQuotaProgressBar.setTitle(org.ovirt.engine.ui.userportal.section.main.view.tab.extended.SideTabExtendedResourceView.messages.quotaFreeCpus(quotaPerUserUsageEntity.getFreeVcpu())); if ((quotaPerUserUsageEntity.getVcpuTotalUsage()) == 0) { vcpuQuotaProgressBar.setZeroValue(); } } org.ovirt.engine.ui.userportal.section.main.view.tab.extended.VerticalPanel verticalPanel = new org.ovirt.engine.ui.userportal.section.main.view.tab.extended.VerticalPanel(); org.ovirt.engine.ui.userportal.section.main.view.tab.extended.Label quotaName = new org.ovirt.engine.ui.userportal.section.main.view.tab.extended.Label(); quotaName.setText(quotaPerUserUsageEntity.getQuotaName()); verticalPanel.add(quotaName); verticalPanel.add(vcpuQuotaProgressBar); verticalPanel.setWidth("100%"); cpusQuotasList.add(verticalPanel); }<END_MOD>
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append( id:   sb.append(this.getid()); sb.append( connection:   sb.append(this.getconnection()); sb.append( iqn:   sb.append(this.getiqn()); sb.append( vfsType:   sb.append(this.getVfsType()); sb.append( mountOptions:   sb.append(this.getMountOptions()); sb.append( nfsVersion:   sb.append(this.getNfsVersion()); sb.append( nfsRetrans:   sb.append(this.getNfsRetrans()); sb.append( nfsTimeo:   sb.append(this.getNfsTimeo()); if ((<START_MOD>this.<END_MOD>getIface()) != null) { sb.append( iface:   sb.append(this.getIface()); } <START_MOD>if ((getNetIfacename()) != null) { sb.append( netIfacename:   sb.append(this.getNetIfacename());<END_MOD> }<START_MOD> sb.append( }<END_MOD>; return sb.toString(); }
<START_MOD>private org.ovirt.engine.core.utils.lock.EngineLock createLockForRunVmCommand(org.ovirt.engine.core.compat.Guid vmId) { return new org.ovirt.engine.core.utils.lock.EngineLock(java.util.Collections.singletonMap(vmId.toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED.name())), null); }<END_MOD>
@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getJobMessageProperties() { if ((jobProperties) == null) { jobProperties = super.getJobMessageProperties(); <START_MOD>if<END_MOD> ((org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.<START_MOD>getSnapshotName<END_MOD>()) != null) { jobProperties.put(VdcObjectType.Snapshot.name().toLowerCase(), <START_MOD>org<END_MOD>.<START_MOD>ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getSnapshotName<END_MOD>()); } } return jobProperties; }
public org.ovirt.engine.core.bll.ValidationResult notLabeled() { return org.ovirt.engine.core.bll.ValidationResult.failWith(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_NETWORK_ALREADY_LABELED).when(org.ovirt.engine.core.utils.NetworkUtils.isLabeled(network)); }
@java.lang.Override public int hashCode() { <START_MOD>return<END_MOD> <START_MOD>java.util.Objects.hash<END_MOD>(snapshotId<START_MOD>,<END_MOD> <START_MOD>clusterId,<END_MOD> <START_MOD>volumeId,<END_MOD> <START_MOD>snapshotName,<END_MOD> <START_MOD>status,<END_MOD> <START_MOD>description,<END_MOD> <START_MOD>status<END_MOD>); }
<START_MOD>public org.ovirt.engine.core.common.businessentities.DiskImage getMemoryImage() { return memoryImage; }<END_MOD>
@java.lang.Override public java.lang.String toString() { return <START_MOD>org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>core.common.utils.ToStringBuilder.forInstance<END_MOD>(<START_MOD>this).append("hostId"<END_MOD>, getHostId()<START_MOD>).append("deviceName"<END_MOD>, getDeviceName())<START_MOD>.build()<END_MOD>; }
<START_MOD>protected boolean isPopulate() { java.util.List<java.lang.String> populates = httpHeaders.getRequestHeader(org.ovirt.engine.api.restapi.resource.BackendResource.POPULATE); if ((populates != null) && ((populates.size()) > 0)) { return java.lang.Boolean.valueOf(populates.get(0)); } else { return false; } }<END_MOD>
private void formatAndSetErrorMessage(java.lang.String message) { <START_MOD>com.google.gwt.safehtml.shared.SafeHtml safeMessage = null; <END_MOD>if (message != null) {<START_MOD> com.google.gwt.safehtml.shared.SafeHtmlBuilder builder = new com.google.gwt.safehtml.shared.SafeHtmlBuilder();<END_MOD> int urlIndex = message.indexOf("http"); if (urlIndex != (-1)) { java.lang.String beforeURL = message.substring(0, urlIndex); <START_MOD>int endIndex = ((message.indexOf(   urlIndex)) > (-1)) ? message.indexOf(   urlIndex) : message.length(); <END_MOD>java.lang.String url = <START_MOD>com.google.gwt.safehtml.shared.UriUtils.sanitizeUri(<END_MOD>message.substring(urlIndex<START_MOD>, endIndex)<END_MOD>); java.lang.<START_MOD>String motdAnchor = org.ovirt.engine.ui.common.presenter.AbstractLoginPopupPresenterWidget.getView().getMotdAnchor(url); builder.appendEscaped(beforeURL)<END_MOD>.append(<START_MOD>com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(motdAnchor)); if (endIndex < (message.length())) { builder.appendEscaped(message.substring(endIndex)); } } else { builder.appendEscaped(message); } safeMessage = builder.toSafeHtml();<END_MOD> } org.ovirt.engine.ui.common.presenter.AbstractLoginPopupPresenterWidget.getView().setErrorMessageHtml(<START_MOD>safeMessage); }<END_MOD>
<START_MOD>@org.junit.Test public void testNetworksOnNicMatchMtu_whenNoNetworksAreProvided() throws java.lang.Exception { java.util.Map<java.lang.String, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network>> networksOnNics = java.util.Collections.singletonMap("nicName", java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.Network>emptyList()); org.ovirt.engine.core.bll.network.host.NetworkMtuValidator networkMtuValidator = new org.ovirt.engine.core.bll.network.host.NetworkMtuValidator(new org.ovirt.engine.core.common.businessentities.BusinessEntityMap(java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.Network>emptyList())); assertThat(networkMtuValidator.validateMtu(networksOnNics).isValid(), is(true)); }<END_MOD>
public java.lang.String allocateNewMac() { java.lang.String mac = null; org.ovirt.engine.core.bll.network.MacPoolManager.log.info( entered lockObj.writeLock().lock(); try { if (!(initialized)) { logInitializationError( to allocate new Mac address. throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.MAC_POOL_NOT_INITIALIZED); } if (<START_MOD>getAvailableMacs()<END_MOD>.isEmpty()) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.MAC_POOL_NO_MACS_LEFT); } java.util.Iterator<java.lang.String> my = <START_MOD>getAvailableMacs()<END_MOD>.iterator(); mac = my.next(); commitNewMac(mac); } finally { lockObj.writeLock().unlock(); } org.ovirt.engine.core.bll.network.MacPoolManager.log.infoFormat( allocated mac =   mac); return mac; }
@java.lang.Override public javax.ws.rs.core.Response start(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.RunVmParams params; org.ovirt.engine.core.common.action.VdcActionType actionType; if (action.isSetVm()) { org.ovirt.engine.api.model.VM vm = action.getVm(); validateEnums(org.ovirt.engine.api.model.VM.class, vm); actionType = org.ovirt.engine.core.common.action.VdcActionType.RunVmOnce; params = createRunVmOnceParams(vm); } else { actionType = org.ovirt.engine.core.common.action.VdcActionType.RunVm; params = new org.ovirt.engine.core.common.action.RunVmParams(guid); } if ((action.isSetPause()) && (action.isPause())) { params.setRunAndPause(true); } <START_MOD>if (java.lang.Boolean.TRUE.equals(action.isUseSysprep())) { params.setInitializationType(InitializationType.Sysprep); } else if (java.lang.Boolean.TRUE.equals(action.isUseCloudInit())) { params.setInitializationType(InitializationType.CloudInit); } else { params.setInitializationType(InitializationType.None); } <END_MOD>return doAction(actionType, params, action); }
protected boolean validateUniqueVmName() { return org.ovirt.engine.core.bll.VmHandler.isVmWithSameNameExistStatic(org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getName(), org.ovirt.engine.core.bll.ImportVmCommandBase.getStoragePoolId()) ? failCanDoAction(<START_MOD>EngineMessages<END_MOD>.VM_CANNOT_IMPORT_VM_NAME_EXISTS) : true; }
<START_MOD>@javax.enterprise.inject.Produces private org.ovirt.engine.core.dao.network.NetworkClusterDao getNetworkClusterDao(org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacade) { return dbFacade.getNetworkClusterDao(); }<END_MOD>
void initListBoxEditors() { isoEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor<java.lang.Object>(new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer<java.lang.Object>() { @java.lang.Override public java.lang.String renderNullSafe(java.lang.Object object) { org.ovirt.engine.core.compat.RpmVersion version = ((org.ovirt.engine.core.compat.RpmVersion) (object)); return version.getRpmName(); } }); <START_MOD>rbPassword = new com.google.gwt.user.client.ui.RadioButton("1"); rbPublicKey = new com.google.gwt.user.client.ui.RadioButton("1"); <END_MOD>}
@java.lang.Override protected void endWithFailure() { endCommand(); org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS> getQos() { return qos; }
private void createImageForVmMetaData() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CreateImage, new org.ovirt.engine.core.common.vdscommands.CreateImageVDSCommandParameters(storagePool.getId(), storageDomainId, vmConfImageGroupId, MemoryUtils.META_DATA_SIZE_IN_BYTES, org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW, vmConfVolumeId, "")); if (!(retVal.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.<START_MOD>EngineException<END_MOD>(org.ovirt.engine.core.common.errors.<START_MOD>EngineErrors<END_MOD>.VolumeCreationError,   to create image for vm configuration! } org.ovirt.engine.core.compat.Guid taskId = enclosingCommand.persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder.CREATE_IMAGE_FOR_VM_TASK_KEY); org.ovirt.engine.core.compat.Guid guid = enclosingCommand.createTask(taskId, retVal.getCreationInfo(), enclosingCommand.getActionType()); enclosingCommand.getTaskIdList().add(guid); }
@java.lang.Override protected void initDetailModels() { super.initDetailModels(); setBrickListModel(new org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickListModel()); <START_MOD>setSnapshotListModel(new org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotListModel()); <END_MOD>org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); list.add(new org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeneralModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeParameterListModel()); list.add(getBrickListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeEventListModel()); <START_MOD>list.add(getSnapshotListModel()); <END_MOD>setDetailModels(list); }
<START_MOD>private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService> getExistingServices(org.ovirt.engine.core.common.businessentities.VDS server) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService> existingServices = getGlusterServerServiceDao().getByServerId(server.getId()); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService> existingServicesMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService>(); if (existingServices != null) { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterServerService service : existingServices) { existingServicesMap.put(service.getId(), service); } } return existingServicesMap; }<END_MOD>
public org.ovirt.engine.core.bll.ValidationResult <START_MOD>allPassthroughVnicsMigratable<END_MOD>() { for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = getDbFacade().getVmNetworkInterfaceDao().getAllForVm(vm.getId()); java.util.List<java.lang.String> <START_MOD>nonMigratablePassthroughVnicNames<END_MOD> = vnics.stream().filter(<START_MOD>isVnicMigratable(vm).negate()<END_MOD>).map(VmNic::getName).collect(java.util.stream.Collectors.toList()); if (!(<START_MOD>nonMigratablePassthroughVnicNames<END_MOD>.isEmpty())) { java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith("interfaces", <START_MOD>nonMigratablePassthroughVnicNames<END_MOD>); replacements.add(java.lang.String.format( %s vm.getName())); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.<START_MOD>ACTION_TYPE_FAILED_MIGRATION_OF_NON_MIGRATABLE_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED<END_MOD>, replacements); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
<START_MOD>@org.ovirt.engine.ui.webadmin.DefaultStringValue("UnSynced Entries") java.lang.String UnSyncedEntries();<END_MOD>
public org.ovirt.engine.api.restapi.resource.<START_MOD>BackendAbstractClustersSubResource<END_MOD> getParent() { return parent; }
private java.util.List<org.ovirt.engine.core.common.businessentities.AuditLogEventSubscriber> getEventSubscribers(boolean dbDown) { java.util.List<org.ovirt.engine.core.common.businessentities.AuditLogEventSubscriber> eventSubscribers = new java.util.ArrayList<>(); <START_MOD>for (org.ovirt.engine.core.notifier.subscribers.EventSubscribersProvider eventSubscribersProvider : eventSubscribersProviders) { eventSubscribers.addAll(eventSubscribersProvider.getEventSubscribers(dbDown)); } <END_MOD>if (<START_MOD>org.ovirt.engine.core.notifier.NotificationService.log.isDebugEnabled()) { org.ovirt.engine.core.notifier.NotificationService.log.debug(java.lang.String.format( event subscribers read. eventSubscribers.size()));<END_MOD> for (<START_MOD>int i = 0; i < (eventSubscribers.size()); i++) { org.ovirt.engine.core.common.businessentities.AuditLogEventSubscriber eventSubscriber = eventSubscribers.get(i);<END_MOD> org.ovirt.engine.core.notifier.NotificationService.log.debug(java.lang.String.format( %d <START_MOD>=> %s i<END_MOD>, <START_MOD>eventSubscriber.toString())); } }<END_MOD> return eventSubscribers; }
<START_MOD>public java.util.Collection<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> getModifiedInterfaces() { return modifiedInterfaces; }<END_MOD>
<START_MOD>@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.KdumpStatus.class, to = org.ovirt.engine.api.model.KdumpStatus.class) public static org.ovirt.engine.api.model.KdumpStatus map(org.ovirt.engine.core.common.businessentities.KdumpStatus entityStatus, org.ovirt.engine.api.model.KdumpStatus template) { switch (entityStatus) { case UNKNOWN : return org.ovirt.engine.api.model.KdumpStatus.UNKNOWN; case DISABLED : return org.ovirt.engine.api.model.KdumpStatus.DISABLED; case ENABLED : return org.ovirt.engine.api.model.KdumpStatus.ENABLED; default : return null; } }<END_MOD>
public static java.lang.String decryptPassword(java.lang.String password) { if (org.apache.commons.lang.StringUtils.isEmpty(password)) { return password; } java.lang.String keyFile = org.ovirt.engine.core.common.config.Config.resolveKeyStorePath(); java.lang.String passwd = org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.keystorePass, Config.DefaultConfigurationVersion); try { return org.ovirt.engine.core.engineencryptutils.EncryptionUtils.decrypt(((java.lang.String) (password)), keyFile, passwd); } catch (java.lang.Exception e) { org.ovirt.engine.core.dao.VdsStaticDAODbFacadeImpl.log.debugFormat( to decrypt password, error message: {0} e.getMessage()); return password; } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { final boolean isVirtGlusterAllowed = ((java.lang.Boolean) (returnValue)); org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.setModel(clusterModel); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model1, java.lang.Object result) { java.util.<START_MOD>Collection<END_MOD><org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = ((java.util.<START_MOD>Collection<END_MOD><org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>) (result)); if ((volumes.size()) > 0) { clusterModel.getEnableGlusterService().setIsChangable(false); if (!isVirtGlusterAllowed) { clusterModel.getEnableOvirtService().setIsChangable(false); } } } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVolumeList(asyncQuery, cluster.getName()); if ((cluster.getGroupHostsAndVms().getVms()) > 0) { clusterModel.getEnableOvirtService().setIsChangable(false); if (!isVirtGlusterAllowed) { clusterModel.getEnableGlusterService().setIsChangable(false); } } if ((cluster.getGroupHostsAndVms().getHosts()) > 0) { clusterModel.getEnableTrustedService().setIsChangable(false); clusterModel.getEnableTrustedService().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().trustedServiceDisabled()); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getTreeForEntity(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.common.VdcObjectType type, long engineSessionSeqId, boolean isFiltered, int appMode) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id).addValue("object_type_id", type.getValue()).addValue("engine_session_seq_id", engineSessionSeqId).addValue("is_filtered", isFiltered).addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetPermissionsTreeByEntityId", org.ovirt.engine.core.dao.<START_MOD>PermissionDAOImpl<END_MOD>.PermissionRowMapper.instance, parameterSource); }
@java.lang.Override public java.lang.String <START_MOD>render<END_MOD>(org.ovirt.engine.core.common.businessentities.ArchitectureType object) { <START_MOD>if (object == (org.ovirt.engine.core.common.businessentities.ArchitectureType.undefined)) { return super.render(object); } else { <END_MOD>return object.toString(); }<START_MOD> }<END_MOD>
<START_MOD>private void logUnsynchronizedNetworks(org.ovirt.engine.core.common.businessentities.VDS vds, java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.Network> networks) { java.util.List<java.lang.String> networkNames = new java.util.ArrayList<java.lang.String>(); org.ovirt.engine.core.dao.network.NetworkQoSDao qosDao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkQosDao(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : vds.getInterfaces()) { org.ovirt.engine.core.common.businessentities.network.Network network = networks.get(iface.getNetworkName()); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = org.ovirt.engine.core.utils.NetworkUtils.calculateNetworkImplementationDetails(network, (network == null ? null : qosDao.get(network.getQosId())), iface); if (((networkImplementationDetails != null) && (!(networkImplementationDetails.isInSync()))) && (networkImplementationDetails.isManaged())) { networkNames.add(iface.getNetworkName()); } } if (!(networkNames.isEmpty())) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(vds.getId()); logable.addCustomValue("Networks", org.apache.commons.lang.StringUtils.join(networkNames, ",")); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.VDS_NETWORKS_OUT_OF_SYNC); } }<END_MOD>
@java.lang.Override protected void endWithFailure() { if (isStatelessSnapshotExistsForVm()) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.RunVmCommand.getBackend().endAction(VdcActionType.CreateAllSnapshotsFromVm, <START_MOD>getCreateAllSnapshotFromVmParameters<END_MOD>(), org.ovirt.engine.core.bll.RunVmCommand.cloneContext().withoutExecutionContext().withoutLock()); setSucceeded(vdcReturnValue.getSucceeded()); } else { super.endWithFailure(); } }
<START_MOD>public static java.lang.String getOsName(int osId) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncReturnValue<java.lang.String> asyncReturnValue = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncReturnValue<java.lang.String>(); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.OsRepository, new org.ovirt.engine.ui.uicommonweb.dataprovider.OsQueryParameters(OsRepositoryVerb.GetOsName, osId), asyncReturnValue); return asyncReturnValue.get(); }<END_MOD>
public java.util.Map activateStorageDomain(java.lang.String sdUUID, java.lang.String spUUID) { try { log.info( storage domain, spUUID: {} sdUUID: {} new java.lang.Object[]{ spUUID, sdUUID }); final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); org.ovirt.vdsmfake.domain.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); if (storageDomain != null) { <START_MOD>activateClearance(storageDomain); } else { storageDomain = getActiveDomain(sdUUID, spUUID); activateClearance<END_MOD>(storageDomain); } return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
private java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> getAttachmentsToConfigure() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = new java.util.HashMap(org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById(existingAttachments)); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : params.getRemovedNetworkAttachments()) { attachmentsToConfigure.remove(removedAttachment.getId()); } java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> newAttachments = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : params.getNetworkAttachments()) { if ((attachment.getId()) == null) { newAttachments.add(attachment); continue; } if (removedBonds.containsKey(attachment.getNicName())) { attachmentsToConfigure.put(attachment.getId(), attachment); } else { attachmentsToConfigure.remove(attachment.getId()); } } java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> candidateAttachments = new java.util.ArrayList(attachmentsToConfigure.values()); candidateAttachments.addAll(newAttachments); return candidateAttachments; }
private void clusterSelectedItemChanged() { if ((getCluster().getSelectedItem()) != null) { <START_MOD>org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ((org.ovirt.engine.core.common.businessentities.VDSGroup) (getCluster().getSelectedItem())); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetHostListByCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList = ((java.util.List<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); for (org.ovirt.engine.core.common.businessentities.VDS host : hostList) { if ((host.getstatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { <END_MOD>getAddBricksCommand().setIsExecutionAllowed(true); <START_MOD>return; } } getAddBricksCommand().setIsExecutionAllowed(false); setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().volumeEmptyClusterValidationMsg()); } }), cluster.getname()); <END_MOD>} else { getAddBricksCommand().setIsExecutionAllowed(false); } setBricks(new org.ovirt.engine.ui.uicommonweb.models.ListModel()); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>DetachStorageDomainFromPoolCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL : org.ovirt.engine.core.common.AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL_FAILED; }
<START_MOD>public static boolean isOsSupportedForVirtIoScsi(int osId, org.ovirt.engine.core.compat.Version clusterVersion) { java.util.ArrayList<java.lang.String> diskInterfaces = org.ovirt.engine.core.common.utils.SimpleDependecyInjector.getInstance().get(org.ovirt.engine.core.common.osinfo.OsRepository.class).getDiskInterfaces(osId, clusterVersion); return diskInterfaces.contains(DiskInterface.VirtIO_SCSI.toString()); }<END_MOD>
@java.lang.Override public java.lang.String toString() { <START_MOD>return org<END_MOD>.<START_MOD>ovirt<END_MOD>.<START_MOD>engine<END_MOD>.<START_MOD>core<END_MOD>.<START_MOD>common.utils.ToStringBuilder.forInstance<END_MOD>(<START_MOD>this<END_MOD>).append(<START_MOD>"id"<END_MOD>, <START_MOD>getId()).append("name"<END_MOD>, <START_MOD>getName()).append("cidr"<END_MOD>, <START_MOD>getCidr()).append("ipVersion"<END_MOD>, <START_MOD>getIpVersion()).append("externalNetwork"<END_MOD>, <START_MOD>getExternalNetwork()).append("gateway"<END_MOD>, <START_MOD>getGateway()).append("dnsServers",<END_MOD> <START_MOD>getDnsServers())<END_MOD>.<START_MOD>build<END_MOD>(); }
private void addGhostEntry() { <START_MOD>T value = <END_MOD>createGhostValue()<START_MOD>; addEntry(value); modelItems.add(value<END_MOD>); }
<START_MOD>@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); boolean succeeded = true; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if ((host.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { succeeded = false; } } guideModel.getWindow().stopProgress(); guideModel.cancel(); if (succeeded) { guideModel.postAction(); } else { errorPopupManager.show(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hostActivationTimeOut()); } }<END_MOD>
<START_MOD>@java.lang.Override public void setIcon(org.gwtbootstrap3.client.ui.constants.IconType icon) { if (icon != null) { super.setIcon(icon); } }<END_MOD>
@java.lang.Override protected void postConstruct() { super.postConstruct(); T parameters = getParameters(); setVmId(parameters.getContainerId()); setVm(parameters.getVm()); setVdsGroupId(parameters.getVdsGroupId()); if (((parameters.getVm()) != null) && ((getVm().getDiskMap()) != null)) { imageList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) { imageList.add(((org.ovirt.engine.core.common.businessentities.DiskImage) (disk))); } } } ensureDomainMap(imageList, parameters.getDestDomainId()); org.ovirt.engine.core.compat.Version clusterVersion = ((org.ovirt.engine.core.bll.ImportVmCommand.getVdsGroup()) == null) ? null : org.ovirt.engine.core.bll.ImportVmCommand.getVdsGroup().getCompatibilityVersion(); org.ovirt.engine.core.common.businessentities.VmStatic staticData = ((getVm()) == null) ? null : getVm().getStaticData(); org.ovirt.engine.core.bll.ImportUtils.updateGraphicsDevices(staticData, clusterVersion); }
@java.lang.Override protected boolean <START_MOD>validate<END_MOD>() { if (!(super.<START_MOD>validate<END_MOD>())) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume = getGlusterVolume(); if (!(glusterVolume.isOnline())) { return <START_MOD>failValidate<END_MOD>(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED); } return true; }
<START_MOD>@org.junit.Test public void testReattachingPreexistingNetworkAfterItsBeingDetached() throws java.lang.Exception { when(logicalNetworkModelOfNetworkA.isAttached()).thenReturn(false); org.ovirt.engine.core.compat.Guid networkAttachmentId = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.newNetworkAttachment(networkA, nicA, networkAttachmentId); allNetworkAttachments.add(networkAttachment); hsnp.getRemovedNetworkAttachments().add(networkAttachment); NetworkOperation.ATTACH_NETWORK.getTarget().executeNetworkCommand(logicalNetworkModelOfNetworkA, networkInterfaceModelOfNicA, allNics, allNetworkAttachments, hsnp); assertThat(hsnp.getNetworkAttachments().size(), is(1)); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment updatedNetworkAttachment = hsnp.getNetworkAttachments().iterator().next(); assertNetworkAttachment(updatedNetworkAttachment, networkAttachmentId, networkA.getId(), nicA.getId()); assertThat(hsnp.getRemovedNetworkAttachments().size(), is(0)); }<END_MOD>
<START_MOD>@org.junit.Test public void testGetByNameAndCluster() { org.ovirt.engine.core.common.businessentities.Network result = dao.getByNameAndCluster("engine", cluster); assertNotNull(result); assertEquals("engine", result.getname()); }<END_MOD>
<START_MOD>@java.lang.Override protected boolean canDoAction() { final boolean wrongInput = ((getParameters()) == null) || ((getParameters().getMacPool()) == null); if ((!(super.canDoAction())) || wrongInput) { return false; } final org.ovirt.engine.core.common.businessentities.MacPool macPool = getMacPool(); if (macPool.isDefaultPool()) { addCanDoActionMessage(VdcBllMessages.MAC_POOL_CANNOT_SET_DEFAULT_POOL_THIS_WAY); return false; } if ((org.apache.commons.lang.StringUtils.isEmpty(macPool.getName())) && (macPool.isShared())) { addCanDoActionMessage(VdcBllMessages.MAC_POOL_SHARED_POOL_MUST_HAVE_NAME); return false; } if (((macPool.getRanges()) == null) || (macPool.getRanges().isEmpty())) { addCanDoActionMessage(VdcBllMessages.MAC_POOL_MUST_HAVE_RANGE); return false; } return true; }<END_MOD>
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.bll.job.ExecutionContext createMigrateVmContext(org.ovirt.engine.core.bll.job.ExecutionContext parentContext, org.ovirt.engine.core.common.businessentities.VM vm) { return new org.ovirt.engine.core.bll.job.ExecutionContext(); }<END_MOD>
com.google.gwt.safehtml.shared.SafeHtml getResourceImage(org.ovirt.engine.core.common.businessentities.VM vm) { if (((vm.getVmPauseStatus()) != (org.ovirt.engine.core.common.businessentities.VmPauseStatus.NONE)) || ((vm.getVmPauseStatus()) != (org.ovirt.engine.core.common.businessentities.VmPauseStatus.NOERR))) { return null; } else { com.google.gwt.resources.client.ImageResource alertImageResource = resources.alertImage(); com.google.gwt.user.client.ui.AbstractImagePrototype imagePrototype = com.google.gwt.user.client.ui.AbstractImagePrototype.create(alertImageResource); java.lang.String html = imagePrototype.getHTML(); org.ovirt.engine.ui.uicompat.Translator translator = <START_MOD>new <END_MOD>org.ovirt.engine.ui.uicompat.EnumTranslator<START_MOD>(<END_MOD>); java.lang.String toolTip = translator.get(vm.getVmPauseStatus()); html = html.replaceFirst("img", (((   + "title='") + toolTip) +     return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(html); } }
<START_MOD>@org.junit.Test public void testValidateBondOptionsForNewAttachementNewBond() { validateBondOptionsForNewAttachement(null, EngineMessage.NETWORK_ATTACHMENT_INVALID_BONDMODE_NEW_BOND, true); }<END_MOD>
<START_MOD>@java.lang.Override protected void init() { setVdsId(org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.getParameters().getVdsId()); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Hosts java.lang.String addMultipleHostsTitle();
public static long greatestCommonDivisor(long a, long b) { while (b != 0) { <START_MOD>long c<END_MOD> = <START_MOD>a<END_MOD>; b = a % b; <START_MOD>a = c; <END_MOD>} return a; }
<START_MOD>public java.lang.Integer getTimezoneOffset() { return timezoneOffset; }<END_MOD>
public static java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> filterImageDisks(java.util.Collection<? extends org.ovirt.engine.core.common.businessentities.Disk> listOfDisks, boolean allowOnlyNotShareableDisks, boolean allowOnlySnapableDisks) { <START_MOD>return <END_MOD>org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>ImagesHandler<END_MOD>.<START_MOD>filterImageDisks(listOfDisks,<END_MOD> <START_MOD>allowOnlyNotShareableDisks,<END_MOD> <START_MOD>allowOnlySnapableDisks,<END_MOD> <START_MOD>true<END_MOD>); }
@java.lang.Override public void addToSlot(java.lang.Object slot, com.google.gwt.user.client.ui.Widget content) { if (slot == (org.ovirt.engine.ui.userportal.section.main.presenter.tab.basic.MainTabBasicListPresenterWidget.TYPE_VmListContent)) { <START_MOD>if (content != null) { <END_MOD>vmPanel.add(content);<START_MOD> } else { vmPanel.clear(); }<END_MOD> } else { super.addToSlot(slot, content); } }
@org.junit.Test public void testQueryFailsIfPeerExists() { mockQueryParameters(org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.NEW_SERVER, org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.PASSWORD); doReturn(getVdsStatic()).when(vdsStaticDao).getByHostName(org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.SERVER_NAME1); try { getQuery().executeQueryCommand(); fail( didn fail when one or more peers already exist(s)! } catch (java.lang.RuntimeException e) { assertEquals(<START_MOD>EngineMessages<END_MOD>.SERVER_ALREADY_EXISTS_IN_ANOTHER_CLUSTER.toString(), e.getMessage()); } }
<START_MOD>@org.junit.Test public void testQueryDefaultGeneralTimeZone() { mcr.mockConfigValue(ConfigValues.DefaultGeneralTimeZone, org.ovirt.engine.core.bll.GetDefualtTimeZoneQueryTest.DEFAULT_GENERAL_TIME_ZONE_KEY); when(getQueryParameters().isWindowsOS()).thenReturn(false); getQuery().executeQueryCommand(); @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.lang.String> result = ((org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.lang.String>) (getQuery().getQueryReturnValue().getReturnValue())); assertTrue(("Wrong default time zone: " + (result.getKey())), result.getKey().equals(org.ovirt.engine.core.bll.GetDefualtTimeZoneQueryTest.DEFAULT_GENERAL_TIME_ZONE_KEY)); }<END_MOD>
<START_MOD>@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc snapshot(java.lang.String vmId, java.util.Map<java.lang.String, java.lang.String>[] disks, java.lang.String memory, boolean frozen) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.snapshot").withParameter("vmID", vmId).withParameter("snapDrives", new java.util.ArrayList<java.util.Map<java.lang.String, java.lang.String>>(java.util.Arrays.asList(disks))).withParameter("snapMemory", memory).withParameter("frozen", frozen).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }<END_MOD>
protected boolean validateSpaceRequirements() { int numOfVms = org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getParameters().getVmsCount<START_MOD>(); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> diskdummies = getDiskList<END_MOD>(); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList = new java.util.ArrayList<>(); for (int i = 0; i < numOfVms; ++i) { disksList.addAll(diskInfoDestinationMap.values()); } org.ovirt.engine.core.compat.Guid spId = org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getVmTemplate().getStoragePoolId(); java.util.Set<org.ovirt.engine.core.compat.Guid> sdIds = destStorages.keySet(); org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator storageDomainsValidator = getStorageDomainsValidator(spId, sdIds); return (validate(storageDomainsValidator.allDomainsWithinThresholds())) && (validate(storageDomainsValidator.allDomainsHaveSpaceForNewDisks(disksList))); }
<START_MOD>public void setHostDevicePassthroughEnabled(boolean value) { hostDevicePassthroughEnabled = value; }<END_MOD>
@java.lang.Override protected boolean canDoAction() { if (!(validate(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommand.getStoragePool()).isUp()))) { return false; } if (!(org.ovirt.engine.core.common.FeatureSupported.refreshLunSupported(org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommand.getStoragePool().getCompatibilityVersion()))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_REFRESH_LUNS_UNSUPPORTED_ACTION); } if (!((org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommand.checkStorageDomain()) && (checkStorageDomainStatus(StorageDomainStatus.Active)))) { return false; } if (!(org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommand.getStorageDomain().getStorageType().isBlockDomain())) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); } if (!(checkLunsInStorageDomain(org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommand.getParameters().getLunIds(), org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommand.getStorageDomain()))) { return failCanDoAction(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_LUNS_NOT_PART_OF_STORAGE_DOMAIN); } return true; }
private void Preview() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getEntity())); if (vm != null) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = ((org.ovirt.engine.core.common.businessentities.Snapshot) (getSelectedItem())); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId()), <START_MOD>Frontend<END_MOD>.<START_MOD>NULLABLE_ASYNC_CALLBACK<END_MOD>, null); } }
@java.lang.Override protected void syncSearch() { if ((getEntity()) != null) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolumeEntity = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (getEntity())); if ((getItems()) == (glusterVolumeEntity.getBricks())) { getItemsChangedEvent().raise(this, EventArgs.<START_MOD>empty<END_MOD>); } else { setItems(glusterVolumeEntity.getBricks()); } } else { setItems(null); } }
<START_MOD>@org.ovirt.engine.ui.uicompat.DefaultStringValue("The VM is in suspended state, it might not operate normally after resume on different cluster. It's suggested to power it off before cluster change.") java.lang.String suspendedVMsWhenClusterChange();<END_MOD>
<START_MOD>private void validateClusterMappings(org.ovirt.engine.api.model.Action action) { if (((action.isSetRegistrationConfiguration()) && (action.getRegistrationConfiguration().isSetClusterMappings())) && (action.getRegistrationConfiguration().getClusterMappings().isSetRegistrationClusterMappings())) { action.getRegistrationConfiguration().getClusterMappings().getRegistrationClusterMappings().forEach(this::validateClusterMapping); } }<END_MOD>
protected boolean isHotPlugSupported() { if (org.ovirt.engine.core.common.FeatureSupported.hotPlug(org.ovirt.engine.core.bll.VmCommand.getVm().<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())) { return true; } return failCanDoAction(EngineMessage.HOT_PLUG_IS_NOT_SUPPORTED); }
<START_MOD>public java.lang.String getBrandedFaviconPath() { java.util.List<org.ovirt.engine.core.utils.branding.BrandingTheme> brandingThemes = getBrandingThemes(); for (int i = (brandingThemes.size()) - 1; i >= 0; i--) { java.lang.String faviconPath = brandingThemes.get(i).getFaviconPath(); if (faviconPath != null) { return faviconPath; } } return null; }<END_MOD>
private void tagListModel_SelectedItemsChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs e) { <START_MOD>getSystemTree().getSelectedItemChangedEvent().removeListener(this); getSystemTree().getResetCommand().execute(); getSystemTree().getSelectedItemChangedEvent().addListener(this); <END_MOD>boolean hadSelectedTags = getHasSelectedTags(); updateHasSelectedTags(); if (getHasSelectedTags()) { setAllListModelsUnavailable(); <START_MOD>getHostList()<END_MOD>.setIsAvailable(true); <START_MOD>getVmList()<END_MOD>.setIsAvailable(true); <START_MOD>getUserList()<END_MOD>.setIsAvailable(true); } else { updateAvailability(SystemTreeItemType.System, null); } org.ovirt.engine.ui.uicommonweb.models.ListModel oldSelectedItem = getSelectedItem(); if (((((getHasSelectedTags()) && (oldSelectedItem != (<START_MOD>getHostList()<END_MOD>))) && (oldSelectedItem != (<START_MOD>getVolumeList()<END_MOD>))) && (oldSelectedItem != (<START_MOD>getVmList()<END_MOD>))) && (oldSelectedItem != (<START_MOD>getUserList()<END_MOD>))) { setSelectedItem(<START_MOD>getVmList()<END_MOD>); } else if ((getHasSelectedTags()) || hadSelectedTags) { java.lang.String prefix = ""; java.lang.String search = ""; org.ovirt.engine.core.compat.RefObject<java.lang.String> tempRef_prefix = new org.ovirt.engine.core.compat.RefObject<java.lang.String>(prefix); org.ovirt.engine.core.compat.RefObject<java.lang.String> tempRef_search = new org.ovirt.engine.core.compat.RefObject<java.lang.String>(search); splitSearchString(getSelectedItem().getDefaultSearchString(), tempRef_prefix, tempRef_search); prefix = tempRef_prefix.argvalue; search = tempRef_search.argvalue; setSearchStringPrefix(prefix); setSearchString(search); getSearchCommand().execute(); searchStringChanged(); } }
@org.junit.Test public void movePluggedDiskAndUnpluggedDiskVmUp() { org.ovirt.engine.core.compat.Guid diskImageId1 = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.compat.Guid diskImageId2 = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters1 = new org.ovirt.engine.core.common.action.MoveDiskParameters(diskImageId1, srcStorageId, dstStorageId); org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters2 = new org.ovirt.engine.core.common.action.MoveDiskParameters(diskImageId2, srcStorageId, dstStorageId); command.getParameters().setParametersList(java.util.Arrays.asList(moveDiskParameters1, moveDiskParameters2)); initDiskImage(diskImageId1); initDiskImage(diskImageId2); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageId1, true, diskImageId2, false); command.updateParameters(); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_MOVE_DISKS_MIXED_PLUGGED_STATUS.toString())); }
<START_MOD>protected<END_MOD> void updateExternalVnicProfilesPerTargetCluster() { final java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result = new java.util.HashMap<>(); getEntities().getItems()<START_MOD>.stream().forEach(( registerVmData<END_MOD>) <START_MOD>-><END_MOD> <START_MOD>updateExternalVnicProfilesPerTargetCluster(registerVmData<END_MOD>.<START_MOD>getEntity()<END_MOD>.<START_MOD>getInterfaces(),<END_MOD> registerVmData.getCluster().getSelectedItem()<START_MOD>, result))<END_MOD>; <START_MOD>setExternalVnicProfilesPerTargetCluster<END_MOD>(result); }
public static void GetLocalStorageHost(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, java.lang.String dataCenterName) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { for (org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.IVdcQueryable item : ((java.util.ArrayList<org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.IVdcQueryable>) (source))) { return item; } } return null; } }; org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.SearchParameters sp = new org.ovirt.engine.<START_MOD>ui.uicommonweb.dataprovider<END_MOD>.SearchParameters(( datacenter= + dataCenterName), org.ovirt.engine.core.common.interfaces.SearchType.VDS); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.Search, sp, aQuery); }
private static org.ovirt.engine.core.common.businessentities.VmPool cloneVmPool(org.ovirt.engine.core.common.businessentities.VmPool instance) { org.ovirt.engine.core.common.businessentities.VmPool obj = new org.ovirt.engine.core.common.businessentities.VmPool(); obj.setVmPoolId(instance.getVmPoolId()); obj.setName(instance.getName()); obj.setVmPoolType(instance.getVmPoolType()); obj.setVdsGroupId(instance.getVdsGroupId()); obj.setParameters(instance.getParameters()); obj.setDefaultEndTime(instance.getDefaultEndTime()); obj.setDefaultStartTime(instance.getDefaultStartTime()); obj.setDefaultTimeInDays(instance.getDefaultTimeInDays()); obj.setVdsGroupName(instance.getVdsGroupName()); obj.setAssignedVmsCount(instance.getAssignedVmsCount()); obj.setVmPoolDescription(instance.getVmPoolDescription()); obj.setComment(instance.getComment()); obj.setRunningVmsCount(instance.getRunningVmsCount()); obj.setPrestartedVms(instance.getPrestartedVms()); return obj; }
<START_MOD>@java.lang.Override public org.ovirt.engine.ui.uicommonweb.models.Model setIsChangable(boolean value) { getAverage().setIsChangable(value); getPeak().setIsChangable(value); getBurst().setIsChangable(value); return super.setIsChangable(value); }<END_MOD>
public void setSwapFree(java.lang.Long value) { mVdsStatistics.setSwapFree(value); }
<START_MOD>@java.lang.Override protected void preSave() { startProgress(null); if (!(org.ovirt.engine.core.compat.StringHelper.stringsEqualIgnoreCase(((java.lang.String) (getUrl().getEntity())), oldUrl))) { providedTypes = provider.getType().getProvidedTypes(); initQueries(); if (providedTypes.contains(VdcObjectType.Network)) { org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllNetworksForProvider, new org.ovirt.engine.core.common.queries.IdQueryParameters(provider.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(null, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { if (!(((java.util.Collection<org.ovirt.engine.core.common.businessentities.network.Network>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())).isEmpty())) { entitiesProvided = false; } updateQueries(VdcObjectType.Network); } })); } } }<END_MOD>
protected boolean areUpdatedFieldsLegal() { return <START_MOD>org.ovirt.engine.core.bll.<END_MOD>VmHandler.IsUpdateValid(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus()); }
protected void doRegister(java.lang.String hostAddress, int hostSSHPort, java.lang.String hostSSHKeyFingerprint, java.lang.String hostSSHUser, int hostVdsPort, java.lang.String hostName, java.lang.String hostUniqueId) { if (hostSSHUser == null) { hostSSHUser = "root"; } if (hostName == null) { hostName = hostAddress; } if (hostUniqueId == null) { throw new java.lang.RuntimeException( id was not provided } org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = ((org.ovirt.engine.core.bll.interfaces.BackendInternal) (org.ovirt.engine.core.utils.ejb.EjbUtils.findBean(BeanType.BACKEND, BeanProxyType.LOCAL))).runInternalQuery(VdcQueryType.RegisterVds, new org.ovirt.engine.core.common.queries.hostdeploy.RegisterVdsParameters(org.ovirt.engine.core.compat.Guid.Empty, hostAddress, hostSSHPort, hostSSHKeyFingerprint, hostSSHUser, hostName, hostUniqueId, hostVdsPort, org.ovirt.engine.core.compat.Guid.Empty)); if (queryReturnValue == null) { throw new java.lang.RuntimeException( failed (null) } if (!(queryReturnValue.getSucceeded())) { java.lang.String r = queryReturnValue.getExceptionString(); if (r == null) { throw new java.lang.RuntimeException( failed (null) } if (!(r.equals(<START_MOD>EngineMessages<END_MOD>.VDS_STATUS_NOT_VALID_FOR_UPDATE.name()))) { throw new java.lang.RuntimeException(java.lang.String.format( failed '%s' r)); } } }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.<START_MOD>RolesEntity<END_MOD> oldRole = org.ovirt.engine.core.bll.UpdateRoleCommand.getRoleDao().get(org.ovirt.engine.core.bll.UpdateRoleCommand.getRole().getId()); if (oldRole == null) { addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_UPDATE_ROLE_ID); returnValue = false; } else { if (checkIfRoleIsReadOnly(org.ovirt.engine.core.bll.UpdateRoleCommand.getReturnValue().getCanDoActionMessages())) { returnValue = false; addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE); } else if ((!(org.ovirt.engine.core.compat.StringHelper.EqOp(org.ovirt.engine.core.bll.UpdateRoleCommand.getRole().getname(), oldRole.getname()))) && ((org.ovirt.engine.core.bll.UpdateRoleCommand.getRoleDao().getByName(org.ovirt.engine.core.bll.UpdateRoleCommand.getRole().getname())) != null)) { addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_UPDATE_ROLE_NAME); returnValue = false; } else if ((org.ovirt.engine.core.bll.UpdateRoleCommand.getRole().getType()) != (oldRole.getType())) { addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_UPDATE_ROLE_TYPE); returnValue = false; } } if (!returnValue) { addCanDoActionMessage(VdcBllMessages.VAR__TYPE__ROLE); addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE); } return returnValue; }
private java.lang.Object getVmsFromExternalProvider() { try { return <START_MOD>vdsBroker<END_MOD>.RunVdsCommand(VDSCommandType.GetVmsFromExternalProvider, buildGetRemoteVmsInfoParameters()).getReturnValue(); } catch (java.lang.RuntimeException e) { if (!(e instanceof java.lang.IllegalArgumentException)) { logFailureToGetVms(); } throw e; } }
private void revealDiskPanel(final org.ovirt.engine.ui.uicommonweb.models.vms.AttachDiskModel disk) { diskTypePanel.setVisible(isNewLunDiskEnabled); imageDiskTable.setVisible(false); lunDiskTable.setVisible(false); org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel> diskTable; switch (disk.getDiskStorageType().getEntity()) { case LUN : diskTable = lunDiskTable; break; default : diskTable = imageDiskTable; break; } diskTable.setVisible(true); <START_MOD>org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel>> disksListModel = disk.getAttachableDisksMap().get(disk.getDiskStorageType().getEntity()); org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel> selectedModel = disksListModel.getSelectedItem(); java.util.List<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel>> selectedModels = disksListModel.getSelectedItems(); disksListModel.setSelectedItem(null); disksListModel.setSelectedItems(null); <END_MOD>diskTable.asEditor().edit(<START_MOD>disksListModel); disksListModel.setSelectedItem(selectedModel); disksListModel.setSelectedItems(selectedModels<END_MOD>); }
private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> getNewVnicProfileMappings(org.ovirt.engine.ui.uicommonweb.models.vms.<START_MOD>register.RegisterVmData registerVmData, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> clusterVnicProfileMappings) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> result = new java.util.HashSet<>(); for (<END_MOD>org.ovirt.engine.core.common.businessentities.<START_MOD>network.VmNetworkInterface vnic : registerVmData.getEntity().getInterfaces()) { final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity(vnic.getNetworkName()<END_MOD>, <START_MOD>vnic.getVnicProfileName(), null); if (!(<END_MOD>clusterVnicProfileMappings<START_MOD>.contains(newMapping))<END_MOD>) { result<START_MOD>.add(<END_MOD>newMapping<START_MOD>); } } return<END_MOD> result; }
<START_MOD>@java.lang.Override public java.lang.Void runInTransaction() { getCompensationContext().snapshotEntity(getVm().getDynamicData()); updateVmData(getVm().getDynamicData()); getCompensationContext().stateChanged(); return null; }<END_MOD>
<START_MOD>private static org.ovirt.engine.core.common.businessentities.VM getVM(int count, boolean pinned) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setId(new org.ovirt.engine.core.compat.Guid(("AAA00000-0000-0000-0000-123456789AA" + count))); vm.setName(("VM" + count)); if (pinned) { vm.setStatus(VMStatus.Up); } else { vm.setStatus(VMStatus.Down); } vm.setNumaTuneMode(NumaTuneMode.STRICT); vm.getStaticData().setvNumaNodeList(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmNumaNode>()); vm.getStaticData().getvNumaNodeList().add(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getvNumaNode1(0, pinned)); vm.getStaticData().getvNumaNodeList().add(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getvNumaNode2(1, pinned)); return vm; }<END_MOD>
private static java.util.Map<java.lang.String, java.lang.String> getMessageMap(org.ovirt.engine.core.common.businessentities.VDSGroup cluster, org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask task) { java.util.Map<java.lang.String, java.lang.String> values = new java.util.HashMap<java.lang.String, java.lang.String>(); values.put(GlusterConstants.CLUSTER, cluster.getName()); values.put(GlusterConstants.VOLUME, task.getTaskParameters().getVolumeName()); values.put(<START_MOD>GlusterConstants.JOB_STATUS<END_MOD>, task.getStatus().toString()); values.put(<START_MOD>GlusterConstants.JOB_INFO<END_MOD>, task.getMessage()); return values; }
<START_MOD>@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void testEmptyKeySubscription() { java.lang.String id = ".*.*.*"; org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder holder = mock(org.ovirt.vdsm.jsonrpc.client.events.SubscriptionHolder.class); when(holder.getId()).thenReturn(id); when(holder.getParsedId()).thenReturn(parse(id)); org.ovirt.vdsm.jsonrpc.client.events.SubscriptionMatcher matcher = new org.ovirt.vdsm.jsonrpc.client.events.SubscriptionMatcher(); matcher.add(holder); }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object target, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = returnValue.getReturnValue(); boolean succeeded = true; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (!(host.getClusterId().equals(hostClusterIdMap.get(host.getId())))) { succeeded = false; } } if (!succeeded) { guideModel.getWindow().stopProgress(); guideModel.cancel(); errorPopupManager.show(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hostChangeClusterTimeOut()); } else { activateHostsAfterClusterChange(guideModel, searchStr, activateVdsParameterList); } }
public void setStatus(org.ovirt.engine.core.common.businessentities.VDSStatus status, org.ovirt.engine.core.common.businessentities.VDS vds) { synchronized(getLockObj()) { if (vds == null) { vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(getVdsId()); } if ((vds.getPreviousStatus()) != (vds.getStatus())) { vds.setPreviousStatus(vds.getStatus()); if ((_vds) != null) { _vds.setPreviousStatus(vds.getStatus()); if (<START_MOD>status<END_MOD> == (org.ovirt.engine.core.common.businessentities.VDSStatus.PreparingForMaintenance)) { calculateNextMaintenanceAttemptTime(); } } } vds.setStatus(status); if ((_vds) != null) { _vds.setStatus(status); } switch (status) { case NonOperational : if ((_vds) != null) { _vds.setNonOperationalReason(vds.getNonOperationalReason()); } if ((vds.getVmCount()) > 0) { break; } case NonResponsive : case Down : case Maintenance : vds.setCpuSys(java.lang.Double.valueOf(0)); vds.setCpuUser(java.lang.Double.valueOf(0)); vds.setCpuIdle(java.lang.Double.valueOf(0)); vds.setCpuLoad(java.lang.Double.valueOf(0)); vds.setUsageCpuPercent(0); vds.setUsageMemPercent(0); vds.setUsageNetworkPercent(0); if ((_vds) != null) { _vds.setCpuSys(java.lang.Double.valueOf(0)); _vds.setCpuUser(java.lang.Double.valueOf(0)); _vds.setCpuIdle(java.lang.Double.valueOf(0)); _vds.setCpuLoad(java.lang.Double.valueOf(0)); _vds.setUsageCpuPercent(0); _vds.setUsageMemPercent(0); _vds.setUsageNetworkPercent(0); } default : break; } } }
<START_MOD>@org.junit.Test public void testVolume() { testValidSql("volume: ", "SELECT * FROM (SELECT * FROM gluster_volumes_view WHERE ( id IN (SELECT gluster_volumes_view.id FROM gluster_volumes_view )) ORDER BY vol_name ASC ) as T1 OFFSET (1 -1) LIMIT 0"); }<END_MOD>
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (vdsManager.isMonitoringNeeded()) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = getVmsFetcher(); long fetchTime = java.lang.System.nanoTime(); if (fetcher.fetch()) { <START_MOD>processDevices(fetcher); <END_MOD>getVmsMonitoring(fetcher, fetchTime).perform(); } else { org.ovirt.engine.core.vdsbroker.PollVmStatsRefresher.log.info( to fetch vms info for host '{}' - skipping VMs monitoring. vdsManager.getVdsName()); } } }
@java.lang.SuppressWarnings("unchecked") protected void initializeCommand(org.ovirt.engine.core.common.businessentities.ImageOperation operation) { command = spy(new org.ovirt.engine.core.bll.MoveOrCopyDiskCommandTest.MoveOrCopyDiskCommandDummy(new org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters(diskImageGuid, srcStorageId, destStorageId, operation))); doReturn(true).when(command).<START_MOD>isStorageDomainSpaceAboveThresholds<END_MOD>(); doReturn(true).when(command).doesStorageDomainHaveSpaceForRequest(anyLong()); doReturn(true).when(command).checkImageConfiguration(any(java.util.List.class)); doReturn(java.util.Collections.emptyList()).when(command).getAllImageSnapshots(); doReturn(false).when(command).acquireLock(); }
public static java.lang.Number convert(long size, org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>utils.gluster<END_MOD>.SizeConverter.SizeUnit fromUnit, org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>utils.gluster<END_MOD>.SizeConverter.SizeUnit toUnit) { long fromType = fromUnit.getUnitWeight(); long toType = toUnit.getUnitWeight(); return size * ((java.lang.Math.pow(org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>utils.gluster<END_MOD>.SizeConverter.CONVERT_FACTOR, fromType)) / (java.lang.Math.pow(org.ovirt.engine.<START_MOD>core<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>utils.gluster<END_MOD>.SizeConverter.CONVERT_FACTOR, toType))); }
<START_MOD>private static java.util.List<java.lang.reflect.Method> getRelevantMethods(java.lang.Class<?> clz) { java.util.List<java.lang.reflect.Method> methods = new java.util.ArrayList<>(); if (org.ovirt.engine.api.utils.LinkHelper.methodCache.containsKey(clz)) { return org.ovirt.engine.api.utils.LinkHelper.methodCache.get(clz); } for (java.lang.reflect.Method method : clz.getMethods()) { if (method.getName().startsWith("get")) { if ((method.getReturnType().getPackage()) == (org.ovirt.engine.api.model.BaseResource.class.getPackage())) { methods.add(method); } } } org.ovirt.engine.api.utils.LinkHelper.methodCache.put(clz, methods); return methods; }<END_MOD>
<START_MOD>@org.junit.Test public void submitFullFailureNoRetry() { boolean gotException = false; prepareMocks(runnableCreator, false, 0); try { latchedRunnableExecuter.execute(); } catch (java.util.concurrent.RejectedExecutionException e) { gotException = true; } assertTrue("expected RejectedExecutionException wasn't thrown", gotException); assertEquals("the counter was incremented more times then expected", 0, counter.intValue()); verify(latchedRunnableExecuter, never()).performSleep(); assertEquals("latch counter wasn't in the expected value", org.ovirt.engine.core.utils.thread.LatchedRunnableWrapperTest.THREADS_NUMBER, latch.getCount()); verifyCommonFailureChecks(); }<END_MOD>
@java.lang.Override protected void teardown() { <START_MOD>org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(() -> { int sleepTimeInSec = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ServerRebootTimeout); org.ovirt.engine.core.bll.pm.log.info( {<END_MOD>}<START_MOD> seconds, for server to finish boot process. sleepTimeInSec); org.ovirt.engine.core.utils.ThreadUtils.sleep(TimeUnit.SECONDS.toMillis(sleepTimeInSec)); if (getParameters().isChangeHostToMaintenanceOnStart()) { setStatus(VDSStatus.Maintenance); } else { setStatus(VDSStatus.NonResponsive); } }); }<END_MOD>
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.GlusterBricks bricks) { <START_MOD>for (org.ovirt.engine.api.model.GlusterBrick brick : bricks.getGlusterBricks()) { validateParameters(brick, "serverId", "brickDir"); } java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> brickEntities = mapBricks(asGuid(getVolumeId()), bricks); int replicaCount = (bricks.isSetNewReplicaCount()) ? bricks.getNewReplicaCount() : 0; int stripeCount = (bricks.isSetNewStripeCount()) ? bricks.getNewStripeCount() : 0; return performCreationMultiple(VdcActionType.AddBricksToGlusterVolume,<END_MOD> new org.ovirt.engine.core.<START_MOD>common.action.gluster.GlusterVolumeBricksActionParameters(asGuid(getVolumeId()), brickEntities, replicaCount, stripeCount), new org.ovirt.engine.api.restapi.resource.gluster.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetGlusterBrickById, org.ovirt.engine.core.common.queries.gluster.IdQueryParameters.class)<END_MOD>); }
<START_MOD>@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource mapper = createIdParameterMapper(networkAttachment.getId()).addValue("network_id", networkAttachment.getNetworkId()).addValue("nic_id", networkAttachment.getNicId()).addValue("custom_properties", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(networkAttachment.getProperties())); org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = networkAttachment.getIpConfiguration(); if (ipConfiguration != null) { mapper.addValue("boot_protocol", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(ipConfiguration.getBootProtocol())).addValue("address", ipConfiguration.getAddress()).addValue("netmask", ipConfiguration.getNetmask()).addValue("gateway", ipConfiguration.getGateway()); } return mapper; }<END_MOD>
<START_MOD>@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.vdsbroker.GetCapabilitiesAsyncVDSCommand.getBroker().getCapabilities(new GetCapabilitiesVDSCommandCallback()); }<END_MOD>
public org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder createVmInfoBuilder(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.compat.Guid vdsId, java.util.Map createInfo) { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder(vm, vdsId, createInfo, <START_MOD>vdsNumaNodeDao, vmDeviceDao, vmNumaNodeDao<END_MOD>, vmInfoStatelessBuilder); }
@java.lang.Override public void onSelectionChange(com.google.gwt.view.client.SelectionChangeEvent event) { <START_MOD>this.<END_MOD>sharedMacPoolModelProvider.setSelectedItems(macPoolTable.getSelectedItems()); }
public org.ovirt.engine.core.bll.ValidationResult imagesAreSnapshots() { java.util.List<java.lang.String> activeSnapshots = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : images) { if (diskImage.getActive()) { activeSnapshots.add(java.lang.String.format( (%s) diskImage.getImageId().toString(), diskImage.getDiskAlias())); } } if (!(activeSnapshots.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_SNAPSHOTS_ACTIVE, java.lang.String.format( %s org.apache.commons.lang.StringUtils.join(activeSnapshots,     } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void processUnremovedDisks(java.util.Collection<org.ovirt.engine.core.common.businessentities.DiskImage> diskImages) { java.util.List<java.lang.String> disksLeftInVm = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.DiskImage diskImage : diskImages) { disksLeftInVm.add(diskImage.getDiskAlias()); } addCustomValue("DisksNames", org.apache.commons.lang.StringUtils.join(disksLeftInVm, ",")); }
public static org.ovirt.engine.core.common.businessentities.VmDynamic buildVMDynamicData(<START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>Map<END_MOD> xmlRpcStruct) { org.ovirt.engine.core.common.businessentities.VmDynamic vmdynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(vmdynamic, xmlRpcStruct); return vmdynamic; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.util.<START_MOD>List<END_MOD><org.ovirt.engine.core.common.businessentities.VM> vmList) <START_MOD>{<END_MOD> java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityGroup().getEntityIds(); getVmsSelectionModel().init(vmList, (vmIds != null ? vmIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); stopProgress(); }
public static <E extends java.lang.Enum<E>> E valueOf(java.lang.Class<E> c, java.lang.String name, boolean ignorecase) { if (!ignorecase) { return java.lang.Enum.<E>valueOf(c, name); } E[] universe = c.getEnumConstants(); if (universe == null) { throw new java.lang.IllegalArgumentException((name +   is not an enum type } java.util.Map<java.lang.String, E> map = org.ovirt.engine.core.common.utils.EnumUtils.cacheEnumValuesInCapitalLetters.get(c); if (map == null) { map = new java.util.HashMap<>((2 * (universe.length))); for (E e : universe) { map.put(e.name().toUpperCase(), e); } org.ovirt.engine.core.common.utils.EnumUtils.cacheEnumValuesInCapitalLetters.put(c, map); } E result = map.get(name.toUpperCase()); if (result == null) { throw new java.lang.IllegalArgumentException(((( enum const   + (c.getName())) + ".") + name)); } return result; }
private boolean checkDerivedVmFromTemplateExists(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { java.util.List<java.lang.String> vmNames = getNamesOfDerivedVmsFromTemplate(diskImage); if (!(vmNames.isEmpty())) { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VMT_CANNOT_REMOVE_DETECTED_DERIVED_VM); addCanDoActionMessageVariable("vmsList", org.apache.commons.lang.StringUtils.join(vmNames, ",")); return false; } return true; }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot remove Data Center while there aremore than one Storage Domains attached.") java.lang.String ERROR_CANNOT_REMOVE_STORAGE_POOL_WITH_DOMAINS();<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__STORAGE__DOMAIN); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__DEACTIVATE); }
@org.ovirt.engine.api.restapi.types.Mapping(from = VmRngDevice.Source.class, to = org.ovirt.engine.api.model.RngSources.class) public static <START_MOD>java.util.List<java.lang.String><END_MOD> mapRngSources(java.util.Collection<org.ovirt.engine.core.common.businessentities.VmRngDevice.Source> entity) { <START_MOD>java.util.List<java.lang.String><END_MOD> result = new <START_MOD>java.util.ArrayList<>(1)<END_MOD>; if (entity != null) { for (org.ovirt.engine.core.common.businessentities.VmRngDevice.Source source : entity) { org.ovirt.engine.api.model.RngSource restSource = org.ovirt.engine.api.restapi.types.RngDeviceMapper.map(source, null); result.add(restSource.name()); } } return result; }
public void init() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : vdsDao.getAll()) { if (vds.getStatus().equals(VDSStatus.Up)) { parameters.add(new org.ovirt.engine.core.common.action.VdsActionParameters(vds.getId())); } } backend.runInternalMultipleActions(VdcActionType.RefreshHostDevices, parameters); <START_MOD>cleanupDownVmsFromDeviceTable(); <END_MOD>}
public void remove() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<START_MOD><java.lang.String><END_MOD> model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel<START_MOD><java.lang.String><END_MOD>(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeDataCenterTitle()); model.setHelpTag(HelpTag.remove_data_center); model.setHashName("remove_data_center"); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.StoragePool a : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.StoragePool>cast(getSelectedItems())) { list.add(a.getName()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnRemove", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
<START_MOD>private boolean noChangesDetected() { return (((getNetworks().isEmpty()) && (getRemovedNetworks().isEmpty())) && (org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getBonds().isEmpty())) && (getRemovedBonds().isEmpty()); }<END_MOD>
<START_MOD>private void endDefaultOperations() { endTemplateRelatedOperations(); endUnlockRelatedOperations(); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Virtual Machine(s) java.lang.String importVirtualMachinesTitle();
<START_MOD>public java.lang.String getNumberOfVms() { return java.lang.Integer.toString(numberOfVms); }<END_MOD>
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { log.debug( SsoPostLoginFilter javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); try { java.lang.String engineSessionId = ((java.lang.String) (req.getAttribute(SessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY))); if ((org.apache.commons.lang.StringUtils.isEmpty(engineSessionId)) && ((req.getSession(false)) != null)) { engineSessionId = ((java.lang.String) (req.getSession(false).getAttribute(SessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY))); } if (org.apache.commons.lang.StringUtils.isNotEmpty(engineSessionId)) { javax.naming.InitialContext ctx = new javax.naming.InitialContext(); try { java.lang.String ssoToken = ((java.lang.String) (runQuery(VdcQueryType.GetEngineSessionIdToken, engineSessionId, ctx))); <START_MOD>java.lang.Object loggedInUser = runQuery(VdcQueryType.GetUserBySessionId, engineSessionId, ctx); if (loggedInUser != null) { <END_MOD>log.debug( userInfo to session <START_MOD>req.getSession(true).setAttribute(<END_MOD>org.ovirt.engine.core.<START_MOD>aaa.filters.SsoPostLoginFilter.ATTR_USER_INFO, getUserInfoObject(((org.ovirt.engine.core.<END_MOD>common.businessentities.aaa.DbUser<START_MOD>) (<END_MOD>loggedInUser<START_MOD>)), ssoToken)); } else { log.warn( to find logged user by sessionId } chain.doFilter(request, response); } finally { ctx.close(); } } else { log.warn(( sessionId in either request or session scope.   +   configure SSO properly with SsoPostLoginServlet. } } catch (java.lang.Exception ex) { log.error( to get token for <END_MOD>engine<START_MOD> session {} ex.getMessage()); log.debug("Exception", ex); } log.debug( <END_MOD>SsoPostLoginFilter<START_MOD> }<END_MOD>
@org.junit.Test public void nameInUse() { createSimpleCommand(); createCommandWithDifferentName(); canDoActionFailedWithReason(<START_MOD>EngineMessages<END_MOD>.VDS_GROUP_CANNOT_DO_ACTION_NAME_IN_USE); }
@org.junit.Test public void <START_MOD>shouldCheckIfMixedHostOsIsAllowed<END_MOD>() { <START_MOD>createCommandWithDefaultVdsGroup<END_MOD>(); <START_MOD>oldGroupIsDetachedDefault<END_MOD>(); cpuExists(); architectureIsUpdatable(); <START_MOD>cmd.getVdsGroup<END_MOD>(<START_MOD>).setClusterPolicyId(ClusterPolicy.UPGRADE_POLICY_GUID<END_MOD>); cmd.getVdsGroup().<START_MOD>setCompatibilityVersion<END_MOD>(org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.<START_MOD>VERSION_1_2<END_MOD>); <START_MOD>assertFalse<END_MOD>(cmd.canDoAction()); verify(inClusterUpgradeValidator, times(0)).isUpgradePossible(anyList(), anyList()); verify(inClusterUpgradeValidator, times(<START_MOD>0<END_MOD>)).isUpgradeDone(anyList()); }
@org.junit.Test public void calculateNetworkImplementationDetailsNetworkQosOutOfSync() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice(); org.ovirt.engine.core.common.businessentities.network.NetworkQoS qos = createQos(); qos.setOutboundAverage(30); qos.setOutboundPeak(30); qos.setOutboundBurst(30); calculateNetworkImplementationDetailsAndAssertSync(iface, false, iface.isBridged(), iface.getMtu(), iface.getVlanId(), qos); }
<START_MOD>java.lang.String VdsSpmStatus__Contending();<END_MOD>
@java.lang.Override protected void initializeModelHandlers() { super.initializeModelHandlers(); getModel().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs<END_MOD> args) { java.lang.String propName = args.propertyName; if ((("CpuUsage".equals(propName)) || ("MemoryUsage".equals(propName))) || ("NetworkUsage".equals(propName))) { org.ovirt.engine.ui.userportal.uicommon.model.vm.VmMonitorValueChangeEvent.fire(getEventBus()); } } }); }
<START_MOD>@org.junit.Test public void testGetPluggedForMac() throws java.lang.Exception { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> result = dao.getPluggedForMac(FixturesTool.MAC_ADDRESS); for (org.ovirt.engine.core.common.businessentities.network.VmNic vmNetworkInterface : result) { assertEquals(FixturesTool.MAC_ADDRESS, vmNetworkInterface.getMacAddress()); } }<END_MOD>
public boolean isSmtpEncryptionOptionValid() { return (<START_MOD>(<END_MOD>isSmtpEncryptionNone()) || (isSmtpEncryptionSsl())<START_MOD>) || (isSmtpEncryptionTls())<END_MOD>; }
private void saveDefaultedStorageProperties(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model, org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic) { storageDomainStatic.setWipeAfterDelete(model.getWipeAfterDelete().getEntity()); storageDomainStatic.setDiscardAfterDelete(model.getDiscardAfterDelete().getEntity()); storageDomainStatic.setWarningLowSpaceIndicator(model.getWarningLowSpaceIndicator().getEntity()); storageDomainStatic.setCriticalSpaceActionBlocker(model.getCriticalSpaceActionBlocker().getEntity()); <START_MOD>storageDomainStatic.setBackup(model.isBackup().getEntity()); <END_MOD>}
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Full Screen java.lang.String toggleFullScreen();
public int getHighlyAvailableScore() { return mVdsStatistics.getHighlyAvailableScore(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>models<END_MOD>.<START_MOD>vms.VmDeviceFeEntity<END_MOD> device) { return device.getAddress(); }
<START_MOD>private void setClusterId() { if ((org.ovirt.engine.core.bll.gluster.GlusterVolumeCommandBase.getGlusterVolume()) != null) { setVdsGroupId(org.ovirt.engine.core.bll.gluster.GlusterVolumeCommandBase.getGlusterVolume().getClusterId()); } }<END_MOD>
<START_MOD>public java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VM> loadVMs(java.lang.String fixtureName, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.BusinessEntity<org.ovirt.engine.core.compat.Guid>> cache) throws java.io.IOException, java.lang.IllegalAccessException, java.lang.InstantiationException, java.lang.NoSuchFieldException, java.lang.NoSuchMethodException, java.lang.reflect.InvocationTargetException { return loadEntities(org.ovirt.engine.core.common.businessentities.VM.class, fixtureName, cache); }<END_MOD>
@org.junit.Test public void testGuestFQDN() { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(); vmDynamic.setStatus(VMStatus.Up); vmDynamic.setVmFQDN("localhost.localdomain"); vm.setDynamicData(vmDynamic); org.ovirt.engine.api.model.<START_MOD>Vm<END_MOD> map = org.ovirt.engine.api.restapi.types.VmMapper.map(vm, ((org.ovirt.engine.api.model.<START_MOD>Vm<END_MOD>) (null))); assertNotNull(map.getGuestInfo().getFqdn()); assertEquals(map.getGuestInfo().getFqdn(), "localhost.localdomain"); }
private boolean updateIsoListFromVDSM(org.ovirt.engine.core.compat.Guid repoStoragePoolId, org.ovirt.engine.core.compat.Guid repoStorageDomainId) { boolean refreshIsoSucceeded = false; if (repoStorageDomainId != null) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.GetIsoList, new org.ovirt.engine.core.common.vdscommands.IrsBaseVDSCommandParameters(repoStoragePoolId)); @java.lang.SuppressWarnings("unchecked") java.util.<START_MOD>Map isoDomainList = ((<END_MOD>java.<START_MOD>util.Map) (returnValue.getReturnValue())); if ((returnValue.getSucceeded()) && (isoDomainList != null)) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.debugFormat( refresh process from VDSM, for Iso files succeeded. refreshIsoSucceeded = org.ovirt.engine.core.bll.IsoDomainListSyncronizer.refreshIsoFileListMetaData(repoStorageDomainId, repoStorageDom, isoDomainList, ImageFileType.ISO); } } catch (java.<END_MOD>lang.<START_MOD>Exception e) { refreshIsoSucceeded = false;<END_MOD> org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.<START_MOD>warnFormat<END_MOD>( refresh process from VDSM, for Iso files <START_MOD>failed. org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.error(e); } } return<END_MOD> refreshIsoSucceeded<START_MOD>; }<END_MOD>
@java.lang.Override public void testConnection() { org.apache.commons.httpclient.HttpMethod httpMethod = new org.apache.commons.httpclient.methods.GetMethod(<START_MOD>((<END_MOD>hostProvider.getUrl(<START_MOD>)) + (org.ovirt.engine.core.bll.host.provider.foreman.ForemanHostProviderProxy.API_ENTRY_POINT)<END_MOD>)); runHttpMethod(httpClient, httpMethod); }
<START_MOD>@java.lang.SuppressWarnings("unchecked") public static <E> org.ovirt.engine.api.restapi.resource.validation.Validator<E> getValidator(java.lang.Class<E> entityType) { return ((org.ovirt.engine.api.restapi.resource.validation.Validator<E>) (org.ovirt.engine.api.restapi.resource.validation.ValidatorLocator.validators.get(entityType))); }<END_MOD>
<START_MOD>protected org.ovirt.engine.core.bll.CommandBase<?> getCommand(org.ovirt.engine.core.compat.Guid cmdId) { return org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand(cmdId); }<END_MOD>
private boolean validRemovedNetworkAttachments() { boolean passed = true; for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : params.getRemovedNetworkAttachments()) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachmentToValidate = attachmentsById.get(attachment.getId()); org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator validator = new org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator(attachmentToValidate, host); if (!((((validate(validator.networkAttachmentIsSet())) && (validate(validator.notExternalNetwork()))) && (validate(validator.notManagementNetwork()))) && (notRemovingLabeledNetworks(attachment, getExistingIfaces())))) { passed = false; } } return passed; }
<START_MOD>@java.lang.Override protected void executeCommand() { setVdsId(getParameters().getVdsId()); org.ovirt.engine.core.common.action.VdsActionParameters vdsActionParams = new org.ovirt.engine.core.common.action.VdsActionParameters(getVdsId()); boolean succeeded = runInternalAction(VdcActionType.RefreshHostCapabilities, vdsActionParams).getSucceeded(); if (succeeded) { succeeded = runInternalAction(VdcActionType.RefreshHostDevices, vdsActionParams).getSucceeded(); } setSucceeded(succeeded); }<END_MOD>
@java.lang.Override protected void beforeExecute(java.lang.Thread t, java.lang.Runnable r) { super.beforeExecute(t, r); java.lang.String threadName = t.getName(); if (!(threadName.startsWith("org.ovirt.thread."))) { t.setName(("org.ovirt.thread." + threadName)); } if (org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.log.isDebugEnabled()) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.log.debug(<START_MOD>java.lang.String.format<END_MOD>( to run task <START_MOD>'%s' from {} <END_MOD>r.getClass().getName())<START_MOD>,<END_MOD> new java.lang.Exception()); } if ((getQueue().size()) > 5) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.log.warn( a command<START_MOD> '{}', but note that there are {} tasks in the queue. <END_MOD>r.getClass().getName()<START_MOD>, <END_MOD>getQueue().size())<START_MOD>; } }<END_MOD>
private void processHeartbeat() { if (((!(this.isInInit())) && (this.policy.<START_MOD>isIncomingHeartbeat<END_MOD>())) && (((this.<START_MOD>lastIncomingHeartbeat<END_MOD>) + (this.policy.<START_MOD>getIncomingHeartbeat<END_MOD>())) < (java.lang.System.currentTimeMillis()))) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.debug( exeeded. Closing channel this.disconnect( exeeded } }
protected boolean validateStorageDomains() {<START_MOD> java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList = getVolumesForStorageAllocations();<END_MOD> org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator storageDomainsValidator = getStorageDomainsValidator(org.ovirt.engine.core.bll.RemoveSnapshotCommand.getStoragePoolId(), getStorageDomainsIds()); return ((validate(storageDomainsValidator.allDomainsExistAndActive())) && (validate(storageDomainsValidator.allDomainsWithinThresholds()))) && (validate(storageDomainsValidator.allDomainsHaveSpaceForClonedDisks(<START_MOD>disksList<END_MOD>))); }
<START_MOD>public void setServiceName(java.lang.String serviceName) { this.serviceName = serviceName; }<END_MOD>
@java.lang.Override protected void endWithFailure() { <START_MOD>removeCinderDisk(org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.getParameters().getDestinationImageId(), org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.getParameters().getStorageDomainId()); <END_MOD>org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.getParameters().getDestinationImageId(), ImageStatus.ILLEGAL); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.getParameters().getImageId(), ImageStatus.OK); org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.setSucceeded(true); }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.NetworkValidator validator = new org.ovirt.engine.core.bll.validator.NetworkValidator(vmDao, org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getNetworkDao().get(getNetwork().getId())); <START_MOD>org.ovirt.engine.core.bll.ValidationResult providerValidationResult = validateRemoveExternalNetwork(); <END_MOD>return ((((<START_MOD>(<END_MOD>validate(validator.networkIsSet(org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters().getId()))) && (validate(validator.notRemovingManagementNetwork()))) && (validate(validator.notIscsiBondNetwork()))) && (validate(validator.networkNotUsedByVms()))) && (validate(validator.networkNotUsedByTemplates()))<START_MOD>) && (validate(providerValidationResult))<END_MOD>; }
<START_MOD>private void updateExistingAndNewVolumes(org.ovirt.engine.core.compat.Guid clusterId, java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumesMap) { for (java.util.Map.Entry<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> entry : volumesMap.entrySet()) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = entry.getValue(); org.ovirt.engine.core.bll.gluster.GlusterManager.log.debugFormat("Analyzing volume {0}", volume.getName()); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity existingVolume = org.ovirt.engine.core.bll.gluster.GlusterManager.volumeDao.getByName(clusterId, volume.getName()); if (existingVolume == null) { org.ovirt.engine.core.bll.gluster.GlusterManager.log.infoFormat("Volume {0} Not present in engine. Creating the same.", volume.getName()); createVolume(volume); } else { org.ovirt.engine.core.bll.gluster.GlusterManager.log.debugFormat("Volume {0} exists in engine. Checking if it needs to be updated.", existingVolume.getName()); updateVolume(existingVolume, volume); } } }<END_MOD>
protected boolean setAndValidateCpuProfile() { return validate(org.ovirt.engine.core.bll.profiles.CpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.VmManagementCommandBase.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>())); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.AuditLog auditLog = getAuditLog(); auditLogDao.remove(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); setAuditLogDetails(auditLog); auditLog.setUserId(Guid.Empty); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logableToClear = <START_MOD>org.ovirt.engine.core.di.Injector.injectMembers(<END_MOD>new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(auditLog<START_MOD>)<END_MOD>); org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator eventFloodRegulator = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator(logableToClear, auditLog.getLogType()); eventFloodRegulator.evict(); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.setSucceeded(true); }
<START_MOD>@java.lang.Override public boolean bootProtocolDhcp() { return "dhcp".equalsIgnoreCase(((java.lang.String) (nicProperties.get(VdsProperties.BOOT_PROTOCOL)))); }<END_MOD>
private java.lang.Integer calcMaxVCpu() { java.lang.Integer maxSockets = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmSockets, vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>().getValue()); java.lang.Integer maxVCpus = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmCpus, vm.<START_MOD>getEffectiveCompatibilityVersion<END_MOD>().getValue()); maxVCpus = (vm.getCpuPerSocket()) * (java.lang.Math.min(maxSockets, (maxVCpus / (vm.getCpuPerSocket())))); return maxVCpus; }
protected static org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, boolean shouldPrepareAndTeardown) { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); <START_MOD>org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; <END_MOD>if (shouldPrepareAndTeardown) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } <START_MOD>try { qemuImageInfo = ((<END_MOD>org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo<START_MOD>) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.debug( to get qemu image info from storage e); } finally { if (shouldPrepareAndTeardown) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } } return<END_MOD> qemuImageInfo<START_MOD>; }<END_MOD>
private void <START_MOD>setTestResultValueFromQueryReturnValue<END_MOD>(org.ovirt.engine.core.common.queries.VdcQueryReturnValue result) { java.lang.String errorMessage = org.ovirt.engine.ui.uicommonweb.models.providers.ProviderModel.EMPTY_ERROR_MESSAGE; if (result == null) { errorMessage = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().testFailedUnknownErrorMsg(); } else if (!(result.getSucceeded())) { if (((result.getExceptionString()) != null) && (!(result.getExceptionString().isEmpty()))) { errorMessage = result.getExceptionString(); } else { errorMessage = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().testFailedUnknownErrorMsg(); } } getTestResult().setEntity(errorMessage); }
<START_MOD>private void massLabelsUpdate(org.ovirt.engine.core.compat.Guid vfsConfigId, java.util.Set<java.lang.String> labels) { java.util.List<org.springframework.jdbc.core.namedparam.MapSqlParameterSource> executions = new java.util.ArrayList<>(labels.size()); for (java.lang.String label : labels) { executions.add(createLabelParametersMapper(vfsConfigId, label)); } getCallsHandler().executeStoredProcAsBatch("InsertvfsConfigLabel", executions); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Engine HA java.lang.String hostedEngineHaHostGeneral();
<START_MOD>@org.ovirt.engine.ui.common.DefaultStringValue("Use DHCP") java.lang.String cloudInitNetworkDhcpLabel();<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (target)); org.ovirt.engine.core.common.businessentities.VmTemplate <START_MOD>selectedTemplate = null; java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> templatesChain = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate>(((java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate>) (returnValue))); for (org.ovirt.engine.core.common.businessentities.VmTemplate <END_MOD>template <START_MOD>: templatesChain) {<END_MOD> if (<START_MOD>template.getId().equals(templateId)) { selectedTemplate = template; } } org.ovirt.engine.core.common.businessentities.VmTemplate latestTemplate = new org.ovirt.engine.ui.uicommonweb.models.templates.LatestVmTemplate(templatesChain.get(0)); templatesChain.add(0, latestTemplate); if (<END_MOD>useLatest) { <START_MOD>selectedTemplate = latestTemplate<END_MOD>; } model.getTemplate().setItems(<START_MOD>templatesChain, selectedTemplate<END_MOD>); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getStoragePool().setStatus(org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getParameters().getStatus()); setVdsIdRef(org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getStoragePool().getspm_vds_id()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolDao().updateStatus(org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getStoragePool().getStatus()); if (((org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getParameters().getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NonResponsive)) || ((org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getParameters().getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational))) { <START_MOD>org.ovirt.engine.core.vdsbroker.storage.StoragePoolDomainHelper.updateApplicablePoolDomainsStatuses(org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getStoragePool().getId(), <END_MOD>java.util.<START_MOD>Collections.singleton(StorageDomainStatus.Active), StorageDomainStatus.Unknown); } org.ovirt.engine.core.bll.storage.StoragePoolStatusHandler.poolStatusChanged<END_MOD>(org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getStoragePool().getId()<START_MOD>, org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getStoragePool()<END_MOD>.getStatus())<START_MOD>; org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.setSucceeded(true<END_MOD>); }
@java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call() { setStorageDomain(null); setStoragePool(null); boolean succeded = false; if (canDoAction()) { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainPoolMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(getRecoveryStoragePoolParametersData().getNewMasterDomainId(), getRecoveryStoragePoolParametersData().getStoragePoolId(), org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().save(domainPoolMap); getRecoveryStoragePoolParametersData().setVdsId(getVds().getId()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.ReconstructMasterDomain, getParameters()); succeded = ((returnVal.getActionReturnValue()) != null) ? ((java.lang.Boolean) (returnVal.getActionReturnValue())) : false; getStoragePoolDAO().updateStatus(getStoragePool().getId(), StoragePoolStatus.Problematic); <START_MOD>if (!succeded) { getStoragePoolIsoMapDAO().remove(new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMapId(getRecoveryStoragePoolParametersData().getNewMasterDomainId(), getRecoveryStoragePoolParametersData().getStoragePoolId())); <END_MOD>} <START_MOD>} <END_MOD>return new org.ovirt.engine.core.common.eventqueue.EventResult(succeded, org.ovirt.engine.core.common.eventqueue.EventType.RECONSTRUCT); }
<START_MOD>protected void onTooltipSourceMouseOut(com.google.gwt.event.dom.client.MouseOutEvent event) { }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__CREATE); addCustomValue(GlusterConstants.VOLUME_SNAPSHOT_NAME, getParameters().getSnapshot().getSnapshotName()); super.setActionMessageParameters(); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Messages<END_MOD>.DefaultMessage( in Data Center {1} java.lang.String networkDc(java.lang.String networkName, java.lang.String dcName);
protected void mockOsRepository() { injectorRule.bind(org.ovirt.engine.core.bll.CpuFlagsManagerHandler.class, cpuFlagsManagerHandler); org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); <START_MOD>vmDeviceUtils.init(); <END_MOD>org.ovirt.engine.core.bll.VmHandler.init(); when(osRepository.isWindows(0)).thenReturn(true); when(osRepository.getMinimumRam(vm.getVmOsId(), org.ovirt.engine.core.compat.Version.getLast())).thenReturn(0); when(osRepository.getMaximumRam(vm.getVmOsId(), org.ovirt.engine.core.compat.Version.getLast())).thenReturn(100); when(osRepository.getArchitectureFromOS(14)).thenReturn(ArchitectureType.x86_64); }
@java.lang.SuppressWarnings("resource") private void checkConnection() throws java.sql.SQLException { java.sql.Statement statement = null; java.sql.ResultSet rs = null; try {<START_MOD> if ((connection) == null) { openConnection(); }<END_MOD> statement = connection.createStatement(); rs = statement.executeQuery( null rs.next(); } finally { if (statement != null) { statement.close(); } if (rs != null) { rs.close(); } } }
@java.lang.Override public void setItems(java.lang.Iterable value) { if ((items) != value) { ItemsChanging(value, items); <START_MOD>org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel tempModel = null; if ((items) != null) { tempModel = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (((java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel>) (items)).get(0))); } <END_MOD>items = value; ItemsChanged(); getItemsChangedEvent().raise(this, EventArgs.Empty); OnPropertyChanged(new org.ovirt.engine.core.compat.PropertyChangedEventArgs("Items")); <START_MOD>tempModel = null; <END_MOD>} }
<START_MOD>private static void exportResource(java.lang.String apiVersion, java.lang.String resourceName, java.io.File outputDirectory) throws java.io.IOException { java.lang.String resourcePath = java.lang.String.format("/v%s/%s", apiVersion, resourceName); java.io.InputStream inputResource = org.ovirt.engine.api.rsdl.RsdlIOManager.class.getResourceAsStream(resourcePath); java.io.File outputFile = new java.io.File(outputDirectory, resourceName); java.lang.System.out.printf("Copying resource \"%s\" to file \"%s\"", resourcePath, outputFile.getAbsolutePath()); org.apache.commons.io.FileUtils.copyInputStreamToFile(inputResource, outputFile); }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Custom serial number must be non-empty when \"Custom\" serial number policy is specified.") java.lang.String ACTION_TYPE_FAILED_INVALID_SERIAL_NUMBER();<END_MOD>
@java.lang.Override public java.lang.String getText(java.lang.Object image) { if (image instanceof org.ovirt.engine.core.common.businessentities.RepoImage) { return ((org.ovirt.engine.core.common.businessentities.RepoImage) (image)).getFileType().toString(); } <START_MOD>else if (image instanceof org.ovirt.engine.core.common.businessentities.DiskImage) { return "Disk"; } <END_MOD>return "(Unknown)"; }
<START_MOD>private java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus> mergeServiceStatusMaps(java.util.List<java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus>> serviceStatusMaps) { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus> serviceStatusMap = new java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus>(); for (java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus> pairResult : serviceStatusMaps) { for (java.util.Map.Entry<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus> entry : pairResult.entrySet()) { java.lang.String serviceName = entry.getKey(); org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus status = entry.getValue(); org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus alreadyFoundStatus = serviceStatusMap.get(serviceName); if (alreadyFoundStatus == null) { serviceStatusMap.put(serviceName, status); } else if ((alreadyFoundStatus != status) && (alreadyFoundStatus != (org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus.MIXED))) { serviceStatusMap.put(serviceName, GlusterServiceStatus.MIXED); } } } return serviceStatusMap; }<END_MOD>
<START_MOD>protected void loadVmData(org.ovirt.engine.core.common.businessentities.VM vm) { if (vm.getInterfaces().isEmpty()) { vm.setInterfaces(getVmNetworkInterfaceDao().getAllForVm(vm.getId())); } if (org.apache.commons.lang.StringUtils.isEmpty(vm.getVmtName())) { if (!(Guid.Empty.equals(vm.getVmtGuid()))) { org.ovirt.engine.core.common.businessentities.VmTemplate t = getVmTemplateDao().get(vm.getVmtGuid()); vm.setVmtName(t.getName()); } else { vm.setVmtName(VmTemplateHandler.BLANK_VM_TEMPLATE_NAME); } } }<END_MOD>
private long findUnusedMac() { int index = usedMacs.nextClearBit(<START_MOD>startingLocationWhenSearchingForUnusedMac); boolean notFound = index == (numberOfMacsInRange); if (notFound) { index = usedMacs.nextClearBit(<END_MOD>0)<START_MOD>; } startingLocationWhenSearchingForUnusedMac = index + 1<END_MOD>; return (rangeStart) + index; }
protected java.lang.String scheduleJob()<START_MOD> throws java.lang.Exception<END_MOD> { if ((schedule.getExecutionTime()) != null) { java.sql.Time convertedTime = org.ovirt.engine.core.bll.utils.GlusterUtil.getInstance().convertTime(schedule.getExecutionTime(), schedule.getTimeZone()); schedule.setExecutionTime(convertedTime); } java.util.Date convertedStartDate = getGlusterUtil().convertDate(schedule.getStartDate(), schedule.getTimeZone()); java.util.Date convertedEndByDate = getGlusterUtil().convertDate(schedule.getEndByDate(), schedule.getTimeZone()); java.lang.String cronExpression = org.ovirt.engine.core.bll.utils.GlusterUtil.getInstance().getCronExpression(schedule); if (cronExpression == null) return null; return getDbSchedulUtil().scheduleACronJob(new org.ovirt.engine.core.bll.gluster.GlusterSnapshotScheduleJob(), "onTimer", new java.lang.Class[]{ java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class }, new java.lang.Object[]{ upServer.getId().toString(), org.ovirt.engine.core.bll.gluster.ScheduleGlusterVolumeSnapshotCommandBase.getGlusterVolumeId().toString(), schedule.getSnapshotNamePrefix(), schedule.getSnapshotDescription(), force }, cronExpression, convertedStartDate, convertedEndByDate); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel object) { storageDomainItems.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); storageDomainItems.asEditor().edit(object); driver.edit(object); object.getLatch().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<START_MOD><org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.<START_MOD>PropertyChangedEventArgs args) { if ("IsAvailable".equals(args.propertyName)) { org.ovirt.engine.ui.uicommonweb.models.EntityModel entity = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)); if (entity.getIsAvailable()) { latch.setVisible(true); } } } }); object.getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.<END_MOD>EventArgs<START_MOD>><END_MOD>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { messageLabel.setHTML(applicationConstants.dataCenterRecoveryStoragePopupMessageLabel()); selectNewDSDLabel.setText(applicationConstants.dataCenterRecoveryStoragePopupSelectNewDSDLabel()); } }); }
@org.junit.Test public void testBadGuid() throws java.lang.Exception { control.replay(); try { new org.ovirt.engine.api.restapi.resource.BackendTemplateResource("foo"<START_MOD>, new org.ovirt.engine.api.restapi.resource.BackendTemplatesResource()<END_MOD>); org.ovirt.engine.api.restapi.resource.BackendTemplateBasedResourceTest.fail( WebApplicationException } catch (javax.ws.rs.WebApplicationException wae) { verifyNotFoundException(wae); } }
<START_MOD>@org.junit.Test public void testLimit() throws java.io.IOException { int limit = 1000; java.io.ByteArrayOutputStream os = new org.ovirt.engine.core.utils.ssh.OvirtSSH.ConstraintByteArrayOutputStream(limit); byte[] buffer = new byte[100]; for (int i = 0; i < ((limit * 5) / (buffer.length)); i++) { os.write(buffer); } assertTrue(((os.size()) >= limit)); assertTrue(((os.size()) < ((limit * 3) / 2))); }<END_MOD>
@java.lang.Override public void executeCommand() { if ((georepSessions) != null) { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session : georepSessions) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity slaveVolume = getDbFacade().getGlusterVolumeDao().getById(session.getSlaveVolumeId()); if (slaveVolume == null) { continue; } org.ovirt.engine.core.common.businessentities.VDS slaveUpServer = org.ovirt.engine.core.bll.utils.ClusterUtils.getInstance().getRandomUpServer(slaveVolume.getClusterId()); if (slaveUpServer == null) { handleVdsError(AuditLogType.GLUSTER_VOLUME_ALL_SNAPSHOTS_DELETE_FAILED, <START_MOD>EngineErrors<END_MOD>.NoUpServerFoundInRemoteCluster.name()); setSucceeded(false); return; } java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity> slaveVolumeSnapshots = getGlusterVolumeSnapshotDao().getAllByVolumeId(slaveVolume.getId()); try (org.ovirt.engine.core.utils.lock.EngineLock lock = acquireEngineLock(session.getSlaveVolumeId(), LockingGroup.GLUSTER_SNAPSHOT)) { if (!(deleteAllGlusterVolumeSnapshots(slaveUpServer.getId(), slaveVolume.getName(), slaveVolumeSnapshots))) { return; } getGlusterUtil().checkAndRemoveVolumeSnapshotLimitsAlert(slaveVolume); } } } deleteAllGlusterVolumeSnapshots(getUpServer().getId(), getGlusterVolumeName(), snapshots); getGlusterUtil().checkAndRemoveVolumeSnapshotLimitsAlert(getGlusterVolume()); }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAllRunningVdssInPool() { java.util.Set<org.ovirt.engine.core.common.businessentities.VDSStatus> vdsStatus = java.util.EnumSet.copyOf(StoragePoolDomainHelper.vdsDomainsActiveMonitoringStatus); vdsStatus.addAll(StoragePoolDomainHelper.vdsDomainsMaintenanceMonitoringStatus); return org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>DeactivateStorageDomainCommand.getVdsDao().getAllForStoragePoolAndStatuses(org.ovirt.engine.core.bll.storage.<START_MOD>domains.<END_MOD>DeactivateStorageDomainCommand.getStoragePool().getId(), vdsStatus); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( in fetching volume option list, please try again. java.lang.String errorInFetchingVolumeOptionList();
<START_MOD>@org.junit.Test public void testFindMappingEntryEmptyExternal() { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingEntry(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFinderTest.NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFinderTest.VNIC_PROFILE1_NAME, java.util.Arrays.asList(emptySourceMapping)); assertFalse(actual.isPresent()); }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (org.ovirt.engine.ui.webadmin.section.main.presenter.popup.provider.ProviderPopupPresenterWidget.IS_AVAILABLE.equals(args.propertyName)) { getView().updateKvmVisible(model.getKvmPropertiesModel().getIsAvailable()); } }<END_MOD>
<START_MOD>protected<END_MOD> void logException(java.lang.RuntimeException ex) { if (((ex.getMessage()) == null) || (!(ex.getMessage().contains( reset { log.error( '{}' execution failed: {} this, ex.getMessage()); log.debug("Exception", ex); } }
private void initTables() { disksTable = new org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable<org.ovirt.engine.core.common.businessentities.DiskImage, org.ovirt.engine.ui.uicommonweb.models.ListModel>(true, true); disksTable.enableColumnResizing(); disksTable.addColumn(new org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractTextColumn<END_MOD><org.ovirt.engine.core.common.businessentities.DiskImage>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.DiskImage diskImage) { return diskImage.getDiskAlias(); } <START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.DiskImage object) { return null; } <END_MOD>}, constants.aliasDisk(), "150px"); disksTable.addColumn(new org.ovirt.engine.ui.common.widget.table.column.<START_MOD>AbstractTextColumn<END_MOD><org.ovirt.engine.core.common.businessentities.DiskImage>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.DiskImage diskImage) { return diskImage.getDiskDescription(); } <START_MOD>@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getTooltip(org.ovirt.engine.core.common.businessentities.DiskImage object) { return null; } <END_MOD>}, constants.descriptionDisk(), "150px"); }
@java.lang.Override public void onSuccess(java.lang.Object model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> policyUnits = returnValue.getReturnValue(); policyUnitMap = new java.util.LinkedHashMap(); for (org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit : policyUnits) { policyUnitMap.put(policyUnit.getId(), policyUnit); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetClusterPolicies, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.frontend.AsyncQuery(<START_MOD>new org.ovirt.engine.ui.frontend.INewAsyncCallback<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>() { @java.lang.Override public void onSuccess(java.lang.Object <END_MOD>model, <START_MOD>org.ovirt.engine.core.common.queries.VdcQueryReturnValue<END_MOD> returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.ClusterPolicy> list = returnValue.getReturnValue(); getClusterPolicy().setItems(list); org.ovirt.engine.core.common.scheduling.ClusterPolicy defaultClusterPolicy = null; org.ovirt.engine.core.common.scheduling.ClusterPolicy selectedClusterPolicy = null; for (org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy : list) { if (((getIsEdit()) && ((getEntity()) != null)) && (clusterPolicy.getId().equals(getEntity().getClusterPolicyId()))) { selectedClusterPolicy = clusterPolicy; } if (clusterPolicy.isDefaultPolicy()) { defaultClusterPolicy = clusterPolicy; } } if (selectedClusterPolicy != null) { getClusterPolicy().setSelectedItem(selectedClusterPolicy); } else { getClusterPolicy().setSelectedItem(defaultClusterPolicy); } clusterPolicyChanged(); } })); }
static boolean validatePinningAndMigration(java.util.List<java.lang.String> reasons, org.ovirt.engine.core.common.businessentities.VmStatic vmStaticData, java.lang.String cpuPinning) { final boolean cpuPinMigrationEnabled = java.lang.Boolean.TRUE.equals(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.CpuPinMigrationEnabled)); if (((!cpuPinMigrationEnabled) && (((vmStaticData.getMigrationSupport()) == (org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE)) || ((vmStaticData.getMigrationSupport()) == (org.ovirt.engine.core.common.businessentities.MigrationSupport.IMPLICITLY_NON_MIGRATABLE)))) && (org.apache.commons.lang.StringUtils.isNotEmpty(cpuPinning))) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_VM_CANNOT_BE_PINNED_TO_CPU_AND_MIGRATABLE.toString()); return false; } if ((vmStaticData.isAutoStartup()) && ((<START_MOD>(<END_MOD>vmStaticData.getMigrationSupport()) != (org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE))<START_MOD> && ((vmStaticData.getDedicatedVmForVdsList().size()) >= 2))<END_MOD>) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_VM_CANNOT_BE_HIGHLY_AVAILABLE_AND_PINNED_TO_HOST.toString()); return false; } return true; }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Selected operating system does not support VirtIO-SCSI. Please disable VirtIO-SCSI for the VM.") java.lang.String ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_IS_DOES_NOT_SUPPORT_VIRTIO_SCSI();<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAll() { org.apache.commons.httpclient.HttpMethod method = new org.apache.commons.httpclient.methods.GetMethod(((hostProvider.getUrl()) + "/hosts?format=json")); return runHostListMethod(method); }<END_MOD>
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__ADD); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__CLUSTER_POLICY); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__ACTION__REVERT_TO); addCanDoActionMessage(<START_MOD>EngineMessages<END_MOD>.VAR__TYPE__SNAPSHOT); }
protected void verifyQuery(org.ovirt.engine.api.restapi.resource.AbstractStatisticalQuery<org.ovirt.engine.api.model.NIC, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> query, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity) throws java.lang.Exception { assertEquals(org.ovirt.engine.api.model.NIC.class, query.getParentType()); assertSame(entity, query.resolve(org.ovirt.engine.api.restapi.resource.BackendVmNicResourceTest.NIC_ID)); java.util.List<org.ovirt.engine.api.model.Statistic> statistics = query.getStatistics(entity); verifyStatistics(statistics, new java.lang.String[]{ "data.current.rx", "data.current.tx", "errors.total.rx", "errors.total.tx" }, new java.math.BigDecimal[]{ asDec(<START_MOD>org.ovirt.engine.api.restapi.util.RxTxCalculator.calcRxTx(50, 10.0)<END_MOD>), asDec(<START_MOD>org.ovirt.engine.api.restapi.util.RxTxCalculator.calcRxTx(50, 20.0)<END_MOD>), asDec(30), asDec(40) }); org.ovirt.engine.api.model.Statistic adopted = query.adopt(new org.ovirt.engine.api.model.Statistic()); assertTrue(adopted.isSetNic()); assertEquals(org.ovirt.engine.api.restapi.resource.BackendVmNicResourceTest.NIC_ID.toString(), adopted.getNic().getId()); assertTrue(adopted.getNic().isSetVm()); assertEquals(org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.PARENT_ID.toString(), adopted.getNic().getVm().getId()); }
@java.lang.Override protected void <START_MOD>beforeExecution<END_MOD>() { org.<START_MOD>apache.commons.httpclient.methods.InputStreamRequestEntity inputStreamRequestEntity; if ((org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getSize()) != null) { inputStreamRequestEntity <END_MOD>=<START_MOD> new org.apache.commons.httpclient.methods.InputStreamRequestEntity(org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getInputStream(), org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getSize()); } else <END_MOD>{<START_MOD> inputStreamRequestEntity = new org.apache.commons.httpclient.methods.InputStreamRequestEntity(org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getInputStream()); <END_MOD>} <START_MOD>org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getMethod().setRequestEntity(<END_MOD>inputStreamRequestEntity<START_MOD>); org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getMethod()<END_MOD>.setRequestHeader("Content-Type", "application/octet-stream"); if ((org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().<START_MOD>getSize<END_MOD>()) != null) { <START_MOD>org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getMethod()<END_MOD>.setRequestHeader("Content-Length", org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().<START_MOD>getSize<END_MOD>().toString()); } }
private com.google.gwt.user.client.ui.PushButton createButton(final org.ovirt.engine.core.common.utils.Pair<T, V> item) { final T value = item.getFirst(); final V widget = item.getSecond(); boolean ghostItem = isGhost(value); final com.google.gwt.user.client.ui.PushButton button = new com.google.gwt.user.client.ui.PushButton(new com.google.gwt.user.client.ui.Image((ghostItem ? resources.increaseIcon() : resources.decreaseIcon()))); button.addStyleName(style.buttonStyle()); button.setEnabled((!ghostItem)); button.addClickHandler((ghostItem ? new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { <START_MOD>getEntry(<END_MOD>widget).swapButton(createButton(item)); addGhostEntry(); onAdd(value, widget); } } : new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { removeEntry(item); onRemove(value, widget); } })); return button; }
<START_MOD>public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.Network> getDatacentrePhysicalNetwork() { return datacentrePhysicalNetwork; }<END_MOD>
<START_MOD>@java.lang.Override protected void buildVmVirtioSerial() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.VIRTIOSERIAL.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(VdsProperties.Type, VmDeviceGeneralType.CONTROLLER.getValue()); struct.put(VdsProperties.Device, VdsProperties.VirtioSerial); struct.put(VdsProperties.Index, java.lang.Integer.toString(0)); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); addDevice(struct, vmDevice, null); } }<END_MOD>
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel object) { driver.edit(object); updateMessages(object<START_MOD>); enableSelectionElements(object.getEnableSelectionElements()<END_MOD>); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { updateMessages(object); <START_MOD>enableSelectionElements(object.getEnableSelectionElements()); <END_MOD>} }); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("Can not ${action} ${type}. The maximum number of Hosts allowed in Data Center has been exceeded.") java.lang.String ACTION_TYPE_FAILED_EXCEEDED_MAXIMUM_NUMBER_OF_HOSTS_IN_DATA_CENTER();<END_MOD>
@org.junit.Test public void testVmIllegal() { setUpGeneralValidations(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_IMAGE_IS_ILLEGAL)).when(vmValidator).vmNotIlegal(); doReturn(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList()).when(cmd).getDisksList(); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_VM_IMAGE_IS_ILLEGAL.name())); }
<START_MOD>@org.ovirt.engine.ui.frontend.DefaultStringValue("$type Cpu Profile") java.lang.String VAR__TYPE__CPU__PROFILE();<END_MOD>
@java.lang.Override protected void executeVmCommand() { org.ovirt.engine.core.bll.VmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.ArrayList<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (<START_MOD>!(<END_MOD>canAddVm(errorMessages, destStorages.values()))<START_MOD>)<END_MOD> { log.error( to add <START_MOD>VM<END_MOD>. The reasons are: {} org.apache.commons.lang.StringUtils.join(errorMessages, ',')); <START_MOD>return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } }<END_MOD>
<START_MOD>@org.ovirt.engine.ui.common.DefaultStringValue("Reboot in proigress") java.lang.String rebootInProgress();<END_MOD>
@org.junit.Test public void insufficientDiskSpaceWithSnapshots() { org.ovirt.engine.core.common.action.ImportVmParameters parameters = createParameters(); org.ovirt.engine.core.bll.validator.ImportValidator validator = setupDiskSpaceTest(parameters); parameters.setCopyCollapse(false); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(multipleSdValidator).allDomainsHaveSpaceForDisksWithSnapshots(anyList()); assertEquals(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN, validator.validateSpaceRequirements(java.util.Collections.<org.ovirt.engine.core.common.businessentities.storage.DiskImage>emptyList()).getMessage()); verify(multipleSdValidator, never()).allDomainsHaveSpaceForClonedDisks(anyList()); verify(multipleSdValidator).allDomainsHaveSpaceForDisksWithSnapshots(anyList()); verify(multipleSdValidator, never()).allDomainsHaveSpaceForNewDisks(anyList()); }
<START_MOD>@org.junit.Test public void testGetByOriginAndCustomEventId() { org.ovirt.engine.core.common.businessentities.AuditLog result = dao.getByOriginAndCustomEventId("EMS", 1); assertNotNull(result); assertEquals(externalAuditLog, result); }<END_MOD>
<START_MOD>private void handleTitlePanel(java.lang.String eventType, com.google.gwt.dom.client.Element parent) { if ((title) == "") { return; } titlePanel.setWidget(new com.google.gwt.user.client.ui.Label(title)); if (BrowserEvents.MOUSEOVER.equals(eventType)) { titlePanel.showRelativeTo(parent); } else if (BrowserEvents.MOUSEOUT.equals(eventType)) { titlePanel.hide(); } }<END_MOD>
private void calculateNetworkImplementationDetailsAndAssertSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, boolean expectSync, java.lang.String networkName, boolean vmNet, int mtu, int vlanId, org.ovirt.engine.core.common.businessentities.<START_MOD>qos<END_MOD>.NetworkQoS qos) { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork(networkName, vmNet, mtu, vlanId); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = org.ovirt.engine.core.utils.NetworkUtils.calculateNetworkImplementationDetails(network, qos, iface); assertNotNull( implementation details should be filled. networkImplementationDetails); assertEquals((( implementation details should be   + (expectSync ? "in" :   of +   sync. expectSync, networkImplementationDetails.isInSync()); }
public java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> executeAsyncCommand(final org.ovirt.engine.core.common.action.VdcActionType actionType, final org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, final org.ovirt.engine.core.bll.context.CommandContext cmdContext) { final org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameters, cmdContext); <START_MOD>coco.persistCommandContext(command.getCommandId(), cmdContext); <END_MOD>return org.ovirt.engine.core.bll.tasks.CommandExecutor.executor.submit(new java.util.concurrent.Callable<org.ovirt.engine.core.common.action.VdcReturnValueBase>() { @java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase call() throws java.lang.Exception { return executeCommand(command); } }); }
<START_MOD>@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Event event) { validateParameters(event, "origin", "severity", "eventFloodInSec", "description"); org.ovirt.engine.core.common.businessentities.AuditLog entity = map(event); return performCreation(VdcActionType.AddExternalEvent, new org.ovirt.engine.core.common.action.AddExternalEventParameters(entity), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<java.lang.Long>(org.ovirt.engine.core.common.queries.VdcQueryType.GetAuditLogById, org.ovirt.engine.core.common.queries.GetAuditLogByIdParameters.class)); }<END_MOD>
void onIsValidPropertyChange(org.ovirt.engine.ui.common.widget.HasValidation editor, org.ovirt.engine.ui.uicommonweb.models.EntityModel model) { if (model.getIsValid()) { editor.markAsValid(); } else { <START_MOD>if (editor.isValid()) { <END_MOD>editor.markAsInvalid(model.getInvalidityReasons()); } }<START_MOD> }<END_MOD>
<START_MOD>public java.lang.String getISOsPath() { return this.ISOsPath; }<END_MOD>
@java.lang.Override <START_MOD>public<END_MOD> <START_MOD>com.google.gwt.safehtml.shared.SafeHtml<END_MOD> <START_MOD>getTooltip<END_MOD>(org.ovirt.engine.ui.uicommonweb.models.EntityModel model) { <START_MOD>java.util.Map<com.google.gwt.safehtml.shared.SafeHtml,<END_MOD> <START_MOD>java.lang.String> imagesToText = new java.util.LinkedHashMap<com.google.gwt.safehtml.shared.SafeHtml, java.lang.String>(); if (((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkModel) (model)).isVmNetwork()) { imagesToText.put(vmImage, constants.vmItemInfo())<END_MOD>; }<START_MOD> return org.ovirt.engine.ui.webadmin.widget.table.column.NetworkRoleColumnHelper.getTooltip(imagesToText); }<END_MOD>
public java.lang.String getCpuNameByCpuId(java.lang.String name, org.ovirt.engine.core.compat.Version ver) { final org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager cpuFlagsManager = org.ovirt.engine.core.bll.CpuFlagsManagerHandler.managersDictionary.get(ver); <START_MOD>java.lang.String<END_MOD> <START_MOD>cpuName = (<END_MOD>cpuFlagsManager != null<START_MOD>)<END_MOD> ? cpuFlagsManager.getCpuNameByCpuId(name) : null; <START_MOD>if (org.apache.commons.lang.StringUtils.isNotEmpty(cpuName)) { return cpuName; <END_MOD>}<START_MOD> return cpuFlagsManager != null ? cpuFlagsManager.getCpuNameByCpuId((name + ",+spec-ctrl")) : null; }<END_MOD>
@org.junit.Test public void testQueryExecution() { org.ovirt.engine.core.compat.Guid adElementGuid = org.ovirt.engine.core.compat.Guid.newGuid(); when(getQueryParameters().getId()).thenReturn(adElementGuid); org.ovirt.engine.core.common.businessentities.Permissions expected = new org.ovirt.engine.core.common.businessentities.Permissions(); expected.setad_element_id(adElementGuid); org.ovirt.engine.core.dao.PermissionDAO permissionDAOMock = mock(org.ovirt.engine.core.dao.PermissionDAO.class); when(permissionDAOMock.getAllForAdElement(adElementGuid, getUser().getId<START_MOD>(), getQuery().getEngineSessionId<END_MOD>(), getQueryParameters().isFiltered())).thenReturn(java.util.Collections.singletonList(expected)); when(getDbFacadeMockInstance().getPermissionDao()).thenReturn(permissionDAOMock); getQuery().executeQueryCommand(); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> actual = ((java.util.List<org.ovirt.engine.core.common.businessentities.Permissions>) (getQuery().getQueryReturnValue().getReturnValue())); assertEquals( number of returned permissions 1, actual.size()); assertEquals( returned permissions expected, actual.get(0)); }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( done to the Networking configuration are temporary until explicitly saved. you sure you want to make the changes persistent? java.lang.String areYouSureYouWantToMakeTheChangesPersistentMsg();
<START_MOD>public java.lang.Object call() throws java.lang.Exception { _parser.cliEnvironmentSet(NetEnv.SSH_KEY, org.ovirt.engine.core.bll.VdsBootstrap._getEngineSSHPublicKey().replace("\n", "")); return null; }<END_MOD>
public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage> getClusterCpuAndMemoryAverage() throws <START_MOD>org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException<END_MOD> {<START_MOD> final<END_MOD> java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage> result = new java.util.ArrayList<>(); <START_MOD>runQuery(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.CLUSTER_LAST_24_AVERAGE, new org.ovirt.engine.ui.frontend.server.dashboard.dao.QueryResultCallback() { @java.lang.Override public void onResult<END_MOD>(java.sql.<START_MOD>ResultSet rs) throws java.sql.SQLException { while (rs.next()) { result.add(new org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage(rs.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.NAME), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.CPU_AVERAGE), rs.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.MEM_AVERAGE))<END_MOD>);<START_MOD> } } }<END_MOD>); return result; }
<START_MOD>@org.junit.Test public void testMovingToMaintenanceDomainInList() { testBusyDomainInList(StorageDomainStatus.MovingToMaintenance); }<END_MOD>
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Pre-Configured Domain java.lang.String importPreConfiguredDomainTitle();
<START_MOD>@org.junit.Before public void setUp() { disksList = new java.util.LinkedList(); initStorageDomains(); initStorageDomainValidators(); initMemoryStorageHandler(); }<END_MOD>
protected org.ovirt.engine.core.bll.ValidationResult validateModelCompatibleWithOs() { org.ovirt.engine.core.bll.validator.VmWatchdogValidator validator = getVmWatchdogValidator(); if (validator != null) { return validator.isModelCompatibleWithOs(); } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_CLUSTER_CAN_NOT_BE_EMPTY); } }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.businessentities.VM getHostedEngine() { return getCallsHandler().executeRead("GetHostedEngineVm", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource()); }<END_MOD>
<START_MOD>public static void main(java.lang.String[] args) throws java.io.IOException, java.lang.ClassNotFoundException { java.lang.System.out.println("Generating RSDL file..."); org.ovirt.engine.api.model.RSDL rsdl = org.ovirt.engine.api.rsdl.RsdlManager.buildRsdl(args[0], args[1]); org.ovirt.engine.api.rsdl.RsdlManager.serializeRsdl(rsdl, args[2]); }<END_MOD>
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc disconnectStoragePool(java.lang.String spUUID, int hostSpmId, java.lang.String SCSIKey) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("StoragePool.disconnect").withParameter("storagepoolID", spUUID).withParameter("hostID", hostSpmId).withParameter("scsiKey", SCSIKey).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
<START_MOD>@java.lang.Override public org.ovirt.engine.core.common.businessentities.VdsNetworkInterface getManagedInterfaceForVdsByVdsId(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_id", id).addValue("user_id", userID).addValue("is_filtered", isFiltered); return getCallsHandler().executeRead("GetVdsManagedInterfaceByVdsId", org.ovirt.engine.core.dao.InterfaceDAODbFacadeImpl.vdsNetworkInterfaceRowMapper, parameterSource); }<END_MOD>
public org.ovirt.engine.core.common.businessentities.Snapshot addActiveSnapshot(org.ovirt.engine.core.compat.Guid snapshotId, org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotStatus snapshotStatus, final org.ovirt.engine.core.bll.context.CompensationContext compensationContext) { return addActiveSnapshot(snapshotId, vm, snapshotStatus, "", null, <START_MOD>null, null, <END_MOD>compensationContext); }
<START_MOD>public static java.lang.String merge(java.lang.String key, java.lang.String value, java.lang.String customValue) { if (!(org.ovirt.engine.core.utils.pm.FenceConfigHelper.initialized)) { org.ovirt.engine.core.utils.pm.FenceConfigHelper.init(); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(value); if ((org.apache.commons.lang.StringUtils.isNotEmpty(value)) && (org.apache.commons.lang.StringUtils.isNotEmpty(customValue))) { if (org.ovirt.engine.core.utils.pm.FenceConfigHelper.isValid(key, customValue)) { sb.append(org.ovirt.engine.core.utils.pm.FenceConfigHelper.keySeparatorMap.get(key)); sb.append(customValue); } else { org.ovirt.engine.core.utils.pm.FenceConfigHelper.log.errorFormat("Configuration key {0} has illegal value {1}. Expression should match {2}", key, customValue, org.ovirt.engine.core.utils.pm.FenceConfigHelper.keyValidatorMap.get(key)); } } return sb.toString(); }<END_MOD>
<START_MOD>public void testOvfDataUpdaterAllVmsAndTemplatesAreLocked(boolean ovfOnAnyDomainSupported) { int size = (ITEMS_COUNT_PER_UPDATE) - 1; java.util.List<org.ovirt.engine.core.compat.Guid> vmGuids = generateGuidList(size); addVms(vmGuids, 2, VMStatus.ImageLocked, ImageStatus.OK, pool1.getId()); java.util.List<org.ovirt.engine.core.compat.Guid> removedGuids = generateGuidList(size); java.util.List<org.ovirt.engine.core.compat.Guid> templatesGuids = generateGuidList(size); addTemplates(templatesGuids, 2, VmTemplateStatus.Locked, ImageStatus.OK, pool1.getId()); initTestForPool(pool1, vmGuids, templatesGuids, removedGuids); command.executeCommand(); verify(command, never()).performOvfUpdate(any(org.ovirt.engine.core.common.businessentities.StoragePool.class), anyMap()); if (!ovfOnAnyDomainSupported) { verify(ovfUpdateProcessHelper, times(size)).executeRemoveVmInSpm(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class)); } verifyCorrectOvfDataUpdaterRun(pool1, java.util.Collections.<org.ovirt.engine.core.compat.Guid>emptyList(), removedGuids); }<END_MOD>
<START_MOD>@java.lang.Override protected org.ovirt.engine.core.common.businessentities.DiskImage getDiskImage() { return super.getDiskImage(); }<END_MOD>
<START_MOD>private java.util.Collection<org.ovirt.engine.core.common.businessentities.Snapshot> getSnapshotsToBeImportedWithMemory() { if (getParameters().getCopyCollapse()) { org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = getSnapshotDao().get(getVmId(), SnapshotType.ACTIVE); return !(activeSnapshot.getMemoryVolume().isEmpty()) ? java.util.Collections.<org.ovirt.engine.core.common.businessentities.Snapshot>singleton(activeSnapshot) : java.util.Collections.<org.ovirt.engine.core.common.businessentities.Snapshot>emptyList(); } else { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.Snapshot> memory2snapshot = new java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.businessentities.Snapshot>(); for (org.ovirt.engine.core.common.businessentities.Snapshot snapshot : getSnapshotDao().getAll(getVmId())) { memory2snapshot.put(snapshot.getMemoryVolume(), snapshot); } memory2snapshot.remove(StringUtils.EMPTY); return memory2snapshot.values(); } }<END_MOD>
<START_MOD>private org.ovirt.engine.ui.uicommonweb.validation.ValidationResult validate(java.lang.String icon) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult typeValidation = validateType(icon); if (!(typeValidation.getSuccess())) { return typeValidation; } org.ovirt.engine.ui.uicommonweb.validation.ValidationResult dimensionsValidation = validateDimensions(icon); org.ovirt.engine.ui.uicommonweb.validation.ValidationResult sizeValidation = validateSize(icon); if ((dimensionsValidation.getSuccess()) && (sizeValidation.getSuccess())) { return org.ovirt.engine.ui.uicommonweb.validation.ValidationResult.ok(); } final java.util.List<java.lang.String> reasons = org.ovirt.engine.ui.uicommonweb.Linq.concatTypesafe(dimensionsValidation.getReasons(), sizeValidation.getReasons()); return new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(false, reasons); }<END_MOD>
private void assertHostNicVfsConfigEquals(org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig config1, org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig config2) { assertEquals(<START_MOD>"id", <END_MOD>config1.getId(), config2.getId()); assertEquals(<START_MOD>"nic_id", <END_MOD>config1.getNicId(), config2.getNicId()); assertEquals(<START_MOD>"max_num_of_vfs", <END_MOD>config1.getMaxNumOfVfs(), config2.getMaxNumOfVfs()); assertEquals(<START_MOD>"num_of_vfs", <END_MOD>config1.getNumOfVfs(), config2.getNumOfVfs()); assertEquals(<START_MOD>"num_of_free_vfs", <END_MOD>config1.getNumOfFreeVfs(), config2.getNumOfFreeVfs()); assertEquals(<START_MOD>"all_networks_allowed", <END_MOD>config1.isAllNetworksAllowed(), config2.isAllNetworksAllowed()); <START_MOD>assertEquals("networks", config1.getNetworks(), config2.getNetworks()); assertEquals("labels", config1.getLabels(), config2.getLabels()); <END_MOD>}
@org.junit.Test public void clusterAlreadyInLocalFs() { prepareManagementNetworkMocks(); createCommandWithDefaultVdsGroup(); oldGroupIsDetachedDefault(); storagePoolIsLocalFS(); setupCpu(); allQueriesForVms(); storagePoolAlreadyHasCluster(); architectureIsUpdatable(); canDoActionFailedWithReason(<START_MOD>EngineMessages<END_MOD>.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE); }
private void setupGlusterMock(boolean clusterHasServers, org.ovirt.engine.core.common.businessentities.VDS upServer, boolean hasPeers) throws java.lang.Exception { setupCommonMock(true); when(commandMock.createReturnValue()).thenCallRealMethod(); when(commandMock.getReturnValue()).thenCallRealMethod(); doCallRealMethod().when(commandMock).<START_MOD>addValidateMessage<END_MOD>(any(org.ovirt.engine.core.common.errors.EngineMessage.class)); when(commandMock.getGlusterUtil()).thenReturn(glusterUtil); when(glusterUtil.getPeers(any(org.ovirt.engine.core.bll.utils.EngineSSHClient.class))).thenReturn((hasPeers ? java.util.Collections.singleton(org.ovirt.engine.core.bll.hostdeploy.AddVdsCommandTest.PEER_1) : java.util.Collections.<java.lang.String>emptySet())); when(commandMock.getGlusterDBUtils()).thenReturn(glusterDBUtils); when(clusterUtils.hasServers(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(clusterHasServers); when(vdsDaoMock.getAllForVdsGroup(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(mockVdsInDb((clusterHasServers ? org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance : org.ovirt.engine.core.common.businessentities.VDSStatus.Initializing))); when(clusterUtils.getUpServer(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(upServer); }
@java.lang.Override protected void setActionMessageParameters() { <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__ACTION__REFRESH); <START_MOD>addValidateMessage<END_MOD>(EngineMessage.VAR__TYPE__HOST_CAPABILITIES); }
<START_MOD>@java.lang.Override public javax.ws.rs.core.Response performRemove(java.lang.String id) { org.ovirt.engine.core.common.AttachDetachStorageConnectionParameters params = new org.ovirt.engine.core.common.AttachDetachStorageConnectionParameters(storageDomainId, id); return performAction(VdcActionType.DetachStorageConnectionFromStorageDomain, params); }<END_MOD>
@org.junit.Test public void testCanAttachMultipleISOOrExport() { for (org.ovirt.engine.core.common.businessentities.StorageDomainType type : java.util.Arrays.<org.ovirt.engine.core.common.businessentities.StorageDomainType>asList(StorageDomainType.ISO, StorageDomainType.ImportExport)) { storageDomain.setStorageDomainType(type); spyValidator(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> domainList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); org.ovirt.engine.core.common.businessentities.StorageDomain domainWithSameType = new org.ovirt.engine.core.common.businessentities.StorageDomain(); domainWithSameType.setStorageDomainType(type); domainList.add(domainWithSameType); when(storageDomainDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(domainList); org.ovirt.engine.core.bll.ValidationResult attachMultipleISOOrExportResult = validator.validateDomainCanBeAttachedToPool(); assertFalse((( domain of type   + type) +   succeeded while it should have failed attachMultipleISOOrExportResult.isValid()); assertFailingMessage((( domain of type   + type) +   succeeded though another domain of the same type already exists in the pool attachMultipleISOOrExportResult, (type == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO) ? org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ERROR_CANNOT_ATTACH_MORE_THAN_ONE_ISO_DOMAIN : org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.ERROR_CANNOT_ATTACH_MORE_THAN_ONE_EXPORT_DOMAIN)); } }
@java.lang.Override public java.lang.Void runInTransaction() { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : filteredImages) { if ((image.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.CINDER)) { cinderDisks.add(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (image))); continue; } org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runInternalActionWithTasksContext(VdcActionType.TryBackToSnapshot, buildTryBackToSnapshotParameters(newActiveSnapshotId, image)); if (vdcReturnValue.getSucceeded()) { getTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList()); } else if ((vdcReturnValue.getFault()) != null) { throw new org.ovirt.engine.core.common.errors.<START_MOD>EngineException<END_MOD>(vdcReturnValue.getFault().getError(), vdcReturnValue.getFault().getMessage()); } else { log.error( create snapshot throw new org.ovirt.engine.core.common.errors.<START_MOD>EngineException(org.ovirt.engine.core.common.errors.EngineErrors<END_MOD>.IRS_IMAGE_STATUS_ILLEGAL); } } if ((!(cinderDisks.isEmpty())) && (!(tryBackAllCinderDisks(cinderDisks, newActiveSnapshotId)))) { throw new org.ovirt.engine.core.common.errors.<START_MOD>EngineException(org.ovirt.engine.core.common.errors.EngineErrors<END_MOD>.CINDER_ERROR,   to preview a snapshot! } return null; }
<START_MOD>@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getUnderUtilizedHosts(org.ovirt.engine.core.common.businessentities.VDSGroup cluster, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> relevantHosts, final java.util.Map<java.lang.String, java.lang.String> parameters) { final int migrationThreshold = tryParseWithDefault(parameters.get("MigrationThreshold"), getMigrationThresholdDefault()); final org.ovirt.engine.core.common.businessentities.VDS worstVDS = getWorstVDS(relevantHosts, parameters); return org.ovirt.engine.core.utils.linq.LinqUtils.filter(relevantHosts, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.VDS>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.VDS p) { int distance = (getOccupiedVMSLots(worstVDS, parameters)) - (getOccupiedVMSLots(p, parameters)); return distance < migrationThreshold; } }); }<END_MOD>
<START_MOD>private void checkReportsDeploymentStatus() { com.google.gwt.http.client.RequestBuilder requestBuilder = new com.google.gwt.http.client.RequestBuilder(com.google.gwt.http.client.RequestBuilder.GET, ((reportBaseUrl) + "/Status")); try { requestBuilder.setTimeoutMillis(1000); requestBuilder.sendRequest(null, new com.google.gwt.http.client.RequestCallback() { @java.lang.Override public void onError(com.google.gwt.http.client.Request request, java.lang.Throwable exception) { } @java.lang.Override public void onResponseReceived(com.google.gwt.http.client.Request request, com.google.gwt.http.client.Response response) { if (((response.getStatusCode()) == (com.google.gwt.http.client.Response.SC_OK)) && (response.getText().trim().equals(org.ovirt.engine.ui.uicommonweb.ReportInit.REPORTS_WEBAPP_DEPLOYED_MSG))) { reportsWebappDeployed = true; parseReportsXML(); } } }); } catch (com.google.gwt.http.client.RequestException e) { } }<END_MOD>
<START_MOD>boolean verifyStorageServerConnections(org.ovirt.engine.core.common.action.ConnectHostToStoragePoolServersParameters parameters, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections);<END_MOD>
@org.junit.Test public void testWarnOnActiveVmPositive() { testWarnOnActiveVmInner(true); org.mockito.Mockito.verify(<START_MOD>mockAuditLogableBase<END_MOD>).auditLog(auditLogableBaseCaptor.capture(), org.mockito.Mockito.same(AuditLogType.NETWORK_UPDATE_DISPLAY_FOR_CLUSTER_WITH_ACTIVE_VM)); final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase actualLoggable = auditLogableBaseCaptor.getValue(); org.junit.Assert.assertEquals(org.ovirt.engine.core.bll.network.cluster.helper.DisplayNetworkClusterHelperTest.TEST_CLUSTER_ID, actualLoggable.getVdsGroupId()); org.junit.Assert.assertEquals(org.ovirt.engine.core.bll.network.cluster.helper.DisplayNetworkClusterHelperTest.TEST_NETWORK_NAME, actualLoggable.getCustomValue("networkname")); }
protected java.util.Map<java.lang.String, java.lang.Object> build() { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put(<START_MOD>VdsProperties.vm_guid<END_MOD>, org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getParameters().getVmId().toString()); <START_MOD>if ((org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getParameters().getCpuLimit()) != null) { <END_MOD>struct.put(<START_MOD>VdsProperties.vCpuLimit<END_MOD>, java.lang.String.valueOf(org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getParameters().getCpuLimit())); <START_MOD>} java.util.List<java.lang.Object> ioTunesList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.vdscommands.UpdateVmPolicyVDSParams.IoTuneParams param : org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getParameters().getIoTuneList()) { java.util.Map<java.lang.String, java.lang.Object> ioStruct = new java.util.HashMap<>(); if ((param.getDomainId()) != null) { ioStruct.put("domainId", param.getDomainId()); } if ((param.getPoolId()) != null) { ioStruct.put("poolId", param.getPoolId()); } if ((param.getImageId()) != null) { ioStruct.put("imageId", param.getImageId()); } if ((param.getVolumeId()) != null) { ioStruct.put("volumeId", param.getVolumeId()); } ioStruct.put("maximum", param.getIoTune()); ioTunesList.add(ioStruct); } if (!(ioTunesList.isEmpty())) { struct.put(VdsProperties.Iotune, ioTunesList); } <END_MOD>return struct; }
<START_MOD>private boolean isCloudInitUsed(final org.ovirt.engine.core.common.businessentities.VM vm) { return (((vm.getInitializationType()) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (vm.getVmOs().isLinux())) && (org.apache.commons.lang.StringUtils.isEmpty(vm.getCdPath())); }<END_MOD>
<START_MOD>@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String slaveUser = getSlaveUserName().getEntity(); getSlaveUserGroupName().setIsChangable(((slaveUser != null) && (!(slaveUser.equalsIgnoreCase(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().rootUser()))))); }<END_MOD>
<START_MOD>@org.junit.Test public void untarEmptyTarArchiveReturnsNoContent() throws java.io.IOException { byte[] emptyFile = load("empty.tar"); try (org.ovirt.engine.core.utils.archivers.tar.TarInMemoryExport tar = new org.ovirt.engine.core.utils.archivers.tar.TarInMemoryExport(new java.io.ByteArrayInputStream(emptyFile))) { java.util.Map<java.lang.String, java.nio.ByteBuffer> emptyTarEntries = tar.unTar(); assertTrue(emptyTarEntries.isEmpty()); } }<END_MOD>
<START_MOD>public boolean repeatEndMethodsOnFail(org.ovirt.engine.core.compat.Guid cmdId) { return false; }<END_MOD>
@java.lang.Override protected boolean canDoAction() { if ((!(org.ovirt.engine.core.bll.UpdateVmDiskCommand.isVmExist())) || (!(isDiskExist(getOldDisk())))) { return false; } if (!(org.ovirt.engine.core.bll.UpdateVmDiskCommand.canRunActionOnNonManagedVm())) { return false; } if (!(vmsDiskOrSnapshotPluggedTo.isEmpty())) { if ((isAtLeastOneVmIsNotDown(vmsDiskOrSnapshotPluggedTo)) && (shouldUpdatePropertiesOtherThanSize())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN); } boolean isUpdatedAsBootable = (!(getOldDisk().isBoot())) && (getNewDisk().isBoot()); if (isUpdatedAsBootable && (!(validate(noVmsContainBootableDisks(vmsDiskPluggedTo))))) { return false; } boolean isDiskInterfaceUpdated = (getOldDisk().getDiskInterface()) != (getNewDisk().getDiskInterface()); if (isDiskInterfaceUpdated && (!(validatePciAndIdeLimit(vmsDiskOrSnapshotPluggedTo)))) { return false; } } if ((DiskStorageType.IMAGE.equals(getOldDisk().getDiskStorageType())) && (!(validateCanResizeDisk()))) { return false; } org.ovirt.engine.core.bll.validator.DiskValidator diskValidator = getDiskValidator(getNewDisk()); return (((<START_MOD>(<END_MOD>validateCanUpdateShareable()) && (validateCanUpdateReadOnly())) && (validate(diskValidator.isVirtIoScsiValid(org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVm())))) && (<START_MOD>validate(diskValidator.isDiskInterfaceSupportReadOnly()))) && (<END_MOD>((getOldDisk().getDiskInterface()) == (getNewDisk().getDiskInterface())) || (validate(diskValidator.isDiskInterfaceSupported(org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVm())))); }
@org.junit.Test public void testValidateNameSizeImportAsCloned() { java.lang.String string300 = ((<START_MOD>org.ovirt.engine.core.bll.ImportVmCommandTest.<END_MOD>string100) + (<START_MOD>org.ovirt.engine.core.bll.ImportVmCommandTest.<END_MOD>string100)) + (<START_MOD>org.ovirt.engine.core.bll.ImportVmCommandTest.<END_MOD>string100); checkVmName(true, string300); }
@java.lang.Override protected void initDetailModels() { super.initDetailModels(); setVmBasicDiskListModel(new org.ovirt.engine.ui.uicommonweb.models.userportal.VmBasicDiskListModel()); org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.<START_MOD>HasEntity<END_MOD>> list = new org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.<START_MOD>HasEntity<END_MOD>>(); list.add(getVmBasicDiskListModel()); setDetailModels(list); setActiveDetailModel(getVmBasicDiskListModel()); }
private boolean candidateOperation(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?<START_MOD>, ?, ?<END_MOD>> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?<START_MOD>, ?, ?<END_MOD>> op2, boolean drop) { if (op1 == null) { throw new java.lang.IllegalArgumentException( Operands } org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation candidate = org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperationFactory.operationFor(op1, op2, true); if (drop) { onOperation(candidate, candidate.getCommand(op1, op2, allNics)); } if (((!(candidate.equals(currentCandidate))) || (!(equals(op1, currentOp1)))) || (!(equals(op2, currentOp2)))) { currentCandidate = candidate; currentOp1 = op1; currentOp2 = op2; getOperationCandidateEvent().raise(this, new org.ovirt.engine.ui.uicommonweb.models.hosts.network.OperationCadidateEventArgs(candidate, op1, op2)); } return !(candidate.isNullOperation()); }
public void setPmOptionsMap(java.util.HashMap<java.lang.String, java.lang.String> value) { java.lang.String pmOptions = ""; for (java.util.Map.Entry<java.lang.String, java.lang.String> pair : value.entrySet()) { java.lang.String k = pair.getKey(); java.lang.String v = pair.getValue(); if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(k, org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmPortKey)) { getPmPort().setEntity((org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(value.get(k)) ? "" : value.get(k))); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(k, org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmSlotKey)) { getPmSlot().setEntity((org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(value.get(k)) ? "" : value.get(k))); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(k, org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmSecureKey)) { getPmSecure().setEntity(java.lang.Boolean.parseBoolean(value.get(k))); } else { if (org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(v)) { pmOptions += <START_MOD>k + ","<END_MOD>; } else { pmOptions += <START_MOD>((k + "=") +<END_MOD> v)<START_MOD> + ","<END_MOD>; } } } if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(pmOptions))) { getPmOptions().setEntity(pmOptions.substring(0, ((pmOptions.length()) - 1))); } }
<START_MOD>public java.util.List<org.ovirt.engine.ui.uicommonweb.models.hosts.numa.VNodeModel> getUnassignedVNodeModelList() { return UnassignedVNodeModelList; }<END_MOD>
public void syncWithBackend() { final org.ovirt.engine.core.common.businessentities.StoragePool dc = getSelectedDc(); if (dc == null) { return; } boolean isSupportBridgesReportByVDSM = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.SupportBridgesReportByVDSM, dc.getcompatibility_version().toString()))); setSupportBridgesReportByVDSM(isSupportBridgesReportByVDSM); boolean isMTUOverrideSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MTUOverrideSupported, dc.getcompatibility_version().toString()))); setMTUOverrideSupported(isMTUOverrideSupported); <START_MOD>org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(); query.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.lang.Iterable<org.ovirt.engine.core.common.businessentities.network.NetworkQoS> qos = ((java.lang.Iterable<org.ovirt.engine.core.common.businessentities.network.NetworkQoS>) (returnValue)); org.ovirt.engine.core.common.businessentities.network.NetworkQoS selectedQos = getNetwork().getQos(); getQos().setItems(qos); getQos().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.findNetworkQosById(qos, (selectedQos == null ? null : selectedQos.getId()))); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getAllNetworkQos(dc.getId(), query); <END_MOD>onExportChanged(); getProfiles().updateDcId(dc.getId()); }
@java.lang.Override protected org.ovirt.engine.api.model.HostNic postPopulate(org.ovirt.engine.api.model.HostNic model) { org.ovirt.engine.api.model.HostNic hostNIC = super.postPopulate(model); org.ovirt.engine.api.model.Qos qos = hostNIC.getQos(); qos.setType(QosType.HOSTNETWORK); qos.setName(null); qos.setDataCenter(null); <START_MOD>model.setBootProtocol(BootProtocol.STATIC); <END_MOD>return hostNIC; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.<START_MOD>NetworkEntity<END_MOD>> getAllForDataCenter(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeReadList("GetAllNetworkByStoragePoolId", org.ovirt.engine.core.dao.NetworkDAODbFacadeImpl.NetworkRowMapper.instance, getCustomMapSqlParameterSource().addValue("id", id)); }
protected org.ovirt.engine.core.bll.network.macpoolmanager.<START_MOD>MacPool<END_MOD> getMacPool() { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.class).poolForDataCenter(params.getStoragePoolId()); }
@org.junit.Test public void checkRemoveIscsiConnectionDisksExist() { parameters.setStorageServerConnection(iSCSIConnection); when(storageServerConnectionDao.get(iSCSIConnection.getid())).thenReturn(iSCSIConnection); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("3600144f09dbd05000000517e730b1212"); lun1.setStorageDomainName("storagedomain1"); lun1.setvolume_group_id(""); lun1.setDiskAlias("disk1"); luns.add(lun1); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id("3600144f09dbd05000000517e730b1212"); lun2.setStorageDomainName("storagedomain4"); lun2.setvolume_group_id(""); lun2.setDiskAlias("disk2"); luns.add(lun2); when(lunDao.getAllForStorageServerConnection(iSCSIConnection.getid())).thenReturn(luns); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, <START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_DISKS); }
@java.lang.Override protected org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap createWidgetConfiguration() { return super.createWidgetConfiguration().update(foremanTab, hiddenField()).putAll(poolSpecificFields(), hiddenField()).putOne(isDeleteProtectedEditor, hiddenField()).putOne(isStatelessEditor, hiddenField()).putOne(isRunAndPauseEditor, hiddenField()).putOne(commentEditor, hiddenField()).putOne(vmTypeEditor, hiddenField()).putOne(oSTypeEditor, hiddenField()).putOne(initialRunTab, hiddenField()).putOne(expander, hiddenField()).putOne(allowConsoleReconnectEditor, hiddenField()).putOne(cdAttachedEditor, hiddenField()).putOne(cdImageEditor, hiddenField()).putOne(refreshButton, hiddenField()).putOne(timeZoneEditor, hiddenField()).putOne(generalLabel, hiddenField()).putOne(quotaEditor, hiddenField()).putOne(cpuAllocationPanel, hiddenField()).putOne(vncKeyboardLayoutEditor, hiddenField()).putOne(storageAllocationPanel, hiddenField()).putOne(customPropertiesTab, hiddenField()).putOne(ssoMethodLabel, hiddenField()).putOne(ssoMethodNone, hiddenField()).putOne(ssoMethodGuestAgent, hiddenField()).putOne(hostCpuEditor, hiddenField()).putOne(templateVersionNameEditor, hiddenField()).putOne(bootMenuEnabledEditor, hiddenField()).putOne(serialNumberPolicyEditor, hiddenField()).putOne(timeZoneEditorWithInfo, hiddenField()).putOne(startRunningOnPanel, hiddenField()).putOne(spiceCopyPasteEnabledEditor, hiddenField()).putOne(spiceFileTransferEnabledEditor, hiddenField()).putOne(iconTab, hiddenField()).putOne(consoleDisconnectActionEditor, hiddenField())<START_MOD>.putOne(compatibilityVersionEditor, hiddenField())<END_MOD>; }
@org.junit.Test public void equalSpaceThreshold() { org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings settings = new org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings(); settings.diskSpaceFree = 5; settings.diskSpaceUsed = 5; settings.spaceThresholdGB = 5; settings.spaceThresholdPct = 10; org.ovirt.engine.core.common.businessentities.storage_domains domain = setupForSpaceTest(settings); assertFalse(org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.<START_MOD>isAboveThresholds<END_MOD>(domain)); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return (<START_MOD>(<END_MOD>java.lang.String.valueOf(object.getMemSizeMb())) +   <START_MOD>  + (org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageTemplateBackupView.constants.mb());<END_MOD> }
<START_MOD>@java.lang.SuppressWarnings("unused") <END_MOD>protected org.ovirt.engine.core.bll.SPMAsyncTask ConcreteCreateTask(org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { throw new org.ovirt.engine.core.compat.NotImplementedException(); }
protected<START_MOD> java.util.List<? extends<END_MOD> org.ovirt.engine.core.bll.<START_MOD>memory<END_MOD>.<START_MOD>storageDomainFilters<END_MOD>.<START_MOD>StorageDomainFilter><END_MOD> <START_MOD>getStorageDomainFilters<END_MOD>(<START_MOD>) { return java.util.Arrays.asList(new <END_MOD>org.ovirt.engine.core.<START_MOD>bll<END_MOD>.<START_MOD>memory<END_MOD>.<START_MOD>storageDomainFilters.StorageDomainStatusFilter(<END_MOD>)<START_MOD>,<END_MOD> new org.ovirt.engine.core.bll.<START_MOD>memory<END_MOD>.<START_MOD>storageDomainFilters<END_MOD>.<START_MOD>StorageDomainTypeFilter<END_MOD>(<START_MOD>), new org.ovirt.engine.core.bll.memory.storageDomainFilters.StorageDomainSpaceRequirementsFilter()<END_MOD>); }
<START_MOD>protected abstract com.gwtplatform.mvp.client.Tab addTabImpl(com.gwtplatform.mvp.client.TabData tabData, java.lang.String historyToken);<END_MOD>
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> getByName(java.lang.String name, boolean isCaseSensitive) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_group_name", name).addValue("is_case_sensitive", isCaseSensitive); return getCallsHandler().executeReadList("GetVdsGroupByVdsGroupName", org.ovirt.engine.core.dao.<START_MOD>VdsGroupDAOImpl<END_MOD>.VdsGroupRowMapper.instance, parameterSource); }
<START_MOD>@com.google.gwt.i18n.client.Constants.DefaultStringValue("Specific User/Group") java.lang.String specificUserGroupPerission();<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, java.util.List<java.lang.String> messages) { return org.ovirt.engine.core.bll.scheduling.policyunits.VmAffinityFilterPolicyUnit.getAcceptableHosts(AffinityEnforcementType.HARD, hosts, vm, messages); }<END_MOD>
@java.lang.Override protected org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap createWidgetConfiguration() { return super.createWidgetConfiguration().putAll(allTabs(), simpleField().visibleInAdvancedModeOnly()).putAll(adancedFieldsFromGeneralTab(), simpleField().visibleInAdvancedModeOnly()).putAll(consoleTabWidgets(), simpleField().visibleInAdvancedModeOnly()).update(consoleTab, simpleField()).update(numOfMonitorsEditor, simpleField()).update(<START_MOD>rngPeriodEditor, simpleField()).update(<END_MOD>isSingleQxlEnabledEditor, simpleField()).putOne(isSoundcardEnabledEditor, simpleField().visibleInAdvancedModeOnly()).putOne(isConsoleDeviceEnabledEditor, simpleField().visibleInAdvancedModeOnly()); }
<START_MOD>private org.ovirt.engine.core.compat.Guid getPoolSpmId() { if ((cachedSpmId) == null) { cachedSpmId = org.ovirt.engine.core.bll.SpmCommand.getStoragePool().getspm_vds_id(); } return cachedSpmId; }<END_MOD>
@org.junit.Test public void testIscsiLunCannotBeAddedIfAddingFloatingDisk() { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = createISCSILunDisk(ScsiGenericIO.UNFILTERED, true, DiskInterface.IDE); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(disk); initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid(), parameters); assertFalse( disk with SCSI reservation set successfully added command.checkIfLunDiskCanBeAdded(spyDiskValidator(disk))); verifyCanDoActionMessagesContainMessage(<START_MOD>EngineMessages<END_MOD>.ACTION_TYPE_FAILED_SCSI_RESERVATION_NOT_VALID_FOR_FLOATING_DISK); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.get(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); if (storageDomain.getStorageType().isCinderDomain()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(diskImages); } else { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllSnapshotsForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); <START_MOD>org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(imagesHandler.fillSnapshotsToDiskImages(diskImages)<END_MOD>); } }
void sendMessage(byte[] message);
private void validateDimensions() { boolean dimensionsValid = ((((image.getWidth()) >= (dimensionsType.getMinWidth())) && ((image.getWidth()) <= (dimensionsType.getMaxWidth()))) && ((image.getHeight()) >= (dimensionsType.getMinHeight()))) && ((image.getHeight()) <= (dimensionsType.getMaxHeight())); if (!dimensionsValid) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.<START_MOD>EngineMessages<END_MOD>.PROVIDED_VM_ICON_HAS_INVALID_DIMENSIONS, ((((((((   +     + (dimensionsType.getMinWidth())) + "x") + (dimensionsType.getMinHeight())) +   to   + (dimensionsType.getMaxWidth())) + "x") + (dimensionsType.getMaxHeight())), (((   + (image.getWidth())) + "x") + (image.getHeight()))); } }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( and Approve Host java.lang.String editAndApproveHostTitle();
@org.junit.Test public void testSave() { dao.save(new_bookmark); org.ovirt.engine.core.common.businessentities.<START_MOD>Bookmarks<END_MOD> result = dao.getByName(new_bookmark.getbookmark_name()); assertNotNull(result); }
<START_MOD>java.lang.String uploadImageFileNotExist();<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.core.common.<START_MOD>queries<END_MOD>.<START_MOD>VdcQueryReturnValue<END_MOD> <START_MOD>queryReturnValue<END_MOD> = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue))<START_MOD>; if (queryReturnValue.getSucceeded()) { org.ovirt.engine.core.common.businessentities.VM vm = queryReturnValue<END_MOD>.getReturnValue(); updateVms(java.util.Collections.singletonList(vm)); clearErrorAndWarning(); } else { setError(messages.failedToLoadOva(getOvaPath().getEntity())); } stopProgress(); }
public org.ovirt.engine.core.common.job.Step addStep(org.ovirt.engine.core.bll.job.ExecutionContext context, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description, boolean isExternal) { if (context == null) { return null; } org.ovirt.engine.core.common.job.Step step = null; if (context.isMonitored()) { if (description == null) { description = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.getInstance().getStepMessage(stepName); } try { org.ovirt.engine.core.common.job.Job job = context.getJob(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsJob)) && (job != null)) { step = job.addStep(stepName, description); try { step.setExternal(isExternal); jobRepository.saveStep(step); } catch (java.lang.Exception e) { log.error( to save new step '{}' for job '{}', '{}': {} stepName.name(), job.getId(), job.getActionType().name(), e.getMessage()); log.debug("Exception", e); job.getSteps().remove(step); step = null; } } else { org.ovirt.engine.core.common.job.Step contextStep = context.getStep(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsStep)) && (contextStep != null)) { step = addSubStep(contextStep, stepName, description<START_MOD>, java.util.Collections.emptyList(), false<END_MOD>); step.setExternal(isExternal); } } } catch (java.lang.Exception e) { log.error("Exception", e); } } return step; }
@<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gwt<END_MOD>.<START_MOD>i18n<END_MOD>.<START_MOD>client.Constants<END_MOD>.DefaultStringValue( Providers java.lang.String externalProvidersTitle();
<START_MOD>private void handlePartiallyExecutedTaskOfCommand(final org.ovirt.engine.core.common.businessentities.AsyncTask task) { if (org.ovirt.engine.core.bll.tasks.AsyncTaskManager.hasEmptyVdsmId(task)) { org.ovirt.engine.core.bll.tasks.AsyncTaskManager.removeTaskFromDbByTaskId(task.getTaskId()); return; } if (waitAndPollOnRestart(task)) { partiallyCompletedCommandTasks.put(task.getVdsmTaskId(), task); } else { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { logAndFailPartiallySubmittedTaskOfCommand(task, "Engine was restarted before all tasks of the command could be submitted to vdsm."); return null; } }); } }<END_MOD>
private java.lang.String getMessageToLog(java.lang.String loggerString, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { java.lang.String logMessage; if (loggerString.isEmpty()) { logMessage = auditLog.toStringForLogging(); } else { logMessage = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.transform(loggerString, auditLog.getmessage()); } return logMessage; }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = super.canDoAction(); oldPool = org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPoolDAO().get(org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPool().getvm_pool_id()); if (returnValue && (<START_MOD>(<END_MOD>oldPool<START_MOD>)<END_MOD> == null)) { addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_UPDATE_POOL_NOT_FOUND); returnValue = false; } else if (returnValue && ((org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getParameters().getVmsCount()) < 0)) { addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_DECREASE_VMS_FROM_POOL); returnValue = false; } return returnValue; }
<START_MOD>public void setConfigParams(java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfigParam> params) { this.configParams = params; }<END_MOD>
@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.HostDevice entity) { return createIdParameterMapper(entity.getId()).addValue("parent_device_name", entity.getParentDeviceName()).addValue("capability", entity.getCapability()).addValue("iommu_group", entity.getIommuGroup()).addValue(<START_MOD>"mdev_types", org.apache.commons.lang.StringUtils.join(entity.getMdevTypes(), ",")).addValue(<END_MOD>"product_name", entity.getProductName()).addValue("product_id", entity.getProductId()).addValue("vendor_name", entity.getVendorName()).addValue("vendor_id", entity.getVendorId()).addValue("physfn", entity.getParentPhysicalFunction()).addValue("total_vfs", entity.getTotalVirtualFunctions()).addValue("net_iface_name", entity.getNetworkInterfaceName()).addValue("driver", entity.getDriver()).addValue("is_assignable", entity.isAssignable()).addValue("address", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(entity.getAddress())); }
@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getAsyncTaskDao(); params = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); params.setSessionId("ASESSIONID"); params.setTransactionScopeOption(TransactionScopeOption.RequiresNew); taskParams = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); taskParams.setSessionId("ASESSIONID"); taskParams.setTransactionScopeOption(TransactionScopeOption.RequiresNew); taskParams.setParentParameters(params); newAsyncTask = new org.ovirt.engine.core.common.businessentities.AsyncTasks(); newAsyncTask.setTaskId(org.ovirt.engine.core.compat.Guid.NewGuid()); newAsyncTask.setVdsmTaskId(org.ovirt.engine.core.compat.Guid.NewGuid()); newAsyncTask.setStartTime(new java.util.Date()); newAsyncTask.setaction_type(VdcActionType.AddDisk); newAsyncTask.setstatus(AsyncTaskStatusEnum.running); newAsyncTask.setresult(AsyncTaskResultEnum.success); newAsyncTask.setActionParameters(params); newAsyncTask.setTaskParameters(taskParams); newAsyncTask.setCommandId(org.ovirt.engine.core.compat.Guid.NewGuid()); newAsyncTask.<START_MOD>setRootCommandId(org.ovirt.engine.core.compat.Guid.NewGuid()); newAsyncTask.<END_MOD>setTaskType(AsyncTaskType.copyImage); newAsyncTask.setStoragePoolId(org.ovirt.engine.core.compat.Guid.NewGuid()); existingAsyncTask = dao.get(FixturesTool.EXISTING_TASK_ID); }
public java.util.Map<java.lang.String, java.lang.Object> glusterVolumeGeoRepSessionResume(java.lang.String volumeName, java.lang.String slaveHostName, java.lang.String slaveVolumeName, <START_MOD>java.lang.String slaveUserName, <END_MOD>boolean force);
<START_MOD>private void initVisibilities() { errorMsg.setVisible(false); messageLabel.setVisible(false); geoRepForceHelpIcon.setVisible(false); }<END_MOD>
public void manage() { if ((getWindow()) != null) { return; } org.ovirt.engine.core.compat.Guid storagePoolId = ((getEntity().getStoragePoolId()) != null) ? getEntity().getStoragePoolId() : org.ovirt.engine.core.compat.Guid.Empty; org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkListModel clusterNetworkListModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkListModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network> dcNetworks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>) (result)); org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkManageModel networkToManage = createNetworkList(dcNetworks); clusterNetworkListModel.setWindow(networkToManage); networkToManage.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().assignDetachNetworksTitle()); networkToManage.setHashName("assign_networks"); <START_MOD>networkToManage.setHelpTag(networkToManage.getHashName(),   > Logical Network > Assign Networks <END_MOD>} }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getNetworkList(_asyncQuery, storagePoolId); }
<START_MOD>public void setGuestContainerList(java.util.List<org.ovirt.engine.core.common.businessentities.GuestContainer> guestContainerList) { this.guestContainerList = guestContainerList; }<END_MOD>
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedCommandsCompatibilityVersions = ((java.util.HashMap<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.<START_MOD>ui<END_MOD>.<START_MOD>uicommonweb<END_MOD>.<START_MOD>dataprovider<END_MOD>.CommandVersionsInfo>) (source)); return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsCommandCompatible(vdcActionType, cluster, dc); }