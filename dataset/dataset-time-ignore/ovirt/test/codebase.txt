private static java.util.Map<java.lang.String, java.lang.Object> search(java.lang.String token, java.util.Map<java.lang.String, java.lang.Object> params, java.lang.String queryType, java.lang.String scope) { java.net.HttpURLConnection connection = null; try { connection = org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.createConnection("/oauth/token-info"); org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.setClientIdSecretBasicAuthHeader(connection); org.ovirt.engine.core.uutils.net.URLBuilder urlBuilder = new org.ovirt.engine.core.uutils.net.URLBuilder(connection.getURL()).addParameter("query_type", queryType).addParameter("scope", scope); if (org.apache.commons.lang.StringUtils.isNotEmpty(token)) { urlBuilder.addParameter("token", token); } if (params != null) { urlBuilder.addParameter("params", org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.encode(new org.ovirt.engine.core.utils.serialization.json.JsonObjectSerializer().serialize(params))); } org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.postData(connection, urlBuilder.buildURL().getQuery()); return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.getData(connection); } catch (java.lang.Exception ex) { return org.ovirt.engine.core.aaa.SsoOAuthServiceUtils.buildMapWithError("server_error", ex.getMessage()); } finally { if (connection != null) { connection.disconnect(); } } }
private void analyzeServiceMember(com.thoughtworks.qdox.model.JavaClass javaClass, org.ovirt.api.metamodel.concepts.Service service) { if (isAnnotatedWith(javaClass, ModelAnnotations.METHOD)) { analyzeMethod(javaClass, service); } }
private org.ovirt.engine.core.common.businessentities.storage.ImageTransfer updateEntityPhase(org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase phase) { org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates updates = new org.ovirt.engine.core.common.businessentities.storage.ImageTransferUpdates(org.ovirt.engine.core.bll.storage.disk.image.UploadImageCommand.getCommandId()); updates.setPhase(phase); return updateEntity(updates); }

private boolean checkCanPerformPlugUnPlugDisk() { if (org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.getVm().getStatus().isUpOrPaused()) { setVdsId(org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.getVm().getRunOnVds()); if (!(canPerformDiskHotPlug(disk))) { return false; } } if (((getPlugAction()) == (org.ovirt.engine.core.common.vdscommands.VDSCommandType.HotPlugDisk)) && (oldVmDevice.getIsPlugged())) { return failCanDoAction(VdcBllMessages.HOT_PLUG_DISK_IS_NOT_UNPLUGGED); } if (((getPlugAction()) == (org.ovirt.engine.core.common.vdscommands.VDSCommandType.HotUnPlugDisk)) && (!(oldVmDevice.getIsPlugged()))) { return failCanDoAction(VdcBllMessages.HOT_UNPLUG_DISK_IS_NOT_PLUGGED); } return true; }


@java.lang.Override protected boolean canDoAction() { final org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.SetVmTicketCommand.getVm(); if (vm == null) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); return false; } if (!(org.ovirt.engine.core.bll.SetVmTicketCommand.canRunActionOnNonManagedVm())) { return false; } final org.ovirt.engine.core.common.businessentities.VMStatus status = vm.getStatus(); if (((((status != (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) && (status != (org.ovirt.engine.core.common.businessentities.VMStatus.Paused))) && (status != (org.ovirt.engine.core.common.businessentities.VMStatus.PoweringUp))) && (status != (org.ovirt.engine.core.common.businessentities.VMStatus.PoweringDown))) && (status != (org.ovirt.engine.core.common.businessentities.VMStatus.RebootInProgress))) { return org.ovirt.engine.core.bll.SetVmTicketCommand.failVmStatusIllegal(); } return true; }
public void flush() { network.setDataCenterId(getSelectedDc().getId()); network.setName(((java.lang.String) (getName().getEntity()))); network.setStp(((java.lang.Boolean) (getIsStpEnabled().getEntity()))); network.setDescription(((java.lang.String) (getDescription().getEntity()))); network.setVmNetwork(((java.lang.Boolean) (getIsVmNetwork().getEntity()))); network.setMtu(0); if ((getMtu().getEntity()) != null) { network.setMtu(java.lang.Integer.parseInt(getMtu().getEntity().toString())); } network.setVlanId(null); if (((java.lang.Boolean) (getHasVLanTag().getEntity()))) { network.setVlanId(java.lang.Integer.parseInt(getVLanTag().getEntity().toString())); } }
private org.ovirt.engine.core.common.action.CloneCinderDisksParameters buildCinderChildCommandParameters(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks, org.ovirt.engine.core.compat.Guid vmSnapshotId) { org.ovirt.engine.core.common.action.CloneCinderDisksParameters createParams = new org.ovirt.engine.core.common.action.CloneCinderDisksParameters(cinderDisks, vmSnapshotId, diskInfoDestinationMap); return withRootCommandInfo(createParams); }
public java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask> getTaskListForCluster(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.common.businessentities.VDS upServer = org.ovirt.engine.core.bll.utils.ClusterUtils.getInstance().getRandomUpServer(id); if (upServer == null) { org.ovirt.engine.core.bll.gluster.tasks.GlusterTasksService.log.info("No up server in cluster"); return null; } org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GlusterTasksList, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(upServer.getId())); if (returnValue.getSucceeded()) { java.util.List<org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask> tasks = ((java.util.List<org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask>) (returnValue.getReturnValue())); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask> tasksMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask task : tasks) { tasksMap.put(task.getTaskId(), task); } return tasksMap; } else { org.ovirt.engine.core.bll.gluster.tasks.GlusterTasksService.log.error("Error: {}", returnValue.getVdsError()); throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.GlusterVolumeStatusAllFailedException, returnValue.getVdsError().getMessage()); } }
public java.util.ArrayList<java.lang.String> getCanDoActionMessages() { return canDoActionMessages; }


private static org.ovirt.engine.core.common.businessentities.network.Network createNetworkData(java.lang.String networkName, java.util.Map<java.lang.String, java.lang.Object> network) { org.ovirt.engine.core.common.businessentities.network.Network net = new org.ovirt.engine.core.common.businessentities.network.Network(); net.setName(networkName); net.setAddr(((java.lang.String) (network.get("addr")))); net.setSubnet(((java.lang.String) (network.get("netmask")))); net.setGateway(((java.lang.String) (network.get(VdsProperties.GLOBAL_GATEWAY)))); if (org.apache.commons.lang.StringUtils.isNotBlank(((java.lang.String) (network.get(VdsProperties.MTU))))) { net.setMtu(java.lang.Integer.parseInt(((java.lang.String) (network.get(VdsProperties.MTU))))); } return net; }

@org.ovirt.engine.ui.webadmin.DefaultMessage("VM {0} already exist") java.lang.String sameVmNameExists(java.lang.String vmName);
@org.ovirt.engine.ui.common.Template("<table style='min-width: 200px; width: 100%; border-bottom: 1px solid #acacac;'><tr>" + ((("<td style='width: 49%;'>{0}</td>" + "<td style='width: 2%; border-left: 1px solid #acacac;'></td>") + "<td style='white-space: normal; width: 49%; color: #acacac;'>{1}</td>") + "</tr></table>")) com.google.gwt.safehtml.shared.SafeHtml typeAheadNameDescription(java.lang.String name, java.lang.String description);
@java.lang.Override protected void executeCommand() { java.lang.String connectionId = org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.getConnection().getid(); getStorageServerConnectionDao().remove(connectionId); org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.disconnectStorage(); org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.setSucceeded(true); }
private org.ovirt.engine.core.common.action.ImagesContainterParametersBase buildChildCommandParameters(org.ovirt.engine.core.common.businessentities.storage.CinderDisk cinderDisk) { org.ovirt.engine.core.common.action.ImagesContainterParametersBase createParams = new org.ovirt.engine.core.common.action.ImagesContainterParametersBase(cinderDisk.getImageId()); org.ovirt.engine.core.common.businessentities.storage.DiskImage templateDisk = org.ovirt.engine.core.bll.storage.CloneCinderDisksCommand.getParameters().getDisksMap().get(cinderDisk.getId()); createParams.setDiskAlias(templateDisk.getDiskAlias()); createParams.setStorageDomainId(templateDisk.getStorageIds().get(0)); createParams.setEntityInfo(org.ovirt.engine.core.bll.storage.CloneCinderDisksCommand.getParameters().getEntityInfo()); createParams.setParentCommand(org.ovirt.engine.core.bll.storage.CloneCinderDisksCommand.getActionType()); createParams.setParentParameters(org.ovirt.engine.core.bll.storage.CloneCinderDisksCommand.getParameters()); return createParams; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyClusterListModel clusterPolicyClusterListModel = ((org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyClusterListModel) (model)); clusterPolicyClusterListModel.setItems(((java.util.Collection) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); }

protected void onExportChanged() { boolean externalNetwork = getExport().getEntity(); getNetworkLabel().setIsChangeable((!externalNetwork)); getNeutronPhysicalNetwork().setIsChangeable(externalNetwork); getQos().setIsChangeable((!externalNetwork)); getAddQosCommand().setIsExecutionAllowed((!externalNetwork)); updateMtuSelectorsChangeability(); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Passwords do not match") java.lang.String cloudInitRootPasswordMatchMessage();

private void AttachFloppy_EntityChanged() { getFloppyImage().setIsChangable(((java.lang.Boolean) (getAttachFloppy().getEntity()))); UpdateIsSysprepEnabled(); }
private boolean validateNotRemovingUsedNetworkByVms() { boolean passed = true; java.util.Collection<java.lang.String> removedNetworks = new java.util.HashSet<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : params.getRemovedNetworkAttachments()) { removedNetworks.add(clusterNetworks.get(removedAttachment.getNetworkId()).getName()); } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(host.getId(), removedNetworks); for (java.lang.String vmName : vmNames) { addViolation(VdcBllMessages.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, vmName); passed = false; } return passed; }
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.ClearNonResponsiveVdsVmsCommand.getVds()) == null) { return failCanDoAction(VdcBllMessages.VDS_INVALID_SERVER_ID); } if ((((hasVMs()) && ((org.ovirt.engine.core.bll.ClearNonResponsiveVdsVmsCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive))) && ((org.ovirt.engine.core.bll.ClearNonResponsiveVdsVmsCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Reboot))) && ((org.ovirt.engine.core.bll.ClearNonResponsiveVdsVmsCommand.getVds().getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Kdumping))) { return failCanDoAction(VdcBllMessages.VDS_CANNOT_CLEAR_VMS_WRONG_STATUS); } return true; }
@org.junit.Test public void disableGlusterWhenVolumesExist() { createCommandWithVirtEnabled(); when(vdsGroupDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName()); when(vdsGroupDao.getByName(anyString())).thenReturn(org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.createVdsGroupWithNoCpuName()); cpuExists(); cpuFlagsNotMissing(); allQueriesForVms(); clusterHasGlusterVolumes(); canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_DISABLE_GLUSTER_WHEN_CLUSTER_CONTAINS_VOLUMES); }
protected boolean isImageExist() { if ((getImage()) == null) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_EXIST); } return true; }
@java.lang.Override protected java.lang.Class<? extends org.ovirt.engine.core.bll.GetImagesListByStoragePoolIdQuery<? extends org.ovirt.engine.core.common.queries.GetImagesListByStoragePoolIdParameters>> getQueryType() { return queryClass; }


protected boolean shouldCheckSpaceInStorageDomains() { return (!(getImagesToCheckDestinationStorageDomains().isEmpty())) && (!(org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(getImagesToCheckDestinationStorageDomains(), new org.ovirt.engine.core.utils.linq.All<org.ovirt.engine.core.common.businessentities.storage.DiskImage>()).getImageId().equals(VmTemplateHandler.BLANK_VM_TEMPLATE_ID))); }
@java.lang.Override public void updateInterface(org.ovirt.engine.core.compat.Version clusterVersion) { super.updateInterface(clusterVersion); getDiskInterface().setSelectedItem(DiskInterface.VirtIO); }
public java.lang.Boolean call() throws java.lang.Exception { if (((java.lang.Boolean) (_deploy.getParser().cliEnvironmentGet(VdsmEnv.OVIRT_NODE)))) { _deploy.userVisibleLog(java.util.logging.Level.INFO, "Host is hypervisor"); setNode(); } return true; }
private boolean updateParameters() { for (org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters : org.ovirt.engine.core.bll.MoveDisksCommand.getParameters().getParametersList()) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = getDiskImageDao().getAncestor(moveDiskParameters.getImageId()); if (diskImage == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_NOT_EXIST); } java.util.List<org.ovirt.engine.core.common.businessentities.VM> allVms = org.ovirt.engine.core.bll.MoveDisksCommand.getVmDAO().getVmsListForDisk(diskImage.getId()); org.ovirt.engine.core.common.businessentities.VM vm = (!(allVms.isEmpty())) ? allVms.get(0) : null; if ((vm == null) || (isVmDown(vm))) { moveParametersList.add(moveDiskParameters); } else if (isVmRunning(vm)) { org.ovirt.engine.core.utils.MultiValueMapUtils.addToMap(vm.getId(), createLiveMigrateDiskParameters(moveDiskParameters, vm.getId()), vmsLiveMigrateParametersMap); } else { addCanDoActionMessage(java.lang.String.format("$%1$s %2$s", "VmName", vm.getVmName())); return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN_OR_UP); } } return true; }
protected boolean validateVdsCluster() { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroupDao().get(org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroupId()); return vdsGroup == null ? failCanDoAction(EngineMessage.VDS_CLUSTER_IS_NOT_VALID) : (vdsGroup.getArchitecture()) != (org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getClusterArch()) ? failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_CANNOT_IMPORT_VM_ARCHITECTURE_NOT_SUPPORTED_BY_CLUSTER) : true; }
public java.lang.String getUser() { return user; }



public void setGroups(java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.businessentities.ad_groups> value) { mGroups = value; }

public static java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> filterImageDisks(java.util.Collection<? extends org.ovirt.engine.core.common.businessentities.storage.Disk> listOfDisks, boolean allowOnlyNotShareableDisks, boolean allowOnlySnapableDisks, boolean allowOnlyActiveDisks) { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> diskImages = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : listOfDisks) { if (((((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.Disk.DiskStorageType.IMAGE)) && ((!allowOnlyNotShareableDisks) || (!(disk.isShareable())))) && ((!allowOnlySnapableDisks) || (disk.isAllowSnapshot()))) && ((!allowOnlyActiveDisks) || (java.lang.Boolean.TRUE.equals(((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)).getActive())))) { diskImages.add(((org.ovirt.engine.core.common.businessentities.DiskImage) (disk))); } } return diskImages; }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); if (((volume.getAsyncTask()) != null) && (((volume.getAsyncTask().getType()) == (org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REBALANCE)) || ((volume.getAsyncTask().getType()) == (org.ovirt.engine.core.common.asynctasks.gluster.GlusterTaskType.REMOVE_BRICK)))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VOLUME_OPERATION_IN_PROGRESS); } for (org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session : georepSessions) { if (((session.getSlaveVolumeId()) == null) || ((session.getSlaveNodeUuid()) == null)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_REMOTE_CLUSTER_NOT_MAINTAINED_BY_ENGINE); } } return true; }
@org.junit.Test public void validateVmShareableDisk() { org.ovirt.engine.core.common.businessentities.StorageDomain srcStorageDomain = initStorageDomain(srcStorageId); srcStorageDomain.setStatus(StorageDomainStatus.Active); org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = initDiskImage(diskImageGroupId, diskImageId); diskImage.setShareable(true); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageGroupId); assertFalse(command.validate()); assertTrue(command.getReturnValue().getValidationMessages().contains(EngineMessage.ACTION_TYPE_FAILED_SHAREABLE_DISK_NOT_SUPPORTED.toString())); }
private boolean initGlusterHost() { glusterHostUuidFound = true; if (org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterHostUuidSupported(getVdsGroup().getCompatibilityVersion())) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterHostUUID, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(getVds().getId())); if ((returnValue.getSucceeded()) && ((returnValue.getReturnValue()) != null)) { org.ovirt.engine.core.compat.Guid addedServerUuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(((java.lang.String) (returnValue.getReturnValue()))); if (hostUuidExists(addedServerUuid)) { setNonOperational(NonOperationalReason.GLUSTER_HOST_UUID_ALREADY_EXISTS, null); return false; } saveGlusterHostUuid(addedServerUuid); } else { glusterHostUuidFound = false; setNonOperational(NonOperationalReason.GLUSTER_HOST_UUID_NOT_FOUND, null); } } return (glusterHostUuidFound) && (initGlusterPeerProcess()); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Space Used") java.lang.String volumeCapacity();

protected org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator createMultipleDiskVmElementValidator() { return new org.ovirt.engine.core.bll.validator.storage.MultipleDiskVmElementValidator(getImage(), diskVmElementDao.getAllDiskVmElementsByDiskId(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getImageGroupID())); }
public static <T> org.ovirt.engine.core.common.utils.Pair<T, org.apache.commons.httpclient.HttpClient> getConnection(java.lang.String hostName, int port, int clientTimeOut, int connectionTimeOut, int clientRetries, java.lang.Class<T> type, boolean isSecure) { org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.net.URL> urlInfo = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcUtils.getConnectionUrl(hostName, port, null, isSecure); if (urlInfo == null) { return null; } return org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcUtils.getHttpConnection(urlInfo.getSecond(), clientTimeOut, connectionTimeOut, clientRetries, type); }
protected boolean pciAndIdeWithinLimit(org.ovirt.engine.core.common.businessentities.VmStatic vm, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> allInterfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.Disk> allDisks = org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()); return checkPciAndIdeLimit(vm.getNumOfMonitors(), allInterfaces, allDisks, org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getReturnValue().getCanDoActionMessages()); }
@java.lang.Override public boolean Validate() { boolean isNew = getModel().getIsNew(); int maxAllowedVms = org.ovirt.engine.ui.uicommonweb.DataProvider.GetMaxVmsInPool(); int assignedVms = getModel().getAssignedVms().AsConvertible().Integer(); getModel().getNumOfDesktops().ValidateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.LengthValidation(4), new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation((isNew ? 1 : 0), (isNew ? maxAllowedVms : maxAllowedVms - assignedVms)) }); getModel().getPrestartedVms().ValidateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(0, assignedVms) }); getModel().setIsGeneralTabValid(((((getModel().getIsGeneralTabValid()) && (getModel().getName().getIsValid())) && (getModel().getNumOfDesktops().getIsValid())) && (getModel().getPrestartedVms().getIsValid()))); getModel().setIsPoolTabValid(true); return (((super.Validate()) && (getModel().getName().getIsValid())) && (getModel().getNumOfDesktops().getIsValid())) && (getModel().getPrestartedVms().getIsValid()); }
public java.util.List<java.lang.String> validate() { for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : params.getInterfaces()) { java.lang.String name = iface.getName(); if (addInterfaceToProcessedList(iface)) { if (isBond(iface)) { extractBondIfModified(iface, name); } else { if (org.apache.commons.lang.StringUtils.isNotBlank(iface.getBondName())) { extractBondSlave(iface); } if (!(getExistingIfaces().containsKey(org.ovirt.engine.core.utils.NetworkUtils.StripVlan(name)))) { addViolation(VdcBllMessages.NETWORK_INTERFACE_NOT_EXISTS); } } if ((violations.isEmpty()) && (org.apache.commons.lang.StringUtils.isNotBlank(iface.getNetworkName()))) { extractNetwork(iface); } } } validateBondSlavesCount(); extractRemovedNetworks(); extractRemovedBonds(); detectSlaveChanges(); return translateViolations(); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllVMsWithDisksOnOtherStorageDomain(org.ovirt.engine.core.compat.Guid storageDomainGuid) { return getCallsHandler().executeReadList("GetAllVMsWithDisksOnOtherStorageDomain", org.ovirt.engine.core.dao.VmDAODbFacadeImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("storage_domain_id", storageDomainGuid)); }
private void setJobStatusExpectations(org.ovirt.engine.core.compat.Guid jobId, org.ovirt.engine.core.common.job.JobExecutionStatus jobStatus, org.ovirt.engine.core.common.queries.VdcQueryReturnValue monitorResult, org.ovirt.engine.core.common.action.VdcReturnValueBase result) { expect(result.getJobId()).andReturn(jobId).anyTimes(); if (jobId != null) { org.ovirt.engine.core.common.job.Job jobMock = control.createMock(org.ovirt.engine.core.common.job.Job.class); expect(jobMock.getStatus()).andReturn(jobStatus); expect(monitorResult.getReturnValue()).andReturn(jobMock).anyTimes(); expect(backend.runQuery(eq(VdcQueryType.GetJobByJobId), eqQueryParams(org.ovirt.engine.core.common.queries.IdQueryParameters.class, addSession("Id"), addSession(jobId)))).andReturn(monitorResult); } }

@java.lang.Override public void init(final org.ovirt.engine.ui.uicommonweb.models.providers.ProviderModel model) { super.init(model); registerHandler(getView().getTestButton().addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { model.getTestCommand().execute(); } })); model.getTestResult().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { getView().setTestResultImage(((java.lang.String) (model.getTestResult().getEntity()))); } }); model.getAgentTabAvailable().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { customizeAgentTab(model); } }); model.getInterfaceMappingsLabel().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { customizeAgentTab(model); } }); }

@java.lang.Override protected boolean canDoAction() { boolean result = true; if (!(canDoSnapshot(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm()))) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList = getDisksList(); if ((disksList.size()) > 0) { org.ovirt.engine.core.bll.validator.VmValidator vmValidator = new org.ovirt.engine.core.bll.validator.VmValidator(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm()); org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotValidator = new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(); result = ((((((validate(snapshotValidator.vmNotDuringSnapshot(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId()))) && (validate(snapshotValidator.vmNotInPreview(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId())))) && (validate(vmValidator.vmNotDuringMigration()))) && (validate(vmValidator.vmNotRunningStateless()))) && (validate(vmValidator.vmNotIlegal()))) && (org.ovirt.engine.core.bll.ImagesHandler.PerformImagesChecks(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getReturnValue().getCanDoActionMessages(), org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getStoragePoolId(), Guid.Empty, true, true, true, true, true, true, disksList))) && (validate(vmValidator.vmNotLocked())); } return result; }
protected void endActionOnVmConfiguration() { if ((org.ovirt.engine.core.bll.VmCommand.getVm()) != null) { if ((org.ovirt.engine.core.bll.VmCommand.getVm().getstatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked)) { org.ovirt.engine.core.bll.VmHandler.unlockVm(org.ovirt.engine.core.bll.VmCommand.getVm(), org.ovirt.engine.core.bll.VmCommand.getCompensationContext()); } throw new java.lang.RuntimeException("asd"); } else { org.ovirt.engine.core.bll.VmCommand.setCommandShouldBeLogged(false); log.warn("VmCommand::EndVmCommand: Vm is null - not performing EndAction on Vm"); } }
@org.junit.Test public void testTemplateOvfCreationBackwardCompatiliblity() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VmTemplate template = org.ovirt.engine.core.utils.ovf.OvfManagerTest.createVmTemplate(); java.lang.String xml = manager.ExportTemplate(template, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(), Version.v3_0); assertNotNull(xml); final org.ovirt.engine.core.common.businessentities.VmTemplate newtemplate = new org.ovirt.engine.core.common.businessentities.VmTemplate(); manager.ImportTemplate(xml, newtemplate, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(), new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>()); assertEquals("imported template is different than expected", template, newtemplate); assertEquals("imported db generation is different than expected", template.getDbGeneration(), newtemplate.getDbGeneration()); }
@java.lang.Override public java.lang.Long getRawValue(org.ovirt.engine.core.common.businessentities.StorageDomain object) { long availableDiskSize = ((object.getAvailableDiskSize()) != null) ? object.getAvailableDiskSize() : 0; return ((long) (availableDiskSize)); }
private void addVideoCardByDisplayType(org.ovirt.engine.core.common.businessentities.DisplayType displayType) { org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct struct = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct(); struct.add(VdsProperties.Type, VmDeviceType.VIDEO.getName()); struct.add(VdsProperties.Device, displayType.getVmDeviceType().getName()); struct.add(VdsProperties.SpecParams, org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getNewMonitorSpecParams()); struct.add(VdsProperties.DeviceId, java.lang.String.valueOf(org.ovirt.engine.core.compat.Guid.NewGuid())); devices.add(struct); }
protected org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel getImportModel() { org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmModel(); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().importVirtualMachinesTitle()); model.setHashName("import_virtual_machine"); model.setEntity(getEntity()); return model; }
@java.lang.Override protected void configure() { bind(org.ovirt.engine.ui.uicommonweb.ConsoleOptionsFrontendPersister.class).to(org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.class).in(com.google.inject.Singleton.class); }
@org.junit.Test public void testGetAllForStorageEmpty() { java.util.List<org.ovirt.engine.core.common.businessentities.profiles.DiskProfile> result = dao.getAllForStorageDomain(org.ovirt.engine.core.compat.Guid.newGuid()); assertNotNull(result); assertTrue(result.isEmpty()); }

@java.lang.Override protected void executeVdsBrokerCommand() { mVmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmStatsVDSCommand.getBroker().getVmStats(org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmStatsVDSCommand.getParameters().getVmId().toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.GetVmStatsVDSCommand.proceedProxyReturnValue(); setReturnValue(createVmInternalData(mVmListReturn.mInfoList[0])); }



@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.AsyncTask task) { org.ovirt.engine.core.dao.AsyncTaskDAODbFacadeImpl.AsyncTaskParameterSource parameterSource = getTaskParameterSource(task); parameterSource.addValue("started_at", task.getStartTime()); parameterSource.addValue("storage_pool_id", task.getStoragePoolId()); parameterSource.addValue("async_task_type", task.getTaskType()); getCallsHandler().executeModification("Insertasync_tasks", parameterSource); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.ActionGroup> getAllForRole(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id); return getCallsHandler().executeReadList("GetRoleActionGroupsByRoleId", org.ovirt.engine.core.dao.ActionGroupDAODbFacadeImpl.ActionGroupMapper.instance, parameterSource); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("NFS mount path is illegal, please use [IP:/path or FQDN:/path] convention.") java.lang.String nfsMountPashIsIllegalMsg();

@java.lang.Override public org.ovirt.engine.core.common.utils.Pair<java.util.List<org.ovirt.engine.core.compat.Guid>, org.ovirt.engine.core.compat.Guid> runBalance(java.lang.String balanceName, java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs, java.util.Map<java.lang.String, java.lang.String> propertiesMap) { try { org.apache.xmlrpc.client.XmlRpcClient client = new org.apache.xmlrpc.client.XmlRpcClient(); client.setConfig(config); java.lang.Object result = client.execute(org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.BALANCE, createBalanceArgs(balanceName, hostIDs, propertiesMap)); return parseBalanceResults(result); } catch (org.apache.xmlrpc.XmlRpcException e) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.log.error("Could not communicate with the external scheduler while balancing", e); return null; } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.aaa.DirectoryUser> findUsers(java.util.List<org.ovirt.engine.core.common.utils.ExternalId> ids) { org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapReturnValueBase ldapResult = broker.runAdAction(AdActionType.GetAdUserByUserIdList, new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapSearchByUserIdListParameters(getName(), ids, false)); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.LdapUser> ldapUsers = ((java.util.List<org.ovirt.engine.core.common.businessentities.LdapUser>) (ldapResult.getReturnValue())); return mapUsers(ldapUsers); }
private static java.util.Map getData(java.net.HttpURLConnection connection) throws java.lang.Exception { try (java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream()) { try (java.io.InputStream input = connection.getInputStream()) { org.ovirt.engine.core.aaa.filters.FiltersHelper.copy(input, os); } java.lang.ClassLoader loader = java.lang.Thread.currentThread().getContextClassLoader(); java.lang.Thread.currentThread().setContextClassLoader(org.ovirt.engine.core.aaa.SSOOAuthServiceUtils.class.getClassLoader()); try { return new org.ovirt.engine.core.utils.serialization.json.JsonObjectDeserializer().deserialize(new java.lang.String(os.toByteArray(), java.nio.charset.StandardCharsets.UTF_8.name()), java.util.HashMap.class); } finally { java.lang.Thread.currentThread().setContextClassLoader(loader); } } }


@java.lang.Override public java.lang.String toString() { return (((super.toString()) + ", storage domain id=") + (getStorageDomainId())) + "}"; }
private boolean noChangesDetected() { return (((getNetworks().isEmpty()) && (getRemovedNetworks().isEmpty())) && (org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getParameters().getBonds().isEmpty())) && (getRemovedBonds().isEmpty()); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + (dbName.hashCode()); result = (prime * result) + (doneAt.hashCode()); return result; }
@org.junit.Test public void testVmsWithNoIsoAttached() { mockDomain(); doReturn(domain).when(cmd).getStorageDomain(); doReturn(vmStaticDao).when(cmd).getVmStaticDao(); when(vmStaticDao.getAllByStoragePoolId(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(java.util.Collections.<org.ovirt.engine.core.common.businessentities.VmStatic>emptyList()); assertTrue(cmd.isRunningVmsWithIsoAttached()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().isEmpty()); }
@java.lang.Override protected void executeVmCommand() { org.ovirt.engine.core.bll.VmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Failed to add VM. The reasons are: {}", java.lang.String.join(",", errorMessages)); return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } }

private void updateAddAndSelectHostAvailability(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> hosts, java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> availableHosts) { org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("AddHost", this); tempVar.setIsExecutionAllowed(((clusters.size()) > 0)); org.ovirt.engine.ui.uicommonweb.UICommand addHostAction = tempVar; if (hosts.isEmpty()) { addHostAction.setTitle(DataCenterConfigureHostsAction); getCompulsoryActions().add(addHostAction); } else { addHostAction.setTitle(DataCenterAddAnotherHostAction); getOptionalActions().add(addHostAction); } org.ovirt.engine.ui.uicommonweb.UICommand selectHostAction = new org.ovirt.engine.ui.uicommonweb.UICommand("SelectHost", this); selectHostAction.setIsChangeable(((availableHosts.size()) > 0)); selectHostAction.setIsExecutionAllowed(((availableHosts.size()) > 0)); if ((clusters.size()) > 0) { if (hosts.isEmpty()) { selectHostAction.setTitle(DataCenterSelectHostsAction); getCompulsoryActions().add(selectHostAction); } else { selectHostAction.setTitle(DataCenterSelectHostsAction); getOptionalActions().add(selectHostAction); } } }


protected boolean isImageExclusiveLockNeeded() { return ((getDiskType()) == (org.ovirt.engine.core.common.businessentities.storage.Disk.DiskStorageType.IMAGE)) && ((((org.ovirt.engine.core.common.businessentities.DiskImage) (getDisk())).getVolumeFormat()) != (org.ovirt.engine.core.common.businessentities.VolumeFormat.RAW)); }

private java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> getImagesToPreview() { if ((imagesToPreview) == null) { imagesToPreview = ((org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks()) != null) ? org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getParameters().getDisks() : org.ovirt.engine.core.bll.snapshots.TryBackToAllSnapshotsOfVmCommand.getDbFacade().getDiskImageDao().getAllSnapshotsForVmSnapshot(getDstSnapshot().getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> CinderImagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(imagesToPreview); imagesToPreview = org.ovirt.engine.core.bll.storage.disk.image.DisksFilter.filterImageDisks(imagesToPreview, org.ovirt.engine.core.bll.snapshots.ONLY_NOT_SHAREABLE, org.ovirt.engine.core.bll.snapshots.ONLY_SNAPABLE); imagesToPreview.addAll(CinderImagesToPreview); } return imagesToPreview; }

@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> getAll(org.ovirt.engine.core.compat.Guid userID, boolean isFiltered, org.ovirt.engine.core.common.businessentities.VmEntityType entityType) { return getCallsHandler().executeReadList("GetAllFromVmTemplates", org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("entity_type", entityType.name()).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }
private void handleNotLoggedInEvent(final java.lang.String errorMessage) { if ((errorMessage != null) && (errorMessage.equals("USER_IS_NOT_LOGGED_IN"))) { frontendNotLoggedInEvent.raise(org.ovirt.engine.ui.frontend.Frontend.class, EventArgs.Empty); } }

@org.junit.Test public void testFindMappingEntryEmptyInput() { final java.util.Optional<org.ovirt.engine.core.common.businessentities.network.ExternalVnicProfileMapping> actual = underTest.findMappingWithMatchingSourceProfile(org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.NETWORK_NAME, org.ovirt.engine.core.bll.exportimport.ExternalVnicProfileMappingFindTest.VNIC_PROFILE1_NAME, java.util.Collections.emptyList()); assertThat(actual, is(java.util.Optional.empty())); }


@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc diskReplicateStart(java.lang.String vmUUID, java.util.Map srcDisk, java.util.Map dstDisk) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.diskReplicateStart").withParameter("vmID", vmUUID).withParameter("srcDisk", srcDisk).withParameter("dstDisk", dstDisk).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
private boolean validateBondSlavesCount() { boolean returnValue = true; for (java.util.Map.Entry<java.lang.String, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>> bondEntry : bonds.entrySet()) { if ((bondEntry.getValue().size()) < 2) { returnValue = false; addViolation(VdcBllMessages.NETWORK_BONDS_INVALID_SLAVE_COUNT, bondEntry.getKey()); } } return returnValue; }
private static org.ovirt.engine.core.common.businessentities.VDSGroup cloneVDSGroup(org.ovirt.engine.core.common.businessentities.VDSGroup instance) { org.ovirt.engine.core.common.businessentities.VDSGroup obj = new org.ovirt.engine.core.common.businessentities.VDSGroup(); obj.setId(instance.getId()); obj.setName(instance.getName()); obj.setdescription(instance.getdescription()); obj.setComment(instance.getComment()); obj.setcpu_name(instance.getcpu_name()); obj.setcompatibility_version(instance.getcompatibility_version()); obj.setMigrateOnError(instance.getMigrateOnError()); obj.setTransparentHugepages(instance.getTransparentHugepages()); obj.setStoragePoolId(instance.getStoragePoolId()); obj.setmax_vds_memory_over_commit(instance.getmax_vds_memory_over_commit()); obj.setCountThreadsAsCores(instance.getCountThreadsAsCores()); return obj; }
@java.lang.Override protected void executeIrsBrokerCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.log.info("Executing GetVolumeInfo using the current SPM"); org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters params = new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getCurrentIrsProxyData().getCurrentVdsId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getImageGroupId(), org.ovirt.engine.core.vdsbroker.irsbroker.SPMGetVolumeInfoVDSCommand.getParameters().getImageId()); setVDSReturnValue(resourceManager.runVdsCommand(VDSCommandType.GetVolumeInfo, params)); }


public void init(org.ovirt.engine.core.common.businessentities.network.NetworkQoS qos) { if (qos == null) { networkQoS = new org.ovirt.engine.core.common.businessentities.network.NetworkQoS(); } else { networkQoS = qos; } if ((((networkQoS.getInboundAverage()) == null) || ((networkQoS.getInboundPeak()) == null)) || ((networkQoS.getInboundBurst()) == null)) { getInbound().getEnabled().setEntity(false); } else { getInbound().getAverage().setEntity(networkQoS.getInboundAverage()); getInbound().getPeak().setEntity(networkQoS.getInboundPeak()); getInbound().getBurst().setEntity(networkQoS.getInboundBurst()); } if ((((networkQoS.getOutboundAverage()) == null) || ((networkQoS.getOutboundPeak()) == null)) || ((networkQoS.getOutboundBurst()) == null)) { getOutbound().getEnabled().setEntity(false); } else { getOutbound().getAverage().setEntity(networkQoS.getOutboundAverage()); getOutbound().getPeak().setEntity(networkQoS.getOutboundPeak()); getOutbound().getBurst().setEntity(networkQoS.getOutboundBurst()); } }

private void updateAlerts(final org.ovirt.engine.ui.webadmin.section.main.presenter.tab.host.SubTabHostGeneralPresenter.ViewDef view, final org.ovirt.engine.ui.uicommonweb.models.hosts.HostGeneralModel model) { view.clearAlerts(); if (model.getHasUpgradeAlert()) { addTextAlert(view, messages.hostHasUpgradeAlert()); } if (model.getHasReinstallAlertNonResponsive()) { addTextAlert(view, messages.hostHasReinstallAlertNonResponsive()); } if (model.getHasReinstallAlertInstallFailed()) { addTextAndLinkAlert(view, messages.hostHasReinstallAlertInstallFailed(), model.getInstallCommand()); } if (model.getHasReinstallAlertMaintenance()) { addTextAndLinkAlert(view, messages.hostHasReinstallAlertMaintenance(), model.getInstallCommand()); } if (model.getHasNICsAlert()) { addTextAndLinkAlert(view, messages.hostHasNICsAlert(), model.getSaveNICsConfigCommand()); } if (model.getHasManualFenceAlert()) { addTextAlert(view, messages.hostHasManualFenceAlert()); } if (((org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper.getUiMode()) != (org.ovirt.engine.core.common.mode.ApplicationMode.GlusterOnly)) && (model.getHasNoPowerManagementAlert())) { addTextAndLinkAlert(view, messages.hostHasNoPowerManagementAlert(), model.getEditHostCommand()); } if ((model.getNonOperationalReasonEntity()) != null) { org.ovirt.engine.ui.uicompat.Translator translator = org.ovirt.engine.ui.uicompat.EnumTranslator.create(org.ovirt.engine.core.common.businessentities.NonOperationalReason.class); addTextAlert(view, translator.get(model.getNonOperationalReasonEntity())); } }
private void addSpecParamsColumn() { final org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmDevice> specParamsColumn = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumn<org.ovirt.engine.core.common.businessentities.VmDevice>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmDevice device) { return device.getSpecParams().toString(); } }; specParamsColumn.makeSortable(); getTable().addColumn(specParamsColumn, org.ovirt.engine.ui.common.widget.uicommon.vm.VmDevicesListModelTable.constants.deviceSpecParamsAlias(), "300px"); }
public abstract java.util.Map<java.lang.String, java.lang.Object> getVideoDeviceSpecParams(org.ovirt.engine.core.common.businessentities.VmBase vmBase);

public org.ovirt.engine.core.bll.ValidationResult vmNotHavingDeviceSnapshotsAttachedToOtherVms(boolean onlyPlugged) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> vmDisks = getDbFacade().getDiskDao().getAllForVm(vm.getId()); org.ovirt.engine.core.bll.ValidationResult result = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(vmDisks, true, false, true)).diskImagesSnapshotsNotAttachedToOtherVms(onlyPlugged); if (result != (org.ovirt.engine.core.bll.ValidationResult.VALID)) { return result; } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override protected boolean canDoAction() { boolean retValue = true; step = getStepDao().get(org.ovirt.engine.core.bll.EndExternalStepCommand.getParameters().getId()); if ((step) == null) { retValue = false; addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_NO_STEP); } else if (!(step.isExternal())) { retValue = false; addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_NOT_EXTERNAL); } else { job = getJobDao().get(step.getJobId()); if ((job) == null) { retValue = false; addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_NO_JOB); } if (!retValue) { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__END); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__EXTERNAL_STEP); } } return retValue; }
private void doDrag(com.google.gwt.event.dom.client.DragDropEventBase<?> event, boolean isDrop) { java.lang.String dragDropEventData = org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.getDragDropEventData(event, isDrop); java.lang.String type = org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.getType(dragDropEventData); java.lang.String data = org.ovirt.engine.ui.webadmin.section.main.view.popup.host.panels.NetworkItemPanel.getData(dragDropEventData); if (data != null) { if (setupModel.candidateOperation(data, type, null, null, isDrop)) { animatedPanel.getElement().addClassName(style.networkGroupDragOver()); event.preventDefault(); } } }
protected boolean canAddVm(java.util.ArrayList<java.lang.String> reasons, java.util.Collection<org.ovirt.engine.core.common.businessentities.StorageDomain> destStorages) { org.ovirt.engine.core.common.businessentities.VmStatic vmStaticFromParams = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData(); if (!(canAddVm(reasons, vmStaticFromParams.getName(), org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId(), vmStaticFromParams.getPriority()))) { return false; } if (!(validateCustomProperties(vmStaticFromParams, reasons))) { return false; } if (shouldCheckSpaceInStorageDomains()) { if (!(org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId().equals(getStoragePoolIdFromSourceImageContainer()))) { reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH.toString()); return false; } for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : destStorages) { org.ovirt.engine.core.bll.validator.StorageDomainValidator storageDomainValidator = new org.ovirt.engine.core.bll.validator.StorageDomainValidator(domain); if (!(validate(storageDomainValidator.isDomainExistAndActive()))) { return false; } } if (!(validateSpaceRequirements())) { return false; } } return isDedicatedVdsOnSameCluster(vmStaticFromParams); }
@org.junit.experimental.theories.Theory public void updateRepository_MIGRATION_FROM(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { initMocks(data, true); assumeNotNull(data.dbVm(), data.vdsmVm()); assumeTrue(((data.vdsmVm().getVmDynamic().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom))); verify(resourceManager, never()).internalSetVmStatus(data.dbVm().getDynamicData(), VMStatus.MigratingTo); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((addr) == null ? 0 : addr.hashCode()); result = (prime * result) + ((description) == null ? 0 : description.hashCode()); result = (prime * result) + ((gateway) == null ? 0 : gateway.hashCode()); result = (prime * result) + ((id) == null ? 0 : id.hashCode()); result = (prime * result) + ((name) == null ? 0 : name.hashCode()); result = (prime * result) + ((dataCenterId) == null ? 0 : dataCenterId.hashCode()); result = (prime * result) + (stp ? 1231 : 1237); result = (prime * result) + ((subnet) == null ? 0 : subnet.hashCode()); result = (prime * result) + ((type) == null ? 0 : type.hashCode()); result = (prime * result) + ((vlanId) == null ? 0 : vlanId.hashCode()); result = (prime * result) + (mtu); result = (prime * result) + (vmNetwork ? 11 : 13); result = (prime * result) + ((providedBy) == null ? 0 : providedBy.hashCode()); result = (prime * result) + ((label) == null ? 0 : label.hashCode()); return result; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("There is no active Storage Domain to create the Disk in. Please activate a Storage Domain.") java.lang.String thereIsNoActiveStorageDomainCreateDiskInMsg();
public org.ovirt.engine.core.common.businessentities.network lookupNetwork(org.ovirt.engine.core.compat.Guid id) { return lookupNetwork(id, null); }
public org.ovirt.engine.ui.uicommonweb.models.vms.VmInitModel getVmInit() { return privateVmInitModel; }
private boolean isUpdateRequired(org.ovirt.vdsmfake.domain.VM.VMStatus status) { return status == (VM.VMStatus.Up) ? true : status == (VM.VMStatus.PoweringDown) ? true : status == (VM.VMStatus.Paused) ? true : false; }

protected void removeFromExternalNetworks(java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> interfaces) { javax.transaction.Transaction transaction = org.ovirt.engine.core.utils.transaction.TransactionSupport.suspend(); for (org.ovirt.engine.core.common.businessentities.network.VmNic iface : interfaces) { new org.ovirt.engine.core.bll.network.ExternalNetworkManager(iface).deallocateIfExternal(); } org.ovirt.engine.core.utils.transaction.TransactionSupport.resume(transaction); }
public static org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType forValue(org.ovirt.engine.core.common.utils.VmDeviceType value) { org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType type; switch (value) { case DISK : case CDROM : case FLOPPY : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK; break; case INTERFACE : case BRIDGE : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.INTERFACE; break; case VIDEO : case CIRRUS : case QXL : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.VIDEO; break; case SOUND : case AC97 : case ICH6 : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.SOUND; break; case CONTROLLER : case USB : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.CONTROLLER; break; case BALLOON : case MEMBALLOON : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.BALLOON; break; case REDIR : case SPICEVMC : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.CHANNEL; break; case SMARTCARD : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.SMARTCARD; break; case WATCHDOG : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.WATCHDOG; break; default : type = org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.forValue(value.getName()); break; } return type; }

@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel item) { switch (item.getStatus()) { case Up : return getApplicationResources().vmStatusRunning(); case WaitForLaunch : case ImageLocked : case MigratingFrom : case MigratingTo : case PreparingForHibernate : case SavingState : return getApplicationResources().vmStatusWaiting(); case PoweringUp : case RebootInProgress : case RestoringState : return getApplicationResources().vmStatusStarting(); case Paused : case Suspended : return getApplicationResources().vmStatusPaused(); case Unknown : return getApplicationResources().vmStatusUnknown(); case Unassigned : case ImageIllegal : case Down : case NotResponding : case PoweredDown : return getApplicationResources().vmStatusStopped(); case PoweringDown : return getApplicationResources().vmStatusStopping(); default : return getApplicationResources().vmStatusUnknown(); } }
@java.lang.Override public org.ovirt.engine.api.model.Tag update(org.ovirt.engine.api.model.Tag incoming) { if (parent.isSetParentName(incoming)) { incoming.getParent().getTag().setId(parent.getParentId(incoming)); } if (isSetParent(incoming)) { moveTag(asGuid(incoming.getParent().getTag().getId())); } return performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetTagByTagId, org.ovirt.engine.core.common.queries.GetTagByTagIdParameters.class), VdcActionType.UpdateTag, new org.ovirt.engine.api.restapi.resource.BackendTagResource.UpdateParametersProvider()); }

@java.lang.Override protected boolean validate() { if ((((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return failValidation(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } return super.validate(); }






@org.jboss.arquillian.container.test.api.Deployment public static org.jboss.shrinkwrap.api.spec.JavaArchive createDeployment() { return org.jboss.shrinkwrap.api.ShrinkWrap.create(org.jboss.shrinkwrap.api.spec.JavaArchive.class).addClasses(org.ovirt.engine.core.bll.scheduling.CommonTestMocks.class, org.ovirt.engine.core.bll.scheduling.SchedulingManager.class, org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.class, org.ovirt.engine.core.bll.scheduling.BasicMigrationHandler.class).addAsManifestResource(EmptyAsset.INSTANCE, org.jboss.shrinkwrap.api.ArchivePaths.create("beans.xml")); }

private void createSnapshotsForDisks(org.ovirt.engine.core.compat.Guid vmSnapshotId) { for (org.ovirt.engine.core.common.businessentities.DiskImage image : getDisksList()) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.CreateSnapshot, buildCreateSnapshotParameters(image, vmSnapshotId), org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getExecutionContext())); if (vdcReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList()); } else { throw new org.ovirt.engine.core.common.errors.VdcBLLException(vdcReturnValue.getFault().getError(), "CreateAllSnapshotsFromVmCommand::executeVmCommand: Failed to create snapshot!"); } } }
@org.junit.Test public void canDoPass() { when(hostedEngineHelper.getStorageDomain()).thenReturn(null); org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain(); int i = new java.util.Random().nextInt(SUPPORTED_DOMAIN_TYPES.length); sd.setStorageType(org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.SUPPORTED_DOMAIN_TYPES[i]); sd.setStorageName(org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommandTest.HOSTED_STORAGE_NAME); doReturn(createQueryReturnValueWith(java.util.Arrays.asList(sd))).when(backend).runInternalQuery(eq(VdcQueryType.GetExistingStorageDomainList), any(org.ovirt.engine.core.common.queries.VdcQueryParametersBase.class)); assertTrue(cmd.canDoAction()); }




private void preview() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getEntity())); if (vm == null) { return; } org.ovirt.engine.core.common.businessentities.Snapshot snapshot = ((org.ovirt.engine.core.common.businessentities.Snapshot) (getSelectedItem())); if ((!(isMemorySnapshotSupported())) || (snapshot.getMemoryVolume().isEmpty())) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId()), null); } else { org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.SnapshotModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().previewSnapshotTitle()); model.setHelpTag(HelpTag.preview_snapshot); model.setHashName("preview_snapshot"); addCommands(model, "OnPreview"); } }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__CLUSTER_POLICY); }
@org.junit.Test public void testHasUniqueNamePersistingNewRecordWithNullIdAndSameName() throws java.lang.Exception { final java.lang.String macPoolName = "macPool1"; assertThat(callHasUniqueName(org.ovirt.engine.core.compat.Guid.newGuid(), null, macPoolName, macPoolName), failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED)); }
public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc setMaxHosts(int maxHosts) { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = irsServer.setMaxHosts(maxHosts); org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(xmlRpcReturnValue); return wrapper; }
@org.junit.Test public void testGetEntityNameByIdAndTypeForRole() { org.ovirt.engine.core.common.businessentities.roles role = dbFacade.getRoleDAO().get(org.ovirt.engine.core.dao.DbFacadeDAOTest.ROLE_ID); assertNotNull(role); java.lang.String name = role.getname(); assertTrue(name.equals(dbFacade.getEntityNameByIdAndType(org.ovirt.engine.core.dao.DbFacadeDAOTest.ROLE_ID, VdcObjectType.Role))); }
protected org.ovirt.engine.core.compat.Guid removeMemoryImage(java.util.List<org.ovirt.engine.core.compat.Guid> guids) { org.ovirt.engine.core.compat.Guid taskId1 = enclosingCommand.persistAsyncTaskPlaceHolder(VmCommand.DELETE_PRIMARY_IMAGE_TASK_KEY); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsRetValue = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.DeleteImageGroup, buildDeleteMemoryImageParams(guids)); if (!(vdsRetValue.getSucceeded())) { return null; } org.ovirt.engine.core.compat.Guid guid1 = enclosingCommand.createTask(taskId1, vdsRetValue.getCreationInfo(), enclosingCommand.getActionType(), VdcObjectType.Storage, guids.get(0)); enclosingCommand.getTaskIdList().add(guid1); return guid1; }
@java.lang.Override protected boolean canDoAction() { return !(isDiskLun()); }
@org.junit.Before public void setUp() throws java.lang.Exception { setUpMockQueryParameters(); setUpSpyQuery(); }
protected byte[] runHttpMethod(org.ovirt.engine.core.bll.provider.BaseProviderProxy.HttpMethodType httpMethod, java.lang.String contentType, java.lang.String relativeUrl, java.lang.String body, java.net.HttpURLConnection connection) { byte[] result = null; try { connection.setRequestProperty("Content-Type", contentType); connection.setDoInput(true); connection.setDoOutput((httpMethod != (org.ovirt.engine.core.bll.provider.BaseProviderProxy.HttpMethodType.GET))); connection.setRequestMethod(httpMethod.toString()); if (body != null) { byte[] bytes = body.getBytes(java.nio.charset.Charset.forName("UTF-8")); connection.setRequestProperty("Content-Length", new java.lang.StringBuilder().append(bytes.length).toString()); try (java.io.OutputStream outputStream = connection.getOutputStream()) { outputStream.write(bytes); } } result = getResponse(connection); } catch (javax.net.ssl.SSLException e) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.PROVIDER_SSL_FAILURE, e.getMessage()); } catch (java.io.IOException e) { org.ovirt.engine.core.bll.provider.BaseProviderProxy.handleException(e); } finally { if (connection != null) { connection.disconnect(); } } return result; }
@java.lang.Override protected void EndSuccessfully() { org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.EndActionOnDisks(); if ((org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getVm()) != null) { org.ovirt.engine.core.bll.VmHandler.unlockVm(org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getVm().getDynamicData(), org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getCompensationContext()); getSnapshotDao().updateStatus(org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getParameters().getDstSnapshotId(), SnapshotStatus.IN_PREVIEW); getSnapshotDao().updateStatus(getSnapshotDao().getId(org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getVm().getId(), SnapshotType.PREVIEW, SnapshotStatus.LOCKED), SnapshotStatus.OK); snapshotsManager.attempToRestoreVmConfigurationFromSnapshot(org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getVm(), getSnapshotDao().get(org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getParameters().getDstSnapshotId()), getSnapshotDao().getId(org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getVm().getId(), SnapshotType.ACTIVE), org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getCompensationContext()); UpdateVmInSpm(org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getVm().getstorage_pool_id(), java.util.Arrays.asList(org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getVm())); } else { org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.setCommandShouldBeLogged(false); log.warn("VmCommand::EndVmCommand: Vm is null - not performing EndAction on Vm"); } org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.setSucceeded(true); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (ev.matchesDefinition(RegistrationResult.RetrievedEventDefinition)) { asyncResult_Retrieved(); } if (ev.matchesDefinition(ProvideTickEvent.definition)) { syncSearch(); } }

@org.junit.Test public void removeAllRemovesFromMacPoolAlso() { runRemoveAllAndVerify(true, times(1)); }
@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); addCanDoActionMessage(EngineMessage.VAR__ACTION__START); }

@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { getView().selectSpiceImplementation(SpiceConsoleModel.ClientConsoleMode.Auto); }

@java.lang.Override protected void verify(org.ovirt.engine.api.model.VmPool model, org.ovirt.engine.api.model.VmPool transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getName(), transform.getName()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getSize(), transform.getSize()); assertNotNull(transform.getCluster()); assertEquals(model.getCluster().getId(), transform.getCluster().getId()); }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.VnicProfileValidator validator = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.createVnicProfileValidator(); boolean useDefaultNetworkFilterId = org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getParameters().isUseDefaultNetworkFiterId(); return (((((((((validate(validator.vnicProfileIsSet())) && (validate(validator.networkExists()))) && (validate(validator.networkQosExistsOrNull()))) && (validate(validator.vnicProfileForVmNetworkOnly()))) && (validate(validator.vnicProfileNameNotUsed()))) && (validate(validator.portMirroringNotSetIfExternalNetwork()))) && (validator.validateCustomProperties(org.ovirt.engine.core.bll.network.vm.AddVnicProfileCommand.getReturnValue().getValidationMessages()))) && (validate(validator.passthroughProfileContainsSupportedProperties(useDefaultNetworkFilterId)))) && (validate(validator.validUseDefaultNetworkFilterFlag(useDefaultNetworkFilterId)))) && (validate(validator.validNetworkFilterId())); }

@java.lang.Override public void init(javax.servlet.ServletConfig config) throws javax.servlet.ServletException { super.init(config); type = config.getInitParameter(org.ovirt.engine.core.FileServlet.TYPE); final java.lang.String name = config.getInitParameter(org.ovirt.engine.core.FileServlet.FILE); if (name == null) { final java.lang.String message = ("Can\'t get base name from parameter \"" + (org.ovirt.engine.core.FileServlet.FILE)) + "\"."; org.ovirt.engine.core.FileServlet.log.error(message); throw new javax.servlet.ServletException(message); } base = new java.io.File(name); }

@org.junit.Before public void setup() { mockVmPropertiesUtils(); mockIsoDomainListSyncronizer(); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Change CD") java.lang.String changeCDTitle();

@org.junit.Test public void searchNotUsingTags() { java.lang.String[] searchTexts = new java.lang.String[]{ "Hosts:", "Vms:", "Datacenters:", "Clusters:" }; for (java.lang.String searchText : searchTexts) { assertFalse(new org.ovirt.engine.core.searchbackend.SyntaxChecker().analyzeSyntaxState(searchText, false).isSearchUsingTags()); } }
com.google.gwt.user.client.ui.Grid createRow(final org.ovirt.engine.ui.uicommonweb.models.hosts.HostVLan hostVLan) { com.google.gwt.user.client.ui.Grid row = new com.google.gwt.user.client.ui.Grid(1, 3); row.getColumnFormatter().setWidth(0, org.ovirt.engine.ui.webadmin.widget.host.VLanPanel.CHECK_BOX_COLUMN_WIDTH); row.getColumnFormatter().setWidth(1, org.ovirt.engine.ui.webadmin.widget.host.VLanPanel.NETWORK_NAME_COLUMN_WIDTH); row.getColumnFormatter().setWidth(2, org.ovirt.engine.ui.webadmin.widget.host.VLanPanel.ADDRESS_COLUMN_WIDTH); row.setWidth("100%"); row.setHeight("100%"); com.google.gwt.dom.client.Style gridStyle = row.getElement().getStyle(); gridStyle.setBorderColor("white"); gridStyle.setBorderWidth(1, Unit.PX); gridStyle.setBorderStyle(BorderStyle.SOLID); com.google.gwt.user.client.ui.HorizontalPanel chekboxPanel = new com.google.gwt.user.client.ui.HorizontalPanel(); chekboxPanel.setWidth("100%"); if (isSelectionAvailable) { chekboxPanel.add(getCheckBox()); } chekboxPanel.add(new com.google.gwt.user.client.ui.Image(org.ovirt.engine.ui.webadmin.widget.host.VLanElementPanel.resources.splitRotateImage())); chekboxPanel.add(new com.google.gwt.user.client.ui.Label(new org.ovirt.engine.ui.webadmin.widget.renderer.HostVLanNameRenderer().render(hostVLan))); row.setWidget(0, 0, chekboxPanel); com.google.gwt.user.client.ui.Label networkName = new com.google.gwt.user.client.ui.Label(hostVLan.getNetworkName()); if (hostVLan.getInterface().getIsManagement()) { networkName.getElement().getStyle().setFontWeight(FontWeight.BOLD); networkName.setText(("* " + (hostVLan.getNetworkName()))); } row.setWidget(0, 1, networkName); row.setWidget(0, 2, new com.google.gwt.user.client.ui.Label(hostVLan.getAddress())); return row; }
private static java.util.Properties loadPropertiesFromFile(java.lang.String filename) { try (java.io.FileReader reader = new java.io.FileReader(new java.io.File(filename))) { java.util.Properties p = new java.util.Properties(); p.load(reader); org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.LOG.trace("read properties from {}:", filename); for (java.util.Map.Entry<java.lang.Object, java.lang.Object> e : p.entrySet()) { org.ovirt.engine.extension.aaa.jdbc.binding.cli.Cli.LOG.trace("{}=>{}", e.getKey(), e.getValue()); } return p; } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(("Could not read properties from: " + filename), e); } }
private void addPluginActionButtons(java.util.List<org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?>> pluginActionButtonList) { if ((getTable()) != null) { for (org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<?> buttonDef : pluginActionButtonList) { getTable().addActionButton(((org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition) (buttonDef))); } } }
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { getView().selectSpiceImplementation(SpiceConsoleModel.ClientConsoleMode.Native); }

@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((balance) == null ? 0 : balance.hashCode()); result = (prime * result) + (defaultPolicy ? 1231 : 1237); result = (prime * result) + ((description) == null ? 0 : description.hashCode()); result = (prime * result) + ((filterPositionMap) == null ? 0 : filterPositionMap.hashCode()); result = (prime * result) + ((filters) == null ? 0 : filters.hashCode()); result = (prime * result) + ((functions) == null ? 0 : functions.hashCode()); result = (prime * result) + ((id) == null ? 0 : id.hashCode()); result = (prime * result) + (locked ? 1231 : 1237); result = (prime * result) + ((name) == null ? 0 : name.hashCode()); result = (prime * result) + ((parameterMap) == null ? 0 : parameterMap.hashCode()); return result; }

@java.lang.SuppressWarnings("unchecked") public static <P extends org.ovirt.engine.core.common.action.VdcActionParametersBase> org.ovirt.engine.core.bll.CommandBase<P> CreateCommand(org.ovirt.engine.core.common.action.VdcActionType action, P parameters) { try { java.lang.reflect.Constructor<org.ovirt.engine.core.bll.CommandBase<? extends org.ovirt.engine.core.common.action.VdcActionParametersBase>> constructor = org.ovirt.engine.core.bll.CommandsFactory.findCommandConstructor(org.ovirt.engine.core.bll.CommandsFactory.getCommandClass(action.name(), org.ovirt.engine.core.bll.CommandsFactory.CommandSuffix), parameters.getClass()); return ((org.ovirt.engine.core.bll.CommandBase<P>) (constructor.newInstance(new java.lang.Object[]{ parameters }))); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.CommandsFactory.log.error((("CommandsFactory [parameter: VdcActionParametersBase]: Failed to get type information using " + "reflection for Action: ") + action), e); return null; } }
public void setActiveDetailModel(org.ovirt.engine.ui.uicommonweb.models.EntityModel value) { if ((activeDetailModel) != value) { activeDetailModelChanging(value, getActiveDetailModel()); activeDetailModel = value; activeDetailModelChanged(); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("ActiveDetailModel")); } }
protected boolean setAndValidateCpuProfile() { org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getStaticData().setVdsGroupId(org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroupId()); org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getStaticData().setCpuProfileId(org.ovirt.engine.core.bll.ImportVmCommandBase.getParameters().getCpuProfileId()); return validate(org.ovirt.engine.core.bll.profiles.CpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getStaticData(), org.ovirt.engine.core.bll.ImportVmCommandBase.getVdsGroup().getCompatibilityVersion())); }



@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { deactivate(); java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); getModel().setRngDevice(rngDevice); } activate(); updateVirtioScsi(vmBase); }
@java.lang.SuppressWarnings("unchecked") @org.junit.Test public void testRetryWithException() throws java.lang.Exception { java.util.concurrent.Callable<java.lang.Object> callable = mock(java.util.concurrent.Callable.class); org.ovirt.vdsm.jsonrpc.client.utils.retry.RetryPolicy policy = new org.ovirt.vdsm.jsonrpc.client.utils.retry.RetryPolicy(5, 3, 10, java.io.IOException.class); org.ovirt.vdsm.jsonrpc.client.utils.retry.Retryable<java.lang.Object> retryable = new org.ovirt.vdsm.jsonrpc.client.utils.retry.Retryable(callable, policy); stub(callable.call()).toThrow(new java.io.IOException()).toThrow(new java.io.IOException()).toReturn(new java.lang.Object()); retryable.call(); verify(callable, times(3)).call(); }


@java.lang.Override protected void SyncSearch() { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (getEntity())); if (diskImage == null) { return; } org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableListModel = ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (model)); searchableListModel.setItems(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); } }; org.ovirt.engine.core.common.queries.GetImageByImageIdParameters getImageByImageIdParameters = new org.ovirt.engine.core.common.queries.GetImageByImageIdParameters(diskImage.getImageId()); getImageByImageIdParameters.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetStorageDomainsByImageId, getImageByImageIdParameters, _asyncQuery); setIsQueryFirstTime(false); }
private boolean storageDomainStatusIsValid() { boolean returnValue; if (org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand.isInternalExecution()) { returnValue = checkStorageDomainStatus(StorageDomainStatus.Inactive, StorageDomainStatus.Unknown, StorageDomainStatus.Locked, StorageDomainStatus.Maintenance, StorageDomainStatus.PreparingForMaintenance); } else { returnValue = checkStorageDomainStatus(StorageDomainStatus.Inactive, StorageDomainStatus.Unknown, StorageDomainStatus.Maintenance, StorageDomainStatus.PreparingForMaintenance); } return returnValue; }

@org.junit.Test public void canDoActionFailsOnServerNotUp() { cmd = spy(new org.ovirt.engine.core.bll.gluster.RemoveGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); setUpMocksForRemove(true, getHookEntity(), VDSStatus.Down); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP.toString())); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Description") java.lang.String descriptionAffinityGroup();

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Play") java.lang.String playSpiceConsole();

public java.lang.String getMac() { return mac; }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append("NetworkCluster {id=").append(getId()).append(", status=").append(getStatus()).append(", display=").append(isDisplay()).append(", required=").append(isRequired()).append(", migration=").append(isMigration()).append(", management=").append(isManagement()).append(", gluster=").append(isGluster()).append("}"); return builder.toString(); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> getAllWithoutIcon() { return getCallsHandler().executeReadList("GetVmStaticWithoutIcon", org.ovirt.engine.core.dao.VmStaticDAODbFacadeImpl.getRowMapper(), getCustomMapSqlParameterSource()); }
public void warnOnActiveVm() { if (activeVmAttachedToClusterPredicate.evaluate(networkCluster.getClusterId())) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase loggable = createLoggable(); commandBase.auditLog(loggable, AuditLogType.NETWORK_UPDATE_DISPLAY_FOR_CLUSTER_WITH_ACTIVE_VM); } }
private org.ovirt.engine.core.compat.Guid getQuotaId() { return AddVmCommand.getParameters().getVmStaticData().getQuotaId(); }
@java.lang.Override protected void executeCommand() { initPoolUser(); boolean isPrestartedVm = false; org.ovirt.engine.core.compat.Guid vmToAttach; org.ovirt.engine.core.utils.lock.EngineLock vmLock; synchronized(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand._lockObject) { while (true) { vmToAttach = getPrestartedVmToAttach(); if (!(Guid.Empty.equals(vmToAttach))) { isPrestartedVm = true; } else { vmToAttach = getNonPrestartedVmToAttach(); } if (Guid.Empty.equals(vmToAttach)) { log.info("No free Vms in pool '{}'. Cannot allocate for user '{}'", org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPoolId(), getAdUserId()); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.NO_FREE_VM_IN_POOL); } vmLock = createEngineLockForRunVm(vmToAttach); if (acquireLock(vmLock)) { break; } else { lockedVms.add(vmToAttach); } } org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().setEntityInfo(new org.ovirt.engine.core.common.asynctasks.EntityInfo(org.ovirt.engine.core.common.VdcObjectType.VM, vmToAttach)); setVmId(vmToAttach); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = attachUserToVm(vmToAttach); if (!(vdcReturnValue.getSucceeded())) { log.info("Failed to give user '{}' permission to Vm '{}'", getAdUserId(), vmToAttach); setActionReturnValue(vdcReturnValue); releaseLock(vmLock); return; } else { log.info("Succeeded giving user '{}' permission to Vm '{}'", getAdUserId(), vmToAttach); } } if (!isPrestartedVm) { setVm(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmDao().get(vmToAttach)); org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runVm(vmToAttach, vmLock); setSucceeded(vdcReturnValue.getSucceeded()); setActionReturnValue(vmToAttach); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue().getVdsmTaskIdList().addAll(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getReturnValue().getInternalVdsmTaskIdList()); } else { setActionReturnValue(vmToAttach); org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.setSucceeded(true); releaseLock(vmLock); } }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append("LUNs [id=").append(getLUN_id()).append(", physicalVolumeId=").append(getphysical_volume_id()).append(", volumeGroupId=").append(getvolume_group_id()).append(", serial=").append(getSerial()).append(", lunMapping=").append(getLunMapping()).append(", vendorId=").append(getVendorId()).append(", productId=").append(getProductId()).append(", _lunConnections=").append(getLunConnections()).append(", deviceSize=").append(getDeviceSize()).append(", vendorName=").append(getVendorName()).append(", pathsDictionary=").append(getPathsDictionary()).append(", lunType=").append(getLunType()).append(", status=").append(getStatus()).append(", diskId=").append(getDiskId()).append(", diskAlias=").append(getDiskAlias()).append(", storageDomainId=").append(getStorageDomainId()).append(", storageDomainName=").append(getStorageDomainName()).append("]"); return builder.toString(); }
@java.lang.Override public void setEntity(java.lang.Object value) { super.setEntity((value == null ? null : ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportTemplateData) (value)).getTemplate())); }
private java.util.List<java.lang.String> getMountPointsFilter() { return java.util.Arrays.asList(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.GlusterStorageDeviceListMountPointsToIgore).split(",")); }
@org.junit.Test public void testGetByNameWithInvalidName() { org.ovirt.engine.core.common.businessentities.bookmarks result = dao.getByName("thisnameisinvalid"); assertNull(result); }
byte[] digestFile(java.io.File file) throws java.io.FileNotFoundException, java.io.IOException { java.security.MessageDigest digest; try { digest = java.security.MessageDigest.getInstance("MD5"); } catch (java.security.NoSuchAlgorithmException e) { throw new java.lang.RuntimeException(e); } java.io.InputStream is = new java.io.FileInputStream(file); byte[] buffer = new byte[1024]; int n; while ((n = is.read(buffer)) != (-1)) { digest.update(buffer, 0, n); } return digest.digest(); }
private void saveIllegalDisk(final org.ovirt.engine.core.common.businessentities.DiskImage diskImage) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { diskImage.setImageId(org.ovirt.engine.core.compat.Guid.NewGuid()); diskImage.setId(org.ovirt.engine.core.compat.Guid.NewGuid()); diskImage.setParentId(Guid.Empty); diskImage.setit_guid(Guid.Empty); org.ovirt.engine.core.bll.ImagesHandler.setDiskAlias(diskImage, getVm()); org.ovirt.engine.core.bll.ImagesHandler.addDiskImage(diskImage, getVmId()); return null; } }); }


public static java.lang.String GenerateOTP() { java.security.SecureRandom secr = new java.security.SecureRandom(); byte[] arrRandom = new byte[9]; secr.nextBytes(arrRandom); return org.apache.commons.codec.binary.Base64.encodeBase64String(arrRandom); }


@org.ovirt.engine.ui.uicompat.DefaultStringValue("Disks already exist on all available Storage Domains.") java.lang.String disksAlreadyExistMsg();
@org.junit.Test public void testInterfaceIsValidSlaveWhenInterfaceIsBond() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName(); vdsNetworkInterface.setBonded(true); assertThat(new org.ovirt.engine.core.bll.validator.HostInterfaceValidator(vdsNetworkInterface).interfaceIsValidSlave(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.NETWORK_INTERFACE_BOND_OR_VLAN_CANNOT_BE_SLAVE)); }
@org.junit.Test public void testDiskImageWithSgioCantBeAdded() { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = org.ovirt.engine.core.bll.AddDiskCommandTest.createVirtIoScsiDiskImage(); disk.setSgio(ScsiGenericIO.UNFILTERED); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(disk); org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId, parameters); mockStorageDomain(storageId); mockStoragePoolIsoMap(); org.ovirt.engine.core.common.businessentities.VM vm = mockVm(); vm.setVdsGroupCompatibilityVersion(Version.v3_3); mockMaxPciSlots(); org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator = spyDiskValidator(disk); doReturn(true).when(diskValidator).isVirtioScsiControllerAttached(any(org.ovirt.engine.core.compat.Guid.class)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.SCSI_GENERIC_IO_IS_NOT_SUPPORTED_FOR_IMAGE_DISK); }
private void confirmUnplug() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().deactivateVmDisksTitle()); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().areYouSureYouWantDeactivateVMDisksMsg()); model.setHashName("deactivate_vm_disk"); setWindow(model); java.util.ArrayList<java.lang.String> items = new java.util.ArrayList<java.lang.String>(); for (java.lang.Object selected : getSelectedItems()) { items.add(((org.ovirt.engine.core.common.businessentities.Disk) (selected)).getDiskAlias()); } model.setItems(items); org.ovirt.engine.ui.uicommonweb.UICommand unPlug = new org.ovirt.engine.ui.uicommonweb.UICommand("OnUnplug", this); unPlug.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); unPlug.setIsDefault(true); model.getCommands().add(unPlug); org.ovirt.engine.ui.uicommonweb.UICommand cancel = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); cancel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); cancel.setIsCancel(true); model.getCommands().add(cancel); }
@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER) == (event.getNativeEvent().getKeyCode())) { if (ctx.canSetInModel()) { ctx.setInModel(editor.getValue()); } } }
@java.lang.Override public boolean validate(org.ovirt.engine.core.config.entity.ConfigKey key, java.lang.String value) { return value == null ? false : !(value.isEmpty()); }
@org.junit.Test public void validateVmMemoryCantStartOnVdsHighPendingSwapSmall() { vds.setSwapFree(60L); boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasPhysMemoryToRunVM(vds, vm, 65); assertEquals(vmPassedMemoryRequirement, true); }

private void copy() { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> disks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>) (getSelectedItems())); if (disks == null) { return; } if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.templates.CopyDiskModel model = new org.ovirt.engine.ui.uicommonweb.models.templates.CopyDiskModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().copyDisksTitle()); model.setHashName("copy_disk"); model.setEntity(this); model.init(disks); model.startProgress(null); }
private java.lang.String decodeDiskProperty(java.lang.String diskProperty) throws org.apache.commons.codec.DecoderException { return new java.lang.String(org.apache.commons.codec.binary.Hex.decodeHex(diskProperty.toCharArray()), org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.CHARSET); }



@java.lang.Override public void onBootstrap() { user.setLogoutHandler(this); initUiCommon(); initFrontend(); initLoginModel(); org.ovirt.engine.ui.common.auth.AutoLoginData autoLoginData = org.ovirt.engine.ui.common.auth.AutoLoginData.instance(); if (autoLoginData != null) { handleAutoLogin(autoLoginData); } }

private void displayProtocol_SelectedItemChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.models.EntityModel entityModel = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (getDisplayProtocol().getSelectedItem())); if (entityModel == null) { return; } org.ovirt.engine.core.common.businessentities.DisplayType type = ((org.ovirt.engine.core.common.businessentities.DisplayType) (entityModel.getEntity())); if (type == (org.ovirt.engine.core.common.businessentities.DisplayType.vnc)) { getUsbPolicy().setSelectedItem(org.ovirt.engine.core.common.businessentities.UsbPolicy.DISABLED); getIsSmartcardEnabled().setEntity(false); } getUsbPolicy().setIsChangable((type == (org.ovirt.engine.core.common.businessentities.DisplayType.qxl))); getIsSmartcardEnabled().setIsChangable((type == (org.ovirt.engine.core.common.businessentities.DisplayType.qxl))); getVncKeyboardLayout().setIsAvailable((type == (org.ovirt.engine.core.common.businessentities.DisplayType.vnc))); updateNumOfMonitors(); }
private void hotSetMemory(int newAmountOfMemory) { int currentMemory = org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getMemSizeMb(); if (((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Up)) && (currentMemory != newAmountOfMemory)) { org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters params = new org.ovirt.engine.core.common.action.HotSetAmountOfMemoryParameters(newVmStatic, (currentMemory < newAmountOfMemory ? org.ovirt.engine.core.common.action.PlugAction.PLUG : org.ovirt.engine.core.common.action.PlugAction.UNPLUG), 0); org.ovirt.engine.core.common.action.VdcReturnValueBase setAmountOfMemoryResult = runInternalAction(VdcActionType.HotSetAmountOfMemory, params, org.ovirt.engine.core.bll.UpdateVmCommand.cloneContextAndDetachFromParent()); newVmStatic.setMemSizeMb((setAmountOfMemoryResult.getSucceeded() ? newAmountOfMemory : currentMemory)); hotSetMemlog(params, setAmountOfMemoryResult); } }

@java.lang.Override public java.lang.String toString() { return java.lang.String.format("%s, deviceList = %s", super.toString(), getDeviceList()); }
@java.lang.SuppressWarnings("rawtypes") @java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc updateVmPolicy(java.util.Map params) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.updateVmPolicy").withParameter("vmID", ((java.lang.String) (params.get("vmId")))).withParameter("params", params).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Reports Webapp deployment is in progress, please try again in a few minutes.") java.lang.String reportsWebAppNotDeployedMsg();
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("OnTimer") public void OnTimer(org.ovirt.engine.core.compat.Guid domainId) { synchronized(_lockObject) { if (_domainsInProblem.containsKey(domainId)) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.info(("starting ProcessDomainRecovery for domain " + domainId)); ProcessDomainRecovery(domainId); } _timers.remove(domainId); } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Edit") java.lang.String editVolume();

@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Snapshot>(); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.Permissions.class, to = org.ovirt.engine.api.model.Permission.class) public static org.ovirt.engine.api.model.Permission map(org.ovirt.engine.core.common.businessentities.Permissions entity, org.ovirt.engine.api.model.Permission template) { org.ovirt.engine.api.model.Permission model = (template != null) ? template : new org.ovirt.engine.api.model.Permission(); model.setId(entity.getId().toString()); if ((entity.getRoleId()) != null) { model.setRole(new org.ovirt.engine.api.model.Role()); model.getRole().setId(entity.getRoleId().toString()); } if (((entity.getAdElementId()) != null) && ((template == null) || (!(template.isSetGroup())))) { model.setUser(new org.ovirt.engine.api.model.User()); model.getUser().setId(entity.getAdElementId().toString()); } if ((entity.getObjectId()) != null) { org.ovirt.engine.api.restapi.types.PermissionMapper.setObjectId(model, entity); } return model; }

@org.junit.Test public void testStartWithVnc() throws java.lang.Exception { setUpWindowsGetEntityExpectations(1, false); setUriInfo(setUpActionExpectations(VdcActionType.RunVmOnce, org.ovirt.engine.core.common.action.RunVmOnceParams.class, new java.lang.String[]{ "VmId", "UseVnc" }, new java.lang.Object[]{ GUIDS[0], java.lang.Boolean.TRUE })); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setVm(new org.ovirt.engine.api.model.VM()); action.getVm().setDisplay(new org.ovirt.engine.api.model.Display()); action.getVm().getDisplay().setType(DisplayType.VNC.value()); verifyActionResponse(resource.start(action)); }

public org.ovirt.engine.core.bll.ValidationResult validate() { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = getAttachmentsToConfigure(); org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; vr = (skipValidation(vr)) ? vr : validNewOrModifiedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validRemovedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedBonds(); vr = (skipValidation(vr)) ? vr : validRemovedBonds(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : attachmentsDontReferenceSameNetworkDuplicately(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : networksUniquelyConfiguredOnHost(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateNetworkExclusiveOnNics(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NetworkMtuValidator(networkBusinessEntityMap).validateMtu(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateCustomProperties(); return vr; }

@java.lang.Override public final void run() { org.ovirt.engine.ui.uicommonweb.models.GridTimer.logger.fine((("GridTimer[" + (name)) + "].run() called")); if ((repetitions) > 0) { (repetitions)--; } else if ((repetitions) == 0) { cycleRate(); } org.ovirt.engine.ui.uicommonweb.models.GridTimer.logger.fine(((((((("GridTimer[" + (name)) + "] Executing! Current Rate: ") + (rateCycle[currentRate])) + ":") + (getRefreshRate())) + " Reps: ") + (repetitions))); execute(); }
private static org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator mockStorageDomainValidatorWithoutSpace() { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = org.ovirt.engine.core.bll.MoveOrCopyDiskCommandTest.mockStorageDomainValidator(); when(storageDomainValidator.hasSpaceForClonedDisk(any(org.ovirt.engine.core.common.businessentities.storage.DiskImage.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)); return storageDomainValidator; }
@java.lang.Override public void setEntityId(org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable) { logable.setStoragePoolId(_oldStoragePool.getId()); }



@java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.ExecuteCommand(command); if (command == (getNewCommand())) { New(); } else if (command == (getEditCommand())) { Edit(); } else if (command == (getRemoveCommand())) { Remove(); } else if (command == (getMoveCommand())) { Move(); } else if (command == (getCopyCommand())) { Copy(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnSave")) { OnSave(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnForceSave")) { OnForceSave(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "Cancel")) { Cancel(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "CancelConfirm")) { CancelConfirm(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnRemove")) { OnRemove(); } else if (command == (getChangeQuotaCommand())) { changeQuota(); } else if (command.getName().equals("onChangeQuota")) { onChangeQuota(); } }

private static void getDefaultConfigurationVersion(java.lang.Object target) { org.ovirt.engine.ui.frontend.AsyncQuery callback = new org.ovirt.engine.ui.frontend.AsyncQuery(target, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { if (returnValue != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider._defaultConfigurationVersion = ((java.lang.String) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); } else { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider._defaultConfigurationVersion = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GENERAL; } org.ovirt.engine.ui.uicommonweb.models.LoginModel loginModel = ((org.ovirt.engine.ui.uicommonweb.models.LoginModel) (model)); loginModel.getLoggedInEvent().raise(loginModel, EventArgs.Empty); } }); callback.setHandleFailure(true); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetDefaultConfigurationVersion, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), callback); }



@org.junit.Test public void testActionWithCorrelationId() throws java.lang.Exception { setUpGetEntityExpectations(false, false); expect(httpHeaders.getRequestHeader("Correlation-Id")).andReturn(asList("Some-Correlation-id")).anyTimes(); resource.setUriInfo(setUpActionExpectations(VdcActionType.UpdateVds, org.ovirt.engine.core.common.action.UpdateVdsActionParameters.class, new java.lang.String[]{ "RootPassword", "CorrelationId" }, new java.lang.Object[]{ NAMES[2], "Some-Correlation-id" }, true, true)); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setRootPassword(NAMES[2]); resource.install(action); }
@org.ovirt.api.metamodel.annotations.InputDetail default void inputDetail() { or(mandatory(cluster().id()), mandatory(cluster().name())); optional(clone()); optional(exclusive()); optional(template().name()); }

@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume = org.ovirt.engine.core.bll.gluster.GlusterAsyncCommandBase.getGlusterVolume(); if (!(super.canDoAction())) { return false; } if (!(org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterAsyncTasks(org.ovirt.engine.core.bll.gluster.GlusterAsyncCommandBase.getVdsGroup().getCompatibilityVersion()))) { addCanDoActionMessageVariable("compatibilityVersion", org.ovirt.engine.core.bll.gluster.GlusterAsyncCommandBase.getVdsGroup().getCompatibilityVersion().getValue()); return failCanDoAction(VdcBllMessages.GLUSTER_TASKS_NOT_SUPPORTED_FOR_CLUSTER_LEVEL); } if (!(glusterVolume.isOnline())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED); } return true; }
public org.ovirt.engine.core.bll.ValidationResult isVirtIoScsiValid(org.ovirt.engine.core.common.businessentities.VM vm) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI) != (disk.getDiskInterface())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } if ((disk.getSgio()) != null) { if ((org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE) == (disk.getDiskStorageType())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.SCSI_GENERIC_IO_IS_NOT_SUPPORTED_FOR_IMAGE_DISK); } } if (vm != null) { if (!(org.ovirt.engine.core.common.FeatureSupported.virtIoScsi(vm.getVdsGroupCompatibilityVersion()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL); } if (!(isVirtioScsiControllerAttached(vm.getId()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_PERFORM_ACTION_VIRTIO_SCSI_IS_DISABLED); } return isOsSupportedForVirtIoScsi(vm); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }


protected boolean setAndValidateDiskProfiles() { org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().setDiskProfileId(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters().getDiskProfileId()); return validate(org.ovirt.engine.core.bll.profiles.DiskProfileHelper.setAndValidateDiskProfiles(java.util.Collections.singletonMap(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage(), org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters().getStorageDomainId()), org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getStoragePool().getcompatibility_version())); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VdcOption getByNameAndVersion(java.lang.String name, java.lang.String version) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("option_name", name).addValue("version", version); return getCallsHandler().executeRead("GetVdcOptionByName", org.ovirt.engine.core.dao.VdcOptionDAODbFacadeImpl.VdcOptionRowMapper.instance, parameterSource); }
protected void postDataCentersLoaded(final java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getClusterListByService(new org.ovirt.engine.ui.frontend.AsyncQuery(getModel(), new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (target)); model.setDataCentersAndClusters(model, dataCenters, ((java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup>) (returnValue)), null); initCdImage(); getPoolModelBehaviorInitializedEvent().raise(this, EventArgs.Empty); } }, getModel().getHash()), true, false); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getAllForRoleAndAdElement(org.ovirt.engine.core.compat.Guid roleid, org.ovirt.engine.core.compat.Guid elementid) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("role_id", roleid).addValue("ad_element_id", elementid); return getCallsHandler().executeReadList("GetPermissionsByRoleIdAndAdElementId", org.ovirt.engine.core.dao.PermissionDAODbFacadeImpl.PermissionRowMapper.instance, parameterSource); }
@org.junit.Test public void testDelete() { dao.remove(FixturesTool.EXISTING_VM_JOB); java.util.List<org.ovirt.engine.core.compat.Guid> ids = dao.getAllIds(); assertTrue(ids.remove(FixturesTool.EXISTING_VM_BLOCK_JOB)); assertTrue(ids.isEmpty()); }
@java.lang.Override public javax.ws.rs.core.Response remove() { org.ovirt.engine.api.model.StorageDomain storageDomain = get(); if (storageDomain.getStorage().getType().equals(StorageType.LOCALFS.value())) { org.ovirt.engine.core.common.action.RemoveStorageDomainParameters params = new org.ovirt.engine.core.common.action.RemoveStorageDomainParameters(guid); params.setDoFormat(true); return performAction(VdcActionType.RemoveStorageDomain, params); } else { org.ovirt.engine.core.common.action.DetachStorageDomainFromPoolParameters params = new org.ovirt.engine.core.common.action.DetachStorageDomainFromPoolParameters(guid, dataCenterId); return performAction(VdcActionType.DetachStorageDomainFromPool, params); } }


@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getDbFacade().getVmDao().getAllVmsRelatedToQuotaId(org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getParameters().getQuotaId()); for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); java.util.Collections.sort(vm.getDiskList(), new org.ovirt.engine.core.common.businessentities.ImagesComparerByName()); org.ovirt.engine.core.bll.ImagesHandler.fillImagesBySnapshots(vm); } org.ovirt.engine.core.bll.GetVmsRelatedToQuotaIdQuery.getQueryReturnValue().setReturnValue(vms); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.DiscoverSendTargetsQuery.getQueryReturnValue().setReturnValue(org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.DiscoverSendTargets, new org.ovirt.engine.core.common.vdscommands.DiscoverSendTargetsVDSCommandParameters(org.ovirt.engine.core.bll.storage.DiscoverSendTargetsQuery.getParameters().getVdsId(), org.ovirt.engine.core.bll.storage.DiscoverSendTargetsQuery.getParameters().getConnection())).getReturnValue()); }

@org.junit.Test public void externalNetworkPortMirroring() throws java.lang.Exception { externalNetworkPortMirroringTest(true, true, org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_CANNOT_BE_PORT_MIRRORED)); }
protected <T> T getEntity(java.lang.Class<T> clz, org.ovirt.engine.core.common.interfaces.SearchType searchType, java.lang.String constraint) { try { org.ovirt.engine.core.common.queries.VdcQueryReturnValue result = runQuery(VdcQueryType.Search, new org.ovirt.engine.core.common.queries.SearchParameters(constraint, searchType)); if (!(result.getSucceeded())) { throw new org.ovirt.engine.api.restapi.resource.BackendFailureException(localize(result.getExceptionString())); } T entity; if ((java.util.List.class.isAssignableFrom(clz)) && ((result.getReturnValue()) instanceof java.util.List)) { entity = clz.cast(result.getReturnValue()); } else { java.util.List<T> list = asCollection(clz, result.getReturnValue()); if ((list == null) || (list.isEmpty())) { throw new org.ovirt.engine.api.restapi.resource.EntityNotFoundException(constraint); } entity = clz.cast(list.get(0)); } return entity; } catch (java.lang.Exception e) { return handleError(clz, e, false); } }
@java.lang.Override public void initialize() { super.initialize(); disableNonChangeableEntities(); getAlias().setEntity(getDisk().getDiskAlias()); getDescription().setEntity(getDisk().getDiskDescription()); getIsShareable().setEntity(getDisk().isShareable()); getIsWipeAfterDelete().setEntity(getDisk().isWipeAfterDelete()); getIsScsiPassthrough().setEntity(getDisk().isScsiPassthrough()); getIsSgIoUnfiltered().setEntity(((getDisk().getSgio()) == (org.ovirt.engine.core.common.businessentities.ScsiGenericIO.UNFILTERED))); getIsReadOnly().setEntity(getDisk().getReadOnly()); if ((getDisk().getDiskStorageType()) == (Disk.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (getDisk())); getDiskStorageType().setEntity(Disk.DiskStorageType.IMAGE); getSize().setEntity(((int) (diskImage.getSizeInGigabytes()))); getVolumeType().setSelectedItem(diskImage.getVolumeType()); setVolumeFormat(diskImage.getVolumeFormat()); boolean isExtendImageSizeEnabled = (((getVm()) != null) && (!(diskImage.isDiskSnapshot()))) && (org.ovirt.engine.core.common.VdcActionUtils.canExecute(java.util.Arrays.asList(getVm()), org.ovirt.engine.core.common.businessentities.VM.class, VdcActionType.ExtendImageSize)); getSizeExtend().setIsChangable(isExtendImageSizeEnabled); } else { org.ovirt.engine.core.common.businessentities.LunDisk lunDisk = ((org.ovirt.engine.core.common.businessentities.LunDisk) (getDisk())); getDiskStorageType().setEntity(Disk.DiskStorageType.LUN); getSize().setEntity(lunDisk.getLun().getDeviceSize()); getSizeExtend().setIsAvailable(false); } updateReadOnlyChangeability(); updateWipeAfterDeleteChangeability(); }
public org.ovirt.engine.core.compat.Guid getVdsGroupId() { return this.mVdsStatic.getVdsGroupId(); }
public void setSwapTotal(java.lang.Long value) { this.mVdsStatistics.setSwapTotal(value); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc reconstructMaster(java.lang.String spUUID, java.lang.String poolName, java.lang.String masterDom, java.util.Map<java.lang.String, java.lang.String> domDict, int masterVersion, java.lang.String lockPolicy, int lockRenewalIntervalSec, int leaseTimeSec, int ioOpTimeoutSec, int leaseRetries) { try { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = vdsServer.reconstructMaster(spUUID, poolName, masterDom, domDict, masterVersion, lockPolicy, lockRenewalIntervalSec, leaseTimeSec, ioOpTimeoutSec, leaseRetries); org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(xmlRpcReturnValue); return wrapper; } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
@org.junit.Test public void imageNotProvidedForOvirtNode() { mockOvirtNode(); assertThat(validator.imageProvidedForOvirtNode(null), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE)); }

@java.lang.Override protected boolean canDoAction() { boolean retValue = true; if ((org.ovirt.engine.core.bll.ChangeDiskCommand.getVm()) == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_EXIST); retValue = false; } if (retValue && (!(org.ovirt.engine.core.bll.ChangeDiskCommand.canRunActionOnNonManagedVm()))) { retValue = false; } if (retValue && (!(org.ovirt.engine.core.bll.ChangeDiskCommand.getVm().isRunningOrPaused()))) { org.ovirt.engine.core.bll.ChangeDiskCommand.setSucceeded(false); retValue = false; addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM); if (!(org.apache.commons.lang.StringUtils.isEmpty(mCdImagePath))) { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__CHANGE_CD); } else { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__EJECT_CD); } addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_STATUS_ILLEGAL); } else if (((org.ovirt.engine.core.bll.IsoDomainListSyncronizer.getInstance().findActiveISODomain(org.ovirt.engine.core.bll.ChangeDiskCommand.getVm().getStoragePoolId())) == null) && (!(org.apache.commons.lang.StringUtils.isEmpty(mCdImagePath)))) { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__CHANGE_CD); addCanDoActionMessage(VdcBllMessages.VM_CANNOT_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO); org.ovirt.engine.core.bll.ChangeDiskCommand.setSucceeded(false); retValue = false; } return retValue; }

@java.lang.Override public void DataCenter_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (getModel().getDataCenter().getSelectedItem())); getModel().setIsHostAvailable(((dataCenter.getstorage_pool_type()) != (org.ovirt.engine.core.common.businessentities.StorageType.LOCALFS))); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetClusterByServiceList(new org.ovirt.engine.ui.frontend.AsyncQuery(new java.lang.Object[]{ this, getModel() }, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateVmModelBehavior behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateVmModelBehavior) (array[0])); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (array[1])); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>) (returnValue)); model.SetClusters(model, clusters, vm.getVdsGroupId().getValue()); behavior.InitTemplate(); } }, getModel().getHash()), dataCenter.getId(), true, false); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetVmDiskList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateVmModelBehavior behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.NewTemplateVmModelBehavior) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> imageDisks = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> vmDisks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>) (returnValue)); for (org.ovirt.engine.core.common.businessentities.Disk disk : vmDisks) { if (((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE)) && (!(disk.isShareable()))) { imageDisks.add(disk); } } behavior.InitStorageDomains(); InitDisks(imageDisks); org.ovirt.engine.ui.uicommonweb.models.vms.VmModelHelper.sendWarningForNonExportableDisks(getModel(), vmDisks, VmModelHelper.WarningType.VM_TEMPLATE); } }, getModel().getHash()), vm.getId(), true); if ((dataCenter.getQuotaEnforcementType()) != (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED)) { getModel().getQuota().setIsAvailable(true); } else { getModel().getQuota().setIsAvailable(false); } }
@java.lang.Override public void setMainTabSelectedItem(org.ovirt.engine.core.common.businessentities.VDSGroup selectedItem) { org.ovirt.engine.ui.webadmin.section.main.view.tab.cluster.SubTabClusterGeneralView.Driver.driver.edit(getDetailModel()); if (selectedItem.supportsVirtService()) { if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.PowerSave)) { setVisibility(true); leftSlider.setValue(selectedItem.getlow_utilization()); rightSlider.setValue(selectedItem.gethigh_utilization()); policyTimeLabel.setText((((((constants.clusterPolicyForTimeLabel()) + " ") + (selectedItem.getcpu_over_commit_duration_minutes())) + " ") + (constants.clusterPolicyMinTimeLabel()))); policyFieldLabel.setText(constants.clusterPolicyPowSaveLabel()); } else if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.EvenlyDistribute)) { setVisibility(true); leftSlider.setVisible(false); leftDummySlider.setVisible(true); rightSlider.setValue(selectedItem.gethigh_utilization()); policyTimeLabel.setText((((((constants.clusterPolicyForTimeLabel()) + " ") + (selectedItem.getcpu_over_commit_duration_minutes())) + " ") + (constants.clusterPolicyMinTimeLabel()))); policyFieldLabel.setText(constants.clusterPolicyEvenDistLabel()); } else { setVisibility(false); policyFieldLabel.setText(constants.clusterPolicyNoneLabel()); } } policyPanel.setVisible(selectedItem.supportsVirtService()); form.update(); }
private void InitializeHelpers() { try { for (java.lang.String helperName : org.ovirt.engine.core.bll.storage.EnumCompat.GetNames(org.ovirt.engine.core.bll.storage.StorageType.class)) { java.lang.Class actionType = null; try { actionType = java.lang.Class.forName(java.lang.String.format("%1$s.%2$s%3$s", "org.ovirt.engine.core.bll.storage", helperName, "StorageHelper")); } catch (java.lang.ClassNotFoundException cnfe) { } if (actionType != null) { java.lang.reflect.Constructor info = actionType.getConstructors()[0]; java.lang.Object tempVar = info.newInstance(null); org.ovirt.engine.core.bll.storage.IStorageHelper currentHelper = ((org.ovirt.engine.core.bll.storage.IStorageHelper) ((tempVar instanceof org.ovirt.engine.core.bll.storage.IStorageHelper) ? tempVar : null)); if (currentHelper != null) { _helpers.put(org.ovirt.engine.core.bll.storage.StorageType.valueOf(helperName), currentHelper); } } } } catch (java.lang.Exception ex) { throw new org.ovirt.engine.core.bll.storage.ApplicationException("JTODO missing exception", ex); } }

protected void setXmlResponse(java.lang.String path, final int code, final java.lang.String body, final int delay) { io.undertow.server.HttpHandler xmlResponseHandler = new io.undertow.server.HttpHandler() { @java.lang.Override public void handleRequest(io.undertow.server.HttpServerExchange exchange) throws java.lang.Exception { if (!(exchange.getRequestHeaders().getFirst("Authorization").equals(("Bearer " + (org.ovirt.engine.sdk4.ServerTest.TOKEN))))) { exchange.setStatusCode(401); exchange.getResponseSender().send(""); } else { java.lang.Thread.sleep(delay); exchange.setStatusCode(code); exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/xml"); exchange.getResponseSender().send(body); } } }; testHandler().addPrefixPath((((testPrefix()) + "/api/") + path), xmlResponseHandler); }

protected boolean canRunVm(org.ovirt.engine.core.common.businessentities.VM vm) { return getVmRunHandler().canRunVm(vm, org.ovirt.engine.core.bll.RunVmCommand.getReturnValue().getCanDoActionMessages(), org.ovirt.engine.core.bll.RunVmCommand.getParameters(), org.ovirt.engine.core.bll.RunVmCommand.getVdsSelector(), org.ovirt.engine.core.bll.RunVmCommand.getSnapshotsValidator(), getVmPropertiesUtils()); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.getStorageDomainStaticDao().update(org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); if ((storageDomainNameChanged) && ((org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.getStoragePool()) != null)) { runVdsCommand(VDSCommandType.SetStorageDomainDescription, new org.ovirt.engine.core.common.vdscommands.SetStorageDomainDescriptionVDSCommandParameters(org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.getStorageDomain().getId(), org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.getStorageDomain().getStorageName())); } org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.setSucceeded(true); }

private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> runInternalFilters(java.util.ArrayList<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl> filters, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, java.util.Map<org.ovirt.engine.core.compat.Guid, java.lang.Integer> filterPositionMap, java.util.List<java.lang.String> messages, org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker memoryChecker) { if (filters != null) { for (org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl filterPolicyUnit : filters) { if ((hostList == null) || (hostList.isEmpty())) { break; } filterPolicyUnit.setMemoryChecker(memoryChecker); hostList = filterPolicyUnit.filter(hostList, vm, parameters, messages); } } return hostList; }

@org.ovirt.engine.ui.webadmin.DefaultMessage("{0} out of unlimited vCPUs") java.lang.String unlimitedVcpuConsumption(int vcpu);
public org.ovirt.engine.core.bll.ValidationResult networkNotChanged(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment oldAttachment) { boolean when = (oldAttachment != null) && (!(java.util.Objects.equals(oldAttachment.getNetworkId(), attachment.getNetworkId()))); return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.CANNOT_CHANGE_ATTACHED_NETWORK).when(when); }
@java.lang.Override protected void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.DETACH_NETWORK.getCommand(op1, op2, allNics).execute(); }
public org.ovirt.engine.core.bll.ValidationResult isUp() { if (((storagePool) == null) || ((storagePool.getStatus()) != (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Up))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_IMAGE_REPOSITORY_NOT_FOUND); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void newInternal() { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.UserPortalNewVmModelBehavior()); model.getVmType().setSelectedItem(VmType.Server); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newVmTitle()); model.setHashName("new_vm"); model.setIsNew(true); model.setCustomPropertiesKeysList(CustomPropertiesKeysList); setWindow(model); model.initialize(null); org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand switchModeCommand = new org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand(); switchModeCommand.init(model); model.getCommands().add(switchModeCommand); model.getProvisioning().setEntity(true); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSave", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }

protected void beforeReadResponse(java.net.HttpURLConnection connection) throws java.lang.Exception { if (((connection.getResponseCode()) != (java.net.HttpURLConnection.HTTP_OK)) && ((connection.getResponseCode()) != (java.net.HttpURLConnection.HTTP_MOVED_TEMP))) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.PROVIDER_FAILURE); } }
@org.junit.Test public void testNicExistsWhenNicNameIsNull() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNicName(null); assertThat(createNetworkAttachmentValidator(attachment).nicExists(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.HOST_NETWORK_INTERFACE_NOT_EXIST)); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if (getRngDevices().isEmpty()) { return failCanDoAction(VdcBllMessages.RNG_NOT_FOUND); } return true; }
@java.lang.Override public java.util.ArrayList<java.lang.String> getNetworkDevices(int osId, org.ovirt.engine.core.compat.Version version) { java.lang.String devices = getValueByVersion(idToUnameLookup.get(osId), "devices.network", version); return trimElements(devices.split(",")); }

@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.TagsVdsMap map; if ((org.ovirt.engine.core.bll.AttachVdsToTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid vdsId : org.ovirt.engine.core.bll.AttachVdsToTagCommand.getVdsList()) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vdsId); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVdsByTagIdAndByVdsId(org.ovirt.engine.core.bll.AttachVdsToTagCommand.getTagId(), vdsId)) == null) { if (vds != null) { AppendCustomValue("VdsNames", vds.getvds_name(), ", "); } map = new org.ovirt.engine.core.common.businessentities.TagsVdsMap(org.ovirt.engine.core.bll.AttachVdsToTagCommand.getTagId(), vdsId); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().attachVdsToTag(map); noActionDone = false; } else { if (vds != null) { AppendCustomValue("VdsNamesExists", vds.getvds_name(), ", "); } } } } org.ovirt.engine.core.bll.AttachVdsToTagCommand.setSucceeded(true); }

protected java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> getParameters() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel : getDisks()) { org.ovirt.engine.core.common.businessentities.StorageDomain destStorageDomain = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (diskModel.getStorageDomain().getSelectedItem())); org.ovirt.engine.core.common.businessentities.StorageDomain sourceStorageDomain = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (diskModel.getSourceStorageDomain().getSelectedItem())); org.ovirt.engine.core.compat.Guid sourceStorageDomainGuid = (sourceStorageDomain != null) ? sourceStorageDomain.getId() : org.ovirt.engine.core.compat.Guid.Empty; org.ovirt.engine.core.common.businessentities.DiskImage disk = ((org.ovirt.engine.core.common.businessentities.DiskImage) (diskModel.getDisk())); if ((diskModel.getQuota().getSelectedItem()) != null) { disk.setQuotaId(((org.ovirt.engine.core.common.businessentities.Quota) (diskModel.getQuota().getSelectedItem())).getId()); } if ((destStorageDomain == null) || (sourceStorageDomain == null)) { continue; } org.ovirt.engine.core.compat.Guid destStorageDomainGuid = destStorageDomain.getId(); addMoveOrCopyParameters(parameters, sourceStorageDomainGuid, destStorageDomainGuid, disk); } return parameters; }

private boolean supportsGlusterDiskProvisioning(org.ovirt.engine.core.common.businessentities.VDSGroup cluster) { return (cluster.supportsGlusterService()) && (org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterBrickProvisioning(cluster.getCompatibilityVersion())); }

public final boolean IsDynamicVariable(java.lang.String strMessage) { return strMessage.startsWith("$"); }
protected void addVmStatic() { logImportEvents(); getVm().getStaticData().setId(getVmId()); getVm().getStaticData().setCreationDate(new java.util.Date()); getVm().getStaticData().setVdsGroupId(getParameters().getVdsGroupId()); getVm().getStaticData().setMinAllocatedMem(computeMinAllocatedMem()); getVm().getStaticData().setQuotaId(getParameters().getQuotaId()); if (((getVm().getOriginalTemplateGuid()) != null) && (!(VmTemplateHandler.BLANK_VM_TEMPLATE_ID.equals(getVm().getOriginalTemplateGuid())))) { org.ovirt.engine.core.common.businessentities.VmTemplate originalTemplate = org.ovirt.engine.core.bll.ImportVmCommand.getVmTemplateDAO().get(getVm().getOriginalTemplateGuid()); if (originalTemplate != null) { getVm().getStaticData().setOriginalTemplateName(originalTemplate.getName()); } } if (getParameters().getCopyCollapse()) { getVm().setVmtGuid(VmTemplateHandler.BLANK_VM_TEMPLATE_ID); } org.ovirt.engine.core.bll.ImportVmCommand.getVmStaticDAO().save(getVm().getStaticData()); org.ovirt.engine.core.bll.ImportVmCommand.getCompensationContext().snapshotNewEntity(getVm().getStaticData()); }
@java.lang.Override protected void executeVmCommand() { vmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.List<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (!(canAddVm(errorMessages, destStorages.values()))) { log.error("Failed to add VM. The reasons are: {}", java.lang.String.join(",", errorMessages)); return; } if (!(addVmLease(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getLeaseStorageDomainId(), org.ovirt.engine.core.bll.AddVmCommand.getVmId()))) { return; } org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyDiskVmElements(); copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().getPoolId()) != null) { addVmToPool(); } discardHelper.logIfDisksWithIllegalPassDiscardExist(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); }

@java.lang.Override protected void buildModel(org.ovirt.engine.core.common.businessentities.VmBase vm) { org.ovirt.engine.ui.uicommonweb.builders.BuilderExecutor.build(vm, getModel(), new org.ovirt.engine.ui.uicommonweb.builders.vm.NameAndDescriptionVmBaseToUnitBuilder(), new org.ovirt.engine.ui.uicommonweb.builders.vm.CommentVmBaseToUnitBuilder(), new org.ovirt.engine.ui.uicommonweb.builders.vm.CommonVmBaseToUnitBuilder()); }

java.util.List<org.ovirt.engine.core.common.businessentities.network> getAllForCluster(org.ovirt.engine.core.compat.Guid id);
@java.lang.Override public java.util.ArrayList<java.lang.String> getWatchDogModels(int osId, org.ovirt.engine.core.compat.Version version) { java.lang.String models = getValueByVersion(idToUnameLookup.get(osId), "devices.watchdog.models", version); return trimElements(models.split(",")); }

@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.lang.String content = ((java.lang.String) (returnValue)); org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterHookContentModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.GlusterHookContentModel) (model)); localModel.getContent().setEntity(content); if (content == null) { localModel.getContent().setIsAvailable(false); localModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentErrorGlusterHook()); } else if ((content.length()) == 0) { localModel.getContent().setIsAvailable(false); localModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().viewContentEmptyGlusterHook()); } localModel.stopProgress(); }
private boolean canRemoveTemplateDisk() { if ((org.ovirt.engine.core.bll.RemoveDiskCommand.getVmTemplate().getStatus()) == (org.ovirt.engine.core.common.businessentities.VmTemplateStatus.Locked)) { return failCanDoAction(VdcBllMessages.VM_TEMPLATE_IMAGE_IS_LOCKED); } org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getDiskImage(); if ((diskImage.getStorageIds().size()) == 1) { return failCanDoAction(VdcBllMessages.VM_TEMPLATE_IMAGE_LAST_DOMAIN); } if ((!(checkDerivedVmFromTemplateExists(diskImage))) || (!(checkDerivedDisksFromDiskNotExist(diskImage)))) { return false; } return true; }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model) { driver.edit(model); model.getStorageDomain().getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { addDiskAllocation(model); } }); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName; if ("Message".equals(propName)) { appendMessage(model.getMessage()); } } }); }
@java.lang.SuppressWarnings("unchecked") public <P extends org.ovirt.engine.core.bll.provider.ProviderProxy> P create(org.ovirt.engine.core.common.businessentities.Provider<?> provider) { return ((P) (new org.ovirt.engine.core.bll.provider.network.openstack.OpenstackNetworkProviderProxy(provider))); }

public static void main(java.lang.String... args) { org.ovirt.engine.core.config.EngineConfigCLIParser parser = null; try { parser = new org.ovirt.engine.core.config.EngineConfigCLIParser(); parser.parse(args); org.ovirt.engine.core.config.EngineConfigMap argsMap = parser.getEngineConfigMap(); if ((argsMap.getLogFile()) != null) { org.ovirt.engine.core.utils.log.JavaLoggingUtils.addFileHandler(argsMap.getLogFile()); } if ((argsMap.getLogLevel()) != null) { org.ovirt.engine.core.utils.log.JavaLoggingUtils.setLogLevel(argsMap.getLogLevel()); } } catch (java.lang.Throwable t) { java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } try { org.ovirt.engine.core.config.EngineConfig.getInstance().setUpAndExecute(parser); } catch (java.lang.Throwable t) { org.slf4j.LoggerFactory.getLogger(org.ovirt.engine.core.config.EngineConfigExecutor.class).debug("Exiting with error: ", t); java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } }

@java.lang.Override protected void ExecuteVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.vdsbroker.VmLogoffVDSCommand.getBroker().desktopLogoff(mVmId.toString(), new java.lang.Boolean(mForce).toString()); org.ovirt.engine.core.vdsbroker.vdsbroker.VmLogoffVDSCommand.ProceedProxyReturnValue(); }

@org.junit.Test public void testCDAVdsIsSPM() { vds.setSpmStatus(VdsSpmStatus.SPM); assertFalse("canDoAction did not fail on a VDS that is already set as SPM", command.canDoAction()); org.ovirt.engine.core.bll.CommandAssertUtils.checkMessagesContains(command, VdcBllMessages.CANNOT_FORCE_SELECT_SPM_VDS_ALREADY_SPM); }

@org.junit.Test public void managementNetworkChangedIncorrectly() { org.ovirt.engine.core.common.businessentities.network.Network net = createNetwork(org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME); mockExistingNetworks(net); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic = createNicSyncedWithNetwork("nic0", net); nic.setBootProtocol(NetworkBootProtocol.STATIC_IP); nic.setAddress(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); mockExistingIfaces(nic); nic.setAddress(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(10)); org.ovirt.engine.core.common.businessentities.VDS vds = mock(org.ovirt.engine.core.common.businessentities.VDS.class); when(vds.getId()).thenReturn(Guid.Empty); when(vds.getHostName()).thenReturn("1.1.1.1"); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(nic), vds); validateAndExpectViolation(helper, VdcBllMessages.ACTION_TYPE_FAILED_MANAGEMENT_NETWORK_ADDRESS_CANNOT_BE_CHANGED); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.NicConfiguration.class, to = org.ovirt.engine.core.common.businessentities.VmInitNetwork.class) public static org.ovirt.engine.core.common.businessentities.VmInitNetwork map(org.ovirt.engine.api.model.NicConfiguration model, org.ovirt.engine.core.common.businessentities.VmInitNetwork template) { org.ovirt.engine.core.common.businessentities.VmInitNetwork entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.VmInitNetwork(); if (model.isSetName()) { entity.setName(model.getName()); } if (model.isOnBoot()) { entity.setStartOnBoot(model.isOnBoot()); } if (model.isSetBootProtocol()) { entity.setBootProtocol(org.ovirt.engine.api.restapi.types.BootProtocolMapper.map(org.ovirt.engine.api.model.BootProtocol.fromValue(model.getBootProtocol()), NetworkBootProtocol.NONE)); } if (model.isSetIp()) { if (model.getIp().isSetAddress()) { entity.setIp(model.getIp().getAddress()); } if (model.getIp().isSetNetmask()) { entity.setNetmask(model.getIp().getNetmask()); } if (model.getIp().isSetGateway()) { entity.setGateway(model.getIp().getGateway()); } } return entity; }

public void setInitialHosts(java.util.ArrayList<org.ovirt.engine.core.compat.Guid> initialHosts) { this.initialHosts = initialHosts; }
protected void cluster_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.Cluster cluster = getCluster().getSelectedItem(); if (cluster == null) { return; } getFencingEnabled().setEntity(cluster.getFencingPolicy().isFencingEnabled()); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getPmTypeList(new org.ovirt.engine.ui.uicommonweb.models.hosts.AsyncQuery(( pmTypes) -> updatePmTypeList(pmTypes)), cluster.getCompatibilityVersion()); if (((getDataCenter()) != null) && ((getDataCenter().getItems()) != null)) { for (org.ovirt.engine.core.common.businessentities.StoragePool datacenter : getDataCenter().getItems()) { if (datacenter.getId().equals(cluster.getStoragePoolId())) { getDataCenter().setSelectedItem(datacenter, false); break; } } } final org.ovirt.engine.core.common.utils.CpuVendor newCpuVendor = getCurrentCpuVendor(); if ((newCpuVendor != null) && (!(newCpuVendor.equals(lastNonNullCpuVendor)))) { lastNonNullCpuVendor = newCpuVendor; cpuVendorChanged(); } getHostedEngineWarning().setIsAvailable(cluster.getCompatibilityVersion().less(Version.v4_0)); }
@org.ovirt.engine.ui.uicompat.DefaultMessage("{0} greater than {1}.") java.lang.String integerValidationNumberGreaterInvalidReason(java.lang.String prefixMsg, int min);

@java.lang.Override public long save(org.ovirt.engine.core.common.businessentities.EngineSession session) { org.ovirt.engine.core.dao.EngineSessionDAODbFacadeImpl.EngineSessionParameterSource parameterSource = getEngineSessionParameterSource(session); return ((java.lang.Integer) (getCallsHandler().executeModification("InsertEngineSession", parameterSource).get("id"))).longValue(); }

private void endCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> listVms = getVmsForDiskId(); org.ovirt.engine.core.bll.Backend.getInstance().EndAction(VdcActionType.RemoveImage, org.ovirt.engine.core.bll.RemoveDiskCommand.getParameters().getImagesParameters().get(0)); org.ovirt.engine.core.bll.VmCommand.updateVmInSpm(org.ovirt.engine.core.bll.RemoveDiskCommand.getStoragePoolId().getValue(), listVms); org.ovirt.engine.core.bll.RemoveDiskCommand.setSucceeded(true); }
private org.ovirt.engine.core.common.businessentities.VM getVmFromDB() { setVm(null); return getVm(); }

@java.lang.Override public java.util.List<org.ovirt.engine.core.common.job.Step> getStepsByJobId(org.ovirt.engine.core.compat.Guid jobId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("job_id", jobId); return getCallsHandler().executeReadList("GetStepsByJobId", createEntityRowMapper(), parameterSource); }

protected void handleEscapeKey(org.ovirt.engine.ui.common.uicommon.model.DeferredModelCommandInvoker commandInvoker) { beforeCommandExecuted(model.getCancelCommand()); commandInvoker.invokeCancelCommand(); }
private static java.util.List<org.ovirt.engine.core.aaa.DirectoryUser> queryPrincipals(final org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension, final java.lang.String namespace, final org.ovirt.engine.api.extensions.ExtMap filter, boolean recursiveGroupsResolving) { org.ovirt.engine.api.extensions.ExtMap inputMap = new org.ovirt.engine.api.extensions.ExtMap().mput(Authz.InvokeKeys.QUERY_ENTITY, Authz.QueryEntity.PRINCIPAL).mput(Authz.InvokeKeys.RESOLVE_GROUPS_RECURSIVE, recursiveGroupsResolving).mput(Authz.InvokeKeys.QUERY_FILTER, filter).mput(Authz.InvokeKeys.NAMESPACE, namespace); return org.ovirt.engine.core.aaa.AuthzUtils.populatePrincipals(extension, namespace, inputMap); }
@java.lang.Override protected void ExecuteIrsBrokerCommand() { uuidReturn = org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getIrsProxy().mergeSnapshots(org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getParameters().getVmId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getParameters().getImageGroupId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getParameters().getImageId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getParameters().getImageId2().toString(), new java.lang.Boolean(org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getParameters().getPostZero()).toString().toLowerCase()); org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.ProceedProxyReturnValue(); org.ovirt.engine.core.compat.Guid taskID = new org.ovirt.engine.core.compat.Guid(uuidReturn.mUuid); org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getVDSReturnValue().setCreationInfo(new org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo(taskID, org.ovirt.engine.core.common.asynctasks.AsyncTaskType.mergeSnapshots, org.ovirt.engine.core.vdsbroker.irsbroker.MergeSnapshotsVDSCommand.getParameters().getStoragePoolId())); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Cluster cluster) { validateParameters(cluster, "name", "dataCenter.name|id"); validateEnums(org.ovirt.engine.api.model.Cluster.class, cluster); org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.api.restapi.resource.BackendDataCenterResource.getStoragePool(cluster, this); org.ovirt.engine.core.common.businessentities.VDSGroup entity = map(cluster, map(pool)); return performCreate(VdcActionType.AddVdsGroup, new org.ovirt.engine.core.common.action.VdsGroupOperationParameters(entity), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetVdsGroupById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }
@org.junit.Test public void testIsNetworkInSyncWhenIpConfigurationIsEmpty() throws java.lang.Exception { when(mockedIpConfiguration.hasPrimaryAddressSet()).thenReturn(false); assertThat(createTestedInstance().isNetworkInSync(), is(true)); }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__ISCSI_BOND); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAll(org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getCallsHandler().executeReadList("GetAllFromVds", org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("user_id", userID).addValue("is_filtered", isFiltered)); return uniteAgents(vdsList); }
@java.lang.Override protected void executeVdsBrokerCommand() { java.lang.String storageDomainId = CreateVGVDSCommand.getParameters().getStorageDomainId().toString(); java.util.List<java.lang.String> deviceList = CreateVGVDSCommand.getParameters().getDeviceList(); java.lang.String[] deviceArray = deviceList.toArray(new java.lang.String[deviceList.size()]); boolean isForce = CreateVGVDSCommand.getParameters().isForce(); boolean supportForceCreateVG = org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.SupportForceCreateVG, CreateVGVDSCommand.getVds().getVdsGroupCompatibilityVersion().toString()); _result = (supportForceCreateVG) ? CreateVGVDSCommand.getBroker().createVG(storageDomainId, deviceArray, isForce) : CreateVGVDSCommand.getBroker().createVG(storageDomainId, deviceArray); CreateVGVDSCommand.proceedProxyReturnValue(); setReturnValue(_result.mUuid); }
org.ovirt.engine.core.bll.ValidationResult networksUniquelyConfiguredOnHost(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure) { java.util.Set<org.ovirt.engine.core.compat.Guid> usedNetworkIds = new java.util.HashSet(attachmentsToConfigure.size()); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : attachmentsToConfigure) { boolean alreadyUsedNetworkId = usedNetworkIds.contains(attachment.getNetworkId()); if (alreadyUsedNetworkId) { org.ovirt.engine.core.common.businessentities.network.Network network = existingNetworkRelatedToAttachment(attachment); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORKS_ALREADY_ATTACHED_TO_IFACES); } else { usedNetworkIds.add(attachment.getNetworkId()); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void init() { setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editLogicalNetworkTitle()); setHashName("edit_logical_network"); getName().setEntity(getNetwork().getName()); if (isManagemet()) { getName().setIsChangable(false); } getDescription().setEntity(getNetwork().getDescription()); getComment().setEntity(getNetwork().getComment()); getIsStpEnabled().setEntity(getNetwork().getStp()); getHasVLanTag().setEntity(((getNetwork().getVlanId()) != null)); getVLanTag().setEntity(((getNetwork().getVlanId()) == null ? java.lang.Integer.valueOf(0) : getNetwork().getVlanId())); initMtu(); initIsVm(); getExport().setEntity(getNetwork().isExternal()); getExport().setIsChangable(false); getExternalProviders().setIsChangable(false); getNetworkLabel().setIsChangable(false); }


private org.ovirt.engine.core.bll.ValidationResult diskImagesNotInStatus(org.ovirt.engine.core.common.businessentities.storage.ImageStatus status, org.ovirt.engine.core.common.errors.VdcBllMessages failMessage) { java.util.List<java.lang.String> disksInStatus = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { if ((diskImage.getImageStatus()) == status) { disksInStatus.add(diskImage.getDiskAlias()); } } if (!(disksInStatus.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(failMessage, java.lang.String.format("$diskAliases %s", org.apache.commons.lang.StringUtils.join(disksInStatus, ", "))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }

protected boolean failPassthroughVnicHotPlug() { if ((org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.pciPassthrough) == (org.ovirt.engine.core.common.businessentities.network.VmInterfaceType.forValue(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic().getType()))) { addCanDoActionMessage(EngineMessage.HOT_PLUG_UNPLUG_PASSTHROUGH_VNIC_NOT_SUPPORTED); return true; } return false; }
private boolean auditLogIfFieldWasNotAddedSuccessfully(java.util.Map<java.lang.String, java.lang.Object> descriptionFields, java.util.Map<java.lang.String, java.lang.Object> descriptionMap, java.lang.String fieldName, java.lang.String fieldValue, java.lang.String[] descriptionFieldsPriority, int fieldPriorityIndex) { java.lang.String diskAlias = descriptionFields.get(org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.DISK_ALIAS).toString(); java.lang.String storedFieldValue = ((java.lang.String) (descriptionMap.get(fieldName))); if (storedFieldValue == null) { auditLogFailedToStoreDiskFields(diskAlias, getDiskFieldsNamesLeft(descriptionFieldsPriority, fieldPriorityIndex)); return false; } else { java.lang.String fullFieldValue = (stringMatchesAsciiPattern(fieldValue)) ? fieldValue : encodeDiskProperty(fieldValue); if ((storedFieldValue.length()) < (fullFieldValue.length())) { if (((descriptionFieldsPriority.length) - fieldPriorityIndex) > 1) { auditLogDiskFieldTruncatedAndOthersWereLost(diskAlias, fieldName, getDiskFieldsNamesLeft(descriptionFieldsPriority, (fieldPriorityIndex + 1))); } else { auditLogDiskFieldTruncated(diskAlias, fieldName); } return false; } } return true; }



@org.junit.Test public void testValidateClusterSupportForVirtioScsi() { org.ovirt.engine.core.bll.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> cmd = setupDiskSpaceTest(createParameters()); doReturn(true).when(cmd).validateImages(any(java.util.Map.class)); cmd.getParameters().getVm().getDiskMap().values().iterator().next().setDiskInterface(DiskInterface.VirtIO_SCSI); cmd.getVdsGroup().setCompatibilityVersion(Version.v3_2); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL); }

@java.lang.Override public org.ovirt.engine.core.common.businessentities.permissions getForRoleAndAdElementAndObjectWithGroupCheck(org.ovirt.engine.core.compat.Guid roleid, org.ovirt.engine.core.compat.Guid elementid, org.ovirt.engine.core.compat.Guid objectid) { org.hibernate.Query query = getSession().createQuery("from DbUser where id = :id"); query.setParameter("id", objectid); org.ovirt.engine.core.common.businessentities.DbUser user = ((org.ovirt.engine.core.common.businessentities.DbUser) (query.uniqueResult())); query = getSession().createQuery("from ad_groups where name in :names"); query.setParameterList("names", user.getGroupsAsArray()); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.ad_groups> groups = query.list(); java.util.List<org.ovirt.engine.core.compat.Guid> ids = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); ids.add(user.getuser_id()); for (org.ovirt.engine.core.common.businessentities.ad_groups group : groups) { ids.add(group.getid()); } return fillInPermissionDetails(findOneByCriteria(org.hibernate.criterion.Restrictions.eq("roleId", roleid), org.hibernate.criterion.Restrictions.eq("adElementId", elementid), org.hibernate.criterion.Restrictions.eq("objectId", objectid), org.hibernate.criterion.Restrictions.in("adElementId", ids))); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getHostsForStorageOperation(org.ovirt.engine.core.compat.Guid storagePoolId, boolean localFsOnly) { if ((storagePoolId == null) || (storagePoolId.equals(Guid.Empty))) { storagePoolId = null; } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getCallsHandler().executeReadList("getHostsForStorageOperation", org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("storage_pool_id", storagePoolId).addValue("local_fs_only", localFsOnly)); return uniteAgents(vdsList); }

@java.lang.Override java.lang.String getSubCollectionsVariables() { java.lang.StringBuffer subCollectionVariables = new java.lang.StringBuffer(); for (org.ovirt.engine.sdk.codegen.holders.CollectionHolder ch : this.getSubcollections().values()) { subCollectionVariables.append(this.variableTemplate.getTemplate(ch.getName(), org.ovirt.engine.sdk.codegen.utils.StringUtils.toLowerCase(ch.getName()))); } return subCollectionVariables.toString(); }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.setExecutorService(engineThreadPool); }
protected void addVmInterfaces() { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); org.ovirt.engine.core.bll.network.vm.VnicProfileHelper vnicProfileHelper = new org.ovirt.engine.core.bll.network.vm.VnicProfileHelper(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getClusterId(), org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getStoragePoolId(), org.ovirt.engine.core.common.AuditLogType.IMPORTEXPORT_IMPORT_VM_INVALID_INTERFACES); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> nics = getVm().getInterfaces(); vmInterfaceManager.sortVmNics(nics, getVm().getStaticData().getManagedDeviceMap()); if ((!(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().isImportAsNewEntity())) && (isExternalMacsToBeReported())) { reportExternalMacs(); } for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface : getVm().getInterfaces()) { initInterface(iface); vnicProfileHelper.updateNicWithVnicProfileForUser(iface, org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCurrentUser()); final boolean reassignMac = (shouldMacBeReassigned(iface)) || (org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getParameters().isImportAsNewEntity()); vmInterfaceManager.add(iface, org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getCompensationContext(), reassignMac, getVm().getOs(), getEffectiveCompatibilityVersion()); macsAdded.add(iface.getMacAddress()); } vnicProfileHelper.auditInvalidInterfaces(org.ovirt.engine.core.bll.exportimport.ImportVmCommandBase.getVmName()); }


@java.lang.Override public void updateMinAllocatedMemory() { org.ovirt.engine.ui.uicommonweb.models.vms.DataCenterWithCluster dataCenterWithCluster = getModel().getDataCenterWithClustersList().getSelectedItem(); if (dataCenterWithCluster == null) { return; } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = dataCenterWithCluster.getCluster(); if (cluster == null) { return; } if ((getModel().getMemSize().getEntity()) < (vm.getVmMemSizeMb())) { double overCommitFactor = 100.0 / (cluster.getMaxVdsMemoryOverCommit()); getModel().getMinAllocatedMemory().setEntity(((int) ((getModel().getMemSize().getEntity()) * overCommitFactor))); } else { getModel().getMinAllocatedMemory().setEntity(vm.getMinAllocatedMem()); } }
@org.junit.Test public void canDoActionInvalidVmStatus() { command.getParameters().setParametersList(createMoveDisksParameters()); initDiskImage(diskImageId); initVm(VMStatus.Unknown, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageId); command.updateParameters(); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN_OR_UP.toString())); }




private void execute(org.ovirt.engine.core.ldap.LdapProviderType ldapProviderType, java.lang.String domain) { java.util.Hashtable<java.lang.String, java.lang.String> env = new java.util.Hashtable<java.lang.String, java.lang.String>(); org.ovirt.engine.core.bll.adbroker.LdapBrokerUtils.addLdapConfigValues(env); initContextVariables(env); javax.naming.directory.Attributes results = null; javax.naming.directory.DirContext ctx = null; try { ctx = createContext(env); org.ovirt.engine.core.bll.adbroker.LdapQueryData ldapQueryData = new org.ovirt.engine.core.bll.adbroker.LdapQueryDataImpl(); ldapQueryData.setLdapQueryType(LdapQueryType.rootDSE); ldapQueryData.setDomain(domain); org.ovirt.engine.core.bll.adbroker.LdapQueryExecution queryExecution = org.ovirt.engine.core.bll.adbroker.LdapQueryExecutionBuilderImpl.getInstance().build(ldapProviderType, ldapQueryData); javax.naming.directory.SearchControls searchControls = new javax.naming.directory.SearchControls(); searchControls.setReturningAttributes(queryExecution.getReturningAttributes()); searchControls.setSearchScope(queryExecution.getSearchScope()); searchControls.setReturningObjFlag(true); searchControls.setTimeLimit(((org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.LDAPOperationTimeout)) * 1000)); javax.naming.NamingEnumeration<javax.naming.directory.SearchResult> search = ctx.search(queryExecution.getBaseDN(), queryExecution.getFilter(), searchControls); try { results = search.next().getAttributes(); } finally { search.close(); } } catch (javax.naming.NamingException e) { org.ovirt.engine.core.bll.adbroker.GetRootDSE.log.errorFormat("Failed to query rootDSE for LDAP server {0} due to {1}", ldapURI, e.getMessage()); } finally { closeContext(ctx); } attributes = results; }
@org.junit.Test public void testValidateModifiedBondSlavesWhenSlaveAlreadySlavesForDifferentBondButItsDetachedFromItAsAPartOfRequest() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Bond bond = createBond("bond1"); org.ovirt.engine.core.common.businessentities.network.Bond differentBond = createBond("bond2"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveA = createBondSlave(bond, "slaveA"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveB = createBondSlave(differentBond, "slaveB"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveC = createBondSlave(differentBond, "slaveC"); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface slaveD = createBondSlave(differentBond, "slaveD"); setBondSlaves(bond, slaveA, slaveB); setBondSlaves(differentBond, slaveC, slaveD); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator build = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.HostSetupNetworksValidatorBuilder().setParams(new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidatorTest.ParametersBuilder().addBonds(bond, differentBond)).addExistingInterfaces(bond, differentBond, slaveA, slaveB, slaveC, slaveD).build(); _doTestValidateModifiedBondSlaves(spy(build), ValidationResult.VALID, ValidationResult.VALID, isValid()); }

@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.widget.tree.Context context, org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb) { com.google.gwt.resources.client.ImageResource imageResource; switch (value.getType()) { case Cluster : imageResource = applicationResources.clusterImage(); break; case Clusters : imageResource = applicationResources.clustersImage(); break; case DataCenter : imageResource = applicationResources.dataCenterImage(); break; case DataCenters : imageResource = applicationResources.dataCenterImage(); break; case Cluster_Gluster : imageResource = applicationResources.glusterClusterImage(); break; case Host : imageResource = applicationResources.hostImage(); break; case Hosts : imageResource = applicationResources.hostsImage(); break; case Storage : imageResource = applicationResources.storageImage(); break; case Storages : imageResource = applicationResources.storagesImage(); break; case System : imageResource = applicationResources.systemImage(); break; case Templates : imageResource = applicationResources.templatesImage(); break; case VMs : imageResource = applicationResources.vmsImage(); break; case Volume : imageResource = applicationResources.volumeImage(); break; case Volumes : imageResource = applicationResources.volumesImage(); break; case Network : imageResource = applicationResources.networkTreeImage(); break; case Networks : imageResource = applicationResources.networksTreeImage(); break; default : imageResource = applicationResources.questionMarkImage(); } com.google.gwt.safehtml.shared.SafeHtml imageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(imageResource).getHTML()); sb.append(templates.treeItem(imageHtml, value.getTitle())); }

private java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> prepareSnapshotConfigWithoutImage(org.ovirt.engine.core.compat.Guid imageGroupToRemove) { java.util.List<org.ovirt.engine.core.common.businessentities.Snapshot> result = new java.util.LinkedList<org.ovirt.engine.core.common.businessentities.Snapshot>(); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> snapshotDisks = org.ovirt.engine.core.bll.RemoveImageCommand.getDiskImageDao().getAllSnapshotsForImageGroup(imageGroupToRemove); for (org.ovirt.engine.core.common.businessentities.DiskImage snapshotDisk : snapshotDisks) { org.ovirt.engine.core.common.businessentities.Snapshot updated = prepareSnapshotConfigWithoutImageSingleImage(snapshotDisk.getvm_snapshot_id().getValue(), snapshotDisk.getImageId()); if (updated != null) { result.add(updated); } } return result; }


public void setVmAttachedToPool(boolean value) { if (value) { getDataCenter().setIsChangable(false); getCluster().setIsChangable((!value)); getQuota().setIsChangable(false); getDescription().setIsChangable(false); getNumOfDesktops().setIsChangable(false); getPrestartedVms().setIsChangable(false); getTemplate().setIsChangable(false); getMemSize().setIsChangable(false); getTotalCPUCores().setIsChangable(false); getCoresPerSocket().setIsChangable(false); getNumOfSockets().setIsChangable(false); getOSType().setIsChangable(false); getIsStateless().setIsChangable(false); getIsDeleteProtected().setIsChangable(false); getTimeZone().setIsChangable(false); getDomain().setIsChangable(false); getDisplayProtocol().setIsChangable(false); getUsbPolicy().setIsChangable(false); getNumOfMonitors().setIsChangable(false); getIsSmartcardEnabled().setIsChangable(false); getAllowConsoleReconnect().setIsChangable(false); getIsAutoAssign().setIsChangable(false); getDefaultHost().setIsChangable(false); getRunVMOnSpecificHost().setIsChangable(false); getHostCpu().setIsChangable(false); getDontMigrateVM().setIsChangable(false); getCpuPinning().setIsChangable(false); getMinAllocatedMemory().setIsChangable(false); getProvisioning().setIsChangable(false); getProvisioningThin_IsSelected().setIsChangable(false); getProvisioningClone_IsSelected().setIsChangable(false); getDisksAllocationModel().setIsChangable(false); getFirstBootDevice().setIsChangable(false); getSecondBootDevice().setIsChangable(false); getCdAttached().setIsChangable(false); getCdImage().setIsChangable(false); getKernel_path().setIsChangable(false); getInitrd_path().setIsChangable(false); getKernel_parameters().setIsChangable(false); getCustomProperties().setIsChangable(false); vmAttachedToPool = true; } }
private boolean pauseTransferIfNecessary(org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity, long ts) { if ((((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval()) > 0) && (((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.INITIALIZING)) || ((entity.getPhase()) == (org.ovirt.engine.core.common.businessentities.storage.ImageTransferPhase.TRANSFERRING)))) && ((((entity.getLastUpdated().getTime()) / 1000) + (org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getKeepaliveInterval())) < ts)) { log.warn("Transfer paused due to no updates in {} seconds. {}", (ts - ((entity.getLastUpdated().getTime()) / 1000)), getTransferDescription()); updateEntityPhase(ImageTransferPhase.PAUSED_SYSTEM); return true; } return false; }
private org.ovirt.engine.core.common.businessentities.VmTemplate mockVmTemplate() { org.ovirt.engine.core.common.businessentities.VmTemplate template = new org.ovirt.engine.core.common.businessentities.VmTemplate(); template.setId(vmTemplateId); template.setStoragePoolId(storagePoolId); org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommandTestAbstract.setDiskList(template); return template; }


void localize(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { titleLabel.setText(constants.configurePopupTitle()); closeButton.setText(constants.closeButtonLabel()); rolesTab.setLabel(constants.configureRoleTabLabel()); clusterPoliciesTab.setLabel(constants.configureClusterPolicyTabLabel()); systemPermissionsTab.setLabel(constants.configureSystemPermissionTabLabel()); }

@org.junit.Test public void testReportConfigurationsOnHostWhenBootProtocolNotStatic() { initIpConfigurationBootProtocolAddress(NetworkBootProtocol.NONE, false); initIpConfigurationBootProtocolNetmask(NetworkBootProtocol.NONE, false); initIpConfigurationBootProtocolGateway(NetworkBootProtocol.NONE, false); org.ovirt.engine.core.utils.NetworkInSyncWithVdsNetworkInterface testedInstanceWithSameNonQosValues = createTestedInstanceWithSameNonQosValues(); java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> reportedConfigurationList = testedInstanceWithSameNonQosValues.reportConfigurationsOnHost().getReportedConfigurationList(); java.util.List<org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration> expectedReportedConfigurations = createDefaultExpectedReportedConfigurations(); org.ovirt.engine.core.common.businessentities.network.IPv4Address primaryAddress = this.testedNetworkAttachment.getIpConfiguration().getIpv4PrimaryAddress(); expectedReportedConfigurations.add(new org.ovirt.engine.core.common.businessentities.network.ReportedConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurationType.BOOT_PROTOCOL, iface.getIpv4BootProtocol().name(), primaryAddress.getBootProtocol().name(), true)); assertThat(reportedConfigurationList.containsAll(expectedReportedConfigurations), is(true)); assertThat(reportedConfigurationList.size(), is(expectedReportedConfigurations.size())); }
public boolean isMonitoringNeeded() { return ((((((monitoringStrategy.isMonitoringNeeded(_vds)) && ((_vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing))) && ((_vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.InstallFailed))) && ((_vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Reboot))) && ((_vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance))) && ((_vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.PendingApproval))) && ((_vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Down)); }
@org.junit.Test public void nicNotExist() { nicExists(false); assertCanDoActionFailure(VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST.toString()); }
public static final org.ovirt.engine.ui.common.widget.table.column.AbstractDiskSizeColumn<org.ovirt.engine.core.common.businessentities.Disk> getSizeColumn(java.lang.String sortBy) { org.ovirt.engine.ui.common.widget.table.column.AbstractDiskSizeColumn<org.ovirt.engine.core.common.businessentities.Disk> column = new org.ovirt.engine.ui.common.widget.table.column.AbstractDiskSizeColumn<org.ovirt.engine.core.common.businessentities.Disk>() { @java.lang.Override protected java.lang.Long getRawValue(org.ovirt.engine.core.common.businessentities.Disk object) { return (object.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE) ? ((org.ovirt.engine.core.common.businessentities.DiskImage) (object)).getSize() : ((long) ((((org.ovirt.engine.core.common.businessentities.LunDisk) (object)).getLun().getDeviceSize()) * (java.lang.Math.pow(1024, 3)))); } }; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable(column, sortBy); }


@java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { com.google.gwt.user.cellview.client.TreeNode expandNode = findNode(display.getRootTreeNode(), modelProvider.getSelectionModel().getSelectedObject()); if (expandNode != null) { expandTree(expandNode); } }


private void removeCinderDisks(java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks) { org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters removeParam = new org.ovirt.engine.core.common.action.RemoveAllVmCinderDisksParameters(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId(), cinderDisks); removeParam.setParentHasTasks((!(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getReturnValue().getVdsmTaskIdList().isEmpty()))); java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> future = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveAllVmCinderDisks, withRootCommandInfo(removeParam, org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getActionType()), org.ovirt.engine.core.bll.RemoveVmTemplateCommand.cloneContextAndDetachFromParent()); try { future.get().getActionReturnValue(); } catch (java.lang.InterruptedException | java.util.concurrent.ExecutionException e) { log.error("Exception", e); } }


@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel) (array[0])); org.ovirt.engine.ui.uicommonweb.models.storage.RemoveStorageModel removeStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.RemoveStorageModel) (array[1])); org.ovirt.engine.core.common.businessentities.StorageDomain storage = storageListModel.getSelectedItem(); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((java.util.List<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); removeStorageModel.getHostList().setItems(hosts); removeStorageModel.getHostList().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(hosts)); removeStorageModel.getFormat().setEntity(storage.getStorageDomainType().isDataDomain()); if (hosts.isEmpty()) { org.ovirt.engine.ui.uicommonweb.UICommand tempVar = createCancelCommand("Cancel"); tempVar.setIsDefault(true); removeStorageModel.getCommands().add(tempVar); } else { org.ovirt.engine.ui.uicommonweb.UICommand command; command = org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnRemove", this); removeStorageModel.getCommands().add(command); command = createCancelCommand("Cancel"); removeStorageModel.getCommands().add(command); } }
private void setSignedOutEvent(org.ovirt.engine.ui.uicompat.Event<org.ovirt.engine.ui.uicompat.EventArgs> value) { privateSignedOutEvent = value; }

@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("updateQuotaCache") public synchronized void updateQuotaCache() { if (!(isCacheUpdateNeeded())) { return; } log.debug("Updating Quota Cache..."); long timeStart = java.lang.System.currentTimeMillis(); java.util.List<org.ovirt.engine.core.common.businessentities.Quota> allQuotaIncludingConsumption = getQuotaDao().getAllQuotaIncludingConsumption(); if (allQuotaIncludingConsumption.isEmpty()) { return; } java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.Quota>> newStoragePoolQuotaMap = new java.util.HashMap<>(); java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.Guid> newDefaultQuotaIdMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.Quota quota : allQuotaIncludingConsumption) { if (!(newStoragePoolQuotaMap.containsKey(quota.getStoragePoolId()))) { newStoragePoolQuotaMap.put(quota.getStoragePoolId(), new java.util.HashMap()); } newStoragePoolQuotaMap.get(quota.getStoragePoolId()).put(quota.getId(), quota); if (quota.isDefault()) { newDefaultQuotaIdMap.put(quota.getStoragePoolId(), quota.getId()); } } lock.writeLock().lock(); try { storagePoolQuotaMap = newStoragePoolQuotaMap; storagePoolDefaultQuotaIdMap = newDefaultQuotaIdMap; } finally { lock.writeLock().unlock(); } long timeEnd = java.lang.System.currentTimeMillis(); log.info("Quota Cache updated. ({} msec)", (timeEnd - timeStart)); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.VmPool pool) { org.ovirt.engine.core.compat.Guid id = pool.getVmPoolId(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(id)) { id = org.ovirt.engine.core.compat.Guid.newGuid(); pool.setVmPoolId(id); } org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vm_pool_description", pool.getVmPoolDescription()).addValue("vm_pool_comment", pool.getComment()).addValue("vm_pool_id", pool.getVmPoolId()).addValue("vm_pool_name", pool.getName()).addValue("vm_pool_type", pool.getVmPoolType()).addValue("parameters", pool.getParameters()).addValue("prestarted_vms", pool.getPrestartedVms()).addValue("vds_group_id", pool.getVdsGroupId()).addValue("max_assigned_vms_per_user", pool.getMaxAssignedVmsPerUser()).addValue("spice_proxy", pool.getSpiceProxy()); getCallsHandler().executeModification("InsertVm_pools", parameterSource); }
@java.lang.Override protected void readOsSection(XmlNode section) { _vm.getStaticData().setId(new org.ovirt.engine.core.compat.Guid(section.Attributes.get("ovf:id").getValue())); XmlNode node = section.SelectSingleNode("Description"); if (node != null) { if (node.InnerText.equals(java.lang.String.valueOf(OsRepository.OLD_OTHER_ID))) { node.InnerText = java.lang.String.valueOf(OsRepository.DEFAULT_OS); } _vm.getStaticData().setOsId(osRepository.getOsIdByUniqueName(node.InnerText)); } }

@java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call() { java.util.Set<org.ovirt.engine.core.compat.Guid> vdsConnectedToPool = org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxyData.getVdsConnectedToPool(_storagePoolId); java.util.Set<org.ovirt.engine.core.compat.Guid> vdsDomInMaintenance = _domainsInMaintenance.get(domain.getId()); if ((vdsConnectedToPool.isEmpty()) || ((vdsDomInMaintenance != null) && (vdsDomInMaintenance.containsAll(vdsConnectedToPool)))) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxyData.log.info("Moving domain '{}' to maintenance", domain.getId()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().updateStatus(domain.getStoragePoolIsoMapData().getId(), StorageDomainStatus.Maintenance); } return null; }
void update(org.ovirt.engine.core.common.businessentities.bookmarks bookmark);
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__TYPE__NETWORK); addCanDoActionMessage(EngineMessage.VAR__ACTION__ATTACH); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Migrate Virtual Machine(s)") java.lang.String migrateVirtualMachinesTitle();
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.bll.aaa.RemoveUserCommand.getParameters().getId(); if (org.ovirt.engine.core.bll.aaa.RemoveUserCommand.getCurrentUser().getId().equals(id)) { addCanDoActionMessage(EngineMessage.USER_CANNOT_REMOVE_HIMSELF); return false; } org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUser = org.ovirt.engine.core.bll.aaa.RemoveUserCommand.getDbUserDao().get(id); if (dbUser == null) { addCanDoActionMessage(EngineMessage.USER_MUST_EXIST_IN_DB); return false; } return true; }
private void prepareMocks(org.ovirt.engine.core.bll.gluster.CommitRemoveGlusterVolumeBricksCommand command) { doReturn(volumeDao).when(command).getGlusterVolumeDao(); doReturn(brickDao).when(command).getGlusterBrickDao(); doReturn(dbUtils).when(command).getDbUtils(); doReturn(getVds(VDSStatus.Up)).when(command).getUpServer(); doReturn(getVolumeWithRemoveBricksTask(volumeWithRemoveBricksTask)).when(volumeDao).getById(volumeWithRemoveBricksTask); doReturn(getVolumeWithRemoveBricksTaskNotFinished(volumeWithRemoveBricksTaskNotFinished)).when(volumeDao).getById(volumeWithRemoveBricksTaskNotFinished); doReturn(getVolume(volumeWithoutAsyncTask)).when(volumeDao).getById(volumeWithoutAsyncTask); doReturn(getvolumeWithoutRemoveBricksTask(volumeWithoutRemoveBricksTask)).when(volumeDao).getById(volumeWithoutRemoveBricksTask); doReturn(getVolumeWithRemoveBricksTaskNull(volumeWithRemoveBricksTaskNull)).when(volumeDao).getById(volumeWithRemoveBricksTaskNull); doReturn(null).when(volumeDao).getById(null); }
public void PostNetworkAction(org.ovirt.engine.core.compat.Guid networkGuid, boolean succeeded) { org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterNetworkModel networkModel = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterNetworkModel) (getWindow())); if (succeeded) { Cancel(); } else { networkModel.StopProgress(); return; } networkModel.StopProgress(); org.ovirt.engine.core.common.businessentities.Network network = networkModel.getcurrentNetwork(); org.ovirt.engine.core.compat.Guid networkId = (networkModel.getIsNew()) ? networkGuid : network.getId(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> attachNetworkToClusters = org.ovirt.engine.ui.uicommonweb.Linq.Except(networkModel.getnewClusters(), networkModel.getOriginalClusters()); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> actionParameters1 = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (org.ovirt.engine.core.common.businessentities.VDSGroup attachNetworkToCluster : attachNetworkToClusters) { org.ovirt.engine.core.common.businessentities.Network tempVar = new org.ovirt.engine.core.common.businessentities.Network(null); tempVar.setId(networkId); tempVar.setname(network.getname()); actionParameters1.add(new org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter(attachNetworkToCluster, tempVar)); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.AttachNetworkToVdsGroup, actionParameters1); }

public static void GetStorageDomainById(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid storageDomainId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((org.ovirt.engine.core.common.businessentities.StorageDomain) (source)) : null; } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetStorageDomainById, new org.ovirt.engine.core.common.queries.StorageDomainQueryParametersBase(storageDomainId), aQuery); }

@org.junit.Test public void readOnlyIsSupportedByDiskInterface() { disk.setReadOnly(true); disk.setDiskInterface(DiskInterface.VirtIO); assertThat(validator.isReadOnlyPropertyCompatibleWithInterface(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); disk.setReadOnly(false); disk.setDiskInterface(DiskInterface.IDE); assertThat(validator.isReadOnlyPropertyCompatibleWithInterface(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.isValid()); }
@org.junit.Test public void testReadBooleanListEndElement() { org.ovirt.api.metamodel.runtime.xml.XmlReader reader = openReader("<action><value>true</value><value>false</value></action>"); reader.next(); reader.readBooleans(); assertEquals(javax.xml.stream.XMLStreamConstants.END_ELEMENT, reader.getEventType()); assertEquals("action", reader.getLocalName()); }


public org.ovirt.engine.core.bll.ValidationResult valuesConsistent() { org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos = getQos(); if (qos == null) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } java.lang.Integer outUpperlimit = qos.getOutAverageUpperlimit(); java.lang.Integer outRealtime = qos.getOutAverageRealtime(); return ((outUpperlimit != null) && (outRealtime != null)) && (outUpperlimit < outRealtime) ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_INCONSISTENT_VALUES) : org.ovirt.engine.core.bll.ValidationResult.VALID; }


@org.junit.Test public void testAlreadyExistStorageDomain() { when(command.getStorageDomainStaticDao().get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.storage.domain.AddExistingBlockStorageDomainCommandTest.getStorageDomain()); assertFalse("Storage Domain already exists", command.canAddDomain()); assertTrue("Import block Storage Domain should have failed due to already existing Storage Domain", command.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST.toString())); }
protected void forceCreationWarning(java.util.ArrayList<java.lang.String> usedLunsMessages) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmationModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmationModel); confirmationModel.setTitle(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.forceStorageDomainCreation()); confirmationModel.setMessage(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.lunsAlreadyPartOfSD()); confirmationModel.setHashName("force_lun_disk_creation"); confirmationModel.setItems(usedLunsMessages); org.ovirt.engine.ui.uicommonweb.UICommand forceSaveCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("OnForceSave", this); forceSaveCommand.setTitle(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.ok()); forceSaveCommand.setIsDefault(true); confirmationModel.getCommands().add(forceSaveCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelconfirmCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirm", this); cancelconfirmCommand.setTitle(org.ovirt.engine.ui.uicommonweb.models.vms.AbstractDiskModel.CONSTANTS.cancel()); cancelconfirmCommand.setIsCancel(true); confirmationModel.getCommands().add(cancelconfirmCommand); }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Maintenance Host(s)") java.lang.String maintenanceHostsTitle();
@java.lang.Override public org.ovirt.engine.ui.uicommonweb.validation.ValidationResult Validate(java.lang.String value) { org.ovirt.engine.ui.uicommonweb.validation.ValidationResult result = new org.ovirt.engine.ui.uicommonweb.validation.ValidationResult(); if ((value != null) && ((value.length()) > (getMaxLength()))) { result.setSuccess(false); result.getReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().lenValidationFieldMusnotExceed(getMaxLength())); } return result; }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { initImportClonedTemplateDisks(); addVmTemplateToDb(); mapDbUsers(); updateOriginalTemplateNameOnDerivedVms(); addVmInterfaces(); getCompensationContext().stateChanged(); org.ovirt.engine.core.bll.exportimport.vmHandler.addVmInitToDB(getVmTemplate().getVmInit()); return null; }); boolean doesVmTemplateContainImages = !(getImages().isEmpty()); if (doesVmTemplateContainImages && (!(org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImagesExistOnTargetStorageDomain()))) { moveOrCopyAllImageGroups(getVmTemplateId(), getImages()); } org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getVmDeviceUtils().addImportedDevices(getVmTemplate(), org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImportAsNewEntity(), false); if ((!doesVmTemplateContainImages) || (org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.getParameters().isImagesExistOnTargetStorageDomain())) { endMoveOrCopyCommand(); } discardHelper.logIfDisksWithIllegalPassDiscardExist(getVmTemplateId()); checkTrustedService(); org.ovirt.engine.core.bll.exportimport.ImportVmTemplateCommand.setSucceeded(true); }

@java.lang.Override protected void setUpQueryExpectations(java.lang.String query, java.lang.Object failure) throws java.lang.Exception { setUpEntityQueryExpectations(VdcQueryType.GetErrataForHost, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[0] }, getErrata(), failure); control.replay(); }
private void extractRemovedNetworks() { for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : getExistingIfaces().values()) { java.lang.String net = iface.getNetworkName(); if ((org.apache.commons.lang.StringUtils.isNotBlank(net)) && (!(attachedNetworksNames.contains(net)))) { removedNetworks.add(net); } } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(params.getVdsId(), removedNetworks); for (java.lang.String vmName : vmNames) { addViolation(EngineMessage.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, vmName); } }
@java.lang.Override protected boolean handleRefreshActiveModel(org.ovirt.engine.ui.frontend.communication.RefreshActiveModelEvent event) { return false; }

@java.lang.Override protected void ExecuteVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getBroker().glusterVolumeRebalanceStart(org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters().getVolumeName(), org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters().isFixLayoutOnly(), org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.getParameters().isForceAction()); org.ovirt.engine.core.vdsbroker.gluster.StartRebalanceGlusterVolumeVDSCommand.ProceedProxyReturnValue(); }

@org.junit.Test public void vmNotDuringSnapshotReturnsInvalidResultWhenInSnapshot() throws java.lang.Exception { when(snapshotDao.exists(vmId, SnapshotStatus.LOCKED)).thenReturn(true); org.ovirt.engine.core.bll.snapshots.SnapshotsValidatorTest.validateInvalidResult(validator.vmNotDuringSnapshot(vmId), VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_DURING_SNAPSHOT); }

private void updateSpiceUsbAutoShare(final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getSpiceUsbAutoShare(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { spice.getOptions().setUsbAutoShare(((java.lang.Boolean) (returnValue))); } })); }
@java.lang.Override protected boolean canDoAction() { if ((((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return failCanDoAction(VdcBllMessages.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } return super.canDoAction(); }
private void updateRngDeviceIfNecessary(org.ovirt.engine.core.compat.Guid vmBaseId, org.ovirt.engine.core.compat.Version customCompatibilityLevel, org.ovirt.engine.core.common.action.HasRngDevice updateParameters) { final org.ovirt.engine.core.compat.Version oldEffectiveVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(customCompatibilityLevel, () -> oldCluster.getCompatibilityVersion()); final org.ovirt.engine.core.compat.Version newEffectiveVersion = org.ovirt.engine.core.common.utils.CompatibilityVersionUtils.getEffective(customCompatibilityLevel, () -> getCluster().getCompatibilityVersion()); final java.util.Optional<org.ovirt.engine.core.common.businessentities.VmRngDevice> updatedDeviceOptional = rngDeviceUtils.createUpdatedRngDeviceIfNecessary(oldEffectiveVersion, newEffectiveVersion, vmBaseId, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContext()); if (updatedDeviceOptional.isPresent()) { updateParameters.setUpdateRngDevice(true); updateParameters.setRngDevice(updatedDeviceOptional.get()); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : hosts) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getVdsGroupDao().get(vds.getVdsGroupId()); java.lang.Integer cores = org.ovirt.engine.core.bll.scheduling.SlaValidator.getEffectiveCpuCores(vds, ((cluster != null) && (cluster.getCountThreadsAsCores()))); if ((cores != null) && ((vm.getNumOfCpus()) > cores)) { messages.addMessage(vds.getId(), VdcBllMessages.VAR__DETAIL__NOT_ENOUGH_CORES.toString()); org.ovirt.engine.core.bll.scheduling.policyunits.CPUPolicyUnit.log.debug("Host '{}' has less cores ({}) than vm cores ({})", vds.getName(), cores, vm.getNumOfCpus()); continue; } list.add(vds); } return list; }
public void signOut() { for (org.ovirt.engine.ui.uicommonweb.models.SearchableListModel listModel : getItems()) { listModel.stopRefresh(); } getEventList().stopRefresh(); getAlertList().stopRefresh(); getTaskList().stopRefresh(); getBookmarkList().stopRefresh(); getRoleListModel().stopRefresh(); getSystemPermissionListModel().stopRefresh(); getClusterPolicyListModel().stopRefresh(); if (org.ovirt.engine.ui.frontend.Frontend.getInstance().getIsUserLoggedIn()) { org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setHandleFailure(true); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { } }; setLoggedInUser(null); getSignedOutEvent().raise(this, EventArgs.Empty); org.ovirt.engine.ui.frontend.Frontend.getInstance().logoffAsync(org.ovirt.engine.ui.frontend.Frontend.getInstance().getLoggedInUser(), _asyncQuery); } }
public static org.ovirt.engine.core.common.errors.VdcBllMessages forValue(int value) { return org.ovirt.engine.core.common.errors.VdcBllMessages.values()[value]; }


private org.ovirt.engine.core.compat.Guid addAffinityGroup(java.util.List<org.ovirt.engine.core.compat.Guid> vmList, org.ovirt.engine.core.compat.Guid vdsGroupId, java.lang.Boolean isPositive) { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.scheduling.AffinityGroup ag = mock(org.ovirt.engine.core.common.scheduling.AffinityGroup.class); doReturn(id).when(ag).getId(); doReturn(isPositive).when(ag).isPositive(); doReturn(vmList).when(ag).getEntityIds(); doReturn(vdsGroupId).when(ag).getClusterId(); doReturn(true).when(ag).isEnforcing(); when(_affinityGroupDao.get(id)).thenReturn(ag); java.util.List<org.ovirt.engine.core.common.scheduling.AffinityGroup> agList = _affinityGroupDao.getAllAffinityGroupsByClusterId(vdsGroupId); agList.add(ag); when(_affinityGroupDao.getAllAffinityGroupsByClusterId(vdsGroupId)).thenReturn(agList); agList = _affinityGroupDao.getAll(); agList.add(ag); when(_affinityGroupDao.getAll()).thenReturn(agList); return id; }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Disk disk) { validateParameters(disk, "provisionedSize|size", "format", "interface"); org.ovirt.engine.core.common.action.AddDiskParameters params = new org.ovirt.engine.core.common.action.AddDiskParameters(); params.setDiskInfo(getMapper(org.ovirt.engine.api.model.Disk.class, org.ovirt.engine.api.model.Disk.class).map(disk, null)); if (((disk.isSetStorageDomains()) && (disk.getStorageDomains().isSetStorageDomains())) && (disk.getStorageDomains().getStorageDomains().get(0).isSetId())) { params.setStorageDomainId(org.ovirt.engine.core.compat.Guid.createGuidFromString(disk.getStorageDomains().getStorageDomains().get(0).getId())); } else if ((disk.isSetStorageDomains()) && (disk.getStorageDomains().getStorageDomains().get(0).isSetName())) { params.setStorageDomainId(getEntity(org.ovirt.engine.core.common.businessentities.storage_domains.class, SearchType.StorageDomain, ("Storage: name=" + (disk.getStorageDomains().getStorageDomains().get(0).getName()))).getId()); } return performCreation(VdcActionType.AddDisk, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetDiskByDiskId, org.ovirt.engine.core.common.queries.GetDiskByDiskIdParameters.class)); }
public static void GetAllVmTemplates(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.TemplateConverter(); org.ovirt.engine.core.common.queries.VdcQueryParametersBase params = new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllVmTemplates, params, aQuery); }

@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.ClearAllDismissedAuditLogsCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_CLEAR_ALL_DISMISSED_AUDIT_LOG : org.ovirt.engine.core.common.AuditLogType.USER_CLEAR_ALL_DISMISSED_AUDIT_LOG_FAILED; }
public java.util.Map<java.lang.String, java.util.List<java.util.Map<java.lang.String, java.lang.String>>> getHBAs() { return this.mVdsDynamic.getHBAs(); }

public void setStorageType(org.ovirt.engine.core.common.businessentities.StorageType value) { storageType = value; }



public void Manage() { if ((getWindow()) != null) { return; } org.ovirt.engine.core.compat.Guid storagePoolId = ((getEntity().getstorage_pool_id()) != null) ? getEntity().getstorage_pool_id().getValue() : org.ovirt.engine.core.compat.NGuid.Empty; org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkListModel clusterNetworkListModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkListModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network> dcNetworks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network>) (result)); org.ovirt.engine.ui.uicommonweb.models.ListModel networkToManage = createNetworkList(dcNetworks); clusterNetworkListModel.setWindow(networkToManage); networkToManage.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().assignDetachNetworksTitle()); networkToManage.setHashName("assign_networks"); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetNetworkList(_asyncQuery, storagePoolId); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Brick Directory should not contain any space") java.lang.String invalidBrickDirectoryContainsSpaceMsg();
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.VdsValidator validator = new org.ovirt.engine.core.bll.VdsValidator(org.ovirt.engine.core.bll.ActivateVdsCommand.getVds()); return ((validate(validator.exists())) && (validate(validator.validateStatusForActivation()))) && (validate(validator.validateUniqueId())); }
public static java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network> GetClusterNetworkList(org.ovirt.engine.core.compat.Guid clusterId) { org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValue = org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllNetworksByClusterId, new org.ovirt.engine.core.common.queries.VdsGroupQueryParamenters(clusterId)); if (((returnValue != null) && (returnValue.getSucceeded())) && ((returnValue.getReturnValue()) != null)) { return ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network>) (returnValue.getReturnValue())); } return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network>(); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.storage.LUNs)) { return false; } org.ovirt.engine.core.common.businessentities.storage.LUNs other = ((org.ovirt.engine.core.common.businessentities.storage.LUNs) (obj)); return ((((((((((((((((((java.util.Objects.equals(id, other.id)) && (java.util.Objects.equals(_lunConnections, other._lunConnections))) && (java.util.Objects.equals(lunMapping, other.lunMapping))) && (java.util.Objects.equals(physicalVolumeId, other.physicalVolumeId))) && ((deviceSize) == (other.deviceSize))) && ((pvSize) == (other.pvSize))) && ((lunType) == (other.lunType))) && (java.util.Objects.equals(pathsDictionary, other.pathsDictionary))) && (java.util.Objects.equals(pathsCapacity, other.pathsCapacity))) && (java.util.Objects.equals(vendorName, other.vendorName))) && (java.util.Objects.equals(productId, other.productId))) && (java.util.Objects.equals(serial, other.serial))) && (java.util.Objects.equals(vendorId, other.vendorId))) && (java.util.Objects.equals(volumeGroupId, other.volumeGroupId))) && (java.util.Objects.equals(status, other.status))) && (java.util.Objects.equals(diskId, other.diskId))) && (java.util.Objects.equals(diskAlias, other.diskAlias))) && (java.util.Objects.equals(storageDomainId, other.storageDomainId))) && (java.util.Objects.equals(storageDomainName, other.storageDomainName)); }
@java.lang.Override protected org.ovirt.engine.api.model.Template doPopulate(org.ovirt.engine.api.model.Template model, org.ovirt.engine.core.common.businessentities.VmTemplate entity) { if (!(model.isSetConsole())) { model.setConsole(new org.ovirt.engine.api.model.Console()); } model.getConsole().setEnabled((!(getConsoleDevicesForEntity(entity.getId()).isEmpty()))); if (!(model.isSetVirtioScsi())) { model.setVirtioScsi(new org.ovirt.engine.api.model.VirtIOSCSI()); } model.getVirtioScsi().setEnabled((!(org.ovirt.engine.api.restapi.util.VmHelper.getInstance().getVirtioScsiControllersForEntity(entity.getId()).isEmpty()))); java.util.List<org.ovirt.engine.core.common.businessentities.VmRngDevice> rngDevices = getRngDevices(entity.getId()); if ((rngDevices != null) && (!(rngDevices.isEmpty()))) { model.setRngDevice(org.ovirt.engine.api.restapi.types.RngDeviceMapper.map(rngDevices.get(0), null)); } return model; }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel storageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (target)); org.ovirt.engine.ui.uicommonweb.models.storage.StorageModelBehavior storageModelBehavior = behavior; java.util.List<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>) (returnValue)); dataCenters = storageModelBehavior.filterDataCenter(dataCenters); org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel.addEmptyDataCenterToList(dataCenters); org.ovirt.engine.core.common.businessentities.StoragePool oldSelectedItem = storageModel.getDataCenter().getSelectedItem(); storageModel.getDataCenter().setItems(dataCenters); if (oldSelectedItem != null) { storageModel.getDataCenter().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(dataCenters, new org.ovirt.engine.ui.uicommonweb.Linq.DataCenterPredicate(oldSelectedItem.getId()))); } else { storageModel.getDataCenter().setSelectedItem(((getStorage()) == null ? org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(dataCenters) : org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(dataCenters, new org.ovirt.engine.ui.uicommonweb.Linq.DataCenterPredicate(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel.UnassignedDataCenterId)))); } }
private void InitVdsBroker() { org.ovirt.engine.core.vdsbroker.VdsManager.log.infoFormat("Initialize vdsBroker ({0},{1})", _vds.getHostName(), _vds.getPort()); int clientTimeOut = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.vdsTimeout)) * 1000; int connectionTimeOut = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.vdsConnectionTimeout)) * 1000; int clientRetries = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.vdsRetries); if ((_vds.getPort()) == (JSONRPC_PORT)) { _vdsProxy = new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer(org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.createClient(_vds.getHostName(), _vds.getPort(), connectionTimeOut, clientTimeOut, clientRetries, org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EncryptHostCommunication))); } else { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerConnector, org.apache.commons.httpclient.HttpClient> returnValue = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcUtils.getConnection(_vds.getHostName(), _vds.getPort(), clientTimeOut, connectionTimeOut, clientRetries, org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerConnector.class, org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EncryptHostCommunication)); _vdsProxy = new org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerWrapper(returnValue.getFirst(), returnValue.getSecond()); } }

@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabHostView view = ((org.ovirt.engine.ui.webadmin.section.main.view.tab.MainTabHostView) (target)); view.maxSpmPriority = ((java.lang.Integer) (returnValue)); InitSpmPriorities1(); }

public java.util.Collection<java.lang.String> getReasonMessages() { java.util.List<java.lang.String> lines = new java.util.ArrayList<>(); for (java.util.Map.Entry<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.errors.VdcBllMessages, java.lang.String>> line : filteredOutReasons.entrySet()) { lines.add(line.getValue().getFirst().name()); lines.add(java.lang.String.format("$%1$s %2$s", "hostName", hostNames.get(line.getKey()))); lines.add(java.lang.String.format("$%1$s %2$s", "filterName", line.getValue().getSecond())); final java.util.List<java.lang.String> detailMessages = details.getMessages(line.getKey()); if ((detailMessages == null) || (detailMessages.isEmpty())) { lines.add(VdcBllMessages.SCHEDULING_HOST_FILTERED_REASON.name()); } else { lines.addAll(detailMessages); lines.add(VdcBllMessages.SCHEDULING_HOST_FILTERED_REASON_WITH_DETAIL.name()); } } return lines; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to create new Cluster") java.lang.String allowToCreateNewClusterRoleTreeTooltip();
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.VmPool pool) { validateParameters(pool, "name", "template.id|name", "cluster.id|name"); org.ovirt.engine.core.common.businessentities.VmTemplate template = getVmTemplate(pool); if (namedTemplate(pool)) { pool.getTemplate().setId(template.getId().toString()); } if (namedCluster(pool)) { pool.getCluster().setId(getClusterId(pool)); } org.ovirt.engine.core.common.businessentities.VmPool entity = map(pool); entity.setVmPoolType(VmPoolType.Automatic); org.ovirt.engine.core.common.businessentities.VM vm = mapToVM(pool, template); int size = (pool.isSetSize()) ? pool.getSize() : 1; org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters params = new org.ovirt.engine.core.common.action.AddVmPoolWithVmsParameters(entity, vm, size, (-1)); params.setConsoleEnabled((!(getConsoleDevicesForEntity(template.getId()).isEmpty()))); params.setVirtioScsiEnabled((!(org.ovirt.engine.api.restapi.util.VmHelper.getInstance().getVirtioScsiControllersForEntity(template.getId()).isEmpty()))); return performCreate(VdcActionType.AddVmPoolWithVms, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetVmPoolById, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }


private void UpdateActionAvailability() { getCopyCommand().setIsExecutionAllowed(((((getSelectedItems()) != null) && ((getSelectedItems().size()) > 0)) && (isCopyCommandAvailable()))); if (((((systemTreeContext) != null) && ((systemTreeContext.getSystemTreeSelectedItem()) != null)) && ((systemTreeContext.getSystemTreeSelectedItem().getType()) == (org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemType.DataCenter))) && ((((org.ovirt.engine.core.common.businessentities.storage_pool) (systemTreeContext.getSystemTreeSelectedItem().getEntity())).getQuotaEnforcementType()) != (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED))) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk> disks = ((getSelectedItems()) != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Disk>) (getSelectedItems())) : null; getChangeQuotaCommand().setIsAvailable(true); getChangeQuotaCommand().setIsExecutionAllowed(true); if ((disks != null) && (!(disks.isEmpty()))) { for (org.ovirt.engine.core.common.businessentities.Disk diskItem : disks) { if ((diskItem.getDiskStorageType()) != (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE)) { getChangeQuotaCommand().setIsExecutionAllowed(false); break; } } } else { getChangeQuotaCommand().setIsExecutionAllowed(false); } } }
private void unplugFromExternalNetwork() { new org.ovirt.engine.core.bll.network.ExternalNetworkManager(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic(), getNetwork()).deallocateIfExternal(); }
@java.lang.Override public final void freeMacs(java.util.List<java.lang.String> macs) { java.util.List<java.lang.String> macsToRelease = filterOutUnusedMacs(macs); if (!(macsToRelease.isEmpty())) { getStrategyForMacRelease().releaseMacsOnCommit(macsToRelease); } }
@java.lang.Override protected void executeVdsIdCommand() { if ((_vdsManager) == null) { org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVDSReturnValue().setSucceeded(false); return; } org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = runHibernateBrokerVDSCommand(); if (retVal.getSucceeded()) { changeVmStatusToSavingState(); org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVDSReturnValue().setSucceeded(true); } else { log.errorFormat("Failed to hibernate vm '{0}' in vds = {1} : {2}, error = {3}", org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getParameters().getVmId(), org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVds().getId(), org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVds().getName(), retVal.getExceptionString()); org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVDSReturnValue().setSucceeded(false); org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVDSReturnValue().setExceptionString(retVal.getExceptionString()); org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVDSReturnValue().setExceptionObject(retVal.getExceptionObject()); org.ovirt.engine.core.vdsbroker.HibernateVDSCommand.getVDSReturnValue().setVdsError(retVal.getVdsError()); } }
protected void syncSearch(org.ovirt.engine.core.common.queries.QueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase, org.ovirt.engine.ui.uicommonweb.models.AsyncQuery<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> asyncCallback) { vdcQueryParametersBase.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(vdcQueryType, vdcQueryParametersBase, asyncCallback); setIsQueryFirstTime(false); }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(getName()).append(" {id=").append(getId()).append(", description=").append(getDescription()).append(", comment=").append(getComment()).append(", subnet=").append(getSubnet()).append(", gateway=").append(getGateway()).append(", type=").append(getType()).append(", vlanId=").append(getVlanId()).append(", stp=").append(getStp()).append(", dataCenterId=").append(getDataCenterId()).append(", mtu=").append(getMtu()).append(", vmNetwork=").append(isVmNetwork()).append(", cluster=").append(getCluster()).append(", providedBy=").append(getProvidedBy()).append(", label=").append(getLabel()).append("}"); return builder.toString(); }


@java.lang.Override protected boolean canDoAction() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.Role oldRole = org.ovirt.engine.core.bll.UpdateRoleCommand.getRoleDao().get(org.ovirt.engine.core.bll.UpdateRoleCommand.getRole().getId()); if (oldRole == null) { addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_UPDATE_ROLE_ID); returnValue = false; } else { if (checkIfRoleIsReadOnly(org.ovirt.engine.core.bll.UpdateRoleCommand.getReturnValue().getCanDoActionMessages())) { returnValue = false; addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE); } else if ((!(org.apache.commons.lang.StringUtils.equals(org.ovirt.engine.core.bll.UpdateRoleCommand.getRole().getName(), oldRole.getName()))) && ((org.ovirt.engine.core.bll.UpdateRoleCommand.getRoleDao().getByName(org.ovirt.engine.core.bll.UpdateRoleCommand.getRole().getName())) != null)) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED); returnValue = false; } else if ((org.ovirt.engine.core.bll.UpdateRoleCommand.getRole().getType()) != (oldRole.getType())) { addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_UPDATE_ROLE_TYPE); returnValue = false; } } if (!returnValue) { addCanDoActionMessage(VdcBllMessages.VAR__TYPE__ROLE); addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE); } return returnValue; }




@org.ovirt.engine.ui.uicompat.DefaultStringValue("Hook Content") java.lang.String viewContentGlusterHookTitle();

private org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilderBase createBuilder() { if (org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.isOldClusterVersion(vm.getVdsGroupCompatibilityVersion())) { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmOldInfoBuilder(vm, createInfo); } else { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder(vm, org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.getParameters().getVdsId(), createInfo); } }
private static void logAndFailTaskWithoutVdsmId(final org.ovirt.engine.core.common.businessentities.AsyncTasks task) { org.ovirt.engine.core.bll.AsyncTaskManager.log.infoFormat("Failing task with out vdsm id and AsyncTaskType {0} : Task '{1}' Parent Command {2}", task.getTaskType(), task.getTaskId(), task.getaction_type()); task.getTaskParameters().setTaskGroupSuccess(false); org.ovirt.engine.core.bll.job.ExecutionHandler.endTaskStep(task.getStepId(), JobExecutionStatus.FAILED); org.ovirt.engine.core.bll.AsyncTaskManager.removeTaskFromDbByTaskId(task.getTaskId()); if ((task.getTaskType()) == (org.ovirt.engine.core.common.asynctasks.AsyncTaskType.unknown)) { org.ovirt.engine.core.bll.AsyncTaskManager.log.infoFormat("Not calling endAction for task with out vdsm id and AsyncTaskType {0} : Task '{1}' Parent Command {2}", task.getTaskType(), task.getTaskId(), task.getaction_type()); return; } org.ovirt.engine.core.compat.NGuid stepId = task.getStepId(); org.ovirt.engine.core.bll.job.ExecutionContext context = null; if (stepId != null) { context = org.ovirt.engine.core.bll.job.ExecutionHandler.createFinalizingContext(stepId.getValue()); } org.ovirt.engine.core.bll.Backend.getInstance().endAction(task.getaction_type(), task.getActionParameters(), new org.ovirt.engine.core.bll.context.CommandContext(context)); }

private void addReportedIpConfiguration(org.ovirt.engine.core.common.businessentities.network.ReportedConfigurations result) { if (!(isPrimaryAddressExist())) { return; } org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol definedBootProtocol = getPrimaryAddress().getBootProtocol(); result.add(ReportedConfigurationType.BOOT_PROTOCOL, iface.getBootProtocol(), definedBootProtocol); if ((definedBootProtocol == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.STATIC_IP)) && ((iface.getBootProtocol()) == definedBootProtocol)) { result.add(ReportedConfigurationType.NETMASK, iface.getSubnet(), getPrimaryAddress().getNetmask(), isNetworkSubnetInSync()); result.add(ReportedConfigurationType.IP_ADDRESS, iface.getAddress(), getPrimaryAddress().getAddress()); result.add(ReportedConfigurationType.GATEWAY, iface.getGateway(), getPrimaryAddress().getGateway()); } }

public static java.util.List<java.lang.String> runAndAssertCanDoActionFailure(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.common.errors.VdcBllMessages message) { boolean canDoAction = command.canDoAction(); java.util.List<java.lang.String> canDoActionMessages = command.getReturnValue().getCanDoActionMessages(); assertFalse("Command's canDoAction expected to fail, but succeeded", canDoAction); assertTrue(java.text.MessageFormat.format("canDoAction messages doesn''t contain expected message: {0}, messages are: {1}", message.name(), canDoActionMessages), canDoActionMessages.contains(message.name())); return canDoActionMessages; }
@java.lang.Override public void onBootstrap() { super.onBootstrap(); com.google.gwt.user.client.Window.setTitle(dynamicMessages.applicationTitle()); org.ovirt.engine.ui.webadmin.uimode.UiModeData uiModeData = org.ovirt.engine.ui.webadmin.uimode.UiModeData.instance(); if (uiModeData != null) { handleUiMode(uiModeData); } org.ovirt.engine.ui.webadmin.plugin.restapi.EngineSessionTimeoutData engineSessionTimeoutData = org.ovirt.engine.ui.webadmin.plugin.restapi.EngineSessionTimeoutData.instance(); if (engineSessionTimeoutData != null) { restApiSessionManager.setSessionTimeout(engineSessionTimeoutData.getValue()); } placeManager.revealCurrentPlace(); }
@java.lang.Override protected void perform() { java.lang.String iface = null; int index = 0; if (org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getCompatibilityVersion().greaterOrEquals(Version.v4_0)) { iface = org.ovirt.engine.core.bll.utils.VmDeviceUtils.getCdInterface(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm()); index = org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.getCdDeviceIndex(iface); } cdImagePath = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.cdPathWindowsToLinux(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getParameters().getCdImagePath(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getRunOnVds()); setActionReturnValue(runVdsCommand(VDSCommandType.ChangeDisk, new org.ovirt.engine.core.common.vdscommands.ChangeDiskVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVdsId(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getId(), iface, index, cdImagePath)).getReturnValue()); org.ovirt.engine.core.bll.VmHandler.updateCurrentCd(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVdsId(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm(), org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getParameters().getCdImagePath()); org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.setSucceeded(true); }

@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if ((ev.matchesDefinition(EntityModel.entityChangedEventDefinition)) && (sender == (getIsWipeAfterDelete()))) { wipeAfterDelete_EntityChanged(args); } else if ((ev.matchesDefinition(EntityModel.entityChangedEventDefinition)) && (sender == (getIsAttachDisk()))) { attachDisk_EntityChanged(args); } else if ((ev.matchesDefinition(ListModel.entityChangedEventDefinition)) && (sender == (getIsInternal()))) { isInternal_EntityChanged(); } else if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getVolumeType()))) { volumeType_SelectedItemChanged(); } else if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getDiskInterface()))) { DiskInterface_SelectedItemChanged(); } else if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getDataCenter()))) { datacenter_SelectedItemChanged(); } else if ((ev.matchesDefinition(ListModel.selectedItemChangedEventDefinition)) && (sender == (getStorageDomain()))) { storageDomain_SelectedItemChanged(); } else if ((ev.matchesDefinition(org.ovirt.engine.ui.frontend.Frontend.getInstance().getQueryStartedEventDefinition())) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(org.ovirt.engine.ui.frontend.Frontend.getInstance().getCurrentContext(), getHash()))) { frontend_QueryStarted(); } else if ((ev.matchesDefinition(org.ovirt.engine.ui.frontend.Frontend.getInstance().getQueryCompleteEventDefinition())) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(org.ovirt.engine.ui.frontend.Frontend.getInstance().getCurrentContext(), getHash()))) { frontend_QueryComplete(); } }
private void nameNotChangedOrNotTakenTest(org.hamcrest.Matcher<org.ovirt.engine.core.bll.ValidationResult> matcher) { org.ovirt.engine.core.common.businessentities.network.NetworkQoS otherQos = new org.ovirt.engine.core.common.businessentities.network.NetworkQoS(); allQos.add(otherQos); allQos.add(oldQos); otherQos.setName("foo"); oldQos.setName("bar"); assertThat(validator.nameNotChangedOrNotTaken(), matcher); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getVmPoolDao(); vmDao = dbFacade.getVmDao(); existingVmPool = dao.get(org.ovirt.engine.core.dao.VmPoolDAOTest.EXISTING_VM_POOL_ID); deletableVmPool = dao.get(org.ovirt.engine.core.dao.VmPoolDAOTest.DELETABLE_VM_POOL_ID); newVmPool = new org.ovirt.engine.core.common.businessentities.VmPool(); newVmPool.setName("New VM Pool"); newVmPool.setVmPoolDescription("This is a new VM pool."); newVmPool.setVdsGroupId(org.ovirt.engine.core.dao.VmPoolDAOTest.VDS_GROUP_ID); newVmPoolMap = new org.ovirt.engine.core.common.businessentities.VmPoolMap(org.ovirt.engine.core.dao.VmPoolDAOTest.FREE_VM_ID, org.ovirt.engine.core.dao.VmPoolDAOTest.EXISTING_VM_POOL_ID); }
@org.junit.Test public void portIsInvalid() { assertThat(validator.portIsValid(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_VDS_WITH_INVALID_SSH_PORT)); }
public void install() { final org.ovirt.engine.core.common.businessentities.VDS host = ((org.ovirt.engine.core.common.businessentities.VDS) (getSelectedItem())); org.ovirt.engine.ui.uicommonweb.models.hosts.InstallModel model = new org.ovirt.engine.ui.uicommonweb.models.hosts.InstallModel(); model.setVds(host); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().installHostTitle()); model.setHelpTag(HelpTag.install_host); model.setHashName("install_host"); model.getOVirtISO().setIsAvailable(false); model.getOverrideIpTables().setIsAvailable(false); model.getHostVersion().setEntity(host.getHostOs()); model.getHostVersion().setIsAvailable(false); getWindow().startProgress(null); if ((host.getVdsType()) == (org.ovirt.engine.core.common.businessentities.VDSType.oVirtNode)) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getoVirtISOsList(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.hosts.InstallModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.InstallModel) (target)); java.util.ArrayList<org.ovirt.engine.core.compat.RpmVersion> isos = ((java.util.ArrayList<org.ovirt.engine.core.compat.RpmVersion>) (returnValue)); java.util.Collections.sort(isos, new java.util.Comparator<org.ovirt.engine.core.compat.RpmVersion>() { @java.lang.Override public int compare(org.ovirt.engine.core.compat.RpmVersion rpmV1, org.ovirt.engine.core.compat.RpmVersion rpmV2) { return org.ovirt.engine.core.common.utils.RpmVersionUtils.compareRpmParts(rpmV2.getRpmName(), rpmV1.getRpmName()); } }); model.getOVirtISO().setItems(isos); model.getOVirtISO().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(isos)); model.getOVirtISO().setIsAvailable(true); model.getOVirtISO().setIsChangable((!(isos.isEmpty()))); model.getHostVersion().setIsAvailable(true); if (isos.isEmpty()) { model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().thereAreNoISOversionsVompatibleWithHostCurrentVerMsg()); } addInstallCommands(model, host, isos.isEmpty()); getWindow().stopProgress(); } }), host.getId()); } else { model.getUserPassword().setIsAvailable(true); model.getUserPassword().setIsChangable(true); org.ovirt.engine.core.compat.Version v3 = new org.ovirt.engine.core.compat.Version(3, 0); boolean isLessThan3 = (host.getVdsGroupCompatibilityVersion().compareTo(v3)) < 0; if (!isLessThan3) { model.getOverrideIpTables().setIsAvailable(true); model.getOverrideIpTables().setEntity(true); } addInstallCommands(model, host, false); getWindow().stopProgress(); } }
public org.ovirt.engine.core.common.businessentities.VmInit buildCloudInitParameters() { org.ovirt.engine.core.common.businessentities.VmInit vmInit = new org.ovirt.engine.core.common.businessentities.VmInit(); if (getHostnameEnabled()) { vmInit.setHostname(((java.lang.String) (getHostname().getEntity()))); } if (getRootPasswordEnabled()) { vmInit.setRootPassword(((java.lang.String) (getRootPassword().getEntity()))); } if (getAuthorizedKeysEnabled()) { vmInit.setAuthorizedKeys(((java.lang.String) (getAuthorizedKeys().getEntity()))); } if (((java.lang.Boolean) (getRegenerateKeysEnabled().getEntity()))) { vmInit.setRegenerateKeys(java.lang.Boolean.TRUE); } if (((java.lang.Boolean) (getNetworkEnabled().getEntity()))) { saveNetworkFields(); if (!(networkMap.isEmpty())) { for (java.util.Map.Entry<java.lang.String, org.ovirt.engine.core.common.businessentities.VmInitNetwork> entry : networkMap.entrySet()) { org.ovirt.engine.core.common.businessentities.VmInitNetwork params = entry.getValue(); if ((params.getBootProtocol()) == (org.ovirt.engine.core.common.businessentities.network.NetworkBootProtocol.DHCP)) { params.setIp(null); params.setNetmask(null); params.setGateway(null); } params.setStartOnBoot(networkStartOnBoot.contains(entry.getKey())); params.setName(entry.getKey()); } vmInit.setNetworks(new java.util.ArrayList(networkMap.values())); } } vmInit.setDnsServers(((java.lang.String) (getDnsServers().getEntity()))); vmInit.setDnsSearch(((java.lang.String) (getDnsSearchDomains().getEntity()))); vmInit.setCustomScript(((java.lang.String) (getCustomScript().getEntity()))); return vmInit; }
private <T> T execute(java.util.concurrent.Callable<T> callable) { try { return callable.call(); } catch (com.woorea.openstack.base.client.OpenStackResponseException e) { executeFailedMessages.add(VdcBllErrors.CINDER_ERROR.name()); executeFailedMessages.add(java.lang.String.format("$cinderException %1$s", e.getMessage())); throw e; } catch (java.lang.Exception e) { throw new java.lang.RuntimeException(e); } }


private org.ovirt.engine.core.common.businessentities.storage.VolumeType getVolumeTypeForDomain() { if ((volumeTypeForDomain) == null) { org.ovirt.engine.core.common.businessentities.StorageDomainStatic sdStatic = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainStaticDao().get(storageDomainId); volumeTypeForDomain = org.ovirt.engine.core.bll.HibernateVmCommand.getMemoryVolumeTypeForStorageDomain(sdStatic.getStorageType()); } return volumeTypeForDomain; }
public void remove() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeRolesTitle()); model.setHelpTag(HelpTag.remove_role); model.setHashName("remove_role"); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.Role role : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.Role>cast(getSelectedItems())) { list.add(role.getname()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnRemove", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
private void connectToConsoles() { java.lang.StringBuilder errorMessages = null; final java.util.List<org.ovirt.engine.core.common.businessentities.VM> list = getSelectedItems(); if ((list == null) || (list.isEmpty())) { return; } for (org.ovirt.engine.core.common.businessentities.VM vm : list) { try { consoleModelsCache.getVmConsolesForVm(vm).connect(); } catch (org.ovirt.engine.ui.uicommonweb.models.VmConsoles e) { final java.lang.String errorMessage = e.getLocalizedErrorMessage(); if (errorMessage != null) { if (errorMessages == null) { errorMessages = new java.lang.StringBuilder(); } else { errorMessages.append("\r\n"); } errorMessages.append(vm.getName()).append(" - ").append(errorMessage); } } } if (errorMessages != null) { errorPopupManager.show(errorMessages.toString()); } }
@java.lang.Override public void validateEnums(org.ovirt.engine.api.model.VM vm) { if (vm.isSetType()) { validateEnum(org.ovirt.engine.api.model.VmType.class, vm.getType(), true); } if (vm.isSetUsb()) { usbValidator.validateEnums(vm.getUsb()); } if (vm.isSetOs()) { osValidator.validateEnums(vm.getOs()); } if (vm.isSetDisplay()) { displayValidator.validateEnums(vm.getDisplay()); } if (vm.isSetPlacementPolicy()) { placementPolicyValidator.validateEnums(vm.getPlacementPolicy()); } if (vm.isSetPayloads()) { for (org.ovirt.engine.api.model.Payload payload : vm.getPayloads().getPayload()) { payloadValidator.validateEnums(payload); } } if ((vm.isSetInitialization()) && (vm.getInitialization().isSetConfiguration())) { configurationValidator.validateEnums(vm.getInitialization().getConfiguration()); } }
protected void setVirtioScsiController(org.ovirt.engine.api.model.VM model) { if (!(model.isSetVirtioScsi())) { model.setVirtioScsi(new org.ovirt.engine.api.model.VirtIOSCSI()); } model.getVirtioScsi().setEnabled((!(org.ovirt.engine.api.restapi.util.VmHelper.getInstance().getVirtioScsiControllersForEntity(new org.ovirt.engine.core.compat.Guid(model.getId())).isEmpty()))); }
@java.lang.Override protected void performBootstrap() { super.performBootstrap(); com.google.gwt.user.client.Window.setTitle(dynamicMessages.applicationTitle()); org.ovirt.engine.ui.webadmin.uimode.UiModeData uiModeData = org.ovirt.engine.ui.webadmin.uimode.UiModeData.instance(); if (uiModeData != null) { handleUiMode(uiModeData); } placeManager.revealCurrentPlace(); }
public boolean initGlusterHost(org.ovirt.engine.core.common.businessentities.VDS vds) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterHostUUID, new org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase(vds.getId())); if ((returnValue.getSucceeded()) && ((returnValue.getReturnValue()) != null)) { org.ovirt.engine.core.compat.Guid addedServerUuid = org.ovirt.engine.core.compat.Guid.createGuidFromString(((java.lang.String) (returnValue.getReturnValue()))); if (hostUuidExists(vds, addedServerUuid)) { setNonOperational(vds, NonOperationalReason.GLUSTER_HOST_UUID_ALREADY_EXISTS, null); return false; } saveGlusterHostUuid(vds, addedServerUuid); } else { setNonOperational(vds, NonOperationalReason.GLUSTER_HOST_UUID_NOT_FOUND, null); return false; } refreshGlusterStorageDevices(vds); boolean ret = initGlusterPeerProcess(vds); glusterServerDao.updatePeerStatus(vds.getId(), (ret == true ? org.ovirt.engine.core.common.businessentities.gluster.PeerStatus.CONNECTED : org.ovirt.engine.core.common.businessentities.gluster.PeerStatus.DISCONNECTED)); return ret; }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.StorageDomain storage = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageDomainDao().getForStoragePool(org.ovirt.engine.core.bll.RemoveVmFromImportExportCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.RemoveVmFromImportExportCommand.getParameters().getStoragePoolId()); if (storage == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); } if (((storage.getStatus()) == null) || ((storage.getStatus()) != (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL); } if ((storage.getStorageDomainType()) != (org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); } if ((getVm()) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND_ON_EXPORT_DOMAIN); } org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.RemoveVmFromImportExportCommand.getVmDao().get(org.ovirt.engine.core.bll.RemoveVmFromImportExportCommand.getVmId()); if ((vm != null) && ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked))) { if (org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.hasTasksForEntityIdAndAction(vm.getId(), VdcActionType.ExportVm)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_DURING_EXPORT); } } return true; }
public org.ovirt.engine.core.vdsbroker.irsbroker.IIrsServer getIrsProxy() { if ((getmIrsProxy()) == null) { final org.ovirt.engine.core.common.businessentities.StoragePool storagePool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolDao().get(_storagePoolId); if ((storagePool.getStatus()) != (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Uninitialized)) { java.lang.String host = org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Suppress, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.String>() { @java.lang.Override public java.lang.String runInTransaction() { return gethostFromVds(); } }); if (host != null) { int clientTimeOut = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.vdsTimeout)) * 1000; int connectionTimeOut = (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.vdsConnectionTimeout)) * 1000; int clientRetries = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.vdsRetries); irsProxy = org.ovirt.engine.core.vdsbroker.jsonrpc.TransportFactory.createIrsServer(getProtocol(), host, getmIrsPort(), clientTimeOut, connectionTimeOut, clientRetries); runStoragePoolUpEvent(storagePool); } } } return getmIrsProxy(); }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = super.canDoAction(); oldPool = org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPoolDAO().get(org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPool().getVmPoolId()); if (returnValue && ((oldPool) == null)) { addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_UPDATE_POOL_NOT_FOUND); returnValue = false; } else if (returnValue && ((org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getParameters().getVmsCount()) < 0)) { addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_DECREASE_VMS_FROM_POOL); returnValue = false; } return returnValue; }


@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeBrickAdd(java.lang.String volumeName, java.lang.String[] bricks, int replicaCount, int stripeCount, boolean force) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.addBrick").withParameter("volumeName", volumeName).withParameter("brickList", new java.util.ArrayList<java.lang.String>(java.util.Arrays.asList(bricks))).withParameter("replicaCount", replicaCount).withParameter("stripeCount", stripeCount).withParameter("force", force).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }
private void initListerners(final org.ovirt.engine.ui.uicommonweb.models.storage.DisksAllocationModel model) { model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (args instanceof org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs changedArgs = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)); if ("Disks".equals(changedArgs.propertyName)) { addDiskList(model); } else if ("QuotaEnforcmentType".equals(changedArgs.propertyName)) { updateColumnsAvailability(model); updateListHeader(model); } } } }); }



public static void updateImportedVmUsbPolicy(org.ovirt.engine.core.common.businessentities.VmBase vmBase) { if ((vmBase.getOs().isLinux()) && (vmBase.getUsbPolicy().equals(UsbPolicy.ENABLED_LEGACY))) { vmBase.setUsbPolicy(UsbPolicy.DISABLED); } }
@org.ovirt.engine.ui.webadmin.DefaultMessage("All references to objects that reside on Storage Domain {0} in the database will be removed. You may need to manually clean the storage in order to reuse it.") java.lang.String storageDestroyPopupMessageLabel(java.lang.String storageName);

private static void updateNetworkDetailsInInterface(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, java.util.Map<java.lang.String, java.lang.Object> network, boolean bridgedNetwork, org.ovirt.engine.core.common.businessentities.network.HostNetworkQos qos, org.ovirt.engine.core.common.businessentities.VDS host, org.ovirt.engine.core.common.businessentities.network.Network net) { if (iface != null) { iface.setNetworkName(net.getName()); if (org.apache.commons.lang.StringUtils.equals(iface.getNetworkName(), org.ovirt.engine.core.utils.NetworkUtils.getEngineNetwork())) { iface.setType(((iface.getType()) | (VdsInterfaceType.MANAGEMENT.getValue()))); } iface.setAddress(net.getAddr()); iface.setSubnet(net.getSubnet()); iface.setBridged(bridgedNetwork); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGatewayIfNecessary(iface, host, net.getGateway()); if (bridgedNetwork) { java.util.Map<java.lang.String, java.lang.Object> networkConfig = ((java.util.Map<java.lang.String, java.lang.Object>) (network.get("cfg"))); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.addBootProtocol(networkConfig, host, iface); } iface.setQos(qos); } }
public static void LogoffAsync(org.ovirt.engine.core.common.users.VdcUser vdcUser, final org.ovirt.engine.ui.frontend.AsyncQuery callback) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Frontend: Invoking async Logoff."); org.ovirt.engine.ui.frontend.gwtservices.GenericApiGWTServiceAsync service = GenericApiGWTServiceAsync.Util.getInstance(); service.logOff(vdcUser, new com.google.gwt.user.client.rpc.AsyncCallback<VdcReturnValueBase>() { @java.lang.Override public void onSuccess(final VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Succesful returned result from Logoff."); callback.asyncCallback.onSuccess(callback.getModel(), result); if ((org.ovirt.engine.ui.frontend.Frontend.getLoginHandler()) != null) { org.ovirt.engine.ui.frontend.Frontend.getLoginHandler().onLogout(); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { if (org.ovirt.engine.ui.frontend.Frontend.ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ("Failed to execute Logoff: " + caught), caught); org.ovirt.engine.ui.frontend.Frontend.getEventsHandler().runQueryFailed(null); org.ovirt.engine.ui.frontend.Frontend.failureEventHandler(caught); callback.asyncCallback.onSuccess(callback.getModel(), null); } }); }

public org.ovirt.engine.core.bll.CommandMultiAsyncTasks getCommandMultiAsyncTasks() { org.ovirt.engine.core.bll.CommandMultiAsyncTasks entityInfo = null; synchronized(org.ovirt.engine.core.bll.tasks.CommandAsyncTask._lockObject) { entityInfo = org.ovirt.engine.core.bll.tasks.CommandAsyncTask._multiTasksByCommandIds.get(getCommandId()); } return entityInfo; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow changing VM administrative properties") java.lang.String allowChangingVmAdminPropertiesRoleTreeTooltip();
@java.lang.Override public org.ovirt.engine.core.compat.Guid getStorageDomainId() { if ((cachedStorageDomainId) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskDummiesForMemSize = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies(org.ovirt.engine.core.bll.HibernateVmCommand.getVm().getTotalMemorySizeInBytes(), MemoryUtils.METADATA_SIZE_IN_BYTES); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = org.ovirt.engine.core.bll.memory.MemoryStorageHandler.getInstance().findStorageDomainForMemory(org.ovirt.engine.core.bll.HibernateVmCommand.getStoragePoolId(), diskDummiesForMemSize, org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.HibernateVmCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.HibernateVmCommand.getVmId()), false, false, false), org.ovirt.engine.core.bll.HibernateVmCommand.getVm()); if (storageDomain != null) { cachedStorageDomainId = storageDomain.getId(); } } return cachedStorageDomainId; }
@java.lang.Override protected boolean canDoAction() { return (super.canDoAction()) && (validate(networkClusterAttachmentExists())); }


private void validateUpdateWipeAfterDelete(org.ovirt.engine.core.common.businessentities.VMStatus status) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = createDiskImage(); disk.setReadOnly(false); when(diskDao.get(diskImageGuid)).thenReturn(disk); command.getParameters().getDiskInfo().setReadOnly(false); command.getParameters().getDiskInfo().setWipeAfterDelete(true); initializeCommand(createVm(status)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateSuccess(command); }
public static void GetDomainListViaPublic(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, boolean filterInternalDomain) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? new java.util.ArrayList<java.lang.String>(((java.util.ArrayList<java.lang.String>) (source))) : new java.util.ArrayList<java.lang.String>(); } }; org.ovirt.engine.core.common.queries.GetDomainListParameters tempVar = new org.ovirt.engine.core.common.queries.GetDomainListParameters(); tempVar.setFilterInternalDomain(filterInternalDomain); org.ovirt.engine.ui.frontend.Frontend.RunPublicQuery(VdcQueryType.GetDomainList, tempVar, aQuery); }



private void onRemove() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); if ((model.getProgress()) != null) { return; } java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (java.util.Map.Entry<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.ui.uicommonweb.models.EntityModel> entry : vmsRemoveMap.entrySet()) { list.add(new org.ovirt.engine.core.common.action.RemoveVmParameters(entry.getKey(), false, ((java.lang.Boolean) (entry.getValue().getEntity())))); } model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.RemoveVm, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); } }, model); }
public void EnsureAsyncSearchStopped() { getTimer().stop(); if (((getAsyncResult()) != null) && (!(getAsyncResult().getId().equals(NGuid.Empty)))) { setAsyncResult(null); } }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((id) == null ? 0 : id.hashCode()); result = (prime * result) + ((defaultEndTime) == null ? 0 : defaultEndTime.hashCode()); result = (prime * result) + ((defaultStartTime) == null ? 0 : defaultStartTime.hashCode()); result = (prime * result) + (defaultTimeInDays); result = (prime * result) + ((parameters) == null ? 0 : parameters.hashCode()); result = (prime * result) + ((vdsGroupId) == null ? 0 : vdsGroupId.hashCode()); result = (prime * result) + ((vdsGroupName) == null ? 0 : vdsGroupName.hashCode()); result = (prime * result) + (vmPoolAssignedCount); result = (prime * result) + ((description) == null ? 0 : description.hashCode()); result = (prime * result) + ((name) == null ? 0 : name.hashCode()); result = (prime * result) + (vmPoolRunningCount); result = (prime * result) + ((type) == null ? 0 : type.hashCode()); result = (prime * result) + (maxAssignedVmsPerUser); return result; }
@java.lang.Override public org.ovirt.engine.api.model.NIC update(org.ovirt.engine.api.model.NIC resource) { validateParameters(resource, requiredUpdateFields); org.ovirt.engine.core.common.businessentities.network network = findNetwork(resource); if (network != null) { resource.getNetwork().setName(network.getname()); resource.getNetwork().setId(null); } return performUpdate(resource, entityResolver, updateType, updateParametersProvider); }

@org.junit.Test public void testOtherFieldsNotValidatedInImport() { org.ovirt.engine.core.common.action.ImportVmParameters parameters = createParameters(); java.lang.String tooLongString = org.ovirt.engine.core.utils.RandomUtils.instance().nextPropertyString(((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.GENERAL_MAX_SIZE) + 1)); parameters.getVm().setUserDefinedProperties(tooLongString); parameters.setImportAsNewEntity(true); org.ovirt.engine.core.bll.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> command = new org.ovirt.engine.core.bll.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters>(parameters) { @java.lang.Override protected void initUser() { } @java.lang.Override public org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup() { return null; } }; command.postConstruct(); java.util.Set<javax.validation.ConstraintViolation<org.ovirt.engine.core.common.action.ImportVmParameters>> validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, command.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertTrue(validate.isEmpty()); parameters.getVm().setUserDefinedProperties(tooLongString); parameters.setImportAsNewEntity(false); command = new org.ovirt.engine.core.bll.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters>(parameters) { @java.lang.Override protected void initUser() { } @java.lang.Override public org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup() { return null; } }; command.postConstruct(); validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, command.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertTrue(validate.isEmpty()); }

@java.lang.Override protected void changeDefualtHost() { super.changeDefualtHost(); doChangeDefautlHost(vm.getDedicatedVmForVds()); }
protected Q setUpSpyQuery(P parameters) throws java.lang.Exception { org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacadeMock = org.ovirt.engine.core.bll.AbstractQueryTest.mock(org.ovirt.engine.core.dal.dbbroker.DbFacade.class); org.ovirt.engine.core.common.businessentities.aaa.DbUser dbUserMock = org.ovirt.engine.core.bll.AbstractQueryTest.mock(org.ovirt.engine.core.common.businessentities.aaa.DbUser.class); when(engineSessionDao.save(org.ovirt.engine.core.bll.AbstractQueryTest.any(org.ovirt.engine.core.common.businessentities.EngineSession.class))).thenReturn(org.ovirt.engine.core.utils.RandomUtils.instance().nextLong()); when(engineSessionDao.remove(org.ovirt.engine.core.bll.AbstractQueryTest.any(java.lang.Long.class))).thenReturn(1); sessionDataContainer.setUser(parameters.getSessionId(), dbUserMock); java.lang.reflect.Constructor<? extends Q> con = getQueryType().getConstructor(getParameterType()); query = org.ovirt.engine.core.bll.AbstractQueryTest.spy(con.newInstance(parameters)); doReturn(sessionDataContainer).when(query).getSessionDataContainer(); doReturn(dbFacadeMock).when(query).getDbFacade(); doReturn(dbUserMock).when(query).initUser(); initQuery(query); query.postConstruct(); return query; }
public static org.ovirt.engine.core.common.businessentities.ad_groups getGroupByGroupGuid(org.ovirt.engine.core.compat.Guid groupGuid) { return null; }

private boolean canRemoveVmImageDisk() { java.util.List<org.ovirt.engine.core.common.businessentities.Disk> diskList = java.util.Arrays.asList(getDisk()); if (!(listVms.isEmpty())) { org.ovirt.engine.core.compat.Guid storagePoolId = listVms.get(0).getStoragePoolId(); org.ovirt.engine.core.common.businessentities.storage_pool sp = org.ovirt.engine.core.bll.RemoveDiskCommand.getStoragePoolDAO().get(storagePoolId); if (!(validate(new org.ovirt.engine.core.bll.storage.StoragePoolValidator(sp).isUp()))) { return false; } if (!(org.ovirt.engine.core.bll.ImagesHandler.PerformImagesChecks(org.ovirt.engine.core.bll.RemoveDiskCommand.getReturnValue().getCanDoActionMessages(), storagePoolId, true, false, false, true, diskList))) { return false; } } org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(); for (org.ovirt.engine.core.common.businessentities.VM vm : listVms) { if ((!(validate(snapshotsValidator.vmNotDuringSnapshot(vm.getId())))) || (!(validate(snapshotsValidator.vmNotInPreview(vm.getId()))))) { return false; } } return true; }
@org.ovirt.engine.ui.webadmin.Template("<div title=\"{2}\"><table cellspacing=\'0\' cellpadding=\'0\' style=\'line-height: 5px;\'>" + (((((("<tr>" + "<td>{0} (</td>") + "<td><div style='font-size: 10px; text-align: center;'>{1}</div><div>{3}</div></td>") + "<td>)</td>") + "</tr>") + "</table>") + "</div>")) com.google.gwt.safehtml.shared.SafeHtml vmCountWithMigrating(java.lang.String vmCountStr, java.lang.String vmMigratingStr, java.lang.String title, com.google.gwt.safehtml.shared.SafeHtml image);
private static void notifyClientOfLogoutEvent(org.ovirt.engine.core.sso.utils.SsoContext ssoContext, java.lang.String clientId, java.lang.String token) throws java.lang.Exception { org.ovirt.engine.core.sso.utils.ClientInfo clientInfo = ssoContext.getClienInfo(clientId); java.lang.String url = clientInfo.getClientNotificationCallback(); if (org.apache.commons.lang.StringUtils.isNotEmpty(url)) { java.net.HttpURLConnection connection = null; try { connection = org.ovirt.engine.core.sso.utils.SsoUtils.createConnection(ssoContext.getSsoLocalConfig(), clientInfo, url); java.lang.String data = new org.ovirt.engine.core.uutils.net.URLBuilder(url).addParameter("event", "logout").addParameter("token", token).addParameter("token_type", "bearer").buildURL().getQuery(); connection.setRequestProperty("Content-Length", ("" + (data.length()))); connection.connect(); try (java.io.OutputStreamWriter outputWriter = new java.io.OutputStreamWriter(connection.getOutputStream())) { outputWriter.write(data); outputWriter.flush(); } try (java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream()) { final byte[] buffer = new byte[8 * 1024]; int n; try (java.io.InputStream input = connection.getInputStream()) { while ((n = input.read(buffer)) != (-1)) { os.write(buffer, 0, n); } } } } finally { if (connection != null) { connection.disconnect(); } } } }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.StorageServerConnections currConnection = getConnection(); boolean isValidConnection = true; isValidConnection = connect(org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.getVds().getId()).getFirst(); if (isValidConnection && ((org.apache.commons.lang.StringUtils.isNotEmpty(currConnection.getid())) || ((org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.getDbFacade().getStorageServerConnectionDao().get(currConnection.getid())) == null))) { currConnection.setid(org.ovirt.engine.core.compat.Guid.NewGuid().toString()); org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.getDbFacade().getStorageServerConnectionDao().save(currConnection); } org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.getReturnValue().setActionReturnValue(getConnection().getid()); org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.setSucceeded(true); }
@java.lang.Override public org.ovirt.engine.ui.common.widget.action.ActionButton addMenuListItem(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> menuItemDef) { org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem menuItem = new org.ovirt.engine.ui.common.widget.action.ActionAnchorListItem(menuItemDef.getText()); java.lang.String menuItemId = menuItemDef.getUniqueId(); if (menuItemId != null) { menuItem.asWidget().getElement().setId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(getElementId(), menuItemId)); } actionItemMap.put(menuItemDef, menuItem); actionKebab.addMenuItem(menuItem); return menuItem; }
@java.lang.Override public void saveOrUpdate(org.ovirt.engine.core.common.businessentities.aaa.DbUser user) { setIdIfNeeded(user); new org.springframework.jdbc.core.simple.SimpleJdbcCall(getJdbcTemplate()).withProcedureName("InsertOrUpdateUser").execute(new org.ovirt.engine.core.dao.DbUserDAODbFacadeImpl.DbUserMapSqlParameterSource(user)); }
@java.lang.Override protected void executeCommand() { final org.ovirt.engine.core.compat.Guid macPoolId = getParameters().getMacPoolId(); getMacPoolDao().remove(macPoolId); org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.getInstance().removePool(macPoolId); getReturnValue().setSucceeded(true); }
protected org.ovirt.engine.core.common.action.VdcReturnValueBase attemptRollback(org.ovirt.engine.core.common.action.VdcActionType commandType, org.ovirt.engine.core.common.action.VdcActionParametersBase params, org.ovirt.engine.core.bll.context.CommandContext rollbackContext) { if (canPerformRollbackUsingCommand(commandType, params)) { params.setExecutionReason(CommandExecutionReason.ROLLBACK_FLOW); params.setTransactionScopeOption(TransactionScopeOption.RequiresNew); return getBackend().runInternalAction(commandType, params, rollbackContext); } return new org.ovirt.engine.core.common.action.VdcReturnValueBase(); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); if (volume.isOnline()) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_IS_UP); addCanDoActionMessageVariable("volumeName", volume.getName()); return false; } if ((volume.getSnapshotsCount()) > 0) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_HAS_SNAPSHOTS); addCanDoActionMessageVariable("volumeName", volume.getName()); addCanDoActionMessageVariable("noOfSnapshots", volume.getSnapshotsCount()); return false; } return true; }
public static boolean validHostname(java.lang.String s) { if ((s == null) || (s.trim().isEmpty())) { return false; } try { java.net.URI host = new java.net.URI(("http://" + s)); return s.equals(host.getHost()); } catch (java.net.URISyntaxException use) { return false; } }


public static void populateMemoryUtilizationHosts(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getMemoryUtilizationHosts(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addResource(entity); } }
public void setQos(org.ovirt.engine.core.common.businessentities.network.NetworkQoS qos) { this.qos = qos; }

private void run() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VM a = ((org.ovirt.engine.core.common.businessentities.VM) (item)); boolean reinitialize = (!(a.isInitialized())) && (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsWindowsOsType(a.getVmOs())); org.ovirt.engine.core.common.action.RunVmParams tempVar = new org.ovirt.engine.core.common.action.RunVmParams(a.getId()); tempVar.setReinitialize(reinitialize); list.add(tempVar); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.RunVm, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { } }, null); }
public java.lang.StringBuilder GetTagNameAndChildrenNames() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(org.ovirt.engine.core.compat.StringFormat.format("'%1$s'", gettag_name())); for (org.ovirt.engine.core.common.businessentities.tags tag : _children) { builder.append(org.ovirt.engine.core.compat.StringFormat.format(",%1$s", tag.GetTagNameAndChildrenNames())); } return builder; }

protected void writeAdditionalJsData(javax.servlet.http.HttpServletRequest request, java.io.PrintWriter writer) { org.ovirt.engine.core.common.users.VdcUser loggedUser = getLoggedInUser(request); if (loggedUser != null) { java.util.Map<java.lang.String, java.lang.String> userInfoData = new java.util.HashMap<java.lang.String, java.lang.String>(); userInfoData.put("id", loggedUser.getUserId().toString()); userInfoData.put("userName", loggedUser.getUserName()); userInfoData.put("domain", loggedUser.getDomainControler()); writeJsObject(writer, "userInfo", userInfoData); } }
@org.junit.Test public void testGetNetworkQos() { org.ovirt.engine.core.common.businessentities.network.NetworkQoS result = dao.get(org.ovirt.engine.core.dao.network.NetworkQosDaoTest.qosAId); org.ovirt.engine.core.common.businessentities.network.NetworkQoS trueA = new org.ovirt.engine.core.common.businessentities.network.NetworkQoS(); trueA.setId(org.ovirt.engine.core.dao.network.NetworkQosDaoTest.qosAId); trueA.setName("qos_a"); trueA.setStoragePoolId(FixturesTool.STORAGE_POOL_NFS_2); trueA.setInboundAverage(1000); trueA.setInboundPeak(2000); trueA.setInboundBurst(500); trueA.setOutboundAverage(1000); trueA.setOutboundPeak(2000); trueA.setOutboundBurst(500); assertNotNull(result); assertTrue(trueA.equals(result)); }


@java.lang.Override @java.lang.SuppressWarnings("serial") protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if (((org.ovirt.engine.core.bll.ImportVmCommandBase.getParameters().getVm()) != null) && (!(org.apache.commons.lang.StringUtils.isBlank(org.ovirt.engine.core.bll.ImportVmCommandBase.getParameters().getVm().getName())))) { return new java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>>() { { put(getParameters().getVm().getName(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_NAME, VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED)); put(getParameters().getVm().getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, getVmIsBeingImportedMessage())); } }; } return null; }



private void onCreateQuota() { if (hasUnlimitedSpecificQuota()) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().changeDCQuotaEnforcementModeTitle()); confirmModel.setHashName("set_unlimited_specific_quota"); confirmModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().youAreAboutToCreateUnlimitedSpecificQuotaMsg()); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnCreateQuotaInternal", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); getConfirmWindow().getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); tempVar2.setIsDefault(true); getConfirmWindow().getCommands().add(tempVar2); } else { onCreateQuotaInternal(false); } }
@java.lang.Override protected void syncSearch() { super.syncSearch(); org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyClusterListModel clusterPolicyClusterListModel = ((org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyClusterListModel) (model)); clusterPolicyClusterListModel.setItems(((java.util.Collection) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); } }); org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId()); params.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAttachedClustersByClusterPolicyId, params, asyncQuery); setIsQueryFirstTime(false); }
org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc glusterVolumeGeoRepSessionDelete(java.lang.String volumeName, java.lang.String remoteHost, java.lang.String remoteVolumeName);
@java.lang.Override @org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (manager.isMonitoringNeeded()) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = (getRefreshStatistics()) ? new org.ovirt.engine.core.vdsbroker.VmsStatisticsFetcher(manager) : new org.ovirt.engine.core.vdsbroker.VmsListFetcher(manager); long fetchTime = java.lang.System.nanoTime(); fetcher.fetch(); new org.ovirt.engine.core.vdsbroker.VmsMonitoring(manager, fetcher.getChangedVms(), fetcher.getVmsWithChangedDevices(), auditLogDirector, fetchTime).perform(); } updateIteration(); }
private void refreshVmStats() { for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.vdsbroker.entities.VmInternalData> monitoredVm : monitoredVms) { if (tryLockVmForUpdate(monitoredVm)) { org.ovirt.engine.core.vdsbroker.VmAnalyzer vmAnalyzer = getVmAnalyzer(monitoredVm); vmAnalyzers.add(vmAnalyzer); vmAnalyzer.analyze(); } } processVmsWithDevicesChange(); addUnmanagedVms(); flush(); }
boolean addMac(java.lang.String mac);


protected org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters() { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters params = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(enclosingCommand.getParameters().getVmId(), ("Auto-generated for Live Storage Migration of " + (enclosingCommand.getParameters().getDiskAlias()))); params.setParentCommand(VdcActionType.LiveMigrateDisk); params.setSnapshotType(SnapshotType.REGULAR); params.setParentParameters(enclosingCommand.getParameters()); params.setImagesParameters(enclosingCommand.getParameters().getImagesParameters()); params.setTaskGroupSuccess(enclosingCommand.getParameters().getTaskGroupSuccess()); params.setNeedsLocking(false); return params; }



private java.util.Map<java.lang.String, java.lang.String> getServerFingerprints(org.w3c.dom.NodeList listOfPeers) { java.util.Map<java.lang.String, java.lang.String> fingerprints = new java.util.HashMap<java.lang.String, java.lang.String>(); fingerprints.put(org.ovirt.engine.core.bll.gluster.GetGlusterServersQuery.getParameters().getServerName(), org.ovirt.engine.core.bll.gluster.GetGlusterServersQuery.getParameters().getFingerprint()); for (int i = 0; i < (listOfPeers.getLength()); i++) { org.w3c.dom.Node firstPeer = listOfPeers.item(i); if ((firstPeer.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) { org.w3c.dom.Element firstHostElement = ((org.w3c.dom.Element) (firstPeer)); int state = org.ovirt.engine.core.utils.XmlUtils.getIntValue(firstHostElement, org.ovirt.engine.core.bll.gluster.GetGlusterServersQuery.STATE); if (state == (org.ovirt.engine.core.bll.gluster.GetGlusterServersQuery.PEER_IN_CLUSTER)) { java.lang.String hostName = org.ovirt.engine.core.utils.XmlUtils.getTextValue(firstHostElement, org.ovirt.engine.core.bll.gluster.GetGlusterServersQuery.HOST_NAME); fingerprints.put(hostName, getFingerprint(hostName)); } } } return fingerprints; }

public static java.lang.String crypt(java.lang.String password) { java.security.SecureRandom random = new java.security.SecureRandom(); byte[] r = new byte[org.ovirt.engine.core.uutils.crypto.CryptMD5.SALT_MAX_LENGTH]; char[] salt = new char[r.length]; random.nextBytes(r); for (int i = 0; i < (r.length); i++) { salt[i] = org.ovirt.engine.core.uutils.crypto.CryptMD5.b64t[(((r[i]) & 255) % (org.ovirt.engine.core.uutils.crypto.CryptMD5.b64t.length))]; } return org.ovirt.engine.core.uutils.crypto.CryptMD5.crypt(password, new java.lang.String(salt)); }

private com.woorea.openstack.glance.Glance getClient() { if ((client) == null) { client = new com.woorea.openstack.glance.Glance(((getProvider().getUrl()) + (org.ovirt.engine.core.bll.provider.storage.OpenStackImageProviderProxy.API_VERSION))); client.setTokenProvider(getTokenProvider()); } return client; }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Local") java.lang.String storageTypeLocal();

@java.lang.Override public org.ovirt.engine.core.common.businessentities.DbGroup getByIdOrExternalId(org.ovirt.engine.core.compat.Guid id, java.lang.String domain, org.ovirt.engine.core.common.utils.ExternalId externalId) { if (id != null) { org.ovirt.engine.core.common.businessentities.DbGroup existing = get(id); if (existing != null) { return existing; } } if ((domain != null) && (externalId != null)) { org.ovirt.engine.core.common.businessentities.DbGroup existing = getByExternalId(domain, externalId); if (existing != null) { return existing; } } if ((domain != null) && (id != null)) { externalId = org.ovirt.engine.core.common.utils.ExternalId.fromHex(id.toString()); org.ovirt.engine.core.common.businessentities.DbGroup existing = getByExternalId(domain, externalId); if (existing != null) { return existing; } } return null; }

private boolean isDomainAttachedToDifferentStoragePool() { if ((org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getStoragePool().getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.Uninitialized)) { for (org.ovirt.engine.core.compat.Guid storageDomainId : org.ovirt.engine.core.bll.storage.pool.AddStoragePoolWithStoragesCommand.getParameters().getStorages()) { org.ovirt.engine.core.common.businessentities.StorageDomain domain = storageDomainDao.get(storageDomainId); if ((domain.getStorageDomainType().isDataDomain()) && (isStorageDomainAttachedToStoragePool(domain))) { return failValidation(EngineMessage.ERROR_CANNOT_ADD_STORAGE_DOMAIN_WITH_ATTACHED_DATA_DOMAIN); } } } return true; }
@java.lang.Override public void setSubTabPanelVisible(boolean subTabPanelVisible) { if ((this.subTabPanelVisible) != subTabPanelVisible) { splitPanel.clear(); if (subTabPanelVisible) { splitPanel.addSouth(subTabPanelContainer, org.ovirt.engine.ui.userportal.section.main.view.AbstractSideTabWithDetailsView.subTabPanelHeight); splitPanel.add(table); } else { splitPanel.add(table); } this.subTabPanelVisible = subTabPanelVisible; } }

@java.lang.Override protected boolean canDoAction() { parameters = getParameters(); if (!(super.canDoAction())) { return false; } if (getGeoRepSession().getStatus().equals(GeoRepSessionStatus.ACTIVE)) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GEOREP_SESSION_ALREADY_RESUMED); return false; } return true; }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__TYPE__GLUSTER_VOLUME_SNAPSHOT_CONFIG); addCanDoActionMessage(EngineMessage.VAR__ACTION__VOLUME_SNAPSHOT_CONFIG_UPDATE); }

@org.junit.Test public void canDoActionSucceedsOnDiskDomainCheckWhenNoDisks() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId); mockVm(); mockStorageDomain(storageId); mockStoragePoolIsoMap(); runAndAssertCanDoActionSuccess(); }



private boolean updateFileList(org.ovirt.engine.core.compat.Guid storageDomainId, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType) { switch (imageType) { case All : return updateAllFileListFromVDSM(storagePoolId, storageDomainId); case ISO : return updateIsoListFromVDSM(storagePoolId, storageDomainId); case Floppy : return updateFloppyListFromVDSM(storagePoolId, storageDomainId); default : org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.warn("Refreshing Iso domain using unsupported imageType: {}", imageType); return false; } }
public org.ovirt.engine.core.bll.ValidationResult validateCinderDiskSnapshotsLimits() { return validate(new java.util.concurrent.Callable<org.ovirt.engine.core.bll.ValidationResult>() { @java.lang.Override public org.ovirt.engine.core.bll.ValidationResult call() { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageMap = getRelatedCinderDisksToStorageDomainMap(); java.util.Collection<org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy> relatedCinderDisksByStorageCollection = relatedCinderDisksByStorageMap.values(); for (org.ovirt.engine.core.bll.validator.storage.CinderDisksValidator.CinderStorageRelatedDisksAndProxy relatedCinderDisksByStorage : relatedCinderDisksByStorageCollection) { com.woorea.openstack.cinder.model.Limits limits = relatedCinderDisksByStorage.getProxy().getLimits(); int numOfDisks = relatedCinderDisksByStorage.getCinderDisks().size(); if (isLimitExceeded(limits, VolumeClassification.Snapshot, numOfDisks)) { java.lang.String storageName = getStorageDomainDao().get(relatedCinderDisksByStorage.getStorageDomainId()).getStorageName(); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.CANNOT_ADD_CINDER_DISK_SNAPSHOT_LIMIT_EXCEEDED, java.lang.String.format("$maxTotalSnapshots %d", limits.getAbsolute().getMaxTotalVolumes()), java.lang.String.format("$storageName %s", storageName)); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; } }); }


public void AttachTask(org.ovirt.engine.core.bll.EntityAsyncTask asyncTask) { synchronized(_listTasks) { if (!(_listTasks.containsKey(asyncTask.getVdsmTaskId()))) { org.ovirt.engine.core.bll.EntityMultiAsyncTasks.log.infoFormat("EntityMultiAsyncTasks::AttachTask: Attaching task '{0}' to command '{1}'.", asyncTask.getVdsmTaskId(), getCommandId()); _listTasks.put(asyncTask.getVdsmTaskId(), asyncTask); } } }


@java.lang.Override public void deallocate(org.ovirt.engine.core.common.businessentities.network.VmNic nic) { try { com.woorea.openstack.quantum.model.Port port = locatePort(nic); if (port != null) { getClient().ports().delete(port.getId()).execute(); } } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.PROVIDER_FAILURE, e); } }

@java.lang.Override protected void executeCommand() { java.lang.String connectionId = org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommand.getConnection().getid(); org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommand.getStorageServerConnectionDao().remove(connectionId); log.info("Removing connection '{}' from database ", connectionId); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommand.getParameters().getVdsId())) { log.info("No vdsId passed - hosts will not be disconnected."); } else { org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommand.disconnectStorage(); } org.ovirt.engine.core.bll.storage.connection.RemoveStorageServerConnectionCommand.setSucceeded(true); }

protected org.ovirt.engine.core.dao.network.NetworkQoSDao getNetworkQoSDao() { return getDbFacade().getQosDao(); }
private void setBondingOptions(org.ovirt.engine.ui.uicommonweb.models.ListModel<java.util.Map.Entry<java.lang.String, org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.String>>> value) { privateBondingOptions = value; }
@java.lang.Override public void updateInterfaceForVds(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface stats) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("addr", stats.getAddress()).addValue("bond_name", stats.getBondName()).addValue("bond_type", stats.getBondType()).addValue("gateway", stats.getGateway()).addValue("id", stats.getId()).addValue("is_bond", stats.getBonded()).addValue("bond_opts", stats.getBondOptions()).addValue("mac_addr", stats.getMacAddress()).addValue("name", stats.getName()).addValue("network_name", stats.getNetworkName()).addValue("speed", stats.getSpeed()).addValue("subnet", stats.getSubnet()).addValue("boot_protocol", stats.getBootProtocol()).addValue("type", stats.getType()).addValue("vds_id", stats.getVdsId()).addValue("vlan_id", stats.getVlanId()).addValue("mtu", stats.getMtu()).addValue("bridged", stats.isBridged()); getCallsHandler().executeModification("Updatevds_interface", parameterSource); }
protected void doNonBlockingAction(final org.ovirt.engine.core.common.action.VdcActionType task, final org.ovirt.engine.core.common.action.VdcActionParametersBase params) { setCorrelationId(params); setJobOrStepId(params); org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(() -> { org.ovirt.engine.core.common.action.VdcActionParametersBase sp = sessionize(params); org.ovirt.engine.core.common.businessentities.aaa.DbUser currentUser = getCurrent().getUser(); org.ovirt.engine.core.common.action.VdcActionParametersBase logout = (currentUser != null) ? sessionize(new org.ovirt.engine.core.common.action.VdcActionParametersBase()) : null; try { org.ovirt.engine.api.restapi.resource.backend.runAction(task, sp); } finally { if (currentUser != null) { org.ovirt.engine.api.restapi.resource.backend.logoff(logout); } } }); }
private java.util.List<org.ovirt.engine.core.common.businessentities.RepoFileMetaData> getFileListForExtension(org.ovirt.engine.core.common.businessentities.FileTypeExtension extension) { return org.ovirt.engine.core.bll.IsoDomainListSyncronizer.getInstance().getUserRequestForStorageDomainRepoFileList(org.ovirt.engine.core.bll.GetAllImagesListQuery.getStorageDomainId(), extension, org.ovirt.engine.core.bll.GetAllImagesListQuery.getParameters().getForceRefresh()); }
public org.ovirt.engine.core.bll.ValidationResult dataCenterExists() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST).when(((getDataCenter()) == null)); }

static org.ovirt.engine.api.model.VM setUpEntityExpectations(org.ovirt.engine.core.common.businessentities.VM entity, org.ovirt.engine.core.common.businessentities.VmStatistics statistics, int index, org.ovirt.engine.core.compat.Guid vmId) { expect(entity.getId()).andReturn(vmId).anyTimes(); expect(entity.getVdsGroupId()).andReturn(GUIDS[2]).anyTimes(); expect(entity.getName()).andReturn(NAMES[index]).anyTimes(); expect(entity.getVmDescription()).andReturn(DESCRIPTIONS[index]).anyTimes(); expect(entity.getNumOfCpus()).andReturn(8).anyTimes(); expect(entity.getNumOfSockets()).andReturn(2).anyTimes(); expect(entity.getUsageMemPercent()).andReturn(java.lang.Integer.valueOf(20)).anyTimes(); expect(entity.getDisplayType()).andReturn(DisplayType.vnc).anyTimes(); expect(entity.getDisplaySecurePort()).andReturn(5900).anyTimes(); expect(entity.getNumOfMonitors()).andReturn(2).anyTimes(); expect(entity.getVmType()).andReturn(VmType.Server).anyTimes(); expect(entity.getRunOnVdsName()).andReturn(NAMES[((NAMES.length) - 1)]).anyTimes(); expect(entity.isHostedEngine()).andReturn((index == 0)).anyTimes(); org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest.setUpStatisticalEntityExpectations(entity, statistics); return entity; }
public void flush() { network.setDataCenterId(getSelectedDc().getId()); network.setName(((java.lang.String) (getName().getEntity()))); network.setStp(((java.lang.Boolean) (getIsStpEnabled().getEntity()))); network.setDescription(((java.lang.String) (getDescription().getEntity()))); network.setVmNetwork(((java.lang.Boolean) (getIsVmNetwork().getEntity()))); network.setMtu(0); if ((getMtu().getEntity()) != null) { network.setMtu(java.lang.Integer.parseInt(getMtu().getEntity().toString())); } network.setVlanId(null); if (((java.lang.Boolean) (getHasVLanTag().getEntity()))) { network.setVlanId(java.lang.Integer.parseInt(getVLanTag().getEntity().toString())); } }
private boolean validateStoragePropertiesUpdate() { if ((!(checkStorageDomainStatusNotEqual(StorageDomainStatus.Locked))) || (!(validateStorageNameUpdate()))) { return false; } java.util.List<java.lang.String> props = org.ovirt.engine.core.utils.ObjectIdentityChecker.GetChangedFields(oldDomain, org.ovirt.engine.core.bll.storage.UpdateStorageDomainCommand.getStorageDomain().getStorageStaticData()); props.remove("storageName"); props.remove("description"); props.remove("comment"); props.remove("wipeAfterDelete"); props.remove("warningLowSpaceIndicator"); props.remove("criticalSpaceActionBlocker"); if (!(props.isEmpty())) { log.warn("There was an attempt to update the following fields although they are not allowed to be updated: {}", org.apache.commons.lang.StringUtils.join(props, ",")); return failCanDoAction(VdcBllMessages.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); } return true; }


@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase object) { driver.edit(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName; if (propName.equals("ProposeDiscoverTargets")) { setProposeDiscover(object.getProposeDiscoverTargets()); } else if (propName.equals("Message")) { messageLabel.setText(object.getMessage()); } } }); addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER) == (event.getNativeEvent().getKeyCode())) { object.getDiscoverTargetsCommand().execute(); setIsFocused(false); } } }); setProposeDiscover(object.getProposeDiscoverTargets()); initButtons(object); }
public boolean isHostedEngine() { return ((OriginType.HOSTED_ENGINE) == (getOrigin())) || ((OriginType.MANAGED_HOSTED_ENGINE) == (getOrigin())); }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Events") java.lang.String eventsTitle();

@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { return getCustomMapSqlParameterSource().addValue("id", volume.getId()).addValue("cluster_id", volume.getClusterId()).addValue("vol_name", volume.getName()).addValue("vol_type", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getVolumeType())).addValue("status", org.ovirt.engine.core.common.utils.EnumUtils.nameOrNull(volume.getStatus())).addValue("replica_count", volume.getReplicaCount()).addValue("stripe_count", volume.getStripeCount()).addValue("disperse_count", volume.getDisperseCount()).addValue("redundancy_count", volume.getRedundancyCount()); }
protected final void execute() { setCommandStatus(CommandStatus.ACTIVE); if ((getCallBack()) != null) { persistCommand(getParameters().getParentCommand(), true); } getReturnValue().setCanDoAction(true); getReturnValue().setIsSyncronious(true); if ((!(hasTaskHandlers())) || ((getExecutionIndex()) == 0)) { org.ovirt.engine.core.bll.job.ExecutionHandler.addStep(getExecutionContext(), StepEnum.EXECUTING, null); } try { handleTransactivity(); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(scope, this); } catch (javax.ejb.TransactionRolledbackLocalException e) { log.info("Transaction was aborted in '{}'", this.getClass().getName()); compensate(); } finally { try { if (getCommandShouldBeLogged()) { logRenamedEntity(); logCommand(); } if (getSucceeded()) { startPollingAsyncTasks(); } } finally { if ((!(hasTasks())) && (!(org.ovirt.engine.core.bll.job.ExecutionHandler.checkIfJobHasTasks(getExecutionContext())))) { org.ovirt.engine.core.bll.job.ExecutionHandler.endJob(getExecutionContext(), getSucceeded()); } } } }

@org.ovirt.engine.ui.webadmin.DefaultStringValue("Sync MoM Policy") java.lang.String updateMomPolicyClusterHost();

@java.lang.Override public void init(final org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model) { super.init(model); model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName; if ("AllowClusterWithVirtGlusterEnabled".equals(propName)) { getView().allowClusterWithVirtGlusterEnabled(model.getAllowClusterWithVirtGlusterEnabled()); } } }); java.lang.String spiceProxyInConfig = ((java.lang.String) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getConfigValuePreConverted(ConfigurationValues.SpiceProxyDefault))); java.lang.String spiceProxyMessage = (org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(spiceProxyInConfig)) ? messages.noSpiceProxyDefined() : spiceProxyInConfig; getView().setSpiceProxyOverrideExplanation(messages.consoleOverrideSpiceProxyMessage(messages.consoleOverrideDefinedInGlobalConfig(), spiceProxyMessage)); }


protected final void updateNumaEnabledHelper() { boolean enabled = true; if (((((getModel().getMigrationMode().getSelectedItem()) != (org.ovirt.engine.core.common.businessentities.MigrationSupport.PINNED_TO_HOST)) || (getModel().getIsAutoAssign().getEntity())) || ((getModel().getDefaultHost().getSelectedItem()) == null)) || (!(getModel().getDefaultHost().getSelectedItem().isNumaSupport()))) { enabled = false; } if (enabled) { getModel().getNumaEnabled().setMessage(constants.numaInfoMessage()); } else { getModel().getNumaEnabled().setMessage(constants.numaDisabledInfoMessage()); getModel().getNumaNodeCount().setEntity(0); } getModel().getNumaEnabled().setEntity(enabled); }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__CREATE); addCustomValue(GlusterConstants.VOLUME_SNAPSHOT_NAME, getParameters().getSnapshot().getSnapshotName()); super.setActionMessageParameters(); }


public static void Init() { org.ovirt.engine.core.bll.VmTemplateHandler.mUpdateVmTemplate = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.bll.VmTemplateHandler.class); org.ovirt.engine.core.bll.VmTemplateHandler.BlankVmTemplateId = new org.ovirt.engine.core.compat.Guid("00000000-0000-0000-0000-000000000000"); org.ovirt.engine.core.bll.VmTemplateHandler.mUpdateVmTemplate.AddPermittedFields(new java.lang.String[]{ "name", "description", "domain", "os", "osType", "autoSuspend", "interfaces", "memSizeMb", "numOfSockets", "cpuPerSocket", "vdsGroupId", "numOfMonitors", "allowConsoleReconnect", "usbPolicy", "timeZone", "diskMap", "defaultBootSequence", "disabled", "isoPath", "diskImageMap", "defaultDisplayType", "priority", "autoStartup", "stateless", "initrdUrl", "kernelUrl", "kernelParams", "images", "interfaces", "quotaId", "quotaName", "quotaEnforcementType", "migrationSupport", "dedicatedVmForVds", "smartcardEnabled", "dbGeneration", "deleteProtected", "quotaDefault" }); }

@java.lang.Override protected boolean canDoAction() { final org.ovirt.engine.core.bll.validator.ClusterValidator validator = new org.ovirt.engine.core.bll.validator.ClusterValidator(org.ovirt.engine.core.bll.AddVdsGroupCommand.getDbFacade(), org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroup()); return ((((((((((((validate(validator.nameNotUsed())) && (validate(validator.cpuTypeSupportsVirtService()))) && (validate(validator.versionSupported()))) && (validate(validator.dataCenterVersionMismatch()))) && (validate(validator.dataCenterExists()))) && (validate(validator.localStoragePoolAttachedToSingleCluster()))) && (validate(validator.qosBaloonSupported()))) && (validate(validator.glusterServiceSupported()))) && (validate(validator.clusterServiceDefined()))) && (validate(validator.mixedClusterServicesSupported()))) && (validate(validator.attestationServerConfigured()))) && (validate(validator.migrationSupported(org.ovirt.engine.core.bll.AddVdsGroupCommand.getArchitecture())))) && (validate(validator.virtIoRngSupported())); }



@java.lang.Override public org.ovirt.engine.api.common.security.auth.Principal validate(java.lang.String sessionId) { org.ovirt.engine.api.common.security.auth.Principal principal = null; org.ovirt.engine.core.common.queries.VdcQueryParametersBase params = new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(); params.setSessionId(sessionId); org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = backend.RunPublicQuery(VdcQueryType.ValidateSession, params); if (queryReturnValue != null) { org.ovirt.engine.core.common.users.VdcUser vdcUser = ((org.ovirt.engine.core.common.users.VdcUser) (queryReturnValue.getReturnValue())); if (vdcUser != null) { principal = new org.ovirt.engine.api.common.security.auth.Principal(vdcUser.getUserName(), null, vdcUser.getDomainControler()); sessionHelper.setSessionId(sessionId); current.set(vdcUser); } } if (principal != null) { validateSessionSucceeded(queryReturnValue); } else { validateSessionFailed(queryReturnValue); } return principal; }
public void setForceLabel(java.lang.String forceLabel) { this.forceLabel = forceLabel; onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("forceLabel")); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.network.VnicProfile)) { return false; } org.ovirt.engine.core.common.businessentities.network.VnicProfile other = ((org.ovirt.engine.core.common.businessentities.network.VnicProfile) (obj)); if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getCustomProperties(), other.getCustomProperties()))) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getId(), other.getId()))) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getName(), other.getName()))) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getNetworkId(), other.getNetworkId()))) { return false; } if ((isPortMirroring()) != (other.isPortMirroring())) { return false; } if (!(org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(getDescription(), other.getDescription()))) { return false; } return true; }
public void fillMetadataDevicesInfo(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic, org.ovirt.engine.core.compat.Guid vdsId) { try { @java.lang.SuppressWarnings("unchecked") org.ovirt.engine.core.common.businessentities.StorageDomainStatic domainFromIrs = ((org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid>) (resourceManager.runVdsCommand(VDSCommandType.HSMGetStorageDomainInfo, new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(vdsId, storageDomainStatic.getId())).getReturnValue())).getFirst(); storageDomainStatic.setFirstMetadataDevice(domainFromIrs.getFirstMetadataDevice()); storageDomainStatic.setVgMetadataDevice(domainFromIrs.getVgMetadataDevice()); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.domain.BlockStorageDomainHelper.log.info("Failed to get the domain info, ignoring"); } }

@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.core.common.businessentities.qos.QosBase.class, to = org.ovirt.engine.api.model.QoS.class) public static org.ovirt.engine.api.model.QoS map(org.ovirt.engine.core.common.businessentities.qos.QosBase entity, org.ovirt.engine.api.model.QoS template) { org.ovirt.engine.api.model.QoS model = (template != null) ? template : new org.ovirt.engine.api.model.QoS(); model.setId(entity.getId().toString()); model.setName(entity.getName()); model.setType(org.ovirt.engine.api.model.QosType.fromValue(entity.getQosType().toString()).name().toLowerCase()); model.setDataCenter(new org.ovirt.engine.api.model.DataCenter()); model.getDataCenter().setId(entity.getStoragePoolId().toString()); model.setDescription(entity.getDescription()); switch (entity.getQosType()) { case STORAGE : org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos = null; if (entity instanceof org.ovirt.engine.core.common.businessentities.qos.StorageQos) { storageQos = ((org.ovirt.engine.core.common.businessentities.qos.StorageQos) (entity)); } if (storageQos == null) { return model; } model.setMaxThroughput(storageQos.getMaxThroughput()); model.setMaxReadThroughput(storageQos.getMaxReadThroughput()); model.setMaxWriteThroughput(storageQos.getMaxWriteThroughput()); model.setMaxIops(storageQos.getMaxIops()); model.setMaxReadIops(storageQos.getMaxReadIops()); model.setMaxWriteIops(storageQos.getMaxWriteIops()); break; case CPU : org.ovirt.engine.core.common.businessentities.qos.CpuQos cpuQos = null; if (entity instanceof org.ovirt.engine.core.common.businessentities.qos.CpuQos) { cpuQos = ((org.ovirt.engine.core.common.businessentities.qos.CpuQos) (entity)); } if (cpuQos == null) { return model; } model.setCpuLimit(cpuQos.getCpuLimit()); break; case NETWORK : org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQos = null; if (entity instanceof org.ovirt.engine.core.common.businessentities.network.NetworkQoS) { networkQos = ((org.ovirt.engine.core.common.businessentities.network.NetworkQoS) (entity)); } if (networkQos == null) { return model; } model.setInboundAverage(networkQos.getInboundAverage()); model.setInboundPeak(networkQos.getInboundPeak()); model.setInboundBurst(networkQos.getInboundBurst()); model.setOutboundAverage(networkQos.getOutboundAverage()); model.setOutboundPeak(networkQos.getOutboundPeak()); model.setOutboundBurst(networkQos.getOutboundBurst()); break; default : break; } return model; }

protected void updateLiveStorageMigrationEnabled() { final org.ovirt.engine.core.common.businessentities.VM vm = getEntity(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDataCenterById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); org.ovirt.engine.core.compat.Version dcCompatibilityVersion = ((dataCenter.getCompatibilityVersion()) != null) ? dataCenter.getCompatibilityVersion() : new org.ovirt.engine.core.compat.Version(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmDiskListModel) (target)); model.setIsLiveStorageMigrationEnabled(((java.lang.Boolean) (returnValue))); } }), VdcActionType.LiveMigrateVmDisks, vm.getVdsGroupCompatibilityVersion(), dcCompatibilityVersion); } }), vm.getStoragePoolId()); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.hostdeploy.InstallVdsInternalCommand.getParameters().getVdsId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VDS, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }



@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessageVariable("volumeName", org.ovirt.engine.core.bll.gluster.GlusterAsyncCommandBase.getGlusterVolumeName()); addCanDoActionMessageVariable("vdsGroup", org.ovirt.engine.core.bll.gluster.GlusterAsyncCommandBase.getVdsGroupName()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if (vm.isHostedEngine()) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostsToRunOn = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { int haScore = host.getHighlyAvailableScore(); if (haScore > 0) { hostsToRunOn.add(host); org.ovirt.engine.core.bll.scheduling.policyunits.HostedEngineHAClusterFilterPolicyUnit.log.debug("Host '{}' wasn't filtered out as it has a score of {}", host.getName(), haScore); } else { org.ovirt.engine.core.bll.scheduling.policyunits.HostedEngineHAClusterFilterPolicyUnit.log.debug("Host '{}' was filtered out as it doesn't have a positive score (the score is {})", host.getName(), haScore); messages.addMessage(host.getId(), VdcBllMessages.VAR__DETAIL__NOT_HE_HOST.name()); } } return hostsToRunOn; } else { return hosts; } }
public static boolean CommonNetworkValidation(final org.ovirt.engine.core.common.businessentities.network network, java.util.ArrayList<java.lang.String> canDoActionMessages) { if ((network.getstorage_pool_id()) != null) { java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> groups = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsGroupDAO().getAllForStoragePool(network.getstorage_pool_id().getValue()); for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : groups) { java.util.List<org.ovirt.engine.core.common.businessentities.network> networks = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDAO().getAllForCluster(cluster.getId()); if (null != (org.ovirt.engine.core.utils.linq.LinqUtils.firstOrNull(networks, new org.ovirt.engine.core.utils.linq.Predicate<org.ovirt.engine.core.common.businessentities.network>() { @java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.network n) { return n.getname().equals(network.getname()); } }))) { canDoActionMessages.add(VdcBllMessages.NETWORK_CLUSTER_NETWORK_IN_USE.toString()); return false; } } } return true; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("disk_type=") java.lang.String diskTypeSearchPrefix();
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeStatusReturnForXmlRpc glusterVolumeStatus(org.ovirt.engine.core.compat.Guid clusterId, java.lang.String volumeName, java.lang.String brickName, java.lang.String volumeStatusOption) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("GlusterVolume.status").withParameter("volumeName", volumeName).withParameter("brick", brickName).withParameter("statusOption", volumeStatusOption).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withIgnoreResponseKey(); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeStatusReturnForXmlRpc(clusterId, response); }
public boolean isClientIpChanged() { return clientIpChanged; }
public org.ovirt.engine.core.bll.ValidationResult validateUniqueId() { if ((org.apache.commons.lang.StringUtils.isBlank(vds.getUniqueId())) && (org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.InstallVds))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.VDS_NO_UUID); } return ValidationResult.VALID; }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.scheduling.AffinityGroup group) { java.lang.String hostNames = org.ovirt.engine.ui.uicompat.external.StringUtils.join(getHostNames(group), ", "); if (hostNames.isEmpty()) { return org.ovirt.engine.ui.webadmin.section.main.view.tab.AbstractSubTabAffinityGroupsView.constants.noMembersAffinityGroup(); } return hostNames; }
public static void proceedLUNInDb(final org.ovirt.engine.core.common.businessentities.storage.LUNs lun, org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.proceedLUNInDb(lun, storageType, ""); }


@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm()) == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND); return false; } if (!(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.canRunActionOnNonManagedVm())) { return false; } if (!(isSpecifiedDisksExist(getParameters().getDisks()))) { return false; } org.ovirt.engine.core.bll.validator.VmValidator vmValidator = createVmValidator(); org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotValidator = createSnapshotValidator(); org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator spValidator = createStoragePoolValidator(); if (!((((((((validateVM(vmValidator)) && (validate(spValidator.isUp()))) && (validate(vmValidator.vmNotIlegal()))) && (validate(vmValidator.vmNotLocked()))) && (validate(snapshotValidator.vmNotDuringSnapshot(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId())))) && (validate(snapshotValidator.vmNotInPreview(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId())))) && (validate(vmValidator.vmNotDuringMigration()))) && (validate(vmValidator.vmNotRunningStateless())))) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList = getDisksListForChecks(); if ((disksList.size()) > 0) { org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = createDiskImageValidator(disksList); if (!((validate(diskImagesValidator.diskImagesNotLocked())) && (validate(diskImagesValidator.diskImagesNotIllegal())))) { return false; } } java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVm().getTotalMemorySizeInBytes(), MemoryUtils.META_DATA_SIZE_IN_BYTES); getStorageDomainIdForVmMemory(memoryDisksList); if ((getParameters().isSaveMemory()) && (Guid.Empty.equals(cachedStorageDomainId))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NO_SUITABLE_DOMAIN_FOUND); } if (!(validateStorageDomains(disksList, memoryDisksList))) { return false; } return true; }
@org.junit.Test public void testIsDomainExistAndActiveDomainNotExists() { validator = new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(null); assertEquals("Wrong failure for null domain", VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST, validator.isDomainExistAndActive().getMessage()); }
@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult vmNotInPreview(org.ovirt.engine.core.compat.Guid vmId) { if (vmInPreview) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VM_IN_PREVIEW); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void initListBoxEditors() { raidTypeEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor(new org.ovirt.engine.ui.common.widget.renderer.EnumRenderer<org.ovirt.engine.core.common.businessentities.RaidType>()); }
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getRemoveCommand())) { remove(); } else if ("Cancel".equals(command.getName())) { cancel(); } }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.vm_pools> getAllForUser(org.ovirt.engine.core.compat.Guid userid) { java.util.List<org.ovirt.engine.core.common.businessentities.vm_pools> result = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.vm_pools>(); org.hibernate.Query query = getSession().createQuery("from DbUser where id = :user_id"); query.setParameter("user_id", userid); org.ovirt.engine.core.common.businessentities.DbUser user = ((org.ovirt.engine.core.common.businessentities.DbUser) (query.uniqueResult())); if (user != null) { org.hibernate.Criteria criteria = getSession().createCriteria(org.ovirt.engine.core.common.businessentities.ad_groups.class).add(org.hibernate.criterion.Restrictions.in("name", org.ovirt.engine.core.dao.VmPoolDAOHibernateImpl.splitApartNames(user.getgroups()))); java.util.List<org.ovirt.engine.core.common.businessentities.ad_groups> adElements = criteria.list(); org.ovirt.engine.core.compat.Guid[] ids = new org.ovirt.engine.core.compat.Guid[(adElements.size()) + 1]; ids[0] = userid; for (int index = 0; index < (adElements.size()); index++) { ids[(index + 1)] = adElements.get(index).getid(); } query = getSession().createQuery(("select pool " + (((("from vm_pools pool, permissions perms, roles role " + "where pool.id = perms.objectId ") + "and perms.adElementId in ( :adElements ) ") + "and perms.roleId = role.id ") + "and role.type = 2"))); query.setParameterList("adElements", ids); result = query.list(); } return result; }


public static void runAndAssertCanDoActionSuccess(org.ovirt.engine.core.bll.CommandBase<?> command) { boolean canDoAction = command.canDoAction(); assertTrue(java.text.MessageFormat.format("Command''s canDoAction expected to succeed but failed, messages are: {0}", command.getReturnValue().getCanDoActionMessages()), canDoAction); }
private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> runExternalFilters(java.util.ArrayList<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl> filters, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, java.util.List<java.lang.String> messages, java.lang.String correlationId, org.ovirt.engine.core.bll.scheduling.SchedulingManager.SchedulingResult result) { java.util.List<org.ovirt.engine.core.compat.Guid> filteredIDs = null; if (filters != null) { java.util.List<java.lang.String> filterNames = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl filter : filters) { filterNames.add(filter.getName()); } java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hostList) { hostIDs.add(host.getId()); } filteredIDs = org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerFactory.getInstance().runFilters(filterNames, hostIDs, vm.getId(), parameters); if (filteredIDs != null) { logFilterActions(hostList, new java.util.HashSet<org.ovirt.engine.core.compat.Guid>(filteredIDs), VdcBllMessages.VAR__FILTERTYPE__EXTERNAL, java.util.Arrays.toString(filterNames.toArray()), result, correlationId); } } return intersectHosts(hostList, filteredIDs); }

@java.lang.Override protected void Connect() { if ((getEntity()) != null) { getLogger().Debug("Connecting to Spice console..."); if (!(getspice().getIsInstalled())) { getLogger().Info("Spice client is not installed."); getspice().Install(); return; } if ((getConfigurator().getIsAdmin()) && ((getspice().getCurrentVersion().compareTo(getspice().getDesiredVersion())) < 0)) { getLogger().Info((("Spice client version is not as desired (" + (getspice().getDesiredVersion())) + ")")); getspice().Install(); return; } if ((getEntity().getRunOnVds()) == null) { return; } if ((!(getEntity().getVmOs().isWindows())) || ((getEntity().getSpiceDriverVersion()) == null)) { getspice().setIsWanOptionsEnabled(false); } SendVmTicket(); } }
private boolean checkCanPerformRegularUpdate() { if ((oldDisk.getDiskInterface()) != (newDisk.getDiskInterface())) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> allVmInterfaces = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmNetworkInterfaceDao().getAllForVm(org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVmId()); java.util.List<org.ovirt.engine.core.common.businessentities.Disk> allVmDisks = new java.util.LinkedList<org.ovirt.engine.core.common.businessentities.Disk>(getOtherVmDisks()); allVmDisks.add(newDisk); if (!(checkPciAndIdeLimit(org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVm().getNumOfMonitors(), allVmInterfaces, allVmDisks, org.ovirt.engine.core.bll.UpdateVmDiskCommand.getReturnValue().getCanDoActionMessages()))) { return false; } } if (newDisk.isBoot()) { org.ovirt.engine.core.bll.VmHandler.updateDisksForVm(org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVm(), getOtherVmDisks()); for (org.ovirt.engine.core.common.businessentities.Disk disk : org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVm().getDiskMap().values()) { if (disk.isBoot()) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_DISK_BOOT_IN_USE); org.ovirt.engine.core.bll.UpdateVmDiskCommand.getReturnValue().getCanDoActionMessages().add(java.lang.String.format("$DiskName %1$s", disk.getDiskAlias())); return false; } } } org.ovirt.engine.core.bll.ImagesHandler.setDiskAlias(newDisk, org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVm()); return validateShareableDisk(); }
@java.lang.Override public java.lang.String toString() { return java.lang.String.format("%s, storageType=%s", super.toString(), getStorageType()); }

@java.lang.Override org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> build() { return createHANotRunningAndUknown(); }
org.ovirt.engine.ui.common.uicommon.model.DetailModelProvider<org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel, org.ovirt.engine.ui.uicommonweb.models.vms.VmSessionsModel> getSubTabVirtualMachineSessionsModelProvider();

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Brick Directory should be at least 2 characters") java.lang.String invalidBrickDirectoryAtleastTwoCharacterseMsg();
public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel SystemTreeSelectedItem) { super.initialize(); setHash(((getHashName()) + (new java.util.Date()))); getMemSize().setEntity(256); getMinAllocatedMemory().setEntity(256); getIsStateless().setEntity(false); getIsRunAndPause().setEntity(false); getIsSmartcardEnabled().setEntity(false); isConsoleDeviceEnabled.setEntity(false); getIsHighlyAvailable().setEntity(false); getIsAutoAssign().setEntity(true); getIsTemplatePublic().setEntity(true); getIsSingleQxlEnabled().setEntity(false); getHostCpu().setEntity(false); getMigrationMode().setIsChangable(true); getCdImage().setIsChangable(false); initOSType(); initDisplayProtocol(); initFirstBootDevice(); initNumOfMonitors(); initAllowConsoleReconnect(); initMinimalVmMemSize(); initMaximalVmMemSize32OS(); initMigrationMode(); initVncKeyboardLayout(); behavior.initialize(SystemTreeSelectedItem); }



@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); addCanDoActionMessage(VdcBllMessages.VAR__ACTION__DESTROY_DOMAIN); }

@java.lang.Override public org.ovirt.engine.core.common.businessentities.VDS get(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getCallsHandler().executeReadList("GetVdsByVdsId", org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("vds_id", id).addValue("user_id", userID).addValue("is_filtered", isFiltered)); return (vdsList.size()) == 0 ? null : uniteAgentsSingleVds(vdsList); }

@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (target)); org.ovirt.engine.core.common.businessentities.VmTemplate template = ((org.ovirt.engine.core.common.businessentities.VmTemplate) (returnValue)); model.getTemplate().setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate>(java.util.Arrays.asList(new org.ovirt.engine.core.common.businessentities.VmTemplate[]{ template }))); model.getTemplate().setSelectedItem(template); model.getTemplate().setIsChangable(false); postInitTemplate(); }
private org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue fence(org.ovirt.engine.core.common.businessentities.FenceAgent fenceAgent, int retries) { org.ovirt.engine.core.bll.FenceExecutor fenceExecutor = createFenceExecutor(); org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue fenceExecutionResult = fenceExecutor.fence(getAction(), fenceAgent); if (wasSkippedDueToStatus(fenceExecutionResult)) { log.info("Attemp to {} VDS using fence agent{} skipped: Host is already at the requested state.", getAction().name().toLowerCase(), fenceAgent.getId()); } else { if (fenceExecutionResult.getSucceeded()) { boolean requiredStatusAchieved = waitForStatus(); int i = 0; while ((!requiredStatusAchieved) && (i < retries)) { fenceExecutionResult = fenceExecutor.fence(getAction(), fenceAgent); requiredStatusAchieved = waitForStatus(); i++; } if (requiredStatusAchieved) { handleSpecificCommandActions(); } else { auditFailure(); } fenceExecutionResult.setSucceeded(requiredStatusAchieved); } else { logAgentFailure(fenceExecutionResult); } } return fenceExecutionResult; }
@java.lang.Override public void onFailure(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase> operation, final java.lang.Throwable caught) { if (ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ("Failed to execute runAction: " + caught), caught); failureEventHandler(caught); org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult f = new org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult(actionType, parameters, null, state); if (callback != null) { callback.executed(f); } }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pool.PoolSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.common.uicommon.model.SearchableDetailModelProvider<org.ovirt.engine.core.common.businessentities.Permission, org.ovirt.engine.ui.uicommonweb.models.pools.PoolListModel, org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel<org.ovirt.engine.core.common.businessentities.VmPool>> modelProvider) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(org.ovirt.engine.ui.webadmin.section.main.presenter.tab.pool.SubTabPoolPermissionPresenter.constants.poolPermissionSubTabLabel(), 2, modelProvider); }

@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((id.tagId) == null ? 0 : id.tagId.hashCode()); result = (prime * result) + ((id.templateId) == null ? 0 : id.templateId.hashCode()); result = (prime * result) + ((defaultDisplayType) == null ? 0 : defaultDisplayType.hashCode()); return result; }



private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> runExternalFilters(java.util.ArrayList<org.ovirt.engine.core.bll.scheduling.PolicyUnitImpl> filters, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, java.util.List<java.lang.String> messages, java.lang.String correlationId, org.ovirt.engine.core.bll.scheduling.SchedulingManager.SchedulingResult result) { if (filters != null) { java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : hostList) { hostIDs.add(host.getId()); } for (final org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBroker broker : externalBrokers) { java.util.List<java.lang.String> filterNames = filters.stream().filter(( f) -> f.getPolicyUnit().getBroker().equals(broker.getId())).map(( f) -> f.getPolicyUnit().getName()).collect(java.util.stream.Collectors.toList()); java.util.List<org.ovirt.engine.core.compat.Guid> filteredIDs = broker.runFilters(filterNames, hostIDs, vm.getId(), parameters); if (filteredIDs != null) { logFilterActions(hostList, new java.util.HashSet(filteredIDs), EngineMessage.VAR__FILTERTYPE__EXTERNAL, java.util.Arrays.toString(filterNames.toArray()), result, correlationId); hostList = intersectHosts(hostList, filteredIDs); } } } return hostList; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Content must be Base64") java.lang.String cloudInitBase64Message();




private org.ovirt.engine.core.common.businessentities.VolumeType getMemoryVolumeType() { return org.ovirt.engine.core.bll.HibernateVmCommand.getMemoryVolumeTypeForPool(org.ovirt.engine.core.bll.HibernateVmCommand.getStoragePool().getStorageType()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts, org.ovirt.engine.core.common.businessentities.VM vm, java.util.Map<java.lang.String, java.lang.String> parameters, org.ovirt.engine.core.common.scheduling.PerHostMessages messages) { if ((vm.getRunOnVds()) != null) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostsToRunOn = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.VDS srcVds = getVdsDao().get(vm.getRunOnVds()); for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (host.getId().equals(vm.getRunOnVds())) { org.ovirt.engine.core.bll.scheduling.policyunits.MigrationPolicyUnit.log.debug("Vm '{}' already runs on host '{}', filtering host", vm.getName(), host.getName()); messages.addMessage(host.getId(), VdcBllMessages.VAR__DETAIL__SAME_HOST.toString()); continue; } if (!(validateDestinationVdsAddress(srcVds, host))) { org.ovirt.engine.core.bll.scheduling.policyunits.MigrationPolicyUnit.log.debug("Host '{}' resolves to the same machine as host '{}', filtering out", srcVds.getName(), host.getName()); messages.addMessage(host.getId(), VdcBllMessages.VAR__DETAIL__SAME_HOST.toString()); continue; } hostsToRunOn.add(host); } return hostsToRunOn; } return hosts; }

public void updateConvertOperation(java.lang.String description, int progress) { this.convertOperationDescription = description; this.convertOperationProgress = progress; }
public org.ovirt.engine.core.bll.network.macpool.MacPool createDecoratedPool(org.ovirt.engine.core.compat.Guid macPoolId, org.ovirt.engine.core.bll.network.macpool.MacPool poolById, java.util.List<org.ovirt.engine.core.bll.network.macpool.MacPoolDecorator> decorators) { org.ovirt.engine.core.bll.network.macpool.MacPool decoratedPool = decoratePool(macPoolId, poolById, decorators); return lockedObjectFactory.createLockingInstance(decoratedPool, org.ovirt.engine.core.bll.network.macpool.MacPool.class, lockForMacPool(macPoolId)); }
void initTableActionButtons() { getTable().addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.core.common.businessentities.storage.Disk>(org.ovirt.engine.ui.webadmin.section.main.view.tab.storage.SubTabStorageDiskView.constants.removeDisk()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getRemoveCommand(); } }); }

private void addVmCluster(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getClusterById(new org.ovirt.engine.ui.frontend.AsyncQuery(new java.lang.Object[]{ getModel(), clusters }, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (array[0])); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusterList = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>) (array[1])); org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ((org.ovirt.engine.core.common.businessentities.VDSGroup) (returnValue)); if (cluster != null) { clusterList.add(cluster); } java.util.Collections.sort(clusterList, new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer()); model.setClusters(model, clusterList, vm.getVdsGroupId().getValue()); } }, getModel().getHash()), vm.getVdsGroupId()); }
public java.lang.String getProvider() { return provider; }

@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase; final org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.RestartVdsCommand.getVdsId(); final java.lang.String sessionId = org.ovirt.engine.core.bll.RestartVdsCommand.getParameters().getSessionId(); returnValueBase = executeVdsFenceAction(vdsId, sessionId, FenceActionType.Stop, VdcActionType.StopVds); if (returnValueBase.getSucceeded()) { executeFenceVdsManuallyAction(vdsId, sessionId); returnValueBase = executeVdsFenceAction(vdsId, sessionId, FenceActionType.Start, VdcActionType.StartVds); setSucceeded(returnValueBase.getSucceeded()); setFenceSucceeded(org.ovirt.engine.core.bll.RestartVdsCommand.getSucceeded()); } else { org.ovirt.engine.core.bll.RestartVdsCommand.setSucceeded(false); } if (!(org.ovirt.engine.core.bll.RestartVdsCommand.getSucceeded())) { log.warnFormat("Restart host action failed, updating host {0} to {1}", vdsId, VDSStatus.NonResponsive.name()); runVdsCommand(VDSCommandType.SetVdsStatus, new org.ovirt.engine.core.common.vdscommands.SetVdsStatusVDSCommandParameters(vdsId, org.ovirt.engine.core.common.businessentities.VDSStatus.NonResponsive)); } }
public static void GetNumOfMonitorList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { java.util.ArrayList<java.lang.Integer> nums = new java.util.ArrayList<java.lang.Integer>(); if (source != null) { java.lang.Iterable numEnumerable = ((java.lang.Iterable) (source)); java.util.Iterator numIterator = numEnumerable.iterator(); while (numIterator.hasNext()) { nums.add(java.lang.Integer.parseInt(numIterator.next().toString())); } } return nums; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.ValidNumOfMonitors, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }
public static <T extends org.ovirt.engine.core.common.action.VdcActionParametersBase> java.util.List<java.lang.String> validateInputs(java.util.List<java.lang.Class<?>> validationGroupList, T parameters) { java.util.List<java.lang.String> messages = java.util.Collections.emptyList(); java.util.Set<javax.validation.ConstraintViolation<T>> violations = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, validationGroupList.toArray(new java.lang.Class<?>[validationGroupList.size()])); if (!(violations.isEmpty())) { messages = new java.util.ArrayList<java.lang.String>(violations.size()); for (javax.validation.ConstraintViolation<T> constraintViolation : violations) { messages.add(constraintViolation.getMessage()); } } return messages; }
private org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus handleUndeterminedJobStatus(org.ovirt.engine.core.bll.CommandBase<?> cmd, boolean jobsReportedByHost) { if (isEntityPollingSupported(cmd)) { log.info("Command {} id: '{}': attempting to determine the job status by polling the entity.", cmd.getActionType(), cmd.getCommandId()); return pollEntity(cmd); } if (jobsReportedByHost) { log.error(("Command {} id: '{}': entity polling isn't supported and the job isn't reported by the host," + "assuming it failed so that the command execution will end."), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } if (cmd.failJobWithUndeterminedStatus()) { log.error(("Command {} id: '{}': failed to determine the actual job status, considering as failed as per" + " the command implementation"), cmd.getActionType(), cmd.getCommandId()); return org.ovirt.engine.core.common.businessentities.HostJobInfo.HostJobStatus.failed; } }
@org.junit.Test public void lunAlreadyPartOfStorageDomains() { org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[0].toString()); lun1.setStorageDomainId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[1].toString()); lun2.setStorageDomainId(org.ovirt.engine.core.compat.Guid.newGuid()); doReturn(lunDao).when(cmd).getLunDao(); when(lunDao.getAll()).thenReturn(java.util.Arrays.asList(lun1, lun2)); java.util.List<java.lang.String> specifiedLunIds = java.util.Collections.singletonList(org.ovirt.engine.core.bll.storage.StorageDomainCommandBaseTest.GUIDS[0].toString()); assertTrue(cmd.isLunsAlreadyInUse(specifiedLunIds)); java.util.List<java.lang.String> messages = cmd.getReturnValue().getCanDoActionMessages(); assertEquals(messages.size(), 2); assertEquals(messages.get(0), EngineMessage.ACTION_TYPE_FAILED_LUNS_ALREADY_PART_OF_STORAGE_DOMAINS.toString()); assertEquals(messages.get(1), java.lang.String.format("$lunIds %1$s", cmd.getFormattedLunId(lun1, lun1.getStorageDomainName()))); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Snapshot cannot be created since the VM contains a stateless Snapshot.") java.lang.String snapshotCannotBeCreatedStatelessSnapshotMsg();
protected void updateUsbNativeMessageVisibility(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel object) { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = ((org.ovirt.engine.core.common.businessentities.VDSGroup) (object.getCluster().getSelectedItem())); changeApplicationLevelVisibility(nativeUsbWarningMessage, (((((object.getUsbPolicy().getSelectedItem()) == (org.ovirt.engine.core.common.businessentities.UsbPolicy.ENABLED_NATIVE)) && (vdsGroup != null)) && ((vdsGroup.getcompatibility_version()) != null)) && (!((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigValuePreConverted(ConfigurationValues.MigrationSupportForNativeUsb, vdsGroup.getcompatibility_version().getValue())))))); }


public static void getLoggedInUser(final org.ovirt.engine.ui.uicompat.IAsyncCallback<org.ovirt.engine.core.common.users.VdcUser> callback) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Determining whether user is logged in..."); final org.ovirt.engine.ui.frontend.gwtservices.GenericApiGWTServiceAsync service = GenericApiGWTServiceAsync.Util.getInstance(); service.getLoggedInUser(new com.google.gwt.user.client.rpc.AsyncCallback<org.ovirt.engine.core.common.users.VdcUser>() { @java.lang.Override public void onFailure(final java.lang.Throwable caught) { if (org.ovirt.engine.ui.frontend.Frontend.ignoreFailure(caught)) { return; } org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.SEVERE, ("Failed to execute sync getIsUserLoggedIn: " + caught), caught); org.ovirt.engine.ui.frontend.Frontend.failureEventHandler(caught); callback.onFailure(null); } @java.lang.Override public void onSuccess(final org.ovirt.engine.core.common.users.VdcUser result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Sucessfully executed sync getIsUserLoggedIn!"); callback.onSuccess(result); } }); }
private static void appendEntry(java.lang.StringBuilder builder, java.util.Map.Entry<java.lang.String, java.lang.Object> entry) { builder.append(entry.getKey()).append('=').append(entry.getValue()); }
private org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel createDefaultProfile() { final org.ovirt.engine.ui.uicommonweb.models.profiles.NewVnicProfileModel newModel = new org.ovirt.engine.ui.uicommonweb.models.profiles.NewVnicProfileModel(getSourceListModel(), getSelectedDc().getcompatibility_version(), false, getSelectedDc().getId()); newModel.getName().setEntity(getName().getEntity()); final org.ovirt.engine.ui.uicompat.IEventListener networkNameListener = new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { newModel.getName().setEntity(getName().getEntity()); } }; getName().getEntityChangedEvent().addListener(networkNameListener); newModel.getName().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (!(newModel.getName().getEntity().equals(getName().getEntity()))) { getName().getEntityChangedEvent().removeListener(networkNameListener); newModel.getName().getEntityChangedEvent().removeListener(this); } } }); return newModel; }

private boolean updateVms() { for (org.ovirt.engine.core.common.businessentities.VmStatic vm : vmsLockedForUpdate) { org.ovirt.engine.core.common.action.VmManagementParametersBase updateParams = new org.ovirt.engine.core.common.action.VmManagementParametersBase(vm); updateParams.setLockProperties(org.ovirt.engine.core.common.action.LockProperties.create(LockProperties.Scope.None)); updateParams.setClusterLevelChangeFromVersion(oldCluster.getCompatibilityVersion()); upgradeGraphicsDevices(vm, updateParams); updateRngDeviceIfNecessary(vm.getId(), vm.getCustomCompatibilityVersion(), updateParams); org.ovirt.engine.core.common.action.VdcReturnValueBase result = runInternalAction(VdcActionType.UpdateVm, updateParams, org.ovirt.engine.core.bll.UpdateClusterCommand.cloneContextAndDetachFromParent()); if (!(result.getSucceeded())) { java.util.List<java.lang.String> params = new java.util.ArrayList<>(); params.add("$action Update"); params.add("$type VM"); params.add(parseErrorMessage(result.getValidationMessages())); java.util.List<java.lang.String> messages = org.ovirt.engine.core.bll.Backend.getInstance().getErrorsTranslator().translateErrorText(params); failedUpgradeEntities.put(vm.getName(), getFailedMessage(messages)); } } return true; }
private boolean diskContainsPreExtendSnapshots() { return validate(createDiskValidator(getImage()).diskWasExtendedAfterSnapshotWasTaken(org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getStorageDomain())); }


@java.lang.Override public void loadFromLocalStorage(org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel model) { java.lang.String vmId = model.getVM().getId().toString(); org.ovirt.engine.ui.common.utils.ConsoleContext context = model.getConsoleContext(); org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker keyMaker = new org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker(vmId, context); java.lang.String selectedProtocolString = clientStorage.getLocalItem(keyMaker.make(org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.SELECTED_PROTOCOL)); if ((selectedProtocolString == null) || ("".equals(selectedProtocolString))) { return; } org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol selectedProtocol = org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.valueOf(selectedProtocolString); if (selectedProtocol == (org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.SPICE)) { loadSpiceData(model, keyMaker); } else if (selectedProtocol == (org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.VNC)) { loadVncData(model, keyMaker); } else if (selectedProtocol == (org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.RDP)) { loadRdpData(model, keyMaker); } }
void onWindowFocusChange(boolean inFocus) { org.ovirt.engine.ui.uicommonweb.models.GridTimer modelTimer = getModelTimer(); if ((modelTimer.isActive()) && (!(modelTimer.isPaused()))) { if (inFocus) { modelTimer.setRefreshRate(readRefreshRate()); } else { modelTimer.setRefreshRate(org.ovirt.engine.ui.common.widget.refresh.AbstractRefreshManager.OUT_OF_FOCUS_REFRESH_RATE); } } }
@org.junit.Test public void canDoActionFailsLongName() { sd.setStorageName(org.ovirt.engine.core.utils.RandomUtils.instance().nextString(11)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_NAME_LENGTH_IS_TOO_LONG); }


@org.ovirt.engine.ui.uicompat.DefaultStringValue("Data Center can be changed only when the Host is in Maintenance mode.") java.lang.String dcCanOnlyBeChangedWhenHostInMaintMode();


private void buildFaultResult() { org.ovirt.engine.core.common.errors.VdcFault fault = new org.ovirt.engine.core.common.errors.VdcFault(); fault.setError(VdcBllErrors.ReachedMaxNumberOfHostsInDC); fault.setMessage(org.ovirt.engine.core.bll.Backend.getInstance().getVdsErrorsTranslator().TranslateErrorTextSingle(fault.getError().toString())); org.ovirt.engine.core.bll.AddVdsSpmIdCommand.getReturnValue().setFault(fault); }
private void updateVdsData() { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { getCompensationContext().snapshotEntity(getVds().getStaticData()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsStaticDao().update(getParameters().getVdsStaticData()); getCompensationContext().stateChanged(); return null; } }); if (org.ovirt.engine.core.bll.UpdateVdsCommand.getParameters().getInstallVds()) { runVdsCommand(VDSCommandType.SetVdsStatus, new org.ovirt.engine.core.common.vdscommands.SetVdsStatusVDSCommandParameters(org.ovirt.engine.core.bll.UpdateVdsCommand.getVdsId(), org.ovirt.engine.core.common.businessentities.VDSStatus.Installing)); } }
@java.lang.Override protected java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.network.NetworkQoS qos) { return qos.getName(); }
@java.lang.Override protected void revealInParent() { com.gwtplatform.mvp.client.proxy.RevealContentEvent.fire(this, MainContentPresenter.TYPE_SetSubTabPanelContent, this); }

@org.ovirt.engine.ui.common.Template("<table cellspacing='0' cellpadding='0'><tr>" + (((((("<td style='background: url({2});width:2px;'></td>" + "<td style='text-align:center;'>") + "<div class='db_bg_image {5} {6}' style='background: url({3}) repeat-x; height: 20px; display: flex;'>") + "<span style=\'vertical-align: middle; line-height: 20px; margin-top: 2px;\' class=\"db_image_container\">{0}</span><div style=\'line-height: 19px;\'>{1}</div></div>") + "</td>") + "<td style='background: url({4});width:2px;'></td>") + "</tr></table>")) com.google.gwt.safehtml.shared.SafeHtml dialogButton(com.google.gwt.safehtml.shared.SafeHtml image, java.lang.String text, java.lang.String start, java.lang.String stretch, java.lang.String end, java.lang.String contentStyleName, java.lang.String customContentStyleName);
private void runStoragePoolUpEvent(final org.ovirt.engine.core.common.businessentities.StoragePool storagePool) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(new java.lang.Runnable() { @java.lang.Override public void run() { try { if (org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().isStoragePoolMasterUp(_storagePoolId)) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().getEventListener().storagePoolUpEvent(storagePool); } } catch (java.lang.RuntimeException exp) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxyData.log.error("Error in StoragePoolUpEvent: {}", exp.getMessage()); org.ovirt.engine.core.vdsbroker.irsbroker.IrsProxyData.log.debug("Exception", exp); } } }); }
@org.junit.Test public void parametersWithSecureDeletionAreNotFixedOnBlockDomainWhenPostZeroIsFalse() { org.ovirt.engine.core.bll.storage.PostZeroHandlerTest.ParametersWithPostZero parameters = org.ovirt.engine.core.bll.storage.PostZeroHandler.fixParametersWithPostZero(new org.ovirt.engine.core.bll.storage.PostZeroHandlerTest.ParametersWithPostZero(false), false); assertPostZeroValue(parameters, false); }
public static org.ovirt.engine.sdk4.ConnectionBuilder connection() { java.lang.Class<? extends org.ovirt.engine.sdk4.ConnectionBuilder> clazz = null; try { clazz = ((java.lang.Class<org.ovirt.engine.sdk4.ConnectionBuilder>) (java.lang.Class.forName("org.ovirt.engine.sdk4.internal.ConnectionBuilder45"))); } catch (java.lang.ClassNotFoundException ex) { try { clazz = ((java.lang.Class<org.ovirt.engine.sdk4.ConnectionBuilder>) (java.lang.Class.forName("org.ovirt.engine.sdk4.internal.ConnectionBuilder42"))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.Error("No connection implementation found", e); } } try { return clazz.newInstance(); } catch (java.lang.Exception e) { throw new java.lang.Error("Failed to initialize connection implementation", e); } }
@org.junit.Test public void canDoActionFailWithUnsupportedDiskInterface() throws java.lang.Exception { org.ovirt.engine.core.compat.Guid storageId = org.ovirt.engine.core.compat.Guid.newGuid(); initializeCommand(storageId); mockVm(); mockStorageDomain(storageId); mockStoragePoolIsoMap(); mockMaxPciSlots(); when(diskValidator.isReadOnlyPropertyCompatibleWithInterface()).thenReturn(ValidationResult.VALID); when(diskValidator.isDiskInterfaceSupported(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED)); when(diskValidator.isVirtIoScsiValid(any(org.ovirt.engine.core.common.businessentities.VM.class))).thenReturn(ValidationResult.VALID); when(command.getDiskValidator(any(org.ovirt.engine.core.common.businessentities.Disk.class))).thenReturn(diskValidator); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_DISK_INTERFACE_UNSUPPORTED.toString())); }
@java.lang.Override protected boolean canDoAction() { boolean result = true; org.ovirt.engine.core.common.businessentities.AuditLog event = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAuditLogDao().get(org.ovirt.engine.core.bll.RemoveExternalEventCommand.getParameters().getId()); if (event == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_EVENT_NOT_FOUND); result = false; } if (event.getOrigin().equalsIgnoreCase(OVIRT)) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLEGAL_ORIGIN); result = false; } if (!(event.getseverity().equals(AuditLogSeverity.ALERT))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_EVENT_ILLRGAL_OPERATION); result = false; } if (!result) { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__EXTERNAL_EVENT); } return result; }

private void canDoActionFailedWithReason(final org.ovirt.engine.core.common.errors.VdcBllMessages message) { assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(message.toString())); }
@java.lang.Override protected void onLoadingStateChanged(com.google.gwt.user.cellview.client.LoadingStateChangeEvent.LoadingState state) { super.onLoadingStateChanged(state); enforceScrollPosition(); if (state == (com.google.gwt.user.cellview.client.LoadingStateChangeEvent.LoadingState.LOADING)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { doAutoSelect = true; } }); } }

@org.junit.Test public void testOtherFieldsNotValidatedInImport() { org.ovirt.engine.core.common.action.ImportVmParameters parameters = createParameters(); java.lang.String tooLongString = org.ovirt.engine.core.utils.RandomUtils.instance().nextPropertyString(((org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.GENERAL_MAX_SIZE) + 1)); parameters.getVm().setUserDefinedProperties(tooLongString); parameters.setImportAsNewEntity(true); org.ovirt.engine.core.bll.exportimport.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> command = new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(parameters, poolPerCluster, externalVmMacsFinder); command.init(); java.util.Set<javax.validation.ConstraintViolation<org.ovirt.engine.core.common.action.ImportVmParameters>> validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, command.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertTrue(validate.isEmpty()); parameters.getVm().setUserDefinedProperties(tooLongString); parameters.setImportAsNewEntity(false); command = new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(parameters, poolPerCluster, externalVmMacsFinder); command.init(); validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, command.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertTrue(validate.isEmpty()); }


public org.ovirt.engine.core.bll.ValidationResult networkNotUsedByRunningVms() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> runningVms = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = getDbFacade().getVmNetworkInterfaceDao().getAllForNetwork(network.getId()); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>> vnicsByVmId = org.ovirt.engine.core.common.businessentities.Entities.vmInterfacesByVmId(vnics); for (org.ovirt.engine.core.common.businessentities.VM vm : getVms()) { if (vm.isRunningOrPaused()) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic : vnicsByVmId.get(vm.getId())) { if ((nic.isPlugged()) && (nic.isLinked())) { runningVms.add(vm); break; } } } } return networkNotUsed(runningVms, VdcBllMessages.VAR__ENTITIES__VMS); }
@javax.ws.rs.Path("{action: (allocatevm)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
private void cluster_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getCluster().getSelectedItem(); if (cluster != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getPmTypeList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.ArrayList<java.lang.String> pmTypes = ((java.util.ArrayList<java.lang.String>) (returnValue)); updatePmTypeList(pmTypes, getPmType()); updatePmTypeList(pmTypes, getPmSecondaryType()); } }), cluster.getCompatibilityVersion()); } }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REGISTER); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_DISK); }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.VM vm) { if ((vm.getVmPoolId()) == null) { switch (vm.getVmType()) { case Desktop : return getApplicationResources().desktopImage(); case Server : return getApplicationResources().serverImage(); default : return getApplicationResources().questionMarkImage(); } } else { return getApplicationResources().manyDesktopsImage(); } }
protected void setUpGetSystemVersionExpectations() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryResult = createMock(org.ovirt.engine.core.common.queries.VdcQueryReturnValue.class); expect(backend.runQuery(eq(VdcQueryType.GetConfigurationValue), queryVdcVersionParams())).andReturn(queryResult); expect(backend.runQuery(eq(VdcQueryType.GetConfigurationValue), queryProductRPMVersionParams())).andReturn(queryResult); expect(queryResult.getSucceeded()).andReturn(true).anyTimes(); expect(queryResult.getReturnValue()).andReturn(org.ovirt.engine.api.restapi.resource.BackendApiResourceTest.SYSTEM_VERSION).anyTimes(); }

@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getUserProfile(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.core.common.businessentities.UserProfile profile = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); java.lang.Boolean connectAutomatically = (profile == null) ? java.lang.Boolean.TRUE : profile.isUserPortalVmLoginAutomatically(); if (connectAutomatically) { handleConnectAutomatically(); } } })); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("LUN is not usable") java.lang.String lunUnusable();


protected void removeVmNetworkInterfaces() { new org.ovirt.engine.core.bll.network.VmInterfaceManager(org.ovirt.engine.core.bll.ImportVmCommand.getMacPool()).removeAll(getVmId()); }
public void setIsHostTabValid(boolean value) { if ((isHostTabValid) != value) { isHostTabValid = value; onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("IsHostTabValid")); } }

@java.lang.Override public java.lang.String getVerb(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1) { return org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.BOND_WITH.getVerb(op1); }

@java.lang.Override protected void executeCommand() { for (org.ovirt.engine.core.compat.Guid vdsId : org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getVdsList()) { if (((org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getTagId()) != null) && ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagVdsByTagIdAndByVdsId(org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getTagId(), vdsId)) != null)) { org.ovirt.engine.core.common.businessentities.VDS vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(vdsId); if (vds != null) { appendCustomValue("VdsNames", vds.getName(), ", "); } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachVdsFromTag(org.ovirt.engine.core.bll.DetachVdsFromTagCommand.getTagId(), vdsId); org.ovirt.engine.core.bll.DetachVdsFromTagCommand.setSucceeded(true); } } }
@java.lang.Override protected org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.businessentities.VmDynamic> createEntityRowMapper() { return org.ovirt.engine.core.dao.VmDynamicDAODbFacadeImpl.VmDynamicRowMapper.instance; }

@org.ovirt.engine.ui.webadmin.DefaultStringValue("Please select reports from the same data center") java.lang.String reportFromDifferentDCsError();
protected void setNetworkId(org.ovirt.engine.api.model.NIC nic) { if ((nic.isSetNetwork()) && (!(nic.getNetwork().isSetId()))) { org.ovirt.engine.core.compat.Guid clusterId = getClusterId(); org.ovirt.engine.core.common.businessentities.network network = lookupClusterNetwork(clusterId, ((nic.getNetwork().getId()) == null ? null : asGuid(nic.getNetwork().getId())), nic.getNetwork().getName()); if (network != null) { nic.getNetwork().setName(null); nic.getNetwork().setId(network.getId().toString()); } } }





@org.junit.Before public void prepareParams() { org.ovirt.engine.core.compat.Guid id = org.ovirt.engine.core.compat.Guid.NewGuid(); newConnection = createConnection(id, "multipass.my.domain.tlv.company.com:/export/allstorage/data2", StorageType.NFS, NfsVersion.V4, 300, 0); org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase parameters = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase(); parameters.setStorageServerConnection(newConnection); parameters.setVdsId(org.ovirt.engine.core.compat.Guid.NewGuid()); parameters.setStoragePoolId(org.ovirt.engine.core.compat.Guid.NewGuid()); command = spy(new org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionCommand<org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase>(parameters)); doReturn(storageConnDao).when(command).getStorageConnDao(); doReturn(storageDomainDynamicDao).when(command).getStorageDomainDynamicDao(); doReturn(storagePoolIsoMapDAO).when(command).getStoragePoolIsoMapDao(); oldConnection = createConnection(id, "multipass.my.domain.tlv.company.com:/export/allstorage/data1", StorageType.NFS, NfsVersion.V4, 50, 0); when(storageConnDao.get(newConnection.getid())).thenReturn(oldConnection); }
@java.lang.Override public void setSpicePluginImplEnabled(boolean enabled, java.lang.String reason) { spicePluginImplRadioButton.setEnabled(enabled); if (!enabled) { spicePluginImplRadioButtonTooltip.setText(reason); } }
private void beforeFirstRefreshTreatment(boolean isVdsUpOrGoingToMaintenance) { if (_vdsManager.getbeforeFirstRefresh()) { boolean flagsChanged = false; final java.util.concurrent.atomic.AtomicBoolean processHardwareCapsNeededTemp = new java.util.concurrent.atomic.AtomicBoolean(); _vdsManager.refreshCapabilities(processHardwareCapsNeededTemp, _vds); flagsChanged = processHardwareCapsNeededTemp.get(); _vdsManager.setbeforeFirstRefresh(false); refreshedCapabilities = true; _saveVdsDynamic = true; processHardwareCapsNeeded = (processHardwareCapsNeeded) ? processHardwareCapsNeeded : flagsChanged; } else if (isVdsUpOrGoingToMaintenance || ((_vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Error))) { return; } org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(_vds.getId()); logable.addCustomValue("VdsStatus", _vds.getStatus().toString()); auditLog(logable, AuditLogType.VDS_DETECTED); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkQoS> networkQoSes = ((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkQoS>) (ReturnValue)); getNetworkQoS().setItems(networkQoSes); getNetworkQoS().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.findNetworkQosById(networkQoSes, defaultQosId)); }

public static java.util.Collection<java.lang.String> replaceWith(java.lang.String propertyName, java.util.List<java.lang.Object> items) { int size = java.lang.Math.min(org.ovirt.engine.core.utils.ReplacementUtils.MAX_NUMBER_OF_PRINTED_ITEMS, items.size()); java.util.List<java.lang.String> printedItems = new java.util.ArrayList<java.lang.String>(size); for (int i = 0; i < size; i++) { printedItems.add(java.lang.String.format("\t%s", items.get(i).toString())); } if ((items.size()) > (org.ovirt.engine.core.utils.ReplacementUtils.MAX_NUMBER_OF_PRINTED_ITEMS)) { printedItems.add("\t..."); } java.util.ArrayList<java.lang.String> replacements = new java.util.ArrayList<java.lang.String>(); replacements.add(java.text.MessageFormat.format("${0} {1}", propertyName, org.apache.commons.lang.StringUtils.join(printedItems, ",\n"))); replacements.add(java.text.MessageFormat.format("${0}_COUNTER {1}", propertyName, items.size())); return replacements; }
protected boolean ValidateNotificationMethod(java.util.List<org.ovirt.engine.core.common.businessentities.event_notification_methods> event_notification_methods, org.ovirt.engine.core.common.businessentities.event_subscriber event_subscriber, org.ovirt.engine.core.common.businessentities.DbUser user) { boolean retValue = true; org.ovirt.engine.core.common.EventNotificationMethods notificationMethod = event_notification_methods.get(0).getmethod_type(); switch (notificationMethod) { case EMAIL : java.lang.String mailAdress = (org.apache.commons.lang.StringUtils.isEmpty(event_subscriber.getmethod_address())) ? user.getemail() : event_subscriber.getmethod_address(); if ((org.apache.commons.lang.StringUtils.isEmpty(mailAdress)) || (!(org.ovirt.engine.core.bll.EventSubscriptionCommandBase.ValidatMailAddress(mailAdress)))) { addCanDoActionMessage(VdcBllMessages.USER_DOES_NOT_HAVE_A_VALID_EMAIL); retValue = false; } break; default : addCanDoActionMessage(VdcBllMessages.EN_UNKNOWN_NOTIFICATION_METHOD); retValue = false; break; } return retValue; }
protected void setObjectName(java.lang.Object object, java.lang.String name, boolean isSuffix) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData) (object)).getVm(); if (isSuffix) { vm.setName(((vm.getName()) + name)); } else { vm.setName(name); } }

@java.lang.Override public java.lang.String toString() { return java.lang.String.format("%s, storageDomain=%s, args=%s", super.toString(), getStorageDomain(), getArgs()); }
protected void handleSetMessageQueryResult(org.ovirt.engine.ui.uicompat.FrontendMultipleQueryAsyncResult result) { setHelpTag(getRemoveQosHelpTag()); setHashName(getRemoveQosHashName()); int index = 0; int numberOfTimesUsedByDiskProfiles = 0; java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.queries.QueryReturnValue returnValue : result.getReturnValues()) { java.util.List<org.ovirt.engine.core.common.businessentities.Nameable> diskProfileEntities = returnValue.getReturnValue(); java.lang.String qosName = sourceListModel.getSelectedItems().get(index).getName(); if ((diskProfileEntities.size()) == 0) { list.add(qosName); } else { numberOfTimesUsedByDiskProfiles += diskProfileEntities.size(); java.util.List<java.lang.String> diskProfileNames = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Nameable diskProfileEntity : diskProfileEntities) { java.lang.String diskProfileName = diskProfileEntity.getName(); diskProfileNames.add(diskProfileName); } java.lang.String diskProfileNamesAsString = org.ovirt.engine.ui.uicompat.external.StringUtils.join(diskProfileNames, ", "); list.add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().removeStorageQoSItem(qosName, diskProfileNamesAsString)); } index++; } setMessage(getRemoveQosMessage(numberOfTimesUsedByDiskProfiles)); setItems(list); }
protected void loadTemplateData(org.ovirt.engine.core.common.businessentities.VmTemplate template) { setGraphicsAndVideoDevices(template); if (((template.getInterfaces()) == null) || (template.getInterfaces().isEmpty())) { template.setInterfaces(getVmNetworkInterfaceDao().getAllForTemplate(template.getId())); } }

@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { if (!(org.ovirt.engine.core.bll.gluster.GeoRepSessionCommandBase.isInternalExecution())) { return java.util.Collections.singletonMap(getGeoRepSession().getId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.GLUSTER_GEOREP, VdcBllMessages.ACTION_TYPE_FAILED_GEOREP_SESSION_LOCKED)); } return null; }
@org.junit.Test public void canDoAction_vmNameExists_Test() { doReturn(new org.ovirt.engine.core.common.scheduling.AffinityGroup()).when(affinityGroupDao).getByName(anyString()); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_AFFINITY_GROUP_NAME_EXISTS); }
public void forceRemove() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().forceRemoveDataCenterTitle()); model.setHelpTag(HelpTag.force_remove_data_center); model.setHashName("force_remove_data_center"); model.getLatch().setIsAvailable(true); model.getLatch().setIsChangable(true); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.StoragePool a : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.StoragePool>cast(getSelectedItems())) { list.add(a.getName()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnForceRemove", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(VdcActionType.RemoveVmTemplate); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.PostZeroHandler.fixParametersWithPostZero(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getWipeAfterDelete(), false))); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getReturnValue().getInternalVdsmTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), VdcActionType.RemoveVmTemplate, VdcObjectType.Storage, org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.setSucceeded(true); } }


@org.junit.Test public void testGustIp() { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(); vmDynamic.setStatus(VMStatus.Up); vmDynamic.setVmIp("2.2.2.2"); vm.setDynamicData(vmDynamic); org.ovirt.engine.api.model.VM map = org.ovirt.engine.api.restapi.types.VmMapper.map(vm, ((org.ovirt.engine.api.model.VM) (null))); assertNotNull(map.getGuestInfo().getIps().getIPs().get(0)); assertEquals(map.getGuestInfo().getIps().getIPs().get(0).getAddress(), "2.2.2.2"); }
public static org.ovirt.engine.core.common.businessentities.VmNumaNode createVmNumaNode(int index, java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> vdsNumaNodes) { org.ovirt.engine.core.common.businessentities.VmNumaNode numaNode = org.ovirt.engine.core.bll.utils.NumaTestUtils.createVmNumaNode(index); final java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>> numaPinning = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VdsNumaNode vdsNumaNode : vdsNumaNodes) { numaPinning.add(org.ovirt.engine.core.bll.utils.NumaTestUtils.toWeirdPair(vdsNumaNode)); } numaNode.setVdsNumaNodeList(numaPinning); return numaNode; }
private void Run() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VM a = ((org.ovirt.engine.core.common.businessentities.VM) (item)); boolean reinitialize = (!(a.getis_initialized())) && (org.ovirt.engine.ui.uicommonweb.DataProvider.IsWindowsOsType(a.getvm_os())); org.ovirt.engine.core.common.action.RunVmParams tempVar = new org.ovirt.engine.core.common.action.RunVmParams(a.getId()); tempVar.setReinitialize(reinitialize); list.add(tempVar); } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.RunVm, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void Executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { } }, null); }
@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.widget.table.column.Context context, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb) { if (volume == null) { return; } int upBricks = 0; int downBricks = 0; for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : volume.getBricks()) { if (brick.isOnline()) { upBricks++; } else { downBricks++; } } com.google.gwt.resources.client.ImageResource upImage = resources.upImage(); com.google.gwt.resources.client.ImageResource downImage = resources.downImage(); com.google.gwt.safehtml.shared.SafeHtml upImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(upImage).getHTML()); com.google.gwt.safehtml.shared.SafeHtml downImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(downImage).getHTML()); sb.append(applicationTemplates.volumeBrickStatusTemplate(upImageHtml, upBricks, downImageHtml, downBricks)); }
@org.junit.Test public void testJsonEmptyDiskDescription() throws java.io.IOException { assertDiskDescriptionMap("DiskAlias", ""); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.DiskImage disk) { org.ovirt.engine.ui.uicommonweb.models.vms.ImportData importData = object.getDiskImportData(disk.getId()); java.util.ArrayList<java.lang.String> storageDomainsNameList = new java.util.ArrayList<java.lang.String>(); org.ovirt.engine.core.common.businessentities.storage_domains selectedStorageDomain = null; if ((importData != null) && ((importData.getStorageDomains()) != null)) { for (org.ovirt.engine.core.common.businessentities.storage_domains storageDomain : importData.getStorageDomains()) { storageDomainsNameList.add(storageDomain.getstorage_name()); if ((importData.getSelectedStorageDomain()) != null) { if (storageDomain.getId().equals(importData.getSelectedStorageDomain().getId())) { selectedStorageDomain = storageDomain; } } } } ((org.ovirt.engine.ui.webadmin.widget.table.column.CustomSelectionCell) (getCell())).setOptions(storageDomainsNameList); if (!(storageDomainsNameList.isEmpty())) { if (selectedStorageDomain != null) { return selectedStorageDomain.getstorage_name(); } else { return storageDomainsNameList.get(0); } } return ""; }


@java.lang.Override public org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice> mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { @java.lang.SuppressWarnings("synthetic-access") org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.VM, org.ovirt.engine.core.common.businessentities.VmDevice> entity = new org.ovirt.engine.core.common.utils.Pair(); entity.setFirst(org.ovirt.engine.core.dao.VmDAODbFacadeImpl.VMRowMapper.instance.mapRow(rs, rowNum)); entity.setSecond(VmDeviceDAODbFacadeImpl.VmDeviceRowMapper.instance.mapRow(rs, rowNum)); return entity; }


protected org.ovirt.engine.core.common.businessentities.AdUser populateUserData(org.ovirt.engine.core.common.businessentities.AdUser user, java.lang.String domain) { if (user == null) { return null; } user.setDomainControler(domain); java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.businessentities.ad_groups> groupsDict = new java.util.HashMap<java.lang.String, org.ovirt.engine.core.common.businessentities.ad_groups>(); org.ovirt.engine.core.bll.adbroker.GroupsDNQueryGenerator generator = new org.ovirt.engine.core.bll.adbroker.GroupsDNQueryGenerator(); proceedGroupsSearchResult(user.getMemberof(), groupsDict, generator); user.setGroups(groupsDict); return user; }
private static org.ovirt.engine.core.common.businessentities.StoragePool createNewStoragePool() { org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.createBasicPool(); pool.setStorageType(StorageType.NFS); pool.setcompatibility_version(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.VERSION_1_1); return pool; }
public boolean validateVmProperties(org.ovirt.engine.core.common.businessentities.VM vm, java.util.List<java.lang.String> messages) { java.util.List<org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.ValidationError> validationErrors = getVmPropertiesUtils().validateVMProperties(vm.getVdsGroupCompatibilityVersion(), vm.getStaticData()); if (!(validationErrors.isEmpty())) { org.ovirt.engine.core.bll.VmHandler.handleCustomPropertiesError(validationErrors, messages); return false; } return true; }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.Tags tag = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getByName(org.ovirt.engine.core.bll.UpdateTagCommand.getParameters().getTag().getTagName()); if ((tag != null) && (!(tag.getTagId().equals(org.ovirt.engine.core.bll.UpdateTagCommand.getParameters().getTag().getTagId())))) { addCanDoActionMessage(EngineMessage.TAGS_SPECIFY_TAG_IS_IN_USE); return false; } tag = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().get(org.ovirt.engine.core.bll.UpdateTagCommand.getParameters().getTag().getTagId()); if (((tag.getIsReadonly()) != null) && (tag.getIsReadonly())) { addCanDoActionMessage(EngineMessage.TAGS_CANNOT_EDIT_READONLY_TAG); return false; } return true; }
protected static void reportUnsupportedVnicProfileFeatures(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.network.VmNic nic, org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile, java.util.List<org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilderBase.VNIC_PROFILE_PROPERTIES> unsupportedFeatures) { if (unsupportedFeatures.isEmpty()) { return; } org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase event = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); event.setVmId(vm.getId()); event.setVdsGroupId(vm.getVdsGroupId()); event.setCustomId(nic.getId().toString()); event.setCompatibilityVersion(vm.getVdsGroupCompatibilityVersion().toString()); event.addCustomValue("NicName", nic.getName()); event.addCustomValue("VnicProfile", (vnicProfile == null ? null : vnicProfile.getName())); java.lang.String[] unsupportedFeatureNames = new java.lang.String[unsupportedFeatures.size()]; for (int i = 0; i < (unsupportedFeatures.size()); i++) { unsupportedFeatureNames[i] = unsupportedFeatures.get(i).getFeatureName(); } event.addCustomValue("UnsupportedFeatures", org.apache.commons.lang.StringUtils.join(unsupportedFeatureNames, ", ")); new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector().log(event, AuditLogType.VNIC_PROFILE_UNSUPPORTED_FEATURES); }
private void setVolumeOptions(org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { java.util.List<java.lang.String> errors = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeOptionEntity option : volume.getOptions()) { option.setVolumeId(volume.getId()); org.ovirt.engine.core.common.action.VdcReturnValueBase setOptionReturnValue = runInternalAction(VdcActionType.SetGlusterVolumeOption, new org.ovirt.engine.core.common.action.gluster.GlusterVolumeOptionParameters(option), createCommandContext(volume, option)); if (!(setOptionReturnValue.getSucceeded())) { setSucceeded(false); errors.addAll(setOptionReturnValue.getCanDoActionMessages()); errors.addAll(setOptionReturnValue.getExecuteFailedMessages()); } } if (!(errors.isEmpty())) { handleVdsErrors(AuditLogType.GLUSTER_VOLUME_OPTION_SET_FAILED, errors); } }

@com.gwtplatform.mvp.client.annotations.ProxyEvent public void onUiCommonInit(org.ovirt.engine.ui.common.uicommon.model.UiCommonInitEvent event) { modelProvider.getModel().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.Object entity = modelProvider.getModel().getEntity(); if (entity != null) { onDetailModelEntityChange(entity); } } }); modelProvider.getModel().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs pcArgs = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)); if (PropertyChangedEventArgs.Args.PROGRESS.toString().equals(pcArgs.propertyName)) { if ((modelProvider.getModel().getProgress()) != null) { if ((getTable()) != null) { getTable().setLoadingState(LoadingState.LOADING); } } } } }); }
@java.lang.Override public org.ovirt.engine.api.model.GlusterBricks list() { throw new org.ovirt.engine.core.compat.NotImplementedException(); }

@java.lang.Override public void onSuccess(final java.util.List<org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.action.VdcActionParametersBase>> operationList, final java.util.List<org.ovirt.engine.core.common.action.VdcReturnValueBase> resultObject) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Frontend: successfully executed runMultipleAction, determining result!"); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase> failed = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcReturnValueBase>(); for (org.ovirt.engine.core.common.action.VdcReturnValueBase v : resultObject) { if (!(v.getCanDoAction())) { failed.add(v); } } if (!(failed.isEmpty())) { translateErrors(failed); getEventsHandler().runMultipleActionFailed(actionType, failed); } if (callback != null) { callback.executed(new org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult(actionType, parameters, resultObject, state)); } org.ovirt.engine.ui.frontend.communication.RefreshActiveModelEvent.fire(this, true); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Are you sure you want to Power Off the following Virtual Machines?") java.lang.String areYouSureYouWantToStopTheFollowingVirtualMachinesMsg();
public static void GetVmTemplatesWithPermittedAction(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate> list = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate>(); if (source != null) { org.ovirt.engine.core.common.businessentities.VmTemplate blankTemplate = new org.ovirt.engine.core.common.businessentities.VmTemplate(); for (org.ovirt.engine.core.common.businessentities.VmTemplate template : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate>) (source))) { if (template.getId().equals(Guid.Empty)) { blankTemplate = template; } else if ((template.getstatus()) == (org.ovirt.engine.core.common.businessentities.VmTemplateStatus.OK)) { list.add(template); } } java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.VmTemplateByNameComparer()); list.add(0, blankTemplate); } return list; } }; org.ovirt.engine.core.common.queries.GetEntitiesWithPermittedActionParameters getEntitiesWithPermittedActionParameters = new org.ovirt.engine.core.common.queries.GetEntitiesWithPermittedActionParameters(); getEntitiesWithPermittedActionParameters.setActionGroup(actionGroup); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVmTemplatesWithPermittedAction, getEntitiesWithPermittedActionParameters, aQuery); }
@java.lang.Override public org.ovirt.engine.api.model.StorageDomain update(org.ovirt.engine.api.model.StorageDomain incoming) { validateEnums(org.ovirt.engine.api.model.StorageDomain.class, incoming); org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid> storageDomainResolver = new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetStorageDomainById, org.ovirt.engine.core.common.queries.IdQueryParameters.class); org.ovirt.engine.core.common.businessentities.StorageDomain entity = getEntity(storageDomainResolver, true); org.ovirt.engine.api.model.StorageDomain model = map(entity, new org.ovirt.engine.api.model.StorageDomain()); org.ovirt.engine.core.common.businessentities.storage.StorageType storageType = entity.getStorageType(); if (storageType != null) { switch (storageType) { case ISCSI : case FCP : extendStorageDomain(incoming, model, storageType); break; default : break; } } return addLinks(performUpdate(incoming, entity, model, storageDomainResolver, VdcActionType.UpdateStorageDomain, new org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.UpdateParametersProvider()), new java.lang.String[]{ "templates", "vms" }); }
private void copyVmPermissions(org.ovirt.engine.core.bll.UniquePermissionsSet permissionsToAdd) { if ((!(isVmInDb)) || (!(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().isCopyVmPermissions()))) { return; } org.ovirt.engine.core.dao.PermissionDAO dao = org.ovirt.engine.core.bll.AddVmTemplateCommand.getDbFacade().getPermissionDao(); java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> vmPermissions = dao.getAllForEntity(org.ovirt.engine.core.bll.AddVmTemplateCommand.getVmId(), org.ovirt.engine.core.bll.AddVmTemplateCommand.getCurrentUser().getId(), false); for (org.ovirt.engine.core.common.businessentities.Permissions vmPermission : vmPermissions) { permissionsToAdd.addPermission(vmPermission.getad_element_id(), vmPermission.getrole_id(), org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getVmTemplateId(), VdcObjectType.VmTemplate); } }
@java.lang.Override protected void initializeModelHandlers() { super.initializeModelHandlers(); getModel().getResetRequestedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel> items = getModel().getItems(); if ((items != null) && (!(items.isEmpty()))) { selectionModel.setSelected(items.get(0), true); } } }); }

protected void setGetNetworksQueryExpectations(int times, java.util.List<org.ovirt.engine.core.common.businessentities.network> networks) throws java.lang.Exception { while ((times--) > 0) { setUpEntityQueryExpectations(VdcQueryType.GetAllNetworksByClusterId, org.ovirt.engine.core.common.queries.VdsGroupQueryParamenters.class, new java.lang.String[]{ "VdsGroupId" }, new java.lang.Object[]{ GUIDS[0] }, networks); } }
java.util.List<java.lang.String> allocateMacAddresses(int numberOfAddresses);
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to Edit Cluster properties") java.lang.String allowToEditClusterPropertiesRoleTreeTooltip();


@org.junit.Test public void testIscsiLunDiskWithNoAddressCantBeAdded() { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createISCSILunDisk(); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(disk); initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid(), parameters); disk.getLun().getLunConnections().get(0).setConnection(null); assertFalse("checkIfLunDiskCanBeAdded() succeded for ISCSI lun which LUNs has storage_server_connection with a null address", command.checkIfLunDiskCanBeAdded(spyDiskValidator(disk))); assertTrue("checkIfLunDiskCanBeAdded() failed but correct can do action hasn't been added to the return response", verifyCanDoActionMessagesContainMessage(EngineMessage.ACTION_TYPE_FAILED_DISK_LUN_ISCSI_MISSING_CONNECTION_PARAMS)); clearCanDoActionMessages(); disk.getLun().getLunConnections().get(0).setConnection(""); assertFalse("checkIfLunDiskCanBeAdded() succeded for ISCSI lun which LUNs has storage_server_connection with a empty address", command.checkIfLunDiskCanBeAdded(spyDiskValidator(disk))); assertTrue("checkIfLunDiskCanBeAdded() failed but correct can do action hasn't been added to the return response", verifyCanDoActionMessagesContainMessage(EngineMessage.ACTION_TYPE_FAILED_DISK_LUN_ISCSI_MISSING_CONNECTION_PARAMS)); }
@org.junit.Test public void getHugeMemoryFitsIntoOneHugePage() { org.ovirt.engine.core.common.utils.HugePageUtils utils = new org.ovirt.engine.core.common.utils.HugePageUtils(); org.ovirt.engine.core.common.businessentities.VmBase base = new org.ovirt.engine.core.common.businessentities.VmBase(); base.setCustomProperties("hugepages=1024"); base.setMemSizeMb(1024); assertThat(utils.getHugePages(base).size(), is(1)); assertThat(utils.getHugePages(base).get(1024), is(1)); }
public void setvds_name(java.lang.String value) { this.mVdsStatic.setvds_name(value); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> pools = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>) (returnValue)); org.ovirt.engine.core.common.businessentities.StoragePool pool = pools.get(0); if (pool != null) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetStorageDomainList(((org.ovirt.engine.ui.frontend.AsyncQuery) (model)), pool.getId()); } }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((disk.getVm()) == null) { return; } boolean isVirtioScsiEnabled = java.lang.Boolean.TRUE.equals(((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)).getEntity()); org.ovirt.engine.core.compat.Version clusterVersion = disk.getVm().getCompatibilityVersion(); interfaceInfoIcon.setVisible((((clusterVersion.compareTo(Version.v3_3)) >= 0) && (!isVirtioScsiEnabled))); }
public org.ovirt.engine.core.bll.ValidationResult networkNotUsedByRunningVms() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> runningVms = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = getDbFacade().getVmNetworkInterfaceDao().getAllForNetwork(network.getId()); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>> vnicsByVmId = org.ovirt.engine.core.common.businessentities.Entities.vmInterfacesByVmId(vnics); for (org.ovirt.engine.core.common.businessentities.VM vm : getVms()) { if (vm.isRunningOrPaused()) { for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface nic : vnicsByVmId.get(vm.getId())) { if (org.ovirt.engine.core.bll.common.predicates.VmNetworkCanBeUpdatedPredicate.getInstance().eval(nic)) { runningVms.add(vm); break; } } } } return networkNotUsed(runningVms, VdcBllMessages.VAR__ENTITIES__VMS, VdcBllMessages.VAR__ENTITIES__VM); }
@java.lang.Override public void Executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase ticketReturnValue = result.getReturnValue(); if ((ticketReturnValue != null) && ((ticketReturnValue.getActionReturnValue()) != null)) { otp64 = ((java.lang.String) (ticketReturnValue.getActionReturnValue())); if ((org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(getEntity().getdisplay_ip())) || (org.ovirt.engine.core.compat.StringHelper.stringsEqual(getEntity().getdisplay_ip(), "0"))) { org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object ReturnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel consoleModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VncConsoleModel) (model)); java.lang.Iterable networkInterfaces = ((java.lang.Iterable) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue())); java.util.Iterator networkInterfacesIterator = networkInterfaces.iterator(); while (networkInterfacesIterator.hasNext()) { org.ovirt.engine.core.common.businessentities.VdsNetworkInterface currentNetworkInterface = ((org.ovirt.engine.core.common.businessentities.VdsNetworkInterface) (networkInterfacesIterator.next())); if (currentNetworkInterface == null) { continue; } if (currentNetworkInterface.getIsManagement()) { consoleModel.postGetHost(currentNetworkInterface.getAddress()); return; } } } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetVdsInterfacesByVdsId, new org.ovirt.engine.core.common.queries.GetVdsByVdsIdParameters(getEntity().getrun_on_vds().getValue()), _asyncQuery); } else { postGetHost(getEntity().getdisplay_ip()); } } }
public org.ovirt.engine.sdk.Api connect() throws java.io.IOException, org.ovirt.engine.sdk.exceptions.ServerException, org.ovirt.engine.sdk.exceptions.UnsecuredConnectionAttemptError { java.lang.String url = java.lang.String.format("%s://%s:%s/ovirt-engine/api", protocol, server, port); org.ovirt.optimizer.service.OvirtClient.log.debug(java.lang.String.format("Logging to %s as %s", url, username)); return new org.ovirt.engine.sdk.Api(url, username, password, true); }
public static java.util.ArrayList<org.ovirt.engine.core.common.businessentities.LUNs> ParseLUNList(org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct[] lunList) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.LUNs> result = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.LUNs>(lunList.length); for (org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct xlun : lunList) { result.add(org.ovirt.engine.core.vdsbroker.vdsbroker.GetDeviceListVDSCommand.ParseLunFromXmlRpc(xlun)); } return result; }
public org.ovirt.engine.core.bll.ValidationResult glusterNetworkSupported() { return (networkCluster.isGluster()) && (!(org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterNetworkRoleSupported(version))) ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.GLUSTER_NETWORK_NOT_SUPPORTED_FOR_POOL_LEVEL) : org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc getExternalVmList(java.lang.String uri, java.lang.String username, java.lang.String password) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("Host.getExternalVMs").withParameter("uri", uri).withParameter("username", username).withParameter("password", password).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("vmList").withResponseType(java.lang.Object[].class); return new org.ovirt.engine.core.vdsbroker.vdsbroker.VMListReturnForXmlRpc(response); }

private void onRemove() { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); if ((model.getProgress()) != null) { return; } final java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> list = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (java.util.Map.Entry<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.ui.uicommonweb.models.EntityModel> entry : vmsRemoveMap.entrySet()) { list.add(new org.ovirt.engine.core.common.action.RemoveVmParameters(entry.getKey(), false, ((java.lang.Boolean) (entry.getValue().getEntity())))); } model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.RemoveVm, list, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (result.getState())); localModel.stopProgress(); cancel(); } }, model); }
@org.junit.Test public void bridgePropertiesNonVm() { org.ovirt.engine.core.common.businessentities.network.Network network = createManagementNetwork(); network.setVmNetwork(false); mockExistingNetworks(network); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork("eth0", network); mockExistingIfaces(iface); iface.setCustomProperties(createCustomProperties()); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(iface), Version.v3_5); validateAndExpectViolation(helper, VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_BAD_INPUT, org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME); }
private void updatePmModels() { boolean isPm = getIsPm().getEntity(); final java.lang.String ciscoUcsValue = "cisco_ucs"; getManagementIp().setIsChangeable(isPm); getManagementIp().setIsValid(true); getPmUserName().setIsChangeable(isPm); getPmUserName().setIsValid(true); getPmPassword().setIsChangeable(isPm); getPmPassword().setIsValid(true); getPmType().setIsChangeable(isPm); getPmType().setIsValid(true); getPmPort().setIsChangeable(isPm); getPmPort().setIsValid(true); getPmProxyPreferencesList().setIsChangeable(getIsPm().getEntity()); java.lang.String proxySelectedItem = getPmProxyPreferencesList().getSelectedItem(); getTestCommand().setIsExecutionAllowed(isPm); getProxyUpCommand().setIsExecutionAllowed((isPm && (proxySelectedItem != null))); getProxyDownCommand().setIsExecutionAllowed((isPm && (proxySelectedItem != null))); getPmSlot().setIsChangeable(isPm); getPmOptions().setIsChangeable(isPm); getPmOptions().setIsValid(true); getPmSecure().setIsChangeable(isPm); org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getCluster().getSelectedItem(); java.lang.String version = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getDefaultConfigurationVersion(); if (cluster != null) { version = cluster.getCompatibilityVersion().toString(); } java.lang.String pmType = getPmType().getSelectedItem(); if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(pmType))) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getPmOptions(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<java.lang.String> pmOptions = ((java.util.ArrayList<java.lang.String>) (returnValue)); if (pmOptions != null) { getPmPort().setIsAvailable(pmOptions.contains(org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmPortKey)); getPmSlot().setIsAvailable(pmOptions.contains(org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmSlotKey)); getPmSecure().setIsAvailable(pmOptions.contains(org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmSecureKey)); getPmEncryptOptions().setIsAvailable(pmOptions.contains(org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmEncryptOptions)); } } }), pmType, version); setCiscoUcsPrimaryPmTypeSelected(pmType.equals(ciscoUcsValue)); } else { getPmPort().setIsAvailable(false); getPmSlot().setIsAvailable(false); getPmSecure().setIsAvailable(false); } getPmSecondaryIp().setIsChangeable(isPm); getPmSecondaryIp().setIsValid(true); getPmSecondaryUserName().setIsChangeable(isPm); getPmSecondaryUserName().setIsValid(true); getPmSecondaryPassword().setIsChangeable(isPm); getPmSecondaryPassword().setIsValid(true); getPmSecondaryType().setIsChangeable(isPm); getPmSecondaryType().setIsValid(true); getPmSecondaryPort().setIsChangeable(isPm); getPmSecondaryPort().setIsValid(true); getPmSecondarySlot().setIsChangeable(isPm); getPmSecondaryOptions().setIsChangeable(isPm); getPmSecondaryOptions().setIsValid(true); getPmSecondarySecure().setIsChangeable(isPm); getDisableAutomaticPowerManagement().setIsValid(true); getDisableAutomaticPowerManagement().setIsChangeable(isPm); java.lang.String pmSecondaryType = getPmSecondaryType().getSelectedItem(); if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(pmSecondaryType))) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getPmOptions(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<java.lang.String> pmOptions = ((java.util.ArrayList<java.lang.String>) (returnValue)); if (pmOptions != null) { getPmSecondaryPort().setIsAvailable(pmOptions.contains(org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmPortKey)); getPmSecondarySlot().setIsAvailable(pmOptions.contains(org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmSlotKey)); getPmSecondarySecure().setIsAvailable(pmOptions.contains(org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmSecureKey)); getPmSecondaryEncryptOptions().setIsAvailable(pmOptions.contains(org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmEncryptOptions)); } } }), pmSecondaryType, version); setCiscoUcsSecondaryPmTypeSelected(pmSecondaryType.equals(ciscoUcsValue)); } else { getPmSecondaryPort().setIsAvailable(false); getPmSecondarySlot().setIsAvailable(false); getPmSecondarySecure().setIsAvailable(false); } getPmVariants().setIsChangeable(isPm); getPmSecondaryConcurrent().setIsChangeable(isPm); getPmKdumpDetection().setIsChangeable(isPm); getTestCommand().setIsExecutionAllowed(isPm); }
public java.util.Map<java.lang.String, java.lang.Object> reconstructMaster(java.lang.String spUUID, java.lang.String poolName, java.lang.String masterDom, java.util.Map<java.lang.String, java.lang.String> domDict, int masterVersion, java.lang.String lockPolicy, int lockRenewalIntervalSec, int leaseTimeSec, int ioOpTimeoutSec, int leaseRetries);


public void engineInitialize() { createInternalAAAConfigurations(); createKerberosLdapAAAConfigurations(); for (java.io.File directory : org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getExtensionsDirectories()) { if (!(directory.exists())) { org.ovirt.engine.core.utils.extensionsmgr.EngineExtensionsManager.log.warn("The directory '{}' cotaning configuration files does not exist.", directory.getAbsolutePath()); } else { java.io.File[] files = directory.listFiles(); if (files != null) { java.util.Arrays.sort(files); for (java.io.File file : files) { if (file.getName().endsWith(".properties")) { load(file); } } } } } for (org.ovirt.engine.core.extensions.mgr.ExtensionProxy extension : getLoadedExtensions()) { if (org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getBoolean(((org.ovirt.engine.core.utils.extensionsmgr.EngineExtensionsManager.ENGINE_EXTENSION_ENABLED) + (extension.getContext().<java.lang.String>get(Base.ContextKeys.INSTANCE_NAME))), java.lang.Boolean.parseBoolean(extension.getContext().<java.util.Properties>get(Base.ContextKeys.CONFIGURATION).getProperty(Base.ConfigKeys.ENABLED, "true")))) { initialize(extension.getContext().<java.lang.String>get(Base.ContextKeys.INSTANCE_NAME)); } } dump(); }

@org.junit.Test public void testNetworkAttachedToClusterWhenNotAttached() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNetworkId(network.getId()); org.ovirt.engine.core.common.businessentities.network.NetworkClusterId networkClusterId = new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(host.getVdsGroupId(), network.getId()); when(networkClusterDaoMock.get(eq(networkClusterId))).thenReturn(null); when(networkDaoMock.get(eq(network.getId()))).thenReturn(network); assertThat(createNetworkAttachmentValidator(attachment).networkAttachedToCluster(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.NETWORK_NOT_EXISTS_IN_CLUSTER)); }
private void registerHandlers() { model.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { java.lang.String propName = args.propertyName; if (("Window".equals(propName)) && ((model.getWindow()) == null)) { if (model.getSpecificClusterQuota().getEntity()) { quotaClusterTable.asEditor().edit(model.getAllDataCenterClusters()); } else { quotaClusterTable.asEditor().edit(model.getQuotaClusters()); } if (model.getSpecificStorageQuota().getEntity()) { quotaStorageTable.asEditor().edit(model.getAllDataCenterStorages()); } else { quotaStorageTable.asEditor().edit(model.getQuotaStorages()); } } } }); model.getSpecificClusterQuota().getEntityChangedEvent().addListener(clusterListener); model.getSpecificStorageQuota().getEntityChangedEvent().addListener(storageListener); }

public org.ovirt.engine.core.bll.ValidationResult isDiskAttachedToVm(org.ovirt.engine.core.compat.Guid vmId) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vms = getVmDao().getVmsListForDisk(disk.getId(), true); return org.ovirt.engine.core.bll.ValidationResult.failWith(EngineMessage.ACTION_TYPE_FAILED_DISK_NOT_ATTACHED_TO_VM).when(vms.stream().noneMatch(( vm) -> vm.getId().equals(vmId))); }
protected java.lang.String getSizeString(java.lang.Double size, org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit inUnit) { if (size == null) { return constants.notAvailableLabel(); } else { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.utils.SizeConverter.SizeUnit, java.lang.Double> sizeWithUnits = org.ovirt.engine.core.common.utils.SizeConverter.autoConvert(size.longValue(), inUnit); return ((formatSize(sizeWithUnits.getSecond())) + " ") + (sizeWithUnits.getFirst().toString()); } }

@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = getVdsGroup(); boolean initSucceeded = true; if (vdsGroup.supportsTrustedService()) { initSucceeded = initTrustedService(); } if (initSucceeded && (vdsGroup.supportsVirtService())) { initSucceeded = initVirtResources(); } if (initSucceeded && (vdsGroup.supportsGlusterService())) { initSucceeded = initGlusterHost(); } setSucceeded(initSucceeded); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.InstanceType.class, to = org.ovirt.engine.api.model.InstanceType.class) public static org.ovirt.engine.api.model.InstanceType map(org.ovirt.engine.core.common.businessentities.InstanceType entity, org.ovirt.engine.api.model.InstanceType incoming) { org.ovirt.engine.api.model.InstanceType res = (incoming != null) ? incoming : new org.ovirt.engine.api.model.InstanceType(); org.ovirt.engine.api.restapi.types.TemplateMapper.map(((org.ovirt.engine.core.common.businessentities.VmTemplate) (entity)), res); return res; }

@java.lang.Override public org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBatchMapper() { return new org.ovirt.engine.core.dal.dbbroker.MapSqlParameterMapper<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity>() { @java.lang.Override public org.springframework.jdbc.core.namedparam.MapSqlParameterSource map(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity entity) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource paramValue = new org.springframework.jdbc.core.namedparam.MapSqlParameterSource().addValue("volume_id", entity.getVolumeId()).addValue("server_id", entity.getServerId()).addValue("brick_dir", entity.getBrickDirectory()).addValue("status", entity.getStatus().name()).addValue("id", entity.getId().toString()).addValue("brick_order", entity.getBrickOrder()).addValue("network_id", entity.getNetworkId()).addValue("task_id", ((entity.getAsyncTask().getTaskId()) != null ? entity.getAsyncTask().getTaskId().toString() : "")); return paramValue; } }; }

@java.lang.Override public void render(org.ovirt.engine.ui.common.widget.table.cell.Context context, java.lang.String value, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb, java.lang.String id) { if (value != null) { sb.appendHtmlConstant("<a href='javascript:;' style='display: inline-block'>"); super.render(context, value, sb); sb.appendHtmlConstant("</a>"); } }
@java.lang.Override public void cleanup() { driver.cleanup(); }
@java.lang.Override protected boolean canDoAction() { clusterId = getParameters().getClusterId(); serverId = getParameters().getServerId(); serviceType = getParameters().getServiceType(); actionType = getParameters().getActionType(); if (!(org.ovirt.engine.core.bll.gluster.ManageGlusterServiceCommand.manageActionDetailsMap.keySet().contains(actionType))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_ACTION_TYPE); } if ((org.ovirt.engine.core.compat.Guid.isNullOrEmpty(clusterId)) && (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(serverId))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTERID_AND_SERVERID_BOTH_NULL); } if ((!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(clusterId))) && ((getClusterUtils().getAllUpServers(clusterId).size()) == 0)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_NO_SERVERS_FOR_CLUSTER); } return true; }

@java.lang.Override public T mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { T entity = createNetworkEntity(); entity.setId(org.ovirt.engine.core.dao.network.NetworkDaoDbFacadeImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "id")); entity.setName(rs.getString("name")); entity.setDescription(rs.getString("description")); entity.setComment(rs.getString("free_text_comment")); entity.setType(((java.lang.Integer) (rs.getObject("type")))); entity.setAddr(rs.getString("addr")); entity.setSubnet(rs.getString("subnet")); entity.setGateway(rs.getString("gateway")); entity.setVlanId(((java.lang.Integer) (rs.getObject("vlan_id")))); entity.setStp(rs.getBoolean("stp")); entity.setDataCenterId(org.ovirt.engine.core.dao.network.NetworkDaoDbFacadeImpl.NetworkRowMapperBase.getGuidDefaultEmpty(rs, "storage_pool_id")); entity.setMtu(rs.getInt("mtu")); entity.setVmNetwork(rs.getBoolean("vm_network")); org.ovirt.engine.core.compat.Guid providerId = org.ovirt.engine.core.dao.network.NetworkDaoDbFacadeImpl.NetworkRowMapperBase.getGuid(rs, "provider_network_provider_id"); if (providerId != null) { entity.setProvidedBy(new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(providerId, rs.getString("provider_network_external_id"))); } return entity; }
public java.lang.String getServletURL() { return servletURL; }

protected void addVmTemplateToDb() { getVmTemplate().setVdsGroupId(getParameters().getVdsGroupId()); getVmTemplate().setStatus(VmTemplateStatus.Locked); getVmTemplate().setQuotaId(getParameters().getQuotaId()); org.ovirt.engine.core.bll.VmHandler.updateImportedVmUsbPolicy(getVmTemplate()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().save(getVmTemplate()); getCompensationContext().snapshotNewEntity(getVmTemplate()); int count = 1; for (org.ovirt.engine.core.common.businessentities.DiskImage image : getImages()) { image.setActive(true); org.ovirt.engine.core.common.businessentities.image_storage_domain_map map = org.ovirt.engine.core.bll.BaseImagesCommand.saveImage(image); getCompensationContext().snapshotNewEntity(image.getImage()); getCompensationContext().snapshotNewEntity(map); if (!(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getBaseDiskDao().exists(image.getId()))) { image.setDiskAlias(org.ovirt.engine.core.bll.ImagesHandler.getSuggestedDiskAlias(image, getVmTemplateName(), count)); count++; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getBaseDiskDao().save(image); getCompensationContext().snapshotNewEntity(image); } org.ovirt.engine.core.common.businessentities.DiskImageDynamic diskDynamic = new org.ovirt.engine.core.common.businessentities.DiskImageDynamic(); diskDynamic.setId(image.getImageId()); diskDynamic.setactual_size(image.getActualSizeInBytes()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskImageDynamicDao().save(diskDynamic); getCompensationContext().snapshotNewEntity(diskDynamic); } }
protected void loadRdpData(org.ovirt.engine.ui.uicommonweb.models.HasConsoleModel model, org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.KeyMaker keyMaker) { if ((!(consoleUtils.isRDPAvailable())) || ((model.getAdditionalConsoleModel()) == null)) { return; } model.setSelectedProtocol(ConsoleProtocol.RDP); org.ovirt.engine.ui.uicommonweb.models.vms.IRdp rdp = asRdp(model); rdp.setUseLocalDrives(readBool(keyMaker.make(org.ovirt.engine.ui.common.utils.ConsoleOptionsFrontendPersisterImpl.USE_LOCAL_DRIVES))); }
protected org.ovirt.engine.core.bll.ValidationResult macAvailable() { org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy macPool = org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getMacPool(); java.lang.Boolean allowDupMacs = macPool.isDuplicateMacAddressesAllowed(); org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(macPool); if (allowDupMacs || (!(vmInterfaceManager.existsPluggedInterfaceWithSameMac(org.ovirt.engine.core.bll.network.vm.ActivateDeactivateVmNicCommand.getParameters().getNic())))) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.NETWORK_MAC_ADDRESS_IN_USE); } }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.storage.ImportCloneModel object) { if ((object.getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VM) { dialogLabelEditor.setText(messages.sameVmNameExists(((org.ovirt.engine.core.common.businessentities.VM) (object.getEntity())).getName())); cloneEditor.asRadioButton().setHTML(templates.twoLinesRadioButtonLabel(constants.cloneImportVm(), constants.cloneImportVmDetails()).asString()); suffixEditor.setLabel(constants.cloneImportSuffixVm()); } else { dialogLabelEditor.setText(((((constants.sameTemplateNameExists()) + " (") + (((org.ovirt.engine.core.common.businessentities.VmTemplate) (object.getEntity())).getname())) + ")")); cloneEditor.setLabel(constants.cloneImportTemplate()); suffixEditor.setLabel(constants.cloneImportSuffixTemplate()); } org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportCloneDialogPopupView.Driver.driver.edit(object); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Step step) { validateParameters(step, "type", "status.state", "description"); java.lang.String id; if (step.isSetParentStep()) { validateParameters(step, "step.parentStep.id"); id = step.getParentStep().getId(); } else { id = jobId.toString(); } return performCreate(VdcActionType.AddExternalStep, new org.ovirt.engine.core.common.action.AddExternalStepParameters(asGuid(id), step.getDescription(), org.ovirt.engine.api.restapi.types.StepMapper.map(org.ovirt.engine.api.model.StepEnum.fromValue(step.getType())), org.ovirt.engine.api.restapi.types.JobMapper.map(step.getStatus(), null)), new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetStepByStepId, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }


public void initializeHandlers() { modelProvider.getModel().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.Object entity = modelProvider.getModel().getEntity(); if (entity != null) { onDetailModelEntityChange(entity); } } }); modelProvider.getModel().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { if (PropertyChangedEventArgs.PROGRESS.equals(args.propertyName)) { if ((modelProvider.getModel().getProgress()) != null) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if ((getTable()) != null) { getTable().setLoadingState(LoadingState.LOADING); } } }); } } } }); }
private static void AddBootProtocol(org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct cfg, org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface) { if (cfg != null) { if ((cfg.getItem("BOOTPROTO")) != null) { if (cfg.getItem("BOOTPROTO").toString().toLowerCase().equals("dhcp")) { iface.setBootProtocol(NetworkBootProtocol.Dhcp); } else { iface.setBootProtocol(NetworkBootProtocol.None); } } else if ((cfg.containsKey("IPADDR")) && (!(org.apache.commons.lang.StringUtils.isEmpty(cfg.getItem("IPADDR").toString())))) { iface.setBootProtocol(NetworkBootProtocol.StaticIp); if (cfg.containsKey(VdsProperties.gateway)) { java.lang.Object gateway = cfg.getItem(VdsProperties.gateway); if ((gateway != null) && (!(org.apache.commons.lang.StringUtils.isEmpty(gateway.toString())))) { iface.setGateway(gateway.toString()); } } } else { iface.setBootProtocol(NetworkBootProtocol.None); } } }
public void getVmsFromExternalServer(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid dataCenterId, org.ovirt.engine.core.compat.Guid vdsId, java.lang.String url, java.lang.String username, java.lang.String password, org.ovirt.engine.core.common.businessentities.OriginType originType) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>(); } return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVmsFromExternalProvider, new org.ovirt.engine.core.common.queries.GetVmsFromExternalProviderQueryParameters(url, username, password, originType, vdsId, dataCenterId), aQuery); }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getTagId()) != null) { for (org.ovirt.engine.core.compat.Guid groupGuid : org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getGroupList()) { org.ovirt.engine.core.common.businessentities.aaa.DbGroup group = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbGroupDao().get(groupGuid); if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().getTagUserGroupByGroupIdAndByTagId(org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getTagId(), groupGuid)) != null) { if (group != null) { appendCustomValue("DetachGroupsNames", group.getName(), ", "); } org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getTagDao().detachUserGroupFromTag(org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.getTagId(), groupGuid); noActionDone = false; org.ovirt.engine.core.bll.DetachUserGroupFromTagCommand.setSucceeded(true); } } } }
public void refreshGeoRepDataForVolume(final org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume) { if (volume == null) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.GlusterVolumeGeoRepSyncFailed, "No volume information"); } org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getClusterDao().get(volume.getClusterId()); discoverGeoRepDataInCluster(cluster, volume); java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession> geoRepSessions = getGeoRepDao().getGeoRepSessions(volume.getId()); refreshGeoRepSessionStatusForSessions(cluster, geoRepSessions); }
@java.lang.Override protected void initStorageDomains() { org.ovirt.engine.core.common.businessentities.Disk disk = getDisks().get(0).getDisk(); if ((disk.getDiskStorageType()) != (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE)) { return; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getStorageDomainList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.MoveDiskModel moveDiskModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.MoveDiskModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>) (returnValue)); moveDiskModel.onInitStorageDomains(storageDomains); } }), ((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)).getStoragePoolId()); }
@java.lang.Override protected void endWithFailure() { org.ovirt.engine.core.bll.CreateSnapshotCommand.revertTasks(); if (((org.ovirt.engine.core.bll.CreateSnapshotCommand.getDestinationDiskImage()) != null) && (!(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().getVmsListForDisk(org.ovirt.engine.core.bll.CreateSnapshotCommand.getDestinationDiskImage().getId()).isEmpty()))) { if (!(org.ovirt.engine.core.bll.CreateSnapshotCommand.getDestinationDiskImage().getParentId().equals(Guid.Empty))) { if (!(org.ovirt.engine.core.bll.CreateSnapshotCommand.getDestinationDiskImage().getParentId().equals(org.ovirt.engine.core.bll.CreateSnapshotCommand.getDestinationDiskImage().getit_guid()))) { org.ovirt.engine.core.common.businessentities.DiskImage previousSnapshot = org.ovirt.engine.core.bll.CreateSnapshotCommand.getDiskImageDao().getSnapshotById(org.ovirt.engine.core.bll.CreateSnapshotCommand.getDestinationDiskImage().getParentId()); previousSnapshot.setactive(true); if ((org.ovirt.engine.core.bll.CreateSnapshotCommand.getParameters().getOldLastModifiedValue()) != null) { previousSnapshot.setlastModified(org.ovirt.engine.core.bll.CreateSnapshotCommand.getParameters().getOldLastModifiedValue()); } org.ovirt.engine.core.bll.CreateSnapshotCommand.getImageDao().update(previousSnapshot.getImage()); } } } super.endWithFailure(); }
@org.junit.Test @java.lang.SuppressWarnings("unchecked") public void nameNotAvailable() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.Provider.AdditionalProperties> otherProvider = createProvider(provider.getName()); when(((org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.Provider.AdditionalProperties>) (providerDao.getByName(provider.getName())))).thenReturn(otherProvider); assertThat(validator.nameAvailable(), failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED)); }


@javax.ws.rs.Path("{action: (restore)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }

@java.lang.Override protected void init() { org.ovirt.engine.core.common.businessentities.VM vmFromConfiguration = org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm(); if (vmFromConfiguration != null) { vmFromConfiguration.getStaticData().setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterId()); if (!(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.isImagesAlreadyOnTarget())) { setDisksToBeAttached(vmFromConfiguration); } org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setContainerId(vmFromConfiguration.getId()); } else { initUnregisteredVM(); } if ((Guid.Empty.equals(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVmId())) && ((org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm()) != null)) { org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setVmId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getVm().getId()); } setClusterId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().getClusterId()); org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getParameters().setStoragePoolId(org.ovirt.engine.core.bll.exportimport.ImportVmFromConfigurationCommand.getCluster().getStoragePoolId()); super.init(); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } for (org.ovirt.engine.core.common.businessentities.VDS vds : getServersInCluster()) { if ((vds.getStatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { setVdsName(vds.getName()); addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_SERVER_STATUS_NOT_UP); addCanDoActionMessage(java.lang.String.format("$%1$s %2$s", "VdsName", vds.getName())); return false; } } return true; }

private void upgradeNode() { try (final org.ovirt.engine.core.bll.OVirtNodeUpgrade upgrade = new org.ovirt.engine.core.bll.OVirtNodeUpgrade(org.ovirt.engine.core.bll.InstallVdsCommand.getVds(), _iso)) { upgrade.setCorrelationId(org.ovirt.engine.core.bll.InstallVdsCommand.getCorrelationId()); org.ovirt.engine.core.bll.InstallVdsCommand.log.infoFormat("Execute upgrade host {0}, {1}", org.ovirt.engine.core.bll.InstallVdsCommand.getVds().getId(), org.ovirt.engine.core.bll.InstallVdsCommand.getVds().getName()); setVdsStatus(VDSStatus.Installing); upgrade.execute(); switch (upgrade.getDeployStatus()) { case Failed : throw new org.ovirt.engine.core.bll.InstallVdsCommand.VdsInstallException(org.ovirt.engine.core.common.businessentities.VDSStatus.InstallFailed, org.apache.commons.lang.StringUtils.EMPTY); case Reboot : setVdsStatus(VDSStatus.Reboot); RunSleepOnReboot(getStatusOnReboot()); break; case Complete : setVdsStatus(VDSStatus.Initializing); break; } org.ovirt.engine.core.bll.InstallVdsCommand.log.infoFormat("After upgrade host {0}, {1}: success", org.ovirt.engine.core.bll.InstallVdsCommand.getVds().getId(), org.ovirt.engine.core.bll.InstallVdsCommand.getVds().getName()); org.ovirt.engine.core.bll.InstallVdsCommand.setSucceeded(true); } catch (org.ovirt.engine.core.bll.InstallVdsCommand.VdsInstallException e) { handleError(e, e.getStatus()); } catch (java.lang.Exception e) { handleError(e, VDSStatus.InstallFailed); } }
public static boolean IsVersionMatchStorageType(org.ovirt.engine.core.compat.Version version, org.ovirt.engine.core.common.businessentities.StorageType type) { return !((((type == (org.ovirt.engine.core.common.businessentities.StorageType.LOCALFS)) && ((version.compareTo(new org.ovirt.engine.core.compat.Version(2, 2))) <= 0)) || ((type == (org.ovirt.engine.core.common.businessentities.StorageType.POSIXFS)) && ((version.compareTo(new org.ovirt.engine.core.compat.Version(3, 0))) <= 0))) || ((type == (org.ovirt.engine.core.common.businessentities.StorageType.GLUSTERFS)) && ((version.compareTo(new org.ovirt.engine.core.compat.Version(3, 2))) <= 0))); }
private void updateMtuChangeability() { getMtu().setIsChangable(((getHasMtu().getEntity()) && (!(getExport().getEntity())))); }
@org.junit.Test public void testIpConfiguredForStaticBootProtocolWhenIpConfigurationIsNotNullAndBootProtocolIsStaticAndAddressIsNull() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = createNetworkAttachmentWithIpConfiguration(NetworkBootProtocol.STATIC_IP, null, "255.255.255.0"); assertThat(createNetworkAttachmentValidator(attachment).ipConfiguredForStaticBootProtocol(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.NETWORK_ADDR_MANDATORY_IN_STATIC_IP)); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Stop Rebalance") java.lang.String stopRebalance();
@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { getView().spiceSelected(event.getValue()); getView().rdpSelected((!(event.getValue()))); }

@java.lang.Override protected void populateTabMap() { getTabNameMapping().put(TabName.IPV4_TAB, this.ipv4Tab); getTabNameMapping().put(TabName.IPV6_TAB, this.ipv6Tab); getTabNameMapping().put(TabName.QOS_TAB, this.qosTab); getTabNameMapping().put(TabName.CUSTOM_PROPERTIES_TAB, this.customPropertiesTab); }
private java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getDeviceList(org.ovirt.engine.core.compat.Guid hostId, org.ovirt.engine.core.common.businessentities.storage.StorageType storageType) { return getEntity(java.util.List.class, VdcQueryType.GetDeviceList, new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(hostId, storageType), "GetDeviceList", true); }
@java.lang.Override protected void updateMoveOrCopySingleDiskParameters(java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters, org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel) { org.ovirt.engine.core.common.businessentities.storage_domains selectedStorageDomain = ((org.ovirt.engine.core.common.businessentities.storage_domains) (diskModel.getStorageDomain().getSelectedItem())); addMoveOrCopyParameters(parameters, Guid.Empty, selectedStorageDomain.getId(), ((org.ovirt.engine.core.common.businessentities.DiskImage) (diskModel.getDisk()))); }
private org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils mockVmPropertiesUtils() { org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils utils = spy(new org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils()); doReturn(("sap_agent=^(true|false)$;sndbuf=^[0-9]+$;" + ("vhost=^(([a-zA-Z0-9_]*):(true|false))(,(([a-zA-Z0-9_]*):(true|false)))*$;" + "viodiskcache=^(none|writeback|writethrough)$"))).when(utils).getPredefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn("").when(utils).getUserdefinedVMProperties(any(org.ovirt.engine.core.compat.Version.class)); doReturn(new java.util.HashSet<org.ovirt.engine.core.compat.Version>(java.util.Arrays.asList(Version.v3_2, Version.v3_3))).when(utils).getSupportedClusterLevels(); doReturn(utils).when(runVmValidator).getVmPropertiesUtils(); try { utils.init(); } catch (org.ovirt.engine.core.utils.exceptions.InitializationException e) { e.printStackTrace(); } return utils; }
public java.util.HashMap<java.lang.String, java.lang.Integer> getSystemStatistics() { java.util.HashMap<java.lang.String, java.lang.Integer> res = new java.util.HashMap<java.lang.String, java.lang.Integer>(); int total_vms = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSystemStatisticsValue("VM", ""); java.lang.String[] activeVmStatuses = new java.lang.String[]{ java.lang.String.valueOf(VMStatus.Up.getValue()), java.lang.String.valueOf(VMStatus.PoweringUp.getValue()), java.lang.String.valueOf(VMStatus.PoweredDown.getValue()), java.lang.String.valueOf(VMStatus.MigratingTo.getValue()), java.lang.String.valueOf(VMStatus.WaitForLaunch.getValue()), java.lang.String.valueOf(VMStatus.RebootInProgress.getValue()), java.lang.String.valueOf(VMStatus.PoweringDown.getValue()), java.lang.String.valueOf(VMStatus.Paused.getValue()), java.lang.String.valueOf(VMStatus.Unknown.getValue()) }; int active_vms = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSystemStatisticsValue("VM", org.apache.commons.lang.StringUtils.join(activeVmStatuses, ',')); int down_vms = ((total_vms - active_vms) < 0) ? 0 : total_vms - active_vms; int total_vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSystemStatisticsValue("HOST", ""); java.lang.String[] activeVdsStatuses = new java.lang.String[]{ java.lang.String.valueOf(VDSStatus.Up.getValue()), java.lang.String.valueOf(VDSStatus.PreparingForMaintenance.getValue()) }; int active_vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSystemStatisticsValue("HOST", org.apache.commons.lang.StringUtils.join(activeVdsStatuses, ',')); int maintenance_vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSystemStatisticsValue("HOST", java.lang.String.valueOf(VDSStatus.Maintenance.getValue())); int down_vds = (((total_vds - active_vds) - maintenance_vds) < 0) ? 0 : (total_vds - active_vds) - maintenance_vds; int total_users = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSystemStatisticsValue("USER", ""); int active_users = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSystemStatisticsValue("USER", "1"); int total_storage_domains = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSystemStatisticsValue("TSD", ""); int active_storage_domains = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSystemStatisticsValue("ASD", java.lang.Integer.toString(StorageDomainStatus.Active.getValue())); res.put(QueryConstants.SYSTEM_STATS_TOTAL_VMS_FIELD, total_vms); res.put(QueryConstants.SYSTEM_STATS_ACTIVE_VMS_FIELD, active_vms); res.put(QueryConstants.SYSTEM_STATS_DOWN_VMS_FIELD, down_vms); res.put(QueryConstants.SYSTEM_STATS_TOTAL_HOSTS_FIELD, total_vds); res.put(QueryConstants.SYSTEM_STATS_ACTIVE_HOSTS_FIELD, active_vds); res.put(QueryConstants.SYSTEM_STATS_MAINTENANCE_HOSTS_FIELD, maintenance_vds); res.put(QueryConstants.SYSTEM_STATS_DOWN_HOSTS_FIELD, down_vds); res.put(QueryConstants.SYSTEM_STATS_TOTAL_USERS_FIELD, total_users); res.put(QueryConstants.SYSTEM_STATS_ACTIVE_USERS_FIELD, active_users); res.put(QueryConstants.SYSTEM_STATS_TOTAL_STORAGE_DOMAINS_FIELD, total_storage_domains); res.put(QueryConstants.SYSTEM_STATS_ACTIVE_STORAGE_DOMAINS_FIELD, active_storage_domains); return res; }
@java.lang.Override public org.ovirt.engine.core.common.utils.VmDeviceType getDisplayDevice(int osId, org.ovirt.engine.core.compat.Version version, org.ovirt.engine.core.common.businessentities.DisplayType displayType) { org.ovirt.engine.core.common.utils.VmDeviceType vmDeviceType = parseDisplayProtocols(osId, version).get(displayType); return vmDeviceType == null ? displayType.getDefaultVmDeviceType() : vmDeviceType; }

@org.junit.Test public void updateWithLowerVersionThanHosts() { createCommandWithDefaultVdsGroup(); cpuExists(); cpuManufacturersMatch(); VdsExistWithHigherVersion(); canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_UPDATE_COMPATIBILITY_VERSION_WITH_LOWER_HOSTS); }
protected void getHostLists(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> allHosts, java.util.Map<java.lang.String, java.lang.String> parameters, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> emptyHosts, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> maintenanceHosts, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> downHosts) { for (org.ovirt.engine.core.common.businessentities.VDS vds : allHosts) { if ((((((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) && ((vds.getVmCount()) == 0)) && ((vds.getVmMigrating()) == 0)) && ((vds.getPendingVmemSize()) == 0)) && ((vds.getPendingVcpusCount()) == 0)) { emptyHosts.add(vds); } else if ((vds.isPowerManagementControlledByPolicy()) && (!(vds.isDisablePowerManagementPolicy()))) { if ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance)) { maintenanceHosts.add(vds); } else if ((vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Down)) { downHosts.add(vds); } } } }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Error in fetching fingerprint") java.lang.String errorLoadingFingerprint();

@java.lang.Override public void remove(org.ovirt.engine.core.compat.Guid id) { org.hibernate.Session session = getSession(); org.hibernate.Transaction transaction = session.beginTransaction(); org.hibernate.Query query = session.createQuery("delete from tags_user_group_map tugm where tugm.groupId = :group_id"); query.setParameter("group_id", id); query.executeUpdate(); org.ovirt.engine.core.common.businessentities.ad_groups instance = get(id); if (instance != null) { session.delete(instance); } transaction.commit(); }
public org.ovirt.engine.core.common.businessentities.StorageDomain getStorageDomain(org.ovirt.engine.core.compat.Guid poolId, org.ovirt.engine.core.common.businessentities.StorageDomainType type, org.ovirt.engine.core.common.businessentities.StorageDomainStatus status) { java.lang.Integer statusNum = (status == null) ? null : status.getValue(); return getCallsHandler().executeRead("Getstorage_domain_by_type_storagePoolId_and_status", org.ovirt.engine.core.dao.StorageDomainDAODbFacadeImpl.StorageDomainRowMapper.instance, getCustomMapSqlParameterSource().addValue("storage_pool_id", poolId).addValue("storage_domain_type", type.getValue()).addValue("status", statusNum)); }
@org.junit.Test public void testAllDomainsWithinThresholdsOneLacking() { domain1.getStorageDynamicData().setAvailableDiskSize(((org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidatorTest.CRITICAL_SPACE_THRESHOLD) + 1)); domain2.getStorageDynamicData().setAvailableDiskSize(((org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidatorTest.CRITICAL_SPACE_THRESHOLD) - 1)); domain1.setCriticalSpaceActionBlocker(org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidatorTest.CRITICAL_SPACE_THRESHOLD); domain2.setCriticalSpaceActionBlocker(org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidatorTest.CRITICAL_SPACE_THRESHOLD); org.ovirt.engine.core.bll.ValidationResult result = validator.allDomainsWithinThresholds(); assertFalse("domain2 should not be within thresholds", result.isValid()); assertEquals("Wrong validation error", VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN, result.getMessage()); }
protected boolean isSecured() { boolean secured = true; if (url.getProtocol().equalsIgnoreCase(java.lang.String.valueOf(HttpURL.DEFAULT_SCHEME))) { secured = false; } return secured; }
private static org.ovirt.engine.api.model.OperatingSystem mapOperatingSystem(org.ovirt.engine.core.common.businessentities.VDS entity) { final org.ovirt.engine.api.model.OperatingSystem model = new org.ovirt.engine.api.model.OperatingSystem(); final java.lang.String hostOs = entity.getHostOs(); if ((hostOs != null) && ((hostOs.trim().length()) != 0)) { java.lang.String[] hostOsInfo = hostOs.split(org.ovirt.engine.api.restapi.types.HostMapper.HOST_OS_DELEIMITER); org.ovirt.engine.api.model.Version version = new org.ovirt.engine.api.model.Version(); version.setMajor(org.ovirt.engine.api.restapi.types.HostMapper.getIntegerValue(hostOsInfo, 1)); version.setMinor(org.ovirt.engine.api.restapi.types.HostMapper.getIntegerValue(hostOsInfo, 2)); version.setFullVersion(org.ovirt.engine.api.restapi.types.HostMapper.getFullHostOsVersion(hostOsInfo)); model.setType(hostOsInfo[0]); model.setVersion(version); } model.setCustomKernelCmdline(java.util.Objects.toString(entity.getCurrentKernelCmdline(), "")); model.setReportedKernelCmdline(entity.getKernelArgs()); return model; }
@org.junit.Test public void testInstall() throws java.lang.Exception { setUpGetEntityWithNoCertificateInfoExpectations(1); setUriInfo(setUpActionExpectations(VdcActionType.UpdateVds, org.ovirt.engine.core.common.action.UpdateVdsActionParameters.class, new java.lang.String[]{ "RootPassword" }, new java.lang.Object[]{ NAMES[2] })); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setRootPassword(NAMES[2]); verifyActionResponse(resource.install(action)); }
private org.ovirt.engine.api.model.Hosts mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> entities) { org.ovirt.engine.api.model.Hosts collection = new org.ovirt.engine.api.model.Hosts(); for (org.ovirt.engine.core.common.businessentities.VDS entity : entities) { collection.getHosts().add(addLinks(populate(map(entity), entity))); } return collection; }
@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.RegisterDiskCommand.getParameters().getDiskImage().getDiskStorageType()) != (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE)) { addCanDoActionMessage(("$diskId " + (org.ovirt.engine.core.bll.RegisterDiskCommand.getParameters().getDiskImage().getId()))); addCanDoActionMessage(("$storageType " + (org.ovirt.engine.core.bll.RegisterDiskCommand.getParameters().getDiskImage().getDiskStorageType()))); addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_UNSUPPORTED_DISK_STORAGE_TYPE); return false; } if (!(validate(new org.ovirt.engine.core.bll.validator.StorageDomainValidator(org.ovirt.engine.core.bll.RegisterDiskCommand.getStorageDomain()).isDomainExistAndActive()))) { addCanDoActionMessage(("$diskId " + (org.ovirt.engine.core.bll.RegisterDiskCommand.getParameters().getDiskImage().getId()))); addCanDoActionMessage(("$domainId " + (org.ovirt.engine.core.bll.RegisterDiskCommand.getStorageDomainId()))); addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_UNAVAILABLE); return false; } if (!(org.ovirt.engine.core.bll.RegisterDiskCommand.getStorageDomain().getStorageDomainType().isDataDomain())) { addCanDoActionMessage(("$domainId " + (org.ovirt.engine.core.bll.RegisterDiskCommand.getParameters().getStorageDomainId()))); addCanDoActionMessage(("$domainType " + (org.ovirt.engine.core.bll.RegisterDiskCommand.getStorageDomain().getStorageDomainType()))); addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_UNSUPPORTED); return false; } return true; }
@java.lang.Override public java.lang.String getRawValue(org.ovirt.engine.ui.uicommonweb.models.storage.LunModel model) { return (java.lang.String.valueOf(model.getSize())) + "GB"; }


@org.junit.Test public void testStartWithPauseAndStateless() throws java.lang.Exception { setUpWindowsGetEntityExpectations(2, false); setUriInfo(setUpActionExpectations(VdcActionType.RunVmOnce, org.ovirt.engine.core.common.action.RunVmOnceParams.class, new java.lang.String[]{ "VmId", "RunAndPause", "RunAsStateless" }, new java.lang.Object[]{ GUIDS[0], true, java.lang.Boolean.TRUE })); org.ovirt.engine.api.model.Action action = new org.ovirt.engine.api.model.Action(); action.setPause(true); action.setVm(new org.ovirt.engine.api.model.VM()); action.getVm().setStateless(true); verifyActionResponse(resource.start(action)); }
java.util.List getNetworkInterfaces(org.ovirt.vdsmfake.domain.VM vm) { java.util.Map resultMap = map(); java.util.List net = new java.util.ArrayList(); java.util.List<org.ovirt.vdsmfake.domain.Device> nicDevices = vm.getDevicesByType(Device.DeviceType.NIC); for (org.ovirt.vdsmfake.domain.Device device : nicDevices) { java.util.List templist = new java.util.ArrayList(); java.util.List templist2 = new java.util.ArrayList(); templist.add("fe80::21a:4aff:fe62:8900"); resultMap.put("inet6", templist); resultMap.put("hw", device.getMacAddr()); templist2.add(vm.getIp()); resultMap.put("inet", templist2); resultMap.put("name", "eth0"); net.add(resultMap); } log.debug("network list is {}", net.toString()); return net; }
public org.ovirt.engine.core.bll.ValidationResult clusterNotChanged() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.VDS_CANNOT_UPDATE_CLUSTER).unless(oldHost.getVdsGroupId().equals(getHost().getVdsGroupId())); }

public org.ovirt.engine.core.bll.ValidationResult vmNotDuringMigration() { for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { if (((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) || ((vm.getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingTo))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_MIGRATION_IN_PROGRESS); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }



@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}: The disks ${diskAliases} are locked. Please try again in a few minutes.") java.lang.String ACTION_TYPE_FAILED_VM_IMAGE_IS_LOCKED();


public void getManagementNetworkName(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { getConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.DefaultManagementNetwork, getDefaultConfigurationVersion()), aQuery); }
@org.junit.Test public void noVdsGroup() { simulateVdsGroupDoesNotExist(); assertCanDoActionFailure(VdcBllMessages.VDS_CLUSTER_IS_NOT_VALID.toString()); }


public org.ovirt.engine.core.bll.ValidationResult nicExists() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST).when(((attachment.getNicName()) == null)); }

public org.ovirt.engine.core.common.businessentities.VDSType getvds_type() { return this.mVdsStatic.getvds_type(); }
private boolean evaluateHostUpgradeInternalCommandProgress(java.util.List<org.ovirt.engine.core.compat.Guid> childCmdIds, org.ovirt.engine.core.bll.CommandBase<?> rootCommand) { org.ovirt.engine.core.common.businessentities.CommandEntity upgradeCommand = getHostUpgradeInternalCommand(childCmdIds); if (upgradeCommand == null) { return false; } switch (upgradeCommand.getCommandStatus()) { case ACTIVE : case NOT_STARTED : case FAILED : case FAILED_RESTARTED : case UNKNOWN : rootCommand.setCommandStatus(CommandStatus.FAILED); return true; case SUCCEEDED : rootCommand.setCommandStatus(CommandStatus.SUCCEEDED); return true; } return true; }
private void onRestoreSnapshot() { runAction(VdcActionType.RestoreGlusterVolumeSnapshot, new org.ovirt.engine.core.common.action.gluster.GlusterVolumeSnapshotActionParameters(getEntity().getId(), ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity) (getSelectedItem())).getSnapshotName(), true)); }

@java.lang.Override public void vdsNonOperational(org.ovirt.engine.core.compat.Guid vdsId, org.ovirt.engine.core.common.businessentities.NonOperationalReason reason, boolean logCommand, org.ovirt.engine.core.compat.Guid domainId) { vdsNonOperational(vdsId, reason, logCommand, domainId, null); }
static org.ovirt.engine.core.common.businessentities.network setUpEntityExpectations(org.ovirt.engine.core.common.businessentities.network entity, boolean isDisplay, int index) { expect(entity.getis_display()).andReturn(isDisplay).anyTimes(); return org.ovirt.engine.api.restapi.resource.AbstractBackendNetworksResourceTest.setUpEntityExpectations(entity, index); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to define/configure roles in the System") java.lang.String allowToDefineConfigureRolesInTheSystemRoleTreeTooltip();
@java.lang.Override protected boolean canDoAction() { if (getParameters().getPubKeys().isEmpty()) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_NO_PUB_KEYS_PASSED); } if ((getParameters().getId()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_HOST_NOT_EXIST); } return super.canDoAction(); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { switch (org.ovirt.engine.core.bll.RemoveVmCommand.getActionState()) { case EXECUTE : if (hasImages) { return org.ovirt.engine.core.bll.RemoveVmCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_REMOVE_VM : org.ovirt.engine.core.common.AuditLogType.USER_FAILED_REMOVE_VM; } else { return org.ovirt.engine.core.bll.RemoveVmCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_REMOVE_VM_FINISHED : org.ovirt.engine.core.common.AuditLogType.USER_FAILED_REMOVE_VM; } case END_FAILURE : case END_SUCCESS : default : return disksLeftInVm.isEmpty() ? org.ovirt.engine.core.common.AuditLogType.USER_REMOVE_VM_FINISHED : org.ovirt.engine.core.common.AuditLogType.USER_REMOVE_VM_FINISHED_WITH_ILLEGAL_DISKS; } }
public java.util.Map getStorageDomainsList(java.lang.String spUUID, int domainType, int poolType, java.lang.String path) { try { org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); java.util.Map resultMap = getOKStatus(); java.util.List domlist = lst(); for (org.ovirt.vdsmfake.domain.StorageDomain storageDomain : dataCenter.getStorageDomainMap().values()) { if ((spUUID != null) && (!(storageDomain.getId().equals(spUUID)))) { continue; } if ((domainType != 0) && ((StorageDomain.DomainClass.getByCode(domainType)) != (storageDomain.getDomainClass()))) { continue; } if ((poolType != 0) && ((StorageDomain.StorageType.getByCode(poolType)) != (storageDomain.getStorageType()))) { continue; } if ((path != null) && (!(path.equals(storageDomain.getConnection())))) { continue; } domlist.add(storageDomain.getId()); } resultMap.put("domlist", domlist); return resultMap; } catch (java.lang.Exception e) { throw error(e); } }



@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.lang.Object[] array = ((java.lang.Object[]) (target)); org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior behavior = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior) (array[0])); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (array[1])); org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.ui.uicommonweb.models.vms.ExistingVmModelBehavior) (array[0])).vm; java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>) (returnValue)); model.setClusters(model, clusters, vm.getVdsGroupId().getValue()); behavior.initTemplate(); behavior.initCdImage(); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("If kernel parameters are specified, kernel path must be specified as well.") java.lang.String kernelParamsInvalid();


@java.lang.Override public org.ovirt.engine.core.common.businessentities.Permission getForRoleAndAdElementAndObject(org.ovirt.engine.core.compat.Guid roleid, org.ovirt.engine.core.compat.Guid elementid, org.ovirt.engine.core.compat.Guid objectid) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("role_id", roleid).addValue("ad_element_id", elementid).addValue("object_id", objectid); return getCallsHandler().executeRead("GetPermissionsByRoleIdAndAdElementIdAndObjectId", org.ovirt.engine.core.dao.PermissionDAODbFacadeImpl.PermissionRowMapper.instance, parameterSource); }
protected org.ovirt.engine.core.common.businessentities.VmDevice createVmDevice() { return new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(disk.getId(), org.ovirt.engine.core.bll.AttachDiskToVmCommand.getVmId()), VmDeviceType.DISK.getName(), VmDeviceType.DISK.getName(), "", 0, null, true, org.ovirt.engine.core.bll.AttachDiskToVmCommand.getParameters().isPlugUnPlug(), false, ""); }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("VM Interface Profile") java.lang.String vnicProfileTitle();
@org.junit.Test public void syncNetworkQosNotSupported() { org.ovirt.engine.core.common.businessentities.network.Network network = createManagementNetwork(); mockExistingNetworks(network); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork("eth0", network); mockExistingIfaces(iface); org.ovirt.engine.core.compat.Guid qosId = org.ovirt.engine.core.compat.Guid.newGuid(); when(qosDao.get(qosId)).thenReturn(createQos()); network.setQosId(qosId); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForSync(iface)); validateAndExpectViolation(helper, VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_NOT_SUPPORTED, org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME); }
public boolean hasCommandEntitiesWithRootCommandId(org.ovirt.engine.core.compat.Guid rootCommandId) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity; for (org.ovirt.engine.core.compat.Guid cmdId : commandsCache.keySet()) { cmdEntity = commandsCache.get(cmdId); if ((((cmdEntity != null) && (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(cmdEntity.getRootCommandId())))) && (!(cmdEntity.getRootCommandId().equals(cmdId)))) && (cmdEntity.getRootCommandId().equals(rootCommandId))) { return true; } } return false; }
protected void addVmStatic() { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData(); if ((vmStatic.getOrigin()) == null) { vmStatic.setOrigin(org.ovirt.engine.core.common.businessentities.OriginType.valueOf(org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.OriginType))); } vmStatic.setId(org.ovirt.engine.core.bll.AddVmCommand.getVmId()); vmStatic.setQuotaId(getQuotaId()); vmStatic.setCreationDate(new java.util.Date()); if ((vmStatic.getCustomProperties()) != null) { org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.VMCustomProperties properties = org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.getInstance().parseProperties(org.ovirt.engine.core.bll.AddVmCommand.getVdsGroupDAO().get(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getVdsGroupId()).getcompatibility_version(), vmStatic.getCustomProperties()); java.lang.String predefinedProperties = properties.getPredefinedProperties(); java.lang.String userDefinedProperties = properties.getUseDefinedProperties(); vmStatic.setPredefinedProperties(predefinedProperties); vmStatic.setUserDefinedProperties(userDefinedProperties); } getVmStaticDao().save(vmStatic); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(vmStatic); }
private com.google.gwt.user.client.ui.Widget getRadioGroupPanel() { allButton = new com.google.gwt.user.client.ui.RadioButton("diskTypeView"); imagesButton = new com.google.gwt.user.client.ui.RadioButton("diskTypeView"); lunsButton = new com.google.gwt.user.client.ui.RadioButton("diskTypeView"); allButton.getElement().getStyle().setMarginRight(20, Unit.PX); imagesButton.getElement().getStyle().setMarginRight(20, Unit.PX); lunsButton.getElement().getStyle().setMarginRight(20, Unit.PX); com.google.gwt.user.client.ui.FlowPanel buttonsPanel = new com.google.gwt.user.client.ui.FlowPanel(); buttonsPanel.getElement().getStyle().setProperty("marginLeft", "auto"); buttonsPanel.getElement().getStyle().setProperty("marginRight", "auto"); buttonsPanel.add(allButton); buttonsPanel.add(imagesButton); buttonsPanel.add(lunsButton); setDiskStorageType(DiskStorageType.IMAGE); localize(constants); return buttonsPanel; }

@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { boolean hasError = false; for (org.ovirt.engine.core.common.action.VdcReturnValueBase singleResult : result.getReturnValue()) { if ((!(singleResult.getCanDoAction())) || ((waitForResult) && (!(singleResult.getSucceeded())))) { hasError = true; getActionFlowState().addFailure(actionType, singleResult); } } if (hasError && (!(runNextInCaseOfError))) { then(null); } runNextAction(); }

@org.junit.Test public void externalNetworkNotSupported() throws java.lang.Exception { externalNetworkSupportTest(failsWith(VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_NOT_SUPPORTED), false); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> setUpPermissionsWithAdElementId(org.ovirt.engine.core.compat.Guid adElementId) { java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> perms = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Permissions>(); for (int i = 0; i < (NAMES.length); i++) { org.ovirt.engine.core.common.businessentities.Permissions entity = getEntity(i); entity.setAdElementId(adElementId); perms.add(entity); } return perms; }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName; if ("IsCiscoUcsPrimaryPmTypeSelected".equals(propName)) { getView().updatePrimaryPmSlotLabelText(model.isCiscoUcsPrimaryPmTypeSelected()); } else if ("IsCiscoUcsSecondaryPmTypeSelected".equals(propName)) { getView().updateSecondaryPmSlotLabelText(model.isCiscoUcsSecondaryPmTypeSelected()); } }
public org.ovirt.engine.core.bll.ValidationResult hotUpdateDoneWithInternalNetwork(org.ovirt.engine.core.common.businessentities.network.Network oldNetwork, org.ovirt.engine.core.common.businessentities.network.Network newNetwork) { return ((oldNetwork == null) || (!(oldNetwork.isExternal()))) && ((newNetwork == null) || (!(newNetwork.isExternal()))) ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_CANNOT_BE_REWIRED); }

@java.lang.Override protected org.ovirt.engine.core.common.businessentities.VDS getEntity(int index) { org.ovirt.engine.core.common.businessentities.VDS entity = org.ovirt.engine.api.restapi.resource.BackendHostsResourceTest.setUpEntityExpectations(control.createMock(org.ovirt.engine.core.common.businessentities.VDS.class), index); org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = control.createMock(org.ovirt.engine.core.common.businessentities.VdsStatic.class); expect(vdsStatic.getId()).andReturn(GUIDS[index]).anyTimes(); expect(entity.getStaticData()).andReturn(vdsStatic).anyTimes(); expect(entity.getStoragePoolId()).andReturn(GUIDS[1]).anyTimes(); return entity; }
private org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue, org.ovirt.engine.core.compat.Guid storageDomainId) { java.lang.String message = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.resolveStepMessage(StepEnum.MERGE_SNAPSHOTS, getJobMessageProperties()); return super.createTask(taskId, vdsReturnValue.getCreationInfo(), VdcActionType.RemoveSnapshot, message, VdcObjectType.Storage, storageDomainId); }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__SET); addCanDoActionMessage(EngineMessage.VAR__TYPE__GLUSTER_GEOREP_CONFIG); addCanDoActionMessageVariable("configName", getParameters().getConfigKey()); addCanDoActionMessageVariable("geoRepSessionKey", getGeoRepSession().getSessionKey()); addCanDoActionMessageVariable("configValue", getParameters().getConfigValue()); }
@org.junit.Test public void testRunPublicQuery_GetConfigurationValue() { java.lang.String sessionId = "sessionId"; org.ovirt.engine.core.common.queries.VdcQueryType queryType = org.ovirt.engine.core.common.queries.VdcQueryType.GetConfigurationValue; java.lang.Object result = testServlet.runPublicQuery(queryType, mockConfigQueryParams, sessionId); assertThat(result, org.ovirt.engine.ui.frontend.server.gwt.AbstractGwtDynamicHostPageServletTest.is(java.lang.Integer.class)); verify(mockConfigQueryParams).setSessionId(sessionId); verify(mockConfigQueryParams).setHttpSessionId(sessionId); verify(mockConfigQueryParams).setFiltered(testServlet.filterQueries()); verify(mockBackend).runPublicQuery(queryType, mockConfigQueryParams); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Edit Pool") java.lang.String editPoolTitle();
@java.lang.Override public void setMainTabSelectedItem(org.ovirt.engine.core.common.businessentities.StorageDomain selectedItem) { driver.edit(getDetailModel()); org.ovirt.engine.core.common.businessentities.StorageDomain entity = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (getDetailModel().getEntity())); if (entity != null) { totalSize.setValue(entity.getTotalDiskSize()); availableSize.setValue(entity.getAvailableDiskSize()); usedSize.setValue(entity.getUsedDiskSize()); allocatedSize.setValue(entity.getCommittedDiskSize()); overAllocationRatio.setValue(entity.getStorageDomainOverCommitPercent()); warningLowSpaceIndicator.setValue(entity.getWarningLowSpaceIndicator()); criticalSpaceActionBlocker.setValue(entity.getCriticalSpaceActionBlocker()); } formBuilder.update(getDetailModel()); }
@java.lang.Override protected boolean canDoAction() { disk = org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.getDiskDao().get(org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.getParameters().getDiskId()); return ((((org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.isVmExist()) && (org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.isVmUpOrDown())) && (isDiskExist(disk))) && (checkCanPerformPlugUnPlugDisk())) && (validate(getSnapshotsValidator().vmNotDuringSnapshot(org.ovirt.engine.core.bll.HotPlugDiskToVmCommand.getVmId()))); }


@java.lang.Override protected void executeCommand() { if (org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplate().isBaseTemplate()) { shiftBaseTemplateToSuccessor(); } java.util.List<org.ovirt.engine.core.common.businessentities.storage.Disk> templateImages = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId()); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterDisksBasedOnCinder(templateImages); final java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(templateImages, false, false, true); org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId(), org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getCompensationContext()); if ((!(diskImages.isEmpty())) || (!(cinderDisks.isEmpty()))) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { if ((!(diskImages.isEmpty())) && (removeVmTemplateImages())) { org.ovirt.engine.core.bll.VmHandler.removeVmInitFromDB(getVmTemplate()); setSucceeded(true); } if (!(cinderDisks.isEmpty())) { removeCinderDisks(cinderDisks); setSucceeded(true); } return null; }); } if (org.ovirt.engine.core.bll.RemoveVmTemplateCommand.noAsyncOperations()) { handleEndAction(); } }
@java.lang.Override public int hashCode() { final int prime = 31; int result = super.hashCode(); result = (prime * result) + ((defaultDisplayType) == null ? 0 : defaultDisplayType.hashCode()); result = (prime * result) + (is_initialized ? 1231 : 1237); result = (prime * result) + (m_nDiskSize); result = (prime * result) + ((name) == null ? 0 : name.hashCode()); result = (prime * result) + ((predefinedProperties) == null ? 0 : predefinedProperties.hashCode()); result = (prime * result) + ((userDefinedProperties) == null ? 0 : userDefinedProperties.hashCode()); result = (prime * result) + ((vmt_guid) == null ? 0 : vmt_guid.hashCode()); return result; }
@java.lang.Override public boolean isReadable(java.lang.Class<?> type, java.lang.reflect.Type genericType, java.lang.annotation.Annotation[] annotations, javax.ws.rs.core.MediaType mediaType) { return true; }
@org.junit.Test public void canSetNumaConfigurationWithVmFromParams() { final org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand command = mockedCommandWithVmFromParams(); command.executeCommand(); verify(vmNumaNodeDao).massSaveNumaNode(eq(newNumaNodes), any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class)); }

public org.ovirt.engine.core.common.businessentities.AsyncTasks getAsyncTaskFromDb(org.ovirt.engine.core.compat.Guid asyncTaskId) { org.ovirt.engine.core.common.businessentities.AsyncTasks asyncTask = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAsyncTaskDao().get(asyncTaskId); if (asyncTask != null) { map(coco.getCommandEntity(asyncTask.getCommandId()), asyncTask); } return asyncTask; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Detach Storage") java.lang.String detachStorageTitle();
private boolean canRemoveVmImageDisk() { if (!(listVms.isEmpty())) { org.ovirt.engine.core.compat.Guid storagePoolId = listVms.get(0).getStoragePoolId(); org.ovirt.engine.core.common.businessentities.StoragePool sp = org.ovirt.engine.core.bll.storage.disk.RemoveDiskCommand.getStoragePoolDao().get(storagePoolId); if (!(validate(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(sp).isUp()))) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskList = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(java.util.Collections.singletonList(getDisk()), true, false, true); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(diskList); if (!(validate(diskImagesValidator.diskImagesNotLocked()))) { return false; } } org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(); for (org.ovirt.engine.core.common.businessentities.VM vm : listVms) { if ((!(validate(snapshotsValidator.vmNotDuringSnapshot(vm.getId())))) || (!(validate(snapshotsValidator.vmNotInPreview(vm.getId()))))) { return false; } } return true; }

@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(VdcActionType.RemoveVmTemplate); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.domain.PostZeroHandler.fixParametersWithPostZero(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getWipeAfterDelete(), false))); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getReturnValue().getInternalVdsmTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), VdcActionType.RemoveVmTemplate, VdcObjectType.Storage, org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.snapshots.RemoveTemplateSnapshotCommand.setSucceeded(true); } }

private org.ovirt.engine.core.common.businessentities.storage.DiskImage createMetadataDisk(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot snapshot) { java.util.List<org.ovirt.engine.core.compat.Guid> guids = org.ovirt.engine.core.compat.Guid.createGuidListFromString(snapshot.getMemoryVolume()); org.ovirt.engine.core.common.businessentities.StorageDomainStatic sd = validateStorageDomainExistsInDb(snapshot, guids.get(0), guids.get(4), guids.get(5)); org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = isMemoryDiskAlreadyExistsInDb(snapshot, guids.get(4), guids.get(5)); if ((sd == null) || (disk != null)) { return null; } org.ovirt.engine.core.common.businessentities.storage.DiskImage memoryDisk = org.ovirt.engine.core.bll.memory.MemoryUtils.createSnapshotMetadataDisk(org.ovirt.engine.core.bll.memory.MemoryUtils.generateMemoryDiskDescription(vm, snapshot.getDescription())); memoryDisk.setId(guids.get(4)); memoryDisk.setImageId(guids.get(5)); memoryDisk.setStorageIds(new java.util.ArrayList(java.util.Collections.singletonList(guids.get(0)))); memoryDisk.setStoragePoolId(guids.get(1)); memoryDisk.setCreationDate(snapshot.getCreationDate()); memoryDisk.setActive(true); memoryDisk.setWipeAfterDelete(vm.getDiskList().stream().anyMatch(DiskImage::isWipeAfterDelete)); return memoryDisk; }
private void validateBase64() { try { rawImageData = javax.xml.bind.DatatypeConverter.parseBase64Binary(base64Data); } catch (java.lang.ArrayIndexOutOfBoundsException | java.lang.IllegalArgumentException e) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.VM_ICON_BASE64_PART_MALFORMED); } }
@java.lang.Override public void setTooltip(com.google.gwt.safehtml.shared.SafeHtml tooltip) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(tooltip, getElement()); }
public boolean candidateOperation(java.lang.String op1Key, java.lang.String op1Type, java.lang.String op2Key, java.lang.String op2Type, boolean drop) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic1 = null; org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel network1 = null; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic2 = null; org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel network2 = null; if (org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel.NIC.equals(op1Type)) { nic1 = nicMap.get(op1Key); } else if (org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel.NETWORK.equals(op1Type)) { network1 = networkMap.get(op1Key); } if (org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel.NIC.equals(op2Type)) { nic2 = nicMap.get(op2Key); } else if (org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel.NETWORK.equals(op2Type)) { network2 = networkMap.get(op2Key); } org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1 = (nic1 == null) ? network1 : nic1; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2 = (nic2 == null) ? network2 : nic2; return candidateOperation(op1, op2, drop); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getSharedLocks() { final boolean versionChanged = !(java.util.Objects.equals(oldGroup.getCompatibilityVersion(), org.ovirt.engine.core.bll.UpdateClusterCommand.getCluster().getCompatibilityVersion())); if (!versionChanged) { return null; } final java.lang.String lockMessage = (EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_BEING_UPDATED.name()) + (org.ovirt.engine.core.utils.ReplacementUtils.createSetVariableString("clusterName", oldGroup.getName())); vmsLockedForUpdate = org.ovirt.engine.core.bll.UpdateClusterCommand.getVmStaticDao().getAllByCluster(oldGroup.getId()).stream().filter(( vm) -> ((vm.getOrigin()) != OriginType.EXTERNAL) && (!(vm.isHostedEngine()))).filter(( vm) -> (vm.getCustomCompatibilityVersion()) == null).collect(java.util.stream.Collectors.toList()); return vmsLockedForUpdate.stream().collect(java.util.stream.Collectors.toMap(( vm) -> vm.getId().toString(), ( vm) -> org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM, lockMessage))); }


@org.junit.Test public void testNotRemovingUsedPoolRecordIsUsed() throws java.lang.Exception { macPool.setId(org.ovirt.engine.core.compat.Guid.newGuid()); when(macPoolDaoMock.getDcUsageCount(eq(macPool.getId()))).thenReturn(1); final org.ovirt.engine.core.bll.ValidationResult validationResult = new org.ovirt.engine.core.bll.MacPoolValidator(macPool).notRemovingUsedPool(); org.junit.Assert.assertThat(validationResult, failsWith(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_STILL_USED_MAC_POOL)); }
public java.lang.Integer getMemCommited() { return this.mVdsDynamic.getMemCommited(); }
@java.lang.Override public boolean ValidateStoragePoolConnectionsInHost(org.ovirt.engine.core.common.businessentities.VDS vds, java.util.List<org.ovirt.engine.core.common.businessentities.storage_server_connections> connections, org.ovirt.engine.core.compat.Guid storagePoolId) { if ((connections.size()) > 0) { @java.lang.SuppressWarnings("unchecked") java.util.Map<java.lang.String, java.lang.String> validateConnections = ((java.util.Map<java.lang.String, java.lang.String>) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ValidateStorageServerConnection, new org.ovirt.engine.core.common.vdscommands.ConnectStorageServerVDSCommandParameters(vds.getId(), storagePoolId, org.ovirt.engine.core.common.businessentities.StorageType.ISCSI, connections)).getReturnValue())); return IsConnectSucceeded(validateConnections, connections); } return true; }
@java.lang.Override public void taskEndSuccessfully() { }


private org.ovirt.engine.core.common.action.VdcReturnValueBase executeCommand(final org.ovirt.engine.core.bll.CommandBase<?> command) { command.persistCommand(command.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.tasks.interfaces.CommandCallBack callBack = command.getCallBack(); if (callBack != null) { cmdCallBackMap.put(command.getCommandId(), callBack); } org.ovirt.engine.core.common.action.VdcReturnValueBase result = org.ovirt.engine.core.bll.utils.BackendUtils.getBackendCommandObjectsHandler(org.ovirt.engine.core.bll.tasks.CommandExecutor.log).runAction(command, null); updateCommand(command, result); if (callBack != null) { callBack.executed(result); } return result; }
@java.lang.Override public boolean isVisible() { return getDetailModel().getIsNfs(); }

public static java.lang.Integer getSizeOfMemoryDeviceMb(org.ovirt.engine.core.common.businessentities.VmDevice memoryDevice) { if ((memoryDevice.getType()) != (org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.MEMORY)) { throw new java.lang.RuntimeException(((("Memory device expected but device " + memoryDevice) + " passed of type ") + (memoryDevice.getType()))); } return ((java.lang.Integer) (memoryDevice.getSpecParams().get(org.ovirt.engine.core.common.utils.VmDeviceCommonUtils.SPEC_PARAM_SIZE))); }
@java.lang.Override protected boolean canDoAction() { if (!(org.ovirt.engine.core.common.FeatureSupported.isIscsiMultipathingSupported(org.ovirt.engine.core.bll.storage.AddIscsiBondCommand.getStoragePool().getCompatibilityVersion()))) { return failCanDoAction(VdcBllMessages.ISCSI_BOND_NOT_SUPPORTED); } org.ovirt.engine.core.bll.validator.IscsiBondValidator validator = new org.ovirt.engine.core.bll.validator.IscsiBondValidator(); return ((validate(validator.iscsiBondWithTheSameNameExistInDataCenter(getIscsiBond()))) && (validate(validator.validateAddedLogicalNetworks(getIscsiBond())))) && (validate(validator.validateAddedStorageConnections(getIscsiBond()))); }

protected void logToAudit() { }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.User.class, to = org.ovirt.engine.core.common.businessentities.DbUser.class) public static org.ovirt.engine.core.common.businessentities.DbUser map(org.ovirt.engine.api.model.User model, org.ovirt.engine.core.common.businessentities.DbUser template) { org.ovirt.engine.core.common.businessentities.DbUser entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.DbUser(); if (model.isSetName()) { entity.setLoginName(model.getName()); } if (model.isSetId()) { java.lang.String id = model.getId(); try { entity.setId(org.ovirt.engine.api.restapi.utils.GuidUtils.asGuid(id)); entity.setExternalId(entity.getId().toString()); } catch (org.ovirt.engine.api.restapi.utils.MalformedIdException exception) { } } if (model.isSetDomain()) { org.ovirt.engine.api.model.Domain domain = model.getDomain(); if (domain.isSetName()) { entity.setDomain(domain.getName()); } } return entity; }
protected java.lang.String getChangePasswordMsg(boolean edit) throws java.io.UnsupportedEncodingException, org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsResult { if (!(args.contains(org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsArguments.ARG_CHANGE_PASSWORD_MSG))) { return null; } java.lang.String emptyValueDescription = (edit) ? " (Not providing a value will cause the existing value to be reset)" : ""; java.lang.String changePasswordMsgStr = java.lang.System.console().readLine((("Please enter message or URL to appear when user tries to login with an expired password" + emptyValueDescription) + ":")); if (((changePasswordMsgStr.indexOf("http")) == 0) || ((changePasswordMsgStr.indexOf("https")) == 0)) { try { java.net.URL url = new java.net.URL(changePasswordMsgStr); org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomains.log.debug((("Validated that " + url) + " is in correct format")); } catch (java.net.MalformedURLException ex) { throw new org.ovirt.engine.extensions.aaa.builtin.tools.ManageDomainsResult(ManageDomainsResultEnum.INVALID_ARGUMENT_VALUE, "The provided value begins with a URL prefix of either http or https. However this is not a valid URL"); } } return org.apache.commons.lang.StringUtils.isNotEmpty(changePasswordMsgStr) ? java.net.URLEncoder.encode(changePasswordMsgStr, "UTF-8") : ""; }
@org.junit.BeforeClass public static void beforeClass() { org.ovirt.engine.core.bll.BackwardCompatibilityTaskCreationTest.ejbRule.mockResource(ContainerManagedResourceType.DATA_SOURCE, mock(java.sql.Connection.class)); org.ovirt.engine.core.dal.dbbroker.DbFacade dbFacade = spy(new org.ovirt.engine.core.dal.dbbroker.DbFacade()); org.ovirt.engine.core.dal.dbbroker.DbFacadeLocator.setDbFacade(dbFacade); org.ovirt.engine.core.dao.AsyncTaskDAO asyncTaskDao = mock(org.ovirt.engine.core.dao.AsyncTaskDAO.class); when(asyncTaskDao.getAll()).thenReturn(java.util.Collections.EMPTY_LIST); when(dbFacade.getAsyncTaskDao()).thenReturn(asyncTaskDao); org.ovirt.engine.core.dao.CommandEntityDao cmdEntityDao = mock(org.ovirt.engine.core.dao.CommandEntityDao.class); when(dbFacade.getCommandEntityDao()).thenReturn(cmdEntityDao); when(cmdEntityDao.getAll()).thenReturn(java.util.Collections.EMPTY_LIST); }


protected void mockVmRunHandler() { org.ovirt.engine.core.common.businessentities.storage_pool sp = new org.ovirt.engine.core.common.businessentities.storage_pool(); sp.setstatus(StoragePoolStatus.Up); when(spDao.get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(sp); doReturn(spDao).when(vmRunHandler).getStoragePoolDAO(); doReturn(vmRunHandler).when(command).getVmRunHandler(); doReturn(true).when(vmRunHandler).performImageChecksForRunningVm(any(org.ovirt.engine.core.common.businessentities.VM.class), anyListOf(java.lang.String.class), any(org.ovirt.engine.core.common.action.RunVmParams.class), anyListOf(org.ovirt.engine.core.common.businessentities.Disk.class)); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (!(obj instanceof org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity)) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity other = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (obj)); return ((((((((((((((((java.util.Objects.equals(name, other.getName())) && (java.util.Objects.equals(clusterId, other.clusterId))) && ((volumeType) == (other.volumeType))) && ((status) == (other.status))) && (java.util.Objects.equals(replicaCount, other.replicaCount))) && (java.util.Objects.equals(stripeCount, other.stripeCount))) && (java.util.Objects.equals(disperseCount, other.disperseCount))) && (java.util.Objects.equals(redundancyCount, other.redundancyCount))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(getOptions(), other.getOptions()))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(accessProtocols, other.accessProtocols))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(transportTypes, other.transportTypes))) && (org.ovirt.engine.core.common.utils.ObjectUtils.haveSameElements(bricks, other.bricks))) && (java.util.Objects.equals(asyncTask, other.asyncTask))) && (java.util.Objects.equals(advancedDetails, other.advancedDetails))) && (java.util.Objects.equals(snapshotsCount, other.snapshotsCount))) && (java.util.Objects.equals(snapMaxLimit, other.snapMaxLimit))) && (java.util.Objects.equals(snapshotScheduled, other.snapshotScheduled)); }
static org.ovirt.engine.core.bll.ValidationResult validateDefaultFlagIsNotChanged(org.ovirt.engine.core.common.businessentities.MacPool macPoolFromDb, org.ovirt.engine.core.common.businessentities.MacPool newMacPool) { if ((macPoolFromDb == null) || (newMacPool == null)) { throw new java.lang.IllegalArgumentException(); } final boolean defaultChanged = (macPoolFromDb.isDefaultPool()) != (newMacPool.isDefaultPool()); return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_CHANGING_DEFAULT_MAC_POOL_IS_NOT_SUPPORTED).when(defaultChanged); }





@java.lang.Override public javax.ws.rs.core.Response approve(org.ovirt.engine.api.model.Action action) { if ((action.isSetCluster()) && ((action.getCluster().isSetId()) || (action.getCluster().isSetName()))) { update(setCluster(get(), action.getCluster())); } validateEnums(org.ovirt.engine.api.model.Action.class, action); org.ovirt.engine.core.common.action.ApproveVdsParameters params = new org.ovirt.engine.core.common.action.ApproveVdsParameters(guid); params = ((org.ovirt.engine.core.common.action.ApproveVdsParameters) (getMapper(org.ovirt.engine.api.model.Action.class, org.ovirt.engine.core.common.action.VdsOperationActionParameters.class).map(action, ((org.ovirt.engine.core.common.action.VdsOperationActionParameters) (params))))); return doAction(VdcActionType.ApproveVds, params, action); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { List<org.ovirt.engine.core.common.businessentities.VmDevice> rngDevices = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); getModel().getIsRngEnabled().setEntity((!(rngDevices.isEmpty()))); if (!(rngDevices.isEmpty())) { org.ovirt.engine.core.common.businessentities.VmRngDevice rngDevice = new org.ovirt.engine.core.common.businessentities.VmRngDevice(rngDevices.get(0)); getModel().setRngDevice(rngDevice); } }
private void registerAllOvfDisks(java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> ovfStoreDiskImages) { for (org.ovirt.engine.core.common.businessentities.DiskImage ovfStoreDiskImage : ovfStoreDiskImages) { ovfStoreDiskImage.setDiskAlias(OvfInfoFileConstants.OvfStoreDescriptionLabel); ovfStoreDiskImage.setDiskDescription(OvfInfoFileConstants.OvfStoreDescriptionLabel); ovfStoreDiskImage.setShareable(true); org.ovirt.engine.core.common.action.RegisterDiskParameters registerDiskParams = new org.ovirt.engine.core.common.action.RegisterDiskParameters(ovfStoreDiskImage, org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getParameters().getStorageDomainId()); java.lang.String result = "succeeded"; if (!(runInternalAction(VdcActionType.RegisterDisk, registerDiskParams, org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.cloneContext()).getSucceeded())) { result = "failed"; } log.infoFormat("Register new floating OVF_STORE disk with disk id {0} for storage domain {1} has {2}", ovfStoreDiskImage.getId(), org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getParameters().getStorageDomainId(), result); addOvfStoreDiskToDomain(ovfStoreDiskImage); } }
@org.junit.Test public void testrunMultipleActions_1action() { java.util.List<org.ovirt.engine.core.common.action.VdcActionType> actionTypes = new java.util.ArrayList<>(); actionTypes.add(VdcActionType.AddDisk); java.util.List<org.ovirt.engine.core.common.action.VdcActionParametersBase> testParameters = new java.util.ArrayList<>(); testParameters.add(new org.ovirt.engine.core.common.action.VdcActionParametersBase()); java.util.List<org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback> callbacks = new java.util.ArrayList<>(); callbacks.add(mockActionCallback); frontend.runMultipleActions(actionTypes, testParameters, callbacks, mockActionFailureCallback, testState); verify(mockService).runAction(eq(VdcActionType.AddDisk), eq(testParameters.get(0)), callbackAction.capture()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); returnValue.setCanDoAction(true); returnValue.setSucceeded(true); callbackAction.getValue().onSuccess(returnValue); verify(mockActionCallback).executed(callbackParam.capture()); assertEquals(callbackParam.getValue().getReturnValue(), returnValue); assertEquals("List size should be 0", 0, actionTypes.size()); assertEquals("List size should be 0", 0, testParameters.size()); assertEquals("List size should be 0", 0, callbacks.size()); verifyAsyncActionStartedAndSucceeded(); }

public static boolean verifyAddVm(java.util.List<java.lang.String> reasons, int nicsCount, int vmPriority) { boolean returnValue = true; if ((org.ovirt.engine.core.bll.network.MacPoolManager.getInstance().getAvailableMacsCount()) < nicsCount) { if (reasons != null) { reasons.add(VdcBllMessages.MAC_POOL_NOT_ENOUGH_MAC_ADDRESSES.toString()); } returnValue = false; } else if (!(org.ovirt.engine.core.bll.VmTemplateCommand.isVmPriorityValueLegal(vmPriority, reasons))) { returnValue = false; } return returnValue; }
public void getHostListByStatus(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.common.businessentities.VDSStatus status, boolean doRefresh) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS> list = org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.VDS>cast(((java.lang.Iterable) (source))); return list; } return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>(); } }; org.ovirt.engine.core.common.queries.SearchParameters searchParameters = new org.ovirt.engine.core.common.queries.SearchParameters(("Host: " + (status == null ? "" : "status=" + (status.name()))), org.ovirt.engine.core.common.interfaces.SearchType.VDS); searchParameters.setMaxCount(9999); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, (doRefresh ? searchParameters : searchParameters.withoutRefresh()), aQuery); }
public org.ovirt.engine.ui.uicommonweb.models.EntityModel getAgentTabAvailable() { return agentTabAvailable; }
@org.junit.Test public void testBreakingExistingBondWithNetworkAttached() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.newNetworkAttachment(networkA, existingBond, null, dataFromHostSetupNetworksModel.networksToSync); existingNetworkAttachments.add(networkAttachment); when(logicalNetworkModelOfNetworkA.hasVlan()).thenReturn(false); when(logicalNetworkModelOfNetworkA.isAttached()).thenReturn(true); when(logicalNetworkModelOfNetworkA.getAttachedToNic()).thenReturn(networkInterfaceModelOfNicA); when(bondNetworkInterfaceModelA.getItems()).thenReturn(java.util.Collections.singletonList(logicalNetworkModelOfNetworkA)); when(bondNetworkInterfaceModelA.getIface()).thenReturn(existingBond); NetworkOperation.BREAK_BOND.getTarget().executeNetworkCommand(bondNetworkInterfaceModelA, null, dataFromHostSetupNetworksModel); assertThat(dataFromHostSetupNetworksModel.newOrModifiedNetworkAttachments.size(), is(0)); assertThat(dataFromHostSetupNetworksModel.removedNetworkAttachments.size(), is(1)); org.ovirt.engine.core.compat.Guid removedNetworkAttachmentId = dataFromHostSetupNetworksModel.removedNetworkAttachments.iterator().next().getId(); assertThat("id mismatch", removedNetworkAttachmentId, nullValue()); assertThat(dataFromHostSetupNetworksModel.newOrModifiedBonds.size(), is(0)); assertThat(dataFromHostSetupNetworksModel.removedBonds.size(), is(1)); org.ovirt.engine.core.compat.Guid removedBondId = dataFromHostSetupNetworksModel.removedBonds.iterator().next().getId(); assertThat("id mismatch", removedBondId, is(existingBond.getId())); }
@java.lang.SuppressWarnings("unchecked") public void initModelSortHandler(final org.ovirt.engine.ui.uicommonweb.models.SortedListModel<T> sortedModel) { final org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?, T> searchableModel = (sortedModel instanceof org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) ? ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel<?, T>) (sortedModel)) : null; org.ovirt.engine.ui.common.widget.table.ColumnResizeCellTable.addColumnSortHandler(( event) -> { Column<?, ?> column = event.getColumn(); if (column instanceof org.ovirt.engine.ui.common.widget.table.column.SortableColumn) { SortableColumn<org.ovirt.engine.ui.common.widget.table.T, ?> sortableColumn = ((SortableColumn<org.ovirt.engine.ui.common.widget.table.T, ?>) (column)); boolean sortApplied = false; boolean supportsServerSideSorting = (searchableModel != null) && (searchableModel.supportsServerSideSorting()); Comparator<? extends org.ovirt.engine.ui.common.widget.table.T> columnComparator = sortableColumn.getComparator(); Comparator<? extends org.ovirt.engine.ui.common.widget.table.T> realComparator = (columnComparator != null) ? org.ovirt.engine.ui.common.uicommon.model.DefaultModelItemComparator.fallbackFor(columnComparator) : null; if (supportsServerSideSorting && (realComparator != null)) { sortedModel.setComparator(realComparator, event.isSortAscending()); sortApplied = true; } else if (supportsServerSideSorting) { sortedModel.setComparator(null); if (searchableModel.isSearchValidForServerSideSorting()) { searchableModel.updateSortOptions(sortableColumn.getSortBy(), event.isSortAscending()); sortApplied = true; } else { searchableModel.clearSortOptions(); } } else if (realComparator != null) { sortedModel.setComparator(realComparator, event.isSortAscending()); sortApplied = true; if (searchableModel == null) { sortedModel.setItems(sortedModel.getItems()); } } com.google.gwt.user.cellview.client.ColumnSortList.ColumnSortInfo columnSortInfo = event.getColumnSortList().get(0); if (sortApplied) { pushColumnSort(columnSortInfo); } else { clearColumnSort(); } } }); }


void initTable(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { org.ovirt.engine.ui.common.widget.table.column.TextColumnWithTooltip<org.ovirt.engine.core.common.businessentities.event_subscriber> eventNameColumn = new org.ovirt.engine.ui.common.widget.table.column.EnumColumn<org.ovirt.engine.core.common.businessentities.event_subscriber, org.ovirt.engine.core.common.AuditLogType>() { @java.lang.Override protected org.ovirt.engine.core.common.AuditLogType getRawValue(org.ovirt.engine.core.common.businessentities.event_subscriber object) { return java.lang.Enum.valueOf(org.ovirt.engine.core.common.AuditLogType.class, object.getevent_up_name()); } }; getTable().addColumn(eventNameColumn, constants.eventNameEventNotifier()); getTable().addActionButton(new org.ovirt.engine.ui.webadmin.widget.action.WebAdminButtonDefinition<org.ovirt.engine.core.common.businessentities.event_subscriber>(constants.manageEventsEventNotifier()) { @java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return getDetailModel().getManageEventsCommand(); } }); }

@java.lang.Override public java.util.List<org.ovirt.engine.api.model.Statistic> getStatistics(org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface) { org.ovirt.engine.core.common.businessentities.network.NetworkStatistics s = iface.getStatistics(); return asList(setDatum(clone(org.ovirt.engine.api.restapi.resource.NicStatisticalQuery.DATA_RX), s.getReceiveRate()), setDatum(clone(org.ovirt.engine.api.restapi.resource.NicStatisticalQuery.DATA_TX), s.getTransmitRate()), setDatum(clone(org.ovirt.engine.api.restapi.resource.NicStatisticalQuery.ERRS_RX), s.getReceiveDropRate()), setDatum(clone(org.ovirt.engine.api.restapi.resource.NicStatisticalQuery.ERRS_TX), s.getTransmitDropRate())); }

private void propagateInternalCommandFailure(org.ovirt.engine.core.common.action.VdcReturnValueBase internalReturnValue) { org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getReturnValue().getExecuteFailedMessages().clear(); org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getReturnValue().getExecuteFailedMessages().addAll(internalReturnValue.getExecuteFailedMessages()); org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getReturnValue().setFault(internalReturnValue.getFault()); org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getReturnValue().getCanDoActionMessages().clear(); org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getReturnValue().getCanDoActionMessages().addAll(internalReturnValue.getCanDoActionMessages()); org.ovirt.engine.core.bll.storage.disk.UpdateVmDiskCommand.getReturnValue().setCanDoAction(internalReturnValue.getCanDoAction()); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainStatic> getAllForStoragePool(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeReadList("Getstorage_domain_staticBystorage_pool_id", org.ovirt.engine.core.dao.StorageDomainStaticDAODbFacadeImpl.StorageDomainStaticRowMapper.instance, getStoragePoolIdParameterSource(id)); }
public int removeByVdsmTaskId(final org.ovirt.engine.core.compat.Guid vdsmTaskId) { return org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Integer>() { @java.lang.Override public java.lang.Integer runInTransaction() { org.ovirt.engine.core.common.businessentities.AsyncTask asyncTask = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAsyncTaskDao().getByVdsmTaskId(vdsmTaskId); int retVal = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAsyncTaskDao().removeByVdsmTaskId(vdsmTaskId); if ((asyncTask != null) && (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(asyncTask.getCommandId())))) { org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = coco.getCommandEntity(asyncTask.getCommandId()); if ((cmdEntity != null) && (!(cmdEntity.isCallBackEnabled()))) { coco.removeCommand(asyncTask.getCommandId()); if (!(coco.hasCommandEntitiesWithRootCommandId(asyncTask.getRootCommandId()))) { coco.removeCommand(asyncTask.getRootCommandId()); } } } return retVal; } }); }
public void setStatus(org.ovirt.engine.core.compat.Guid clusterId, final java.util.Collection<org.ovirt.engine.core.common.businessentities.network.Network> networks) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.RequiredNetworkClusterStatusUpdater requiredNetworkClusterStatusUpdater = new org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.RequiredNetworkClusterStatusUpdater(clusterId); for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { org.ovirt.engine.core.common.businessentities.network.NetworkCluster networkCluster = networkClusterDao.get(new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(clusterId, network.getId())); boolean doUpdateNetworkClusterStatus = networkCluster != null; if (doUpdateNetworkClusterStatus) { if (networkCluster.isRequired()) { requiredNetworkClusterStatusUpdater.update(networkCluster, network.getName()); } else { updateNetworkClusterStatus(networkCluster, NetworkStatus.OPERATIONAL); } } } }
private org.ovirt.engine.core.common.businessentities.network.Network getOtherNetworkWithSameName(java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networks) { java.lang.String networkName = org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetworkName().toLowerCase(); org.ovirt.engine.core.compat.Guid networkId = org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork().getId(); org.ovirt.engine.core.compat.NGuid dataCenterId = org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getNetwork().getDataCenterId(); for (org.ovirt.engine.core.common.businessentities.network.Network network : networks) { if (((network.getName().toLowerCase().equals(networkName)) && (!(network.getId().equals(networkId)))) && (dataCenterId.equals(network.getDataCenterId()))) { return network; } } return null; }
private void validate() { if (!(managementNetworkModel.isAttached())) { okCommand.getExecuteProhibitionReasons().add(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().mgmtNotAttachedToolTip()); okCommand.setIsExecutionAllowed(false); } else { okCommand.setIsExecutionAllowed(true); } }


@javax.annotation.PostConstruct public void initialize() { org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info("Start initializing {}", getClass().getSimpleName()); succeededJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.SucceededJobCleanupTimeInMinutes); failedJobTime = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.FailedJobCleanupTimeInMinutes); java.lang.Integer cleanupFrequency = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.JobCleanupRateInMinutes); schedulerUtil.scheduleAFixedDelayJob(this, "completed_jobs_cleanup", new java.lang.Class[]{ }, new java.lang.Object[]{ }, cleanupFrequency, cleanupFrequency, java.util.concurrent.TimeUnit.MINUTES); org.ovirt.engine.core.bll.job.JobRepositoryCleanupManager.log.info("Finished initializing {}", getClass().getSimpleName()); }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("refreshGlusterServices") public void refreshGlusterServices() { if (getServiceNameMap().isEmpty()) { populateServiceMap(); } java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = getClusterDao().getAll(); for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters) { if (supportsGlusterServicesFeature(cluster)) { try { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> serversList = getClusterUtils().getAllServers(cluster.getId()); if (serversList.isEmpty()) { java.util.Map<org.ovirt.engine.core.common.businessentities.gluster.ServiceType, org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus> statusMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.gluster.ServiceType type : getClusterServiceMap(cluster).keySet()) { statusMap.put(type, GlusterServiceStatus.UNKNOWN); } addOrUpdateClusterServices(cluster, statusMap); } else { java.util.List<java.util.concurrent.Callable<java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.gluster.GlusterServiceStatus>>> taskList = createTaskList(serversList); if ((taskList != null) && ((taskList.size()) > 0)) { refreshClusterServices(cluster, org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.invokeAll(taskList)); } } } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.gluster.GlusterServiceSyncJob.log.errorFormat("Error while refreshing service statuses of cluster {0}!", cluster.getName(), e); } } } }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(vmDynamic, vmGuestAgentInterfaces, vmStatistics, lunsMap, interfaceStatistics, vNumaNodeStatisticsList); }

private void onSaveConfirmCV(org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel model) { if (!(model.getVersion().getSelectedItem().equals(((org.ovirt.engine.core.common.businessentities.VDSGroup) (getSelectedItem())).getcompatibility_version()))) { final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().changeClusterCompatibilityVersionTitle()); confirmModel.setHelpTag(HelpTag.change_cluster_compatibility_version); confirmModel.setHashName("change_cluster_compatibility_version"); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSaveConfirmCpuThreads", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); getConfirmWindow().getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirmation", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); getConfirmWindow().getCommands().add(tempVar2); checkForNonResponsiveHosts(confirmModel); } else { onSaveConfirmCpuThreads(); } }

@org.junit.Test public void testAlreadyExistStorageDomain() { when(command.getStorageDomainStaticDao().get(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(org.ovirt.engine.core.bll.storage.AddExistingBlockStorageDomainCommandTest.getStorageDomain()); assertFalse("Storage Domain already exists", command.canAddDomain()); assertTrue("Import block Storage Domain should have failed due to already existing Storage Domain", command.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST.toString())); }
public org.ovirt.engine.core.bll.ValidationResult networkNotChanged() { if (org.apache.commons.lang.ObjectUtils.equals(vnicProfile.getNetworkId(), getOldVnicProfile().getNetworkId())) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_CHANGE_VNIC_PROFILE_NETWORK); }
private org.ovirt.engine.core.common.scheduling.PolicyUnit createFromDiscoveryUnit(org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryUnit discoveryUnit, org.ovirt.engine.core.common.scheduling.PolicyUnitType type) { org.ovirt.engine.core.common.scheduling.PolicyUnit policy = new org.ovirt.engine.core.common.scheduling.PolicyUnit(); policy.setInternal(false); policy.setName(discoveryUnit.getName()); policy.setPolicyUnitType(type); if (!(org.apache.commons.lang.StringUtils.isBlank(discoveryUnit.getRegex()))) { policy.setParameterRegExMap(org.ovirt.engine.core.utils.customprop.SimpleCustomPropertiesUtil.getInstance().convertProperties(discoveryUnit.getRegex())); } else { policy.setParameterRegExMap(new java.util.HashMap<java.lang.String, java.lang.String>()); } return policy; }
private void createSyncNetworkParameters(java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters, java.util.Collection<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { java.util.Set<org.ovirt.engine.core.compat.Guid> hostIdsToSync = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = networkImplementationDetailsUtils.calculateNetworkImplementationDetails(nic, org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.SyncNetworkParametersBuilder.getNetwork()); boolean networkShouldBeSynced = (networkImplementationDetails != null) && (!(networkImplementationDetails.isInSync())); if (networkShouldBeSynced) { hostIdsToSync.add(nic.getVdsId()); } } for (org.ovirt.engine.core.compat.Guid hostId : hostIdsToSync) { org.ovirt.engine.core.common.action.PersistentHostSetupNetworksParameters setupNetworkParams = createHostSetupNetworksParameters(hostId); setupNetworkParams.setNetworkNames(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.SyncNetworkParametersBuilder.getNetworkName()); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = getNetworkToAttachment(hostId).get(org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.SyncNetworkParametersBuilder.getNetwork().getId()); attachment.setOverrideConfiguration(true); setupNetworkParams.getNetworkAttachments().add(attachment); parameters.add(setupNetworkParams); } }
public org.ovirt.engine.core.bll.ValidationResult interfaceInHost(org.ovirt.engine.core.compat.Guid hostId) { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.NIC_NOT_EXISTS_ON_HOST).when((!(iface.getVdsId().equals(hostId)))); }
@org.junit.Test public void canDoActionFailedVMHasNotDisk() throws java.lang.Exception { initializeCommand(createParameters()); createNullDisk(); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_DISK_NOT_EXIST); }


@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. A VirtIO-SCSI LUN disk can't be read-only.") java.lang.String ACTION_TYPE_FAILED_VIRT_IO_SCSI_INTERFACE_FOR_LUN_DISKS_DOES_NOT_SUPPORT_READ_ONLY_ATTR();
public static org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskToModel(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = new org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel(); diskModel.getAlias().setEntity(disk.getDiskAlias()); if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.Disk.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)); org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Integer> sizeEntity = new org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Integer>(); sizeEntity.setEntity(((int) (diskImage.getSizeInGigabytes()))); diskModel.setSize(sizeEntity); org.ovirt.engine.ui.uicommonweb.models.ListModel volumeList = new org.ovirt.engine.ui.uicommonweb.models.ListModel(); volumeList.setItems(((diskImage.getVolumeType()) == (org.ovirt.engine.core.common.businessentities.VolumeType.Preallocated) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VolumeType>(java.util.Arrays.asList(new org.ovirt.engine.core.common.businessentities.VolumeType[]{ org.ovirt.engine.core.common.businessentities.VolumeType.Preallocated })) : org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVolumeTypeList())); volumeList.setSelectedItem(diskImage.getVolumeType()); diskModel.setVolumeType(volumeList); } diskModel.setDisk(disk); return diskModel; }




@org.junit.Test public void testSave() { org.ovirt.engine.core.common.businessentities.storage.DiskImage newImage = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); newImage.setImageId(org.ovirt.engine.core.compat.Guid.newGuid()); newImage.setVolumeFormat(VolumeFormat.COW); newImage.setVolumeType(VolumeType.Sparse); newImage.setActive(true); newImage.setImageTemplateId(org.ovirt.engine.core.dao.DiskImageDynamicDaoTest.EXISTING_IMAGE_DISK_TEMPLATE); newImage.setId(org.ovirt.engine.core.compat.Guid.newGuid()); imageDao.save(newImage.getImage()); diskDao.save(newImage); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic dynamic = createDiskImageDynamic(newImage.getImageId()); dao.save(createDiskImageDynamic(newImage.getImageId())); org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic result = dao.get(dynamic.getId()); assertNotNull(result); assertEquals(dynamic, result); }
@java.lang.Override public org.ovirt.engine.api.model.Templates list() { if (isFiltered()) return mapCollection(getBackendCollection(VdcQueryType.GetAllVmTemplates, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase())); else return mapCollection(getBackendCollection(SearchType.VmTemplate)); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcActionParametersBase getParameters(org.ovirt.engine.api.model.Network incoming, org.ovirt.engine.core.common.businessentities.network entity) { org.ovirt.engine.core.common.businessentities.network updated = getMapper(modelType, org.ovirt.engine.core.common.businessentities.network.class).map(incoming, entity); return new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(entity.getstorage_pool_id().getValue(), updated); }
@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getVmNetworkInterfaceDao(); vmDevicesDao = dbFacade.getVmDeviceDao(); StatsDao = dbFacade.getVmNetworkStatisticsDao(); existingVmInterface = dao.get(FixturesTool.VM_NETWORK_INTERFACE); existingTemplateInterface = dao.get(FixturesTool.TEMPLATE_NETWORK_INTERFACE); newVmInterface = new org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface(); newVmInterface.setStatistics(new org.ovirt.engine.core.common.businessentities.network.VmNetworkStatistics()); newVmInterface.setId(org.ovirt.engine.core.compat.Guid.NewGuid()); newVmInterface.setName("eth77"); newVmInterface.setNetworkName("enginet"); newVmInterface.setLinked(true); newVmInterface.setSpeed(1000); newVmInterface.setType(3); newVmInterface.setMacAddress("01:C0:81:21:71:17"); newVmDevice.setType(VmDeviceGeneralType.INTERFACE); newVmDevice.setDevice("bridge"); newVmDevice.setAddress("sample"); newVmDevice.setBootOrder(1); newVmDevice.setIsManaged(true); newVmDevice.setIsPlugged(true); newVmDevice.setIsReadOnly(false); }
@java.lang.Override protected void executeNetworkCommand(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> allNics, java.lang.Object... params) { assert (op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) && (!(op1 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel)); assert (op2 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) && (!(op2 instanceof org.ovirt.engine.ui.uicommonweb.models.hosts.network.BondNetworkInterfaceModel)); assert (params.length) == 1 : "incorrect params length"; org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic1 = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op1)); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel nic2 = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkInterfaceModel) (op2)); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.clearNetworks(nic1, allNics); org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.clearNetworks(nic2, allNics); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface bond = ((org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface) (params[0])); java.lang.String bondName = bond.getName(); allNics.add(bond); nic1.getEntity().setBondName(bondName); nic2.getEntity().setBondName(bondName); }
@java.lang.Override protected org.ovirt.engine.ui.common.widget.table.SimpleActionTable<org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel> createActionTable() { return new org.ovirt.engine.ui.userportal.widget.table.column.UserPortalSimpleActionTable<org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel>(modelProvider, getTableResources(), org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.instance().getEventBus(), new org.ovirt.engine.ui.userportal.widget.refresh.UserPortalRefreshManager(modelProvider, org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.instance().getEventBus(), org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.instance().getClientStorage())); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Data Center Re-Initialize") java.lang.String dataCenterReInitializeTitle();
public org.ovirt.engine.core.bll.ValidationResult hasSpaceForAllDisks(java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> newDiskImages, java.util.Collection<org.ovirt.engine.core.common.businessentities.storage.DiskImage> clonedDiskImages) { java.lang.Long availableSize = storageDomain.getAvailableDiskSizeInBytes(); double totalSizeForNewDisks = getTotalSizeForNewDisks(newDiskImages); double totalSizeForClonedDisks = getTotalSizeForClonedDisks(clonedDiskImages); double totalSizeForDisks = totalSizeForNewDisks + totalSizeForClonedDisks; return validateRequiredSpace(availableSize, totalSizeForDisks); }
public java.util.List<org.ovirt.engine.core.common.errors.VdcBllMessages> getErrorMessages() { return errorMessages; }
public static org.ovirt.engine.api.v3.types.V3VM addDisksLink(org.ovirt.engine.api.v3.types.V3VM vm) { if (vm == null) { return null; } org.ovirt.engine.api.restapi.invocation.Current current = org.ovirt.engine.api.restapi.invocation.CurrentManager.get(); java.lang.StringBuilder buffer = new java.lang.StringBuilder(); buffer.append(current.getPrefix()); if ((current.getVersionSource()) == (org.ovirt.engine.api.restapi.invocation.VersionSource.URL)) { buffer.append("/v"); buffer.append(current.getVersion()); } buffer.append(current.getPath()); if (!(current.getPath().contains(vm.getId()))) { buffer.append(vm.getId()); } buffer.append("/disks"); java.lang.String href = buffer.toString(); org.ovirt.engine.api.v3.types.V3Link link = new org.ovirt.engine.api.v3.types.V3Link(); link.setRel("disks"); link.setHref(href); vm.getLinks().add(link); return vm; }
@java.lang.Override public org.ovirt.engine.core.bll.provider.ProviderValidator getProviderValidator() { return new org.ovirt.engine.core.bll.provider.ProviderValidator(provider) { @java.lang.Override public org.ovirt.engine.core.bll.ValidationResult validateAddProvider() { org.ovirt.engine.core.common.businessentities.VmwareVmProviderProperties properties = org.ovirt.engine.core.bll.provider.vms.VmwareVmProviderProxy.this.provider.getAdditionalProperties(); org.ovirt.engine.core.compat.Guid proxyHostId = properties.getProxyHostId(); if (proxyHostId != null) { org.ovirt.engine.core.common.businessentities.VDS proxyHost = getVdsDao().get(proxyHostId); if (proxyHost == null) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.VDS_DOES_NOT_EXIST); } if (!(proxyHost.getStoragePoolId().equals(properties.getStoragePoolId()))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VDS_NOT_IN_DEST_STORAGE_POOL); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; } private org.ovirt.engine.core.dao.VdsDao getVdsDao() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao(); } }; }
protected boolean formatStorage(org.ovirt.engine.core.common.businessentities.StorageDomain dom, org.ovirt.engine.core.common.businessentities.VDS vds) { return getVdsBroker().RunVdsCommand(VDSCommandType.FormatStorageDomain, new org.ovirt.engine.core.common.vdscommands.FormatStorageDomainVDSCommandParameters(vds.getId(), dom.getId())).getSucceeded(); }
private void localize(org.ovirt.engine.ui.webadmin.ApplicationConstants constants) { dataCenterEditor.setLabel(constants.dataCenterVolume()); clusterEditor.setLabel(constants.volumeClusterVolume()); nameEditor.setLabel(constants.clusterPopupNameLabel()); typeListEditor.setLabel(constants.typeVolume()); replicaCountEditor.setLabel(constants.replicaCountVolume()); stripeCountEditor.setLabel(constants.stripeCountVolume()); transportTypesLabel.setText(constants.transportTypeVolume()); tcpTransportTypeEditor.setLabel(constants.tcpVolume()); rdmaTransportTypeEditor.setLabel(constants.rdmaVolume()); bricksLabel.setText(constants.bricksVolume()); addBricksButton.setLabel(constants.addBricksVolume()); accessProtocolsLabel.setText(constants.accessProtocolsVolume()); gluster_accecssProtocolEditor.setLabel(constants.glusterVolume()); nfs_accecssProtocolEditor.setLabel(constants.nfsVolume()); cifs_accecssProtocolEditor.setLabel(constants.cifsVolume()); allowAccessEditor.setLabel(constants.allowAccessFromVolume()); allowAccessLabel.setText(constants.allowAccessFromLabelVolume()); }

private void processImages(final boolean useCopyImages) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmImagesAndSnapshots(); addMemoryImages(); updateSnapshotsFromExport(); if (useCopyImages) { moveOrCopyAllImageGroups(); } org.ovirt.engine.core.bll.utils.VmDeviceUtils.addImportedDevices(getVm().getStaticData(), getParameters().isImportAsNewEntity()); if (getParameters().isImportAsNewEntity()) { getParameters().setVm(getVm()); setVmId(getVm().getId()); } return null; }); }
org.ovirt.engine.ui.common.widget.action.ActionButton addActionButton(org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef);

@java.lang.Override protected void EndSuccessfully() { org.ovirt.engine.core.bll.ExportVmCommand.EndActionOnAllImageGroups(); if ((org.ovirt.engine.core.bll.ExportVmCommand.getVm()) != null) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.ExportVmCommand.getVm(); org.ovirt.engine.core.bll.VmHandler.UnLockVm(vm.getId()); org.ovirt.engine.core.bll.VmHandler.updateDisksFromDb(vm); org.ovirt.engine.core.bll.utils.VmDeviceUtils.setVmDevices(vm.getStaticData()); if (org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getCopyCollapse()) { vm.setvmt_guid(VmTemplateHandler.BlankVmTemplateId); vm.setvmt_name(null); org.ovirt.engine.core.common.businessentities.Snapshot activeSnapshot = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSnapshotDao().get(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSnapshotDao().getId(vm.getId(), SnapshotType.ACTIVE)); vm.setSnapshots(java.util.Arrays.asList(activeSnapshot)); UpdateCopyVmInSpm(org.ovirt.engine.core.bll.ExportVmCommand.getVm().getstorage_pool_id(), vm, org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getStorageDomainId()); } else { vm.setSnapshots(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSnapshotDao().getAllWithConfiguration(org.ovirt.engine.core.bll.ExportVmCommand.getVm().getId())); UpdateVmImSpm(); } } else { org.ovirt.engine.core.bll.ExportVmCommand.setCommandShouldBeLogged(false); log.warn("ExportVmCommand::EndMoveVmCommand: Vm is null - not performing full EndAction"); } org.ovirt.engine.core.bll.ExportVmCommand.setSucceeded(true); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc glusterVolumeGeoRepStatus(java.lang.String volumeName) { try { java.util.Map<java.lang.String, java.lang.Object> response; response = vdsServer.glusterVolumeGeoRepStatus(volumeName); return new org.ovirt.engine.core.vdsbroker.gluster.GlusterVolumeGeoRepStatusForXmlRpc(response); } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.compat.Guid> getAsyncTaskIdsByUser(org.ovirt.engine.core.compat.Guid userId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("user_id", userId); return getCallsHandler().executeReadList("GetAsyncTasksIdsByUserId", org.ovirt.engine.core.dao.AsyncTaskDAODbFacadeImpl.IdRowMapper.instance, parameterSource); }
public java.lang.String scheduleACronJob(java.lang.Object instance, java.lang.String methodName, java.lang.Class<?>[] inputTypes, java.lang.Object[] inputParams, java.lang.String cronExpression, java.util.Date startAt, java.util.Date endBy) { org.quartz.JobDetail job = createJobWithBasicMapValues(instance, methodName, inputTypes, inputParams); try { java.lang.String triggerName = generateUniqueNameForInstance(instance, org.ovirt.engine.core.utils.timer.SchedulerUtilBaseImpl.TRIGGER_PREFIX); org.quartz.Trigger trigger = newTrigger().withIdentity(triggerName, Scheduler.DEFAULT_GROUP).withSchedule(cronSchedule(cronExpression)).startAt(startAt).endAt(endBy).build(); sched.scheduleJob(job, trigger); } catch (java.lang.Exception se) { log.error("failed to schedule job: {}", se.getMessage()); log.debug("Exception", se); return null; } return job.getKey().getName(); }

protected boolean checkStoragePool() { if ((org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool()) == null) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_EXIST); return false; } return true; }

private javax.ws.rs.core.Response addDomain(org.ovirt.engine.core.common.action.VdcActionType action, org.ovirt.engine.api.model.StorageDomain model, org.ovirt.engine.core.common.businessentities.StorageDomainStatic entity, org.ovirt.engine.core.compat.Guid hostId, org.ovirt.engine.core.common.businessentities.StorageServerConnections connection) { javax.ws.rs.core.Response response = null; boolean isConnNew = false; if ((connection.getstorage_type().isFileDomain()) && (org.apache.commons.lang.StringUtils.isEmpty(connection.getid()))) { isConnNew = true; connection.setid(addStorageServerConnection(connection, hostId)); } entity.setStorage(connection.getid()); if (((action == (org.ovirt.engine.core.common.action.VdcActionType.AddNFSStorageDomain)) || (action == (org.ovirt.engine.core.common.action.VdcActionType.AddPosixFsStorageDomain))) || (action == (org.ovirt.engine.core.common.action.VdcActionType.AddGlusterFsStorageDomain))) { org.ovirt.engine.core.common.businessentities.StorageDomain existing = getExistingStorageDomain(hostId, entity.getStorageType(), entity.getStorageDomainType(), connection); if (existing != null) { org.ovirt.engine.api.restapi.types.StorageDomainMapper.map(model, existing.getStorageStaticData()); entity = existing.getStorageStaticData(); action = org.ovirt.engine.core.common.action.VdcActionType.AddExistingFileStorageDomain; } } if (action != (org.ovirt.engine.core.common.action.VdcActionType.AddExistingFileStorageDomain)) { validateParameters(model, 2, "name"); } try { response = performCreate(action, getAddParams(entity, hostId), ID_RESOLVER); } catch (org.ovirt.engine.api.restapi.resource.WebFaultException e) { if (isConnNew) { removeStorageServerConnection(connection, hostId); } throw e; } return response; }

private void removeHostedEngineLunDisk() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.BaseDisk> disks = org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.getDbFacade().getBaseDiskDao().getDisksByAlias(StorageConstants.HOSTED_ENGINE_LUN_DISK_ALIAS); if ((disks != null) && (!(disks.isEmpty()))) { org.ovirt.engine.core.common.businessentities.storage.BaseDisk heDirectLun = disks.get(0); org.ovirt.engine.core.common.action.VdcReturnValueBase removeDisk = org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.getBackend().runInternalAction(VdcActionType.RemoveDisk, new org.ovirt.engine.core.common.action.RemoveDiskParameters(heDirectLun.getId())); if (!(removeDisk.getSucceeded())) { org.ovirt.engine.core.bll.storage.domain.ImportHostedEngineStorageDomainCommand.setSucceeded(false); log.error("Failed to remove the hosted engine direct lun disk"); } } }

private java.util.List<org.ovirt.engine.core.compat.Guid> getInitialHosts() { java.util.List<org.ovirt.engine.core.compat.Guid> initialHosts = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS host : vdsDao.getAll()) { initialHosts.add(host.getId()); } return initialHosts; }
@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("refreshHeavyWeightData") public void refreshHeavyWeightData() { log.debug("Refreshing Gluster Data [heavyweight]"); for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : getClusterDao().getAll()) { if ((org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.refreshHeavyWeight(cluster.getcompatibility_version())) && (cluster.supportsGlusterService())) { try { refreshClusterHeavyWeightData(cluster); } catch (java.lang.Exception e) { log.errorFormat("Error while refreshing Gluster heavyweight data of cluster {0}!", cluster.getName(), e); } } } }
public void updateCpuSharesSelection() { boolean foundEnum = false; for (org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel.CpuSharesAmount cpuSharesAmount : UnitVmModel.CpuSharesAmount.values()) { if ((cpuSharesAmount.getValue()) == ((java.lang.Integer) (getModel().getCpuSharesAmount().getEntity()))) { getModel().getCpuSharesAmountSelection().setSelectedItem(cpuSharesAmount); foundEnum = true; break; } } if (!foundEnum) { int currentVal = java.lang.Integer.parseInt(getModel().getCpuSharesAmount().getEntity().toString()); getModel().getCpuSharesAmountSelection().setSelectedItem(UnitVmModel.CpuSharesAmount.CUSTOM); getModel().getCpuSharesAmount().setEntity(currentVal); } }
public static synchronized java.lang.String[] getLinksToExclude(org.ovirt.engine.api.model.StorageDomain storageDomain) { return org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.isIsoDomain(storageDomain) ? new java.lang.String[]{ "templates", "vms", "disks", "images" } : org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.isExportDomain(storageDomain) ? new java.lang.String[]{ "files", "images" } : org.ovirt.engine.api.restapi.resource.BackendStorageDomainResource.isImageDomain(storageDomain) ? new java.lang.String[]{ "templates", "vms", "files", "disks", "storageconnections" } : new java.lang.String[]{ "templates", "vms", "files", "images" }; }
public void setActualSizeFromDiskImage(long size) { actualSizeFromDiskImageDynamic = size; setActualSize((((getActualSizeFromDiskImage()) * 1.0) / ((1024 * 1024) * 1024))); }
private java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.Integer>> getAllNumaNodeCpuMap() { java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> numaNodesCpus = getCallsHandler().executeReadList("GetAllFromNumaNodeCpuMap", org.ovirt.engine.core.dao.VmNumaNodeDAODbFacadeImpl.vmNumaNodeCpusRowMapper, null); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.Integer>> numaNodesCpusMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer> pair : numaNodesCpus) { if (!(numaNodesCpusMap.containsKey(pair.getFirst()))) { numaNodesCpusMap.put(pair.getFirst(), new java.util.ArrayList<java.lang.Integer>()); } numaNodesCpusMap.get(pair.getFirst()).add(pair.getSecond()); } return numaNodesCpusMap; }
private static void updateCommonInterfaceData(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.VDS vds, java.util.Map.Entry<java.lang.String, java.lang.Object> entry) { iface.setName(entry.getKey()); iface.setId(org.ovirt.engine.core.compat.Guid.newGuid()); iface.setVdsId(vds.getId()); org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics iStats = new org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics(); iStats.setId(iface.getId()); iStats.setVdsId(vds.getId()); iface.setStatistics(iStats); java.util.Map<java.lang.String, java.lang.Object> nic = ((java.util.Map<java.lang.String, java.lang.Object>) (entry.getValue())); if (nic != null) { iface.setAddress(((java.lang.String) (nic.get("addr")))); iface.setSubnet(((java.lang.String) (nic.get("netmask")))); java.lang.String mtu = ((java.lang.String) (nic.get(VdsProperties.MTU))); if (org.apache.commons.lang.StringUtils.isNotBlank(mtu)) { iface.setMtu(java.lang.Integer.parseInt(mtu)); } org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.addBootProtocol(((java.util.Map<java.lang.String, java.lang.Object>) (nic.get("cfg"))), vds, iface); } }
@java.lang.Override protected boolean canDoAction() { if ((getNic()) == null) { return failCanDoAction(VdcBllMessages.HOST_NETWORK_INTERFACE_NOT_EXIST); } if ((!(org.ovirt.engine.core.utils.NetworkUtils.isLabeled(getNic()))) || (!(getNic().getLabels().contains(getLabel())))) { return failCanDoAction(VdcBllMessages.INTERFACE_NOT_LABELED); } return true; }

@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnaValue = runVdsCommand(VDSCommandType.StopRebalanceGlusterVolume, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeVDSParameters(upServer.getId(), getGlusterVolumeName())); if (!(vdsReturnaValue.getSucceeded())) { handleVdsError(AuditLogType.GLUSTER_VOLUME_REBALANCE_STOP_FAILED, vdsReturnaValue.getVdsError().getMessage()); setSucceeded(false); return; } endStepJobAborted(); releaseVolumeLock(); setSucceeded(vdsReturnaValue.getSucceeded()); }
@java.lang.Override public void run() { getBackend().runInternalAction(VdcActionType.PersistentSetupNetworks, params); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Export Virtual Machine") java.lang.String exportVirtualMachineTitle();



private void endCreateAllSnapshots() { org.ovirt.engine.core.bll.Backend.getInstance().endAction(VdcActionType.CreateAllSnapshotsFromVm, getCreateSnapshotParameters(), org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks(enclosingCommand.getExecutionContext())); }

public org.ovirt.engine.core.bll.ValidationResult hasUniqueName() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_NAME_ALREADY_USED).when((!(macPoolNameUnique()))); }
private void removeNetworkFromHosts() { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics = org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand.getDbFacade().getInterfaceDao().getAllInterfacesByLabelForCluster(org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand.getParameters().getVdsGroupId(), getPersistedNetwork().getLabel()); org.ovirt.engine.core.bll.network.RemoveNetworkParametersBuilder builder = new org.ovirt.engine.core.bll.network.RemoveNetworkParametersBuilder(getPersistedNetwork(), org.ovirt.engine.core.bll.network.cluster.DetachNetworkToVdsGroupCommand.getContext()); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = builder.buildParameters(nics); if (!(parameters.isEmpty())) { org.ovirt.engine.core.bll.network.NetworkParametersBuilder.updateParametersSequencing(parameters); runInternalMultipleActions(VdcActionType.PersistentSetupNetworks, parameters); } }
java.util.Map<java.lang.String, java.lang.String> getMessageMap(final java.lang.String prefix, final java.util.Locale locale) { java.util.List<org.ovirt.engine.core.utils.branding.BrandingTheme> messageThemes = getBrandingThemes(); java.util.Map<java.lang.String, java.lang.String> keyValues = new java.util.HashMap<java.lang.String, java.lang.String>(); if (messageThemes != null) { for (org.ovirt.engine.core.utils.branding.BrandingTheme theme : messageThemes) { java.util.ResourceBundle messagesBundle = theme.getMessagesBundle(locale); for (java.lang.String key : messagesBundle.keySet()) { if ((key.startsWith((((org.ovirt.engine.core.utils.branding.BrandingManager.BRAND_PREFIX) + ".") + prefix))) || (key.startsWith(org.ovirt.engine.core.utils.branding.BrandingManager.COMMON_PREFIX))) { keyValues.put(key.replaceFirst(((((org.ovirt.engine.core.utils.branding.BrandingManager.BRAND_PREFIX) + "\\.") + prefix) + "\\."), "").replaceFirst(((org.ovirt.engine.core.utils.branding.BrandingManager.BRAND_PREFIX) + "\\."), "").replaceFirst(((org.ovirt.engine.core.utils.branding.BrandingManager.COMMON_PREFIX) + "\\."), ""), messagesBundle.getString(key)); } } } } return keyValues; }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((getParameters().getClusterId()) == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID); return false; } if (!(getGlusterUtil().isGlusterSnapshotSupported(getVdsGroup().getCompatibilityVersion(), getVdsGroup().getId()))) { failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VOLUME_SNAPSHOT_NOT_SUPPORTED); } if ((getParameters().getConfigParams()) == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_CONFIG_PARAMS_IS_EMPTY); return false; } for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig param : getParameters().getConfigParams()) { if (org.apache.commons.lang.StringUtils.isEmpty(param.getParamValue())) { addCustomValue("snapshotConfigParam", param.getParamName()); addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_CONFIG_PARAM_VALUE_IS_EMPTY); return false; } } return true; }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((imagesParameters) == null ? 0 : imagesParameters.hashCode()); result = (prime * result) + (shouldbelogged ? 1231 : 1237); result = (prime * result) + ((transctionOption) == null ? 0 : transctionOption.hashCode()); result = (prime * result) + ((entityId) == null ? 0 : entityId.hashCode()); result = (prime * result) + (multipleAction ? 1231 : 1237); result = (prime * result) + ((parametersCurrentUser) == null ? 0 : parametersCurrentUser.hashCode()); result = (prime * result) + ((parentCommand) == null ? 0 : parentCommand.hashCode()); result = (prime * result) + ((taskIds) == null ? 0 : taskIds.hashCode()); result = (prime * result) + ((correlationId) == null ? 0 : correlationId.hashCode()); result = (prime * result) + (executionIndex); return result; }

@org.junit.Test public void testErrorHandling() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue value = new org.ovirt.engine.core.common.vdscommands.VDSReturnValue(); value.setSucceeded(false); value.setExceptionObject(new org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException("unknown host")); when(resourceManager.getEventListener()).thenReturn(vdsEventlistener); when(resourceManager.runVdsCommand(any(org.ovirt.engine.core.common.vdscommands.VDSCommandType.class), any(org.ovirt.engine.core.common.vdscommands.VDSParametersBase.class))).thenReturn(value); when(updater.getResourceManager()).thenReturn(resourceManager); try { updater.refreshVdsStats(); } catch (java.lang.Exception e) { verify(vdsManager).handleNetworkException(any(org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException.class), vds); verify(vdsManager).updateDynamicData(vds.getDynamicData()); } }

@org.junit.Test public void testGetPeers() throws javax.naming.AuthenticationException { java.util.Set<java.lang.String> peers = glusterUtil.getPeers(org.ovirt.engine.core.utils.gluster.GlusterUtilTest.SERVER_NAME1, org.ovirt.engine.core.utils.gluster.GlusterUtilTest.PASSWORD); assertNotNull(peers); assertTrue(peers.contains(org.ovirt.engine.core.utils.gluster.GlusterUtilTest.SERVER_NAME1)); assertTrue(peers.contains(org.ovirt.engine.core.utils.gluster.GlusterUtilTest.SERVER_NAME2)); }

@java.lang.Override public org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick.setId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("id"))); brick.setVolumeId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("volume_id"))); org.ovirt.engine.core.compat.Guid serverId = org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("server_id")); brick.setServerId(serverId); brick.setServerName(getHostNameOfServer(serverId)); brick.setBrickDirectory(rs.getString("brick_dir")); brick.setStatus(org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickStatus.valueOf(rs.getString("status"))); return brick; }
private void verifyCalls(boolean attachToAllClusters) { verify(backend).runInternalAction(eq(ActionType.AddNetwork), any(), any()); verify(networkHelper).createVnicProfile(any()); verify(backend).runInternalAction(eq(ActionType.AddVnicProfile), any(), any()); org.mockito.verification.VerificationMode expectedNumberOfCalls = (attachToAllClusters) ? times(1) : never(); verify(backend, expectedNumberOfCalls).runInternalQuery(eq(QueryType.GetClustersByStoragePoolId), any(), any()); verify(networkHelper, expectedNumberOfCalls).attachNetworkToClusters(eq(NETWORK_ID), any()); }

@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.ActivateStorageDomainCommand.getStorageDomainId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.STORAGE, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }

private void setDetailList() { vmGeneralModel.setIsAvailable(false); vmSnapshotListModel.setIsAvailable(false); vmMonitorModel.setIsAvailable(false); vmDiskListModel.setIsAvailable(false); vmInterfaceListModel.setIsAvailable(false); poolGeneralModel.setIsAvailable(false); poolDiskListModel.setIsAvailable(false); poolInterfaceListModel.setIsAvailable(false); permissionListModel.setIsAvailable(true); vmEventListModel.setIsAvailable(true); vmAppListModel.setIsAvailable(true); vmGuestInfoModel.setIsAvailable(true); vmGuestContainerListModel.setIsAvailable(true); java.util.List<org.ovirt.engine.ui.uicommonweb.models.HasEntity<?>> list = new java.util.ArrayList<>(); list.add(vmGeneralModel); list.add(poolGeneralModel); list.add(vmInterfaceListModel); list.add(poolInterfaceListModel); list.add(vmDiskListModel); list.add(poolDiskListModel); list.add(vmSnapshotListModel); list.add(permissionListModel); list.add(vmEventListModel); list.add(vmAppListModel); list.add(vmMonitorModel); list.add(vmGuestInfoModel); list.add(vmGuestContainerListModel); setDetailModels(((java.util.List) (list))); }

void updateHost() { if ((getDataCenter().getItems()) == null) { return; } if ((getSelectedItem()) == null) { return; } org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (getDataCenter().getSelectedItem())); if (((getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel) && ((dataCenter == null) || (dataCenter.getId().equals(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel.UnassignedDataCenterId)))) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> dataCenterList = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>) (getDataCenter().getItems())); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool> localDCList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>(); java.lang.StringBuilder dataCenterQueryLine = new java.lang.StringBuilder(); for (org.ovirt.engine.core.common.businessentities.StoragePool storagePool : dataCenterList) { if ((storagePool.getstorage_pool_type()) == (org.ovirt.engine.core.common.businessentities.StorageType.LOCALFS)) { localDCList.add(storagePool); } } if ((localDCList.size()) > 0) { int i = 0; for (; i < ((localDCList.size()) - 1); i++) { dataCenterQueryLine.append("datacenter=").append(localDCList.get(i).getname()).append(" or "); } dataCenterQueryLine.append("datacenter=").append(localDCList.get(i).getname()); org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.setContext(getHash()); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel storageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (model)); java.lang.Iterable<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue())); storageModel.postUpdateHost(hosts); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.Search, new org.ovirt.engine.core.common.queries.SearchParameters(("Hosts: status=Up " + (dataCenterQueryLine.toString())), org.ovirt.engine.core.common.interfaces.SearchType.VDS), _asyncQuery); } } else { if ((dataCenter == null) || (dataCenter.getId().equals(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel.UnassignedDataCenterId))) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getHostList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel storageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (target)); java.lang.Iterable<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((java.lang.Iterable<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); storageModel.postUpdateHost(hosts); } }, getHash())); } else { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getHostListByDataCenter(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel storageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (target)); java.lang.Iterable<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((java.lang.Iterable<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); storageModel.postUpdateHost(hosts); } }, getHash()), dataCenter.getId()); } } }
public org.ovirt.engine.api.model.Network get() { org.ovirt.engine.core.common.businessentities.network entity = parent.lookupNetwork(guid); if (entity == null) { return notFound(); } return addLinks(map(entity)); }
private void createNewGeoRepSession() { }
@java.lang.Override public org.ovirt.engine.core.common.vdscommands.VDSReturnValue get(long timeout, java.util.concurrent.TimeUnit unit) throws java.util.concurrent.TimeoutException { try { status = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(httpTask.get(timeout, unit)); org.ovirt.engine.core.vdsbroker.vdsbroker.FutureVDSCommand.proceedProxyReturnValue(); } catch (java.util.concurrent.TimeoutException e) { httpTask.cancel(true); org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException ex = new org.ovirt.engine.core.vdsbroker.vdsbroker.VDSNetworkException("Timeout during xml-rpc call"); ex.setVdsError(new org.ovirt.engine.core.common.errors.VDSError(org.ovirt.engine.core.common.errors.VdcBllErrors.VDS_NETWORK_ERROR, "Timeout during xml-rpc call")); setVdsRuntimeError(ex); log.error(("Timeout waiting for VDSM response. " + e)); throw e; } catch (java.lang.Exception e) { log.error(e); org.ovirt.engine.core.vdsbroker.vdsbroker.FutureVDSCommand.setVdsRuntimeError((e instanceof java.lang.RuntimeException ? ((java.lang.RuntimeException) (e)) : new java.lang.RuntimeException(e))); } return org.ovirt.engine.core.vdsbroker.vdsbroker.FutureVDSCommand.getVDSReturnValue(); }
@org.junit.Before public void setUp() throws java.lang.Exception { testServlet = new org.ovirt.engine.ui.frontend.server.gwt.BrandingServlet(); testServlet.init(); testServlet.setBrandingManager(mockBrandingManager); when(mockBrandingManager.getBrandingRootPath()).thenReturn(mockFile); when(mockFile.getAbsolutePath()).thenReturn("/abs/test"); when(mockRequest.getPathInfo()).thenReturn("/test/something.txt"); when(mockResponse.getOutputStream()).thenReturn(mockResponseOutputStream); java.io.File testFile = new java.io.File(this.getClass().getClassLoader().getResource("./org/ovirt/engine/ui/frontend/server/gwt/BrandingServletTest.class").getFile()); testFileEtag = testServlet.generateEtag(testFile); }
public void load(org.ovirt.engine.core.utils.EngineLocalConfig config) throws org.ovirt.engine.core.extensions.mgr.ConfigurationException { for (java.io.File directory : config.getExtensionsDirectories()) { load(directory); } activate(); }
@org.junit.Test public void oldHostDoesNotExist() { validator = new org.ovirt.engine.core.bll.validator.UpdateHostValidator(dbFacade, oldHost, null, false); assertThat(validator.hostExists(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.VDS_INVALID_SERVER_ID)); }

protected org.ovirt.engine.core.bll.ValidationResult networkNotUsed(java.util.List<? extends org.ovirt.engine.core.common.businessentities.Nameable> entities, org.ovirt.engine.core.common.errors.VdcBllMessages entitiesReplacementPlural, org.ovirt.engine.core.common.errors.VdcBllMessages entitiesReplacementSingular) { return new org.ovirt.engine.core.common.utils.PluralMessages().getNetworkInUse(getEntitiesNames(entities), entitiesReplacementSingular, entitiesReplacementPlural); }

@org.junit.Test public void passwordIsEmpty() { assertThat(validator.passwordNotEmpty(false, AuthenticationMethod.Password, null), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.VDS_CANNOT_INSTALL_EMPTY_PASSWORD)); }
public static void populateStorageUtilizationDomains(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.StorageDomainDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getStorageDomainUtilization(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addResource(entity); } }

@java.lang.Override protected boolean canDoAction() { boolean retVal = true; java.util.List<java.lang.String> canDoActionMessages = getReturnValue().getCanDoActionMessages(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage_domains> domainsMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage_domains>(); retVal = canDoAction_beforeCloneVm(canDoActionMessages, domainsMap); if (retVal && (getParameters().isImportAsNewEntity())) { initImportClonedVm(); } retVal = retVal && (canDoAction_afterCloneVm(canDoActionMessages, domainsMap)); if (!retVal) { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__IMPORT); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM); } return retVal; }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume = getGlusterVolume(); if (!(super.canDoAction())) { return false; } boolean isVolumeDistributed = glusterVolume.getVolumeType().isDistributedType(); if (!isVolumeDistributed) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_NOT_DISTRIBUTED); } else if ((glusterVolume.getBricks().size()) == 1) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_DISTRIBUTED_AND_HAS_SINGLE_BRICK); } org.ovirt.engine.core.bll.validator.gluster.GlusterBrickValidator brickValidator = new org.ovirt.engine.core.bll.validator.gluster.GlusterBrickValidator(); return validate(brickValidator.canRebalance(glusterVolume)); }
private int getResourceType(org.ovirt.engine.core.utils.ovf.xml.XmlNode node, java.lang.String resource) { if (((node.SelectSingleNode(resource, _xmlNS)) != null) && (!(org.apache.commons.lang.StringUtils.isEmpty(node.SelectSingleNode(resource, _xmlNS).innerText)))) { return java.lang.Integer.parseInt(node.SelectSingleNode(resource, _xmlNS).innerText); } return -1; }
protected java.util.List<org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.ValidationError> validateCustomProperties(org.ovirt.engine.core.common.businessentities.VmStatic vmStaticFromParams) { return org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.getInstance().validateVMProperties(org.ovirt.engine.core.bll.VmCommand.getVdsGroup().getcompatibility_version(), vmStaticFromParams); }


@java.lang.Override public org.ovirt.engine.core.common.businessentities.Role getByName(java.lang.String name) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("name", name); return getCallsHandler().executeRead("GetRoleByName", org.ovirt.engine.core.dao.RoleDAODbFacadeImpl.RolesRowMapper.instance, parameterSource); }
@org.junit.Test public void testVmLocked() { setUpGeneralValidations(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_IS_LOCKED)).when(vmValidator).vmNotLocked(); doReturn(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList()).when(cmd).getDisksList(); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_VM_IS_LOCKED.name())); }
@org.junit.Before public void setup() { validator = spy(new org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.UpdateNetworkValidator(network)); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__MANUAL_FENCE); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__HOST); }
public void appendCustomValue(final java.lang.String name, final java.lang.String value, final java.lang.String separator) { java.util.Objects.requireNonNull(separator, "It makes no sense having 'null' literal as separator"); final java.lang.String key = name.toLowerCase(); java.lang.String newValue = value; allocateCustomValues(); if (customValues.containsKey(key)) { newValue = java.lang.String.format("%1$s%2$s%3$s", customValues.get(key), separator, value); } customValues.put(name.toLowerCase(), newValue); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Host Hooks") java.lang.String hostHooksTitle();


@org.ovirt.engine.ui.common.DefaultMessage("Some of the changes will be applied only on the vm next start.") java.lang.String nextRunConfigurationExists();
@java.lang.Override protected boolean canDoAction() { if ((getDiskImage()) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_NOT_EXIST); } if (!(validate(new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(org.ovirt.engine.core.bll.ExportRepoImageCommand.getStorageDomain()).isDomainExistAndActive()))) { return false; } if (!(getDiskImage().getParentId().equals(Guid.Empty))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED); } for (org.ovirt.engine.core.common.businessentities.VM vm : org.ovirt.engine.core.bll.ExportRepoImageCommand.getVmDao().getVmsListForDisk(getDiskImage().getId(), false)) { if ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Down)) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_RUNNING); } } org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(java.util.Arrays.asList(getDiskImage())); if ((!(validate(diskImagesValidator.diskImagesNotIllegal()))) || (!(validate(diskImagesValidator.diskImagesNotLocked())))) { return false; } return true; }
public static void GetAllowClusterWithVirtGlusterEnabled(org.ovirt.engine.ui.frontend.AsyncQuery aQuery) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? source : java.lang.Boolean.TRUE; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.AllowClusterWithVirtGlusterEnabled, org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion()), aQuery); }
private org.ovirt.engine.core.common.vdscommands.VDSReturnValue runFenceAction(org.ovirt.engine.core.common.businessentities.FenceActionType actionType, org.ovirt.engine.core.common.businessentities.FenceAgentOrder order) { java.lang.String managementIp = getManagementIp(order); java.lang.String managementPort = getManagementPort(order); java.lang.String managementAgent = getManagementAgent(order); java.lang.String managementUser = getManagementUser(order); java.lang.String managementPassword = getManagementPassword(order); java.lang.String managementOptions = getManagementOptions(order); org.ovirt.engine.core.bll.FenceExecutor.log.infoFormat(("Executing <{0}> Power Management command, Proxy Host:{1}, " + "Agent:{2}, Target Host:{3}, Management IP:{4}, User:{5}, Options:{6}"), actionType, proxyHostName, managementAgent, _vds.getName(), managementIp, managementUser, managementOptions); return org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.FenceVds, new org.ovirt.engine.core.common.vdscommands.FenceVdsVDSCommandParameters(proxyHostId, _vds.getId(), managementIp, managementPort, managementAgent, managementUser, managementPassword, managementOptions, actionType)); }

private double calcDistributeMetric(org.ovirt.engine.core.bll.VDS vds, org.ovirt.engine.core.bll.VM vm) { int vcpu = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.VcpuConsumptionPercentage); int spmCpu = ((vds.getspm_status()) == (VdsSpmStatus.None)) ? 0 : org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.SpmVCpuConsumption); int hostCores = vds.getcpu_cores(); double hostCpu = vds.getusage_cpu_percent(); double pendingVcpus = vds.getpending_vcpus_count(); return (hostCpu / vcpu) + (((pendingVcpus + (vm.getNumOfCpus())) + spmCpu) / hostCores); }


public void getVmGuestAgentInterfacesByVmId(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid vmId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmGuestAgentInterface>(); } return source; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetVmGuestAgentInterfacesByVmId, new org.ovirt.engine.core.common.queries.IdQueryParameters(vmId), aQuery); }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { ((org.ovirt.engine.ui.common.widget.AddRemoveRowWidget<M, T, V>.AddRemoveRowPanel) (widget.getParent())).swapButton(createButton(item)); addGhostEntry(); onAdd(value, widget); }
public void addOrUpdateTaskInDB(final org.ovirt.engine.core.common.businessentities.AsyncTask asyncTask) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { if (!(asyncTask.getChildCmdEntity().getRootCommandId().equals(asyncTask.getChildCmdEntity().getId()))) { coco.persistCommand(asyncTask.getRootCmdEntity()); } coco.persistCommand(asyncTask.getChildCmdEntity()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getAsyncTaskDao().saveOrUpdate(asyncTask); return null; } }); }



@org.ovirt.engine.ui.webadmin.DefaultStringValue("Add") java.lang.String addIscsiBond();
@java.lang.Override protected void perform() { org.ovirt.engine.core.compat.Guid dumpDiskId = createMemoryDumpDisk(); org.ovirt.engine.core.compat.Guid metadataDiskId = createMemoryMetadataDisk(); org.ovirt.engine.core.common.businessentities.DiskImage dumpDisk = getDisk(dumpDiskId); org.ovirt.engine.core.common.businessentities.DiskImage metadataDisk = getDisk(metadataDiskId); org.ovirt.engine.core.bll.HibernateVmCommand.getSnapshotDAO().updateHibernationMemory(org.ovirt.engine.core.bll.HibernateVmCommand.getVmId(), org.ovirt.engine.core.bll.memory.MemoryUtils.createMemoryStateString(getStorageDomainId(), org.ovirt.engine.core.bll.HibernateVmCommand.getStoragePoolId(), dumpDisk.getId(), dumpDisk.getImageId(), metadataDisk.getId(), metadataDisk.getImageId())); org.ovirt.engine.core.bll.HibernateVmCommand.setSucceeded(true); }


private boolean validateNetworkInterfaces() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.VmNetworkInterface> interfaceNetworkMap = org.ovirt.engine.core.common.businessentities.Entities.interfacesByNetworkName(org.ovirt.engine.core.bll.RunVmCommand.getVm().getInterfaces()); java.util.Set<java.lang.String> interfaceNetworkNames = interfaceNetworkMap.keySet(); java.util.List<org.ovirt.engine.core.common.businessentities.network> clusterNetworks = org.ovirt.engine.core.bll.RunVmCommand.getNetworkDAO().getAllForCluster(org.ovirt.engine.core.bll.RunVmCommand.getVm().getvds_group_id()); java.util.Set<java.lang.String> clusterNetworksNames = org.ovirt.engine.core.common.businessentities.Entities.objectNames(clusterNetworks); return ((isVmInterfacesConfigured(interfaceNetworkMap)) && (isVmInterfacesAttachedToClusterNetworks(clusterNetworksNames, interfaceNetworkNames))) && (isVmInterfacesAttachedToVmNetworks(clusterNetworks, interfaceNetworkNames)); }
private org.ovirt.engine.core.common.businessentities.DiskImage createNotVirtIODisk() { org.ovirt.engine.core.common.businessentities.DiskImage disk = getDiskImage(); disk.setActive(true); disk.setDiskInterface(DiskInterface.IDE); doReturn(diskDao).when(command).getDiskDao(); when(diskDao.get(diskImageGuid)).thenReturn(disk); return disk; }
public boolean Validate() { getNetwork().ValidateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getBond().ValidateSelectedItem(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation() }); getAddress().setIsValid(true); getSubnet().setIsValid(true); getGateway().setIsValid(true); if (getIsStaticAddress()) { getAddress().ValidateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.IpAddressValidation() }); getSubnet().ValidateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.SubnetMaskValidation() }); getGateway().ValidateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.NotEmptyValidation(), new org.ovirt.engine.ui.uicommonweb.validation.IpAddressValidation() }); } return ((((getBond().getIsValid()) && (getNetwork().getIsValid())) && (getAddress().getIsValid())) && (getSubnet().getIsValid())) && (getGateway().getIsValid()); }
public static void setGatewayIfNecessary(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.VDS host, java.lang.String gateway) { final org.ovirt.engine.core.bll.network.cluster.ManagementNetworkUtil managementNetworkUtil = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.getManagementNetworkUtil(); if (((org.ovirt.engine.core.common.FeatureSupported.multipleGatewaysSupported(host.getClusterCompatibilityVersion())) || (managementNetworkUtil.isManagementNetwork(iface.getNetworkName(), host.getClusterId()))) || (iface.getName().equals(host.getActiveNic()))) { iface.setIpv4Gateway(gateway); } }
public static java.util.List<java.lang.String> runAndAssertCanDoActionFailure(org.ovirt.engine.core.bll.CommandBase<?> command, org.ovirt.engine.core.dal.VdcBllMessages message) { boolean canDoAction = command.canDoAction(); java.util.List<java.lang.String> canDoActionMessages = command.getReturnValue().getCanDoActionMessages(); assertFalse("Command''s canDoAction expected to fail but succeed", canDoAction); assertTrue(java.text.MessageFormat.format("canDoAction messages doesn''t contain expected message: {0}, messages are: {1}", message.name(), canDoActionMessages), canDoActionMessages.contains(message.name())); return canDoActionMessages; }
private org.ovirt.engine.core.bll.ValidationResult networkNotUsedByHost() { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostsWithNetwork = org.ovirt.engine.core.bll.network.dc.UpdateNetworkCommand.getVdsDAO().getAllForNetwork(getOldNetwork().getId()); if (hostsWithNetwork.isEmpty()) { return org.ovirt.engine.core.bll.ValidationResult.VALID; } return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_IN_USE_BY_HOSTS, org.ovirt.engine.core.utils.ReplacementUtils.replaceWithNameable("HOSTS_USING_NETWORK", hostsWithNetwork)); }


private void updateActionAvailability() { org.ovirt.engine.core.common.businessentities.storage.Disk disk = getSelectedItem(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.Disk> disks = ((getSelectedItems()) != null) ? ((java.util.ArrayList) (getSelectedItems())) : null; boolean shouldAllowEdit = true; if (disk != null) { shouldAllowEdit = (!(disk.isOvfStore())) && (!(((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.IMAGE)) && ((((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)).getImageStatus()) == (org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED)))); } getNewCommand().setIsExecutionAllowed(true); getEditCommand().setIsExecutionAllowed(((((disk != null) && (disks != null)) && ((disks.size()) == 1)) && shouldAllowEdit)); getRemoveCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isRemoveCommandAvailable()))); getScanAlignmentCommand().setIsExecutionAllowed((((disks != null) && ((disks.size()) > 0)) && (isScanAlignmentCommandAvailable()))); getExportCommand().setIsExecutionAllowed(isExportCommandAvailable()); updateCopyAndMoveCommandAvailability(disks); org.ovirt.engine.ui.uicommonweb.models.quota.ChangeQuotaModel.updateChangeQuotaActionAvailability(((getItems()) != null ? ((java.util.List) (getItems())) : null), ((getSelectedItems()) != null ? ((java.util.List) (getSelectedItems())) : null), getSystemTreeSelectedItem(), getChangeQuotaCommand()); }

@java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { final org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void> vmListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>) (result.getState())); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result.getReturnValue(); if ((returnValueBase != null) && (returnValueBase.getSucceeded())) { org.ovirt.engine.core.common.businessentities.VM vm = vmListModel.getcurrentVm(); org.ovirt.engine.core.common.action.VmManagementParametersBase updateVmParams = vmListModel.getUpdateVmParameters(applyCpuChangesLater); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UpdateVm, updateVmParams, new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModelNetworkAsyncCallback(model, defaultNetworkCreatingManager, vm.getId()), vmListModel); } else { vmListModel.getWindow().stopProgress(); } }


private void localize(org.ovirt.engine.ui.webadmin.ApplicationConstants constants, org.ovirt.engine.ui.webadmin.ApplicationMessages messages) { bricks.setLabel(constants.selectBrickToViewFopStats()); nfsServers.setLabel(constants.selectServerToViewFopStats()); bricksTab.setLabel(constants.volumeProfileBricksTab()); nfsTab.setLabel(constants.volumeProfileNfsTab()); bricksErrorLabel.setText(constants.brickProfileErrorMessage()); nfsErrorLabel.setText(constants.nfsProfileErrorMessage()); }
@java.lang.Override public java.lang.Object runInTransaction() { final org.ovirt.engine.core.common.businessentities.StorageDomainType sdType = getStorageDomain().getStorageDomainType(); map.setstatus(StorageDomainStatus.Maintenance); getStoragePoolIsoMapDAO().updateStatus(map.getId(), map.getstatus()); if (sdType == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master)) { calcStoragePoolStatusByDomainsStatus(); } if ((sdType == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Data)) || (sdType == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) { final org.ovirt.engine.core.common.businessentities.StorageDomainStatic domain = getStorageDomain().getStorageStaticData(); final org.ovirt.engine.core.common.businessentities.StorageFormatType targetFormat = getStoragePool().getStoragePoolFormatType(); if ((domain.getStorageFormat()) != targetFormat) { log.infoFormat("Updating storage domain {0} (type {1}) to format {2}", getStorageDomain().getId(), sdType, targetFormat); domain.setStorageFormat(targetFormat); getStorageDomainStaticDAO().update(domain); } } return null; }

public org.ovirt.engine.core.common.businessentities.StorageDomain getStorage() { return privateStorage; }
@java.lang.Override public org.ovirt.engine.core.common.job.Job mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.job.Job job = new org.ovirt.engine.core.common.job.Job(); job.setId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("job_id"))); job.setActionType(org.ovirt.engine.core.common.action.VdcActionType.valueOf(rs.getString("action_type"))); job.setDescription(rs.getString("description")); job.setStatus(org.ovirt.engine.core.common.job.JobExecutionStatus.valueOf(rs.getString("status"))); job.setOwnerId(org.ovirt.engine.core.compat.NGuid.createGuidFromString(rs.getString("owner_id"))); job.setVisible(rs.getBoolean("visible")); job.setStartTime(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.fromDate(rs.getTimestamp("start_time"))); job.setEndTime(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.fromDate(rs.getTimestamp("end_time"))); job.setLastUpdateTime(org.ovirt.engine.core.dal.dbbroker.DbFacadeUtils.fromDate(rs.getTimestamp("last_update_time"))); job.setCorrelationId(rs.getString("correlation_id")); return job; }

@java.lang.Override protected boolean canDoAction() { if (((getParameters()) == null) || ((getParameters().getQuotaId()) == null)) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } org.ovirt.engine.core.common.businessentities.Quota quota = getQuota(); if (quota == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_NOT_EXIST); return false; } if ((!(QuotaEnforcementTypeEnum.DISABLED.equals(quota.getQuotaEnforcementType()))) && (getQuotaDao().isQuotaInUse(quota))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_QUOTA_IN_USE_BY_VM_OR_DISK); return false; } return true; }
protected boolean isConnWithSameDetailsExists(org.ovirt.engine.core.common.businessentities.StorageServerConnections connection, org.ovirt.engine.core.compat.Guid storagePoolId) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections = null; if ((connection.getstorage_type()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.LOCALFS)) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connectionsForPool = (storagePoolId == null) ? java.util.Collections.<org.ovirt.engine.core.common.businessentities.StorageServerConnections>emptyList() : getStorageConnDao().getAllConnectableStorageSeverConnection(storagePoolId); java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connectionsForPath = getStorageConnDao().getAllForStorage(connection.getconnection()); connections = ((java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections>) (org.apache.commons.collections.CollectionUtils.intersection(connectionsForPool, connectionsForPath))); } else if (connection.getstorage_type().isFileDomain()) { java.lang.String connectionField = connection.getconnection(); connections = getStorageConnDao().getAllForStorage(connectionField); } else { org.ovirt.engine.core.common.businessentities.StorageServerConnections sameConnection = findConnectionWithSameDetails(connection); connections = (sameConnection != null) ? java.util.Arrays.asList(sameConnection) : java.util.Collections.<org.ovirt.engine.core.common.businessentities.StorageServerConnections>emptyList(); } boolean isDuplicateConnExists = ((connections.size()) > 1) || (((connections.size()) == 1) && (!(connections.get(0).getid().equalsIgnoreCase(connection.getid())))); return isDuplicateConnExists; }

protected void bindResourceConfiguration(java.lang.Class<? extends org.ovirt.engine.ui.common.CommonApplicationConstants> constants, java.lang.Class<? extends org.ovirt.engine.ui.common.CommonApplicationMessages> messages, java.lang.Class<? extends org.ovirt.engine.ui.common.CommonApplicationResources> resources, java.lang.Class<? extends org.ovirt.engine.ui.common.CommonApplicationTemplates> templates, java.lang.Class<? extends org.ovirt.engine.ui.common.utils.DynamicConstants> dynamicConstants) { bind(org.ovirt.engine.ui.common.CommonApplicationConstants.class).to(constants).in(com.google.inject.Singleton.class); bind(org.ovirt.engine.ui.common.CommonApplicationMessages.class).to(messages).in(com.google.inject.Singleton.class); bind(org.ovirt.engine.ui.common.CommonApplicationResources.class).to(resources).in(com.google.inject.Singleton.class); bind(org.ovirt.engine.ui.common.CommonApplicationTemplates.class).to(templates).in(com.google.inject.Singleton.class); bind(org.ovirt.engine.ui.common.utils.DynamicConstants.class).to(dynamicConstants).in(com.google.inject.Singleton.class); }


protected org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> createVmFromTemplateCommand(org.ovirt.engine.core.common.businessentities.VM vm) { org.ovirt.engine.core.common.action.AddVmParameters param = new org.ovirt.engine.core.common.action.AddVmParameters(); param.setVm(vm); org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> concrete = new org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters>(param) { @java.lang.Override protected void initUser() { } @java.lang.Override protected void initTemplateDisks() { } @java.lang.Override protected void initStoragePoolId() { } @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmTemplate getVmTemplate() { return createVmTemplate(); } }; org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> result = spy(concrete); doReturn(true).when(result).checkNumberOfMonitors(); doReturn(createVmTemplate()).when(result).getVmTemplate(); doReturn(true).when(result).validateCustomProperties(any(org.ovirt.engine.core.common.businessentities.VmStatic.class), any(java.util.ArrayList.class)); mockDaos(result); mockBackend(result); org.ovirt.engine.core.bll.AddVmCommandTest.initCommandMethods(result); result.postConstruct(); return result; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.network.NetworkQoS flush() { super.flush(); networkQoS.setName(((java.lang.String) (getName().getEntity()))); networkQoS.setStoragePoolId(((org.ovirt.engine.core.common.businessentities.StoragePool) (getDataCenters().getSelectedItem())).getId()); return networkQoS; }
private void hidePoolSpecificFields() { numOfVmsEditor.setVisible(false); newPoolEditVmsPanel.setVisible(false); editPoolEditVmsPanel.setVisible(false); editPoolIncraseNumOfVmsPanel.setVisible(false); }

@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_pool> storagePools = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_pool>) (returnValue)); org.ovirt.engine.core.common.businessentities.storage_pool storagePool = ((storagePools.size()) > 0) ? storagePools.get(0) : null; vmListModel.PostGetTemplatesNotPresentOnExportDomain(storagePool); }
@java.lang.Override public boolean performNextOperation(int completedChildCount) { if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_PLACEHOLDER_CREATION)) { updateStage(LiveDiskMigrateStage.VM_REPLICATE_DISK_START); replicateDiskStart(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_START); syncImageData(); updateStage(LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END); return true; } if ((org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getLiveDiskMigrateStage()) == (org.ovirt.engine.core.common.action.LiveMigrateDiskParameters.LiveDiskMigrateStage.IMAGE_DATA_SYNC_EXEC_END)) { updateStage(LiveDiskMigrateStage.VM_REPLICATE_DISK_FINISH); completeLiveMigration(); updateStage(LiveDiskMigrateStage.SOURCE_IMAGE_DELETION); org.ovirt.engine.core.bll.storage.lsm.LiveStorageMigrationHelper.removeImage(this, org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getSourceStorageDomainId(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.storage.lsm.LiveMigrateDiskCommand.getParameters().getDestinationImageId(), AuditLogType.USER_MOVE_IMAGE_GROUP_FAILED_TO_DELETE_SRC_IMAGE); return false; } return false; }

@java.lang.Override public java.lang.String getDefaultTitle() { return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.constants.bootableDisk(); }

@java.lang.Override protected void logToAudit() { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase auditLogableBase = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(vds.getId()); auditLogableBase.setVds(vds); auditLogableBase.addCustomValue("message", org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerCommand.getReturnStatus().message); auditLogDirector.log(auditLogableBase, AuditLogType.VDS_BROKER_COMMAND_FAILURE); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.BusinessEntitySnapshot entitySnapshot) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("command_id", entitySnapshot.getCommandId()).addValue("command_type", entitySnapshot.getCommandType()).addValue("entity_id", entitySnapshot.getEntityId()).addValue("entity_type", entitySnapshot.getEntityType()).addValue("entity_snapshot", entitySnapshot.getEntitySnapshot()).addValue("snapshot_class", entitySnapshot.getSnapshotClass()).addValue("snapshot_type", entitySnapshot.getSnapshotType()).addValue("insertion_order", entitySnapshot.getInsertionOrder()); getCallsHandler().executeModification("insert_entity_snapshot", parameterSource); }
private boolean isStorageFormatSupportedByStoragePool() { org.ovirt.engine.core.common.businessentities.StorageFormatType storageFormat = org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getStorageDomain().getStorageFormat(); org.ovirt.engine.core.common.businessentities.StoragePool targetStoragePool = getTargetStoragePool(); if (targetStoragePool == null) { return true; } java.util.Set<org.ovirt.engine.core.common.businessentities.StorageFormatType> supportedStorageFormats = getSupportedStorageFormatSet(targetStoragePool.getcompatibility_version()); return supportedStorageFormats.contains(storageFormat); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotSchedule fetchedSchedule = getGlusterVolumeSnapshotScheduleDao().getByVolumeId(getGlusterVolumeId()); if (fetchedSchedule != null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_ALREADY_SCHEDULED); } if (!(getParameters().getForce())) { if (((getGlusterVolumeDao().getByName(getVdsGroupId(), org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.GlusterMetaVolumeName))) != null) && (getVdsGroup().isGlusterCliBasedSchedulingOn())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_CLI_SCHEDULING_ENABLED); } } return true; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Reset All") java.lang.String resetAllVolume();


@java.lang.Override protected void EndWithFailure() { setVm(null); org.ovirt.engine.core.common.businessentities.VM vmFromParams = getParameters().getVm(); if ((getVm()) != null) { org.ovirt.engine.core.bll.VmHandler.UnLockVm(getVm().getId()); for (org.ovirt.engine.core.common.businessentities.DiskImage disk : imageList) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskImageDynamicDAO().remove(disk.getImageId()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getImageDao().remove(disk.getImageId()); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> imagesForDisk = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskImageDAO().getAllSnapshotsForImageGroup(disk.getId()); if ((imagesForDisk == null) || (imagesForDisk.isEmpty())) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getBaseDiskDao().remove(disk.getId()); } } RemoveVmNetwork(); new org.ovirt.engine.core.bll.snapshots.SnapshotsManager().removeSnapshots(getVm().getId()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDynamicDAO().remove(getVmId()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStatisticsDAO().remove(getVmId()); new org.ovirt.engine.core.bll.snapshots.SnapshotsManager().removeSnapshots(getVmId()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmStaticDAO().remove(getVmId()); setSucceeded(true); } else { setVm(vmFromParams); getReturnValue().setEndActionTryAgain(false); } }
public void initStorageDomains() { if ((getModel().getDisks()) == null) { return; } org.ovirt.engine.core.common.businessentities.VmTemplate template = getModel().getTemplate().getSelectedItem(); if ((template != null) && (!(template.getId().equals(Guid.Empty)))) { postInitStorageDomains(); } else { getModel().getStorageDomain().setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>()); getModel().getStorageDomain().setSelectedItem(null); getModel().getStorageDomain().setIsChangable(false); } }
@java.lang.Override public java.lang.Object convert(java.lang.Object returnValue, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> clusterNetworks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>) (asyncQuery.getModel())); this.clusterNetworks = clusterNetworks; java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView> vnicProfiles = new java.util.ArrayList<>(); vnicProfiles.add(VnicProfileView.EMPTY); if (returnValue == null) { return vnicProfiles; } for (org.ovirt.engine.core.common.businessentities.network.VnicProfileView vnicProfile : ((java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>) (returnValue))) { org.ovirt.engine.core.common.businessentities.network.Network network = findNetworkById(vnicProfile.getNetworkId()); if ((network != null) && (network.isVmNetwork())) { vnicProfiles.add(vnicProfile); } } java.util.Collections.sort(vnicProfiles, new org.ovirt.engine.ui.uicommonweb.Linq.VnicProfileViewComparator()); return vnicProfiles; }
private void checkVmName(boolean isImportAsNewEntity, java.lang.String name) { org.ovirt.engine.core.common.action.ImportVmParameters parameters = createParameters(); parameters.getVm().setName(name); parameters.setImportAsNewEntity(isImportAsNewEntity); org.ovirt.engine.core.bll.exportimport.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> command = new org.ovirt.engine.core.bll.exportimport.ImportVmCommandTest.ImportVmCommandStub(parameters, poolPerCluster, externalVmMacsFinder); command.init(); java.util.Set<javax.validation.ConstraintViolation<org.ovirt.engine.core.common.action.ImportVmParameters>> validate = org.ovirt.engine.core.common.utils.ValidationUtils.getValidator().validate(parameters, command.getValidationGroups().toArray(new java.lang.Class<?>[0])); assertEquals(validate.isEmpty(), (!isImportAsNewEntity)); }


public void setUsePatternFly(boolean use) { keyField.setUsePatternFly(use); valueField.setUsePatternFly(use); valuesField.setUsePatternFly(use); }
private void migrate() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getSelectedItem())); if (vm == null) { return; } if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().migrateVirtualMachinesTitle()); model.setHashName("migrate_virtual_machine"); model.setVmsOnSameCluster(true); model.setIsAutoSelect(true); model.setVmList(org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.VM>cast(getSelectedItems())); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getUpHostListByCluster(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel vmListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel) (target)); vmListModel.postMigrateGetUpHosts(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue))); } }), vm.getVdsGroupName()); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Name can contain only 'A-Z', 'a-z', '0-9', '_' or '-' characters.") java.lang.String asciiNameValidationMsg();

@org.junit.Test public void networkDoesntExist() { simulateVdsGroupExists(); assertCanDoActionFailure(VdcBllMessages.NETWORK_NOT_EXISTS.toString()); }
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> vms = org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.VM>cast(((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.IVdcQueryable>) (source))); return vms; }
public static void deserialize(com.google.gwt.user.client.rpc.SerializationStreamReader streamReader, org.ovirt.engine.core.common.queries.VdcQueryReturnValue instance) throws com.google.gwt.user.client.rpc.SerializationException { instance.setSucceeded(streamReader.readBoolean()); instance.setExceptionString(streamReader.readString()); java.lang.String type = streamReader.readString(); java.lang.Object returnValue; java.lang.String deserializedAs = null; if (type == null) { returnValue = null; } else if (type.equals("java.lang.String")) { deserializedAs = "java.util.String"; instance.setReturnValue(streamReader.readString()); } else if (type.equals("java.lang.Integer")) { deserializedAs = "java.lang.Integer"; instance.setReturnValue(streamReader.readInt()); } else if (type.equals("java.lang.Boolean")) { deserializedAs = "java.lang.Boolean"; instance.setReturnValue(streamReader.readBoolean()); } else if (type.equals("java.lang.Double")) { deserializedAs = "java.lang.Double"; instance.setReturnValue(streamReader.readDouble()); } else if (type.equals("java.lang.Float")) { deserializedAs = "java.lang.Float"; instance.setReturnValue(streamReader.readFloat()); } else if (type.equals("java.lang.Character")) { deserializedAs = "java.lang.Character"; instance.setReturnValue(streamReader.readChar()); } else if (type.equals("java.lang.Short")) { deserializedAs = "java.lang.Short"; instance.setReturnValue(streamReader.readShort()); } else if (type.equals("java.lang.Byte")) { deserializedAs = "java.lang.Byte"; instance.setReturnValue(streamReader.readByte()); } else if (type.equals("java.util.List")) { deserializedAs = "java.util.List"; instance.setReturnValue(streamReader.readObject()); } else if (type.equals("java.util.Map")) { deserializedAs = "java.util.Map"; instance.setReturnValue(streamReader.readObject()); } else if (type.equals("java.util.Set")) { deserializedAs = "java.util.Set"; instance.setReturnValue(streamReader.readObject()); } else if (type.equals("IVdcQueryable")) { deserializedAs = "IVdcQueryable"; instance.setReturnValue(streamReader.readObject()); } else if (type.equals("UNKNOWN")) { deserializedAs = "UNKNOWN"; instance.setReturnValue(streamReader.readObject()); } }
public void subscribe(org.ovirt.vdsm.jsonrpc.client.events.EventSubscriber subscriber) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorFactory.getWorker().getPublisher().subscribe(subscriber); }


@java.lang.Override public int hashCode() { return java.util.Objects.hash(super.hashCode(), sysPrepDomainName, sysPrepUserName, sysPrepPassword, vmInit, destinationVdsId, customEmulatedMachine, customCpuName); }
private void parseSecondArgWithKeyValue(java.lang.String arg, java.lang.String key, java.lang.String value) { if (getConfigAction().equals(ConfigActionType.ACTION_SET)) { engineConfigMap.setKey(key); engineConfigMap.setValue(value); } else { org.ovirt.engine.core.config.EngineConfigCLIParser.log.debug((("parseArguments error: second argument '" + arg) + "' has an '=' char but action is not 'set'.")); throw new java.lang.IllegalArgumentException((("Illegal second argument: " + arg) + ".")); } }
public void remove() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeBookmarksTitle()); model.setHashName("remove_bookmark"); model.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().bookmarsMsg()); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (java.lang.Object item : getSelectedItems()) { org.ovirt.engine.core.common.businessentities.bookmarks i = ((org.ovirt.engine.core.common.businessentities.bookmarks) (item)); list.add(i.getbookmark_name()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnRemove", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
@java.lang.Override public void setItems(java.lang.Iterable value) { if ((items) != value) { itemsChanging(value, items); items = value; getItemsChangedEvent().raise(this, EventArgs.Empty); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("Items")); org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel selectedItem = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (getSelectedItem())); if (((items) != null) && (selectedItem != null)) { for (java.lang.Object object : items) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel itemModel = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalItemModel) (object)); if (itemModel.getEntity().equals(selectedItem.getEntity())) { this.selectedItem = itemModel; break; } } } onSelectedItemChanged(); } }
@java.lang.Override public org.ovirt.engine.core.bll.ValidationResult call() { final org.ovirt.engine.core.common.businessentities.storage.CinderDisk disk = cinderDisks.iterator().next(); org.ovirt.engine.core.bll.provider.storage.OpenStackVolumeProviderProxy proxy = diskProxyMap.get(disk.getId()); java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType> volumeTypes = proxy.getVolumeTypes(); boolean volumeTypeExists = org.apache.commons.collections.CollectionUtils.exists(volumeTypes, new org.apache.commons.collections.Predicate() { @java.lang.Override public boolean evaluate(java.lang.Object o) { return ((org.ovirt.engine.core.common.businessentities.storage.CinderVolumeType) (o)).getName().equals(disk.getCinderVolumeType()); } }); if (!volumeTypeExists) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.CINDER_VOLUME_TYPE_NOT_EXISTS, java.lang.String.format("$cinderVolumeType %s", disk.getCinderVolumeType())); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public org.ovirt.engine.core.compat.Guid getQuotaId() { return null; }
@org.junit.Test public void migrationNotSupported() { when(cluster.getCompatibilityVersion()).thenReturn(mock(org.ovirt.engine.core.compat.Version.class)); validator = spy(new org.ovirt.engine.core.bll.validator.ClusterValidator(dbFacade, cluster)); doReturn(false).when(validator).migrationSupportedForArch(any(org.ovirt.engine.core.common.businessentities.ArchitectureType.class)); assertThat(validator.migrationSupported(org.ovirt.engine.core.utils.RandomUtils.instance().nextEnum(org.ovirt.engine.core.common.businessentities.ArchitectureType.class)), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.MIGRATION_ON_ERROR_IS_NOT_SUPPORTED)); }
private boolean isRunningConfigurationNeeded() { return ((org.ovirt.engine.core.bll.UpdateVmCommand.getVm().isNextRunConfigurationExists()) || (!(org.ovirt.engine.core.bll.VmHandler.isUpdateValid(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus(), isHotSetEnabled())))) || (!(org.ovirt.engine.core.bll.VmHandler.isUpdateValidForVmDevices(getVmId(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters()))); }
@org.junit.Test public void testLogoffAsync_success() { java.lang.Object model = new java.lang.Object(); when(mockAsyncQuery.getModel()).thenReturn(model); org.ovirt.engine.core.common.users.VdcUser testUser = new org.ovirt.engine.core.common.users.VdcUser(); testUser.setUserName("testUser"); testUser.setPassword("testpassword"); org.ovirt.engine.ui.frontend.Frontend.LogoffAsync(testUser, mockAsyncQuery, mockService); verify(mockService).logOff(eq(testUser), callbackAction.capture()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = new org.ovirt.engine.core.common.action.VdcReturnValueBase(); callbackAction.getValue().onSuccess(returnValue); verify(mockAsyncCallback).onSuccess(model, returnValue); verify(mockLoginHandler).onLogout(); }
@java.lang.Override protected void syncSearch() { super.syncSearch(); if (getIsQueryFirstTime()) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllPolicyUnits, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyListModel clusterPolicyListModel = ((org.ovirt.engine.ui.uicommonweb.models.configure.scheduling.ClusterPolicyListModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> list = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); clusterPolicyListModel.setPolicyUnits(list); clusterPolicyListModel.fetchClusterPolicies(); if ((policyUnitModel) != null) { policyUnitModel.getPolicyUnits().setItems(sort(policyUnits)); } } })); } else { fetchClusterPolicies(); } }
@java.lang.Override protected java.util.List<java.lang.Class<?>> getValidationGroups() { org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.addValidationGroup(org.ovirt.engine.core.common.validation.group.CreateEntity.class); return super.getValidationGroups(); }

@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.InstallModel model) { driver.edit(model); rbPublicKey.setValue(true); model.setAuthenticationMethod(AuthenticationMethod.PublicKey); displayPassPkWindow(false); rbPassword.addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { model.setAuthenticationMethod(AuthenticationMethod.Password); displayPassPkWindow(true); } }); rbPublicKey.addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { model.setAuthenticationMethod(AuthenticationMethod.PublicKey); displayPassPkWindow(false); } }); userNameEditor.setEnabled(false); }


@org.junit.Before public void setUp() throws java.lang.Exception { injectorRule.bind(org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.class, mock(org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.class)); existingSnapshot = createSnapshot(existingSnapshotId); existingVm = createVm(existingVmId); existingSnapshot.setVmConfiguration(org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelperTest.EXISTING_VM_NAME); existingDiskImage = createDiskImage(existingImageId, existingImageGroupId); snapshotVmConfigurationHelper = spy(new org.ovirt.engine.core.bll.snapshots.SnapshotVmConfigurationHelper()); snapshotsManager = mock(org.ovirt.engine.core.bll.snapshots.SnapshotsManager.class); when(snapshotVmConfigurationHelper.getSnapshotManager()).thenReturn(snapshotsManager); setUpDaoMocks(); }

java.lang.String getFullPath(final java.lang.String path) { java.lang.String result = null; if ((path != null) && (org.ovirt.engine.core.utils.servlet.ServletUtils.isSane(path))) { result = (brandingManager.getBrandingRootPath().getAbsolutePath()) + path; } else { org.ovirt.engine.ui.frontend.server.gwt.BrandingServlet.log.error((("The path \"" + path) + "\" is not sane")); } return result; }

@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { if (result != null) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (result)).getReturnValue())); if (vm == null) { return; } org.ovirt.engine.ui.uicommonweb.models.pools.PoolDiskListModel poolDiskListModel = ((org.ovirt.engine.ui.uicommonweb.models.pools.PoolDiskListModel) (model)); poolDiskListModel.setVM(vm); poolDiskListModel.syncSearch(); } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("The Export Domain is inactive. Data can be retrieved only when the Domain is activated") java.lang.String theExportDomainIsInactiveMsg();
@org.junit.Before public void setup() { initVdsGroup(); initMocks(); arem = new org.ovirt.engine.core.bll.scheduling.AffinityRulesEnforcementManager() { @java.lang.Override public void wakeup() { this.auditLogDirector = _auditLogDirector; this.vdsDao = _vdsDao; this.vdsGroupDao = _vdsGroupDao; doReturn(new org.ovirt.engine.core.bll.scheduling.AffinityRulesEnforcementManagerTest.TestingAffinityRulesEnforcementPerCluster()).when(_perClusterProvider).get(); this.perClusterProvider = _perClusterProvider; super.wakeup(); addInjectionsToPerClusterObjects(); } @java.lang.Override public void refresh() { addInjectionsToPerClusterObjects(); super.refresh(); } private void addInjectionsToPerClusterObjects() { for (java.util.Map.Entry<org.ovirt.engine.core.common.businessentities.VDSGroup, org.ovirt.engine.core.bll.scheduling.arem.AffinityRulesEnforcementPerCluster> entry : arem.perClusterMap.entrySet()) { org.ovirt.engine.core.bll.scheduling.arem.AffinityRulesEnforcementPerCluster perCluster = perClusterProvider.get(); perCluster.setClusterId(entry.getKey().getId()); perCluster.setSchedulingManager(schedulingManager); entry.setValue(perCluster); } } @java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> getClusters() { java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> vdsGroups = new java.util.ArrayList<>(); vdsGroups.add(cluster); return vdsGroups; } @java.lang.Override protected org.ovirt.engine.core.common.action.VdcReturnValueBase executeMigration(org.ovirt.engine.core.common.action.MigrateVmParameters parameters) { return null; } }; arem.wakeup(); arem.refresh(); for (org.ovirt.engine.core.bll.scheduling.arem.AffinityRulesEnforcementPerCluster perCluster : arem.perClusterMap.values()) { perCluster.wakeup(); } }
@java.lang.Override protected org.ovirt.engine.ui.uicommonweb.UICommand resolveCommand() { return sharedMacPoolModelProvider.getModel().getRemoveCommand(); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__UPDATE); addCanDoActionMessage(EngineMessage.VAR__TYPE__PROVIDER); }

private static boolean canPlugInterface(org.ovirt.engine.core.common.businessentities.network.VmNic iface, org.ovirt.engine.core.compat.Guid vdsGroupId) { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = org.ovirt.engine.core.bll.utils.VmDeviceUtils.dbFacade.getVdsGroupDao().get(vdsGroupId); org.ovirt.engine.core.compat.Guid dataCenterId = (vdsGroup == null) ? null : vdsGroup.getStoragePoolId(); java.lang.String macAddress = iface.getMacAddress(); boolean canPlugInterface = org.ovirt.engine.core.bll.utils.VmDeviceUtils.canPlugInterfaceInDc(macAddress, dataCenterId); if (!canPlugInterface) { new org.ovirt.engine.core.bll.network.VmInterfaceManager().auditLogMacInUseUnplug(iface); } return canPlugInterface; }



@org.junit.Test public void testGetAllForClusterFilteredWithPermissionsNoPermissionsAndNoFilter() { java.util.List<org.ovirt.engine.core.common.businessentities.network> result = dao.getAllForCluster(cluster, org.ovirt.engine.core.dao.UNPRIVILEGED_USER_ID, false); org.ovirt.engine.core.dao.NetworkDAOTest.assertGetAllForClusterResult(result); }

@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> getAllVmNumaNodeByVdsNumaNodeId(org.ovirt.engine.core.compat.Guid vdsNumaNodeId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_numa_node_id", vdsNumaNodeId); java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = getCallsHandler().executeReadList("GetVmNumaNodeByVdsNumaNodeId", org.ovirt.engine.core.dao.VmNumaNodeDAODbFacadeImpl.vmNumaNodeRowMapper, parameterSource); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<java.lang.Integer>> numaNodesCpusMap = getAllNumaNodeCpuMap(); java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer>>>> vmNumaNodesPinMap = getAllVmNumaNodePinInfo(); for (org.ovirt.engine.core.common.businessentities.VmNumaNode node : vmNumaNodes) { if (numaNodesCpusMap.containsKey(node.getId())) { node.setCpuIds(numaNodesCpusMap.get(node.getId())); } if (vmNumaNodesPinMap.containsKey(node.getId())) { node.setVdsNumaNodeList(vmNumaNodesPinMap.get(node.getId())); } } return vmNumaNodes; }
@java.lang.Override public javax.ws.rs.core.Response doImport(org.ovirt.engine.api.model.Action action) { validateParameters(action, "cluster.id|name", "storageDomain.id|name"); org.ovirt.engine.core.compat.Guid destStorageDomainId = getDestStorageDomainId(action); org.ovirt.engine.core.common.action.ImportVmParameters params = new org.ovirt.engine.core.common.action.ImportVmParameters(getEntity(), parent.getStorageDomainId(), destStorageDomainId, parent.getDataCenterId(destStorageDomainId), getClusterId(action)); params.setImageToDestinationDomainMap(getDiskToDestinationMap(action)); params.setForceOverride((action.isSetExclusive() ? action.isExclusive() : false)); if (((action.isSetVm()) && (action.getVm().isSetSnapshots())) && (action.getVm().getSnapshots().isSetCollapseSnapshots())) { params.setCopyCollapse(action.getVm().getSnapshots().isCollapseSnapshots()); } if (action.isSetClone()) { params.setImportAsNewEntity(action.isClone()); if ((action.isSetVm()) && (action.getVm().isSetName())) { params.getVm().setName(action.getVm().getName()); } } return doAction(VdcActionType.ImportVm, params, action); }
@org.junit.Test public void encodeDecodeWithNonAsciiDiskAlias() throws java.lang.Exception { disk.setDiskAlias("áéíñ"); disk.setDiskDescription("DiskDescription"); assertDiskDescriptionMap(disk, org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.generateDiskAliasJsonEntry(org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.encodeString("áéíñ")), org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.generateDiskDescriptionJsonEntry("DiskDescription"), org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.generateEncodingJsonEntry(1)); org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.assertDiskDescriptionDecoding(disk); }

private void UpdateExternalHostModels() { boolean enabled = ((java.lang.Boolean) (getExternalHostProviderEnabled().getEntity())); if (enabled && ((getProviders().getItems()) == null)) { org.ovirt.engine.ui.frontend.AsyncQuery getProvidersQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getProvidersQuery.setModel(this); getProvidersQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Provider> providers = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Provider>) (result)); org.ovirt.engine.ui.uicommonweb.models.ListModel providersListModel = getProviders(); providers.add(0, null); providersListModel.setItems(providers); providersListModel.setIsChangable(true); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetAllProviders(getProvidersQuery); } else { getProviders().setIsChangable(enabled); getProviders().setSelectedItem(null); } }
public boolean isFastForwarding() { return (rateCycle[currentRate]) != (org.ovirt.engine.ui.uicommonweb.models.GridTimer.RATE.NORMAL); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__ATTACH); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__STORAGE__CONNECTION); }
protected boolean performImagesChecks() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImagesToCheck = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(getImagesList(), true, false, true); org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator diskImagesValidator = new org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator(diskImagesToCheck); return validate(diskImagesValidator.diskImagesNotLocked()); }
@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.widget.table.column.Context context, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity object, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSizeInfo sizeInfo = null; int progress; if (!(((object.getAdvancedDetails()) == null) || ((object.getAdvancedDetails().getCapacityInfo()) == null))) { sizeInfo = object.getAdvancedDetails().getCapacityInfo(); progress = getProgressValue(sizeInfo); } else { progress = 0; } java.lang.String sizeString = getProgressText(sizeInfo); java.lang.String color = (progress < 70) ? "#669966" : progress < 95 ? "#FF9900" : "#FF0000"; com.google.gwt.safehtml.shared.SafeHtml safeHtml = templates.progressBar(progress, sizeString, color); sb.append(safeHtml); }

@org.junit.Test public void testRemove() { org.ovirt.engine.core.common.businessentities.network result = dao.getByName(existing_net_name); assertNotNull(result); dao.remove(result.getId()); result = dao.getByName(existing_net_name); assertNull(result); }

private org.ovirt.engine.core.common.action.ColdMergeCommandParameters buildColdMergeParameters(org.ovirt.engine.core.compat.Guid baseVolumeId, org.ovirt.engine.core.compat.Guid topVolumeId) { org.ovirt.engine.core.common.businessentities.SubchainInfo subchainInfo = new org.ovirt.engine.core.common.businessentities.SubchainInfo(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStorageIds().get(0), org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getImageGroupId(), baseVolumeId, topVolumeId); org.ovirt.engine.core.common.action.ColdMergeCommandParameters parameters = new org.ovirt.engine.core.common.action.ColdMergeCommandParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getDiskImage().getStoragePoolId(), subchainInfo); parameters.setEndProcedure(VdcActionParametersBase.EndProcedure.COMMAND_MANAGED); parameters.setParentCommand(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getActionType()); parameters.setParentParameters(org.ovirt.engine.core.bll.snapshots.ColdMergeSnapshotSingleDiskCommand.getParameters()); return parameters; }


public org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceCreatingManager.PostVnicCreatedCallback getCallback() { return callback; }
private static java.net.HttpURLConnection create(java.net.URL url) throws java.io.IOException, java.security.GeneralSecurityException { return new org.ovirt.engine.core.uutils.net.HttpURLConnectionBuilder(url).setHttpsProtocol(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_SSO_SERVICE_SSL_PROTOCOL")).setReadTimeout(0).setTrustManagerAlgorithm(javax.net.ssl.TrustManagerFactory.getDefaultAlgorithm()).setTrustStore(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getProperty("ENGINE_PKI_TRUST_STORE")).setTrustStorePassword(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStorePassword()).setTrustStoreType(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getPKITrustStoreType()).setURL(url).setVerifyChain(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getBoolean("ENGINE_SSO_SERVICE_SSL_VERIFY_CHAIN")).setVerifyHost(org.ovirt.engine.core.utils.EngineLocalConfig.getInstance().getBoolean("ENGINE_SSO_SERVICE_SSL_VERIFY_HOST")).create(); }

private void setVmWatchdogToParams(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, org.ovirt.engine.core.common.action.VmTemplateParametersBase updateVmParams) { org.ovirt.engine.core.common.businessentities.VmWatchdogType wdModel = model.getWatchdogModel().getSelectedItem(); updateVmParams.setUpdateWatchdog(true); if (wdModel != null) { org.ovirt.engine.core.common.businessentities.VmWatchdog vmWatchdog = new org.ovirt.engine.core.common.businessentities.VmWatchdog(); vmWatchdog.setAction(model.getWatchdogAction().getSelectedItem()); vmWatchdog.setModel(wdModel); updateVmParams.setWatchdog(vmWatchdog); } }

@java.lang.Override protected void ReadOsSection(XmlNode section) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(section.Attributes.get("ovf:id").getValue())); XmlNode node = section.SelectSingleNode("Description"); if (node != null) { _vmTemplate.setos(org.ovirt.engine.core.common.businessentities.VmOsType.valueOf(node.InnerText)); } else { _vmTemplate.setos(VmOsType.Unassigned); } }
public org.ovirt.engine.core.common.businessentities.NonOperationalReason getNonOperationalReason() { return this.mVdsDynamic.getNonOperationalReason(); }
@org.junit.experimental.theories.Theory public void lastVmListNotIncludingExternalVm(org.ovirt.engine.core.vdsbroker.monitoring.VmTestPairs data) { stubCalls(data); assertTrue(vmsListFetcher.fetch()); assumeTrue(((data.vdsmVm()) != null)); assumeTrue(((data.dbVm()) != null)); verify(vdsManager).setLastVmsList(vdsManagerArgumentCaptor.capture()); assertEquals(data.vdsmVm().getVmDynamic(), vdsManagerArgumentCaptor.getValue().get(0)); }

@org.junit.Test public void testCreateDecoratedTwoRequestsToGetDifferentlyDecoratedSamePoolUseSameLock() { org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory factory = new org.ovirt.engine.core.bll.network.macpool.DecoratedMacPoolFactory(lockedObjectFactorySpy); assertThat(factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorA)), instanceOf(java.lang.reflect.Proxy.class)); assertThat(factory.createDecoratedPool(poolId, macPool, java.util.Collections.singletonList(macPoolDecoratorB)), instanceOf(java.lang.reflect.Proxy.class)); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor1 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy).createLockingInstance(eq(macPoolDecoratorA), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor1.capture()); org.mockito.ArgumentCaptor<java.util.concurrent.locks.ReentrantReadWriteLock> captor2 = org.mockito.ArgumentCaptor.forClass(java.util.concurrent.locks.ReentrantReadWriteLock.class); verify(lockedObjectFactorySpy).createLockingInstance(eq(macPoolDecoratorB), eq(org.ovirt.engine.core.bll.network.macpool.MacPool.class), captor2.capture()); assertEquals(captor1.getValue(), captor2.getValue()); }

private void init() { setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editLogicalNetworkTitle()); setHelpTag(HelpTag.edit_logical_network); setHashName("edit_logical_network"); getName().setEntity(getNetwork().getName()); getDescription().setEntity(getNetwork().getDescription()); getComment().setEntity(getNetwork().getComment()); getIsStpEnabled().setEntity(getNetwork().getStp()); getHasVLanTag().setEntity(((getNetwork().getVlanId()) != null)); getVLanTag().setEntity(getNetwork().getVlanId()); initMtu(); initIsVm(); getExport().setEntity(getNetwork().isExternal()); getExport().setIsChangeable(false); getExternalProviders().setIsChangeable(false); if (getNetwork().isExternal()) { getNeutronPhysicalNetwork().setEntity(getNetwork().getLabel()); } else { getNetworkLabel().setSelectedItem(getNetwork().getLabel()); } toggleProfilesAvailability(); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel templateListModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel) (target)); boolean isNameUnique = ((java.lang.Boolean) (returnValue)); templateListModel.postNameUniqueCheck(isNameUnique); }

private void initializeGeoRepActionConfirmation(java.lang.String title, org.ovirt.engine.ui.uicommonweb.help.HelpTag helpTag, java.lang.String hashName, java.lang.String forceHelp, java.lang.String forceLabelText, java.lang.String commandName, java.lang.String masterVolumeName, java.lang.String slaveVolumeName, java.lang.String slaveHostName) { org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeGeoRepActionConfirmationModel cModel = new org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeGeoRepActionConfirmationModel(); cModel.setTitle(title); cModel.setHelpTag(helpTag); cModel.setHashName(hashName); setWindow(cModel); cModel.initWindow(masterVolumeName, slaveVolumeName, slaveHostName); cModel.setForceHelp(forceHelp); cModel.setForceLabel(forceLabelText); org.ovirt.engine.ui.uicommonweb.UICommand okCommand = new org.ovirt.engine.ui.uicommonweb.UICommand(commandName, this); okCommand.setTitle(org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel.constants.ok()); okCommand.setIsDefault(true); cModel.getCommands().add(okCommand); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("closeWindow", this); cancelCommand.setTitle(org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeoRepListModel.constants.cancel()); cancelCommand.setIsCancel(true); cModel.getCommands().add(cancelCommand); }
protected void init() { org.ovirt.engine.core.bll.TagsDirector.log.info("TagsDirector initialization"); tagsMapByID.clear(); tagsMapByName.clear(); org.ovirt.engine.core.common.businessentities.tags root = new org.ovirt.engine.core.common.businessentities.tags("root", null, true, org.ovirt.engine.core.bll.TagsDirector.ROOT_TAG_ID, "root"); AddTagToHash(root); AddChildren(root); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((correlationId) == null ? 0 : correlationId.hashCode()); result = (prime * result) + ((description) == null ? 0 : description.hashCode()); result = (prime * result) + ((endTime) == null ? 0 : endTime.hashCode()); result = (prime * result) + ((externalSystem) == null ? 0 : externalSystem.hashCode()); result = (prime * result) + ((id) == null ? 0 : id.hashCode()); result = (prime * result) + ((jobId) == null ? 0 : jobId.hashCode()); result = (prime * result) + ((parentStepId) == null ? 0 : parentStepId.hashCode()); result = (prime * result) + ((startTime) == null ? 0 : startTime.hashCode()); result = (prime * result) + ((status) == null ? 0 : status.hashCode()); result = (prime * result) + (stepNumber); result = (prime * result) + ((stepType) == null ? 0 : stepType.hashCode()); result = (prime * result) + ((steps) == null ? 0 : steps.hashCode()); return result; }
@java.lang.Override protected java.util.Map<java.lang.String, java.lang.Object> constructStringAttributes() { java.util.Map<java.lang.String, java.lang.Object> attributes = super.constructStringAttributes(); attributes.put("baseInterface", getBaseInterface()); attributes.put("vlanId", getVlanId()); return attributes; }

@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot switch Host to Maintenance mode.\nHost still has running VMs on it and is in Non-Responsive state.") java.lang.String VDS_CANNOT_MAINTENANCE_VDS_IS_NOT_RESPONDING_WITH_VMS();
@java.lang.Override protected org.ovirt.engine.api.model.NIC populate(org.ovirt.engine.api.model.NIC model, org.ovirt.engine.core.common.businessentities.VmNetworkInterface entity) { return addStatistics(model, entity, uriInfo, httpHeaders); }
private org.ovirt.engine.core.common.businessentities.network.IPv4Address getPrimaryAddress() { return networkDataCenterIpConfigurationDefinition.getIpv4PrimaryAddress(); }
private java.util.Set<org.ovirt.engine.core.compat.Guid> mapDisks(org.ovirt.engine.api.model.DiskAttachments diskAttachments) { java.util.Set<org.ovirt.engine.core.compat.Guid> diskIds = null; if (diskAttachments.isSetDiskAttachments()) { diskIds = diskAttachments.getDiskAttachments().stream().map(DiskAttachment::getDisk).filter(java.util.Objects::nonNull).map(( d) -> ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (org.ovirt.engine.api.restapi.types.DiskMapper.map(d, null)))).map(BaseDisk::getId).collect(java.util.stream.Collectors.toSet()); } return diskIds; }
public static void addVmInitToDB(org.ovirt.engine.core.common.businessentities.VmBase vm) { if ((vm.getVmInit()) != null) { vm.getVmInit().setId(vm.getId()); org.ovirt.engine.core.dao.VmInitDAO db = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmInitDao(); if ((db.get(vm.getId())) == null) { db.save(vm.getVmInit()); } else { db.update(vm.getVmInit()); } } }
public void setHighlyAvailableGlobalMaintenance(boolean value) { this.mVdsStatistics.setHighlyAvailableGlobalMaintenance(value); }
@java.lang.Override protected void executeVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStoragePoolVDSCommand.getBroker().connectStoragePool(org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStoragePoolVDSCommand.getParameters().getvds_spm_id(), org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStoragePoolVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStoragePoolVDSCommand.getParameters().getMasterDomainId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.ConnectStoragePoolVDSCommand.getParameters().getMasterVersion()); proceedProxyReturnValue(); }
@java.lang.Override public boolean eval(org.ovirt.engine.core.common.businessentities.VDS p) { return (p.getvm_count()) < (vmCountTemp * (p.getcpu_cores())); }
public static org.ovirt.engine.core.compat.Guid createTask(org.ovirt.engine.core.compat.Guid taskId, org.ovirt.engine.core.bll.CommandBase command, org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand, java.lang.String description, java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType> entitiesMap) { return org.ovirt.engine.core.bll.tasks.CommandCoordinator.getInstance().createTask(taskId, command, asyncTaskCreationInfo, parentCommand, description, entitiesMap); }

protected java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> getAllOVFDisks() { if ((ovfDisks) == null) { ovfDisks = new java.util.ArrayList(); java.util.List<org.ovirt.engine.core.common.businessentities.Disk> unregisteredDisks = org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getBackend().runInternalQuery(VdcQueryType.GetUnregisteredDisks, new org.ovirt.engine.core.common.queries.GetUnregisteredDisksQueryParameters(org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getVds().getStoragePoolId())).getReturnValue(); for (org.ovirt.engine.core.common.businessentities.Disk disk : unregisteredDisks) { org.ovirt.engine.core.common.businessentities.DiskImage ovfStoreDisk = ((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)); java.lang.String diskDecription = ovfStoreDisk.getDescription(); if (diskDecription.contains(OvfInfoFileConstants.OvfStoreDescriptionLabel)) { java.util.Map<java.lang.String, java.lang.Object> diskDescriptionMap; try { diskDescriptionMap = org.ovirt.engine.core.utils.JsonHelper.jsonToMap(diskDecription); } catch (java.io.IOException e) { log.warnFormat("Exception while generating json containing ovf store info. Exception: {0}", e); continue; } if (!(isDomainExistsInDiskDescription(diskDescriptionMap, org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getParameters().getStorageDomainId()))) { log.warnFormat("The disk description does not contain the storage domain id {0}", org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getParameters().getStorageDomainId()); continue; } ovfDisks.add(ovfStoreDisk); } } } return ovfDisks; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeModel volumeModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>) (result)); org.ovirt.engine.core.common.businessentities.VDSGroup oldCluster = volumeModel.getCluster().getSelectedItem(); org.ovirt.engine.core.common.businessentities.StoragePool selectedDataCenter = getDataCenter().getSelectedItem(); java.util.Iterator<org.ovirt.engine.core.common.businessentities.VDSGroup> iterator = clusters.iterator(); while (iterator.hasNext()) { if (!(iterator.next().supportsGlusterService())) { iterator.remove(); } } if ((clusters.isEmpty()) || (((clusters.size()) > 0) && (clusters.get(0).getStoragePoolId().equals(selectedDataCenter.getId())))) { volumeModel.getCluster().setItems(clusters); if (oldCluster != null) { org.ovirt.engine.core.common.businessentities.VDSGroup newSelectedItem = org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(clusters, new org.ovirt.engine.ui.uicommonweb.Linq.ClusterPredicate(oldCluster.getId())); if (newSelectedItem != null) { volumeModel.getCluster().setSelectedItem(newSelectedItem); } } if ((volumeModel.getCluster().getSelectedItem()) == null) { volumeModel.getCluster().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrNull(clusters)); } } }

protected void initVdss() { setVdsIdRef(org.ovirt.engine.core.bll.MigrateVmCommand.getVm().getRunOnVds()); org.ovirt.engine.core.common.businessentities.VDS destVds = getDestinationVds(); org.ovirt.engine.core.compat.Guid vdsToRunOn = org.ovirt.engine.core.bll.scheduling.SchedulingManager.getInstance().schedule(org.ovirt.engine.core.bll.MigrateVmCommand.getVdsGroup(), org.ovirt.engine.core.bll.MigrateVmCommand.getVm(), getVdsBlackList(), getVdsWhiteList(), (destVds == null ? null : destVds.getId()), new java.util.ArrayList<java.lang.String>(), new org.ovirt.engine.core.bll.scheduling.VdsFreeMemoryChecker(this), org.ovirt.engine.core.bll.MigrateVmCommand.getCorrelationId()); setDestinationVdsId(vdsToRunOn); if ((vdsToRunOn != null) && (!(Guid.Empty.equals(vdsToRunOn)))) { org.ovirt.engine.core.bll.MigrateVmCommand.getRunVdssList().add(vdsToRunOn); } org.ovirt.engine.core.bll.VmHandler.updateVmGuestAgentVersion(org.ovirt.engine.core.bll.MigrateVmCommand.getVm()); cachedDestinationVds = null; if (((destinationVdsId) != null) && (destinationVdsId.equals(Guid.Empty))) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.RESOURCE_MANAGER_CANT_ALLOC_VDS_MIGRATION); } if (((getDestinationVds()) == null) || ((org.ovirt.engine.core.bll.MigrateVmCommand.getVds()) == null)) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.RESOURCE_MANAGER_VDS_NOT_FOUND); } }
public java.lang.Boolean getKvmEnabled() { return this.mVdsDynamic.getKvmEnabled(); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Copy Template") java.lang.String copyTemplateTitle();


@java.lang.Override protected org.ovirt.engine.core.common.action.VdcActionParametersBase getAddParameters(org.ovirt.engine.core.common.businessentities.VmWatchdog entity, org.ovirt.engine.api.model.WatchDog device) { org.ovirt.engine.core.common.action.WatchdogParameters watchdogParameters = new org.ovirt.engine.core.common.action.WatchdogParameters(); watchdogParameters.setAction(entity.getAction()); watchdogParameters.setModel(entity.getModel()); watchdogParameters.setId(parentId); watchdogParameters.setVm(isVm(parentId)); return watchdogParameters; }
@org.junit.Test public void encodeDecodeWithNonAsciiDiskAliasAndDescription() throws java.lang.Exception { disk.setDiskAlias("áéíñáéíñ"); disk.setDiskDescription("áéíñ"); assertDiskDescriptionMap(disk, org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.generateDiskAliasJsonEntry(org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.encodeString("áéíñáéíñ")), org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.generateDiskDescriptionJsonEntry(org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.encodeString("áéíñ")), org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.generateEncodingJsonEntry(3)); org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.assertDiskDescriptionDecoding(disk); }


protected java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainStatic> filterAttachedStorageDomains() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> connectedStorageDomainsToVds = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain : org.ovirt.engine.core.bll.storage.GetStorageDomainsWithAttachedStoragePoolGuidQuery.getParameters().getStorageDomainList()) { if (!(connectStorageDomain(storageDomain))) { logErrorMessage(storageDomain); } else { connectedStorageDomainsToVds.add(storageDomain); } } java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomainStatic> storageDomainsWithAttachedStoragePoolId = getAttachedStorageDomains(connectedStorageDomainsToVds); for (org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain : connectedStorageDomainsToVds) { if (!(disconnectStorageDomain(storageDomain))) { log.warn("Could not disconnect Storage Domain {} from VDS '{}'. ", storageDomain.getName(), getVdsId()); } } return storageDomainsWithAttachedStoragePoolId; }

@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getEnabledHtml() { return !(showTitle) ? enabledImage : !(imageAfterTitle) ? org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.TEMPLATES.imageTextButton(enabledImage, org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.getTitle()) : org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.TEMPLATES.textImageButton(org.ovirt.engine.ui.common.widget.action.ImageUiCommandButtonDefinition.getTitle(), enabledImage); }

protected void findUsers(java.lang.String searchString, org.ovirt.engine.ui.frontend.AsyncQuery query) { org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, new org.ovirt.engine.core.common.queries.SearchParameters(((("ADUSER@" + (((org.ovirt.engine.core.aaa.ProfileEntry) (getProfile().getSelectedItem())).getAuthz())) + ": ") + searchString), org.ovirt.engine.core.common.interfaces.SearchType.DirectoryUser), query); }


@java.lang.Override protected void verify(org.ovirt.engine.api.model.Cluster model, org.ovirt.engine.api.model.Cluster transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getComment(), transform.getComment()); assertNotNull(transform.getCpu()); assertEquals(model.getCpu().getId(), transform.getCpu().getId()); assertNotNull(transform.getDataCenter()); assertEquals(model.getDataCenter().getId(), transform.getDataCenter().getId()); assertNotNull(transform.getSchedulingPolicy()); assertEquals(model.getSchedulingPolicy().getPolicy(), transform.getSchedulingPolicy().getPolicy()); assertEquals(model.getErrorHandling().getOnError(), transform.getErrorHandling().getOnError()); assertNotNull(transform.getMemoryPolicy()); assertNotNull(transform.getMemoryPolicy().getTransparentHugepages()); assertEquals(transform.getMemoryPolicy().getTransparentHugepages().isEnabled(), transform.getMemoryPolicy().getTransparentHugepages().isEnabled()); assertEquals(model.isVirtService(), transform.isVirtService()); assertEquals(model.isGlusterService(), transform.isGlusterService()); assertEquals(model.isTunnelMigration(), transform.isTunnelMigration()); assertEquals(model.isTrustedService(), transform.isTrustedService()); assertEquals(model.isBallooningEnabled(), transform.isBallooningEnabled()); assertEquals(model.getKsm().isEnabled(), transform.getKsm().isEnabled()); assertEquals(model.getDisplay().getProxy(), transform.getDisplay().getProxy()); assertEquals(model.getSerialNumber().getPolicy(), transform.getSerialNumber().getPolicy()); assertEquals(model.getSerialNumber().getValue(), transform.getSerialNumber().getValue()); }

@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.network.NetworkSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(ginjector.getApplicationConstants().networkHostSubTabLabel(), 2, ginjector.getSubTabNetworkHostModelProvider()); }
void registerModelEventListeners(final org.ovirt.engine.ui.common.uicommon.model.ModelProvider<? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel> modelProvider) { modelProvider.getModel().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs pcArgs = args; if ("IsAvailable".equals(pcArgs.propertyName)) { boolean isAvailable = modelProvider.getModel().getIsAvailable(); setAccessible(isAvailable); } } }); }

@org.junit.Test public void canDoActionFailsNullParameterForIsoFile() { mockVdsWithOsVersion(org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.VALID_OVIRT_VERSION); org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters param = org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.createParameters(); param.setoVirtIsoFile(null); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommand<org.ovirt.engine.core.common.action.hostdeploy.InstallVdsParameters> command = createCommand(param); org.ovirt.engine.core.bll.hostdeploy.UpgradeOvirtNodeInternalCommandTest.assertFailsWithCanDoActionMessage(command, VdcBllMessages.VDS_CANNOT_INSTALL_MISSING_IMAGE_FILE); }

private void handleRadioButtonClick(com.google.gwt.event.dom.client.ClickEvent event) { getDetailModel().setViewFilterType(viewRadioGroup.getSelectedValue()); boolean attached = (viewRadioGroup.getSelectedValue()) == (org.ovirt.engine.ui.uicommonweb.models.networks.NetworkHostFilter.attached); getTable().ensureColumnPresent(hostStatus, constants.empty(), true, "30px"); getTable().ensureColumnPresent(nameColumn, constants.nameHost(), true, "200px"); getTable().ensureColumnPresent(clusterColumn, constants.clusterHost(), true, "200px"); getTable().ensureColumnPresent(dcColumn, constants.dcHost(), true, "200px"); getTable().ensureColumnPresent(nicStatusColumn, constants.statusNetworkHost(), attached, "140px"); getTable().ensureColumnPresent(nicColumn, constants.nicNetworkHost(), attached, "100px"); getTable().ensureColumnPresent(speedColumn, templates.sub(constants.speedNetworkHost(), constants.mbps()).asString(), attached, "100px"); getTable().ensureColumnPresent(nicRxColumn, templates.sub(constants.rxNetworkHost(), constants.mbps()).asString(), attached, "100px"); getTable().ensureColumnPresent(nicTxColumn, templates.sub(constants.txNetworkHost(), constants.mbps()).asString(), attached, "100px"); }

@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { return java.util.Collections.singletonList(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.SYSTEM_OBJECT_ID, org.ovirt.engine.core.common.VdcObjectType.System, org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getActionType().getActionGroup())); }


@org.junit.Test public void testCanDoActionStorageDomainIsFileStorage() { storageDomain.setStorageType(StorageType.NFS); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_ALIGNMENT_SCAN_STORAGE_TYPE); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("VM") java.lang.String vmRoleTree();

public org.ovirt.engine.core.bll.ValidationResult diskImagesNotIllegal() { return diskImagesNotInStatus(ImageStatus.ILLEGAL, VdcBllMessages.ACTION_TYPE_FAILED_DISKS_ILLEGAL); }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__ADD); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__CLUSTER_POLICY); }
protected boolean isDiskCanBeAddedToVm(org.ovirt.engine.core.common.businessentities.storage.Disk diskInfo, org.ovirt.engine.core.common.businessentities.VM vm) { if ((!(diskInfo.isDiskSnapshot())) && (diskInfo.isBoot())) { for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : vm.getDiskMap().values()) { if ((disk.isBoot()) && (!(disk.isDiskSnapshot()))) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_DISK_BOOT_IN_USE); org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getReturnValue().getCanDoActionMessages().add(java.lang.String.format("$DiskName %1$s", disk.getDiskAlias())); org.ovirt.engine.core.bll.storage.disk.AbstractDiskVmCommand.getReturnValue().getCanDoActionMessages().add(java.lang.String.format("$VmName %1$s", vm.getName())); return false; } } } return true; }


@org.junit.Test public void testUpdateLastAdminCheckStatus() { org.ovirt.engine.core.common.businessentities.aaa.DbUser nonAdminUser = dbFacade.getDbUserDao().getByUsernameAndDomain("userportal2@testportal.redhat.com", "testportal.redhat.com"); assertNotNull(nonAdminUser); assertFalse(nonAdminUser.isAdmin()); dao.updateLastAdminCheckStatus(nonAdminUser.getId()); nonAdminUser = dbFacade.getDbUserDao().get(nonAdminUser.getId()); assertFalse(nonAdminUser.isAdmin()); org.ovirt.engine.core.common.businessentities.Permission perms = new org.ovirt.engine.core.common.businessentities.Permission(); perms.setRoleType(RoleType.ADMIN); perms.setRoleId(org.ovirt.engine.core.dao.DbUserDaoTest.ADMIN_ROLE_TYPE_FROM_FIXTURE_ID); perms.setAdElementId(nonAdminUser.getId()); perms.setObjectId(org.ovirt.engine.core.dao.DbUserDaoTest.SYSTEM_OBJECT_ID); perms.setObjectType(VdcObjectType.System); dbFacade.getPermissionDao().save(perms); assertNotNull(dbFacade.getPermissionDao().get(perms.getId())); dao.updateLastAdminCheckStatus(nonAdminUser.getId()); nonAdminUser = dbFacade.getDbUserDao().get(nonAdminUser.getId()); assertTrue(nonAdminUser.isAdmin()); }
private void InitializeHelpers() { try { for (org.ovirt.engine.core.common.businessentities.StorageType storageType : org.ovirt.engine.core.common.businessentities.StorageType.values()) { java.lang.Class<?> actionType = null; java.lang.String formattedClassName = java.lang.String.format("%1$s.%2$s%3$s", org.ovirt.engine.core.bll.storage.StorageHelperDirector.ACTION_TYPE_PACKAGE, storageType.name(), org.ovirt.engine.core.bll.storage.StorageHelperDirector.ACTION_TYPE_CLASS); try { actionType = java.lang.Class.forName(formattedClassName); } catch (java.lang.ClassNotFoundException cnfe) { org.ovirt.engine.core.bll.storage.StorageHelperDirector.log.error(("StorageHelperDirector Error:: the lookup for following class has failed: " + formattedClassName), cnfe); } if (actionType != null) { java.lang.reflect.Constructor<?> info = actionType.getConstructors()[0]; org.ovirt.engine.core.bll.storage.IStorageHelper currentHelper = ((org.ovirt.engine.core.bll.storage.IStorageHelper) (info.newInstance(null))); _helpers.put(storageType, currentHelper); } } } catch (java.lang.Exception ex) { org.ovirt.engine.core.bll.storage.StorageHelperDirector.log.error("StorageHelperDirector Error:: exception was encountered during InitializeHelpers() execution", ex); throw new org.ovirt.engine.core.compat.ApplicationException("JTODO missing exception", ex); } }


@org.junit.Test public void refuseBalloonOnPPC() { final org.ovirt.engine.core.bll.ImportVmCommand<org.ovirt.engine.core.common.action.ImportVmParameters> c = setupDiskSpaceTest(createParameters()); addBalloonToVm(c.getVmFromExportDomain(null)); c.getParameters().getVm().setClusterArch(ArchitectureType.ppc64); org.ovirt.engine.core.common.businessentities.VDSGroup cluster = new org.ovirt.engine.core.common.businessentities.VDSGroup(); cluster.setArchitecture(ArchitectureType.ppc64); cluster.setCompatibilityVersion(org.ovirt.engine.core.compat.Version.getLast()); doReturn(cluster).when(c).getVdsGroup(); doReturn(true).when(c).validateImages(any(java.util.Map.class)); when(osRepository.isBalloonEnabled(c.getParameters().getVm().getVmOsId(), cluster.getCompatibilityVersion())).thenReturn(false); assertFalse(c.canDoAction()); assertTrue(c.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.BALLOON_REQUESTED_ON_NOT_SUPPORTED_ARCH.toString())); }
private static org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo nextAsyncTaskCreationInfo() { org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo info = new org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo(); info.setStepId(org.ovirt.engine.core.compat.Guid.NewGuid()); info.setStoragePoolID(org.ovirt.engine.core.compat.Guid.NewGuid()); info.setTaskID(org.ovirt.engine.core.compat.Guid.NewGuid()); info.setTaskType(org.ovirt.engine.core.utils.RandomUtils.instance().nextEnum(org.ovirt.engine.core.common.asynctasks.AsyncTaskType.class)); return info; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Cancel") java.lang.String cancel();
public org.ovirt.engine.core.bll.ValidationResult unplugPlugNotRequired() { return (liveActionRequired()) && (propertiesRequiringUnplugPlugWereUpdated()) ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.CANNOT_PERFORM_HOT_UPDATE) : org.ovirt.engine.core.bll.ValidationResult.VALID; }


@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> list = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>) (source)); java.util.Collections.sort(list, new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer()); return list; } return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>(); }
private void buildIdToUnameLookup() { try { java.lang.String[] uniqueNames = preferences.node("/os").childrenNames(); idToUnameLookup = new java.util.HashMap<java.lang.Integer, java.lang.String>(uniqueNames.length); for (java.lang.String uniqueName : java.util.Arrays.asList(uniqueNames)) { java.util.prefs.Preferences idNode = getKeyNode(uniqueName, "id", null); if (idNode != null) { idToUnameLookup.put(idNode.getInt("value", 0), uniqueName); } } } catch (java.util.prefs.BackingStoreException e) { throw new java.lang.RuntimeException(("Failed to initialize Os Repository due to " + e)); } }
private void gatherNonRunningVms(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.VmDynamic> dbVms) { for (org.ovirt.engine.core.common.businessentities.VmDynamic dbVm : dbVms.values()) { if (!(vdsmVms.containsKey(dbVm.getId()))) { changedVms.add(new org.ovirt.engine.core.common.utils.Pair(dbVm, null)); } } }
private void changeCD(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs e) { org.ovirt.engine.ui.uicommonweb.models.configure.ChangeCDModel model = ((org.ovirt.engine.ui.uicommonweb.models.configure.ChangeCDModel) (sender)); java.lang.String isoName = model.getTitle(); if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(isoName, org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().noCds())) { return; } java.lang.Object tempVar = getSelectedItem(); org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) ((tempVar instanceof org.ovirt.engine.core.common.businessentities.VM) ? tempVar : null)); if (vm == null) { return; } org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.ChangeDisk, new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(java.util.Arrays.asList(new org.ovirt.engine.core.common.action.VdcActionParametersBase[]{ new org.ovirt.engine.core.common.action.ChangeDiskCommandParameters(vm.getId(), (org.ovirt.engine.core.compat.StringHelper.stringsEqual(isoName, ConsoleModel.EjectLabel) ? "" : isoName)) })), new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { } }, null); }
@org.junit.Test public void testSave() { dao.save(newAdGroup); org.ovirt.engine.core.common.businessentities.ad_groups result = dao.getByName(newAdGroup.getname()); assertEquals(newAdGroup, result); }
public void setLocalItem(java.lang.String key, java.lang.String value) { if ((org.ovirt.engine.ui.common.system.ClientStorage.localStorage) != null) { org.ovirt.engine.ui.common.system.ClientStorage.localStorage.setItem(key, value); } else { com.google.gwt.user.client.Cookies.setCookie(key, value, new java.util.Date(((new java.util.Date().getTime()) + (org.ovirt.engine.ui.common.system.ClientStorage.PERSISTENT_COOKIE_EXPIRATION)))); } }

@java.lang.Override protected boolean canDoAction() { if ((((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters()) == null) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent()) == null)) || ((org.ovirt.engine.core.bll.RemoveFenceAgentCommand.getParameters().getAgent().getId()) == null)) { return failCanDoAction(EngineMessage.VDS_REMOVE_FENCE_AGENT_ID_REQUIRED); } return super.canDoAction(); }

@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllWithTemplate(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeReadList("GetVmsByVmtGuid", org.ovirt.engine.core.dao.VmDAODbFacadeImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("vmt_guid", id)); }
private void updatePath() { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (getWindow())); org.ovirt.engine.core.common.businessentities.VDS host = model.getHost().getSelectedItem(); org.ovirt.engine.core.compat.Guid hostId = org.ovirt.engine.core.compat.Guid.Empty; if (host != null) { hostId = host.getId(); } org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel storageModel = model.getSelectedItem(); connection = new org.ovirt.engine.core.common.businessentities.StorageServerConnections(); connection.setid(storageDomain.getStorage()); connection.setconnection(path); connection.setstorage_type(storageModel.getType()); if (storageModel.getType().equals(StorageType.NFS)) { updateNFSProperties(storageModel); } else if (storageModel instanceof org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel) { updatePosixProperties(storageModel); } org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase parameters = new org.ovirt.engine.core.common.action.StorageServerConnectionParametersBase(connection, hostId); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.UpdateStorageServerConnection, parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel storageListModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageListModel) (result.getState())); storageListModel.onFinish(storageListModel.context, true, storageListModel.storageModel); } }, this); }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.network o1, org.ovirt.engine.core.common.businessentities.network o2) { return HostInterfaceListModel.ENGINE_NETWORK_NAME.equals(o1.getname()) ? -1 : o1.getname().compareTo(o2.getname()); }
@java.lang.Override public void addColumn(com.google.gwt.user.cellview.client.Column<T, ?> column, com.google.gwt.user.cellview.client.Header<?> header) { super.addColumn(column, wrapHeader(header, column)); if (columnResizingEnabled) { if ((emptyNoWidthColumn) != null) { removeColumn(emptyNoWidthColumn); } emptyNoWidthColumn = new org.ovirt.engine.ui.common.widget.table.column.EmptyColumn<T>(); addColumn(emptyNoWidthColumn); } }
private org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Boolean> updateVdsNetworksInTx() { return new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean runInTransaction() { org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CollectVdsNetworkData, new org.ovirt.engine.core.common.vdscommands.CollectHostNetworkDataVdsCommandParameters(getVds(), getInterfaces())); for (org.ovirt.engine.core.common.businessentities.network.Network net : getNetworks()) { org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus(getVdsGroupId(), net); } return java.lang.Boolean.TRUE; } }; }

public void showAlert(final org.ovirt.engine.ui.common.widget.panel.AlertPanel.Type type, final com.google.gwt.safehtml.shared.SafeHtml message) { com.google.gwt.core.client.Scheduler.ScheduledCommand command = new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { attachAlert(createAlert(type, message)); } }; if (canShowAlerts) { command.execute(); } else { deferredAlertCommands.add(command); } }
public static void UpdateHardwareSystemInformation(org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct hwInfo, org.ovirt.engine.core.common.businessentities.VDS vds) { vds.setHardwareManufacturer(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignStringValue(hwInfo, VdsProperties.hwManufacturer)); vds.setHardwareProductName(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignStringValue(hwInfo, VdsProperties.hwProductName)); vds.setHardwareVersion(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignStringValue(hwInfo, VdsProperties.hwVersion)); vds.setHardwareSerialNumber(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignStringValue(hwInfo, VdsProperties.hwSerialNumber)); vds.setHardwareUUID(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignStringValue(hwInfo, VdsProperties.hwUUID)); vds.setHardwareFamily(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignStringValue(hwInfo, VdsProperties.hwFamily)); }
public void setItems(java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel> value) { if ((items) != value) { itemsChanging(value, items); items = value; itemsChanged(); getItemsChangedEvent().raise(this, EventArgs.Empty); onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("Items")); } }
protected boolean validateParameters() { if ((getVdsGroup()) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_CLUSTER_FOR_AFFINITY_GROUP); } if ((getParameters().getAffinityGroup().getEntityIds()) != null) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = null; java.util.Set<org.ovirt.engine.core.compat.Guid> vmSet = new java.util.HashSet<>(); for (org.ovirt.engine.core.compat.Guid vmId : getParameters().getAffinityGroup().getEntityIds()) { vmStatic = getVmStaticDAO().get(vmId); if (vmStatic == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_INVALID_VM_FOR_AFFINITY_GROUP); } if (!(java.util.Objects.equals(vmStatic.getVdsGroupId(), getVdsGroupId()))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_IN_AFFINITY_GROUP_CLUSTER); } if (vmSet.contains(vmStatic.getId())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_DUPLICTE_VM_IN_AFFINITY_GROUP); } else { vmSet.add(vmStatic.getId()); } } } return true; }


@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((tagId) == null ? 0 : tagId.hashCode()); result = (prime * result) + ((userId) == null ? 0 : userId.hashCode()); return result; }

@org.junit.Test public void testAllDomainsHaveSpaceForClonedDisksFail() { java.util.List<org.ovirt.engine.core.compat.Guid> sdIds = java.util.Arrays.asList(sdId1, sdId2); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList = generateDisksList(org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidatorTest.NUM_DISKS, sdIds); org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = mock(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator.class); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(storageDomainValidator).hasSpaceForClonedDisks(anyList()); doReturn(storageDomainValidator).when(validator).getStorageDomainValidator(any(java.util.Map.Entry.class)); org.ovirt.engine.core.bll.ValidationResult result = validator.allDomainsHaveSpaceForClonedDisks(disksList); assertFalse(result.isValid()); assertEquals("Wrong validation error", VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN, result.getMessage()); }
public abstract java.util.List<org.ovirt.engine.core.common.errors.VdcBllMessages> resolveMessage();
protected org.ovirt.engine.core.bll.validator.storage.DiskValidator createDiskValidator() { return new org.ovirt.engine.core.bll.validator.storage.DiskValidator(getImage()); }
public void setIsDisplayTabValid(boolean value) { if ((isDisplayTabValid) != value) { isDisplayTabValid = value; onPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("IsDisplayTabValid")); } }
protected org.codehaus.jackson.node.ObjectNode getEngineSessionTimeoutObject(java.lang.Integer engineSessionTimeout, java.lang.Integer userSessionHardLimit) { org.codehaus.jackson.node.ObjectNode obj = createObjectNode(); obj.put("sessionTimeout", java.lang.String.valueOf(engineSessionTimeout)); obj.put("sessionHardLimit", java.lang.String.valueOf(userSessionHardLimit)); return obj; }
@java.lang.Override protected void ExecuteVdsBrokerCommand() { status = org.ovirt.engine.core.vdsbroker.vdsbroker.SnapshotVDSCommand.getBroker().snapshot(org.ovirt.engine.core.vdsbroker.vdsbroker.SnapshotVDSCommand.getParameters().getVmId().toString(), createSnapshotParameters()); org.ovirt.engine.core.vdsbroker.vdsbroker.SnapshotVDSCommand.ProceedProxyReturnValue(); }




@org.junit.Test public void testVmsWithIsoAttached() { setup(); mockDomain(); doReturn(domain).when(cmd).getStorageDomain(); doReturn(vmStaticDao).when(cmd).getVmStaticDao(); doReturn(vmDynamicDao).when(cmd).getVmDynamicDao(); org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic(); vmStatic.setName("TestVM"); vmStatic.setId(org.ovirt.engine.core.compat.Guid.newGuid()); doReturn(java.util.Collections.singletonList(vmStatic)).when(cmd).getVmsWithAttachedISO(); assertFalse(cmd.isRunningVmsWithIsoAttached()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ERROR_CANNOT_DEACTIVATE_STORAGE_DOMAIN_WITH_ISO_ATTACHED.toString())); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ((object.getVersion().getSelectedItem()) != null) { java.lang.String clusterVersion = object.getVersion().getSelectedItem().getValue(); serialNumberPolicyEditor.setVisible(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isSerialNumberPolicySupported(clusterVersion)); } }

protected java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> getBricks(org.ovirt.engine.core.compat.Guid volumeId) { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity> bricks = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick1 = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick1.setVolumeId(volumeId); brick1.setId(org.ovirt.engine.core.bll.gluster.AbstractRemoveGlusterVolumeBricksCommandTest.BRICK_UUID1); brick1.setBrickDirectory("/tmp/test-vol0"); brick1.setServerId(SERVER_ID); brick1.setStatus(GlusterStatus.UP); bricks.add(brick1); org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick2 = new org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity(); brick2.setVolumeId(volumeId); brick2.setId(org.ovirt.engine.core.bll.gluster.AbstractRemoveGlusterVolumeBricksCommandTest.BRICK_UUID1); brick2.setBrickDirectory("/tmp/test-vol1"); brick2.setServerId(SERVER_ID); brick2.setStatus(GlusterStatus.UP); bricks.add(brick2); return bricks; }
@javax.ws.rs.POST @org.jboss.resteasy.annotations.providers.jaxb.Formatted @javax.ws.rs.Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON, MediaType.APPLICATION_X_YAML }) @org.ovirt.engine.api.model.Actionable @javax.ws.rs.Path("activate") public javax.ws.rs.core.Response activate(org.ovirt.engine.api.model.Action action);
public void onStorageModelUpdated(org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel model) { getModel().updatedStorageModels.add(model); if ((getModel().updatedStorageModels.size()) == (org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.ui.uicommonweb.models.storage.IStorageModel>cast(getModel().getItems()).size())) { getModel().updatedStorageModels.clear(); getModel().getHost().setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>()); getModel().getHost().setSelectedItem(null); filterUnSelectableModels(); if ((getModel().getSelectedItem()) != null) { getModel().updateFormat(); } } }
private org.ovirt.engine.core.bll.ValidationResult reportMtuDifferences(java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> ifaceNetworks) { java.util.List<java.lang.String> mtuDiffNetworks = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.network.Network net : ifaceNetworks) { mtuDiffNetworks.add(java.lang.String.format("%s(%s)", net.getName(), ((net.getMtu()) == 0 ? "default" : java.lang.String.valueOf(net.getMtu())))); } java.lang.String replacements = java.lang.String.format("[%s]", commaSeparated(mtuDiffNetworks)); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_MTU_DIFFERENCES, replacements); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> getClustersWithPermittedAction(org.ovirt.engine.core.compat.Guid userId, org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("user_id", userId).addValue("action_group_id", actionGroup.getId()); return getCallsHandler().executeReadList("fn_perms_get_vds_groups_with_permitted_action", org.ovirt.engine.core.dao.VdsGroupDAODbFacadeImpl.VdsGroupRowMapper.instance, parameterSource); }
private boolean networkNotAttachedToCluster() { if (networkExists()) { return failCanDoAction(VdcBllMessages.NETWORK_ALREADY_ATTACHED_TO_CLUSTER); } return true; }
void save(org.ovirt.engine.core.common.businessentities.ad_groups group);
@org.junit.Test public void validateFailsForDifferentStorageDevice() { org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice1 = getStorageDevice("sda"); org.ovirt.engine.core.common.businessentities.gluster.StorageDevice storageDevice2 = getStorageDevice("sdb"); storageDevice2.setDevType("SDA"); doReturn(new org.ovirt.engine.core.common.action.gluster.CreateBrickParameters(HOST_ID, "brick1", "/gluster-bricks/brick1", org.ovirt.engine.core.common.businessentities.RaidType.RAID0, null, null, java.util.Arrays.asList(storageDevice1, storageDevice2))).when(cmd).getParameters(); prepareMocks(VDSStatus.Up); assertFalse(cmd.validate()); }
@org.junit.Test public void testQueryFailsIfWrongPassword() { mockQueryParameters(org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.NEW_SERVER, org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.WRONG_PASSWORD); try { getQuery().executeQueryCommand(); fail("Query didn't fail when wrong password was passed!"); } catch (java.lang.RuntimeException e) { assertEquals(VdcBllMessages.SSH_AUTHENTICATION_FAILED.toString(), e.getMessage()); } }
private java.lang.String messageFormatter(java.lang.String msg, java.lang.String vmid) { org.codehaus.jackson.node.ObjectNode vmDetailNode = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); vmDetailNode.put("status", msg); vmDetailNode.put("hash", java.lang.Integer.toString(vmid.hashCode())); org.codehaus.jackson.node.ObjectNode paramsNode = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); paramsNode.put(vmid.toString(), vmDetailNode); org.codehaus.jackson.node.ObjectNode node = new org.codehaus.jackson.map.ObjectMapper().createObjectNode(); node.put("params", paramsNode); node.put("jsonrpc", "2.0"); node.put("method", ("|virt|VM_status|" + vmid)); return node.toString(); }

public org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters buildParameters(org.ovirt.engine.core.compat.Guid hostId, java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> networksToRemove, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nics) { org.ovirt.engine.core.common.action.PersistentSetupNetworksParameters parameters = createSetupNetworksParameters(hostId); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : nics) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nicToConfigure = getNicToConfigure(parameters.getInterfaces(), nic.getId()); if (nicToConfigure == null) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.LABELED_NETWORK_INTERFACE_NOT_FOUND); } java.util.Set<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> nicsToRemove = getNicsToRemove(parameters.getInterfaces(), networksToRemove, nicToConfigure); parameters.getInterfaces().removeAll(nicsToRemove); } parameters.setNetworkNames(org.apache.commons.lang.StringUtils.join(org.ovirt.engine.core.common.businessentities.Entities.objectNames(networksToRemove), ", ")); return parameters; }
private void updateAdminStatus(org.ovirt.engine.core.common.businessentities.permissions perm) { org.ovirt.engine.core.common.businessentities.roles role = org.ovirt.engine.core.bll.AddPermissionCommand.getRoleDao().get(perm.getrole_id()); if ((role.getType()) == (org.ovirt.engine.core.common.businessentities.RoleType.ADMIN)) { org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.setIsAdminGUIFlag(perm.getad_element_id(), true); } }
org.ovirt.engine.core.bll.ValidationResult validateCustomProperties(org.ovirt.engine.core.common.utils.customprop.SimpleCustomPropertiesUtil util, java.util.Map<java.lang.String, java.lang.String> validPropertiesForVm, java.util.Map<java.lang.String, java.lang.String> validPropertiesForNonVm) { for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : params.getNetworkAttachments()) { org.ovirt.engine.core.common.businessentities.network.Network network = existingNetworkRelatedToAttachment(attachment); if (attachment.hasProperties()) { if (!(networkCustomPropertiesSupported)) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_NOT_SUPPORTED, network.getName()); } java.util.List<org.ovirt.engine.core.common.utils.customprop.ValidationError> errors = util.validateProperties((network.isVmNetwork() ? validPropertiesForVm : validPropertiesForNonVm), attachment.getProperties()); if (!(errors.isEmpty())) { handleCustomPropertiesError(util, errors); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_CUSTOM_PROPERTIES_BAD_INPUT, network.getName()); } } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private org.ovirt.engine.core.bll.ValidationResult validateNetworkExclusiveOnNics(java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure) { return new org.ovirt.engine.core.bll.validator.NetworkAttachmentsValidator(attachmentsToConfigure, networkBusinessEntityMap).validateNetworkExclusiveOnNics(); }
public static void Init() { org.ovirt.engine.core.bll.VmHandler.mUpdateVmsStatic = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.bll.VmHandler.class, java.util.Arrays.asList(new java.lang.String[]{ "VM", "VmStatic", "VmDynamic" }), org.ovirt.engine.core.common.businessentities.VMStatus.class); org.ovirt.engine.core.bll.VmHandler.mUpdateVmsStatic.AddPermittedFields(new java.lang.String[]{ "vm_name", "description", "domain", "os", "osType", "creation_date", "num_of_monitors", "allowConsoleReconnect", "usb_policy", "is_auto_suspend", "auto_startup", "dedicated_vm_for_vds", "default_display_type", "priority", "default_boot_sequence", "initrd_url", "kernel_url", "kernel_params", "migrationSupport", "minAllocatedMem", "quotaId", "quotaName", "quotaEnforcementType", "cpuPinning", "vmPayload", "balloonEnabled" }); org.ovirt.engine.core.bll.VmHandler.mUpdateVmsStatic.AddFields(java.util.Arrays.asList(new java.lang.Enum<?>[]{ org.ovirt.engine.core.common.businessentities.VMStatus.Down }), java.util.Arrays.asList(new java.lang.String[]{ "vds_group_id", "time_zone", "is_stateless", "nice_level", "mem_size_mb", "num_of_sockets", "cpu_per_socket", "iso_path", "userDefinedProperties", "predefinedProperties", "customProperties", "images", "interfaces" })); }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.storage.ForceRemoveStorageDomainCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.STORAGE, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED)); }




private org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Boolean> updateVdsNetworksInTx(final T bckndCmdParams) { return new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Boolean>() { @java.lang.Override public java.lang.Boolean runInTransaction() { org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CollectVdsNetworkData, new org.ovirt.engine.core.common.vdscommands.VdsIdAndVdsVDSCommandParametersBase(bckndCmdParams.getVdsId())); for (org.ovirt.engine.core.common.businessentities.network net : getNetworks()) { org.ovirt.engine.core.bll.AttachNetworkToVdsGroupCommand.SetNetworkStatus(getVdsGroupId(), net); } return java.lang.Boolean.TRUE; } }; }
@java.lang.Override protected void executeCommand() { if (networkExists()) { org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getNetworkClusterDAO().update(getNetworkCluster()); } else { org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getNetworkClusterDAO().save(new org.ovirt.engine.core.common.businessentities.network.NetworkCluster(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getVdsGroupId(), getNetwork().getId(), org.ovirt.engine.core.common.businessentities.network.NetworkStatus.OPERATIONAL, false, getNetworkCluster().isRequired())); } if (getNetwork().getCluster().isDisplay()) { org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getNetworkClusterDAO().setNetworkExclusivelyAsDisplay(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getVdsGroupId(), getNetwork().getId()); } org.ovirt.engine.core.bll.network.cluster.NetworkClusterHelper.setStatus(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.getVdsGroupId(), getNetwork()); org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.setSucceeded(true); }
private static void chooseHostForExecution(org.ovirt.engine.core.common.vdscommands.VdsIdVDSCommandParametersBase parametersBase, org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.bll.CommandBase<?> cmd, java.util.Collection<org.ovirt.engine.core.compat.Guid> executedHosts) { org.ovirt.engine.core.compat.Guid vdsForExecution = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, executedHosts); parametersBase.setVdsId(vdsForExecution); if (cmd != null) { if (((cmd.getCommandStep()) != null) && ((cmd.getExecutionContext().getStep()) != null)) { org.ovirt.engine.core.compat.Guid stepId = cmd.getExecutionContext().getStep().getId(); if ((cmd.getParameters().getVdsRunningOn()) != null) { org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getStepSubjectEntityDao().remove(cmd.getParameters().getVdsRunningOn(), stepId); } if (vdsForExecution != null) { org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getStepSubjectEntityDao().saveAll(java.util.Collections.singletonList(new org.ovirt.engine.core.common.job.StepSubjectEntity(stepId, org.ovirt.engine.core.common.VdcObjectType.EXECUTION_HOST, vdsForExecution))); } } cmd.getParameters().setVdsRunningOn(vdsForExecution); cmd.persistCommand(cmd.getParameters().getParentCommand(), ((cmd.getCallback()) != null)); } }

@org.junit.Test public void testCanDoAction() { doReturn(true).when(cmd).validateVmNotDuringSnapshot(); vm.setStatus(VMStatus.Up); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.VMT_CANNOT_CREATE_TEMPLATE_FROM_DOWN_VM); }


protected void updateCpuPinningVisibility() { if ((getModel().getCluster().getSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = ((org.ovirt.engine.core.common.businessentities.VDSGroup) (getModel().getCluster().getSelectedItem())); boolean hasCpuPinning = (cluster.getcompatibility_version().compareTo(new org.ovirt.engine.core.compat.Version(3, 1))) >= 0; getModel().getCpuPinning().setIsAvailable(hasCpuPinning); if (!hasCpuPinning) { getModel().getCpuPinning().setEntity(""); } } }
@java.lang.Override protected org.ovirt.engine.core.common.vdscommands.VDSReturnValue performImageVdsmOperation() { if (org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getParameters().isShouldLockImage()) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatusWithCompensation(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getRelevantDiskImage().getId(), ImageStatus.LOCKED, ImageStatus.ILLEGAL, org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getCompensationContext()); } return runVdsCommand(VDSCommandType.DeleteImageGroup, org.ovirt.engine.core.bll.storage.domain.PostZeroHandler.fixParametersWithPostZero(new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().getStoragePoolId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().getId(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getDiskImage().isWipeAfterDelete(), org.ovirt.engine.core.bll.storage.disk.image.RemoveImageCommand.getParameters().getForceDelete()))); }

protected org.ovirt.engine.core.compat.Guid getStoragePoolIdFromVds() { return org.ovirt.engine.core.bll.storage.AttachStorageDomainToPoolCommand.getVds().getStoragePoolId(); }



private void verifyNoDomainForMemory(java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> storageDomains) { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = memoryStorageHandler.findStorageDomainForMemory(storageDomains, disksList); assertNull(storageDomain); }
@org.junit.Test public void networkBelongsToClusterDataCenterNotValid() throws java.lang.Exception { when(cluster.getStoragePoolId()).thenReturn(org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorTestBase.TEST_DC_ID1); when(network.getDataCenterId()).thenReturn(org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorTestBase.TEST_DC_ID2); assertThat(validator.networkBelongsToClusterDataCenter(cluster, network), both(failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_FROM_DIFFERENT_DC)).and(replacements(org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorTestBase.hasItem(org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorTestBase.NETWORK_NAME_REPLACEMENT)))); }









@java.lang.Override public void onSelectionChange(com.google.gwt.view.client.SelectionChangeEvent event) { org.ovirt.engine.core.common.businessentities.bookmarks selectedObject = selectionModel.getSelectedObject(); java.util.List<org.ovirt.engine.core.common.businessentities.bookmarks> selectedItems = (selectedObject != null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.bookmarks>(java.util.Arrays.asList(selectedObject)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.bookmarks>(); this.setSelectedItems(selectedItems); }
private void onConfigureVmsToImport() { final org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel importVmsModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel) (getWindow())); if (importVmsModel == null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmFromExportDomainModel model = importVmsModel.getSpecificImportModel(); setWindow(null); setWindow(model); model.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand(org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.CMD_RESTORE_FROM_EXPORT_DOMAIN, new org.ovirt.engine.ui.uicommonweb.BaseCommandTarget() { @java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand uiCommand) { onRestoreFromExportDomain(); } }).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()).setIsDefault(true)); model.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand(org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.CMD_BACK, new org.ovirt.engine.ui.uicommonweb.BaseCommandTarget() { @java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand uiCommand) { setWindow(null); setWindow(importVmsModel); } }).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().back())); model.getCommands().add(new org.ovirt.engine.ui.uicommonweb.UICommand(org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.CMD_CANCEL, this).setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()).setIsCancel(true)); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__ADD); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__LABEL); }
@java.lang.Override public com.google.gwt.safehtml.shared.SafeHtml getValue(org.ovirt.engine.core.common.utils.PairQueryable<org.ovirt.engine.core.common.businessentities.VDSGroup, org.ovirt.engine.core.common.businessentities.network.NetworkCluster> object) { java.util.List<com.google.gwt.safehtml.shared.SafeHtml> images = new java.util.LinkedList<com.google.gwt.safehtml.shared.SafeHtml>(); if ((object.getSecond()) != null) { if (object.getSecond().isDisplay()) { images.add(displayImage); } else { images.add(emptyImage); } if (object.getSecond().isMigration()) { images.add(migrationImage); } else { images.add(emptyImage); } } return org.ovirt.engine.ui.webadmin.widget.table.column.NetworkRoleColumnHelper.getValue(images); }
private void createMenu(final java.util.List<org.ovirt.engine.core.common.businessentities.VdsNumaNode> numaNodeList, int indexToSkip) { menuBar = new org.ovirt.engine.ui.common.widget.MenuBar(true); for (final org.ovirt.engine.core.common.businessentities.VdsNumaNode numaNode : numaNodeList) { final int nodeIndex = numaNode.getIndex(); menuBar.addItem(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.messages.numaNode(nodeIndex), new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.this, nodeModel.getVm().getId(), true, nodeModel.getIndex(), nodeIndex); org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.menuPopup.hide(); } }); } if (nodeModel.isPinned()) { menuBar.addSeparator(); menuBar.addItem(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.constants.unPinNode(), new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { org.ovirt.engine.ui.common.presenter.popup.numa.UpdatedVnumaEvent.fire(org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.this, nodeModel.getVm().getId(), false, nodeModel.getIndex(), (-1)); org.ovirt.engine.ui.common.view.popup.numa.DraggableVirtualNumaPanel.menuPopup.hide(); } }); } }
@org.junit.Test public void testGetAllForVmWithNonExistentVm() { java.util.List<org.ovirt.engine.core.common.businessentities.VmJob> jobs = dao.getAllForVm(Guid.Empty); assertTrue(jobs.isEmpty()); }

public static void GetMaxVmMemSize(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, boolean is64) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { return source; } return 262144; } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters((is64 ? org.ovirt.engine.core.common.queries.ConfigurationValues.VM64BitMaxMemorySizeInMB : org.ovirt.engine.core.common.queries.ConfigurationValues.VM32BitMaxMemorySizeInMB), org.ovirt.engine.core.common.config.Config.DefaultConfigurationVersion), aQuery); }
@org.junit.Test public void testFailedRoDiskResize() { org.ovirt.engine.core.common.businessentities.StorageDomain sd = new org.ovirt.engine.core.common.businessentities.StorageDomain(); sd.setAvailableDiskSize(java.lang.Integer.MAX_VALUE); sd.setStatus(StorageDomainStatus.Active); when(storageDomainDao.getForStoragePool(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(sd); org.ovirt.engine.core.common.action.UpdateVmDiskParameters parameters = createParameters(); ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (parameters.getDiskInfo())).setSize(((parameters.getDiskInfo().getSize()) * 2)); initializeCommand(parameters); org.ovirt.engine.core.common.businessentities.storage.DiskImage oldDisk = createDiskImage(); doReturn(oldDisk).when(command).getOldDisk(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = stubVmDevice(diskImageGuid, vmId); vmDevice.setIsReadOnly(true); assertFalse(command.validateCanResizeDisk()); org.ovirt.engine.core.bll.CanDoActionTestUtils.assertCanDoActionMessages("wrong failure", command, VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_RESIZE_READ_ONLY_DISK); }
private static org.ovirt.engine.core.common.action.AddDiskParameters createParameters() { org.ovirt.engine.core.common.businessentities.storage.DiskImage image = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); org.ovirt.engine.core.common.businessentities.storage.DiskVmElement dve = new org.ovirt.engine.core.common.businessentities.storage.DiskVmElement(null, org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.vmId); dve.setDiskInterface(DiskInterface.IDE); return new org.ovirt.engine.core.common.action.AddDiskParameters(dve, image); }


@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.VDSGroup> clusterModel = hostModel.getCluster(); if ((clusterModel.getSelectedItem()) != null) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = clusterModel.getSelectedItem(); java.lang.Boolean jsonSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.JsonProtocolSupported, cluster.getcompatibility_version().toString()))); if (jsonSupported) { hostModel.getProtocol().setEntity(true); } else { hostModel.getProtocol().setEntity(false); hostModel.getProtocol().setIsChangable(false); } } }

private org.ovirt.engine.core.compat.Guid getQuotaId() { if (((org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo()) != null) && ((org.ovirt.engine.core.common.businessentities.storage.Disk.DiskStorageType.IMAGE) == (org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo().getDiskStorageType()))) { org.ovirt.engine.core.compat.Guid quotaId = ((org.ovirt.engine.core.common.businessentities.DiskImage) (org.ovirt.engine.core.bll.AddDiskCommand.getParameters().getDiskInfo())).getQuotaId(); if (!(Guid.Empty.equals(quotaId))) { return quotaId; } } return null; }
@java.lang.Override protected boolean canDoAction() { slaveVolume = getSlaveVolume(); if ((slaveVolume) != null) { setGlusterVolumeId(slaveVolume.getId()); setVdsGroupId(slaveVolume.getClusterId()); } else { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID); } if ((slaveVolume.getStatus()) != (org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus.UP)) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED); } return super.canDoAction(); }



public java.lang.String getIp() { return ip; }
@org.junit.Test public void testNetworksUniquelyConfiguredOnHostWhenUniquelyConfigured() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network networkA = new org.ovirt.engine.core.common.businessentities.network.Network(); networkA.setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.network.Network networkB = new org.ovirt.engine.core.common.businessentities.network.Network(); networkB.setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachmentA = createNetworkAttachment(networkA); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachmentB = createNetworkAttachment(networkB); org.ovirt.engine.core.common.action.HostSetupNetworksParameters params = new org.ovirt.engine.core.common.action.HostSetupNetworksParameters(host.getId()); org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator validator = new org.ovirt.engine.core.bll.network.host.HostSetupNetworksValidator(host, params, java.util.Collections.<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>emptyList(), null, new org.ovirt.engine.core.common.businessentities.BusinessEntityMap(java.util.Arrays.asList(networkA, networkB)), managementNetworkUtil); assertThat(validator.networksUniquelyConfiguredOnHost(java.util.Arrays.asList(networkAttachmentA, networkAttachmentB)), is(true)); }


@org.junit.Test public void testSecuredEventMailSender() { org.ovirt.engine.core.common.businessentities.EventAuditLogSubscriber eventData = new org.ovirt.engine.core.common.businessentities.EventAuditLogSubscriber(); eventData.setlog_time(new java.util.Date()); eventData.setevent_type(0); eventData.setuser_name("a test user name"); eventData.setvm_name("a fine test VM"); eventData.setvds_name("a fine test host"); eventData.setmethod_address("mailtest.redhat@gmail.com"); eventData.setvm_template_name("a test template"); eventData.setstorage_pool_name("a test storage pool name"); eventData.setstorage_domain_name("a test storage pool domain"); eventData.setseverity(3); org.ovirt.engine.core.notifier.utils.NotificationProperties.setDefaults("src/test/resources/conf/notifier-mail-test-secured.conf", "src/test/resources/conf/missing.conf"); org.ovirt.engine.core.notifier.utils.sender.mail.EventSenderMailImpl mailSender = new org.ovirt.engine.core.notifier.utils.sender.mail.EventSenderMailImpl(org.ovirt.engine.core.notifier.utils.NotificationProperties.getInstance()); eventData.setmessage("a test message to be sent via secured mode"); mailSender.send(eventData, null); org.ovirt.engine.core.notifier.utils.sender.EventSenderResult sentResult = null; try { sentResult = mailSender.send(eventData, null); } catch (java.lang.Exception e) { sentResult = new org.ovirt.engine.core.notifier.utils.sender.EventSenderResult(); sentResult.setSent(false); } assertTrue(sentResult.isSent()); }
protected void addVmInterfaces() { org.ovirt.engine.core.bll.network.VmInterfaceManager vmInterfaceManager = new org.ovirt.engine.core.bll.network.VmInterfaceManager(); java.util.List<java.lang.String> invalidNetworkNames = new java.util.ArrayList<java.lang.String>(); java.util.List<java.lang.String> invalidIfaceNames = new java.util.ArrayList<java.lang.String>(); java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.Network> networksInVdsByName = org.ovirt.engine.core.common.businessentities.Entities.entitiesByName(getNetworkDAO().getAllForCluster(getVm().getvds_group_id())); for (org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface : getVm().getInterfaces()) { initInterface(iface); if (!(vmInterfaceManager.isValidVmNetwork(iface, networksInVdsByName))) { invalidNetworkNames.add(iface.getNetworkName()); invalidIfaceNames.add(iface.getName()); iface.setNetworkName(StringUtils.EMPTY); } macAdded = vmInterfaceManager.add(iface, getCompensationContext(), getParameters().isImportAsNewEntity()); } auditInvalidInterfaces(invalidNetworkNames, invalidIfaceNames); }
@org.junit.Before public void setup() { doReturn(diskValidator).when(command).getDiskValidator(disk); doReturn(ValidationResult.VALID).when(diskValidator).isDiskExists(); doReturn(ValidationResult.VALID).when(diskValidator).isDiskAttachedToVm(vm); }
public org.ovirt.engine.core.bll.ValidationResult providerExist() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_PROVIDER_DOESNT_EXIST).when(((providerDao.get(libvirtSecret.getProviderId())) == null)); }
@org.junit.Test public void PctThresholdLessThanZero() { org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings settings = new org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings(); settings.diskSpaceFree = 10; settings.diskSpaceUsed = 0; settings.spaceThresholdGB = 5; settings.spaceThresholdPct = -10; org.ovirt.engine.core.common.businessentities.storage_domains domain = setupForSpaceTest(settings); assertTrue(org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.isBelowThresholds(domain)); }
protected boolean updateVmImSpm() { return org.ovirt.engine.core.bll.VmCommand.updateVmInSpm(org.ovirt.engine.core.bll.ExportVmCommand.getVm().getstorage_pool_id(), java.util.Arrays.asList(org.ovirt.engine.core.bll.ExportVmCommand.getVm()), org.ovirt.engine.core.bll.ExportVmCommand.getParameters().getStorageDomainId()); }
@java.lang.Override public void initialize() { super.initialize(); disableNonChangeableEntities(); getAlias().setEntity(getDisk().getDiskAlias()); getDescription().setEntity(getDisk().getDiskDescription()); getIsShareable().setEntity(getDisk().isShareable()); getIsWipeAfterDelete().setEntity(getDisk().isWipeAfterDelete()); getIsScsiPassthrough().setEntity(getDisk().isScsiPassthrough()); getIsSgIoUnfiltered().setEntity(((getDisk().getSgio()) == (org.ovirt.engine.core.common.businessentities.ScsiGenericIO.UNFILTERED))); getIsReadOnly().setEntity(getDisk().getReadOnly()); if ((getDisk().getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (getDisk())); getDiskStorageType().setEntity(DiskStorageType.IMAGE); getSize().setEntity(((int) (diskImage.getSizeInGigabytes()))); getVolumeType().setSelectedItem(diskImage.getVolumeType()); setVolumeFormat(diskImage.getVolumeFormat()); boolean isExtendImageSizeEnabled = (((getVm()) != null) && (!(diskImage.isDiskSnapshot()))) && (org.ovirt.engine.core.common.VdcActionUtils.canExecute(java.util.Arrays.asList(getVm()), org.ovirt.engine.core.common.businessentities.VM.class, VdcActionType.ExtendImageSize)); getSizeExtend().setIsChangable(isExtendImageSizeEnabled); org.ovirt.engine.core.compat.Guid storageDomainId = diskImage.getStorageIds().get(0); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getStorageDomainById(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel diskModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.DiskModel) (target)); org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (returnValue)); diskModel.getStorageDomain().setSelectedItem(storageDomain); } }, getHash()), storageDomainId); } else { org.ovirt.engine.core.common.businessentities.LunDisk lunDisk = ((org.ovirt.engine.core.common.businessentities.LunDisk) (getDisk())); getDiskStorageType().setEntity(DiskStorageType.LUN); getSize().setEntity(lunDisk.getLun().getDeviceSize()); getSizeExtend().setIsAvailable(false); } updateReadOnlyChangeability(); }
private void callPersistNetworkAttachmentsAndVerifyThatNetworkAttachmentIsSynced(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment, org.ovirt.engine.core.vdsbroker.vdsbroker.HostNetworkAttachmentsPersister persister) { when(networkAttachmentDao.getAllForHost(eq(hostId))).thenReturn(java.util.Collections.singletonList(attachment)); persister.persistNetworkAttachments(); verify(networkAttachmentDao).getAllForHost(any(org.ovirt.engine.core.compat.Guid.class)); verify(networkAttachmentDao).update(argThat(new org.mockito.ArgumentMatcher<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment>() { @java.lang.Override public boolean matches(java.lang.Object o) { if (!(o instanceof org.ovirt.engine.core.common.businessentities.network.NetworkAttachment)) { return false; } org.ovirt.engine.core.common.businessentities.network.IpConfiguration ipConfiguration = org.ovirt.engine.core.utils.NetworkUtils.createIpConfigurationFromVdsNetworkInterface(interfaceWithAttachedClusterNetworkA); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment networkAttachment = ((org.ovirt.engine.core.common.businessentities.network.NetworkAttachment) (o)); return ((((((networkAttachment.getId()) != null) && (networkAttachment.getId().equals(attachment.getId()))) && ((networkAttachment.getNicId()) != null)) && (networkAttachment.getNicId().equals(interfaceWithAttachedClusterNetworkA.getId()))) && (java.util.Objects.equals(networkAttachment.getIpConfiguration(), ipConfiguration))) && (java.util.Objects.equals(networkAttachment.getProperties(), customPropertiesForNics.getCustomPropertiesFor(interfaceWithAttachedClusterNetworkA))); } })); verifyNoMoreInteractions(networkAttachmentDao); }


@org.junit.Test public void testSetDetectEmulatedMachine() { boolean preUpdate = existingCluster.isDetectEmulatedMachine(); boolean updateValue = false; assertNotSame(preUpdate, updateValue); dao.setEmulatedMachine(existingCluster.getId(), existingCluster.getEmulatedMachine(), updateValue); assertEquals(updateValue, dao.get(existingCluster.getId()).isDetectEmulatedMachine()); }


@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__ADD); addCanDoActionMessage(EngineMessage.VAR__TYPE__GLUSTER_BRICK); }
protected void unlockVm() { org.ovirt.engine.core.bll.VmCommand.setVm(null); if ((org.ovirt.engine.core.bll.VmCommand.getVm()) != null) { if ((org.ovirt.engine.core.bll.VmCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.ImageLocked)) { org.ovirt.engine.core.bll.VmHandler.unlockVm(org.ovirt.engine.core.bll.VmCommand.getVm(), org.ovirt.engine.core.bll.VmCommand.getCompensationContext()); } } else { setLoggingForCommand(); log.warn("VmCommand::EndVmCommand: Vm is null - not performing endAction on Vm"); } }




@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__SET); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__GLUSTER_GEOREP_CONFIG); addCanDoActionMessageVariable("configName", getParameters().getConfigKey()); addCanDoActionMessageVariable("geoRepSessionKey", getGeoRepSession().getSessionKey()); addCanDoActionMessageVariable("configValue", getParameters().getConfigValue()); }

@org.junit.Test public void testExecuteCommand() { cmd = spy(new org.ovirt.engine.core.bll.gluster.CommitRemoveGlusterVolumeBricksCommand(new org.ovirt.engine.core.common.action.gluster.GlusterVolumeRemoveBricksParameters(volumeWithRemoveBricksTask, getBricks(volumeWithRemoveBricksTask, 2)))); prepareMocks(cmd); mockBackend(true, null); assertTrue(cmd.canDoAction()); cmd.executeCommand(); verify(cmd, times(1)).endStepJob(); verify(cmd, times(1)).releaseVolumeLock(); assertEquals(cmd.getAuditLogTypeValue(), AuditLogType.GLUSTER_VOLUME_REMOVE_BRICKS_COMMIT); }

protected void disableElement(com.google.gwt.dom.client.Element element) { element.getStyle().setProperty("disabled", "true"); element.getStyle().setColor("#999999"); if ((getNodeDisabledTooltip()) != null) { org.ovirt.engine.ui.common.widget.tooltip.TooltipMixin.addTooltipToElement(com.google.gwt.safehtml.shared.SafeHtmlUtils.fromString(getNodeDisabledTooltip()), element); } }
public org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, org.ovirt.engine.core.compat.Guid vdsId, boolean shouldPrepareAndTeardown) { if (vdsId == null) { vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = null; if (shouldPrepareAndTeardown) { prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } try { qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (resourceManager.runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.log.error("Unable to get qemu image info from storage", e); } finally { if (shouldPrepareAndTeardown) { teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } } return qemuImageInfo; }


private void performDiskUpdate(final boolean unlockImage) { final org.ovirt.engine.core.common.businessentities.Disk disk = org.ovirt.engine.core.bll.UpdateVmDiskCommand.getDiskDao().get(org.ovirt.engine.core.bll.UpdateVmDiskCommand.getParameters().getDiskId()); applyUserChanges(disk); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Object>() { @java.lang.Override public java.lang.Object runInTransaction() { getVmStaticDAO().incrementDbGeneration(getVm().getId()); updateDeviceProperties(); getBaseDiskDao().update(disk); if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE)) { org.ovirt.engine.core.common.businessentities.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.DiskImage) (disk)); diskImage.setQuotaId(getQuotaId()); if (unlockImage && ((diskImage.getImageStatus()) == (org.ovirt.engine.core.common.businessentities.ImageStatus.LOCKED))) { diskImage.setImageStatus(ImageStatus.OK); } getImageDao().update(diskImage.getImage()); updateQuota(diskImage); } reloadDisks(); updateBootOrder(); setSucceeded(true); return null; } private void updateDeviceProperties() { if (updateReadOnlyRequested()) { vmDeviceForVm.setIsReadOnly(getNewDisk().getReadOnly()); getVmDeviceDao().update(vmDeviceForVm); } if ((getOldDisk().getDiskInterface()) != (getNewDisk().getDiskInterface())) { getVmDeviceDao().clearDeviceAddress(getOldDisk().getId()); } } }); }
@java.lang.Override public org.ovirt.engine.core.compat.Guid getMasterStorageDomainIdForPool(org.ovirt.engine.core.compat.Guid pool) { return getStorageDomainIdForPoolByType(pool, StorageDomainType.Master); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.lang.String content = ((java.lang.String) (returnValue)); getContentModel().getContent().setEntity(content); stopProgress(); }
@java.lang.Override protected void executeCommand() { final java.util.List<org.ovirt.engine.core.common.businessentities.storage.CinderDisk> cinderDisks = org.ovirt.engine.core.bll.ImagesHandler.filterDisksBasedOnCinder(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskDao().getAllForVm(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId())); org.ovirt.engine.core.bll.VmTemplateHandler.lockVmTemplateInTransaction(org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getVmTemplateId(), org.ovirt.engine.core.bll.RemoveVmTemplateCommand.getCompensationContext()); if ((!(imageTemplates.isEmpty())) || (!(cinderDisks.isEmpty()))) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { if ((!(imageTemplates.isEmpty())) && (removeVmTemplateImages())) { org.ovirt.engine.core.bll.VmHandler.removeVmInitFromDB(getVmTemplate()); setSucceeded(true); } if (!(cinderDisks.isEmpty())) { removeCinderDisks(cinderDisks); setSucceeded(true); } return null; } }); } else { HandleEndAction(); } }

private void UpdateProperties() { org.ovirt.engine.core.common.businessentities.VDS vds = getEntity(); setOS(vds.gethost_os()); setKernelVersion(vds.getkernel_version()); setKvmVersion(vds.getkvm_version()); setLibvirtVersion(vds.getlibvirt_version()); setVdsmVersion(vds.getVersion()); setSpiceVersion(vds.getspice_version()); setIScsiInitiatorName(vds.getIScsiInitiatorName()); setActiveVms(vds.getvm_active()); setMemoryPageSharing(vds.getksm_state()); setAutomaticLargePage(vds.getTransparentHugePagesState()); setNumberOfCPUs(vds.getcpu_cores()); setCpuName(((vds.getCpuName()) != null ? vds.getCpuName().getCpuName() : null)); setCpuType(vds.getcpu_model()); setSharedMemory(vds.getmem_shared_percent()); setPhysicalMemory(vds.getphysical_mem_mb()); setSwapTotal(vds.getswap_total()); setSwapFree(vds.getswap_free()); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Enable KSM") java.lang.String enableKsmLabel();

@java.lang.Override public java.lang.Object runInTransaction() { final org.ovirt.engine.core.common.businessentities.StorageDomainType sdType = getStorageDomain().getStorageDomainType(); map.setStatus(StorageDomainStatus.Maintenance); getStoragePoolIsoMapDAO().updateStatus(map.getId(), map.getStatus()); if (sdType == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master)) { calcStoragePoolStatusByDomainsStatus(); } if ((sdType == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Data)) || (sdType == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master))) { updateStorageDomainFormat(getStorageDomain()); } registerAllOvfDisks(getAllOVFDisks()); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : unregisteredEntitiesFromOvfDisk) { getUnregisteredOVFDataDao().removeEntity(ovf.getEntityId(), getParameters().getStorageDomainId()); getUnregisteredOVFDataDao().saveOVFData(ovf); log.infoFormat("Adding OVF data of entity id {0} and entity name {1}", ovf.getEntityId(), ovf.getEntityName()); } return null; }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) { return true; } if (obj == null) { return false; } if ((getClass()) != (obj.getClass())) { return false; } org.ovirt.engine.core.common.businessentities.VmPool other = ((org.ovirt.engine.core.common.businessentities.VmPool) (obj)); return (((((((org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(id, other.id)) && ((defaultTimeInDays) == (other.defaultTimeInDays))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(parameters, other.parameters))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(vdsGroupId, other.vdsGroupId))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(description, other.description))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(name, other.name))) && (org.ovirt.engine.core.common.utils.ObjectUtils.objectsEqual(type, other.type))) && ((maxAssignedVmsPerUser) == (other.maxAssignedVmsPerUser)); }
private static void updateNetworkDetailsInInterface(org.ovirt.engine.core.common.businessentities.VDS vds, java.util.Map<java.lang.String, java.lang.Integer> currVlans, java.util.Map<java.lang.String, java.lang.Integer> networkVlans, java.util.Map<java.lang.String, java.lang.Object> network, org.ovirt.engine.core.common.businessentities.Network net, java.lang.String ifaceName) { org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface = null; for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface tempInterface : vds.getInterfaces()) { if (tempInterface.getName().equals(ifaceName)) { iface = tempInterface; break; } } if (iface != null) { iface.setNetworkName(net.getname()); if (currVlans.containsKey(iface.getName())) { networkVlans.put(net.getname(), currVlans.get(iface.getName())); } iface.setAddress(net.getaddr()); iface.setBridged(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.isBridgedNetwork(network)); if (org.apache.commons.lang.StringUtils.equals(iface.getNetworkName(), org.ovirt.engine.core.utils.NetworkUtils.getEngineNetwork())) { iface.setType(((iface.getType()) | (VdsInterfaceType.Management.getValue()))); } iface.setSubnet(net.getsubnet()); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setGatewayIfManagementNetwork(iface, net.getgateway()); java.util.Map<java.lang.String, java.lang.Object> networkConfigAsMap = ((java.util.Map<java.lang.String, java.lang.Object>) (((network.get("cfg")) instanceof java.util.Map) ? network.get("cfg") : null)); org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct networkConfig = (networkConfigAsMap == null) ? null : new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct(networkConfigAsMap); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AddBootProtocol(networkConfig, iface); } }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getDefaultImage() { return org.ovirt.engine.ui.webadmin.widget.table.column.ReasonColumn.getApplicationResources().commentImage(); }
protected org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters buildCreateVmParameters() { org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters parameters = new org.ovirt.engine.core.common.vdscommands.CreateVDSCommandParameters(org.ovirt.engine.core.bll.RunVmCommand.getVdsId(), org.ovirt.engine.core.bll.RunVmCommand.getVm()); parameters.setRunInUnknownStatus(org.ovirt.engine.core.bll.RunVmCommand.getParameters().isRunInUnknownStatus()); parameters.setVmPayload(vmPayload); if ((((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.Sysprep)) && (osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId()))) && (((org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath()) == null) || ("".equals(org.ovirt.engine.core.bll.RunVmCommand.getVm().getFloppyPath())))) { parameters.setInitializationType(InitializationType.Sysprep); } if (((initializationType) == (org.ovirt.engine.core.common.businessentities.InitializationType.CloudInit)) && (!(osRepository.isWindows(org.ovirt.engine.core.bll.RunVmCommand.getVm().getVmOsId())))) { parameters.setInitializationType(InitializationType.CloudInit); } return parameters; }
@java.lang.Override public java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType> getJobSubjectEntityByJobId(org.ovirt.engine.core.compat.Guid jobId) { java.util.List<org.ovirt.engine.core.common.job.JobSubjectEntity> list = multipleResults(getEntityManager().createNamedQuery("JobSubjectEntity.getJobSubjectEntityByJobId", org.ovirt.engine.core.common.job.JobSubjectEntity.class).setParameter("jobId", jobId)); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType> entityMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.VdcObjectType>(); for (org.ovirt.engine.core.common.job.JobSubjectEntity jobSubjectEntity : list) { entityMap.put(jobSubjectEntity.getEntityId(), jobSubjectEntity.getEntityType()); } return entityMap; }

private int getResourceType(org.ovirt.engine.core.utils.ovf.xml.XmlNode node, java.lang.String resource) { if (((node.SelectSingleNode(resource, _xmlNS)) != null) && (!(org.apache.commons.lang.StringUtils.isEmpty(node.SelectSingleNode(resource, _xmlNS).innerText)))) { return java.lang.Integer.parseInt(node.SelectSingleNode(resource, _xmlNS).innerText); } return -1; }
private org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity fetchRemobeBricksStatusDetails() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = runVdsCommand(VDSCommandType.GetGlusterVolumeRemoveBricksStatus, new org.ovirt.engine.core.common.vdscommands.gluster.GlusterVolumeRemoveBricksVDSParameters(getUpServerId(clusterId), volume.getName(), org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRemoveBricksStatusQuery.getParameters().getBricks(), volume.getReplicaCount())); org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity entity = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeTaskStatusEntity) (returnValue.getReturnValue())); org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask asyncTask = volume.getAsyncTask(); if ((asyncTask != null) && ((asyncTask.getTaskId()) != null)) { java.util.List<org.ovirt.engine.core.common.job.Step> stepsList = getStepDao().getStepsByExternalId(asyncTask.getTaskId()); if ((stepsList != null) && (!(stepsList.isEmpty()))) { entity.setStartTime(stepsList.get(0).getStartTime()); } } updateHostIP(entity); return entity; }

@org.junit.Test public void testInterfaceInHostWhenInDifferentHost() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface vdsNetworkInterface = createVdsNetworkInterfaceWithName(); vdsNetworkInterface.setVdsId(org.ovirt.engine.core.compat.Guid.newGuid()); assertThat(new org.ovirt.engine.core.bll.validator.HostInterfaceValidator(vdsNetworkInterface).interfaceInHost(org.ovirt.engine.core.compat.Guid.newGuid()), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.NIC_NOT_EXISTS_ON_HOST)); }
private java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.network.Network> getClusterNetworks() { if ((clusterNetworks) == null) { clusterNetworks = org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getNetworkDAO().getAllForCluster(org.ovirt.engine.core.bll.network.host.HostSetupNetworksCommand.getVdsGroupId())); } return clusterNetworks; }
@java.lang.Override protected boolean canDoAction() { if (org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.shouldSkipCommandExecutionCached()) { return true; } if ((org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm()) == null) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.canRunActionOnNonManagedVm())) { return false; } if (!(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().isRunningOrPaused())) { return org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.failVmStatusIllegal(); } if (((org.ovirt.engine.core.bll.storage.domain.IsoDomainListSyncronizer.getInstance().findActiveISODomain(org.ovirt.engine.core.bll.storage.disk.ChangeDiskCommand.getVm().getStoragePoolId())) == null) && (!(org.apache.commons.lang.StringUtils.isEmpty(cdImagePath)))) { return failCanDoAction(EngineMessage.VM_CANNOT_WITHOUT_ACTIVE_STORAGE_DOMAIN_ISO); } if ((org.apache.commons.lang.StringUtils.isNotEmpty(cdImagePath)) && (!(org.apache.commons.lang.StringUtils.endsWithIgnoreCase(cdImagePath, ValidationUtils.ISO_SUFFIX)))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_INVALID_CDROM_DISK_FORMAT); } return true; }
protected boolean pciAndIdeWithinLimit(org.ovirt.engine.core.common.businessentities.VmStatic vm, java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> allInterfaces) { java.util.List<org.ovirt.engine.core.common.businessentities.Disk> allDisks = org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getDiskDao().getAllForVm(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()); return checkPciAndIdeLimit(vm.getNumOfMonitors(), allInterfaces, allDisks, org.ovirt.engine.core.bll.utils.VmDeviceUtils.isVirtioScsiControllerAttached(org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getVmId()), org.ovirt.engine.core.bll.network.vm.AbstractVmInterfaceCommand.getReturnValue().getCanDoActionMessages()); }
public org.ovirt.engine.core.bll.ValidationResult stpForVmNetworkOnly() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.NON_VM_NETWORK_CANNOT_SUPPORT_STP).unless(((network.isVmNetwork()) || (!(network.getStp())))); }
@java.lang.Override public java.lang.String getLabel() { if (useRadioButtonWidgetLabel) { return asRadioButton().getText(); } else { return super.getLabel(); } }

@org.junit.Test public void canDoActionLunsNotPartOfStorageDomain() { java.util.List lunsFromDb = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("111"); lun1.setStorageDomainId(sdId); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id("222"); lun2.setStorageDomainId(sdId); lunsFromDb.add(lun1); lunsFromDb.add(lun2); when(lunsDao.getAllForVolumeGroup(org.ovirt.engine.core.bll.storage.domain.RefreshLunsSizeCommandTest.STORAGE)).thenReturn(lunsFromDb); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessage.ACTION_TYPE_FAILED_LUNS_NOT_PART_OF_STORAGE_DOMAIN); }
protected boolean isStorageDomainTypeCorrect(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { if ((((storageDomain.getStorageDomainType()) != (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) && ((storageDomain.getStorageDomainType()) != (org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport))) && ((org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool().getStorageType()) != (storageDomain.getStorageType()))) { addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_ATTACH_STORAGE_DOMAIN_STORAGE_TYPE_NOT_MATCH); return false; } return true; }
private boolean insertSharedLock(java.lang.String key, boolean isCheckOnly) { boolean result = true; org.ovirt.engine.core.bll.lock.InMemoryLockManager.InternalLockView lock = locks.get(key); if (lock != null) { if (!isCheckOnly) { lock.increaseCount(); } else if (lock.getExclusive()) { result = false; } } else if (!isCheckOnly) { locks.put(key, new org.ovirt.engine.core.bll.lock.InMemoryLockManager.InternalLockView(1, false)); } return result; }
@java.lang.Override public void handleRequest(io.undertow.server.HttpServerExchange exchange) throws java.lang.Exception { if (!(exchange.getRequestHeaders().getFirst("Authorization").equals(("Bearer " + (org.ovirt.engine.sdk4.ServerTest.TOKEN))))) { exchange.setStatusCode(401); exchange.getResponseSender().send(""); } else { java.lang.Thread.sleep(delay); exchange.setStatusCode(code); exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, "application/xml"); exchange.getResponseSender().send(body); } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel> profilesModels = new java.util.LinkedList<org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel>(); for (org.ovirt.engine.core.common.businessentities.network.VnicProfileView profileView : ((java.util.List<org.ovirt.engine.core.common.businessentities.network.VnicProfileView>) (returnValue))) { org.ovirt.engine.ui.uicommonweb.models.profiles.VnicProfileModel editModel = new org.ovirt.engine.ui.uicommonweb.models.profiles.EditVnicProfileModel(getSourceListModel(), getSelectedDc().getcompatibility_version(), profileView, false); profilesModels.add(editModel); editModel.getName().setIsChangable(false); } if (profilesModels.isEmpty()) { profilesModels.add(new org.ovirt.engine.ui.uicommonweb.models.profiles.NewVnicProfileModel(getSourceListModel(), getSelectedDc().getcompatibility_version(), false)); } getProfiles().setItems(profilesModels); originalProfileModels = profilesModels; }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Blank Template cannot be copied") java.lang.String blankTemplateCannotBeCopied();
@org.junit.Test public void qosNotSupported() { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork(org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME); mockExistingNetworks(network); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNicSyncedWithNetwork("eth0", network); mockExistingIfaces(iface); iface.setQosOverridden(true); org.ovirt.engine.core.bll.network.host.SetupNetworksHelper helper = createHelper(createParametersForNics(iface)); validateAndExpectViolation(helper, VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_NOT_SUPPORTED, org.ovirt.engine.core.bll.network.host.SetupNetworksHelperTest.MANAGEMENT_NETWORK_NAME); }
private boolean executeSshPowerDown(java.lang.String version) { boolean ret = false; try (final org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient();final java.io.ByteArrayOutputStream cmdOut = new java.io.ByteArrayOutputStream();final java.io.ByteArrayOutputStream cmdErr = new java.io.ByteArrayOutputStream()) { try { log.info("Opening SSH power down session on host {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName()); sshClient.setVds(org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.connect(); sshClient.authenticate(); log.info("Executing SSH power down command on host {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName()); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.SshVdsPowerdownCommand, version), null, cmdOut, cmdErr); ret = true; } catch (java.lang.Exception ex) { log.error("SSH power down command failed on host \'{}\': {}\nStdout: {}\nStderr: {}", org.ovirt.engine.core.bll.VdsPowerDownCommand.getVds().getHostName(), ex.getMessage(), cmdOut, cmdErr); log.debug("Exception", ex); } } catch (java.io.IOException e) { log.error("IOException", e); } return ret; }

@java.lang.Override protected void convert() { boolean useVirtV2V = (org.ovirt.engine.core.bll.exportimport.ImportVmFromOvaCommand.getParameters().getVm().getOrigin()) != (org.ovirt.engine.core.common.businessentities.OriginType.OVIRT); if (useVirtV2V) { commandCoordinatorUtil.executeAsyncCommand(ActionType.ConvertOva, buildConvertOvaParameters(), org.ovirt.engine.core.bll.exportimport.ImportVmFromOvaCommand.cloneContextAndDetachFromParent()); } else { commandCoordinatorUtil.executeAsyncCommand(ActionType.ExtractOva, buildExtractOvaParameters(), org.ovirt.engine.core.bll.exportimport.ImportVmFromOvaCommand.cloneContextAndDetachFromParent()); } }
private static boolean isRequiredInterfaceDown(java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.Network> networksByName, java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> interfaces, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface) { if ((((((iface.getStatistics().getStatus()) != (org.ovirt.engine.core.common.businessentities.network.InterfaceStatus.UP)) && ((iface.getNetworkName()) != null)) && ((iface.getBonded()) == null)) && (!(org.ovirt.engine.core.vdsbroker.NetworkMonitoringHelper.isBondOrVlanOverBond(iface, interfaces)))) && (networksByName.containsKey(iface.getNetworkName()))) { org.ovirt.engine.core.common.businessentities.network.Network net = networksByName.get(iface.getNetworkName()); if ((((net.getCluster().getStatus()) == (org.ovirt.engine.core.common.businessentities.network.NetworkStatus.OPERATIONAL)) && (net.getCluster().isRequired())) && (((iface.getVlanId()) == null) || (!(org.ovirt.engine.core.vdsbroker.NetworkMonitoringHelper.isVlanInterfaceUp(iface, interfaces))))) { return true; } } return false; }
private boolean fetchStorageDomainInfo() { org.ovirt.engine.core.common.queries.VdcQueryReturnValue allDomainsQuery = org.ovirt.engine.core.bll.ImportHostedEngineStorageDomainCommand.getBackend().runInternalQuery(VdcQueryType.GetExistingStorageDomainList, new org.ovirt.engine.core.common.queries.GetExistingStorageDomainListParameters(org.ovirt.engine.core.bll.ImportHostedEngineStorageDomainCommand.getParameters().getVdsId(), null, org.ovirt.engine.core.common.businessentities.StorageDomainType.Data, null)); if (allDomainsQuery.getSucceeded()) { for (org.ovirt.engine.core.common.businessentities.StorageDomain sd : ((java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain>) (allDomainsQuery.getReturnValue()))) { if (sd.getName().equals(org.ovirt.engine.core.common.config.Config.<java.lang.String>getValue(ConfigValues.HostedEngineStorageDomainName))) { heStorageDomain = sd; return true; } } } else { log.error(("Failed query for all Storage Domains." + " The import command can not proceed without this info")); } return false; }
void registerSelectionChangeHandler(final org.ovirt.engine.ui.common.widget.action.ActionButtonDefinition<T> buttonDef) { final org.ovirt.engine.ui.uicompat.IEventListener itemSelectionChangeHandler = new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { buttonDef.update(); } }; addSelectionChangeListener(itemSelectionChangeHandler); }

@org.junit.Test public void testVmOvfCreationBackwardCompatilibily() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.utils.ovf.OvfManagerTest.createVM(); java.lang.String xml = manager.ExportVm(vm, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(), Version.v3_0); assertNotNull(xml); final org.ovirt.engine.core.common.businessentities.VM newVm = new org.ovirt.engine.core.common.businessentities.VM(); manager.ImportVm(xml, newVm, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(), new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface>()); org.ovirt.engine.core.utils.ovf.OvfManagerTest.assertVm(vm, newVm, vm.getDbGeneration()); }


@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> list = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>) (result)); org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterStorageListModel dcStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterStorageListModel) (model)); java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> models; models = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> items = ((dcStorageModel.getItems()) != null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.StorageDomain>cast(dcStorageModel.getItems())) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); for (org.ovirt.engine.core.common.businessentities.StorageDomain a : list) { if (!(org.ovirt.engine.ui.uicommonweb.Linq.isSDItemExistInList(items, a.getId()))) { org.ovirt.engine.ui.uicommonweb.models.EntityModel tempVar = new org.ovirt.engine.ui.uicommonweb.models.EntityModel(); tempVar.setEntity(a); models.add(tempVar); } } dcStorageModel.postAttachInternal(models); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__REMOVE); addCanDoActionMessage(EngineMessage.VAR__TYPE__PROVIDER); }

public void reuseSession() { java.lang.String sessionId = getSessionId(); if (sessionId != null) { org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionAcquiredEvent.fire(eventBus, sessionId); scheduleKeepAliveHeartbeat(); } else { org.ovirt.engine.ui.webadmin.plugin.restapi.RestApiSessionManager.logger.severe("Engine REST API session ID is not available"); } }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getDeviceList(java.util.List<java.lang.String> lunsIds) { if ((AbstractSyncLunsCommand.getParameters().getDeviceList()) == null) { return runGetDeviceList(lunsIds); } if (lunsIds == null) { return AbstractSyncLunsCommand.getParameters().getDeviceList(); } java.util.Set<java.lang.String> lunsIdsSet = new java.util.HashSet<>(lunsIds); return AbstractSyncLunsCommand.getParameters().getDeviceList().stream().filter(( lun) -> lunsIdsSet.contains(lun.getId())).collect(java.util.stream.Collectors.toList()); }
public java.util.List<org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapQueryData> getLdapQueriesData(java.lang.String domain) { int queryLimit = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxLDAPQueryPartsNumber); java.util.List<org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapQueryData> results = new java.util.ArrayList<org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapQueryData>(); org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapQueryData subQueryData = new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapQueryDataImpl(); java.util.ArrayList<java.lang.Object> filterParameters = new java.util.ArrayList<java.lang.Object>(); int counter = 0; for (org.ovirt.engine.core.compat.Guid identifier : ldapIdentifiers) { filterParameters.add(identifier); if (counter >= queryLimit) { subQueryData.setFilterParameters(filterParameters.toArray()); subQueryData.setLdapQueryType(LdapQueryType.getUsersByUserGuids); subQueryData.setBaseDNParameters(null); subQueryData.setDomain(domain); results.add(subQueryData); subQueryData = new org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapQueryDataImpl(); filterParameters = new java.util.ArrayList<java.lang.Object>(); counter = 0; } counter++; } if (!(filterParameters.isEmpty())) { subQueryData.setFilterParameters(filterParameters.toArray()); subQueryData.setLdapQueryType(LdapQueryType.getUsersByUserGuids); subQueryData.setBaseDNParameters(null); subQueryData.setDomain(domain); results.add(subQueryData); } return results; }

@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Role role) { validateParameters(role, "id|name"); if (!(role.isSetId())) { org.ovirt.engine.core.common.businessentities.roles entity = getEntity(org.ovirt.engine.core.common.businessentities.roles.class, VdcQueryType.GetRoleByName, new org.ovirt.engine.core.common.queries.MultilevelAdministrationByRoleNameParameters(role.getName()), role.getName()); role.setId(entity.getId().toString()); } return performCreation(VdcActionType.AddSystemPermission, new org.ovirt.engine.core.common.action.PermissionsOperationsParametes(newPermission(role.getId())), new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetPermissionById, org.ovirt.engine.core.common.queries.MultilevelAdministrationByPermissionIdParameters.class)); }


@java.lang.Override protected void executeCommand() { boolean isDomainUpdateRequired = doDomainsUseConnection(); org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap map = getStoragePoolIsoMap(); if (isDomainUpdateRequired) { changeStorageDomainStatusInTransaction(map, StorageDomainStatus.Locked); } boolean hasConnectStorageSucceeded = connectToStorage(); org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValueUpdatedStorageDomain = null; if (!hasConnectStorageSucceeded) { org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionCommand.setSucceeded(false); org.ovirt.engine.core.common.errors.VdcFault f = new org.ovirt.engine.core.common.errors.VdcFault(); f.setError(VdcBllErrors.StorageServerConnectionError); org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionCommand.getReturnValue().setFault(f); return; } if (isDomainUpdateRequired) { returnValueUpdatedStorageDomain = getStatsForDomain(); if (returnValueUpdatedStorageDomain.getSucceeded()) { final org.ovirt.engine.core.common.businessentities.StorageDomain updatedStorageDomain = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (returnValueUpdatedStorageDomain.getReturnValue())); executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { getStorageDomainDynamicDao().update(updatedStorageDomain.getStorageDynamicData()); return null; } }); } else { restoreStateAfterUpdate(map, false); return; } } getStorageConnDao().update(org.ovirt.engine.core.bll.storage.UpdateStorageServerConnectionCommand.getParameters().getStorageServerConnection()); restoreStateAfterUpdate(map, true); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.Cluster model, org.ovirt.engine.api.model.Cluster transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getComment(), transform.getComment()); assertNotNull(transform.getCpu()); assertEquals(model.getCpu().getId(), transform.getCpu().getId()); assertNotNull(transform.getDataCenter()); assertEquals(model.getDataCenter().getId(), transform.getDataCenter().getId()); assertNotNull(transform.getSchedulingPolicy()); assertEquals(model.getSchedulingPolicy().getPolicy(), transform.getSchedulingPolicy().getPolicy()); assertEquals(model.getErrorHandling().getOnError(), transform.getErrorHandling().getOnError()); assertNotNull(transform.getMemoryPolicy()); assertNotNull(transform.getMemoryPolicy().getTransparentHugepages()); assertEquals(transform.getMemoryPolicy().getTransparentHugepages().isEnabled(), transform.getMemoryPolicy().getTransparentHugepages().isEnabled()); assertEquals(model.isVirtService(), transform.isVirtService()); assertEquals(model.isGlusterService(), transform.isGlusterService()); assertEquals(model.isTunnelMigration(), transform.isTunnelMigration()); assertEquals(model.isTrustedService(), transform.isTrustedService()); assertEquals(model.isBallooningEnabled(), transform.isBallooningEnabled()); }

@java.lang.Override public void setHasSelectedTags(boolean hasSelectedTags) { if (hasSelectedTags) { searchBoxPanel.addStyleName(style.searchBoxPanel_HasSelectedTags()); searchBoxClear.addStyleName(style.searchBoxClear_HasSelectedTags()); } else { searchBoxPanel.setStyleName(style.searchBoxPanel()); searchBoxClear.setStyleName(style.searchBoxClear()); } }
@javax.annotation.PostConstruct private void init() { org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Start initializing {}", getClass().getSimpleName()); java.util.Calendar calendar = new java.util.GregorianCalendar(); java.util.Date commandEntityCleanupTime = org.ovirt.engine.core.common.config.Config.<org.ovirt.engine.core.compat.DateTime>getValue(ConfigValues.CommandEntityCleanupTime); calendar.setTimeInMillis(commandEntityCleanupTime.getTime()); java.lang.String cronExpression = java.lang.String.format("%d %d %d * * ?", calendar.get(java.util.Calendar.SECOND), calendar.get(java.util.Calendar.MINUTE), calendar.get(java.util.Calendar.HOUR_OF_DAY)); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Setting command entity cleanup manager to run at: {}", cronExpression); schedulerUtil.scheduleACronJob(this, "onTimer", new java.lang.Class[]{ }, new java.lang.Object[]{ }, cronExpression); org.ovirt.engine.core.bll.CommandEntityCleanupManager.log.info("Finished initializing {}", getClass().getSimpleName()); }
@java.lang.Override protected void verify(org.ovirt.engine.api.model.DataCenter model, org.ovirt.engine.api.model.DataCenter transform) { assertNotNull(transform); assertEquals(model.getName(), transform.getName()); assertEquals(model.getId(), transform.getId()); assertEquals(model.getDescription(), transform.getDescription()); assertEquals(model.getComment(), transform.getComment()); assertEquals(model.isLocal(), transform.isLocal()); assertEquals(model.getStorageFormat(), transform.getStorageFormat()); assertEquals(model.getMacPool().getId(), transform.getMacPool().getId()); assertEquals(model.getQuotaMode(), transform.getQuotaMode()); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { boolean openStackNetProvider = isTypeOpenStackNetwork(); getTenantName().setIsAvailable(openStackNetProvider); getPluginType().setIsAvailable(openStackNetProvider); }


public void postOnSetupNetworks() { final org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel) (sourceListModel.getWindow())); org.ovirt.engine.core.common.action.SetupNetworksParameters params = new org.ovirt.engine.core.common.action.SetupNetworksParameters(); params.setInterfaces(model.getAllNics()); params.setCheckConnectivity(model.getCheckConnectivity().getEntity()); params.setConectivityTimeout(model.getConnectivityTimeout().getEntity()); params.setVdsId(getEntity().getId()); params.setNetworksToSync(model.getNetworksToSync()); model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(VdcActionType.SetupNetworks, params, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result.getReturnValue(); if ((returnValueBase != null) && (returnValueBase.getSucceeded())) { org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> commitChanges = model.getCommitChanges(); if (commitChanges.getEntity()) { new org.ovirt.engine.ui.uicommonweb.models.hosts.SaveNetworkConfigAction(sourceListModel, model, getEntity()).execute(); } else { model.stopProgress(); sourceListModel.setWindow(null); sourceListModel.search(); } } else { model.stopProgress(); } } }); }
protected org.ovirt.engine.ui.common.widget.table.SimpleActionTable<T> createActionTable() { return new org.ovirt.engine.ui.common.widget.table.SimpleActionTable<T>(modelProvider, org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.instance().getEventBus(), org.ovirt.engine.ui.userportal.gin.ClientGinjectorProvider.instance().getClientStorage()); }


@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to edit Logical Networks properties within the Cluster (e.g. non-required or display network)") java.lang.String allowToEditLogicalNetworksForTheClusterRoleTreeTooltip();

protected boolean prepareFailureMessageForDomains(java.lang.String domainNames) { org.ovirt.engine.core.bll.storage.RemoveStorageServerConnectionCommand.addCanDoActionMessageVariable("domainNames", domainNames); return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS); }
@org.junit.Test public void lowerVersion() { storagePoolWithLowerVersion(); canDoActionFailed(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_DECREASE_COMPATIBILITY_VERSION.toString()); }
private void create(long timestamp) throws java.io.IOException { java.io.File temp = null; java.io.OutputStream os = null; try { temp = java.io.File.createTempFile(this.archive.getName(), "tmp", this.archive.getParentFile()); os = new java.io.FileOutputStream(temp); org.ovirt.engine.core.utils.archivers.tar.Tar.doTar(os, this.dir); } catch (java.io.IOException e) { java.lang.String message = java.lang.String.format("Cannot create tarball '%1$s'", this.archive); org.ovirt.engine.core.utils.archivers.tar.CachedTar.log.error(message, e); throw new java.io.IOException(message, e); } finally { try { if (os != null) { os.close(); } } catch (java.io.IOException e) { org.ovirt.engine.core.utils.archivers.tar.CachedTar.log.error(java.lang.String.format("Cannot close '%1$s'", temp), e); } } try { if (!(temp.setLastModified(timestamp))) { throw new java.io.IOException(java.lang.String.format("Cannot set last modified '%1$s' to '%2$d'", temp.getCanonicalPath(), timestamp)); } if (!(temp.renameTo(this.archive))) { throw new java.io.IOException(java.lang.String.format("Cannot rename '%1$s' to '%2$s'", temp.getCanonicalPath(), archive.getCanonicalPath())); } temp = null; } catch (java.io.IOException e) { org.ovirt.engine.core.utils.archivers.tar.CachedTar.log.error(e); throw e; } finally { if ((temp != null) && (!(temp.delete()))) { org.ovirt.engine.core.utils.archivers.tar.CachedTar.log.error(java.lang.String.format("Cannot delete '%1$s'", temp.getAbsolutePath())); } } }
private static void SetVmTemplateStatus(org.ovirt.engine.core.compat.Guid vmTemplateGuid, org.ovirt.engine.core.common.businessentities.VmTemplateStatus status, org.ovirt.engine.core.bll.context.CompensationContext compensationContext) { org.ovirt.engine.core.common.businessentities.VmTemplate vmTemplate = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().get(vmTemplateGuid); if (vmTemplate != null) { if (compensationContext != null) { compensationContext.snapshotEntityStatus(vmTemplate); } vmTemplate.setStatus(status); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().update(vmTemplate); } else { org.ovirt.engine.core.bll.VmTemplateHandler.log.warnFormat("VmTemplateHandler::SetVmTemplateStatus: vmTemplate is null, not setting status '{0}' to vmTemplate", status); } }
@org.junit.Test public void checkInvalidAddress() { assertFalse(underTest.test(generateVdsNetworkInterface(org.ovirt.engine.core.utils.network.predicate.AbstractVdsNetworkInterfacePredicateTest.INVALID))); }


@org.junit.Test public void testAttachFailDomainAlreadyInPool() { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap> isoMap = new java.util.ArrayList<>(); isoMap.add(new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap()); when(storagePoolIsoMapDao.getAllForStorage(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(isoMap); org.ovirt.engine.core.bll.ValidationResult attachedDomainInsertionResult = validator.validateDomainCanBeAttachedToPool(); assertFalse("Attaching domain that is already in a pool succeeded while it should have failed", attachedDomainInsertionResult.isValid()); assertFailingMessage("Attaching domain that is already in a pool failed with the wrong message", attachedDomainInsertionResult, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> getAllTemplatesRelatedToQuotaId(org.ovirt.engine.core.compat.Guid quotaId) { return getCallsHandler().executeReadList("GetAllVmTemplatesRelatedToQuotaId", org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("quota_id", quotaId)); }

protected org.ovirt.engine.api.model.Templates mapCollection(java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> entities) { org.ovirt.engine.api.model.Templates collection = new org.ovirt.engine.api.model.Templates(); for (org.ovirt.engine.core.common.businessentities.VmTemplate entity : entities) { collection.getTemplates().add(addLinks(populate(map(entity), entity))); } return collection; }
private void addDefaultNetworks() { org.ovirt.engine.core.common.businessentities.network.Network net = new org.ovirt.engine.core.common.businessentities.network.Network(); net.setId(org.ovirt.engine.core.compat.Guid.newGuid()); net.setName(org.ovirt.engine.core.utils.NetworkUtils.getEngineNetwork()); net.setDescription(AddVdsGroupCommand.DefaultNetworkDescription); net.setDataCenterId(org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand.getStoragePool().getId()); net.setVmNetwork(true); org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand.getNetworkDAO().save(net); org.ovirt.engine.core.bll.network.cluster.NetworkHelper.addPermissions(org.ovirt.engine.core.bll.storage.AddEmptyStoragePoolCommand.getCurrentUser().getUserId(), net.getId(), true); }

@java.lang.Override protected void executeCommand() { addVmToDb(); processImages(); setSucceeded(true); }

@com.google.gwt.i18n.client.Messages.DefaultMessage("For Desktop Load - Enable memory page sharing to {0}%") java.lang.String clusterPopupMemoryOptimizationForDesktopLabel(java.lang.String a);
protected java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> getVdsGroups() { return getBackendCollection(VdcQueryType.GetVdsGroupsByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId)); }
@org.junit.Test public void noClusterServiceDefined() { assertThat(validator.clusterServiceDefined(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.VDS_GROUP_AT_LEAST_ONE_SERVICE_MUST_BE_ENABLED)); }
@javax.ws.rs.Path("{action: (undelete)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.Permission p = org.ovirt.engine.core.bll.RemovePermissionCommand.getPermissionDao().get(org.ovirt.engine.core.bll.RemovePermissionCommand.getParameters().getPermission().getId()); if (org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.isLastSuperUserPermission(p.getRoleId())) { org.ovirt.engine.core.bll.RemovePermissionCommand.getReturnValue().getCanDoActionMessages().add(EngineMessage.ERROR_CANNOT_REMOVE_LAST_SUPER_USER_ROLE.toString()); returnValue = false; } else if ((p.getRoleType().equals(RoleType.ADMIN)) && (!(org.ovirt.engine.core.bll.RemovePermissionCommand.isSystemSuperUser()))) { addCanDoActionMessage(EngineMessage.PERMISSION_REMOVE_FAILED_ONLY_SYSTEM_SUPER_USER_CAN_REMOVE_ADMIN_ROLES); returnValue = false; } return returnValue; }
@java.lang.Override protected org.ovirt.engine.core.common.action.LockProperties applyLockProperties(org.ovirt.engine.core.common.action.LockProperties lockProperties) { org.ovirt.engine.core.common.action.LockProperties.Scope scope = (org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.getParameters().isSkipLock()) ? org.ovirt.engine.core.common.action.LockProperties.Scope.None : org.ovirt.engine.core.common.action.LockProperties.Scope.Execution; return lockProperties.withScope(scope); }
private static void updateDBUserFromADUser(org.ovirt.engine.core.common.businessentities.DbUser dbUser, org.ovirt.engine.core.common.businessentities.LdapUser ldapUser, java.util.HashSet<org.ovirt.engine.core.compat.Guid> updatedUsers) { boolean succeeded = false; if ((ldapUser == null) || (!(ldapUser.getUserId().equals(dbUser.getExternalId())))) { if ((dbUser.getStatus()) != 0) { org.ovirt.engine.core.bll.DbUserCacheManager.log.warnFormat("User {0} not found in directory server, its status switched to InActive", dbUser.getFirstName()); dbUser.setStatus(0); succeeded = true; } } else { if ((dbUser.getStatus()) == 0) { org.ovirt.engine.core.bll.DbUserCacheManager.log.warnFormat("Inactive User {0} found in directory server, its status switched to Active", dbUser.getFirstName()); dbUser.setStatus(1); succeeded = true; } if (!(org.apache.commons.lang.StringUtils.equals(dbUser.getFirstName(), ldapUser.getName()))) { dbUser.setFirstName(ldapUser.getName()); succeeded = true; } if (!(org.apache.commons.lang.StringUtils.equals(dbUser.getLastName(), ldapUser.getSurName()))) { dbUser.setLastName(ldapUser.getSurName()); succeeded = true; } if (!(org.apache.commons.lang.StringUtils.equals(dbUser.getDomain(), ldapUser.getDomainControler()))) { dbUser.setDomain(ldapUser.getDomainControler()); succeeded = true; } if (!(org.apache.commons.lang.StringUtils.equals(dbUser.getLoginName(), ldapUser.getUserName()))) { dbUser.setLoginName(ldapUser.getUserName()); succeeded = true; } if (!(org.apache.commons.lang.StringUtils.equals(dbUser.getGroupNames(), ldapUser.getGroup()))) { dbUser.setGroupNames(ldapUser.getGroup()); succeeded = true; updatedUsers.add(dbUser.getId()); } if (!(org.apache.commons.lang.StringUtils.equals(dbUser.getDepartment(), ldapUser.getDepartment()))) { dbUser.setDepartment(ldapUser.getDepartment()); succeeded = true; } if (!(org.apache.commons.lang.StringUtils.equals(dbUser.getRole(), ldapUser.getTitle()))) { dbUser.setRole(ldapUser.getTitle()); succeeded = true; } if (!(org.apache.commons.lang.StringUtils.equals(dbUser.getEmail(), ldapUser.getEmail()))) { dbUser.setEmail(ldapUser.getEmail()); succeeded = true; } if (!(org.apache.commons.lang.StringUtils.equals(dbUser.getGroupIds(), ldapUser.getGroupIds()))) { dbUser.setGroupIds(ldapUser.getGroupIds()); succeeded = true; } if (succeeded) { dbUser.setStatus(((dbUser.getStatus()) + 1)); } } if (succeeded) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDbUserDao().update(dbUser); } }
@org.junit.Test public void networkNotInVfsConfigNotValid() { networkInVfsConfigCommonTest(true); assertThat(validator.networkNotInVfsConfig(org.ovirt.engine.core.bll.validator.VfsConfigValidatorTest.NETWORK_ID), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_ALREADY_IN_VFS_CONFIG, java.lang.String.format(VfsConfigValidator.NIC_NAME_REPLACEMENT, nic.getName()), java.lang.String.format(VfsConfigValidator.NETWORK_NAME_REPLACEMENT, network.getName()))); }
@java.lang.Override protected java.util.Map<java.lang.String, java.lang.String> getExclusiveLocks() { return java.util.Collections.singletonMap(org.ovirt.engine.core.bll.gluster.GlusterCommandBase.getVdsGroupId().toString(), LockingGroup.GLUSTER.name()); }

public void setContentType(java.lang.String contentType) { if (contentType != null) { if (contentType.toLowerCase().contains("binary")) { this.contentType = GlusterHookContentType.BINARY; } else { this.contentType = GlusterHookContentType.TEXT; } } }


@java.lang.Override public void onSuccess(final org.ovirt.engine.core.common.action.VdcReturnValueBase result) { org.ovirt.engine.ui.frontend.Frontend.logger.finer("Succesful returned result from Login."); org.ovirt.engine.ui.frontend.Frontend.setLoggedInUser(null); callback.getDel().onSuccess(callback.getModel(), result); if (((org.ovirt.engine.ui.frontend.Frontend.getLoginHandler()) != null) && (result.getSucceeded())) { org.ovirt.engine.ui.frontend.Frontend.getLoginHandler().onLoginSuccess(userName, password, domain); } }
private boolean primaryAddressNotSet() { return (!(hasIpConfiguration())) || (!(getIpConfiguration().hasPrimaryAddressSet())); }
private java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage>> getStorageToDiskMap() { java.util.Map<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage>> storageToDisksMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage>>(); for (org.ovirt.engine.core.common.businessentities.DiskImage disk : getSourceImages()) { org.ovirt.engine.core.utils.collections.MultiValueMapUtils.addToMap(disk.getStorageIds().get(0), disk, storageToDisksMap); } return storageToDisksMap; }

private java.util.Map<java.util.function.Consumer<java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>>, java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs>> getLunsToUpdateInDb(org.ovirt.engine.core.compat.Guid lunFromVgLunId, org.ovirt.engine.core.compat.Guid lunFromDbLunId, org.ovirt.engine.core.compat.Guid lunFromVgPvId, org.ovirt.engine.core.compat.Guid lunFromDbPvId) { setLunsIds(lunFromVgLunId, lunFromDbLunId, lunFromVgPvId, lunFromDbPvId); return getLunsToUpdateInDb(); }
@java.lang.Override public void updateStep(final org.ovirt.engine.core.common.job.Step step) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { try { jobDao.updateJobLastUpdateTime(step.getJobId(), new java.util.Date()); stepDao.update(step); } catch (java.lang.Exception e) { org.ovirt.engine.core.bll.job.JobRepositoryImpl.log.errorFormat("Failed to update step {0}, {1}.", step.getId(), step.getStepName(), e); } return null; } }); }
@java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object returnValue) { if (!(((org.ovirt.engine.core.common.businessentities.VDSGroup) (getCluster().getSelectedItem())).getId().equals(cluster.getId()))) { return; } java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hostList = ((java.util.List<org.ovirt.engine.core.common.businessentities.VDS>) (returnValue)); for (org.ovirt.engine.core.common.businessentities.VDS host : hostList) { if ((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) { getAddBricksCommand().setIsExecutionAllowed(true); setMessage(null); return; } } getAddBricksCommand().setIsExecutionAllowed(false); setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().volumeEmptyClusterValidationMsg()); }
private boolean isConsoleCommandsExecutionAllowed() { final java.util.List<org.ovirt.engine.core.common.businessentities.VM> list = getSelectedItems(); if (list == null) { return false; } for (org.ovirt.engine.core.common.businessentities.VM vm : list) { if (consoleModelsCache.getVmConsolesForVm(vm).canConnectToConsole()) { return true; } } return false; }
@java.lang.Override protected void endSuccessfully() { HandleEndAction(); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((id) == null ? 0 : id.hashCode()); result = (prime * result) + ((created) == null ? 0 : created.hashCode()); return result; }
@java.lang.Override public void setMainTabSelectedItem(org.ovirt.engine.core.common.businessentities.VDSGroup selectedItem) { org.ovirt.engine.ui.webadmin.section.main.view.tab.cluster.SubTabClusterGeneralView.Driver.driver.edit(getDetailModel()); formBuilder.showForm(getDetailModel()); if (selectedItem.supportsVirtService()) { if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.PowerSave)) { setVisibility(true); leftSlider.setValue(selectedItem.getlow_utilization()); rightSlider.setValue(selectedItem.gethigh_utilization()); policyTimeLabel.setText((((((constants.clusterPolicyForTimeLabel()) + " ") + (selectedItem.getcpu_over_commit_duration_minutes())) + " ") + (constants.clusterPolicyMinTimeLabel()))); policyFieldLabel.setText(constants.clusterPolicyPowSaveLabel()); } else if (selectedItem.getselection_algorithm().equals(VdsSelectionAlgorithm.EvenlyDistribute)) { setVisibility(true); leftSlider.setVisible(false); leftDummySlider.setVisible(true); rightSlider.setValue(selectedItem.gethigh_utilization()); policyTimeLabel.setText((((((constants.clusterPolicyForTimeLabel()) + " ") + (selectedItem.getcpu_over_commit_duration_minutes())) + " ") + (constants.clusterPolicyMinTimeLabel()))); policyFieldLabel.setText(constants.clusterPolicyEvenDistLabel()); } else { setVisibility(false); policyFieldLabel.setText(constants.clusterPolicyNoneLabel()); } } policyPanel.setVisible(selectedItem.supportsVirtService()); volumeSummaryPanel.setVisible(selectedItem.supportsGlusterService()); }
private void removeHostedEngineLunDisk() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.BaseDisk> disks = org.ovirt.engine.core.bll.ImportHostedEngineStorageDomainCommand.getDbFacade().getBaseDiskDao().getDisksByAlias(StorageConstants.HOSTED_ENGINE_LUN_DISK_ALIAS); if ((disks != null) && (!(disks.isEmpty()))) { org.ovirt.engine.core.common.businessentities.storage.BaseDisk heDirectLun = disks.get(0); org.ovirt.engine.core.common.action.VdcReturnValueBase removeDisk = org.ovirt.engine.core.bll.ImportHostedEngineStorageDomainCommand.getBackend().runInternalAction(VdcActionType.RemoveDisk, new org.ovirt.engine.core.common.action.RemoveDiskParameters(heDirectLun.getId())); if (!(removeDisk.getSucceeded())) { org.ovirt.engine.core.bll.ImportHostedEngineStorageDomainCommand.setSucceeded(false); log.error("Failed to remove the hosted engine direct lun disk"); } } }
public java.util.List<java.lang.String> validate() { for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface : params.getInterfaces()) { java.lang.String name = iface.getName(); if (addInterfaceToProcessedList(iface)) { if (isBond(iface)) { extractBondIfModified(iface, name); } else { if (org.apache.commons.lang.StringUtils.isNotBlank(iface.getBondName())) { extractBondSlave(iface); } java.lang.String nameWithoutVlanId = org.ovirt.engine.core.utils.NetworkUtils.StripVlan(name); if (!(getExistingIfaces().containsKey(nameWithoutVlanId))) { addViolation(VdcBllMessages.NETWORK_INTERFACES_DONT_EXIST, nameWithoutVlanId); } } if ((violations.isEmpty()) && (org.apache.commons.lang.StringUtils.isNotBlank(iface.getNetworkName()))) { extractNetwork(iface); } } } validateBondSlavesCount(); extractRemovedNetworks(); extractRemovedBonds(); detectSlaveChanges(); return translateViolations(); }
@java.lang.Override public boolean canBeSelected() { boolean hasVmSpiceSupport = java.lang.Boolean.TRUE.equals(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().hasSpiceSupport(getEntity().getOs(), getEntity().getVdsGroupCompatibilityVersion())); return (getEntity().getGraphicsInfos().containsKey(GraphicsType.SPICE)) && hasVmSpiceSupport; }

protected void updateTimeZone() { updateTimeZone(null); }
protected boolean checkIfImageDiskCanBeAdded(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.bll.validator.storage.DiskValidator diskValidator) { if (Guid.Empty.equals(getStorageDomainId())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_SPECIFIED); } boolean returnValue; org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = createStorageDomainValidator(); returnValue = (((((((((org.ovirt.engine.core.bll.AddDiskCommand.getParameters().isSkipDomainCheck()) || (validate(storageDomainValidator.isDomainExistAndActive()))) && (!(isShareableDiskOnGlusterDomain()))) && (checkImageConfiguration())) && (validate(storageDomainValidator.hasSpaceForNewDisk(getDiskImageInfo())))) && (validate(storageDomainValidator.isDomainWithinThresholds()))) && (checkExceedingMaxBlockDiskSize())) && (canAddShareableDisk())) && (validate(diskValidator.isVirtIoScsiValid(vm)))) && (validate(diskValidator.isDiskInterfaceSupported(org.ovirt.engine.core.bll.AddDiskCommand.getVm()))); if (returnValue && (vm != null)) { org.ovirt.engine.core.common.businessentities.StoragePool sp = org.ovirt.engine.core.bll.AddDiskCommand.getStoragePool(); returnValue = (((validate(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(sp).isUp())) && (isStoragePoolMatching(vm))) && (org.ovirt.engine.core.bll.AddDiskCommand.isVmNotLocked())) && (org.ovirt.engine.core.bll.AddDiskCommand.isVmNotInPreviewSnapshot()); } return returnValue; }
@java.lang.Override protected java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> getExclusiveLocks() { java.util.Map<java.lang.String, org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.String>> locks = new java.util.HashMap<>(); locks.put(org.ovirt.engine.core.bll.RemoveVdsCommand.getParameters().getVdsId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VDS, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED)); return locks; }



@org.junit.Test public void testSave() { newVmStatistics.setId(newVmStatic.getId()); newVmStatistics.setMigrationProgressPercent(0); dao.save(newVmStatistics); org.ovirt.engine.core.common.businessentities.VmStatistics stats = dao.get(newVmStatic.getId()); assertNotNull(stats); assertEquals(newVmStatistics, stats); }

private javax.ws.rs.core.Response cloneVmFromSnapshot(org.ovirt.engine.core.common.businessentities.VmStatic staticVm, java.lang.String snapshotId, java.util.HashMap<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.DiskImage> images) { org.ovirt.engine.core.compat.Guid sourceSnapshotId = asGuid(snapshotId); org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters params = new org.ovirt.engine.core.common.action.AddVmFromSnapshotParameters(staticVm, sourceSnapshotId); params.setDiskInfoDestinationMap(images); params.setMakeCreatorExplicitOwner(shouldMakeCreatorExplicitOwner()); return performCreate(VdcActionType.AddVmFromSnapshot, params, new org.ovirt.engine.api.restapi.resource.QueryIdResolver<org.ovirt.engine.core.compat.Guid>(org.ovirt.engine.core.common.queries.VdcQueryType.GetVmByVmId, org.ovirt.engine.core.common.queries.IdQueryParameters.class)); }




@org.junit.Test public void testRemoveRole() { dao.remove(existingRole.getId()); org.ovirt.engine.core.common.businessentities.roles result = dao.get(existingRole.getId()); assertNull(result); }
protected void syncSearch(org.ovirt.engine.core.common.queries.VdcQueryType vdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase vdcQueryParametersBase) { syncSearch(vdcQueryType, vdcQueryParametersBase, new SetItemsAsyncQuery()); }
public static org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip<org.ovirt.engine.core.common.businessentities.Disk> getAliasColumn(java.lang.String sortBy) { org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip<org.ovirt.engine.core.common.businessentities.Disk> column = new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip<org.ovirt.engine.core.common.businessentities.Disk>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.Disk object) { return object.getDiskAlias(); } }; return org.ovirt.engine.ui.common.widget.uicommon.disks.DisksViewColumns.makeSortable(column, sortBy); }
private org.ovirt.engine.core.common.businessentities.ErrataData runErrataListMethod(java.lang.String relativeUrl, java.lang.String hostName) { org.ovirt.engine.core.common.businessentities.ErrataData errataData = new org.ovirt.engine.core.common.businessentities.ErrataData(); try { org.ovirt.engine.core.bll.host.provider.foreman.ErrataWrapper wrapper = objectMapper.readValue(runHttpGetMethod(relativeUrl), org.ovirt.engine.core.bll.host.provider.foreman.ErrataWrapper.class); errataData.setErrata(mapErrata(java.util.Arrays.asList(wrapper.getResults()))); errataData.setErrataCounts(mapErrataCounts(wrapper)); java.util.stream.Stream.of(org.ovirt.engine.core.common.businessentities.Erratum.ErrataType.values()).forEach(( errataType) -> addErrataCountForType(errataData, errataType)); } catch (java.lang.Exception e) { log.error("Failed to retrieve errata for content host '{}' via url '{}': {}", hostName, relativeUrl, e.getMessage()); log.debug("Exception", e); return org.ovirt.engine.core.common.businessentities.ErrataData.emptyData(); } return errataData; }
@java.lang.Override public java.lang.Void runInTransaction() { for (org.ovirt.engine.core.common.action.AttachNetworkToVdsGroupParameter param : getParameters().getClusterNetworksParameters()) { org.ovirt.engine.core.bll.network.cluster.AttachNetworkToVdsGroupCommand.updateNetworkAttachment(param.getVdsGroupId(), param.getNetworkCluster(), param.getNetwork()); } return null; }
public static org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer createVdsServer(org.ovirt.engine.core.common.businessentities.VdsProtocol vdsProtocol, java.lang.String hostname, int port, int clientTimeOut, int connectionTimeOut, int clientRetries, int heartbeat) { org.ovirt.engine.core.vdsbroker.vdsbroker.IVdsServer vdsServer = null; org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerConnector, org.apache.commons.httpclient.HttpClient> returnValue = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcUtils.getConnection(hostname, port, clientTimeOut, connectionTimeOut, clientRetries, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsMaxConnectionsPerHost), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.MaxTotalConnections), org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerConnector.class, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EncryptHostCommunication)); if ((org.ovirt.engine.core.common.businessentities.VdsProtocol.STOMP) == vdsProtocol) { java.lang.String eventQueue = org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EventQueueName); vdsServer = new org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcVdsServer(org.ovirt.engine.core.vdsbroker.jsonrpc.JsonRpcUtils.createStompClient(hostname, port, connectionTimeOut, clientTimeOut, clientRetries, heartbeat, org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EncryptHostCommunication), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsmSSLProtocol), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EventProcessingPoolSize), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsRequestQueueName), org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.VdsResponseQueueName), eventQueue), returnValue.getSecond()); } else if ((org.ovirt.engine.core.common.businessentities.VdsProtocol.XML) == vdsProtocol) { org.apache.commons.httpclient.HttpClient httpClient = returnValue.getSecond(); java.lang.String protocol = (org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.EncryptHostCommunication)) ? "https" : "http"; httpClient.getHostConfiguration().setHost(hostname, port, org.apache.commons.httpclient.protocol.Protocol.getProtocol(protocol)); vdsServer = new org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerWrapper(returnValue.getFirst(), httpClient); } return vdsServer; }
protected boolean isFenceAgentValid(org.ovirt.engine.core.common.businessentities.pm.FenceAgent agent) { if ((org.apache.commons.lang.StringUtils.isEmpty(agent.getUser())) || (org.apache.commons.lang.StringUtils.isEmpty(agent.getPassword()))) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_PM_ENABLED_WITHOUT_AGENT_CREDENTIALS); return false; } else { return true; } }

@org.junit.Test public void testSave() { dao.save(vnicProfile); org.ovirt.engine.core.common.businessentities.network.VnicProfile result = dao.get(vnicProfile.getId()); assertNotNull(result); assertEquals(vnicProfile.getId(), result.getId()); assertFalse(result.isPortMirroring()); assertFalse(result.isPassthrough()); }

public org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc importCandidate(java.lang.String sdUUID, java.lang.String vmGUID, java.lang.String templateGUID, java.lang.String templateVolGUID, java.lang.String path, java.lang.String type, java.lang.String force) { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = irsServer.importCandidate(sdUUID, vmGUID, templateGUID, templateVolGUID, path, type, force); org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(xmlRpcReturnValue); return wrapper; }
private boolean canFindVmOrTemplate() { boolean retValue = true; if ((org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.ImageOperation.Copy)) { org.ovirt.engine.core.common.businessentities.VmTemplate template = org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getVmTemplateDAO().get(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().getvm_guid()); if (template == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST); retValue = false; } else { setVmTemplate(template); sharedLockMap = java.util.Collections.singletonMap(org.ovirt.engine.core.bll.MoveOrCopyDiskCommand.getImage().getvm_guid(), LockingGroup.TEMPLATE.name()); } } else { java.util.List<org.ovirt.engine.core.common.businessentities.VM> listVms = getVmsForDiskId(); if (!(listVms.isEmpty())) { sharedLockMap = new java.util.HashMap<org.ovirt.engine.core.compat.Guid, java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.VM vm : listVms) { sharedLockMap.put(vm.getId(), LockingGroup.VM.name()); } } } return retValue; }
private void onSave() { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (getWindow())); if (!(model.validate())) { return; } java.lang.String name = model.getName().getEntity(); if (((org.ovirt.engine.ui.uicommonweb.models.vms.TemplateVmModelBehavior) (model.getBehavior())).getVmTemplate().isBaseTemplate()) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isTemplateNameUnique(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel templateListModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.TemplateListModel) (target)); boolean isNameUnique = ((java.lang.Boolean) (returnValue)); templateListModel.postNameUniqueCheck(isNameUnique); } }), name); } else { postNameUniqueCheck(true); } }

private void updateWANDisableEffects(final org.ovirt.engine.ui.uicommonweb.models.vms.ISpice spice) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getWANDisableEffects(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { spice.getOptions().setWanDisableEffects(((java.util.List<org.ovirt.engine.core.common.console.ConsoleOptions.WanDisableEffects>) (returnValue))); } })); }
protected boolean updateVmInSpm() { org.ovirt.engine.core.bll.storage.ovfstore.OvfUpdateProcessHelper ovfHelper = new org.ovirt.engine.core.bll.storage.ovfstore.OvfUpdateProcessHelper(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.compat.KeyValuePairCompat<java.lang.String, java.util.List<org.ovirt.engine.core.compat.Guid>>> metaDictionary = new java.util.HashMap<>(); ovfHelper.loadVmData(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm()); ovfHelper.buildMetadataDictionaryForVm(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm(), metaDictionary, ovfHelper.getVmImagesFromDb(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm())); return ovfHelper.executeUpdateVmInSpmCommand(org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getVm().getStoragePoolId(), metaDictionary, org.ovirt.engine.core.bll.exportimport.ExportVmCommand.getParameters().getStorageDomainId()); }
private void logCommandInfo() { final char EQUAL = '='; final java.lang.String SEP = ","; java.lang.StringBuilder info = new java.lang.StringBuilder(); java.lang.String sep = ""; for (java.lang.String o : createInfo.keySet()) { info.append(sep); info.append(o); info.append(EQUAL); info.append(createInfo.get(o)); sep = SEP; } org.ovirt.engine.core.vdsbroker.vdsbroker.CreateVDSCommand.log.infoFormat("{0} {1}", getClass().getName(), info.toString()); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM__CLUSTER); }
public org.ovirt.engine.api.model.Features getFeatures(org.ovirt.engine.api.model.Version version) { org.ovirt.engine.api.model.Features features = new org.ovirt.engine.api.model.Features(); if (org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual(version, BackendCapabilitiesResource.VERSION_3_0)) { addFeatureTransparentHugePages(features); } if (org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual(version, BackendCapabilitiesResource.VERSION_3_1)) { addFeatureGluster(features); addFeaturePosixDevice(features); addFeaturePortMirroring(features); addFeatureServerTime(features); addFeatureHostMemory(features); addFeatureHostSockets(features, version); addFeatureIgnoreCase(features); addFeatureMaxResults(features); addFeatureJSONContentType(features); addFeatureCorrelationId(features); addFeatureDiskActivation(features); addFeatureNicActivation(features); addFeatureSnapshotsRefactoring(features); addFeatureRemoveTemplateFromSD(features); addFeatureFloatingDisks(features); addFeatureAsyncDelete(features); addFeatureSessionBasedAuthentication(features); } if (org.ovirt.engine.api.restapi.utils.VersionUtils.greaterOrEqual(version, BackendCapabilitiesResource.VERSION_3_3)) { addFeatureVmApplications(features); addFeatureVnicCustomProperties(features); } return features; }

@org.junit.Test public void canDoActionFailsOnSnapshotTypeRegularNotInPreview() { mockSnapshotExists(); mockSnapshot = new org.ovirt.engine.core.common.businessentities.Snapshot(); when(snapshotDao.exists(any(org.ovirt.engine.core.compat.Guid.class), any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(true); mockSnapshotFromDb(); mockSnapshot.setType(SnapshotType.REGULAR); mockSnapshot.setStatus(SnapshotStatus.OK); assertFalse(spyCommand.canDoAction()); assertTrue(spyCommand.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_VM_SNAPSHOT_NOT_IN_PREVIEW.toString())); }

public boolean isProxyHostAvailable(org.ovirt.engine.core.common.businessentities.VDS vds, java.util.List<java.lang.String> messages) { org.ovirt.engine.core.bll.pm.FenceProxyLocator proxyHostLocator = getProxyLocator(vds); if (!(proxyHostLocator.isProxyHostAvailable())) { messages.add(VdcBllMessages.VDS_NO_VDS_PROXY_FOUND.name()); return false; } else { return true; } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("New Virtual Machine - Guide Me") java.lang.String newVirtualMachineGuideMeTitle();
protected void moveOrCopyAllImageGroups() { moveOrCopyAllImageGroups(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getId(), org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getDiskMap().values(), false, false, true)); copyAllMemoryImages(org.ovirt.engine.core.bll.exportimport.ImportVmCommand.getVm().getId()); }

public void setvds_strength(int value) { this.mVdsStatic.setvds_strength(value); }
protected void doChangeDefautlHost(org.ovirt.engine.core.compat.Guid hostGuid) { if (hostGuid != null) { org.ovirt.engine.core.compat.Guid vdsId = hostGuid; if ((getModel().getDefaultHost().getItems()) != null) { getModel().getDefaultHost().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.firstOrDefault(getModel().getDefaultHost().getItems(), new org.ovirt.engine.ui.uicommonweb.Linq.HostPredicate(vdsId))); } getModel().getIsAutoAssign().setEntity(false); } else { getModel().getIsAutoAssign().setEntity(true); } }


@org.junit.Test public void shouldDetectDifferentOs() { assertThat(new org.ovirt.engine.core.bll.scheduling.OS("os1", new org.ovirt.engine.core.compat.Version("6.3")).isSameOs(new org.ovirt.engine.core.bll.scheduling.OS("os2", new org.ovirt.engine.core.compat.Version("6.3"))), is(false)); }

public static void addProfileDataToNic(java.util.Map<java.lang.String, java.lang.Object> struct, org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, org.ovirt.engine.core.common.businessentities.network.VmNic nic) { org.ovirt.engine.core.common.businessentities.network.VnicProfile vnicProfile = null; org.ovirt.engine.core.common.businessentities.network.Network network = null; if ((nic.getVnicProfileId()) != null) { vnicProfile = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVnicProfileDao().get(nic.getVnicProfileId()); if (vnicProfile != null) { network = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getNetworkDao().get(vnicProfile.getNetworkId()); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addQosForDevice(struct, vnicProfile, vm.getVdsGroupCompatibilityVersion()); } } struct.put(VdsProperties.NETWORK, (network == null ? "" : network.getName())); if ((vnicProfile != null) && (vnicProfile.isPortMirroring())) { struct.put(VdsProperties.PORT_MIRRORING, (network == null ? java.util.Collections.<java.lang.String>emptyList() : java.util.Collections.singletonList(network.getName()))); } org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addCustomPropertiesForDevice(struct, vm, vmDevice, vm.getVdsGroupCompatibilityVersion(), org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.getVnicCustomProperties(vnicProfile)); }

public java.lang.String translateErrorTextSingle(java.lang.String errorMsg, java.lang.Boolean changeIfNotFound) { java.lang.String ret = ""; try { if ((errorMsg != null) && ((errorMsg.length()) > 0)) { java.lang.String errMsgCopy = errorMsg; if (!(isDynamicVariable(errorMsg))) { errorMsg = errorMsg.replace('.', '_'); } java.lang.String errorsString = errors.getString(errorMsg); if (errorsString != null) { ret = errorsString.replace("\n", "<br/>"); } else { if ((isDynamicVariable(errorMsg)) || (!changeIfNotFound)) { ret = errorMsg; } else { errorMsg = errMsgCopy; java.lang.String[] splitted = errorMsg.toLowerCase().split("_"); ret = org.ovirt.engine.core.compat.StringHelper.join(" ", splitted); } } } } catch (java.util.MissingResourceException e) { ret = errorMsg; } return ret; }


@java.lang.Override public javax.ws.rs.core.Response start(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.RunVmOnceParams params = map(map(getEntity(entityType, VdcQueryType.GetVmByVmId, new org.ovirt.engine.core.common.queries.IdQueryParameters(guid), id, true), new org.ovirt.engine.api.model.VM()), new org.ovirt.engine.core.common.action.RunVmOnceParams(guid)); if (action.isSetVm()) { validateEnums(org.ovirt.engine.api.model.VM.class, action.getVm()); org.ovirt.engine.api.model.VM vm = action.getVm(); params = map(vm, params); if ((vm.isSetPlacementPolicy()) && (vm.getPlacementPolicy().isSetHost())) { validateParameters(vm.getPlacementPolicy(), "host.id|name"); params.setDestinationVdsId(getHostId(vm.getPlacementPolicy().getHost())); } } if ((action.isSetPause()) && (action.isPause())) { params.setRunAndPause(true); } return doAction(VdcActionType.RunVmOnce, params, action); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel userPortalListModel1 = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel) (model)); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel unitVmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (userPortalListModel1.getWindow())); org.ovirt.engine.core.common.action.AddVmFromTemplateParameters param = new org.ovirt.engine.core.common.action.AddVmFromTemplateParameters(gettempVm(), unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap(), org.ovirt.engine.core.compat.Guid.Empty); param.setMakeCreatorExplicitOwner(true); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); parameters.add(param); org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult a) { stopProgress(a.getState()); cancel(); } }, this); }
protected java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> getLogicalUnits() { return getBackendCollection(VdcQueryType.GetDeviceList, new org.ovirt.engine.core.common.queries.GetDeviceListQueryParameters(asGuid(hostId), org.ovirt.engine.core.common.businessentities.storage.StorageType.UNKNOWN)); }


@org.ovirt.engine.ui.uicompat.DefaultStringValue("Shareable Disk is not supported by the selected configuration") java.lang.String shareableDiskNotSupportedByConfiguration();
@java.lang.Override public void fatal(java.lang.Object arg0) { log.fatal(addPrefixToLogMessage(arg0)); }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.RepoFileMetaData mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.RepoFileMetaData entity = new org.ovirt.engine.core.common.businessentities.RepoFileMetaData(); entity.setRepoDomainId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("storage_domain_id"))); entity.setLastRefreshed(rs.getLong("last_refreshed")); entity.setFileType(org.ovirt.engine.core.common.businessentities.ImageFileType.forValue(rs.getInt("file_type"))); return entity; }
private void UpdateExternalHostModels() { boolean enabled = getExternalHostProviderEnabled().getEntity(); if (enabled && ((getProviders().getItems()) == null)) { org.ovirt.engine.ui.frontend.AsyncQuery getProvidersQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); getProvidersQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Provider> providers = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Provider>) (result)); org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.Provider> providersListModel = getProviders(); providersListModel.setItems(providers); providersListModel.setIsChangable(true); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getAllProvidersByType(getProvidersQuery, ProviderType.FOREMAN); } setHostProviderWidgetsAvailability(enabled); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Incorrect bricks selected for removal in Distributed Replicate volume. <br/> Either all the selected bricks should be from the same sub volume or one brick each for every sub volume!") java.lang.String cannotRemoveBricksDistributedReplicateVolume();
public static void Init() { org.ovirt.engine.core.bll.VmTemplateHandler.mUpdateVmTemplate = new org.ovirt.engine.core.utils.ObjectIdentityChecker(org.ovirt.engine.core.bll.VmTemplateHandler.class); org.ovirt.engine.core.bll.VmTemplateHandler.BlankVmTemplateId = new org.ovirt.engine.core.compat.Guid("00000000-0000-0000-0000-000000000000"); org.ovirt.engine.core.bll.VmTemplateHandler.mUpdateVmTemplate.AddPermittedFields(new java.lang.String[]{ "name", "description", "domain", "os", "osType", "is_auto_suspend", "interfaces", "mem_size_mb", "num_of_sockets", "cpu_per_socket", "vds_group_id", "num_of_monitors", "allowConsoleReconnect", "usb_policy", "time_zone", "diskMap", "default_boot_sequence", "iso_path", "diskImageMap", "default_display_type", "priority", "auto_startup", "is_stateless", "initrd_url", "kernel_url", "kernel_params", "images", "interfaces", "quotaId", "quotaName", "quotaEnforcementType", "migrationSupport", "dedicated_vm_for_vds", "smartcardEnabled" }); }
@java.lang.Override public boolean validateAndSetQuota() { if (org.ovirt.engine.core.bll.quota.QuotaManager.getInstance().validateQuotaForStoragePool(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getStoragePool(), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getParameters().getVmStaticData().getvds_group_id(), getQuotaId(), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue().getCanDoActionMessages())) { return org.ovirt.engine.core.bll.quota.QuotaManager.getInstance().validateAndSetStorageQuota(org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getStoragePool(), getStorageQuotaListParameters(), org.ovirt.engine.core.bll.CommonVmPoolWithVmsCommand.getReturnValue().getCanDoActionMessages()); } return false; }
private static java.util.concurrent.locks.Lock getSyncObject(org.ovirt.engine.core.compat.Guid domainId, org.ovirt.engine.core.common.businessentities.storage.ImageFileType imageType) { org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.ImageFileType> domainPerFileType = new org.ovirt.engine.core.common.utils.Pair(domainId, imageType); org.ovirt.engine.core.bll.IsoDomainListSyncronizer.syncDomainForFileTypeMap.putIfAbsent(domainPerFileType, new java.util.concurrent.locks.ReentrantLock()); return org.ovirt.engine.core.bll.IsoDomainListSyncronizer.syncDomainForFileTypeMap.get(domainPerFileType); }
@org.junit.Test public void vmNotInPreviewReturnsInvalidResultWhenInSnapshot() throws java.lang.Exception { when(snapshotDao.exists(vmId, SnapshotStatus.IN_PREVIEW)).thenReturn(true); org.ovirt.engine.core.bll.snapshots.SnapshotsValidatorTest.validateInvalidResult(validator.vmNotInPreview(vmId), VdcBllMessages.ACTION_TYPE_FAILED_VM_IN_PREVIEW); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.StorageDomain> getPermittedStorageDomainsByStoragePool(org.ovirt.engine.core.compat.Guid userId, org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup, org.ovirt.engine.core.compat.Guid storagePoolId) { return getCallsHandler().executeReadList("Getstorage_domains_by_storage_pool_id_with_permitted_action", org.ovirt.engine.core.dao.StorageDomainDAODbFacadeImpl.StorageDomainRowMapper.instance, getCustomMapSqlParameterSource().addValue("user_id", userId).addValue("action_group_id", actionGroup.getId()).addValue("storage_pool_id", storagePoolId)); }


private void setupMock() throws java.lang.Exception { mockEngineSSHDialog = mock(org.ovirt.engine.core.utils.ssh.EngineSSHDialog.class); doNothing().when(mockEngineSSHDialog).connect(); doNothing().when(mockEngineSSHDialog).authenticate(); doReturn(mockEngineSSHDialog).when(getQuery()).getEngineSSHDialog(); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.dao.DbUserDAO dao = org.ovirt.engine.core.bll.AddUserCommand.getDbUserDAO(); java.util.HashSet<org.ovirt.engine.core.compat.Guid> groupIds = org.ovirt.engine.core.aaa.DirectoryUtils.getGroupIdsFromUser(directoryUser); org.ovirt.engine.core.common.businessentities.DbUser dbUser = dao.getByExternalId(directoryUser.getDirectoryName(), directoryUser.getId()); if (dbUser == null) { dbUser = new org.ovirt.engine.core.common.businessentities.DbUser(directoryUser); dbUser.setId(org.ovirt.engine.core.compat.Guid.newGuid()); dbUser.setGroupIds(groupIds); dao.save(dbUser); } else { org.ovirt.engine.core.compat.Guid id = dbUser.getId(); dbUser = new org.ovirt.engine.core.common.businessentities.DbUser(directoryUser); dbUser.setId(id); dbUser.setGroupIds(groupIds); dao.update(dbUser); } setActionReturnValue(dbUser.getId()); org.ovirt.engine.core.bll.AddUserCommand.setSucceeded(true); }
@org.junit.Test public void validateVmMemoryCanStartOnVds() { boolean vmPassedMemoryRequirement = org.ovirt.engine.core.bll.scheduling.SlaValidator.getInstance().hasPhysMemoryToRunVM(vds, vm, 0); assertEquals(vmPassedMemoryRequirement, true); }
protected boolean validateFreeSpace(org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator, java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList) { return validate(storageDomainValidator.hasSpaceForNewDisks(disksList)); }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove Disk(s)") java.lang.String removeDisksTitle();
protected boolean checkExistingStorageDomain() { if ((org.ovirt.engine.core.bll.storage.AddExistingFileStorageDomainCommand.getStorageDomainStaticDAO().get(org.ovirt.engine.core.bll.storage.AddExistingFileStorageDomainCommand.getStorageDomain().getId())) != null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_ALREADY_EXIST); } org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.common.businessentities.StorageDomainStatic, org.ovirt.engine.core.compat.Guid> domainFromIrs = executeHSMGetStorageDomainInfo(new org.ovirt.engine.core.common.vdscommands.HSMGetStorageDomainInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.AddExistingFileStorageDomainCommand.getVdsId(), org.ovirt.engine.core.bll.storage.AddExistingFileStorageDomainCommand.getStorageDomain().getId())); if (domainFromIrs == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_NOT_EXIST); } return concreteCheckExistingStorageDomain(domainFromIrs); }
public static void GetDataCentersWithPermittedActionOnClusters(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.common.businessentities.ActionGroup actionGroup, final boolean supportsVirtService, final boolean supportsGlusterService) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source == null) { return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StoragePool>(); } return source; } }; org.ovirt.engine.core.common.queries.GetDataCentersWithPermittedActionOnClustersParameters getDataCentersWithPermittedActionOnClustersParameters = new org.ovirt.engine.core.common.queries.GetDataCentersWithPermittedActionOnClustersParameters(); getDataCentersWithPermittedActionOnClustersParameters.setActionGroup(actionGroup); getDataCentersWithPermittedActionOnClustersParameters.setSupportsVirtService(supportsVirtService); getDataCentersWithPermittedActionOnClustersParameters.setSupportsGlusterService(supportsGlusterService); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetDataCentersWithPermittedActionOnClusters, getDataCentersWithPermittedActionOnClustersParameters, aQuery); }

@java.lang.Override protected boolean canDoAction() { initializeObjectState(); setVm(org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDAO().get(org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVmId())); org.ovirt.engine.core.bll.snapshots.SnapshotsValidator snapshotsValidator = new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator(); org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().setCanDoAction(validate(snapshotsValidator.vmNotDuringSnapshot(org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVmId()))); if (!(validate(snapshotsValidator.snapshotExists(org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVmId(), org.ovirt.engine.core.bll.RemoveSnapshotCommand.getParameters().getSnapshotId())))) { org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().setCanDoAction(false); } if (!(org.ovirt.engine.core.bll.ImagesHandler.PerformImagesChecks(org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVm(), org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().getCanDoActionMessages(), org.ovirt.engine.core.bll.RemoveSnapshotCommand.getVm().getstorage_pool_id(), Guid.Empty, true, true, true, true, true, true, true, true, null))) { org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().setCanDoAction(false); } if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDAO().get(getSourceImages().get(0).getImageId())) != null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_IMAGE_TEMPLATE); org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().setCanDoAction(false); } if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getDiskImageDAO().get(getSourceImages().get(0).getImageId())) != null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_REMOVE_ACTIVE_IMAGE); org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().setCanDoAction(false); } if (!(org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().getCanDoAction())) { addCanDoActionMessage(VdcBllMessages.VAR__TYPE__SNAPSHOT); addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE); } return org.ovirt.engine.core.bll.RemoveSnapshotCommand.getReturnValue().getCanDoAction(); }
public static void populateMemoryUtilizationVms(org.ovirt.engine.ui.frontend.server.dashboard.Utilization utilization, javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.VmDwhDAO(dwhDataSource); java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources> usageList = dao.getMemoryUtilizationVms(); for (org.ovirt.engine.ui.frontend.server.dashboard.models.TrendResources usage : usageList) { org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity entity = new org.ovirt.engine.ui.frontend.server.dashboard.UtilizedEntity(); entity.setName(usage.getName()); entity.setUsed(((usage.getUsed()) / 1024)); entity.setTotal(((usage.getTotal()) / 1024)); entity.setTrend(org.ovirt.engine.ui.frontend.server.dashboard.UtilizationHelper.calculateTrend(usage.getUsed(), usage.getPreviousUsed())); utilization.addVm(entity); } }

protected void setupTemplate(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.ui.uicommonweb.models.ListModel model) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getTemplateById(new org.ovirt.engine.ui.frontend.AsyncQuery(getModel(), new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (target)); org.ovirt.engine.core.common.businessentities.VmTemplate template = ((org.ovirt.engine.core.common.businessentities.VmTemplate) (returnValue)); model.getTemplate().setItems(new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmTemplate>(java.util.Arrays.asList(new org.ovirt.engine.core.common.businessentities.VmTemplate[]{ template }))); model.getTemplate().setSelectedItem(template); model.getTemplate().setIsChangable(false); postInitTemplate(); } }, getModel().getHash()), vm.getVmtGuid()); }

protected void refreshModel() { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.events.EventListModel eventListModel = ((org.ovirt.engine.ui.uicommonweb.models.events.EventListModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.AuditLog> list = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.AuditLog>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); requestingData = false; for (org.ovirt.engine.core.common.businessentities.AuditLog auditLog : list) { if (((auditLog.getCorrelationId()) != null) && (auditLog.getCorrelationId().startsWith(TaskListModel._WEBADMIN_))) { auditLog.setCorrelationId(auditLog.getCorrelationId().split("_")[2]); } } eventListModel.updateItems(list); } }); org.ovirt.engine.core.common.queries.SearchParameters params = new org.ovirt.engine.core.common.queries.SearchParameters(applySortOptions(getSearchString()), org.ovirt.engine.core.common.interfaces.SearchType.AuditLog, isCaseSensitiveSearch()); params.setMaxCount(getSearchPageSize()); params.setSearchFrom(((getLastEvent()) != null ? getLastEvent().getaudit_log_id() : 0)); params.setRefresh(false); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.Search, params, query); }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.DisplayType.class, to = java.lang.String.class) public static java.lang.String map(org.ovirt.engine.core.common.businessentities.DisplayType type, java.lang.String incoming) { switch (type) { case vnc : return DisplayType.VNC.value(); case qxl : return DisplayType.SPICE.value(); default : return null; } }

private void updateDiskVmSnapshotId() { org.ovirt.engine.core.compat.Guid snapshotId = org.ovirt.engine.core.bll.AttachDiskToVmCommand.getSnapshotDao().getId(org.ovirt.engine.core.bll.AttachDiskToVmCommand.getVmId(), SnapshotType.ACTIVE); if (disk.getDiskStorageType().isInternal()) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = ((org.ovirt.engine.core.common.businessentities.storage.DiskImage) (disk)); org.ovirt.engine.core.bll.AttachDiskToVmCommand.getImageDao().updateImageVmSnapshotId(diskImage.getImageId(), snapshotId); } else { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.StorageException, "update of snapshot id was initiated for unsupported disk type"); } }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__ADD); addCanDoActionMessage(EngineMessage.VAR__TYPE__QUOTA); }
private java.lang.Boolean getMigrateCompressed() { if (org.ovirt.engine.core.common.FeatureSupported.migrationCompression(MigrateVmCommand.getVm().getVdsGroupCompatibilityVersion())) { if ((MigrateVmCommand.getVm().getMigrateCompressed()) != null) { return MigrateVmCommand.getVm().getMigrateCompressed(); } if ((MigrateVmCommand.getVdsGroup().getMigrateCompressed()) != null) { return MigrateVmCommand.getVdsGroup().getMigrateCompressed(); } return org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.DefaultMigrationCompression); } return null; }

@java.lang.Override public void setEnabled(boolean enabled) { contentWidget.setEnabled(enabled); if (enabled) { getFormLabel().getElement().replaceClassName(OvirtCss.LABEL_DISABLED, OvirtCss.LABEL_ENABLED); } else { getFormLabel().getElement().replaceClassName(OvirtCss.LABEL_ENABLED, OvirtCss.LABEL_DISABLED); } if (!(keepTitleOnSetEnabled)) { updateWidgetTitle(null); } }
public static org.ovirt.engine.core.common.businessentities.VmDynamic buildVMDynamicDataFromList(org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct xmlRpcStruct) { org.ovirt.engine.core.common.businessentities.VmDynamic vmdynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(); if (xmlRpcStruct.contains(VdsProperties.vm_guid)) { try { vmdynamic.setId(new org.ovirt.engine.core.compat.Guid(((java.lang.String) (xmlRpcStruct.getItem(VdsProperties.vm_guid))))); } catch (org.ovirt.engine.core.compat.FormatException e) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.log.info("vm id is not in uuid format, ", e); vmdynamic.setId(new org.ovirt.engine.core.compat.Guid()); } } if (xmlRpcStruct.contains(VdsProperties.status)) { vmdynamic.setStatus(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.convertToVmStatus(((java.lang.String) (xmlRpcStruct.getItem(VdsProperties.status))))); } return vmdynamic; }
@java.lang.Override public java.nio.channels.SocketChannel call() throws java.io.IOException { java.net.InetAddress address = java.net.InetAddress.getByName(hostname); org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info(("Connecting to " + address)); final java.net.InetSocketAddress addr = new java.net.InetSocketAddress(address, port); final java.nio.channels.SocketChannel socketChannel = java.nio.channels.SocketChannel.open(); socketChannel.connect(addr); socketChannel.configureBlocking(false); return socketChannel; }



@org.ovirt.engine.ui.frontend.DefaultStringValue("VLAN ID must be a number between 0 and 4905") java.lang.String NETWORK_VLAN_OUT_OF_RANGE();

@java.lang.Override public boolean IsBetter(org.ovirt.engine.core.bll.VDS x, org.ovirt.engine.core.bll.VDS y, org.ovirt.engine.core.bll.VM vm) { if (((((((x.getcpu_cores()) == null) || ((y.getcpu_cores()) == null)) || ((x.getusage_cpu_percent()) == null)) || ((y.getusage_cpu_percent()) == null)) || ((x.getpending_vcpus_count()) == null)) || ((y.getpending_vcpus_count()) == null)) { return false; } return (calcDistributeMetric(x, vm)) > (calcDistributeMetric(y, vm)); }
@com.gwtplatform.mvp.client.annotations.TabInfo(container = org.ovirt.engine.ui.webadmin.section.main.presenter.tab.virtualMachine.VirtualMachineSubTabPanelPresenter.class) static com.gwtplatform.mvp.client.TabData getTabData(org.ovirt.engine.ui.webadmin.gin.ClientGinjector ginjector) { return new org.ovirt.engine.ui.common.widget.tab.ModelBoundTabData(ginjector.getApplicationConstants().virtualMachineEventSubTabLabel(), 7, ginjector.getSubTabVirtualMachineEventModelProvider(), org.ovirt.engine.ui.common.widget.Align.RIGHT); }
@java.lang.Override public java.lang.String toString() { return java.lang.String.format("vmId = %s", getVmId()); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("System") java.lang.String systemRoleTree();
private void mockExistingIfaces(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface... nics) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> existingIfaces = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>(); for (int i = 0; i < (nics.length); i++) { existingIfaces.add(createVdsInterface(nics[i].getId(), nics[i].getName(), nics[i].getBonded(), nics[i].getBondName(), nics[i].getVlanId(), nics[i].getNetworkName(), nics[i].isBridged(), nics[i].getAddress())); } when(interfaceDAO.getAllInterfacesForVds(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(existingIfaces); }



@org.junit.Test public void testGetBaseNicVerifyDelegation() throws java.lang.Exception { org.ovirt.engine.core.vdsbroker.CalculateBaseNic spy = spy(calculateBaseNic); spy.getBaseNic(baseNic); verify(spy).getBaseNic(org.mockito.Matchers.<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>any(), org.mockito.Matchers.<java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface>>any()); }






@java.lang.Override protected void init(T parameters) { super.init(parameters); org.ovirt.engine.core.common.businessentities.storage.DiskImage representativeImage = getRepresentativeImage(); if (representativeImage == null) { return; } setImage(representativeImage); setStorageDomainId(representativeImage.getStorageIds().get(0)); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getContainerId()))) { setVmId(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getContainerId()); } else { java.util.List<org.ovirt.engine.core.common.businessentities.VM> listVms = org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getVmDao().getVmsListForDisk(representativeImage.getId(), false); if (!(listVms.isEmpty())) { org.ovirt.engine.core.common.businessentities.VM vm = listVms.get(0); setVm(vm); } } if (isLiveMerge()) { org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.clearTaskHandlers(); } }
public synchronized void discoveryTimeout(final org.quartz.JobDetail timer) { if ((timer.getKey()) != (discoveryTimer.getJobDetail().getKey())) { log.warn(java.lang.String.format("Unknown timeout from %s", timer.toString())); return; } log.debug("Discovering clusters..."); java.util.Set<java.lang.String> availableClusters = discovery.getClusters(); if (availableClusters == null) { log.error("Cluster discovery failed"); return; } java.util.Set<java.lang.String> missingClusters; synchronized(clusterOptimizers) { missingClusters = new java.util.HashSet(clusterOptimizers.keySet()); missingClusters.removeAll(availableClusters); availableClusters.removeAll(clusterOptimizers.keySet()); } java.util.Properties config = new org.ovirt.optimizer.config.ConfigProvider().load().getConfig(); final int maxSteps = java.lang.Integer.parseInt(config.getProperty(ConfigProvider.SOLVER_STEPS)); for (java.lang.String clusterId : availableClusters) { log.info(java.lang.String.format("New cluster %s detected", clusterId)); org.ovirt.optimizer.solver.thread.ClusterOptimizer planner = org.ovirt.optimizer.solver.thread.ClusterOptimizer.optimizeCluster(client, configProvider, clusterId, maxSteps, new org.ovirt.optimizer.solver.thread.ClusterOptimizer.Finished() { @java.lang.Override public void solvingFinished(org.ovirt.optimizer.solver.thread.ClusterOptimizer planner, java.lang.Thread thread) { threads.remove(thread); } }); java.lang.Thread updater = new java.lang.Thread(planner.getUpdaterInstance()); java.lang.Thread solver = new java.lang.Thread(planner); updater.start(); threads.add(updater); solver.start(); threads.add(solver); synchronized(clusterOptimizers) { clusterOptimizers.put(clusterId, planner); } } synchronized(clusterOptimizers) { for (java.lang.String clusterId : missingClusters) { clusterOptimizers.get(clusterId).terminate(); clusterOptimizers.get(clusterId).getUpdaterInstance().terminate(); log.info(java.lang.String.format("Cluster %s was removed", clusterId)); } } }



public final java.util.List<java.lang.String> TranslateMessages(java.util.List<java.lang.String> errorMsg, boolean changeIfNotFound) { return doTranslation(errorMsg, changeIfNotFound, java.util.Locale.getDefault()); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getQueryReturnValue().setReturnValue(diskDao.get(org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getParameters().getId(), org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getUserID(), org.ovirt.engine.core.bll.storage.disk.GetDiskByDiskIdQuery.getParameters().isFiltered())); }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc monitorCommand(java.lang.String vmId, java.lang.String monitorCommand) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.monitorCommand").withParameter("vmID", vmId).withParameter("command", monitorCommand).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }




@java.lang.Override public boolean isDisplayNetworkAffected(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2) { org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel networkToBeAttached = ((org.ovirt.engine.ui.uicommonweb.models.hosts.network.LogicalNetworkModel) (op1)); return (org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation.isDisplayNetwork(networkToBeAttached)) && (networkToBeAttached.isAttached()); }


public java.lang.String getBondName() { return bondName; }
protected boolean checkDomainCanBeAttached(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { return ((((checkStorageDomainType(storageDomain)) && (isStorageDomainFormatCorrectForPool(storageDomain, org.ovirt.engine.core.bll.storage.StorageHandlingCommandBase.getStoragePool()))) && (checkStorageDomainSharedStatusNotLocked(storageDomain))) && ((((storageDomain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO)) || ((storageDomain.getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ImportExport))) || (isStorageDomainNotInPool(storageDomain)))) && (isStorageDomainTypeCorrect(storageDomain)); }
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.roles>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.roles>(); }
@java.lang.Override public int compare(org.ovirt.engine.core.common.businessentities.ProviderType type1, org.ovirt.engine.core.common.businessentities.ProviderType type2) { return org.ovirt.engine.core.common.businessentities.comparators.LexoNumericComparator.comp(org.ovirt.engine.ui.uicompat.EnumTranslator.createAndTranslate(type1), org.ovirt.engine.ui.uicompat.EnumTranslator.createAndTranslate(type2)); }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.bll.validator.HostValidator hostValidator = new org.ovirt.engine.core.bll.validator.HostValidator(getVds()); if ((!(validate(hostValidator.hostExists()))) || (!(validate(hostValidator.isUp())))) { return false; } if ((getVds().getVdsGroupCompatibilityVersion().compareTo(Version.v3_4)) < 0) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VDS_HA_MAINT_NOT_SUPPORTED); } if (!(getVds().getHighlyAvailableIsConfigured())) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VDS_HA_NOT_CONFIGURED); } return true; }
private org.ovirt.engine.core.bll.ValidationResult hostStatusLegalForSetupNetworks() { java.util.List<org.ovirt.engine.core.common.businessentities.VDSStatus> supportedStatuses = java.util.Arrays.asList(VDSStatus.Maintenance, VDSStatus.Up, VDSStatus.NonOperational); boolean hostStatusLegalForSetupNetworks = (supportedStatuses.contains(host.getStatus())) || (((host.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.Installing)) && (internalExecution)); if (!hostStatusLegalForSetupNetworks) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VDS_STATUS_ILLEGAL, host.getName(), host.getStatus().name()); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@org.junit.Test public void testGetAllConnectionsOfNfsDomain() { java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections = dao.getAllForDomain(org.ovirt.engine.core.compat.Guid.createGuidFromString("d9ede37f-e6c3-4bf9-a984-19174070aa31")); assertEquals(connections.size(), 1); assertEquals(connections.get(0).getid(), "0cc146e8-e5ed-482c-8814-270bc48c2981"); }

@org.junit.Test public void testValidateAllClustersLevel() { storagePoolWithVersionHigherThanCluster(); java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> clusterList = org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.createClusterList(); org.ovirt.engine.core.common.businessentities.VDSGroup secondCluster = new org.ovirt.engine.core.common.businessentities.VDSGroup(); secondCluster.setCompatibilityVersion(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.VERSION_1_2); secondCluster.setName("secondCluster"); clusterList.add(secondCluster); org.ovirt.engine.core.common.businessentities.VDSGroup thirdCluster = new org.ovirt.engine.core.common.businessentities.VDSGroup(); thirdCluster.setCompatibilityVersion(org.ovirt.engine.core.bll.storage.UpdateStoragePoolCommandTest.VERSION_1_1); thirdCluster.setName("thirdCluster"); clusterList.add(thirdCluster); when(vdsGroupDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(clusterList); assertFalse(cmd.checkAllClustersLevel()); java.util.List<java.lang.String> messages = cmd.getReturnValue().getCanDoActionMessages(); assertTrue(messages.contains(VdcBllMessages.ERROR_CANNOT_UPDATE_STORAGE_POOL_COMPATIBILITY_VERSION_BIGGER_THAN_CLUSTERS.toString())); assertTrue(messages.get(0).contains("firstCluster")); assertFalse(messages.get(0).contains("secondCluster")); assertTrue(messages.get(0).contains("thirdCluster")); }
private boolean supportsGlusterSnapshotFeature(org.ovirt.engine.core.common.businessentities.VDSGroup cluster) { return (cluster.supportsGlusterService()) && (org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterSnapshot(cluster.getCompatibilityVersion())); }



@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, autoRecoverable, connection, name, storage, storageFormat, storagePoolType, storageType, description, sanState, wipeAfterDelete, discardAfterDelete, firstMetadataDevice, vgMetadataDevice, warningLowSpaceIndicator, criticalSpaceActionBlocker); }
@java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase Login(java.lang.String userName, java.lang.String password, java.lang.String domain) { org.ovirt.engine.core.common.action.LoginUserParameters params = new org.ovirt.engine.core.common.action.LoginUserParameters(userName, password, domain, null, null, null); params.setSessionId(getSessionId()); params.setActionType(VdcActionType.LoginAdminUser); org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = getBackend().Login(params); return returnValue; }

protected java.lang.Object[] getEncodedParameters(java.lang.Object[] parameters, org.ovirt.engine.extensions.aaa.builtin.kerberosldap.LdapIdEncoder idEncoder) { if (parameters == null) { return null; } java.lang.Object[] retVal = parameters.clone(); int index = 0; for (java.lang.Object parameter : parameters) { if (parameter instanceof org.ovirt.engine.core.common.utils.ExternalId) { retVal[index] = idEncoder.encodedId(((org.ovirt.engine.core.common.utils.ExternalId) (parameter))); } index++; } return retVal; }


public void updateDynamicData(org.ovirt.engine.core.common.businessentities.VdsDynamic dynamicData) { vdsDynamicDao.updateIfNeeded(dynamicData); cachedVds.setDynamicData(dynamicData); }


public static boolean hasCpuToRunVM(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.common.businessentities.VM vm) { if (((vds.getusage_cpu_percent()) == null) || ((vm.getUsageCpuPercent()) == null)) { return false; } int predictedVmCpu = ((vm.getUsageCpuPercent()) * (vm.getNumOfCpus())) / (org.ovirt.engine.core.bll.VdsSelector.getEffectiveCpuCores(vds)); boolean result = ((vds.getusage_cpu_percent()) + predictedVmCpu) <= (vds.gethigh_utilization()); if (org.ovirt.engine.core.bll.RunVmCommandBase.log.isDebugEnabled()) { org.ovirt.engine.core.bll.RunVmCommandBase.log.debugFormat(("Host {0} has {1}% CPU load; VM {2} is predicted to have {3}% CPU load; " + "High threshold is {4}%. Host is {5}suitable in terms of CPU."), vds.getvds_name(), vds.getusage_cpu_percent(), vm.getVmName(), predictedVmCpu, vds.gethigh_utilization(), (result ? "" : "not ")); } return result; }

private org.ovirt.engine.core.common.vdscommands.VDSReturnValue runFencingAction(org.ovirt.engine.core.common.businessentities.FenceActionType actionType) { java.lang.String managementPort = ""; if (((_vds.getpm_port()) != null) && ((_vds.getpm_port()) != 0)) { managementPort = _vds.getpm_port().toString(); } java.lang.String agent = org.ovirt.engine.core.utils.pm.VdsFencingOptions.getRealAgent(_vds.getpm_type()); java.lang.String managementOptions = org.ovirt.engine.core.utils.pm.VdsFencingOptions.getDefaultAgentOptions(_vds.getpm_type(), _vds.getpm_options()); org.ovirt.engine.core.bll.FencingExecutor.log.infoFormat(("Executing <{0}> Power Management command, Proxy Host:{1}, " + "Agent:{2}, Target Host:{3}, Management IP:{4}, User:{5}, Options:{6}"), actionType, _vdsToRunName, agent, _vds.getvds_name(), _vds.getManagmentIp(), _vds.getpm_user(), managementOptions); return org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.FenceVds, new org.ovirt.engine.core.common.vdscommands.FenceVdsVDSCommandParameters(_vdsToRunId, _vds.getId(), _vds.getManagmentIp(), managementPort, agent, _vds.getpm_user(), _vds.getpm_password(), managementOptions, actionType)); }

@java.lang.Override protected void initLoginModel() { super.initLoginModel(); final org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalLoginModel loginModel = getLoginModel(); loginModel.getIsENGINEUser().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.Boolean isEngineUser = loginModel.getIsENGINEUser().getEntity(); if (isEngineUser != null) { userRole.setEngineUser(isEngineUser); performLogin(loginModel); } } }); }

private javax.ws.rs.core.Response getFenceStatus(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.vdscommands.VDSReturnValue result = getEntity(org.ovirt.engine.core.common.vdscommands.VDSReturnValue.class, VdcQueryType.GetVdsFenceStatus, new org.ovirt.engine.core.common.queries.VdsIdParametersBase(guid), guid.toString()); org.ovirt.engine.core.common.businessentities.FenceStatusReturnValue fenceResult = ((org.ovirt.engine.core.common.businessentities.FenceStatusReturnValue) (result.getReturnValue())); if (fenceResult.getIsSucceeded()) { org.ovirt.engine.api.model.PowerManagement pm = new org.ovirt.engine.api.model.PowerManagement(); pm.setStatus((fenceResult.getStatus().toLowerCase().equals("on") ? org.ovirt.engine.api.common.util.StatusUtils.create(PowerManagementStatus.ON) : fenceResult.getStatus().toLowerCase().equals("off") ? org.ovirt.engine.api.common.util.StatusUtils.create(PowerManagementStatus.OFF) : fenceResult.getStatus().toLowerCase().equals("unknown") ? org.ovirt.engine.api.common.util.StatusUtils.create(PowerManagementStatus.UNKNOWN) : null)); action.setPowerManagement(pm); return actionSuccess(action); } else { return handleFailure(action, fenceResult.getMessage()); } }

@java.lang.Override protected void endWithFailure() { if ((org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.getParameters().getCommandStep()) == (org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskLiveStep.DESTROY_IMAGE)) { org.ovirt.engine.core.compat.Guid currentChildId = org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.getParameters().getChildCommands().get(org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.getParameters().getCommandStep()); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(currentChildId))) { org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand(currentChildId); if (command != null) { command.getParameters().setTaskGroupSuccess(false); org.ovirt.engine.core.bll.Backend.getInstance().endAction(VdcActionType.DestroyImage, command.getParameters(), org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.cloneContextAndDetachFromParent()); } } } else { org.ovirt.engine.core.bll.RemoveSnapshotSingleDiskLiveCommand.setSucceeded(true); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAllForStoragePoolAndStatus(org.ovirt.engine.core.compat.Guid storagePool, org.ovirt.engine.core.common.businessentities.VDSStatus status) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getCallsHandler().executeReadList("getVdsByStoragePoolIdWithStatus", org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance, getCustomMapSqlParameterSource().addValue("storage_pool_id", storagePool).addValue("status", (status != null ? status.getValue() : null))); return uniteAgents(vdsList); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow to move VM image to another Storage Domain") java.lang.String allowToMoveVmImageToAnotherStorageDomainRoleTreeTooltip();
private void initExternalHostProviderWidgets(boolean isAvailable) { externalHostProviderEnabledEditor.setVisible(isAvailable); externalHostNameEditor.setVisible(false); providersEditor.setVisible(false); searchProviderPanel.setVisible(false); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Remove Virtual Machine") java.lang.String removeVirtualMachineTitle();

@java.lang.Override public int hashCode() { return java.util.Objects.hash(id, compatVersion, compatibilityVersion, cpuName, description, maxVdsMemoryOverCommit, countThreadsAsCores, migrateOnError, name, storagePoolId, storagePoolName, transparentHugepages, virtService, glusterService, glusterCliBasedSchedulingOn, tunnelMigration, emulatedMachine, trustedService, haReservation, clusterPolicyName, clusterPolicyProperties, requiredRngSources, enableKsm, enableBallooning, optimizationType, serialNumberPolicy, customSerialNumber, groupHostsAndVms, fencingPolicy, autoConverge, migrateCompressed, glusterTunedProfile, addtionalFeaturesSupported, maintenanceReasonRequired, ksmMergeAcrossNumaNodes, customMigrationNetworkBandwidth, migrationBandwidthLimitType); }
@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); addCanDoActionMessage(EngineMessage.VAR__ACTION__RESUME); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> templateDiskImages = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.filterImageDisks(org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getVmTemplate().getDiskTemplateMap().values(), true, false, false); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage dit : templateDiskImages) { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = diskInfoDestinationMap.get(dit.getId()); if (!(org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.checkImageConfiguration(destStorages.get(diskImage.getStorageIds().get(0)).getStorageStaticData(), diskImage, org.ovirt.engine.core.bll.AddVmFromTemplateCommand.getReturnValue().getCanDoActionMessages()))) { return false; } } return true; }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Add System Permission to User") java.lang.String addSystemPermissionToUserTitle();
@org.junit.Test public void testGetNotFound() throws java.lang.Exception { setUriInfo(setUpBasicUriExpectations()); setUpEntityQueryExpectations(VdcQueryType.GetAllNetworks, org.ovirt.engine.core.common.queries.GetAllNetworkQueryParamenters.class, new java.lang.String[]{ "StoragePoolId" }, new java.lang.Object[]{ org.ovirt.engine.core.compat.Guid.Empty }, new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network>()); control.replay(); try { resource.get(); fail("expected WebApplicationException"); } catch (javax.ws.rs.WebApplicationException wae) { verifyNotFoundException(wae); } }
public java.lang.String getExternalNetworkName() { return externalNetworkName; }

public static java.lang.String resource(java.lang.String subResType, java.lang.String encapsulatingEntity, java.lang.String parent, java.util.Map<java.lang.String, java.lang.String> knownWrapperTypes) { java.lang.String actualXmlEntity = knownWrapperTypes.get(encapsulatingEntity.toLowerCase()); java.lang.String actualXmlType = org.ovirt.engine.sdk.generator.xsd.XsdData.getInstance().getXmlType(encapsulatingEntity); java.lang.String actualSubResType = knownWrapperTypes.get(subResType.toLowerCase()); org.ovirt.engine.sdk.generator.rsdl.templates.SubResourceTemplate template = new org.ovirt.engine.sdk.generator.rsdl.templates.SubResourceTemplate(); template.set("encapsulating_entity", firstNotNull(actualSubResType, subResType)); template.set("sub_res_type", firstNotNull(actualSubResType, actualXmlEntity, actualXmlType, encapsulatingEntity)); template.set("parent", parent.toLowerCase()); template.set("fixme", Resource.SUB_COLLECTIONS_FIXME); return template.evaluate(); }
@java.lang.SuppressWarnings("null") private static java.lang.Long AssignLongValue(org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct input, java.lang.String name) { if (input.containsKey(name)) { if (((input.getItem(name)) instanceof java.lang.Long) || ((input.getItem(name)) instanceof java.lang.Integer)) { return java.lang.Long.parseLong(input.getItem(name).toString()); } java.lang.String stringValue = ((java.lang.String) (((input.getItem(name)) instanceof java.lang.String) ? input.getItem(name) : null)); if (!(org.apache.commons.lang.StringUtils.isEmpty(stringValue))) { stringValue = stringValue.split("[.]", (-1))[0]; } try { return java.lang.Long.parseLong(stringValue); } catch (java.lang.NumberFormatException e) { org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.log.errorFormat("Failed to parse {0} value {1} to long", name, stringValue); } } return null; }
@org.junit.Test public void testCanDoFailReadOnlyOnInterface() { org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.storage.disk.AddDiskCommandTest.createParameters(); initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid(), parameters); mockVm(); doReturn(true).when(command).isDiskPassPciAndIdeLimit(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class)); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR)).when(diskValidator).isReadOnlyPropertyCompatibleWithInterface(); doReturn(diskValidator).when(command).getDiskValidator(any(org.ovirt.engine.core.common.businessentities.storage.Disk.class)); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, EngineMessage.ACTION_TYPE_FAILED_INTERFACE_DOES_NOT_SUPPORT_READ_ONLY_ATTR); }
@java.lang.Override protected boolean canDoAction() { boolean retValue = true; if (org.apache.commons.lang.StringUtils.isBlank(org.ovirt.engine.core.bll.AddJobCommand.getParameters().getDescription())) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_EMPTY_DESCRIPTION); retValue = false; } return retValue; }
@java.lang.Override protected boolean canDoAction() { initVmTemplate(); if (org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.isImagesAlreadyOnTarget()) { if (((ovfEntityData) == null) && (!(org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().isImportAsNewEntity()))) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_UNSUPPORTED_OVF); return false; } if ((vmTemplateFromConfiguration) == null) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_OVF_CONFIGURATION_NOT_SUPPORTED); return false; } setStorageDomainId(ovfEntityData.getStorageDomainId()); if (!(validate(new org.ovirt.engine.core.bll.validator.StorageDomainValidator(org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getStorageDomain()).isDomainExistAndActive()))) { return false; } if (!(org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getStorageDomain().getStorageDomainType().isDataDomain())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_UNSUPPORTED, java.lang.String.format("$domainId %1$s", org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().getStorageDomainId()), java.lang.String.format("$domainType %1$s", org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getStorageDomain().getStorageDomainType())); } } java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage> disks = new java.util.ArrayList(org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getVmTemplate().getDiskTemplateMap().values()); setImagesWithStoragePoolId(org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getStorageDomain().getStoragePoolId(), disks); org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getParameters().setImages(disks); org.ovirt.engine.core.bll.ImportVmTemplateFromConfigurationCommand.getVmTemplate().setImages(disks); return super.canDoAction(); }




@org.ovirt.engine.ui.uicompat.DefaultStringValue("Configure Host") java.lang.String configureHostRoleTree();
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); java.util.List<org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData> vmDataList = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VM vm : ((java.lang.Iterable<org.ovirt.engine.core.common.businessentities.VM>) (value))) { org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData vmData = new org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmData(vm); boolean vmExistsInSystem = vmList.contains(vm); vmData.setExistsInSystem(vmExistsInSystem); if (vmExistsInSystem) { vmData.getClone().setEntity(true); vmData.getClone().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().importVMThatExistsInSystemMustClone()); vmData.getClone().setIsChangable(false); } vmDataList.add(vmData); } org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmFromExportDomainModel.super.setItems(vmDataList); doInit(storageDomainId); }
@java.lang.Override protected java.util.Map<java.lang.String, java.lang.String> getExclusiveLocks() { if (!(org.apache.commons.lang.StringUtils.isBlank(getParameters().getVm().getVmName()))) { return java.util.Collections.singletonMap(getParameters().getVm().getVmName(), LockingGroup.VM_NAME.name()); } return null; }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Allow import/export operations") java.lang.String allowImportExportOperationsRoleTreeTooltip();
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__RESET); addCanDoActionMessage(EngineMessage.VAR__TYPE__GLUSTER_VOLUME_OPTION); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if (getPassthrough().getEntity()) { getPortMirroring().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().portMirroringNotChangedIfPassthrough()); getPortMirroring().setIsChangeable(false); getPortMirroring().setEntity(false); getNetworkQoS().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().networkQosNotChangedIfPassthrough()); getNetworkQoS().setIsChangeable(false); getNetworkQoS().setSelectedItem(defaultQos); } else { getPortMirroring().setIsChangeable(true); getNetworkQoS().setIsChangeable(true); } }



@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.widget.table.cell.Context context, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb) { if (volume == null) { return; } int upBricks = 0; int downBricks = 0; for (org.ovirt.engine.core.common.businessentities.gluster.GlusterBrickEntity brick : volume.getBricks()) { if (brick.isOnline()) { upBricks++; } else { downBricks++; } } com.google.gwt.resources.client.ImageResource upImage = resources.upImage(); com.google.gwt.resources.client.ImageResource downImage = resources.downImage(); com.google.gwt.safehtml.shared.SafeHtml upImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(upImage).getHTML()); com.google.gwt.safehtml.shared.SafeHtml downImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(downImage).getHTML()); sb.append(applicationTemplates.volumeBrickStatusTemplate(upImageHtml, upBricks, downImageHtml, downBricks)); }

@java.lang.Override protected org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.businessentities.VmStatistics> createEntityRowMapper() { return new org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.businessentities.VmStatistics>() { @java.lang.Override public org.ovirt.engine.core.common.businessentities.VmStatistics mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.VmStatistics entity = new org.ovirt.engine.core.common.businessentities.VmStatistics(); entity.setcpu_sys(rs.getDouble("cpu_sys")); entity.setcpu_user(rs.getDouble("cpu_user")); entity.setelapsed_time(rs.getDouble("elapsed_time")); entity.setusage_cpu_percent(((java.lang.Integer) (rs.getObject("usage_cpu_percent")))); entity.setusage_mem_percent(((java.lang.Integer) (rs.getObject("usage_mem_percent")))); entity.setMigrationProgressPercent(rs.getInt("migration_progress_percent")); entity.setusage_network_percent(((java.lang.Integer) (rs.getObject("usage_network_percent")))); entity.setDisksUsage(((java.lang.String) (rs.getObject("disks_usage")))); entity.setId(getGuidDefaultEmpty(rs, "vm_guid")); return entity; } }; }
@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmPool mapRow(final java.sql.ResultSet rs, final int rowNum) throws java.sql.SQLException { final org.ovirt.engine.core.common.businessentities.VmPool entity = new org.ovirt.engine.core.common.businessentities.VmPool(); entity.setVmPoolDescription(rs.getString("vm_pool_description")); entity.setVmPoolId(getGuidDefaultEmpty(rs, "vm_pool_id")); entity.setComment(rs.getString("vm_pool_comment")); entity.setName(rs.getString("vm_pool_name")); entity.setVmPoolType(org.ovirt.engine.core.common.businessentities.VmPoolType.forValue(rs.getInt("vm_pool_type"))); entity.setStateful(rs.getBoolean("stateful")); entity.setParameters(rs.getString("parameters")); entity.setPrestartedVms(rs.getInt("prestarted_vms")); entity.setClusterId(getGuidDefaultEmpty(rs, "cluster_id")); entity.setClusterName(rs.getString("cluster_name")); entity.setAssignedVmsCount(rs.getInt("assigned_vm_count")); entity.setRunningVmsCount(rs.getInt("vm_running_count")); entity.setMaxAssignedVmsPerUser(rs.getInt("max_assigned_vms_per_user")); entity.setSpiceProxy(rs.getString("spice_proxy")); entity.setBeingDestroyed(rs.getBoolean("is_being_destroyed")); return entity; }
@java.lang.Override public void onSuccess(final org.ovirt.engine.ui.frontend.communication.VdcOperation<org.ovirt.engine.core.common.queries.VdcQueryType, org.ovirt.engine.core.common.queries.VdcQueryParametersBase> operation, final org.ovirt.engine.core.common.queries.VdcQueryReturnValue result) { try { if (!(result.getSucceeded())) { org.ovirt.engine.ui.frontend.Frontend.logger.log(java.util.logging.Level.WARNING, (("Failure while invoking runQuery [" + (result.getExceptionString())) + "]")); if ((getEventsHandler()) != null) { java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryReturnValue> failedResult = new java.util.ArrayList<org.ovirt.engine.core.common.queries.VdcQueryReturnValue>(); failedResult.add(result); java.lang.String errorMessage = result.getExceptionString(); handleNotLoggedInEvent(errorMessage); } if (callback.isHandleFailure()) { callback.getDel().onSuccess(callback.getModel(), result); } } else { callback.setOriginalReturnValue(result); if ((callback.getConverter()) != null) { callback.getDel().onSuccess(callback.getModel(), callback.getConverter().Convert(result.getReturnValue(), callback)); } else { callback.getDel().onSuccess(callback.getModel(), result); } } } finally { org.ovirt.engine.ui.frontend.communication.AsyncOperationCompleteEvent.fire(this, callback.getModel()); raiseQueryCompleteEvent(queryType, callback.getContext()); } }
@org.junit.Test public void testSave() { java.util.List<org.ovirt.engine.core.common.businessentities.network_cluster> clustersFromDB = dbFacade.getNetworkClusterDAO().getAllForCluster(cluster); org.ovirt.engine.core.common.businessentities.network_cluster clusterFromDB = clustersFromDB.get(0); assertNotNull(clusterFromDB); new_net.setCluster(clusterFromDB); new_net.setId(org.ovirt.engine.core.compat.Guid.NewGuid()); dao.save(new_net); org.ovirt.engine.core.common.businessentities.network result = dao.getByName(new_net.getname()); assertNotNull(result); assertEquals(new_net, result); }

@org.junit.Test public void canAddVmWithVirtioScsiControllerNotSupportedOs() { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.bll.AddVmCommandTest.createVm(); org.ovirt.engine.core.bll.AddVmFromTemplateCommand<org.ovirt.engine.core.common.action.AddVmParameters> cmd = createVmFromTemplateCommand(vm); org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = createVdsGroup(); mockStorageDomainDaoGetForStoragePool(); mockVmTemplateDaoReturnVmTemplate(); mockDiskImageDaoGetSnapshotById(); org.ovirt.engine.core.bll.AddVmCommandTest.mockVerifyAddVM(cmd); mockConfig(); mockMaxPciSlots(); mockStorageDomainDaoGetAllStoragesForPool(20); mockUninterestingMethods(cmd); mockDisplayTypes(vm.getOs(), vdsGroup.getCompatibilityVersion()); mockGraphicsDevices(vm.getId()); doReturn(true).when(cmd).checkCpuSockets(); doReturn(vdsGroup).when(cmd).getVdsGroup(); doReturn(createStoragePool()).when(cmd).getStoragePool(); cmd.getParameters().setVirtioScsiEnabled(true); when(osRepository.getArchitectureFromOS(any(java.lang.Integer.class))).thenReturn(ArchitectureType.x86_64); when(osRepository.getDiskInterfaces(any(java.lang.Integer.class), any(org.ovirt.engine.core.compat.Version.class))).thenReturn(new java.util.ArrayList(java.util.Arrays.asList("VirtIO"))); mockGetAllSnapshots(cmd); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, VdcBllMessages.ACTION_TYPE_FAILED_ILLEGAL_OS_TYPE_DOES_NOT_SUPPORT_VIRTIO_SCSI); }

@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Storage connection parameters are related to more than one storage domain") java.lang.String ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS();

@org.ovirt.engine.ui.uicompat.DefaultStringValue("ethX [Click to Change]") java.lang.String cloudInitNewNetworkItem();
protected boolean validateDiskInterface(java.lang.Iterable<org.ovirt.engine.core.common.businessentities.storage.DiskImage> images) { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : images) { if (((diskImage.getDiskInterface()) == (org.ovirt.engine.core.common.businessentities.storage.DiskInterface.VirtIO_SCSI)) && (!(org.ovirt.engine.core.common.FeatureSupported.virtIoScsi(org.ovirt.engine.core.bll.ImportVmCommand.getEffectiveCompatibilityVersion())))) { return failCanDoAction(EngineMessage.VIRTIO_SCSI_INTERFACE_IS_NOT_AVAILABLE_FOR_CLUSTER_LEVEL); } } return true; }

private void prepareMessageSubject(java.lang.String hostName, org.ovirt.engine.core.common.businessentities.EventAuditLogSubscriber eventData) { subject = org.ovirt.engine.core.notifier.utils.sender.mail.MessageHelper.prepareMessageSubject(eventData.getevent_type(), hostName, eventData.getmessage()); }
@java.lang.Override protected void executeCommand() { boolean success = true; if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.getParameters().getVdsId()))) { org.ovirt.engine.core.common.utils.Pair<java.lang.Boolean, java.lang.Integer> result = org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.connectHostToStorage(); boolean isValidConnection = result.getFirst(); if (!isValidConnection) { org.ovirt.engine.core.common.errors.VdcFault fault = new org.ovirt.engine.core.common.errors.VdcFault(); fault.setError(org.ovirt.engine.core.common.errors.VdcBllErrors.forValue(result.getSecond())); org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.getReturnValue().setFault(fault); success = false; } } if (success) { org.ovirt.engine.core.common.businessentities.StorageServerConnections connection = org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.getConnection(); connection.setid(org.ovirt.engine.core.compat.Guid.newGuid().toString()); saveConnection(connection); org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.getReturnValue().setActionReturnValue(connection.getid()); } org.ovirt.engine.core.bll.storage.AddStorageServerConnectionCommand.setSucceeded(success); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Incorrect bricks selected for removal in Distributed Stripe volume. <br/> Selected bricks should be from the same sub volume!") java.lang.String cannotRemoveBricksDistributedStripeVolume();
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Running VMs") java.lang.String runningVms();
@java.lang.Override protected void syncSearch() { if (getSearchInProgress().getEntity()) { return; } getSearchInProgress().setEntity(true); super.syncSearch(); org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.setHandleFailure(true); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel adElementListModel = ((org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel) (model)); org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)); if (handleQueryError(queryReturnValue, adElementListModel)) { return; } setusers(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.aaa.DbUser>>()); addUsersToModel(queryReturnValue, getExcludeUsers()); onUserAndAdGroupsLoaded(adElementListModel); } }; findUsers(("allnames=" + (org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(getSearchString()) ? "*" : getSearchString())), _asyncQuery); _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.setHandleFailure(true); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel adElementListModel = ((org.ovirt.engine.ui.uicommonweb.models.users.AdElementListModel) (model)); org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)); if (handleQueryError(queryReturnValue, adElementListModel)) { return; } java.util.HashSet<java.lang.String> excludeUsers = new java.util.HashSet<java.lang.String>(); if ((adElementListModel.getExcludeItems()) != null) { for (org.ovirt.engine.core.common.businessentities.aaa.DbUser item : adElementListModel.getExcludeItems()) { excludeUsers.add(item.getExternalId()); } } adElementListModel.setgroups(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel<org.ovirt.engine.core.common.businessentities.aaa.DbUser>>()); addGroupsToModel(queryReturnValue, excludeUsers); onUserAndAdGroupsLoaded(adElementListModel); } }; findGroups(("name=" + (org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(getSearchString()) ? "*" : getSearchString())), _asyncQuery); }


@java.lang.Override public void dataCenterWithClusterSelectedItemChanged() { super.dataCenterWithClusterSelectedItemChanged(); if ((getModel().getSelectedCluster()) != null) { updateCpuProfile(getModel().getSelectedCluster().getId(), getClusterCompatibilityVersion(), vm.getCpuProfileId()); } }
private boolean nicNameAndNicIdIsIncoherent(org.ovirt.engine.core.compat.Guid nicId, java.lang.String nicName) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface interfaceById = existingInterfacesMap.get(nicId); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface interfaceByName = existingInterfacesMap.get(nicName); return !(java.util.Objects.equals(interfaceById, interfaceByName)); }

@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.IsoListReturnForXmlRpc getFloppyList(java.lang.String spUUID) { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = irsServer.getFloppyList(spUUID); org.ovirt.engine.core.vdsbroker.irsbroker.IsoListReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.irsbroker.IsoListReturnForXmlRpc(xmlRpcReturnValue); return wrapper; }

private void host_SelectedItemChanged() { org.ovirt.engine.core.common.businessentities.VDS host = getHost().getSelectedItem(); if ((getSelectedItem()) != null) { if ((getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) { org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase sanStorageModel = ((org.ovirt.engine.ui.uicommonweb.models.storage.SanStorageModelBase) (getSelectedItem())); if ((getStorage()) == null) { sanStorageModel.setItems(null); } } if (host != null) { getSelectedItem().getUpdateCommand().execute(); java.lang.String prefix = (host.isOvirtNode()) ? localFSPath : ""; if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(prefix))) { for (java.lang.Object item : getItems()) { if (item instanceof org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel) { org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel) (item)); model.getPath().setEntity(prefix); model.getPath().setIsChangeable(false); } } } } } }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Create Volume") java.lang.String createVolumeVolume();
@java.lang.Override public org.jboss.resteasy.core.ServerResponse preProcess(org.jboss.resteasy.spi.HttpRequest request, org.jboss.resteasy.core.ResourceMethod method) throws javax.ws.rs.WebApplicationException, org.jboss.resteasy.spi.Failure { org.jboss.resteasy.core.ServerResponse response = null; boolean successful = false; javax.ws.rs.core.HttpHeaders headers = request.getHttpHeaders(); boolean preferPersistentAuth = checkPersistentAuthentication(headers); javax.servlet.http.HttpSession httpSession = getCurrentSession(true); if ((((validator) != null) && (httpSession != null)) && (!(httpSession.isNew()))) { successful = executeSessionValidation(httpSession, preferPersistentAuth); } else { successful = executeBasicAuthentication(headers, httpSession, preferPersistentAuth); } if (!successful) { response = challenge(); if (httpSession != null) { httpSession.invalidate(); } } return response; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Power Management Configuration") java.lang.String powerManagementConfigurationTitle();
@org.junit.Test public void testNotRemovingManagementNetwork() throws java.lang.Exception { org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator networkAttachmentValidatorSpy = org.mockito.Mockito.spy(new org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator(new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(), new org.ovirt.engine.core.common.businessentities.VDS())); org.ovirt.engine.core.bll.validator.NetworkValidator networkValidatorSpy = org.mockito.Mockito.spy(new org.ovirt.engine.core.bll.validator.NetworkValidator(new org.ovirt.engine.core.common.businessentities.network.Network())); doReturn(networkValidatorSpy).when(networkAttachmentValidatorSpy).createNetworkValidator(); org.ovirt.engine.core.bll.ValidationResult propagatedResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_CANNOT_REMOVE_MANAGEMENT_NETWORK, "a"); doReturn(propagatedResult).when(networkValidatorSpy).notManagementNetwork(); assertThat("ValidationResult is not correctly propagated", networkAttachmentValidatorSpy.notRemovingManagementNetwork(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.NETWORK_CANNOT_REMOVE_MANAGEMENT_NETWORK, "a")); }

@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.network.NetworkQoS object) { return (object.getOutboundPeak()) == null ? constants.UnlimitedNetworkQoS() : object.getOutboundPeak().toString(); }
private boolean ExecuteWithoutTransaction() { boolean functionReturnValue = false; boolean exceptionOccurred = true; try { logRunningCommand(); executeCommand(); functionReturnValue = getSucceeded(); exceptionOccurred = false; } catch (org.ovirt.engine.core.dal.dbbroker.generic.RepositoryException e) { log.error(java.lang.String.format("Command %1$s throw Database exception", getClass().getName()), e); ProcessExceptionToClient(new org.ovirt.engine.core.common.errors.VdcFault(e, org.ovirt.engine.core.common.errors.VdcBllErrors.DB)); } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { log.error(java.lang.String.format("Command %1$s throw Vdc Bll exception. With error message %2$s", getClass().getName(), e.getMessage())); if (log.isDebugEnabled()) { log.debug(java.lang.String.format("Command %1$s throw Vdc Bll exception", getClass().getName()), e); } ProcessExceptionToClient(new org.ovirt.engine.core.common.errors.VdcFault(e, e.getVdsError().getCode())); } catch (java.lang.RuntimeException e) { ProcessExceptionToClient(new org.ovirt.engine.core.common.errors.VdcFault(e, org.ovirt.engine.core.common.errors.VdcBllErrors.ENGINE)); log.error(java.lang.String.format("Command %1$s throw exception", getClass().getName()), e); } finally { if (exceptionOccurred || (!(getSucceeded()))) { compensate(); } else { cleanUpCompensationData(); } } return functionReturnValue; }

@java.lang.Override public java.lang.String getMessage() { return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().thisFieldMustContainCidrInFormatMsg(); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { if (!(org.ovirt.engine.core.bll.ApproveVdsCommand.getSucceeded())) { if ((_failureLogTypeValue) == (org.ovirt.engine.core.common.AuditLogType.VDS_INSTALL_FAILED)) { AddCustomValue("FailedInstallMessage", getErrorMessage(_failureMessage)); } return _failureLogTypeValue; } else { return org.ovirt.engine.core.common.AuditLogType.VDS_APPROVE; } }
@java.lang.Override public void setit_guid(org.ovirt.engine.core.compat.Guid value) { getImage().setTemplateImageId(value); }
public final java.util.List<java.lang.String> ResolveMessages(java.util.List<java.lang.String> translatedMessages) { java.util.ArrayList<java.lang.String> translatedErrors = new java.util.ArrayList<java.lang.String>(); java.util.HashMap<java.lang.String, java.lang.String> variables = new java.util.HashMap<java.lang.String, java.lang.String>(); for (java.lang.String currentMessage : translatedMessages) { if (currentMessage.startsWith("$")) { AddVariable(currentMessage, variables); } else { translatedErrors.add(currentMessage); } } java.util.ArrayList<java.lang.String> returnValue = new java.util.ArrayList<java.lang.String>(); for (java.lang.String error : translatedErrors) { returnValue.add(resolveMessage(error, variables)); } return returnValue; }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Configure Network") java.lang.String configureNetworkRoleTree();
private void addStyles() { overrideIpTablesEditor.addContentWidgetStyleName(style.overrideIpStyle()); externalHostProviderEnabledEditor.addContentWidgetStyleName(style.checkBox()); providerSearchFilterEditor.addContentWidgetStyleName(style.searchFilter()); providerSearchFilterEditor.setStyleName(style.searchFilterLabel()); providerSearchFilterEditor.setLabelStyleName(style.emptyEditor()); providerSearchFilterLabel.addContentWidgetStyleName(style.emptyEditor()); providerSearchFilterLabel.setStyleName(style.searchFilterLabel()); }
protected void setUpGetEntityExpectations(int index) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.ad_groups user = org.ovirt.engine.api.restapi.resource.BackendGroupsResourceTest.setUpEntityExpectations(control.createMock(org.ovirt.engine.core.common.businessentities.ad_groups.class), index); setUpGetEntityExpectations((("ADGROUP@" + (DOMAIN)) + ": name=*"), SearchType.AdGroup, user); }
@java.lang.Override public void save(org.ovirt.engine.core.common.businessentities.vds_spm_id_map vds_spm_id_map) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("storage_pool_id", vds_spm_id_map.getstorage_pool_id()).addValue("vds_id", vds_spm_id_map.getId()).addValue("vds_spm_id", vds_spm_id_map.getvds_spm_id()); getCallsHandler().executeModification("Insertvds_spm_id_map", parameterSource); }
@java.lang.Override protected boolean canDoAction() { if (((org.ovirt.engine.core.bll.AbstractRngDeviceCommand.getParameters().getRngDevice().getVmId()) == null) || ((cachedEntity) == null)) { return failCanDoAction((org.ovirt.engine.core.bll.AbstractRngDeviceCommand.getParameters().isVm() ? org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_VM_NOT_FOUND : org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_TEMPLATE_DOES_NOT_EXIST)); } if (((org.ovirt.engine.core.bll.AbstractRngDeviceCommand.getParameters().isVm()) && ((org.ovirt.engine.core.bll.AbstractRngDeviceCommand.getVm()) != null)) && (org.ovirt.engine.core.bll.AbstractRngDeviceCommand.getVm().isRunningOrPaused())) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VM_IS_RUNNING); } return true; }



@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.network.Network network) { return getCustomMapSqlParameterSource().addValue("addr", network.getAddr()).addValue("description", network.getDescription()).addValue("id", network.getId()).addValue("name", network.getName()).addValue("subnet", network.getSubnet()).addValue("gateway", network.getGateway()).addValue("type", network.getType()).addValue("vlan_id", network.getVlanId()).addValue("stp", network.getStp()).addValue("storage_pool_id", network.getDataCenterId()).addValue("mtu", network.getMtu()).addValue("vm_network", network.isVmNetwork()); }
private static org.ovirt.engine.core.compat.Guid getVmToAttach(org.ovirt.engine.core.compat.NGuid poolId) { org.ovirt.engine.core.compat.Guid vmGuid = org.ovirt.engine.core.compat.Guid.Empty; vmGuid = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getPrestartedVmToAttach(poolId); if ((vmGuid == null) || (Guid.Empty.equals(vmGuid))) { vmGuid = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getNonPrestartedVmToAttach(poolId); } return vmGuid; }
@org.ovirt.engine.ui.webadmin.DefaultMessage("For Desktop Load - Enable memory page sharing to {0}%") java.lang.String clusterPopupMemoryOptimizationForDesktopLabel(java.lang.String a);
protected boolean isImageNotLocked() { org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage = getImage(); if ((diskImage.getImageStatus()) == (org.ovirt.engine.core.common.businessentities.storage.ImageStatus.LOCKED)) { if ((org.ovirt.engine.core.bll.storage.disk.MoveOrCopyDiskCommand.getParameters().getOperation()) == (org.ovirt.engine.core.common.businessentities.storage.ImageOperation.Move)) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED, java.lang.String.format("$%1$s %2$s", "diskAliases", diskImage.getDiskAlias())); } else { return failValidation(EngineMessage.VM_TEMPLATE_IMAGE_IS_LOCKED); } } return true; }


@java.lang.Override protected void build(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model, T vm) { vm.setMemSizeMb(model.getMemSize().getEntity()); vm.setMaxMemorySizeMb(model.getMaxMemorySize().getEntity()); if (model.getIoThreadsEnabled().getEntity()) { vm.setNumOfIoThreads(org.ovirt.engine.ui.uicommonweb.builders.vm.HwOnlyCoreUnitToVmBaseBuilder.DEFAULT_NUM_OF_IOTHREADS); } else { vm.setNumOfIoThreads(0); } vm.setNumOfSockets(model.getNumOfSockets().getSelectedItem()); vm.setCpuPerSocket(model.getCoresPerSocket().getSelectedItem()); vm.setThreadsPerCpu(model.getThreadsPerCore().getSelectedItem()); vm.setDefaultDisplayType(model.getDisplayType().getSelectedItem()); vm.setNumOfMonitors(model.getNumOfMonitors().getSelectedItem()); vm.setSmartcardEnabled(model.getIsSmartcardEnabled().getEntity()); vm.setSsoMethod(model.extractSelectedSsoMethod()); vm.setMinAllocatedMem(model.getMinAllocatedMemory().getEntity()); vm.setDefaultBootSequence(model.getBootSequence()); vm.setSingleQxlPci(model.getIsSingleQxlEnabled().getEntity()); vm.setCustomEmulatedMachine(model.getEmulatedMachine().getSelectedItem()); vm.setCustomCpuName(model.getCustomCpu().getSelectedItem()); }
@org.junit.Test public void canDoActionDiskIsLocked() throws java.lang.Exception { initializeCommand(ImageOperation.Move, new org.ovirt.engine.core.common.businessentities.storage.DiskImage()); initVmDiskImage(false); mockGetVmsListForDisk(); command.getImage().setImageStatus(ImageStatus.LOCKED); doReturn(vmDeviceDao).when(command).getVmDeviceDao(); assertFalse(command.canDoAction()); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_DISKS_LOCKED.toString())); }

@org.junit.Test public void internalActiveDisallowed() { testInternalExecution(StorageDomainStatus.Active); testActionDisallowed(); }


public void initialize(org.ovirt.engine.ui.uicommonweb.models.SystemTreeItemModel SystemTreeSelectedItem) { super.initialize(); setHash(((getHashName()) + (new java.util.Date()))); getMemSize().setEntity(256); getMinAllocatedMemory().setEntity(256); getIsStateless().setEntity(false); getIsRunAndPause().setEntity(false); getIsSmartcardEnabled().setEntity(false); isConsoleDeviceEnabled.setEntity(false); getIsHighlyAvailable().setEntity(false); getIsAutoAssign().setEntity(true); getIsTemplatePublic().setEntity(true); getBehavior().enableSinglePCI(false); isRngEnabled.setEntity(false); rngSourceRandom.setEntity(true); getHostCpu().setEntity(false); getMigrationMode().setIsChangable(true); getCdImage().setIsChangable(false); initGraphicsAndDisplayListeners(); initFirstBootDevice(); initNumOfMonitors(); initAllowConsoleReconnect(); initMigrationMode(); initVncKeyboardLayout(); behavior.initialize(SystemTreeSelectedItem); }
@org.junit.Test public void onlyInboundPeakPresent() { qos.setInboundPeak(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_MEDIUM); valuesPresentTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_MISSING_VALUES)); }



@java.lang.Override protected void verify(org.ovirt.engine.api.model.DiskSnapshot model, org.ovirt.engine.api.model.DiskSnapshot transform) { assertNotNull(transform); assertEquals(model.getId(), transform.getId()); assertEquals(model.getFormat(), transform.getFormat()); assertEquals(model.isReadOnly(), transform.isReadOnly()); assertEquals(model.getDescription(), transform.getDescription()); assertNotNull(model.getSnapshot()); assertEquals(model.getSnapshot().getId(), transform.getSnapshot().getId()); assertEquals("unexpected status", model.getStatus(), transform.getStatus()); assertEquals("unexpected sparse", model.isSparse(), transform.isSparse()); assertEquals("unexpected propagate errors", model.isPropagateErrors(), transform.isPropagateErrors()); assertEquals("unexpected wipe after delete", model.isWipeAfterDelete(), transform.isWipeAfterDelete()); assertEquals("unexpected shareable", model.isShareable(), transform.isShareable()); }



private void createVMFromTemplate() { org.ovirt.engine.core.common.businessentities.VmTemplate template = getSelectedItem(); java.util.List<org.ovirt.engine.ui.uicommonweb.UICommand> commands = new java.util.ArrayList<>(); commands.add(org.ovirt.engine.ui.uicommonweb.UICommand.createDefaultOkUiCommand("OnSaveVm", this)); commands.add(org.ovirt.engine.ui.uicommonweb.UICommand.createCancelUiCommand("Cancel", this)); setupNewVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewVmFromTemplateModelBehavior(template), this), template.getVmType(), getSystemTreeSelectedItem(), commands); }
private boolean changesAreClusterCompatible() { if (!(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getParameters().getNetwork().isVmNetwork())) { if (!(org.ovirt.engine.core.common.FeatureSupported.nonVmNetwork(org.ovirt.engine.core.bll.network.cluster.AttachNetworkToClusterInternalCommand.getVdsGroup().getCompatibilityVersion()))) { addCanDoActionMessage(EngineMessage.NON_VM_NETWORK_NOT_SUPPORTED_FOR_POOL_LEVEL); return false; } } return true; }



@java.lang.Override protected org.springframework.jdbc.core.RowMapper<org.ovirt.engine.core.common.businessentities.storage.DiskImageDynamic> createEntityRowMapper() { return org.ovirt.engine.core.dao.DiskImageDynamicDAODbFacadeImpl.DiskImageDynamicRowMapper.instance; }



private java.lang.String createVG() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CreateVG, new org.ovirt.engine.core.common.vdscommands.CreateVGVDSCommandParameters(org.ovirt.engine.core.bll.storage.AddSANStorageDomainCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.AddSANStorageDomainCommand.getStorageDomain().getId(), org.ovirt.engine.core.bll.storage.AddSANStorageDomainCommand.getParameters().getLunIds(), org.ovirt.engine.core.bll.storage.AddSANStorageDomainCommand.getParameters().isForce())); java.lang.String volumeGroupId = ((java.lang.String) (((returnValue.getReturnValue()) instanceof java.lang.String) ? returnValue.getReturnValue() : null)); return volumeGroupId; }
@java.lang.Override public void remove(java.lang.String id) { try { getClient().networks().delete(id).execute(); } catch (java.lang.RuntimeException e) { throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.PROVIDER_FAILURE, e); } }

public static org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler getInstance() { return org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.instance; }
@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc desktopLogin(java.lang.String vmId, java.lang.String domain, java.lang.String user, java.lang.String password) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("VM.desktopLogin").withParameter("vmID", vmId).withParameter("domain", domain).withParameter("username", user).withParameter("password", password).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }

@org.junit.Test public void testValidateAllClustersLevel() { storagePoolWithVersionHigherThanCluster(); java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> clusterList = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.createClusterList(); org.ovirt.engine.core.common.businessentities.VDSGroup secondCluster = new org.ovirt.engine.core.common.businessentities.VDSGroup(); secondCluster.setCompatibilityVersion(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.VERSION_1_2); secondCluster.setName("secondCluster"); clusterList.add(secondCluster); org.ovirt.engine.core.common.businessentities.VDSGroup thirdCluster = new org.ovirt.engine.core.common.businessentities.VDSGroup(); thirdCluster.setCompatibilityVersion(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommandTest.VERSION_1_1); thirdCluster.setName("thirdCluster"); clusterList.add(thirdCluster); when(vdsGroupDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(clusterList); assertFalse(cmd.checkAllClustersLevel()); java.util.List<java.lang.String> messages = cmd.getReturnValue().getCanDoActionMessages(); assertTrue(messages.contains(EngineMessage.ERROR_CANNOT_UPDATE_STORAGE_POOL_COMPATIBILITY_VERSION_BIGGER_THAN_CLUSTERS.toString())); assertTrue(messages.get(0).contains("firstCluster")); assertFalse(messages.get(0).contains("secondCluster")); assertTrue(messages.get(0).contains("thirdCluster")); }

private static void mapBlockStats(org.ovirt.engine.api.model.ProfileDetail profileDetail, org.ovirt.engine.core.common.businessentities.gluster.StatsInfo statsInfo) { for (org.ovirt.engine.core.common.businessentities.gluster.BlockStats blockStat : statsInfo.getBlockStats()) { org.ovirt.engine.api.model.BlockStatistic bStat = new org.ovirt.engine.api.model.BlockStatistic(); bStat.getStatistic().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.clone(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.BLOCK_SIZE), blockStat.getSize())); bStat.getStatistic().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.clone(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.BYTES_BLOCK_READ), blockStat.getBlockRead())); bStat.getStatistic().add(org.ovirt.engine.api.restapi.utils.StatisticResourceUtils.setDatum(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.clone(org.ovirt.engine.api.restapi.types.GlusterVolumeProfileInfoMapper.BYTES_BLOCK_WRITE), blockStat.getBlockWrite())); profileDetail.getBlockStatistic().add(bStat); } }
@java.lang.Override protected void readOsSection(XmlNode section) { _vmTemplate.setId(new org.ovirt.engine.core.compat.Guid(section.Attributes.get("ovf:id").getValue())); XmlNode node = section.SelectSingleNode("Description"); if (node != null) { if (node.InnerText.equals(java.lang.String.valueOf(OsRepository.OLD_OTHER_ID))) { node.InnerText = java.lang.String.valueOf(OsRepository.DEFAULT_OS); } _vmTemplate.setOsId(osRepository.getOsIdByUniqueName(node.InnerText)); } _vmTemplate.setArchitecture(ArchitectureType.x86_64); }
public java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage_domains> getStorageDomains() { return storageDomains; }
@java.lang.Override protected boolean validate() { if (!(super.validate())) { return false; } if (((getParameters().getBricks()) == null) || ((getParameters().getBricks().size()) == 0)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_BRICKS_REQUIRED); return false; } if (getGlusterVolume().getVolumeType().isReplicatedType()) { if ((getParameters().getReplicaCount()) > ((getGlusterVolume().getReplicaCount()) + 1)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_REPLICA_COUNT_MORE_THAN_ONE); } else if ((getParameters().getReplicaCount()) < (getGlusterVolume().getReplicaCount())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_REPLICA_COUNT); } } if (getGlusterVolume().getVolumeType().isStripedType()) { if ((getParameters().getStripeCount()) > ((getGlusterVolume().getStripeCount()) + 1)) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_INCREASE_STRIPE_COUNT_MORE_THAN_ONE); } else if ((getParameters().getStripeCount()) < (getGlusterVolume().getStripeCount())) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_CAN_NOT_REDUCE_STRIPE_COUNT); } } if (getGlusterVolume().getVolumeType().isDispersedType()) { addValidationMessage(EngineMessage.ACTION_TYPE_FAILED_ADD_BRICK_TO_DISPERSE_VOLUME_NOT_SUPPORTED); return false; } return (updateBrickServerAndInterfaceNames(getParameters().getBricks(), true)) && (validateDuplicateBricks(getParameters().getBricks())); }
@org.junit.Test public void canDoChangeForbiddenField() { sd.setStorageType(StorageType.UNKNOWN); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(cmd, EngineMessage.ERROR_CANNOT_CHANGE_STORAGE_DOMAIN_FIELDS); }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__UPDATE); addCanDoActionMessage(EngineMessage.VAR__TYPE__VM_TEMPLATE); }


protected boolean setAndValidateCpuProfile() { if ((org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getTemplateType()) == (org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE)) { return true; } return validate(org.ovirt.engine.core.bll.profiles.CpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.AddVmTemplateCommand.getParameters().getMasterVm(), org.ovirt.engine.core.bll.AddVmTemplateCommand.getVdsGroup().getCompatibilityVersion())); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> getAllForStorageDomain(org.ovirt.engine.core.compat.Guid storageDomain, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getCallsHandler().executeReadList("GetVmTemplatesByStorageDomainId", org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("storage_domain_id", storageDomain).addValue("user_id", userID).addValue("is_filtered", isFiltered)); }
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.compat.Guid userId = org.ovirt.engine.core.bll.UserProfilesOperationCommandBase.getParameters().getUserProfile().getUserId(); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(userId)) { userId = org.ovirt.engine.core.bll.UserProfilesOperationCommandBase.getUserId(); org.ovirt.engine.core.bll.UserProfilesOperationCommandBase.getParameters().getUserProfile().setUserId(userId); } else if (!(userId.equals(org.ovirt.engine.core.bll.UserProfilesOperationCommandBase.getUserId()))) { return failCanDoAction(EngineMessage.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION); } java.lang.String sshPublicKey = org.ovirt.engine.core.bll.UserProfilesOperationCommandBase.getParameters().getUserProfile().getSshPublicKey(); if ((sshPublicKey == null) || (sshPublicKey.isEmpty())) { return true; } if (!(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isPublicKeyValid(sshPublicKey))) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_INVALID_PUBLIC_SSH_KEY); } return true; }

@java.lang.Override public java.lang.String getValue(java.lang.Object object) { return ((org.ovirt.engine.core.common.businessentities.VmTemplate) (object)).getname(); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAllForNetwork(org.ovirt.engine.core.compat.Guid networkId) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("network_id", networkId); java.util.List<org.ovirt.engine.core.common.businessentities.VDS> vdsList = getCallsHandler().executeReadList("GetVdsByNetworkId", org.ovirt.engine.core.dao.VdsDAODbFacadeImpl.VdsRowMapper.instance, parameterSource); return uniteAgents(vdsList); }
private void toggleVisibleWidgets(int currentWidth) { int widgetWidth = 0; boolean foundEdge = false; if ((contentPanel.getWidgetCount()) > 1) { for (int i = 0; i < ((contentPanel.getWidgetCount()) - 1); i++) { com.google.gwt.user.client.ui.Widget widget = contentPanel.getWidget(i); widget.setVisible(true); if (foundEdge || ((widgetWidth + (widget.getOffsetWidth())) > currentWidth)) { widget.setVisible(false); toolbarOnlyActionButtonList.get(i).setCascaded(true); foundEdge = true; } else { toolbarOnlyActionButtonList.get(i).setCascaded(false); widget.setVisible(true); } widgetWidth += widget.getOffsetWidth(); } } }
public static void GetoVirtISOsList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid id) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? new java.util.ArrayList<org.ovirt.engine.core.compat.RpmVersion>(((java.util.ArrayList<org.ovirt.engine.core.compat.RpmVersion>) (source))) : new java.util.ArrayList<org.ovirt.engine.core.compat.RpmVersion>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetoVirtISOs, new org.ovirt.engine.core.common.queries.VdsIdParametersBase(id), aQuery); }
private void extractRemovedNetworks() { for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : getExistingIfaces().values()) { java.lang.String net = iface.getNetworkName(); if ((org.apache.commons.lang.StringUtils.isNotBlank(net)) && (!(attachedNetworksNames.contains(net)))) { removedNetworks.add(net); } } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(params.getVdsId(), removedNetworks); for (java.lang.String vmName : vmNames) { addViolation(VdcBllMessages.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, vmName); } }
private void endCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> listVms = getVmsForDiskId(); for (org.ovirt.engine.core.common.businessentities.VM vm : listVms) { org.ovirt.engine.core.bll.RemoveDiskCommand.getVmStaticDAO().incrementDbGeneration(vm.getId()); } org.ovirt.engine.core.bll.Backend.getInstance().EndAction(VdcActionType.RemoveImage, org.ovirt.engine.core.bll.RemoveDiskCommand.getParameters().getImagesParameters().get(0)); org.ovirt.engine.core.bll.RemoveDiskCommand.setSucceeded(true); }
private void createHostedEngineVm(org.ovirt.engine.core.compat.Guid id) { org.ovirt.engine.core.common.businessentities.VmStatic vmStatic = new org.ovirt.engine.core.common.businessentities.VmStatic(); vmStatic.setId(id); vmStatic.setClusterId(FixturesTool.CLUSTER_RHEL6_ISCSI); vmStatic.setName("HostedEngine"); vmStatic.setOrigin(OriginType.HOSTED_ENGINE); getDbFacade().getVmStaticDao().save(vmStatic); org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(); vmDynamic.setId(id); getDbFacade().getVmDynamicDao().save(vmDynamic); org.ovirt.engine.core.common.businessentities.VmStatistics vmStatistics = new org.ovirt.engine.core.common.businessentities.VmStatistics(); vmStatistics.setId(id); getDbFacade().getVmStatisticsDao().save(vmStatistics); }
@java.lang.Override protected void buildSysprepVmPayload(java.lang.String sysPrepContent) { org.ovirt.engine.core.common.businessentities.VmPayload vmPayload = new org.ovirt.engine.core.common.businessentities.VmPayload(); vmPayload.setDeviceType(VmDeviceType.FLOPPY); vmPayload.getFiles().put(org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.SYSPREP_FILE_NAME, org.apache.commons.codec.binary.Base64.encodeBase64String(sysPrepContent.getBytes())); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = new org.ovirt.engine.core.common.businessentities.VmDevice(new org.ovirt.engine.core.common.businessentities.VmDeviceId(org.ovirt.engine.core.compat.Guid.newGuid(), vm.getId()), org.ovirt.engine.core.common.businessentities.VmDeviceGeneralType.DISK, VmDeviceType.FLOPPY.getName(), "", 0, vmPayload.getSpecParams(), true, true, true, "", null, null, null); java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<java.lang.String, java.lang.Object>(); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addFloppyDetails(vmDevice, struct); addDevice(struct, vmDevice, vm.getFloppyPath()); }

private boolean updateIsoListFromVDSM(org.ovirt.engine.core.compat.Guid repoStoragePoolId, org.ovirt.engine.core.compat.Guid repoStorageDomainId, java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.Object>> fileStats) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.FileListRefreshed fileListRefreshed = new org.ovirt.engine.core.bll.IsoDomainListSyncronizer.FileListRefreshed() { @java.lang.Override public void onFileListRefreshed(org.ovirt.engine.core.compat.Guid poolId, java.util.Set<java.lang.String> isoList) { org.ovirt.engine.core.bll.VmHandler.refreshVmsToolsVersion(poolId, isoList); } }; return refreshVdsmFileList(repoStoragePoolId, repoStorageDomainId, ImageFileType.ISO, fileStats, fileListRefreshed); }
protected static void updateLocalDisksUsage(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct xmlRpcStruct) { if (xmlRpcStruct.containsKey(VdsProperties.DISK_STATS)) { java.util.Map<java.lang.String, java.lang.Object> diskStatsStruct = ((java.util.Map<java.lang.String, java.lang.Object>) (xmlRpcStruct.getItem(VdsProperties.DISK_STATS))); java.util.Map<java.lang.String, java.lang.Long> diskStats = new java.util.HashMap<java.lang.String, java.lang.Long>(); vds.setLocalDisksUsage(diskStats); for (java.lang.String path : diskStatsStruct.keySet()) { org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct pathStatsStruct = new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct(((java.util.Map<java.lang.String, java.lang.Object>) (diskStatsStruct.get(path)))); diskStats.put(path, org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignLongValue(pathStatsStruct, VdsProperties.DISK_STATS_FREE)); } } }


@java.lang.Override public void rollback() { super.rollback(); poolPerDc.modifyPool(oldMacPool); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.storage.AddStorageDomainCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_ADD_STORAGE_DOMAIN : org.ovirt.engine.core.common.AuditLogType.USER_ADD_STORAGE_DOMAIN_FAILED; }
@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.storage.ImportCloneModel object) { if ((object.getEntity()) instanceof org.ovirt.engine.core.common.businessentities.VM) { dialogLabelEditor.setText(messages.sameVmNameExists(((org.ovirt.engine.core.common.businessentities.VM) (object.getEntity())).getVmName())); cloneEditor.asRadioButton().setHTML(templates.twoLinesRadioButtonLabel(constants.cloneImportVm(), constants.cloneImportVmDetails()).asString()); suffixEditor.setLabel(constants.cloneImportSuffixVm()); } else { dialogLabelEditor.setText(((((constants.sameTemplateNameExists()) + " (") + (((org.ovirt.engine.core.common.businessentities.VmTemplate) (object.getEntity())).getname())) + ")")); cloneEditor.setLabel(constants.cloneImportTemplate()); suffixEditor.setLabel(constants.cloneImportSuffixTemplate()); } org.ovirt.engine.ui.webadmin.section.main.view.popup.storage.backup.ImportCloneDialogPopupView.Driver.driver.edit(object); }
protected void executeImport(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmFromExportDomainModel importVmModel) { importVmModel.importVms(new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void> vmListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel<java.lang.Void>) (result.getState())); vmListModel.stopProgress(); vmListModel.setConfirmWindow(null); vmListModel.setWindow(null); vmListModel.clearCachedAssignedVmNames(); java.util.List<org.ovirt.engine.core.common.action.VdcReturnValueBase> retVals = result.getReturnValue(); if ((retVals != null) && ((vmListModel.getSelectedItems().size()) == (retVals.size()))) { java.lang.StringBuilder importedVms = new java.lang.StringBuilder(); int counter = 0; boolean toShowConfirmWindow = false; for (java.lang.Object item : vmListModel.getSelectedItems()) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (item)); if (((retVals.get(counter)) != null) && (retVals.get(counter).getCanDoAction())) { importedVms.append(vm.getName()).append(", "); toShowConfirmWindow = true; } counter++; } if (toShowConfirmWindow) { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel confirmModel = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); vmListModel.setConfirmWindow(confirmModel); confirmModel.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().importVirtualMachinesTitle()); confirmModel.setHelpTag(HelpTag.import_virtual_machine); confirmModel.setHashName("import_virtual_machine"); confirmModel.setMessage(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().importProcessHasBegunForVms(org.ovirt.engine.core.compat.StringHelper.trimEnd(importedVms.toString().trim(), ','))); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("CancelConfirm", vmListModel); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().close()); tempVar2.setIsDefault(true); tempVar2.setIsCancel(true); confirmModel.getCommands().add(tempVar2); } } } }, cloneObjectMap); org.ovirt.engine.ui.uicommonweb.models.vms.VmListModel.setWindow(null); }
private void buildVmUsbControllers() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmDevices = vmDeviceDao.getVmDeviceByVmIdTypeAndDevice(vm.getId(), VmDeviceGeneralType.CONTROLLER, VmDeviceType.USB.getName()); for (org.ovirt.engine.core.common.businessentities.VmDevice vmDevice : vmDevices) { java.util.Map struct = new java.util.HashMap(); struct.put(VdsProperties.Type, vmDevice.getType().getValue()); struct.put(VdsProperties.Device, vmDevice.getDevice()); vmInfoBuildHelper.setVdsPropertiesFromSpecParams(vmDevice.getSpecParams(), struct); struct.put(VdsProperties.SpecParams, new java.util.HashMap<java.lang.String, java.lang.Object>()); struct.put(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); java.lang.String model = ((java.lang.String) (struct.get(VdsProperties.Model))); if ((model != null) && (vmInfoBuildHelper.isFirstMasterController(model))) { devices.add(0, struct); } else { devices.add(struct); } } }
private boolean validateAttachment() { org.ovirt.engine.core.compat.Version clusterVersion = org.ovirt.engine.core.bll.network.cluster.UpdateNetworkOnClusterCommand.getVdsGroupDAO().get(getNetworkCluster().getClusterId()).getcompatibility_version(); org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator validator = new org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidator(getNetworkCluster(), clusterVersion); return (((!(org.ovirt.engine.core.utils.NetworkUtils.isManagementNetwork(getNetwork()))) || (validate(validator.managementNetworkAttachment(getNetworkName())))) && (validate(validator.migrationPropertySupported(getNetworkName())))) && ((!(getNetwork().isExternal())) || (validateExternalNetwork(validator))); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.frontend.FrontendFailureEventArgs failureArgs = ((org.ovirt.engine.ui.frontend.FrontendFailureEventArgs) (args)); errorPopupManager.show(messages.uiCommonRunActionFailed(org.ovirt.engine.ui.common.uicommon.ErrorMessageFormatter.formatMessages(failureArgs.getMessages()))); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return !(_hasFlags) ? org.ovirt.engine.core.common.AuditLogType.VDS_CPU_RETRIEVE_FAILED : org.ovirt.engine.core.common.AuditLogType.VDS_CPU_LOWER_THAN_CLUSTER; }
public static boolean isVmPriorityValueLegal(int value, java.util.List<java.lang.String> reasons) { boolean res = false; if ((value >= 0) && (value <= (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VmPriorityMaxValue)))) { res = true; } else { reasons.add(VdcBllMessages.VM_OR_TEMPLATE_ILLEGAL_PRIORITY_VALUE.toString()); reasons.add(java.lang.String.format("$MaxValue %1$s", org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.VmPriorityMaxValue))); } return res; }
private org.ovirt.engine.core.compat.Guid getVdsToRunOn(java.lang.Iterable<org.ovirt.engine.core.common.businessentities.VDS> vdss) { final java.util.List<org.ovirt.engine.core.common.businessentities.VDS> readyToRun = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDS>(); for (org.ovirt.engine.core.common.businessentities.VDS curVds : vdss) { if (!(curVds.getvds_group_id().equals(getVm().getvds_group_id()))) continue; if ((curVds.getstatus()) != (org.ovirt.engine.core.common.businessentities.VDSStatus.Up)) continue; if (!(org.ovirt.engine.core.bll.RunVmCommandBase.hasMemoryToRunVM(curVds, getVm()))) continue; if (((((getVm().getrun_on_vds()) != null) && (getVm().getrun_on_vds().equals(curVds.getId()))) || (isVdsFailedToRunVm(curVds.getId()))) || (!(org.ovirt.engine.core.bll.RunVmCommandBase.hasCapacityToRunVM(curVds)))) continue; if (((curVds.getcpu_cores()) != null) && ((getVm().getnum_of_cpus()) > (curVds.getcpu_cores()))) { continue; } if (!(org.ovirt.engine.core.bll.VdsSelector.IsVMSwapValueLegal(curVds))) continue; if (!(areRequiredNetworksAvailable(curVds.getId()))) continue; readyToRun.add(curVds); } return readyToRun.isEmpty() ? org.ovirt.engine.core.compat.Guid.Empty : getBestVdsToRun(readyToRun); }



@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.compat.Guid taskId = persistAsyncTaskPlaceHolder(VdcActionType.RemoveVmTemplate); org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.DeleteImageGroup, new org.ovirt.engine.core.common.vdscommands.DeleteImageGroupVDSCommandParameters(org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getStoragePoolId(), org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getImageGroupID(), org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getWipeAfterDelete(), false)); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getReturnValue().getInternalVdsmTaskIdList().add(createTask(taskId, vdsReturnValue.getCreationInfo(), VdcActionType.RemoveVmTemplate, VdcObjectType.Storage, org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.getParameters().getStorageDomainId())); org.ovirt.engine.core.bll.RemoveTemplateSnapshotCommand.setSucceeded(true); } }


protected void deactivateStorageDomainAfterTaskExecution() { final org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase params = new org.ovirt.engine.core.common.action.StorageDomainPoolParametersBase(org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand.getStorageDomainId(), org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand.getStoragePoolId()); params.setSkipChecks(true); boolean newThread = ((org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand.getStorageDomain().getStorageDomainType()) == (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master)) && ((org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand.getNewMaster(false)) == null); if (newThread) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(new java.lang.Runnable() { @java.lang.Override public void run() { try { waitForTasksToBeCleared(); executeDeactivateCommnad(false); } catch (java.lang.Exception e) { setSucceeded(false); log.error("Error when attempting to deactivate storage domain {0}", getStorageDomainId(), e); compensate(); } } }); } else { executeDeactivateCommnad(false); } }


public void rollbackQuotaByVmId(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(vmId); if (vm != null) { rollbackQuota(vm.getstorage_pool_id(), java.util.Arrays.asList(vm.getQuotaId())); } }
@java.lang.Override public void save(T entity) { entityManager.merge(entity); }
@java.lang.Override protected void executeCommand() { log.info("Creating ImageTransfer entity for command '{}'", org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.common.businessentities.storage.ImageTransfer entity = new org.ovirt.engine.core.common.businessentities.storage.ImageTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); entity.setCommandType(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getActionType()); entity.setPhase(ImageTransferPhase.INITIALIZING); entity.setLastUpdated(new java.util.Date()); entity.setBytesTotal(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferSize()); imageTransferDao.save(entity); if (org.ovirt.engine.core.compat.Guid.isNullOrEmpty(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId())) { if ((org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getTransferType()) == (org.ovirt.engine.core.common.businessentities.storage.TransferType.Download)) { failValidation(EngineMessage.ACTION_TYPE_FAILED_IMAGE_NOT_SPECIFIED_FOR_DOWNLOAD); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(false); return; } log.info("Creating {} image", getImageType()); createImage(); } else { handleImageIsReadyForTransfer(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getParameters().getImageId()); } setActionReturnValue(org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.getCommandId()); org.ovirt.engine.core.bll.storage.disk.image.TransferImageCommand.setSucceeded(true); }
protected void addMoveOrCopyParameters(java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters, org.ovirt.engine.core.compat.Guid sourceStorageDomainGuid, org.ovirt.engine.core.compat.Guid destStorageDomainGuid, org.ovirt.engine.core.common.businessentities.DiskImage disk, org.ovirt.engine.core.common.businessentities.ImageOperation imageOperation) { org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters diskParameters = new org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters(disk.getImageId(), sourceStorageDomainGuid, destStorageDomainGuid, imageOperation); diskParameters.setQuotaId(disk.getQuotaId()); parameters.add(diskParameters); }
@java.lang.Override public boolean isUpdateAvailable(final org.ovirt.engine.core.common.businessentities.VDS host) { final java.util.List<java.lang.String> packages = org.ovirt.engine.core.common.config.Config.getPackagesForUpdateCheck(); try (final org.ovirt.engine.core.bll.hostdeploy.VdsMgmtPackages hostPackagesManager = createPackagesManager(host, true)) { hostPackagesManager.setPackages(packages); hostPackagesManager.execute(); if (!(hostPackagesManager.getUpdates().isEmpty())) { org.ovirt.engine.core.bll.host.HostUpgradeManager.log.info("There are available packages ({}) for host '{}'", org.apache.commons.lang.StringUtils.join(hostPackagesManager.getUpdates(), ", "), host.getName()); } return !(hostPackagesManager.getUpdates().isEmpty()); } catch (final java.lang.Exception e) { org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Failed to refresh host '{}' packages '{}'.", host.getName(), org.apache.commons.lang.StringUtils.join(packages, ", ")); org.ovirt.engine.core.bll.host.HostUpgradeManager.log.error("Exception", e); throw new java.lang.RuntimeException(e.getMessage(), e); } }
private boolean executeSshSoftFencingCommand(java.lang.String version) { boolean result = true; org.ovirt.engine.core.bll.utils.EngineSSHClient sshClient = null; java.io.ByteArrayOutputStream bos = null; try { sshClient = new org.ovirt.engine.core.bll.utils.EngineSSHClient(); sshClient.setVds(org.ovirt.engine.core.bll.SshSoftFencingCommand.getVds()); sshClient.useDefaultKeyPair(); sshClient.connect(); sshClient.authenticate(); bos = new java.io.ByteArrayOutputStream(); sshClient.executeCommand(org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.SshSoftFencingCommand, version), null, bos, null); log.info(("SSH Soft Fencing command executed on host " + (org.ovirt.engine.core.bll.SshSoftFencingCommand.getVds().getHostName()))); log.debug(("SSH Soft Fencing command output " + (bos.toString()))); } catch (java.lang.Exception ex) { log.error(("SSH Soft Fencing command failed on host " + (org.ovirt.engine.core.bll.SshSoftFencingCommand.getVds().getHostName())), ex); result = false; } finally { closeSshConnection(sshClient); } return result; }



protected org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters getCreateSnapshotParameters() { org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters params = new org.ovirt.engine.core.common.action.CreateAllSnapshotsFromVmParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getVmId(), "Auto-generated for Live Storage Migration"); params.setParentCommand(VdcActionType.LiveMigrateVmDisks); params.setSnapshotType(SnapshotType.REGULAR); params.setParentParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters()); params.setImagesParameters(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getImagesParameters()); params.setTaskGroupSuccess(org.ovirt.engine.core.bll.storage.lsm.LiveMigrateVmDisksCommand.getParameters().getTaskGroupSuccess()); params.setDisks(getMovedDisks()); params.setDiskIdsToIgnoreInChecks(getMovedDiskIds()); params.setNeedsLocking(false); params.setEndProcedure(EndProcedure.COMMAND_MANAGED); return params; }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = org.ovirt.engine.core.vdsbroker.gluster.CreateGlusterVolumeVDSCommand.getParameters().getVolume(); uuidReturn = org.ovirt.engine.core.vdsbroker.gluster.CreateGlusterVolumeVDSCommand.getBroker().glusterVolumeCreate(volume.getName(), volume.getBrickDirectories().toArray(new java.lang.String[0]), volume.getReplicaCount(), volume.getStripeCount(), getTransportTypeArr(volume)); org.ovirt.engine.core.vdsbroker.gluster.CreateGlusterVolumeVDSCommand.proceedProxyReturnValue(); if (org.ovirt.engine.core.vdsbroker.gluster.CreateGlusterVolumeVDSCommand.getVDSReturnValue().getSucceeded()) { volume.setId(org.ovirt.engine.core.compat.Guid.createGuidFromStringDefaultEmpty(uuidReturn.mUuid)); setReturnValue(volume); } }
private java.util.List<org.ovirt.engine.core.common.businessentities.VDS> searchVDSsByDb() { return genericSearch(org.ovirt.engine.core.bll.SearchQuery.getDbFacade().getVdsDao(), true, new org.ovirt.engine.core.common.utils.ListUtils.Filter<org.ovirt.engine.core.common.businessentities.VDS>() { @java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDS> filter(java.util.List<org.ovirt.engine.core.common.businessentities.VDS> data) { for (org.ovirt.engine.core.common.businessentities.VDS vds : data) { vds.setCpuName(org.ovirt.engine.core.bll.CpuFlagsManagerHandler.findMaxServerCpuByFlags(vds.getCpuFlags(), vds.getVdsGroupCompatibilityVersion())); } return data; } }); }
@java.lang.Override public void eventRaised(org.ovirt.engine.core.compat.Event ev, java.lang.Object sender, org.ovirt.engine.core.compat.EventArgs args) { if ((args instanceof org.ovirt.engine.core.compat.PropertyChangedEventArgs) && (((org.ovirt.engine.core.compat.PropertyChangedEventArgs) (args)).PropertyName.equals(object.ON_DISK_LOAD))) { addStorageQuotaColumn(); diskTable.edit(object.getImportDiskListModel()); customSelectionCellFormatType.setEnabledWithToolTip(((java.lang.Boolean) (object.getCollapseSnapshots().getEntity())), constants.importAllocationModifiedCollapse()); if ((object.getProblematicItems().size()) > 0) { image.setVisible(true); } } else if ((args instanceof org.ovirt.engine.core.compat.PropertyChangedEventArgs) && (((org.ovirt.engine.core.compat.PropertyChangedEventArgs) (args)).PropertyName.equals("Message"))) { message.setText(object.getMessage()); } }
@java.lang.Override public java.lang.String getMessage() { return (super.getMessage()) + (java.lang.String.format(" (Failed with error %1$s and code %2$s)", privateVdsError.getCode(), privateVdsError.getCode().getValue())); }

@java.lang.Override public org.ovirt.engine.core.vdsbroker.irsbroker.FileStatsReturnForXmlRpc getIsoList(java.lang.String spUUID) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("StoragePool.getIsoList").withParameter("storagepoolID", spUUID).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request).withResponseKey("isolist").withResponseType(java.lang.Object[].class); return new org.ovirt.engine.core.vdsbroker.irsbroker.FileStatsReturnForXmlRpc(response); }


@java.lang.Override public org.ovirt.engine.core.common.businessentities.aaa.DbGroup getByExternalId(java.lang.String domain, java.lang.String externalId) { return getCallsHandler().executeRead("GetGroupByExternalId", org.ovirt.engine.core.dao.DbGroupDAODbFacadeImpl.DbGroupRowMapper.instance, getCustomMapSqlParameterSource().addValue("domain", domain).addValue("external_id", externalId)); }

@java.lang.Override protected void executeQueryCommand() { java.util.List<? extends org.ovirt.engine.core.common.businessentities.IVdcQueryable> returnValue = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.IVdcQueryable>(); switch (org.ovirt.engine.core.bll.SearchQuery.getParameters().getSearchTypeValue()) { case VM : { returnValue = searchVmsFromDb(); break; } case AdGroup : { returnValue = searchAdGroups(); break; } case AdUser : { returnValue = searchAdUsers(); break; } case AuditLog : { returnValue = searchAuditLogEvents(); break; } case DBUser : { returnValue = searchDbUsers(); break; } case VDS : { returnValue = searchVDSsByDb(); break; } case VmTemplate : { returnValue = searchVMTemplates(); break; } case VmPools : { returnValue = searchVmPools(); break; } case Cluster : { returnValue = searchClusters(); break; } case StoragePool : { returnValue = searchStoragePool(); break; } case StorageDomain : { returnValue = searchStorageDomain(); break; } case Quota : { returnValue = searchQuota(); break; } case Disk : { returnValue = searchDisk(); break; } case GlusterVolume : { returnValue = searchGlusterVolumes(); break; } case Network : { returnValue = searchNetworks(); break; } default : { log.errorFormat("Search object type not handled: {0}", org.ovirt.engine.core.bll.SearchQuery.getParameters().getSearchTypeValue()); break; } } getQueryReturnValue().setReturnValue(returnValue); }
@java.lang.Override protected void Connect() { if ((getEntity()) != null) { getLogger().Debug("Connecting to Spice console..."); if (!(getspice().getIsInstalled())) { getLogger().Info("Spice client is not installed."); getspice().Install(); return; } if ((getConfigurator().getIsAdmin()) && ((getspice().getCurrentVersion().compareTo(getspice().getDesiredVersion())) < 0)) { getLogger().Info((("Spice client version is not as desired (" + (getspice().getDesiredVersion())) + ")")); getspice().Install(); return; } if ((getEntity().getrun_on_vds()) == null) { return; } SendVmTicket(); } }

@java.lang.Override protected void executeCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VmNumaNode> vmNumaNodes = org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getParameters().getVmNumaNodeList(); vmNumaNodes.stream().forEach(( node) -> node.setId(org.ovirt.engine.core.compat.Guid.newGuid())); org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVmNumaNodeDao().massSaveNumaNode(vmNumaNodes, null, org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.getVm().getId()); setActionReturnValue(vmNumaNodes.get(0).getId()); org.ovirt.engine.core.bll.numa.vm.AddVmNumaNodesCommand.setSucceeded(true); }
public org.ovirt.engine.core.bll.ValidationResult notIscsiBondNetwork() { java.util.List<org.ovirt.engine.core.common.businessentities.IscsiBond> iscsiBonds = getDbFacade().getIscsiBondDao().getIscsiBondsByNetworkId(network.getId()); if (!(iscsiBonds.isEmpty())) { java.util.Collection<java.lang.String> replaceNameables = org.ovirt.engine.core.utils.ReplacementUtils.replaceWithNameable("IscsiBonds", iscsiBonds); replaceNameables.add(getNetworkNameReplacement()); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.NETWORK_CANNOT_REMOVE_ISCSI_BOND_NETWORK, replaceNameables); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public java.util.Map spmStart(java.lang.String spUUID, java.lang.String prevID, java.lang.String prevLVER, java.lang.String recoveryMode, java.lang.String scsiFencing) { final org.ovirt.vdsmfake.domain.Host host = getActiveHost(); java.util.Map resultMap = getOKStatus(); org.ovirt.vdsmfake.domain.Task task = new org.ovirt.vdsmfake.domain.Task(getUuid()); resultMap.put("uuid", task.getId()); task.setTarget(host); getActiveHost().getRunningTasks().put(task.getId(), task); org.ovirt.vdsmfake.task.TaskProcessor.setTasksMap(host.getName(), task.getId()); org.ovirt.vdsmfake.task.TaskProcessor.getInstance().addTask(new org.ovirt.vdsmfake.task.TaskRequest(org.ovirt.vdsmfake.task.TaskType.FINISH_START_SPM, 10000L, task)); return resultMap; }
public void onEditSnapshotSchedule() { final org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel snapshotModel = ((org.ovirt.engine.ui.uicommonweb.models.gluster.GlusterVolumeSnapshotModel) (getWindow())); if (!(snapshotModel.validate(false))) { return; } scheduleSnapshot(snapshotModel, true); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("For allowing PK authentication, copy the following PK to host under /root/.ssh/authorized_keys") java.lang.String publicKeyUsage();

@java.lang.Override protected boolean canDoAction() { if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm()) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_NOT_FOUND); } if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().isRunningOrPaused()) || ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().getStatus()) == (org.ovirt.engine.core.common.businessentities.VMStatus.Unknown))) { return failCanDoAction(VdcBllMessages.VM_POOL_CANNOT_ADD_RUNNING_VM_TO_POOL); } if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().getVmPoolId()) != null) { return failCanDoAction(VdcBllMessages.VM_POOL_CANNOT_ADD_VM_ATTACHED_TO_POOL); } if ((org.ovirt.engine.core.bll.AddVmToPoolCommand.getParameters().getVmPoolId()) != null) { org.ovirt.engine.core.common.businessentities.VmPool pool = org.ovirt.engine.core.bll.AddVmToPoolCommand.getVmPoolDao().get(org.ovirt.engine.core.bll.AddVmToPoolCommand.getParameters().getVmPoolId()); if ((pool != null) && (!(pool.getVdsGroupId().equals(org.ovirt.engine.core.bll.AddVmToPoolCommand.getVm().getVdsGroupId())))) { return failCanDoAction(VdcBllMessages.VM_POOL_CANNOT_ADD_VM_DIFFERENT_CLUSTER); } } return true; }
private void issueTokenForLoginOnBehalf(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, java.lang.String scope) throws java.lang.Exception { org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug("Entered issueTokenForLoginOnBehalf"); java.lang.String[] clientIdAndSecret = org.ovirt.engine.core.sso.utils.SSOUtils.getClientIdClientSecret(request); java.lang.String username = org.ovirt.engine.core.sso.utils.SSOUtils.getRequestParameter(request, "username", null); org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug("Attempting to issueTokenForLoginOnBehalf for client: {}, user: {}", clientIdAndSecret[0], username); org.ovirt.engine.core.sso.utils.AuthenticationUtils.loginOnBehalf(ssoContext, request, username); java.lang.String token = ((java.lang.String) (request.getAttribute(SSOConstants.HTTP_REQ_ATTR_ACCESS_TOKEN))); org.ovirt.engine.core.sso.utils.SSOUtils.validateRequestScope(request, token, scope); org.ovirt.engine.core.sso.utils.SSOSession ssoSession = org.ovirt.engine.core.sso.utils.SSOUtils.getSsoSession(request, token, true); if (ssoSession == null) { throw new org.ovirt.engine.core.sso.utils.OAuthException(org.ovirt.engine.core.sso.utils.SSOConstants.ERR_CODE_INVALID_GRANT, "The provided authorization grant for the username and password has expired"); } org.ovirt.engine.core.sso.servlets.OAuthTokenServlet.log.debug("Sending json response"); org.ovirt.engine.core.sso.utils.SSOUtils.sendJsonData(response, buildResponse(ssoSession)); }
private void importImages() { @java.lang.SuppressWarnings("unchecked") java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoImage> repoImages = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.RepoImage>) (getSelectedItems())); if ((repoImages == null) || ((getWindow()) != null)) { return; } org.ovirt.engine.ui.uicommonweb.models.storage.ImportRepoImageModel model = new org.ovirt.engine.ui.uicommonweb.models.storage.ImportRepoImageModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().importImagesTitle()); model.setHashName("import_images"); model.setEntity(this); model.init(((org.ovirt.engine.core.common.businessentities.StorageDomain) (getEntity())), repoImages); org.ovirt.engine.ui.uicommonweb.UICommand cancelCommand = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); cancelCommand.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); cancelCommand.setIsCancel(true); model.setCancelCommand(cancelCommand); model.getCommands().add(cancelCommand); }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VM> getAllForCpuProfile(org.ovirt.engine.core.compat.Guid cpuProfileId) { return getCallsHandler().executeReadList("GetVmsByCpuProfileId", org.ovirt.engine.core.dao.VmDaoImpl.VMRowMapper.instance, getCustomMapSqlParameterSource().addValue("cpu_profile_id", cpuProfileId)); }



private org.ovirt.engine.core.bll.ValidationResult vmNotInStatus(org.ovirt.engine.core.compat.Guid vmId, org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotStatus status, org.ovirt.engine.core.common.errors.VdcBllMessages msg) { if (getSnapshotDao().exists(vmId, status)) { return new org.ovirt.engine.core.bll.ValidationResult(msg); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
@java.lang.Override public org.ovirt.engine.api.model.Networks list() { org.ovirt.engine.api.model.Networks networks = mapCollection(getBackendCollection(queryType, getQueryParameters())); for (org.ovirt.engine.api.model.Network network : networks.getNetworks()) { network.setDisplay(null); } return networks; }
@java.lang.Override protected boolean canDoAction() { return ((((validate(networkExists(geRemovedtNetwork()))) && (validate(notManagementNetwork()))) && (validate(org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.networkNotUsedByRunningVm()))) && (validate(networkNotUsedByTemplates(geRemovedtNetwork())))) && (validate(networkNotUsedByHost(geRemovedtNetwork()))); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((id) == null ? 0 : id.hashCode()); result = (prime * result) + ((_children) == null ? 0 : _children.hashCode()); result = (prime * result) + ((description) == null ? 0 : description.hashCode()); result = (prime * result) + ((parent) == null ? 0 : parent.hashCode()); result = (prime * result) + ((readonly) == null ? 0 : readonly.hashCode()); result = (prime * result) + ((name) == null ? 0 : name.hashCode()); result = (prime * result) + ((type) == null ? 0 : type.hashCode()); return result; }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Number of bricks should be equal to Stripe Count") java.lang.String stripeVolumeAddBricksMsg();
@java.lang.Override public void executeCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.executeCommand(command); if (command == (getNewVmCommand())) { newInternal(); } else if (command == (getEditCommand())) { edit(); } else if (command == (getRemoveCommand())) { remove(); } else if (command == (getSaveCommand())) { onSave(); } else if (command == (getRunOnceCommand())) { runOnce(); } else if (command == (getChangeCdCommand())) { changeCD(); } else if (command == (getNewTemplateCommand())) { newTemplate(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnRemove")) { onRemove(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnRunOnce")) { cancel(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnChangeCD")) { onChangeCD(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnNewTemplate")) { onNewTemplate(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnSave")) { onSave(); } else if (command.getName().equals("closeVncInfo")) { setWindow(null); } }

@org.junit.Test public void testUpdateQuota() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.Quota quotaGeneralToSpecific = dao.getById(FixturesTool.QUOTA_GENERAL); java.lang.String quotaName = "New Temporary name"; java.util.List<org.ovirt.engine.core.common.businessentities.QuotaCluster> quotaClusterList = org.ovirt.engine.core.dao.QuotaDaoTest.getQuotaCluster(org.ovirt.engine.core.dao.QuotaDaoTest.getSpecificQuotaCluster(quotaGeneralToSpecific.getId())); java.lang.Long newStorageLimit = 2345L; assertEquals(quotaName.equals(quotaGeneralToSpecific.getQuotaName()), false); assertEquals(((quotaClusterList.size()) == (quotaGeneralToSpecific.getQuotaClusters().size())), false); assertEquals(quotaGeneralToSpecific.getGlobalQuotaStorage().getStorageSizeGB().equals(newStorageLimit), false); quotaGeneralToSpecific.setQuotaName(quotaName); quotaGeneralToSpecific.getGlobalQuotaStorage().setStorageSizeGB(newStorageLimit); quotaGeneralToSpecific.setQuotaClusters(quotaClusterList); dao.update(quotaGeneralToSpecific); quotaGeneralToSpecific = dao.getById(FixturesTool.QUOTA_GENERAL); assertEquals(quotaName.equals(quotaGeneralToSpecific.getQuotaName()), true); assertEquals(((quotaClusterList.size()) == (quotaGeneralToSpecific.getQuotaClusters().size())), true); assertEquals(quotaGeneralToSpecific.getGlobalQuotaStorage().getStorageSizeGB().equals(newStorageLimit), true); }



private boolean validateSpaceRequirements(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain, java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> disksList) { org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator storageDomainValidator = getStorageDomainValidator(storageDomain); return (storageDomainValidator.isDomainWithinThresholds().isValid()) && (storageDomainValidator.hasSpaceForClonedDisks(disksList).isValid()); }
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; if ((getClass()) != (obj.getClass())) return false; org.ovirt.engine.core.common.businessentities.network.NetworkCluster other = ((org.ovirt.engine.core.common.businessentities.network.NetworkCluster) (obj)); if ((display) != (other.display)) return false; if ((status) == null) { if ((other.status) != null) return false; } else if (!(status.equals(other.status))) return false; if ((id) == null) { if ((other.id) != null) return false; } else if (!(id.equals(other.id))) return false; if ((required) != (other.required)) { return false; } if ((migration) != (other.migration)) { return false; } return true; }
@org.junit.Before public void setUp() throws java.lang.Exception { fakeScheduler = new org.ovirt.engine.ui.frontend.FakeGWTScheduler(); org.ovirt.engine.ui.frontend.communication.CommunicationProvider communicationsProvider = new org.ovirt.engine.ui.frontend.communication.GWTRPCCommunicationProvider(mockService); org.ovirt.engine.ui.frontend.communication.OperationProcessor operationProcessor = new org.ovirt.engine.ui.frontend.communication.OperationProcessor(communicationsProvider); operationProcessor.setScheduler(fakeScheduler); org.ovirt.engine.ui.frontend.communication.VdcOperationManager operationsManager = new org.ovirt.engine.ui.frontend.communication.VdcOperationManager(operationProcessor); operationsManager.setLoggedIn(true); frontend = new org.ovirt.engine.ui.frontend.Frontend(operationsManager, mockCanDoActionErrorsTranslator, mockVdsmErrorsTranslator, mockEventBus); frontend.setEventsHandler(mockEventsHandler); frontend.setConstants(mockConstants); frontend.frontendFailureEvent = mockFrontendFailureEvent; frontend.setLoginHandler(mockLoginHandler); when(mockAsyncQuery.getDel()).thenReturn(mockAsyncCallback); }
@java.lang.Override protected void executeCommand() { if ((org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate().getTemplateType()) != (org.ovirt.engine.core.common.businessentities.VmEntityType.INSTANCE_TYPE)) { org.ovirt.engine.core.bll.VmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().getVmTemplateData(), org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVdsGroup().getcompatibility_version()); } if ((org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate()) != null) { org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmStaticDAO().incrementDbGeneration(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getVmTemplate().getId()); updateOriginalTemplateNameOnDerivedVms(); UpdateVmTemplate(); updateWatchdog(org.ovirt.engine.core.bll.UpdateVmTemplateCommand.getParameters().getVmTemplateData().getId()); checkTrustedService(); org.ovirt.engine.core.bll.UpdateVmTemplateCommand.setSucceeded(true); } }
@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Snapshot.class, to = org.ovirt.engine.api.model.Snapshot.class) public static org.ovirt.engine.api.model.Snapshot map(org.ovirt.engine.core.common.businessentities.Snapshot entity, org.ovirt.engine.api.model.Snapshot template) { org.ovirt.engine.api.model.Snapshot model = (template != null) ? template : new org.ovirt.engine.api.model.Snapshot(); model.setId(entity.getId().toString()); if ((entity.getDescription()) != null) { model.setDescription(entity.getDescription()); } if ((entity.getCreationDate()) != null) { model.setDate(org.ovirt.engine.api.restapi.types.DateMapper.map(entity.getCreationDate(), null)); } if ((entity.getStatus()) != null) { model.setSnapshotStatus(org.ovirt.engine.api.restapi.types.SnapshotMapper.map(entity.getStatus(), null)); } if ((entity.getType()) != null) { model.setSnapshotType(org.ovirt.engine.api.restapi.types.SnapshotMapper.map(entity.getType(), null)); } if ((entity.getMemoryVolume()) != null) { model.setPersistMemorystate((!(entity.getMemoryVolume().isEmpty()))); } return model; }
public java.lang.Integer getVmMigrating() { return this.mVdsDynamic.getVmMigrating(); }

@java.lang.Override public java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> getPermissionCheckSubjects() { java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> listPermissionSubjects = new java.util.ArrayList<>(); if (org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.isImageProvided()) { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getImageId(), org.ovirt.engine.core.common.VdcObjectType.Disk, org.ovirt.engine.core.common.businessentities.ActionGroup.EDIT_DISK_PROPERTIES)); } else { listPermissionSubjects.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(org.ovirt.engine.core.bll.storage.disk.image.TransferDiskImageCommand.getParameters().getStorageDomainId(), org.ovirt.engine.core.common.VdcObjectType.Storage, org.ovirt.engine.core.common.businessentities.ActionGroup.CREATE_DISK)); } return listPermissionSubjects; }

@java.lang.Override protected boolean canDoAction() { boolean autheticated = org.ovirt.engine.core.bll.aaa.LoginAdminUserCommand.isUserCanBeAuthenticated(); if (autheticated) { autheticated = org.ovirt.engine.core.bll.aaa.LoginAdminUserCommand.getCurrentUser().isAdmin(); if (!autheticated) { addCanDoActionMessage(VdcBllMessages.USER_NOT_AUTHORIZED_TO_PERFORM_ACTION); } } if (!autheticated) { org.ovirt.engine.core.bll.aaa.LoginAdminUserCommand.logAutheticationFailure(); } return autheticated; }

private org.springframework.jdbc.core.namedparam.MapSqlParameterSource getInsertOrUpdateParams(final org.ovirt.engine.core.common.businessentities.VdsStatic vds) { return getCustomMapSqlParameterSource().addValue("host_name", vds.gethost_name()).addValue("ip", vds.getManagmentIp()).addValue("vds_unique_id", vds.getUniqueID()).addValue("port", vds.getport()).addValue("vds_group_id", vds.getvds_group_id()).addValue("vds_id", vds.getId()).addValue("vds_name", vds.getvds_name()).addValue("server_SSL_enabled", vds.getserver_SSL_enabled()).addValue("vds_type", vds.getvds_type()).addValue("vds_strength", vds.getvds_strength()).addValue("pm_type", vds.getpm_type()).addValue("pm_user", vds.getpm_user()).addValue("pm_password", org.ovirt.engine.core.dao.VdsStaticDAODbFacadeImpl.encryptPassword(vds.getpm_password())).addValue("pm_port", vds.getpm_port()).addValue("pm_options", vds.getpm_options()).addValue("pm_enabled", vds.getpm_enabled()).addValue("otp_validity", vds.getOtpValidity()).addValue("vds_spm_priority", vds.getVdsSpmPriority()); }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmList = new java.util.ArrayList<>(); java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getDbFacade().getUnregisteredOVFDataDao().getAllForStorageDomain(org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getParameters().getId(), org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getParameters().getName()); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); vm.setId(ovf.getVmId()); vm.setName(ovf.getVmName()); vmList.add(vm); } org.ovirt.engine.core.bll.GetUnregisteredVmsQuery.getQueryReturnValue().setReturnValue(vmList); }

private java.lang.String generateDomainXml() { org.ovirt.engine.core.common.businessentities.network.VmNic nic = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getNic(); org.ovirt.engine.core.common.businessentities.VmDevice vmDevice = org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVmDevice(); org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder builder = new org.ovirt.engine.core.vdsbroker.builder.vminfo.LibvirtVmXmlBuilder(org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getParameters().getVm(), org.ovirt.engine.core.vdsbroker.vdsbroker.HotPlugOrUnplugNicVDSCommand.getVds().getId(), nic, vmDevice, vmInfoBuildUtils, (nic.isPassthrough() ? java.util.Collections.singletonMap(nic.getId(), vmDevice.getHostDevice()) : java.util.Collections.emptyMap())); java.lang.String libvirtXml = builder.buildHotplugNic(); java.lang.String prettyLibvirtXml = org.ovirt.engine.core.utils.XmlUtils.prettify(libvirtXml); if (prettyLibvirtXml != null) { log.info("NIC hot-set: {}", prettyLibvirtXml); } return libvirtXml; }
@org.junit.Test public void shouldDetectPinnedVM() { invalidVM.setDedicatedVmForVdsList(org.ovirt.engine.core.compat.Guid.newGuid()); invalidVM.setMigrationSupport(org.ovirt.engine.core.bll.validator.PINNED_TO_HOST); assertThat(validator.isVmReadyForUpgrade(invalidVM), hasItem(UPGRADE_ERROR.VM_PINNED_TO_HOSTS)); }

public boolean add(org.ovirt.engine.core.common.businessentities.VmNetworkInterface iface, org.ovirt.engine.core.bll.context.CompensationContext compensationContext) { boolean macAdded = false; if (getMacPoolManager().IsMacInUse(iface.getMacAddress())) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); logable.AddCustomValue("MACAddr", iface.getMacAddress()); logable.AddCustomValue("VmName", iface.getVmName()); log(logable, AuditLogType.MAC_ADDRESS_IS_IN_USE); } else { macAdded = getMacPoolManager().AddMac(iface.getMacAddress()); } getVmNetworkInterfaceDAO().save(iface); getVmNetworkStatisticsDAO().save(iface.getStatistics()); compensationContext.snapshotNewEntity(iface); compensationContext.snapshotNewEntity(iface.getStatistics()); return macAdded; }
@java.lang.Override public boolean match(org.ovirt.engine.core.common.action.VdcReturnValueBase source) { return source.getCanDoAction(); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__ATTACH_ACTION_TO); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__VM_DISK); }
private void refreshServerData(org.ovirt.engine.core.common.businessentities.VDSGroup cluster, org.ovirt.engine.core.common.businessentities.VDS upServer, java.util.List<org.ovirt.engine.core.common.businessentities.VDS> existingServers) { if (cluster.supportsVirtService()) { log.debugFormat("As cluster {0} supports virt service as well, it's servers will not be synced with glusterfs", cluster.getname()); return; } acquireLock(cluster.getId()); try { java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterServerInfo> fetchedServers = fetchServers(cluster, upServer, existingServers); if (fetchedServers != null) { removeDetachedServers(existingServers, fetchedServers); } } finally { releaseLock(cluster.getId()); } }


@org.junit.Test public void onlyOutboundPeakPresent() { qos.setOutboundPeak(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_MEDIUM); valuesPresentTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_MISSING_VALUES)); }
private org.ovirt.engine.core.common.businessentities.CommandEntity buildCommandEntity(org.ovirt.engine.core.compat.Guid rootCommandId, boolean enableCallback) { return org.ovirt.engine.core.common.businessentities.CommandEntity.buildCommandEntity(org.ovirt.engine.core.bll.CommandBase.getUserId(), getCommandId(), ((getParameters().getParentParameters()) == null ? org.ovirt.engine.core.compat.Guid.Empty : getParameters().getParentParameters().getCommandId()), rootCommandId, (((getExecutionContext()) == null) || ((getExecutionContext().getJob()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getJob().getId()), (((getExecutionContext()) == null) || ((getExecutionContext().getStep()) == null) ? org.ovirt.engine.core.compat.Guid.Empty : getExecutionContext().getStep().getId()), getActionType(), getParameters(), commandStatus, enableCallback, getReturnValue(), getCommandData()); }

@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> getAllForEntity(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.compat.Guid userID, boolean isFiltered) { return getAllForEntity(id, userID, isFiltered, false); }
public static java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmOsType> Get64bitOsTypes() { if ((org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.x64OsTypes) != null) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.x64OsTypes; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.x64OsTypes = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmOsType>(java.util.Arrays.asList(new org.ovirt.engine.core.common.businessentities.VmOsType[]{ org.ovirt.engine.core.common.businessentities.VmOsType.RHEL3x64, org.ovirt.engine.core.common.businessentities.VmOsType.RHEL4x64, org.ovirt.engine.core.common.businessentities.VmOsType.RHEL5x64, org.ovirt.engine.core.common.businessentities.VmOsType.RHEL6x64, org.ovirt.engine.core.common.businessentities.VmOsType.Windows2003x64, org.ovirt.engine.core.common.businessentities.VmOsType.Windows2008R2x64, org.ovirt.engine.core.common.businessentities.VmOsType.Windows2008x64, org.ovirt.engine.core.common.businessentities.VmOsType.Windows7x64 })); return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.x64OsTypes; }
@javax.ws.rs.Path("{action: (resetemulatedmachine)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }


@org.junit.Test public void testIsDomainExistAndActiveDomainNotUp() { domain.setStatus(StorageDomainStatus.Inactive); assertEquals("Wrong failure for inactive domain", VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2, validator.isDomainExistAndActive().getMessage()); }
@java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.pools.PoolListModel model = ((org.ovirt.engine.ui.uicommonweb.models.pools.PoolListModel) (target)); if (returnValue != null) { model.setCustomPropertiesKeysList(new java.util.HashMap<org.ovirt.engine.core.compat.Version, java.util.ArrayList<java.lang.String>>()); java.util.HashMap<org.ovirt.engine.core.compat.Version, java.lang.String> dictionary = ((java.util.HashMap<org.ovirt.engine.core.compat.Version, java.lang.String>) (returnValue)); for (java.util.Map.Entry<org.ovirt.engine.core.compat.Version, java.lang.String> keyValuePair : dictionary.entrySet()) { model.getCustomPropertiesKeysList().put(keyValuePair.getKey(), new java.util.ArrayList<java.lang.String>()); for (java.lang.String s : keyValuePair.getValue().split("[;]", (-1))) { model.getCustomPropertiesKeysList().get(keyValuePair.getKey()).add(s); } } } }
protected void setDefaultSelectedProtocol() { java.util.List<org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol> allProtocols = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol>(java.util.Arrays.asList(org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol.values())); if ((selectedProtocol) != null) { allProtocols.remove(selectedProtocol); allProtocols.add(0, selectedProtocol); } for (org.ovirt.engine.ui.uicommonweb.models.ConsoleProtocol protocol : allProtocols) { if (canSelectProtocol(protocol)) { selectProtocol(protocol); break; } } }


@org.ovirt.engine.ui.webadmin.DefaultStringValue("New Server") java.lang.String newServerVm();

@java.lang.Override public org.ovirt.engine.core.common.businessentities.network.NetworkCluster mapRow(java.sql.ResultSet rs, int rowNum) throws java.sql.SQLException { org.ovirt.engine.core.common.businessentities.network.NetworkCluster entity = new org.ovirt.engine.core.common.businessentities.network.NetworkCluster(); entity.setClusterId(getGuidDefaultEmpty(rs, "cluster_id")); entity.setNetworkId(getGuidDefaultEmpty(rs, "network_id")); entity.setStatus(org.ovirt.engine.core.common.businessentities.network.NetworkStatus.forValue(rs.getInt("status"))); entity.setDisplay(rs.getBoolean("is_display")); entity.setRequired(rs.getBoolean("required")); entity.setMigration(rs.getBoolean("migration")); return entity; }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> returnValue = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmTemplateDao().getAllForStorageDomain(org.ovirt.engine.core.bll.GetVmTemplatesFromStorageDomainQuery.getParameters().getStorageDomainId(), org.ovirt.engine.core.bll.GetVmTemplatesFromStorageDomainQuery.getUserID(), org.ovirt.engine.core.bll.GetVmTemplatesFromStorageDomainQuery.getParameters().isFiltered()); for (org.ovirt.engine.core.common.businessentities.VmTemplate template : returnValue) { org.ovirt.engine.core.bll.VmTemplateHandler.UpdateDisksFromDb(template); java.util.Collections.sort(template.getDiskList(), new org.ovirt.engine.core.common.businessentities.ImagesComparerByName()); } java.util.Collections.sort(returnValue, java.util.Collections.reverseOrder(new org.ovirt.engine.core.common.businessentities.VmTemplateComparerByDiskSize())); org.ovirt.engine.core.bll.GetVmTemplatesFromStorageDomainQuery.getQueryReturnValue().setReturnValue(returnValue); }
private void updateAllClustersMacPool() { final org.ovirt.engine.core.compat.Guid newMacPoolId = org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getParameters().getStoragePool().getMacPoolId(); final boolean shouldSetNewMacPoolOnAllClusters = newMacPoolId != null; if (shouldSetNewMacPoolOnAllClusters) { java.util.List<org.ovirt.engine.core.common.businessentities.Cluster> clusters = clusterDao.getAllForStoragePool(org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getStoragePoolId()); for (org.ovirt.engine.core.common.businessentities.Cluster cluster : clusters) { this.moveMacsOfUpdatedCluster.updateClusterAndMoveMacs(cluster, newMacPoolId, org.ovirt.engine.core.bll.storage.pool.UpdateStoragePoolCommand.getContext()); } } }
private boolean connectStorageServer(org.ovirt.engine.core.common.businessentities.StorageType type, java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> connections) { boolean connectSucceeded = true; if ((connections != null) && ((connections.size()) > 0)) { java.util.Map<java.lang.String, java.lang.String> retValues = ((java.util.HashMap<java.lang.String, java.lang.String>) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.ConnectStorageServer, new org.ovirt.engine.core.common.vdscommands.ConnectStorageServerVDSCommandParameters(getVds().getId(), getStoragePool().getId(), type, connections)).getReturnValue())); connectSucceeded = org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(type).isConnectSucceeded(retValues, connections); log.infoFormat("Host {0} storage connection was {1} ", getVds().getName(), (connectSucceeded ? "succeeded" : "failed")); } return connectSucceeded; }
private org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue fence(org.ovirt.engine.core.common.businessentities.FenceAgent fenceAgent, int retries) { org.ovirt.engine.core.bll.FenceExecutor fenceExecutor = createFenceExecutor(); org.ovirt.engine.core.common.vdscommands.VDSFenceReturnValue fenceExecutionResult = fenceExecutor.fence(getAction(), fenceAgent); if (wasSkippedDueToStatus(fenceExecutionResult)) { log.info("Attemp to {} host using fence agent '{}' skipped, host is already at the requested state.", getAction().name().toLowerCase(), fenceAgent.getId()); } else { if (fenceExecutionResult.getSucceeded()) { boolean requiredStatusAchieved = waitForStatus(); int i = 0; while ((!requiredStatusAchieved) && (i < retries)) { fenceExecutionResult = fenceExecutor.fence(getAction(), fenceAgent); requiredStatusAchieved = waitForStatus(); i++; } if (requiredStatusAchieved) { handleSpecificCommandActions(); } else { auditFailure(); } fenceExecutionResult.setSucceeded(requiredStatusAchieved); } else { logAgentFailure(fenceExecutionResult); } } return fenceExecutionResult; }
public boolean validate() { if (getIsAvailable()) { getInterfaceMappings().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.InterfaceMappingsValidation() }); getQpidHost().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.HostAddressValidation(true) }); getQpidPort().validateEntity(new org.ovirt.engine.ui.uicommonweb.validation.IValidation[]{ new org.ovirt.engine.ui.uicommonweb.validation.IntegerValidation(org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.NETWORK_MIN_LEGAL_PORT, org.ovirt.engine.core.common.businessentities.BusinessEntitiesDefinitions.NETWORK_MAX_LEGAL_PORT) }); setIsValid((((getInterfaceMappings().getIsValid()) && (getQpidHost().getIsValid())) && (getQpidPort().getIsValid()))); } return getIsValid(); }


private void addQuotaToMemoryQuotaList(org.ovirt.engine.core.common.businessentities.QuotaUsagePerUser quotaPerUserUsageEntity) { org.ovirt.engine.ui.userportal.widget.QuotaProgressBar memoryQuotaProgressBar = new org.ovirt.engine.ui.userportal.widget.QuotaProgressBar(QuotaProgressBar.QuotaType.MEM); memoryQuotaProgressBar.setValues(quotaPerUserUsageEntity.getMemoryLimit(), ((quotaPerUserUsageEntity.getMemoryTotalUsage()) - (quotaPerUserUsageEntity.getMemoryUsageForUser())), quotaPerUserUsageEntity.getMemoryUsageForUser()); addQuotaRow(memoryQuotasList, quotaPerUserUsageEntity.getQuotaName(), memoryQuotaProgressBar); }
public void updateRunTimeDynamicData(org.ovirt.engine.core.common.businessentities.VmDynamic vm, org.ovirt.engine.core.compat.Guid vdsId, java.lang.String vdsName) { setStatus(vm.getStatus()); setRunOnVds(vdsId); setRunOnVdsName(vdsName); setDisplay(vm.getDisplay()); setDisplaySecurePort(vm.getDisplaySecurePort()); setVmHost(vm.getVmHost()); setVmIp(vm.getVmIp()); setVmFQDN(vm.getVmFQDN()); if ((vm.getCurrentCd()) != null) { setCurrentCd(vm.getCurrentCd()); } setAppList(vm.getAppList()); setGuestOs(vm.getGuestOs()); setDisplayType(vm.getDisplayType()); getDynamicData().setVncKeyboardLayout(vm.getVncKeyboardLayout()); setDisplayIp(vm.getDisplayIp()); setKvmEnable(vm.getKvmEnable()); setAcpiEnable(vm.getAcpiEnable()); setGuestCurrentUserName(vm.getGuestCurrentUserName()); setWin2kHackEnable(vm.getWin2kHackEnable()); setUtcDiff(vm.getUtcDiff()); setExitStatus(vm.getExitStatus()); setExitMessage(vm.getExitMessage()); setExitReason(vm.getExitReason()); setClientIp(vm.getClientIp()); setVmPauseStatus(vm.getPauseStatus()); setLastWatchdogEvent(vm.getLastWatchdogEvent()); setGuestCpuCount(vm.getGuestCpuCount()); getGraphicsInfos().putAll(vm.getGraphicsInfos()); }
private void execute(org.ovirt.engine.core.ldap.LdapProviderType ldapProviderType, java.lang.String domain) { java.util.Hashtable<java.lang.String, java.lang.String> env = new java.util.Hashtable<java.lang.String, java.lang.String>(); initContextVariables(env); javax.naming.directory.Attributes results = null; javax.naming.directory.DirContext ctx = null; try { ctx = createContext(env); org.ovirt.engine.core.bll.adbroker.LdapQueryData ldapQueryData = new org.ovirt.engine.core.bll.adbroker.LdapQueryDataImpl(); ldapQueryData.setLdapQueryType(LdapQueryType.rootDSE); ldapQueryData.setDomain(domain); org.ovirt.engine.core.bll.adbroker.LdapQueryExecution queryExecution = org.ovirt.engine.core.bll.adbroker.LdapQueryExecutionBuilderImpl.getInstance().build(ldapProviderType, ldapQueryData); javax.naming.directory.SearchControls searchControls = new javax.naming.directory.SearchControls(); searchControls.setReturningAttributes(queryExecution.getReturningAttributes()); searchControls.setSearchScope(queryExecution.getSearchScope()); searchControls.setReturningObjFlag(true); searchControls.setTimeLimit(((org.ovirt.engine.core.common.config.Config.<java.lang.Integer>GetValue(ConfigValues.LDAPQueryTimeout)) * 1000)); javax.naming.NamingEnumeration<javax.naming.directory.SearchResult> search = ctx.search(queryExecution.getBaseDN(), queryExecution.getFilter(), searchControls); try { results = search.next().getAttributes(); } finally { search.close(); } } catch (javax.naming.NamingException e) { org.ovirt.engine.core.bll.adbroker.GetRootDSE.log.errorFormat("Failed to query rootDSE for LDAP server {0} due to {1}", ldapURI, e.getMessage()); } finally { closeContext(ctx); } attributes = results; }
protected void validateDiskForCreation(org.ovirt.engine.api.model.Disk disk) { validateParameters(disk, 2, "interface"); if (org.ovirt.engine.api.restapi.resource.utils.DiskResourceUtils.isLunDisk(disk)) { validateParameters(disk.getLunStorage(), 3, "type"); org.ovirt.engine.api.model.StorageType storageType = org.ovirt.engine.api.model.StorageType.fromValue(disk.getLunStorage().getType()); if ((storageType != null) && (storageType == (org.ovirt.engine.api.model.StorageType.ISCSI))) { validateParameters(disk.getLunStorage().getLogicalUnits().get(0), 3, "address", "target", "port", "id"); } } else if ((disk.isSetLunStorage()) && (disk.getLunStorage().getLogicalUnits().isEmpty())) { throw new org.ovirt.engine.api.restapi.resource.WebFaultException(null, localize(Messages.INCOMPLETE_PARAMS_REASON), localize(Messages.INCOMPLETE_PARAMS_DETAIL_TEMPLATE, "LogicalUnit", "", "add"), Response.Status.BAD_REQUEST); } else { validateParameters(disk, 2, "provisionedSize|size", "format"); } validateEnums(org.ovirt.engine.api.model.Disk.class, disk); }


@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { org.ovirt.engine.ui.uicommonweb.models.SearchableListModel searchableListModel = ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> domains = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue())); for (org.ovirt.engine.core.common.businessentities.StorageDomain domain : domains) { java.lang.String guid = ((domain.getStoragePoolId()) != null) ? domain.getStoragePoolId().toString() : Guid.Empty.toString(); domain.setQueryableId((((domain.getId()) + "_") + guid)); } searchableListModel.setItems(domains); setIsEmpty(((((java.util.List) (searchableListModel.getItems())).size()) == 0)); }
private boolean findDefaultManagementNetwork() { managementNetwork = defaultManagementNetworkFinder.findDefaultManagementNetwork(org.ovirt.engine.core.bll.AddVdsGroupCommand.getVdsGroup().getStoragePoolId()); if ((managementNetwork) == null) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_DEFAULT_MANAGEMENT_NETWORK_NOT_FOUND); return false; } return true; }

protected boolean proceedStorageDomainTreatmentByDomainType(final org.ovirt.engine.core.common.businessentities.StorageDomain newMaster, final boolean lockNewMaster) { if (newMaster == null) { return true; } newMaster.getStorageStaticData().setLastTimeUsedAsMaster(java.lang.System.currentTimeMillis()); if ((newMaster.getStorageDomainType()) != (org.ovirt.engine.core.common.businessentities.StorageDomainType.Master)) { org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Object>() { @java.lang.Override public java.lang.Object runInTransaction() { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap newMasterMap = newMaster.getStoragePoolIsoMapData(); getCompensationContext().snapshotEntityUpdated(newMaster.getStorageStaticData()); newMaster.setStorageDomainType(StorageDomainType.Master); if (lockNewMaster) { newMasterMap.setStatus(StorageDomainStatus.Unknown); getCompensationContext().snapshotEntityStatus(newMasterMap); newMaster.setStatus(StorageDomainStatus.Locked); getStoragePoolIsoMapDao().updateStatus(newMasterMap.getId(), newMasterMap.getStatus()); } updateStorageDomainStaticData(newMaster.getStorageStaticData()); getCompensationContext().snapshotEntityUpdated(getStorageDomain().getStorageStaticData()); getStorageDomain().setStorageDomainType(StorageDomainType.Data); updateStorageDomainStaticData(getStorageDomain().getStorageStaticData()); getCompensationContext().stateChanged(); return null; } }); } else { updateStorageDomainStaticData(newMaster.getStorageStaticData()); } org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.updateStoragePoolMasterDomainVersionInDiffTransaction(); return false; }
private void flush() { provider.setName(((java.lang.String) (name.getEntity()))); provider.setType(((org.ovirt.engine.core.common.businessentities.ProviderType) (type.getSelectedItem()))); provider.setDescription(((java.lang.String) (description.getEntity()))); provider.setUrl(((java.lang.String) (url.getEntity()))); if (isTypeOpenStackNetwork()) { org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties properties = new org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties(); properties.setPluginType(org.ovirt.engine.ui.uicommonweb.models.providers.NeutronPluginTranslator.getPluginNameForDisplayString(((java.lang.String) (getPluginType().getSelectedItem())))); properties.setAgentConfiguration(getNeutronAgentModel().flush()); provider.setAdditionalProperties(properties); } else if (isTypeOpenStackImage()) { org.ovirt.engine.core.common.businessentities.OpenstackImageProviderProperties properties = new org.ovirt.engine.core.common.businessentities.OpenstackImageProviderProperties(); provider.setAdditionalProperties(properties); } boolean authenticationRequired = ((java.lang.Boolean) (requiresAuthentication.getEntity())); provider.setRequiringAuthentication(authenticationRequired); if (authenticationRequired) { provider.setUsername(((java.lang.String) (username.getEntity()))); provider.setPassword(((java.lang.String) (password.getEntity()))); if (isTypeOpenStackNetwork()) { ((org.ovirt.engine.core.common.businessentities.OpenstackNetworkProviderProperties) (provider.getAdditionalProperties())).setTenantName(((java.lang.String) (getTenantName().getEntity()))); } else if (isTypeOpenStackImage()) { ((org.ovirt.engine.core.common.businessentities.OpenstackImageProviderProperties) (provider.getAdditionalProperties())).setTenantName(((java.lang.String) (getTenantName().getEntity()))); } } }
private static void assertDiskDescriptionDecoding(org.ovirt.engine.core.common.businessentities.storage.Disk disk) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.storage.Disk diskToEnrich = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.getInstance().enrichDiskByJsonDescription(org.ovirt.engine.core.bll.MetadataDiskDescriptionHandler.getInstance().generateJsonDiskDescription(disk), diskToEnrich); assertEquals(disk, diskToEnrich); }
private void sendToDb(org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBroker broker, org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscoveryUnit discovery, @com.sun.istack.internal.Nullable org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit, org.ovirt.engine.core.common.scheduling.PolicyUnitType type) { org.ovirt.engine.core.common.scheduling.PolicyUnit policy = createFromDiscoveryUnit(discovery, type); if ((policyUnit != null) && ((policyUnit.getBroker()) != null)) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerDiscovery.log.warn("Policy unit {} already reported by broker {}", policyUnit.getName(), broker.getId()); } policy.setBroker(broker.getId()); if ((policyUnit != null) && ((policyUnit.getId()) != null)) { policy.setId(policyUnit.getId()); policyUnitDao.update(policy); } else { policy.setId(org.ovirt.engine.core.compat.Guid.newGuid()); policyUnitDao.save(policy); } }
@java.lang.Override protected void syncSearch() { super.syncSearch(); org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { setItems(((java.util.Collection) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue()))); } }); org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(getEntity().getId()); params.setRefresh(getIsQueryFirstTime()); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAttachedClustersByClusterPolicyId, params, asyncQuery); setIsQueryFirstTime(false); }
private void revertPreviousHandlers() { getParameters().decrementExecutionIndex(); if ((getExecutionIndex()) >= 0) { logRollbackedTask(); getParameters().setExecutionReason(CommandExecutionReason.ROLLBACK_FLOW); getCurrentTaskHandler().compensate(); if (!(hasRevertTask())) { revertPreviousHandlers(); } } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmStatic> getAllByStoragePoolId(org.ovirt.engine.core.compat.Guid spId) { return getCallsHandler().executeReadList("GetAllFromVmStaticByStoragePoolId", org.ovirt.engine.core.dao.VmStaticDAODbFacadeImpl.VMStaticRowMapper.instance, getCustomMapSqlParameterSource().addValue("sp_id", spId)); }

private void clearVm(org.ovirt.engine.core.common.businessentities.VM vm) { if ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.MigratingFrom)) { if ((vm.getStatus()) != (org.ovirt.engine.core.common.businessentities.VMStatus.Suspended)) { org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().InternalSetVmStatus(vm, VMStatus.Down); } AddVmDynamicToList(vm.getDynamicData()); AddVmStatisticsToList(vm.getStatisticsData()); AddVmInterfaceStatisticsToList(vm.getInterfaces()); if (!(org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().IsVmInAsyncRunningList(vm.getId()))) { _vmsMovedToDown.add(vm.getId()); } } }
@org.junit.Test public void testNonSecuredEventMailSender() { org.ovirt.engine.core.common.businessentities.EventAuditLogSubscriber eventData = new org.ovirt.engine.core.common.businessentities.EventAuditLogSubscriber(); eventData.setlog_time(new java.util.Date()); eventData.setevent_type(0); eventData.setuser_name("a test user name"); eventData.setvm_name("a fine test VM"); eventData.setvds_name("a fine test host"); eventData.setmethod_address("mailtest.redhat@gmail.com"); eventData.setvm_template_name("a test template"); eventData.setstorage_pool_name("a test storage pool name"); eventData.setstorage_domain_name("a test storage pool domain"); eventData.setseverity(3); org.ovirt.engine.core.notifier.utils.NotificationProperties.setDefaults("src/test/resources/conf/notifier-mail-test-plain.conf", "src/test/resources/conf/missing.conf"); org.ovirt.engine.core.notifier.utils.sender.mail.EventSenderMailImpl mailSender = new org.ovirt.engine.core.notifier.utils.sender.mail.EventSenderMailImpl(org.ovirt.engine.core.notifier.utils.NotificationProperties.getInstance()); eventData.setmessage("a test message to be sent via non-secured mode"); org.ovirt.engine.core.notifier.utils.sender.EventSenderResult sentResult = null; try { sentResult = mailSender.send(eventData, null); } catch (java.lang.Exception e) { sentResult = new org.ovirt.engine.core.notifier.utils.sender.EventSenderResult(); sentResult.setSent(false); } assertTrue(sentResult.isSent()); }

private org.ovirt.engine.core.compat.Version clusterVersionOrNull(org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model) { org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup = model.getSelectedCluster(); if ((vdsGroup == null) || ((vdsGroup.getCompatibilityVersion()) == null)) { return null; } return vdsGroup.getCompatibilityVersion(); }
private static void loadExtensions(org.ovirt.engine.exttool.core.ModuleService moduleService, java.util.Map<java.lang.String, java.lang.Object> argMap) { org.ovirt.engine.core.extensions.mgr.ExtensionsManager extensionsManager = new org.ovirt.engine.core.extensions.mgr.ExtensionsManager(); java.util.Map<java.lang.String, org.ovirt.engine.core.extensions.mgr.ExtensionProxy> proxies = moduleService.getContext().get(ModuleService.EXTENSIONS_MAP); java.util.List<java.io.File> files = ((java.util.List<java.io.File>) (argMap.get("extension-file"))); if (files == null) { files = org.ovirt.engine.exttool.core.ExtensionsToolExecutor.listFiles(((java.lang.String) (argMap.get("extensions-dir"))).replace("@ENGINE_ETC@", org.ovirt.engine.exttool.core.ExtensionsToolExecutor.ENGINE_ETC), "properties"); } for (java.io.File f : files) { proxies.put(extensionsManager.load(f), null); } for (java.util.Map.Entry<java.lang.String, org.ovirt.engine.core.extensions.mgr.ExtensionProxy> entry : proxies.entrySet()) { extensionsManager.initialize(entry.getKey()); entry.setValue(extensionsManager.getExtensionByName(entry.getKey())); } }
private org.ovirt.engine.core.dao.network.VnicProfileViewDao getVnicProfileViewDao() { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVnicProfileViewDao(); }

@java.lang.Deprecated @java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.ListModel model) { edit(model, dcCompatibilityVersion, dcId, defaultProfile); }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Boot Time") java.lang.String bootTimeHostGeneral();
private void extractRemovedNetworks() { for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : getExistingIfaces().values()) { java.lang.String net = iface.getNetworkName(); if ((org.apache.commons.lang.StringUtils.isNotBlank(net)) && (!(attachedNetworksNames.contains(net)))) { removedNetworks.add(net); } } java.util.List<java.lang.String> vmNames = getVmInterfaceManager().findActiveVmsUsingNetworks(params.getVdsId(), removedNetworks); for (java.lang.String vmName : vmNames) { addViolation(EngineMessage.NETWORK_CANNOT_DETACH_NETWORK_USED_BY_VMS, vmName); } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Configure Data Center") java.lang.String configureDataCenterRoleTree();



public org.ovirt.engine.core.bll.ValidationResult externalNetworkNotDisplay(java.lang.String networkName) { return networkCluster.isDisplay() ? new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_CANNOT_BE_DISPLAY, java.lang.String.format(org.ovirt.engine.core.bll.network.cluster.NetworkClusterValidatorBase.NETWORK_NAME_REPLACEMENT, networkName)) : org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void DomainRecoveredFromProblem(org.ovirt.engine.core.compat.Guid domainId, org.ovirt.engine.core.compat.Guid vdsId, java.lang.String vdsName) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.infoFormat("Domain {0} recovered from problem. vds: {1}", domainId, vdsName); ClearVds(vdsId, domainId); _domainsInProblem.get(domainId).remove(vdsId); if ((_domainsInProblem.get(domainId).size()) == 0) { org.ovirt.engine.core.vdsbroker.irsbroker.IrsBrokerCommand.log.infoFormat(("Domain {0} has recovered from problem. No active host in the DC is reporting it as" + " problematic, so clearing the domain recovery timer."), domainId); _domainsInProblem.remove(domainId); ClearTimer(domainId); } }


private void saveNewVm(final org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model) { if ((model.getProgress()) != null) { return; } model.startProgress(null); org.ovirt.engine.core.common.businessentities.VM vm = getcurrentVm(); if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(model.getVmId().getEntity()))) { vm.setId(new org.ovirt.engine.core.compat.Guid(model.getVmId().getEntity())); } vm.setUseLatestVersion(((model.getTemplate().getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.templates.LatestVmTemplate)); org.ovirt.engine.core.common.action.AddVmParameters parameters = new org.ovirt.engine.core.common.action.AddVmParameters(vm); parameters.setDiskInfoDestinationMap(model.getDisksAllocationModel().getImageToDestinationDomainMap()); parameters.setConsoleEnabled(model.getIsConsoleDeviceEnabled().getEntity()); parameters.setBalloonEnabled(balloonEnabled(model)); parameters.setCopyTemplatePermissions(model.getCopyPermissions().getEntity()); parameters.setSoundDeviceEnabled(model.getIsSoundcardEnabled().getEntity()); parameters.setVirtioScsiEnabled(model.getIsVirtioScsiEnabled().getEntity()); setVmWatchdogToParams(model, parameters); setRngDeviceToParams(model, parameters); setGraphicsDevicesToParams(model, parameters); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction((model.getProvisioning().getEntity() ? org.ovirt.engine.core.common.action.VdcActionType.AddVmFromTemplate : org.ovirt.engine.core.common.action.VdcActionType.AddVm), parameters, createUnitVmModelNetworkAsyncCallback(vm, model), this); }
@org.junit.Test public void encodeWhenAliasIsTruncated() throws java.io.IOException { java.lang.String alias = org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.generateRandomString(200); disk.setDiskAlias(alias); disk.setDiskDescription("DiskDescription"); assertDiskDescriptionMap(disk, org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.generateDiskAliasJsonEntry(alias.substring(0, org.ovirt.engine.core.bll.MetadataDiskDescriptionHandlerTest.DISK_ALIAS_MAX_LENGTH))); }
protected java.lang.String addToAuditLogErrorMessage(java.lang.String connection, java.lang.String errorCode, java.util.List<org.ovirt.engine.core.common.businessentities.storage_server_connections> connections, org.ovirt.engine.core.common.businessentities.LUNs lun) { org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logable = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(); java.lang.String connectionField = (getConnectionDescription(connections, connection)) + (lun == null ? "" : (" (LUN " + (lun.getphysical_volume_id())) + ")"); logable.AddCustomValue("Connection", connectionField); java.lang.String translatedError = getTranslatedStorageError(errorCode); logable.AddCustomValue("ErrorCode", translatedError); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log(logable, AuditLogType.STORAGE_DOMAIN_ERROR); return connectionField; }
@java.lang.Override public void onBrowserEvent(org.ovirt.engine.ui.common.widget.table.cell.Context context, com.google.gwt.dom.client.Element parent, java.lang.Boolean value, com.google.gwt.dom.client.NativeEvent event, com.google.gwt.cell.client.ValueUpdater<java.lang.Boolean> valueUpdater) { java.lang.String type = event.getType(); boolean enterPressed = (BrowserEvents.KEYDOWN.equals(type)) && ((event.getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)); if ((BrowserEvents.CHANGE.equals(type)) || enterPressed) { com.google.gwt.dom.client.InputElement input = parent.getFirstChild().cast(); java.lang.Boolean isChecked = input.isChecked(); if (enterPressed && ((handlesSelection()) || (!(dependsOnSelection())))) { isChecked = !isChecked; input.setChecked(isChecked); } if (((value == null ? false : value.booleanValue()) != (isChecked == null ? false : isChecked.booleanValue())) && (!(dependsOnSelection()))) { setViewData(context.getKey(), isChecked); } else { clearViewData(context.getKey()); } if (valueUpdater != null) { valueUpdater.update(isChecked); } } }
@java.lang.Override protected org.ovirt.engine.api.model.VM populate(org.ovirt.engine.api.model.VM model, org.ovirt.engine.core.common.businessentities.VM entity) { java.util.Set<org.ovirt.engine.api.common.util.DetailHelper.Detail> details = org.ovirt.engine.api.common.util.DetailHelper.getDetails(getHttpHeaders()); model = addInlineDetails(details, model); if (details.contains(Detail.STATISTICS)) { addInlineStatistics(model); } return model; }
@org.junit.Test public void testUpdateRole() { existingRole.setdescription("This is an updated description"); dao.update(existingRole); org.ovirt.engine.core.common.businessentities.roles result = dao.get(existingRole.getId()); assertNotNull(result); assertEquals(existingRole, result); }




public void updateMigrationStatus(org.ovirt.engine.core.common.action.VdcReturnValueBase migrationStatus) { lastMigrations.get(0).setMigrationReturnValue(migrationStatus); }

@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel userPortalListModel = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> vms = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmPool> pools = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmPool>(); org.ovirt.engine.core.common.queries.VdcQueryReturnValue retValue = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); if ((retValue != null) && (retValue.getSucceeded())) { java.util.List<java.lang.Object> list = ((java.util.ArrayList<java.lang.Object>) (retValue.getReturnValue())); if (list != null) { for (java.lang.Object object : list) { if (object instanceof org.ovirt.engine.core.common.businessentities.VM) { vms.add(((org.ovirt.engine.core.common.businessentities.VM) (object))); } else if (object instanceof org.ovirt.engine.core.common.businessentities.VmPool) { pools.add(((org.ovirt.engine.core.common.businessentities.VmPool) (object))); } } } } userPortalListModel.setvms(vms); userPortalListModel.setpools(pools); userPortalListModel.onVmAndPoolLoad(); }


private void processStoragePoolStatus() { if ((getVds().getSpmStatus()) != (org.ovirt.engine.core.common.businessentities.VdsSpmStatus.None)) { org.ovirt.engine.core.common.businessentities.StoragePool pool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolDao().get(getVds().getStoragePoolId()); if ((pool != null) && ((pool.getstatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational))) { pool.setstatus(StoragePoolStatus.NonResponsive); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolDao().updateStatus(pool.getId(), pool.getstatus()); org.ovirt.engine.core.bll.storage.StoragePoolStatusHandler.PoolStatusChanged(pool.getId(), pool.getstatus()); } } }
@java.lang.Override protected void InitDetailModels() { super.InitDetailModels(); setClusterServiceModel(new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterServiceModel()); org.ovirt.engine.core.compat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new org.ovirt.engine.core.compat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); clusterGeneralModel = new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterGeneralModel(); list.add(clusterGeneralModel); list.add(new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterHostListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterVmListModel()); list.add(getClusterServiceModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel()); setDetailModels(list); }
@java.lang.Override protected void executeVmCommand() { org.ovirt.engine.core.compat.Guid createdSnapshotId = org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getSnapshotDao().getId(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getVmId(), SnapshotType.ACTIVE); getParameters().setSnapshotType(determineSnapshotType()); org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getSnapshotDao().updateId(createdSnapshotId, newActiveSnapshotId); setActionReturnValue(createdSnapshotId); org.ovirt.engine.core.bll.memory.MemoryImageBuilder memoryImageBuilder = getMemoryImageBuilder(); freezeVm(); createSnapshotsForDisks(); addSnapshotToDB(createdSnapshotId, memoryImageBuilder); fastForwardDisksToActiveSnapshot(); memoryImageBuilder.build(); boolean pendingAsyncTasks = (!(getTaskIdList().isEmpty())) || (!(org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.getCommandId()).isEmpty())); if (!pendingAsyncTasks) { getParameters().setTaskGroupSuccess(true); incrementVmGeneration(); } org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommand.setSucceeded(true); }
private void updatePanelsVisibility(org.ovirt.engine.ui.uicommonweb.models.vms.ImportVmsModel model) { exportPanel.setVisible(((model.getImportSources().getSelectedItem()) == (org.ovirt.engine.ui.uicommonweb.models.vms.ImportSource.EXPORT_DOMAIN))); vmwarePanel.setVisible(((model.getImportSources().getSelectedItem()) == (org.ovirt.engine.ui.uicommonweb.models.vms.ImportSource.VMWARE))); }
public synchronized org.ovirt.engine.api.model.RSDL getRSDL() { if ((org.ovirt.engine.api.restapi.resource.BackendApiResource.rsdl) == null) { java.util.List<java.lang.String> rels = ((getCurrent().get(org.ovirt.engine.core.common.mode.ApplicationMode.class)) == (org.ovirt.engine.core.common.mode.ApplicationMode.GlusterOnly)) ? org.ovirt.engine.api.restapi.util.ApiRootLinksCreator.getGlusterRels(uriInfo) : org.ovirt.engine.api.restapi.util.ApiRootLinksCreator.getAllRels(uriInfo); org.ovirt.engine.api.restapi.resource.BackendApiResource.rsdl = new org.ovirt.engine.api.restapi.rsdl.RsdlBuilder(getUriInfo(), rels).description(org.ovirt.engine.api.restapi.resource.BackendApiResource.RSDL_DESCRIPTION).rel(org.ovirt.engine.api.restapi.resource.BackendApiResource.RSDL_REL).href((((getUriInfo().getBaseUri().getPath()) + (org.ovirt.engine.api.restapi.resource.BackendApiResource.QUERY_PARAMETER)) + (org.ovirt.engine.api.restapi.resource.BackendApiResource.RSDL_CONSTRAINT_PARAMETER))).schema(new org.ovirt.engine.api.restapi.rsdl.SchemaBuilder().rel(org.ovirt.engine.api.restapi.resource.BackendApiResource.SCHEMA_REL).href((((getUriInfo().getBaseUri().getPath()) + (org.ovirt.engine.api.restapi.resource.BackendApiResource.QUERY_PARAMETER)) + (org.ovirt.engine.api.restapi.resource.BackendApiResource.SCHEMA_CONSTRAINT_PARAMETER))).name(org.ovirt.engine.api.restapi.resource.BackendApiResource.SCHEMA_NAME).description(org.ovirt.engine.api.restapi.resource.BackendApiResource.SCHEMA_DESCRIPTION).build()).generalMetadata(new org.ovirt.engine.api.restapi.rsdl.GeneralMetadataBuilder().rel(org.ovirt.engine.api.restapi.resource.BackendApiResource.GENERAL_METADATA_REL).href(getUriInfo().getBaseUri().getPath().replace("api", "*")).name(org.ovirt.engine.api.restapi.resource.BackendApiResource.GENERAL_METADATA_NAME).description(org.ovirt.engine.api.restapi.resource.BackendApiResource.GENERAL_METADATA_DESCRIPTION).build()).build(); } return org.ovirt.engine.api.restapi.resource.BackendApiResource.rsdl; }
private void saveDataToDb() { if (saveVdsDynamic) { vdsManager.updateDynamicData(vds.getDynamicData()); if (refreshedCapabilities) { vdsManager.updateNumaData(vds); } } if (saveVdsStatistics) { org.ovirt.engine.core.common.businessentities.VdsStatistics stat = vds.getStatisticsData(); vdsManager.updateStatisticsData(stat); checkVdsMemoryThreshold(stat); checkVdsCpuThreshold(stat); checkVdsNetworkThreshold(stat); checkVdsSwapThreshold(stat); final java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkStatistics> statistics = new java.util.LinkedList<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : vds.getInterfaces()) { statistics.add(iface.getStatistics()); } if (!(statistics.isEmpty())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInScope(TransactionScopeOption.Required, () -> { getDbFacade().getInterfaceDao().massUpdateStatisticsForVds(statistics); return null; }); } saveNumaStatisticsDataToDb(); } }
protected boolean checkRemoveEditValidations() { org.ovirt.engine.core.compat.Guid clusterPolicyId = getParameters().getClusterPolicyId(); if (clusterPolicyId == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_POLICY_PARAMETERS_INVALID); } org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy = org.ovirt.engine.core.bll.scheduling.SchedulingManager.getInstance().getClusterPolicy(clusterPolicyId); if (clusterPolicy == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_POLICY_PARAMETERS_INVALID); } if (clusterPolicy.isLocked()) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_POLICY_PARAMETERS_INVALID); } return true; }

private java.lang.String getClientUrl() { return (((("http://" + (com.google.gwt.user.client.Window.Location.getHost())) + "/ovirt-engine-novnc-main.html?host=") + (getProxyHost())) + "&port=") + (getProxyPort()); }

public void runQuery(org.ovirt.engine.core.compat.Guid guid) { org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.setHandleFailure(true); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel errataCountModel = ((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel) (model)); org.ovirt.engine.core.common.queries.VdcQueryReturnValue returnValueObject = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)); org.ovirt.engine.core.common.businessentities.ErrataCounts resultEntity = returnValueObject.getReturnValue(); if ((resultEntity != null) && (returnValueObject.getSucceeded())) { errataCountModel.setErrataCounts(resultEntity); } else { errataCountModel.setMessage((((org.ovirt.engine.ui.uicommonweb.models.AbstractErrataCountModel.constants.katelloProblemRetrievingErrata()) + " ") + (returnValueObject.getExceptionMessage()))); } } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(getQueryType(), new org.ovirt.engine.core.common.queries.IdQueryParameters(guid), _asyncQuery); }
@java.lang.Override public java.lang.String getVerb(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1) { return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().attachTo(op1.getName()); }
@java.lang.Override public com.google.gwt.resources.client.ImageResource getValue(org.ovirt.engine.core.common.businessentities.VM vm) { if ((vm.getVmPoolId()) == null) { org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig config = org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeConfig.from(vm.getVmType(), vm.isStateless(), vm.isNextRunConfigurationExists()); setTitle(config.getTooltip(org.ovirt.engine.ui.webadmin.widget.table.column.VmTypeColumn.constants)); return config.getImageResource(getApplicationResources()); } else { if (!(vm.isNextRunConfigurationExists())) { return getApplicationResources().manyDesktopsImage(); } else { return getApplicationResources().manyDesktopsChangesImage(); } } }
@java.lang.Override protected void executeVdsBrokerCommand() { _result = org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getBroker().getStorageDomainsList(org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStorageDomainType().getValue(), org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getStorageType().getValue(), ((org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getPath()) != null ? org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.getParameters().getPath() : "")); org.ovirt.engine.core.vdsbroker.vdsbroker.HSMGetStorageDomainsListVDSCommand.proceedProxyReturnValue(); java.util.ArrayList<org.ovirt.engine.core.compat.Guid> domains = new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>(); for (java.lang.String domain : _result.mStorageDomainList) { domains.add(new org.ovirt.engine.core.compat.Guid(domain)); } setReturnValue(domains); }



private java.util.Map<java.lang.String, org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> getExistingIfaces() { if ((existingIfaces) == null) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> ifaces = getDbFacade().getInterfaceDao().getAllInterfacesForVds(params.getVdsId()); org.ovirt.engine.core.dao.network.NetworkQoSDao qosDao = getDbFacade().getQosDao(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : ifaces) { org.ovirt.engine.core.common.businessentities.network.Network network = getExistingClusterNetworks().get(iface.getNetworkName()); iface.setNetworkImplementationDetails(org.ovirt.engine.core.utils.NetworkUtils.calculateNetworkImplementationDetails(network, (network == null ? null : qosDao.get(network.getQosId())), iface)); } existingIfaces = org.ovirt.engine.core.common.businessentities.Entities.entitiesByName(ifaces); } return existingIfaces; }
public java.lang.String getPmProxyPreferences() { if (!(getIsPm().getEntity())) { return null; } java.lang.StringBuilder builder = new java.lang.StringBuilder(); if ((getPmProxyPreferencesList().getItems()) != null) { java.util.List items = ((java.util.List) (getPmProxyPreferencesList().getItems())); for (java.lang.Object item : items) { builder.append(item); if ((items.indexOf(item)) < ((items.size()) - 1)) { builder.append(","); } } } return builder.toString(); }

public static void GetPmTypeList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Version version) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); if (source != null) { java.lang.String[] array = ((java.lang.String) (source)).split("[,]", (-1)); for (java.lang.String item : array) { list.add(item); } } return list; } }; org.ovirt.engine.core.common.queries.GetConfigurationValueParameters tempVar = new org.ovirt.engine.core.common.queries.GetConfigurationValueParameters(org.ovirt.engine.core.common.queries.ConfigurationValues.VdsFenceType); tempVar.setVersion((version != null ? version.toString() : org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultConfigurationVersion())); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetConfigFromCache(tempVar, aQuery); }


private void readUsbItem(org.ovirt.engine.core.utils.ovf.xml.XmlNode node) { vmBase.setUsbPolicy(org.ovirt.engine.core.common.businessentities.UsbPolicy.forStringValue(node.SelectSingleNode("rasd:UsbPolicy", _xmlNS).innerText)); }
@java.lang.Override public void OnSuccess(java.lang.Object model1, java.lang.Object ReturnValue1) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel innerHostInterfaceListModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel) (model1)); org.ovirt.engine.ui.uicommonweb.models.hosts.HostBondInterfaceModel bModel = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostBondInterfaceModel) (innerHostInterfaceListModel.getWindow())); java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface> bonds = ((java.util.List<org.ovirt.engine.core.common.businessentities.VdsNetworkInterface>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue1)).getReturnValue())); bModel.getBond().setItems(bonds); bModel.getBond().setSelectedItem(org.ovirt.engine.ui.uicommonweb.Linq.FirstOrDefault(bonds)); boolean hasManagement = false; for (org.ovirt.engine.core.common.businessentities.VdsNetworkInterface innerItem : innerHostInterfaceListModel.getSelectedItemsWithVlans()) { if (innerItem.getIsManagement()) { hasManagement = true; break; } } innerHostInterfaceListModel.PostBond(innerHostInterfaceListModel, bModel, ((bModel.getNetwork().getItems()) != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network>) (bModel.getNetwork().getItems())) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network>()), hasManagement); }
private void updateDefaultSelectedConsoleProtocol(final org.ovirt.engine.core.common.businessentities.VM vm) { if ((vm.getId()) == null) { return; } final java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.vms.ConsoleModel> cachedModels = cachedConsoleModels.get(vm.getId()); if (cachedModels == null) { return; } deselectUserSelectedProtocol(vm.getId()); final boolean isWindowsExplorer = parentModel.getConfigurator().isClientWindowsExplorer(); final org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.lang.Boolean hasSpiceSupport = ((java.lang.Boolean) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue())); if ((isWindowsExplorer && (hasSpiceSupport != null)) && (hasSpiceSupport.booleanValue())) { cachedModels.get(org.ovirt.engine.ui.uicommonweb.models.ConsoleModelsCache.RDP_INDEX).setUserSelected(true); } else { determineConsoleModelFromVm(vm, cachedModels).setUserSelected(true); } setupSelectionContext(vm); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.hasSpiceSupport(vm.getOs(), vm.getVdsGroupCompatibilityVersion(), asyncQuery); }
public static boolean isPublicKeyValid(java.lang.String publicKey) { java.lang.String[] words = publicKey.split("\\s+", 3); if ((words.length) < 2) { return false; } if (!(words[0].matches("^[\\p{Alpha}\\p{Digit}-]*$"))) { return false; } if (!(org.ovirt.engine.core.uutils.ssh.OpenSSHUtils.isBase64(words[1].getBytes(java.nio.charset.Charset.forName("UTF-8"))))) { return false; } return true; }
@org.junit.Test public void networkInVfsConfigNotValid() { networkInVfsConfigCommonTest(false); assertThat(validator.networkInVfsConfig(org.ovirt.engine.core.bll.validator.VfsConfigValidatorTest.NETWORK_ID), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_NOT_IN_VFS_CONFIG, java.lang.String.format(VfsConfigValidator.NIC_NAME_REPLACEMENT, nic.getName()), java.lang.String.format(VfsConfigValidator.NETWORK_NAME_REPLACEMENT, network.getName()))); }
private void updateMemoryColumnVisibility() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotListModelTable.getModel().getEntity())); if (vm == null) { return; } org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotListModelTable.getTable().ensureColumnPresent(SnapshotsViewColumns.dateColumn, constants.dateSnapshot(), true, "150px"); org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotListModelTable.getTable().ensureColumnPresent(SnapshotsViewColumns.statusColumn, constants.statusSnapshot(), true, "75px"); boolean memorySnapshotSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MemorySnapshotSupported, vm.getVdsGroupCompatibilityVersion().toString()))); org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotListModelTable.getTable().ensureColumnPresent(SnapshotsViewColumns.memoryColumn, constants.memorySnapshot(), memorySnapshotSupported, "55px"); org.ovirt.engine.ui.common.widget.uicommon.vm.VmSnapshotListModelTable.getTable().ensureColumnPresent(SnapshotsViewColumns.descriptionColumn, constants.descriptionSnapshot(), true, "185px"); }

@org.ovirt.engine.ui.uicompat.DefaultMessage("Add {0} to Bond") java.lang.String addToBond(java.lang.String name);
public org.ovirt.engine.core.bll.ValidationResult glusterServiceSupported() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.GLUSTER_NOT_SUPPORTED, "compatibilityVersion", cluster.getCompatibilityVersion().getValue()).when(((cluster.supportsGlusterService()) && (!(glusterFeatureEnabled())))); }



@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getUserProfileDao(); existingProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-96bc-485c-834a-cbbc03acc820")); deletableProfile = dao.get(new org.ovirt.engine.core.compat.Guid("38cb5663-96bc-485c-834a-cbbc03acc821")); newProfile = new org.ovirt.engine.core.common.businessentities.UserProfile(); newProfile.setId(org.ovirt.engine.core.compat.Guid.newGuid()); newProfile.setUserId(new org.ovirt.engine.core.compat.Guid("81940459-2ec4-4afa-bbaa-22549555293c")); newProfile.setSshPublicKeyId(new org.ovirt.engine.core.compat.Guid("67bc5484-d4eb-47ce-8b6a-e9624b70b676")); newProfile.setSshPublicKey("key3"); newProfile.setLoginName("userportal4@testportal.redhat.com@testportal.redhat.com"); }

private org.ovirt.engine.api.model.RSDL addSystemVersion(org.ovirt.engine.api.model.RSDL rsdl) { rsdl.setVersion(org.ovirt.engine.api.restapi.util.VersionHelper.parseVersion(getConfigurationValueDefault(java.lang.String.class, ConfigurationValues.VdcVersion))); return rsdl; }


@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> getAllForNetwork(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeReadList("GetVmTemplatesByNetworkId", org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateRowMapper.instance, getCustomMapSqlParameterSource().addValue("network_id", id)); }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(getName()).append(" {id=").append(getId()).append(", vdsId=").append(getVdsId()).append(", name=").append(getName()).append(", macAddress=").append(getMacAddress()).append(", networkName=").append(getNetworkName()).append(", bondName=").append(getBondName()).append(", bootProtocol=").append(getBootProtocol()).append(", address=").append(getAddress()).append(", subnet=").append(getSubnet()).append(", gateway=").append(getGateway()).append(", mtu=").append(getMtu()).append(", bridged=").append(isBridged()).append(", speed=").append(getSpeed()).append(", type=").append(getType()).append(", networkImplementationDetails=").append(getNetworkImplementationDetails()).append("}"); return builder.toString(); }
private void InitTemplate() { getModel().getMemSize().setEntity(this.vm.getvm_mem_size_mb()); getModel().getOSType().setSelectedItem(this.vm.getvm_os()); getModel().getDomain().setSelectedItem(this.vm.getvm_domain()); getModel().getUsbPolicy().setSelectedItem(this.vm.getusb_policy()); getModel().getNumOfMonitors().setSelectedItem(this.vm.getnum_of_monitors()); getModel().getAllowConsoleReconnect().setEntity(this.vm.getAllowConsoleReconnect()); getModel().setBootSequence(this.vm.getdefault_boot_sequence()); getModel().getTotalCPUCores().setEntity(java.lang.Integer.toString(this.vm.getnum_of_cpus())); getModel().getNumOfSockets().setSelectedItem(this.vm.getnum_of_sockets()); getModel().getIsStateless().setEntity(this.vm.getis_stateless()); getModel().getIsSmartcardEnabled().setEntity(this.vm.isSmartcardEnabled()); if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(this.vm.gettime_zone()))) { updateTimeZone(this.vm.gettime_zone()); } else { UpdateDefaultTimeZone(); } UpdateDomain(); getModel().getStorageDomain().setIsChangable(true); getModel().getProvisioning().setIsAvailable(false); for (java.lang.Object item : getModel().getDisplayProtocol().getItems()) { org.ovirt.engine.ui.uicommonweb.models.EntityModel model = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (item)); org.ovirt.engine.core.common.businessentities.DisplayType displayType = ((org.ovirt.engine.core.common.businessentities.DisplayType) (model.getEntity())); if (displayType == (this.vm.getdefault_display_type())) { getModel().getDisplayProtocol().setSelectedItem(item); break; } } InitPriority(this.vm.getpriority()); }
private void loadVmwareProviders() { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getAllProvidersByType(new org.ovirt.engine.ui.frontend.AsyncQuery(new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.VmwareVmProviderProperties>> providers = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.VmwareVmProviderProperties> provider : ((java.util.List<org.ovirt.engine.core.common.businessentities.Provider<org.ovirt.engine.core.common.businessentities.VmwareVmProviderProperties>>) (returnValue))) { if (getDataCenters().getSelectedItem().getId().equals(provider.getAdditionalProperties().getStoragePoolId())) { providers.add(provider); } } providers.add(0, null); getVmwareProviders().setItems(providers); } }), ProviderType.VMWARE); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REMOVE); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__POLICY_UNIT); }


@java.lang.Override public java.lang.Integer parse(java.lang.CharSequence text) throws java.text.ParseException { com.google.gwt.regexp.shared.MatchResult match = com.google.gwt.regexp.shared.RegExp.compile("(\\d*)\\s*(\\w*)").exec(text.toString()); java.lang.String prefix = match.getGroup(1); java.lang.String suffix = match.getGroup(2); java.lang.Integer size = null; try { size = java.lang.Integer.parseInt(prefix); } catch (java.lang.NumberFormatException e) { return 0; } if ((suffix.equalsIgnoreCase("GB")) || (suffix.equalsIgnoreCase("G"))) { size *= 1024; return size; } if ((suffix.equalsIgnoreCase("MB")) || (suffix.equalsIgnoreCase("M"))) { return java.lang.Integer.parseInt(prefix); } return size; }
@org.junit.Test public void statusNotSupportedForHostInstallation() { when(oldHost.getStatus()).thenReturn(VDSStatus.Up); validator = createValidatorForHostInstallation(); assertThat(validator.statusSupportedForHostInstallation(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.VDS_CANNOT_INSTALL_STATUS_ILLEGAL)); }
@java.lang.Override protected void ProceedProxyReturnValue() { org.ovirt.engine.core.common.errors.VdcBllErrors returnStatus = GetReturnValueFromStatus(org.ovirt.engine.core.vdsbroker.gluster.AbstractGlusterBrokerCommand.getReturnStatus()); switch (returnStatus) { case GlusterVolumeCreateFailed : case GlusterVolumeStartFailed : case GlusterVolumeStopFailed : case AddBricksToGlusterVolumeFailed : case GlusterVolumeSetOptionFailed : case GlusterVolumeRebalanceStartFailed : case GlusterVolumeDeleteFailed : case GlusterVolumeReplaceBrickStartFailed : case GlusterVolumeListFailed : case GlusterVolumeOptionInfoFailed : case GlusterVolumeResetOptionsFailed : case GlusterVolumeRemoveBricksFailed : case GlusterVolumeProfileStartFailed : case GlusterVolumeProfileStopFailed : case GlusterAddHostFailed : case RemoveGlusterServerFailed : case GlusterPeerListFailed : case GlusterVolumeStatusFailed : case GlusterVolumeProfileInfoFailed : org.ovirt.engine.core.vdsbroker.gluster.AbstractGlusterBrokerCommand.getVDSReturnValue().setVdsError(new org.ovirt.engine.core.common.errors.VDSError(returnStatus, org.ovirt.engine.core.vdsbroker.gluster.AbstractGlusterBrokerCommand.getReturnStatus().mMessage)); org.ovirt.engine.core.vdsbroker.gluster.AbstractGlusterBrokerCommand.getVDSReturnValue().setSucceeded(false); break; default : super.ProceedProxyReturnValue(); break; } }
public org.ovirt.engine.core.bll.ValidationResult hotUpdatePossible() { if ((getRequiredAction()) == (org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.RequiredAction.UPDATE_VM_DEVICE)) { if (!(org.ovirt.engine.core.bll.validator.FeatureSupported.networkLinking(version))) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.HOT_VM_INTERFACE_UPDATE_IS_NOT_SUPPORTED, org.ovirt.engine.core.bll.network.vm.UpdateVmInterfaceCommand.UpdateVmNicValidator.clusterVersion()); } else if (nic.isPortMirroring()) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.dal.VdcBllMessages.CANNOT_PERFOM_HOT_UPDATE_WITH_PORT_MIRRORING); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
public void startNextLiveMerge(int completedChildren) { if (completedChildren == 0) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateAllDiskImageSnapshotsStatus(getImageGroupId(), ImageStatus.LOCKED); } else { checkImageIdConsistency((completedChildren - 1)); } org.ovirt.engine.core.compat.Guid imageId = org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().get(completedChildren); org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.log.info("Starting child command {} of {}, image '{}'", (completedChildren + 1), org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().size(), imageId); org.ovirt.engine.core.common.action.RemoveSnapshotSingleDiskParameters parameters = buildRemoveSnapshotSingleDiskLiveParameters(imageId); parameters.setShouldBeEndedByParent(false); if ((org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getChildImageIds()) == null) { org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().setChildImageIds(java.util.Arrays.asList(new org.ovirt.engine.core.compat.Guid[org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getImageIds().size()])); } org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getChildImageIds().set(completedChildren, parameters.getDestinationImageId()); persistCommand(org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.executeAsyncCommand(VdcActionType.RemoveSnapshotSingleDiskLive, parameters, org.ovirt.engine.core.bll.snapshots.RemoveDiskSnapshotsCommand.cloneContextAndDetachFromParent()); }


@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((getParameters().getClusterId()) == null) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_CLUSTER_IS_NOT_VALID); return false; } if (!(getGlusterUtil().isGlusterSnapshotSupported(getVdsGroup().getCompatibilityVersion(), getVdsGroup().getId()))) { failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_VOLUME_SNAPSHOT_NOT_SUPPORTED); } if ((getParameters().getConfigParams()) == null) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_CONFIG_PARAMS_IS_EMPTY); return false; } for (org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotConfig param : getParameters().getConfigParams()) { if (org.apache.commons.lang.StringUtils.isEmpty(param.getParamValue())) { addCustomValue("snapshotConfigParam", param.getParamName()); addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SNAPSHOT_CONFIG_PARAM_VALUE_IS_EMPTY); return false; } } return true; }
public static boolean canRemoveVmPool(org.ovirt.engine.core.compat.Guid vmPoolId, java.util.ArrayList<java.lang.String> reasons) { boolean returnValue = true; if ((org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmPoolDao().getVmPoolsMapByVmPoolId(vmPoolId).size()) != 0) { returnValue = false; reasons.add(VdcBllMessages.VM_POOL_CANNOT_REMOVE_VM_POOL_WITH_VMS.toString()); } return returnValue; }
@java.lang.Override public void render(com.google.gwt.cell.client.Cell.Context context, com.google.gwt.safehtml.shared.SafeHtml data, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb) { if (data != null) { sb.appendHtmlConstant("<button type=\"button\" style=\"height:24px;\" tabindex=\"-1\">"); sb.append(data); sb.appendHtmlConstant("</button>"); } }
@java.lang.Override public void run() { org.ovirt.engine.core.bll.VmPoolHandler.processVmPoolOnStopVm(getVm().getId(), org.ovirt.engine.core.bll.job.ExecutionHandler.createDefaultContexForTasks(getExecutionContext())); }
private void setChangeQuotaCommand(org.ovirt.engine.ui.uicommonweb.UICommand value) { privateChangeQuotaCommand = value; }


@java.lang.Override public boolean isVisible() { org.ovirt.engine.core.common.businessentities.StorageDomainType storageDomainType = ((org.ovirt.engine.core.common.businessentities.StorageDomain) (getDetailModel().getEntity())).getStorageDomainType(); return (!(storageDomainType.equals(StorageDomainType.ISO))) && (!(storageDomainType.equals(StorageDomainType.ImportExport))); }
private static void runActionExecutionFailed(org.ovirt.engine.core.common.action.VdcActionType actionType, org.ovirt.engine.core.common.errors.VdcFault fault) { if ((org.ovirt.engine.ui.frontend.Frontend.getEventsHandler()) != null) { java.lang.String translatedMessage = org.ovirt.engine.ui.frontend.Frontend.vdsmErrorsTranslator.TranslateErrorTextSingle(((fault.getError()) == null ? fault.getMessage() : fault.getError().toString())); fault.setMessage(translatedMessage); org.ovirt.engine.ui.frontend.Frontend.getEventsHandler().runActionExecutionFailed(actionType, fault); } }

public java.util.List<java.lang.String> findActiveVmsUsingNetworks(org.ovirt.engine.core.compat.Guid vdsId, java.util.List<java.lang.String> networks) { if (networks.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<org.ovirt.engine.core.common.businessentities.VM> runningVms = getVmDAO().getAllRunningForVds(vdsId); java.util.List<java.lang.String> vmNames = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.VM vm : runningVms) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vmInterfaces = getVmNetworkInterfaceDao().getAllForVm(vm.getId()); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vmNic : vmInterfaces) { if (((vmNic.isPlugged()) && ((vmNic.getNetworkName()) != null)) && (networks.contains(vmNic.getNetworkName()))) { vmNames.add(vm.getName()); break; } } } return vmNames; }
@org.junit.Test public void outboundAverageMissing() { qos.setOutboundPeak(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_MEDIUM); qos.setOutboundBurst(org.ovirt.engine.core.bll.validator.NetworkQosValidatorTest.BANDWIDTH_MEDIUM); valuesPresentTest(org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_QOS_MISSING_VALUES)); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Attach Storage") java.lang.String dataCenterAttachStorageAction();

protected org.ovirt.engine.api.model.Group mapAdGroup(org.ovirt.engine.core.common.businessentities.ad_groups entity) { return getMapper(org.ovirt.engine.core.common.businessentities.ad_groups.class, org.ovirt.engine.api.model.Group.class).map(entity, null); }

@java.lang.Override public java.util.List<java.lang.String> allocateMacAddresses(int numberOfAddresses) { java.util.List<java.lang.Long> macs = macsStorage.allocateAvailableMacs(numberOfAddresses); java.util.Collections.sort(macs); logWhenMacPoolIsEmpty(); return org.ovirt.engine.core.utils.MacAddressRangeUtils.macAddressesToStrings(macs); }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Retain") java.lang.String retainBricksButton();
protected void runVm() { setActionReturnValue(VMStatus.Down); if (getVdsToRunOn()) { org.ovirt.engine.core.common.businessentities.VMStatus status = null; try { if (connectLunDisks(org.ovirt.engine.core.bll.RunVmCommand.getVdsId())) { status = createVm(); org.ovirt.engine.core.bll.job.ExecutionHandler.setAsyncJob(org.ovirt.engine.core.bll.RunVmCommand.getExecutionContext(), true); } } catch (org.ovirt.engine.core.common.errors.VdcBLLException e) { org.ovirt.engine.core.common.errors.VdcBllErrors errorCode = e.getErrorCode(); switch (errorCode) { case Done : case exist : case VDS_NETWORK_ERROR : case PROVIDER_FAILURE : throw e; default : org.ovirt.engine.core.bll.RunVmCommand.log.warn("Failed to run VM '{}': {}", org.ovirt.engine.core.bll.RunVmCommand.getVmName(), e.getMessage()); } } finally { org.ovirt.engine.core.bll.RunVmCommand.freeLock(); } setActionReturnValue(status); if ((status != null) && ((status.isRunning()) || (status == (org.ovirt.engine.core.common.businessentities.VMStatus.RestoringState)))) { org.ovirt.engine.core.bll.RunVmCommand.setSucceeded(true); } else { org.ovirt.engine.core.bll.RunVmCommand.log.info("Trying to rerun VM '{}'", org.ovirt.engine.core.bll.RunVmCommand.getVm().getName()); org.ovirt.engine.core.bll.RunVmCommand.setCommandShouldBeLogged(false); org.ovirt.engine.core.bll.RunVmCommand.setSucceeded(true); rerun(); } } else { runningFailed(); } }

@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.FenceStatusReturnForXmlRpc fenceNode(java.lang.String ip, java.lang.String port, java.lang.String type, java.lang.String user, java.lang.String password, java.lang.String action, java.lang.String secured, java.lang.String options) { try { java.util.Map<java.lang.String, java.lang.Object> xmlRpcReturnValue = vdsServer.fenceNode(ip, port, type, user, password, action, secured, options); org.ovirt.engine.core.vdsbroker.vdsbroker.FenceStatusReturnForXmlRpc wrapper = new org.ovirt.engine.core.vdsbroker.vdsbroker.FenceStatusReturnForXmlRpc(xmlRpcReturnValue); return wrapper; } catch (java.lang.reflect.UndeclaredThrowableException ute) { throw new org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcRunTimeException(ute); } }

protected boolean isCinderStorageHasNoDisks() { if ((org.ovirt.engine.core.bll.storage.StorageDomainCommandBase.getStorageDomain().getStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.StorageType.CINDER)) { return validate(org.ovirt.engine.core.bll.storage.CINDERStorageHelper.isCinderHasNoImages(getStorageDomainId())); } return true; }
@java.lang.Override protected org.ovirt.engine.core.bll.snapshots.SnapshotsValidator getSnapshotValidator() { return new org.ovirt.engine.core.bll.snapshots.SnapshotsValidator() { @java.lang.Override public org.ovirt.engine.core.bll.ValidationResult vmNotInPreview(org.ovirt.engine.core.compat.Guid vmId) { if (vmInPreview) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VM_IN_PREVIEW); } return org.ovirt.engine.core.bll.ValidationResult.VALID; } }; }
@java.lang.Override protected void executeVdsBrokerCommand() { vmListReturn = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getBroker().list(); org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.proceedProxyReturnValue(); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm> returnVMs = new java.util.HashMap<>(); for (int idx = 0; idx < (vmListReturn.vmList.length); ++idx) { java.util.Map<java.lang.String, java.lang.Object> vm = vmListReturn.vmList[idx]; org.ovirt.engine.core.compat.Guid vmId = org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getVmId(vm); org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm vdsmVm = new org.ovirt.engine.core.vdsbroker.monitoring.VdsmVm(vmId, org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.getVdsmCallTimestamp(vm)).setVmDynamic(org.ovirt.engine.core.vdsbroker.vdsbroker.ListVDSCommand.buildVMDynamicDataFromList(vm)); returnVMs.put(vmId, vdsmVm); } setReturnValue(returnVMs); }
private boolean validatePciAndIdeLimit(java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsDiskPluggedTo) { for (org.ovirt.engine.core.common.businessentities.VM vm : vmsDiskPluggedTo) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNic> allVmInterfaces = org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVmNicDao().getAllForVm(vm.getId()); java.util.List<org.ovirt.engine.core.common.businessentities.Disk> allVmDisks = new java.util.LinkedList<org.ovirt.engine.core.common.businessentities.Disk>(getOtherVmDisks(vm.getId())); allVmDisks.add(getNewDisk()); if (!(checkPciAndIdeLimit(vm.getNumOfMonitors(), allVmInterfaces, allVmDisks, org.ovirt.engine.core.bll.utils.VmDeviceUtils.isVirtioScsiControllerAttached(vm.getId()), org.ovirt.engine.core.bll.UpdateVmDiskCommand.getReturnValue().getCanDoActionMessages()))) { return false; } } return true; }
@org.ovirt.engine.ui.webadmin.DefaultStringValue("Enforcing") java.lang.String enforceAffinityGroup();


public void update(org.ovirt.engine.core.common.businessentities.VM vm) { if (vm == null) { clearForm(); return; } if (!(isInitialized())) { init(); } definedMemory.setValue(((vm.getVmMemSizeMb()) + (constants.mb()))); minAllocatedMemory.setValue(((vm.getMinAllocatedMem()) + (constants.mb()))); cpuInfo.setValue(messages.cpuInfoLabel(vm.getNumOfCpus(), vm.getNumOfSockets(), vm.getCpuPerSocket())); }
@java.lang.Override public void onDoubleClick(com.google.gwt.event.dom.client.DoubleClickEvent event) { java.lang.String res = consoleManager.connectToConsole(model); if (res != null) { getView().showErrorDialog(res); } }
public static void updateNetworkData(org.ovirt.engine.core.common.businessentities.VDS vds, org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct xmlRpcStruct) { vds.setActiveNic(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignStringValue(xmlRpcStruct, VdsProperties.NETWORK_LAST_CLIENT_INTERFACE)); java.util.List<org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface> oldInterfaces = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getInterfaceDao().getAllInterfacesForVds(vds.getId()); vds.getInterfaces().clear(); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.addHostNetworkInterfaces(vds, xmlRpcStruct); java.util.Map<java.lang.String, java.lang.Integer> currVlans = org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.addHostVlanDevices(vds, xmlRpcStruct); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.addHostBondDevices(vds, xmlRpcStruct); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.addHostNetworksAndUpdateInterfaces(vds, xmlRpcStruct, currVlans); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.setBondingOptions(vds, oldInterfaces); if (xmlRpcStruct.containsKey(VdsProperties.netConfigDirty)) { vds.setNetConfigDirty(org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.AssignBoolValue(xmlRpcStruct, VdsProperties.netConfigDirty)); } }
@java.lang.Override protected void executeCommand() { getStorageDeviceSyncJobInstance().refreshStorageDevicesFromServers(java.util.Arrays.asList(org.ovirt.engine.core.bll.gluster.SyncStorageDevicesCommand.getVds())); org.ovirt.engine.core.bll.gluster.SyncStorageDevicesCommand.setSucceeded(true); }
@javax.ws.rs.Path("{action: (copy|export)}/{oid}") public org.ovirt.engine.api.v3.servers.V3ActionServer getActionResource(@javax.ws.rs.PathParam("action") java.lang.String action, @javax.ws.rs.PathParam("oid") java.lang.String oid) { return new org.ovirt.engine.api.v3.servers.V3ActionServer(getDelegate().getActionResource(action, oid)); }
@java.lang.Override public void onLogout() { org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(); query.setHandleFailure(true); query.setModel(this); query.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object ReturnValue) { if (clientAgentType.isIE8OrBelow()) { Window.Location.reload(); } org.ovirt.engine.ui.frontend.Frontend.setLoggedInUser(null); getLoginModel().resetAfterLogout(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.clearCache(); connectAutomaticallyManager.resetAlreadyOpened(); org.ovirt.engine.ui.userportal.system.ApplicationInit.super.onLogout(); } }; org.ovirt.engine.ui.frontend.Frontend.LogoffAsync(org.ovirt.engine.ui.frontend.Frontend.getLoggedInUser(), query); }

private static void addNetworkInterfaceProperties(org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct struct, org.ovirt.engine.core.common.businessentities.VmNetworkInterface vmInterface, org.ovirt.engine.core.common.businessentities.VmDevice vmDevice, java.lang.String nicModel, org.ovirt.engine.core.compat.Version clusterVersion) { struct.add(VdsProperties.Type, vmDevice.getType()); struct.add(VdsProperties.Device, vmDevice.getDevice()); struct.add(VdsProperties.network, vmInterface.getNetworkName()); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addAddress(vmDevice, struct); struct.add(VdsProperties.mac_addr, vmInterface.getMacAddress()); org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addBootOrder(vmDevice, struct); struct.add(VdsProperties.SpecParams, vmDevice.getSpecParams()); struct.add(VdsProperties.DeviceId, java.lang.String.valueOf(vmDevice.getId().getDeviceId())); struct.add(VdsProperties.nic_type, nicModel); if (vmInterface.isPortMirroring()) { java.util.List<java.lang.String> networks = new java.util.ArrayList<java.lang.String>(); networks.add(vmInterface.getNetworkName()); struct.add(VdsProperties.portMirroring, networks); } org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder.addNetworkFiltersToNic(struct, clusterVersion); }
private java.util.ArrayList<java.lang.String> getLunIds(org.ovirt.engine.api.model.Storage storage, org.ovirt.engine.core.common.businessentities.storage.StorageType storageType, org.ovirt.engine.core.compat.Guid hostId) { java.util.List<org.ovirt.engine.api.model.LogicalUnit> logicalUnits = new java.util.ArrayList<org.ovirt.engine.api.model.LogicalUnit>(); if (storage.isSetLogicalUnits()) { logicalUnits = storage.getLogicalUnits(); } else if ((storage.isSetVolumeGroup()) && (storage.getVolumeGroup().isSetLogicalUnits())) { logicalUnits = storage.getVolumeGroup().getLogicalUnits(); } java.util.ArrayList<java.lang.String> lunIds = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.api.model.LogicalUnit unit : logicalUnits) { validateParameters(unit, 4, "id"); if ((storageType == (org.ovirt.engine.core.common.businessentities.storage.StorageType.ISCSI)) && (!(isConnectionAssumed(unit)))) { connectStorageToHost(hostId, storageType, unit); } lunIds.add(unit.getId()); } refreshHostStorage(hostId); return !(lunIds.isEmpty()) ? lunIds : null; }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.hosts.InstallModel model) { driver.edit(model); }
protected java.lang.String getJsonDiskDescription(org.ovirt.engine.core.common.businessentities.storage.Disk disk) { try { return org.ovirt.engine.core.bll.ImagesHandler.getJsonDiskDescription(disk); } catch (java.io.IOException e) { log.error("Exception while generating json for disk. ERROR: '{}'", e); return org.apache.commons.lang.StringUtils.EMPTY; } }
@java.lang.Override protected org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap createWidgetConfiguration() { return super.createWidgetConfiguration().update(highAvailabilityTab, hiddenField()).update(spiceProxyEditor, simpleField().visibleInAdvancedModeOnly()).update(spiceProxyEnabledCheckboxWithInfoIcon, simpleField().visibleInAdvancedModeOnly()).update(spiceProxyOverrideEnabledEditor, simpleField().visibleInAdvancedModeOnly()).putOne(isStatelessEditor, hiddenField()).putOne(isRunAndPauseEditor, hiddenField()).putOne(editPoolEditVmsPanel, hiddenField()).putOne(editPoolIncraseNumOfVmsPanel, hiddenField()).putOne(logicalNetworksEditorPanel, hiddenField()).putOne(editPoolEditMaxAssignedVmsPerUserPanel, hiddenField()); }

private void initClusters(java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> clusters, org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup> filteredList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VDSGroup>(); org.ovirt.engine.core.common.businessentities.StoragePool selectedDataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (getModel().getDataCenter().getSelectedItem())); boolean listContainsVmCluster = false; for (org.ovirt.engine.core.common.businessentities.VDSGroup cluster : clusters) { if (((cluster.getStoragePoolId()) != null) && (selectedDataCenter.getId().equals(cluster.getStoragePoolId()))) { filteredList.add(cluster); if (vm.getVdsGroupId().getValue().equals(cluster.getId())) { listContainsVmCluster = true; } } } if (!listContainsVmCluster) { addVmCluster(filteredList); } else { java.util.Collections.sort(filteredList, new org.ovirt.engine.ui.uicommonweb.Linq.VdsGroupByNameComparer()); model.setClusters(model, filteredList, vm.getVdsGroupId().getValue()); } }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(getName()).append(" {id=").append(getId()).append(", vdsId=").append(getVdsId()).append(", macAddress=").append(getMacAddress()).append(", networkName=").append(getNetworkName()).append(", vlanId=").append(getVlanId()).append(", bonded=").append(getBonded()).append(", bondName=").append(getBondName()).append(", bondOptions=").append(getBondOptions()).append(", bootProtocol=").append(getBootProtocol()).append(", address=").append(getAddress()).append(", subnet=").append(getSubnet()).append(", gateway=").append(getGateway()).append(", mtu=").append(getMtu()).append(", bridged=").append(isBridged()).append(", speed=").append(getSpeed()).append(", type=").append(getType()).append(", networkImplementationDetails=").append(getNetworkImplementationDetails()).append("}"); return builder.toString(); }


private void updateIsLiveMergeSupported(java.lang.Object entity) { if (entity == null) { return; } org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (entity)); if (((vm.getRunOnVds()) == null) || (!(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isLiveMergeSupported(vm)))) { setLiveMergeSupported(false); return; } org.ovirt.engine.ui.frontend.AsyncQuery query = new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel vmSnapshotListModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (model)); org.ovirt.engine.core.common.businessentities.VDS vds = ((org.ovirt.engine.core.common.businessentities.VDS) (returnValue)); vmSnapshotListModel.setLiveMergeSupported(vds.getLiveMergeSupport()); } }); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getHostById(query, vm.getRunOnVds()); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { defaultType = org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getDefaultNicType(((java.util.Collection<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType>) (returnValue))); supportedInterfaceTypes = ((java.util.Collection<org.ovirt.engine.core.common.businessentities.network.VmInterfaceType>) (returnValue)); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getVmNicList(getNicsQuery, vmId); }
private void populate(java.util.Map<java.lang.String, java.lang.Boolean> bondsWithStatus, java.util.List<org.ovirt.engine.core.common.businessentities.Network> clusterNetworks, java.util.List<java.lang.String> networks, java.util.Map<java.lang.String, java.util.List<java.lang.String>> bondsWithListOfNics, org.ovirt.engine.core.common.businessentities.VdsNetworkInterface iface) { org.ovirt.engine.core.utils.Pair<java.lang.Boolean, java.lang.String> retVal = isRequiredNetworkInCluster(iface.getBondName(), clusterNetworks); java.lang.String networkName = retVal.getSecond(); if (retVal.getFirst()) { if (!(bondsWithStatus.containsKey(iface.getBondName()))) { bondsWithStatus.put(iface.getBondName(), false); } bondsWithStatus.put(iface.getBondName(), ((bondsWithStatus.get(iface.getBondName())) || ((iface.getStatistics().getStatus()) == (org.ovirt.engine.core.common.businessentities.InterfaceStatus.Up)))); if ((!(networks.contains(networkName))) && (!(bondsWithStatus.containsKey(iface.getName())))) { networks.add(networkName); } else if ((networks.contains(networkName)) && (bondsWithStatus.containsKey(iface.getBondName()))) { networks.remove(networkName); } if (!(bondsWithListOfNics.containsKey(iface.getBondName()))) { bondsWithListOfNics.put(iface.getBondName(), new java.util.ArrayList<java.lang.String>()); } bondsWithListOfNics.get(iface.getBondName()).add(iface.getName()); } }
@java.lang.Override protected org.ovirt.engine.api.model.VM doPopulate(org.ovirt.engine.api.model.VM model, org.ovirt.engine.core.common.businessentities.VM entity) { setPayload(model); setBallooning(model); setConsoleDevice(model); setVirtioScsiController(model); setCertificateInfo(model); return model; }

@org.junit.Test public void testUpdateMovingCluster() throws java.lang.Exception { setUpGetEntityExpectations(3); setUpEntityQueryExpectations(VdcQueryType.GetVdsGroupByVdsGroupId, org.ovirt.engine.core.common.queries.IdQueryParameters.class, new java.lang.String[]{ "Id" }, new java.lang.Object[]{ GUIDS[1] }, getVdsGroupEntity()); setUpGetPayloadExpectations(0, 2); setUpGetBallooningExpectations(); setUpGetBallooningExpectations(); setUpGetConsoleExpectations(new int[]{ 0 }); setUpGetVmOvfExpectations(new int[]{ 0 }); setUpGetVirtioScsiExpectations(new int[]{ 0 }); setUpGetRngDeviceExpectations(new int[]{ 0 }); setUriInfo(setUpActionExpectations(VdcActionType.ChangeVMCluster, org.ovirt.engine.core.common.action.ChangeVMClusterParameters.class, new java.lang.String[]{ "ClusterId", "VmId" }, new java.lang.Object[]{ GUIDS[1], GUIDS[0] }, true, true, false)); setUpActionExpectations(VdcActionType.UpdateVm, org.ovirt.engine.core.common.action.VmManagementParametersBase.class, new java.lang.String[]{ }, new java.lang.Object[]{ }, true, true); org.ovirt.engine.api.model.VM model = org.ovirt.engine.api.restapi.resource.BackendVmsResourceTest.getModel(0); model.setId(GUIDS[0].toString()); model.setCluster(new org.ovirt.engine.api.model.Cluster()); model.getCluster().setId(GUIDS[1].toString()); verifyModelOnNewCluster(resource.update(model), 0); }






@java.lang.Override public java.lang.String getVerb(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1) { return org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getMessages().detachNetwork(op1.getName()); }

private void onSavePostNameValidation() { org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model = ((org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel) (getWindow())); if (!(model.validate())) { return; } if ((model.getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.storage.NfsStorageModel) { saveNfsStorage(); } else if ((model.getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.storage.LocalStorageModel) { saveLocalStorage(); } else if ((model.getSelectedItem()) instanceof org.ovirt.engine.ui.uicommonweb.models.storage.PosixStorageModel) { savePosixStorage(); } else { saveSanStorage(); } }

public static java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmOsType> GetLinuxOsTypes() { if ((org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.linuxOsTypes) != null) { return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.linuxOsTypes; } org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.linuxOsTypes = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VmOsType>(java.util.Arrays.asList(new org.ovirt.engine.core.common.businessentities.VmOsType[]{ org.ovirt.engine.core.common.businessentities.VmOsType.OtherLinux, org.ovirt.engine.core.common.businessentities.VmOsType.RHEL3, org.ovirt.engine.core.common.businessentities.VmOsType.RHEL3x64, org.ovirt.engine.core.common.businessentities.VmOsType.RHEL4, org.ovirt.engine.core.common.businessentities.VmOsType.RHEL4x64, org.ovirt.engine.core.common.businessentities.VmOsType.RHEL5, org.ovirt.engine.core.common.businessentities.VmOsType.RHEL5x64, org.ovirt.engine.core.common.businessentities.VmOsType.RHEL6, org.ovirt.engine.core.common.businessentities.VmOsType.RHEL6x64 })); return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.linuxOsTypes; }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__TYPE__CLUSTER); addCanDoActionMessage(EngineMessage.VAR__ACTION__REMOVE); }
public static void GetNetworkList(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, org.ovirt.engine.core.compat.Guid dataCenterId) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { return source != null ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>) (source)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>(); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllNetworks, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenterId), aQuery); }

public boolean canRunVm(java.util.List<java.lang.String> messages, java.util.List<org.ovirt.engine.core.common.businessentities.Disk> vmDisks, org.ovirt.engine.core.common.businessentities.StoragePool storagePool, java.util.List<org.ovirt.engine.core.compat.Guid> vdsBlackList, org.ovirt.engine.core.compat.Guid destVds, org.ovirt.engine.core.common.businessentities.VDSGroup vdsGroup) { if (((((((((!(validateVmProperties(vm, messages))) || (!(validate(validateBootSequence(vm, runVmParam.getBootSequence(), vmDisks), messages)))) || (!(validate(new org.ovirt.engine.core.bll.validator.VmValidator(vm).vmNotLocked(), messages)))) || (!(validate(getSnapshotValidator().vmNotDuringSnapshot(vm.getId()), messages)))) || (!(validate(validateVmStatusUsingMatrix(vm), messages)))) || (!(validate(validateIsoPath(vm, runVmParam.getDiskPath(), runVmParam.getFloppyPath()), messages)))) || (!(validate(vmDuringInitialization(vm), messages)))) || (!(validate(validateVdsStatus(vm), messages)))) || (!(validate(validateStatelessVm(vm, vmDisks, runVmParam.getRunAsStateless()), messages)))) { return false; } java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> images = org.ovirt.engine.core.bll.ImagesHandler.filterImageDisks(vmDisks, true, false); if ((!(images.isEmpty())) && (((!(validate(validateStoragePoolUp(vm, storagePool), messages))) || (!(validate(validateStorageDomains(vm, isInternalExecution, images), messages)))) || (!(validate(validateImagesForRunVm(vm, images), messages))))) { return false; } if (!(org.ovirt.engine.core.bll.scheduling.SchedulingManager.getInstance().canSchedule(vdsGroup, vm, vdsBlackList, null, destVds, messages))) { return false; } return true; }
private static boolean isQosInSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, org.ovirt.engine.core.common.businessentities.network.NetworkQoS networkQos) { org.ovirt.engine.core.common.businessentities.network.NetworkQoS ifaceQos = iface.getQos(); if (ifaceQos == networkQos) { return true; } else if ((ifaceQos == null) || (networkQos == null)) { return false; } else { return ifaceQos.equalValues(networkQos); } }
@java.lang.Override public org.ovirt.engine.api.model.DataCenter update(org.ovirt.engine.api.model.DataCenter incoming) { return performUpdate(incoming, new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetStoragePoolById, org.ovirt.engine.core.common.queries.StoragePoolQueryParametersBase.class), VdcActionType.UpdateStoragePool, new org.ovirt.engine.api.restapi.resource.BackendDataCenterResource.UpdateParametersProvider()); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { super.eventRaised(ev, sender, args); if (((getrdp().getDisconnectedEvent()) != null) && (ev.equals(getrdp().getDisconnectedEvent()))) { rdp_Disconnected(sender, ((org.ovirt.engine.ui.uicommonweb.models.vms.ErrorCodeEventArgs) (args))); } }
public void setName(java.lang.String value) { if (!(org.ovirt.engine.core.compat.StringHelper.stringsEqual(name, value))) { name = value; OnPropertyChanged(new org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs("Name")); } }


private static void ApplyNextRunConfiguration(org.ovirt.engine.core.compat.Guid vmId) { org.ovirt.engine.core.common.businessentities.Snapshot runSnap = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSnapshotDao().get(vmId, SnapshotType.NEXT_RUN); if (runSnap != null) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSnapshotDao().remove(runSnap.getId()); org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDao().get(vmId); if (vm != null) { java.util.Date originalCreationDate = vm.getVmCreationDate(); new org.ovirt.engine.core.bll.snapshots.SnapshotsManager().updateVmFromConfiguration(vm, runSnap.getVmConfiguration()); vm.setVmCreationDate(originalCreationDate); org.ovirt.engine.core.common.action.VmManagementParametersBase updateVmParams = org.ovirt.engine.core.bll.ProcessDownVmCommand.createUpdateVmParameters(vm); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.UpdateVm, updateVmParams); } } }
private void edit(org.ovirt.engine.ui.uicommonweb.models.ListModel model, final boolean topTableIsEdited) { org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel> table = getTable(topTableIsEdited); org.ovirt.engine.ui.uicompat.IEventListener listener = (topTableIsEdited) ? topItemsChangedListener : bottomItemsChangedListener; if (listener != null) { table.asEditor().flush().getItemsChangedEvent().removeListener(listener); } listener = new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { getSelectionModel(topTableIsEdited).clear(); } }; model.getItemsChangedEvent().addListener(listener); table.asEditor().edit(model); }
private java.lang.String getDiskIsBeingMigratedMessage() { if ((cachedDiskIsBeingMigratedMessage) == null) { cachedDiskIsBeingMigratedMessage = new org.ovirt.engine.core.bll.LockMessage(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_DISK_IS_BEING_MIGRATED).withOptional("DiskName", ((getImage()) != null ? getDiskAlias() : null)).toString(); } return cachedDiskIsBeingMigratedMessage; }
@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { return source; } return new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(); }
@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. Values are out of range.") java.lang.String ACTION_TYPE_FAILED_QOS_OUT_OF_RANGE_VALUES();
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.VnicInstanceType model) { driver.edit(model); profileEditor.addLabelStyleName(style.noDisplay()); profileEditor.addContentWidgetStyleName(style.contentStyle()); profileEditor.setElementId(org.ovirt.engine.ui.common.utils.ElementIdUtils.createElementId(elementId, model.getNetworkInterface().getName())); syncSelectedItemWithNetworkInterface(model); model.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { syncSelectedItemWithNetworkInterface(model); com.google.gwt.event.logical.shared.ValueChangeEvent.fire(org.ovirt.engine.ui.common.widget.profile.ProfileInstanceTypeEditor.this, model); } }); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.EventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = dataCenters.getSelectedItem(); org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetStorageDomainsByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dataCenter.getId()), new org.ovirt.engine.ui.frontend.AsyncQuery(this, createGetStorageDomainsByStoragePoolIdCallback(dataCenter))); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(getId(), parentDeviceName, capability, iommuGroup, productName, productId, vendorName, vendorId, parentPhysicalFunction, totalVirtualFunctions, networkInterfaceName, vmId); }
@java.lang.Override public void flush(org.ovirt.engine.core.common.businessentities.qos.StorageQos storageQos) { if (getThroughput().getEnabled().getEntity()) { storageQos.setMaxThroughput(getThroughput().getTotal().getEntity()); storageQos.setMaxReadThroughput(getThroughput().getRead().getEntity()); storageQos.setMaxWriteThroughput(getThroughput().getWrite().getEntity()); } else { storageQos.setMaxThroughput(null); storageQos.setMaxReadThroughput(null); storageQos.setMaxWriteThroughput(null); } if (getIops().getEnabled().getEntity()) { storageQos.setMaxIops(getIops().getTotal().getEntity()); storageQos.setMaxReadIops(getIops().getRead().getEntity()); storageQos.setMaxWriteIops(getIops().getWrite().getEntity()); } else { storageQos.setMaxIops(null); storageQos.setMaxReadIops(null); storageQos.setMaxWriteIops(null); } }
@java.lang.Override public void render(org.ovirt.engine.ui.webadmin.widget.table.column.Context context, org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume, com.google.gwt.safehtml.shared.SafeHtmlBuilder sb) { if (volume == null) { return; } int brickCount = volume.getBricks().size(); int count = 0; org.ovirt.engine.core.common.businessentities.gluster.GlusterStatus status = volume.getStatus(); com.google.gwt.resources.client.ImageResource statusImage = null; java.lang.String tooltip; switch (status) { case DOWN : statusImage = resources.downImage(); tooltip = constants.down(); break; case UP : count = countDownBricks(volume); if (count == 0) { statusImage = resources.upImage(); tooltip = constants.up(); } else if (count < brickCount) { statusImage = resources.volumeBricksDownWarning(); tooltip = constants.volumeBricksDown(); } else { statusImage = resources.volumeAllBricksDownWarning(); tooltip = constants.volumeAllBricksDown(); } break; default : statusImage = resources.downImage(); tooltip = constants.down(); } com.google.gwt.safehtml.shared.SafeHtml statusImageHtml = com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(com.google.gwt.user.client.ui.AbstractImagePrototype.create(statusImage).getHTML()); sb.append(applicationTemplates.statusTemplate(statusImageHtml, tooltip)); }
private void Run() { org.ovirt.engine.core.common.businessentities.VM entity = ((org.ovirt.engine.core.common.businessentities.VM) (getItem().getEntity())); boolean reinitialize = (!(entity.isInitialized())) && (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsWindowsOsType(entity.getVmOs())); org.ovirt.engine.core.common.action.RunVmParams tempVar = new org.ovirt.engine.core.common.action.RunVmParams(entity.getId()); tempVar.setReinitialize(reinitialize); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.RunVm, tempVar); }

@java.lang.Override protected void AsyncSearch() { super.AsyncSearch(); org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object ReturnValue) { org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleListModel roleListModel = ((org.ovirt.engine.ui.uicommonweb.models.configure.roles_ui.RoleListModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.roles> filteredList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.roles>(); for (org.ovirt.engine.core.common.businessentities.roles item : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.roles>) (((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (ReturnValue)).getReturnValue()))) { if (((roleListModel.getItemsFilter()) == null) || ((roleListModel.getItemsFilter()) == (item.getType()))) { filteredList.add(item); } } roleListModel.setItems(filteredList); } }; org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.GetAllRoles, new org.ovirt.engine.core.common.queries.MultilevelAdministrationsQueriesParameters(), _asyncQuery); }

protected boolean disconnectStorageDomain(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { return org.ovirt.engine.core.bll.storage.StorageHelperDirector.getInstance().getItem(storageDomain.getStorageType()).disconnectStorageFromDomainByVdsId(storageDomain, getVdsId()); }
public boolean IsFieldUpdatable(java.lang.Enum<?> status, java.lang.String name, java.lang.Object fieldContainer, boolean hotsetEnabled) { boolean returnValue = true; if (!(IsFieldUpdatable(name))) { if (((fieldContainer != null) && ((container) != null)) && (!(container.canUpdateField(fieldContainer, name, status)))) { returnValue = false; } else { java.util.Set<java.lang.String> values = dictionary.get(status); returnValue = (values != null) ? values.contains(name) : false; if ((!returnValue) && hotsetEnabled) { returnValue = isHotSetField(name); } } if (!returnValue) { org.ovirt.engine.core.utils.ObjectIdentityChecker.log.warn("Field '{}' can not be updated when status is '{}'", name, status); } } return returnValue; }




@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { cleanHostParametersFields(); if ((getIsDiscorveredHosts().getEntity()) != null) { updateHostList(getIsDiscorveredHosts().getEntity()); } }
private void newVm() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel(new org.ovirt.engine.ui.uicommonweb.models.vms.NewVmModelBehavior()); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().newVmTitle()); model.setHelpTag(HelpTag.new_vm); model.setHashName("new_vm"); model.setIsNew(true); model.getVmType().setSelectedItem(VmType.Server); model.setCustomPropertiesKeysList(org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getCustomPropertiesList()); model.setIsAdvancedModeLocalStorageKey("wa_vm_dialog"); setWindow(model); model.initialize(getSystemTreeSelectedItem()); org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand switchModeCommand = new org.ovirt.engine.ui.uicommonweb.models.vms.VmBasedWidgetSwitchModeCommand(); switchModeCommand.init(model); model.getCommands().add(switchModeCommand); model.getProvisioning().setEntity(true); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnSave", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }
@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__MAC__POOL); }



@java.lang.Override public void execute() { if ((connected.getCount()) == 0) { connected = new java.util.concurrent.CountDownLatch(1); } if ((subscribed.getCount()) == 0) { subscribed = new java.util.concurrent.CountDownLatch(1); } org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message message = new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().connect().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ACCEPT, "1.2"); if (policy.isHeartbeat()) { message.withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_HEART_BEAT, ((0 + ",") + (reduceGracePeriod(policy.getHeartbeat())))); } send(message.build()); subscribtionId = java.util.UUID.randomUUID().toString(); send(new org.ovirt.vdsm.jsonrpc.client.reactors.stomp.impl.Message().subscribe().withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_DESTINATION, org.ovirt.vdsm.jsonrpc.client.reactors.stomp.RESPONSE_QUEUE).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ID, subscribtionId).withHeader(org.ovirt.vdsm.jsonrpc.client.reactors.stomp.HEADER_ACK, "client").build()); }
@java.lang.Override protected void executeQueryCommand() { clusterId = org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRebalanceStatusQuery.getParameters().getClusterId(); org.ovirt.engine.core.compat.Guid volumeId = org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRebalanceStatusQuery.getParameters().getVolumeId(); if (volumeId != null) { volume = org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRebalanceStatusQuery.getGlusterVolumeDao().getById(volumeId); if ((volume) == null) { throw new java.lang.RuntimeException(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_INVALID.toString()); } if ((clusterId) == null) { clusterId = volume.getClusterId(); } asyncTask = volume.getAsyncTask(); if ((asyncTask) == null) { org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRebalanceStatusQuery.getQueryReturnValue().setReturnValue(null); return; } org.ovirt.engine.core.bll.gluster.GetGlusterVolumeRebalanceStatusQuery.getQueryReturnValue().setReturnValue(fetchTaskStatusDetails()); } }
private void validateQosNotPartiallyConfigured() { java.util.Set<java.lang.String> someSubInterfacesHaveQos = new java.util.HashSet<>(); java.util.Set<java.lang.String> notAllSubInterfacesHaveQos = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : params.getInterfaces()) { org.ovirt.engine.core.common.businessentities.network.Network network = getExistingClusterNetworks().get(iface.getNetworkName()); java.lang.String baseIfaceName = org.ovirt.engine.core.utils.NetworkUtils.stripVlan(iface); if (org.ovirt.engine.core.utils.NetworkUtils.qosConfiguredOnInterface(iface, network)) { someSubInterfacesHaveQos.add(baseIfaceName); } else { notAllSubInterfacesHaveQos.add(baseIfaceName); } } for (java.lang.String ifaceName : someSubInterfacesHaveQos) { if (notAllSubInterfacesHaveQos.contains(ifaceName)) { addViolation(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_INTERFACES_WITHOUT_QOS, ifaceName); } } }

@java.lang.Override public void edit(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel object) { driver.edit(object); final org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel storageModel = object; storageModel.getSelectedItemChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { revealStorageView(storageModel); } }); storageModel.getDataCenterAlert().getEntityChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { datacenterAlertIcon.setVisible(storageModel.getDataCenterAlert().getIsAvailable()); datacenterAlertIcon.setTitle(storageModel.getDataCenterAlert().getEntity()); } }); }
public static org.ovirt.engine.core.bll.ValidationResult canRunActionOnNonManagedVm(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.action.VdcActionType actionType) { org.ovirt.engine.core.bll.ValidationResult validationResult = ValidationResult.VALID; if (((vm.isHostedEngine()) && (!(org.ovirt.engine.core.bll.VmHandler.COMMANDS_ALLOWED_ON_HOSTED_ENGINE.contains(actionType)))) || ((vm.isExternalVm()) && (!(org.ovirt.engine.core.bll.VmHandler.COMMANDS_ALLOWED_ON_EXTERNAL_VMS.contains(actionType))))) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_CANNOT_RUN_ACTION_ON_NON_MANAGED_VM); } return validationResult; }

private boolean validateNetMask(java.lang.String mask) { java.lang.String[] split = mask.split("\\."); assert (split.length) == 4; int[] values = new int[split.length]; for (int i = 0; i < (split.length); i++) { int value; try { value = java.lang.Integer.valueOf(split[i]); } catch (java.lang.NumberFormatException e) { return false; } if (!(org.ovirt.engine.ui.uicommonweb.validation.SubnetMaskValidation.CORRECT_RANGE.contains(value))) { return false; } values[i] = value; } if (((((values[0]) == 0) || (((values[0]) != 255) && ((values[1]) != 0))) || (((values[1]) != 255) && ((values[2]) != 0))) || (((values[2]) != 255) && ((values[3]) != 0))) { return false; } return true; }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Templates already exist") java.lang.String templateAlreadyExistsMsg();
@java.lang.Override protected boolean canDoAction() { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); if (!(super.canDoAction())) { return false; } if (!(validate(getBrickValidator().canStopOrCommitRemoveBrick(volume, getParameters().getBricks())))) { return false; } if ((!(getGlusterTaskUtils().isTaskOfType(volume, GlusterTaskType.REMOVE_BRICK))) || (!((getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.STARTED)) || (getGlusterTaskUtils().isTaskStatus(volume, JobExecutionStatus.FINISHED))))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_REMOVE_BRICKS_NOT_STARTED); } return true; }
@java.lang.Override protected void executeQueryCommand() { java.util.List<org.ovirt.engine.core.common.businessentities.OvfEntityData> entityList = getOvfEntityList(VmEntityType.TEMPLATE); java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> vmTemplates = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.OvfEntityData ovf : entityList) { try { vmTemplates.add(ovfHelper.readVmTemplateFromOvf(ovf.getOvfData())); } catch (org.ovirt.engine.core.utils.ovf.OvfReaderException e) { log.debug(("failed to parse a given ovf configuration: \n" + (ovf.getOvfData())), e); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setExceptionString(("failed to parse a given ovf configuration " + (e.getMessage()))); } } org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setSucceeded(true); org.ovirt.engine.core.bll.GetUnregisteredVmTemplatesQuery.getQueryReturnValue().setReturnValue(vmTemplates); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__HOT_SET_MEMORY); addCanDoActionMessage(EngineMessage.VAR__TYPE__VM); addCanDoActionMessageVariable("clusterVersion", org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getVdsGroupCompatibilityVersion()); addCanDoActionMessageVariable("architecture", org.ovirt.engine.core.bll.HotSetAmountOfMemoryCommand.getVm().getClusterArch()); }
private void validateSource() { clearError(); if (((importSources.getSelectedItem()) == (ImportSource.EXPORT_DOMAIN)) && ((exportDomain) == null)) { setError(constants.notAvailableWithNoActiveExportDomain()); } }
@java.lang.Override protected void setActionMessageParameters() { super.setActionMessageParameters(); addCanDoActionMessage(EngineMessage.VAR__ACTION__EXTEND); }

@java.lang.Override public void setEntity(T value) { if ((org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.getEntity()) == null) { super.setEntity(value); return; } if (value != null) { if (!(((org.ovirt.engine.core.common.businessentities.IVdcQueryable) (value)).getQueryableId().equals(((org.ovirt.engine.core.common.businessentities.IVdcQueryable) (org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.getEntity())).getQueryableId()))) { super.setEntity(value); return; } } if (!(org.ovirt.engine.ui.uicommonweb.models.SearchableListModel.getEntity().equals(value))) { super.setEntity(value); return; } setEntity(value, false); }

@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } if ((userProfileDao.getByUserId(org.ovirt.engine.core.bll.UpdateUserProfileCommand.getUserId())) == null) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_PROFILE_NOT_EXIST); } return true; }

public org.ovirt.engine.core.bll.ValidationResult externalNetworkIsVmNetwork() { return network.isVmNetwork() ? org.ovirt.engine.core.bll.ValidationResult.VALID : new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_EXTERNAL_NETWORK_MUST_BE_VM_NETWORK); }

@java.lang.Override public java.util.List<org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer>> runScores(java.util.List<org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.lang.Integer>> scoreNameAndWeight, java.util.List<org.ovirt.engine.core.compat.Guid> hostIDs, org.ovirt.engine.core.compat.Guid vmID, java.util.Map<java.lang.String, java.lang.String> propertiesMap) { try { org.apache.xmlrpc.client.XmlRpcClient client = new org.apache.xmlrpc.client.XmlRpcClient(); client.setConfig(config); java.lang.Object result = client.execute(org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.SCORE, createScoreArgs(scoreNameAndWeight, hostIDs, vmID, propertiesMap)); return parseScoreResults(result); } catch (org.apache.xmlrpc.XmlRpcException e) { org.ovirt.engine.core.bll.scheduling.external.ExternalSchedulerBrokerImpl.log.error("Could not communicate with the external scheduler while running weight modules", e); return null; } }
@org.junit.Test public void testNetworkAttachedToClusterWhenNotAttached() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.Network network = new org.ovirt.engine.core.common.businessentities.network.Network(); network.setId(org.ovirt.engine.core.compat.Guid.newGuid()); org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment = new org.ovirt.engine.core.common.businessentities.network.NetworkAttachment(); attachment.setNetworkId(network.getId()); org.ovirt.engine.core.common.businessentities.network.NetworkClusterId networkClusterId = new org.ovirt.engine.core.common.businessentities.network.NetworkClusterId(host.getVdsGroupId(), network.getId()); when(networkClusterDaoMock.get(eq(networkClusterId))).thenReturn(null); when(networkDaoMock.get(eq(network.getId()))).thenReturn(network); assertThat(createNetworkAttachmentValidator(attachment).networkAttachedToCluster(), org.ovirt.engine.core.bll.validator.ValidationResultMatchers.failsWith(EngineMessage.NETWORK_NOT_EXISTS_IN_CLUSTER)); }
protected void listenOnRadioButtons() { registerHandler(getView().getRdpRadioButton().addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { getView().rdpSelected(event.getValue()); getView().spiceSelected((!(event.getValue()))); } })); registerHandler(getView().getSpiceRadioButton().addValueChangeHandler(new com.google.gwt.event.logical.shared.ValueChangeHandler<java.lang.Boolean>() { @java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { getView().spiceSelected(event.getValue()); getView().rdpSelected((!(event.getValue()))); } })); }

@java.lang.Override public void OnSuccess(java.lang.Object model, java.lang.Object result) { getWindow().StopProgress(); java.util.Map<java.lang.String, java.lang.String> hostMap = ((java.util.Map<java.lang.String, java.lang.String>) (result)); if (hostMap == null) { onEmptyGlusterHosts(clusterModel); return; } if ((hostMap.containsValue(null)) || (hostMap.containsValue(""))) { onGlusterHostsWithoutFingerprint(hostMap, clusterModel); return; } java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); for (java.util.Map.Entry<java.lang.String, java.lang.String> host : hostMap.entrySet()) { org.ovirt.engine.ui.uicommonweb.models.hosts.HostDetailModel hostModel = new org.ovirt.engine.ui.uicommonweb.models.hosts.HostDetailModel(host.getKey(), host.getValue()); hostModel.setName(host.getKey()); hostModel.setPassword(""); org.ovirt.engine.ui.uicommonweb.models.EntityModel entityModel = new org.ovirt.engine.ui.uicommonweb.models.EntityModel(hostModel); list.add(entityModel); } importClusterHosts(clusterModel, list); }

private void handleAnyChildSPMTaskCompletion(boolean succeeded) { java.util.List<org.ovirt.engine.core.compat.Guid> childCommandIds = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getChildCommandIds(org.ovirt.engine.core.bll.MergeExtendCommand.getCommandId()); if (childCommandIds.isEmpty()) { return; } org.ovirt.engine.core.compat.Guid currentChildId = childCommandIds.get(0); org.ovirt.engine.core.bll.MergeExtendCommand.log.info("Handling child command {} completion", currentChildId); if (!(org.ovirt.engine.core.compat.Guid.isNullOrEmpty(currentChildId))) { org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.retrieveCommand(currentChildId); org.ovirt.engine.core.common.businessentities.CommandEntity cmdEntity = org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(currentChildId); if (((command != null) && (cmdEntity != null)) && (!(cmdEntity.isCallbackNotified()))) { if (!succeeded) { command.getParameters().setTaskGroupSuccess(false); } org.ovirt.engine.core.bll.Backend.getInstance().endAction(VdcActionType.ExtendImageSize, command.getParameters(), org.ovirt.engine.core.bll.MergeExtendCommand.cloneContextAndDetachFromParent()); if (succeeded) { org.ovirt.engine.core.bll.tasks.CommandCoordinatorUtil.getCommandEntity(currentChildId).setCallbackNotified(true); } } } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network> getAllForCluster(org.ovirt.engine.core.compat.Guid id) { return getAllForCluster(id, null, false); }
private java.lang.Integer calcMaxVCpu() { java.lang.Integer maxSockets = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmSockets, vm.getCompatibilityVersion().getValue()); java.lang.Integer maxVCpus = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmCpus, vm.getCompatibilityVersion().getValue()); int threadsPerCore = vm.getThreadsPerCpu(); int cpuPerSocket = vm.getCpuPerSocket(); maxVCpus = (cpuPerSocket * threadsPerCore) * (java.lang.Math.min(maxSockets, (maxVCpus / (cpuPerSocket * threadsPerCore)))); return maxVCpus; }
private static boolean canRemoveVmPool(org.ovirt.engine.core.compat.Guid vmPoolId) { return (getListOfVmsInPool(vmPoolId).size()) == 0; }
private void validateRemove() { if (((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getVgMetadataDevice()) == null) || ((org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getFirstMetadataDevice()) == null)) { blockStorageDomainHelper.fillMetadataDevicesInfo(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageStaticData(), org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getVdsId()); validateRetrievedMetadataDevices(); storageDomainStaticDao.update(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain().getStorageStaticData()); java.util.List<java.lang.String> metadataDevices = blockStorageDomainHelper.findMetadataDevices(org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getStorageDomain(), org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.getParameters().getDevicesToReduce()); if (!(metadataDevices.isEmpty())) { org.ovirt.engine.core.bll.storage.domain.ReduceSANStorageDomainDevicesCommand.setCustomCommaSeparatedValues("deviceIds", metadataDevices); auditLogDirector.log(this, AuditLogType.USER_REDUCE_DOMAIN_DEVICES_FAILED_METADATA_DEVICES); throw new org.ovirt.engine.core.common.errors.EngineException(org.ovirt.engine.core.common.errors.EngineError.GeneralException, "Cannot perform on metadata devices"); } } validateFreeSpace(); }
public static void getAllNetworkQos(org.ovirt.engine.core.compat.Guid dcId, org.ovirt.engine.ui.frontend.AsyncQuery query) { query.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter<java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkQoS>>() { @java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkQoS> Convert(java.lang.Object returnValue, org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery) { java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkQoS> qosList = (returnValue == null) ? new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.NetworkQoS>() : ((java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkQoS>) (returnValue)); qosList.add(0, NetworkQoSModel.EMPTY_QOS); return qosList; } }; org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetAllNetworkQosByStoragePoolId, new org.ovirt.engine.core.common.queries.IdQueryParameters(dcId), query); }


private void setConfigurationEntries(org.ovirt.engine.core.domains.DomainsConfigurationEntry domainNameEntry, org.ovirt.engine.core.domains.DomainsConfigurationEntry adUserNameEntry, org.ovirt.engine.core.domains.DomainsConfigurationEntry adPasswordEntry, org.ovirt.engine.core.domains.DomainsConfigurationEntry authModeEntry, org.ovirt.engine.core.domains.DomainsConfigurationEntry ldapServersEntry, org.ovirt.engine.core.domains.DomainsConfigurationEntry adUserIdEntry, org.ovirt.engine.core.domains.DomainsConfigurationEntry ldapProviderTypeEntry, org.ovirt.engine.core.domains.DomainsConfigurationEntry changePasswordUrlEntry) throws org.ovirt.engine.core.domains.ManageDomainsResult { configurationProvider.setConfigValue(ConfigValues.AdUserName, adUserNameEntry); configurationProvider.setConfigValue(ConfigValues.AdUserPassword, adPasswordEntry, false); configurationProvider.setConfigValue(ConfigValues.LdapServers, ldapServersEntry); configurationProvider.setConfigValue(ConfigValues.AdUserId, adUserIdEntry); configurationProvider.setConfigValue(ConfigValues.LDAPSecurityAuthentication, authModeEntry); configurationProvider.setConfigValue(ConfigValues.DomainName, domainNameEntry); configurationProvider.setConfigValue(ConfigValues.LDAPProviderTypes, ldapProviderTypeEntry); if (changePasswordUrl) { configurationProvider.setConfigValue(ConfigValues.ChangePasswordUrl, changePasswordUrlEntry); } }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Are you sure you want to Shut down the following Virtual Machines?") java.lang.String areYouSureYouWantToShutDownTheFollowingVirtualMachinesMsg();
@org.junit.Test public void canDoActionFailsOnNoHook() { cmd = spy(new org.ovirt.engine.core.bll.gluster.AddGlusterHookCommand(new org.ovirt.engine.core.common.action.gluster.GlusterHookManageParameters(HOOK_ID))); setUpMocksForAdd(false); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_HOOK_DOES_NOT_EXIST.toString())); }

protected int getMaxVolumeChain() { return org.ovirt.engine.core.bll.validator.storage.DiskImagesValidator.maxImagesInChain; }
@java.lang.Override public void releaseMacsOnCommit(java.util.List<java.lang.String> macs) { macs.forEach(macPool::freeMac); }

private java.lang.String getProxyUri() { return (((org.ovirt.engine.core.common.config.Config.getValue(ConfigValues.ImageProxyURL)) + ":") + (org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.ImageProxyPort))) + "/images"; }



protected void addVmPermission() { if (org.ovirt.engine.core.bll.AddVmCommand.getParameters().isMakeCreatorExplicitOwner()) { org.ovirt.engine.core.common.businessentities.permissions perms = new org.ovirt.engine.core.common.businessentities.permissions(org.ovirt.engine.core.bll.AddVmCommand.getCurrentUser().getUserId(), PredefinedRoles.VM_OPERATOR.getId(), org.ovirt.engine.core.bll.AddVmCommand.getVmId(), org.ovirt.engine.core.common.VdcObjectType.VM); org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.addPermission(perms); org.ovirt.engine.core.bll.AddVmCommand.getCompensationContext().snapshotNewEntity(perms); } if ((org.ovirt.engine.core.bll.AddVmCommand.getParameters().isCopyTemplatePermissions()) && (!(org.ovirt.engine.core.bll.AddVmCommand.getVmTemplateId().equals(VmTemplateHandler.BlankVmTemplateId)))) { copyTemplatePermissions(); } }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity volume = getGlusterVolume(); if (!(volume.isOnline())) { addCanDoActionMessage(VdcBllMessages.ACTION_TYPE_FAILED_GLUSTER_VOLUME_ALREADY_STOPPED); addCanDoActionMessage(java.lang.String.format("$volumeName %1$s", volume.getName())); return false; } return true; }
protected void ProceedVGLunsInDb() { final java.util.ArrayList<org.ovirt.engine.core.common.businessentities.LUNs> luns = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.LUNs>) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.GetVGInfo, new org.ovirt.engine.core.common.vdscommands.GetVGInfoVDSCommandParameters(org.ovirt.engine.core.bll.storage.AddSANStorageDomainCommand.getVds().getId(), org.ovirt.engine.core.bll.storage.AddSANStorageDomainCommand.getStorageDomain().getstorage())).getReturnValue())); org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(new org.ovirt.engine.core.utils.transaction.TransactionMethod<java.lang.Void>() { @java.lang.Override public java.lang.Void runInTransaction() { for (org.ovirt.engine.core.common.businessentities.LUNs lun : luns) { proceedLUNInDb(lun, getStorageDomain().getstorage_type()); } return null; } }); }

void registerModelEventListeners(final org.ovirt.engine.ui.common.uicommon.model.ModelProvider<? extends org.ovirt.engine.ui.uicommonweb.models.EntityModel> modelProvider) { modelProvider.getModel().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs pcArgs = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)); if ("IsAvailable".equals(pcArgs.PropertyName)) { boolean isAvailable = modelProvider.getModel().getIsAvailable(); setAccessible(isAvailable); } } }); }
private org.ovirt.engine.core.bll.ValidationResult validateCoherentNicIdentification(org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment) { return validateCoherentIdentification(((attachment.getId()) == null ? null : attachment.getId().toString()), attachment.getNicId(), attachment.getNicName(), EngineMessage.NETWORK_ATTACHMENT_REFERENCES_NICS_INCOHERENTLY, existingInterfacesMap); }
private void setNetworkDhcp(org.ovirt.engine.ui.uicommonweb.models.EntityModel<java.lang.Boolean> value) { privateNetworkDhcp = value; }

@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot ${action} ${type}. The following bonds consist of less than two Network Interfaces: ${NETWORK_BONDS_INVALID_SLAVE_COUNT_LIST}.") java.lang.String NETWORK_BONDS_INVALID_SLAVE_COUNT();

@java.lang.Override public void ExecuteCommand(org.ovirt.engine.ui.uicommonweb.UICommand command) { super.ExecuteCommand(command); if (command == (getNewCommand())) { New(); } else if (command == (getEditCommand())) { Edit(); } else if (command == (getRemoveCommand())) { Remove(); } else if (command == (getMoveCommand())) { Move(); } else if (command == (getCopyCommand())) { Copy(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnSave")) { OnSave(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnForceSave")) { OnForceSave(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "Cancel")) { Cancel(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "CancelConfirm")) { CancelConfirm(); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(command.getName(), "OnRemove")) { OnRemove(); } else if (command == (getChangeQuotaCommand())) { changeQuota(); } else if (command.getName().equals("onChangeQuota")) { onChangeQuota(); } }
public static void removeVmStatelessImages(org.ovirt.engine.core.compat.Guid vmId, org.ovirt.engine.core.bll.context.CommandContext context) { if (org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getSnapshotDao().exists(vmId, SnapshotType.STATELESS)) { org.ovirt.engine.core.bll.VmPoolHandler.log.infoFormat("VdcBll.VmPoolHandler.processVmPoolOnStopVm - Deleting snapshot for stateless vm {0}", vmId); org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.RestoreStatelessVm, new org.ovirt.engine.core.common.action.VmOperationParameterBase(vmId), context); } }


private void updateWatchdogItems(java.util.Set<org.ovirt.engine.core.common.businessentities.VmWatchdogType> vmWatchdogTypes) { java.util.List<java.lang.String> watchDogModels = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.VmWatchdogType vmWatchdogType : vmWatchdogTypes) { watchDogModels.add(org.ovirt.engine.ui.uicompat.EnumTranslator.createAndTranslate(vmWatchdogType)); } watchDogModels.add(0, null); java.lang.String oldWatchdogSelected = ((java.lang.String) (getWatchdogModel().getSelectedItem())); getWatchdogModel().setItems(watchDogModels); if (watchDogModels.contains(oldWatchdogSelected)) { getWatchdogModel().setSelectedItem(oldWatchdogSelected); } }


@org.junit.Test public void testDeallocateIfExternalThrowException() { nic.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_NAME); nic.setId(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_ID); provider.setName(org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_NAME); doThrow(new org.ovirt.engine.core.common.errors.EngineException()).when(networkProviderProxy).deallocate(nic); underTest.deallocateIfExternal(); verify(auditLogDirector).log(auditLogableBaseCaptor.capture(), same(AuditLogType.REMOVE_PORT_FROM_EXTERNAL_PROVIDER_FAILED)); final java.util.Map<java.lang.String, java.lang.String> capturedCustomValues = auditLogableBaseCaptor.getValue().getCustomValues(); assertThat(capturedCustomValues, hasEntry("nicname", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_NAME)); assertThat(capturedCustomValues, hasEntry("nicid", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.NIC_ID.toString())); assertThat(capturedCustomValues, hasEntry("providername", org.ovirt.engine.core.bll.network.ExternalNetworkManagerTest.PROVIDER_NAME)); }


@java.lang.Override public boolean storageDomainRemoved(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain) { java.util.List<org.ovirt.engine.core.common.businessentities.StorageServerConnections> list = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageServerConnectionDao().getAllForVolumeGroup(storageDomain.getStorage()); for (org.ovirt.engine.core.common.businessentities.StorageServerConnections connection : filterConnectionsUsedByOthers(list, storageDomain.getStorage(), "")) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStorageServerConnectionDao().remove(connection.getid()); } removeStorageDomainLuns(storageDomain); return true; }
private boolean isBalloonEnabled() { java.lang.Boolean balloonEnabled = UpdateVmCommand.getParameters().isBalloonEnabled(); return balloonEnabled != null ? balloonEnabled : org.ovirt.engine.core.bll.utils.VmDeviceUtils.isBalloonEnabled(getVmId()); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName; if (propName.equals("ProposeDiscoverTargets")) { setProposeDiscover(object.getProposeDiscoverTargets()); } }
@java.lang.Override public void executeCommand() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue vdsReturnValue = runVdsCommand(VDSCommandType.Merge, createVDSParameters()); if (vdsReturnValue.getSucceeded()) { org.ovirt.engine.core.compat.Guid jobId = ((org.ovirt.engine.core.compat.Guid) (vdsReturnValue.getReturnValue())); persistBlockJobPlaceholder(jobId); org.ovirt.engine.core.bll.MergeCommand.getParameters().setVmJobId(jobId); org.ovirt.engine.core.bll.MergeCommand.setSucceeded(true); persistCommand(org.ovirt.engine.core.bll.MergeCommand.getParameters().getParentCommand(), true); org.ovirt.engine.core.bll.MergeCommand.log.debug("Merge started successfully"); } else { org.ovirt.engine.core.bll.MergeCommand.log.error("Failed to start Merge on VDS"); setCommandStatus(CommandStatus.FAILED); } }
public void addQuotaPermissionSubject(java.util.List<org.ovirt.engine.core.bll.utils.PermissionSubject> quotaPermissionList) { if ((((!(org.ovirt.engine.core.bll.CommandBase.isInternalExecution())) && ((org.ovirt.engine.core.bll.CommandBase.getStoragePool()) != null)) && ((org.ovirt.engine.core.bll.CommandBase.getStoragePool().getQuotaEnforcementType()) != (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.DISABLED))) && ((org.ovirt.engine.core.bll.CommandBase.getStoragePool().getQuotaEnforcementType()) != (org.ovirt.engine.core.common.businessentities.QuotaEnforcementTypeEnum.SOFT_ENFORCEMENT))) { java.util.List<org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter> consumptionParameters = getQuotaConsumptionParameters(); if (consumptionParameters != null) { for (org.ovirt.engine.core.bll.quota.QuotaConsumptionParameter parameter : getQuotaConsumptionParameters()) { if (((parameter.getQuotaGuid()) != null) && (!(Guid.Empty.equals(parameter.getQuotaGuid())))) { quotaPermissionList.add(new org.ovirt.engine.core.bll.utils.PermissionSubject(parameter.getQuotaGuid(), org.ovirt.engine.core.common.VdcObjectType.Quota, org.ovirt.engine.core.common.businessentities.ActionGroup.CONSUME_QUOTA)); } } } } }

@java.lang.Override public org.ovirt.engine.core.common.businessentities.VmPool mapRow(final java.sql.ResultSet rs, final int rowNum) throws java.sql.SQLException { final org.ovirt.engine.core.common.businessentities.VmPool entity = new org.ovirt.engine.core.common.businessentities.VmPool(); entity.setVmPoolDescription(rs.getString("vm_pool_description")); entity.setVmPoolId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("vm_pool_id"))); entity.setName(rs.getString("vm_pool_name")); entity.setVmPoolType(org.ovirt.engine.core.common.businessentities.VmPoolType.forValue(rs.getInt("vm_pool_type"))); entity.setParameters(rs.getString("parameters")); entity.setPrestartedVms(rs.getInt("prestarted_vms")); entity.setVdsGroupId(org.ovirt.engine.core.compat.Guid.createGuidFromString(rs.getString("vds_group_id"))); entity.setVdsGroupName(rs.getString("vds_group_name")); entity.setAssignedVmsCount(rs.getInt("assigned_vm_count")); entity.setRunningVmsCount(rs.getInt("vm_running_count")); entity.setMaxAssignedVmsPerUser(rs.getInt("max_assigned_vms_per_user")); return entity; }

@java.lang.Override protected void executeSave() { final org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters parameters = new org.ovirt.engine.core.common.action.AddNetworkStoragePoolParameters(getSelectedDc().getId(), getNetwork()); parameters.setVnicProfileRequired(false); if (getExport().getEntity()) { org.ovirt.engine.core.common.businessentities.Provider<?> externalProvider = getExternalProviders().getSelectedItem(); org.ovirt.engine.core.common.businessentities.network.ProviderNetwork providerNetwork = new org.ovirt.engine.core.common.businessentities.network.ProviderNetwork(); providerNetwork.setProviderId(externalProvider.getId()); getNetwork().setProvidedBy(providerNetwork); org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetworkOnProvider, parameters, addNetworkCallback(), null); } else { org.ovirt.engine.ui.frontend.Frontend.getInstance().runAction(ActionType.AddNetwork, parameters, addNetworkCallback(), null); } }

private void validateQosOverriddenInterfaces() { for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : params.getInterfaces()) { java.lang.String networkName = iface.getNetworkName(); if (networkName == null) { continue; } if (iface.isQosOverridden()) { if (!(hostNetworkQosSupported)) { addViolation(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_NOT_SUPPORTED, networkName); } org.ovirt.engine.core.bll.validator.HostNetworkQosValidator qosValidator = new org.ovirt.engine.core.bll.validator.HostNetworkQosValidator(iface.getQos()); if ((qosValidator.requiredValuesPresent()) != (org.ovirt.engine.core.bll.ValidationResult.VALID)) { addViolation(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_SETUP_NETWORKS_MISSING_VALUES, networkName); } if ((qosValidator.valuesConsistent()) != (org.ovirt.engine.core.bll.ValidationResult.VALID)) { addViolation(VdcBllMessages.ACTION_TYPE_FAILED_HOST_NETWORK_QOS_SETUP_NETWORKS_INCONSISTENT_VALUES, networkName); } } } }



@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VmTemplate> getAllWithQuery(java.lang.String query) { return getJdbcTemplate().query(query, org.ovirt.engine.core.dao.VmTemplateDAODbFacadeImpl.VMTemplateRowMapper.instance); }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.Role role) { validateParameters(role, "id|name"); if (!(role.isSetId())) { org.ovirt.engine.core.common.businessentities.roles entity = getEntity(org.ovirt.engine.core.common.businessentities.roles.class, VdcQueryType.GetRoleByName, new org.ovirt.engine.core.common.queries.MultilevelAdministrationByRoleNameParameters(role.getName()), role.getName()); role.setId(entity.getId().toString()); } return performCreation(VdcActionType.AddSystemPermission, new org.ovirt.engine.core.common.action.PermissionsOperationsParametes(newPermission(role.getId())), new org.ovirt.engine.api.restapi.resource.QueryIdResolver(org.ovirt.engine.core.common.queries.VdcQueryType.GetPermissionById, org.ovirt.engine.core.common.queries.MultilevelAdministrationByPermissionIdParameters.class)); }




private void extractModifiedInterfaces() { for (org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface nic : params.getInterfaces()) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface existingNic = getExistingIfaces().get(nic.getName()); if (existingNic != null) { java.util.Set<java.lang.String> newLabels = (org.ovirt.engine.core.utils.NetworkUtils.isLabeled(nic)) ? nic.getLabels() : java.util.Collections.<java.lang.String>emptySet(); java.util.Set<java.lang.String> existingLabels = (org.ovirt.engine.core.utils.NetworkUtils.isLabeled(existingNic)) ? existingNic.getLabels() : java.util.Collections.<java.lang.String>emptySet(); if ((!(org.apache.commons.collections.CollectionUtils.isEqualCollection(newLabels, existingLabels))) || ((nic.isQosOverridden()) != (existingNic.isQosOverridden()))) { existingNic.setLabels(newLabels); existingNic.setQosOverridden(nic.isQosOverridden()); modifiedInterfaces.add(existingNic); } } } }
@java.lang.Override public java.util.ArrayList<org.ovirt.engine.core.compat.Guid> getTaskIdList() { return super.getTaskIdList(); }


@org.ovirt.engine.ui.uicompat.DefaultMessage("LUN is already part of storage domain: {0}") java.lang.String lunAlreadyPartOfStorageDomainWarning(java.lang.String storageDomainName);
private void copyQuotaPermissions() { org.ovirt.engine.core.bll.UniquePermissionsSet permissionsToAdd = new org.ovirt.engine.core.bll.UniquePermissionsSet(); java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> vmPermissions = getDbFacade().getPermissionDao().getAllForEntity(getParameters().getQuotaId(), getCurrentUser().getId(), false); for (org.ovirt.engine.core.common.businessentities.Permissions vmPermission : vmPermissions) { permissionsToAdd.addPermission(vmPermission.getad_element_id(), vmPermission.getrole_id(), getQuotaId(), vmPermission.getObjectType()); } if (!(permissionsToAdd.isEmpty())) { java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> permissionsList = permissionsToAdd.asPermissionList(); org.ovirt.engine.core.bll.MultiLevelAdministrationHandler.addPermission(permissionsList.toArray(new org.ovirt.engine.core.common.businessentities.Permissions[permissionsList.size()])); } }
public org.ovirt.engine.core.bll.ValidationResult statusSupportedForHostUpgrade() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.VDS_CANNOT_INSTALL_STATUS_ILLEGAL).unless(org.ovirt.engine.core.common.VdcActionUtils.canExecute(java.util.Arrays.asList(host), org.ovirt.engine.core.common.businessentities.VDS.class, VdcActionType.UpgradeHost)); }
@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (target)); org.ovirt.engine.core.common.businessentities.StoragePool dataCenter = ((org.ovirt.engine.core.common.businessentities.StoragePool) (returnValue)); org.ovirt.engine.core.common.businessentities.VM vm = model.getEntity(); org.ovirt.engine.core.compat.Version minClusterVersion = vm.getVdsGroupCompatibilityVersion(); org.ovirt.engine.core.compat.Version minDcVersion = dataCenter.getCompatibilityVersion(); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().isCommandCompatible(new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.VmSnapshotListModel) (target)); model.setIsCloneVmSupported(((java.lang.Boolean) (returnValue))); } }), VdcActionType.AddVmFromSnapshot, minClusterVersion, minDcVersion); }
private org.ovirt.engine.core.common.businessentities.storage.ImageStatus checkImageStatus(org.ovirt.engine.core.common.businessentities.storage.CinderDisk removedVolume) { try { return getCinderBroker().getImageStatusByClassificationType(removedVolume); } catch (java.lang.Exception e) { log.error("An exception occured while verifying status for volume id '{0}' with the following exception: {1}.", removedVolume.getImageId(), e); return org.ovirt.engine.core.common.businessentities.storage.ImageStatus.ILLEGAL; } }
private void buildImageReference() { org.ovirt.engine.core.utils.ovf.xml.XmlNodeList list = _document.SelectNodes("//*/File", _xmlNS); for (XmlNode node : list) { org.ovirt.engine.core.common.businessentities.storage.DiskImage disk = new org.ovirt.engine.core.common.businessentities.storage.DiskImage(); if ((node.attributes.get("ovf:disk_storage_type")) != null) { java.lang.String diskStorageType = node.attributes.get("ovf:disk_storage_type").getValue(); if ((diskStorageType != null) && (diskStorageType.equals(DiskStorageType.CINDER.name()))) { disk = new org.ovirt.engine.core.common.businessentities.storage.CinderDisk(); } } disk.setImageId(new org.ovirt.engine.core.compat.Guid(node.attributes.get("ovf:id").getValue())); disk.setId(org.ovirt.engine.core.utils.ovf.OvfParser.GetImageGrupIdFromImageFile(node.attributes.get("ovf:href").getValue())); disk.setActive(true); disk.setImageStatus(ImageStatus.OK); disk.setDescription(node.attributes.get("ovf:description").getValue()); _images.add(disk); } }
private boolean initGlusterHost() { glusterHostUuidFound = true; if (org.ovirt.engine.core.common.gluster.GlusterFeatureSupported.glusterHostUuidSupported(getVdsGroup().getcompatibility_version())) { if (!(saveGlusterHostUuid())) { glusterHostUuidFound = false; setNonOperational(NonOperationalReason.GLUSTER_HOST_UUID_NOT_FOUND, null); } } return (glusterHostUuidFound) && (initGlusterPeerProcess()); }

@org.junit.Test public void validateWithDirectLunIdAndInvalidVds() { command.getParameters().setDirectLunId(org.ovirt.engine.core.compat.Guid.newGuid()); when(hostValidator.hostExists()).thenReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.VDS_INVALID_SERVER_ID)); org.ovirt.engine.core.bll.ValidateTestUtils.runAndAssertValidateFailure(command, EngineMessage.VDS_INVALID_SERVER_ID); }
public void OnSetupNetworks() { final org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel model = ((org.ovirt.engine.ui.uicommonweb.models.hosts.HostSetupNetworksModel) (getWindow())); int conectivityTimeout = 120; org.ovirt.engine.core.common.action.SetupNetworksParameters params = new org.ovirt.engine.core.common.action.SetupNetworksParameters(); params.setInterfaces(model.getAllNics()); params.setCheckConnectivity(((java.lang.Boolean) (model.getCheckConnectivity().getEntity()))); params.setConectivityTimeout(conectivityTimeout); params.setVdsId(getEntity().getId()); org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback callback = new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void Executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValueBase = result.getReturnValue(); if ((returnValueBase != null) && (returnValueBase.getSucceeded())) { org.ovirt.engine.ui.uicommonweb.models.EntityModel commitChanges = model.getCommitChanges(); if (((java.lang.Boolean) (commitChanges.getEntity()))) { SaveNetworkConfig(getEntity().getId(), org.ovirt.engine.ui.uicommonweb.models.hosts.HostInterfaceListModel.this); } else { model.StopProgress(); Cancel(); Search(); } } else { model.StopProgress(); } } }; setcurrentModel(model); model.StartProgress(null); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.SetupNetworks, params, callback); }


@java.lang.Override protected void updateSingleNic(org.ovirt.engine.core.utils.ovf.xml.XmlNode node, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface iface) { super.updateSingleNic(node, iface); iface.setMacAddress(((node.SelectSingleNode("rasd:MACAddress", _xmlNS)) != null ? node.SelectSingleNode("rasd:MACAddress", _xmlNS).innerText : "")); }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = true; synchronized(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand._lockObject) { if (Guid.Empty.equals(getVmToAttach(org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getParameters().getVmPoolId()))) { addCanDoActionMessage(EngineMessage.ACTION_TYPE_FAILED_NO_AVAILABLE_POOL_VMS); returnValue = false; } } if (returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VM> vmsForUser = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmDao().getAllForUser(getAdUserId()); int vmCount = 0; for (org.ovirt.engine.core.common.businessentities.VM vm : vmsForUser) { if (((vm.getVmPoolId()) != null) && (getVmPoolId().equals(vm.getVmPoolId()))) { vmCount++; } } int limit = org.ovirt.engine.core.bll.AttachUserToVmFromPoolAndRunCommand.getVmPool().getMaxAssignedVmsPerUser(); if (vmCount >= limit) { addCanDoActionMessage(EngineMessage.VM_POOL_CANNOT_ATTACH_TO_MORE_VMS_FROM_POOL); returnValue = false; } } if (!returnValue) { setActionMessageParameters(); } return returnValue; }
@java.lang.Override protected void buildVmSoundDevices() { java.util.List<org.ovirt.engine.core.common.businessentities.VmDevice> vmSoundDevices = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVmDeviceDao().getVmDeviceByVmIdAndType(vm.getId(), VmDeviceGeneralType.SOUND); if (!(vmSoundDevices.isEmpty())) { createInfo.put(VdsProperties.soundDevice, osRepository.getSoundDevice(vm.getStaticData().getOsId(), vm.getVdsGroupCompatibilityVersion())); } }

@org.ovirt.engine.api.restapi.types.Mapping(from = org.ovirt.engine.api.model.Host.class, to = org.ovirt.engine.core.common.businessentities.VdsStatic.class) public static org.ovirt.engine.core.common.businessentities.VdsStatic map(org.ovirt.engine.api.model.Host model, org.ovirt.engine.core.common.businessentities.VdsStatic template) { org.ovirt.engine.core.common.businessentities.VdsStatic entity = (template != null) ? template : new org.ovirt.engine.core.common.businessentities.VdsStatic(); if (model.isSetId()) { entity.setId(new org.ovirt.engine.core.compat.Guid(model.getId())); } if (model.isSetName()) { entity.setvds_name(model.getName()); } if ((model.isSetCluster()) && (model.getCluster().isSetId())) { entity.setvds_group_id(new org.ovirt.engine.core.compat.Guid(model.getCluster().getId())); } if (model.isSetAddress()) { entity.sethost_name(model.getAddress()); } if ((model.isSetPort()) && ((model.getPort()) > 0)) { entity.setport(model.getPort()); } else { entity.setport(org.ovirt.engine.api.restapi.types.HostMapper.DEFAULT_VDSM_PORT); } if (model.isSetPowerManagement()) { entity = org.ovirt.engine.api.restapi.types.HostMapper.map(model.getPowerManagement(), entity); } if (model.isSetStorageManager()) { if ((model.getStorageManager().getPriority()) != null) { entity.setVdsSpmPriority(model.getStorageManager().getPriority()); } } if ((model.isSetDisplay()) && (model.getDisplay().isSetAddress())) { entity.setConsoleAddress(("".equals(model.getDisplay().getAddress()) ? null : model.getDisplay().getAddress())); } return entity; }
@org.junit.Test public void checkRemoveIscsiConnectionDomainsAndDisksExist() { parameters.setStorageServerConnection(iSCSIConnection); when(storageServerConnectionDao.get(iSCSIConnection.getid())).thenReturn(iSCSIConnection); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = new java.util.ArrayList<>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("3600144f09dbd05000000517e730b1212"); lun1.setStorageDomainName("storagedomain1"); lun1.setvolume_group_id("G95OWd-Wvck-vftu-pMq9-9SAC-NF3E-ulDPsQ"); luns.add(lun1); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id("3600144f09dbd05000000517e730b1212"); lun2.setStorageDomainName(""); lun2.setvolume_group_id(""); lun2.setDiskAlias("disk2"); luns.add(lun2); when(lunDao.getAllForStorageServerConnection(iSCSIConnection.getid())).thenReturn(luns); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, EngineMessage.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_STORAGE_DOMAINS_AND_DISKS); }

@java.lang.Override public void onValueChange(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> event) { getView().selectSpiceImplementation(SpiceConsoleModel.ClientConsoleMode.Html5); }
public void prepare1() { org.ovirt.engine.ui.uicompat.PreparingEnlistment enlistment = ((org.ovirt.engine.ui.uicompat.PreparingEnlistment) (context.enlistment)); org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext enlistmentContext = ((org.ovirt.engine.ui.uicommonweb.models.hosts.EnlistmentContext) (context.enlistment.getContext())); org.ovirt.engine.ui.uicommonweb.models.hosts.HostListModel model = enlistmentContext.getModel(); org.ovirt.engine.core.common.businessentities.VDS host = ((org.ovirt.engine.core.common.businessentities.VDS) (model.getSelectedItem())); if (!(enlistmentContext.getClusterId().equals(host.getVdsGroupId()))) { enlistmentContext.setOldClusterId(host.getVdsGroupId()); org.ovirt.engine.core.common.action.ChangeVDSClusterParameters parameters = new org.ovirt.engine.core.common.action.ChangeVDSClusterParameters(enlistmentContext.getClusterId(), host.getId()); parameters.setCorrelationId(getCorrelationId()); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.ChangeVDSCluster, parameters, new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { org.ovirt.engine.core.common.action.VdcReturnValueBase returnValue = result.getReturnValue(); context.changeVDSClusterReturnValue = returnValue; prepare2(); } }); } else { context.enlistment = null; enlistment.Prepared(); } }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Clone") java.lang.String cloneTitle();
private static void getTotalCpuMemCount(org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary cpuSummary, org.ovirt.engine.ui.frontend.server.dashboard.GlobalUtilizationResourceSummary memSummary, javax.sql.DataSource dwhDataSource) throws java.sql.SQLException, org.ovirt.engine.ui.frontend.server.dashboard.DashboardDataException { org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO dao = new org.ovirt.engine.ui.frontend.server.dashboard.dao.HostDwhDAO(dwhDataSource); org.ovirt.engine.ui.frontend.server.dashboard.models.ResourcesTotal total = dao.getTotalCpuMemCount(); cpuSummary.setPhysicalTotal(total.getCpuTotal()); memSummary.setPhysicalTotal(((total.getMemTotal()) / 1024)); }

@org.ovirt.engine.ui.frontend.DefaultStringValue("Cannot destroy the master Storage Domain from the Data Center without another active Storage Domain to take its place.\n-Either activate another Storage Domain in the Data Center, or remove the Data Center.\n-If you have problems with master Storage Domain, consider recovery process.") java.lang.String ERROR_CANNOT_DESTROY_LAST_STORAGE_DOMAIN();

public org.ovirt.engine.core.bll.ValidationResult disksInStatus(org.ovirt.engine.core.common.businessentities.storage.ImageStatus applicableStatus, org.ovirt.engine.core.common.errors.VdcBllMessages message) { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { if ((diskImage.getImageStatus()) != applicableStatus) { return new org.ovirt.engine.core.bll.ValidationResult(message, java.lang.String.format("$status %s", applicableStatus.name())); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void Edit() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel model = new org.ovirt.engine.ui.uicommonweb.models.vms.VmInterfaceModel(); model.getMAC().setIsAvailable(false); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().editNetworkInterfaceTitle()); model.setHashName("edit_network_interface_tmps"); org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.GetClusterNetworkList(new org.ovirt.engine.ui.frontend.AsyncQuery(this, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void OnSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel vmInterfaceListModel = ((org.ovirt.engine.ui.uicommonweb.models.templates.TemplateInterfaceListModel) (target)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network> network_list = (returnValue != null) ? ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network>) (returnValue)) : new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.Network>(); vmInterfaceListModel.PostGetClusterNetworkList_Edit(network_list); } }), getEntityStronglyTyped().getvds_group_id()); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel userPortalListModel1 = ((org.ovirt.engine.ui.uicommonweb.models.userportal.UserPortalListModel) (model)); org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel unitVmModel = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (userPortalListModel1.getWindow())); org.ovirt.engine.core.common.action.AddVmFromTemplateParameters param = new org.ovirt.engine.core.common.action.AddVmFromTemplateParameters(gettempVm(), unitVmModel.getDisksAllocationModel().getImageToDestinationDomainMap(), org.ovirt.engine.core.compat.Guid.Empty); param.setMakeCreatorExplicitOwner(true); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); parameters.add(param); org.ovirt.engine.ui.frontend.Frontend.RunMultipleAction(VdcActionType.AddVmFromTemplate, parameters, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult a) { stopProgress(a.getState()); cancel(); } }, this); }

@java.lang.Override protected void onBind() { super.onBind(); registerHandler(getTable().getSelectionModel().addSelectionChangeHandler(( event) -> { org.ovirt.engine.ui.webadmin.section.main.presenter.modelProvider.setSelectedItems(getSelectedItems()); fireTableSelectionChangeEvent(); if (!(isVisible())) { handlePlaceTransition(); } })); org.ovirt.engine.ui.webadmin.section.main.presenter.AbstractMainTabWithDetailsPresenter.getView().setDetailPlaceTransitionHandler(this); this.breadCrumbs.setSelectionModel(getTable().getSelectionModel()); }





public java.util.List<java.lang.String> getClusterPoliciesNamesByPolicyUnitId(org.ovirt.engine.core.compat.Guid policyUnitId) { java.util.List<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit = policyUnits.get(policyUnitId).getPolicyUnit(); if (policyUnit != null) { for (org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy : policyMap.values()) { switch (policyUnit.getPolicyUnitType()) { case Filter : if (clusterPolicy.getFilters().contains(policyUnitId)) { list.add(clusterPolicy.getName()); } break; case Weight : for (org.ovirt.engine.core.common.utils.Pair<org.ovirt.engine.core.compat.Guid, java.lang.Integer> pair : clusterPolicy.getFunctions()) { if (pair.getFirst().equals(policyUnitId)) { list.add(clusterPolicy.getName()); break; } } break; case LoadBalancing : if (policyUnitId.equals(clusterPolicy.getBalance())) { list.add(clusterPolicy.getName()); } break; default : break; } } } return list; }
public org.ovirt.engine.core.bll.ValidationResult validate() { java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = getAttachmentsToConfigure(); org.ovirt.engine.core.bll.ValidationResult vr = org.ovirt.engine.core.bll.ValidationResult.VALID; vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NicLabelValidator(params, existingInterfacesMap, bondsMap, hostSetupNetworksValidatorHelper).validate(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validRemovedNetworkAttachments(); vr = (skipValidation(vr)) ? vr : validNewOrModifiedBonds(); vr = (skipValidation(vr)) ? vr : validRemovedBonds(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : attachmentsDontReferenceSameNetworkDuplicately(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : networksUniquelyConfiguredOnHost(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateNetworkExclusiveOnNics(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : new org.ovirt.engine.core.bll.network.host.NetworkMtuValidator(networkBusinessEntityMap).validateMtu(attachmentsToConfigure); vr = (skipValidation(vr)) ? vr : validateCustomProperties(); vr = (skipValidation(vr)) ? vr : validateQos(attachmentsToConfigure); return vr; }

@org.ovirt.engine.ui.webadmin.DefaultStringValue("KSM control") java.lang.String ksmLabelTitle();



@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Tags> getAllForParent(org.ovirt.engine.core.compat.Guid id) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("parent_id", id); return getCallsHandler().executeReadList("GettagsByparent_id", org.ovirt.engine.core.dao.TagDAODbFacadeImpl.TagRowMapper.instance, parameterSource); }
public java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> executeAsyncCommand(final org.ovirt.engine.core.common.action.VdcActionType actionType, final org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, final org.ovirt.engine.core.bll.context.CommandContext cmdContext) { final org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameters, cmdContext); command.persistCommand(command.getParameters().getParentCommand(), cmdContext, true); org.ovirt.engine.core.bll.tasks.interfaces.CommandCallBack callBack = command.getCallBack(); if (callBack != null) { cmdCallBackMap.put(command.getCommandId(), callBack); } java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> retVal; try { retVal = org.ovirt.engine.core.bll.tasks.CommandExecutor.executor.submit(new java.util.concurrent.Callable<org.ovirt.engine.core.common.action.VdcReturnValueBase>() { @java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase call() throws java.lang.Exception { return executeCommand(command, cmdContext); } }); } catch (java.util.concurrent.RejectedExecutionException ex) { command.setCommandStatus(CommandStatus.FAILED); org.ovirt.engine.core.bll.tasks.CommandExecutor.log.errorFormat("Failed to submit command to executor service, command {0} status has been set to FAILED", command.getCommandId().toString()); retVal = new org.ovirt.engine.core.bll.tasks.CommandExecutor.RejectedExecutionFuture(); } return retVal; }


private void onRemove() { org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = ((org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel) (getWindow())); java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> params = new java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase>(); for (java.lang.Object item : getSelectedItems()) { params.add(new org.ovirt.engine.core.common.action.RemoveIscsiBondParameters(((org.ovirt.engine.core.common.businessentities.IscsiBond) (item)).getId())); } model.startProgress(null); org.ovirt.engine.ui.frontend.Frontend.getInstance().runMultipleAction(VdcActionType.RemoveIscsiBond, params, new org.ovirt.engine.ui.uicompat.IFrontendMultipleActionAsyncCallback() { @java.lang.Override public void executed(org.ovirt.engine.ui.uicompat.FrontendMultipleActionAsyncResult result) { org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterIscsiBondListModel localModel = ((org.ovirt.engine.ui.uicommonweb.models.datacenters.DataCenterIscsiBondListModel) (result.getState())); localModel.stopProgress(); cancel(); } }, this); }
@java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName; if ("AllowClusterWithVirtGlusterEnabled".equals(propName)) { getView().allowClusterWithVirtGlusterEnabled(model.getAllowClusterWithVirtGlusterEnabled()); } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Time Zone is not changeable for Linux VMs") java.lang.String timeZoneNotChangeableForLinuxVms();
public static boolean checkImageConfiguration(org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomain, org.ovirt.engine.core.common.businessentities.storage.DiskImageBase diskInfo, java.util.List<java.lang.String> messages) { if (!(org.ovirt.engine.core.bll.ImagesHandler.checkImageConfiguration(storageDomain, diskInfo.getVolumeType(), diskInfo.getVolumeFormat()))) { messages.add(VdcBllMessages.ACTION_TYPE_FAILED_DISK_CONFIGURATION_NOT_SUPPORTED.toString()); messages.add(java.lang.String.format("$%1$s %2$s", "volumeFormat", diskInfo.getVolumeFormat())); messages.add(java.lang.String.format("$%1$s %2$s", "volumeType", diskInfo.getVolumeType())); return false; } return true; }
protected org.ovirt.engine.core.utils.lock.EngineLock lockVmDiskHotPlugWithWait() { org.ovirt.engine.core.utils.lock.EngineLock vmDiskHotPlugEngineLock = new org.ovirt.engine.core.utils.lock.EngineLock(); vmDiskHotPlugEngineLock.setExclusiveLocks(java.util.Collections.singletonMap(org.ovirt.engine.core.bll.AbstractDiskVmCommand.getVmId().toString(), org.ovirt.engine.core.bll.LockMessagesMatchUtil.makeLockingPair(LockingGroup.VM_DISK_HOT_PLUG, VdcBllMessages.ACTION_TYPE_FAILED_OBJECT_LOCKED))); org.ovirt.engine.core.bll.AbstractDiskVmCommand.getLockManager().acquireLockWait(vmDiskHotPlugEngineLock); return vmDiskHotPlugEngineLock; }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) throws java.io.IOException, javax.servlet.ServletException { java.lang.Integer applicationMode = getApplicationMode(request.getSession().getId()); request.setAttribute(org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_APPLICATION_MODE, getApplicationModeObject(applicationMode)); java.util.List<org.ovirt.engine.ui.frontend.server.gwt.plugin.PluginData> pluginData = getPluginData(); request.setAttribute(org.ovirt.engine.ui.frontend.server.gwt.WebAdminHostPageServlet.ATTR_PLUGIN_DEFS, getPluginDefinitionsArray(pluginData)); super.doGet(request, response); }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Edit Host") java.lang.String editHostTitle();
private java.util.List<org.ovirt.engine.core.common.businessentities.network.Network> getNetworks(java.lang.String clusterId) { org.ovirt.engine.core.compat.NGuid dataCenterId = getEntity(org.ovirt.engine.core.common.businessentities.VDSGroup.class, VdcQueryType.GetVdsGroupById, new org.ovirt.engine.core.common.queries.GetVdsGroupByIdParameters(asGuid(clusterId)), null).getStoragePoolId(); org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters(asGuid(dataCenterId)); return getBackendCollection(VdcQueryType.GetAllNetworks, params); }
public static void main(java.lang.String... args) { org.ovirt.engine.core.config.EngineConfigCLIParser parser = null; try { parser = new org.ovirt.engine.core.config.EngineConfigCLIParser(); parser.parse(args); org.ovirt.engine.core.config.EngineConfigMap argsMap = parser.getEngineConfigMap(); org.ovirt.engine.core.config.EngineConfigExecutor.setupLogging(argsMap.getLog4jConfig(), argsMap.getLogFile(), argsMap.getLogLevel()); } catch (java.lang.Throwable t) { java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } try { org.ovirt.engine.core.config.EngineConfig.getInstance().setUpAndExecute(parser); } catch (java.lang.Throwable t) { org.apache.log4j.Logger.getLogger(org.ovirt.engine.core.config.EngineConfigExecutor.class).debug("Exiting with error: ", t); java.lang.System.out.println(t.getMessage()); java.lang.System.exit(1); } }

protected boolean canAddVm(java.util.ArrayList<java.lang.String> reasons, java.util.Collection<org.ovirt.engine.core.common.businessentities.storage_domains> destStorages) { org.ovirt.engine.core.common.businessentities.VmStatic vmStaticFromParams = org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVmStaticData(); boolean returnValue = canAddVm(reasons, vmStaticFromParams.getVmName(), org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId().getValue(), vmStaticFromParams.getPriority()); if (returnValue) { java.util.List<org.ovirt.engine.core.utils.vmproperties.VmPropertiesUtils.ValidationError> validationErrors = validateCustomProperties(vmStaticFromParams); if (!(validationErrors.isEmpty())) { org.ovirt.engine.core.bll.VmHandler.handleCustomPropertiesError(validationErrors, reasons); returnValue = false; } } if (returnValue && (shouldCheckSpaceInStorageDomains())) { if (!(org.ovirt.engine.core.bll.AddVmCommand.getStoragePoolId().equals(getStoragePoolIdFromSourceImageContainer()))) { reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_POOL_NOT_MATCH.toString()); returnValue = false; } else { for (org.ovirt.engine.core.common.businessentities.storage_domains domain : destStorages) { if (!(org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.isWithinThresholds(domain))) { returnValue = false; reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW.toString()); break; } else if (!(org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.hasSpaceForRequest(domain, getNeededDiskSize(domain.getId())))) { returnValue = false; reasons.add(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW.toString()); break; } } } } if (returnValue) { returnValue = isDedicatedVdsOnSameCluster(vmStaticFromParams); } return returnValue; }
private boolean validateStorage() { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> vmDisksList = getDisksListForChecks(); vmDisksList = org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.getDisksDummiesForStorageAllocations(vmDisksList); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> allDisks = new java.util.ArrayList(vmDisksList); java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> memoryDisksList = null; if (org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getParameters().isSaveMemory()) { memoryDisksList = org.ovirt.engine.core.bll.memory.MemoryUtils.createDiskDummies(org.ovirt.engine.core.bll.snapshots.CreateAllSnapshotsFromVmCommand.getVm().getTotalMemorySizeInBytes(), MemoryUtils.METADATA_SIZE_IN_BYTES); if (Guid.Empty.equals(getStorageDomainIdForVmMemory(memoryDisksList))) { return failValidation(EngineMessage.ACTION_TYPE_FAILED_NO_SUITABLE_DOMAIN_FOUND); } allDisks.addAll(memoryDisksList); } org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator sdValidator = createMultipleStorageDomainsValidator(allDisks); if (((!(validate(sdValidator.allDomainsExistAndActive()))) || (!(validate(sdValidator.allDomainsWithinThresholds())))) || (!(validateCinder()))) { return false; } if (memoryDisksList == null) { return validate(sdValidator.allDomainsHaveSpaceForNewDisks(vmDisksList)); } return validate(sdValidator.allDomainsHaveSpaceForAllDisks(vmDisksList, memoryDisksList)); }


@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append("{ id: "); sb.append(this.getid()); sb.append(", connection: "); sb.append(this.getconnection()); sb.append(", iqn: "); sb.append(this.getiqn()); sb.append(", vfsType: "); sb.append(this.getVfsType()); sb.append(", mountOptions: "); sb.append(this.getMountOptions()); sb.append(", nfsVersion: "); sb.append(this.getNfsVersion()); sb.append(", nfsRetrans: "); sb.append(this.getNfsRetrans()); sb.append(", nfsTimeo: "); sb.append(this.getNfsTimeo()); if ((getIface()) != null) { sb.append(", iface: "); sb.append(this.getIface()); } sb.append(" };"); return sb.toString(); }

@java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getJobMessageProperties() { if ((jobProperties) == null) { jobProperties = super.getJobMessageProperties(); org.ovirt.engine.core.common.businessentities.Snapshot snapshot = getSnapshotDao().get(org.ovirt.engine.core.bll.TryBackToAllSnapshotsOfVmCommand.getParameters().getDstSnapshotId()); if (snapshot != null) { jobProperties.put(VdcObjectType.Snapshot.name().toLowerCase(), snapshot.getDescription()); } } return jobProperties; }
public org.ovirt.engine.core.bll.ValidationResult notLabeled() { return org.ovirt.engine.core.bll.ValidationResult.failWith(VdcBllMessages.ACTION_TYPE_FAILED_NETWORK_ALREADY_LABELED).when(org.ovirt.engine.core.utils.NetworkUtils.isLabeled(network)); }
@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((snapshotId) == null ? 0 : snapshotId.hashCode()); result = (prime * result) + ((clusterId) == null ? 0 : clusterId.hashCode()); result = (prime * result) + ((volumeId) == null ? 0 : volumeId.hashCode()); result = (prime * result) + ((snapshotName) == null ? 0 : snapshotName.hashCode()); result = (prime * result) + ((status) == null ? 0 : status.hashCode()); result = (prime * result) + ((description) == null ? 0 : description.hashCode()); result = (prime * result) + ((status) == null ? 0 : status.hashCode()); return result; }

@java.lang.Override public java.lang.String toString() { return java.lang.String.format("hostId = %s, deviceName = %s", getHostId(), getDeviceName()); }

private void formatAndSetErrorMessage(java.lang.String message) { if (message != null) { int urlIndex = message.indexOf("http"); if (urlIndex != (-1)) { java.lang.String beforeURL = message.substring(0, urlIndex); java.lang.String url = message.substring(urlIndex); java.lang.StringBuilder htmlPart = new java.lang.StringBuilder(); htmlPart.append(beforeURL).append("<a href=\"").append(url).append("\" target=\"_blank\">").append(url).append("</a>"); message = htmlPart.toString(); } } org.ovirt.engine.ui.common.presenter.AbstractLoginPopupPresenterWidget.getView().setErrorMessageHtml(message); }

public java.lang.String allocateNewMac() { java.lang.String mac = null; org.ovirt.engine.core.bll.network.MacPoolManager.log.info("MacPoolManager::allocateNewMac entered"); lockObj.writeLock().lock(); try { if (!(initialized)) { logInitializationError("Failed to allocate new Mac address."); throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.MAC_POOL_NOT_INITIALIZED); } if (availableMacs.isEmpty()) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.MAC_POOL_NO_MACS_LEFT); } java.util.Iterator<java.lang.String> my = availableMacs.iterator(); mac = my.next(); commitNewMac(mac); } finally { lockObj.writeLock().unlock(); } org.ovirt.engine.core.bll.network.MacPoolManager.log.infoFormat("MacPoolManager::allocateNewMac allocated mac = '{0}", mac); return mac; }
@java.lang.Override public javax.ws.rs.core.Response start(org.ovirt.engine.api.model.Action action) { org.ovirt.engine.core.common.action.RunVmParams params; org.ovirt.engine.core.common.action.VdcActionType actionType; if (action.isSetVm()) { org.ovirt.engine.api.model.VM vm = action.getVm(); validateEnums(org.ovirt.engine.api.model.VM.class, vm); actionType = org.ovirt.engine.core.common.action.VdcActionType.RunVmOnce; params = createRunVmOnceParams(vm); } else { actionType = org.ovirt.engine.core.common.action.VdcActionType.RunVm; params = new org.ovirt.engine.core.common.action.RunVmParams(guid); } if ((action.isSetPause()) && (action.isPause())) { params.setRunAndPause(true); } return doAction(actionType, params, action); }
protected boolean validateUniqueVmName() { return org.ovirt.engine.core.bll.VmHandler.isVmWithSameNameExistStatic(org.ovirt.engine.core.bll.ImportVmCommandBase.getVm().getName(), org.ovirt.engine.core.bll.ImportVmCommandBase.getStoragePoolId()) ? failCanDoAction(VdcBllMessages.VM_CANNOT_IMPORT_VM_NAME_EXISTS) : true; }

void initListBoxEditors() { isoEditor = new org.ovirt.engine.ui.common.widget.editor.ListModelListBoxEditor<java.lang.Object>(new org.ovirt.engine.ui.common.widget.renderer.NullSafeRenderer<java.lang.Object>() { @java.lang.Override public java.lang.String renderNullSafe(java.lang.Object object) { org.ovirt.engine.core.compat.RpmVersion version = ((org.ovirt.engine.core.compat.RpmVersion) (object)); return version.getRpmName(); } }); }
@java.lang.Override protected void endWithFailure() { endCommand(); org.ovirt.engine.core.bll.storage.DeactivateStorageDomainWithOvfUpdateCommand.setSucceeded(true); }
public org.ovirt.engine.ui.uicommonweb.models.ListModel<org.ovirt.engine.core.common.businessentities.network.NetworkQoS> getQos() { return qos; }
private void createImageForVmMetaData() { org.ovirt.engine.core.common.vdscommands.VDSReturnValue retVal = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.CreateImage, new org.ovirt.engine.core.common.vdscommands.CreateImageVDSCommandParameters(storagePool.getId(), storageDomainId, vmConfImageGroupId, MemoryUtils.META_DATA_SIZE_IN_BYTES, org.ovirt.engine.core.common.businessentities.storage.VolumeType.Sparse, org.ovirt.engine.core.common.businessentities.storage.VolumeFormat.COW, vmConfVolumeId, "")); if (!(retVal.getSucceeded())) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.VolumeCreationError, "Failed to create image for vm configuration!"); } org.ovirt.engine.core.compat.Guid taskId = enclosingCommand.persistAsyncTaskPlaceHolder(org.ovirt.engine.core.bll.memory.LiveSnapshotMemoryImageBuilder.CREATE_IMAGE_FOR_VM_TASK_KEY); org.ovirt.engine.core.compat.Guid guid = enclosingCommand.createTask(taskId, retVal.getCreationInfo(), enclosingCommand.getActionType()); enclosingCommand.getTaskIdList().add(guid); }
@java.lang.Override protected void initDetailModels() { super.initDetailModels(); setBrickListModel(new org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeBrickListModel()); org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); list.add(new org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeGeneralModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeParameterListModel()); list.add(getBrickListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.configure.PermissionListModel()); list.add(new org.ovirt.engine.ui.uicommonweb.models.gluster.VolumeEventListModel()); setDetailModels(list); }

public org.ovirt.engine.core.bll.ValidationResult vmNotHavingPassthroughVnics() { for (org.ovirt.engine.core.common.businessentities.VM vm : vms) { java.util.List<org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> vnics = getDbFacade().getVmNetworkInterfaceDao().getAllForVm(vm.getId()); java.util.List<java.lang.String> passthroughVnicNames = vnics.stream().filter(VmNic::isPassthrough).map(VmNic::getName).collect(java.util.stream.Collectors.toList()); if (!(passthroughVnicNames.isEmpty())) { java.util.Collection<java.lang.String> replacements = org.ovirt.engine.core.utils.ReplacementUtils.replaceWith("interfaces", passthroughVnicNames); replacements.add(java.lang.String.format("$vmName %s", vm.getName())); return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.EngineMessage.ACTION_TYPE_FAILED_MIGRATION_OF_PASSTHROUGH_VNICS_IS_NOT_SUPPORTED, replacements); } } return org.ovirt.engine.core.bll.ValidationResult.VALID; }

public org.ovirt.engine.api.restapi.resource.BackendDataCenterClustersResource getParent() { return parent; }
private java.util.List<org.ovirt.engine.core.common.businessentities.AuditLogEventSubscriber> getEventSubscribers(boolean dbDown) { java.util.List<org.ovirt.engine.core.common.businessentities.AuditLogEventSubscriber> eventSubscribers = new java.util.ArrayList<>(); if (dbDown) { for (org.ovirt.engine.core.notifier.subscribers.EventSubscribersProvider eventSubscribersProvider : dbDownEventSubscribersProviders) { eventSubscribers.addAll(eventSubscribersProvider.provide()); } } else { for (org.ovirt.engine.core.notifier.subscribers.EventSubscribersProvider eventSubscribersProvider : eventSubscribersProviders) { eventSubscribers.addAll(eventSubscribersProvider.provide()); } } org.ovirt.engine.core.notifier.NotificationService.log.debug(java.lang.String.format("%d subscribers read from %d providers.", eventSubscribers.size(), (dbDown ? dbDownEventSubscribersProviders.size() : eventSubscribersProviders.size()))); return eventSubscribers; }


public static java.lang.String decryptPassword(java.lang.String password) { if (org.apache.commons.lang.StringUtils.isEmpty(password)) { return password; } java.lang.String keyFile = org.ovirt.engine.core.common.config.Config.resolveKeyStorePath(); java.lang.String passwd = org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.keystorePass, Config.DefaultConfigurationVersion); java.lang.String alias = org.ovirt.engine.core.common.config.Config.<java.lang.String>GetValue(ConfigValues.CertAlias, Config.DefaultConfigurationVersion); try { return org.ovirt.engine.core.engineencryptutils.EncryptionUtils.decrypt(((java.lang.String) (password)), keyFile, passwd, alias); } catch (java.lang.Exception e) { org.ovirt.engine.core.dao.VdsStaticDAODbFacadeImpl.log.debugFormat("Failed to decrypt password, error message: {0}", e.getMessage()); return password; } }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { final boolean isVirtGlusterAllowed = ((java.lang.Boolean) (returnValue)); org.ovirt.engine.ui.frontend.AsyncQuery asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); asyncQuery.setModel(clusterModel); asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model1, java.lang.Object result) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity> volumes = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity>) (result)); if ((volumes.size()) > 0) { clusterModel.getEnableGlusterService().setIsChangable(false); if (!isVirtGlusterAllowed) { clusterModel.getEnableOvirtService().setIsChangable(false); } } } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getInstance().getVolumeList(asyncQuery, cluster.getName()); if ((cluster.getGroupHostsAndVms().getVms()) > 0) { clusterModel.getEnableOvirtService().setIsChangable(false); if (!isVirtGlusterAllowed) { clusterModel.getEnableGlusterService().setIsChangable(false); } } if ((cluster.getGroupHostsAndVms().getHosts()) > 0) { clusterModel.getEnableTrustedService().setIsChangable(false); clusterModel.getEnableTrustedService().setChangeProhibitionReason(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().trustedServiceDisabled()); } }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.Permission> getTreeForEntity(org.ovirt.engine.core.compat.Guid id, org.ovirt.engine.core.common.VdcObjectType type, long engineSessionSeqId, boolean isFiltered, int appMode) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("id", id).addValue("object_type_id", type.getValue()).addValue("engine_session_seq_id", engineSessionSeqId).addValue("is_filtered", isFiltered).addValue("app_mode", appMode); return getCallsHandler().executeReadList("GetPermissionsTreeByEntityId", org.ovirt.engine.core.dao.PermissionDAODbFacadeImpl.PermissionRowMapper.instance, parameterSource); }
@java.lang.Override public java.lang.String renderNullSafe(org.ovirt.engine.core.common.businessentities.ArchitectureType object) { return object.toString(); }

@java.lang.Override protected void endWithFailure() { if (isStatelessSnapshotExistsForVm()) { org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = org.ovirt.engine.core.bll.RunVmCommand.getBackend().endAction(VdcActionType.CreateAllSnapshotsFromVm, buildCreateSnapshotParametersForEndAction(), org.ovirt.engine.core.bll.RunVmCommand.cloneContext().withoutExecutionContext().withoutLock()); setSucceeded(vdcReturnValue.getSucceeded()); } else { super.endWithFailure(); } }

public java.util.Map activateStorageDomain(java.lang.String sdUUID, java.lang.String spUUID) { try { log.info("Activating storage domain, spUUID: {} sdUUID: {}", new java.lang.Object[]{ spUUID, sdUUID }); final org.ovirt.vdsmfake.domain.DataCenter dataCenter = getDataCenterById(spUUID); final org.ovirt.vdsmfake.domain.StorageDomain storageDomain = dataCenter.getStorageDomainMap().get(sdUUID); if (storageDomain != null) { storageDomain.setDomainStatus(StorageDomain.DomainStatus.ACTIVE); updateStorageDomain(storageDomain); } return getOKStatus(); } catch (java.lang.Exception e) { throw error(e); } }
private java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> getAttachmentsToConfigure(org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Bond> removedBonds) { java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsToConfigure = new java.util.HashMap(org.ovirt.engine.core.common.businessentities.Entities.businessEntitiesById(existingAttachments)); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment removedAttachment : params.getRemovedNetworkAttachments()) { attachmentsToConfigure.remove(removedAttachment.getId()); } java.util.List<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> newAttachments = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : params.getNetworkAttachments()) { if ((attachment.getId()) == null) { newAttachments.add(attachment); continue; } if (removedBonds.containsKey(attachment.getNicName())) { attachmentsToConfigure.put(attachment.getId(), attachment); } else { attachmentsToConfigure.remove(attachment.getId()); } } java.util.Collection<org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> candidateAttachments = new java.util.ArrayList(attachmentsToConfigure.values()); candidateAttachments.addAll(newAttachments); return candidateAttachments; }
private void clusterSelectedItemChanged() { if ((getCluster().getSelectedItem()) != null) { getAddBricksCommand().setIsExecutionAllowed(true); } else { getAddBricksCommand().setIsExecutionAllowed(false); } setBricks(new org.ovirt.engine.ui.uicommonweb.models.ListModel()); }
@java.lang.Override public org.ovirt.engine.core.common.AuditLogType getAuditLogTypeValue() { return org.ovirt.engine.core.bll.storage.DetachStorageDomainFromPoolCommand.getSucceeded() ? org.ovirt.engine.core.common.AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL : org.ovirt.engine.core.common.AuditLogType.USER_DETACH_STORAGE_DOMAIN_FROM_POOL_FAILED; }

@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append("Subnet [id=").append(getId()).append(", name=").append(getName()).append(", cidr=").append(getCidr()).append(", ipVersion=").append(getIpVersion()).append(", externalNetwork=").append(getExternalNetwork()).append(", gateway=").append(getGateway()).append(", dnsServers=").append(getDnsServers()).append("]"); return builder.toString(); }
private void addGhostEntry() { addEntry(createGhostValue()); }


@java.lang.Override protected void postConstruct() { super.postConstruct(); T parameters = getParameters(); setVmId(parameters.getContainerId()); setVm(parameters.getVm()); setVdsGroupId(parameters.getVdsGroupId()); if (((parameters.getVm()) != null) && ((getVm().getDiskMap()) != null)) { imageList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(); for (org.ovirt.engine.core.common.businessentities.storage.Disk disk : getVm().getDiskMap().values()) { if ((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.Disk.DiskStorageType.IMAGE)) { imageList.add(((org.ovirt.engine.core.common.businessentities.DiskImage) (disk))); } } } ensureDomainMap(imageList, parameters.getDestDomainId()); org.ovirt.engine.core.compat.Version clusterVersion = ((org.ovirt.engine.core.bll.ImportVmCommand.getVdsGroup()) == null) ? null : org.ovirt.engine.core.bll.ImportVmCommand.getVdsGroup().getCompatibilityVersion(); org.ovirt.engine.core.common.businessentities.VmStatic staticData = ((getVm()) == null) ? null : getVm().getStaticData(); org.ovirt.engine.core.bll.ImportUtils.updateGraphicsDevices(staticData, clusterVersion); }
@java.lang.Override protected boolean canDoAction() { if (!(super.canDoAction())) { return false; } org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolume = getGlusterVolume(); if (!(glusterVolume.isOnline())) { return failCanDoAction(EngineMessage.ACTION_TYPE_FAILED_GLUSTER_VOLUME_SHOULD_BE_STARTED); } return true; }




com.google.gwt.safehtml.shared.SafeHtml getResourceImage(org.ovirt.engine.core.common.businessentities.VM vm) { if (((vm.getVmPauseStatus()) != (org.ovirt.engine.core.common.businessentities.VmPauseStatus.NONE)) || ((vm.getVmPauseStatus()) != (org.ovirt.engine.core.common.businessentities.VmPauseStatus.NOERR))) { return null; } else { com.google.gwt.resources.client.ImageResource alertImageResource = resources.alertImage(); com.google.gwt.user.client.ui.AbstractImagePrototype imagePrototype = com.google.gwt.user.client.ui.AbstractImagePrototype.create(alertImageResource); java.lang.String html = imagePrototype.getHTML(); org.ovirt.engine.ui.uicompat.Translator translator = org.ovirt.engine.ui.uicompat.EnumTranslator.create(org.ovirt.engine.core.common.businessentities.VmPauseStatus.class); java.lang.String toolTip = translator.get(vm.getVmPauseStatus()); html = html.replaceFirst("img", ((("img " + "title='") + toolTip) + "' ")); return com.google.gwt.safehtml.shared.SafeHtmlUtils.fromTrustedString(html); } }


@org.ovirt.engine.ui.uicompat.DefaultStringValue("Add Hosts") java.lang.String addMultipleHostsTitle();
public static long greatestCommonDivisor(long a, long b) { while (b != 0) { a = b; b = a % b; } return a; }

public static java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> filterImageDisks(java.util.Collection<? extends org.ovirt.engine.core.common.businessentities.Disk> listOfDisks, boolean allowOnlyNotShareableDisks, boolean allowOnlySnapableDisks) { java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> diskImages = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.DiskImage>(); for (org.ovirt.engine.core.common.businessentities.Disk disk : listOfDisks) { if ((((disk.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.Disk.DiskStorageType.IMAGE)) && ((!allowOnlyNotShareableDisks) || (!(disk.isShareable())))) && ((!allowOnlySnapableDisks) || (disk.isAllowSnapshot()))) { diskImages.add(((org.ovirt.engine.core.common.businessentities.DiskImage) (disk))); } } return diskImages; }
@java.lang.Override public void addToSlot(java.lang.Object slot, com.google.gwt.user.client.ui.Widget content) { if (slot == (org.ovirt.engine.ui.userportal.section.main.presenter.tab.basic.MainTabBasicListPresenterWidget.TYPE_VmListContent)) { vmPanel.add(content); } else { super.addToSlot(slot, content); } }
@org.junit.Test public void testQueryFailsIfPeerExists() { mockQueryParameters(org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.NEW_SERVER, org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.PASSWORD); doReturn(getVdsStatic()).when(vdsStaticDao).getByHostName(org.ovirt.engine.core.bll.gluster.GetGlusterServersForImportQueryTest.SERVER_NAME1); try { getQuery().executeQueryCommand(); fail("Query didn't fail when one or more peers already exist(s)!"); } catch (java.lang.RuntimeException e) { assertEquals(VdcBllMessages.SERVER_ALREADY_EXISTS_IN_ANOTHER_CLUSTER.toString(), e.getMessage()); } }


protected boolean validateSpaceRequirements() { int numOfVms = org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getParameters().getVmsCount(); java.util.List<org.ovirt.engine.core.common.businessentities.DiskImage> disksList = new java.util.ArrayList<>(); for (int i = 0; i < numOfVms; ++i) { disksList.addAll(diskInfoDestinationMap.values()); } org.ovirt.engine.core.compat.Guid spId = org.ovirt.engine.core.bll.AddVmPoolWithVmsCommand.getVmTemplate().getStoragePoolId(); java.util.Set<org.ovirt.engine.core.compat.Guid> sdIds = destStorages.keySet(); org.ovirt.engine.core.bll.validator.MultipleStorageDomainsValidator storageDomainsValidator = getStorageDomainsValidator(spId, sdIds); return (validate(storageDomainsValidator.allDomainsWithinThresholds())) && (validate(storageDomainsValidator.allDomainsHaveSpaceForNewDisks(disksList))); }

@java.lang.Override protected boolean canDoAction() { if (!(validate(new org.ovirt.engine.core.bll.validator.storage.StoragePoolValidator(org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommand.getStoragePool()).isUp()))) { return false; } if (!(org.ovirt.engine.core.common.FeatureSupported.refreshLunSupported(org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommand.getStoragePool().getCompatibilityVersion()))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_REFRESH_LUNS_UNSUPPORTED_ACTION); } if (!((org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommand.checkStorageDomain()) && (checkStorageDomainStatus(StorageDomainStatus.Active)))) { return false; } if (!(org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommand.getStorageDomain().getStorageType().isBlockDomain())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_DOMAIN_TYPE_ILLEGAL); } if (!(checkLunsInStorageDomain(org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommand.getParameters().getLunIds(), org.ovirt.engine.core.bll.storage.RefreshLunsSizeCommand.getStorageDomain()))) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_LUNS_NOT_PART_OF_STORAGE_DOMAIN); } return true; }
private void Preview() { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.businessentities.VM) (getEntity())); if (vm != null) { org.ovirt.engine.core.common.businessentities.Snapshot snapshot = ((org.ovirt.engine.core.common.businessentities.Snapshot) (getSelectedItem())); org.ovirt.engine.ui.frontend.Frontend.RunAction(VdcActionType.TryBackToAllSnapshotsOfVm, new org.ovirt.engine.core.common.action.TryBackToAllSnapshotsOfVmParameters(vm.getId(), snapshot.getId()), new org.ovirt.engine.ui.uicompat.IFrontendActionAsyncCallback() { @java.lang.Override public void Executed(org.ovirt.engine.ui.uicompat.FrontendActionAsyncResult result) { } }, null); } }
@java.lang.Override protected void syncSearch() { if ((getEntity()) != null) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity glusterVolumeEntity = ((org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity) (getEntity())); if ((getItems()) == (glusterVolumeEntity.getBricks())) { getItemsChangedEvent().raise(this, EventArgs.Empty); } else { setItems(glusterVolumeEntity.getBricks()); } } else { setItems(null); } }


protected boolean isHotPlugSupported() { if (org.ovirt.engine.core.common.FeatureSupported.hotPlug(org.ovirt.engine.core.bll.VmCommand.getVm().getVdsGroupCompatibilityVersion())) { return true; } return failCanDoAction(EngineMessage.HOT_PLUG_IS_NOT_SUPPORTED); }

private void tagListModel_SelectedItemsChanged(java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs e) { boolean hadSelectedTags = getHasSelectedTags(); updateHasSelectedTags(); if (getHasSelectedTags()) { setAllListModelsUnavailable(); hostList.setIsAvailable(true); vmList.setIsAvailable(true); userList.setIsAvailable(true); } else { updateAvailability(SystemTreeItemType.System, null); } org.ovirt.engine.ui.uicommonweb.models.ListModel oldSelectedItem = getSelectedItem(); if (((((getHasSelectedTags()) && (oldSelectedItem != (hostList))) && (oldSelectedItem != (volumeList))) && (oldSelectedItem != (vmList))) && (oldSelectedItem != (userList))) { setSelectedItem(vmList); } else if ((getHasSelectedTags()) || hadSelectedTags) { java.lang.String prefix = ""; java.lang.String search = ""; org.ovirt.engine.core.compat.RefObject<java.lang.String> tempRef_prefix = new org.ovirt.engine.core.compat.RefObject<java.lang.String>(prefix); org.ovirt.engine.core.compat.RefObject<java.lang.String> tempRef_search = new org.ovirt.engine.core.compat.RefObject<java.lang.String>(search); splitSearchString(getSelectedItem().getDefaultSearchString(), tempRef_prefix, tempRef_search); prefix = tempRef_prefix.argvalue; search = tempRef_search.argvalue; setSearchStringPrefix(prefix); setSearchString(search); getSearchCommand().execute(); searchStringChanged(); } }
@org.junit.Test public void movePluggedDiskAndUnpluggedDiskVmUp() { org.ovirt.engine.core.compat.Guid diskImageId1 = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.compat.Guid diskImageId2 = org.ovirt.engine.core.compat.Guid.newGuid(); org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters1 = new org.ovirt.engine.core.common.action.MoveDiskParameters(diskImageId1, srcStorageId, dstStorageId); org.ovirt.engine.core.common.action.MoveDiskParameters moveDiskParameters2 = new org.ovirt.engine.core.common.action.MoveDiskParameters(diskImageId2, srcStorageId, dstStorageId); command.getParameters().setParametersList(java.util.Arrays.asList(moveDiskParameters1, moveDiskParameters2)); initDiskImage(diskImageId1); initDiskImage(diskImageId2); initVm(VMStatus.Up, org.ovirt.engine.core.compat.Guid.newGuid(), diskImageId1, true, diskImageId2, false); command.updateParameters(); assertTrue(command.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_MOVE_DISKS_MIXED_PLUGGED_STATUS.toString())); }
private void updateExternalVnicProfilesPerTargetCluster() { final java.util.Map<org.ovirt.engine.core.common.businessentities.Cluster, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity>> result = new java.util.HashMap<>(); for (org.ovirt.engine.ui.uicommonweb.models.vms.register.RegisterVmData registerVmData : getEntities().getItems()) { final org.ovirt.engine.core.common.businessentities.Cluster cluster = registerVmData.getCluster().getSelectedItem(); final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> clusterVnicProfileMappings; if (result.containsKey(cluster)) { clusterVnicProfileMappings = result.get(cluster); } else { clusterVnicProfileMappings = new java.util.HashSet(); result.put(cluster, clusterVnicProfileMappings); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> previousClusterVnicProfileMappings; if (externalVnicProfilesPerTargetCluster.containsKey(cluster)) { previousClusterVnicProfileMappings = externalVnicProfilesPerTargetCluster.get(cluster); } else { previousClusterVnicProfileMappings = new java.util.HashSet(); } final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEntity> vmVnicProfiles = getNewVnicProfileMappings(registerVmData, previousClusterVnicProfileMappings); clusterVnicProfileMappings.addAll(vmVnicProfiles); } externalVnicProfilesPerTargetCluster = result; }
public static void GetLocalStorageHost(org.ovirt.engine.ui.frontend.AsyncQuery aQuery, java.lang.String dataCenterName) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter() { @java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { if (source != null) { for (org.ovirt.engine.core.common.businessentities.IVdcQueryable item : ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.IVdcQueryable>) (source))) { return item; } } return null; } }; org.ovirt.engine.core.common.queries.SearchParameters sp = new org.ovirt.engine.core.common.queries.SearchParameters(("hosts: datacenter=" + dataCenterName), org.ovirt.engine.core.common.interfaces.SearchType.VDS); org.ovirt.engine.ui.frontend.Frontend.RunQuery(VdcQueryType.Search, sp, aQuery); }
private static org.ovirt.engine.core.common.businessentities.VmPool cloneVmPool(org.ovirt.engine.core.common.businessentities.VmPool instance) { org.ovirt.engine.core.common.businessentities.VmPool obj = new org.ovirt.engine.core.common.businessentities.VmPool(); obj.setVmPoolId(instance.getVmPoolId()); obj.setName(instance.getName()); obj.setVmPoolType(instance.getVmPoolType()); obj.setVdsGroupId(instance.getVdsGroupId()); obj.setVmPoolType(instance.getVmPoolType()); obj.setParameters(instance.getParameters()); obj.setDefaultEndTime(instance.getDefaultEndTime()); obj.setDefaultStartTime(instance.getDefaultStartTime()); obj.setDefaultTimeInDays(instance.getDefaultTimeInDays()); obj.setVdsGroupName(instance.getVdsGroupName()); obj.setAssignedVmsCount(instance.getAssignedVmsCount()); obj.setVmPoolDescription(instance.getVmPoolDescription()); obj.setComment(instance.getComment()); obj.setRunningVmsCount(instance.getRunningVmsCount()); obj.setPrestartedVms(instance.getPrestartedVms()); return obj; }

public void setSwapFree(java.lang.Long value) { this.mVdsStatistics.setSwapFree(value); }

protected boolean areUpdatedFieldsLegal() { return VmHandler.mUpdateVmsStatic.IsUpdateValid(org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getParameters().getVmStaticData(), org.ovirt.engine.core.bll.UpdateVmCommand.getVm().getStatus()); }
protected void doRegister(java.lang.String hostAddress, int hostSSHPort, java.lang.String hostSSHKeyFingerprint, java.lang.String hostSSHUser, int hostVdsPort, java.lang.String hostName, java.lang.String hostUniqueId) { if (hostSSHUser == null) { hostSSHUser = "root"; } if (hostName == null) { hostName = hostAddress; } if (hostUniqueId == null) { throw new java.lang.RuntimeException("Unique id was not provided"); } org.ovirt.engine.core.common.queries.VdcQueryReturnValue queryReturnValue = ((org.ovirt.engine.core.bll.interfaces.BackendInternal) (org.ovirt.engine.core.utils.ejb.EjbUtils.findBean(BeanType.BACKEND, BeanProxyType.LOCAL))).runInternalQuery(VdcQueryType.RegisterVds, new org.ovirt.engine.core.common.queries.hostdeploy.RegisterVdsParameters(org.ovirt.engine.core.compat.Guid.Empty, hostAddress, hostSSHPort, hostSSHKeyFingerprint, hostSSHUser, hostName, hostUniqueId, hostVdsPort, org.ovirt.engine.core.compat.Guid.Empty)); if (queryReturnValue == null) { throw new java.lang.RuntimeException("runInternalQuery failed (null)"); } if (!(queryReturnValue.getSucceeded())) { java.lang.String r = queryReturnValue.getExceptionString(); if (r == null) { throw new java.lang.RuntimeException("runInternalQuery failed (null)"); } if (!(r.equals(VdcBllMessages.VDS_STATUS_NOT_VALID_FOR_UPDATE.name()))) { throw new java.lang.RuntimeException(java.lang.String.format("runInternalQuery failed '%s'", r)); } } }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = true; org.ovirt.engine.core.common.businessentities.roles oldRole = org.ovirt.engine.core.bll.UpdateRoleCommand.getRoleDao().get(org.ovirt.engine.core.bll.UpdateRoleCommand.getRole().getId()); if (oldRole == null) { addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_UPDATE_ROLE_ID); returnValue = false; } else { if (checkIfRoleIsReadOnly(org.ovirt.engine.core.bll.UpdateRoleCommand.getReturnValue().getCanDoActionMessages())) { returnValue = false; addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE); } else if ((!(org.ovirt.engine.core.compat.StringHelper.EqOp(org.ovirt.engine.core.bll.UpdateRoleCommand.getRole().getname(), oldRole.getname()))) && ((org.ovirt.engine.core.bll.UpdateRoleCommand.getRoleDao().getByName(org.ovirt.engine.core.bll.UpdateRoleCommand.getRole().getname())) != null)) { addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_UPDATE_ROLE_NAME); returnValue = false; } else if ((org.ovirt.engine.core.bll.UpdateRoleCommand.getRole().getType()) != (oldRole.getType())) { addCanDoActionMessage(VdcBllMessages.ERROR_CANNOT_UPDATE_ROLE_TYPE); returnValue = false; } } if (!returnValue) { addCanDoActionMessage(VdcBllMessages.VAR__TYPE__ROLE); addCanDoActionMessage(VdcBllMessages.VAR__ACTION__UPDATE); } return returnValue; }
private java.lang.Object getVmsFromExternalProvider() { try { return org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.GetVmsFromExternalProvider, buildGetRemoteVmsInfoParameters()).getReturnValue(); } catch (java.lang.RuntimeException e) { if (!(e instanceof java.lang.IllegalArgumentException)) { logFailureToGetVms(); } throw e; } }
private void revealDiskPanel(final org.ovirt.engine.ui.uicommonweb.models.vms.AttachDiskModel disk) { diskTypePanel.setVisible(isNewLunDiskEnabled); imageDiskTable.setVisible(false); lunDiskTable.setVisible(false); org.ovirt.engine.ui.common.widget.editor.EntityModelCellTable<org.ovirt.engine.ui.uicommonweb.models.ListModel> diskTable; switch (disk.getDiskStorageType().getEntity()) { case LUN : diskTable = lunDiskTable; break; default : diskTable = imageDiskTable; break; } diskTable.setVisible(true); diskTable.asEditor().edit(disk.getAttachableDisksMap().get(disk.getDiskStorageType().getEntity())); }
private java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> getNewVnicProfileMappings(org.ovirt.engine.ui.uicommonweb.models.vms.ImportEntityData<org.ovirt.engine.core.common.businessentities.VM> vmImportEntityData, java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> clusterVnicProfileMappings) { final java.util.Set<org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity> result = new java.util.HashSet<>(); for (org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface vnic : vmImportEntityData.getEntity().getInterfaces()) { final org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity newMapping = new org.ovirt.engine.ui.uicommonweb.models.vms.register.VnicProfileMappingEnity(vnic.getNetworkName(), vnic.getVnicProfileName(), null); if (!(clusterVnicProfileMappings.contains(newMapping))) { result.add(newMapping); } } return result; }


private static java.util.Map<java.lang.String, java.lang.String> getMessageMap(org.ovirt.engine.core.common.businessentities.VDSGroup cluster, org.ovirt.engine.core.common.asynctasks.gluster.GlusterAsyncTask task) { java.util.Map<java.lang.String, java.lang.String> values = new java.util.HashMap<java.lang.String, java.lang.String>(); values.put(GlusterConstants.CLUSTER, cluster.getName()); values.put(GlusterConstants.VOLUME, task.getTaskParameters().getVolumeName()); values.put("status", task.getStatus().toString()); values.put("info", task.getMessage()); return values; }

@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { java.util.List<org.ovirt.engine.core.common.businessentities.VDS> hosts = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); boolean succeeded = true; for (org.ovirt.engine.core.common.businessentities.VDS host : hosts) { if (!(host.getClusterId().equals(hostClusterIdMap.get(host.getId())))) { succeeded = false; } } if (!succeeded) { guideModel.getWindow().stopProgress(); guideModel.cancel(); errorPopupManager.show(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().hostChangeClusterTimeOut()); } else { activateHostsAfterClusterChange(guideModel, searchStr, activateVdsParameterList); } }
public void setStatus(org.ovirt.engine.core.common.businessentities.VDSStatus status, org.ovirt.engine.core.common.businessentities.VDS vds) { synchronized(getLockObj()) { if (vds == null) { vds = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsDao().get(getVdsId()); } if ((vds.getPreviousStatus()) != (vds.getStatus())) { vds.setPreviousStatus(vds.getStatus()); if ((_vds) != null) { _vds.setPreviousStatus(vds.getStatus()); if ((_vds.getStatus()) == (org.ovirt.engine.core.common.businessentities.VDSStatus.PreparingForMaintenance)) { calculateNextMaintenanceAttemptTime(); } } } vds.setStatus(status); if ((_vds) != null) { _vds.setStatus(status); } switch (status) { case NonOperational : if ((_vds) != null) { _vds.setNonOperationalReason(vds.getNonOperationalReason()); } if ((vds.getVmCount()) > 0) { break; } case NonResponsive : case Down : case Maintenance : vds.setCpuSys(java.lang.Double.valueOf(0)); vds.setCpuUser(java.lang.Double.valueOf(0)); vds.setCpuIdle(java.lang.Double.valueOf(0)); vds.setCpuLoad(java.lang.Double.valueOf(0)); vds.setUsageCpuPercent(0); vds.setUsageMemPercent(0); vds.setUsageNetworkPercent(0); if ((_vds) != null) { _vds.setCpuSys(java.lang.Double.valueOf(0)); _vds.setCpuUser(java.lang.Double.valueOf(0)); _vds.setCpuIdle(java.lang.Double.valueOf(0)); _vds.setCpuLoad(java.lang.Double.valueOf(0)); _vds.setUsageCpuPercent(0); _vds.setUsageMemPercent(0); _vds.setUsageNetworkPercent(0); } default : break; } } }

@org.ovirt.engine.core.utils.timer.OnTimerMethodAnnotation("poll") public void poll() { if (vdsManager.isMonitoringNeeded()) { org.ovirt.engine.core.vdsbroker.VmsListFetcher fetcher = getVmsFetcher(); long fetchTime = java.lang.System.nanoTime(); if (fetcher.fetch()) { getVmsMonitoring(fetcher, fetchTime).perform(); } else { org.ovirt.engine.core.vdsbroker.PollVmStatsRefresher.log.info("Failed to fetch vms info for host '{}' - skipping VMs monitoring.", vdsManager.getVdsName()); } } }
@java.lang.SuppressWarnings("unchecked") protected void initializeCommand(org.ovirt.engine.core.common.businessentities.ImageOperation operation) { command = spy(new org.ovirt.engine.core.bll.MoveOrCopyDiskCommandTest.MoveOrCopyDiskCommandDummy(new org.ovirt.engine.core.common.action.MoveOrCopyImageGroupParameters(diskImageGuid, srcStorageId, destStorageId, operation))); doReturn(true).when(command).isStorageDomainSpaceBelowThresholds(); doReturn(true).when(command).doesStorageDomainHaveSpaceForRequest(anyLong()); doReturn(true).when(command).checkImageConfiguration(any(java.util.List.class)); doReturn(java.util.Collections.emptyList()).when(command).getAllImageSnapshots(); doReturn(false).when(command).acquireLock(); }
public static java.lang.Number convert(long size, org.ovirt.engine.ui.uicommonweb.models.SizeConverter.SizeUnit fromUnit, org.ovirt.engine.ui.uicommonweb.models.SizeConverter.SizeUnit toUnit) { long fromType = fromUnit.getUnitWeight(); long toType = toUnit.getUnitWeight(); return size * ((java.lang.Math.pow(org.ovirt.engine.ui.uicommonweb.models.SizeConverter.CONVERT_FACTOR, fromType)) / (java.lang.Math.pow(org.ovirt.engine.ui.uicommonweb.models.SizeConverter.CONVERT_FACTOR, toType))); }


@java.lang.Override protected void teardown() { }
@java.lang.Override public javax.ws.rs.core.Response add(org.ovirt.engine.api.model.GlusterBricks bricks) { throw new org.ovirt.engine.core.compat.NotImplementedException(); }


public org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder createVmInfoBuilder(org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.compat.Guid vdsId, java.util.Map createInfo) { return new org.ovirt.engine.core.vdsbroker.vdsbroker.VmInfoBuilder(vm, vdsId, createInfo, dbFacade, vmInfoStatelessBuilder); }
@java.lang.Override public void onSelectionChange(com.google.gwt.view.client.SelectionChangeEvent event) { sharedMacPoolModelProvider.setSelectedItems(macPoolTable.getSelectedItems()); }
public org.ovirt.engine.core.bll.ValidationResult imagesAreSnapshots() { java.util.List<java.lang.String> activeSnapshots = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : images) { if (diskImage.getActive()) { activeSnapshots.add(java.lang.String.format("%s (%s)", diskImage.getImageId().toString(), diskImage.getDiskAlias())); } } if (!(activeSnapshots.isEmpty())) { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SNAPSHOTS_ACTIVE, java.lang.String.format("$diskSnapshotIds %s", org.apache.commons.lang.StringUtils.join(activeSnapshots, ", "))); } return org.ovirt.engine.core.bll.ValidationResult.VALID; }
private void processUnremovedDisks(java.util.Collection<org.ovirt.engine.core.common.businessentities.DiskImage> diskImages) { java.util.List<java.lang.String> disksLeftInVm = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.DiskImage diskImage : diskImages) { disksLeftInVm.add(diskImage.getDiskAlias()); } addCustomValue("DisksNames", org.apache.commons.lang.StringUtils.join(disksLeftInVm, ",")); }
public static org.ovirt.engine.core.common.businessentities.VmDynamic buildVMDynamicData(org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcStruct xmlRpcStruct) { org.ovirt.engine.core.common.businessentities.VmDynamic vmdynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(); org.ovirt.engine.core.vdsbroker.vdsbroker.VdsBrokerObjectsBuilder.updateVMDynamicData(vmdynamic, xmlRpcStruct); return vmdynamic; }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM> vmList = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.VM>) (returnValue)); java.util.List<org.ovirt.engine.core.compat.Guid> vmIds = getAffinityGroup().getEntityIds(); getVmsSelectionModel().init(vmList, (vmIds != null ? vmIds : new java.util.ArrayList<org.ovirt.engine.core.compat.Guid>())); stopProgress(); }
public static <E extends java.lang.Enum<E>> E valueOf(java.lang.Class<E> c, java.lang.String name, boolean ignorecase) { if (!ignorecase) { { return java.lang.Enum.<E>valueOf(c, name); } } E[] universe = c.getEnumConstants(); if (universe == null) { throw new java.lang.IllegalArgumentException((name + " is not an enum type")); } java.util.Map<java.lang.String, E> map = org.ovirt.engine.core.common.utils.EnumUtils.cacheEnumValuesInCapitalLetters.get(c); if (map == null) { map = new java.util.HashMap<>((2 * (universe.length))); for (E e : universe) { map.put(e.name().toUpperCase(), e); } org.ovirt.engine.core.common.utils.EnumUtils.cacheEnumValuesInCapitalLetters.put(c, map); } E result = map.get(name.toUpperCase()); if (result == null) { throw new java.lang.IllegalArgumentException(((("No enum const " + (c.getName())) + ".") + name)); } return result; }
private boolean checkDerivedVmFromTemplateExists(org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage) { java.util.List<java.lang.String> vmNames = getNamesOfDerivedVmsFromTemplate(diskImage); if (!(vmNames.isEmpty())) { addCanDoActionMessage(VdcBllMessages.VMT_CANNOT_REMOVE_DETECTED_DERIVED_VM); addCanDoActionMessageVariable("vmsList", org.apache.commons.lang.StringUtils.join(vmNames, ",")); return false; } return true; }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__TYPE__STORAGE__DOMAIN); addCanDoActionMessage(EngineMessage.VAR__ACTION__DEACTIVATE); }
@org.ovirt.engine.api.restapi.types.Mapping(from = VmRngDevice.Source.class, to = org.ovirt.engine.api.model.RngSources.class) public static org.ovirt.engine.api.model.RngSources mapRngSources(java.util.Collection<org.ovirt.engine.core.common.businessentities.VmRngDevice.Source> entity, org.ovirt.engine.api.model.RngSources template) { org.ovirt.engine.api.model.RngSources result = (template == null) ? new org.ovirt.engine.api.model.RngSources() : template; if (entity != null) { for (org.ovirt.engine.core.common.businessentities.VmRngDevice.Source source : entity) { org.ovirt.engine.api.model.RngSource restSource = org.ovirt.engine.api.restapi.types.RngDeviceMapper.map(source, null); result.getRngSources().add(restSource.name()); } } return result; }
public void init() { java.util.ArrayList<org.ovirt.engine.core.common.action.VdcActionParametersBase> parameters = new java.util.ArrayList<>(); for (org.ovirt.engine.core.common.businessentities.VDS vds : vdsDao.getAll()) { if (vds.getStatus().equals(VDSStatus.Up)) { parameters.add(new org.ovirt.engine.core.common.action.VdsActionParameters(vds.getId())); } } backend.runInternalMultipleActions(VdcActionType.RefreshHostDevices, parameters); }
public void remove() { if ((getWindow()) != null) { return; } org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel model = new org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel(); setWindow(model); model.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().removeDataCenterTitle()); model.setHelpTag(HelpTag.remove_data_center); model.setHashName("remove_data_center"); java.util.ArrayList<java.lang.String> list = new java.util.ArrayList<java.lang.String>(); for (org.ovirt.engine.core.common.businessentities.StoragePool a : org.ovirt.engine.ui.uicommonweb.Linq.<org.ovirt.engine.core.common.businessentities.StoragePool>cast(getSelectedItems())) { list.add(a.getName()); } model.setItems(list); org.ovirt.engine.ui.uicommonweb.UICommand tempVar = new org.ovirt.engine.ui.uicommonweb.UICommand("OnRemove", this); tempVar.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().ok()); tempVar.setIsDefault(true); model.getCommands().add(tempVar); org.ovirt.engine.ui.uicommonweb.UICommand tempVar2 = new org.ovirt.engine.ui.uicommonweb.UICommand("Cancel", this); tempVar2.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().cancel()); tempVar2.setIsCancel(true); model.getCommands().add(tempVar2); }


@org.ovirt.engine.ui.uicompat.DefaultStringValue("Import Virtual Machine(s)") java.lang.String importVirtualMachinesTitle();

@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { log.debug("Entered SsoPostLoginFilter"); javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); try { java.lang.String engineSessionId = ((java.lang.String) (req.getAttribute(SessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY))); if ((org.apache.commons.lang.StringUtils.isEmpty(engineSessionId)) && ((req.getSession(false)) != null)) { engineSessionId = ((java.lang.String) (req.getSession(false).getAttribute(SessionConstants.HTTP_SESSION_ENGINE_SESSION_ID_KEY))); } if (org.apache.commons.lang.StringUtils.isNotEmpty(engineSessionId)) { javax.naming.InitialContext ctx = new javax.naming.InitialContext(); try { java.lang.String ssoToken = ((java.lang.String) (runQuery(VdcQueryType.GetEngineSessionIdToken, engineSessionId, ctx))); log.debug("Adding userInfo to session"); org.ovirt.engine.core.common.businessentities.aaa.DbUser loggedInUser = ((org.ovirt.engine.core.common.businessentities.aaa.DbUser) (runQuery(VdcQueryType.GetUserBySessionId, engineSessionId, ctx))); req.getSession(true).setAttribute(org.ovirt.engine.core.aaa.filters.SsoPostLoginFilter.ATTR_USER_INFO, getUserInfoObject(loggedInUser, ssoToken)); chain.doFilter(request, response); } finally { ctx.close(); } } else { log.warn(("Missing sessionId in either request or session scope. " + "Please configure SSO properly with SsoPostLoginServlet.")); } } catch (java.lang.Exception ex) { log.error("Unable to get token for engine session {}", ex.getMessage()); log.debug("Exception", ex); } log.debug("Exiting SsoPostLoginFilter"); }
@org.junit.Test public void nameInUse() { createSimpleCommand(); createCommandWithDifferentName(); canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_DO_ACTION_NAME_IN_USE); }
@org.junit.Test public void shouldCheckIfClusterUpgradeIsDone() { oldGroupIsDetachedDefault(); createCommandWithDefaultVdsGroup(); cpuExists(); architectureIsUpdatable(); inUpgradeMode(); cmd.getVdsGroup().setClusterPolicyId(org.ovirt.engine.core.bll.UpdateVdsGroupCommandTest.NOT_UPGRADE_POLICY_GUID); assertTrue(cmd.canDoAction()); verify(inClusterUpgradeValidator, times(0)).isUpgradePossible(anyList(), anyList()); verify(inClusterUpgradeValidator, times(1)).isUpgradeDone(anyList()); }
@org.junit.Test public void calculateNetworkImplementationDetailsNetworkQosOutOfSync() throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = createNetworkDevice(); org.ovirt.engine.core.common.businessentities.network.NetworkQoS qos = createQos(); qos.setOutboundAverage(30); qos.setOutboundPeak(30); qos.setOutboundBurst(30); calculateNetworkImplementationDetailsAndAssertSync(iface, false, iface.getNetworkName(), iface.isBridged(), iface.getMtu(), iface.getVlanId(), qos); }

@java.lang.Override protected void initializeModelHandlers() { super.initializeModelHandlers(); getModel().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { java.lang.String propName = ((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName; if ((("CpuUsage".equals(propName)) || ("MemoryUsage".equals(propName))) || ("NetworkUsage".equals(propName))) { org.ovirt.engine.ui.userportal.uicommon.model.vm.VmMonitorValueChangeEvent.fire(getEventBus()); } } }); }

public boolean isSmtpEncryptionOptionValid() { return (isSmtpEncryptionNone()) || (isSmtpEncryptionSsl()); }
private void saveDefaultedStorageProperties(org.ovirt.engine.ui.uicommonweb.models.storage.StorageModel model, org.ovirt.engine.core.common.businessentities.StorageDomainStatic storageDomainStatic) { storageDomainStatic.setWipeAfterDelete(model.getWipeAfterDelete().getEntity()); storageDomainStatic.setDiscardAfterDelete(model.getDiscardAfterDelete().getEntity()); storageDomainStatic.setWarningLowSpaceIndicator(model.getWarningLowSpaceIndicator().getEntity()); storageDomainStatic.setCriticalSpaceActionBlocker(model.getCriticalSpaceActionBlocker().getEntity()); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Toggle Full Screen") java.lang.String toggleFullScreen();
public int getHighlyAvailableScore() { return this.mVdsStatistics.getHighlyAvailableScore(); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmDevice device) { return device.getAddress(); }


@org.junit.Test public void testGuestFQDN() { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM(); org.ovirt.engine.core.common.businessentities.VmDynamic vmDynamic = new org.ovirt.engine.core.common.businessentities.VmDynamic(); vmDynamic.setStatus(VMStatus.Up); vmDynamic.setVmFQDN("localhost.localdomain"); vm.setDynamicData(vmDynamic); org.ovirt.engine.api.model.VM map = org.ovirt.engine.api.restapi.types.VmMapper.map(vm, ((org.ovirt.engine.api.model.VM) (null))); assertNotNull(map.getGuestInfo().getFqdn()); assertEquals(map.getGuestInfo().getFqdn(), "localhost.localdomain"); }
private boolean updateIsoListFromVDSM(org.ovirt.engine.core.compat.Guid repoStoragePoolId, org.ovirt.engine.core.compat.Guid repoStorageDomainId) { boolean refreshIsoSucceeded = false; if (repoStorageDomainId != null) { try { org.ovirt.engine.core.common.vdscommands.VDSReturnValue returnValue = org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().RunVdsCommand(VDSCommandType.GetIsoList, new org.ovirt.engine.core.common.vdscommands.IrsBaseVDSCommandParameters(repoStoragePoolId)); @java.lang.SuppressWarnings("unchecked") java.util.List<java.lang.String> isoDomainList = ((java.util.List<java.lang.String>) (returnValue.getReturnValue())); if ((returnValue.getSucceeded()) && (isoDomainList != null)) { org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.debugFormat("The refresh process from VDSM, for Iso files succeeded."); refreshIsoSucceeded = org.ovirt.engine.core.bll.IsoDomainListSyncronizer.refreshIsoFileListMetaData(repoStorageDomainId, repoStorageDom, isoDomainList, ImageFileType.ISO); } } catch (java.lang.Exception e) { refreshIsoSucceeded = false; org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.warnFormat("The refresh process from VDSM, for Iso files failed."); org.ovirt.engine.core.bll.IsoDomainListSyncronizer.log.error(e); } } return refreshIsoSucceeded; }
@java.lang.Override public void testConnection() { org.apache.commons.httpclient.HttpMethod httpMethod = new org.apache.commons.httpclient.methods.GetMethod(hostProvider.getUrl()); runHttpMethod(httpClient, httpMethod); }


private boolean validRemovedNetworkAttachments(java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.network.NetworkAttachment> attachmentsById, org.ovirt.engine.core.common.businessentities.BusinessEntityMap<org.ovirt.engine.core.common.businessentities.network.Bond> removedBonds) { boolean passed = true; for (org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachment : params.getRemovedNetworkAttachments()) { org.ovirt.engine.core.common.businessentities.network.NetworkAttachment attachmentToValidate = attachmentsById.get(attachment.getId()); org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator validator = new org.ovirt.engine.core.bll.validator.NetworkAttachmentValidator(attachmentToValidate, host); if (!((((validate(validator.networkAttachmentIsSet())) && (validate(validator.notExternalNetwork()))) && (validate(validator.notManagementNetwork()))) && (notRemovingLabeledNetworks(attachment, getExistingIfaces(), removedBonds)))) { passed = false; } } return passed; }

@java.lang.Override protected void beforeExecute(java.lang.Thread t, java.lang.Runnable r) { super.beforeExecute(t, r); java.lang.String threadName = t.getName(); if (!(threadName.startsWith("org.ovirt.thread."))) { t.setName(("org.ovirt.thread." + threadName)); } if (org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.log.isDebugEnabled()) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.log.debug((("About to run task " + (r.getClass().getName())) + " from "), new java.lang.Exception()); } if ((getQueue().size()) > 5) { org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.log.warn((((("Executing a command: " + (r.getClass().getName())) + " , but note that there are ") + (getQueue().size())) + " tasks in the queue.")); } }
private void processHeartbeat() { if (((!(this.isInInit())) && (this.policy.isHeartbeat())) && (((this.lastHeartbeat) + (this.policy.getHeartbeat())) < (java.lang.System.currentTimeMillis()))) { org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.debug("Heartbeat exeeded. Closing channel"); this.disconnect("Heartbeat exeeded"); } }
protected boolean validateStorageDomains() { org.ovirt.engine.core.bll.validator.storage.MultipleStorageDomainsValidator storageDomainsValidator = getStorageDomainsValidator(org.ovirt.engine.core.bll.RemoveSnapshotCommand.getStoragePoolId(), getStorageDomainsIds()); return ((validate(storageDomainsValidator.allDomainsExistAndActive())) && (validate(storageDomainsValidator.allDomainsWithinThresholds()))) && (validate(storageDomainsValidator.allDomainsHaveSpaceForClonedDisks(getSourceImages()))); }

@java.lang.Override protected void endWithFailure() { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.getParameters().getDestinationImageId(), ImageStatus.ILLEGAL); org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.updateImageStatus(org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.getParameters().getImageId(), ImageStatus.OK); org.ovirt.engine.core.bll.storage.disk.cinder.CloneSingleCinderDiskCommand.setSucceeded(true); }
@java.lang.Override protected boolean validate() { org.ovirt.engine.core.bll.validator.NetworkValidator validator = new org.ovirt.engine.core.bll.validator.NetworkValidator(vmDao, org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getNetworkDao().get(getNetwork().getId())); return ((((validate(validator.networkIsSet(org.ovirt.engine.core.bll.network.dc.RemoveNetworkCommand.getParameters().getId()))) && (validate(validator.notRemovingManagementNetwork()))) && (validate(validator.notIscsiBondNetwork()))) && (validate(validator.networkNotUsedByVms()))) && (validate(validator.networkNotUsedByTemplates())); }

protected boolean setAndValidateCpuProfile() { return validate(org.ovirt.engine.core.bll.profiles.CpuProfileHelper.setAndValidateCpuProfile(org.ovirt.engine.core.bll.VmManagementCommandBase.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.VmManagementCommandBase.getVdsGroup().getCompatibilityVersion())); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.common.businessentities.AuditLog auditLog = getAuditLog(); auditLogDao.remove(org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.getParameters().getAuditLogId()); setAuditLogDetails(auditLog); auditLog.setUserId(Guid.Empty); org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase logableToClear = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase(auditLog); org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator eventFloodRegulator = new org.ovirt.engine.core.dal.dbbroker.auditloghandling.EventFloodRegulator(logableToClear, auditLog.getLogType()); eventFloodRegulator.evict(); org.ovirt.engine.core.bll.RemoveAuditLogByIdCommand.setSucceeded(true); }

private java.lang.Integer calcMaxVCpu() { java.lang.Integer maxSockets = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmSockets, vm.getVdsGroupCompatibilityVersion().getValue()); java.lang.Integer maxVCpus = org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.MaxNumOfVmCpus, vm.getVdsGroupCompatibilityVersion().getValue()); maxVCpus = (vm.getCpuPerSocket()) * (java.lang.Math.min(maxSockets, (maxVCpus / (vm.getCpuPerSocket())))); return maxVCpus; }
protected static org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo getQemuImageInfoFromVdsm(org.ovirt.engine.core.compat.Guid storagePoolId, org.ovirt.engine.core.compat.Guid newStorageDomainID, org.ovirt.engine.core.compat.Guid newImageGroupId, org.ovirt.engine.core.compat.Guid newImageId, boolean shouldPrepareAndTeardown) { org.ovirt.engine.core.compat.Guid vdsId = org.ovirt.engine.core.bll.storage.utils.VdsCommandsHelper.getHostForExecution(storagePoolId, java.util.Collections.emptyList()); if (shouldPrepareAndTeardown) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.prepareImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo qemuImageInfo = ((org.ovirt.engine.core.common.businessentities.storage.QemuImageInfo) (org.ovirt.engine.core.bll.Backend.getInstance().getResourceManager().runVdsCommand(VDSCommandType.GetQemuImageInfo, new org.ovirt.engine.core.common.vdscommands.GetVolumeInfoVDSCommandParameters(vdsId, storagePoolId, newStorageDomainID, newImageGroupId, newImageId)).getReturnValue())); if (shouldPrepareAndTeardown) { org.ovirt.engine.core.bll.storage.disk.image.ImagesHandler.teardownImage(storagePoolId, newStorageDomainID, newImageGroupId, newImageId, vdsId); } return qemuImageInfo; }
private void setTestResultValue(org.ovirt.engine.core.common.queries.VdcQueryReturnValue result) { java.lang.String errorMessage = org.ovirt.engine.ui.uicommonweb.models.providers.ProviderModel.EMPTY_ERROR_MESSAGE; if (result == null) { errorMessage = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().testFailedUnknownErrorMsg(); } else if (!(result.getSucceeded())) { if (((result.getExceptionString()) != null) && (!(result.getExceptionString().isEmpty()))) { errorMessage = result.getExceptionString(); } else { errorMessage = org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().testFailedUnknownErrorMsg(); } } getTestResult().setEntity(errorMessage); }

@org.ovirt.engine.ui.webadmin.DefaultStringValue("Hosted Engine HA") java.lang.String hostedEngineHaHostGeneral();

@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel model = ((org.ovirt.engine.ui.uicommonweb.models.vms.UnitVmModel) (target)); org.ovirt.engine.core.common.businessentities.VmTemplate template = ((org.ovirt.engine.core.common.businessentities.VmTemplate) (returnValue)); if (useLatest) { template = new org.ovirt.engine.ui.uicommonweb.models.templates.LatestVmTemplate(template); } setupBaseTemplate(template.getBaseTemplateId()); model.getTemplate().setItems(java.util.Collections.singletonList(template)); model.getTemplate().setSelectedItem(template); model.getTemplate().setIsChangable(false); }
@java.lang.Override protected void executeCommand() { org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getStoragePool().setStatus(org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getParameters().getStatus()); setVdsIdRef(org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getStoragePool().getspm_vds_id()); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolDao().updateStatus(org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getStoragePool().getStatus()); if (((org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getParameters().getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NonResponsive)) || ((org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getParameters().getStatus()) == (org.ovirt.engine.core.common.businessentities.StoragePoolStatus.NotOperational))) { java.util.List<org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap> storagesStatusInPool = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().getAllForStoragePool(org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getStoragePool().getId()); for (org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap storageStatusInPool : storagesStatusInPool) { if (((storageStatusInPool.getStatus()) != null) && ((storageStatusInPool.getStatus()) == (org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active))) { storageStatusInPool.setStatus(StorageDomainStatus.Unknown); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().updateStatus(storageStatusInPool.getId(), storageStatusInPool.getStatus()); } } } org.ovirt.engine.core.bll.storage.StoragePoolStatusHandler.poolStatusChanged(org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getStoragePool().getId(), org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.getStoragePool().getStatus()); org.ovirt.engine.core.bll.storage.SetStoragePoolStatusCommand.setSucceeded(true); }
@java.lang.Override public org.ovirt.engine.core.common.eventqueue.EventResult call() { setStorageDomain(null); setStoragePool(null); boolean succeded = false; if (canDoAction()) { org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap domainPoolMap = new org.ovirt.engine.core.common.businessentities.StoragePoolIsoMap(getRecoveryStoragePoolParametersData().getNewMasterDomainId(), getRecoveryStoragePoolParametersData().getStoragePoolId(), org.ovirt.engine.core.common.businessentities.StorageDomainStatus.Active); org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getStoragePoolIsoMapDao().save(domainPoolMap); getRecoveryStoragePoolParametersData().setVdsId(getVds().getId()); org.ovirt.engine.core.common.action.VdcReturnValueBase returnVal = org.ovirt.engine.core.bll.Backend.getInstance().runInternalAction(VdcActionType.ReconstructMasterDomain, getParameters()); succeded = ((returnVal.getActionReturnValue()) != null) ? ((java.lang.Boolean) (returnVal.getActionReturnValue())) : false; getStoragePoolDAO().updateStatus(getStoragePool().getId(), StoragePoolStatus.Problematic); } return new org.ovirt.engine.core.common.eventqueue.EventResult(succeded, org.ovirt.engine.core.common.eventqueue.EventType.RECONSTRUCT); }

@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__CREATE); addCustomValue(GlusterConstants.VOLUME_SNAPSHOT_NAME, getParameters().getSnapshot().getSnapshotName()); super.setActionMessageParameters(); }
@org.ovirt.engine.ui.uicompat.DefaultMessage("{0} in Data Center {1}") java.lang.String networkDc(java.lang.String networkName, java.lang.String dcName);
protected void mockOsRepository() { injectorRule.bind(org.ovirt.engine.core.bll.CpuFlagsManagerHandler.class, cpuFlagsManagerHandler); org.ovirt.engine.core.common.utils.SimpleDependencyInjector.getInstance().bind(org.ovirt.engine.core.common.osinfo.OsRepository.class, osRepository); org.ovirt.engine.core.bll.VmHandler.init(); when(osRepository.isWindows(0)).thenReturn(true); when(osRepository.getMinimumRam(vm.getVmOsId(), org.ovirt.engine.core.compat.Version.getLast())).thenReturn(0); when(osRepository.getMaximumRam(vm.getVmOsId(), org.ovirt.engine.core.compat.Version.getLast())).thenReturn(100); when(osRepository.getArchitectureFromOS(14)).thenReturn(ArchitectureType.x86_64); }
@java.lang.SuppressWarnings("resource") private void checkConnection() throws java.sql.SQLException { java.sql.Statement statement = null; java.sql.ResultSet rs = null; try { statement = connection.createStatement(); rs = statement.executeQuery("select null"); rs.next(); } finally { if (statement != null) { statement.close(); } if (rs != null) { rs.close(); } } }
@java.lang.Override public void setItems(java.lang.Iterable value) { if ((items) != value) { ItemsChanging(value, items); items = value; ItemsChanged(); getItemsChangedEvent().raise(this, EventArgs.Empty); OnPropertyChanged(new org.ovirt.engine.core.compat.PropertyChangedEventArgs("Items")); } }


@java.lang.Override public java.lang.String getText(java.lang.Object image) { if (image instanceof org.ovirt.engine.core.common.businessentities.RepoImage) { return ((org.ovirt.engine.core.common.businessentities.RepoImage) (image)).getFileType().toString(); } return "(Unknown)"; }


private long findUnusedMac() { int index = usedMacs.nextClearBit(0); return (rangeStart) + index; }
protected java.lang.String scheduleJob() { if ((schedule.getExecutionTime()) != null) { java.sql.Time convertedTime = org.ovirt.engine.core.bll.utils.GlusterUtil.getInstance().convertTime(schedule.getExecutionTime(), schedule.getTimeZone()); schedule.setExecutionTime(convertedTime); } java.util.Date convertedStartDate = getGlusterUtil().convertDate(schedule.getStartDate(), schedule.getTimeZone()); java.util.Date convertedEndByDate = getGlusterUtil().convertDate(schedule.getEndByDate(), schedule.getTimeZone()); java.lang.String cronExpression = org.ovirt.engine.core.bll.utils.GlusterUtil.getInstance().getCronExpression(schedule); if (cronExpression == null) return null; return getDbSchedulUtil().scheduleACronJob(new org.ovirt.engine.core.bll.gluster.GlusterSnapshotScheduleJob(), "onTimer", new java.lang.Class[]{ java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class }, new java.lang.Object[]{ upServer.getId().toString(), org.ovirt.engine.core.bll.gluster.ScheduleGlusterVolumeSnapshotCommandBase.getGlusterVolumeId().toString(), schedule.getSnapshotNamePrefix(), schedule.getSnapshotDescription(), force }, cronExpression, convertedStartDate, convertedEndByDate); }
@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.ConfirmationModel object) { storageDomainItems.setRowData(new java.util.ArrayList<org.ovirt.engine.ui.uicommonweb.models.EntityModel>()); storageDomainItems.asEditor().edit(object); driver.edit(object); object.getLatch().getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { if ("IsAvailable".equals(((org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs) (args)).propertyName)) { org.ovirt.engine.ui.uicommonweb.models.EntityModel entity = ((org.ovirt.engine.ui.uicommonweb.models.EntityModel) (sender)); if (entity.getIsAvailable()) { latch.setVisible(true); } } } }); object.getItemsChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.EventArgs args) { messageLabel.setHTML(applicationConstants.dataCenterRecoveryStoragePopupMessageLabel()); selectNewDSDLabel.setText(applicationConstants.dataCenterRecoveryStoragePopupSelectNewDSDLabel()); } }); }
@org.junit.Test public void testBadGuid() throws java.lang.Exception { control.replay(); try { new org.ovirt.engine.api.restapi.resource.BackendTemplateResource("foo"); org.ovirt.engine.api.restapi.resource.BackendTemplateBasedResourceTest.fail("expected WebApplicationException"); } catch (javax.ws.rs.WebApplicationException wae) { verifyNotFoundException(wae); } }

@java.lang.Override public void executeCommand() { if ((georepSessions) != null) { for (org.ovirt.engine.core.common.businessentities.gluster.GlusterGeoRepSession session : georepSessions) { org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeEntity slaveVolume = getDbFacade().getGlusterVolumeDao().getById(session.getSlaveVolumeId()); if (slaveVolume == null) { continue; } org.ovirt.engine.core.common.businessentities.VDS slaveUpServer = org.ovirt.engine.core.bll.utils.ClusterUtils.getInstance().getRandomUpServer(slaveVolume.getClusterId()); if (slaveUpServer == null) { handleVdsError(AuditLogType.GLUSTER_VOLUME_ALL_SNAPSHOTS_DELETE_FAILED, VdcBllErrors.NoUpServerFoundInRemoteCluster.name()); setSucceeded(false); return; } java.util.List<org.ovirt.engine.core.common.businessentities.gluster.GlusterVolumeSnapshotEntity> slaveVolumeSnapshots = getGlusterVolumeSnapshotDao().getAllByVolumeId(slaveVolume.getId()); try (org.ovirt.engine.core.utils.lock.EngineLock lock = acquireEngineLock(session.getSlaveVolumeId(), LockingGroup.GLUSTER_SNAPSHOT)) { if (!(deleteAllGlusterVolumeSnapshots(slaveUpServer.getId(), slaveVolume.getName(), slaveVolumeSnapshots))) { return; } getGlusterUtil().checkAndRemoveVolumeSnapshotLimitsAlert(slaveVolume); } } } deleteAllGlusterVolumeSnapshots(getUpServer().getId(), getGlusterVolumeName(), snapshots); getGlusterUtil().checkAndRemoveVolumeSnapshotLimitsAlert(getGlusterVolume()); }
@java.lang.Override protected java.util.List<org.ovirt.engine.core.common.businessentities.VDS> getAllRunningVdssInPool() { java.util.Set<org.ovirt.engine.core.common.businessentities.VDSStatus> vdsStatus = java.util.EnumSet.copyOf(StoragePoolDomainHelper.vdsDomainsActiveMonitoringStatus); vdsStatus.addAll(StoragePoolDomainHelper.vdsDomainsMaintenanceMonitoringStatus); return org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.getVdsDao().getAllForStoragePoolAndStatuses(org.ovirt.engine.core.bll.storage.DeactivateStorageDomainCommand.getStoragePool().getId(), vdsStatus); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Error in fetching volume option list, please try again.") java.lang.String errorInFetchingVolumeOptionList();


private void logException(java.lang.RuntimeException ex) { if (((ex.getMessage()) == null) || (!(ex.getMessage().contains("Policy reset")))) { log.error("Command '{}' execution failed: {}", this, ex.getMessage()); log.debug("Exception", ex); } }
private void initTables() { disksTable = new org.ovirt.engine.ui.common.widget.editor.ListModelObjectCellTable<org.ovirt.engine.core.common.businessentities.DiskImage, org.ovirt.engine.ui.uicommonweb.models.ListModel>(true, true); disksTable.enableColumnResizing(); disksTable.addColumn(new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip<org.ovirt.engine.core.common.businessentities.DiskImage>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.DiskImage diskImage) { return diskImage.getDiskAlias(); } }, constants.aliasDisk(), "150px"); disksTable.addColumn(new org.ovirt.engine.ui.common.widget.table.column.AbstractTextColumnWithTooltip<org.ovirt.engine.core.common.businessentities.DiskImage>() { @java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.DiskImage diskImage) { return diskImage.getDiskDescription(); } }, constants.descriptionDisk(), "150px"); }
@java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { java.util.ArrayList<org.ovirt.engine.core.common.scheduling.PolicyUnit> policyUnits = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); policyUnitMap = new java.util.LinkedHashMap(); for (org.ovirt.engine.core.common.scheduling.PolicyUnit policyUnit : policyUnits) { policyUnitMap.put(policyUnit.getId(), policyUnit); } org.ovirt.engine.ui.frontend.Frontend.getInstance().runQuery(VdcQueryType.GetClusterPolicies, new org.ovirt.engine.core.common.queries.VdcQueryParametersBase(), new org.ovirt.engine.ui.frontend.AsyncQuery(model, new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object returnValue) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel clusterModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.scheduling.ClusterPolicy> list = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); clusterModel.getClusterPolicy().setItems(list); org.ovirt.engine.core.common.scheduling.ClusterPolicy defaultClusterPolicy = null; org.ovirt.engine.core.common.scheduling.ClusterPolicy selectedClusterPolicy = null; for (org.ovirt.engine.core.common.scheduling.ClusterPolicy clusterPolicy : list) { if (((clusterModel.getIsEdit()) && ((getEntity()) != null)) && (clusterPolicy.getId().equals(getEntity().getClusterPolicyId()))) { selectedClusterPolicy = clusterPolicy; } if (clusterPolicy.isDefaultPolicy()) { defaultClusterPolicy = clusterPolicy; } } if (selectedClusterPolicy != null) { clusterModel.getClusterPolicy().setSelectedItem(selectedClusterPolicy); } else { clusterModel.getClusterPolicy().setSelectedItem(defaultClusterPolicy); } clusterPolicyChanged(); } })); }
static boolean validatePinningAndMigration(java.util.List<java.lang.String> reasons, org.ovirt.engine.core.common.businessentities.VmStatic vmStaticData, java.lang.String cpuPinning) { final boolean cpuPinMigrationEnabled = java.lang.Boolean.TRUE.equals(org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.CpuPinMigrationEnabled)); if (((!cpuPinMigrationEnabled) && (((vmStaticData.getMigrationSupport()) == (org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE)) || ((vmStaticData.getMigrationSupport()) == (org.ovirt.engine.core.common.businessentities.MigrationSupport.IMPLICITLY_NON_MIGRATABLE)))) && (org.apache.commons.lang.StringUtils.isNotEmpty(cpuPinning))) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_VM_CANNOT_BE_PINNED_TO_CPU_AND_MIGRATABLE.toString()); return false; } if ((vmStaticData.isAutoStartup()) && ((vmStaticData.getMigrationSupport()) != (org.ovirt.engine.core.common.businessentities.MigrationSupport.MIGRATABLE))) { reasons.add(EngineMessage.ACTION_TYPE_FAILED_VM_CANNOT_BE_HIGHLY_AVAILABLE_AND_PINNED_TO_HOST.toString()); return false; } return true; }


@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__ADD); addCanDoActionMessage(EngineMessage.VAR__TYPE__CLUSTER_POLICY); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(VdcBllMessages.VAR__ACTION__REVERT_TO); addCanDoActionMessage(VdcBllMessages.VAR__TYPE__SNAPSHOT); }
protected void verifyQuery(org.ovirt.engine.api.restapi.resource.AbstractStatisticalQuery<org.ovirt.engine.api.model.NIC, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface> query, org.ovirt.engine.core.common.businessentities.network.VmNetworkInterface entity) throws java.lang.Exception { assertEquals(org.ovirt.engine.api.model.NIC.class, query.getParentType()); assertSame(entity, query.resolve(org.ovirt.engine.api.restapi.resource.BackendVmNicResourceTest.NIC_ID)); java.util.List<org.ovirt.engine.api.model.Statistic> statistics = query.getStatistics(entity); verifyStatistics(statistics, new java.lang.String[]{ "data.current.rx", "data.current.tx", "errors.total.rx", "errors.total.tx" }, new java.math.BigDecimal[]{ asDec(10), asDec(20), asDec(30), asDec(40) }); org.ovirt.engine.api.model.Statistic adopted = query.adopt(new org.ovirt.engine.api.model.Statistic()); assertTrue(adopted.isSetNic()); assertEquals(org.ovirt.engine.api.restapi.resource.BackendVmNicResourceTest.NIC_ID.toString(), adopted.getNic().getId()); assertTrue(adopted.getNic().isSetVm()); assertEquals(org.ovirt.engine.api.restapi.resource.AbstractBackendNicsResourceTest.PARENT_ID.toString(), adopted.getNic().getVm().getId()); }
@java.lang.Override protected void executeVdsBrokerCommand() { org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.log.info("-- executeVdsBrokerCommand: "); org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.log.infoFormat(("-- upload parameters:" + (((((((("\r\n" + " dstSpUUID={0}") + "\r\n") + " dstSdUUID={1}") + "\r\n") + " dstImageGUID={2}") + "\r\n") + " dstVolUUID={3}") + "\r\n")), org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getStoragePoolId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getStorageDomainId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getImageGroupId().toString(), org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getImageId().toString()); org.ovirt.engine.core.vdsbroker.VdsManager manager = org.ovirt.engine.core.vdsbroker.ResourceManager.getInstance().GetVdsManager(org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getVdsId()); final org.apache.commons.httpclient.HttpClient httpclient = ((org.ovirt.engine.core.vdsbroker.vdsbroker.VdsServerWrapper) (manager.getVdsProxy())).getHttpClient(); org.ovirt.engine.core.common.businessentities.VdsStatic vdsStatic = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance().getVdsStaticDao().get(manager.getVdsId()); org.ovirt.engine.core.common.utils.Pair<java.lang.String, java.net.URL> urlInfo = org.ovirt.engine.core.vdsbroker.xmlrpc.XmlRpcUtils.getConnectionUrl(vdsStatic.getHostName(), vdsStatic.getPort(), "", org.ovirt.engine.core.common.config.Config.<java.lang.Boolean>getValue(ConfigValues.EncryptHostCommunication)); final org.apache.commons.httpclient.methods.PutMethod putMethod = new org.apache.commons.httpclient.methods.PutMethod(urlInfo.getFirst()); try { org.apache.commons.httpclient.methods.InputStreamRequestEntity inputStreamRequestEntity = null; if ((org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getStreamLength()) != null) { inputStreamRequestEntity = new org.apache.commons.httpclient.methods.InputStreamRequestEntity(org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getInputStream(), org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getStreamLength()); } else { inputStreamRequestEntity = new org.apache.commons.httpclient.methods.InputStreamRequestEntity(org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getInputStream()); } putMethod.setRequestEntity(inputStreamRequestEntity); putMethod.setRequestHeader("Content-Type", "application/octet-stream"); if ((org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getStreamLength()) != null) { putMethod.setRequestHeader("Content-Length", org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getStreamLength().toString()); } putMethod.setRequestHeader("connection", "close"); putMethod.setRequestHeader("Storage-Pool-Id", org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getStoragePoolId().toString()); putMethod.setRequestHeader("Storage-Domain-Id", org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getStorageDomainId().toString()); putMethod.setRequestHeader("Image-Id", org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getImageGroupId().toString()); putMethod.setRequestHeader("Volume-Id", org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getImageId().toString()); int responseCode = -1; try { java.util.concurrent.FutureTask<java.lang.Integer> futureTask = new java.util.concurrent.FutureTask(new java.util.concurrent.Callable<java.lang.Integer>() { @java.lang.Override public java.lang.Integer call() throws java.lang.Exception { return httpclient.executeMethod(putMethod); } }); java.util.concurrent.Future<java.lang.Integer> f = org.ovirt.engine.core.utils.threadpool.ThreadPoolUtil.execute(futureTask); if ((f.get(org.ovirt.engine.core.common.config.Config.<java.lang.Integer>getValue(ConfigValues.UploadFileMaxTimeInMinutes), java.util.concurrent.TimeUnit.MINUTES)) == null) { responseCode = futureTask.get(); } } catch (java.lang.InterruptedException e) { throw new java.lang.RuntimeException(e); } catch (java.lang.Exception e) { org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.log.debug(e); throw org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.createNetworkException(e); } if (responseCode != (org.apache.commons.httpclient.HttpStatus.SC_OK)) { throwVdsErrorException(("upload failed with response code " + responseCode), VdcBllErrors.UPLOAD_FAILURE); } processResponseHeaderValue(putMethod, "Content-type", "application/json"); java.lang.String response; try { response = putMethod.getResponseBodyAsString(); } catch (java.lang.Exception e) { throw org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.createNetworkException(e); } java.util.Map<java.lang.String, java.lang.Object> resultMap = null; try { resultMap = new org.codehaus.jackson.map.ObjectMapper().readValue(response, java.util.HashMap.class); status = new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(resultMap); } catch (java.lang.Exception e) { throwVdsErrorException(("failed to parse response " + response), VdcBllErrors.GeneralException); } org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.proceedProxyReturnValue(); java.lang.String createdTaskId = new org.ovirt.engine.core.vdsbroker.irsbroker.OneUuidReturnForXmlRpc(resultMap).mUuid; org.ovirt.engine.core.compat.Guid createdTask = org.ovirt.engine.core.compat.Guid.createGuidFromString(createdTaskId); org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getVDSReturnValue().setCreationInfo(new org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo(createdTask, org.ovirt.engine.core.common.asynctasks.AsyncTaskType.downloadImageFromStream, org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getParameters().getStoragePoolId())); org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.getVDSReturnValue().setSucceeded(true); } finally { try { putMethod.releaseConnection(); } catch (java.lang.RuntimeException releaseException) { org.ovirt.engine.core.vdsbroker.irsbroker.UploadStreamVDSCommand.log.error("failed when attempting to release connection", releaseException); } } }
private com.google.gwt.user.client.ui.PushButton createButton(final org.ovirt.engine.core.common.utils.Pair<T, V> item) { final T value = item.getFirst(); final V widget = item.getSecond(); boolean ghostItem = isGhost(value); final com.google.gwt.user.client.ui.PushButton button = new com.google.gwt.user.client.ui.PushButton(new com.google.gwt.user.client.ui.Image((ghostItem ? resources.increaseIcon() : resources.decreaseIcon()))); button.addStyleName(style.buttonStyle()); button.setEnabled((!ghostItem)); button.addClickHandler((ghostItem ? new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { ((org.ovirt.engine.ui.common.widget.AddRemoveRowWidget<M, T, V>.AddRemoveRowPanel) (widget.getParent())).swapButton(createButton(item)); addGhostEntry(); onAdd(value, widget); } } : new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { removeEntry(item); onRemove(value, widget); } })); return button; }


@java.lang.Override public void edit(final org.ovirt.engine.ui.uicommonweb.models.vms.MigrateModel object) { driver.edit(object); updateMessages(object); object.getPropertyChangedEvent().addListener(new org.ovirt.engine.ui.uicompat.IEventListener<org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs>() { @java.lang.Override public void eventRaised(org.ovirt.engine.ui.uicompat.Event<? extends org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs> ev, java.lang.Object sender, org.ovirt.engine.ui.uicompat.PropertyChangedEventArgs args) { updateMessages(object); } }); }

@org.junit.Test public void testVmIllegal() { setUpGeneralValidations(); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_IS_ILLEGAL)).when(vmValidator).vmNotIlegal(); doReturn(org.ovirt.engine.core.bll.CreateAllSnapshotsFromVmCommandTest.getEmptyDiskList()).when(cmd).getDisksList(); assertFalse(cmd.canDoAction()); assertTrue(cmd.getReturnValue().getCanDoActionMessages().contains(VdcBllMessages.ACTION_TYPE_FAILED_VM_IMAGE_IS_ILLEGAL.name())); }

@java.lang.Override protected void executeVmCommand() { org.ovirt.engine.core.bll.VmHandler.warnMemorySizeLegal(org.ovirt.engine.core.bll.AddVmCommand.getParameters().getVm().getStaticData(), org.ovirt.engine.core.bll.AddVmCommand.getEffectiveCompatibilityVersion()); java.util.ArrayList<java.lang.String> errorMessages = new java.util.ArrayList<>(); if (canAddVm(errorMessages, destStorages.values())) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { addVmStatic(); addVmDynamic(); addVmNetwork(); addVmNumaNodes(); addVmStatistics(); addActiveSnapshot(); addVmPermission(); addVmInit(); addVmRngDevice(); getCompensationContext().stateChanged(); return null; }); if (addVmImages()) { org.ovirt.engine.core.utils.transaction.TransactionSupport.executeInNewTransaction(() -> { copyVmDevices(); addDiskPermissions(); addVmPayload(); updateSmartCardDevices(); addVmWatchdog(); addGraphicsDevice(); setActionReturnValue(getVm().getId()); setSucceeded(true); return null; }); } } else { log.error("Failed to add vm . The reasons are: {}", org.apache.commons.lang.StringUtils.join(errorMessages, ',')); } }

@org.junit.Test public void insufficientDiskSpaceWithSnapshots() { org.ovirt.engine.core.common.action.ImportVmParameters parameters = createParameters(); org.ovirt.engine.core.bll.validator.ImportValidator validator = setupDiskSpaceTest(parameters); parameters.setCopyCollapse(false); doReturn(new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN)).when(multipleSdValidator).allDomainsHaveSpaceForDisksWithSnapshots(anyList()); assertEquals(VdcBllMessages.ACTION_TYPE_FAILED_DISK_SPACE_LOW_ON_STORAGE_DOMAIN, validator.validateSpaceRequirements(java.util.Collections.<org.ovirt.engine.core.common.businessentities.storage.DiskImage>emptyList()).getMessage()); verify(multipleSdValidator, never()).allDomainsHaveSpaceForClonedDisks(anyList()); verify(multipleSdValidator).allDomainsHaveSpaceForDisksWithSnapshots(anyList()); verify(multipleSdValidator, never()).allDomainsHaveSpaceForNewDisks(anyList()); }


private void calculateNetworkImplementationDetailsAndAssertSync(org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface, boolean expectSync, java.lang.String networkName, boolean vmNet, int mtu, int vlanId, org.ovirt.engine.core.common.businessentities.network.NetworkQoS qos) { org.ovirt.engine.core.common.businessentities.network.Network network = createNetwork(networkName, vmNet, mtu, vlanId); org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface.NetworkImplementationDetails networkImplementationDetails = org.ovirt.engine.core.utils.NetworkUtils.calculateNetworkImplementationDetails(network, qos, iface); assertNotNull("Network implementation details should be filled.", networkImplementationDetails); assertEquals((("Network implementation details should be " + (expectSync ? "in" : "out of")) + " sync."), expectSync, networkImplementationDetails.isInSync()); }
public java.util.concurrent.Future<org.ovirt.engine.core.common.action.VdcReturnValueBase> executeAsyncCommand(final org.ovirt.engine.core.common.action.VdcActionType actionType, final org.ovirt.engine.core.common.action.VdcActionParametersBase parameters, final org.ovirt.engine.core.bll.context.CommandContext cmdContext) { final org.ovirt.engine.core.bll.CommandBase<?> command = org.ovirt.engine.core.bll.CommandsFactory.createCommand(actionType, parameters, cmdContext); return org.ovirt.engine.core.bll.tasks.CommandExecutor.executor.submit(new java.util.concurrent.Callable<org.ovirt.engine.core.common.action.VdcReturnValueBase>() { @java.lang.Override public org.ovirt.engine.core.common.action.VdcReturnValueBase call() throws java.lang.Exception { return executeCommand(command); } }); }

void onIsValidPropertyChange(org.ovirt.engine.ui.common.widget.HasValidation editor, org.ovirt.engine.ui.uicommonweb.models.EntityModel model) { if (model.getIsValid()) { editor.markAsValid(); } else { editor.markAsInvalid(model.getInvalidityReasons()); } }

@java.lang.Override protected boolean canEdit(org.ovirt.engine.ui.uicommonweb.models.EntityModel model) { return false; }
public java.lang.String getCpuNameByCpuId(java.lang.String name, org.ovirt.engine.core.compat.Version ver) { final org.ovirt.engine.core.bll.CpuFlagsManagerHandler.CpuFlagsManager cpuFlagsManager = org.ovirt.engine.core.bll.CpuFlagsManagerHandler.managersDictionary.get(ver); return cpuFlagsManager != null ? cpuFlagsManager.getCpuNameByCpuId(name) : null; }
@org.junit.Test public void testQueryExecution() { org.ovirt.engine.core.compat.Guid adElementGuid = org.ovirt.engine.core.compat.Guid.newGuid(); when(getQueryParameters().getId()).thenReturn(adElementGuid); org.ovirt.engine.core.common.businessentities.Permissions expected = new org.ovirt.engine.core.common.businessentities.Permissions(); expected.setad_element_id(adElementGuid); org.ovirt.engine.core.dao.PermissionDAO permissionDAOMock = mock(org.ovirt.engine.core.dao.PermissionDAO.class); when(permissionDAOMock.getAllForAdElement(adElementGuid, getUser().getId(), getQueryParameters().isFiltered())).thenReturn(java.util.Collections.singletonList(expected)); when(getDbFacadeMockInstance().getPermissionDao()).thenReturn(permissionDAOMock); getQuery().executeQueryCommand(); @java.lang.SuppressWarnings("unchecked") java.util.List<org.ovirt.engine.core.common.businessentities.Permissions> actual = ((java.util.List<org.ovirt.engine.core.common.businessentities.Permissions>) (getQuery().getQueryReturnValue().getReturnValue())); assertEquals("Wrong number of returned permissions", 1, actual.size()); assertEquals("Wrong returned permissions", expected, actual.get(0)); }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Changes done to the Networking configuration are temporary until explicitly saved.\n\nAre you sure you want to make the changes persistent?") java.lang.String areYouSureYouWantToMakeTheChangesPersistentMsg();

public java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage> getClusterCpuAndMemoryAverage() throws java.sql.SQLException { java.util.List<org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage> result = new java.util.ArrayList<>(); try (java.sql.Connection con = dwhDataSource.getConnection();java.sql.PreparedStatement clusterResourcePS = con.prepareStatement(clusterProperties.getProperty(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.CLUSTER_LAST_24_AVERAGE));java.sql.ResultSet clusterResourceRS = clusterResourcePS.executeQuery()) { while (clusterResourceRS.next()) { result.add(new org.ovirt.engine.ui.frontend.server.dashboard.models.ClusterResourceAverage(clusterResourceRS.getString(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.NAME), clusterResourceRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.CPU_AVERAGE), clusterResourceRS.getDouble(org.ovirt.engine.ui.frontend.server.dashboard.dao.ClusterDwhDAO.MEM_AVERAGE))); } } return result; }

@org.ovirt.engine.ui.uicompat.DefaultStringValue("Import Pre-Configured Domain") java.lang.String importPreConfiguredDomainTitle();

protected org.ovirt.engine.core.bll.ValidationResult validateModelCompatibleWithOs() { org.ovirt.engine.core.bll.validator.VmWatchdogValidator validator = getVmWatchdogValidator(); if (validator != null) { return validator.isModelCompatibleWithOs(); } else { return new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.ACTION_TYPE_FAILED_CLUSTER_CAN_NOT_BE_EMPTY); } }


@java.lang.Override public org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc disconnectStoragePool(java.lang.String spUUID, int hostSpmId, java.lang.String SCSIKey) { org.ovirt.vdsm.jsonrpc.client.JsonRpcRequest request = new org.ovirt.vdsm.jsonrpc.client.RequestBuilder("StoragePool.disconnect").withParameter("storagepoolID", spUUID).withParameter("hostID", hostSpmId).withParameter("scsiKey", SCSIKey).build(); java.util.Map<java.lang.String, java.lang.Object> response = new org.ovirt.engine.core.vdsbroker.jsonrpc.FutureMap(this.client, request); return new org.ovirt.engine.core.vdsbroker.vdsbroker.StatusOnlyReturnForXmlRpc(response); }

public org.ovirt.engine.core.common.businessentities.Snapshot addActiveSnapshot(org.ovirt.engine.core.compat.Guid snapshotId, org.ovirt.engine.core.common.businessentities.VM vm, org.ovirt.engine.core.common.businessentities.Snapshot.SnapshotStatus snapshotStatus, final org.ovirt.engine.core.bll.context.CompensationContext compensationContext) { return addActiveSnapshot(snapshotId, vm, snapshotStatus, "", null, compensationContext); }





private void assertHostNicVfsConfigEquals(org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig config1, org.ovirt.engine.core.common.businessentities.network.HostNicVfsConfig config2) { assertEquals(config1.getId(), config2.getId()); assertEquals(config1.getNicId(), config2.getNicId()); assertEquals(config1.getMaxNumOfVfs(), config2.getMaxNumOfVfs()); assertEquals(config1.getNumOfVfs(), config2.getNumOfVfs()); assertEquals(config1.getNumOfFreeVfs(), config2.getNumOfFreeVfs()); assertEquals(config1.isAllNetworksAllowed(), config2.isAllNetworksAllowed()); }
@org.junit.Test public void clusterAlreadyInLocalFs() { prepareManagementNetworkMocks(); createCommandWithDefaultVdsGroup(); oldGroupIsDetachedDefault(); storagePoolIsLocalFS(); setupCpu(); allQueriesForVms(); storagePoolAlreadyHasCluster(); architectureIsUpdatable(); canDoActionFailedWithReason(VdcBllMessages.VDS_GROUP_CANNOT_ADD_MORE_THEN_ONE_HOST_TO_LOCAL_STORAGE); }
private void setupGlusterMock(boolean clusterHasServers, org.ovirt.engine.core.common.businessentities.VDS upServer, boolean hasPeers) throws java.lang.Exception { setupCommonMock(true); when(commandMock.createReturnValue()).thenCallRealMethod(); when(commandMock.getReturnValue()).thenCallRealMethod(); doCallRealMethod().when(commandMock).addCanDoActionMessage(any(org.ovirt.engine.core.common.errors.EngineMessage.class)); when(commandMock.getGlusterUtil()).thenReturn(glusterUtil); when(glusterUtil.getPeers(any(org.ovirt.engine.core.bll.utils.EngineSSHClient.class))).thenReturn((hasPeers ? java.util.Collections.singleton(org.ovirt.engine.core.bll.hostdeploy.AddVdsCommandTest.PEER_1) : java.util.Collections.<java.lang.String>emptySet())); when(commandMock.getGlusterDBUtils()).thenReturn(glusterDBUtils); when(clusterUtils.hasServers(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(clusterHasServers); when(vdsDaoMock.getAllForVdsGroup(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(mockVdsInDb((clusterHasServers ? org.ovirt.engine.core.common.businessentities.VDSStatus.Maintenance : org.ovirt.engine.core.common.businessentities.VDSStatus.Initializing))); when(clusterUtils.getUpServer(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(upServer); }
@java.lang.Override protected void setActionMessageParameters() { addCanDoActionMessage(EngineMessage.VAR__ACTION__REFRESH); addCanDoActionMessage(EngineMessage.VAR__TYPE__HOST_CAPABILITIES); }

@org.junit.Test public void testCanAttachMultipleISOOrExport() { for (org.ovirt.engine.core.common.businessentities.StorageDomainType type : java.util.Arrays.<org.ovirt.engine.core.common.businessentities.StorageDomainType>asList(StorageDomainType.ISO, StorageDomainType.ImportExport)) { storageDomain.setStorageDomainType(type); spyValidator(); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain> domainList = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.StorageDomain>(); org.ovirt.engine.core.common.businessentities.StorageDomain domainWithSameType = new org.ovirt.engine.core.common.businessentities.StorageDomain(); domainWithSameType.setStorageDomainType(type); domainList.add(domainWithSameType); when(storageDomainDao.getAllForStoragePool(any(org.ovirt.engine.core.compat.Guid.class))).thenReturn(domainList); org.ovirt.engine.core.bll.ValidationResult attachMultipleISOOrExportResult = validator.validateDomainCanBeAttachedToPool(); assertFalse((("Attaching domain of type " + type) + " succeeded while it should have failed"), attachMultipleISOOrExportResult.isValid()); assertFailingMessage((("Attaching domain of type " + type) + " succeeded though another domain of the same type already exists in the pool"), attachMultipleISOOrExportResult, (type == (org.ovirt.engine.core.common.businessentities.StorageDomainType.ISO) ? org.ovirt.engine.core.common.errors.VdcBllMessages.ERROR_CANNOT_ATTACH_MORE_THAN_ONE_ISO_DOMAIN : org.ovirt.engine.core.common.errors.VdcBllMessages.ERROR_CANNOT_ATTACH_MORE_THAN_ONE_EXPORT_DOMAIN)); } }
@java.lang.Override public java.lang.Void runInTransaction() { for (org.ovirt.engine.core.common.businessentities.storage.DiskImage image : filteredImages) { if ((image.getDiskStorageType()) == (org.ovirt.engine.core.common.businessentities.storage.DiskStorageType.CINDER)) { cinderDisks.add(((org.ovirt.engine.core.common.businessentities.storage.CinderDisk) (image))); continue; } org.ovirt.engine.core.common.action.VdcReturnValueBase vdcReturnValue = runInternalActionWithTasksContext(VdcActionType.TryBackToSnapshot, buildTryBackToSnapshotParameters(newActiveSnapshotId, image)); if (vdcReturnValue.getSucceeded()) { getTaskIdList().addAll(vdcReturnValue.getInternalVdsmTaskIdList()); } else if ((vdcReturnValue.getFault()) != null) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(vdcReturnValue.getFault().getError(), vdcReturnValue.getFault().getMessage()); } else { log.error("Cannot create snapshot"); throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.IRS_IMAGE_STATUS_ILLEGAL); } } if ((!(cinderDisks.isEmpty())) && (!(tryBackAllCinderDisks(cinderDisks, newActiveSnapshotId)))) { throw new org.ovirt.engine.core.common.errors.VdcBLLException(org.ovirt.engine.core.common.errors.VdcBllErrors.CINDER_ERROR, "Failed to preview a snapshot!"); } return null; }



@org.junit.Test public void testWarnOnActiveVmPositive() { testWarnOnActiveVmInner(true); org.mockito.Mockito.verify(mockCommandBase).auditLog(auditLogableBaseCaptor.capture(), org.mockito.Mockito.same(AuditLogType.NETWORK_UPDATE_DISPLAY_FOR_CLUSTER_WITH_ACTIVE_VM)); final org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogableBase actualLoggable = auditLogableBaseCaptor.getValue(); org.junit.Assert.assertEquals(org.ovirt.engine.core.bll.network.cluster.helper.DisplayNetworkClusterHelperTest.TEST_CLUSTER_ID, actualLoggable.getVdsGroupId()); org.junit.Assert.assertEquals(org.ovirt.engine.core.bll.network.cluster.helper.DisplayNetworkClusterHelperTest.TEST_NETWORK_NAME, actualLoggable.getCustomValue("networkname")); }
protected java.util.Map<java.lang.String, java.lang.Object> build() { java.util.Map<java.lang.String, java.lang.Object> struct = new java.util.HashMap<>(); struct.put("vmId", org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getParameters().getVmId().toString()); struct.put("vcpuLimit", java.lang.String.valueOf(org.ovirt.engine.core.vdsbroker.UpdateVmPolicyVDSCommand.getParameters().getCpuLimit())); return struct; }




@java.lang.Override protected boolean canDoAction() { if ((!(org.ovirt.engine.core.bll.UpdateVmDiskCommand.isVmExist())) || (!(isDiskExist(getOldDisk())))) { return false; } if (!(org.ovirt.engine.core.bll.UpdateVmDiskCommand.canRunActionOnNonManagedVm())) { return false; } if (!(vmsDiskOrSnapshotPluggedTo.isEmpty())) { if ((isAtLeastOneVmIsNotDown(vmsDiskOrSnapshotPluggedTo)) && (shouldUpdatePropertiesOtherThanSize())) { return failCanDoAction(VdcBllMessages.ACTION_TYPE_FAILED_VM_IS_NOT_DOWN); } boolean isUpdatedAsBootable = (!(getOldDisk().isBoot())) && (getNewDisk().isBoot()); if (isUpdatedAsBootable && (!(validate(noVmsContainBootableDisks(vmsDiskPluggedTo))))) { return false; } boolean isDiskInterfaceUpdated = (getOldDisk().getDiskInterface()) != (getNewDisk().getDiskInterface()); if (isDiskInterfaceUpdated && (!(validatePciAndIdeLimit(vmsDiskOrSnapshotPluggedTo)))) { return false; } } if ((DiskStorageType.IMAGE.equals(getOldDisk().getDiskStorageType())) && (!(validateCanResizeDisk()))) { return false; } org.ovirt.engine.core.bll.validator.DiskValidator diskValidator = getDiskValidator(getNewDisk()); return (((validateCanUpdateShareable()) && (validateCanUpdateReadOnly())) && (validate(diskValidator.isVirtIoScsiValid(org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVm())))) && (((getOldDisk().getDiskInterface()) == (getNewDisk().getDiskInterface())) || (validate(diskValidator.isDiskInterfaceSupported(org.ovirt.engine.core.bll.UpdateVmDiskCommand.getVm())))); }
@org.junit.Test public void testValidateNameSizeImportAsCloned() { java.lang.String string300 = ((string100) + (string100)) + (string100); checkVmName(true, string300); }
@java.lang.Override protected void initDetailModels() { super.initDetailModels(); setVmBasicDiskListModel(new org.ovirt.engine.ui.uicommonweb.models.userportal.VmBasicDiskListModel()); org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel> list = new org.ovirt.engine.ui.uicompat.ObservableCollection<org.ovirt.engine.ui.uicommonweb.models.EntityModel>(); list.add(getVmBasicDiskListModel()); setDetailModels(list); setActiveDetailModel(getVmBasicDiskListModel()); }
private boolean candidateOperation(org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op1, org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkItemModel<?> op2, boolean drop) { if (op1 == null) { throw new java.lang.IllegalArgumentException("null Operands"); } org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperation candidate = org.ovirt.engine.ui.uicommonweb.models.hosts.network.NetworkOperationFactory.operationFor(op1, op2, true); if (drop) { onOperation(candidate, candidate.getCommand(op1, op2, allNics)); } if (((!(candidate.equals(currentCandidate))) || (!(equals(op1, currentOp1)))) || (!(equals(op2, currentOp2)))) { currentCandidate = candidate; currentOp1 = op1; currentOp2 = op2; getOperationCandidateEvent().raise(this, new org.ovirt.engine.ui.uicommonweb.models.hosts.network.OperationCadidateEventArgs(candidate, op1, op2)); } return !(candidate.isNullOperation()); }
public void setPmOptionsMap(java.util.HashMap<java.lang.String, java.lang.String> value) { java.lang.String pmOptions = ""; for (java.util.Map.Entry<java.lang.String, java.lang.String> pair : value.entrySet()) { java.lang.String k = pair.getKey(); java.lang.String v = pair.getValue(); if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(k, org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmPortKey)) { getPmPort().setEntity((org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(value.get(k)) ? "" : value.get(k))); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(k, org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmSlotKey)) { getPmSlot().setEntity((org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(value.get(k)) ? "" : value.get(k))); } else if (org.ovirt.engine.core.compat.StringHelper.stringsEqual(k, org.ovirt.engine.ui.uicommonweb.models.hosts.HostModel.PmSecureKey)) { getPmSecure().setEntity(java.lang.Boolean.parseBoolean(value.get(k))); } else { if (org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(v)) { pmOptions += org.ovirt.engine.core.compat.StringFormat.format("%1$s,", k); } else { pmOptions += org.ovirt.engine.core.compat.StringFormat.format("%1$s=%2$s,", k, v); } } } if (!(org.ovirt.engine.core.compat.StringHelper.isNullOrEmpty(pmOptions))) { getPmOptions().setEntity(pmOptions.substring(0, ((pmOptions.length()) - 1))); } }

public void syncWithBackend() { final org.ovirt.engine.core.common.businessentities.StoragePool dc = getSelectedDc(); if (dc == null) { return; } boolean isSupportBridgesReportByVDSM = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.SupportBridgesReportByVDSM, dc.getcompatibility_version().toString()))); setSupportBridgesReportByVDSM(isSupportBridgesReportByVDSM); boolean isMTUOverrideSupported = ((java.lang.Boolean) (org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getConfigValuePreConverted(ConfigurationValues.MTUOverrideSupported, dc.getcompatibility_version().toString()))); setMTUOverrideSupported(isMTUOverrideSupported); onExportChanged(); getProfiles().updateDcId(dc.getId()); }
@java.lang.Override protected org.ovirt.engine.api.model.HostNic postPopulate(org.ovirt.engine.api.model.HostNic model) { org.ovirt.engine.api.model.HostNic hostNIC = super.postPopulate(model); org.ovirt.engine.api.model.Qos qos = hostNIC.getQos(); qos.setType(QosType.HOSTNETWORK); qos.setName(null); qos.setDataCenter(null); return hostNIC; }
@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.network> getAllForDataCenter(org.ovirt.engine.core.compat.Guid id) { return getCallsHandler().executeReadList("GetAllNetworkByStoragePoolId", org.ovirt.engine.core.dao.NetworkDAODbFacadeImpl.NetworkRowMapper.instance, getCustomMapSqlParameterSource().addValue("id", id)); }
protected org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolManagerStrategy getMacPool() { return org.ovirt.engine.core.di.Injector.get(org.ovirt.engine.core.bll.network.macpoolmanager.MacPoolPerDc.class).poolForDataCenter(params.getStoragePoolId()); }
@org.junit.Test public void checkRemoveIscsiConnectionDisksExist() { parameters.setStorageServerConnection(iSCSIConnection); when(storageServerConnectionDao.get(iSCSIConnection.getid())).thenReturn(iSCSIConnection); java.util.List<org.ovirt.engine.core.common.businessentities.storage.LUNs> luns = new java.util.ArrayList<org.ovirt.engine.core.common.businessentities.storage.LUNs>(); org.ovirt.engine.core.common.businessentities.storage.LUNs lun1 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun1.setLUN_id("3600144f09dbd05000000517e730b1212"); lun1.setStorageDomainName("storagedomain1"); lun1.setvolume_group_id(""); lun1.setDiskAlias("disk1"); luns.add(lun1); org.ovirt.engine.core.common.businessentities.storage.LUNs lun2 = new org.ovirt.engine.core.common.businessentities.storage.LUNs(); lun2.setLUN_id("3600144f09dbd05000000517e730b1212"); lun2.setStorageDomainName("storagedomain4"); lun2.setvolume_group_id(""); lun2.setDiskAlias("disk2"); luns.add(lun2); when(lunDao.getAllForStorageServerConnection(iSCSIConnection.getid())).thenReturn(luns); org.ovirt.engine.core.bll.CanDoActionTestUtils.runAndAssertCanDoActionFailure(command, VdcBllMessages.ACTION_TYPE_FAILED_STORAGE_CONNECTION_BELONGS_TO_SEVERAL_DISKS); }
@java.lang.Override protected org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap createWidgetConfiguration() { return super.createWidgetConfiguration().update(foremanTab, hiddenField()).putAll(poolSpecificFields(), hiddenField()).putOne(isDeleteProtectedEditor, hiddenField()).putOne(isStatelessEditor, hiddenField()).putOne(isRunAndPauseEditor, hiddenField()).putOne(commentEditor, hiddenField()).putOne(vmTypeEditor, hiddenField()).putOne(oSTypeEditor, hiddenField()).putOne(initialRunTab, hiddenField()).putOne(expander, hiddenField()).putOne(allowConsoleReconnectEditor, hiddenField()).putOne(cdAttachedEditor, hiddenField()).putOne(cdImageEditor, hiddenField()).putOne(refreshButton, hiddenField()).putOne(timeZoneEditor, hiddenField()).putOne(generalLabel, hiddenField()).putOne(quotaEditor, hiddenField()).putOne(cpuAllocationPanel, hiddenField()).putOne(vncKeyboardLayoutEditor, hiddenField()).putOne(storageAllocationPanel, hiddenField()).putOne(customPropertiesTab, hiddenField()).putOne(ssoMethodLabel, hiddenField()).putOne(ssoMethodNone, hiddenField()).putOne(ssoMethodGuestAgent, hiddenField()).putOne(hostCpuEditor, hiddenField()).putOne(templateVersionNameEditor, hiddenField()).putOne(bootMenuEnabledEditor, hiddenField()).putOne(serialNumberPolicyEditor, hiddenField()).putOne(timeZoneEditorWithInfo, hiddenField()).putOne(startRunningOnPanel, hiddenField()).putOne(spiceCopyPasteEnabledEditor, hiddenField()).putOne(spiceFileTransferEnabledEditor, hiddenField()).putOne(iconTab, hiddenField()).putOne(consoleDisconnectActionEditor, hiddenField()); }
@org.junit.Test public void equalSpaceThreshold() { org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings settings = new org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceCheckerTest.SpaceTestSettings(); settings.diskSpaceFree = 5; settings.diskSpaceUsed = 5; settings.spaceThresholdGB = 5; settings.spaceThresholdPct = 10; org.ovirt.engine.core.common.businessentities.storage_domains domain = setupForSpaceTest(settings); assertFalse(org.ovirt.engine.core.bll.command.utils.StorageDomainSpaceChecker.isBelowThresholds(domain)); }
@java.lang.Override public java.lang.String getValue(org.ovirt.engine.core.common.businessentities.VmTemplate object) { return (java.lang.String.valueOf(object.getMemSizeMb())) + " MB"; }
protected org.ovirt.engine.core.bll.SPMAsyncTask ConcreteCreateTask(org.ovirt.engine.core.common.asynctasks.AsyncTaskCreationInfo asyncTaskCreationInfo, org.ovirt.engine.core.common.action.VdcActionType parentCommand) { throw new org.ovirt.engine.core.compat.NotImplementedException(); }
protected org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator getStorageDomainValidator(org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain) { return new org.ovirt.engine.core.bll.validator.storage.StorageDomainValidator(storageDomain); }

@java.lang.Override public java.util.List<org.ovirt.engine.core.common.businessentities.VDSGroup> getByName(java.lang.String name, boolean isCaseSensitive) { org.springframework.jdbc.core.namedparam.MapSqlParameterSource parameterSource = getCustomMapSqlParameterSource().addValue("vds_group_name", name).addValue("is_case_sensitive", isCaseSensitive); return getCallsHandler().executeReadList("GetVdsGroupByVdsGroupName", org.ovirt.engine.core.dao.VdsGroupDAODbFacadeImpl.VdsGroupRowMapper.instance, parameterSource); }


@java.lang.Override protected org.ovirt.engine.ui.common.widget.uicommon.popup.vm.PopupWidgetConfigMap createWidgetConfiguration() { return super.createWidgetConfiguration().putAll(allTabs(), simpleField().visibleInAdvancedModeOnly()).putAll(adancedFieldsFromGeneralTab(), simpleField().visibleInAdvancedModeOnly()).putAll(consoleTabWidgets(), simpleField().visibleInAdvancedModeOnly()).update(consoleTab, simpleField()).update(numOfMonitorsEditor, simpleField()).update(isSingleQxlEnabledEditor, simpleField()).putOne(isSoundcardEnabledEditor, simpleField().visibleInAdvancedModeOnly()).putOne(isConsoleDeviceEnabledEditor, simpleField().visibleInAdvancedModeOnly()); }

@org.junit.Test public void testIscsiLunCannotBeAddedIfAddingFloatingDisk() { org.ovirt.engine.core.common.businessentities.storage.LunDisk disk = createISCSILunDisk(ScsiGenericIO.UNFILTERED, true, DiskInterface.IDE); org.ovirt.engine.core.common.action.AddDiskParameters parameters = org.ovirt.engine.core.bll.AddDiskCommandTest.createParameters(); parameters.setDiskInfo(disk); initializeCommand(org.ovirt.engine.core.compat.Guid.newGuid(), parameters); assertFalse("Floating disk with SCSI reservation set successfully added", command.checkIfLunDiskCanBeAdded(spyDiskValidator(disk))); verifyCanDoActionMessagesContainMessage(VdcBllMessages.ACTION_TYPE_FAILED_SCSI_RESERVATION_NOT_VALID_FOR_FLOATING_DISK); }
@java.lang.Override protected void executeQueryCommand() { org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = storageDomainDao.get(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); if (storageDomain.getStorageType().isCinderDomain()) { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(diskImages); } else { java.util.List<org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImages = diskImageDao.getAllSnapshotsForStorageDomain(org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getParameters().getId()); java.util.Map<org.ovirt.engine.core.compat.Guid, org.ovirt.engine.core.common.businessentities.storage.DiskImage> diskImagesMap = new java.util.HashMap<>(); for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { if (diskImage.getActive()) { diskImage.getSnapshots().add(org.ovirt.engine.core.common.businessentities.storage.DiskImage.copyOf(diskImage)); diskImagesMap.put(diskImage.getId(), diskImage); } } for (org.ovirt.engine.core.common.businessentities.storage.DiskImage diskImage : diskImages) { if (!(diskImage.getActive())) { org.ovirt.engine.core.common.businessentities.storage.DiskImage activeImage = diskImagesMap.get(diskImage.getId()); if (activeImage != null) { activeImage.getSnapshots().add(diskImage); } } } org.ovirt.engine.core.bll.storage.disk.image.GetAllDisksByStorageDomainIdQuery.getQueryReturnValue().setReturnValue(new java.util.ArrayList(diskImagesMap.values())); } }
public void sendMessage(byte[] message) { java.nio.ByteBuffer messageBuf = java.nio.ByteBuffer.wrap(message); messageBuf = messageBuf.slice(); org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient.log.info(("Message sent: " + (new java.lang.String(message, java.nio.charset.Charset.forName("UTF-8"))))); java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocate(8); buffer.order(java.nio.ByteOrder.BIG_ENDIAN); buffer.putLong(messageBuf.remaining()); buffer.rewind(); outbox.addFirst(buffer); outbox.addFirst(messageBuf); final org.ovirt.vdsm.jsonrpc.client.reactors.ReactorClient client = this; reactor.queueFuture(new java.util.concurrent.FutureTask(new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws org.ovirt.vdsm.jsonrpc.client.ClientConnectionException { client.updateInterestedOps(); return null; } })); }
private void validateDimensions() { boolean dimensionsValid = ((((image.getWidth()) >= (dimensionsType.getMinWidth())) && ((image.getWidth()) <= (dimensionsType.getMaxWidth()))) && ((image.getHeight()) >= (dimensionsType.getMinHeight()))) && ((image.getHeight()) <= (dimensionsType.getMaxHeight())); if (!dimensionsValid) { validationResult = new org.ovirt.engine.core.bll.ValidationResult(org.ovirt.engine.core.common.errors.VdcBllMessages.PROVIDED_VM_ICON_HAS_INVALID_DIMENSIONS, (((((((("$allowedDimensions " + "from ") + (dimensionsType.getMinWidth())) + "x") + (dimensionsType.getMinHeight())) + " to ") + (dimensionsType.getMaxWidth())) + "x") + (dimensionsType.getMaxHeight())), ((("$currentDimensions " + (image.getWidth())) + "x") + (image.getHeight()))); } }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("Edit and Approve Host") java.lang.String editAndApproveHostTitle();
@org.junit.Test public void testSave() { dao.save(new_bookmark); org.ovirt.engine.core.common.businessentities.bookmarks result = dao.getByName(new_bookmark.getbookmark_name()); assertNotNull(result); }

@java.lang.Override public void onSuccess(java.lang.Object target, java.lang.Object returnValue) { if (returnValue != null) { org.ovirt.engine.core.common.businessentities.VM vm = ((org.ovirt.engine.core.common.queries.VdcQueryReturnValue) (returnValue)).getReturnValue(); updateVms(java.util.Collections.singletonList(vm)); clearErrorAndWarning(); } else { setError(messages.failedToLoadOva(getOvaPath().getEntity())); } stopProgress(); }
public org.ovirt.engine.core.common.job.Step addStep(org.ovirt.engine.core.bll.job.ExecutionContext context, org.ovirt.engine.core.common.job.StepEnum stepName, java.lang.String description, boolean isExternal) { if (context == null) { return null; } org.ovirt.engine.core.common.job.Step step = null; if (context.isMonitored()) { if (description == null) { description = org.ovirt.engine.core.dal.job.ExecutionMessageDirector.getInstance().getStepMessage(stepName); } try { org.ovirt.engine.core.common.job.Job job = context.getJob(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsJob)) && (job != null)) { step = job.addStep(stepName, description); try { step.setExternal(isExternal); jobRepository.saveStep(step); } catch (java.lang.Exception e) { log.error("Failed to save new step '{}' for job '{}', '{}': {}", stepName.name(), job.getId(), job.getActionType().name(), e.getMessage()); log.debug("Exception", e); job.getSteps().remove(step); step = null; } } else { org.ovirt.engine.core.common.job.Step contextStep = context.getStep(); if (((context.getExecutionMethod()) == (org.ovirt.engine.core.bll.job.ExecutionContext.ExecutionMethod.AsStep)) && (contextStep != null)) { step = addSubStep(contextStep, stepName, description); step.setExternal(isExternal); } } } catch (java.lang.Exception e) { log.error("Exception", e); } } return step; }
@org.ovirt.engine.ui.uicompat.DefaultStringValue("External Providers") java.lang.String externalProvidersTitle();

private static java.lang.String getMessageToLog(java.lang.String loggerString, org.ovirt.engine.core.common.businessentities.AuditLog auditLog) { java.lang.String logMessage; if (loggerString.isEmpty()) { logMessage = auditLog.toStringForLogging(); } else { logMessage = org.ovirt.engine.core.dal.dbbroker.auditloghandling.AuditLogDirector.log.transform(loggerString, auditLog.getmessage()); } return logMessage; }
@java.lang.Override protected boolean canDoAction() { boolean returnValue = super.canDoAction(); org.ovirt.engine.core.common.businessentities.vm_pools oldPool = org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPoolDAO().get(org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getVmPool().getvm_pool_id()); if (returnValue && (oldPool == null)) { addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_UPDATE_POOL_NOT_FOUND); returnValue = false; } else if (returnValue && ((org.ovirt.engine.core.bll.UpdateVmPoolWithVmsCommand.getParameters().getVmsCount()) < 0)) { addCanDoActionMessage(VdcBllMessages.VM_POOL_CANNOT_DECREASE_VMS_FROM_POOL); returnValue = false; } return returnValue; }

@java.lang.Override protected org.springframework.jdbc.core.namedparam.MapSqlParameterSource createFullParametersMapper(org.ovirt.engine.core.common.businessentities.HostDevice entity) { return createIdParameterMapper(entity.getId()).addValue("parent_device_name", entity.getParentDeviceName()).addValue("capability", entity.getCapability()).addValue("iommu_group", entity.getIommuGroup()).addValue("product_name", entity.getProductName()).addValue("product_id", entity.getProductId()).addValue("vendor_name", entity.getVendorName()).addValue("vendor_id", entity.getVendorId()).addValue("physfn", entity.getParentPhysicalFunction()).addValue("total_vfs", entity.getTotalVirtualFunctions()).addValue("net_iface_name", entity.getNetworkInterfaceName()).addValue("driver", entity.getDriver()).addValue("is_assignable", entity.isAssignable()).addValue("address", org.ovirt.engine.core.utils.SerializationFactory.getSerializer().serialize(entity.getAddress())); }
@java.lang.Override @org.junit.Before public void setUp() throws java.lang.Exception { super.setUp(); dao = dbFacade.getAsyncTaskDao(); params = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); params.setSessionId("ASESSIONID"); params.setTransactionScopeOption(TransactionScopeOption.RequiresNew); taskParams = new org.ovirt.engine.core.common.action.VdcActionParametersBase(); taskParams.setSessionId("ASESSIONID"); taskParams.setTransactionScopeOption(TransactionScopeOption.RequiresNew); taskParams.setParentParameters(params); newAsyncTask = new org.ovirt.engine.core.common.businessentities.AsyncTasks(); newAsyncTask.setTaskId(org.ovirt.engine.core.compat.Guid.NewGuid()); newAsyncTask.setVdsmTaskId(org.ovirt.engine.core.compat.Guid.NewGuid()); newAsyncTask.setStartTime(new java.util.Date()); newAsyncTask.setaction_type(VdcActionType.AddDisk); newAsyncTask.setstatus(AsyncTaskStatusEnum.running); newAsyncTask.setresult(AsyncTaskResultEnum.success); newAsyncTask.setActionParameters(params); newAsyncTask.setTaskParameters(taskParams); newAsyncTask.setCommandId(org.ovirt.engine.core.compat.Guid.NewGuid()); newAsyncTask.setTaskType(AsyncTaskType.copyImage); newAsyncTask.setStoragePoolId(org.ovirt.engine.core.compat.Guid.NewGuid()); existingAsyncTask = dao.get(FixturesTool.EXISTING_TASK_ID); }
public java.util.Map<java.lang.String, java.lang.Object> glusterVolumeGeoRepSessionResume(java.lang.String volumeName, java.lang.String slaveHostName, java.lang.String slaveVolumeName, boolean force);

public void manage() { if ((getWindow()) != null) { return; } org.ovirt.engine.core.compat.Guid storagePoolId = ((getEntity().getStoragePoolId()) != null) ? getEntity().getStoragePoolId() : org.ovirt.engine.core.compat.Guid.Empty; org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery = new org.ovirt.engine.ui.frontend.AsyncQuery(); _asyncQuery.setModel(this); _asyncQuery.asyncCallback = new org.ovirt.engine.ui.frontend.INewAsyncCallback() { @java.lang.Override public void onSuccess(java.lang.Object model, java.lang.Object result) { org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkListModel clusterNetworkListModel = ((org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkListModel) (model)); java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network> dcNetworks = ((java.util.ArrayList<org.ovirt.engine.core.common.businessentities.network.Network>) (result)); org.ovirt.engine.ui.uicommonweb.models.clusters.ClusterNetworkManageModel networkToManage = createNetworkList(dcNetworks); clusterNetworkListModel.setWindow(networkToManage); networkToManage.setTitle(org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance().getConstants().assignDetachNetworksTitle()); networkToManage.setHashName("assign_networks"); } }; org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.getNetworkList(_asyncQuery, storagePoolId); }

@java.lang.Override public java.lang.Object Convert(java.lang.Object source, org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery) { org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.cachedCommandsCompatibilityVersions = ((java.util.HashMap<org.ovirt.engine.core.common.action.VdcActionType, org.ovirt.engine.core.common.queries.CommandVersionsInfo>) (source)); return org.ovirt.engine.ui.uicommonweb.dataprovider.AsyncDataProvider.IsCommandCompatible(vdcActionType, cluster, dc); }