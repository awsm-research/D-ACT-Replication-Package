public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1000, false); }
@java.lang.Override public void addMarker(@javax.annotation.Nonnull com.android.sched.marker.Marker marker) { synchronized(lock) { assert isValidMarker(marker.getClass()) : ((("Marker '" + (com.android.sched.item.Items.getName(marker.getClass()))) + "' is not supported for class '") + (this.getClass().getName())) + "'"; if ((markers) == null) { markers = new java.util.HashMap<java.lang.Class<? extends com.android.sched.marker.Marker>, com.android.sched.marker.Marker>(); } assert (markers.get(marker.getClass())) == null : ("Marker '" + (com.android.sched.item.Items.getName(marker.getClass()))) + "' already exists"; markers.put(marker.getClass(), marker); } }
public void saveSendingFileInfo(java.lang.String mimeType, java.lang.String uriString, boolean isHandover, boolean fromExternal) throws java.lang.IllegalArgumentException { synchronized(this) { mMultipleFlag = false; mMimeTypeOfSendingFile = mimeType; mIsHandoverInitiated = isHandover; android.net.Uri uri = android.net.Uri.parse(uriString); com.android.bluetooth.opp.BluetoothOppSendFileInfo sendFileInfo = com.android.bluetooth.opp.BluetoothOppSendFileInfo.generateFileInfo(mContext, uri, mimeType, fromExternal); uri = com.android.bluetooth.opp.BluetoothOppUtility.generateUri(uri, sendFileInfo); com.android.bluetooth.opp.BluetoothOppUtility.putSendFileInfo(uri, sendFileInfo); mUriOfSendingFile = uri.toString(); storeApplicationData(); } }
@java.lang.Override public void onRestoreInstanceState(android.os.Bundle savedInstanceState) { if (savedInstanceState != null) { super.onRestoreInstanceState(savedInstanceState); com.android.settings.wifi.WpsDialog.DialogState dialogState = mDialogState.valueOf(savedInstanceState.getString(com.android.settings.wifi.WpsDialog.DIALOG_STATE)); java.lang.String msg = savedInstanceState.getString(com.android.settings.wifi.WpsDialog.DIALOG_MSG_STRING); updateDialog(dialogState, msg); if (dialogState == (com.android.settings.wifi.WpsDialog.DialogState.WPS_START)) { startWps(); } } }
@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter printer) { if ((mState) != (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) { return; } if (!(printer.getId(mPrintService).equals(mPrintJob.getInfo().getPrinterId()))) { return; } if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ((("onPrinterFound() " + (printer.name)) + " state=") + (mState))); if (com.android.bips.p2p.P2pUtils.isP2p(printer)) { mConnection = new com.android.bips.p2p.P2pPrinterConnection(mPrintService, printer, this); return; } if ((com.android.bips.p2p.P2pUtils.isOnConnectedInterface(mPrintService, printer)) && ((mConnection) == null)) { mConnection = new com.android.bips.p2p.P2pPrinterConnection(mPrintService, printer, this); } mPrintService.getDiscovery().stop(this); mState = com.android.bips.LocalPrintJob.STATE_CAPABILITIES; mPath = printer.path; mPrintService.getCapabilitiesCache().request(printer, true, this); }
public java.util.List<java.io.File> getProguardFlagsFileFromWorkingDir() { java.util.List<java.io.File> proguardFlagsFileFromWorkingDir = new java.util.ArrayList<java.io.File>(proguardFlagsFiles.size()); for (java.io.File proguardFlagsFile : proguardFlagsFiles) { if (((workingDirectory) != null) && (!(proguardFlagsFile.isAbsolute()))) { proguardFlagsFileFromWorkingDir.add(new java.io.File(workingDirectory, proguardFlagsFile.getPath())); } else { proguardFlagsFileFromWorkingDir.add(proguardFlagsFile); } } return proguardFlagsFileFromWorkingDir; }
public void testXmlApi1() throws java.lang.Exception { assertEquals(("colors.xml:9: Error: @android:color/holo_red_light requires API level 14 (current min is 1)\n" + ((((("layout.xml:15: Error: View requires API level 11 (current min is 1): <CalendarView>\n" + "layout.xml:21: Error: View requires API level 14 (current min is 1): <GridLayout>\n") + "layout.xml:22: Error: @android:attr/actionBarSplitStyle requires API level 14 (current min is 1)\n") + "layout.xml:23: Error: @android:color/holo_red_light requires API level 14 (current min is 1)\n") + "layout.xml:9: Error: View requires API level 5 (current min is 1): <QuickContactBadge>\n") + "themes.xml:9: Error: @android:color/holo_red_light requires API level 14 (current min is 1)")), lintProject("apicheck/minsdk1.xml=>AndroidManifest.xml", "apicheck/layout.xml=>res/layout/layout.xml", "apicheck/themes.xml=>res/values/themes.xml", "apicheck/themes.xml=>res/color/colors.xml")); }
@java.lang.Deprecated public void iccTransmitApduLogicalChannel(int channel, int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { if ((mUiccProfile) != null) { mUiccProfile.iccTransmitApduLogicalChannel(channel, cla, command, p1, p2, p3, data, response); } else { loge("iccTransmitApduLogicalChannel Failed!"); } }
public void notifyIconDone(long bssid, com.android.server.wifi.hotspot2.IconEvent iconEvent) { java.lang.String filename = null; byte[] data = null; if (iconEvent != null) { try { data = retrieveIcon(iconEvent); filename = iconEvent.getFileName(); } catch (java.io.IOException ioe) { android.util.Log.e(com.android.server.wifi.hotspot2.Utils.hs2LogTag(getClass()), ((("Failed to retrieve icon: " + (ioe.toString())) + ": ") + (iconEvent.getFileName()))); } } mCallbacks.onIconResponse(bssid, filename, data); }
private boolean isDefaultMethod(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod jMethod) { assert jMethod != null; assert (jMethod.getEnclosingType()) instanceof com.android.jack.ir.ast.JDefinedInterface; return (!(jMethod.isAbstract())) && (!(jMethod.isStatic())); }
public static synchronized com.android.builder.sdk.SdkLoader getLoader(@com.android.annotations.NonNull java.io.File sdkLocation) { if (((com.android.builder.sdk.DefaultSdkLoader.sLoader) != null) && (!(sdkLocation.equals(com.android.builder.sdk.DefaultSdkLoader.sLoader.mSdkLocation)))) { throw new java.lang.IllegalStateException("Already created an SDK Loader with different SDK Path"); } return com.android.builder.sdk.DefaultSdkLoader.sLoader = new com.android.builder.sdk.DefaultSdkLoader(sdkLocation); }
void dump(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw, java.lang.String[] args) { super.dump(fd, pw, args); pw.println(getClass().getSimpleName()); pw.println("Tracking interfaces:"); pw.increaseIndent(); for (java.lang.String iface : mTrackingInterfaces.keySet()) { com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState ifaceState = mTrackingInterfaces.get(iface); pw.println(((iface + ":") + ifaceState)); pw.increaseIndent(); ifaceState.mIpClient.dump(fd, pw, args); pw.decreaseIndent(); } pw.decreaseIndent(); }
private android.net.IpSecTransform activate() throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { synchronized(this) { try { android.net.IIpSecService svc = getIpSecService(); android.net.IpSecTransformResponse result = svc.createTransform(mConfig, new android.os.Binder()); int status = result.status; checkResultStatus(status); mResourceId = result.resourceId; android.util.Log.d(android.net.IpSecTransform.TAG, ("Added Transform with Id " + (mResourceId))); mCloseGuard.open("build"); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } } return this; }
public void testInstall_withWorkingDir() throws java.lang.Exception { java.io.File workingDir = installer.getWorkingDir(); assertTrue(workingDir.mkdir()); libcore.tzdata.update2.TimeZoneBundleInstallerTest.createFile(new java.io.File(workingDir, "myFile"), new byte[]{ 'a' }); libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle(libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION, 1); assertEquals(TimeZoneBundleInstaller.INSTALL_SUCCESS, installer.installWithErrorCode(bundle.getBytes())); assertBundleInstalled(bundle); }
private boolean sendDeviceListMonitoringRequest() throws com.android.ddmlib.TimeoutException, java.io.IOException { byte[] request = com.android.ddmlib.AdbHelper.formAdbRequest("host:track-devices"); try { com.android.ddmlib.AdbHelper.write(mMainAdbConnection, request); com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(mMainAdbConnection, false); if ((resp.okay) == false) { com.android.ddmlib.Log.e("DeviceMonitor", ("adb refused request: " + (resp.message))); } return resp.okay; } catch (java.io.IOException e) { com.android.ddmlib.Log.e("DeviceMonitor", "Sending Tracking request failed!"); mMainAdbConnection.close(); throw e; } }
@android.annotation.Nullable public android.net.wifi.WifiConfiguration selectNetwork(java.util.List<com.android.server.wifi.ScanDetail> scanDetails, boolean connected, boolean disconnected, boolean untrustedNetworkAllowed) { mConnectableNetworks.clear(); if ((scanDetails.size()) == 0) { localLog("Empty connectivity scan result"); return null; } if ((mCurrentNetwork) == null) { mCurrentNetwork = mWifiConfigManager.getConfiguredNetwork(mWifiInfo.getNetworkId()); } mCurrentBssid = mWifiInfo.getBSSID(); if (!(isNetworkSelectionNeeded(scanDetails, connected, disconnected))) { return null; } for (com.android.server.wifi.WifiNetworkSelector.NetworkEvaluator registeredEvaluator : mEvaluators) { if (registeredEvaluator != null) { registeredEvaluator.update(scanDetails); } } updateBssidBlacklist(); java.util.List<com.android.server.wifi.ScanDetail> filteredScanDetails = filterScanResults(scanDetails); if ((filteredScanDetails.size()) == 0) { return null; } android.net.wifi.WifiConfiguration selectedNetwork = null; for (com.android.server.wifi.WifiNetworkSelector.NetworkEvaluator registeredEvaluator : mEvaluators) { if (registeredEvaluator != null) { selectedNetwork = registeredEvaluator.evaluateNetworks(scanDetails, mCurrentNetwork, mCurrentBssid, connected, untrustedNetworkAllowed, mConnectableNetworks); if (selectedNetwork != null) { break; } } } if (selectedNetwork != null) { mCurrentNetwork = selectedNetwork; mCurrentBssid = selectedNetwork.getNetworkSelectionStatus().getCandidate().BSSID; mLastNetworkSelectionTimeStamp = mClock.getElapsedSinceBootMillis(); } return selectedNetwork; }
private java.lang.String getWifiMeteredStatus(java.lang.String ssid) throws java.lang.Exception { final java.lang.String command = "cmd netpolicy list wifi-networks"; final java.lang.String policyString = runShellCommand(mInstrumentation, command); final java.util.regex.Matcher m = java.util.regex.Pattern.compile((("^" + ssid) + ";(true|false|none)$"), ((java.util.regex.Pattern.MULTILINE) | (java.util.regex.Pattern.UNIX_LINES))).matcher(policyString); if (!(m.find())) { fail("Unexpected format from cmd netpolicy"); } return m.group(1); }
private boolean registerStaIfaceCallback() { synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if (((mIWifiStaIface) == null) || ((mIWifiStaIfaceEventCallback) == null)) return false; try { kilroy(); android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.registerEventCallback(mIWifiStaIfaceEventCallback); return (status.code) == (android.hardware.wifi.V1_0.WifiStatusCode.SUCCESS); } catch (android.os.RemoteException e) { kilroy(); handleRemoteException(e); return false; } } }
private void checkNotFreed() { if (block.isFreed()) { throw new java.lang.IllegalStateException("buffer was freed"); } }
@org.gradle.api.tasks.TaskAction protected void doFullTaskAction() throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SigningException, com.android.ide.common.signing.KeytoolException, java.io.FileNotFoundException { final java.util.regex.Pattern pattern = java.util.regex.Pattern.compile((("resources-" + (getOutputBaseName())) + "-(.*).ap_")); java.util.List<java.lang.String> unprocessedSplits = com.google.common.collect.Lists.newArrayList(splits); for (java.io.File file : inputFiles) { java.util.regex.Matcher matcher = pattern.matcher(file.getName()); if ((matcher.matches()) && (isAbiSplit(file.getName()))) { java.lang.String apkName = getApkName(matcher.group(1)); java.io.File outFile = new java.io.File(getOutputDirectory(), apkName); getBuilder().packageApk(file.getAbsolutePath(), null, com.google.common.collect.ImmutableList.<java.io.File>of(), com.google.common.collect.ImmutableList.<java.io.File>of(), null, getJniFolders(), getMergingFolder(), com.google.common.collect.ImmutableSet.of(matcher.group(1)), isJniDebuggable(), getSigningConfig(), getPackagingOptions(), getPackagingOptionsFilter(), outFile.getAbsolutePath()); unprocessedSplits.remove(matcher.group(1)); } } if (!(unprocessedSplits.isEmpty())) { java.lang.String message = "Could not find resource package for " + (com.google.common.base.Joiner.on(',').join(unprocessedSplits)); getLogger().error(message); throw new java.lang.IllegalStateException(message); } }
private void dumpJava(java.io.FileDescriptor fd) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog log = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dumpProto(log); } try { java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd); protoOut.write(log.toByteArray()); protoOut.close(); } catch (java.io.IOException e) { errorLog("Unable to write Java protobuf to file descriptor."); } }
public void setIndex(int position, int index) { if (index < 0) { throw new java.lang.IllegalArgumentException("index < 0"); } if (hasIndex(position)) { throw new java.lang.IllegalStateException("index already set"); } this.index[position] = index; }
public final boolean isAccessModeSupported(java.lang.invoke.VarHandle.AccessMode accessMode) { final int testBit = 1 << (accessMode.ordinal()); return ((accessModesBitMask) & testBit) == testBit; }
private int parsePinPukErrorResult(android.os.AsyncResult ar) { int[] result = ((int[]) (ar.result)); if (result == null) { return -1; } else { int length = result.length; int attemptsRemaining = -1; if (length > 0) { attemptsRemaining = result[0]; } log(("parsePinPukErrorResult: attemptsRemaining=" + attemptsRemaining)); return attemptsRemaining; } }
public static java.lang.String getSignatureAttribute(java.lang.Object obj) { java.lang.reflect.Method method; try { java.lang.Class<?> c = obj.getClass(); if ((c == (java.lang.reflect.Method.class)) || (c == (java.lang.reflect.Constructor.class))) { c = java.lang.reflect.Executable.class; } method = c.getDeclaredMethod("getSignatureAttribute"); method.setAccessible(true); } catch (java.lang.Exception ex) { ex.printStackTrace(java.lang.System.out); return "<unknown>"; } try { return ((java.lang.String) (method.invoke(obj))); } catch (java.lang.IllegalAccessException ex) { throw new java.lang.RuntimeException(ex); } catch (java.lang.reflect.InvocationTargetException ex) { throw new java.lang.RuntimeException(ex); } }
@java.lang.Override public boolean print(@javax.annotation.Nonnull java.io.PrintStream printer, @javax.annotation.Nonnull java.lang.String value) { printer.print((("\"" + (value.replace("\"", "\\\""))) + "\"")); return true; }
@java.lang.Override public void binderDied() { mImsServiceProxy = null; mUt = null; mConfig = null; mEcbm = null; mMultiEndpoint = null; if (((mContext) != null) && (!(isDynamicBinding()))) { android.content.Intent intent = new android.content.Intent(com.android.ims.ImsManager.ACTION_IMS_SERVICE_DOWN); intent.putExtra(com.android.ims.ImsManager.EXTRA_PHONE_ID, mPhoneId); mContext.sendBroadcast(new android.content.Intent(intent)); } }
public void testVFE7() { try { new dot.junit.opcodes.iget_wide.d.T_iget_wide_12().run(); fail("expected a IllegalAccessError exception"); } catch (java.lang.IllegalAccessError e) { } }
public native void bind(java.io.FileDescriptor fd, java.net.InetAddress address, int port) throws android.system.ErrnoException, java.net.SocketException;
public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object object) { if (object == null) { throw new java.lang.NullPointerException("object == null"); } if (!(object instanceof java.lang.Number)) { throw new java.lang.IllegalArgumentException(("object not a Number: " + (object.getClass()))); } java.lang.Number number = ((java.lang.Number) (object)); libcore.icu.NativeDecimalFormat.FieldPositionIterator fpIter = new libcore.icu.NativeDecimalFormat.FieldPositionIterator(); java.lang.String text; if ((number instanceof java.math.BigInteger) || (number instanceof java.math.BigDecimal)) { text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatDigitList(this.address, number.toString(), fpIter)); } else if ((number instanceof java.lang.Double) || (number instanceof java.lang.Float)) { double dv = number.doubleValue(); text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatDouble(this.address, dv, fpIter)); } else { long lv = number.longValue(); text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatLong(this.address, lv, fpIter)); } java.text.AttributedString as = new java.text.AttributedString(text); while (fpIter.next()) { java.text.Format.Field field = fpIter.field(); as.addAttribute(field, field, fpIter.start(), fpIter.limit()); } return as.getIterator(); }
public android.net.wifi.IApInterface setupForSoftApMode() { if (!(startHal(false))) { android.util.Log.e(com.android.server.wifi.WifiNative.TAG, "Failed to start HAL for AP mode"); } return mWificondControl.setupDriverForSoftApMode(); }
private static native void native_drawRect(long nativeCanvas, android.graphics.RectF rect, long nativePaint);
private void grantDefaultPermissionExceptions(int userId) { synchronized(mService.mPackages) { mHandler.removeMessages(com.android.server.pm.DefaultPermissionGrantPolicy.MSG_READ_DEFAULT_PERMISSION_EXCEPTIONS); if ((mGrantExceptions) == null) { mGrantExceptions = readDefaultPermissionExceptionsLPw(); } java.util.Set<java.lang.String> permissions = null; final int exceptionCount = mGrantExceptions.size(); for (int i = 0; i < exceptionCount; i++) { java.lang.String packageName = mGrantExceptions.keyAt(i); android.content.pm.PackageParser.Package pkg = getSystemPackageLPr(packageName); java.util.List<com.android.server.pm.DefaultPermissionGrantPolicy.DefaultPermissionGrant> permissionGrants = mGrantExceptions.valueAt(i); final int permissionGrantCount = permissionGrants.size(); for (int j = 0; j < permissionGrantCount; j++) { com.android.server.pm.DefaultPermissionGrantPolicy.DefaultPermissionGrant permissionGrant = permissionGrants.get(j); if (permissions == null) { permissions = new android.util.ArraySet(); } else { permissions.clear(); } permissions.add(permissionGrant.name); grantRuntimePermissionsLPw(pkg, permissions, permissionGrant.fixed, userId); } } } }
public void testUnusedHighlighting_ClassWithApiClass() { doTest(); }
@java.lang.Override public void end() { if ((eventCount.decrementAndGet()) == 0) { try { com.android.sched.util.log.StatisticOnlyTracer.enable.set(java.lang.Boolean.FALSE); com.android.sched.util.print.DataModelListAdapter<com.android.sched.util.log.stats.Statistic> report = new com.android.sched.util.print.DataModelListAdapter<com.android.sched.util.log.stats.Statistic>(new com.android.sched.util.print.DataModelListAdapter.Converter<com.android.sched.util.log.stats.Statistic>() { @java.lang.Override @javax.annotation.Nonnull public com.android.sched.util.log.StatisticModel apply(@javax.annotation.Nonnull com.android.sched.util.log.stats.Statistic data) { return new com.android.sched.util.log.StatisticModel(data); } }); for (final com.android.sched.util.log.stats.Statistic statistic : statisticsById.values()) { if (statistic.isEnabled()) { report.add(statistic); } } java.io.PrintStream stream = com.android.sched.util.config.ThreadConfig.get(com.android.sched.util.log.StatisticOnlyTracer.STREAM).getPrintStream(); com.android.sched.util.print.Printer printer = com.android.sched.util.config.ThreadConfig.get(com.android.sched.util.log.StatisticOnlyTracer.PRINTER).create(stream).addResourceBundles(java.util.ResourceBundle.getBundle(com.android.sched.util.log.stats.Statistic.class.getCanonicalName()), java.util.ResourceBundle.getBundle(com.android.sched.util.log.StatisticOnlyTracer.class.getCanonicalName())); try { printer.print(report); } finally { stream.close(); } } finally { com.android.sched.util.log.StatisticOnlyTracer.enable.set(java.lang.Boolean.TRUE); } } }
private void run(@javax.annotation.Nonnull java.lang.String mainClass, @javax.annotation.Nonnull java.io.File[] dexFiles) throws java.lang.Exception { java.util.List<com.android.jack.test.runner.RuntimeRunner> runnerList = com.android.jack.test.toolchain.AbstractTestTools.listRuntimeTestRunners(null); for (com.android.jack.test.runner.RuntimeRunner runner : runnerList) { junit.framework.Assert.assertEquals(0, runner.runJUnit(new java.lang.String[0], AbstractTestTools.JUNIT_RUNNER_NAME, new java.lang.String[]{ mainClass }, dexFiles)); } }
@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((((((((((("SignalStrength:" + " ") + (mGsmSignalStrength)) + " ") + (mGsmBitErrorRate)) + " ") + (mCdmaDbm)) + " ") + (mCdmaEcio)) + " ") + (mEvdoDbm)) + " ") + (mEvdoEcio)) + " ") + (mEvdoSnr)) + " ") + (mLteSignalStrength)) + " ") + (mLteRsrp)) + " ") + (mLteRsrq)) + " ") + (mLteRssnr)) + " ") + (mLteCqi)) + " ") + (mLteRsrpBoost)) + " ") + (mTdScdmaRscp)) + " ") + (isGsm ? "gsm|lte" : "cdma"); }
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) { com.android.jack.shrob.obfuscation.annotation.ParameterLineNumberRemover.Visitor visitor = new com.android.jack.shrob.obfuscation.annotation.ParameterLineNumberRemover.Visitor(com.android.jack.Jack.getSession().getSourceInfoFactory()); visitor.accept(method); }
@java.lang.Override public com.android.dx.io.instructions.DecodedInstruction withProtoIndex(int newIndex, int newProtoIndex) { return new com.android.dx.io.instructions.InvokePolymorphicRangeDecodedInstruction(getFormat(), getOpcode(), newIndex, getIndexType(), c, registerCount, newProtoIndex); }
@java.lang.Override @javax.annotation.Nonnull protected com.android.sched.util.config.MessageDigestFactory convert(@javax.annotation.Nonnull java.security.Provider.Service service) { return new com.android.sched.util.config.MessageDigestFactory(service); }
public void testCancelSoon() throws java.lang.Exception { doTestDragAndDrop(android.wm.cts.CrossAppDragAndDropTests.CANCEL_SOON, android.wm.cts.CrossAppDragAndDropTests.REQUEST_NONE, null); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DRAG_STARTED, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_EXTRAS, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); }
private java.lang.String keyManagementToString(int akm) { switch (akm) { case android.net.wifi.ScanResult.KEY_MGMT_NONE : return "None"; case android.net.wifi.ScanResult.KEY_MGMT_PSK : return "PSK"; case android.net.wifi.ScanResult.KEY_MGMT_EAP : return "EAP"; case android.net.wifi.ScanResult.KEY_MGMT_FT_EAP : return "FT/EAP"; case android.net.wifi.ScanResult.KEY_MGMT_FT_PSK : return "FT/PSK"; case android.net.wifi.ScanResult.KEY_MGMT_EAP_SHA256 : return "EAP-SHA256"; case android.net.wifi.ScanResult.KEY_MGMT_PSK_SHA256 : return "PSK-SHA256"; default : return "?"; } }
@com.android.annotations.NonNull public com.android.build.gradle.internal.variant.BaseVariantOutputData getVariantOutputData() { return variantOutputData; }
@org.junit.Test @java.lang.Runtime(from = RuntimeVersion.N) public void retroLambdaDefaultMethodsTest002() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_002); }
@org.junit.Test public void retroLambdaDefaultMethodsTest019() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_019).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
public java.lang.String getDeviceSoftwareVersion(int slotIndex) { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) return null; try { return telephony.getDeviceSoftwareVersionForSlot(slotIndex, getOpPackageName()); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } }
public void testJvmtiAgentAppInternal() throws java.lang.Exception { runJvmtiAgentLoadTest((com.android.tradefed.device.ITestDevice device,java.lang.String pkg,java.lang.String apk,java.lang.String abiName) -> { try { java.lang.String setAgentAppCmd = (("cmd activity set-agent-app " + pkg) + " ") + (android.jvmti.cts.JvmtiAttachingHostTest.AGENT); device.executeShellCommand(setAgentAppCmd); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException("Failed running set-agent-app", e); } try { android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, ""); android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, ""); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException("Failed agent-app attaching", e); } }); }
@java.lang.Override public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.system.Int64Ref offset, long byteCount) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); return os.sendfile(outFd, inFd, offset, byteCount); }
@java.lang.Override protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec == null) { throw new java.security.spec.InvalidKeySpecException("keySpec == null"); } if (keySpec instanceof java.security.spec.RSAPublicKeySpec) { return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPublicKey(((java.security.spec.RSAPublicKeySpec) (keySpec))); } else if (keySpec instanceof java.security.spec.X509EncodedKeySpec) { return org.apache.harmony.xnet.provider.jsse.OpenSSLKey.getPublicKey(((java.security.spec.X509EncodedKeySpec) (keySpec)), NativeCrypto.EVP_PKEY_RSA); } throw new java.security.spec.InvalidKeySpecException(("Must use RSAPublicKeySpec or X509EncodedKeySpec; was " + (keySpec.getClass().getName()))); }
void increment(int imp) { imp = java.lang.Math.max(0, java.lang.Math.min(imp, ((mCount.length) - 1))); (mCount[imp])++; }
private static java.lang.String getNexusLabel(com.android.sdklib.devices.Device d) { @java.lang.SuppressWarnings("deprecation") java.lang.String name = d.getName(); com.android.sdklib.devices.Screen screen = d.getDefaultHardware().getScreen(); float length = ((float) (screen.getDiagonalLength())); return java.lang.String.format(java.util.Locale.US, "%1$s (%3$s\", %2$s)", name, com.android.sdkuilib.internal.widgets.AvdCreationPresenter.getResolutionString(d), java.lang.Float.toString(length)); }
private synchronized void initializeAccessControl() throws java.io.IOException, java.util.MissingResourceException { synchronized(mLock) { if ((mAccessControlEnforcer) == null) { mAccessControlEnforcer = new com.android.se.security.AccessControlEnforcer(this); } try { mAccessControlEnforcer.initialize(); } catch (java.io.IOException | java.util.MissingResourceException e) { mAccessControlEnforcer = null; throw e; } } }
public void test_setNan_emptyString() throws java.lang.Exception { java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(); dfs.setNaN(""); java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setDecimalFormatSymbols(dfs); df.format(java.lang.Double.NaN); }
public static int $noinline$floatConditionNotEqualOne(float f) { if (Main.doThrow) { throw new java.lang.Error(); } return (f > 42.0F) == true ? 13 : 54; }
public int waitpid(int pid, android.util.MutableInt status, int options) throws android.system.ErrnoException { return os.waitpid(pid, status, options); }
@javax.annotation.Nonnull public com.android.jack.shrob.spec.KeepModifier setAllowObfuscation() { modifier |= com.android.jack.shrob.spec.KeepModifier.ALLOW_OBFUSCATION; return this; }
@java.lang.Deprecated public int getCarrierPrivilegeStatus(android.content.pm.PackageManager packageManager, java.lang.String packageName) { if ((mUiccProfile) != null) { return mUiccProfile.getCarrierPrivilegeStatus(packageManager, packageName); } else { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED; } }
private native int preadBytes(java.io.FileDescriptor fd, java.lang.Object buffer, int bufferOffset, int byteCount, long offset) throws android.system.ErrnoException, java.io.InterruptedIOException;
private void runUsbTethering(android.net.NetworkState upstreamState) { prepareUsbTethering(upstreamState); sendUsbBroadcast(true, true, true); mLooper.dispatchAll(); }
@org.junit.Test public void cmpl_double() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(CMPL_DOUBLE).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }
public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }
static java.math.BigInt modulus(java.math.BigInt a, java.math.BigInt m) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_nnmod(r.bignum, a.bignum, m.bignum); return r; }
public void onNfcDisabled() { synchronized(mLock) { mActivated = false; } }
void updateIccAvailability() { if (null == (mUiccController)) { return; } com.android.internal.telephony.uicc.IccCardStatus.CardState newState = com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT; com.android.internal.telephony.uicc.UiccCard newCard = mUiccController.getUiccCard(); if (newCard != null) { newState = newCard.getCardState(); } com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = newState; com.android.internal.telephony.cat.CatLog.d(this, (((("New Card State = " + newState) + " ") + "Old Card State = ") + oldState)); if ((oldState == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_PRESENT)) && (newState != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_PRESENT))) { broadcastCardStateAndIccRefreshResp(newState, null); } else if ((oldState != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_PRESENT)) && (newState == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_PRESENT))) { mCmdIf.reportStkServiceIsRunning(null); } }
private void reconstitutionPut(java.util.Hashtable.HashtableEntry<K, V>[] tab, K key, V value) throws java.io.StreamCorruptedException { if (value == null) { throw new java.io.StreamCorruptedException(); } int hash = java.util.Hashtable.hash(key); int index = (hash & 2147483647) % (tab.length); for (java.util.Hashtable.HashtableEntry<K, V> e = tab[index]; e != null; e = e.next) { if (((e.hash) == hash) && (e.key.equals(key))) { throw new java.io.StreamCorruptedException(); } } java.util.Hashtable.HashtableEntry<K, V> e = tab[index]; tab[index] = new java.util.Hashtable.HashtableEntry<>(hash, key, value, e); (count)++; }
@java.lang.Override @javax.annotation.Nonnull public java.lang.String insnCommentString(@javax.annotation.Nonnull com.android.jack.dx.dex.code.DalvInsn insn, boolean noteIndices) { if (noteIndices) { return cstComment(((com.android.jack.dx.dex.code.DualCstInsn) (insn))); } else { return ""; } }
public static void process(@javax.annotation.Nonnull com.android.jill.Options options) { java.io.File binaryFile = options.getBinaryFile(); com.android.jill.frontend.java.JavaTransformer jt = new com.android.jill.frontend.java.JavaTransformer(com.android.jill.Jill.getVersion().getVersion(), options); if (binaryFile.isFile()) { if (com.android.jill.utils.FileUtils.isJavaBinaryFile(binaryFile)) { java.util.List<java.io.File> javaBinaryFiles = new java.util.ArrayList<java.io.File>(); javaBinaryFiles.add(binaryFile); jt.transform(javaBinaryFiles); } else if (com.android.jill.utils.FileUtils.isJarFile(binaryFile)) { try { jt.transform(new java.util.jar.JarFile(binaryFile)); } catch (java.io.IOException e) { throw new com.android.jill.JillException(("Fails to create jar file " + (binaryFile.getName())), e); } } else { throw new com.android.jill.JillException(("Unsupported file type: " + (binaryFile.getName()))); } } else { java.util.List<java.io.File> javaBinaryFiles = new java.util.ArrayList<java.io.File>(); com.android.jill.utils.FileUtils.getJavaBinaryFiles(binaryFile, javaBinaryFiles); jt.transform(javaBinaryFiles); } }
void setAdvertiserId(int advertiserId) { mAdvertiserId = advertiserId; }
@java.lang.Override public void enter() { if (!(configureIfaceIp(true))) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_IFACE_CFG_ERROR; transitionTo(mInitialState); return; } try { mNMService.tetherInterface(mIfaceName); } catch (java.lang.Exception e) { android.util.Log.e(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, ("Error Tethering: " + (e.toString()))); mLastError = android.net.ConnectivityManager.TETHER_ERROR_TETHER_IFACE_ERROR; transitionTo(mInitialState); return; } if (!(mIPv6TetherSvc.start())) { android.util.Log.e(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, "Failed to start IPv6TetheringInterfaceServices"); } }
public void test_isGroupingUsed() { assertFalse(new java.text.DecimalFormat("####.##").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("######.######").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("000000.000000").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("######.000000").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("000000.######").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(" ###.###").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("$#####.######").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("$$####.######").isGroupingUsed()); assertTrue(new java.text.DecimalFormat("###,####").isGroupingUsed()); }
@org.junit.Test public void testClassImplementsTwoInterfacesWithSameDefenderMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_34).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
public static void main(java.lang.String[] argArray) throws java.io.IOException { com.android.dx.command.dexer.DxContext context = new com.android.dx.command.dexer.DxContext(); com.android.dx.command.dexer.Main.Arguments arguments = new com.android.dx.command.dexer.Main.Arguments(); arguments.parse(argArray, context); int result = new com.android.dx.command.dexer.Main(context).runDx(arguments); if (result != 0) { java.lang.System.exit(result); } }
public java.lang.String getFilename() { return mFilename; }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); when(mContext.getApplicationInfo()).thenReturn(mApplicationInfo); when(mContext.getPackageName()).thenReturn("OffloadControllerTest"); mContentResolver = new android.test.mock.MockContentResolver(mContext); mContentResolver.addProvider(Settings.AUTHORITY, new com.android.internal.util.test.FakeSettingsProvider()); when(mContext.getContentResolver()).thenReturn(mContentResolver); }
public final void testCreateDup() { com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ved = new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor("xml", "com.example.MyJavaClass"); com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode uiv = new com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode(ved); com.android.layoutlib.api.ViewInfo lvi = new com.android.layoutlib.api.ViewInfo("name", uiv, 10, 12, 110, 120); com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo cvi = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo(lvi); com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy1 = m.create(cvi); com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy2 = m.create(cvi); assertSame(proxy2, proxy1); }
@java.lang.Override public org.bouncycastle.asn1.x509.AlgorithmIdentifier findEncryptionAlgorithm(org.bouncycastle.asn1.x509.AlgorithmIdentifier id) { id = mDefault.findEncryptionAlgorithm(id); if (id != null) { org.bouncycastle.asn1.ASN1ObjectIdentifier oid = id.getAlgorithm(); if (X9ObjectIdentifiers.id_dsa_with_sha1.equals(oid)) { return com.android.apksigner.core.internal.apk.v1.V1SchemeSigner.SignerInfoSignatureAlgorithmFinder.DSA; } } return id; }
@java.lang.Override public void rename(java.lang.String oldPath, java.lang.String newPath) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.rename(oldPath, newPath); }
@java.lang.Override protected boolean stop() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "stop()"); } com.android.bluetooth.pbap.BluetoothPbapService.setBluetoothPbapService(null); if ((mSessionStatusHandler) != null) { mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN).sendToTarget(); } if ((mHandlerThread) != null) { mHandlerThread.quitSafely(); } if ((mContactChangeObserver) == null) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Avoid unregister when receiver it is not registered"); return true; } unregisterReceiver(mPbapReceiver); getContentResolver().unregisterContentObserver(mContactChangeObserver); mContactChangeObserver = null; return true; }
private java.lang.String getNaiBySubscriberId(int subId) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) return null; java.lang.String nai = info.getNaiForSubscriber(subId, mContext.getOpPackageName()); if (android.util.Log.isLoggable(android.telephony.TelephonyManager.TAG, Log.VERBOSE)) { android.telephony.Rlog.v(android.telephony.TelephonyManager.TAG, ("Nai = " + nai)); } return nai; } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } }
private boolean fz(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_reduce s, int seed, int[] size) { final int inputLen = size[0]; int[] inputArray = createInputArrayInt(inputLen, (seed + 0)); inputArray[new java.util.Random((seed + 1)).nextInt(inputLen)] = 0; final long javaTimeStart = java.lang.System.currentTimeMillis(); final int javaResult = fz(inputArray); final long javaTimeEnd = java.lang.System.currentTimeMillis(); final long rsTimeStart = java.lang.System.currentTimeMillis(); com.android.rs.test.Allocation inputAllocation = com.android.rs.test.Allocation.createSized(RS, com.android.rs.test.Element.I32(RS), inputArray.length); final long copyTimeStart = java.lang.System.currentTimeMillis(); inputAllocation.copyFrom(inputArray); final long kernelTimeStart = java.lang.System.currentTimeMillis(); final int rsResult = s.reduce_fz(inputAllocation).get(); final long rsTimeEnd = java.lang.System.currentTimeMillis(); final boolean success = (inputArray[rsResult]) == 0; java.lang.String status = (success) ? "PASSED" : "FAILED"; if (success) status += " " + (com.android.rs.test.UT_reduce.timing.string(javaTimeStart, javaTimeEnd, rsTimeStart, copyTimeStart, kernelTimeStart, rsTimeEnd, inputAllocation)); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((((((((("fz: java input[" + javaResult) + "] == ") + (inputArray[javaResult])) + ", rs input[") + rsResult) + "] == ") + (inputArray[javaResult])) + ": ") + status)); inputAllocation.destroy(); return success; }
private void checkRoundFloat4Float4() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, -2260197704037316092L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); script.forEach_testRoundFloat4Float4(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRoundFloat4Float4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testRoundFloat4Float4(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRoundFloat4Float4: " + (e.toString()))); } }
@java.lang.Override public void executeShellCommand(java.lang.String command, com.android.ddmlib.IShellOutputReceiver receiver, int maxTimeToOutputResponse) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.AdbHelper.executeRemoteCommand(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), command, this, receiver, maxTimeToOutputResponse); }
@java.lang.Override public void setLogicalToPhysicalSlotMapping(int[] physicalSlots, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { java.util.ArrayList<java.lang.Integer> mapping = new java.util.ArrayList<>(); for (int slot : physicalSlots) { mapping.add(new java.lang.Integer(slot)); } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LOGICAL_TO_PHYSICAL_SLOT_MAPPING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setSimSlotsMapping(rr.mSerial, mapping); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setLogicalToPhysicalSlotMapping", e); } } } }
@org.junit.Test public void testMultipleDefaults_fromInterfaces_left() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_47).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }
@org.junit.Test public void verifyNotificationDisplayedWhenNetworkRecommended() throws java.lang.Exception { com.android.networkrecommendation.TestUtil.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_ENABLED); com.android.networkrecommendation.TestUtil.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.DISCONNECTED); setOpenAccessPoints(3); when(mScoreManager.requestRecommendation(any(android.net.RecommendationRequest.class))).thenReturn(android.net.RecommendationResult.createConnectRecommendation(createFakeConfig())); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); verify(mNotificationManager, never()).notifyAsUser(any(java.lang.String.class), anyInt(), any(android.app.Notification.class), any(android.os.UserHandle.class)); com.android.networkrecommendation.TestUtil.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.SCANNING); com.android.networkrecommendation.TestUtil.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.DISCONNECTED); verify(mNotificationManager, never()).notifyAsUser(any(java.lang.String.class), anyInt(), any(android.app.Notification.class), any(android.os.UserHandle.class)); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); verify(mWifiNotificationHelper).createMainNotification(any(android.net.wifi.WifiConfiguration.class), any(android.graphics.Bitmap.class)); verify(mNotificationManager).notifyAsUser(any(java.lang.String.class), anyInt(), any(android.app.Notification.class), any(android.os.UserHandle.class)); verify(mNotificationManager, never()).cancelAsUser(any(java.lang.String.class), anyInt(), any(android.os.UserHandle.class)); }
public static native long d2i_X509(byte[] encoded);
@android.test.suitebuilder.annotation.LargeTest public void testFlagIExistingE() { if (android.os.Environment.isExternalStorageEmulated()) { return; } int iFlags = android.content.pm.PackageManager.INSTALL_EXTERNAL; int rFlags = (android.content.pm.PackageManager.INSTALL_INTERNAL) | (android.content.pm.PackageManager.INSTALL_REPLACE_EXISTING); installFromRawResource("install.apk", R.raw.install, iFlags, false, false, (-1), (-1)); installFromRawResource("install.apk", R.raw.install, rFlags, true, false, (-1), (-1)); }
private com.android.monkeyrunner.easy.By getSelector(org.python.core.ArgParser ap, int i) { return ((com.android.monkeyrunner.easy.By) (ap.getPyObject(i).__tojava__(com.android.monkeyrunner.easy.By.class))); }
@org.junit.Test public void testRecoverFromZipCorruptionStressTest() throws java.lang.Exception { java.lang.Thread startServices = new java.lang.Thread() { @java.lang.Override public void run() { startServices(); } }; startServices.start(); for (int i = 0; i < 80; i++) { java.lang.Thread.sleep(1000); tamperAllExtractedZips(); } startServices.join(); try { waitServicesCompletion(); } catch (java.util.concurrent.TimeoutException e) { } killServices(); checkRecover(); }
public void testDateTimeKeyListener() { final android.text.method.DateTimeKeyListener dateTimeKeyListener = android.text.method.DateTimeKeyListener.getInstance(); java.lang.String expectedText = ""; mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(dateTimeKeyListener); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); assertEquals(expectedText, mTextView.getText().toString()); mInstrumentation.sendStringSync("1"); expectedText += "1"; assertEquals(expectedText, mTextView.getText().toString()); mInstrumentation.sendStringSync("2"); expectedText += "2"; assertEquals(expectedText, mTextView.getText().toString()); android.view.KeyCharacterMap kcm = android.view.KeyCharacterMap.load(KeyCharacterMap.BUILT_IN_KEYBOARD); if ('a' == (kcm.getMatch(KeyEvent.KEYCODE_A, DateTimeKeyListener.CHARACTERS))) { expectedText += "a"; mInstrumentation.sendKeyDownUpSync(KeyEvent.KEYCODE_A); assertEquals(expectedText, mTextView.getText().toString()); } if ('p' == (kcm.getMatch(KeyEvent.KEYCODE_P, DateTimeKeyListener.CHARACTERS))) { expectedText += "p"; mInstrumentation.sendKeyDownUpSync(KeyEvent.KEYCODE_P); assertEquals(expectedText, mTextView.getText().toString()); } if ('m' == (kcm.getMatch(KeyEvent.KEYCODE_M, DateTimeKeyListener.CHARACTERS))) { expectedText += "m"; mInstrumentation.sendKeyDownUpSync(KeyEvent.KEYCODE_M); assertEquals(expectedText, mTextView.getText().toString()); } int keyCode = android.text.method.cts.TextMethodUtils.getUnacceptedKeyCode(DateTimeKeyListener.CHARACTERS); if ((-1) != keyCode) { sendKeys(keyCode); assertEquals(expectedText, mTextView.getText().toString()); } mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(null); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); assertEquals(expectedText, mTextView.getText().toString()); mInstrumentation.sendStringSync("1"); assertEquals(expectedText, mTextView.getText().toString()); }
@org.junit.Test public void testAuthenticateServer() { int channel = mockLogicalChannelResponses("BF3802A0009000"); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<byte[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.authenticateServer("A1B2C3-X4Y5Z6", com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(160).build().toBytes(), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(161).build().toBytes(), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(162).build().toBytes(), com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(163).build().toBytes(), resultCaptor, mHandler); resultCaptor.await(); assertUnexpectedException(resultCaptor.exception); assertEquals("BF3802A000", com.android.internal.telephony.uicc.IccUtils.bytesToHexString(resultCaptor.result)); verifyStoreData(channel, ("BF382D" + (((((((("A000" + "A100") + "A200") + "A300") + "A023") + "800D4131423243332D583459355A36") + "A112800489674523") + "A100") + "82088967452301214305"))); }
public static void setRandomSeedInternal(long seed) { java.lang.Math.INSTANCE.setSeed(seed); }
public void testForName_withProviderWithRecursiveCall() throws java.lang.Exception { libcore.java.nio.charset.SettableCharsetProvider.setDelegate(new org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharsetProviderWithRecursiveCall()); try { java.nio.charset.Charset.forName("poop"); fail(); } catch (java.nio.charset.UnsupportedCharsetException expected) { } finally { libcore.java.nio.charset.SettableCharsetProvider.clearDelegate(); } }
@java.lang.Override public void checkValidity() { throw new java.lang.AssertionError(); }
private boolean installTest() throws com.android.tradefed.device.DeviceNotAvailableException { if (!(createRemoteDir(com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY))) { com.android.tradefed.log.LogUtil.CLog.e(("Could not create directory for native tests: " + (com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY))); return false; } java.io.File nativeExe = new java.io.File(mCtsBuild.getTestCasesDir(), mExeName); if (!(nativeExe.exists())) { com.android.tradefed.log.LogUtil.CLog.e(("Native test not found: " + nativeExe)); return false; } java.lang.String devicePath = ((com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY) + (com.android.cts.tradefed.testtype.GeeTest.ANDROID_PATH_SEPARATOR)) + (mExeName); if (!(mDevice.pushFile(nativeExe, devicePath))) { com.android.tradefed.log.LogUtil.CLog.e("Failed to push native test to device"); return false; } return true; }
void getTotalNumOfItems(byte[] bdaddr, com.android.bluetooth.avrcp.MediaController mediaController) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, "getTotalNumOfItems"); java.util.List<android.media.session.MediaSession.QueueItem> items = mNowPlayingList; if (items != null) { mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_NO_ERROR, 0, items.size()); return; } if (mediaController == null) { android.util.Log.e(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, "mediaController = null, sending no available players response"); mMediaInterface.getItemAttrRsp(bdaddr, AvrcpConstants.RSP_NO_AVBL_PLAY, null); return; } items = mediaController.getQueue(); if (items == null) { int count = ((mediaController.getMetadata()) != null) ? 1 : 0; mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_NO_ERROR, 0, count); } mNowPlayingList = items; mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_NO_ERROR, 0, items.size()); }
public void testGetContentType() throws java.io.IOException { assertEquals("text/rtf", getContentType("test.rtf")); assertEquals("application/msword", getContentType("test.doc")); assertEquals("text/html", getContentType("test.htx")); assertEquals("text/xml", getContentType("test.xml")); assertEquals("text/html", new libcore.net.url.FileURLConnection(new java.net.URL("file:///")).getContentType()); }
synchronized boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDevService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDevService.TAG, ((("reportError(): device=" + device) + " error=") + error)); } if (!(checkDevice(device))) { return false; } return reportErrorNative(error); }
@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { super.widgetSelected(e); if (mProjectButton.getSelection()) { setupResourceList(); mNewButton.setEnabled(true); } }
private static void verify(com.android.apksig.util.DataSource beforeApkSigningBlock, java.nio.ByteBuffer apkSignatureSchemeV2Block, com.android.apksig.util.DataSource centralDir, java.nio.ByteBuffer eocd, int minSdkVersion, int maxSdkVersion, com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result) throws com.android.apksig.internal.apk.v2.V2SchemeVerifier.SignatureNotFoundException, java.io.IOException, java.security.NoSuchAlgorithmException { java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> contentDigestsToVerify = new java.util.HashSet<>(1); com.android.apksig.internal.apk.v2.V2SchemeVerifier.parseSigners(apkSignatureSchemeV2Block, contentDigestsToVerify, minSdkVersion, maxSdkVersion, result); if (result.containsErrors()) { return; } com.android.apksig.internal.apk.v2.V2SchemeVerifier.verifyIntegrity(beforeApkSigningBlock, centralDir, eocd, contentDigestsToVerify, result); if (!(result.containsErrors())) { result.verified = true; } }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (!(o instanceof com.android.sdklib.devices.Hardware)) { return false; } com.android.sdklib.devices.Hardware hw = ((com.android.sdklib.devices.Hardware) (o)); return ((((((((((((((((mScreen.equals(hw.getScreen())) && (mNetworking.equals(hw.getNetworking()))) && (mSensors.equals(hw.getSensors()))) && ((mMic) == (hw.hasMic()))) && (mCameras.equals(hw.getCameras()))) && ((mKeyboard) == (hw.getKeyboard()))) && ((mNav) == (hw.getNav()))) && (mRam.equals(hw.getRam()))) && ((mButtons) == (hw.getButtonType()))) && (mInternalStorage.equals(hw.getInternalStorage()))) && (mRemovableStorage.equals(hw.getRemovableStorage()))) && (mCpu.equals(hw.getCpu()))) && (mGpu.equals(hw.getGpu()))) && (mAbis.equals(hw.getSupportedAbis()))) && (mUiModes.equals(hw.getSupportedUiModes()))) && ((mPluggedIn) == (hw.getChargeType()))) && (com.google.common.base.Objects.equal(mSkinFile, hw.getSkinFile())); }
public static void assertEquals(boolean actual, boolean expected) throws java.lang.AssertionError { if (actual != expected) { throw new java.lang.AssertionError((((("Actual != Expected (" + actual) + " != ") + expected) + ")")); } }
private static long projectSnapshotTime(long timeMs) { return (timeMs / (com.android.server.connectivity.NetdEventListenerService.METRICS_SNAPSHOT_SPAN_MS)) * (com.android.server.connectivity.NetdEventListenerService.METRICS_SNAPSHOT_SPAN_MS); }
@com.android.annotations.NonNull public java.lang.String getTid() { return mTid; }
private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { if (callback == null) { throw new java.lang.IllegalArgumentException("null NetworkCallback"); } if ((need == null) && (action != (android.net.ConnectivityManager.REQUEST))) { throw new java.lang.IllegalArgumentException("null NetworkCapabilities"); } final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return request; }
static void freeNativeStorage(int nativeDataPtr, java.util.concurrent.CountDownLatch freeSignal) { java.lang.System.out.println(("freeNativeStorage: " + nativeDataPtr)); freeSignal.countDown(); }
private synchronized com.android.utils.Pair<com.android.builder.internal.compiler.PreDexCache.Item, java.lang.Boolean> getItem(@com.android.annotations.NonNull java.io.File inputFile, @com.android.annotations.NonNull java.io.File outFile, @com.android.annotations.NonNull com.android.sdklib.BuildToolInfo buildToolInfo, @com.android.annotations.NonNull com.android.builder.DexOptions dexOptions) throws java.io.IOException { com.android.builder.internal.compiler.PreDexCache.Key itemKey = com.android.builder.internal.compiler.PreDexCache.Key.of(inputFile, buildToolInfo.getRevision(), dexOptions.getJumboMode()); com.android.builder.internal.compiler.PreDexCache.Item item = mMap.get(itemKey); boolean newItem = false; if (item == null) { com.android.builder.internal.compiler.PreDexCache.StoredItem storedItem = mStoredItems.get(itemKey); if (storedItem != null) { java.io.File dexFile = storedItem.getOutputFile(); if ((dexFile.isFile()) && (storedItem.getSourceHash().equals(com.google.common.io.Files.hash(inputFile, com.google.common.hash.Hashing.sha1())))) { item = new com.android.builder.internal.compiler.PreDexCache.Item(inputFile, dexFile, new java.util.concurrent.CountDownLatch(0)); } } if (item == null) { item = new com.android.builder.internal.compiler.PreDexCache.Item(inputFile, outFile, new java.util.concurrent.CountDownLatch(1)); newItem = true; } mMap.put(itemKey, item); } return com.android.utils.Pair.of(item, newItem); }
public void testFileInputStream() throws java.lang.Exception { java.io.File tmpFile = java.io.File.createTempFile("inputFile", ".txt"); try (java.io.FileOutputStream fos = new java.io.FileOutputStream(tmpFile)) { fos.write("01234567890".getBytes()); } try { recorder.clear(); java.io.FileInputStream fis = new java.io.FileInputStream(tmpFile); recorder.expectAndClear("onReadFromDisk"); fis.read(new byte[4], 0, 4); recorder.expectAndClear("onReadFromDisk"); fis.read(); recorder.expectAndClear("onReadFromDisk"); fis.skip(1); recorder.expectAndClear("onReadFromDisk"); fis.close(); } finally { tmpFile.delete(); } }
@java.lang.Override public java.security.spec.ECParameterSpec getParams() { return delegate.getParams(); }
public void unregisterListener() { if ((mTestSensorEventListener) == null) { android.util.Log.w(android.hardware.cts.helpers.TestSensorManager.LOG_TAG, "No listener registered, returning."); return; } mSensorManager.unregisterListener(mTestSensorEventListener, mEnvironment.getSensor()); mTestSensorEventListener.assertEventsReceivedInHandler(); mTestSensorEventListener = null; }
@com.android.annotations.Nullable public static com.android.ddmlib.EmulatorConsole getConsole(com.android.ddmlib.IDevice d) { java.lang.Integer port = com.android.ddmlib.EmulatorConsole.getEmulatorPort(d.getSerialNumber()); if (port == null) { com.android.ddmlib.Log.w(com.android.ddmlib.EmulatorConsole.LOG_TAG, ("Failed to find emulator port from serial: " + (d.getSerialNumber()))); return null; } com.android.ddmlib.EmulatorConsole console = com.android.ddmlib.EmulatorConsole.retrieveConsole(port); if (!(console.checkConnection())) { com.android.ddmlib.EmulatorConsole.removeConsole(console.mPort); console = null; } return console; }
public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.browse.MediaBrowser.MediaItem item) { if (item == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(item.getDescription()); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.d(com.android.bluetooth.avrcp.Util.TAG, ("toMetadata: MediaItem: ContainsKey: " + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = item.getMediaId(); return ret; }
@java.lang.SuppressWarnings("ConstantConditions") @java.lang.Override protected void textChanged(javax.swing.event.DocumentEvent e) { if ((myDefaultDirectoryName.equals(myDirectoryName.getText())) || ((myDirectoryName.getText().length()) == 0)) { java.lang.String projectDescription = myRepositoryURL.getProjectDescription(); if (!(com.google.api.client.repackaged.com.google.common.base.Strings.isNullOrEmpty(projectDescription))) { myDefaultDirectoryName = projectDescription.replaceAll(WizardConstants.INVALID_FILENAME_CHARS, ""); myDefaultDirectoryName = myDefaultDirectoryName.replaceAll("\\s", ""); } else { myDefaultDirectoryName = ""; } myDirectoryName.setText(myDefaultDirectoryName); } updateButtons(); }
private void checkCopysignFloat4Float4Float4() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, -623095077886861252L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, -623095077886861252L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testCopysignFloat4Float4Float4(inX, out); verifyResultsCopysignFloat4Float4Float4(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testCopysignFloat4Float4Float4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testCopysignFloat4Float4Float4(inX, out); verifyResultsCopysignFloat4Float4Float4(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testCopysignFloat4Float4Float4: " + (e.toString()))); } }
public void testSampleHprof() throws java.lang.Exception { java.io.File file = new java.io.File(java.lang.ClassLoader.getSystemResource("dialer.android-hprof").getFile()); mSnapshot = new com.android.tools.perflib.heap.analysis.HprofParser(new com.android.tools.perflib.heap.io.MemoryMappedFileBuffer(file)).parse(); mSnapshot.computeDominators(); java.util.Set<com.android.tools.perflib.heap.analysis.Instance> topologicalSet = new java.util.HashSet<com.android.tools.perflib.heap.analysis.Instance>(mSnapshot.getTopologicalOrdering()); assertEquals(topologicalSet.size(), mSnapshot.getTopologicalOrdering().size()); long totalInstanceCount = 0; for (com.android.tools.perflib.heap.analysis.Heap heap : mSnapshot.getHeaps()) { totalInstanceCount += heap.getInstances().size(); totalInstanceCount += heap.getClasses().size(); } assertEquals(43687, totalInstanceCount); assertEquals(42571, mSnapshot.getReachableInstances().size()); com.android.tools.perflib.heap.analysis.Instance instance = mSnapshot.findInstance(-1326579808); assertEquals(Snapshot.SENTINEL_ROOT, instance.getImmediateDominator()); int appIndex = mSnapshot.getHeapIndex(mSnapshot.getHeap("app")); int zygoteIndex = mSnapshot.getHeapIndex(mSnapshot.getHeap("zygote")); com.android.tools.perflib.heap.analysis.ClassObj htmlParser = mSnapshot.findClass("android.text.Html$HtmlParser"); assertEquals(116492, htmlParser.getRetainedSize(zygoteIndex)); assertEquals(0, htmlParser.getRetainedSize(appIndex)); com.android.tools.perflib.heap.analysis.ClassObj activityThread = mSnapshot.findClass("android.app.ActivityThread"); assertEquals(853, activityThread.getRetainedSize(zygoteIndex)); assertEquals(576, activityThread.getRetainedSize(appIndex)); }
@java.lang.Override public void onNfcFServicesUpdated(int userId, java.util.List<android.nfc.cardemulation.NfcFServiceInfo> services) { mT3tIdentifiersCache.onServicesUpdated(userId, services); mEnabledNfcFServices.onServicesUpdated(); }
private android.content.pm.PackageInfo generatePackageInfoFromSettingsLPw(java.lang.String packageName, int flags, int userId) { if (!(com.android.server.pm.PackageManagerService.sUserManager.exists(userId))) return null; com.android.server.pm.PackageSetting ps = mSettings.mPackages.get(packageName); if (ps != null) { android.content.pm.PackageParser.Package pkg = ps.pkg; if (pkg == null) { if ((flags & (android.content.pm.PackageManager.GET_UNINSTALLED_PACKAGES)) == 0) { return null; } pkg = new android.content.pm.PackageParser.Package(packageName); pkg.applicationInfo.packageName = packageName; pkg.applicationInfo.flags = (ps.pkgFlags) | (android.content.pm.ApplicationInfo.FLAG_IS_DATA_ONLY); pkg.applicationInfo.publicSourceDir = ps.resourcePathString; pkg.applicationInfo.sourceDir = ps.codePathString; pkg.applicationInfo.dataDir = getDataPathForPackage(packageName, 0).getPath(); pkg.applicationInfo.nativeLibraryDir = ps.nativeLibraryPathString; pkg.applicationInfo.requiredCpuAbi = ps.requiredCpuAbiString; } return generatePackageInfo(pkg, flags, userId); } return null; }
@com.android.annotations.NonNull @java.lang.Override public java.lang.String getBuildGradleContent() { return "apply plugin: \'java\'\n"; }
public boolean connect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("connect(): " + device)); } if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { return false; } android.os.ParcelUuid[] featureUuids = device.getUuids(); if ((android.bluetooth.BluetoothUuid.containsAnyUuid(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_UUID)) && (!(android.bluetooth.BluetoothUuid.containsAllUuids(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_SINK_UUIDS)))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("Cannot connect to " + device) + " : Remote does not have A2DP Sink UUID")); return false; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getOrCreateStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("Cannot connect to " + device) + " : no state machine")); return false; } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; } }
public void testGetValues010_Array() { long classID = getClassIDBySignature(getDebuggeeClassSignature()); org.apache.harmony.jpda.tests.framework.jdwp.Value expectedValue = getStaticFieldValue(classID, "ARRAY_PARAM_VALUE"); org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester("breakpointArray", StackTrace002Debuggee.ARRAY_SIGNAL); org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod("runBreakpointArray"); methodInfo.addVariable("param", expectedValue); runStackFrameTest(tester); }
public android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(int subId, java.lang.String AID, int p2) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony != null) return telephony.iccOpenLogicalChannel(subId, AID, p2); } catch (android.os.RemoteException ex) { } catch (java.lang.NullPointerException ex) { } return null; }
@java.lang.Override public int compareTo(com.android.server.net.NetworkStatsCollection.Key another) { int res = 0; if (((ident) != null) && ((another.ident) != null)) { res = ident.compareTo(another.ident); } if (res == 0) { res = java.lang.Integer.compare(uid, another.uid); } if (res == 0) { res = java.lang.Integer.compare(set, another.set); } if (res == 0) { res = java.lang.Integer.compare(tag, another.tag); } return res; }
@java.lang.Override public void setAccessible(boolean accessible) { block.setAccessible(accessible); }
public void seteuid(int euid) throws android.system.ErrnoException { os.seteuid(euid); }
@com.android.annotations.NonNull public java.util.Map<org.gradle.api.artifacts.ModuleVersionIdentifier, java.lang.Integer> getLegacyApiLevels() { return legacyApiLevels; }
private static com.android.chimpchat.core.IChimpBackend createBackendByName(java.lang.String backendName) { if ("adb".equals(backendName)) { if ((com.android.chimpchat.ChimpChat.sAdbLocation) == null) { return new com.android.chimpchat.adb.AdbBackend(); } else { return new com.android.chimpchat.adb.AdbBackend(com.android.chimpchat.ChimpChat.sAdbLocation); } } else { return null; } }
@org.junit.Test public void testWificondNullWhenSwitchingToApMode() throws java.lang.Exception { when(mWifiInjector.makeWificond()).thenReturn(null); mWifiStateMachinePrime.enterSoftAPMode(null); mLooper.dispatchAll(); assertEquals(com.android.server.wifi.WifiStateMachinePrimeTest.SOFT_AP_MODE_STATE_STRING, mWifiStateMachinePrime.getCurrentMode()); }
@org.junit.Test public void testSplitChainNoSplitDependencies() { android.content.pm.ApplicationInfo ai = createMockApplicationInfo(com.android.server.pm.dex.DexoptUtilsTest.PATH_CLASS_LOADER_NAME, true, false); java.lang.String[] sharedLibrary = new java.lang.String[]{ "a.dex", "b.dex" }; java.lang.String[] contexts = com.android.server.pm.dex.DexoptUtils.getClassLoaderContexts(ai, sharedLibrary); assertEquals(7, contexts.length); assertEquals("PCL[a.dex:b.dex]", contexts[0]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[1]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[2]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[3]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[4]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[5]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[6]); }
public static void computeRsqrt(android.renderscript.cts.TestRsqrt.ArgumentsFloatFloat args) { args.ulf = 2; args.ulfRelaxed = 2; args.out = ((float) (java.lang.StrictMath.pow(args.in, (-0.5)))); }
public void onPageSelected() { if (mPackages.isEmpty()) { loadPackages(); } }
public static java.lang.String getProperty(java.lang.String name, java.lang.String defaultValue) { java.lang.System.checkPropertyName(name); return java.lang.System.systemProperties.getProperty(name, defaultValue); }
public final void mergeUnsorted() { getSection(contentsOut).off = out.getPosition(); java.util.List<com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue> all = new java.util.ArrayList<com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue>(); for (int i = 0; i < (dexes.length); i++) { all.addAll(readUnsortedValues(dexes[i], indexMaps[i])); } java.util.Collections.sort(all); int outCount = 0; for (int i = 0; i < (all.size());) { com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue e1 = all.get((i++)); updateIndex(e1.offset, e1.indexMap, e1.index, (outCount - 1)); while ((i < (all.size())) && ((e1.compareTo(all.get(i))) == 0)) { com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue e2 = all.get((i++)); updateIndex(e2.offset, e2.indexMap, e2.index, (outCount - 1)); } write(e1.value); outCount++; } getSection(contentsOut).size = outCount; }
@java.lang.Override public void handle(com.android.ahat.Doc doc, com.android.ahat.Query query) throws java.io.IOException { int stackId = query.getInt("stack", 0); int depth = query.getInt("depth", 0); java.lang.String className = query.get("class", null); java.lang.String heapName = query.get("heap", null); com.android.ahat.Site site = mSnapshot.getSite(stackId, depth); java.util.List<com.android.tools.perflib.heap.Instance> insts = new java.util.ArrayList<com.android.tools.perflib.heap.Instance>(); for (com.android.tools.perflib.heap.Instance inst : site.getObjects()) { if (((heapName == null) || (inst.getHeap().getName().equals(heapName))) && ((className == null) || (com.android.ahat.AhatSnapshot.getClassName(inst.getClassObj()).equals(className)))) { insts.add(inst); } } java.util.Collections.sort(insts, com.android.ahat.Sort.defaultInstanceCompare(mSnapshot)); doc.title("Objects"); doc.table(new com.android.ahat.Column("Size", Column.Align.RIGHT), new com.android.ahat.Column("Heap"), new com.android.ahat.Column("Object")); com.android.ahat.SubsetSelector<com.android.tools.perflib.heap.Instance> selector = new com.android.ahat.SubsetSelector(query, com.android.ahat.ObjectsHandler.OBJECTS_ID, insts); for (com.android.tools.perflib.heap.Instance inst : selector.selected()) { doc.row(com.android.ahat.DocString.format("%,d", inst.getSize()), com.android.ahat.DocString.text(inst.getHeap().getName()), com.android.ahat.Value.render(inst)); } doc.end(); selector.render(doc); }
private void testChangeFontScale(java.lang.String activityName, boolean relaunch) throws java.lang.Exception { setFontScale(1.0F); java.lang.String logSeparator = clearLogcat(); launchActivity(activityName); final java.lang.String[] waitForActivitiesVisible = new java.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); final int densityDpi = getActivityDensityDpi(activityName, logSeparator); for (float fontScale = 0.85F; fontScale <= 1.3F; fontScale += 0.15F) { logSeparator = clearLogcat(); setFontScale(fontScale); mAmWmState.computeState(mDevice, waitForActivitiesVisible); assertRelaunchOrConfigChanged(activityName, (relaunch ? 1 : 0), (relaunch ? 0 : 1), logSeparator); assertExpectedFontPixelSize(activityName, android.server.cts.ActivityManagerConfigChangeTests.scaledPixelsToPixels(android.server.cts.ActivityManagerConfigChangeTests.EXPECTED_FONT_SIZE_SP, fontScale, densityDpi), logSeparator); } }
public com.android.test.common.fixture.GradleTestProject.Builder fromSample(@com.android.annotations.NonNull java.lang.String project) { projectDir = new java.io.File(com.android.test.common.fixture.GradleTestProject.Builder.SAMPLE_PROJECT_DIR, project); return this; }
public boolean connect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("connect(): " + device)); } if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("Cannot connect to " + device) + " : PRIORITY_OFF")); return false; } if (!(android.bluetooth.BluetoothUuid.isUuidPresent(mAdapterService.getRemoteUuids(device), BluetoothUuid.AudioSink))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("Cannot connect to " + device) + " : Remote does not have A2DP Sink UUID")); return false; } synchronized(mStateMachines) { if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("Cannot connect to " + device) + " : too many connected devices")); return false; } com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getOrCreateStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (("Cannot connect to " + device) + " : no state machine")); return false; } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; } }
public void testConnectOverProxy_explicit_http_uses_direct_connection() throws java.lang.Exception { byte[] fileContents = "abcdef 1234567890".getBytes(java.nio.charset.StandardCharsets.UTF_8); java.net.URL fileUrl = addFileEntry(libcore.java.net.FtpURLConnectionTest.FILE_PATH, fileContents); libcore.java.net.FtpURLConnectionTest.CountingProxy countingProxy = libcore.java.net.FtpURLConnectionTest.CountingProxy.start(); final int numConnections; try { java.net.Proxy proxy = countingProxy.asProxy(); java.net.URLConnection connection = fileUrl.openConnection(proxy); libcore.java.net.FtpURLConnectionTest.assertContents(fileContents, connection.getInputStream()); } finally { numConnections = countingProxy.shutdownAndGetConnectionCount(); } assertEquals(0, numConnections); }
@javax.annotation.Nonnull java.util.zip.ZipOutputStream getZipOutputStream() { return zos; }
@java.lang.Override public void reset() throws java.io.IOException { source.reset(); }
private static void checkValidCapability(@android.net.NetworkCapabilities.NetCapability int capability) { com.android.internal.util.Preconditions.checkArgument(android.net.NetworkCapabilities.isValidCapability(capability), (("NetworkCapability " + capability) + "out of range")); }
@org.gradle.model.Mutate public void configureNativeBinary(org.gradle.platform.base.BinaryContainer binaries, org.gradle.platform.base.ComponentSpecContainer specs, @org.gradle.model.Path("android.ndk") final com.android.build.gradle.managed.NdkConfig ndkConfig, @org.gradle.model.Path("buildDir") final java.io.File buildDir, final com.android.build.gradle.internal.NdkHandler ndkHandler) { if (!(ndkConfig.getModuleName().isEmpty())) { final org.gradle.nativeplatform.NativeLibrarySpec library = specs.withType(org.gradle.nativeplatform.NativeLibrarySpec.class).get(ndkConfig.getModuleName()); binaries.withType(com.android.build.gradle.model.DefaultAndroidBinary.class, new org.gradle.api.Action<com.android.build.gradle.model.DefaultAndroidBinary>() { @java.lang.Override public void execute(com.android.build.gradle.model.DefaultAndroidBinary binary) { binary.computeMergedNdk(ndkConfig, binary.getProductFlavors(), binary.getBuildType()); java.util.Collection<org.gradle.nativeplatform.SharedLibraryBinarySpec> nativeBinaries = com.android.build.gradle.model.NdkComponentModelPlugin.getNativeBinaries(library, binary.getBuildType(), binary.getProductFlavors()); binary.getNativeBinaries().addAll(nativeBinaries); for (org.gradle.nativeplatform.SharedLibraryBinarySpec nativeBin : nativeBinaries) { com.android.build.gradle.ndk.internal.NdkConfiguration.configureBinary(nativeBin, buildDir, binary.getMergedNdkConfig(), ndkHandler); } } }); } }
public boolean startWpsRegistrar(java.lang.String bssidStr, java.lang.String pin) { if ((android.text.TextUtils.isEmpty(bssidStr)) || (android.text.TextUtils.isEmpty(pin))) return false; return startWpsRegistrar(com.android.server.wifi.util.NativeUtil.macAddressToByteArray(bssidStr), pin); }
private void testForCaptivePortal() { new java.lang.Thread(new java.lang.Runnable() { public void run() { try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; try { urlConnection = ((java.net.HttpURLConnection) (mNetwork.openConnection(mUrl))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.captiveportallogin.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.captiveportallogin.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); if ((mUserAgent) != null) { urlConnection.setRequestProperty("User-Agent", mUserAgent); } java.lang.String requestHeader = urlConnection.getRequestProperties().toString(); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); if (com.android.captiveportallogin.CaptivePortalLoginActivity.DBG) { android.util.Log.d(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, ((((((("probe at " + (mUrl)) + " ret=") + httpResponseCode) + " request=") + requestHeader) + " headers=") + (urlConnection.getHeaderFields()))); } } catch (java.io.IOException e) { } finally { if (urlConnection != null) urlConnection.disconnect(); } if (httpResponseCode == 204) { done(com.android.captiveportallogin.CaptivePortalLoginActivity.Result.DISMISSED); } } }).start(); }
@java.lang.Override int blend() { float r = ((dstR) * (srcA)) + ((1 - (dstA)) * (srcR)); float g = ((dstG) * (srcA)) + ((1 - (dstA)) * (srcG)); float b = ((dstB) * (srcA)) + ((1 - (dstA)) * (srcB)); float a = srcA; return pack(a, r, g, b); }
@org.junit.Test public void neg_float() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(NEG_FLOAT).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }
private boolean areStreamsClosed() { boolean allClosed = true; synchronized(openedStreams) { for (com.android.sched.vfs.CachedDirectFS.TrackedStream stream : openedStreams) { if (!(stream.isClosed())) { com.android.sched.vfs.CachedDirectFS.logger.log(java.util.logging.Level.SEVERE, "Stream from {0} hasn't been closed", stream.getLocation().getDescription()); allClosed &= false; } } } return allClosed; }
@java.lang.Override public boolean equals(java.lang.Object other) { if ((this) == other) { return true; } if (!(other instanceof android.telephony.CellIdentityLte)) { return false; } android.telephony.CellIdentityLte o = ((android.telephony.CellIdentityLte) (other)); return ((((((((mCi) == (o.mCi)) && ((mPci) == (o.mPci))) && ((mTac) == (o.mTac))) && ((mEarfcn) == (o.mEarfcn))) && (android.text.TextUtils.equals(mMccStr, o.mMccStr))) && (android.text.TextUtils.equals(mMncStr, o.mMncStr))) && (android.text.TextUtils.equals(mAlphaLong, o.mAlphaLong))) && (android.text.TextUtils.equals(mAlphaShort, o.mAlphaShort)); }
private void notifyInterfaceLinkStateChanged(java.lang.String iface, boolean up) { invokeForAllObservers(( o) -> o.interfaceLinkStateChanged(iface, up)); }
public static java.lang.String prettyName(java.lang.String name) { if ((name != null) && ((name.length()) > 0)) { name = (java.lang.Character.toUpperCase(name.charAt(0))) + (name.substring(1).replace('_', ' ')); } return name; }
public static void assertSSLSocketFactory(javax.net.ssl.SSLSocketFactory sslSocketFactory) throws java.io.IOException { libcore.java.security.StandardNames.assertDefaultCipherSuites(sslSocketFactory.getDefaultCipherSuites()); libcore.java.security.StandardNames.assertSupportedCipherSuites(sslSocketFactory.getSupportedCipherSuites()); libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertContainsAll("Unsupported default cipher suites", sslSocketFactory.getSupportedCipherSuites(), sslSocketFactory.getDefaultCipherSuites()); libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertSSLSocket(((javax.net.ssl.SSLSocket) (sslSocketFactory.createSocket()))); }
static final java.lang.Runnable childZygoteInit(int targetSdkVersion, java.lang.String[] argv, java.lang.ClassLoader classLoader) { com.android.internal.os.RuntimeInit.Arguments args = new com.android.internal.os.RuntimeInit.Arguments(argv); return com.android.internal.os.RuntimeInit.findStaticMain(args.startClass, args.startArgs, classLoader); }
@java.lang.Override public void onQueueChanged(java.util.List<android.media.session.MediaSession.QueueItem> queue) { if (queue == null) { android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, "onQueueChanged: received null queue"); return; } final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, "onQueueChanged: mHandler is already null"); return; } android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ("onQueueChanged: NowPlaying list changed, Queue Size = " + (queue.size()))); handler.sendEmptyMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NOW_PLAYING_CHANGED_RSP); }
@java.lang.Override public void hangup() throws com.android.internal.telephony.CallStateException { synchronized(com.android.internal.telephony.sip.SipPhone.class) { if (com.android.internal.telephony.sip.SipPhone.SipConnection.SCN_DBG) { log(((((("hangup: conn=" + (com.android.internal.telephony.sip.SipPhone.hidePii(mPeer.getUriString()))) + ": ") + (mState)) + ": on phone ") + (getPhone().getPhoneName()))); } if (!(mState.isAlive())) return; try { android.net.sip.SipAudioCall sipAudioCall = mSipAudioCall; if (sipAudioCall != null) { sipAudioCall.setListener(null); sipAudioCall.endCall(); } } catch (android.net.sip.SipException e) { throw new com.android.internal.telephony.CallStateException(("hangup(): " + e)); } finally { mAdapter.onCallEnded((((mState) == (Call.State.INCOMING)) || ((mState) == (Call.State.WAITING)) ? android.telephony.DisconnectCause.INCOMING_REJECTED : android.telephony.DisconnectCause.LOCAL)); } } }
public void resetSapProxy() { synchronized(mSapProxyLock) { if (com.android.bluetooth.sap.SapRilReceiver.DEBUG) android.util.Log.d(com.android.bluetooth.sap.SapRilReceiver.TAG, ("resetSapProxy :" + (mSapProxy))); try { if ((mSapProxy) != null) { mSapProxy.unlinkToDeath(mSapProxyDeathRecipient); } } catch (android.os.RemoteException | java.lang.RuntimeException e) { android.util.Log.e(com.android.bluetooth.sap.SapRilReceiver.TAG, ("resetSapProxy: exception: " + e)); } mSapProxy = null; } }
private static boolean checkKeyPresence(com.android.manifmerger.MergingReport.Builder mergingReport, com.android.manifmerger.XmlElement xmlElement) { com.android.manifmerger.ManifestModel.NodeKeyResolver nodeKeyResolver = xmlElement.getType().getNodeKeyResolver(); com.google.common.collect.ImmutableList<java.lang.String> keyAttributesNames = nodeKeyResolver.getKeyAttributesNames(); if (((keyAttributesNames.size()) > 0) && (com.google.common.base.Strings.isNullOrEmpty(xmlElement.getKey()))) { java.lang.String message = ((keyAttributesNames.size()) > 1) ? java.lang.String.format("Missing one of the key attributes '%1$s' on element %2$s at %3$s", com.google.common.base.Joiner.on(',').join(keyAttributesNames), xmlElement.getId(), xmlElement.printPosition()) : java.lang.String.format("Missing '%1$s' key attribute on element %2$s at %3$s", keyAttributesNames.get(0), xmlElement.getId(), xmlElement.printPosition()); mergingReport.addError(message); return false; } return true; }
public void setRenderer(@com.android.annotations.NonNull com.android.build.gradle.internal.AndroidAsciiReportRenderer renderer) { this.renderer = renderer; }
private void visit(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Node node) { if ((node.getNodeType()) == (org.w3c.dom.Node.TEXT_NODE)) { check(context, node, node.getTextContent()); } else { org.w3c.dom.NodeList children = node.getChildNodes(); for (int i = 0, n = children.getLength(); i < n; i++) { visit(context, children.item(i)); } } }
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession t) throws java.lang.Exception { try { com.android.jack.util.StructurePrinter visitor = new com.android.jack.util.StructurePrinter(stream); visitor.accept(t.getTypesToEmit()); } finally { stream.close(); } }
public boolean setPasskey(android.bluetooth.BluetoothDevice device, boolean accept, int len, byte[] passkey) { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, "setPasskey() - Not allowed for non-active user"); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.setPasskey(device, accept, len, passkey); }
public void write(java.io.OutputStream out) throws java.io.IOException { @java.lang.SuppressWarnings("IOResourceOpenedButNotSafelyClosed") java.io.DataOutputStream dataOut = new java.io.DataOutputStream(out); try { dataOut.writeUTF(myOldBuild); dataOut.writeUTF(myNewBuild); dataOut.writeBoolean(myIsBinary); dataOut.writeBoolean(myIsStrict); dataOut.writeInt(myActions.size()); for (com.intellij.updater.PatchAction each : myActions) { int key; java.lang.Class clazz = each.getClass(); if (clazz == (com.intellij.updater.CreateAction.class)) { key = com.intellij.updater.Patch.CREATE_ACTION_KEY; } else if (clazz == (com.intellij.updater.UpdateAction.class)) { key = com.intellij.updater.Patch.UPDATE_ACTION_KEY; } else if (clazz == (com.intellij.updater.UpdateZipAction.class)) { key = com.intellij.updater.Patch.UPDATE_ZIP_ACTION_KEY; } else if (clazz == (com.intellij.updater.DeleteAction.class)) { key = com.intellij.updater.Patch.DELETE_ACTION_KEY; } else if (clazz == (com.intellij.updater.ValidateAction.class)) { key = com.intellij.updater.Patch.VALIDATE_ACTION_KEY; } else { throw new java.lang.RuntimeException(("Unknown action " + each)); } dataOut.writeInt(key); each.write(dataOut); } } finally { dataOut.flush(); } }
@java.lang.Override public void run() { java.lang.Module module = com.intellij.openapi.module.ModuleManager.getInstance(project).findModuleByName(dialog.getModuleName()); final com.intellij.execution.RunManagerEx runManager = com.intellij.execution.RunManagerEx.getInstanceEx(project); final com.intellij.execution.RunnerAndConfigurationSettings settings = runManager.createRunConfiguration(module.getName(), com.google.gct.idea.appengine.run.AppEngineRunConfigurationType.getInstance().getFactory()); final com.google.gct.idea.appengine.run.AppEngineRunConfiguration configuration = ((com.google.gct.idea.appengine.run.AppEngineRunConfiguration) (settings.getConfiguration())); configuration.setModule(module); configuration.setWarPath(new java.io.File(moduleRoot, "build/exploded-app").getAbsolutePath()); configuration.setSdkPath(new java.io.File(java.lang.System.getProperty("user.home"), "/.gradle/appengine-sdk/appengine-java-sdk-1.8.9").getAbsolutePath()); configuration.setServerPort("8080"); runManager.addConfiguration(settings, false); }
public void reorient() { final int rot = mDisplay.getRotation(); for (int i = 0; i < 4; i++) { mRotatedViews[i].setVisibility(View.GONE); } mCurrentView = mRotatedViews[rot]; mCurrentView.setVisibility(View.VISIBLE); mDeadZone = ((com.android.systemui.statusbar.policy.DeadZone) (mCurrentView.findViewById(R.id.deadzone))); mBarTransitions.init(mVertical); setDisabledFlags(mDisabledFlags, true); setMenuVisibility(mShowMenu, true); if (com.android.systemui.statusbar.phone.NavigationBarView.DEBUG) { android.util.Log.d(com.android.systemui.statusbar.phone.NavigationBarView.TAG, ("reorient(): rot=" + (mDisplay.getRotation()))); } if ((mDelegateHelper) != null) { mDelegateHelper.setSwapXY((!(mVertical))); } setNavigationIconHints(mNavigationIconHints, true); }
private java.security.cert.X509Certificate findCert(javax.security.auth.x500.X500Principal subj, android.security.net.config.DirectoryCertificateSource.CertSelector selector) { java.lang.String hash = getHash(subj); for (int index = 0; index >= 0; index++) { java.lang.String fileName = (hash + ".") + index; if (!(new java.io.File(mDir, fileName).exists())) { break; } if (isCertMarkedAsRemoved(fileName)) { continue; } java.security.cert.X509Certificate cert = readCertificate(fileName); if (!(subj.equals(cert.getSubjectX500Principal()))) { continue; } if (selector.match(cert)) { return cert; } } return null; }
@java.lang.Override public void answer(java.lang.String callId, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startSession(sessionInfo, android.telecom.ConnectionService.SESSION_ANSWER); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_ANSWER, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }
@java.lang.Override public void interfaceRemoved(java.lang.String interfaze) { synchronized(this) { if ((interfaze.equals(mInterface)) && ((jniCheck(interfaze)) == 0)) { mStatusIntent = null; mNetworkCapabilities.setUids(null); mConfig = null; mInterface = null; if ((mConnection) != null) { mContext.unbindService(mConnection); mConnection = null; agentDisconnect(); } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } } } }
@java.lang.Override public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add("name", mName).add("debuggable", mDebuggable).add("debugJniBuild", mDebugJniBuild).add("packageNameSuffix", mPackageNameSuffix).add("versionNameSuffix", mVersionNameSuffix).add("runProguard", mRunProguard).add("zipAlign", mZipAlign).add("keystore", mKeystore).toString(); }
@org.junit.Test public void testStateTransition_AudioOnToAudioDisconnecting_StackAudioDisconnecting() { int numBroadcastsSent = setUpAudioOnState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_DISCONNECTING, mTestDevice)); verify(mHeadsetService, after(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS).times(numBroadcastsSent)).sendBroadcastAsUser(any(android.content.Intent.class), eq(UserHandle.ALL), eq(HeadsetService.BLUETOOTH_PERM)); org.junit.Assert.assertThat(mHeadsetStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(HeadsetStateMachine.AudioDisconnecting.class)); }
@org.junit.Test public void wifiNotEnabled_wifiApStateIsNotDisabled() { when(mWifiManager.getConfiguredNetworks()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_WIFI_CONFIGURATION, com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_WIFI_CONFIGURATION_EXTERNAL)); when(mWifiManager.getScanResults()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_SCAN_RESULT)); mWifiWakeupController.mContentObserver.onChange(true); com.android.networkrecommendation.TestUtil.sendConfiguredNetworksChanged(mBroadcastReceiver, mContext); com.android.networkrecommendation.TestUtil.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_DISABLED); com.android.networkrecommendation.TestUtil.sendWifiApStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_AP_STATE_ENABLED); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); verifyZeroInteractions(mWifiWakeupNetworkSelector); verify(mWifiManager, never()).setWifiEnabled(true); }
public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }
@org.junit.Test public void run() throws com.android.ide.common.internal.PngException, java.io.IOException { java.io.File outFile = com.android.builder.png.NinePatchAaptProcessorTestUtils.crunchFile(com.android.builder.png.NinePatchAaptProcessorTest.sCruncherKey.get(), mFile, com.android.builder.png.NinePatchAaptProcessorTest.sCruncher); com.android.builder.png.NinePatchAaptProcessorTest.mSourceAndCrunchedFiles.put(mFile, outFile); }
@javax.annotation.Nonnull private com.android.jack.test.toolchain.JackBasedToolchain getToolchain(boolean isApiTest) { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeList = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(1); excludeList.add(com.android.jack.test.toolchain.LegacyJillToolchain.class); if (isApiTest) { excludeList.add(com.android.jack.test.toolchain.JackCliToolchain.class); } return com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchainBase.class, excludeList); }
@javax.annotation.Nonnull public com.android.jack.test.toolchain.JackBasedToolchain addMetaDir(@javax.annotation.Nonnull java.io.File metaDir) { metaImport.add(metaDir); return this; }
@java.lang.Override java.util.List<com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod>> getBuilderRequirements() { java.util.List<com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod>> builderRequirements = super.getBuilderRequirements(); com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod> brokenTestPredicate = com.android.internal.util.Predicates.not(new android.test.suitebuilder.annotation.HasAnnotation(dalvik.annotation.BrokenTest.class)); builderRequirements.add(brokenTestPredicate); builderRequirements.add(getProfilePredicate(mProfile)); builderRequirements.add(getFeaturePredicate()); if (!(mSingleTest)) { com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod> sideEffectPredicate = com.android.internal.util.Predicates.not(new android.test.suitebuilder.annotation.HasAnnotation(dalvik.annotation.SideEffect.class)); builderRequirements.add(sideEffectPredicate); } return builderRequirements; }
public static java.lang.CharSequence getRelativeDateTimeString(android.content.Context c, long time, long minResolution, long transitionResolution, int flags) { if ((flags & (((android.text.format.DateUtils.FORMAT_SHOW_TIME) | (android.text.format.DateUtils.FORMAT_12HOUR)) | (android.text.format.DateUtils.FORMAT_24HOUR))) == (android.text.format.DateUtils.FORMAT_SHOW_TIME)) { flags |= (android.text.format.DateFormat.is24HourFormat(c)) ? android.text.format.DateUtils.FORMAT_24HOUR : android.text.format.DateUtils.FORMAT_12HOUR; } return libcore.icu.RelativeDateTimeFormatter.getRelativeDateTimeString(java.util.Locale.getDefault(), java.util.TimeZone.getDefault(), time, java.lang.System.currentTimeMillis(), minResolution, transitionResolution, flags); }
@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(@javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent, @javax.annotation.Nonnull com.android.sched.vfs.VPath path) { return vfs.getVFileLocation(parent, path); }
@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent arg0) { onRefresh(); }
@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder res = new java.lang.StringBuilder(); res.append("[ImsServiceInfo] name="); res.append(name); res.append(", supportedFeatures=[ "); for (android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair feature : mSupportedFeatures) { res.append("("); res.append(feature.slotId); res.append(","); res.append(feature.featureType); res.append(") "); } res.append("], supportsEmergency="); res.append(supportsEmergencyMmTel); return res.toString(); }
public static org.hamcrest.Matcher<android.view.View> thatMatchesFirst(final org.hamcrest.Matcher<android.view.View> viewMatcher) { return new org.hamcrest.TypeSafeMatcher<android.view.View>() { private boolean isFirstViewFound; private android.view.View matchedView; @java.lang.Override protected boolean matchesSafely(android.view.View view) { if (isFirstViewFound) { return (matchedView) == view; } isFirstViewFound = viewMatcher.matches(view); if (isFirstViewFound) { matchedView = view; } return isFirstViewFound; } @java.lang.Override public void describeTo(org.hamcrest.Description description) { description.appendText("that matches first"); viewMatcher.describeTo(description); } }; }
public void writeToFile(java.io.File file) throws java.io.IOException { if (file == null) { throw new java.lang.NullPointerException("file == null"); } java.io.RandomAccessFile outputFile = new java.io.RandomAccessFile(file, "rw"); writeToDataSink(new com.android.apksig.internal.util.RandomAccessFileDataSink(outputFile)); }
@org.junit.Test public void workingMobileUsbTethering_DualStack() throws java.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobileDualStackUpstreamState(); runUsbTethering(upstreamState); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mRouterAdvertisementDaemon, times(1)).start(); sendIPv6TetherUpdates(upstreamState); verify(mRouterAdvertisementDaemon, times(1)).buildNewRa(any(), notNull()); verify(mNetd, times(1)).tetherApplyDnsInterfaces(); }
private static void sendViewOpPacket(@com.android.annotations.NonNull com.android.ddmlib.Client client, int op, @com.android.annotations.NonNull java.lang.String viewRoot, @com.android.annotations.NonNull java.lang.String view, @com.android.annotations.Nullable com.android.ddmlib.HandleViewDebug.ViewDumpHandler handler) throws java.io.IOException { int bufLen = (((4 + 4) + ((viewRoot.length()) * 2)) + 4) + ((view.length()) * 2); java.nio.ByteBuffer buf = allocBuffer(bufLen); com.android.ddmlib.JdwpPacket packet = new com.android.ddmlib.JdwpPacket(buf); java.nio.ByteBuffer chunkBuf = getChunkDataBuf(buf); chunkBuf.putInt(op); chunkBuf.putInt(viewRoot.length()); putString(chunkBuf, viewRoot); chunkBuf.putInt(view.length()); putString(chunkBuf, view); finishChunkPacket(packet, com.android.ddmlib.HandleViewDebug.CHUNK_VUOP, chunkBuf.position()); if (handler != null) { client.sendAndConsume(packet, handler); } else { client.sendAndConsume(packet); } }
public void test_getDisplayCountry_8870289() throws java.lang.Exception { assertEquals("Hong Kong", new java.util.Locale("", "HK").getDisplayCountry(java.util.Locale.US)); assertEquals("Macau", new java.util.Locale("", "MO").getDisplayCountry(java.util.Locale.US)); assertEquals("Palestine", new java.util.Locale("", "PS").getDisplayCountry(java.util.Locale.US)); assertEquals("Cocos (Keeling) Islands", new java.util.Locale("", "CC").getDisplayCountry(java.util.Locale.US)); assertEquals("Falkland Islands (Islas Malvinas)", new java.util.Locale("", "FK").getDisplayCountry(java.util.Locale.US)); assertEquals("Macedonia (FYROM)", new java.util.Locale("", "MK").getDisplayCountry(java.util.Locale.US)); assertEquals("Myanmar (Burma)", new java.util.Locale("", "MM").getDisplayCountry(java.util.Locale.US)); assertEquals("Taiwan", new java.util.Locale("", "TW").getDisplayCountry(java.util.Locale.US)); }
private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, com.android.rs.test.Float2 javaResult, com.android.rs.test.Float2 rsResult) { final boolean success = ((javaResult.x) == (rsResult.x)) && ((javaResult.y) == (rsResult.y)); java.lang.String status = (success) ? "PASSED" : "FAILED"; if (success && (t != null)) status += " " + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((((((((((((testName + ": java (") + (javaResult.x)) + ", ") + (javaResult.y)) + ")") + ", rs (") + (rsResult.x)) + ", ") + (rsResult.y)) + ")") + ": ") + status)); return success; }
public static java.lang.String $noinline$floatToDoubleToIntPrint(float value) { if (Main.doThrow) { throw new java.lang.Error(); } double d = ((double) (value)); int i = ((int) (d)); return (("d=" + d) + ", i=") + i; }
public void testFreed() { java.nio.ByteBuffer b1 = java.nio.ByteBuffer.allocateDirect(1); java.nio.ByteBuffer b2 = b1.duplicate(); java.nio.NioUtils.freeDirectBuffer(b1); for (java.nio.ByteBuffer b : new java.nio.ByteBuffer[]{ b1, b2 }) { assertFalse(b.isAccessible()); try { b.compact(); fail(); } catch (java.lang.IllegalStateException expected) { } try { b.duplicate(); fail(); } catch (java.lang.IllegalStateException expected) { } testFailForPutMethods(b); testFailForAsMethods(b); testFailForGetMethods(b); java.nio.NioUtils.freeDirectBuffer(b); } }
@android.test.suitebuilder.annotation.MediumTest public void testDeviceTreeCpuCurrent() throws java.lang.Exception { java.lang.String arch = java.lang.System.getProperty("os.arch"); java.lang.String[] osVersion = java.lang.System.getProperty("os.version").split("\\."); if (((!(arch.contains("arm"))) || ((java.lang.Integer.parseInt(osVersion[0])) < 2)) || (((java.lang.Integer.parseInt(osVersion[0])) == 3) && ((java.lang.Integer.parseInt(osVersion[1])) < 10))) return; final java.io.File f = new java.io.File("/proc/device-tree/cpus"); if (!(f.exists())) return; java.lang.String[] dir = f.list(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File pathname, java.lang.String name) { return (pathname.isDirectory()) && (name.matches("cpu@[0-9]+")); } }); if (dir == null) return; for (java.lang.String cpuDir : dir) { java.io.File fCpu = new java.io.File((cpuDir + "/current")); assertTrue(fCpu.canRead()); } }
public static dalvik.system.CloseGuard closeGuardGet() { if ((Build.VERSION.SDK_INT) < 14) { return null; } return dalvik.system.CloseGuard.get(); }
private boolean isLeanback() { final android.content.pm.PackageManager pm = this.getPackageManager(); return (pm != null) && (pm.hasSystemFeature(PackageManager.FEATURE_LEANBACK)); }
@org.junit.Test public void testIsLocallyAssignedAddress() { android.net.MacAddress[] localAddresses = new android.net.MacAddress[]{ new android.net.MacAddress("06:00:00:00:00:00"), new android.net.MacAddress("07:00:d3:56:8a:c4"), new android.net.MacAddress("33:33:aa:bb:cc:dd") }; android.net.MacAddress[] universalAddresses = new android.net.MacAddress[]{ new android.net.MacAddress("00:01:44:55:66:77"), new android.net.MacAddress("08:00:22:33:44:55") }; for (android.net.MacAddress mac : localAddresses) { java.lang.String msg = (mac.toString()) + " expected to be a locally assigned address"; assertTrue(msg, mac.isLocallyAssigned()); } for (android.net.MacAddress mac : universalAddresses) { java.lang.String msg = (mac.toString()) + " expected not to be globally unique address"; assertFalse(msg, mac.isLocallyAssigned()); } }
private void processNoiseReductionEvent(boolean enable, android.bluetooth.BluetoothDevice device) { if (!(mAudioParams.isEmpty())) { if (enable) { mAudioParams.put("NREC", 1); } else { mAudioParams.put("NREC", 0); } log(((("NREC value for device :" + device) + " is: ") + (mAudioParams.get("NREC")))); } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "processNoiseReductionEvent: audioParamNrec is null "); } if ((((mCurrentDevice) != null) && (mCurrentDevice.equals(device))) && ((getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED))) { setAudioParameters(device); } }
@javax.annotation.Nonnull public static com.android.jack.dx.rop.cst.CstMethodRef createMethodRef(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall methodCall) { com.android.jack.dx.rop.cst.CstType definingClass = com.android.jack.backend.dex.rop.RopHelper.getCstType(methodCall.getReceiverType()); java.lang.String signatureWithoutName = com.android.jack.backend.dex.rop.RopHelper.getMethodSignatureWithoutName(methodCall); com.android.jack.dx.rop.cst.CstNat nat = new com.android.jack.dx.rop.cst.CstNat(new com.android.jack.dx.rop.cst.CstString(methodCall.getMethodName()), new com.android.jack.dx.rop.cst.CstString(signatureWithoutName)); com.android.jack.dx.rop.cst.CstMethodRef methodRef = new com.android.jack.dx.rop.cst.CstMethodRef(definingClass, nat); return methodRef; }
public static void removeDeviceForward(com.android.ddmlib.IDevice device) { synchronized(com.android.hierarchyviewer.device.DeviceBridge.devicePortMap) { final java.lang.Integer localPort = com.android.hierarchyviewer.device.DeviceBridge.devicePortMap.get(device); if (localPort != null) { try { device.removeForward(localPort, Configuration.DEFAULT_SERVER_PORT); com.android.hierarchyviewer.device.DeviceBridge.devicePortMap.remove(device); } catch (com.android.ddmlib.TimeoutException e) { com.android.ddmlib.Log.e("hierarchy", ("Timeout removing port forwarding for " + device)); } catch (com.android.ddmlib.AdbCommandRejectedException e) { com.android.ddmlib.Log.e("hierarchy", java.lang.String.format("Adb rejected remove-forward command for device %1$s: %2$s", device, e.getMessage())); } catch (java.io.IOException e) { com.android.ddmlib.Log.e("hierarchy", java.lang.String.format("Failed to remove forward for device %1$s: %2$s", device, e.getMessage())); } } } }
@java.lang.Override @com.android.annotations.NonNull public com.android.sdklib.internal.repository.packages.PreviewVersion getPreviewVersion() { return mPreviewVersion; }
@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(("com.android.jack.shrob.test" + testNumber)); java.io.File refFolder = new java.io.File(testFolder, "refsSeed"); java.io.File candidateOutputSeeds = com.android.jack.test.toolchain.AbstractTestTools.createTempFile("seeds", ".txt"); java.io.File refOutputSeeds = new java.io.File(refFolder, (("expected-" + flagNumber) + ".txt")); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File seedsFile = addOptionsToFlagsFile(new java.io.File(testFolder, ("proguard.flags" + flagNumber)), testFolder, (" -dontshrink -dontobfuscate -printseeds " + (candidateOutputSeeds.getAbsolutePath()))); toolchain.addProguardFlags(seedsFile); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, "jack")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorSeeds(refOutputSeeds, candidateOutputSeeds)); }
@java.lang.SuppressWarnings({ "unchecked" }) @java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JArrayLiteral arrayLiteral) { expression = new com.android.jack.ir.ast.JArrayLiteral(arrayLiteral.getSourceInfo(), ((java.util.ArrayList<com.android.jack.ir.ast.JLiteral>) ((java.lang.Object) (cloneExpressions(arrayLiteral.getValues()))))); return false; }
private void checkStepFloat3FloatFloat3() { android.renderscript.Allocation inEdge = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, 7454407128371334920L); android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 7454407128371334920L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); script.set_gAllocInV(inV); script.forEach_testStepFloat3FloatFloat3(inEdge, out); verifyResultsStepFloat3FloatFloat3(inEdge, inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testStepFloat3FloatFloat3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInV(inV); scriptRelaxed.forEach_testStepFloat3FloatFloat3(inEdge, out); verifyResultsStepFloat3FloatFloat3(inEdge, inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testStepFloat3FloatFloat3: " + (e.toString()))); } }
public static int sendto(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, int flags, java.net.InetAddress inetAddress, int port) throws android.system.ErrnoException, java.net.SocketException { return Libcore.os.sendto(fd, buffer, flags, inetAddress, port); }
protected boolean setUpActiveNetworkMeteringState() throws java.lang.Exception { return true; }
private synchronized void initMediaPlayersInfoList() { mMediaPlayerInfoList.clear(); if ((mMediaSessionManager) == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.w(com.android.bluetooth.avrcp.Avrcp.TAG, "initMediaPlayersInfoList: no media session manager!"); return; } java.util.List<android.media.session.MediaController> controllers = mMediaSessionManager.getActiveSessions(null); if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, (("initMediaPlayerInfoList: " + (controllers.size())) + " controllers")); for (android.media.session.MediaController controller : controllers) { addMediaPlayerController(controller); } }
@java.lang.Override public synchronized java.lang.String getConfigString(int item) throws android.os.RemoteException { if (mProvisionedIntValue.containsKey(item)) { return mProvisionedStringValue.get(item); } else { java.lang.String retVal = getImsConfigImpl().getConfigString(item); if (retVal != null) { updateCachedValue(item, retVal, false); } return retVal; } }
public void timeSystemShortArrayCopy(int reps) { final int len = arrayLength; short[] src = new short[len]; short[] dst = new short[len]; for (int rep = 0; rep < reps; ++rep) { java.lang.System.arraycopy(src, 0, dst, 0, len); } }
protected void setUp() throws java.lang.Exception { super.setUp(); channel1 = java.nio.channels.DatagramChannel.open(); channel2 = java.nio.channels.DatagramChannel.open(); channel1.socket().bind(new java.net.InetSocketAddress(LOOPBACK, 0)); channel2.socket().bind(new java.net.InetSocketAddress(LOOPBACK, 0)); channel1Address = ((java.net.InetSocketAddress) (channel1.socket().getLocalSocketAddress())); channel2Address = ((java.net.InetSocketAddress) (channel2.socket().getLocalSocketAddress())); this.datagramSocket1 = new java.net.DatagramSocket(0, LOOPBACK); this.datagramSocket2 = new java.net.DatagramSocket(0, LOOPBACK); datagramSocket1Address = ((java.net.InetSocketAddress) (datagramSocket1.getLocalSocketAddress())); datagramSocket2Address = ((java.net.InetSocketAddress) (datagramSocket2.getLocalSocketAddress())); }
public void addProductFlavor(@com.android.annotations.NonNull com.android.builder.ProductFlavor productFlavor, @com.android.annotations.NonNull com.android.builder.SourceSet sourceSet) { mFlavorConfigs.add(productFlavor); mFlavorSourceSets.add(sourceSet); mMergedFlavor = productFlavor.mergeOver(mMergedFlavor); }
private void checkOutsideDst(java.util.Calendar cal, java.lang.String description) { java.util.TimeZone timeZone = cal.getTimeZone(); checkOutsideDst(cal, description, timeZone.getRawOffset()); }
@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((("NativeLibraryImpl{" + "name='") + (name)) + '\'') + ", toolchainName='") + (toolchainName)) + '\'') + ", cIncludeDirs=") + (cIncludeDirs)) + ", cppIncludeDirs=") + (cppIncludeDirs)) + ", cDefines=") + (cDefines)) + ", cppDefines=") + (cppDefines)) + ", cCompilerFlags=") + (cCompilerFlags)) + ", cppCompilerFlags=") + (cppCompilerFlags)) + ", solibSearchPaths=") + (debuggableLibraryFolders)) + '}'; }
private void fillList() { java.lang.String where = ("numeric=\"" + (android.os.SystemProperties.get(TelephonyProperties.PROPERTY_ICC_OPERATOR_NUMERIC, ""))) + "\""; android.database.Cursor cursor = getContentResolver().query(Telephony.Carriers.CONTENT_URI, new java.lang.String[]{ "_id", "name", "apn", "type" }, where, null, Telephony.Carriers.DEFAULT_SORT_ORDER); if (cursor != null) { android.preference.PreferenceGroup apnList = ((android.preference.PreferenceGroup) (findPreference("apn_list"))); apnList.removeAll(); java.util.ArrayList<android.preference.Preference> mmsApnList = new java.util.ArrayList<android.preference.Preference>(); mSelectedKey = getSelectedApnKey(); cursor.moveToFirst(); while (!(cursor.isAfterLast())) { java.lang.String name = cursor.getString(com.android.settings.ApnSettings.NAME_INDEX); java.lang.String apn = cursor.getString(com.android.settings.ApnSettings.APN_INDEX); java.lang.String key = cursor.getString(com.android.settings.ApnSettings.ID_INDEX); java.lang.String type = cursor.getString(com.android.settings.ApnSettings.TYPES_INDEX); com.android.settings.ApnPreference pref = new com.android.settings.ApnPreference(this); pref.setKey(key); pref.setTitle(name); pref.setSummary(apn); pref.setPersistent(false); pref.setOnPreferenceChangeListener(this); boolean selectable = (type == null) || (!(type.equals("mms"))); pref.setSelectable(selectable); if (selectable) { if (((mSelectedKey) != null) && (mSelectedKey.equals(key))) { pref.setChecked(); } apnList.addPreference(pref); } else { mmsApnList.add(pref); } cursor.moveToNext(); } cursor.close(); for (android.preference.Preference preference : mmsApnList) { apnList.addPreference(preference); } } }
public void loadDataFromTemplate() { if (myUpdating) { return; } myUpdating = true; try { java.lang.Object moduleName = myWizardState.get(NewAppEngineModuleAction.ATTR_MODULE_NAME); if (moduleName == null) { moduleName = myWizardState.get(NewProjectWizardState.ATTR_MODULE_NAME); } if (moduleName != null) { myModuleNameField.setText(moduleName.toString()); } java.lang.Object packageName = myWizardState.get(TemplateMetadata.ATTR_PACKAGE_NAME); if (packageName != null) { myPackageNameField.setText(packageName.toString()); } } finally { myUpdating = false; } }
@java.lang.Override public void hangupWaitingOrBackground(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.hangupWaitingOrBackground(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "hangupWaitingOrBackground", e); } } }
private static byte[] stringToUtf8Bytes(java.lang.String string, int utf8Len) { int len = string.length(); byte[] bytes = new byte[utf8Len]; int outAt = 0; for (int i = 0; i < len; i++) { char c = string.charAt(i); if ((c != 0) && (c < 128)) { bytes[(outAt++)] = ((byte) (c)); } else if (c < 2048) { bytes[(outAt++)] = ((byte) (((c >> 6) & 31) | 192)); bytes[(outAt++)] = ((byte) ((c & 63) | 128)); } else { bytes[(outAt++)] = ((byte) (((c >> 12) & 15) | 224)); bytes[(outAt++)] = ((byte) (((c >> 6) & 63) | 128)); bytes[(outAt++)] = ((byte) ((c & 63) | 128)); } } return bytes; }
public void logError(java.lang.String log) { if (acceptLog(log)) { if ((mLog) != null) { mLog.error(null, " %1$s", log); } else { synchronized(mLogText) { mLogText.append("ERROR: ").append(log); } } } }
@org.junit.Test public void wrongNegativeColumnIndex() { expectedException.expect(java.lang.IllegalArgumentException.class); android.support.test.espresso.matcher.CursorMatchers.withRowInt((-1), android.support.test.espresso.matcher.CursorMatchersTest.INTEGER_VALUE_MATCHER).matches(cursor); }
@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.SuiteReturnsCustomTest.class) @org.junit.Test public void testRunner_SuiteReturnsCustomTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); expectedResults().failure("suite", ((("" + "java.lang.IllegalStateException: Unknown suite() result: ") + (vogar.target.junit3.SuiteReturnsCustomTest.CustomTest.class.getName())) + "\n")).completedNormally(); }
@java.lang.Override public void connectionReady(com.android.ims.ImsManager manager) throws com.android.ims.ImsException { android.telephony.Rlog.d(com.android.internal.telephony.ImsSmsDispatcher.TAG, "ImsManager: connection ready."); synchronized(mLock) { setListeners(); mIsImsServiceUp = true; } }
android.os.ParcelFileDescriptor.ParcelFileDescriptor updateWallpaperBitmapLocked(java.lang.String name, com.android.server.WallpaperManagerService.WallpaperData wallpaper) { if (name == null) name = ""; try { java.io.File dir = com.android.server.WallpaperManagerService.getWallpaperDir(wallpaper.userId); if (!(dir.exists())) { dir.mkdir(); android.os.FileUtils.setPermissions(dir.getPath(), (((android.os.FileUtils.S_IRWXU) | (android.os.FileUtils.S_IRWXG)) | (android.os.FileUtils.S_IXOTH)), (-1), (-1)); } java.io.File file = new java.io.File(dir, com.android.server.WallpaperManagerService.WALLPAPER); android.os.ParcelFileDescriptor.ParcelFileDescriptor fd = android.os.ParcelFileDescriptor.ParcelFileDescriptor.open(file, ((MODE_CREATE) | (MODE_READ_WRITE))); if (!(android.os.SELinux.restorecon(file))) { return null; } wallpaper.name = name; return fd; } catch (java.io.FileNotFoundException e) { android.util.Slog.w(com.android.server.WallpaperManagerService.TAG, "Error setting wallpaper", e); } return null; }
@java.lang.Override public void onCreate() { android.util.Log.i(com.android.phone.testapps.imstestapp.TestImsService.LOG_TAG, "TestImsService: onCreate"); mImsRegistration = com.android.phone.testapps.imstestapp.TestImsRegistrationImpl.getInstance(); mTestMmTelFeature = com.android.phone.testapps.imstestapp.TestMmTelFeatureImpl.getInstance(); mTestRcsFeature = new com.android.phone.testapps.imstestapp.TestRcsFeatureImpl(); mTestImsConfig = com.android.phone.testapps.imstestapp.TestImsConfigImpl.getInstance(); com.android.phone.testapps.imstestapp.TestImsService.mInstance = this; }
private void init(java.io.InputStream is) throws java.io.IOException { java.util.Properties prop = new java.util.Properties(); prop.load(is); long versionFileVersion = java.lang.Long.parseLong(prop.getProperty("version-file.version.code")); assert versionFileVersion >= 1; version = prop.getProperty("version"); assert (version) != null; releaseName = prop.getProperty("version.release.name"); assert (releaseName) != null; releaseCode = java.lang.Integer.parseInt(prop.getProperty("version.release.code")); subReleaseCode = java.lang.Integer.parseInt(prop.getProperty("version.sub-release.code")); subReleaseKind = com.android.sched.util.SubReleaseKind.valueOf(com.android.sched.util.SubReleaseKind.class, prop.getProperty("version.sub-release.kind")); buildId = prop.getProperty("version.buildid"); if (((buildId) != null) && (buildId.isEmpty())) { buildId = null; } codeBase = prop.getProperty("version.sha"); if (((codeBase) != null) && (codeBase.isEmpty())) { codeBase = null; } if (((codeBase) == null) || ((buildId) == null)) { subReleaseKind = SubReleaseKind.ENGINEERING; } }
boolean statisified(android.net.NetworkCapabilities requestedCapabilities) { return requestedCapabilities.satisfiedByNetworkCapabilities(mCapabilities); }
public void mincore(long address, long byteCount, byte[] vector) throws android.system.ErrnoException;
public int waitpid(int pid, android.util.MutableInt status, int options) throws android.system.ErrnoException;
public boolean hasCarrierPrivilegeRules() { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return (carrierPrivilegeRules != null) && (carrierPrivilegeRules.hasCarrierPrivilegeRules()); }
@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(@javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent, @javax.annotation.Nonnull java.lang.String name) { return vfs.getVFileLocation(parent, name); }
private void disableWifiIpServingLocked(java.lang.String ifname, int apState) { mLog.log(("Canceling WiFi tethering request - AP_STATE=" + apState)); mWifiTetherRequested = false; if (!(android.text.TextUtils.isEmpty(ifname))) { final com.android.server.connectivity.Tethering.TetherState ts = mTetherStates.get(ifname); if (ts != null) { ts.stateMachine.unwanted(); return; } } for (int i = 0; i < (mTetherStates.size()); i++) { com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism = mTetherStates.valueAt(i).stateMachine; if ((tism.interfaceType()) == (android.net.ConnectivityManager.TETHERING_WIFI)) { tism.unwanted(); return; } } mLog.log(("Error disabling Wi-Fi IP serving; " + (android.text.TextUtils.isEmpty(ifname) ? "no interface name specified" : "specified interface: " + ifname))); }
public com.android.apksig.SigningCertificateLineage spawnDescendant(com.android.apksig.SigningCertificateLineage.SignerConfig parent, com.android.apksig.SigningCertificateLineage.SignerConfig child) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.cert.CertificateEncodingException { if ((parent == null) || (child == null)) { throw new java.lang.NullPointerException("can't add new descendant to lineage with null inputs"); } com.android.apksig.SigningCertificateLineage.SignerCapabilities signerCapabilities = new com.android.apksig.SigningCertificateLineage.SignerCapabilities.Builder().build(); return spawnDescendant(parent, child, signerCapabilities); }
public native long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.system.Int64Ref inOffset, long byteCount) throws android.system.ErrnoException;
public void testGetExtendedKeyUsage() throws java.lang.Exception { assertNull(new tests.security.cert.X509Certificate2Test.MyX509Certificate().getExtendedKeyUsage()); java.security.cert.X509Certificate cert = generateCert(tests.security.cert.X509Certificate2Test.CERT_CORRECT); java.util.List<java.lang.String> l = cert.getExtendedKeyUsage(); assertNotNull(l); try { l.clear(); fail(); } catch (java.lang.UnsupportedOperationException expected) { } try { l.add("Test"); fail(); } catch (java.lang.UnsupportedOperationException expected) { } try { l.remove(0); fail(); } catch (java.lang.UnsupportedOperationException expected) { } }
private void checkAndSetNotification(android.net.NetworkInfo networkInfo, java.util.List<android.net.wifi.ScanResult> scanResults) { if (!(mNotificationEnabled)) return; if ((mWifiState) != (android.net.wifi.WifiManager.WIFI_STATE_ENABLED)) return; android.net.NetworkInfo.State state = NetworkInfo.State.DISCONNECTED; if (networkInfo != null) { state = networkInfo.getState(); } if ((state == (NetworkInfo.State.DISCONNECTED)) || (state == (NetworkInfo.State.UNKNOWN))) { android.net.RecommendationResult result = getOpenNetworkRecommendation(scanResults); if ((result != null) && ((result.getWifiConfiguration()) != null)) { mRecommendedNetwork = result.getWifiConfiguration(); mNotificationBadgeBitmap = mWifiNotificationHelper.createNotificationBadgeBitmap(mRecommendedNetwork, scanResults); if (((++(mNumScansSinceNetworkStateChange)) >= (com.android.networkrecommendation.WifiNotificationController.NUM_SCANS_BEFORE_ACTUALLY_SCANNING)) && ((mNotificationBadgeBitmap) != null)) { displayNotification(); } return; } } removeNotification(); }
public boolean hasSubId() { return (mSubId) != (android.telephony.SubscriptionManager.INVALID_SUBSCRIPTION_ID); }
void addZipFile(java.io.File zipFile) throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SealedPackageException { if (mIsSealed) { throw new com.android.builder.packaging.SealedPackageException("APK is already sealed"); } java.io.FileInputStream fis = null; try { mLogger.verbose("%s:", zipFile); mNullFilter.reset(zipFile); fis = new java.io.FileInputStream(zipFile); mBuilder.writeZip(fis, mNullFilter); } catch (com.android.builder.packaging.DuplicateFileException e) { mBuilder.cleanUp(); throw e; } catch (java.lang.Exception e) { mBuilder.cleanUp(); throw new com.android.builder.packaging.PackagerException(e, "Failed to add %s", zipFile); } finally { try { com.google.common.io.Closeables.close(fis, true); } catch (java.io.IOException e) { } } }
@java.lang.Override public void iccCloseLogicalChannel(int channel, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIM_CLOSE_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " channel = ") + channel)); } try { radioProxy.iccCloseLogicalChannel(rr.mSerial, channel); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "iccCloseLogicalChannel", e); } } }
@javax.annotation.Nonnull public java.lang.String getPathElementAsString(char separator) { return path.toString().replace(this.separator, separator); }
public void kill(int pid, int signal) throws android.system.ErrnoException { os.kill(pid, signal); }
@java.lang.Override @javax.annotation.Nonnull public java.lang.String getLibraryExtension() { return ".jack"; }
@java.lang.Override protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec == null) { throw new java.security.spec.InvalidKeySpecException("keySpec == null"); } if (keySpec instanceof java.security.spec.ECPrivateKeySpec) { return new org.apache.harmony.xnet.provider.jsse.OpenSSLECPrivateKey(((java.security.spec.ECPrivateKeySpec) (keySpec))); } else if (keySpec instanceof java.security.spec.PKCS8EncodedKeySpec) { return org.apache.harmony.xnet.provider.jsse.OpenSSLKey.getPrivateKey(((java.security.spec.PKCS8EncodedKeySpec) (keySpec)), NativeCrypto.EVP_PKEY_EC); } throw new java.security.spec.InvalidKeySpecException(("Must use ECPrivateKeySpec or PKCS8EncodedKeySpec; was " + (keySpec.getClass().getName()))); }
public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_convert s = new com.android.rs.test.ScriptC_convert(pRS); pRS.setMessageHandler(mRsMessage); s.invoke_convert_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }
@java.lang.Override public synchronized void run(com.android.jack.ir.ast.JDefinedClassOrInterface declaredType) throws java.lang.Exception { if (declaredType.isExternal()) { return; } com.android.jack.Jack.getSession().getFileDependencies().addMappingBetweenJavaFileAndType(declaredType.getSourceInfo().getFileName(), declaredType); }
private static java.io.File copyDataToLocalFile(android.content.Context context, android.os.ParcelFileDescriptor inputFileDescriptor) { try (android.os.ParcelFileDescriptor pfd = inputFileDescriptor) { java.io.File localFile; try { localFile = java.io.File.createTempFile("temp", ".zip", context.getFilesDir()); } catch (java.io.IOException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, "Unable to create local storage file", e); return null; } java.io.InputStream fis = new java.io.FileInputStream(pfd.getFileDescriptor(), false); try (java.io.FileOutputStream fos = new java.io.FileOutputStream(localFile, false)) { libcore.io.Streams.copy(fis, fos); } catch (java.io.IOException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ("Unable to create asset storage file: " + localFile), e); return null; } return localFile; } catch (java.io.IOException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, "Unable to close ParcelFileDescriptor", e); return null; } }
public void testAesCbcHmacSha512Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }
private void testChannelRead_exceptionWhenAlreadyClosed(libcore.java.nio.channels.FileIOInterruptTest.ChannelReader.Method method) throws java.lang.Exception { libcore.java.nio.channels.FileIOInterruptTest.FifoWriter fifoWriter = new libcore.java.nio.channels.FileIOInterruptTest.FifoWriter(fifoFile); fifoWriter.start(); java.io.FileInputStream fis = new java.io.FileInputStream(fifoFile); java.nio.channels.FileChannel fileInputChannel = fis.getChannel(); fileInputChannel.close(); java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocateDirect(10); try { if (method == (libcore.java.nio.channels.FileIOInterruptTest.ChannelReader.Method.READ)) { fileInputChannel.read(buffer); } else { java.nio.ByteBuffer buffer2 = java.nio.ByteBuffer.allocateDirect(10); fileInputChannel.read(new java.nio.ByteBuffer[]{ buffer, buffer2 }); } fail(); } catch (java.io.IOException expected) { assertSame(java.nio.channels.ClosedChannelException.class, expected.getClass()); } fifoWriter.tidyUp(); }
@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVFile createVFile(@javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVDir parent, @javax.annotation.Nonnull java.lang.String name) throws com.android.sched.util.file.CannotCreateFileException { return new com.android.sched.vfs.MessageDigestFS.MessageDigestVFile(this, parent.getWrappedDir().createVFile(name)); }
public void testNativeUdpSocketPair() throws java.lang.Exception { for (java.lang.String addr : android.net.cts.IpSecBaseTest.LOOPBACK_ADDRS) { java.net.InetAddress local = java.net.InetAddress.getByName(addr); try (android.net.IpSecTransform transform = buildDefaultTransform(local)) { android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeUdpSocket> sockets = android.net.cts.IpSecBaseTest.getNativeUdpSocketPair(local, mISM, transform, true); checkSocketPair(sockets.mLeftSock, sockets.mRightSock); } } }
@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (("okToConnect: cannot connect to " + device) + " : quiet mode enabled")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE))) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((((("okToConnect: cannot connect to " + device) + " : priority=") + priority) + " bondState=") + bondState)); return false; } if (priority <= (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((("okToConnect: cannot connect to " + device) + " : priority=") + priority)); return false; } return true; }
private void touchSourceFile(@javax.annotation.Nonnull java.io.File... sources) throws java.lang.Exception { java.util.List<java.io.File> files = new java.util.ArrayList<java.io.File>(); for (java.io.File source : sources) { com.android.jack.test.toolchain.AbstractTestTools.getJavaFiles(source, files, false); } if ((files.size()) > 0) { java.io.File fileToTouch = files.get(((files.size()) / 2)); if (!(fileToTouch.setLastModified(java.lang.System.currentTimeMillis()))) { throw new java.lang.AssertionError((("Could not touch file '" + (fileToTouch.getPath())) + "'")); } } }
private void checkTgammaFloat3Float3() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, -1293314728412085568L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); script.forEach_testTgammaFloat3Float3(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testTgammaFloat3Float3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testTgammaFloat3Float3(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testTgammaFloat3Float3: " + (e.toString()))); } }
@java.lang.Override public void addPages() { if (mShowWelcomePage) { mWelcomePage = new com.android.ide.eclipse.adt.internal.welcome.WelcomeWizardPage(); addPage(mWelcomePage); } if ((mShowUsagePage) && (!(mStore.hasPingId()))) { mUsagePage = new com.android.ide.eclipse.adt.internal.welcome.UsagePermissionPage(); addPage(mUsagePage); } }
@java.lang.Override public void execute(com.android.build.gradle.managed.BuildType buildType) { com.android.build.gradle.internal.NdkOptionsHelper.init(buildType.getNdk()); }
@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_NOTIFICATION_REGISTRATION : if (com.android.bluetooth.map.BluetoothMnsObexClient.V) android.util.Log.v(com.android.bluetooth.map.BluetoothMnsObexClient.TAG, ((("Reg masId: " + (msg.arg1)) + " notfStatus: ") + (msg.arg2))); if (isValidMnsRecord()) { handleRegistration(msg.arg1, msg.arg2); } else { if (com.android.bluetooth.map.BluetoothMnsObexClient.D) android.util.Log.d(com.android.bluetooth.map.BluetoothMnsObexClient.TAG, "MNS SDP info not available yet - Cannot Connect."); } break; case com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_SEND_EVENT : sendEventHandler(((byte[]) (msg.obj)), msg.arg1); break; case com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_SDP_SEARCH_REGISTRATION : notifyMnsSdpSearch(); mMnsLstRegRqst = new com.android.bluetooth.map.BluetoothMnsObexClient.MnsSdpSearchInfo(true, msg.arg1, msg.arg2); android.os.Message msgReg = mHandler.obtainMessage(com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_NOTIFICATION_REGISTRATION, msg.arg1, msg.arg2); if (com.android.bluetooth.map.BluetoothMnsObexClient.V) android.util.Log.v(com.android.bluetooth.map.BluetoothMnsObexClient.TAG, ((("SearchReg masId: " + (msg.arg1)) + " notfStatus: ") + (msg.arg2))); mHandler.sendMessageDelayed(msgReg, MNS_SDP_SEARCH_DELAY); break; default : break; } }
private void onVolumeChanged(int type, int volume, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VOLUME_CHANGED, type, volume, getDevice(address)); sendMessageToService(event); }
@java.lang.Override @javax.annotation.Nonnull public com.android.sched.scheduler.ProductionSet getProductions(@javax.annotation.Nonnull com.android.sched.util.config.Config config, @javax.annotation.Nonnull com.android.sched.scheduler.Scheduler scheduler) { com.android.sched.scheduler.ProductionSet set = scheduler.createProductionSet(); if (config.get(CodeCoverage.CODE_COVERVAGE).booleanValue()) { set.add(com.android.jack.coverage.CodeCoverageMetadataFile.class); } return set; }
public void testAesCbcHmacSha1Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }
@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add("name", mName).add("debuggable", mDebuggable).add("testCoverageEnabled", mTestCoverageEnabled).add("jniDebugBuild", mJniDebugBuild).add("renderscriptDebugBuild", mRenderscriptDebugBuild).add("renderscriptOptimLevel", mRenderscriptOptimLevel).add("packageNameSuffix", mPackageNameSuffix).add("versionNameSuffix", mVersionNameSuffix).add("runProguard", mRunProguard).add("zipAlign", mZipAlign).add("signingConfig", mSigningConfig).toString(); }
private void compileAndUpload() { final java.lang.Runnable startUploading = new java.lang.Runnable() { @java.lang.Override public void run() { com.intellij.openapi.application.ApplicationManager.getApplication().invokeLater(new java.lang.Runnable() { @java.lang.Override public void run() { startUploadingProcess(); } }); } }; final com.android.tools.idea.gradle.invoker.GradleInvoker invoker = com.android.tools.idea.gradle.invoker.GradleInvoker.getInstance(myProject); final com.android.tools.idea.gradle.invoker.GradleInvoker.AfterGradleInvocationTask deployAfter = new com.android.tools.idea.gradle.invoker.GradleInvoker.AfterGradleInvocationTask() { @java.lang.Override public void execute(@org.jetbrains.annotations.NotNull com.android.tools.idea.gradle.invoker.GradleInvocationResult result) { invoker.removeAfterGradleInvocationTask(this); if (result.isBuildSuccessful()) { startUploading.run(); } } }; invoker.addAfterGradleInvocationTask(deployAfter); invoker.assemble(new java.lang.Module[]{ myModule }, GradleInvoker.TestCompileType.NONE); }
@org.junit.Test public void testVersion() { com.android.jack.Version version = com.android.jack.Jack.getVersion(); assertNotNull(version); assertNotNull(version.getVersion()); assertNotNull(version.getVerboseVersion()); assertNotNull(version.getReleaseName()); assertTrue(((version.getReleaseCode()) > 0)); assertTrue(((version.getSubReleaseCode()) > 0)); if (((version.getBuildId()) == null) || ((version.getCodeBase()) == null)) { assertTrue(((version.getSubReleaseKind()) == (SubReleaseKind.ENGINEERING))); } }
public void test_formatDouble_maximumFractionDigits() { java.text.DecimalFormat df = new java.text.DecimalFormat("###0.##", new java.text.DecimalFormatSymbols(java.util.Locale.US)); df.setMaximumFractionDigits(3); assertEquals(3, df.getMaximumFractionDigits()); assertEquals("1.235", df.format(1.23456)); df.setMinimumFractionDigits(4); assertEquals(4, df.getMaximumFractionDigits()); assertEquals("456.0000", df.format(456)); df = new java.text.DecimalFormat("##0.#"); df.setMaximumFractionDigits(30); assertEquals("0", df.format(0.0)); assertEquals("-0", df.format((-0.0))); assertEquals("1", df.format(1.0)); assertEquals("-1", df.format((-1.0))); }
private static void fatal(java.lang.String msg) { android.util.Log.e(android.net.nsd.NsdManager.TAG, msg); throw new java.lang.RuntimeException(msg); }
@java.lang.Override public int hashCode() { int result = ((ssid) == null) ? 0 : ssid.hashCode(); result ^= (((int) (flags)) * 31) + (((int) (auth_bit_field)) << 8); return result; }
java.util.List<org.eclipse.core.resources.IFile> isDependency(org.eclipse.core.resources.IFile file) { java.util.ArrayList<org.eclipse.core.resources.IFile> files = new java.util.ArrayList<org.eclipse.core.resources.IFile>(); for (com.android.ide.eclipse.adt.internal.build.NonJavaFileBundle bundle : mFiles.values()) { if (bundle.dependsOn(file)) { files.add(bundle.getSourceFile()); } } return files; }
public static void computeMax(android.renderscript.cts.TestMax.ArgumentsShortShortShort args) { args.ulf = 0; args.ulfRelaxed = 0; args.out = ((short) (java.lang.StrictMath.max(args.inV1, args.inV2))); }
public java.util.Map<java.lang.String, java.lang.Long> digestFiles(java.io.File dir, java.util.List<java.lang.String> ignoredFiles, com.intellij.updater.UpdaterUI ui) throws com.intellij.updater.OperationCancelledException, java.io.IOException { java.util.Map<java.lang.String, java.lang.Long> result = new java.util.LinkedHashMap<java.lang.String, java.lang.Long>(); java.util.LinkedHashSet<java.lang.String> paths = com.intellij.updater.Utils.collectRelativePaths(dir, myIsStrict); for (java.lang.String each : paths) { if (ignoredFiles.contains(each)) continue; ui.setStatus(each); ui.checkCancelled(); result.put(each, digestFile(new java.io.File(dir, each))); } return result; }
public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }
@java.lang.Override public java.lang.String apply(@javax.annotation.Nonnull com.android.sched.util.codec.StringCodec<? extends T> codec) { return codec.getVariableName(); }
@java.lang.Override public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "getConnectedDevices"); } com.android.bluetooth.pbap.BluetoothPbapService service = getService(); if (service == null) { return new java.util.ArrayList<>(0); } return service.getConnectedDevices(); }
private void checkUnconnectedUdp(android.net.IpSecTransform transform, java.net.InetAddress local, int sendCount) throws java.lang.Exception { java.io.FileDescriptor udpSocket = android.net.cts.IpSecManagerTest.getBoundUdpSocket(local); int localPort = android.net.cts.IpSecManagerTest.getPort(udpSocket); mISM.applyTransportModeTransform(udpSocket, transform); for (int i = 0; i < sendCount; i++) { byte[] in = new byte[android.net.cts.IpSecManagerTest.TEST_DATA.length]; android.system.Os.sendto(udpSocket, android.net.cts.IpSecManagerTest.TEST_DATA, 0, android.net.cts.IpSecManagerTest.TEST_DATA.length, 0, local, localPort); android.system.Os.read(udpSocket, in, 0, in.length); assertArrayEquals("Encapsulated data did not match.", android.net.cts.IpSecManagerTest.TEST_DATA, in); } mISM.removeTransportModeTransform(udpSocket, transform); android.system.Os.close(udpSocket); }
@java.lang.Override public int run(@javax.annotation.Nonnull java.io.PrintStream out, @javax.annotation.Nonnull java.io.PrintStream err, @javax.annotation.Nonnull java.io.File pwd, @javax.annotation.Nonnull com.android.sched.util.config.cli.TokenIterator args) { java.util.List<java.lang.String> commandLineArgs; try { commandLineArgs = buildArgs(args); } catch (com.android.sched.util.file.NoSuchFileException e) { return ServerExitStatus.FAILURE_JACK_JAR_NOT_FOUND; } catch (java.lang.Exception e) { com.android.jack.server.ServerTaskSpawningVM.logger.log(java.util.logging.Level.SEVERE, "Failed to build command line", e); return ServerExitStatus.FAILURE_USAGE; } com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(commandLineArgs.toArray(new java.lang.String[commandLineArgs.size()])); exec.setErr(err); exec.setOut(out); try { exec.setWorkingDir(pwd, false); } catch (java.io.IOException e) { return ServerExitStatus.FAILURE_USAGE; } try { return exec.run(); } catch (java.lang.Exception e) { com.android.jack.server.ServerTaskSpawningVM.logger.log(java.util.logging.Level.SEVERE, ("Failed to run command " + commandLineArgs), e); return ServerExitStatus.FAILURE_UNKNOWN; } }
public static void confirmDeleteThreadDialog(com.android.cellbroadcastreceiver.CellBroadcastListActivity.CursorLoaderListFragment.DeleteThreadListener listener, boolean deleteAll, android.content.Context context) { android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(context); builder.setIconAttribute(android.R.attr.alertDialogIcon).setCancelable(true).setPositiveButton(R.string.button_delete, listener).setNegativeButton(R.string.button_cancel, null).setMessage((deleteAll ? R.string.confirm_delete_all_broadcasts : R.string.confirm_delete_broadcast)).show(); }
public void testThreadStart() { logWriter.println("testThreadStart started"); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); org.apache.harmony.jpda.tests.framework.jdwp.EventBuilder builder = createThreadStartBuilder(); testEventWithThreadOnlyModifier(builder); logWriter.println("testThreadStart done"); }
public void test_SSLSocket_ClientHello_SNI() throws java.lang.Exception { tests.util.ForEachRunner.runNamed(new tests.util.ForEachRunner.Callback<javax.net.ssl.SSLSocketFactory>() { @java.lang.Override public void run(javax.net.ssl.SSLSocketFactory sslSocketFactory) throws java.lang.Exception { libcore.tlswire.handshake.ClientHello clientHello = captureTlsHandshakeClientHello(sslSocketFactory); libcore.tlswire.handshake.ServerNameHelloExtension sniExtension = ((libcore.tlswire.handshake.ServerNameHelloExtension) (clientHello.findExtensionByType(HelloExtension.TYPE_SERVER_NAME))); assertNotNull(sniExtension); assertEquals(java.util.Arrays.asList("localhost.localdomain"), sniExtension.hostnames); } }, getSSLSocketFactoriesToTest()); }
public static android.graphics.Bitmap parseToBnW(byte[] data, int length) { int valueIndex = 0; int width = (data[(valueIndex++)]) & 255; int height = (data[(valueIndex++)]) & 255; int numOfPixels = width * height; int[] pixels = new int[numOfPixels]; int pixelIndex = 0; int bitIndex = 7; byte currentByte = 0; while (pixelIndex < numOfPixels) { if ((pixelIndex % 8) == 0) { currentByte = data[(valueIndex++)]; bitIndex = 7; } pixels[(pixelIndex++)] = com.android.internal.telephony.uicc.IccUtils.bitToRGB(((currentByte >> (bitIndex--)) & 1)); } if (pixelIndex != numOfPixels) { android.telephony.Rlog.e(com.android.internal.telephony.uicc.IccUtils.LOG_TAG, "parse end and size error"); } return android.graphics.Bitmap.createBitmap(pixels, width, height, Bitmap.Config.ARGB_8888); }
public void setsockoptGroupSourceReq(java.io.FileDescriptor fd, int level, int option, android.system.StructGroupSourceReq value) throws android.system.ErrnoException { os.setsockoptGroupSourceReq(fd, level, option, value); }
public byte[] generateVerityTreeRootHash(com.android.apksig.util.DataSource beforeApkSigningBlock, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd) throws java.io.IOException { if (((beforeApkSigningBlock.size()) % (com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE)) != 0) { throw new java.lang.IllegalStateException(((("APK Signing Block size not a multiple of " + (com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE)) + ": ") + (beforeApkSigningBlock.size()))); } long centralDirOffsetForDigesting = beforeApkSigningBlock.size(); java.nio.ByteBuffer eocdBuf = java.nio.ByteBuffer.allocate(((int) (eocd.size()))); eocdBuf.order(java.nio.ByteOrder.LITTLE_ENDIAN); eocd.copyTo(0, ((int) (eocd.size())), eocdBuf); eocdBuf.flip(); com.android.apksig.internal.zip.ZipUtils.setZipEocdCentralDirectoryOffset(eocdBuf, centralDirOffsetForDigesting); return generateVerityTreeRootHash(new com.android.apksig.internal.util.ChainedDataSource(beforeApkSigningBlock, centralDir, com.android.apksig.util.DataSources.asDataSource(eocdBuf))); }
public native java.net.SocketAddress getsockname(java.io.FileDescriptor fd) throws android.system.ErrnoException;
@java.lang.Override public void removeForward(int localPort, java.lang.String remoteSocketName, com.android.ddmlib.DeviceUnixSocketNamespace namespace) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.AdbHelper.removeForward(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), this, java.lang.String.format("tcp:%d", localPort), java.lang.String.format("%s:%s", namespace.getType(), remoteSocketName)); }
public void assertUnreleasedResourceCount(java.lang.Object owner, int expectedCount) { if (leakageDetectionEnabledForTest) { libcore.junit.util.ResourceLeakageDetector.FINALIZER_CHECKER.accept(owner, expectedCount); } else { throw new java.lang.IllegalStateException(("Does not work when leakage detection has been disabled; remove the " + "@DisableResourceLeakageDetection from the test method")); } }
public static void execApplication(java.lang.String invokeWith, java.lang.String niceName, int targetSdkVersion, java.io.FileDescriptor pipeFd, java.lang.String[] args) { java.lang.StringBuilder command = new java.lang.StringBuilder(invokeWith); command.append(" /system/bin/app_process /system/bin --application"); if (niceName != null) { command.append(" '--nice-name=").append(niceName).append("'"); } command.append(" com.android.internal.os.WrapperInit "); command.append((pipeFd != null ? pipeFd.getInt$() : 0)); command.append(' '); command.append(targetSdkVersion); com.android.internal.os.Zygote.appendQuotedShellArgs(command, args); com.android.internal.os.Zygote.execShell(command.toString()); }
@com.android.internal.annotations.VisibleForTesting public static java.lang.String getStringForCarrierIdTableCreation(java.lang.String tableName) { return (((((((((((((((((((((((("CREATE TABLE " + tableName) + "(_id INTEGER PRIMARY KEY,") + (CarrierId.All.MCCMNC)) + " TEXT NOT NULL,") + (CarrierId.All.GID1)) + " TEXT,") + (CarrierId.All.GID2)) + " TEXT,") + (CarrierId.All.PLMN)) + " TEXT,") + (CarrierId.All.IMSI_PREFIX_XPATTERN)) + " TEXT,") + (CarrierId.All.SPN)) + " TEXT,") + (CarrierId.All.APN)) + " TEXT,") + (CarrierId.All.ICCID_PREFIX)) + " TEXT,") + (android.provider.Telephony.CarrierId.CARRIER_NAME)) + " TEXT,") + (android.provider.Telephony.CarrierId.CARRIER_ID)) + " INTEGER DEFAULT -1,") + "UNIQUE (") + (android.text.TextUtils.join(", ", com.android.providers.telephony.CarrierIdProvider.CARRIERS_ID_UNIQUE_FIELDS))) + "));"; }
private com.android.rs.test.Float2 pack_f2(float[] val) { assert (val.length) == 2; return new com.android.rs.test.Float2(val[0], val[1]); }
@java.lang.Override public void updatePublish(int clientId, int sessionId, android.net.wifi.aware.PublishConfig publishConfig) { enforceAccessPermission(); enforceChangePermission(); if (publishConfig == null) { throw new java.lang.IllegalArgumentException("PublishConfig must not be null"); } publishConfig.assertValid(mStateManager.getCharacteristics()); int uid = getMockableCallingUid(); enforceClientValidity(uid, clientId); if (com.android.server.wifi.aware.WifiAwareServiceImpl.VDBG) { android.util.Log.v(com.android.server.wifi.aware.WifiAwareServiceImpl.TAG, ((((((("updatePublish: uid=" + uid) + ", clientId=") + clientId) + ", sessionId=") + sessionId) + ", config=") + publishConfig)); } mStateManager.updatePublish(clientId, sessionId, publishConfig); }
public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = UID_ALL; entry.set = SET_ALL; entry.tag = TAG_NONE; final boolean active = (reader.nextInt()) != 0; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.rxPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); } stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException("problem parsing stats", e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
@org.junit.Test public void testBroadcastWpsEventSuccess() { mWifiMonitor.registerHandler(com.android.server.wifi.WifiMonitorTest.WLAN_IFACE_NAME, WifiMonitor.WPS_SUCCESS_EVENT, mHandlerSpy); mWifiMonitor.broadcastWpsSuccessEvent(com.android.server.wifi.WifiMonitorTest.WLAN_IFACE_NAME); mLooper.dispatchAll(); org.mockito.ArgumentCaptor<android.os.Message> messageCaptor = org.mockito.ArgumentCaptor.forClass(android.os.Message.class); verify(mHandlerSpy).handleMessage(messageCaptor.capture()); assertEquals(WifiMonitor.WPS_SUCCESS_EVENT, messageCaptor.getValue().what); }
public static long $noinline$UShr60And7(long arg) { if (Main.doThrow) { throw new java.lang.Error(); } return (arg >>> 60) & 7; }
private void initiateDeviceOwnerProvisioning(android.content.Intent intent) { if (!(mParams.startedByTrustedSource)) { mUi.initiateUi(R.string.setup_work_device, R.string.setup_device_start_setup, R.string.company_controls_device, R.string.the_following_is_your_mdm_for_device, mParams); } if (isEncryptionRequired()) { maybeTriggerEncryption(); return; } if (mKeyguardManager.inKeyguardRestrictedInputMode()) { com.android.managedprovisioning.ProvisionLogger.logi("Cannot pick wifi because the screen is locked."); } else if (((!(mUtils.isConnectedToNetwork(mContext))) && ((mParams.wifiInfo) == null)) && ((mParams.deviceAdminDownloadInfo) != null)) { if (canRequestWifiPick()) { mUi.requestWifiPick(); return; } else { com.android.managedprovisioning.ProvisionLogger.logi("Cannot pick wifi because there is no handler to the intent"); } } askForConsentOrStartDeviceOwnerProvisioning(); }
private java.io.File getToolchainPath(com.android.build.gradle.internal.core.Abi abi) { return getToolchainPath(toolchain, toolchainVersion, abi); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (mAction.equals(android.telephony.cts.SmsManagerTest.DATA_SMS_RECEIVED_ACTION)) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); android.os.Bundle bundle = intent.getExtras(); if (bundle != null) { java.lang.Object[] obj = ((java.lang.Object[]) (bundle.get("pdus"))); android.telephony.SmsMessage[] message = new android.telephony.SmsMessage[obj.length]; for (int i = 0; i < (obj.length); i++) { message[i] = android.telephony.SmsMessage.createFromPdu(((byte[]) (obj[i]))); } for (android.telephony.SmsMessage currentMessage : message) { byte[] binaryContent = currentMessage.getUserData(); java.lang.String readableContent = new java.lang.String(binaryContent); sb.append(readableContent); } } android.telephony.cts.SmsManagerTest.mReceivedDataSms = true; android.telephony.cts.SmsManagerTest.mReceivedText = sb.toString(); } if (intent.getAction().equals(mAction)) { synchronized(mLock) { mCalls += 1; if ((mCalls) >= (mExpectedCalls)) { mLock.notify(); } } } }
@org.junit.Test public void toleratesCarrierConfigManagerMissing() { setupForRequiredProvisioning(); when(mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE)).thenReturn(null); assertTrue(mTethering.isTetherProvisioningRequired()); }
public com.google.api.services.debugger.model.Breakpoint getCurrentSnapshot() { return myCurrentSnapshot; }
@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { if ((description.getAnnotation(libcore.junit.util.ResourceLeakageDetector.DisableResourceLeakageDetection.class)) != null) { leakageDetectionEnabledForTest = false; return base; } else { leakageDetectionEnabledForTest = true; return leakageDetectorRule.apply(base, description); } }
private synchronized void close() throws com.android.sched.util.file.CannotCreateFileException, java.io.IOException { java.io.OutputStream os = dir.createOutputVFile(new com.android.sched.vfs.VPath("jack.sha1", '/')).openWrite(); java.io.PrintStream printer = new java.io.PrintStream(os); for (com.android.sched.vfs.MessageDigestInputOutputVFS.MessageDigestOutputVFile file : files) { byte[] digest = file.getDigest(); if (digest != null) { printer.print(file.getVPath().getPathAsString('/')); printer.print(':'); printer.print(com.android.sched.vfs.MessageDigestInputOutputVFS.encode(digest)); printer.println(); } } printer.close(); }
private void checkCospiFloat3Float3() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, -1986078932875801394L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); script.forEach_testCospiFloat3Float3(in, out); verifyResultsCospiFloat3Float3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testCospiFloat3Float3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testCospiFloat3Float3(in, out); verifyResultsCospiFloat3Float3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testCospiFloat3Float3: " + (e.toString()))); } }
@java.lang.Override public void initParser(@com.android.annotations.NonNull java.lang.String target, @com.android.annotations.NonNull com.android.sdklib.repository.FullRevision buildToolRevision, @com.android.annotations.NonNull com.android.utils.ILogger logger) { if (!(mInitialized)) { mTarget = new com.android.builder.internal.FakeAndroidTarget(mPlatformRootFolder, target); mBuildToolInfo = new com.android.sdklib.BuildToolInfo(buildToolRevision, new java.io.File(mPlatformRootFolder), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_AAPT), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_AIDL), new java.io.File(mPlatformRootFolder, "prebuilts/sdk/tools/dx"), new java.io.File(mPlatformRootFolder, "prebuilts/sdk/tools/lib/dx.jar"), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_RENDERSCRIPT), new java.io.File(mPlatformRootFolder, "prebuilts/sdk/renderscript/include"), new java.io.File(mPlatformRootFolder, "prebuilts/sdk/renderscript/clang-include"), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_BCC_COMPAT), new java.io.File(getHostToolsFolder(), "arm-linux-androideabi-ld"), new java.io.File(getHostToolsFolder(), "i686-linux-android-ld"), new java.io.File(getHostToolsFolder(), "mipsel-linux-android-ld")); mInitialized = true; } }
public void registerNetworkCallback(android.net.NetworkRequest request, android.net.ConnectivityManager.NetworkCallback networkCallback, android.os.Handler handler) { android.net.ConnectivityManager.CallbackHandler cbHandler = new android.net.ConnectivityManager.CallbackHandler(handler); android.net.NetworkCapabilities nc = request.networkCapabilities; sendRequestForNetwork(nc, networkCallback, 0, android.net.ConnectivityManager.LISTEN, android.net.ConnectivityManager.TYPE_NONE, cbHandler); }
private static MergingReport.Result validate(com.android.manifmerger.XmlElement xmlElement, com.android.manifmerger.ActionRecorder recorder, com.android.utils.ILogger logger) { com.android.manifmerger.MergingReport.Result result = Result.SUCCESS; com.android.manifmerger.NodeOperationType operationType = xmlElement.getOperationType(); switch (operationType) { case REPLACE : if (!(com.android.manifmerger.PostValidator.isNodeOperationPresent(xmlElement, recorder, ActionType.REJECTED))) { logger.warning(("%1$s was tagged at %2$s:%3$d to replace another declaration " + "but no other declaration present"), xmlElement.getId(), xmlElement.getDocument().getSourceLocation().print(true), xmlElement.getPosition().getLine()); result = Result.WARNING; } break; case REMOVE : case REMOVE_ALL : if (!(com.android.manifmerger.PostValidator.isNodeOperationPresent(xmlElement, recorder, ActionType.REJECTED))) { logger.warning(("%1$s was tagged at %2$s:%3$d to remove other declarations " + "but no other declaration present"), xmlElement.getId(), xmlElement.getDocument().getSourceLocation().print(true), xmlElement.getPosition().getLine()); result = Result.WARNING; } break; } com.android.manifmerger.PostValidator.validateAttributes(xmlElement, recorder, logger); for (com.android.manifmerger.XmlElement child : xmlElement.getMergeableElements()) { if ((com.android.manifmerger.PostValidator.validate(child, recorder, logger)) == (Result.WARNING)) { result = Result.WARNING; } } return result; }
public void testGrantNoneRequestNone() throws java.lang.Exception { doTestDragAndDrop(android.wm.cts.CrossAppDragAndDropTests.GRANT_NONE, android.wm.cts.CrossAppDragAndDropTests.REQUEST_NONE, android.wm.cts.CrossAppDragAndDropTests.RESULT_EXCEPTION); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DRAG_STARTED, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_EXTRAS, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); }
private com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano createMessageForHashCodeEqualsTest() { com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano message = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano(); message.optionalInt32 = 5; message.optionalInt64 = 777; message.optionalFloat = 1.0F; message.optionalDouble = 2.0; message.optionalBool = true; message.optionalString = "Hello"; message.optionalBytes = new byte[]{ 1, 2, 3 }; message.optionalNestedMessage = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.NestedMessage(); message.optionalNestedMessage.bb = 27; message.optionalNestedEnum = com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAR; message.repeatedInt32 = new int[]{ 5, 6, 7, 8 }; message.repeatedInt64 = new long[]{ 27L, 28L, 29L }; message.repeatedFloat = new float[]{ 5.0F, 6.0F }; message.repeatedDouble = new double[]{ 99.1, 22.5 }; message.repeatedBool = new boolean[]{ true, false, true }; message.repeatedString = new java.lang.String[]{ "One", "Two" }; message.repeatedBytes = new byte[][]{ new byte[]{ 2, 7 }, new byte[]{ 2, 7 } }; message.repeatedNestedMessage = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.NestedMessage[]{ message.optionalNestedMessage, message.optionalNestedMessage }; message.repeatedNestedEnum = new int[]{ com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAR, com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAZ }; message.defaultFloatNan = 1.0F; message.defaultDoubleNan = 1.0; return message; }
synchronized boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((("reportError(): device=" + device) + " error=") + error)); } return ((checkDevice(device)) && (checkCallingUid())) && (mHidDeviceNativeInterface.reportError(error)); }
public void fdatasync(java.io.FileDescriptor fd) throws android.system.ErrnoException;
@android.annotation.Nullable public java.lang.String getEid() { if (!(isEnabled())) { return null; } try { return android.telephony.euicc.EuiccManager.getIEuiccController().getEid(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void restartObexServerSession() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, "MAP Service restartObexServerSession()"); } startSocketListeners(); }
protected boolean noHomeScreen() throws com.android.tradefed.device.DeviceNotAvailableException { if (!(android.server.cts.ActivityManagerTestBase.mCheckedNoHomeScreen)) { try { executeShellCommand(("am start -n android.server.app/." + (NO_HOME_SCREEN_OBSERVER))); waitForResume("android.server.app", NO_HOME_SCREEN_OBSERVER); java.util.Map map = getLogResults(NO_HOME_SCREEN_OBSERVER); java.lang.String value = ((java.lang.String) (map.get(RESULT_KEY_HEAD))); if ((value != null) && (value.equals("OK"))) { android.server.cts.ActivityManagerTestBase.mCheckedNoHomeScreen = true; android.server.cts.ActivityManagerTestBase.mNoHomeScreen = map.get("config_noHomeScreen").equals("true"); } executeShellCommand(android.server.cts.ActivityManagerTestBase.AM_FORCE_STOP_TEST_PACKAGE); } catch (java.lang.Exception e) { e.printStackTrace(); } } return android.server.cts.ActivityManagerTestBase.mNoHomeScreen; }
void discoveryStateChangeCallback(int state) { infoLog(("Callback:discoveryStateChangeCallback with state:" + state)); synchronized(mObject) { android.content.Intent intent; if (state == (AbstractionLayer.BT_DISCOVERY_STOPPED)) { mDiscovering = false; mDiscoveryEndMs = java.lang.System.currentTimeMillis(); intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_FINISHED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } else if (state == (AbstractionLayer.BT_DISCOVERY_STARTED)) { mDiscovering = true; mDiscoveryEndMs = (java.lang.System.currentTimeMillis()) + (com.android.bluetooth.btservice.AdapterProperties.DEFAULT_DISCOVERY_TIMEOUT_MS); intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_STARTED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } } }
public void test_unmodifiableMap_LinkedHashMap() { java.util.LinkedHashMap<java.lang.String, java.lang.Integer> smallMap = new java.util.LinkedHashMap<java.lang.String, java.lang.Integer>(); for (int i = 0; i < 100; i++) { java.lang.Integer object = objArray[i]; smallMap.put(object.toString(), object); } new org.apache.harmony.tests.java.util.CollectionsTest.MapTestSupport(smallMap).runTest(); }
private void checkInputFile(java.io.File file) throws com.android.sdklib.build.ApkBuilder.ApkCreationException { if (file.isDirectory()) { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException("%s is a directory!", file); } if (file.exists()) { if ((file.canRead()) == false) { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException("Cannot read %s", file); } } else { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException("%s does not exist", file); } }
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession program) throws com.android.jack.JackUserException { java.io.PrintStream ps = null; try { com.android.sched.vfs.OutputVFile outputVFile; if ((((outputLibrary) != null) && (!(isIncrementalMode))) && ((intermediateDexDir) == null)) { outputVFile = outputLibrary.createFile(FileType.DEPENDENCIES, TypeDependencies.vpath); } else { assert (intermediateDexDir) != null; com.android.sched.vfs.VPath typeDependencyPath = TypeDependencies.vpath.clone(); typeDependencyPath.prependPath(new com.android.sched.vfs.VPath("..", '/')); outputVFile = intermediateDexDir.getRootOutputVDir().createOutputVFile(typeDependencyPath); } ps = new java.io.PrintStream(outputVFile.openWrite()); com.android.jack.Jack.getSession().getTypeDependencies().write(ps); } catch (com.android.sched.util.file.CannotCreateFileException e) { com.android.jack.experimental.incremental.IncrementalException incrementalException = new com.android.jack.experimental.incremental.IncrementalException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, incrementalException); throw new com.android.jack.JackAbortException(incrementalException); } catch (java.io.IOException e) { com.android.jack.experimental.incremental.IncrementalException incrementalException = new com.android.jack.experimental.incremental.IncrementalException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, incrementalException); throw new com.android.jack.JackAbortException(incrementalException); } finally { if (ps != null) { ps.close(); } } }
@java.lang.Override public void run(org.eclipse.core.runtime.IProgressMonitor monitor) throws java.lang.InterruptedException, java.lang.reflect.InvocationTargetException { org.eclipse.core.resources.IWorkspaceRunnable op1 = new org.eclipse.core.resources.IWorkspaceRunnable() { @java.lang.Override public void run(org.eclipse.core.runtime.IProgressMonitor monitor1) throws org.eclipse.core.runtime.CoreException { org.eclipse.cdt.core.CCorePlugin.getDefault().convertProjectToCC(mProject, monitor1, MakeCorePlugin.MAKE_PROJECT_ID); new com.android.ide.eclipse.ndk.internal.wizards.NdkWizardHandler().convertProject(mProject, monitor1); try { @java.lang.SuppressWarnings("rawtypes") java.lang.Class c = getClass().getClassLoader().loadClass("org.eclipse.cdt.core.language.settings.providers.ScannerDiscoveryLegacySupport"); @java.lang.SuppressWarnings("unchecked") java.lang.reflect.Method m = c.getMethod("setLanguageSettingsProvidersFunctionalityEnabled", org.eclipse.core.resources.IProject.class, boolean.class); m.invoke(null, mProject, false); } catch (java.lang.Exception e) { } com.android.ide.eclipse.ndk.internal.NdkManager.addNativeSupport(mProject, mTemplateArgs, monitor1); } }; org.eclipse.core.resources.IWorkspace workspace = org.eclipse.core.resources.ResourcesPlugin.getWorkspace(); try { workspace.run(op1, workspace.getRoot(), 0, new org.eclipse.core.runtime.NullProgressMonitor()); } catch (org.eclipse.core.runtime.CoreException e) { throw new java.lang.reflect.InvocationTargetException(e); } }
public void test_connect_timeout() throws java.lang.Exception { tests.net.StuckServer ss = new tests.net.StuckServer(false); java.net.Socket s = new java.net.Socket(); new libcore.java.net.ConcurrentCloseTest.Killer(s).start(); try { java.lang.System.err.println("connect (with timeout)..."); s.connect(ss.getLocalSocketAddress(), (3600 * 1000)); fail((("connect returned: " + s) + "!")); } catch (java.net.SocketException expected) { assertEquals("Socket closed", expected.getMessage()); } finally { ss.close(); } }
public void testSimpleGraph() { mHeap = new com.android.tools.perflib.heap.analysis.HeapBuilder(6).addReference(1, 2).addReference(1, 3).addReference(2, 4).addReference(2, 6).addReference(3, 4).addReference(3, 5).addReference(4, 6).addRoot(1).getHeap(); mDominators = com.android.tools.perflib.heap.analysis.Dominators.getDominatorMap(mHeap); assertEquals(6, mDominators.size()); assertDominates(1, 2); assertDominates(1, 3); assertDominates(1, 4); assertDominates(1, 6); assertDominates(3, 5); }
public static void addEvent(android.telecom.Logging.EventManager.Loggable recordEntry, java.lang.String event) { android.telecom.Log.getEventManager().event(recordEntry, event, null); }
public void testInlinedIntSetter() { testBreakpointIn("testInlinedIntSetter", "breakpointIntSetter"); }
@java.lang.Override public void write(@com.android.annotations.NonNull final java.io.File projectDir, @com.android.annotations.Nullable final java.lang.String buildScriptContent) throws java.io.IOException { for (java.util.Map.Entry<java.lang.String, ? extends com.android.build.gradle.integration.common.fixture.TestProject> entry : subprojects.entrySet()) { java.lang.String subprojectPath = entry.getKey(); com.android.build.gradle.integration.common.fixture.TestProject subproject = entry.getValue(); java.io.File subprojectDir = new java.io.File(projectDir, com.android.build.gradle.integration.common.fixture.app.MultiModuleTestProject.convertGradlePathToDirectory(subprojectPath)); if (!(subprojectDir.exists())) { subprojectDir.mkdirs(); assert subprojectDir.isDirectory(); } subproject.write(subprojectDir, null); } java.lang.StringBuilder builder = new java.lang.StringBuilder(); for (java.lang.String subprojectName : subprojects.keySet()) { builder.append("include '").append(subprojectName).append("\'\n"); } com.google.common.io.Files.write(builder.toString(), new java.io.File(projectDir, "settings.gradle"), java.nio.charset.Charset.defaultCharset()); com.google.common.io.Files.write(buildScriptContent, new java.io.File(projectDir, "build.gradle"), java.nio.charset.Charset.defaultCharset()); }
public void testFrameworkBooleanOverlay() throws java.lang.Throwable { final int resId = com.android.internal.R.bool.config_annoy_dianne; assertResource(resId, true, false, false); }
@android.support.annotation.VisibleForTesting public boolean disconnectAudio(android.bluetooth.BluetoothDevice device) { return disconnectAudioNative(com.android.bluetooth.Utils.getByteAddress(device)); }
private void checkRintFloat4Float4() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, -9020879362006948442L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); script.forEach_testRintFloat4Float4(in, out); verifyResultsRintFloat4Float4(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRintFloat4Float4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testRintFloat4Float4(in, out); verifyResultsRintFloat4Float4(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRintFloat4Float4: " + (e.toString()))); } }
private static void callCreateHooks(final com.android.ide.eclipse.adt.internal.editors.AndroidXmlEditor editor, final com.android.ide.common.api.InsertType insertType, final com.android.ide.common.api.IViewRule parentRule, final com.android.ide.common.api.INode parentNode, final com.android.ide.common.api.IViewRule childRule, final com.android.ide.common.api.INode newNode) { if (!(editor.isEditXmlModelPending())) { editor.wrapUndoEditXmlModel("Customize creation", new java.lang.Runnable() { public void run() { com.android.ide.eclipse.adt.internal.editors.layout.gre.RulesEngine.callCreateHooks(editor, insertType, parentRule, parentNode, childRule, newNode); } }); return; } if (parentRule != null) { parentRule.onChildInserted(newNode, parentNode, insertType); } if (childRule != null) { childRule.onCreate(newNode, parentNode, insertType); } }
public void testVFE16() { try { new dot.junit.opcodes.iget_boolean.d.T_iget_boolean_5().run(); fail("expected an IncompatibleClassChangeError exception"); } catch (java.lang.IncompatibleClassChangeError e) { } }
@org.junit.Test public void test57_001() throws java.lang.Exception { runTest("057", "001", ""); }
private void checkHalfRsqrtFloat3Float3() { android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, -4336029855328095729L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); script.forEach_testHalfRsqrtFloat3Float3(inV, out); verifyResultsHalfRsqrtFloat3Float3(inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testHalfRsqrtFloat3Float3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testHalfRsqrtFloat3Float3(inV, out); verifyResultsHalfRsqrtFloat3Float3(inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testHalfRsqrtFloat3Float3: " + (e.toString()))); } }
private static org.eclipse.swt.graphics.Color getForegroundColor(com.android.ddmuilib.logcat.LogCatMessage m) { com.android.ddmlib.Log.LogLevel l = m.getLogLevel(); if (l.equals(LogLevel.VERBOSE)) { return com.android.ddmuilib.logcat.LogCatPanel.VERBOSE_MSG_COLOR; } else if (l.equals(LogLevel.INFO)) { return com.android.ddmuilib.logcat.LogCatPanel.INFO_MSG_COLOR; } else if (l.equals(LogLevel.DEBUG)) { return com.android.ddmuilib.logcat.LogCatPanel.DEBUG_MSG_COLOR; } else if (l.equals(LogLevel.ERROR)) { return com.android.ddmuilib.logcat.LogCatPanel.ERROR_MSG_COLOR; } else if (l.equals(LogLevel.WARN)) { return com.android.ddmuilib.logcat.LogCatPanel.WARN_MSG_COLOR; } return null; }
private static void checkIntFailureCases(libcore.io.BufferIterator iterator) { iterator.seek((-1)); libcore.io.MemoryMappedFileTest.assertReadIntFails(iterator); iterator.seek((-4)); libcore.io.MemoryMappedFileTest.assertReadIntFails(iterator); iterator.seek(7); libcore.io.MemoryMappedFileTest.assertReadIntFails(iterator); iterator.seek(10); libcore.io.MemoryMappedFileTest.assertReadIntFails(iterator); }
public static int $noinline$AddAddSubAddConst(int arg) { if (Main.doThrow) { throw new java.lang.Error(); } return (((arg + 1) + 2) - 3) + 4; }
void stop() { if (com.android.bluetooth.mapclient.MnsService.VDBG) android.util.Log.v(com.android.bluetooth.mapclient.MnsService.TAG, "stop()"); mShutdown = true; cleanUpSdpRecord(); if ((com.android.bluetooth.mapclient.MnsService.mServerSockets) != null) { com.android.bluetooth.mapclient.MnsService.mServerSockets.shutdown(false); com.android.bluetooth.mapclient.MnsService.mServerSockets = null; } }
void removeItem(@com.android.annotations.NonNull I removedItem, @com.android.annotations.Nullable I replacedBy) throws com.android.ide.common.res2.MergeConsumer.ConsumerException;
public boolean syncInitialize(com.android.internal.util.AsyncChannel channel) { android.os.Message resultMsg = channel.sendMessageSynchronously(com.android.server.wifi.WifiStateMachine.CMD_INITIALIZE); boolean result = (resultMsg.arg1) != (com.android.server.wifi.WifiStateMachine.FAILURE); resultMsg.recycle(); return result; }
private void onUnlockUser(int userId) { android.util.Slog.d(com.android.server.MountService.TAG, ("onUnlockUser " + userId)); try { mConnector.execute("volume", "user_started", userId); } catch (com.android.server.NativeDaemonConnectorException ignored) { } synchronized(mLock) { for (int i = 0; i < (mVolumes.size()); i++) { final android.os.storage.VolumeInfo vol = mVolumes.valueAt(i); if ((vol.isVisibleForRead(userId)) && (vol.isMountedReadable())) { final android.os.storage.StorageVolume userVol = vol.buildStorageVolume(mContext, userId, false); mHandler.obtainMessage(com.android.server.MountService.H_VOLUME_BROADCAST, userVol).sendToTarget(); final java.lang.String envState = android.os.storage.VolumeInfo.getEnvironmentForState(vol.getState()); mCallbacks.notifyStorageStateChanged(userVol.getPath(), envState, envState); } } mSystemUnlockedUsers = com.android.internal.util.ArrayUtils.appendInt(mSystemUnlockedUsers, userId); } }
public static java.lang.String formatDateRange(android.icu.util.ULocale icuLocale, android.icu.util.TimeZone icuTimeZone, long startMs, long endMs, int flags) { android.icu.util.Calendar startCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, startMs); android.icu.util.Calendar endCalendar; if (startMs == endMs) { endCalendar = startCalendar; } else { endCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, endMs); } if (libcore.icu.DateIntervalFormat.isExactlyMidnight(endCalendar)) { boolean showTime = (flags & (DateUtilsBridge.FORMAT_SHOW_TIME)) == (DateUtilsBridge.FORMAT_SHOW_TIME); boolean endsDayAfterStart = (libcore.icu.DateUtilsBridge.dayDistance(startCalendar, endCalendar)) == 1; if (((!showTime) && (startMs != endMs)) || (endsDayAfterStart && (!(libcore.icu.DateUtilsBridge.isDisplayMidnightUsingSkeleton(startCalendar))))) { endCalendar.add(Calendar.DAY_OF_MONTH, (-1)); } } java.lang.String skeleton = libcore.icu.DateUtilsBridge.toSkeleton(startCalendar, endCalendar, flags); synchronized(libcore.icu.DateIntervalFormat.CACHED_FORMATTERS) { android.icu.text.DateIntervalFormat formatter = libcore.icu.DateIntervalFormat.getFormatter(skeleton, icuLocale, icuTimeZone); return formatter.format(startCalendar, endCalendar, new java.lang.StringBuffer(), new java.text.FieldPosition(0)).toString(); } }
private void checkMaxFloatFloatFloat() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 2977680248089755468L); android.renderscript.Allocation in1 = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 2977680248089755468L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.set_gAllocIn1(in1); script.forEach_testMaxFloatFloatFloat(in, out); verifyResultsMaxFloatFloatFloat(in, in1, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testMaxFloatFloatFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocIn1(in1); scriptRelaxed.forEach_testMaxFloatFloatFloat(in, out); verifyResultsMaxFloatFloatFloat(in, in1, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testMaxFloatFloatFloat: " + (e.toString()))); } }
static void destroy(com.android.bluetooth.hfp.HeadsetStateMachine stateMachine) { android.util.Log.i(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "destroy"); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetStateMachine.TAG, "destroy(), stateMachine is null"); return; } stateMachine.doQuit(); stateMachine.cleanup(); }
private void notifyLinkPropertiesChanged(java.lang.String iface, com.android.server.connectivity.tethering.TetherInterfaceStateMachine who, android.net.LinkProperties newLp) { final int state; synchronized(mPublicSync) { final com.android.server.connectivity.Tethering.TetherState tetherState = mTetherStates.get(iface); if ((tetherState != null) && (tetherState.stateMachine.equals(who))) { state = tetherState.lastState; } else { mLog.log(("got notification from stale iface " + iface)); return; } } mLog.log(java.lang.String.format("OBSERVED LinkProperties update iface=%s state=%s", iface, state)); final int which = com.android.server.connectivity.Tethering.TetherMasterSM.EVENT_IFACE_UPDATE_LINKPROPERTIES; mTetherMasterSM.sendMessage(which, state, 0, newLp); }
@org.junit.Test public void test001() throws java.lang.Exception { java.lang.String test = "com.android.jack.optimizations.valuepropagation.test001"; java.lang.String aType = "Lcom/android/jack/optimizations/valuepropagation/test001/A;"; compileAndValidate(test, defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("use(I)I", dalvik(test, "A.use.dalvik")))); compileAndValidate(test, defaultProperties().withPreserveJls(true), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("use(I)I", dalvik(test, "A.use.jls.dalvik")))); }
private void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkCapabilities(networkAgent.networkCapabilities)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = networkCapabilitiesWithoutUidsUnlessAllowed(networkAgent.networkCapabilities, nri.mPid, nri.mUid); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log(((("sending notification " + notification) + " for ") + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge(("RemoteException caught trying to send a callback msg for " + (nri.request))); } }
private void testJavaSide(com.android.rs.test.RenderScript RS) { int subElemCount = simpleElem.getSubElementCount(); _RS_ASSERT("subElemCount == 0", (subElemCount == 0)); _RS_ASSERT("simpleElem.getDataKind() == USER", ((simpleElem.getDataKind()) == (android.renderscript.Element.DataKind.USER))); _RS_ASSERT("simpleElem.getDataType() == FLOAT_32", ((simpleElem.getDataType()) == (android.renderscript.Element.DataType.FLOAT_32))); subElemCount = complexElem.getSubElementCount(); _RS_ASSERT("subElemCount == 10", (subElemCount == 10)); _RS_ASSERT("complexElem.getDataKind() == USER", ((complexElem.getDataKind()) == (android.renderscript.Element.DataKind.USER))); _RS_ASSERT("complexElemsimpleElem.getDataType() == NONE", ((complexElem.getDataType()) == (android.renderscript.Element.DataType.NONE))); for (int i = 0; i < subElemCount; i++) { _RS_ASSERT("complexElem.getSubElement(i) != null", ((complexElem.getSubElement(i)) != null)); _RS_ASSERT("complexElem.getSubElementName(i).equals(subElemNames[i])", complexElem.getSubElementName(i).equals(subElemNames[i])); _RS_ASSERT("complexElem.getSubElementArraySize(i) == subElemArraySizes[i]", ((complexElem.getSubElementArraySize(i)) == (subElemArraySizes[i]))); _RS_ASSERT("complexElem.getSubElementOffsetBytes(i) == subElemOffsets[i]", ((complexElem.getSubElementOffsetBytes(i)) == (subElemOffsets[i]))); } }
@java.lang.Override protected void tearDown() throws java.lang.Exception { if ((detector) != null) { detector.checkForLeaks(); } }
private void checkTanFloat2Float2() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -5865848349273848380L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testTanFloat2Float2(in, out); verifyResultsTanFloat2Float2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testTanFloat2Float2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testTanFloat2Float2(in, out); verifyResultsTanFloat2Float2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testTanFloat2Float2: " + (e.toString()))); } }
@com.android.monkeyrunner.doc.MonkeyRunnerExported(doc = "Checks if the specified object is visible.", args = { "selector" }, returns = "True if the object is visible.", argDocs = { "The selector identifying the object." }) public boolean visible(org.python.core.PyObject[] args, java.lang.String[] kws) { org.python.core.ArgParser ap = com.android.monkeyrunner.JythonUtils.createArgParser(args, kws); com.google.common.base.Preconditions.checkNotNull(ap); com.android.monkeyrunner.easy.By selector = getSelector(ap, 0); ViewNode node = mHierarchyViewer.findView(selector); boolean ret = ((node != null) && (node.namedProperties.containsKey("getVisibility()"))) && ("VISIBLE".equalsIgnoreCase(node.namedProperties.get("getVisibility()").value)); return ret; }
public native void chown(java.lang.String path, int uid, int gid) throws android.system.ErrnoException;
public java.util.Set<java.lang.String> keySet() { return nameValuePairs.keySet(); }
@java.lang.Override public void onComplete(java.lang.Void aVoid) { throw new java.lang.AssertionError(java.lang.String.format(("Expecting build to fail:\n" + (" Tasks: %s\n" + " Arguments: %s")), com.google.common.base.Joiner.on(' ').join(tasks), com.google.common.base.Joiner.on(' ').join(arguments))); }
private static native android.graphics.Bitmap nativeCopy(long nativeSrcBitmap, int nativeConfig, boolean isMutable);
public void testParseInt() throws java.lang.Exception { java.util.Locale.setDefault(java.util.Locale.US); assertEquals(1000, com.android.utils.SdkUtils.parseLocalizedInt("1000")); assertEquals(0, com.android.utils.SdkUtils.parseLocalizedInt("0")); assertEquals(0, com.android.utils.SdkUtils.parseLocalizedInt("")); assertEquals(1, com.android.utils.SdkUtils.parseLocalizedInt("1")); assertEquals((-1), com.android.utils.SdkUtils.parseLocalizedInt("-1")); assertEquals(1000, com.android.utils.SdkUtils.parseLocalizedInt("1,000")); assertEquals(1000000, com.android.utils.SdkUtils.parseLocalizedInt("1,000,000")); java.util.Locale.setDefault(java.util.Locale.ITALIAN); assertSame(java.util.Locale.ITALIAN, java.util.Locale.getDefault()); assertEquals(1000, com.android.utils.SdkUtils.parseLocalizedInt("1000")); assertEquals(0, com.android.utils.SdkUtils.parseLocalizedInt("0")); assertEquals(1, com.android.utils.SdkUtils.parseLocalizedInt("1")); assertEquals((-1), com.android.utils.SdkUtils.parseLocalizedInt("-1")); assertEquals(1000, com.android.utils.SdkUtils.parseLocalizedInt("1.000")); assertEquals(1000000, com.android.utils.SdkUtils.parseLocalizedInt("1.000.000")); try { com.android.utils.SdkUtils.parseLocalizedInt("X"); fail("Should have thrown exception"); } catch (java.text.ParseException e) { } }
@java.lang.Override public java.util.List<java.io.File> getRepositories() { java.util.List<java.io.File> repositories = com.google.common.collect.Lists.newArrayList(); java.io.File androidRepo = new java.io.File(((mSdkLocation) + "/extras/android/m2repository")); if (androidRepo.isDirectory()) { repositories.add(androidRepo); } java.io.File googleRepo = new java.io.File(((mSdkLocation) + "/extras/google/m2repository")); if (googleRepo.isDirectory()) { repositories.add(googleRepo); } return repositories; }
@java.lang.Override public void setVoiceMailNumber(java.lang.String alphaTag, java.lang.String voiceMailNumber, android.os.Message onComplete) { android.os.AsyncResult.forMessage(onComplete, null, null); onComplete.sendToTarget(); }
@com.android.sched.util.findbugs.SuppressFBWarnings("RV_RETURN_VALUE_IGNORED_BAD_PRACTICE") private static void deleteSubElement(@javax.annotation.Nonnull java.io.File dir) { if (dir.isDirectory()) { java.io.File[] fileList = dir.listFiles(); if (fileList == null) { throw new com.android.sched.util.ConcurrentIOException(new com.android.sched.vfs.ListDirException(dir)); } for (java.io.File sub : fileList) { com.android.sched.util.file.FileUtils.deleteSubElement(sub); } } dir.delete(); }
public void changeIccLockPassword(java.lang.String oldPassword, java.lang.String newPassword, android.os.Message onComplete) { synchronized(mLock) { if (com.android.internal.telephony.UiccCardApplication.DBG) log("changeIccLockPassword"); mCi.changeIccPinForApp(oldPassword, newPassword, mAid, onComplete); } }
private void showPairingErrorDialog() { new android.app.AlertDialog.Builder(this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(R.string.bt_insecure_pairing_error_title).setMessage(R.string.bt_insecure_pairing_error_message).setPositiveButton(android.R.string.ok, new android.content.DialogInterface.OnClickListener() { @java.lang.Override public void onClick(android.content.DialogInterface dialog, int which) { com.android.cts.verifier.TestResult.setFailedResult(com.android.cts.verifier.bluetooth.MessageTestActivity.this); finish(); } }).setCancelable(false).show(); }
@javax.annotation.Nonnull private synchronized int getCurrentMergerIdx() { return currentMergerIdx; }
public void setPeriodicAdvertisingEnabled(boolean enable) { try { mGatt.setPeriodicAdvertisingEnable(mAdvertiserId, enable); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
public void logCall(com.android.internal.telephony.Connection c, int callLogType) { final java.lang.String number = c.getAddress(); final long date = c.getCreateTime(); final long duration = c.getDurationMillis(); final com.android.internal.telephony.Phone phone = c.getCall().getPhone(); final com.android.internal.telephony.CallerInfo ci = getCallerInfoFromConnection(c); final java.lang.String logNumber = getLogNumber(c, ci); if (com.android.phone.CallLogger.DBG) { log(((("- onDisconnect(): logNumber set to:" + (com.android.phone.PhoneUtils.toLogSafePhoneNumber(logNumber))) + ", number set to: ") + (com.android.phone.PhoneUtils.toLogSafePhoneNumber(number)))); } final int presentation = getPresentation(c, ci); final boolean isOtaspNumber = (com.android.internal.telephony.TelephonyCapabilities.supportsOtasp(phone)) && (phone.isOtaSpNumber(number)); if (!isOtaspNumber) { logCall(ci, logNumber, presentation, callLogType, date, duration); } }
public void execv(java.lang.String filename, java.lang.String[] argv) throws android.system.ErrnoException;
@org.junit.Test public void emptyScanResults() { java.lang.String[] ssids = new java.lang.String[0]; java.lang.String[] bssids = new java.lang.String[0]; int[] freqs = new int[0]; java.lang.String[] caps = new java.lang.String[0]; int[] levels = new int[0]; int[] securities = new int[0]; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); java.util.HashSet<java.lang.String> blacklist = new java.util.HashSet<java.lang.String>(); android.net.wifi.WifiConfiguration candidate = mWifiNetworkSelector.selectNetwork(scanDetails, blacklist, mWifiInfo, false, true, false); assertEquals("Expect null configuration", null, candidate); }
public void registerForEidReady(android.os.Handler h, int what, java.lang.Object obj) { android.os.Registrant r = new android.os.Registrant(h, what, obj); if ((mEid) != null) { r.notifyRegistrant(new android.os.AsyncResult(null, null, null)); } else { mEidReadyRegistrants.add(r); } }
@org.junit.Test public void testCompile016() throws java.lang.Exception { java.lang.String packageName = "com.android.jack.switchstatement.test016.jack"; java.lang.String classPrefix = (packageName.replace('.', '_')) + "_"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put("Enum1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); input.put("Enum1$Enum1_", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); input.put("Enum1$Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); input.put("Enum1$Switch2", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); input.put("SyntheticSwitchmapClass-*", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo((classPrefix + "Enum1$Enum1_"), true)); checkCompiledCode(packageName, input); }
@org.jetbrains.annotations.Nullable private java.lang.String guessResourceName(com.google.gct.idea.appengine.validation.PsiMethod method) { if ((method.getReturnType()) == (PsiType.VOID)) { return null; } com.google.gct.idea.appengine.validation.RestSignatureInspection.RestMethod restMethod = getDefaultRestMethod(method); return restMethod.guessResourceName(method); }
public void testInspectSslBeforeConnect() throws java.lang.Exception { TestSSLContext testSSLContext = createDefaultTestSSLContext(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), false); server.enqueue(new com.google.mockwebserver.MockResponse()); server.play(); javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (server.getUrl("/").openConnection())); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); assertNotNull(connection.getHostnameVerifier()); try { connection.getLocalCertificates(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getServerCertificates(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getCipherSuite(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getPeerPrincipal(); fail(); } catch (java.lang.IllegalStateException expected) { } }
private static void writeInt(java.io.OutputStream os, int value) throws java.lang.Exception { byte[] bytes = java.nio.ByteBuffer.allocate(4).putInt(value).array(); os.write(bytes); }
@java.lang.Override public int compare(com.android.ahat.heapdump.Site a, com.android.ahat.heapdump.Site b) { return com.android.ahat.heapdump.Sort.SIZE_BY_SIZE.compare(b.getTotalSize(), a.getTotalSize()); }
public void testAsinh() { checkAsinhFloatFloat(); checkAsinhFloat2Float2(); checkAsinhFloat3Float3(); checkAsinhFloat4Float4(); }
public static boolean isUsingDdmProtocol() { return com.android.hierarchyviewerlib.HierarchyViewerDirector.sIsUsingDdmProtocol; }
private void setNetDnsProperty(int which, java.lang.String value) { final java.lang.String key = "net.dns" + which; try { mSystemProperties.set(key, value); } catch (java.lang.Exception e) { android.util.Slog.e(com.android.server.connectivity.DnsManager.TAG, "Error setting unsupported net.dns property: ", e); } }
public boolean cancelConnect() { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure("cancelConnect"))) return false; com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult("cancelConnect()"); try { result.setResult(mISupplicantP2pIface.cancelConnect()); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ("ISupplicantP2pIface exception: " + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }
protected static int getPort(java.io.FileDescriptor sock) throws java.lang.Exception { return ((java.net.InetSocketAddress) (android.system.Os.getsockname(sock))).getPort(); }
@java.lang.Override public void run() { java.util.List<com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasSelection> selection = mSelectionManager.getSelections(); com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasSelection canvasSelection = selection.get(0); com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo info = canvasSelection.getViewInfo(); java.lang.Object viewObject = info.getViewObject(); if (viewObject != null) { com.android.layoutlib.api.LayoutScene scene = mViewHierarchy.getScene(); scene.animate(viewObject, "testanim", false, new com.android.layoutlib.api.LayoutScene.IAnimationListener() { public void onNewFrame(final java.awt.image.BufferedImage image) { getDisplay().asyncExec(new java.lang.Runnable() { public void run() { mImageOverlay.setImage(image); redraw(); } }); } public boolean isCanceled() { return false; } public void done(com.android.layoutlib.api.SceneResult result) { } }); } }
@java.lang.Override protected boolean setUpActiveNetworkMeteringState() throws java.lang.Exception { return setMeteredNetwork(); }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); when(mResources.getInteger(R.integer.config_netrec_wifi_score_low_rssi_threshold_24GHz)).thenReturn(com.android.networkrecommendation.WifiWakeupNetworkSelectorTest.MIN_QUALIFIED_24); when(mResources.getInteger(R.integer.config_netrec_wifi_score_low_rssi_threshold_5GHz)).thenReturn(com.android.networkrecommendation.WifiWakeupNetworkSelectorTest.MIN_QUALIFIED_5); when(mResources.getInteger(R.integer.config_netrec_5GHz_preference_boost_factor)).thenReturn(100); mWifiWakeupNetworkSelector = new com.android.networkrecommendation.WifiWakeupNetworkSelector(mResources); }
@java.lang.Override protected void paintComponent(java.awt.Graphics g) { super.paintComponent(g); int yPos = 0; if ((myScaledImages.size()) == 0) { java.lang.String text = com.google.gct.idea.util.GctBundle.message("sample.browser.no.preview"); if (myHasPreview) { text = "Loading..."; } java.awt.geom.Rectangle2D r = g.getFontMetrics().getStringBounds(text, g); g.drawString(text, 1, ((int) (r.getHeight()))); } for (java.awt.Image img : myScaledImages) { g.drawImage(img, 0, yPos, null); yPos += (img.getHeight(null)) + (com.google.gct.idea.samples.SamplePreviewPanel.PADDING); } }
public int[] getAdnRecordsSize(int efid) { if (DBG) logd(("getAdnRecordsSize: efid=" + efid)); synchronized(mLock) { checkThread(); recordSize = new int[3]; java.util.concurrent.atomic.AtomicBoolean status = new java.util.concurrent.atomic.AtomicBoolean(false); android.os.Message response = mBaseHandler.obtainMessage(com.android.internal.telephony.cdma.EVENT_GET_SIZE_DONE, status); phone.getIccFileHandler().getEFLinearRecordSize(efid, response); waitForResult(status); } return recordSize; }
@java.lang.Override public java.nio.ByteBuffer putShort(short value) { checkIsAccessible(); if (isReadOnly) { throw new java.nio.ReadOnlyBufferException(); } int newPosition = (position) + (libcore.io.SizeOf.SHORT); if (newPosition > (limit)) { throw new java.nio.BufferOverflowException(); } this.block.pokeShort(((offset) + (position)), value, order); position = newPosition; return this; }
@com.android.annotations.Nullable java.nio.channels.SocketChannel getClientMonitoringSocket() { return mSocketChannel; }
public static com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree create(com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country country, java.time.Instant startInclusive, java.time.Instant endExclusive) { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.US); java.util.List<com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.TimeZoneMapping> timeZoneMappings = country.getTimeZoneMappingsList(); java.util.List<com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo> zoneInfos = new java.util.ArrayList<>(); for (com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.TimeZoneMapping timeZoneMapping : timeZoneMappings) { int priority = timeZoneMapping.getPriority(); com.ibm.icu.util.TimeZone timeZone = com.ibm.icu.util.TimeZone.getTimeZone(timeZoneMapping.getId()); if (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.isInvalidZone(timeZone)) { throw new java.lang.IllegalArgumentException(("Unknown or unexpected type for zone id: " + (timeZone.getID()))); } com.ibm.icu.util.BasicTimeZone basicTimeZone = ((com.ibm.icu.util.BasicTimeZone) (timeZone)); com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo zoneInfo = com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo.create(timeZoneNames, basicTimeZone, priority, startInclusive, endExclusive); zoneInfos.add(zoneInfo); } return com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.create(country.getIsoCode(), zoneInfos, startInclusive, endExclusive); }
@java.lang.Override protected void onResume() { super.onResume(); if ((mState) == (com.android.cts.verifier.usb.UsbAccessoryTestActivity.STATE_START)) { android.hardware.usb.UsbAccessory[] accessories = mUsbManager.getAccessoryList(); android.hardware.usb.UsbAccessory accessory = ((accessories != null) && ((accessories.length) > 0)) ? accessories[0] : null; if (accessory != null) { if (mUsbManager.hasPermission(accessory)) { openAccessory(accessory); } else { if (!(mPermissionRequestPending)) { mUsbManager.requestPermission(accessory, mPermissionIntent); mPermissionRequestPending = true; } } } } else if (((mState) != (com.android.cts.verifier.usb.UsbAccessoryTestActivity.STATE_CONNECTED)) && ((mState) != (com.android.cts.verifier.usb.UsbAccessoryTestActivity.STATE_RECONNECTED))) { closeAccessory(); setTestResultAndFinish(false); android.widget.Toast.makeText(this, R.string.usb_test_abort, Toast.LENGTH_SHORT).show(); mState = com.android.cts.verifier.usb.UsbAccessoryTestActivity.STATE_START; } }
@java.lang.Deprecated public void iccTransmitApduBasicChannel(int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { if ((mUiccProfile) != null) { mUiccProfile.iccTransmitApduBasicChannel(cla, command, p1, p2, p3, data, response); } else { loge("iccTransmitApduBasicChannel Failed!"); } }
public void testDecodeUint8() throws java.io.IOException { final java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(new byte[]{ ((byte) (0)), ((byte) (127)), ((byte) (128)), ((byte) (255)) }); final short[] expected = new short[]{ 0, 127, 128, 255 }; com.android.tools.rpclib.binary.Decoder d = new com.android.tools.rpclib.binary.Decoder(input); for (short u8 : expected) { assertEquals(u8, ((d.uint8()) & 255)); } }
@com.android.annotations.NonNull public java.lang.String getTime() { return mTime; }
private static void validateAttributeInstructions(com.android.manifmerger.MergingReport.Builder mergingReport, com.android.manifmerger.XmlElement xmlElement) { for (java.util.Map.Entry<com.android.manifmerger.XmlNode.NodeName, com.android.manifmerger.AttributeOperationType> attributeOperationTypeEntry : xmlElement.getAttributeOperations()) { com.google.common.base.Optional<com.android.manifmerger.XmlAttribute> attribute = xmlElement.getAttribute(attributeOperationTypeEntry.getKey()); switch (attributeOperationTypeEntry.getValue()) { case STRICT : break; case REMOVE : if (attribute.isPresent()) { mergingReport.addError(java.lang.String.format(("tools:remove specified at line:%d for attribute %s, but " + ("attribute also declared at line:%d, " + "do you want to use tools:replace instead ?")), xmlElement.getPosition().getLine(), attributeOperationTypeEntry.getKey(), attribute.get().getPosition().getLine())); } break; case REPLACE : if (!(attribute.isPresent())) { mergingReport.addError(java.lang.String.format(("tools:replace specified at line:%d for attribute %s, but " + "no new value specified"), xmlElement.getPosition().getLine(), attributeOperationTypeEntry.getKey())); } break; default : throw new java.lang.IllegalStateException(("Unhandled AttributeOperationType " + (attributeOperationTypeEntry.getValue()))); } } }
protected void libToImportStaticLibs(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { for (java.io.File staticlib : in) { args.add("--import"); args.add(staticlib.getAbsolutePath()); } for (java.io.File staticLib : staticLibs) { args.add("--import"); args.add(staticLib.getAbsolutePath()); } }
public static <T> void runBasicIterationTests(java.util.Spliterator<T> spliterator, java.util.List<T> expectedElements) { java.util.List<T> recorder = new java.util.ArrayList<T>(expectedElements.size()); java.util.function.Consumer<T> consumer = (T value) -> recorder.add(value); boolean didAdvance = spliterator.tryAdvance(consumer); junit.framework.Assert.assertEquals((!(expectedElements.isEmpty())), didAdvance); spliterator.forEachRemaining(consumer); junit.framework.Assert.assertEquals(expectedElements, recorder); junit.framework.Assert.assertFalse(spliterator.tryAdvance(consumer)); spliterator.forEachRemaining(( T) -> junit.framework.Assert.fail()); }
@java.lang.Override public java.lang.String toString() { return ((("ResourceItem [mName=" + (mName)) + ", mFiles=") + (mFiles)) + "]"; }
@javax.annotation.Nonnull static com.android.jack.shrob.spec.AnnotationSpecification annotation(java.lang.String annotationName, boolean hasNameNegator) { com.android.jack.shrob.spec.NameSpecification name = com.android.jack.shrob.proguard.GrammarActions.name(annotationName, com.android.jack.shrob.proguard.GrammarActions.FilterSeparator.CLASS); name.setNegator(hasNameNegator); return new com.android.jack.shrob.spec.AnnotationSpecification(name); }
@java.lang.Override public void getCellInfoList(android.os.Message result, android.os.WorkSource workSource) { workSource = getDeafultWorkSourceIfInvalid(workSource); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_CELL_INFO_LIST, result, workSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getCellInfoList(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getCellInfoList", e); } } }
public synchronized void removeLogCatListener(com.android.ddmlib.logcat.LogCatListener l) { mListeners.remove(l); }
@org.junit.Test public void coreToJayceFromJar() throws java.lang.Exception { com.android.jill.Options options = new com.android.jill.Options(); options.setBinaryFile(new java.io.File(((com.android.jack.test.TestsProperties.getAndroidRootDir().getPath()) + "/out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes.jar"))); options.setVerbose(true); options.container = ContainerType.DIR; options.outputDirOrZip = com.android.jill.JillTestTools.createTempDir("core_", "_dir"); new com.android.jill.Jill(options, "0.1").process(options.getBinaryFile()); }
@java.lang.Override public void write(java.io.OutputStream out) throws java.io.IOException { try { signer = new com.android.signapk.SignApk.WholeFileSignerOutputStream(out, outputStream); java.util.jar.JarOutputStream outputJar = new java.util.jar.JarOutputStream(signer); int hash = com.android.signapk.SignApk.getDigestAlgorithm(publicKey, minSdkVersion); long timestamp = (publicKey.getNotBefore().getTime()) + (3600L * 1000); java.util.jar.Manifest manifest = com.android.signapk.SignApk.addDigestsToManifest(inputJar, hash); com.android.signapk.SignApk.copyFiles(manifest, inputJar, outputJar, timestamp, 0); com.android.signapk.SignApk.addOtacert(outputJar, publicKeyFile, timestamp, manifest, hash); com.android.signapk.SignApk.signFile(manifest, new java.security.cert.X509Certificate[]{ publicKey }, new java.security.PrivateKey[]{ privateKey }, minSdkVersion, false, outputJar); signer.notifyClosing(); outputJar.close(); signer.finish(); } catch (java.lang.Exception e) { throw new java.io.IOException(e); } }
public void request(com.android.bips.discovery.DiscoveredPrinter printer, boolean highPriority, com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, ((("request() printer=" + printer) + " high=") + highPriority)); com.android.bips.jni.LocalPrinterCapabilities capabilities = get(printer); if ((capabilities != null) && ((capabilities.nativeData) != null)) { onLocalPrinterCapabilities.onCapabilities(capabilities); return; } if (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(mService, printer)) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, ("Adding to P2P evict list: " + printer)); mToEvictP2p.add(printer.path); } else { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, ("Adding to WLAN evict list: " + printer)); mToEvict.add(printer.path); } com.android.bips.ipp.CapabilitiesCache.Request request = mRequests.computeIfAbsent(printer.path, ( uri) -> new com.android.bips.ipp.Request(printer, (highPriority ? com.android.bips.ipp.CapabilitiesCache.SECOND_PASS_TIMEOUT : com.android.bips.ipp.CapabilitiesCache.FIRST_PASS_TIMEOUT))); if (highPriority) { request.mHighPriority = true; } request.mCallbacks.add(onLocalPrinterCapabilities); startNextRequest(); }
public boolean supports(com.android.layoutlib.api.Capability capability) { if ((mBridge) != null) { return mBridge.getCapabilities().contains(capability); } if ((mLegacyBridge) != null) { switch (capability) { case UNBOUND_RENDERING : return (getLegacyApiLevel()) == 4; } } return false; }
@org.junit.Test public void test001() throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir("com.android.jack.java8.variable.test001.jack"); java.io.File out = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeClazz = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(2); excludeClazz.add(com.android.jack.test.toolchain.JackApiV01.class); com.android.jack.test.toolchain.IToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchainBase.class, excludeClazz); toolchain.addToClasspath(toolchain.getDefaultBootClasspath()).setErrorStream(errOut).setSourceLevel(SourceLevel.JAVA_8); try { toolchain.srcToExe(out, false, testFolder); junit.framework.Assert.fail(); } catch (com.android.jack.frontend.FrontendCompilationException e) { junit.framework.Assert.assertTrue(errOut.toString().contains("Local variable value defined in an enclosing scope must be final or effectively final")); } }
@java.lang.Override public byte[] encode() throws java.io.UnsupportedEncodingException { java.util.ArrayList<byte[]> bodyFragments = new java.util.ArrayList<byte[]>(); if ((mSmsBody) != null) { java.lang.String tmpBody = mSmsBody.replaceAll("END:MSG", "/END\\:MSG"); java.lang.String remoteAddress = com.android.bluetooth.map.BluetoothMapService.getRemoteDevice().getAddress(); if (com.android.bluetooth.DeviceWorkArounds.addressStartsWith(remoteAddress, DeviceWorkArounds.PCM_CARKIT)) { tmpBody = tmpBody.replaceAll("\r", ""); } else if (com.android.bluetooth.DeviceWorkArounds.addressStartsWith(remoteAddress, DeviceWorkArounds.FORD_SYNC_CARKIT)) { tmpBody = tmpBody.replaceAll("\n", ""); } else if ((com.android.bluetooth.DeviceWorkArounds.addressStartsWith(remoteAddress, DeviceWorkArounds.SYNC_CARKIT)) && ((tmpBody.length()) > 0)) { int trailingLF = 0; while ((tmpBody.charAt((((tmpBody.length()) - trailingLF) - 1))) == '\n') trailingLF++; tmpBody = tmpBody.substring(0, ((tmpBody.length()) - trailingLF)); } bodyFragments.add(tmpBody.getBytes("UTF-8")); } else if (((mSmsBodyPdus) != null) && ((mSmsBodyPdus.size()) > 0)) { for (com.android.bluetooth.map.BluetoothMapSmsPdu.SmsPdu pdu : mSmsBodyPdus) { bodyFragments.add(encodeBinary(pdu.getData(), pdu.getScAddress()).getBytes("UTF-8")); } } else { bodyFragments.add(new byte[0]); } return encodeGeneric(bodyFragments); }
private static com.android.signapk.Pair<java.lang.String, ? extends java.security.spec.AlgorithmParameterSpec> getSignatureAlgorithmJcaSignatureAlgorithm(int sigAlgorithm) { switch (sigAlgorithm) { case com.android.signapk.ApkSignerV2.SIGNATURE_RSA_PSS_WITH_SHA256 : return com.android.signapk.Pair.create("SHA256withRSA/PSS", new java.security.spec.PSSParameterSpec("SHA-256", "MGF1", java.security.spec.MGF1ParameterSpec.SHA256, (256 / 8), 1)); case com.android.signapk.ApkSignerV2.SIGNATURE_RSA_PSS_WITH_SHA512 : return com.android.signapk.Pair.create("SHA512withRSA/PSS", new java.security.spec.PSSParameterSpec("SHA-512", "MGF1", java.security.spec.MGF1ParameterSpec.SHA512, (512 / 8), 1)); case com.android.signapk.ApkSignerV2.SIGNATURE_RSA_PKCS1_V1_5_WITH_SHA256 : return com.android.signapk.Pair.create("SHA256withRSA", null); case com.android.signapk.ApkSignerV2.SIGNATURE_RSA_PKCS1_V1_5_WITH_SHA512 : return com.android.signapk.Pair.create("SHA512withRSA", null); case com.android.signapk.ApkSignerV2.SIGNATURE_ECDSA_WITH_SHA256 : return com.android.signapk.Pair.create("SHA256withECDSA", null); case com.android.signapk.ApkSignerV2.SIGNATURE_ECDSA_WITH_SHA512 : return com.android.signapk.Pair.create("SHA512withECDSA", null); case com.android.signapk.ApkSignerV2.SIGNATURE_DSA_WITH_SHA256 : return com.android.signapk.Pair.create("SHA256withDSA", null); case com.android.signapk.ApkSignerV2.SIGNATURE_DSA_WITH_SHA512 : return com.android.signapk.Pair.create("SHA512withDSA", null); default : throw new java.lang.IllegalArgumentException(("Unknown signature algorithm: 0x" + (java.lang.Long.toHexString((sigAlgorithm & -1))))); } }
public void testExceptionMessage() { short[] B1 = new short[5]; int[] B2 = new int[5]; java.lang.Exception err = null; try { testExceptionMessage1(B1, B2, null, (-1), 6); } catch (java.lang.Exception e) { err = e; } java.lang.System.out.println(err); }
public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion, int maxSdkVersion) throws com.android.apksig.internal.apk.ApkSigningBlockUtils.SignatureNotFoundException, java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result(com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3); com.android.apksig.internal.apk.SignatureInfo signatureInfo = com.android.apksig.internal.apk.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.v3.V3SchemeVerifier.APK_SIGNATURE_SCHEME_V3_BLOCK_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; if (minSdkVersion < (com.android.apksig.internal.util.AndroidSdkVersion.P)) { minSdkVersion = com.android.apksig.internal.util.AndroidSdkVersion.P; } com.android.apksig.internal.apk.v3.V3SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, minSdkVersion, maxSdkVersion, result); return result; }
private native long getLong(java.lang.Object object, boolean accessible) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;
@java.lang.Override public void installPackageWithVerification(android.net.Uri packageURI, android.content.pm.IPackageInstallObserver observer, int flags, java.lang.String installerPackageName, android.net.Uri verificationURI, android.content.pm.ManifestDigest manifestDigest, android.content.pm.ContainerEncryptionParams encryptionParams) { android.content.pm.VerificationParams verificationParams = new android.content.pm.VerificationParams(verificationURI, null, null, android.content.pm.VerificationParams.NO_UID, manifestDigest); installPackageWithVerificationAndEncryption(packageURI, observer, flags, installerPackageName, verificationParams, encryptionParams); }
public void onRttSessionRemotelyTerminated(android.telecom.Connection c) { }
public byte[] getHardwareAddress() throws java.net.SocketException { return (hardwareAddr) != null ? hardwareAddr.clone() : null; }
@com.android.monkeyrunner.doc.MonkeyRunnerExported(doc = "Sends a touch event to the selected object.", args = { "selector", "type" }, argDocs = { "The selector identifying the object.", "The event type as returned by TouchPressType()." }) public void touch(org.python.core.PyObject[] args, java.lang.String[] kws) { org.python.core.ArgParser ap = com.android.monkeyrunner.JythonUtils.createArgParser(args, kws); com.google.common.base.Preconditions.checkNotNull(ap); com.android.monkeyrunner.easy.By selector = getSelector(ap, 0); com.android.hierarchyviewerlib.device.ViewNode node = mHierarchyViewer.findView(selector); if (node == null) { throw new org.python.core.PyException(org.python.core.Py.ValueError, java.lang.String.format("View not found: %s", selector)); } org.eclipse.swt.graphics.Point p = com.android.monkeyrunner.easy.HierarchyViewer.getAbsoluteCenterOfView(node); org.python.core.PyObject[] otherArgs = new org.python.core.PyObject[3]; otherArgs[0] = new org.python.core.PyInteger(p.x); otherArgs[1] = new org.python.core.PyInteger(p.y); otherArgs[2] = args[1]; mDevice.touch(otherArgs, kws); }
@java.lang.Override public void sendSMS(java.lang.String smscPdu, java.lang.String pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SEND_SMS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.GsmSmsMessage msg = constructGsmSendSmsRilRequest(smscPdu, pdu); try { radioProxy.sendSms(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_GSM, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendSMS", e); } } }
public void testHostnameProvided() throws java.lang.Exception { final java.lang.String expectedHostname = "example.com"; class TestCertPinManager implements org.conscrypt.CertPinManager { public boolean hostnameMatched = false; @java.lang.Override public void checkChainPinning(java.lang.String hostname, java.util.List<java.security.cert.X509Certificate> chain) throws java.security.cert.CertificateException { hostnameMatched = expectedHostname.equals(hostname); } } TestCertPinManager manager = new TestCertPinManager(); callCheckServerTrusted(expectedHostname, manager); assertTrue(manager.hostnameMatched); }
@org.junit.Test public void retroLambdaDefaultMethodsTest006() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_006).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
private void updateAndSendIntent(android.bluetooth.BluetoothDevice device, int newDeviceState, int prevDeviceState) { if (newDeviceState == (android.bluetooth.BluetoothHealth.STATE_DISCONNECTED)) { mHealthDevices.remove(device); } else { mHealthDevices.put(device, newDeviceState); } if ((newDeviceState != prevDeviceState) && (newDeviceState == (android.bluetooth.BluetoothHealth.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.HEALTH); } }
@org.junit.Test public void parseEmptyBuffer() throws java.lang.Exception { com.android.server.wifi.hotspot2.anqp.RoamingConsortiumElement element = com.android.server.wifi.hotspot2.anqp.RoamingConsortiumElement.parse(java.nio.ByteBuffer.allocate(0)); assertTrue(element.getOIs().isEmpty()); }
@java.lang.Deprecated @com.android.annotations.NonNull public java.util.Set<com.android.sdklib.repository.FullRevision> getBuildTools() { com.android.sdklib.local.LocalPkgInfo[] pkgs = mLocalSdk.getPkgsInfos(LocalSdk.PKG_BUILD_TOOLS); java.util.TreeSet<com.android.sdklib.repository.FullRevision> bt = new java.util.TreeSet<com.android.sdklib.repository.FullRevision>(); for (com.android.sdklib.local.LocalPkgInfo pkg : pkgs) { if (pkg.hasFullRevision()) { bt.add(pkg.getFullRevision()); } } return java.util.Collections.unmodifiableSet(bt); }
private static native void copyNativeCanvasState(long nativeSrcCanvas, long nativeDstCanvas);
@java.lang.Override protected synchronized boolean stop() { if ((com.android.bluetooth.hfpclient.HeadsetClientService.sHeadsetClientService) == null) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, "stop() called without start()"); return false; } com.android.bluetooth.hfpclient.HeadsetClientService.setHeadsetClientService(null); unregisterReceiver(mBroadcastReceiver); for (java.util.Iterator<java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.hfpclient.HeadsetClientStateMachine>> it = mStateMachineMap.entrySet().iterator(); it.hasNext();) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = mStateMachineMap.get(((android.bluetooth.BluetoothDevice) (it.next().getKey()))); sm.doQuit(); it.remove(); } android.content.Intent stopIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); stopIntent.putExtra(com.android.bluetooth.hfpclient.HeadsetClientService.HFP_CLIENT_STOP_TAG, true); startService(stopIntent); mSmThread.quit(); mSmThread = null; mNativeInterface.cleanupNative(); mNativeInterface = null; return true; }
private void adjustBounds() { final int dw; final int dh; final float xPos; final float yPos; if (!(mStack.isFullscreen())) { dw = mBounds.width(); dh = mBounds.height(); xPos = mBounds.left; yPos = mBounds.top; } else { final android.view.DisplayInfo info = mDisplayContent.getDisplayInfo(); dw = ((int) ((info.logicalWidth) * 1.5)); dh = ((int) ((info.logicalHeight) * 1.5)); xPos = ((-1) * dw) / 6; yPos = ((-1) * dh) / 6; } mDimSurface.setPosition(xPos, yPos); mDimSurface.setSize(dw, dh); mLastBounds.set(mBounds); }
public static libcore.javax.net.ssl.TestSSLContext createWithAdditionalKeyManagers(libcore.java.security.TestKeyStore client, libcore.java.security.TestKeyStore server, javax.net.ssl.KeyManager[] additionalClientKeyManagers, javax.net.ssl.KeyManager[] additionalServerKeyManagers) { java.lang.String protocol = "TLSv1.2"; javax.net.ssl.KeyManager[] clientKeyManagers = libcore.javax.net.ssl.TestSSLContext.concat(client.keyManagers, additionalClientKeyManagers); javax.net.ssl.KeyManager[] serverKeyManagers = libcore.javax.net.ssl.TestSSLContext.concat(server.keyManagers, additionalServerKeyManagers); javax.net.ssl.SSLContext clientContext = libcore.javax.net.ssl.TestSSLContext.createSSLContext(protocol, clientKeyManagers, client.trustManagers); javax.net.ssl.SSLContext serverContext = libcore.javax.net.ssl.TestSSLContext.createSSLContext(protocol, serverKeyManagers, server.trustManagers); return libcore.javax.net.ssl.TestSSLContext.create(client.keyStore, client.storePassword, server.keyStore, server.storePassword, clientKeyManagers, serverKeyManagers, client.trustManagers[0], server.trustManagers[0], clientContext, serverContext); }
@java.lang.Override public void widgetDisposed(org.eclipse.swt.events.DisposeEvent event) { disposeTableResources(table.getData("disposeResources")); }
@java.lang.Override public void setInitialAttachApn(android.telephony.data.DataProfile dataProfile, boolean isRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_INITIAL_ATTACH_APN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + dataProfile)); } try { radioProxy.setInitialAttachApn(rr.mSerial, com.android.internal.telephony.RIL.convertToHalDataProfile(dataProfile), dataProfile.isModemCognitive(), isRoaming); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setInitialAttachApn", e); } } }
private void checkIpSecConfig(android.net.IpSecConfig config) { if ((config.getLocalAddress()) == null) { throw new java.lang.IllegalArgumentException("Invalid null Local InetAddress"); } if ((config.getRemoteAddress()) == null) { throw new java.lang.IllegalArgumentException("Invalid null Remote InetAddress"); } switch (config.getMode()) { case android.net.IpSecTransform.MODE_TRANSPORT : if (!(config.getLocalAddress().isEmpty())) { throw new java.lang.IllegalArgumentException("Non-empty Local Address"); } com.android.server.IpSecService.checkInetAddress(config.getRemoteAddress()); break; case android.net.IpSecTransform.MODE_TUNNEL : break; default : throw new java.lang.IllegalArgumentException(("Invalid IpSecTransform.mode: " + (config.getMode()))); } switch (config.getEncapType()) { case android.net.IpSecTransform.ENCAP_NONE : break; case android.net.IpSecTransform.ENCAP_ESPINUDP : case android.net.IpSecTransform.ENCAP_ESPINUDP_NON_IKE : if ((mUdpSocketRecords.get(config.getEncapSocketResourceId())) == null) { throw new java.lang.IllegalStateException(("No Encapsulation socket for Resource Id: " + (config.getEncapSocketResourceId()))); } int port = config.getEncapRemotePort(); if ((port <= 0) || (port > 65535)) { throw new java.lang.IllegalArgumentException(("Invalid remote UDP port: " + port)); } break; default : throw new java.lang.IllegalArgumentException(("Invalid Encap Type: " + (config.getEncapType()))); } for (int direction : com.android.server.IpSecService.DIRECTIONS) { android.net.IpSecAlgorithm crypt = config.getEncryption(direction); android.net.IpSecAlgorithm auth = config.getAuthentication(direction); if ((crypt == null) && (auth == null)) { throw new java.lang.IllegalArgumentException("Encryption and Authentication are both null"); } if ((mSpiRecords.get(config.getSpiResourceId(direction))) == null) { throw new java.lang.IllegalStateException("No SPI for specified Resource Id"); } } }
public void testJvmtiAgentAppExternal() throws java.lang.Exception { runJvmtiAgentLoadTest((com.android.tradefed.device.ITestDevice device,java.lang.String pkg,java.lang.String apk,java.lang.String abiName) -> { try { java.lang.String pwd = device.executeShellCommand((("run-as " + pkg) + " pwd")); if (pwd == null) { throw new java.lang.RuntimeException("pwd failed"); } pwd = pwd.trim(); if (pwd.isEmpty()) { throw new java.lang.RuntimeException("pwd failed"); } java.lang.String libInDataData = (android.jvmti.cts.JvmtiAttachingHostTest.AGENT.substring(0, ((android.jvmti.cts.JvmtiAttachingHostTest.AGENT.length()) - (".so".length())))) + "2.so"; java.lang.String agentInDataData = installLibToDataData(device, pkg, abiName, apk, pwd, android.jvmti.cts.JvmtiAttachingHostTest.AGENT, libInDataData); java.lang.String setAgentAppCmd = (("cmd activity set-agent-app " + pkg) + " ") + agentInDataData; device.executeShellCommand(setAgentAppCmd); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException("Failed running set-agent-app", e); } try { android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, ""); android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, ""); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException("Failed agent-app attaching", e); } }); }
private void recordHtmlAttributeValue(@com.android.annotations.Nullable com.android.build.gradle.tasks.ResourceUsageAnalyzer.Resource from, @com.android.annotations.Nullable java.lang.String tagName, @com.android.annotations.Nullable java.lang.String attribute, @com.android.annotations.NonNull java.lang.String value) { if (("href".equals(attribute)) || ("src".equals(attribute))) { if (!(referencedUrl(from, value))) { referencedString(value); mFoundWebContent = true; } if (from != null) { from.addReference(getResourceFromFilePath(attribute)); } } }
public void testAesGcm96Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }
public static void remove(java.lang.String path) throws android.system.ErrnoException { Libcore.os.remove(path); }
@com.android.annotations.NonNull private com.google.common.hash.HashCode getSourceHash() { return mSourceHash; }
public static int ioctlInt(java.io.FileDescriptor fd, int cmd, android.system.Int32Ref arg) throws android.system.ErrnoException { return Libcore.os.ioctlInt(fd, cmd, arg); }
private void checkClzUcharUchar() { android.renderscript.Allocation inValue = CreateRandomAllocation(mRS, Element.DataType.UNSIGNED_8, 1, 2200722815242108012L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_8, 1), android.renderscript.cts.INPUTSIZE); script.forEach_testClzUcharUchar(inValue, out); verifyResultsClzUcharUchar(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testClzUcharUchar: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_8, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testClzUcharUchar(inValue, out); verifyResultsClzUcharUchar(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testClzUcharUchar: " + (e.toString()))); } }
@com.android.annotations.Nullable @java.lang.Override @org.gradle.api.tasks.InputFile @org.gradle.api.tasks.Optional public java.io.File getStoreFile() { return (signingConfig.getStoreFile()) == null ? null : new java.io.File(signingConfig.getStoreFile()); }
private void stopGattProfileService() { mAdapterProperties.onBleDisable(); if ((mRunningProfiles.size()) == 0) { debugLog("stopGattProfileService() - No profiles services to stop."); mAdapterStateMachine.sendMessage(AdapterState.BLE_STOPPED); } setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); }
private boolean haveLocalRepository(java.lang.String vendor) { com.android.sdklib.SdkManager sdkManager = getSdkManager(); if (sdkManager != null) { com.android.sdklib.repository.local.LocalSdk localSdk = sdkManager.getLocalSdk(); com.android.sdklib.repository.local.LocalPkgInfo[] infos = localSdk.getPkgsInfos(PkgType.PKG_EXTRAS); for (com.android.sdklib.repository.local.LocalPkgInfo info : infos) { com.android.sdklib.repository.descriptors.IPkgDesc d = info.getDesc(); if ((((d.hasVendorId()) && (vendor.equals(d.getVendorId()))) && (d.hasPath())) && ("m2repository".equals(d.getPath()))) { return true; } } } if ((mSdkLocation) != null) { java.io.File repository = new java.io.File(mSdkLocation, (((((com.android.SdkConstants.FD_EXTRAS) + (java.io.File.separator)) + vendor) + (java.io.File.separator)) + "m2repository")); return repository.exists(); } return false; }
@java.lang.Override protected void setUp() throws java.lang.Exception { final java.io.File f = java.io.File.createTempFile("ZipEntryTest", ".zip"); java.io.InputStream is = tests.support.resource.Support_Resources.getStream("hyts_ZipFile.zip"); java.io.FileOutputStream fos = new java.io.FileOutputStream(f); libcore.io.Streams.copy(is, fos); is.close(); fos.close(); zfile = new java.util.zip.ZipFile(f); zentry = zfile.getEntry("File1.txt"); orgSize = zentry.getSize(); orgCompressedSize = zentry.getCompressedSize(); orgCrc = zentry.getCrc(); orgTime = zentry.getTime(); }
public com.android.apksig.ApkSigner.Builder setV3SigningEnabled(boolean enabled) { checkInitializedWithoutEngine(); mV3SigningEnabled = enabled; if (enabled) { mV3SigningExplicitlyEnabled = true; } else { mV3SigningExplicitlyDisabled = true; } return this; }
@java.lang.Override public final int addStatusListener(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.IDownloadStatusListener listener) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); if (downloadRequest == null) { throw new java.lang.NullPointerException("Download request must not be null"); } if (listener == null) { throw new java.lang.NullPointerException("Callback must not be null"); } android.telephony.mbms.DownloadStatusListener exposedCallback = new android.telephony.mbms.vendor.MbmsDownloadServiceBase.VendorDownloadStatusListener(listener) { @java.lang.Override protected void onRemoteException(android.os.RemoteException e) { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); } }; int result = addStatusListener(downloadRequest, exposedCallback); if (result == (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.mbms.vendor.DeathRecipient deathRecipient = new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); mDownloadStatusListenerBinderMap.remove(listener.asBinder()); mDownloadCallbackDeathRecipients.remove(listener.asBinder()); } }; mDownloadCallbackDeathRecipients.put(listener.asBinder(), deathRecipient); listener.asBinder().linkToDeath(deathRecipient, 0); mDownloadStatusListenerBinderMap.put(listener.asBinder(), exposedCallback); } return result; }
@java.lang.Override public void removeItem(@com.android.annotations.NonNull com.android.ide.common.res2.ResourceItem removedItem, @com.android.annotations.Nullable com.android.ide.common.res2.ResourceItem replacedBy) throws com.android.ide.common.res2.ConsumerException { com.android.ide.common.res2.ResourceFile.FileType removedType = removedItem.getSourceType(); com.android.ide.common.res2.ResourceFile.FileType replacedType = (replacedBy != null) ? replacedBy.getSourceType() : null; switch (removedType) { case SINGLE_FILE : case GENERATED_FILES : if ((replacedType == (DataFile.FileType.SINGLE_FILE)) || (replacedType == (DataFile.FileType.GENERATED_FILES))) { break; } removeOutFile(removedItem); break; case XML_VALUES : mQualifierWithDeletedValues.add(removedItem.getQualifiers()); break; default : throw new java.lang.IllegalStateException(); } }
@java.lang.Override public java.util.Map<com.android.tools.perflib.heap.Field, java.lang.Object> getStaticFieldValues() { java.util.Map<com.android.tools.perflib.heap.Field, java.lang.Object> result = com.google.common.collect.Maps.newHashMap(); result.put(new com.android.tools.perflib.heap.Field(com.android.tools.perflib.heap.Type.OBJECT, "foo"), object1); result.put(new com.android.tools.perflib.heap.Field(com.android.tools.perflib.heap.Type.OBJECT, "bar"), object2); return result; }
private void processLockedState() { synchronized(mLock) { if ((mUiccApplication) == null) { return; } com.android.internal.telephony.uicc.IccCardStatus.PinState pin1State = mUiccApplication.getPin1State(); if (pin1State == (com.android.internal.telephony.uicc.IccCardStatus.PinState.PINSTATE_ENABLED_PERM_BLOCKED)) { setExternalState(State.PERM_DISABLED); return; } com.android.internal.telephony.uicc.IccCardApplicationStatus.AppState appState = mUiccApplication.getState(); switch (appState) { case APPSTATE_PIN : mPinLockedRegistrants.notifyRegistrants(); setExternalState(State.PIN_REQUIRED); break; case APPSTATE_PUK : setExternalState(State.PUK_REQUIRED); break; } } }
private boolean useRoamingFromServiceState() { android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE))); if (configManager != null) { android.os.PersistableBundle b = configManager.getConfigForSubId(com.android.internal.telephony.SubscriptionController.getInstance().getSubIdUsingPhoneId(mParentApp.getPhoneId())); if ((b != null) && (b.getBoolean(CarrierConfigManager.KEY_SPN_DISPLAY_RULE_USE_ROAMING_FROM_SERVICE_STATE_BOOL))) { return true; } } return false; }
public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineTransportTypes(nc); combineLinkBandwidths(nc); combineSpecifiers(nc); combineSignalStrength(nc); combineUids(nc); }
@org.junit.Test public void test003() throws java.lang.Exception { java.lang.String test = "com.android.jack.optimizations.valuepropagation.test003"; java.lang.String aType = "Lcom/android/jack/optimizations/valuepropagation/test003/A;"; java.lang.String bType = "Lcom/android/jack/optimizations/valuepropagation/test003/B;"; java.lang.String cType = "Lcom/android/jack/optimizations/valuepropagation/test003/C;"; com.android.jack.optimizations.valuepropagation.CompilationProperties properties = defaultProperties(); compileAndValidate(test, properties, new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("check()V", dalvik(test, "A.check.dalvik"))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("check()Ljava/lang/String;", dalvik(test, "B.check.dalvik"))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("check()Ljava/lang/String;", dalvik(test, "C.check.dalvik")))); properties = properties.with(Optimizations.FieldValuePropagation.ENSURE_TYPE_INITIALIZERS.getName(), java.lang.Boolean.TRUE); compileAndValidate(test, properties, new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("check()V", dalvik(test, "A.check.dalvik"))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("check()Ljava/lang/String;", dalvik(test, "B.check.e.t.i.dalvik"))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("check()Ljava/lang/String;", dalvik(test, "C.check.e.t.i.dalvik")))); }
@com.android.compatibility.common.util.VendorInterfaceTest public void testIsHardwareAccelerated() { if ((getGlEsVersion(mActivity)) >= 2) { assertTrue(mHardwareView.isHardwareAccelerated()); assertTrue(mSoftwareView.isHardwareAccelerated()); assertTrue(mManualHardwareView.isHardwareAccelerated()); assertTrue(mManualSoftwareView.isHardwareAccelerated()); assertTrue(mHardwareView.isCanvasHardwareAccelerated()); assertFalse(mSoftwareView.isCanvasHardwareAccelerated()); assertTrue(mManualHardwareView.isCanvasHardwareAccelerated()); assertFalse(mManualSoftwareView.isCanvasHardwareAccelerated()); } else { assertFalse(mHardwareView.isHardwareAccelerated()); assertFalse(mSoftwareView.isHardwareAccelerated()); assertFalse(mManualHardwareView.isHardwareAccelerated()); assertFalse(mManualSoftwareView.isHardwareAccelerated()); assertFalse(mHardwareView.isCanvasHardwareAccelerated()); assertFalse(mSoftwareView.isCanvasHardwareAccelerated()); assertFalse(mManualHardwareView.isCanvasHardwareAccelerated()); assertFalse(mManualSoftwareView.isCanvasHardwareAccelerated()); } }
private void sendTextMessageInternal(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean persistMessage, int priority, boolean expectMore, int validityPeriod) { if (android.text.TextUtils.isEmpty(destinationAddress)) { throw new java.lang.IllegalArgumentException("Invalid destinationAddress"); } if (android.text.TextUtils.isEmpty(text)) { throw new java.lang.IllegalArgumentException("Invalid message body"); } if ((priority < 0) || (priority > 3)) { throw new java.lang.IllegalArgumentException("Invalid priority"); } if ((validityPeriod < 5) || (validityPeriod > 635040)) { throw new java.lang.IllegalArgumentException("Invalid validity period"); } try { com.android.internal.telephony.ISms iccISms = android.telephony.SmsManager.getISmsServiceOrThrow(); if (iccISms != null) { iccISms.sendTextForSubscriberWithOptions(getSubscriptionId(), android.app.ActivityThread.currentPackageName(), destinationAddress, scAddress, text, sentIntent, deliveryIntent, persistMessage, priority, expectMore, validityPeriod); } } catch (android.os.RemoteException ex) { } }
private boolean verifyHostName(java.lang.String hostName, java.lang.String cn) { if ((((hostName == null) || (hostName.isEmpty())) || (cn == null)) || (cn.isEmpty())) { return false; } if ((hostName.endsWith(".")) && (!(cn.endsWith(".")))) { cn += '.'; } cn = cn.toLowerCase(java.util.Locale.US); if (!(cn.contains("*"))) { return hostName.equals(cn); } if (!(javax.net.ssl.DefaultHostnameVerifier.containsAtLeastTwoDomainNameLabelsExcludingRoot(cn))) { return false; } if ((cn.startsWith("*.")) && (hostName.regionMatches(0, cn, 2, ((cn.length()) - 2)))) { return true; } int asterisk = cn.indexOf('*'); int dot = cn.indexOf('.'); if (asterisk > dot) { return false; } if (!(hostName.regionMatches(0, cn, 0, asterisk))) { return false; } int suffixLength = (cn.length()) - (asterisk + 1); int suffixStart = (hostName.length()) - suffixLength; if ((hostName.indexOf('.', asterisk)) < suffixStart) { return false; } if (!(hostName.regionMatches(suffixStart, cn, (asterisk + 1), suffixLength))) { return false; } return true; }
@org.junit.Test public void testDescribeImmutableDifferences() { android.net.NetworkCapabilities nc1; android.net.NetworkCapabilities nc2; nc1 = new android.net.NetworkCapabilities().addTransportType(android.net.NetworkCapabilities.TRANSPORT_CELLULAR); nc2 = new android.net.NetworkCapabilities().addTransportType(android.net.NetworkCapabilities.TRANSPORT_WIFI); assertNotEquals("", nc1.describeImmutableDifferences(nc2)); assertEquals("", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED); nc2 = new android.net.NetworkCapabilities(); assertEquals("", nc1.describeImmutableDifferences(nc2)); assertEquals("", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); nc2 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); assertEquals("", nc1.describeImmutableDifferences(nc2)); assertEquals("", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET).removeCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); nc2 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); assertNotEquals("", nc1.describeImmutableDifferences(nc2)); assertEquals("", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities().addTransportType(android.net.NetworkCapabilities.TRANSPORT_WIFI); nc2 = new android.net.NetworkCapabilities().addTransportType(android.net.NetworkCapabilities.TRANSPORT_WIFI).setNetworkSpecifier(new android.net.StringNetworkSpecifier("specs")); assertNotEquals("", nc1.describeImmutableDifferences(nc2)); assertEquals("", nc1.describeImmutableDifferences(nc1)); }
public android.system.StructUcred getsockoptUcred(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException { return os.getsockoptUcred(fd, level, option); }
@java.lang.Override public void valueChanged(javax.swing.event.ListSelectionEvent e) { valueChanged = true; if ((e.getValueIsAdjusting()) == false) { if ((list.getSelectedIndex()) == (-1)) { signOutButton.setEnabled(false); } else { signOutButton.setEnabled(true); com.google.gct.login.ui.UsersListItem selectedUser = ((com.google.gct.login.ui.UsersListItem) (listModel.get(list.getSelectedIndex()))); if (!(selectedUser.isActiveUser())) { com.google.gct.login.GoogleLogin.getInstance().setActiveUser(selectedUser.getUserEmail()); } } } }
private android.telecom.Connection getOriginalConnection(android.telecom.Connection connection) { if (connection instanceof com.android.services.telephony.TelephonyConnection) { return ((com.android.services.telephony.TelephonyConnection) (connection)).getOriginalConnection(); } else { return null; } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testRemoveMMTelFeature() throws android.os.RemoteException { mTestImsServiceBinder.createImsFeature(android.telephony.ims.ImsServiceTest.TEST_SLOT_0, ImsFeature.MMTEL, mTestCallback); mTestImsServiceBinder.removeImsFeature(android.telephony.ims.ImsServiceTest.TEST_SLOT_0, ImsFeature.MMTEL); verify(mTestImsService.mMockMMTelFeature).notifyFeatureRemoved(eq(0)); verify(mTestImsService.mMockMMTelFeature).setImsFeatureStatusCallback(null); android.util.SparseArray<android.telephony.ims.feature.ImsFeature> features = mTestImsService.getImsFeatureMap(android.telephony.ims.ImsServiceTest.TEST_SLOT_0); junit.framework.Assert.assertNull(mTestImsService.getImsFeatureFromType(features, ImsFeature.MMTEL)); }
public int getRttAudioMode() { return mRttMode; }
public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_primitives s = new com.android.rs.test.ScriptC_primitives(pRS); pRS.setMessageHandler(mRsMessage); if (!(initializeGlobals(s))) { failTest(); } else { s.invoke_primitives_test(0, 0); pRS.finish(); waitForMessage(); } pRS.destroy(); }
@java.lang.Override protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec == null) { throw new java.security.spec.InvalidKeySpecException("keySpec == null"); } if (keySpec instanceof java.security.spec.RSAPrivateCrtKeySpec) { return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey(((java.security.spec.RSAPrivateCrtKeySpec) (keySpec))); } else if (keySpec instanceof java.security.spec.RSAPrivateKeySpec) { return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey(((java.security.spec.RSAPrivateKeySpec) (keySpec))); } else if (keySpec instanceof java.security.spec.PKCS8EncodedKeySpec) { return org.apache.harmony.xnet.provider.jsse.OpenSSLKey.getPrivateKey(((java.security.spec.PKCS8EncodedKeySpec) (keySpec)), NativeCrypto.EVP_PKEY_RSA); } throw new java.security.spec.InvalidKeySpecException(("Must use RSAPublicKeySpec or PKCS8EncodedKeySpec; was " + (keySpec.getClass().getName()))); }
private void startStateMachineUpdaters() { try { mNwService.registerObserver(mNetlinkTracker); } catch (android.os.RemoteException e) { android.util.Log.e(mTag, ("Couldn't register NetlinkTracker: " + (e.toString()))); } mMultinetworkPolicyTracker.start(); }
public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1); }
@java.lang.Override public com.android.ddmlib.SyncService getSyncService() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.SyncService syncService = new com.android.ddmlib.SyncService(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), this); if (syncService.openSync()) { return syncService; } return null; }
public void testSimpleDeserialize() { java.lang.String json2 = "{\"startLine\":245}"; com.android.ide.common.blame.SourceFragmentPositionRange range2 = gsonDeserializer.fromJson(json2, com.android.ide.common.blame.SourceFragmentPositionRange.class); assertEquals(new com.android.ide.common.blame.SourceFragmentPositionRange(245, (-1), (-1)), range2); }
@java.lang.Override public void getRulesAuthTable(java.lang.String callingPackage, com.android.internal.telephony.euicc.IGetRulesAuthTableCallback callback) { checkCallingPackage(callingPackage); }
private boolean isCurrentNetworkSufficient(android.net.wifi.WifiConfiguration network) { if (network == null) { localLog("No current connected network."); return false; } else { localLog(((("Current connected network: " + (network.SSID)) + " , ID: ") + (network.networkId))); } if (network.ephemeral) { localLog("Current network is an ephemeral one."); return false; } if (com.android.server.wifi.WifiConfigurationUtil.isConfigForOpenNetwork(network)) { localLog("Current network is a open one."); return false; } if (mWifiInfo.is24GHz()) { localLog("Current network is 2.4GHz."); return false; } int currentRssi = mWifiInfo.getRssi(); if ((mWifiInfo.is5GHz()) && (currentRssi < (mThresholdQualifiedRssi5))) { localLog((((("Current network band=" + (mWifiInfo.is5GHz() ? "5GHz" : "2.4GHz")) + ", RSSI[") + currentRssi) + "]-acceptable but not qualified.")); return false; } return true; }
void registerForNotification(int clientIf, java.lang.String address, int handle, boolean enable) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ((("registerForNotification() - address=" + address) + " enable: ") + enable)); java.lang.Integer connId = mClientMap.connIdByAddress(clientIf, address); if (connId != null) { android.util.Log.e(com.android.bluetooth.gatt.GattService.TAG, (("registerForNotification() - No connection for " + address) + "...")); return; } if (!(permissionCheck(connId, handle))) { if (com.android.bluetooth.gatt.GattService.VDBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, "writeDescriptor() - permission check failed!"); return; } gattClientRegisterForNotificationsNative(clientIf, address, handle, enable); }
private java.io.File getRootDir() { java.security.CodeSource source = getClass().getProtectionDomain().getCodeSource(); if (source != null) { java.net.URL location = source.getLocation(); try { java.io.File dir = new java.io.File(location.toURI()); assertTrue(dir.getPath(), dir.exists()); while (dir != null) { java.io.File settingsGradle = new java.io.File(dir, "settings.gradle"); if (settingsGradle.exists()) { return dir.getParentFile().getParentFile(); } java.io.File lint = new java.io.File(dir, "lint"); if ((lint.exists()) && (new java.io.File(lint, "cli").exists())) { return dir.getParentFile().getParentFile(); } dir = dir.getParentFile(); } return null; } catch (java.net.URISyntaxException e) { fail(e.getLocalizedMessage()); } } return null; }
@java.lang.Override public java.lang.String getName() { if (mNetworkRecommendationsEnabled) { return com.android.server.wifi.RecommendedNetworkEvaluator.TAG; } return ((com.android.server.wifi.RecommendedNetworkEvaluator.TAG) + "-") + (mExternalScoreEvaluator.getName()); }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); if (mHasFeature) { mUserId = mPrimaryUserId; installAppAsUser(com.android.cts.devicepolicy.DEVICE_ADMIN_APK, mUserId); if (!(setProfileOwner((((DEVICE_ADMIN_PKG) + "/") + (ADMIN_RECEIVER_TEST_CLASS)), mUserId, false))) { removeAdmin((((DEVICE_ADMIN_PKG) + "/") + (ADMIN_RECEIVER_TEST_CLASS)), mUserId); getDevice().uninstallPackage(com.android.cts.devicepolicy.DEVICE_ADMIN_PKG); fail("Failed to set profile owner"); } } }
public void putNextShort(short value) { checkType(short.class); (argumentIdx)++; frameBuf.putInt(((int) (value))); }
public android.telephony.CellIdentity getCellIdentity() { return mCellIdentity; }
void runThread() { ++(org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierDebuggee.threadRunCount); java.lang.System.out.println(("CountModifierDebuggee.startThread: threadRunCount=" + (org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierDebuggee.threadRunCount))); java.lang.Thread t = new java.lang.Thread(("TestThread-" + (org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierDebuggee.threadRunCount))); t.start(); try { t.join(); } catch (java.lang.InterruptedException e) { e.printStackTrace(); } }
public int sendto(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetAddress inetAddress, int port) throws android.system.ErrnoException, java.net.SocketException { return os.sendto(fd, bytes, byteOffset, byteCount, flags, inetAddress, port); }
public java.lang.String[] getIsimImpu() { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) return null; return info.getIsimImpu(getSubId()); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } }
com.android.ddmlib.RawImage getScreenshot(long timeout, java.util.concurrent.TimeUnit unit) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException;
public void addI8(android.support.v8.renderscript.Byte2 v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addI8(new android.renderscript.Byte2(v.x, v.y)); return; } addI8(v.x); addI8(v.y); }
private void syncViewerSelection() { org.eclipse.jface.viewers.ITreeContentProvider provider = ((org.eclipse.jface.viewers.ITreeContentProvider) (mTreeViewer.getContentProvider())); java.lang.Object input = mTreeViewer.getInput(); if (input == null) { return; } for (java.lang.Object cat : provider.getElements(input)) { java.lang.Object[] children = provider.getElements(cat); boolean allChecked = (children.length) > 0; for (java.lang.Object child : children) { if (child instanceof com.android.sdkuilib.internal.repository.core.PkgItem) { com.android.sdkuilib.internal.repository.core.PkgItem item = ((com.android.sdkuilib.internal.repository.core.PkgItem) (child)); boolean checked = item.isChecked(); allChecked &= checked; if (checked != (mTreeViewer.getChecked(item))) { if (checked) { if (!(mTreeViewer.getExpandedState(cat))) { mTreeViewer.setExpandedState(cat, true); } } checkAndExpandItem(item, checked, true, false); } } } if (allChecked != (mTreeViewer.getChecked(cat))) { mTreeViewer.setChecked(cat, allChecked); } } }
@org.junit.Test public void chooseSavedNetworkWithExternalScore() { java.lang.String[] ssids = new java.lang.String[]{ "\"test1\"" }; java.lang.String[] bssids = new java.lang.String[]{ "6c:f3:7f:ae:8c:f3" }; int[] freqs = new int[]{ 5200 }; java.lang.String[] caps = new java.lang.String[]{ "[WPA2-EAP-CCMP][ESS]" }; int[] securities = new int[]{ com.android.server.wifi.WifiConfigurationTestUtil.SECURITY_PSK }; int[] levels = new int[]{ (mThresholdQualifiedRssi5G) + 8 }; java.lang.Integer[] scores = new java.lang.Integer[]{ 120 }; boolean[] meteredHints = new boolean[]{ false }; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); android.net.wifi.WifiConfiguration[] savedConfigs = scanDetailsAndConfigs.getWifiConfigs(); savedConfigs[0].useExternalScores = true; com.android.server.wifi.WifiNetworkSelectorTestUtil.configureScoreCache(mScoreCache, scanDetails, scores, meteredHints); android.net.wifi.WifiConfiguration candidate = mExternalScoreEvaluator.evaluateNetworks(scanDetails, null, null, false, true, null); com.android.server.wifi.WifiConfigurationTestUtil.assertConfigurationEqual(savedConfigs[0], candidate); com.android.server.wifi.WifiNetworkSelectorTestUtil.verifySelectedScanResult(mWifiConfigManager, scanDetails.get(0).getScanResult(), candidate); }
public static com.android.utils.Pair<com.android.resources.ResourceType, java.lang.String> parseResource(java.lang.String url) { if (url.startsWith(com.android.SdkConstants.PREFIX_THEME_REF)) { java.lang.String remainder = url.substring(com.android.SdkConstants.PREFIX_THEME_REF.length()); int colon = url.indexOf(':'); if (colon != (-1)) { if ((remainder.indexOf('/', colon)) == (-1)) { remainder = (((remainder.substring(0, colon)) + (com.android.SdkConstants.RESOURCE_CLZ_ATTR)) + '/') + (remainder.substring(colon)); } url = (com.android.SdkConstants.PREFIX_RESOURCE_REF) + remainder; return com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource(url); } } return com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource(url); }
private void testTransitionSelection(boolean testOpen, boolean testNewTask, boolean bottomWallpaper, boolean topWallpaper, boolean topTranslucent, boolean testSlowStop, java.lang.String expectedTransit) throws java.lang.Exception { if ((isUiModeLockedToVrHeadset()) && (bottomWallpaper || topWallpaper)) { return; } java.lang.String bottomStartCmd = getAmStartCmd(android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME); if (bottomWallpaper) { bottomStartCmd += " --ez USE_WALLPAPER true"; } if (testSlowStop) { bottomStartCmd += " --ei STOP_DELAY 3000"; } executeShellCommand(bottomStartCmd); final java.lang.String topActivityName = (topTranslucent) ? android.server.cts.ActivityManagerTransitionSelectionTests.TRANSLUCENT_TOP_ACTIVITY_NAME : android.server.cts.ActivityManagerTransitionSelectionTests.TOP_ACTIVITY_NAME; final java.lang.String[] bottomActivityArray = new java.lang.String[]{ android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME }; final java.lang.String[] topActivityArray = new java.lang.String[]{ topActivityName }; mAmWmState.computeState(mDevice, bottomActivityArray); java.lang.String topStartCmd = getAmStartCmd(topActivityName); if (testNewTask) { topStartCmd += " -f 0x18000000"; } if (topWallpaper) { topStartCmd += " --ez USE_WALLPAPER true"; } if (!testOpen) { topStartCmd += " --ei FINISH_DELAY 1000"; } executeShellCommand(topStartCmd); java.lang.Thread.sleep(5000); if (testOpen) { mAmWmState.computeState(mDevice, topActivityArray); } else { mAmWmState.computeState(mDevice, bottomActivityArray); } assertEquals("Picked wrong transition", expectedTransit, mAmWmState.getWmState().getLastTransition()); }
private static void buildTreeItem(com.android.hierarchyviewerlib.models.EvaluateContrastModel model, final ViewNode child) { int dotIndex = child.name.lastIndexOf('.'); java.lang.String shortName = (dotIndex == (-1)) ? child.name : child.name.substring((dotIndex + 1)); java.lang.String text = ((shortName + ": \"") + (child.namedProperties.get("text:mText").value)) + "\""; org.eclipse.swt.widgets.TreeItem item = new org.eclipse.swt.widgets.TreeItem(com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sResultsTree, org.eclipse.swt.SWT.NONE); item.setText(com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.transformText(text, com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.MAX_NUM_CHARACTERS)); item.setImage(com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.getResultImage(model.getContrastResult())); com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sViewNodeForTreeItem.put(item, child); com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.buildTreeItemsForModel(model, item); }
private void setAudioFormat() { byte[] buffer = new byte[2]; java.lang.String audioParameter = "set_ARC_format="; java.lang.String keyValuePairs; buffer[0] = ((byte) (com.android.server.hdmi.RequestShortAudioDescriptorAction.mParamsBackup.length)); buffer[1] = ((byte) (mAvrPort)); keyValuePairs = audioParameter + (java.util.Arrays.toString(buffer)); keyValuePairs += java.util.Arrays.toString(com.android.server.hdmi.RequestShortAudioDescriptorAction.mParamsBackup); com.android.server.hdmi.HdmiLogger.debug(("keyValuePairs:" + keyValuePairs)); mCallback.updateSAD(keyValuePairs, isMultiChannelsSupported()); finish(); }
public void msync(long address, long byteCount, int flags) throws android.system.ErrnoException;
@org.junit.Test @java.lang.Runtime public void simpleName001() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(com.android.jack.reflect.ReflectTests.TEST001_WITHOUT_SHRINK_SCHEDULABLE).compileAndRunTest(); }
public boolean p2pServDiscCancelReq(java.lang.String id) { if ((com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.cancelServiceDiscovery(id); } else { return doBooleanCommand(("P2P_SERV_DISC_CANCEL_REQ " + id)); } }
@java.lang.Override @javax.annotation.CheckForNull public com.android.sched.vfs.VFS checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) throws com.android.sched.util.codec.ParsingException { try { java.security.Provider.Service service = messageDigestCodec.checkString(context, "SHA"); return new com.android.sched.vfs.CaseInsensitiveFS(codec.checkString(context, string), 2, 2, new com.android.sched.util.config.MessageDigestFactory(service), false); } catch (com.android.sched.vfs.WrongVFSFormatException e) { throw new com.android.sched.util.codec.ParsingException(e); } }
private void setCodecValue(int codecType, int sampleRate, int bitsPerSample, int channelMode, long codecSpecific1, long codecSpecific2, long codecSpecific3, long codecSpecific4) { android.util.Log.d(com.android.pmc.A2dpReceiver.TAG, ((((((((("SetCodecValue: Codec Type: " + codecType) + " sampleRate: ") + sampleRate) + " bitsPerSample: ") + bitsPerSample) + " Channel Mode: ") + channelMode) + " LDAC quality: ") + codecSpecific1)); if (mMute) return; android.bluetooth.BluetoothCodecConfig codecConfig = new android.bluetooth.BluetoothCodecConfig(codecType, android.bluetooth.BluetoothCodecConfig.CODEC_PRIORITY_HIGHEST, sampleRate, bitsPerSample, channelMode, codecSpecific1, codecSpecific2, codecSpecific3, codecSpecific4); if ((mBluetoothA2dp) != null) { android.util.Log.d(com.android.pmc.A2dpReceiver.TAG, "setCodecConfigPreference()"); mBluetoothA2dp.setCodecConfigPreference(codecConfig); } else { android.util.Log.e(com.android.pmc.A2dpReceiver.TAG, "mBluetoothA2dp is null. Codec is not set"); } }
@javax.annotation.Nonnull private com.android.jack.ir.ast.JExpression getSimplifiedExpression(@javax.annotation.Nonnull com.android.jack.ir.ast.JExpression exprToSimplify) { com.android.jack.ir.ast.JMethodBody body = ((com.android.jack.ir.ast.JMethodBody) (method.getBody())); assert body != null; com.android.jack.ir.ast.JBlock bodyBlock = body.getBlock(); bodyBlock.clear(); com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest(method); tr.append(new com.android.jack.transformations.request.AppendStatement(bodyBlock, exprToSimplify.makeStatement())); tr.commit(); com.android.jack.optimizations.ExpressionSimplifier.Simplifier s = new com.android.jack.optimizations.ExpressionSimplifier.Simplifier(); s.accept(method); org.junit.Assert.assertEquals(1, bodyBlock.getStatements().size()); com.android.jack.ir.ast.JStatement stmt = bodyBlock.getStatements().get(0); org.junit.Assert.assertTrue((stmt instanceof com.android.jack.ir.ast.JExpressionStatement)); com.android.jack.ir.ast.JExpression simplifiedExpr = ((com.android.jack.ir.ast.JExpressionStatement) (stmt)).getExpr(); org.junit.Assert.assertNotNull(simplifiedExpr); return simplifiedExpr; }
private static com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage createImage(int w, int h, org.eclipse.swt.graphics.Device device) { org.eclipse.swt.graphics.ImageData imageData = new org.eclipse.swt.graphics.ImageData(w, h, 32, new org.eclipse.swt.graphics.PaletteData(16711680, 65280, 255)); com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage swtReadyImage = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage(w, h, imageData, device); return swtReadyImage; }
public static long countBytes(java.lang.String s, boolean shortLength) throws java.io.UTFDataFormatException { long counter = 0; int strLen = s.length(); for (int i = 0; i < strLen; i++) { char c = s.charAt(i); if (c < '\u0080') { counter++; if (c == '\u0000') { counter++; } } else if (c < '\u0800') { counter += 2; } else { counter += 3; } } if (shortLength && (counter > 65535)) { throw new java.io.UTFDataFormatException("Size of the encoded string doesn't fit in two bytes"); } return counter; }
@org.junit.Before public void setUp() throws java.lang.Exception { mMockInvocationListener = org.easymock.EasyMock.createMock(com.android.tradefed.result.ITestInvocationListener.class); mTest = new com.android.tradefed.testtype.VtsMultiDeviceTest() { @java.lang.Override protected void updateVtsRunnerTestConfig(org.json.JSONObject jsonObject) { return; } @java.lang.Override protected com.android.tradefed.util.VtsPythonRunnerHelper createVtsPythonRunnerHelper() { return mVtsPythonRunnerHelper; } }; mTest.setBuild(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockBuildInfo()); mTest.setTestCasePath(com.android.tradefed.testtype.VtsMultiDeviceTestTest.TEST_CASE_PATH); mTest.setTestConfigPath(VtsMultiDeviceTest.DEFAULT_TESTCASE_CONFIG_PATH); }
@java.lang.Override public final void addOutput(byte[] data, int offset, int length) { if (!(isCancelled())) { java.lang.String s = new java.lang.String(data, offset, length, com.google.common.base.Charsets.UTF_8); if ((mUnfinishedLine) != null) { s = (mUnfinishedLine) + s; mUnfinishedLine = null; } mArray.clear(); int start = 0; do { int index = s.indexOf("\r\n", start); if (index == (-1)) { mUnfinishedLine = s.substring(start); break; } java.lang.String line = s.substring(start, index); if (mTrimLines) { line = line.trim(); } mArray.add(line); start = index + 2; } while (true ); if (!(mArray.isEmpty())) { java.lang.String[] lines = mArray.toArray(new java.lang.String[mArray.size()]); processNewLines(lines); } } }
private void checkFastNormalizeFloatFloat() { android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, -8691516666548268773L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.forEach_testFastNormalizeFloatFloat(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFastNormalizeFloatFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testFastNormalizeFloatFloat(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFastNormalizeFloatFloat: " + (e.toString()))); } }
public void setVar(int index, double v) { mRS.nScriptSetVarD(getID(mRS), index, v, mUseIncSupp); }
public byte readByte() { file.checkNotClosed(); libcore.io.NioBufferIterator.checkReadBounds(position, length, 1); byte result = libcore.io.Memory.peekByte(((address) + (position))); ++(position); return result; }
public static boolean checkForClass(@com.android.annotations.NonNull java.io.File apkFile, @com.android.annotations.NonNull java.lang.String expectedClassName) throws com.android.ide.common.process.ProcessException, java.io.IOException { java.io.File dexDump = com.android.build.gradle.integration.common.utils.SdkHelper.getDexDump(); com.android.ide.common.process.ProcessExecutor executor = new com.android.ide.common.process.DefaultProcessExecutor(new com.android.utils.StdLogger(StdLogger.Level.ERROR)); com.android.ide.common.process.ProcessInfoBuilder builder = new com.android.ide.common.process.ProcessInfoBuilder(); builder.setExecutable(dexDump); builder.addArgs(apkFile.getAbsolutePath()); java.util.List<java.lang.String> output = com.android.build.gradle.integration.common.utils.ApkHelper.runAndGetOutput(builder.createProcess(), executor); for (java.lang.String line : output) { java.util.regex.Matcher m = com.android.build.gradle.integration.common.utils.ApkHelper.PATTERN.matcher(line.trim()); if (m.matches()) { java.lang.String className = m.group(1); if (expectedClassName.equals(className)) { return true; } } } return false; }
public void testSocketChannel() throws java.lang.Exception { java.nio.channels.SocketChannel sc = java.nio.channels.SocketChannel.open(); sc.connect(server.getLocalAddress()); assertEquals(1, tagger.getLiveDescriptors().size()); sc.close(); assertEquals(java.util.Collections.EMPTY_MAP, tagger.getLiveDescriptors()); }
private java.lang.String getIccStateIntentString(com.android.internal.telephony.IccCardConstants.State state) { switch (state) { case ABSENT : return IccCardConstants.INTENT_VALUE_ICC_ABSENT; case PIN_REQUIRED : return IccCardConstants.INTENT_VALUE_ICC_LOCKED; case PUK_REQUIRED : return IccCardConstants.INTENT_VALUE_ICC_LOCKED; case NETWORK_LOCKED : return IccCardConstants.INTENT_VALUE_ICC_LOCKED; case READY : return IccCardConstants.INTENT_VALUE_ICC_READY; case NOT_READY : return IccCardConstants.INTENT_VALUE_ICC_NOT_READY; case PERM_DISABLED : return IccCardConstants.INTENT_VALUE_ICC_LOCKED; default : return IccCardConstants.INTENT_VALUE_ICC_UNKNOWN; } }
private static int getStoredEntryDataAlignment(java.lang.String entryName, int defaultAlignment) { if (defaultAlignment <= 0) { return 0; } if (entryName.endsWith(".so")) { return 4096; } else { return defaultAlignment; } }
public void testCallHierarchyIterator() { com.android.tools.perflib.vmtrace.Call topLevel = reconstructSampleCallStack(); java.util.List<java.lang.Integer> expectedSequence = java.util.Arrays.asList(255, 1, 2, 3, 3, 5, 6); int i = 0; java.util.Iterator<com.android.tools.perflib.vmtrace.Call> it = topLevel.getCallHierarchyIterator(); while (it.hasNext()) { com.android.tools.perflib.vmtrace.Call c = it.next(); long expectedMethodId = expectedSequence.get((i++)); long actualMethodId = c.getMethodId(); assertEquals(expectedMethodId, actualMethodId); } }
public java.lang.String getShortDescription() { java.lang.String name = mDescriptor.getUiName(); java.lang.String attr = getDescAttribute(); if (attr != null) { if (attr.contains(name)) { return attr; } else { return java.lang.String.format("%1$s (%2$s)", attr, name); } } return name; }
public void testChannelWrite_exceptionOnCloseWhenBlocked() throws java.lang.Exception { testChannelWrite_exceptionOnCloseWhenBlocked(libcore.java.nio.channels.FileIOInterruptTest.ChannelWriter.Method.WRITE); }
@org.junit.Test public void testGetDefaultSmdpAddress() { int channel = mockLogicalChannelResponses("BF3C148008534D44502E434F4D8108736D64732E636F6D9000"); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<java.lang.String> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.getDefaultSmdpAddress(resultCaptor, mHandler); resultCaptor.await(); assertEquals("SMDP.COM", resultCaptor.result); verifyStoreData(channel, "BF3C00"); }
@org.junit.Test public void test_readAllLine$Path$Charset_NPE() throws java.io.IOException { try { java.nio.file.Files.readAllLines(null, java.nio.charset.StandardCharsets.UTF_16); fail(); } catch (java.lang.NullPointerException expected) { } try { java.nio.file.Files.readAllLines(filesSetup.getDataFilePath(), null); fail(); } catch (java.lang.NullPointerException expected) { } }
@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressor()) == null) || (!(mNm.getEffectsSuppressor().equals(MockListener.COMPONENT_NAME)))) { status = PASS; } else { logFail(); status = RETEST; delay(); } } next(); }
public final void onSmsReceived(int token, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException("Feature not ready."); } try { mListener.onSmsReceived(token, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, ("Can not deliver sms: " + (e.getMessage()))); acknowledgeSms(token, 0, android.telephony.ims.stub.ImsSmsImplBase.DELIVER_STATUS_ERROR_GENERIC); } } }
public static java.lang.String getSessionId() { synchronized(android.telecom.Log.sSingletonSync) { if ((android.telecom.Log.sSessionManager) != null) { return android.telecom.Log.getSessionManager().getSessionId(); } else { return ""; } } }
public static void computeFract(android.renderscript.cts.TestFract.ArgumentsFloatFloat args) { args.ulf = 4; args.ulfRelaxed = 12; float floor = ((float) (java.lang.StrictMath.floor(args.inV))); args.out = ((float) (java.lang.StrictMath.min(((args.inV) - floor), 0.99999994F))); }
@org.junit.Test public void testLamba015() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA015).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
public static void removeDeviceForward(com.android.ddmlib.IDevice device) { synchronized(com.android.hierarchyviewerlib.device.DeviceBridge.devicePortMap) { final java.lang.Integer localPort = com.android.hierarchyviewerlib.device.DeviceBridge.devicePortMap.get(device); if (localPort != null) { try { device.removeForward(localPort, com.android.hierarchyviewerlib.device.DeviceBridge.DEFAULT_SERVER_PORT); com.android.hierarchyviewerlib.device.DeviceBridge.devicePortMap.remove(device); } catch (com.android.ddmlib.TimeoutException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DeviceBridge.TAG, ("Timeout removing port forwarding for " + device)); } catch (com.android.ddmlib.AdbCommandRejectedException e) { } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DeviceBridge.TAG, java.lang.String.format("Failed to remove forward for device %1$s: %2$s", device, e.getMessage())); } } } }
@java.lang.Override public int getBasicConstraints() { if ((org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_check_ca(mContext)) != 1) { return -1; } final int pathLen = org.apache.harmony.xnet.provider.jsse.NativeCrypto.get_X509_ex_pathlen(mContext); if (pathLen == (-1)) { return java.lang.Integer.MAX_VALUE; } return pathLen; }
@java.lang.Override @javax.annotation.Nonnull public void libToExe(@javax.annotation.Nonnull java.io.File in, @javax.annotation.Nonnull java.io.File out, boolean zipFile) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add("java"); args.add("-cp"); args.add(jackPrebuilt.getAbsolutePath()); args.add("--verbose"); args.add(verbosityLevel.name()); if ((incrementalFolder) != null) { args.add("--incremental-folder"); args.add(incrementalFolder.getAbsolutePath()); } args.add(com.android.jack.Main.class.getName()); for (java.io.File res : resImport) { args.add("--import-resource"); args.add(res.getPath()); } if (withDebugInfos) { args.add("-D"); args.add("jack.dex.optimize=false"); } else { args.add("-D"); args.add("jack.dex.optimize=true"); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); args.add("--import"); args.add(in.getAbsolutePath()); for (java.io.File staticLib : staticLibs) { args.add("--import"); args.add(staticLib.getAbsolutePath()); } if (zipFile) { args.add("--output-dex-zip"); } else { args.add("--output-dex"); } args.add(out.getAbsolutePath()); com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(outRedirectStream); exec.setOut(errRedirectStream); exec.setVerbose(isVerbose); if (!(exec.run())) { throw new java.lang.RuntimeException("Jack compiler exited with an error"); } }
@java.lang.Override public java.lang.String toString() { return title; }
public void iccCloseLogicalChannel(int channel, android.os.Message response) { loglocal(("Close Logical Channel: " + channel)); mCi.iccCloseLogicalChannel(channel, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_CLOSE_LOGICAL_CHANNEL_DONE, response)); }
private void playUri(final android.net.Uri uri, long timeToPlayMs, int usage, int contentType) throws java.lang.Exception { android.media.MediaPlayer mp = new android.media.MediaPlayer(); assertNotNull(mp); mp.setDataSource(mContext, uri); mp.setAudioAttributes(new android.media.AudioAttributes.Builder().setUsage(usage).setContentType(contentType).build()); mp.prepare(); mp.start(); java.lang.Thread.sleep(timeToPlayMs); mp.stop(); mp.release(); java.lang.Thread.sleep(timeToPlayMs); }
public boolean hasDualConstants() { return (secondIndexType) != (IndexType.NONE); }
static android.net.ip.IpReachabilityMonitor.Dependencies makeDefault(android.content.Context context, java.lang.String iface) { final java.lang.String lockName = ((android.net.ip.IpReachabilityMonitor.TAG) + ".") + iface; final android.os.PowerManager pm = ((android.os.PowerManager) (context.getSystemService(Context.POWER_SERVICE))); final android.os.PowerManager.WakeLock lock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, lockName); return new android.net.ip.IpReachabilityMonitor.Dependencies() { public void acquireWakeLock(long durationMs) { lock.acquire(durationMs); } }; }
public void setAdvertisingData(android.bluetooth.le.AdvertiseData advertiseData) { try { mGatt.setAdvertisingData(mAdvertiserId, advertiseData); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, "remote exception - ", e); } }
private boolean maybeSendVoicemailNotificationUsingDefaultDialer(java.lang.Integer count, java.lang.String number, android.app.PendingIntent pendingIntent, boolean isSettingsIntent, android.os.UserHandle userHandle) { if (shouldManageNotificationThroughDefaultDialer(userHandle)) { android.content.Intent intent = getShowVoicemailIntentForDefaultDialer(userHandle); intent.setFlags(Intent.FLAG_RECEIVER_FOREGROUND); intent.setAction(TelephonyManager.ACTION_SHOW_VOICEMAIL_NOTIFICATION); if (count != null) { intent.putExtra(TelephonyManager.EXTRA_NOTIFICATION_COUNT, count); } if ((count == null) || (count > 0)) { if (!(android.text.TextUtils.isEmpty(number))) { intent.putExtra(TelephonyManager.EXTRA_VOICEMAIL_NUMBER, number); } if (pendingIntent != null) { intent.putExtra((isSettingsIntent ? android.telephony.TelephonyManager.EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT : android.telephony.TelephonyManager.EXTRA_CALL_VOICEMAIL_INTENT), pendingIntent); } } mContext.sendBroadcastAsUser(intent, userHandle, android.Manifest.permission.READ_PHONE_STATE); return true; } return false; }
@java.lang.Override public void hold(java.lang.String callId, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startSession(sessionInfo, android.telecom.ConnectionService.SESSION_HOLD); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_HOLD, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }
public void testAES_ECB_NoPadding_IncrementalUpdate_Success() throws java.lang.Exception { javax.crypto.SecretKey key = new javax.crypto.spec.SecretKeySpec(libcore.javax.crypto.CipherTest.AES_128_KEY, "AES"); javax.crypto.Cipher c = javax.crypto.Cipher.getInstance("AES/ECB/NoPadding"); c.init(javax.crypto.Cipher.ENCRYPT_MODE, key); for (int i = 0; i < ((libcore.javax.crypto.CipherTest.AES_128_ECB_PKCS5Padding_TestVector_1_Plaintext_Padded.length) - 1); i++) { final byte[] outputFragment = c.update(libcore.javax.crypto.CipherTest.AES_128_ECB_PKCS5Padding_TestVector_1_Plaintext_Padded, i, 1); if (outputFragment != null) { assertEquals(0, outputFragment.length); } } final byte[] output = c.doFinal(libcore.javax.crypto.CipherTest.AES_128_ECB_PKCS5Padding_TestVector_1_Plaintext_Padded, ((libcore.javax.crypto.CipherTest.AES_128_ECB_PKCS5Padding_TestVector_1_Plaintext_Padded.length) - 1), 1); assertNotNull(output); assertEquals(libcore.javax.crypto.CipherTest.AES_128_ECB_PKCS5Padding_TestVector_1_Plaintext_Padded.length, output.length); assertTrue(java.util.Arrays.equals(libcore.javax.crypto.CipherTest.AES_128_ECB_PKCS5Padding_TestVector_1_Encrypted, output)); }
@java.lang.Override protected int compareTo0(@javax.annotation.Nonnull com.android.jack.dx.rop.cst.Constant other) { assert other instanceof com.android.jack.dx.rop.cst.CstMethodHandleRef; int cmp = kind.compareTo(((com.android.jack.dx.rop.cst.CstMethodHandleRef) (other)).kind); if (cmp != 0) { return cmp; } return memberRef.compareTo(((com.android.jack.dx.rop.cst.CstMethodHandleRef) (other)).memberRef); }
@java.lang.Deprecated @com.googlecode.android_scripting.rpc.Rpc(description = "Get Bluetooth Gatt Services") public java.util.ArrayList<java.lang.String> gattClientGetDiscoveredDescriptorUuids(@com.googlecode.android_scripting.rpc.RpcParameter(name = "index") java.lang.Integer index, @com.googlecode.android_scripting.rpc.RpcParameter(name = "serviceIndex") java.lang.Integer serviceIndex, @com.googlecode.android_scripting.rpc.RpcParameter(name = "characteristicUuid") java.lang.String characteristicUuid) throws java.lang.Exception { if ((mBluetoothGattDiscoveredServicesList.get(index)) != null) { if ((mBluetoothGattDiscoveredServicesList.get(index).get(serviceIndex)) != null) { android.bluetooth.BluetoothGattService service = mBluetoothGattDiscoveredServicesList.get(index).get(serviceIndex); java.util.UUID cUuid = java.util.UUID.fromString(characteristicUuid); if ((service.getCharacteristic(cUuid)) != null) { java.util.ArrayList<java.lang.String> uuidList = new java.util.ArrayList<java.lang.String>(); for (android.bluetooth.BluetoothGattDescriptor mDesc : service.getCharacteristic(cUuid).getDescriptors()) { uuidList.add(mDesc.getUuid().toString()); } return uuidList; } else { throw new java.lang.Exception(("Invalid characeristicUuid : " + characteristicUuid)); } } else { throw new java.lang.Exception(("Invalid serviceIndex input:" + index)); } } else { throw new java.lang.Exception(("Invalid index input:" + index)); } }
@java.lang.Override public void mouseClicked(java.awt.event.MouseEvent mouseEvent) { list.updateUI(); if (!(valueChanged)) { int index = list.locationToIndex(mouseEvent.getPoint()); if (index >= 0) { boolean inPlayUrl = usersListCellRenderer.inPlayConsoleUrl(mouseEvent.getPoint(), index); if (inPlayUrl) { com.intellij.ide.BrowserUtil.browse(com.google.gct.login.ui.GoogleLoginUsersPanel.PLAY_CONSOLE_URL); } else { boolean inCloudUrl = usersListCellRenderer.inCloudConsoleUrl(mouseEvent.getPoint(), index); if (inCloudUrl) { com.intellij.ide.BrowserUtil.browse(com.google.gct.login.ui.GoogleLoginUsersPanel.CLOUD_CONSOLE_URL); } } } } valueChanged = false; }
public java.lang.String getCardId() { if ((mCardId) != null) { return mCardId; } else if ((mUiccProfile) != null) { return mUiccProfile.getIccId(); } else { return null; } }
protected boolean setUnmeteredNetwork() throws java.lang.Exception { final android.net.NetworkInfo info = mCm.getActiveNetworkInfo(); assertNotNull("Could not get active network", info); if (!(mCm.isActiveNetworkMetered())) { android.util.Log.d(com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase.TAG, ("Active network is not metered: " + info)); } else if ((info.getType()) == (android.net.ConnectivityManager.TYPE_WIFI)) { android.util.Log.i(com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase.TAG, ("Setting active WI-FI network as not metered: " + info)); setWifiMeteredStatus(false); } else { android.util.Log.d(com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase.TAG, ("Active network cannot be set to un-metered: " + info)); return false; } assertActiveNetworkMetered(false); return true; }
@org.junit.Test public void testTransportModeTransformBinderDeath() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI), anyInt(), anyInt()); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail("Expected IllegalArgumentException on attempt to access deleted resource"); } catch (java.lang.IllegalArgumentException expected) { } }
private void checkFmaxFloat2Float2Float2() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 9054100515228441726L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 9054100515228441726L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testFmaxFloat2Float2Float2(inX, out); verifyResultsFmaxFloat2Float2Float2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFmaxFloat2Float2Float2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testFmaxFloat2Float2Float2(inX, out); verifyResultsFmaxFloat2Float2Float2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFmaxFloat2Float2Float2: " + (e.toString()))); } }
@org.junit.Test public void testInterfaceThis() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_51).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }
private void checkDegreesFloat2Float2() { android.renderscript.Allocation inValue = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 550005316802551612L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testDegreesFloat2Float2(inValue, out); verifyResultsDegreesFloat2Float2(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testDegreesFloat2Float2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testDegreesFloat2Float2(inValue, out); verifyResultsDegreesFloat2Float2(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testDegreesFloat2Float2: " + (e.toString()))); } }
@java.lang.Override public final int startActivityAsUser(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int startFlags, android.app.ProfilerInfo profilerInfo, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller("startActivity"); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, "startActivity", null); return mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, startFlags, profilerInfo, null, null, bOptions, false, userId, null, null, "startActivityAsUser"); }
@org.junit.Test public void testUpdate_oneScored_oneUnscored() { when(mNetworkScoreCache.isScoredNetwork(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL.getScanResult())).thenReturn(true); when(mNetworkScoreCache.isScoredNetwork(com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL.getScanResult())).thenReturn(false); mRecommendedNetworkEvaluator.update(com.google.android.collect.Lists.newArrayList(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL, com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL)); verify(mNetworkScoreManager).requestScores(mNetworkKeyArrayCaptor.capture()); assertEquals(1, mNetworkKeyArrayCaptor.getValue().length); android.net.NetworkKey expectedNetworkKey = new android.net.NetworkKey(new android.net.WifiKey(com.android.server.wifi.util.ScanResultUtil.createQuotedSSID(com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL.getSSID()), com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL.getBSSIDString())); assertEquals(expectedNetworkKey, mNetworkKeyArrayCaptor.getValue()[0]); }
@org.junit.Test public void testMultipleDefaults_superclass_right() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_50).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }
@com.android.annotations.NonNull private static com.sun.org.apache.xml.internal.serialize.OutputFormat getPrettyPrintFormat() { com.sun.org.apache.xml.internal.serialize.OutputFormat format = new com.sun.org.apache.xml.internal.serialize.OutputFormat(); format.setLineWidth(120); format.setIndenting(true); format.setIndent(4); format.setEncoding("UTF-8"); format.setOmitComments(true); return format; }
void cancel();
void multiplyByPositiveInt(int w) { java.math.NativeBN.BN_mul_word(this.bignum, w); }
private void ensureKeystoreOperationInitialized() { if ((mMainDataStreamer) != null) { return; } if ((mKey) == null) { throw new java.lang.IllegalStateException("Not initialized"); } android.security.keymaster.KeymasterArguments keymasterInputArgs = new android.security.keymaster.KeymasterArguments(); keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_ALGORITHM, mAlgorithm); keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_BLOCK_MODE, mBlockMode); keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_PADDING, mPadding); addAlgorithmSpecificParametersToBegin(keymasterInputArgs); android.security.keymaster.KeymasterArguments keymasterOutputArgs = new android.security.keymaster.KeymasterArguments(); android.security.keymaster.OperationResult opResult = mKeyStore.begin(mKey.getAlias(), (mEncrypting ? android.security.keymaster.KeymasterDefs.KM_PURPOSE_ENCRYPT : android.security.keymaster.KeymasterDefs.KM_PURPOSE_DECRYPT), true, keymasterInputArgs, mAdditionalEntropyForBegin, keymasterOutputArgs); mAdditionalEntropyForBegin = null; if (opResult == null) { throw new android.security.KeyStoreConnectException(); } else if ((opResult.resultCode) != (KeyStore.NO_ERROR)) { throw new android.security.CryptoOperationException("Failed to start keystore operation", android.security.KeymasterUtils.getExceptionForKeymasterError(opResult.resultCode)); } if ((opResult.token) == null) { throw new android.security.CryptoOperationException("Keystore returned null operation token"); } mOperationToken = opResult.token; loadAlgorithmSpecificParametersFromBeginResult(keymasterOutputArgs); mFirstOperationInitiated = true; mMainDataStreamer = new android.security.KeyStoreCryptoOperationChunkedStreamer(new android.security.KeyStoreCryptoOperationChunkedStreamer.MainDataStream(mKeyStore, opResult.token)); }
@com.android.annotations.NonNull public java.util.Collection<java.io.File> getNdkOutputDirectories() { return ndkOutputDirectories; }
boolean onMediaButton(int type) { if (hasAnyCalls()) { com.android.server.telecom.Call ringingCall = getFirstCallWithState(CallState.RINGING); if ((HeadsetMediaButton.SHORT_PRESS) == type) { if (ringingCall == null) { com.android.server.telecom.Call callToHangup = getFirstCallWithState(CallState.RINGING, CallState.DIALING, CallState.PULLING, CallState.ACTIVE, CallState.ON_HOLD); android.telecom.Log.addEvent(callToHangup, LogUtils.Events.INFO, "media btn short press - end call."); if (callToHangup != null) { callToHangup.disconnect(); return true; } } else { ringingCall.answer(VideoProfile.STATE_AUDIO_ONLY); return true; } } else if ((HeadsetMediaButton.LONG_PRESS) == type) { if (ringingCall != null) { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, "media btn long press - reject"); ringingCall.reject(false, null); } else { android.telecom.Log.addEvent(getForegroundCall(), LogUtils.Events.INFO, "media btn long press - mute"); mCallAudioManager.toggleMute(); } return true; } } return false; }
public java.net.URL getEntryUrlOrNull(java.lang.String entryName) { if ((libcore.io.ClassPathURLStreamHandler.findEntryWithDirectoryFallback(jarFile, entryName)) != null) { try { return new java.net.URL("jar", null, (-1), (((fileUri) + "!/") + entryName), this); } catch (java.net.MalformedURLException e) { throw new java.lang.RuntimeException("Invalid entry name", e); } } return null; }
private static org.eclipse.jdt.core.IClasspathContainer allocateLibraryContainer(org.eclipse.jdt.core.IJavaProject javaProject) { final org.eclipse.core.resources.IProject iProject = javaProject.getProject(); com.android.ide.eclipse.adt.internal.sdk.ProjectState state = com.android.ide.eclipse.adt.internal.sdk.Sdk.getProjectState(iProject); if (state == null) { return null; } java.util.List<org.eclipse.jdt.core.IClasspathEntry> entries = new java.util.ArrayList<org.eclipse.jdt.core.IClasspathEntry>(); java.util.Set<java.io.File> jarFiles = new java.util.HashSet<java.io.File>(); java.util.Set<org.eclipse.core.resources.IProject> refProjects = new java.util.HashSet<org.eclipse.core.resources.IProject>(); java.util.List<org.eclipse.core.resources.IProject> libProjects = state.getFullLibraryProjects(); for (org.eclipse.core.resources.IProject libProject : libProjects) { com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getDependencyListFromClasspath(libProject, refProjects, jarFiles, true); } com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.processReferencedProjects(iProject, refProjects, jarFiles); com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getJarListFromLibsFolder(iProject, jarFiles); for (org.eclipse.core.resources.IProject p : refProjects) { entries.add(org.eclipse.jdt.core.JavaCore.newProjectEntry(p.getFullPath(), true)); } entries.addAll(com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.convertJarsToClasspathEntries(iProject, jarFiles)); return com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.allocateContainer(javaProject, entries, new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.AdtConstants.CONTAINER_PRIVATE_LIBRARIES), "Android Private Libraries"); }
@java.lang.Override public void run() { if ((mLatch) != null) { mResult = mCache.get("foo", new com.android.ide.common.caching.CreatingCache.QueryListener() { @java.lang.Override public void onQueryState(@com.android.annotations.NonNull com.android.ide.common.caching.CreatingCache.State state) { mLatch.countDown(); } }); } else { mResult = mCache.get("foo"); } }
private static void longToDouble() { Main.assertDoubleEquals(1.0, Main.$opt$LongToDouble(1L)); Main.assertDoubleEquals(0.0, Main.$opt$LongToDouble(0L)); Main.assertDoubleEquals((-1.0), Main.$opt$LongToDouble((-1L))); Main.assertDoubleEquals(51.0, Main.$opt$LongToDouble(51L)); Main.assertDoubleEquals((-51.0), Main.$opt$LongToDouble((-51L))); Main.assertDoubleEquals(2.147483647E9, Main.$opt$LongToDouble(2147483647L)); Main.assertDoubleEquals((-2.147483647E9), Main.$opt$LongToDouble((-2147483647L))); Main.assertDoubleEquals((-2.147483648E9), Main.$opt$LongToDouble((-2147483648L))); Main.assertDoubleEquals(2.147483648E9, Main.$opt$LongToDouble(2147483648L)); Main.assertDoubleEquals((-2.147483649E9), Main.$opt$LongToDouble((-2147483649L))); Main.assertDoubleEquals(4.294967296E9, Main.$opt$LongToDouble(4294967296L)); Main.assertDoubleEquals((-4.294967296E9), Main.$opt$LongToDouble((-4294967296L))); Main.assertDoubleEquals(1.40739635871745E14, Main.$opt$LongToDouble(140739635871745L)); Main.assertDoubleEquals((-1.40739635871745E14), Main.$opt$LongToDouble((-140739635871745L))); Main.assertDoubleEquals(9.223372036854776E18, Main.$opt$LongToDouble(9223372036854775807L)); Main.assertDoubleEquals((-9.223372036854776E18), Main.$opt$LongToDouble((-9223372036854775807L))); Main.assertDoubleEquals((-9.223372036854776E18), Main.$opt$LongToDouble(-9223372036854775808L)); }
@org.junit.Before public void setup() throws java.lang.Exception { android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, "setup"); killServices(); java.io.File applicationDataDir = new java.io.File(android.support.test.InstrumentationRegistry.getTargetContext().getApplicationInfo().dataDir); com.android.framework.multidexlegacytestservices.test2.ServicesTests.clearDirContent(applicationDataDir); targetFilesDir = android.support.test.InstrumentationRegistry.getTargetContext().getFilesDir(); android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, "setup done"); }
public void registerJavaArtifact(@com.android.annotations.NonNull java.lang.String name, @com.android.annotations.NonNull com.android.build.gradle.api.BaseVariant variant, @com.android.annotations.NonNull java.lang.String assembleTaskName, @com.android.annotations.NonNull java.lang.String javaCompileTaskName, @com.android.annotations.NonNull java.util.Collection<java.io.File> generatedSourceFolders, @com.android.annotations.NonNull java.lang.Iterable<java.lang.String> ideSetupTaskNames, @com.android.annotations.NonNull org.gradle.api.artifacts.Configuration configuration, @com.android.annotations.NonNull java.io.File classesFolder, @com.android.annotations.NonNull java.io.File javaResourcesFolder, @com.android.annotations.Nullable com.android.builder.model.SourceProvider sourceProvider) { com.android.builder.model.ArtifactMetaData artifactMetaData = extraArtifactMap.get(name); if (artifactMetaData == null) { throw new java.lang.IllegalArgumentException("Artifact with name $name is not yet registered. Use registerArtifactType()"); } if ((artifactMetaData.getType()) != (com.android.builder.model.ArtifactMetaData.TYPE_JAVA)) { throw new java.lang.IllegalArgumentException("Artifact with name $name is not of type JAVA"); } com.android.builder.model.JavaArtifact artifact = new com.android.build.gradle.internal.model.JavaArtifactImpl(name, assembleTaskName, javaCompileTaskName, ideSetupTaskNames, generatedSourceFolders, classesFolder, javaResourcesFolder, new com.android.build.gradle.internal.ConfigurationDependencies(configuration), sourceProvider, null); extraJavaArtifacts.put(variant.getName(), artifact); }
static java.nio.ByteBuffer getAndroidManifestFromApk(java.util.List<com.android.apksig.internal.zip.CentralDirectoryRecord> cdRecords, com.android.apksig.util.DataSource lhfSection) throws com.android.apksig.apk.ApkFormatException, com.android.apksig.zip.ZipFormatException, java.io.IOException { com.android.apksig.internal.zip.CentralDirectoryRecord androidManifestCdRecord = null; for (com.android.apksig.internal.zip.CentralDirectoryRecord cdRecord : cdRecords) { if (com.android.apksig.ApkSigner.ANDROID_MANIFEST_ZIP_ENTRY_NAME.equals(cdRecord.getName())) { androidManifestCdRecord = cdRecord; break; } } if (androidManifestCdRecord == null) { throw new com.android.apksig.apk.ApkFormatException(("Missing " + (com.android.apksig.ApkSigner.ANDROID_MANIFEST_ZIP_ENTRY_NAME))); } return java.nio.ByteBuffer.wrap(com.android.apksig.internal.zip.LocalFileRecord.getUncompressedData(lhfSection, androidManifestCdRecord, lhfSection.size())); }
@org.junit.Test public void testProcessRunTimeout() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.TIMED_OUT); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(com.android.tradefed.util.VtsPythonRunnerHelperTest.mPythonCmd, commandResult, com.android.tradefed.util.VtsPythonRunnerHelperTest.mTestTimeout); assertEquals(interruptMessage, null); assertEquals(commandResult.getStatus(), CommandStatus.TIMED_OUT); }
@java.lang.Override public void exit() { removeMessages(com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT); super.exit(); }
@java.lang.Override void test() { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressor()) == null) || (!(mNm.getEffectsSuppressor().equals(MockListener.COMPONENT_NAME)))) { status = PASS; } else { status = FAIL; } } next(); } }); delay(); }
@java.lang.Override public java.lang.String parseCurrency(android.icu.dev.test.format.DataDrivenNumberFormatTestData tuple) { android.icu.text.DecimalFormat_ICU58_Android fmt = createDecimalFormat(tuple); java.text.ParsePosition ppos = new java.text.ParsePosition(0); CurrencyAmount currAmt = fmt.parseCurrency(tuple.parse, ppos); if ((ppos.getIndex()) == 0) { return (("Parse failed; got " + currAmt) + ", but expected ") + (tuple.output); } if (tuple.output.equals("fail")) { return null; } java.lang.Number expected = android.icu.dev.test.format.NumberFormatDataDrivenTest.toNumber(tuple.output); java.lang.Number actual = currAmt.getNumber(); if ((((expected.doubleValue()) != (actual.doubleValue())) && (!(java.lang.Double.isNaN(expected.doubleValue())))) && (!(java.lang.Double.isNaN(expected.doubleValue())))) { return (("Expected: " + expected) + ", got: ") + actual; } if (!(tuple.outputCurrency.equals(currAmt.getCurrency().toString()))) { return (("Expected currency: " + (tuple.outputCurrency)) + ", got: ") + (currAmt.getCurrency()); } return null; }
private void onDeviceAvailable(byte capabilities, long hiSyncId, byte[] address) { com.android.bluetooth.hearingaid.HearingAidStackEvent event = new com.android.bluetooth.hearingaid.HearingAidStackEvent(HearingAidStackEvent.EVENT_TYPE_DEVICE_AVAILABLE); event.device = getDevice(address); event.valueInt1 = capabilities; event.valueLong2 = hiSyncId; if (com.android.bluetooth.hearingaid.HearingAidNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidNativeInterface.TAG, ("onDeviceAvailable: " + event)); } sendMessageToService(event); }
private void checkCospiFloatFloat() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, -4590295257071997532L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.forEach_testCospiFloatFloat(in, out); verifyResultsCospiFloatFloat(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testCospiFloatFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testCospiFloatFloat(in, out); verifyResultsCospiFloatFloat(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testCospiFloatFloat: " + (e.toString()))); } }
void deviceConnected(java.lang.String bdaddr, boolean absoluteVolume) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ((("deviceConnected: bdaddr=" + bdaddr) + " absoluteVolume=") + absoluteVolume)); mAudioManager.avrcpSupportsAbsoluteVolume(bdaddr, absoluteVolume); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.AVRCP); }
void dumpProto(com.android.bluetooth.btservice.BluetoothProto.BluetoothLog proto) { synchronized(mScanEvents) { for (com.android.bluetooth.btservice.BluetoothProto.ScanEvent event : mScanEvents) { proto.addScanEvent(event); } } }
@java.lang.Override public void invokeOemRilRequestRaw(byte[] data, android.os.Message response) { android.hardware.radio.deprecated.V1_0.IOemHook oemHookProxy = getOemHookProxy(response); if (oemHookProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_OEM_HOOK_RAW, response, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "[") + (com.android.internal.telephony.uicc.IccUtils.bytesToHexString(data))) + "]")); } try { oemHookProxy.sendRequestRaw(rr.mSerial, com.android.internal.telephony.RIL.primitiveArrayToArrayList(data)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "invokeOemRilRequestStrings", e); } } }
@org.junit.Test public void testOemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); assertFalse(nc.hasUnwantedCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); android.net.NetworkCapabilities nr = new android.net.NetworkCapabilities(); nr.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); nr.maybeMarkCapabilitiesRestricted(); assertTrue(nr.satisfiedByNetworkCapabilities(nc)); assertFalse(nr.satisfiedByNetworkCapabilities(new android.net.NetworkCapabilities())); }
public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }
private void processLockedState() { synchronized(mLock) { if ((mUiccApplication) == null) { return; } com.android.internal.telephony.IccCardStatus.PinState pin1State = mUiccApplication.getPin1State(); if (pin1State == (com.android.internal.telephony.IccCardStatus.PinState.PINSTATE_ENABLED_PERM_BLOCKED)) { setExternalState(State.PERM_DISABLED); return; } com.android.internal.telephony.IccCardApplicationStatus.AppState appState = mUiccApplication.getState(); switch (appState) { case APPSTATE_PIN : mPinLockedRegistrants.notifyRegistrants(); setExternalState(State.PIN_REQUIRED); break; case APPSTATE_PUK : setExternalState(State.PUK_REQUIRED); break; } } }
private void testConnectViaDirectProxyToHttps(libcore.java.net.URLConnectionTest.ProxyConfig proxyConfig) throws java.lang.Exception { TestSSLContext testSSLContext = createDefaultTestSSLContext(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), false); server.enqueue(new com.google.mockwebserver.MockResponse().setBody("this response comes via HTTPS")); server.play(); java.net.URL url = server.getUrl("/foo"); javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (proxyConfig.connect(server, url))); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); assertContent("this response comes via HTTPS", connection); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); assertEquals("GET /foo HTTP/1.1", request.getRequestLine()); }
private static boolean startsWithMinusSign(java.lang.CharSequence cs, java.lang.String minusSign) { if ((cs.length()) < (minusSign.length())) { return false; } for (int i = 0; i < (minusSign.length()); ++i) { if ((minusSign.charAt(i)) != (cs.charAt(i))) { return false; } } return true; }
@com.android.internal.annotations.VisibleForTesting public static android.net.NetworkStats javaReadNetworkStatsDetail(java.io.File detailPath, int limitUid, java.lang.String[] limitIfaces, int limitTag) throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 24); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); int idx = 1; int lastIdx = 1; com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(detailPath)); reader.finishLine(); while (reader.hasMoreData()) { idx = reader.nextInt(); if (idx != (lastIdx + 1)) { throw new java.net.ProtocolException(((("inconsistent idx=" + idx) + " after lastIdx=") + lastIdx)); } lastIdx = idx; entry.iface = reader.nextString(); entry.tag = kernelToTag(reader.nextString()); entry.uid = reader.nextInt(); entry.set = reader.nextInt(); entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if ((((limitIfaces == null) || (com.android.internal.util.ArrayUtils.contains(limitIfaces, entry.iface))) && ((limitUid == (UID_ALL)) || (limitUid == (entry.uid)))) && ((limitTag == (TAG_ALL)) || (limitTag == (entry.tag)))) { stats.addValues(entry); } reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(("problem parsing idx " + idx), e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
@org.junit.Test public void testCompile017() throws java.lang.Exception { java.lang.String packageName = "com.android.jack.switchstatement.test017.jack"; java.lang.String classPrefix = (packageName.replace('.', '-')) + "-"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); { input.put("Enum1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); input.put("Enum1$Enum1_", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); input.put("Enum1$Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), true)); } checkCompiledCode(packageName, input); }
public void addU16(int v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addU16(v); return; } if ((v < 0) || (v > 65535)) { android.util.Log.e("rs", (("FieldPacker.addU16( " + v) + " )")); throw new java.lang.IllegalArgumentException("Saving value out of range for type"); } align(2); mData[((mPos)++)] = ((byte) (v & 255)); mData[((mPos)++)] = ((byte) (v >> 8)); }
@java.lang.Override public void endTraceMarked(@javax.annotation.Nonnull com.android.jack.ir.ast.JNode node) { composedStatus.pop(); for (com.android.jack.analysis.tracer.TracerBrush config : brushes) { config.endTraceMarked(node); } }
private static char intToHexDigit(int b) { if (b < 10) { return ((char) ('0' + b)); } else { return ((char) (('A' + b) - 10)); } }
public void fillInNotifierBundle(android.os.Bundle m) { m.putInt("GsmSignalStrength", mGsmSignalStrength); m.putInt("GsmBitErrorRate", mGsmBitErrorRate); m.putInt("CdmaDbm", mCdmaDbm); m.putInt("CdmaEcio", mCdmaEcio); m.putInt("EvdoDbm", mEvdoDbm); m.putInt("EvdoEcio", mEvdoEcio); m.putInt("EvdoSnr", mEvdoSnr); m.putInt("LteSignalStrength", mLteSignalStrength); m.putInt("LteRsrp", mLteRsrp); m.putInt("LteRsrq", mLteRsrq); m.putInt("LteRssnr", mLteRssnr); m.putInt("LteCqi", mLteCqi); m.putInt("TdScdma", mTdScdmaRscp); m.putBoolean("isGsm", isGsm); }
@java.lang.Override public void loadAnnotations(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loading, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader loader) { if (!(annotations.isEmpty())) { com.android.jack.ir.ast.JSession session = com.android.jack.Jack.getSession(); com.android.jack.jayce.v0002.io.ExportSession exportSession = new com.android.jack.jayce.v0002.io.ExportSession(loader.getSession(), com.android.jack.jayce.NodeLevel.STRUCTURE); for (com.android.jack.jayce.v0002.nodes.NAnnotation annotation : annotations) { com.android.jack.ir.ast.JAnnotation annotationLiteral = annotation.exportAsJast(exportSession); loading.addAnnotation(annotationLiteral); annotationLiteral.updateParents(loading); } } }
public static byte[] readDEROctetString(byte[] input) throws org.conscrypt.ct.SerializationException { return org.conscrypt.ct.Serialization.readDEROctetString(new java.io.ByteArrayInputStream(input)); }
public java.util.ArrayList<java.security.Provider.Service> getServices(java.lang.String algorithm) { int newCacheVersion = org.apache.harmony.security.fortress.Services.getCacheVersion(); org.apache.harmony.security.fortress.Engine.ServiceCacheEntry cacheEntry = this.serviceCache; final java.lang.String algoUC = algorithm.toUpperCase(java.util.Locale.US); if (((cacheEntry != null) && (cacheEntry.algorithm.equalsIgnoreCase(algoUC))) && (newCacheVersion == (cacheEntry.cacheVersion))) { return cacheEntry.services; } java.util.ArrayList<java.security.Provider.Service> services = org.apache.harmony.security.fortress.Services.getServices(serviceName, algoUC); this.serviceCache = new org.apache.harmony.security.fortress.Engine.ServiceCacheEntry(algoUC, newCacheVersion, services); return services; }
@org.junit.Test public void testCreateP2pInterfaceNoInitMode() throws java.lang.Exception { final java.lang.String name = "p2p0"; com.android.server.wifi.HalDeviceManagerTest.BaselineChip chipMock = new com.android.server.wifi.HalDeviceManagerTest.BaselineChip(); chipMock.initialize(); mInOrder = inOrder(mServiceManagerMock, mWifiMock, chipMock.chip, mManagerStatusCallbackMock); executeAndValidateInitializationSequence(); executeAndValidateStartupSequence(); com.android.server.wifi.HalDeviceManager.InterfaceDestroyedListener idl = mock(HalDeviceManager.InterfaceDestroyedListener.class); com.android.server.wifi.HalDeviceManager.InterfaceAvailableForRequestListener iafrl = mock(HalDeviceManager.InterfaceAvailableForRequestListener.class); android.hardware.wifi.V1_0.IWifiP2pIface iface = ((android.hardware.wifi.V1_0.IWifiP2pIface) (validateInterfaceSequence(chipMock, false, (-1000), IfaceType.P2P, name, com.android.server.wifi.HalDeviceManagerTest.BaselineChip.STA_CHIP_MODE_ID, null, idl, iafrl))); collector.checkThat("allocated interface", iface, org.hamcrest.core.IsNull.notNullValue()); mDut.removeIface(iface); mTestLooper.dispatchAll(); mInOrder.verify(chipMock.chip).removeP2pIface(name); verify(idl).onDestroyed(); verifyNoMoreInteractions(mManagerStatusCallbackMock, idl, iafrl); }
public static native int EVP_SignInit(org.conscrypt.OpenSSLDigestContext ctx, long evpRef);
public void getNetworkRegistrationState(int domain, android.os.Message onCompleteMessage) { if (onCompleteMessage == null) return; com.android.internal.telephony.NetworkRegistrationManager.logd(("getNetworkRegistrationState domain " + domain)); if (!(isServiceConnected())) { onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, new java.lang.IllegalStateException("Service not connected.")); onCompleteMessage.sendToTarget(); return; } try { mServiceBinder.getNetworkRegistrationState(mPhone.getPhoneId(), domain, new com.android.internal.telephony.NetworkRegistrationManager.NetworkRegStateCallback(onCompleteMessage)); } catch (android.os.RemoteException e) { android.telephony.Rlog.e(com.android.internal.telephony.NetworkRegistrationManager.TAG, ("getNetworkRegistrationState RemoteException " + e)); onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, e); onCompleteMessage.sendToTarget(); } }
public void onLeScan(android.bluetooth.BluetoothDevice device, int rssi, byte[] scanRecord);
@java.lang.Override boolean isEmpty(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVDir dir) { return list(dir).isEmpty(); }
@com.android.annotations.NonNull byte[] getType() { return mType; }
private void doSend() { int status = BluetoothShare.STATUS_SUCCESS; while ((mFileInfo) == null) { try { java.lang.Thread.sleep(50); } catch (java.lang.InterruptedException e) { status = BluetoothShare.STATUS_CANCELED; } } if (!(mConnected)) { status = BluetoothShare.STATUS_CONNECTION_ERROR; } if (status == (BluetoothShare.STATUS_SUCCESS)) { if ((mFileInfo.mFileName) != null) { status = sendFile(mFileInfo); } else { status = mFileInfo.mStatus; } waitingForShare = true; } else { com.android.bluetooth.opp.Constants.updateShareStatus(mContext1, mInfo.mId, status); } if (status == (BluetoothShare.STATUS_SUCCESS)) { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SHARE_COMPLETE; msg.obj = mInfo; msg.sendToTarget(); } else { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SESSION_ERROR; mInfo.mStatus = status; msg.obj = mInfo; msg.sendToTarget(); } }
@android.support.annotation.VisibleForTesting void updateImsRegistrationState() { boolean isImsRegistered = mTelephonyManager.isImsRegistered(mSir.getSubscriptionId()); setSummaryText(com.android.settings.deviceinfo.SimStatus.KEY_IMS_REGISTRATION_STATE, mRes.getString((isImsRegistered ? R.string.ims_reg_status_registered : R.string.ims_reg_status_not_registered))); }
@java.lang.Override public java.nio.ByteBuffer put(byte value) { checkIsAccessible(); if (isReadOnly) { throw new java.nio.ReadOnlyBufferException(); } if ((position) == (limit)) { throw new java.nio.BufferOverflowException(); } this.block.pokeByte(((offset) + ((position)++)), value); return this; }
boolean startVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { return false; } int connectionState = stateMachine.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mVoiceRecognitionStarted = true; stateMachine.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_START, device); } return true; }
@java.lang.Override public java.util.Map<java.lang.String, java.util.List<java.lang.String>> getHeaderFields() { if ((headerFields) == null) { final java.util.TreeMap<java.lang.String, java.util.List<java.lang.String>> headerFieldsMap = new java.util.TreeMap<>(libcore.net.url.FileURLConnection.HEADER_COMPARATOR); for (int i = 0; i < (headerKeysAndValues.length); i += 2) { headerFieldsMap.put(headerKeysAndValues[i], java.util.Collections.singletonList(headerKeysAndValues[(i + 1)])); } headerFields = java.util.Collections.unmodifiableMap(headerFieldsMap); } return headerFields; }
public void testCharset() { try { encoder = new org.apache.harmony.tests.java.nio.charset.CharsetEncoderTest.MockCharsetEncoder(java.nio.charset.Charset.forName("gbk"), 1, org.apache.harmony.tests.java.nio.charset.CharsetEncoderTest.MAX_BYTES); } catch (java.nio.charset.UnsupportedCharsetException e) { java.lang.System.err.println("Don't support GBK encoding, ignore current test"); } }
private java.lang.String getTestArguments() { return "-e phoneNumber " + (Strings.phoneNumber.value()); }
public static void closeDrawer(int drawerLayoutId, int gravity) { if (android.support.test.espresso.contrib.DrawerActions.checkDrawer(drawerLayoutId, android.support.test.espresso.contrib.DrawerMatchers.isClosed())) { return; } android.support.test.espresso.Espresso.onView(withId(drawerLayoutId)).perform(android.support.test.espresso.contrib.DrawerActions.registerListener()).perform(android.support.test.espresso.contrib.DrawerActions.actionCloseDrawer(gravity)).perform(android.support.test.espresso.contrib.DrawerActions.unregisterListener()); }
private void assertBackgroundPeriodAlarmNotPending() { assertFalse("background period alarm is pending", mAlarmManager.isPending(WificondScannerImpl.BACKGROUND_PERIOD_ALARM_TAG)); }
public void testVFE7() { try { new dot.junit.opcodes.iget_char.d.T_iget_char_12().run(); fail("expected an IllegalAccessError exception"); } catch (java.lang.IllegalAccessError t) { } }
boolean hasCallbackAlreadyHappened(int callback) { synchronized(mLocalLock) { return mCallbackQueue.contains(callback); } }
private void checkRemainderFloat4Float4Float4() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, -5019417213533590404L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, -5019417213533590404L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testRemainderFloat4Float4Float4(inX, out); verifyResultsRemainderFloat4Float4Float4(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRemainderFloat4Float4Float4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testRemainderFloat4Float4Float4(inX, out); verifyResultsRemainderFloat4Float4Float4(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRemainderFloat4Float4Float4: " + (e.toString()))); } }
public com.android.builder.ProductFlavor setKeystore(com.android.builder.Keystore keystore) { mKeystore = keystore; return this; }
static android.telephony.SignalStrength convertHalSignalStrength(android.hardware.radio.V1_0.SignalStrength signalStrength) { int tdscdmaRscp_1_2 = 255; if (((signalStrength.tdScdma.rscp) >= 25) && ((signalStrength.tdScdma.rscp) <= 120)) { int rscpDbm = -(signalStrength.tdScdma.rscp); tdscdmaRscp_1_2 = rscpDbm + 120; } return new android.telephony.SignalStrength(signalStrength.gw.signalStrength, signalStrength.gw.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, tdscdmaRscp_1_2); }
@java.lang.Override public java.util.List<com.android.jack.test.toolchain.PackageLevel> getLevels() { java.util.List<com.android.jack.test.toolchain.PackageLevel> setup = new java.util.ArrayList<com.android.jack.test.toolchain.PackageLevel>(); setup.add(new com.android.jack.test.toolchain.PackageLevel("", java.util.logging.Level.FINE)); setup.add(new com.android.jack.test.toolchain.PackageLevel("com.android.sched", java.util.logging.Level.WARNING)); return setup; }
public java.lang.String toString() { return (((((("AaptOptionsImpl{" + ", ignoreAssets=") + (ignoreAssets)) + ", noCompress=") + (noCompress)) + ", failOnMissingConfigEntry=") + (failOnMissingConfigEntry)) + "}"; }
public void testConnectViaHttpProxyToHttpsUsingBadProxyAndHttpResponseCache() throws java.lang.Exception { TestSSLContext testSSLContext = TestSSLContext.create(); initResponseCache(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), true); com.google.mockwebserver.MockResponse badProxyResponse = new com.google.mockwebserver.MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders().setBody("bogus proxy connect response content"); server.enqueue(badProxyResponse); server.enqueue(new com.google.mockwebserver.MockResponse().setBody("response")); server.play(); java.net.URL url = new java.net.URL("https://android.com/foo"); libcore.java.net.URLConnectionTest.ProxyConfig proxyConfig = libcore.java.net.URLConnectionTest.ProxyConfig.PROXY_SYSTEM_PROPERTY; javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (proxyConfig.connect(server, url))); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); connection.setHostnameVerifier(new libcore.java.net.URLConnectionTest.RecordingHostnameVerifier()); assertContent("response", connection); com.google.mockwebserver.RecordedRequest connect = server.takeRequest(); assertEquals("CONNECT android.com:443 HTTP/1.1", connect.getRequestLine()); assertContains(connect.getHeaders(), "Host: android.com"); }
@java.lang.Override protected android.app.Dialog onCreateDialog(int id) { if (id == (com.android.settings.ApnEditor.ERROR_DIALOG_ID)) { java.lang.String msg = getErrorMsg(); return new android.app.AlertDialog.Builder(this).setTitle(R.string.error_title).setPositiveButton(android.R.string.ok, null).setMessage(msg).create(); } return super.onCreateDialog(id); }
java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if ((mPbapStateMachineMap) == null) { return new java.util.ArrayList<>(); } synchronized(mPbapStateMachineMap) { return new java.util.ArrayList(mPbapStateMachineMap.keySet()); } }
@java.lang.Override public int hashCode() { int primeNum = 31; return (((((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrp) * primeNum)) + ((mLteRsrq) * primeNum)) + ((mLteRssnr) * primeNum)) + ((mLteCqi) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRscp) * primeNum)) + (mIsGsm ? 1 : 0)) + (mUseOnlyRsrpForLteLevel ? 1 : 0)) + (java.util.Arrays.hashCode(mLteRsrpThresholds)); }
@java.lang.Override public void onCreate(com.android.ide.common.api.INode node, com.android.ide.common.api.INode parent, com.android.ide.common.api.InsertType insertType) { super.onCreate(node, parent, insertType); if (insertType == (com.android.ide.common.api.InsertType.CREATE)) { node.appendChild(com.android.ide.common.layout.FQCN_LINEAR_LAYOUT); } }
public void testMergeByCount() throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger(false); assertEquals(32, merger.size()); }
@android.test.suitebuilder.annotation.LargeTest public void testExistingEUserI() { if (android.os.Environment.isExternalStorageEmulated()) { return; } int userSetting = com.android.internal.content.PackageHelper.APP_INSTALL_INTERNAL; int iFlags = android.content.pm.PackageManager.INSTALL_EXTERNAL; setExistingXUserX(userSetting, iFlags, PackageInfo.INSTALL_LOCATION_PREFER_EXTERNAL); }
public static com.android.settings.search.Index getInstance(android.content.Context context) { if ((com.android.settings.search.Index.sInstance) == null) { synchronized(com.android.settings.search.Index.class) { if ((com.android.settings.search.Index.sInstance) == null) { com.android.settings.search.Index.sInstance = new com.android.settings.search.Index(context.getApplicationContext(), com.android.settings.search.Index.BASE_AUTHORITY); } } } return com.android.settings.search.Index.sInstance; }
private static int deepHashCodeElement(java.lang.Object element) { java.lang.Class<?> cl; if (element == null) { return 0; } cl = element.getClass().getComponentType(); if (cl == null) { return element.hashCode(); } if (element instanceof java.lang.Object[]) { return java.util.Arrays.deepHashCode(((java.lang.Object[]) (element))); } else if (cl == (int.class)) { return java.util.Arrays.hashCode(((int[]) (element))); } else if (cl == (char.class)) { return java.util.Arrays.hashCode(((char[]) (element))); } else if (cl == (boolean.class)) { return java.util.Arrays.hashCode(((boolean[]) (element))); } else if (cl == (byte.class)) { return java.util.Arrays.hashCode(((byte[]) (element))); } else if (cl == (long.class)) { return java.util.Arrays.hashCode(((long[]) (element))); } else if (cl == (float.class)) { return java.util.Arrays.hashCode(((float[]) (element))); } else if (cl == (double.class)) { return java.util.Arrays.hashCode(((double[]) (element))); } else { return java.util.Arrays.hashCode(((short[]) (element))); } }
public void testWildcardMatchingEmptySubstring() { assertTrue(verifyWithDomainNamePattern("imap.google.com", "imap*.google.com")); }
@javax.annotation.CheckForNull com.android.jack.ir.ast.JAbstractMethodBody loadBody(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod loading, @javax.annotation.Nonnull com.android.jack.jayce.JayceMethodLoader loader) throws com.android.jack.ir.ast.JTypeLookupException, com.android.jack.lookup.JMethodLookupException;
public native void msync(long address, long byteCount, int flags) throws android.system.ErrnoException;
public void recordHistory(android.net.NetworkStatsHistory input, long start, long end) { final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L, 0L); for (int i = 0; i < (input.bucketCount); i++) { final long bucketStart = input.bucketStart[i]; final long bucketEnd = bucketStart + (input.bucketDuration); if ((bucketStart < start) || (bucketEnd > end)) continue; entry.rxBytes = android.net.NetworkStatsHistory.getLong(input.rxBytes, i, 0L); entry.rxPackets = android.net.NetworkStatsHistory.getLong(input.rxPackets, i, 0L); entry.txBytes = android.net.NetworkStatsHistory.getLong(input.txBytes, i, 0L); entry.txPackets = android.net.NetworkStatsHistory.getLong(input.txPackets, i, 0L); entry.operations = android.net.NetworkStatsHistory.getLong(input.operations, i, 0L); recordData(bucketStart, bucketEnd, entry); } }
public static void closeGuardClose(java.lang.Object guardObj) { if ((Build.VERSION.SDK_INT) < 14) { return; } dalvik.system.CloseGuard guard = ((dalvik.system.CloseGuard) (guardObj)); guard.close(); }
@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println("Skipping dump in APP SERVICES, see bluetooth_manager section."); writer.println("Use --print argument for dumpsys direct from AdapterService."); return; } verboseLog(("dumpsys arguments, check for protobuf output: " + (android.text.TextUtils.join(" ", args)))); if (args[0].equals("--proto-bin")) { dumpMetrics(fd); return; } writer.println("AdapterProperties"); writer.println(((" " + "MaxConnectedAudioDevices: ") + (getMaxConnectedAudioDevices()))); writer.println(); writer.println("Bonded devices:"); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println((((((" " + (device.getAddress())) + " [") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + "] ") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }
public void testSincos() { checkSincosFloatFloatFloat(); checkSincosFloat2Float2Float2(); checkSincosFloat3Float3Float3(); checkSincosFloat4Float4Float4(); }
public static java.lang.String getActiveTags(android.content.Context context, android.content.SharedPreferences prefs, boolean onlyAvailable) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.traceur.Receiver.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = (onlyAvailable) ? com.android.traceur.AtraceUtils.atraceListCategories() : null; for (java.lang.String s : tags) { if (onlyAvailable && (!(available.containsKey(s)))) continue; if ((sb.length()) > 0) { sb.append(' '); } sb.append(s); } java.lang.String s = sb.toString(); android.util.Log.v(com.android.traceur.Receiver.TAG, (((("getActiveTags(onlyAvailable=" + onlyAvailable) + ") = \"") + s) + "\"")); return s; }
@com.android.annotations.NonNull public java.lang.String getDirName() { if (!(multiOutput)) { return variantData.getVariantConfiguration().getDirName(); } return variantData.getVariantConfiguration().computeDirNameWithSplits(mainApkOutputFile.getFilter(OutputFile.DENSITY), mainApkOutputFile.getFilter(OutputFile.ABI)); }
private void sendSMSToSelf() { android.app.PendingIntent sentIntent = android.app.PendingIntent.getBroadcast(getContext(), 0, new android.content.Intent(android.permission2.cts.NoReceiveSmsPermissionTest.MESSAGE_SENT_ACTION), PendingIntent.FLAG_ONE_SHOT); android.app.PendingIntent deliveryIntent = android.app.PendingIntent.getBroadcast(getContext(), 0, new android.content.Intent(android.permission2.cts.NoReceiveSmsPermissionTest.MESSAGE_STATUS_RECEIVED_ACTION), PendingIntent.FLAG_ONE_SHOT); android.telephony.TelephonyManager telephony = ((android.telephony.TelephonyManager) (getContext().getSystemService(Context.TELEPHONY_SERVICE))); java.lang.String currentNumber = telephony.getLine1Number(); assertFalse("[RERUN] SIM card does not provide phone number. Use a suitable SIM Card.", android.text.TextUtils.isEmpty(currentNumber)); android.util.Log.i(android.permission2.cts.NoReceiveSmsPermissionTest.LOG_TAG, java.lang.String.format("Sending SMS to self: %s", currentNumber)); sendSms(currentNumber, "test message", sentIntent, deliveryIntent); }
public void supplyIccPuk2ForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { responseInts(responseInfo, remainingAttempts); }
private static org.eclipse.swt.graphics.Image getResultImage(com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult result) { switch (result) { case PASS : return com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sGreenImage; case FAIL : return com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sRedImage; default : return com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sYellowImage; } }
private void registerForNsdSetting() { final android.database.ContentObserver contentObserver = new android.database.ContentObserver(this.getHandler()) { @java.lang.Override public void onChange(boolean selfChange) { notifyEnabled(isNsdEnabled()); } }; final android.net.Uri uri = Settings.Global.getUriFor(Settings.Global.NSD_ON); mNsdSettings.registerContentObserver(uri, contentObserver); }
private int runMonoDex() throws java.io.IOException { java.io.File incrementalOutFile = null; if (args.incremental) { if ((args.outName) == null) { context.err.println("error: no incremental output name specified"); return -1; } incrementalOutFile = new java.io.File(args.outName); if (incrementalOutFile.exists()) { minimumFileAge = incrementalOutFile.lastModified(); } } if (!(processAllFiles())) { return 1; } if ((args.incremental) && (!(anyFilesProcessed))) { return 0; } byte[] outArray = null; if ((!(outputDex.isEmpty())) || ((args.humanOutName) != null)) { outArray = writeDex(outputDex); if (outArray == null) { return 2; } } if (args.incremental) { outArray = com.android.dx.command.dexer.Main.mergeIncremental(outArray, incrementalOutFile); } outArray = mergeLibraryDexBuffers(outArray); if (args.jarOutput) { outputDex = null; if (outArray != null) { outputResources.put(DexFormat.DEX_IN_JAR_NAME, outArray); } if (!(createJar(args.outName))) { return 3; } } else if ((outArray != null) && ((args.outName) != null)) { java.io.OutputStream out = openOutput(args.outName); out.write(outArray); closeOutput(out); } return 0; }
@org.junit.Test public void testEnterSoftApModeActiveWhenAlreadyInSoftApMode() throws java.lang.Exception { when(mWifiInjector.makeWificond()).thenReturn(mWificond); when(mWificond.createApInterface()).thenReturn(null); mWifiStateMachinePrime.enterSoftAPMode(null); mLooper.dispatchAll(); assertEquals(com.android.server.wifi.WifiStateMachinePrimeTest.SOFT_AP_MODE_STATE_STRING, mWifiStateMachinePrime.getCurrentMode()); enterSoftApActiveMode(); }
public void addListener(@org.jetbrains.annotations.NotNull com.google.gct.idea.debugger.CloudBreakpointListener listener) { getStateController().addListener(listener); }
@org.junit.Test public void testSetWifiEnabledFromAppFailsWhenApEnabled() throws java.lang.Exception { when(mWifiStateMachine.syncGetWifiApState()).thenReturn(WifiManager.WIFI_AP_STATE_ENABLED); assertFalse(mWifiServiceImpl.setWifiEnabled(com.android.server.wifi.WifiServiceImplTest.TEST_PACKAGE_NAME, true)); verify(mSettingsStore, never()).handleWifiToggled(anyBoolean()); verify(mWifiController, never()).sendMessage(eq(com.android.server.wifi.WifiController.CMD_WIFI_TOGGLED)); }
protected void libToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.lang.String classpath, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { buildJackCall(args); args.add("--verbose"); args.add(verbosityLevel.name()); args.add("--sanity-checks"); args.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { args.add("--incremental-folder"); args.add(incrementalFolder.getAbsolutePath()); } for (java.io.File res : resImport) { args.add("--import-resource"); args.add(res.getPath()); } for (java.io.File meta : metaImport) { args.add("--import-meta"); args.add(meta.getPath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if (!(classpath.equals(""))) { args.add("--classpath"); args.add(classpath); } for (java.io.File jarjarFile : jarjarRules) { args.add("--config-jarjar"); args.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add("--config-proguard"); args.add(flags.getAbsolutePath()); } if (withDebugInfos) { args.add("-g"); } libToImportStaticLibs(args, in); }
private static java.lang.String getZoneDisplayName(java.util.Locale locale, java.util.TimeZone tz, java.util.Date now, boolean preferLongName) { java.lang.String zoneNameString; if (preferLongName) { zoneNameString = com.android.settings.DateTimeSettings.getZoneLongName(locale, tz, now); } else { zoneNameString = com.android.settings.ZonePicker.getZoneExemplarLocation(locale, tz); if ((zoneNameString == null) || (zoneNameString.isEmpty())) { zoneNameString = com.android.settings.DateTimeSettings.getZoneLongName(locale, tz, now); } } return zoneNameString; }
private android.net.NetworkCapabilities getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo nai) { if (nai != null) { synchronized(nai) { if ((nai.networkCapabilities) != null) { return networkCapabilitiesWithoutUidsUnlessAllowed(nai.networkCapabilities, android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid()); } } } return null; }
@java.lang.Override public void handle(@javax.annotation.Nonnull org.simpleframework.http.Request request, @javax.annotation.Nonnull org.simpleframework.http.Response response) { org.simpleframework.http.ContentType contentType = getContentType(request); org.simpleframework.http.core.Container container; if (contentType == null) { com.android.jack.server.router.ContentTypeRouter.logger.log(java.util.logging.Level.FINE, "Route request for no content type"); container = primaryContainer; } else { java.lang.String type = contentType.getType(); com.android.jack.server.router.ContentTypeRouter.logger.log(java.util.logging.Level.FINE, (("Route request for '" + type) + "'")); container = registry.get(type); if (container == null) { com.android.jack.server.router.ContentTypeRouter.logger.log(java.util.logging.Level.FINE, (("No route for '" + type) + "'")); container = primaryContainer; } } container.handle(request, response); }
public void test_SSLSocket_defaultConfiguration() throws java.lang.Exception { libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertSSLSocket(((javax.net.ssl.SSLSocket) (javax.net.ssl.SSLSocketFactory.getDefault().createSocket()))); }
public void dereferenceImage() { (imageReferences)--; if (((image) != null) && ((imageReferences) == 0)) { image.dispose(); } }
@org.junit.Test public void testMultiThread() throws java.lang.Exception { java.util.concurrent.CountDownLatch factoryLatch = new java.util.concurrent.CountDownLatch(1); com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String> cache = new com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String>(new com.android.ide.common.caching.CreatingCacheTest.DelayedFactory(factoryLatch)); java.util.concurrent.CountDownLatch latch1 = new java.util.concurrent.CountDownLatch(1); com.android.ide.common.caching.CreatingCacheTest.CacheRunnable runnable1 = new com.android.ide.common.caching.CreatingCacheTest.CacheRunnable(cache, latch1); java.lang.Thread t1 = new java.lang.Thread(runnable1); t1.start(); latch1.await(); java.util.concurrent.CountDownLatch latch2 = new java.util.concurrent.CountDownLatch(1); com.android.ide.common.caching.CreatingCacheTest.CacheRunnable runnable2 = new com.android.ide.common.caching.CreatingCacheTest.CacheRunnable(cache, latch2); java.lang.Thread t2 = new java.lang.Thread(runnable2); t2.start(); latch2.await(); factoryLatch.countDown(); t1.join(); t2.join(); assertEquals("foo", runnable1.getResult()); assertEquals("foo", runnable2.getResult()); assertTrue("repetitive calls give same instance", ((runnable1.getResult()) == (runnable2.getResult()))); }
@com.android.annotations.NonNull com.android.build.gradle.managed.FilePattern getCFilePattern();
@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((((((((((((((((((((((((("SignalStrength:" + " ") + (mGsmSignalStrength)) + " ") + (mGsmBitErrorRate)) + " ") + (mCdmaDbm)) + " ") + (mCdmaEcio)) + " ") + (mEvdoDbm)) + " ") + (mEvdoEcio)) + " ") + (mEvdoSnr)) + " ") + (mLteSignalStrength)) + " ") + (mLteRsrp)) + " ") + (mLteRsrq)) + " ") + (mLteRssnr)) + " ") + (mLteCqi)) + " ") + (mLteRsrpBoost)) + " ") + (mTdScdmaRscp)) + " ") + (mWcdmaSignalStrength)) + " ") + (mWcdmaRscpAsu)) + " ") + (mWcdmaRscp)) + " ") + (mIsGsm ? "gsm|lte" : "cdma")) + " ") + (mUseOnlyRsrpForLteLevel ? "use_only_rsrp_for_lte_level" : "use_rsrp_and_rssnr_for_lte_level")) + " ") + (mWcdmaDefaultSignalMeasurement)) + " ") + (java.util.Arrays.toString(mLteRsrpThresholds))) + " ") + (java.util.Arrays.toString(mWcdmaRscpThresholds)); }
private void checkErfcFloatFloat() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, -3978605608416223824L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.forEach_testErfcFloatFloat(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testErfcFloatFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testErfcFloatFloat(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testErfcFloatFloat: " + (e.toString()))); } }
public void run() { if ((com.android.hierarchyviewerlib.models.TreeViewModel.getModel().getTree()) == null) { showDeviceSelector(); treeViewButton.setEnabled(false); } else { showTreeView(); treeViewButton.setEnabled(true); zoomSlider.setSelection(((int) (java.lang.Math.round(((com.android.hierarchyviewerlib.models.TreeViewModel.getModel().getZoom()) * 10))))); filterText.setText(""); } }
private int getThumbPositionForListPosition(int firstVisibleItem, int visibleItemCount, int totalItemCount) { if (((mSectionIndexer) == null) || ((mListAdapter) == null)) { getSectionsFromIndexer(); } if (((mSectionIndexer) == null) || (!(mMatchDragPosition))) { return (((mList.getHeight()) - (mThumbH)) * firstVisibleItem) / (totalItemCount - visibleItemCount); } firstVisibleItem -= mListOffset; if (firstVisibleItem < 0) { return 0; } totalItemCount -= mListOffset; final int trackHeight = (mList.getHeight()) - (mThumbH); final int section = mSectionIndexer.getSectionForPosition(firstVisibleItem); final int sectionPos = mSectionIndexer.getPositionForSection(section); final int nextSectionPos; final int sectionCount = mSections.length; if ((section + 1) < sectionCount) { nextSectionPos = mSectionIndexer.getPositionForSection((section + 1)); } else { nextSectionPos = totalItemCount - 1; } final int positionsInSection = nextSectionPos - sectionPos; final android.view.View child = mList.getChildAt(0); final float incrementalPos = (child == null) ? 0 : firstVisibleItem + (((float) ((mList.getPaddingTop()) - (child.getTop()))) / (child.getHeight())); final float posWithinSection = (incrementalPos - sectionPos) / positionsInSection; int result = ((int) (((section + posWithinSection) / sectionCount) * trackHeight)); if ((firstVisibleItem > 0) && ((firstVisibleItem + visibleItemCount) == totalItemCount)) { final android.view.View lastChild = mList.getChildAt((visibleItemCount - 1)); final float lastItemVisible = ((float) (((mList.getHeight()) - (mList.getPaddingBottom())) - (lastChild.getTop()))) / (lastChild.getHeight()); result += (trackHeight - result) * lastItemVisible; } return result; }
public static void computeTanpi(android.renderscript.cts.TestTanpi.ArgumentsFloatFloat args) { args.out = new android.renderscript.cts.Floaty(android.renderscript.cts.CoreMathVerifier.tan(((args.in) * ((float) (java.lang.Math.PI)))), 6, 128); }
@java.lang.SuppressWarnings("unchecked") public void testRun_ioException() throws java.lang.Exception { mMockDevice.executeShellCommand(((java.lang.String) (org.easymock.EasyMock.anyObject())), ((com.android.ddmlib.IShellOutputReceiver) (org.easymock.EasyMock.anyObject())), org.easymock.EasyMock.eq(0L), org.easymock.EasyMock.eq(java.util.concurrent.TimeUnit.MILLISECONDS)); org.easymock.EasyMock.expectLastCall().andThrow(new java.io.IOException()); mMockListener.testRunStarted(com.android.ddmlib.testrunner.RemoteAndroidTestRunnerTest.TEST_PACKAGE, 0); mMockListener.testRunFailed(((java.lang.String) (org.easymock.EasyMock.anyObject()))); mMockListener.testRunEnded(org.easymock.EasyMock.anyLong(), org.easymock.EasyMock.eq(java.util.Collections.EMPTY_MAP)); org.easymock.EasyMock.replay(mMockDevice, mMockListener); try { mRunner.run(mMockListener); fail("IOException not thrown"); } catch (java.io.IOException e) { } org.easymock.EasyMock.verify(mMockDevice, mMockListener); }
public void setMeta(com.android.sdklib.devices.Meta meta) { mMeta = meta; }
private void assertSizesRotate(android.server.cts.ReportedSizes rotationA, android.server.cts.ReportedSizes rotationB) throws java.lang.Exception { assertEquals(rotationA.displayWidth, rotationA.metricsWidth); assertEquals(rotationA.displayHeight, rotationA.metricsHeight); assertEquals(rotationB.displayWidth, rotationB.metricsWidth); assertEquals(rotationB.displayHeight, rotationB.metricsHeight); final boolean beforePortrait = (rotationA.displayWidth) < (rotationA.displayHeight); final boolean afterPortrait = (rotationB.displayWidth) < (rotationB.displayHeight); if (!(shouldSkipRotationCheck())) { assertFalse((beforePortrait == afterPortrait)); } final boolean beforeConfigPortrait = (rotationA.widthDp) < (rotationA.heightDp); final boolean afterConfigPortrait = (rotationB.widthDp) < (rotationB.heightDp); assertEquals(beforePortrait, beforeConfigPortrait); assertEquals(afterPortrait, afterConfigPortrait); }
private com.intellij.execution.RunnerAndConfigurationSettings createConfiguration(@org.jetbrains.annotations.Nullable com.intellij.openapi.project.Project project, java.lang.Module module) { if (project == null) { return null; } com.intellij.execution.RunnerAndConfigurationSettings settings = com.intellij.execution.RunManagerEx.getInstanceEx(project).createRunConfiguration((((module.getName()) + " - ") + (AppEngineRunConfiguration.NAME)), getConfigurationFactory()); final com.google.gct.idea.appengine.run.AppEngineRunConfiguration configuration = ((com.google.gct.idea.appengine.run.AppEngineRunConfiguration) (settings.getConfiguration())); configuration.setModule(module); return settings; }
public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1); }
public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_single_source_alloc s = new com.android.rs.test.ScriptC_single_source_alloc(pRS); pRS.setMessageHandler(mRsMessage); for (int dataType : rsDataTypes) { for (int vecSize = 1; vecSize <= 4; vecSize++) { for (int nDims = 1; nDims <= 3; nDims++) { initializeGlobals(pRS, s, nDims); s.invoke_CreateAndTestAlloc(dataType, vecSize); } } } s.invoke_TestAllCases(); s.invoke_single_source_alloc_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }
@javax.annotation.Nonnull @java.lang.Override public java.util.Collection<java.lang.String> getSubPackageNames(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading) { return collections.getUnmodifiableCollection(vdirCache.keySet()); }
public void testDebug() { com.android.builder.BuildType type = new com.android.builder.BuildType("debug"); assertTrue(type.isDebuggable()); assertTrue(type.isDebugJniBuild()); assertNotNull(type.getKeystore()); assertTrue(type.getKeystore().isSigningReady()); }
public static void main(java.lang.String[] args) { Main.expectEquals(10, Main.absI((-10))); Main.expectEquals(20, Main.absI(20)); Main.expectEquals(10L, Main.absL((-10L))); Main.expectEquals(20L, Main.absL(20L)); Main.expectEquals(10, Main.abs1((-10))); Main.expectEquals(20, Main.abs1(20)); Main.expectEquals(10, Main.abs2((-10))); Main.expectEquals(20, Main.abs2(20)); Main.expectEquals(10, Main.abs3((-10))); Main.expectEquals(20, Main.abs3(20)); Main.expectEquals(10, Main.abs4((-10))); Main.expectEquals(20, Main.abs4(20)); Main.expectEquals(10, Main.abs4(((short) (-10)))); Main.expectEquals(20, Main.abs4(((short) (20)))); Main.expectEquals(10, Main.abs6(((byte) (-10)))); Main.expectEquals(20, Main.abs6(((byte) (20)))); Main.expectEquals(10L, Main.abs7((-10L))); Main.expectEquals(20L, Main.abs7(20L)); Main.expectEquals(1, Main.zabs1(((byte) (1)))); Main.expectEquals(255, Main.zabs1(((byte) (-1)))); Main.expectEquals(1, Main.zabs2(((short) (1)))); Main.expectEquals(65535, Main.zabs2(((short) (-1)))); Main.expectEquals(1, Main.zabs3(((char) (1)))); Main.expectEquals(65535, Main.zabs3(((char) (-1)))); java.lang.System.out.println("passed"); }
@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.FailingSuiteTest.class) @org.junit.Test public void testRunner_FailingSuiteTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); expectedResults().failure("suite", "java.lang.IllegalStateException: Cannot create suite\n").completedNormally(); }
public void test_isInfiniteD() { assertTrue(java.lang.Double.isInfinite(java.lang.Double.NEGATIVE_INFINITY)); assertTrue(java.lang.Double.isInfinite(java.lang.Double.POSITIVE_INFINITY)); assertFalse(java.lang.Double.isInfinite(java.lang.Double.MAX_VALUE)); assertFalse(java.lang.Double.isInfinite(java.lang.Double.MIN_VALUE)); assertFalse(java.lang.Double.isInfinite(java.lang.Double.NaN)); assertFalse(java.lang.Double.isInfinite(0.0)); }
@android.test.suitebuilder.annotation.MediumTest public void testJavaStrings() { assertEquals("SUCCESS-APP", mAppTextView2.getText()); assertEquals("SUCCESS-LIB1", mLib1TextView2.getText()); assertEquals("SUCCESS-LIB2", mLib2TextView2.getText()); }
private void finish(boolean success, java.lang.String error) { if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ((("finish() success=" + success) + ", error=") + error)); mPrintService.getDiscovery().stop(this); if ((mDiscoveryTimeout) != null) { mDiscoveryTimeout.cancel(); } if ((mConnection) != null) { mConnection.close(); } mPrintService.unlockWifi(); mBackend.closeDocument(); if (success) { mPrintJob.start(); mPrintJob.complete(); } else if ((mState) == (com.android.bips.LocalPrintJob.STATE_CANCEL)) { mPrintJob.cancel(); } else { mPrintJob.fail(error); } mState = com.android.bips.LocalPrintJob.STATE_DONE; mCompleteConsumer.accept(this); }
public void testRemainder() { checkRemainderFloatFloatFloat(); checkRemainderFloat2Float2Float2(); checkRemainderFloat3Float3Float3(); checkRemainderFloat4Float4Float4(); }
public int getCarrierPrivilegeStatus(android.content.pm.PackageInfo packageInfo) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : carrierPrivilegeRules.getCarrierPrivilegeStatus(packageInfo); }
private void test_parallelSort$DII(int size) { int startIndex = 100; int endIndex = size - 100; double[] reversedArray = new double[size]; double[] originalReversedArray = new double[size]; java.util.Arrays.fill(reversedArray, 0, startIndex, ((double) (100))); java.util.Arrays.fill(reversedArray, endIndex, size, ((double) (100))); for (int counter = startIndex; counter < endIndex; counter++) { reversedArray[counter] = ((double) (((size - counter) - startIndex) - 1)); } java.lang.System.arraycopy(reversedArray, 0, originalReversedArray, 0, size); java.util.Arrays.parallelSort(reversedArray, startIndex, endIndex); for (int counter = 0; counter < startIndex; counter++) assertTrue("Array modified outside of bounds", ((reversedArray[counter]) == (originalReversedArray[counter]))); for (int counter = startIndex; counter < (endIndex - 1); counter++) assertTrue("Array not sorted within bounds", ((reversedArray[counter]) <= (reversedArray[(counter + 1)]))); for (int counter = endIndex; counter < (org.apache.harmony.tests.java.util.ArraysTest.arraySize); counter++) assertTrue("Array modified outside of bounds", ((reversedArray[counter]) == (originalReversedArray[counter]))); try { java.util.Arrays.parallelSort(reversedArray, (startIndex + 1), startIndex); fail("IllegalArgumentException expected"); } catch (java.lang.IllegalArgumentException ignore) { } try { java.util.Arrays.parallelSort(reversedArray, (-1), startIndex); fail("ArrayIndexOutOfBoundsException expected (1)"); } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } try { java.util.Arrays.parallelSort(reversedArray, startIndex, ((reversedArray.length) + 1)); fail("ArrayIndexOutOfBoundsException expected (2)"); } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } }
public libcore.io.BufferIterator bigEndianIterator() { return new libcore.io.NioBufferIterator(this, address, size, ((java.nio.ByteOrder.nativeOrder()) != (java.nio.ByteOrder.BIG_ENDIAN))); }
public void test_getPositivePrefix() { java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setPositivePrefix("++"); assertTrue("Incorrect positive prefix", df.getPositivePrefix().equals("++")); }
public void density(org.gradle.api.Action<com.android.build.gradle.internal.dsl.DensitySplitData> action) { action.execute(density); }
public void onPnoScanFailed() { android.util.Log.e(com.android.server.wifi.scanner.WificondScannerImpl.TAG, "Pno scan failure received"); reportPnoScanFailure(); }
public static synchronized java.util.concurrent.ExecutorService getExecutor() { com.android.ide.common.internal.ExecutorSingleton.checkExecutor(); return com.android.ide.common.internal.ExecutorSingleton.sExecutorService; }
@com.android.annotations.NonNull private static java.lang.String combineAsCamelCase(@com.android.annotations.NonNull java.lang.Iterable<? extends org.gradle.api.Named> namedList) { return com.android.utils.StringHelper.combineAsCamelCase(com.google.common.collect.Iterables.transform(namedList, new com.google.common.base.Function<org.gradle.api.Named, java.lang.String>() { @java.lang.Override public java.lang.String apply(org.gradle.api.Named named) { return named.getName(); } })); }
public final boolean isLoaded() { checkIsMapped(); long address = block.toLong(); long size = block.getSize(); if (size == 0) { return true; } try { int pageSize = ((int) (Libcore.os.sysconf(android.system.OsConstants._SC_PAGE_SIZE))); int pageOffset = ((int) (address % pageSize)); address -= pageOffset; size += pageOffset; int pageCount = ((int) (((size + pageSize) - 1) / pageSize)); byte[] vector = new byte[pageCount]; Libcore.os.mincore(address, size, vector); for (int i = 0; i < (vector.length); ++i) { if (((vector[i]) & 1) != 1) { return false; } } return true; } catch (android.system.ErrnoException errnoException) { return false; } }
private static native void native_drawPosText(long nativeCanvas, char[] text, int index, int count, float[] pos, long nativePaint);
public com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder fromSample(@com.android.annotations.NonNull java.lang.String project) { com.android.build.gradle.integration.common.fixture.app.AndroidTestApp app = new com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder.EmptyTestApp(); java.io.File projectDir = new java.io.File(com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder.SAMPLE_PROJECT_DIR, project); com.android.build.gradle.integration.common.fixture.GradleTestProject.addAllFiles(app, projectDir); return fromTestApp(app); }
@org.junit.Test public void testSetupDriverForSoftApModeError() { com.android.server.wifi.WificondControl wificondControl = mock(com.android.server.wifi.WificondControl.class); android.net.wifi.IWificond wificond = mock(android.net.wifi.IWificond.class); when(wificondControl.setupDriverForSoftApMode()).thenReturn(null); mWifiNative.setWificondControl(wificondControl); android.net.wifi.IApInterface returnedApInterface = mWifiNative.setupForSoftApMode(); assertEquals(null, returnedApInterface); verify(mWifiNative).startHal(eq(false)); verify(wificondControl).setupDriverForSoftApMode(); }
public void testMaxLengthExtra() throws java.lang.Exception { byte[] maxLengthExtra = new byte[65535]; java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(maxLengthExtra); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(maxLengthExtra.length, zipFile.getEntry("x").getExtra().length); zipFile.close(); }
private void offerInstallAccessibilitySerivceOnce() { if ((mServicesCategory.getPreference(0)) != (mNoServicesMessagePreference)) { return; } android.content.SharedPreferences preferences = getActivity().getPreferences(Context.MODE_PRIVATE); final boolean offerInstallService = !(preferences.getBoolean(com.android.settings.AccessibilitySettings.KEY_INSTALL_ACCESSIBILITY_SERVICE_OFFERED_ONCE, false)); if (offerInstallService) { java.lang.String screenreaderMarketLink = android.os.SystemProperties.get(com.android.settings.AccessibilitySettings.SYSTEM_PROPERTY_MARKET_URL, com.android.settings.AccessibilitySettings.DEFAULT_SCREENREADER_MARKET_LINK); android.net.Uri marketUri = android.net.Uri.parse(screenreaderMarketLink); android.content.Intent marketIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW, marketUri); if ((getPackageManager().resolveActivity(marketIntent, 0)) == null) { return; } preferences.edit().putBoolean(com.android.settings.AccessibilitySettings.KEY_INSTALL_ACCESSIBILITY_SERVICE_OFFERED_ONCE, true).commit(); showDialog(com.android.settings.AccessibilitySettings.DIALOG_ID_NO_ACCESSIBILITY_SERVICES); } }
@javax.annotation.Nonnull public <T> java.lang.String getAsString(@javax.annotation.Nonnull com.android.sched.util.config.id.PropertyId<T> propertyId);
@org.junit.Test public void testDependency002() throws java.lang.Exception { com.android.jack.test.helper.IncrementalTestHelper ite = new com.android.jack.test.helper.IncrementalTestHelper(com.android.jack.test.toolchain.AbstractTestTools.createTempDir()); ite.addJavaFile("jack.incremental", "A.java", ("package jack.incremental; \n" + ("public class A { } \n" + "class B { } \n"))); ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(2, ite.getJayceCount()); ite.addJavaFile("jack.incremental", "A.java", ("package jack.incremental; \n" + "public class A { }\n")); ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(1, ite.getJayceCount()); }
@java.lang.Override public void execute(com.android.build.gradle.model.DefaultAndroidBinary binary) { binary.computeMergedNdk(ndkConfig, binary.getProductFlavors(), binary.getBuildType()); java.util.Collection<org.gradle.nativeplatform.SharedLibraryBinarySpec> nativeBinaries = com.android.build.gradle.model.NdkComponentModelPlugin.getNativeBinaries(library, binary.getBuildType(), binary.getProductFlavors()); binary.getNativeBinaries().addAll(nativeBinaries); for (org.gradle.nativeplatform.SharedLibraryBinarySpec nativeBin : nativeBinaries) { com.android.build.gradle.ndk.internal.NdkConfiguration.configureBinary(nativeBin, buildDir, binary.getMergedNdkConfig(), ndkHandler); } }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof android.net.NetworkStats.Entry) { final android.net.NetworkStats.Entry e = ((android.net.NetworkStats.Entry) (o)); return ((((((((((((uid) == (e.uid)) && ((set) == (e.set))) && ((tag) == (e.tag))) && ((metered) == (e.metered))) && ((roaming) == (e.roaming))) && ((defaultNetwork) == (e.defaultNetwork))) && ((rxBytes) == (e.rxBytes))) && ((rxPackets) == (e.rxPackets))) && ((txBytes) == (e.txBytes))) && ((txPackets) == (e.txPackets))) && ((operations) == (e.operations))) && (iface.equals(e.iface)); } return false; }
protected void close() throws java.io.IOException { synchronized(fdLock) { if (((fd) != null) && (fd.valid())) { if (!(stream)) { sun.net.ResourceManager.afterUdpClose(); } if (!(closePending)) { dalvik.system.SocketTagger.get().untag(fd); } if ((fdUseCount) == 0) { if (closePending) { return; } closePending = true; try { socketPreClose(); } finally { socketClose(); } return; } else { if (!(closePending)) { closePending = true; (fdUseCount)--; socketPreClose(); } } } } }
protected void t_Format(int count, java.lang.Object object, java.text.Format format, java.util.Vector<org.apache.harmony.tests.java.text.Support_Format.FieldContainer> expectedResults) { java.util.Vector<org.apache.harmony.tests.java.text.Support_Format.FieldContainer> results = org.apache.harmony.tests.java.text.Support_Format.findFields(format.formatToCharacterIterator(object)); assertEquals(((((((("size mismatch\n" + (format.format(object))) + "\n") + "expectedResults=") + expectedResults) + "\n") + " results=") + results), expectedResults.size(), results.size()); for (int i = 0; i < (results.size()); ++i) { if (!(results.contains(expectedResults.get(i)))) { fail(((((((("didn't find expected result " + (expectedResults.get(i))) + "\n") + "expectedResults=") + expectedResults) + "\n") + " results=") + results)); } } }
@org.junit.BeforeClass public static void init() throws java.io.IOException, java.lang.Exception { com.android.jack.multidex.MultiDexOverflowTests.annotations = com.android.jack.multidex.MultiDexTests.prepareAnnotations(); }
private void startListenForPhoneState() { if ((mPhoneStateListener) != null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, "startListenForPhoneState, already listening"); return; } int events = getTelephonyEventsToListen(); if (events == (android.telephony.PhoneStateListener.LISTEN_NONE)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, "startListenForPhoneState, no event to listen"); return; } int subId = android.telephony.SubscriptionManager.getDefaultSubscriptionId(); if (!(android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ("startListenForPhoneState, invalid subscription ID " + subId)); return; } android.util.Log.i(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ((("startListenForPhoneState(), subId=" + subId) + ", enabled_events=") + events)); mPhoneStateListener = new com.android.bluetooth.hfp.HeadsetPhoneState.HeadsetPhoneStateListener(subId, mHeadsetService.getStateMachinesThreadLooper()); mTelephonyManager.listen(mPhoneStateListener, events); }
@java.lang.Override public java.lang.String getProperty(java.lang.String key) { try { return manager.getVariable(key); } catch (java.io.IOException e) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log(java.util.logging.Level.SEVERE, ("Unable to get variable: " + key), e); return null; } }
void doBind() { android.content.Intent intent = new android.content.Intent(android.bluetooth.IBluetoothHearingAid.class.getName()); android.content.ComponentName comp = intent.resolveSystemService(mContext.getPackageManager(), 0); intent.setComponent(comp); if ((comp == null) || (!(mContext.bindServiceAsUser(intent, mConnection, 0, android.os.Process.myUserHandle())))) { android.util.Log.e(android.bluetooth.BluetoothHearingAid.TAG, ("Could not bind to Bluetooth Hearing Aid Service with " + intent)); return; } }
@java.lang.Override public void send(java.net.DatagramPacket packet) throws java.io.IOException { if (!(channelImpl.isBlocking())) { throw new java.nio.channels.IllegalBlockingModeException(); } boolean wasBound = isBound(); super.send(packet); if (!wasBound) { channelImpl.onBind(false); } }
@java.lang.Override public boolean unplug(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ("unplug(): device=" + device)); } com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { return false; } return service.unplug(device); }
@java.lang.Override public void onPinEntered(com.android.phone.settings.fdn.EditPinPreference preference, boolean positiveResult) { if (preference == (mButtonChangePW)) { updatePWChangeState(positiveResult); } else if (preference == (mButtonDisableAll)) { disableAllBarring(positiveResult); } }
public native void requestConcurrentGC();
public boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice device, java.lang.String command, java.lang.String arg) { if (android.bluetooth.BluetoothHeadset.DBG) { android.bluetooth.BluetoothHeadset.log("sendVendorSpecificResultCode()"); } if (command == null) { throw new java.lang.IllegalArgumentException("command is null"); } final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (android.bluetooth.BluetoothHeadset.isValidDevice(device))) { try { return service.sendVendorSpecificResultCode(device, command, arg); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } if (service == null) { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); } return false; }
private boolean isWindowsExecutable(org.eclipse.core.runtime.IPath commandPath) { java.lang.String ext = commandPath.getFileExtension(); if (isWindowsExecutableExtension(ext)) { return true; } ext = findWindowsExecutableExtension(commandPath); if (ext != null) { return true; } return false; }
private void onCapabilities(com.android.bips.discovery.DiscoveredPrinter printer, com.android.bips.jni.LocalPrinterCapabilities capabilities) { if ((mListener) == null) { return; } if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, ((("Printer " + printer) + " caps=") + capabilities)); if (capabilities == null) { mListener.onConnectionComplete(null); close(); } else { com.android.bips.discovery.DiscoveredPrinter p2pPrinter = new com.android.bips.discovery.DiscoveredPrinter(printer.uuid, printer.name, com.android.bips.discovery.P2pDiscovery.toPath(mPeer), printer.location); mListener.onConnectionComplete(p2pPrinter); } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { final int uid = intent.getIntExtra(Intent.EXTRA_UID, (-1)); java.lang.String action = intent.getAction(); if (com.android.nfc.cardemulation.RegisteredNfcFServicesCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredNfcFServicesCache.TAG, ("Intent action: " + action)); if (uid != (-1)) { boolean replaced = (intent.getBooleanExtra(Intent.EXTRA_REPLACING, false)) && ((Intent.ACTION_PACKAGE_ADDED.equals(action)) || (Intent.ACTION_PACKAGE_REMOVED.equals(action))); if (!replaced) { int currentUser = android.app.ActivityManager.getCurrentUser(); if (currentUser == (android.os.UserHandle.getUserId(uid))) { invalidateCache(android.os.UserHandle.getUserId(uid)); } else { } } else { if (com.android.nfc.cardemulation.RegisteredNfcFServicesCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredNfcFServicesCache.TAG, "Ignoring package intent due to package being replaced."); } } }
private void seal() { mROList = java.util.Collections.unmodifiableList(mConfigs); }
@javax.annotation.Nonnull private static com.android.jack.backend.jayce.JayceFileImporter getJayceFileImporter(@javax.annotation.Nonnull java.util.List<java.io.File> jayceImport, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks, @javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.library.LibraryReadingException { java.util.List<com.android.jack.library.InputJackLibrary> inputJackLibraries = new java.util.ArrayList<com.android.jack.library.InputJackLibrary>(jayceImport.size()); com.android.sched.util.config.ReflectFactory<com.android.jack.jayce.JaycePackageLoader> factory = com.android.sched.util.config.ThreadConfig.get(com.android.jack.Jack.IMPORT_POLICY); for (final java.io.File jackFile : jayceImport) { try { com.android.sched.vfs.InputRootVDir vDir = com.android.jack.Jack.wrapAsVDir(jackFile, hooks); com.android.jack.library.InputJackLibrary inputJackLibrary = com.android.jack.library.JackLibraryFactory.getInputLibrary(vDir); inputJackLibraries.add(inputJackLibrary); com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create(inputJackLibrary, session.getPhantomLookup()); session.getTopLevelPackage().addLoader(rootPLoader); session.addImportSource(vDir); } catch (java.io.IOException ioException) { throw new com.android.jack.library.LibraryReadingException(ioException); } catch (com.android.jack.LibraryException libException) { throw new com.android.jack.library.LibraryReadingException(libException); } } return new com.android.jack.backend.jayce.JayceFileImporter(inputJackLibraries); }
public void test_getChannel() throws java.lang.Exception { try (java.net.DatagramSocket ds = new java.net.DatagramSocket()) { assertNull(ds.getChannel()); } try (org.apache.harmony.tests.java.net.DatagramSocketTest.DatagramServer server = new org.apache.harmony.tests.java.net.DatagramSocketTest.DatagramServer(LOOPBACK);java.net.DatagramSocket ds = new java.net.DatagramSocket(0)) { assertNull(ds.getChannel()); ds.disconnect(); } try (java.nio.channels.DatagramChannel channel = java.nio.channels.DatagramChannel.open();java.net.DatagramSocket socket = channel.socket()) { assertEquals(channel, socket.getChannel()); } }
@java.lang.Override public java.awt.Component getListCellRendererComponent(javax.swing.JList list, java.lang.Object value, int index, boolean isSelected, boolean cellHasFocus) { if (!(value instanceof com.google.gct.login.ui.UsersListItem)) { return null; } javax.swing.JPanel mainPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 10)); mainPanel.setMinimumSize(MAIN_PANEL_DIMENSION); mainPanel.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT); final java.awt.Color bg = (isSelected) ? ACTIVE_COLOR : com.intellij.util.ui.UIUtil.getListBackground(); final java.awt.Color fg = (isSelected) ? com.intellij.util.ui.UIUtil.getListSelectionForeground() : com.intellij.util.ui.UIUtil.getListForeground(); mainPanel.setBackground(bg); mainPanel.setForeground(fg); java.awt.Image image = ((com.google.gct.login.ui.UsersListItem) (value)).getUserPicture(); java.awt.Image scaledImage = image.getScaledInstance(PLAIN_IMAGE_WIDTH, PLAIN_IMAGE_HEIGHT, java.awt.Image.SCALE_SMOOTH); mainPanel.add(new javax.swing.JLabel(new javax.swing.ImageIcon(scaledImage))); mainPanel.add(createTextDisplay(isSelected, ((com.google.gct.login.ui.UsersListItem) (value)))); return mainPanel; }
private android.net.RecommendationResult verifyAndCaptureResult(android.net.RecommendationRequest request) { mProvider.onRequestRecommendation(request, mCallback); org.mockito.ArgumentCaptor<android.net.RecommendationResult> resultCaptor = org.mockito.ArgumentCaptor.forClass(android.net.RecommendationResult.class); verify(mCallback).onResult(resultCaptor.capture()); return resultCaptor.getValue(); }
private static android.util.Size getMaxPreviewSize(android.content.Context context, java.lang.String cameraId) { try { android.view.WindowManager windowManager = ((android.view.WindowManager) (context.getSystemService(Context.WINDOW_SERVICE))); android.view.Display display = windowManager.getDefaultDisplay(); int width = display.getWidth(); int height = display.getHeight(); if (height > width) { height = width; width = display.getHeight(); } android.hardware.camera2.CameraManager camMgr = ((android.hardware.camera2.CameraManager) (context.getSystemService(Context.CAMERA_SERVICE))); java.util.List<android.util.Size> orderedPreviewSizes = android.hardware.camera2.cts.CameraTestUtils.CameraTestUtils.getSupportedPreviewSizes(cameraId, camMgr, android.hardware.camera2.cts.PREVIEW_SIZE_BOUND); if (orderedPreviewSizes != null) { for (android.util.Size size : orderedPreviewSizes) { if ((width >= (size.getWidth())) && (height >= (size.getHeight()))) return size; } } } catch (java.lang.Exception e) { android.util.Log.e(android.hardware.camera2.cts.RobustnessTest.TAG, ("getMaxPreviewSize Failed. " + (e.toString()))); } return PREVIEW_SIZE_BOUND; }
private void stopObexServerSession() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Pbap Service stopObexServerSession"); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_ACQUIRE_WAKE_LOCK); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_RELEASE_WAKE_LOCK); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if (mAdapter.isEnabled()) { startSocketListeners(); } setState(BluetoothPbap.STATE_DISCONNECTED); }
private java.lang.String getListingOfDex(@javax.annotation.Nonnull java.io.File dex) throws java.io.IOException { assert dex.isFile(); java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.jack.dx.io.ClassDef def : new com.android.jack.dx.io.DexBuffer(dex).classDefs()) { sb.append(def.getTypeName()); sb.append(":"); sb.append(TextUtils.LINE_SEPARATOR); } return sb.toString(); }
@java.lang.Override public boolean hasIccCard() { synchronized(mLock) { if (((mUiccCard) != null) && ((mUiccCard.getCardState()) != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT))) { return true; } return false; } }
@java.lang.Override public void provideConstructorArguments(java.util.List<org.apache.harmony.jpda.tests.framework.jdwp.Value> constructorArguments) { long debuggeeClassId = getClassIDBySignature(getDebuggeeClassSignature()); org.apache.harmony.jpda.tests.framework.jdwp.Value stringBufferValue = getStaticFieldValue(debuggeeClassId, "STRING_BUFFER"); constructorArguments.add(stringBufferValue); }
@java.lang.Override public java.lang.String toString() { return new com.google.gson.Gson().toJson(new com.android.devtools.server.model.RestServiceModel(POST, com.android.devtools.server.services.SmsManagerService.SMS_SERVICE_PATH, new com.android.devtools.server.model.SmsManagerModel(com.android.devtools.server.services.SmsManagerService.ACTION).toString())); }
private com.android.ide.common.res2.ResourceFile createResourceFile(@com.android.annotations.NonNull java.io.File file, @com.android.annotations.NonNull com.android.ide.common.res2.ResourceSet.FolderData folderData, @com.android.annotations.NonNull com.android.utils.ILogger logger) throws com.android.ide.common.res2.MergingException { if ((folderData.type) != null) { com.android.ide.common.res2.FileResourceNameValidator.validate(file, folderData.type); java.lang.String name = com.android.ide.common.res2.ResourceSet.getNameForFile(file); if (needsPreprocessing(file)) { return com.android.ide.common.res2.ResourceFile.generatedFiles(file, getResourceItemsForGeneratedFiles(file), folderData.qualifiers); } else { return new com.android.ide.common.res2.ResourceFile(file, new com.android.ide.common.res2.ResourceItem(name, folderData.type, null), folderData.qualifiers); } } else { try { com.android.ide.common.res2.ValueResourceParser2 parser = new com.android.ide.common.res2.ValueResourceParser2(file); java.util.List<com.android.ide.common.res2.ResourceItem> items = parser.parseFile(); return new com.android.ide.common.res2.ResourceFile(file, items, folderData.qualifiers); } catch (com.android.ide.common.res2.MergingException e) { logger.error(e, "Failed to parse %s", file.getAbsolutePath()); throw e; } } }
@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(("com.android.jack.shrob.test" + testNumber)); java.io.File refFolder = new java.io.File(testFolder, "refsSeed"); java.io.File candidateOutputSeeds = com.android.jack.test.toolchain.AbstractTestTools.createTempFile("seeds", ".txt"); java.io.File refOutputSeeds = new java.io.File(refFolder, (("expected-" + flagNumber) + ".txt")); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File seedsFile = addOptionsToFlagsFile(new java.io.File(testFolder, ("proguard.flags" + flagNumber)), testFolder, (" -dontshrink -dontobfuscate -printseeds " + (candidateOutputSeeds.getAbsolutePath()))); toolchain.addProguardFlags(seedsFile); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, "jack")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorSeeds(refOutputSeeds, candidateOutputSeeds)); }
static com.android.internal.telephony.RILRequest obtain(int request, android.os.Message result) { com.android.internal.telephony.RILRequest rr = null; synchronized(com.android.internal.telephony.RILRequest.sPoolSync) { if ((com.android.internal.telephony.RILRequest.sPool) != null) { rr = com.android.internal.telephony.RILRequest.sPool; com.android.internal.telephony.RILRequest.sPool = rr.mNext; rr.mNext = null; (com.android.internal.telephony.RILRequest.sPoolSize)--; } } if (rr == null) { rr = new com.android.internal.telephony.RILRequest(); } rr.mSerial = com.android.internal.telephony.RILRequest.sNextSerial.getAndIncrement(); rr.mRequest = request; rr.mResult = result; rr.mParcel = android.os.Parcel.obtain(); rr.mWakeLockType = com.android.internal.telephony.RIL.INVALID_WAKELOCK; rr.mClientId = com.android.internal.telephony.ActivityThread.currentOpPackageName(); rr.mStartTimeMs = android.os.SystemClock.elapsedRealtime(); if ((result != null) && ((result.getTarget()) == null)) { throw new java.lang.NullPointerException("Message target must not be null"); } rr.mParcel.writeInt(request); rr.mParcel.writeInt(rr.mSerial); return rr; }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mTelephonyManager = ((android.telephony.TelephonyManager) (getContext().getSystemService(Context.TELEPHONY_SERVICE))); mDestAddr = mTelephonyManager.getLine1Number(); mText = "This is a test message"; if ((mTelephonyManager.getPhoneType()) == (android.telephony.TelephonyManager.PHONE_TYPE_CDMA)) { mDeliveryReportSupported = true; } else if (mTelephonyManager.getDeviceId().equals("000000000000000")) { mDeliveryReportSupported = false; } else { java.lang.String mccmnc = mTelephonyManager.getSimOperator(); mDeliveryReportSupported = !(android.telephony.cts.SmsManagerTest.NO_DELIVERY_REPORTS.contains(mccmnc)); } }
public void clearField(java.lang.String fieldName) throws java.lang.NoSuchMethodException { java.lang.reflect.Method m = getClass().getMethod(android.icu.dev.test.format.NumberFormatTestData.fieldToClearer(fieldName)); try { m.invoke(this); } catch (java.lang.IllegalAccessException e) { throw new java.lang.RuntimeException(e); } catch (java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException(e); } }
public void runTest(com.android.rs.imagejb.ImageProcessingTest.TestAction ta, java.lang.String testName) { float sum = 0; for (int i = 0; i < (mIteration); i++) { runOnUiThread(ta); float bmValue = ta.getBenchmark(); android.util.Log.v(TAG, ((("results for iteration " + i) + " is ") + bmValue)); sum += bmValue; } float avgResult = sum / (mIteration); android.os.Bundle results = new android.os.Bundle(); results.putFloat((testName + "_avg"), avgResult); getInstrumentation().sendStatus(Activity.RESULT_OK, results); }
public void testTestSuccessMetrics() { java.lang.StringBuilder output = buildCommonResult(); addStatusKey(output, "randomKey", "randomValue"); assertNotNull(mTestResult.mTestMetrics); assertEquals("randomValue", mTestResult.mTestMetrics.get("randomKey")); }
public void testCombined() throws java.io.IOException { com.android.builder.model.AndroidLibrary library1 = com.android.ide.common.repository.ResourceVisibilityLookupTest.createMockLibrary(("" + ((((((("int dimen activity_horizontal_margin 0x7f030000\n" + "int dimen activity_vertical_margin 0x7f030001\n") + "int id action_settings 0x7f060000\n") + "int layout activity_main 0x7f020000\n") + "int menu menu_main 0x7f050000\n") + "int string action_settings 0x7f040000\n") + "int string app_name 0x7f040001\n") + "int string hello_world 0x7f040002")), ""); com.android.builder.model.AndroidLibrary library2 = com.android.ide.common.repository.ResourceVisibilityLookupTest.createMockLibrary(("" + ("int layout foo 0x7f030001\n" + "int layout bar 0x7f060000\n")), ("" + "layout foo\n")); java.util.List<com.android.builder.model.AndroidLibrary> androidLibraries = java.util.Arrays.asList(library1, library2); com.android.ide.common.repository.ResourceVisibilityLookup visibility = com.android.ide.common.repository.ResourceVisibilityLookup.create(androidLibraries, null); assertTrue(visibility.isPrivate(ResourceType.DIMEN, "activity_horizontal_margin")); assertTrue(visibility.isPrivate(ResourceType.ID, "action_settings")); assertTrue(visibility.isPrivate(ResourceType.LAYOUT, "activity_main")); assertTrue(visibility.isPrivate(ResourceType.DIMEN, "activity_vertical_margin")); assertFalse(visibility.isPrivate(ResourceType.LAYOUT, "foo")); assertTrue(visibility.isPrivate(ResourceType.LAYOUT, "bar")); assertFalse(visibility.isPrivate(ResourceType.DIMEN, "unknown")); }
@java.lang.Override @javax.annotation.Nonnull public com.android.jack.library.OutputJackLibrary getOutputJackLibrary() { return getOutputJackLibraryFromVfs(); }
public synchronized void endSession() { int threadId = getCallingThreadId(); android.telecom.Logging.Session completedSession = sSessionMapper.get(threadId); if (completedSession == null) { android.telecom.Logging.android.telecom.Log.w(android.telecom.Logging.SessionManager.LOGGING_TAG, "Log.endSession was called with no session active."); return; } completedSession.markSessionCompleted(java.lang.System.currentTimeMillis()); if (!(completedSession.isStartedFromActiveSession())) { android.telecom.Logging.android.telecom.Log.v(android.telecom.Logging.SessionManager.LOGGING_TAG, ((((Session.END_SUBSESSION) + " (dur: ") + (completedSession.getLocalExecutionTime())) + " mS)")); } else { android.telecom.Logging.android.telecom.Log.v(android.telecom.Logging.SessionManager.LOGGING_TAG, ((((Session.END_SUBSESSION) + " (Invisible Subsession) (dur: ") + (completedSession.getLocalExecutionTime())) + " ms)")); } android.telecom.Logging.Session parentSession = completedSession.getParentSession(); sSessionMapper.remove(threadId); endParentSessions(completedSession); if (((parentSession != null) && (!(parentSession.isSessionCompleted()))) && (completedSession.isStartedFromActiveSession())) { sSessionMapper.put(threadId, parentSession); } }
private com.android.ide.common.resources.platform.AttributeInfo parseAttributeTypes(org.w3c.dom.Node attrNode, java.lang.String name) { java.util.TreeSet<com.android.ide.common.resources.platform.AttributeInfo.Format> formats = new java.util.TreeSet<com.android.ide.common.resources.platform.AttributeInfo.Format>(); java.lang.String[] enumValues = null; java.lang.String[] flagValues = null; org.w3c.dom.Node attrFormat = attrNode.getAttributes().getNamedItem("format"); if (attrFormat != null) { for (java.lang.String f : attrFormat.getNodeValue().split("\\|")) { try { com.android.ide.common.api.IAttributeInfo.Format format = AttributeInfo.Format.valueOf(f.toUpperCase()); if (((format != null) && (format != (com.android.ide.common.api.IAttributeInfo.Format.ENUM))) && (format != (com.android.ide.common.api.IAttributeInfo.Format.FLAG))) { formats.add(format); } } catch (java.lang.IllegalArgumentException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, "Unknown format name \'%s\' in <attr name=\"%s\">, file \'%s\'.", f, name, getOsAttrsXmlPath()); } } } enumValues = parseEnumFlagValues(attrNode, "enum", name); if (enumValues != null) { formats.add(AttributeInfo.Format.ENUM); } flagValues = parseEnumFlagValues(attrNode, "flag", name); if (flagValues != null) { formats.add(AttributeInfo.Format.FLAG); } com.android.ide.common.resources.platform.AttributeInfo info = new com.android.ide.common.resources.platform.AttributeInfo(name, formats.toArray(new com.android.ide.common.resources.platform.AttributeInfo.Format[formats.size()])); info.setEnumValues(enumValues); info.setFlagValues(flagValues); return info; }
@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, "IP", "rmnet_data7", java.util.Arrays.asList(new android.net.LinkAddress("12.34.56.78/32")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("98.76.54.32")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("11.22.33.44")), null, 1440); } catch (java.lang.Exception e) { } } if (mDcSuccess) { resultSuccess(result, mDcResponse); } else { resultFail(result, mDcResponse, new java.lang.RuntimeException("Setup data call failed!")); } }
@java.lang.Override public void unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback cb) { if (trackingDefault.contains(cb)) { trackingDefault.remove(cb); } else if (listening.containsKey(cb)) { listening.remove(cb); } else if (requested.containsKey(cb)) { requested.remove(cb); legacyTypeMap.remove(cb); } else { fail("Unexpected callback removed"); } assertFalse(trackingDefault.contains(cb)); assertFalse(listening.containsKey(cb)); assertFalse(requested.containsKey(cb)); }
private ApkSigningBlockUtils.SignerConfig createSigningBlockSignerConfig(com.android.apksig.DefaultApkSignerEngine.SignerConfig signerConfig, boolean apkSigningBlockPaddingSupported, int schemeId) throws java.security.InvalidKeyException { java.util.List<java.security.cert.X509Certificate> certificates = signerConfig.getCertificates(); java.security.PublicKey publicKey = certificates.get(0).getPublicKey(); com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig newSignerConfig = new com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig(); newSignerConfig.privateKey = signerConfig.getPrivateKey(); newSignerConfig.certificates = certificates; switch (schemeId) { case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2 : newSignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v2.V2SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); break; case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3 : try { newSignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v3.V3SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); } catch (java.security.InvalidKeyException e) { newSignerConfig.signatureAlgorithms = null; } break; default : throw new java.lang.IllegalArgumentException("Unknown APK Signature Scheme ID requested"); } return newSignerConfig; }
@java.lang.Override public boolean processMessage(android.os.Message message) { switch (message.what) { case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_INTERFACE_STATUS_CHANGED : if ((message.obj) != (mNetworkObserver)) { break; } boolean isUp = (message.arg1) == 1; onUpChanged(isUp); break; case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_START : break; case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_AP_INTERFACE_BINDER_DEATH : case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_STOP : updateApState(WifiManager.WIFI_AP_STATE_DISABLING, 0); stopSoftAp(); if ((message.what) == (com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_AP_INTERFACE_BINDER_DEATH)) { updateApState(WifiManager.WIFI_AP_STATE_FAILED, WifiManager.SAP_START_FAILURE_GENERAL); } else { updateApState(WifiManager.WIFI_AP_STATE_DISABLED, 0); } transitionTo(mIdleState); break; default : return NOT_HANDLED; } return HANDLED; }
@java.lang.Override protected void readSourceFolder(@com.android.annotations.NonNull java.io.File sourceFolder, @com.android.annotations.NonNull com.android.utils.ILogger logger) throws com.android.ide.common.res2.MergingException { readFiles(sourceFolder, sourceFolder, logger); }
private java.lang.String defaultLogdSizeValue() { java.lang.String defaultValue = android.os.SystemProperties.get(com.android.settings.DevelopmentSettings.SELECT_LOGD_DEFAULT_SIZE_PROPERTY); if ((defaultValue == null) || ((defaultValue.length()) == 0)) { if (android.os.SystemProperties.get("ro.config.low_ram").equals("true")) { defaultValue = com.android.settings.DevelopmentSettings.SELECT_LOGD_SVELTE_DEFAULT_SIZE_VALUE; } else { defaultValue = com.android.settings.DevelopmentSettings.SELECT_LOGD_DEFAULT_SIZE_VALUE; } } return defaultValue; }
private void markCall(@javax.annotation.Nonnull java.lang.String signature, @javax.annotation.Nonnull java.util.List<com.android.jack.ir.ast.JExpression> args, @javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall.DispatchKind dispatchKind) { java.util.concurrent.ConcurrentMap<java.lang.String, com.android.jack.optimizations.common.LiteralValueListTracker> map = (dispatchKind == (JMethodCall.DispatchKind.VIRTUAL)) ? virtual : direct; com.android.jack.optimizations.common.LiteralValueListTracker tracker = map.get(signature); if (tracker == null) { tracker = new com.android.jack.optimizations.common.ConcurrentLiteralValueListTracker(args.size()); com.android.jack.optimizations.common.LiteralValueListTracker existing = map.putIfAbsent(signature, tracker); if (existing != null) { tracker = existing; } } tracker.updateWith(args); }
@com.android.internal.annotations.VisibleForTesting public boolean equalsUids(android.net.NetworkCapabilities nc) { java.util.Set<android.net.UidRange> comparedUids = nc.mUids; if (null == comparedUids) return null == (mUids); if (null == (mUids)) return false; final java.util.Set<android.net.UidRange> uids = new android.util.ArraySet(mUids); for (android.net.UidRange range : comparedUids) { if (!(uids.contains(range))) { return false; } uids.remove(range); } return uids.isEmpty(); }
public void test4_0MeasurementModePeakRms() throws java.lang.Exception { if (!(hasAudioOutput())) { return; } try { getVisualizer(0); mVisualizer.setEnabled(true); assertTrue("visualizer not enabled", mVisualizer.getEnabled()); java.lang.Thread.sleep(100); int status = mVisualizer.setMeasurementMode(Visualizer.MEASUREMENT_MODE_PEAK_RMS); assertEquals("setMeasurementMode for PEAK_RMS doesn't report success", Visualizer.SUCCESS, status); int mode = mVisualizer.getMeasurementMode(); assertEquals("getMeasurementMode doesn't report PEAK_RMS", Visualizer.MEASUREMENT_MODE_PEAK_RMS, mode); } catch (java.lang.IllegalStateException e) { fail("method called in wrong state"); } catch (java.lang.InterruptedException e) { fail("sleep() interrupted"); } finally { releaseVisualizer(); } }
private static void verifyConnectionStateBroadcast(android.bluetooth.BluetoothDevice device, int toState, int fromState, android.content.Intent intent) { org.junit.Assert.assertNotNull(intent); org.junit.Assert.assertEquals(BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED, intent.getAction()); org.junit.Assert.assertEquals(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND, intent.getFlags()); org.junit.Assert.assertEquals(device, intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE)); org.junit.Assert.assertEquals(toState, intent.getIntExtra(BluetoothProfile.EXTRA_STATE, (-1))); org.junit.Assert.assertEquals(fromState, intent.getIntExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, (-1))); }
public void testLongMessage() throws java.io.IOException { byte[] data = new byte[1024 * 1024]; new java.util.Random().nextBytes(data); assertTrue(java.util.Arrays.equals(data, libcore.java.util.zip.GZIPInputStreamTest.gunzip(libcore.java.util.zip.GZIPOutputStreamTest.gzip(data)))); }
private void removeRecentTaskLocked(int userId) { if (userId <= 0) { android.util.Slog.i(com.android.server.am.ActivityManagerService.TAG, ("Can't remove recent task on user " + userId)); return; } for (int i = (mRecentTasks.size()) - 1; i >= 0; --i) { com.android.server.am.TaskRecord tr = mRecentTasks.get(i); if ((tr.userId) == userId) { if (com.android.server.am.ActivityManagerService.DEBUG_TASKS) android.util.Slog.i(com.android.server.am.ActivityManagerService.TAG, ((("remove RecentTask " + tr) + " when finishing user") + userId)); tr.disposeThumbnail(); mRecentTasks.remove(i); } } }
@java.lang.Override public void onDevicesChange() { onRefresh(); }
public void testSkipOnLargeFiles() throws java.lang.Exception { java.io.File largeFile = java.io.File.createTempFile("FileInputStreamTest_testSkipOnLargeFiles", ""); final long requiredFreeSpaceBytes = (3172L * 1024) * 1024; long fileSize = ((3 * 1024L) * 1024) * 1024; final android.system.StructStatVfs statVfs = android.system.Os.statvfs(largeFile.getPath()); final long freeSpaceAvailableBytes = (statVfs.f_bsize) * (statVfs.f_bavail); if (freeSpaceAvailableBytes < requiredFreeSpaceBytes) { return; } try { libcore.java.io.FileInputStreamTest.allocateEmptyFile(largeFile, fileSize); assertEquals(fileSize, largeFile.length()); try (java.io.FileInputStream fis = new java.io.FileInputStream(largeFile)) { long lastByte = fileSize - 1; assertEquals(0, Libcore.os.lseek(fis.getFD(), 0, OsConstants.SEEK_CUR)); assertEquals(lastByte, fis.skip(lastByte)); } } finally { assertTrue(largeFile.delete()); } }
private void addRightClickMenu(final org.eclipse.swt.widgets.Table table) { final org.eclipse.jface.action.Action filterAction = new org.eclipse.jface.action.Action("Filter similar messages..") { @java.lang.Override public void run() { java.util.List<com.android.ddmuilib.logcat.LogCatMessage> selectedMessages = getSelectedLogCatMessages(); if ((selectedMessages.size()) == 0) { addNewFilter(); } else { com.android.ddmuilib.logcat.LogCatMessage m = selectedMessages.get(0); addNewFilter(m.getTag(), m.getMessage(), m.getPid(), m.getAppName(), m.getLogLevel()); } } }; final org.eclipse.jface.action.MenuManager mgr = new org.eclipse.jface.action.MenuManager(); mgr.add(filterAction); final org.eclipse.swt.widgets.Menu menu = mgr.createContextMenu(table); table.addListener(SWT.MenuDetect, new org.eclipse.swt.widgets.Listener() { @java.lang.Override public void handleEvent(org.eclipse.swt.widgets.Event event) { org.eclipse.swt.graphics.Point pt = table.getDisplay().map(null, table, new org.eclipse.swt.graphics.Point(event.x, event.y)); org.eclipse.swt.graphics.Rectangle clientArea = table.getClientArea(); boolean header = ((pt.y) > (clientArea.y)) && ((pt.y) < ((clientArea.y) + (table.getHeaderHeight()))); table.setMenu((header ? null : menu)); } }); }
@org.junit.Test public void testStateTransition_AudioDisconnectingToConnected_Timeout() { int numBroadcastsSent = setUpAudioDisconnectingState(); numBroadcastsSent++; verify(mHeadsetService, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.CONNECT_TIMEOUT_TEST_WAIT_MILLIS).times(numBroadcastsSent)).sendBroadcastAsUser(mIntentArgument.capture(), eq(UserHandle.ALL), eq(HeadsetService.BLUETOOTH_PERM)); com.android.bluetooth.hfp.HeadsetStateMachineTest.verifyAudioStateBroadcast(mTestDevice, BluetoothHeadset.STATE_AUDIO_DISCONNECTED, BluetoothHeadset.STATE_AUDIO_CONNECTED, mIntentArgument.getValue()); org.junit.Assert.assertThat(mHeadsetStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(HeadsetStateMachine.Connected.class)); }
private void onAudioStateChanged(int state, byte[] address) { com.android.bluetooth.a2dp.A2dpStackEvent event = new com.android.bluetooth.a2dp.A2dpStackEvent(A2dpStackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED); event.valueInt = state; event.device = getDevice(address); if (com.android.bluetooth.a2dp.A2dpNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpNativeInterface.TAG, ("onAudioStateChanged: " + event)); } sendMessageToService(event); }
public void stopNetworkScan(int scanId) { synchronized(mScheduler) { if (((((mScheduler.mLiveRequestInfo) != null) && (scanId == (mScheduler.mLiveRequestInfo.mScanId))) && ((android.os.Binder.getCallingUid()) == (mScheduler.mLiveRequestInfo.mUid))) || ((((mScheduler.mPendingRequestInfo) != null) && (scanId == (mScheduler.mPendingRequestInfo.mScanId))) && ((android.os.Binder.getCallingUid()) == (mScheduler.mPendingRequestInfo.mUid)))) { mHandler.obtainMessage(com.android.internal.telephony.NetworkScanRequestTracker.CMD_STOP_NETWORK_SCAN, scanId, 0).sendToTarget(); } else { throw new java.lang.IllegalArgumentException((("Scan with id: " + scanId) + " does not exist!")); } } }
@org.junit.Test public void recoveryFromExceptionOnMainThreadLoopMainThreadUntilIdle() throws java.lang.Exception { final java.lang.RuntimeException poison = new java.lang.RuntimeException("oops"); try { Espresso.onView(withId(R.id.enter_data_edit_text)).perform(new android.support.test.espresso.EspressoEdgeCaseTest.TestAction() { @java.lang.Override public void perform(android.support.test.espresso.UiController controller, android.view.View view) { mainHandler.post(new java.lang.Runnable() { @java.lang.Override public void run() { throw poison; } }); controller.loopMainThreadUntilIdle(); } }); fail("should throw"); } catch (java.lang.RuntimeException re) { if (re == poison) { } else { throw re; } } Espresso.onView(withId(R.id.enter_data_edit_text)).perform(typeText("Hello World111")); Espresso.onView(withId(R.id.enter_data_edit_text)).check(matches(withText("Hello World111"))); }
public void testSimpleMapping() throws java.lang.Exception { com.android.tools.perflib.heap.Snapshot snapshot = new com.android.tools.perflib.heap.HprofParser(new com.android.tools.perflib.heap.io.MemoryMappedFileBuffer(file)).parse(); assertSnapshotCorrect(snapshot); }
@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) { for (com.android.jack.ir.ast.JParameter parameter : method.getParams()) { addParameterName((parameter.isNamePresent() ? parameter.getName() : null)); accessFlags.add(new com.android.jack.ir.ast.JIntLiteral(si, ((parameter.getModifier()) & (~(com.android.jack.ir.ast.JModifier.NAME_PRESENT))))); } return super.visit(method); }
public int getExpectedSamplingPeriodUs() { if (!(isDelayRateTestable())) { throw new java.lang.IllegalArgumentException("rateUs cannot be SENSOR_DELAY_[GAME|UI|NORMAL]"); } int expectedSamplingPeriodUs = mSamplingPeriodUs; int sensorMaxDelay = mSensor.getMaxDelay(); if (sensorMaxDelay > 0) { expectedSamplingPeriodUs = java.lang.Math.min(expectedSamplingPeriodUs, sensorMaxDelay); } return java.lang.Math.max(expectedSamplingPeriodUs, mSensor.getMinDelay()); }
private void srcToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.io.File... sources) { buildJackCall(args); args.add("--verbose"); args.add(verbosityLevel.name()); args.add("--sanity-checks"); args.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { args.add("--incremental-folder"); args.add(incrementalFolder.getAbsolutePath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if ((classpath.size()) > 0) { args.add("--classpath"); args.add(getClasspathAsString()); } for (java.io.File res : resImport) { args.add("--import-resource"); args.add(res.getPath()); } for (java.io.File meta : metaImport) { args.add("--import-meta"); args.add(meta.getPath()); } args.addAll(extraJackArgs); for (java.io.File jarjarFile : jarjarRules) { args.add("--config-jarjar"); args.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add("--config-proguard"); args.add(flags.getAbsolutePath()); } if (withDebugInfos) { args.add("-g"); } addAnnotationProcessorArgs(args); for (java.io.File staticLib : staticLibs) { args.add("--import"); args.add(staticLib.getAbsolutePath()); } }
public boolean provisionDiscovery(android.net.wifi.p2p.WifiP2pConfig config) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure("provisionDiscovery"))) return false; int targetMethod = wpsInfoToConfigMethod(config.wps.setup); if (targetMethod == (-1)) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ("Unrecognized WPS configuration method: " + (config.wps.setup))); return false; } if ((config.deviceAddress) == null) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, "Cannot parse null mac address."); return false; } byte[] macAddress = null; try { macAddress = com.android.server.wifi.util.NativeUtil.macAddressToByteArray(config.deviceAddress); } catch (java.lang.Exception e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, "Could not parse peer mac address.", e); return false; } com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult((((("provisionDiscovery(" + (config.deviceAddress)) + ", ") + (config.wps.setup)) + ")")); try { result.setResult(mISupplicantP2pIface.provisionDiscovery(macAddress, targetMethod)); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ("ISupplicantP2pIface exception: " + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }
@com.android.annotations.Nullable public static com.android.ide.common.blame.Message.Kind findIgnoringCase(java.lang.String s) { return com.android.ide.common.blame.Message.Kind.findIgnoringCase(s, null); }
public void test_socket_accept_Nonblocking_Bound() throws java.io.IOException { serverChannel.configureBlocking(false); serverChannel.bind(null); java.net.ServerSocket gotSocket = serverChannel.socket(); try { gotSocket.accept(); fail("Should throw an IllegalBlockingModeException"); } catch (java.nio.channels.IllegalBlockingModeException expected) { } serverChannel.close(); try { gotSocket.accept(); fail("Should throw a ClosedChannelException"); } catch (java.nio.channels.ClosedChannelException expected) { } }
@org.junit.Test public void testOpenUdpEncapSocketTagsSocket() throws java.lang.Exception { com.android.server.IpSecService.UidFdTagger mockTagger = mock(IpSecService.UidFdTagger.class); com.android.server.IpSecService testIpSecService = new com.android.server.IpSecService(mMockContext, mMockIpSecSrvConfig, mockTagger); IpSecUdpEncapResponse udpEncapResp = testIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(udpEncapResp); assertEquals(IpSecManager.Status.OK, udpEncapResp.status); java.io.FileDescriptor sockFd = udpEncapResp.fileDescriptor.getFileDescriptor(); org.mockito.ArgumentMatcher<java.io.FileDescriptor> fdMatcher = ( argFd) -> { return fileDescriptorsEqual(sockFd, argFd); }; verify(mockTagger).tag(argThat(fdMatcher), eq(android.system.Os.getuid())); testIpSecService.closeUdpEncapsulationSocket(udpEncapResp.resourceId); udpEncapResp.fileDescriptor.close(); }
@com.android.annotations.Nullable public com.android.sdklib.IAndroidTarget getTargetFromHashString(@com.android.annotations.Nullable java.lang.String hash) { return mLocalSdk.getTargetFromHashString(hash); }
@java.lang.Override public void mergeConference(java.lang.String callId, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startSession(sessionInfo, android.telecom.ConnectionService.SESSION_MERGE_CONFERENCE); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_MERGE_CONFERENCE, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }
public void mincore(long address, long byteCount, byte[] vector) throws android.system.ErrnoException;
@java.lang.Override public void evaluate() throws java.lang.Throwable { for (vogar.testing.InterceptOutputStreams.Stream stream : streams) { vogar.testing.InterceptOutputStreams.State state = new vogar.testing.InterceptOutputStreams.State(stream); streams2State.put(stream, state); } try { base.evaluate(); } finally { for (vogar.testing.InterceptOutputStreams.State state : streams2State.values()) { state.reset(); } streams2State.clear(); } }
@org.junit.Test public void testGetEuiccInfo1() { int channel = mockLogicalChannelResponses("BF20030102039000"); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<byte[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.getEuiccInfo1(resultCaptor, mHandler); resultCaptor.await(); assertEquals("BF2003010203", com.android.internal.telephony.uicc.IccUtils.bytesToHexString(resultCaptor.result)); verifyStoreData(channel, "BF2000"); }
private void checkAcosFloat3Float3() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, 7260668130254640958L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); script.forEach_testAcosFloat3Float3(in, out); verifyResultsAcosFloat3Float3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAcosFloat3Float3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAcosFloat3Float3(in, out); verifyResultsAcosFloat3Float3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAcosFloat3Float3: " + (e.toString()))); } }
private boolean wakeUp(long wakeTime, boolean wakeInTheaterMode) { if ((!wakeInTheaterMode) && (isTheaterModeEnabled())) { return false; } mPowerManager.wakeUp(wakeTime); return true; }
protected boolean isMyRestrictBackgroundStatus(int expectedStatus) throws java.lang.Exception { final int actualStatus = mCm.getRestrictBackgroundStatus(); if (expectedStatus != actualStatus) { android.util.Log.d(com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase.TAG, ((("Expected: " + (toString(expectedStatus))) + " but actual: ") + (toString(actualStatus)))); return false; } return true; }
@org.junit.Test public void testSetNetworkSelectionModeAutomatic() { try { mTelephonyManager.setNetworkSelectionModeAutomatic(); fail("Expected SecurityException. App does not have carrier privileges."); } catch (java.lang.SecurityException expected) { } }
@java.lang.Override int getConnectionStateInt() { return android.bluetooth.BluetoothProfile.STATE_CONNECTING; }
private void checkErfFloat2Float2() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -8655239448326554444L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testErfFloat2Float2(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testErfFloat2Float2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testErfFloat2Float2(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testErfFloat2Float2: " + (e.toString()))); } }
private static boolean isShortCodeUSSD(java.lang.String dialString, com.android.internal.telephony.gsm.GSMPhone phone) { if ((dialString != null) && ((dialString.length()) <= (com.android.internal.telephony.gsm.GsmMmiCode.MAX_LENGTH_SHORT_CODE))) { if (phone.isInCall()) { return true; } if (((dialString.length()) != (com.android.internal.telephony.gsm.GsmMmiCode.MAX_LENGTH_SHORT_CODE)) || ((dialString.charAt(0)) != '1')) { return true; } } return false; }
@java.lang.Override int blend() { float r = ((srcR) * (dstA)) + ((1 - (srcA)) * (dstR)); float g = ((srcG) * (dstA)) + ((1 - (srcA)) * (dstG)); float b = ((srcB) * (dstA)) + ((1 - (srcA)) * (dstB)); float a = ((srcA) * (dstA)) + ((1 - (srcA)) * (dstA)); return pack(a, r, g, b); }
public java.lang.String getGccToolchainVersion(com.android.build.gradle.internal.core.Abi abi) { if ((toolchain) == (com.android.build.gradle.internal.core.Toolchain.GCC)) { return toolchainVersion.isEmpty() ? getDefaultToolchainVersion(abi) : toolchainVersion; } else { return abi.supports64Bits() ? Toolchain.CLANG.getDefaultGccVersion64() : Toolchain.CLANG.getDefaultGccVersion32(); } }
void setDebugInfoLevel(@javax.annotation.Nonnull com.android.jack.api.v01.DebugInfoLevel debugInfoLevel) throws com.android.jack.api.v01.ConfigurationException;
private void checkDstFields(java.util.Calendar cal, java.lang.String description, int expectedZoneOffset, int expectedDstOffset) { assertEquals(("Incorrect ZONE_OFFSET: " + description), expectedZoneOffset, cal.get(java.util.Calendar.ZONE_OFFSET)); assertEquals(("Incorrect DST_OFFSET: " + description), expectedDstOffset, cal.get(java.util.Calendar.DST_OFFSET)); }
@java.lang.Override org.w3c.dom.Node getDetailsXml(org.w3c.dom.Document document) { org.w3c.dom.Element element = document.createElement("generated-file"); element.setAttribute(SdkConstants.ATTR_PATH, mGeneratedFile.getAbsolutePath()); element.setAttribute(SdkConstants.ATTR_TYPE, getType().getName()); element.setAttribute(ResourceFile.ATTR_QUALIFIER, mQualifiers); return element; }
public void fdatasync(java.io.FileDescriptor fd) throws android.system.ErrnoException;
@java.lang.Override public void mark(int reserve) { mark = cursor; }
public static int magicToApi(byte[] magic) { if ((magic.length) != 8) { return -1; } if ((((((magic[0]) != 'd') || ((magic[1]) != 'e')) || ((magic[2]) != 'x')) || ((magic[3]) != '\n')) || ((magic[7]) != '\u0000')) { return -1; } java.lang.String version = (("" + ((char) (magic[4]))) + ((char) (magic[5]))) + ((char) (magic[6])); if (version.equals(com.android.jack.dx.dex.DexFormat.VERSION_CURRENT)) { return com.android.jack.dx.dex.DexFormat.API_CURRENT; } else if (version.equals(com.android.jack.dx.dex.DexFormat.VERSION_FOR_API_13)) { return com.android.jack.dx.dex.DexFormat.API_NO_EXTENDED_OPCODES; } return -1; }
public void test_read$BII3() throws java.io.IOException { java.io.File resources = tests.support.resource.Support_Resources.createTempFolder(); tests.support.resource.Support_Resources.copyFile(resources, null, "Broken_manifest.jar"); java.io.FileInputStream fis = new java.io.FileInputStream(new java.io.File(resources, "Broken_manifest.jar")); try (java.util.zip.InflaterInputStream iis = new java.util.zip.InflaterInputStream(fis)) { try { iis.read(); fail("IOException expected."); } catch (java.io.IOException ee) { } } }
private void onLockedAllRecordsLoaded() { setSimLanguageFromEF(); if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_LOCKED)) { mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED)) { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } else { loge(("onLockedAllRecordsLoaded: unexpected mLockedRecordsReqReason " + (mLockedRecordsReqReason))); } }
private static java.lang.String getPrettyName(com.android.sdklib.devices.Device d, boolean leadZeroes) { if (d == null) { return ""; } java.lang.String name = d.getName(); if (name.equals("3.7 FWVGA slider")) { name = "3.7in FWVGA slider"; } java.util.regex.Matcher matcher = com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.PATTERN.matcher(name); if (matcher.matches()) { java.lang.String size = matcher.group(1); java.lang.String n = matcher.group(2); int dot = size.indexOf('.'); if (dot == (-1)) { size = size + ".0"; dot = (size.length()) - 2; } if (leadZeroes && (dot < 3)) { size = ("000".substring(dot)) + size; } name = (size + "\" ") + n; } return name; }
public static int $noinline$SubNeg1(int arg1, int arg2) { if (Main.doThrow) { throw new java.lang.Error(); } return (-arg1) - arg2; }
private static java.lang.String stripCategoryPrefix(java.lang.String name) { return name.substring(((name.indexOf(':')) + 1)); }
@org.junit.Test public void test001() { junit.framework.Assert.assertEquals(13, com.android.jack.java8.lambda.test042.Tests.getValue(10)); }
private void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { synchronized(mScoClients) { android.util.Log.i(com.android.server.audio.AudioService.TAG, ((("setBtScoActiveDevice: " + (mBluetoothHeadsetDevice)) + " -> ") + btDevice)); final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice, false))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, ("setBtScoActiveDevice() failed to remove previous device " + previousActiveDevice)); } if (!(handleBtScoActiveDeviceChange(btDevice, true))) { android.util.Log.e(com.android.server.audio.AudioService.TAG, ("setBtScoActiveDevice() failed to add new device " + btDevice)); btDevice = null; } mBluetoothHeadsetDevice = btDevice; if ((mBluetoothHeadsetDevice) == null) { resetBluetoothSco(); } } } }
public int getsockoptInt(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException { return os.getsockoptInt(fd, level, option); }
public void onRttInitiationSuccess(android.telecom.Connection c) { }
public void test_isDecimalSeparatorAlwaysShown() { java.text.DecimalFormat df = new java.text.DecimalFormat("###0.##"); assertTrue("Wrong unset value", (!(df.isDecimalSeparatorAlwaysShown()))); df = new java.text.DecimalFormat("###0.00"); assertTrue("Wrong unset2 value", (!(df.isDecimalSeparatorAlwaysShown()))); df = new java.text.DecimalFormat("###0."); assertTrue("Wrong set value", df.isDecimalSeparatorAlwaysShown()); }
@java.lang.Override public void onChange(boolean unused) { synchronized(this) { if (isBluetoothPersistedStateOn()) { if (isAirplaneModeOn()) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_AIRPLANE); } else { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH); } } int st = android.bluetooth.BluetoothAdapter.STATE_OFF; try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { st = mBluetooth.getState(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Unable to call getState", e); return; } finally { mBluetoothLock.readLock().unlock(); } android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ("Airplane Mode change - current state: " + (android.bluetooth.BluetoothAdapter.nameForState(st)))); if (isAirplaneModeOn()) { clearBleApps(); if (st == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON)) { try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { mBluetooth.onBrEdrDown(); mEnable = false; mEnableExternal = false; } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG, "Unable to call onBrEdrDown", e); } finally { mBluetoothLock.readLock().unlock(); } } else if (st == (android.bluetooth.BluetoothAdapter.STATE_ON)) { sendDisableMsg(BluetoothProtoEnums.ENABLE_DISABLE_REASON_AIRPLANE_MODE, mContext.getPackageName()); } } else if (mEnableExternal) { sendEnableMsg(mQuietEnableExternal, BluetoothProtoEnums.ENABLE_DISABLE_REASON_AIRPLANE_MODE, mContext.getPackageName()); } } }
public void test_formatDouble_wideRange() { final java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(java.util.Locale.US); java.text.DecimalFormat format = new java.text.DecimalFormat("#0.#", dfs); format.setMaximumIntegerDigits(400); format.setMaximumFractionDigits(400); for (int i = 0; i < 309; i++) { java.lang.String tval = "1"; for (int j = 0; j < i; j++) { tval += "0"; } double d = java.lang.Double.parseDouble(tval); java.lang.String result = format.format(d); assertEquals(((((i + ") e:") + tval) + " r:") + result), tval, result); } for (int i = 0; i < 322; i++) { java.lang.String tval = "0."; for (int j = 0; j < i; j++) { tval += "0"; } tval += "1"; double d = java.lang.Double.parseDouble(tval); java.lang.String result = format.format(d); assertEquals(((((i + ") e:") + tval) + " r:") + result), tval, result); } }
public boolean p2pReinvoke(int netId, java.lang.String deviceAddress) { if ((android.text.TextUtils.isEmpty(deviceAddress)) || (netId < 0)) return false; if ((com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.reinvoke(netId, deviceAddress); } else { return doBooleanCommand(((("P2P_INVITE persistent=" + netId) + " peer=") + deviceAddress)); } }
public void testBrokenSet3() throws java.lang.Exception { java.io.File root = com.android.testutils.TestUtils.getRoot("resources", "brokenSet3"); com.android.ide.common.res2.ResourceSet set = new com.android.ide.common.res2.ResourceSet("main"); set.addSource(root); boolean gotException = false; com.android.ide.common.res2.RecordingLogger logger = new com.android.ide.common.res2.RecordingLogger(); try { set.loadFromFiles(logger); } catch (com.android.ide.common.res2.MergingException e) { gotException = true; assertEquals(((new java.io.File(root, (("values" + (java.io.File.separator)) + "values.xml")).getAbsolutePath()) + ": Error: Found item Attr/d_common_attr more than one time"), e.getMessage()); } assertTrue("ResourceSet processing should have failed, but didn't", gotException); assertFalse(logger.getErrorMsgs().isEmpty()); }
public void run() { if ((threadIndex) == 0) { for (int i = 0; i < (Main.totalOperations); ++i) { if ((i % 50) == 0) { Main.deoptimizeAll(); } if ((i % 50) == 25) { Main.undeoptimizeAll(); } } Main.done = true; } else { while (!(Main.done)) { java.lang.String str = $noinline$run0(); if (!(str.equals("abc"))) { java.lang.System.out.println(("Failure 2! " + str)); java.lang.System.exit(0); } } } }
@javax.annotation.Nonnull public com.android.jack.ir.ast.JMethod getMethod(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodId methodId) throws com.android.jack.lookup.JMethodLookupException { com.android.jack.ir.ast.JMethodIdWide methodIdWide = methodId.getMethodIdWide(); return getMethod(methodIdWide.getName(), methodId.getType(), methodIdWide.getParamTypes()); }
@java.lang.Override public void verify(java.security.PublicKey key, java.lang.String sigProvider) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.SignatureException, java.security.cert.CertificateException { verifyInternal(key, sigProvider); }
@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); nc.setSingleUid(android.os.Binder.getCallingUid()); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(("listenForNetwork for " + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }
@java.lang.Override public void parse(com.android.assetstudiolib.vectordrawable.VdTree tree, org.xml.sax.Attributes attributes) { com.android.assetstudiolib.vectordrawable.VdGroup g = parseGroupAttributes(attributes); tree.add(g); }
boolean isCallingFromSystemUid() { return (mInjector.binderGetCallingUid()) == (SYSTEM_UID); }
void handleCallBarringResult(boolean status) { mIsActivated = status; if (com.android.phone.CallBarringEditPreference.DBG) { android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ("handleCallBarringResult: mIsActivated=" + (mIsActivated))); } }
@java.lang.Override public void getDataCallList(android.os.Message response) { }
boolean isPseudoLocalesEnabled();
private void syncCheckboxView(android.view.View view) { if (view instanceof android.widget.CompoundButton) { ((android.widget.CompoundButton) (view)).setOnCheckedChangeListener(null); } if (view instanceof android.widget.Checkable) { ((android.widget.Checkable) (view)).setChecked(mChecked); } if (view instanceof android.widget.CompoundButton) { ((android.widget.CompoundButton) (view)).setOnCheckedChangeListener(mListener); } }
void onRemoteRttRequest() { for (android.telecom.RemoteConnection.CallbackRecord record : mCallbackRecords) { final android.telecom.RemoteConnection connection = this; final android.telecom.RemoteConnection.Callback callback = record.getCallback(); record.getHandler().post(() -> callback.onRemoteRttRequest(connection)); } }
void getIccSlotsStatus(android.os.Message result);
@java.lang.Override public void handle(java.lang.String target, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, int dispatch) throws java.io.IOException { if (!(com.google.gct.login.CancellableServerReceiver.CALLBACK_PATH.equals(target))) { return; } ((com.google.api.client.repackaged.org.mortbay.jetty.Request) (request)).setHandled(true); lock.lock(); try { error = request.getParameter("error"); code = request.getParameter("code"); gotAuthorizationResponse.signal(); } finally { lock.unlock(); } response.sendRedirect(((error) == null ? com.google.gct.login.CancellableServerReceiver.CallbackHandler.AUTH_SUCCESS_LANDING_PAGE : com.google.gct.login.CancellableServerReceiver.CallbackHandler.AUTH_FAILURE_LANDING_PAGE)); response.flushBuffer(); }
@java.lang.Override public final int startActivityWithConfig(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int startFlags, android.content.res.Configuration config, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller("startActivityWithConfig"); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, "startActivityWithConfig", null); int ret = mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, startFlags, null, null, config, bOptions, false, userId, null, null, "startActivityWithConfig"); return ret; }
public void test_emptyFilename() throws java.lang.Exception { java.io.File f = new java.io.File(""); assertFalse(f.canExecute()); assertFalse(f.canRead()); assertFalse(f.canWrite()); try { f.createNewFile(); fail("expected IOException"); } catch (java.io.IOException expected) { } assertFalse(f.delete()); f.deleteOnExit(); assertFalse(f.exists()); assertEquals("", f.getName()); assertEquals(null, f.getParent()); assertEquals(null, f.getParentFile()); assertEquals("", f.getPath()); assertFalse(f.isAbsolute()); assertFalse(f.isDirectory()); assertFalse(f.isFile()); assertFalse(f.isHidden()); assertEquals(0, f.lastModified()); assertEquals(0, f.length()); assertEquals(null, f.list()); assertEquals(null, f.list(null)); assertEquals(null, f.listFiles()); assertEquals(null, f.listFiles(((java.io.FileFilter) (null)))); assertEquals(null, f.listFiles(((java.io.FilenameFilter) (null)))); assertFalse(f.mkdir()); assertFalse(f.mkdirs()); assertFalse(f.renameTo(f)); assertFalse(f.setLastModified(123)); assertFalse(f.setExecutable(true)); assertFalse(f.setReadOnly()); assertFalse(f.setReadable(true)); assertFalse(f.setWritable(true)); java.lang.String cwd = java.lang.System.getProperty("user.dir"); assertEquals(new java.io.File(cwd), f.getAbsoluteFile()); assertEquals(cwd, f.getAbsolutePath()); }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); if (mHasFeature) { installAppAsUser(com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_APK, mPrimaryUserId); if (!(setDeviceOwner((((com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_PKG) + "/") + (com.android.cts.devicepolicy.DeviceOwnerTest.ADMIN_RECEIVER_TEST_CLASS)), mPrimaryUserId, false))) { removeAdmin((((com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_PKG) + "/") + (com.android.cts.devicepolicy.DeviceOwnerTest.ADMIN_RECEIVER_TEST_CLASS)), mPrimaryUserId); getDevice().uninstallPackage(com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_PKG); fail("Failed to set device owner"); } } mHasEphemeralUserFeature = ((mHasFeature) && (canCreateAdditionalUsers(1))) && (hasUserSplit()); mHasDisabledEphemeralUserFeature = ((mHasFeature) && (canCreateAdditionalUsers(1))) && (!(hasUserSplit())); mHasCreateAndManageUserFeature = (mHasFeature) && (canCreateAdditionalUsers(1)); }
@org.junit.Test public void int_to_char() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(INT_TO_CHAR).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }
@android.test.suitebuilder.annotation.LargeTest public void testReplaceSdcard() { if (android.os.Environment.isExternalStorageEmulated()) { return; } sampleReplaceFromRawResource(((android.content.pm.PackageManager.INSTALL_REPLACE_EXISTING) | (android.content.pm.PackageManager.INSTALL_EXTERNAL))); }
public void setFloat(java.lang.Object object, float value) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException { setFloat(object, value, isAccessible()); }
public void writeTo(java.io.OutputStream out, java.io.Writer humanOut, boolean verbose) throws java.io.IOException { writeTo(out, null, humanOut, verbose); }
@java.lang.Override public void removeItem(@com.android.annotations.NonNull com.android.ide.common.res2.AssetItem removedItem, @com.android.annotations.Nullable com.android.ide.common.res2.AssetItem replacedBy) throws com.android.ide.common.res2.ConsumerException { if (replacedBy == null) { java.io.File removedFile = new java.io.File(getRootFolder(), removedItem.getName()); removedFile.delete(); } }
@android.test.suitebuilder.annotation.MediumTest public void testPn544Sane() throws java.lang.Exception { java.io.File f = new java.io.File("/dev/pn544"); assertFalse(f.canRead()); assertFalse(f.canWrite()); assertFalse(f.canExecute()); android.permission.cts.FileSystemPermissionTest.assertFileOwnedBy(f, "nfc"); android.permission.cts.FileSystemPermissionTest.assertFileOwnedByGroup(f, "nfc"); }
public static java.lang.String format(com.ibm.icu.util.ULocale icuLocale, com.ibm.icu.util.Calendar time, int flags, com.ibm.icu.text.DisplayContext displayContext) { java.lang.String skeleton = libcore.icu.DateUtilsBridge.toSkeleton(time, flags); java.lang.String key = (((skeleton + "\t") + icuLocale) + "\t") + (time.getTimeZone()); synchronized(libcore.icu.DateTimeFormat.CACHED_FORMATTERS) { com.ibm.icu.text.DateFormat formatter = libcore.icu.DateTimeFormat.CACHED_FORMATTERS.get(key); if (formatter == null) { com.ibm.icu.text.DateTimePatternGenerator generator = com.ibm.icu.text.DateTimePatternGenerator.getInstance(icuLocale); formatter = new com.ibm.icu.text.SimpleDateFormat(generator.getBestPattern(skeleton), icuLocale); libcore.icu.DateTimeFormat.CACHED_FORMATTERS.put(key, formatter); } formatter.setContext(displayContext); return formatter.format(time); } }
public void testVFE7() { try { new dot.junit.opcodes.iget_byte.d.T_iget_byte_12().run(); fail("expected an IllegalAccessError exception"); } catch (java.lang.IllegalAccessError e) { } }
@java.lang.Override public boolean setHwPnoList(com.android.server.wifi.WifiNative.PnoSettings settings, com.android.server.wifi.WifiNative.PnoEventHandler eventHandler) { synchronized(mSettingsLock) { if ((mPnoSettings) != null) { android.util.Log.w(com.android.server.wifi.scanner.WificondScannerImpl.TAG, "Already running a PNO scan"); return false; } mPnoEventHandler = eventHandler; mPnoSettings = settings; processPendingScans(); return true; } }
public void testAesGcm128Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }
public void testBasicDiamond() { com.android.tools.perflib.heap.Heap heap = new com.android.tools.perflib.heap.analysis.HeapBuilder(4).addReference(1, 2).addReference(1, 3).addReference(2, 4).addReference(3, 4).addRoot(1).getHeap(); assertEquals(10, heap.getInstance(1).getCompositeSize()); assertEquals(6, heap.getInstance(2).getCompositeSize()); assertEquals(7, heap.getInstance(3).getCompositeSize()); assertEquals(4, heap.getInstance(4).getCompositeSize()); }
private void monitorExpiredPrinters() { if (((mExpirePrinters) == null) && (!(mPrinters.isEmpty()))) { mExpirePrinters = mPrintService.delay(com.android.bips.LocalDiscoverySession.PRINTER_EXPIRATION_MILLIS, () -> { mExpirePrinters = null; boolean allFound = true; List<android.print.PrinterId> idsToRemove = new com.android.bips.ArrayList<>(); for (com.android.bips.LocalPrinter localPrinter : mPrinters.values()) { if (localPrinter.isExpired()) { if (com.android.bips.LocalDiscoverySession.DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG, ("Expiring " + localPrinter)); idsToRemove.add(localPrinter.getPrinterId()); } if (!(localPrinter.isFound())) { allFound = false; } } for (android.print.PrinterId id : idsToRemove) { mPrinters.remove(id); } removePrinters(idsToRemove); if (!allFound) { monitorExpiredPrinters(); } }); } }
private static void printClassInstanceFields(com.android.ahat.Doc doc, com.android.ahat.Query query, com.android.ahat.heapdump.AhatClassInstance inst) { doc.section("Fields"); doc.table(new com.android.ahat.Column("Type"), new com.android.ahat.Column("Name"), new com.android.ahat.Column("Value")); com.android.ahat.SubsetSelector<com.android.ahat.heapdump.FieldValue> selector = new com.android.ahat.SubsetSelector(query, com.android.ahat.ObjectHandler.INSTANCE_FIELDS_ID, inst.getInstanceFields()); for (com.android.ahat.heapdump.FieldValue field : selector.selected()) { doc.row(com.android.ahat.DocString.text(field.getType()), com.android.ahat.DocString.text(field.getName()), com.android.ahat.Summarizer.summarize(field.getValue())); } doc.end(); selector.render(doc); }
boolean connectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH_ADMIN permission"); synchronized(mStateMachines) { android.bluetooth.BluetoothDevice device = mActiveDevice; if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: no active device is selected"); return false; } return connectAudio(device); } }
public static void setIsExtendedLoggingEnabled(boolean isExtendedLoggingEnabled) { if ((android.telecom.Log.sIsUserExtendedLoggingEnabled) == isExtendedLoggingEnabled) { return; } if ((android.telecom.Log.sEventManager) != null) { android.telecom.Log.sEventManager.changeEventCacheSize((isExtendedLoggingEnabled ? android.telecom.Log.EVENTS_TO_CACHE_DEBUG : android.telecom.Log.EVENTS_TO_CACHE)); } android.telecom.Log.sIsUserExtendedLoggingEnabled = isExtendedLoggingEnabled; if (android.telecom.Log.sIsUserExtendedLoggingEnabled) { android.telecom.Log.sUserExtendedLoggingStopTime = (java.lang.System.currentTimeMillis()) + (android.telecom.Log.EXTENDED_LOGGING_DURATION_MILLIS); } else { android.telecom.Log.sUserExtendedLoggingStopTime = 0; } }
void trackSavedCandidate(@android.annotation.Nullable java.lang.Integer score, android.net.wifi.WifiConfiguration config, android.net.wifi.ScanResult scanResult) { if ((score != null) && ((score > (mHighScore)) || (((mBestCandidateType) == (com.android.server.wifi.ExternalScoreEvaluator.ExternalScoreTracker.EXTERNAL_SCORED_UNTRUSTED_NETWORK)) && (score == (mHighScore))))) { mHighScore = score; mSavedConfig = config; mScanResultCandidate = scanResult; mBestCandidateType = com.android.server.wifi.ExternalScoreEvaluator.ExternalScoreTracker.EXTERNAL_SCORED_SAVED_NETWORK; localLog(((com.android.server.wifi.WifiNetworkSelector.toScanId(scanResult)) + " becomes the new externally scored saved network candidate.")); } }
@org.junit.Test public void generateVerityTreeRootHashFromDummyDataSource() throws java.lang.Exception { byte[] sampleEoCDFromDisk = new byte[]{ 80, 75, 5, 6, 0, 0, 0, 0, 6, 0, 6, 0, 121, 1, 0, 0, 48, 22, 0, 0, 0, 0 }; com.android.apksig.internal.util.VerityTreeBuilder builder = new com.android.apksig.internal.util.VerityTreeBuilder(null); byte[] rootHash = builder.generateVerityTreeRootHash(com.android.apksig.util.DataSources.asDataSource(java.nio.ByteBuffer.allocate(4096)), makeStringDataSource("this is central directory (fake data)"), com.android.apksig.util.DataSources.asDataSource(java.nio.ByteBuffer.wrap(sampleEoCDFromDisk))); junit.framework.TestCase.assertEquals("7ddb07e6a24ed786ec6edd19cb4f823fb1d657a81ba531e93fe70fdf5b9988ba", com.android.apksig.internal.util.HexEncoding.encode(rootHash)); }
@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { super.widgetSelected(e); if (mSystemButton.getSelection()) { setupResourceList(); mNewButton.setEnabled(false); } }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { java.lang.String action = intent.getAction(); if (action.equals(MediaPlaybackService.PLAYBACK_COMPLETE)) { java.lang.String msg = getString(R.string.fail_to_start_stream); android.widget.Toast mt = android.widget.Toast.makeText(this, msg, Toast.LENGTH_SHORT); mt.show(); finish(); return; } try { MusicUtils.sService.play(); intent = new android.content.Intent("com.android.music.PLAYBACK_VIEWER"); intent.putExtra("oneshot", true); startActivity(intent); } catch (android.os.RemoteException ex) { } finish(); }
@org.junit.Test public void testUpdateLastConnectUid() throws java.lang.Exception { android.net.wifi.WifiConfiguration openNetwork = com.android.server.wifi.WifiConfigurationTestUtil.createOpenNetwork(); com.android.server.wifi.NetworkUpdateResult result = verifyAddNetworkToWifiConfigManager(openNetwork); assertTrue(mWifiConfigManager.checkAndUpdateLastConnectUid(result.getNetworkId(), com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)); android.net.wifi.WifiConfiguration retrievedNetwork = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()); assertEquals(com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID, retrievedNetwork.lastConnectUid); when(mWifiPermissionsUtil.checkConfigOverridePermission(anyInt())).thenReturn(false); assertFalse(mWifiConfigManager.checkAndUpdateLastConnectUid(result.getNetworkId(), com.android.server.wifi.WifiConfigManagerTest.TEST_UPDATE_UID)); retrievedNetwork = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()); assertEquals(com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID, retrievedNetwork.lastConnectUid); }
@java.lang.Override public boolean accept(@javax.annotation.Nonnull com.android.jack.plugin.v01.Plugin plugin) { try { boolean accepted = plugin.getVersion().getSubReleaseKind().isMoreStableThan(SubReleaseKind.CANDIDATE); if (accepted) { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO, "For plugin ''{0}'', accepted version {1} because stable", new java.lang.Object[]{ plugin.getCanonicalName(), plugin.getVersion().getVersion() }); } else { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO, "For plugin ''{0}'', rejected version {1} because not stable", new java.lang.Object[]{ plugin.getCanonicalName(), plugin.getVersion().getVersion() }); } return accepted; } catch (com.android.sched.util.UncomparableSubReleaseKind e) { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO, "For plugin ''{0}'', rejected version {1} because not stable", new java.lang.Object[]{ plugin.getCanonicalName(), plugin.getVersion().getVersion() }); return false; } }
public void testStoreNoOutputData() throws java.io.IOException { com.android.builder.internal.incremental.DependencyData data = new com.android.builder.internal.incremental.DependencyData(); data.setMainFile("/1/main/file"); data.addSecondaryFile("/1/secondary/file"); com.android.builder.internal.incremental.DependencyData data2 = new com.android.builder.internal.incremental.DependencyData(); data2.setMainFile("/2/main/file"); data2.addSecondaryFile("/2/secondary/file"); data2.addOutputFile("/2/output/file"); com.android.builder.internal.incremental.DependencyDataStore store = new com.android.builder.internal.incremental.DependencyDataStore(); store.addData(data); store.addData(data2); java.io.File file = java.io.File.createTempFile("DependencyDataStoreTest", ""); file.deleteOnExit(); store.saveTo(file); store = new com.android.builder.internal.incremental.DependencyDataStore(); store.loadFrom(file); java.util.Collection<com.android.builder.internal.incremental.DependencyData> newDataList = store.getData(); assertEquals(2, newDataList.size()); com.android.builder.internal.incremental.DependencyData firstData = store.getByMainFile("/1/main/file"); assertNotNull(firstData); assertEquals(data.getMainFile(), firstData.getMainFile()); assertEquals(data.getSecondaryFiles(), firstData.getSecondaryFiles()); assertEquals(0, firstData.getOutputFiles().size()); com.android.builder.internal.incremental.DependencyData secondData = store.getByMainFile("/2/main/file"); assertNotNull(secondData); assertEquals(data2.getMainFile(), secondData.getMainFile()); assertEquals(data2.getSecondaryFiles(), secondData.getSecondaryFiles()); assertEquals(data2.getOutputFiles(), secondData.getOutputFiles()); }
@org.junit.Test @java.lang.Runtime public void test106() throws java.lang.Exception { java.lang.String test = "com.android.jack.optimizations.valuepropagation.test106"; java.lang.String aType = "Lcom/android/jack/optimizations/valuepropagation/test106/jack/A;"; java.lang.String bType = "Lcom/android/jack/optimizations/valuepropagation/test106/jack/B;"; java.lang.String cType = "Lcom/android/jack/optimizations/valuepropagation/test106/jack/C;"; java.lang.String dType = "Lcom/android/jack/optimizations/valuepropagation/test106/jack/D;"; java.lang.String init1 = ("<init>(" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + ")V"; java.lang.String init2 = (("<init>(" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + ")V"; java.lang.String foo = ("foo(" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + ")V"; compileAndValidate(test, defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(init1, dalvik(test, "A.init1.dalvik")).insert(init2, dalvik(test, "A.init2.dalvik")).insert(foo, dalvik(test, "A.foo.dalvik"))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "B.foo.dalvik"))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "C.foo.dalvik"))).insert(dType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "D.foo.dalvik")))); }
public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, "true"); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerState.STATE_RESUMED); mAmWmState.assertFocusedActivity("TestActivity should be resumed", android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFrontStack("Fullscreen stack should be on top.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedStack("Fullscreen stack should be focused.", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); }
static com.android.multidex.ClassPathElement getClassPathElement(java.io.File file) throws java.io.IOException, java.util.zip.ZipException { if (file.isDirectory()) { return new com.android.multidex.FolderPathElement(file); } else if (file.isFile()) { return new com.android.multidex.ArchivePathElement(new java.util.zip.ZipFile(file)); } else if (file.exists()) { throw new java.io.IOException((("\"" + (file.getPath())) + "\" is not a directory neither a zip file")); } else { throw new java.io.FileNotFoundException((("File \"" + (file.getPath())) + "\" not found")); } }
public boolean reject(java.lang.String peerAddress) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure("reject"))) return false; if (peerAddress == null) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, "Cannot parse rejected peer's mac address."); return false; } byte[] macAddress = null; try { macAddress = com.android.server.wifi.util.NativeUtil.macAddressToByteArray(peerAddress); } catch (java.lang.Exception e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, "Could not parse peer mac address.", e); return false; } com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult((("reject(" + peerAddress) + ")")); try { result.setResult(mISupplicantP2pIface.reject(macAddress)); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ("ISupplicantP2pIface exception: " + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }
@javax.annotation.Nonnull protected static java.lang.String cstString(@javax.annotation.Nonnull com.android.jack.dx.dex.code.CstInsn ci) { com.android.jack.dx.rop.cst.Constant cst = ci.getConstant(); return cst instanceof com.android.jack.dx.rop.cst.CstString ? ((com.android.jack.dx.rop.cst.CstString) (cst)).toQuoted() : cst.toHuman(); }
@java.lang.Override public void onNetworkResumed(android.net.Network network) { setLastCallback(com.android.server.ConnectivityServiceTest.CallbackState.RESUMED, network, null); }
private void checkFastDistanceFloat4Float4Float() { android.renderscript.Allocation inLhs = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 1850968168532624085L); android.renderscript.Allocation inRhs = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 1850968168532624085L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.set_gAllocInRhs(inRhs); script.forEach_testFastDistanceFloat4Float4Float(inLhs, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFastDistanceFloat4Float4Float: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInRhs(inRhs); scriptRelaxed.forEach_testFastDistanceFloat4Float4Float(inLhs, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFastDistanceFloat4Float4Float: " + (e.toString()))); } }
public void test_setTrafficClass() throws java.lang.Exception { try (java.net.Socket s = new java.net.Socket()) { for (int i = 0; i <= 255; ++i) { s.setTrafficClass(i); int actual = s.getTrafficClass(); assertTrue(((i == actual) || (actual == (i & (~(libcore.java.net.SocketTest.INET_ECN_MASK)))))); } } }
@java.lang.Override public void exit() { log(((("Exit Disconnected(" + (mDevice)) + "): ") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; }
@org.junit.Test public void testDefaultProvisioningConfiguration() throws java.lang.Exception { final java.lang.String iface = "test_wlan0"; final android.net.ip.IpManager ipm = makeIpManager(iface); android.net.ip.IpManager.ProvisioningConfiguration config = new android.net.ip.IpManager.ProvisioningConfiguration.Builder().withoutIPv4().withoutIpReachabilityMonitor().build(); ipm.startProvisioning(config); verify(mCb, times(1)).setNeighborDiscoveryOffload(true); verify(mCb, timeout(100).times(1)).setFallbackMulticastFilter(false); verify(mCb, never()).onProvisioningFailure(any()); ipm.stop(); verify(mNMService, timeout(100).times(1)).disableIpv6(iface); verify(mNMService, timeout(100).times(1)).clearInterfaceAddresses(iface); }
@android.test.suitebuilder.annotation.LargeTest public void testFlagFExistingE() { if (android.os.Environment.isExternalStorageEmulated()) { return; } int iFlags = android.content.pm.PackageManager.INSTALL_EXTERNAL; int rFlags = (android.content.pm.PackageManager.INSTALL_FORWARD_LOCK) | (android.content.pm.PackageManager.INSTALL_REPLACE_EXISTING); installFromRawResource("install.apk", R.raw.install, iFlags, false, false, (-1), (-1)); installFromRawResource("install.apk", R.raw.install, rFlags, true, false, (-1), (-1)); }
private void checkStepFloatFloatFloat() { android.renderscript.Allocation inEdge = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 452436545215718188L); android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 452436545215718188L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.set_gAllocInV(inV); script.forEach_testStepFloatFloatFloat(inEdge, out); verifyResultsStepFloatFloatFloat(inEdge, inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testStepFloatFloatFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInV(inV); scriptRelaxed.forEach_testStepFloatFloatFloat(inEdge, out); verifyResultsStepFloatFloatFloat(inEdge, inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testStepFloatFloatFloat: " + (e.toString()))); } }
@java.lang.Override public void copy(@javax.annotation.Nonnull com.android.sched.vfs.VFile srcFile, @javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVFile dstFile) throws com.android.sched.util.file.CannotCloseException, com.android.sched.util.file.CannotReadException, com.android.sched.util.file.CannotWriteException, com.android.sched.util.file.WrongPermissionException { if (srcFile instanceof com.android.sched.vfs.DeflateFS.DeflateVFile) { vfs.copy(((com.android.sched.vfs.DeflateFS.DeflateVFile) (srcFile)).getWrappedFile(), dstFile.getWrappedFile()); } else { super.copy(srcFile, dstFile); } }
@java.lang.Override public void setDataProfile(android.telephony.data.DataProfile[] dps, boolean isRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_DATA_PROFILE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " with data profiles : ")); for (android.telephony.data.DataProfile profile : dps) { riljLog(profile.toString()); } } java.util.ArrayList<android.hardware.radio.V1_0.DataProfileInfo> dpis = new java.util.ArrayList<>(); for (android.telephony.data.DataProfile dp : dps) { dpis.add(com.android.internal.telephony.RIL.convertToHalDataProfile(dp)); } try { radioProxy.setDataProfile(rr.mSerial, dpis, isRoaming); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setDataProfile", e); } } }
private void generateCertificates_X509_DER(java.security.cert.CertificateFactory f) throws java.lang.Exception { java.util.Collection<? extends java.security.cert.X509Certificate> certs = getCertificates(f, libcore.java.security.cert.X509CertificateTest.CERTS_X509_DER); assertNotNull(certs); assertEquals(2, certs.size()); }
@java.lang.Override @java.lang.SuppressWarnings("unchecked") @javax.annotation.CheckForNull public <T extends com.android.sched.marker.Marker> T removeMarker(@javax.annotation.Nonnull java.lang.Class<T> cls) { synchronized(lock) { if ((markers) == null) { return null; } } return ((T) (markers.remove(cls))); }
@java.lang.Override public int checkCallingOrSelfPermission(java.lang.String permission) { if (android.text.TextUtils.equals(permission, "android.permission.WRITE_APN_SETTINGS")) { android.util.Log.d(com.android.providers.telephony.TelephonyProviderTest.TAG, (("checkCallingOrSelfPermission: permission=" + permission) + ", returning PackageManager.PERMISSION_GRANTED")); return android.content.pm.PackageManager.PERMISSION_GRANTED; } else { android.util.Log.d(com.android.providers.telephony.TelephonyProviderTest.TAG, (("checkCallingOrSelfPermission: permission=" + permission) + ", returning PackageManager.PERMISSION_DENIED")); return android.content.pm.PackageManager.PERMISSION_DENIED; } }
public boolean requestIcon(java.lang.String bssid, java.lang.String fileName) { if ((bssid == null) || (fileName == null)) { android.util.Log.e(mTAG, "Invalid arguments for Icon request."); return false; } return mSupplicantStaIfaceHal.initiateHs20IconQuery(bssid, fileName); }
private void dispatchBackgroundPeriodAlarm() { assertTrue("dispatch background period alarm", mAlarmManager.dispatch(WificondScannerImpl.BACKGROUND_PERIOD_ALARM_TAG)); mLooper.dispatchAll(); }
private void recordSnapshotLocked(long currentTime) throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = getNetworkStatsUidDetail(android.net.NetworkStats.INTERFACES_ALL); final android.net.NetworkStats xtSnapshot = getNetworkStatsXt(); final android.net.NetworkStats devSnapshot = mNetworkManager.getNetworkStatsSummaryDev(); final android.net.NetworkStats tetherSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_IFACE); xtSnapshot.combineAllValues(tetherSnapshot); devSnapshot.combineAllValues(tetherSnapshot); mDevRecorder.recordSnapshotLocked(devSnapshot, mActiveIfaces, null, currentTime); mXtRecorder.recordSnapshotLocked(xtSnapshot, mActiveIfaces, null, currentTime); com.android.internal.net.VpnInfo[] vpnArray = mConnManager.getAllVpnInfo(); mUidRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mUidTagRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mStatsObservers.updateStats(xtSnapshot, uidSnapshot, new android.util.ArrayMap(mActiveIfaces), new android.util.ArrayMap(mActiveUidIfaces), vpnArray, currentTime); }
@java.lang.Override public java.lang.Void call() throws java.lang.Exception { latch.countDown(); latch.await(); for (int j = 0; j < 100; j++) { s.update(message); s.sign(); } return null; }
@java.lang.Override public com.android.build.gradle.managed.AndroidConfig getExtension() { return extension; }
@org.junit.Test public void retroLambdaDefaultMethodsTest026() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_026).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
private void stopObexServerSession() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Pbap Service stopObexServerSession"); } mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_ACQUIRE_WAKE_LOCK); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_RELEASE_WAKE_LOCK); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if (((mAdapter) != null) && (mAdapter.isEnabled())) { startSocketListeners(); } setState(BluetoothProfile.STATE_DISCONNECTED); }
private void maybeSendRA(java.net.InetSocketAddress dest) { if ((dest == null) || (!(isSuitableDestination(dest)))) { dest = mAllNodes; } try { synchronized(mLock) { if ((mRaLength) < (android.net.ip.RouterAdvertisementDaemon.MIN_RA_HEADER_SIZE)) { return; } android.system.Os.sendto(mSocket, mRA, 0, mRaLength, 0, dest); } android.util.Log.d(android.net.ip.RouterAdvertisementDaemon.TAG, ("RA sendto " + (dest.getAddress().getHostAddress()))); } catch (android.system.ErrnoException | java.net.SocketException e) { if (isSocketValid()) { android.util.Log.e(android.net.ip.RouterAdvertisementDaemon.TAG, ("sendto error: " + e)); } } }
private void assertDayPeriodParseFailure(java.lang.String pattern, java.lang.String source) { java.text.SimpleDateFormat simpleDateFormat = new java.text.SimpleDateFormat(pattern, java.util.Locale.US); java.text.ParsePosition parsePosition = new java.text.ParsePosition(0); java.util.Date d = simpleDateFormat.parse(source, parsePosition); assertNull(d); assertEquals(0, parsePosition.getIndex()); }
public void testDatagramChannel() throws java.lang.Exception { java.nio.channels.DatagramChannel dc = java.nio.channels.DatagramChannel.open(); dc.connect(server.getLocalAddress()); assertEquals(1, tagger.getLiveDescriptors().size()); dc.close(); assertEquals(java.util.Collections.EMPTY_MAP, tagger.getLiveDescriptors()); }
public static byte[] subarray(byte[] arr, int offset, int len) { if (len == 0) { return libcore.util.EmptyArray.BYTE; } if ((offset == 0) && (len == (arr.length))) { return arr; } byte[] result = new byte[len]; java.lang.System.arraycopy(arr, offset, result, 0, len); return result; }
@java.lang.Override public java.util.Set<java.lang.String> getCriticalExtensionOIDs() { java.lang.String[] critOids = org.apache.harmony.xnet.provider.jsse.NativeCrypto.get_X509_ext_oids(mContext, NativeCrypto.EXTENSION_TYPE_CRITICAL); if (((critOids.length) == 0) && ((org.apache.harmony.xnet.provider.jsse.NativeCrypto.get_X509_ext_oids(mContext, NativeCrypto.EXTENSION_TYPE_NON_CRITICAL).length) == 0)) { return null; } return new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(critOids)); }
void logTimeStat(java.lang.String sql, long beginMillis) { logTimeStat(sql, beginMillis, null); }
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = "ab5f9585-433b-4261-bd15-5c7136f6127b") public void testPhotoCapture() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); if ((testFramework.getApi()) >= 24) { boolean photoTestSuccess = useCamera(instrumentation, "Camera"); org.junit.Assert.assertTrue("New photo was not deleted from the gallery", photoTestSuccess); } }
@org.junit.Test public void normalAddedDiffedFieldValues() { com.android.ahat.heapdump.FieldValue normal = new com.android.ahat.heapdump.FieldValue("name", "type", new com.android.ahat.heapdump.Value(1)); com.android.ahat.heapdump.DiffedFieldValue x = com.android.ahat.heapdump.DiffedFieldValue.added(normal); assertEquals("name", x.name); assertEquals("type", x.type); assertEquals(new com.android.ahat.heapdump.Value(1), x.current); assertEquals(DiffedFieldValue.Status.ADDED, x.status); }
public static int $noinline$Shr24And255(int arg) { if (Main.doThrow) { throw new java.lang.Error(); } return (arg >> 24) & 255; }
public void $noinline$doCall() { if (Main.doThrow) throw new java.lang.Error(""); }
static void read(java.nio.channels.SocketChannel chan, byte[] data, int length, long timeout) throws com.android.ddmlib.TimeoutException, java.io.IOException { java.nio.ByteBuffer buf = java.nio.ByteBuffer.wrap(data, 0, (length != (-1) ? length : data.length)); int numWaits = 0; while ((buf.position()) != (buf.limit())) { int count; count = chan.read(buf); if (count < 0) { com.android.ddmlib.Log.d("ddms", "read: channel EOF"); throw new java.io.IOException("EOF"); } else if (count == 0) { if ((timeout != 0) && ((numWaits * (com.android.ddmlib.AdbHelper.WAIT_TIME)) > timeout)) { com.android.ddmlib.Log.d("ddms", "read: timeout"); throw new com.android.ddmlib.TimeoutException(); } try { java.lang.Thread.sleep(com.android.ddmlib.AdbHelper.WAIT_TIME); } catch (java.lang.InterruptedException e) { java.lang.Thread.currentThread().interrupt(); throw new com.android.ddmlib.TimeoutException("Read interrupted with immediate timeout via interruption."); } numWaits++; } else { numWaits = 0; } } }
public int getSimState(int slotIndex) { int simState = android.telephony.SubscriptionManager.getSimStateForSlotIndex(slotIndex); return simState; }
@java.lang.Override protected void fillRtTestInfos() { rtTestInfos.add(ADVANCEDTEST); rtTestInfos.add(CFGTEST); rtTestInfos.add(FASTPATH); rtTestInfos.add(SIMPLETEST); }
public void addFile(java.io.File file, java.lang.String archivePath) throws com.android.sdklib.build.ApkBuilder.ApkCreationException, com.android.sdklib.build.ApkBuilder.DuplicateFileException, com.android.sdklib.build.ApkBuilder.SealedApkException { if (mIsSealed) { throw new com.android.sdklib.build.ApkBuilder.SealedApkException("APK is already sealed"); } try { doAddFile(file, archivePath); } catch (com.android.sdklib.build.ApkBuilder.DuplicateFileException e) { throw e; } catch (java.lang.Exception e) { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException(e, "Failed to add %s", file); } }
private static void traverseSVGAndExtract(com.android.assetstudiolib.vectordrawable.SvgTree svgTree, com.android.assetstudiolib.vectordrawable.SvgGroupNode currentGroup, org.w3c.dom.Node item) { org.w3c.dom.NodeList allChildren = item.getChildNodes(); for (int i = 0; i < (allChildren.getLength()); i++) { org.w3c.dom.Node currentNode = allChildren.item(i); java.lang.String nodeName = currentNode.getNodeName(); if (((((com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_PATH.equals(nodeName)) || (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_RECT.equals(nodeName))) || (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_CIRCLE.equals(nodeName))) || (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_POLYGON.equals(nodeName))) || (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_LINE.equals(nodeName))) { com.android.assetstudiolib.vectordrawable.SvgLeafNode child = new com.android.assetstudiolib.vectordrawable.SvgLeafNode((nodeName + i)); com.android.assetstudiolib.vectordrawable.Svg2Vector.extractAllItemsAs(svgTree, child, currentNode); currentGroup.addChild(child); } else if (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_GROUP.equals(nodeName)) { com.android.assetstudiolib.vectordrawable.SvgGroupNode childGroup = new com.android.assetstudiolib.vectordrawable.SvgGroupNode(("child" + i)); currentGroup.addChild(childGroup); com.android.assetstudiolib.vectordrawable.Svg2Vector.traverseSVGAndExtract(svgTree, childGroup, currentNode); } else { com.android.assetstudiolib.vectordrawable.Svg2Vector.traverseSVGAndExtract(svgTree, currentGroup, currentNode); } } }
public void testScreenLayout() throws java.lang.Exception { int expectedScreenLayout = computeScreenLayout(); int expectedSize = expectedScreenLayout & (android.content.res.Configuration.SCREENLAYOUT_SIZE_MASK); int expectedLong = expectedScreenLayout & (android.content.res.Configuration.SCREENLAYOUT_LONG_MASK); boolean navigationBar = hasNavigationBar(); for (int i = 0; i < (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS.length); i++) { android.app.Activity activity = startOrientationActivity(android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i]); android.content.res.Configuration mConfig = activity.getResources().getConfiguration(); int actualSize = (mConfig.screenLayout) & (android.content.res.Configuration.SCREENLAYOUT_SIZE_MASK); int actualLong = (mConfig.screenLayout) & (android.content.res.Configuration.SCREENLAYOUT_LONG_MASK); if (navigationBar) { expectedScreenLayout = reduceScreenLayout(activity, ((android.content.res.Configuration.SCREENLAYOUT_SIZE_XLARGE) | (android.content.res.Configuration.SCREENLAYOUT_LONG_YES))); expectedSize = expectedScreenLayout & (android.content.res.Configuration.SCREENLAYOUT_SIZE_MASK); expectedLong = expectedScreenLayout & (android.content.res.Configuration.SCREENLAYOUT_LONG_MASK); } assertEquals(((((("Expected screen size value of " + expectedSize) + " but got ") + actualSize) + " for orientation ") + (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i])), expectedSize, actualSize); assertEquals(((((("Expected screen long value of " + expectedLong) + " but got ") + actualLong) + " for orientation ") + (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i])), expectedLong, actualLong); tearDown(); } }
public int uint32() throws java.io.IOException { return ((int) (uintv())); }
@java.lang.Override @javax.annotation.Nonnull void delete(@javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVFile file) throws com.android.sched.util.file.CannotDeleteFileException { vfs.delete(file.getWrappedFile()); }
@java.lang.Override protected void loge(java.lang.String s) { if (com.android.internal.telephony.ims.IsimUiccRecords.DBG) android.util.Log.e(com.android.internal.telephony.ims.IsimUiccRecords.LOG_TAG, ("[ISIM] " + s)); }
@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputOutputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) throws com.android.sched.util.file.CannotCreateFileException { com.android.sched.vfs.InputOutputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VPath prefixPath = new com.android.sched.vfs.VPath(fileType.getPrefix(), '/'); com.android.sched.vfs.VFS outputVFS = null; try { outputVFS = new com.android.sched.vfs.PrefixedFS(vfs, prefixPath); if ((generateJacklibDigest) && (fileType == (com.android.jack.library.FileType.DEX))) { outputVFS = new com.android.sched.vfs.MessageDigestFS(outputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO)); } } catch (com.android.sched.vfs.WrongVFSFormatException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.NotDirectoryException e) { throw new java.lang.AssertionError(e); } currentSectionVFS = new com.android.sched.vfs.GenericInputOutputVFS(outputVFS); sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }
@java.lang.Override public void run() { while (isSocketValid()) { try { final int rval = android.system.Os.recvfrom(mSocket, mSolication, 0, mSolication.length, 0, solicitor); if ((rval < 1) || ((mSolication[0]) != (android.net.ip.RouterAdvertisementDaemon.ICMPV6_ND_ROUTER_SOLICIT))) { continue; } } catch (android.system.ErrnoException | java.net.SocketException e) { if (isSocketValid()) { android.util.Log.e(android.net.ip.RouterAdvertisementDaemon.TAG, ("recvfrom error: " + e)); } continue; } maybeSendRA(solicitor); } }
private static android.renderscript.RenderScript internalCreate(android.content.Context ctx, int sdkVersion, android.renderscript.RenderScript.ContextType ct, int flags) { if (!(android.renderscript.RenderScript.sInitialized)) { android.util.Log.e(android.renderscript.RenderScript.LOG_TAG, "RenderScript.create() called when disabled; someone is likely to crash"); return null; } if ((flags & (~(((android.renderscript.RenderScript.CREATE_FLAG_LOW_LATENCY) | (android.renderscript.RenderScript.CREATE_FLAG_LOW_POWER)) | (android.renderscript.RenderScript.CREATE_FLAG_WAIT_FOR_ATTACH)))) != 0) { throw new android.renderscript.RSIllegalArgumentException("Invalid flags passed."); } android.renderscript.RenderScript rs = new android.renderscript.RenderScript(ctx); rs.mDev = rs.nDeviceCreate(); rs.mContext = rs.nContextCreate(rs.mDev, flags, sdkVersion, ct.mID); rs.mContextType = ct; rs.mContextFlags = flags; rs.mContextSdkVersion = sdkVersion; if ((rs.mContext) == 0) { throw new android.renderscript.RSDriverException("Failed to create RS context."); } rs.nContextSetCacheDir(android.renderscript.RenderScript.getCachePath()); rs.mMessageThread = new android.renderscript.RenderScript.MessageThread(rs); rs.mMessageThread.start(); return rs; }
private void checkFastNormalizeFloat2Float2() { android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -2143390131417509529L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testFastNormalizeFloat2Float2(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFastNormalizeFloat2Float2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testFastNormalizeFloat2Float2(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFastNormalizeFloat2Float2: " + (e.toString()))); } }
public native void bind(java.io.FileDescriptor fd, java.net.SocketAddress address) throws android.system.ErrnoException, java.net.SocketException;
@java.lang.Override public void printOpt(@javax.annotation.Nonnull java.lang.String s) { }
public int getTimeout() { return getDelay(com.android.jack.server.ConfigFile.TIME_OUT_PROPERTY, ((2 * 60) * 60)); }
public void testStandaloneWeekdayFormatting() throws java.lang.Exception { java.util.Locale fi = new java.util.Locale("fi"); assertEquals("torstai", formatDate(fi, "cccc")); assertEquals("torstaina", formatDate(fi, "EEEE")); }
private void notifyRouteChange(java.lang.String action, android.net.RouteInfo route) { if (action.equals("updated")) { invokeForAllObservers(( o) -> o.routeUpdated(route)); } else { invokeForAllObservers(( o) -> o.routeRemoved(route)); } }
public void fixupLinkProperties(android.net.LinkProperties oldLp) { if (!(isRunning())) { return; } android.net.LinkProperties lp = mNetwork.linkProperties; if ((lp == null) || (lp.getAllInterfaceNames().contains(mIface))) { return; } android.util.Slog.d(com.android.server.connectivity.Nat464Xlat.TAG, ("clatd running, updating NAI for " + (mIface))); for (android.net.LinkProperties stacked : oldLp.getStackedLinks()) { if (java.util.Objects.equals(mIface, stacked.getInterfaceName())) { lp.addStackedLink(stacked); return; } } }
@java.lang.Override public java.lang.Boolean call() throws java.lang.Exception { try { com.android.dx.dex.file.ClassDefItem clazz = futureClazz.get(); if (clazz != null) { com.android.dx.command.dexer.Main.addClassToDex(clazz); com.android.dx.command.dexer.Main.updateStatus(true); } return true; } catch (java.util.concurrent.ExecutionException ex) { java.lang.Throwable t = ex.getCause(); throw t instanceof java.lang.Exception ? ((java.lang.Exception) (t)) : ex; } finally { if (com.android.dx.command.dexer.Main.args.multiDex) { synchronized(com.android.dx.command.dexer.Main.dexRotationLock) { com.android.dx.command.dexer.Main.maxMethodIdsInProcess -= maxMethodIdsInClass; com.android.dx.command.dexer.Main.maxFieldIdsInProcess -= maxFieldIdsInClass; com.android.dx.command.dexer.Main.dexRotationLock.notifyAll(); } } } }
@java.lang.Override public com.google.gdt.eclipse.login.common.VerificationCodeHolder obtainVerificationCodeFromExternalUserInteraction(java.lang.String title) { receiver = new com.google.gct.login.CancellableServerReceiver(); java.lang.String redirectUrl; try { redirectUrl = receiver.getRedirectUri(); } catch (java.io.IOException e) { logErrorAndDisplayDialog((title == null ? "Google Login" : title), e); return null; } com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl authCodeRequestUrl = new com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl(com.google.api.client.googleapis.auth.oauth2.GoogleOAuthConstants.AUTHORIZATION_SERVER_URL, clientInfo.getId()).setRedirectUri(redirectUrl).setScopes(com.google.gct.login.OAuthScopeRegistry.getScopes()); com.intellij.ide.BrowserUtil.browse(authCodeRequestUrl.build()); java.lang.String verificationCode; try { verificationCode = receiver.waitForCode(); } catch (java.io.IOException e) { logErrorAndDisplayDialog((title == null ? "Google Login" : title), e); return null; } finally { receiver = null; } return new com.google.gdt.eclipse.login.common.VerificationCodeHolder(verificationCode, redirectUrl); }
public boolean disable(java.lang.String packageName, boolean persist) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, "disable(): not allowed for non-active and non system user"); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if ((isEnabled()) && (mPermissionReviewRequired)) { startConsentUi(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_DISABLE); return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((("disable(): mBluetooth = " + (mBluetooth)) + " mBinding = ") + (mBinding))); } synchronized(mReceiver) { if (persist) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_OFF); } mEnableExternal = false; sendDisableMsg(packageName); } return true; }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); reset(mContext); reset(mCS); reset(mLog); when(mLog.forSubComponent(anyString())).thenReturn(mLog); mCM = spy(new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestConnectivityManager(mContext, mCS)); mSM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestStateMachine(); mUNM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitor(((android.net.ConnectivityManager) (mCM)), mSM, mLog, com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.EVENT_UNM_UPDATE); }
java.lang.String profileFile() default "default-profile-file";
public void stopOffloadControl() { if ((mOffloadControl) != null) { try { mOffloadControl.stopOffload((boolean success,java.lang.String errMsg) -> { if (!success) mLog.e(("stopOffload failed: " + errMsg)); }); } catch (android.os.RemoteException e) { mLog.e(("failed to stopOffload: " + e)); } } mOffloadControl = null; mTetheringOffloadCallback = null; mControlCallback = null; }
@org.junit.Test @java.lang.Runtime(from = RuntimeVersion.N) public void retroLambdaDefaultMethodsTest004() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_004); }
@org.junit.Test public void test002c() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackOutput = runTest002(false, "keep-first", errOut, false, false); com.android.jack.library.InputJackLibrary lib = null; try { lib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibrary(jackOutput); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE1_PATH, "Res1"); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE2_PATH, "Res2"); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE3_PATH, "Res3"); } finally { if (lib != null) { lib.close(); } } junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); }
@java.lang.SuppressWarnings("javadoc") public void visitResourceReference(@com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context, @com.android.annotations.Nullable lombok.ast.AstVisitor visitor, @com.android.annotations.NonNull lombok.ast.Node node, @com.android.annotations.NonNull java.lang.String type, @com.android.annotations.NonNull java.lang.String name, boolean isFramework) { }
@java.lang.Override public int hashCode() { return java.util.Objects.hashCode(specifier); }
@org.junit.Test public void buildCapabilities_wpa1Element() { android.net.wifi.ScanResult.InformationElement ie = new android.net.wifi.ScanResult.InformationElement(); ie.id = android.net.wifi.ScanResult.InformationElement.EID_VSA; ie.bytes = new byte[]{ ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (1)), ((byte) (1)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (2)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (4)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (1)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (0)), ((byte) (0)) }; android.net.wifi.ScanResult.InformationElement[] ies = new android.net.wifi.ScanResult.InformationElement[]{ ie }; java.util.BitSet beaconCap = new java.util.BitSet(16); beaconCap.set(4); com.android.server.wifi.util.InformationElementUtil.Capabilities capabilities = new com.android.server.wifi.util.InformationElementUtil.Capabilities(); capabilities.from(ies, beaconCap); java.lang.String result = capabilities.generateCapabilitiesString(); assertEquals("[WPA-PSK-CCMP+TKIP]", result); }
protected void setDnsForwarders(final android.net.Network network, final android.net.LinkProperties lp) { java.lang.String[] dnsServers = mConfig.defaultIPv4DNS; final java.util.Collection<java.net.InetAddress> dnses = lp.getDnsServers(); if ((dnses != null) && (!(dnses.isEmpty()))) { dnsServers = android.net.NetworkUtils.makeStrings(dnses); } try { mNMService.setDnsForwarders(network, dnsServers); mLog.log(java.lang.String.format("SET DNS forwarders: network=%s dnsServers=%s", network, java.util.Arrays.toString(dnsServers))); } catch (java.lang.Exception e) { mLog.e(("setting DNS forwarders failed, " + e)); transitionTo(mSetDnsForwardersErrorState); } }
public com.android.internal.telephony.IccFileHandler getIccFileHandler(int family) { synchronized(com.android.internal.telephony.uicc.UiccController.mLock) { if ((mUiccCard) != null) { com.android.internal.telephony.UiccCardApplication app = mUiccCard.getApplication(family); if (app != null) { return app.getIccFileHandler(); } } return null; } }
@javax.annotation.Nonnull private com.android.jack.dx.rop.code.RegisterSpec generateBoxLambda(@javax.annotation.Nonnull com.android.jack.ir.ast.JType boxType, @javax.annotation.Nonnull com.android.jack.dx.rop.code.SourcePosition sourcePosition, @javax.annotation.CheckForNull com.android.jack.dx.rop.code.RegisterSpec destReg, @javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec regToBox, boolean useTmp, boolean extraInst) { assert (!useTmp) || (destReg == null); com.android.jack.dx.rop.code.RegisterSpec tmpBoxedReg = (useTmp) ? ropReg.getOrCreateTmpRegister(boxType, false) : destReg; assert tmpBoxedReg != null; com.android.jack.dx.rop.code.RegisterSpecList sourcesBox = com.android.jack.dx.rop.code.RegisterSpecList.make(regToBox); com.android.jack.dx.rop.code.Insn inst = new com.android.jack.dx.rop.code.PlainCstInsn(com.android.jack.dx.rop.code.Rops.opBoxLambda(regToBox, sourcesBox), sourcePosition, tmpBoxedReg, sourcesBox, com.android.jack.dx.rop.cst.CstType.intern(com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx(boxType))); if (extraInst) { addExtraInstruction(inst); } else { addInstruction(inst); } return tmpBoxedReg; }
public void test_parse_D_dd_yyyy_MMMM() throws java.lang.Exception { org.apache.harmony.tests.java.text.SimpleDateFormatTest.checkPatternOnFixedDate("D dd yyyy MMMM", "70 11 2002 March", "240 11 2002 March"); }
@java.lang.Override public boolean equals(java.lang.Object otherObject) { if (otherObject instanceof com.android.ahat.heapdump.DiffedFieldValue) { com.android.ahat.heapdump.DiffedFieldValue other = ((com.android.ahat.heapdump.DiffedFieldValue) (otherObject)); return ((((name.equals(other.name)) && (type.equals(other.type))) && (java.util.Objects.equals(current, other.current))) && (java.util.Objects.equals(baseline, other.baseline))) && (java.util.Objects.equals(status, other.status)); } return false; }
@org.junit.Test public void retainedSize() throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump(); com.android.ahat.heapdump.AhatInstance anObject = dump.getDumpedAhatInstance("anObject"); com.android.ahat.heapdump.AhatSnapshot snapshot = dump.getAhatSnapshot(); com.android.ahat.heapdump.Size size = anObject.getSize(); assertEquals(size, anObject.getTotalRetainedSize()); assertEquals(size, anObject.getRetainedSize(anObject.getHeap())); for (com.android.ahat.heapdump.AhatHeap heap : snapshot.getHeaps()) { if (!(heap.equals(anObject.getHeap()))) { assertEquals(java.lang.String.format("For heap '%s'", heap.getName()), Size.ZERO, anObject.getRetainedSize(heap)); } } }
private void resetStoreData(boolean shareData) { for (java.util.Map.Entry<java.lang.String, com.android.server.wifi.WifiConfigStore.StoreData> entry : mStoreDataList.entrySet()) { entry.getValue().resetData(shareData); } }
@java.lang.Override @com.android.annotations.NonNull public com.google.common.collect.ImmutableList<java.io.File> getRepositories() { return mRepositories; }
@java.lang.Override public void run() { if ((mTraceFileWriter) == null) { return; } while (!(mIsCancelled)) { final java.lang.String frameCount = java.lang.Integer.toString(mTraceFileWriter.getCurrentFrameCount()); double fileSize = mTraceFileWriter.getCurrentFileSize(); fileSize /= 1024 * 1024; final java.lang.String frameSize = (com.android.ide.eclipse.gltrace.GLTraceCollectorDialog.SIZE_FORMATTER.format(fileSize)) + " MB"; org.eclipse.swt.widgets.Display.getDefault().syncExec(new java.lang.Runnable() { @java.lang.Override public void run() { if (mFramesCollectedLabel.isDisposed()) { return; } mFramesCollectedLabel.setText(frameCount); mTraceFileSizeLabel.setText(frameSize); mFramesCollectedLabel.pack(); mTraceFileSizeLabel.pack(); } }); try { java.lang.Thread.sleep(com.android.ide.eclipse.gltrace.GLTraceCollectorDialog.StatusRefreshTask.REFRESH_INTERVAL); } catch (java.lang.InterruptedException e) { return; } } }
public long getDownloadSize() { return mDownloadSize; }
private static boolean containsAtLeastTwoDomainNameLabelsExcludingRoot(java.lang.String hostname) { int delimiterIndex = hostname.indexOf('.'); if (delimiterIndex == (-1)) { return false; } if (delimiterIndex == ((hostname.length()) - 1)) { return false; } return true; }
@javax.annotation.Nonnull protected com.android.jack.ir.ast.JPackage getPackage(@javax.annotation.Nonnull java.lang.String packageName, @javax.annotation.Nonnull com.android.jack.lookup.JLookup.Adapter<? extends com.android.jack.ir.ast.JType> adapter) throws com.android.jack.ir.ast.JPackageLookupException { synchronized(packages) { com.android.jack.ir.ast.JPackage found = packages.get(packageName); if (found == null) { assert com.android.jack.util.NamingTools.isPackageBinaryName(packageName); int separatorIndex = packageName.lastIndexOf(com.android.jack.lookup.JLookup.PACKAGE_SEPARATOR); com.android.jack.ir.ast.JPackage parent; java.lang.String simplePackageName; if (separatorIndex == (-1)) { parent = topLevelPackage; simplePackageName = packageName; } else { parent = getPackage(packageName.substring(0, separatorIndex), adapter); simplePackageName = packageName.substring((separatorIndex + 1)); } found = adapter.getPackage(parent, simplePackageName); packages.put(packageName, found); } return found; } }
public static android.telephony.mbms.DownloadRequest.Builder fromDownloadRequest(android.telephony.mbms.DownloadRequest other) { android.telephony.mbms.DownloadRequest.Builder result = new android.telephony.mbms.DownloadRequest.Builder(other.sourceUri, other.destinationUri).setServiceId(other.fileServiceId).setSubscriptionId(other.subscriptionId); result.appIntent = other.serializedResultIntentForApp; return result; }
public boolean p2pGroupRemove(java.lang.String iface) { return mSupplicantP2pIfaceHal.groupRemove(iface); }
@java.lang.Override public void visit(com.android.jack.dx.io.instructions.DecodedInstruction[] all, com.android.jack.dx.io.instructions.DecodedInstruction decodedInst) { remappedInstructions[((remappingIndex)++)] = decodedInst.withIndex(cstIndexMap.getRemappedCstBaseMethodRefIndex(file, decodedInst.getFirstIndex()), cstIndexMap.getRemappedCstPrototypeRefIndex(file, decodedInst.getSecondIndex())); }
private void loadUrl() { if (mIntent.hasExtra(Intent.EXTRA_TITLE)) { setTitle(mIntent.getStringExtra(Intent.EXTRA_TITLE)); } mWebView.loadUrl(java.lang.String.valueOf(mIntent.getData())); }
@org.junit.Test public void wifiNotEnabled_userDisablesWifiNearSavedNetwork_thenRemovesNetwork_thenStays() { when(mWifiManager.getConfiguredNetworks()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_WIFI_CONFIGURATION), com.google.android.collect.Lists.<android.net.wifi.WifiConfiguration>newArrayList()); when(mWifiManager.getScanResults()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_SCAN_RESULT)).thenReturn(com.google.android.collect.Lists.<android.net.wifi.ScanResult>newArrayList()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_SCAN_RESULT)); when(mWifiWakeupNetworkSelector.selectNetwork(anyMap(), anyList())).thenReturn(null); com.android.networkrecommendation.TestUtil.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_ENABLED); com.android.networkrecommendation.TestUtil.sendConfiguredNetworksChanged(mBroadcastReceiver, mContext); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); com.android.networkrecommendation.TestUtil.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_DISABLED); com.android.networkrecommendation.TestUtil.sendConfiguredNetworksChanged(mBroadcastReceiver, mContext); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); com.android.networkrecommendation.TestUtil.sendScanResultsAvailable(mBroadcastReceiver, mContext); verify(mWifiManager, never()).setWifiEnabled(true); }
public boolean flush() { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure("flush"))) return false; com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult("flush()"); try { result.setResult(mISupplicantP2pIface.flush()); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ("ISupplicantP2pIface exception: " + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }
private void checkServiceSpecificExceptions(android.aidl.tests.ITestService service) throws android.aidl.tests.TestServiceClient.TestFailException { mLog.log("Checking application exceptions..."); for (int i = -1; i < 2; ++i) { try { service.ThrowServiceException(i); } catch (android.os.RemoteException ex) { mLog.logAndThrow(("Service threw RemoteException: " + (ex.toString()))); } catch (android.os.ServiceSpecificException ex) { if ((ex.errorCode) != i) { mLog.logAndThrow(("Service threw wrong error code: " + i)); } } } mLog.log("...application exceptions work"); }
public void test_readLByteBufferJ_Position_As_Long() throws java.lang.Exception { java.nio.ByteBuffer readBuffer = java.nio.ByteBuffer.allocate(org.apache.harmony.tests.java.nio.channels.FileChannelTest.CAPACITY); try { readOnlyFileChannel.read(readBuffer, java.lang.Long.MAX_VALUE); fail(); } catch (java.io.IOException expected) { } }
private void readGfxInfoDataset(java.io.BufferedReader br) throws java.io.IOException { updateBarChartDataSet(com.android.ddmuilib.SysinfoPanel.BugReportParser.parseGfxInfo(br), ((mGfxPackageName) == null ? "" : mGfxPackageName)); }
public void testHandleAsKey() { java.util.Set<com.android.tools.rpclib.binary.Handle> set = new java.util.HashSet<com.android.tools.rpclib.binary.Handle>(); com.android.tools.rpclib.binary.Handle handle1 = new com.android.tools.rpclib.binary.Handle(com.android.tools.rpclib.binary.HandleTest.handleBytes); set.add(handle1); assertTrue(set.contains(handle1)); assertEquals(1, set.size()); com.android.tools.rpclib.binary.Handle sameHandle = new com.android.tools.rpclib.binary.Handle(com.android.tools.rpclib.binary.HandleTest.handleBytes); set.add(sameHandle); assertTrue(set.contains(sameHandle)); assertEquals(1, set.size()); com.android.tools.rpclib.binary.Handle zeroHandle = new com.android.tools.rpclib.binary.Handle(new byte[20]); set.add(zeroHandle); assertTrue(set.contains(zeroHandle)); assertEquals(2, set.size()); }
public native long lseek(java.io.FileDescriptor fd, long offset, int whence) throws android.system.ErrnoException;
@javax.annotation.Nonnull private java.util.List<java.lang.Integer> readCallSiteIds() { if ((tableOfContents.apiLevel) < (com.android.jack.dx.dex.DexFormat.API_ANDROID_O)) { return java.util.Collections.emptyList(); } com.android.jack.dx.io.DexBuffer.Section callSiteIds = openInternal(tableOfContents.callSiteIds.off); java.lang.Integer[] result = new java.lang.Integer[tableOfContents.callSiteIds.size]; for (int i = 0; i < (tableOfContents.callSiteIds.size); ++i) { result[i] = java.lang.Integer.valueOf(callSiteIds.readInt()); } return java.util.Arrays.asList(result); }
public boolean isProjectTheme() { return mIsProjectTheme.get(mThemeCombo.getSelectionIndex()).booleanValue(); }
@org.junit.Test public void testSocketResourceTrackerLimitation() throws java.lang.Exception { java.util.List<IpSecUdpEncapResponse> openUdpEncapSockets = new java.util.ArrayList<IpSecUdpEncapResponse>(); for (int i = 0; i < (com.android.server.IpSecServiceTest.MAX_NUM_ENCAP_SOCKETS); i++) { IpSecUdpEncapResponse newUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(newUdpEncapSocket); if ((IpSecManager.Status.OK) != (newUdpEncapSocket.status)) { break; } openUdpEncapSockets.add(newUdpEncapSocket); } assertTrue("No UDP encap socket was open", (!(openUdpEncapSockets.isEmpty()))); assertTrue("Number of open UDP encap sockets is out of bound", ((openUdpEncapSockets.size()) < (com.android.server.IpSecServiceTest.MAX_NUM_ENCAP_SOCKETS))); IpSecUdpEncapResponse extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.RESOURCE_UNAVAILABLE, extraUdpEncapSocket.status); mIpSecService.closeUdpEncapsulationSocket(openUdpEncapSockets.get(0).resourceId); openUdpEncapSockets.get(0).fileDescriptor.close(); openUdpEncapSockets.remove(0); extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.OK, extraUdpEncapSocket.status); openUdpEncapSockets.add(extraUdpEncapSocket); for (IpSecUdpEncapResponse openSocket : openUdpEncapSockets) { mIpSecService.closeUdpEncapsulationSocket(openSocket.resourceId); openSocket.fileDescriptor.close(); } }
private final void handleAppDiedLocked(com.android.server.am.ProcessRecord app, boolean restarting, boolean allowRestart) { int pid = app.pid; boolean kept = cleanUpApplicationRecordLocked(app, restarting, allowRestart, (-1)); if ((!kept) && (!restarting)) { removeLruProcessLocked(app); if (pid > 0) { com.android.server.am.ProcessList.remove(pid); } } if ((mProfileProc) == app) { clearProfilerLocked(); } boolean hasVisibleActivities = mStackSupervisor.handleAppDiedLocked(app); app.activities.clear(); if ((app.instrumentationClass) != null) { android.util.Slog.w(com.android.server.am.ActivityManagerService.TAG, ((("Crash of app " + (app.processName)) + " running instrumentation ") + (app.instrumentationClass))); android.os.Bundle info = new android.os.Bundle(); info.putString("shortMsg", "Process crashed."); finishInstrumentationLocked(app, Activity.RESULT_CANCELED, info); } if (((!restarting) && hasVisibleActivities) && (!(mStackSupervisor.resumeTopActivitiesLocked()))) { mStackSupervisor.ensureActivitiesVisibleLocked(null, 0); } }
public static com.android.ahat.heapdump.DiffedFieldValue matched(com.android.ahat.heapdump.FieldValue current, com.android.ahat.heapdump.FieldValue baseline) { return new com.android.ahat.heapdump.DiffedFieldValue(current.name, current.type, current.value, baseline.value, com.android.ahat.heapdump.DiffedFieldValue.Status.MATCHED); }
@java.lang.Override public boolean perform() { try { java.lang.Thread.sleep(100); } catch (java.lang.InterruptedException ignored) { } return true; }
static byte $opt$noinline$CharToByte(char a) { if (Main.doThrow) throw new java.lang.Error(); return ((byte) (a)); }
@java.lang.Override public java.security.Principal getSubjectDN() { return getSubjectX500Principal(); }
public void setImportedLibraries(@javax.annotation.Nonnull java.util.List<java.io.File> importedLibraries) { this.importedLibraries = importedLibraries; }
public java.lang.String toString() { return java.util.Arrays.asList(configs).toString(); }
private void read(java.io.InputStream patchIn) throws java.io.IOException { java.util.List<com.intellij.updater.PatchAction> newActions = new java.util.ArrayList<com.intellij.updater.PatchAction>(); @java.lang.SuppressWarnings("IOResourceOpenedButNotSafelyClosed") java.io.DataInputStream in = new java.io.DataInputStream(patchIn); myOldBuild = in.readUTF(); myNewBuild = in.readUTF(); myIsBinary = in.readBoolean(); myIsStrict = in.readBoolean(); int size = in.readInt(); while ((size--) > 0) { int key = in.readInt(); com.intellij.updater.PatchAction a; switch (key) { case com.intellij.updater.Patch.CREATE_ACTION_KEY : a = new com.intellij.updater.CreateAction(this, in); break; case com.intellij.updater.Patch.UPDATE_ACTION_KEY : a = new com.intellij.updater.UpdateAction(this, in); break; case com.intellij.updater.Patch.UPDATE_ZIP_ACTION_KEY : a = new com.intellij.updater.UpdateZipAction(this, in); break; case com.intellij.updater.Patch.DELETE_ACTION_KEY : a = new com.intellij.updater.DeleteAction(this, in); break; case com.intellij.updater.Patch.VALIDATE_ACTION_KEY : a = new com.intellij.updater.ValidateAction(this, in); break; default : throw new java.lang.RuntimeException(("Unknown action type " + key)); } newActions.add(a); } myActions = newActions; }
@org.junit.Test public void testStateTransition_AudioOnToAudioDisconnecting_DisconnectAudio() { int numBroadcastsSent = setUpAudioOnState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.DISCONNECT_AUDIO, mTestDevice); verify(mHeadsetService, after(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS).times(numBroadcastsSent)).sendBroadcastAsUser(any(android.content.Intent.class), eq(UserHandle.ALL), eq(HeadsetService.BLUETOOTH_PERM)); org.junit.Assert.assertThat(mHeadsetStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(HeadsetStateMachine.AudioDisconnecting.class)); }
org.conscrypt.AbstractOpenSSLSession getSessionToReuse(long sslNativePointer, java.lang.String hostname, int port) throws javax.net.ssl.SSLException { org.conscrypt.OpenSSLSessionImpl sessionToReuse = null; if (client_mode) { javax.net.ssl.SSLSession cachedSession = getCachedClientSession(clientSessionContext, hostname, port); if (cachedSession != null) { if (cachedSession instanceof org.conscrypt.OpenSSLExtendedSessionImpl) { cachedSession = ((org.conscrypt.OpenSSLExtendedSessionImpl) (cachedSession)).getDelegate(); } if (cachedSession instanceof org.conscrypt.OpenSSLSessionImpl) { sessionToReuse = ((org.conscrypt.OpenSSLSessionImpl) (cachedSession)); org.conscrypt.NativeCrypto.SSL_set_session(sslNativePointer, sessionToReuse.sslSessionNativePointer); } } } return sessionToReuse; }
@java.lang.Override public void getDataCallList(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_DATA_CALL_LIST, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getDataCallList(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getDataCallList", e); } } }
@org.junit.Test public void firstMatchesByGivenMatcher() { android.view.View firstViewWithId1 = createViewWithId(R.id.testId1); android.view.View secondViewWithId1 = createViewWithId(R.id.testId1); org.hamcrest.Matcher<android.view.View> id1FirstOccurrenceMatcher = android.support.test.espresso.matcher.ViewMatchers.thatMatchesFirst(android.support.test.espresso.matcher.ViewMatchers.withId(R.id.testId1)); assertTrue(id1FirstOccurrenceMatcher.matches(firstViewWithId1)); assertFalse(id1FirstOccurrenceMatcher.matches(secondViewWithId1)); assertTrue(id1FirstOccurrenceMatcher.matches(firstViewWithId1)); }
@java.lang.Override public android.app.Activity newActivity(java.lang.ClassLoader cl, java.lang.String className, android.content.Intent intent) throws java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.InstantiationException { return mInterceptingActivityFactory.shouldIntercept(cl, className, intent) ? mInterceptingActivityFactory.create(cl, className, intent) : super.newActivity(cl, className, intent); }
public static java.lang.invoke.CallSite bsmLookupTest9(java.lang.invoke.MethodHandles.Lookup caller, java.lang.String name, java.lang.invoke.MethodType type, java.lang.invoke.MethodHandle staticGetter, java.lang.invoke.MethodHandle staticSetter, java.lang.invoke.MethodHandle fieldGetter, java.lang.invoke.MethodHandle fieldSetter, java.lang.invoke.MethodHandle instanceInvoke, java.lang.invoke.MethodHandle constructor, java.lang.invoke.MethodHandle interfaceInvoke, java.lang.invoke.MethodHandle privateInvoke) throws java.lang.Throwable { java.lang.System.out.println((((((((("bsmLookupTest9 [" + staticGetter) + ", ") + staticSetter) + ", ") + fieldGetter) + ", ") + fieldSetter) + "]")); java.lang.System.out.println(((name + " ") + type)); invokecustom.InvokeCustom.checkStaticFieldTest9(staticGetter, staticSetter); invokecustom.InvokeCustom instance = new invokecustom.InvokeCustom(); instance.checkFieldTest9(fieldGetter, fieldSetter); instanceInvoke.invokeExact(instance); invokecustom.InvokeCustom instance2 = ((invokecustom.InvokeCustom) (constructor.invokeExact(3))); interfaceInvoke.invoke(instance2); privateInvoke.invoke(instance2); final java.lang.invoke.MethodHandles.Lookup lookup = java.lang.invoke.MethodHandles.lookup(); final java.lang.invoke.MethodHandle targetMH = lookup.findStatic(lookup.lookupClass(), name, type); return new java.lang.invoke.ConstantCallSite(targetMH.asType(type)); }
public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_fp_mad s = new com.android.rs.test.ScriptC_fp_mad(pRS); pRS.setMessageHandler(mRsMessage); s.invoke_fp_mad_test(0, 0); pRS.finish(); waitForMessage(); pRS.destroy(); }
public vogar.target.TestRunner createTestRunner(java.lang.String... args) { if ((properties) == null) { throw new java.lang.IllegalStateException(((("Cannot create TestRunner as test does not have an " + "associated @") + (vogar.target.TestRunnerProperties.class.getName())) + " annotation")); } return new vogar.target.TestRunner(properties, new java.util.ArrayList(java.util.Arrays.asList(args))); }
private void fixD8JarOutput(java.io.File output, java.util.List<java.lang.String> inputs) throws java.io.IOException { java.io.File outputCopy = new java.io.File(((output.toString()) + ".copy")); output.renameTo(outputCopy); inputs = new java.util.ArrayList<>(inputs); inputs.add(outputCopy.toString()); byte[] buffer = new byte[4096]; try (java.util.jar.JarOutputStream outputJar = new java.util.jar.JarOutputStream(new java.io.FileOutputStream(output))) { for (java.lang.String input : inputs) { try (java.util.jar.JarInputStream inputJar = new java.util.jar.JarInputStream(new java.io.FileInputStream(input))) { for (java.util.jar.JarEntry entry = inputJar.getNextJarEntry(); entry != null; entry = inputJar.getNextJarEntry()) { if (entry.getName().endsWith(".class")) { continue; } outputJar.putNextEntry(entry); int length; while ((length = inputJar.read(buffer)) >= 0) { if (length > 0) { outputJar.write(buffer, 0, length); } } outputJar.closeEntry(); } } } } finally { outputCopy.delete(); } }
public void test_getSendBufferSize() throws java.lang.Exception { final java.net.DatagramSocket ds = new java.net.DatagramSocket(0); ds.setSendBufferSize(134); assertTrue("Incorrect buffer size", ((ds.getSendBufferSize()) >= 134)); ds.close(); try { ds.getSendBufferSize(); fail("SocketException was not thrown."); } catch (java.net.SocketException se) { } }
@java.lang.Override public java.lang.Void call() throws java.lang.Exception { forwardTlsRecords("MiTM S->C", serverInputStream, clientOutputStream, (injectEarlyCCS && injectIntoClient ? android.security.cts.OpenSSLHeartbleedTest.HandshakeMessage.TYPE_CERTIFICATE : -1)); return null; }
public void setUp() throws java.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStack assistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId = assistantStack.mDisplayId; removeStacks(android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }
@java.lang.Override public final boolean visit(TypeDeclaration typeDecl, org.eclipse.jdt.internal.compiler.lookup.BlockScope scope) { assert !(com.android.jack.ir.impl.JackIrBuilder.hasError(typeDecl)); if ((typeDecl.binding.constantPoolName()) == null) { assert false; return false; } createTypes(typeDecl); createMembers(typeDecl); return visit(typeDecl); }
public static int poll(android.system.StructPollfd[] fds, int timeoutMs) throws android.system.ErrnoException { return Libcore.os.poll(fds, timeoutMs); }
@org.junit.Test public void testGetEuiccInfo2() { int channel = mockLogicalChannelResponses("BF22030102039000"); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<byte[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.getEuiccInfo2(resultCaptor, mHandler); resultCaptor.await(); assertEquals("BF2203010203", com.android.internal.telephony.uicc.IccUtils.bytesToHexString(resultCaptor.result)); verifyStoreData(channel, "BF2200"); }
@java.lang.Override public void sendTo(byte[] data, java.net.InetAddress dstAddr, int port) throws java.lang.Exception { android.system.Os.sendto(mFd, data, 0, data.length, 0, dstAddr, port); }
@com.android.annotations.NonNull private byte[] asRawByteArray(int start, int elementCount) { getBuffer().setPosition(mValuesOffset); assert (mType) != (Type.OBJECT); assert (start + elementCount) <= (mLength); byte[] bytes = new byte[elementCount * (mType.getSize())]; getBuffer().readSubSequence(bytes, (start * (mType.getSize())), (elementCount * (mType.getSize()))); return bytes; }
@org.junit.Test public void testLamba022() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA022).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
private static void FalseCrossOverLoop2() { Main.sArrI[20] = -2; for (int i = 0; i < (Main.sArrF.length); i++) { Main.sArrF[i] = (Main.sArrI[20]) - 2; } }
private void setValues(java.util.Map<java.lang.String, java.lang.String> values) { mBuildInfo = java.lang.Integer.parseInt(values.get(com.android.sdklib.internal.export.ApkData.PROP_BUILDINFO)); mMinor = java.lang.Integer.parseInt(values.get(com.android.sdklib.internal.export.ApkData.PROP_MINOR)); mRelativePath = values.get(com.android.sdklib.internal.export.ApkData.PROP_PROJECT); mMinSdkVersion = java.lang.Integer.parseInt(values.get(com.android.sdklib.internal.export.ApkData.PROP_API)); java.lang.String tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_GL); if (tmp != null) { try { mGlVersion = java.lang.Integer.decode(tmp); } catch (java.lang.NumberFormatException e) { } } tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_ABI); if (tmp != null) { mAbi = tmp; } tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_SCREENS); if (tmp != null) { mSupportsScreens = new com.android.sdklib.xml.ManifestData.SupportsScreens(tmp); } }
public void compileAidlFile(@com.android.annotations.NonNull java.io.File aidlFile, @com.android.annotations.NonNull java.io.File sourceOutputDir, @com.android.annotations.NonNull java.util.List<java.io.File> importFolders, @com.android.annotations.Nullable com.android.builder.compiling.DependencyFileProcessor dependencyFileProcessor) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { checkNotNull(aidlFile, "aidlFile cannot be null."); checkNotNull(sourceOutputDir, "sourceOutputDir cannot be null."); checkNotNull(importFolders, "importFolders cannot be null."); checkState(((mTargetInfo) != null), "Cannot call compileAidlFile() before setTargetInfo() is called."); com.android.sdklib.IAndroidTarget target = mTargetInfo.getTarget(); com.android.sdklib.BuildToolInfo buildToolInfo = mTargetInfo.getBuildTools(); java.lang.String aidl = buildToolInfo.getPath(BuildToolInfo.PathId.AIDL); if ((aidl == null) || (!(new java.io.File(aidl).isFile()))) { throw new java.lang.IllegalStateException("aidl is missing"); } com.android.builder.internal.compiler.AidlProcessor processor = new com.android.builder.internal.compiler.AidlProcessor(aidl, target.getPath(IAndroidTarget.ANDROID_AIDL), importFolders, sourceOutputDir, (dependencyFileProcessor != null ? dependencyFileProcessor : com.android.builder.AndroidBuilder.sNoOpDependencyFileProcessor), mCmdLineRunner); processor.processFile(aidlFile); }
public static final double nextDouble(double value) { return java.lang.Math.nextUp(value); }
public com.android.ide.common.resources.platform.ViewClassInfo.LayoutParamsInfo getLayoutData() { return mLayoutData; }
public static char maybeStripMarkers(java.lang.String symbol, char fallback) { final int length = symbol.length(); if (length >= 1) { boolean sawNonMarker = false; char nonMarker = 0; for (int i = 0; i < length; i++) { final char c = symbol.charAt(i); if (((c == '\u200e') || (c == '\u200f')) || (c == '\u061c')) { continue; } if (sawNonMarker) { return fallback; } sawNonMarker = true; nonMarker = c; } if (sawNonMarker) { return nonMarker; } } return fallback; }
public void testMinimalSizeDocked() throws java.lang.Exception { if (!(supportsMultiWindowMode())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(android.server.cts.INFO, "Skipping test: no multi-window support"); return; } testMinimalSize(android.server.cts.DOCKED_STACK_ID); }
@java.lang.Override public void onRttSessionRemotelyTerminated(java.lang.String connectionId, android.telecom.Logging.Session.Info sessionInfo) throws android.os.RemoteException { mHandler.obtainMessage(android.telecom.ConnectionServiceAdapterServant.MSG_ON_RTT_REMOTELY_TERMINATED, connectionId).sendToTarget(); }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mDevice = getDevice(); if (!(supportsDragAndDrop())) { return; } mSourcePackageName = android.wm.cts.CrossAppDragAndDropTests.SOURCE_PACKAGE_NAME; mTargetPackageName = android.wm.cts.CrossAppDragAndDropTests.TARGET_PACKAGE_NAME; }
protected void forEach(int slot, android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.FieldPacker v, android.renderscript.Script.LaunchOptions sc) { mRS.validate(); mRS.validateObject(ain); mRS.validateObject(aout); if ((ain == null) && (aout == null)) { throw new android.renderscript.RSIllegalArgumentException("At least one of ain or aout is required to be non-null."); } long[] in_ids = null; if (ain != null) { in_ids = mInIdsBuffer; in_ids[0] = ain.getID(mRS); } long out_id = 0; if (aout != null) { out_id = aout.getID(mRS); } byte[] params = null; if (v != null) { params = v.getData(); } int[] limits = null; if (sc != null) { limits = new int[6]; limits[0] = sc.xstart; limits[1] = sc.xend; limits[2] = sc.ystart; limits[3] = sc.yend; limits[4] = sc.zstart; limits[5] = sc.zend; } mRS.nScriptForEach(getID(mRS), slot, in_ids, out_id, params, limits); }
public void proguardFiles(@com.android.annotations.NonNull java.lang.Object... proguardFileArray) { getProguardFiles().addAll(project.files(proguardFileArray).getFiles()); }
public com.android.ide.eclipse.adt.internal.editors.ui.DecorComposite setContent(com.android.ide.eclipse.adt.internal.editors.ui.IDecorContent content) { mContent = content; content.createControl(this); com.android.ide.eclipse.adt.internal.editors.ui.GridDataBuilder.create(content.getControl()).hSpan(2).grab().fill(); java.lang.String t = content.getTitle(); if (t != null) { setTitle(t); } org.eclipse.swt.graphics.Image i = content.getImage(); if (i != null) { setImage(i); } return this; }
@com.android.annotations.NonNull public static com.google.common.collect.ImmutableList<com.android.tools.perflib.heap.Instance> compute(@com.android.annotations.NonNull java.lang.Iterable<com.android.tools.perflib.heap.RootObj> roots) { com.android.tools.perflib.heap.analysis.TopologicalSort.TopologicalSortVisitor visitor = new com.android.tools.perflib.heap.analysis.TopologicalSort.TopologicalSortVisitor(); visitor.doVisit(roots); com.google.common.collect.ImmutableList<com.android.tools.perflib.heap.Instance> instances = visitor.getOrderedInstances(); Snapshot.SENTINEL_ROOT.setTopologicalOrder(0); int currentIndex = 0; for (com.android.tools.perflib.heap.Instance node : instances) { node.setTopologicalOrder((++currentIndex)); } return instances; }
@org.junit.runners.Parameterized.Parameters(name = "{0}") public static java.lang.Iterable<?> getParams() throws java.lang.Exception { int thisApiVersion = android.os.Build.VERSION.SDK_INT; int minApiVersion = 21; if (thisApiVersion < minApiVersion) { android.util.Log.w(com.android.rs.testbackward.RSBackwardCompatibilityTests.TAG, java.lang.String.format("API version is less than %d, no tests running", minApiVersion)); } android.content.Context ctx = android.support.test.InstrumentationRegistry.getTargetContext(); java.util.List<com.android.rs.testbackward.UnitTest> validUnitTests = new java.util.ArrayList<>(); java.lang.Iterable<java.lang.Class<? extends com.android.rs.testbackward.UnitTest>> testClasses = com.android.rs.testbackward.RSTests.getTestClassesForCurrentAPIVersion(); for (java.lang.Class<? extends com.android.rs.testbackward.UnitTest> testClass : testClasses) { com.android.rs.testbackward.UnitTest test = testClass.getDeclaredConstructor(android.content.Context.class).newInstance(ctx); validUnitTests.add(test); } com.android.rs.testbackward.UnitTest.checkDuplicateNames(validUnitTests); return validUnitTests; }
@org.junit.Test public void requestInstall_asyncSuccess() throws java.lang.Exception { configureCallerHasPermission(); android.os.ParcelFileDescriptor parcelFileDescriptor = com.android.server.timezone.RulesManagerServiceTest.createParcelFileDescriptor(com.android.server.timezone.RulesManagerServiceTest.createArbitraryBytes(1000)); com.android.server.timezone.CheckToken token = createArbitraryToken(); byte[] tokenBytes = token.toByteArray(); com.android.server.timezone.RulesManagerServiceTest.TestCallback callback = new com.android.server.timezone.RulesManagerServiceTest.TestCallback(); assertEquals(RulesManager.SUCCESS, mRulesManagerService.requestInstall(parcelFileDescriptor, tokenBytes, callback)); callback.assertNoResultReceived(); verifyNoInstallerCallsMade(); verifyNoPackageTrackerCallsMade(); configureStageInstallExpectation(TimeZoneDistroInstaller.INSTALL_SUCCESS); mFakeExecutor.simulateAsyncExecutionOfLastCommand(); com.android.server.timezone.RulesManagerServiceTest.assertClosed(parcelFileDescriptor); verifyStageInstallCalled(); verifyPackageTrackerCalled(token, true); callback.assertResultReceived(Callback.SUCCESS); }
public void getDefaultDownloadableSubscriptionList(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().getDefaultDownloadableSubscriptionList(mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public static void checkAndRun(@javax.annotation.Nonnull com.android.jack.Options options) throws com.android.jack.IllegalOptionsException, com.android.jack.JackUserException, com.android.sched.scheduler.ProcessException, com.android.sched.util.config.ConfigurationException { com.android.sched.util.RunnableHooks hooks = new com.android.sched.util.RunnableHooks(); try { com.android.jack.Jack.check(options, hooks); com.android.jack.Jack.run(options, hooks); } finally { hooks.runHooks(); com.android.sched.util.config.ThreadConfig.unsetConfig(); } }
org.gradle.model.collection.ManagedSet<com.android.build.gradle.managed.ProductFlavor> getProductFlavors();
public static void setExtensionDefault(com.android.build.gradle.managed.NdkConfig ndkConfig) { if (ndkConfig.getToolchain().isEmpty()) { ndkConfig.setToolchain(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN); } else { if ((!(ndkConfig.getToolchain().equals("gcc"))) && (!(ndkConfig.getToolchain().equals("clang")))) { throw new org.gradle.api.InvalidUserDataException(java.lang.String.format("Invalid toolchain '%s'. Supported toolchains are 'gcc' and 'clang'.", ndkConfig.getToolchain())); } } if (ndkConfig.getToolchainVersion().isEmpty()) { ndkConfig.setToolchainVersion(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN_VERSION); } ndkConfig.getCFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue("**/*.c"); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue("**/*.cpp"); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue("**/*.cc"); } }); if (ndkConfig.getStl().isEmpty()) { ndkConfig.setStl(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_STL); } else { com.android.build.gradle.ndk.internal.StlConfiguration.checkStl(ndkConfig.getStl()); } }
public com.android.dex.MethodHandle adjust(com.android.dex.MethodHandle methodHandle) { return new com.android.dex.MethodHandle(target, methodHandle.getMethodHandleType(), methodHandle.getUnused1(), (methodHandle.getMethodHandleType().isField() ? adjustField(methodHandle.getFieldOrMethodId()) : adjustMethod(methodHandle.getFieldOrMethodId())), methodHandle.getUnused2()); }
public static short $noinline$charToDoubleToShort(char value) { if (Main.doThrow) { throw new java.lang.Error(); } return ((short) ((double) (value))); }
private static java.lang.String formatDateNonGregorianCalendar(java.lang.String fmt) { java.text.DateFormat dateFormat = new java.text.SimpleDateFormat(fmt, java.util.Locale.US); libcore.java.text.SimpleDateFormatTest.NonGregorianCalendar cal = new libcore.java.text.SimpleDateFormatTest.NonGregorianCalendar(); cal.clear(); cal.setTimeZone(libcore.java.text.SimpleDateFormatTest.UTC); dateFormat.setCalendar(cal); return dateFormat.format(new java.util.Date(0)); }
private void updatePriorityQueue(java.util.Timer.ScheduledTask taskExecuted, long timeFinished) { scheduledTaskPriorityQueue.remove(taskExecuted); if ((taskExecuted.period) == null) { return; } taskExecuted.nextExecution = (taskExecuted.period) + (taskExecuted.isAtFixedRate ? taskExecuted.nextExecution : timeFinished); scheduledTaskPriorityQueue.add(taskExecuted); }
private void checkFmodFloatFloatFloat() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, -5203834224221501348L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, -5203834224221501348L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testFmodFloatFloatFloat(inX, out); verifyResultsFmodFloatFloatFloat(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFmodFloatFloatFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testFmodFloatFloatFloat(inX, out); verifyResultsFmodFloatFloatFloat(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFmodFloatFloatFloat: " + (e.toString()))); } }
private static dalvik.system.DexPathList.Element[] makeElements(java.util.List<java.io.File> files, java.io.File optimizedDirectory, java.util.List<java.io.IOException> suppressedExceptions, boolean ignoreDexFiles) { java.util.List<dalvik.system.DexPathList.Element> elements = new java.util.ArrayList<>(); for (java.io.File file : files) { java.io.File zip = null; java.io.File dir = new java.io.File(""); dalvik.system.DexFile dex = null; java.lang.String path = file.getPath(); java.lang.String name = file.getName(); if (path.contains(dalvik.system.DexPathList.zipSeparator)) { java.lang.String[] split = path.split(dalvik.system.DexPathList.zipSeparator, 2); zip = new java.io.File(split[0]); dir = new java.io.File(split[1]); } else if (file.isDirectory()) { elements.add(new dalvik.system.DexPathList.Element(file, true, null, null)); } else if (file.isFile()) { if ((!ignoreDexFiles) && (name.endsWith(dalvik.system.DexPathList.DEX_SUFFIX))) { try { dex = dalvik.system.DexPathList.loadDexFile(file, optimizedDirectory); } catch (java.io.IOException ex) { java.lang.System.logE(("Unable to load dex file: " + file), ex); } } else { zip = file; if (!ignoreDexFiles) { try { dex = dalvik.system.DexPathList.loadDexFile(file, optimizedDirectory); } catch (java.io.IOException suppressed) { suppressedExceptions.add(suppressed); } } } } else { java.lang.System.logW(("ClassLoader referenced unknown path: " + file)); } if ((zip != null) || (dex != null)) { elements.add(new dalvik.system.DexPathList.Element(dir, false, zip, dex)); } } return elements.toArray(new dalvik.system.DexPathList.Element[elements.size()]); }
@javax.annotation.Nonnull protected static com.android.sched.vfs.InputVFile getJackFile(@javax.annotation.Nonnull java.lang.String typeName) { try { assert (com.android.jack.experimental.incremental.JackIncremental.incrementalInputLibrary) != null; return com.android.jack.experimental.incremental.JackIncremental.incrementalInputLibrary.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(typeName, com.android.jack.experimental.incremental.JackIncremental.fileSeparator)); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { throw new java.lang.AssertionError(e); } }
public native void fsync(java.io.FileDescriptor fd) throws android.system.ErrnoException;
private android.security.net.config.CertificatesEntryRef parseCertificatesEntry(android.content.res.XmlResourceParser parser) throws android.security.net.config.XmlConfigSource.ParserException, java.io.IOException, org.xmlpull.v1.XmlPullParserException { boolean overridePins = parser.getAttributeBooleanValue(null, "overridePins", false); int sourceId = parser.getAttributeResourceValue(null, "src", (-1)); java.lang.String sourceString = parser.getAttributeValue(null, "src"); android.security.net.config.CertificateSource source = null; if (sourceString == null) { throw new android.security.net.config.XmlConfigSource.ParserException(parser, "certificates element missing src attribute"); } if (sourceId != (-1)) { source = new android.security.net.config.ResourceCertificateSource(sourceId, mContext); } else if ("system".equals(sourceString)) { source = android.security.net.config.SystemCertificateSource.getInstance(); } else if ("user".equals(sourceString)) { source = android.security.net.config.UserCertificateSource.getInstance(); } else { throw new android.security.net.config.XmlConfigSource.ParserException(parser, ("Unknown certificates src. " + "Should be one of system|user|@resourceVal")); } com.android.internal.util.XmlUtils.skipCurrentTag(parser); return new android.security.net.config.CertificatesEntryRef(source, overridePins); }
@com.android.internal.annotations.VisibleForTesting public boolean sendDtmf(int dtmf, android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "sendDtmf device is null"); return false; } if ((mPhoneProxy) != null) { try { return mPhoneProxy.sendDtmf(dtmf); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "Handsfree phone proxy null for sending DTMF"); } return false; }
public void testGetValues005_Int() { org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester("breakpointInt", StackTrace002Debuggee.INT_SIGNAL); org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod("runBreakpointInt"); methodInfo.addVariable("param", new org.apache.harmony.jpda.tests.framework.jdwp.Value(StackTrace002Debuggee.INT_PARAM_VALUE)); runStackFrameTest(tester); }
public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException;
@java.lang.Override public void dispose(int subscriptionId) { android.os.Bundle b = new android.os.Bundle(); b.putString(android.telephony.cts.embmstestapp.CtsDownloadService.METHOD_NAME, android.telephony.cts.embmstestapp.CtsDownloadService.METHOD_CLOSE); b.putInt(android.telephony.cts.embmstestapp.CtsDownloadService.ARGUMENT_SUBSCRIPTION_ID, subscriptionId); mReceivedCalls.add(b); }
@java.lang.Override public void visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode node) { if (node.isRoot()) { return; } java.lang.String nodeName = enquote(node.getId()); java.time.Instant startInstant = node.getStartInstant(); java.time.Instant endInstant = node.getEndInstant(); boolean priorityClash = node.hasPriorityClash(); java.lang.String fromTimestamp = startInstant.toString(); java.lang.String toTimestamp = endInstant.toString(); java.lang.String optionalColor = (priorityClash) ? ",color=\"red\"" : ""; java.lang.String label = ((((((node.getZoneInfosString()) + "\nFrom=") + fromTimestamp) + " to ") + toTimestamp) + "\nPeriod count=") + (node.getPeriodCount()); writeLine((((((nodeName + "[label=\"") + label) + "\"") + optionalColor) + "];")); for (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode child : node.getChildren()) { writeLine((((nodeName + " -> ") + (enquote(child.getId()))) + ";")); } }
@java.lang.Override protected java.util.Set<java.lang.String> getDefaultValues() { com.android.resources.Density[] values = com.android.resources.Density.values(); java.util.Set<java.lang.String> fullList = com.google.common.collect.Sets.newHashSetWithExpectedSize(((values.length) - 2)); for (com.android.resources.Density value : values) { if (((value != (com.android.resources.Density.NODPI)) && (value != (com.android.resources.Density.ANYDPI))) && (value.isRecommended())) { fullList.add(value.getResourceValue()); } } return fullList; }
private void onUpdateDeviceState(int eventType, boolean state) { switch (eventType) { case com.android.internal.telephony.DeviceStateMonitor.EVENT_SCREEN_STATE_CHANGED : if ((mIsScreenOn) == state) return; mIsScreenOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_CHARGING_STATE_CHANGED : if ((mIsCharging) == state) return; mIsCharging = state; sendDeviceState(com.android.internal.telephony.CHARGING_STATE, mIsCharging); break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_TETHERING_STATE_CHANGED : if ((mIsTetheringOn) == state) return; mIsTetheringOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_POWER_SAVE_MODE_CHANGED : if ((mIsPowerSaveOn) == state) return; mIsPowerSaveOn = state; sendDeviceState(com.android.internal.telephony.POWER_SAVE_MODE, mIsPowerSaveOn); break; default : return; } if ((mIsLowDataExpected) != (isLowDataExpected())) { mIsLowDataExpected = !(mIsLowDataExpected); sendDeviceState(com.android.internal.telephony.LOW_DATA_EXPECTED, mIsLowDataExpected); } int newFilter = 0; if (!(shouldTurnOffSignalStrength())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.SIGNAL_STRENGTH; } if (!(shouldTurnOffFullNetworkUpdate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.FULL_NETWORK_STATE; } if (!(shouldTurnOffDormancyUpdate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.DATA_CALL_DORMANCY_CHANGED; } if (!(shouldTurnOffLinkCapacityEstimate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.LINK_CAPACITY_ESTIMATE; } if (!(shouldTurnOffPhysicalChannelConfig())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.PHYSICAL_CHANNEL_CONFIG; } setUnsolResponseFilter(newFilter, false); }
@java.lang.Override protected void tearDown() throws java.lang.Exception { super.tearDown(); mTelephonyProviderTestable.closeDatabase(); }
boolean sendTrackChangeWithId(boolean requesting, @android.annotation.Nullable com.android.bluetooth.avrcp.MediaController mediaController) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ((("sendTrackChangeWithId (" + requesting) + "): controller ") + mediaController)); long qid = getActiveQueueItemId(mediaController); byte[] track = java.nio.ByteBuffer.allocate(AvrcpConstants.UID_SIZE).putLong(qid).array(); if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ("trackChangedRsp: 0x" + (com.android.bluetooth.Utils.byteArrayToString(track)))); int trackChangedNT = AvrcpConstants.NOTIFICATION_TYPE_CHANGED; if (requesting) trackChangedNT = AvrcpConstants.NOTIFICATION_TYPE_INTERIM; mMediaInterface.trackChangedRsp(trackChangedNT, track); mLastTrackIdSent = qid; return trackChangedNT == (AvrcpConstants.NOTIFICATION_TYPE_CHANGED); }
@java.lang.Override public com.android.build.gradle.internal.dsl.PreprocessingOptions getPreprocessingOptions() { return model.getPreProcessingOptions(); }
@javax.annotation.Nonnull private com.android.jack.jayce.MethodNode getNNode(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod loaded) throws com.android.jack.jayce.JayceFormatException, com.android.jack.jayce.JayceVersionException, java.io.IOException { com.android.jack.jayce.MethodNode methodNode = nnode.get(); if ((methodNode == null) || ((methodNode.getLevel()) != (NodeLevel.FULL))) { com.android.jack.jayce.DeclaredTypeNode declaredTypeNode = enclosingClassLoader.getNNode(NodeLevel.FULL, loaded.getEnclosingType().getSession().getUserLogger()); methodNode = declaredTypeNode.getMethodNode(loaded); } return methodNode; }
@java.lang.Override public void sendDeviceState(int stateType, boolean state, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SEND_DEVICE_STATE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " ") + stateType) + ":") + state)); } try { radioProxy.sendDeviceState(rr.mSerial, stateType, state); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendDeviceState", e); } } }
public int ioctlFlags(java.io.FileDescriptor fd, java.lang.String interfaceName) throws android.system.ErrnoException;
@org.junit.Test public void coreToJayceFromFolder() throws java.lang.Exception { com.android.jill.Options options = new com.android.jill.Options(); options.setBinaryFile(new java.io.File(((com.android.jack.test.TestsProperties.getAndroidRootDir().getPath()) + "/out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes/"))); options.setVerbose(true); options.container = ContainerType.DIR; options.outputDirOrZip = com.android.jill.JillTestTools.createTempDir("core_", "_dir"); new com.android.jill.Jill(options, "0.1").process(options.getBinaryFile()); }
@org.junit.Test public void test001c() throws java.lang.Exception { java.io.File jackOutput = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); runTest001(jackOutput, "keep-first", errOut, false, false); com.android.jack.library.InputJackLibrary outputLib = null; try { outputLib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibrary(jackOutput); com.android.sched.vfs.InputVFile myClass1 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE1_PATH); com.android.sched.vfs.InputVFile myClass2 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE2_PATH); com.android.sched.vfs.InputVFile myClass3 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE3_PATH); checkJayceNotEmpty(myClass1); checkJayceNotEmpty(myClass2); checkJayceNotEmpty(myClass3); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { junit.framework.Assert.fail(); } finally { if (outputLib != null) { outputLib.close(); } junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); } }
@java.lang.Override protected void onPreExecute() { mBitmap = getBitmap(); mReferenceBitmap = android.holo.cts.BitmapAssets.getBitmap(getApplicationContext(), mBitmapName); final int threshold = 1; mSame = compareTo(mBitmap, mReferenceBitmap, threshold); }
private void checkElement(java.io.File file, org.w3c.dom.Element element, java.util.Map<java.lang.String, com.android.ide.common.resources.platform.AttributeInfo> map, java.util.Set<java.lang.String> seen) { org.w3c.dom.NamedNodeMap attributes = element.getAttributes(); for (int i = 0, n = attributes.getLength(); i < n; i++) { org.w3c.dom.Attr attribute = ((org.w3c.dom.Attr) (attributes.item(i))); java.lang.String uri = attribute.getNamespaceURI(); java.lang.String name = attribute.getLocalName(); java.lang.String value = attribute.getValue(); if (com.android.SdkConstants.ANDROID_URI.equals(uri)) { com.android.ide.common.resources.platform.AttributeInfo info = map.get(name); if (info == null) { java.lang.System.out.println(((("Warning: Unknown attribute '" + name) + "' in ") + file)); return; } if (!(info.isValid(value, null, null))) { if ((name.equals("duration")) || (name.equals("exitFadeDuration"))) { return; } java.lang.String message = ((((((("In file " + (file.getPath())) + ":\nCould not validate value \"") + value) + "\" for attribute \'") + name) + "' where the attribute info has formats ") + (info.getFormats())) + "\n"; java.lang.System.out.println(("\n" + message)); fail(message); } if (((value.startsWith("@")) || (value.startsWith("?"))) && (!(info.getFormats().contains(Format.REFERENCE)))) { if (!(seen.contains(name))) { seen.add(name); java.lang.System.out.println(((((((("\"" + name) + "\" with formats ") + (info.getFormats())) + " was passed a reference (") + value) + ") in file ") + file)); } } } } }
private static void startActivityMonitoring() { com.intellij.concurrency.JobScheduler.getScheduler().scheduleAtFixedRate(new java.lang.Runnable() { @java.lang.Override public void run() { long count = com.intellij.ide.SystemHealthMonitor.ourStudioActionCount.getAndSet(0); if (count == 0) { return; } com.intellij.internal.statistic.analytics.PlatformUsageTracker.trackActivity(count); if (com.intellij.openapi.application.ApplicationManager.getApplication().isInternal()) { java.lang.System.out.printf("%d: Activity Tracker, usage in the last minute: %d\n", ((java.lang.System.currentTimeMillis()) % 10000), count); } } }, com.intellij.ide.SystemHealthMonitor.INTERVAL_IN_MINUTES, com.intellij.ide.SystemHealthMonitor.INTERVAL_IN_MINUTES, java.util.concurrent.TimeUnit.MINUTES); }
@java.lang.Override public synchronized void onLoadChildren(final java.lang.String parentMediaId, final com.android.bluetooth.a2dpsink.mbs.Result<java.util.List<android.media.browse.MediaBrowser.MediaItem>> result) { if ((mAvrcpCtrlSrvc) == null) { android.util.Log.w(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, "AVRCP not yet connected."); result.sendResult(java.util.Collections.emptyList()); return; } if (com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.DBG) android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ("onLoadChildren parentMediaId=" + parentMediaId)); if (!(mAvrcpCtrlSrvc.getChildren(mA2dpDevice, parentMediaId, 0, 255))) { result.sendResult(java.util.Collections.emptyList()); return; } synchronized(this) { mParentIdToRequestMap.put(parentMediaId, result); } result.detach(); }
@org.junit.Test public void addProviderWithInvalidCredential() throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = new android.net.wifi.hotspot2.PasspointConfiguration(); config.homeSp = new android.net.wifi.hotspot2.pps.HomeSP(); config.homeSp.fqdn = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_FQDN; config.homeSp.friendlyName = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_FRIENDLY_NAME; config.credential = new android.net.wifi.hotspot2.pps.Credential(); config.credential.realm = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_REALM; config.credential.caCertificate = com.android.server.wifi.FakeKeys.CA_CERT0; config.credential.userCredential = new android.net.wifi.hotspot2.pps.Credential.UserCredential(); config.credential.userCredential.username = "username"; config.credential.userCredential.password = "password"; config.credential.userCredential.eapType = android.net.wifi.EAPConstants.EAP_TLS; config.credential.userCredential.nonEapInnerMethod = "MS-CHAP"; assertFalse(mManager.addProvider(config)); }
public android.system.StructTimeval getsockoptTimeval(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException;
@java.lang.Override public void endTraceSeed(@javax.annotation.Nonnull com.android.jack.ir.ast.JField field) { composedStatus.pop(); }
public native void mkfifo(java.lang.String path, int mode) throws android.system.ErrnoException;
public boolean isOfType(@javax.annotation.Nonnull com.android.sched.vfs.InputVFile v) { return v.getName().endsWith(getFileExtension()); }
public static int $noinline$SubNeg2(int arg1, int arg2) { if (Main.doThrow) { throw new java.lang.Error(); } int temp = -arg1; return (temp - arg2) | (temp - arg2); }
@java.lang.Override public long getTagBits() { return com.android.jack.ecj.loader.jast.AnnotationUtils.getTagBits(jDeclaredType); }
private static native void nativeDrawVertices(long nativeCanvas, int mode, int n, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, long nativePaint);
static void $noinline$someStaticMethod(java.lang.Iterable<?> it) { it.iterator(); if (Main.doThrow) { throw new java.lang.Error(""); } }
public void registerForSuppServiceIndication(android.os.Handler h, int what, java.lang.Object obj) { mSsIndicationRegistrant = new android.os.Registrant(h, what, obj); }
@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) > 0) { debugLog(("dumpsys arguments, check for protobuf output: " + (android.text.TextUtils.join(" ", args)))); if (args[0].startsWith("--proto")) { if (args[0].equals("--proto-java-bin")) { dumpJava(fd); } else { dumpNative(fd, args); } return; } } writer.println("Bluetooth Status"); writer.println((" enabled: " + (isEnabled()))); writer.println((" state: " + (getState()))); writer.println((" address: " + (getAddress()))); writer.println(((" name: " + (getName())) + "\n")); writer.println("Bonded devices:"); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println((((((" " + (device.getAddress())) + " [") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + "] ") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }
public void disconnectIndication(int token, int disconnectType) { android.util.Log.d(com.android.bluetooth.sap.SapRilReceiver.TAG, ((("disconnectIndication: token " + token) + " disconnectType ") + disconnectType)); com.android.bluetooth.sap.SapMessage sapMessage = new com.android.bluetooth.sap.SapMessage(SapMessage.ID_RIL_UNSOL_DISCONNECT_IND); sapMessage.setDisconnectionType(disconnectType); sendSapMessage(sapMessage); }
public void testOverlay1Content() throws java.lang.Exception { java.io.File project = buildProject("overlay1", BasePlugin.GRADLE_MIN_VERSION); java.io.File drawableOutput = new java.io.File(project, (("build/" + (com.android.build.gradle.BasePlugin.FD_INTERMEDIATES)) + "/res/debug/drawable")); com.android.build.gradle.ManualBuildTest.checkImageColor(drawableOutput, "no_overlay.png", com.android.build.gradle.ManualBuildTest.GREEN); com.android.build.gradle.ManualBuildTest.checkImageColor(drawableOutput, "type_overlay.png", com.android.build.gradle.ManualBuildTest.GREEN); }
protected void finalize() { java.lang.System.out.println("Finalizer started and spinning..."); int j = 0; long start; long end; start = java.lang.System.nanoTime(); for (int i = 0; i < 1000000; i++) { j++; } end = java.lang.System.nanoTime(); java.lang.System.out.println("Finalizer done spinning."); java.lang.System.out.println("Finalizer sleeping forever now."); while (true) { Main.snooze(10000); } }
public static java.lang.String getJvmArg() { java.lang.String buildDir = java.lang.System.getenv("PROJECT_BUILD_DIR"); buildDir = (buildDir == null) ? "build" : buildDir; java.io.File jacocoAgent = new java.io.File(buildDir, "jacoco/agent.jar"); if (!(jacocoAgent.isFile())) { try { org.jacoco.agent.AgentJar.extractTo(jacocoAgent); } catch (java.io.IOException ignored) { fail("Error extracting jacoco agent"); } } return ((("-javaagent:" + (jacocoAgent.toString())) + "=destfile=") + buildDir) + "/jacoco/test.exec"; }
private static android.net.NetworkState buildMobileIPv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false, false); }
public com.android.ide.eclipse.adt.internal.editors.ui.GridLayoutBuilder spacing(int s) { com.android.ide.eclipse.adt.internal.editors.ui.GridLayoutBuilder.mGL.verticalSpacing = s; com.android.ide.eclipse.adt.internal.editors.ui.GridLayoutBuilder.mGL.horizontalSpacing = s; return this; }
@java.lang.Override public boolean checkForCondition() { boolean condition = false; boolean isSuccess = mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches(com.android.devtools.systemimage.uitest.watchers.ApiDemosWatcher.NO_THANKS_CASE_INSENSITIVE)).waitForExists(java.util.concurrent.TimeUnit.MILLISECONDS.convert(3L, java.util.concurrent.TimeUnit.SECONDS)); try { if (isSuccess) { mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches(com.android.devtools.systemimage.uitest.watchers.ApiDemosWatcher.NO_THANKS_CASE_INSENSITIVE)).click(); condition = true; } isSuccess = mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches(com.android.devtools.systemimage.uitest.watchers.ApiDemosWatcher.CONTINUE_CASE_INSENSITIVE)).waitForExists(java.util.concurrent.TimeUnit.MILLISECONDS.convert(3L, java.util.concurrent.TimeUnit.SECONDS)); if (isSuccess) { mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches(com.android.devtools.systemimage.uitest.watchers.ApiDemosWatcher.CONTINUE_CASE_INSENSITIVE)).click(); condition = true; } } catch (android.support.test.uiautomator.UiObjectNotFoundException e) { throw new java.lang.AssertionError("Failed to dismiss the API Demos Test confirmation popup dialogs"); } return condition; }
@org.jetbrains.annotations.NotNull @java.lang.Override public com.intellij.psi.PsiElementVisitor buildVisitor(@org.jetbrains.annotations.NotNull final com.intellij.codeInspection.ProblemsHolder holder, boolean isOnTheFly) { return new com.google.gct.intellij.endpoints.validation.EndpointPsiElementVisitor() { @java.lang.Override public void visitAnnotation(com.intellij.psi.PsiAnnotation annotation) { if (!(annotation.getQualifiedName().equals(GctConstants.APP_ENGINE_ANNOTATION_API))) { return; } com.intellij.psi.PsiAnnotationMemberValue annotationMemberValue = annotation.findAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNameInspection.API_NAME_ATTRIBUTE); if (annotationMemberValue == null) { return; } java.lang.String nameValueWithQuotes = annotationMemberValue.getText(); java.lang.String nameValue = com.google.gct.intellij.endpoints.util.EndpointUtilities.removeBeginningAndEndingQuotes(nameValueWithQuotes); if (!(com.google.gct.intellij.endpoints.validation.ApiNameInspection.API_NAME_PATTERN.matcher(nameValue).matches())) { holder.registerProblem(annotation, "Invalid api name: it must start with a lower case letter and consists only of letter and digits", LocalQuickFix.EMPTY_ARRAY); } } }; }
private void registerAllAppEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log("registerUiccCardEvents: registering for EVENT_APP_READY"); app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir != null) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log("registerUiccCardEvents: registering for EVENT_RECORDS_LOADED"); ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } } } }
@java.lang.Override public void initialize(int keysize, java.security.SecureRandom random) { final java.lang.String name = org.apache.harmony.xnet.provider.jsse.OpenSSLECKeyPairGenerator.SIZE_TO_CURVE_NAME.get(keysize); if (name == null) { throw new java.security.InvalidParameterException(("unknown key size " + keysize)); } final org.apache.harmony.xnet.provider.jsse.OpenSSLECGroupContext possibleGroup = org.apache.harmony.xnet.provider.jsse.OpenSSLECGroupContext.getCurveByName(name); if (possibleGroup == null) { throw new java.security.InvalidParameterException(("unknown curve " + name)); } group = possibleGroup; }
private boolean connectSocket() { try { if ((mPseRec) == null) { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ("connectSocket: UUID: " + (BluetoothUuid.PBAP_PSE.getUuid()))); mSocket = mDevice.createRfcommSocketToServiceRecord(BluetoothUuid.PBAP_PSE.getUuid()); } else if ((mPseRec.getL2capPsm()) != (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.L2CAP_INVALID_PSM)) { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ("connectSocket: PSM: " + (mPseRec.getL2capPsm()))); mSocket = mDevice.createL2capSocket(mPseRec.getL2capPsm()); } else { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ("connectSocket: channel: " + (mPseRec.getRfcommChannelNumber()))); mSocket = mDevice.createRfcommSocket(mPseRec.getRfcommChannelNumber()); } if ((mSocket) != null) { mSocket.connect(); return true; } else { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, "Could not create socket"); } } catch (java.io.IOException e) { android.util.Log.e(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, "Error while connecting socket", e); } return false; }
@com.android.internal.annotations.VisibleForTesting public void toggleMute() { if (mCallsManager.hasEmergencyCall()) { android.telecom.Log.v(this, "ignoring toggleMute for emergency call"); return; } mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.TOGGLE_MUTE); }
public native void setsockoptByte(java.io.FileDescriptor fd, int level, int option, int value) throws android.system.ErrnoException;
@org.junit.Test public void testClassImplementsTwoInterfacesWithSameDefenderMethod() throws java.lang.Exception { run(GWT_LAMBDA_TEST_34); }
@java.lang.Override public boolean run() { synchronized(mLock) { mExecutionThread = java.lang.Thread.currentThread(); if (mCancelled) { com.android.tradefed.log.LogUtil.CLog.i("Process was cancelled before being awaited."); return false; } } boolean success; try { success = (mProcess.waitFor()) == 0; com.android.tradefed.log.LogUtil.CLog.i("Process terminates normally."); } catch (java.lang.InterruptedException e) { success = false; com.android.tradefed.log.LogUtil.CLog.i("Process is interrupted."); } return success; }
@java.lang.Override public void onActivityResult(int request, int result, android.content.Intent data) { if (((request == (com.android.packageinstaller.PackageInstallerActivity.REQUEST_ENABLE_UNKNOWN_SOURCES)) && (result == (RESULT_OK))) && (isUnknownSourcesEnabled())) { initiateInstall(); } else { finish(); } }
public char getMinusSign() { if ((minusSign.length()) == 1) { return minusSign.charAt(0); } throw new java.lang.UnsupportedOperationException(("Minus sign spans multiple characters: " + (minusSign))); }
private static java.nio.ByteBuffer getAndroidManifestFromApk(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections) throws com.android.apksig.apk.ApkFormatException, java.io.IOException { java.util.List<com.android.apksig.internal.zip.CentralDirectoryRecord> cdRecords = com.android.apksig.internal.apk.v1.V1SchemeVerifier.parseZipCentralDirectory(apk, zipSections); try { return com.android.apksig.ApkSigner.getAndroidManifestFromApk(cdRecords, apk.slice(0, zipSections.getZipCentralDirectoryOffset())); } catch (com.android.apksig.zip.ZipFormatException e) { throw new com.android.apksig.apk.ApkFormatException("Failed to read AndroidManifest.xml", e); } }
@org.junit.Test public void testFSuffix() { int channel = mockLogicalChannelResponses("BF2D14A012E3105A0A896700000000004523FF9F7001019000"); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<android.service.euicc.EuiccProfileInfo[]> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.getAllProfiles(resultCaptor, mHandler); resultCaptor.await(); assertUnexpectedException(resultCaptor.exception); android.service.euicc.EuiccProfileInfo[] profiles = resultCaptor.result; assertEquals(1, profiles.length); assertEquals("987600000000005432", profiles[0].getIccid()); assertEquals(EuiccProfileInfo.PROFILE_STATE_ENABLED, profiles[0].getState()); verifyStoreData(channel, "BF2D0D5C0B5A909192B79F709599BF76"); }
@java.lang.Override public void getHardwareConfig(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_HARDWARE_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getHardwareConfig(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getHardwareConfig", e); } } }
@java.lang.Override protected javax.swing.Icon getSetIcon(boolean isMuted) { if (!(com.google.api.client.repackaged.com.google.common.base.Strings.isNullOrEmpty(myErrorMessage))) { return icons.GoogleCloudToolsIcons.CLOUD_BREAKPOINT_ERROR; } if (myIsVerified) { return icons.GoogleCloudToolsIcons.CLOUD_BREAKPOINT_CHECKED; } return icons.GoogleCloudToolsIcons.CLOUD_BREAKPOINT; }
private static <K, V> void check_unmodifiableNavigableMap_collectionViews(java.util.NavigableMap<K, V> map, java.util.List<K> keysInOrder, java.util.List<V> valuesInOrder, K absentKey) { java.util.List<K> reverseKeys = libcore.java.util.CollectionsTest.reverseCopyOf(keysInOrder); libcore.java.util.CollectionsTest.check_unmodifiableSet(map.keySet(), absentKey); libcore.java.util.CollectionsTest.check_orderedSet(map.keySet(), keysInOrder); libcore.java.util.CollectionsTest.check_unmodifiableNavigableSet(map.navigableKeySet(), keysInOrder, absentKey); libcore.java.util.CollectionsTest.check_unmodifiableNavigableSet(map.descendingMap().descendingKeySet(), keysInOrder, absentKey); libcore.java.util.CollectionsTest.check_unmodifiableNavigableSet(map.descendingKeySet(), reverseKeys, absentKey); libcore.java.util.CollectionsTest.check_unmodifiableSet(map.descendingMap().keySet(), absentKey); libcore.java.util.CollectionsTest.check_orderedSet(map.descendingMap().keySet(), reverseKeys); libcore.java.util.CollectionsTest.check_unmodifiableNavigableSet(map.descendingMap().navigableKeySet(), reverseKeys, absentKey); libcore.java.util.CollectionsTest.check_unmodifiableOrderedCollection(map.values(), valuesInOrder); libcore.java.util.CollectionsTest.check_orderedCollection(map.values(), valuesInOrder); libcore.java.util.CollectionsTest.check_unmodifiableOrderedCollection(map.descendingMap().values(), libcore.java.util.CollectionsTest.reverseCopyOf(valuesInOrder)); libcore.java.util.CollectionsTest.check_orderedCollection(map.descendingMap().values(), libcore.java.util.CollectionsTest.reverseCopyOf(valuesInOrder)); }
private static void addStyleToPath(com.android.assetstudiolib.vectordrawable.SvgLeafNode path, java.lang.String value) { com.android.assetstudiolib.vectordrawable.Svg2Vector.logger.log(java.util.logging.Level.FINE, ("Style found is " + value)); if (value != null) { java.lang.String[] parts = value.split(";"); for (int k = (parts.length) - 1; k >= 0; k--) { java.lang.String subStyle = parts[k]; java.lang.String[] nameValue = subStyle.split(":"); if ((((nameValue.length) == 2) && ((nameValue[0]) != null)) && ((nameValue[1]) != null)) { if (com.android.assetstudiolib.vectordrawable.Svg2Vector.presentationMap.containsKey(nameValue[0])) { path.fillPresentationAttributes(nameValue[0], nameValue[1]); } else if (nameValue[0].equals(com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_OPACITY)) { path.fillPresentationAttributes(com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_FILL_OPACITY, nameValue[1]); } } } } }
private boolean processArchive(java.io.File file) throws java.io.IOException { java.util.zip.ZipFile zip = new java.util.zip.ZipFile(file); java.util.ArrayList<? extends java.util.zip.ZipEntry> entriesList = java.util.Collections.list(zip.entries()); if (sort) { java.util.Collections.sort(entriesList, new java.util.Comparator<java.util.zip.ZipEntry>() { public int compare(java.util.zip.ZipEntry a, java.util.zip.ZipEntry b) { return com.android.dx.cf.direct.ClassPathOpener.compareClassNames(a.getName(), b.getName()); } }); } consumer.onProcessArchiveStart(file); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(40000); byte[] buf = new byte[20000]; boolean any = false; for (java.util.zip.ZipEntry one : entriesList) { final boolean isDirectory = one.isDirectory(); java.lang.String path = one.getName(); if (filter.accept(path)) { final byte[] bytes; if (!isDirectory) { java.io.InputStream in = zip.getInputStream(one); baos.reset(); int read; while ((read = in.read(buf)) != (-1)) { baos.write(buf, 0, read); } in.close(); bytes = baos.toByteArray(); } else { bytes = new byte[0]; } any |= consumer.processFileBytes(path, one.getTime(), bytes); } } zip.close(); return any; }
@java.lang.Override public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add("packageName", mPackageName).add("versionCode", mVersionCode).add("versionName", mVersionName).toString(); }
@com.android.annotations.NonNull private com.android.manifmerger.IMergerLog.FileAndLine xmlFileAndLine(@com.android.annotations.NonNull org.w3c.dom.Node node) { java.lang.String name = com.android.manifmerger.XmlUtils.extractXmlFilename(node); int line = com.android.manifmerger.XmlUtils.extractLineNumber(node); return new com.android.manifmerger.IMergerLog.FileAndLine(name, line); }
public static native int EVP_MD_CTX_copy(org.conscrypt.OpenSSLDigestContext dst_ctx, org.conscrypt.OpenSSLDigestContext src_ctx);
@com.android.annotations.NonNull com.android.build.gradle.internal.ProductFlavorData<com.android.build.gradle.internal.dsl.CoreProductFlavor> getDefaultConfig();
@org.junit.Test public void test004() throws java.lang.Exception { java.lang.String test = "com.android.jack.optimizations.valuepropagation.test004"; java.lang.String aType = "Lcom/android/jack/optimizations/valuepropagation/test004/A;"; com.android.jack.optimizations.valuepropagation.CompilationProperties properties = defaultProperties(); compileAndValidate(test, properties, new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("check()I", dalvik(test, "A.check.dalvik")))); properties = properties.with(Optimizations.FieldValuePropagation.REMOVE_NULL_CHECKS.getName(), java.lang.Boolean.FALSE).with(Optimizations.FieldValuePropagation.ENSURE_TYPE_INITIALIZERS.getName(), java.lang.Boolean.TRUE); compileAndValidate(test, properties, new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert("check()I", dalvik(test, "A.check.r.n.c.dalvik")))); }
boolean collectForceStopProviders(java.lang.String name, int appId, boolean doit, boolean evenPersistent, int userId, java.util.ArrayList<com.android.server.am.ContentProviderRecord> result) { boolean didSomething = false; if ((userId == (android.os.UserHandle.USER_ALL)) || (userId == (android.os.UserHandle.USER_OWNER))) { didSomething = collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, mSingletonByClass, result); } if ((!doit) && didSomething) { return true; } if (userId == (android.os.UserHandle.USER_ALL)) { for (int i = 0; i < (mProvidersByClassPerUser.size()); i++) { if (collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, mProvidersByClassPerUser.valueAt(i), result)) { if (!doit) { return true; } didSomething = true; } } } else { java.util.HashMap<android.content.ComponentName, com.android.server.am.ContentProviderRecord> items = getProvidersByClass(userId); if (items != null) { didSomething |= collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, items, result); } } return didSomething; }
public void setSurfaceTexture(android.graphics.SurfaceTexture surfaceTexture) { if (surfaceTexture == null) { throw new java.lang.NullPointerException("surfaceTexture must not be null"); } if ((mSurface) != null) { mSurface.release(); } mSurface = surfaceTexture; if (((mViewFlags) & (VISIBILITY_MASK)) == (VISIBLE)) { mSurface.setOnFrameAvailableListener(mUpdateListener, mAttachInfo.mHandler); } mUpdateSurface = true; invalidateParentIfNeeded(); }
protected void createPages() { mAvdManagerPage = new com.android.sdkuilib.internal.repository.AvdManagerPage(mPagesRootComposite, mUpdaterData); mLocalPackagePage = new com.android.sdkuilib.internal.repository.LocalPackagesPage(mPagesRootComposite, mUpdaterData); mRemotePackagesPage = new com.android.sdkuilib.internal.repository.RemotePackagesPage(mPagesRootComposite, mUpdaterData); addPage(mAvdManagerPage, "Virtual devices"); addPage(mLocalPackagePage, "Installed packages"); addPage(mRemotePackagesPage, "Available packages"); addExtraPages(); }
private void createApk(com.android.apkbuilder.internal.ApkBuilderImpl apkBuilder, java.io.File outputfile) throws com.android.apkbuilder.ApkBuilder.ApkCreationException, java.io.FileNotFoundException { java.io.FileInputStream resoucePackageZipFile = new java.io.FileInputStream(new java.io.File(mOutFolder, mResourceFile)); mZipArchives.add(resoucePackageZipFile); if (mSigned) { java.lang.System.out.println(java.lang.String.format("Creating %s and signing it with a debug key...", outputfile.getName())); } else { java.lang.System.out.println(java.lang.String.format("Creating %s for release...", outputfile.getName())); } apkBuilder.createPackage(outputfile.getAbsoluteFile(), mZipArchives, mArchiveFiles, mJavaResources, mResourcesJars, mNativeLibraries); mZipArchives.remove(resoucePackageZipFile); }
private void writeJavaMethodBody() throws java.io.IOException { sourceInfoWriter.writeDebugBegin(currentClass, startLine); writer.writeKeyword(Token.METHOD_BODY); writer.writeOpen(); writeLocals(); writeBody(); sourceInfoWriter.writeDebugEnd(currentClass, endLine); writer.writeClose(); }
public void test_getNegativePrefix() { java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setNegativePrefix("--"); assertTrue("Incorrect negative prefix", df.getNegativePrefix().equals("--")); }
void disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH_ADMIN permission"); synchronized(mPbapStateMachineMap) { com.android.bluetooth.pbap.PbapStateMachine sm = mPbapStateMachineMap.get(device); if (sm != null) { sm.sendMessage(PbapStateMachine.DISCONNECT); } } }
public void onUserSwitched(int userId) { mServiceCache.invalidateCache(userId); mPreferredServices.onUserSwitched(userId); mHostNfcFEmulationManager.onUserSwitched(); mT3tIdentifiersCache.onUserSwitched(); mEnabledNfcFServices.onUserSwitched(userId); mNfcFServicesCache.invalidateCache(userId); }
@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.SimpleTest2.class) @org.junit.Test public void testRunner_SimpleTest2_OneMethod() throws java.lang.Exception { java.lang.String[] args = new java.lang.String[]{ "testSimple2" }; vogar.target.TestRunner runner = testRunnerRule.createTestRunner(args); runner.run(); expectedResults().success("testSimple2").completedNormally(); }
public void testIsSupported_And_ForName_NormalProvider() throws java.lang.Exception { libcore.java.nio.charset.SettableCharsetProvider.setDelegate(new org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharsetProvider()); try { assertTrue(java.nio.charset.Charset.isSupported("mockCharset10")); assertTrue(java.nio.charset.Charset.isSupported("MockCharset11")); assertTrue(java.nio.charset.Charset.isSupported("MockCharset12")); assertTrue(java.nio.charset.Charset.isSupported("MOCKCharset10")); assertTrue(java.nio.charset.Charset.isSupported("MOCKCharset11")); assertTrue(java.nio.charset.Charset.isSupported("MOCKCharset12")); assertTrue(((java.nio.charset.Charset.forName("mockCharset10")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName("mockCharset11")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName("mockCharset12")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName("mockCharset10")) == (org.apache.harmony.tests.java.nio.charset.CharsetTest.charset2))); java.nio.charset.Charset.forName("mockCharset11"); assertTrue(((java.nio.charset.Charset.forName("mockCharset12")) == (org.apache.harmony.tests.java.nio.charset.CharsetTest.charset2))); } finally { libcore.java.nio.charset.SettableCharsetProvider.clearDelegate(); } }
private void checkAtan2piFloatFloatFloat() { android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 7270231599885695850L); android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 7270231599885695850L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.set_gAllocInX(inX); script.forEach_testAtan2piFloatFloatFloat(inY, out); verifyResultsAtan2piFloatFloatFloat(inY, inX, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAtan2piFloatFloatFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInX(inX); scriptRelaxed.forEach_testAtan2piFloatFloatFloat(inY, out); verifyResultsAtan2piFloatFloatFloat(inY, inX, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAtan2piFloatFloatFloat: " + (e.toString()))); } }
private void checkIBusPresent() { if ((SystemInfo.isLinux) || (SystemInfo.isFreeBSD)) { try { java.lang.Process proc = java.lang.Runtime.getRuntime().exec("/bin/ps -C ibus-daemon"); java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream())); try { for (java.lang.String line = reader.readLine(); line != null; line = reader.readLine()) { if (line.contains("ibus-daemon")) { notifyUnsupported("unsupported.ibus.message"); break; } } } finally { reader.close(); } } catch (java.io.IOException ex) { } } }
@com.android.annotations.NonNull public org.eclipse.swt.graphics.Image addWarningIcon(@com.android.annotations.NonNull org.eclipse.swt.graphics.Image image) { if ((mWarningIcons) != null) { org.eclipse.swt.graphics.Image combined = mWarningIcons.get(image); if (combined != null) { return combined; } } else { mWarningIcons = new java.util.IdentityHashMap<org.eclipse.swt.graphics.Image, org.eclipse.swt.graphics.Image>(); } org.eclipse.swt.graphics.Image combined = new com.android.ide.eclipse.adt.internal.editors.ui.ErrorImageComposite(image, true).createImage(); mWarningIcons.put(image, combined); return combined; }
public void runTest() { if (mUseIntrinsic) { mIntrinsic.forEach(mOutPixelsAllocation); } else if (mUseHalfPrecision) { mScript_half.forEach_copyIn(mInPixelsAllocation, mScratchPixelsAllocation1); mScript_half.forEach_horz(mScratchPixelsAllocation2); mScript_half.forEach_vert(mOutPixelsAllocation); } else { mScript.forEach_copyIn(mInPixelsAllocation, mScratchPixelsAllocation1); mScript.forEach_horz(mScratchPixelsAllocation2); mScript.forEach_vert(mOutPixelsAllocation); } }
static java.lang.Object newInstance() { try { java.lang.Class<?> c = LocalClass3.CC.class; return c.newInstance(); } catch (java.lang.Exception ex) { ex.printStackTrace(java.lang.System.out); return null; } }
@java.lang.Override protected void resetEditorFrom(com.google.gct.idea.debugger.CloudDebugRunConfiguration s) { mySettingPanel.setProjectName(s.getCloudProjectName()); mySettingPanel.setShowNotifications(s.isShowNotifications()); }
@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI), anyInt(), anyInt(), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); }
public void testDeregistration() throws java.lang.Exception { android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback statusCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDSCallback(); android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback progressCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback(); android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.addProgressListener(request, mCallbackExecutor, progressCallback); mDownloadSession.addStatusListener(request, mCallbackExecutor, statusCallback); mDownloadSession.removeProgressListener(request, progressCallback); mDownloadSession.removeStatusListener(request, statusCallback); mMiddlewareControl.fireOnStateUpdated(null, null, 0); assertNull(statusCallback.waitOnStateUpdated(android.telephony.embms.cts.MbmsDownloadCallbackTest.SHORT_TIMEOUT)); mMiddlewareControl.fireOnProgressUpdated(null, null, 0, 0, 0, 0); assertNull(progressCallback.waitOnProgressUpdated(android.telephony.embms.cts.MbmsDownloadCallbackTest.SHORT_TIMEOUT)); }
@java.lang.Override public synchronized void onTcpSocketStatsEvent(int[] networkIds, int[] sentPackets, int[] lostPackets, int[] rttsUs, int[] sentAckDiffsMs) { if (((((networkIds.length) != (sentPackets.length)) || ((networkIds.length) != (lostPackets.length))) || ((networkIds.length) != (rttsUs.length))) || ((networkIds.length) != (sentAckDiffsMs.length))) { android.util.Log.e(com.android.server.connectivity.NetdEventListenerService.TAG, "Mismatched lengths of TCP socket stats data arrays"); return; } long timestamp = java.lang.System.currentTimeMillis(); for (int i = 0; i < (networkIds.length); i++) { int netId = networkIds[i]; int sent = sentPackets[i]; int lost = lostPackets[i]; int rttUs = rttsUs[i]; int sentAckDiffMs = sentAckDiffsMs[i]; getMetricsForNetwork(timestamp, netId).addTcpStatsResult(sent, lost, rttUs, sentAckDiffMs); } }
@java.lang.Override public void setSmsListener(android.telephony.ims.internal.aidl.IImsSmsListener l) throws android.os.RemoteException { this.setSmsListener(l); }
private android.database.Cursor queryCarrierIdForCurrentSubscription(android.net.Uri uri, java.lang.String[] projectionIn) { int subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); if (!(android.text.TextUtils.isEmpty(uri.getLastPathSegment()))) { try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException(("invalid subid in provided uri" + uri)); } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, ("queryCarrierIdForSubId: " + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(mCurrentSubscriptionMap.containsKey(subId))) { return new android.database.MatrixCursor(projectionIn, 0); } final android.database.MatrixCursor c = new android.database.MatrixCursor(projectionIn, 1); final android.database.MatrixCursor.RowBuilder row = c.newRow(); for (int i = 0; i < (c.getColumnCount()); i++) { final java.lang.String columnName = c.getColumnName(i); if (CarrierId.CARRIER_ID.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).first); } else if (CarrierId.CARRIER_NAME.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).second); } else { throw new java.lang.IllegalArgumentException(("Invalid column " + (projectionIn[i]))); } } return c; }
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) throws java.lang.Exception { if ((((method.getEnclosingType().isExternal()) || (method.isNative())) || (method.isAbstract())) || (!(filter.accept(this.getClass(), method)))) { return; } com.android.jack.cfg.ControlFlowGraph cfg = method.getMarker(com.android.jack.cfg.ControlFlowGraph.class); assert cfg != null; for (com.android.jack.cfg.BasicBlock bb : cfg.getNodes()) { bb.removeMarker(com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker.class); } }
public static java.util.Collection<java.lang.Object[]> getNinePatches() { java.io.File pngFolder = com.android.builder.png.NinePatchAaptProcessorTestUtils.getPngFolder(); java.io.File ninePatchFolder = new java.io.File(pngFolder, "ninepatch"); java.io.File[] files = ninePatchFolder.listFiles(new java.io.FileFilter() { @java.lang.Override public boolean accept(java.io.File file) { return file.getPath().endsWith(SdkConstants.DOT_9PNG); } }); if (files != null) { com.google.common.collect.ImmutableList.Builder<java.lang.Object[]> params = com.google.common.collect.ImmutableList.builder(); for (java.io.File file : files) { params.add(new java.lang.Object[]{ file, file.getName() }); } return params.build(); } return com.google.common.collect.ImmutableList.of(); }
@java.lang.Override public boolean onTouch(android.view.View v, android.view.MotionEvent event) { if ((mSnakeView.getGameState()) == (SnakeView.RUNNING)) { float x = (event.getX()) / (v.getWidth()); float y = (event.getY()) / (v.getHeight()); int direction = 0; direction = (x > y) ? 1 : 0; direction |= (x > (1 - y)) ? 2 : 0; mSnakeView.moveSnake(direction); } else { mSnakeView.moveSnake(com.example.android.snake.Snake.MOVE_UP); } return false; }
private void readHeader() throws java.io.IOException { mType = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_TYPE)); int e_machine = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_MACHINE)); if (((e_machine != (android.os.cts.ReadElf.EM_386)) && (e_machine != (android.os.cts.ReadElf.EM_MIPS))) && (e_machine != (android.os.cts.ReadElf.EM_ARM))) { throw new java.io.IOException(((("Invalid ELF e_machine: " + e_machine) + ": ") + (mPath))); } final long shOffset = readWord(getHeaderOffset(android.os.cts.ReadElf.OFFSET_SHOFF)); final int shNumber = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_SHNUM)); final int shSize = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_SHENTSIZE)); final int shStrIndex = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_SHSTRNDX)); readSectionHeaders(shOffset, shNumber, shSize, shStrIndex); final long phOffset = readWord(getHeaderOffset(android.os.cts.ReadElf.OFFSET_PHOFF)); final int phNumber = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_PHNUM)); final int phSize = readHalf(getHeaderOffset(android.os.cts.ReadElf.OFFSET_PHENTSIZE)); readProgramHeaders(phOffset, phNumber, phSize); }
@org.junit.Test public void validatePolicyWithoutPolicyUpdate() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Policy policy = android.net.wifi.hotspot2.pps.PolicyTest.createPolicy(); policy.policyUpdate = null; assertFalse(policy.validate()); }
@java.lang.Override public void check(@javax.annotation.Nonnull javax.lang.model.element.Element element, @javax.annotation.Nonnull javax.annotation.processing.ProcessingEnvironment env) { boolean noKeyId = true; javax.lang.model.type.TypeMirror keyIdType = env.getTypeUtils().erasure(env.getElementUtils().getTypeElement(com.android.sched.util.config.id.KeyId.class.getCanonicalName()).asType()); if (keyIdType == null) { env.getMessager().printMessage(javax.tools.Diagnostic.Kind.ERROR, (("Can not get element type '" + (com.android.sched.util.config.id.KeyId.class.getCanonicalName())) + "'")); return; } for (javax.lang.model.element.Element enclosedElement : element.getEnclosedElements()) { if (((enclosedElement.getKind()) == (javax.lang.model.element.ElementKind.FIELD)) && (env.getTypeUtils().isSubtype(env.getTypeUtils().erasure(enclosedElement.asType()), keyIdType))) { noKeyId = false; if (!(enclosedElement.getModifiers().contains(javax.lang.model.element.Modifier.STATIC))) { env.getMessager().printMessage(javax.tools.Diagnostic.Kind.WARNING, "KeyId should be declared static", enclosedElement); } if (!(enclosedElement.getModifiers().contains(javax.lang.model.element.Modifier.FINAL))) { env.getMessager().printMessage(javax.tools.Diagnostic.Kind.ERROR, "KeyId must be declared final", enclosedElement); } } } if (noKeyId) { env.getMessager().printMessage(javax.tools.Diagnostic.Kind.ERROR, "Type does not contains KeyId", element); } }
private void updateDocLabels() { java.lang.String docUrl = ((java.lang.String) (myWizardState.get(com.google.gct.idea.appengine.wizard.BackendModuleWizardStep.ATTR_DOC_URL))); com.android.tools.idea.templates.TemplateMetadata metadata = myWizardState.getTemplateMetadata(); java.lang.String title = (metadata != null) ? metadata.getTitle() : null; if ((docUrl != null) && (title != null)) { myDocPanel.setVisible(true); myDocLabel.setHyperlinkText("Check the ", (("\"" + title) + "\" documentation"), ""); myDocLabel.setHyperlinkTarget(docUrl); } else { myDocPanel.setVisible(false); } }
private void addExtraListener(java.util.List<org.junit.runner.notification.RunListener> listeners, org.junit.runner.JUnitCore testRunner, java.io.PrintStream writer, java.lang.String extraListener) { if ((extraListener == null) || ((extraListener.length()) == 0)) { return; } final java.lang.Class<?> klass; try { klass = java.lang.Class.forName(extraListener); } catch (java.lang.ClassNotFoundException e) { writer.println(("Could not find extra RunListener class " + extraListener)); return; } if (!(org.junit.runner.notification.RunListener.class.isAssignableFrom(klass))) { writer.println(("Extra listeners must extend RunListener class " + extraListener)); return; } try { klass.getConstructor().setAccessible(true); } catch (java.lang.NoSuchMethodException e) { writer.println(("Must have no argument constructor for class " + extraListener)); return; } final org.junit.runner.notification.RunListener l; try { l = ((org.junit.runner.notification.RunListener) (klass.newInstance())); } catch (java.lang.Throwable t) { writer.println(("Could not instantiate extra RunListener class " + extraListener)); t.printStackTrace(writer); return; } addListener(listeners, testRunner, l); }
public void testScrollTo() throws java.lang.Throwable { final android.widget.TextView tv = new android.text.method.cts.TextViewNoIme(mActivity); tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10); runTestOnUiThread(new java.lang.Runnable() { public void run() { final float pixelPerSp = mActivity.getResources().getDisplayMetrics().scaledDensity; mActivity.setContentView(tv, new android.view.ViewGroup.LayoutParams(((int) (100 * pixelPerSp)), ViewGroup.LayoutParams.MATCH_PARENT)); tv.setSingleLine(true); tv.setLines(2); } }); getInstrumentation().waitForIdleSync(); android.text.TextPaint paint = tv.getPaint(); final android.text.Layout layout = tv.getLayout(); runTestOnUiThread(new java.lang.Runnable() { public void run() { tv.setText(android.text.method.cts.TouchTest.LONG_TEXT); } }); getInstrumentation().waitForIdleSync(); final int width = getTextWidth(android.text.method.cts.TouchTest.LONG_TEXT, paint); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, ((width - (tv.getWidth())) - 1), 0); } }); getInstrumentation().waitForIdleSync(); assertEquals(((width - (tv.getWidth())) - 1), tv.getScrollX()); assertEquals(0, tv.getScrollY()); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, (width + 100), 5); } }); getInstrumentation().waitForIdleSync(); assertEquals((width - (tv.getWidth())), tv.getScrollX(), 1.0F); assertEquals(5, tv.getScrollY()); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, (width - 10), 5); } }); getInstrumentation().waitForIdleSync(); assertEquals((width - (tv.getWidth())), tv.getScrollX(), 1.0F); assertEquals(5, tv.getScrollY()); }
@org.junit.Before public void setUp() throws java.lang.Exception { mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); org.junit.Assume.assumeTrue("Ignore test when BluetoothPbapService is not enabled", mTargetContext.getResources().getBoolean(R.bool.profile_supported_pbap)); org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03:04:05"); mHandlerThread = new android.os.HandlerThread("PbapTestHandlerThread"); mHandlerThread.start(); mHandler = new android.os.Handler(mHandlerThread.getLooper()); mBluetoothPbapService = mock(com.android.bluetooth.pbap.BluetoothPbapService.class); doNothing().when(mBluetoothPbapService).checkOrGetPhonebookPermission(any()); mPbapStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(mBluetoothPbapService, mHandlerThread.getLooper(), mTestDevice, mSocket, mBluetoothPbapService, mHandler, com.android.bluetooth.pbap.PbapStateMachineTest.TEST_NOTIFICATION_ID); }
public void testPlainValues() throws java.lang.Exception { assertEquals(("strings.xml:10: Warning: \"throught\" is a common misspelling; did you mean \"thought\" or \"through\" or \"throughout\" ?\n" + ((((("strings.xml:12: Warning: \"Seach\" is a common misspelling; did you mean \"Search\" ?\n" + "strings.xml:16: Warning: \"Tuscon\" is a common misspelling; did you mean \"Tucson\" ?\n") + "strings.xml:20: Warning: \"Ok\" is usually capitalized as \"OK\"\n") + "strings.xml:6: Warning: \"Andriod\" is a common misspelling; did you mean \"Android\" ?\n") + "strings.xml:6: Warning: \"activites\" is a common misspelling; did you mean \"activities\" ?\n") + "strings.xml:8: Warning: \"Cmoputer\" is a common misspelling; did you mean \"Computer\" ?")), lintProject("res/values/typos.xml=>res/values/strings.xml")); }
public void preDexLibrary(@com.android.annotations.NonNull java.io.File inputFile, @com.android.annotations.NonNull java.io.File outFile, @com.android.annotations.NonNull com.android.builder.DexOptions dexOptions) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { checkNotNull(inputFile, "inputFile cannot be null."); checkNotNull(outFile, "outFile cannot be null."); checkNotNull(dexOptions, "dexOptions cannot be null."); checkState(((mTargetInfo) != null), "Cannot call preDexLibrary() before setTargetInfo() is called."); com.android.sdklib.BuildToolInfo buildToolInfo = mTargetInfo.getBuildTools(); java.util.ArrayList<java.lang.String> command = com.google.common.collect.Lists.newArrayList(); java.lang.String dx = buildToolInfo.getPath(BuildToolInfo.PathId.DX); if ((dx == null) || (!(new java.io.File(dx).isFile()))) { throw new java.lang.IllegalStateException("dx is missing"); } command.add(dx); if ((dexOptions.getJavaMaxHeapSize()) != null) { command.add(("-JXmx" + (dexOptions.getJavaMaxHeapSize()))); } command.add("--dex"); if (mVerboseExec) { command.add("--verbose"); } if (dexOptions.getJumboMode()) { command.add("--force-jumbo"); } command.add("--output"); command.add(outFile.getAbsolutePath()); command.add(inputFile.getAbsolutePath()); mCmdLineRunner.runCmdLine(command, null); }
@java.lang.Override public int compare(com.android.ahat.InstanceUtils.NativeAllocation a, com.android.ahat.InstanceUtils.NativeAllocation b) { return java.lang.Long.compare(b.size, a.size); }
public static java.net.InetAddress[] blockingResolveAllLocally(android.net.Network network, java.lang.String name) throws java.net.UnknownHostException { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_family = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; final android.net.Network networkForResolv = android.net.dns.ResolvUtil.getNetworkWithUseLocalNameserversFlag(network); try { return Libcore.os.android_getaddrinfo(name, hints, ((int) (networkForResolv.netId))); } catch (android.system.GaiException gai) { gai.rethrowAsUnknownHostException((name + ": TLS-bypass resolution failed")); return null; } }
@java.lang.Override @javax.annotation.Nonnull @com.android.sched.util.findbugs.SuppressFBWarnings("NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE") public javax.lang.model.type.TypeMirror getTypeMirror() throws com.android.sched.build.SchedAnnotationProcessor.AbortException { return com.android.sched.build.SchedAnnotationProcessor.Items.env.getTypeUtils().getDeclaredType(getTypeElement(), com.android.sched.build.SchedAnnotationProcessor.Items.env.getTypeUtils().getWildcardType(null, null)); }
@java.lang.Override protected void engineInitVerify(java.security.PublicKey publicKey) throws java.security.InvalidKeyException { }
private static void addFileWithFootersToDropBox(android.os.DropBoxManager db, java.util.HashMap<java.lang.String, java.lang.Long> timestamps, java.lang.String headers, java.lang.String footers, java.lang.String filename, int maxSize, java.lang.String tag) throws java.io.IOException { if ((db == null) || (!(db.isTagEnabled(tag)))) return; java.io.File file = new java.io.File(filename); long fileTime = file.lastModified(); if (fileTime <= 0) return; if ((timestamps.containsKey(filename)) && ((timestamps.get(filename)) == fileTime)) { return; } timestamps.put(filename, fileTime); android.util.Slog.i(com.android.server.BootReceiver.TAG, (((("Copying " + filename) + " to DropBox (") + tag) + ")")); db.addText(tag, ((headers + (android.os.FileUtils.readTextFile(file, maxSize, "[[TRUNCATED]]\n"))) + footers)); android.util.EventLog.writeEvent(DropboxLogTags.DROPBOX_FILE_COPY, filename, maxSize, tag); }
@javax.annotation.Nonnull public static final java.io.File getJackRootDir() { return com.android.jack.test.TestsProperties.JACK_ROOT_DIR; }
public void run() { while (!(guard2.get())); Main.load(); Main.expectEqual64((-987654321L), m.l); }
@org.jetbrains.annotations.Nullable @java.lang.Override public java.lang.String getJavaSourceCompatibility() { return myJavaSourceCompatibility; }
public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1); }
protected boolean supportsMultiWindowMode() throws com.android.tradefed.device.DeviceNotAvailableException { return (!(hasDeviceFeature("android.hardware.type.watch"))) || (android.server.cts.ActivityManagerTestBase.PRETEND_DEVICE_SUPPORTS_DOCKING); }
private android.app.PendingIntent createTelecomPendingIntent(java.lang.String action, android.net.Uri data, android.os.UserHandle userHandle) { android.content.Intent intent = new android.content.Intent(action, data, mContext, com.android.server.telecom.components.TelecomBroadcastReceiver.class); intent.putExtra(TelecomBroadcastIntentProcessor.EXTRA_USERHANDLE, userHandle); return android.app.PendingIntent.getBroadcast(mContext, 0, intent, PendingIntent.FLAG_CANCEL_CURRENT); }
@java.lang.Override public void queryCallBarring(int cbType, android.os.Message result) { queryCallBarring(cbType, result, com.android.ims.ImsUt.SERVICE_CLASS_NONE); }
public native android.system.StructLinger getsockoptLinger(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException;
public java.lang.reflect.Type[] getGenericExceptionTypes() { throw new java.lang.UnsupportedOperationException("Executable.getGenericExceptionTypes() not implemented"); }
@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.LongTest.class, timeout = 1) @org.junit.Test public void testRunner_LongTest_WithTimeout() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); expectedResults().failure("test", "java.util.concurrent.TimeoutException\n").aborted(); }
@java.lang.Override public java.lang.String installRemotePackage(java.lang.String remoteFilePath, boolean reinstall, java.lang.String... extraArgs) throws com.android.ddmlib.InstallException { try { com.android.ddmlib.Device.InstallReceiver receiver = new com.android.ddmlib.Device.InstallReceiver(); java.lang.StringBuilder optionString = new java.lang.StringBuilder(); if (reinstall) { optionString.append("-r "); } if (extraArgs != null) { optionString.append(com.google.common.base.Joiner.on(' ').join(extraArgs)); } java.lang.String cmd = java.lang.String.format("pm install %1$s \"%2$s\"", optionString.toString(), remoteFilePath); executeShellCommand(cmd, receiver, com.android.ddmlib.Device.INSTALL_TIMEOUT_MINUTES, java.util.concurrent.TimeUnit.MINUTES); return receiver.getErrorMessage(); } catch (com.android.ddmlib.TimeoutException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.AdbCommandRejectedException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { throw new com.android.ddmlib.InstallException(e); } catch (java.io.IOException e) { throw new com.android.ddmlib.InstallException(e); } }
private void replaceEventList(int slotId) { if ((mStkContext[slotId].mSetupEventListSettings) != null) { for (int current : mStkContext[slotId].mSetupEventListSettings.eventList) { if (current != (com.android.stk.StkAppService.INVALID_SETUP_EVENT)) { if (((mStkContext[slotId].mCurrentCmd.getSetEventList()) == null) || (!(findEvent(current, mStkContext[slotId].mCurrentCmd.getSetEventList().eventList)))) { unregisterEvent(current, slotId); } } } } mStkContext[slotId].mSetupEventListSettings = mStkContext[slotId].mCurrentCmd.getSetEventList(); mStkContext[slotId].mCurrentSetupEventCmd = mStkContext[slotId].mCurrentCmd; mStkContext[slotId].mCurrentCmd = mStkContext[slotId].mMainCmd; registerEvents(slotId); }
static void field(@javax.annotation.Nonnull com.android.jack.shrob.spec.ClassSpecification classSpec, @javax.annotation.CheckForNull com.android.jack.shrob.spec.AnnotationSpecification annotationType, @javax.annotation.CheckForNull java.lang.String typeSig, java.lang.String name, @javax.annotation.Nonnull com.android.jack.shrob.spec.ModifierSpecification modifier) { assert name != null; com.android.jack.shrob.spec.NameSpecification typeSignature = null; if (typeSig != null) { typeSignature = com.android.jack.shrob.proguard.GrammarActions.name(typeSig, com.android.jack.shrob.proguard.GrammarActions.FilterSeparator.CLASS); } else { assert name.equals("*"); } classSpec.add(new com.android.jack.shrob.spec.FieldSpecification(com.android.jack.shrob.proguard.GrammarActions.name(name, com.android.jack.shrob.proguard.GrammarActions.FilterSeparator.GENERAL), modifier, typeSignature, annotationType)); }
public void establishVpn() { com.android.cts.verifier.managedprovisioning.VpnTestActivity.MyTestVpnService service = new com.android.cts.verifier.managedprovisioning.VpnTestActivity.MyTestVpnService(); descriptor = service.new android.net.VpnService.Builder().addAddress("8.8.8.8", 30).establish(); if ((descriptor) == null) { android.util.Log.i(com.android.cts.verifier.managedprovisioning.VpnTestActivity.TAG, "Test succeeded: descriptor is null"); populateInfo(R.string.device_owner_no_vpn_connection); return; } android.util.Log.w(com.android.cts.verifier.managedprovisioning.VpnTestActivity.TAG, "vpn connection established, not expected, test case fails"); try { descriptor.close(); populateInfo(R.string.device_owner_vpn_connection); } catch (java.io.IOException e) { android.util.Log.i(com.android.cts.verifier.managedprovisioning.VpnTestActivity.TAG, "Closing vpn connection failed. Caught exception: ", e); populateInfo(R.string.device_owner_vpn_connection_close_failed); } }
public void run() { com.android.rs.test.Allocation A; com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); pRS.setMessageHandler(mRsMessage); com.android.rs.test.ScriptC_fp16 s = new com.android.rs.test.ScriptC_fp16(pRS); for (int nDims = 1; nDims <= 3; nDims++) { TestHalf(pRS, s, nDims); TestHalf2(pRS, s, nDims); TestHalf3(pRS, s, nDims); TestHalf4(pRS, s, nDims); } s.invoke_fp16_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }
private void updateMinuteControl() { if (is24HourView()) { mMinuteSpinnerInput.setImeOptions(EditorInfo.IME_ACTION_DONE); } else { mMinuteSpinnerInput.setImeOptions(EditorInfo.IME_ACTION_NEXT); } }
private void dumpToDir(com.android.sched.vfs.VDir srcRootDir, com.android.sched.vfs.VDir destRootDir) throws com.android.sched.util.file.CannotCloseException, com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotReadException, com.android.sched.util.file.CannotWriteException, com.android.sched.util.file.WrongPermissionException { for (com.android.sched.vfs.VElement element : srcRootDir.list()) { java.lang.String elementName = element.getName(); if (element.isVDir()) { com.android.sched.vfs.VDir dir = destRootDir.createVDir(elementName); dumpToDir(((com.android.sched.vfs.VDir) (element)), dir); } else { com.android.sched.vfs.VFile file = destRootDir.createVFile(elementName); try (java.io.InputStream is = ((com.android.sched.vfs.VFile) (element)).getInputStream()) { try (java.io.OutputStream os = file.getOutputStream()) { new com.android.sched.util.stream.LocationByteStreamSucker(is, os, element, file).suck(); } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotCloseException(file, e); } } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotCloseException(element, e); } } } }
private boolean selectCellByName(com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.CellInfo selected) { if (((mTable.isDisposed()) || (selected == null)) || ((selected.mDevice) == null)) { return false; } java.lang.String name = selected.mDevice.getName(); for (int n = (mTable.getItemCount()) - 1; n >= 0; n--) { org.eclipse.swt.widgets.TableItem item = mTable.getItem(n); java.lang.Object data = item.getData(); if (data instanceof com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.CellInfo) { com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.CellInfo ci = ((com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.CellInfo) (data)); if (((ci != null) && ((ci.mDevice) != null)) && (name.equals(ci.mDevice.getName()))) { mTable.select(n); return true; } } } return false; }
public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }
@com.android.internal.annotations.VisibleForTesting @android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech public final int getConnectionType() { synchronized(mLock) { return mConnectionType; } }
public boolean supportsParameter(java.lang.Object parameter) { java.lang.Boolean supportsParameter = java.security.Provider.Service.supportsParameterTypes.get(type); if (supportsParameter == null) { return true; } if (!supportsParameter) { throw new java.security.InvalidParameterException(("Cannot use a parameter with " + (type))); } if ((parameter != null) && (!(parameter instanceof java.security.Key))) { throw new java.security.InvalidParameterException("Parameter should be of type Key"); } ensureSupportedKeysInitialized(); if (((keyClasses) == null) && ((keyFormats) == null)) { return true; } java.security.Key keyParam = ((java.security.Key) (parameter)); if (((keyClasses) != null) && (java.security.Provider.Service.isInArray(keyClasses, keyParam.getClass()))) { return true; } if (((keyFormats) != null) && (java.security.Provider.Service.isInArray(keyFormats, keyParam.getFormat()))) { return true; } return false; }
public void deflectCall(java.lang.String callId, android.net.Uri address) { try { mAdapter.deflectCall(callId, address); } catch (android.os.RemoteException e) { } }
public void addData(java.util.List<com.android.builder.internal.incremental.DependencyData> dataList) { for (com.android.builder.internal.incremental.DependencyData data : dataList) { mMainFileMap.put(data.getMainFile(), data); } }
public android.system.StructTimeval getsockoptTimeval(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException { return os.getsockoptTimeval(fd, level, option); }
@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClass create(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader loader) { assert (signature) != null; java.lang.String binaryName = com.android.jack.util.NamingTools.getClassBinaryNameFromDescriptor(signature); java.lang.String simpleName = com.android.jack.util.NamingTools.getSimpleClassNameFromBinaryName(binaryName); com.android.jack.ir.ast.JDefinedClass jClassType = new com.android.jack.ir.ast.JDefinedClass(com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN, simpleName, modifiers, enclosingPackage, loader); return jClassType; }
public void test_Builder_setVariant() { java.util.Locale.Builder b = new java.util.Locale.Builder(); b = new java.util.Locale.Builder(); b.setVariant("vArIaNt-VaRiAnT-VARIANT"); assertEquals("vArIaNt_VaRiAnT_VARIANT", b.build().getVariant()); b = new java.util.Locale.Builder(); try { b.setVariant("shor"); fail(); } catch (java.util.IllformedLocaleException expected) { } try { b.setVariant("waytoolong"); fail(); } catch (java.util.IllformedLocaleException expected) { } try { b.setVariant("foooo-foooo-fo"); fail(); } catch (java.util.IllformedLocaleException expected) { } b.setVariant("0ABC"); assertEquals("0ABC", b.build().getVariant()); b = new java.util.Locale.Builder(); b.setVariant("variant"); b.setVariant(null); assertEquals("", b.build().getVariant()); b = new java.util.Locale.Builder(); b.setVariant("variant"); b.setVariant(""); assertEquals("", b.build().getVariant()); }
@java.lang.Override public void srcToExe(@javax.annotation.Nonnull java.io.File out, boolean zipFile, @javax.annotation.Nonnull java.io.File... sources) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); srcToCommon(args, sources); if (zipFile) { args.add("--output-dex-zip"); } else { args.add("--output-dex"); } args.add(out.getAbsolutePath()); args.addAll(extraJackArgs); if (withDebugInfos) { args.add("-g"); } com.android.jack.test.toolchain.AbstractTestTools.addFile(args, false, sources); com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(outRedirectStream); exec.setOut(errRedirectStream); exec.setVerbose(isVerbose); try { if ((exec.run()) != 0) { throw new java.lang.RuntimeException("Jack compiler exited with an error"); } } catch (com.android.jack.test.util.ExecFileException e) { throw new java.lang.RuntimeException("An error occurred while running Jack", e); } }
void queryFdn() { int serviceClassX; serviceClassX = ((com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_VOICE) + (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_DATA)) + (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_FAX); mCi.queryFacilityLockForApp(CommandsInterface.CB_FACILITY_BA_FD, "", serviceClassX, mAid, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCardApplication.EVENT_QUERY_FACILITY_FDN_DONE)); }
@java.lang.Override public void deleteSmsOnSim(int index, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_DELETE_SMS_ON_SIM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGV) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " index = ") + index)); } try { radioProxy.deleteSmsOnSim(rr.mSerial, index); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "deleteSmsOnSim", e); } } }
public void pauseScan() { android.hardware.wifi.V1_0.WifiStatus status; synchronized(com.android.server.wifi.WifiVendorHal.sLock) { try { if ((mIWifiStaIface) == null) return; if (((mScan) != null) && (!(mScan.paused))) { status = mIWifiStaIface.stopBackgroundScan(mScan.cmdId); if (!(ok(status))) return; mScan.paused = true; } } catch (android.os.RemoteException e) { handleRemoteException(e); } } }
public void deactivateDataCall(int cid, @android.telephony.data.DataService.DeactivateDataReason int reason, android.telephony.data.DataServiceCallback callback) { callback.onDeactivateDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED); }
@org.junit.Test public void testSendReport() throws java.lang.Exception { doReturn(true).when(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).sendReport(anyInt(), any(byte[].class)); org.junit.Assert.assertEquals(false, mHidDeviceService.sendReport(mTestDevice, 0, com.android.bluetooth.hid.HidDeviceTest.SAMPLE_OUTGOING_HID_REPORT)); mHidDeviceService.onApplicationStateChangedFromNative(mTestDevice, true); java.lang.Thread.sleep(com.android.bluetooth.hid.HidDeviceTest.TIMEOUT_MS); org.junit.Assert.assertEquals(true, mHidDeviceService.sendReport(mTestDevice, 0, com.android.bluetooth.hid.HidDeviceTest.SAMPLE_OUTGOING_HID_REPORT)); verify(com.android.bluetooth.hid.HidDeviceTest.sHidDeviceNativeInterface).sendReport(anyInt(), eq(com.android.bluetooth.hid.HidDeviceTest.SAMPLE_OUTGOING_HID_REPORT)); }
@org.junit.Test public void testBroadcastRefresh() { android.os.Message msg = new android.os.Message(); msg.what = IccRecords.EVENT_REFRESH; msg.obj = new android.os.AsyncResult(null, null, null); mIsimUiccRecords.handleMessage(msg); org.mockito.ArgumentCaptor<android.content.Intent> intentCapture = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mContext).sendBroadcast(intentCapture.capture()); assertEquals(((android.content.Intent) (intentCapture.getValue())).getAction(), IsimUiccRecords.INTENT_ISIM_REFRESH); }
private static void checkValidateThrowsParserException(java.lang.String xml) throws java.lang.Exception { try { libcore.util.TimeZoneFinderTest.validate(xml); fail(); } catch (java.io.IOException expected) { } }
private static void provideJarEntry(java.util.jar.JarFile jarFile, java.util.jar.JarEntry jarEntry, com.android.apksig.ApkSignerEngine.InspectJarEntryRequest request, byte[] tmpbuf) throws java.io.IOException { com.android.apksig.util.DataSink dataSink = request.getDataSink(); try (java.io.InputStream in = jarFile.getInputStream(jarEntry)) { int chunkSize; while ((chunkSize = in.read(tmpbuf)) > 0) { dataSink.consume(tmpbuf, 0, chunkSize); } request.done(); } }
@com.googlecode.android_scripting.rpc.Rpc(description = "Connects to the network with the given configuration") @java.lang.Deprecated public java.lang.Boolean wifiConnect(@com.googlecode.android_scripting.rpc.RpcParameter(name = "config") org.json.JSONObject config) throws org.json.JSONException { try { wifiConnectByConfig(config); } catch (java.security.GeneralSecurityException e) { java.lang.String msg = "Caught GeneralSecurityException with the provided" + "configuration"; throw new java.lang.RuntimeException(msg); } return true; }
private void addCoverageListener(java.util.List<org.junit.runner.notification.RunListener> list, org.junit.runner.JUnitCore testRunner) { if (getBooleanArgument(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_COVERAGE)) { java.lang.String coverageFilePath = getArguments().getString(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_COVERAGE_PATH); addListener(list, testRunner, new com.android.test.runner.listener.CoverageListener(this, coverageFilePath)); } }
private void markIfNecessary(@javax.annotation.Nonnull com.android.jack.ir.ast.JNode node, @javax.annotation.Nonnull com.android.jack.shrob.spec.KeepModifier modifier) { com.android.jack.shrob.seed.SeedMarker marker = node.addMarkerIfAbsent(new com.android.jack.shrob.seed.SeedMarker(modifier)); if (marker != null) { marker.mergeModifier(modifier); } }
@java.lang.Override @android.annotation.NonNull public android.os.PersistableBundle getConfigForSubId(int subId) { try { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, null); } catch (java.lang.SecurityException e) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_STATE, null); } int phoneId = android.telephony.SubscriptionManager.getPhoneId(subId); android.os.PersistableBundle retConfig = android.telephony.CarrierConfigManager.getDefaultConfig(); if (android.telephony.SubscriptionManager.isValidPhoneId(phoneId)) { android.os.PersistableBundle config = mConfigFromDefaultApp[phoneId]; if (config != null) { retConfig.putAll(config); retConfig.putBoolean(CarrierConfigManager.KEY_CARRIER_CONFIG_APPLIED_BOOL, true); } config = mConfigFromCarrierApp[phoneId]; if (config != null) { retConfig.putAll(config); retConfig.putBoolean(CarrierConfigManager.KEY_CARRIER_CONFIG_APPLIED_BOOL, true); } } return retConfig; }
private void loadList() { if ((mUpdaterData) != null) { com.android.sdklib.internal.repository.SdkSource[] knownSources = mUpdaterData.getSources().getSources(SdkSourceCategory.USER_ADDONS); java.util.Arrays.sort(knownSources); org.eclipse.jface.viewers.ISelection oldSelection = mTableViewer.getSelection(); mTableViewer.setInput(knownSources); mTableViewer.refresh(); on_TableViewer_selectionChanged(null); if ((oldSelection != null) && (!(oldSelection.isEmpty()))) { mTableViewer.setSelection(oldSelection, true); } } }
public static com.android.builder.profile.Recorder get() { return com.android.builder.profile.ProcessRecorderFactory.isEnabled() ? com.android.builder.profile.ThreadRecorder.recorder : com.android.builder.profile.ThreadRecorder.dummyRecorder; }
@java.lang.Override public void sendConnectionEvent(java.lang.String event, android.os.Bundle extras) { mLastConnectionEvents.add(event); mLastConnectionEventExtras.add(extras); }
public static com.android.apksig.internal.apk.SignatureInfo findSignature(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int blockId, com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result) throws com.android.apksig.internal.apk.ApkSigningBlockUtils.SignatureNotFoundException, java.io.IOException { com.android.apksig.util.DataSource apkSigningBlock; long apkSigningBlockOffset; try { com.android.apksig.apk.ApkUtils.ApkSigningBlock apkSigningBlockInfo = com.android.apksig.apk.ApkUtils.findApkSigningBlock(apk, zipSections); apkSigningBlockOffset = apkSigningBlockInfo.getStartOffset(); apkSigningBlock = apkSigningBlockInfo.getContents(); } catch (com.android.apksig.apk.ApkSigningBlockNotFoundException e) { throw new com.android.apksig.internal.apk.ApkSigningBlockUtils.SignatureNotFoundException(e.getMessage(), e); } java.nio.ByteBuffer apkSigningBlockBuf = apkSigningBlock.getByteBuffer(0, ((int) (apkSigningBlock.size()))); apkSigningBlockBuf.order(java.nio.ByteOrder.LITTLE_ENDIAN); java.nio.ByteBuffer apkSignatureSchemeBlock = com.android.apksig.internal.apk.ApkSigningBlockUtils.findApkSignatureSchemeBlock(apkSigningBlockBuf, blockId, result); return new com.android.apksig.internal.apk.SignatureInfo(apkSignatureSchemeBlock, apkSigningBlockOffset, zipSections.getZipCentralDirectoryOffset(), zipSections.getZipEndOfCentralDirectoryOffset(), zipSections.getZipEndOfCentralDirectory()); }
@java.lang.Override @javax.annotation.Nonnull public java.nio.file.attribute.FileTime getLastModified(@javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file) throws com.android.sched.util.file.CannotGetModificationTimeException { try { return java.nio.file.Files.getLastModifiedTime(getNativeFile(file.getPath()).toPath()); } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotGetModificationTimeException(this, e); } }
private int tether(java.lang.String iface, int requestedState) { if (com.android.server.connectivity.Tethering.DBG) android.util.Log.d(com.android.server.connectivity.Tethering.TAG, ("Tethering " + iface)); synchronized(mPublicSync) { com.android.server.connectivity.Tethering.TetherState tetherState = mTetherStates.get(iface); if (tetherState == null) { android.util.Log.e(com.android.server.connectivity.Tethering.TAG, (("Tried to Tether an unknown iface: " + iface) + ", ignoring")); return android.net.ConnectivityManager.TETHER_ERROR_UNKNOWN_IFACE; } if ((tetherState.lastState) != (com.android.server.connectivity.tethering.IControlsTethering.STATE_AVAILABLE)) { android.util.Log.e(com.android.server.connectivity.Tethering.TAG, (("Tried to Tether an unavailable iface: " + iface) + ", ignoring")); return android.net.ConnectivityManager.TETHER_ERROR_UNAVAIL_IFACE; } tetherState.stateMachine.sendMessage(TetherInterfaceStateMachine.CMD_TETHER_REQUESTED, requestedState); return android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR; } }
@vogar.target.TestRunnerProperties(testClass = vogar.target.junit4.LongTest.class, timeout = 1) @org.junit.Test public void testRunner_LongTest_WithTimeout() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); expectedResults().failure("test", "java.util.concurrent.TimeoutException\n").aborted(); }
private static void runAttachTestCmd(com.android.tradefed.device.ITestDevice device, java.lang.String pkg, java.lang.String agentParams) throws java.lang.Exception { java.lang.String attachCmd = ((("cmd activity start -S -W " + agentParams) + " -n ") + pkg) + "/android.jvmti.JvmtiActivity"; device.executeShellCommand(attachCmd, com.android.ddmlib.NullOutputReceiver.getReceiver(), 10, java.util.concurrent.TimeUnit.SECONDS, 1); }
@org.junit.Test public void toleratesCarrierConfigMissing() { setupForRequiredProvisioning(); when(mCarrierConfigManager.getConfig()).thenReturn(null); assertTrue(mTethering.isTetherProvisioningRequired()); }
public void run() { while (!(guard1.get())); Main.full(); Main.expectEqual64((-123456789L), m.l); }
public void testCommentAndExtraInSameOrder() throws java.lang.Exception { java.lang.String comment = libcore.java.util.zip.ZipEntryTest.makeString(17, "z"); byte[] extra = libcore.java.util.zip.ZipEntryTest.makeString(11, "a").getBytes(); java.io.File f = createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); ze = new java.util.zip.ZipEntry("y"); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); try { assertEquals(comment, zipFile.getEntry("x").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry("x").getExtra())); assertEquals(comment, zipFile.getEntry("y").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry("y").getExtra())); } finally { zipFile.close(); } }
public java.util.jar.Manifest getManifest() throws java.io.IOException { if (closed) { throw new java.lang.IllegalStateException("JarFile has been closed"); } if ((manifest) != null) { return manifest; } if ((manifestBytes) == null) { return null; } manifest = new java.util.jar.Manifest(manifestBytes, false); manifestBytes = null; return manifest; }
@java.lang.Override protected boolean start() { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "start()"); mState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; mContext = this; mSessionStatusHandler = new com.android.bluetooth.pbap.BluetoothPbapService.PbapHandler(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_RESPONSE_ACTION); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_CANCELLED_ACTION); mInterrupted = false; com.android.bluetooth.pbap.BluetoothPbapConfig.init(this); mSessionStatusHandler.sendMessage(mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.START_LISTENER)); registerReceiver(mPbapReceiver, filter); try { mContactChangeObserver = new com.android.bluetooth.pbap.BluetoothPbapService.BluetoothPbapContentObserver(); getContentResolver().registerContentObserver(com.android.bluetooth.util.DevicePolicyUtils.getEnterprisePhoneUri(this), false, mContactChangeObserver); } catch (android.database.sqlite.SQLiteException e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ("SQLite exception: " + e)); } catch (java.lang.IllegalStateException e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "Illegal state exception, content observer is already registered"); } return true; }
static long $opt$noinline$DoubleToLong(double a) { if (Main.doThrow) throw new java.lang.Error(); return ((long) (a)); }
private void performPlaceHolderSubstitution(com.android.manifmerger.ManifestMerger2.ManifestInfo manifestInfo, com.android.manifmerger.XmlDocument xmlDocument, com.android.manifmerger.MergingReport.Builder mergingReportBuilder) { java.util.Map<java.lang.String, java.lang.String> finalPlaceHolderValues = mPlaceHolderValues; if (!(mPlaceHolderValues.containsKey("applicationId"))) { java.lang.String packageName = (manifestInfo.getMainManifestPackageName().isPresent()) ? manifestInfo.getMainManifestPackageName().get() : xmlDocument.getPackageName(); finalPlaceHolderValues = com.google.common.collect.ImmutableMap.<java.lang.String, java.lang.String>builder().putAll(mPlaceHolderValues).put(PlaceholderHandler.PACKAGE_NAME, packageName).put(PlaceholderHandler.APPLICATION_ID, packageName).build(); } com.android.manifmerger.PlaceholderHandler.KeyBasedValueResolver<java.lang.String> placeHolderValueResolver = new com.android.manifmerger.ManifestMerger2.MapBasedKeyBasedValueResolver<java.lang.String>(finalPlaceHolderValues); com.android.manifmerger.PlaceholderHandler placeholderHandler = new com.android.manifmerger.PlaceholderHandler(); placeholderHandler.visit(mMergeType, xmlDocument, placeHolderValueResolver, mergingReportBuilder); }
public void add(@com.android.annotations.NonNull java.lang.String name, @com.android.annotations.NonNull java.lang.String value) { data.add(new com.android.hierarchyviewerlib.models.ThemeModel.ThemeModelData(name, value)); }
@org.junit.Test public void long_to_int() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LONG_TO_INT).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }
com.android.ddmlib.SyncService getSyncService() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException;
private void createParameters(@javax.annotation.CheckForNull org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding[] sab, @javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo info, @javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method, @javax.annotation.Nonnull java.util.Set<java.lang.String> alreadyNamedVariables, boolean forceToImplicit) { if (sab != null) { for (int i = 0; i < (sab.length); ++i) { org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding arg = sab[i]; java.lang.String argName = java.lang.String.valueOf(arg.name); if (alreadyNamedVariables.contains(argName)) { argName += "_" + i; } createParameter(info, method, argName, arg.type, (((getFinalModifier(arg)) | (forceToImplicit ? com.android.jack.ir.ast.JModifier.IMPLICIT : com.android.jack.ir.ast.JModifier.SYNTHETIC)) | (com.android.jack.ir.ast.JModifier.NAME_PRESENT))); alreadyNamedVariables.add(argName); } } }
public void test_update$ByteBuffer() { java.nio.ByteBuffer byteBuffer = java.nio.ByteBuffer.wrap(new byte[]{ 1, 2, 3, 4 }); byteBuffer.position(2); assertChecksumFromByteBuffer(786440, byteBuffer); byteBuffer.flip(); byteBuffer = java.nio.ByteBuffer.allocateDirect(4).put(byteBuffer); byteBuffer.flip(); byteBuffer.position(2); assertChecksumFromByteBuffer(786440, byteBuffer); java.util.zip.Adler32 checksum = new java.util.zip.Adler32(); try { checksum.update(((java.nio.ByteBuffer) (null))); fail(); } catch (java.lang.NullPointerException expected) { } }
public void test_gc() { java.lang.Runtime rt = java.lang.Runtime.getRuntime(); java.util.Vector<java.lang.StringBuffer> vec = new java.util.Vector<java.lang.StringBuffer>(); long beforeTest = rt.freeMemory(); while ((rt.freeMemory()) < ((beforeTest * 2) / 3)) { vec.add(new java.lang.StringBuffer(1000)); } long beforeGC = (rt.totalMemory()) - (rt.freeMemory()); vec = null; java.lang.System.gc(); java.lang.System.runFinalization(); long afterGC = (rt.totalMemory()) - (rt.freeMemory()); assertTrue((((("memory was not released after calling System.gc()." + "before gc: ") + beforeGC) + "; after gc: ") + afterGC), (beforeGC >= afterGC)); }
private void testPreviewPictureSizesCombinationByCamera(int cameraId) throws java.lang.Exception { initializeMessageLooper(cameraId); mCamera.setPreviewDisplay(getActivity().getSurfaceView().getHolder()); android.hardware.Camera.Parameters parameters = mCamera.getParameters(); android.hardware.cts.CameraTest.PreviewCbForPreviewPictureSizesCombination callback = new android.hardware.cts.CameraTest.PreviewCbForPreviewPictureSizesCombination(); for (android.hardware.Camera.Size previewSize : parameters.getSupportedPreviewSizes()) { for (android.hardware.Camera.Size pictureSize : parameters.getSupportedPictureSizes()) { android.util.Log.v(TAG, (((((((("Test previewSize=(" + (previewSize.width)) + ",") + (previewSize.height)) + ") pictureSize=(") + (pictureSize.width)) + ",") + (pictureSize.height)) + ")")); mPreviewCallbackResult = false; mCamera.setPreviewCallback(callback); callback.expectedPreviewSize = previewSize; parameters.setPreviewSize(previewSize.width, previewSize.height); parameters.setPictureSize(pictureSize.width, pictureSize.height); mCamera.setParameters(parameters); assertEquals(previewSize, mCamera.getParameters().getPreviewSize()); assertEquals(pictureSize, mCamera.getParameters().getPictureSize()); mCamera.startPreview(); waitForPreviewDone(); assertTrue(mPreviewCallbackResult); mCamera.takePicture(mShutterCallback, mRawPictureCallback, mJpegPictureCallback); waitForSnapshotDone(); assertTrue(mJpegPictureCallbackResult); assertNotNull(mJpegData); android.graphics.BitmapFactory.Options bmpOptions = new android.graphics.BitmapFactory.Options(); bmpOptions.inJustDecodeBounds = true; android.graphics.BitmapFactory.decodeByteArray(mJpegData, 0, mJpegData.length, bmpOptions); assertEquals(pictureSize.width, bmpOptions.outWidth); assertEquals(pictureSize.height, bmpOptions.outHeight); } } terminateMessageLooper(); }
java.awt.image.BufferedImage getImage(int width, int height);
private void handleNotificationDeleted() { mNotificationShown = false; mRecommendedNetwork = null; mNotificationBadgeBitmap = null; }
public void startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo nai, int intervalSeconds, android.os.Messenger messenger, android.os.IBinder binder, java.lang.String srcAddrString, int srcPort, java.lang.String dstAddrString, int dstPort) { if (nai == null) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_NETWORK); return; } java.net.InetAddress srcAddress; java.net.InetAddress dstAddress; try { srcAddress = android.net.NetworkUtils.numericToInetAddress(srcAddrString); dstAddress = android.net.NetworkUtils.numericToInetAddress(dstAddrString); } catch (java.lang.IllegalArgumentException e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_IP_ADDRESS); return; } android.net.KeepalivePacketData packet; try { packet = android.net.KeepalivePacketData.nattKeepalivePacket(srcAddress, srcPort, dstAddress, com.android.server.connectivity.NATT_PORT); } catch (android.net.KeepalivePacketData e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, e.error); return; } com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo ki = new com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo(messenger, binder, nai, packet, intervalSeconds); android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, ("Created keepalive: " + (ki.toString()))); mConnectivityServiceHandler.obtainMessage(NetworkAgent.CMD_START_PACKET_KEEPALIVE, ki).sendToTarget(); }
@java.lang.Override protected synchronized boolean stop() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, "stop()"); if (!(mStarted)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "stop() called before start()"); return true; } mStarted = false; unregisterReceiver(mHeadsetReceiver); com.android.bluetooth.hfp.HeadsetStateMachine.destroy(mStateMachine); mStateMachine = null; mNativeInterface.cleanup(); mSystemInterface.stop(); mStateMachinesThread.quitSafely(); mStateMachinesThread = null; com.android.bluetooth.hfp.HeadsetService.setHeadsetService(null); return true; }
public void testEquals_checksExecutable() throws java.lang.Exception { java.lang.reflect.Method method0 = libcore.java.lang.reflect.ParameterTest.NonIdenticalParameters.class.getDeclaredMethod("method0", java.lang.String.class); java.lang.reflect.Method method1 = libcore.java.lang.reflect.ParameterTest.NonIdenticalParameters.class.getDeclaredMethod("method1", java.lang.String.class); java.lang.reflect.Parameter method0P0 = method0.getParameters()[0]; java.lang.reflect.Parameter method1P0 = method1.getParameters()[0]; assertFalse(method0P0.equals(method1P0)); assertFalse(method1P0.equals(method0P0)); assertTrue(method0P0.equals(method0P0)); }
private void checkAbsInt3Uint3() { android.renderscript.Allocation inValue = CreateRandomAllocation(mRS, Element.DataType.SIGNED_32, 3, -4002984334132928449L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_32, 3), android.renderscript.cts.INPUTSIZE); script.forEach_testAbsInt3Uint3(inValue, out); verifyResultsAbsInt3Uint3(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAbsInt3Uint3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAbsInt3Uint3(inValue, out); verifyResultsAbsInt3Uint3(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAbsInt3Uint3: " + (e.toString()))); } }
private android.telephony.RadioAccessSpecifier convertRadioAccessSpecifierToRadioHAL(android.telephony.RadioAccessSpecifier ras) { android.hardware.radio.V1_1.RadioAccessSpecifier rasInHalFormat = new android.hardware.radio.V1_1.RadioAccessSpecifier(); rasInHalFormat.radioAccessNetwork = ras.getRadioAccessNetwork(); java.util.List<java.lang.Integer> bands = null; switch (ras.getRadioAccessNetwork()) { case android.telephony.AccessNetworkConstants.AccessNetworkType.GERAN : bands = rasInHalFormat.geranBands; break; case android.telephony.AccessNetworkConstants.AccessNetworkType.UTRAN : bands = rasInHalFormat.utranBands; break; case android.telephony.AccessNetworkConstants.AccessNetworkType.EUTRAN : bands = rasInHalFormat.eutranBands; break; default : android.util.Log.wtf(com.android.internal.telephony.RIL.RILJ_LOG_TAG, (("radioAccessNetwork " + (ras.getRadioAccessNetwork())) + " not supported!")); return null; } if ((ras.getBands()) != null) { for (int band : ras.getBands()) { bands.add(band); } } if ((ras.getChannels()) != null) { for (int channel : ras.getChannels()) { rasInHalFormat.channels.add(channel); } } return rasInHalFormat; }
public static void d(java.lang.String prefix, java.lang.String format, java.lang.Object... args) { if (android.telecom.Log.sIsUserExtendedLoggingEnabled) { android.telecom.Log.maybeDisableLogging(); android.util.Slog.i(android.telecom.Log.TAG, android.telecom.Log.buildMessage(prefix, format, args)); } else if (android.telecom.Log.DEBUG) { android.util.Slog.d(android.telecom.Log.TAG, android.telecom.Log.buildMessage(prefix, format, args)); } }
public android.net.wifi.IClientInterface setupDriverForClientMode() { android.util.Log.d(com.android.server.wifi.WificondControl.TAG, "Setting up driver for client mode"); mWificond = mWifiInjector.makeWificond(); if ((mWificond) == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, "Failed to get reference to wificond"); return null; } android.net.wifi.IClientInterface clientInterface = null; try { clientInterface = mWificond.createClientInterface(); } catch (android.os.RemoteException e1) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, "Failed to get IClientInterface due to remote exception"); return null; } if (clientInterface == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, "Could not get IClientInterface instance from wificond"); return null; } android.os.Binder.allowBlocking(clientInterface.asBinder()); mClientInterface = clientInterface; try { mClientInterfaceName = clientInterface.getInterfaceName(); mWificondScanner = mClientInterface.getWifiScannerImpl(); if ((mWificondScanner) == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, "Failed to get WificondScannerImpl"); return null; } android.os.Binder.allowBlocking(mWificondScanner.asBinder()); mScanEventHandler = new com.android.server.wifi.WificondControl.ScanEventHandler(); mWificondScanner.subscribeScanEvents(mScanEventHandler); mPnoScanEventHandler = new com.android.server.wifi.WificondControl.PnoScanEventHandler(); mWificondScanner.subscribePnoScanEvents(mPnoScanEventHandler); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, "Failed to refresh wificond scanner due to remote exception"); } return clientInterface; }
public void test_isReachable_by_ICMP() throws java.lang.Exception { java.net.InetAddress[] inetAddresses = java.net.InetAddress.getAllByName("www.google.com"); for (java.net.InetAddress ia : inetAddresses) { assertTrue(ia.isReachableByICMP((5 * 1000))); } final java.net.InetAddress blackholeAddress = java.net.InetAddress.getByName("100::1"); assertFalse(blackholeAddress.isReachable(1000)); }
public void broadcastP2pGoNegotiationFailure(java.lang.String iface, com.android.server.wifi.p2p.WifiP2pServiceImpl.P2pStatus reason) { sendMessage(iface, com.android.server.wifi.WifiMonitor.P2P_GO_NEGOTIATION_FAILURE_EVENT, reason); }
@javax.annotation.Nonnull private com.android.jack.test.toolchain.AndroidToolchain createCandidateToolchain() { com.android.jack.test.toolchain.AndroidToolchain candidateTestTools = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.AndroidToolchain.class, ignoredCandidateToolchains); candidateTestTools.setSourceLevel(level); candidateTestTools.setWithDebugInfos(withDebugInfos); if ((!(runtimeProperties.isEmpty())) && (candidateTestTools instanceof com.android.jack.test.toolchain.JackBasedToolchain)) { com.android.jack.test.toolchain.JackBasedToolchain jackBasedToolchain = ((com.android.jack.test.toolchain.JackBasedToolchain) (candidateTestTools)); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : runtimeProperties.entrySet()) { jackBasedToolchain.addProperty(entry.getKey(), entry.getValue()); } } return candidateTestTools; }
@java.lang.Override public java.io.FileDescriptor socket(int domain, int type, int protocol) throws android.system.ErrnoException { return tagSocket(os.socket(domain, type, protocol)); }
public boolean isEncryption() { return getName().equals(android.net.IpSecAlgorithm.CRYPT_AES_CBC); }
@com.android.annotations.NonNull public com.android.build.gradle.internal.dsl.BuildType setProguardFiles(@com.android.annotations.NonNull java.lang.Iterable<?> proguardFileIterable) { getProguardFiles().clear(); for (java.lang.Object proguardFile : proguardFileIterable) { getProguardFiles().add(project.file(proguardFile)); } return this; }
public org.gradle.api.file.FileCollection doCall(java.lang.Object it) { org.gradle.api.file.FileCollection classpath = scope.getJavaClasspath(); if (testedVariantData != null) { if ((!(testedVariantData.getType().equals(com.android.build.gradle.tasks.factory.LIBRARY))) || (scope.getVariantData().getType().equals(com.android.build.gradle.tasks.factory.UNIT_TEST))) { classpath = classpath.plus(testedVariantData.getScope().getJavaClasspath()).plus(scope.getGlobalScope().getProject().files(testedVariantData.getScope().getJavaOutputDir(), testedVariantData.getScope().getJavaDependencyCache())); } if ((scope.getVariantData().getType().equals(com.android.build.gradle.tasks.factory.UNIT_TEST)) && (testedVariantData.getType().equals(com.android.build.gradle.tasks.factory.LIBRARY))) { classpath = classpath.minus(scope.getGlobalScope().getProject().files(testedVariantData.getVariantConfiguration().getOutput().getJarFile())); } } return classpath; }
public static int minBandwidth(int a, int b) { if (a == (android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED)) { return b; } else if (b == (android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED)) { return a; } else { return java.lang.Math.min(a, b); } }
@com.googlecode.android_scripting.rpc.Rpc(description = "Set Bluetooth Tethering") public void bluetoothPanSetBluetoothTethering(@com.googlecode.android_scripting.rpc.RpcParameter(name = "enable") java.lang.Boolean enable) { com.googlecode.android_scripting.facade.bluetooth.BluetoothPanFacade.sPanProfile.setBluetoothTethering(enable); }
private void validateSensitivity(int request, int result) { float sensitivityDelta = ((float) (request - result)); float sensitivityErrorMargin = request * (android.hardware.camera2.cts.CaptureRequestTest.SENSITIVITY_ERROR_MARGIN_RATE); mCollector.expectTrue(((("Sensitivity is invalid for AE manaul control test, request: " + request) + " result: ") + result), ((sensitivityDelta < sensitivityErrorMargin) && (sensitivityDelta >= 0))); }
@java.lang.Override public java.util.Collection<com.android.resources.ResourceType> getResourceTypes() { return mResourceTypeList; }
@java.lang.Override public void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.server.BluetoothManagerService.TAG); if ((mBluetoothBinder) == null) { writer.println("Bluetooth Service not connected"); } else { try { mBluetoothBinder.dump(fd, args); } catch (android.os.RemoteException re) { writer.println("RemoteException while calling Bluetooth Service"); } } }
private void testWifiConfigurationSaveLoad(WifiConfiguration config) { assertTrue(mSupplicantNetwork.saveWifiConfiguration(config)); WifiConfiguration loadConfig = new WifiConfiguration(); java.util.Map<java.lang.String, java.lang.String> networkExtras = new java.util.HashMap<>(); assertTrue(mSupplicantNetwork.loadWifiConfiguration(loadConfig, networkExtras)); com.android.server.wifi.WifiConfigurationTestUtil.assertConfigurationEqualForSupplicant(config, loadConfig); assertEquals(config.configKey(), networkExtras.get(SupplicantStaNetworkHal.ID_STRING_KEY_CONFIG_KEY)); assertEquals(config.creatorUid, java.lang.Integer.parseInt(networkExtras.get(SupplicantStaNetworkHal.ID_STRING_KEY_CREATOR_UID))); if (!(android.text.TextUtils.isEmpty(config.updateIdentifier))) { assertEquals(java.lang.Integer.parseInt(config.updateIdentifier), mSupplicantVariables.updateIdentifier); } java.lang.String oppKeyCaching = config.enterpriseConfig.getFieldValue(OPP_KEY_CACHING); if (!(android.text.TextUtils.isEmpty(oppKeyCaching))) { assertEquals(((java.lang.Integer.parseInt(oppKeyCaching)) == 1 ? true : false), mSupplicantVariables.eapProactiveKeyCaching); } }
public static native void EC_POINT_set_affine_coordinates(int groupCtx, int pointCtx, byte[] x, byte[] y);
public void removeTypedefClasses() { if ((((classDir) != null) && ((typedefClasses) != null)) && (!(typedefClasses.isEmpty()))) { boolean quiet = false; boolean verbose = false; boolean dryRun = false; com.android.build.gradle.tasks.annotations.TypedefRemover remover = new com.android.build.gradle.tasks.annotations.TypedefRemover(this, quiet, verbose, dryRun); remover.remove(classDir, typedefClasses); } }
public void registerArtifactType(@com.android.annotations.NonNull java.lang.String name, boolean isTest, int artifactType) { if ((extraArtifactMap.get(name)) != null) { throw new java.lang.IllegalArgumentException(java.lang.String.format("Artifact with name %1$s already registered.", name)); } extraArtifactMap.put(name, new com.android.build.gradle.internal.model.ArtifactMetaDataImpl(name, isTest, artifactType)); }
@java.lang.Override public com.android.chimpchat.core.IChimpView.AccessibilityIds getAccessibilityIds() { java.util.List<java.lang.String> results = com.google.common.collect.Lists.newArrayList(queryView("getaccessibilityids").split(" ")); if ((results.size()) == 2) { try { return new com.android.chimpchat.core.IChimpView.AccessibilityIds(java.lang.Integer.parseInt(results.get(0)), java.lang.Long.parseLong(results.get(1))); } catch (java.lang.NumberFormatException e) { com.android.chimpchat.core.ChimpView.LOG.log(java.util.logging.Level.SEVERE, ("Error retrieving accesibility ids: " + (e.getMessage()))); } } return new com.android.chimpchat.core.IChimpView.AccessibilityIds(0, 0); }
@java.lang.Override public void getSignalStrength(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIGNAL_STRENGTH, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getSignalStrength(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getSignalStrength", e); } } }
public void testRefactor5() throws java.lang.Exception { checkRefactoring(com.android.ide.eclipse.adt.internal.refactorings.core.RenameResourceParticipantTest.TEST_PROJECT, "@layout/activity_main", true, "newlayout", ("CHANGES:\n" + (((((((((((("-------\n" + "* Rename \'testRefactor5/res/layout/activity_main.xml\' to \'newlayout.xml\'\n") + "* Rename \'testRefactor5/res/layout-land/activity_main.xml\' to \'newlayout.xml\'\n") + "* MainActivity.java - /testRefactor5/src/com/example/refactoringtest/MainActivity.java\n") + " < setContentView(R.layout.activity_main);\n") + " ---\n") + " > setContentView(R.layout.newlayout);\n") + "\n") + "\n") + "* R.java - /testRefactor5/gen/com/example/refactoringtest/R.java\n") + " < public static final int activity_main=0x7f030000;\n") + " ---\n") + " > public static final int newlayout=0x7f030000;"))); }
@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) { if (acceptFilter(type)) { stream.print(com.android.jack.util.StructurePrinter.formatter.getName(type)); stream.println(":"); return true; } else { return false; } }
public void testDisplayAvdListOfOneSnapshot() { com.android.sdkmanager.Main main = new com.android.sdkmanager.Main(); main.setLogger(mLog); mAvdManager.createAvd(mAvdFolder, this.getName(), mTarget, SdkConstants.ABI_ARMEABI, null, null, null, true, false, false, mLog); mLog.clear(); main.displayAvdList(mAvdManager); assertEquals((((((((((("[P Available Android Virtual Devices:\n" + ", P Name: ") + (this.getName())) + "\n") + ", P Path: ") + (mAvdFolder)) + "\n") + ", P Target: Android 0.0 (API level 0)\n") + ", P Skin: HVGA\n") + ", P Snapshot: true\n") + "]"), mLog.toString()); }
public boolean isIncomingCallPermitted(com.android.server.telecom.Call excludeCall, android.telecom.PhoneAccountHandle phoneAccountHandle) { if (phoneAccountHandle == null) { return false; } android.telecom.PhoneAccount phoneAccount = mPhoneAccountRegistrar.getPhoneAccountUnchecked(phoneAccountHandle); if (phoneAccount == null) { return false; } if (!(phoneAccount.isSelfManaged())) { return (!(hasMaximumManagedRingingCalls(excludeCall))) && (!(hasMaximumManagedHoldingCalls(excludeCall))); } else { return (((!(hasEmergencyCall())) && (!(hasMaximumSelfManagedRingingCalls(excludeCall, phoneAccountHandle)))) && (!(hasMaximumSelfManagedCalls(excludeCall, phoneAccountHandle)))) && (!(hasManagedCalls())); } }
void onConnect(java.net.InetAddress remoteAddress, int remotePort, boolean updateSocketState) { connected = true; connectAddress = new java.net.InetSocketAddress(remoteAddress, remotePort); if (updateSocketState && ((socket) != null)) { socket.onConnect(remoteAddress, remotePort); } }
private static java.util.Map<java.lang.String, java.lang.String> toHeaderMap(java.util.List<com.android.volley.Header> allHeaders) { if (allHeaders == null) { return null; } if (allHeaders.isEmpty()) { return java.util.Collections.emptyMap(); } java.util.Map<java.lang.String, java.lang.String> headers = new java.util.TreeMap<>(java.lang.String.CASE_INSENSITIVE_ORDER); for (com.android.volley.Header header : allHeaders) { headers.put(header.getName(), header.getValue()); } return headers; }
@org.junit.Test public void testEvaluateNetworks_nullRecommendation() { when(mWifiConfigManager.wasEphemeralNetworkDeleted(anyString())).thenReturn(false); when(mNetworkScoreManager.requestRecommendation(any(android.net.RecommendationRequest.class))).thenReturn(null); android.net.wifi.WifiConfiguration result = mRecommendedNetworkEvaluator.evaluateNetworks(com.google.android.collect.Lists.newArrayList(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL, com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL), null, null, false, false, null); junit.framework.Assert.assertNull(result); verify(mNetworkScoreManager).requestRecommendation(any(android.net.RecommendationRequest.class)); }
static void getInt(java.lang.invoke.MethodHandle m, Main.ValueHolder v, int value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final int got = (v == null) ? ((int) (m.invokeExact())) : ((int) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEquals(exceptionThrown, expectFailure); }
@org.junit.Test @com.android.jack.test.junit.KnownIssue public void test001d() throws java.lang.Exception { java.io.File jackOutput = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); runTest001(jackOutput, "keep-first", errOut, false, true); com.android.jack.library.InputJackLibrary outputLib = null; try { outputLib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibrary(jackOutput); com.android.sched.vfs.InputVFile myClass1 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE1_PATH); com.android.sched.vfs.InputVFile myClass2 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE2_PATH); com.android.sched.vfs.InputVFile myClass3 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE3_PATH); checkJayceNotEmpty(myClass1); checkJayceNotEmpty(myClass2); checkJayceNotEmpty(myClass3); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { junit.framework.Assert.fail(); } finally { if (outputLib != null) { outputLib.close(); } java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains("Type com.android.jack.fileconflict.test001.jack.MyClass")); junit.framework.Assert.assertTrue(errString.contains("Type com.android.jack.fileconflict.test001.jack.MyClass2")); junit.framework.Assert.assertTrue(errString.contains("Type com.android.jack.fileconflict.test001.jack.MyClass3")); junit.framework.Assert.assertTrue(errString.contains("has already been imported")); } }
synchronized void recordScanStart(android.bluetooth.le.ScanSettings settings, boolean filtered, int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan existingScan = getScanFromScannerId(scannerId); if (existingScan != null) { return; } (this.mScansStarted)++; startTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = new com.android.bluetooth.gatt.AppScanStats.LastScan(startTime, 0, false, false, filtered, scannerId); if (settings != null) { scan.opportunistic = (settings.getScanMode()) == (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC); scan.background = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.CALLBACK_TYPE_FIRST_MATCH)) != 0; } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_START); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); mGattService.addScanEvent(scanEvent); if (!(isScanning())) mScanStartTime = startTime; try { boolean isUnoptimized = !(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mBatteryStats.noteBleScanStarted(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } mOngoingScans.put(scannerId, scan); }
@java.lang.Override public java.util.List<com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem> getResourceItemsOfType(com.android.resources.ResourceType type) { return mPublicResourceMap.get(type); }
@java.lang.Override public int compareTo(java.lang.Object o) { com.android.dx.dex.file.CallSiteIdItem other = ((com.android.dx.dex.file.CallSiteIdItem) (o)); return invokeDynamicRef.compareTo(other.invokeDynamicRef); }
public static long digestFile(java.io.File file) throws java.io.IOException { if ((!(Runner.ZIP_AS_BINARY)) && (com.intellij.updater.Utils.isZipFile(file.getName()))) { java.util.zip.ZipFile zipFile; try { zipFile = new java.util.zip.ZipFile(file); } catch (java.io.IOException e) { com.intellij.updater.Runner.printStackTrace(e); return com.intellij.updater.Digester.digestRegularFile(file); } try { return com.intellij.updater.Digester.doDigestZipFile(zipFile); } finally { zipFile.close(); } } return com.intellij.updater.Digester.digestRegularFile(file); }
@java.lang.Override protected void textChanged(javax.swing.event.DocumentEvent e) { if (myUpdating) { return; } myUpdating = true; try { updateDataModel(); myUpdateListener.update(); } finally { myUpdating = false; } }
@org.junit.Test public void testCompile023() throws java.lang.Exception { java.lang.String packageName = "com.android.jack.switchstatement.test023.jack"; java.lang.String classPrefix = (packageName.replace('.', '_')) + "_"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put("Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); input.put("Switch2", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum2$Enum2_"), false)); input.put("Enum1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); input.put("Enum2", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum2$Enum2_"), false)); input.put("Enum1$Enum1_", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); input.put("Enum2$Enum2_", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum2$Enum2_"), false)); input.put("SyntheticSwitchmapClass-*", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo((classPrefix + "Enum1$Enum1_"), true).specifyInfo((classPrefix + "Enum2$Enum2_"), true)); checkCompiledCode(packageName, input); }
@android.support.annotation.VisibleForTesting public synchronized android.bluetooth.BluetoothDevice getDevice() { return mDevice; }
protected void onUpdateIccAvailability() { if ((mUiccController) == null) { return; } com.android.internal.telephony.uicc.UiccCardApplication newUiccApplication = getUiccCardApplication(); if ((mUiccApplcation) != newUiccApplication) { if ((mUiccApplcation) != null) { log("Removing stale icc objects."); mUiccApplcation.unregisterForReady(this); if ((mIccRecords) != null) { mIccRecords.unregisterForRecordsLoaded(this); } mIccRecords = null; mUiccApplcation = null; } if (newUiccApplication != null) { log("New card found"); mUiccApplcation = newUiccApplication; mIccRecords = mUiccApplcation.getIccRecords(); if (mPhone.isPhoneTypeGsm()) { mUiccApplcation.registerForReady(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_READY, null); if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_RECORDS_LOADED, null); } } else if (mIsSubscriptionFromRuim) { mUiccApplcation.registerForReady(this, com.android.internal.telephony.ServiceStateTracker.EVENT_RUIM_READY, null); if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.ServiceStateTracker.EVENT_RUIM_RECORDS_LOADED, null); } } } } }
public void testAuthenticateWithPost() throws java.lang.Exception { com.google.mockwebserver.MockResponse pleaseAuthenticate = new com.google.mockwebserver.MockResponse().setResponseCode(401).addHeader("WWW-Authenticate: Basic realm=\"protected area\"").setBody("Please authenticate."); server.enqueue(pleaseAuthenticate); server.enqueue(pleaseAuthenticate); server.enqueue(pleaseAuthenticate); server.enqueue(new com.google.mockwebserver.MockResponse().setBody("Successful auth!")); server.play(); java.net.Authenticator.setDefault(new libcore.java.net.URLConnectionTest.SimpleAuthenticator()); java.net.HttpURLConnection connection = ((java.net.HttpURLConnection) (server.getUrl("/").openConnection())); connection.setDoOutput(true); byte[] requestBody = new byte[]{ 'A', 'B', 'C', 'D' }; java.io.OutputStream outputStream = connection.getOutputStream(); outputStream.write(requestBody); outputStream.close(); assertEquals("Successful auth!", readAscii(connection.getInputStream(), java.lang.Integer.MAX_VALUE)); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); assertContainsNoneMatching(request.getHeaders(), "Authorization: .*"); for (int i = 0; i < 3; i++) { request = server.takeRequest(); assertEquals("POST / HTTP/1.1", request.getRequestLine()); assertContains(request.getHeaders(), ("Authorization: Basic " + (libcore.java.net.URLConnectionTest.SimpleAuthenticator.BASE_64_CREDENTIALS))); assertEquals(java.util.Arrays.toString(requestBody), java.util.Arrays.toString(request.getBody())); } }
synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if ((mUserUid) != 0) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG, "registerApp(): failed because another app is registered"); return false; } mUserUid = android.os.Binder.getCallingUid(); if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ("registerApp(): calling uid=" + (mUserUid))); } mCallback = callback; return mHidDeviceNativeInterface.registerApp(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null ? null : inQos.toArray()), (outQos == null ? null : outQos.toArray())); }
@java.lang.Override public void setCLIR(int clirMode, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_CLIR, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " clirMode = ") + clirMode)); } try { radioProxy.setClir(rr.mSerial, clirMode); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCLIR", e); } } }
@java.lang.Override public void handleMessage(android.os.Message msg) { synchronized(this) { if (mCancelled) { return; } final long millisLeft = (mStopTimeInFuture) - (android.os.SystemClock.elapsedRealtime()); if (millisLeft <= 0) { onFinish(); } else if (millisLeft < (mCountdownInterval)) { sendMessageDelayed(obtainMessage(android.os.CountDownTimer.MSG), millisLeft); } else { long lastTickStart = android.os.SystemClock.elapsedRealtime(); onTick(millisLeft); long delay = (lastTickStart + (mCountdownInterval)) - (android.os.SystemClock.elapsedRealtime()); while (delay < 0) delay += mCountdownInterval; sendMessageDelayed(obtainMessage(android.os.CountDownTimer.MSG), delay); } } }
public void sendEnvelopeWithStatus(java.lang.String contents, android.os.Message response) { mCi.sendEnvelopeWithStatus(contents, response); }
public com.android.layoutlib.api.LayoutScene createScene(com.android.layoutlib.api.SceneParams params) { if ((mBridge) != null) { return mBridge.createScene(params); } else if ((mLegacyBridge) != null) { return createLegacyScene(params); } return null; }
public void testVFE3() { try { new dot.junit.opcodes.iget_short.d.T_iget_short_13().run(); fail("expected a NoSuchFieldError exception"); } catch (java.lang.NoSuchFieldError e) { } }
public java.lang.String getDisplayVariant(java.util.Locale locale) { if (variantCode.isEmpty()) { return ""; } try { java.util.Locale.Builder.normalizeAndValidateVariant(variantCode); } catch (java.util.IllformedLocaleException ilfe) { return variantCode; } java.lang.String result = libcore.icu.ICU.getDisplayVariant(this, locale); if (result == null) { result = libcore.icu.ICU.getDisplayVariant(this, java.util.Locale.getDefault()); } if (result.isEmpty()) { return variantCode; } return result; }
public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { mHandler.obtainMessage(com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_UNREGISTERED, profile).sendToTarget(); }
synchronized void init() { android.content.Intent intent = new android.content.Intent(android.bluetooth.IBluetoothHeadsetPhone.class.getName()); intent.setComponent(intent.resolveSystemService(mHeadsetService.getPackageManager(), 0)); if (((intent.getComponent()) == null) || (!(mHeadsetService.bindService(intent, mPhoneProxyConnection, 0)))) { android.util.Log.wtfStack(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, ("Could not bind to IBluetoothHeadsetPhone Service, intent=" + intent)); } }
@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) { for (com.android.sched.vfs.InputVElement sub : dir.list()) { if ((!(sub.isVDir())) && (isJackFileNameOf(sub.getName(), simpleName))) { try { return new com.android.jack.jayce.JayceClassOrInterfaceLoader(inputJackLibrary, loading, simpleName, ((com.android.sched.vfs.InputVFile) (sub)), lookup, defaultLoadLevel).load(); } catch (java.io.IOException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } catch (com.android.jack.library.LibraryFormatException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } catch (com.android.jack.jayce.JayceFormatException e) { com.android.jack.jayce.JaycePackageLoader.logger.log(java.util.logging.Level.SEVERE, (("Library " + (inputJackLibrary.getLocation().getDescription())) + " is invalid"), e); throw new com.android.jack.load.JackLoadingException(sub.getLocation(), new com.android.jack.library.LibraryFormatException(inputJackLibrary.getLocation())); } catch (com.android.jack.jayce.JayceVersionException e) { com.android.jack.jayce.JaycePackageLoader.logger.log(java.util.logging.Level.SEVERE, (("Library " + (inputJackLibrary.getLocation().getDescription())) + " is invalid"), e); throw new com.android.jack.load.JackLoadingException(sub.getLocation(), new com.android.jack.library.LibraryFormatException(inputJackLibrary.getLocation())); } } } throw new com.android.jack.ir.ast.MissingJTypeLookupException(loading, simpleName); }
@java.lang.Override public void run() { try { mManager.registerCallback(mCallabck, new android.os.Handler()); mManager.unregisterCallback(mCallabck); } catch (java.lang.Exception e) { fail(); } }
private static void calculateBorderColorForViewNode(com.android.hierarchyviewerlib.models.ViewNode node, com.android.hierarchyviewerlib.models.EvaluateContrastModel.ContrastResult result) { org.eclipse.swt.graphics.Color borderColor; switch (result) { case PASS : borderColor = com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.getBorderColorPass(); break; case FAIL : borderColor = com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.getBorderColorFail(); break; case INDETERMINATE : default : borderColor = com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.getBorderColorIndeterminate(); } com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sBorderColorForViewNode.put(node, borderColor); }
@java.lang.Override public void sendTextForSubscriberWithOptions(int subId, java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.lang.String parts, android.app.PendingIntent sentIntents, android.app.PendingIntent deliveryIntents, boolean persistMessage, int priority, boolean expectMore, int validityPeriod) { com.android.internal.telephony.IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId); if (iccSmsIntMgr != null) { iccSmsIntMgr.sendTextWithOptions(callingPackage, destAddr, scAddr, parts, sentIntents, deliveryIntents, persistMessage, priority, expectMore, validityPeriod); } else { android.telephony.Rlog.e(com.android.internal.telephony.UiccSmsController.LOG_TAG, (("sendTextWithOptions iccSmsIntMgr is null for" + " Subscription: ") + subId)); } }
private com.android.build.gradle.internal.model.JavaArtifactImpl createUnitTestsJavaArtifact(@com.android.annotations.NonNull com.android.builder.core.VariantType variantType, @com.android.annotations.NonNull BaseVariantData<? extends BaseVariantOutputData> variantData) { com.android.build.gradle.internal.model.ModelBuilder.SourceProviders sourceProviders = com.android.build.gradle.internal.model.ModelBuilder.determineSourceProviders(variantData); com.android.build.gradle.internal.model.DependenciesImpl dependencies = com.android.build.gradle.internal.model.DependenciesImpl.cloneDependencies(variantData, androidBuilder); java.util.List<java.io.File> extraGeneratedSourceFolders = variantData.getExtraGeneratedSourceFolders(); return new com.android.build.gradle.internal.model.JavaArtifactImpl(variantType.getArtifactName(), variantData.assembleVariantTask.getName(), variantData.getScope().getCompileTask().getName(), com.google.common.collect.Sets.newHashSet(variantData.prepareDependenciesTask.getName(), taskManager.createMockableJar.getName()), (extraGeneratedSourceFolders != null ? extraGeneratedSourceFolders : java.util.Collections.<java.io.File>emptyList()), ((variantData.javacTask) != null ? variantData.javacTask.getDestinationDir() : variantData.getScope().getJavaOutputDir()), variantData.getScope().getJavaResourcesDestinationDir(), taskManager.getGlobalScope().getMockableAndroidJarFile(), dependencies, sourceProviders.variantSourceProvider, sourceProviders.multiFlavorSourceProvider); }
@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) { com.android.sched.vfs.InputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VFS prefixedInputVFS = null; try { prefixedInputVFS = new com.android.sched.vfs.PrefixedFS(vfs, new com.android.sched.vfs.VPath(fileType.getPrefix(), '/')); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.NotDirectoryException e) { throw new java.lang.AssertionError(e); } if (fileType == (com.android.jack.library.FileType.DEX)) { try { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(new com.android.sched.vfs.MessageDigestFS(prefixedInputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO))); } catch (com.android.sched.vfs.WrongVFSFormatException e) { throw new java.lang.AssertionError(e); } } else { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(prefixedInputVFS); } sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }
private static void maybeDisableLogging() { if (!(android.telecom.Log.sIsUserExtendedLoggingEnabled)) { return; } if ((android.telecom.Log.sUserExtendedLoggingStopTime) < (java.lang.System.currentTimeMillis())) { android.telecom.Log.sUserExtendedLoggingStopTime = 0; android.telecom.Log.sIsUserExtendedLoggingEnabled = false; } }
@java.lang.Override public java.lang.String getSigAlgName() { return org.apache.harmony.security.utils.AlgNameMapper.map2AlgName(getSigAlgOID()); }
protected void openDevice(java.lang.String cameraId, android.hardware.camera2.cts.testcases.BlockingStateCallback listener) throws java.lang.Exception { mCamera = android.hardware.camera2.cts.CameraTestUtils.CameraTestUtils.openCamera(mCameraManager, cameraId, listener, mHandler); mCollector.setCameraId(cameraId); mStaticInfo = new android.hardware.camera2.cts.helpers.StaticMetadata(mCameraManager.getCameraCharacteristics(cameraId), android.hardware.camera2.cts.helpers.StaticMetadata.CheckLevel.ASSERT, null); mOrderedPreviewSizes = getSupportedPreviewSizes(cameraId, mCameraManager, getPreviewSizeBound(mWindowManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND)); mOrderedVideoSizes = getSupportedVideoSizes(cameraId, mCameraManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND); mOrderedStillSizes = getSupportedStillSizes(cameraId, mCameraManager, null); if (android.hardware.camera2.cts.testcases.Camera2AndroidTestCase.VERBOSE) { android.util.Log.v(android.hardware.camera2.cts.testcases.Camera2AndroidTestCase.TAG, (("Camera " + cameraId) + " is opened")); } }
public void testSinglePass() { java.util.Map<java.lang.String, java.lang.String> emptyMap = java.util.Collections.emptyMap(); final com.android.ddmlib.testrunner.TestIdentifier testId = new com.android.ddmlib.testrunner.TestIdentifier("com.foo.FooTest", "testFoo"); org.easymock.EasyMock.replay(mMockBuild); mResultReporter.invocationStarted(mMockBuild); mResultReporter.testRunStarted(com.android.cts.util.AbiUtils.createId(UnitTests.ABI.getName(), "run"), 1); mResultReporter.testStarted(testId); mResultReporter.testEnded(testId, emptyMap); mResultReporter.testRunEnded(3000, emptyMap); mResultReporter.putSummary(com.android.cts.tradefed.result.CtsXmlResultReporterTest.SUMMARY_LIST); mResultReporter.invocationEnded(1); java.lang.String output = getOutput(); final java.lang.String expectedTestOutput = java.lang.String.format(("<TestResult testPlan=\"NA\" starttime=\"ignore\" endtime=\"ignore\" " + "version=\"%s\" suite=\"%s\" referenceUrl=\"%s\"> "), com.android.cts.tradefed.result.CtsXmlResultReporter.CTS_RESULT_FILE_VERSION, "CTS", com.android.cts.tradefed.result.CtsXmlResultReporterTest.TEST_SUMMARY_URL); assertTrue(("Found output: " + output), output.contains(expectedTestOutput)); assertTrue(output.contains("<Summary failed=\"0\" notExecuted=\"0\" timeout=\"0\" pass=\"1\" />")); assertTrue(output.contains((("<TestPackage name=\"\" appPackageName=\"run\" abi=\"" + (UnitTests.ABI.getName())) + "\" digest=\"\">"))); assertTrue(output.contains("<TestCase name=\"FooTest\" priority=\"\">")); final java.lang.String testCaseTag = java.lang.String.format("<Test name=\"%s\" result=\"pass\"", testId.getTestName()); assertTrue(output.contains(testCaseTag)); org.easymock.EasyMock.verify(mMockBuild); }
@org.junit.Test public void compileWithAnnotationProcessorNoAuto_classpath() throws java.lang.Exception { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> exclude = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(); exclude.add(com.android.jack.test.toolchain.JillBasedToolchain.class); com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, exclude); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorClasses(java.util.Collections.singletonList(com.android.jack.annotation.processor.sample.processors.SourceAnnotationProcessor.class.getName())); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.addToClasspath(processors); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); junit.framework.Assert.assertFalse(libOut.containsFileType(FileType.RSC)); libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath("Annotated2Duplicated", '/')); }
public void setMetaDirs(@javax.annotation.Nonnull java.util.List<java.io.File> metaDirs) { metaImport = metaDirs; }
@java.lang.Override public void run() { try { java.io.File output = java.io.File.createTempFile("predex", ".jar"); output.deleteOnExit(); outputFiles[ii] = output; com.android.builder.internal.compiler.PreDexCache.getCache().preDexLibrary(input, output, false, dexOptions, mBuildToolInfo, false, clr); } catch (java.lang.Exception ignored) { } }
public void testRequestUpdateStreamingServices() throws java.lang.Exception { java.util.List<java.lang.String> testClasses = java.util.Arrays.asList("class1", "class2"); mStreamingSession.requestUpdateStreamingServices(testClasses); java.util.List<android.telephony.mbms.StreamingServiceInfo> serviceInfos = ((java.util.List<android.telephony.mbms.StreamingServiceInfo>) (mCallback.waitOnStreamingServicesUpdated().arg1)); assertEquals(((android.telephony.mbms.ServiceInfo) (CtsStreamingService.STREAMING_SERVICE_INFO)), ((android.telephony.mbms.ServiceInfo) (serviceInfos.get(0)))); assertEquals(0, mCallback.getNumErrorCalls()); java.util.List<java.util.List> requestStreamingServicesCalls = getMiddlewareCalls(CtsStreamingService.METHOD_REQUEST_UPDATE_STREAMING_SERVICES); assertEquals(1, requestStreamingServicesCalls.size()); assertEquals(3, requestStreamingServicesCalls.get(0).size()); java.util.List<java.lang.String> middlewareReceivedServiceClasses = ((java.util.List<java.lang.String>) (requestStreamingServicesCalls.get(0).get(2))); assertEquals(testClasses.size(), middlewareReceivedServiceClasses.size()); for (int i = 0; i < (testClasses.size()); i++) { assertEquals(testClasses.get(i), middlewareReceivedServiceClasses.get(i)); } }
public void testWildcardsRejectedForIpAddress() { assertFalse(verifyWithServerCertificate("1.2.3.4", new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate("cn=*.2.3.4"))); assertFalse(verifyWithServerCertificate("1.2.3.4", new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate("cn=*.2.3.4").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_IPA_NAME, "*.2.3.4").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, "*.2.3.4"))); assertFalse(verifyWithServerCertificate("2001:1234::1", new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate("cn=*:1234::1"))); assertFalse(verifyWithServerCertificate("2001:1234::1", new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate("cn=*:1234::1").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_IPA_NAME, "*:1234::1").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, "*:1234::1"))); }
@java.lang.Override public javax.net.ssl.SSLEngineResult.HandshakeStatus getHandshakeStatus() { synchronized(stateLock) { switch (engineState) { case HANDSHAKE_WANTED : if (getUseClientMode()) { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_WRAP; } else { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_UNWRAP; } case HANDSHAKE_STARTED : if ((handshakeSink.available()) > 0) { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_WRAP; } else { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_UNWRAP; } case HANDSHAKE_COMPLETED : if ((handshakeSink.available()) == 0) { handshakeSink = null; engineState = org.conscrypt.OpenSSLEngineImpl.EngineState.READY; return javax.net.ssl.SSLEngineResult.HandshakeStatus.FINISHED; } else { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_WRAP; } case NEW : case MODE_SET : case CLOSED : case READY : case READY_HANDSHAKE_CUT_THROUGH : return javax.net.ssl.SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING; default : break; } throw new java.lang.IllegalStateException(("Unexpected engine state: " + (engineState))); } }
public java.lang.String getHostExecutionFlags() { return java.lang.String.format("-Xnorelocate -Ximage:%s", getHostCoreImagePathNoArch()); }
@java.lang.Override public int getStreamingServices(java.lang.String appName, int subscriptionId, java.util.List<java.lang.String> serviceClasses) throws android.os.RemoteException { return 0; }
public com.android.builder.DefaultBuildType initWith(com.android.builder.DefaultBuildType that) { _initWith(that); setDebuggable(that.isDebuggable()); setJniDebugBuild(that.isJniDebugBuild()); setRenderscriptDebugBuild(that.isRenderscriptDebugBuild()); setRenderscriptOptimLevel(that.getRenderscriptOptimLevel()); setPackageNameSuffix(that.getPackageNameSuffix()); setVersionNameSuffix(that.getVersionNameSuffix()); setRunProguard(that.isRunProguard()); setZipAlign(that.isZipAlign()); setSigningConfig(that.getSigningConfig()); return this; }
public com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutPoint toLayout() { int lx = mCanvas.getHorizontalTransform().inverseTranslate(x); int ly = mCanvas.getVerticalTransform().inverseTranslate(y); return com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutPoint.create(mCanvas, lx, ly); }
public void testDuplicateEntries() throws java.lang.Exception { java.lang.String name1 = "test_file_name1"; java.lang.String name2 = "test_file_name2"; java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream(baos); out.putNextEntry(new java.util.zip.ZipEntry(name2)); out.closeEntry(); out.putNextEntry(new java.util.zip.ZipEntry(name1)); out.closeEntry(); out.close(); byte[] buffer = baos.toByteArray(); libcore.java.util.zip.ZipFileTest.replaceBytes(buffer, name2.getBytes(), name1.getBytes()); java.io.File badZip = createTemporaryZipFile(); libcore.java.util.zip.ZipFileTest.writeBytes(badZip, buffer); try { java.util.zip.ZipFile bad = new java.util.zip.ZipFile(badZip); fail(); } catch (java.util.zip.ZipException expected) { } }
public boolean cancel() { synchronized(lock) { if (cancelled) { return false; } cancelled = true; return scheduled; } }
public void close() { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, "close()"); mMdnsDiscovery.stop(this); if ((mMdnsDiscoveryTimeout) != null) { mMdnsDiscoveryTimeout.cancel(); } mService.getP2pMonitor().stopDiscover(this); mService.getP2pMonitor().stopConnect(this); mListener = null; }
private void checkLdexpFloat2Int2Float2() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -3037899856122973967L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.SIGNED_32, 2, -3037899856122973967L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testLdexpFloat2Int2Float2(inX, out); verifyResultsLdexpFloat2Int2Float2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLdexpFloat2Int2Float2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testLdexpFloat2Int2Float2(inX, out); verifyResultsLdexpFloat2Int2Float2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLdexpFloat2Int2Float2: " + (e.toString()))); } }
public void setCrosshairLocation(int x, int y) { synchronized(this) { crosshairLocation = new com.android.hierarchyviewerlib.models.PixelPerfectModel.Point(x, y); } notifyCrosshairMoved(); }
@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if (((mNm.getEffectsSuppressor()) == null) || (!(mNm.getEffectsSuppressor().equals(MockListener.COMPONENT_NAME)))) { status = PASS; } else { status = FAIL; } } next(); }
public static int throwOnError(int errorFlag) throws android.hardware.camera2.legacy.LegacyExceptionUtils.BufferQueueAbandonedException { if (errorFlag == (android.hardware.camera2.utils.CameraBinderDecorator.NO_ERROR)) { return android.hardware.camera2.utils.CameraBinderDecorator.NO_ERROR; } else if (errorFlag == (-(ENODEV))) { throw new android.hardware.camera2.legacy.LegacyExceptionUtils.BufferQueueAbandonedException(); } if (errorFlag < 0) { throw new java.lang.UnsupportedOperationException(("Unknown error " + errorFlag)); } return errorFlag; }
public org.conscrypt.OpenSSLX509Certificate withDeletedExtension(java.lang.String oid) { org.conscrypt.OpenSSLX509Certificate copy = new org.conscrypt.OpenSSLX509Certificate(org.conscrypt.NativeCrypto.X509_dup(mContext)); org.conscrypt.NativeCrypto.X509_delete_ext(copy.getContext(), oid); return copy; }
@java.lang.Override public java.math.BigInteger getSerialNumber() { return new java.math.BigInteger(org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_get_serialNumber(mContext)); }
@java.lang.Override public boolean satisfiedBy(android.net.NetworkSpecifier other) { return equals(other); }
private void loadSamplesForTarget(com.android.sdklib.IAndroidTarget target) { java.lang.String oldChoice = null; if ((mSamplesPaths.size()) > 0) { int selIndex = mSamplesCombo.getSelectionIndex(); if (selIndex > (-1)) { oldChoice = mSamplesCombo.getItem(selIndex); } } mSamplesCombo.removeAll(); mSamplesPaths.clear(); if (target != null) { java.lang.String samplesRootPath = target.getPath(IAndroidTarget.SAMPLES); java.io.File samplesDir = new java.io.File(samplesRootPath); findSamplesManifests(samplesDir, mSamplesPaths); if ((mSamplesPaths.size()) == 0) { mSamplesCombo.add("This target has no samples. Please select another target."); mSamplesCombo.select(0); return; } else { java.util.Collections.sort(mSamplesPaths); } int selIndex = 0; int i = 0; int n = samplesRootPath.length(); java.util.Set<java.lang.String> paths = new java.util.TreeSet<java.lang.String>(); for (java.lang.String path : mSamplesPaths) { if ((path.length()) > n) { path = path.substring(n); if ((path.charAt(0)) == (java.io.File.separatorChar)) { path = path.substring(1); } if (path.endsWith(java.io.File.separator)) { path = path.substring(0, ((path.length()) - 1)); } path = path.replaceAll(java.util.regex.Pattern.quote(java.io.File.separator), " > "); } if ((oldChoice != null) && (oldChoice.equals(path))) { selIndex = i; } paths.add(path); i++; } mSamplesCombo.setItems(paths.toArray(new java.lang.String[0])); mSamplesCombo.select(selIndex); } else { mSamplesCombo.add("Please select a target."); mSamplesCombo.select(0); } }
@java.lang.Override public boolean forceRefresh() { if (android.text.TextUtils.isEmpty(mServer)) { return false; } if (android.util.NtpTrustedTime.LOGD) android.util.Log.d(android.util.NtpTrustedTime.TAG, "forceRefresh() from cache miss"); final android.net.SntpClient client = new android.net.SntpClient(); if (client.requestTime(mServer, ((int) (mTimeout)))) { mHasCache = true; mCachedNtpTime = client.getNtpTime(); mCachedNtpElapsedRealtime = client.getNtpTimeReference(); mCachedNtpCertainty = (client.getRoundTripTime()) / 2; return true; } else { return false; } }
public void doImport(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.backend.jayce.ImportConflictException, com.android.jack.ir.ast.JPackageLookupException, com.android.jack.ir.ast.JTypeLookupException { for (com.android.jack.library.InputJackLibrary jackLibrary : jackLibraries) { com.android.sched.vfs.InputRootVDir libraryVDir = jackLibrary.getInputVDir(); com.android.jack.backend.jayce.JayceFileImporter.logger.log(java.util.logging.Level.FINE, "Importing {0}", libraryVDir.getLocation().getDescription()); for (com.android.sched.vfs.InputVElement subFile : libraryVDir.list()) { importJayceFile(jackLibrary, subFile, session, ""); } } }
@java.lang.Override public boolean isTestCoverageEnabled() { return testCoverageEnabled; }
private void allowAppsControl() { android.content.Intent allowAppsControlIntent = new android.content.Intent(ByodHelperActivity.ACTION_CLEAR_USER_RESTRICTION); allowAppsControlIntent.putExtra(ByodHelperActivity.EXTRA_PARAMETER_1, UserManager.DISALLOW_APPS_CONTROL); startActivity(allowAppsControlIntent); }
private java.lang.String getSmsFormat() { return getSmsImplementation().getSmsFormat(); }
@java.lang.Override public void requestIsimAuthentication(java.lang.String nonce, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_ISIM_AUTHENTICATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " nonce = ") + nonce)); } try { radioProxy.requestIsimAuthentication(rr.mSerial, convertNullToEmptyString(nonce)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "requestIsimAuthentication", e); } } }
@java.lang.Override public void execute(org.w3c.dom.Element element) { renderClasses(element); }
private void formatInternal(java.lang.String pattern, libcore.util.ZoneInfo.WallTime wallTime, libcore.util.ZoneInfo zoneInfo) { java.nio.CharBuffer formatBuffer = java.nio.CharBuffer.wrap(pattern); while ((formatBuffer.remaining()) > 0) { boolean outputCurrentChar = true; char currentChar = formatBuffer.get(formatBuffer.position()); if (currentChar == '%') { outputCurrentChar = handleToken(formatBuffer, wallTime, zoneInfo); } if (outputCurrentChar) { outputBuilder.append(formatBuffer.get(formatBuffer.position())); } formatBuffer.position(((formatBuffer.position()) + 1)); } }
private static java.util.Locale initDefault(java.util.Locale.Category category) { final java.util.Locale defaultLocale = java.util.Locale.NoImagePreloadHolder.defaultLocale; return java.util.Locale.getInstance(java.lang.System.getProperty(category.languageKey, defaultLocale.getLanguage()), java.lang.System.getProperty(category.scriptKey, defaultLocale.getScript()), java.lang.System.getProperty(category.countryKey, defaultLocale.getCountry()), java.lang.System.getProperty(category.variantKey, defaultLocale.getVariant()), null); }
public void addF64(android.support.v8.renderscript.Double3 v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addF64(new android.renderscript.Double3(v.x, v.y, v.z)); return; } addF64(v.x); addF64(v.y); addF64(v.z); }
private void processNewResourceFile(java.io.File sourceFolder, com.android.ide.common.res2.ResourceFile resourceFile) throws com.android.ide.common.res2.MergingException { if (resourceFile != null) { if (((resourceFile.getType()) == (DataFile.FileType.GENERATED_FILES)) && ((mGeneratedSet) != null)) { mGeneratedSet.processNewDataFile(sourceFolder, resourceFile, true); } else { processNewDataFile(sourceFolder, resourceFile, true); } } }
private void checkLengthFloat4Float() { android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 4404006062516304480L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.forEach_testLengthFloat4Float(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLengthFloat4Float: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLengthFloat4Float(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLengthFloat4Float: " + (e.toString()))); } }
public android.bluetooth.le.AdvertisingSetParameters.Builder setIncludeTxPower(boolean includeTxPower) { mIncludeTxPower = includeTxPower; return this; }
public void test2() throws java.lang.Exception { mEnabled = com.google.common.collect.Sets.newHashSet(PluralsDetector.MISSING, PluralsDetector.EXTRA); assertEquals(("" + ((((((((("res/values-cs/plurals3.xml:3: Error: For locale \"cs\" (Czech) the following quantities should also be defined: few [MissingQuantity]\n" + " <plurals name=\"draft\">\n") + " ^\n") + "res/values-zh-rCN/plurals3.xml:3: Warning: For language \"zh\" (Chinese) the following quantities are not relevant: one [UnusedQuantity]\n") + " <plurals name=\"draft\">\n") + " ^\n") + "res/values-zh-rCN/plurals3.xml:7: Warning: For language \"zh\" (Chinese) the following quantities are not relevant: one [UnusedQuantity]\n") + " <plurals name=\"title_day_dialog_content\">\n") + " ^\n") + "1 errors, 2 warnings\n")), lintProject("res/values-zh-rCN/plurals3.xml", "res/values-cs/plurals3.xml")); }
private void updateDevicePref() { if ((mThisDevice) != null) { if (android.text.TextUtils.isEmpty(mThisDevice.deviceName)) { mThisDevicePref.setTitle(mThisDevice.deviceAddress); } else { mThisDevicePref.setTitle(mThisDevice.deviceName); } mThisDevicePref.setPersistent(false); mThisDevicePref.setEnabled(true); mThisDevicePref.setSelectable(false); } }
@java.lang.Override public android.net.wifi.aware.WifiAwareNetworkSpecifier createFromParcel(android.os.Parcel in) { return new android.net.wifi.aware.WifiAwareNetworkSpecifier(in.readInt(), in.readInt(), in.readInt(), in.readInt(), in.readInt(), in.createByteArray(), in.createByteArray(), in.readString()); }
public void test_handshake_failsWithInvalidSCT() throws java.lang.Exception { org.conscrypt.OpenSSLSocketImplTest.TestConnection connection = new org.conscrypt.OpenSSLSocketImplTest.TestConnection(new java.security.cert.X509Certificate[]{ cert, ca }, certKey, true); connection.clientHooks.ctVerificationEnabled = true; connection.serverHooks.sctTLSExtension = org.conscrypt.TestUtils.readTestFile("ct-signed-timestamp-list-invalid"); try { connection.doHandshake(); fail("SSLHandshakeException not thrown"); } catch (java.util.concurrent.ExecutionException e) { assertEquals(javax.net.ssl.SSLHandshakeException.class, e.getCause().getClass()); assertEquals(java.security.cert.CertificateException.class, e.getCause().getCause().getClass()); } }
public void testPerMill() { java.lang.String pattern = "0\u2030"; double number = 0.1; java.util.Locale locale; locale = java.util.Locale.US; { android.icu.text.DecimalFormat df = new android.icu.text.DecimalFormat(pattern, new android.icu.text.DecimalFormatSymbols(locale)); assertEquals("100\u2030", df.format(number)); } for (java.text.DecimalFormat df : libcore.java.text.DecimalFormatTest.createDecimalFormatInstances(locale, pattern)) { assertEquals("100\u2030", df.format(number)); } java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(locale); dfs.setPerMill(';'); assertEquals("100;", new java.text.DecimalFormat(pattern, dfs).format(number)); locale = new java.util.Locale("ar"); { android.icu.text.DecimalFormat df = new android.icu.text.DecimalFormat(pattern, new android.icu.text.DecimalFormatSymbols(locale)); assertEquals("\u0609", df.getDecimalFormatSymbols().getPerMillString()); assertEquals("\u0661\u0660\u0660\u0609", df.format(number)); } for (java.text.DecimalFormat df : libcore.java.text.DecimalFormatTest.createDecimalFormatInstances(locale, pattern)) { assertEquals('\u0609', df.getDecimalFormatSymbols().getPerMill()); assertEquals("\u0661\u0660\u0660\u0609", df.format(number)); } locale = new java.util.Locale("en_US_POSIX"); { android.icu.text.DecimalFormat df = new android.icu.text.DecimalFormat(pattern, new android.icu.text.DecimalFormatSymbols(locale)); assertEquals("0/00", df.getDecimalFormatSymbols().getPerMillString()); assertEquals("1000/00", df.format(number)); } for (java.text.DecimalFormat df : libcore.java.text.DecimalFormatTest.createDecimalFormatInstances(locale, pattern)) { assertEquals('\u2030', df.getDecimalFormatSymbols().getPerMill()); assertEquals("100\u2030", df.format(number)); } }
@java.lang.Override public synchronized void close() throws com.android.jack.library.LibraryIOException { if (!(closed)) { if ((linkedOutputJackLib) != null) { linkedOutputJackLib.notifyToClose(); } else if (!(originalVFS.isClosed())) { try { for (com.android.sched.vfs.InputVFS currentSectionVFS : sectionVFS.values()) { currentSectionVFS.close(); } vfs.close(); } catch (java.io.IOException e) { throw new com.android.jack.library.LibraryIOException(getLocation(), e); } } closed = true; } }
@com.android.annotations.Nullable private com.android.builder.model.AndroidProject execute(@com.android.annotations.NonNull java.util.List<java.lang.String> arguments, @com.android.annotations.Nullable java.io.OutputStream stdout, boolean returnModel, @com.android.annotations.NonNull java.lang.String... tasks) { org.gradle.tooling.ProjectConnection connection = getProjectConnection(); try { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add("-i"); args.add("-u"); args.addAll(arguments); connection.newBuild().forTasks(tasks).setStandardOutput(stdout).withArguments(args.toArray(new java.lang.String[args.size()])).run(); if (returnModel) { return connection.getModel(com.android.builder.model.AndroidProject.class); } } finally { connection.close(); } return null; }
@java.lang.Override protected void _initWith(@com.android.annotations.NonNull com.android.builder.model.BaseConfig that) { super._initWith(that); com.android.build.gradle.internal.dsl.BuildType thatBuildType = ((com.android.build.gradle.internal.dsl.BuildType) (that)); shrinkResources = thatBuildType.isShrinkResources(); useJack = thatBuildType.getUseJack(); }
public void setAlpnProtocols(byte[][] protocols) { this.mAlpnProtocols = android.net.SSLCertificateSocketFactory.toLengthPrefixedList(protocols); }
public void test_setAll$T() { java.lang.String[] strings = new java.lang.String[3]; strings[0] = "a"; strings[0] = "b"; strings[0] = "c"; java.util.Arrays.setAll(strings, ( x) -> "a" + x); assertEquals("a0", strings[0]); assertEquals("a1", strings[1]); assertEquals("a2", strings[2]); try { java.util.Arrays.setAll(strings, null); fail(); } catch (java.lang.NullPointerException e) { } try { java.util.Arrays.setAll(((java.lang.String[]) (null)), ( x) -> "a" + x); fail(); } catch (java.lang.NullPointerException e) { } }
@java.lang.SuppressWarnings("unchecked") private void initClientModuleCombo() { final java.lang.Module[] modules = com.intellij.openapi.module.ModuleManager.getInstance(myProject).getModules(); for (java.lang.Module module : modules) { final org.jetbrains.android.facet.AndroidFacet facet = org.jetbrains.android.facet.AndroidFacet.getInstance(module); if ((facet != null) && ((com.intellij.openapi.roots.ModuleRootManager.getInstance(module).getContentRoots().length) > 0)) { java.lang.String moduleNameLabel = module.getName(); if ((facet.getManifest()) != null) { final java.lang.String packageName = facet.getManifest().getPackage().getValue(); if (!(com.google.common.base.Strings.isNullOrEmpty(packageName))) { moduleNameLabel += java.lang.String.format(" (%s)", packageName); } } myClientModuleCombo.addItem(new com.android.tools.idea.ui.ComboBoxItemWithApiTag(module.getName(), moduleNameLabel, 1, 1)); } } }
public void broadcastWpsTimeoutEvent(java.lang.String iface) { sendMessage(iface, com.android.server.wifi.WifiMonitor.WPS_TIMEOUT_EVENT); }
public void addBuildType(@com.android.annotations.NonNull com.android.build.gradle.internal.dsl.CoreBuildType buildType) { java.lang.String name = buildType.getName(); com.android.build.gradle.internal.VariantManager.checkName(name, "BuildType"); if (productFlavors.containsKey(name)) { throw new java.lang.RuntimeException("BuildType names cannot collide with ProductFlavor names"); } com.android.build.gradle.internal.api.DefaultAndroidSourceSet mainSourceSet = ((com.android.build.gradle.internal.api.DefaultAndroidSourceSet) (extension.getSourceSets().maybeCreate(name))); com.android.build.gradle.internal.api.DefaultAndroidSourceSet unitTestSourceSet = null; if (variantFactory.hasTestScope()) { unitTestSourceSet = ((com.android.build.gradle.internal.api.DefaultAndroidSourceSet) (extension.getSourceSets().maybeCreate(com.android.build.gradle.internal.VariantManager.computeSourceSetName(buildType.getName(), com.android.builder.core.VariantType.UNIT_TEST)))); } com.android.build.gradle.internal.BuildTypeData buildTypeData = new com.android.build.gradle.internal.BuildTypeData(buildType, project, mainSourceSet, unitTestSourceSet); buildTypes.put(name, buildTypeData); }
public int availableProcessors() { return ((int) (Libcore.os.sysconf(android.system.OsConstants._SC_NPROCESSORS_CONF))); }
private java.lang.String createAvcContext(java.lang.String domain, boolean target, java.lang.String obj_class, java.lang.String perm) { java.lang.String usr = "u"; java.lang.String role; if ((obj_class.equals("filesystem")) && (perm.equals("associate"))) { role = "object_r"; } else if ((obj_class.equals("process")) || (obj_class.endsWith("socket"))) { role = "r"; } else if (target) { role = "object_r"; } else { role = "r"; } return java.lang.String.format("%s:%s:%s:s0", usr, role, domain); }
public static android.system.StructTimeval fromMillis(long millis) { long tv_sec = millis / 1000; long tv_usec = (millis - (tv_sec * 1000)) * 1000; return new android.system.StructTimeval(tv_sec, tv_usec); }
public org.eclipse.core.runtime.IPath findResourceFile(java.lang.String url) { if (!(url.startsWith("@"))) { return null; } int typeEnd = url.indexOf('/', 1); if (typeEnd == (-1)) { return null; } int nameBegin = typeEnd + 1; int typeBegin = 1; int colon = url.lastIndexOf(':', typeEnd); boolean isFrameworkResource = false; if (colon != (-1)) { java.lang.String packageName = url.substring(typeBegin, colon); if ("android".equals(packageName)) { isFrameworkResource = true; } typeBegin = colon + 1; } java.lang.String typeName = url.substring(typeBegin, typeEnd); com.android.ide.eclipse.adt.internal.resources.ResourceType type = com.android.ide.eclipse.adt.internal.resources.ResourceType.getEnum(typeName); if (type == null) { return null; } java.lang.String name = url.substring(nameBegin); return findResourceFile(type, name, isFrameworkResource); }
@com.android.annotations.NonNull @java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getTestInstrumentationRunnerArguments() { return com.google.common.collect.Maps.newHashMap(); }
@org.junit.Test @com.android.jack.test.junit.KnownIssue(candidate = com.android.jack.test.toolchain.IncrementalToolchain.class) public void test002f() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackOutput = runTest002(true, "keep-first", errOut, false, false); com.android.jack.library.InputJackLibrary lib = null; try { lib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibrary(jackOutput); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE1_PATH, "Res1"); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE2_PATH, "Res2"); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE3_PATH, "Res3"); } finally { if (lib != null) { lib.close(); } } junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); }
public void testServerSocketChannel() throws java.lang.Exception { java.nio.channels.ServerSocketChannel ssc = java.nio.channels.ServerSocketChannel.open(); ssc.bind(null); assertEquals(1, tagger.getLiveDescriptors().size()); ssc.close(); assertEquals(java.util.Collections.EMPTY_MAP, tagger.getLiveDescriptors()); }
@javax.annotation.Nonnull private com.android.jack.test.toolchain.AndroidToolchain createReferenceToolchain() { com.android.jack.test.toolchain.AndroidToolchain referenceTestTools = com.android.jack.test.toolchain.AbstractTestTools.getReferenceToolchain(com.android.jack.test.toolchain.AndroidToolchain.class); referenceTestTools.setSourceLevel(level); referenceTestTools.setWithDebugInfos(withDebugInfos); if ((!(runtimeProperties.isEmpty())) && (referenceTestTools instanceof com.android.jack.test.toolchain.JackBasedToolchain)) { com.android.jack.test.toolchain.JackBasedToolchain jackBasedToolchain = ((com.android.jack.test.toolchain.JackBasedToolchain) (referenceTestTools)); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : runtimeProperties.entrySet()) { jackBasedToolchain.addProperty(entry.getKey(), entry.getValue()); } } return referenceTestTools; }
@org.junit.Test public void testNamePatternClass() { com.android.jack.shrob.spec.NameSpecification spec = com.android.jack.shrob.proguard.GrammarActions.name("a.b.*.d", FilterSeparator.CLASS); junit.framework.Assert.assertTrue(spec.matches("a.b.c.d")); junit.framework.Assert.assertFalse(spec.matches("a.b.c.e.d")); junit.framework.Assert.assertTrue(spec.matches("a.b.c/e.d")); spec = com.android.jack.shrob.proguard.GrammarActions.name("a.b.**.d", FilterSeparator.CLASS); junit.framework.Assert.assertTrue(spec.matches("a.b.c.d")); junit.framework.Assert.assertTrue(spec.matches("a.b.c.e.d")); spec = com.android.jack.shrob.proguard.GrammarActions.name("a.b.?.d", FilterSeparator.CLASS); junit.framework.Assert.assertTrue(spec.matches("a.b.c.d")); junit.framework.Assert.assertFalse(spec.matches("a.b.ce.d")); junit.framework.Assert.assertFalse(spec.matches("a.b...d")); junit.framework.Assert.assertTrue(spec.matches("a.b./.d")); }
private void addListeners(java.util.List<org.junit.runner.notification.RunListener> listeners, org.junit.runner.JUnitCore testRunner, java.io.PrintStream writer) { if (getBooleanArgument(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_SUITE_ASSIGNMENT)) { addListener(listeners, testRunner, new com.android.test.runner.listener.SuiteAssignmentPrinter(writer)); } else { addListener(listeners, testRunner, new org.junit.internal.TextListener(writer)); addListener(listeners, testRunner, new com.android.test.runner.listener.InstrumentationResultPrinter(this)); addDelayListener(listeners, testRunner); addCoverageListener(listeners, testRunner); } addExtraListeners(listeners, testRunner, writer); }
@java.lang.Override public boolean processMessage(android.os.Message msg) { log(("DeliveringState.processMessage:" + (msg.what))); switch (msg.what) { case com.android.internal.telephony.InboundSmsHandler.EVENT_NEW_SMS : handleNewSms(((android.os.AsyncResult) (msg.obj))); sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_INJECT_SMS : handleInjectSms(((android.os.AsyncResult) (msg.obj))); sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_SMS : com.android.internal.telephony.InboundSmsTracker inboundSmsTracker = ((com.android.internal.telephony.InboundSmsTracker) (msg.obj)); if (processMessagePart(inboundSmsTracker)) { transitionTo(mWaitingState); } else { log(("No broadcast sent on processing EVENT_BROADCAST_SMS in Delivering " + "state. Return to Idle state")); sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); } return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE : transitionTo(mIdleState); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_RELEASE_WAKELOCK : mWakeLock.release(); if (!(mWakeLock.isHeld())) { loge("mWakeLock released while delivering/broadcasting!"); } return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_COMPLETE : case com.android.internal.telephony.InboundSmsHandler.EVENT_START_ACCEPTING_SMS : default : return NOT_HANDLED; } }
public void test_SSLEngine_getSupportedCipherSuites_returnsCopies() throws java.lang.Exception { libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); javax.net.ssl.SSLEngine e = c.clientContext.createSSLEngine(); assertNotSame(e.getSupportedCipherSuites(), e.getSupportedCipherSuites()); c.close(); }
public boolean cancelBondProcess(android.bluetooth.BluetoothDevice device) { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, "cancelBondProcess() - Not allowed for non-active user"); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.cancelBondProcess(device); }
public static libcore.icu.LocaleData get(java.util.Locale locale) { final java.lang.String languageTag = locale.toLanguageTag(); synchronized(libcore.icu.LocaleData.localeDataCache) { libcore.icu.LocaleData localeData = libcore.icu.LocaleData.localeDataCache.get(languageTag); if (localeData != null) { return localeData; } } libcore.icu.LocaleData newLocaleData = libcore.icu.LocaleData.initLocaleData(locale); synchronized(libcore.icu.LocaleData.localeDataCache) { libcore.icu.LocaleData localeData = libcore.icu.LocaleData.localeDataCache.get(languageTag); if (localeData != null) { return localeData; } libcore.icu.LocaleData.localeDataCache.put(languageTag, newLocaleData); return newLocaleData; } }
public static long mmap(long address, long byteCount, int prot, int flags, java.io.FileDescriptor fd, long offset) throws android.system.ErrnoException { return Libcore.os.mmap(address, byteCount, prot, flags, fd, offset); }
private boolean checkListenerPermission(int events, java.lang.String callingPackage, java.lang.String message) { if ((events & (com.android.server.TelephonyRegistry.ENFORCE_COARSE_LOCATION_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); if ((mAppOps.noteOp(AppOpsManager.OP_COARSE_LOCATION, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return false; } } if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK)) != 0) { if (!(com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState(mContext, callingPackage, message))) { return false; } } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRECISE_PHONE_STATE, null); } return true; }
public java.lang.String toSafeString() { java.lang.String scheme = getScheme(); java.lang.String ssp = getSchemeSpecificPart(); if (scheme != null) { if (((((scheme.equalsIgnoreCase("tel")) || (scheme.equalsIgnoreCase("sip"))) || (scheme.equalsIgnoreCase("sms"))) || (scheme.equalsIgnoreCase("smsto"))) || (scheme.equalsIgnoreCase("mailto"))) { java.lang.StringBuilder builder = new java.lang.StringBuilder(64); builder.append(scheme); builder.append(':'); if (ssp != null) { for (int i = 0; i < (ssp.length()); i++) { char c = ssp.charAt(i); if (((c == '-') || (c == '@')) || (c == '.')) { builder.append(c); } else { builder.append('x'); } } } return builder.toString(); } else if (((scheme.equalsIgnoreCase("http")) || (scheme.equalsIgnoreCase("https"))) || (scheme.equalsIgnoreCase("ftp"))) { ssp = (("//" + ((getHost()) != null ? getHost() : "")) + ((getPort()) != (-1) ? ":" + (getPort()) : "")) + "/..."; } } java.lang.StringBuilder builder = new java.lang.StringBuilder(64); if (scheme != null) { builder.append(scheme); builder.append(':'); } if (ssp != null) { builder.append(ssp); } return builder.toString(); }
private void addSafely(java.lang.Object obj) { boolean retry; final int oldPos = mPos; do { retry = false; try { add(obj); } catch (java.lang.ArrayIndexOutOfBoundsException e) { mPos = oldPos; resize(((mLen) * 2)); retry = true; } } while (retry ); }
public static com.android.hierarchyviewerlib.models.ViewNode parseViewHierarchy(java.io.BufferedReader in, com.android.hierarchyviewerlib.models.Window window) { com.android.hierarchyviewerlib.models.ViewNode currentNode = null; int currentDepth = -1; java.lang.String line; try { while ((line = in.readLine()) != null) { if ("DONE.".equalsIgnoreCase(line)) { break; } int depth = 0; while ((line.charAt(depth)) == ' ') { depth++; } while (depth <= currentDepth) { if (currentNode != null) { currentNode = currentNode.parent; } currentDepth--; } currentNode = new com.android.hierarchyviewerlib.models.ViewNode(window, currentNode, line.substring(depth)); currentDepth = depth; } } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DeviceBridge.TAG, ("Error reading view hierarchy stream: " + (e.getMessage()))); return null; } if (currentNode == null) { return null; } while ((currentNode.parent) != null) { currentNode = currentNode.parent; } return currentNode; }
@java.lang.Override public void run() { java.lang.String label = java.lang.String.format("Change attribute %1$s", actions.get(0).getTitle()); if ((actions.size()) > 1) { label += java.lang.String.format(" (%1$d elements)", actions.size()); } if (mEditor.isEditXmlModelPending()) { logError("Action '%1$s' failed: XML changes pending, document might be corrupt.", label); return; } mEditor.wrapUndoEditXmlModel(label, new java.lang.Runnable() { public void run() { for (com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction a2 : actions) { if (a2 instanceof com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) { try { ((com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) (a2)).getCallback().action(a2, key, (!isChecked)); } catch (java.lang.Exception e) { com.android.ide.eclipse.adt.internal.editors.layout.gre.RulesEngine gre = mCanvas.getRulesEngine(); gre.logError("XML edit operation failed: %s", e.toString()); } } } } }); }
@java.lang.Override public void deflectCall(java.lang.String callId, android.net.Uri address) { try { android.telecom.Log.startSession(LogUtils.Sessions.ICA_DEFLECT_CALL, mOwnerComponentName); long token = android.os.Binder.clearCallingIdentity(); try { synchronized(mLock) { android.telecom.Log.i(this, "deflectCall - %s, %s ", callId, android.telecom.Log.pii(address)); com.android.server.telecom.Call call = mCallIdMapper.getCall(callId); if (call != null) { mCallsManager.deflectCall(call, address); } else { android.telecom.Log.w(this, "deflectCall, unknown call id: %s", callId); } } } finally { android.os.Binder.restoreCallingIdentity(token); } } finally { android.telecom.Log.endSession(); } }
com.android.ide.eclipse.adt.internal.sdk.LayoutDevice getSelectedDevice() { return ((com.android.ide.eclipse.adt.internal.sdk.LayoutDevice) (mDeviceCombo.getData())); }
public android.bluetooth.le.AdvertisingSetParameters.Builder setPrimaryPhy(int primaryPhy) { if ((primaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_1M)) && (primaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_CODED))) { throw new java.lang.IllegalArgumentException(("bad primaryPhy " + primaryPhy)); } mPrimaryPhy = primaryPhy; return this; }
static final java.lang.String getMediaDirString() { android.os.Bundle bundle = android.support.test.InstrumentationRegistry.getArguments(); java.lang.String mediaDirString = bundle.getString(android.mediastress.cts.WorkDir.MEDIA_PATH_INSTR_ARG_KEY); if (mediaDirString != null) { return mediaDirString + (mediaDirString.endsWith("/") ? "" : "/"); } else { return (android.mediastress.cts.WorkDir.getTopDirString()) + "test/"; } }
public void test_joinGroupLjava_net_SocketAddressLjava_net_NetworkInterface_IPv6() throws java.lang.Exception { test_joinGroupLjava_net_SocketAddressLjava_net_NetworkInterface(ipv6NetworkInterface, org.apache.harmony.tests.java.net.MulticastSocketTest.GOOD_IPv6, org.apache.harmony.tests.java.net.MulticastSocketTest.BAD_IPv6); }
@com.googlecode.android_scripting.rpc.Rpc(description = "Return current WFC Mode if Enabled.") public java.lang.String imsGetWfcMode() { if (!(mImsManager.isWfcEnabledByUserForSlot())) { return TelephonyConstants.WFC_MODE_DISABLED; } return com.googlecode.android_scripting.facade.telephony.TelephonyUtils.getWfcModeString(mImsManager.getWfcModeForSlot()); }
private void startSocketListener() { if (com.android.bluetooth.opp.BluetoothOppService.D) android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, "start Socket Listeners"); stopListeners(); mServerSocket = com.android.bluetooth.ObexServerSockets.createInsecure(this); com.android.bluetooth.sdp.SdpManager sdpManager = com.android.bluetooth.sdp.SdpManager.getDefaultManager(); if ((sdpManager == null) || ((mServerSocket) == null)) { android.util.Log.e(com.android.bluetooth.opp.BluetoothOppService.TAG, ((("ERROR:serversocket object is NULL sdp manager :" + sdpManager) + " mServerSocket:") + (mServerSocket))); return; } sdpManager.createOppOpsRecord("OBEX Object Push", mServerSocket.getRfcommChannel(), mServerSocket.getL2capPsm(), 258, com.android.bluetooth.opp.BluetoothOppService.SUPPORTED_OPP_FORMAT); }
public void force(boolean metadata) throws java.io.IOException { checkOpen(); if (((mode) & (O_ACCMODE)) != (O_RDONLY)) { try { if (metadata) { Libcore.os.fsync(fd); } else { Libcore.os.fdatasync(fd); } } catch (android.system.ErrnoException errnoException) { throw errnoException.rethrowAsIOException(); } } }
@android.support.annotation.VisibleForTesting public boolean connectAudio(android.bluetooth.BluetoothDevice device) { return connectAudioNative(com.android.bluetooth.Utils.getByteAddress(device)); }
@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface create(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader classOrInterfaceLoader);
private static org.json.JSONObject buildLinkProperties(android.net.LinkProperties data) throws org.json.JSONException { org.json.JSONObject info = new org.json.JSONObject(); info.put("InterfaceName", data.getInterfaceName()); info.put("LinkAddresses", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getLinkAddresses())); info.put("DnsServers", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getDnsServers())); info.put("Domains", data.getDomains()); info.put("Mtu", data.getMtu()); info.put("Routes", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getRoutes())); info.put("IsPrivateDnsActive", data.isPrivateDnsActive()); info.put("PrivateDnsServerName", data.getPrivateDnsServerName()); info.put("ValidatedPrivateDnsServers", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getValidatedPrivateDnsServers())); return info; }
@com.android.annotations.NonNull java.util.Collection<java.io.File> getCompileLibraries();
@android.annotation.Nullable public android.telephony.VoiceSpecificRegistrationStates getVoiceSpecificStates() { return mVoiceSpecificStates; }
private void checkModfFloatFloatFloat() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 4613585216829330652L); try { android.renderscript.Allocation outIret = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.set_gAllocOutIret(outIret); script.forEach_testModfFloatFloatFloat(inX, out); verifyResultsModfFloatFloatFloat(inX, outIret, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testModfFloatFloatFloat: " + (e.toString()))); } try { android.renderscript.Allocation outIret = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocOutIret(outIret); scriptRelaxed.forEach_testModfFloatFloatFloat(inX, out); verifyResultsModfFloatFloatFloat(inX, outIret, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testModfFloatFloatFloat: " + (e.toString()))); } }
public long beforeHandshake(long context) throws javax.net.ssl.SSLException { long s = org.conscrypt.NativeCrypto.SSL_new(context); java.util.List<java.lang.String> cipherSuites = new java.util.ArrayList<java.lang.String>(); if ((enabledCipherSuites) == null) { cipherSuites.add("ECDHE-RSA-AES128-SHA"); if (pskEnabled) { cipherSuites.add(0, "PSK-AES128-CBC-SHA"); } } else { cipherSuites.addAll(enabledCipherSuites); } org.conscrypt.NativeCrypto.SSL_set_cipher_lists(s, cipherSuites.toArray(new java.lang.String[cipherSuites.size()])); if ((channelIdPrivateKey) != null) { org.conscrypt.NativeCrypto.SSL_set1_tls_channel_id(s, channelIdPrivateKey.getNativeRef()); } return s; }
void removeConfig(java.lang.String name) { synchronized(mConfigs) { for (com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig config : mConfigs) { if (config.getName().equals(name)) { mConfigs.remove(config); seal(); return; } } } }
@java.lang.Override public java.lang.String serialize() { float duration = (timeMs) / 1000.0F; java.lang.String pydict = com.android.monkeyrunner.recorder.actions.PyDictUtilBuilder.newBuilder().addTuple("start", startx, starty).addTuple("end", endx, endy).add("duration", duration).add("steps", steps).build(); return "DRAG|" + pydict; }
@java.lang.Override protected java.lang.String getServiceInterface() { return android.telephony.ims.compat.ImsService.SERVICE_INTERFACE; }
public static javax.net.ssl.X509ExtendedTrustManager getDefaultX509TrustManager() throws java.security.KeyManagementException { javax.net.ssl.X509ExtendedTrustManager result = org.conscrypt.SSLParametersImpl.defaultX509TrustManager; if (result == null) { org.conscrypt.SSLParametersImpl.defaultX509TrustManager = result = org.conscrypt.SSLParametersImpl.createDefaultX509TrustManager(); } return result; }
public long getGpsDateTime() { java.lang.String date = mAttributes.get(android.media.ExifInterface.TAG_GPS_DATESTAMP); java.lang.String time = mAttributes.get(android.media.ExifInterface.TAG_GPS_TIMESTAMP); if (((date == null) || (time == null)) || ((!(android.media.ExifInterface.sNonZeroTimePattern.matcher(date).matches())) && (!(android.media.ExifInterface.sNonZeroTimePattern.matcher(time).matches())))) return -1; java.lang.String dateTimeString = (date + ' ') + time; java.text.ParsePosition pos = new java.text.ParsePosition(0); try { java.util.Date datetime = android.media.ExifInterface.sFormatter.parse(dateTimeString, pos); if (datetime == null) return -1; return datetime.getTime(); } catch (java.lang.IllegalArgumentException ex) { return -1; } }
@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.CstInsn)) { return false; } com.android.dx.dex.code.CstInsn ci = ((com.android.dx.dex.code.CstInsn) (insn)); int cpi = ci.getIndex(); if (!(unsignedFitsInShort(cpi))) { return false; } com.android.dx.rop.cst.Constant cst = ci.getConstant(); if (!(((cst instanceof com.android.dx.rop.cst.CstMethodRef) || (cst instanceof com.android.dx.rop.cst.CstType)) || (cst instanceof com.android.dx.rop.cst.CstCallSiteRef))) { return false; } com.android.dx.rop.code.RegisterSpecList regs = ci.getRegisters(); return (com.android.dx.dex.code.form.Form35c.wordCount(regs)) >= 0; }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); reset(mContext); mServiceContext = new android.net.util.VersionedBroadcastListenerTest.MockContext(mContext); mHandler = new android.os.Handler(android.os.Looper.myLooper()); mCallbackCount = 0; final android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(android.net.util.VersionedBroadcastListenerTest.ACTION_TEST); mListener = new android.net.util.VersionedBroadcastListener(android.net.util.VersionedBroadcastListenerTest.TAG, mServiceContext, mHandler, filter, (android.content.Intent intent) -> doCallback()); }
public void testAesGcm128Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }
private static void addIds(org.w3c.dom.Node node, java.util.Set<java.lang.String> ids) { if ((node.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) { org.w3c.dom.Element element = ((org.w3c.dom.Element) (node)); java.lang.String id = element.getAttributeNS(com.android.ide.eclipse.adt.internal.editors.layout.gre.ANDROID_URI, com.android.ide.eclipse.adt.internal.editors.layout.gre.ATTR_ID); if ((id != null) && (id.startsWith(com.android.ide.eclipse.adt.internal.editors.layout.gre.NEW_ID_PREFIX))) { ids.add(com.android.ide.common.layout.BaseViewRule.stripIdPrefix(id)); } } org.w3c.dom.NodeList children = node.getChildNodes(); for (int i = 0, n = children.getLength(); i < n; i++) { org.w3c.dom.Node child = children.item(i); com.android.ide.eclipse.adt.internal.editors.layout.gre.ClientRulesEngine.addIds(child, ids); } }
boolean addSavedPrinter(com.android.bips.discovery.DiscoveredPrinter printer) { android.net.Uri printerUri = printer.getUri(); com.android.bips.discovery.DiscoveredPrinter old = find(printerUri); if (old != null) { if (printer.equals(old)) { return false; } mSavedPrinters.remove(old); } mSavedPrinters.add(0, printer); save(); return true; }
@java.lang.Override public void sendSMSExpectMore(java.lang.String smscPdu, java.lang.String pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SEND_SMS_EXPECT_MORE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.GsmSmsMessage msg = constructGsmSendSmsRilRequest(smscPdu, pdu); try { radioProxy.sendSMSExpectMore(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_GSM, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendSMSExpectMore", e); } } }
@org.junit.Test public void matchDomainWhenSecondaryIsSubdomainOfPrimary() throws java.lang.Exception { com.android.server.wifi.hotspot2.DomainMatcher domainMatcher = new com.android.server.wifi.hotspot2.DomainMatcher("google.com", java.util.Arrays.asList("test.google.com")); assertEquals(DomainMatcher.MATCH_PRIMARY, domainMatcher.isSubDomain("google.com")); assertEquals(DomainMatcher.MATCH_PRIMARY, domainMatcher.isSubDomain("test.google.com")); assertEquals(DomainMatcher.MATCH_PRIMARY, domainMatcher.isSubDomain("abcd.test.google.com")); }
public android.os.ParcelFileDescriptor getInCallToCsRttPipeForCs() { return (mInCallToConnectionServiceStreams) == null ? null : mInCallToConnectionServiceStreams[com.android.server.telecom.Call.RTT_PIPE_READ_SIDE_INDEX]; }
@java.lang.Override public void exit() { log(((("Exit Connecting(" + (mDevice)) + "): ") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTING; removeMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT_TIMEOUT); }
public long getRetainedSize(com.android.ahat.heapdump.AhatHeap heap) { int index = heap.getIndex(); return (0 <= index) && (index < (mRetainedSizes.length)) ? mRetainedSizes[heap.getIndex()] : 0; }
public static void init(android.preference.PreferenceScreen prefScreen, com.android.phone.SubscriptionInfoHelper subInfoHelper) { android.preference.Preference callForwardingPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_FORWARDING_KEY); callForwardingPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallForwardOptions.class)); android.preference.Preference additionalGsmSettingsPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.ADDITIONAL_GSM_SETTINGS_KEY); additionalGsmSettingsPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsAdditionalCallOptions.class)); android.preference.Preference callBarringPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_BARRING_KEY); android.os.PersistableBundle b = null; if (subInfoHelper.hasSubId()) { b = com.android.phone.PhoneGlobals.getInstance().getCarrierConfigForSubId(subInfoHelper.getSubId()); } else { b = com.android.phone.PhoneGlobals.getInstance().getCarrierConfig(); } if ((b != null) && (b.getBoolean(CarrierConfigManager.KEY_CALL_BARRING_VISIBILITY_BOOL))) { callBarringPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallBarringOptions.class)); } else { prefScreen.removePreference(callBarringPref); } }
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testDontBindWhenNullCarrierPackage() throws android.os.RemoteException { setupResolver(1); java.util.List<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(getResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(any(), anyInt(), anyInt())).thenReturn(info); com.android.internal.telephony.ims.ImsServiceController controller = mock(com.android.internal.telephony.ims.ImsServiceController.class); mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceInterface() { return android.telephony.ims.ImsService.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks) { when(controller.getComponentName()).thenReturn(componentName); return controller; } }); setConfigCarrierString(0, null); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_TIMEOUT); verify(controller, never()).bind(any()); verify(controller, never()).unbind(); }
public void testCreateAvdWithSnapshot() { mAvdManager.createAvd(mAvdFolder, this.getName(), mTarget, null, null, null, false, true, mLog); assertEquals((("[P Created AVD '" + (this.getName())) + "\' based on Android 0.0\n]"), mLog.toString()); assertTrue(("Expected snapshots.img in " + (mAvdFolder)), new java.io.File(mAvdFolder, "snapshots.img").exists()); java.util.Map<java.lang.String, java.lang.String> map = com.android.sdklib.internal.project.ProjectProperties.parsePropertyFile(new com.android.sdklib.io.FileWrapper(mAvdFolder, "config.ini"), mLog); assertEquals("true", map.get("snapshot.present")); }
public void test2_0SetEnabledGetEnabled() throws java.lang.Exception { if (!(isBassBoostAvailable())) { return; } getBassBoost(getSessionId()); try { mBassBoost.setEnabled(true); assertTrue("invalid state from getEnabled", mBassBoost.getEnabled()); mBassBoost.setEnabled(false); assertFalse("invalid state to getEnabled", mBassBoost.getEnabled()); } catch (java.lang.IllegalStateException e) { fail("setEnabled() in wrong state"); } finally { releaseBassBoost(); } }
@java.lang.Override public void factoryReset(int subId) { enforceConnectivityInternalPermission(); if (mUserManager.hasUserRestriction(UserManager.DISALLOW_NETWORK_RESET)) { return; } final long identity = android.os.Binder.clearCallingIdentity(); try { if ((android.telephony.SubscriptionManager.isUsableSubIdValue(subId)) && (!(mUserManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS)))) { setUserDataEnabled(subId, true); setNetworkSelectionModeAutomatic(subId); java.lang.String defaultNetwork = android.telephony.TelephonyManager.getTelephonyProperty(mSubscriptionController.getPhoneId(subId), "ro.telephony.default_network", null); int networkType = (!(android.text.TextUtils.isEmpty(defaultNetwork))) ? java.lang.Integer.parseInt(defaultNetwork) : com.android.internal.telephony.Phone.PREFERRED_NT_MODE; setPreferredNetworkType(subId, networkType); mPhone.setDataRoamingEnabled(false); } } finally { android.os.Binder.restoreCallingIdentity(identity); } }
private java.util.Map<com.android.tools.perflib.heap.Instance, java.lang.Integer> buildTopologicalSort() { java.util.Map<com.android.tools.perflib.heap.Instance, java.lang.Integer> result = com.google.common.collect.Maps.newLinkedHashMap(); int currentIndex = 0; for (com.android.tools.perflib.heap.Instance node : com.google.common.collect.Lists.reverse(mPostorder)) { result.put(node, (++currentIndex)); } return result; }
public void disableProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().disableProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.euicc.IDisableProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { executor.execute(() -> callback.onComplete(resultCode, null)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling disableProfile", e); throw e.rethrowFromSystemServer(); } }
void stop() { if (com.android.bluetooth.mapclient.MnsService.VDBG) android.util.Log.v(com.android.bluetooth.mapclient.MnsService.TAG, "stop()"); mShutdown = true; cleanUpSdpRecord(); if ((com.android.bluetooth.mapclient.MnsService.sServerSockets) != null) { com.android.bluetooth.mapclient.MnsService.sServerSockets.shutdown(false); com.android.bluetooth.mapclient.MnsService.sServerSockets = null; } }
@java.lang.Override public void untag(java.io.FileDescriptor socketDescriptor) throws java.net.SocketException { libcore.dalvik.system.SocketTaggingTest.StatAndDescriptor existing = liveDescriptors.remove(socketDescriptor.getInt$()); android.system.StructStat current = libcore.dalvik.system.SocketTaggingTest.fstat(socketDescriptor); assertEquals(existing.stat.st_dev, current.st_dev); assertEquals(existing.stat.st_ino, current.st_ino); }
@com.android.annotations.NonNull public java.util.Collection<com.android.builder.dependency.JarDependency> getExternalJarDependencies() { return mExternalJars; }
public void testGetSimCountryIso() { android.content.pm.PackageManager packageManager = getContext().getPackageManager(); java.lang.String countryCode = mTelephonyManager.getSimCountryIso(); if (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEPHONY)) { assertTrue(((("Country code '" + countryCode) + "' did not match ") + (android.telephony.cts.TelephonyManagerTest.ISO_COUNTRY_CODE_PATTERN)), java.util.regex.Pattern.matches(android.telephony.cts.TelephonyManagerTest.ISO_COUNTRY_CODE_PATTERN, countryCode)); } else { assertEquals("", countryCode); } }
private void generateMethodMain(org.objectweb.asm.ClassVisitor cv) { org.objectweb.asm.MethodVisitor mv = cv.visitMethod(((org.objectweb.asm.Opcodes.ACC_PUBLIC) + (org.objectweb.asm.Opcodes.ACC_STATIC)), "main", "([Ljava/lang/String;)V", null, null); java.lang.String internalName = org.objectweb.asm.Type.getInternalName(constmethodhandle.ConstTest.class); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, "test1", "()Ljava/lang/invoke/MethodHandle;", false); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, "displayMethodHandle", "(Ljava/lang/invoke/MethodHandle;)V", false); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, "test2", "()Ljava/lang/invoke/MethodType;", false); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, "displayMethodType", "(Ljava/lang/invoke/MethodType;)V", false); mv.visitInsn(Opcodes.RETURN); mv.visitMaxs((-1), (-1)); }
@java.lang.Override public void onCharacteristicWrite(android.bluetooth.BluetoothGatt gatt, android.bluetooth.BluetoothGattCharacteristic characteristic, int status) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, ("onCharacteristicWrite: " + status)); long timeElapse = (android.os.SystemClock.elapsedRealtime()) - (mStartWriteTime); if (timeElapse < ((mWriteTime) * (com.android.pmc.GattClientListener.MILLSEC))) { writeCharacteristic(gatt, ((int) (timeElapse / (com.android.pmc.GattClientListener.MILLSEC)))); } }
private static boolean doesSupportMMS() { return android.telephony.SmsManager.getDefault().getCarrierConfigValues().getBoolean(SmsManager.MMS_CONFIG_MMS_ENABLED, true); }
@java.lang.Override public boolean dispose() { return true; }
@org.junit.Test(expected = java.lang.NullPointerException.class) public void test_setTimeZone_null() { new java.util.Calendar.Builder().setTimeZone(null); }
@java.lang.Override public boolean isRenderscriptDebuggable() { return renderscriptDebuggable; }
public static java.nio.channels.SocketChannel open(java.net.InetSocketAddress adbSockAddr, com.android.ddmlib.Device device, int devicePort) throws com.android.ddmlib.TimeoutException, java.io.IOException { java.nio.channels.SocketChannel adbChan = java.nio.channels.SocketChannel.open(adbSockAddr); try { adbChan.socket().setTcpNoDelay(true); adbChan.configureBlocking(false); com.android.ddmlib.AdbHelper.setDevice(adbChan, device); byte[] req = com.android.ddmlib.AdbHelper.createAdbForwardRequest(null, devicePort); com.android.ddmlib.AdbHelper.write(adbChan, req); com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(adbChan, false); if (!(resp.okay)) { throw new java.io.IOException("connection request rejected"); } adbChan.configureBlocking(true); } catch (com.android.ddmlib.TimeoutException e) { adbChan.close(); throw e; } catch (java.io.IOException e) { adbChan.close(); throw e; } return adbChan; }
private void assertDomainOne(java.lang.String domain, java.lang.String executable) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.List<android.cts.security.SELinuxHostTest.ProcessDetails> procs = android.cts.security.SELinuxHostTest.ProcessDetails.getProcMap(mDevice).get(domain); java.util.List<android.cts.security.SELinuxHostTest.ProcessDetails> exeProcs = android.cts.security.SELinuxHostTest.ProcessDetails.getExeMap(mDevice).get(executable); java.lang.String msg = (((("Expected 1 process in SELinux domain \"" + domain) + "\"") + " Found \"") + procs) + "\""; assertNotNull(msg, procs); assertEquals(msg, 1, procs.size()); msg = (((((("Expected executable \"" + executable) + "\" in SELinux domain \"") + domain) + "\"") + "Found: \"") + procs) + "\""; assertEquals(msg, executable, procs.get(0).procTitle); msg = (((("Expected 1 process with executable \"" + executable) + "\"") + " Found \"") + procs) + "\""; assertNotNull(msg, exeProcs); assertEquals(msg, 1, exeProcs.size()); msg = (((((("Expected executable \"" + executable) + "\" in SELinux domain \"") + domain) + "\"") + "Found: \"") + procs) + "\""; assertEquals(msg, domain, exeProcs.get(0).label); }
public void testHashCodeAndEqualsDoesNotPerformNetworkIo() throws java.lang.Exception { final dalvik.system.BlockGuard.Policy oldPolicy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { fail("Blockguard.Policy.onWriteToDisk"); } @java.lang.Override public void onReadFromDisk() { fail("Blockguard.Policy.onReadFromDisk"); } @java.lang.Override public void onNetwork() { fail("Blockguard.Policy.onNetwork"); } @java.lang.Override public void onUnbufferedIO() { fail("Blockguard.Policy.onUnbufferedIO"); } @java.lang.Override public void onExplicitGc() { fail("Blockguard.Policy.onExplicitGc"); } @java.lang.Override public int getPolicyMask() { return 0; } }); try { java.net.URL url = new java.net.URL("http://www.google.com/"); java.net.URL url2 = new java.net.URL("http://www.nest.com/"); url.equals(url2); url2.hashCode(); } finally { dalvik.system.BlockGuard.setThreadPolicy(oldPolicy); } }
public java.io.FileDescriptor dup(java.io.FileDescriptor oldFd) throws android.system.ErrnoException;
@javax.annotation.Nonnull void delete(@javax.annotation.Nonnull com.android.sched.vfs.VPath path) throws com.android.sched.util.file.CannotDeleteFileException;
@org.junit.Test public void retroLambdaDefaultMethodsTest015() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_015).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
private void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo networkAgent, android.net.LinkProperties oldLp) { android.net.LinkProperties newLp = networkAgent.linkProperties; int netId = networkAgent.network.netId; if ((networkAgent.clatd) != null) { networkAgent.clatd.fixupLinkProperties(oldLp); } updateInterfaces(newLp, oldLp, netId, networkAgent.networkCapabilities); updateMtu(newLp, oldLp); updateTcpBufferSizes(networkAgent); updateRoutes(newLp, oldLp, netId); updateDnses(newLp, oldLp, netId); updateClat(networkAgent); if (isDefaultNetwork(networkAgent)) { handleApplyDefaultProxy(newLp.getHttpProxy()); } else { updateProxy(newLp, oldLp, networkAgent); } if (!(java.util.Objects.equals(newLp, oldLp))) { notifyIfacesChangedForNetworkStats(); notifyNetworkCallbacks(networkAgent, ConnectivityManager.CALLBACK_IP_CHANGED); } mKeepaliveTracker.handleCheckKeepalivesStillValid(networkAgent); }
private void conference(java.lang.String callId1, java.lang.String callId2) { android.telecom.Log.d(this, "conference %s, %s", callId1, callId2); android.telecom.Connection connection2 = findConnectionForAction(callId2, "conference"); if (connection2 == (android.telecom.ConnectionService.getNullConnection())) { android.telecom.Log.w(this, "Connection2 missing in conference request %s.", callId2); return; } android.telecom.Connection connection1 = findConnectionForAction(callId1, "conference"); if (connection1 == (android.telecom.ConnectionService.getNullConnection())) { android.telecom.Conference conference1 = findConferenceForAction(callId1, "addConnection"); if (conference1 == (getNullConference())) { android.telecom.Log.w(this, "Connection1 or Conference1 missing in conference request %s.", callId1); } else { conference1.onMerge(connection2); } } else { onConference(connection1, connection2); } }
private void updateFontLabel() { mFontButton.setText(mValues.getTextFont().getFontName()); }
public static org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance(byte[] in, java.lang.String encoding) throws java.security.cert.CertificateException { try { final org.apache.harmony.security.provider.cert.X509CertPathImpl.Encoding encType = org.apache.harmony.security.provider.cert.X509CertPathImpl.Encoding.findByApiName(encoding); if (encType == null) { throw new java.security.cert.CertificateException(("Unsupported encoding: " + encoding)); } switch (encType) { case PKI_PATH : return ((org.apache.harmony.security.provider.cert.X509CertPathImpl) (org.apache.harmony.security.provider.cert.X509CertPathImpl.ASN1.decode(in))); case PKCS7 : return org.apache.harmony.security.provider.cert.X509CertPathImpl.getCertPathFromContentInfo(((org.apache.harmony.security.pkcs7.ContentInfo) (ContentInfo.ASN1.decode(in)))); default : throw new java.security.cert.CertificateException(("Unsupported encoding: " + encoding)); } } catch (java.io.IOException e) { throw new java.security.cert.CertificateException("Failed to decode CertPath", e); } }
@java.lang.Override public boolean isGenerated() { return myGenerated; }
void setPackage(com.google.doclava.PackageInfo pkg) { mContainingPackage = pkg; }
@java.lang.Override public boolean doesResultConformToPolicy(org.conscrypt.ct.CTVerificationResult result, java.lang.String hostname, java.security.cert.X509Certificate[] chain) { java.util.Set<org.conscrypt.ct.CTLogInfo> logSet = new java.util.HashSet(); for (org.conscrypt.ct.VerifiedSCT verifiedSCT : result.getValidSCTs()) { org.conscrypt.ct.CTLogInfo log = logStore.getKnownLog(verifiedSCT.sct.getLogID()); if (log != null) { logSet.add(log); } } return (logSet.size()) >= (minimumLogCount); }
public static android.os.ZygoteProcess getProcess() { synchronized(android.webkit.WebViewZygote.sLock) { android.webkit.WebViewZygote.connectToZygoteIfNeededLocked(); return android.webkit.WebViewZygote.sZygote; } }
@javax.annotation.Nonnull com.android.jack.jayce.DeclaredTypeNode getNNode(@javax.annotation.Nonnull com.android.jack.jayce.NodeLevel minimumLevel) throws com.android.jack.library.LibraryFormatException, com.android.jack.library.LibraryIOException { com.android.jack.jayce.DeclaredTypeNode type = nnode.get(); if ((type == null) || (!(type.getLevel().keep(minimumLevel)))) { java.io.InputStream in = null; try { in = new java.io.BufferedInputStream(source.getInputStream()); com.android.jack.jayce.NodeLevel loadLevel = getLevelForLoading(minimumLevel); type = com.android.jack.jayce.JayceReaderFactory.get(inputJackLibrary, in).readType(loadLevel); nnode = new java.lang.ref.SoftReference<com.android.jack.jayce.DeclaredTypeNode>(type); } catch (java.io.IOException | com.android.sched.util.file.WrongPermissionException e) { throw new com.android.jack.library.LibraryIOException(inputJackLibrary.getLocation(), e); } catch (com.android.jack.jayce.JayceFormatException e) { com.android.jack.jayce.JayceClassOrInterfaceLoader.logger.log(java.util.logging.Level.SEVERE, (("Library " + (inputJackLibrary.getLocation().getDescription())) + " is invalid"), e); throw new com.android.jack.library.LibraryFormatException(inputJackLibrary.getLocation()); } finally { try { if (in != null) { in.close(); } } catch (java.io.IOException e) { com.android.jack.jayce.JayceClassOrInterfaceLoader.logger.log(java.util.logging.Level.WARNING, ("Failed to close input stream on " + (source.getLocation().getDescription())), e); } } tracer.getStatistic(com.android.jack.jayce.JayceClassOrInterfaceLoader.NNODE_RELOAD).add(((loadCount) > 0)); (loadCount)++; } return type; }
@java.lang.Override @javax.annotation.Nonnull protected java.util.List<com.android.sched.util.codec.PairCodec.Pair<T, U>> revert(@javax.annotation.Nonnull java.util.Map<T, U> data) { java.util.List<com.android.sched.util.codec.PairCodec.Pair<T, U>> list = new java.util.ArrayList<PairCodec.Pair<T, U>>(data.size()); for (java.util.Map.Entry<T, U> entry : data.entrySet()) { list.add(new com.android.sched.util.codec.PairCodec.Pair<T, U>(entry.getKey(), entry.getValue())); } return list; }
@java.lang.Override public void onPlaybackStateChanged(android.media.session.PlaybackState state) { synchronized(mWaitLock) { mOnPlaybackStateChangedCalled = true; mPlaybackState = state; mWaitLock.notify(); } }
public void addImportedLibrary(@javax.annotation.Nonnull com.android.jack.library.InputLibrary source) { importedLibraries.add(source); }
private final void resetContext() { org.conscrypt.OpenSSLDigestContext ctxLocal = new org.conscrypt.OpenSSLDigestContext(org.conscrypt.NativeCrypto.EVP_MD_CTX_create()); org.conscrypt.NativeCrypto.EVP_MD_CTX_init(ctxLocal); if (signing) { enableDSASignatureNonceHardeningIfApplicable(); org.conscrypt.NativeCrypto.EVP_SignInit(ctxLocal, evpAlgorithm); } else { org.conscrypt.NativeCrypto.EVP_VerifyInit(ctxLocal, evpAlgorithm); } this.ctx = ctxLocal; }
private void showErrorAndFinish(java.lang.String url) { if ((mErrorDialog) == null) { mErrorDialog = new android.app.AlertDialog.Builder(this).setTitle(R.string.settings_safetylegal_activity_title).setPositiveButton(android.R.string.ok, this).setOnCancelListener(this).setCancelable(true).create(); } else { if (mErrorDialog.isShowing()) { mErrorDialog.dismiss(); } } mErrorDialog.setMessage(getResources().getString(R.string.settings_safetylegal_activity_unreachable, url)); mErrorDialog.show(); }
public boolean click(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint mousePos) { int x = getZoomX(); if (x > 0) { if (((mousePos.x) >= x) && ((mousePos.x) <= (x + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_WIDTH)))) { int y = getZoomY(); if (((mousePos.y) >= y) && ((mousePos.y) <= (y + (3 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))))) { if ((mousePos.y) < (y + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))) { zoomIn(); } else if ((mousePos.y) < (y + (2 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT)))) { zoomOut(); } else { zoomReset(); } return true; } } } com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreview preview = getPreview(mousePos); if (preview != null) { boolean handled = preview.click((((mousePos.x) - (getX())) - (preview.getX())), (((mousePos.y) - (getY())) - (preview.getY()))); if (handled) { moved(mousePos); return true; } } return false; }
@org.junit.Test public void testSystemRunning() { when(mNetworkScorerAppManager.getActiveScorer()).thenReturn(com.android.server.NetworkScoreServiceTest.NEW_SCORER); mNetworkScoreService.systemRunning(); verify(mContext).bindServiceAsUser(com.android.server.devicepolicy.MockUtils.checkIntent(new android.content.Intent().setComponent(new android.content.ComponentName(com.android.server.NetworkScoreServiceTest.NEW_SCORER.mPackageName, com.android.server.NetworkScoreServiceTest.NEW_SCORER.mScoringServiceClassName))), any(android.content.ServiceConnection.class), eq(((android.content.Context.BIND_AUTO_CREATE) | (android.content.Context.BIND_FOREGROUND_SERVICE))), eq(UserHandle.SYSTEM)); }
private void init() { final android.os.Messenger messenger = getMessenger(); if (messenger == null) { android.net.nsd.NsdManager.fatal("Failed to obtain service Messenger"); } android.os.HandlerThread t = new android.os.HandlerThread("NsdManager"); t.start(); mHandler = new android.net.nsd.NsdManager.ServiceHandler(t.getLooper()); mAsyncChannel.connect(mContext, mHandler, messenger); try { mConnected.await(); } catch (java.lang.InterruptedException e) { android.net.nsd.NsdManager.fatal("Interrupted wait at init"); } }
public void testInstall_withBadlyFormedBundleVersion() throws java.lang.Exception { libcore.tzdata.update2.BundleVersion validBundleVersion = new libcore.tzdata.update2.BundleVersion(1, 1, libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION, 1); byte[] invalidFormatVersionBytes = validBundleVersion.toBytes(); invalidFormatVersionBytes[0] = 'A'; libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createTimeZoneBundleWithVersionBytes(invalidFormatVersionBytes); assertEquals(TimeZoneBundleInstaller.INSTALL_FAIL_BAD_BUNDLE_STRUCTURE, installer.installWithErrorCode(bundle.getBytes())); assertNoContentInstalled(); }
void addSwitchBasicBlock(@javax.annotation.Nonnull com.android.jack.cfg.SwitchBasicBlock block, @javax.annotation.Nonnull java.util.List<com.android.jack.ir.ast.JCaseStatement> cases, @javax.annotation.CheckForNull com.android.jack.ir.ast.JStatement defaultCase) { assert block != null; assert cases != null; blocksToResolve.add(new com.android.jack.cfg.ForwardBranchResolver.SwitchBasicBlockToResolve(block, cases, defaultCase)); }
private java.lang.String generateTextSrc(com.android.mms.model.SlideshowModel slideshow, int position) { final java.lang.String prefix = "text_"; final java.lang.String postfix = ".txt"; java.lang.StringBuilder src = new java.lang.StringBuilder(prefix).append(position).append(postfix); boolean hasDupSrc = false; do { for (com.android.mms.model.SlideModel model : slideshow) { if (model.hasText()) { java.lang.String testSrc = model.getText().getSrc(); if ((testSrc != null) && (testSrc.equals(src.toString()))) { src = new java.lang.StringBuilder(prefix).append((position + 1)).append(postfix); hasDupSrc |= true; break; } } hasDupSrc = false; } } while (hasDupSrc ); return src.toString(); }
@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JNewArray newArray) { check(newArray.getArrayType(), newArray); }
@java.lang.Override public int getDisplayRule(android.telephony.ServiceState serviceState) { int rule; if ((((mParentApp) != null) && ((mParentApp.getUiccCard()) != null)) && ((mParentApp.getUiccCard().getOperatorBrandOverride()) != null)) { rule = SPN_RULE_SHOW_PLMN; } else if ((android.text.TextUtils.isEmpty(getServiceProviderName())) || ((mSpnDisplayCondition) == (-1))) { rule = SPN_RULE_SHOW_PLMN; } else if (useRoamingFromServiceState() ? !(serviceState.getRoaming()) : isOnMatchingPlmn(serviceState.getOperatorNumeric())) { rule = SPN_RULE_SHOW_SPN; if (((mSpnDisplayCondition) & 1) == 1) { rule |= SPN_RULE_SHOW_PLMN; } } else { rule = SPN_RULE_SHOW_PLMN; if (((mSpnDisplayCondition) & 2) == 0) { rule |= SPN_RULE_SHOW_SPN; } } return rule; }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(minHomeDownlinkBandwidth); dest.writeLong(minHomeUplinkBandwidth); dest.writeLong(minRoamingDownlinkBandwidth); dest.writeLong(minRoamingUplinkBandwidth); dest.writeStringArray(excludedSsidList); android.net.wifi.hotspot2.pps.Policy.writeProtoPortMap(dest, requiredProtoPortMap); dest.writeInt(maximumBssLoadValue); android.net.wifi.hotspot2.pps.Policy.writeRoamingPartnerList(dest, flags, preferredRoamingPartnerList); dest.writeParcelable(policyUpdate, flags); }
@java.lang.Override public int onStartCommand(android.content.Intent intent, int flags, int startId) { android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, "Receiver service started"); byte[] body; byte[] header; body = intent.getByteArrayExtra("data"); header = intent.getByteArrayExtra("header"); android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, "header:"); android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, com.android.internal.util.HexDump.dumpHexString(header)); android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, "body:"); android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, com.android.internal.util.HexDump.dumpHexString(body)); com.android.smspush.unitTests.DataVerify.SetLastReceivedPdu(body); return START_STICKY; }
@android.annotation.SystemApi public int setAllowedCarriers(int slotIndex, java.util.List<android.service.carrier.CarrierIdentifier> carriers) { try { com.android.internal.telephony.ITelephony service = getITelephony(); if (service != null) { return service.setAllowedCarriers(slotIndex, carriers); } } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.TelephonyManager.TAG, "Error calling ITelephony#setAllowedCarriers", e); } catch (java.lang.NullPointerException e) { android.util.Log.e(android.telephony.TelephonyManager.TAG, "Error calling ITelephony#setAllowedCarriers", e); } return -1; }
public void testExtract7() throws java.lang.Exception { checkRefactoring("extractstyle2.xml", "newstyles8.xml", "newstyle", true, true, null, 2, "@+id/button1", "@+id/button2"); }
private static int convertRanToHalRan(int radioAccessNetwork) { switch (radioAccessNetwork) { case android.telephony.AccessNetworkConstants.AccessNetworkType.GERAN : return android.hardware.radio.V1_2.AccessNetwork.GERAN; case android.telephony.AccessNetworkConstants.AccessNetworkType.UTRAN : return android.hardware.radio.V1_2.AccessNetwork.UTRAN; case android.telephony.AccessNetworkConstants.AccessNetworkType.EUTRAN : return android.hardware.radio.V1_2.AccessNetwork.EUTRAN; case android.telephony.AccessNetworkConstants.AccessNetworkType.CDMA2000 : return android.hardware.radio.V1_2.AccessNetwork.CDMA2000; case android.telephony.AccessNetworkConstants.AccessNetworkType.IWLAN : return android.hardware.radio.V1_2.AccessNetwork.IWLAN; case android.telephony.AccessNetworkConstants.AccessNetworkType.UNKNOWN : default : return 0; } }
private void detachVolume(android.net.Uri uri) { if ((android.os.Binder.getCallingPid()) != (java.lang.Process.myPid())) { throw new java.lang.SecurityException("Opening and closing databases not allowed."); } java.lang.String volume = uri.getPathSegments().get(0); if (com.android.providers.media.MediaProvider.INTERNAL_VOLUME.equals(volume)) { throw new java.lang.UnsupportedOperationException("Deleting the internal volume is not allowed"); } else if (!(com.android.providers.media.MediaProvider.EXTERNAL_VOLUME.equals(volume))) { throw new java.lang.IllegalArgumentException(("There is no volume named " + volume)); } synchronized(mDatabases) { com.android.providers.media.MediaProvider.DatabaseHelper database = mDatabases.get(volume); if (database == null) return; try { java.io.File file = new java.io.File(database.getReadableDatabase().getPath()); file.setLastModified(java.lang.System.currentTimeMillis()); } catch (java.lang.Exception e) { android.util.Log.e(com.android.providers.media.MediaProvider.TAG, "Can't touch database file", e); } mDatabases.remove(volume); database.close(); } getContext().getContentResolver().notifyChange(uri, null); if (com.android.providers.media.MediaProvider.LOCAL_LOGV) android.util.Log.v(com.android.providers.media.MediaProvider.TAG, ("Detached volume: " + volume)); }
public void test_enableDisable() { if (!(mHasBluetooth)) { return; } android.bluetooth.BluetoothAdapter adapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); for (int i = 0; i < 5; i++) { disable(adapter); enable(adapter); } }
protected boolean supportsMultiWindowMode() { if (!(android.wm.cts.CrossAppDragAndDropTests.mConfigLoaded)) { try { executeShellCommand((("am start -n " + "android.wm.cts.dndsourceapp/.") + (SUPPORT_OBSERVER))); waitForResume("android.wm.cts.dndsourceapp", SUPPORT_OBSERVER); java.util.Map map = getLogResults(SUPPORT_OBSERVER); java.lang.String value = ((java.lang.String) (map.get(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DROP_RESULT))); if ((value != null) && (value.equals("OK"))) { android.wm.cts.CrossAppDragAndDropTests.mConfigLoaded = true; android.wm.cts.CrossAppDragAndDropTests.mSupportMultiWindow = !(map.get("config_supportsMultiWindow").equals("false")); } executeShellCommand(AM_FORCE_STOP_TEST_PACKAGE); clearLogs(); } catch (java.lang.Exception e) { e.printStackTrace(); } } return android.wm.cts.CrossAppDragAndDropTests.mSupportMultiWindow; }
public void importProjects(@com.android.annotations.NonNull java.util.List<java.io.File> projectDirs) throws java.io.IOException { mSummary = new com.android.tools.gradle.eclipse.ImportSummary(this); mProjectMap.clear(); mHandledJars.clear(); mWarnings.clear(); mErrors.clear(); mWorkspaceProjects = null; mRootModules = java.util.Collections.emptyList(); mModules = com.google.common.collect.Sets.newHashSet(); for (java.io.File file : projectDirs) { if (file.isFile()) { assert !(file.isDirectory()); file = file.getParentFile(); } guessWorkspace(file); if (com.android.tools.gradle.eclipse.GradleImport.isAdtProjectDir(file)) { guessSdk(file); guessNdk(file); try { com.android.tools.gradle.eclipse.EclipseProject.getProject(this, file); } catch (com.android.tools.gradle.eclipse.GradleImport.ImportException e) { return; } catch (java.lang.Exception e) { reportError(null, file, e.toString(), false); return; } } else { reportError(null, file, ("Not a recognized project: " + file), false); return; } } java.util.Set<com.android.tools.gradle.eclipse.EclipseProject> projects = com.google.common.collect.Sets.newHashSet(mProjectMap.values()); mRootModules = com.android.tools.gradle.eclipse.EclipseProject.performImport(this, projects); for (com.android.tools.gradle.eclipse.ImportModule module : mRootModules) { mModules.add(module); mModules.addAll(module.getAllDependencies()); } }
public void test_parse_withMultiplier() { java.text.DecimalFormat format = ((java.text.DecimalFormat) (java.text.NumberFormat.getNumberInstance(java.util.Locale.ENGLISH))); java.lang.Number result; format.setMultiplier(100); result = format.parse("9223372036854775807", new java.text.ParsePosition(0)); assertEquals(("Wrong result type multiplier 100: " + result), java.lang.Double.class, result.getClass()); assertEquals(("Wrong result for multiplier 100: " + result), 9.223372036854776E16, result.doubleValue()); format.setMultiplier(1000); result = format.parse("9223372036854775807", new java.text.ParsePosition(0)); assertEquals(("Wrong result type multiplier 1000: " + result), java.lang.Double.class, result.getClass()); assertEquals(("Wrong result for multiplier 1000: " + result), 9.223372036854776E15, result.doubleValue()); format.setMultiplier(10000); result = format.parse("9223372036854775807", new java.text.ParsePosition(0)); assertEquals(("Wrong result type multiplier 10000: " + result), java.lang.Double.class, result.getClass()); assertEquals(("Wrong result for multiplier 10000: " + result), 9.223372036854776E14, result.doubleValue()); }
public android.bluetooth.le.PeriodicAdvertisingParameters.Builder setIncludeTxPower(boolean includeTxPower) { mIncludeTxPower = includeTxPower; return this; }
@android.test.suitebuilder.annotation.MediumTest public void testSendCallEventNull() throws java.lang.Exception { com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall("650-555-1212", mPhoneAccountA0.getAccountHandle(), mConnectionServiceFixtureA); assertEquals(Call.STATE_ACTIVE, mInCallServiceFixtureX.getCall(ids.mCallId).getState()); mInCallServiceFixtureX.mInCallAdapter.sendCallEvent(ids.mCallId, com.android.server.telecom.tests.BasicCallTests.TEST_EVENT, null); verify(mConnectionServiceFixtureA.getTestDouble(), timeout(com.android.server.telecom.tests.TEST_TIMEOUT)).sendCallEvent(eq(ids.mConnectionId), eq(com.android.server.telecom.tests.BasicCallTests.TEST_EVENT), isNull(android.os.Bundle.class), any()); }
@javax.annotation.Nonnull public static java.io.File getRuntimeEnvironmentRootDir(@javax.annotation.Nonnull java.lang.String rtName) { java.lang.String rtLocationPath = com.android.jack.test.TestsProperties.getProperty(((com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LOCATION_PREFIX) + rtName)); if (rtLocationPath == null) { throw new com.android.jack.test.TestConfigurationException(((((("Location for runtime '" + rtName) + "' is not specified. Set property '") + (com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LOCATION_PREFIX)) + rtName) + "'")); } java.io.File rtLocation = new java.io.File(rtLocationPath); if (!(rtLocation.exists())) { throw new com.android.jack.test.TestConfigurationException((((("Location for runtime " + rtName) + " does not exist: '") + rtLocationPath) + "'")); } if (!(rtLocation.isDirectory())) { throw new com.android.jack.test.TestConfigurationException((((("Location for runtime " + rtName) + " is not a directory: '") + rtLocationPath) + "'")); } return rtLocation; }
private void handleInterfaceServingStateActive(int mode, com.android.server.connectivity.tethering.TetherInterfaceStateMachine who) { if ((mNotifyList.indexOf(who)) < 0) { mNotifyList.add(who); mIPv6TetheringCoordinator.addActiveDownstream(who, mode); } if (mode == (com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED)) { mForwardedDownstreams.add(who); } else { mForwardedDownstreams.remove(who); } if ((who.interfaceType()) == (android.net.ConnectivityManager.TETHERING_WIFI)) { final android.net.wifi.WifiManager mgr = getWifiManager(); final java.lang.String iface = who.interfaceName(); switch (mode) { case com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED : mgr.updateInterfaceIpState(iface, WifiManager.IFACE_IP_MODE_TETHERED); break; case com.android.server.connectivity.tethering.IControlsTethering.STATE_LOCAL_ONLY : mgr.updateInterfaceIpState(iface, WifiManager.IFACE_IP_MODE_LOCAL_ONLY); break; default : android.util.Log.wtf(com.android.server.connectivity.Tethering.TAG, ("Unknown active serving mode: " + mode)); break; } } }
@javax.annotation.Nonnull public static <T> com.android.sched.util.config.id.DefaultFactoryPropertyId<T> create(@javax.annotation.Nonnull java.lang.String name, @javax.annotation.Nonnull java.lang.String description, @javax.annotation.Nonnull java.lang.Class<T> type) { return new com.android.sched.util.config.id.DefaultFactoryPropertyId<T>(name, description, new com.android.sched.util.codec.DefaultFactorySelector<T>(type)); }
@java.lang.Override public boolean getIsSoftReference() { return mIsSoftReference; }
private static boolean verifyVpnStatus(android.support.test.uiautomator.UiDevice device) { device.openNotification(); boolean isTrue = device.wait(android.support.test.uiautomator.Until.hasObject(android.support.test.uiautomator.By.res(com.android.devtools.systemimage.uitest.smoke.VpnTest.VPN_LOCK_ICON_RES)), java.util.concurrent.TimeUnit.MILLISECONDS.convert(3L, java.util.concurrent.TimeUnit.SECONDS)); device.pressHome(); return isTrue; }
public void test_Apia_jumpForwardOverInternationalDateLine_P12_to_M12() { java.time.zone.ZoneRules test = pacificApia(); java.time.Instant instantBefore = java.time.LocalDate.of(1892, 7, 2).atStartOfDay(java.time.ZoneOffset.UTC).toInstant(); java.time.zone.ZoneOffsetTransition trans = test.nextTransition(instantBefore); assertEquals(trans.getDateTimeBefore(), java.time.LocalDateTime.of(1892, 7, 5, 0, 0)); assertEquals(trans.getDateTimeAfter(), java.time.LocalDateTime.of(1892, 7, 4, 0, 0)); assertEquals(trans.isGap(), false); assertEquals(trans.isOverlap(), true); assertEquals(trans.isValidOffset(java.time.ZoneOffset.ofHoursMinutesSeconds((+12), 33, 4)), true); assertEquals(trans.isValidOffset(java.time.ZoneOffset.ofHoursMinutesSeconds((-11), (-26), (-56))), true); assertEquals(trans.getDuration(), java.time.Duration.ofHours((-24))); assertEquals(trans.getInstant(), java.time.LocalDateTime.of(1892, 7, 4, 0, 0).toInstant(java.time.ZoneOffset.ofHoursMinutesSeconds((-11), (-26), (-56)))); java.time.ZonedDateTime zdt = java.time.ZonedDateTime.of(1892, 7, 4, 23, 0, 0, 0, java.time.ZoneId.of("Pacific/Apia")); assertEquals(zdt.plusHours(2).toLocalDateTime(), java.time.LocalDateTime.of(1892, 7, 4, 1, 0, 0)); }
public static com.android.internal.telephony.uicc.UiccController make(android.content.Context c, com.android.internal.telephony.CommandsInterface ci) { synchronized(com.android.internal.telephony.uicc.UiccController.mLock) { if ((com.android.internal.telephony.uicc.UiccController.mInstance) != null) { throw new java.lang.RuntimeException("UiccController.make() should only be called once"); } com.android.internal.telephony.uicc.UiccController.mInstance = new com.android.internal.telephony.uicc.UiccController(c, ci); return com.android.internal.telephony.uicc.UiccController.mInstance; } }
synchronized void nScriptIntrinsicBLAS_Z(long id, int func, int TransA, int TransB, int Side, int Uplo, int Diag, int M, int N, int K, double alphaX, double alphaY, long A, long B, double betaX, double betaY, long C, int incX, int incY, int KL, int KU) { validate(); rsnScriptIntrinsicBLAS_Z(mContext, id, func, TransA, TransB, Side, Uplo, Diag, M, N, K, alphaX, alphaY, A, B, betaX, betaY, C, incX, incY, KL, KU); }
private void processLogLines(java.lang.String[] lines) { java.util.List<com.android.ddmuilib.logcat.LogCatMessage> newMessages = mLogCatMessageParser.processLogLines(lines, mPidToNameMapper); if ((newMessages.size()) > 0) { java.util.List<com.android.ddmuilib.logcat.LogCatMessage> deletedMessages; synchronized(mLogMessages) { deletedMessages = mLogMessages.ensureSpace(newMessages.size()); mLogMessages.appendMessages(newMessages); } sendLogChangedEvent(newMessages, deletedMessages); } }
@org.junit.Test @java.lang.Runtime(from = RuntimeVersion.N) public void testDefaultMethod012() throws java.lang.Exception { run(DEFAULTMETHOD012); }
public static void transform(float a, float b, float c, float d, float e, float f, com.android.assetstudiolib.vectordrawable.VdPath.Node[] nodes) { float[] pre = new float[2]; for (int i = 0; i < (nodes.length); i++) { nodes[i].transform(a, b, c, d, e, f, pre); } }
@java.lang.Override public com.android.dx.dex.file.ClassDefItem call() { com.android.dx.dex.file.ClassDefItem clazz = com.android.dx.command.dexer.Main.translateClass(bytes, classFile); return clazz; }
public static int $noinline$Shl0(int arg) { if (Main.doThrow) { throw new java.lang.Error(); } return arg << 0; }
public static java.lang.String getNdkBuildTaskName(@com.android.annotations.NonNull org.gradle.nativeplatform.NativeBinarySpec binary) { return com.android.build.gradle.ndk.internal.NdkNamingScheme.getTaskName(binary, "ndkBuild"); }
public void testDisplayNamesOnNonGregorianCalendar() { assertEquals("Jan", libcore.java.text.SimpleDateFormatTest.formatDateNonGregorianCalendar("MMM")); assertEquals("Jan", libcore.java.text.SimpleDateFormatTest.formatDateNonGregorianCalendar("LLL")); assertEquals("Thu", libcore.java.text.SimpleDateFormatTest.formatDateNonGregorianCalendar("EEE")); assertEquals("Thu", libcore.java.text.SimpleDateFormatTest.formatDateNonGregorianCalendar("ccc")); }
public boolean isOlderThan(@javax.annotation.Nonnull com.android.sched.util.Version other) throws com.android.sched.util.UncomparableVersion { return (compareTo(other)) < 0; }
@org.junit.Test public void testSetWpsDeviceType() throws java.lang.Exception { java.lang.String validDeviceTypeStr = "10-0050F204-5"; byte[] expectedDeviceType = new byte[]{ 0, 10, 0, 80, ((byte) (242)), 4, 0, 5 }; java.lang.String invalidDeviceType1Str = "10-02050F204-5"; java.lang.String invalidDeviceType2Str = "10-0050F204-534"; when(mISupplicantStaIfaceMock.setWpsDeviceType(any(byte[].class))).thenReturn(mStatusSuccess); executeAndValidateInitializationSequence(false, false, false); assertTrue(mDut.setWpsDeviceType(validDeviceTypeStr)); verify(mISupplicantStaIfaceMock).setWpsDeviceType(eq(expectedDeviceType)); assertFalse(mDut.setWpsDeviceType(invalidDeviceType1Str)); assertFalse(mDut.setWpsDeviceType(invalidDeviceType2Str)); }
@java.lang.Override protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return getUserRecord().mTransformQuotaTracker; }
public static short $noinline$shortToCharToShort(short value) { if (Main.doThrow) { throw new java.lang.Error(); } return ((short) ((char) (value))); }
public void testDiff6() throws java.lang.Exception { java.lang.String reference = "" + ((((((((((("<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n") + " xmlns:tools=\"http://schemas.android.com/tools\"\n") + " package=\"com.example.lib3\">\n") + "\n") + " <activity android:name=\"activityOne\" ") + " android:configChanges=\"locale\">\n") + "\n") + " <intent-filter android:label=\"@string/foo\"/>\n") + "\n") + " </activity>\n") + "</manifest>"); java.lang.String other = "" + (((((((("<manifest\n" + " xmlns:android=\"http://schemas.android.com/apk/res/android\"\n") + " xmlns:tools=\"http://schemas.android.com/tools\"\n") + " package=\"com.example.lib3\">\n") + "\n") + " <activity android:name=\"activityOne\" ") + " android:configChanges=\"locale\"/>\n") + "\n") + "</manifest>"); com.android.manifmerger.XmlDocument refDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), "testDiff6()"), reference); com.android.manifmerger.XmlDocument otherDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), "testDiff6()"), other); assertTrue(refDocument.getRootNode().getNodeByTypeAndKey(ManifestModel.NodeTypes.ACTIVITY, "com.example.lib3.activityOne").get().compareTo(otherDocument.getRootNode().getNodeByTypeAndKey(ManifestModel.NodeTypes.ACTIVITY, "com.example.lib3.activityOne").get()).isPresent()); }
@java.lang.Override public void onRttSessionRemotelyTerminated(java.lang.String callId, android.telecom.Logging.Session.Info sessionInfo) throws android.os.RemoteException { }
public void testInstrumentationNotAllowed() { android.content.Context myContext = getInstrumentation().getContext(); android.content.ComponentName appDiffCertInstrumentation = new android.content.ComponentName(myContext, android.app.Instrumentation.class); try { getInstrumentation().getContext().startInstrumentation(appDiffCertInstrumentation, null, new android.os.Bundle()); fail("could launch instrumentation"); } catch (java.lang.SecurityException e) { } }
@org.junit.Test public void bookmarkWebSiteInBrowser() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "Browser"); android.support.test.uiautomator.UiObject textField = device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.BROWSER_URL_TEXT_FIELD_RES)); textField.click(); textField.clearTextField(); textField.setText("espn.com"); device.pressEnter(); device.pressMenu(); device.findObject(new android.support.test.uiautomator.UiSelector().text("Save to bookmarks")).click(); device.findObject(new android.support.test.uiautomator.UiSelector().text("OK")).click(); device.pressMenu(); device.findObject(new android.support.test.uiautomator.UiSelector().text("Bookmarks")).click(); assertTrue("Cannot find ESPN bookmark", ((device.findObject(new android.support.test.uiautomator.UiSelector().text("Bookmarks")).exists()) && (device.findObject(new android.support.test.uiautomator.UiSelector().textContains("ESPN").resourceId(Res.BROWSER_BOOKMARKS_LABEL_RES)).exists()))); }
private static int compareBooleans(boolean x, boolean y) { return java.lang.Integer.compare((x ? 1 : 0), (y ? 1 : 0)); }
public boolean hasSourceUrl(com.android.sdklib.internal.repository.SdkSourceCategory category, com.android.sdklib.internal.repository.SdkSource source) { java.util.ArrayList<com.android.sdklib.internal.repository.SdkSource> list = mSources.get(category); if (list != null) { for (com.android.sdklib.internal.repository.SdkSource s : list) { if (s.equals(source)) { return true; } } } return false; }
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) throws java.lang.Exception { if ((!(preserveJls)) || (!(com.android.jack.optimizations.modifiers.FieldFinalizer.isConstructor(method)))) { return; } com.android.jack.ir.ast.JDefinedClassOrInterface type = method.getEnclosingType(); if (!(type instanceof com.android.jack.ir.ast.JDefinedClass)) { return; } com.android.jack.optimizations.modifiers.FieldFinalizer.ConstructorsAnalysisPhase.Analyzer analyzer = new com.android.jack.optimizations.modifiers.FieldFinalizer.ConstructorsAnalysisPhase.Analyzer(type.getFields(), method); if (!(analyzer.isEmpty())) { analyzer.analyze(); } }
@java.lang.Override @com.android.annotations.Nullable public java.lang.Boolean getRenderscriptSupportModeEnabled() { return mRenderscriptSupportModeEnabled; }
public int startSendingOffloadedPacket(int slot, byte[] srcMac, com.android.server.connectivity.KeepalivePacketData keepAlivePacket, int periodInMs) { enter("slot=% periodInMs=%").c(slot).c(periodInMs).flush(); java.util.ArrayList<java.lang.Byte> data = com.android.server.wifi.util.NativeUtil.byteArrayToArrayList(keepAlivePacket.data); short protocol = ((short) (keepAlivePacket.protocol)); synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return -1; try { android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.startSendingKeepAlivePackets(slot, data, protocol, srcMac, keepAlivePacket.dstMac, periodInMs); if (!(ok(status))) return -1; return 0; } catch (android.os.RemoteException e) { handleRemoteException(e); return -1; } } }
private static boolean startSystemServer() throws com.android.internal.os.ZygoteInit.MethodAndArgsCaller, java.lang.RuntimeException { long capabilities = com.android.internal.os.ZygoteInit.posixCapabilitiesAsBits(OsConstants.CAP_BLOCK_SUSPEND, OsConstants.CAP_KILL, OsConstants.CAP_NET_ADMIN, OsConstants.CAP_NET_BIND_SERVICE, OsConstants.CAP_NET_BROADCAST, OsConstants.CAP_NET_RAW, OsConstants.CAP_SYS_MODULE, OsConstants.CAP_SYS_NICE, OsConstants.CAP_SYS_RESOURCE, OsConstants.CAP_SYS_TIME, OsConstants.CAP_SYS_TTY_CONFIG); java.lang.String[] args = new java.lang.String[]{ "--setuid=1000", "--setgid=1000", "--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1032,3001,3002,3003,3006,3007", (("--capabilities=" + capabilities) + ",") + capabilities, "--runtime-init", "--nice-name=system_server", "com.android.server.SystemServer" }; com.android.internal.os.ZygoteConnection.Arguments parsedArgs = null; int pid; try { parsedArgs = new com.android.internal.os.ZygoteConnection.Arguments(args); com.android.internal.os.ZygoteConnection.applyDebuggerSystemProperty(parsedArgs); com.android.internal.os.ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs); pid = com.android.internal.os.Zygote.forkSystemServer(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids, parsedArgs.debugFlags, null, parsedArgs.permittedCapabilities, parsedArgs.effectiveCapabilities); } catch (java.lang.IllegalArgumentException ex) { throw new java.lang.RuntimeException(ex); } if (pid == 0) { com.android.internal.os.ZygoteInit.handleSystemServerProcess(parsedArgs); } return true; }
public void verifyCommandDispatchKeyDown() { resetCounts(); mTvView.dispatchKeyEvent(new android.view.KeyEvent(android.view.KeyEvent.ACTION_DOWN, android.view.KeyEvent.KEYCODE_K)); mInstrumentation.waitForIdleSync(); new android.cts.util.PollingCheck(android.media.tv.cts.TvInputServiceTest.TIME_OUT) { @java.lang.Override protected boolean check() { android.media.tv.cts.TvInputServiceTest.CountingTvInputService.CountingSession session = android.media.tv.cts.TvInputServiceTest.CountingTvInputService.sSession; return (session != null) && ((session.mKeyDownCount) > 0); } }.run(); }
static void getChar(java.lang.invoke.MethodHandle m, Main.ValueHolder v, char value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final char got; if (v == null) { got = ((char) (m.invokeExact())); } else { got = ((char) (m.invokeExact(v))); } Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEquals(exceptionThrown, expectFailure); }
public void switchToSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().switchToSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@javax.annotation.Nonnull private static java.util.LinkedHashMap<com.android.jack.ir.ast.JVariable, com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo> collectDefinitions(@javax.annotation.Nonnull com.android.jack.cfg.ControlFlowGraph cfg) { java.util.LinkedHashMap<com.android.jack.ir.ast.JVariable, com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo> defs = com.google.common.collect.Maps.newLinkedHashMap(); for (com.android.jack.cfg.BasicBlock bb : cfg.getNodes()) { for (com.android.jack.ir.ast.JStatement stmt : bb.getStatements()) { com.android.jack.analysis.DefinitionMarker dm = com.android.jack.util.ThreeAddressCodeFormUtils.getDefinitionMarker(stmt); if (dm != null) { com.android.jack.ir.ast.JVariable variable = dm.getDefinedVariable(); com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo info = defs.get(variable); if (info == null) { info = new com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo(variable); defs.put(variable, info); } info.defs.add(dm); } for (com.android.jack.ir.ast.JVariableRef ref : com.android.jack.util.OptimizationTools.getUsedVariables(stmt)) { com.android.jack.ir.ast.JVariable variable = ref.getTarget(); com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo info = defs.get(variable); if (info == null) { info = new com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo(variable); defs.put(variable, info); } info.refStmts.add(stmt); } } } return defs; }
@org.junit.Test public void testDependency001() throws java.lang.Exception { com.android.jack.test.helper.IncrementalTestHelper ite = new com.android.jack.test.helper.IncrementalTestHelper(com.android.jack.test.toolchain.AbstractTestTools.createTempDir()); ite.setIsApiTest(); ite.addJavaFile("jack.incremental", "A.java", ("package jack.incremental; \n" + (("public class A { \n" + " public static class B { public void m() {} } \n") + " public static void main(String[] args) {new B().m();} } \n"))); ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(2, ite.getJayceCount()); ite.addJavaFile("jack.incremental", "A.java", ("package jack.incremental; \n" + ("public class A { \n" + " public static void main(String[] args) {new B().m();} } \n"))); try { ite.incrementalBuildFromFolder(); junit.framework.Assert.fail(); } catch (com.android.jack.frontend.FrontendCompilationException e) { junit.framework.Assert.assertEquals(0, ite.getJayceCount()); } }
static java.util.zip.ZipEntry findEntryWithDirectoryFallback(java.util.jar.StrictJarFile jarFile, java.lang.String entryName) { java.util.zip.ZipEntry entry = jarFile.findEntry(entryName); if ((entry == null) && (!(entryName.endsWith("/")))) { entry = jarFile.findEntry((entryName + "/")); } return entry; }
public static com.android.manifmerger.XmlDocument load(com.android.manifmerger.KeyResolver<java.lang.String> selectors, com.android.manifmerger.PlaceholderHandler.KeyBasedValueResolver<com.android.manifmerger.ManifestMerger2.SystemProperty> systemPropertyResolver, java.lang.String displayName, java.io.File xmlFile) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { java.io.InputStream inputStream = new java.io.BufferedInputStream(new java.io.FileInputStream(xmlFile)); com.android.utils.PositionXmlParser positionXmlParser = new com.android.utils.PositionXmlParser(); org.w3c.dom.Document domDocument = positionXmlParser.parse(inputStream); return domDocument != null ? new com.android.manifmerger.XmlDocument(positionXmlParser, new com.android.manifmerger.XmlLoader.FileSourceLocation(displayName, xmlFile), selectors, systemPropertyResolver, domDocument.getDocumentElement()) : null; }
private com.android.apksig.DefaultApkSignerEngine.OutputApkSigningBlockRequestImpl outputZipSectionsInternal(com.android.apksig.util.DataSource zipEntries, com.android.apksig.util.DataSource zipCentralDirectory, com.android.apksig.util.DataSource zipEocd, boolean apkSigningBlockPaddingSupported) throws java.io.IOException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException { checkNotClosed(); checkV1SigningDoneIfEnabled(); if (!(mV2SigningEnabled)) { return null; } invalidateV2Signature(); java.util.List<com.android.apksig.internal.apk.v2.V2SchemeSigner.SignerConfig> v2SignerConfigs = getV2SignerConfigs(); com.android.apksig.internal.util.Pair<byte[], java.lang.Integer> result = com.android.apksig.internal.apk.v2.V2SchemeSigner.generateApkSigningBlock(zipEntries, zipCentralDirectory, zipEocd, v2SignerConfigs, apkSigningBlockPaddingSupported); byte[] apkSigningBlock = result.getFirst(); int padSizeBeforeApkSigningBlock = result.getSecond(); mAddV2SignatureRequest = new com.android.apksig.DefaultApkSignerEngine.OutputApkSigningBlockRequestImpl(apkSigningBlock, padSizeBeforeApkSigningBlock); return mAddV2SignatureRequest; }
void getFolderItemsNowPlaying(byte[] bdaddr, com.android.bluetooth.avrcp.AvrcpCmd.FolderItemsCmd reqObj, com.android.bluetooth.avrcp.MediaController mediaController) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, "getFolderItemsNowPlaying"); if (mediaController == null) { android.util.Log.e(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, "mediaController = null, sending no available players response"); mMediaInterface.folderItemsRsp(bdaddr, AvrcpConstants.RSP_NO_AVBL_PLAY, null); return; } java.util.List<android.media.session.MediaSession.QueueItem> items = getNowPlayingList(mediaController); getFolderItemsFilterAttr(bdaddr, reqObj, items, AvrcpConstants.BTRC_SCOPE_NOW_PLAYING, reqObj.mStartItem, reqObj.mEndItem, mediaController); }
@java.lang.Override public void enter() { android.bluetooth.BluetoothDevice erroneouslyConnectedDevice = getBluetoothAudioConnectedDevice(); if (erroneouslyConnectedDevice != null) { android.telecom.Log.w(com.android.server.telecom.bluetooth.BluetoothRouteManager.LOG_TAG, ("Entering AudioOff state but device %s appears to be connected. " + "Disconnecting."), erroneouslyConnectedDevice); disconnectAudio(); } cleanupStatesForDisconnectedDevices(); if ((mListener) != null) { mListener.onBluetoothAudioDisconnected(); } }
@org.junit.Test public void testMacAddrTypes() { android.net.MacAddressTest.AddrTypeTestCase[] testcases = new android.net.MacAddressTest.AddrTypeTestCase[]{ android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 0), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5, 6, 7), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNICAST, 160, 176, 192, 208, 224, 240), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_BROADCAST, 255, 255, 255, 255, 255, 255), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 1, 2, 3, 4, 5, 6), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 11, 22, 33, 44, 55, 66), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 33, 33, 170, 187, 204, 221) }; for (android.net.MacAddressTest.AddrTypeTestCase t : testcases) { int got = android.net.MacAddress.macAddressType(t.addr); java.lang.String msg = java.lang.String.format("expected type of %s to be %s, but got %s", java.util.Arrays.toString(t.addr), t.expectedType, got); assertEquals(msg, t.expectedType, got); if (got != (MacAddress.TYPE_UNKNOWN)) { assertEquals(got, android.net.MacAddress.fromBytes(t.addr).getAddressType()); } } }
public void test_69599767() throws java.lang.Exception { byte[] bytes = new byte[]{ ((byte) (245)), ((byte) (169)), ((byte) (234)), ((byte) (33)) }; java.lang.String expected = "\ufffd\ufffd\ufffd!"; java.nio.charset.CharsetDecoder decoder = java.nio.charset.Charset.forName("UTF-8").newDecoder(); decoder.onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE); assertEquals(expected, decoder.decode(java.nio.ByteBuffer.wrap(bytes)).toString()); assertEquals(expected, new java.lang.String(bytes, "UTF-8")); }
private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { com.android.internal.util.Preconditions.checkArgument((callback != null), "null NetworkCallback"); com.android.internal.util.Preconditions.checkArgument(((action == (android.net.ConnectivityManager.REQUEST)) || (need != null)), "null NetworkCapabilities"); final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { if (callback.isRegistered()) { android.util.Log.e(android.net.ConnectivityManager.TAG, "NetworkCallback was already registered"); } android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return request; }
public void testConfigurationUpdatesWhenRotatingWhileDocked() throws java.lang.Exception { if (!(supportsMultiWindowMode())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, "Skipping test: no multi-window support"); return; } setDeviceRotation(0); launchActivityInStack(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); final android.server.cts.ReportedSizes orientationASizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); setDeviceRotation(1); final android.server.cts.ReportedSizes orientationBSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); android.server.cts.ActivityManagerAppConfigurationTests.assertSizesRotate(orientationASizes, orientationBSizes); }
public void testSystem_setSecurityManager_notNull_throwsException() { try { java.lang.System.setSecurityManager(new java.lang.SecurityManager()); fail(("Expected " + (java.lang.SecurityException.class.getName()))); } catch (java.lang.SecurityException expected) { } }
public void longDivTest() throws java.lang.Exception { ZeroTests.longTest("longDivTest", true); }
private void setDisplayName() { android.telephony.SubscriptionManager subManager = android.telephony.SubscriptionManager.from(mContext); int[] subId = subManager.getSubId(mParentApp.getPhoneId()); if ((subId == null) || ((subId.length) <= 0)) { log(("subId not valid for Phone " + (mParentApp.getPhoneId()))); return; } android.telephony.SubscriptionInfo subInfo = subManager.getActiveSubscriptionInfo(subId[0]); if ((subInfo != null) && ((subInfo.getNameSource()) != (android.telephony.SubscriptionManager.NAME_SOURCE_USER_INPUT))) { java.lang.CharSequence oldSubName = subInfo.getDisplayName(); java.lang.String newCarrierName = mTelephonyManager.getSimOperatorName(subId[0]); if ((!(android.text.TextUtils.isEmpty(newCarrierName))) && (!(newCarrierName.equals(oldSubName)))) { log(((("sim name[" + (mParentApp.getPhoneId())) + "] = ") + newCarrierName)); com.android.internal.telephony.SubscriptionController.getInstance().setDisplayName(newCarrierName, subId[0]); } } else { log((((("SUB[" + (mParentApp.getPhoneId())) + "] ") + (subId[0])) + " SubInfo not created yet")); } }
public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }
public void setLineWidth(float width) { com.android.gallery3d.common.Utils.assertTrue((width >= 0)); mLineWidth = width; }
@java.lang.Override public java.lang.String toString() { return java.lang.Integer.toString(mNumber); }
public vogar.commands.Command build() { vogar.commands.Command.Builder builder = new vogar.commands.Command.Builder(log); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : env.entrySet()) { builder.env(entry.getKey(), entry.getValue()); } builder.args(vmCommand); if (classpathViaProperty) { builder.args(("-Djava.class.path=" + (classpath))); } else { builder.args("-classpath", classpath.toString()); } if (!(bootClasspath.isEmpty())) { builder.args(("-Xbootclasspath/a:" + (bootClasspath))); } if ((userDir) != null) { builder.args(("-Duser.dir=" + (userDir))); } if ((temp) != null) { builder.args(("-Djava.io.tmpdir=" + (temp))); } if ((debugPort) != null) { builder.args((("-Xrunjdwp:transport=dt_socket,address=" + (debugPort)) + ",server=y,suspend=y")); } builder.args(vmArgs); builder.args(mainClass); builder.args(args); builder.tee(output); builder.maxLength(maxLength); return builder.build(); }
private void setConnectingThread(final java.lang.Thread thread) { final java.lang.Thread oldThread = mConnectingThread.getAndSet(thread); if (oldThread != null) { oldThread.interrupt(); } }
@org.junit.Test public void testBasicDnsConfigurationPushed() throws java.lang.Exception { mCellNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_CELLULAR); waitForIdle(); verify(mNetworkManagementService, never()).setDnsConfigurationForNetwork(anyInt(), any(), any()); final android.net.LinkProperties cellLp = new android.net.LinkProperties(); cellLp.setInterfaceName("test_rmnet_data0"); mCellNetworkAgent.sendLinkProperties(cellLp); mCellNetworkAgent.connect(false); waitForIdle(); verify(mNetworkManagementService, times(1)).setDnsConfigurationForNetwork(anyInt(), mStringArrayCaptor.capture(), any()); com.android.server.ConnectivityServiceTest.assertEmpty(mStringArrayCaptor.getValue()); reset(mNetworkManagementService); cellLp.addDnsServer(java.net.InetAddress.getByName("2001:db8::1")); mCellNetworkAgent.sendLinkProperties(cellLp); waitForIdle(); verify(mNetworkManagementService, times(1)).setDnsConfigurationForNetwork(anyInt(), mStringArrayCaptor.capture(), any()); assertEquals(1, mStringArrayCaptor.getValue().length); assertTrue(com.android.internal.util.ArrayUtils.contains(mStringArrayCaptor.getValue(), "2001:db8::1")); reset(mNetworkManagementService); cellLp.addDnsServer(java.net.InetAddress.getByName("192.0.2.1")); mCellNetworkAgent.sendLinkProperties(cellLp); waitForIdle(); verify(mNetworkManagementService, times(1)).setDnsConfigurationForNetwork(anyInt(), mStringArrayCaptor.capture(), any()); assertEquals(2, mStringArrayCaptor.getValue().length); assertTrue(com.android.internal.util.ArrayUtils.containsAll(mStringArrayCaptor.getValue(), new java.lang.String[]{ "2001:db8::1", "192.0.2.1" })); reset(mNetworkManagementService); }
public void testGoodOverrideFile() throws java.lang.Exception { java.io.RandomAccessFile in = new java.io.RandomAccessFile(libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT, "r"); byte[] content = new byte[((int) (in.length()))]; in.readFully(content); content[6] = '9'; content[7] = '9'; content[8] = '9'; content[9] = '9'; content[10] = 'z'; in.close(); java.lang.String goodFile = libcore.util.ZoneInfoDBTest.makeTemporaryFile(content); try { libcore.util.ZoneInfoDB.TzData data = new libcore.util.ZoneInfoDB.TzData(goodFile, libcore.util.ZoneInfoDBTest.TZDATA_IN_DATA, libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT); assertEquals("9999z", data.getVersion()); assertEquals(java.util.TimeZone.getAvailableIDs().length, data.getAvailableIDs().length); } finally { new java.io.File(goodFile).delete(); } }
@java.lang.Override public java.util.List<com.android.ide.common.rendering.api.ViewInfo> getRootViews() { return mRootViewInfo; }
@com.android.internal.annotations.GuardedBy("this") private void setVpnForcedWithExemptionsLocked(boolean enforce, @android.annotation.Nullable java.util.List<java.lang.String> exemptedPackages) { final java.util.Set<android.net.UidRange> removedRanges = new android.util.ArraySet(mBlockedUsers); java.util.Set<android.net.UidRange> addedRanges = java.util.Collections.emptySet(); if (enforce) { addedRanges = createUserAndRestrictedProfilesRanges(mUserHandle, null, exemptedPackages); removedRanges.removeAll(addedRanges); addedRanges.removeAll(mBlockedUsers); } setAllowOnlyVpnForUids(false, removedRanges); setAllowOnlyVpnForUids(true, addedRanges); }
@com.android.annotations.NonNull public java.util.Set<java.lang.String> getApplicableFilters() { if (!(enable)) { return java.util.Collections.singleton(null); } java.util.Set<java.lang.String> results = com.google.common.collect.Sets.newHashSetWithExpectedSize(values.size()); for (java.lang.String value : values) { if (allowedValues.contains(value)) { results.add(value); } } return results; }
private boolean isLocationEnabled() { return (Settings.Secure.getInt(getContext().getContentResolver(), Settings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF)) != (Settings.Secure.LOCATION_MODE_OFF); }
@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock catchBlock) { super.visit(catchBlock); assert currentStmts.isEmpty(); java.util.List<com.android.jack.ir.ast.JStatement> catchStmts = catchBlock.getStatements(); assert (catchStmts.size()) >= 1; accept(catchStmts.get(0)); com.android.jack.cfg.CatchBasicBlock catchBasicBlock = new com.android.jack.cfg.CatchBasicBlock(((basicBlockId)++), currentStmts, catchBlock.getCatchTypes(), catchBlock.getCatchVar()); setBlockOfStatement(catchBasicBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(getConcreteStatement(catchBlock)); if (nextStatement != null) { forwardBranchResolver.addNormalBasicBlock(catchBasicBlock, nextStatement); } accept(catchStmts.subList(1, catchStmts.size())); return false; }
private void handleNetCap(android.net.Network network, android.net.NetworkCapabilities newNc) { final android.net.NetworkState prev = mNetworkMap.get(network); if ((prev == null) || (newNc.equals(prev.networkCapabilities))) { return; } if (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.VDBG) { android.util.Log.d(com.android.server.connectivity.tethering.UpstreamNetworkMonitor.TAG, java.lang.String.format("EVENT_ON_CAPABILITIES for %s: %s", network, newNc)); } mNetworkMap.put(network, new android.net.NetworkState(null, prev.linkProperties, newNc, network, null, null)); notifyTarget(com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_CAPABILITIES, network); }
@com.android.annotations.NonNull @java.lang.Override public com.android.ide.common.process.ProcessResult execute(@com.android.annotations.NonNull com.android.ide.common.process.ProcessInfo processInfo, @com.android.annotations.NonNull com.android.ide.common.process.ProcessOutputHandler processOutputHandler) { java.util.List<java.lang.String> command = com.google.common.collect.Lists.newArrayList(); command.add(processInfo.getExecutable()); command.addAll(processInfo.getArgs()); java.lang.String commandString = com.google.common.base.Joiner.on(' ').join(command); mLogger.info(("command: " + commandString)); try { java.lang.ProcessBuilder processBuilder = new java.lang.ProcessBuilder(command); java.util.Map<java.lang.String, java.lang.Object> envVariableMap = processInfo.getEnvironment(); if (!(envVariableMap.isEmpty())) { java.util.Map<java.lang.String, java.lang.String> env = processBuilder.environment(); for (java.util.Map.Entry<java.lang.String, java.lang.Object> entry : envVariableMap.entrySet()) { env.put(entry.getKey(), entry.getValue().toString()); } } java.lang.Process process = processBuilder.start(); com.android.ide.common.process.ProcessOutput output = processOutputHandler.createOutput(); int exitCode = com.android.ide.common.process.DefaultProcessExecutor.grabProcessOutput(process, output); processOutputHandler.handleOutput(output); return new com.android.ide.common.process.ProcessResultImpl(commandString, exitCode); } catch (java.io.IOException e) { return new com.android.ide.common.process.ProcessResultImpl(commandString, e); } catch (java.lang.InterruptedException e) { java.lang.Thread.currentThread().interrupt(); return new com.android.ide.common.process.ProcessResultImpl(commandString, e); } catch (com.android.ide.common.process.ProcessException e) { return new com.android.ide.common.process.ProcessResultImpl(commandString, e); } }
public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if ((obj == null) || ((getClass()) != (obj.getClass()))) return false; java.text.DateFormatSymbols that = ((java.text.DateFormatSymbols) (obj)); if (!(((((((((((((((java.util.Arrays.equals(eras, that.eras)) && (java.util.Arrays.equals(months, that.months))) && (java.util.Arrays.equals(shortMonths, that.shortMonths))) && (java.util.Arrays.equals(tinyMonths, that.tinyMonths))) && (java.util.Arrays.equals(weekdays, that.weekdays))) && (java.util.Arrays.equals(shortWeekdays, that.shortWeekdays))) && (java.util.Arrays.equals(tinyWeekdays, that.tinyWeekdays))) && (java.util.Arrays.equals(standAloneMonths, that.standAloneMonths))) && (java.util.Arrays.equals(shortStandAloneMonths, that.shortStandAloneMonths))) && (java.util.Arrays.equals(tinyStandAloneMonths, that.tinyStandAloneMonths))) && (java.util.Arrays.equals(standAloneWeekdays, that.standAloneWeekdays))) && (java.util.Arrays.equals(shortStandAloneWeekdays, that.shortStandAloneWeekdays))) && (java.util.Arrays.equals(tinyStandAloneWeekdays, that.tinyStandAloneWeekdays))) && (java.util.Arrays.equals(ampms, that.ampms))) && ((((localPatternChars) != null) && (localPatternChars.equals(that.localPatternChars))) || (((localPatternChars) == null) && ((that.localPatternChars) == null))))) { return false; } if (((!(isZoneStringsSet)) && (!(that.isZoneStringsSet))) && (java.util.Objects.equals(locale, that.locale))) { return true; } return java.util.Arrays.deepEquals(getZoneStringsWrapper(), that.getZoneStringsWrapper()); }
@org.junit.Test public void testSplitAtTime() { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.ENGLISH); com.ibm.icu.util.BasicTimeZone honoluluTz = ((com.ibm.icu.util.BasicTimeZone) (com.ibm.icu.util.TimeZone.getTimeZone("Pacific/Honolulu"))); int honoluluRawOffset = -36000000; int honoluluDstOffset = 0; java.lang.String honoluluOldName = null; java.lang.String honoluluNewName = "Hawaii-Aleutian Standard Time"; java.time.Instant startInstant = java.time.Instant.EPOCH; java.time.Instant endInstant = java.time.Instant.ofEpochSecond(631152000L); com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod honoluluPeriod = com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod.create(timeZoneNames, honoluluTz, startInstant, endInstant); java.time.Instant partitionInstant = java.time.Instant.ofEpochSecond(500000000L); com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod[] shards = com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod.splitAtTime(honoluluPeriod, timeZoneNames, honoluluTz, partitionInstant); assertEquals(startInstant, shards[0].getStartInstant()); assertEquals(partitionInstant, shards[0].getEndInstant()); assertEquals(honoluluRawOffset, shards[0].getRawOffsetMillis()); assertEquals(honoluluDstOffset, shards[0].getDstOffsetMillis()); assertEquals(honoluluOldName, shards[0].getName()); assertEquals(partitionInstant, shards[1].getStartInstant()); assertEquals(endInstant, shards[1].getEndInstant()); assertEquals(honoluluRawOffset, shards[1].getRawOffsetMillis()); assertEquals(honoluluDstOffset, shards[1].getDstOffsetMillis()); assertEquals(honoluluNewName, shards[1].getName()); }
public static final void main(java.lang.String[] argv) { com.android.internal.os.RuntimeInit.enableDdms(); if (((argv.length) == 2) && (argv[1].equals("application"))) { if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, "RuntimeInit: Starting application"); com.android.internal.os.RuntimeInit.redirectLogStreams(); } else { if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, "RuntimeInit: Starting tool"); } com.android.internal.os.RuntimeInit.commonInit(); com.android.internal.os.RuntimeInit.nativeFinishInit(); if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, "Leaving RuntimeInit!"); }
static float $opt$noinline$LongToFloat(long a) { if (Main.doThrow) throw new java.lang.Error(); return ((float) (a)); }
private com.android.internal.telephony.RILRequest findAndRemoveRequestFromList(int serial) { com.android.internal.telephony.RILRequest rr = null; synchronized(mRequestList) { rr = mRequestList.get(serial); if (rr != null) { mRequestList.remove(serial); } } return rr; }
@java.lang.Override public void runConformTest(java.lang.String[] srcDescription) { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeList = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(1); excludeList.add(com.android.jack.test.toolchain.JillBasedToolchain.class); com.android.jack.test.toolchain.JackBasedToolchain jackToolchain = null; try { jackToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, excludeList); } catch (org.junit.internal.AssumptionViolatedException e) { return; } try { java.io.File sourceFolder = buildSourceFolder(srcDescription); java.io.File dexOutDir = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); jackToolchain.addToClasspath(jackToolchain.getDefaultBootClasspath()); jackToolchain.setSourceLevel(SourceLevel.JAVA_8); jackToolchain.srcToExe(dexOutDir, false, sourceFolder); } catch (java.lang.Exception e) { e.printStackTrace(); junit.framework.Assert.fail(); } }
@java.lang.Override public void close() throws java.io.IOException { if (hasEntries) { super.close(); } else { out.close(); } }
@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JSynchronizedBlock jSyncBock) { if (!(jSyncBock.getLockExpr().getType().isSameType(lockClass))) { return; } tr.append(new com.android.jack.transformations.request.PrependStatement(jSyncBock.getSynchronizedBlock(), makeRequestCall(jSyncBock.getSourceInfo()))); com.android.jack.ir.ast.JTryStatement tryStmt = makeTryStatement(jSyncBock.getSourceInfo(), jSyncBock); tr.append(new com.android.jack.transformations.request.Replace(jSyncBock, tryStmt)); }
public static void main(java.lang.String[] args) { Main.InlineVoid(); if ((Main.InlineInt()) != 4) { throw new java.lang.Error(); } if ((Main.InlineWide()) != 8L) { throw new java.lang.Error(); } if ((Main.InlineParameter(42)) != 42) { throw new java.lang.Error(); } if ((Main.InlineWideParameter(4294967297L)) != 4294967297L) { throw new java.lang.Error(); } if ((Main.InlineReferenceParameter(Main.class)) != (Main.class)) { throw new java.lang.Error(); } if ((Main.InlineAdd()) != 8) { throw new java.lang.Error(); } if (((Main.InlineFieldAccess()) != 43) || ((Main.InlineFieldAccess()) != 44)) { throw new java.lang.Error(); } if ((Main.InlineWithControlFlow(true)) != 4) { throw new java.lang.Error(); } if ((Main.InlineWithControlFlow(false)) != 2) { throw new java.lang.Error(); } if ((Main.InlinedIntrinsicsAreStillIntrinsic()) != 1) { throw new java.lang.Error(); } if ((Main.returnAbs((-1))) != 1) { throw new java.lang.Error(); } }
@java.lang.Override public void onPrivateDnsValidationEvent(int netId, java.lang.String ipAddress, java.lang.String hostname, boolean validated) { try { mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_PRIVATE_DNS_VALIDATION_UPDATE, new com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate(netId, java.net.InetAddress.parseNumericAddress(ipAddress), hostname, validated))); } catch (java.lang.IllegalArgumentException e) { com.android.server.ConnectivityService.loge("Error parsing ip address in validation event"); } }
@java.lang.Override public void freeUnderlyingResources() { int spi = mSpi.getSpi(); try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, mConfig.getSourceAddress(), mConfig.getDestinationAddress(), spi, mConfig.getMarkValue(), mConfig.getMarkMask()); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ("Failed to delete SA with ID: " + (mResourceId))); } getResourceTracker().give(); }
void cleanup() { mRegularScanClients.clear(); mBatchClients.clear(); mSuspendedScanClients.clear(); mScanNative.cleanup(); if ((mActivityManager) != null) { try { mActivityManager.removeOnUidImportanceListener(mUidImportanceListener); } catch (java.lang.IllegalArgumentException e) { android.util.Log.w(com.android.bluetooth.gatt.ScanManager.TAG, "exception when invoking removeOnUidImportanceListener", e); } } if ((mDm) != null) { mDm.unregisterDisplayListener(mDisplayListener); } if ((mHandler) != null) { mHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mHandler.getLooper(); if (looper != null) { looper.quitSafely(); } mHandler = null; } }
public void onEnabledForegroundNfcFServiceChanged(android.content.ComponentName component) { if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, "Enabled foreground service changed."); synchronized(mLock) { if (component != null) { if ((mEnabledForegroundService) != null) { return; } mEnabledForegroundService = component; } else { if ((mEnabledForegroundService) == null) { return; } mEnabledForegroundService = null; } generateForegroundT3tIdentifiersCacheLocked(); } }
@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, (((" onConnect BluetoothSocket :" + socket) + " \n :device :") + device)); } if (!(mAcceptNewConnections)) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ((" onConnect BluetoothSocket :" + socket) + " rejected")); return false; } com.android.bluetooth.BluetoothObexTransport transport = new com.android.bluetooth.BluetoothObexTransport(socket); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.opp.BluetoothOppService.MSG_INCOMING_BTOPP_CONNECTION); msg.obj = transport; msg.sendToTarget(); mAcceptNewConnections = false; return true; }
private void scheduleTimeout() { mHandler.removeMessages(com.android.cts.verifier.managedprovisioning.ByodHelperActivity.MSG_TIMEOUT); mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.cts.verifier.managedprovisioning.ByodHelperActivity.MSG_TIMEOUT), com.android.cts.verifier.managedprovisioning.ByodHelperActivity.MSG_TIMEOUT_MILLISEC); }
public void writeToParcel(android.os.Parcel dest, int flags) { networkCapabilities.writeToParcel(dest, flags); dest.writeInt(legacyType); dest.writeInt(requestId); dest.writeString(type.name()); }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); dest.writeArraySet(new android.util.ArraySet(mUids)); }
@java.lang.Override public boolean canAddMoreManagedProfiles() { com.android.server.pm.UserManagerService.checkManageUsersPermission("check if more managed profiles can be added."); if (android.app.ActivityManager.isLowRamDeviceStatic()) { return false; } synchronized(mPackagesLock) { if ((numberOfUsersOfTypeLocked(UserInfo.FLAG_MANAGED_PROFILE, true)) >= (com.android.server.pm.UserManagerService.MAX_MANAGED_PROFILES)) { return false; } int usersCount = getAliveUsersExcludingGuestsCountLocked(); return (usersCount == 1) || (usersCount < (android.os.UserManager.getMaxSupportedUsers())); } }
@org.junit.Test public void testCompile021() throws java.lang.Exception { java.lang.String packageName = "com.android.jack.switchstatement.test021.jack"; java.lang.String classPrefix = (packageName.replace('.', '_')) + "_"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put("Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo("java_lang_Thread$State", true)); checkCompiledCode(packageName, input); }
private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, com.android.rs.test.Int2 javaResult, com.android.rs.test.Int2 rsResult) { final boolean success = ((javaResult.x) == (rsResult.x)) && ((javaResult.y) == (rsResult.y)); java.lang.String status = (success) ? "PASSED" : "FAILED"; if (success && (t != null)) status += " " + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((((((((((((testName + ": java (") + (javaResult.x)) + ", ") + (javaResult.y)) + ")") + ", rs (") + (rsResult.x)) + ", ") + (rsResult.y)) + ")") + ": ") + status)); return success; }
public static void updateThread(android.database.sqlite.SQLiteDatabase db, long thread_id) { if (thread_id < 0) { com.android.providers.telephony.MmsSmsDatabaseHelper.updateThreads(db, null, null); return; } com.android.providers.telephony.MmsSmsDatabaseHelper.updateThreads(db, "(thread_id = ?)", new java.lang.String[]{ java.lang.String.valueOf(thread_id) }); }
public void testMinimalSizeDocked() throws java.lang.Exception { if (!(supportsSplitScreenMultiWindow())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(android.server.cts.INFO, "Skipping test: no multi-window support"); return; } testMinimalSize(android.server.cts.DOCKED_STACK_ID); }
void sendMediaKeyEvent(int key, int state) { com.android.bluetooth.avrcp.MediaPlayerList.d(((("sendMediaKeyEvent: key=" + key) + " state=") + state)); int action = (state == 0) ? android.view.KeyEvent.ACTION_DOWN : android.view.KeyEvent.ACTION_UP; android.view.KeyEvent event = new android.view.KeyEvent(action, com.android.bluetooth.avrcp.AvrcpPassthrough.toKeyCode(key)); mMediaSessionManager.dispatchMediaKeyEvent(event); }
@java.lang.Override @javax.annotation.Nonnull java.io.OutputStream openWrite(@javax.annotation.Nonnull final com.android.sched.vfs.MessageDigestFS.MessageDigestVFile file) { throw new java.lang.UnsupportedOperationException(); }
public void reloadSdk(com.android.utils.ILogger log) { mTargetDirs.clear(); java.util.ArrayList<com.android.sdklib.IAndroidTarget> targets = new java.util.ArrayList<com.android.sdklib.IAndroidTarget>(); com.android.sdklib.SdkManager.loadPlatforms(mOsSdkPath, targets, mTargetDirs, log); com.android.sdklib.SdkManager.loadAddOns(mOsSdkPath, targets, mTargetDirs, log); java.util.Collections.sort(targets); setTargets(targets.toArray(new com.android.sdklib.IAndroidTarget[targets.size()])); initializeSamplePaths(log); }
java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>[] candidate() default { };
private void checkAbsShort4Ushort4() { android.renderscript.Allocation inValue = CreateRandomAllocation(mRS, Element.DataType.SIGNED_16, 4, 2570957184536780775L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_16, 4), android.renderscript.cts.INPUTSIZE); script.forEach_testAbsShort4Ushort4(inValue, out); verifyResultsAbsShort4Ushort4(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAbsShort4Ushort4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_16, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAbsShort4Ushort4(inValue, out); verifyResultsAbsShort4Ushort4(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAbsShort4Ushort4: " + (e.toString()))); } }
public synchronized void dispose() { if ((mService) == null) { return; } try { mService.dispose(mAppName, mSubscriptionId); } catch (android.os.RemoteException e) { } mService = null; }
private void startUSBTethering() { com.android.pmc.PMCMainActivity.OnStartTetheringCallback tetherCallback = new com.android.pmc.PMCMainActivity.OnStartTetheringCallback(); mConnManager.startTethering(ConnectivityManager.TETHERING_USB, true, tetherCallback); try { java.lang.Thread.sleep(mProvisionCheckSleep); } catch (java.lang.InterruptedException e) { android.util.Log.d(com.android.pmc.PMCMainActivity.TAG, "Sleep exception after enabling USB tethering"); } if (mTethered) { mBtnStart.setEnabled(false); mRadioGroup.setFocusable(false); mTextView.setText("Started usb tethering"); } }
public void onBluetoothStateChange(boolean on);
public void startTrackingBssids(android.net.wifi.WifiScanner.BssidInfo[] bssidInfos, int apLostThreshold, android.net.wifi.WifiScanner.BssidListener listener) { throw new java.lang.UnsupportedOperationException(); }
public int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws android.system.ErrnoException, java.io.InterruptedIOException;
@java.lang.Override public void apply() { for (java.lang.Object candidate : toAnnotate) { if (candidate instanceof com.android.jack.ir.ast.Annotable) { com.android.jack.ir.ast.Annotable annotable = ((com.android.jack.ir.ast.Annotable) (candidate)); if (annotable.getAnnotations(annotation).isEmpty()) { com.android.jack.ir.ast.JAnnotationLiteral literal = new com.android.jack.ir.ast.JAnnotationLiteral(com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN, annotation.getRetentionPolicy(), annotation); annotable.addAnnotation(literal); literal.updateParents(((com.android.jack.ir.ast.JNode) (annotable))); } } } }
@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.VPath getPath() { return wrappedFile.getPath(); }
void recordScanStop() { if (!(isScanning)) return; (this.scansStopped)++; isScanning = false; stopTime = java.lang.System.currentTimeMillis(); long currTime = (stopTime) - (startTime); isOpportunisticScan = false; isBackgroundScan = false; minScanTime = java.lang.Math.min(currTime, minScanTime); maxScanTime = java.lang.Math.max(currTime, maxScanTime); totalScanTime += currTime; lastScans.add(currTime); if ((lastScans.size()) > (com.android.bluetooth.gatt.ContextMap.ScanStats.NUM_SCAN_DURATIONS_KEPT)) { lastScans.remove(0); } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_STOP); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setInitiator(appName); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); synchronized(mScanEvents) { if ((mScanEvents.size()) == (com.android.bluetooth.gatt.ContextMap.NUM_SCAN_EVENTS_KEPT)) mScanEvents.remove(0); mScanEvents.add(scanEvent); } }
public static boolean updateProjects(org.eclipse.jdt.core.IJavaProject[] androidProjects) { try { int projectCount = androidProjects.length; org.eclipse.jdt.core.IClasspathContainer[] libraryContainers = new org.eclipse.jdt.core.IClasspathContainer[projectCount]; org.eclipse.jdt.core.IClasspathContainer[] dependencyContainers = new org.eclipse.jdt.core.IClasspathContainer[projectCount]; for (int i = 0; i < projectCount; i++) { libraryContainers[i] = com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.allocateLibraryContainer(androidProjects[i]); dependencyContainers[i] = com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.allocateDependencyContainer(androidProjects[i]); } org.eclipse.jdt.core.JavaCore.setClasspathContainer(new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.AdtConstants.CONTAINER_PRIVATE_LIBRARIES), androidProjects, libraryContainers, new org.eclipse.core.runtime.NullProgressMonitor()); org.eclipse.jdt.core.JavaCore.setClasspathContainer(new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.AdtConstants.CONTAINER_DEPENDENCIES), androidProjects, dependencyContainers, new org.eclipse.core.runtime.NullProgressMonitor()); return true; } catch (org.eclipse.jdt.core.JavaModelException e) { return false; } }
public void close() { android.util.Log.d(android.net.IpSecTransform.TAG, ("Removing Transform with Id " + (mResourceId))); if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { mCloseGuard.close(); return; } try { android.net.IIpSecService svc = getIpSecService(); svc.deleteTransform(mResourceId); stopNattKeepalive(); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } finally { mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID; mCloseGuard.close(); } }
public int size() { return configs.length; }
private void setServerMode(@javax.annotation.Nonnull com.android.jack.server.ServerMode newMode) { synchronized(lock) { if (this.serverMode.equals(newMode)) { return; } com.android.jack.server.ServerMode oldMode = this.serverMode; this.serverMode = newMode; com.android.jack.server.JackHttpServer.logger.log(java.util.logging.Level.INFO, ((("Server mode changing from " + oldMode) + " to ") + newMode)); com.android.jack.server.JackHttpServer.ServerModeWatcher watcher = modeWatchers.get(newMode); if (watcher != null) { watcher.changedMode(oldMode, newMode); } } }
@java.lang.Override public void testFailed(com.android.ide.eclipse.adt.internal.launch.junit.runtime.TestFailure status, com.android.ddmlib.testrunner.TestIdentifier test, java.lang.String trace) { }
public final com.android.ide.eclipse.adt.internal.resources.manager.ResourceRepository getRepository() { return mFolder.getRepository(); }
public void deviceConnected(final com.android.ddmlib.IDevice device) { executeInBackground("Connecting device", new java.lang.Runnable() { public void run() { if (device.isOnline()) { com.android.hierarchyviewerlib.device.DeviceBridge.setupDeviceForward(device); if (!(com.android.hierarchyviewerlib.device.DeviceBridge.isViewServerRunning(device))) { if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { try { java.lang.Thread.sleep(2000); } catch (java.lang.InterruptedException e) { } if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, ("Unable to debug device " + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); } else { loadViewServerInfoAndWindows(device); } return; } } loadViewServerInfoAndWindows(device); } } }); }
public void testReadWrite_NonBlock_Normal() throws java.lang.Exception { byte[] sourceArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; byte[] targetArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; for (int i = 0; i < (sourceArray.length); i++) { sourceArray[i] = ((byte) (i)); } this.channel1.configureBlocking(false); this.channel2.configureBlocking(false); channel1.connect(channel2Address); channel2.connect(channel1Address); readWriteReadData(this.channel1, sourceArray, this.channel2, targetArray, org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL, "testReadWrite_NonBlock_Normal"); }
private org.eclipse.core.resources.IResource copyJarIntoProject(org.eclipse.core.resources.IProject project, java.io.File jarPath, org.eclipse.core.runtime.IProgressMonitor monitor) throws java.io.IOException, org.eclipse.core.runtime.CoreException { org.eclipse.core.resources.IFolder resFolder = project.getFolder(SdkConstants.FD_NATIVE_LIBS); if (!(resFolder.exists())) { resFolder.create(IResource.FORCE, true, new org.eclipse.core.runtime.SubProgressMonitor(monitor, 1)); } org.eclipse.core.resources.IFile destFile = resFolder.getFile(jarPath.getName()); org.eclipse.core.runtime.IPath loc = destFile.getLocation(); java.io.File destPath = loc.toFile(); if ((!(destPath.isFile())) || (!(isSameFile(jarPath, destPath)))) { copyFile(jarPath, destPath); } return destFile; }
public android.graphics.Bitmap getPhoto(int appWidgetId) { android.database.Cursor c = null; android.graphics.Bitmap bitmap = null; try { android.database.sqlite.SQLiteDatabase db = getReadableDatabase(); java.lang.String[] selectionArgs = new java.lang.String[]{ java.lang.String.valueOf(appWidgetId) }; c = db.query(com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.TABLE_PHOTOS, com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.PHOTOS_PROJECTION, ((com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.FIELD_APPWIDGET_ID) + "=?"), selectionArgs, null, null, null, null); if ((c != null) && (com.cooliris.media.PhotoAppWidgetProvider.LOGD)) { android.util.Log.d(com.cooliris.media.PhotoAppWidgetProvider.TAG, ("getPhoto query count=" + (c.getCount()))); } if ((c != null) && (c.moveToFirst())) { byte[] data = c.getBlob(com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.INDEX_PHOTO_BLOB); if (data != null) { bitmap = android.graphics.BitmapFactory.decodeByteArray(data, 0, data.length); } } } catch (android.database.sqlite.SQLiteException e) { android.util.Log.e(com.cooliris.media.PhotoAppWidgetProvider.TAG, "Could not load photo from database", e); } finally { if (c != null) { c.close(); } } return bitmap; }
@java.lang.Override public java.lang.String installPackage(java.lang.String packageFilePath, boolean reinstall, java.lang.String... extraArgs) throws com.android.ddmlib.InstallException { try { java.lang.String remoteFilePath = syncPackageToDevice(packageFilePath); java.lang.String result = installRemotePackage(remoteFilePath, reinstall, extraArgs); removeRemotePackage(remoteFilePath); return result; } catch (java.io.IOException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.AdbCommandRejectedException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.TimeoutException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.SyncException e) { throw new com.android.ddmlib.InstallException(e); } }
@java.lang.Override public com.android.monkeyrunner.easy.HierarchyViewer getHierarchyViewer() { return new com.android.monkeyrunner.easy.HierarchyViewer(device); }
@java.lang.Override public int bulkInsert(android.net.Uri uri, android.content.ContentValues[] values) { int match = com.android.providers.media.MediaProvider.URI_MATCHER.match(uri); if (match == (com.android.providers.media.MediaProvider.VOLUMES)) { return super.bulkInsert(uri, values); } com.android.providers.media.MediaProvider.DatabaseHelper helper = getDatabaseForUri(uri); if (helper == null) { throw new java.lang.UnsupportedOperationException(("Unknown URI: " + uri)); } android.database.sqlite.SQLiteDatabase db = helper.getWritableDatabase(); if (db == null) { throw new java.lang.IllegalStateException(("Couldn't open database for " + uri)); } if ((match == (com.android.providers.media.MediaProvider.AUDIO_PLAYLISTS_ID)) || (match == (com.android.providers.media.MediaProvider.AUDIO_PLAYLISTS_ID_MEMBERS))) { return playlistBulkInsert(db, uri, values); } else if (match == (com.android.providers.media.MediaProvider.MTP_OBJECT_REFERENCES)) { int handle = java.lang.Integer.parseInt(uri.getPathSegments().get(2)); return setObjectReferences(helper, db, handle, values); } db.beginTransaction(); java.util.ArrayList<java.lang.Long> notifyRowIds = new java.util.ArrayList<java.lang.Long>(); int numInserted = 0; try { int len = values.length; for (int i = 0; i < len; i++) { if ((values[i]) != null) { insertInternal(uri, match, values[i], notifyRowIds); } } numInserted = len; db.setTransactionSuccessful(); } finally { db.endTransaction(); } if (uri != null) { if (uri.toString().startsWith("content://media/external/")) { notifyMtp(notifyRowIds); } } getContext().getContentResolver().notifyChange(uri, null); return numInserted; }
public void testSerializeSession_NoStatusResponses() throws java.lang.Exception { org.conscrypt.OpenSSLSessionImpl mockSession = mock(org.conscrypt.OpenSSLSessionImpl.class); when(mockSession.getId()).thenReturn(new byte[]{ 17, 9, 3, 32 }); when(mockSession.getPeerHost()).thenReturn("ssl.example.com"); when(mockSession.getPeerPort()).thenReturn(443); when(mockSession.getEncoded()).thenReturn(new byte[]{ 1, 2, 3 }); when(mockSession.getStatusResponses()).thenReturn(java.util.Collections.<byte[]>emptyList()); java.security.cert.Certificate mockCert = mock(java.security.cert.Certificate.class); when(mockCert.getEncoded()).thenReturn(new byte[]{ 5, 6, 7, 16 }); when(mockSession.getPeerCertificates()).thenReturn(new java.security.cert.Certificate[]{ mockCert }); org.conscrypt.SSLClientSessionCache mockCache = mock(org.conscrypt.SSLClientSessionCache.class); org.conscrypt.ClientSessionContext context = new org.conscrypt.ClientSessionContext(); context.setPersistentCache(mockCache); context.putSession(mockSession); verify(mockCache).putSessionData(eq(mockSession), any(byte[].class)); }
public java.io.FileDescriptor open(java.lang.String path, int flags, int mode) throws android.system.ErrnoException { return os.open(path, flags, mode); }
private void queryNewDeviceForInfo(com.android.ddmlib.Device device) { try { queryProperties(device); queryNewDeviceForMountingPoint(device, IDevice.MNT_EXTERNAL_STORAGE); queryNewDeviceForMountingPoint(device, IDevice.MNT_DATA); queryNewDeviceForMountingPoint(device, IDevice.MNT_ROOT); if (device.isEmulator()) { com.android.ddmlib.EmulatorConsole console = com.android.ddmlib.EmulatorConsole.getConsole(device); if (console != null) { device.setAvdName(console.getAvdName()); console.close(); } } } catch (com.android.ddmlib.TimeoutException e) { com.android.ddmlib.Log.w("DeviceMonitor", java.lang.String.format("Connection timeout getting info for device %s", device.getSerialNumber())); } catch (com.android.ddmlib.AdbCommandRejectedException e) { com.android.ddmlib.Log.w("DeviceMonitor", java.lang.String.format("Adb rejected command to get device %1$s info: %2$s", device.getSerialNumber(), e.getMessage())); } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { com.android.ddmlib.Log.w("DeviceMonitor", java.lang.String.format("Adb shell command took too long returning info for device %s", device.getSerialNumber())); } catch (java.io.IOException e) { com.android.ddmlib.Log.w("DeviceMonitor", java.lang.String.format("IO Error getting info for device %s", device.getSerialNumber())); } catch (java.lang.InterruptedException e) { com.android.ddmlib.Log.w("DeviceMonitor", java.lang.String.format("Interrupted getting info for device %s", device.getSerialNumber())); } catch (java.util.concurrent.ExecutionException e) { com.android.ddmlib.Log.w("DeviceMonitor", java.lang.String.format("ExecutionException getting info for device %s", device.getSerialNumber())); } }
@java.lang.Override public int getTargetSdkVersion(@com.android.annotations.NonNull java.io.File manifestFile) { try { java.lang.Integer value = com.android.xml.AndroidManifest.getTargetSdkVersion(new com.android.io.FileWrapper(manifestFile)); if (value != null) { return value; } else { return -1; } } catch (javax.xml.xpath.XPathExpressionException e) { } catch (com.android.io.StreamException e) { throw new java.lang.RuntimeException(e); } return -1; }
public int write(java.nio.ByteBuffer src) throws java.io.IOException { ensureOpen(); if (!(writable)) throw new java.nio.channels.NonWritableChannelException(); synchronized(positionLock) { int n = 0; int ti = -1; java.lang.Object traceContext = sun.misc.IoTrace.fileWriteBegin(path); try { begin(); ti = threads.add(); if (!(isOpen())) return 0; do { n = sun.nio.ch.IOUtil.write(fd, src, (-1), nd); } while ((n == (sun.nio.ch.IOStatus.INTERRUPTED)) && (isOpen()) ); return sun.nio.ch.IOStatus.normalize(n); } finally { threads.remove(ti); end((n > 0)); sun.misc.IoTrace.fileWriteEnd(traceContext, (n > 0 ? n : 0)); assert sun.nio.ch.IOStatus.check(n); } } }
private void computeEditHighlightRegions() { editHighlightRegions.clear(); int f = editSegment.first; int s = editSegment.second; int min = java.lang.Math.min(f, s); int diff = java.lang.Math.abs((f - s)); int imageWidth = image.getWidth(); int imageHeight = image.getHeight(); switch (editRegion) { case LEFT_PATCH : editPatchRegion = displayCoordinates(new java.awt.Rectangle(0, min, 1, diff)); editHighlightRegions.addAll(getHorizontalHighlightRegions(0, min, imageWidth, diff)); break; case RIGHT_PADDING : editPatchRegion = displayCoordinates(new java.awt.Rectangle((imageWidth - 1), min, 1, diff)); editHighlightRegions.addAll(getHorizontalHighlightRegions(0, min, imageWidth, diff)); break; case TOP_PATCH : editPatchRegion = displayCoordinates(new java.awt.Rectangle(min, 0, diff, 1)); editHighlightRegions.addAll(getVerticalHighlightRegions(min, 0, diff, imageHeight)); break; case BOTTOM_PADDING : editPatchRegion = displayCoordinates(new java.awt.Rectangle(min, (imageHeight - 1), diff, 1)); editHighlightRegions.addAll(getVerticalHighlightRegions(min, 0, diff, imageHeight)); default : assert false : editRegion; } }
public void updatePreferenceIntents(android.support.v7.preference.PreferenceGroup prefs, final java.lang.String acccountType, android.accounts.Account account) { final android.content.pm.PackageManager pm = mFragment.getActivity().getPackageManager(); for (int i = 0; i < (prefs.getPreferenceCount());) { android.support.v7.preference.Preference pref = prefs.getPreference(i); if (pref instanceof android.support.v7.preference.PreferenceGroup) { updatePreferenceIntents(((android.support.v7.preference.PreferenceGroup) (pref)), acccountType, account); } android.content.Intent intent = pref.getIntent(); if (intent != null) { if (android.text.TextUtils.equals(intent.getAction(), android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS)) { pref.setOnPreferenceClickListener(new com.android.settings.accounts.AccountTypePreferenceLoader.FragmentStarter(com.android.settings.location.LocationSettings.class.getName(), R.string.location_settings_title)); } else { android.content.pm.ResolveInfo ri = pm.resolveActivityAsUser(intent, PackageManager.MATCH_DEFAULT_ONLY, mUserHandle.getIdentifier()); if (ri == null) { prefs.removePreference(pref); continue; } intent.putExtra(com.android.settings.accounts.AccountTypePreferenceLoader.ACCOUNT_KEY, account); intent.setFlags(((intent.getFlags()) | (android.content.Intent.FLAG_ACTIVITY_NEW_TASK))); pref.setOnPreferenceClickListener(new android.support.v7.preference.Preference.OnPreferenceClickListener() { @java.lang.Override public boolean onPreferenceClick(android.support.v7.preference.Preference preference) { android.content.Intent prefIntent = preference.getIntent(); if (isSafeIntent(pm, prefIntent, acccountType)) { mFragment.getActivity().startActivityAsUser(prefIntent, mUserHandle); } else { android.util.Log.e(com.android.settings.accounts.AccountTypePreferenceLoader.TAG, (("Refusing to launch authenticator intent because" + "it exploits Settings permissions: ") + prefIntent)); } return true; } }); } } i++; } }
private long startingTask(@javax.annotation.Nonnull com.android.jack.server.ServerInfo info) throws com.android.jack.server.JackHttpServer.ServerClosedException { long id; synchronized(lock) { if (shuttingDown) { throw new com.android.jack.server.JackHttpServer.ServerClosedException(); } id = info.totalLocal; (info.totalLocal)++; setServerMode(ServerMode.WORK); (info.currentLocal)++; if ((info.currentLocal) > (info.maxLocal)) { info.maxLocal = info.currentLocal; } } return id; }
@android.support.annotation.VisibleForTesting public synchronized int getConnectionState() { com.android.bluetooth.hfp.HeadsetStateMachine.HeadsetStateBase state = ((com.android.bluetooth.hfp.HeadsetStateMachine.HeadsetStateBase) (getCurrentState())); if (state == null) { return android.bluetooth.BluetoothHeadset.STATE_DISCONNECTED; } return state.getConnectionStateInt(); }
public static int $noinline$doubleConditionEqualZero(double d) { if (Main.doThrow) { throw new java.lang.Error(); } return (d > 42.0) != false ? 13 : 54; }
private void handleConfiguredNetworksChanged() { java.util.List<android.net.wifi.WifiConfiguration> wifiConfigurations = mWifiManager.getConfiguredNetworks(); if (wifiConfigurations == null) { return; } mSavedNetworks.clear(); mSavedSsids.clear(); for (int i = 0; i < (wifiConfigurations.size()); i++) { android.net.wifi.WifiConfiguration wifiConfiguration = wifiConfigurations.get(i); if (((wifiConfiguration.status) != (WifiConfiguration.Status.ENABLED)) || (wifiConfiguration.useExternalScores)) { continue; } if ((wifiConfiguration.hasNoInternetAccess()) || (wifiConfiguration.isNoInternetAccessExpected())) { continue; } java.lang.String ssid = com.android.networkrecommendation.WifiConfigurationUtil.removeDoubleQuotes(wifiConfiguration); if (android.text.TextUtils.isEmpty(ssid)) { continue; } mSavedNetworks.put(ssid, wifiConfiguration); mSavedSsids.add(ssid); } mSavedSsidsInLastScan.retainAll(mSavedSsids); }
@java.lang.Override public void onResult(android.service.euicc.EuiccProfileInfo[] result) { try { callback.onComplete(EuiccCardManager.RESULT_OK, result); } catch (android.os.RemoteException exception) { throw exception.rethrowFromSystemServer(); } }
public void openCameraDevice(int cameraId) throws com.android.cts.verifier.camera.its.ItsException { com.android.cts.verifier.camera.its.Logt.i(com.android.cts.verifier.camera.its.ItsService.TAG, java.lang.String.format("Opening camera %d", cameraId)); java.lang.String[] devices; try { devices = mCameraManager.getCameraIdList(); if ((devices == null) || ((devices.length) == 0)) { throw new com.android.cts.verifier.camera.its.ItsException("No camera devices"); } if ((mMemoryQuota) == (-1)) { for (java.lang.String camId : devices) { android.hardware.camera2.CameraCharacteristics chars = mCameraManager.getCameraCharacteristics(camId); android.util.Size maxYuvSize = com.android.cts.verifier.camera.its.ItsUtils.getYuvOutputSizes(chars)[0]; int quota = (((maxYuvSize.getWidth()) * (maxYuvSize.getHeight())) * 4) * 3; if (quota > (mMemoryQuota)) { mMemoryQuota = quota; } } } } catch (android.hardware.camera2.CameraAccessException e) { throw new com.android.cts.verifier.camera.its.ItsException("Failed to get device ID list", e); } try { mCamera = mBlockingCameraManager.openCamera(devices[cameraId], mCameraListener, mCameraHandler); mCameraCharacteristics = mCameraManager.getCameraCharacteristics(devices[cameraId]); mSocketQueueQuota = new java.util.concurrent.Semaphore(mMemoryQuota, true); } catch (android.hardware.camera2.CameraAccessException e) { throw new com.android.cts.verifier.camera.its.ItsException("Failed to open camera", e); } catch (com.android.ex.camera2.blocking.BlockingCameraManager.BlockingOpenException e) { throw new com.android.cts.verifier.camera.its.ItsException("Failed to open camera (after blocking)", e); } mSocketRunnableObj.sendResponse("cameraOpened", ""); }
@java.lang.Override public int hashCode() { return com.google.common.base.Objects.hashCode(mSourceFile, mBuildToolsRevision); }
@java.lang.Override public void notifyDataActivationStateChanged(com.android.internal.telephony.Phone sender, int activationState) { try { mRegistry.notifySimActivationStateChangedForPhoneId(sender.getPhoneId(), sender.getSubId(), PhoneConstants.SIM_ACTIVATION_TYPE_DATA, activationState); } catch (android.os.RemoteException ex) { } }
protected void define(com.android.sdkmanager.CommandLineProcessor.Mode mode, boolean mandatory, java.lang.String verb, java.lang.String directObject, java.lang.String shortName, java.lang.String longName, java.lang.String description, java.lang.Object defaultValue) { assert !(mandatory && (mode == (com.android.sdkmanager.CommandLineProcessor.Mode.BOOLEAN))); assert shortName != null; assert longName != null; assert ((shortName.length()) > 0) || ((longName.length()) > 0); if (directObject == null) { directObject = com.android.sdkmanager.CommandLineProcessor.NO_VERB_OBJECT; } java.lang.String key = (((verb + "/") + directObject) + "/") + longName; mArguments.put(key, new com.android.sdkmanager.CommandLineProcessor.Arg(mode, mandatory, verb, directObject, shortName, longName, description, defaultValue)); }
private void verifyResultsAbsInt4Uint4(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { int[] arrayInValue = new int[(INPUTSIZE) * 4]; inValue.copyTo(arrayInValue); int[] arrayOut = new int[(INPUTSIZE) * 4]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 4; j++) { android.renderscript.cts.TestAbs.ArgumentsIntUint args = new android.renderscript.cts.TestAbs.ArgumentsIntUint(); args.inValue = arrayInValue[((i * 4) + j)]; android.renderscript.cts.CoreMathVerifier.computeAbs(args); int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; boolean valid = true; int neededUlf = 0; if ((args.out) != (arrayOut[((i * 4) + j)])) { valid = false; } if (!valid) { java.lang.StringBuilder message = new java.lang.StringBuilder(); message.append(java.lang.String.format("Input inValue: %d", args.inValue)); message.append("\n"); message.append(java.lang.String.format("Expected output out: %x", args.out)); message.append("\n"); message.append(java.lang.String.format("Actual output out: %x", arrayOut[((i * 4) + j)])); if ((args.out) != (arrayOut[((i * 4) + j)])) { message.append(" FAIL"); } message.append("\n"); assertTrue(((("Incorrect output for checkAbsInt4Uint4" + (relaxed ? "_relaxed" : "")) + ":\n") + (message.toString())), valid); } } } }
private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) != 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (!(info.isForwardLocked())) && (!isProfileGuidedFilter); int profileFlag = (isProfileGuidedFilter) ? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int hiddenApiFlag = (info.isAllowedToUseHiddenApi()) ? com.android.server.pm.Installer.DEXOPT_DISABLE_HIDDEN_API_CHECKS : 0; int dexFlags = (((((isPublic ? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable ? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | profileFlag) | (options.isBootComplete() ? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0)) | (options.isDexoptIdleBackgroundJob() ? com.android.server.pm.Installer.DEXOPT_IDLE_BACKGROUND_JOB : 0)) | hiddenApiFlag; return adjustDexoptFlags(dexFlags); }
public void skip(int i) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.skip(i); return; } int res = (mPos) + i; if ((res < 0) || (res > (mLen))) { throw new android.support.v8.renderscript.RSIllegalArgumentException(("out of range argument: " + i)); } mPos = res; }
public void fsync(java.io.FileDescriptor fd) throws android.system.ErrnoException;
@java.lang.Override public void enter() { turnOnMasterTetherSettings(); simChange.startListening(); mUpstreamNetworkMonitor.start(); mOffloadController.start(); if (upstreamWanted()) { mUpstreamWanted = true; chooseUpstreamType(true); mTryCell = false; } }
public int write(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer) throws android.system.ErrnoException, java.io.InterruptedIOException;
@org.junit.Test public void test001() { com.android.jack.java8.lambda.test037.jack.I i = ((com.android.jack.java8.lambda.test037.jack.I & java.io.Serializable) (() -> 10)); }
@org.junit.Test public void validatePolicyWithInvalidPolicyUpdate() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Policy policy = android.net.wifi.hotspot2.pps.PolicyTest.createPolicy(); policy.policyUpdate = new android.net.wifi.hotspot2.pps.UpdateParameter(); assertFalse(policy.validate()); }
@java.lang.Override public android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields, long start, long end) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, set, tag, fields, start, end, mAccessLevel, mCallingUid); } else if (uid == (android.os.Binder.getCallingUid())) { return getUidTagComplete().getHistory(template, null, uid, set, tag, fields, start, end, mAccessLevel, mCallingUid); } else { throw new java.lang.SecurityException((("Calling package " + (mCallingPackage)) + " cannot access tag information from a different uid")); } }
private void exportGradleWrapper(@com.android.annotations.NonNull java.io.File destDir) throws java.io.IOException { if (((mGradleWrapperLocation) != null) && (mGradleWrapperLocation.exists())) { java.io.File gradlewDest = new java.io.File(destDir, com.android.SdkConstants.FN_GRADLE_WRAPPER_UNIX); copyDir(new java.io.File(mGradleWrapperLocation, com.android.SdkConstants.FN_GRADLE_WRAPPER_UNIX), gradlewDest, null); boolean madeExecutable = gradlewDest.setExecutable(true); if (!madeExecutable) { reportWarning(((com.android.tools.gradle.eclipse.ImportModule) (null)), gradlewDest, "Could not make gradle wrapper script executable"); } copyDir(new java.io.File(mGradleWrapperLocation, com.android.SdkConstants.FN_GRADLE_WRAPPER_WIN), new java.io.File(destDir, com.android.SdkConstants.FN_GRADLE_WRAPPER_WIN), null); copyDir(new java.io.File(mGradleWrapperLocation, com.android.SdkConstants.FD_GRADLE), new java.io.File(destDir, com.android.SdkConstants.FD_GRADLE), null); } }
public static int $noinline$intConditionNotEqualOne(int i) { if (Main.doThrow) { throw new java.lang.Error(); } return (i > 42) == (Main.$inline$true()) ? 13 : 54; }
private void sendIPv6TetherUpdates(android.net.NetworkState upstreamState) { verify(mIPv6TetheringCoordinator, times(1)).addActiveDownstream(argThat(( sm) -> sm.linkProperties().getInterfaceName().equals(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME)), eq(IControlsTethering.STATE_TETHERED)); for (com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism : mTetheringDependencies.ipv6CoordinatorNotifyList) { android.net.NetworkState ipv6OnlyState = com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(false, true); tism.sendMessage(TetherInterfaceStateMachine.CMD_IPV6_TETHER_UPDATE, 0, 0, (upstreamState.linkProperties.isIPv6Provisioned() ? ipv6OnlyState.linkProperties : null)); } mLooper.dispatchAll(); }
public java.lang.String[] getIsimImpu(int subId) { com.android.internal.telephony.Phone phone = getPhone(subId); if (phone != null) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, "Requires READ_PRIVILEGED_PHONE_STATE"); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimImpu(); } else { return null; } } else { loge(("getIsimImpu phone is null for Subscription:" + subId)); return null; } }
void putBigEndian(byte[] a, boolean neg) { this.makeValid(); java.math.NativeBN.BN_bin2bn(a, a.length, neg, this.bignum); }
private static void handleHELO(com.android.ddmlib.Client client, java.nio.ByteBuffer data) { int version; int pid; int vmIdentLen; int appNameLen; java.lang.String vmIdent; java.lang.String appName; version = data.getInt(); pid = data.getInt(); vmIdentLen = data.getInt(); appNameLen = data.getInt(); vmIdent = getString(data, vmIdentLen); appName = getString(data, appNameLen); int userId = -1; boolean validUserId = false; if (data.hasRemaining()) { try { userId = data.getInt(); validUserId = true; } catch (java.nio.BufferUnderflowException e) { int expectedPacketLength = (20 + (appNameLen * 2)) + (vmIdentLen * 2); com.android.ddmlib.Log.e("ddm-hello", "Insufficient data in HELO chunk to retrieve user id."); com.android.ddmlib.Log.e("ddm-hello", ("Actual chunk length: " + (data.capacity()))); com.android.ddmlib.Log.e("ddm-hello", ("Expected chunk length: " + expectedPacketLength)); } } com.android.ddmlib.Log.d("ddm-hello", (((((((("HELO: v=" + version) + ", pid=") + pid) + ", vm='") + vmIdent) + "', app='") + appName) + "'")); com.android.ddmlib.ClientData cd = client.getClientData(); synchronized(cd) { if ((cd.getPid()) == pid) { cd.setVmIdentifier(vmIdent); cd.setClientDescription(appName); cd.isDdmAware(true); if (validUserId) { cd.setUserId(userId); } } else { com.android.ddmlib.Log.e("ddm-hello", (((("Received pid (" + pid) + ") does not match client pid (") + (cd.getPid())) + ")")); } } client = checkDebuggerPortForAppName(client, appName); if (client != null) { client.update(Client.CHANGE_NAME); } }
public android.content.ComponentName getServiceComponent() { return mDelegate.getServiceComponent(); }
public void deleteSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().deleteSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@java.lang.Override public void run() { org.eclipse.swt.widgets.FileDialog fd = new org.eclipse.swt.widgets.FileDialog(mImageCanvas.getShell(), org.eclipse.swt.SWT.SAVE); fd.setFilterExtensions(new java.lang.String[]{ "*.png" }); if ((com.android.ide.eclipse.gltrace.views.SaveImageAction.sLastUsedPath) != null) { fd.setFilterPath(com.android.ide.eclipse.gltrace.views.SaveImageAction.sLastUsedPath); } java.lang.String path = fd.open(); if (path == null) { return; } java.io.File f = new java.io.File(path); com.android.ide.eclipse.gltrace.views.SaveImageAction.sLastUsedPath = f.getParent(); mImageCanvas.exportImageTo(f); }
@java.lang.Override public boolean processMessage(android.os.Message message) { if (super.processMessage(message)) return true; maybeLogMessage(this, message.what); switch (message.what) { case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_REQUESTED : mLog.e("CMD_TETHER_REQUESTED while in local-only hotspot mode."); break; case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_CONNECTION_CHANGED : break; default : return false; } return true; }
@java.lang.Override public void execute(com.android.build.gradle.model.AndroidBinary androidBinary) { com.android.build.gradle.model.DefaultAndroidBinary binary = ((com.android.build.gradle.model.DefaultAndroidBinary) (androidBinary)); if (!(binary.getBuildType().getName().equals(BuilderConstants.DEBUG))) { return; } com.android.build.gradle.internal.variant.BaseVariantData testedVariantData = binary.getVariantData(); com.google.common.base.Preconditions.checkState((testedVariantData != null), "Internal error: tested variant must be created before test variant."); com.android.build.gradle.internal.variant.TestVariantData testVariantData = variantManager.createTestVariantData(testedVariantData, com.android.build.gradle.model.ANDROID_TEST); variantManager.getVariantDataList().add(testVariantData); variantManager.createTasksForVariantData(new com.android.build.gradle.model.TaskCollectionBuilderAdaptor(tasks), testVariantData); }
private void startApp(com.android.graphics.benchmark.ApkInfo apk) throws IntentFilter.MalformedMimeTypeException, java.io.IOException { android.os.Looper.prepare(); mHandler = new android.os.Handler(); registerReceiver(); mReport.begin(apk.getName()); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, ("Launching " + (apk.getPackageName()))); android.content.Intent intent = android.support.test.InstrumentationRegistry.getContext().getPackageManager().getLaunchIntentForPackage(apk.getPackageName()); for (com.android.graphics.benchmark.ApkInfo.Argument argument : mApk.getArgs()) { intent.putExtra(argument.getKey(), argument.getValue()); } android.support.test.InstrumentationRegistry.getContext().startActivity(intent); mHandler.postDelayed(() -> { if (!(mGotIntent)) { mHandler.getLooper().quit(); } }, mApk.getRunTime()); android.os.Looper.loop(); mReport.end(); }
public static void assertEquals(java.lang.String message, java.lang.Object expected, java.lang.Object actual) { if ((expected == null) && (actual == null)) { return; } if ((expected != null) && (expected.equals(actual))) { return; } junit.framework.Assert.fail(message, ((("expected " + expected) + " but was ") + actual)); }
public final void testGetLayoutParamsInfo() throws java.lang.Exception { com.android.ide.common.resources.platform.ViewClassInfo.LayoutParamsInfo info1 = _getLayoutParamsInfo(mock_android.view.ViewGroup.LayoutParams.class); assertNotNull(info1); assertNull(info1.getSuperClass()); com.android.ide.common.resources.platform.ViewClassInfo.LayoutParamsInfo info2 = _getLayoutParamsInfo(mock_android.widget.LinearLayout.LayoutParams.class); assertNotNull(info2); assertSame(info1, info2.getSuperClass()); com.android.ide.common.resources.platform.ViewClassInfo.LayoutParamsInfo info3 = _getLayoutParamsInfo(mock_android.widget.TableLayout.LayoutParams.class); assertNotNull(info3); assertNotSame(info1, info3.getSuperClass()); assertNotSame(info2, info3.getSuperClass()); assertSame(info1, info3.getSuperClass().getSuperClass()); }
@org.junit.Test public void testRunNormalInput() { mVtsPythonRunnerHelper = createMockVtsPythonRunnerHelper(CommandStatus.SUCCESS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); try { mTest.run(mMockInvocationListener); } catch (java.lang.IllegalArgumentException e) { fail(); e.printStackTrace(); } catch (com.android.tradefed.device.DeviceNotAvailableException e) { fail(); e.printStackTrace(); } }
public android.net.wifi.WifiConfiguration getMatchingWifiConfig(android.net.wifi.ScanResult scanResult) { if (scanResult == null) { android.util.Log.e(com.android.server.wifi.hotspot2.PasspointManager.TAG, "Attempt to get matching config for a null ScanResult"); return null; } Pair<com.android.server.wifi.hotspot2.PasspointProvider, com.android.server.wifi.hotspot2.PasspointMatch> matchedProvider = matchProvider(scanResult); if (matchedProvider == null) { return null; } android.net.wifi.WifiConfiguration config = matchedProvider.first.getWifiConfig(); config.SSID = com.android.server.wifi.util.ScanResultUtil.createQuotedSSID(scanResult.SSID); return config; }
public void testModf() { checkModfFloatFloatFloat(); checkModfFloat2Float2Float2(); checkModfFloat3Float3Float3(); checkModfFloat4Float4Float4(); }
@java.lang.Override public void run() { char[] charBuffer = new char[com.android.tradefed.util.ProcessHelper.ReaderThread.BUF_SIZE]; try { while (true) { int readCount = mReader.read(charBuffer, 0, charBuffer.length); if (readCount < 0) { break; } java.lang.String newRead = new java.lang.String(charBuffer, 0, readCount); int newLineLen = 0; if (newRead.endsWith("\r\n")) { newLineLen = 2; } else if (newRead.endsWith("\n")) { newLineLen = 1; } java.lang.String newReadPrint = newRead.substring(0, ((newRead.length()) - newLineLen)); switch (mLogType) { case STDOUT : com.android.tradefed.log.LogUtil.CLog.i(newReadPrint); break; case STDERR : com.android.tradefed.log.LogUtil.CLog.e(newReadPrint); break; } mBuffer.append(newRead); } } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e("%s: %s", getName(), e.toString()); } }
public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, long nativePtr) { if (referent == null) { throw new java.lang.IllegalArgumentException("referent is null"); } if (nativePtr == 0) { throw new java.lang.IllegalArgumentException("nativePtr is null"); } libcore.util.NativeAllocationRegistry.CleanerThunk thunk; libcore.util.NativeAllocationRegistry.CleanerRunner result; try { thunk = new libcore.util.NativeAllocationRegistry.CleanerThunk(); sun.misc.Cleaner cleaner = sun.misc.Cleaner.create(referent, thunk); result = new libcore.util.NativeAllocationRegistry.CleanerRunner(cleaner); libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); } catch (java.lang.VirtualMachineError vme) { libcore.util.NativeAllocationRegistry.applyFreeFunction(freeFunction, nativePtr); throw vme; } thunk.setNativePtr(nativePtr); return result; }
@java.lang.Override public void onRemoteRttRequest(android.telecom.Connection c) { java.lang.String id = mIdByConnection.get(c); if (id != null) { mAdapter.onRemoteRttRequest(id); } }
private int readUnsignedByte() throws java.io.IOException { return com.google.common.primitives.UnsignedBytes.toInt(mInput.readByte()); }
public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mTdScdmaRscp); out.writeInt(mLteRsrpBoost); out.writeBoolean(mIsGsm); out.writeBoolean(mUseOnlyRsrpForLteLevel); out.writeIntArray(mLteRsrpThresholds); }
public long getFreeSpace() { try { android.system.StructStatVfs sb = Libcore.os.statvfs(path); return (sb.f_bfree) * (sb.f_bsize); } catch (android.system.ErrnoException errnoException) { return 0; } }
void regularScanTimeout() { for (com.android.bluetooth.gatt.ScanClient client : mRegularScanClients) { if ((!(isOpportunisticScanClient(client))) && (!(isFirstMatchScanClient(client)))) { logd(("clientIf set to scan opportunisticly: " + (client.clientIf))); setOpportunisticScanClient(client); client.stats.setScanTimeout(); } } configureRegularScanParams(); if ((numRegularScanClients()) == 0) { logd("stop scan"); gattClientScanNative(false); } }
private static java.io.File copyAgentToFile(java.lang.String lib) throws java.lang.Exception { java.lang.ClassLoader cl = android.jvmti.attaching.cts.AttachingTest.class.getClassLoader(); assertTrue((cl instanceof dalvik.system.BaseDexClassLoader)); java.io.File copiedAgent = java.io.File.createTempFile("agent", ".so"); try (java.io.InputStream is = new java.io.FileInputStream(((dalvik.system.BaseDexClassLoader) (cl)).findLibrary(lib))) { try (java.io.OutputStream os = new java.io.FileOutputStream(copiedAgent)) { byte[] buffer = new byte[64 * 1024]; while (true) { int numRead = is.read(buffer); if (numRead == (-1)) { break; } os.write(buffer, 0, numRead); } } } return copiedAgent; }
@org.junit.Test public void testAdapterOnAutoConnect() { when(mAdapterService.getState()).thenReturn(BluetoothAdapter.STATE_ON); when(mAdapterService.isQuietModeEnabled()).thenReturn(false); android.bluetooth.BluetoothDevice[] bondedDevices = new android.bluetooth.BluetoothDevice[1]; bondedDevices[0] = mTestDevice; when(mAdapterService.getBondedDevices()).thenReturn(bondedDevices); when(mHeadsetService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mA2dpService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mAdapterService, mServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_STATE_CHANGED); intent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_ON); injector.onReceive(null, intent); executePendingMessages(1); verify(mHeadsetService, times(1)).connect(eq(mTestDevice)); verify(mA2dpService, times(1)).connect(eq(mTestDevice)); }
public boolean p2pFind() { if ((com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.find(); } else { return doBooleanCommand("P2P_FIND"); } }
private void checkRemainderFloat2Float2Float2() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 1109059158663849578L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 1109059158663849578L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testRemainderFloat2Float2Float2(inX, out); verifyResultsRemainderFloat2Float2Float2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRemainderFloat2Float2Float2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testRemainderFloat2Float2Float2(inX, out); verifyResultsRemainderFloat2Float2Float2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRemainderFloat2Float2Float2: " + (e.toString()))); } }
@java.lang.SuppressWarnings("SuspiciousNameCombination") @com.android.annotations.NonNull public com.android.ide.common.rendering.api.HardwareConfig getConfig() { com.android.sdklib.devices.Screen screen = mDevice.getDefaultHardware().getScreen(); int x = screen.getXDimension(); int y = screen.getYDimension(); int width; int height; if (x > y) { if ((mScreenOrientation) == (com.android.resources.ScreenOrientation.LANDSCAPE)) { width = x; height = y; } else { width = y; height = x; } } else { if ((mScreenOrientation) == (com.android.resources.ScreenOrientation.LANDSCAPE)) { width = y; height = x; } else { width = x; height = y; } } if ((mOverrideRenderHeight) != (-1)) { width = mOverrideRenderWidth; } if ((mOverrideRenderHeight) != (-1)) { height = mOverrideRenderHeight; } if ((mMaxRenderWidth) != (-1)) { width = mMaxRenderWidth; } if ((mMaxRenderHeight) != (-1)) { height = mMaxRenderHeight; } return new com.android.ide.common.rendering.api.HardwareConfig(width, height, screen.getPixelDensity(), ((float) (screen.getXdpi())), ((float) (screen.getYdpi())), screen.getSize(), mScreenOrientation, mDevice.getDefaultHardware().getScreen().getScreenRound(), ((mDevice.getDefaultHardware().getButtonType()) == (com.android.sdklib.devices.ButtonType.SOFT))); }
void onConnectStatusChanged(java.net.InetSocketAddress address, int status, boolean updateSocketState) { this.status = status; connectAddress = address; if (((status == (java.nio.SocketChannelImpl.SOCKET_STATUS_CONNECTED)) && updateSocketState) && ((socket) != null)) { socket.onConnect(connectAddress.getAddress(), connectAddress.getPort()); } }
public void testKeyPairGenerator_GenerateKeyPair_EC_Unencrypted_Success() throws java.lang.Exception { mGenerator.initialize(new android.security.KeyPairGeneratorSpec.Builder(getContext()).setAlias(android.security.AndroidKeyPairGeneratorTest.TEST_ALIAS_1).setKeyType("EC").setSubject(android.security.AndroidKeyPairGeneratorTest.TEST_DN_1).setSerialNumber(android.security.AndroidKeyPairGeneratorTest.TEST_SERIAL_1).setStartDate(android.security.AndroidKeyPairGeneratorTest.NOW).setEndDate(android.security.AndroidKeyPairGeneratorTest.NOW_PLUS_10_YEARS).build()); final java.security.KeyPair pair = mGenerator.generateKeyPair(); assertNotNull("The KeyPair returned should not be null", pair); assertKeyPairCorrect(pair, android.security.AndroidKeyPairGeneratorTest.TEST_ALIAS_1, "EC", 256, null, android.security.AndroidKeyPairGeneratorTest.TEST_DN_1, android.security.AndroidKeyPairGeneratorTest.TEST_SERIAL_1, android.security.AndroidKeyPairGeneratorTest.NOW, android.security.AndroidKeyPairGeneratorTest.NOW_PLUS_10_YEARS); }
private void recordCssUrl(@com.android.annotations.Nullable com.android.build.gradle.tasks.ResourceUsageAnalyzer.Resource from, @com.android.annotations.NonNull java.lang.String value) { if (!(referencedUrl(from, value))) { referencedString(value); mFoundWebContent = true; } }
private void createButton(org.eclipse.swt.widgets.Composite parent) { int style = org.eclipse.swt.SWT.FLAT; if (mIsToggle) { style |= org.eclipse.swt.SWT.TOGGLE; } mButton = new org.eclipse.swt.widgets.Button(parent, style); if ((mUiTooltip) != null) { mButton.setToolTipText(mUiTooltip); } if ((mImage) != null) { mButton.setImage(mImage); } if ((mUiLabel) != null) { mButton.setText(mUiLabel); } if ((mIsToggle) && (mDefaultValue)) { mButton.setSelection(true); } mButton.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { @java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { onSelected(mButton.getSelection()); } }); }
@com.android.annotations.NonNull public static com.android.sdklib.internal.repository.packages.FullRevision parseRevision(@com.android.annotations.NonNull java.lang.String revision) throws java.lang.NumberFormatException { if (revision == null) { throw new java.lang.NumberFormatException("revision is <null>"); } java.lang.Throwable cause = null; try { java.util.regex.Matcher m = com.android.sdklib.internal.repository.packages.FullRevision.FULL_REVISION_PATTERN.matcher(revision); if ((m != null) && (m.matches())) { int major = java.lang.Integer.parseInt(m.group(1)); java.lang.String s = m.group(2); int minor = (s == null) ? com.android.sdklib.internal.repository.packages.FullRevision.IMPLICIT_MINOR_REV : java.lang.Integer.parseInt(s); s = m.group(3); int micro = (s == null) ? com.android.sdklib.internal.repository.packages.FullRevision.IMPLICIT_MICRO_REV : java.lang.Integer.parseInt(s); s = m.group(4); int preview = (s == null) ? com.android.sdklib.internal.repository.packages.FullRevision.NOT_A_PREVIEW : java.lang.Integer.parseInt(s); return new com.android.sdklib.internal.repository.packages.FullRevision(major, minor, micro, preview); } } catch (java.lang.Throwable t) { cause = t; } java.lang.NumberFormatException n = new java.lang.NumberFormatException(("Invalid full revision: " + revision)); n.initCause(cause); throw n; }
@java.lang.Override public final int getSize() { return (mLength) * (mHeap.mSnapshot.getTypeSize(mType)); }
public void test_applyPattern() { java.text.DecimalFormat format = new java.text.DecimalFormat("#.#"); assertEquals("Wrong pattern 1", "0.#", format.toPattern()); format = new java.text.DecimalFormat("#."); assertEquals("Wrong pattern 2", "0.", format.toPattern()); format = new java.text.DecimalFormat("#"); assertEquals("Wrong pattern 3", "0", format.toPattern()); format = new java.text.DecimalFormat(".#"); assertEquals("Wrong pattern 4", "#.0", format.toPattern()); format = new java.text.DecimalFormat(); format.setMinimumIntegerDigits(0); format.setMinimumFractionDigits(0); format.setMaximumFractionDigits(0); format.applyPattern("00.0#"); assertEquals("Minimum integer digits not set", 2, format.getMinimumIntegerDigits()); assertEquals("Minimum fraction digits not set", 1, format.getMinimumFractionDigits()); assertEquals("Maximum fraction digits not set", 2, format.getMaximumFractionDigits()); try { format.applyPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { format.applyPattern("%#,##,###,####'"); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { format.applyPattern("#.##0.00"); fail(); } catch (java.lang.IllegalArgumentException expected) { } }
void add(com.android.assetstudiolib.vectordrawable.VdElement pathOrGroup) { mCurrentGroup.add(pathOrGroup); }
public void test_Builder_setLanguageTag_malformedTags() { try { libcore.java.util.LocaleTest.fromLanguageTag("a", true); fail(); } catch (java.util.IllformedLocaleException ifle) { } try { libcore.java.util.LocaleTest.fromLanguageTag("en-US-BA", true); fail(); } catch (java.util.IllformedLocaleException expected) { } try { libcore.java.util.LocaleTest.fromLanguageTag("en-FOOOO-BA", true); fail(); } catch (java.util.IllformedLocaleException expected) { } try { libcore.java.util.LocaleTest.fromLanguageTag("en-US-POSIX-P2", true); fail(); } catch (java.util.IllformedLocaleException expected) { } try { libcore.java.util.LocaleTest.fromLanguageTag("en-Latn-US-P2", true); fail(); } catch (java.util.IllformedLocaleException expected) { } try { libcore.java.util.LocaleTest.fromLanguageTag("en-f-f", true); fail(); } catch (java.util.IllformedLocaleException expected) { } try { libcore.java.util.LocaleTest.fromLanguageTag("en-f", true); fail(); } catch (java.util.IllformedLocaleException expected) { } try { libcore.java.util.LocaleTest.fromLanguageTag("en-f-fooobaaaz", true); fail(); } catch (java.util.IllformedLocaleException expected) { } try { libcore.java.util.LocaleTest.fromLanguageTag("en-9-baa", true); fail(); } catch (java.util.IllformedLocaleException expected) { } }
@java.lang.Override public abstract boolean equals(java.lang.Object obj);
public com.android.bluetooth.pbapclient.PbapClientConnectionHandler.Builder setContext(android.content.Context context) { this.context = context; return this; }
public static native java.lang.String followReferencesPrimitiveArray(java.lang.Object initialObject);
@javax.annotation.Nonnull private com.android.sched.util.config.cli.TokenIterator.Entry getNext() throws com.android.sched.util.file.CannotReadException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotFileException, com.android.sched.util.file.WrongPermissionException, java.util.NoSuchElementException { while (true) { java.io.StreamTokenizer tokenizer = sources.getCurrentTokenizer(); while (tokenizer != null) { try { if ((tokenizer.nextToken()) != (java.io.StreamTokenizer.TT_EOF)) { if (((allowFileRefInFile) && (!(tokenizer.sval.isEmpty()))) && ((tokenizer.sval.charAt(0)) == (filePrefix))) { sources.push(tokenizer.sval.substring(1)); tokenizer = sources.getCurrentTokenizer(); continue; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(tokenizer.sval, new com.android.sched.util.location.LineLocation(sources.getCurrentLocation(), tokenizer.lineno())); } } } catch (java.io.IOException e) { try { throw new com.android.sched.util.file.CannotReadException(sources.getCurrentLocation()); } finally { sources.clear(); sources.push(new com.android.sched.util.location.NoLocation()); index = args.length; } } sources.pop(); tokenizer = sources.getCurrentTokenizer(); } if ((index) >= (args.length)) { throw new java.util.NoSuchElementException(); } if (((allowFileRefInArray) && (!(args[index].isEmpty()))) && ((args[index].charAt(0)) == (filePrefix))) { sources.push(args[index].substring(1)); (index)++; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(args[((index)++)], sources.getCurrentLocation()); } } }
static void setFloat(java.lang.invoke.MethodHandle m, Main.ValueHolder v, float value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEquals(exceptionThrown, expectFailure); }
public java.lang.String getHexString() { java.lang.String out = "0x"; byte[] ssidbytes = getOctets(); for (int i = 0; i < (octets.size()); i++) { out += java.lang.String.format(java.util.Locale.US, "%02x", ssidbytes[i]); } return (octets.size()) > 0 ? out : null; }
private void checkClzUint2Uint2() { android.renderscript.Allocation inValue = CreateRandomAllocation(mRS, Element.DataType.UNSIGNED_32, 2, 7914955399628281024L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testClzUint2Uint2(inValue, out); verifyResultsClzUint2Uint2(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testClzUint2Uint2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testClzUint2Uint2(inValue, out); verifyResultsClzUint2Uint2(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testClzUint2Uint2: " + (e.toString()))); } }
static void inlinedForNull(java.lang.Iterable<?> it) { if (it != null) { if (Main.doThrow) { throw new java.lang.Error(""); } } }
public static boolean isDeveloperOptionsEnabled(final android.app.Instrumentation instrumentation) throws android.support.test.uiautomator.UiObjectNotFoundException { com.android.devtools.systemimage.uitest.utils.SettingsUtil.findItem(instrumentation, "Developer options").waitForExists(java.util.concurrent.TimeUnit.MILLISECONDS.convert(5L, java.util.concurrent.TimeUnit.SECONDS)); return com.android.devtools.systemimage.uitest.utils.SettingsUtil.scrollToItem(instrumentation, "Developer options"); }
@android.test.suitebuilder.annotation.MediumTest public void testUserBluetoothSwitchOff() { com.android.server.telecom.CallAudioRouteStateMachine stateMachine = new com.android.server.telecom.CallAudioRouteStateMachine(mContext, mockCallsManager, mockBluetoothRouteManager, mockWiredHeadsetManager, mockStatusBarNotifier, mAudioServiceFactory, mMockInterruptionFilterProxy, true); when(mockBluetoothRouteManager.isBluetoothAudioConnectedOrPending()).thenReturn(false); when(mockBluetoothRouteManager.isBluetoothAvailable()).thenReturn(true); when(mockAudioManager.isSpeakerphoneOn()).thenReturn(true); android.telecom.CallAudioState initState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, ((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); stateMachine.initialize(initState); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.SWITCH_FOCUS, CallAudioRouteStateMachine.ACTIVE_FOCUS); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.USER_SWITCH_BASELINE_ROUTE); android.telecom.CallAudioState expectedEndState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_EARPIECE, ((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); waitForStateMachineActionCompletion(stateMachine, CallAudioRouteStateMachine.RUN_RUNNABLE); verifyNewSystemCallAudioState(initState, expectedEndState); assertEquals(NotificationManager.INTERRUPTION_FILTER_ALARMS, mMockInterruptionFilterProxy.getCurrentInterruptionFilter()); resetMocks(false); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.CONNECT_BLUETOOTH); waitForStateMachineActionCompletion(stateMachine, CallAudioRouteStateMachine.RUN_RUNNABLE); assertEquals(expectedEndState, stateMachine.getCurrentCallAudioState()); }
public void testParseDoubleWithDefault() throws java.lang.Exception { java.util.Locale.setDefault(java.util.Locale.US); assertEquals(1000.0, com.android.utils.SdkUtils.parseLocalizedDouble("1000", 0)); assertEquals(2.0, com.android.utils.SdkUtils.parseLocalizedDouble("2x", 3)); assertEquals(0.0, com.android.utils.SdkUtils.parseLocalizedDouble("", 4)); assertEquals(5.0, com.android.utils.SdkUtils.parseLocalizedDouble("test", 5)); java.util.Locale.setDefault(java.util.Locale.FRANCE); assertEquals(1000.0, com.android.utils.SdkUtils.parseLocalizedDouble("1000", (-1))); assertEquals(0.0, com.android.utils.SdkUtils.parseLocalizedDouble("", 8)); }
public com.android.internal.telephony.IccCardApplicationStatus.PersoSubState getPersoSubState() { synchronized(mLock) { return mPersoSubState; } }
public static final android.os.Process.ProcessStartResult start(final java.lang.String processClass, final java.lang.String niceName, int uid, int gid, int[] gids, int runtimeFlags, int mountExternal, int targetSdkVersion, java.lang.String seInfo, java.lang.String abi, java.lang.String instructionSet, java.lang.String appDataDir, java.lang.String invokeWith, java.lang.String[] zygoteArgs) { return android.os.Process.zygoteProcess.start(processClass, niceName, uid, gid, gids, runtimeFlags, mountExternal, targetSdkVersion, seInfo, abi, instructionSet, appDataDir, invokeWith, zygoteArgs); }
@java.lang.Override public final java.lang.String toString() { com.android.jack.util.DefaultTextOutput out = new com.android.jack.util.DefaultTextOutput(true); com.android.jack.ir.impl.ToStringGenerationVisitor v = new com.android.jack.ir.impl.ToStringGenerationVisitor(out); v.accept(this); return out.toString(); }
private static void assertMeidEsn(java.lang.String id) { if ((id.length()) == 14) { android.telephony.cts.TelephonyManagerTest.assertMeidFormat(id); } else if ((id.length()) == 8) { android.telephony.cts.TelephonyManagerTest.assertHexadecimalEsnFormat(id); } else { fail("device id on CDMA must be 14-digit hex MEID or 8-digit hex ESN."); } }
public void setWificondControl(com.android.server.wifi.WificondControl wificondControl) { mWificondControl = wificondControl; }
public boolean updateAdnRecordsInEfByIndex(int efid, java.lang.String newTag, java.lang.String newPhoneNumber, int index, java.lang.String pin2) { if ((phone.getContext().checkCallingOrSelfPermission(android.Manifest.permission.WRITE_CONTACTS)) != (android.content.pm.PackageManager.PERMISSION_GRANTED)) { throw new java.lang.SecurityException("Requires android.permission.WRITE_CONTACTS permission"); } if (com.android.internal.telephony.IccPhoneBookInterfaceManager.DBG) logd(((((((((((("updateAdnRecordsInEfByIndex: efid=" + efid) + " Index=") + index) + " ==> ") + "(") + newTag) + ",") + newPhoneNumber) + ")") + " pin2=") + pin2)); synchronized(mLock) { checkThread(); success = false; java.util.concurrent.atomic.AtomicBoolean status = new java.util.concurrent.atomic.AtomicBoolean(false); android.os.Message response = mBaseHandler.obtainMessage(com.android.internal.telephony.IccPhoneBookInterfaceManager.EVENT_UPDATE_DONE, status); com.android.internal.telephony.AdnRecord newAdn = new com.android.internal.telephony.AdnRecord(newTag, newPhoneNumber); adnCache.updateAdnByIndex(efid, newAdn, index, pin2, response); waitForResult(status); } return success; }
protected boolean getLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && ((mLockedRecordsReqReason) == (com.android.internal.telephony.uicc.IccRecords.LOCKED_RECORDS_REQ_REASON_LOCKED)); }
@java.lang.Override public void fchmod(java.io.FileDescriptor fd, int mode) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.fchmod(fd, mode); }
boolean waitForCallback(int callback) { synchronized(mLocalLock) { boolean found = mCallbackQueue.remove(callback); if (found) { return true; } mCurrentWaitForCallback = callback; mBlocker = new java.util.concurrent.CountDownLatch(1); } try { return mBlocker.await(android.net.wifi.aware.cts.SingleDeviceTest.WAIT_FOR_AWARE_CHANGE_SECS, java.util.concurrent.TimeUnit.SECONDS); } catch (java.lang.InterruptedException e) { return false; } }
public void cleanUp() { try { for (int pollCount = 0; isRunning(); pollCount++) { if (pollCount >= (com.android.tradefed.util.ProcessHelper.DESTROY_PROCESS_MAX_POLL_COUNT)) { com.android.tradefed.log.LogUtil.CLog.e("Cannot destroy the process."); break; } if (pollCount == 0) { com.android.tradefed.log.LogUtil.CLog.w("Kill the running process."); mProcess.destroy(); } else { java.lang.Thread.sleep(com.android.tradefed.util.ProcessHelper.DESTROY_PROCESS_POLL_INTERVAL_MSECS); } } } catch (java.lang.InterruptedException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } try { closeStdin(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } try { mStdoutReader.close(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } try { mStderrReader.close(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } com.android.tradefed.util.ProcessHelper.joinThread(mStdoutThread, com.android.tradefed.util.ProcessHelper.THREAD_JOIN_TIMEOUT_MSECS); com.android.tradefed.util.ProcessHelper.joinThread(mStderrThread, com.android.tradefed.util.ProcessHelper.THREAD_JOIN_TIMEOUT_MSECS); }
public static void validate(@javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JBasicBlockElement element) { new com.android.jack.ir.ast.cfg.CfgExpressionValidator().accept(element); }
void onDeviceComboChanged() { com.android.sdklib.devices.Device currentDevice = getSelectedDevice(); if (currentDevice != null) { fillDeviceProperties(currentDevice); } toggleCameras(); validatePage(); }
private boolean parseAidlOutput(java.util.ArrayList<java.lang.String> lines, org.eclipse.core.resources.IFile file) { if ((lines.size()) == 0) { return false; } java.util.regex.Matcher m; for (int i = 0; i < (lines.size()); i++) { java.lang.String p = lines.get(i); m = com.android.ide.eclipse.adt.internal.build.AidlGenerator.sAidlPattern1.matcher(p); if (m.matches()) { java.lang.String lineStr = m.group(2); java.lang.String msg = m.group(3); int line = 0; try { line = java.lang.Integer.parseInt(lineStr); } catch (java.lang.NumberFormatException e) { return true; } com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.markResource(file, AndroidConstants.MARKER_AIDL, msg, line, IMarker.SEVERITY_ERROR); continue; } return true; } return false; }
@org.junit.Test @java.lang.Runtime(from = RuntimeVersion.N) public void retroLambdaDefaultMethodsTest024() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_024); }
public boolean isManageImsConferenceCallSupported() { return mIsManageImsConferenceCallSupported; }
public int fcntlVoid(java.io.FileDescriptor fd, int cmd) throws android.system.ErrnoException { return os.fcntlVoid(fd, cmd); }
private static void doTestPrimitiveFieldsIntegral() { art.Test906.IntObject intObject = new art.Test906.IntObject(); art.Test906.setTag(intObject, 10000); java.lang.System.out.println(art.Test906.iterateThroughHeapPrimitiveFields(10000)); java.lang.System.out.println(art.Test906.getTag(intObject)); }
public int dexopt(java.lang.String apkPath, int uid, boolean isPublic, java.lang.String pkgName, java.lang.String instructionSet, int dexoptNeeded, boolean vmSafeMode, boolean debuggable, @android.annotation.Nullable java.lang.String outputPath) { if (!(com.android.server.pm.Installer.isValidInstructionSet(instructionSet))) { android.util.Slog.e(com.android.server.pm.Installer.TAG, ("Invalid instruction set: " + instructionSet)); return -1; } return mInstaller.dexopt(apkPath, uid, isPublic, pkgName, instructionSet, dexoptNeeded, vmSafeMode, debuggable, outputPath); }
public void testMultiply_near64BitOverflow_negative() { assertEquals("-9223372036854775808", libcore.java.math.BigDecimalTest.bigMultiply(java.lang.Long.MIN_VALUE, 1).toString()); assertEquals("-9223372036854775808", libcore.java.math.BigDecimalTest.bigMultiply(((java.lang.Long.MIN_VALUE) / 2), 2).toString()); assertEquals("-9223372036854775808", libcore.java.math.BigDecimalTest.bigMultiply((-(1L << 31)), (1L << 32)).toString()); assertEquals("-9223372036854775807", libcore.java.math.BigDecimalTest.bigMultiply((-42128471623L), 218934409L).toString()); assertEquals("-9223372036854775810", libcore.java.math.BigDecimalTest.bigMultiply(((-((java.lang.Long.MIN_VALUE) / 2)) + 1), (-2)).toString()); }
public boolean configureRoaming(com.android.server.wifi.WifiNative.RoamingConfig config) { synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return boolResult(false); try { android.hardware.wifi.V1_0.StaRoamingConfig roamingConfig = new android.hardware.wifi.V1_0.StaRoamingConfig(); if ((config.blacklistBssids) != null) { for (java.lang.String bssid : config.blacklistBssids) { byte[] mac = com.android.server.wifi.util.NativeUtil.macAddressToByteArray(bssid); roamingConfig.bssidBlacklist.add(mac); } } if ((config.whitelistSsids) != null) { for (java.lang.String ssidStr : config.whitelistSsids) { java.lang.String unquotedSsidStr = android.net.wifi.WifiInfo.removeDoubleQuotes(ssidStr); int len = unquotedSsidStr.length(); if (len > 32) { mLog.err("configureRoaming: skip invalid SSID %").r(unquotedSsidStr).flush(); continue; } byte[] ssid = new byte[len]; for (int i = 0; i < len; i++) { ssid[i] = ((byte) (unquotedSsidStr.charAt(i))); } roamingConfig.ssidWhitelist.add(ssid); } } android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.configureRoaming(roamingConfig); if (!(ok(status))) return false; } catch (android.os.RemoteException e) { handleRemoteException(e); return false; } catch (java.lang.IllegalArgumentException e) { mLog.err("Illegal argument for roaming configuration").c(e.toString()).flush(); return false; } return true; } }
public void requestAllProfiles(java.lang.String cardId, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo[]> callback) { try { getIEuiccCardController().getAllProfiles(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetAllProfilesCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo[] profiles) { executor.execute(() -> callback.onComplete(resultCode, profiles)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getAllProfiles", e); throw e.rethrowFromSystemServer(); } }
private void notifyHostEmuDeactivated(int technology) { mListener.onHostCardEmulationDeactivated(technology); }
@java.lang.Override public boolean enableNfcFForegroundService(android.content.ComponentName service) throws android.os.RemoteException { com.android.nfc.NfcPermissions.enforceUserPermissions(mContext); if (isNfcFServiceInstalled(android.os.UserHandle.getCallingUserId(), service)) { return mEnabledNfcFServices.registerEnabledForegroundService(service, android.os.Binder.getCallingUid()); } return false; }
public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }
@java.lang.Override protected void onDisconnect() { connectedPort = -1; connectedAddress = null; isNativeConnected = false; }
public native int poll(android.system.StructPollfd[] fds, int timeoutMs) throws android.system.ErrnoException;
@java.lang.Deprecated public java.util.List<java.lang.String> getCarrierPackageNamesForIntent(android.content.pm.PackageManager packageManager, android.content.Intent intent) { if ((mUiccProfile) != null) { return mUiccProfile.getCarrierPackageNamesForIntent(packageManager, intent); } else { return null; } }
public void testConstructor_NullStartDate_Success() throws java.lang.Exception { android.security.KeyPairGeneratorSpec spec = new android.security.KeyPairGeneratorSpec(getContext(), android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1, "RSA", 1024, null, android.security.KeyPairGeneratorSpecTest.TEST_DN_1, android.security.KeyPairGeneratorSpecTest.SERIAL_1, null, android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS, 0); assertEquals(android.security.KeyPairGeneratorSpecTest.DEFAULT_CERT_NOT_BEFORE, spec.getStartDate()); }
private void testChannelRead_exceptionOnCloseWhenBlocked(libcore.java.nio.channels.FileIOInterruptTest.ChannelReader.Method method) throws java.lang.Exception { libcore.java.nio.channels.FileIOInterruptTest.FifoWriter fifoWriter = new libcore.java.nio.channels.FileIOInterruptTest.FifoWriter(fifoFile); fifoWriter.start(); java.io.FileInputStream fis = new java.io.FileInputStream(fifoFile); java.nio.channels.FileChannel fileInputChannel = fis.getChannel(); libcore.java.nio.channels.FileIOInterruptTest.ChannelReader channelReader = new libcore.java.nio.channels.FileIOInterruptTest.ChannelReader(fileInputChannel, method); java.lang.Thread channelReaderThread = libcore.java.nio.channels.FileIOInterruptTest.createAndStartThread("ChannelReader", channelReader); channelReader.waitForThreadToBlock(); fileInputChannel.close(); libcore.java.nio.channels.FileIOInterruptTest.waitToDie(channelReaderThread); assertSame(java.nio.channels.AsynchronousCloseException.class, channelReader.ioe.getClass()); assertFalse(channelReader.wasInterrupted); fifoWriter.tidyUp(); }
private Camera.Size getOptimalPreviewSize(java.util.List<android.hardware.Camera.Size> sizes, int w, int h) { final double ASPECT_TOLERANCE = 0.1; double targetRatio = ((double) (640)) / ((double) (480)); if (sizes == null) return null; android.hardware.Camera.Size optimalSize = null; int minDiff = java.lang.Integer.MAX_VALUE; int curDiff; int targetHeight = h; int targetWidth = w; boolean aspectRatio = true; boolean maintainCeiling = true; while (true) { for (android.hardware.Camera.Size size : sizes) { if (aspectRatio) { double ratio = ((double) (size.width)) / (size.height); if ((java.lang.Math.abs((ratio - targetRatio))) > ASPECT_TOLERANCE) { continue; } } curDiff = (java.lang.Math.abs(((size.height) - targetHeight))) + (java.lang.Math.abs(((size.width) - targetWidth))); if (((maintainCeiling && (curDiff < minDiff)) && ((size.height) <= targetHeight)) && ((size.width) <= targetWidth)) { optimalSize = size; minDiff = curDiff; } else if ((maintainCeiling == false) && (curDiff < minDiff)) { optimalSize = size; minDiff = curDiff; } } if ((optimalSize == null) && (aspectRatio == true)) { aspectRatio = false; } else if (maintainCeiling == true) { maintainCeiling = false; } else { break; } } return optimalSize; }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (!(intent.getAction().equals(com.android.pmc.A2dpReceiver.A2DP_INTENT))) return; boolean alarm = intent.hasExtra(com.android.pmc.A2dpReceiver.A2DP_ALARM); if (alarm) { android.util.Log.d(com.android.pmc.A2dpReceiver.TAG, "Received Alarm broadcast message"); handleAlarm(intent); } else { android.util.Log.d(com.android.pmc.A2dpReceiver.TAG, "Received PMC command message"); processParameters(intent); } }
public void handleMessage(android.os.Message msg) { if ((msg.what) == (com.android.server.am.BaseErrorDialog.ENABLE_BUTTONS)) { mConsuming = false; setEnabled(true); } else if ((msg.what) == (com.android.server.am.BaseErrorDialog.DISABLE_BUTTONS)) { setEnabled(false); } }
public void registerListener(android.os.storage.StorageEventListener listener) { if (listener == null) { return; } synchronized(mListeners) { if ((mBinderListener) == null) { try { mBinderListener = new android.os.storage.StorageManager.MountServiceBinderListener(); mMountService.registerListener(mBinderListener); } catch (android.os.RemoteException rex) { android.util.Log.e(android.os.storage.StorageManager.TAG, "Register mBinderListener failed"); return; } } mListeners.add(new android.os.storage.StorageManager.ListenerDelegate(listener)); } }
synchronized void onConnectStateChangedFromNative(android.bluetooth.BluetoothDevice device, int state) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((("onConnectStateChanged(): device=" + device) + " state=") + state)); } android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.hid.HidDeviceService.MESSAGE_CONNECT_STATE_CHANGED); msg.obj = device; msg.arg1 = state; mHandler.sendMessage(msg); }
public void setAutoPadding(boolean useAutoPadding) { mAutoPadding = useAutoPadding; }
@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.OutputVFile createOutputVFile(@javax.annotation.Nonnull com.android.sched.vfs.VPath path) throws com.android.sched.util.file.CannotCreateFileException { assert !(vfs.isClosed()); java.io.File file = new java.io.File(dir, path.getPathAsString(ZipUtils.ZIP_SEPARATOR)); if ((!(file.getParentFile().mkdirs())) && (!(file.getParentFile().isDirectory()))) { throw new com.android.sched.util.file.CannotCreateFileException(new com.android.sched.util.location.DirectoryLocation(file.getParentFile())); } assert !(path.equals(VPath.ROOT)); java.lang.String newEntryName = path.getPathAsString(ZipUtils.ZIP_SEPARATOR); java.lang.String parentEntryName = zipEntry.getName(); if (!(parentEntryName.isEmpty())) { newEntryName = parentEntryName + newEntryName; } return new com.android.sched.vfs.InputOutputZipVFile(vfs, file, new java.util.zip.ZipEntry(newEntryName)); }
@org.junit.Test @java.lang.Runtime public void test103() throws java.lang.Exception { java.lang.String test = "com.android.jack.optimizations.valuepropagation.test103"; java.lang.String aType = "Lcom/android/jack/optimizations/valuepropagation/test103/jack/A;"; java.lang.String bType = "Lcom/android/jack/optimizations/valuepropagation/test103/jack/B;"; java.lang.String cType = "Lcom/android/jack/optimizations/valuepropagation/test103/jack/C;"; java.lang.String dType = "Lcom/android/jack/optimizations/valuepropagation/test103/jack/D;"; java.lang.String foo = (("foo(" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + ")") + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR); compileAndValidate(test, defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "A.foo.dalvik"))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "B.foo.dalvik"))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "C.foo.dalvik"))).insert(dType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "D.foo.dalvik")))); }
@javax.annotation.Nonnull @java.lang.Override protected java.lang.String cloneLocalName(@javax.annotation.Nonnull java.lang.String orgName) { return (super.cloneLocalName(orgName)) + "_cloned"; }
@java.lang.Override protected void engineUpdate(byte[] input, int offset, int len) { org.conscrypt.NativeCrypto.EVP_DigestUpdate(ctx, input, offset, len); }
public void test_Constructor() throws java.lang.Exception { java.util.Timer t = null; try { t = new java.util.Timer(); tests.api.java.util.TimerTest.TimerTestTask testTask = new tests.api.java.util.TimerTest.TimerTestTask(); t.schedule(testTask, 200); awaitRun(testTask); t.cancel(); } finally { if (t != null) t.cancel(); } }
@android.annotation.WorkerThread public android.os.PersistableBundle getCarrierConfig() { android.telephony.CarrierConfigManager carrierConfigManager = mContext.getSystemService(android.telephony.CarrierConfigManager.class); return carrierConfigManager.getConfigForSubId(getSubId()); }
@org.junit.Test public void xor_long() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(XOR_LONG).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }
@java.lang.Override public void onSettingsChanged(com.android.sdkuilib.internal.repository.SettingsController controller, com.android.sdkuilib.internal.repository.SettingsController.Settings oldSettings) { if ((mDownloadCache) != null) { if ((controller.getSettings().getUseDownloadCache()) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.FRESH_CACHE))) { mDownloadCache = null; } else if ((!(controller.getSettings().getUseDownloadCache())) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.DIRECT))) { mDownloadCache = null; } } }
@java.lang.SuppressWarnings("MethodNamesDifferingOnlyByCase") public static void main(java.lang.String[] args) { if (((args.length) == 1) && ("%f".equals(args[0]))) { args = com.intellij.idea.Main.NO_ARGS; } com.intellij.idea.Main.setFlags(args); if (com.intellij.idea.Main.isHeadless()) { java.lang.System.setProperty(com.intellij.idea.Main.AWT_HEADLESS, java.lang.Boolean.TRUE.toString()); } else if (java.awt.GraphicsEnvironment.isHeadless()) { com.intellij.idea.Main.showMessage("Startup Error", "Unable to detect graphics environment", true); java.lang.System.exit(com.intellij.idea.Main.NO_GRAPHICS); } else if ((args.length) == 0) { try { com.intellij.idea.Main.installPatch(); } catch (java.lang.Throwable t) { com.intellij.idea.Main.showMessage("Update Failed", t); java.lang.System.exit(com.intellij.idea.Main.UPDATE_FAILED); } } if (com.intellij.idea.Main.shouldReportCrashes()) { com.intellij.idea.Main.createRecordFile(); } try { com.intellij.ide.Bootstrap.main(args, ((com.intellij.idea.Main.class.getName()) + "Impl"), "start"); } catch (java.lang.Throwable t) { com.intellij.idea.Main.showMessage("Start Failed", t); java.lang.System.exit(com.intellij.idea.Main.STARTUP_EXCEPTION); } }
@java.lang.Override public void onClick(android.content.DialogInterface dialog, int which) { com.android.cts.verifier.TestResult.setFailedResult(this); finish(); }
private void initJni() throws java.io.IOException { java.io.File jniDir = new java.io.File(mDir, "jni"); if (!(jniDir.exists())) { return; } if (mNdkProject) { mNativeSources = jniDir; java.io.File makefile = new java.io.File(jniDir, "Android.mk"); if (makefile.exists()) { java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("\\s*LOCAL_MODULE\\s*:=\\s*(\\S+)\\s*"); for (java.lang.String line : com.google.common.io.Files.readLines(makefile, Charsets.UTF_8)) { java.util.regex.Matcher matcher = pattern.matcher(line); if (matcher.matches()) { mNativeModuleName = matcher.group(1); if ((mNativeLibs) != null) { java.lang.String libName = ("lib" + (mNativeModuleName)) + ".so"; java.util.ListIterator<java.io.File> iterator = mNativeLibs.listIterator(); while (iterator.hasNext()) { java.io.File lib = iterator.next(); if (libName.equals(lib.getName())) { iterator.remove(); } } if (mNativeLibs.isEmpty()) { mNativeLibs = null; } } break; } } } } }
public void testSetGroupingSeparator() { java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(java.util.Locale.US); dfs.setGroupingSeparator(' '); assertEquals("1 234.00", new java.text.DecimalFormat("#,##0.00", dfs).format(1234)); assertEquals("$1 234.00", new java.text.DecimalFormat("¤#,##0.00", dfs).format(1234)); }
public static int forkAndSpecialize(int uid, int gid, int[] gids, int debugFlags, int[][] rlimits, java.lang.String seInfo, java.lang.String niceName) { dalvik.system.Zygote.preFork(); int pid = dalvik.system.Zygote.nativeForkAndSpecialize(uid, gid, gids, debugFlags, rlimits, seInfo, niceName); dalvik.system.Zygote.postFork(); return pid; }
public void test_hashCode() { java.text.DecimalFormat df1 = new java.text.DecimalFormat(); java.text.DecimalFormat df2 = ((java.text.DecimalFormat) (df1.clone())); assertTrue("Hash codes of equals object are not equal", ((df2.hashCode()) == (df1.hashCode()))); }
public void test_ConstructorZ() throws java.lang.Exception { java.util.Timer t = null; try { t = new java.util.Timer(true); tests.api.java.util.TimerTest.TimerTestTask testTask = new tests.api.java.util.TimerTest.TimerTestTask(); t.schedule(testTask, 200); awaitRun(testTask); t.cancel(); } finally { if (t != null) t.cancel(); } }
@org.junit.Test public void compileWithAnnotationProcessorNoAuto_classpath() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorClasses(java.util.Collections.singletonList(com.android.jack.annotation.processor.sample.processors.SourceAnnotationProcessor.class.getName())); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.addToClasspath(processors); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); junit.framework.Assert.assertFalse(libOut.containsFileType(FileType.RSC)); libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath("Annotated2Duplicated", '/')); }
public void setVar(int index, boolean v) { mRS.nScriptSetVarI(getID(mRS), index, (v ? 1 : 0), mUseIncSupp); }
@org.junit.Test public void testCompile021a() throws java.lang.Exception { java.lang.String packageName = "com.android.jack.switchstatement.test021.jack"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put("Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo("java-lang-Thread$State", true)); compileCode(packageName, input); }
public int syncGetSupportedFeatures(com.android.internal.util.AsyncChannel channel) { android.os.Message resultMsg = channel.sendMessageSynchronously(com.android.server.wifi.WifiStateMachine.CMD_GET_SUPPORTED_FEATURES); int supportedFeatureSet = resultMsg.arg1; resultMsg.recycle(); boolean disableRtt = mPropertyService.getBoolean("config.disable_rtt", false); if (disableRtt) { supportedFeatureSet &= ~((android.net.wifi.WifiManager.WIFI_FEATURE_D2D_RTT) | (android.net.wifi.WifiManager.WIFI_FEATURE_D2AP_RTT)); } return supportedFeatureSet; }
private static java.lang.String mapToString(java.util.Map<java.lang.String, java.lang.Integer> map) { java.lang.StringBuilder sb = new java.lang.StringBuilder(""); for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry : map.entrySet()) { sb.append(java.lang.String.format("%s%s%d\n", entry.getKey(), com.android.compatibility.common.tradefed.result.TestRunHandler.MAP_DELIMITER, entry.getValue())); } return sb.toString(); }
private void dumpMetrics(java.io.FileDescriptor fd) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); metrics.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dumpProto(metrics); } byte[] nativeMetricsBytes = dumpMetricsNative(); debugLog(("dumpMetrics: native metrics size is " + (nativeMetricsBytes.length))); if ((nativeMetricsBytes.length) > 0) { try { metrics.mergeFrom(nativeMetricsBytes); } catch (com.google.protobuf.micro.InvalidProtocolBufferMicroException ex) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ("dumpMetrics: problem parsing metrics protobuf, " + (ex.getMessage()))); return; } } byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); debugLog(("dumpMetrics: combined metrics size is " + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog(("dumpMetrics: error writing combined protobuf to fd, " + (e.getMessage()))); } }
public void test_getNetworkInterface() throws java.io.IOException { java.net.MulticastSocket mss = new java.net.MulticastSocket(0); java.net.NetworkInterface theInterface = mss.getNetworkInterface(); assertTrue(("network interface returned wrong network interface when not set:" + theInterface), theInterface.getInetAddresses().hasMoreElements()); java.net.InetAddress firstAddress = theInterface.getInetAddresses().nextElement(); assertTrue(firstAddress.isAnyLocalAddress()); mss.setNetworkInterface(ipv4NetworkInterface); assertEquals("getNetworkInterface did not return interface set by setNeworkInterface", ipv4NetworkInterface, mss.getNetworkInterface()); mss.setNetworkInterface(loopbackInterface); assertEquals(("getNetworkInterface did not return network interface set by second" + " setNetworkInterface call"), loopbackInterface, mss.getNetworkInterface()); mss.close(); if ((ipv6NetworkInterface) != null) { mss = new java.net.MulticastSocket(0); mss.setNetworkInterface(ipv6NetworkInterface); assertEquals("getNetworkInterface did not return interface set by setNeworkInterface", ipv6NetworkInterface, mss.getNetworkInterface()); mss.close(); } mss = new java.net.MulticastSocket(0); java.util.Enumeration addresses = ipv4NetworkInterface.getInetAddresses(); if (addresses.hasMoreElements()) { firstAddress = ((java.net.InetAddress) (addresses.nextElement())); mss.setInterface(firstAddress); assertEquals("getNetworkInterface did not return interface set by setInterface", ipv4NetworkInterface, mss.getNetworkInterface()); } mss.close(); }
@java.lang.Override public void removeImsFeature(int slotId, int feature) throws android.os.RemoteException { synchronized(mFeatures) { enforceCallingOrSelfPermission(android.telephony.ims.MODIFY_PHONE_STATE, "removeImsFeature"); onRemoveImsFeatureInternal(slotId, feature); } }
@javax.annotation.Nonnull private static java.lang.String convertNameToPattern(@javax.annotation.Nonnull java.lang.String name, @javax.annotation.Nonnull com.android.jack.shrob.proguard.GrammarActions.FilterSeparator separator) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (int i = 0; i < (name.length()); i++) { char c = name.charAt(i); switch (c) { case '?' : sb.append(separator.singleCharWilcard); break; case '*' : int j = i + 1; if ((j < (name.length())) && ((name.charAt(j)) == '*')) { sb.append(".*"); i++; } else { sb.append(separator.multipleCharWildcard); } break; case '$' : sb.append("\\$"); break; default : sb.append(c); break; } } return sb.toString(); }
@java.lang.Override public void writeToParcel(android.os.Parcel out, int flags) { out.writeParcelable(new android.os.ParcelUuid(mUuid), 0); out.writeInt(mInstanceId); out.writeInt(mServiceType); out.writeTypedList(mCharacteristics); java.util.ArrayList<android.bluetooth.BluetoothGattIncludedService> includedServices = new java.util.ArrayList<android.bluetooth.BluetoothGattIncludedService>(mIncludedServices.size()); for (android.bluetooth.BluetoothGattService s : mIncludedServices) { includedServices.add(new android.bluetooth.BluetoothGattIncludedService(s.getUuid(), s.getInstanceId(), s.getType())); } out.writeTypedList(includedServices); }
@javax.annotation.Nonnull @java.lang.Override java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVFile file) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.WRITE); java.io.File path = getNativeFile(file.getPath()); try { return new java.io.FileOutputStream(path); } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.WRITE); throw new com.android.sched.util.ConcurrentIOException(e); } }
public static void computeAcospi(android.renderscript.cts.TestAcospi.ArgumentsFloatFloat args) { args.ulf = 5; args.ulfRelaxed = 128; args.out = ((float) ((java.lang.StrictMath.acos(args.in)) / (java.lang.StrictMath.PI))); }
@java.lang.Override void onStop() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, "onStop"); mWifiMonitor.close(); allPrintersLost(); }
public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_kernel3d s = new com.android.rs.test.ScriptC_kernel3d(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_init_vars(A); s.forEach_root(A, B); s.invoke_verify_root(); s.invoke_kernel_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }
public static boolean containsAttribute(java.util.ArrayList<com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor> attributes, java.lang.String nsUri, com.android.ide.common.resources.platform.AttributeInfo info) { java.lang.String xmlLocalName = info.getName(); for (com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor desc : attributes) { if (desc.getXmlLocalName().equals(xmlLocalName)) { if ((nsUri == (desc.getNamespaceUri())) || ((nsUri != null) && (nsUri.equals(desc.getNamespaceUri())))) { return true; } } } return false; }
@java.lang.Override com.android.ahat.heapdump.ReferenceIterator getReferences() { java.util.List<com.android.ahat.heapdump.Reference> refs = new java.util.AbstractList<com.android.ahat.heapdump.Reference>() { @java.lang.Override public int size() { return mFieldValues.length; } @java.lang.Override public com.android.ahat.heapdump.Reference get(int index) { com.android.ahat.heapdump.FieldValue field = mFieldValues[index]; com.android.ahat.heapdump.Value value = field.value; if ((value != null) && (value.isAhatInstance())) { boolean strong = (!(field.name.equals("referent"))) || (!(isInstanceOfClass("java.lang.ref.Reference"))); com.android.ahat.heapdump.AhatInstance ref = value.asAhatInstance(); return new com.android.ahat.heapdump.Reference(com.android.ahat.heapdump.AhatClassInstance.this, ("." + (field.name)), ref, strong); } return null; } }; return new com.android.ahat.heapdump.ReferenceIterator(refs); }
@java.lang.Override protected void printFilteredProblem(@javax.annotation.Nonnull com.android.jack.reporting.Reportable.ProblemLevel problemLevel, @javax.annotation.Nonnull java.lang.String message, @javax.annotation.CheckForNull java.lang.String fileName, int startLine, int endLine, int startColumn, int endColumn) { java.lang.StringBuffer messageBuffer = new java.lang.StringBuffer(problemLevel.toString()); messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (fileName != null) { messageBuffer.append(fileName); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (startLine >= 0) { messageBuffer.append(startLine); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (endLine >= 0) { messageBuffer.append(endLine); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (startColumn >= 0) { messageBuffer.append(startColumn); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (endColumn >= 0) { messageBuffer.append(endColumn); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); messageBuffer.append(message); java.io.PrintStream printer = streamByLevel.get(problemLevel); if (printer == null) { printer = streamByDefault; } printer.println(messageBuffer.toString()); }
@vogar.target.TestRunnerProperties(testClass = vogar.target.junit4.FailTest.class) @org.junit.Test public void testRunner_FailTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); expectedResults().failure("failure", "java.lang.AssertionError: failed.\n").success("success").success("throwAnotherExpectedException").failure("throwException", "java.lang.RuntimeException: exception\n").success("throwExpectedException").completedNormally(); }
@org.junit.Before public void setUp() throws android.os.RemoteException { android.support.test.uiautomator.UiDevice mDevice = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); if (!(mDevice.isScreenOn())) { mDevice.wakeUp(); mDevice.wait(android.support.test.uiautomator.Until.hasObject(android.support.test.uiautomator.By.res("android", "glow_pad_view")), 10000); mDevice.swipe(560, 1500, 560, 1000, 40); } mDevice.pressHome(); }
@java.lang.Override public void send(byte[] data) throws java.lang.Exception { mSocket.send(new java.net.DatagramPacket(data, data.length)); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (com.android.cts.verifier.usb.UsbAccessoryTestActivity.ACTION_USB_PERMISSION.equals(intent.getAction())) { if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) { android.hardware.usb.UsbAccessory accessory = intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY); openAccessory(accessory); } else { android.util.Log.i(com.android.cts.verifier.usb.UsbAccessoryTestActivity.TAG, "Permission denied..."); } mPermissionRequestPending = false; } else if (UsbManager.ACTION_USB_ACCESSORY_DETACHED.equals(intent.getAction())) { android.hardware.usb.UsbAccessory accessory = intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY); if (accessory.equals(mAccessory)) { closeAccessory(); mDisconnectDialog.dismiss(); mConnectDialog.show(); } } }
private void showIncomingCallNotification(com.android.server.telecom.Call call) { android.telecom.Log.i(this, "showIncomingCallNotification showCall = %s", call); android.app.Notification.Builder builder = getNotificationBuilder(call, mCallsManagerProxy.getActiveCall()); mNotificationManager.notify(com.android.server.telecom.ui.IncomingCallNotifier.NOTIFICATION_TAG, com.android.server.telecom.ui.IncomingCallNotifier.NOTIFICATION_INCOMING_CALL, builder.build()); }
@org.junit.Before public void setup() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mDut = new com.android.server.wifi.aware.WifiAwareNative(false); mDut.setStateManager(mAwareStateManager); com.android.server.wifi.HalMockUtils.initHalMockLibrary(); com.android.server.wifi.aware.WifiAwareHalMock.initAwareHalMockLibrary(mDut); com.android.server.wifi.aware.WifiAwareNative.initAwareHandlersNative(com.android.server.wifi.WifiNative.class, WifiNative.sWlan0Index); com.android.server.wifi.HalMockUtils.setHalMockObject(mAwareHalMock); }
public static java.lang.String[] checkEnabledProtocols(java.lang.String[] protocols) { if (protocols == null) { throw new java.lang.IllegalArgumentException("protocols == null"); } for (java.lang.String protocol : protocols) { if (protocol == null) { throw new java.lang.IllegalArgumentException("protocols contains null"); } if ((((!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1))) && (!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1_1)))) && (!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1_2)))) && (!(protocol.equals(org.conscrypt.NativeCrypto.OBSOLETE_PROTOCOL_SSLV3)))) { throw new java.lang.IllegalArgumentException((("protocol " + protocol) + " is not supported")); } } return protocols; }
@java.lang.Override public void handle(com.sun.net.httpserver.HttpExchange exchange) throws java.io.IOException { java.lang.ClassLoader loader = com.android.ahat.StaticHandler.class.getClassLoader(); java.io.InputStream is = loader.getResourceAsStream(mResourceName); if (is == null) { exchange.getResponseHeaders().add("Content-Type", "text/html"); exchange.sendResponseHeaders(404, 0); java.io.PrintStream ps = new java.io.PrintStream(exchange.getResponseBody()); com.android.ahat.HtmlDoc doc = new com.android.ahat.HtmlDoc(ps, com.android.ahat.DocString.text("ahat"), com.android.ahat.DocString.uri("style.css")); doc.big(com.android.ahat.DocString.text("Resource not found.")); doc.close(); } else { exchange.getResponseHeaders().add("Content-Type", mContentType); exchange.sendResponseHeaders(200, 0); java.io.OutputStream os = exchange.getResponseBody(); int read; byte[] buf = new byte[4096]; while ((read = is.read(buf)) >= 0) { os.write(buf, 0, read); } is.close(); os.close(); } }
@java.lang.Override public void libToLib(@javax.annotation.Nonnull java.io.File[] in, @javax.annotation.Nonnull java.io.File out, boolean zipFiles) throws java.lang.Exception { java.util.List<java.lang.String> commandLine = new java.util.ArrayList<java.lang.String>(); libToCommon(commandLine, getClasspathAsString(), in); addOutputJack(commandLine, out, zipFiles); com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(commandLine.toArray(new java.lang.String[commandLine.size()])); exec.inheritEnvironment(); exec.setErr(errRedirectStream); exec.setOut(outRedirectStream); exec.setVerbose(isVerbose); if ((exec.run()) != 0) { throw new java.lang.RuntimeException("Jack compiler exited with an error"); } }
private void onUnknownAt(java.lang.String atString, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_UNKNOWN_AT, atString, getDevice(address)); sendMessageToService(event); }
private void createTypes(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage, @javax.annotation.Nonnull com.android.jack.ir.impl.ReferenceMapper refMap, @javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration) { if ((hasErrors) || (com.android.jack.ir.impl.JackIrBuilder.hasError(typeDeclaration))) { hasErrors = true; return; } com.android.jack.ir.impl.EcjSourceTypeLoader.createType(refMap, enclosingPackage, typeDeclaration.binding, typeDeclaration, new com.android.sched.util.location.FileLocation(new java.io.File(new java.lang.String(typeDeclaration.compilationResult.fileName)))); if ((typeDeclaration.memberTypes) != null) { for (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration memberType : typeDeclaration.memberTypes) { createTypes(enclosingPackage, refMap, memberType); } } }
@java.lang.Override public void dispose() { synchronized(com.android.internal.telephony.PhoneProxy.lockForRadioTechnologyChange) { super.dispose(); log("dispose"); unregisterForRuimRecordEvents(); mCi.unregisterForAvailable(this); mCi.unregisterForOffOrNotAvailable(this); mCi.unregisterForOn(this); mSST.unregisterForNetworkAttached(this); mCi.unSetOnSuppServiceNotification(this); mCi.unregisterForExitEmergencyCallbackMode(this); removeCallbacks(mExitEcmRunnable); mPendingMmis.clear(); mCT.dispose(); mDcTracker.dispose(); mSST.dispose(); mCdmaSSM.dispose(this); mSMS.dispose(); mRuimPhoneBookInterfaceManager.dispose(); mRuimSmsInterfaceManager.dispose(); mSubInfo.dispose(); mEriManager.dispose(); } }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); java.lang.reflect.Method method = com.android.bluetooth.btservice.AdapterService.class.getDeclaredMethod("setAdapterService", com.android.bluetooth.btservice.AdapterService.class); method.setAccessible(true); method.invoke(mAdapterService, mAdapterService); mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03:04:05"); mHandlerThread = new android.os.HandlerThread("A2dpStateMachineTestHandlerThread"); mHandlerThread.start(); mA2dpStateMachine = new com.android.bluetooth.a2dp.A2dpStateMachine(mA2dpService, mTargetContext, mA2dpNativeInterface, mHandlerThread.getLooper()); mA2dpStateMachine.sConnectTimeoutMs = 1000; mA2dpStateMachine.start(); }
private static java.lang.String getFooter(java.lang.String link) { return ((("<br><br>For details, visit the" + " <a href='") + link) + "'>") + "VTS dashboard.</a>"; }
void dump(java.util.ArrayList<android.nfc.cardemulation.NfcFServiceInfo> services) { for (android.nfc.cardemulation.NfcFServiceInfo service : services) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredNfcFServicesCache.TAG, service.toString()); } }
public static void build(org.eclipse.core.resources.IProject project, org.eclipse.core.runtime.IProgressMonitor monitor, boolean fullBuild) throws org.eclipse.core.runtime.CoreException { project.build(IncrementalProjectBuilder.INCREMENTAL_BUILD, monitor); if (fullBuild) { java.util.Map<java.lang.String, java.lang.String> args = new java.util.TreeMap<java.lang.String, java.lang.String>(); args.put(PostCompilerBuilder.POST_C_REQUESTED, ""); project.build(IncrementalProjectBuilder.FULL_BUILD, PostCompilerBuilder.ID, args, monitor); } }
public void testIsCameraEnabledInPrimaryProfile() throws java.lang.Exception { assertFalse(mDevicePolicyManager.getCameraDisabled(mPrimaryAdminComponent)); assertFalse(mDevicePolicyManager.getCameraDisabled(null)); checkCanOpenCamera(true); }
public boolean isDisconnectingChildCall() { return mIsDisconnectingChildCall; }
private com.android.bluetooth.a2dp.A2dpStateMachine getOrCreateStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, "getOrCreateStateMachine failed: device cannot be null"); return null; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachines.get(device); if (sm != null) { return sm; } if ((mStateMachines.size()) > (com.android.bluetooth.a2dp.A2dpService.MAX_A2DP_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ("Maximum number of A2DP state machines reached: " + (com.android.bluetooth.a2dp.A2dpService.MAX_A2DP_STATE_MACHINES))); return null; } if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("Creating a new state machine for " + device)); } sm = com.android.bluetooth.a2dp.A2dpStateMachine.make(device, this, this, mA2dpNativeInterface, mStateMachinesThread.getLooper()); mStateMachines.put(device, sm); return sm; } }
public void testMigrated() { org.gradle.tooling.GradleConnector connector = org.gradle.tooling.GradleConnector.newConnector(); java.io.File projectDir = new java.io.File(getTestDir(), "migrated"); connector.forProjectDirectory(projectDir); org.gradle.tooling.ProjectConnection connection = connector.connect(); try { com.android.build.gradle.model.AndroidProject model = connection.getModel(com.android.build.gradle.model.AndroidProject.class); assertNotNull("Model Object null-check", model); assertEquals("Model Name", "migrated", model.getName()); assertFalse("Library Project", model.isLibrary()); com.android.build.gradle.model.ProductFlavorContainer defaultConfig = model.getDefaultConfig(); new com.android.build.gradle.model.AndroidProjectTest.SourceProviderTester(model.getName(), projectDir, "main", defaultConfig.getSourceProvider()).setJavaDir("src").setResourcesDir("src").setAidlDir("src").setRenderscriptDir("src").setResDir("res").setAssetsDir("assets").setManifestFile("AndroidManifest.xml").test(); new com.android.build.gradle.model.AndroidProjectTest.SourceProviderTester(model.getName(), projectDir, "instrumentTest", defaultConfig.getTestSourceProvider()).setJavaDir("tests/java").setResourcesDir("tests/resources").setAidlDir("tests/aidl").setJniDir("tests/jni").setRenderscriptDir("tests/rs").setResDir("tests/res").setAssetsDir("tests/assets").setManifestFile("tests/AndroidManifest.xml").test(); } finally { connection.close(); } }
private int loadInstanceDump() throws java.io.IOException { long id = readId(); int stackId = mInput.readInt(); com.android.tools.perflib.heap.StackTrace stack = mState.getStackTrace(stackId); final long classId = readId(); int remaining = mInput.readInt(); final com.android.tools.perflib.heap.ClassInstance instance = new com.android.tools.perflib.heap.ClassInstance(id, stack); final byte[] data = new byte[remaining]; mInput.readFully(data); mPost.add(new com.android.tools.perflib.heap.HprofParser.PostOperation(com.android.tools.perflib.heap.HprofParser.ResolvePriority.CLASSES, new java.util.concurrent.Callable() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { instance.setClass(mState.findClass(classId)); return null; } })); mPost.add(new com.android.tools.perflib.heap.HprofParser.PostOperation(com.android.tools.perflib.heap.HprofParser.ResolvePriority.VALUES, new java.util.concurrent.Callable() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { java.io.DataInputStream stream = new java.io.DataInputStream(new java.io.ByteArrayInputStream(data)); com.android.tools.perflib.heap.ClassObj clazz = instance.getClassObj(); while (clazz != null) { for (com.android.tools.perflib.heap.Field field : clazz.getFields()) { instance.addField(field, readValue(stream, instance, field.getType())); } clazz = clazz.getSuperClassObj(); } return null; } })); instance.setHeap(mState.mCurrentHeap); mState.addInstance(id, instance); return ((((mIdSize) + 4) + (mIdSize)) + 4) + remaining; }
public void toggleMethodProfiling() { try { switch (mClientData.getMethodProfilingStatus()) { case TRACER_ON : stopMethodTracer(); break; case SAMPLER_ON : stopSamplingProfiler(); break; case OFF : startMethodTracer(); break; } } catch (java.io.IOException e) { com.android.ddmlib.Log.w("ddms", "Toggle method profiling failed"); } }
private void cmdList(java.io.PrintWriter pw) { pw.println("metrics events:"); final java.util.List<android.net.ConnectivityMetricsEvent> events = getEvents(); for (android.net.ConnectivityMetricsEvent ev : events) { pw.println(ev.toString()); } pw.println(""); if ((mNetdListener) != null) { mNetdListener.list(pw); } pw.println(""); mDefaultNetworkMetrics.listEvents(pw); }
public static int StaticConditionNulls() { java.lang.Object a = Main.getNull(); java.lang.Object b = Main.getNull(); return a == b ? 5 : 2; }
@java.lang.Override public int compare(com.android.ahat.heapdump.Site.ObjectsInfo a, com.android.ahat.heapdump.Site.ObjectsInfo b) { java.lang.String aName = a.getClassName(); java.lang.String bName = b.getClassName(); return aName.compareTo(bName); }
@org.junit.Test public void testBinderDeathAfterCleanupAndReleaseDoesNothing() throws android.os.RemoteException { com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = getTestRefcountedResource(); refcountedResource.userRelease(); assertResourceState(refcountedResource, (-1), 1, 1, 1, 1); refcountedResource.binderDied(); assertResourceState(refcountedResource, (-1), 2, 1, 1, 1); }
boolean isMetadataSynced() { if (((getQueue()) != null) && ((getActiveQueueID()) != (-1))) { android.media.session.MediaSession.QueueItem currItem = null; for (android.media.session.MediaSession.QueueItem item : getQueue()) { if ((item.getQueueId()) == (getActiveQueueID())) { currItem = item; break; } } com.android.bluetooth.avrcp.Metadata qitem = com.android.bluetooth.avrcp.Util.toMetadata(currItem); com.android.bluetooth.avrcp.Metadata mdata = com.android.bluetooth.avrcp.Util.toMetadata(getMetadata()); if ((currItem == null) || (!(qitem.equals(mdata)))) { if (com.android.bluetooth.avrcp.MediaPlayerWrapper.DEBUG) { android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("Metadata currently out of sync for " + (mPackageName))); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (" └ Current queueItem: " + currItem)); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (" └ Current metadata : " + (getMetadata().getDescription()))); } return false; } } return true; }
public void addObj(android.support.v8.renderscript.BaseObj obj) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { if (obj != null) { mN.addObj(obj.getNObj()); } else { mN.addObj(null); } return; } if (obj != null) { addI32(obj.getID(null)); } else { addI32(0); } }
org.gradle.model.collection.ManagedSet<com.android.build.gradle.managed.BuildType> getBuildTypes();
@org.junit.Test public void testBuilder_BasedOnAnotherProfile() { android.service.euicc.EuiccProfileInfo p = new android.service.euicc.EuiccProfileInfo.Builder().setIccid("21430000000000006587").setNickname("profile nickname").setProfileName("profile name").setServiceProviderName("service provider").setCarrierIdentifier(new android.service.carrier.CarrierIdentifier(new byte[]{ 35, 69, 103 }, "123", "45")).setState(EuiccProfileInfo.PROFILE_STATE_ENABLED).setProfileClass(EuiccProfileInfo.PROFILE_CLASS_OPERATIONAL).setPolicyRules(EuiccProfileInfo.POLICY_RULE_DO_NOT_DELETE).setUiccAccessRule(new android.telephony.UiccAccessRule[]{ new android.telephony.UiccAccessRule(new byte[0], null, 0) }).build(); android.service.euicc.EuiccProfileInfo copied = new android.service.euicc.EuiccProfileInfo.Builder(p).build(); assertEquals(p, copied); assertEquals(p.hashCode(), copied.hashCode()); }
public void testClientConfiguredGzipContentEncoding() throws java.lang.Exception { byte[] bodyBytes = gzip("ABCDEFGHIJKLMNOPQRSTUVWXYZ".getBytes("UTF-8")); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(bodyBytes).addHeader("Content-Encoding: gzip").addHeader(("Content-Length: " + (bodyBytes.length)))); server.play(); java.net.URLConnection connection = server.getUrl("/").openConnection(); connection.addRequestProperty("Accept-Encoding", "gzip"); java.io.InputStream gunzippedIn = new java.util.zip.GZIPInputStream(connection.getInputStream()); assertEquals("ABCDEFGHIJKLMNOPQRSTUVWXYZ", readAscii(gunzippedIn, java.lang.Integer.MAX_VALUE)); assertEquals(bodyBytes.length, connection.getContentLength()); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); assertContains(request.getHeaders(), "Accept-Encoding: gzip"); }
@java.lang.Override public java.util.Set<vogar.tasks.Task> installTasks() { java.util.Set<vogar.tasks.Task> result = new java.util.HashSet<vogar.tasks.Task>(); for (java.io.File classpathElement : run.classpath.getElements()) { java.lang.String name = run.basenameOfJar(classpathElement); java.io.File localDex = run.localDexFile(name); java.io.File localTempDir = run.localDir(name); result.add(createCreateDexJarTask(run.classpath, classpathElement, name, null, localDex, localTempDir)); } result.add(new vogar.tasks.MkdirTask(run.mkdir, dalvikCache())); return result; }
@java.lang.Override @javax.annotation.Nonnull java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVFile file, boolean append) throws com.android.sched.util.file.WrongPermissionException { if (!(isWritable())) { throw new java.lang.UnsupportedOperationException(); } synchronized(file) { if (!(file.isWritable())) { try { loadWritableFile(file); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } } } return file.getWrappedFile().getOutputStream(append); }
public void onConnect(java.net.InetAddress remoteAddress, int remotePort) { isConnected = true; impl.onConnect(remoteAddress, remotePort); }
private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV2Block, java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> contentDigestsToVerify, int minSdkVersion, int maxSdkVersion, com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result) throws com.android.apksig.internal.apk.v2.V2SchemeVerifier.SignatureNotFoundException, java.security.NoSuchAlgorithmException { java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.v2.V2SchemeVerifier.getLengthPrefixedSlice(apkSignatureSchemeV2Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V2_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V2_SIG_NO_SIGNERS); return; } java.security.cert.CertificateFactory certFactory; try { certFactory = java.security.cert.CertificateFactory.getInstance("X.509"); } catch (java.security.cert.CertificateException e) { throw new java.lang.RuntimeException("Failed to obtain X.509 CertificateFactory", e); } int signerCount = 0; while (signers.hasRemaining()) { int signerIndex = signerCount; signerCount++; com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result.SignerInfo(); signerInfo.index = signerIndex; result.signers.add(signerInfo); try { java.nio.ByteBuffer signer = com.android.apksig.internal.apk.v2.V2SchemeVerifier.getLengthPrefixedSlice(signers); com.android.apksig.internal.apk.v2.V2SchemeVerifier.parseSigner(signer, certFactory, signerInfo, contentDigestsToVerify, minSdkVersion, maxSdkVersion); } catch (com.android.apksig.apk.ApkFormatException | java.nio.BufferUnderflowException e) { signerInfo.addError(Issue.V2_SIG_MALFORMED_SIGNER); return; } } }
@java.lang.Override protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().setBackgroundDrawableResource(R.drawable.class_zero_background); if ((mMessageQueue) == null) { mMessageQueue = new java.util.ArrayList<android.telephony.SmsMessage>(); } if (!(queueMsgFromIntent(getIntent()))) { return; } if ((mMessageQueue.size()) == 1) { displayZeroMessage(mMessageQueue.get(0)); } if (icicle != null) { mTimerSet = icicle.getLong(com.android.mms.ui.ClassZeroActivity.TIMER_FIRE, mTimerSet); } }
private int getRegStateFromHalRegState(int regState) { switch (regState) { case android.hardware.radio.V1_0.RegState.NOT_REG_MT_NOT_SEARCHING_OP : return android.telephony.ServiceState.RIL_REG_STATE_NOT_REG; case android.hardware.radio.V1_0.RegState.REG_HOME : return android.telephony.ServiceState.RIL_REG_STATE_HOME; case android.hardware.radio.V1_0.RegState.NOT_REG_MT_SEARCHING_OP : return android.telephony.ServiceState.RIL_REG_STATE_SEARCHING; case android.hardware.radio.V1_0.RegState.REG_DENIED : return android.telephony.ServiceState.RIL_REG_STATE_DENIED; case android.hardware.radio.V1_0.RegState.UNKNOWN : return android.telephony.ServiceState.RIL_REG_STATE_UNKNOWN; case android.hardware.radio.V1_0.RegState.REG_ROAMING : return android.telephony.ServiceState.RIL_REG_STATE_ROAMING; case android.hardware.radio.V1_0.RegState.NOT_REG_MT_NOT_SEARCHING_OP_EM : return android.telephony.ServiceState.RIL_REG_STATE_NOT_REG_EMERGENCY_CALL_ENABLED; case android.hardware.radio.V1_0.RegState.NOT_REG_MT_SEARCHING_OP_EM : return android.telephony.ServiceState.RIL_REG_STATE_SEARCHING_EMERGENCY_CALL_ENABLED; case android.hardware.radio.V1_0.RegState.REG_DENIED_EM : return android.telephony.ServiceState.RIL_REG_STATE_DENIED_EMERGENCY_CALL_ENABLED; case android.hardware.radio.V1_0.RegState.UNKNOWN_EM : return android.telephony.ServiceState.RIL_REG_STATE_UNKNOWN_EMERGENCY_CALL_ENABLED; default : return android.telephony.ServiceState.REGISTRATION_STATE_NOT_REGISTERED_AND_NOT_SEARCHING; } }
@org.junit.Test public void validateCertCredentialWithMismatchFingerprint() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential(); cred.realm = "realm"; cred.certCredential = new android.net.wifi.hotspot2.pps.Credential.CertificateCredential(); cred.certCredential.certType = "x509v3"; cred.certCredential.certSha256FingerPrint = new byte[32]; java.util.Arrays.fill(cred.certCredential.certSha256FingerPrint, ((byte) (0))); cred.caCertificate = android.net.wifi.FakeKeys.CA_CERT0; cred.clientCertificateChain = new java.security.cert.X509Certificate[]{ android.net.wifi.FakeKeys.CLIENT_CERT }; cred.clientPrivateKey = android.net.wifi.FakeKeys.RSA_KEY1; assertFalse(cred.validate()); }
public void testLibTestDep() { com.android.build.gradle.model.AndroidProjectTest.ProjectData projectData = getModelForProject("libTestDep"); com.android.builder.model.AndroidProject model = projectData.model; java.util.Collection<com.android.builder.model.Variant> variants = model.getVariants(); com.android.builder.model.Variant debugVariant = com.android.build.gradle.model.AndroidProjectTest.getVariant(variants, "debug"); assertNotNull(debugVariant); java.util.Collection<com.android.builder.model.AndroidArtifact> extraAndroidArtifact = debugVariant.getExtraAndroidArtifacts(); com.android.builder.model.AndroidArtifact testArtifact = com.android.build.gradle.model.AndroidProjectTest.getAndroidArtifact(extraAndroidArtifact, com.android.build.gradle.model.ARTIFACT_ANDROID_TEST); assertNotNull(testArtifact); com.android.builder.model.Dependencies testDependencies = testArtifact.getDependencies(); java.util.Collection<com.android.builder.model.JavaLibrary> javaLibraries = testDependencies.getJavaLibraries(); assertEquals(2, javaLibraries.size()); for (com.android.builder.model.JavaLibrary lib : javaLibraries) { java.io.File f = lib.getJarFile(); assertTrue(((f.getName().equals("guava-11.0.2.jar")) || (f.getName().equals("jsr305-1.3.9.jar")))); } }
private void bindAndInitialize() throws android.telephony.mbms.MbmsException { android.telephony.mbms.MbmsUtils.startBinding(mContext, android.telephony.MbmsStreamingManager.MBMS_STREAMING_SERVICE_ACTION, new android.content.ServiceConnection() { @java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsStreamingService streamingService = IMbmsStreamingService.Stub.asInterface(service); int result; try { result = streamingService.initialize(mInternalCallback, mSubscriptionId); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, "Service died before initialization"); sendErrorToApp(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); android.telephony.MbmsStreamingManager.sIsInitialized.set(false); return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG, "Runtime exception during initialization"); sendErrorToApp(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); android.telephony.MbmsStreamingManager.sIsInitialized.set(false); return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { sendErrorToApp(result, "Error returned during initialization"); android.telephony.MbmsStreamingManager.sIsInitialized.set(false); return; } try { streamingService.asBinder().linkToDeath(mDeathRecipient, 0); } catch (android.os.RemoteException e) { sendErrorToApp(MbmsException.ERROR_MIDDLEWARE_LOST, "Middleware lost during initialization"); android.telephony.MbmsStreamingManager.sIsInitialized.set(false); return; } mService.set(streamingService); } @java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { android.telephony.MbmsStreamingManager.sIsInitialized.set(false); mService.set(null); } }); }
public void testMethodEntry() { logWriter.println("testMethodEntry started"); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); org.apache.harmony.jpda.tests.framework.jdwp.EventBuilder builder = createMethodEntryEventBuilder(org.apache.harmony.jpda.tests.jdwp.EventModifiers.ThreadOnlyModifierTest.TEST_CLASS_NAME); testEventWithThreadOnlyModifier(builder); logWriter.println("testMethodEntry done"); }
@com.googlecode.android_scripting.rpc.Rpc(description = "Set Enhanced 4G mode.") public void imsSetEnhanced4gMode(@com.googlecode.android_scripting.rpc.RpcParameter(name = "enable") java.lang.Boolean enable) { mImsManager.setEnhanced4gLteModeSettingForSlot(enable); }
public void testMergedResourcesByName() throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger(false); verifyResourceExists(merger, "drawable/icon", "drawable-ldpi/icon", "drawable/icon2", "drawable/patch", "raw/foo", "layout/main", "layout/layout_ref", "layout/alias_replaced_by_file", "layout/file_replaced_by_alias", "drawable/color_drawable", "drawable/drawable_ref", "color/color", "string/basic_string", "string/xliff_string", "string/xliff_with_carriage_return", "string/styled_string", "style/style", "array/string_array", "attr/dimen_attr", "attr/string_attr", "attr/enum_attr", "attr/flag_attr", "attr/blah", "attr/blah2", "attr/flagAttr", "declare-styleable/declare_styleable", "dimen/dimen", "dimen-sw600dp/offset", "id/item_id", "integer/integer"); }
public int sendto(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetAddress inetAddress, int port) throws android.system.ErrnoException, java.net.SocketException;
@java.lang.Override public java.lang.String serialize() { float duration = (timeMs) / 1000.0F; java.lang.String pydict = com.android.monkeyrunner.recorder.actions.PyDictUtilBuilder.newBuilder().addTuple("start", startx, starty).addTuple("end", endx, endy).add("duration", duration).add("steps", steps).build(); return "DRAG|" + pydict; }
@java.lang.Override public boolean isPreview() { return (!(mItems.isEmpty())) && (mItems.get(((mItems.size()) - 1)).isPreview()); }
@java.lang.Override public void onRttInitiationFailure(com.android.server.telecom.Call call, int reason) { }
@com.android.annotations.Nullable private com.android.builder.model.AndroidProject execute(@com.android.annotations.NonNull java.util.List<java.lang.String> arguments, boolean returnModel, @com.android.annotations.NonNull java.lang.String... tasks) { org.gradle.tooling.ProjectConnection connection = getProjectConnection(); try { executeBuild(arguments, connection, tasks); if (returnModel) { return connection.getModel(com.android.builder.model.AndroidProject.class); } } finally { connection.close(); } return null; }
public void testRegisterTwiceWithSameSensor() { android.hardware.Sensor sensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER); if (sensor == null) { throw new android.hardware.cts.helpers.SensorNotSupportedException(android.hardware.Sensor.TYPE_ACCELEROMETER); } boolean result = mSensorManager.registerListener(mNullSensorEventListener, sensor, SensorManager.SENSOR_DELAY_NORMAL); assertTrue(result); result = mSensorManager.registerListener(mNullSensorEventListener, sensor, SensorManager.SENSOR_DELAY_NORMAL); assertFalse(result); }
@com.android.annotations.NonNull public java.util.Map<java.lang.String, com.android.builder.model.AndroidProject> getAllModels() { java.util.Map<java.lang.String, com.android.builder.model.AndroidProject> allModels = getAllModels(new com.android.build.gradle.integration.common.fixture.GetAndroidModelAction(), false); for (com.android.builder.model.AndroidProject project : allModels.values()) { com.android.build.gradle.integration.common.fixture.GradleTestProject.assertNoSyncIssues(project); } return allModels; }
private void initDevices() { com.android.ide.eclipse.adt.internal.sdk.Sdk sdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent(); if (sdk != null) { mDeviceList = sdk.getDevices(); } else { mDeviceList = new java.util.ArrayList<com.android.sdklib.devices.Device>(); } if (!(mDeviceList.isEmpty())) { com.android.sdklib.devices.Device first = mDeviceList.get(0); selectDevice(first); java.util.List<com.android.sdklib.devices.State> states = first.getAllStates(); selectDeviceState(states.get(0)); } else { selectDevice(null); } }
@org.junit.Test public void testValidConfigIsSavedOnFailureToStart() throws java.lang.Exception { when(mWifiInjector.makeWificond()).thenReturn(null); when(mWifiInjector.getWifiApConfigStore()).thenReturn(mWifiApConfigStore); android.net.wifi.WifiConfiguration config = new android.net.wifi.WifiConfiguration(); config.SSID = "ThisIsAConfig"; mWifiStateMachinePrime.enterSoftAPMode(config); mLooper.dispatchAll(); assertEquals(com.android.server.wifi.WifiStateMachinePrimeTest.SOFT_AP_MODE_STATE_STRING, mWifiStateMachinePrime.getCurrentMode()); verify(mWifiApConfigStore).setApConfiguration(eq(config)); }
private void dispatchAdjustVolumeLocked(int suggestedStream, int direction, int flags, com.android.server.media.MediaSessionRecord session) { if (com.android.server.media.MediaSessionService.DEBUG) { java.lang.String description = (session == null) ? null : session.toString(); android.util.Log.d(com.android.server.media.MediaSessionService.TAG, ((((((("Adjusting session " + description) + " by ") + direction) + ". flags=") + flags) + ", suggestedStream=") + suggestedStream)); } boolean preferSuggestedStream = false; if ((isValidLocalStreamType(suggestedStream)) && (android.media.AudioSystem.isStreamActive(suggestedStream, 0))) { preferSuggestedStream = true; } if ((session == null) || preferSuggestedStream) { if (((flags & (android.media.AudioManager.FLAG_ACTIVE_MEDIA_ONLY)) != 0) && (!(android.media.AudioSystem.isStreamActive(AudioManager.STREAM_MUSIC, 0)))) { if (com.android.server.media.MediaSessionService.DEBUG) { android.util.Log.d(com.android.server.media.MediaSessionService.TAG, "No active session to adjust, skipping media only volume event"); } return; } mHandler.post(new java.lang.Runnable() { @java.lang.Override public void run() { try { java.lang.String packageName = getContext().getOpPackageName(); mAudioService.adjustSuggestedStreamVolume(direction, suggestedStream, flags, packageName, com.android.server.media.MediaSessionService.TAG); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.media.MediaSessionService.TAG, "Error adjusting default volume.", e); } } }); } else { session.adjustVolume(direction, flags, getContext().getPackageName(), android.os.UserHandle.myUserId(), true); } }
static void setDouble(java.lang.invoke.MethodHandle m, Main.ValueHolder v, double value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEquals(exceptionThrown, expectFailure); }
private static boolean isAbstract(java.lang.Class<?> klass) { return ((klass.getModifiers()) & (java.lang.reflect.Modifier.ABSTRACT)) == (java.lang.reflect.Modifier.ABSTRACT); }
private static synchronized java.security.Key getEncryptKey(java.lang.String algorithm) throws java.lang.Exception { java.security.Key key = libcore.javax.crypto.CipherTest.ENCRYPT_KEYS.get(algorithm); if (key != null) { return key; } if (algorithm.startsWith("RSA")) { java.security.KeyFactory kf = java.security.KeyFactory.getInstance("RSA"); java.security.spec.RSAPrivateKeySpec keySpec = new java.security.spec.RSAPrivateKeySpec(libcore.javax.crypto.CipherTest.RSA_2048_modulus, libcore.javax.crypto.CipherTest.RSA_2048_privateExponent); key = kf.generatePrivate(keySpec); } else if (libcore.javax.crypto.CipherTest.isPBE(algorithm)) { javax.crypto.SecretKeyFactory skf = javax.crypto.SecretKeyFactory.getInstance(algorithm); key = skf.generateSecret(new javax.crypto.spec.PBEKeySpec("secret".toCharArray())); } else { javax.crypto.KeyGenerator kg = javax.crypto.KeyGenerator.getInstance(libcore.javax.crypto.CipherTest.getBaseAlgorithm(algorithm)); key = kg.generateKey(); } libcore.javax.crypto.CipherTest.ENCRYPT_KEYS.put(algorithm, key); return key; }
private synchronized void init(@com.android.annotations.NonNull com.android.utils.ILogger logger) { if ((mSdkInfo) == null) { java.lang.String host; if ((com.android.SdkConstants.CURRENT_PLATFORM) == (com.android.SdkConstants.PLATFORM_DARWIN)) { host = "darwin-x86"; } else if ((com.android.SdkConstants.CURRENT_PLATFORM) == (com.android.SdkConstants.PLATFORM_LINUX)) { host = "linux"; } else { throw new java.lang.IllegalStateException("Windows is not supported for platform development"); } mSdkInfo = new com.android.builder.sdk.SdkInfo(new java.io.File(mTreeLocation, (("out/host/" + host) + "/framework/annotations.jar")), new java.io.File(mTreeLocation, (("out/host/" + host) + "/bin/adb")), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_ZIPALIGN)); } }
private void processFile(final java.io.File file, final com.android.builder.internal.compiler.SourceSearcher.SourceFileProcessor processor) throws java.io.IOException, java.lang.InterruptedException { if (file.isFile()) { if (checkExtension(file)) { if ((mExecutor) != null) { mExecutor.execute(new java.util.concurrent.Callable() { @java.lang.Override public java.lang.Object call() throws java.lang.Exception { processor.processFile(file); return null; } }); } else { processor.processFile(file); } } } else if (file.isDirectory()) { java.io.File[] children = file.listFiles(); if (children != null) { for (java.io.File child : children) { processFile(child, processor); } } } }
@java.lang.Override @javax.annotation.Nonnull java.io.InputStream openRead(@javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVFile file) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.READ); java.io.File path = getNativeFile(file.getPath()); try { return new java.io.FileInputStream(path); } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.READ); throw new com.android.sched.util.ConcurrentIOException(e); } }
private void loadViewServerInfoAndWindows(final com.android.ddmlib.IDevice device) { com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo viewServerInfo = com.android.hierarchyviewerlib.device.DeviceBridge.loadViewServerInfo(device); if (viewServerInfo == null) { return; } com.android.hierarchyviewerlib.device.Window[] windows = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindows(device); com.android.hierarchyviewerlib.models.DeviceSelectionModel.getModel().addDevice(device, windows); if ((viewServerInfo.protocolVersion) >= 3) { com.android.hierarchyviewerlib.device.WindowUpdater.startListenForWindowChanges(this, device); focusChanged(device); } }
public void setMainResourcesDir(java.io.File mainResourcesDir) { myMainResourcesDir = mainResourcesDir; }
@org.junit.Test public void validateUserCredentialWithoutRealm() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential(); cred.userCredential = new android.net.wifi.hotspot2.pps.Credential.UserCredential(); cred.userCredential.username = "username"; cred.userCredential.password = "password"; cred.userCredential.eapType = android.net.wifi.EAPConstants.EAP_TTLS; cred.userCredential.nonEapInnerMethod = "MS-CHAP"; cred.caCertificate = android.net.wifi.FakeKeys.CA_CERT0; assertFalse(cred.validate()); }
@org.junit.Test public void testControllerUpdate() { com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper.wrap(mMockController, mThread.getLooper()); org.junit.Assert.assertTrue(wrapper.isReady()); wrapper.registerCallback(mTestCbs); com.android.bluetooth.avrcp.MediaController mUpdatedController = mock(com.android.bluetooth.avrcp.MediaController.class); doReturn(mTestState.build()).when(mUpdatedController).getPlaybackState(); mTestMetadata.putString(MediaMetadata.METADATA_KEY_TITLE, "New Title"); doReturn(mTestMetadata.build()).when(mUpdatedController).getMetadata(); doReturn(null).when(mMockController).getQueue(); wrapper.updateMediaController(mUpdatedController); verify(mUpdatedController).registerCallback(mControllerCbs.capture(), any()); com.android.bluetooth.avrcp.MediaController.Callback controllerCallbacks = mControllerCbs.getValue(); controllerCallbacks.onMetadataChanged(mTestMetadata.build()); verify(mTestCbs, never()).mediaUpdatedCallback(any()); }
private void updateCarrierIdAndName(int cid, java.lang.String name) { boolean update = false; if (!(com.android.internal.telephony.CarrierIdentifier.equals(name, mCarrierName, true))) { com.android.internal.telephony.CarrierIdentifier.logd(((("[updateCarrierName] from:" + (mCarrierName)) + " to:") + name)); mCarrierName = name; update = true; } if (cid != (mCarrierId)) { com.android.internal.telephony.CarrierIdentifier.logd(((("[updateCarrierId] from:" + (mCarrierId)) + " to:") + cid)); mCarrierId = cid; update = true; } if (update) { mCarrierIdLocalLog.log(((("[updateCarrierIdAndName] cid:" + (mCarrierId)) + " name:") + (mCarrierName))); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED); intent.putExtra(TelephonyManager.EXTRA_CARRIER_ID, mCarrierId); intent.putExtra(TelephonyManager.EXTRA_CARRIER_NAME, mCarrierName); intent.putExtra(TelephonyManager.EXTRA_SUBSCRIPTION_ID, mPhone.getSubId()); mContext.sendBroadcast(intent); android.content.ContentValues cv = new android.content.ContentValues(); cv.put(CarrierId.CARRIER_ID, mCarrierId); cv.put(CarrierId.CARRIER_NAME, mCarrierName); mContext.getContentResolver().update(android.net.Uri.withAppendedPath(CarrierId.CONTENT_URI, java.lang.Integer.toString(mPhone.getSubId())), cv, null, null); } }
public void test_EVP_CipherInit_ex_Null_Failure() throws java.lang.Exception { org.apache.harmony.xnet.provider.jsse.OpenSSLCipherContext context = new org.apache.harmony.xnet.provider.jsse.OpenSSLCipherContext(org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CIPHER_CTX_new()); int evpCipher = org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_get_cipherbyname("aes-128-ecb"); try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CipherInit_ex(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, evpCipher, null, null, true); fail("Null context should throw NullPointerException"); } catch (java.lang.NullPointerException expected) { } org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CipherInit_ex(context.getContext(), evpCipher, null, null, true); org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CipherInit_ex(context.getContext(), org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, null, null, true); org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CipherInit_ex(context.getContext(), evpCipher, null, null, false); org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CipherInit_ex(context.getContext(), org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, null, null, false); }
public boolean isFreed() { return (address) == 0; }
@java.lang.Override public final int initialize(final android.telephony.mbms.IMbmsStreamingSessionCallback callback, final int subscriptionId) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); callback.asBinder().linkToDeath(new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, subscriptionId); } }, 0); return initialize(new android.telephony.mbms.MbmsStreamingSessionCallback() { @java.lang.Override public void onError(int errorCode, java.lang.String message) { try { callback.onError(errorCode, message); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } @java.lang.Override public void onStreamingServicesUpdated(java.util.List<android.telephony.mbms.StreamingServiceInfo> services) { try { callback.onStreamingServicesUpdated(services); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } @java.lang.Override public void onMiddlewareReady() { try { callback.onMiddlewareReady(); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } }, subscriptionId); }
synchronized void nAllocationRead1D(long id, int off, int mip, int count, java.lang.Object d, int sizeBytes, android.renderscript.Element.DataType dt, int mSize, boolean usePadding) { validate(); rsnAllocationRead1D(mContext, id, off, mip, count, d, sizeBytes, dt.mID, mSize, usePadding); }
@java.lang.Override public void onCreate(android.database.sqlite.SQLiteDatabase db) { db.execSQL((((((((((((((((((((((((("CREATE TABLE " + (com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE)) + "(_id INTEGER PRIMARY KEY,") + "name TEXT,") + "numeric TEXT,") + "mcc TEXT,") + "mnc TEXT,") + "apn TEXT,") + "user TEXT,") + "server TEXT,") + "password TEXT,") + "proxy TEXT,") + "port TEXT,") + "mmsproxy TEXT,") + "mmsport TEXT,") + "mmsc TEXT,") + "authtype INTEGER,") + "type TEXT,") + "current INTEGER,") + "protocol TEXT,") + "roaming_protocol TEXT,") + "carrier_enabled BOOLEAN,") + "bearer INTEGER,") + "mvno_type TEXT,") + "mvno_match_data TEXT);")); initDatabase(db); }
public static java.lang.String mapLibraryName(java.lang.String nickname) { if (nickname == null) { throw new java.lang.NullPointerException("nickname == null"); } return ("lib" + nickname) + ".so"; }
public native void tcdrain(java.io.FileDescriptor fd) throws android.system.ErrnoException;
@java.lang.Override public void getNetworkSelectionMode(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_QUERY_NETWORK_SELECTION_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getNetworkSelectionMode(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getNetworkSelectionMode", e); } } }
@java.lang.Override public void onConnectionStateChange(android.bluetooth.BluetoothGatt gatt, int status, int newState) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, ("onConnectionStateChange " + status)); if (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, ((("State Connected to mac address " + (gatt.getDevice().getAddress())) + " status ") + status)); mBluetoothGatt.discoverServices(); } else if (newState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, ((("State Disconnected from mac address " + (gatt.getDevice().getAddress())) + " status ") + status)); try { mBluetoothGatt.close(); } catch (java.lang.Exception e) { android.util.Log.e(com.android.pmc.GattClientListener.TAG, ("Close Gatt: " + e)); } mBluetoothGatt = null; } else if (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTING)) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, ((("State Connecting to mac address " + (gatt.getDevice().getAddress())) + " status ") + status)); } else if (newState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTING)) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, ((("State Disconnecting from mac address " + (gatt.getDevice().getAddress())) + " status ") + status)); } }
@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentStateDisconnected() throws android.os.RemoteException { com.android.ims.ImsReasonInfo info = new com.android.ims.ImsReasonInfo(com.android.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_NO_LTE_COVERAGE, 0); mRegistration.onDeregistered(info); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback).onDeregistered(eq(info)); verify(mCallback2).onDeregistered(eq(info)); }
protected void t_FormatWithField(int count, java.text.Format format, java.lang.Object object, java.lang.String text, java.text.Format.Field field, int begin, int end) { java.lang.StringBuffer buffer = new java.lang.StringBuffer(); java.text.FieldPosition pos = new java.text.FieldPosition(field); format.format(object, buffer, pos); if (text == null) { assertEquals((("Test " + count) + ": incorrect formatted text"), this.text, buffer.toString()); } else { assertEquals(text, buffer.toString()); } if ((begin != (pos.getBeginIndex())) || (end != (pos.getEndIndex()))) { assertEquals(((((field + " ") + begin) + "..") + end), (((((pos.getFieldAttribute()) + " ") + (pos.getBeginIndex())) + "..") + (pos.getEndIndex()))); } }
public java.io.BufferedReader getInputStream() throws java.io.IOException { if ((in) == null) { in = new java.io.BufferedReader(new java.io.InputStreamReader(socketChannel.socket().getInputStream())); } return in; }
private void handleImportanceChange(com.android.bluetooth.gatt.ScanManager.UidImportance imp) { if (imp == null) { return; } int uid = imp.uid; int importance = imp.importance; boolean updatedScanParams = false; if (importance <= (ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND_SERVICE)) { for (com.android.bluetooth.gatt.ScanClient client : mRegularScanClients) { if (((client.appUid) == uid) && ((client.passiveSettings) != null)) { client.settings = client.passiveSettings; client.passiveSettings = null; updatedScanParams = true; } } } else { for (com.android.bluetooth.gatt.ScanClient client : mRegularScanClients) { if (((client.appUid) == uid) && (!(mScanNative.isOpportunisticScanClient(client)))) { client.passiveSettings = client.settings; android.bluetooth.le.ScanSettings.Builder builder = new android.bluetooth.le.ScanSettings.Builder(); android.bluetooth.le.ScanSettings settings = client.settings; builder.setScanMode(ScanSettings.SCAN_MODE_LOW_POWER); builder.setCallbackType(settings.getCallbackType()); builder.setScanResultType(settings.getScanResultType()); builder.setReportDelay(settings.getReportDelayMillis()); builder.setNumOfMatches(settings.getNumOfMatches()); client.settings = builder.build(); updatedScanParams = true; } } } if (updatedScanParams) { mScanNative.configureRegularScanParams(); } }
public void addConnectionToConferenceController(com.android.services.telephony.TelephonyConnection connection) { if (connection.isImsConnection()) { com.android.services.telephony.Log.d(this, ("Adding IMS connection to conference controller: " + connection)); mTelephonyConferenceController.add(connection); } else { int phoneType = connection.getCall().getPhone().getPhoneType(); if (phoneType == (android.telephony.TelephonyManager.PHONE_TYPE_GSM)) { com.android.services.telephony.Log.d(this, ("Adding GSM connection to conference controller: " + connection)); mTelephonyConferenceController.add(connection); } else if ((phoneType == (android.telephony.TelephonyManager.PHONE_TYPE_CDMA)) && (connection instanceof com.android.services.telephony.CdmaConnection)) { com.android.services.telephony.Log.d(this, ("Adding CDMA connection to conference controller: " + connection)); mCdmaConferenceController.add(((com.android.services.telephony.CdmaConnection) (connection))); } } }
@java.lang.Override public void checkValidity() { if (!(((parent) instanceof com.android.jack.ir.ast.JStatement) || ((parent) instanceof com.android.jack.ir.ast.JAbstractMethodBody))) { throw new com.android.jack.ir.InternalCompilerException(this, "Invalid parent"); } }
@java.lang.Override public void onRttInitiationFailure(com.android.server.telecom.Call call, int reason) { notifyRttInitiationFailure(call, reason); updateCall(call, false, true); }
@java.lang.Override public java.util.Collection<com.android.builder.model.SigningConfig> getSigningConfigs() { return com.google.common.collect.ImmutableList.copyOf(com.google.common.collect.Iterables.transform(model.getSigningConfigs(), new com.google.common.base.Function<com.android.build.gradle.managed.SigningConfig, com.android.builder.model.SigningConfig>() { @java.lang.Override public com.android.build.gradle.managed.SigningConfig apply(com.android.build.gradle.managed.SigningConfig signingConfig) { return new com.android.build.gradle.managed.adaptor.SigningConfigAdaptor(signingConfig); } })); }
@org.junit.Test public void testParcelNetworkCapabilities() { final java.util.Set<android.net.UidRange> uids = new android.util.ArraySet(); uids.add(new android.net.UidRange(50, 100)); uids.add(new android.net.UidRange(3000, 4000)); final android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET).setUids(uids).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_EIMS).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); assertEqualsThroughMarshalling(netCap); }
@java.lang.Override protected java.lang.String getEFPath(int efid) { switch (efid) { case EF_SMS : case EF_CST : case EF_RUIM_SPN : case EF_CSIM_LI : case EF_CSIM_MDN : case EF_CSIM_IMSIM : case EF_CSIM_CDMAHOME : case EF_CSIM_EPRL : return (MF_SIM) + (DF_CDMA); } return getCommonIccEFPath(efid); }
@java.lang.Override public void showPopup(com.intellij.ui.awt.RelativePoint showTarget) { if (((myPopup) == null) || (myPopup.isDisposed())) { com.google.gct.idea.elysium.UserSelector.PopupPanel popupPanel = new com.google.gct.idea.elysium.UserSelector.PopupPanel(); popupPanel.initializeContent(getText()); com.intellij.openapi.ui.popup.ComponentPopupBuilder popup = com.intellij.openapi.ui.popup.JBPopupFactory.getInstance().createComponentPopupBuilder(popupPanel, popupPanel.getInitialFocus()); myPopup = popup.createPopup(); } if (!(myPopup.isVisible())) { myPopup.show(showTarget); } }
@org.junit.Test public void testMessageFromNative_deviceConnected() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectedEvent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, mNativeInterface, mSystemInterface); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.STACK_EVENT, connectedEvent); when(mStateMachines.get(mCurrentDevice).getDevice()).thenReturn(mCurrentDevice); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_CONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(mCurrentDevice), mHeadsetService.getConnectedDevices()); com.android.bluetooth.hfp.HeadsetStackEvent disconnectEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(disconnectEvent); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.STACK_EVENT, disconnectEvent); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.EMPTY_LIST, mHeadsetService.getConnectedDevices()); }
private static void createGradleProperties(@com.android.annotations.NonNull java.io.File location) throws java.io.IOException { com.google.common.io.Files.write(("org.gradle.jvmargs=-Xmx6096m -XX:MaxPermSize=1024m\n" + "org.gradle.daemon=true\n"), new java.io.File(location, "gradle.properties"), java.nio.charset.Charset.defaultCharset()); }
private void checkSinhFloat2Float2() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 5294606753004842336L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testSinhFloat2Float2(in, out); verifyResultsSinhFloat2Float2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testSinhFloat2Float2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testSinhFloat2Float2(in, out); verifyResultsSinhFloat2Float2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testSinhFloat2Float2: " + (e.toString()))); } }
public java.util.Collection<com.android.bips.discovery.DiscoveredPrinter> getSavedPrinters() { java.util.List<com.android.bips.discovery.DiscoveredPrinter> printers = new java.util.ArrayList<>(); for (com.android.bips.discovery.Discovery child : getChildren()) { if (child != (this)) { printers.addAll(child.getSavedPrinters()); } } return printers; }
@java.lang.Override public java.lang.String getShortDescription() { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData target = getAndroidTarget(); com.android.ide.eclipse.adt.internal.editors.manifest.descriptors.AndroidManifestDescriptors manifestDescriptors = null; if (target != null) { manifestDescriptors = target.getManifestDescriptors(); } java.lang.String name = getDescriptor().getUiName(); if ((((manifestDescriptors != null) && ((getXmlNode()) != null)) && ((getXmlNode()) instanceof org.w3c.dom.Element)) && (getXmlNode().hasAttributes())) { com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor desc = getDescriptor(); if ((desc != (manifestDescriptors.getManifestElement())) && (desc != (manifestDescriptors.getApplicationElement()))) { org.w3c.dom.Element elem = ((org.w3c.dom.Element) (getXmlNode())); java.lang.String attr = _Element_getAttributeNS(elem, SdkConstants.NS_RESOURCES, AndroidManifestDescriptors.ANDROID_NAME_ATTR); if ((attr == null) || ((attr.length()) == 0)) { attr = _Element_getAttributeNS(elem, SdkConstants.NS_RESOURCES, AndroidManifestDescriptors.ANDROID_LABEL_ATTR); } if ((attr != null) && ((attr.length()) > 0)) { if (attr.contains(name)) { return attr; } else { return java.lang.String.format("%1$s (%2$s)", attr, name); } } } } return java.lang.String.format("%1$s", name); }
public static void captureView(@com.android.annotations.NonNull com.android.ddmlib.Client client, @com.android.annotations.NonNull java.lang.String viewRoot, @com.android.annotations.NonNull java.lang.String view, @com.android.annotations.NonNull com.android.ddmlib.HandleViewDebug.ViewDumpHandler handler) throws java.io.IOException { com.android.ddmlib.HandleViewDebug.sendViewOpPacket(client, com.android.ddmlib.HandleViewDebug.VUOP_CAPTURE_VIEW, viewRoot, view, handler); }
@org.junit.Test public void testSettingsAllowsStart() { setupFunctioningHardwareInterface(); Settings.Global.putInt(mContentResolver, android.provider.Settings.Global.TETHER_OFFLOAD_DISABLED, 0); final com.android.server.connectivity.tethering.OffloadController offload = new com.android.server.connectivity.tethering.OffloadController(null, mHardware, mContentResolver, new android.net.util.SharedLog("test")); offload.start(); final org.mockito.InOrder inOrder = inOrder(mHardware); inOrder.verify(mHardware, times(1)).initOffloadConfig(); inOrder.verify(mHardware, times(1)).initOffloadControl(any(OffloadHardwareInterface.ControlCallback.class)); inOrder.verifyNoMoreInteractions(); }
public int getsockoptInt(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException { return os.getsockoptInt(fd, level, option); }
@java.lang.Override public org.conscrypt.ct.CTLogInfo getKnownLog(byte[] logId) { if ((knownLogs) == null) { knownLogs = org.conscrypt.ct.CTLogStoreImpl.getDefaultKnownLogs(); } for (org.conscrypt.ct.CTLogInfo log : knownLogs) { if (java.util.Arrays.equals(logId, log.getID())) { return log; } } return null; }
@java.lang.Override public void write(@javax.annotation.Nonnull com.android.sched.vfs.OutputVDir outputVDir) throws com.android.jack.backend.dex.DexWritingException { int dexCount = 1; com.android.jack.tools.merger.JackMerger merger = new com.android.jack.tools.merger.JackMerger(createDexFile()); com.android.sched.vfs.OutputVFile outputDex = getOutputDex(outputVDir, (dexCount++)); java.util.List<com.android.sched.vfs.InputVFile> mainDexList = new java.util.ArrayList<com.android.sched.vfs.InputVFile>(); java.util.List<com.android.sched.vfs.InputVFile> anyDexList = new java.util.ArrayList<com.android.sched.vfs.InputVFile>(); fillDexLists(mainDexList, anyDexList); for (com.android.sched.vfs.InputVFile currentDex : mainDexList) { try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergingOverflowException e) { throw new com.android.jack.backend.dex.DexWritingException(new com.android.jack.backend.dex.MainDexOverflowException(e)); } } for (com.android.sched.vfs.InputVFile currentDex : anyDexList) { try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergingOverflowException e) { finishMerge(merger, outputDex); outputDex = getOutputDex(outputVDir, (dexCount++)); merger = new com.android.jack.tools.merger.JackMerger(createDexFile()); try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergingOverflowException e1) { throw new java.lang.AssertionError(e1); } } } finishMerge(merger, outputDex); }
@org.junit.Test public void test002e() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); try { jackOutput = runTest002(true, "fail", errOut, true, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { junit.framework.Assert.assertTrue(((e.getCause()) instanceof com.android.jack.library.LibraryReadingException)); junit.framework.Assert.assertTrue(((e.getCause().getCause()) instanceof com.android.jack.resource.ResourceImportConflictException)); java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains("Resource in")); junit.framework.Assert.assertTrue(errString.contains("rsc/Resource1")); junit.framework.Assert.assertTrue(errString.contains("has already been imported")); } }
public java.lang.String StripTelephoneNumber(java.lang.String vCard) { java.lang.String[] attr = vCard.split(java.lang.System.getProperty("line.separator")); java.lang.String Vcard = ""; for (int i = 0; i < (attr.length); i++) { if (attr[i].startsWith("TEL")) { attr[i] = attr[i].replace("(", ""); attr[i] = attr[i].replace(")", ""); attr[i] = attr[i].replace("-", ""); attr[i] = attr[i].replace(" ", ""); } } for (int i = 0; i < (attr.length); i++) { if (!(attr[i].isEmpty())) { Vcard = Vcard.concat(((attr[i]) + "\n")); } } if (com.android.bluetooth.pbap.BluetoothPbapVcardManager.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ("Vcard with stripped telephone no.: " + Vcard)); return Vcard; }
public static javax.net.ssl.SSLSession wrapSSLSession(org.conscrypt.AbstractOpenSSLSession sslSession) { if ((Build.VERSION.SDK_INT) <= 23) { return sslSession; } else { return new org.conscrypt.OpenSSLExtendedSessionImpl(sslSession); } }
public boolean hasChanged(@com.android.annotations.Nullable com.android.utils.ILogger log) { return mLocalSdk.hasChanged((((com.android.sdklib.local.LocalSdk.PKG_PLATFORMS) | (com.android.sdklib.local.LocalSdk.PKG_ADDONS)) | (com.android.sdklib.local.LocalSdk.PKG_BUILD_TOOLS))); }
public com.android.ide.common.rendering.api.RenderSession createSession(com.android.ide.common.rendering.api.Params params) { if ((mBridge) != null) { return mBridge.createSession(params); } else if ((mLegacyBridge) != null) { return createLegacySession(params); } return null; }
public void test_replaceAll() { java.util.IdentityHashMap<java.lang.String, java.lang.String> map = new java.util.IdentityHashMap<>(); java.lang.String key1 = "key1"; java.lang.String key2 = "key2"; java.lang.String key3 = "key3"; map.put(key1, "1"); map.put(key2, "2"); map.put(key3, "3"); map.replaceAll(( k, v) -> k + v); assertEquals("key11", map.get(key1)); assertEquals("key22", map.get(key2)); assertEquals("key33", map.get(key3)); assertEquals(3, map.size()); try { map.replaceAll(new java.util.function.BiFunction<java.lang.String, java.lang.String, java.lang.String>() { @java.lang.Override public java.lang.String apply(java.lang.String s, java.lang.String s2) { map.put("key4", "4"); return ""; } }); fail(); } catch (java.util.ConcurrentModificationException expected) { } }
public static void assertSSLContextDefaultConfiguration(javax.net.ssl.SSLContext sslContext) throws java.io.IOException { javax.net.ssl.SSLParameters defaultParameters = sslContext.getDefaultSSLParameters(); libcore.java.security.StandardNames.assertSSLContextEnabledProtocols(sslContext.getProtocol(), defaultParameters.getProtocols()); libcore.java.security.StandardNames.assertDefaultCipherSuites(defaultParameters.getCipherSuites()); assertFalse(defaultParameters.getWantClientAuth()); assertFalse(defaultParameters.getNeedClientAuth()); javax.net.ssl.SSLParameters supportedParameters = sslContext.getSupportedSSLParameters(); libcore.java.security.StandardNames.assertSupportedCipherSuites(supportedParameters.getCipherSuites()); libcore.java.security.StandardNames.assertSupportedProtocols(supportedParameters.getProtocols()); assertFalse(supportedParameters.getWantClientAuth()); assertFalse(supportedParameters.getNeedClientAuth()); libcore.javax.net.ssl.SSLConfigurationAsserts.assertContainsAll("Unsupported enabled cipher suites", supportedParameters.getCipherSuites(), defaultParameters.getCipherSuites()); libcore.javax.net.ssl.SSLConfigurationAsserts.assertContainsAll("Unsupported enabled protocols", supportedParameters.getProtocols(), defaultParameters.getProtocols()); libcore.javax.net.ssl.SSLConfigurationAsserts.assertSSLSocketFactoryConfigSameAsSSLContext(sslContext.getSocketFactory(), sslContext); libcore.javax.net.ssl.SSLConfigurationAsserts.assertSSLServerSocketFactoryConfigSameAsSSLContext(sslContext.getServerSocketFactory(), sslContext); javax.net.ssl.SSLEngine sslEngine = sslContext.createSSLEngine(); assertFalse(sslEngine.getUseClientMode()); libcore.javax.net.ssl.SSLConfigurationAsserts.assertSSLEngineConfigSameAsSSLContext(sslEngine, sslContext); }
public static native java.lang.String EVP_PKEY_print_private(int pkeyRef);
public void event(android.telecom.Logging.EventManager.Loggable recordEntry, java.lang.String event, java.lang.String format, java.lang.Object... args) { java.lang.String msg; try { msg = ((args == null) || ((args.length) == 0)) ? format : java.lang.String.format(java.util.Locale.US, format, args); } catch (java.util.IllegalFormatException ife) { android.telecom.Log.e("Log", ife, "IllegalFormatException: formatString='%s' numArgs=%d", format, args.length); msg = format + " (An error occurred while formatting the message.)"; } event(recordEntry, event, msg); }
org.eclipse.core.resources.IMarker createMarkerFromSearchMatch(org.eclipse.core.resources.IFile file, org.eclipse.jdt.core.search.SearchMatch match) { java.util.HashMap<java.lang.String, java.lang.Object> map = new java.util.HashMap<java.lang.String, java.lang.Object>(); map.put(IMarker.CHAR_START, new java.lang.Integer(match.getOffset())); map.put(IMarker.CHAR_END, new java.lang.Integer(((match.getOffset()) + (match.getLength())))); org.eclipse.core.resources.IMarker marker = null; try { marker = file.createMarker(IMarker.TEXT); marker.setAttributes(map); } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.core.runtime.Status s = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.Status.ERROR, com.android.ide.eclipse.ddms.DdmsPlugin.PLUGIN_ID, e.getMessage(), e); com.android.ide.eclipse.ddms.DdmsPlugin.getDefault().getLog().log(s); } return marker; }
@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.LongSuite.class, timeout = 1) @org.junit.Test public void testRunner_LongSuite_WithTimeout() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); expectedResults().forTestClass(vogar.target.junit3.LongTest.class).failure("test", "java.util.concurrent.TimeoutException\n").aborted(); }
@org.junit.Test public void test_readAllLine$Path$Charset() throws java.io.IOException { junit.framework.TestCase.assertTrue(java.nio.file.Files.exists(filesSetup.getDataFilePath())); libcore.java.nio.file.FilesSetup.writeToFile(filesSetup.getDataFilePath(), ("\n" + (libcore.java.nio.file.FilesSetup.TEST_FILE_DATA_2)), java.nio.file.StandardOpenOption.APPEND); java.util.List<java.lang.String> out = java.nio.file.Files.readAllLines(filesSetup.getDataFilePath(), java.nio.charset.StandardCharsets.UTF_8); assertEquals(2, out.size()); assertEquals(libcore.java.nio.file.FilesSetup.TEST_FILE_DATA, out.get(0)); assertEquals(libcore.java.nio.file.FilesSetup.TEST_FILE_DATA_2, out.get(1)); out = java.nio.file.Files.readAllLines(filesSetup.getDataFilePath(), java.nio.charset.StandardCharsets.UTF_16); assertEquals(1, out.size()); java.lang.String expectedOutput = new java.lang.String((((libcore.java.nio.file.FilesSetup.TEST_FILE_DATA) + '\n') + (libcore.java.nio.file.FilesSetup.TEST_FILE_DATA_2)).getBytes(), java.nio.charset.StandardCharsets.UTF_16); assertEquals(expectedOutput, out.get(0)); filesSetup.reset(); try { java.nio.file.Files.readAllLines(filesSetup.getTestPath(), java.nio.charset.StandardCharsets.UTF_16); fail(); } catch (java.nio.file.NoSuchFileException expected) { } filesSetup.reset(); try { java.nio.file.Files.readAllLines(filesSetup.getTestDirPath(), java.nio.charset.StandardCharsets.UTF_16); fail(); } catch (java.io.IOException expected) { } }
private static java.nio.charset.Charset getConsoleEncoding() { java.lang.String consoleCharsetName; try { java.lang.reflect.Method encodingMethod = java.io.Console.class.getDeclaredMethod("encoding"); encodingMethod.setAccessible(true); consoleCharsetName = ((java.lang.String) (encodingMethod.invoke(null))); if (consoleCharsetName == null) { return java.nio.charset.Charset.defaultCharset(); } } catch (java.lang.ReflectiveOperationException e) { java.nio.charset.Charset defaultCharset = java.nio.charset.Charset.defaultCharset(); java.lang.System.err.println(("warning: Failed to obtain console character encoding name. Assuming " + defaultCharset)); return defaultCharset; } try { return java.nio.charset.Charset.forName(consoleCharsetName); } catch (java.lang.IllegalArgumentException e) { if ("cp65001".equals(consoleCharsetName)) { return java.nio.charset.StandardCharsets.UTF_8; } java.nio.charset.Charset defaultCharset = java.nio.charset.Charset.defaultCharset(); java.lang.System.err.println((((("warning: Console uses unknown character encoding: " + consoleCharsetName) + ". Using ") + defaultCharset) + " instead")); return defaultCharset; } }
@org.junit.Test public void testBaseIntersectionCast() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_39).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
@com.android.annotations.NonNull @java.lang.Override public java.util.List<java.io.File> getJarJarRuleFiles() { return buildType.getJarJarRuleFiles(); }
@com.android.annotations.NonNull public com.android.ide.common.repository.ResourceVisibilityLookup get(@com.android.annotations.NonNull com.android.builder.model.AndroidLibrary library) { com.android.ide.common.repository.ResourceVisibilityLookup visibility = mInstances.get(library); if (visibility == null) { visibility = new com.android.ide.common.repository.ResourceVisibilityLookup.LibraryResourceVisibility(library); if (visibility.isEmpty()) { visibility = com.android.ide.common.repository.ResourceVisibilityLookup.NONE; } java.util.List<? extends com.android.builder.model.AndroidLibrary> dependsOn = library.getLibraryDependencies(); if (!(dependsOn.isEmpty())) { java.util.List<com.android.ide.common.repository.ResourceVisibilityLookup> list = com.google.common.collect.Lists.newArrayListWithExpectedSize(((dependsOn.size()) + 1)); list.add(visibility); for (com.android.builder.model.AndroidLibrary d : dependsOn) { com.android.ide.common.repository.ResourceVisibilityLookup v = get(d); if (!(v.isEmpty())) { list.add(v); } } if ((list.size()) > 1) { visibility = new com.android.ide.common.repository.ResourceVisibilityLookup.MultipleLibraryResourceVisibility(list); } } mInstances.put(library, visibility); } return visibility; }
public int enableFirmwareRoaming(int state) { synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_NOT_STARTED; try { byte val; switch (state) { case WifiNative.DISABLE_FIRMWARE_ROAMING : val = android.hardware.wifi.V1_0.StaRoamingState.DISABLED; break; case WifiNative.ENABLE_FIRMWARE_ROAMING : val = android.hardware.wifi.V1_0.StaRoamingState.ENABLED; break; default : mErrLog.e(("enableFirmwareRoaming invalid argument " + state)); return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_INVALID_ARGS; } android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.setRoamingState(val); mLog.d(("setRoamingState returned " + (status.code))); return status.code; } catch (android.os.RemoteException e) { handleRemoteException(e); return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_UNKNOWN; } } }
@com.android.annotations.NonNull byte[] getIntAsArray(int value) { return ((java.nio.ByteBuffer) (mIntBuffer.rewind())).putInt(value).array(); }
public void addU32(long v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addU32(v); return; } if ((v < 0) || (v > 4294967295L)) { android.util.Log.e("rs", (("FieldPacker.addU32( " + v) + " )")); throw new java.lang.IllegalArgumentException("Saving value out of range for type"); } align(4); mData[((mPos)++)] = ((byte) (v & 255)); mData[((mPos)++)] = ((byte) ((v >> 8) & 255)); mData[((mPos)++)] = ((byte) ((v >> 16) & 255)); mData[((mPos)++)] = ((byte) ((v >> 24) & 255)); }
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) throws java.lang.Exception { if ((((method.getEnclosingType().isExternal()) || (method.isNative())) || (method.isAbstract())) || (!(filter.accept(this.getClass(), method)))) { return; } com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest(method); com.android.jack.transformations.ast.inner.MethodCallDispatchAdjuster.Adjuster visitor; if (method.containsMarker(com.android.jack.transformations.ast.inner.NeedsRethising.class)) { visitor = new com.android.jack.transformations.ast.inner.MethodCallDispatchAdjuster.RethisingAdjuster(tr, method); method.removeMarker(com.android.jack.transformations.ast.inner.NeedsRethising.class); } else { visitor = new com.android.jack.transformations.ast.inner.MethodCallDispatchAdjuster.Adjuster(tr, method); } visitor.accept(method); tr.commit(); }
private void getPixelValuesFromOutputBuffer(java.nio.ByteBuffer buffer, int x, int y, com.android.cts.videoperf.VideoEncoderDecoderTest.YUVValue result) { result.mY = buffer.get(((y * (mBufferStride)) + x)); if (isDstSemiPlanar()) { int index = (((mBufferStride) * (mBufferVStride)) + ((y / 2) * (mBufferStride))) + ((x / 2) * 2); result.mU = buffer.get(index); result.mV = buffer.get((index + 1)); } else { int vOffset = ((mBufferStride) * (mBufferVStride)) / 4; int index = (((mBufferStride) * (mBufferVStride)) + (((y / 2) * (mBufferStride)) / 2)) + (x / 2); result.mU = buffer.get(index); result.mV = buffer.get((index + vOffset)); } }
public java.util.List<com.android.ide.common.rendering.api.ViewInfo> getRootViews() { return null; }
final void get(long[] dst, int dstOffset, int longCount) { checkIsAccessible(); int byteCount = checkGetBounds(SizeOf.LONG, dst.length, dstOffset, longCount); this.block.peekLongArray(((offset) + (position)), dst, dstOffset, longCount, order.needsSwap); position += byteCount; }
void putBigEndianTwosComplement(byte[] a) { this.makeValid(); java.math.NativeBN.twosComp2bn(a, a.length, this.bignum); }
private javax.crypto.KeyAgreementSpi getSpi() { try { return getSpi(null); } catch (java.security.InvalidKeyException e) { throw new java.lang.IllegalStateException("InvalidKeyException thrown when key == null", e); } }
java.lang.String getZoneInfosString() { return zoneInfos.stream().map(( z) -> (((z.getZoneId()) + "(") + (z.getPriority())) + ")").collect(java.util.stream.Collectors.toList()).toString(); }
static float $opt$noinline$CharToFloat(char a) { if (Main.doThrow) throw new java.lang.Error(); return ((float) (a)); }
public void testConnectOverProxy_implicit_http_fails() throws java.lang.Exception { byte[] fileContents = "abcdef 1234567890".getBytes(java.nio.charset.StandardCharsets.UTF_8); java.net.URL fileUrl = addFileEntry(libcore.java.net.FtpURLConnectionTest.FILE_PATH, fileContents); java.net.ProxySelector defaultProxySelector = java.net.ProxySelector.getDefault(); try { libcore.java.net.FtpURLConnectionTest.CountingProxy countingProxy = libcore.java.net.FtpURLConnectionTest.CountingProxy.start(); try { java.net.Proxy proxy = countingProxy.asProxy(); libcore.java.net.FtpURLConnectionTest.SingleProxySelector proxySelector = new libcore.java.net.FtpURLConnectionTest.SingleProxySelector(proxy); java.net.ProxySelector.setDefault(proxySelector); java.net.URLConnection connection = fileUrl.openConnection(); java.io.InputStream inputStream = connection.getInputStream(); java.io.IOException e = proxySelector.getLastException(); assertEquals("FTP connections over HTTP proxy not supported", e.getMessage()); libcore.java.net.FtpURLConnectionTest.assertContents(fileContents, inputStream); countingProxy.waitAndAssertConnectionCount(0); } finally { countingProxy.shutdown(); } } finally { java.net.ProxySelector.setDefault(defaultProxySelector); } }
@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testInvokePolymorphic006_2() throws java.lang.Exception { com.android.jack.test.toolchain.JackApiToolchainBase toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchainBase.class); java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); toolchain.setOutputStream(out); toolchain.setErrorStream(errOut); toolchain.addToClasspath(toolchain.getDefaultBootClasspath()); toolchain.addProperty(Options.ANDROID_MIN_API_LEVEL.getName(), Options.ANDROID_MIN_API_LEVEL.getCodec().formatValue(new com.android.jack.util.AndroidApiLevel(com.android.jack.util.AndroidApiLevel.ProvisionalLevel.O_BETA1))); toolchain.srcToExe(com.android.jack.test.toolchain.AbstractTestTools.createTempDir(), false, com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir("com.android.jack.java7.invokepolymorphic.test006")); junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); }
@java.lang.Override public com.android.builder.core.DefaultBuildType create(java.lang.String name) { return instantiator.newInstance(com.android.build.gradle.internal.dsl.BuildTypeDsl.class, name, project, instantiator, logger); }
public void testReceiveOversizePacket() throws java.lang.Exception { java.net.DatagramSocket ds = new java.net.DatagramSocket(0); java.net.DatagramSocket sds = new java.net.DatagramSocket(0); java.net.DatagramPacket rdp = new java.net.DatagramPacket("0123456789".getBytes("UTF-8"), 5, LOOPBACK, ds.getLocalPort()); sds.send(rdp); sds.close(); byte[] recvBuffer = new byte[5]; java.net.DatagramPacket receive = new java.net.DatagramPacket(recvBuffer, recvBuffer.length); ds.receive(receive); ds.close(); assertEquals(new java.lang.String("01234"), new java.lang.String(recvBuffer, 0, recvBuffer.length, "UTF-8")); }
private synchronized android.security.cts.OpenSSLHeartbleedTest.TlsRecord getFirstRecordReceivedAfterCCSWasInjected() { return mFirstRecordReceivedAfterCCSWasInjected; }
public native void setenv(java.lang.String name, java.lang.String value, boolean overwrite) throws android.system.ErrnoException;
@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testInitializationWithEarpieceAndBluetoothNoHeadset() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, (((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_SPEAKER)) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); initializationTestHelper(expectedState, CallAudioRouteStateMachine.EARPIECE_FORCE_ENABLED); }
@org.junit.Test public void testDefaultMethodReference() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_32).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
private java.lang.String getNameFromInputVFile(@javax.annotation.Nonnull com.android.jack.library.InputLibrary jackLibrary, @javax.annotation.Nonnull com.android.sched.vfs.InputVFile jppFile) { com.android.sched.util.location.Location loc = jppFile.getLocation(); java.lang.String name; if (loc instanceof com.android.sched.util.location.ZipLocation) { name = ((com.android.sched.util.location.ZipLocation) (jppFile.getLocation())).getEntryName(); if ((jackLibrary.getMajorVersion()) != 0) { name = name.substring(((FileType.JPP.buildDirVPath(VPath.ROOT).split().iterator().next().length()) + 1)); } else { name = name.substring("JACK-INF/".length()); } } else { name = ((com.android.sched.util.location.FileLocation) (jppFile.getLocation())).getPath(); if ((jackLibrary.getMajorVersion()) != 0) { java.lang.String prefix = (FileType.JPP.buildDirVPath(VPath.ROOT).split().iterator().next()) + '/'; name = name.substring(((name.lastIndexOf(prefix)) + (prefix.length()))); } else { name = name.substring("JACK-INF/".length()); } } return name; }
public static java.nio.channels.SocketChannel createPassThroughConnection(java.net.InetSocketAddress adbSockAddr, com.android.ddmlib.Device device, int pid) throws com.android.ddmlib.TimeoutException, java.io.IOException { java.nio.channels.SocketChannel adbChan = java.nio.channels.SocketChannel.open(adbSockAddr); try { adbChan.socket().setTcpNoDelay(true); adbChan.configureBlocking(false); com.android.ddmlib.AdbHelper.setDevice(adbChan, device); byte[] req = com.android.ddmlib.AdbHelper.createJdwpForwardRequest(pid); com.android.ddmlib.AdbHelper.write(adbChan, req); com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(adbChan, false); if (!(resp.okay)) { throw new java.io.IOException(("connection request rejected: " + (resp.message))); } adbChan.configureBlocking(true); } catch (com.android.ddmlib.TimeoutException e) { adbChan.close(); throw e; } catch (java.io.IOException e) { adbChan.close(); throw e; } return adbChan; }
private com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState networkForRequest(NetworkRequest request) { java.lang.String requestedIface = null; android.net.NetworkSpecifier specifier = request.networkCapabilities.getNetworkSpecifier(); if (specifier instanceof android.net.StringNetworkSpecifier) { requestedIface = ((android.net.StringNetworkSpecifier) (specifier)).specifier; } com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState network = null; if (!(android.text.TextUtils.isEmpty(requestedIface))) { com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState n = mTrackingInterfaces.get(requestedIface); if ((n != null) && (n.statisified(request.networkCapabilities))) { network = n; } } else { for (com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState n : mTrackingInterfaces.values()) { if (n.statisified(request.networkCapabilities)) { network = n; break; } } } if (com.android.server.ethernet.EthernetNetworkFactory.DBG) { android.util.Log.i(com.android.server.ethernet.EthernetNetworkFactory.TAG, ((("networkForRequest, request: " + request) + ", network: ") + network)); } return network; }
@org.junit.Test public void aget_wide() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(AGET_WIDE).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }
private void checkPownFloat4Int4Float4() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 8337547971844149649L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.SIGNED_32, 4, 8337547971844149649L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testPownFloat4Int4Float4(inX, out); verifyResultsPownFloat4Int4Float4(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testPownFloat4Int4Float4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testPownFloat4Int4Float4(inX, out); verifyResultsPownFloat4Int4Float4(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testPownFloat4Int4Float4: " + (e.toString()))); } }
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) throws java.lang.Exception { com.android.sched.vfs.OutputVFile vFile = outputLibrary.getJayceOutputVFile(new com.android.sched.vfs.VPath(com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter().getName(type), '/')); try { java.io.OutputStream out = new java.io.BufferedOutputStream(vFile.openWrite()); try { com.android.jack.jayce.JayceWriter writer = new com.android.jack.jayce.JayceWriter(out); writer.write(type, ("jack " + (com.android.jack.Jack.getVersionString()))); if (com.android.sched.util.config.ThreadConfig.get(JackIncremental.GENERATE_COMPILER_STATE).booleanValue()) { assert vFile instanceof com.android.sched.vfs.DirectFile; com.android.jack.experimental.incremental.CompilerState csm = com.android.jack.experimental.incremental.JackIncremental.getCompilerState(); assert csm != null; csm.addMappingBetweenJavaFileAndTypeName(type.getSourceInfo().getFileName(), com.android.jack.experimental.incremental.JackIncremental.getFormatter().getName(type)); } } finally { out.close(); } } catch (java.io.IOException e) { throw new com.android.jack.JackFileException((("Could not write Jack file to output '" + vFile) + "'"), e); } }
@java.lang.Override protected void registerTabs() { addFailuresTab(); if (!(getResults().getPackages().isEmpty())) { addTab("Packages", new com.android.build.gradle.internal.test.report.ErroringAction<com.android.build.gradle.internal.test.report.SimpleHtmlWriter>() { @java.lang.Override protected void doExecute(com.android.build.gradle.internal.test.report.SimpleHtmlWriter writer) throws java.io.IOException { renderPackages(writer); } }); } addTab("Classes", new com.android.build.gradle.internal.test.report.ErroringAction<com.android.build.gradle.internal.test.report.SimpleHtmlWriter>() { @java.lang.Override public void doExecute(com.android.build.gradle.internal.test.report.SimpleHtmlWriter htmlWriter) throws java.io.IOException { renderClasses(htmlWriter); } }); }
public void timeRelativeDateTimeFormatter_getRelativeTimeSpanString(int reps) throws java.lang.Exception { java.util.Locale l = java.util.Locale.US; java.util.TimeZone utc = java.util.TimeZone.getTimeZone("Europe/London"); int flags = 0; for (int rep = 0; rep < reps; ++rep) { libcore.icu.RelativeDateTimeFormatter.getRelativeTimeSpanString(l, utc, 0L, 0L, 0L, flags); } }
@java.lang.Override public void valueChanged(javax.swing.event.ListSelectionEvent e) { java.lang.Object user = myJList.getSelectedValue(); if ((user != null) && (user instanceof com.google.gct.login.CredentialedUser)) { this.setText(((com.google.gct.login.CredentialedUser) (user)).getEmail()); javax.swing.SwingUtilities.invokeLater(new java.lang.Runnable() { @java.lang.Override public void run() { com.google.gct.idea.elysium.UserSelector.this.hidePopup(); } }); } }
public static synchronized void shutdown() { if ((com.android.ide.common.internal.ExecutorSingleton.sExecutorService) != null) { com.android.ide.common.internal.ExecutorSingleton.sExecutorService.shutdown(); com.android.ide.common.internal.ExecutorSingleton.sExecutorService = null; } }
public void dump(java.io.FileDescriptor fd, java.io.PrintWriter pw, java.lang.String[] args) { pw.println(" T3T Identifier cache entries: "); for (java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo> entry : mForegroundT3tIdentifiersCache.entrySet()) { pw.println((" NFCID2: " + (entry.getKey()))); pw.println(" NfcFServiceInfo: "); entry.getValue().dump(fd, pw, args); } pw.println(""); mRoutingManager.dump(fd, pw, args); pw.println(""); }
public void testIsParentalControlsEnabled() { if (!(android.media.tv.cts.Utils.hasTvInputFramework(getActivity()))) { return; } try { mManager.isParentalControlsEnabled(); } catch (java.lang.Exception e) { fail(); } }
@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVFile file) { return file.getWrappedFile().getLocation(); }
public void test_SSL_do_handshake_NULL_SSL() throws java.lang.Exception { try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_do_handshake(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, null, null, 0, false, null); fail(); } catch (java.lang.NullPointerException expected) { } }
public static native java.lang.String getISO3Language(java.lang.String languageTag);
public void testAuthTcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, auth, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, auth, true, 1, true); }
private void postCreate() { if ((mUpdaterData) != null) { mTextSdkOsPath.setText(mUpdaterData.getOsSdkRoot()); } mTreeViewer.setContentProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgContentProvider()); mColumnApi.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnApi))); mColumnName.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnName))); mColumnStatus.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnStatus))); mColumnRevision.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnRevision))); org.eclipse.swt.graphics.FontData fontData = mTree.getFont().getFontData()[0]; fontData.setStyle(SWT.ITALIC); mTreeFontItalic = new org.eclipse.swt.graphics.Font(mTree.getDisplay(), fontData); mColorUpdate = new org.eclipse.swt.graphics.Color(mTree.getDisplay(), 255, 255, 204); mColorNew = new org.eclipse.swt.graphics.Color(mTree.getDisplay(), 255, 238, 204); mTree.addDisposeListener(new org.eclipse.swt.events.DisposeListener() { public void widgetDisposed(org.eclipse.swt.events.DisposeEvent e) { mTreeFontItalic.dispose(); mColorUpdate.dispose(); mColorNew.dispose(); mTreeFontItalic = null; mColorUpdate = null; mColorNew = null; } }); }
public void testEofInEntityValue() throws java.lang.Exception { assertParseFailure("<!DOCTYPE foo [<!ENTITY aaa \"unterminated"); }
public void testExecuteQuery() throws java.sql.SQLException { java.lang.String[] queries2 = new java.lang.String[]{ "update zoo set name='Masha', family='cat' where id=;", "insert into hutch (id, animal_id, address) values (1, ?,'Birds-house, 1');", "insert into hutch (id, animal_id, address) values (?, 1, 'Horse-house, 5');" }; for (int i = 0; i < (queries2.length); i++) { java.sql.PreparedStatement ps = null; try { ps = conn.prepareStatement(queries2[i]); ps.executeQuery(); fail(("SQLException is not thrown for query: " + (queries2[i]))); } catch (java.sql.SQLException sqle) { } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } } java.lang.String query = "select * from zoo where id = ?"; java.sql.PreparedStatement ps = null; try { ps = conn.prepareStatement(query); ps.setInt(1, 1); java.sql.ResultSet rs = ps.executeQuery(); rs.next(); assertEquals(1, rs.getInt(1)); assertEquals("Kesha", rs.getString(2)); assertEquals("parrot", rs.getString(3)); } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } try { ps = conn.prepareStatement(query); ps.setInt(1, 5); java.sql.ResultSet rs = ps.executeQuery(); assertNotNull(rs); assertFalse(rs.next()); } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } }
protected void openDevice(java.lang.String cameraId) throws java.lang.Exception { mCamera = android.hardware.camera2.cts.CameraTestUtils.CameraTestUtils.openCamera(mCameraManager, cameraId, mCameraListener, mHandler); mCollector.setCameraId(cameraId); mStaticInfo = new android.hardware.camera2.cts.helpers.StaticMetadata(mCameraManager.getCameraCharacteristics(cameraId), android.hardware.camera2.cts.helpers.StaticMetadata.CheckLevel.ASSERT, null); mOrderedPreviewSizes = getSupportedPreviewSizes(cameraId, mCameraManager, getPreviewSizeBound(mWindowManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND)); mOrderedVideoSizes = getSupportedVideoSizes(cameraId, mCameraManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND); mOrderedStillSizes = getSupportedStillSizes(cameraId, mCameraManager, null); mMinPreviewFrameDurationMap = mStaticInfo.getAvailableMinFrameDurationsForFormatChecked(ImageFormat.YUV_420_888); }
public void testExp10() { checkExp10FloatFloat(); checkExp10Float2Float2(); checkExp10Float3Float3(); checkExp10Float4Float4(); }
private void initTestVars() { mPermissionsList.clear(); mReturnPermission = createPermissionAnswer(); mWifiScanAllowApps = android.app.AppOpsManager.MODE_ERRORED; mUid = com.android.server.wifi.util.WifiPermissionsUtilTest.OTHER_USER_UID; mThrowSecurityException = true; mMockUserInfo.id = android.os.UserHandle.USER_NULL; mMockApplInfo.targetSdkVersion = Build.VERSION_CODES.M; mTargetVersion = Build.VERSION_CODES.M; mPkgNameOfTopActivity = com.android.server.wifi.util.WifiPermissionsUtilTest.INVALID_PACKAGE; mLocationModeSetting = Settings.Secure.LOCATION_MODE_OFF; mCurrentUser = android.os.UserHandle.USER_SYSTEM; mCoarseLocationPermission = android.content.pm.PackageManager.PERMISSION_DENIED; mAllowCoarseLocationApps = android.app.AppOpsManager.MODE_ERRORED; mActiveNwScorer = false; }
@com.googlecode.android_scripting.rpc.Rpc(description = "Resets ImsManager settings to factory default.") public void imsFactoryReset() { mImsManager.factoryResetSlot(); }
public java.util.List<com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction> callGetContextMenu(com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy selectedNode) { com.android.ide.eclipse.adt.editors.layout.gscripts.IViewRule rule = loadRule(selectedNode.getNode()); if (rule != null) { try { return rule.getContextMenu(selectedNode); } catch (java.lang.Exception e) { logError("%s.getContextMenu() failed: %s", rule.getClass().getSimpleName(), e.toString()); } } return null; }
public void setManifest(@com.android.annotations.NonNull java.io.File manifest) { this.manifest = manifest; }
public void link(java.lang.String oldPath, java.lang.String newPath) throws android.system.ErrnoException;
boolean connectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); if ((mStateMachine.getConnectionState(mStateMachine.getCurrentDevice())) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, "connectAudio: profile not connected"); return false; } if (isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ("connectAudio: audio is not idle, current state " + (mStateMachine.getAudioState()))); return false; } mStateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, mStateMachine.getCurrentDevice()); return true; }
@java.lang.Override public void applyTransportModeTransform(android.net.IpSecManager ism, int direction, android.net.IpSecTransform transform) throws java.lang.Exception { ism.applyTransportModeTransform(mFd, direction, transform); }
@java.lang.Override public void onManagerConnected(int status) { android.util.Log.v(com.android.cts.verifier.sensors.helpers.OpenCVLibrary.TAG, ("New Loading status: " + status)); switch (status) { case org.opencv.android.LoaderCallbackInterface.SUCCESS : { com.android.cts.verifier.sensors.helpers.OpenCVLibrary.sLoaded = true; } break; default : { android.util.Log.e(com.android.cts.verifier.sensors.helpers.OpenCVLibrary.TAG, "Connecting OpenCV Manager failed"); } break; } done.countDown(); }
public boolean isOlderOrEqualsThan(@javax.annotation.Nonnull com.android.sched.util.Version other) throws com.android.sched.util.UncomparableVersion { return (compareTo(other)) <= 0; }
public java.util.Locale.Builder setScript(java.lang.String script) { if ((script == null) || (script.isEmpty())) { this.script = ""; return this; } if (!(java.util.Locale.isValidBcp47Alpha(script, 4, 4))) { throw new java.util.IllformedLocaleException(("Invalid script: " + script)); } this.script = java.util.Locale.titleCaseAsciiWord(script); return this; }
android.net.IpSecConfig buildIpSecConfig() throws java.lang.Exception { android.net.IpSecManager ipSecManager = new android.net.IpSecManager(mIpSecService); when(mMockNetd.ipSecAllocateSpi(anyInt(), anyInt(), anyString(), anyString(), anyInt())).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI2); android.net.IpSecAlgorithm encryptAlgo = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, com.android.server.IpSecServiceTest.CRYPT_KEY); android.net.IpSecAlgorithm authAlgo = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, com.android.server.IpSecServiceTest.AUTH_KEY, ((com.android.server.IpSecServiceTest.AUTH_KEY.length) * 8)); java.net.InetAddress remoteAddr = java.net.InetAddress.getByName("8.8.4.4"); android.net.IpSecManager.SecurityParameterIndex outSpi = ipSecManager.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, remoteAddr); android.net.IpSecManager.SecurityParameterIndex inSpi = ipSecManager.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_IN, remoteAddr); android.net.IpSecConfig config = new android.net.IpSecConfig(); config.setSpiResourceId(IpSecTransform.DIRECTION_IN, inSpi.getResourceId()); config.setSpiResourceId(IpSecTransform.DIRECTION_OUT, outSpi.getResourceId()); config.setEncryption(IpSecTransform.DIRECTION_OUT, encryptAlgo); config.setAuthentication(IpSecTransform.DIRECTION_OUT, authAlgo); config.setEncryption(IpSecTransform.DIRECTION_IN, encryptAlgo); config.setAuthentication(IpSecTransform.DIRECTION_IN, authAlgo); config.setRemoteAddress(remoteAddr.getHostName()); return config; }
@com.android.annotations.NonNull public final java.util.Collection<com.android.tools.perflib.heap.ClassObj> findClasses(java.lang.String name) { java.util.ArrayList<com.android.tools.perflib.heap.ClassObj> classObjs = new java.util.ArrayList<com.android.tools.perflib.heap.ClassObj>(); for (int i = 0; i < (mHeaps.size()); i++) { classObjs.addAll(mHeaps.get(i).getClasses(name)); } return classObjs; }
private static boolean shouldOutputApkEntry(com.android.apksig.ApkSignerEngine apkSigner, java.util.jar.JarFile inFile, java.util.jar.JarEntry inEntry, byte[] tmpbuf) throws java.io.IOException { if (apkSigner == null) { return true; } com.android.apksig.ApkSignerEngine.InputJarEntryInstructions instructions = apkSigner.inputJarEntry(inEntry.getName()); com.android.apksig.ApkSignerEngine.InspectJarEntryRequest inspectEntryRequest = instructions.getInspectJarEntryRequest(); if (inspectEntryRequest != null) { com.android.signapk.SignApk.provideJarEntry(inFile, inEntry, inspectEntryRequest, tmpbuf); } switch (instructions.getOutputPolicy()) { case OUTPUT : return true; case SKIP : case OUTPUT_BY_ENGINE : return false; default : throw new java.lang.RuntimeException(("Unsupported output policy: " + (instructions.getOutputPolicy()))); } }
public static java.lang.String escapeResourceString(java.lang.String s) { int n = s.length(); if (n == 0) { return ""; } java.lang.StringBuilder sb = new java.lang.StringBuilder(((s.length()) * 2)); boolean hasSpace = ((s.charAt(0)) == ' ') || ((s.charAt((n - 1))) == ' '); if (hasSpace) { sb.append('"'); } else if (((s.charAt(0)) == '@') || ((s.charAt(0)) == '?')) { sb.append('\\'); } for (int i = 0; i < n; ++i) { char c = s.charAt(i); switch (c) { case '\'' : if (!hasSpace) { sb.append('\\'); } sb.append(c); break; case '"' : case '\\' : sb.append('\\'); sb.append(c); break; case '<' : sb.append(com.android.SdkConstants.LT_ENTITY); break; case '&' : sb.append(com.android.SdkConstants.AMP_ENTITY); break; case '\n' : sb.append("\\n"); break; case '\t' : sb.append("\\t"); break; default : sb.append(c); break; } } if (hasSpace) { sb.append('"'); } return sb.toString(); }
public android.net.NetworkStats readNetworkStatsDetail(int limitUid, java.lang.String[] limitIfaces, int limitTag, android.net.NetworkStats lastStats) throws java.io.IOException { final android.net.NetworkStats stats = readNetworkStatsDetailInternal(limitUid, limitIfaces, limitTag, lastStats); stats.apply464xlatAdjustments(com.android.internal.net.NetworkStatsFactory.sStackedIfaces); return stats; }
public void testNullRepeatedFields() throws java.lang.Exception { com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano message = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano(); message.repeatedInt32 = null; com.google.protobuf.nano.MessageNano.toByteArray(message); message.toString(); message = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano(); message.repeatedNestedEnum = null; com.google.protobuf.nano.MessageNano.toByteArray(message); message.toString(); message = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano(); message.repeatedBytes = null; com.google.protobuf.nano.MessageNano.toByteArray(message); message.toString(); message = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano(); message.repeatedNestedMessage = null; com.google.protobuf.nano.MessageNano.toByteArray(message); message.toString(); com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano secondMessage = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano(); com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.NestedMessage nested = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.NestedMessage(); nested.bb = 55; secondMessage.repeatedNestedMessage = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.NestedMessage[]{ nested }; message.mergeFrom(com.google.protobuf.nano.CodedInputByteBufferNano.newInstance(com.google.protobuf.nano.MessageNano.toByteArray(secondMessage))); assertEquals(55, message.repeatedNestedMessage[0].bb); }
public void msync(long address, long byteCount, int flags) throws android.system.ErrnoException { os.msync(address, byteCount, flags); }
@javax.annotation.Nonnull @java.lang.Override public com.android.jack.ir.ast.JMethodId getMethodId(@javax.annotation.Nonnull java.lang.String name, @javax.annotation.Nonnull java.util.List<? extends com.android.jack.ir.ast.JType> argsType, @javax.annotation.Nonnull com.android.jack.ir.ast.MethodKind kind) throws com.android.jack.lookup.JMethodLookupException { assert !((name.contains("(")) || (name.contains(")"))); loader.ensureMethods(this); for (com.android.jack.ir.ast.JMethod method : methods) { com.android.jack.ir.ast.JMethodId id = method.getMethodId(); if (id.equals(name, argsType, kind)) { return id; } } for (com.android.jack.ir.ast.JInterface jType : getImplements()) { try { return jType.getMethodId(name, argsType, kind); } catch (com.android.jack.lookup.JMethodLookupException e) { } } com.android.jack.ir.ast.JClass superClass = getSuperClass(); if (superClass != null) { try { return superClass.getMethodId(name, argsType, kind); } catch (com.android.jack.lookup.JMethodLookupException e) { } } throw new com.android.jack.lookup.JMethodIdLookupException(this, name, argsType); }
private void verifyResultsAbsIntUint(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { int[] arrayInValue = new int[(INPUTSIZE) * 1]; inValue.copyTo(arrayInValue); int[] arrayOut = new int[(INPUTSIZE) * 1]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 1; j++) { android.renderscript.cts.TestAbs.ArgumentsIntUint args = new android.renderscript.cts.TestAbs.ArgumentsIntUint(); args.inValue = arrayInValue[i]; android.renderscript.cts.CoreMathVerifier.computeAbs(args); int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; boolean valid = true; int neededUlf = 0; if ((args.out) != (arrayOut[((i * 1) + j)])) { valid = false; } if (!valid) { java.lang.StringBuilder message = new java.lang.StringBuilder(); message.append(java.lang.String.format("Input inValue: %d", args.inValue)); message.append("\n"); message.append(java.lang.String.format("Expected output out: %x", args.out)); message.append("\n"); message.append(java.lang.String.format("Actual output out: %x", arrayOut[((i * 1) + j)])); if ((args.out) != (arrayOut[((i * 1) + j)])) { message.append(" FAIL"); } message.append("\n"); assertTrue(((("Incorrect output for checkAbsIntUint" + (relaxed ? "_relaxed" : "")) + ":\n") + (message.toString())), valid); } } } }
@java.lang.SuppressWarnings("resource") @javax.annotation.Nonnull @java.lang.Override java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVFile file, boolean append) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.WRITE); VFSStatCategory.DIR_WRITE.getCounterStat(getTracer(), infoString).incValue(); java.io.File path = getNativeFile(file.getPath()); try { java.io.OutputStream os = new java.io.FileOutputStream(path, append); assert (os = trackOpenedStream(os, file)) != null; return os; } catch (java.io.FileNotFoundException e) { com.android.sched.vfs.DirectFS.checkPermissionsIfExists(path, file.getLocation(), Permission.WRITE); throw new java.lang.AssertionError(e); } }
public java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo> computeUpdates(java.util.Collection<com.android.sdklib.internal.repository.Archive> selectedArchives, com.android.sdklib.internal.repository.SdkSources sources, java.lang.Package[] localPkgs, boolean includeObsoletes) { java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo> archives = new java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo>(); java.util.ArrayList<java.lang.Package> remotePkgs = new java.util.ArrayList<java.lang.Package>(); com.android.sdklib.internal.repository.SdkSource[] remoteSources = sources.getAllSources(); com.android.sdkuilib.internal.repository.ArchiveInfo[] localArchives = createLocalArchives(localPkgs); if (selectedArchives == null) { selectedArchives = findUpdates(localArchives, remotePkgs, remoteSources, includeObsoletes); } for (com.android.sdklib.internal.repository.Archive a : selectedArchives) { insertArchive(a, archives, selectedArchives, remotePkgs, remoteSources, localArchives, false); } return archives; }
@java.lang.Override public final void accept(com.android.tools.perflib.heap.Visitor visitor) { visitor.visitRootObj(this); com.android.tools.perflib.heap.Instance instance = getReferredInstance(); if (instance != null) { visitor.visitLater(instance); } }
@java.lang.Override public java.io.File getMainClassesDir() { return myMainClassesDir; }
private void persistBluetoothSetting(int value) { if (com.android.server.BluetoothManagerService.DBG) android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ("Persisting Bluetooth Setting: " + value)); long callingIdentity = android.os.Binder.clearCallingIdentity(); Settings.Global.putInt(mContext.getContentResolver(), Settings.Global.BLUETOOTH_ON, value); android.os.Binder.restoreCallingIdentity(callingIdentity); }
public void requestEuiccChallenge(java.lang.String cardId, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccChallenge(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccChallengeCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] challenge) { executor.execute(() -> callback.onComplete(resultCode, challenge)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, "Error calling getEuiccChallenge", e); throw e.rethrowFromSystemServer(); } }
public long getExclusiveTime(java.lang.String thread, com.android.tools.perflib.vmtrace.ClockType clockType) { com.android.tools.perflib.vmtrace.MethodInfo.MethodStats stats = mPerThreadStats.get(thread); return stats != null ? stats.getExclusiveTime(clockType) : 0; }
@java.lang.Override public java.io.File call() throws java.lang.Exception { com.android.build.gradle.tasks.PackageApplication packageApplicationTask = ((com.android.build.gradle.internal.variant.ApkVariantOutputData) (scope.getVariantOutputData())).packageApplicationTask; return packageApplicationTask == null ? scope.getPackageApk() : packageApplicationTask.getOutputFile(); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { sendRemoteRttRequest(); }
@java.lang.Override public android.icu.impl.UResource.TableSink getOrCreateTableSink(android.icu.impl.UResource.Key key) { if (key.contentEquals(android.icu.text.DateIntervalInfo.INTERVAL_FORMATS_KEY)) { return skeletonSink; } return null; }
private void updateHoverRegion(int x, int y) { com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo vertical = findVerticalPatch(x, y); com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo horizontal = findHorizontalPatch(x, y); computeHoverHighlightRegions(vertical, horizontal); computeHoverRegionTooltip(vertical, horizontal); com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo updateRegion = pickUpdateRegion(x, y, vertical, horizontal); setCursorForRegion(x, y, updateRegion); }
private void checkLgammaFloat4Int4Float4() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 3812703030448598787L); try { android.renderscript.Allocation outY = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.SIGNED_32, 4), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); script.set_gAllocOutY(outY); script.forEach_testLgammaFloat4Int4Float4(inX, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLgammaFloat4Int4Float4: " + (e.toString()))); } try { android.renderscript.Allocation outY = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.SIGNED_32, 4), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocOutY(outY); scriptRelaxed.forEach_testLgammaFloat4Int4Float4(inX, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLgammaFloat4Int4Float4: " + (e.toString()))); } }
public void testProguardFile(@com.android.annotations.NonNull java.lang.Object proguardFile) { getTestProguardFiles().add(project.file(proguardFile)); }
public java.io.FileDescriptor dup(java.io.FileDescriptor oldFd) throws android.system.ErrnoException { return os.dup(oldFd); }
public void testDecodeUint32() throws java.io.IOException { final java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (103)), ((byte) (69)), ((byte) (35)), ((byte) (1)), ((byte) (239)), ((byte) (205)), ((byte) (171)), ((byte) (16)) }); final long[] expected = new long[]{ 0, 19088743, 279694831 }; com.android.tools.rpclib.binary.Decoder d = new com.android.tools.rpclib.binary.Decoder(input); for (long u32 : expected) { assertEquals(u32, ((d.uint32()) & -1)); } }
@javax.annotation.Nonnull private com.android.jack.analysis.dependency.file.FileDependencies getFileDependencies(@javax.annotation.Nonnull com.android.jack.library.InputJackLibrary library) throws com.android.jack.library.FileTypeDoesNotExistException, com.android.sched.util.file.CannotReadException { com.android.sched.vfs.InputVFile fileDependenciesVFile = library.getFile(FileType.DEPENDENCIES, FileDependencies.vpath); com.android.jack.analysis.dependency.file.FileDependencies fileDependencies = new com.android.jack.analysis.dependency.file.FileDependencies(); java.io.InputStreamReader fileReader = null; try { fileReader = new java.io.InputStreamReader(fileDependenciesVFile.openRead()); fileDependencies.read(fileReader); } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotReadException(fileDependenciesVFile.getLocation(), e); } finally { if (fileReader != null) { try { fileReader.close(); } catch (java.io.IOException e) { } } } return fileDependencies; }
@java.lang.Override public void setSmscAddress(java.lang.String address, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_SMSC_ADDRESS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " address = ") + address)); } try { radioProxy.setSmscAddress(rr.mSerial, convertNullToEmptyString(address)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setSmscAddress", e); } } }
@com.android.annotations.NonNull @java.lang.Override public java.util.List<java.lang.String> getProjectDependenciesPath() { return java.util.Collections.emptyList(); }
private boolean getWfdPermission(int uid) { if ((mWifiInjector) == null) { mWifiInjector = com.android.server.wifi.WifiInjector.getInstance(); } com.android.server.wifi.util.WifiPermissionsWrapper wifiPermissionsWrapper = mWifiInjector.getWifiPermissionsWrapper(); return (wifiPermissionsWrapper.getUidPermission(android.Manifest.permission.CONFIGURE_WIFI_DISPLAY, uid)) != (android.content.pm.PackageManager.PERMISSION_DENIED); }
@java.lang.Override protected void onConnect(java.net.InetAddress remoteAddress, int remotePort) { isNativeConnected = true; connectedAddress = remoteAddress; connectedPort = remotePort; }
public void test_X509_NAME_hashes() { javax.security.auth.x500.X500Principal name = new javax.security.auth.x500.X500Principal("CN=localhost"); assertEquals((-1372642656), org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_NAME_hash(name)); assertEquals((-1626170662), org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_NAME_hash_old(name)); }
public static android.support.v8.renderscript.ScriptIntrinsicConvolve3x3 create(android.support.v8.renderscript.RenderScript rs, android.support.v8.renderscript.Element e) { float[] f = new float[]{ 0, 0, 0, 0, 1, 0, 0, 0, 0 }; if ((((((((!(e.isCompatible(android.support.v8.renderscript.Element.U8(rs)))) && (!(e.isCompatible(android.support.v8.renderscript.Element.U8_2(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.U8_3(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.U8_4(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.F32(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.F32_2(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.F32_3(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.F32_4(rs))))) { throw new android.support.v8.renderscript.RSIllegalArgumentException("Unsuported element type."); } long id; boolean mUseIncSupp = (rs.isUseNative()) && ((android.os.Build.VERSION.SDK_INT) < (android.support.v8.renderscript.ScriptIntrinsicConvolve3x3.INTRINSIC_API_LEVEL)); id = rs.nScriptIntrinsicCreate(1, e.getID(rs), mUseIncSupp); android.support.v8.renderscript.ScriptIntrinsicConvolve3x3 si = new android.support.v8.renderscript.ScriptIntrinsicConvolve3x3(id, rs); si.setIncSupp(mUseIncSupp); si.setCoefficients(f); return si; }
public void bindResponse(int indId, boolean indStatus) { final android.bluetooth.IBluetoothHeadset service = mService; if ((service != null) && (isEnabled())) { try { service.bindResponse(indId, indStatus); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, "Proxy not attached to service"); if (android.bluetooth.BluetoothHeadset.DBG) android.util.Log.d(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } }
public void computeCallStats(com.android.tools.perflib.vmtrace.Call c, com.android.tools.perflib.vmtrace.Call parent, com.android.tools.perflib.vmtrace.ThreadInfo thread) { long methodId = c.getMethodId(); com.android.tools.perflib.vmtrace.MethodProfileData.Builder builder = getProfileDataBuilder(methodId); builder.addCallTime(c, parent, thread); builder.incrementInvocationCount(c, parent, thread); if (c.isRecursive()) { builder.setRecursive(); } for (com.android.tools.perflib.vmtrace.Call callee : c.getCallees()) { computeCallStats(callee, c, thread); } }
@java.lang.Override public void createFiles() throws java.io.IOException { java.io.File root = getModuleDir(); java.io.File src = new java.io.File(root, "src"); java.io.File main = new java.io.File(src, "main"); main.mkdirs(); java.io.File manifest = new java.io.File(main, "AndroidManifest.xml"); com.google.common.io.Files.write(((("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + ("<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" + " package=\"com")) + (getGradlePath().replace(':', '.'))) + "\" />\n"), manifest, Charsets.UTF_8); }
public void seteuid(int euid) throws android.system.ErrnoException;
private synchronized boolean checkConnection() { if ((mSocketChannel) == null) { java.net.InetSocketAddress socketAddr; try { java.net.InetAddress hostAddr = java.net.InetAddress.getByName(com.android.ddmlib.EmulatorConsole.HOST); socketAddr = new java.net.InetSocketAddress(hostAddr, mPort); mSocketChannel = java.nio.channels.SocketChannel.open(socketAddr); mSocketChannel.configureBlocking(false); readLines(); } catch (java.io.IOException e) { com.android.ddmlib.Log.w(com.android.ddmlib.EmulatorConsole.LOG_TAG, ("Failed to start Emulator console for " + (java.lang.Integer.toString(mPort)))); return false; } } return ping(); }
public void changeEventCacheSize(int newSize) { java.util.concurrent.LinkedBlockingQueue<android.telecom.Logging.EventManager.EventRecord> oldEventLog = mEventRecords; mEventRecords = new java.util.concurrent.LinkedBlockingQueue<>(newSize); mCallEventRecordMap.clear(); oldEventLog.forEach(( newRecord) -> { android.telecom.Logging.EventManager.Loggable recordEntry = newRecord.getRecordEntry(); if ((mEventRecords.remainingCapacity()) == 0) { android.telecom.Logging.EventManager.EventRecord record = mEventRecords.poll(); if (record != null) { mCallEventRecordMap.remove(record.getRecordEntry()); } } mEventRecords.add(newRecord); mCallEventRecordMap.put(recordEntry, newRecord); }); }
protected <T extends com.android.jack.ir.ast.JReferenceType> T getNonArrayType(@javax.annotation.Nonnull java.lang.String signature, @javax.annotation.Nonnull com.android.jack.lookup.JLookup.Adapter<T> adapter) throws com.android.jack.ir.ast.MissingJTypeLookupException { java.util.Map<java.lang.String, T> cache = adapter.getCache(); T type; synchronized(cache) { type = cache.get(signature); if (type == null) { type = findClassOrInterface(signature, adapter); cache.put(signature, type); } } return type; }
public static void computeLog2(android.renderscript.cts.TestLog2.ArgumentsFloatFloat args) { args.ulf = 3; args.ulfRelaxed = 128; args.out = ((float) ((java.lang.StrictMath.log10(args.in)) / (java.lang.StrictMath.log10(2.0)))); }
@java.lang.Override public boolean checkForCondition() { android.support.test.uiautomator.UiObject androidCling = mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.ANDROID_WELCOME_CLING_RES)); try { if (androidCling.exists()) { androidCling.click(); return true; } else { return false; } } catch (android.support.test.uiautomator.UiObjectNotFoundException e) { org.junit.Assert.fail(e.getStackTrace().toString()); return false; } }
private static java.lang.String getFragmentInfo(android.security.cts.OpenSSLHeartbleedTest.TlsRecord record, boolean mayBeEncrypted) { java.lang.StringBuilder result = new java.lang.StringBuilder(); if (mayBeEncrypted) { result.append("encrypted?"); } else { switch (record.protocol) { case android.security.cts.OpenSSLHeartbleedTest.TlsProtocols.ALERT : result.append(((("level: " + ((record.fragment.length) > 0 ? java.lang.String.valueOf(((record.fragment[0]) & 255)) : "n/a")) + ", description: ") + ((record.fragment.length) > 1 ? java.lang.String.valueOf(((record.fragment[1]) & 255)) : "n/a"))); break; case android.security.cts.OpenSSLHeartbleedTest.TlsProtocols.APPLICATION_DATA : break; case android.security.cts.OpenSSLHeartbleedTest.TlsProtocols.CHANGE_CIPHER_SPEC : result.append(("payload: " + ((record.fragment.length) > 0 ? java.lang.String.valueOf(((record.fragment[0]) & 255)) : "n/a"))); break; case android.security.cts.OpenSSLHeartbleedTest.TlsProtocols.HANDSHAKE : result.append(("type: " + ((record.fragment.length) > 0 ? java.lang.String.valueOf(((record.fragment[0]) & 255)) : "n/a"))); break; } } result.append(", ").append(("fragment length: " + (record.fragment.length))); return result.toString(); }
static long $opt$DivZero(long a) { return a / 0L; }
private static java.util.jar.JarFile retrieve(final java.net.URL url, final sun.net.www.protocol.jar.URLJarFile.URLJarFileCloseController closeController) throws java.io.IOException { { java.util.jar.JarFile result = null; try (final java.io.InputStream in = url.openConnection().getInputStream()) { result = java.security.AccessController.doPrivileged(new java.security.PrivilegedExceptionAction<java.util.jar.JarFile>() { public java.util.jar.JarFile run() throws java.io.IOException { java.nio.file.Path tmpFile = java.nio.file.Files.createTempFile("jar_cache", null); try { java.nio.file.Files.copy(in, tmpFile, java.nio.file.StandardCopyOption.REPLACE_EXISTING); java.util.jar.JarFile jarFile = new sun.net.www.protocol.jar.URLJarFile(tmpFile.toFile(), closeController); tmpFile.toFile().deleteOnExit(); return jarFile; } catch (java.lang.Throwable thr) { try { java.nio.file.Files.delete(tmpFile); } catch (java.io.IOException ioe) { thr.addSuppressed(ioe); } throw thr; } } }); } catch (java.security.PrivilegedActionException pae) { throw ((java.io.IOException) (pae.getException())); } return result; } }
public static com.android.apksig.util.DataSource copyWithModifiedCDOffset(com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource eocd) throws java.io.IOException { long centralDirOffsetForDigesting = beforeCentralDir.size(); java.nio.ByteBuffer eocdBuf = java.nio.ByteBuffer.allocate(((int) (eocd.size()))); eocdBuf.order(java.nio.ByteOrder.LITTLE_ENDIAN); eocd.copyTo(0, ((int) (eocd.size())), eocdBuf); eocdBuf.flip(); com.android.apksig.internal.zip.ZipUtils.setZipEocdCentralDirectoryOffset(eocdBuf, centralDirOffsetForDigesting); return com.android.apksig.util.DataSources.asDataSource(eocdBuf); }
public boolean enable(java.lang.String packageName) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "enable(): not enabling - bluetooth disallowed"); } return false; } if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG, "enable(): not allowed for non-active and non system user"); return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM, "Need BLUETOOTH ADMIN permission"); if (((!(isEnabled())) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_ENABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((((((("enable(" + packageName) + "): mBluetooth =") + (mBluetooth)) + " mBinding = ") + (mBinding)) + " mState = ") + (android.bluetooth.BluetoothAdapter.nameForState(mState)))); } synchronized(mReceiver) { mQuietEnableExternal = false; mEnableExternal = true; sendEnableMsg(false, BluetoothProtoEnums.ENABLE_DISABLE_REASON_APPLICATION_REQUEST, packageName); } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, "enable returning"); } return true; }
private java.util.List<java.security.cert.X509Certificate> checkTrusted(java.security.cert.X509Certificate[] certs, java.lang.String authType, javax.net.ssl.SSLSession session, javax.net.ssl.SSLParameters parameters, boolean clientAuth) throws java.security.cert.CertificateException { byte[] ocspData = null; java.lang.String hostname = null; if (session != null) { hostname = session.getPeerHost(); ocspData = getOcspDataFromSession(session); } if ((session != null) && (parameters != null)) { java.lang.String identificationAlgorithm = parameters.getEndpointIdentificationAlgorithm(); if ((identificationAlgorithm != null) && ("HTTPS".equals(identificationAlgorithm.toUpperCase(java.util.Locale.US)))) { javax.net.ssl.HostnameVerifier verifier = javax.net.ssl.HttpsURLConnection.getDefaultHostnameVerifier(); if (!(verifier.verify(hostname, session))) { throw new java.security.cert.CertificateException("No subjectAltNames on the certificate match"); } } } return checkTrusted(certs, ocspData, authType, hostname, clientAuth); }
public java.lang.String getMethodName(long classID, long methodID) { org.apache.harmony.jpda.tests.framework.jdwp.Method[] methods = getMethods(classID); for (org.apache.harmony.jpda.tests.framework.jdwp.Method method : methods) { if (methodID == (method.getMethodID())) { return method.getName(); } } return "unknown"; }
public dalvik.system.EmulatedStackFrame.StackFrameAccessor attach(dalvik.system.EmulatedStackFrame stackFrame) { frame = stackFrame; frameBuf = java.nio.ByteBuffer.wrap(frame.stackFrame).order(java.nio.ByteOrder.LITTLE_ENDIAN); numArgs = frame.type.ptypes().length; referencesOffset = 0; argumentIdx = 0; return this; }
@java.lang.Override public java.lang.String getServiceInterface() { return android.telephony.ims.ImsService.SERVICE_INTERFACE; }
void silenceRingers() { for (com.android.server.telecom.Call call : mRingingCalls) { call.silence(); } mRinger.stopRinging(); mRinger.stopCallWaiting(); }
@javax.annotation.Nonnull private static java.lang.Object instantiateConstructorWithParameters(@javax.annotation.Nonnull java.lang.String className, @javax.annotation.Nonnull java.lang.Class<?>[] parameterTypes, @javax.annotation.Nonnull java.lang.Object[] parameterInstances, @javax.annotation.Nonnull java.lang.String version) throws com.android.jack.jayce.JayceVersionException { java.lang.Object constructorInstance = null; try { java.lang.Class<?> jayceReaderClass = java.lang.Class.forName(className); java.lang.reflect.Constructor<?> constructor = jayceReaderClass.getConstructor(parameterTypes); constructorInstance = constructor.newInstance(parameterInstances); } catch (java.lang.SecurityException e) { throw new java.lang.AssertionError("Security issue with Jayce stream"); } catch (java.lang.IllegalArgumentException e) { throw new java.lang.AssertionError(("Illegal argument for Jayce processor for version " + version)); } catch (java.lang.ClassNotFoundException e) { throw new com.android.jack.jayce.JayceVersionException((("Jayce version " + version) + " not supported")); } catch (java.lang.NoSuchMethodException e) { throw new java.lang.AssertionError(("Jayce processing method not found for version " + version)); } catch (java.lang.InstantiationException e) { throw new java.lang.AssertionError(("Problem instantiating Jayce processor for version " + version)); } catch (java.lang.IllegalAccessException e) { throw new java.lang.AssertionError(("Problem accessing Jayce processor for version " + version)); } catch (java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException(e.getCause()); } return constructorInstance; }
public synchronized int bindServer() { java.net.InetSocketAddress serverAddress = getSyncServerAddress(); try { logWriter.println(("[SYNC] Binding socket on: " + serverAddress)); serverSocket = new java.net.ServerSocket(serverAddress.getPort(), 0, serverAddress.getAddress()); int localPort = serverSocket.getLocalPort(); logWriter.println((((("[SYNC] Bound socket on: " + serverAddress) + " (local port: ") + localPort) + ")")); return localPort; } catch (java.io.IOException e) { throw new org.apache.harmony.jpda.tests.framework.TestErrorException("[SYNC] Exception in binding for socket sync connection", e); } }
@org.junit.Test public void sub_float() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(SUB_FLOAT).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), "jack-tests/src/com/android/jack/DxTestCase.java")).compileAndRunTest(); }
public void test_equals() { java.text.NumberFormat nf1 = java.text.NumberFormat.getInstance(); java.text.NumberFormat nf2 = java.text.NumberFormat.getInstance(); assertTrue("Objects are not equal", nf1.equals(nf2)); assertTrue("THe same Objects are not equal", nf1.equals(nf1)); nf2.setMaximumIntegerDigits(100); assertFalse("Different NumberFormat are equal", nf1.equals(nf2)); nf1 = java.text.NumberFormat.getIntegerInstance(); nf2 = java.text.NumberFormat.getIntegerInstance(java.util.Locale.CHINA); assertFalse("Different NumberFormat are equal", nf1.equals(nf2)); assertFalse("Object is equal null", nf1.equals(null)); }
private static native boolean native_invert(long native_object, long native_inverse);
void generateForegroundT3tIdentifiersCacheLocked() { if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, "generateForegroundT3tIdentifiersCacheLocked"); mForegroundT3tIdentifiersCache.clear(); if ((mEnabledForegroundService) != null) { for (android.nfc.cardemulation.NfcFServiceInfo service : mServices) { if (mEnabledForegroundService.equals(service.getComponent())) { if ((!(service.getSystemCode().equalsIgnoreCase("NULL"))) && (!(service.getNfcid2().equalsIgnoreCase("NULL")))) { mForegroundT3tIdentifiersCache.put(service.getNfcid2(), service); } break; } } } if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, ("mForegroundT3tIdentifiersCache: size=" + (mForegroundT3tIdentifiersCache.size()))); for (java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo> entry : mForegroundT3tIdentifiersCache.entrySet()) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, (((" " + (entry.getKey())) + "/") + (entry.getValue().getComponent().toString()))); } } updateRoutingLocked(); }
private void assertDomainHasExecutable(java.lang.String domain, java.lang.String... executables) throws java.io.FileNotFoundException { java.util.List<android.security.cts.SELinuxDomainTest.ProcessDetails> procs = android.security.cts.SELinuxDomainTest.ProcessDetails.getProcessMap().get(domain); if (procs == null) { return; } java.util.Set<java.lang.String> execList = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(executables)); for (android.security.cts.SELinuxDomainTest.ProcessDetails p : procs) { java.lang.String msg = (((((("Expected one of \"" + execList) + "\" in SELinux domain \"") + domain) + "\"") + " Found: \"") + p) + "\""; assertTrue(msg, execList.contains(p.procTitle)); } }
private void updateInterfaceState(java.lang.String iface, boolean up) { boolean modified = mFactory.updateInterfaceLinkState(iface, up); if (modified) { boolean restricted = isRestrictedInterface(iface); int n = mListeners.beginBroadcast(); for (int i = 0; i < n; i++) { try { if (restricted) { com.android.server.ethernet.EthernetTracker.ListenerInfo listenerInfo = ((com.android.server.ethernet.EthernetTracker.ListenerInfo) (mListeners.getBroadcastCookie(i))); if (!(listenerInfo.canUseRestrictedNetworks)) { continue; } } mListeners.getBroadcastItem(i).onAvailabilityChanged(iface, up); } catch (android.os.RemoteException e) { } } mListeners.finishBroadcast(); } }
public com.android.ide.common.resources.platform.AttrsXmlParser preload() { org.w3c.dom.Document doc = getDocument(); if (doc == null) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.WARNING, "Failed to find %1$s", mOsAttrsXmlPath); return this; } org.w3c.dom.Node res = doc.getFirstChild(); while (((res != null) && ((res.getNodeType()) != (org.w3c.dom.Node.ELEMENT_NODE))) && (!(res.getNodeName().equals("resources")))) { res = res.getNextSibling(); } if (res == null) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.WARNING, "Failed to find a <resources> node in %1$s", mOsAttrsXmlPath); return this; } parseResources(res); return this; }
protected void handleOuterFieldRead(@javax.annotation.Nonnull com.android.jack.transformations.request.TransformationRequest tr, @javax.annotation.Nonnull com.android.jack.ir.ast.JFieldRef fieldRef, @javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface accessorClass) { com.android.jack.ir.ast.JField field = fieldRef.getFieldId().getField(); assert field != null; com.android.jack.transformations.ast.inner.GetterMarker marker = accessorClass.getMarker(com.android.jack.transformations.ast.inner.GetterMarker.class); if (marker == null) { marker = new com.android.jack.transformations.ast.inner.GetterMarker(); accessorClass.addMarker(marker); } com.android.jack.ir.ast.JMethod getter = marker.getOrCreateGetter(field, ((com.android.jack.ir.ast.JDefinedClass) (accessorClass))); com.android.jack.ir.ast.JMethodId getterId = getter.getMethodId(); com.android.jack.ir.ast.JMethodCall getterCall = new com.android.jack.ir.ast.JMethodCall(fieldRef.getSourceInfo(), null, accessorClass, getterId, getter.getType(), getterId.canBeVirtual()); if (!(field.isStatic())) { com.android.jack.ir.ast.JExpression instance = fieldRef.getInstance(); assert instance != null; getterCall.addArg(instance); } assert (getterCall.getArgs().size()) == (getter.getParams().size()); tr.append(new com.android.jack.transformations.request.Replace(fieldRef, getterCall)); }
public void loadLayoutParamsAttributes(com.android.ide.common.resources.platform.ViewClassInfo.LayoutParamsInfo info) { if ((getDocument()) != null) { com.android.ide.common.resources.platform.ViewClassInfo viewLayoutClass = info.getViewLayoutClass(); java.lang.String xmlName = java.lang.String.format("%1$s_%2$s", viewLayoutClass.getShortClassName(), info.getShortClassName()); xmlName = com.android.ide.eclipse.adt.AdtUtils.stripSuffix(xmlName, "Params"); com.android.ide.common.resources.platform.DeclareStyleableInfo style = mStyleMap.get(xmlName); if (style != null) { java.lang.String definedBy = (viewLayoutClass.getFullClassName()) + (DOT_LAYOUT_PARAMS); com.android.ide.common.resources.platform.AttributeInfo[] attributes = style.getAttributes(); for (com.android.ide.common.resources.platform.AttributeInfo attribute : attributes) { if ((attribute.getDefinedBy()) == null) { attribute.setDefinedBy(definedBy); } } info.setAttributes(attributes); } } }
@com.android.annotations.NonNull public com.android.builder.core.ApkInfoParser.ApkInfo parseApk(@com.android.annotations.NonNull java.io.File apkFile) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { if (!(mAaptFile.isFile())) { throw new java.lang.IllegalStateException(("aapt is missing from location: " + (mAaptFile.getAbsolutePath()))); } return com.android.builder.core.ApkInfoParser.getApkInfo(getAaptOutput(apkFile)); }
private java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, "Need BLUETOOTH permission"); java.util.ArrayList<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<>(); if (states == null) { return devices; } final android.bluetooth.BluetoothDevice[] bondedDevices = mAdapterService.getBondedDevices(); if (bondedDevices == null) { return devices; } synchronized(mStateMachines) { for (android.bluetooth.BluetoothDevice device : bondedDevices) { final android.os.ParcelUuid[] featureUuids = mAdapterService.getRemoteUuids(device); if (!(android.bluetooth.BluetoothUuid.containsAnyUuid(featureUuids, com.android.bluetooth.hfp.HeadsetService.HEADSET_UUIDS))) { continue; } int connectionState = getConnectionState(device); for (int state : states) { if (connectionState == state) { devices.add(device); break; } } } } return devices; }
public void testNewInstanceString_StringConstructor() { runTestNewInstanceString("(Ljava/lang/String;)V", new org.apache.harmony.jpda.tests.jdwp.ClassType.NewInstanceStringTest.ConstructorArgumentsProvider() { @java.lang.Override public void provideConstructorArguments(java.util.List<org.apache.harmony.jpda.tests.framework.jdwp.Value> constructorArguments) { long debuggeeClassId = getClassIDBySignature(getDebuggeeClassSignature()); org.apache.harmony.jpda.tests.framework.jdwp.Value testStringValue = getStaticFieldValue(debuggeeClassId, "TEST_STRING"); constructorArguments.add(testStringValue); } }); }
@org.junit.Test public void testApplyWhenNewFileExistsStrict() throws java.lang.Exception { myPatchSpec.setStrict(true); myPatchSpec.setDeleteFiles(java.util.Collections.singletonList("lib/java_pid.*\\.hprof")); com.intellij.updater.Patch patch = com.intellij.updater.PatchFileCreator.create(myPatchSpec, myFile, com.intellij.updater.TEST_UI); com.intellij.openapi.util.io.FileUtil.writeToFile(new java.io.File(myOlderDir, "newfile.txt"), "hello"); com.intellij.openapi.util.io.FileUtil.writeToFile(new java.io.File(myOlderDir, "lib/java_pid1234.hprof"), "bye!"); com.intellij.updater.PatchFileCreator.PreparationResult preparationResult = com.intellij.updater.PatchFileCreator.prepareAndValidate(myFile, myOlderDir, com.intellij.updater.TEST_UI); assertEquals(1, preparationResult.validationResults.size()); assertEquals(new com.intellij.updater.ValidationResult(ValidationResult.Kind.CONFLICT, "newfile.txt", ValidationResult.Action.VALIDATE, "Unexpected file", ValidationResult.Option.DELETE), preparationResult.validationResults.get(0)); assertAppliedAndRevertedCorrectly(patch, preparationResult); }
public void registerListener(com.android.sdklib.devices.DeviceManager.DevicesChangeListener listener) { com.android.sdklib.devices.DeviceManager.listeners.add(listener); }
private void sendConnectionStateChange(int profile, android.content.Intent connIntent) { android.bluetooth.BluetoothDevice device = connIntent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); int prevState = connIntent.getIntExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, (-1)); int state = connIntent.getIntExtra(BluetoothProfile.EXTRA_STATE, (-1)); android.util.Log.d(com.android.bluetooth.btservice.AdapterProperties.TAG, ((((((("PROFILE_CONNECTION_STATE_CHANGE: profile=" + profile) + ", device=") + device) + ", ") + prevState) + " -> ") + state)); if (!(com.android.bluetooth.btservice.AdapterProperties.isNormalStateTransition(prevState, state))) { android.util.Log.w(com.android.bluetooth.btservice.AdapterProperties.TAG, ((((((("PROFILE_CONNECTION_STATE_CHANGE: unexpected transition for profile=" + profile) + ", device=") + device) + ", ") + prevState) + " -> ") + state)); } sendConnectionStateChange(device, profile, state, prevState); }
private int getParameterModifier(@javax.annotation.Nonnegative int parameterIdx, @javax.annotation.CheckForNull org.objectweb.asm.tree.LocalVariableNode lvn) { if ((currentMethod.parameters) != null) { return (currentMethod.parameters.get(parameterIdx).access) | (com.android.jill.frontend.java.MethodBodyWriter.NAME_PRESENT); } else if (lvn == null) { return ACC_SYNTHETIC; } return com.android.jill.frontend.java.MethodBodyWriter.NO_MODIFIER; }
private void executeBuild(java.util.List<java.lang.String> arguments, org.gradle.tooling.ProjectConnection connection, java.lang.String[] tasks) { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add("-i"); args.add("-u"); args.addAll(arguments); org.gradle.tooling.BuildLauncher launcher = connection.newBuild().forTasks(tasks).withArguments(args.toArray(new java.lang.String[args.size()])); java.util.List<java.lang.String> jvmArguments = new java.util.ArrayList<java.lang.String>(); java.lang.String debugIntegrationTest = java.lang.System.getenv("DEBUG_INNER_TEST"); if ((!(com.google.common.base.Strings.isNullOrEmpty(debugIntegrationTest))) && (debugIntegrationTest.equals(name))) { jvmArguments.add("-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"); } if (com.android.build.gradle.integration.common.utils.JacocoAgent.isJacocoEnabled()) { jvmArguments.add(com.android.build.gradle.integration.common.utils.JacocoAgent.getJvmArg()); } if (!(jvmArguments.isEmpty())) { launcher.setJvmArguments(jvmArguments.toArray(new java.lang.String[jvmArguments.size()])); } if ((stdout) != null) { launcher.setStandardOutput(stdout); } launcher.run(); }
private void bindAndInitialize() throws android.telephony.mbms.MbmsException { android.telephony.mbms.MbmsUtils.startBinding(mContext, android.telephony.MbmsDownloadManager.MBMS_DOWNLOAD_SERVICE_ACTION, new android.content.ServiceConnection() { @java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = IMbmsDownloadService.Stub.asInterface(service); int result; try { result = downloadService.initialize(mSubscriptionId, mCallback); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, "Service died before initialization"); android.telephony.MbmsDownloadManager.sIsInitialized.set(false); return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG, "Runtime exception during initialization"); sendErrorToApp(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); android.telephony.MbmsDownloadManager.sIsInitialized.set(false); return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { sendErrorToApp(result, "Error returned during initialization"); android.telephony.MbmsDownloadManager.sIsInitialized.set(false); return; } try { downloadService.asBinder().linkToDeath(mDeathRecipient, 0); } catch (android.os.RemoteException e) { sendErrorToApp(MbmsException.ERROR_MIDDLEWARE_LOST, "Middleware lost during initialization"); android.telephony.MbmsDownloadManager.sIsInitialized.set(false); return; } mService.set(downloadService); } @java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { android.telephony.MbmsDownloadManager.sIsInitialized.set(false); mService.set(null); } }); }
public void deviceConnected(final com.android.ddmlib.IDevice device) { if (device.isOnline()) { com.android.hierarchyviewerlib.device.DeviceBridge.setupDeviceForward(device); if (!(com.android.hierarchyviewerlib.device.DeviceBridge.isViewServerRunning(device))) { if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, ("Unable to debug device " + device)); return; } } com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo viewServerInfo = com.android.hierarchyviewerlib.device.DeviceBridge.loadViewServerInfo(device); executeInBackground(new java.lang.Runnable() { public void run() { com.android.hierarchyviewerlib.device.Window[] windows = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindows(device); com.android.hierarchyviewerlib.ComponentRegistry.getDeviceSelectionModel().addDevice(device, windows); } }); if ((viewServerInfo.protocolVersion) >= 3) { com.android.hierarchyviewerlib.device.WindowUpdater.startListenForWindowChanges(this, device); focusChanged(device); } } }
private static java.lang.String[] getAllowedHourFormats(android.icu.util.ULocale uLocale) { android.icu.util.ULocale max = android.icu.util.ULocale.addLikelySubtags(uLocale); java.lang.String country = max.getCountry(); if (country.isEmpty()) { country = "001"; } java.lang.String langCountry = ((max.getLanguage()) + "_") + country; java.lang.String[] list = android.icu.text.DateTimePatternGenerator.LOCALE_TO_ALLOWED_HOUR.get(langCountry); if (list == null) { list = android.icu.text.DateTimePatternGenerator.LOCALE_TO_ALLOWED_HOUR.get(country); if (list == null) { list = android.icu.text.DateTimePatternGenerator.LAST_RESORT_ALLOWED_HOUR_FORMAT; } } return list; }
@java.lang.Override public void writeTo(com.android.jack.dx.util.AnnotatedOutput out, com.android.jack.dx.dex.code.DalvInsn insn) { com.android.jack.dx.rop.code.RegisterSpecList regs = explicitize(insn.getRegisters()); int sz = regs.size(); int r0 = (sz > 0) ? regs.get(0).getReg() : 0; int r1 = (sz > 1) ? regs.get(1).getReg() : 0; int r2 = (sz > 2) ? regs.get(2).getReg() : 0; int r3 = (sz > 3) ? regs.get(3).getReg() : 0; int r4 = (sz > 4) ? regs.get(4).getReg() : 0; write(out, opcodeUnit(insn, makeByte(r4, (sz - 1))), codeUnit(r0, r1, r2, r3)); }
@com.android.annotations.NonNull public ResourceVisibilityLookup.Provider getResourceVisibilityProvider() { if ((mResourceVisibility) == null) { mResourceVisibility = new com.android.ide.common.repository.ResourceVisibilityLookup.Provider(); } return mResourceVisibility; }
@java.lang.Override protected boolean engineVerify(byte[] sigBytes) throws java.security.SignatureException { if ((key) == null) { throw new java.security.SignatureException("Need RSA public key"); } if (inputIsTooLong) { return false; } byte[] outputBuffer = new byte[inputBuffer.length]; try { final int resultSize; try { resultSize = org.apache.harmony.xnet.provider.jsse.NativeCrypto.RSA_public_decrypt(sigBytes.length, sigBytes, outputBuffer, key.getPkeyContext(), NativeCrypto.RSA_PKCS1_PADDING); } catch (java.security.SignatureException e) { throw e; } catch (java.lang.Exception e) { return false; } boolean matches = resultSize == (inputOffset); for (int i = 0; i < resultSize; i++) { if ((inputBuffer[i]) != (outputBuffer[i])) { matches = false; } } return matches; } catch (java.lang.Exception ex) { throw new java.security.SignatureException(ex); } finally { inputOffset = 0; } }
@java.lang.Override public boolean satisfiedBy(android.net.NetworkSpecifier other) { return equals(other); }
@com.googlecode.android_scripting.rpc.Rpc(description = "Forget a wifi network by networkId") public void wifiForgetNetwork(@com.googlecode.android_scripting.rpc.RpcParameter(name = "wifiSSID") java.lang.Integer networkId) { com.googlecode.android_scripting.facade.wifi.WifiManagerFacade.WifiActionListener listener = new com.googlecode.android_scripting.facade.wifi.WifiManagerFacade.WifiActionListener(mEventFacade, com.googlecode.android_scripting.facade.wifi.WifiConstants.WIFI_FORGET_NETWORK_CALLBACK); mWifi.forget(networkId, listener); }
public void testConnectionFailed() throws java.lang.Throwable { if (!(android.media.tv.cts.Utils.hasTvInputFramework(getActivity()))) { return; } mCallback.resetConnectionFailedCount(); mTvView.tune("invalid_input_id", TvContract.Channels.CONTENT_URI); mInstrumentation.waitForIdleSync(); new android.cts.util.PollingCheck(android.media.tv.cts.TvViewTest.TIME_OUT_MS) { @java.lang.Override protected boolean check() { return (mCallback.getConnectionFailedCount()) > 0; } }.run(); }
com.android.ahat.heapdump.Site add(com.android.tools.perflib.heap.StackFrame[] frames, int depth, com.android.ahat.heapdump.AhatInstance inst) { return com.android.ahat.heapdump.Site.add(this, frames, depth, inst); }
private boolean getWifiWakeupEnabledSetting() { return (Settings.Global.getInt(mContentResolver, Settings.Global.WIFI_WAKEUP_ENABLED, 0)) == 1; }
public static boolean isFactoryROM() { return (com.android.compatibility.common.util.PropertyUtil.getPropertyInt(com.android.compatibility.common.util.PropertyUtil.FIRST_API_LEVEL)) == (com.android.compatibility.common.util.PropertyUtil.INT_VALUE_IF_UNSET); }
private static void printReferences(com.android.ahat.Doc doc, com.android.ahat.Query query, com.android.tools.perflib.heap.Instance inst) { doc.section("Objects with References to this Object"); if (inst.getHardReferences().isEmpty()) { doc.println(com.android.ahat.DocString.text("(none)")); } else { doc.table(new com.android.ahat.Column("Object")); java.util.List<com.android.tools.perflib.heap.Instance> references = inst.getHardReferences(); com.android.ahat.SubsetSelector<com.android.tools.perflib.heap.Instance> selector = new com.android.ahat.SubsetSelector(query, com.android.ahat.ObjectHandler.HARD_REFS_ID, references); for (com.android.tools.perflib.heap.Instance ref : selector.selected()) { doc.row(com.android.ahat.Value.render(ref)); } doc.end(); selector.render(doc); } if ((inst.getSoftReferences()) != null) { doc.section("Objects with Soft References to this Object"); doc.table(new com.android.ahat.Column("Object")); java.util.List<com.android.tools.perflib.heap.Instance> references = inst.getSoftReferences(); com.android.ahat.SubsetSelector<com.android.tools.perflib.heap.Instance> selector = new com.android.ahat.SubsetSelector(query, com.android.ahat.ObjectHandler.SOFT_REFS_ID, references); for (com.android.tools.perflib.heap.Instance ref : selector.selected()) { doc.row(com.android.ahat.Value.render(ref)); } doc.end(); selector.render(doc); } }
@com.android.annotations.Nullable public static com.android.sdklib.AndroidVersion getVersion(@com.android.annotations.Nullable java.lang.String apiOrPreviewName, @com.android.annotations.Nullable com.android.sdklib.IAndroidTarget[] targets) { if ((apiOrPreviewName == null) || (apiOrPreviewName.isEmpty())) { return null; } if (java.lang.Character.isDigit(apiOrPreviewName.charAt(0))) { try { int api = java.lang.Integer.parseInt(apiOrPreviewName); if (api >= 1) { return new com.android.sdklib.AndroidVersion(api, null); } return null; } catch (java.lang.NumberFormatException e) { return null; } } if (targets != null) { for (int i = (targets.length) - 1; i >= 0; i--) { com.android.sdklib.IAndroidTarget target = targets[i]; if (target.isPlatform()) { com.android.sdklib.AndroidVersion version = target.getVersion(); if ((version.isPreview()) && (apiOrPreviewName.equalsIgnoreCase(version.getCodename()))) { return new com.android.sdklib.AndroidVersion(version.getApiLevel(), version.getCodename()); } } } } int api = com.android.ide.common.sdk.SdkVersionInfo.getApiByPreviewName(apiOrPreviewName, false); if (api != (-1)) { return new com.android.sdklib.AndroidVersion((api - 1), apiOrPreviewName); } return new com.android.sdklib.AndroidVersion(com.android.ide.common.sdk.SdkVersionInfo.HIGHEST_KNOWN_API, apiOrPreviewName); }
boolean process() { if ((mQueue.size()) == 0) { return false; } short tid = mQueue.poll(); int mid = mMessageIdsByTid.get(tid); if (((mRetryLimit) != null) && (mRetryLimit.containsKey(mid))) { int numRetries = mRetryLimit.get(mid); if (numRetries == (-1)) { mDut.onMessageSendFailNotification(tid, NanStatusType.INTERNAL_FAILURE); } else { int currentRetries = mTriesUsedByMid.get(mid); if (currentRetries > numRetries) { return false; } else if (currentRetries == numRetries) { mDut.onMessageSendSuccessNotification(tid); } else { mDut.onMessageSendFailNotification(tid, NanStatusType.NO_OTA_ACK); } mTriesUsedByMid.put(mid, (currentRetries + 1)); } } else { mDut.onMessageSendSuccessNotification(tid); } return true; }
@java.lang.Override public void endTraceSeed(@javax.annotation.Nonnull com.android.jack.ir.ast.JField field) { composedStatus.pop(); for (com.android.jack.analysis.tracer.TracerBrush brush : brushes) { brush.endTraceSeed(field); } }
private void addInclusiveTime(com.android.tools.perflib.vmtrace.Call call, com.android.tools.perflib.vmtrace.Call parent, com.android.tools.perflib.vmtrace.ThreadInfo thread, com.android.tools.perflib.vmtrace.ClockType type) { long time = call.getInclusiveTime(type, com.android.tools.perflib.vmtrace.MethodProfileData.DATA_TIME_UNITS); addInclusiveTime(getPerThreadStats(thread), time, type); if (parent != null) { addInclusiveTime(getPerCallerStats(thread, parent), time, type); } for (com.android.tools.perflib.vmtrace.Call callee : call.getCallees()) { addInclusiveTime(getPerCalleeStats(thread, callee), callee.getInclusiveTime(type, com.android.tools.perflib.vmtrace.MethodProfileData.DATA_TIME_UNITS), type); } }
@android.annotation.Nullable public android.telephony.euicc.EuiccInfo getEuiccInfo() { if (!(isEnabled())) { return null; } try { return android.telephony.euicc.EuiccManager.getIEuiccController().getEuiccInfo(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JThrowStatement throwStmt) { super.visit(throwStmt); com.android.jack.cfg.ThrowBasicBlock throwBlock = new com.android.jack.cfg.ThrowBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(throwBlock); forwardBranchResolver.addPeiBasicBlock(throwBlock, null, throwStmt.getJCatchBlocks()); return false; }
public void addRequestResponsePair(android.telecom.Logging.EventManager.TimedEventPair p) { if (requestResponsePairs.containsKey(p.mRequest)) { requestResponsePairs.get(p.mRequest).add(p); } else { java.util.ArrayList<android.telecom.Logging.EventManager.TimedEventPair> responses = new java.util.ArrayList<>(); responses.add(p); requestResponsePairs.put(p.mRequest, responses); } }
public java.lang.Object[] getElements(java.lang.Object inputElement) { if (inputElement instanceof com.android.hierarchyviewerlib.models.DeviceSelectionModel) { return model.getDevices(); } return new java.lang.Object[0]; }
public static void listViewRoots(com.android.ddmlib.Client client, com.android.ddmlib.HandleViewDebug.ViewDumpHandler replyHandler) throws java.io.IOException { java.nio.ByteBuffer buf = allocBuffer(8); com.android.ddmlib.JdwpPacket packet = new com.android.ddmlib.JdwpPacket(buf); java.nio.ByteBuffer chunkBuf = getChunkDataBuf(buf); chunkBuf.putInt(1); finishChunkPacket(packet, com.android.ddmlib.HandleViewDebug.CHUNK_VULW, chunkBuf.position()); client.sendAndConsume(packet, replyHandler); }
public static android.net.Network getNetworkWithUseLocalNameserversFlag(android.net.Network network) { final long netidForResolv = (android.net.dns.ResolvUtil.NETID_USE_LOCAL_NAMESERVERS) | ((long) (network.netId)); return new android.net.Network(((int) (netidForResolv))); }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.util.Log.d(com.android.bluetooth.btservice.RemoteDevices.TAG, ("Received intent: " + intent)); java.lang.String action = intent.getAction(); switch (action) { case android.bluetooth.BluetoothHeadset.ACTION_HF_INDICATORS_VALUE_CHANGED : onHfIndicatorValueChanged(intent); break; default : android.util.Log.w(com.android.bluetooth.btservice.RemoteDevices.TAG, ("Unhandled intent: " + intent)); break; } }
private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV3Block, java.util.Set<com.android.apksig.internal.apk.ContentDigestAlgorithm> contentDigestsToVerify, int minSdkVersion, int maxSdkVersion, com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result) throws java.security.NoSuchAlgorithmException { java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.ApkSigningBlockUtils.getLengthPrefixedSlice(apkSignatureSchemeV3Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V3_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V3_SIG_NO_SIGNERS); return; } java.security.cert.CertificateFactory certFactory; try { certFactory = java.security.cert.CertificateFactory.getInstance("X.509"); } catch (java.security.cert.CertificateException e) { throw new java.lang.RuntimeException("Failed to obtain X.509 CertificateFactory", e); } int signerCount = 0; while (signers.hasRemaining()) { int signerIndex = signerCount; signerCount++; com.android.apksig.internal.apk.ApkSigningBlockUtils.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result.SignerInfo(); signerInfo.index = signerIndex; result.signers.add(signerInfo); try { java.nio.ByteBuffer signer = com.android.apksig.internal.apk.ApkSigningBlockUtils.getLengthPrefixedSlice(signers); com.android.apksig.internal.apk.v3.V3SchemeVerifier.parseSigner(signer, certFactory, signerInfo, contentDigestsToVerify); } catch (com.android.apksig.apk.ApkFormatException | java.nio.BufferUnderflowException e) { signerInfo.addError(Issue.V3_SIG_MALFORMED_SIGNER); return; } } }
@org.junit.Test public void testMethodRef006() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(METHODREF006).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
com.android.internal.telephony.cat.Menu getMainMenu(int slotId) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ("StkAppService, getMainMenu, sim id: " + slotId)); if (((slotId >= 0) && (slotId < (mSimCount))) && ((mStkContext[slotId].mMainCmd) != null)) { com.android.internal.telephony.cat.Menu menu = mStkContext[slotId].mMainCmd.getMenu(); if ((menu != null) && ((mSimCount) > (com.android.internal.telephony.PhoneConstants.MAX_PHONE_COUNT_SINGLE_SIM))) { if (((menu.title) == null) && (((menu.titleIcon) == null) || (!(menu.titleIconSelfExplanatory)))) { com.android.stk.StkMenuConfig config = com.android.stk.StkMenuConfig.getInstance(getApplicationContext()); java.lang.String label = config.getLabel(slotId); android.graphics.Bitmap icon = config.getIcon(slotId); if ((label != null) || (icon != null)) { android.os.Parcel parcel = android.os.Parcel.obtain(); menu.writeToParcel(parcel, 0); parcel.setDataPosition(0); menu = Menu.CREATOR.createFromParcel(parcel); parcel.recycle(); menu.title = label; menu.titleIcon = icon; menu.titleIconSelfExplanatory = false; } } } return menu; } else { return null; } }
public static android.net.MacAddress createRandomUnicastAddress() { return android.net.MacAddress.createRandomUnicastAddress(android.net.MacAddress.BASE_GOOGLE_MAC, new java.util.Random()); }
@org.junit.Before public void setUp() { resetLatch(); mLocalSocket = null; mLocalSockName = null; mLastRecvBuf = null; mStopped = false; mHandlerThread = new android.os.HandlerThread(android.net.util.BlockingSocketReaderTest.class.getSimpleName()); mHandlerThread.start(); }
@com.android.annotations.NonNull @java.lang.Override public java.util.List<java.io.File> getJars() { return jars; }
private static java.lang.String parseOtherHomePartnerInstance(android.net.wifi.hotspot2.omadm.PPSMOParser.PPSNode node) throws android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException { if (node.isLeaf()) { throw new android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException("Leaf node not expected for OtherHomePartner instance"); } java.lang.String fqdn = null; for (android.net.wifi.hotspot2.omadm.PPSMOParser.PPSNode child : node.getChildren()) { switch (child.getName()) { case android.net.wifi.hotspot2.omadm.PPSMOParser.NODE_FQDN : fqdn = android.net.wifi.hotspot2.omadm.PPSMOParser.getPpsNodeValue(child); break; default : throw new android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException(("Unknown node under OtherHomePartner instance: " + (child.getName()))); } } if (fqdn == null) { throw new android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException("OtherHomePartner instance missing FQDN field"); } return fqdn; }
public static native byte[] i2d_X509_PUBKEY(long x509ctx);
public java.lang.String getToolchainDirectory(com.android.build.gradle.internal.core.Abi abi) { return getToolchainDirectory(toolchain, toolchainVersion, abi); }
static java.lang.String[] getAlgorithms(java.lang.String propertyName) { java.lang.String property = java.security.AccessController.doPrivileged(((java.security.PrivilegedAction<java.lang.String>) (() -> java.security.Security.getProperty(propertyName)))); java.lang.String[] algorithmsInProperty = null; if ((property != null) && (!(property.isEmpty()))) { if ((((property.length()) >= 2) && ((property.charAt(0)) == '"')) && ((property.charAt(((property.length()) - 1))) == '"')) { property = property.substring(1, ((property.length()) - 1)); } algorithmsInProperty = property.split(","); for (int i = 0; i < (algorithmsInProperty.length); i++) { algorithmsInProperty[i] = algorithmsInProperty[i].trim(); } } if (algorithmsInProperty == null) { algorithmsInProperty = new java.lang.String[0]; } return algorithmsInProperty; }
private static java.util.Map<java.lang.String, java.lang.Integer> stringToMap(java.lang.String str) { java.util.Map<java.lang.String, java.lang.Integer> map = new java.util.HashMap<>(); for (java.lang.String entry : str.split("\n")) { java.lang.String[] parts = entry.split(com.android.compatibility.common.tradefed.result.TestRunHandler.MAP_DELIMITER); map.put(parts[0], java.lang.Integer.parseInt(parts[1])); } return map; }
@vogar.target.TestRunnerProperties(testClass = vogar.target.junit4.TestMethodWithParameterTest.class) @org.junit.Test public void testRunner_TestMethodWithParameterTest_Requested() throws java.lang.Exception { java.lang.String methodName = "parameterized"; vogar.target.TestRunner runner = testRunnerRule.createTestRunner(methodName); runner.run(); expectedResults().failure(methodName, (("java.lang.Exception: Method " + methodName) + " should have no parameters\n")).completedNormally(); }
void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((fromState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { setActiveDevice(device); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (toState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { setActiveDevice(null); } }
public static java.lang.String message(@org.jetbrains.annotations.NotNull @org.jetbrains.annotations.PropertyKey(resourceBundle = com.google.gct.idea.util.GctBundle.BUNDLE_NAME) java.lang.String key, @org.jetbrains.annotations.NotNull java.lang.Object... params) { return com.intellij.CommonBundle.message(com.google.gct.idea.util.GctBundle.getBundle(), key, params); }
public boolean hasSnapshotSave() { return mSnapshotSave; }
public void testSignature_updateArray_negativeLength_throws() throws java.lang.Exception { try { java.security.Signature s = new libcore.java.security.SignatureTest.MySignature("FOO"); s.initVerify(libcore.java.security.SignatureTest.createPublicKey()); s.update(new byte[4], 1, (-1)); fail(); } catch (java.lang.IllegalArgumentException expected) { } }
public void testBug15081434() throws java.lang.Exception { java.text.DecimalFormat df = ((java.text.DecimalFormat) (java.text.NumberFormat.getCurrencyInstance(java.util.Locale.US))); try { df.parse(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyLocalizedPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyPattern(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.format(null, new java.lang.StringBuffer(), new java.text.FieldPosition(0)); fail(); } catch (java.lang.IllegalArgumentException expected) { } try { df.parse(null, new java.text.ParsePosition(0)); fail(); } catch (java.lang.NullPointerException expected) { } df.setDecimalFormatSymbols(null); try { df.setCurrency(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.setNegativePrefix(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.setNegativeSuffix(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.setPositivePrefix(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.setPositiveSuffix(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.setRoundingMode(null); fail(); } catch (java.lang.NullPointerException expected) { } }
@java.lang.Override protected void engineReset() { android.os.IBinder operationToken = mOperationToken; if (operationToken != null) { mOperationToken = null; mKeyStore.abort(operationToken); } mChunkedStreamer = null; android.security.keymaster.KeymasterArguments keymasterArgs = new android.security.keymaster.KeymasterArguments(); keymasterArgs.addInt(KeymasterDefs.KM_TAG_DIGEST, mDigest); android.security.keymaster.OperationResult opResult = mKeyStore.begin(mKeyAliasInKeyStore, KeymasterDefs.KM_PURPOSE_SIGN, true, keymasterArgs, null, new android.security.keymaster.KeymasterArguments()); if (opResult == null) { throw new android.security.KeyStoreConnectException(); } else if ((opResult.resultCode) != (KeyStore.NO_ERROR)) { throw new android.security.CryptoOperationException("Failed to start keystore operation", android.security.KeymasterUtils.getExceptionForKeymasterError(opResult.resultCode)); } mOperationToken = opResult.token; if ((mOperationToken) == null) { throw new android.security.CryptoOperationException("Keystore returned null operation token"); } mChunkedStreamer = new android.security.KeyStoreCryptoOperationChunkedStreamer(new android.security.KeyStoreHmacSpi.KeyStoreStreamingConsumer(mKeyStore, mOperationToken)); }
@java.lang.Override public void iccOpenLogicalChannel(java.lang.String aid, int p2, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SIM_OPEN_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { if (android.os.Build.IS_DEBUGGABLE) { riljLog((((((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + " aid = ") + aid) + " p2 = ") + p2)); } else { riljLog((((rr.serialString()) + "> ") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } } try { radioProxy.iccOpenLogicalChannel(rr.mSerial, convertNullToEmptyString(aid), p2); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "iccOpenLogicalChannel", e); } } }
void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { synchronized(mStateMachines) { android.bluetooth.BluetoothDevice device = stackEvent.device; com.android.bluetooth.a2dp.A2dpStateMachine sm = getOrCreateStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ("Cannot process stack event: no state machine: " + stackEvent)); return; } sm.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); } }
@org.junit.Test public void test014() throws java.lang.Exception { org.junit.Assert.assertTrue(com.android.jack.java7.trywithresources.test002.jack.TryWithResourcesTest002.m14(1)); }
@javax.annotation.Nonnull private static java.util.Properties loadLibraryProperties(@javax.annotation.Nonnull com.android.sched.vfs.InputVFS vfs) throws com.android.jack.library.NotJackLibraryException { java.util.Properties libraryProperties = new java.util.Properties(); try { com.android.sched.vfs.InputVFile libProp = vfs.getRootInputVDir().getInputVFile(JackLibrary.LIBRARY_PROPERTIES_VPATH); java.io.InputStream inputStream = null; try { inputStream = libProp.getInputStream(); libraryProperties.load(inputStream); } finally { if (inputStream != null) { try { inputStream.close(); } catch (java.io.IOException e) { com.android.jack.library.JackLibraryFactory.logger.log(java.util.logging.Level.WARNING, "Failed to close ''{0}''", libProp.getLocation().getDescription()); } } } } catch (java.io.IOException | com.android.sched.util.file.NotFileOrDirectoryException | com.android.sched.util.file.NoSuchFileException | com.android.sched.util.file.WrongPermissionException e) { throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } return libraryProperties; }
public java.net.SocketAddress getpeername(java.io.FileDescriptor fd) throws android.system.ErrnoException { return os.getpeername(fd); }
@java.lang.Override public final void onRegistered(@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech int imsRadioTech) { onImsConnected(imsRadioTech); }
@java.lang.Override public void touch(int x, int y, com.android.monkeyrunner.adb.TouchPressType type) { try { switch (type) { case DOWN : manager.touchDown(x, y); break; case UP : manager.touchUp(x, y); break; case DOWN_AND_UP : manager.tap(x, y); break; } } catch (java.io.IOException e) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log(java.util.logging.Level.SEVERE, ((((("Error sending touch event: " + x) + " ") + y) + " ") + type), e); } }
private boolean isPhoneStateIdle() { for (int i = 0; i < (android.telephony.TelephonyManager.getDefault().getPhoneCount()); i++) { com.android.internal.telephony.Phone phone = com.android.internal.telephony.PhoneFactory.getPhone(i); if ((phone != null) && ((phone.getState()) != (PhoneConstants.State.IDLE))) { log(("isPhoneStateIdle false: Voice call active on phone " + i)); return false; } } return true; }
@java.lang.Override public void deleteTransportModeTransform(int resourceId) throws android.os.RemoteException { releaseManagedResource(mTransformRecords, resourceId, "IpSecTransform"); }
public static void main() { try { LocalClass3.CC.newInstance(); java.lang.System.out.println("LocalClass3 succeeded"); } catch (java.lang.Exception ex) { java.lang.System.out.println("Got unexpected LocalClass3 failure"); ex.printStackTrace(java.lang.System.out); } }
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) throws java.lang.Exception { if (type.isExternal()) { return; } if (hasRuntimeAnnotation(type)) { type.addMarker(MainDexMarker.INSTANCE); } }
@java.lang.Override public void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "onCreate"); android.app.ActionBar actionBar = getActionBar(); actionBar.setCustomView(R.layout.stk_title); actionBar.setDisplayShowCustomEnabled(true); setContentView(R.layout.stk_menu_list); mInstance = this; mTitleTextView = ((android.widget.TextView) (findViewById(R.id.title_text))); mTitleIconView = ((android.widget.ImageView) (findViewById(R.id.title_icon))); mProgressView = ((android.widget.ProgressBar) (findViewById(R.id.progress_bar))); mContext = getBaseContext(); getListView().setOnCreateContextMenuListener(this); if ((appService) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "onCreate - appService is null"); finish(); return; } android.support.v4.content.LocalBroadcastManager.getInstance(this).registerReceiver(mLocalBroadcastReceiver, new android.content.IntentFilter(StkAppService.SESSION_ENDED)); initFromIntent(getIntent()); if (!(android.telephony.SubscriptionManager.isValidSlotIndex(mSlotId))) { finish(); return; } }
@java.lang.Override public void setProperty(@javax.annotation.Nonnull java.lang.String key, @javax.annotation.Nonnull java.lang.String value) { options.addProperty(key, value); }
public java.lang.String getSysroot(com.android.build.gradle.internal.core.Abi abi) { return ((((ndkDirectory) + "/platforms/") + (compileSdkVersion)) + "/arch-") + (abi.getArchitecture()); }
@java.lang.Override public org.eclipse.swt.graphics.Image loadCapture(com.android.hierarchyviewerlib.models.Window window, com.android.hierarchyviewerlib.models.ViewNode viewNode) { com.android.ddmlib.Client c = window.getClient(); if (c == null) { return null; } java.lang.String viewRoot = window.getTitle(); com.android.hierarchyviewerlib.device.DdmViewDebugDevice.CaptureByteArrayHandler handler = new com.android.hierarchyviewerlib.device.DdmViewDebugDevice.CaptureByteArrayHandler(com.android.ddmlib.HandleViewDebug.CHUNK_VUOP); try { com.android.ddmlib.HandleViewDebug.captureView(c, viewRoot, viewNode.toString(), handler); } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DdmViewDebugDevice.TAG, e); return null; } byte[] data = handler.getData(10, java.util.concurrent.TimeUnit.SECONDS); return data == null ? null : new org.eclipse.swt.graphics.Image(org.eclipse.swt.widgets.Display.getDefault(), new java.io.ByteArrayInputStream(data)); }
private boolean isUseOnlyRsrpForLteLevel() { android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (mPhone.getContext().getSystemService(Context.CARRIER_CONFIG_SERVICE))); if (configManager != null) { android.os.PersistableBundle config = configManager.getConfigForSubId(mPhone.getSubId()); if (config != null) { return config.getBoolean(CarrierConfigManager.KEY_USE_ONLY_RSRP_FOR_LTE_SIGNAL_BAR_BOOL); } } return android.telephony.CarrierConfigManager.getDefaultConfig().getBoolean(CarrierConfigManager.KEY_USE_ONLY_RSRP_FOR_LTE_SIGNAL_BAR_BOOL); }
private void checkClzUchar4Uchar4() { android.renderscript.Allocation inValue = CreateRandomAllocation(mRS, Element.DataType.UNSIGNED_8, 4, -7610705415446861042L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_8, 4), android.renderscript.cts.INPUTSIZE); script.forEach_testClzUchar4Uchar4(inValue, out); verifyResultsClzUchar4Uchar4(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testClzUchar4Uchar4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_8, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testClzUchar4Uchar4(inValue, out); verifyResultsClzUchar4Uchar4(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testClzUchar4Uchar4: " + (e.toString()))); } }
private void checkLog10Float2Float2() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -2571141842548276748L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testLog10Float2Float2(in, out); verifyResultsLog10Float2Float2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLog10Float2Float2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLog10Float2Float2(in, out); verifyResultsLog10Float2Float2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLog10Float2Float2: " + (e.toString()))); } }
protected boolean mustTraceOverridingMethod(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) { synchronized(method) { com.android.jack.analysis.tracer.BaseTracerMarker marker = method.getMarker(markerClass); if (marker != null) { return marker.mustTraceOverridingMethods(); } } return false; }
@java.lang.Override public void onInputBufferAvailable(android.media.MediaCodec codec, int index) { assertTrue(("video onInputBufferAvailable " + index), mMime.startsWith("audio/")); synchronized(mInputBufferIndices) { mInputBufferIndices.add(index); } }
public void setVersioncode(java.lang.String versionCode) { if ((versionCode.length()) > 0) { try { mVersionCode = java.lang.Integer.decode(versionCode); } catch (java.lang.NumberFormatException e) { java.lang.System.out.println(java.lang.String.format("WARNING: Ignoring invalid version code value '%s'.", versionCode)); } } }
public boolean avoidBadWifi() { return mMultinetworkPolicyTracker.getAvoidBadWifi(); }
public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_kernel_struct s = new com.android.rs.test.ScriptC_kernel_struct(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_init_vars(A); s.forEach_root(A, B); s.invoke_verify_root(); s.invoke_kernel_struct_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }
public void onIfaceAdded(int type, java.lang.String name) { mLog.d(((("onIfaceAdded " + type) + ", name: ") + name)); }
public void projectRenamed(org.eclipse.core.resources.IProject project, org.eclipse.core.runtime.IPath from) { java.lang.System.out.println(("RENAMED: " + project)); com.android.ide.eclipse.adt.internal.sdk.ProjectState renamedState = com.android.ide.eclipse.adt.internal.sdk.Sdk.getProjectState(project); if (renamedState.isLibrary()) { disposeLibraryProject(from.lastSegment()); synchronized(com.android.ide.eclipse.adt.internal.sdk.Sdk.sLock) { for (com.android.ide.eclipse.adt.internal.sdk.ProjectState projectState : com.android.ide.eclipse.adt.internal.sdk.Sdk.sProjectStateMap.values()) { if ((projectState != renamedState) && (projectState.isMissingLibraries())) { org.eclipse.core.runtime.IPath oldRelativePath = com.android.ide.eclipse.adt.internal.sdk.Sdk.makeRelativeTo(from, projectState.getProject().getFullPath()); org.eclipse.core.runtime.IPath newRelativePath = com.android.ide.eclipse.adt.internal.sdk.Sdk.makeRelativeTo(project.getFullPath(), projectState.getProject().getFullPath()); org.eclipse.core.resources.IProject[] oldLibraries = projectState.getFullLibraryProjects(); com.android.ide.eclipse.adt.internal.sdk.ProjectState.LibraryState libState = projectState.updateLibrary(oldRelativePath.toString(), newRelativePath.toString(), renamedState); if (libState != null) { com.android.ide.eclipse.adt.internal.sdk.Sdk.LinkUpdateBundle bundle = getLinkBundle(projectState, oldLibraries); queueLinkUpdateBundle(bundle); if (projectState.isLibrary()) { mOpenedLibraryProjects.add(projectState); } } } } } } }