public void testInterfaceCountersUdp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1000, false); }
@java.lang.Override public void addMarker(@javax.annotation.Nonnull com.android.sched.marker.Marker marker) { assert isValidMarker(marker.getClass()) : (((   + (com.android.sched.item.Items.getName(marker.getClass()))) +   is not supported for class   + (this.getClass().getName())) + "'";<START_MOD> if ((markers) == null) { synchronized(this) {<END_MOD> if ((markers) == null) { markers = new java.util.concurrent.ConcurrentHashMap<java.lang.Class<? extends com.android.sched.marker.Marker>, com.android.sched.marker.Marker>(); } <START_MOD>} } <END_MOD>assert (markers.get(marker.getClass())) == null : (   + (com.android.sched.item.Items.getName(marker.getClass()))) +   already exists markers.put(marker.getClass(), marker); }
public void saveSendingFileInfo(java.lang.String mimeType, java.lang.String uriString, boolean isHandover) throws java.lang.IllegalArgumentException { synchronized(this) { mMultipleFlag = false; mMimeTypeOfSendingFile = mimeType; mIsHandoverInitiated = isHandover; android.net.Uri uri = android.net.Uri.parse(uriString); com.android.bluetooth.opp.<START_MOD>BluetoothOppSendFileInfo sendFileInfo =<END_MOD> com.android.bluetooth.opp.BluetoothOppSendFileInfo.generateFileInfo(mContext, uri, mimeType)<START_MOD>; uri = com.android.bluetooth.opp.BluetoothOppUtility.generateUri(uri, sendFileInfo); com.android.bluetooth.opp.BluetoothOppUtility.putSendFileInfo(uri, sendFileInfo); mUriOfSendingFile = uri.toString(<END_MOD>); storeApplicationData(); } }
@java.lang.Override public void onRestoreInstanceState(android.os.Bundle savedInstanceState) { if (savedInstanceState != null) { super.onRestoreInstanceState(savedInstanceState); com.android.settings.wifi.WpsDialog.DialogState dialogState = mDialogState.valueOf(savedInstanceState.getString(com.android.settings.wifi.WpsDialog.DIALOG_STATE)); java.lang.String msg = savedInstanceState.getString(com.android.settings.wifi.WpsDialog.DIALOG_MSG_STRING); updateDialog(dialogState, msg); <START_MOD>if (dialogState == (com.android.settings.wifi.WpsDialog.DialogState.WPS_START)) { android.net.wifi.WpsInfo wpsConfig = new android.net.wifi.WpsInfo(); wpsConfig.setup = mWpsSetup; mWifiManager.startWps(wpsConfig, mWpsListener); <END_MOD>} }<START_MOD> }<END_MOD>
@java.lang.Override public void onPrinterFound(com.android.bips.discovery.DiscoveredPrinter printer) { if ((mState) != (com.android.bips.LocalPrintJob.STATE_DISCOVERY)) return; if (<START_MOD>!(<END_MOD>printer.getId(mPrintService).equals(mPrintJob.getInfo().getPrinterId()))<START_MOD>) return; if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, (((   + (printer.name)) +   state= + (mState))); if (com.android.bips.p2p.P2pUtils.isP2p(printer))<END_MOD> { <START_MOD>mConnection = com.android.bips.p2p.P2pPrinterConnection.connectPrinter(mPrintService, printer, this); return; } if ((com.android.bips.p2p.P2pUtils.isOnConnectedInterface(mPrintService, printer)) && ((mConnection) == null)) { mConnection = com.android.bips.p2p.P2pPrinterConnection.connectPrinter(mPrintService, printer, this); } if ((mDiscovery) != null) mDiscovery.stop(); mState = <END_MOD>com.android.bips.LocalPrintJob.<START_MOD>STATE_CAPABILITIES<END_MOD>; mPath = printer.path; mPrintService.getCapabilitiesCache().request(printer, true, this::handleCapabilities); }
<START_MOD>@javax.annotation.CheckForNull public java.io.File getWorkingDirectory() { return workingDirectory; }<END_MOD>
public void testXmlApi1() throws java.lang.Exception { assertEquals(( Error: @android:color/holo_red_light requires API level 14 (current min is 1) + (((((( Error: View requires API level 11 (current min is 1): <CalendarView> +   Error: View requires API level 14 (current min is 1): <GridLayout> +   Error: @android:attr/actionBarSplitStyle requires API level 14 (current min is 1) +   Error: @android:color/holo_red_light requires API level 14 (current min is 1) +   Error:   requires <START_MOD>target <END_MOD>API level 8 (current <START_MOD>target<END_MOD> is 1), use   instead +   Error: View requires API level 5 (current min is 1): <QuickContactBadge> +   Error: @android:color/holo_red_light requires API level 14 (current min is 1) lintProject("apicheck/minsdk1.xml=>AndroidManifest.xml", "apicheck/layout.xml=>res/layout/layout.xml", "apicheck/themes.xml=>res/values/themes.xml", "apicheck/themes.xml=>res/color/colors.xml")); }
public void iccTransmitApduLogicalChannel(int channel, int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { <START_MOD>if ((!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) || ((mUiccProfile) == null)) { <END_MOD>mCi.iccTransmitApduLogicalChannel(channel, cla, command, p1, p2, p3, data, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_TRANSMIT_APDU_LOGICAL_CHANNEL_DONE, response)); }<START_MOD> else { if ((mUiccProfile) != null) { mUiccProfile.iccTransmitApduLogicalChannel(channel, cla, command, p1, p2, p3, data, response); } } }<END_MOD>
<START_MOD>public<END_MOD> <START_MOD>void<END_MOD> <START_MOD>notifyIconDone(long<END_MOD> <START_MOD>bssid<END_MOD>, com.android.server.wifi.<START_MOD>hotspot2<END_MOD>.<START_MOD>IconEvent iconEvent) throws java<END_MOD>.<START_MOD>io.IOException { java.lang.String filename = null; byte[] data = null; if (iconEvent != null<END_MOD>)<START_MOD> { data = retrieveIcon(iconEvent<END_MOD>); <START_MOD>filename<END_MOD> <START_MOD>=<END_MOD> <START_MOD>iconEvent<END_MOD>.<START_MOD>getFileName<END_MOD>(); } <START_MOD>mCallbacks.onIconResponse(bssid, filename, data); <END_MOD>}
<START_MOD>private boolean isDefaultMethod(com.android.jack.ir.ast.JMethod jMethod) { assert jMethod != null; assert (jMethod.getEnclosingType()) instanceof com.android.jack.ir.ast.JDefinedInterface; return (!(jMethod.isAbstract())) && (!(jMethod.isStatic())); }<END_MOD>
<START_MOD>public static synchronized com.android.builder.sdk.SdkLoader getLoader(@com.android.annotations.NonNull java.io.File sdkLocation, @com.android.annotations.Nullable java.io.File ndkLocation) { if (((com.android.builder.sdk.DefaultSdkLoader.sLoader) != null) && ((!(sdkLocation.equals(com.android.builder.sdk.DefaultSdkLoader.sLoader.mSdkLocation))) || (!(com.google.common.base.Objects.equal(ndkLocation, com.android.builder.sdk.DefaultSdkLoader.sLoader.mNdkLocation))))) { throw new java.lang.IllegalStateException("Already created an SDK Loader with different SDK Path"); } return com.android.builder.sdk.DefaultSdkLoader.sLoader = new com.android.builder.sdk.DefaultSdkLoader(sdkLocation, ndkLocation); }<END_MOD>
void dump(java.io.FileDescriptor fd, com.android.internal.util.IndentingPrintWriter pw, java.lang.String[] args) { <START_MOD>pw.println<END_MOD>(<START_MOD>getClass<END_MOD>()<START_MOD>.getSimpleName());<END_MOD> pw.println( <START_MOD>interfaces<END_MOD>: <START_MOD>pw.increaseIndent<END_MOD>(); <START_MOD>for<END_MOD> (<START_MOD>java.lang.String iface : mTrackingInterfaces.keySet<END_MOD>()) { pw.println((<START_MOD>(iface<END_MOD> <START_MOD>+<END_MOD> <START_MOD>":")<END_MOD> + (<START_MOD>mTrackingInterfaces.get(iface)<END_MOD>))); <START_MOD>}<END_MOD> pw.decreaseIndent(); }
private android.net.IpSecTransform activate() throws IpSecManager.ResourceUnavailableException, IpSecManager.SpiUnavailableException, java.io.IOException { synchronized(this) { try { android.net.IIpSecService svc = getIpSecService(); android.net.IpSecTransformResponse result = svc.createTransportModeTransform(mConfig, new android.os.Binder()); int status = result.status; checkResultStatus(status); mResourceId = result.resourceId; android.util.Log.d(android.net.IpSecTransform.TAG, ( Transform with Id   + (mResourceId))); mCloseGuard.open("build"); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } } return this; }
public void testInstall_withWorkingDir() throws java.lang.Exception { java.io.File workingDir = installer.getWorkingDir(); assertTrue(workingDir.mkdir()); libcore.tzdata.update2.TimeZoneBundleInstallerTest.createFile(new java.io.File(workingDir, "myFile"), new byte[]{ 'a' }); libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundle(libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION, "001"); <START_MOD>assertEquals<END_MOD>(<START_MOD>TimeZoneBundleInstaller.INSTALL_SUCCESS, <END_MOD>installer.<START_MOD>installWithErrorCode<END_MOD>(bundle.getBytes())); assertBundleInstalled(bundle); }
private boolean sendDeviceListMonitoringRequest() throws<START_MOD> com.android.ddmlib.TimeoutException,<END_MOD> java.io.IOException { byte[] request = com.android.ddmlib.AdbHelper.formAdbRequest("host:track-devices"); <START_MOD>try { com.android.ddmlib.AdbHelper.write(mMainAdbConnection, request); com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(mMainAdbConnection, false); <END_MOD>if ((<START_MOD>resp.ioSuccess<END_MOD>) == false<START_MOD>) { com.android.ddmlib.Log.e("DeviceMonitor",   to read the adb response! mMainAdbConnection.close(); throw new java.io.IOException( to read the adb response! } if ((resp.okay) == false) { com.android.ddmlib.Log.e("DeviceMonitor", ( refused request:   + (resp.message))); } return resp.okay; } catch (java.io.IOException e<END_MOD>) { com.android.ddmlib.Log.e("DeviceMonitor",   Tracking request failed! mMainAdbConnection.close(); throw <START_MOD>e; } }<END_MOD>
<START_MOD>@android.annotation.Nullable public android.net.wifi.WifiConfiguration selectNetwork(java.util.List<com.android.server.wifi.ScanDetail> scanDetails, boolean connected, boolean disconnected, boolean untrustedNetworkAllowed) { mConnectableNetworks.clear(); if ((scanDetails.size()) == 0) { localLog("Empty connectivity scan result"); return null; } if ((mCurrentNetwork) == null) { mCurrentNetwork = mWifiConfigManager.getConfiguredNetwork(mWifiInfo.getNetworkId()); } if ((mCurrentBssid) == null) { mCurrentBssid = mWifiInfo.getBSSID(); } if (!(isNetworkSelectionNeeded(scanDetails, connected, disconnected))) { return null; } updateSavedNetworkSelectionStatus(); updateBssidBlacklist(); java.util.List<com.android.server.wifi.ScanDetail> filteredScanDetails = filterScanResults(scanDetails); if ((filteredScanDetails.size()) == 0) { return null; } updateNetworkScoreCache(filteredScanDetails); android.net.wifi.WifiConfiguration selectedNetwork = null; for (com.android.server.wifi.WifiNetworkSelector.NetworkEvaluator registeredEvaluator : mEvaluators) { if (registeredEvaluator != null) { selectedNetwork = registeredEvaluator.evaluateNetworks(scanDetails, mCurrentNetwork, mCurrentBssid, connected, untrustedNetworkAllowed, mNetworkScoreCache, mConnectableNetworks); if (selectedNetwork != null) { break; } } } if (selectedNetwork != null) { mCurrentNetwork = selectedNetwork; mCurrentBssid = selectedNetwork.getNetworkSelectionStatus().getCandidate().BSSID; mLastNetworkSelectionTimeStamp = mClock.getElapsedSinceBootMillis(); } return selectedNetwork; }<END_MOD>
<START_MOD>private java.lang.String getWifiMeteredStatus(java.lang.String ssid) throws java.lang.Exception { final java.lang.String command = "cmd netpolicy list wifi-networks"; final java.lang.String policyString = runShellCommand(mInstrumentation, command); final java.util.regex.Matcher m = java.util.regex.Pattern.compile((("^" + ssid) + ";(true|false|none)$"), ((java.util.regex.Pattern.MULTILINE) | (java.util.regex.Pattern.UNIX_LINES))).matcher(policyString); if (!(m.find())) { throw new java.lang.RuntimeException("Unexpected format from cmd netpolicy"); } return m.group(1); }<END_MOD>
<START_MOD>private boolean registerStaIfaceCallback() { synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return false; try { kilroy(); android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.registerEventCallback(mIWifiStaIfaceEventCallback); return (status.code) == (android.hardware.wifi.V1_0.WifiStatusCode.SUCCESS); } catch (android.os.RemoteException e) { kilroy(); handleRemoteException(e); return false; } } }<END_MOD>
private void checkNotFreed() { if (<START_MOD>!(block.isValid())<END_MOD>) { throw new java.lang.IllegalStateException( was freed } }
@org.gradle.api.tasks.TaskAction protected void doFullTaskAction() <START_MOD>throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SigningException, com.android.ide.common.signing.KeytoolException, java.io.FileNotFoundException <END_MOD>{ final java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(<START_MOD>(("resources-" + (getOutputBaseName())) + "-(.*).ap_")); java.util<END_MOD>.List<java.lang.String> unprocessedSplits = <START_MOD>com.google.common.collect.Lists.newArrayList(splits); for (java.io.File file : inputFiles) { java.util.regex.Matcher matcher = pattern.matcher(file.getName()); if ((matcher.matches()) && (isAbiSplit(file.getName()))) { java.lang.String apkName = getApkName(matcher.group(1)); java.io.File outFile = <END_MOD>new <START_MOD>java.io.File(getOutputDirectory(), apkName); getBuilder().packageApk(file.getAbsolutePath(), null, com.google.common.collect.ImmutableList.<java.io.File>of(), com.google.common.collect.ImmutableList.<java.io.File>of(), null, getJniFolders(), getMergingFolder(), com.google.common.collect.ImmutableSet.of(matcher.group(1)), isJniDebuggable(), getSigningConfig(), getPackagingOptions(), getPackagingOptionsFilter(), outFile.getAbsolutePath()); unprocessedSplits.remove(matcher.group(1)); } } if (!(unprocessedSplits.isEmpty())) { java.lang.String message =   not find resource package<END_MOD> for <START_MOD>  + (com.google.common.base.Joiner.on(",").join(unprocessedSplits)); getLogger().error(message); throw new<END_MOD> java.lang.<START_MOD>IllegalStateException(message<END_MOD>); } }
<START_MOD>private dumpJava(java.io.FileDescriptor fd, com.android.bluetooth.btservice.Printwriter writer, java.lang.String[] args) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog log = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dumpProto(log); } writer.write(log.toString()); writer.flush(); }<END_MOD>
<START_MOD>public void setIndex(int i, int index) { if (index < 0) { throw new java.lang.IllegalArgumentException("index < 0"); } if ((this.index[i]) != (com.android.dx.dex.code.MultiCstInsn.NOT_SET)) { throw new java.lang.RuntimeException("index already set"); } this.index[i] = index; }<END_MOD>
public final boolean isAccessModeSupported(java.lang.invoke.VarHandle.AccessMode accessMode) { <START_MOD>return accessInfo.isAccessModeSupported<END_MOD>(<START_MOD>accessMode<END_MOD>); }
private int parsePinPukErrorResult(android.os.AsyncResult ar) { <START_MOD>java.lang.Integer<END_MOD> result = ((<START_MOD>java.lang.Integer<END_MOD>) (ar.result)); if (result == null) { return -1; } else { int attemptsRemaining = result; log(( attemptsRemaining= + attemptsRemaining)); return attemptsRemaining; } }
public static java.lang.String getSignatureAttribute(java.lang.Object obj) { java.lang.reflect.Method method; try { java.lang.Class c = java.lang.Class.forName("libcore.reflect.AnnotationAccess"); method = c.getDeclaredMethod("getSignature", java.lang.reflect.AnnotatedElement.class); method.setAccessible(true); } catch (java.lang.Exception ex) { ex.printStackTrace(<START_MOD>java.lang.System.out<END_MOD>); return "<unknown>"; } try { return ((java.lang.String) (method.invoke(null, obj))); } catch (java.lang.IllegalAccessException ex) { throw new java.lang.RuntimeException(ex); } catch (java.lang.reflect.InvocationTargetException ex) { throw new java.lang.RuntimeException(ex); } }
<START_MOD>@java.lang.Override public boolean print(java.io.PrintStream printer, java.lang.String value) { printer.print((("\"" + (value.replace("\"", "\\\""))) + "\"")); return true; }<END_MOD>
@java.lang.Override public void binderDied() { <START_MOD>mImsServiceProxy<END_MOD> = null; mUt = null; mConfig = null; mEcbm = null; mMultiEndpoint = null; if ((mContext) != null) { android.content.Intent intent = new android.content.Intent(com.android.ims.ImsManager.ACTION_IMS_SERVICE_DOWN); intent.putExtra(com.android.ims.ImsManager.EXTRA_PHONE_ID, mPhoneId); mContext.sendBroadcast(new android.content.Intent(intent)); } }
public void testVFE7() { try { <START_MOD>dot<END_MOD>.<START_MOD>junit<END_MOD>.<START_MOD>opcodes<END_MOD>.<START_MOD>iget_wide.d.T_iget_wide_12 t = new dot.junit.opcodes.iget_wide.d.T_iget_wide_12<END_MOD>(<START_MOD>); t.run(<END_MOD>); fail( a <START_MOD>IllegalAccessError<END_MOD> exception } catch (java.lang.<START_MOD>IllegalAccessError<END_MOD> <START_MOD>e<END_MOD>) { } }
public native void bind(java.io.FileDescriptor fd, java.net.InetAddress address, int port) throws java.net.SocketException<START_MOD>, libcore.io.ErrnoException<END_MOD>;
public java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object object) { if (!(object instanceof java.lang.Number)) { throw new java.lang.IllegalArgumentException(<START_MOD>( not a <END_MOD>Number<START_MOD>:   + (object.getClass()))); } <END_MOD>java.lang.Number<START_MOD> number = ((java.lang.Number<END_MOD>) (object)); libcore.icu.NativeDecimalFormat.FieldPositionIterator fpIter = new libcore.icu.NativeDecimalFormat.FieldPositionIterator(); java.lang.String text; if ((number instanceof java.math.BigInteger) || (number instanceof java.math.BigDecimal)) { text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatDigitList(this.address, number.toString(), fpIter)); } else if ((number instanceof java.lang.Double) || (number instanceof java.lang.Float)) { double dv = number.doubleValue(); text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatDouble(this.address, dv, fpIter)); } else { long lv = number.longValue(); text = new java.lang.String(libcore.icu.NativeDecimalFormat.formatLong(this.address, lv, fpIter)); } java.text.AttributedString as = new java.text.AttributedString(text); while (fpIter.next()) { java.text.Format.Field field = fpIter.field(); as.addAttribute(field, field, fpIter.start(), fpIter.limit()); } return as.getIterator(); }
public android.net.wifi.IApInterface setupDriverForSoftApMode() { if (!(startHal(false))) { android.util.Log.e(com.android.server.wifi.WifiNative.TAG,   to start HAL for AP mode <START_MOD>return null; <END_MOD>} return <START_MOD>mWificondControl.setupDriverForSoftApMode()<END_MOD>; }
private static native void native_drawRect(<START_MOD>long<END_MOD> nativeCanvas, android.graphics.RectF rect, <START_MOD>long<END_MOD> paint);
private void grantDefaultPermissionExceptions(int userId) { synchronized(mService.mPackages) { mHandler.removeMessages(com.android.server.pm.DefaultPermissionGrantPolicy.MSG_READ_DEFAULT_PERMISSION_EXCEPTIONS); if ((mGrantExceptions) == null) { mGrantExceptions = readDefaultPermissionExceptionsLPw(); } java.util.Set<java.lang.String> permissions = null; final int exceptionCount = mGrantExceptions.size(); for (int i = 0; i < exceptionCount; i++) { java.lang.String packageName = mGrantExceptions.keyAt(i); android.content.pm.PackageParser.Package pkg = getSystemPackageLPr(packageName); java.util.List<com.android.server.pm.DefaultPermissionGrantPolicy.DefaultPermissionGrant> permissionGrants = mGrantExceptions.valueAt(i); final int permissionGrantCount = permissionGrants.size(); for (int j = 0; j < permissionGrantCount; j++) { com.android.server.pm.DefaultPermissionGrantPolicy.DefaultPermissionGrant permissionGrant = permissionGrants.get(j); if (permissions == null) { permissions = new android.util.ArraySet(); } else { permissions.clear(); } permissions.add(permissionGrant.name); grantRuntimePermissionsLPw(pkg, permissions, <START_MOD>permissionGrant.fixed, <END_MOD>false, userId); } } } }
<START_MOD>public void testUnusedHighlighting_EndpointClass() { doTest(); }<END_MOD>
<START_MOD>@java.lang.Override public void end() { if ((eventCount.decrementAndGet()) == 0) { try { com.android.sched.util.log.StatisticOnlyTracer.enable.set(java.lang.Boolean.FALSE); com.android.sched.util.print.DataModelListAdapter<com.android.sched.util.log.stats.Statistic> report = new com.android.sched.util.print.DataModelListAdapter<com.android.sched.util.log.stats.Statistic>(new com.android.sched.util.print.DataModelListAdapter.Converter<com.android.sched.util.log.stats.Statistic>() { @java.lang.Override @javax.annotation.Nonnull public com.android.sched.util.log.StatisticModel apply(com.android.sched.util.log.stats.Statistic data) { return new com.android.sched.util.log.StatisticModel(data); } }); for (final com.android.sched.util.log.stats.Statistic statistic : statisticsById.values()) { if (statistic.isEnabled()) { report.add(statistic); } } java.io.PrintStream stream = com.android.sched.util.config.ThreadConfig.get(com.android.sched.util.log.StatisticOnlyTracer.STREAM).getPrintStream(); com.android.sched.util.print.Printer printer = com.android.sched.util.config.ThreadConfig.get(com.android.sched.util.log.StatisticOnlyTracer.PRINTER).create(stream).addResourceBundles(java.util.ResourceBundle.getBundle(com.android.sched.util.log.stats.Statistic.class.getCanonicalName()), java.util.ResourceBundle.getBundle(com.android.sched.util.log.StatisticOnlyTracer.class.getCanonicalName())); try { printer.print(report); } finally { stream.close(); } } finally { com.android.sched.util.log.StatisticOnlyTracer.enable.set(java.lang.Boolean.TRUE); } } }<END_MOD>
<START_MOD>@javax.annotation.Nonnull private void run(@javax.annotation.Nonnull java.lang.String mainClass, @javax.annotation.Nonnull java.io.File[] dexFiles) throws java.lang.Exception { java.util.List<com.android.jack.test.runner.RuntimeRunner> runnerList = com.android.jack.test.toolchain.AbstractTestTools.listRuntimeTestRunners(null); for (com.android.jack.test.runner.RuntimeRunner runner : runnerList) { junit.framework.Assert.assertEquals(0, runner.runJUnit(new java.lang.String[0], AbstractTestTools.JUNIT_RUNNER_NAME, new java.lang.String[]{ mainClass }, dexFiles)); } }<END_MOD>
@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((<START_MOD>((<END_MOD>"SignalStrength:" +     + (mGsmSignalStrength)) +     + (mGsmBitErrorRate)) +     + (mCdmaDbm)) +     + (mCdmaEcio)) +     + (mEvdoDbm)) +     + (mEvdoEcio)) +     + (mEvdoSnr)) +     + (mLteSignalStrength)) +     + (mLteRsrp)) +     + (mLteRsrq)) +     + (mLteRssnr)) +     + (mLteCqi)) +     + (<START_MOD>mLteOffset)) +     + (<END_MOD>mTdScdmaRscp)) +     + (isGsm ? "gsm|lte" : "cdma"); }
<START_MOD>@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod t) throws java.lang.Exception { for (com.android.jack.ir.ast.JParameter param : t.getParams()) { com.android.jack.ir.sourceinfo.SourceInfo info = param.getSourceInfo(); if (info != (com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN)) { param.setSourceInfo(sourceInfoFactory.create(SourceInfo.UNKNOWN_COLUMN_NUMBER, SourceInfo.UNKNOWN_COLUMN_NUMBER, SourceInfo.UNKNOWN_LINE_NUMBER, SourceInfo.UNKNOWN_LINE_NUMBER, info.getFileName())); } } }<END_MOD>
<START_MOD>@java.lang.Override public com.android.dx.io.instructions.DecodedInstruction withProtoIndex(int newIndex, int newProtoIndex) { return new com.android.dx.io.instructions.InvokePolymorphicRangeDecodedInstruction(getFormat(), getOpcode(), newIndex, getIndexType(), a, registerCount, newProtoIndex); }<END_MOD>
@java.lang.Override @javax.annotation.Nonnull <START_MOD>protected<END_MOD> com.android.sched.util.config.MessageDigestFactory <START_MOD>convert<END_MOD>(java.<START_MOD>security<END_MOD>.<START_MOD>Provider.Service<END_MOD> <START_MOD>service<END_MOD>) { return new com.android.sched.util.config.MessageDigestFactory(<START_MOD>service<END_MOD>); }
public void testCancelSoon() throws java.lang.Exception {<START_MOD> if (!(supportsMultiWindow())) { return; }<END_MOD> doTestDragAndDrop(android.wm.cts.CrossAppDragAndDropTests.CANCEL_SOON, android.wm.cts.CrossAppDragAndDropTests.REQUEST_NONE, null); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DRAG_STARTED, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_EXTRAS, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); }
<START_MOD>private java.lang.String keyManagementToString(int akm) { switch (akm) { case ScanResult.KeyManagement.NONE : return "None"; case ScanResult.KeyManagement.PSK : return "PSK"; case ScanResult.KeyManagement.EAP : return "EAP"; case ScanResult.KeyManagement.FT_EAP : return "FT/EAP"; case ScanResult.KeyManagement.FT_PSK : return "FT/PSK"; case ScanResult.KeyManagement.EAP_SHA256 : return "EAP-SHA256"; case ScanResult.KeyManagement.PSK_SHA256 : return "PSK-SHA256"; default : return "?"; } }<END_MOD>
<START_MOD>public com.android.build.gradle.internal.variant.BaseVariantOutputData getVariantOutputData() { return variantOutputData; }<END_MOD>
@org.junit.Test<START_MOD> @java.lang.Runtime<END_MOD> public void retroLambdaDefaultMethodsTest002() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_002); }
@org.junit.Test public void retroLambdaDefaultMethodsTest019() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_019).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
public java.lang.String getDeviceSoftwareVersion(int <START_MOD>slotId<END_MOD>) { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony == null) return null; try { return telephony.getDeviceSoftwareVersionForSlot(<START_MOD>slotId<END_MOD>, getOpPackageName()); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } }
<START_MOD>public void testJvmtiAgentAppInternal() throws java.lang.Exception { runJvmtiAgentLoadTest((com.android.tradefed.device.ITestDevice device,java.lang.String pkg,java.lang.String apk,java.lang.String abiName) -> { try { java.lang.String setAgentAppCmd = (("cmd activity set-agent-app " + pkg) + " ") + (android.jvmti.cts.JvmtiAttachingHostTest.AGENT); java.lang.String setAgentAppReply = device.executeShellCommand(setAgentAppCmd); if ((setAgentAppReply != null) && (!(setAgentAppReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(setAgentAppReply); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException("Failed running set-agent-app", e); } try { android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, ""); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException("Failed agent-app attaching", e); } }); }<END_MOD>
@java.lang.Override public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong <START_MOD>offset<END_MOD>, long byteCount) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); return os.sendfile(outFd, inFd, <START_MOD>offset<END_MOD>, byteCount); }
@java.lang.Override protected java.security.PublicKey engineGeneratePublic(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec <START_MOD>== null) { throw new java.security.spec.InvalidKeySpecException( == null } if (keySpec <END_MOD>instanceof java.security.spec.RSAPublicKeySpec) { java.security.spec.RSAPublicKeySpec rsaKeySpec = ((java.security.spec.RSAPublicKeySpec) (keySpec)); return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPublicKey(rsaKeySpec); } else if (keySpec instanceof java.security.spec.X509EncodedKeySpec) { java.security.spec.X509EncodedKeySpec x509KeySpec = ((java.security.spec.X509EncodedKeySpec) (keySpec)); try { final org.apache.harmony.xnet.provider.jsse.OpenSSLKey key = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_PUBKEY(x509KeySpec.getEncoded())); return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPublicKey(key); } catch (java.lang.Exception e) { throw new java.security.spec.InvalidKeySpecException(e); } } throw new java.security.spec.InvalidKeySpecException(( use RSAPublicKeySpec or X509EncodedKeySpec; was   + (keySpec.getClass().getName()))); }
void increment(int imp) { imp = (imp < 0) ?   : imp > (<START_MOD>(<END_MOD>com.android.server.notification.NotificationUsageStats.ImportanceHistogram.NUM_IMPORTANCES) <START_MOD>- 1) <END_MOD>? <START_MOD>(<END_MOD>com.android.server.notification.NotificationUsageStats.ImportanceHistogram.NUM_IMPORTANCES<START_MOD>) - 1<END_MOD> : imp; (mCount[imp])++; }
<START_MOD>private static java.lang.String getNexusLabel(com.android.sdklib.devices.Device d) { java.lang.String name = d.getName(); com.android.sdklib.devices.Screen screen = d.getDefaultHardware().getScreen(); float length = ((float) (screen.getDiagonalLength())); return java.lang.String.format(java.util.Locale.US, "%1$s (%3$s\", %2$s)", name, com.android.sdkuilib.internal.widgets.AvdCreationPresenter.getResolutionString(d), java.lang.Float.toString(length)); }<END_MOD>
private synchronized void initializeAccessControl()<START_MOD> throws java.io.IOException, java.util.MissingResourceException<END_MOD> { synchronized(mLock) { if ((mAccessControlEnforcer) == null) { mAccessControlEnforcer = new com.android.se.security.AccessControlEnforcer(this); } <START_MOD>try { <END_MOD>mAccessControlEnforcer.initialize(); } <START_MOD>catch (java.io.IOException e) { mAccessControlEnforcer = null; throw e; <END_MOD>}<START_MOD> catch (java.util.MissingResourceException e) { mAccessControlEnforcer = null; throw e; } } }<END_MOD>
public void <START_MOD>testSetNan_emptyString<END_MOD>() throws java.lang.Exception { java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(); dfs.setNaN(""); java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setDecimalFormatSymbols(dfs); df.format(java.lang.Double.NaN); }
public static int floatConditionNotEqualOne(float f) {<START_MOD> if (Main.doThrow) { throw new java.lang.Error(); }<END_MOD> return (f > 42.0F) == true ? 13 : 54; }
public int waitpid(int pid, <START_MOD>android<END_MOD>.util.MutableInt status, int options) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { return os.waitpid(pid, status, options); }
<START_MOD>public void setAllowObfuscation() { modifier |= com.android.jack.shrob.spec.KeepModifier.ALLOW_OBFUSCATION; }<END_MOD>
public int getCarrierPrivilegeStatus(android.content.pm.PackageManager packageManager, java.lang.String packageName<START_MOD>) { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)<END_MOD>) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : carrierPrivilegeRules.getCarrierPrivilegeStatus(packageManager, packageName); }<START_MOD> else { if ((mUiccProfile) != null) { return mUiccProfile.getCarrierPrivilegeStatus(packageManager, packageName); } else { return android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED; } } }<END_MOD>
private native int preadBytes(java.io.FileDescriptor fd, java.lang.Object buffer, int bufferOffset, int byteCount, long offset) throws <START_MOD>android.os.ErrnoException, <END_MOD>java.io.InterruptedIOException;
<START_MOD>private void runWorkingMobileUsbTethering(android.net.NetworkState upstreamState) { when(mConnectivityManager.isTetheringSupported()).thenReturn(true); when(mUpstreamNetworkMonitor.selectPreferredUpstreamType(any())).thenReturn(upstreamState); mTethering.startTethering(com.android.server.connectivity.TETHERING_USB, null, false); mLooper.dispatchAll(); verify(mUsbManager, times(1)).setCurrentFunction(UsbManager.USB_FUNCTION_RNDIS, false); mTethering.interfaceStatusChanged(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, true); sendUsbBroadcast(true, true, true); mLooper.dispatchAll(); mTetheringDependencies.getUpstreamNetworkMonitorMasterSM().sendMessage(Tethering.TetherMasterSM.EVENT_UPSTREAM_CALLBACK, UpstreamNetworkMonitor.EVENT_ON_AVAILABLE, 0, upstreamState); verify(mUpstreamNetworkMonitor, times(1)).selectPreferredUpstreamType(any()); verify(mUpstreamNetworkMonitor, times(1)).setCurrentUpstream(upstreamState.network); }<END_MOD>
@org.junit.Test public void cmpl_double() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(CMPL_DOUBLE).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), <START_MOD>"jack/jack-tests/src/com/android/jack/DxTestCase.java"<END_MOD>)).compileAndRunTest(); }
public void testAesCbcHmacMd5Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.<START_MOD>getKey(256)<END_MOD>); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, <START_MOD>android.net.cts.IpSecManagerTest.getKey<END_MOD>(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth<START_MOD>, null<END_MOD>, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, <START_MOD>null, <END_MOD>false, 1, true); }
static java.math.BigInt modulus(java.math.BigInt a, java.math.BigInt m) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_nnmod(r.<START_MOD>nativePtr<END_MOD>, a.<START_MOD>nativePtr<END_MOD>, m.<START_MOD>nativePtr<END_MOD>); return r; }
<START_MOD>private boolean isNfcid2AlreadyRegistered(com.android.nfc.cardemulation.RegisteredNfcFServicesCache.UserServices userServices, java.lang.String nfcid2) { for (android.nfc.cardemulation.NfcFServiceInfo anotherService : userServices.services.values()) { if (anotherService.getNfcid2().equals(nfcid2)) { return true; } } return false; }<END_MOD>
<START_MOD>void updateIccAvailability() { com.android.internal.telephony.uicc.IccCardStatus.CardState newState = com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT; if (null == (mUiccController)) { return; } com.android.internal.telephony.uicc.UiccCard newCard = mUiccController.getUiccCard(); if (newCard != null) { newState = newCard.getCardState(); } com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = newState; com.android.internal.telephony.cat.CatLog.d(this, (((("New Card State = " + newState) + " ") + "Old Card State = ") + oldState)); if ((oldState == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_PRESENT)) && (newState != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_PRESENT))) { broadcastCardStateAndIccRefreshResp(newState, null); } else if ((oldState != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_PRESENT)) && (newState == (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_PRESENT))) { mCmdIf.reportStkServiceIsRunning(null); } }<END_MOD>
private void reconstitutionPut(java.util.Hashtable.HashtableEntry<K, V>[] tab, K key, V value) throws java.io.StreamCorruptedException { if (value == null) { throw new java.io.StreamCorruptedException(); } int hash = <START_MOD>sun.misc.Hashing.singleWordWangJenkinsHash<END_MOD>(key); int index = (hash & 2147483647) % (tab.length); for (java.util.Hashtable.HashtableEntry<K, V> e = tab[index]; e != null; e = e.next) { if (((e.hash) == hash) && (e.key.equals(key))) { throw new java.io.StreamCorruptedException(); } } java.util.Hashtable.HashtableEntry<K, V> e = tab[index]; tab[index] = new java.util.Hashtable.HashtableEntry<>(hash, key, value, e); (count)++; }
@java.lang.Override public java.lang.String insnCommentString(com.android.jack.dx.dex.code.DalvInsn insn, boolean noteIndices) { if (noteIndices) { <START_MOD>return<END_MOD> <START_MOD>cstComment<END_MOD>(((com.android.jack.dx.dex.code.DualCstInsn) (insn))); } else { return ""; } }
public static void process(@javax.annotation.Nonnull com.android.jill.Options options) { java.io.File binaryFile = options.getBinaryFile(); com.android.jill.frontend.java.JavaTransformer jt = new com.android.jill.frontend.java.JavaTransformer(com.android.jill.Jill.getVersion().<START_MOD>getVersionName<END_MOD>(), options); if (binaryFile.isFile()) { if (com.android.jill.utils.FileUtils.isJavaBinaryFile(binaryFile)) { java.util.List<java.io.File> javaBinaryFiles = new java.util.ArrayList<java.io.File>(); javaBinaryFiles.add(binaryFile); jt.transform(javaBinaryFiles); } else if (com.android.jill.utils.FileUtils.isJarFile(binaryFile)) { try { jt.transform(new java.util.jar.JarFile(binaryFile)); } catch (java.io.IOException e) { throw new com.android.jill.JillException(( to create jar file   + (binaryFile.getName())), e); } } else { throw new com.android.jill.JillException(( file type:   + (binaryFile.getName()))); } } else { java.util.List<java.io.File> javaBinaryFiles = new java.util.ArrayList<java.io.File>(); com.android.jill.utils.FileUtils.getJavaBinaryFiles(binaryFile, javaBinaryFiles); jt.transform(javaBinaryFiles); } }
void setAdvertiserId(int advertiserId) { this.<START_MOD>mAdvertiserId<END_MOD> = advertiserId; }
@java.lang.Override public void enter() { if (<START_MOD>com.android.server.connectivity.tethering.TetherInterfaceStateMachine.DBG) android.util.Log.d(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, (((   + (mIfaceName)) +   mode:   + (mMode.description))); if (<END_MOD>!(configureIfaceIp(true))) { mLastError = android.net.ConnectivityManager.TETHER_ERROR_IFACE_CFG_ERROR; transitionTo(mInitialState); return; } try { mNMService.tetherInterface(mIfaceName); } catch (java.lang.Exception e) { android.util.Log.e(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, ( Tethering:   + (e.toString()))); mLastError = android.net.ConnectivityManager.TETHER_ERROR_TETHER_IFACE_ERROR; transitionTo(mInitialState); return; } if (!(mIPv6TetherSvc.start())) { android.util.Log.e(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG,   to start IPv6TetheringInterfaceServices } if (com.android.server.connectivity.tethering.TetherInterfaceStateMachine.DBG) android.util.Log.d(com.android.server.connectivity.tethering.TetherInterfaceStateMachine.TAG, (   + (mIfaceName))); mTetherController.notifyInterfaceStateChange(mIfaceName, this, IControlsTethering.STATE_TETHERED, mLastError); }
public void <START_MOD>testIsGroupingUsed<END_MOD>() { assertFalse(new java.text.DecimalFormat("####.##").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("######.######").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("000000.000000").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("######.000000").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("000000.######").isGroupingUsed()); assertFalse(new java.text.DecimalFormat(   assertFalse(new java.text.DecimalFormat("$#####.######").isGroupingUsed()); assertFalse(new java.text.DecimalFormat("$$####.######").isGroupingUsed()); assertTrue(new java.text.DecimalFormat("###,####").isGroupingUsed()); }
@org.junit.Test public void testClassImplementsTwoInterfacesWithSameDefenderMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_34).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
public static void main(java.lang.String[] argArray) throws java.io.IOException {<START_MOD> com.android.dx.command.dexer.DxContext context = new com.android.dx.command.dexer.DxContext();<END_MOD> com.android.dx.command.dexer.Main.Arguments arguments = new com.android.dx.command.dexer.Main.Arguments(); arguments.parse(argArray<START_MOD>, context<END_MOD>); int result =<START_MOD> new<END_MOD> com.android.dx.command.dexer.Main<START_MOD>(context)<END_MOD>.run(arguments); if (result != 0) { java.lang.System.exit(result); } }
<START_MOD>public <END_MOD>java.util.List<com.android.ahat<START_MOD>.heapdump<END_MOD>.Site> getChildren() { return new java.util.ArrayList<com.android.ahat.<START_MOD>heapdump.<END_MOD>Site>(mChildren.values()); }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mContentResolver = new android.test.mock.MockContentResolver(mContext); mContentResolver.addProvider(Settings.AUTHORITY, new com.android.internal.util.test.FakeSettingsProvider()); when(mContext.getPackageName()).thenReturn("OffloadControllerTest"); when(mContext.<START_MOD>getApplicationInfo()).thenReturn(mApplicationInfo); when(mContext.<END_MOD>getContentResolver()).thenReturn(mContentResolver); }
public final void testCreateDup() { com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor ved = new com.android.ide.eclipse.adt.internal.editors.layout.descriptors.ViewElementDescriptor("xml", "com.example.MyJavaClass"); com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode uiv = new com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode(ved); com.android.layoutlib.api.ViewInfo lvi = new com.android.layoutlib.api.ViewInfo("name", uiv, 10, 12, 110, 120<START_MOD>, null, null<END_MOD>); com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo cvi = new com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo(lvi); com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy1 = m.create(cvi); com.android.ide.eclipse.adt.internal.editors.layout.gre.NodeProxy proxy2 = m.create(cvi); assertSame(proxy2, proxy1); }
<START_MOD>@java.lang.Override public org.bouncycastle.asn1.x509.AlgorithmIdentifier findEncryptionAlgorithm(org.bouncycastle.asn1.x509.AlgorithmIdentifier id) { id = mDefault.findEncryptionAlgorithm(id); org.bouncycastle.asn1.ASN1ObjectIdentifier oid = id.getAlgorithm(); if (X9ObjectIdentifiers.id_dsa_with_sha1.equals(oid)) { return com.android.apksigner.core.internal.apk.v1.V1SchemeSigner.SignerInfoSignatureAlgorithmFinder.DSA; } return id; }<END_MOD>
@java.lang.Override public void rename(java.lang.String oldPath, java.lang.String newPath) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.rename(oldPath, newPath); }
@java.lang.Override protected boolean stop() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "stop()"); } mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.SHUTDOWN).sendToTarget(); mHandlerThread.quitSafely(); if ((mContactChangeObserver) == null) { android.util.Log.i(com.android.bluetooth.pbap.BluetoothPbapService.TAG,   unregister when receiver it is not registered return true; } unregisterReceiver(mPbapReceiver); getContentResolver().unregisterContentObserver(mContactChangeObserver); mContactChangeObserver = null; return true; }
<START_MOD>public boolean isVolteAvailable(int subId) { try { return getITelephony().isVolteAvailable(subId); } catch (android.os.RemoteException | java.lang.NullPointerException ex) { return false; } }<END_MOD>
private boolean fz(<START_MOD>android.renderscript.RenderScript RS, <END_MOD>com.android.rs.test.<START_MOD>ScriptC_reduce s, int seed, int[] size) { final int inputLen = size[0]; int[] inputArray = createInputArrayInt(inputLen, (seed + 0)); inputArray[new java.util.Random((seed + 1)).nextInt(inputLen)] = 0; final long javaTimeStart = java.lang.System.currentTimeMillis(); final int javaRslt = fz(inputArray); final long javaTimeEnd = java.lang.System.currentTimeMillis(); final long rsTimeStart = java.lang.System.currentTimeMillis(); android.renderscript.Allocation inputAllocation = android.renderscript.Allocation.createSized(<END_MOD>RS, <START_MOD>android.renderscript.Element.I32(RS), inputArray.length); final long copyTimeStart = java.lang.System.currentTimeMillis(); inputAllocation.copyFrom(inputArray); final long kernelTimeStart = java.lang.System.currentTimeMillis(); final int rsRslt = s.reduce_fz(inputAllocation).get(); final long rsTimeEnd = java.lang.System.currentTimeMillis(); final boolean success = (inputArray[rsRslt]) == 0; java.lang.String status = (success) ? "PASSED" : "FAILED"; if (success) status +=     + (<END_MOD>com.android.rs.test.<START_MOD>UT_reduce.timing.string(javaTimeStart, javaTimeEnd, rsTimeStart, copyTimeStart, kernelTimeStart, rsTimeEnd, inputAllocation)); android<END_MOD>.util.<START_MOD>Log.i(<END_MOD>com.android.rs.test.<START_MOD>UT_reduce.TAG, ((((((((( java input[ + javaRslt) +   ==   + (inputArray[javaRslt])) +   rs input[ + rsRslt) +   ==   + (inputArray[javaRslt])) +     + status));<END_MOD> inputAllocation<START_MOD>.destroy(); return<END_MOD> success; }
<START_MOD>private void checkRoundFloat4() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testRoundFloat4(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRoundFloat4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testRoundFloat4(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRoundFloat4: " + (e.toString()))); } }<END_MOD>
@java.lang.Override public void executeShellCommand(java.lang.String command, com.android.ddmlib.IShellOutputReceiver receiver, int maxTimeToOutputResponse) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException<START_MOD>, java.lang.InterruptedException<END_MOD> { com.android.ddmlib.AdbHelper.executeRemoteCommand(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), command, this, receiver, maxTimeToOutputResponse); }
@java.lang.Override public void setLogicalToPhysicalSlotMapping(int[] physicalSlots, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { java.util.ArrayList<java.lang.Integer> mapping = new java.util.ArrayList<>(); for (int slot : physicalSlots) { mapping.add(new java.lang.Integer(slot)); } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LOGICAL_TO_PHYSICAL_SLOT_MAPPING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setSimSlotsMapping(rr.mSerial, mapping); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setLogicalToPhysicalSlotMapping", e); } } } }
<START_MOD>@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testMultipleDefaults_fromInterfaces_left() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_47).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }<END_MOD>
@org.junit.Test public void <START_MOD>verifyNotificationDisplayedWhenNetworkRecommended<END_MOD>() throws java.lang.Exception { com.android.networkrecommendation.<START_MOD>Util<END_MOD>.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_ENABLED); com.android.networkrecommendation.<START_MOD>Util<END_MOD>.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.DISCONNECTED); <START_MOD>setOpenAccessPoints(3); when(mScoreManager.requestRecommendation(any(android.net.RecommendationRequest.class))).thenReturn(android.net.RecommendationResult.createConnectRecommendation(createFakeConfig())); com.android.networkrecommendation.Util<END_MOD>.sendScanResultsAvailable(mBroadcastReceiver, mContext); com.android.networkrecommendation.<START_MOD>Util<END_MOD>.sendScanResultsAvailable(mBroadcastReceiver, mContext); verify(mNotificationManager, never()).notifyAsUser(any(java.lang.String.class), anyInt(), any(android.app.Notification.class), any(android.os.UserHandle.class)); com.android.networkrecommendation.<START_MOD>Util<END_MOD>.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.SCANNING); com.android.networkrecommendation.<START_MOD>Util<END_MOD>.sendNetworkStateChanged(mBroadcastReceiver, mContext, NetworkInfo.DetailedState.DISCONNECTED); <START_MOD>verify(mNotificationManager, never()).notifyAsUser(any(java.lang.String.class), anyInt(), any(android.app.Notification.class), any(android.os.UserHandle.class)); com.android.networkrecommendation.Util<END_MOD>.sendScanResultsAvailable(mBroadcastReceiver, mContext); verify(<START_MOD>mWifiNotificationHelper).createMainNotification(any(android.net.wifi.WifiConfiguration.class)); verify(<END_MOD>mNotificationManager).notifyAsUser(any(java.lang.String.class), anyInt(), any(android.app.Notification.class), any(android.os.UserHandle.class)); verify(mNotificationManager, never()).cancelAsUser(any(java.lang.String.class), anyInt(), any(android.os.UserHandle.class)); }
<START_MOD>public static native long d2i_X509(byte[] encoding);<END_MOD>
@android.test.suitebuilder.annotation.LargeTest public void testFlagIExistingE() { int iFlags = <START_MOD>android.content.pm.<END_MOD>PackageManager.INSTALL_EXTERNAL; int rFlags = (<START_MOD>android.content.pm.<END_MOD>PackageManager.INSTALL_INTERNAL) | (<START_MOD>android.content.pm.<END_MOD>PackageManager.INSTALL_REPLACE_EXISTING); installFromRawResource("install.apk", R.raw.install, iFlags, false, false, (-1), (-1)); installFromRawResource("install.apk", R.raw.install, rFlags, true, false, (-1), (-1)); }
<START_MOD>private com.android.monkeyrunner.easy.By getSelector(org.python.core.ArgParser ap, int i) { return ((com.android.monkeyrunner.easy.By) (ap.getPyObject(0).__tojava__(com.android.monkeyrunner.easy.By.class))); }<END_MOD>
<START_MOD>@org.junit.Test public void testRecoverFromZipCorruptionStressTest() throws java.lang.Exception { java.lang.Thread startServices = new java.lang.Thread() { @java.lang.Override public void run() { startServices(); } }; startServices.start(); for (int i = 0; i < 7; i++) { java.lang.Thread.sleep(1000); tamperAllExctractedZips(); } startServices.join(); try { waitServicesCompletion(); } catch (java.util.concurrent.TimeoutException e) { } killServices(); checkRecover(); }<END_MOD>
public void testDateTimeKeyListener() { final android.text.method.DateTimeKeyListener dateTimeKeyListener = android.text.method.DateTimeKeyListener.getInstance(); mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(dateTimeKeyListener); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); assertEquals("", mTextView.getText().toString()); mInstrumentation.sendStringSync("1"); assertEquals("1", mTextView.getText().toString()); mInstrumentation.sendStringSync("2"); assertEquals("12", mTextView.getText().toString()); int keyCode = android.text.method.cts.TextMethodUtils.getUnacceptedKeyCode(DateTimeKeyListener.CHARACTERS); if ((-1) != keyCode) { sendKeys(keyCode); assertEquals(<START_MOD>"12"<END_MOD>, mTextView.getText().toString()); } mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(null); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); assertEquals(<START_MOD>"12"<END_MOD>, mTextView.getText().toString()); mInstrumentation.sendStringSync("1"); assertEquals(<START_MOD>"12", mTextView.getText().toString()); }<END_MOD>
<START_MOD>@org.junit.Test public void testAuthenticateServer() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF3802A0009000"); when(mMockTm.getDeviceId()).thenReturn("987654321012345"); com.android.internal.telephony.uicc.euicc.Asn1Node result = mEuiccCard.authenticateServer("A1B2C3-X4Y5Z6", com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(160).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(161).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(162).build(), com.android.internal.telephony.uicc.euicc.Asn1Node.newBuilder(163).build()); assertEquals("BF3802A000", result.toHex()); verifyStoreData(channel, ("BF382D" + (((((((("A000" + "A100") + "A200") + "A300") + "A023") + "800D4131423243332D583459355A36") + "A112800489674523") + "A100") + "82088967452301214305"))); }<END_MOD>
<START_MOD>public static void setRandomSeed(long seed) { java.lang.Math.INSTANCE.setSeed(seed); }<END_MOD>
<START_MOD>public void testForName_withProviderWithRecursiveCall() throws java.lang.Exception { libcore.java.nio.charset.FakeCharsetProvider.setDelegate(new org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharsetProviderWithRecursiveCall()); try { java.nio.charset.Charset.forName("poop"); } catch (java.nio.charset.UnsupportedCharsetException expected) { } finally { libcore.java.nio.charset.FakeCharsetProvider.clearDelegate(); } }<END_MOD>
<START_MOD>@java.lang.Override public boolean isValidParent(@javax.annotation.CheckForNull com.android.jack.ir.ast.JNode parent) { throw new java.lang.AssertionError(); }<END_MOD>
private boolean installTest() throws com.android.tradefed.device.DeviceNotAvailableException { if (!(createRemoteDir(com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY))) { com.android.tradefed.log.LogUtil.CLog.e(( not create directory for native tests:   + (com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY))); return false; } java.io.File nativeExe = new java.io.File(mCtsBuild.getTestCasesDir(), mExeName); if (!(nativeExe.exists())) { com.android.tradefed.log.LogUtil.CLog.e(( test not found:   + nativeExe)); return false; } java.<START_MOD>lang.String<END_MOD> devicePath = <START_MOD>(<END_MOD>(com.android.cts.tradefed.testtype.GeeTest.NATIVE_TESTS_DIRECTORY<START_MOD>) + "/") + (mExeName); if (!(mDevice.pushFile(nativeExe<END_MOD>, devicePath))) { com.android.tradefed.log.LogUtil.CLog.e( to push native test to device return false; } return true; }
void getTotalNumOfItems(byte[] bdaddr, com.android.bluetooth.avrcp.MediaController mediaController) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, <START_MOD>"getTotalNumOfItems"<END_MOD>); java.util.List<android.media.session.MediaSession.QueueItem> <START_MOD>items = mNowPlayingList; if (items<END_MOD> != null) { mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_NO_ERROR, 0, <START_MOD>items<END_MOD>.size()); <START_MOD>return; }<END_MOD> if (mediaController == null) { android.util.Log.e(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG,   <START_MOD>= null, sending no available players response mMediaInterface.getItemAttrRsp(bdaddr, AvrcpConstants.RSP_NO_AVBL_PLAY, null); return; } items = mediaController.getQueue(); if (items == null) {<END_MOD> mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.<START_MOD>RSP_NO_ERROR<END_MOD>, 0, <START_MOD>1); } mNowPlayingList = items; mMediaInterface.getTotalNumOfItemsRsp(bdaddr, AvrcpConstants.RSP_NO_ERROR, <END_MOD>0<START_MOD>, items<END_MOD>.size()); }
public void testGetContentType() throws java.io.IOException { assertEquals(<START_MOD>"text/rtf"<END_MOD>, getContentType("test.rtf")); assertEquals("application/msword", getContentType("test.doc")); assertEquals(<START_MOD>"content/unknown"<END_MOD>, getContentType("test.htx")); assertEquals(<START_MOD>"text/xml"<END_MOD>, getContentType("test.xml")); assertEquals("text/plain", <START_MOD>new libcore<END_MOD>.net.<START_MOD>url<END_MOD>.<START_MOD>FileURLConnection(new java<END_MOD>.<START_MOD>net<END_MOD>.<START_MOD>URL("file:///"))<END_MOD>.getContentType()); }
synchronized boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.<START_MOD>d<END_MOD>(com.android.bluetooth.hid.HidDevService.TAG, ((( device= + device) +   error= + error)); if (!(checkDevice(device))) { <START_MOD>android.util.Log.w(com.android.bluetooth.hid.HidDevService.TAG,   host device not match <END_MOD>return false; } return reportErrorNative(error); }
@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { super.widgetSelected(e); if (mProjectButton.getSelection()) { setListElements(mProjectResources.getResources(mResourceType)); <START_MOD>mNewButton.setEnabled(true); <END_MOD>} }
private static void verify(com.android.apksig.util.DataSource beforeApkSigningBlock, java.nio.ByteBuffer apkSignatureSchemeV2Block, com.android.apksig.util.DataSource centralDir, java.nio.ByteBuffer eocd<START_MOD>, int maxSdkVersion<END_MOD>, com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result) throws java.io.IOException, java.security.NoSuchAlgorithmException { java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> contentDigestsToVerify = new java.util.HashSet<>(1); com.android.apksig.internal.apk.v2.V2SchemeVerifier.parseSigners(apkSignatureSchemeV2Block, contentDigestsToVerify, <START_MOD>maxSdkVersion, <END_MOD>result); if (result.containsErrors()) { return; } com.android.apksig.internal.apk.v2.V2SchemeVerifier.verifyIntegrity(beforeApkSigningBlock, centralDir, eocd, contentDigestsToVerify, <START_MOD>maxSdkVersion, <END_MOD>result); if (!(result.containsErrors())) { result.verified = true; } }
@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (!(o instanceof com.android.sdklib.devices.Hardware)) { return false; } com.android.sdklib.devices.Hardware hw = ((com.android.sdklib.devices.Hardware) (o)); return ((((((((((((((((mScreen.equals(hw.getScreen())) && (mNetworking.equals(hw.getNetworking()))) && (mSensors.equals(hw.getSensors()))) && ((mMic) == (hw.hasMic()))) && (mCameras.equals(hw.getCameras()))) && ((mKeyboard) == (hw.getKeyboard()))) && ((mNav) == (hw.getNav()))) && (mRam.equals(hw.getRam()))) && ((mButtons) == (hw.getButtonType()))) && (mInternalStorage.equals(hw.getInternalStorage()))) && (mRemovableStorage.equals(hw.getRemovableStorage()))) && (mCpu.equals(hw.getCpu()))) && (mGpu.equals(hw.getGpu()))) && (mAbis.equals(hw.getSupportedAbis()))) && (mUiModes.equals(hw.getSupportedUiModes()))) && ((mPluggedIn) == (hw.getChargeType()))) && ((((<START_MOD>mSkinPath<END_MOD>) != null) && (<START_MOD>mSkinPath.equals(hw.getSkinPath<END_MOD>()))) || (((<START_MOD>mSkinPath<END_MOD>) == null) && ((hw.<START_MOD>getSkinPath<END_MOD>()) == null))); }
public static void <START_MOD>assertEqual<END_MOD>(boolean actual, boolean expected) throws java.lang.AssertionError { if (actual != expected) { throw new java.lang.AssertionError((((( != Expected ( + actual) +   !=   + expected) + ")")); } }
private <START_MOD>long<END_MOD> <START_MOD>normalizeSnapshotTime(long<END_MOD> <START_MOD>timeMs)<END_MOD> <START_MOD>{ return <END_MOD>(<START_MOD>timeMs / (<END_MOD>com.android.server.connectivity.<START_MOD>NetdEventListenerService<END_MOD>.<START_MOD>METRICS_SNAPSHOT_SPAN_MS))<END_MOD> <START_MOD>*<END_MOD> <START_MOD>(<END_MOD>com.android.server.connectivity.<START_MOD>NetdEventListenerService<END_MOD>.<START_MOD>METRICS_SNAPSHOT_SPAN_MS<END_MOD>); }
<START_MOD>public java.lang.String getTid() { return mTid; }<END_MOD>
private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType<START_MOD>, android.os.Handler handler) { if (callback == null) { throw new java.lang.IllegalArgumentException( NetworkCallback } if ((need == null) && (action != (android.net.ConnectivityManager.REQUEST))) { throw new java.lang.IllegalArgumentException( NetworkCapabilities } final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); }<END_MOD> return <START_MOD>request; }<END_MOD>
static void freeNativeStorage(int nativeDataPtr) { java.lang.System.out.println((   + nativeDataPtr)); <START_MOD>Main.freeNativeStoragePrinted = true; <END_MOD>}
private synchronized com.android.utils.Pair<com.android.builder.internal.compiler.PreDexCache.Item, java.lang.Boolean> getItem(@com.android.annotations.NonNull java.io.File inputFile, @com.android.annotations.NonNull java.io.File outFile, @com.android.annotations.NonNull com.android.sdklib.BuildToolInfo buildToolInfo) throws java.io.IOException { com.android.builder.internal.compiler.PreDexCache.Key itemKey = com.android.builder.internal.compiler.PreDexCache.Key.of(inputFile, buildToolInfo.getRevision()); com.android.builder.internal.compiler.PreDexCache.Item item = mMap.get(itemKey); boolean newItem = <START_MOD>false; if (<END_MOD>item == null<START_MOD>) { com.android.builder.internal.compiler.PreDexCache.StoredItem storedItem = mStoredItems.get(itemKey)<END_MOD>; if (<START_MOD>storedItem != null) { java.io.File dexFile = storedItem.getOutputFile(); if ((dexFile.isFile()) && (storedItem.getSourceHash().equals(com.google.common.io.Files.hash(inputFile, com.google.common.hash.Hashing.sha1())))) { item = new com.android.builder.internal.compiler.PreDexCache.Item(inputFile, dexFile, new java.util.concurrent.CountDownLatch(1)); item.getLatch().countDown(); } } if (<END_MOD>item == null) { item = new com.android.builder.internal.compiler.PreDexCache.Item(inputFile, outFile, new java.util.concurrent.CountDownLatch(1)); <START_MOD>newItem = true; } <END_MOD>mMap.put(itemKey, item); } return com.android.utils.Pair.of(item, newItem); }
public void testFileInputStream() throws java.lang.Exception { java.io.File f = new java.io.File(<START_MOD>"/dev/zero"<END_MOD>); recorder.clear(); java.io.FileInputStream fis = new java.io.FileInputStream(f); recorder.expectAndClear("onReadFromDisk"); fis.read(new byte[4], 0, 4); recorder.expectAndClear("onReadFromDisk"); fis.read(); recorder.expectAndClear("onReadFromDisk"); fis.skip(1); recorder.expectAndClear("onReadFromDisk"); fis.close(); }
<START_MOD>@java.lang.Override public java.math.BigInteger getPrivateExponent() { return delegate.getPrivateExponent(); }<END_MOD>
public void unregisterListener() { if ((mTestSensorEventListener) == null) { android.util.Log.w(android.hardware.cts.helpers.TestSensorManager.LOG_TAG,   listener registered, returning. return; } <START_MOD>mTestSensorEventListener.onTestStopped(); <END_MOD>mSensorManager.unregisterListener(mTestSensorEventListener, mEnvironment.getSensor()); mTestSensorEventListener.assertEventsReceivedInHandler(); mTestSensorEventListener = null; }
public static com.android.ddmlib.EmulatorConsole getConsole(com.android.ddmlib.IDevice d) { java.lang.Integer port = com.android.ddmlib.EmulatorConsole.getEmulatorPort(d.getSerialNumber()); if (port == null) { return null; } com.android.ddmlib.EmulatorConsole console = com.android.ddmlib.EmulatorConsole.<START_MOD>retrieveConsole<END_MOD>(port); if (!(console.<START_MOD>checkConnection<END_MOD>())) { com.android.ddmlib.EmulatorConsole.<START_MOD>removeConsole<END_MOD>(console.mPort); console = null; } return console; }
<START_MOD>public static com.android.bluetooth.avrcp.Metadata toMetadata(android.media.browse.MediaBrowser.MediaItem item) { if (item == null) { return com.android.bluetooth.avrcp.Util.empty_data(); } android.os.Bundle bundle = com.android.bluetooth.avrcp.Util.descriptionToBundle(item.getDescription()); if (com.android.bluetooth.avrcp.Util.DEBUG) { for (java.lang.String key : bundle.keySet()) { android.util.Log.e(com.android.bluetooth.avrcp.Util.TAG, ("toMetadata: MediaItem: ContainsKey: " + key)); } } com.android.bluetooth.avrcp.Metadata ret = com.android.bluetooth.avrcp.Util.bundleToMetadata(bundle); ret.mediaId = item.getMediaId(); return ret; }<END_MOD>
<START_MOD>@java.lang.SuppressWarnings("ConstantConditions") @java.lang.Override protected void textChanged(javax.swing.event.DocumentEvent e) { if ((myDefaultDirectoryName.equals(myDirectoryName.getText())) || ((myDirectoryName.getText().length()) == 0)) { java.lang.String projectDescription = myRepositoryURL.getProjectDescription(); if (((myRepositoryURL) != null) && (!(com.google.api.client.repackaged.com.google.common.base.Strings.isNullOrEmpty(projectDescription)))) { myDefaultDirectoryName = projectDescription.replaceAll(WizardConstants.INVALID_FILENAME_CHARS, ""); myDefaultDirectoryName = myDefaultDirectoryName.replaceAll("\\s", ""); } else { myDefaultDirectoryName = ""; } myDirectoryName.setText(myDefaultDirectoryName); } updateButtons(); }<END_MOD>
<START_MOD>private void checkCopysignFloat4Float4() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testCopysignFloat4Float4(inX, out); verifyResultsCopysignFloat4Float4(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testCopysignFloat4Float4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testCopysignFloat4Float4(inX, out); verifyResultsCopysignFloat4Float4(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testCopysignFloat4Float4: " + (e.toString()))); } }<END_MOD>
public void testSampleHprof() throws java.lang.Exception { java.io.File file = new java.io.File(java.lang.ClassLoader.getSystemResource("dialer.android-hprof").getFile()); mSnapshot = new com.android.tools.perflib.heap.analysis.HprofParser(new com.android.tools.perflib.heap.io.MemoryMappedFileBuffer(file)).parse(); mSnapshot.computeDominators(); assertEquals(42911, mSnapshot.getReachableInstances().size()); com.android.tools.perflib.heap.analysis.Instance instance = mSnapshot.<START_MOD>findInstance<END_MOD>(-1326579808); assertEquals(Snapshot.SENTINEL_ROOT, instance.getImmediateDominator()); int appIndex = mSnapshot.getHeapIndex(mSnapshot.getHeap("app")); int zygoteIndex = mSnapshot.getHeapIndex(mSnapshot.getHeap("zygote")); com.android.tools.perflib.heap.analysis.ClassObj htmlParser = mSnapshot.findClass("android.text.Html$HtmlParser"); assertEquals(116492, htmlParser.getRetainedSize(zygoteIndex)); assertEquals(0, htmlParser.getRetainedSize(appIndex)); com.android.tools.perflib.heap.analysis.ClassObj activityThread = mSnapshot.findClass("android.app.ActivityThread"); assertEquals(813, activityThread.getRetainedSize(zygoteIndex)); assertEquals(576, activityThread.getRetainedSize(appIndex)); }
<START_MOD>@java.lang.Override public void onNfcFServicesUpdated(int userId, java.util.List<android.nfc.cardemulation.NfcFServiceInfo> services) { mT3tIdentifiersCache.onServicesUpdated(userId, services); mPreferredNfcFServices.onServicesUpdated(); }<END_MOD>
private android.content.pm.PackageInfo generatePackageInfoFromSettingsLPw(java.lang.String packageName, int flags, int userId) { if (!(com.android.server.pm.PackageManagerService.sUserManager.exists(userId))) return null; com.android.server.pm.PackageSetting ps = mSettings.mPackages.get(packageName); if (ps != null) { android.content.pm.PackageParser.Package pkg = ps.pkg; if (pkg == null) { if ((flags & (android.content.pm.PackageManager.GET_UNINSTALLED_PACKAGES)) == 0) { return null; } pkg = new android.content.pm.PackageParser.Package(packageName); pkg.applicationInfo.packageName = packageName; pkg.applicationInfo.flags = (ps.pkgFlags) | (android.content.pm.ApplicationInfo.FLAG_IS_DATA_ONLY); pkg.applicationInfo.publicSourceDir = ps.resourcePathString; pkg.applicationInfo.sourceDir = ps.codePathString; pkg.applicationInfo.dataDir = getDataPathForPackage(packageName, 0).getPath(); pkg.applicationInfo.nativeLibraryDir = ps.nativeLibraryPathString; <START_MOD>pkg.applicationInfo.requiredCpuAbiSupport = ps.requiredCpuAbiString; <END_MOD>} return generatePackageInfo(pkg, flags, userId); } return null; }
<START_MOD>@java.lang.Override public java.lang.String getBuildGradleContent() { java.util.List<? extends com.android.build.gradle.integration.common.fixture.app.GradleModule> projectDeps = getProjectDeps(); java.lang.String content = "apply plugin: \'java\'\n" + ("\n" + "dependencies {\n"); for (com.android.build.gradle.integration.common.fixture.app.GradleModule dep : projectDeps) { content += (" compile project('" + (dep.getPath())) + "\')\n"; } content += "}\n"; return content; }<END_MOD>
public boolean connect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (   + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM,   BLUETOOTH ADMIN permission if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { return false; } android.os.ParcelUuid[] featureUuids = device.getUuids(); if ((android.bluetooth.BluetoothUuid.containsAnyUuid(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_UUID)) && (!(android.bluetooth.BluetoothUuid.containsAllUuids(featureUuids, com.android.bluetooth.a2dp.A2dpService.A2DP_SOURCE_SINK_UUIDS)))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG,   does not have <START_MOD>A2DP<END_MOD> Sink UUID return false; } <START_MOD>synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (( connect to   + device) +   : no state machine return false; } <END_MOD>int connectionState = <START_MOD>smConnect<END_MOD>.getConnectionState(); if ((connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) || (connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } <START_MOD>for (com.android.bluetooth.a2dp.A2dpStateMachine smDisconnect : mStateMachines.values()) { if (!(smDisconnect.getDevice().equals(device))) { smDisconnect<END_MOD>.sendMessage(A2dpStateMachine.<START_MOD>DISCONNECT); } } smConnect.sendMessage(A2dpStateMachine.<END_MOD>CONNECT); return true; }<START_MOD> }<END_MOD>
<START_MOD>public java.lang.String getTestName() { return testName; }<END_MOD>
public android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(int subId, java.lang.String AID<START_MOD>, byte p2<END_MOD>) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony != null) return telephony.iccOpenLogicalChannel(subId, AID<START_MOD>, p2<END_MOD>); } catch (android.os.RemoteException ex) { } catch (java.lang.NullPointerException ex) { } return null; }
@java.lang.Override public int compareTo(com.android.server.net.NetworkStatsCollection.Key another) { int res = 0; if (((ident) != null) && ((another.ident) != null)) { res = ident.compareTo(another.ident); } if (res == 0) { res = java.lang.Integer.compare(uid, another.uid); } if (res == 0) { res = java.lang.Integer.compare(set, another.set); } if (res == 0) { res = java.lang.Integer.compare(tag, another.tag); } <START_MOD>if (res == 0) { res = java.lang.Integer.compare(defaultNetwork, another.defaultNetwork); } <END_MOD>return res; }
<START_MOD>@java.lang.Override public void allowAccess(boolean allow) { block.allowAccess(allow); }<END_MOD>
public void seteuid(int euid) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { os.seteuid(euid); }
@com.android.annotations.NonNull public java.util.List<java.lang.Integer> <START_MOD>getLegacyApiLevels<END_MOD>() { return <START_MOD>legacyApiLevels<END_MOD>; }
public com.android.chimpchat.core.IChimpBackend createBackendByName(java.lang.String backendName) { if ("adb".equals(backendName)) { <START_MOD>java.lang.String location = options.get("adbLocation"); if (location == null) { <END_MOD>return new com.android.chimpchat.adb.AdbBackend();<START_MOD> } else { return new com.android.chimpchat.adb.AdbBackend(location); }<END_MOD> } else if ("stub".equals(backendName)) { return new com.android.chimpchat.stub.StubBackend(); } else { return null; } }
@org.junit.Test public void testWificondNullWhenSwitchingToApMode() throws java.lang.Exception { when(mWifiInjector.makeWificond()).thenReturn(null); mWifiStateMachinePrime.enterSoftAPMode(<START_MOD>null<END_MOD>); mLooper.dispatchNext(); assertEquals("SoftAPModeState", mWifiStateMachinePrime.getCurrentMode()); mLooper.dispatchNext(); assertEquals("SoftAPModeState", mWifiStateMachinePrime.getCurrentMode()); }
<START_MOD>@org.junit.Test public void testSplitChainNoSplitDependencies() { android.content.pm.ApplicationInfo ai = createMockApplicationInfo(com.android.server.pm.dex.DexoptUtilsTest.PATH_CLASS_LOADER_NAME, true, false); java.lang.String[] sharedLibrary = new java.lang.String[]{ "a.dex", "b.dex" }; java.lang.String[] contexts = com.android.server.pm.dex.DexoptUtils.getClassLoaderContexts(ai, sharedLibrary); assertEquals(7, contexts.length); assertEquals("PCL[a.dex:b.dex]", contexts[0]); assertEquals("DLC[];PCL[a.dex:b.dex:base.dex]", contexts[1]); assertEquals("DLC[];PCL[a.dex:b.dex:base.dex]", contexts[2]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[3]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[4]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[5]); assertEquals("PCL[];PCL[a.dex:b.dex:base.dex]", contexts[6]); }<END_MOD>
<START_MOD>public static void computeRsqrt(android.renderscript.cts.TestRsqrt.ArgumentsFloatFloat args) { args.ulf = 2; args.ulfRelaxed = 2; args.out = ((float) (java.lang.Math.pow(args.in, (-0.5)))); }<END_MOD>
<START_MOD>public void open() { org.eclipse.swt.widgets.Display display = org.eclipse.swt.widgets.Display.getDefault(); createContents(); postCreate(); mshell.open(); mshell.layout(); while (!(mshell.isDisposed())) { if (!(display.readAndDispatch())) { display.sleep(); } } }<END_MOD>
public static java.lang.String getProperty(java.lang.String name, java.lang.String defaultValue) { java.lang.System.checkPropertyName(name); return java.lang.System.<START_MOD>getUserModifiableProperties<END_MOD>().getProperty(name, defaultValue); }
public final void mergeUnsorted() { getSection(contentsOut).off = out.getPosition(); java.util.List<com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue> all = new java.util.ArrayList<com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue>(); <START_MOD>for (int i = 0; i < (dexes.length); i++) { <END_MOD>all.addAll(readUnsortedValues(<START_MOD>dexes[i], indexMaps[i])); }<END_MOD> java.util.Collections.sort(all); int outCount = 0; for (int i = 0; i < (all.size());) { com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue e1 = all.get((i++)); updateIndex(e1.offset, getIndexMap(e1.source), e1.index, (outCount - 1)); while ((i < (all.size())) && ((e1.compareTo(all.get(i))) == 0)) { com.android.dx.merge.DexMerger.IdMerger<T>.UnsortedValue e2 = all.get((i++)); updateIndex(e2.offset, getIndexMap(e2.source), e2.index, (outCount - 1)); } write(e1.value); outCount++; } getSection(contentsOut).size = outCount; }
@java.lang.Override public void handle(com.android.ahat.Doc doc, com.android.ahat.Query query) throws java.io.IOException { int stackId = query.getInt("stack", 0); int depth = query.getInt("depth", 0); java.lang.String className = query.get("class", null); java.lang.String heapName = query.get("heap", null); com.android.ahat.Site site = mSnapshot.getSite(stackId, depth); java.util.List<com.android.tools.perflib.heap.Instance> insts = new java.util.ArrayList<com.android.tools.perflib.heap.Instance>(); for (com.android.tools.perflib.heap.Instance inst : site.getObjects()) { if (((heapName == null) || (inst.getHeap().getName().equals(heapName))) && ((className == null) || (com.android.ahat.AhatSnapshot.getClassName(inst.getClassObj()).equals(className)))) { insts.add(inst); } } java.util.Collections.sort(insts, com.android.ahat.Sort.defaultInstanceCompare(mSnapshot)); doc.title("Objects"); doc.table(new com.android.ahat.Column("Size", Column.Align.RIGHT), new com.android.ahat.Column("Heap"), new com.android.ahat.Column("Object")); <START_MOD>com.android.ahat.LimitSelector selector = new com.android.ahat.LimitSelector(query, com.android.ahat.ObjectsHandler.OBJECTS_ID, insts.size()); int limit = selector.getSelectedLimit(); java.util.Iterator<com.android.tools.perflib.heap.Instance> iter = insts.iterator(); <END_MOD>for (<START_MOD>int i = 0; (i < limit) && (iter.hasNext()); i++) { <END_MOD>com.android.tools.perflib.heap.Instance inst <START_MOD>= iter.next();<END_MOD> doc.row(com.android.ahat.DocString.format("%,d", inst.getSize()), com.android.ahat.DocString.text(inst.getHeap().getName()), com.android.ahat.Value.render(inst)); } doc.end(); <START_MOD>selector.render(doc); <END_MOD>}
private void testChangeFontScale(java.lang.String activityName, boolean relaunch) throws java.lang.Exception {<START_MOD> java.lang.String logSeparator = clearLogcat();<END_MOD> launchActivity(activityName); final java.lang.String[] waitForActivitiesVisible = new java.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); setFontScale(1.0F); mAmWmState.computeState(mDevice, waitForActivitiesVisible); final int densityDpi = getGlobalDensityDpi(<START_MOD>activityName, logSeparator<END_MOD>); for (float fontScale = 0.85F; fontScale <= 1.3F; fontScale += 0.15F) { logSeparator = clearLogcat(); setFontScale(fontScale); mAmWmState.computeState(mDevice, waitForActivitiesVisible); assertRelaunchOrConfigChanged(activityName, (relaunch ? 1 : 0), (relaunch ?   : 1), logSeparator); assertExpectedFontPixelSize(activityName, android.server.cts.ActivityManagerConfigChangeTests.scaledPixelsToPixels(android.server.cts.ActivityManagerConfigChangeTests.EXPECTED_FONT_SIZE_SP, fontScale, densityDpi), logSeparator); } }
<START_MOD>public com.android.build.gradle.internal.test.fixture.GradleTestProject.Builder fromSample(@com.android.annotations.NonNull java.lang.String project) { projectDir = new java.io.File(com.android.build.gradle.internal.test.fixture.GradleTestProject.Builder.SAMPLE_PROJECT_DIR, project); return this; }<END_MOD>
public boolean connect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM,   BLUETOOTH ADMIN permission if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (   + device)); } if ((getPriority(device)) == (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { <START_MOD>android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (( connect to   + device) +   : PRIORITY_OFF <END_MOD>return false; } if (!(android.bluetooth.BluetoothUuid.isUuidPresent(mAdapterService.getRemoteUuids(device), BluetoothUuid.AudioSink))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (( connect to   + device) +   : Remote does not have A2DP Sink UUID return false; } synchronized(mStateMachines) { <START_MOD>if (!(canConnectToDevice(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (( connect to   + device) +   : too many connected devices return false; } <END_MOD>com.android.bluetooth.a2dp.A2dpStateMachine smConnect = getOrCreateStateMachine(device); if (smConnect == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (( connect to   + device) +   : no state machine return false; } smConnect.sendMessage(A2dpStateMachine.CONNECT); return true; } }
<START_MOD>public void testConnectOverProxy_explicit_http_uses_direct_connection() throws java.lang.Exception { libcore.java.net.FtpURLConnectionTest.CountingProxy countingProxy = libcore.java.net.FtpURLConnectionTest.CountingProxy.start(); try { java.net.Proxy proxy = countingProxy.asProxy(); sun.net.www.protocol.ftp.FtpURLConnection connection = ((sun.net.www.protocol.ftp.FtpURLConnection) (fileUrl.openConnection(proxy))); libcore.java.net.FtpURLConnectionTest.assertContents(connection.getInputStream()); } finally { int numConnections = countingProxy.shutdownAndGetConnectionCount(); assertEquals(0, numConnections); } }<END_MOD>
<START_MOD>@java.lang.Override @javax.annotation.Nonnull public java.lang.String getName() { return zipFile.getName(); }<END_MOD>
<START_MOD>@java.lang.Override public synchronized void reset() throws java.io.IOException { source.reset(); }<END_MOD>
@java.lang.Override public boolean equals(java.lang.Object obj) { if ((obj == null) || ((obj instanceof android.net.NetworkCapabilities) == false)) return false; android.net.NetworkCapabilities that = ((android.net.NetworkCapabilities) (obj)); return (((((<START_MOD>(<END_MOD>equalsNetCapabilities(that<START_MOD>)) && (equalsUnwantedNetCapabilities(that)<END_MOD>)) && (equalsTransportTypes(that))) && (equalsLinkBandwidths(that))) && (equalsSignalStrength(that))) && (equalsSpecifier(that))) && (equalsUids(that)); }
@org.gradle.model.Mutate public void <START_MOD>configureNativeBinary<END_MOD>(org.gradle.platform.base.BinaryContainer binaries, org.gradle.platform.base.ComponentSpecContainer specs, @org.gradle.model.Path("android.ndk") com.android.build.gradle.managed.NdkConfig ndkConfig<START_MOD>, @org.gradle.model.Path("buildDir") final java.io.File buildDir, final com.android.build.gradle.internal.NdkHandler ndkHandler<END_MOD>) { if (!(ndkConfig.getModuleName().isEmpty())) { final org.gradle.nativeplatform.NativeLibrarySpec library = specs.withType(org.gradle.nativeplatform.NativeLibrarySpec.class).get(ndkConfig.getModuleName()); binaries.withType(com.android.build.gradle.model.DefaultAndroidBinary.class, new org.gradle.api.Action<com.android.build.gradle.model.DefaultAndroidBinary>() { @java.lang.Override public void execute(com.android.build.gradle.model.DefaultAndroidBinary binary) { java.util.Collection<org.gradle.nativeplatform.SharedLibraryBinarySpec> nativeBinaries = com.android.build.gradle.model.NdkComponentModelPlugin.getNativeBinaries(library, binary.getBuildType(), binary.getProductFlavors()); binary.getNativeBinaries().addAll(nativeBinaries); <START_MOD>for (org.gradle.nativeplatform.SharedLibraryBinarySpec nativeBin : nativeBinaries) { com.android.build.gradle.ndk.internal.NdkConfiguration.configureBinary(nativeBin, buildDir, binary.getMergedNdkConfig(), ndkHandler); } } }); } }<END_MOD>
public boolean startWpsRegistrar(java.lang.String bssidStr, java.lang.String pin) {<START_MOD> if ((!(android.text.TextUtils.isEmpty(bssidStr))) || (!(android.text.TextUtils.isEmpty(pin)))) return false;<END_MOD> return startWpsRegistrar(com.android.server.wifi.util.NativeUtil.macAddressToByteArray(bssidStr), pin); }
private void testForCaptivePortal() {<START_MOD> if (com.android.captiveportallogin.CaptivePortalLoginActivity.NO_AUTOCLOSE) { return; }<END_MOD> new java.lang.Thread(new java.lang.Runnable() { public void run() { try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { } java.net.HttpURLConnection urlConnection = null; int httpResponseCode = 500; try { urlConnection = ((java.net.HttpURLConnection) (mNetwork.openConnection(mUrl))); urlConnection.setInstanceFollowRedirects(false); urlConnection.setConnectTimeout(com.android.captiveportallogin.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setReadTimeout(com.android.captiveportallogin.CaptivePortalLoginActivity.SOCKET_TIMEOUT_MS); urlConnection.setUseCaches(false); if ((mUserAgent) != null) { urlConnection.setRequestProperty("User-Agent", mUserAgent); } java.lang.String requestHeader = urlConnection.getRequestProperties().toString(); urlConnection.getInputStream(); httpResponseCode = urlConnection.getResponseCode(); if (com.android.captiveportallogin.CaptivePortalLoginActivity.DBG) { android.util.Log.d(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, ((((((( at   + (mUrl)) +   ret= + httpResponseCode) +   request= + requestHeader) +   headers= + (urlConnection.getHeaderFields()))); } } catch (java.io.IOException e) { } finally { if (urlConnection != null) urlConnection.disconnect(); } if (httpResponseCode == 204) { done(com.android.captiveportallogin.CaptivePortalLoginActivity.Result.DISMISSED); } } }).start(); }
<START_MOD>int blend() { float r = ((dstR) * (srcA)) + ((1 - (dstA)) * (srcR)); float g = ((dstG) * (srcA)) + ((1 - (dstA)) * (srcG)); float b = ((dstB) * (srcA)) + ((1 - (dstA)) * (srcB)); float a = srcA; return pack(a, r, g, b); }<END_MOD>
@org.junit.Test public void neg_float() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(NEG_FLOAT).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), <START_MOD>"jack/jack-tests/src/com/android/jack/DxTestCase.java"<END_MOD>)).compileAndRunTest(); }
<START_MOD>private boolean areStreamsClosed() { boolean streamsClosed = true; synchronized(openedStreams) { for (com.android.sched.util.stream.QueryableStream streams : openedStreams) { streamsClosed &= streams.isClosed(); } } return streamsClosed; }<END_MOD>
@java.lang.Override public boolean equals(java.lang.Object other) { if ((this) == other) { return true; } if (!(other instanceof android.telephony.CellIdentityLte)) { return false; } android.telephony.CellIdentityLte o = ((android.telephony.CellIdentityLte) (other)); return ((((((<START_MOD>((<END_MOD>mMcc) == (o.mMcc)) && ((mMnc) == (o.mMnc))) && ((mCi) == (o.mCi))) && ((mPci) == (o.mPci))) && ((mTac) == (o.mTac))) && ((mEarfcn) == (o.mEarfcn))<START_MOD>) && (mAlphaLong.equals(o.mAlphaLong))) && (mAlphaShort.equals(o.mAlphaShort))<END_MOD>; }
private void notifyInterfaceLinkStateChanged(java.lang.String iface, boolean up) { <START_MOD>invokeForAllObservers(new<END_MOD> <START_MOD>com<END_MOD>.<START_MOD>android.server.NetworkManagementService.CallbackInvocation<END_MOD>() { <START_MOD>@java.lang.Override public void call(android.net.INetworkManagementEventObserver o) throws android.os.RemoteException<END_MOD> { <START_MOD>o<END_MOD>.interfaceLinkStateChanged(iface, up); } }); }
<START_MOD>public java.lang.String prettyName(java.lang.String name) { if ((name != null) && ((name.length()) > 0)) { name = (java.lang.Character.toUpperCase(name.charAt(0))) + (name.substring(1).replace('_', ' ')); } return name; }<END_MOD>
<START_MOD>public static void assertSSLSocketFactory(javax.net.ssl.SSLSocketFactory sslSocketFactory) { libcore.java.security.StandardNames.assertDefaultCipherSuites(sslSocketFactory.getDefaultCipherSuites()); libcore.java.security.StandardNames.assertSupportedCipherSuites(sslSocketFactory.getSupportedCipherSuites()); libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertContainsAll("Unsupported default cipher suites", sslSocketFactory.getSupportedCipherSuites(), sslSocketFactory.getDefaultCipherSuites()); javax.net.ssl.SSLSocket sslSocket; try { sslSocket = ((javax.net.ssl.SSLSocket) (sslSocketFactory.createSocket())); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertSSLSocket(sslSocket); }<END_MOD>
<START_MOD>public static final java.lang.Runnable childZygoteInit(int targetSdkVersion, java.lang.String[] argv, java.lang.ClassLoader classLoader) { final com.android.internal.os.RuntimeInit.Arguments args = new com.android.internal.os.RuntimeInit.Arguments(argv); return com.android.internal.os.RuntimeInit.findStaticMain(args.startClass, args.startArgs, classLoader); }<END_MOD>
@java.lang.Override public void onQueueChanged(java.util.List<android.media.session.MediaSession.QueueItem> queue) { if (queue == null) { android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG,   received null queue return; } <START_MOD>final com.android.bluetooth.avrcp.Avrcp.AvrcpMessageHandler handler = mHandler; if (handler == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) <END_MOD>android.util.Log.<START_MOD>d(com.android.bluetooth.avrcp.Avrcp.TAG,   is already null return; } android.util.Log.<END_MOD>v(com.android.bluetooth.avrcp.Avrcp.TAG, ( NowPlaying list changed, Queue Size =   + (queue.size()))); <START_MOD>handler<END_MOD>.sendEmptyMessage(com.android.bluetooth.avrcp.Avrcp.MSG_NOW_PLAYING_CHANGED_RSP); }
@java.lang.Override public void hangup() throws com.android.internal.telephony.CallStateException { synchronized(com.android.internal.telephony.sip.SipPhone.class) { if (com.android.internal.telephony.sip.SipPhone.SipConnection.SCN_DBG) <START_MOD>{ if (com.android.internal.telephony.sip.SipPhone.DBG_BUILD) { <END_MOD>log(((((( conn= + (mPeer.getUriString())) +     + (mState)) +   on phone   + (getPhone().getPhoneName()))); <START_MOD>} else { log((((   + (mState)) +   on phone   + (getPhone().getPhoneName()))); } } <END_MOD>if (!(mState.isAlive())) return; try { android.net.sip.SipAudioCall sipAudioCall = mSipAudioCall; if (sipAudioCall != null) { sipAudioCall.setListener(null); sipAudioCall.endCall(); } } catch (android.net.sip.SipException e) { throw new com.android.internal.telephony.CallStateException((   + e)); } finally { mAdapter.onCallEnded((((mState) == (Call.State.INCOMING)) || ((mState) == (Call.State.WAITING)) ? android.telephony.DisconnectCause.INCOMING_REJECTED : android.telephony.DisconnectCause.LOCAL)); } } }
public void resetSapProxy() { synchronized(mSapProxyLock) { <START_MOD>releaseSapProxy(); <END_MOD>mSapProxy = null; } }
private static boolean checkKeyPresence(com.android.manifmerger.MergingReport.Builder mergingReport, com.android.manifmerger.XmlElement xmlElement) { com.android.manifmerger.ManifestModel.NodeKeyResolver nodeKeyResolver = xmlElement.getType().getNodeKeyResolver(); <START_MOD>com.google.common.collect.ImmutableList<java.lang.String> keyAttributesNames = nodeKeyResolver.getKeyAttributesNames(); <END_MOD>if (((<START_MOD>keyAttributesNames.size()) > 0<END_MOD>) && (com.google.common.base.Strings.isNullOrEmpty(xmlElement.getKey()))) { <START_MOD>java.lang.String message = ((keyAttributesNames.size()) > 1) ? java.lang.String.format( one of '%1$s' key attribute on element %2$s at %3$s com.google.common.base.Joiner.on(',').join(keyAttributesNames), xmlElement.getId(), xmlElement.printPosition()) : java.lang.String.format( '%1$s' key attribute on element %2$s at %3$s keyAttributesNames.get(0), xmlElement.getId(), xmlElement.printPosition()); <END_MOD>mergingReport.addError(<START_MOD>message<END_MOD>); return false; } return true; }
<START_MOD>public void setRenderer(com.android.build.gradle.internal.AndroidAsciiReportRenderer renderer) { this.mRenderer = renderer; }<END_MOD>
<START_MOD>private void visit(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Node node) { if ((node.getNodeType()) == (org.w3c.dom.Node.TEXT_NODE)) { java.lang.String text = node.getNodeValue(); check(context, node, text); } else { org.w3c.dom.NodeList children = node.getChildNodes(); for (int i = 0, n = children.getLength(); i < n; i++) { visit(context, children.item(i)); } } }<END_MOD>
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession t) throws java.lang.Exception { try { com.android.jack.<START_MOD>ir<END_MOD>.<START_MOD>ConditionnalStructurePrinter<END_MOD> visitor = new com.android.jack.<START_MOD>ir<END_MOD>.<START_MOD>ConditionnalStructurePrinter<END_MOD>(<START_MOD>stream<END_MOD>); visitor.accept(t.getTypesToEmit()); } finally { stream.close(); } }
public boolean setPasskey(android.bluetooth.BluetoothDevice device, boolean accept, int len, byte[] passkey) { if (!(com.android.bluetooth.Utils.<START_MOD>checkCallerAllowManagedProfiles<END_MOD>(<START_MOD>mService<END_MOD>))) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG,   - Not allowed for non-active user return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.setPasskey(device, accept, len, passkey); }
<START_MOD>public void write(java.io.OutputStream out) throws java.io.IOException { @java.lang.SuppressWarnings("IOResourceOpenedButNotSafelyClosed") java.io.DataOutputStream dataOut = new java.io.DataOutputStream(out); try { dataOut.writeBoolean(isBinary); dataOut.writeBoolean(isStrict); dataOut.writeUTF(myOldBuild); dataOut.writeUTF(myNewBuild); dataOut.writeInt(myActions.size()); for (com.intellij.updater.PatchAction each : myActions) { int key; java.lang.Class clazz = each.getClass(); if (clazz == (com.intellij.updater.CreateAction.class)) { key = com.intellij.updater.Patch.CREATE_ACTION_KEY; } else if (clazz == (com.intellij.updater.UpdateAction.class)) { key = com.intellij.updater.Patch.UPDATE_ACTION_KEY; } else if (clazz == (com.intellij.updater.UpdateZipAction.class)) { key = com.intellij.updater.Patch.UPDATE_ZIP_ACTION_KEY; } else if (clazz == (com.intellij.updater.DeleteAction.class)) { key = com.intellij.updater.Patch.DELETE_ACTION_KEY; } else if (clazz == (com.intellij.updater.ValidateAction.class)) { key = com.intellij.updater.Patch.VALIDATE_ACTION_KEY; } else { throw new java.lang.RuntimeException(("Unknown action " + each)); } dataOut.writeInt(key); each.write(dataOut); } } finally { dataOut.flush(); } }<END_MOD>
@java.lang.Override public void run() { java.lang.Module module = com.intellij.openapi.module.ModuleManager.getInstance(project).findModuleByName(dialog.getModuleName()); <START_MOD>final com.intellij.execution.RunManagerEx runManager = com.intellij.execution.RunManagerEx.getInstanceEx(project); final com.intellij.execution.RunnerAndConfigurationSettings settings = runManager.createRunConfiguration(module.getName(), com.google.gct.idea.appengine.run.AppEngineRunConfigurationType.getInstance().getFactory()); final com.google.gct.idea.appengine.run.AppEngineRunConfiguration configuration = ((com.google.gct.idea.appengine.run.AppEngineRunConfiguration) (settings.getConfiguration())); configuration.setModule(module); configuration.setWarPath(new java.io.File(moduleRoot, "build/exploded-app").getAbsolutePath()); configuration.setSdkPath(new java.io.File(java.lang.System.getProperty("user.home"), "/.gradle/appengine-sdk/appengine-java-sdk-1.8.7").getAbsolutePath()); configuration.setServerPort("8080"); runManager.addConfiguration(settings, false); <END_MOD>com.intellij.facet.FacetManager facetManager = com.intellij.facet.FacetManager.getInstance(module); com.intellij.facet.ModifiableFacetModel model = facetManager.createModifiableModel(); }
public void reorient() { final int rot = mDisplay.getRotation(); for (int i = 0; i < 4; i++) { mRotatedViews[i].setVisibility(View.GONE); } mCurrentView = mRotatedViews[rot]; mCurrentView.setVisibility(View.VISIBLE); mDeadZone = ((com.android.systemui.statusbar.policy.DeadZone) (mCurrentView.findViewById(R.id.deadzone))); mBarTransitions.init(mVertical); setDisabledFlags(mDisabledFlags, true); setMenuVisibility(mShowMenu, true); if (com.android.systemui.statusbar.phone.NavigationBarView.DEBUG) { android.util.Log.d(com.android.systemui.statusbar.phone.NavigationBarView.TAG, ( rot= + (mDisplay.getRotation()))); } <START_MOD>if ((mDelegateHelper) != null) { mDelegateHelper.setSwapXY(((mContext.getResources().getConfiguration().orientation) == (android.content.res.Configuration.ORIENTATION_LANDSCAPE))); } <END_MOD>setNavigationIconHints(mNavigationIconHints, true); }
<START_MOD>private java.security.cert.X509Certificate findCert(javax.security.auth.x500.X500Principal subj, android.security.net.config.DirectoryCertificateSource.CertSelector selector) { java.lang.String hash = getHash(subj); for (int index = 0; true; index++) { java.lang.String fileName = (hash + ".") + index; if (isCaRemoved(fileName)) { continue; } if (!(new java.io.File(mCaDir, fileName).exists())) { break; } java.security.cert.X509Certificate cert = readCertificate(fileName); if (selector.match(cert)) { return cert; } } return null; }<END_MOD>
@java.lang.Override public void answer(java.lang.String callId<START_MOD>, android.telecom.Logging.Session.Info sessionInfo<END_MOD>) {<START_MOD> android.telecom.Log.startExternalSession(sessionInfo, android.telecom.ConnectionService.SESSION_ANSWER); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = android.telecom.Log.createSubsession();<END_MOD> mHandler.obtainMessage(android.telecom.ConnectionService.MSG_ANSWER, <START_MOD>args<END_MOD>).sendToTarget(); }<START_MOD> finally { android.telecom.Log.endSession(); } }<END_MOD>
@java.lang.Override public void interfaceRemoved(java.lang.String interfaze) { synchronized(this) { if ((interfaze.equals(mInterface)) && ((jniCheck(interfaze)) == 0)) { mStatusIntent = null; <START_MOD>mNetworkCapabilities.setAllowedUids(<END_MOD>null<START_MOD>)<END_MOD>; mConfig = null; mInterface = null; if ((mConnection) != null) { mContext.unbindService(mConnection); mConnection = null; agentDisconnect(); } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } } } }
@java.lang.Override public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add("name", mName).add("debuggable", mDebuggable).add("debugJniBuild", mDebugJniBuild).add("packageNameSuffix", mPackageNameSuffix).add("versionNameSuffix", mVersionNameSuffix).add("runProguard", mRunProguard).add("zipAlign", mZipAlign).<START_MOD>add<END_MOD>(<START_MOD>"signingKeystore", mSigningKeystore<END_MOD>).toString(); }
<START_MOD>@org.junit.Test public void testStateTransition_AudioOnToAudioDisconnecting_StackAudioDisconnecting() { setUpAudioOnState(); reset(mHeadsetStateMachine); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_DISCONNECTING, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.AudioDisconnecting.class)); verify(mHeadsetService, never()).sendBroadcastAsUser(any(android.content.Intent.class), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }<END_MOD>
<START_MOD>@org.junit.Test public void wifiNotEnabled_wifiApStateIsNotDisabled() { when(mWifiManager.getConfiguredNetworks()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_WIFI_CONFIGURATION, com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_WIFI_CONFIGURATION_EXTERNAL)); when(mWifiManager.getScanResults()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_SCAN_RESULT)); mWifiWakeupController.mContentObserver.onChange(true); com.android.networkrecommendation.Util.sendConfiguredNetworksChanged(mBroadcastReceiver, mContext); com.android.networkrecommendation.Util.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_DISABLED); com.android.networkrecommendation.Util.sendWifiApStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_AP_STATE_ENABLED); com.android.networkrecommendation.Util.sendScanResultsAvailable(mBroadcastReceiver, mContext); verifyZeroInteractions(mWifiWakeupNetworkSelector); verify(mWifiManager, never()).setWifiEnabled(true); }<END_MOD>
public void testAesCbcHmacSha1Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.<START_MOD>getKey(256)<END_MOD>); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, <START_MOD>android.net.cts.IpSecManagerTest.getKey<END_MOD>(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth<START_MOD>, null<END_MOD>, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, <START_MOD>null, <END_MOD>false, 1, true); }
<START_MOD>protected void setPngCruncher(@com.android.annotations.NonNull com.android.ide.common.internal.PngCruncher pngCruncher) { this.mPngCruncher = pngCruncher; }<END_MOD>
<START_MOD>@javax.annotation.Nonnull private com.android.jack.test.toolchain.JackBasedToolchain getToolchain(boolean isApiTest) { if (isApiTest) { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeList = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(1); excludeList.add(com.android.jack.test.toolchain.JackCliToolchain.class); return com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class, excludeList); } else { return com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); } }<END_MOD>
<START_MOD>@javax.annotation.Nonnull com.android.jack.test.toolchain.JackBasedToolchain addMetaDir(@javax.annotation.Nonnull java.io.File metaDir) { metaImport.add(metaDir); return this; }<END_MOD>
@java.lang.Override java.util.List<com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod>> getBuilderRequirements() { java.util.List<com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod>> builderRequirements = super.getBuilderRequirements(); com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod> brokenTestPredicate = com.android.internal.util.Predicates.not(new android.test.suitebuilder.annotation.HasAnnotation(dalvik.annotation.BrokenTest.class)); builderRequirements.add(brokenTestPredicate); <START_MOD>com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod> featurePredicate = new com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod>() { public boolean apply(android.test.suitebuilder.TestMethod t) { java.util.Set<java.lang.String> requiredFeatures = new java.util.HashSet<java.lang.String>(); <END_MOD>if (<START_MOD>(t.getAnnotation(android.annotation.cts.RequiredFeature.class)) != null) { android.annotation.cts.RequiredFeature annotation = t.getAnnotation(android.annotation.cts.RequiredFeature.class); java.util.Collections.addAll(requiredFeatures, annotation.value()); } android.util.Log.e(android.test.InstrumentationCtsTestRunner.TAG, ((( method:   + (t.getName())) +   Required features:   + requiredFeatures)); return true; } }; builderRequirements.add(featurePredicate); if (<END_MOD>!(singleTest)) { com.android.internal.util.Predicate<android.test.suitebuilder.TestMethod> sideEffectPredicate = com.android.internal.util.Predicates.not(new android.test.suitebuilder.annotation.HasAnnotation(dalvik.annotation.SideEffect.class)); builderRequirements.add(sideEffectPredicate); } return builderRequirements; }
public static java.lang.CharSequence getRelativeDateTimeString(android.content.Context c, long time, long minResolution, long transitionResolution, int flags) { if (<START_MOD>(flags<END_MOD> <START_MOD>& (((android.text.format.DateUtils.FORMAT_SHOW_TIME) |<END_MOD> (android.text.format.DateUtils.<START_MOD>FORMAT_12HOUR<END_MOD>)) <START_MOD>|<END_MOD> (android.text.format.DateUtils.<START_MOD>FORMAT_24HOUR)<END_MOD>)) <START_MOD>==<END_MOD> (android.text.format.DateUtils.FORMAT_SHOW_TIME)) { <START_MOD>flags |= (android<END_MOD>.<START_MOD>text<END_MOD>.<START_MOD>format.DateFormat.is24HourFormat(c))<END_MOD> <START_MOD>?<END_MOD> android.text.format.DateUtils.<START_MOD>FORMAT_24HOUR<END_MOD> <START_MOD>:<END_MOD> android.text.format.DateUtils.<START_MOD>FORMAT_12HOUR<END_MOD>; } return <START_MOD>libcore.icu.RelativeDateTimeFormatter.getRelativeDateTimeString(time, minResolution, transitionResolution, flags)<END_MOD>; }
<START_MOD>@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(@javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent, @javax.annotation.Nonnull com.android.sched.vfs.VPath path) { return null; }<END_MOD>
<START_MOD>@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent arg0) { onRefresh(true); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String toString() { java.lang.StringBuilder res = new java.lang.StringBuilder(); res.append("[ImsServiceInfo] name="); res.append(name); res.append(", supportedFeatures=[ "); for (android.util.Pair<java.lang.Integer, java.lang.Integer> feature : mSupportedFeatures) { res.append("("); res.append(feature.first); res.append(","); res.append(feature.second); res.append(") "); } res.append("], supportsEmergency="); res.append(supportsEmergencyMmTel); return res.toString(); }<END_MOD>
<START_MOD>public static org.hamcrest.Matcher<android.view.View> thatFirstMatches(final org.hamcrest.Matcher<android.view.View> viewMatcher) { return new org.hamcrest.TypeSafeMatcher<android.view.View>() { private boolean matched; private android.view.View matchedView; @java.lang.Override protected boolean matchesSafely(android.view.View view) { if (matched) return (matchedView) == view; matched = viewMatcher.matches(view); if (matched) { matchedView = view; } return matched; } @java.lang.Override public void describeTo(org.hamcrest.Description description) { description.appendText("that first matches "); viewMatcher.describeTo(description); } }; }<END_MOD>
<START_MOD>public java.nio.ByteBuffer write() { byte[] encodedLineage = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.encodeSigningCertificateLineage(mSigningLineage); int payloadSize = (4 + 4) + (encodedLineage.length); java.nio.ByteBuffer result = java.nio.ByteBuffer.allocate(payloadSize); result.order(java.nio.ByteOrder.LITTLE_ENDIAN); result.putInt(com.android.apksig.SigningCertificateLineage.MAGIC); result.putInt(mVersion); result.put(encodedLineage); return result; }<END_MOD>
<START_MOD>@org.junit.Test public void workingMobileUsbTethering_DualStack() throws java.lang.Exception { android.net.NetworkState upstreamState = com.android.server.connectivity.TetheringTest.buildMobileDualStackUpstreamState(); runWorkingMobileUsbTethering(upstreamState); verify(mNMService, times(1)).enableNat(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mNMService, times(1)).startInterfaceForwarding(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME, com.android.server.connectivity.TetheringTest.TEST_MOBILE_IFNAME); verify(mRouterAdvertisementDaemon, times(1)).start(); sendIPv6TetherUpdates(upstreamState); verify(mRouterAdvertisementDaemon, times(1)).buildNewRa(any(), notNull()); verify(mNetd, times(1)).tetherApplyDnsInterfaces(); }<END_MOD>
<START_MOD>private static void sendJdwpPacket(com.android.ddmlib.Client client, int type, java.lang.String viewRoot, java.lang.String view, com.android.ddmlib.HandleViewDebug.ViewDumpHandler handler) throws java.io.IOException { int bufLen = 4 + ((viewRoot.length()) * 2); if (view != null) { bufLen += 4 + ((view.length()) * 2); } java.nio.ByteBuffer buf = allocBuffer(bufLen); com.android.ddmlib.JdwpPacket packet = new com.android.ddmlib.JdwpPacket(buf); java.nio.ByteBuffer chunkBuf = getChunkDataBuf(buf); chunkBuf.putInt(viewRoot.length()); putString(chunkBuf, viewRoot); if (view != null) { chunkBuf.putInt(view.length()); putString(chunkBuf, view); } finishChunkPacket(packet, type, chunkBuf.position()); if (handler != null) { client.sendAndConsume(packet, handler); } else { client.sendAndConsume(packet); } }<END_MOD>
public void test_getDisplayCountry_8870289() throws java.lang.Exception { assertEquals( Kong new java.util.Locale("", "HK").getDisplayCountry(java.util.Locale.US)); assertEquals("Macau", new java.util.Locale("", "MO").getDisplayCountry(java.util.Locale.US)); assertEquals("Palestine", new java.util.Locale("", "PS").getDisplayCountry(java.util.Locale.US)); }
private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, <START_MOD>android.renderscript.Float2 javaRslt, android.renderscript.Float2 rsRslt) { final boolean success = ((javaRslt.x) == (rsRslt.x)) && ((javaRslt.y) == (rsRslt.y)); java.lang.String status = (success) ? "PASSED" : "FAILED"; if (success && (t != null)) status +=     + (t.string()); android.util.Log.i(<END_MOD>com.android.rs.test.<START_MOD>UT_reduce.TAG, ((((((((((((testName +   java ( + (javaRslt.x)) +     + (javaRslt.y)) + ")") +   <END_MOD>rs<START_MOD> ( + (rsRslt.x)) +     + (rsRslt.y)) + ")") +     +<END_MOD> status)); return success; }
public static java.lang.String floatToDoubleToIntPrint(float value) {<START_MOD> if (Main.doThrow) { throw new java.lang.Error(); }<END_MOD> double d = ((double) (value)); int i = ((int) (d)); return (("d=" + d) +   i= + i; }
public void testFreed() { java.nio.ByteBuffer <START_MOD>b1<END_MOD> = java.nio.ByteBuffer.allocateDirect(1); java.nio.<START_MOD>ByteBuffer b2 = b1.duplicate(); java.nio.<END_MOD>NioUtils.freeDirectBuffer(<START_MOD>b1); for (java.nio.ByteBuffer b : new java.nio.ByteBuffer[]{ b1, b2 }) {<END_MOD> assertFalse(b.isValid()); try { b.compact(); fail(); } catch (java.lang.IllegalStateException expected) { } try { b.duplicate(); fail(); } catch (java.lang.IllegalStateException expected) { } testFailForPutMethods(b); testFailForAsMethods(b); testFailForGetMethods(b); <START_MOD>java.nio.NioUtils.freeDirectBuffer(b); } }<END_MOD>
@android.test.suitebuilder.annotation.MediumTest public void testDeviceTreeCpuCurrent() throws java.lang.Exception { java.lang.String arch = java.lang.System.getProperty("os.arch"); java.lang.String[] osVersion = java.lang.System.getProperty("os.version").split("\\."); if (((!(arch.contains("arm"))) || ((java.lang.Integer.parseInt(osVersion[0])) < 2)) || (((java.lang.Integer.parseInt(osVersion[0])) == 3) && ((java.lang.Integer.parseInt(osVersion[1])) < 10))) return; final java.io.File f = new java.io.File("/proc/device-tree/cpus"); if (!(f.exists())) return; java.lang.String[] dir = f.list(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File pathname, java.lang.String name) { return (pathname.isDirectory()) && (name.matches("cpu@[0-9]+")); } }); <START_MOD>if (dir == null) return; <END_MOD>for (java.lang.String cpuDir : dir) { java.io.File fCpu = new java.io.File((cpuDir + "/current")); assertTrue(f.canRead()); } }
<START_MOD>public static org.conscrypt.CloseGuard closeGuardGet() { if ((Build.VERSION.SDK_INT) < (Build.VERSION_CODES.ICE_CREAM_SANDWICH)) { return; } return org.conscrypt.CloseGuard.get(); }<END_MOD>
<START_MOD>private boolean isLeanbackOnly() { android.content.pm.PackageManager pm = this.getPackageManager(); return (pm != null) && (pm.hasSystemFeature("android.software.leanback_only")); }<END_MOD>
<START_MOD>@org.junit.Test public void testIsLocallyAssignedAddress() { android.net.MacAddress[] localAddresses = new android.net.MacAddress[]{ new android.net.MacAddress("06:00:00:00:00:00"), new android.net.MacAddress("07:00:d3:56:8a:c4"), new android.net.MacAddress("33:33:aa:bb:cc:dd") }; android.net.MacAddress[] universallyAddresses = new android.net.MacAddress[]{ new android.net.MacAddress("00:01:44:55:66:77"), new android.net.MacAddress("08:00:22:33:44:55") }; for (android.net.MacAddress mac : localAddresses) { java.lang.String msg = (mac.toString()) + " expected to be a locally assigned address"; assertTrue(msg, mac.isLocallyAssigned()); } for (android.net.MacAddress mac : universallyAddresses) { java.lang.String msg = (mac.toString()) + " expected not to be globally unique address"; assertFalse(msg, mac.isLocallyAssigned()); } }<END_MOD>
private void processNoiceReductionEvent(int enable, android.bluetooth.BluetoothDevice device) { if (!(<START_MOD>mAudioParams<END_MOD>.isEmpty())) { if (enable == 1) { <START_MOD>mAudioParams<END_MOD>.put("NREC", 1); } else { <START_MOD>mAudioParams<END_MOD>.put("NREC", 0); } log(((( value for device : + device) +   is:   + (<START_MOD>mAudioParams.get("NREC")))); } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetStateMachine.TAG,   <END_MOD>audioParamNrec<START_MOD> is null   } if ((((mCurrentDevice) != null) && (mCurrentDevice.equals(device))) && ((mAudioState) == (<END_MOD>android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED))) { setAudioParameters(device); } }
@javax.annotation.Nonnull public static com.android.jack.dx.rop.cst.CstMethodRef createMethodRef(@javax.annotation.Nonnull com.android.jack.ir.ast.<START_MOD>JAbstractMethodCall<END_MOD> methodCall) { com.android.jack.dx.rop.cst.CstType definingClass = com.android.jack.backend.dex.rop.RopHelper.getCstType(methodCall.getReceiverType()); java.lang.String signatureWithoutName = com.android.jack.backend.dex.rop.RopHelper.getMethodSignatureWithoutName(methodCall); com.android.jack.dx.rop.cst.CstNat nat = new com.android.jack.dx.rop.cst.CstNat(new com.android.jack.dx.rop.cst.CstString(methodCall.getMethodName()), new com.android.jack.dx.rop.cst.CstString(signatureWithoutName)); com.android.jack.dx.rop.cst.CstMethodRef methodRef = new com.android.jack.dx.rop.cst.CstMethodRef(definingClass, nat); return methodRef; }
public static void removeDeviceForward(com.android.ddmlib.IDevice device) { synchronized(com.android.hierarchyviewer.device.DeviceBridge.devicePortMap) { final java.lang.Integer localPort = com.android.hierarchyviewer.device.DeviceBridge.devicePortMap.get(device); if (localPort != null) { device.removeForward(localPort, Configuration.DEFAULT_SERVER_PORT); com.android.hierarchyviewer.device.DeviceBridge.devicePortMap.remove(device); } } }
<START_MOD>public com.android.sdklib.internal.repository.packages.PreviewVersion getPreviewVersion() { return mPreviewVersion; }<END_MOD>
@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(("com.android.jack.shrob.test" + testNumber)); java.io.File refFolder = new java.io.File(testFolder, "refsSeed"); java.io.File candidateOutputSeeds = com.android.jack.test.toolchain.AbstractTestTools.createTempFile("seeds", ".txt"); java.io.File refOutputSeeds = new java.io.File(refFolder, (("expected-" + flagNumber) + ".txt")); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File seedsFile = addOptionsToFlagsFile(new java.io.File(testFolder, ("proguard.flags" + flagNumber)), testFolder, ( -dontshrink -dontobfuscate -printseeds   + (candidateOutputSeeds.getAbsolutePath()))); toolchain.addProguardFlags(seedsFile); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, "jack")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorSeeds(<START_MOD>candidateOutputSeeds, <END_MOD>refOutputSeeds)); }
<START_MOD>@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JArrayLiteral arrayLiteral) { java.util.List<com.android.jack.ir.ast.JLiteral> values = arrayLiteral.getValues(); java.util.List<com.android.jack.ir.ast.JLiteral> clonedValues = new java.util.ArrayList<com.android.jack.ir.ast.JLiteral>(values.size()); for (com.android.jack.ir.ast.JLiteral literal : values) { clonedValues.add(cloneExpression(literal)); } expression = new com.android.jack.ir.ast.JArrayLiteral(arrayLiteral.getSourceInfo(), clonedValues); return false; }<END_MOD>
<START_MOD>private void checkStepFloat3Float() { android.renderscript.Allocation inEdge = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inEdge, 35, 0.0F, 1.0F); android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInV(inV); script.forEach_testStepFloat3Float(inEdge, out); verifyResultsStepFloat3Float(inEdge, inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testStepFloat3Float: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInV(inV); scriptRelaxed.forEach_testStepFloat3Float(inEdge, out); verifyResultsStepFloat3Float(inEdge, inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testStepFloat3Float: " + (e.toString()))); } }<END_MOD>
<START_MOD>public static int sendto(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, int flags, java.net.InetAddress inetAddress, int port) throws android.os.ErrnoException, java.net.SocketException { return Libcore.os.sendto(fd, buffer, flags, inetAddress, port); }<END_MOD>
<START_MOD>protected boolean canUseMeteredNetwork() throws java.lang.Exception { if (mCm.isActiveNetworkMetered()) { return true; } final android.net.NetworkInfo info = mCm.getActiveNetworkInfo(); assertNotNull("Could not get active network", info); return (info.getType()) == (android.net.ConnectivityManager.TYPE_WIFI); }<END_MOD>
private synchronized <START_MOD>void initMediaPlayersInfoList<END_MOD>() { <START_MOD>mMediaPlayerInfoList.clear(); if ((mMediaSessionManager) ==<END_MOD> null<START_MOD>) {<END_MOD> if (<START_MOD>com.android.bluetooth.avrcp.Avrcp.DEBUG)<END_MOD> android.util.Log.w(com.android.bluetooth.avrcp.Avrcp.TAG,   <START_MOD>no media session manager!<END_MOD> return; } <START_MOD>java.util.List<android.media.session.MediaController> controllers = mMediaSessionManager.getActiveSessions(null); <END_MOD>if (<START_MOD>com.android.bluetooth.avrcp.Avrcp.DEBUG)<END_MOD> android.util.Log.<START_MOD>v<END_MOD>(com.android.bluetooth.avrcp.Avrcp.TAG, ((<START_MOD>   + (controllers.size())) +   controllers for (android.media.session.MediaController controller <END_MOD>: <START_MOD>controllers) { addMediaPlayerInfo(controller)<END_MOD>; } }
@java.lang.Override public <START_MOD>java.lang.String<END_MOD> <START_MOD>getConfigString<END_MOD>(<START_MOD>int item<END_MOD>) throws android.os.RemoteException { return <START_MOD>null<END_MOD>; }
<START_MOD>public void timeSystemShortArrayCopy(int reps) { final int len = arrayLength; char[] src = new char[len]; char[] dst = new char[len]; for (int rep = 0; rep < reps; ++rep) { java.lang.System.arraycopy(src, 0, dst, 0, len); } }<END_MOD>
protected void setUp() throws java.lang.Exception { super.setUp(); <START_MOD>channel1 = java.nio.channels.DatagramChannel.open(); channel2 = java.nio.channels.DatagramChannel.open(); channel1.socket().bind(null); channel2.socket().bind(null); channel1Address = ((java.net.InetSocketAddress) (channel1.socket().getLocalSocketAddress())); channel2Address = ((java.net.InetSocketAddress) (channel2.socket().getLocalSocketAddress())); <END_MOD>this.<START_MOD>datagramSocket1 = new java.net.DatagramSocket(0); datagramSocket1.setReuseAddress(true<END_MOD>); this.<START_MOD>datagramSocket2<END_MOD> = new java.net.<START_MOD>DatagramSocket(<END_MOD>0<START_MOD>); datagramSocket2.setReuseAddress(true); datagramSocket1Address = ((java.net.InetSocketAddress) (<END_MOD>datagramSocket1<START_MOD>.getLocalSocketAddress())); datagramSocket2Address = ((java.net.InetSocketAddress) (<END_MOD>datagramSocket2<START_MOD>.getLocalSocketAddress()))<END_MOD>; }
<START_MOD>public void addProductFlavor(@com.android.annotations.NonNull com.android.builder.ProductFlavor productFlavor, @com.android.annotations.NonNull com.android.builder.SourceSet sourceSet) { if ((mFlavorConfigs) == null) { mFlavorConfigs = new java.util.ArrayList<com.android.builder.ProductFlavor>(); mFlavorSourceSets = new java.util.ArrayList<com.android.builder.SourceSet>(); } mFlavorConfigs.add(productFlavor); mFlavorSourceSets.add(sourceSet); mMergedFlavor = productFlavor.mergeOver(mMergedFlavor); }<END_MOD>
<START_MOD>private void checkOutsideDST(java.util.Calendar cal, java.lang.String description) { java.util.TimeZone timeZone = cal.getTimeZone(); checkOutsideDST(cal, description, timeZone.getRawOffset()); }<END_MOD>
@java.lang.Override public java.lang.String toString() { return <START_MOD>((<END_MOD>(((((((((((((((((("NativeLibraryImpl{" + "name='") + (name)) + '\'') +   toolchainName= + (toolchainName)) + '\'') +   cIncludeDirs= + (cIncludeDirs)) +   cppIncludeDirs= + (cppIncludeDirs)) +   cDefines= + (cDefines)) +   cppDefines= + (cppDefines)) +   cCompilerFlags= + (cCompilerFlags)) +   cppCompilerFlags= + (cppCompilerFlags)) + <START_MOD>  solibSearchPaths= + (solibSearchPaths)) + <END_MOD>'}'; }
private void fillList() { java.lang.String where = ("numeric=\"" + (android.os.SystemProperties.get(TelephonyProperties.PROPERTY_ICC_OPERATOR_NUMERIC, ""))) + "\""; android.database.Cursor<START_MOD> cursor = null; try {<END_MOD> cursor = getContentResolver().query(Telephony.Carriers.CONTENT_URI, new java.lang.String[]{ "_id", "name", "apn", "type" }, where, null, Telephony.Carriers.DEFAULT_SORT_ORDER); <START_MOD>} catch (android.database.SQLException e) { return; } <END_MOD>android.preference.PreferenceGroup apnList = ((android.preference.PreferenceGroup) (findPreference("apn_list"))); apnList.removeAll(); java.util.ArrayList<android.preference.Preference> mmsApnList = new java.util.ArrayList<android.preference.Preference>(); mSelectedKey = getSelectedApnKey(); cursor.moveToFirst(); while (!(cursor.isAfterLast())) { java.lang.String name = cursor.getString(com.android.settings.ApnSettings.NAME_INDEX); java.lang.String apn = cursor.getString(com.android.settings.ApnSettings.APN_INDEX); java.lang.String key = cursor.getString(com.android.settings.ApnSettings.ID_INDEX); java.lang.String type = cursor.getString(com.android.settings.ApnSettings.TYPES_INDEX); com.android.settings.ApnPreference pref = new com.android.settings.ApnPreference(this); pref.setKey(key); pref.setTitle(name); pref.setSummary(apn); pref.setPersistent(false); pref.setOnPreferenceChangeListener(this); boolean selectable = (type == null) || (!(type.equals("mms"))); pref.setSelectable(selectable); if (selectable) { if (((mSelectedKey) != null) && (mSelectedKey.equals(key))) { pref.setChecked(); } apnList.addPreference(pref); } else { mmsApnList.add(pref); } cursor.moveToNext(); } cursor.close(); for (android.preference.Preference preference : mmsApnList) { apnList.addPreference(preference); } }
<START_MOD>public void loadDataFromTemplate() { if (myUpdating) return; myUpdating = true; try { java.lang.Object moduleName = myWizardState.get(NewAppEngineModuleAction.ATTR_MODULE_NAME); if (moduleName == null) { moduleName = myWizardState.get(NewProjectWizardState.ATTR_MODULE_NAME); } if (moduleName != null) { myModuleNameField.setText(moduleName.toString()); } java.lang.Object packageName = myWizardState.get(TemplateMetadata.ATTR_PACKAGE_NAME); if (packageName != null) { myPackageNameField.setText(packageName.toString()); } } finally { myUpdating = false; } }<END_MOD>
public void hangupWaitingOrBackground(android.os.Message result<START_MOD>) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null<END_MOD>) { com.android.internal.telephony.RILRequest rr = <START_MOD>obtainRequest<END_MOD>(com.android.internal.telephony.RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND, result<START_MOD>, mRILDefaultWorkSource<END_MOD>); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); <START_MOD>try { radioProxy<END_MOD>.<START_MOD>hangupWaitingOrBackground<END_MOD>(rr.mSerial); }<START_MOD> catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "hangupWaitingOrBackground", e); } } }<END_MOD>
public static byte[] stringToUtf8Bytes(java.lang.String string<START_MOD>, int utf8Len<END_MOD>) { int len = string.length(); byte[] bytes = new byte[<START_MOD>utf8Len<END_MOD>]; int outAt = 0; for (int i = 0; i < len; i++) { char c = string.charAt(i); if ((c != 0) && (c < 128)) { bytes[<START_MOD>(outAt++)] = ((byte) (c))<END_MOD>; } else if (c < 2048) { bytes[<START_MOD>(outAt++)<END_MOD>] = ((byte) (((c >> 6) & 31) | 192)); bytes[(outAt<START_MOD>++<END_MOD>)] = ((byte) ((c & 63) | 128)); } else { bytes[<START_MOD>(outAt++)<END_MOD>] = ((byte) (((c >> 12) & 15) | 224)); bytes[(outAt<START_MOD>++<END_MOD>)] = ((byte) (((c >> 6) & 63) | 128)); bytes[(outAt<START_MOD>++<END_MOD>)] = ((byte) ((c & 63) | 128)); <START_MOD>} }<END_MOD> return <START_MOD>bytes; }<END_MOD>
public void logError(java.lang.String log)<START_MOD> { if ((mLog) != null) { mLog.error(null,   %1$s log); } else<END_MOD> { synchronized(mLogText) { mLogText.append(   } }<START_MOD> }<END_MOD>
<START_MOD>@org.junit.Test <END_MOD>public void <START_MOD>wrongNegativeColumnIndex<END_MOD>() { <START_MOD>expectedException.expect(java.lang.IllegalArgumentException.class);<END_MOD> android.support.test.espresso.matcher.CursorMatchers.withRowInt((-1), android.support.test.espresso.matcher.CursorMatchersTest.INTEGER_VALUE_MATCHER).matches(cursor); fail( IllegalArgumentException }
<START_MOD>@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.SuiteReturnsCustomTest.class) @org.junit.Test public void testRunner_SuiteReturnsCustomTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().failure("suite", ((("" + "java.lang.IllegalStateException: Unknown suite() result: ") + (vogar.target.junit3.SuiteReturnsCustomTest.CustomTest.class.getName())) + "\n")).completedNormally(); }<END_MOD>
@java.lang.Override public void <START_MOD>connectionReady<END_MOD>(com.android.ims.<START_MOD>ImsManager manager) throws com.android.ims.<END_MOD>ImsException { android.telephony.Rlog.<START_MOD>d<END_MOD>(com.android.internal.telephony.<START_MOD>ImsSmsDispatcher.<END_MOD>TAG,   <START_MOD>connection<END_MOD> <START_MOD>ready.<END_MOD> <START_MOD>setListeners<END_MOD>(); <START_MOD>mIsImsServiceUp<END_MOD> <START_MOD>=<END_MOD> <START_MOD>true<END_MOD>; }
com.android.server.ParcelFileDescriptor updateWallpaperBitmapLocked(java.lang.String name) { if (name == null) name = ""; try { if (!(com.android.server.WallpaperManagerService.WALLPAPER_DIR.exists())) { com.android.server.WallpaperManagerService.WALLPAPER_DIR.mkdir(); android.os.FileUtils.setPermissions(com.android.server.WallpaperManagerService.WALLPAPER_DIR.getPath(), (((android.os.FileUtils.S_IRWXU) | (android.os.FileUtils.S_IRWXG)) | (android.os.FileUtils.S_IXOTH)), (-1), (-1)); } com.android.server.ParcelFileDescriptor fd = com.android.server.ParcelFileDescriptor.open(com.android.server.WallpaperManagerService.WALLPAPER_FILE, ((MODE_CREATE) | (MODE_READ_WRITE))); <START_MOD>android.os.SELinux.restorecon(com.android.server.WallpaperManagerService.WALLPAPER_FILE.getPath()); <END_MOD>mName = name; return fd; } catch (java.io.FileNotFoundException e) { android.util.Slog.w(com.android.server.WallpaperManagerService.TAG,   setting wallpaper e); } return null; }
@java.lang.Override public void onCreate() { android.util.Log.i(com.android.phone.testapps.imstestapp.TestImsService.LOG_TAG,   onCreate mImsRegistration = com.android.phone.testapps.imstestapp.TestImsRegistrationImpl.getInstance(); mTestMmTelFeature = com.android.phone.testapps.imstestapp.TestMmTelFeatureImpl.getInstance(); mTestRcsFeature = new com.android.phone.testapps.imstestapp.TestRcsFeatureImpl(); <START_MOD>mTestImsConfig = new com.android.phone.testapps.imstestapp.TestImsConfigImpl(); <END_MOD>com.android.phone.testapps.imstestapp.TestImsService.mInstance = this; }
<START_MOD>@javax.annotation.Nonnull public static com.android.sched.util.Version getVersion(@javax.annotation.Nonnull java.lang.String appName, @javax.annotation.Nonnull java.lang.ClassLoader loader) throws com.android.sched.util.codec.ParsingException, java.io.IOException { java.lang.String resourceName = appName + (com.android.sched.util.Version.FILE_SUFFIX); java.io.InputStream resourceStream = loader.getResourceAsStream(resourceName); if (resourceStream == null) { throw new java.io.FileNotFoundException(resourceName); } return new com.android.sched.util.Version(resourceStream); }<END_MOD>
<START_MOD>boolean statisified(android<END_MOD>.<START_MOD>net<END_MOD>.<START_MOD>NetworkCapabilities<END_MOD> <START_MOD>capabilities<END_MOD>) { <START_MOD>return this<END_MOD>.<START_MOD>mCapabilities.satisfiedByImmutableNetworkCapabilities<END_MOD>(<START_MOD>capabilities<END_MOD>); }
public void mincore(long address, long byteCount, byte[] vector) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
public int waitpid(int pid, android.util.MutableInt status, int options) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
public boolean hasCarrierPrivilegeRules(<START_MOD>) { synchronized(mLock<END_MOD>) { return ((mCarrierPrivilegeRules) != null) && (mCarrierPrivilegeRules.hasCarrierPrivilegeRules()); }<START_MOD> }<END_MOD>
<START_MOD>@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(com.android.sched.vfs.BaseVDir parent, java.lang.String name) { return vfs.getVFileLocation(parent, name); }<END_MOD>
private void disableWifiIpServingLocked(<START_MOD>java.lang.String ifname, <END_MOD>int apState) { if (com.android.server.connectivity.Tethering.DBG) android.util.Log.d(com.android.server.connectivity.Tethering.TAG, ( WiFi tethering request - AP_STATE= + apState)); <START_MOD>boolean found = false; if (!(android.text.TextUtils.isEmpty(ifname))) { final com.android.server.connectivity.Tethering.TetherState ts = mTetherStates.get(ifname); if (ts != null) { ts.stateMachine.unwanted(); found = true; } } else { <END_MOD>for (int i = 0; i < (mTetherStates.size()); i++) { com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism = mTetherStates.valueAt(i).stateMachine; if ((tism.interfaceType()) == (android.net.ConnectivityManager.TETHERING_WIFI)) { tism.<START_MOD>unwanted(); found = true<END_MOD>; break; } } <START_MOD>} if (!found) { mLog.log(( disabling Wi-Fi IP serving; referenced interface:   + ifname)); } <END_MOD>mWifiTetherRequested = false; }
<START_MOD>public void spawnDescendant(com.android.apksig.SigningCertificateLineage.SignerConfig parent, com.android.apksig.SigningCertificateLineage.SignerConfig child) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException, java.security.cert.CertificateEncodingException { int flags = calculateDefaultFlags(); spawnDescendant(parent, flags, child, flags); }<END_MOD>
public native long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, <START_MOD>android<END_MOD>.<START_MOD>system<END_MOD>.<START_MOD>SendfileOffset<END_MOD> inOffset, long byteCount) throws android.system.ErrnoException;
public void testGetExtendedKeyUsage() throws java.lang.Exception { assertNull(new tests.security.cert.X509Certificate2Test.MyX509Certificate().getExtendedKeyUsage()); java.security.cert.X509Certificate cert = generateCert(tests.security.cert.X509Certificate2Test.CERT_CORRECT); java.util.List<java.lang.String> l = cert.getExtendedKeyUsage(); assertNotNull(l); try { l.clear(); <START_MOD>fail( have thrown <END_MOD>} catch (java.lang.UnsupportedOperationException expected) { } try { l.add("Test"); <START_MOD>fail( have thrown <END_MOD>} catch (java.lang.UnsupportedOperationException expected) { } try { l.remove(0); <START_MOD>fail( have thrown <END_MOD>} catch (java.lang.UnsupportedOperationException expected) { } }
private void checkAndSetNotification(android.net.NetworkInfo networkInfo, java.util.List<android.net.wifi.ScanResult> scanResults) { if (!(mNotificationEnabled)) return; if ((mWifiState) != (android.net.wifi.WifiManager.WIFI_STATE_ENABLED)) return; android.net.NetworkInfo.State state = NetworkInfo.State.DISCONNECTED; if (networkInfo != null) { state = networkInfo.getState(); } if ((state == (NetworkInfo.State.DISCONNECTED)) || (state == (NetworkInfo.State.UNKNOWN))) { <START_MOD>android.net.RecommendationResult result = getOpenNetworkRecommendation<END_MOD>(scanResults<START_MOD>); if ((result<END_MOD> != null) <START_MOD>&& ((result.getWifiConfiguration()) != null)) { mRecommendedNetwork = result.getWifiConfiguration(); if ((++(mNumScansSinceNetworkStateChange))<END_MOD> >= (com.android.networkrecommendation.WifiNotificationController.NUM_SCANS_BEFORE_ACTUALLY_SCANNING)) { <START_MOD>displayNotification(<END_MOD>); } return; } } <START_MOD>removeNotification(); }<END_MOD>
public boolean hasSubId() { return (com.android.phone.SubscriptionInfoHelper.<START_MOD>sSubId<END_MOD>) != (android.<START_MOD>telephony<END_MOD>.<START_MOD>SubscriptionManager<END_MOD>.<START_MOD>INVALID_SUBSCRIPTION_ID<END_MOD>); }
void addZipFile(java.io.File zipFile) throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SealedPackageException { <START_MOD>addZipFile<END_MOD>(<START_MOD>zipFile,<END_MOD> null); }
@java.lang.Override public void iccCloseLogicalChannel(int channel, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_SIM_CLOSE_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) +   channel =   + channel)); } try { radioProxy.iccCloseLogicalChannel(rr.mSerial, channel); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "iccCloseLogicalChannel", e); } } }
@javax.annotation.Nonnull public java.lang.String getPathElementAsString(char separator) { return path.toString().replace(<START_MOD>getSeparator()<END_MOD>, separator); }
public void kill(int pid, int signal) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { os.kill(pid, signal); }
<START_MOD>@java.lang.Override @javax.annotation.Nonnull public final java.lang.String getLibraryExtension() { return ".jack"; }<END_MOD>
@java.lang.Override protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec <START_MOD>== null) { throw new java.security.spec.InvalidKeySpecException( == null } if (keySpec <END_MOD>instanceof java.security.spec.ECPrivateKeySpec) { java.security.spec.ECPrivateKeySpec ecKeySpec = ((java.security.spec.ECPrivateKeySpec) (keySpec)); return new org.apache.harmony.xnet.provider.jsse.OpenSSLECPrivateKey(ecKeySpec); } else if (keySpec instanceof java.security.spec.PKCS8EncodedKeySpec) { java.security.spec.PKCS8EncodedKeySpec pkcs8KeySpec = ((java.security.spec.PKCS8EncodedKeySpec) (keySpec)); try { final org.apache.harmony.xnet.provider.jsse.OpenSSLKey key = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_PKCS8_PRIV_KEY_INFO(pkcs8KeySpec.getEncoded())); return new org.apache.harmony.xnet.provider.jsse.OpenSSLECPrivateKey(key); } catch (java.lang.Exception e) { throw new java.security.spec.InvalidKeySpecException(e); } } throw new java.security.spec.InvalidKeySpecException(( use ECPrivateKeySpec or PKCS8EncodedKeySpec; was   + (keySpec.getClass().getName()))); }
public void run() { android.<START_MOD>renderscript<END_MOD>.RenderScript pRS = android.<START_MOD>renderscript<END_MOD>.RenderScript.create(mCtx); com.android.rs.test.ScriptC_convert s = new com.android.rs.test.ScriptC_convert(pRS); pRS.setMessageHandler(mRsMessage); s.invoke_convert_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }
<START_MOD>@java.lang.Override public synchronized void run(com.android.jack.ir.ast.JDefinedClassOrInterface declaredType) throws java.lang.Exception { if (declaredType.isExternal()) { return; } com.android.jack.analysis.dependency.file.FileDependenciesComputation.Visitor v = new com.android.jack.analysis.dependency.file.FileDependenciesComputation.Visitor(declaredType); v.accept(declaredType); }<END_MOD>
private static java.io.File copyDataToLocalFile(android.content.Context context) { java.io.File <START_MOD>localFile; try { localFile<END_MOD> = <START_MOD>java.io.File.createTempFile("temp", ".zip", context.getFilesDir()); } catch (java.io.IOException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG,   to create local storage file e); return null; } android.os.ParcelFileDescriptor inputFileDescriptor; try { inputFileDescriptor = context.getContentResolver().openFileDescriptor(TimeZoneRulesDataContract.DATA_URI, "r"); if (inputFileDescriptor == null) { throw <END_MOD>new java.io.<START_MOD>FileNotFoundException( returned null } } catch (java.io.FileNotFoundException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ( Unable to open file descriptor + (android.provider.TimeZoneRulesDataContract.DATA_URI)), e); return null; } try (<END_MOD>android.os.ParcelFileDescriptor <START_MOD>pfd<END_MOD> = <START_MOD>inputFileDescriptor;java.io.InputStream fis =<END_MOD> new java.io.<START_MOD>FileInputStream(<END_MOD>pfd<START_MOD>.getFileDescriptor(), false);java.io.FileOutputStream fos<END_MOD> = new java.io.FileOutputStream<START_MOD>(localFile<END_MOD>, false)) { libcore.io.Streams.copy(fis, fos); } catch (java.io.IOException e) { android.util.Log.e(libcore.tzdata.prototype_updater.RulesCheckReceiver.TAG, ( to create asset storage file:   + <START_MOD>localFile<END_MOD>), e); return null; } return <START_MOD>localFile; }<END_MOD>
public void testAesCbcHmacSha512Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.<START_MOD>getKey(256)<END_MOD>); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, <START_MOD>android.net.cts.IpSecManagerTest.getKey<END_MOD>(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, <START_MOD>null, <END_MOD>true, 1, false); <START_MOD>checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); <END_MOD>}
<START_MOD>private static native void mkfifo(java.lang.String path) throws libcore.io.ErrnoException;<END_MOD>
@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVFile createVFile(@javax.annotation.Nonnull com.android.sched.vfs.<START_MOD>MessageDigestFS.MessageDigestVDir<END_MOD> parent, @javax.annotation.Nonnull java.lang.String name) throws com.android.sched.util.file.CannotCreateFileException { return new com.android.sched.vfs.MessageDigestFS.MessageDigestVFile(this, vfs.createVFile(parent<START_MOD>.getWrappedDir()<END_MOD>, name)); }
<START_MOD>public void testNativeUdpSocketPair() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecBaseTest.IPV4_LOOPBACK); android.net.cts.IpSecBaseTest.SocketPair<android.net.cts.IpSecBaseTest.NativeUdpSocket> sockets = android.net.cts.IpSecBaseTest.getNativeUdpSocketPair(local, true); checkSocketPair(sockets.mLeftSock, sockets.mRightSock); }<END_MOD>
<START_MOD>@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public <END_MOD>boolean okToConnect(android.bluetooth.BluetoothDevice device) { <START_MOD>if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (( cannot connect to   + device) +   : quiet mode enabled return false;<END_MOD> }<START_MOD> if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (( cannot connect to   + device) +   : too many connected devices return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE))) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((((( cannot connect to   + device) +   : priority= + priority) +   bondState= + bondState)); return false; } if (priority <= (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, ((( cannot connect to   + device) +   : priority= + priority)); return false; } return true; }<END_MOD>
<START_MOD>private void touchSourceFile(java.io.File... sources) throws java.lang.Exception { java.util.List<java.io.File> files = new java.util.ArrayList<java.io.File>(); for (java.io.File source : sources) { com.android.jack.test.toolchain.AbstractTestTools.getJavaFiles(source, files, false); } if ((files.size()) > 0) { java.io.File fileToTouch = files.get(((files.size()) / 2)); if (!(fileToTouch.setLastModified(java.lang.System.currentTimeMillis()))) { throw new java.lang.AssertionError((("Could not touch file '" + (fileToTouch.getPath())) + "'")); } } }<END_MOD>
<START_MOD>private void checkTgammaFloat3() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testTgammaFloat3(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testTgammaFloat3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testTgammaFloat3(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testTgammaFloat3: " + (e.toString()))); } }<END_MOD>
@java.lang.Override public void addPages(<START_MOD>) { if (mShowWelcomePage<END_MOD>) { mWelcomePage = new com.android.ide.eclipse.adt.internal.welcome.WelcomeWizardPage(); addPage(mWelcomePage); <START_MOD>} <END_MOD>if<START_MOD> ((mShowUsagePage) &&<END_MOD> (!(mStore.isPingOptIn(<START_MOD>)<END_MOD>))) { mUsagePage = new com.android.ide.eclipse.adt.internal.welcome.UsagePermissionPage(); addPage(mUsagePage); } }
<START_MOD>@java.lang.Override public void execute(com.android.build.gradle.managed.BuildType buildType) { com.android.build.gradle.internal.NdkConfigHelper.init(buildType.getNdk()); }<END_MOD>
@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { case com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_NOTIFICATION_REGISTRATION : <START_MOD>if (com.android.bluetooth.map.BluetoothMnsObexClient.V) android.util.Log.v(com.android.bluetooth.map.BluetoothMnsObexClient.TAG, ((( masId:   + (msg.arg1)) +   notfStatus:   + (msg.arg2))); if ((mMnsRecord) != null) { <END_MOD>handleRegistration(msg.arg1, msg.arg2);<START_MOD> } else { if (com.android.bluetooth.map.BluetoothMnsObexClient.D) android.util.Log.d(com.android.bluetooth.map.BluetoothMnsObexClient.TAG,   SDP info not available yet - Cannot Connect. }<END_MOD> break; case com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_SEND_EVENT : sendEventHandler(((byte[]) (msg.obj)), msg.arg1); break; <START_MOD>case com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_SDP_SEARCH_REGISTRATION : notifyMnsSdpSearch(); mMnsLstRegRqst = new com.android.bluetooth.map.BluetoothMnsObexClient.MnsSdpSearchInfo(true, msg.arg1, msg.arg2); android.os.Message msgReg = mHandler.obtainMessage(com.android.bluetooth.map.BluetoothMnsObexClient.MSG_MNS_NOTIFICATION_REGISTRATION, msg.arg1, msg.arg2); if (com.android.bluetooth.map.BluetoothMnsObexClient.V) android.util.Log.v(com.android.bluetooth.map.BluetoothMnsObexClient.TAG, ((( masId:   + (msg.arg1)) +   notfStatus:   + (msg.arg2))); mHandler.sendMessageDelayed(msgReg, MNS_SDP_SEARCH_DELAY); break; <END_MOD>default : break; } }
<START_MOD>private void onVolumeChanged(int type, int volume, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VOLUME_CHANGED); event.valueInt = type; event.valueInt2 = volume; event.device = getDevice(address); sendMessageToService(event); }<END_MOD>
<START_MOD>@java.lang.Override @javax.annotation.Nonnull public com.android.sched.scheduler.ProductionSet getAddedProductions(@javax.annotation.Nonnull com.android.sched.util.config.Config config, @javax.annotation.Nonnull com.android.sched.scheduler.Scheduler scheduler) { com.android.sched.scheduler.ProductionSet set = scheduler.createProductionSet(); if (config.get(CodeCoverage.CODE_COVERVAGE).booleanValue()) { set.add(com.android.jack.coverage.CodeCoverageMetadataFile.class); } return set; }<END_MOD>
public void testAesCbcHmacSha1Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.<START_MOD>getKey(256)<END_MOD>); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, <START_MOD>android.net.cts.IpSecManagerTest.getKey<END_MOD>(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, <START_MOD>null, <END_MOD>true, 1, false); <START_MOD>checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); <END_MOD>}
@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add("name", mName).add("debuggable", mDebuggable<START_MOD>).add("instrumented", mInstrumented<END_MOD>).add("jniDebugBuild", mJniDebugBuild).add("renderscriptDebugBuild", mRenderscriptDebugBuild).add("renderscriptOptimLevel", mRenderscriptOptimLevel).add("packageNameSuffix", mPackageNameSuffix).add("versionNameSuffix", mVersionNameSuffix).add("runProguard", mRunProguard).add("zipAlign", mZipAlign).add("signingConfig", mSigningConfig).toString(); }
private void compileAndUpload() { final java.lang.Runnable startUploading = new java.lang.Runnable() { @java.lang.Override public void run() { com.intellij.openapi.application.ApplicationManager.getApplication().invokeLater(new java.lang.Runnable() { @java.lang.Override public void run() { startUploadingProcess(); } }); } }; <START_MOD>final com.android.tools.idea.gradle.invoker.GradleInvoker invoker = <END_MOD>com.android.tools.idea.gradle.invoker.GradleInvoker.getInstance(myProject)<START_MOD>; final com.android.tools.idea.gradle.invoker.GradleInvoker.AfterGradleInvocationTask deployAfter = new com.android.tools.idea.gradle.invoker.GradleInvoker.AfterGradleInvocationTask() { @java.lang.Override public void execute(@org.jetbrains.annotations.NotNull com.android.tools.idea.gradle.invoker.GradleInvocationResult result) { if (result.isBuildSuccessful()) { startUploading.run(); } invoker.removeAfterGradleInvocationTask(this); } }; invoker.addAfterGradleInvocationTask(deployAfter); invoker.assemble<END_MOD>(new java.lang.Module[]{ myModule }<START_MOD>, GradleInvoker.TestCompileType.NONE); }<END_MOD>
<START_MOD>@org.junit.Test public void testGetVersion() { com.android.jack.Version version = com.android.jack.Jack.getVersion(); assertNotNull(version); assertNotNull(version.getVersion()); assertNotNull(version.getVerboseVersion()); assertNotNull(version.getReleaseName()); assertTrue(((version.getReleaseCode()) > 0)); assertTrue(((version.getSubReleaseCode()) > 0)); if (((version.getBuildId()) == null) || ((version.getCodeBase()) == null)) { assertTrue(((version.getSubReleaseKind()) == (SubReleaseKind.ENGINEERING))); } }<END_MOD>
<START_MOD>public<END_MOD> void <START_MOD>testFormatDouble_maximumFractionDigits(<END_MOD>) { <START_MOD>java.text.DecimalFormat df = new java.text.DecimalFormat("###0.##", new java.text.DecimalFormatSymbols(java.util.Locale.US)); df.setMaximumFractionDigits(3); assertEquals(3, df.getMaximumFractionDigits()); assertEquals("1.235", df.format(1.23456)); df.setMinimumFractionDigits(4); assertEquals(4, df.getMaximumFractionDigits()); assertEquals("456.0000", df.format(456)); df = new java.text.DecimalFormat("##0.#"); df.setMaximumFractionDigits(30); assertEquals("0", df.format(0.0)); assertEquals("-0", df.format((-0.0))); assertEquals("1", df.format(1.0)); assertEquals("-1", df.format((-1.0)<END_MOD>)); }
<START_MOD>private void fatal(java.lang.String msg) { android.util.Log.e(android.net.nsd.NsdManager.TAG, msg); throw new java.lang.RuntimeException(msg); }<END_MOD>
<START_MOD>@java.lang.Override public int hashCode() { int result = ((ssid) == null) ? 0 : ssid.hashCode(); result ^= (((int) (flags)) * 31) + (((int) (auth_bit_field)) >> 8); return result; }<END_MOD>
<START_MOD>java.util.List<org.eclipse.core.resources.IFile> isDependency(org.eclipse.core.resources.IFile file) { java.util.ArrayList<org.eclipse.core.resources.IFile> files = new java.util.ArrayList<org.eclipse.core.resources.IFile>(); for (com.android.ide.eclipse.adt.internal.build.nonjava.NonJavaFileBundle bundle : mFiles.values()) { if (bundle.dependsOn(file)) { files.add(bundle.getSourceFile()); } } return files; }<END_MOD>
<START_MOD>public static void computeMax(android.renderscript.cts.TestMax.ArgumentsFloatFloatFloat args) { args.ulf = 0; args.ulfRelaxed = 0; args.out = ((float) (java.lang.Math.max(args.in, args.in1))); }<END_MOD>
public java.util.Map<java.lang.String, java.lang.Long> digestFiles(java.io.File dir, java.util.List<java.lang.String> ignoredFiles, com.intellij.updater.UpdaterUI ui) throws com.intellij.updater.OperationCancelledException, java.io.IOException { java.util.Map<java.lang.String, java.lang.Long> result = new java.util.<START_MOD>LinkedHashMap<END_MOD><java.lang.String, java.lang.Long>(); java.util.LinkedHashSet<java.lang.String> paths = com.intellij.updater.Utils.collectRelativePaths(dir<START_MOD>, isStrict<END_MOD>); for (java.lang.String each : paths) { if (ignoredFiles.contains(each)) continue; ui.setStatus(each); ui.checkCancelled(); result.put(each, digestFile(new java.io.File(dir, each))); } return result; }
public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, false, 1, true); }
<START_MOD>@java.lang.Override public java.lang.String apply(com.android.sched.util.codec.StringCodec<? extends T> codec) { return codec.getVariableName(); }<END_MOD>
@java.lang.Override public <START_MOD>java.util.List<android.bluetooth.BluetoothDevice><END_MOD> <START_MOD>getConnectedDevices<END_MOD>() { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG, <START_MOD>"getConnectedDevices"<END_MOD>); } com.android.bluetooth.pbap.BluetoothPbapService service = getService(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM); if (service == null) { return <START_MOD>new java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>ArrayList<>(0)<END_MOD>; } return service.<START_MOD>getConnectedDevices<END_MOD>(); }
private void checkUnconnectedUdp(android.net.IpSecTransform transform, java.net.InetAddress local) throws java.lang.Exception { java.io.FileDescriptor udpSocket = android.net.cts.IpSecManagerTest.getBoundUdpSocket(local); int localPort = android.net.cts.IpSecManagerTest.getPort(udpSocket); mISM.applyTransportModeTransform(udpSocket, transform); byte[] <START_MOD>in<END_MOD> = new byte[<START_MOD>android.net.cts.IpSecManagerTest.TEST_DATA<END_MOD>.length]; android.system.Os.sendto(udpSocket, <START_MOD>android.net.cts.IpSecManagerTest.TEST_DATA, 0, android.net.cts.IpSecManagerTest.TEST_DATA.length, 0, local, localPort); android.system.Os.read(udpSocket, in, 0, in.length); assertArrayEquals( <END_MOD>data<START_MOD> did not match. android.net.cts.IpSecManagerTest.TEST_DATA, in); mISM.removeTransportModeTransform(udpSocket, transform<END_MOD>); android.system.Os.close(udpSocket); }
@java.lang.Override public int run(@javax.annotation.Nonnull java.io.PrintStream out, @javax.annotation.Nonnull java.io.PrintStream err, @javax.annotation.Nonnull java.io.File pwd, @javax.annotation.Nonnull com.android.sched.util.config.cli.TokenIterator args) { java.util.List<java.lang.String> commandLineArgs; try { commandLineArgs = buildArgs(args); } catch (java.lang.Exception e) { return ServerExitStatus.FAILURE_USAGE; } com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(commandLineArgs.toArray(new java.lang.String[commandLineArgs.size()])); exec.setErr(err); exec.setOut(out); try { exec.setWorkingDir(pwd, false); } catch (java.io.IOException e) { return ServerExitStatus.FAILURE_USAGE; } try { return exec.run(); } catch (java.lang.Exception e) { <START_MOD>com.android.jack.server.ServerTaskSpawningVM.logger.log(java.util.logging.Level.SEVERE, ( to run command   + commandLineArgs), e); <END_MOD>return ServerExitStatus.FAILURE_UNKNOWN; } }
public static void confirmDeleteThreadDialog(com.android.cellbroadcastreceiver.CellBroadcastListActivity.DeleteThreadListener listener, boolean deleteAll, android.content.Context context) { android.view.View contents = android.view.View.inflate(context, R.layout.delete_broadcast_dialog_view, null); android.widget.TextView msg = ((android.widget.TextView) (contents.findViewById(R.id.message))); msg.setText((deleteAll ? R.string.confirm_delete_all_broadcasts : R.string.confirm_delete_broadcast)); android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(context); builder.setTitle(R.string.confirm_dialog_title).<START_MOD>setIconAttribute(android.R.attr.alertDialogIcon<END_MOD>).setCancelable(true).setPositiveButton(R.string.button_delete, listener).setNegativeButton(R.string.button_cancel, null).setView(contents).show(); }
<START_MOD>public void testThreadStart() { logWriter.println("testThreadStart started"); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); long threadID = getFilteredThreadId(); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.setThreadOnlyThreadStart(threadID); checkReplyPacket(reply, "Failed to set THREAD_START with count modifier"); int requestID = reply.getNextValueAsInt(); assertAllDataRead(reply); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); waitForThreadEvent(JDWPConstants.EventKind.THREAD_START, requestID, threadID); reply = debuggeeWrapper.vmMirror.clearEvent(JDWPConstants.EventKind.THREAD_START, requestID); checkReplyPacket(reply, ("Failed to clear event " + requestID)); logWriter.println("testThreadStart done"); }<END_MOD>
<START_MOD>public void test_SSLSocket_ClientHello_SNI() throws java.lang.Exception { new tests.util.ForEachRunnable<javax.net.ssl.SSLSocketFactory>() { @java.lang.Override protected void run(javax.net.ssl.SSLSocketFactory sslSocketFactory) throws java.lang.Exception { libcore.tlswire.handshake.ClientHello clientHello = captureTlsHandshakeClientHello(sslSocketFactory); libcore.tlswire.handshake.ServerNameHelloExtension sniExtension = ((libcore.tlswire.handshake.ServerNameHelloExtension) (clientHello.findExtensionByType(HelloExtension.TYPE_SERVER_NAME))); assertNotNull(sniExtension); assertEquals(java.util.Arrays.asList("localhost.localdomain"), sniExtension.hostnames); } }.runAllNamed(getSSLSocketFactoriesToTest()); }<END_MOD>
public static android.graphics.Bitmap parseToBnW(byte[] data, int length) { int valueIndex = 0; int width = (data[(valueIndex++)]) & 255; int height = (data[(valueIndex++)]) & 255; int numOfPixels = width * height; int[] pixels = new int[numOfPixels]; int pixelIndex = 0; int bitIndex = 7; byte currentByte = 0; while (pixelIndex < numOfPixels) { if ((pixelIndex % 8) == 0) { currentByte = data[(valueIndex++)]; bitIndex = 7; } pixels[(pixelIndex++)] = com.android.internal.telephony.<START_MOD>uicc.<END_MOD>IccUtils.bitToRGB(((currentByte >> (bitIndex--)) & 1)); } if (pixelIndex != numOfPixels) { android.util.Log.e(com.android.internal.telephony.<START_MOD>uicc.<END_MOD>IccUtils.LOG_TAG,   end and size error } return android.graphics.Bitmap.createBitmap(pixels, width, height, Bitmap.Config.ARGB_8888); }
public void setsockoptGroupSourceReq(java.io.FileDescriptor fd, int level, int option, <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.StructGroupSourceReq value) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { os.setsockoptGroupSourceReq(fd, level, option, value); }
public byte[] generateVerityTreeRootHash(com.android.apksig.util.DataSource <START_MOD>beforeApkSigningBlock, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd<END_MOD>) throws java.io.IOException { <START_MOD>if (((beforeApkSigningBlock.size()) % (com.android.apksig.internal.util.VerityTreeBuilder.CHUNK_SIZE)) != 0) { throw new java.lang.IllegalStateException( Signing Block is not page aligned } com.android.apksig.util.DataSource modifiedEocd = com.android.apksig.util.DataSources.asDataSource(com.android.apksig.internal.zip.EocdRecord.createWithCentralDirectoryFieldHidden(eocd.getByteBuffer(0, ((<END_MOD>int<START_MOD>) (eocd.size()))))<END_MOD>); <START_MOD>return generateVerityTreeRootHash(new<END_MOD> com.android.apksig.internal.util.<START_MOD>ChainedDataSource(beforeApkSigningBlock, centralDir, modifiedEocd)<END_MOD>); }
public native java.net.SocketAddress getsockname(java.io.FileDescriptor fd) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
@java.lang.Override public void removeForward(int localPort, java.lang.String remoteSocketName, com.android.ddmlib.DeviceUnixSocketNamespace namespace) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException<START_MOD>, java.lang.InterruptedException<END_MOD> { com.android.ddmlib.AdbHelper.removeForward(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), this, java.lang.String.format("tcp:%d", localPort), java.lang.String.format("%s:%s", namespace.getType(), remoteSocketName)); }
public void assertUnreleasedResourceCount(java.lang.Object owner, int expectedCount) { <START_MOD>if (leakageDetectionDisabledForTest) { throw new java.lang.IllegalStateException(( not work when leakage detection has been disabled; remove the   +   from the test method } <END_MOD>libcore.junit.util.ResourceLeakageDetector.FINALIZER_CHECKER.accept(owner, expectedCount); }
public static void execApplication(java.lang.String invokeWith, java.lang.String niceName, int targetSdkVersion, java.io.FileDescriptor pipeFd, java.lang.String[] args) {<START_MOD> com.android.internal.os.WrapperInit.sendPidToParent(pipeFd);<END_MOD> java.lang.StringBuilder command = new java.lang.StringBuilder(invokeWith); command.append( /system/bin/app_process /system/bin --application if (niceName != null) { command.append( '--nice-name=").append(niceName).append("' } command.append( com.android.internal.os.WrapperInit   command.append(targetSdkVersion); com.android.internal.os.Zygote.appendQuotedShellArgs(command, args); com.android.internal.os.Zygote.execShell(command.toString()); }
@com.android.internal.annotations.VisibleForTesting public static java.lang.String getStringForCarrierIdTableCreation(java.lang.String tableName) { return (((((((((((((((((((((((( TABLE   + tableName) +   INTEGER PRIMARY KEY, + (<START_MOD>CarrierId<END_MOD>.All.MCCMNC)) +   TEXT NOT NULL, + (<START_MOD>CarrierId<END_MOD>.All.GID1)) +   TEXT, + (<START_MOD>CarrierId<END_MOD>.All.GID2)) +   TEXT, + (<START_MOD>CarrierId<END_MOD>.All.PLMN)) +   TEXT, + (<START_MOD>CarrierId<END_MOD>.All.IMSI_PREFIX_XPATTERN)) +   TEXT, + (<START_MOD>CarrierId<END_MOD>.All.SPN)) +   TEXT, + (<START_MOD>CarrierId<END_MOD>.All.APN)) +   TEXT, + (<START_MOD>CarrierId<END_MOD>.All.ICCID_PREFIX)) +   TEXT, + (android.provider.Telephony.<START_MOD>CarrierId<END_MOD>.NAME)) +   TEXT, + (android.provider.Telephony.<START_MOD>CarrierId.CARRIER_ID<END_MOD>)) +   INTEGER DEFAULT -1, +   ( + (android.text.TextUtils.join(   com.android.providers.telephony.CarrierIdProvider.CARRIERS_ID_UNIQUE_FIELDS))) + "));"; }
private android.<START_MOD>renderscript<END_MOD>.Float2 pack_f2(float[] val) { assert (val.length) == 2; return new android.<START_MOD>renderscript<END_MOD>.Float2(val[0], val[1]); }
@java.lang.Override public void updatePublish(int clientId, int sessionId, android.net.wifi.aware.PublishConfig publishConfig) { enforceAccessPermission(); enforceChangePermission(); if (publishConfig == null) { throw new java.lang.IllegalArgumentException( must not be null } publishConfig.assertValid(mStateManager.getCharacteristics()); <START_MOD>if ((publishConfig.mPublishCount) != 0) { enforceConnectivityInternalPermission(); } <END_MOD>int uid = getMockableCallingUid(); enforceClientValidity(uid, clientId); if (com.android.server.wifi.aware.WifiAwareServiceImpl.VDBG) { android.util.Log.v(com.android.server.wifi.aware.WifiAwareServiceImpl.TAG, ((((((( uid= + uid) +   clientId= + clientId) +   sessionId= + sessionId) +   config= + publishConfig)); } mStateManager.updatePublish(clientId, sessionId, publishConfig); }
public android.net.NetworkStats readNetworkStatsSummaryDev() throws java.io.IOException { if (mUseBpfStats) return readNetworkStatsIfaceDev(); final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 6); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(mStatsXtIfaceAll)); while (reader.hasMoreData()) { entry.iface = reader.nextString(); entry.uid = <START_MOD>android.net.NetworkStats.<END_MOD>UID_ALL; entry.set = <START_MOD>android.net.NetworkStats.<END_MOD>SET_ALL; entry.tag = <START_MOD>android.net.NetworkStats.<END_MOD>TAG_NONE; final boolean active = (reader.nextInt()) != 0; entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if (active) { entry.rxBytes += reader.nextLong(); entry.rxPackets += reader.nextLong(); entry.txBytes += reader.nextLong(); entry.txPackets += reader.nextLong(); } stats.addValues(entry); reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException( parsing stats e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
<START_MOD>@org.junit.Test public void testHandleWpsEventSuccess() { mWifiMonitor.registerHandler(com.android.server.wifi.WifiMonitorTest.WLAN_IFACE_NAME, WifiMonitor.WPS_SUCCESS_EVENT, mHandlerSpy); mWifiMonitor.handleWpsSuccessEvent(com.android.server.wifi.WifiMonitorTest.WLAN_IFACE_NAME); mLooper.dispatchAll(); org.mockito.ArgumentCaptor<android.os.Message> messageCaptor = org.mockito.ArgumentCaptor.forClass(android.os.Message.class); verify(mHandlerSpy).handleMessage(messageCaptor.capture()); assertEquals(WifiMonitor.WPS_SUCCESS_EVENT, messageCaptor.getValue().what); }<END_MOD>
public static long UShr60And7(long arg) {<START_MOD> if (Main.doThrow) { throw new java.lang.Error(); }<END_MOD> return (arg >>> 60) & 7; }
private void initiateDeviceOwnerProvisioning(android.content.Intent intent) { if (!(mParams.startedByTrustedSource)) { mUi.initiateUi(R.string.setup_work_device, R.string.setup_device_start_setup, R.string.company_controls_device, R.string.the_following_is_your_mdm_for_device, mParams); } if (isEncryptionRequired()) { maybeTriggerEncryption(); return; } if (mKeyguardManager.inKeyguardRestrictedInputMode()) { com.android.managedprovisioning.ProvisionLogger.logi( pick wifi because the screen is locked. } else if ((<START_MOD>((<END_MOD>!(mUtils.isConnectedToNetwork(mContext))) && ((mParams.wifiInfo) == null)) <START_MOD>&& ((mParams.deviceAdminDownloadInfo) != null)) && (!(android.text.TextUtils.isEmpty(mParams.deviceAdminDownloadInfo.location)))) <END_MOD>{ if (canRequestWifiPick()) { mUi.requestWifiPick(); return; } else { com.android.managedprovisioning.ProvisionLogger.logi( pick wifi because there is no handler to the intent } } askForConsentOrStartDeviceOwnerProvisioning(); }
<START_MOD>private java.io.File getToolchainPath(java.lang.String abi) { return getToolchainPath(toolchainName, toolchainVersion, abi); }<END_MOD>
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (<START_MOD>mAction.equals(android.telephony.cts.SmsManagerTest.DATA_SMS_RECEIVED_ACTION)) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); android.os.Bundle bundle = <END_MOD>intent.<START_MOD>getExtras(); if (bundle != null) { java.lang.Object[] obj = ((java.lang.Object[]) (bundle.get("pdus"))); android.telephony.SmsMessage[] message = new android.telephony.SmsMessage[obj.length]; for (int i = 0; i < (obj.length); i++) { message[i] = android.telephony.SmsMessage.createFromPdu(((byte[]) (obj[i]))); } for (android.telephony.SmsMessage currentMessage : message) { sb.append(currentMessage.getDisplayMessageBody()); } } this.mReceivedDataSms = true; this.mReceivedText = sb.toString(); } if (intent.<END_MOD>getAction().equals(mAction)) { synchronized(mLock) { mCalls += 1; if ((mCalls) >= (mExpectedCalls)) { mLock.notify(); } } } }
<START_MOD>@org.junit.Test public void provisioningNotRequiredWhenCarrierConfigManagerMissing() { setupForRequiredProvisioning(); when(mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE)).thenReturn(null); verify((!(mTethering.isTetherProvisioningRequired()))); }<END_MOD>
<START_MOD>public com.google.gct.idea.debugger.Breakpoint getCurrentBreakpoint() { return myCurrentBreakpoint; }<END_MOD>
@java.lang.Override public org.junit.runners.model.Statement apply(org.junit.runners.model.Statement base, org.junit.runner.Description description) { if ((description.getAnnotation(libcore.junit.util.ResourceLeakageDetector.DisableResourceLeakageDetection.class)) != null) { <START_MOD>leakageDetectionDisabledForTest = true; <END_MOD>return base; } else {<START_MOD> leakageDetectionDisabledForTest = false;<END_MOD> return leakageDetectorRule.apply(base, description); } }
public<START_MOD> synchronized<END_MOD> void close() throws com.android.sched.util.file.CannotCreateFileException, java.io.IOException { java.io.OutputStream os = dir.createOutputVFile(new com.android.sched.vfs.VPath("jack.sha1", '/')).openWrite(); java.io.PrintStream printer = new java.io.PrintStream(os); for (com.android.sched.vfs.MessageDigestInputOutputVFS.MessageDigestOutputVFile file : files) { byte[] digest = file.getDigest(); if (digest != null) { printer.print(file.getVPath().getPathAsString('/')); printer.print(':'); printer.print(com.android.sched.vfs.MessageDigestInputOutputVFS.encode(digest)); printer.println(); } } printer.close(); }
<START_MOD>private void checkCospiFloat3() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testCospiFloat3(in, out); verifyResultsCospiFloat3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testCospiFloat3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testCospiFloat3(in, out); verifyResultsCospiFloat3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testCospiFloat3: " + (e.toString()))); } }<END_MOD>
@java.lang.Override public void initParser(@com.android.annotations.NonNull java.lang.String target, @com.android.annotations.NonNull com.android.sdklib.repository.FullRevision buildToolRevision, @com.android.annotations.NonNull com.android.utils.ILogger logger) { if (!(mInitialized)) { mTarget = new com.android.builder.internal.FakeAndroidTarget(mPlatformRootFolder, target); mBuildToolInfo = new com.android.sdklib.BuildToolInfo(buildToolRevision, new java.io.File(mPlatformRootFolder), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_AAPT), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_AIDL), new java.io.File(mPlatformRootFolder, "prebuilts/sdk/tools/dx"<START_MOD>.replace('/', java.io.File.separatorChar)<END_MOD>), new java.io.File(mPlatformRootFolder, "prebuilts/sdk/tools/lib/dx.jar"<START_MOD>.replace('/', java.io.File.separatorChar)<END_MOD>), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_RENDERSCRIPT), new java.io.File(mPlatformRootFolder, "prebuilts/sdk/renderscript/include"<START_MOD>.replace('/', java.io.File.separatorChar)<END_MOD>), new java.io.File(mPlatformRootFolder, "prebuilts/sdk/renderscript/clang-include"<START_MOD>.replace('/', java.io.File.separatorChar)<END_MOD>), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_BCC_COMPAT), new java.io.File(getHostToolsFolder(), "arm-linux-androideabi-ld"), new java.io.File(getHostToolsFolder(), "i686-linux-android-ld"), new java.io.File(getHostToolsFolder(), "mipsel-linux-android-ld")); mInitialized = true; } }
<START_MOD>public void registerNetworkCallback(android.net.NetworkRequest request, android.net.ConnectivityManager.NetworkCallback networkCallback, android.os.Handler handler) { sendRequestForNetwork(request.networkCapabilities, networkCallback, 0, android.net.ConnectivityManager.LISTEN, android.net.ConnectivityManager.TYPE_NONE, handler); }<END_MOD>
<START_MOD>private static MergingReport.Result validate(com.android.manifmerger.XmlElement xmlElement, com.android.manifmerger.ActionRecorder actionRecorder, com.android.utils.ILogger iLogger) { com.android.manifmerger.MergingReport.Result result = MergingReport.Result.SUCCESS; com.android.manifmerger.NodeOperationType operationType = xmlElement.getOperationType(); switch (operationType) { case REPLACE : if (!(com.android.manifmerger.PostValidator.isNodeOperationPresent(xmlElement, actionRecorder, ActionType.REJECTED))) { iLogger.warning(("" + ("%s was tagged at %s:%d to replace another declaration " + "but no other declaration present")), xmlElement.getId(), xmlElement.getDocument().getSourceLocation().print(true), xmlElement.getPosition().getLine()); result = MergingReport.Result.WARNING; } break; case REMOVE : case REMOVE_ALL : if (!(com.android.manifmerger.PostValidator.isNodeOperationPresent(xmlElement, actionRecorder, ActionType.REJECTED))) { iLogger.warning(("" + ("%s was tagged at %s:%d to remove other declarations " + "but no other declaration present")), xmlElement.getId(), xmlElement.getDocument().getSourceLocation().print(true), xmlElement.getPosition().getLine()); result = MergingReport.Result.WARNING; } break; } com.android.manifmerger.PostValidator.validateAttributes(xmlElement, actionRecorder, iLogger); for (com.android.manifmerger.XmlElement child : xmlElement.getMergeableElements()) { if ((com.android.manifmerger.PostValidator.validate(child, actionRecorder, iLogger)) == (MergingReport.Result.WARNING)) { result = MergingReport.Result.WARNING; } } return result; }<END_MOD>
public void testGrantNoneRequestNone() throws java.lang.Exception {<START_MOD> if (!(supportsMultiWindow())) { return; }<END_MOD> doTestDragAndDrop(android.wm.cts.CrossAppDragAndDropTests.GRANT_NONE, android.wm.cts.CrossAppDragAndDropTests.REQUEST_NONE, android.wm.cts.CrossAppDragAndDropTests.RESULT_EXCEPTION); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_DRAG_STARTED, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); assertResult(android.wm.cts.CrossAppDragAndDropTests.RESULT_KEY_EXTRAS, android.wm.cts.CrossAppDragAndDropTests.RESULT_OK); }
<START_MOD>private void populate(com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano message) { message.optionalInt32 = 5; message.optionalInt64 = 777; message.optionalFloat = 1.0F; message.optionalDouble = 2.0; message.optionalBool = true; message.optionalString = "Hello"; message.optionalBytes = new byte[]{ 1, 2, 3 }; message.optionalNestedMessage = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.NestedMessage(); message.optionalNestedMessage.bb = 27; message.optionalNestedEnum = com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAR; message.repeatedInt32 = new int[]{ 5, 6, 7, 8 }; message.repeatedInt64 = new long[]{ 27L, 28L, 29L }; message.repeatedFloat = new float[]{ 5.0F, 6.0F }; message.repeatedDouble = new double[]{ 99.1, 22.5 }; message.repeatedBool = new boolean[]{ true, false, true }; message.repeatedString = new java.lang.String[]{ "One", "Two" }; message.repeatedBytes = new byte[][]{ new byte[]{ 2, 7 }, new byte[]{ 2, 7 } }; message.repeatedNestedMessage = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.NestedMessage[]{ message.optionalNestedMessage, message.optionalNestedMessage }; message.repeatedNestedEnum = new int[]{ com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAR, com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAZ }; message.defaultFloatNan = 1.0F; message.defaultDoubleNan = 1.0; }<END_MOD>
synchronized boolean reportError(android.bluetooth.BluetoothDevice device, byte error) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((( device= + device) +   error= + error)); } if (!(checkDevice(device))) { return false; } <START_MOD>if (!(checkCallingUid())) { return false; } <END_MOD>return reportErrorNative(error); }
public void fdatasync(java.io.FileDescriptor fd) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
@android.annotation.Nullable public java.lang.String getEid() { if (!(isEnabled())) { return null; } try { return <START_MOD>getIEuiccController()<END_MOD>.getEid(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public void restartObexServerSession() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) android.util.Log.d(TAG,   Service restartObexServerSession() <START_MOD>startSocketListeners<END_MOD>(); }
<START_MOD>protected boolean noHomeScreen() throws com.android.tradefed.device.DeviceNotAvailableException { com.android.tradefed.device.CollectingOutputReceiver outputReceiver = new com.android.tradefed.device.CollectingOutputReceiver(); executeShellCommand(android.server.cts.ActivityManagerTestBase.AM_NO_HOME_SCREEN, outputReceiver); java.lang.String output = outputReceiver.getOutput(); return output.startsWith("true"); }<END_MOD>
void discoveryStateChangeCallback(int state) { infoLog(( with state: + state)); synchronized(mObject) { android.content.Intent intent; if (state == (AbstractionLayer.BT_DISCOVERY_STOPPED)) { mDiscovering = false; <START_MOD>mDiscoveryEnded = java.lang.System.currentTimeMillis(); <END_MOD>intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_FINISHED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } else if (state == (AbstractionLayer.BT_DISCOVERY_STARTED)) { mDiscovering = true; <START_MOD>mDiscoveryEnded = (java.lang.System.currentTimeMillis()) + (com.android.bluetooth.btservice.AdapterProperties.DEFAULT_DISCOVERY_TIMEOUT_MS); <END_MOD>intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_STARTED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } } }
<START_MOD>public void test_unmodifiableMap_LinkedHashMap() { java.util.LinkedHashMap<java.lang.String, java.lang.Integer> smallMap = new java.util.LinkedHashMap<java.lang.String, java.lang.Integer>(); for (int counter = 0; counter < 100; counter++) { java.lang.Integer object = objArray[counter]; smallMap.put(object.toString(), object); } new tests.support.Support_MapTest("", smallMap).runTest(); }<END_MOD>
<START_MOD>private void checkInputFile(java.io.File file) throws com.android.sdklib.build.ApkBuilder.ApkCreationException { if (file.isDirectory()) { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException(((file.getAbsolutePath()) + " is a directory!")); } if (file.exists()) { if ((file.canRead()) == false) { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException(("Cannot read " + (file.getAbsolutePath()))); } } else { throw new com.android.sdklib.build.ApkBuilder.ApkCreationException(((file.getAbsolutePath()) + " does not exists!")); } }<END_MOD>
<START_MOD>@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession program) throws com.android.jack.JackUserException { try { com.android.sched.vfs.OutputVFile outputVFile; if ((((outputLibrary) != null) && (!(isIncrementalMode))) && ((intermediateDexDir) == null)) { outputVFile = outputLibrary.createFile(FileType.DEPENDENCIES, TypeDependencies.vpath); } else { assert (intermediateDexDir) != null; com.android.sched.vfs.VPath typeDependencyPath = TypeDependencies.vpath.clone(); typeDependencyPath.prependPath(new com.android.sched.vfs.VPath("..", '/')); outputVFile = intermediateDexDir.createOutputVFile(typeDependencyPath); } com.android.jack.Jack.getSession().getTypeDependencies().write(outputVFile); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new com.android.jack.JackIOException(("Could not create type dependencies file in output " + ((outputLibrary) != null ? outputLibrary.getLocation().getDescription() : intermediateDexDir)), e); } catch (java.io.IOException e) { throw new com.android.jack.JackIOException(("Could not create type dependencies file in output " + ((outputLibrary) != null ? outputLibrary.getLocation().getDescription() : intermediateDexDir)), e); } }<END_MOD>
@java.lang.Override public void run(org.eclipse.core.runtime.IProgressMonitor monitor) throws java.lang.InterruptedException, java.lang.reflect.InvocationTargetException { org.eclipse.core.resources.IWorkspaceRunnable op1 = new org.eclipse.core.resources.IWorkspaceRunnable() { @java.lang.Override public void run(org.eclipse.core.runtime.IProgressMonitor monitor1) throws org.eclipse.core.runtime.CoreException { org.eclipse.cdt.core.CCorePlugin.getDefault().convertProjectToCC(mProject, monitor1, MakeCorePlugin.MAKE_PROJECT_ID); new com.android.ide.eclipse.ndk.internal.wizards.NdkWizardHandler().convertProject(mProject, monitor1); <START_MOD>org.eclipse.cdt.core.language.settings.providers.ScannerDiscoveryLegacySupport.setLanguageSettingsProvidersFunctionalityEnabled(mProject, false); <END_MOD>com.android.ide.eclipse.ndk.internal.NdkManager.addNativeSupport(mProject, mTemplateArgs, monitor1); } }; org.eclipse.core.resources.IWorkspace workspace = org.eclipse.core.resources.ResourcesPlugin.getWorkspace(); try { workspace.run(op1, workspace.getRoot(), 0, new org.eclipse.core.runtime.NullProgressMonitor()); } catch (org.eclipse.core.runtime.CoreException e) { throw new java.lang.reflect.InvocationTargetException(e); } }
public void test_connect_timeout() throws java.lang.Exception { tests.net.StuckServer ss = new tests.net.StuckServer(<START_MOD>false<END_MOD>); java.net.Socket s = new java.net.Socket(); new libcore.java.net.ConcurrentCloseTest.Killer(s).start(); try { java.lang.System.err.println((((( (with timeout)   + s) +   to   + (ss.getLocalSocketAddress())) + "...")); s.connect(ss.getLocalSocketAddress(), (3600 * 1000)); fail((( returned:   + s) + "!")); } catch (java.net.SocketException expected) { assertEquals( closed expected.getMessage()); } finally { ss.close(); } }
<START_MOD>public void testSimpleGraph() { mHeap = new com.android.tools.perflib.heap.analysis.SyntheticHeap(6).addEdge(1, 2).addEdge(1, 3).addEdge(2, 4).addEdge(2, 6).addEdge(3, 4).addEdge(3, 5).addEdge(4, 6).addRoot(1).getHeap(); mDominators = new com.android.tools.perflib.heap.analysis.Dominators(mHeap).getDominatorMap(); assertEquals(6, mDominators.size()); assertDominates(1, 2); assertDominates(1, 3); assertDominates(1, 4); assertDominates(1, 6); assertDominates(3, 5); }<END_MOD>
<START_MOD>public static void addEvent(android.telecom.Logging.Events.EventRecordEntry recordEntry, java.lang.String event) { android.telecom.Log.getEvents().event(recordEntry, event, null); }<END_MOD>
<START_MOD>public void testInlinedIntSetter() { logWriter.println("testInlinedIntSetter started"); testBreakpointIn("breakpointIntSetter"); logWriter.println("testInlinedIntSetter done"); }<END_MOD>
@java.lang.Override public void write(@com.android.annotations.NonNull final java.io.File projectDir, @com.android.annotations.Nullable final java.lang.String buildScriptContent) throws java.io.IOException { for (java.util.Map.Entry<java.lang.String, ? extends com.android.build.gradle.integration.common.fixture.TestProject> entry : subprojects.entrySet()) { java.lang.String subprojectPath = entry.getKey(); com.android.build.gradle.integration.common.fixture.TestProject subproject = entry.getValue(); <START_MOD>java.io.File subprojectDir = new java.io.File(projectDir, com.android.build.gradle.integration.common.fixture.app.MultiModuleTestProject.convertGradlePathToDirectory(subprojectPath)); if (!(subprojectDir.exists())) { subprojectDir.mkdirs(); assert subprojectDir.isDirectory(); } <END_MOD>subproject.write(<START_MOD>subprojectDir, ""); } java.lang.StringBuilder builder = <END_MOD>new java.<START_MOD>lang.StringBuilder(); for (java.lang.String subprojectName : subprojects.keySet()) { builder.append(   } com.google.common.io.Files.write(builder.toString(), new java.<END_MOD>io.File(projectDir, <START_MOD>"settings.gradle"), java.nio.charset.Charset.defaultCharset()); com.google.common.io.Files.write(<END_MOD>buildScriptContent<START_MOD>, new java.io.File(projectDir, "build.gradle"), java.nio.charset.Charset.defaultCharset()<END_MOD>); }
public void testBooleanOverlay() throws java.lang.Throwable { final int resId = com.android.internal.R.bool.<START_MOD>rro_test_usually_false<END_MOD>; assertResource(resId, false, true<START_MOD>, false<END_MOD>); }
<START_MOD>boolean disconnectAudio(android.bluetooth.BluetoothDevice device) { return disconnectAudioNative(com.android.bluetooth.Utils.getByteAddress(device)); }<END_MOD>
<START_MOD>private void checkRintFloat4() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testRintFloat4(in, out); verifyResultsRintFloat4(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRintFloat4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testRintFloat4(in, out); verifyResultsRintFloat4(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRintFloat4: " + (e.toString()))); } }<END_MOD>
<START_MOD>private static void callCreateHooks(final com.android.ide.eclipse.adt.internal.editors.AndroidXmlEditor editor, final com.android.ide.common.api.InsertType insertType, final com.android.ide.common.api.IViewRule parentRule, final com.android.ide.common.api.INode parentNode, final com.android.ide.common.api.IViewRule childRule, final com.android.ide.common.api.INode newNode) { if (!(editor.isEditXmlModelPending())) { editor.wrapUndoEditXmlModel("Customize creation", new java.lang.Runnable() { public void run() { com.android.ide.eclipse.adt.internal.editors.layout.gre.RulesEngine.callCreateHooks(editor, insertType, parentRule, parentNode, childRule, newNode); } }); return; } if (parentRule != null) { parentRule.onInsert(newNode, parentNode, insertType); } if (childRule != null) { childRule.onCreate(newNode, parentNode, insertType); } }<END_MOD>
public void testVFE16() { try { <START_MOD>dot<END_MOD>.<START_MOD>junit<END_MOD>.<START_MOD>opcodes<END_MOD>.<START_MOD>iget_boolean.d.T_iget_boolean_5 t = new dot.junit.opcodes.iget_boolean.d.T_iget_boolean_5<END_MOD>(<START_MOD>); t.run(<END_MOD>); fail( <START_MOD>an<END_MOD> <START_MOD>IncompatibleClassChangeError<END_MOD> exception } catch (java.lang.<START_MOD>IncompatibleClassChangeError<END_MOD> <START_MOD>e<END_MOD>) { } }
<START_MOD>@org.junit.Test public void test56_001() throws java.lang.Exception { runTest("056", "001", ""); }<END_MOD>
<START_MOD>private void checkHalfRsqrtFloat3() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testHalfRsqrtFloat3(inV, out); verifyResultsHalfRsqrtFloat3(inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testHalfRsqrtFloat3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testHalfRsqrtFloat3(inV, out); verifyResultsHalfRsqrtFloat3(inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testHalfRsqrtFloat3: " + (e.toString()))); } }<END_MOD>
<START_MOD>@java.lang.Override public void run() { if (mViewer.getTable().isDisposed()) { return; } synchronized(this) { mCurrentRefresher = null; } int nDeleted; synchronized(mDeletedLock) { nDeleted = mDeletedSinceLastRefreshCount; mDeletedSinceLastRefreshCount = 0; } int topIndex = mViewer.getTable().getTopIndex(); mViewer.getTable().setRedraw(false); mViewer.refresh(); if (mShouldScrollToLatestLog) { scrollToLatestLog(); } else { if (topIndex > nDeleted) { topIndex -= nDeleted; } mViewer.getTable().setTopIndex(topIndex); } mViewer.getTable().setRedraw(true); }<END_MOD>
<START_MOD>private static void checkIntFailureCases(libcore.io.BufferIterator iterator) { assertEquals(10, iterator.size()); iterator.seek((-1)); libcore.io.MemoryMappedFileTest.assertReadIntFails(iterator); iterator.seek((-4)); libcore.io.MemoryMappedFileTest.assertReadIntFails(iterator); iterator.seek(7); libcore.io.MemoryMappedFileTest.assertReadIntFails(iterator); iterator.seek(10); libcore.io.MemoryMappedFileTest.assertReadIntFails(iterator); }<END_MOD>
<START_MOD>public static int AddAddSubAddConst(int arg) { return (((arg + 1) + 2) - 3) + 4; }<END_MOD>
void stop() { if (com.android.bluetooth.mapclient.MnsService.VDBG) android.util.Log.v(com.android.bluetooth.mapclient.MnsService.TAG, "stop()"); mShutdown = true; if ((<START_MOD>mSdpHandle) >= 0) { if (!(com.android.bluetooth.sdp.SdpManager.getDefaultManager().removeSdpRecord(mSdpHandle))) { android.util.Log.e(com.android.bluetooth.mapclient.MnsService.TAG, ( to remove sdp handle   + (mSdpHandle))); mSdpHandle = -1; } } if ((<END_MOD>com.android.bluetooth.mapclient.MnsService.mServerSockets) != null) { com.android.bluetooth.mapclient.MnsService.mServerSockets.shutdown(false); com.android.bluetooth.mapclient.MnsService.mServerSockets = null; } }
void removeItem(<START_MOD>@com.android.annotations.NonNull <END_MOD>I removedItem, I replacedBy) throws com.android.ide.common.res2.MergeConsumer.ConsumerException;
<START_MOD>public void initialize() { sendMessage(com.android.server.wifi.WifiStateMachine.CMD_INITIALIZE); }<END_MOD>
private void onStartUser(int userId) { android.util.Slog.d(com.android.server.MountService.TAG, (   + userId)); try { mConnector.execute("volume", "user_started", userId); } catch (com.android.server.NativeDaemonConnectorException ignored) { } synchronized(mVolumes) { for (int i = 0; i < (mVolumes.size()); i++) { final android.os.storage.VolumeInfo vol = mVolumes.valueAt(i); if ((vol.isVisibleForRead(userId)) && (vol.isMountedReadable())) { final android.os.storage.StorageVolume userVol = vol.buildStorageVolume(mContext, userId, false); mHandler.obtainMessage(com.android.server.MountService.H_VOLUME_BROADCAST, userVol).sendToTarget(); final java.lang.String envState = android.os.storage.VolumeInfo.getEnvironmentForState(vol.getState()); mCallbacks.notifyStorageStateChanged(userVol.getPath(), envState, envState); } } <START_MOD>} synchronized(mLock) { <END_MOD>mStartedUsers = com.android.internal.util.ArrayUtils.appendInt(mStartedUsers, userId); } }
public static java.lang.String formatDateRange(android.icu.util.ULocale icuLocale, android.icu.util.TimeZone icuTimeZone, long startMs, long endMs, int flags) { android.icu.util.Calendar startCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, startMs); android.icu.util.Calendar endCalendar; if (startMs == endMs) { endCalendar = startCalendar; } else { endCalendar = libcore.icu.DateUtilsBridge.createIcuCalendar(icuTimeZone, icuLocale, endMs); } boolean <START_MOD>startsAtMidnight = libcore.icu.DateIntervalFormat.isMidnight(startCalendar); boolean <END_MOD>endsAtMidnight = libcore.icu.DateIntervalFormat.isMidnight(endCalendar); <START_MOD>boolean showTime = (flags & (DateUtilsBridge.FORMAT_SHOW_TIME)) != 0; boolean endsDayAfterStart = (libcore.icu.DateUtilsBridge.dayDistance(startCalendar, endCalendar)) == 1; <END_MOD>if (((startMs != endMs) && endsAtMidnight) && ((<START_MOD>!showTime<END_MOD>) || (<START_MOD>endsDayAfterStart && (!startsAtMidnight)<END_MOD>))) { endCalendar.add(Calendar.DAY_OF_MONTH, (-1)); } java.lang.String skeleton = libcore.icu.DateUtilsBridge.toSkeleton(startCalendar, endCalendar, flags); synchronized(libcore.icu.DateIntervalFormat.CACHED_FORMATTERS) { android.icu.text.DateIntervalFormat formatter = libcore.icu.DateIntervalFormat.getFormatter(skeleton, icuLocale, icuTimeZone); return formatter.format(startCalendar, endCalendar, new java.lang.StringBuffer(), new java.text.FieldPosition(0)).toString(); } }
<START_MOD>private void checkMaxFloatFloat() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); android.renderscript.Allocation in1 = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in1, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocIn1(in1); script.forEach_testMaxFloatFloat(in, out); verifyResultsMaxFloatFloat(in, in1, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testMaxFloatFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocIn1(in1); scriptRelaxed.forEach_testMaxFloatFloat(in, out); verifyResultsMaxFloatFloat(in, in1, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testMaxFloatFloat: " + (e.toString()))); } }<END_MOD>
<START_MOD>com.android.bluetooth.hfp.HeadsetNativeInterface<END_MOD> <START_MOD>getNativeInterface<END_MOD>() { <START_MOD>return<END_MOD> <START_MOD>mNativeInterface<END_MOD>; }
<START_MOD>private void notifyLinkPropertiesChanged(java.lang.String iface, com.android.server.connectivity.tethering.TetherInterfaceStateMachine who, android.net.LinkProperties newLp) { final boolean isTethering; synchronized(mPublicSync) { final com.android.server.connectivity.Tethering.TetherState tetherState = mTetherStates.get(iface); if (tetherState == null) { isTethering = false; } else if (tetherState.stateMachine.equals(who)) { isTethering = (tetherState.lastState) == (com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED); } else { if (com.android.server.connectivity.Tethering.DBG) android.util.Log.d(com.android.server.connectivity.Tethering.TAG, ("got notification from stale iface " + iface)); return; } } mLog.log(java.lang.String.format("OBSERVED LinkProperties update iface=%s isTethering=%s", iface, isTethering)); final int which = com.android.server.connectivity.Tethering.TetherMasterSM.EVENT_IFACE_UPDATE_LINKPROPERTIES; mTetherMasterSM.sendMessage(which, (isTethering ? 1 : 0), 0, newLp); }<END_MOD>
<START_MOD>@org.junit.Test public void test001() throws java.lang.Exception { java.lang.String test = "com.android.jack.optimizations.valuepropagation.test001"; java.lang.String aType = "Lcom/android/jack/optimizations/valuepropagation/test001/A;"; com.android.jack.optimizations.valuepropagation.CompilationProperties properties = defaultProperties(); com.android.jack.optimizations.valuepropagation.TypeMethodsValidator aMethods = new com.android.jack.optimizations.valuepropagation.TypeMethodsValidator().insert("use(I)I", new com.android.jack.optimizations.valuepropagation.MethodDalvikCodeValidator(resource(test, "A.use.dalvik"))); compileAndValidateTypes(test, properties, new com.android.jack.optimizations.valuepropagation.Validators().insert(aType, aMethods)); }<END_MOD>
private void callCallbackForRequest(com.android.server.ConnectivityService.NetworkRequestInfo nri, com.android.server.connectivity.NetworkAgentInfo networkAgent, int notificationType, int arg1) { if ((nri.messenger) == null) { return; } android.os.Bundle bundle = new android.os.Bundle(); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkRequest(nri.request)); android.os.Message msg = android.os.Message.obtain(); if (notificationType != (android.net.ConnectivityManager.CALLBACK_UNAVAIL)) { com.android.server.ConnectivityService.putParcelable(bundle, networkAgent.network); } switch (notificationType) { case android.net.ConnectivityManager.CALLBACK_AVAILABLE : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.NetworkCapabilities(networkAgent.networkCapabilities)); com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } case android.net.ConnectivityManager.CALLBACK_LOSING : { msg.arg1 = arg1; break; } case android.net.ConnectivityManager.CALLBACK_CAP_CHANGED : { final android.net.NetworkCapabilities nc = <START_MOD>networkCapabilitiesWithoutUidsUnlessAllowed<END_MOD>(networkAgent.networkCapabilities); com.android.server.ConnectivityService.putParcelable(bundle, nc); break; } case android.net.ConnectivityManager.CALLBACK_IP_CHANGED : { com.android.server.ConnectivityService.putParcelable(bundle, new android.net.LinkProperties(networkAgent.linkProperties)); break; } } msg.what = notificationType; msg.setData(bundle); try { if (com.android.server.ConnectivityService.VDBG) { java.lang.String notification = android.net.ConnectivityManager.getCallbackName(notificationType); com.android.server.ConnectivityService.log(((( notification   + notification) +   for   + (nri.request))); } nri.messenger.send(msg); } catch (android.os.RemoteException e) { com.android.server.ConnectivityService.loge(( caught trying to send a callback msg for   + (nri.request))); } }
private void testJavaSide(<START_MOD>android.renderscript<END_MOD>.RenderScript RS) { int subElemCount = simpleElem.getSubElementCount(); _RS_ASSERT( == 0 (subElemCount == 0)); _RS_ASSERT( == USER ((simpleElem.getDataKind()) == (android.renderscript.Element.DataKind.USER))); _RS_ASSERT( == FLOAT_32 ((simpleElem.getDataType()) == (android.renderscript.Element.DataType.FLOAT_32))); subElemCount = complexElem.getSubElementCount(); _RS_ASSERT( == 10 (subElemCount == 10)); _RS_ASSERT( == USER ((complexElem.getDataKind()) == (android.renderscript.Element.DataKind.USER))); _RS_ASSERT( == NONE ((complexElem.getDataType()) == (android.renderscript.Element.DataType.NONE))); for (int i = 0; i < subElemCount; i++) { _RS_ASSERT( != null ((complexElem.getSubElement(i)) != null)); _RS_ASSERT("complexElem.getSubElementName(i).equals(subElemNames[i])", complexElem.getSubElementName(i).equals(subElemNames[i])); _RS_ASSERT( == subElemArraySizes[i] ((complexElem.getSubElementArraySize(i)) == (subElemArraySizes[i]))); _RS_ASSERT( == subElemOffsets[i] ((complexElem.getSubElementOffsetBytes(i)) == (subElemOffsets[i]))); } }
<START_MOD>@java.lang.Override protected void tearDown() throws java.lang.Exception { if ((postTestChecker) != null) { postTestChecker.run(); } }<END_MOD>
<START_MOD>private void checkTanFloat2() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testTanFloat2(in, out); verifyResultsTanFloat2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testTanFloat2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testTanFloat2(in, out); verifyResultsTanFloat2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testTanFloat2: " + (e.toString()))); } }<END_MOD>
<START_MOD>@com.android.monkeyrunner.doc.MonkeyRunnerExported(doc = "Checks if the specified object is visible.", args = { "selector" }, returns = "True if the object is visible.", argDocs = { "The selector identifying the object." }) public boolean visible(org.python.core.PyObject[] args, java.lang.String[] kws) { org.python.core.ArgParser ap = com.android.monkeyrunner.JythonUtils.createArgParser(args, kws); com.google.common.base.Preconditions.checkNotNull(ap); java.lang.String selector = ap.getString(0); ViewNode node = mHierarchyViewer.findViewById(selector); boolean ret = ((node != null) && (node.namedProperties.containsKey("getVisibility()"))) && ("VISIBLE".equalsIgnoreCase(node.namedProperties.get("getVisibility()").value)); return ret; }<END_MOD>
public native void chown(java.lang.String path, int uid, int gid) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
<START_MOD>public java.util.Set keySet() { return nameValuePairs.keySet(); }<END_MOD>
<START_MOD>@java.lang.Override public void onComplete(java.lang.Void aVoid) { throw new junit.framework.AssertionFailedError("Expecting test build to fail"); }<END_MOD>
private static native android.graphics.Bitmap nativeCopy(<START_MOD>long<END_MOD> srcBitmap, int nativeConfig, boolean isMutable);
<START_MOD>public void testParseInt() throws java.lang.Exception { java.util.Locale.setDefault(java.util.Locale.US); assertEquals(1000, com.android.utils.SdkUtils.parseLocalizedInt("1000")); assertEquals(0, com.android.utils.SdkUtils.parseLocalizedInt("0")); assertEquals(1, com.android.utils.SdkUtils.parseLocalizedInt("1")); assertEquals((-1), com.android.utils.SdkUtils.parseLocalizedInt("-1")); assertEquals(1000, com.android.utils.SdkUtils.parseLocalizedInt("1,000")); assertEquals(1000000, com.android.utils.SdkUtils.parseLocalizedInt("1,000,000")); java.util.Locale.setDefault(java.util.Locale.ITALIAN); assertSame(java.util.Locale.ITALIAN, java.util.Locale.getDefault()); assertEquals(1000, com.android.utils.SdkUtils.parseLocalizedInt("1000")); assertEquals(0, com.android.utils.SdkUtils.parseLocalizedInt("0")); assertEquals(1, com.android.utils.SdkUtils.parseLocalizedInt("1")); assertEquals((-1), com.android.utils.SdkUtils.parseLocalizedInt("-1")); assertEquals(1000, com.android.utils.SdkUtils.parseLocalizedInt("1.000")); assertEquals(1000000, com.android.utils.SdkUtils.parseLocalizedInt("1.000.000")); }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<java.io.File> getRepositories() { java.util.List<java.io.File> repositories = com.google.common.collect.Lists.newArrayList(); java.io.File androidRepo = new java.io.File(((mSdkLocation) + "/extras/android/repository")); if (androidRepo.isDirectory()) { repositories.add(androidRepo); } java.io.File googleRepo = new java.io.File(((mSdkLocation) + "/extras/google/repository")); if (googleRepo.isDirectory()) { repositories.add(googleRepo); } return repositories; }<END_MOD>
@java.lang.Override public void setVoiceMailNumber(java.lang.String alphaTag, java.lang.String voiceMailNumber, <START_MOD>com.<END_MOD>android.<START_MOD>internal.telephony.sip<END_MOD>.Message onComplete) { android.os.AsyncResult.forMessage(onComplete, null, null); onComplete.sendToTarget(); }
@com.android.sched.util.findbugs.SuppressFBWarnings("RV_RETURN_VALUE_IGNORED_BAD_PRACTICE") private static void deleteSubElement(@javax.annotation.Nonnull java.io.File dir) <START_MOD>throws java.io.IOException <END_MOD>{ if (dir.isDirectory()) { <START_MOD>java.io.File[] fileList = dir.listFiles(); if (fileList == null) { throw new java.io.IOException(( to list   + (new com.android.sched.util.location.DirectoryLocation(dir).getDescription()))); } <END_MOD>for (java.io.File sub : <START_MOD>fileList<END_MOD>) { com.android.sched.util.file.FileUtils.deleteSubElement(sub); } } dir.delete(); }
<START_MOD>public void changeIccLockPassword(java.lang.String oldPassword, java.lang.String newPassword, android.os.Message onComplete) { if (com.android.internal.telephony.UiccCardApplication.DBG) log(((("Change Pin1 old: " + oldPassword) + " new: ") + newPassword)); mCi.changeIccPinForApp(oldPassword, newPassword, mAid, onComplete); }<END_MOD>
<START_MOD>private void showPairingErrorDialog() { new android.app.AlertDialog.Builder(this).setIcon(android.R.drawable.ic_dialog_alert).setTitle(R.string.bt_insecure_pairing_error_title).setMessage(R.string.bt_insecure_pairing_error_message).setPositiveButton(android.R.string.ok, new android.content.DialogInterface.OnClickListener() { @java.lang.Override public void onClick(android.content.DialogInterface dialog, int which) { setResult(com.android.cts.verifier.bluetooth.RESULT_CANCELED); finish(); } }).setCancelable(false).show(); }<END_MOD>
<START_MOD>@javax.annotation.Nonnull protected int getCurrentMergerIdx() { synchronized(this) { return currentMergerIdx; } }<END_MOD>
public void setPeriodicAdvertisingEnabled(boolean enable) { try { <START_MOD>mGatt<END_MOD>.setPeriodicAdvertisingEnable(this.<START_MOD>mAdvertiserId<END_MOD>, enable); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG,   exception -   e); } }
public void logCall(com.android.internal.telephony.Connection c, int callLogType) { final java.lang.String number = c.getAddress(); final long date = c.getCreateTime(); final long duration = c.getDurationMillis<START_MOD>(); final int disconnectCause = c.getDisconnectCause<END_MOD>(); final com.android.internal.telephony.Phone phone = c.getCall().getPhone(); final com.android.internal.telephony.CallerInfo ci = getCallerInfoFromConnection(c); final java.lang.String logNumber = getLogNumber(c, ci); if (com.android.phone.CallLogger.DBG) { log(((( onDisconnect(): logNumber set to: + (com.android.phone.PhoneUtils.toLogSafePhoneNumber(logNumber))) +   number set to:   + (com.android.phone.PhoneUtils.toLogSafePhoneNumber(number)))); } final int presentation = getPresentation(c, ci); final boolean isOtaspNumber = (com.android.internal.telephony.TelephonyCapabilities.supportsOtasp(phone)) && (phone.isOtaSpNumber(number)); if (!isOtaspNumber) { logCall(ci, logNumber, presentation, callLogType, date, duration<START_MOD>, disconnectCause<END_MOD>); } }
public void execv(java.lang.String filename, java.lang.String[] argv) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
@org.junit.Test public void emptyScanResults() { java.lang.String[] ssids = new java.lang.String[0]; java.lang.String[] bssids = new java.lang.String[0]; int[] freqs = new int[0]; java.lang.String[] caps = new java.lang.String[0]; int[] levels = new int[0]; int[] securities = new int[0]; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); <START_MOD>java.util.ArrayList<java.lang.String> blacklist = new java.util.ArrayList<java.lang.String>(); <END_MOD>android.net.wifi.WifiConfiguration candidate = mWifiNetworkSelector.selectNetwork(scanDetails, <START_MOD>blacklist, <END_MOD>mWifiInfo, false, true, false); assertEquals( null configuration null, candidate); }
<START_MOD>public void registerForEidReady(android.os.Handler h, int what, java.lang.Object obj) { android.os.Registrant r = new android.os.Registrant(h, what, obj); mSimStateLoadedRegistrants.add(r); }<END_MOD>
@org.junit.Test public void testCompile016() throws java.lang.Exception { java.lang.String packageName = "com.android.jack.switchstatement.test016.jack"; java.lang.String classPrefix = (packageName.replace('.', '_')) + "_"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put("Enum1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum11"), false)); input.put("Enum1$Enum11", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum11"), false)); input.put("Enum1$Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum11"), false)); input.put("Enum1$Switch2", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum11"), false)); input.put("SyntheticSwitchmapClass-*", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo((classPrefix + "Enum1$Enum11"), true)); checkCompiledCode(packageName, input); }
<START_MOD>@org.jetbrains.annotations.Nullable private java.lang.String guessResourceName(com.google.gct.idea.appengine.validation.PsiMethod method) { if ((method.getReturnType()) == (PsiType.VOID)) { return null; } com.google.gct.idea.appengine.validation.RestSignatureInspection.RestMethod restMethod = getDefaultRestMethod(method); com.intellij.openapi.project.Project project; try { project = method.getContainingFile().getProject(); } catch (com.google.gct.idea.appengine.validation.PsiInvalidElementAccessException e) { com.google.gct.idea.appengine.validation.LOG.error(("Error getting project with parameter " + (method.getText())), e); return null; } return restMethod.guessResourceName(project, method); }<END_MOD>
public void testInspectSslBeforeConnect() throws java.lang.Exception { TestSSLContext testSSLContext = <START_MOD>createTestSSLContext<END_MOD>(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), false); server.enqueue(new com.google.mockwebserver.MockResponse()); server.play(); javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (server.getUrl("/").openConnection())); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); assertNotNull(connection.getHostnameVerifier()); try { connection.getLocalCertificates(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getServerCertificates(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getCipherSuite(); fail(); } catch (java.lang.IllegalStateException expected) { } try { connection.getPeerPrincipal(); fail(); } catch (java.lang.IllegalStateException expected) { } }
<START_MOD>private static void writeInt(java.io.OutputStream os, int value) throws java.io.IOException { byte[] bytes = java.nio.ByteBuffer.allocate(4).putInt(value).array(); os.write(bytes); }<END_MOD>
@java.lang.Override public int compare(com.android.ahat.heapdump.Site a, com.android.ahat.heapdump.Site b) { return java.lang.Long.compare(b.getTotalSize()<START_MOD>.getSize()<END_MOD>, a.getTotalSize()<START_MOD>.getSize()<END_MOD>); }
<START_MOD>public void testAsinh() { checkAsinhFloat(); checkAsinhFloat2(); checkAsinhFloat3(); checkAsinhFloat4(); }<END_MOD>
<START_MOD>public static boolean isUsingDdmProtocol() { return "ddm".equalsIgnoreCase(com.android.hierarchyviewerlib.HierarchyViewerDirector.sHvProtoEnvVar); }<END_MOD>
<START_MOD>private android.net.INetd getNetd() { if ((mNetd) == null) { mNetd = android.net.util.NetdService.get(1000); } return mNetd; }<END_MOD>
<START_MOD>public boolean cancelConnect() { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure())) return false; com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult("cancelConnect()"); try { result.setResult(mISupplicantP2pIface.cancelConnect()); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ("ISupplicantP2pIface exception: " + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }<END_MOD>
<START_MOD>protected static int getPort(java.io.FileDescriptor sock) throws java.io.IOException { int port = -1; try { port = ((java.net.InetSocketAddress) (android.system.Os.getsockname(sock))).getPort(); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } if (port == (-1)) { throw new java.lang.IllegalStateException("Something happened while trying to get port"); } return port; }<END_MOD>
<START_MOD>@java.lang.Override public void run() { java.util.List<com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasSelection> selection = mSelectionManager.getSelections(); com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasSelection canvasSelection = selection.get(0); com.android.ide.eclipse.adt.internal.editors.layout.gle2.CanvasViewInfo info = canvasSelection.getViewInfo(); java.lang.Object viewObject = info.getViewObject(); if (viewObject != null) { com.android.layoutlib.api.LayoutScene scene = mViewHierarchy.getScene(); scene.animate(viewObject, "testanim", false, new com.android.layoutlib.api.LayoutScene.IAnimationListener() { private int count = 0; public void onNewFrame(java.awt.image.BufferedImage image) { try { javax.imageio.ImageIO.write(image, "png", new java.io.File((("/Users/xav/Desktop/anim/anim" + ((count)++)) + ".png"))); } catch (java.io.IOException e) { e.printStackTrace(); } } public boolean isCanceled() { return false; } public void done(com.android.layoutlib.api.SceneResult result) { } }); } }<END_MOD>
<START_MOD>@java.lang.Override protected boolean isSupported() throws java.lang.Exception { return (super.isSupported()) && (canUseMeteredNetwork()); }<END_MOD>
<START_MOD>@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); when(mResources.getInteger(R.integer.config_wifi_framework_wifi_score_low_rssi_threshold_24GHz)).thenReturn(com.android.networkrecommendation.WifiWakeupNetworkSelectorTest.MIN_QUALIFIED_24); when(mResources.getInteger(R.integer.config_wifi_framework_wifi_score_low_rssi_threshold_5GHz)).thenReturn(com.android.networkrecommendation.WifiWakeupNetworkSelectorTest.MIN_QUALIFIED_5); when(mResources.getInteger(R.integer.config_wifi_framework_5GHz_preference_boost_factor)).thenReturn(100); mWifiWakeupNetworkSelector = new com.android.networkrecommendation.WifiWakeupNetworkSelector(mResources); }<END_MOD>
<START_MOD>@java.lang.Override protected void paintComponent(java.awt.Graphics g) { super.paintComponent(g); int yPos = 0; for (java.awt.Image img : myScaledImages) { g.drawImage(img, 0, yPos, null); yPos += (img.getHeight(null)) + (com.google.gct.idea.samples.SamplePreviewPanel.PADDING); } }<END_MOD>
public int[] getAdnRecordsSize(int efid) { if (DBG) logd(( efid= + efid)); synchronized(mLock) { checkThread(); recordSize = new int[3]; <START_MOD>java.util.concurrent.atomic.AtomicBoolean status = new java.util.concurrent.atomic.AtomicBoolean(false); <END_MOD>android.os.Message response = mBaseHandler.obtainMessage(com.android.internal.telephony.cdma.EVENT_GET_SIZE_DONE<START_MOD>, status<END_MOD>); phone.getIccFileHandler().getEFLinearRecordSize(efid, response); <START_MOD>while (!(status.get())) { <END_MOD>try { mLock.wait(); } catch (java.lang.InterruptedException e) { logd( while trying to load from the RUIM } } <START_MOD>} <END_MOD>return recordSize; }
@java.lang.Override public java.nio.ByteBuffer putShort(short value) { <START_MOD>checkCanAccess<END_MOD>(); if (isReadOnly) { throw new java.nio.ReadOnlyBufferException(); } int newPosition = (position) + (libcore.io.SizeOf.SHORT); if (newPosition > (limit)) { throw new java.nio.BufferOverflowException(); } this.block.pokeShort(((offset) + (position)), value, order); position = newPosition; return this; }
<START_MOD>@com.android.annotations.NonNull <END_MOD>java.nio.channels.SocketChannel getClientMonitoringSocket() { return mSocketChannel; }
<START_MOD>public static com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree create(com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.Country country, java.time.Instant startInclusive, java.time.Instant endExclusive) { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.US); java.util.List<com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.TimeZoneMapping> timeZoneMappings = country.getTimeZoneMappingsList(); java.util.List<com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo> zoneInfos = new java.util.ArrayList<>(); for (int i = 0; i < (timeZoneMappings.size()); i++) { com.android.libcore.timezone.tzlookup.proto.CountryZonesFile.TimeZoneMapping timeZoneMapping = timeZoneMappings.get(i); int priority = timeZoneMapping.getPriority(); com.ibm.icu.util.BasicTimeZone timeZone = ((com.ibm.icu.util.BasicTimeZone) (com.ibm.icu.util.TimeZone.getTimeZone(timeZoneMapping.getId()))); if (timeZone == (com.ibm.icu.util.TimeZone.UNKNOWN_ZONE)) { throw new java.lang.IllegalArgumentException(("Unknown zone id: " + timeZone)); } com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo zoneInfo = com.android.libcore.timezone.tzlookup.zonetree.ZoneInfo.create(timeZoneNames, timeZone, priority, startInclusive, endExclusive); zoneInfos.add(zoneInfo); } return com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.create(country.getIsoCode(), zoneInfos); }<END_MOD>
@java.lang.Override protected void onResume() { super.onResume(); <START_MOD>tryGetAccessory<END_MOD>(<START_MOD>false<END_MOD>); }
public void iccTransmitApduBasicChannel(int cla, int command, int p1, int p2, int p3, java.lang.String data, android.os.Message response) { <START_MOD>if ((!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) || ((mUiccProfile) == null)) { <END_MOD>mCi.iccTransmitApduBasicChannel(cla, command, p1, p2, p3, data, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_TRANSMIT_APDU_BASIC_CHANNEL_DONE, response)); }<START_MOD> else { if ((mUiccProfile) != null) { mUiccProfile.iccTransmitApduBasicChannel(cla, command, p1, p2, p3, data, response); } } }<END_MOD>
<START_MOD>public void testDecodeUint8() { final java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(new byte[]{ ((byte) (0)), ((byte) (127)), ((byte) (128)), ((byte) (255)) }); final short[] expected = new short[]{ 0, 127, 128, 255 }; com.android.tools.rpclib.binary.Decoder d = new com.android.tools.rpclib.binary.Decoder(input); try { for (short u8 : expected) { assertEquals(u8, ((d.uint8()) & 255)); } } catch (java.io.IOException ex) { assertNull(ex); } }<END_MOD>
<START_MOD>public java.lang.String getTime() { return mTime; }<END_MOD>
private void <START_MOD>validateAttributeInstructions<END_MOD>(com.android.manifmerger.MergingReport.<START_MOD>Builder mergingReport, com.android.manifmerger.XmlElement xmlElement) { for (java.util.Map.Entry<com.android.manifmerger.XmlNode.NodeName, com.android.manifmerger.AttributeOperationType> attributeOperationTypeEntry : xmlElement.getAttributeOperations()) { com.google.common.base.Optional<com.android.manifmerger.XmlAttribute> attribute = xmlElement.getAttribute(attributeOperationTypeEntry.getKey()); switch (attributeOperationTypeEntry.getValue()) { case STRICT : break; case REMOVE :<END_MOD> if (<START_MOD>attribute.isPresent()) { mergingReport.addError(java.lang.String.format(( specified at line:%d for attribute %s, but   + ( also declared at line:%d,   +   you want to use tools:replace instead ? xmlElement.getPosition().getLine(), attributeOperationTypeEntry.getKey(), attribute.get().getPosition().getLine())); } break; case REPLACE : if (!(attribute.isPresent())) { mergingReport.addError(java.lang.String.format(( specified at line:%d for attribute %s, but   +   new value specified xmlElement.getPosition().getLine(), attributeOperationTypeEntry.getKey())); } break; default : throw new java.lang.IllegalStateException(( AttributeOperationType   + (attributeOperationTypeEntry.getValue()))); } } }<END_MOD>
<START_MOD>protected void LibToImportStaticLibs(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { for (java.io.File staticlib : in) { args.add("--import"); args.add(staticlib.getAbsolutePath()); } for (java.io.File staticLib : staticLibs) { args.add("--import"); args.add(staticLib.getAbsolutePath()); } }<END_MOD>
public static <T> void runBasicIterationTests(java.util.Spliterator<T> spliterator, java.util.<START_MOD>List<T> expectedElements) { java.util.List<T> recorder = new java.util.<END_MOD>ArrayList<T><START_MOD>(expectedElements.size()); java.util.function.Consumer<T> consumer = (T value) -> recorder.add(value); boolean didAdvance = spliterator.tryAdvance(consumer); junit.framework.Assert.assertEquals((!(expectedElements.isEmpty())), didAdvance); if ( < (expectedElements.size())<END_MOD>) { <START_MOD>junit.framework.Assert.assertEquals(expectedElements.get(0), recorder.get(0)); } spliterator.forEachRemaining(consumer); junit.framework.Assert.assertEquals(expectedElements, recorder); junit.framework.Assert.assertFalse(spliterator.tryAdvance(consumer)); spliterator.forEachRemaining(( T<END_MOD>) -> junit.framework.Assert.fail()); }
<START_MOD>protected void replaceWith(com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem item) { mFiles.clear(); mFiles.addAll(item.mFiles); }<END_MOD>
@javax.annotation.Nonnull static com.android.jack.shrob.spec.AnnotationSpecification annotation(java.lang.String annotationName, boolean hasNameNegator) { com.android.jack.shrob.spec.NameSpecification name = com.android.jack.shrob.proguard.GrammarActions.name(annotationName<START_MOD>, com.android.jack.shrob.proguard.GrammarActions.NameFormat.CLASS<END_MOD>); name.setNegator(hasNameNegator); return new com.android.jack.shrob.spec.AnnotationSpecification(name); }
@java.lang.Override public void getCellInfoList(android.os.Message result, android.os.WorkSource workSource) { workSource = getDeafultWorkSourceIfInvalid(workSource); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_GET_CELL_INFO_LIST, result, workSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getCellInfoList(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getCellInfoList", e); } } }
<START_MOD>public void removeLogCatListener(com.android.ddmlib.logcat.ILogCatListener l) { mListeners.remove(l); }<END_MOD>
@org.junit.Test public void coreToJayceFromJar() throws java.lang.Exception { com.android.jill.Options options = new com.android.jill.Options(); options.setBinaryFile(new java.io.File(((com.android.<START_MOD>jack<END_MOD>.<START_MOD>test<END_MOD>.<START_MOD>TestingEnvironment.getAndroidRootDir().getPath<END_MOD>()) + "/out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes.jar"))); options.setVerbose(true); options.container = ContainerType.DIR; options.outputDirOrZip = com.android.jill.JillTestTools.createTempDir("core_", "_dir"); new com.android.jill.Jill(options, "0.1").process(options.getBinaryFile()); }
@java.lang.Override public void write(java.io.OutputStream out) throws java.io.IOException { try { signer = new com.android.signapk.SignApk.WholeFileSignerOutputStream(out, outputStream); java.util.jar.JarOutputStream outputJar = new java.util.jar.JarOutputStream(signer); int hash = com.android.signapk.SignApk.getDigestAlgorithm(publicKey); long timestamp = (publicKey.getNotBefore().getTime()) + (3600L * 1000); java.util.jar.Manifest manifest = com.android.signapk.SignApk.addDigestsToManifest(inputJar, hash); com.android.signapk.SignApk.copyFiles(manifest, inputJar, outputJar, timestamp, 0); com.android.signapk.SignApk.addOtacert(outputJar, publicKeyFile, timestamp, manifest, hash); com.android.signapk.SignApk.signFile(manifest, new java.security.cert.X509Certificate[]{ publicKey }, new java.security.PrivateKey[]{ privateKey }, outputJar<START_MOD>, false<END_MOD>); signer.notifyClosing(); outputJar.close(); signer.finish(); } catch (java.lang.Exception e) { throw new java.io.IOException(e); } }
public void request(<START_MOD>com.android.bips.discovery.<END_MOD>DiscoveredPrinter printer, boolean highPriority, com.android.bips.ipp.CapabilitiesCache.OnLocalPrinterCapabilities onLocalPrinterCapabilities) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, ((( printer= + printer) +   high= + highPriority)); <START_MOD>com.android.bips.jni.LocalPrinterCapabilities capabilities<END_MOD> = <START_MOD>get(printer); if ((capabilities != null) && ((capabilities.nativeData) != null)) { onLocalPrinterCapabilities.onCapabilities(capabilities); return; } if (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(mService, printer)) { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, ( to P2P evict list:   + printer)); mToEvictP2p.add(printer.path); } else { if (com.android.bips.ipp.CapabilitiesCache.DEBUG) android.util.Log.d(com.android.bips.ipp.CapabilitiesCache.TAG, ( to WLAN evict list:   + printer)); mToEvict.add(printer.path); } com.android.bips.ipp.CapabilitiesCache.Request request<END_MOD> = <START_MOD>mRequests.computeIfAbsent(<END_MOD>printer.path<START_MOD>, ( uri) -> new com.android.bips.ipp.Request(printer, (highPriority ? com.android.bips.ipp.CapabilitiesCache.SECOND_PASS_TIMEOUT : com.android.bips.ipp.CapabilitiesCache.FIRST_PASS_TIMEOUT))); if (highPriority) request.mHighPriority<END_MOD> = <START_MOD>true; request.mCallbacks.add(<END_MOD>onLocalPrinterCapabilities<START_MOD>); startNextRequest()<END_MOD>; }
<START_MOD>public java.util.EnumSet<com.android.layoutlib.api.Capabilities> getCapabilities() { if ((mBridge) != null) { return mBridge.getCapabilities(); } return java.util.EnumSet.noneOf(com.android.layoutlib.api.Capabilities.class); }<END_MOD>
<START_MOD>@org.junit.Test public void test001() throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir("com.android.jack.java8.variable.test001.jack"); java.io.File out = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeClazz = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(2); excludeClazz.add(com.android.jack.test.toolchain.JackApiV01.class); com.android.jack.test.toolchain.IToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchainBase.class, excludeClazz); toolchain.addToClasspath(toolchain.getDefaultBootClasspath()).setSourceLevel(SourceLevel.JAVA_8); try { toolchain.srcToExe(out, false, testFolder); junit.framework.Assert.fail(); } catch (com.android.jack.frontend.FrontendCompilationException e) { } }<END_MOD>
public byte[] encode() throws java.io.UnsupportedEncodingException { java.util.ArrayList<byte[]> bodyFragments = new java.util.ArrayList<byte[]>(); if ((mSmsBody) != null) { java.lang.String tmpBody = mSmsBody.replaceAll("END:MSG", "/END\\:MSG"); <START_MOD>java.lang.String remoteAddress = com.android.bluetooth.map.BluetoothMapService.getRemoteDevice().getAddress(); if (com.android.bluetooth.DeviceWorkArounds.addresStartsWith(remoteAddress, DeviceWorkArounds.PCM_CARKIT)) { tmpBody = tmpBody.replaceAll("\r", ""); } else if (com.android.bluetooth.DeviceWorkArounds.addresStartsWith(remoteAddress, DeviceWorkArounds.FORD_SYNC_CARKIT)) { tmpBody = tmpBody.replaceAll("\n", ""); } <END_MOD>bodyFragments.add(tmpBody.getBytes("UTF-8")); } else if (((mSmsBodyPdus) != null) && ((mSmsBodyPdus.size()) > 0)) { for (com.android.bluetooth.map.BluetoothMapSmsPdu.SmsPdu pdu : mSmsBodyPdus) { bodyFragments.add(encodeBinary(pdu.getData(), pdu.getScAddress()).getBytes("UTF-8")); } } else { bodyFragments.add(new byte[0]); } return encodeGeneric(bodyFragments); }
<START_MOD>private static com.android.signapk.Pair<java.lang.String, ? extends java.security.spec.AlgorithmParameterSpec> getSignatureAlgorithmJcaSignatureAlgorithm(int sigAlgorithm) { switch (sigAlgorithm) { case com.android.signapk.ApkSignerV2.SIGNATURE_RSAPSS_WITH_SHA256 : return com.android.signapk.Pair.create("SHA256withRSA/PSS", new java.security.spec.PSSParameterSpec("SHA-256", "MGF1", java.security.spec.MGF1ParameterSpec.SHA256, (256 / 8), 1)); case com.android.signapk.ApkSignerV2.SIGNATURE_RSAPSS_WITH_SHA512 : return com.android.signapk.Pair.create("SHA512withRSA/PSS", new java.security.spec.PSSParameterSpec("SHA-512", "MGF1", java.security.spec.MGF1ParameterSpec.SHA512, (512 / 8), 1)); case com.android.signapk.ApkSignerV2.SIGNATURE_ECDSA_WITH_SHA256 : return com.android.signapk.Pair.create("SHA256withECDSA", null); case com.android.signapk.ApkSignerV2.SIGNATURE_ECDSA_WITH_SHA512 : return com.android.signapk.Pair.create("SHA512withECDSA", null); case com.android.signapk.ApkSignerV2.SIGNATURE_DSA_WITH_SHA256 : return com.android.signapk.Pair.create("SHA256withDSA", null); case com.android.signapk.ApkSignerV2.SIGNATURE_DSA_WITH_SHA512 : return com.android.signapk.Pair.create("SHA512withDSA", null); default : throw new java.lang.IllegalArgumentException(("Unknown signature algorithm: 0x" + (java.lang.Long.toHexString((sigAlgorithm & -1))))); } }<END_MOD>
<START_MOD>public void testExceptionMessage() { short[] B1 = new short[5]; int[] B2 = new int[5]; java.lang.Exception err = null; try { (count)++; testExceptionMessage1(B1, B2, null, (-1), 6); } catch (java.lang.Exception e) { err = e; } java.lang.System.out.println(err); }<END_MOD>
<START_MOD>public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion, int maxSdkVersion) throws com.android.apksig.internal.apk.ApkSigningBlockUtils.SignatureNotFoundException, java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result(com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3); com.android.apksig.internal.apk.SignatureInfo signatureInfo = com.android.apksig.internal.apk.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.v3.V3SchemeVerifier.APK_SIGNATURE_SCHEME_V3_BLOCK_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.internal.apk.v3.V3SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, minSdkVersion, maxSdkVersion, result); return result; }<END_MOD>
<START_MOD>private native long getLongNative(java.lang.Object object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;<END_MOD>
@java.lang.Override public void installPackageWithVerification(android.net.Uri packageURI, android.content.pm.IPackageInstallObserver observer, int flags, java.lang.String installerPackageName, android.net.Uri verificationURI, android.content.pm.ManifestDigest manifestDigest, android.content.pm.ContainerEncryptionParams encryptionParams) { android.content.pm.VerificationParams verificationParams = new android.content.pm.VerificationParams(verificationURI, null, null, android.content.pm.VerificationParams.NO_UID, manifestDigest); installPackageWithVerificationAndEncryption(packageURI, observer, flags, installerPackageName, verificationParams, encryptionParams<START_MOD>, null<END_MOD>); }
<START_MOD>public void onRttConnectionRemotelyTerminated(android.telecom.Connection c) { }<END_MOD>
public byte[] getHardwareAddress() throws java.net.SocketException { <START_MOD>return<END_MOD> <START_MOD>hardwareAddr<END_MOD>; }
<START_MOD>@com.android.monkeyrunner.doc.MonkeyRunnerExported(doc = "Sends a touch event to the selected object.", args = { "selector", "type" }, argDocs = { "The selector identifying the object.", "The event type as returned by TouchPressType()." }) public void touch(org.python.core.PyObject[] args, java.lang.String[] kws) { org.python.core.ArgParser ap = com.android.monkeyrunner.JythonUtils.createArgParser(args, kws); com.google.common.base.Preconditions.checkNotNull(ap); java.lang.String selector = ap.getString(0); com.android.hierarchyviewerlib.device.ViewNode node = mHierarchyViewer.findViewById(selector); if (node == null) { throw new org.python.core.PyException(org.python.core.Py.ValueError, java.lang.String.format("View not found: %s", selector)); } org.eclipse.swt.graphics.Point p = com.android.monkeyrunner.easy.HierarchyViewer.getAbsoluteCenterOfView(node); org.python.core.PyObject[] otherArgs = new org.python.core.PyObject[3]; otherArgs[0] = new org.python.core.PyInteger(p.x); otherArgs[1] = new org.python.core.PyInteger(p.y); otherArgs[2] = args[1]; mDevice.touch(otherArgs, kws); }<END_MOD>
@java.lang.Override public void sendSMS(java.lang.String smscPdu, java.lang.String pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_SEND_SMS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.GsmSmsMessage msg = constructGsmSendSmsRilRequest(smscPdu, pdu); try { radioProxy.sendSms(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_GSM, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendSMS", e); } } }
public void <START_MOD>testHostnameProvided<END_MOD>() throws java.lang.Exception { <START_MOD>final <END_MOD>java.lang.String <START_MOD>expectedHostname<END_MOD> = <START_MOD>"example.com";<END_MOD> <START_MOD>boolean<END_MOD> <START_MOD>hostnameMatched = false<END_MOD>; org.conscrypt.<START_MOD>CertPinManager<END_MOD> <START_MOD>manager<END_MOD> = new org.conscrypt.<START_MOD>CertPinManager<END_MOD>(<START_MOD>) { @java.lang.Override public boolean isChainValid(java.lang.String hostname<END_MOD>, <START_MOD>java.util.List<java.security.cert.X509Certificate><END_MOD> <START_MOD>chain) { hostnameMatched = expectedHostname<END_MOD>.<START_MOD>equals<END_MOD>(<START_MOD>hostname<END_MOD>)<START_MOD>; return true; } }; callCheckServerTrusted(null, manager<END_MOD>); assertTrue(<START_MOD>hostnameMatched<END_MOD>); }
@org.junit.Test public void retroLambdaDefaultMethodsTest006() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_006).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
private void updateAndSendIntent(android.bluetooth.BluetoothDevice device, int newDeviceState, int prevDeviceState) { if (newDeviceState == (android.bluetooth.BluetoothHealth.STATE_DISCONNECTED)) { mHealthDevices.remove(device); } else { mHealthDevices.put(device, newDeviceState); } <START_MOD>if ((newDeviceState != prevDeviceState) && (newDeviceState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEALTH); <END_MOD>}<START_MOD> }<END_MOD>
<START_MOD>@org.junit.Test public void parseBufferWithEmptyBuffer() throws java.lang.Exception { com.android.server.wifi.hotspot2.anqp.RoamingConsortiumElement element = com.android.server.wifi.hotspot2.anqp.RoamingConsortiumElement.parse(java.nio.ByteBuffer.allocate(0)); assertTrue(element.getOIs().isEmpty()); }<END_MOD>
<START_MOD>@java.lang.Deprecated <END_MOD>private void setBuildTools(@com.android.annotations.NonNull java.util.Map<com.android.sdklib.repository.FullRevision, com.android.sdklib.BuildToolInfo> buildTools) { assert buildTools != null; mBuildTools = buildTools; }
private static native void copyNativeCanvasState(<START_MOD>long<END_MOD> srcCanvas, <START_MOD>long<END_MOD> dstCanvas);
@java.lang.Override protected synchronized boolean stop() { try { unregisterReceiver(mBroadcastReceiver); } catch (java.lang.Exception e) { android.util.Log.w(com.android.bluetooth.hfpclient.HeadsetClientService.TAG,   to unregister broadcast receiver e); } for (java.util.Iterator<java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.hfpclient.HeadsetClientStateMachine>> it = mStateMachineMap.entrySet().iterator(); it.hasNext();) { com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = mStateMachineMap.get(((android.bluetooth.BluetoothDevice) (it.next().getKey()))); sm.doQuit(); it.remove(); } android.content.Intent stopIntent = new android.content.Intent(this, com.android.bluetooth.hfpclient.connserv.HfpClientConnectionService.class); stopIntent.putExtra(com.android.bluetooth.hfpclient.HeadsetClientService.HFP_CLIENT_STOP_TAG, true); startService(stopIntent); <START_MOD>mSmThread.quit(); mSmThread = null; if ((<END_MOD>mNativeInterface<START_MOD>) !=<END_MOD> null<START_MOD>) { mNativeInterface.cleanupNative(); mNativeInterface<END_MOD> = null; <START_MOD>}<END_MOD> return true; }
void adjustSurface(int layer, boolean inTransaction<START_MOD>, boolean needResize<END_MOD>) { final int dw; final int dh; final float xPos; final float yPos; if (!(mStack.isFullscreen())) { dw = mBounds.width(); dh = mBounds.height(); xPos = mBounds.left; yPos = mBounds.top; } else { final android.view.DisplayInfo info = mDisplayContent.getDisplayInfo(); dw = ((int) ((info.logicalWidth) * 1.5)); dh = ((int) ((info.logicalHeight) * 1.5)); xPos = ((-1) * dw) / 6; yPos = ((-1) * dh) / 6; } try { if (!inTransaction) { android.view.SurfaceControl.openTransaction(); } mDimSurface.setPosition(xPos, yPos); <START_MOD>if (needResize) { <END_MOD>mDimSurface.setSize(dw, dh);<START_MOD> }<END_MOD> mDimSurface.setLayer(layer); } catch (java.lang.RuntimeException e) { android.util.Slog.w(com.android.server.wm.DimLayer.TAG,   setting size or layer e); } finally { if (!inTransaction) { android.view.SurfaceControl.closeTransaction(); } } mLastBounds.set(mBounds); mLayer = layer; }
<START_MOD>public static libcore.javax.net.ssl.TestSSLContext create(libcore.java.security.TestKeyStore client, libcore.java.security.TestKeyStore server, javax.net.ssl.KeyManager[] additionalClientKeyManagers, javax.net.ssl.KeyManager[] additionalServerKeyManagers) { java.lang.String protocol = "TLSv1.2"; javax.net.ssl.KeyManager[] clientKeyManagers = libcore.javax.net.ssl.TestSSLContext.concat(client.keyManagers, additionalClientKeyManagers); javax.net.ssl.KeyManager[] serverKeyManagers = libcore.javax.net.ssl.TestSSLContext.concat(server.keyManagers, additionalServerKeyManagers); javax.net.ssl.SSLContext clientContext = libcore.javax.net.ssl.TestSSLContext.createSSLContext(protocol, clientKeyManagers, client.trustManagers); javax.net.ssl.SSLContext serverContext = libcore.javax.net.ssl.TestSSLContext.createSSLContext(protocol, serverKeyManagers, server.trustManagers); return libcore.javax.net.ssl.TestSSLContext.create(client.keyStore, client.storePassword, server.keyStore, server.storePassword, clientKeyManagers, serverKeyManagers, client.trustManagers[0], server.trustManagers[0], clientContext, serverContext); }<END_MOD>
<START_MOD>@java.lang.Override public void widgetDisposed(org.eclipse.swt.events.DisposeEvent event) { for (org.eclipse.swt.graphics.Resource d : disposables) { d.dispose(); } if (disposeFont != null) { disposeFont.dispose(); } }<END_MOD>
@java.lang.Override public void setInitialAttachApn(android.telephony.data.DataProfile dataProfile, boolean isRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_SET_INITIAL_ATTACH_APN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + dataProfile)); } try { radioProxy.setInitialAttachApn(rr.mSerial, com.android.internal.telephony.RIL.convertToHalDataProfile(dataProfile), dataProfile.isModemCognitive(), isRoaming); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setInitialAttachApn", e); } } }
<START_MOD>private void checkIpSecConfigAndThrow(android.net.IpSecConfig config) { switch (config.getMode()) { case android.net.IpSecTransform.MODE_TUNNEL : case android.net.IpSecTransform.MODE_TRANSPORT : break; default : throw new java.lang.IllegalArgumentException(("Invalid IpSecTransform.mode: " + (config.getMode()))); } checkNotNull(config.getRemoteAddress(), "Invalid Remote InetAddress"); switch (config.getEncapType()) { case android.net.IpSecTransform.ENCAP_NONE : break; case android.net.IpSecTransform.ENCAP_ESPINUDP : case android.net.IpSecTransform.ENCAP_ESPINUDP_NON_IKE : checkNotNull(mUdpSocketRecords.get(config.getEncapSocketResourceId()), "No Encapsulation socket for specified Resource Id"); int port = config.getEncapRemotePort(); if ((port == 0) || ((port & -65536) != 0)) { throw new java.lang.IllegalArgumentException(("Invalid remote UDP port: " + port)); } break; default : throw new java.lang.IllegalArgumentException(("Invalid Encap Type: " + (config.getEncapType()))); } for (int direction : com.android.server.IpSecService.DIRECTIONS) { android.net.IpSecAlgorithm crypt = config.getEncryption(direction); android.net.IpSecAlgorithm auth = config.getAuthentication(direction); if ((crypt == null) && (auth == null)) { throw new java.lang.IllegalArgumentException("Encryption and Authentication are both null"); } checkNotNull(mSpiRecords.get(config.getSpiResourceId(direction)), "No SPI for specified Resource Id"); } }<END_MOD>
<START_MOD>public void testJvmtiAgentAppExternal() throws java.lang.Exception { runJvmtiAgentLoadTest((com.android.tradefed.device.ITestDevice device,java.lang.String pkg,java.lang.String apk,java.lang.String abiName) -> { try { java.lang.String pwd = device.executeShellCommand((("run-as " + pkg) + " pwd")); if (pwd == null) { throw new java.lang.RuntimeException("pwd failed"); } pwd = pwd.trim(); if (pwd.isEmpty()) { throw new java.lang.RuntimeException("pwd failed"); } java.lang.String libInDataData = (android.jvmti.cts.JvmtiAttachingHostTest.AGENT.substring(0, ((android.jvmti.cts.JvmtiAttachingHostTest.AGENT.length()) - (".so".length())))) + "2.so"; java.lang.String agentInDataData = installLibToDataData(device, pkg, abiName, apk, pwd, android.jvmti.cts.JvmtiAttachingHostTest.AGENT, libInDataData); java.lang.String setAgentAppCmd = (("cmd activity set-agent-app " + pkg) + " ") + agentInDataData; java.lang.String setAgentAppReply = device.executeShellCommand(setAgentAppCmd); if ((setAgentAppReply != null) && (!(setAgentAppReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(setAgentAppReply); } } catch (java.lang.Exception e) { throw new java.lang.RuntimeException("Failed running set-agent-app", e); } try { android.jvmti.cts.JvmtiAttachingHostTest.runAttachTestCmd(device, pkg, ""); } catch (java.lang.Exception e) { throw new java.lang.RuntimeException("Failed agent-app attaching", e); } }); }<END_MOD>
<START_MOD>private void recordHtmlAttributeValue(@com.android.annotations.Nullable com.android.build.gradle.tasks.ResourceUsageAnalyzer.Resource from, @com.android.annotations.Nullable java.lang.String tagName, @com.android.annotations.Nullable java.lang.String attribute, @com.android.annotations.NonNull java.lang.String value) { if (("href".equals(attribute)) || ("src".equals(attribute))) { if (!(referencedUrl(from, value))) { referencedString(value); } if (from != null) { from.addReference(getResourceFromFilePath(attribute)); } } }<END_MOD>
<START_MOD>public void testAesGcm96Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }<END_MOD>
<START_MOD>public static void remove(java.lang.String path) throws android.os.ErrnoException { Libcore.os.remove(path); }<END_MOD>
<START_MOD>@com.android.annotations.NonNull public com.google.common.hash.HashCode getSourceHash() { return mSourceHash; }<END_MOD>
public static int ioctlInt(java.io.FileDescriptor fd, int cmd, android.system.IoctlIntArg arg) throws android.system.ErrnoException { return Libcore.os.ioctlInt(fd, cmd, <START_MOD>arg<END_MOD>); }
<START_MOD>private void checkClzUchar() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U8(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inValue, 35, 0, 500); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U8(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testClzUchar(inValue, out); verifyResultsClzUchar(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testClzUchar: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U8(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testClzUchar(inValue, out); verifyResultsClzUchar(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testClzUchar: " + (e.toString()))); } }<END_MOD>
<START_MOD>@com.android.annotations.Nullable @java.lang.Override public java.io.File getStoreFile() { return (signingConfig.getStoreFile()) == null ? null : new java.io.File(signingConfig.getStoreFile()); }<END_MOD>
boolean stopGattProfileService() {<START_MOD> mAdapterProperties.onBleDisable(); if ((mRunningProfiles.size()) == 0) { debugLog( - No profiles services to stop. mAdapterStateMachine.sendMessage(AdapterState.BLE_STOPPED); }<END_MOD> setProfileServiceState(com.android.bluetooth.gatt.GattService.class, BluetoothAdapter.STATE_OFF); return true; }
private boolean haveLocalRepository(java.lang.String vendor) { if (<START_MOD>(getSdk())<END_MOD> != null) { com.android.sdklib.repository.local.LocalPkgInfo[] infos = <START_MOD>getSdk()<END_MOD>.getPkgsInfos(PkgType.PKG_EXTRAS); for (com.android.sdklib.repository.local.LocalPkgInfo info : infos) { com.android.sdklib.repository.descriptors.IPkgDesc d = info.getDesc(); if ((((d.hasVendorId()) && (vendor.equals(d.getVendorId()))) && (d.hasPath())) && ("m2repository".equals(d.getPath()))) { return true; } } } if ((mSdkLocation) != null) { java.io.File repository = new java.io.File(mSdkLocation, (((((FD_EXTRAS) + (java.io.File.separator)) + vendor) + (java.io.File.separator)) + "m2repository")); return repository.exists(); } return false; }
@java.lang.Override protected void setUp() throws java.lang.Exception {<START_MOD> setupStartTimestamp = java.lang.System.currentTimeMillis();<END_MOD> final java.io.File f = java.io.File.createTempFile("ZipEntryTest", ".zip"); java.io.InputStream is = tests.support.resource.Support_Resources.getStream("hyts_ZipFile.zip"); java.io.FileOutputStream fos = new java.io.FileOutputStream(f); libcore.io.Streams.copy(is, fos); is.close(); fos.close(); zfile = new java.util.zip.ZipFile(f); zentry = zfile.getEntry("File1.txt"); orgSize = zentry.getSize(); orgCompressedSize = zentry.getCompressedSize(); orgCrc = zentry.getCrc(); orgTime = zentry.getTime(); }
<START_MOD>public com.android.apksig.ApkSigner.Builder setV3SigningEnabled(boolean enabled) { checkInitializedWithoutEngine(); if ((enabled && ((mSignerConfigs) != null)) && ((mSignerConfigs.size()) > 1)) { throw new java.lang.IllegalArgumentException(("APK Signature Scheme v3 cannot be used with " + "multiple signers.")); } mV3SigningEnabled = enabled; return this; }<END_MOD>
@java.lang.Override public final int <START_MOD>registerStatusListener<END_MOD>(final android.telephony.mbms.DownloadRequest downloadRequest, final android.telephony.mbms.<START_MOD>IDownloadStatusListener listener) throws android.os.RemoteException { final<END_MOD> int <START_MOD>uid =<END_MOD> android.os.<START_MOD>Binder.getCallingUid(); if (downloadRequest == null) { throw new java.lang.NullPointerException( request must not be null } if (listener == null) { throw new java.lang.NullPointerException( must not be null } android.telephony.mbms.DownloadStatusListener exposedCallback = new android.telephony.mbms.vendor.MbmsDownloadServiceBase.VendorDownloadStatusListener(listener) { @java.lang.Override protected void onRemoteException(android.os.<END_MOD>RemoteException <START_MOD>e) { onAppCallbackDied(uid, downloadRequest.getSubscriptionId()); } };<END_MOD> int <START_MOD>result = registerStatusListener(downloadRequest, exposedCallback); if (result == (android.telephony.mbms.MbmsErrors.SUCCESS)) { android.telephony.mbms.vendor.DeathRecipient deathRecipient = new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(<END_MOD>uid<START_MOD>, downloadRequest.getSubscriptionId()); mDownloadStatusListenerBinderMap.remove(listener.asBinder()); mDownloadCallbackDeathRecipients.remove(listener.asBinder()); } }; mDownloadCallbackDeathRecipients.put(listener.asBinder(), deathRecipient); listener.asBinder().linkToDeath(deathRecipient, 0); mDownloadStatusListenerBinderMap.put(listener.asBinder(),<END_MOD> exposedCallback<START_MOD>); } return<END_MOD> result<START_MOD>; }<END_MOD>
@java.lang.Override public void removeItem(@com.android.annotations.NonNull com.android.ide.common.res2.ResourceItem removedItem, @com.android.annotations.Nullable com.android.ide.common.res2.ResourceItem replacedBy) throws com.android.ide.common.res2.ConsumerException { com.android.ide.common.res2.ResourceFile.FileType removedType = removedItem.getSourceType(); com.android.ide.common.res2.ResourceFile.FileType replacedType = (replacedBy != null) ? replacedBy.getSourceType() : null; if (removedType == replacedType) { if (removedType == (ResourceFile.FileType.<START_MOD>XML_VALUES<END_MOD>)) { mQualifierWithDeletedValues.add(removedItem.getQualifiers()); } else { } } else if (removedType == (ResourceFile.FileType.<START_MOD>SINGLE_FILE<END_MOD>)) { removeOutFile(removedItem); } else { mQualifierWithDeletedValues.add(removedItem.getQualifiers()); } }
<START_MOD>@java.lang.Override public java.util.Map<com.android.tools.perflib.heap.Field, java.lang.Object> getStaticFields() { java.util.Map<com.android.tools.perflib.heap.Field, java.lang.Object> result = com.google.common.collect.Maps.newHashMap(); result.put(new com.android.tools.perflib.heap.Field(com.android.tools.perflib.heap.Type.OBJECT, "foo"), object1); result.put(new com.android.tools.perflib.heap.Field(com.android.tools.perflib.heap.Type.OBJECT, "bar"), object2); return result; }<END_MOD>
private void processLockedState() { if ((mUiccApplication) == null) { return; } com.android.internal.telephony.<START_MOD>uicc.<END_MOD>IccCardStatus.PinState pin1State = mUiccApplication.getPin1State(); if (pin1State == (com.android.internal.telephony.<START_MOD>uicc.<END_MOD>IccCardStatus.PinState.PINSTATE_ENABLED_PERM_BLOCKED)) { setExternalState(State.PERM_DISABLED); return; } com.android.internal.telephony<START_MOD>.uicc<END_MOD>.IccCardApplicationStatus.AppState appState = mUiccApplication.getState(); switch (appState) { case APPSTATE_PIN : mPinLockedRegistrants.notifyRegistrants(); setExternalState(State.PIN_REQUIRED); break; case APPSTATE_PUK : setExternalState(State.PUK_REQUIRED); break; } }
<START_MOD>private boolean shouldConsiderServiceStateRoaming() { android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE))); if (configManager != null) { android.os.PersistableBundle b = configManager.getConfigForSubId(com.android.internal.telephony.SubscriptionController.getInstance().getSubIdUsingPhoneId(mParentApp.getPhoneId())); if ((b != null) && (b.getBoolean(CarrierConfigManager.KEY_SPN_DISPLAY_RULE_SHOULD_CONSIDER_SERVICE_STATE_ROAMING_BOOL))) { return true; } } return false; }<END_MOD>
public void combineCapabilities(android.net.NetworkCapabilities nc) { combineNetCapabilities(nc); combineTransportTypes(nc); combineLinkBandwidths(nc); combineSpecifiers(nc); combineSignalStrength(nc); <START_MOD>combineAllowedUids(nc); <END_MOD>}
<START_MOD>@org.junit.Test public void test003() throws java.lang.Exception { java.lang.String test = "com.android.jack.optimizations.valuepropagation.test003"; java.lang.String aType = "Lcom/android/jack/optimizations/valuepropagation/test003/A;"; java.lang.String bType = "Lcom/android/jack/optimizations/valuepropagation/test003/B;"; com.android.jack.optimizations.valuepropagation.CompilationProperties properties = defaultProperties(); com.android.jack.optimizations.valuepropagation.TypeMethodsValidator aMethods = new com.android.jack.optimizations.valuepropagation.TypeMethodsValidator().insert("check()V", new com.android.jack.optimizations.valuepropagation.MethodDalvikCodeValidator(resource(test, "A.check.dalvik"))); com.android.jack.optimizations.valuepropagation.TypeMethodsValidator bMethods = new com.android.jack.optimizations.valuepropagation.TypeMethodsValidator().insert("check()Ljava/lang/String;", new com.android.jack.optimizations.valuepropagation.MethodDalvikCodeValidator(resource(test, "B.check.dalvik"))); compileAndValidateTypes(test, properties, new com.android.jack.optimizations.valuepropagation.Validators().insert(aType, aMethods).insert(bType, bMethods)); }<END_MOD>
<START_MOD>@com.android.compatibility.common.util.PdkTest <END_MOD>public void testIsHardwareAccelerated() { if ((getGlEsVersion(mActivity)) >= 2) { assertTrue(mHardwareView.isHardwareAccelerated()); assertTrue(mSoftwareView.isHardwareAccelerated()); assertTrue(mManualHardwareView.isHardwareAccelerated()); assertTrue(mManualSoftwareView.isHardwareAccelerated()); assertTrue(mHardwareView.isCanvasHardwareAccelerated()); assertFalse(mSoftwareView.isCanvasHardwareAccelerated()); assertTrue(mManualHardwareView.isCanvasHardwareAccelerated()); assertFalse(mManualSoftwareView.isCanvasHardwareAccelerated()); } else { assertFalse(mHardwareView.isHardwareAccelerated()); assertFalse(mSoftwareView.isHardwareAccelerated()); assertFalse(mManualHardwareView.isHardwareAccelerated()); assertFalse(mManualSoftwareView.isHardwareAccelerated()); assertFalse(mHardwareView.isCanvasHardwareAccelerated()); assertFalse(mSoftwareView.isCanvasHardwareAccelerated()); assertFalse(mManualHardwareView.isCanvasHardwareAccelerated()); assertFalse(mManualSoftwareView.isCanvasHardwareAccelerated()); } }
<START_MOD>public void sendTextMessageInternal(java.lang.String destinationAddress, java.lang.String scAddress, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, boolean persistMessage, int priority, boolean isExpectMore, int validityPeriod) { if (android.text.TextUtils.isEmpty(destinationAddress)) { throw new java.lang.IllegalArgumentException("Invalid destinationAddress"); } if (android.text.TextUtils.isEmpty(text)) { throw new java.lang.IllegalArgumentException("Invalid message body"); } try { com.android.internal.telephony.ISms iccISms = android.telephony.SmsManager.getISmsServiceOrThrow(); if (iccISms != null) { iccISms.sendTextForSubscriberWithOptions(getSubscriptionId(), android.app.ActivityThread.currentPackageName(), destinationAddress, scAddress, text, sentIntent, deliveryIntent, persistMessage, priority, isExpectMore, validityPeriod); } } catch (android.os.RemoteException ex) { } }<END_MOD>
public boolean verifyHostName(java.lang.String hostName, java.lang.String <START_MOD>pattern) { if (<END_MOD>((((hostName == null) || (hostName.isEmpty())) || (<START_MOD>hostName.startsWith("."))) || (hostName.endsWith(".."))) || (hostName.contains("*"))) { return false; } if ((((pattern<END_MOD> == null)<START_MOD> || (pattern<END_MOD>.isEmpty())) <START_MOD>|| (pattern.startsWith("."))) || (pattern<END_MOD>.endsWith(<START_MOD>".."))) { return false; } if (!(hostName.endsWith(<END_MOD>"."))<START_MOD>) { hostName += '.'; } if<END_MOD> (!(<START_MOD>pattern<END_MOD>.endsWith(".")))<START_MOD> { pattern<END_MOD> += '.'; } <START_MOD>pattern<END_MOD> = <START_MOD>pattern<END_MOD>.toLowerCase(java.util.Locale.US); if (!(<START_MOD>pattern.startsWith("*."<END_MOD>))) { return hostName.equals(<START_MOD>pattern); } if ((hostName.length()) < (pattern.length())) { return false<END_MOD>; } if (!(javax.net.ssl.DefaultHostnameVerifier.containsAtLeastTwoDomainNameLabelsExcludingRoot(<START_MOD>pattern))) { return false; } java.lang.String suffix = pattern.substring(1); if (!(hostName.endsWith(suffix))) { return false; } int suffixStartIndexInHostName = (hostName<END_MOD>.length()) - <START_MOD>(suffix<END_MOD>.length())<START_MOD>; if ((hostName.lastIndexOf<END_MOD>('.', <START_MOD>(suffixStartIndexInHostName -<END_MOD> 1)<START_MOD>)) != (-1<END_MOD>)) { return false; } return true; }
<START_MOD>@org.junit.Test public void testDescribeImmutableDifferences() { android.net.NetworkCapabilities nc1; android.net.NetworkCapabilities nc2; nc1 = new android.net.NetworkCapabilities().addTransportType(android.net.NetworkCapabilities.TRANSPORT_CELLULAR); nc2 = new android.net.NetworkCapabilities().addTransportType(android.net.NetworkCapabilities.TRANSPORT_WIFI); assertNotEquals("", nc1.describeImmutableDifferences(nc2)); assertEquals("", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_VALIDATED); nc2 = new android.net.NetworkCapabilities(); assertEquals("", nc1.describeImmutableDifferences(nc2)); assertEquals("", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); nc2 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); assertEquals("", nc1.describeImmutableDifferences(nc2)); assertEquals("", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities().removeCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED); nc2 = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET); assertNotEquals("", nc1.describeImmutableDifferences(nc2)); assertEquals("", nc1.describeImmutableDifferences(nc1)); nc1 = new android.net.NetworkCapabilities(); nc2 = new android.net.NetworkCapabilities().setSpecifier(new android.net.StringNetworkSpecifier("specifications")); assertNotEquals("", nc1.describeImmutableDifferences(nc2)); assertEquals("", nc1.describeImmutableDifferences(nc1)); }<END_MOD>
public <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.StructUcred getsockoptUcred(java.io.FileDescriptor fd, int level, int option) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { return os.getsockoptUcred(fd, level, option); }
@java.lang.Override public void valueChanged(javax.swing.event.ListSelectionEvent e) { <START_MOD>valueChanged = true; java.lang.System.out.println( valueChanged function <END_MOD>if ((e.getValueIsAdjusting()) == false) { if ((list.getSelectedIndex()) == (-1)) { signOutButton.setEnabled(false); } else { signOutButton.setEnabled(true); com.google.gct.login.ui.UsersListItem selectedUser = ((com.google.gct.login.ui.UsersListItem) (listModel.get(list.getSelectedIndex()))); if (!(selectedUser.isActiveUser())) { com.google.gct.login.GoogleLogin.getInstance().setActiveUser(selectedUser.getUserEmail()); } } } }
<START_MOD>protected android.telecom.Connection getOriginalConnection(android.telecom.Connection connection) { if (connection instanceof com.android.services.telephony.TelephonyConnection) { return ((com.android.services.telephony.TelephonyConnection) (connection)).getOriginalConnection(); } else { return null; } }<END_MOD>
<START_MOD>@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testRemoveMMTelFeature() throws android.os.RemoteException { mTestImsServiceBinder.createImsFeature(android.telephony.ims.ImsServiceTest.TEST_SLOT_0, ImsFeature.MMTEL); mTestImsServiceBinder.removeImsFeature(android.telephony.ims.ImsServiceTest.TEST_SLOT_0, ImsFeature.MMTEL); verify(mTestImsService.mMockMMTelFeature).onFeatureRemoved(); android.util.SparseArray<android.telephony.ims.feature.ImsFeature> features = mTestImsService.getImsFeatureMap(android.telephony.ims.ImsServiceTest.TEST_SLOT_0); junit.framework.Assert.assertNull(mTestImsService.getImsFeatureFromType(features, ImsFeature.MMTEL)); }<END_MOD>
<START_MOD>public java.io.OutputStreamWriter getTransmitStream() { return mTransmitStream; }<END_MOD>
public void run() { android.<START_MOD>renderscript<END_MOD>.RenderScript pRS = android.<START_MOD>renderscript<END_MOD>.RenderScript.create(mCtx); com.android.rs.test.ScriptC_primitives s = new com.android.rs.test.ScriptC_primitives(pRS); pRS.setMessageHandler(mRsMessage); if (!(initializeGlobals(s))) { failTest(); } else { s.invoke_primitives_test(0, 0); pRS.finish(); waitForMessage(); } pRS.destroy(); }
@java.lang.Override protected java.security.PrivateKey engineGeneratePrivate(java.security.spec.KeySpec keySpec) throws java.security.spec.InvalidKeySpecException { if (keySpec <START_MOD>== null) { throw new java.security.spec.InvalidKeySpecException( == null } if (keySpec <END_MOD>instanceof java.security.spec.RSAPrivateCrtKeySpec) { java.security.spec.RSAPrivateCrtKeySpec rsaKeySpec = ((java.security.spec.RSAPrivateCrtKeySpec) (keySpec)); return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateCrtKey(rsaKeySpec); } else if (keySpec instanceof java.security.spec.RSAPrivateKeySpec) { java.security.spec.RSAPrivateKeySpec rsaKeySpec = ((java.security.spec.RSAPrivateKeySpec) (keySpec)); return new org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey(rsaKeySpec); } else if (keySpec instanceof java.security.spec.PKCS8EncodedKeySpec) { java.security.spec.PKCS8EncodedKeySpec pkcs8KeySpec = ((java.security.spec.PKCS8EncodedKeySpec) (keySpec)); try { final org.apache.harmony.xnet.provider.jsse.OpenSSLKey key = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_PKCS8_PRIV_KEY_INFO(pkcs8KeySpec.getEncoded())); return org.apache.harmony.xnet.provider.jsse.OpenSSLRSAPrivateKey.getInstance(key); } catch (java.lang.Exception e) { throw new java.security.spec.InvalidKeySpecException(e); } } throw new java.security.spec.InvalidKeySpecException(( use RSAPublicKeySpec or PKCS8EncodedKeySpec; was   + (keySpec.getClass().getName()))); }
private void startStateMachineUpdaters() { try { mNwService.registerObserver(mNetlinkTracker); } catch (android.os.RemoteException e) { android.util.Log.e(mTag, ( register NetlinkTracker:   + (e.toString()))); } <START_MOD>mHandoverPolicyTracker<END_MOD>.start(); }
public void testAesCbcHmacSha512Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth<START_MOD>, false<END_MOD>); }
@java.lang.Override public com.android.ddmlib.SyncService getSyncService() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException<START_MOD>, java.lang.InterruptedException<END_MOD> { com.android.ddmlib.SyncService syncService = new com.android.ddmlib.SyncService(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), this); if (syncService.openSync()) { return syncService; } return null; }
public void testSimpleDeserialize() { java.lang.String json2 = "{\"startLine\":245}"; com.android.ide.common.blame.<START_MOD>SourcePositionRange<END_MOD> range2 = gsonDeserializer.fromJson(json2, com.android.ide.common.blame.<START_MOD>SourcePositionRange<END_MOD>.class); assertEquals(new com.android.ide.common.blame.<START_MOD>SourcePositionRange<END_MOD>(245, (-1), (-1)), range2); }
<START_MOD>@java.lang.Override public void getRat(java.lang.String callingPackage, com.android.internal.telephony.euicc.IGetRatCallback callback) { checkCallingPackage(callingPackage); }<END_MOD>
<START_MOD>private boolean isCurrentNetworkQualified(android.net.wifi.WifiConfiguration network) { if (network == null) { localLog("No current connected network."); return false; } else { localLog(((("Current connected network: " + (network.SSID)) + " , ID: ") + (network.networkId))); } if (network.ephemeral) { localLog("Current network is an ephemeral one."); return false; } if (com.android.server.wifi.WifiConfigurationUtil.isConfigForOpenNetwork(network)) { localLog("Current network is a open one."); return false; } if (mWifiInfo.is24GHz()) { localLog("Current network is 2.4GHz."); return false; } int currentRssi = mWifiInfo.getRssi(); if (((mWifiInfo.is24GHz()) && (currentRssi < (mThresholdQualifiedRssi24))) || ((mWifiInfo.is5GHz()) && (currentRssi < (mThresholdQualifiedRssi5)))) { localLog((((("Current network band=" + (mWifiInfo.is24GHz() ? "2.4GHz" : "5GHz")) + ", RSSI[") + currentRssi) + "]-acceptable but not qualified.")); return false; } return true; }<END_MOD>
void registerForNotification(int clientIf, java.lang.String address, int <START_MOD>handle, boolean enable) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM,   BLUETOOTH permission if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ((( - address= + address) +   enable:   + enable));<END_MOD> java.<START_MOD>lang.Integer connId = mClientMap.connIdByAddress(clientIf, address); if (connId != null) { gattClientRegisterForNotificationsNative(clientIf, address, handle, enable); } else { android.<END_MOD>util.<START_MOD>Log.e(com.android.bluetooth.gatt.GattService.TAG, (( - No connection for   + address) + "...")<END_MOD>); } }
private java.io.File getRootDir() { java.security.CodeSource source = getClass().getProtectionDomain().getCodeSource(); if (source != null) { java.net.URL location = source.getLocation(); try { java.io.File dir = new java.io.File(location.toURI()); assertTrue(dir.getPath(), dir.exists()); while (dir != null) { java.io.File settingsGradle = new java.io.File(dir, "settings.gradle"); if (settingsGradle.exists()) { return dir.getParentFile().getParentFile(); } java.io.File lint = new java.io.File(dir, "lint"); if ((lint.exists()) && (new java.io.File(lint, "cli").exists())) { return dir.getParentFile().getParentFile(); } <START_MOD>if (dir.getName().equals("tools")) { java.io.File base = new java.io.File(dir, "base"); if (base.exists()) { return dir.getParentFile(); } } <END_MOD>dir = dir.getParentFile(); } return null; } catch (java.net.URISyntaxException e) { fail(e.getLocalizedMessage()); } } return null; }
@java.lang.Override public java.lang.String getName() { return <START_MOD>mNetworkRecommendationsEnabled ? <END_MOD>com.android.server.wifi.RecommendedNetworkEvaluator.TAG<START_MOD> : mExternalScoreEvaluator.getName()<END_MOD>; }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); if (mHasFeature) { mUserId = mPrimaryUserId; <START_MOD>try { <END_MOD>installAppAsUser(com.android.cts.devicepolicy.DEVICE_ADMIN_APK, mUserId); setProfileOwnerOrFail((((DEVICE_ADMIN_PKG) + "/") + (ADMIN_RECEIVER_TEST_CLASS)), mUserId); } <START_MOD>catch (java.lang.Throwable throwable) { getDevice().uninstallPackage(com.android.cts.devicepolicy.DEVICE_ADMIN_PKG); throw throwable; <END_MOD>}<START_MOD> } }<END_MOD>
<START_MOD>public void putNextShort(short value) { checkType(short.class); (argumentIdx)++; frameBuf.putInt(((short) (value))); }<END_MOD>
<START_MOD>public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mMaxDataCalls); }<END_MOD>
<START_MOD>private void startThread() { ++(org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierDebuggee.threadRunCount); java.lang.System.out.println(("CountModifierDebuggee.startThread: threadRunCount=" + (org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierDebuggee.threadRunCount))); java.lang.Thread t = new java.lang.Thread(("TestThread-" + (org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierDebuggee.threadRunCount))); t.start(); try { t.join(); } catch (java.lang.InterruptedException e) { e.printStackTrace(); } }<END_MOD>
public int sendto(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetAddress inetAddress, int port) throws <START_MOD>android.os.ErrnoException, <END_MOD>java.net.SocketException { return os.sendto(fd, bytes, byteOffset, byteCount, flags, inetAddress, port); }
public java.lang.String[] getIsimImpu() { <START_MOD>return<END_MOD> <START_MOD>getIsimImpu(getSubId<END_MOD>()); }
com.android.ddmlib.RawImage getScreenshot(long timeout, java.util.concurrent.TimeUnit unit) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException<START_MOD>, java.lang.InterruptedException<END_MOD>;
public void addI8(android.support.v8.renderscript.Byte2 v) { if (shouldThunk()) { mN.addI8(new android.renderscript.Byte2(v.x, v.y)); return; } addI8(v.x); addI8(v.y); }
private void syncViewerSelection() { org.eclipse.jface.viewers.ITreeContentProvider provider = ((org.eclipse.jface.viewers.ITreeContentProvider) (<START_MOD>mImpl.<END_MOD>mTreeViewer.getContentProvider())); java.lang.Object input = <START_MOD>mImpl.<END_MOD>mTreeViewer.getInput(); if (input == null) { return; } for (java.lang.Object cat : provider.getElements(input)) { java.lang.Object[] children = provider.getElements(cat); boolean allChecked = (children.length) > 0; for (java.lang.Object child : children) { if (child instanceof com.android.sdkuilib.internal.repository.core.PkgItem) { com.android.sdkuilib.internal.repository.core.PkgItem item = ((com.android.sdkuilib.internal.repository.core.PkgItem) (child)); boolean checked = item.isChecked(); allChecked &= checked; if (checked != (<START_MOD>mImpl.<END_MOD>mTreeViewer.getChecked(item))) { if (checked) { if (!(<START_MOD>mImpl.<END_MOD>mTreeViewer.getExpandedState(cat))) { <START_MOD>mImpl.<END_MOD>mTreeViewer.setExpandedState(cat, true); } } checkAndExpandItem(item, checked, true, false); } } } if (allChecked != (<START_MOD>mImpl.<END_MOD>mTreeViewer.getChecked(cat))) { <START_MOD>mImpl.<END_MOD>mTreeViewer.setChecked(cat, allChecked); } } }
<START_MOD>@org.junit.Test public void chooseSavedNetworkWithExternalScore() { java.lang.String[] ssids = new java.lang.String[]{ "\"test1\"" }; java.lang.String[] bssids = new java.lang.String[]{ "6c:f3:7f:ae:8c:f3" }; int[] freqs = new int[]{ 5200 }; java.lang.String[] caps = new java.lang.String[]{ "[WPA2-EAP-CCMP][ESS]" }; int[] securities = new int[]{ com.android.server.wifi.WifiConfigurationTestUtil.SECURITY_PSK }; int[] levels = new int[]{ (mThresholdQualifiedRssi5G) + 8 }; java.lang.Integer[] scores = new java.lang.Integer[]{ 120 }; boolean[] meteredHints = new boolean[]{ false }; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); android.net.wifi.WifiConfiguration[] savedConfigs = scanDetailsAndConfigs.getWifiConfigs(); savedConfigs[0].useExternalScores = true; com.android.server.wifi.WifiNetworkSelectorTestUtil.configureScoreCache(mScoreCache, scanDetails, scores, meteredHints); android.net.wifi.WifiConfiguration candidate = mExternalScoreEvaluator.evaluateNetworks(scanDetails, null, null, false, true, mScoreCache, null); com.android.server.wifi.WifiConfigurationTestUtil.assertConfigurationEqual(savedConfigs[0], candidate); com.android.server.wifi.WifiNetworkSelectorTestUtil.verifySelectedScanResult(mWifiConfigManager, scanDetails.get(0).getScanResult(), candidate); }<END_MOD>
<START_MOD>public<END_MOD> static com.android.utils.Pair<com.android.resources.ResourceType, java.lang.String> parseResource(java.lang.String url) { if (url.startsWith(com.android.SdkConstants.PREFIX_THEME_REF)) { java.lang.String remainder = url.substring(com.android.SdkConstants.PREFIX_THEME_REF.length()); <START_MOD>if (url.startsWith(com.android.SdkConstants.ATTR_REF_PREFIX)) { url = (com.android.SdkConstants.PREFIX_RESOURCE_REF) + (url.substring(1)); return com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource(url); } <END_MOD>int colon = url.indexOf(':'); if (colon != (-1)) { if ((remainder.indexOf('/', colon)) == (-1)) { remainder = (((remainder.substring(0, colon)) + (com.android.SdkConstants.RESOURCE_CLZ_ATTR)) + '/') + (remainder.substring(colon)); } url = (com.android.SdkConstants.PREFIX_RESOURCE_REF) + remainder; return com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource(url); } <START_MOD>else { int slash = url.indexOf('/'); if (slash == (-1)) { url = (((com.android.SdkConstants.PREFIX_RESOURCE_REF) + (com.android.SdkConstants.RESOURCE_CLZ_ATTR)) + '/') + remainder;<END_MOD> return com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource(url); }<START_MOD> } } return com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource(url); }<END_MOD>
private void testTransitionSelection(boolean testOpen, boolean testNewTask, boolean bottomWallpaper, boolean topWallpaper, boolean topTranslucent, boolean testSlowStop, java.lang.String expectedTransit) throws java.lang.Exception {<START_MOD> if (isVrHeadset()) { return; }<END_MOD> java.lang.String bottomStartCmd = getAmStartCmd(android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME); if (bottomWallpaper) { bottomStartCmd +=   --ez USE_WALLPAPER true } if (testSlowStop) { bottomStartCmd +=   --ei STOP_DELAY 3000 } executeShellCommand(bottomStartCmd); final java.lang.String topActivityName = (topTranslucent) ? android.server.cts.ActivityManagerTransitionSelectionTests.TRANSLUCENT_TOP_ACTIVITY_NAME : android.server.cts.ActivityManagerTransitionSelectionTests.TOP_ACTIVITY_NAME; final java.lang.String[] bottomActivityArray = new java.lang.String[]{ android.server.cts.ActivityManagerTransitionSelectionTests.BOTTOM_ACTIVITY_NAME }; final java.lang.String[] topActivityArray = new java.lang.String[]{ topActivityName }; mAmWmState.computeState(mDevice, bottomActivityArray); java.lang.String topStartCmd = getAmStartCmd(topActivityName); if (testNewTask) { topStartCmd +=   -f 0x18000000 } if (topWallpaper) { topStartCmd +=   --ez USE_WALLPAPER true } if (!testOpen) { topStartCmd +=   --ei FINISH_DELAY 1000 } executeShellCommand(topStartCmd); java.lang.Thread.sleep(5000); if (testOpen) { mAmWmState.computeState(mDevice, topActivityArray); } else { mAmWmState.computeState(mDevice, bottomActivityArray); } assertEquals( wrong transition expectedTransit, mAmWmState.getWmState().getLastTransition()); }
<START_MOD>private static void buildTreeItem(com.android.hierarchyviewerlib.models.EvaluateContrastModel model, final ViewNode child) { int dotIndex = child.name.lastIndexOf('.'); java.lang.String shortName = (dotIndex == (-1)) ? child.name : child.name.substring((dotIndex + 1)); java.lang.String text = ((shortName + ": \"") + (child.namedProperties.get("text:mText").value)) + "\""; org.eclipse.swt.widgets.TreeItem item = new org.eclipse.swt.widgets.TreeItem(com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sResultsTree, org.eclipse.swt.SWT.NONE); item.setText(com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.transformText(text, com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.MAX_NUM_CHARACTERS)); item.setImage(com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.getResultImage(model.hasSufficientContrast())); com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sViewNodeForTreeItem.put(item, child); com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.buildTreeItemsForModel(model, item); }<END_MOD>
<START_MOD>private void setAudioFormat() { byte[] buffer = new byte[(com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup.length) + 2]; java.lang.String audioParameter = "set_ARC_format="; java.lang.String keyValuePairs; buffer[0] = ((byte) (com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup.length)); buffer[1] = ((byte) (mAvrPort)); for (int index = 0; index < (com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup.length); index++) { buffer[(index + 2)] = com.android.server.hdmi.RequestShortAudioDescriptorAction.paramsBackup[index]; } keyValuePairs = audioParameter + (java.util.Arrays.toString(buffer)); tv().setAudioParameters(keyValuePairs); finish(); }<END_MOD>
public void msync(long address, long byteCount, int flags) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
@org.junit.Test<START_MOD> @java.lang.Runtime @org.junit.experimental.categories.Category(com.android.jack.test.category.RuntimeRegressionTest.class)<END_MOD> public void simpleName001() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(com.android.jack.reflect.ReflectTests.TEST001_WITHOUT_SHRINK_SCHEDULABLE).compileAndRunTest(); }
public boolean p2pServDiscCancelReq(java.lang.String id)<START_MOD> { if ((com.android.server.wifi.WifiNative.HIDL_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.cancelServiceDiscovery(id); } else<END_MOD> { return doBooleanCommand((   + id)); }<START_MOD> }<END_MOD>
<START_MOD>@java.lang.Override @javax.annotation.CheckForNull public com.android.sched.vfs.VFS checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) throws com.android.sched.util.codec.ParsingException { try { java.security.Provider.Service service = messageDigestCodec.checkString(context, "SHA"); return new com.android.sched.vfs.CaseInsensitiveFS(codec.checkString(context, string), 2, 2, new com.android.sched.util.config.MessageDigestFactory(service)); } catch (com.android.sched.vfs.WrongVFSFormatException e) { throw new com.android.sched.util.codec.ParsingException(e); } }<END_MOD>
<START_MOD>private void setCodecValue(int codecType, int sampleRate, int bitsPerSample, long codecSpecific1) { android.util.Log.d(com.android.pmc.A2dpReceiver.TAG, ((((((("setCodecValue Codec Type: " + codecType) + " sampleRate: ") + sampleRate) + " bitsPerSample: ") + bitsPerSample) + " LDAC quality: ") + codecSpecific1)); android.bluetooth.BluetoothCodecConfig codecConfig = new android.bluetooth.BluetoothCodecConfig(codecType, android.bluetooth.BluetoothCodecConfig.CODEC_PRIORITY_HIGHEST, sampleRate, bitsPerSample, android.bluetooth.BluetoothCodecConfig.CHANNEL_MODE_NONE, codecSpecific1, 0, 0, 0); if ((mBluetoothA2dp) != null) { mBluetoothA2dp.setCodecConfigPreference(codecConfig); } }<END_MOD>
@javax.annotation.Nonnull private com.android.jack.ir.ast.JExpression getSimplifiedExpresssion(@javax.annotation.Nonnull com.android.jack.ir.ast.JExpression exprToSimplify) { com.android.jack.ir.ast.JMethodBody body = ((com.android.jack.ir.ast.JMethodBody) (method.getBody())); assert body != null; com.android.jack.ir.ast.JBlock bodyBlock = body.getBlock(); bodyBlock.clear(); com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest(method); tr.append(new com.android.jack.transformations.request.AppendStatement(bodyBlock, exprToSimplify.makeStatement())); tr.commit(); com.android.jack.optimizations.ExpressionSimplifier.Simplifier s = new com.android.jack.optimizations.ExpressionSimplifier.Simplifier(); s.<START_MOD>setEnableNullInstanceOf(true); s.<END_MOD>accept(method); org.junit.Assert.assertEquals(1, bodyBlock.getStatements().size()); com.android.jack.ir.ast.JStatement stmt = bodyBlock.getStatements().get(0); org.junit.Assert.assertTrue((stmt instanceof com.android.jack.ir.ast.JExpressionStatement)); com.android.jack.ir.ast.JExpression simplifiedExpr = ((com.android.jack.ir.ast.JExpressionStatement) (stmt)).getExpr(); org.junit.Assert.assertNotNull(simplifiedExpr); return simplifiedExpr; }
private <START_MOD>static <END_MOD>java.awt.image.SampleModel getSampleModel(org.eclipse.swt.graphics.PaletteData palette, int w, int h) { if ((<START_MOD>com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage.sSampleModel<END_MOD>) == null) { return <START_MOD>com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage.sSampleModel<END_MOD> = new java.awt.image.PixelInterleavedSampleModel(java.awt.image.DataBuffer.TYPE_BYTE, w, h, 4, (w * 4), <START_MOD>com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage.<END_MOD>getBandOffset(palette)); } return <START_MOD>com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage.sSampleModel<END_MOD>.createCompatibleSampleModel(w, h); }
public static long countBytes(java.lang.String s, boolean shortLength) throws java.io.UTFDataFormatException { long <START_MOD>counter<END_MOD> = 0; int <START_MOD>strLen = s.<END_MOD>length<START_MOD>(); for (int i = 0; i < strLen; i++) { char c<END_MOD> = s.<START_MOD>charAt(i); if (c<END_MOD> < <START_MOD>'') { counter<END_MOD>++<START_MOD>; if (c == ' ') { counter++; } } else if (c < 'ࠀ') { counter += 2; } else { counter += 3; } } if (shortLength<END_MOD> && (<START_MOD>counter > (((java.lang.Short.MAX_VALUE) *<END_MOD> 2<START_MOD>) + 1)<END_MOD>)) { throw new java.io.UTFDataFormatException(<START_MOD>"");<END_MOD> } return <START_MOD>counter; }<END_MOD>
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mMockInvocationListener = org.easymock.EasyMock.createMock(com.android.tradefed.result.ITestInvocationListener.class); mPython = "python"; mTest = new com.android.tradefed.testtype.VtsMultiDeviceTest() { @java.lang.Override protected <START_MOD>void updateVtsRunnerTestConfig(org<END_MOD>.<START_MOD>json<END_MOD>.<START_MOD>JSONObject<END_MOD> <START_MOD>jsonObject<END_MOD>) { return; } }; mTest.setBuild(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockBuildInfo()); mTest.setTestCasePath(com.android.tradefed.testtype.VtsMultiDeviceTestTest.TEST_CASE_PATH); mTest.setTestConfigPath(VtsMultiDeviceTest.DEFAULT_TESTCASE_CONFIG_PATH); }
@java.lang.Override public final void addOutput(byte[] data, int offset, int length) { if (!(isCancelled())) { java.lang.String s = null; try { s = new java.lang.String(data, offset, length, <START_MOD>com.android.SdkConstants.UTF_8<END_MOD>); } catch (java.io.UnsupportedEncodingException e) { s = new java.lang.String(data, offset, length); } if ((mUnfinishedLine) != null) { s = (mUnfinishedLine) + s; mUnfinishedLine = null; } mArray.clear(); int start = 0; do { int index = s.indexOf("\r\n", start); if (index == (-1)) { mUnfinishedLine = s.substring(start); break; } java.lang.String line = s.substring(start, index); if (mTrimLines) { line = line.trim(); } mArray.add(line); start = index + 2; } while (true ); if (!(mArray.isEmpty())) { java.lang.String[] lines = mArray.toArray(new java.lang.String[mArray.size()]); processNewLines(lines); } } }
<START_MOD>private void checkFastNormalizeFloat() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testFastNormalizeFloat(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFastNormalizeFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testFastNormalizeFloat(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFastNormalizeFloat: " + (e.toString()))); } }<END_MOD>
public void setVar(int index, <START_MOD>boolean<END_MOD> <START_MOD>v) { if (mUseIncSupp<END_MOD>) { mRS.<START_MOD>nIncScriptSetVarI<END_MOD>(getID(mRS), index, (<START_MOD>v<END_MOD> ? <START_MOD>1<END_MOD> : <START_MOD>0<END_MOD>)); }<START_MOD> else { mRS.nScriptSetVarI(getID(mRS), index, (v ? 1 : 0)); } }<END_MOD>
public byte readByte() {<START_MOD> synchronized(fileLock) { file.checkNotClosed(); libcore.io.NioBufferIterator.checkReadBounds(position, size, 1);<END_MOD> byte result = libcore.io.Memory.peekByte(((address) + (position))); ++(position); return result; }<START_MOD> }<END_MOD>
public static boolean checkForClass(@com.android.annotations.NonNull java.io.File apkFile, @com.android.annotations.NonNull java.lang.String expectedClassName) throws com.android.ide.common.<START_MOD>process.ProcessException<END_MOD>, java.io.IOException { java.io.File classesDex = java.io.File.createTempFile("ApkHelper", ""); classesDex.deleteOnExit(); com.android.build.gradle.integration.common.utils.ZipHelper.extractFile(apkFile, "classes.dex", classesDex); java.io.File dexDump = com.android.build.gradle.integration.common.utils.SdkHelper.getDexDump(); com.android.ide.common.<START_MOD>process.ProcessExecutor executor<END_MOD> = new com.android.ide.common.<START_MOD>process.DefaultProcessExecutor<END_MOD>(new com.android.utils.StdLogger(StdLogger.Level.ERROR<START_MOD>)); com.android.ide.common.process.ProcessInfoBuilder builder = new com.android.ide.common.process.ProcessInfoBuilder(); builder.setExecutable(dexDump); builder.addArg(classesDex.getAbsolutePath(<END_MOD>)); java.util.List<java.lang.String> <START_MOD>output = com.android.build.gradle.integration.common.utils.ApkHelper.runAndGetOutput(builder.createProcess(), executor); for (java.lang.String line : output) {<END_MOD> java.util.<START_MOD>regex.Matcher m = com.android.build.gradle.integration.common.utils.ApkHelper.PATTERN.matcher(line.trim()); if (m.matches()) { <END_MOD>java.lang.String<START_MOD> className = m.group(1); if (expectedClassName.equals(className)<END_MOD>) { return true; } } } return false; }
<START_MOD>public void testSocketChannel() throws java.lang.Exception { java.nio.channels.SocketChannel sc = java.nio.channels.SocketChannel.open(); sc.connect(server.getLocalAddress()); sc.close(); assertEquals(java.util.Collections.EMPTY_MAP, tagger.getLiveDescriptors()); }<END_MOD>
<START_MOD>public void registerForReady(android.os.Handler h, int what, java.lang.Object obj) { android.os.Registrant r = new android.os.Registrant(h, what, obj); mReadyRegistrants.add(r); if ((getState()) == (com.android.internal.telephony.IccCardConstants.State.READY)) { r.notifyRegistrant(); } }<END_MOD>
private static int getStoredEntryDataAlignment(java.lang.String entryName, int defaultAlignment) { if (defaultAlignment <= 0) { return 0; } if (entryName.endsWith(".so")) { return <START_MOD>com.android.signapk.SignApk.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES<END_MOD>; } else { return defaultAlignment; } }
<START_MOD>public void testCallHierarchyIterator() { com.android.tools.perflib.vmtrace.CallStackReconstructor reconstructor = new com.android.tools.perflib.vmtrace.CallStackReconstructor(255); reconstructor.addTraceAction(1, TraceAction.METHOD_ENTER, 10, 10); reconstructor.addTraceAction(2, TraceAction.METHOD_ENTER, 11, 11); reconstructor.addTraceAction(3, TraceAction.METHOD_ENTER, 12, 12); reconstructor.addTraceAction(3, TraceAction.METHOD_EXIT, 13, 13); reconstructor.addTraceAction(3, TraceAction.METHOD_ENTER, 14, 14); reconstructor.addTraceAction(3, TraceAction.METHOD_EXIT, 15, 15); reconstructor.addTraceAction(2, TraceAction.METHOD_EXIT, 16, 16); reconstructor.addTraceAction(5, TraceAction.METHOD_ENTER, 17, 17); reconstructor.addTraceAction(5, TraceAction.METHOD_EXIT, 18, 18); reconstructor.addTraceAction(1, TraceAction.METHOD_EXIT, 20, 20); reconstructor.addTraceAction(6, TraceAction.METHOD_ENTER, 21, 21); reconstructor.addTraceAction(6, TraceAction.METHOD_EXIT, 22, 22); com.android.tools.perflib.vmtrace.Call topLevel = reconstructor.getTopLevel(); for (java.util.Iterator<com.android.tools.perflib.vmtrace.Call> it = topLevel.getCallHierarchyIterator(); it.hasNext();) { com.android.tools.perflib.vmtrace.Call c = it.next(); java.lang.System.out.printf("%d: %s, entry: %d %d, exit: %d %d\n", c.getDepth(), c.getMethodId(), c.getEntryThreadTime(), c.getEntryGlobalTime(), c.getExitThreadTime(), c.getExitGlobalTime()); } }<END_MOD>
public java.lang.String getShortDescription() {<START_MOD> java.lang.String name = mDescriptor.getUiName();<END_MOD> java.lang.String attr = getDescAttribute(); if (attr != null) { <START_MOD>if ((attr.indexOf(name)) >= 0) { return attr; } else { <END_MOD>return java.lang.String.format( (%2$s) attr, <START_MOD>name<END_MOD>); } <START_MOD>} <END_MOD>return <START_MOD>name<END_MOD>; }
<START_MOD>public void testChannelWrite_exceptionOnCloseWhenBlocked() throws java.lang.Exception { libcore.java.nio.channels.FileIOInterruptTest.FifoReader fifoReader = new libcore.java.nio.channels.FileIOInterruptTest.FifoReader(fifoFile); fifoReader.start(); java.nio.channels.FileChannel fileOutputChannel = new java.io.FileOutputStream(fifoFile).getChannel(); libcore.java.nio.channels.FileIOInterruptTest.ChannelWriter channelWriter = new libcore.java.nio.channels.FileIOInterruptTest.ChannelWriter(fileOutputChannel); java.lang.Thread channelWriterThread = libcore.java.nio.channels.FileIOInterruptTest.createAndStartThread("ChannelWriter", channelWriter); channelWriter.waitForThreadToBlock(); fileOutputChannel.close(); libcore.java.nio.channels.FileIOInterruptTest.waitToDie(channelWriterThread); assertSame(java.nio.channels.AsynchronousCloseException.class, channelWriter.ioe.getClass()); assertFalse(channelWriter.wasInterrupted); fifoReader.tidyUp(); }<END_MOD>
<START_MOD>@org.junit.Test public void testGetDefaultSmdpAddress() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF3C148008534D44502E434F4D8108736D64732E636F6D9000"); assertEquals("SMDP.COM", mEuiccCard.getDefaultSmdpAddress()); verifyStoreData(channel, "BF3C00"); }<END_MOD>
<START_MOD>@org.junit.Test public void test_readAllLine$Path$Charset_NPE() throws java.io.IOException { try { java.nio.file.Files.readAllLines(null, java.nio.charset.Charset.forName("UTF-16")); fail(); } catch (java.lang.NullPointerException expected) { } try { java.nio.file.Files.readAllLines(filesSetup.getDataFilePath(), null); fail(); } catch (java.lang.NullPointerException expected) { } }<END_MOD>
@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((<START_MOD>(<END_MOD>mNm.getEffectsSuppressor()) == null<START_MOD>) || (mNm.getEffectsSuppressor().equals(com.android.cts.verifier.notifications.NotificationListenerVerifierActivity.VR_NOTIFICATION_SERVICE))<END_MOD>) { status = PASS; } else { logFail(); status = RETEST; delay(); } } next(); }
public final void onSmsReceived(int token, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException( not ready. } try { mListener.onSmsReceived(token, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, ( not deliver sms:   + (e.getMessage()))); acknowledgeSms(token, 0, android.telephony.ims.stub.<START_MOD>DELIVER_STATUS_ERROR_GENERIC<END_MOD>); } } }
<START_MOD>public static java.lang.String getSessionId() { synchronized(android.telecom.Log.sSingletonSync) { if ((android.telecom.Log.sSessions) != null) { return android.telecom.Log.getSessions().getSessionId(); } else { return ""; } } }<END_MOD>
<START_MOD>public static void computeFastLength(android.renderscript.cts.TestFastLength.ArgumentsFloatNFloat args) { args.ulf = 4; args.ulfRelaxed = 12; double sum = 0.0F; for (int i = 0; i < (args.inV.length); i++) { sum += (args.inV[i]) * (args.inV[i]); } args.out = ((float) (java.lang.Math.sqrt(sum))); }<END_MOD>
@org.junit.Test public void testLamba015() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA015).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
<START_MOD>public static void removeDeviceForward(com.android.ddmlib.IDevice device) { synchronized(com.android.hierarchyviewerlib.device.DeviceBridge.devicePortMap) { final java.lang.Integer localPort = com.android.hierarchyviewerlib.device.DeviceBridge.devicePortMap.get(device); if (localPort != null) { try { device.removeForward(localPort, com.android.hierarchyviewerlib.device.DeviceBridge.DEFAULT_SERVER_PORT); com.android.hierarchyviewerlib.device.DeviceBridge.devicePortMap.remove(device); } catch (com.android.ddmlib.TimeoutException e) { com.android.ddmlib.Log.e("hierarchy", ("Timeout removing port forwarding for " + device)); } catch (com.android.ddmlib.AdbCommandRejectedException e) { } catch (java.io.IOException e) { com.android.ddmlib.Log.e("hierarchy", java.lang.String.format("Failed to remove forward for device %1$s: %2$s", device, e.getMessage())); } } } }<END_MOD>
<START_MOD>@java.lang.Override public int getBasicConstraints() { return 0; }<END_MOD>
@java.lang.Override @javax.annotation.Nonnull public void libToExe(@javax.annotation.Nonnull java.io.File in, @javax.annotation.Nonnull java.io.File out, boolean zipFile) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add("java"); args.add("-cp"); args.add(jackPrebuilt.getAbsolutePath()); <START_MOD>args.add("--verbose"); args.add(verbosityLevel.name()); <END_MOD>if ((incrementalFolder) != null) { args.add(com.android.jack.experimental.incremental.Main.class.getName()); args.add("--incremental-folder"); args.add(incrementalFolder.getAbsolutePath()); } else { args.add(com.android.jack.Main.class.getName()); } if (withDebugInfos) { args.add("-D"); args.add("jack.dex.optimize=false"); } else { args.add("-D"); args.add("jack.dex.optimize=true"); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); args.add("--import"); args.add(in.getAbsolutePath()); for (java.io.File staticLib : staticLibs) { args.add("--import"); args.add(staticLib.getAbsolutePath()); } if (zipFile) { args.add("--output-dex-zip"); } else { args.add("--output-dex"); } args.add(out.getAbsolutePath()); com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(outRedirectStream); exec.setOut(errRedirectStream); exec.setVerbose(<START_MOD>isVerbose<END_MOD>); if (!(exec.run())) { throw new java.lang.RuntimeException( compiler exited with an error } }
<START_MOD>public java.lang.String toString() { return title; }<END_MOD>
public void iccCloseLogicalChannel(int channel, android.os.Message response) { loglocal(( Logical Channel:   + channel)); <START_MOD>getCommandsInterface()<END_MOD>.iccCloseLogicalChannel(channel, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_CLOSE_LOGICAL_CHANNEL_DONE, response)); }
private void playUri(final android.net.Uri uri, long timeToPlayMs, int usage, int contentType) throws java.lang.Exception { <START_MOD>boolean isMusicPlayingBeforeTest = false; if (mAudioManager.isMusicActive()) { isMusicPlayingBeforeTest = true; } <END_MOD>android.media.MediaPlayer mp = new android.media.MediaPlayer(); assertNotNull(mp); mp.setDataSource(mContext, uri); mp.setAudioAttributes(new android.media.AudioAttributes.Builder().setUsage(usage).setContentType(contentType).build()); mp.prepare(); mp.start(); java.lang.Thread.sleep(timeToPlayMs); mp.stop(); mp.release(); java.lang.Thread.sleep(timeToPlayMs); <START_MOD>if (!isMusicPlayingBeforeTest) { <END_MOD>assertFalse(mAudioManager.isMusicActive()); }<START_MOD> }<END_MOD>
<START_MOD>public boolean isDualConstant() { return (secondIndexType) != (IndexType.NONE); }<END_MOD>
<START_MOD>static android.net.ip.IpReachabilityMonitor.Config makeDefault(android.content.Context context, java.lang.String iface) { final java.lang.String lockName = ((android.net.ip.IpReachabilityMonitor.TAG) + ".") + iface; final android.os.PowerManager pm = ((android.os.PowerManager) (context.getSystemService(Context.POWER_SERVICE))); final android.os.PowerManager.WakeLock lock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, lockName); return new android.net.ip.IpReachabilityMonitor.Config() { public void acquireWakeLock(long durationMs) { lock.acquire(durationMs); } }; }<END_MOD>
public void setAdvertisingData(android.bluetooth.le.AdvertiseData advertiseData) { try { <START_MOD>mGatt<END_MOD>.setAdvertisingData(this.<START_MOD>mAdvertiserId<END_MOD>, advertiseData); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG,   exception -   e); } }
private boolean <START_MOD>sendNotificationThroughDefaultDialer<END_MOD>(java.lang.Integer count, java.lang.String number, android.app.PendingIntent pendingIntent, boolean isSettingsIntent<START_MOD>, android.os.UserHandle userHandle) { if (shouldManageNotificationThroughDefaultDialer(userHandle)) { android.content.Intent intent = getShowVoicemailIntentForDefaultDialer(userHandle); intent.setFlags(Intent.FLAG_RECEIVER_FOREGROUND); intent.setAction(TelephonyManager.ACTION_SHOW_VOICEMAIL_NOTIFICATION); if (count<END_MOD> != null) { <START_MOD>intent.putExtra(TelephonyManager.EXTRA_NOTIFICATION_COUNT, count); } if ((count == null) || (count > 0)) { if (!(android.text.TextUtils.isEmpty(number))) { intent.putExtra(TelephonyManager.EXTRA_VOICEMAIL_NUMBER, number); } if (pendingIntent<END_MOD> != null) { intent.putExtra(<START_MOD>(isSettingsIntent ? android.telephony.TelephonyManager.EXTRA_LAUNCH_VOICEMAIL_SETTINGS_INTENT : android.telephony.TelephonyManager.EXTRA_CALL_VOICEMAIL_INTENT), <END_MOD>pendingIntent<START_MOD>); } } android.util.Log.i("twyen",   sent<END_MOD> mContext.<START_MOD>sendBroadcastAsUser(intent, userHandle, android.Manifest.permission.READ_PHONE_STATE<END_MOD>); return true; } return false; }
@java.lang.Override public void hold(java.lang.String callId<START_MOD>, android.telecom.Logging.Session.Info sessionInfo<END_MOD>) {<START_MOD> android.telecom.Log.startExternalSession(sessionInfo, android.telecom.ConnectionService.SESSION_HOLD); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = android.telecom.Log.createSubsession();<END_MOD> mHandler.obtainMessage(android.telecom.ConnectionService.MSG_HOLD, <START_MOD>args<END_MOD>).sendToTarget(); }<START_MOD> finally { android.telecom.Log.endSession(); } }<END_MOD>
<START_MOD>public void testAES_ECB_NoPadding_IncrementalUpdate_Success() throws java.lang.Exception { javax.crypto.SecretKey key = new javax.crypto.spec.SecretKeySpec(libcore.javax.crypto.CipherTest.AES_128_KEY, "AES"); javax.crypto.Cipher c = javax.crypto.Cipher.getInstance("AES/ECB/NoPadding"); c.init(javax.crypto.Cipher.ENCRYPT_MODE, key); for (int i = 0; i < ((libcore.javax.crypto.CipherTest.AES_128_TestVector_1_PKCS5Padded.length) - 1); i++) { final byte[] outputFragment = c.update(libcore.javax.crypto.CipherTest.AES_128_TestVector_1_PKCS5Padded, i, 1); assertNotNull(outputFragment); assertEquals(0, outputFragment.length); } final byte[] output = c.doFinal(libcore.javax.crypto.CipherTest.AES_128_TestVector_1_PKCS5Padded, ((libcore.javax.crypto.CipherTest.AES_128_TestVector_1_PKCS5Padded.length) - 1), 1); assertNotNull(output); assertEquals(libcore.javax.crypto.CipherTest.AES_128_TestVector_1_PKCS5Padded.length, output.length); assertTrue(java.util.Arrays.equals(libcore.javax.crypto.CipherTest.AES_128_TestVector_1_PKCS5Padded_Encrypted, output)); }<END_MOD>
<START_MOD>@java.lang.Override protected int compareTo0(@javax.annotation.Nonnull com.android.jack.dx.rop.cst.Constant other) { assert other instanceof com.android.jack.dx.rop.cst.CstMethodHandleRef; int cmp = getKind().compareTo(((com.android.jack.dx.rop.cst.CstMethodHandleRef) (other)).getKind()); if (cmp != 0) { return cmp; } return getMemberRef().compareTo(((com.android.jack.dx.rop.cst.CstMethodHandleRef) (other)).getMemberRef()); }<END_MOD>
@com.googlecode.android_scripting.rpc.Rpc(description =   Bluetooth Gatt Services public java.util.ArrayList<java.lang.String> gattClientGetDiscoveredDescriptorUuids(@com.googlecode.android_scripting.rpc.RpcParameter(name = "index") java.lang.Integer index, @com.googlecode.android_scripting.rpc.RpcParameter(name = "serviceIndex") java.lang.Integer serviceIndex, @com.googlecode.android_scripting.rpc.RpcParameter(name = <START_MOD>"characteristicIndex") java.lang.Integer characteristicIndex<END_MOD>) throws java.lang.Exception { if ((mBluetoothGattDiscoveredServicesList.get(index)) <START_MOD>==<END_MOD> null) { <START_MOD>throw new java.lang.Exception(( index:   + index)); } <END_MOD>if ((mBluetoothGattDiscoveredServicesList.get(index).get(serviceIndex)) <START_MOD>==<END_MOD> null) { <START_MOD>throw new java.lang.Exception(( serviceIndex:   + serviceIndex)); } java.util.List<<END_MOD>android.bluetooth.<START_MOD>BluetoothGattCharacteristic> charList<END_MOD> = mBluetoothGattDiscoveredServicesList.get(index).get(serviceIndex)<START_MOD>.getCharacteristics(); if ((charList.get(characteristicIndex)) == null) { throw new java.lang.Exception(( characteristicIndex:   + characteristicIndex)); }<END_MOD> java.util.<START_MOD>List<android.bluetooth.BluetoothGattDescriptor> descList = charList.get(characteristicIndex).getDescriptors(); java.lang.System.out.println((   + (descList.toString())));<END_MOD> java.util.ArrayList<java.lang.String> uuidList = new java.util.ArrayList<java.lang.String>(); for (android.bluetooth.BluetoothGattDescriptor mDesc : <START_MOD>descList<END_MOD>) { uuidList.add(mDesc.getUuid().toString()); } return uuidList; }
<START_MOD>@java.lang.Override public void mouseClicked(java.awt.event.MouseEvent mouseEvent) { list.updateUI(); if (!(valueChanged)) { java.lang.System.out.println(("valueChanged = " + (valueChanged))); java.lang.System.out.println("in mouseClicked function"); java.lang.System.out.println(((("X = " + (mouseEvent.getX())) + "; Y = ") + (mouseEvent.getY()))); com.intellij.ui.components.JBList theList = ((com.intellij.ui.components.JBList) (mouseEvent.getSource())); int index = theList.locationToIndex(mouseEvent.getPoint()); if (index >= 0) { boolean inPayUrl = com.google.gct.login.ui.UsersListCellRenderer.inPlayConsoleUrl(mouseEvent.getPoint(), index); java.lang.System.out.println(("in play url = " + inPayUrl)); if (!inPayUrl) { boolean inConsoleUrl = com.google.gct.login.ui.UsersListCellRenderer.inCloudConsoleUrl(mouseEvent.getPoint(), index); java.lang.System.out.println(("in console url = " + inConsoleUrl)); } } } valueChanged = false; }<END_MOD>
<START_MOD>public int getCardId() { return 0; }<END_MOD>
<START_MOD>protected boolean canDisableNetworkMetering() throws java.lang.Exception { final android.net.NetworkInfo info = mCm.getActiveNetworkInfo(); assertNotNull("Could not get active network", info); if ((info.getType()) == (android.net.ConnectivityManager.TYPE_WIFI)) { return true; } return !(mCm.isActiveNetworkMetered()); }<END_MOD>
@org.junit.Test public void testTransportModeTransformBinderDeath() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); refcountedRecord.binderDied(); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT)<START_MOD>, anyInt(), anyInt()<END_MOD>); verify(mMockNetd).ipSecDeleteSecurityAssociation(eq(createTransformResp.resourceId), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN)<START_MOD>, anyInt(), anyInt()<END_MOD>); assertEquals(0, userRecord.mTransformQuotaTracker.mCurrent); try { userRecord.mTransformRecords.getRefcountedResourceOrThrow(createTransformResp.resourceId); fail( IllegalArgumentException on attempt to access deleted resource } catch (java.lang.IllegalArgumentException expected) { } }
<START_MOD>private void checkFmaxFloat2Float2() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testFmaxFloat2Float2(inX, out); verifyResultsFmaxFloat2Float2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFmaxFloat2Float2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testFmaxFloat2Float2(inX, out); verifyResultsFmaxFloat2Float2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFmaxFloat2Float2: " + (e.toString()))); } }<END_MOD>
<START_MOD>@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testInterfaceThis() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_51).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }<END_MOD>
<START_MOD>private void checkDegreesFloat2() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inValue, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testDegreesFloat2(inValue, out); verifyResultsDegreesFloat2(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testDegreesFloat2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testDegreesFloat2(inValue, out); verifyResultsDegreesFloat2(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testDegreesFloat2: " + (e.toString()))); } }<END_MOD>
@java.lang.Override public final int startActivityAsUser(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int <START_MOD>struntimeFlags<END_MOD>, android.app.ProfilerInfo profilerInfo, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller("startActivity"); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, "startActivity", null); return mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, <START_MOD>struntimeFlags<END_MOD>, profilerInfo, null, null, bOptions, false, userId, null, null, "startActivityAsUser"); }
<START_MOD>@org.junit.Test public void testUpdate_oneScored_oneUnscored() { when(mNetworkScoreCache.isScoredNetwork(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL1.getScanResult())).thenReturn(true); when(mNetworkScoreCache.isScoredNetwork(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL2.getScanResult())).thenReturn(false); mRecommendedNetworkEvaluator.update(com.google.android.collect.Lists.newArrayList(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL1, com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL2)); verify(mNetworkScoreManager).requestScores(mNetworkKeyArrayCaptor.capture()); assertEquals(1, mNetworkKeyArrayCaptor.getValue().length); assertEquals(new android.net.NetworkKey(new android.net.WifiKey(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL2.getSSID(), com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL2.getBSSIDString())), mNetworkKeyArrayCaptor.getValue()[0]); }<END_MOD>
<START_MOD>@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testMultipleDefaults_superclass_right() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_50).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }<END_MOD>
<START_MOD>@com.android.annotations.NonNull public static com.sun.org.apache.xml.internal.serialize.OutputFormat getPrettyPrintFormat() { com.sun.org.apache.xml.internal.serialize.OutputFormat format = new com.sun.org.apache.xml.internal.serialize.OutputFormat(); format.setLineWidth(120); format.setIndenting(true); format.setIndent(4); format.setEncoding("UTF-8"); format.setOmitComments(true); return format; }<END_MOD>
<START_MOD>void stop();<END_MOD>
void multiplyByPositiveInt(int w) { java.math.NativeBN.BN_mul_word(this.<START_MOD>nativePtr<END_MOD>, w); }
<START_MOD>private void ensureKeystoreOperationInitialized() { if ((mMainDataStreamer) != null) { return; } if ((mKey) == null) { throw new java.lang.IllegalStateException("Not initialized"); } android.security.keymaster.KeymasterArguments keymasterInputArgs = new android.security.keymaster.KeymasterArguments(); keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_ALGORITHM, mAlgorithm); keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_BLOCK_MODE, mBlockMode); keymasterInputArgs.addInt(KeymasterDefs.KM_TAG_PADDING, mPadding); addAlgorithmSpecificParametersToBegin(keymasterInputArgs); android.security.keymaster.KeymasterArguments keymasterOutputArgs = new android.security.keymaster.KeymasterArguments(); android.security.keymaster.OperationResult opResult = mKeyStore.begin(mKey.getAlias(), (mEncrypting ? android.security.keymaster.KeymasterDefs.KM_PURPOSE_ENCRYPT : android.security.keymaster.KeymasterDefs.KM_PURPOSE_DECRYPT), true, keymasterInputArgs, mAdditionalEntropyForBegin, keymasterOutputArgs); mAdditionalEntropyForBegin = null; if (opResult == null) { throw new android.security.KeyStoreConnectException(); } else if (((opResult.resultCode) != (android.security.keymaster.KeymasterDefs.KM_ERROR_OK)) && ((opResult.resultCode) != (KeyStore.NO_ERROR))) { throw new android.security.CryptoOperationException("Failed to start keystore operation", android.security.KeymasterUtils.getExceptionForKeymasterError(opResult.resultCode)); } if ((opResult.token) == null) { throw new android.security.CryptoOperationException("Keystore returned null operation token"); } mOperationToken = opResult.token; loadAlgorithmSpecificParametersFromBeginResult(keymasterOutputArgs); mFirstOperationInitiated = true; mMainDataStreamer = new android.security.KeyStoreCryptoOperationChunkedStreamer(new android.security.KeyStoreCryptoOperationChunkedStreamer.MainDataStream(mKeyStore, opResult.token)); }<END_MOD>
<START_MOD>public java.util.Collection<java.io.File> getNdkOutputDirectories() { return ndkOutputDirectories; }<END_MOD>
boolean onMediaButton(int type) { if (hasAnyCalls()) { <START_MOD>com.android.server.telecom.Call ringingCall = getFirstCallWithState(CallState.RINGING); <END_MOD>if ((HeadsetMediaButton.SHORT_PRESS) == type) { <START_MOD>if (ringingCall == null) { <END_MOD>com.android.server.telecom.Call <START_MOD>callToHangup<END_MOD> = getFirstCallWithState(CallState.RINGING<START_MOD>, CallState.DIALING, CallState.PULLING, CallState.ACTIVE, CallState.ON_HOLD); android.telecom.Log.event(callToHangup, Log.Events.INFO,   btn short press - end call. if (callToHangup != null) { callToHangup.disconnect(); return true; } } else { ringingCall.answer(VideoProfile.STATE_AUDIO_ONLY); return true; } } else if ((HeadsetMediaButton.LONG_PRESS)<END_MOD> == <START_MOD>type) { if (ringingCall != <END_MOD>null) { <START_MOD>android.telecom.Log.event(getForegroundCall(), Log.Events.INFO,   btn long press - reject ringingCall.reject(false, null); } else { android.telecom.Log.event(getForegroundCall(), Log.Events.INFO,   btn long press - mute <END_MOD>mCallAudioManager.toggleMute(); <START_MOD>} <END_MOD>return true; } <START_MOD>}<END_MOD> return false; }
public java.net.URL getEntryUrlOrNull(java.lang.String entryName) { <START_MOD>java.util.zip.ZipEntry entry = findEntryWithDirectoryFallback(entryName); <END_MOD>if (<START_MOD>entry<END_MOD> != null) {<START_MOD> entryName = entry.getName();<END_MOD> try { return new java.net.URL("jar", null, (-1), (((fileUri) + "!/") + entryName), this); } catch (java.net.MalformedURLException e) { throw new java.lang.RuntimeException( entry name e); } } return null; }
private static org.eclipse.jdt.core.IClasspathContainer allocateLibraryContainer(org.eclipse.jdt.core.IJavaProject javaProject) { final org.eclipse.core.resources.IProject iProject = javaProject.getProject(); com.android.ide.eclipse.adt.<START_MOD>internal.sdk.ProjectState state<END_MOD> = com.android.ide.eclipse.adt.<START_MOD>internal.sdk.Sdk.getProjectState(iProject<END_MOD>); if (<START_MOD>state<END_MOD> == null) { return null; } <START_MOD>java.util.List<org.eclipse.jdt.core.IClasspathEntry> entries = new java.util.ArrayList<org.eclipse.jdt.core.IClasspathEntry>(); java.util.Set<java.io.File> jarFiles = new java.util.HashSet<java.io.File>(); java.util.Set<org.eclipse.core.resources.IProject> refProjects = new java.util.HashSet<org.eclipse.core.resources.IProject>(); java.util.List<org.eclipse.core.resources.IProject> libProjects = state.getFullLibraryProjects(); for (org.eclipse.core.resources.IProject libProject : libProjects)<END_MOD> { <START_MOD>com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getDependencyListFromClasspath(libProject, refProjects, jarFiles, true); } com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.processReferencedProjects(iProject, refProjects, jarFiles); com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.getJarListFromLibsFolder(iProject, jarFiles); for (org.eclipse.core.resources.IProject p : refProjects) { entries.add(<END_MOD>org.eclipse.jdt.core.<START_MOD>JavaCore.newProjectEntry(p.getFullPath(), true)); } entries.addAll(com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.convertJarsToClasspathEntries(iProject, jarFiles)); return com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.allocateContainer(<END_MOD>javaProject<START_MOD>, entries, new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.<END_MOD>AdtConstants.CONTAINER_LIBRARIES<START_MOD>),   Libraries<END_MOD> }
@java.lang.Override public void run() { mResult = mCache.get("foo"); }
<START_MOD>private static void longToDouble() { Main.assertDoubleEquals(1.0, Main.$opt$LongToDouble(1L)); Main.assertDoubleEquals(0.0, Main.$opt$LongToDouble(0L)); Main.assertDoubleEquals((-1.0), Main.$opt$LongToDouble((-1L))); Main.assertDoubleEquals(51.0, Main.$opt$LongToDouble(51L)); Main.assertDoubleEquals((-51.0), Main.$opt$LongToDouble((-51L))); Main.assertDoubleEquals(2.147483647E9, Main.$opt$LongToDouble(2147483647L)); Main.assertDoubleEquals((-2.147483647E9), Main.$opt$LongToDouble((-2147483647L))); Main.assertDoubleEquals((-2.147483648E9), Main.$opt$LongToDouble((-2147483648L))); Main.assertDoubleEquals(2.147483648E9, Main.$opt$LongToDouble(2147483648L)); Main.assertDoubleEquals((-2.147483649E9), Main.$opt$LongToDouble((-2147483649L))); Main.assertDoubleEquals(4.294967296E9, Main.$opt$LongToDouble(4294967296L)); Main.assertDoubleEquals(1.40739635871745E14, Main.$opt$LongToDouble(140739635871745L)); Main.assertDoubleEquals((-1.40739635871745E14), Main.$opt$LongToDouble((-140739635871745L))); Main.assertDoubleEquals(9.223372036854776E18, Main.$opt$LongToDouble(9223372036854775807L)); Main.assertDoubleEquals((-9.223372036854776E18), Main.$opt$LongToDouble((-9223372036854775807L))); Main.assertDoubleEquals((-9.223372036854776E18), Main.$opt$LongToDouble(-9223372036854775808L)); }<END_MOD>
<START_MOD>@org.junit.Before public void setup() throws java.lang.Exception { android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, "setup"); java.io.File applicationDataDir = new java.io.File(android.support.test.InstrumentationRegistry.getTargetContext().getApplicationInfo().dataDir); com.android.framework.multidexlegacytestservices.test2.ServicesTests.clearDirContent(applicationDataDir); targetFilesDir = android.support.test.InstrumentationRegistry.getTargetContext().getFilesDir(); android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, "setup done"); }<END_MOD>
public void registerJavaArtifact(@com.android.annotations.NonNull java.lang.String name, @com.android.annotations.NonNull com.android.build.gradle.api.BaseVariant variant, @com.android.annotations.NonNull java.lang.String assembleTaskName, @com.android.annotations.NonNull java.lang.String javaCompileTaskName, @com.android.annotations.NonNull java.util.Collection<java.io.File> generatedSourceFolders, @com.android.annotations.NonNull java.lang.Iterable<java.lang.String> ideSetupTaskNames, @com.android.annotations.NonNull org.gradle.api.artifacts.Configuration configuration, @com.android.annotations.NonNull java.io.File classesFolder, @com.android.annotations.<START_MOD>NonNull java.io.File runtimeJavaResourecesFolder, @com.android.annotations.<END_MOD>Nullable com.android.builder.model.SourceProvider sourceProvider) { com.android.builder.model.ArtifactMetaData artifactMetaData = extraArtifactMap.get(name); if (artifactMetaData == null) { throw new java.lang.IllegalArgumentException( with name $name is not yet registered. Use registerArtifactType() } if ((artifactMetaData.getType()) != (com.android.builder.model.ArtifactMetaData.TYPE_JAVA)) { throw new java.lang.IllegalArgumentException( with name $name is not of type JAVA } com.android.builder.model.JavaArtifact artifact = new com.android.build.gradle.internal.model.JavaArtifactImpl(name, assembleTaskName, javaCompileTaskName, ideSetupTaskNames, generatedSourceFolders, classesFolder, <START_MOD>runtimeJavaResourecesFolder, <END_MOD>new com.android.build.gradle.internal.ConfigurationDependencies(configuration), sourceProvider, null); extraJavaArtifacts.put(variant.getName(), artifact); }
<START_MOD>static java.nio.ByteBuffer getAndroidManifestFromApk(java.util.List<com.android.apksig.internal.zip.CentralDirectoryRecord> cdRecords, com.android.apksig.util.DataSource lhfSection) throws com.android.apksig.zip.ZipFormatException, java.io.IOException { com.android.apksig.internal.zip.CentralDirectoryRecord androidManifestCdRecord = null; for (com.android.apksig.internal.zip.CentralDirectoryRecord cdRecord : cdRecords) { if (com.android.apksig.ApkSigner.ANDROID_MANIFEST_ZIP_ENTRY_NAME.equals(cdRecord.getName())) { androidManifestCdRecord = cdRecord; break; } } if (androidManifestCdRecord == null) { return null; } return java.nio.ByteBuffer.wrap(com.android.apksig.internal.zip.LocalFileRecord.getUncompressedData(lhfSection, androidManifestCdRecord, lhfSection.size())); }<END_MOD>
<START_MOD>public void testProcessRunTimeout() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.TIMED_OUT); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertEquals(interruptMessage, null); assertEquals(commandResult.getStatus(), CommandStatus.TIMED_OUT); }<END_MOD>
<START_MOD>@java.lang.Override public void exit() { removeMessages(com.android.bluetooth.btservice.AdapterState.BLE_START_TIMEOUT); }<END_MOD>
@java.lang.Override void test() { com.android.cts.verifier.notifications.MockListener.MockListener.probeListenerStatus(mContext, new com.android.cts.verifier.notifications.MockListener.MockListener.StatusCatcher() { @java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((<START_MOD>(<END_MOD>mNm.getEffectsSuppressor()) == null) <START_MOD>|| (mNm.getEffectsSuppressor().equals(com.android.cts.verifier.notifications.NotificationListenerVerifierActivity.VR_NOTIFICATION_SERVICE))) <END_MOD>{ status = PASS; } else { status = FAIL; } } next(); } }); delay(); }
@java.lang.Override public java.lang.String parseCurrency(android.icu.dev.test.format.DataDrivenNumberFormatTestData tuple) { android.icu.<START_MOD>dev.test.format<END_MOD>.DecimalFormat_ICU58 fmt = createDecimalFormat(tuple); java.text.ParsePosition ppos = new java.text.ParsePosition(0); CurrencyAmount currAmt = fmt.parseCurrency(tuple.parse, ppos); if ((ppos.getIndex()) == 0) { return (( failed; got   + currAmt) +   but expected   + (tuple.output); } if (tuple.output.equals("fail")) { return null; } java.lang.Number expected = android.icu.dev.test.format.NumberFormatDataDrivenTest.toNumber(tuple.output); java.lang.Number actual = currAmt.getNumber(); if ((((expected.doubleValue()) != (actual.doubleValue())) && (!(java.lang.Double.isNaN(expected.doubleValue())))) && (!(java.lang.Double.isNaN(expected.doubleValue())))) { return ((   + expected) +   got:   + actual; } if (!(tuple.outputCurrency.equals(currAmt.getCurrency().toString()))) { return (( currency:   + (tuple.outputCurrency)) +   got:   + (currAmt.getCurrency()); } return null; }
<START_MOD>private void onDeviceLoaded(byte capabilities, byte sinkId, byte[] address) { com.android.bluetooth.hearingaid.HearingAidStackEvent event = new com.android.bluetooth.hearingaid.HearingAidStackEvent(HearingAidStackEvent.EVENT_TYPE_DEVICE_LOADED); event.device = getDevice(address); event.valueInt1 = capabilities; event.valueInt2 = sinkId; if (com.android.bluetooth.hearingaid.HearingAidNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidNativeInterface.TAG, ("onAudioStateChanged: " + event)); } sendMessageToService(event); }<END_MOD>
<START_MOD>private void checkCospiFloat() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testCospiFloat(in, out); verifyResultsCospiFloat(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testCospiFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testCospiFloat(in, out); verifyResultsCospiFloat(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testCospiFloat: " + (e.toString()))); } }<END_MOD>
void deviceConnected(java.lang.String bdaddr, boolean absoluteVolume) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ((( bdaddr= + bdaddr) +   absoluteVolume= + absoluteVolume)); mAudioManager.avrcpSupportsAbsoluteVolume(bdaddr, absoluteVolume); <START_MOD>com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.AVRCP); <END_MOD>}
void dumpProto(com.android.bluetooth.btservice.BluetoothProto.BluetoothLog proto) { synchronized(<START_MOD>ScanStats.<END_MOD>mScanEvents) { for (com.android.bluetooth.btservice.BluetoothProto.ScanEvent event : <START_MOD>ScanStats.<END_MOD>mScanEvents) { proto.addScanEvent(event); } } }
@java.lang.Override public void invokeOemRilRequestRaw(byte[] data, android.os.Message response) { <START_MOD>android.hardware.radio.V1_0.IOemHook oemHookProxy = getOemHookProxy(response); if (oemHookProxy != null) { <END_MOD>com.android.internal.telephony.RILRequest rr = <START_MOD>obtainRequest<END_MOD>(com.android.internal.telephony.RIL_REQUEST_OEM_HOOK_RAW, response, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) <START_MOD>{ <END_MOD>riljLog(((((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "[") + (com.android.internal.telephony.uicc.IccUtils.bytesToHexString(data))) + "]")); <START_MOD>} try { oemHookProxy.sendRequestRaw(rr.mSerial, com.android.internal.telephony.RIL.primitiveArrayToArrayList<END_MOD>(data)<START_MOD>); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "invokeOemRilRequestStrings", e); } } }<END_MOD>
@org.junit.Test public void testOemPaid() { android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(); <START_MOD>assertTrue(<END_MOD>nc.<START_MOD>hasUnwantedCapability<END_MOD>(<START_MOD>android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)<END_MOD>); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)<START_MOD>); nc.maybeMarkCapabilitiesRestricted(<END_MOD>); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); nc.addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID); nc.maybeMarkCapabilitiesRestricted(); assertTrue(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID)); assertFalse(nc.hasCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_RESTRICTED)); }
public void testAesCbcHmacSha384Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.<START_MOD>getKey(256)<END_MOD>); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, <START_MOD>android.net.cts.IpSecManagerTest.getKey<END_MOD>(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, <START_MOD>null, <END_MOD>true, 1, false); <START_MOD>checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); <END_MOD>}
<START_MOD>private void processLockedState() { if ((mUiccApplication) == null) { return; } com.android.internal.telephony.IccCardStatus.PinState pin1State = mUiccApplication.getPin1State(); if (pin1State == (com.android.internal.telephony.IccCardStatus.PinState.PINSTATE_ENABLED_PERM_BLOCKED)) { setExternalState(State.PERM_DISABLED); return; } com.android.internal.telephony.IccCardApplicationStatus.AppState appState = mUiccApplication.getState(); switch (appState) { case APPSTATE_PIN : mPinLockedRegistrants.notifyRegistrants(); setExternalState(State.PIN_REQUIRED); break; case APPSTATE_PUK : setExternalState(State.PUK_REQUIRED); break; } }<END_MOD>
private void testConnectViaDirectProxyToHttps(libcore.java.net.URLConnectionTest.ProxyConfig proxyConfig) throws java.lang.Exception { TestSSLContext testSSLContext = <START_MOD>createTestSSLContext<END_MOD>(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), false); server.enqueue(new com.google.mockwebserver.MockResponse().setBody( response comes via HTTPS server.play(); java.net.URL url = server.getUrl("/foo"); javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (proxyConfig.connect(server, url))); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); assertContent( response comes via HTTPS connection); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); assertEquals( /foo HTTP/1.1 request.getRequestLine()); }
<START_MOD>private static boolean startsWithMinusSign(java.lang.CharSequence cs, java.lang.String minusSign) { for (int i = 0; i < (minusSign.length()); ++i) { if ((minusSign.charAt(i)) != (cs.charAt(i))) { return false; } } return true; }<END_MOD>
@com.android.internal.annotations.VisibleForTesting public static android.net.NetworkStats javaReadNetworkStatsDetail(java.io.File detailPath, int limitUid, java.lang.String[] limitIfaces, int limitTag) throws java.io.IOException { final android.os.StrictMode.ThreadPolicy savedPolicy = android.os.StrictMode.allowThreadDiskReads(); final android.net.NetworkStats stats = new android.net.NetworkStats(android.os.SystemClock.elapsedRealtime(), 24); final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(); int idx = 1; int lastIdx = 1; com.android.internal.util.ProcFileReader reader = null; try { reader = new com.android.internal.util.ProcFileReader(new java.io.FileInputStream(detailPath)); reader.finishLine(); while (reader.hasMoreData()) { idx = reader.nextInt(); if (idx != (lastIdx + 1)) { throw new java.net.ProtocolException(((( idx= + idx) +   after lastIdx= + lastIdx)); } lastIdx = idx; entry.iface = reader.nextString(); entry.tag = kernelToTag(reader.nextString()); entry.uid = reader.nextInt(); entry.set = reader.nextInt(); entry.rxBytes = reader.nextLong(); entry.rxPackets = reader.nextLong(); entry.txBytes = reader.nextLong(); entry.txPackets = reader.nextLong(); if ((((limitIfaces == null) || (com.android.internal.util.ArrayUtils.contains(limitIfaces, entry.iface))) && ((limitUid == (<START_MOD>android.net.NetworkStats.<END_MOD>UID_ALL)) || (limitUid == (entry.uid)))) && ((limitTag == (<START_MOD>android.net.NetworkStats.<END_MOD>TAG_ALL)) || (limitTag == (entry.tag)))) { stats.addValues(entry); } reader.finishLine(); } } catch (java.lang.NullPointerException | java.lang.NumberFormatException e) { throw new java.net.ProtocolException(( parsing idx   + idx), e); } finally { libcore.io.IoUtils.closeQuietly(reader); android.os.StrictMode.setThreadPolicy(savedPolicy); } return stats; }
@org.junit.Test public void testCompile017() throws java.lang.Exception { java.lang.String packageName = "com.android.jack.switchstatement.test017.jack"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> <START_MOD>input1<END_MOD> = com.google.common.collect.Maps.newHashMap(); <START_MOD>{ java.lang.String classPrefix = (packageName.replace('.', '-')) + "-"; input1<END_MOD>.put("Enum1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + <START_MOD>"Enum1$Enum1_"), false)); input1.put("Enum1$Enum1_", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); input1<END_MOD>.put("Enum1$Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + <START_MOD>"Enum1$Enum1_"<END_MOD>), true)); <START_MOD>} java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input2 = com.google.common.collect.Maps.newHashMap(); { java.lang.String classPrefix = <END_MOD>(packageName<START_MOD>.replace('.', '_')) + "_"; input2.put("Enum1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); input2.put("Enum1$Enum1_", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), false)); input2.put("Enum1$Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum1_"), true)<END_MOD>); }<START_MOD> compileCode(packageName, input1, input2); }<END_MOD>
public void addU16(int v) { if (shouldThunk()) { mN.addU16(v); return; } if ((v < 0) || (v > 65535)) { android.util.Log.e("rs", ((   + v) +   ) throw new java.lang.IllegalArgumentException( value out of range for type } align(2); mData[((mPos)++)] = ((byte) (v & 255)); mData[((mPos)++)] = ((byte) (v >> 8)); }
<START_MOD>@java.lang.Override public void endTraceMarked(com.android.jack.ir.ast.JNode node) { composedStatus.pop(); for (com.android.jack.analysis.tracer.TracerBrush config : brushes) { config.endTraceMarked(node); } }<END_MOD>
<START_MOD>private static char intToHexDigit(int b) { if (b < 10) { return ((char) ('0' + b)); } else { return ((char) (('a' + b) - 10)); } }<END_MOD>
public void fillInNotifierBundle(android.os.Bundle m) { m.putInt("GsmSignalStrength", mGsmSignalStrength); m.putInt("GsmBitErrorRate", mGsmBitErrorRate); m.putInt("CdmaDbm", mCdmaDbm); m.putInt("CdmaEcio", mCdmaEcio); m.putInt("EvdoDbm", mEvdoDbm); m.putInt("EvdoEcio", mEvdoEcio); m.putInt("EvdoSnr", mEvdoSnr); m.putInt("LteSignalStrength", mLteSignalStrength); m.putInt("LteRsrp", mLteRsrp); m.putInt("LteRsrq", mLteRsrq); m.putInt("LteRssnr", mLteRssnr); m.putInt("LteCqi", mLteCqi); m.putInt("TdScdma", mTdScdmaRscp); m.putBoolean("isGsm", java.lang.Boolean.<START_MOD>parseBoolean<END_MOD>(isGsm)); }
@java.lang.Override public void loadAnnotations(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loading, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader classOrInterfaceLoader) { com.android.jack.jayce.v0002.io.ExportSession exportSession = new com.android.jack.jayce.v0002.io.ExportSession(<START_MOD>classOrInterfaceLoader<END_MOD>.<START_MOD>getSession<END_MOD>(), com.android.jack.jayce.NodeLevel.STRUCTURE); for (com.android.jack.jayce.v0002.nodes.NAnnotation annotation : annotations) { com.android.jack.ir.ast.JAnnotation annotationLiteral = annotation.exportAsJast(exportSession); loading.addAnnotation(annotationLiteral); annotationLiteral.updateParents(loading); } }
<START_MOD>public static byte[] readDEROctetString(byte[] input) throws org.conscrypt.ct.SerializationException { return org.conscrypt.ct.SerializationUtils.readDEROctetString(new java.io.ByteArrayInputStream(input)); }<END_MOD>
public java.util.ArrayList<java.security.Provider.Service> getServices(java.lang.String algorithm) { int newCacheVersion = org.apache.harmony.security.fortress.Services.getCacheVersion(); org.apache.harmony.security.fortress.Engine.ServiceCacheEntry cacheEntry = this.serviceCache; final java.lang.String algoUC = algorithm.toUpperCase(java.util.Locale.US); if (((cacheEntry != null) && (cacheEntry.algorithm.equalsIgnoreCase(algoUC))) && (newCacheVersion == (cacheEntry.cacheVersion))) { return cacheEntry.services; } java.lang.String name = ((this.serviceName) + ".") + algoUC; java.util.ArrayList<java.security.Provider.Service> services = org.apache.harmony.security.fortress.Services.getServices(<START_MOD>serviceName, algoUC<END_MOD>); this.serviceCache = new org.apache.harmony.security.fortress.Engine.ServiceCacheEntry(algoUC, newCacheVersion, services); return services; }
<START_MOD>@org.junit.Test public void testCreateP2pInterfaceNoInitMode() throws java.lang.Exception { final java.lang.String name = "p2p0"; com.android.server.wifi.HalDeviceManagerTest.BaselineChip chipMock = new com.android.server.wifi.HalDeviceManagerTest.BaselineChip(); chipMock.initialize(); mInOrder = inOrder(mServiceManagerMock, mWifiMock, chipMock.chip, mManagerStatusCallbackMock); executeAndValidateStartupSequence(); com.android.server.wifi.HalDeviceManager.InterfaceDestroyedListener idl = mock(HalDeviceManager.InterfaceDestroyedListener.class); com.android.server.wifi.HalDeviceManager.InterfaceAvailableForRequestListener iafrl = mock(HalDeviceManager.InterfaceAvailableForRequestListener.class); android.hardware.wifi.V1_0.IWifiP2pIface iface = ((android.hardware.wifi.V1_0.IWifiP2pIface) (validateInterfaceSequence(chipMock, false, (-1000), IfaceType.P2P, name, com.android.server.wifi.HalDeviceManagerTest.BaselineChip.STA_CHIP_MODE_ID, null, idl, iafrl))); mDut.removeIface(iface); mTestLooper.dispatchAll(); mInOrder.verify(chipMock.chip).removeP2pIface(name); verify(idl).onDestroyed(); verifyNoMoreInteractions(mManagerStatusCallbackMock, idl, iafrl); }<END_MOD>
public static native <START_MOD>int<END_MOD> EVP_SignInit(<START_MOD>long<END_MOD> <START_MOD>ctx, long evpRef<END_MOD>);
<START_MOD>public void getNetworkRegistrationState(int domain, android.os.Message onCompleteMessage) { if (onCompleteMessage == null) return; android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ("getNetworkRegistrationState domain " + domain)); if (!(isServiceConnected())) { onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, new java.lang.IllegalStateException("Service not connected.")); onCompleteMessage.sendToTarget(); return; } try { mServiceBinder.getNetworkRegistrationState(mPhone.getPhoneId(), domain, new com.android.internal.telephony.NetworkRegistrationManager.NetworkRegStateCallback(onCompleteMessage)); } catch (android.os.RemoteException e) { android.util.Log.d(com.android.internal.telephony.NetworkRegistrationManager.TAG, ("getNetworkRegistrationState RemoteException " + e)); onCompleteMessage.obj = new android.os.AsyncResult(onCompleteMessage.obj, null, e); onCompleteMessage.sendToTarget(); } }<END_MOD>
void onLeScan(android.bluetooth.BluetoothDevice device, int rssi, byte[] scanRecord);
<START_MOD>@java.lang.Override boolean isEmpty(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVDir dir) { return false; }<END_MOD>
<START_MOD>@com.android.annotations.NonNull public byte[] getType() { return mType; }<END_MOD>
private void doSend() { int status = BluetoothShare.STATUS_SUCCESS; while ((mFileInfo) == null) { try { java.lang.Thread.sleep(50); } catch (java.lang.InterruptedException e) { status = BluetoothShare.STATUS_CANCELED; } } if (!(mConnected)) { status = BluetoothShare.STATUS_CONNECTION_ERROR; } if (status == (BluetoothShare.STATUS_SUCCESS)) { if ((mFileInfo.mFileName) != null) { <START_MOD>if ((mFileInfo.mLength) > 4294967295L) { status = BluetoothShare.STATUS_OBEX_DATA_ERROR; android.util.Log.e(com.android.bluetooth.opp.BluetoothOppObexClientSession.TAG,   bigger than 4GB cannot be transferred } else { <END_MOD>status = sendFile(mFileInfo);<START_MOD> }<END_MOD> } else { status = mFileInfo.mStatus; } waitingForShare = true; } else { com.android.bluetooth.opp.Constants.updateShareStatus(mContext1, mInfo.mId, status); } if (status == (BluetoothShare.STATUS_SUCCESS)) { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SHARE_COMPLETE; msg.obj = mInfo; msg.sendToTarget(); } else { android.os.Message msg = android.os.Message.obtain(mCallback); msg.what = BluetoothOppObexSession.MSG_SESSION_ERROR; mInfo.mStatus = status; msg.obj = mInfo; msg.sendToTarget(); } }
<START_MOD>private void updateImsRegistrationState() { boolean isImsRegistered = mTelephonyManager.isImsRegistered(mSir.getSubscriptionId()); setSummaryText(com.android.settings.deviceinfo.SimStatus.KEY_IMS_REGISTRATION_STATE, mRes.getString((isImsRegistered ? R.string.ims_reg_status_registered : R.string.ims_reg_status_not_registered))); }<END_MOD>
@java.lang.Override public java.nio.ByteBuffer put(byte value) { <START_MOD>checkCanAccess<END_MOD>(); if (isReadOnly) { throw new java.nio.ReadOnlyBufferException(); } if ((position) == (limit)) { throw new java.nio.BufferOverflowException(); } this.block.pokeByte(((offset) + ((position)++)), value); return this; }
boolean startVoiceRecognition(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM,   BLUETOOTH permission <START_MOD>synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { return false; } <END_MOD>int connectionState = <START_MOD>stateMachine<END_MOD>.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } <START_MOD>stateMachine<END_MOD>.sendMessage(HeadsetStateMachine.VOICE_RECOGNITION_START, device); <START_MOD>} <END_MOD>return true; }
<START_MOD>@java.lang.Override public java.util.Map<java.lang.String, java.util.List<java.lang.String>> getHeaderFields() { if ((headerFields) == null) { headerFields = new java.util.TreeMap<>(libcore.net.url.FileURLConnection.HEADER_COMPARATOR); for (int i = 0; i < (headerKeysAndValues.length); i += 2) { headerFields.put(headerKeysAndValues[i], java.util.Collections.singletonList(headerKeysAndValues[(i + 1)])); } } return java.util.Collections.unmodifiableMap(headerFields); }<END_MOD>
public void test_ConstructorLjava_nio_charset_CharsetNull() { java.nio.charset.CharsetEncoder ech = new org.apache.harmony.tests.java.nio.charset.CharsetEncoderTest.MockCharsetEncoderForHarmony491(null, 1, 1); assertNull(ech.charset()); }
<START_MOD>private<END_MOD> java.lang.String <START_MOD>getTestArguments() {<END_MOD> java.lang.String <START_MOD>telephoneNumber<END_MOD> = <START_MOD>Strings<END_MOD>.<START_MOD>telephoneNumber.value<END_MOD>(); <START_MOD>return<END_MOD>   <START_MOD>telephoneNumber<END_MOD>   + <START_MOD>telephoneNumber<END_MOD>; }
<START_MOD>public static void closeDrawer(int drawerLayoutId, int gravity) { android.support.test.espresso.contrib.Checks.checkState((!(android.support.test.espresso.contrib.DrawerActions.checkDrawer(drawerLayoutId, android.support.test.espresso.contrib.DrawerMatchers.isClosed(gravity)))), "Drawer is already closed"); android.support.test.espresso.Espresso.onView(withId(drawerLayoutId)).perform(android.support.test.espresso.contrib.DrawerActions.registerListener()).perform(android.support.test.espresso.contrib.DrawerActions.actionCloseDrawer(gravity)).perform(android.support.test.espresso.contrib.DrawerActions.unregisterListener()); }<END_MOD>
private void assertBackgroundPeriodAlarmNotPending() { assertFalse( period alarm is pending mAlarmManager.isPending(<START_MOD>WificondWifiScannerImpl<END_MOD>.BACKGROUND_PERIOD_ALARM_TAG)); }
public void testVFE7() { try { <START_MOD>dot<END_MOD>.<START_MOD>junit<END_MOD>.<START_MOD>opcodes<END_MOD>.<START_MOD>iget_char.d.T_iget_char_12 t = new dot.junit.opcodes.iget_char.d.T_iget_char_12<END_MOD>(<START_MOD>); t.run(<END_MOD>); fail( <START_MOD>an<END_MOD> <START_MOD>IllegalAccessError<END_MOD> exception } catch (java.lang.<START_MOD>IllegalAccessError<END_MOD> t) { } }
<START_MOD>boolean hasCallbackAlreadyHappened(int callback) { java.util.Iterator<java.lang.Integer> it = mCallbackQueue.iterator(); while (it.hasNext()) { if ((it.next()) == callback) { return true; } } return false; }<END_MOD>
<START_MOD>private void checkRemainderFloat4Float4() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testRemainderFloat4Float4(inX, out); verifyResultsRemainderFloat4Float4(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRemainderFloat4Float4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testRemainderFloat4Float4(inX, out); verifyResultsRemainderFloat4Float4(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRemainderFloat4Float4: " + (e.toString()))); } }<END_MOD>
public com.android.builder.ProductFlavor <START_MOD>setSigningKeystore<END_MOD>(<START_MOD>com<END_MOD>.<START_MOD>android<END_MOD>.<START_MOD>builder.SigningKeystore<END_MOD> <START_MOD>signingKeystore<END_MOD>) { <START_MOD>mSigningKeystore<END_MOD> = <START_MOD>signingKeystore<END_MOD>; return this; }
static android.telephony.SignalStrength convertHalSignalStrength(android.hardware.radio.V1_0.SignalStrength signalStrength) {<START_MOD> int tdscdmaRsrp_1_2 = 255; if (((signalStrength.tdScdma.rscp) >= 25) && ((signalStrength.tdScdma.rscp) <= 120)) { tdscdmaRsrp_1_2 = 120 - (signalStrength.tdScdma.rscp); }<END_MOD> return new android.telephony.SignalStrength(signalStrength.gw.signalStrength, signalStrength.gw.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, <START_MOD>tdscdmaRsrp_1_2<END_MOD>); }
<START_MOD>@java.lang.Override public java.util.List<com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>> getLevels() { java.util.List<com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>> setup = new java.util.ArrayList<com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>>(); setup.add(new com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>("", java.util.logging.Level.FINE)); setup.add(new com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>("com.android.sched", java.util.logging.Level.WARNING)); return setup; }<END_MOD>
<START_MOD>public java.lang.String toString() { return (((((((("AaptOptionsImpl{" + ", mIgnoreAssets=") + (mIgnoreAssets)) + ", mNoCompress") + (mNoCompress)) + ", mFailOnMissingConfigEntry") + (mFailOnMissingConfigEntry)) + ", mUseQueuedAaptPngCruncher") + (mUseQueuedAaptPngCruncher)) + "}"; }<END_MOD>
public void testConnectViaHttpProxyToHttpsUsingBadProxyAndHttpResponseCache() throws java.lang.Exception { TestSSLContext testSSLContext = TestSSLContext.create(); initResponseCache(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), true); com.google.mockwebserver.MockResponse badProxyResponse = new com.google.mockwebserver.MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders().setBody( proxy connect response content server.enqueue(badProxyResponse); server.enqueue(new com.google.mockwebserver.MockResponse().setBody("response")); server.play(); java.net.URL url = new java.net.URL("https://android.com/foo"); libcore.java.net.URLConnectionTest.ProxyConfig proxyConfig = libcore.java.net.URLConnectionTest.ProxyConfig.PROXY_SYSTEM_PROPERTY; javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (proxyConfig.connect(server, url))); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); connection.setHostnameVerifier(new libcore.java.net.URLConnectionTest.RecordingHostnameVerifier()); assertContent("response", connection); com.google.mockwebserver.RecordedRequest connect = server.takeRequest(); assertEquals( android.com:443 HTTP/1.1 connect.getRequestLine()); <START_MOD>libcore.java.net.URLConnectionTest.<END_MOD>assertContains(connect.getHeaders(),   android.com }
private void showErrorMessage(java.lang.String message) {<START_MOD> if ((mErrorDialog) != null) { mErrorDialog.setMessage(message); mErrorDialog.show(); } else { mErrorDialog =<END_MOD> new android.app.AlertDialog.Builder(this).setTitle(R.string.error_title).setMessage(message).setPositiveButton(android.R.string.ok, null).show(); }<START_MOD> }<END_MOD>
java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_PERM,   BLUETOOTH permission <START_MOD>if<END_MOD> <START_MOD>((mPbapStateMachineMap)<END_MOD> <START_MOD>== null) { return<END_MOD> new java.util.ArrayList<>(); <START_MOD>}<END_MOD> <START_MOD>return new java.util.ArrayList<END_MOD>(<START_MOD>mPbapStateMachineMap<END_MOD>.<START_MOD>keySet<END_MOD>()); }
@java.lang.Override public int hashCode() { int primeNum = 31; return ((((((((((((((((mGsmSignalStrength) * primeNum) + ((mGsmBitErrorRate) * primeNum)) + ((mCdmaDbm) * primeNum)) + ((mCdmaEcio) * primeNum)) + ((mEvdoDbm) * primeNum)) + ((mEvdoEcio) * primeNum)) + ((mEvdoSnr) * primeNum)) + ((mLteSignalStrength) * primeNum)) + ((mLteRsrp) * primeNum)) + ((mLteRsrq) * primeNum)) + ((mLteRssnr) * primeNum)) + ((mLteCqi) * primeNum)) + ((mLteRsrpBoost) * primeNum)) + ((mTdScdmaRscp) * primeNum)) + (<START_MOD>mIsGsm<END_MOD> ? 1 : 0)) + (mUseOnlyRsrpForLteLevel ? 1 : 0); }
<START_MOD>@java.lang.Override public void onCreate(com.android.ide.common.api.INode node, com.android.ide.common.api.INode parent, com.android.ide.common.api.InsertType insertType) { super.onCreate(node, parent, insertType); if (insertType == (com.android.ide.common.api.InsertType.CREATE)) { node.appendChild(com.android.ide.common.layout.LINEAR_LAYOUT_FQCN); } }<END_MOD>
public void testMergeByCount() throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger(); assertEquals(<START_MOD>32<END_MOD>, merger.size()); }
@android.test.suitebuilder.annotation.LargeTest public void testExistingEUserI() { int userSetting = com.android.internal.content.PackageHelper.APP_INSTALL_INTERNAL; int iFlags = <START_MOD>android.content.pm.<END_MOD>PackageManager.INSTALL_EXTERNAL; setExistingXUserX(userSetting, iFlags, PackageInfo.INSTALL_LOCATION_PREFER_EXTERNAL); }
public static com.android.settings.search.Index getInstance(android.content.Context context) { if ((com.android.settings.search.Index.sInstance) == null) { com.android.settings.search.Index.sInstance = new com.android.settings.search.Index(context, com.android.settings.search.Index.BASE_AUTHORITY); } return com.android.settings.search.Index.sInstance; }
private static int deepHashCodeElement(java.lang.Object element) { java.lang.Class<?> cl; if (element == null) { return 0; } cl = element.getClass().getComponentType(); if (cl == null) { return element.hashCode(); } if (!(cl.isPrimitive())) { return java.util.Arrays.deepHashCode(((java.lang.Object[]) (element))); } <START_MOD>else if (cl == <END_MOD>(int.class)) { return java.util.Arrays.hashCode(((int[]) (element))); } <START_MOD>else if (cl == <END_MOD>(char.class)) { return java.util.Arrays.hashCode(((char[]) (element))); } <START_MOD>else if (cl == <END_MOD>(boolean.class)) { return java.util.Arrays.hashCode(((boolean[]) (element))); } <START_MOD>else if (cl == <END_MOD>(byte.class)) { return java.util.Arrays.hashCode(((byte[]) (element))); } <START_MOD>else if (cl == <END_MOD>(long.class)) { return java.util.Arrays.hashCode(((long[]) (element))); } <START_MOD>else if (cl == <END_MOD>(float.class)) { return java.util.Arrays.hashCode(((float[]) (element))); } <START_MOD>else if (cl == <END_MOD>(double.class)) { return java.util.Arrays.hashCode(((double[]) (element))); } <START_MOD>else { <END_MOD>return java.util.Arrays.hashCode(((short[]) (element))); }<START_MOD> }<END_MOD>
public void testWildcardMatchingEmptySubstring() { assertTrue(<START_MOD>verifyWithHostnamePattern<END_MOD>("imap.google.com", "imap*.google.com")); }
@javax.annotation.CheckForNull com.android.jack.ir.ast.JAbstractMethodBody loadBody(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod loading<START_MOD>, @javax.annotation.Nonnull com.android.jack.jayce.JayceMethodLoader jayceMethodLoader<END_MOD>) throws com.android.jack.ir.ast.JTypeLookupException, com.android.jack.lookup.JMethodLookupException;
public native void msync(long address, long byteCount, int flags) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
public void recordHistory(android.net.NetworkStatsHistory input, long start, long end) { final android.net.NetworkStats.Entry entry = new android.net.NetworkStats.Entry(android.net.NetworkStats.IFACE_ALL, android.net.NetworkStats.UID_ALL, android.net.NetworkStats.SET_DEFAULT, android.net.NetworkStats.TAG_NONE, <START_MOD>android.net.NetworkStats.DEFAULT_NETWORK_ALL, <END_MOD>0L, 0L, 0L, 0L, 0L); for (int i = 0; i < (input.bucketCount); i++) { final long bucketStart = input.bucketStart[i]; final long bucketEnd = bucketStart + (input.bucketDuration); if ((bucketStart < start) || (bucketEnd > end)) continue; entry.rxBytes = android.net.NetworkStatsHistory.getLong(input.rxBytes, i, 0L); entry.rxPackets = android.net.NetworkStatsHistory.getLong(input.rxPackets, i, 0L); entry.txBytes = android.net.NetworkStatsHistory.getLong(input.txBytes, i, 0L); entry.txPackets = android.net.NetworkStatsHistory.getLong(input.txPackets, i, 0L); entry.operations = android.net.NetworkStatsHistory.getLong(input.operations, i, 0L); recordData(bucketStart, bucketEnd, entry); } }
<START_MOD>public static void closeGuardClose(java.lang.Object guardObj) { if ((Build.VERSION.SDK_INT) < (Build.VERSION_CODES.ICE_CREAM_SANDWICH)) { return; } org.conscrypt.CloseGuard guard = ((org.conscrypt.CloseGuard) (guardObj)); guard.close(); }<END_MOD>
@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println( dump in APP SERVICES, see bluetooth_manager section. writer.println( --print argument for dumpsys direct from AdapterService. return; } verboseLog(( arguments, check for protobuf output:   + (android.text.TextUtils.join(   args)))); if (args[0].equals("--proto-bin")) { dumpMetrics(fd); return; } writer.println(<START_MOD>"AdapterProperties"); writer.println(((   +     + (getMaxConnectedAudioDevices()))); writer.println(<END_MOD> devices: for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println((((((   + (device.getAddress())) +   [ + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) +     + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }
<START_MOD>public void testSincos() { checkSincosFloatFloat(); checkSincosFloat2Float2(); checkSincosFloat3Float3(); checkSincosFloat4Float4(); }<END_MOD>
public static java.lang.String getActiveTags(android.content.Context context, android.content.SharedPreferences prefs, boolean onlyAvailable) { java.util.Set<java.lang.String> tags = prefs.getStringSet(context.getString(R.string.pref_key_tags), com.android.traceur.Receiver.getDefaultTagList()); java.lang.StringBuilder sb = new java.lang.StringBuilder((10 * (tags.size()))); java.util.TreeMap<java.lang.String, java.lang.String> available = (onlyAvailable) ? com.android.traceur.AtraceUtils.atraceListCategories() : null; for (java.lang.String s : tags) { if (onlyAvailable && (!(available.containsKey(s)))) continue; if ((sb.length()) > 0) { sb.append(   } sb.append(s); } java.lang.String s = sb.toString(); <START_MOD>com.android.traceur<END_MOD>.Log.v(com.android.traceur.Receiver.TAG, (((("getActiveTags(onlyAvailable=" + onlyAvailable) +   =   + s) + "\"")); return s; }
@com.android.annotations.NonNull public java.lang.String getDirName() { if (!(multiOutput)) { return variantData.getVariantConfiguration().getDirName(); } return variantData.getVariantConfiguration().computeDirNameWithSplits(<START_MOD>getFilter(FilterType.DENSITY)<END_MOD>, <START_MOD>getFilter(FilterType.ABI)<END_MOD>); }
private void sendSMSToSelf() { android.app.PendingIntent sentIntent = android.app.PendingIntent.getBroadcast(getContext(), 0, new android.content.Intent(android.permission2.cts.NoReceiveSmsPermissionTest.MESSAGE_SENT_ACTION), PendingIntent.FLAG_ONE_SHOT); android.app.PendingIntent deliveryIntent = android.app.PendingIntent.getBroadcast(getContext(), 0, new android.content.Intent(android.permission2.cts.NoReceiveSmsPermissionTest.MESSAGE_STATUS_RECEIVED_ACTION), PendingIntent.FLAG_ONE_SHOT); android.telephony.TelephonyManager telephony = ((android.telephony.TelephonyManager) (getContext().getSystemService(Context.TELEPHONY_SERVICE))); java.lang.String currentNumber = telephony.getLine1Number();<START_MOD> if (android.text.TextUtils.isEmpty(mDestAddr)) { fail( SIM card does not provide phone number. Use a suitable SIM Card. }<END_MOD> android.util.Log.i(android.permission2.cts.NoReceiveSmsPermissionTest.LOG_TAG, java.lang.String.format( SMS to self: %s currentNumber)); sendSms(currentNumber,   message sentIntent, deliveryIntent); }
public void supplyIccPuk2ForAppResponse(android.hardware.radio.V1_0.RadioResponseInfo responseInfo, int remainingAttempts) { <START_MOD>responsePinOrPukStatus<END_MOD>(responseInfo, remainingAttempts); }
<START_MOD>private static org.eclipse.swt.graphics.Image getResultImage(int result) { switch (result) { case com.android.hierarchyviewerlib.models.EvaluateContrastModel.CONTRAST_PASS : return com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sGreenImage; case com.android.hierarchyviewerlib.models.EvaluateContrastModel.CONTRAST_FAIL : return com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sRedImage; default : return com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sYellowImage; } }<END_MOD>
private void registerForNsdSetting() { android.database.ContentObserver contentObserver = new android.database.ContentObserver(this.getHandler()) { @java.lang.Override public void onChange(boolean selfChange) { notifyEnabled(isNsdEnabled()); } }; <START_MOD>android<END_MOD>.<START_MOD>net<END_MOD>.<START_MOD>Uri uri = <END_MOD>Settings.Global.getUriFor(Settings.Global.NSD_ON)<START_MOD>;<END_MOD> <START_MOD>mNsdSettings.registerContentObserver(uri<END_MOD>, contentObserver); }
private int runMonoDex() throws java.io.IOException { java.io.File incrementalOutFile = null; if (args.incremental) { if ((args.outName) == null) { java.lang.System.err.println( no incremental output name specified return -1; } incrementalOutFile = new java.io.File(args.outName); if (incrementalOutFile.exists()) { minimumFileAge = incrementalOutFile.lastModified(); } } if (!(processAllFiles())) { return 1; } if ((args.incremental) && (!(anyFilesProcessed))) { return 0; } byte[] outArray = null; if ((!(<START_MOD>outputDex.isEmpty())) || ((args.humanOutName) != null)) { outArray = writeDex(outputDex); if (outArray == null) { return 2; } } if (args.incremental) { outArray = <END_MOD>com.android.dx.command.dexer.Main.<START_MOD>mergeIncremental(outArray, incrementalOutFile); } outArray = mergeLibraryDexBuffers(outArray); if (args.jarOutput) { <END_MOD>outputDex<START_MOD> = null; if (outArray<END_MOD> != null)<START_MOD> { <END_MOD>outputResources.put(DexFormat.DEX_IN_JAR_NAME, outArray); } if (!(<START_MOD>createJar(args.outName))) { return 3; } } else if ((outArray != null) && ((args.outName) != null)) { java.io.OutputStream out = <END_MOD>com.android.dx.command.dexer.Main.<START_MOD>openOutput(args.outName); out.write(outArray); <END_MOD>com.android.dx.command.dexer.Main.<START_MOD>closeOutput(<END_MOD>out); } return 0; }
@org.junit.Test public void testEnterSoftApModeActiveWhenAlreadyInSoftApMode() throws java.lang.Exception { when(mWifiInjector.makeWificond()).thenReturn(mWificond); when(mWificond.createApInterface()).thenReturn(null); mWifiStateMachinePrime.enterSoftAPMode(<START_MOD>null<END_MOD>); mLooper.dispatchNext(); assertEquals("SoftAPModeState", mWifiStateMachinePrime.getCurrentMode()); mLooper.dispatchNext(); assertEquals("SoftAPModeState", mWifiStateMachinePrime.getCurrentMode()); enterSoftApActiveMode(); }
<START_MOD>public void removeListener(com.google.gct.idea.debugger.CloudDebugProcess.CloudBreakListChanged listener) { myBreakpointListChangedListeners.remove(listener); }<END_MOD>
<START_MOD>@org.junit.Test public void testSetWifiEnabledFromAppFailsWhenApEnabled() throws java.lang.Exception { when(mWifiStateMachine.syncGetWifiApState()).thenReturn(WifiManager.WIFI_AP_STATE_ENABLED); assertFalse(mWifiServiceImpl.setWifiEnabled(com.android.server.wifi.WifiServiceImplTest.TEST_PACKAGE_NAME, true)); verify(mSettingsStore, never()).handleWifiToggled(anyBoolean()); verify(mWifiController, never()).obtainMessageAndSend(eq(com.android.server.wifi.WifiController.CMD_WIFI_TOGGLED)); }<END_MOD>
protected void libToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.lang.String classpath, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { <START_MOD>invokeJack(args<END_MOD>); args.add("--verbose"); args.add(verbosityLevel.name()); args.add("--sanity-checks"); args.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { args.add("--incremental-folder"); args.add(incrementalFolder.getAbsolutePath()); } for (java.io.File res : resImport) { args.add("--import-resource"); args.add(res.getPath()); } for (java.io.File meta : metaImport) { args.add("--import-meta"); args.add(meta.getPath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if (!(classpath.equals(""))) { args.add("--classpath"); args.add(classpath); } for (java.io.File jarjarFile : jarjarRules) { args.add("--config-jarjar"); args.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add("--config-proguard"); args.add(flags.getAbsolutePath()); } if (withDebugInfos) { args.add("-g"); } libToImportStaticLibs(args, in); }
<START_MOD>private static java.lang.String getZoneDisplayName(java.util.Locale locale, java.util.TimeZone tz, java.util.Date now, boolean preferLocation) { java.lang.String zoneNameString; if (preferLocation) { zoneNameString = com.android.settings.ZonePicker.getZoneExemplarLocation(locale, tz); if ((zoneNameString == null) || (zoneNameString.isEmpty())) { zoneNameString = com.android.settings.DateTimeSettings.getZoneLongName(locale, tz, now); } } else { zoneNameString = com.android.settings.DateTimeSettings.getZoneLongName(locale, tz, now); if ((zoneNameString == null) || (zoneNameString.isEmpty())) { zoneNameString = com.android.settings.ZonePicker.getZoneExemplarLocation(locale, tz); } } return zoneNameString; }<END_MOD>
private android.net.NetworkCapabilities getNetworkCapabilitiesInternal(com.android.server.connectivity.NetworkAgentInfo nai) { if (nai != null) { synchronized(nai) { if ((nai.networkCapabilities) != null) { return <START_MOD>networkCapabilitiesWithoutUidsUnlessAllowed<END_MOD>(nai.networkCapabilities); } } } return null; }
@java.lang.Override public void handle(@javax.annotation.Nonnull org.simpleframework.http.Request request, @javax.annotation.Nonnull org.simpleframework.http.Response response) { <START_MOD>org.simpleframework.http.ContentType contentType = getContentType(request); org.simpleframework.http.core.Container container; if (contentType == null) { com.android.jack.server.router.ContentTypeRouter.logger.log(java.util.logging.Level.FINE,   request for no content type container = null; } else { <END_MOD>java.lang.String type = <START_MOD>contentType<END_MOD>.getType(); com.android.jack.server.router.ContentTypeRouter.logger.log(java.util.logging.Level.FINE, (( request for   + type) + "'")); container = registry.get(type); <START_MOD>} <END_MOD>if (container != null) { container.handle(request, response); } else { primaryContainer.handle(request, response); } }
<START_MOD>public void test_SSLSocket_defaultConfiguratio() throws java.lang.Exception { libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertSSLSocket(((javax.net.ssl.SSLSocket) (javax.net.ssl.SSLSocketFactory.getDefault().createSocket()))); }<END_MOD>
<START_MOD>public void dereferenceImage() { (imageReferences)--; if (((image) != null) && ((imageReferences) == 0)) { image.dispose(); java.lang.System.out.println("DISPOSING"); } }<END_MOD>
@org.junit.Test public void testMultiThread() throws java.lang.Exception { <START_MOD>java.util.concurrent.CountDownLatch factoryLatch = new java.util.concurrent.CountDownLatch(1);<END_MOD> com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String> cache = new com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String>(new com.android.ide.common.caching.CreatingCacheTest.DelayedFactory(<START_MOD>factoryLatch<END_MOD>)); com.android.ide.common.caching.CreatingCacheTest.CacheRunnable runnable1 = new com.android.ide.common.caching.CreatingCacheTest.CacheRunnable(cache); java.lang.Thread t1 = new java.lang.Thread(runnable1); t1.start(); com.android.ide.common.caching.CreatingCacheTest.CacheRunnable runnable2 = new com.android.ide.common.caching.CreatingCacheTest.CacheRunnable(cache); java.lang.Thread t2 = new java.lang.Thread(runnable2); t2.start<START_MOD>(); factoryLatch.countDown<END_MOD>(); t1.join(); t2.join(); assertEquals("foo", runnable1.getResult()); assertEquals("foo", runnable2.getResult()); assertTrue( calls give same instance ((runnable1.getResult()) == (runnable2.getResult()))); }
<START_MOD>@com.android.annotations.NonNull com.android.build.gradle.managed.ManagedPattern getCFilePattern();<END_MOD>
@java.lang.Override public java.lang.String toString() { return (((((((((((((((((((((((((((((((<START_MOD>((((<END_MOD>"SignalStrength:" +     + (mGsmSignalStrength)) +     + (mGsmBitErrorRate)) +     + (<START_MOD>mUmtsRscp)) +     + (<END_MOD>mCdmaDbm)) +     + (mCdmaEcio)) +     + (mEvdoDbm)) +     + (mEvdoEcio)) +     + (mEvdoSnr)) +     + (mLteSignalStrength)) +     + (mLteRsrp)) +     + (mLteRsrq)) +     + (mLteRssnr)) +     + (mLteCqi)) +     + (mLteRsrpBoost)) +     + (mTdScdmaRscp)) +     + (isGsm ? "gsm|lte" : "cdma")) +     + (mUseOnlyRsrpForLteLevel ? "use_only_rsrp_for_lte_level" : "use_rsrp_and_rssnr_for_lte_level")<START_MOD>) +     + (java.util.Arrays.toString(mUmtsRscpThresholds))<END_MOD>; }
<START_MOD>private void checkErfcFloat() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testErfcFloat(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testErfcFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testErfcFloat(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testErfcFloat: " + (e.toString()))); } }<END_MOD>
<START_MOD>public void run() { if ((com.android.hierarchyviewerlib.ComponentRegistry.getTreeViewModel().getTree()) == null) { showDeviceSelector(); treeViewButton.setEnabled(false); } else { showTreeView(); treeViewButton.setEnabled(true); } }<END_MOD>
private int getThumbPositionForListPosition(int firstVisibleItem, int visibleItemCount, int totalItemCount) { if (((mSectionIndexer) == null) || ((mListAdapter) == null)) { getSectionsFromIndexer(); } if (((mSectionIndexer) == null) || (!(mMatchDragPosition))) { return (((mList.getHeight()) - (mThumbH)) * firstVisibleItem) / (totalItemCount - visibleItemCount); } firstVisibleItem -= mListOffset; if (firstVisibleItem < 0) { return 0; } totalItemCount -= mListOffset; final int trackHeight = (mList.getHeight()) - (mThumbH); final int section = mSectionIndexer.getSectionForPosition(firstVisibleItem); final int sectionPos = mSectionIndexer.getPositionForSection(section); int nextSectionPos = <START_MOD>0; final int sectionCount = mSections.length; if ((section + 1) < sectionCount) { nextSectionPos = <END_MOD>mSectionIndexer.getPositionForSection((section + 1)); <START_MOD>} else { nextSectionPos = totalItemCount - 1; } final int positionsInSection = nextSectionPos - sectionPos; final android.view.View child = mList.getChildAt(0); final float incrementalPos = (child == null) ?   : firstVisibleItem + (((float) ((mList.getPaddingTop()) - (child.getTop()))) / (child.getHeight())); final float posWithinSection = (incrementalPos - sectionPos) / positionsInSection; int result = ((int) (((section + posWithinSection) /<END_MOD> sectionCount<START_MOD>) * trackHeight)); if ((firstVisibleItem > 0) && ((firstVisibleItem + visibleItemCount) == totalItemCount)) {<END_MOD> final android.view.View <START_MOD>lastChild<END_MOD> = mList.getChildAt(<START_MOD>(visibleItemCount - 1)<END_MOD>); final float <START_MOD>lastItemVisible = <END_MOD>((float) ((<START_MOD>(mList.getHeight()) - (mList.getPaddingBottom())) - (lastChild<END_MOD>.getTop()))) / (<START_MOD>lastChild<END_MOD>.getHeight())<START_MOD>;<END_MOD> result <START_MOD>+= (trackHeight - result<END_MOD>) * lastItemVisible<START_MOD>; } return<END_MOD> result<START_MOD>; }<END_MOD>
public static void computeTanpi(android.renderscript.cts.TestTanpi.ArgumentsFloatFloat args) { args.out = new android.renderscript.cts.Floaty(((float) (java.lang.Math.<START_MOD>tan((((double) (args.in)) * (java.lang.Math.<END_MOD>PI<START_MOD>)<END_MOD>)))), 6, 128); }
@java.lang.SuppressWarnings("unchecked") public void testRun_ioException() throws java.lang.Exception { mMockDevice.executeShellCommand(((java.lang.String) (org.easymock.EasyMock.anyObject())), ((com.android.ddmlib.IShellOutputReceiver) (org.easymock.EasyMock.anyObject())), org.easymock.EasyMock.eq(0)<START_MOD>, org.easymock.EasyMock.eq(java.util.concurrent.TimeUnit.MILLISECONDS)<END_MOD>); org.easymock.EasyMock.expectLastCall().andThrow(new java.io.IOException()); mMockListener.testRunStarted(com.android.ddmlib.testrunner.RemoteAndroidTestRunnerTest.TEST_PACKAGE, 0); mMockListener.testRunFailed(((java.lang.String) (org.easymock.EasyMock.anyObject()))); mMockListener.testRunEnded(org.easymock.EasyMock.anyLong(), org.easymock.EasyMock.eq(java.util.Collections.EMPTY_MAP)); org.easymock.EasyMock.replay(mMockDevice, mMockListener); try { mRunner.run(mMockListener); fail( not thrown } catch (java.io.IOException e) { } org.easymock.EasyMock.verify(mMockDevice, mMockListener); }
<START_MOD>public void setMeta(com.android.sdklib.devices.Device.Meta meta) { mMeta = meta; }<END_MOD>
private static void assertSizesRotate(android.server.cts.ReportedSizes rotationA, android.server.cts.ReportedSizes rotationB) throws java.lang.Exception { assertEquals(rotationA.displayWidth, rotationA.metricsWidth); assertEquals(rotationA.displayHeight, rotationA.metricsHeight); assertEquals(rotationB.displayWidth, rotationB.metricsWidth); assertEquals(rotationB.displayHeight, rotationB.metricsHeight); final boolean beforePortrait = (rotationA.displayWidth) < (rotationA.displayHeight); final boolean afterPortrait = (rotationB.displayWidth) < (rotationB.displayHeight); <START_MOD>final boolean beforeConfigPortrait = (rotationA.widthDp) < (rotationA.heightDp); final boolean afterConfigPortrait = (rotationB.widthDp) < (rotationB.heightDp); assertEquals<END_MOD>(beforePortrait<START_MOD>, beforeConfigPortrait); assertEquals(<END_MOD>afterPortrait<START_MOD>,<END_MOD> afterConfigPortrait); }
<START_MOD>private com.intellij.execution.RunnerAndConfigurationSettings createConfiguration(@org.jetbrains.annotations.Nullable com.intellij.openapi.project.Project project, java.lang.Module module) { if (project == null) { return null; } com.intellij.execution.RunnerAndConfigurationSettings settings = com.intellij.execution.RunManagerEx.getInstanceEx(project).createRunConfiguration(AppEngineRunConfiguration.NAME, getConfigurationFactory()); final com.google.gct.idea.appengine.run.AppEngineRunConfiguration configuration = ((com.google.gct.idea.appengine.run.AppEngineRunConfiguration) (settings.getConfiguration())); configuration.setName(AppEngineRunConfiguration.NAME); configuration.setModule(module); return settings; }<END_MOD>
public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth<START_MOD>, false<END_MOD>); }
<START_MOD>public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_single_source_alloc s = new com.android.rs.test.ScriptC_single_source_alloc(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); for (int dataType : rsDataTypes) { for (int vecSize = 1; vecSize <= 4; vecSize++) { for (int nDims = 1; nDims <= 3; nDims++) { s.invoke_CreateAndTestAlloc(dataType, vecSize, nDims); } } } s.invoke_single_source_alloc_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }<END_MOD>
@javax.annotation.Nonnull @java.lang.Override public java.util.Collection<java.lang.String> getSubPackageNames(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading) { java.util.List<java.lang.String> subs = new java.util.ArrayList<java.lang.String>(); for (<START_MOD>java.util.Map.Entry<java.lang.String, <END_MOD>com.android.sched.vfs.InputVElement<START_MOD>><END_MOD> <START_MOD>entry<END_MOD> : <START_MOD>cache<END_MOD>.<START_MOD>entrySet<END_MOD>()) { if (<START_MOD>entry.getValue()<END_MOD>.isVDir()) { subs.add(<START_MOD>entry<END_MOD>.<START_MOD>getKey<END_MOD>()); } } return subs; }
public void testDebug() { com.android.builder.BuildType type = new com.android.builder.BuildType("debug"); assertTrue(type.isDebuggable()); assertTrue(type.isDebugJniBuild()); }
public static void main(java.lang.String[] args) { Main.expectEquals(10, Main.<START_MOD>absI((-10))); Main.expectEquals(20, Main.absI(20)); Main.expectEquals(10L, Main.absL((-10L))); Main.expectEquals(20L, Main.absL(20L)); Main.expectEquals(10, Main.<END_MOD>abs1((-10))); Main.expectEquals(20, Main.abs1(20)); Main.expectEquals(10, Main.abs2((-10))); Main.expectEquals(20, Main.abs2(20)); Main.expectEquals(10, Main.abs3((-10))); Main.expectEquals(20, Main.abs3(20)); Main.expectEquals(10, Main.abs4((-10))); Main.expectEquals(20, Main.abs4(20)); Main.expectEquals(10, Main.abs4(((short) (-10)))); Main.expectEquals(20, Main.abs4(((short) (20)))); Main.expectEquals(10, Main.abs6(((byte) (-10)))); Main.expectEquals(20, Main.abs6(((byte) (20)))); Main.expectEquals(10L, Main.abs7((-10L))); Main.expectEquals(20L, Main.abs7(20L)); <START_MOD>Main.expectEquals(1, Main.zabs1(((byte) (1)))); Main.expectEquals(255, Main.zabs1(((byte) (-1)))); Main.expectEquals(1, Main.zabs2(((short) (1)))); Main.expectEquals(65535, Main.zabs2(((short) (-1)))); <END_MOD>java.lang.System.out.println("passed"); }
<START_MOD>@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.FailingSuiteTest.class) @org.junit.Test public void testRunner_FailingSuiteTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().failure("suite", "java.lang.IllegalStateException: Cannot create suite\n").completedNormally(); }<END_MOD>
public void test_isInfiniteD() { assertTrue( check failed <START_MOD>(((<END_MOD>(((java.lang.Double.isInfinite(java.lang.Double.NEGATIVE_INFINITY)) && (java.lang.Double.isInfinite(java.lang.Double.POSITIVE_INFINITY))) && (!(java.lang.Double.isInfinite(java.lang.Double.MAX_VALUE))))<START_MOD> && (!(java.lang.Double.isInfinite(java.lang.Double.MIN_VALUE)))) && (!(java.lang.Double.isInfinite(Nan)))) && (!(java.lang.Double.isInfinite(0.0))))<END_MOD>); }
<START_MOD>@android.test.suitebuilder.annotation.MediumTest public void testJavaStrings() { assertEquals(mAppTextView2.getText(), "SUCCESS-APP"); assertEquals(mLib1TextView2.getText(), "SUCCESS-LIB1"); assertEquals(mLib2TextView2.getText(), "SUCCESS-LIB2"); }<END_MOD>
private void finish(boolean success, java.lang.String error) { <START_MOD>if (com.android.bips.LocalPrintJob.DEBUG) android.util.Log.d(com.android.bips.LocalPrintJob.TAG, ((( success= + success) +   error= + error)); if ((mDiscovery) != null) mDiscovery.stop(); if ((mDiscoveryTimeout) != null) mDiscoveryTimeout.stop(); if ((mConnection) != null) mConnection.stop(); <END_MOD>mPrintService.unlockWifi(); mBackend.closeDocument(); if (success) { mPrintJob.start(); mPrintJob.complete(); } else if ((mState) == (com.android.bips.LocalPrintJob.STATE_CANCEL)) { mPrintJob.cancel(); } else { mPrintJob.fail(error); } mState = com.android.bips.LocalPrintJob.STATE_DONE; mCompleteConsumer.accept(this); }
<START_MOD>public void testRemainder() { checkRemainderFloatFloat(); checkRemainderFloat2Float2(); checkRemainderFloat3Float3(); checkRemainderFloat4Float4(); }<END_MOD>
public int getCarrierPrivilegeStatus(android.content.pm.PackageInfo packageInfo<START_MOD>) { synchronized(mLock<END_MOD>) { return (mCarrierPrivilegeRules) == null ? android.telephony.TelephonyManager.CARRIER_PRIVILEGE_STATUS_RULES_NOT_LOADED : mCarrierPrivilegeRules.getCarrierPrivilegeStatus(packageInfo); }<START_MOD> }<END_MOD>
<START_MOD>private void test_parallelSort$DII(int size) { int startIndex = 100; int endIndex = size - 100; double[] reversedArray = new double[size]; double[] originalReversedArray = new double[size]; for (int counter = 0; counter < startIndex; counter++) { reversedArray[counter] = ((double) (100)); originalReversedArray[counter] = reversedArray[counter]; } for (int counter = endIndex; counter < size; counter++) { reversedArray[counter] = ((double) (100)); originalReversedArray[counter] = reversedArray[counter]; } for (int counter = startIndex; counter < endIndex; counter++) { reversedArray[counter] = ((double) (((size - counter) - startIndex) - 1)); originalReversedArray[counter] = reversedArray[counter]; } java.util.Arrays.parallelSort(reversedArray, startIndex, endIndex); for (int counter = 0; counter < startIndex; counter++) assertTrue("Array modified outside of bounds", ((reversedArray[counter]) == (originalReversedArray[counter]))); for (int counter = startIndex; counter < (endIndex - 1); counter++) assertTrue("Array not sorted within bounds", ((reversedArray[counter]) <= (reversedArray[(counter + 1)]))); for (int counter = endIndex; counter < (org.apache.harmony.tests.java.util.ArraysTest.arraySize); counter++) assertTrue("Array modified outside of bounds", ((reversedArray[counter]) == (originalReversedArray[counter]))); try { java.util.Arrays.parallelSort(reversedArray, (startIndex + 1), startIndex); fail("IllegalArgumentException expected"); } catch (java.lang.IllegalArgumentException ignore) { } try { java.util.Arrays.parallelSort(reversedArray, (-1), startIndex); fail("ArrayIndexOutOfBoundsException expected (1)"); } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } try { java.util.Arrays.parallelSort(reversedArray, startIndex, ((reversedArray.length) + 1)); fail("ArrayIndexOutOfBoundsException expected (2)"); } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } }<END_MOD>
public libcore.io.BufferIterator bigEndianIterator() { return new libcore.io.NioBufferIterator(<START_MOD>this<END_MOD>, ((java.nio.ByteOrder.nativeOrder()) != (java.nio.ByteOrder.BIG_ENDIAN))); }
public void <START_MOD>testGetPositivePrefix<END_MOD>() { java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setPositivePrefix("++"); assertTrue( positive prefix df.getPositivePrefix().equals("++")); }
<START_MOD>public void density(org.gradle.api.Action<com.android.build.gradle.rules.SplitData> action) { action.execute(density); }<END_MOD>
public void onPnoScanFailed() { android.util.Log.e(com.android.server.wifi.scanner.<START_MOD>WificondWifiScannerImpl<END_MOD>.TAG,   scan failure received reportPnoScanFailure(); }
<START_MOD>public static java.util.concurrent.ExecutorService getExecutor() { com.android.ide.common.internal.ExecutorSingleton.checkExecutor(); return com.android.ide.common.internal.ExecutorSingleton.sExecutorService; }<END_MOD>
<START_MOD>@com.android.annotations.NonNull public static java.lang.String combineAsCamelCase(@com.android.annotations.NonNull java.util.List<? extends org.gradle.api.Named> namedList) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); boolean first = true; for (org.gradle.api.Named named : namedList) { if (first) { sb.append(named.getName()); first = false; } else { sb.append(com.android.utils.StringHelper.capitalize(named.getName())); } } return sb.toString(); }<END_MOD>
public final boolean isLoaded() { checkIsMapped(); long address = block.toLong(); long size = block.getSize(); if (size == 0) { return true; } try { int pageSize = ((int) (Libcore.os.sysconf(<START_MOD>android.os<END_MOD>.OsConstants._SC_PAGE_SIZE))); int pageOffset = ((int) (address % pageSize)); address -= pageOffset; size += pageOffset; int pageCount = ((int) (((size + pageSize) - 1) / pageSize)); byte[] vector = new byte[pageCount]; Libcore.os.mincore(address, size, vector); for (int i = 0; i < (vector.length); ++i) { if (((vector[i]) & 1) != 1) { return false; } } return true; } catch (<START_MOD>android.os<END_MOD>.ErrnoException errnoException) { return false; } }
private static native void native_drawPosText(<START_MOD>long<END_MOD> nativeCanvas, char[] text, int index, int count, float[] pos, <START_MOD>long<END_MOD> paint);
public com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder fromSample(@com.android.annotations.NonNull java.lang.String project) {<START_MOD> testApp = new com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder.EmptyTestApp(); java.io.File<END_MOD> projectDir = new java.io.File(com.android.build.gradle.integration.common.fixture.GradleTestProject.Builder.SAMPLE_PROJECT_DIR, project); <START_MOD>for (java.io.File src : com.google.common.io.Files.fileTreeTraverser().preOrderTraversal(projectDir).filter(new com.google.common.base.Predicate<java.io.File>() { @java.lang.Override public boolean apply(@com.android.annotations.Nullable java.io.File file) { <END_MOD>return <START_MOD>(file != null) && (!(file.isDirectory())); } })) { java.io.File relativePath = new java.io.File(src.toString().replace(projectDir.toString(), "")); try { testApp.addFile(new com.android.build.gradle.integration.common.fixture.app.TestSourceFile(relativePath.getParent(), src.getName(), com.google.common.io.Files.toByteArray(src))); } catch (java.lang.Exception e) { fail(e.toString()); } } return <END_MOD>this; }
@org.junit.Test public void testSetupDriverForSoftApModeError() { com.android.server.wifi.WificondControl wificondControl = mock(com.android.server.wifi.WificondControl.class); android.net.wifi.IWificond wificond = mock(android.net.wifi.IWificond.class); when(wificondControl.setupDriverForSoftApMode()).thenReturn(null); mWifiNative.setWificondControl(wificondControl); android.net.wifi.IApInterface returnedApInterface = mWifiNative.setupDriverForSoftApMode(); assertEquals(null, returnedApInterface); verify(<START_MOD>mWifiNative).startHal(eq(false)); verify(<END_MOD>wificondControl).setupDriverForSoftApMode(); }
public void testMaxLengthExtra() throws java.lang.Exception { byte[] maxLengthExtra = new byte[65535]; java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.<START_MOD>setTime(libcore.java.util.zip.ZipEntryTest.TEST_TIME); ze.<END_MOD>setExtra(maxLengthExtra); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(maxLengthExtra.length, zipFile.getEntry("x").getExtra().length); zipFile.close(); }
private void offerInstallAccessibilitySerivceOnce() { if ((mServicesCategory.getPreference(0)) != (mNoServicesMessagePreference)) { return; } <START_MOD>java.lang.String screenreaderMarketLink = android.os.SystemProperties.get(com.android.settings.AccessibilitySettings.SYSTEM_PROPERTY_MARKET_URL, com.android.settings.AccessibilitySettings.DEFAULT_SCREENREADER_MARKET_LINK); android.net.Uri marketUri = android.net.Uri.parse(screenreaderMarketLink); android.content.Intent marketIntent = new android.content.Intent(android.content.Intent.ACTION_VIEW, marketUri); if ((getPackageManager().resolveActivity(marketIntent, 0)) == null) { return; } <END_MOD>android.content.SharedPreferences preferences = getActivity().getPreferences(Context.MODE_PRIVATE); final boolean offerInstallService = !(preferences.getBoolean(com.android.settings.AccessibilitySettings.KEY_INSTALL_ACCESSIBILITY_SERVICE_OFFERED_ONCE, false)); if (offerInstallService) { preferences.edit().putBoolean(com.android.settings.AccessibilitySettings.KEY_INSTALL_ACCESSIBILITY_SERVICE_OFFERED_ONCE, true).commit(); showDialog(com.android.settings.AccessibilitySettings.DIALOG_ID_NO_ACCESSIBILITY_SERVICES); } }
public <T> java.lang.String getAsString(@javax.annotation.Nonnull com.android.sched.util.config.id.PropertyId<T> propertyId);
@org.junit.Test public void testDependency002() throws java.lang.Exception { com.android.jack.test.helper.IncrementalTestHelper ite = new com.android.jack.test.helper.IncrementalTestHelper(com.android.jack.test.toolchain.AbstractTestTools.createTempDir()); ite.addJavaFile("jack.incremental", "A.java", ( jack.incremental;   + ( class A { }   +   B { }   ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(2, ite.<START_MOD>getJayceSize<END_MOD>()); ite.addJavaFile("jack.incremental", "A.java", ( jack.incremental;   +   class A { } ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(1, ite.<START_MOD>getJayceSize()); }<END_MOD>
@java.lang.Override public void execute(com.android.build.gradle.model.DefaultAndroidBinary binary) { java.util.Collection<org.gradle.nativeplatform.SharedLibraryBinarySpec> nativeBinaries = com.android.build.gradle.model.NdkComponentModelPlugin.getNativeBinaries(library, binary.getBuildType(), binary.getProductFlavors()); binary.getNativeBinaries().addAll(nativeBinaries); <START_MOD>for (org.gradle.nativeplatform.SharedLibraryBinarySpec nativeBin : nativeBinaries) { com.android.build.gradle.ndk.internal.NdkConfiguration.configureBinary(nativeBin, buildDir, binary.getMergedNdkConfig(), ndkHandler); <END_MOD>}<START_MOD> }<END_MOD>
@java.lang.Override public boolean equals(java.lang.Object o) { if (o instanceof android.net.NetworkStats.Entry) { final android.net.NetworkStats.Entry e = ((android.net.NetworkStats.Entry) (o)); return (((((((((((<START_MOD>(<END_MOD>uid) == (e.uid)) && ((set) == (e.set))) && ((tag) == (e.tag<START_MOD>))) && ((defaultNetwork) == (e.defaultNetwork<END_MOD>))) && ((metered) == (e.metered))) && ((roaming) == (e.roaming))) && ((rxBytes) == (e.rxBytes))) && ((rxPackets) == (e.rxPackets))) && ((txBytes) == (e.txBytes))) && ((txPackets) == (e.txPackets))) && ((operations) == (e.operations))) && (iface.equals(e.iface)); } return false; }
protected void close() throws java.io.IOException { synchronized(fdLock) { if (((fd) != null) && (fd.valid())) { if (!(stream)) { sun.net.ResourceManager.afterUdpClose(); } if ((fdUseCount) == 0) { if (closePending) { return; } closePending = true; try { socketPreClose(); } finally { socketClose(); } return; } else { if (!(closePending)) { closePending = true; (fdUseCount)--; socketPreClose(); } } } } }
protected void t_Format(int count, java.lang.Object object, java.text.Format format, java.util.Vector<org.apache.harmony.tests.java.text.Support_Format.FieldContainer> expectedResults) { java.util.Vector<org.apache.harmony.tests.java.text.Support_Format.FieldContainer> results = org.apache.harmony.tests.java.text.Support_Format.findFields(format.formatToCharacterIterator(object)); <START_MOD>assertEquals(expectedResults.size(), results.size()); for (int i = 0; i < (results.size()); ++i) { assertEquals<END_MOD>((<START_MOD>""<END_MOD> + <START_MOD>i<END_MOD>), <START_MOD>expectedResults<END_MOD>.<START_MOD>get<END_MOD>(<START_MOD>i)<END_MOD>, <START_MOD>results.get(i<END_MOD>)); }<START_MOD> }<END_MOD>
<START_MOD>@org.junit.BeforeClass public static void init() throws java.io.IOException, java.lang.Exception { com.android.jack.multidex.MultiDexOverflowTests.annotations = com.android.jack.multidex.MultiDexOverflowTests.prepareAnnotations(); }<END_MOD>
private void startListenForPhoneState() { if (<START_MOD>(mPhoneStateListener) != null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG,   already listening return; } int subId = android.telephony.SubscriptionManager.getDefaultSubscriptionId(); if (<END_MOD>!(<START_MOD>android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ( invalid subscription ID   + subId)); return; }<END_MOD> int <START_MOD>events<END_MOD> = <START_MOD>getTelephonyEventsToListen(); if (events == (android.telephony.PhoneStateListener.LISTEN_NONE)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetPhoneState.TAG,   no event to listen return; }<END_MOD> mPhoneStateListener = new com.android.bluetooth.hfp.HeadsetPhoneState.HeadsetPhoneStateListener(subId, mHeadsetService.getStateMachinesThreadLooper()); mTelephonyManager.listen(mPhoneStateListener, <START_MOD>events); if ((events & <END_MOD>(android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))<START_MOD> != 0) { mTelephonyManager.setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF); } }<END_MOD>
public java.lang.String getProperty(java.lang.String key) { try { return manager.getVariable(key); } catch (java.io.IOException e) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log(java.util.logging.Level.SEVERE, ( to get variable:   + key), e); return null; } }
<START_MOD>boolean doBind() { android.content.Intent intent = new android.content.Intent(android.bluetooth.IBluetoothHearingAid.class.getName()); android.content.ComponentName comp = intent.resolveSystemService(mContext.getPackageManager(), 0); intent.setComponent(comp); if ((comp == null) || (!(mContext.bindServiceAsUser(intent, mConnection, 0, android.os.Process.myUserHandle())))) { android.util.Log.e(android.bluetooth.BluetoothHearingAid.TAG, ("Could not bind to Bluetooth Hearing Aid Service with " + intent)); return false; } return true; }<END_MOD>
@java.lang.Override public void send(java.net.DatagramPacket packet) throws java.io.IOException { if (!(channelImpl.isBlocking())) { throw new java.nio.channels.IllegalBlockingModeException(); } <START_MOD>boolean wasBound = isBound(); <END_MOD>super.send(packet); <START_MOD>if (!wasBound) { channelImpl.initBound(false); <END_MOD>}<START_MOD> }<END_MOD>
@java.lang.Override public boolean unplug(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.<START_MOD>d<END_MOD>(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ( device= + device)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { <START_MOD>android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG,   HidDevService is null <END_MOD>return false; } return service.unplug(device); }
<START_MOD>public void onPinEntered(com.android.phone.settings.fdn.EditPinPreference preference, boolean positiveResult) { if (preference == (mButtonChangePW)) { updatePWChangeState(positiveResult); } else if (preference == (mButtonDeaAll)) { deactivateAllBarring(positiveResult); } }<END_MOD>
<START_MOD>public native void requestGC();<END_MOD>
public boolean sendVendorSpecificResultCode(android.bluetooth.BluetoothDevice device, java.lang.String command, java.lang.String arg) { if (android.bluetooth.BluetoothHeadset.DBG) { android.bluetooth.BluetoothHeadset.log("sendVendorSpecificResultCode()"); } if (command == null) { throw new java.lang.IllegalArgumentException( is null } <START_MOD>final android.bluetooth.IBluetoothHeadset service = <END_MOD>mService<START_MOD>; if (((service<END_MOD> != null) && (isEnabled())) && (isValidDevice(device))) { try { return <START_MOD>service<END_MOD>.sendVendorSpecificResultCode(device, command, arg); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } if (<START_MOD>service<END_MOD> == null) { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG,   not attached to service } return false; }
private boolean isWindowsExecutable(org.eclipse.core.runtime.IPath commandPath) { <START_MOD>java.lang.String<END_MOD> <START_MOD>ext = <END_MOD>commandPath.getFileExtension()<START_MOD>; if (hasWindowsExecutableExtension(ext<END_MOD>)) { return true; } <START_MOD>ext<END_MOD> = <START_MOD>findWindowsExecutableExtension(<END_MOD>commandPath); if (<START_MOD>ext != null<END_MOD>) { return true; } return false; }
<START_MOD>private void onCapabilities(com.android.bips.discovery.DiscoveredPrinter printer, com.android.bips.jni.LocalPrinterCapabilities capabilities) { if ((mListener) == null) return; if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, ((("Printer " + printer) + " caps=") + capabilities)); if (capabilities == null) { mListener.onConnectionComplete(null); stop(); } else { com.android.bips.discovery.DiscoveredPrinter p2pPrinter = new com.android.bips.discovery.DiscoveredPrinter(printer.uuid, printer.name, com.android.bips.discovery.P2pDiscovery.toPath(mPeer), printer.location); mListener.onConnectionComplete(p2pPrinter); } }<END_MOD>
<START_MOD>@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { final int uid = intent.getIntExtra(Intent.EXTRA_UID, (-1)); java.lang.String action = intent.getAction(); if (com.android.nfc.cardemulation.RegisteredNfcFServicesCache.DEBUG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredNfcFServicesCache.TAG, ("Intent action: " + action)); if (uid != (-1)) { boolean replaced = (intent.getBooleanExtra(Intent.EXTRA_REPLACING, false)) && ((Intent.ACTION_PACKAGE_ADDED.equals(action)) || (Intent.ACTION_PACKAGE_REMOVED.equals(action))); if (!replaced) { int currentUser = android.app.ActivityManager.getCurrentUser(); if (currentUser == (android.os.UserHandle.getUserId(uid))) { invalidateCache(android.os.UserHandle.getUserId(uid)); } else { } } else { if (com.android.nfc.cardemulation.RegisteredNfcFServicesCache.DEBUG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredNfcFServicesCache.TAG, "Ignoring package intent due to package being replaced."); } } }<END_MOD>
void _seal() { <START_MOD>synchronized(mConfigs) { mROList<END_MOD> = java.util.Collections.<START_MOD>unmodifiableList<END_MOD>(<START_MOD>mConfigs<END_MOD>); }<START_MOD> }<END_MOD>
@javax.annotation.Nonnull private static com.android.jack.backend.jayce.JayceFileImporter getJayceFileImporter(@javax.annotation.Nonnull java.util.List<java.io.File> jayceImport, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks, @javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.<START_MOD>LibraryException<END_MOD> { java.util.List<com.android.jack.library.<START_MOD>InputLibrary<END_MOD>> <START_MOD>inputLibraries<END_MOD> = new java.util.ArrayList<com.android.jack.library.<START_MOD>InputLibrary<END_MOD>>(jayceImport.size()); com.android.sched.util.config.ReflectFactory<com.android.jack.jayce.JaycePackageLoader> factory = com.android.sched.util.config.ThreadConfig.get(com.android.jack.Jack.IMPORT_POLICY); for (final java.io.File jackFile : jayceImport) { try { com.android.sched.vfs.InputRootVDir vDir = com.android.jack.Jack.wrapAsVDir(jackFile, hooks); com.android.jack.library.<START_MOD>InputLibrary<END_MOD> inputJackLibrary = com.android.jack.library.<START_MOD>InputLibraryFactory.getJackLibrary<END_MOD>(vDir); <START_MOD>inputLibraries<END_MOD>.add(inputJackLibrary); com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create(inputJackLibrary, session.getPhantomLookup()); session.getTopLevelPackage().addLoader(rootPLoader); session.addImportSource(vDir); } catch (java.io.IOException ioException) { throw new com.android.jack.<START_MOD>LibraryException<END_MOD>(( importing jack container:   + (ioException.getMessage())), ioException); } } return new com.android.jack.backend.jayce.JayceFileImporter(<START_MOD>inputLibraries<END_MOD>); }
public void test_getChannel() throws java.lang.Exception { <START_MOD>try (java.net.DatagramSocket ds = new java.net.DatagramSocket()) { <END_MOD>assertNull(<START_MOD>ds.getChannel()); } try (org.apache.harmony.tests.java.net.DatagramSocketTest.DatagramServer server = <END_MOD>new <START_MOD>org.apache.harmony.tests.java.net.DatagramSocketTest.DatagramServer(LOOPBACK);java.net.DatagramSocket ds = new java.net.DatagramSocket(0)) { assertNull(ds<END_MOD>.getChannel()); ds.disconnect(); ds.close(); <START_MOD>} try (<END_MOD>java.nio.channels.DatagramChannel channel = java.nio.channels.DatagramChannel.open();java.net.DatagramSocket socket = channel.socket()<START_MOD>) {<END_MOD> assertEquals(channel, socket.getChannel()); <START_MOD>} }<END_MOD>
@java.lang.Override public java.awt.Component getListCellRendererComponent(javax.swing.JList list, java.lang.Object value, int index, boolean isSelected, boolean cellHasFocus) { if (!(value instanceof com.google.gct.login.ui.UsersListItem)) { return null; } javax.swing.JPanel mainPanel = new javax.swing.JPanel(new <START_MOD>java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 10)); mainPanel.setMinimumSize<END_MOD>(MAIN_PANEL_DIMENSION); mainPanel.setAlignmentX(java.awt.Component.LEFT_ALIGNMENT); final java.awt.Color bg = (isSelected) ? ACTIVE_COLOR : com.intellij.util.ui.UIUtil.getListBackground(); final java.awt.Color fg = (isSelected) ? com.intellij.util.ui.UIUtil.getListSelectionForeground() : com.intellij.util.ui.UIUtil.getListForeground(); mainPanel.setBackground(bg); mainPanel.setForeground(fg); java.awt.Image imageIcon = ((com.google.gct.login.ui.UsersListItem) (value)).getUserPicture(); mainPanel.add(new com.google.gct.login.ui.UsersListCellRenderer.ImagePanel(imageIcon)); mainPanel.add(createTextDisplay(isSelected, ((com.google.gct.login.ui.UsersListItem) (value)))); return mainPanel; }
private android.net.RecommendationResult verifyAndCaptureResult(android.net.RecommendationRequest request) { mProvider.<START_MOD>requestRecommendation<END_MOD>(request, mCallback); org.mockito.ArgumentCaptor<android.net.RecommendationResult> resultCaptor = org.mockito.ArgumentCaptor.forClass(android.net.RecommendationResult.class); verify(mCallback).onResult(resultCaptor.capture()); return resultCaptor.getValue(); }
<START_MOD>private android.util.Size updateMaxSize(int sizeLimit, android.util.Size defSize) { android.view.WindowManager windowManager = ((android.view.WindowManager) (getContext().getSystemService(android.content.Context.WINDOW_SERVICE))); android.view.Display display = windowManager.getDefaultDisplay(); int width = display.getWidth(); int height = display.getHeight(); if (height > width) { height = width; width = display.getHeight(); } if (((mOrderedPreviewSizes) != null) && (sizeLimit == (android.hardware.camera2.cts.RobustnessTest.MaxOutputSizes.PREVIEW))) { for (android.util.Size size : mOrderedPreviewSizes) { if ((width >= (size.getWidth())) && (height >= (size.getHeight()))) return size; } } return defSize; }<END_MOD>
private void stopObexServerSession() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG,   Service stopObexServerSession <START_MOD>com.android.bluetooth.pbap.BluetoothPbapUtils.savePbapParams(this, BluetoothPbapUtils.primaryVersionCounter, BluetoothPbapUtils.secondaryVersionCounter, BluetoothPbapUtils.mDbIdentifier.get(), BluetoothPbapUtils.contactsLastUpdated, BluetoothPbapUtils.totalFields, BluetoothPbapUtils.totalSvcFields, BluetoothPbapUtils.totalContacts); <END_MOD>mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_ACQUIRE_WAKE_LOCK); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_RELEASE_WAKE_LOCK); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if (mAdapter.isEnabled()) { startSocketListeners(); } setState(BluetoothPbap.STATE_DISCONNECTED); }
private java.<START_MOD>lang<END_MOD>.<START_MOD>String<END_MOD> getListingOfDex(@javax.annotation.Nonnull java.io.File dex) throws java.io.IOException { assert dex.isFile(); <START_MOD>java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (<END_MOD>com.android.jack.<START_MOD>dx<END_MOD>.<START_MOD>io.ClassDef<END_MOD> <START_MOD>def<END_MOD> <START_MOD>:<END_MOD> new com.android.jack.<START_MOD>dx<END_MOD>.<START_MOD>io.DexBuffer<END_MOD>(<START_MOD>dex).classDefs()) {<END_MOD> java.lang.String <START_MOD>typeName<END_MOD> <START_MOD>=<END_MOD> <START_MOD>def.getTypeName<END_MOD>(); <START_MOD>sb<END_MOD>.<START_MOD>append<END_MOD>(<START_MOD>typeName<END_MOD>); <START_MOD>sb<END_MOD>.<START_MOD>append<END_MOD>(<START_MOD>":"<END_MOD>); <START_MOD>sb<END_MOD>.<START_MOD>append(TextUtils<END_MOD>.<START_MOD>LINE_SEPARATOR<END_MOD>); <START_MOD>} <END_MOD>return <START_MOD>sb.toString()<END_MOD>; }
public boolean isApplicationOnIcc(com.android.internal.telephony<START_MOD>.uicc<END_MOD>.IccCardApplicationStatus.AppType type) { java.lang.Boolean retValue = ((mUiccCard) != null) ? mUiccCard.isApplicationOnIcc(type) : false; return retValue; }
<START_MOD>@java.lang.Override public void provideConstructorArguments(java.util.List<org.apache.harmony.jpda.tests.framework.jdwp.Value> constructorArguments) { long debuggeeClassId = getClassIDBySignature(getDebuggeeClassSignature()); long stringBufferFieldId = checkField(debuggeeClassId, "STRING_BUFFER"); org.apache.harmony.jpda.tests.framework.jdwp.Value stringBufferValue = debuggeeWrapper.vmMirror.getReferenceTypeValue(debuggeeClassId, stringBufferFieldId); constructorArguments.add(stringBufferValue); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String toString() { return new com.google.gson.Gson().toJson(new com.android.devtools.server.model.RestServiceModel(POST, "/SmsManagerService", new com.android.devtools.server.model.SmsManagerModel("String").toString())); }<END_MOD>
private com.android.ide.common.res2.ResourceFile createResourceFile(@com.android.annotations.NonNull java.io.File file, @com.android.annotations.NonNull com.android.ide.common.res2.ResourceSet.FolderData folderData, @com.android.annotations.NonNull com.android.utils.ILogger logger) throws com.android.ide.common.res2.MergingException { if ((folderData.type) != null) { com.android.ide.common.res2.FileResourceNameValidator.validate(file, folderData.type); java.lang.String name = <START_MOD>com.android.ide.common.res2.ResourceSet.getNameForFile(file); if (mPreprocessor.needsPreprocessing(file)) { return com.android.ide.common.res2.ResourceFile.generatedFiles(file, getResourceItemsForGeneratedFiles(file), folderData.qualifiers); } else { return new com.android.ide.common.res2.ResourceFile(file, new com.android.ide.common.res2.ResourceItem(<END_MOD>name, folderData.type, null), folderData.qualifiers);<START_MOD> }<END_MOD> } else { try { com.android.ide.common.res2.ValueResourceParser2 parser = new com.android.ide.common.res2.ValueResourceParser2(file); java.util.List<com.android.ide.common.res2.ResourceItem> items = parser.parseFile(); return new com.android.ide.common.res2.ResourceFile(file, items, folderData.qualifiers); } catch (com.android.ide.common.res2.MergingException e) { logger.error(e,   to parse %s file.getAbsolutePath()); throw e; } } }
@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(("com.android.jack.shrob.test" + testNumber)); <START_MOD>java.io.File refFolder = new java.io.File(testFolder, "refsSeed"); java.io.File candidateOutputSeeds = com.android.jack.test.toolchain.AbstractTestTools.createTempFile("seeds", ".txt"); java.io.File refOutputSeeds = new java.io.File(refFolder, (("expected-" + flagNumber) + ".txt")); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File seedsFile = addOptionsToFlagsFile(new java.io.File(testFolder, <END_MOD>("proguard.flags" + flagNumber)<START_MOD>)<END_MOD>, testFolder<START_MOD>, ( -printseeds   + (candidateOutputSeeds<END_MOD>.getAbsolutePath()<START_MOD>))); toolchain.addProguardFlags(seedsFile); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(<END_MOD>new java.io.File(testFolder, <START_MOD>"jack")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorSeeds(refOutputSeeds,<END_MOD> candidateOutputSeeds)); }
static com.android.internal.telephony.RILRequest obtain(int request, android.os.Message result) { com.android.internal.telephony.RILRequest rr = null; synchronized(com.android.internal.telephony.RILRequest.sPoolSync) { if ((com.android.internal.telephony.RILRequest.sPool) != null) { rr = com.android.internal.telephony.RILRequest.sPool; com.android.internal.telephony.RILRequest.sPool = rr.mNext; rr.mNext = null; (com.android.internal.telephony.RILRequest.sPoolSize)--; } } if (rr == null) { rr = new com.android.internal.telephony.RILRequest(); } rr.mSerial = com.android.internal.telephony.RILRequest.sNextSerial.getAndIncrement(); rr.mRequest = request; rr.mResult = result; rr.mParcel = android.os.Parcel.obtain(); rr.mWakeLockType = com.android.internal.telephony.RIL.INVALID_WAKELOCK; rr.<START_MOD>mClientId = android.app.ActivityThread.currentOpPackageName(); rr.<END_MOD>mStartTimeMs = android.os.SystemClock.elapsedRealtime(); if ((result != null) && ((result.getTarget()) == null)) { throw new java.lang.NullPointerException( target must not be null } rr.mParcel.writeInt(request); rr.mParcel.writeInt(rr.mSerial); return rr; }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mTelephonyManager = ((android.telephony.TelephonyManager) (getContext().getSystemService(Context.TELEPHONY_SERVICE))); mDestAddr = mTelephonyManager.getLine1Number(); mText =   is a test message <START_MOD>if ((mTelephonyManager.getPhoneType()) == (android.telephony.TelephonyManager.PHONE_TYPE_CDMA)) { mDeliveryReportSupported = true; <END_MOD>}<START_MOD> else if (mTelephonyManager.getDeviceId().equals("000000000000000")) { mDeliveryReportSupported = false; } else { java.lang.String mccmnc = mTelephonyManager.getSimOperator(); mDeliveryReportSupported = !(mccmnc.equals("310410")); } }<END_MOD>
public void clearField(java.lang.String fieldName) throws java.lang.NoSuchMethodException { java.lang.reflect.Method m = getClass().getMethod(android.icu.dev.test.format.<START_MOD>DataDrivenNumberFormatTestData<END_MOD>.fieldToClearer(fieldName)); try { m.invoke(this); } catch (java.lang.IllegalAccessException e) { throw new java.lang.RuntimeException(e); } catch (java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException(e); } }
public void runTest(com.android.rs.imagejb.ImageProcessingTest.TestAction ta, java.lang.String testName) { float sum = 0; for (int i = 0; i < (mIteration); i++) { runOnUiThread(ta); float bmValue = ta.getBenchmark(); android.util.Log.v(TAG, ((( for iteration   + i) +   is   + bmValue)); sum += bmValue; } float avgResult = sum / (mIteration); android.os.Bundle results = new android.os.Bundle(); results.putString(TEST_NAME, testName); results.putFloat(<START_MOD>(testName + "_avg")<END_MOD>, avgResult); getInstrumentation().sendStatus(Activity.RESULT_OK, results); }
<START_MOD>public void testTestSuccessMetrics() { java.lang.StringBuilder output = buildCommonResult(); addStatusKey(output, "randomKey", "randomValue"); assertFalse(((mTestResult.mTestMetrics) == null)); assertEquals("randomValue", mTestResult.mTestMetrics.get("randomKey")); }<END_MOD>
<START_MOD>public void testCombined() throws java.io.IOException { com.android.builder.model.AndroidLibrary library1 = com.android.testutils.TestUtils.createMockLibrary(("" + ((((((("int dimen activity_horizontal_margin 0x7f030000\n" + "int dimen activity_vertical_margin 0x7f030001\n") + "int id action_settings 0x7f060000\n") + "int layout activity_main 0x7f020000\n") + "int menu menu_main 0x7f050000\n") + "int string action_settings 0x7f040000\n") + "int string app_name 0x7f040001\n") + "int string hello_world 0x7f040002")), ""); com.android.builder.model.AndroidLibrary library2 = com.android.testutils.TestUtils.createMockLibrary(("" + ("int layout foo 0x7f030001\n" + "int layout bar 0x7f060000\n")), ("" + "layout foo\n")); java.util.List<com.android.builder.model.AndroidLibrary> androidLibraries = java.util.Arrays.asList(library1, library2); com.android.ide.common.repository.ResourceVisibilityLookup visibility = com.android.ide.common.repository.ResourceVisibilityLookup.create(androidLibraries, null); assertTrue(visibility.isPrivate(ResourceType.DIMEN, "activity_horizontal_margin")); assertTrue(visibility.isPrivate(ResourceType.ID, "action_settings")); assertTrue(visibility.isPrivate(ResourceType.LAYOUT, "activity_main")); assertTrue(visibility.isPrivate(ResourceType.DIMEN, "activity_vertical_margin")); assertFalse(visibility.isPrivate(ResourceType.LAYOUT, "foo")); assertTrue(visibility.isPrivate(ResourceType.LAYOUT, "bar")); assertFalse(visibility.isPrivate(ResourceType.DIMEN, "unknown")); }<END_MOD>
<START_MOD>@java.lang.Override @javax.annotation.Nonnull public com.android.jack.library.OutputJackLibrary getOutputJackLibrary() { com.android.sched.vfs.InputOutputVFS outputDir; com.android.sched.vfs.Container containerType = com.android.sched.util.config.ThreadConfig.get(Options.LIBRARY_OUTPUT_CONTAINER_TYPE); if (containerType == (com.android.sched.vfs.Container.DIR)) { outputDir = com.android.sched.util.config.ThreadConfig.get(Options.LIBRARY_OUTPUT_DIR); } else { outputDir = com.android.sched.util.config.ThreadConfig.get(Options.LIBRARY_OUTPUT_ZIP); } return com.android.jack.library.JackLibraryFactory.getOutputLibrary(outputDir, com.android.jack.Jack.getEmitterId(), com.android.jack.Jack.getVersionString()); }<END_MOD>
<START_MOD>public synchronized void endSession() { int threadId = getCallingThreadId(); android.telecom.Logging.Session completedSession = sSessionMapper.get(threadId); if (completedSession == null) { android.telecom.Logging.android.telecom.Log.w(android.telecom.Logging.Sessions.LOGGING_TAG, "Log.endSession was called with no session active."); return; } completedSession.markSessionCompleted(java.lang.System.currentTimeMillis()); if (!(completedSession.isStartedFromActiveSession())) { android.telecom.Logging.android.telecom.Log.v(android.telecom.Logging.Sessions.LOGGING_TAG, ((((Session.END_SUBSESSION) + " (dur: ") + (completedSession.getLocalExecutionTime())) + " mS)")); } else { android.telecom.Logging.android.telecom.Log.v(android.telecom.Logging.Sessions.LOGGING_TAG, ((((Session.END_SUBSESSION) + " (Invisible Subsession) (dur: ") + (completedSession.getLocalExecutionTime())) + " ms)")); } android.telecom.Logging.Session parentSession = completedSession.getParentSession(); sSessionMapper.remove(threadId); endParentSessions(completedSession); if (((parentSession != null) && (!(parentSession.isSessionCompleted()))) && (completedSession.isStartedFromActiveSession())) { sSessionMapper.put(threadId, parentSession); } }<END_MOD>
private com.android.ide.<START_MOD>common.platformData<END_MOD>.AttributeInfo parseAttributeTypes(org.w3c.dom.Node attrNode, java.lang.String name) { java.util.TreeSet<com.android.ide.<START_MOD>common.platformData<END_MOD>.AttributeInfo.Format> formats = new java.util.TreeSet<com.android.ide.<START_MOD>common.platformData<END_MOD>.AttributeInfo.Format>(); java.lang.String[] enumValues = null; java.lang.String[] flagValues = null; org.w3c.dom.Node attrFormat = attrNode.getAttributes().getNamedItem("format"); if (attrFormat != null) { for (java.lang.String f : attrFormat.getNodeValue().split("\\|")) { try { com.android.ide.common.api.IAttributeInfo.Format format = AttributeInfo.Format.valueOf(f.toUpperCase()); if (((format != null) && (format != (com.android.ide.common.api.IAttributeInfo.Format.ENUM))) && (format != (com.android.ide.common.api.IAttributeInfo.Format.FLAG))) { formats.add(format); } } catch (java.lang.IllegalArgumentException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e,   format name   in <attr name= file   f, name, getOsAttrsXmlPath()); } } } enumValues = parseEnumFlagValues(attrNode, "enum", name); if (enumValues != null) { formats.add(AttributeInfo.Format.ENUM); } flagValues = parseEnumFlagValues(attrNode, "flag", name); if (flagValues != null) { formats.add(AttributeInfo.Format.FLAG); } com.android.ide.<START_MOD>common.platformData<END_MOD>.AttributeInfo info = new com.android.ide.<START_MOD>common.platformData<END_MOD>.AttributeInfo(name, formats.toArray(new com.android.ide.<START_MOD>common.platformData<END_MOD>.AttributeInfo.Format[formats.size()])); info.setEnumValues(enumValues); info.setFlagValues(flagValues); return info; }
@java.lang.Override public void setupDataCall(int radioTechnology, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, android.os.Message result) { com.android.internal.telephony.test.SimulatedCommandsVerifier.getInstance().setupDataCall(radioTechnology, dataProfile, isRoaming, allowRoaming, result); if ((mDcResponse) == null) { try { mDcResponse = new android.telephony.data.DataCallResponse(0, (-1), 1, 2, "IP", "rmnet_data7", java.util.Arrays.asList(new android.<START_MOD>net.LinkAddress(android.net.NetworkUtils.numericToInetAddress<END_MOD>("12.34.56.78"<START_MOD>)<END_MOD>, 0)), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("98.76.54.32")), java.util.Arrays.asList(android.net.NetworkUtils.numericToInetAddress("11.22.33.44")), null, 1440); } catch (java.lang.Exception e) { } } if (mDcSuccess) { resultSuccess(result, mDcResponse); } else { resultFail(result, mDcResponse, new java.lang.RuntimeException( data call failed! } }
@java.lang.Override public void unregisterNetworkCallback(android.net.ConnectivityManager.NetworkCallback cb) { if (trackingDefault.contains(cb)) { trackingDefault.remove(cb); } else if (listening.containsKey(cb)) { listening.remove(cb); } else if (requested.containsKey(cb)) { requested.remove(cb); } <START_MOD>else { fail( callback removed } <END_MOD>assertFalse(trackingDefault.contains(cb)); assertFalse(listening.containsKey(cb)); assertFalse(requested.containsKey(cb)); }
<START_MOD>private ApkSigningBlockUtils.SignerConfig createSigningBLockSignerConfig(com.android.apksig.DefaultApkSignerEngine.SignerConfig signerConfig, boolean apkSigningBlockPaddingSupported, int schemeId) throws java.security.InvalidKeyException { java.util.List<java.security.cert.X509Certificate> certificates = signerConfig.getCertificates(); java.security.PublicKey publicKey = certificates.get(0).getPublicKey(); com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig newSignerConfig = new com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig(); newSignerConfig.privateKey = signerConfig.getPrivateKey(); newSignerConfig.certificates = certificates; newSignerConfig.minSdkVersion = signerConfig.getMinSdkVersion(); newSignerConfig.maxSdkVersion = signerConfig.getMaxSdkVersion(); newSignerConfig.apkSignerLineage = signerConfig.getApkSignerLineage(); switch (schemeId) { case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V2 : newSignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v2.V2SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); break; case com.android.apksig.internal.apk.ApkSigningBlockUtils.VERSION_APK_SIGNATURE_SCHEME_V3 : newSignerConfig.signatureAlgorithms = com.android.apksig.internal.apk.v3.V3SchemeSigner.getSuggestedSignatureAlgorithms(publicKey, mMinSdkVersion, apkSigningBlockPaddingSupported); break; default : throw new java.lang.IllegalArgumentException("Unknown APK Signature Scheme ID requested"); } return newSignerConfig; }<END_MOD>
@java.lang.Override public boolean processMessage(android.os.Message message) { switch (message.what) { case com.android.server.wifi.SoftApManager.SoftApStateMachine.<START_MOD>CMD_INTERFACE_STATUS_CHANGED : if ((message.obj) != (mNetworkObserver)) { break; } boolean isUp = (message.arg1) == 1; if (isUp == (mIfaceIsUp)) { break; } mIfaceIsUp = isUp; if (isUp) { android.util.Log.d(com.android.server.wifi.SoftApManager.TAG,   is ready for use updateApState(WifiManager.WIFI_AP_STATE_ENABLED, 0); } else { } break; case com.android.server.wifi.SoftApManager.SoftApStateMachine.<END_MOD>CMD_START : break; case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_AP_INTERFACE_BINDER_DEATH : case com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_STOP : updateApState(WifiManager.WIFI_AP_STATE_DISABLING, 0); stopSoftAp(); if ((message.what) == (com.android.server.wifi.SoftApManager.SoftApStateMachine.CMD_AP_INTERFACE_BINDER_DEATH)) { updateApState(WifiManager.WIFI_AP_STATE_FAILED, WifiManager.SAP_START_FAILURE_GENERAL); } else { updateApState(WifiManager.WIFI_AP_STATE_DISABLED, 0); } transitionTo(mIdleState); break; default : return NOT_HANDLED; } return HANDLED; }
@java.lang.Override protected void readSourceFolder(java.io.File sourceFolder, com.android.utils.ILogger logger) throws com.android.ide.common.res2.MergingException { <START_MOD>for (java.io.File file : com.google.common.io.Files.fileTreeTraverser().preOrderTraversal(sourceFolder)) { if ((file.isFile()) && (!(isIgnored(file)))) { handleNewFile<END_MOD>(sourceFolder, <START_MOD>file<END_MOD>, logger); }<START_MOD> } }<END_MOD>
<START_MOD>private java.lang.String defaultLogdSizeValue() { java.lang.String defaultValue = android.os.SystemProperties.get(com.android.settings.DevelopmentSettings.SELECT_LOGD_DEFAULT_SIZE_PROPERTY); if ((defaultValue == null) || ((defaultValue.length()) == 0)) { if (android.os.SystemProperties.get("ro.config.low_ram").equals("true")) { defaultValue = "65536"; } else { defaultValue = "262144"; } } return defaultValue; }<END_MOD>
<START_MOD>private void markCall(@javax.annotation.Nonnull java.lang.String signature, @javax.annotation.Nonnull java.util.List<com.android.jack.ir.ast.JExpression> args, boolean isVirtual) { java.util.concurrent.ConcurrentMap<java.lang.String, com.android.jack.optimizations.common.LiteralValueListTracker> map = (isVirtual) ? virtual : direct; com.android.jack.optimizations.common.LiteralValueListTracker tracker = map.get(signature); if (tracker == null) { tracker = new com.android.jack.optimizations.common.ConcurrentLiteralValueListTracker(args.size()); com.android.jack.optimizations.common.LiteralValueListTracker existing = map.putIfAbsent(signature, tracker); if (existing != null) { tracker = existing; } } tracker.updateWith(args); }<END_MOD>
<START_MOD>@com.android.internal.annotations.VisibleForTesting public boolean equalsAllowedUids(android.net.NetworkCapabilities nc) { java.util.Set<android.net.UidRange> comparedUids = nc.mAllowedUids; if (null == comparedUids) return null == (mAllowedUids); if (null == (mAllowedUids)) return false; final java.util.Set<android.net.UidRange> allowedUids = new android.util.ArraySet(mAllowedUids); for (android.net.UidRange range : comparedUids) { if (!(allowedUids.contains(range))) { return false; } allowedUids.remove(range); } return allowedUids.isEmpty(); }<END_MOD>
public void test4_0MeasurementModePeakRms() throws java.lang.Exception { if (!(hasAudioOutput())) { return; } try { getVisualizer(<START_MOD>1<END_MOD>); mVisualizer.setEnabled(true); assertTrue( not enabled mVisualizer.getEnabled()); java.lang.Thread.sleep(100); int status = mVisualizer.setMeasurementMode(Visualizer.MEASUREMENT_MODE_PEAK_RMS); assertEquals( for PEAK_RMS doesn report success Visualizer.SUCCESS, status); int mode = mVisualizer.getMeasurementMode(); assertEquals( doesn report PEAK_RMS Visualizer.MEASUREMENT_MODE_PEAK_RMS, mode); } catch (java.lang.IllegalStateException e) { fail( called in wrong state } catch (java.lang.InterruptedException e) { fail( interrupted } finally { releaseVisualizer(); } }
<START_MOD>private static android.content.Intent getConnectionStateBroadcastMatcher(android.bluetooth.BluetoothDevice device, int toState, int fromState) { return org.mockito.hamcrest.MockitoHamcrest.argThat(org.hamcrest.core.AllOf.allOf(android.support.test.espresso.intent.matcher.IntentMatchers.hasAction(BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED), android.support.test.espresso.intent.matcher.IntentMatchers.hasExtra(BluetoothDevice.EXTRA_DEVICE, device), android.support.test.espresso.intent.matcher.IntentMatchers.hasExtra(BluetoothProfile.EXTRA_STATE, toState), android.support.test.espresso.intent.matcher.IntentMatchers.hasExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, fromState))); }<END_MOD>
public void testLongMessage() throws java.io.IOException { byte[] data = new byte[1024 * 1024]; new java.util.Random().nextBytes(data); }
<START_MOD>private void removeRecentTaskLocked(int userId) { if (userId <= 0) { android.util.Slog.i(com.android.server.am.ActivityManagerService.TAG, ("Can't remove recent task on user " + userId)); return; } int N = mRecentTasks.size(); for (int i = 0; i < N; i++) { com.android.server.am.TaskRecord tr = mRecentTasks.get(i); if ((tr.userId) == userId) { tr.disposeThumbnail(); mRecentTasks.remove(i); android.util.Slog.i(com.android.server.am.ActivityManagerService.TAG, ("remove RecentTask " + userId)); i--; N--; } } }<END_MOD>
<START_MOD>@java.lang.Override public void onDevicesChange() { }<END_MOD>
public void testSkipOnLargeFiles() throws java.lang.Exception { java.io.File largeFile = java.io.File.createTempFile("FileInputStreamTest_testSkipOnLargeFiles", ""); final long requiredFreeSpaceBytes = (3172L * 1024) * 1024; final android.system.StructStatVfs statVfs = android.system.Os.statvfs(largeFile.getPath()); final long freeSpaceAvailableBytes = (statVfs.f_bsize) * (statVfs.f_bavail); if (freeSpaceAvailableBytes < requiredFreeSpaceBytes) { return; } try { <START_MOD>long fileSize = ((3 * 1024) * 1024) * 1024L; int resultCode = new java.lang.ProcessBuilder().command("fallocate", "-l", "3G", largeFile.getPath()).start().waitFor(); assertEquals(0, resultCode); assertEquals(fileSize, largeFile.length()); <END_MOD>java.io.<START_MOD>FileInputStream fis<END_MOD> = new java.io.<START_MOD>FileInputStream(largeFile); long lastByte = fileSize - 1; assertEquals(0, Libcore.os.lseek(fis.getFD(), 0, OsConstants.SEEK_CUR)); assertEquals(lastByte, fis.skip(lastByte)); } finally<END_MOD> { <START_MOD>assertTrue(largeFile.delete()<END_MOD>); } }
<START_MOD>private void addRightClickMenu(final org.eclipse.swt.widgets.Table table) { final org.eclipse.jface.action.Action filterAction = new org.eclipse.jface.action.Action("Filter similar messages..") { @java.lang.Override public void run() { java.util.List<com.android.ddmuilib.logcat.LogCatMessage> selectedMessages = getSelectedLogCatMessages(); if ((selectedMessages.size()) == 0) { addNewFilter(); } else { com.android.ddmuilib.logcat.LogCatMessage m = selectedMessages.get(0); addNewFilter(m.getTag(), m.getMessage(), m.getPid(), m.getAppName(), m.getLogLevel()); } } }; final org.eclipse.jface.action.MenuManager mgr = new org.eclipse.jface.action.MenuManager(); mgr.setRemoveAllWhenShown(true); mgr.addMenuListener(new org.eclipse.jface.action.IMenuListener() { @java.lang.Override public void menuAboutToShow(org.eclipse.jface.action.IMenuManager arg0) { mgr.add(filterAction); } }); final org.eclipse.swt.widgets.Menu menu = mgr.createContextMenu(table); table.addListener(SWT.MenuDetect, new org.eclipse.swt.widgets.Listener() { @java.lang.Override public void handleEvent(org.eclipse.swt.widgets.Event event) { org.eclipse.swt.graphics.Point pt = table.getDisplay().map(null, table, new org.eclipse.swt.graphics.Point(event.x, event.y)); org.eclipse.swt.graphics.Rectangle clientArea = table.getClientArea(); boolean header = ((pt.y) > (clientArea.y)) && ((pt.y) < ((clientArea.y) + (table.getHeaderHeight()))); table.setMenu((header ? null : menu)); } }); }<END_MOD>
<START_MOD>@org.junit.Test public void testStateTransition_AudioDisconnectingToConnected_Timeout() { setUpAudioDisconnectingState(); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.CONNECT_TIMEOUT_TEST_WAIT_MILLIS)).transitionTo(any(HeadsetStateMachine.Connected.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getAudioStateBroadcastMatcher(mTestDevice, BluetoothHeadset.STATE_AUDIO_DISCONNECTED, BluetoothHeadset.STATE_AUDIO_CONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }<END_MOD>
<START_MOD>private void onAudioStateChanged(int state, byte[] address) { com.android.bluetooth.a2dp.StackEvent event = new com.android.bluetooth.a2dp.StackEvent(StackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED); event.valueInt = state; event.device = getDevice(address); if (com.android.bluetooth.a2dp.A2dpNativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpNativeInterface.TAG, ("onAudioStateChanged: " + event)); } com.android.bluetooth.a2dp.A2dpService service = com.android.bluetooth.a2dp.A2dpService.getA2dpService(); if (service != null) { service.messageFromNative(event); } else { android.util.Log.w(com.android.bluetooth.a2dp.A2dpNativeInterface.TAG, "onAudioStateChanged ignored: service not available"); } }<END_MOD>
<START_MOD>public void stopNetworkScan(int scanId) { synchronized(mScheduler) { if (((scanId == (mScheduler.mLiveRequestInfo.mScanId)) && ((android.os.Binder.getCallingUid()) == (mScheduler.mLiveRequestInfo.mUid))) || ((scanId == (mScheduler.mPendingRequestInfo.mScanId)) && ((android.os.Binder.getCallingUid()) == (mScheduler.mPendingRequestInfo.mUid)))) { mHandler.obtainMessage(com.android.internal.telephony.NetworkScanRequestTracker.CMD_STOP_NETWORK_SCAN, scanId).sendToTarget(); } else { throw new java.lang.IllegalArgumentException((("Scan with id: " + scanId) + " does not exist!")); } } }<END_MOD>
@<START_MOD>org.junit.Test<END_MOD> public void <START_MOD>tecoveryFromExceptionOnMainThreadLoopMainThreadUntilIdle<END_MOD>() throws java.lang.Exception { final java.lang.RuntimeException poison = new java.lang.RuntimeException("oops"); try { Espresso.onView(withId(R.id.enter_data_edit_text)).perform(new android.support.test.espresso.EspressoEdgeCaseTest.TestAction() { @java.lang.Override public void perform(android.support.test.espresso.UiController controller, android.view.View view) { mainHandler.post(new java.lang.Runnable() { @java.lang.Override public void run() { throw poison; } }); controller.loopMainThreadUntilIdle(); } }); fail( throw } catch (java.lang.RuntimeException re) { if (re == poison) { } else { throw re; } } Espresso.onView(withId(R.id.enter_data_edit_text)).perform(typeText( World111 Espresso.onView(withId(R.id.enter_data_edit_text)).check(matches(withText( World111 }
<START_MOD>public void testSimpleMapping() throws java.lang.Exception { HprofBuffer.BUFFER_SIZE = ((int) (file.length())); com.android.tools.perflib.heap.Snapshot snapshot = new com.android.tools.perflib.heap.HprofParser(file).parse(); assertSnapshotCorrect(snapshot); }<END_MOD>
<START_MOD>@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) { for (com.android.jack.ir.ast.JParameter parameter : method.getParams()) { addParameterName(parameter.getName()); accessFlags.add(new com.android.jack.ir.ast.JIntLiteral(si, parameter.getModifier())); } return super.visit(method); }<END_MOD>
public int getExpectedSamplingPeriodUs() { if (!(isDelayRateTestable())) { throw new java.lang.IllegalArgumentException( cannot be SENSOR_DELAY_[GAME|UI|NORMAL] } int expectedSamplingPeriodUs<START_MOD>; switch (<END_MOD>mSamplingPeriodUs<START_MOD>) { case android.hardware.SensorManager.SENSOR_DELAY_FASTEST : expectedSamplingPeriodUs = 0; break; case android.hardware.SensorManager.SENSOR_DELAY_GAME : expectedSamplingPeriodUs = 20000; break; case android.hardware.SensorManager.SENSOR_DELAY_UI : expectedSamplingPeriodUs = 66667; break; case android.hardware.SensorManager.SENSOR_DELAY_NORMAL : expectedSamplingPeriodUs = 200000; break; default : expectedSamplingPeriodUs = mSamplingPeriodUs; break; }<END_MOD> int sensorMaxDelay = mSensor.getMaxDelay(); if (sensorMaxDelay > 0) { expectedSamplingPeriodUs = java.lang.Math.min(expectedSamplingPeriodUs, sensorMaxDelay); } return java.lang.Math.max(expectedSamplingPeriodUs, mSensor.getMinDelay()); }
private void srcToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.io.File... sources) { <START_MOD>invokeJack(args<END_MOD>); args.add("--verbose"); args.add(verbosityLevel.name()); args.add("--sanity-checks"); args.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { args.add("--incremental-folder"); args.add(incrementalFolder.getAbsolutePath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if ((classpath.size()) > 0) { args.add("--classpath"); args.add(getClasspathAsString()); } for (java.io.File res : resImport) { args.add("--import-resource"); args.add(res.getPath()); } for (java.io.File meta : metaImport) { args.add("--import-meta"); args.add(meta.getPath()); } args.addAll(extraJackArgs); for (java.io.File jarjarFile : jarjarRules) { args.add("--config-jarjar"); args.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add("--config-proguard"); args.add(flags.getAbsolutePath()); } if (withDebugInfos) { args.add("-g"); } addAnnotationProcessorArgs(args); for (java.io.File staticLib : staticLibs) { args.add("--import"); args.add(staticLib.getAbsolutePath()); } }
<START_MOD>public boolean provisionDiscovery(android.net.wifi.p2p.WifiP2pConfig config) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure())) return false; int targetMethod = wpsInfoToConfigMethod(config.wps.setup); if (targetMethod == (-1)) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ("Unrecognized WPS configuration method: " + (config.wps.setup))); return false; } byte[] macAddress = stringToAddress(config.deviceAddress); if (macAddress == null) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, "Cannot parse null mac address."); return false; } com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult((((("provisionDiscovery(" + (config.deviceAddress)) + ", ") + (config.wps.setup)) + ")")); try { result.setResult(mISupplicantP2pIface.provisionDiscovery(macAddress, targetMethod)); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ("ISupplicantP2pIface exception: " + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }<END_MOD>
<START_MOD>public static com.android.ide.common.blame.Message.Kind findIgnoringCase(java.lang.String s) { return com.android.ide.common.blame.Message.Kind.findIgnoringCase(s, null); }<END_MOD>
public void test_socket_accept_Nonblocking_Bound() throws java.io.IOException { serverChannel.configureBlocking(false); <START_MOD>serverChannel.bind(null); <END_MOD>java.net.ServerSocket gotSocket = serverChannel.socket(); try { gotSocket.accept(); fail( throw an IllegalBlockingModeException } catch (java.nio.channels.IllegalBlockingModeException e) { } serverChannel.close(); try { gotSocket.accept(); fail( throw a ClosedChannelException } catch (java.nio.channels.ClosedChannelException e) { } }
<START_MOD>@org.junit.Test public void testOpenUdpEncapSocketTagsSocket() throws java.lang.Exception { com.android.server.IpSecService.UidFdTagger mockTagger = mock(IpSecService.UidFdTagger.class); com.android.server.IpSecService testIpSecService = new com.android.server.IpSecService(mMockContext, mMockIpSecSrvConfig, mockTagger); IpSecUdpEncapResponse udpEncapResp = testIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(udpEncapResp); assertEquals(IpSecManager.Status.OK, udpEncapResp.status); java.io.FileDescriptor sockFd = udpEncapResp.fileDescriptor.getFileDescriptor(); org.mockito.ArgumentMatcher<java.io.FileDescriptor> fdMatcher = new org.mockito.ArgumentMatcher<java.io.FileDescriptor>() { public boolean matches(java.io.FileDescriptor arg) { try { android.system.StructStat sockStat = android.system.Os.fstat(sockFd); android.system.StructStat argStat = android.system.Os.fstat(arg); return ((sockStat.st_ino) == (argStat.st_ino)) && ((sockStat.st_dev) == (argStat.st_dev)); } catch (android.system.ErrnoException e) { return false; } } }; verify(mockTagger).tag(argThat(fdMatcher), eq(android.system.Os.getuid())); testIpSecService.closeUdpEncapsulationSocket(udpEncapResp.resourceId); udpEncapResp.fileDescriptor.close(); }<END_MOD>
@com.android.annotations.Nullable public com.android.sdklib.IAndroidTarget getTargetFromHashString(@com.android.annotations.Nullable java.lang.String hash) { if (hash != null) { for (com.android.sdklib.IAndroidTarget target : <START_MOD>getTargets()<END_MOD>) { if (hash.equals(target.hashString())) { return target; } } } return null; }
@java.lang.Override public void mergeConference(java.lang.String callId<START_MOD>, android.telecom.Logging.Session.Info sessionInfo<END_MOD>) {<START_MOD> android.telecom.Log.startExternalSession(sessionInfo, android.telecom.ConnectionService.SESSION_MERGE_CONFERENCE); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = android.telecom.Log.createSubsession();<END_MOD> mHandler.obtainMessage(android.telecom.ConnectionService.MSG_MERGE_CONFERENCE, <START_MOD>args<END_MOD>).sendToTarget(); }<START_MOD> finally { android.telecom.Log.endSession(); } }<END_MOD>
public void mincore(long address, long byteCount, byte[] vector) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
<START_MOD>@java.lang.Override public void evaluate() throws java.lang.Throwable { for (vogar.testing.InterceptOutputStreams.Stream stream : streams) { java.io.PrintStream original = stream.get(); vogar.testing.InterceptOutputStreams.State state = new vogar.testing.InterceptOutputStreams.State(original); stream.set(new java.io.PrintStream(state.baos, true, "UTF-8")); streams2State.put(stream, state); } try { base.evaluate(); } finally { for (java.util.Map.Entry<vogar.testing.InterceptOutputStreams.Stream, vogar.testing.InterceptOutputStreams.State> entry : streams2State.entrySet()) { vogar.testing.InterceptOutputStreams.Stream stream = entry.getKey(); vogar.testing.InterceptOutputStreams.State state = entry.getValue(); stream.set(state.original); } streams2State.clear(); } }<END_MOD>
<START_MOD>@org.junit.Test public void testGetEuiccInfo1() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF20030102039000"); assertEquals("BF2003010203", mEuiccCard.getEuiccInfo1().toHex()); verifyStoreData(channel, "BF2000"); }<END_MOD>
<START_MOD>private void checkAcosFloat3() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testAcosFloat3(in, out); verifyResultsAcosFloat3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAcosFloat3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAcosFloat3(in, out); verifyResultsAcosFloat3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAcosFloat3: " + (e.toString()))); } }<END_MOD>
<START_MOD>@java.lang.Override public boolean isAppHiddenByKeyguard(android.view.IApplicationToken appToken) { if ((mKeyguardDelegate) == null) return false; return (mKeyguardDelegate.isShowing()) && (((mWinShowWhenLocked) == null) || ((mWinShowWhenLocked.getAppToken()) != appToken)); }<END_MOD>
<START_MOD>private int getRestrictBackgroundStatus() throws java.lang.Exception { final android.content.Intent intent = new android.content.Intent(com.android.cts.net.hostside.AbstractRestrictBackgroundNetworkTestCase.ACTION_GET_RESTRICT_BACKGROUND_STATUS); final java.lang.String resultData = sendOrderedBroadcast(intent); assertNotNull("timeout waiting for ordered broadcast result", resultData); return java.lang.Integer.parseInt(resultData); }<END_MOD>
<START_MOD>@org.junit.Test public void testRequestNetworkScan() throws java.lang.InterruptedException { if (!(mTelephonyManager.hasCarrierPrivileges())) { android.util.Log.d(android.telephony.cts.TelephonyManagerTest.TAG, "Skipping test that requires carrier privileges."); return; } int ranGsm = RadioNetworkConstants.RadioAccessNetworks.GERAN; int[] gsmBands = new int[]{ RadioNetworkConstants.GeranBands.BAND_T380, RadioNetworkConstants.GeranBands.BAND_T410 }; int[] gsmChannels = new int[]{ 1, 2, 3, 4 }; android.telephony.RadioAccessSpecifier gsm = new android.telephony.RadioAccessSpecifier(ranGsm, gsmBands, gsmChannels); int ranLte = RadioNetworkConstants.RadioAccessNetworks.EUTRAN; int[] lteBands = new int[]{ RadioNetworkConstants.EutranBands.BAND_10, RadioNetworkConstants.EutranBands.BAND_11 }; int[] lteChannels = new int[]{ 5, 6, 7, 8 }; android.telephony.RadioAccessSpecifier lte = new android.telephony.RadioAccessSpecifier(ranLte, lteBands, lteChannels); android.telephony.RadioAccessSpecifier[] radioAccessSpecifier = new android.telephony.RadioAccessSpecifier[]{ gsm, lte }; mNetworkScanRequest = new android.telephony.NetworkScanRequest(android.telephony.NetworkScanRequest.SCAN_TYPE_ONE_SHOT, radioAccessSpecifier, 5, 60, true, 10, null); mNetworkScanCallback = new android.telephony.cts.TelephonyManagerTest.NetworkScanCallbackImpl(); android.os.Message startNetworkScan = mHandler.obtainMessage(android.telephony.cts.TelephonyManagerTest.EVENT_NETWORK_SCAN_START); startNetworkScan.sendToTarget(); java.lang.Thread.sleep(android.telephony.cts.TelephonyManagerTest.MAX_INIT_WAIT_MS); android.util.Log.d(android.telephony.cts.TelephonyManagerTest.TAG, ("mNetworkScanStatus: " + (mNetworkScanStatus))); assertTrue("The final scan status is not ScanCompleted or ScanError", scanCompleteStatus()); }<END_MOD>
<START_MOD>@java.lang.Override public void enter() { if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } if ((mConnSocket) != null) { try { mConnSocket.close(); mConnSocket = null; } catch (java.io.IOException e) { android.util.Log.e(com.android.bluetooth.pbap.PbapStateMachine.TAG, ("Close Connection Socket error: " + (e.toString()))); } } mSessionStatusHandler.obtainMessage(BluetoothPbapService.MSG_STATE_MACHINE_DONE).sendToTarget(); }<END_MOD>
<START_MOD>private void checkErfFloat2() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testErfFloat2(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testErfFloat2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testErfFloat2(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testErfFloat2: " + (e.toString()))); } }<END_MOD>
private static boolean isShortCodeUSSD(java.lang.String dialString, com.android.internal.telephony.gsm.GSMPhone phone) { if (<START_MOD>(<END_MOD>dialString != null) <START_MOD>&&<END_MOD> ((dialString.length()) <= (com.android.internal.telephony.gsm.GsmMmiCode.MAX_LENGTH_SHORT_CODE))<START_MOD>) { if (phone.isInCall())<END_MOD> { return true; } if <START_MOD>(!(<END_MOD>((dialString.length()) <START_MOD>==<END_MOD> (com.android.internal.telephony.gsm.GsmMmiCode.MAX_LENGTH_SHORT_CODE)) <START_MOD>&&<END_MOD> ((dialString.charAt(<START_MOD>0<END_MOD>)) == <START_MOD>'1')<END_MOD>)) { return true; } } return false; }
<START_MOD>int blend() { float r = ((srcR) * (dstA)) + ((1 - (srcA)) * (dstR)); float g = ((srcG) * (dstA)) + ((1 - (srcA)) * (dstG)); float b = ((srcB) * (dstA)) + ((1 - (srcA)) * (dstB)); float a = ((srcA) * (dstA)) + ((1 - (srcA)) * (dstA)); return pack(a, r, g, b); }<END_MOD>
<START_MOD>public java.lang.String getGccToolchainVersion(java.lang.String abi) { if (toolchainName.equals("gcc")) { return toolchainVersion.isEmpty() ? getDefaultToolchainVersion(abi) : toolchainVersion; } else { return com.android.build.gradle.internal.NdkHandler.is64BitsAbi(abi) ? com.android.build.gradle.internal.NdkHandler.DEFAULT_LLVM_GCC64_VERSION : com.android.build.gradle.internal.NdkHandler.DEFAULT_LLVM_GCC32_VERSION; } }<END_MOD>
void setEmitDebug(boolean emitDebug) throws com.android.jack.api.v01.ConfigurationException;
<START_MOD>private void checkDSTFields(java.util.Calendar cal, java.lang.String description, int expectedZoneOffset, int expectedDstOffset) { assertEquals(("Incorrect ZONE_OFFSET: " + description), expectedZoneOffset, cal.get(java.util.Calendar.ZONE_OFFSET)); assertEquals(("Incorrect DST_OFFSET: " + description), expectedDstOffset, cal.get(java.util.Calendar.DST_OFFSET)); }<END_MOD>
<START_MOD>@java.lang.Override org.w3c.dom.Node getAdoptedNode(org.w3c.dom.Document document) { org.w3c.dom.Element element = document.createElement("generated-file"); element.setAttribute(SdkConstants.ATTR_PATH, mGeneratedFile.getAbsolutePath()); element.setAttribute(SdkConstants.ATTR_TYPE, getType().getName()); element.setAttribute(ResourceFile.ATTR_QUALIFIER, mQualifiers); return element; }<END_MOD>
public void fdatasync(java.io.FileDescriptor fd) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
public void mark(int reserve) { mark = cursor; }
public static int magicToApi(byte[] magic) { if ((magic.length) != 8) { return -1; } if ((((((magic[0]) != 'd') || ((magic[1]) != 'e')) || ((magic[2]) != 'x')) || ((magic[3]) != '\n')) || ((magic[7]) != ' ')) { return -1; } java.lang.String version = (("" + ((char) (magic[4]))) + ((char) (magic[5]))) + ((char) (magic[6])); if (version.equals(com.android.jack.dx.dex.DexFormat.VERSION_CURRENT)) { return com.android.jack.dx.dex.DexFormat.API_CURRENT; } else if (version.equals(com.android.jack.dx.dex.DexFormat.<START_MOD>VERSION_FOR_API_23)) { return com.android.jack.dx.dex.DexFormat.API_NO_DEFAULT_METHOD; } else if (version.equals(com.android.jack.dx.dex.DexFormat.<END_MOD>VERSION_FOR_API_13)) { return <START_MOD>com.android.jack.dx.dex.DexFormat.API_NO_EXTENDED_OPCODES<END_MOD>; } return -1; }
public void test_read$BII3() throws java.io.IOException { java.io.File resources = tests.support.resource.Support_Resources.createTempFolder(); tests.support.resource.Support_Resources.copyFile(resources, null, "Broken_manifest.jar"); java.io.FileInputStream fis = new java.io.FileInputStream(new java.io.File(resources, "Broken_manifest.jar")); <START_MOD>try (<END_MOD>java.util.zip.InflaterInputStream iis = new java.util.zip.InflaterInputStream(fis)<START_MOD>) {<END_MOD> byte[] outBuf = new byte[530]; try { iis.read(); fail( expected. } catch (java.io.IOException ee) { } }<START_MOD> }<END_MOD>
private void onLockedAllRecordsLoaded() { setSimLanguageFromEF();<START_MOD> if ((mLockedRecordsReqReason) == (LOCKED_RECORDS_REQ_REASON_PIN_LOCKED)) {<END_MOD> mLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); }<START_MOD> else { mNetworkLockedRecordsLoadedRegistrants.notifyRegistrants(new android.os.AsyncResult(null, null, null)); } }<END_MOD>
<START_MOD>private static java.lang.String getGenericLabel(com.android.sdklib.devices.Device d) { java.lang.String name = d.getName(); if (name.equals("3.7 FWVGA slider")) { name = "3.7in FWVGA slider"; } java.util.regex.Matcher matcher = com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.PATTERN.matcher(name); if (matcher.matches()) { java.lang.String size = matcher.group(1); java.lang.String n = matcher.group(2); int dot = size.indexOf('.'); if (dot == (-1)) { size = size + ".0"; dot = (size.length()) - 2; } for (int i = 0; i < (2 - dot); i++) { size = ' ' + size; } name = (size + "\" ") + n; } return name; }<END_MOD>
public static int SubNeg1(int arg1, int arg2) { <START_MOD>if (Main.doThrow) { throw new java.lang.Error(); } <END_MOD>return (-arg1) - arg2; }
<START_MOD>private static java.lang.String stripCategoryPrefix(java.lang.String name) { int index = name.indexOf(':'); if ((index >= 0) && (index < ((name.length()) - 1))) { return name.substring((index + 1)); } else { return name; } }<END_MOD>
<START_MOD>@org.junit.Test public void test001() { junit.framework.Assert.assertEquals(10, com.android.jack.java8.lambda.test042.Tests.getValue(10)); }<END_MOD>
<START_MOD>private <END_MOD>void setBtScoActiveDevice(android.bluetooth.BluetoothDevice btDevice) { if (com.android.server.audio.AudioService.DEBUG_DEVICES) { android.util.Log.d(com.android.server.audio.AudioService.TAG, (("setBtScoActiveDevice(" + btDevice) + ")")); } synchronized(mScoClients) { final android.bluetooth.BluetoothDevice previousActiveDevice = mBluetoothHeadsetDevice; if (!(java.util.Objects.equals(btDevice, previousActiveDevice))) { if (!(handleBtScoActiveDeviceChange(previousActiveDevice, false))) { android.util.Log.w(com.android.server.audio.AudioService.TAG, ( failed to remove previous device   + previousActiveDevice)); } if (!(handleBtScoActiveDeviceChange(btDevice, true))) { android.util.Log.e(com.android.server.audio.AudioService.TAG, ( failed to add new device   + btDevice)); btDevice = null; } mBluetoothHeadsetDevice = btDevice; if ((mBluetoothHeadsetDevice) == null) { resetBluetoothSco(); } } } }
public int getsockoptInt(java.io.FileDescriptor fd, int level, int option) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException { return os.getsockoptInt(fd, level, option); }
<START_MOD>public void onRttConnectionSuccess(android.telecom.Connection c) { }<END_MOD>
public void <START_MOD>testIsDecimalSeparatorAlwaysShown<END_MOD>() { java.text.DecimalFormat df = new java.text.DecimalFormat("###0.##"); assertTrue( unset value (!(df.isDecimalSeparatorAlwaysShown()))); df = new java.text.DecimalFormat("###0.00"); assertTrue( unset2 value (!(df.isDecimalSeparatorAlwaysShown()))); df = new java.text.DecimalFormat("###0."); assertTrue( set value df.isDecimalSeparatorAlwaysShown()); }
@java.lang.Override public void onChange(boolean unused) { synchronized(this) { if (isBluetoothPersistedStateOn()) { if (isAirplaneModeOn()) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_AIRPLANE); } else { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_ON_BLUETOOTH); } } int st = android.bluetooth.BluetoothAdapter.STATE_OFF; try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { st = mBluetooth.getState(); } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG,   to call getState e); return; } finally { mBluetoothLock.readLock().unlock(); } android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ( Mode change - current state:   + (android.bluetooth.BluetoothAdapter.nameForState(st)))); if (isAirplaneModeOn()) { clearBleApps(); if (st == (android.bluetooth.BluetoothAdapter.STATE_BLE_ON)) { try { mBluetoothLock.readLock().lock(); if ((mBluetooth) != null) { mBluetooth.onBrEdrDown(); mEnable = false; mEnableExternal = false; } } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.BluetoothManagerService.TAG,   to call onBrEdrDown e); } finally { mBluetoothLock.readLock().unlock(); } } else if (st == (android.bluetooth.BluetoothAdapter.STATE_ON)) { sendDisableMsg(com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE<START_MOD>, android.app.ActivityThread.currentPackageName()<END_MOD>); } } else if (mEnableExternal) { sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE<START_MOD>, android.app.ActivityThread.currentPackageName()); } } }<END_MOD>
public void <START_MOD>testFormatDouble_wideRange() { final<END_MOD> java.text.<START_MOD>DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(java.util.Locale.US); java.text.<END_MOD>DecimalFormat format = <START_MOD>new <END_MOD>java.text.DecimalFormat<START_MOD>("#0.#", dfs); format.setMaximumIntegerDigits(400<END_MOD>); format.setMaximumFractionDigits(400); for (int i = 0; i < 309; i++) { java.lang.String tval = "1"; for (int j = 0; j < i; j++) <START_MOD>{ <END_MOD>tval += "0";<START_MOD> }<END_MOD> double d = java.lang.Double.parseDouble(tval); java.lang.String result = format.format(d); assertEquals(((((i +   e: + tval) +   r: + result), tval, result); } for (int i = 0; i < 322; i++) { java.lang.String tval = "0."; for (int j = 0; j < i; j++) <START_MOD>{ <END_MOD>tval += "0";<START_MOD> }<END_MOD> tval += "1"; double d = java.lang.Double.parseDouble(tval); java.lang.String result = format.format(d); assertEquals(((((i +   e: + tval) +   r: + result), tval, result); } }
public boolean p2pReinvoke(int netId, java.lang.String deviceAddress) { if ((android.text.TextUtils.isEmpty(deviceAddress)) || (netId < 0)) return false; <START_MOD>if ((com.android.server.wifi.WifiNative.HIDL_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.reinvoke(netId, deviceAddress); } else { <END_MOD>return doBooleanCommand(((( persistent= + netId) +   peer= + deviceAddress)); }<START_MOD> }<END_MOD>
public void testBrokenSet3() throws java.lang.Exception { java.io.File root = com.android.testutils.TestUtils.getRoot("resources", "brokenSet3"); com.android.ide.common.res2.ResourceSet set = new com.android.ide.common.res2.ResourceSet("main"); set.addSource(root); boolean gotException = false; com.android.ide.common.res2.RecordingLogger logger = new com.android.ide.common.res2.RecordingLogger(); try { set.loadFromFiles(logger); } catch (<START_MOD>com.android.ide.common.res2.MergingException e) { gotException = true; assertEquals(((new <END_MOD>java.io.<START_MOD>File(root, (("values" + (java.io.File.separator)) + "values.xml")).getAbsolutePath()) +   Found item Attr/d_common_attr more than one time<END_MOD> e<START_MOD>.getMessage())<END_MOD>; } assertTrue( processing should have failed, but didn gotException); assertFalse(logger.getErrorMsgs().isEmpty()); }
public void run() { if ((threadIndex) == 0) { for (int i = 0; i < (Main.totalOperations); ++i) { if ((i % 50) == 0) { Main.deoptimizeAll(); } if ((i % 50) == 25) { Main.undeoptimizeAll(); } } Main.done = true; } else { while (!(Main.done)) { <START_MOD>java.lang.String str = <END_MOD>$noinline$run0(); <START_MOD>if (!(str.equals("abc"))) { java.lang.System.out.println((   + str)); java.lang.System.exit(0); } } } }<END_MOD>
<START_MOD>@javax.annotation.Nonnull public com.android.jack.ir.ast.JMethod getMethod(@javax.annotation.Nonnull java.lang.String name, @javax.annotation.Nonnull com.android.jack.ir.ast.JMethodId methodId) throws com.android.jack.lookup.JMethodLookupException { return getMethod(name, methodId.getType(), methodId.getMethodIdWide().getParamTypes()); }<END_MOD>
<START_MOD>@java.lang.Override public void verify(java.security.PublicKey key, java.lang.String sigProvider) throws java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, java.security.SignatureException, java.security.cert.CertificateException { }<END_MOD>
@java.lang.Override public android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, android.os.IBinder binder) { if (!(hasWifiNetworkListenPermission(networkCapabilities))) { enforceAccessPermission(); } <START_MOD>networkCapabilities.setSingleUid(android.os.Binder.getCallingUid()); <END_MOD>android.net.NetworkCapabilities nc = new android.net.NetworkCapabilities(networkCapabilities); if (!(android.net.ConnectivityManager.checkChangePermission(mContext))) { nc.addCapability(com.android.server.NET_CAPABILITY_FOREGROUND); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(nc, TYPE_NONE, nextNetworkRequestId(), NetworkRequest.Type.LISTEN); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.VDBG) com.android.server.ConnectivityService.log(( for   + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_LISTENER, nri)); return networkRequest; }
<START_MOD>@java.lang.Override public void parse(com.android.assetstudiolib.vectordrawable.vg.VDTree tree, org.xml.sax.Attributes attributes) { com.android.assetstudiolib.vectordrawable.vg.VDGroup g = parseGroupAttributes(attributes); tree.add(g); }<END_MOD>
<START_MOD>boolean isCallingFromSystemUid() { return (android.os.UserHandle.getAppId(android.os.Binder.getCallingUid())) == (SYSTEM_UID); }<END_MOD>
<START_MOD>void handleCallBarringResult(boolean status) { isActivated = status; if (com.android.phone.CallBarringEditPreference.DBG) android.util.Log.d(com.android.phone.CallBarringEditPreference.LOG_TAG, ("handleGetCBResponse done, isActivated=" + status)); }<END_MOD>
@java.lang.Override public void getDataCallList(<START_MOD>com.<END_MOD>android.<START_MOD>internal.telephony.sip<END_MOD>.Message response) { }
<START_MOD>boolean isPseudolocalizeEnabled();<END_MOD>
private void syncCheckboxView(android.view.View view) {<START_MOD> if (view instanceof android.widget.CheckBox) { ((android.widget.CheckBox) (view)).setOnCheckedChangeListener(null); }<END_MOD> if (view instanceof android.widget.Checkable) { ((android.widget.Checkable) (view)).setChecked(mChecked); } <START_MOD>if (view instanceof android.widget.CheckBox) { ((android.widget.CheckBox) (view)).setOnCheckedChangeListener(mListener); <END_MOD>}<START_MOD> }<END_MOD>
<START_MOD>void onRemoteRttUpgradeRequest() { for (android.telecom.RemoteConnection.CallbackRecord record : mCallbackRecords) { final android.telecom.RemoteConnection connection = this; final android.telecom.RemoteConnection.Callback callback = record.getCallback(); record.getHandler().post(() -> callback.onRemoteRttUpgradeRequest(connection)); } }<END_MOD>
<START_MOD>void getIccSlotStatus(android.os.Message result);<END_MOD>
@java.lang.Override public void handle(java.lang.String target, javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, int dispatch) throws java.io.IOException { if (!(com.google.gct.login.CancellableServerReceiver.CALLBACK_PATH.equals(target))) { return; } <START_MOD>((com.google.api.client.repackaged.org.mortbay.jetty.Request) (request)).setHandled(true); lock.lock(); try { error = request.getParameter("error"); code = request.getParameter("code"); gotAuthorizationResponse.signal(); } finally { lock.unlock(); } <END_MOD>writeLandingHtml(response<START_MOD>, ((error) == null)<END_MOD>); response.flushBuffer(); <START_MOD>}<END_MOD>
@java.lang.Override public final int startActivityWithConfig(android.app.IApplicationThread caller, java.lang.String callingPackage, android.content.Intent intent, java.lang.String resolvedType, android.os.IBinder resultTo, java.lang.String resultWho, int requestCode, int <START_MOD>struntimeFlags<END_MOD>, android.content.res.Configuration config, android.os.Bundle bOptions, int userId) { enforceNotIsolatedCaller("startActivityWithConfig"); userId = mUserController.handleIncomingUser(android.os.Binder.getCallingPid(), android.os.Binder.getCallingUid(), userId, false, com.android.server.am.ActivityManagerService.ALLOW_FULL_ONLY, "startActivityWithConfig", null); int ret = mActivityStarter.startActivityMayWait(caller, (-1), callingPackage, intent, resolvedType, null, null, resultTo, resultWho, requestCode, <START_MOD>struntimeFlags<END_MOD>, null, null, config, bOptions, false, userId, null, null, "startActivityWithConfig"); return ret; }
public void test_emptyFilename() throws java.lang.Exception { java.io.File f = new java.io.File(""); assertFalse(f.canExecute()); assertFalse(f.canRead()); assertFalse(f.canWrite()); try { f.createNewFile(); fail( IOException } catch (java.io.IOException expected) { } assertFalse(f.delete()); f.deleteOnExit(); assertFalse(f.exists()); assertEquals("", f.getName()); assertEquals(null, f.getParent()); assertEquals(null, f.getParentFile()); assertEquals("", f.getPath()); assertFalse(f.isAbsolute()); assertFalse(f.isDirectory()); assertFalse(f.isFile()); assertFalse(f.isHidden()); assertEquals(0, f.lastModified()); assertEquals(0, f.length()); assertEquals(null, f.list()); assertEquals(null, f.list(null)); assertEquals(null, f.listFiles()); assertEquals(null, f.listFiles(((<START_MOD>libcore.<END_MOD>java.io.FileFilter) (null)))); assertEquals(null, f.listFiles(((<START_MOD>libcore.<END_MOD>java.io.FilenameFilter) (null)))); assertFalse(f.mkdir()); assertFalse(f.mkdirs()); assertFalse(f.renameTo(f)); assertFalse(f.setLastModified(123)); assertFalse(f.setExecutable(true)); assertFalse(f.setReadOnly()); assertFalse(f.setReadable(true)); assertFalse(f.setWritable(true)); java.lang.String cwd = java.lang.System.getProperty("user.dir"); assertEquals(new java.io.File(cwd), f.getAbsoluteFile()); assertEquals(cwd, f.getAbsolutePath()); }
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); if (mHasFeature) { <START_MOD>try { <END_MOD>installAppAsUser(com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_APK, mPrimaryUserId); if (!(setDeviceOwner((((com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_PKG) + "/") + (com.android.cts.devicepolicy.DeviceOwnerTest.ADMIN_RECEIVER_TEST_CLASS)), mPrimaryUserId, false))) { removeAdmin((((com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_PKG) + "/") + (com.android.cts.devicepolicy.DeviceOwnerTest.ADMIN_RECEIVER_TEST_CLASS)), mPrimaryUserId); fail( to set device owner } } <START_MOD>catch (java.lang.Throwable throwable) { getDevice().uninstallPackage(com.android.cts.devicepolicy.DeviceOwnerTest.DEVICE_OWNER_PKG); throw throwable; } } <END_MOD>mHasEphemeralUserFeature = ((mHasFeature) && (canCreateAdditionalUsers(1))) && (hasUserSplit()); mHasDisabledEphemeralUserFeature = ((mHasFeature) && (canCreateAdditionalUsers(1))) && (!(hasUserSplit())); mHasCreateAndManageUserFeature = (mHasFeature) && (canCreateAdditionalUsers(1)); }
@org.junit.Test public void int_to_char() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(INT_TO_CHAR).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), <START_MOD>"jack/jack-tests/src/com/android/jack/DxTestCase.java"<END_MOD>)).compileAndRunTest(); }
@android.test.suitebuilder.annotation.LargeTest public void testReplaceSdcard() { sampleReplaceFromRawResource(((<START_MOD>android.content.pm.<END_MOD>PackageManager.INSTALL_REPLACE_EXISTING) | (<START_MOD>android.content.pm.<END_MOD>PackageManager.INSTALL_EXTERNAL))); }
public void setFloat(java.lang.Object object, float value) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException<START_MOD> { checkSetFinal()<END_MOD>;<START_MOD> checkAccess(object, getDeclaringClass(), getModifiers()); setFloatNative(object, value); }<END_MOD>
public void writeTo(java.io.OutputStream out, java.io.Writer humanOut, boolean verbose) throws java.io.IOException { boolean annotate = humanOut != null; com.android.dx.util.ByteArrayAnnotatedOutput result = toDex0(annotate, verbose<START_MOD>, null<END_MOD>); if (out != null) { out.write(result.getArray()); } if (annotate) { result.writeAnnotationsTo(humanOut); } }
@java.lang.Override public void removeItem(<START_MOD>@com.android.annotations.NonNull <END_MOD>com.android.ide.common.res2.AssetItem removedItem, com.android.ide.common.res2.AssetItem replacedBy) throws com.android.ide.common.res2.ConsumerException { if (replacedBy == null) { java.io.File removedFile = new java.io.File(getRootFolder(), removedItem.getName()); removedFile.delete(); } }
@android.test.suitebuilder.annotation.MediumTest public void testPn544Sane() throws java.lang.Exception { java.io.File f = new java.io.File("/dev/pn544"); assertFalse(f.canRead()); assertFalse(f.canWrite()); assertFalse(f.canExecute()); if (f.exists()) <START_MOD>{<END_MOD> <START_MOD>assertTrue<END_MOD>(android.permission.cts.<START_MOD>FileSystemPermissionTest<END_MOD>.<START_MOD>isFileOwner<END_MOD>(f, <START_MOD>"nfc"<END_MOD>))<START_MOD>;<END_MOD> <START_MOD>assertTrue<END_MOD>(android.permission.cts.<START_MOD>FileSystemPermissionTest<END_MOD>.<START_MOD>isFileGroup<END_MOD>(<START_MOD>f<END_MOD>, <START_MOD>"nfc"<END_MOD>)); } }
<START_MOD>public static java.lang.String format(com.ibm.icu.util.ULocale icuLocale, com.ibm.icu.util.Calendar time, int flags, boolean capitalize) { java.lang.String skeleton = libcore.icu.FormatUtils.toSkeleton(time, flags); java.lang.String key = (((skeleton + "\t") + icuLocale) + "\t") + (time.getTimeZone()); com.ibm.icu.text.DisplayContext displayContext = libcore.icu.FormatUtils.getDisplayContext(capitalize); synchronized(libcore.icu.DateTimeFormat.CACHED_FORMATTERS) { com.ibm.icu.text.DateFormat formatter = libcore.icu.DateTimeFormat.CACHED_FORMATTERS.get(key); if (formatter == null) { com.ibm.icu.text.DateTimePatternGenerator generator = com.ibm.icu.text.DateTimePatternGenerator.getInstance(icuLocale); formatter = new com.ibm.icu.text.SimpleDateFormat(generator.getBestPattern(skeleton), icuLocale); libcore.icu.DateTimeFormat.CACHED_FORMATTERS.put(key, formatter); } formatter.setContext(displayContext); return formatter.format(time); } }<END_MOD>
public void testVFE7() { try { <START_MOD>dot<END_MOD>.<START_MOD>junit<END_MOD>.<START_MOD>opcodes<END_MOD>.<START_MOD>iget_byte.d.T_iget_byte_12 t = new dot.junit.opcodes.iget_byte.d.T_iget_byte_12<END_MOD>(<START_MOD>); t.run(<END_MOD>); fail( <START_MOD>an<END_MOD> <START_MOD>IllegalAccessError<END_MOD> exception } catch (java.lang.<START_MOD>IllegalAccessError<END_MOD> <START_MOD>e<END_MOD>) { } }
@java.lang.Override public boolean setHwPnoList(com.android.server.wifi.WifiNative.PnoSettings settings, com.android.server.wifi.WifiNative.PnoEventHandler eventHandler) { synchronized(mSettingsLock) { if ((mPnoSettings) != null) { android.util.Log.w(com.android.server.wifi.scanner.<START_MOD>WificondWifiScannerImpl<END_MOD>.TAG,   running a PNO scan return false; } mPnoEventHandler = eventHandler; mPnoSettings = settings; processPendingScans(); return true; } }
<START_MOD>public void testAesGcm128Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }<END_MOD>
<START_MOD>public void testBasicDiamond() { com.android.tools.perflib.heap.Heap heap = new com.android.tools.perflib.heap.analysis.SyntheticHeap(4).addEdge(1, 2).addEdge(1, 3).addEdge(2, 4).addEdge(3, 4).addRoot(1).getHeap(); assertEquals(10, heap.getInstance(1).getCompositeSize()); assertEquals(6, heap.getInstance(2).getCompositeSize()); assertEquals(7, heap.getInstance(3).getCompositeSize()); assertEquals(4, heap.getInstance(4).getCompositeSize()); }<END_MOD>
private void monitorExpiredPrinters() { if (((mExpirePrinters) == null) && (!(mPrinters.isEmpty()))) { mExpirePrinters = <START_MOD>mPrintService.delay(com.android.bips.LocalDiscoverySession.PRINTER_EXPIRATION_MILLIS, () -> { mExpirePrinters = null; boolean allFound = true; List<android.print.PrinterId> idsToRemove = <END_MOD>new com.android.bips.<START_MOD>ArrayList<>(); for (com.android.bips.LocalPrinter localPrinter : mPrinters.values()) { if (localPrinter.isExpired()) { if (com.android.bips.<END_MOD>LocalDiscoverySession.<START_MOD>DEBUG) android.util.Log.d(com.android.bips.LocalDiscoverySession.TAG<END_MOD>, <START_MOD>(   + localPrinter)); idsToRemove.add(localPrinter.getPrinterId()); } if (!(localPrinter.isFound())) allFound = false; } idsToRemove.forEach(mPrinters::remove); removePrinters(idsToRemove); if (!allFound) { monitorExpiredPrinters(); } }); } }<END_MOD>
private static void printClassInstanceFields(com.android.ahat.Doc doc, com.android.ahat.Query query, com.android.ahat.<START_MOD>heapdump.<END_MOD>AhatSnapshot snapshot, com.android.<START_MOD>ahat.heapdump.AhatClassInstance<END_MOD> inst) { doc.section("Fields"); doc.table(new com.android.ahat.Column("Type"), new com.android.ahat.Column("Name"), new com.android.ahat.Column("Value")); com.android.ahat.SubsetSelector<com.android.<START_MOD>ahat.heapdump<END_MOD>.FieldValue> selector = new com.android.ahat.SubsetSelector(query, com.android.ahat.ObjectHandler.INSTANCE_FIELDS_ID, inst.getValues()); for (com.android.<START_MOD>ahat.heapdump<END_MOD>.FieldValue field : selector.selected()) { doc.row(com.android.ahat.DocString.text(field.getType()), com.android.ahat.DocString.text(field.getName()), com.android.ahat.<START_MOD>Summarizer.summarize(field.getValue())); } doc.end(); selector<END_MOD>.render(<START_MOD>doc<END_MOD>); }
boolean connectAudio() { <START_MOD>synchronized<END_MOD>(<START_MOD>mStateMachines) { final <END_MOD>android.bluetooth.<START_MOD>BluetoothDevice<END_MOD> <START_MOD>device<END_MOD> <START_MOD>=<END_MOD> <START_MOD>getLastConnectedDevice();<END_MOD> if (<START_MOD>device<END_MOD> <START_MOD>==<END_MOD> <START_MOD>null<END_MOD>) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG,   <START_MOD>no<END_MOD> <START_MOD>device is<END_MOD> connected return false; } return <START_MOD>connectAudio(device)<END_MOD>; } }
<START_MOD>public static void setIsExtendedLoggingEnabled(boolean isExtendedLoggingEnabled) { if ((android.telecom.Log.mIsUserExtendedLoggingEnabled) == isExtendedLoggingEnabled) { return; } if ((android.telecom.Log.sEvents) != null) { android.telecom.Log.sEvents.changeEventCacheSize((isExtendedLoggingEnabled ? android.telecom.Log.EVENTS_TO_CACHE_DEBUG : android.telecom.Log.EVENTS_TO_CACHE)); } android.telecom.Log.mIsUserExtendedLoggingEnabled = isExtendedLoggingEnabled; if (android.telecom.Log.mIsUserExtendedLoggingEnabled) { android.telecom.Log.mUserExtendedLoggingStopTime = (java.lang.System.currentTimeMillis()) + (android.telecom.Log.EXTENDED_LOGGING_DURATION_MILLIS); } else { android.telecom.Log.mUserExtendedLoggingStopTime = 0; } }<END_MOD>
<START_MOD>void trackSavedCandidate(@android.annotation.Nullable java.lang.Integer score, android.net.wifi.WifiConfiguration config, android.net.wifi.ScanResult scanResult) { if ((score != null) && ((score > (mHighScore)) || (((mBestCandidateType) == (com.android.server.wifi.ExternalScoreEvaluator.ExternalScoreTracker.BestCandidateType.UNTRUSTED_NETWORK)) && (score == (mHighScore))))) { mHighScore = score; mSavedConfig = config; mScanResultCandidate = scanResult; mBestCandidateType = com.android.server.wifi.ExternalScoreEvaluator.ExternalScoreTracker.BestCandidateType.SAVED_NETWORK; localLog(((com.android.server.wifi.WifiNetworkSelector.toScanId(scanResult)) + " becomes the new externally scored saved network candidate.")); } }<END_MOD>
<START_MOD>@org.junit.Test public void generateVerityTreeRootHashFromDummyDataSource() throws java.lang.Exception { byte[] sampleEoCDFromDisk = new byte[]{ 80, 75, 5, 6, 0, 0, 0, 0, 6, 0, 6, 0, 121, 1, 0, 0, 48, 22, 0, 0, 0, 0 }; com.android.apksig.internal.util.VerityTreeBuilder builder = new com.android.apksig.internal.util.VerityTreeBuilder(null); byte[] rootHash = builder.generateVerityTreeRootHash(com.android.apksig.util.DataSources.asDataSource(java.nio.ByteBuffer.allocate(4096)), makeStringDataSource("this is central directory (fake data)"), com.android.apksig.util.DataSources.asDataSource(java.nio.ByteBuffer.wrap(sampleEoCDFromDisk))); junit.framework.TestCase.assertEquals("db4176e0d6c3660a7072d9f7ae0053ba16a4a29df348627c79e1d786cf6c2931", com.android.apksig.internal.util.HexEncoding.encode(rootHash)); }<END_MOD>
@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { super.widgetSelected(e); if (<START_MOD>mSystemButton<END_MOD>.getSelection()) { setListElements(mSystemResources.getResources(mResourceType)); <START_MOD>mNewButton.setEnabled(false); <END_MOD>} }
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) {<START_MOD> java.lang.String action = intent.getAction(); if (action.equals(MediaPlaybackService.PLAYBACK_COMPLETE)) { android.widget.Toast mt = android.widget.Toast.makeText(this,   to play the requested stream.. 2000); mt.show(); finish(); return; }<END_MOD> try { MusicUtils.sService.play(); intent = new android.content.Intent("com.android.music.PLAYBACK_VIEWER"); intent.putExtra("oneshot", true); startActivity(intent); } catch (android.os.RemoteException ex) { } finish(); }
@org.junit.Test public void testUpdateLastConnectUid() throws java.lang.Exception { android.net.wifi.WifiConfiguration openNetwork = com.android.server.wifi.WifiConfigurationTestUtil.createOpenNetwork(); com.android.server.wifi.NetworkUpdateResult result = verifyAddNetworkToWifiConfigManager(openNetwork); assertTrue(mWifiConfigManager.checkAndUpdateLastConnectUid(result.getNetworkId(), com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)); android.net.wifi.WifiConfiguration retrievedNetwork = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()); assertEquals(com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID, retrievedNetwork.lastConnectUid); doAnswer(new android.app.test.MockAnswerUtil.AnswerWithArguments() { public int answer(java.lang.String permName, int uid) throws java.lang.Exception { if (uid == (com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)) { return android.content.pm.PackageManager.PERMISSION_GRANTED; } return android.content.pm.PackageManager.PERMISSION_DENIED; } }).when(mFrameworkFacade).checkUidPermission(anyString(), anyInt()); <START_MOD>when(mWifiPermissionsUtil.checkConfigOverridePermission(anyInt())).thenReturn(false); <END_MOD>assertFalse(mWifiConfigManager.checkAndUpdateLastConnectUid(result.getNetworkId(), com.android.server.wifi.WifiConfigManagerTest.TEST_UPDATE_UID)); retrievedNetwork = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()); assertEquals(com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID, retrievedNetwork.lastConnectUid); }
@java.lang.Override public boolean accept(@javax.annotation.Nonnull com.android.jack.plugin<START_MOD>.v01<END_MOD>.Plugin plugin) { try { boolean accepted = plugin.getVersion().getSubReleaseKind().isMoreStableThan(SubReleaseKind.CANDIDATE); if (accepted) { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO,   plugin ''{0}'', accepted version {1} because stable new java.lang.Object[]{ plugin.getName(), plugin.getVersion().getVersion() }); } else { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO,   plugin ''{0}'', rejected version {1} because not stable new java.lang.Object[]{ plugin.getName(), plugin.getVersion().getVersion() }); } return accepted; } catch (com.android.sched.util.UncomparableSubReleaseKind e) { com.android.jack.plugin.StableOnly.logger.log(java.util.logging.Level.INFO,   plugin ''{0}'', rejected version {1} because not stable new java.lang.Object[]{ plugin.getName(), plugin.getVersion().getVersion() }); return false; } }
<START_MOD>public void testStoreNoOutputData() throws java.io.IOException { com.android.builder.internal.incremental.DependencyData data = new com.android.builder.internal.incremental.DependencyData(); data.setMainFile("/1/main/file"); data.addSecondaryFile("/1/secondary/file"); com.android.builder.internal.incremental.DependencyData data2 = new com.android.builder.internal.incremental.DependencyData(); data2.setMainFile("/2/main/file"); data2.addSecondaryFile("/2/secondary/file"); data2.addOutputFile("/2/output/file"); com.android.builder.internal.incremental.DependencyDataStore store = new com.android.builder.internal.incremental.DependencyDataStore(); store.addData(data); store.addData(data2); java.io.File file = java.io.File.createTempFile("DependencyDataStoreTest", ""); file.deleteOnExit(); store.saveTo(file); store = new com.android.builder.internal.incremental.DependencyDataStore(); store.loadFrom(file); java.util.List<com.android.builder.internal.incremental.DependencyData> newDataList = store.getData(); assertNotNull(newDataList); assertEquals(2, newDataList.size()); com.android.builder.internal.incremental.DependencyData firstData = newDataList.get(0); assertNotNull(firstData); assertEquals(data.getMainFile(), firstData.getMainFile()); assertEquals(data.getSecondaryFiles(), firstData.getSecondaryFiles()); assertEquals(0, firstData.getOutputFiles().size()); com.android.builder.internal.incremental.DependencyData secondData = newDataList.get(1); assertNotNull(secondData); assertEquals(data2.getMainFile(), secondData.getMainFile()); assertEquals(data2.getSecondaryFiles(), secondData.getSecondaryFiles()); assertEquals(data2.getOutputFiles(), secondData.getOutputFiles()); }<END_MOD>
@org.junit.Test @java.lang.Runtime public void test106() throws java.lang.Exception { java.lang.String test = "com.android.jack.optimizations.valuepropagation.test106"; java.lang.String aType = "Lcom/android/jack/optimizations/valuepropagation/test106/jack/A;"; java.lang.String bType = "Lcom/android/jack/optimizations/valuepropagation/test106/jack/B;"; java.lang.String cType = "Lcom/android/jack/optimizations/valuepropagation/test106/jack/C;"; java.lang.String dType = "Lcom/android/jack/optimizations/valuepropagation/test106/jack/D;"; java.lang.String init1 = ("<init>(" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + ")V"; java.lang.String init2 = (("<init>(" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + ")V"; java.lang.String foo = ("foo(" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + ")V"; compileAndValidate(defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(init1, dalvik(test, "A.init1.dalvik")).insert(init2, dalvik(test, "A.init2.dalvik")).insert(foo, dalvik(test, "A.foo.dalvik"))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "B.foo.dalvik"))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "C.foo.dalvik"))).insert(dType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "D.foo.dalvik")))<START_MOD>, test<END_MOD>); }
public void testAssistantStackFinishToPreviousApp() throws java.lang.Exception { <START_MOD>launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_DISPLAY); enableAssistant(); <END_MOD>launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_FINISH_SELF, "true"); disableAssistant(); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.waitForActivityState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerState.STATE_RESUMED); mAmWmState.assertFocusedActivity( should be resumed android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); mAmWmState.assertFrontStack( stack should be on top. android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertFocusedStack( stack should be focused. android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); }
<START_MOD>static com.android.multidex.ClassPathElement getClassPathElement(java.io.File file) throws java.io.IOException, java.util.zip.ZipException { if (file.isDirectory()) { return new com.android.multidex.FolderPathElement(file); } else if (file.isFile()) { return new com.android.multidex.ArchivePathElement(new java.util.zip.ZipFile(file)); } else if (file.exists()) { throw new java.io.IOException(((file.getAbsolutePath()) + " is not a directory neither a zip file")); } else { throw new java.io.FileNotFoundException(file.getAbsolutePath()); } }<END_MOD>
<START_MOD>public boolean reject(java.lang.String peerAddress) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure())) return false; byte[] macAddress = stringToAddress(peerAddress); if (macAddress == null) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, "Cannot parse rejected peer's mac address."); return false; } com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult((("reject(" + peerAddress) + ")")); try { result.setResult(mISupplicantP2pIface.reject(macAddress)); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ("ISupplicantP2pIface exception: " + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }<END_MOD>
<START_MOD>@javax.annotation.Nonnull <END_MOD>protected static java.lang.String cstString(<START_MOD>@javax.annotation.Nonnull <END_MOD>com.android.jack.dx.dex.code.DalvInsn insn) { com.android.jack.dx.dex.code.CstInsn ci = ((com.android.jack.dx.dex.code.CstInsn) (insn)); com.android.jack.dx.rop.cst.Constant cst = ci.getConstant(); return cst instanceof com.android.jack.dx.rop.cst.CstString ? ((com.android.jack.dx.rop.cst.CstString) (cst)).toQuoted() : cst.toHuman(); }
<START_MOD>@java.lang.Override public void onAvailable(android.net.Network network, android.net.NetworkCapabilities networkCapabilities, android.net.LinkProperties linkProperties) { setLastCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, network, networkCapabilities); super.onAvailable(network, networkCapabilities, linkProperties); }<END_MOD>
<START_MOD>private void checkFastDistanceFloat4Float4() { android.renderscript.Allocation inLhs = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inLhs, 35, 0.0F, 1.0F); android.renderscript.Allocation inRhs = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inRhs, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInRhs(inRhs); script.forEach_testFastDistanceFloat4Float4(inLhs, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFastDistanceFloat4Float4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInRhs(inRhs); scriptRelaxed.forEach_testFastDistanceFloat4Float4(inLhs, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFastDistanceFloat4Float4: " + (e.toString()))); } }<END_MOD>
public void test_setTrafficClass() throws java.lang.Exception { try (java.net.Socket s = new java.net.Socket()) { for (int i = 0; i <= 255; ++i) { s.setTrafficClass(i); <START_MOD>int actual = s.getTrafficClass(); assertTrue(((i == actual) || (<END_MOD>((i & (~(libcore.java.net.SocketTest.INET_ECN_MASK))) <START_MOD>== (actual & (~(libcore<END_MOD>.<START_MOD>java.net.SocketTest.INET_ECN_MASK)))) && <END_MOD>(<START_MOD>(actual & (libcore.java.net.SocketTest.INET_ECN_MASK)) == 0))<END_MOD>)); } } }
<START_MOD>@java.lang.Override public void exit() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, ((("Exit Disconnected(" + (mDevice)) + "): ") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; }<END_MOD>
@org.junit.Test public void testDefaultProvisioningConfiguration() throws java.lang.Exception { final java.lang.String iface = "test_wlan0"; final android.net.ip.IpManager ipm = new android.net.ip.IpManager(mContext, iface, mCb, mNMService); android.net.ip.IpManager.ProvisioningConfiguration config = new android.net.ip.IpManager.ProvisioningConfiguration.Builder().withoutIPv4().withoutIpReachabilityMonitor().build(); ipm.startProvisioning(config); verify(mCb, times(1)).setNeighborDiscoveryOffload(true); verify(<START_MOD>mNMService, timeout(100).times(1)).disableIpv6(iface); verify(mNMService, timeout(100).times(1)).clearInterfaceAddresses(iface); verify(<END_MOD>mCb, timeout(100).times(1)).setFallbackMulticastFilter(false); verify(mCb, never()).onProvisioningFailure(any()); ipm.stop(); verify(mNMService, timeout(100).times(1)).disableIpv6(iface); verify(mNMService, timeout(100).times(1)).clearInterfaceAddresses(iface); }
@android.test.suitebuilder.annotation.LargeTest public void testFlagFExistingE() { int iFlags = <START_MOD>android.content.pm.<END_MOD>PackageManager.INSTALL_EXTERNAL; int rFlags = (<START_MOD>android.content.pm.<END_MOD>PackageManager.INSTALL_FORWARD_LOCK) | (<START_MOD>android.content.pm.<END_MOD>PackageManager.INSTALL_REPLACE_EXISTING); installFromRawResource("install.apk", R.raw.install, iFlags, false, false, (-1), (-1)); installFromRawResource("install.apk", R.raw.install, rFlags, true, false, (-1), (-1)); }
<START_MOD>private void checkStepFloatFloat() { android.renderscript.Allocation inEdge = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inEdge, 35, 0.0F, 1.0F); android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInV(inV); script.forEach_testStepFloatFloat(inEdge, out); verifyResultsStepFloatFloat(inEdge, inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testStepFloatFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInV(inV); scriptRelaxed.forEach_testStepFloatFloat(inEdge, out); verifyResultsStepFloatFloat(inEdge, inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testStepFloatFloat: " + (e.toString()))); } }<END_MOD>
@java.lang.Override public void copy(@javax.annotation.Nonnull com.android.sched.vfs.VFile srcFile, @javax.annotation.Nonnull com.android.sched.vfs.DeflateFS.DeflateVFile dstFile) throws com.android.sched.util.file.<START_MOD>CannotCloseException, com.android.sched.util.file.<END_MOD>CannotCloseInputException, com.android.sched.util.file.CannotReadException, com.android.sched.util.file.CannotWriteException, com.android.sched.util.file.WrongPermissionException { if (srcFile instanceof com.android.sched.vfs.DeflateFS.DeflateVFile) { vfs.copy(((com.android.sched.vfs.DeflateFS.DeflateVFile) (srcFile)).getWrappedFile(), dstFile.getWrappedFile()); } else { super.copy(srcFile, dstFile); } }
@java.lang.Override public void setDataProfile(android.telephony.data.DataProfile[] dps, boolean isRoaming, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_SET_DATA_PROFILE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog(((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) +   with data profiles :   for (android.telephony.data.DataProfile profile : dps) { riljLog(profile.toString()); } } java.util.ArrayList<android.hardware.radio.V1_0.DataProfileInfo> dpis = new java.util.ArrayList<>(); for (android.telephony.data.DataProfile dp : dps) { dpis.add(com.android.internal.telephony.RIL.convertToHalDataProfile(dp)); } try { radioProxy.setDataProfile(rr.mSerial, dpis, isRoaming); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setDataProfile", e); } } }
<START_MOD>private void generateCertificates_X509_DER(java.security.cert.CertificateFactory f) throws java.lang.Exception { final java.io.InputStream ris = tests.support.resource.Support_Resources.getStream(libcore.java.security.cert.X509CertificateTest.CERTS_X509_DER); java.util.Collection<? extends java.security.cert.Certificate> certs = f.generateCertificates(ris); assertNotNull(certs); assertEquals(2, certs.size()); }<END_MOD>
@java.lang.Override @java.lang.SuppressWarnings("unchecked") @javax.annotation.CheckForNull public <T extends com.android.sched.marker.Marker> T removeMarker(@javax.annotation.Nonnull java.lang.Class<T> cls) { <START_MOD>T result; <END_MOD>synchronized(lock) { if ((markers) == null) { return null; } <START_MOD>result<END_MOD> <START_MOD>=<END_MOD> ((T) (markers.remove(cls))); <START_MOD>if (markers.isEmpty()) { markers = null; <END_MOD>}<START_MOD> } return result; }<END_MOD>
<START_MOD>@java.lang.Override public int checkCallingOrSelfPermission(java.lang.String permission) { if (android.text.TextUtils.equals(permission, "android.permission.WRITE_APN_SETTINGS")) { android.util.Log.d(com.android.providers.telephony.TelephonyProviderTest.TAG, ((("checkCallingOrSelfPermission: permission=" + permission) + ", returning ") + (android.content.pm.PackageManager.PERMISSION_GRANTED))); return android.content.pm.PackageManager.PERMISSION_GRANTED; } else { android.util.Log.d(com.android.providers.telephony.TelephonyProviderTest.TAG, ((("checkCallingOrSelfPermission: permission=" + permission) + ", returning ") + (android.content.pm.PackageManager.PERMISSION_DENIED))); return android.content.pm.PackageManager.PERMISSION_DENIED; } }<END_MOD>
public boolean requestIcon(java.lang.String bssid, java.lang.String fileName) { if (<START_MOD>(bssid == null<END_MOD>) <START_MOD>|| (fileName == null)) return false;<END_MOD> return mSupplicantStaIfaceHal.initiateHs20IconQuery(bssid, fileName); }
private void dispatchBackgroundPeriodAlarm() { assertTrue( background period alarm mAlarmManager.dispatch(<START_MOD>WificondWifiScannerImpl<END_MOD>.BACKGROUND_PERIOD_ALARM_TAG)); mLooper.dispatchAll(); }
private void recordSnapshotLocked(long currentTime) throws android.os.RemoteException { final android.net.NetworkStats uidSnapshot = <START_MOD>getNetworkStatsUidDetailLocked<END_MOD>(); final android.net.NetworkStats xtSnapshot = getNetworkStatsXt(); final android.net.NetworkStats devSnapshot = mNetworkManager.getNetworkStatsSummaryDev(); final android.net.NetworkStats tetherSnapshot = getNetworkStatsTethering(android.net.NetworkStats.STATS_PER_IFACE); xtSnapshot.combineAllValues(tetherSnapshot); devSnapshot.combineAllValues(tetherSnapshot); mDevRecorder.recordSnapshotLocked(devSnapshot, mActiveIfaces, null, currentTime); mXtRecorder.recordSnapshotLocked(xtSnapshot, mActiveIfaces, null, currentTime); com.android.internal.net.VpnInfo[] vpnArray = mConnManager.getAllVpnInfo(); mUidRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mUidTagRecorder.recordSnapshotLocked(uidSnapshot, mActiveUidIfaces, vpnArray, currentTime); mStatsObservers.updateStats(xtSnapshot, uidSnapshot, new android.util.ArrayMap(mActiveIfaces), new android.util.ArrayMap(mActiveUidIfaces), vpnArray, currentTime); }
<START_MOD>@java.lang.Override public java.lang.Void call() throws java.lang.Exception { latch.countDown(); for (int j = 0; j < 100; j++) { s.update(message); s.sign(); } return null; }<END_MOD>
@java.lang.Override public com.android.build.gradle.<START_MOD>model.AndroidConfig<END_MOD> getExtension() { return extension; }
@org.junit.Test public void retroLambdaDefaultMethodsTest026() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_026).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
<START_MOD>protected<END_MOD> void stopObexServerSession() { if (com.android.bluetooth.pbap.BluetoothPbapService.VERBOSE) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG,   Service stopObexServerSession mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_ACQUIRE_WAKE_LOCK); mSessionStatusHandler.removeMessages(com.android.bluetooth.pbap.BluetoothPbapService.MSG_RELEASE_WAKE_LOCK); if ((mWakeLock) != null) { mWakeLock.release(); mWakeLock = null; } if ((mServerSession) != null) { mServerSession.close(); mServerSession = null; } closeConnectionSocket(); if (((mAdapter) != null) && (mAdapter.isEnabled())) { startSocketListeners(); } setState(BluetoothPbap.STATE_DISCONNECTED); }
private void maybeSendRA(java.net.InetSocketAddress dest) { if ((dest == null) || (!(isSuitableDestination(dest)))) { dest = mAllNodes; } try { synchronized(mLock) { if ((mRaLength) < (android.net.ip.RouterAdvertisementDaemon.MIN_RA_HEADER_SIZE)) { return; } android.system.Os.sendto(mSocket, mRA, 0, mRaLength, 0, dest); } <START_MOD>mLog.logAndEmit(( sendto   + (dest.getAddress().getHostAddress()))); } catch (<END_MOD>android.<START_MOD>system.ErrnoException | java<END_MOD>.net.SocketException e) { if (isSocketValid()) { <START_MOD>mLog.error(<END_MOD>( error:   + e)); } } }
<START_MOD>private void assertDayPeriodFormat(java.lang.String pattern, java.lang.String hour, java.lang.String expected, java.util.Locale locale) throws java.text.ParseException { java.text.SimpleDateFormat simpleDateFormat = new java.text.SimpleDateFormat(pattern, locale); simpleDateFormat.setTimeZone(java.util.TimeZone.getTimeZone("UTC")); assertEquals(expected, simpleDateFormat.format(libcore.java.text.SimpleDateFormatTest.createDateFromHour(hour))); }<END_MOD>
<START_MOD>public void testDatagramChannel() throws java.lang.Exception { java.nio.channels.DatagramChannel dc = java.nio.channels.DatagramChannel.open(); dc.connect(server.getLocalAddress()); dc.close(); assertEquals(java.util.Collections.EMPTY_MAP, tagger.getLiveDescriptors()); }<END_MOD>
<START_MOD>public static byte[] subarray(byte[] arr, int offset, int len) { if (len == 0) { return android.security.ArrayUtils.EMPTY_BYTE_ARRAY; } if ((offset == 0) && (len == (arr.length))) { return arr; } byte[] result = new byte[len]; java.lang.System.arraycopy(arr, offset, result, 0, len); return result; }<END_MOD>
<START_MOD>@java.lang.Override public java.util.Set<java.lang.String> getCriticalExtensionOIDs() { return null; }<END_MOD>
<START_MOD>public long count(java.lang.String tablename) { return count(tablename, null, null); }<END_MOD>
@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = <START_MOD>"14578821"<END_MOD>) public void testPhotoCapture() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); final android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); if ((testFramework.getApi()) >= 24) { <START_MOD>boolean photoTestSuccess = useCamera<END_MOD>(instrumentation, "Camera"); org.junit.Assert.assertTrue( photo was not deleted <START_MOD>from the gallery photoTestSuccess<END_MOD>); } }
<START_MOD>@org.junit.Test public void normalAddedDiffedFieldValues() { com.android.ahat.heapdump.FieldValue normal = new com.android.ahat.heapdump.FieldValue("name", "type", new com.android.ahat.heapdump.Value(1)); com.android.ahat.heapdump.DiffedFieldValue x = com.android.ahat.heapdump.DiffedFieldValue.added(normal); assertEquals("name", x.name); assertEquals("type", x.type); assertEquals(new com.android.ahat.heapdump.Value(1), x.current); assertTrue(x.added); assertFalse(x.deleted); }<END_MOD>
public static int Shr24And255(int arg) {<START_MOD> if (Main.doThrow) { throw new java.lang.Error(); }<END_MOD> return (arg >> 24) & 255; }
<START_MOD>public void doCall() { if (Main.doThrow) throw new java.lang.Error(""); }<END_MOD>
static void read(java.nio.channels.SocketChannel chan, byte[] data, int length, long timeout) throws com.android.ddmlib.TimeoutException, java.io.IOException<START_MOD>, java.lang.InterruptedException<END_MOD> { java.nio.ByteBuffer buf = java.nio.ByteBuffer.wrap(data, 0, (length != (-1) ? length : data.length)); int numWaits = 0; while ((buf.position()) != (buf.limit())) { int count; count = chan.read(buf); if (count < 0) { com.android.ddmlib.Log.d("ddms",   channel EOF throw new java.io.IOException("EOF"); } else if (count == 0) { if ((timeout != 0) && ((numWaits * (com.android.ddmlib.AdbHelper.WAIT_TIME)) > timeout)) { com.android.ddmlib.Log.d("ddms",   timeout throw new com.android.ddmlib.TimeoutException(); } java.lang.Thread.sleep(com.android.ddmlib.AdbHelper.WAIT_TIME); numWaits++; } else { numWaits = 0; } } }
public int getSimState(int <START_MOD>slotIdx<END_MOD>) { int simState = android.telephony.SubscriptionManager.<START_MOD>getSimStateForSlotIdx<END_MOD>(<START_MOD>slotIdx<END_MOD>); return simState; }
@java.lang.Override protected void fillRtTestInfos() { rtTestInfos.add(ADVANCEDTEST); rtTestInfos.add(CFGTEST); rtTestInfos.add(FASTPATH); rtTestInfos.add(SIMPLETEST); <START_MOD>rtTestInfos.add(SHORTCONDITION); <END_MOD>}
<START_MOD>public void enableDebugSignature(java.lang.String storeOsPath) { mStoreOsPath = storeOsPath; }<END_MOD>
<START_MOD>private static void traverseSVGAndExtract(com.android.assetstudiolib.vectordrawable.vg.SVGTree svgTree, com.android.assetstudiolib.vectordrawable.vg.SVGGroupNode currentGroup, org.w3c.dom.Node item) { org.w3c.dom.NodeList allChildren = item.getChildNodes(); for (int i = 0; i < (allChildren.getLength()); i++) { org.w3c.dom.Node currentNode = allChildren.item(i); java.lang.String nodeName = currentNode.getNodeName(); if ((((("path".equals(nodeName)) || ("rect".equals(nodeName))) || ("circle".equals(nodeName))) || ("polygon".equals(nodeName))) || ("line".equals(nodeName))) { com.android.assetstudiolib.vectordrawable.vg.SVGLeaveNode child = new com.android.assetstudiolib.vectordrawable.vg.SVGLeaveNode((nodeName + i)); com.android.assetstudiolib.vectordrawable.Svg2Vector.extractAllItemsAs(svgTree, child, currentNode); currentGroup.addChildren(child); } else if ("g".equals(nodeName)) { com.android.assetstudiolib.vectordrawable.vg.SVGGroupNode childGroup = new com.android.assetstudiolib.vectordrawable.vg.SVGGroupNode(("child" + i)); currentGroup.addChildren(childGroup); com.android.assetstudiolib.vectordrawable.Svg2Vector.traverseSVGAndExtract(svgTree, childGroup, currentNode); } else { com.android.assetstudiolib.vectordrawable.Svg2Vector.traverseSVGAndExtract(svgTree, currentGroup, currentNode); } } }<END_MOD>
public void testScreenLayout() throws java.lang.Exception { int expectedScreenLayout = computeScreenLayout(); int expectedSize = expectedScreenLayout & (android.content.res.Configuration.SCREENLAYOUT_SIZE_MASK); int expectedLong = expectedScreenLayout & (android.content.res.Configuration.SCREENLAYOUT_LONG_MASK<START_MOD>); boolean navigationBar = hasNavigationBar(<END_MOD>); for (int i = 0; i < (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS.length); i++) { android.app.Activity activity = startOrientationActivity(android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i]); android.content.res.Configuration mConfig = activity.getResources().getConfiguration(); int actualSize = (mConfig.screenLayout) & (android.content.res.Configuration.SCREENLAYOUT_SIZE_MASK); int actualLong = (mConfig.screenLayout) & (android.content.res.Configuration.SCREENLAYOUT_LONG_MASK); assertEquals(((((( screen size value of   + expectedSize) +   but got   + actualSize) +   for orientation   + (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i])), expectedSize, actualSize); <START_MOD>if (!navigationBar) { <END_MOD>assertEquals(((((( screen long value of   + expectedLong) +   but got   + actualLong) +   for orientation   + (android.dpi.cts.ConfigurationScreenLayoutTest.ORIENTATIONS[i])), expectedLong, actualLong); <START_MOD>} <END_MOD>tearDown(); } }
public int uint32() throws java.io.IOException { <START_MOD>read(1); int count = 0; for (int tag = (mBuffer[0]) & 255; (tag & 128) != 0; tag <<= 1) count += 1; int v = (mBuffer[0]) & (255 >> count); if (count == 0) { <END_MOD>return <START_MOD>v; } read<END_MOD>(<START_MOD>count); for (int i = 0; i < count; i++) { v = (v << 8) | ((mBuffer[i]) & 255<END_MOD>); }<START_MOD> return v; }<END_MOD>
@java.lang.Override @javax.annotation.Nonnull void delete(@javax.annotation.Nonnull com.android.sched.vfs.<START_MOD>DeflateFS.DeflateVFile<END_MOD> file) throws com.android.sched.util.file.CannotDeleteFileException { vfs.delete(file); }
<START_MOD>protected <END_MOD>void loge(java.lang.String s) { if (com.android.internal.telephony.ims.IsimUiccRecords.DBG) android.util.Log.e(com.android.internal.telephony.ims.IsimUiccRecords.LOG_TAG, (   + s)); }
@javax.annotation.Nonnull private synchronized com.android.<START_MOD>sched.vfs.InputOutputVFS<END_MOD> getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) throws com.android.<START_MOD>jack.library.LibraryIOException, com.android.<END_MOD>sched.util.file.CannotCreateFileException<START_MOD> { com.android.sched.vfs.InputOutputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VPath prefixPath = new com.android.sched.vfs.VPath(fileType.getPrefix(), '/'); com.android.sched.vfs.VFS outputVFS = new com.android.sched.vfs.PrefixedFS(vfs, prefixPath); if ((generateJacklibDigest) && (fileType == (com.android.jack.library.FileType.DEX))) { try { outputVFS = new com.android.sched.vfs.MessageDigestFS(outputVFS<END_MOD>, com.android.sched.util.<START_MOD>config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO)); } catch (com.android.sched.vfs.WrongVFSFormatException e) { throw new<END_MOD> com.android.jack.library.<START_MOD>LibraryIOException(getLocation(), e); } } currentSectionVFS = new com.android.sched.vfs.GenericInputOutputVFS(outputVFS); <END_MOD>sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }
@java.lang.Override public void run() { while (isSocketValid()) { try { final int rval = android.system.Os.recvfrom(mSocket, mSolication, 0, mSolication.length, 0, solicitor); if ((rval < 1) || ((mSolication[0]) != (android.net.ip.RouterAdvertisementDaemon.ICMPV6_ND_ROUTER_SOLICIT))) { continue; } } catch (android.system.ErrnoException | java.net.SocketException e) { if (isSocketValid()) { <START_MOD>mLog<END_MOD>.<START_MOD>error<END_MOD>(( error:   + e)); } continue; } maybeSendRA(solicitor); } }
private static android.renderscript.RenderScript internalCreate(android.content.Context ctx, int sdkVersion, android.renderscript.RenderScript.ContextType ct, int flags) { if (!(android.renderscript.RenderScript.sInitialized)) { android.util.Log.e(android.renderscript.RenderScript.LOG_TAG,   called when disabled; someone is likely to crash return null; } if ((flags & (~(((android.renderscript.RenderScript.CREATE_FLAG_LOW_LATENCY) | (android.renderscript.RenderScript.CREATE_FLAG_LOW_POWER)) | (android.renderscript.RenderScript.CREATE_FLAG_WAIT_FOR_ATTACH)))) != 0) { throw new android.renderscript.RSIllegalArgumentException( flags passed. } android.renderscript.RenderScript rs = new android.renderscript.RenderScript(ctx); rs.mDev = rs.nDeviceCreate(); rs.mContext = rs.nContextCreate(rs.mDev, flags, sdkVersion, ct.mID); rs.mContextType = ct; rs.mContextFlags = flags; rs.mContextSdkVersion = sdkVersion; if ((rs.mContext) == 0) { throw new android.renderscript.RSDriverException( to create RS context. } final java.lang.String CACHE_PATH = "com.android.renderscript.cache"; java.io.File f = new java.io.File(RenderScriptCacheDir.mCacheDir, CACHE_PATH); <START_MOD>android.renderscript.RenderScript.<END_MOD>mCachePath = f.getAbsolutePath(); f.mkdirs(); rs.nContextSetCacheDir(<START_MOD>android.renderscript.RenderScript.<END_MOD>mCachePath); rs.mMessageThread = new android.renderscript.RenderScript.MessageThread(rs); rs.mMessageThread.start(); return rs; }
<START_MOD>private void checkFastNormalizeFloat2() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testFastNormalizeFloat2(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFastNormalizeFloat2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testFastNormalizeFloat2(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFastNormalizeFloat2: " + (e.toString()))); } }<END_MOD>
public native void bind(java.io.FileDescriptor fd, java.net.SocketAddress address) throws java.net.SocketException<START_MOD>, libcore.io.ErrnoException<END_MOD>;
<START_MOD>@java.lang.Override public void printOpt(java.lang.String s) { }<END_MOD>
public int getTimeout() { int <START_MOD>delay<END_MOD> = getProperty(com.android.jack.server.ConfigFile.TIME_OUT_PROPERTY, java.lang.Integer.valueOf(7200), new com.android.sched.util.codec.IntCodec()).intValue(); if ((<START_MOD>delay<END_MOD> < 0) && (<START_MOD>delay<END_MOD> != (com.android.jack.server.ConfigFile.<START_MOD>TIME_DISABLED_VALUE<END_MOD>))) { com.android.jack.server.ConfigFile.logger.log(java.util.logging.Level.WARNING, ((( config value for   + (com.android.jack.server.ConfigFile.TIME_OUT_PROPERTY)) +     + <START_MOD>delay<END_MOD>)); <START_MOD>delay<END_MOD> = com.android.jack.server.ConfigFile.<START_MOD>TIME_DISABLED_VALUE<END_MOD>; } return <START_MOD>delay<END_MOD>; }
<START_MOD>public void testStandaloneWeekdayFormatting() throws java.text.ParseException { java.util.Locale fi = new java.util.Locale("fi"); assertEquals("torstai", formatDate(fi, "cccc")); assertEquals("torstaina", formatDate(fi, "EEEE")); }<END_MOD>
private void notifyRouteChange(java.lang.String action, android.net.RouteInfo route) { <START_MOD>invokeForAllObservers(new<END_MOD> <START_MOD>com<END_MOD>.<START_MOD>android.server.NetworkManagementService.CallbackInvocation<END_MOD>() { <START_MOD>@java.lang.Override public void call(android.net.INetworkManagementEventObserver o) throws android.os.RemoteException<END_MOD> { if (action.equals("updated")) { <START_MOD>o<END_MOD>.routeUpdated(route); } else { <START_MOD>o<END_MOD>.routeRemoved(route); } } }); }
public void fixupLinkProperties(android.net.LinkProperties oldLp) { if ((<START_MOD>!<END_MOD>(<START_MOD>mIsRunning)) || <END_MOD>((mNetwork.clatd) <START_MOD>==<END_MOD> null)) <START_MOD>{<END_MOD> <START_MOD>return; } android.net.LinkProperties lp = <END_MOD>mNetwork.linkProperties<START_MOD>; if ((lp == null) || (lp<END_MOD>.getAllInterfaceNames().contains(mIface))) {<START_MOD> return; }<END_MOD> android.util.Slog.d(com.android.server.connectivity.Nat464Xlat.TAG, ( running, updating NAI for   + (mIface))); for (android.net.LinkProperties stacked : oldLp.getStackedLinks()) { if (mIface.equals(stacked.getInterfaceName())) { <START_MOD>lp<END_MOD>.addStackedLink(stacked); <START_MOD>return<END_MOD>; } } }
<START_MOD>public java.lang.Boolean call(com.android.dx.dex.file.ClassDefItem clazz) throws java.lang.Exception { if (clazz == null) { return true; } com.android.dx.command.dexer.Main.addClassToDex(name, clazz); com.android.dx.command.dexer.Main.updateStatus(true); if (com.android.dx.command.dexer.Main.args.multiDex) { synchronized(com.android.dx.command.dexer.Main.dexRotationLock) { com.android.dx.command.dexer.Main.maxMethodIdsInProcess -= maxMethodIdsInClass; com.android.dx.command.dexer.Main.maxFieldIdsInProcess -= maxFieldIdsInClass; com.android.dx.command.dexer.Main.dexRotationLock.notifyAll(); } } return true; }<END_MOD>
@java.lang.Override public com.google.gdt.eclipse.login.common.VerificationCodeHolder obtainVerificationCodeFromExternalUserInteraction(java.lang.String title) { receiver = new com.google.<START_MOD>gct.login.CancellableServerReceiver<END_MOD>(); java.lang.String redirectUrl; try { redirectUrl = receiver.getRedirectUri(); } catch (java.io.IOException e) { logErrorAndDisplayDialog((title == null ?   Login : title), e); return null; } com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl authCodeRequestUrl = new com.google.api.client.auth.oauth2.AuthorizationCodeRequestUrl(com.google.api.client.googleapis.auth.oauth2.GoogleOAuthConstants.AUTHORIZATION_SERVER_URL, clientInfo.getId()).setRedirectUri(redirectUrl).setScopes(com.google.gct.login.OAuthScopeRegistry.getScopes()); com.intellij.ide.BrowserUtil.browse(authCodeRequestUrl.build()); java.lang.String verificationCode; try { verificationCode = receiver.waitForCode(); } catch (java.io.IOException e) { logErrorAndDisplayDialog((title == null ?   Login : title), e); return null; } return new com.google.gdt.eclipse.login.common.VerificationCodeHolder(verificationCode, redirectUrl); }
public boolean disable(java.lang.String packageName, boolean persist) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG,   not allowed for non-active and non system user return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM,   BLUETOOTH ADMIN permission if (((isEnabled()) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_DISABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((( mBluetooth =   + (mBluetooth)) +   mBinding =   + (mBinding))); } synchronized(mReceiver) { if (persist) { persistBluetoothSetting(com.android.server.BluetoothManagerService.BLUETOOTH_OFF); } mEnableExternal = false; sendDisableMsg(<START_MOD>packageName<END_MOD>); } return true; }
@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); reset(mContext); reset(mCS); reset(mLog); when(mLog.forSubComponent(anyString())).thenReturn(mLog); mCM = spy(new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestConnectivityManager(mContext, mCS)); mSM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.TestStateMachine(); mUNM = new com.android.server.connectivity.tethering.UpstreamNetworkMonitor(<START_MOD>((android.net.ConnectivityManager) (mCM)), <END_MOD>mSM<START_MOD>, mLog<END_MOD>, com.android.server.connectivity.tethering.UpstreamNetworkMonitorTest.EVENT_UNM_UPDATE, <START_MOD>com.<END_MOD>android.<START_MOD>server<END_MOD>.<START_MOD>connectivity.tethering.UpstreamNetworkMonitorTest.EVENT_PFX_UPDATE<END_MOD>); }
<START_MOD>java.lang.String profileFile() default "";<END_MOD>
public void stopOffloadControl() { if ((mOffloadControl) <START_MOD>!=<END_MOD> null) <START_MOD>{<END_MOD> try { <START_MOD>mOffloadControl<END_MOD>.<START_MOD>stopOffload<END_MOD>((boolean success,java.lang.String errMsg) <START_MOD>-> <END_MOD>{ if (<START_MOD>!<END_MOD>success) <START_MOD>mLog<END_MOD>.e(( failed:   + errMsg)); }); } catch (android.os.RemoteException e) { <START_MOD>mLog<END_MOD>.<START_MOD>e<END_MOD>(( to stopOffload:   + e)); } <START_MOD>} <END_MOD>mOffloadControl = null; <START_MOD>mControlCallback = null; <END_MOD>}
@org.junit.Test<START_MOD> @java.lang.Runtime<END_MOD> public void retroLambdaDefaultMethodsTest004() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_004); }
@org.junit.Test <START_MOD>public void test002c() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackOutput = runTest002(false, "keep-first", errOut, false, false); com.android.jack.library.InputJackLibrary lib = null; try { lib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibraryFromDir(jackOutput); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE1_PATH, "Res1"); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE2_PATH, "Res2"); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE3_PATH, "Res3"); } finally { if (lib != null) { lib.close(); } } <END_MOD>junit.<START_MOD>framework.Assert.assertTrue(<END_MOD>errOut.toString().isEmpty()); }
@java.lang.SuppressWarnings("javadoc") public void visitResourceReference(@com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context, @com.android.annotations.Nullable <START_MOD>com<END_MOD>.<START_MOD>android.tools.lint.detector.api<END_MOD>.AstVisitor visitor, @com.android.annotations.NonNull <START_MOD>com<END_MOD>.<START_MOD>android.tools.lint.detector.api<END_MOD>.Node node, @com.android.annotations.NonNull java.lang.String type, @com.android.annotations.NonNull java.lang.String name, boolean isFramework) { }
<START_MOD>public int hashCode() { return java.util.Objects.hashCode(specifier); }<END_MOD>
@org.junit.Test public void buildCapabilities_wpa1Element() { android.net.wifi.ScanResult.InformationElement ie = new android.net.wifi.ScanResult.InformationElement(); ie.id = android.net.wifi.ScanResult.InformationElement.EID_VSA; ie.bytes = new byte[]{ ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (1)), ((byte) (1)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (2)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (4)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (1)), ((byte) (0)), ((byte) (0)), ((byte) (80)), ((byte) (242)), ((byte) (2)), ((byte) (0)), ((byte) (0)) }; android.net.wifi.ScanResult.InformationElement[] ies = new android.net.wifi.ScanResult.InformationElement[]{ ie }; java.util.BitSet beaconCap = new java.util.BitSet(16); beaconCap.set(4); java.lang.String result = InformationElementUtil.Capabilities.buildCapabilities(ies, beaconCap); assertEquals(<START_MOD>"[WPA-GROUP_TKIP-PAIRWISE_CCMP+PAIRWISE_TKIP-PSK]"<END_MOD>, result); }
protected void setDnsForwarders(final android.net.Network network, final android.net.LinkProperties lp) { java.lang.String[] dnsServers = mConfig.defaultIPv4DNS; final java.util.Collection<java.net.InetAddress> dnses = lp.getDnsServers(); if ((dnses != null) && (!(dnses.isEmpty()))) { dnsServers = android.net.NetworkUtils.makeStrings(dnses); } try { mNMService.setDnsForwarders(network, dnsServers); <START_MOD>mLog<END_MOD>.log(java.lang.String.format( DNS forwarders: network=%s dnsServers=%s network, java.util.Arrays.toString(dnsServers))); } catch (java.lang.Exception e) { <START_MOD>mLog.error((<END_MOD> DNS forwarders failed,   + e)); transitionTo(mSetDnsForwardersErrorState); } }
<START_MOD>public com.android.internal.telephony.IccFileHandler getIccFileHandler(int family) { if ((mUiccCard) != null) { com.android.internal.telephony.UiccCardApplication app = mUiccCard.getApplication(family); if (app != null) { return app.getIccFileHandler(); } } return null; }<END_MOD>
<START_MOD>@javax.annotation.Nonnull private com.android.jack.dx.rop.code.RegisterSpec generateBoxLambda(@javax.annotation.Nonnull com.android.jack.ir.ast.JType boxType, @javax.annotation.Nonnull com.android.jack.dx.rop.code.SourcePosition sourcePosition, @javax.annotation.CheckForNull com.android.jack.dx.rop.code.RegisterSpec destReg, @javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec valueToBox, boolean useTmp, boolean extraInst) { assert (!useTmp) || (destReg == null); com.android.jack.dx.rop.code.RegisterSpec tmpBoxedReg = (useTmp) ? ropReg.getOrCreateTmpRegister(boxType) : destReg; assert tmpBoxedReg != null; com.android.jack.dx.rop.code.RegisterSpecList sourcesBox = com.android.jack.dx.rop.code.RegisterSpecList.make(valueToBox); com.android.jack.dx.rop.code.Insn inst = new com.android.jack.dx.rop.code.PlainCstInsn(com.android.jack.dx.rop.code.Rops.opBoxLambda(valueToBox, sourcesBox), sourcePosition, tmpBoxedReg, sourcesBox, com.android.jack.dx.rop.cst.CstType.intern(com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx(boxType))); if (extraInst) { addExtraInstruction(inst); } else { addInstruction(inst); } return tmpBoxedReg; }<END_MOD>
<START_MOD>public void test_parse_D_dd_yyyy_MMMM() throws java.lang.Exception { checkPatternOnFixedDate("D dd yyyy MMMM", "70 11 2002 March", "240 11 2002 March"); }<END_MOD>
<START_MOD>@java.lang.Override public boolean equals(java.lang.Object otherObject) { if (otherObject instanceof com.android.ahat.heapdump.DiffedFieldValue) { com.android.ahat.heapdump.DiffedFieldValue other = ((com.android.ahat.heapdump.DiffedFieldValue) (otherObject)); return (((((name.equals(other.name)) && (type.equals(other.type))) && (java.util.Objects.equals(current, other.current))) && (java.util.Objects.equals(baseline, other.baseline))) && (java.util.Objects.equals(added, other.added))) && (java.util.Objects.equals(deleted, other.deleted)); } return false; }<END_MOD>
@org.junit.Test public void retainedSize() throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump(); com.android.ahat.heapdump.AhatInstance anObject = dump.getDumpedAhatInstance("anObject"); com.android.ahat.heapdump.AhatSnapshot snapshot = dump.getAhatSnapshot(); <START_MOD>com.android.ahat.heapdump.Size<END_MOD> size = anObject.getSize(); assertEquals(size, anObject.getTotalRetainedSize()); assertEquals(size, anObject.getRetainedSize(anObject.getHeap())); for (com.android.ahat.heapdump.AhatHeap heap : snapshot.getHeaps()) { if (!(heap.equals(anObject.getHeap()))) { assertEquals(java.lang.String.format( heap '%s' heap.getName()), <START_MOD>new com.android.ahat.heapdump.Size()<END_MOD>, anObject.getRetainedSize(heap)); } } }
<START_MOD>private void resetStoreData(boolean shareData) { for (java.util.Map.Entry<java.lang.String, com.android.server.wifi.WifiConfigStore.StoreDataInterface> entry : mStoreDataList.entrySet()) { entry.getValue().resetData(shareData); } }<END_MOD>
<START_MOD>@java.lang.Override @com.android.annotations.NonNull public java.util.List<java.io.File> getRepositories() { java.util.List<java.io.File> repositories = com.google.common.collect.Lists.newArrayList(); java.io.File androidRepo = new java.io.File(mSdkLocation, (((((com.android.SdkConstants.FD_EXTRAS) + (java.io.File.separator)) + "android") + (java.io.File.separator)) + (com.android.SdkConstants.FD_M2_REPOSITORY))); if (androidRepo.isDirectory()) { repositories.add(androidRepo); } java.io.File googleRepo = new java.io.File(mSdkLocation, (((((com.android.SdkConstants.FD_EXTRAS) + (java.io.File.separator)) + "google") + (java.io.File.separator)) + (com.android.SdkConstants.FD_M2_REPOSITORY))); if (googleRepo.isDirectory()) { repositories.add(googleRepo); } return repositories; }<END_MOD>
@java.lang.Override public void run() { if ((mTraceFileWriter) == null) { return; } while (!(mIsCancelled)) { final java.lang.String frameCount = java.lang.Integer.toString(mTraceFileWriter.getCurrentFrameCount()); double fileSize = mTraceFileWriter.getCurrentFileSize(); fileSize /= 1024 * 1024; final java.lang.String frameSize = <START_MOD>com.android.ide.eclipse.gltrace.GLTraceCollectorDialog.SIZE_FORMATTER<END_MOD>.format(fileSize); org.eclipse.swt.widgets.Display.getDefault().syncExec(new java.lang.Runnable() { @java.lang.Override public void run() { if (mFramesCollectedLabel.isDisposed()) { return; } mFramesCollectedLabel.setText(frameCount); mTraceFileSizeLabel.setText(frameSize); mFramesCollectedLabel.pack(); mTraceFileSizeLabel.pack(); } }); try { java.lang.Thread.sleep(com.android.ide.eclipse.gltrace.GLTraceCollectorDialog.StatusRefreshTask.REFRESH_INTERVAL); } catch (java.lang.InterruptedException e) { return; } } }
<START_MOD>public long getDownloadSize() { return myDownloadSize; }<END_MOD>
<START_MOD>private static int countDomainNameLabelsExcludingRoot(java.lang.String hostname) { int result = 1; int hostnameLength = hostname.length(); int delimiterIndex = hostname.indexOf('.'); while ((delimiterIndex != (-1)) && (delimiterIndex != (hostnameLength - 1))) { result++; delimiterIndex = hostname.indexOf('.', (delimiterIndex + 1)); } return result; }<END_MOD>
<START_MOD>@javax.annotation.Nonnull protected com.android.jack.ir.ast.JPackage getPackage(@javax.annotation.Nonnull java.lang.String packageName) throws com.android.jack.ir.ast.JPackageLookupException { synchronized(packages) { com.android.jack.ir.ast.JPackage found = packages.get(packageName); if (found == null) { assert com.android.jack.util.NamingTools.isPackageBinaryName(packageName); int separatorIndex = packageName.lastIndexOf(com.android.jack.lookup.JLookup.PACKAGE_SEPARATOR); com.android.jack.ir.ast.JPackage parent; java.lang.String simplePackageName; if (separatorIndex == (-1)) { parent = topLevelPackage; simplePackageName = packageName; } else { parent = getPackage(packageName.substring(0, separatorIndex)); simplePackageName = packageName.substring((separatorIndex + 1)); } if (isPhantom) { found = parent.getOrCreateSubPackage(simplePackageName); } else { found = parent.getSubPackage(simplePackageName); } packages.put(packageName, found); } return found; } }<END_MOD>
<START_MOD>public static android.telephony.mbms.DownloadRequest.Builder fromDownloadRequest(android.telephony.mbms.DownloadRequest other) { android.telephony.mbms.DownloadRequest.Builder result = new android.telephony.mbms.DownloadRequest.Builder(other.sourceUri).setServiceId(other.fileServiceId).setSubscriptionId(other.subscriptionId); result.appIntent = other.serializedResultIntentForApp; return result; }<END_MOD>
public boolean p2pGroupRemove(java.lang.String iface) { if (android.text.TextUtils.isEmpty(iface)) return false; return mSupplicantP2pIfaceHal.groupRemove(iface); }
<START_MOD>@java.lang.Override public void visit(com.android.jack.dx.io.instructions.DecodedInstruction[] all, com.android.jack.dx.io.instructions.DecodedInstruction decodedInst) { remappedInstructions[((remappingIndex)++)] = decodedInst.withIndex(cstIndexMap.getRemappedCstBaseMethodRefIndex(file, decodedInst.getIndex()), cstIndexMap.getRemappedCstPrototypeRefIndex(file, decodedInst.getSecondIndex())); }<END_MOD>
<START_MOD>private void loadUrl() { final android.content.Intent intent = getIntent(); if (intent.hasExtra(Intent.EXTRA_TITLE)) { setTitle(intent.getStringExtra(Intent.EXTRA_TITLE)); } mWebView.loadUrl(java.lang.String.valueOf(intent.getData())); }<END_MOD>
<START_MOD>@org.junit.Test public void wifiNotEnabled_userDisablesWifiNearSavedNetwork_thenRemovesNetwork_thenStays() { when(mWifiManager.getConfiguredNetworks()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_WIFI_CONFIGURATION), com.google.android.collect.Lists.<android.net.wifi.WifiConfiguration>newArrayList()); when(mWifiManager.getScanResults()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_SCAN_RESULT)).thenReturn(com.google.android.collect.Lists.<android.net.wifi.ScanResult>newArrayList()).thenReturn(com.google.android.collect.Lists.newArrayList(com.android.networkrecommendation.WifiWakeupControllerTest.SAVED_SCAN_RESULT)); when(mWifiWakeupNetworkSelector.selectNetwork(anyMap(), anyList())).thenReturn(null); com.android.networkrecommendation.Util.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_ENABLED); com.android.networkrecommendation.Util.sendConfiguredNetworksChanged(mBroadcastReceiver, mContext); com.android.networkrecommendation.Util.sendScanResultsAvailable(mBroadcastReceiver, mContext); com.android.networkrecommendation.Util.sendWifiStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_STATE_DISABLED); com.android.networkrecommendation.Util.sendConfiguredNetworksChanged(mBroadcastReceiver, mContext); com.android.networkrecommendation.Util.sendScanResultsAvailable(mBroadcastReceiver, mContext); com.android.networkrecommendation.Util.sendScanResultsAvailable(mBroadcastReceiver, mContext); verify(mWifiManager, never()).setWifiEnabled(true); }<END_MOD>
<START_MOD>public boolean flush() { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure())) return false; com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult("flush()"); try { result.setResult(mISupplicantP2pIface.flush()); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ("ISupplicantP2pIface exception: " + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }<END_MOD>
<START_MOD>private void checkApplicationExceptions(android.aidl.tests.ITestService service) throws android.aidl.tests.TestServiceClient.TestFailException { mLog.log("Checking application exceptions..."); for (int i = -1; i < 2; ++i) { try { service.ThrowApplicationException(i); } catch (android.os.RemoteException ex) { mLog.logAndThrow(("Service threw RemoteException: " + (ex.toString()))); } catch (android.os.ApplicationSpecificException ex) { if ((ex.mErrorCode) != i) { mLog.logAndThrow(("Service threw wrong error code: " + i)); } } } mLog.log("...application exceptions work"); }<END_MOD>
public void test_readLByteBufferJ_Position_As_Long() throws java.lang.Exception { java.nio.ByteBuffer readBuffer = java.nio.ByteBuffer.allocate(org.apache.harmony.tests.java.nio.channels.FileChannelTest.CAPACITY); try { readOnlyFileChannel.read(readBuffer, java.lang.Long.MAX_VALUE); <START_MOD>fail( have thrown <END_MOD>} catch (java.io.IOException expected) { } }
<START_MOD>private void readGfxInfoDataset(java.io.BufferedReader br) throws java.io.IOException { updateBarChartDataSet(com.android.ddmuilib.SysinfoPanel.BugReportParser.parseGfxInfo(br), "Rendering time per frame"); }<END_MOD>
<START_MOD>public void testHandleAsKey() { java.util.Set<com.android.tools.rpclib.binary.Handle> set = new java.util.HashSet<com.android.tools.rpclib.binary.Handle>(); com.android.tools.rpclib.binary.Handle handle1 = new com.android.tools.rpclib.binary.Handle(com.android.tools.rpclib.binary.HandleTest.handleBytes); set.add(handle1); assertTrue(set.contains(handle1)); com.android.tools.rpclib.binary.Handle handle2 = new com.android.tools.rpclib.binary.Handle(com.android.tools.rpclib.binary.HandleTest.handleBytes); set.add(handle2); assertTrue(set.contains(handle2)); assertEquals(set.size(), 1); }<END_MOD>
public native long lseek(java.io.FileDescriptor fd, long offset, int whence) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
<START_MOD>@javax.annotation.Nonnull private java.util.List<java.lang.Integer> readCallSiteIds() { if ((tableOfContents.apiLevel) < (com.android.jack.dx.dex.DexFormat.API_ANDROID_O)) { java.util.Collections.emptyList(); } com.android.jack.dx.io.DexBuffer.Section callSiteIds = openInternal(tableOfContents.callSiteIds.off); java.lang.Integer[] result = new java.lang.Integer[tableOfContents.callSiteIds.size]; for (int i = 0; i < (tableOfContents.callSiteIds.size); ++i) { result[i] = java.lang.Integer.valueOf(callSiteIds.readInt()); } return java.util.Arrays.asList(result); }<END_MOD>
public boolean isProjectTheme() { <START_MOD>java.lang.String<END_MOD> <START_MOD>theme = mThemeCombo.getItem<END_MOD>(mThemeCombo.getSelectionIndex())<START_MOD>;<END_MOD> <START_MOD>return<END_MOD> <START_MOD>mProjectThemes.contains<END_MOD>(<START_MOD>theme<END_MOD>); }
@org.junit.Test public void testSocketResourceTrackerLimitation() throws java.lang.Exception { java.util.List<IpSecUdpEncapResponse> openUdpEncapSockets = new java.util.ArrayList<IpSecUdpEncapResponse>(); for (int i = 0; i < (com.android.server.IpSecServiceTest.MAX_NUM_ENCAP_SOCKETS); i++) { IpSecUdpEncapResponse newUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(newUdpEncapSocket); if ((IpSecManager.Status.OK) != (newUdpEncapSocket.status)) { break; } openUdpEncapSockets.add(newUdpEncapSocket); } assertTrue(<START_MOD> of open UDP encap sockets is negative <END_MOD>((openUdpEncapSockets.size()) > 0)<START_MOD>); assertTrue( of open UDP encap sockets is out of bound<END_MOD> ((openUdpEncapSockets.size()) < (com.android.server.IpSecServiceTest.MAX_NUM_ENCAP_SOCKETS))); IpSecUdpEncapResponse extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.RESOURCE_UNAVAILABLE, extraUdpEncapSocket.status); mIpSecService.closeUdpEncapsulationSocket(openUdpEncapSockets.get(0).resourceId); openUdpEncapSockets.get(0).fileDescriptor.close(); openUdpEncapSockets.remove(0); extraUdpEncapSocket = mIpSecService.openUdpEncapsulationSocket(0, new android.os.Binder()); assertNotNull(extraUdpEncapSocket); assertEquals(IpSecManager.Status.OK, extraUdpEncapSocket.status); openUdpEncapSockets.add(extraUdpEncapSocket); for (IpSecUdpEncapResponse openSocket : openUdpEncapSockets) { mIpSecService.closeUdpEncapsulationSocket(openSocket.resourceId); openSocket.fileDescriptor.close(); } }
private final void handleAppDiedLocked(com.android.server.am.ProcessRecord app, boolean restarting, boolean allowRestart) { int pid = app.pid; boolean kept = cleanUpApplicationRecordLocked(app, restarting, allowRestart, (-1)); if ((!kept) && (!restarting)) { removeLruProcessLocked(app); if (pid > 0) { com.android.server.am.ProcessList.remove(pid); } } if ((mProfileProc) == app) { clearProfilerLocked(); } boolean hasVisibleActivities = mStackSupervisor.handleAppDiedLocked(app); app.activities.clear(); if ((app.instrumentationClass) != null) { android.util.Slog.w(com.android.server.am.ActivityManagerService.TAG, ((( of app   + (app.processName)) +   running instrumentation   + (app.instrumentationClass))); android.os.Bundle info = new android.os.Bundle(); info.putString("shortMsg",   crashed. finishInstrumentationLocked(app, Activity.RESULT_CANCELED, info); } if (<START_MOD>(<END_MOD>!restarting) <START_MOD>&& hasVisibleActivities) <END_MOD>{ if (!(mStackSupervisor.resumeTopActivitiesLocked())) { mStackSupervisor.ensureActivitiesVisibleLocked(null, 0); } } }
<START_MOD>public static com.android.ahat.heapdump.DiffedFieldValue matched(com.android.ahat.heapdump.FieldValue current, com.android.ahat.heapdump.FieldValue baseline) { return new com.android.ahat.heapdump.DiffedFieldValue(current.name, current.type, current.value, baseline.value, false, false); }<END_MOD>
@java.lang.Override public boolean perform() { try { java.lang.Thread.sleep(100); } catch (java.lang.InterruptedException ignored) { } <START_MOD>catch (java.lang.OutOfMemoryError ignore) { } <END_MOD>return true; }
static byte <START_MOD>$opt$noinline$CharToByte<END_MOD>(char a) { return ((byte) (a)); }
<START_MOD>@java.lang.Override public java.security.Principal getSubjectDN() { return null; }<END_MOD>
public void setImportedLibraries(@javax.annotation.Nonnull java.util.List<java.io.File> importedLibraries) { this.importedLibraries = <START_MOD>new java.util.ArrayList<java.io.File>(<END_MOD>importedLibraries<START_MOD>)<END_MOD>; }
public java.lang.String toString() { return configs.toString(); }
private void read(java.io.InputStream patchIn) throws java.io.IOException { java.util.List<com.intellij.updater.PatchAction> newActions = new java.util.ArrayList<com.intellij.updater.PatchAction>(); @java.lang.SuppressWarnings("IOResourceOpenedButNotSafelyClosed") java.io.DataInputStream in = new java.io.DataInputStream(patchIn); <START_MOD>isBinary = in.readBoolean(); isStrict = in.readBoolean(); myOldBuild = in.readUTF(); myNewBuild = in.readUTF(); <END_MOD>int size = in.readInt(); while ((size--) > 0) { int key = in.readInt(); com.intellij.updater.PatchAction a; switch (key) { case com.intellij.updater.Patch.CREATE_ACTION_KEY : a = new com.intellij.updater.CreateAction(<START_MOD>this, <END_MOD>in); break; case com.intellij.updater.Patch.UPDATE_ACTION_KEY : a = new com.intellij.updater.UpdateAction(<START_MOD>this, <END_MOD>in); break; case com.intellij.updater.Patch.UPDATE_ZIP_ACTION_KEY : a = new com.intellij.updater.UpdateZipAction(<START_MOD>this, <END_MOD>in); break; case com.intellij.updater.Patch.DELETE_ACTION_KEY : a = new com.intellij.updater.DeleteAction(<START_MOD>this, <END_MOD>in); break; case com.intellij.updater.Patch.<START_MOD>VALIDATE_ACTION_KEY : a = new com.intellij.updater.ValidateAction(this, <END_MOD>in); break; default : throw new java.lang.RuntimeException(( action type   + key)); } newActions.add(a); } myActions = newActions; }
<START_MOD>@org.junit.Test public void testStateTransition_AudioOnToAudioDisconnecting_DisconnectAudio() { setUpAudioOnState(); reset(mHeadsetStateMachine); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.DISCONNECT_AUDIO, mTestDevice); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.AudioDisconnecting.class)); verify(mHeadsetService, never()).sendBroadcastAsUser(any(android.content.Intent.class), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }<END_MOD>
<START_MOD>org.conscrypt.OpenSSLAbstractSession getSessionToReuse(long sslNativePointer, java.lang.String hostname, int port) throws javax.net.ssl.SSLException { <END_MOD>org.conscrypt.OpenSSLSessionImpl <START_MOD>sessionToReuse = null; if (client_mode) { javax.net.ssl.SSLSession cachedSession = getCachedClientSession(clientSessionContext, hostname, port); if (cachedSession != null) { if (cachedSession instanceof org.conscrypt.OpenSSLExtendedSessionImpl) { cachedSession = ((org.conscrypt.OpenSSLExtendedSessionImpl) (cachedSession)).getDelegate(); } if (cachedSession instanceof org.conscrypt.OpenSSLSessionImpl) { sessionToReuse = ((org.conscrypt.OpenSSLSessionImpl) (cachedSession)); org.conscrypt.NativeCrypto.SSL_set_session(<END_MOD>sslNativePointer, sessionToReuse.sslSessionNativePointer); } } } return sessionToReuse; }
@java.lang.Override public void getDataCallList(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_DATA_CALL_LIST, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getDataCallList(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getDataCallList", e); } } }
<START_MOD>public void testFirstMatchesByGivenMatcher() { android.view.View firstViewWithId1 = createViewWithId(R.id.testId1); android.view.View secondViewWithId1 = createViewWithId(R.id.testId1); org.hamcrest.Matcher<android.view.View> id1FirstOccurrenceMatcher = android.support.test.espresso.matcher.ViewMatchers.thatFirstMatches(android.support.test.espresso.matcher.ViewMatchers.withId(R.id.testId1)); assertTrue(id1FirstOccurrenceMatcher.matches(firstViewWithId1)); assertFalse(id1FirstOccurrenceMatcher.matches(secondViewWithId1)); assertTrue(id1FirstOccurrenceMatcher.matches(firstViewWithId1)); }<END_MOD>
<START_MOD>@java.lang.Override public android.app.Activity newActivity(java.lang.ClassLoader cl, java.lang.String className, android.content.Intent intent) throws java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.InstantiationException { return ((this.mActivityProvider) != null) && (mActivityProvider.getActivityClass().getName().equals(className)) ? mActivityProvider.getActivity() : super.newActivity(cl, className, intent); }<END_MOD>
public static java.lang.invoke.CallSite bsmLookupTest9(java.lang.invoke.MethodHandles.Lookup caller, java.lang.String name, java.lang.invoke.MethodType type, java.lang.invoke.MethodHandle staticGetter, java.lang.invoke.MethodHandle staticSetter, java.lang.invoke.MethodHandle fieldGetter, java.lang.invoke.MethodHandle fieldSetter, java.lang.invoke.MethodHandle instanceInvoke, java.lang.invoke.MethodHandle constructor, java.lang.invoke.MethodHandle interfaceInvoke<START_MOD>, java.lang.invoke.MethodHandle privateInvoke<END_MOD>) throws java.lang.Throwable { java.lang.System.out.println((((((((( [ + staticGetter) +     + staticSetter) +     + fieldGetter) +     + fieldSetter) + "]")); java.lang.System.out.println(((name +     + type)); invokecustom.InvokeCustom.checkStaticFieldTest9(staticGetter, staticSetter); invokecustom.InvokeCustom instance = new invokecustom.InvokeCustom(); instance.checkFieldTest9(fieldGetter, fieldSetter); instanceInvoke.invokeExact(instance); invokecustom.InvokeCustom instance2 = <START_MOD>instance<END_MOD>; interfaceInvoke.invoke(instance2); <START_MOD>privateInvoke.invoke(instance2); <END_MOD>final java.lang.invoke.MethodHandles.Lookup lookup = java.lang.invoke.MethodHandles.lookup(); final java.lang.invoke.MethodHandle targetMH = lookup.findStatic(lookup.lookupClass(), name, type); return new java.lang.invoke.ConstantCallSite(targetMH.asType(type)); }
public void run() { android.<START_MOD>renderscript<END_MOD>.RenderScript pRS = android.<START_MOD>renderscript<END_MOD>.RenderScript.create(mCtx); com.android.rs.test.ScriptC_fp_mad s = new com.android.rs.test.ScriptC_fp_mad(pRS); pRS.setMessageHandler(mRsMessage); s.invoke_fp_mad_test(0, 0); pRS.finish(); waitForMessage(); pRS.destroy(); }
<START_MOD>public vogar.target.TestRunner createTestRunner(java.lang.String... args) { return new vogar.target.TestRunner(properties, new java.util.ArrayList(java.util.Arrays.asList(args))); }<END_MOD>
<START_MOD>private void fixD8Output(java.io.File output, java.util.List<java.lang.String> inputs) throws java.io.IOException { byte[] buffer = new byte[4096]; java.io.File outputCopy = new java.io.File(((output.toString()) + ".copy")); output.renameTo(outputCopy); inputs.add(outputCopy.toString()); try (java.util.jar.JarOutputStream outputJar = new java.util.jar.JarOutputStream(new java.io.FileOutputStream(output))) { for (java.lang.String input : inputs) { try (java.util.jar.JarInputStream inputJar = new java.util.jar.JarInputStream(new java.io.FileInputStream(input))) { for (java.util.jar.JarEntry entry = inputJar.getNextJarEntry(); entry != null; entry = inputJar.getNextJarEntry()) { if (entry.getName().endsWith(".class")) { continue; } outputJar.putNextEntry(entry); int length = 0; while (length >= 0) { length = inputJar.read(buffer); if (length > 0) { outputJar.write(buffer, 0, length); } } outputJar.closeEntry(); } } } } finally { outputCopy.delete(); } }<END_MOD>
public void test_getSendBufferSize() throws java.lang.Exception { int portNumber = tests.support.Support_PortManager.getNextPortForUDP(); ds = new java.net.DatagramSocket(portNumber); ds.setSendBufferSize(134); assertTrue( buffer size ((ds.getSendBufferSize()) >= 134)); <START_MOD>ds.close(); try { ds.getSendBufferSize(); fail( was not thrown. <END_MOD>}<START_MOD> catch (java.net.SocketException se) { } }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.Void call() throws java.lang.Exception { forwardTlsRecords("MiTM S->C", serverInputStream, clientOutputStream, (injectEarlyCCS && injectIntoClient ? android.security.cts.OpenSSLEarlyCCSTest.HandshakeMessage.TYPE_CERTIFICATE : -1)); return null; }<END_MOD>
public void setUp() throws java.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStack assistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId = <START_MOD>0<END_MOD>; removeStacks(android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }
@java.lang.Override public final boolean visit(TypeDeclaration typeDecl, org.eclipse.jdt.internal.compiler.lookup.BlockScope scope) { if ((typeDecl.binding) == null) <START_MOD>{ return false; } if<END_MOD> ((typeDecl.binding.constantPoolName()) == null) { assert false; return false; } createTypes(typeDecl); createMembers(typeDecl); return visit(typeDecl); }
<START_MOD>public static int poll(android.os.StructPollfd[] fds, int timeoutMs) throws android.os.ErrnoException { return Libcore.os.poll(fds, timeoutMs); }<END_MOD>
<START_MOD>@org.junit.Test public void testGetEuiccInfo2() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses("BF22030102039000"); assertEquals("BF2203010203", mEuiccCard.getEuiccInfo2().toHex()); verifyStoreData(channel, "BF2200"); }<END_MOD>
<START_MOD>@java.lang.Override public void sendTo(byte[] data, java.net.InetAddress dstAddr, int port) throws java.io.IOException { try { android.system.Os.sendto(mFd, data, 0, data.length, 0, dstAddr, port); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } }<END_MOD>
@com.android.annotations.NonNull private byte[] asRawByteArray(<START_MOD>int start, <END_MOD>int elementCount) { getBuffer().setPosition(mValuesOffset); assert (mType) != (Type.OBJECT); <START_MOD>assert (start + elementCount) < (mLength); <END_MOD>byte[] bytes = new byte[elementCount * (mType.getSize())]; getBuffer().<START_MOD>readSubSequence<END_MOD>(bytes<START_MOD>, (start * (mType.getSize())), (elementCount * (mType.getSize()))<END_MOD>); return bytes; }
@org.junit.Test public void testLamba022() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA022).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
<START_MOD>private static void FalseCrossOverLoop2() { Main.sArrI[20] = -2; for (int i = 0; i < (Main.sArrF.length); i++) { Main.sArrF[i] = Main.sArrI[20]; } }<END_MOD>
private void setValues(java.util.Map<java.lang.String, java.lang.String> values) { <START_MOD>mBuildInfo = java.lang.Integer.parseInt(values.get(com.android.sdklib.internal.export.ApkData.PROP_BUILDINFO)); <END_MOD>mMinor = java.lang.Integer.parseInt(values.get(com.android.sdklib.internal.export.ApkData.PROP_MINOR)); mRelativePath = values.get(com.android.sdklib.internal.export.ApkData.PROP_PROJECT); mMinSdkVersion = java.lang.Integer.parseInt(values.get(com.android.sdklib.internal.export.ApkData.PROP_API)); java.lang.String tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_GL); if (tmp != null) { mGlVersion = java.lang.Integer.parseInt(tmp); } tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_ABI); if (tmp != null) { mAbi = tmp; } tmp = values.get(com.android.sdklib.internal.export.ApkData.PROP_SCREENS); if (tmp != null) { mSupportsScreens = new com.android.sdklib.xml.ManifestData.SupportsScreens(tmp); } }
public void compileAidlFile(@com.android.annotations.NonNull java.io.File aidlFile, @com.android.annotations.NonNull java.io.File sourceOutputDir, @com.android.annotations.NonNull java.util.List<java.io.File> importFolders, @com.android.annotations.Nullable com.android.builder.compiling.DependencyFileProcessor dependencyFileProcessor) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { checkNotNull(aidlFile,   cannot be null. checkNotNull(sourceOutputDir,   cannot be null. checkNotNull(importFolders,   cannot be null. <START_MOD>com.android.sdklib.IAndroidTarget target = mTargetInfo.getTarget(); com.android.sdklib.BuildToolInfo buildToolInfo = mTargetInfo.getBuildTools(); <END_MOD>java.lang.String aidl = <START_MOD>buildToolInfo<END_MOD>.getPath(BuildToolInfo.PathId.AIDL); if ((aidl == null) || (!(new java.io.File(aidl).isFile()))) { throw new java.lang.IllegalStateException( is missing } com.android.builder.internal.compiler.AidlProcessor processor = new com.android.builder.internal.compiler.AidlProcessor(aidl, <START_MOD>target<END_MOD>.getPath(IAndroidTarget.ANDROID_AIDL), importFolders, sourceOutputDir, (dependencyFileProcessor != null ? dependencyFileProcessor : com.android.builder.AndroidBuilder.sNoOpDependencyFileProcessor), mCmdLineRunner); processor.processFile(aidlFile); }
public static final double nextDouble(double value) { if (java.lang.Double.<START_MOD>isInfinite(value<END_MOD>)) { return value; } long bits; if (value == 0) { bits = 0; } else { bits = java.lang.Double.doubleToLongBits(value); } return java.lang.Double.longBitsToDouble((value <   ? bits - 1 : bits + 1)); }
public com.android.ide.<START_MOD>common<END_MOD>.<START_MOD>platformData<END_MOD>.ViewClassInfo.LayoutParamsInfo getLayoutData() { return mLayoutData; }
private static char maybeStripMarkers(java.lang.String symbol, char fallback) { final int length = symbol.length(); if (length == 1) { return symbol.charAt(0); } if (length > 1) { char first = symbol.charAt(0); <START_MOD>char second = symbol.charAt(1); <END_MOD>if (((first == '‎') || (first == '‏')) || (first == '؜')) { return <START_MOD>second; } if ((length == 2) && (((second == '‎') || (second == '‏')) || (second == '؜'))) { return first<END_MOD>; } } return fallback; }
public void testMinimalSizeDocked() throws java.lang.Exception { <START_MOD>if (!(supportsMultiWindow())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(android.server.cts.INFO,   test: no multi-window support return; } <END_MOD>testMinimalSize(android.server.cts.DOCKED_STACK_ID); }
<START_MOD>@java.lang.Override public void onRttConnectionRemotelyTerminated(java.lang.String connectionId, android.telecom.Logging.Session.Info sessionInfo) throws android.os.RemoteException { mHandler.obtainMessage(android.telecom.ConnectionServiceAdapterServant.MSG_ON_RTT_REMOTELY_TERMINATED, connectionId).sendToTarget(); }<END_MOD>
@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mDevice = getDevice(); <START_MOD>mSupportsSplitScreenMultiWindow = supportsSplitScreenMultiWindow(); <END_MOD>mSourcePackageName = android.wm.cts.CrossAppDragAndDropTests.SOURCE_PACKAGE_NAME; mTargetPackageName = android.wm.cts.CrossAppDragAndDropTests.TARGET_PACKAGE_NAME; cleanupState(); }
protected void forEach(int slot, android.renderscript.Allocation ain, android.renderscript.Allocation aout, android.renderscript.FieldPacker v, android.renderscript.Script.LaunchOptions sc) { mRS.validate(); mRS.validateObject(ain); mRS.validateObject(aout); if ((ain == null) && (aout == null)) { throw new android.renderscript.RSIllegalArgumentException( least one of ain or aout is required to be non-null. } <START_MOD>long[] in_ids = null; if (ain != null) { in_ids = new long[1]; in_ids[0] = ain.getID(mRS); } long out_id = 0; if (aout != null) { out_id = aout.getID(mRS); } byte[] params = null; if (v != null) { params = v.getData(); } int[] limits = null; if (sc != null) { limits = new int[6]; limits[0] = sc.xstart; limits[1] = sc.xend; limits[2] = sc.ystart; limits[3] = sc.yend; limits[4] = sc.zstart; limits[5] = sc.zend; } mRS.nScriptForEach(getID(mRS), <END_MOD>slot, <START_MOD>in_ids,<END_MOD> out_id<START_MOD>,<END_MOD> params<START_MOD>, limits); }<END_MOD>
public void proguardFiles(java.lang.Object... proguardFileArray) { <START_MOD>getProguardFiles()<END_MOD>.addAll(project.files(proguardFileArray).<START_MOD>getFiles()<END_MOD>); }
<START_MOD>public com.android.ide.eclipse.adt.internal.editors.ui.DecorComposite setContent(com.android.ide.eclipse.adt.internal.editors.ui.IDecorContent content) { mContent = content; content.createControl(this); com.android.ide.eclipse.adt.internal.editors.ui.GridDataHelper.create(content.getControl()).hSpan(2).grab().fill(); java.lang.String t = content.getTitle(); if (t != null) { setTitle(t); } org.eclipse.swt.graphics.Image i = content.getImage(); if (i != null) { setImage(i); } return this; }<END_MOD>
@com.android.annotations.NonNull public static com.google.common.collect.ImmutableList<com.android.tools.perflib.heap.Instance> compute(@com.android.annotations.NonNull java.lang.Iterable<<START_MOD>com.android.tools.perflib.heap.RootObj<END_MOD>> roots) { com.android.tools.perflib.heap.analysis.TopologicalSort.TopologicalSortVisitor visitor = new com.android.tools.perflib.heap.analysis.TopologicalSort.TopologicalSortVisitor(); for (com.android.tools.perflib.heap.Instance root : roots) { root.accept(visitor); } com.google.common.collect.ImmutableList<com.android.tools.perflib.heap.Instance> instances = visitor.getOrderedInstances(); Snapshot.SENTINEL_ROOT.setTopologicalOrder(0); int currentIndex = 0; for (com.android.tools.perflib.heap.Instance node : instances) { node.setTopologicalOrder((++currentIndex)); } return instances; }
@org.junit.runners.Parameterized.Parameters(name = "{0}") public static java.lang.Iterable<?> getParams() throws java.lang.Exception { int thisApiVersion = android.os.Build.VERSION.SDK_INT; if (thisApiVersion < 19) { android.util.Log.w(com.android.rs.testbackward.RSBackwardCompatibilityTests.TAG,   version is less than 19, no tests running } <START_MOD>android.content.Context ctx = android.support.test.InstrumentationRegistry.getTargetContext(); <END_MOD>java.util.<START_MOD>ArrayList<END_MOD><com.android.rs.testbackward.UnitTest> validUnitTests = new java.util.ArrayList<>(); <START_MOD>for (java.lang.Class<? extends com.android.rs.testbackward.UnitTest> testClass : com.android.rs.testbackward.RSTests.getTestClassesForCurrentAPIVersion()<END_MOD>) { <START_MOD>com.android.rs.testbackward.UnitTest test = testClass.getDeclaredConstructor(android.content.Context.class).newInstance(ctx); <END_MOD>validUnitTests.add(<START_MOD>test<END_MOD>); } <START_MOD>com.android.rs.testbackward.RSBackwardCompatibilityTests.checkDuplicateNames(validUnitTests); return validUnitTests<END_MOD>; }
@org.junit.Test public void requestInstall_asyncSuccess() throws java.lang.Exception { configureCallerHasPermission(); android.os.ParcelFileDescriptor parcelFileDescriptor = <START_MOD>com.android.server.timezone.RulesManagerServiceTest.createParcelFileDescriptor(com.android.server.timezone.RulesManagerServiceTest.createArbitraryBytes(1000)); com.android.server.timezone.CheckToken token = createArbitraryToken<END_MOD>(); byte[] <START_MOD>tokenBytes = token.toByteArray(); com.android.server.timezone.RulesManagerServiceTest.TestCallback callback = new com.android.server.timezone.RulesManagerServiceTest.TestCallback(); assertEquals(RulesManager.SUCCESS, mRulesManagerService.requestInstall<END_MOD>(parcelFileDescriptor, <START_MOD>tokenBytes, callback)); com.android.server.timezone.RulesManagerServiceTest.assertClosed(parcelFileDescriptor); callback.assertNoResultReceived(); verifyNoInstallerCallsMade(); verifyNoPackageTrackerCallsMade(); configureStageInstallExpectation(TimeZoneDistroInstaller.INSTALL_SUCCESS); mFakeExecutor.simulateAsyncExecutionOfLastCommand(); verifyStageInstallCalled(); verifyPackageTrackerCalled(<END_MOD>token<START_MOD>, true); callback.assertResultReceived(Callback<END_MOD>.SUCCESS); }
public void getDefaultDownloadableSubscriptionList(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { <START_MOD>getIEuiccController()<END_MOD>.getDefaultDownloadableSubscriptionList(mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
public static void run(@javax.annotation.Nonnull com.android.jack.Options options) throws com.android.jack.IllegalOptionsException, com.android.jack.JackUserException, com.android.sched.scheduler.ProcessException, com.android.sched.util.config.ConfigurationException { com.android.sched.util.RunnableHooks hooks = new com.android.sched.util.RunnableHooks(); try { com.android.jack.Jack.<START_MOD>check<END_MOD>(<START_MOD>options<END_MOD>, <START_MOD>hooks<END_MOD>); com.android.jack.Jack.<START_MOD>subRun<END_MOD>(options, hooks); } finally { hooks.runHooks(); com.android.sched.util.config.ThreadConfig.unsetConfig(); } }
org.gradle.model.<START_MOD>collection<END_MOD>.<START_MOD>ManagedSet<END_MOD><com.android.build.gradle.<START_MOD>managed<END_MOD>.<START_MOD>ManagedGroupableProductFlavor<END_MOD>> getProductFlavors();
public static void setExtensionDefault(com.android.build.gradle.ndk.managed.NdkConfig ndkConfig) { if (ndkConfig.getToolchain().isEmpty()) { ndkConfig.setToolchain(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN); } else { if ((!(ndkConfig.getToolchain().equals("gcc"))) && (!(ndkConfig.getToolchain().equals("clang")))) { throw new org.gradle.api.InvalidUserDataException(java.lang.String.format( toolchain '%s'. Supported toolchains are 'gcc' and 'clang'. ndkConfig.getToolchain())); } } if (ndkConfig.getToolchainVersion().isEmpty()) { ndkConfig.setToolchainVersion(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN_VERSION); } ndkConfig.getCFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue("**/*.c"); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue("**/*.cpp"); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue("**/*.cc"); } }); if (ndkConfig.getStl().isEmpty()) { ndkConfig.setStl(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_STL); } else { com.android.build.gradle.ndk.internal.StlConfiguration.checkStl(ndkConfig.getStl()); } }
<START_MOD>public com.android.dex.MethodHandle adjust(com.android.dex.MethodHandle methodHandle) { return new com.android.dex.MethodHandle(target, methodHandle.getMethodHandleType(), (methodHandle.getMethodHandleType().isField() ? adjustField(methodHandle.getFieldOrMethodId()) : adjustMethod(methodHandle.getFieldOrMethodId()))); }<END_MOD>
public static short charToDoubleToShort(char value) {<START_MOD> if (Main.doThrow) { throw new java.lang.Error(); }<END_MOD> return ((short) ((double) (value))); }
<START_MOD>private java.lang.String formatDateNonGregorianCalendar(java.lang.String fmt) { java.text.DateFormat dateFormat = new java.text.SimpleDateFormat(fmt, java.util.Locale.US); libcore.java.text.SimpleDateFormatTest.NonGregorianCalendar cal = new libcore.java.text.SimpleDateFormatTest.NonGregorianCalendar(); cal.clear(); cal.setTimeZone(libcore.java.text.SimpleDateFormatTest.UTC); dateFormat.setCalendar(cal); return dateFormat.format(new java.util.Date(0)); }<END_MOD>
private void <START_MOD>updatePriorityQueue<END_MOD>(java.util.<START_MOD>Timer.ScheduledTask<END_MOD> <START_MOD>taskExecuted<END_MOD>, long <START_MOD>timeFinished<END_MOD>) { synchronized(<START_MOD>scheduledTaskPriorityQueue<END_MOD>) { <START_MOD>scheduledTaskPriorityQueue.remove<END_MOD>(<START_MOD>taskExecuted<END_MOD>); if (<START_MOD>(taskExecuted.period)<END_MOD> <START_MOD>==<END_MOD> <START_MOD>null<END_MOD>) { <START_MOD>return<END_MOD>; } <START_MOD>taskExecuted<END_MOD>.<START_MOD>nextExecution<END_MOD> = <START_MOD>(taskExecuted.period) + (taskExecuted.isAtFixedRate ? taskExecuted.nextExecution : timeFinished)<END_MOD>; <START_MOD>scheduledTaskPriorityQueue<END_MOD>.<START_MOD>add<END_MOD>(<START_MOD>taskExecuted<END_MOD>); } }
<START_MOD>private void checkFmodFloatFloat() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testFmodFloatFloat(inX, out); verifyResultsFmodFloatFloat(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFmodFloatFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testFmodFloatFloat(inX, out); verifyResultsFmodFloatFloat(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testFmodFloatFloat: " + (e.toString()))); } }<END_MOD>
private static dalvik.system.DexPathList.Element[] <START_MOD>makePathElements<END_MOD>(java.util.List<java.io.File> files, java.io.File optimizedDirectory, java.util.List<java.io.IOException> suppressedExceptions) { java.util.<START_MOD>List<dalvik.system.DexPathList.Element> elements = new java.util.<END_MOD>ArrayList<><START_MOD>(); for (java.io.File file : files) { java.io.File zip = null; java.io.File dir<END_MOD> = new java.<START_MOD>io.File(""); dalvik.system.DexFile dex = null; java.lang.String path = file.getPath(); java.lang.String name = file.getName(); if (path.contains(dalvik.system.DexPathList.zipSeparator)) { java.lang.String[] split = path.split(dalvik.system.DexPathList.zipSeparator, 2);<END_MOD> zip = <START_MOD>new java.io.File(split[0]); dir = new java.io.File(split[1]); } else<END_MOD> if (file.isDirectory()) { elements.add(new dalvik.system.DexPathList.Element(file, true, null, null)); } else if (file.isFile()) { if (name.endsWith(dalvik.system.DexPathList.DEX_SUFFIX)) { try { dex = dalvik.system.DexPathList.loadDexFile(file, optimizedDirectory); } catch (java.io.IOException ex) { java.lang.System.logE(( to load dex file:   + file), ex); } } else { zip = file; try { dex = dalvik.system.DexPathList.loadDexFile(file, optimizedDirectory); } catch (java.io.IOException suppressed) { suppressedExceptions.add(suppressed); } } } else { java.lang.System.logW(( referenced unknown path:   + file)); } if ((zip != null) || (dex != null)) { elements.add(new dalvik.system.DexPathList.Element(<START_MOD>dir<END_MOD>, false, zip, dex)); } } return elements.toArray(new dalvik.system.DexPathList.Element[elements.size()]); }
@javax.annotation.Nonnull protected static <START_MOD>com<END_MOD>.<START_MOD>android<END_MOD>.<START_MOD>sched.vfs.InputVFile<END_MOD> getJackFile(@javax.annotation.Nonnull java.lang.String typeName) { <START_MOD>try<END_MOD> <START_MOD>{<END_MOD> <START_MOD>assert <END_MOD>(com.android.jack.experimental.incremental.JackIncremental.<START_MOD>incrementalOutputLibrary)<END_MOD> <START_MOD>!= null; return com.android.jack.experimental.incremental.JackIncremental.incrementalOutputLibrary.getFile<END_MOD>(FileType.JAYCE<START_MOD>,<END_MOD> new com.android.sched.vfs.VPath(typeName, com.android.jack.experimental.incremental.JackIncremental.fileSeparator)); }<START_MOD> catch (com.android.jack.library.FileTypeDoesNotExistException e) { throw new java.lang.AssertionError(e); } }<END_MOD>
public native void fsync(java.io.FileDescriptor fd) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
<START_MOD>private android.security.net.config.CertificatesEntryRef parseCertificatesEntry(android.content.res.XmlResourceParser parser) throws android.security.net.config.XmlConfigSource.ParserException, java.io.IOException, org.xmlpull.v1.XmlPullParserException { boolean overridePins = parser.getAttributeBooleanValue(null, "overridePins", false); int sourceId = parser.getAttributeResourceValue(null, "src", (-1)); final java.lang.String sourceString = parser.getAttributeValue(null, "src"); android.security.net.config.CertificateSource source = null; if (sourceString == null) { throw new android.security.net.config.XmlConfigSource.ParserException(parser, "certificates element missing src attribute"); } if (sourceId != (-1)) { source = new android.security.net.config.ResourceCertificateSource(sourceId, mContext); } else if ("system".equals(sourceString)) { source = android.security.net.config.SystemCertificateSource.getInstance(); } else if ("user".equals(sourceString)) { source = android.security.net.config.UserCertificateSource.getInstance(); } else { throw new android.security.net.config.XmlConfigSource.ParserException(parser, ("Unknown certificates src. " + "Should be one of system|user|@resourceVal")); } com.android.internal.util.XmlUtils.skipCurrentTag(parser); return new android.security.net.config.CertificatesEntryRef(source, overridePins); }<END_MOD>
<START_MOD>@com.android.internal.annotations.VisibleForTesting public void processSendDtmf(int dtmf, android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "processSendDtmf device is null"); return; } if ((mPhoneProxy) != null) { try { mPhoneProxy.sendDtmf(dtmf); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } } else { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "Handsfree phone proxy null for sending DTMF"); } }<END_MOD>
<START_MOD>public void testGetValues_Int() { org.apache.harmony.jpda.tests.jdwp.StackFrame.GetValues002Test.GetValuesTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.GetValues002Test.GetValuesTester("testGetValues_Int", "breakpointInt", "runBreakpointInt", "param", JDWPConstants.Tag.INT_TAG) { @java.lang.Override public void checkValue(org.apache.harmony.jpda.tests.framework.jdwp.Value value) { assertEquals(("Incorrect value in variable " + (getTestVariableName())), GetValues002Debuggee.INT_PARAM_VALUE, value.getIntValue()); } }; runTest(tester); }<END_MOD>
public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.util.MutableLong inOffset, long byteCount) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
<START_MOD>@java.lang.Override public void dispose(int subscriptionId) { mReceivedCalls.add(java.util.Arrays.asList(android.telephony.cts.embmstestapp.CtsDownloadService.METHOD_CLOSE, subscriptionId)); }<END_MOD>
<START_MOD>@java.lang.Override public void visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode node) { if ((node.getParent()) == null) { return; } java.lang.String nodeName = enquote(node.getId()); java.time.Instant startInstant = node.getStartInstant(); java.time.Instant endInstant = node.getEndInstant(); boolean priorityClash = node.hasPriorityClash(); java.lang.String fromTimestamp = startInstant.toString(); java.lang.String toTimestamp = (endInstant == null) ? "..." : endInstant.toString(); java.lang.String optionalColor = (priorityClash) ? ",color=\"red\"" : ""; java.lang.String label = ((((((node.getZoneInfosString()) + "\nFrom=") + fromTimestamp) + " to ") + toTimestamp) + "\nPeriod count=") + (node.getPeriodCount()); writeLine((((((nodeName + "[label=\"") + label) + "\"") + optionalColor) + "];")); for (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode child : node.getChildren()) { writeLine((((nodeName + " -> ") + (enquote(child.getId()))) + ";")); } }<END_MOD>
<START_MOD>@java.lang.Override protected java.util.Set<java.lang.String> getDefaultValues() { com.android.resources.Density[] values = com.android.resources.Density.values(); java.util.Set<java.lang.String> fullList = com.google.common.collect.Sets.newHashSetWithExpectedSize(((values.length) - 2)); for (com.android.resources.Density value : values) { if (((value != (com.android.resources.Density.NODPI)) && (value != (com.android.resources.Density.ANYDPI))) && (value.isRecommended())) { fullList.add(value.getResourceValue()); } } java.lang.System.out.println(("DEFAULT: " + fullList)); return fullList; }<END_MOD>
private void updateDeviceState(int eventType, boolean state) { switch (eventType) { case com.android.internal.telephony.DeviceStateMonitor.EVENT_SCREEN_STATE_CHANGED : if ((mIsScreenOn) == state) return; mIsScreenOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_CHARGING_STATE_CHANGED : if ((mIsCharging) == state) return; mIsCharging = state; sendDeviceState(com.android.internal.telephony.CHARGING_STATE, mIsCharging); break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_TETHERING_STATE_CHANGED : if ((mIsTetheringOn) == state) return; mIsTetheringOn = state; break; case com.android.internal.telephony.DeviceStateMonitor.EVENT_POWER_SAVE_MODE_CHANGED : if ((mIsPowerSaveOn) == state) return; mIsPowerSaveOn = state; sendDeviceState(com.android.internal.telephony.POWER_SAVE_MODE, mIsPowerSaveOn); break; default : return; } if ((mIsLowDataExpected) != (isLowDataExpected())) { mIsLowDataExpected = !(mIsLowDataExpected); sendDeviceState(com.android.internal.telephony.LOW_DATA_EXPECTED, mIsLowDataExpected); } int newFilter = 0; if (!(shouldTurnOffSignalStrength())) { newFilter |= android.hardware.radio.<START_MOD>V1_2<END_MOD>.IndicationFilter.SIGNAL_STRENGTH; } if (!(shouldTurnOffFullNetworkUpdate())) { newFilter |= android.hardware.radio.<START_MOD>V1_2<END_MOD>.IndicationFilter.FULL_NETWORK_STATE; } if (!(shouldTurnOffDormancyUpdate())) { newFilter |= android.hardware.radio.<START_MOD>V1_2<END_MOD>.IndicationFilter.DATA_CALL_DORMANCY_CHANGED; } <START_MOD>if (!(shouldTurnOffLinkCapacityEstimate())) { newFilter |= android.hardware.radio.V1_2.IndicationFilter.LINK_CAPACITY_ESTIMATE; } <END_MOD>setUnsolResponseFilter(newFilter, false); }
<START_MOD>@java.lang.Override protected void tearDown() throws java.lang.Exception { super.tearDown(); mContext.closeDatabase(); }<END_MOD>
boolean sendTrackChangeWithId(boolean requesting, @android.annotation.Nullable com.android.bluetooth.avrcp.MediaController mediaController) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ((( ( + requesting) +   controller   + mediaController)); byte[] track; long qid = <START_MOD>getActiveQueueItemId<END_MOD>(mediaController<START_MOD>);<END_MOD> if ((!requesting) && (qid == (mLastTrackIdSent))) { if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ( sending duplicate track changed id   + qid)); return false; } track = java.nio.ByteBuffer.allocate(AvrcpConstants.UID_SIZE).putLong(qid).array(); if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, ( 0x + (com.android.bluetooth.Utils.byteArrayToString(track)))); int trackChangedNT = AvrcpConstants.NOTIFICATION_TYPE_CHANGED; if (requesting) trackChangedNT = AvrcpConstants.NOTIFICATION_TYPE_INTERIM; mMediaInterface.trackChangedRsp(trackChangedNT, track); mLastTrackIdSent = qid; return trackChangedNT == (AvrcpConstants.NOTIFICATION_TYPE_CHANGED); }
<START_MOD>@java.lang.Override public boolean getGeneratePngs() { return model.getGeneratePngs(); }<END_MOD>
@javax.annotation.Nonnull private com.android.jack.jayce.MethodNode getNNode(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod loaded) throws com.android.jack.jayce.JayceFormatException, com.android.jack.jayce.JayceVersionException, java.io.IOException { com.android.jack.jayce.MethodNode methodNode = nnode.get(); if ((methodNode == null) || ((methodNode.getLevel()) != (NodeLevel.FULL))) { com.android.jack.jayce.DeclaredTypeNode declaredTypeNode = enclosingClassLoader.getNNode(NodeLevel.FULL<START_MOD>, loaded.getEnclosingType().getSession()<END_MOD>); methodNode = declaredTypeNode.getMethodNode(loaded); } return methodNode; }
@java.lang.Override public void sendDeviceState(int stateType, boolean state, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_SEND_DEVICE_STATE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) +     + stateType) + ":") + state)); } try { radioProxy.sendDeviceState(rr.mSerial, stateType, state); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendDeviceState", e); } } }
public int ioctlFlags(java.io.FileDescriptor fd, java.lang.String interfaceName) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
@org.junit.Test public void coreToJayceFromFolder() throws java.lang.Exception { com.android.jill.Options options = new com.android.jill.Options(); options.setBinaryFile(new java.io.File(((com.android.<START_MOD>jack<END_MOD>.<START_MOD>test<END_MOD>.<START_MOD>TestingEnvironment.getAndroidRootDir().getPath<END_MOD>()) + "/out/target/common/obj/JAVA_LIBRARIES/core_intermediates/classes/"))); options.setVerbose(true); options.container = ContainerType.DIR; options.outputDirOrZip = com.android.jill.JillTestTools.createTempDir("core_", "_dir"); new com.android.jill.Jill(options, "0.1").process(options.getBinaryFile()); }
@org.junit.Test <START_MOD>public void test001c() throws java.lang.Exception { java.io.File jackOutput = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); runTest001(jackOutput, "keep-first", errOut, false, false); com.android.jack.library.InputJackLibrary outputLib = null; try { outputLib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibraryFromDir(jackOutput); com.android.sched.vfs.InputVFile myClass1 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE1_PATH); com.android.sched.vfs.InputVFile myClass2 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE2_PATH); com.android.sched.vfs.InputVFile myClass3 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE3_PATH); checkJayceNotEmpty(myClass1); checkJayceNotEmpty(myClass2); checkJayceNotEmpty(myClass3); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { <END_MOD>junit.<START_MOD>framework.Assert.fail(); } finally { if (outputLib != null) { outputLib.close(); } junit.framework.Assert.assertTrue(<END_MOD>errOut.toString().isEmpty()); }<START_MOD> }<END_MOD>
@java.lang.Override protected void onPreExecute() { mBitmap = getBitmap(); mReferenceBitmap = android.holo.cts.BitmapAssets.getBitmap(getApplicationContext(), mBitmapName); final <START_MOD>float<END_MOD> <START_MOD>tolerance<END_MOD> = <START_MOD>0.01F<END_MOD>; mSame = compareTo(mBitmap, mReferenceBitmap, <START_MOD>tolerance<END_MOD>); }
<START_MOD>private void checkElement(java.io.File file, org.w3c.dom.Element element, java.util.Map<java.lang.String, com.android.ide.common.resources.platform.AttributeInfo> map) { org.w3c.dom.NamedNodeMap attributes = element.getAttributes(); for (int i = 0, n = attributes.getLength(); i < n; i++) { org.w3c.dom.Attr attribute = ((org.w3c.dom.Attr) (attributes.item(i))); java.lang.String uri = attribute.getNamespaceURI(); java.lang.String name = attribute.getLocalName(); java.lang.String value = attribute.getValue(); if (com.android.SdkConstants.ANDROID_URI.equals(uri)) { com.android.ide.common.resources.platform.AttributeInfo info = map.get(name); if (info == null) { java.lang.System.out.println(((("Warning: Unknown attribute '" + name) + "' in ") + file)); return; } if (!(info.isValid(value, null, null))) { if ((name.equals("duration")) || (name.equals("exitFadeDuration"))) { return; } java.lang.String message = ((((((("In file " + (file.getPath())) + ":\nCould not validate value \"") + value) + "\" for attribute \'") + name) + "' where the attribute info has formats ") + (info.getFormats())) + "\n"; java.lang.System.out.println(("\n" + message)); fail(message); } if (((value.startsWith("@")) || (value.startsWith("?"))) && (!(info.getFormats().contains(Format.REFERENCE)))) { java.lang.System.out.println(((((("Warning: Found resource reference for attribute " + name) + " which doesn't allow references (") + (info.getFormats())) + "): value was ") + value)); } } } }<END_MOD>
<START_MOD>private static void startActivityMonitoring() { if (!(com.intellij.internal.statistic.StatisticsUploadAssistant.isSendAllowed())) { return; } com.intellij.concurrency.JobScheduler.getScheduler().scheduleAtFixedRate(new java.lang.Runnable() { private int mLastCount; @java.lang.Override public void run() { int count = com.intellij.ide.ActivityTracker.getInstance().getCount(); if (count > (mLastCount)) { int actions = count - (mLastCount); java.lang.System.out.println(("# of actions: " + actions)); } mLastCount = count; } }, 20, 20, java.util.concurrent.TimeUnit.SECONDS); }<END_MOD>
@java.lang.Override public synchronized void onLoadChildren(final java.lang.String parentMediaId, final com.android.bluetooth.a2dpsink.mbs.Result<java.util.List<android.media.browse.MediaBrowser.MediaItem>> result) { if ((mAvrcpCtrlSrvc) == null) { android.util.Log.e(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG,   not yet connected. result.sendResult(java.util.Collections.emptyList()); return; } <START_MOD>if (com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.DBG) <END_MOD>android.util.Log.d(com.android.bluetooth.a2dpsink.mbs.A2dpMediaBrowserService.TAG, ( parentMediaId= + parentMediaId)); if (!(mAvrcpCtrlSrvc.getChildren(mA2dpDevice, parentMediaId, 0, 255))) { result.sendResult(java.util.Collections.emptyList()); return; } synchronized(this) { mParentIdToRequestMap.put(parentMediaId, result); } result.detach(); }
<START_MOD>@org.junit.Test public void addProviderWithInvalidCredential() throws java.lang.Exception { android.net.wifi.hotspot2.PasspointConfiguration config = new android.net.wifi.hotspot2.PasspointConfiguration(); config.homeSp = new android.net.wifi.hotspot2.pps.HomeSP(); config.homeSp.fqdn = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_FQDN; config.homeSp.friendlyName = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_FRIENDLY_NAME; config.credential = new android.net.wifi.hotspot2.pps.Credential(); config.credential.realm = com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_REALM; config.credential.userCredential = new android.net.wifi.hotspot2.pps.Credential.UserCredential(); config.credential.userCredential.username = "username"; config.credential.userCredential.password = "password"; config.credential.userCredential.eapType = android.net.wifi.hotspot2.pps.Credential.EAP_TLS; config.credential.userCredential.nonEapInnerMethod = "MS-CHAP"; assertFalse(mManager.addProvider(config)); }<END_MOD>
public <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.StructTimeval getsockoptTimeval(java.io.FileDescriptor fd, int level, int option) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
<START_MOD>@java.lang.Override public void endTraceSeed(com.android.jack.ir.ast.JField field) { composedStatus.pop(); }<END_MOD>
public native void mkfifo(java.lang.String path, int mode) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
public boolean <START_MOD>isFileType<END_MOD>(@javax.annotation.Nonnull com.android.sched.vfs.InputVFile v) { return v.getName().endsWith(getFileExtension()); }
public static int SubNeg2(int arg1, int arg2) {<START_MOD> if (Main.doThrow) { throw new java.lang.Error(); }<END_MOD> int temp = -arg1; return (temp - arg2) | (temp - arg2); }
@java.lang.Override public long getTagBits() { long tagBits = com.android.jack.ecj.loader.jast.AnnotationUtils.getTagBits(jDeclaredType); com.android.jack.ir.ast.JClassOrInterface enclosingType = jDeclaredType.getEnclosingType(); if ((<START_MOD>(<END_MOD>enclosingType != null) && (!(isAnonymous()))) <START_MOD>&& (enclosingType instanceof com.android.jack.ir.ast.JDefinedClassOrInterface)) <END_MOD>{ com.android.jack.ecj.loader.jast.JAstBinaryType enclosing = classpathLocation.findType(<START_MOD>((com.android.jack.ir.ast.JDefinedClassOrInterface) (enclosingType))<END_MOD>); if (enclosing != null) { if (com.android.jack.ecj.loader.jast.LoaderUtils.isDeprecated(enclosing)) { tagBits |= org.eclipse.jdt.internal.compiler.lookup.ExtraCompilerModifiers.AccDeprecatedImplicitly; } } } return tagBits; }
private static native void nativeDrawVertices(<START_MOD>long<END_MOD> nCanvas, int mode, int n, float[] verts, int vertOffset, float[] texs, int texOffset, int[] colors, int colorOffset, short[] indices, int indexOffset, int indexCount, <START_MOD>long<END_MOD> nPaint);
static void <START_MOD>$noinline$someStaticMethod<END_MOD>(java.lang.Iterable<?> it) { it.iterator(); <START_MOD>if (Main.doThrow) throw new java.lang.Error(""); <END_MOD>}
<START_MOD>public void setSuppServiceIndication(android.os.Handler h, int what, java.lang.Object obj) { mSsIndicationRegistrant = new android.os.Registrant(h, what, obj); }<END_MOD>
@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) > 0) { debugLog(( arguments, <START_MOD>check for proto output<END_MOD>:   + (android.text.TextUtils.join(   args)))); if (args[0].startsWith("--proto")) { if (args[0].equals("--proto-java-bin")) { dumpJava(fd); } else { dumpNative(fd, args); } return;<START_MOD> }<END_MOD> } writer.println( Status writer.println(( enabled:   + (isEnabled()))); writer.println(( state:   + (getState()))); writer.println(( address:   + (getAddress()))); writer.println((( name:   + (getName())) + "\n")); writer.println( devices: for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println((((((   + (device.getAddress())) +   [ + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) +     + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }
<START_MOD>public void disconnectIndication(int var1, int var2) { }<END_MOD>
public void testOverlay1Content() throws java.lang.Exception { java.io.File project = buildProject("overlay1", BasePlugin.GRADLE_MIN_VERSION); java.io.File drawableOutput = new java.io.File(project, <START_MOD>(("build/" + (com.android.build.gradle.BasePlugin.FD_I)) + "/res/debug/drawable")<END_MOD>); com.android.build.gradle.ManualBuildTest.checkImageColor(drawableOutput, "no_overlay.png", com.android.build.gradle.ManualBuildTest.GREEN); com.android.build.gradle.ManualBuildTest.checkImageColor(drawableOutput, "type_overlay.png", com.android.build.gradle.ManualBuildTest.GREEN); }
<START_MOD>protected void finalize() { java.lang.System.out.println("Finalizer started and spinning..."); int j = 0; long start; long end; start = java.lang.System.nanoTime(); for (int i = 0; i < 1000000; i++) j++; end = java.lang.System.nanoTime(); java.lang.System.out.println("Finalizer done spinning."); java.lang.System.out.println("Finalizer sleeping forever now."); while (true) { Main.snooze(10000); } }<END_MOD>
<START_MOD>public static java.lang.String getJvmArg() { java.lang.String buildDir = java.lang.System.getenv("PROJECT_BUILD_DIR"); buildDir = (buildDir == null) ? "build" : buildDir; java.io.File jacocoAgent = new java.io.File(buildDir, "jacoco/agent.jar"); if (!(jacocoAgent.isFile())) { try { org.jacoco.agent.AgentJar.extractTo(jacocoAgent); } catch (java.io.IOException ignored) { fail("Error extracting jacoco agent"); } } java.lang.String jvmArgs = ((("-javaagent:" + (jacocoAgent.toString())) + "=destfile=") + buildDir) + "/jacoco/test.exec"; return jvmArgs; }<END_MOD>
private static android.net.NetworkState buildMobileIpv4UpstreamState() { return com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(true, false<START_MOD>, false<END_MOD>); }
<START_MOD>public com.android.ide.eclipse.adt.internal.editors.ui.GridLayoutHelper spacing(int s) { com.android.ide.eclipse.adt.internal.editors.ui.GridLayoutHelper.mGL.verticalSpacing = s; com.android.ide.eclipse.adt.internal.editors.ui.GridLayoutHelper.mGL.horizontalSpacing = s; return this; }<END_MOD>
<START_MOD>@java.lang.Override public boolean checkForCondition() { boolean condition = false; boolean isSuccess = mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches("(?i)no thanks(?-i)")).waitForExists(java.util.concurrent.TimeUnit.MILLISECONDS.convert(3L, java.util.concurrent.TimeUnit.SECONDS)); try { if (isSuccess) { mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches("(?i)no thanks(?-i)")).click(); condition = true; } isSuccess = mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches("(?i)continue(?-i)")).waitForExists(java.util.concurrent.TimeUnit.MILLISECONDS.convert(3L, java.util.concurrent.TimeUnit.SECONDS)); if (isSuccess) { mDevice.findObject(new android.support.test.uiautomator.UiSelector().textMatches("(?i)continue(?-i)")).click(); condition = true; } } catch (android.support.test.uiautomator.UiObjectNotFoundException e) { throw new java.lang.AssertionError("Failed to dismiss the API Demos Test confirmation popup dialogs"); } return condition; }<END_MOD>
@org.jetbrains.annotations.NotNull @java.lang.Override public com.<START_MOD>google.gct.intellij.endpoints.validation<END_MOD>.PsiElementVisitor buildVisitor(@org.jetbrains.annotations.NotNull final com.intellij.codeInspection.ProblemsHolder holder, boolean isOnTheFly) { return new com.google.gct.intellij.endpoints.validation.EndpointPsiElementVisitor() { @java.lang.Override public void <START_MOD>visitAnnotation(com.google.gct.intellij.endpoints.validation.PsiAnnotation annotation<END_MOD>) { if (!(<START_MOD>annotation.getQualifiedName().equals(GctConstants.APP_ENGINE_ANNOTATION_API)<END_MOD>)) { return; } <START_MOD>com.google.gct.intellij.endpoints.validation.PsiAnnotationMemberValue annotationMemberValue = annotation.findAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNameInspection.API_NAME_ATTRIBUTE); <END_MOD>if (<START_MOD>annotationMemberValue == null) { return; } java.lang.String nameValueWithQuotes = annotationMemberValue.getText(); java.lang.String nameValue = com.google.gct.intellij.endpoints.util.EndpointUtilities.removeBeginningAndEndingQuotes(nameValueWithQuotes); if (<END_MOD>!(<START_MOD>com.google.gct.intellij.endpoints.validation.ApiNameInspection.API_NAME_PATTERN.matcher(nameValue).matches())) { holder.registerProblem(<END_MOD>annotation,   api name. The api name must match '[a-z]+[A-Za-z0-9]*' LocalQuickFix.EMPTY_ARRAY); } } }; }
private void <START_MOD>registerAllAppEvents<END_MOD>() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) {<START_MOD> log( registering for EVENT_APP_READY<END_MOD> app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir != null) { <START_MOD>log( registering for EVENT_RECORDS_LOADED <END_MOD>ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } } } }
<START_MOD>@java.lang.Override public void initialize(int keysize, java.security.SecureRandom random) { final java.lang.String name = org.apache.harmony.xnet.provider.jsse.OpenSSLECKeyPairGenerator.SIZE_TO_CURVE_NAME.get(keysize); if (name == null) { throw new java.security.InvalidParameterException(("unknown key size " + keysize)); } group = org.apache.harmony.xnet.provider.jsse.OpenSSLECGroupContext.getCurveByName(name); }<END_MOD>
<START_MOD>private boolean connectSocket() { try { if ((mPseRec) == null) { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ("connectSocket: UUID: " + (BluetoothUuid.PBAP_PSE.getUuid()))); mSocket = mDevice.createRfcommSocketToServiceRecord(BluetoothUuid.PBAP_PSE.getUuid()); } else if ((mPseRec.getL2capPsm()) != (com.android.bluetooth.pbapclient.PbapClientConnectionHandler.L2CAP_INVALID_PSM)) { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ("connectSocket: PSM: " + (mPseRec.getL2capPsm()))); mSocket = mDevice.createL2capSocket(mPseRec.getL2capPsm()); } else { android.util.Log.v(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, ("connectSocket: channel: " + (mPseRec.getRfcommChannelNumber()))); mSocket = mDevice.createRfcommSocket(mPseRec.getRfcommChannelNumber()); } if ((mSocket) != null) { mSocket.connect(); return true; } else { android.util.Log.w(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, "Could not create socket"); return false; } } catch (java.io.IOException e) { android.util.Log.e(com.android.bluetooth.pbapclient.PbapClientConnectionHandler.TAG, "Error while connecting socket", e); return false; } }<END_MOD>
void toggleMute() {<START_MOD> if (mCallsManager.hasEmergencyCall()) { android.telecom.Log.v(this,   toggleMute for emergency call return; }<END_MOD> mCallAudioRouteStateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.TOGGLE_MUTE); }
public native void setsockoptByte(java.io.FileDescriptor fd, int level, int option, int value) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
<START_MOD>@org.junit.Test public void testClassImplementsTwoInterfacesWithSameDefenderMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_34).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }<END_MOD>
<START_MOD>@java.lang.Override public boolean run() { synchronized(mLock) { mExecutionThread = java.lang.Thread.currentThread(); if (mCancelled) { com.android.tradefed.log.LogUtil.CLog.i("Python process was cancelled before being awaited."); return false; } } boolean success; try { success = (mProcess.waitFor()) == 0; com.android.tradefed.log.LogUtil.CLog.i("Python process terminates normally."); } catch (java.lang.InterruptedException e) { success = false; com.android.tradefed.log.LogUtil.CLog.i("Python process is interrupted."); } return success; }<END_MOD>
<START_MOD>@java.lang.Override public void onActivityResult(int request, int result, android.content.Intent data) { if (request == (com.android.packageinstaller.PackageInstallerActivity.REQUEST_ENABLE_UNKNOWN_SOURCES)) { if ((result == (RESULT_OK)) && (isUnknownSourcesEnabled())) { initiateInstall(); } else { finish(); } } }<END_MOD>
public char getMinusSign() { return minusSign<START_MOD>.charAt(0)<END_MOD>; }
<START_MOD>private static java.nio.ByteBuffer getAndroidManifestFromApk(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections) throws com.android.apksig.apk.ApkFormatException, com.android.apksig.zip.ZipFormatException, java.io.IOException { java.util.List<com.android.apksig.internal.zip.CentralDirectoryRecord> cdRecords = com.android.apksig.internal.apk.v1.V1SchemeVerifier.parseZipCentralDirectory(apk, zipSections); java.nio.ByteBuffer result = com.android.apksig.ApkSigner.getAndroidManifestFromApk(cdRecords, apk.slice(0, zipSections.getZipCentralDirectoryOffset())); if (result == null) { throw new com.android.apksig.apk.ApkFormatException("Missing AndroidManifest.xml"); } return result; }<END_MOD>
<START_MOD>@org.junit.Test public void testFSuffix() throws com.android.euicc.telephony.UiccChannelException, com.android.internal.telephony.uicc.euicc.EuiccCardException { int channel = mockLogicalChannelResponses("BF2D14A012E3105A0A896700000000004523FF9F7001019000"); com.android.euicc.data.EuiccProfile[] profiles = mEuiccCard.getAllProfiles(); assertEquals(1, profiles.length); assertEquals("987600000000005432", profiles[0].getIccid()); assertEquals(ProfileState.ENABLED, profiles[0].getState()); verifyStoreData(channel, "BF2D0D5C0B5A909192B79F709599BF76"); }<END_MOD>
@java.lang.Override public void getHardwareConfig(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_GET_HARDWARE_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getHardwareConfig(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getHardwareConfig", e); } } }
<START_MOD>@java.lang.Override protected javax.swing.Icon getSetIcon(boolean isMuted) { return icons.GoogleCloudToolsIcons.CLOUD_BREAKPOINT; }<END_MOD>
<START_MOD>private static <K, V extends java.lang.Comparable<V>> void check_unmodifiableNavigableMap_keyAndValueCollections(java.util.NavigableMap<K, V> map, java.util.List<K> keysInOrder, java.util.List<V> valuesInOrder, K absentKey) { java.util.List<K> reverseKeys = libcore.java.util.CollectionsTest.reverseCopyOf(keysInOrder); libcore.java.util.CollectionsTest.check_unmodifiableSet(map.keySet(), absentKey); libcore.java.util.CollectionsTest.check_orderedSet(map.keySet(), keysInOrder); libcore.java.util.CollectionsTest.check_unmodifiableNavigableSet(map.navigableKeySet(), keysInOrder, absentKey); libcore.java.util.CollectionsTest.check_unmodifiableNavigableSet(map.descendingMap().descendingKeySet(), keysInOrder, absentKey); libcore.java.util.CollectionsTest.check_unmodifiableNavigableSet(map.descendingKeySet(), reverseKeys, absentKey); libcore.java.util.CollectionsTest.check_unmodifiableSet(map.descendingMap().keySet(), absentKey); libcore.java.util.CollectionsTest.check_orderedSet(map.descendingMap().keySet(), reverseKeys); libcore.java.util.CollectionsTest.check_unmodifiableNavigableSet(map.descendingMap().navigableKeySet(), reverseKeys, absentKey); libcore.java.util.CollectionsTest.check_unmodifiableOrderedCollection(map.values(), valuesInOrder); libcore.java.util.CollectionsTest.check_orderedCollection(map.values(), valuesInOrder); libcore.java.util.CollectionsTest.check_unmodifiableOrderedCollection(map.descendingMap().values(), libcore.java.util.CollectionsTest.reverseCopyOf(valuesInOrder)); libcore.java.util.CollectionsTest.check_orderedCollection(map.descendingMap().values(), libcore.java.util.CollectionsTest.reverseCopyOf(valuesInOrder)); }<END_MOD>
<START_MOD>private static void addStyleToPath(com.android.assetstudiolib.vectordrawable.vg.SVGLeaveNode path, java.lang.String value) { com.android.assetstudiolib.vectordrawable.Svg2Vector.logger.log(java.util.logging.Level.FINE, ("Style found is " + value)); if (value != null) { java.lang.String[] parts = value.split(";"); for (int k = (parts.length) - 1; k >= 0; k--) { java.lang.String subStyle = parts[k]; java.lang.String[] nameValue = subStyle.split(":"); if ((((nameValue.length) == 2) && ((nameValue[0]) != null)) && ((nameValue[1]) != null)) { if (com.android.assetstudiolib.vectordrawable.Svg2Vector.presentationMap.containsKey(nameValue[0])) { com.android.assetstudiolib.vectordrawable.Svg2Vector.fillPresentationAttributes(path, nameValue[0], nameValue[1]); } else if (nameValue[0].equals(com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_OPACITY)) { com.android.assetstudiolib.vectordrawable.Svg2Vector.fillPresentationAttributes(path, com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_FILL_OPACITY, nameValue[1]); } } } } }<END_MOD>
private boolean processArchive(java.io.File file) throws java.io.IOException { java.util.zip.ZipFile zip = new java.util.zip.ZipFile(file); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(40000); byte[] buf = new byte[20000]; boolean any = false; java.util.ArrayList<? extends java.util.zip.ZipEntry> entriesList = java.util.Collections.list(zip.entries()); if (sort) { java.util.Collections.sort(entriesList, new java.util.Comparator<java.util.zip.ZipEntry>() { public int compare(java.util.zip.ZipEntry a, java.util.zip.ZipEntry b) { return com.android.dx.cf.direct.ClassPathOpener.compareClassNames(a.getName(), b.getName()); } }); } consumer.onProcessArchiveStart(file); for (java.util.zip.ZipEntry one : entriesList) { <START_MOD>final boolean isDirectory = one.isDirectory(); java.lang.String path = one.getName(); <END_MOD>if (<START_MOD>filter.accept(<END_MOD>path<START_MOD>)) { final<END_MOD> byte[] bytes<START_MOD>; if (!isDirectory) { java.io.InputStream in = zip.getInputStream(one);<END_MOD> baos.<START_MOD>reset(); for (; ;) { int amt = in.read(buf); if (amt < 0) { break; } baos.write(buf, 0, amt); } in.close(); bytes = baos.<END_MOD>toByteArray(); <START_MOD>} else { bytes = new byte[0]; } <END_MOD>any |= consumer.processFileBytes(path, one.getTime(), bytes); } } zip.close(); return any; }
<START_MOD>@java.lang.Override public java.lang.String toString() { return (((((((("ApkInfo{" + "mPackageName='") + (mPackageName)) + '\'') + ", mVersionCode=") + (mVersionCode)) + ", mVersionName='") + (mVersionName)) + '\'') + '}'; }<END_MOD>
<START_MOD>@com.android.annotations.NonNull <END_MOD>private <START_MOD>com<END_MOD>.<START_MOD>android<END_MOD>.<START_MOD>manifmerger.IMergerLog.FileAndLine<END_MOD> <START_MOD>xmlFileAndLine<END_MOD>(<START_MOD>@com.android.annotations.NonNull <END_MOD>org.w3c.dom.Node node,<START_MOD> @com.android.annotations.Nullable<END_MOD> java.lang.String defaultName) { java.lang.String name = xmlFileName(node, defaultName); int line = com.android.manifmerger.XmlUtils.extractLineNumber(node); return <START_MOD>new com.android.manifmerger.IMergerLog.FileAndLine(<END_MOD>name<START_MOD>, line)<END_MOD>; }
public static native <START_MOD>int<END_MOD> EVP_MD_CTX_copy(long <START_MOD>dst_ctx, long src_ctx<END_MOD>);
@com.android.annotations.NonNull com.android.build.gradle.internal.ProductFlavorData<com.android.build.gradle.internal.dsl.<START_MOD>GradleProductFlavor<END_MOD>> getDefaultConfig();
<START_MOD>@org.junit.Test public void test004() throws java.lang.Exception { java.lang.String test = "com.android.jack.optimizations.valuepropagation.test004"; java.lang.String aType = "Lcom/android/jack/optimizations/valuepropagation/test004/A;"; com.android.jack.optimizations.valuepropagation.CompilationProperties properties = defaultProperties(); compileAndValidateTypes(test, properties, new com.android.jack.optimizations.valuepropagation.Validators().insert(aType, new com.android.jack.optimizations.valuepropagation.TypeMethodsValidator().insert("check()I", new com.android.jack.optimizations.valuepropagation.MethodDalvikCodeValidator(resource(test, "A.check.no-jls.dalvik"))))); properties = properties.withPreserveJls(true); compileAndValidateTypes(test, properties, new com.android.jack.optimizations.valuepropagation.Validators().insert(aType, new com.android.jack.optimizations.valuepropagation.TypeMethodsValidator().insert("check()I", new com.android.jack.optimizations.valuepropagation.MethodDalvikCodeValidator(resource(test, "A.check.jls.dalvik"))))); }<END_MOD>
boolean collectForceStopProviders(java.lang.String name, int appId, boolean doit, boolean evenPersistent, int userId, java.util.ArrayList<com.android.server.am.ContentProviderRecord> result) { boolean didSomething = <START_MOD>false; if (name != null) { didSomething = <END_MOD>collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, mSingletonByClass, result);<START_MOD> }<END_MOD> if ((!doit) && didSomething) { return true; } if (userId == (android.os.UserHandle.USER_ALL)) { for (int i = 0; i < (mProvidersByClassPerUser.size()); i++) { if (collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, mProvidersByClassPerUser.valueAt(i), result)) { if (!doit) { return true; } didSomething = true; } } } else { java.util.HashMap<android.content.ComponentName, com.android.server.am.ContentProviderRecord> items = getProvidersByClass(userId); if (items != null) { didSomething |= collectForceStopProvidersLocked(name, appId, doit, evenPersistent, userId, items, result); } } return didSomething; }
public void setSurfaceTexture(android.graphics.SurfaceTexture surfaceTexture) { if (surfaceTexture == null) { throw new java.lang.NullPointerException( must not be null } if ((mSurface) != null) { mSurface.release(); } mSurface = surfaceTexture; <START_MOD>if (((mViewFlags) & (VISIBILITY_MASK)) == (VISIBLE)) { mSurface.setOnFrameAvailableListener(mUpdateListener); } <END_MOD>mUpdateSurface = true; invalidateParentIfNeeded(); }
private void createPages() { mAvdManagerPage = new com.android.sdkuilib.internal.repository.AvdManagerPage(mPagesRootComposite, mUpdaterData); if ((java.lang.System.getenv(<START_MOD>"ANDROID_SDKMAN_EXP"<END_MOD>)) != null) { mPackagesPage = new com.android.sdkuilib.internal.repository.PackagesPage(mPagesRootComposite, mUpdaterData); } else { mLocalPackagePage = new com.android.sdkuilib.internal.repository.LocalPackagesPage(mPagesRootComposite, mUpdaterData); mRemotePackagesPage = new com.android.sdkuilib.internal.repository.RemotePackagesPage(mPagesRootComposite, mUpdaterData); } }
private void createApk(com.android.apkbuilder.internal.ApkBuilderImpl apkBuilder, java.lang.String <START_MOD>outputfilename<END_MOD>) throws com.android.apkbuilder.ApkBuilder.ApkCreationException, java.io.FileNotFoundException { java.<START_MOD>io.FileInputStream resoucePackageZipFile<END_MOD> = <START_MOD>new<END_MOD> java.io.FileInputStream<START_MOD>(new java.io.File(mOutFolder, mResourceFile)); mZipArchives.add(<END_MOD>resoucePackageZipFile<START_MOD>);<END_MOD> if (mSigned) { java.lang.System.out.println(java.lang.String.format( %s and signing it with a debug key... <START_MOD>outputfilename<END_MOD>)); } else { java.lang.System.out.println(java.lang.String.format( %s for release... <START_MOD>outputfilename<END_MOD>)); } <START_MOD>java.io.File f = new java.io.File(mOutFolder, outputfilename); apkBuilder.createPackage(f.getAbsoluteFile(), mZipArchives, mArchiveFiles, mJavaResources, mResourcesJars, mNativeLibraries); mZipArchives.remove(resoucePackageZipFile); <END_MOD>}
private void writeJavaMethodBody() throws java.io.IOException { if (<START_MOD>(<END_MOD>com.android.jill.frontend.java.AsmHelper.isInterface(currentClass<START_MOD>)) && (!(com.android.jill.frontend.java.AsmHelper.isStaticInit(currentMethod))<END_MOD>)) { throw new com.android.jill.JillException(((com.android.jill.frontend.java.AsmHelper.isStatic(currentMethod) ? "static" : "default") +   method into interface is not supported } sourceInfoWriter.writeDebugBegin(currentClass, startLine); writer.writeKeyword(Token.METHOD_BODY); writer.writeOpen(); writeLocals(); writeBody(); sourceInfoWriter.writeDebugEnd(currentClass, endLine); writer.writeClose(); }
public void <START_MOD>testGetNegativePrefix<END_MOD>() { java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setNegativePrefix("--"); assertTrue( negative prefix df.getNegativePrefix().equals("--")); }
void disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.pbap.BluetoothPbapService.BLUETOOTH_ADMIN_PERM,   BLUETOOTH_ADMIN permission synchronized(this) { <START_MOD>if (mPbapStateMachineMap.containsKey(device)) { mPbapStateMachineMap.get(device)<END_MOD>.sendMessage(PbapStateMachine.DISCONNECT); } }<START_MOD> }<END_MOD>
public void onUserSwitched(int userId) { mServiceCache.invalidateCache(userId); <START_MOD>mNfcFServicesCache.invalidateCache(userId); <END_MOD>mPreferredServices.onUserSwitched(userId); <START_MOD>mPreferredNfcFServices.onUserSwitched(userId); <END_MOD>}
<START_MOD>@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.SimpleTest2.class) @org.junit.Test public void testRunner_SimpleTest2_OneMethod() throws java.lang.Exception { java.lang.String[] args = new java.lang.String[]{ "testSimple2" }; vogar.target.TestRunner runner = testRunnerRule.createTestRunner(args); runner.run(); checkFilteredOutput().success("testSimple2").completedNormally(); }<END_MOD>
public void testIsSupported_And_ForName_NormalProvider() throws java.lang.Exception { <START_MOD>libcore.java.nio.charset.FakeCharsetProvider.setDelegate(new org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharsetProvider()); try { <END_MOD>assertTrue(java.nio.charset.Charset.isSupported("mockCharset10")); assertTrue(java.nio.charset.Charset.isSupported("MockCharset11")); assertTrue(java.nio.charset.Charset.isSupported("MockCharset12")); assertTrue(java.nio.charset.Charset.isSupported("MOCKCharset10")); assertTrue(java.nio.charset.Charset.isSupported("MOCKCharset11")); assertTrue(java.nio.charset.Charset.isSupported("MOCKCharset12")); assertTrue(((java.nio.charset.Charset.forName("mockCharset10")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName("mockCharset11")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName("mockCharset12")) instanceof org.apache.harmony.tests.java.nio.charset.CharsetTest.MockCharset)); assertTrue(((java.nio.charset.Charset.forName("mockCharset10")) == (org.apache.harmony.tests.java.nio.charset.CharsetTest.charset2))); java.nio.charset.Charset.forName("mockCharset11"); assertTrue(((java.nio.charset.Charset.forName("mockCharset12")) == (org.apache.harmony.tests.java.nio.charset.CharsetTest.charset2))); }<START_MOD> finally { libcore.java.nio.charset.FakeCharsetProvider.clearDelegate(); } }<END_MOD>
<START_MOD>private void checkAtan2piFloatFloat() { android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInX(inX); script.forEach_testAtan2piFloatFloat(inY, out); verifyResultsAtan2piFloatFloat(inY, inX, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAtan2piFloatFloat: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInX(inX); scriptRelaxed.forEach_testAtan2piFloatFloat(inY, out); verifyResultsAtan2piFloatFloat(inY, inX, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAtan2piFloatFloat: " + (e.toString()))); } }<END_MOD>
<START_MOD>private void checkIBusPresent() { if (SystemInfo.isLinux) { try { java.lang.Process proc = java.lang.Runtime.getRuntime().exec("ps -ef"); java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(proc.getInputStream())); try { for (java.lang.String line = reader.readLine(); line != null; line = reader.readLine()) { if (line.contains("ibus-daemon")) { notifyUnsupported("unsupported.ibus.message"); break; } } } finally { reader.close(); } } catch (java.io.IOException ex) { } } }<END_MOD>
<START_MOD>@com.android.annotations.NonNull public org.eclipse.swt.graphics.Image getWarningIcon(@com.android.annotations.NonNull org.eclipse.swt.graphics.Image image) { if ((mWarningIcons) != null) { org.eclipse.swt.graphics.Image combined = mWarningIcons.get(image); if (combined != null) { return combined; } } else { mWarningIcons = com.google.common.collect.Maps.newHashMap(); } org.eclipse.swt.graphics.Image combined = new com.android.ide.eclipse.adt.internal.editors.ui.ErrorImageComposite(image, true).createImage(); mWarningIcons.put(image, combined); return combined; }<END_MOD>
public void runTest() { if (mUseIntrinsic) { mIntrinsic.forEach<START_MOD>(mOutPixelsAllocation); } else if (mUseHalfPrecision) { mScript.forEach_copyIn_half(mInPixelsAllocation, mScratchPixelsAllocation1); mScript.forEach_horz_half(mScratchPixelsAllocation2); mScript.forEach_vert_half<END_MOD>(mOutPixelsAllocation); } else { mScript.forEach_copyIn(mInPixelsAllocation, mScratchPixelsAllocation1); mScript.forEach_horz(mScratchPixelsAllocation2); mScript.forEach_vert(mOutPixelsAllocation); } }
static java.lang.Object newInstance() { try { java.lang.Class c = LocalClass3.CC.class; return c.newInstance(); } catch (java.lang.Exception ex) { ex.printStackTrace(<START_MOD>java.lang.System.out<END_MOD>); return null; } }
<START_MOD>@java.lang.Override protected void resetEditorFrom(com.google.gct.idea.debugger.CloudDebugRunConfiguration s) { }<END_MOD>
@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = new android.net.IpSecConfig(); addDefaultSpisAndRemoteAddrToIpSecConfig(ipSecConfig); addAuthAndCryptToIpSecConfig(ipSecConfig); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_OUT<START_MOD>), anyInt(), anyInt(<END_MOD>), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceParameterizedTest.TEST_SPI_IN), <START_MOD>anyInt(), anyInt(), <END_MOD>eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceParameterizedTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceParameterizedTest.CRYPT_KEY), anyInt(), eq(""), eq(new byte[]{ }), eq(0), anyInt(), anyInt(), anyInt()); }
public void testDeregistration() throws java.lang.Exception { android.telephony.embms.cts.<START_MOD>MbmsDownloadCallbackTest<END_MOD>.TestDSCallback <START_MOD>statusCallback<END_MOD> = new android.telephony.embms.cts.<START_MOD>MbmsDownloadCallbackTest<END_MOD>.TestDSCallback(<START_MOD>); android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback progressCallback = new android.telephony.embms.cts.MbmsDownloadCallbackTest.TestDPCallback(); <END_MOD>android.telephony.mbms.DownloadRequest request = downloadRequestTemplate.build(); mDownloadSession.<START_MOD>registerProgressListener<END_MOD>(request, mCallbackExecutor, <START_MOD>progressCallback); mDownloadSession.registerStatusListener(request, mCallbackExecutor, statusCallback); mDownloadSession.unregisterProgressListener(request, progressCallback); mDownloadSession.unregisterStatusListener(request, statusCallback<END_MOD>); mMiddlewareControl.fireOnStateUpdated(null, null, 0); assertNull(<START_MOD>statusCallback<END_MOD>.waitOnStateUpdated(android.telephony.embms.cts.<START_MOD>MbmsDownloadCallbackTest<END_MOD>.SHORT_TIMEOUT)); mMiddlewareControl.fireOnProgressUpdated(null, null, 0, 0, 0, 0); assertNull(<START_MOD>progressCallback<END_MOD>.waitOnProgressUpdated(android.telephony.embms.cts.<START_MOD>MbmsDownloadCallbackTest<END_MOD>.SHORT_TIMEOUT)); }
<START_MOD>@java.lang.Override public synchronized void onTcpSocketStatsEvent(int[] networkIds, int[] packetSentCounters, int[] packetLostCounters) { if (((networkIds.length) != (packetSentCounters.length)) || ((networkIds.length) != (packetLostCounters.length))) { android.util.Log.e(com.android.server.connectivity.NetdEventListenerService.TAG, "Invalid data FIXME"); return; } long timestamp = java.lang.System.currentTimeMillis(); for (int i = 0; i < (networkIds.length); i++) { int netId = networkIds[i]; int sent = packetSentCounters[i]; int lost = packetLostCounters[i]; getMetricsForNetwork(timestamp, netId).addTcpStatsResult(sent, lost); } if (com.android.server.connectivity.NetdEventListenerService.DBG) { java.util.StringJoiner j = new java.util.StringJoiner(", "); for (int i = 0; i < (networkIds.length); i++) { int netId = networkIds[i]; int sent = packetSentCounters[i]; int lost = packetLostCounters[i]; j.add(java.lang.String.format("{netId=%d, sent=%d, lost=%d}", netId, sent, lost)); } android.util.Log.d(com.android.server.connectivity.NetdEventListenerService.TAG, ("TcpSocketStatsEvent: " + (j.toString()))); } }<END_MOD>
<START_MOD>@java.lang.Override public void setSmsListener(android.telephony.ims.internal.aidl.IImsSmsListener l) throws android.os.RemoteException { synchronized(mLock) { this.setSmsListener(l); } }<END_MOD>
private android.database.Cursor queryCarrierIdForCurrentSubscription(android.net.Uri uri, java.lang.String[] projectionIn) { int subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); if (!(android.text.TextUtils.isEmpty(uri.getLastPathSegment()))) { try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException(( subid in provided uri + uri)); } } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (   + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(mCurrentSubscriptionMap.containsKey(subId))) { return new android.database.MatrixCursor(projectionIn, 0); } final android.database.MatrixCursor c = new android.database.MatrixCursor(projectionIn, 1); final android.database.MatrixCursor.RowBuilder row = c.newRow(); for (int i = 0; i < (c.getColumnCount()); i++) { final java.lang.String columnName = c.getColumnName(i); if (<START_MOD>CarrierId.CARRIER_ID<END_MOD>.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).first); } else if (<START_MOD>CarrierId<END_MOD>.NAME.equals(columnName)) { row.add(mCurrentSubscriptionMap.get(subId).second); } else { throw new java.lang.IllegalArgumentException(( column   + (projectionIn[i]))); } } return c; }
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) throws java.lang.Exception { if ((((method.getEnclosingType().isExternal()) || (method.isNative())) || (method.isAbstract())) || (!(filter.accept(this.getClass(), method)))) { return; } com.android.jack.cfg.ControlFlowGraph cfg = method.getMarker(com.android.jack.cfg.ControlFlowGraph.class); assert cfg != null; for (<START_MOD>int i = 0, len = cfg.getNodesCount(); i < len; ++i<END_MOD>) { <START_MOD>cfg.getNode(i)<END_MOD>.removeMarker(com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker.class); } }
<START_MOD>public static java.util.Collection<java.lang.Object[]> getNinePatches() { java.io.File pngFolder = getPngFolder(); java.io.File ninePatchFolder = new java.io.File(pngFolder, "ninepatch"); java.io.File[] files = ninePatchFolder.listFiles(new java.io.FileFilter() { @java.lang.Override public boolean accept(java.io.File file) { return file.getPath().endsWith(SdkConstants.DOT_9PNG); } }); if (files != null) { com.google.common.collect.ImmutableList.Builder<java.lang.Object[]> params = com.google.common.collect.ImmutableList.builder(); for (java.io.File file : files) { params.add(new java.lang.Object[]{ file, file.getName() }); } return params.build(); } return com.google.common.collect.ImmutableList.of(); }<END_MOD>
<START_MOD>@java.lang.Override public boolean onTouch(android.view.View v, android.view.MotionEvent event) { if ((mSnakeView.getGameState()) == (SnakeView.RUNNING)) { float x = (event.getX()) / (v.getWidth()); float y = (event.getY()) / (v.getHeight()); short direction = 0; direction |= (x > y) ? 1 : 0; direction |= (x > (1 - y)) ? 2 : 0; mSnakeView.moveSnake(direction); } else { mSnakeView.moveSnake(com.example.android.snake.Snake.MOVE_UP); } return false; }<END_MOD>
private void readHeader() throws java.io.IOException { mType = readHalf(getHeaderOffset(android.<START_MOD>os<END_MOD>.cts.ReadElf.OFFSET_TYPE)); final long shOffset = readWord(getHeaderOffset(android.<START_MOD>os<END_MOD>.cts.ReadElf.OFFSET_SHOFF)); final int shNumber = readHalf(getHeaderOffset(android.<START_MOD>os<END_MOD>.cts.ReadElf.OFFSET_SHNUM)); final int shSize = readHalf(getHeaderOffset(android.<START_MOD>os<END_MOD>.cts.ReadElf.OFFSET_SHENTSIZE)); final int shStrIndex = readHalf(getHeaderOffset(android.<START_MOD>os<END_MOD>.cts.ReadElf.OFFSET_SHSTRNDX)); readSectionHeaders(shOffset, shNumber, shSize, shStrIndex); final long phOffset = readWord(getHeaderOffset(android.<START_MOD>os<END_MOD>.cts.ReadElf.OFFSET_PHOFF)); final int phNumber = readHalf(getHeaderOffset(android.<START_MOD>os<END_MOD>.cts.ReadElf.OFFSET_PHNUM)); final int phSize = readHalf(getHeaderOffset(android.<START_MOD>os<END_MOD>.cts.ReadElf.OFFSET_PHENTSIZE)); readProgramHeaders(phOffset, phNumber, phSize); }
<START_MOD>@org.junit.Test public void validatePolicyWithoutServerUri() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Policy policy = android.net.wifi.hotspot2.pps.PolicyTest.createPolicy(); byte[] rawUriBytes = new byte[(android.net.wifi.hotspot2.pps.PolicyTest.MAX_URI_BYTES) + 1]; policy.policyServerUri = new java.lang.String(rawUriBytes, java.nio.charset.StandardCharsets.UTF_8); assertFalse(policy.validate()); }<END_MOD>
<START_MOD>@java.lang.Override public void check(@javax.annotation.Nonnull javax.lang.model.element.Element element, @javax.annotation.Nonnull javax.annotation.processing.ProcessingEnvironment env) { boolean noKeyId = true; javax.lang.model.type.TypeMirror keyIdType = env.getTypeUtils().erasure(env.getElementUtils().getTypeElement(com.android.sched.util.config.id.KeyId.class.getCanonicalName()).asType()); if (keyIdType == null) { env.getMessager().printMessage(javax.tools.Diagnostic.Kind.ERROR, (("Can not get element type '" + (com.android.sched.util.config.id.PropertyId.class.getCanonicalName())) + "'")); return; } for (javax.lang.model.element.Element enclosedElement : element.getEnclosedElements()) { if (((enclosedElement.getKind()) == (javax.lang.model.element.ElementKind.FIELD)) && (env.getTypeUtils().isSubtype(env.getTypeUtils().erasure(enclosedElement.asType()), keyIdType))) { noKeyId = false; if (!(enclosedElement.getModifiers().contains(javax.lang.model.element.Modifier.STATIC))) { env.getMessager().printMessage(javax.tools.Diagnostic.Kind.WARNING, "KeyId should be declared static", enclosedElement); } if (!(enclosedElement.getModifiers().contains(javax.lang.model.element.Modifier.FINAL))) { env.getMessager().printMessage(javax.tools.Diagnostic.Kind.ERROR, "KeyId must be declared final", enclosedElement); } } } if (noKeyId) { env.getMessager().printMessage(javax.tools.Diagnostic.Kind.ERROR, "Type does not contains KeyId", element); } }<END_MOD>
<START_MOD>private void updateDocLabels() { java.lang.String docUrl = ((java.lang.String) (myWizardState.get("docUrl"))); com.android.tools.idea.templates.TemplateMetadata metadata = myWizardState.getTemplateMetadata(); java.lang.String title = (metadata != null) ? metadata.getTitle() : null; if ((docUrl != null) && (title != null)) { myDocPanel.setVisible(true); myDocLabel.setHyperlinkText("Check the ", (("\"" + title) + "\" documentation"), ""); myDocLabel.setHyperlinkTarget(docUrl); } else { myDocPanel.setVisible(false); } }<END_MOD>
<START_MOD>protected void onTestRunnerCreated() { }<END_MOD>
public void testScrollTo() throws java.lang.Throwable { final android.widget.TextView tv = new android.text.method.cts.TextViewNoIme(mActivity); tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 10); runTestOnUiThread(new java.lang.Runnable() { public void run() { mActivity.setContentView(tv); tv.setSingleLine(true); tv.setLines(2); } }); getInstrumentation().waitForIdleSync(); android.text.TextPaint paint = tv.getPaint(); final android.text.Layout layout = tv.getLayout(); <START_MOD>final java.lang.StringBuilder longEnoughText = new java.lang.StringBuilder(android.text.method.cts.TouchTest.LONG_TEXT); while ((getTextWidth(longEnoughText, paint)) <= (tv.getWidth())) { longEnoughText.append(android.text.method.cts.TouchTest.LONG_TEXT); } <END_MOD>runTestOnUiThread(new java.lang.Runnable() { public void run() { tv.setText(<START_MOD>longEnoughText); } }); getInstrumentation().waitForIdleSync(); final int width = getTextWidth(longEnoughText, paint); runTestOnUiThread(new java.lang.Runnable() { public void run() { <END_MOD>android.text.method.<START_MOD>Touch.scrollTo(tv, layout, ((width - (tv.getWidth())) - 1), 0<END_MOD>); } }); getInstrumentation().waitForIdleSync(); <START_MOD>assertEquals(((<END_MOD>width <START_MOD>- (tv.getWidth())) - 1), tv.getScrollX()); assertEquals(0, tv.getScrollY()); runTestOnUiThread(new java.lang.Runnable() { public void run() { <END_MOD>android.text.method.<START_MOD>Touch.scrollTo(tv, layout, (width + 100), 5); } }); getInstrumentation().waitForIdleSync(); assertEquals((width - (tv.getWidth())), tv.getScrollX(), 1.0F); assertEquals(5, tv.getScrollY()<END_MOD>); runTestOnUiThread(new java.lang.Runnable() { public void run() { android.text.method.Touch.scrollTo(tv, layout, (width - <START_MOD>10), 5); } }); getInstrumentation().waitForIdleSync(); assertEquals((width - <END_MOD>(tv.getWidth()))<START_MOD>, tv.getScrollX(), 1.0F<END_MOD>); assertEquals(<START_MOD>5<END_MOD>, tv.getScrollY()); <START_MOD>}<END_MOD>
@org.junit.Before public void setUp() throws java.lang.Exception { <START_MOD>org.mockito.MockitoAnnotations.initMocks(this); com.android.bluetooth.TestUtils.setAdapterService(mAdapterService); <END_MOD>mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03:04:05"); mHandlerThread = new android.os.HandlerThread("PbapTestHandlerThread"); mHandlerThread.start(); mHandler = new android.os.Handler(mHandlerThread.getLooper()); mBluetoothPbapService = mock(com.android.bluetooth.pbap.BluetoothPbapService.class); doNothing().when(mBluetoothPbapService).checkOrGetPhonebookPermission(any()); mPbapStateMachine = com.android.bluetooth.pbap.PbapStateMachine.make(mBluetoothPbapService, mHandlerThread.getLooper(), mTestDevice, mSocket, mBluetoothPbapService, mHandler, com.android.bluetooth.pbap.<START_MOD>PbapStateMachineTest<END_MOD>.TEST_NOTIFICATION_ID); }
<START_MOD>public void testPlainValues() throws java.lang.Exception { assertEquals(("strings.xml:10: Warning: \"throught\" looks like a misspelling; did you mean \"thought\" or \"through\" or \"throughout\"?\n" + (((("strings.xml:12: Warning: \"Seach\" looks like a misspelling; did you mean \"Search\"?\n" + "strings.xml:16: Warning: \"Tuscon\" looks like a misspelling; did you mean \"Tucson\"?\n") + "strings.xml:6: Warning: \"Andriod\" looks like a misspelling; did you mean \"Android\"?\n") + "strings.xml:6: Warning: \"activites\" looks like a misspelling; did you mean \"activities\"?\n") + "strings.xml:8: Warning: \"Cmoputer\" looks like a misspelling; did you mean \"Computer\"?")), lintProject("res/values/typos.xml=>res/values/strings.xml")); }<END_MOD>
public void preDexLibrary(@com.android.annotations.NonNull java.io.File inputFile, @com.android.annotations.NonNull java.io.File outFile, @com.android.annotations.NonNull com.android.builder.DexOptions dexOptions) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { checkNotNull(inputFile,   cannot be null. checkNotNull(outFile,   cannot be null. checkNotNull(dexOptions,   cannot be null.<START_MOD> com.android.sdklib.BuildToolInfo buildToolInfo = mTargetInfo.getBuildTools();<END_MOD> java.util.ArrayList<java.lang.String> command = com.google.common.collect.Lists.newArrayList(); java.lang.String dx = <START_MOD>buildToolInfo<END_MOD>.getPath(BuildToolInfo.PathId.DX); if ((dx == null) || (!(new java.io.File(dx).isFile()))) { throw new java.lang.IllegalStateException( is missing } command.add(dx); if ((dexOptions.getJavaMaxHeapSize()) != null) { command.add(("-JXmx" + (dexOptions.getJavaMaxHeapSize()))); } command.add("--dex"); if (mVerboseExec) { command.add("--verbose"); } if (dexOptions.getJumboMode()) { command.add("--force-jumbo"); } command.add("--output"); command.add(outFile.getAbsolutePath()); command.add(inputFile.getAbsolutePath()); mCmdLineRunner.runCmdLine(command, null); }
<START_MOD>@java.lang.Override public int compare(com.android.ahat.AhatSnapshot.NativeAllocation a, com.android.ahat.AhatSnapshot.NativeAllocation b) { return java.lang.Long.compare(b.size, a.size); }<END_MOD>
<START_MOD>public static java.net.InetAddress[] blockingResolveAllLocally(android.net.Network network, java.lang.String name) throws java.net.UnknownHostException { final android.system.StructAddrinfo hints = new android.system.StructAddrinfo(); hints.ai_flags = 0; hints.ai_family = android.system.OsConstants.AF_UNSPEC; hints.ai_socktype = android.system.OsConstants.SOCK_DGRAM; final android.net.Network networkForResolv = android.net.dns.ResolvUtil.getNetworkWithUseLocalNameserversFlag(network); try { return Libcore.os.android_getaddrinfo(name, hints, ((int) (networkForResolv.netId))); } catch (android.system.GaiException gai) { gai.rethrowAsUnknownHostException("TLS-bypass resolution failed"); return null; } }<END_MOD>
@java.lang.Override @javax.annotation.Nonnull public javax.lang.model.type.TypeMirror getTypeMirror() throws com.android.sched.build.SchedAnnotationProcessor.AbortException { <START_MOD>javax.annotation.processing.ProcessingEnvironment localEnv =<END_MOD> com.android.sched.build.SchedAnnotationProcessor.Items.env<START_MOD>; assert localEnv != null; return localEnv<END_MOD>.getTypeUtils().getDeclaredType(getTypeElement(), <START_MOD>localEnv<END_MOD>.getTypeUtils().getWildcardType(null, null)); }
<START_MOD>@java.lang.Override protected void engineInitVerify(java.security.PublicKey publicKey) throws java.security.InvalidKeyException { java.lang.System.out.println("yay got it"); }<END_MOD>
private static void addFileWithFootersToDropBox(android.os.DropBoxManager db, java.util.HashMap<java.lang.String, java.lang.Long> timestamps, java.lang.String headers, java.lang.String footers, java.lang.String filename, int maxSize, java.lang.String tag) throws java.io.IOException { if ((db == null) || (!(db.isTagEnabled(tag)))) return; java.io.File file = new java.io.File(filename); long fileTime = file.lastModified(); if (fileTime <= 0) return; if ((timestamps.containsKey(filename)) && ((timestamps.get(filename)) == fileTime)) { return; } timestamps.put(filename, fileTime); android.util.Slog.i(com.android.server.BootReceiver.TAG, ((((   + filename) +   to DropBox ( + tag) + ")")); db.addText(tag, ((headers + (android.os.FileUtils.readTextFile(file, maxSize, "[[TRUNCATED]]\n"))) + footers)); <START_MOD>android.util.Slog.i(com.android.server.BootReceiver.TAG, java.lang.String.format( to Dropbox: filename=%s, maxSize=%d, tag=%s filename, maxSize, tag)); <END_MOD>}
<START_MOD>@javax.annotation.Nonnull public static final java.io.File getJackRootDir() { return com.android.jack.test.TestingEnvironment.JACK_ROOT_DIR; }<END_MOD>
<START_MOD>public void run() { while (!(guard2.get())); Main.load(); Main.expectEquals64((-987654321L), m.l); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String getJavaSourceCompatibility() { return myJavaSourceCompatibility; }<END_MOD>
public void testAesCbcHmacSha384Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth<START_MOD>, false<END_MOD>); }
protected boolean supportsMultiWindowMode() <START_MOD>{ if (!(mConfigLoaded)) { try { executeShellCommand((( start -n   + "android.server.app/.") + (SUPPORT_OBSERVER))); waitForResume("android.server.app", <END_MOD>android.<START_MOD>server.cts.SUPPORT_OBSERVER); java.util.Map map = getLogResults(android.server.cts.SUPPORT_OBSERVER); java.lang.String value = ((java.lang.String) (map.get(RESULT_KEY_HEAD))); if ((value != null) && (value.equals("OK"))) { mConfigLoaded = true; mSupportMultiWindow = !(map.get("config_supportsMultiWindow").equals("false")); } executeShellCommand(android.server.cts.ActivityManagerTestBase.AM_FORCE_STOP_TEST_PACKAGE); clearLogs(); } catch (java.lang.Exception e) { e.printStackTrace(); } }<END_MOD> return <START_MOD>mSupportMultiWindow; }<END_MOD>
private android.app.PendingIntent createTelecomPendingIntent(java.lang.String action, android.net.Uri data, android.os.UserHandle userHandle) { android.content.Intent intent = new android.content.Intent(action, data, mContext, com.android.server.telecom.components.TelecomBroadcastReceiver.class); intent.putExtra(TelecomBroadcastIntentProcessor.EXTRA_USERHANDLE, userHandle); return android.app.PendingIntent.getBroadcast(mContext, 0, intent, <START_MOD>PendingIntent.FLAG_UPDATE_CURRENT<END_MOD>); }
@java.lang.Override public void queryCallBarring(int cbType, android.os.Message result) { <START_MOD>queryCallBarring(cbType,<END_MOD> com.android.ims.ImsUt.<START_MOD>SERVICE_CLASS_NONE<END_MOD>, result); }
public native <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.StructLinger getsockoptLinger(java.io.FileDescriptor fd, int level, int option) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
<START_MOD>public java.lang.reflect.Type[] getGenericExceptionTypes() { throw new java.lang.UnsupportedOperationException("Not implemented on Android."); }<END_MOD>
<START_MOD>@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.LongTest.class, timeout = 1) @org.junit.Test public void testRunner_LongTest_WithTimeout() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().failure("test", "java.util.concurrent.TimeoutException\n").aborted(); }<END_MOD>
@java.lang.Override public java.lang.String installRemotePackage(java.lang.String remoteFilePath, boolean reinstall, java.lang.String... extraArgs) throws com.android.ddmlib.InstallException { try { com.android.ddmlib.Device.InstallReceiver receiver = new com.android.ddmlib.Device.InstallReceiver(); java.lang.StringBuilder optionString = new java.lang.StringBuilder(); if (reinstall) { optionString.append(   } if (extraArgs != null) { optionString.append(com.google.common.base.Joiner.on(   } java.lang.String cmd = java.lang.String.format( install %1$s   optionString.toString(), remoteFilePath); executeShellCommand(cmd, receiver, com.android.ddmlib.Device.INSTALL_TIMEOUT_MINUTES, java.util.concurrent.TimeUnit.MINUTES); return receiver.getErrorMessage(); } catch (com.android.ddmlib.TimeoutException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.AdbCommandRejectedException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { throw new com.android.ddmlib.InstallException(e); } catch (java.io.IOException e) { throw new com.android.ddmlib.InstallException(e); } <START_MOD>catch (java.lang.InterruptedException e) { throw new com.android.ddmlib.InstallException(e); } }<END_MOD>
<START_MOD>private void replaceEventList(int slotId) { if ((mStkContext[slotId].mSetupEventListSettings) != null) { for (int current : mStkContext[slotId].mSetupEventListSettings.eventList) { if (current != (com.android.stk.StkAppService.INVALID_SETUP_EVENT)) { if (((mStkContext[slotId].mCurrentCmd.getSetEventList()) == null) || (!(findEvent(current, mStkContext[slotId].mCurrentCmd.getSetEventList().eventList)))) { if (isUnregisterableEvent(current, slotId)) { unregisterEvent(current, slotId); } } } } } mStkContext[slotId].mSetupEventListSettings = mStkContext[slotId].mCurrentCmd.getSetEventList(); mStkContext[slotId].mCurrentSetupEventCmd = mStkContext[slotId].mCurrentCmd; mStkContext[slotId].mCurrentCmd = mStkContext[slotId].mMainCmd; registerEvents(slotId); }<END_MOD>
static void field(@javax.annotation.Nonnull com.android.jack.shrob.spec.ClassSpecification classSpec, @javax.annotation.CheckForNull com.android.jack.shrob.spec.AnnotationSpecification annotationType, @javax.annotation.CheckForNull java.lang.String typeSig, java.lang.String name, @javax.annotation.Nonnull com.android.jack.shrob.spec.ModifierSpecification modifier) { assert name != null; com.android.jack.shrob.spec.NameSpecification typeSignature = null; if (typeSig != null) { typeSignature = com.android.jack.shrob.proguard.GrammarActions.name(typeSig<START_MOD>, com.android.jack.shrob.proguard.GrammarActions.NameFormat.CLASS<END_MOD>); } else { assert name.equals("*"); } classSpec.add(new com.android.jack.shrob.spec.FieldSpecification(com.android.jack.shrob.proguard.GrammarActions.name(name<START_MOD>, com.android.jack.shrob.proguard.GrammarActions.NameFormat.NONE<END_MOD>), modifier, typeSignature, annotationType)); }
<START_MOD>public void vpnPrepareAndEstablish() { android.os.ParcelFileDescriptor descriptor = null; android.content.Intent newIntent = android.net.VpnService.prepare(this); if (newIntent != null) { try { descriptor = vpnService.new android.net.VpnService.Builder().addAddress("8.8.8.8", 30).establish(); } finally { try { descriptor.close(); populateInfo(R.string.device_owner_vpn_connection); } catch (java.lang.Exception e) { populateInfo(R.string.device_owner_no_vpn_connection); } } } else { populateInfo(R.string.device_owner_no_vpn_connection); } }<END_MOD>
public void run() { android.<START_MOD>renderscript<END_MOD>.Allocation A; android.<START_MOD>renderscript<END_MOD>.RenderScript pRS = android.<START_MOD>renderscript<END_MOD>.RenderScript.create(mCtx); pRS.setMessageHandler(mRsMessage); com.android.rs.test.ScriptC_fp16 s = new com.android.rs.test.ScriptC_fp16(pRS); for (int nDims = 1; nDims <= 3; nDims++) { TestHalf(pRS, s, nDims); TestHalf2(pRS, s, nDims); TestHalf3(pRS, s, nDims); TestHalf4(pRS, s, nDims); } s.invoke_fp16_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }
<START_MOD>private void updateMinuteControl() { if (is24HourView()) { if ((mMinuteSpinnerInput) != null) { mMinuteSpinnerInput.setImeOptions(EditorInfo.IME_ACTION_DONE); } } else { if ((mMinuteSpinnerInput) != null) { mMinuteSpinnerInput.setImeOptions(EditorInfo.IME_ACTION_NEXT); } } }<END_MOD>
private void dumpToDir(com.android.sched.vfs.VDir srcRootDir, com.android.sched.vfs.VDir destRootDir) throws com.android.sched.util.file.<START_MOD>CannotCloseException, com.android.sched.util.file.<END_MOD>CannotCloseInputException, com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotReadException, com.android.sched.util.file.CannotWriteException, com.android.sched.util.file.WrongPermissionException { for (com.android.sched.vfs.VElement element : srcRootDir.list()) { java.lang.String elementName = element.getName(); if (element.isVDir()) { com.android.sched.vfs.VDir dir = destRootDir.createVDir(elementName); dumpToDir(((com.android.sched.vfs.VDir) (element)), dir); } else { com.android.sched.vfs.VFile file = destRootDir.createVFile(elementName); try (java.io.InputStream is = ((com.android.sched.vfs.VFile) (element)).getInputStream()) { try (java.io.OutputStream os = file.getOutputStream()) { new com.android.sched.util.stream.LocationByteStreamSucker(is, os, element, file).suck(); } catch (java.io.IOException e) { throw new com.android.sched.util.file.<START_MOD>CannotCloseException<END_MOD>(file, e); } } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotCloseInputException(element, e); } } } }
<START_MOD>private void onRefresh(boolean b) { }<END_MOD>
public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.<START_MOD>getKey(256)<END_MOD>); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, <START_MOD>android.net.cts.IpSecManagerTest.getKey<END_MOD>(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth<START_MOD>, null<END_MOD>, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, <START_MOD>null, <END_MOD>false, 1, true); }
@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech private int getConnectionType() { synchronized(mLock) { return mConnectionType; } }
public boolean supportsParameter(java.lang.Object parameter) { <START_MOD>java.lang.Boolean supportsParameter = java.security.Provider.Service.sSupportsParameter.get(type); if (supportsParameter == null) { <END_MOD>return true; }<START_MOD> if (!supportsParameter) { throw new java.security.InvalidParameterException(( use a parameter with   + (type))); } if ((parameter != null) && (!(parameter instanceof java.security.Key))) { throw new java.security.InvalidParameterException( should be of type Key } ensureSupportedKeysInitialized(); if (((keyClasses) == null) && ((keyFormats) == null)) { return true; } java.security.Key keyParam = ((java.security.Key) (parameter)); if (((keyClasses) != null) && (isInList(keyClasses, keyParam.getClass()))) { return true; } if (((keyFormats) != null) && (isInList(keyFormats, keyParam.getFormat()))) { return true; } return false; }<END_MOD>
<START_MOD>public void deflectCall(java.lang.String callId, java.lang.String deflectNumber) { try { mAdapter.deflectCall(callId, deflectNumber); } catch (android.os.RemoteException e) { } }<END_MOD>
<START_MOD>public void addData(java.util.List<com.android.builder.internal.incremental.DependencyData> dataList) { mDataList.addAll(dataList); }<END_MOD>
public <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.StructTimeval getsockoptTimeval(java.io.FileDescriptor fd, int level, int option) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { return os.getsockoptTimeval(fd, level, option); }
@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClass create(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader loader<START_MOD>, @javax.annotation.Nonnull com.android.jack.jayce.v0002.io.JayceInternalReaderImpl in) throws java.io.IOException<END_MOD> { <START_MOD>modifiers = in.readInt(); signature = in.readId(); <END_MOD>assert (signature) != null; java.lang.String binaryName = com.android.jack.util.NamingTools.getClassBinaryNameFromDescriptor(signature); java.lang.String simpleName = com.android.jack.util.NamingTools.getSimpleClassNameFromBinaryName(binaryName); com.android.jack.ir.<START_MOD>ast.JDefinedClass jClassType = new com.android.jack.ir.ast.JDefinedClass(com.android.jack.ir.<END_MOD>sourceinfo.SourceInfo<START_MOD>.UNKNOWN, simpleName, modifiers, enclosingPackage, <END_MOD>loader<START_MOD>); return<END_MOD> jClassType; }
<START_MOD>public void test_parseSerializedExtensions() { java.util.Map<java.lang.Character, java.lang.String> extensions = new java.util.HashMap<java.lang.Character, java.lang.String>(); java.util.Locale.parseSerializedExtensions("x-foo", extensions); assertEquals("foo", extensions.get('x')); extensions.clear(); java.util.Locale.parseSerializedExtensions("x-foo-y-bar-z-baz", extensions); assertEquals("foo", extensions.get('x')); assertEquals("bar", extensions.get('y')); assertEquals("baz", extensions.get('z')); extensions.clear(); java.util.Locale.parseSerializedExtensions("x-fooo-baar-baaz", extensions); assertEquals("fooo-baar-baaz", extensions.get('x')); extensions.clear(); java.util.Locale.parseSerializedExtensions("x-fooo-baar-baaz-y-gaaa-caar-caaz", extensions); assertEquals("fooo-baar-baaz", extensions.get('x')); assertEquals("gaaa-caar-caaz", extensions.get('y')); }<END_MOD>
@java.lang.Override public void srcToExe(@javax.annotation.Nonnull java.io.File out, boolean zipFile, @javax.annotation.Nonnull java.io.File... sources) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); srcToCommon(args, sources); if (zipFile) { args.add("--output-dex-zip"); } else { args.add("--output-dex"); } args.add(out.getAbsolutePath()); args.addAll(extraJackArgs); if (withDebugInfos) { args.add("-g"); } com.android.jack.test.toolchain.AbstractTestTools.addFile(args, false, sources); com.android.jack.<START_MOD>test.<END_MOD>util.ExecuteFile exec = new com.android.jack<START_MOD>.test<END_MOD>.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(outRedirectStream); exec.setOut(errRedirectStream); exec.setVerbose(isVerbose); <START_MOD>try { <END_MOD>if ((exec.run())<START_MOD> != 0<END_MOD>) { throw new java.lang.RuntimeException( compiler exited with an error } }<START_MOD> catch (com.android.jack.test.util.ExecFileException e) { throw new java.lang.RuntimeException( error occured while running Jack e); } }<END_MOD>
<START_MOD>public<END_MOD> void queryFdn() { int serviceClassX; serviceClassX = ((com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_VOICE) + (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_DATA)) + (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_FAX); mCi.queryFacilityLockForApp(CommandsInterface.CB_FACILITY_BA_FD, "", serviceClassX, mAid, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCardApplication.EVENT_QUERY_FACILITY_FDN_DONE)); }
@java.lang.Override public void deleteSmsOnSim(int index, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_DELETE_SMS_ON_SIM, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGV) { riljLog((((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) +   index =   + index)); } try { radioProxy.deleteSmsOnSim(rr.mSerial, index); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "deleteSmsOnSim", e); } } }
public void pauseScan() { android.hardware.wifi.V1_0.WifiStatus status; kilroy(); synchronized(com.android.server.wifi.WifiVendorHal.sLock) { try { if ((mIWifiStaIface) == null) return; if (((mScan) != null) && (!(mScan.paused))) { status = mIWifiStaIface.stopBackgroundScan(mScan.cmdId); if (<START_MOD>!(ok<END_MOD>(status))) return; kilroy(); mScan.paused = true; } } catch (android.os.RemoteException e) { handleRemoteException(e); } } }
public void deactivateDataCall(int cid, <START_MOD>@android.telephony.data.DataService.RequestReason<END_MOD> <START_MOD>int<END_MOD> <START_MOD>reason<END_MOD>, android.telephony.data.DataServiceCallback callback) { callback.onDeactivateDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED); }
<START_MOD>@org.junit.Test public void testInitState() throws java.lang.Exception { org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHidDeviceService.getConnectionState(mTestDevice)); byte[] testDevice = new byte[]{ 16, 17, 18, 19, 20, 21 }; mHidDeviceService.onApplicationStateChangedFromNative(testDevice, true); mHidDeviceService.onConnectStateChangedFromNative(testDevice, 0); }<END_MOD>
<START_MOD>@org.junit.Test public void testBroadcastRefresh() { android.os.Message msg = new android.os.Message(); msg.what = ((java.lang.Integer) (getStaticField(com.android.internal.telephony.uicc.IsimUiccRecords.class, mIsimUiccRecords, "EVENT_ISIM_REFRESH"))); mIsimUiccRecords.handleMessage(msg); org.mockito.ArgumentCaptor<android.content.Intent> intentCapture = org.mockito.ArgumentCaptor.forClass(android.content.Intent.class); verify(mContext).sendBroadcast(intentCapture.capture()); assertEquals(((android.content.Intent) (intentCapture.getValue())).getAction(), IsimUiccRecords.INTENT_ISIM_REFRESH); }<END_MOD>
<START_MOD>private static void checkThrowsParserException(java.lang.String xml) throws java.lang.Exception { try { libcore.util.TimeZoneFinderTest.parse(xml); fail(); } catch (org.xmlpull.v1.XmlPullParserException expected) { } }<END_MOD>
private static void provideJarEntry(java.util.jar.JarFile jarFile, java.util.jar.JarEntry jarEntry, com.android.<START_MOD>apksig<END_MOD>.core.ApkSignerEngine.InspectJarEntryRequest request, byte[] tmpbuf) throws java.io.IOException { com.android.<START_MOD>apksig<END_MOD>.core.util.DataSink dataSink = request.getDataSink(); try (java.io.InputStream in = jarFile.getInputStream(jarEntry)) { int chunkSize; while ((chunkSize = in.read(tmpbuf)) > 0) { dataSink.consume(tmpbuf, 0, chunkSize); } request.done(); } }
@<START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>Deprecated<END_MOD> public java.lang.Boolean wifiConnect(@com.googlecode.android_scripting.rpc.RpcParameter(name = "config") org.json.JSONObject config) throws org.json.JSONException { try { wifiConnectByConfig(config); } catch (java.security.GeneralSecurityException e) { java.lang.String msg =   GeneralSecurityException with the provided + "configuration"; throw new java.lang.RuntimeException(msg); } return true; }
private void addCoverageListener() { if (getBooleanArgument(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_COVERAGE)) { java.lang.String coverageFilePath = getArguments().getString(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_COVERAGE_PATH); addListener(new com.android.test.runner.listener.CoverageListener(this, coverageFilePath)); } }
private void markIfNecessary(@javax.annotation.Nonnull com.android.jack.ir.ast.JNode node, @javax.annotation.Nonnull com.android.jack.shrob.spec.KeepModifier modifier) { com.android.jack.shrob.seed.SeedMarker marker = node.<START_MOD>addMarkerIfAbsent<END_MOD>(<START_MOD>new <END_MOD>com.android.jack.shrob.seed.SeedMarker<START_MOD>(modifier)<END_MOD>); if (marker <START_MOD>!=<END_MOD> null<START_MOD>) { if ((marker.getModifier()) != modifier<END_MOD>) { node.addMarker(new com.android.jack.shrob.seed.SeedMarker(new com.android.jack.shrob.spec.KeepModifier())<START_MOD>)<END_MOD>; } } }
@java.lang.Override @android.annotation.NonNull public android.os.PersistableBundle getConfigForSubId(int subId) { try { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, null); } catch (java.lang.SecurityException e) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_STATE, null); } int phoneId = android.telephony.SubscriptionManager.getPhoneId(subId); android.os.PersistableBundle retConfig = android.telephony.CarrierConfigManager.getDefaultConfig(); if (android.telephony.SubscriptionManager.isValidPhoneId(phoneId)) { android.os.PersistableBundle config = mConfigFromDefaultApp[phoneId]; if (config != null) <START_MOD>{ <END_MOD>retConfig.putAll(config);<START_MOD> retConfig.putBoolean(CarrierConfigManager.KEY_CARRIER_CONFIG_OVERRIDE_BOOL, true); }<END_MOD> config = mConfigFromCarrierApp[phoneId]; if (config != null) <START_MOD>{ <END_MOD>retConfig.putAll(config); <START_MOD>retConfig.putBoolean(CarrierConfigManager.KEY_CARRIER_CONFIG_OVERRIDE_BOOL, true); } <END_MOD>} return retConfig; }
<START_MOD>private void loadList() { final com.android.sdklib.internal.repository.SdkSource[] knownSources = mUpdaterData.getSources().getSources(SdkSourceCategory.USER_ADDONS); mListViewer.setInput(knownSources); mListViewer.refresh(); }<END_MOD>
public static com.android.builder.profile.Recorder get() { return com.android.builder.profile.<START_MOD>ProcessRecorderFactory.isEnabled() ? com.android.builder.profile.<END_MOD>ThreadRecorder.recorder.get()<START_MOD> : com.android.builder.profile.ThreadRecorder.dummyRecorder<END_MOD>; }
<START_MOD>@java.lang.Override public void sendConnectionEvent(java.lang.String event, android.os.Bundle extras) { mLastConnectionEvent = event; }<END_MOD>
<START_MOD>public static com.android.apksig.internal.apk.SigningBlockScheme.SignatureInfo findSignature(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int blockId, com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.Result result) throws com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignatureNotFoundException, java.io.IOException { com.android.apksig.util.DataSource apkSigningBlock; long apkSigningBlockOffset; try { com.android.apksig.apk.ApkUtils.ApkSigningBlock apkSigningBlockInfo = com.android.apksig.apk.ApkUtils.findApkSigningBlock(apk, zipSections); apkSigningBlockOffset = apkSigningBlockInfo.getStartOffset(); apkSigningBlock = apkSigningBlockInfo.getContents(); } catch (com.android.apksig.apk.ApkSigningBlockNotFoundException e) { throw new com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignatureNotFoundException(e.getMessage(), e); } java.nio.ByteBuffer apkSigningBlockBuf = apkSigningBlock.getByteBuffer(0, ((int) (apkSigningBlock.size()))); apkSigningBlockBuf.order(java.nio.ByteOrder.LITTLE_ENDIAN); java.nio.ByteBuffer apkSignatureSchemeBlock = com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.findApkSignatureSchemeBlock(apkSigningBlockBuf, blockId, result); return new com.android.apksig.internal.apk.SigningBlockScheme.SignatureInfo(apkSignatureSchemeBlock, apkSigningBlockOffset, zipSections.getZipCentralDirectoryOffset(), zipSections.getZipEndOfCentralDirectoryOffset(), zipSections.getZipEndOfCentralDirectory()); }<END_MOD>
@java.lang.Override public long getLastModified(@javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file) <START_MOD>throws com.android.sched.util.file.CannotReadException { try <END_MOD>{ return <START_MOD>java.nio.file.Files.getLastModifiedTime(<END_MOD>getNativeFile(file.getPath()).<START_MOD>toPath()).toMillis<END_MOD>(); }<START_MOD> catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotReadException(this, e); } }<END_MOD>
<START_MOD>private int tether(java.lang.String iface, com.android.server.connectivity.Tethering.Mode mode) { if (com.android.server.connectivity.Tethering.DBG) android.util.Log.d(com.android.server.connectivity.Tethering.TAG, ("Tethering " + iface)); synchronized(mPublicSync) { com.android.server.connectivity.Tethering.TetherState tetherState = mTetherStates.get(iface); if (tetherState == null) { android.util.Log.e(com.android.server.connectivity.Tethering.TAG, (("Tried to Tether an unknown iface: " + iface) + ", ignoring")); return android.net.ConnectivityManager.TETHER_ERROR_UNKNOWN_IFACE; } if ((tetherState.lastState) != (com.android.server.connectivity.tethering.IControlsTethering.STATE_AVAILABLE)) { android.util.Log.e(com.android.server.connectivity.Tethering.TAG, (("Tried to Tether an unavailable iface: " + iface) + ", ignoring")); return android.net.ConnectivityManager.TETHER_ERROR_UNAVAIL_IFACE; } tetherState.stateMachine.sendMessage(TetherInterfaceStateMachine.CMD_TETHER_REQUESTED, mode); return android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR; } }<END_MOD>
<START_MOD>@vogar.target.TestRunnerProperties(testClass = vogar.target.junit4.LongTest.class, timeout = 1) @org.junit.Test public void testRunner_LongTest_WithTimeout() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().failure("test", "java.util.concurrent.TimeoutException\n").aborted(); }<END_MOD>
private<START_MOD> static<END_MOD> void runAttachTestCmd(com.android.tradefed.device.ITestDevice device, java.lang.String pkg, java.lang.String agentParams) throws java.lang.Exception { java.lang.String attachCmd = ((( activity start -S -W   + agentParams) +   -n   + pkg) + "/android.jvmti.JvmtiActivity"; java.lang.String attachReply = device.executeShellCommand(attachCmd); if ((attachReply != null) && (!(attachReply.trim().isEmpty()))) { com.android.tradefed.log.LogUtil.CLog.e(attachReply); } }
<START_MOD>@org.junit.Test public void provisioningNotRequiredWhenCarrierConfigMissing() { setupForRequiredProvisioning(); when(mCarrierConfigManager.getConfig()).thenReturn(null); verify((!(mTethering.isTetherProvisioningRequired()))); }<END_MOD>
<START_MOD>public void run() { while (!(guard1.get())); Main.full(); Main.expectEquals64((-123456789L), m.l); }<END_MOD>
public void testCommentAndExtraInSameOrder() throws java.lang.Exception { java.lang.String comment = libcore.java.util.zip.ZipEntryTest.makeString(17, "z"); byte[] extra = libcore.java.util.zip.ZipEntryTest.makeString(11, "a").getBytes(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(<START_MOD>mFile<END_MOD>); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry("x"); ze.setSize(0); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); ze = new java.util.zip.ZipEntry("y"); ze.setTime(libcore.java.util.zip.ZipEntryTest.ENTRY_TIME); ze.setExtra(extra); ze.setComment(comment); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(<START_MOD>mFile<END_MOD>); try { assertEquals(comment, zipFile.getEntry("x").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry("x").getExtra())); assertEquals(comment, zipFile.getEntry("y").getComment()); assertTrue(java.util.Arrays.equals(extra, zipFile.getEntry("y").getExtra())); } finally { zipFile.close(); } }
public java.util.jar.Manifest getManifest() throws java.io.IOException { if (closed) { throw new java.lang.IllegalStateException( has been closed } if ((manifest) != null) { return manifest; } if ((<START_MOD>manifestBytes<END_MOD>) <START_MOD>==<END_MOD> null) { <START_MOD>return<END_MOD> <START_MOD>null<END_MOD>; } manifest = new java.util.jar.Manifest(<START_MOD>manifestBytes<END_MOD>, ((verifier) != null)); <START_MOD>manifestBytes<END_MOD> = null; return manifest; }
@java.lang.Override protected boolean start() { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, "start()"); <START_MOD>mSessionStatusHandler = new com.android.bluetooth.pbap.BluetoothPbapService.PbapHandler(); <END_MOD>android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_RESPONSE_ACTION); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_CANCELLED_ACTION); mInterrupted = false; com.android.bluetooth.pbap.BluetoothPbapConfig.init(this); mSessionStatusHandler.sendMessage(mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.START_LISTENER)); if ((mContactChangeObserver) == null) { registerReceiver(mPbapReceiver, filter); try { if (com.android.bluetooth.pbap.BluetoothPbapService.DEBUG) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapService.TAG,   observer } mContactChangeObserver = new com.android.bluetooth.pbap.BluetoothPbapService.BluetoothPbapContentObserver(); getContentResolver().registerContentObserver(com.android.bluetooth.util.DevicePolicyUtils.getEnterprisePhoneUri(this), false, mContactChangeObserver); } catch (android.database.sqlite.SQLiteException e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ( exception:   + e)); } catch (java.lang.IllegalStateException e) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG,   state exception, content observer is already registered } } return true; }
static long <START_MOD>$opt$noinline$DoubleToLong<END_MOD>(double a) { return ((long) (a)); }
<START_MOD>private void performPlaceHolderSubstitution(com.android.manifmerger.ManifestMerger2.ManifestInfo manifestInfo, com.android.manifmerger.XmlDocument xmlDocument, com.android.manifmerger.MergingReport.Builder mergingReportBuilder) { java.util.Map<java.lang.String, java.lang.String> finalPlaceHolderValues = mPlaceHolderValues; if (!(mPlaceHolderValues.containsKey("applicationId"))) { java.lang.String packageName = (manifestInfo.getMainManifestPackageName().isPresent()) ? manifestInfo.getMainManifestPackageName().get() : xmlDocument.getPackageName(); finalPlaceHolderValues = com.google.common.collect.ImmutableMap.<java.lang.String, java.lang.String>builder().putAll(mPlaceHolderValues).put("packageName", packageName).put("applicationId", packageName).build(); } com.android.manifmerger.PlaceholderHandler.KeyBasedValueResolver<java.lang.String> placeHolderValueResolver = new com.android.manifmerger.ManifestMerger2.MapBasedKeyBasedValueResolver<java.lang.String>(finalPlaceHolderValues); com.android.manifmerger.PlaceholderHandler placeholderHandler = new com.android.manifmerger.PlaceholderHandler(); placeholderHandler.visit(mMergeType, xmlDocument, placeHolderValueResolver, mergingReportBuilder); }<END_MOD>
<START_MOD>public void add(java.lang.String name, java.lang.String value) { data.add(new com.android.hierarchyviewerlib.models.DumpThemeModel.DumpThemeModelData(name, value)); }<END_MOD>
@org.junit.Test public void long_to_int() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LONG_TO_INT).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), <START_MOD>"jack/jack-tests/src/com/android/jack/DxTestCase.java"<END_MOD>)).compileAndRunTest(); }
com.android.ddmlib.SyncService getSyncService() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException<START_MOD>, java.lang.InterruptedException<END_MOD>;
private void createParameters(@javax.annotation.CheckForNull org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding[] sab, @javax.annotation.Nonnull com.android.jack.ir.sourceinfo.SourceInfo info, @javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method, @javax.annotation.Nonnull java.util.Set<java.lang.String> alreadyNamedVariables<START_MOD>, boolean forceToImplicit<END_MOD>) { if (sab != null) { for (int i = 0; i < (sab.length); ++i) { org.eclipse.jdt.internal.compiler.lookup.SyntheticArgumentBinding arg = sab[i]; java.lang.String argName = java.lang.String.valueOf(arg.name); if (alreadyNamedVariables.contains(argName)) { argName += "_" + i; } createParameter(info, method, argName, arg.type, <START_MOD>((getFinalModifier(arg)) | (forceToImplicit ? com.android.jack.ir.ast.JModifier.IMPLICIT : com.android.jack.ir.ast.JModifier.SYNTHETIC)<END_MOD>)); alreadyNamedVariables.add(argName); } } }
<START_MOD>public void test_update$ByteBuffer() { java.nio.ByteBuffer byteBuffer = java.nio.ByteBuffer.allocate(3); byteBuffer.put(((byte) (1))).put(((byte) (2))).put(((byte) (3))); byteBuffer.flip(); java.util.zip.Adler32 adl = new java.util.zip.Adler32(); byteBuffer.position(2); adl.update(byteBuffer); assertEquals("update(ByteBuffer) failed to update the checksum to the correct value ", 262148, adl.getValue()); assertEquals(3, byteBuffer.position()); adl.reset(); java.nio.ByteBuffer directByteBuffer = java.nio.ByteBuffer.allocateDirect(3); directByteBuffer.put(((byte) (1))).put(((byte) (2))).put(((byte) (3))); directByteBuffer.flip(); directByteBuffer.position(2); adl.update(directByteBuffer); assertEquals("update(ByteBuffer) failed to update the checksum to the correct value ", 262148, adl.getValue()); assertEquals(3, directByteBuffer.position()); }<END_MOD>
public void test_gc() { java.lang.Runtime rt = java.lang.Runtime.getRuntime(); java.util.Vector<java.lang.StringBuffer> vec = new java.util.Vector<java.lang.StringBuffer>(); long beforeTest = rt.freeMemory(); while ((rt.freeMemory()) < ((beforeTest * 2) / 3)) { vec.add(new java.lang.StringBuffer(1000)); } <START_MOD>vec = null; <END_MOD>long beforeGC = <START_MOD>(rt.totalMemory()) - (rt.freeMemory()); rt.gc(); long afterGC = (rt.totalMemory()) - (rt.freeMemory()); assertTrue((((( was not released after calling <END_MOD>System.gc()<START_MOD>. +   gc:   + beforeGC) +   after gc:   +<END_MOD> afterGC<START_MOD>), (<END_MOD>beforeGC<START_MOD> >=<END_MOD> afterGC)); }
private void testPreviewPictureSizesCombinationByCamera(int cameraId) throws java.lang.Exception { initializeMessageLooper(cameraId); mCamera.setPreviewDisplay(getActivity().getSurfaceView().getHolder()); android.hardware.Camera.Parameters parameters = mCamera.getParameters(); android.hardware.cts.CameraTest.PreviewCbForPreviewPictureSizesCombination callback = new android.hardware.cts.CameraTest.PreviewCbForPreviewPictureSizesCombination(); for (android.hardware.Camera.Size previewSize : parameters.getSupportedPreviewSizes()) { for (android.hardware.Camera.Size pictureSize : parameters.getSupportedPictureSizes()) { android.util.Log.v(TAG, (((((((( previewSize=( + (previewSize.width)) + ",") + (previewSize.height)) +   pictureSize=( + (pictureSize.width)) + ",") + (pictureSize.height)) + ")")); mPreviewCallbackResult = false; mCamera.setPreviewCallback(callback); callback.expectedPreviewSize = previewSize; parameters.setPreviewSize(previewSize.width, previewSize.height); parameters.setPictureSize(pictureSize.width, pictureSize.height); mCamera.setParameters(parameters); assertEquals(previewSize, mCamera.getParameters().getPreviewSize()); assertEquals(pictureSize, mCamera.getParameters().getPictureSize()); mCamera.startPreview(); waitForPreviewDone(); assertTrue(mPreviewCallbackResult); mCamera.takePicture(mShutterCallback, mRawPictureCallback, mJpegPictureCallback); waitForSnapshotDone(); assertTrue(mJpegPictureCallbackResult); assertNotNull(mJpegData); <START_MOD>try { <END_MOD>android.graphics.Bitmap b = android.graphics.BitmapFactory.decodeByteArray(mJpegData, 0, mJpegData.length); assertEquals(pictureSize.width, b.getWidth()); assertEquals(pictureSize.height, b.getHeight()); b.recycle(); b = null; } <START_MOD>catch (java.lang.OutOfMemoryError e) { android.util.Log.d(TAG,   size exceeds VM stack size <END_MOD>} <START_MOD>} } <END_MOD>terminateMessageLooper(); }
<START_MOD>java.awt.image.BufferedImage getImage(int w, int h);<END_MOD>
<START_MOD>private void handleNotificationDeleted() { mNotificationShown = false; mRecommendedNetwork = null; }<END_MOD>
public void startNattKeepalive(com.android.server.connectivity.NetworkAgentInfo nai, int intervalSeconds, android.os.Messenger messenger, android.os.IBinder binder, java.lang.String srcAddrString, int srcPort, java.lang.String dstAddrString, int dstPort) { if (nai == null) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_NETWORK); return; } java.net.InetAddress srcAddress; java.net.InetAddress dstAddress; try { <START_MOD>android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, (((   + srcAddrString) +     + dstAddrString)); <END_MOD>srcAddress = android.net.NetworkUtils.numericToInetAddress(srcAddrString); dstAddress = android.net.NetworkUtils.numericToInetAddress(dstAddrString); } catch (java.lang.IllegalArgumentException e) { <START_MOD>android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG,   parse ip addresses <END_MOD>notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, com.android.server.connectivity.ERROR_INVALID_IP_ADDRESS); return; } android.net.KeepalivePacketData packet; try { packet = <START_MOD>new <END_MOD>android.net.KeepalivePacketData(srcAddress, srcPort, dstAddress, NATT_PORT); } catch (android.net.KeepalivePacketData e) { notifyMessenger(messenger, com.android.server.connectivity.NO_KEEPALIVE, e.error); return; } com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo ki = new com.android.server.connectivity.KeepaliveTracker.KeepaliveInfo(messenger, binder, nai, packet, intervalSeconds); android.util.Log.d(com.android.server.connectivity.KeepaliveTracker.TAG, ( keepalive:   + (ki.toString()))); mConnectivityServiceHandler.obtainMessage(NetworkAgent.CMD_START_PACKET_KEEPALIVE, ki).sendToTarget(); }
@java.lang.Override protected synchronized boolean stop() { android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, "stop()"); if (!(mStarted)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG,   called before start() return true; } mStarted = false; unregisterReceiver(mHeadsetReceiver); com.android.bluetooth.hfp.HeadsetStateMachine.destroy(mStateMachine); mStateMachine = null; <START_MOD>mSystemInterface.stop(); <END_MOD>mStateMachinesThread.quitSafely(); mStateMachinesThread = null; com.android.bluetooth.hfp.HeadsetService.setHeadsetService(null); return true; }
<START_MOD>public void testEquals_checksExecutable() throws java.lang.Exception { java.lang.reflect.Method method0 = libcore.java.lang.reflect.ParameterTest.NonIdenticalParameters.class.getDeclaredMethod("method0", java.lang.String.class); java.lang.reflect.Method method1 = libcore.java.lang.reflect.ParameterTest.NonIdenticalParameters.class.getDeclaredMethod("method1", java.lang.String.class); java.lang.reflect.Parameter method0P0 = method0.getParameters()[0]; java.lang.reflect.Parameter method1P0 = method1.getParameters()[0]; assertFalse(method0P0.equals(method1P0)); assertFalse(method1P0.equals(method0P0)); }<END_MOD>
<START_MOD>private void checkAbsInt3() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inValue, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testAbsInt3(inValue, out); verifyResultsAbsInt3(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAbsInt3: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAbsInt3(inValue, out); verifyResultsAbsInt3(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAbsInt3: " + (e.toString()))); } }<END_MOD>
private android.telephony.RadioAccessSpecifier convertRadioAccessSpecifierToRadioHAL(android.telephony.RadioAccessSpecifier ras) { android.hardware.radio.V1_1.RadioAccessSpecifier rasInHalFormat = new android.hardware.radio.V1_1.RadioAccessSpecifier(); rasInHalFormat.radioAccessNetwork = ras.getRadioAccessNetwork(); java.util.List<java.lang.Integer> bands = null; switch (ras.getRadioAccessNetwork()) { case android.telephony.<START_MOD>NetworkConstants.RadioAccessNetwork<END_MOD>.GERAN : bands = rasInHalFormat.geranBands; break; case android.telephony.<START_MOD>NetworkConstants.RadioAccessNetwork<END_MOD>.UTRAN : bands = rasInHalFormat.utranBands; break; case android.telephony.<START_MOD>NetworkConstants.RadioAccessNetwork<END_MOD>.EUTRAN : bands = rasInHalFormat.eutranBands; break; default : android.util.Log.wtf(com.android.internal.telephony.RIL.RILJ_LOG_TAG, ((   + (ras.getRadioAccessNetwork())) +   not supported! return null; } if ((ras.getBands()) != null) { for (int band : ras.getBands()) { bands.add(band); } } if ((ras.getChannels()) != null) { for (int channel : ras.getChannels()) { rasInHalFormat.channels.add(channel); } } return rasInHalFormat; }
public static void d(java.lang.String prefix, java.lang.String format, java.lang.Object... args) { if (android.telecom.Log.<START_MOD>mIsUserExtendedLoggingEnabled) { android.telecom.Log.maybeDisableLogging(); android.telecom.Log.systemLogger.i(android.telecom.Log.TAG, android.telecom.Log.buildMessage(prefix, format, args)); } else if (android.telecom.Log.<END_MOD>DEBUG) { android.<START_MOD>telecom<END_MOD>.Log<START_MOD>.systemLogger<END_MOD>.d(android.telecom.Log.TAG, android.telecom.Log.buildMessage(prefix, format, args)); } }
public android.net.wifi.IClientInterface setupDriverForClientMode() { mWificond = mWifiInjector.makeWificond(); if ((mWificond) == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG,   to get reference to wificond return null; } android.net.wifi.IClientInterface clientInterface = null; try { clientInterface = mWificond.createClientInterface(); } catch (android.os.RemoteException e1) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG,   to get IClientInterface due to remote exception return null; } if (clientInterface == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG,   not get IClientInterface instance from wificond return null; } android.os.Binder.allowBlocking(clientInterface.asBinder()); mClientInterface = clientInterface; try { mClientInterfaceName = clientInterface.getInterfaceName(); mWificondScanner = mClientInterface.getWifiScannerImpl(); mScanEventHandler = new com.android.server.wifi.WificondControl.ScanEventHandler(); mWificondScanner.subscribeScanEvents(mScanEventHandler); <START_MOD>mPnoScanEventHandler = new com.android.server.wifi.WificondControl.PnoScanEventHandler(); mWificondScanner.subscribePnoScanEvents(mPnoScanEventHandler); <END_MOD>} catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG,   to refresh wificond scanner due to remote exception } return clientInterface; }
<START_MOD>public void test_isReachable_by_ICMP() throws java.lang.Exception { java.net.InetAddress[] inetAddresses = java.net.InetAddress.getAllByName("www.google.com"); for (java.net.InetAddress ia : inetAddresses) { assertTrue(ia.isReachableByICMP(5000)); } final java.net.InetAddress blackholeAddress = java.net.InetAddress.getByName("100::1"); assertFalse(blackholeAddress.isReachable(1000)); }<END_MOD>
<START_MOD>public void onInvitationResult(byte[] bssid, int status) { }<END_MOD>
@javax.annotation.Nonnull private com.android.jack.test.toolchain.AndroidToolchain createCandidateToolchain(<START_MOD>@javax.annotation.Nullable java.util.Map<java.lang.String, java.lang.String> properties<END_MOD>) { com.android.jack.test.toolchain.AndroidToolchain candidateTestTools = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.AndroidToolchain.class, ignoredCandidateToolchains); candidateTestTools.setSourceLevel(level); candidateTestTools.setWithDebugInfos(withDebugInfos); <START_MOD>if ((properties != null) && (candidateTestTools instanceof com.android.jack.test.toolchain.JackBasedToolchain)) { com.android.jack.test.toolchain.JackBasedToolchain jackBasedToolchain = ((com.android.jack.test.toolchain.JackBasedToolchain) (candidateTestTools)); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : properties.entrySet()) { jackBasedToolchain.addProperty(entry.getKey(), entry.getValue()); } } <END_MOD>return candidateTestTools; }
@java.lang.Override public java.io.FileDescriptor socket(int domain, int type, int protocol) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { return tagSocket(os.socket(domain, type, protocol)); }
<START_MOD>static boolean isEncryptionAlgorithm(android.net.IpSecAlgorithm algorithm) { switch (algorithm.getName()) { case android.net.IpSecAlgorithm.CRYPT_AES_CBC : return true; default : return false; } }<END_MOD>
@com.android.annotations.NonNull public com.android.build.gradle.internal.dsl.BuildType setProguardFiles(java.lang.Iterable<?> proguardFileIterable) { <START_MOD>getProguardFiles()<END_MOD>.clear(); for (java.lang.Object proguardFile : proguardFileIterable) { <START_MOD>getProguardFiles()<END_MOD>.add(project.file(proguardFile)); } return this; }
public org.gradle.api.file.FileCollection doCall(java.lang.Object it) { org.gradle.api.file.FileCollection classpath = scope.getGlobalScope().getProject().files(scope.getGlobalScope().getAndroidBuilder().getCompileClasspath(scope.getVariantData().getVariantConfiguration())); if (<START_MOD>testedVariantData != null<END_MOD>) { if ((!(testedVariantData.getType().equals(com.android.build.gradle.tasks.factory.LIBRARY))) || (scope.getVariantData().getType().equals(com.android.build.gradle.tasks.factory.UNIT_TEST))) { classpath = classpath.plus(testedVariantData.javaCompileTask.getClasspath()).plus(testedVariantData.javaCompileTask.getOutputs().getFiles()); } if ((scope.getVariantData().getType().equals(com.android.build.gradle.tasks.factory.UNIT_TEST)) && (testedVariantData.getType().equals(com.android.build.gradle.tasks.factory.LIBRARY))) { classpath = classpath.minus(scope.getGlobalScope().getProject().files(testedVariantData.getVariantConfiguration().getOutput().getJarFile())); } } return classpath; }
<START_MOD>public static int minBandwidth(int a, int b) { if ((a == (android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED)) && (b == (android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED))) { return android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED; } else if (a == (android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED)) { return b; } else if (b == (android.net.NetworkCapabilities.LINK_BANDWIDTH_UNSPECIFIED)) { return a; } else { return java.lang.Math.min(a, b); } }<END_MOD>
<START_MOD>@com.googlecode.android_scripting.rpc.Rpc(description = "Set Bluetooth Tethering") public void bluetoothPanSetBluetoothTethering(@com.googlecode.android_scripting.rpc.RpcParameter(name = "enable") boolean enable) { com.googlecode.android_scripting.facade.bluetooth.BluetoothPanFacade.sPanProfile.setBluetoothTethering(enable); }<END_MOD>
private void validateSensitivity(int request, int result) { int sensitivityDelta = <START_MOD>java.lang.Math.abs((<END_MOD>request - result<START_MOD>)); int sensitivityErrorMargin = ((int) (request * (android.hardware.camera2.cts.CaptureRequestTest.SENSITIVITY_ERROR_MARGIN_RATE)))<END_MOD>; mCollector.expectTrue(((( is invalid for AE manaul control test, request:   + request) +   result:   + result), (sensitivityDelta < <START_MOD>sensitivityErrorMargin<END_MOD>)); }
@java.lang.Override public java.util.Collection<com.android.ide.eclipse.adt.internal.resources.manager.<START_MOD>ResourceItem<END_MOD>> getResources(com.android.resources.ResourceType type, com.android.ide.eclipse.adt.internal.resources.manager.<START_MOD>ResourceRepository resources<END_MOD>) { update(); java.util.HashMap<java.lang.String, com.android.ide.common.rendering.api.ResourceValue> list = mResourceItems.get(type); java.util.ArrayList<com.android.ide.eclipse.adt.internal.resources.manager.<START_MOD>ResourceItem<END_MOD>> items = new java.util.ArrayList<com.android.ide.eclipse.adt.internal.resources.manager.<START_MOD>ResourceItem<END_MOD>>(); if (list != null) { java.util.Collection<com.android.ide.common.rendering.api.ResourceValue> values = list.values(); for (com.android.ide.common.rendering.api.ResourceValue res : values) { com.android.<START_MOD>util.Pair<com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem, java.lang.Boolean> pair = resources.createResourceItem<END_MOD>(type, res.getName()); <START_MOD>com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem item = pair.getFirst(); <END_MOD>if (<START_MOD>pair.getSecond()) { items.add(<END_MOD>item<START_MOD>); }<END_MOD> item<START_MOD>.add(this<END_MOD>); } } <START_MOD>return <END_MOD>items; }
@java.lang.Override public void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { if ((<START_MOD>mBluetoothBinder<END_MOD>) == null) { writer.println( Service not connected } else { try { <START_MOD>mBluetoothBinder<END_MOD>.dump(<START_MOD>fd, args<END_MOD>); } catch (android.os.RemoteException re) { writer.println( while calling Bluetooth Service } } }
private void testWifiConfigurationSaveLoad(WifiConfiguration config) { assertTrue(mSupplicantNetwork.saveWifiConfiguration(config)); WifiConfiguration loadConfig = new WifiConfiguration(); java.util.Map<java.lang.String, java.lang.String> networkExtras = new java.util.HashMap<>(); assertTrue(mSupplicantNetwork.loadWifiConfiguration(loadConfig, networkExtras)); com.android.server.wifi.WifiConfigurationTestUtil.assertConfigurationEqualForSupplicant(config, loadConfig); if (<START_MOD>!(android.text.TextUtils.isEmpty<END_MOD>(config.updateIdentifier)<START_MOD>)<END_MOD>) { assertEquals(java.lang.Integer.parseInt(config.updateIdentifier), mSupplicantVariables.updateIdentifier); } <START_MOD>java.lang.String oppKeyCaching = config.enterpriseConfig.getFieldValue(OPP_KEY_CACHING); if (!(android.text.TextUtils.isEmpty(oppKeyCaching))) { assertEquals(((java.lang.Integer.parseInt(oppKeyCaching)) == 1 ? true : false), mSupplicantVariables.eapProactiveKeyCaching); <END_MOD>}<START_MOD> }<END_MOD>
<START_MOD>public static native void EC_POINT_set_affine_coordinates(int type, int groupCtx, int pointCtx, byte[] x, byte[] y);<END_MOD>
public void removeTypedefClasses() { if ((((classDir) != null) && ((classFiles) != null)) && (!(classFiles.isEmpty()))) { <START_MOD>boolean<END_MOD> <START_MOD>quiet<END_MOD> = <START_MOD>false<END_MOD>; <START_MOD>boolean<END_MOD> <START_MOD>verbose<END_MOD> = <START_MOD>false<END_MOD>; boolean <START_MOD>dryRun<END_MOD> = <START_MOD>false<END_MOD>; com.android.build.gradle.tasks.annotations.<START_MOD>RmTypeDefs remover = new com<END_MOD>.<START_MOD>android.build.gradle.tasks.annotations.RmTypeDefs<END_MOD>(<START_MOD>this, quiet, verbose, dryRun); remover.remove<END_MOD>(<START_MOD>classFiles<END_MOD>); } }
public void registerArtifactType(@com.android.annotations.NonNull java.lang.String name, boolean isTest, int artifactType) { if ((extraArtifactMap.get(name)) != null) { throw new java.lang.IllegalArgumentException(<START_MOD>java.lang.String.format(<END_MOD> with name <START_MOD>%s<END_MOD> already registered.<START_MOD> name));<END_MOD> } extraArtifactMap.put(name, new com.android.build.gradle.internal.model.ArtifactMetaDataImpl(name, isTest, artifactType)); }
@java.lang.Override public java.util.List<java.lang.String> <START_MOD>getAccessibilityIds() { java.util.List<java.lang.String> <END_MOD>results = com.google.common.collect.Lists.newArrayList(queryView("getaccessibilityids").split(   if ((results.size()) == 2) { try { <START_MOD>java.lang.Integer.parseInt(results.get(<END_MOD>0<START_MOD>)); java.lang.Long.parseLong<END_MOD>(results.get(1)); return <START_MOD>results<END_MOD>; } catch (java.lang.NumberFormatException e) { com.android.chimpchat.core.ChimpView.LOG.log(java.util.logging.Level.SEVERE, ( retrieving accesibility ids:   + (e.getMessage()))); } } <START_MOD>java.util.List<java.lang.String><END_MOD> empty = <START_MOD>com.google.common.collect.Lists.newArrayList("0"<END_MOD>, <START_MOD>"0")<END_MOD>; return empty; }
@java.lang.Override public void getSignalStrength(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_SIGNAL_STRENGTH, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getSignalStrength(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getSignalStrength", e); } } }
<START_MOD>public void testRefactor5() throws java.lang.Exception { checkRefactoring(com.android.ide.eclipse.adt.internal.refactorings.core.RenameResourceParticipantTest.TEST_PROJECT, "@layout/activity_main", "newlayout", ("CHANGES:\n" + (((((((((((("-------\n" + "* Rename \'testRefactor5/res/layout/activity_main.xml\' to \'newlayout.xml\'\n") + "* Rename \'testRefactor5/res/layout-land/activity_main.xml\' to \'newlayout.xml\'\n") + "* MainActivity.java - /testRefactor5/src/com/example/refactoringtest/MainActivity.java\n") + " < setContentView(R.layout.activity_main);\n") + " ---\n") + " > setContentView(R.layout.newlayout);\n") + "\n") + "\n") + "* R.java - /testRefactor5/gen/com/example/refactoringtest/R.java\n") + " < public static final int activity_main=0x7f030000;\n") + " ---\n") + " > public static final int newlayout=0x7f030000;"))); }<END_MOD>
<START_MOD>@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) { if (acceptFilter(type)) { stream.print(com.android.jack.ir.ConditionnalStructurePrinter.formatter.getName(type)); stream.println(":"); return true; } else { return false; } }<END_MOD>
public void testDisplayAvdListOfOneSnapshot() { com.android.sdkmanager.Main main = new com.android.sdkmanager.Main(); main.setLogger(mLog); mAvdManager.createAvd(mAvdFolder, this.getName(), mTarget, null, null, null, <START_MOD>true, <END_MOD>false, <START_MOD>false, mLog); mLog.clear(); main.displayAvdList(mAvdManager); assertEquals((((((((((( Available Android Virtual Devices: +   P Name:   + (this.getName())) + "\n") +   P Path:   + (mAvdFolder)) + "\n") +   P Target: Android 0.0 (API level 0) +   P Skin: HVGA +   P Snapshot: <END_MOD>true + "]"), mLog.toString()); }
<START_MOD>public boolean isIncomingCallPermitted(com.android.server.telecom.Call excludeCall, android.telecom.PhoneAccountHandle phoneAccountHandle) { if (phoneAccountHandle == null) { return false; } android.telecom.PhoneAccount phoneAccount = mPhoneAccountRegistrar.getPhoneAccountUnchecked(phoneAccountHandle); if (phoneAccount == null) { return false; } if (!(phoneAccount.isSelfManaged())) { return ((!(hasMaximumManagedRingingCalls(excludeCall))) && (!(hasMaximumManagedLiveCalls(excludeCall)))) && (!(hasMaximumManagedHoldingCalls(excludeCall))); } else { return (((!(hasEmergencyCall())) && (!(hasMaximumSelfManagedRingingCalls(excludeCall, phoneAccountHandle)))) && (!(hasMaximumSelfManagedCalls(excludeCall, phoneAccountHandle)))) && (!(hasManagedCalls())); } }<END_MOD>
<START_MOD>void initConnected(java.net.InetAddress remoteAddress, int remotePort, boolean updateSocketState) { connected = true; connectAddress = new java.net.InetSocketAddress(remoteAddress, remotePort); if (updateSocketState && ((socket) != null)) { socket.initConnected(remoteAddress, remotePort); } }<END_MOD>
<START_MOD>private static java.util.Map<java.lang.String, java.lang.String> toHeaderMap(java.util.List<com.android.volley.Header> allHeaders) { java.util.Map<java.lang.String, java.lang.String> headers = new java.util.TreeMap<>(java.lang.String.CASE_INSENSITIVE_ORDER); for (com.android.volley.Header header : allHeaders) { headers.put(header.getName(), header.getValue()); } return headers; }<END_MOD>
<START_MOD>@org.junit.Test public void testEvaluateNetworks_nullRecommendation() { when(mWifiConfigManager.wasEphemeralNetworkDeleted(anyString())).thenReturn(false); when(mNetworkScoreManager.requestRecommendation(any(android.net.RecommendationRequest.class))).thenReturn(null); android.net.wifi.WifiConfiguration result = mRecommendedNetworkEvaluator.evaluateNetworks(com.google.android.collect.Lists.newArrayList(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL1, com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL2), null, null, false, false, null); junit.framework.Assert.assertNull(result); verify(mNetworkScoreManager).requestRecommendation(any(android.net.RecommendationRequest.class)); verify(mWifiConfigManager, never()).setNetworkCandidateScanResult(anyInt(), any(android.net.wifi.ScanResult.class), anyInt()); }<END_MOD>
static void getInt(java.lang.invoke.MethodHandle m, Main.ValueHolder v, int value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final int got = (v == null) ? ((int) (m.invokeExact())) : ((int) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.<START_MOD>assertEqual<END_MOD>(exceptionThrown, expectFailure); }
@org.junit.Test @org.junit.experimental.categories.Category(com.android.jack.test.category.KnownBugs.class) public void test001d() throws java.lang.Exception { java.io.File jackOutput = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); runTest001(jackOutput, "keep-first", errOut, false, true); <START_MOD>com.android.jack.library.InputJackLibrary outputLib = null; try { outputLib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibraryFromDir(jackOutput); com.android.sched.vfs.InputVFile myClass1 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE1_PATH); com.android.sched.vfs.InputVFile myClass2 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE2_PATH); com.android.sched.vfs.InputVFile myClass3 = outputLib.getFile(FileType.JAYCE, com.android.jack.fileconflict.FileConflictTests.TYPE3_PATH); checkJayceNotEmpty(myClass1); checkJayceNotEmpty(myClass2); checkJayceNotEmpty(myClass3); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { junit.framework.Assert.fail(); } finally { if (outputLib != null) { outputLib.close(); } <END_MOD>java.<START_MOD>lang.String errString = errOut.toString(<END_MOD>); junit.framework.Assert.assertTrue(<START_MOD>errString.contains( com.android.jack.fileconflict.test001.jack.MyClass<END_MOD> junit.framework.Assert.assertTrue(<START_MOD>errString.contains( com.android.jack.fileconflict.test001.jack.MyClass2<END_MOD> junit.framework.Assert.assertTrue(errString<START_MOD>.contains( com.android.jack.fileconflict.test001.jack.MyClass3<END_MOD> junit.framework.Assert.assertTrue(errString.contains( already been imported }<START_MOD> }<END_MOD>
synchronized void recordScanStart(android.bluetooth.le.ScanSettings settings, boolean filtered, int scannerId) { com.android.bluetooth.gatt.AppScanStats.LastScan existingScan = getScanFromScannerId(scannerId); if (existingScan != null) { return; } (this.<START_MOD>mScansStarted<END_MOD>)++; startTime = android.os.SystemClock.elapsedRealtime(); com.android.bluetooth.gatt.AppScanStats.LastScan scan = new com.android.bluetooth.gatt.AppScanStats.LastScan(startTime, 0, false, false, filtered, scannerId); if (settings != null) { scan.opportunistic = (settings.getScanMode()) == (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC); scan.background = ((settings.getCallbackType()) & (android.bluetooth.le.ScanSettings.CALLBACK_TYPE_FIRST_MATCH)) != 0; } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_START); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); <START_MOD>mGattService<END_MOD>.addScanEvent(scanEvent); if (!(isScanning())) { try { boolean isUnoptimized = !(((scan.filtered) || (scan.background)) || (scan.opportunistic)); mScanStartTime = startTime; <START_MOD>mBatteryStats<END_MOD>.noteBleScanStarted(workSource, isUnoptimized); } catch (android.os.RemoteException e) { } } <START_MOD>mOngoingScans<END_MOD>.put(scannerId, scan); }
<START_MOD>@java.lang.Override public com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem[] getResources(com.android.resources.ResourceType type) { java.util.List<com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem> items = mPublicResourceMap.get(type); return items.toArray(new com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem[items.size()]); }<END_MOD>
<START_MOD>@java.lang.Override public int compareTo(java.lang.Object o) { com.android.dx.dex.file.CallSiteIdItem other = ((com.android.dx.dex.file.CallSiteIdItem) (o)); return callSite.compareTo(other.callSite); }<END_MOD>
public static long digestFile(java.io.File file) throws java.io.IOException { if (com.intellij.updater.Utils.isZipFile(file.getName())) { java.util.zip.ZipFile zipFile; try { zipFile = new java.util.zip.ZipFile(file); } catch (java.io.IOException e) { com.intellij.updater.Runner.printStackTrace(e); return com.intellij.updater.Digester.<START_MOD>digestRegularFile<END_MOD>(file); } try { return com.intellij.updater.Digester.doDigestZipFile(zipFile); } finally { zipFile.close(); } } return com.intellij.updater.Digester.<START_MOD>digestRegularFile<END_MOD>(file); }
<START_MOD>@java.lang.Override protected void textChanged(javax.swing.event.DocumentEvent e) { if (myUpdating) return; myUpdating = true; try { updateDataModel(); myUpdateListener.update(); } finally { myUpdating = false; } }<END_MOD>
@org.junit.Test public void testCompile023() throws java.lang.Exception { java.lang.String packageName = "com.android.jack.switchstatement.test023.jack"; java.lang.String classPrefix = (packageName.replace('.', '_')) + "_"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put("Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum11"), false)); input.put("Switch2", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum2$Enum22"), false)); input.put("Enum1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum11"), false)); input.put("Enum2", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum2$Enum22"), false)); input.put("Enum1$Enum11", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum1$Enum11"), false)); input.put("Enum2$Enum22", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + "Enum2$Enum22"), false)); input.put("SyntheticSwitchmapClass-*", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo((classPrefix + "Enum1$Enum11"), true).specifyInfo((classPrefix + "Enum2$Enum22"), true)); checkCompiledCode(packageName, input); }
synchronized android.bluetooth.BluetoothDevice <START_MOD>getDevice<END_MOD>() { return mCurrentDevice; }
protected void onUpdateIccAvailability() { if ((mUiccController) == null) { return; } com.android.internal.telephony.uicc.UiccCardApplication newUiccApplication = getUiccCardApplication(); if ((mUiccApplcation) != newUiccApplication) { <START_MOD>mIsSimReady = false; <END_MOD>if ((mUiccApplcation) != null) { log( stale icc objects. mUiccApplcation.unregisterForReady(this); <START_MOD>mUiccApplcation.unregisterForLocked(this); <END_MOD>if ((mIccRecords) != null) { mIccRecords.unregisterForRecordsLoaded(this); } mIccRecords = null; mUiccApplcation = null; } if (newUiccApplication != null) { log( card found mUiccApplcation = newUiccApplication; mIccRecords = mUiccApplcation.getIccRecords(); if (mPhone.isPhoneTypeGsm()) { mUiccApplcation.registerForReady(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_READY, null); <START_MOD>mUiccApplcation.registerForLocked(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_LOCKED, null); <END_MOD>if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.ServiceStateTracker.EVENT_SIM_RECORDS_LOADED, null); } } else if (mIsSubscriptionFromRuim) { mUiccApplcation.registerForReady(this, com.android.internal.telephony.ServiceStateTracker.EVENT_RUIM_READY, null); if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.ServiceStateTracker.EVENT_RUIM_RECORDS_LOADED, null); } } } } }
public void testAuthenticateWithPost() throws java.lang.Exception { com.google.mockwebserver.MockResponse pleaseAuthenticate = new com.google.mockwebserver.MockResponse().setResponseCode(401).addHeader( Basic realm= area authenticate. server.enqueue(pleaseAuthenticate); server.enqueue(pleaseAuthenticate); server.enqueue(pleaseAuthenticate); server.enqueue(new com.google.mockwebserver.MockResponse().setBody( auth! server.play(); java.net.Authenticator.setDefault(new libcore.java.net.URLConnectionTest.SimpleAuthenticator()); java.net.HttpURLConnection connection = ((java.net.HttpURLConnection) (server.getUrl("/").openConnection())); connection.setDoOutput(true); byte[] requestBody = new byte[]{ 'A', 'B', 'C', 'D' }; java.io.OutputStream outputStream = connection.getOutputStream(); outputStream.write(requestBody); outputStream.close(); assertEquals( auth! readAscii(connection.getInputStream(), java.lang.Integer.MAX_VALUE)); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); <START_MOD>libcore.java.net.URLConnectionTest.<END_MOD>assertContainsNoneMatching(request.getHeaders(),   .* for (int i = 0; i < 3; i++) { request = server.takeRequest(); assertEquals( / HTTP/1.1 request.getRequestLine()); <START_MOD>libcore.java.net.URLConnectionTest.<END_MOD>assertContains(request.getHeaders(), ( Basic   + (libcore.java.net.URLConnectionTest.SimpleAuthenticator.BASE_64_CREDENTIALS))); assertEquals(java.util.Arrays.toString(requestBody), java.util.Arrays.toString(request.getBody())); } }
synchronized boolean registerApp(android.bluetooth.BluetoothHidDeviceAppConfiguration config, android.bluetooth.BluetoothHidDeviceAppSdpSettings sdp, android.bluetooth.BluetoothHidDeviceAppQosSettings inQos, android.bluetooth.BluetoothHidDeviceAppQosSettings outQos, android.bluetooth.IBluetoothHidDeviceCallback callback) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, "registerApp()"); } if ((<START_MOD>mUserUid) != 0) { android.util.Log.w(com.android.bluetooth.hid.HidDeviceService.TAG,   failed because some user already uses it.   return false; } <END_MOD>mAppConfig<START_MOD> = config; mUserUid = android.os.Binder.getCallingUid();<END_MOD> android.util.Log.<START_MOD>d<END_MOD>(com.android.bluetooth.hid.HidDeviceService.TAG, <START_MOD>( caller uid= + (mUserUid))); mCallback = callback;<END_MOD> return <START_MOD>registerAppNative(sdp.name, sdp.description, sdp.provider, sdp.subclass, sdp.descriptors, (inQos == null ? null : inQos.toArray()), (outQos == null ? null : outQos.toArray()))<END_MOD>; }
@java.lang.Override public void setCLIR(int clirMode, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_SET_CLIR, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) +   clirMode =   + clirMode)); } try { radioProxy.setClir(rr.mSerial, clirMode); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setCLIR", e); } } }
@java.lang.Override public void handleMessage(android.os.Message msg) { synchronized(this) { final long millisLeft = (mStopTimeInFuture) - (android.os.SystemClock.elapsedRealtime()); if (millisLeft <= 0) { onFinish(); } else if (millisLeft < (mCountdownInterval)) { sendMessageDelayed(obtainMessage(android.os.CountDownTimer.MSG), millisLeft); } else { long lastTickStart = android.os.SystemClock.elapsedRealtime(); onTick(millisLeft); long delay = (lastTickStart + (mCountdownInterval)) - (android.os.SystemClock.elapsedRealtime()); while (delay < 0) delay += mCountdownInterval; <START_MOD>if (!(mCancelled)) { <END_MOD>sendMessageDelayed(obtainMessage(android.os.CountDownTimer.MSG), delay); } } }<START_MOD> }<END_MOD>
public void sendEnvelopeWithStatus(java.lang.String contents, android.os.Message response) { <START_MOD>getCommandsInterface()<END_MOD>.sendEnvelopeWithStatus(contents, response); }
<START_MOD>public com.android.layoutlib.api.LayoutScene createScene(com.android.layoutlib.api.SceneParams params) { if ((mBridge) != null) { mBridge.createScene(params); } else if ((mLegacyBridge) != null) { return createLegacyScene(params); } return null; }<END_MOD>
public void testVFE3() { try { <START_MOD>dot<END_MOD>.<START_MOD>junit<END_MOD>.<START_MOD>opcodes<END_MOD>.<START_MOD>iget_short.d.T_iget_short_13 t = new dot.junit.opcodes.iget_short.d.T_iget_short_13<END_MOD>(<START_MOD>); t.run(<END_MOD>); fail( a <START_MOD>NoSuchFieldError<END_MOD> exception } catch (java.lang.<START_MOD>NoSuchFieldError<END_MOD> <START_MOD>e<END_MOD>) { } }
public java.lang.String getDisplayVariant(java.util.Locale locale) { <START_MOD>try { java.util.Locale.Builder.normalizeAndValidateVariant(variantCode); } catch<END_MOD> (<START_MOD>java<END_MOD>.<START_MOD>util.IllformedLocaleException<END_MOD> <START_MOD>ilfe<END_MOD>) { return variantCode; } java.lang.String result = libcore.icu.ICU.<START_MOD>getDisplayVariant<END_MOD>(<START_MOD>this<END_MOD>, locale); if (result == null) { result = libcore.icu.ICU.<START_MOD>getDisplayVariant<END_MOD>(<START_MOD>this<END_MOD>, java.util.Locale.getDefault()<START_MOD>); } if (result<END_MOD>.<START_MOD>isEmpty<END_MOD>())<START_MOD> { return variantCode<END_MOD>; } return result; }
public void removeProfile(com.android.bluetooth.btservice.ProfileService profile) { <START_MOD>android.os.Message m = mHandler.obtainMessage<END_MOD>(<START_MOD>com.android.bluetooth.btservice.AdapterService.MESSAGE_PROFILE_SERVICE_UNREGISTERED,<END_MOD> profile); <START_MOD>mHandler.sendMessage(m);<END_MOD> }
<START_MOD>void init() { android.content.Intent intent = new android.content.Intent(android.bluetooth.IBluetoothHeadsetPhone.class.getName()); intent.setComponent(intent.resolveSystemService(mService.getPackageManager(), 0)); if (((intent.getComponent()) == null) || (!(mService.bindService(intent, mPhoneProxyConnection, 0)))) { android.util.Log.e(com.android.bluetooth.hfp.HeadsetSystemInterface.TAG, "Could not bind to Bluetooth Headset Phone Service"); } }<END_MOD>
@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) { for (com.android.sched.vfs.InputVElement sub : dir.list()) { if ((!(sub.isVDir())) && (isJackFileNameOf(sub.getName(), simpleName))) { try { return new com.android.jack.jayce.JayceClassOrInterfaceLoader(inputJackLibrary, loading, simpleName, ((com.android.sched.vfs.InputVFile) (sub)), lookup, defaultLoadLevel).load(); } catch (java.io.IOException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } catch (com.android.jack.<START_MOD>library.LibraryFormatException<END_MOD> e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } <START_MOD>catch (com.android.jack.jayce.JayceFormatException e) {<END_MOD> throw new com.android.jack.<START_MOD>load.JackLoadingException(sub.getLocation(), new com.android.jack.library.LibraryFormatException(inputJackLibrary.getLocation(), e)); } catch (com.android.jack.jayce.JayceVersionException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), new com.android.jack.library.LibraryFormatException(inputJackLibrary.getLocation(), e)); } } } throw new com.android.jack.<END_MOD>ir.ast.MissingJTypeLookupException(loading, simpleName); }
<START_MOD>@java.lang.Override public void run() { mManager.registerCallback(mCallabck, new android.os.Handler()); mManager.unregisterCallback(mCallabck); }<END_MOD>
<START_MOD>private static void calculateBorderColorForViewNode(com.android.hierarchyviewerlib.models.ViewNode node, int result) { org.eclipse.swt.graphics.Color borderColor; switch (result) { case com.android.hierarchyviewerlib.models.EvaluateContrastModel.CONTRAST_PASS : borderColor = com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sBorderColorPass; break; case com.android.hierarchyviewerlib.models.EvaluateContrastModel.CONTRAST_FAIL : borderColor = com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sBorderColorFail; break; case com.android.hierarchyviewerlib.models.EvaluateContrastModel.CONTRAST_INDETERMINATE : default : borderColor = com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sBorderColorIndeterminate; } com.android.hierarchyviewerlib.ui.EvaluateContrastDisplay.sBorderColorForViewNode.put(node, borderColor); }<END_MOD>
<START_MOD>public void sendTextForSubscriberWithOptions(int subId, java.lang.String callingPackage, java.lang.String destAddr, java.lang.String scAddr, java.lang.String parts, android.app.PendingIntent sentIntents, android.app.PendingIntent deliveryIntents, boolean persistMessage, int priority, boolean isExpectMore, int validityPeriod) { com.android.internal.telephony.IccSmsInterfaceManager iccSmsIntMgr = getIccSmsInterfaceManager(subId); if (iccSmsIntMgr != null) { iccSmsIntMgr.sendTextWithOptions(callingPackage, destAddr, scAddr, parts, sentIntents, deliveryIntents, persistMessage, priority, isExpectMore, validityPeriod); } else { android.telephony.Rlog.e(com.android.internal.telephony.UiccSmsController.LOG_TAG, (("sendTextWithOptions iccSmsIntMgr is null for" + " Subscription: ") + subId)); } }<END_MOD>
private com.android.build.gradle.internal.model.JavaArtifactImpl createUnitTestsJavaArtifact(@com.android.annotations.NonNull com.android.builder.core.VariantType variantType, @com.android.annotations.NonNull BaseVariantData<? extends BaseVariantOutputData> variantData) { com.android.build.gradle.internal.model.ModelBuilder.SourceProviders sourceProviders = com.android.build.gradle.internal.model.ModelBuilder.determineSourceProviders(variantData); com.android.build.gradle.internal.model.DependenciesImpl dependencies = com.android.build.gradle.internal.model.DependenciesImpl.cloneDependencies(variantData, androidBuilder); java.util.List<java.io.File> extraGeneratedSourceFolders = variantData.getExtraGeneratedSourceFolders(); return new com.android.build.gradle.internal.model.JavaArtifactImpl(variantType.getArtifactName(), variantData.assembleVariantTask.getName(), variantData.compileTask.getName(), com.google.common.collect.Sets.newHashSet(variantData.prepareDependenciesTask.getName(), taskManager.createMockableJar.getName()), (extraGeneratedSourceFolders != null ? extraGeneratedSourceFolders : java.util.Collections.<java.io.File>emptyList()), ((variantData.javacTask) != null ? variantData.javacTask.getDestinationDir() : variantData.getScope().getJavaOutputDir()), variantData.getScope().getJavaResourcesDestinationDir(), taskManager.<START_MOD>getGlobalScope().getMockableAndroidJarFile<END_MOD>(), dependencies, sourceProviders.variantSourceProvider, sourceProviders.multiFlavorSourceProvider); }
@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) <START_MOD>{ com.android.sched.vfs.InputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VFS prefixedInputVFS; try { prefixedInputVFS = new com.android.sched.vfs.PrefixedFS(vfs, new com.android.sched.vfs.VPath(fileType.getPrefix(), '/')); } catch (<END_MOD>com.android.sched.util.file.<START_MOD>CannotCreateFileException e) { com.android.jack.library.LibraryReadingException reportable = new com.android.jack.library.LibraryReadingException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, reportable); throw new com.android.jack.JackAbortException(reportable); } if (fileType == (com.android.jack.library.FileType.DEX)) { try { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(new com.android.sched.vfs.MessageDigestFS(prefixedInputVFS<END_MOD>, com.android.sched.util.<START_MOD>config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO))); } catch (com.android.sched.vfs.WrongVFSFormatException e) { com.android.jack.library.LibraryReadingException reportable = new com.android.jack.library.LibraryReadingException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, reportable); throw new com.android.jack.JackAbortException(reportable); } } else { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(prefixedInputVFS); } <END_MOD>sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }
<START_MOD>private static void maybeDisableLogging() { if (!(android.telecom.Log.mIsUserExtendedLoggingEnabled)) { return; } if ((android.telecom.Log.mUserExtendedLoggingStopTime) < (java.lang.System.currentTimeMillis())) { android.telecom.Log.mUserExtendedLoggingStopTime = 0; android.telecom.Log.mIsUserExtendedLoggingEnabled = false; } }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String getSigAlgName() { return null; }<END_MOD>
protected void openDevice(java.lang.String cameraId, android.hardware.camera2.cts.testcases.BlockingStateCallback listener) throws java.lang.Exception { mCamera = android.hardware.camera2.cts.CameraTestUtils.CameraTestUtils.openCamera(mCameraManager, cameraId, listener, mHandler); mCollector.setCameraId(cameraId); mStaticInfo = new android.hardware.camera2.cts.helpers.StaticMetadata(mCameraManager.getCameraCharacteristics(cameraId), android.hardware.camera2.cts.helpers.StaticMetadata.CheckLevel.ASSERT, null); mOrderedPreviewSizes = getSupportedPreviewSizes(cameraId, mCameraManager, <START_MOD>getDisplaySize()); mOrderedVideoSizes = getSupportedVideoSizes(cameraId, mCameraManager, <END_MOD>android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND); mOrderedStillSizes = getSupportedStillSizes(cameraId, mCameraManager, null); if (android.hardware.camera2.cts.testcases.Camera2AndroidTestCase.VERBOSE) { android.util.Log.v(android.hardware.camera2.cts.testcases.Camera2AndroidTestCase.TAG, ((   + cameraId) +   is opened } }
public void testSinglePass() { java.util.Map<java.lang.String, java.lang.String> emptyMap = java.util.Collections.emptyMap(); final com.android.ddmlib.testrunner.TestIdentifier testId = new com.android.ddmlib.testrunner.TestIdentifier("com.foo.FooTest", "testFoo"); org.easymock.EasyMock.replay(mMockBuild); mResultReporter.invocationStarted(mMockBuild); mResultReporter.testRunStarted(com.android.cts.util.AbiUtils.createId(UnitTests.ABI.getName(), "run"), 1); mResultReporter.testStarted(testId); mResultReporter.testEnded(testId, emptyMap); mResultReporter.testRunEnded(3000, emptyMap); mResultReporter.invocationEnded(1); mResultReporter.putSummary(com.android.cts.tradefed.result.CtsXmlResultReporterTest.SUMMARY_LIST); java.lang.String output = getOutput(); <START_MOD>final java.lang.String expectedTestOutput = java.lang.String.format(( testPlan= starttime= endtime=   +   suite= referenceUrl=   com.android.cts.tradefed.result.CtsXmlResultReporter.CTS_RESULT_FILE_VERSION, "CTS", com.android.cts.tradefed.result.CtsXmlResultReporterTest.TEST_SUMMARY_URL); <END_MOD>assertTrue(output.contains( failed= notExecuted= timeout= pass= /> assertTrue(output.contains((( name= appPackageName= abi= + (UnitTests.ABI.getName())) +   digest= assertTrue(output.contains( name= priority= final java.lang.String testCaseTag = java.lang.String.format( name= result= testId.getTestName()); assertTrue(output.contains(testCaseTag)); org.easymock.EasyMock.verify(mMockBuild); }
@org.junit.Test public void compileWithAnnotationProcessorNoAuto_classpath() throws java.lang.Exception { <START_MOD>java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> exclude = com.android.sched.util.collect.Lists.<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>create(com.android.jack.test.toolchain.JillBasedToolchain.class); <END_MOD>com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class<START_MOD>, exclude<END_MOD>); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorClasses(java.util.Collections.singletonList(com.android.jack.annotation.processor.sample.processors.SourceAnnotationProcessor.class.getName())); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.addToClasspath(processors); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); junit.framework.Assert.assertFalse(libOut.containsFileType(FileType.RSC)); libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath("Annotated2Duplicated", '/')); }
public void setMetaDirs(@javax.annotation.Nonnull java.util.List<java.io.File> metaDirs) { metaImport = <START_MOD>new java.util.ArrayList<java.io.File>(<END_MOD>metaDirs<START_MOD>)<END_MOD>; }
@java.lang.Override public void run() { try { java.io.File output = java.io.File.createTempFile("predex", ".jar"); output.deleteOnExit(); outputFiles[ii] = output; com.android.builder.internal.compiler.PreDexCache.getCache().preDexLibrary(<START_MOD>mDxExe, <END_MOD>input, output, dexOptions, mBuildToolInfo, false, clr); } catch (java.lang.Exception ignored) { } }
<START_MOD>public void testRequestUpdateStreamingServices() throws java.lang.Exception { java.util.List<java.lang.String> testClasses = java.util.Arrays.asList("class1", "class2"); mStreamingSession.requestUpdateStreamingServices(testClasses); java.util.List<android.telephony.mbms.StreamingServiceInfo> serviceInfos = ((java.util.List<android.telephony.mbms.StreamingServiceInfo>) (mCallback.waitOnStreamingServicesUpdated().arg1)); assertEquals(((android.telephony.mbms.ServiceInfo) (CtsStreamingService.STREAMING_SERVICE_INFO)), ((android.telephony.mbms.ServiceInfo) (serviceInfos.get(0)))); assertEquals(0, mCallback.getNumErrorCalls()); java.util.List<java.util.List> requestStreamingServicesCalls = getMiddlewareCalls(CtsStreamingService.METHOD_REQUEST_UPDATE_STREAMING_SERVICES); assertEquals(1, requestStreamingServicesCalls.size()); assertEquals(3, requestStreamingServicesCalls.get(0).size()); java.util.List<java.lang.String> middlewareReceivedServiceClasses = ((java.util.List<java.lang.String>) (requestStreamingServicesCalls.get(0).get(2))); assertEquals(testClasses.size(), middlewareReceivedServiceClasses.size()); }<END_MOD>
public void <START_MOD>testWildcardsRejectedForIpAddress<END_MOD>() { <START_MOD>assertFalse<END_MOD>(verifier.<START_MOD>verify<END_MOD>(<START_MOD>"1.2.3.4"<END_MOD>, <START_MOD>new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate("cn=*.2.3.4")<END_MOD>)); <START_MOD>assertFalse<END_MOD>(verifier.<START_MOD>verify<END_MOD>(<START_MOD>"1.2.3.4"<END_MOD>, <START_MOD>new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate("cn=*.2.3.4").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_IPA_NAME, "*.2.3.4").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, "*.2.3.4"))); assertFalse(verifier.verify("2001:1234::1", new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate("cn=*:1234::1"))); assertFalse(verifier.verify("2001:1234::1", new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate("cn=*:1234::1").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_IPA_NAME, "*:1234::1").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, "*:1234::1")<END_MOD>)); }
<START_MOD>@java.lang.Override public javax.net.ssl.SSLEngineResult.HandshakeStatus getHandshakeStatus() { synchronized(stateLock) { switch (engineState) { case HANDSHAKE_WANTED : if (getUseClientMode()) { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_WRAP; } else { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_UNWRAP; } case HANDSHAKE_STARTED : if ((handshakeSink.available()) > 0) { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_WRAP; } else { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_UNWRAP; } case HANDSHAKE_COMPLETED : if ((handshakeSink.available()) == 0) { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING; } else { return javax.net.ssl.SSLEngineResult.HandshakeStatus.NEED_WRAP; } case NEW : case MODE_SET : case CLOSED : case READY : case READY_HANDSHAKE_CUT_THROUGH : return javax.net.ssl.SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING; default : break; } throw new java.lang.IllegalStateException(("Unexpected engine state: " + (engineState))); } }<END_MOD>
public java.lang.String getHostExecutionFlags() { return java.lang.String.format( -Ximage:%s <START_MOD>getHostPICCoreImagePath<END_MOD>()); }
@java.lang.Override public int getStreamingServices(java.lang.String appName, int <START_MOD>subscriptionId<END_MOD>, java.util.List<java.lang.String> serviceClasses) throws android.<START_MOD>telephony<END_MOD>.<START_MOD>mbms.MbmsException<END_MOD> { return 0; }
public com.android.builder.DefaultBuildType initWith(com.android.builder.DefaultBuildType that) { _initWith(that); setDebuggable(that.isDebuggable()); setJniDebugBuild(that.isJniDebugBuild()); setRenderscriptDebugBuild(that.isRenderscriptDebugBuild()); setRenderscriptOptimLevel(that.getRenderscriptOptimLevel()); setPackageNameSuffix(that.getPackageNameSuffix()); setVersionNameSuffix(that.getVersionNameSuffix()); setRunProguard(that.isRunProguard()); setZipAlign(that.isZipAlign()); setSigningConfig(that.getSigningConfig()); <START_MOD>setProguardRules(that.getProguardRules()); <END_MOD>return this; }
<START_MOD>public com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutPoint toLayout() { return mCanvas.controlToLayout(this); }<END_MOD>
public void testDuplicateEntries() throws java.lang.Exception { java.lang.String name1 = "test_file_name1"; java.lang.String name2 = "test_file_name2"; java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream(baos); out.putNextEntry(new java.util.zip.ZipEntry(name2)); byte[] <START_MOD>bytes; bytes = "bad".getBytes(java.nio.charset.Charset.forName("UTF-8")); int badSize = bytes.length; out.write(bytes); out.closeEntry(); out.putNextEntry(new java.util.zip.ZipEntry(name1)); bytes = "good".getBytes(java.nio.charset.Charset.forName("UTF-8")); int goodSize = bytes.length; out.write(bytes); out.closeEntry(); out.close(); byte[] <END_MOD>buffer = baos.toByteArray(); libcore.java.util.zip.ZipFileTest.replaceBytes(buffer, name2.getBytes(), name1.getBytes()); java.io.File badZip = createTemporaryZipFile(); libcore.java.util.zip.ZipFileTest.writeBytes(badZip, buffer); try { java.util.zip.ZipFile bad = new java.util.zip.ZipFile(badZip); <START_MOD>java.util.zip.ZipEntry entry = bad.getEntry(name1); if (entry == null) { java.lang.System.err.println( returns no entry } else { long entrySize = entry.getSize(); if (entrySize == badSize) { java.lang.System.err.println( returns the first entry it finds } else if (entrySize == goodSize) { java.lang.System.err.println( returns the second entry it finds } java.lang.System.err.println(( is:   + entrySize)); } try { bad.close(); } catch (java.lang.Exception e) { } <END_MOD>fail(); } catch (java.util.zip.ZipException expected) { } }
<START_MOD>public<END_MOD> <START_MOD>boolean cancel<END_MOD>() { synchronized(<START_MOD>cancelled<END_MOD>) { <START_MOD>if (cancelled[0]) <END_MOD>return <START_MOD>false; cancelled[0] = true; return scheduled<END_MOD>; } }
<START_MOD>@java.lang.Override public void stop() { if (com.android.bips.p2p.P2pPrinterConnection.DEBUG) android.util.Log.d(com.android.bips.p2p.P2pPrinterConnection.TAG, "stop()"); if ((mMdnsDiscovery) != null) mMdnsDiscovery.stop(); if ((mMdnsDiscoveryTimeout) != null) mMdnsDiscoveryTimeout.stop(); if ((mConnection) != null) mConnection.stop(); mListener = null; }<END_MOD>
<START_MOD>private void checkLdexpFloat2Int2() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inY, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testLdexpFloat2Int2(inX, out); verifyResultsLdexpFloat2Int2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLdexpFloat2Int2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testLdexpFloat2Int2(inX, out); verifyResultsLdexpFloat2Int2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLdexpFloat2Int2: " + (e.toString()))); } }<END_MOD>
<START_MOD>public void setCrosshairLocation(int x, int y) { synchronized(this) { crosshairLocation = new org.eclipse.swt.graphics.Point(x, y); } notifyCrosshairMoved(); }<END_MOD>
@java.lang.Override public void accept(int result) { if (result == (android.app.Activity.RESULT_OK)) { logFail(); status = FAIL; } else { if ((<START_MOD>(<END_MOD>mNm.getEffectsSuppressor()) == null<START_MOD>) || (mNm.getEffectsSuppressor().equals(com.android.cts.verifier.notifications.NotificationListenerVerifierActivity.VR_NOTIFICATION_SERVICE))<END_MOD>) { status = PASS; } else { status = FAIL; } } next(); }
public static int throwOnError(int errorFlag) throws android.hardware.camera2.legacy.LegacyExceptionUtils.BufferQueueAbandonedException { <START_MOD>if<END_MOD> (errorFlag <START_MOD>==<END_MOD> <START_MOD>(<END_MOD>android.hardware.camera2.utils.CameraBinderDecorator.NO_ERROR<START_MOD>))<END_MOD> { return android.hardware.camera2.utils.CameraBinderDecorator.NO_ERROR; } <START_MOD>else<END_MOD> <START_MOD>if (errorFlag == (<END_MOD>android.hardware.camera2.utils.CameraBinderDecorator.ENODEV<START_MOD>))<END_MOD> { throw new android.hardware.camera2.legacy.LegacyExceptionUtils.BufferQueueAbandonedException(); } if (errorFlag < 0) { throw new java.lang.UnsupportedOperationException(( error   + errorFlag)); } return errorFlag; }
<START_MOD>public org.conscrypt.OpenSSLX509Certificate deleteExtension(java.lang.String oid) { long copy = org.conscrypt.NativeCrypto.X509_dup(mContext); org.conscrypt.NativeCrypto.X509_delete_ext(copy, oid); return new org.conscrypt.OpenSSLX509Certificate(copy); }<END_MOD>
<START_MOD>@java.lang.Override public java.math.BigInteger getSerialNumber() { return null; }<END_MOD>
@java.lang.Override public boolean satisfiedBy(android.net.NetworkSpecifier other) { <START_MOD>boolean match =<END_MOD> equals(other); <START_MOD>if (match) { if (((!(uidOfCallerValid)) || (!(uidOfClientValid))) || ((uidOfCaller) != (uidOfClient))) { android.util.Log.e("WifiAwareNetworkSpecifier",   mismatch of calling UID!? return false; <END_MOD>}<START_MOD> } return match; }<END_MOD>
private void loadSamplesForTarget(com.android.sdklib.IAndroidTarget target) { java.lang.String oldChoice = null; if ((mSamplesPaths.size()) > 0) { int selIndex = mSamplesCombo.getSelectionIndex(); if (selIndex > (-1)) { oldChoice = mSamplesCombo.getItem(selIndex); } } mSamplesCombo.removeAll(); mSamplesPaths.clear(); if (target != null) { java.lang.String samplesRootPath = target.getPath(IAndroidTarget.SAMPLES); java.io.File samplesDir = new java.io.File(samplesRootPath); findSamplesManifests(samplesDir, mSamplesPaths); if ((mSamplesPaths.size()) == 0) { mSamplesCombo.add( target has no samples. Please select another target. mSamplesCombo.select(0); return; } int selIndex = 0; int i = 0; int n = samplesRootPath.length(); <START_MOD>java.util.Set<java.lang.String> paths = new java.util.TreeSet<java.lang.String>(); <END_MOD>for (java.lang.String path : mSamplesPaths) { if ((path.length()) > n) { path = path.substring(n); if ((path.charAt(0)) == (java.io.File.separatorChar)) { path = path.substring(1); } if (path.endsWith(java.io.File.separator)) { path = path.substring(0, ((path.length()) - 1)); } path = path.replaceAll(java.util.regex.Pattern.quote(java.io.File.separator),   >   } if ((oldChoice != null) && (oldChoice.equals(path))) { selIndex = i; } <START_MOD>paths<END_MOD>.add(path); i++; } mSamplesCombo.<START_MOD>setItems(paths.toArray(new java.lang.String[0])); mSamplesCombo.<END_MOD>select(selIndex); } else { mSamplesCombo.add( select a target. mSamplesCombo.select(0); } }
@java.lang.Override public boolean forceRefresh() { if (<START_MOD>"".equals<END_MOD>(mServer)) { return false; } if (android.util.NtpTrustedTime.LOGD) android.util.Log.d(android.util.NtpTrustedTime.TAG,   from cache miss final android.net.SntpClient client = new android.net.SntpClient(); if (client.requestTime(mServer, ((int) (mTimeout)))) { mHasCache = true; mCachedNtpTime = client.getNtpTime(); mCachedNtpElapsedRealtime = client.getNtpTimeReference(); mCachedNtpCertainty = (client.getRoundTripTime()) / 2; return true; } else { return false; } }
public void doImport(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.backend.jayce.ImportConflictException, com.android.jack.ir.ast.JPackageLookupException, com.android.jack.ir.ast.JTypeLookupException { for (com.android.jack.library.<START_MOD>InputLibrary inputLibrary<END_MOD> : <START_MOD>inputLibraries<END_MOD>) { com.android.sched.vfs.InputRootVDir libraryVDir = <START_MOD>inputLibrary<END_MOD>.getInputVDir(); com.android.jack.backend.jayce.JayceFileImporter.logger.log(java.util.logging.Level.FINE,   {0} libraryVDir.getLocation().getDescription()); for (com.android.sched.vfs.InputVElement subFile : libraryVDir.list()) { importJayceFile(<START_MOD>inputLibrary<END_MOD>, subFile, session, ""); } } }
<START_MOD>@java.lang.Override public boolean isInstrumented() { return instrumented; }<END_MOD>
<START_MOD>private void allowAppsControl() { android.content.Intent allowAppsControlIntent = new android.content.Intent(ByodHelperActivity.ACTION_RESET_USER_RESTRICTION).putExtra(ByodHelperActivity.EXTRA_PARAMETER_1, UserManager.DISALLOW_APPS_CONTROL); startActivity(allowAppsControlIntent); }<END_MOD>
<START_MOD>private int getSmsFormat() { return getSmsImplementation().getSmsFormat(); }<END_MOD>
@java.lang.Override public void requestIsimAuthentication(java.lang.String nonce, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_ISIM_AUTHENTICATION, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) +   nonce =   + nonce)); } try { radioProxy.requestIsimAuthentication(rr.mSerial, convertNullToEmptyString(nonce)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "requestIsimAuthentication", e); } } }
<START_MOD>public void execute(org.w3c.dom.Element element) { renderClasses(element); }<END_MOD>
private void formatInternal(java.lang.String pattern, libcore.util.ZoneInfo.WallTime wallTime, libcore.util.ZoneInfo zoneInfo) { byte[] bytes = pattern.getBytes(java.nio.charset.StandardCharsets.<START_MOD>UTF_8<END_MOD>); if ((bytes.length) == 0) { return; } java.nio.ByteBuffer formatBuffer = java.nio.ByteBuffer.wrap(bytes); while ((formatBuffer.remaining()) > 0) { boolean outputCurrentByte = true; <START_MOD>byte currentByte = <END_MOD>formatBuffer.get(formatBuffer.position()); if (<START_MOD>currentByte<END_MOD> == '%') { outputCurrentByte = handleToken(formatBuffer, wallTime, zoneInfo); } if (outputCurrentByte) { <START_MOD>outputByte<END_MOD>(formatBuffer.get(formatBuffer.position())); } formatBuffer.position(((formatBuffer.position()) + 1)); } }
private static java.util.Locale initDefault(java.util.Locale.Category category) { return java.util.Locale.getInstance(java.lang.System.getProperty(category.languageKey, java.util.Locale.<START_MOD>NoImagePreloadHolder.<END_MOD>defaultLocale.getLanguage()), java.lang.System.getProperty(category.scriptKey, java.util.Locale<START_MOD>.NoImagePreloadHolder<END_MOD>.defaultLocale.getScript()), java.lang.System.getProperty(category.countryKey, java.util.Locale.<START_MOD>NoImagePreloadHolder.<END_MOD>defaultLocale.getCountry()), java.lang.System.getProperty(category.variantKey, java.util.Locale.<START_MOD>NoImagePreloadHolder.<END_MOD>defaultLocale.getVariant()), null); }
public void addF64(android.support.v8.renderscript.Double3 v) { if (shouldThunk()) { mN.addF64(new android.renderscript.Double3(v.x, v.y, v.z)); return; } addF64(v.x); addF64(v.y); addF64(v.z); }
<START_MOD>private void processNewResourceFile(java.io.File sourceFolder, com.android.ide.common.res2.ResourceFile resourceFile) throws com.android.ide.common.res2.MergingException { if (resourceFile != null) { if ((resourceFile.getType()) == (DataFile.FileType.GENERATED_FILES)) { mGeneratedSet.processNewDataFile(sourceFolder, resourceFile, true); } else { processNewDataFile(sourceFolder, resourceFile, true); } } }<END_MOD>
<START_MOD>private void checkLengthFloat4() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testLengthFloat4(inV, out); verifyResultsLengthFloat4(inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLengthFloat4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLengthFloat4(inV, out); verifyResultsLengthFloat4(inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLengthFloat4: " + (e.toString()))); } }<END_MOD>
public android.bluetooth.le.AdvertisingSetParameters.Builder setIncludeTxPower(boolean includeTxPower) { this.<START_MOD>mIncludeTxPower<END_MOD> = includeTxPower; return this; }
public void test2() throws java.lang.Exception {<START_MOD> mEnabled = com.google.common.collect.Sets.newHashSet(PluralsDetector.MISSING, PluralsDetector.EXTRA);<END_MOD> assertEquals(("" + ((((((((( Error: For locale   (Czech) the following quantities should also be defined: few, many [MissingQuantity] +   <plurals name= +   ^ +   Warning: For language   (Chinese) the following quantities are not relevant: one [UnusedQuantity] +   <plurals name= +   ^ +   Warning: For language   (Chinese) the following quantities are not relevant: one [UnusedQuantity] +   <plurals name= +   ^ +   errors, 2 warnings lintProject("res/values-zh-rCN/plurals3.xml", "res/values-cs/plurals3.xml")); }
private void updateDevicePref() { if ((mThisDevice) != null) { if (android.text.TextUtils.isEmpty(mThisDevice.deviceName)) { mThisDevicePref.setTitle(mThisDevice.deviceAddress); } else { mThisDevicePref.setTitle(mThisDevice.deviceName); } <START_MOD>java.lang.String[] statusArray = getResources().getStringArray(R.array.wifi_p2p_status); java.lang.StringBuffer sb = new java.lang.StringBuffer(); sb.append(statusArray[mThisDevice.status]); if (((mConnectedGroup) != null) && (!(android.text.TextUtils.isEmpty(mConnectedGroup.getNetworkName())))) { sb.append("("); sb.append(mConnectedGroup.getNetworkName()); sb.append(")"); } mThisDevicePref.setSummary(sb.toString()); <END_MOD>mThisDevicePref.setPersistent(false); mThisDevicePref.setEnabled(true); mThisDevicePref.setSelectable(false); } }
<START_MOD>@java.lang.Override public android.net.wifi.aware.WifiAwareNetworkSpecifier createFromParcel(android.os.Parcel in) { android.net.wifi.aware.WifiAwareNetworkSpecifier ns = new android.net.wifi.aware.WifiAwareNetworkSpecifier(); ns.type = in.readInt(); ns.role = in.readInt(); ns.clientId = in.readInt(); ns.sessionId = in.readInt(); ns.peerId = in.readInt(); ns.peerMac = in.createByteArray(); ns.pmk = in.createByteArray(); ns.passphrase = in.readString(); return ns; }<END_MOD>
public void test_handshake_failsWithInvalidSCT() throws java.lang.Exception { org.conscrypt.OpenSSLSocketImplTest.TestConnection connection = new org.conscrypt.OpenSSLSocketImplTest.TestConnection(new java.security.cert.X509Certificate[]{ cert, ca }, certKey); connection.clientHooks.ctVerificationEnabled = true; connection.serverHooks.sctTLSExtension = org.conscrypt.TestUtils.readTestFile("ct-signed-timestamp-list-invalid"); try { connection.doHandshake(); fail( not thrown } catch (java.util.concurrent.ExecutionException e) { assertEquals(javax.net.ssl.SSLHandshakeException.class, e.getCause().getClass()); assertEquals(java.security.cert.CertificateException.class, e.getCause().getCause().getClass()); } }
<START_MOD>public void testPerMill() { java.lang.String pattern = "0.00\u2030"; double number = 0.1; java.text.DecimalFormatSymbols dfs; android.icu.text.DecimalFormatSymbols icuDfs; java.util.Locale locale; locale = java.util.Locale.US; dfs = new java.text.DecimalFormatSymbols(locale); assertEquals("100.00\u2030", new java.text.DecimalFormat(pattern, dfs).format(number)); dfs = new java.text.DecimalFormatSymbols(locale); dfs.setPerMill(';'); assertEquals("100.00;", new java.text.DecimalFormat(pattern, dfs).format(number)); locale = new java.util.Locale("ar"); icuDfs = new android.icu.text.DecimalFormatSymbols(locale); assertEquals("؉", icuDfs.getPerMillString()); dfs = new java.text.DecimalFormatSymbols(locale); assertEquals("١٠٠٫٠٠؉", new java.text.DecimalFormat(pattern, dfs).format(number)); locale = new java.util.Locale("en_US_POSIX"); icuDfs = new android.icu.text.DecimalFormatSymbols(locale); assertEquals("0/00", icuDfs.getPerMillString()); dfs = new java.text.DecimalFormatSymbols(locale); assertEquals("100.00\u2030", new java.text.DecimalFormat(pattern, dfs).format(number)); }<END_MOD>
@java.lang.Override public synchronized void close() throws com.android.jack.library.LibraryIOException { if ((linkedOutputJackLib) <START_MOD>!=<END_MOD> null) <START_MOD>{ linkedOutputJackLib.notifyToClose(); } else if<END_MOD> (!(originalVFS.isClosed())) { try { for (com.android.sched.vfs.InputVFS currentSectionVFS : sectionVFS.values()) { currentSectionVFS.close(); } vfs.close(); } catch (java.io.IOException e) { throw new com.android.jack.library.LibraryIOException(getLocation(), e); } } }
<START_MOD>@com.android.annotations.Nullable <END_MOD>public <START_MOD>com.android.builder.model.AndroidProject<END_MOD> execute(<START_MOD>@com.android.annotations.NonNull <END_MOD>java.util.List<java.lang.String> arguments, @com.android.annotations.Nullable java.io.OutputStream stdout, <START_MOD>boolean returnModel, @com.android.annotations.NonNull <END_MOD>java.lang.String... tasks) { org.gradle.tooling.ProjectConnection connection = getProjectConnection(); try { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add("-i"); args.add("-u"); args.addAll(arguments); connection.newBuild().forTasks(tasks).setStandardOutput(stdout).withArguments(args.toArray(new java.lang.String[args.size()])).run(); <START_MOD>if (returnModel) { return connection.getModel(com.android.builder.model.AndroidProject.class); } <END_MOD>} finally { connection.close(); } <START_MOD>return null; }<END_MOD>
@java.lang.Override protected void _initWith(@com.android.annotations.NonNull com.android.builder.model.BaseConfig that) { super._initWith(that); shrinkResources = <START_MOD>((com.android.build.gradle.internal.dsl.BuildType) (<END_MOD>that<START_MOD>))<END_MOD>.isShrinkResources(); useJack = <START_MOD>((com.android.build.gradle.internal.dsl.BuildType) (<END_MOD>that<START_MOD>))<END_MOD>.<START_MOD>getUseJack()<END_MOD>; }
<START_MOD>public void setAlpnProtocols(byte[][] protocols) { this.mAlpnProtocols = android.net.SSLCertificateSocketFactory.toNpnProtocolsList(protocols); }<END_MOD>
<START_MOD>public void test_setAll$T() { java.lang.String[] strings = new java.lang.String[3]; strings[0] = "a"; strings[0] = "b"; strings[0] = "c"; java.util.Arrays.setAll(strings, ( x) -> "a" + x); assertEquals("a0", strings[0]); assertEquals("a1", strings[1]); assertEquals("a2", strings[2]); try { java.util.Arrays.setAll(strings, null); fail(); } catch (java.lang.NullPointerException e) { } }<END_MOD>
@java.lang.SuppressWarnings("unchecked") private void initClientModuleCombo() { final java.lang.Module[] modules = com.intellij.openapi.module.ModuleManager.getInstance(myProject).getModules(); for (java.lang.Module module : modules) { final org.jetbrains.android.facet.AndroidFacet facet = org.jetbrains.android.facet.AndroidFacet.getInstance(module); if ((facet != null) && ((com.intellij.openapi.roots.ModuleRootManager.getInstance(module).getContentRoots().length) > 0)) { java.lang.String moduleNameLabel = module.getName(); if ((facet.getManifest()) != null) { final java.lang.String packageName = facet.getManifest().getPackage().getValue(); if (!(com.google.common.base.Strings.isNullOrEmpty(packageName))) { moduleNameLabel += java.lang.String.format( (%s) packageName); } } myClientModuleCombo.addItem(new com.android.tools.idea.<START_MOD>ui.ApiComboBoxItem<END_MOD>(module.getName(), moduleNameLabel, 1, 1)); } } }
<START_MOD>public void handleWpsTimeoutEvent(java.lang.String iface) { sendMessage(iface, com.android.server.wifi.WifiMonitor.WPS_TIMEOUT_EVENT); }<END_MOD>
public void addBuildType(@com.android.annotations.NonNull com.android.build.gradle.internal.dsl.BuildType buildType) { buildType.init(signingConfigs.get(com.android.builder.core.BuilderConstants.DEBUG)); java.lang.String name = buildType.getName(); com.android.build.gradle.internal.VariantManager.checkName(name, "BuildType"); if (productFlavors.containsKey(name)) { throw new java.lang.RuntimeException( names cannot collide with ProductFlavor names } com.android.build.gradle.internal.api.DefaultAndroidSourceSet mainSourceSet = ((com.android.build.gradle.internal.api.DefaultAndroidSourceSet) (extension.getSourceSetsContainer().maybeCreate(name))); com.android.build.gradle.internal.api.DefaultAndroidSourceSet unitTestSourceSet = null; if (variantFactory.hasTestScope()) { unitTestSourceSet = ((com.android.build.gradle.internal.api.DefaultAndroidSourceSet) (extension.getSourceSetsContainer().maybeCreate(com.android.build.gradle.internal.VariantManager.computeSourceSetName(buildType.getName(), com.android.builder.core.VariantType.UNIT_TEST)))); } com.android.build.gradle.internal.BuildTypeData buildTypeData = new com.android.build.gradle.internal.BuildTypeData(buildType, project, mainSourceSet, unitTestSourceSet); <START_MOD>buildTypes.put(name, <END_MOD>buildTypeData); }
public int availableProcessors() { return ((int) (Libcore.os.sysconf(<START_MOD>android.os.OsConstants.<END_MOD>_SC_NPROCESSORS_CONF))); }
<START_MOD>private static boolean runAccessCheck(java.lang.String source_type, java.lang.String target_type, java.lang.String obj_class, java.lang.String perm) { java.lang.String s_usr = "u"; java.lang.String t_usr = "u"; java.lang.String s_role = "r"; java.lang.String t_role; if (obj_class.equals("filesystem")) { s_role = "object_r"; t_role = "object_r"; } else if (obj_class.equals("process")) { t_role = "r"; } else { t_role = "object_r"; } java.lang.String source = java.lang.String.format("%s:%s:%s:s0", s_usr, s_role, source_type); java.lang.String target = java.lang.String.format("%s:%s:%s:s0", t_usr, t_role, target_type); return android.security.cts.SELinuxTest.checkSELinuxAccess(source, target, obj_class, perm, ""); }<END_MOD>
<START_MOD>public static android.os.StructTimeval fromMillis(long millis) { long tv_sec = millis / 1000; long tv_usec = (millis - (tv_sec * 1000)) * 1000; return new android.os.StructTimeval(tv_sec, tv_usec); }<END_MOD>
<START_MOD>public org.eclipse.core.resources.IResource findResourceFile(java.lang.String url) { if (!(url.startsWith("@"))) { return null; } int typeEnd = url.indexOf('/', 1); if (typeEnd == (-1)) { return null; } java.lang.String typeName = url.substring(1, typeEnd); com.android.ide.eclipse.adt.internal.resources.ResourceType type = com.android.ide.eclipse.adt.internal.resources.ResourceType.getEnum(typeName); if (type == null) { return null; } java.lang.String name = url.substring((typeEnd + 1)); return findResourceFile(type, name); }<END_MOD>
@com.android.annotations.Nullable @java.lang.Override public java.util.Map<java.lang.String, java.lang.String> getTestInstrumentationRunnerArguments() { return <START_MOD>com.google.common.collect.Maps.newHashMap()<END_MOD>; }
@org.junit.Test public void test002f() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackOutput = runTest002(true, "keep-first", errOut, false, false); <START_MOD>com.android.jack.library.InputJackLibrary lib = null; try { lib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibraryFromDir<END_MOD>(jackOutput); checkResourceContent(<START_MOD>lib<END_MOD>, com.android.jack.fileconflict.FileConflictTests.<START_MOD>RESOURCE1_PATH<END_MOD>, "Res1"); checkResourceContent(<START_MOD>lib<END_MOD>, com.android.jack.fileconflict.FileConflictTests.<START_MOD>RESOURCE2_PATH<END_MOD>, "Res2"); checkResourceContent(<START_MOD>lib<END_MOD>, com.android.jack.fileconflict.FileConflictTests.<START_MOD>RESOURCE3_PATH<END_MOD>, "Res3"); <START_MOD>} finally { if (lib != null) { lib.close(); } } <END_MOD>junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); }
<START_MOD>public void testServerSocketChannel() throws java.lang.Exception { java.nio.channels.ServerSocketChannel ssc = java.nio.channels.ServerSocketChannel.open(); ssc.bind(null); ssc.close(); assertEquals(java.util.Collections.EMPTY_MAP, tagger.getLiveDescriptors()); }<END_MOD>
@javax.annotation.Nonnull private com.android.jack.test.toolchain.AndroidToolchain createReferenceToolchain(<START_MOD>@javax.annotation.Nullable java.util.Map<java.lang.String, java.lang.String> properties<END_MOD>) { com.android.jack.test.toolchain.AndroidToolchain referenceTestTools = com.android.jack.test.toolchain.AbstractTestTools.getReferenceToolchain(com.android.jack.test.toolchain.AndroidToolchain.class); referenceTestTools.setSourceLevel(level); referenceTestTools.setWithDebugInfos(withDebugInfos); <START_MOD>if ((properties != null) && (referenceTestTools instanceof com.android.jack.test.toolchain.JackBasedToolchain)) { com.android.jack.test.toolchain.JackBasedToolchain jackBasedToolchain = ((com.android.jack.test.toolchain.JackBasedToolchain) (referenceTestTools)); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : properties.entrySet()) { jackBasedToolchain.addProperty(entry.getKey(), entry.getValue()); } } <END_MOD>return referenceTestTools; }
<START_MOD>@org.junit.Test public void testNamePatternClass() { com.android.jack.shrob.spec.NameSpecification spec = com.android.jack.shrob.proguard.GrammarActions.name("a.b.*.d", NameFormat.CLASS); junit.framework.Assert.assertTrue(spec.matches("a.b.c.d")); junit.framework.Assert.assertFalse(spec.matches("a.b.c.e.d")); junit.framework.Assert.assertTrue(spec.matches("a.b.c/e.d")); spec = com.android.jack.shrob.proguard.GrammarActions.name("a.b.**.d", NameFormat.CLASS); junit.framework.Assert.assertTrue(spec.matches("a.b.c.d")); junit.framework.Assert.assertTrue(spec.matches("a.b.c.e.d")); spec = com.android.jack.shrob.proguard.GrammarActions.name("a.b.?.d", NameFormat.CLASS); junit.framework.Assert.assertTrue(spec.matches("a.b.c.d")); junit.framework.Assert.assertFalse(spec.matches("a.b.ce.d")); junit.framework.Assert.assertFalse(spec.matches("a.b...d")); junit.framework.Assert.assertTrue(spec.matches("a.b./.d")); }<END_MOD>
private void addListeners(java.io.PrintStream writer) { if (getBooleanArgument(com.android.test.runner.AndroidJUnitRunner.ARGUMENT_SUITE_ASSIGNMENT)) { addListener(new com.android.test.runner.listener.SuiteAssignmentPrinter(writer)); } else { addListener(new org.junit.internal.TextListener(writer)); addListener(new com.android.test.runner.listener.InstrumentationResultPrinter(this)); addDelayListener(); addCoverageListener(); } }
@java.lang.Override public boolean processMessage(android.os.Message msg) { log(("DeliveringState.processMessage:" + (msg.what))); switch (msg.what) { case com.android.internal.telephony.InboundSmsHandler.EVENT_NEW_SMS : handleNewSms(((android.os.AsyncResult) (msg.obj))); sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_INJECT_SMS : handleInjectSms(((android.os.AsyncResult) (msg.obj))); sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_SMS : com.android.internal.telephony.InboundSmsTracker inboundSmsTracker = ((com.android.internal.telephony.InboundSmsTracker) (msg.obj)); if (processMessagePart(inboundSmsTracker)) { transitionTo(mWaitingState); } else { log(( broadcast sent on processing EVENT_BROADCAST_SMS in Delivering   +   Return to Idle state sendMessage(com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE); } return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE : transitionTo(mIdleState); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.<START_MOD>EVENT_BROADCAST_COMPLETE : case com.android.internal.telephony.InboundSmsHandler.EVENT_START_ACCEPTING_SMS : default : return NOT_HANDLED;<END_MOD> } }
public void <START_MOD>test_SSLEngine_getSupportedCipherSuitesReturnsCopies<END_MOD>() throws java.lang.Exception { libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); javax.net.ssl.SSLEngine e = c.clientContext.createSSLEngine(); <START_MOD>assertNotSame(<END_MOD>e.getSupportedCipherSuites(), e.getSupportedCipherSuites()); c.close(); }
public boolean cancelBondProcess(android.bluetooth.BluetoothDevice device) { if (!(com.android.bluetooth.Utils.<START_MOD>checkCallerAllowManagedProfiles<END_MOD>(<START_MOD>mService<END_MOD>))) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG,   - Not allowed for non-active user return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.cancelBondProcess(device); }
public static libcore.icu.LocaleData get(java.util.Locale locale) <START_MOD>throws java.util.IllformedLocaleException { final java.lang.String languageTag = locale.toLanguageTag(); synchronized(libcore.icu.LocaleData.localeDataCache) { libcore.icu.LocaleData localeData = libcore.icu.LocaleData.localeDataCache.get(languageTag);<END_MOD> if (<START_MOD>localeData != null) { return localeData; } } libcore.icu.LocaleData newLocaleData = libcore.icu.LocaleData.initLocaleData(<END_MOD>locale<START_MOD>); synchronized(libcore.icu.LocaleData.localeDataCache) { libcore.icu.LocaleData localeData = libcore.icu.LocaleData.localeDataCache.get(languageTag); if (localeData !=<END_MOD> null) { return localeData; } <START_MOD>libcore.icu.LocaleData.localeDataCache.put(languageTag,<END_MOD> newLocaleData<START_MOD>);<END_MOD> return newLocaleData<START_MOD>; } }<END_MOD>
<START_MOD>public static long mmap(long address, long byteCount, int prot, int flags, java.io.FileDescriptor fd, long offset) throws android.os.ErrnoException { return Libcore.os.mmap(address, byteCount, prot, flags, fd, offset); }<END_MOD>
private boolean checkListenerPermission(int events, java.lang.String callingPackage, java.lang.String message) { if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_LOCATION)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); <START_MOD>if ((mAppOps.noteOp(AppOpsManager.OP_COARSE_LOCATION, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return false; } <END_MOD>} if ((events & (android.telephony.PhoneStateListener.LISTEN_CELL_INFO)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.ACCESS_COARSE_LOCATION, null); <START_MOD>if ((mAppOps.noteOp(AppOpsManager.OP_COARSE_LOCATION, android.os.Binder.getCallingUid(), callingPackage)) != (android.app.AppOpsManager.MODE_ALLOWED)) { return false; } <END_MOD>} if ((events & (com.android.server.TelephonyRegistry.ENFORCE_PHONE_STATE_PERMISSION_MASK)) != 0) { if (!(com.android.internal.telephony.TelephonyPermissions.checkCallingOrSelfReadPhoneState(mContext, callingPackage, message))) { return false; } } if ((events & (com.android.server.TelephonyRegistry.PRECISE_PHONE_STATE_PERMISSION_MASK)) != 0) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRECISE_PHONE_STATE, null); } return true; }
public java.lang.String toSafeString() { java.lang.String scheme = getScheme(); java.lang.String ssp = getSchemeSpecificPart(); if (scheme != null) { if (((((scheme.equalsIgnoreCase("tel")) || (scheme.equalsIgnoreCase("sip"))) || (scheme.equalsIgnoreCase("sms"))) || (scheme.equalsIgnoreCase("smsto"))) || (scheme.equalsIgnoreCase("mailto"))) { java.lang.StringBuilder builder = new java.lang.StringBuilder(64); builder.append(scheme); builder.append(':'); if (ssp != null) { for (int i = 0; i < (ssp.length()); i++) { char c = ssp.charAt(i); if (((c == '-') || (c == '@')) || (c == '.')) { builder.append(c); } else { builder.append('x'); } } } return builder.toString(); } <START_MOD>else if (((scheme.equalsIgnoreCase("http")) || (scheme.equalsIgnoreCase("https"))) || (scheme.equalsIgnoreCase("ftp"))) { ssp = (("//" + (getHost())) + ((getPort()) != (-1) ? ":" + (getPort()) : "")) + "/..."; } <END_MOD>} java.lang.StringBuilder builder = new java.lang.StringBuilder(64); if (scheme != null) { builder.append(scheme); builder.append(':'); } if (ssp != null) { builder.append(ssp); } return builder.toString(); }
<START_MOD>public<END_MOD> <START_MOD>void<END_MOD> <START_MOD>addSafely<END_MOD>(java.lang.Object obj) { <START_MOD>boolean retry; final int oldPos = mPos; do { retry = false; try { add(obj); } catch<END_MOD> (java.lang.<START_MOD>ArrayIndexOutOfBoundsException e<END_MOD>) { <START_MOD>mPos<END_MOD> <START_MOD>= oldPos<END_MOD>; <START_MOD>resize<END_MOD>(<START_MOD>((mLen<END_MOD>) <START_MOD>*<END_MOD> <START_MOD>2))<END_MOD>; <START_MOD>retry<END_MOD> <START_MOD>=<END_MOD> <START_MOD>true<END_MOD>; } } <START_MOD>while<END_MOD> <START_MOD>(retry )<END_MOD>; }
public static com.android.hierarchyviewerlib.models.ViewNode parseViewHierarchy(java.io.BufferedReader in, com.android.hierarchyviewerlib.models.Window window) { com.android.hierarchyviewerlib.models.ViewNode currentNode = null; int currentDepth = -1; java.lang.String line; try { while ((line = in.readLine()) != null) { if ("DONE.".equalsIgnoreCase(line)) { break; } int depth = 0; while ((line.charAt(depth)) ==     { depth++; } while (depth <= currentDepth) { if (currentNode != null) { currentNode = currentNode.parent; } currentDepth--; } <START_MOD>try { <END_MOD>currentNode = new com.android.hierarchyviewerlib.models.ViewNode(window, currentNode, line.substring(depth)); } catch (java.<START_MOD>lang.NumberFormatException<END_MOD> e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DeviceBridge.TAG, ( reading <START_MOD>  + (line.substring(depth)))); } currentDepth = depth; } } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DeviceBridge.TAG, ( reading <END_MOD>view hierarchy stream:   + (e.getMessage()))); return null; } if (currentNode == null) { return null; } while ((currentNode.parent) != null) { currentNode = currentNode.parent; } return currentNode; }
@java.lang.Override public void run() { java.lang.String label = java.lang.String.format( attribute %1$s actions.get(0).getTitle()); if ((actions.size()) > 1) { label += java.lang.String.format( (%1$d elements) actions.size()); } if (mEditor.isEditXmlModelPending()) { logError( '%1$s' failed: XML changes pending, document might be corrupt. label); return; } mEditor.wrapUndoEditXmlModel(label, new java.lang.Runnable() { public void run() { for (com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction a2 : actions) { if (a2 instanceof com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) { ((com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) (a2)).<START_MOD>getCallback().action(<END_MOD>a2, key, (!isChecked)); } } } }); }
<START_MOD>@java.lang.Override public void deflectCall(java.lang.String callId, java.lang.String deflectNumber) { try { android.telecom.Log.startSession(LogUtils.Sessions.ICA_DEFLECT_CALL, mOwnerComponentName); long token = android.os.Binder.clearCallingIdentity(); try { synchronized(mLock) { android.telecom.Log.i(this, "deflectCall(%s,%s)", callId, deflectNumber); com.android.server.telecom.Call call = mCallIdMapper.getCall(callId); if (call != null) { mCallsManager.deflectCall(call, deflectNumber); } else { android.telecom.Log.w(this, "deflectCall, unknown call id: %s", callId); } } } finally { android.os.Binder.restoreCallingIdentity(token); } } finally { android.telecom.Log.endSession(); } }<END_MOD>
private <START_MOD>com.android.ide.eclipse.adt.internal.sdk.LayoutDevice<END_MOD> <START_MOD>getSelectedDevice<END_MOD>() { <START_MOD>return<END_MOD> ((<START_MOD>com.android.ide.eclipse.adt.internal.sdk.LayoutDevice) (mDeviceCombo.getData<END_MOD>())); }
public android.bluetooth.le.AdvertisingSetParameters.Builder setPrimaryPhy(int primaryPhy) { if ((primaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_1M)) && (primaryPhy != (android.bluetooth.BluetoothDevice.PHY_LE_CODED))) { throw new java.lang.IllegalArgumentException(( primaryPhy   + primaryPhy)); } this.<START_MOD>mPrimaryPhy<END_MOD> = primaryPhy; return this; }
static final java.lang.String getMediaDirString()<START_MOD> { android.os.Bundle bundle = android.support.test.InstrumentationRegistry.getArguments(); java.lang.String mediaDirString = bundle.getString("media-path"); if (mediaDirString != null) { android.util.Log.w( user-supplied media-path string %s mediaDirString); return mediaDirString + (mediaDirString.endsWith("/") ? "" : "/"); } else<END_MOD> { return (android.mediastress.cts.WorkDir.getTopDirString()) + "test/"; }<START_MOD> }<END_MOD>
public void test_joinGroupLjava_net_SocketAddressLjava_net_NetworkInterface_IPv6() throws java.lang.Exception { test_joinGroupLjava_net_SocketAddressLjava_net_NetworkInterface(<START_MOD>ipv6networkInterface, <END_MOD>org.apache.harmony.tests.java.net.MulticastSocketTest.GOOD_IPv6, org.apache.harmony.tests.java.net.MulticastSocketTest.BAD_IPv6); }
@com.googlecode.android_scripting.rpc.Rpc(description =   current WFC Mode if Enabled. public java.lang.String imsGetWfcMode() { if (<START_MOD>!<END_MOD>(com.android.ims.ImsManager.<START_MOD>isWfcEnabledByUserForSlot<END_MOD>())) { return TelephonyConstants.WFC_MODE_DISABLED; } return com.googlecode.android_scripting.facade.telephony.TelephonyUtils.getWfcModeString(com.android.ims.ImsManager.<START_MOD>getWfcModeForSlot<END_MOD>()); }
private void startSocketListener() { if (com.android.bluetooth.opp.BluetoothOppService.D) android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG,   Socket Listeners stopListeners(); mServerSocket = com.android.bluetooth.ObexServerSockets.createInsecure(this); com.android.bluetooth.sdp.SdpManager sdpManager = com.android.bluetooth.sdp.SdpManager.getDefaultManager(); if ((sdpManager == null) || ((mServerSocket) == null)) { android.util.Log.e(com.android.bluetooth.opp.BluetoothOppService.TAG, ((( object is NULL sdp manager : + sdpManager) +   mServerSocket: + (mServerSocket))); return; } sdpManager.createOppOpsRecord( Object Push mServerSocket.getRfcommChannel(), mServerSocket.getL2capPsm(), 258, SdpManager.<START_MOD>OPP_FORMAT<END_MOD>); }
public void force(boolean metadata) throws java.io.IOException { checkOpen(); if (((mode) & (O_ACCMODE)) != (O_RDONLY)) { try { if (metadata) { Libcore.os.fsync(fd); } else { Libcore.os.fdatasync(fd); } } catch (<START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException errnoException) { throw errnoException.rethrowAsIOException(); } } }
<START_MOD>boolean connectAudio(android.bluetooth.BluetoothDevice device) { return connectAudioNative(com.android.bluetooth.Utils.getByteAddress(device)); }<END_MOD>
@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface create(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull com.android.jack.jayce.JayceClassOrInterfaceLoader classOrInterfaceLoader<START_MOD>, @javax.annotation.Nonnull com.android.jack.jayce.v0002.io.JayceInternalReaderImpl jayceInternalReaderImpl<END_MOD>)<START_MOD> throws java.io.IOException<END_MOD>;
private static org.json.JSONObject buildLinkProperties(android.net.LinkProperties data) throws org.json.JSONException { org.json.JSONObject info = new org.json.JSONObject(); info.put("InterfaceName", data.getInterfaceName()); info.put("LinkAddresses", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getLinkAddresses())); info.put("DnsServers", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getDnsServers())); info.put("Domains", data.getDomains()); info.put("Mtu", data.getMtu()); info.put("Routes", com.googlecode.android_scripting.jsonrpc.JsonBuilder.build(data.getRoutes())); <START_MOD>info.put("IsPrivateDnsActive", data.isPrivateDnsActive()); info.put("PrivateDnsServerName", data.getPrivateDnsServerName()); <END_MOD>return info; }
<START_MOD>java.util.Collection<java.io.File> getCompileLibraries();<END_MOD>
<START_MOD>public android.telephony.NetworkRegistrationState.VoiceSpecificStates getVoiceSpecificStates() { return mVoiceSpecificStates; }<END_MOD>
<START_MOD>private void checkModfFloatFloat() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); try { android.renderscript.Allocation outIret = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocOutIret(outIret); script.forEach_testModfFloatFloat(inX, out); verifyResultsModfFloatFloat(inX, outIret, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testModfFloatFloat: " + (e.toString()))); } try { android.renderscript.Allocation outIret = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocOutIret(outIret); scriptRelaxed.forEach_testModfFloatFloat(inX, out); verifyResultsModfFloatFloat(inX, outIret, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testModfFloatFloat: " + (e.toString()))); } }<END_MOD>
public long beforeHandshake(long context) throws javax.net.ssl.SSLException { long s = org.conscrypt.NativeCrypto.SSL_new(context); java.util.List<java.lang.String> cipherSuites = new java.util.ArrayList<java.lang.String>(); if ((enabledCipherSuites) == null) { cipherSuites.add(<START_MOD>"ECDHE-RSA-AES128-SHA"<END_MOD>); if (pskEnabled) { cipherSuites.add(0, <START_MOD>"ECDHE-PSK-AES128-GCM-SHA256"<END_MOD>); } } else { cipherSuites.addAll(enabledCipherSuites); } org.conscrypt.NativeCrypto.SSL_set_cipher_lists(s, cipherSuites.toArray(new java.lang.String[cipherSuites.size()])); if ((channelIdPrivateKey) != null) { org.conscrypt.NativeCrypto.SSL_set1_tls_channel_id(s, channelIdPrivateKey.getNativeRef()); } return s; }
void removeConfig(java.lang.String name) { <START_MOD>synchronized(mConfigs) { for (com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig config : mConfigs) { if (config.getName().equals(name)) { mConfigs<END_MOD>.remove(<START_MOD>config<END_MOD>); _seal(); <START_MOD>return; <END_MOD>}<START_MOD> } } }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String serialize() { float duration = ((float) (timeMs)) / 1000.0F; java.lang.String pydict = com.android.monkeyrunner.recorder.actions.PyDictUtilBuilder.newBuilder().addTuple("start", startx, starty).addTuple("end", endx, endy).add("duration", duration).add("steps", steps).build(); return "DRAG|" + pydict; }<END_MOD>
<START_MOD>@java.lang.Override protected java.lang.String getServiceInterface() { return com.android.internal.telephony.ims.ImsServiceControllerCompat.SERVICE_INTERFACE; }<END_MOD>
public static javax.net.ssl.<START_MOD>X509ExtendedTrustManager<END_MOD> getDefaultTrustManager() throws java.security.KeyManagementException { javax.net.ssl.<START_MOD>X509ExtendedTrustManager<END_MOD> result = org.conscrypt.SSLParametersImpl.defaultTrustManager; if (result == null) { org.conscrypt.SSLParametersImpl.defaultTrustManager = result = org.conscrypt.SSLParametersImpl.createDefaultTrustManager(); } return result; }
public long getGpsDateTime() { java.lang.String date = mAttributes.get(android.media.ExifInterface.TAG_GPS_DATESTAMP); java.lang.String time = mAttributes.get(android.media.ExifInterface.TAG_GPS_TIMESTAMP); if ((<START_MOD>(<END_MOD>date == null) || (time == null<START_MOD>)) || ((!(date.matches(".*[1-9].*"))) && (!(time.matches(".*[1-9].*")))<END_MOD>)) return -1; java.lang.String dateTimeString = (date +     + time; java.text.ParsePosition pos = new java.text.ParsePosition(0); try { java.util.Date datetime = android.media.ExifInterface.sFormatter.parse(dateTimeString, pos); if (datetime == null) return -1; return datetime.getTime(); } catch (java.lang.IllegalArgumentException ex) { return -1; } }
@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.CstInsn)) { return false; } com.android.dx.dex.code.CstInsn ci = ((com.android.dx.dex.code.CstInsn) (insn)); int cpi = ci.getIndex(); if (!(unsignedFitsInShort(cpi))) { return false; } com.android.dx.rop.cst.Constant cst = ci.getConstant(); if (!((<START_MOD>(<END_MOD>cst instanceof com.android.dx.rop.cst.CstMethodRef) || (cst instanceof com.android.dx.rop.cst.CstType))<START_MOD> || (cst instanceof com.android.dx.rop.cst.CstInvokeDynamic))<END_MOD>) { return false; } com.android.dx.rop.code.RegisterSpecList regs = ci.getRegisters(); return (com.android.dx.dex.code.form.Form35c.wordCount(regs)) >= 0; }
<START_MOD>@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); reset(mContext); mServiceContext = new com.android.server.connectivity.tethering.CarrierConfigChangeListenerTest.MockContext(mContext); mHandler = new android.os.Handler(android.os.Looper.myLooper()); mCallbackCount = 0; mListener = new com.android.server.connectivity.tethering.CarrierConfigChangeListener(mServiceContext, mHandler, () -> doCallback()); }<END_MOD>
<START_MOD>public void testAesGcm128Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, false, 1, true); }<END_MOD>
<START_MOD>private static void addIds(org.w3c.dom.Node node, java.util.Set<java.lang.String> ids) { if ((node.getNodeType()) == (org.w3c.dom.Node.ELEMENT_NODE)) { org.w3c.dom.Element element = ((org.w3c.dom.Element) (node)); java.lang.String id = element.getAttributeNS(com.android.ide.eclipse.adt.internal.editors.layout.gre.ANDROID_URI, com.android.ide.eclipse.adt.internal.editors.layout.gre.ATTR_ID); if (id.startsWith(com.android.ide.eclipse.adt.internal.editors.layout.gre.NEW_ID_PREFIX)) { ids.add(com.android.ide.common.layout.BaseViewRule.stripIdPrefix(id)); } } org.w3c.dom.NodeList children = node.getChildNodes(); for (int i = 0, n = children.getLength(); i < n; i++) { org.w3c.dom.Node child = children.item(i); com.android.ide.eclipse.adt.internal.editors.layout.gre.ClientRulesEngine.addIds(child, ids); } }<END_MOD>
<START_MOD>boolean addSavedPrinter(com.android.bips.discovery.DiscoveredPrinter printer) { android.net.Uri printerUri = printer.getUri(); com.android.bips.discovery.DiscoveredPrinter old = find(printerUri); if (old != null) { if (printer.equals(old)) return false; mSavedPrinters.remove(old); } mSavedPrinters.add(0, printer); save(); return true; }<END_MOD>
@java.lang.Override public void sendSMSExpectMore(java.lang.String smscPdu, java.lang.String pdu, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_SEND_SMS_EXPECT_MORE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.GsmSmsMessage msg = constructGsmSendSmsRilRequest(smscPdu, pdu); try { radioProxy.sendSMSExpectMore(rr.mSerial, msg); mMetrics.writeRilSendSms(mPhoneId, rr.mSerial, SmsSession.Event.Tech.SMS_GSM, SmsSession.Event.Format.SMS_FORMAT_3GPP); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "sendSMSExpectMore", e); } } }
<START_MOD>@org.junit.Test public void matchDomainWhenSecondaryIsSubdomainOfPrimary() throws java.lang.Exception { com.android.server.wifi.hotspot2.DomainMatcher domainMatcher = new com.android.server.wifi.hotspot2.DomainMatcher("google.com", java.util.Arrays.asList("test.google.com")); assertEquals(Match.Primary, domainMatcher.isSubDomain("google.com")); assertEquals(Match.Primary, domainMatcher.isSubDomain("test.google.com")); assertEquals(Match.Primary, domainMatcher.isSubDomain("abcd.test.google.com")); }<END_MOD>
<START_MOD>public android.os.ParcelFileDescriptor getInCallToCsRttPipeForCs() { return (mInCallToConnectionServiceStreams) == null ? null : mInCallToConnectionServiceStreams[0]; }<END_MOD>
<START_MOD>@java.lang.Override public void exit() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, ((("Exit Connecting(" + (mDevice)) + "): ") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); } mLastConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTING; removeMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT_TIMEOUT); }<END_MOD>
public long getRetainedSize(com.android.ahat.heapdump.AhatHeap heap) { <START_MOD>int index = heap.getIndex(); <END_MOD>return<START_MOD> (index >= 0) && (index < (mRetainedSizes.length)) ?<END_MOD> mRetainedSizes[heap.getIndex()]<START_MOD> : 0<END_MOD>; }
public static void init(android.preference.PreferenceScreen prefScreen, com.android.phone.SubscriptionInfoHelper subInfoHelper) { android.preference.Preference callForwardingPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_FORWARDING_KEY); callForwardingPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallForwardOptions.class)); android.preference.Preference additionalGsmSettingsPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.ADDITIONAL_GSM_SETTINGS_KEY); additionalGsmSettingsPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsAdditionalCallOptions.class)); <START_MOD>android.preference.Preference callBarringPref = prefScreen.findPreference(com.android.phone.GsmUmtsCallOptions.CALL_BARRING_KEY); android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (prefScreen.getContext().getSystemService(Context.CARRIER_CONFIG_SERVICE))); android.os.PersistableBundle b = configManager.getConfig(); if ((b != null) && (b.getBoolean(CarrierConfigManager.KEY_SHOW_CALL_BARRING_UI_BOOL))) { callBarringPref.setIntent(subInfoHelper.getIntent(com.android.phone.GsmUmtsCallBarringOptions.class)); <END_MOD>}<START_MOD> else { prefScreen.removePreference(callBarringPref); } }<END_MOD>
@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testDontBindWhenNullCarrierPackage() throws android.os.RemoteException { setupResolver(1); java.util.List<android.content.pm.ResolveInfo> info = new java.util.ArrayList<>(); java.util.Set<java.lang.String> features = new java.util.HashSet<>(); features.add(ImsResolver.METADATA_EMERGENCY_MMTEL_FEATURE); features.add(ImsResolver.METADATA_MMTEL_FEATURE); features.add(ImsResolver.METADATA_RCS_FEATURE); info.add(getResolveInfo(com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME, features, true)); when(mMockPM.queryIntentServicesAsUser(any(), anyInt(), anyInt())).thenReturn(info); com.android.internal.telephony.ims.ImsServiceController controller = mock(com.android.internal.telephony.ims.ImsServiceController.class); mTestImsResolver.setImsServiceControllerFactory(<START_MOD>new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context<END_MOD> context, <START_MOD>android.content.ComponentName <END_MOD>componentName<START_MOD>, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks)<END_MOD> { when(controller.getComponentName()).thenReturn(componentName); return controller; }<START_MOD> }<END_MOD>); setConfigCarrierString(0, null); mTestImsResolver.populateCacheAndStartBind(); waitForHandlerAction(mTestImsResolver.getHandler(), com.android.internal.telephony.ims.ImsResolverTest.TEST_TIMEOUT); verify(controller, never()).bind(any()); verify(controller, never()).unbind(); }
<START_MOD>public void testCreateAvdWithSnapshot() { am.createAvd(avdFolder, this.getName(), v0_0, null, null, null, false, true, log); assertEquals((("[P Created AVD '" + (this.getName())) + "\' based on Android 0.0\n]"), log.messages.toString()); assertTrue(("Expected snapshots.img in " + (avdFolder)), new java.io.File(avdFolder, "snapshots.img").exists()); java.util.Map<java.lang.String, java.lang.String> map = com.android.sdklib.internal.project.ProjectProperties.parsePropertyFile(new com.android.sdklib.io.FileWrapper(avdFolder, "config.ini"), log); assertEquals("true", map.get("snapshot.present")); }<END_MOD>
public void test2_0SetEnabledGetEnabled() throws java.lang.Exception { if (!(isBassBoostAvailable())) { return; } getBassBoost(<START_MOD>1<END_MOD>); try { mBassBoost.setEnabled(true); assertTrue( state from getEnabled mBassBoost.getEnabled()); mBassBoost.setEnabled(false); assertFalse( state to getEnabled mBassBoost.getEnabled()); } catch (java.lang.IllegalStateException e) { fail( in wrong state } finally { releaseBassBoost(); } }
@java.lang.Override public void factoryReset(int subId) { enforceConnectivityInternalPermission(); if (mUserManager.hasUserRestriction(UserManager.DISALLOW_NETWORK_RESET)) { return; } final long identity = android.os.Binder.clearCallingIdentity(); try { if ((android.telephony.SubscriptionManager.isUsableSubIdValue(subId)) && (!(mUserManager.hasUserRestriction(UserManager.DISALLOW_CONFIG_MOBILE_NETWORKS)))) { setDataEnabled(subId, true); setNetworkSelectionModeAutomatic(subId); <START_MOD>java.lang.String defaultNetwork = android.telephony.TelephonyManager.getTelephonyProperty(mSubscriptionController.getPhoneId(subId), "ro.telephony.default_network", null); int networkType = (!(android.text.TextUtils.isEmpty(defaultNetwork))) ? java.lang.Integer.parseInt(defaultNetwork) : com.android.internal.telephony.Phone.PREFERRED_NT_MODE; <END_MOD>setPreferredNetworkType(subId, <START_MOD>networkType<END_MOD>); mPhone.setDataRoamingEnabled(false); } } finally { android.os.Binder.restoreCallingIdentity(identity); } }
<START_MOD>private void calculate() { java.util.Map<com.android.tools.perflib.heap.Instance, java.lang.Integer> topSort = getTopologicalSort(mHeap.getRoots()); java.util.Set<com.android.tools.perflib.heap.Instance> roots = com.google.common.collect.Sets.newHashSet(); for (com.android.tools.perflib.heap.RootObj root : mHeap.getRoots()) { if ((root.getReferredInstance()) != null) { com.android.tools.perflib.heap.Instance ref = root.getReferredInstance(); idom.put(ref, ref); roots.add(ref); } } boolean changed = true; while (changed) { changed = false; for (com.android.tools.perflib.heap.Instance node : topSort.keySet()) { if (!(roots.contains(node))) { com.android.tools.perflib.heap.Instance dominator = null; for (com.android.tools.perflib.heap.Instance predecessor : node.getReferences()) { if (dominator == null) { dominator = predecessor; } else { if ((idom.get(predecessor)) != null) { com.android.tools.perflib.heap.Instance fingerA = dominator; com.android.tools.perflib.heap.Instance fingerB = predecessor; while (!(fingerA.equals(fingerB))) { if ((topSort.get(fingerA)) < (topSort.get(fingerB))) { fingerB = idom.get(fingerB); } else { fingerA = idom.get(fingerA); } } dominator = fingerA; } } } if ((idom.get(node)) != dominator) { idom.put(node, dominator); changed = true; } } } } }<END_MOD>
public void disableProfile(java.lang.String cardId, java.lang.String iccid, boolean refresh<START_MOD>, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor<END_MOD>, android.telephony.euicc.EuiccCardManager.ResultCallback<java.lang.Void> callback) { try { getIEuiccCardController().disableProfile(mContext.getOpPackageName(), cardId, iccid, refresh, new com.android.internal.telephony.euicc.IDisableProfileCallback.Stub() { @java.lang.Override public void onComplete(int resultCode) { <START_MOD>executor.execute(() -> <END_MOD>callback.onComplete(resultCode, null)<START_MOD>)<END_MOD>; } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG,   calling disableProfile e); throw e.rethrowFromSystemServer(); } }
void stop() { if (com.android.bluetooth.mapclient.MnsService.VDBG) android.util.Log.v(com.android.bluetooth.mapclient.MnsService.TAG, "stop()"); mShutdown = true; if ((com.android.bluetooth.mapclient.MnsService.<START_MOD>sServerSockets<END_MOD>) != null) { com.android.bluetooth.mapclient.MnsService.<START_MOD>sServerSockets<END_MOD>.shutdown(false); com.android.bluetooth.mapclient.MnsService.<START_MOD>sServerSockets<END_MOD> = null; } }
@java.lang.Override public void untag(java.io.FileDescriptor socketDescriptor) throws java.net.SocketException { libcore.dalvik.system.SocketTaggingTest.StatAndDescriptor existing = liveDescriptors.remove(socketDescriptor.getInt$()); }
@com.android.annotations.NonNull public java.util.Collection<com.android.builder.dependency.JarDependency> <START_MOD>getJarDependencies<END_MOD>() { return mJars; }
public void testGetSimCountryIso() {<START_MOD> if ((mTelephonyManager.getPhoneType()) == (android.telephony.TelephonyManager.PHONE_TYPE_NONE)) return;<END_MOD> java.lang.String countryCode = mTelephonyManager.getSimCountryIso(); assertTrue(((( code   + countryCode) +   did not match   + (android.telephony.cts.TelephonyManagerTest.ISO_COUNTRY_CODE_PATTERN)), java.util.regex.Pattern.matches(android.telephony.cts.TelephonyManagerTest.ISO_COUNTRY_CODE_PATTERN, countryCode)); }
<START_MOD>private void generateMethodMain(org.objectweb.asm.ClassVisitor cv) { org.objectweb.asm.MethodVisitor mv = cv.visitMethod(((org.objectweb.asm.Opcodes.ACC_PUBLIC) + (org.objectweb.asm.Opcodes.ACC_STATIC)), "main", "([Ljava/lang/String;)V", null, null); java.lang.String internalName = org.objectweb.asm.Type.getInternalName(constmethodhandle.ConstTest.class); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, "test1", "()Ljava/lang/invoke/MethodHandle;", false); mv.visitMethodInsn(Opcodes.INVOKESTATIC, internalName, "test2", "()Ljava/lang/invoke/MethodType;", false); mv.visitInsn(Opcodes.RETURN); mv.visitMaxs((-1), (-1)); }<END_MOD>
<START_MOD>@java.lang.Override public void onCharacteristicWrite(android.bluetooth.BluetoothGatt gatt, android.bluetooth.BluetoothGattCharacteristic characteristic, int status) { if (writeLogForOnCharacteristicWrite()) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, ("onCharacteristicWrite: " + status)); } long timeElapse = (android.os.SystemClock.elapsedRealtime()) - (mStartWriteTime); if (timeElapse < ((mWriteTime) * 1000)) { writeCharacteristic(gatt, ((int) (timeElapse / 1000))); } }<END_MOD>
<START_MOD>private static boolean isSupportMMS() { return android.telephony.SmsManager.getDefault().getCarrierConfigValues().getBoolean(SmsManager.MMS_CONFIG_MMS_ENABLED, true); }<END_MOD>
<START_MOD>@java.lang.Override public boolean dispose() { return super.dispose(); }<END_MOD>
<START_MOD>@org.junit.Test(expected = java.lang.NullPointerException.class) public void test_setTimeZone_null() { builder.setTimeZone(null); }<END_MOD>
@java.lang.Override public boolean <START_MOD>isRenderscriptDebuggable<END_MOD>() { return renderscriptDebugBuild; }
public static java.nio.channels.SocketChannel open(java.net.InetSocketAddress adbSockAddr, com.android.ddmlib.Device device, int devicePort) throws<START_MOD> com.android.ddmlib.TimeoutException,<END_MOD> java.io.IOException { java.nio.channels.SocketChannel adbChan = java.nio.channels.SocketChannel.open(adbSockAddr); try { adbChan.socket().setTcpNoDelay(true); adbChan.configureBlocking(false); com.android.ddmlib.AdbHelper.setDevice(adbChan, device); byte[] req = com.android.ddmlib.AdbHelper.createAdbForwardRequest(null, devicePort); <START_MOD>com.android.ddmlib.AdbHelper.write(adbChan, req); com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(adbChan, false); <END_MOD>if (<START_MOD>!(resp.okay)) {<END_MOD> throw new java.io.IOException( request rejected <START_MOD>} <END_MOD>adbChan.configureBlocking(true); } <START_MOD>finally<END_MOD> { adbChan.close(); } return adbChan; }
private void assertDomainOne(java.lang.String domain, java.lang.String executable) throws com.android.tradefed.device.DeviceNotAvailableException { java.util.List<android.cts.security.SELinuxHostTest.ProcessDetails> procs = android.cts.security.SELinuxHostTest.ProcessDetails.getProcMap(mDevice).get(domain); java.<START_MOD>util.List<android.cts.security.SELinuxHostTest.ProcessDetails> exeProcs = android.cts.security.SELinuxHostTest.ProcessDetails.getExeMap(mDevice).get(executable); java.<END_MOD>lang.String msg = (((( 1 process in SELinux domain   + domain) + "\"") +   Found   + procs) + "\""; assertNotNull(msg, procs); assertEquals(msg, 1, procs.size()); msg = (((((( executable   + executable) +   in SELinux domain   + domain) + "\"") +     + procs) + "\""; assertEquals(msg, executable, procs.get(0).procTitle); <START_MOD>msg = (((( 1 process with executable   + executable) + "\"") +   Found   + procs) + "\""; assertNotNull(msg, exeProcs); assertEquals(msg, 1, exeProcs.size()); msg = (((((( executable   + executable) +   in SELinux domain   + domain) + "\"") +     + procs) + "\""; assertEquals(msg, executable, exeProcs.get(0).procTitle); <END_MOD>}
public void testHashCodeAndEqualsDoesNotPerformNetworkIo() throws java.lang.Exception { final dalvik.system.BlockGuard.Policy oldPolicy = dalvik.system.BlockGuard.getThreadPolicy(); dalvik.system.BlockGuard.setThreadPolicy(new dalvik.system.BlockGuard.Policy() { @java.lang.Override public void onWriteToDisk() { fail("Blockguard.Policy.onWriteToDisk"); } @java.lang.Override public void onReadFromDisk() { fail("Blockguard.Policy.onReadFromDisk"); } @java.lang.Override public void onNetwork() { fail("Blockguard.Policy.onNetwork"); } @java.lang.Override public void onUnbufferedIO() { fail("Blockguard.Policy.onUnbufferedIO"); } @java.lang.Override public <START_MOD>void onCustomSlowCall(java.lang.String name) { fail((   + name)); } @java.lang.Override public <END_MOD>int getPolicyMask() { return 0; } }); try { java.net.URL url = new java.net.URL("http://www.google.com/"); java.net.URL url2 = new java.net.URL("http://www.nest.com/"); url.equals(url2); url2.hashCode(); } finally { dalvik.system.BlockGuard.setThreadPolicy(oldPolicy); } }
public java.io.FileDescriptor dup(java.io.FileDescriptor oldFd) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
<START_MOD>@javax.annotation.Nonnull boolean removeInputVFile(@javax.annotation.Nonnull com.android.sched.vfs.VPath path);<END_MOD>
@org.junit.Test public void retroLambdaDefaultMethodsTest015() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_015).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }
private void updateLinkProperties(com.android.server.connectivity.NetworkAgentInfo networkAgent, android.net.LinkProperties oldLp) { android.net.LinkProperties newLp = networkAgent.linkProperties; int netId = networkAgent.network.netId; if ((networkAgent.clatd) != null) { networkAgent.clatd.fixupLinkProperties(oldLp); } updateInterfaces(newLp, oldLp, netId, networkAgent.networkCapabilities); updateMtu(newLp, oldLp); updateTcpBufferSizes(networkAgent); updateRoutes(newLp, oldLp, netId); updateDnses(newLp, oldLp, netId); <START_MOD>if (com.android.server.connectivity.Nat464Xlat.requiresClat(networkAgent)) { networkAgent.startClat(mNetd, mTrackerHandler); }<END_MOD> if (isDefaultNetwork(networkAgent)) { handleApplyDefaultProxy(newLp.getHttpProxy()); } else { updateProxy(newLp, oldLp, networkAgent); } if (!(java.util.Objects.equals(newLp, oldLp))) { notifyIfacesChangedForNetworkStats(); notifyNetworkCallbacks(networkAgent, ConnectivityManager.CALLBACK_IP_CHANGED); } mKeepaliveTracker.handleCheckKeepalivesStillValid(networkAgent); }
private void conference(java.lang.String callId1, java.lang.String callId2) { android.telecom.Log.d(this,   %s, %s callId1, callId2); android.telecom.Connection connection2 = findConnectionForAction(callId2, "conference"); <START_MOD>android.telecom.Conference conference2 = getNullConference(); <END_MOD>if (connection2 == (android.telecom.ConnectionService.getNullConnection())) { <START_MOD>conference2 = findConferenceForAction(callId2, "conference"); if (conference2 == (getNullConference())) { <END_MOD>android.telecom.Log.w(this,  <START_MOD> or Conference2<END_MOD> missing in conference request %s. callId2); return; } <START_MOD>} <END_MOD>android.telecom.Connection connection1 = findConnectionForAction(callId1, "conference"); if (connection1 == (android.telecom.ConnectionService.getNullConnection())) { android.telecom.Conference conference1 = findConferenceForAction(callId1, "addConnection"); if (conference1 == (getNullConference())) { android.telecom.Log.w(this,   or Conference1 missing in conference request %s. callId1); } else { <START_MOD>if (connection2 != (android.telecom.ConnectionService.getNullConnection())) { <END_MOD>conference1.onMerge(connection2); } else { <START_MOD>android.telecom.Log.wtf(this, ( can only be one conference and an attempt was made to   +   two conferences. return; } } } else { if (conference2 != (getNullConference())) { conference2.onMerge(connection1); } else { <END_MOD>onConference(connection1, connection2); } }<START_MOD> }<END_MOD>
private void updateFontLabel() { <START_MOD>mFontButton<END_MOD>.<START_MOD>setText(mValues<END_MOD>.<START_MOD>textFont<END_MOD>.<START_MOD>getFontName<END_MOD>()); }
public static org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance(byte[] in, java.lang.String encoding) throws java.security.cert.CertificateException { <START_MOD>try { <END_MOD>if (<START_MOD>org.apache.harmony.security.provider.cert.X509CertPathImpl.PKI_PATH_NAME.equals(encoding)) { return ((org.apache.harmony.security.provider.cert.X509CertPathImpl) (org.apache.harmony.security.provider.cert.X509CertPathImpl.ASN1.decode(in))); } else if (org.apache.harmony.security.provider.cert.X509CertPathImpl.PKCS7_NAME.equals(encoding)) { return org.apache.harmony.security.provider.cert.X509CertPathImpl.getCertPathFromContentInfo(((org.apache.harmony.security.pkcs7.ContentInfo) (ContentInfo.ASN1.decode(in)))); } else<END_MOD> { throw new java.security.cert.CertificateException(<START_MOD>( encoding:   + encoding)); } } catch (java.io.IOException e<END_MOD>) { throw new java.security.cert.CertificateException( encoded form e)<START_MOD>; } }<END_MOD>
<START_MOD>@java.lang.Override public boolean isGenerated() { return false; }<END_MOD>
<START_MOD>public<END_MOD> <START_MOD>void<END_MOD> <START_MOD>setPackage<END_MOD>(com.google.doclava.<START_MOD>PackageInfo<END_MOD> <START_MOD>pkg<END_MOD>) { <START_MOD>mContainingPackage<END_MOD> <START_MOD>=<END_MOD> <START_MOD>pkg<END_MOD>; }
<START_MOD>@java.lang.Override public boolean doesResultConformToPolicy(org.conscrypt.ct.CTVerificationResult result, java.security.cert.X509Certificate certificate) { java.util.Set<org.conscrypt.ct.CTLogInfo> logSet = new java.util.HashSet(); for (org.conscrypt.ct.VerifiedSCT verifiedSCT : result.getValidSCTs()) { org.conscrypt.ct.CTLogInfo log = logStore.getKnownLog(verifiedSCT.sct.getLogID()); if (log != null) { logSet.add(log); } } return (logSet.size()) >= (minimumLogCount); }<END_MOD>
public static android.os.ZygoteProcess getProcess(<START_MOD>) { synchronized(android.webkit.WebViewZygote.sLock<END_MOD>) { android.webkit.WebViewZygote.connectToZygoteIfNeeded(); return android.webkit.WebViewZygote.sZygote; }<START_MOD> }<END_MOD>
@javax.annotation.Nonnull com.android.jack.jayce.DeclaredTypeNode getNNode(@javax.annotation.Nonnull com.android.jack.jayce.NodeLevel minimumLevel) throws com.android.jack.library.LibraryFormatException, com.android.jack.library.LibraryIOException { com.android.jack.jayce.DeclaredTypeNode type = nnode.get(); if ((type == null) || (!(type.getLevel().keep(minimumLevel)))) { java.io.InputStream in = null; try { in = new java.io.BufferedInputStream(source.getInputStream()); com.android.jack.jayce.NodeLevel loadLevel = getLevelForLoading(minimumLevel); type = com.android.jack.jayce.JayceReaderFactory.get(inputJackLibrary, in).readType(loadLevel); nnode = new java.lang.ref.SoftReference<com.android.jack.jayce.DeclaredTypeNode>(type); } catch (<START_MOD>com.android.sched.util.file.WrongPermissionException e) { throw new com.android.jack.library.LibraryIOException(inputJackLibrary.getLocation(), e); } catch (<END_MOD>java.io.IOException e) { throw new com.android.jack.library.LibraryIOException(inputJackLibrary.getLocation(), e); } catch (com.android.jack.jayce.JayceFormatException e) { com.android.jack.jayce.JayceClassOrInterfaceLoader.logger.log(java.util.logging.Level.SEVERE, ((   + (inputJackLibrary.getLocation().getDescription())) +   is invalid e); throw new com.android.jack.library.LibraryFormatException(inputJackLibrary.getLocation()); } finally { try { if (in != null) { in.close(); } } catch (java.io.IOException e) { com.android.jack.jayce.JayceClassOrInterfaceLoader.logger.log(java.util.logging.Level.WARNING, ( to close input stream on   + (source.getLocation().getDescription())), e); } } tracer.getStatistic(com.android.jack.jayce.JayceClassOrInterfaceLoader.NNODE_RELOAD).add(((loadCount) > 0)); (loadCount)++; } return type; }
@java.lang.Override @javax.annotation.Nonnull <START_MOD>protected java.util.List<<END_MOD>com.android.sched.util.codec.<START_MOD>PairCodec.Pair<T, U>> convertBack(<END_MOD>@javax.annotation.Nonnull java.util.Map<T, U> data) <START_MOD>{ java.util.List<<END_MOD>com.android.sched.util.codec.<START_MOD>PairCodec.Pair<T, U>> list = new java.util.ArrayList<PairCodec.Pair<T, U>>(data.size()); for (java.util.Map.Entry<T, U> entry : data.entrySet())<END_MOD> { <START_MOD>list.add(new com.android.sched.util.<END_MOD>codec.<START_MOD>PairCodec.Pair<T, U>(entry.getKey(), entry.getValue<END_MOD>())); }<START_MOD> return list; }<END_MOD>
<START_MOD>@java.lang.Override public void onPlaybackStateChanged(android.media.session.PlaybackState state) { synchronized(mWaitLock) { mOnPlaybackStateChangedCalled = true; mWaitLock.notify(); } }<END_MOD>
public void addImportedLibrary(@javax.annotation.Nonnull com.android.jack.library.InputLibrary source) { importedLibraries.add(source); <START_MOD>libDependencies.addImportedLibrary(source); <END_MOD>}
<START_MOD>private final void resetContext() { org.conscrypt.OpenSSLDigestContext ctx = new org.conscrypt.OpenSSLDigestContext(org.conscrypt.NativeCrypto.EVP_MD_CTX_create()); org.conscrypt.NativeCrypto.EVP_MD_CTX_init(ctx.getContext()); if (signing) { enableDSASignatureNonceHardeningIfApplicable(); org.conscrypt.NativeCrypto.EVP_SignInit(ctx.getContext(), evpAlgorithm); } else { org.conscrypt.NativeCrypto.EVP_VerifyInit(ctx.getContext(), evpAlgorithm); } this.ctx = ctx; }<END_MOD>
private void showErrorAndFinish(java.lang.String url) {<START_MOD> if ((mErrorDialog) != null) { mErrorDialog.setMessage(getResources().getString(R.string.settings_safetylegal_activity_unreachable, url)); mErrorDialog.show(); } else { mErrorDialog =<END_MOD> new android.app.AlertDialog.Builder(this).setMessage(getResources().getString(R.string.settings_safetylegal_activity_unreachable, url)).setTitle(R.string.settings_safetylegal_activity_title).setPositiveButton(android.R.string.ok, this).setOnCancelListener(this).setCancelable(true).show(); }<START_MOD> }<END_MOD>
public boolean click(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint mousePos) { int x = getZoomX(); if (x > 0) { if (((mousePos.x) >= x) && ((mousePos.x) <= (x + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_WIDTH)))) { int y = getZoomY(); if (((mousePos.y) >= y) && ((mousePos.y) <= (y + (3 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))))) { if ((mousePos.y) < (y + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))) { zoomIn(); } else if ((mousePos.y) < (y + (2 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT)))) { zoomOut(); } else { zoomReset(); } } return true; } <START_MOD>} <END_MOD>com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreview preview = getPreview(mousePos); if (preview != null) { boolean handled = preview.click((((mousePos.x) - (getX())) - (preview.getX())), (((mousePos.y) - (getY())) - (preview.getY()))); if (handled) { moved(mousePos); return true; } } return false; }
<START_MOD>@org.junit.Test public void testSystemRunning() { when(mNetworkScorerAppManager.getActiveScorer()).thenReturn(com.android.server.NetworkScoreServiceTest.NEW_SCORER); mNetworkScoreService.systemRunning(); verify(mContext).bindServiceAsUser(com.android.server.testing.MockUtils.checkIntent(new android.content.Intent().setComponent(new android.content.ComponentName(com.android.server.NetworkScoreServiceTest.NEW_SCORER.mPackageName, com.android.server.NetworkScoreServiceTest.NEW_SCORER.mScoringServiceClassName))), any(android.content.ServiceConnection.class), eq(((android.content.Context.BIND_AUTO_CREATE) | (android.content.Context.BIND_FOREGROUND_SERVICE))), eq(UserHandle.SYSTEM)); }<END_MOD>
private void init() { final android.os.Messenger messenger = getMessenger(); if (messenger == null) <START_MOD>{<END_MOD> <START_MOD>fatal<END_MOD>( to <START_MOD>obtain service Messenger }<END_MOD> android.os.HandlerThread t = new android.os.HandlerThread("NsdManager"); t.start(); mHandler = new android.net.nsd.NsdManager.ServiceHandler(t.getLooper()); mAsyncChannel.connect(mContext, mHandler, messenger); try { mConnected.await(); } catch (java.lang.InterruptedException e) { <START_MOD>fatal<END_MOD>( wait at init } }
public void testInstall_withBadlyFormedBundleVersion() throws java.lang.Exception { java.lang.String invalidBundleVersion = "A01.001"; byte[] versionBytes = libcore.tzdata.update2.BundleVersion.getBytes(invalidBundleVersion, libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION, "001"); libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createTimeZoneBundleWithVersionBytes(versionBytes); <START_MOD>assertEquals<END_MOD>(<START_MOD>TimeZoneBundleInstaller.INSTALL_FAIL_BAD_BUNDLE_STRUCTURE, <END_MOD>installer.<START_MOD>installWithErrorCode<END_MOD>(bundle.getBytes())); assertNoContentInstalled(); }
void addSwitchBasicBlock(@javax.annotation.Nonnull com.android.jack.cfg.SwitchBasicBlock block, @javax.annotation.Nonnull java.util.List<com.android.jack.ir.ast.JCaseStatement> cases, @javax.annotation.<START_MOD>Nonnull<END_MOD> com.android.jack.ir.ast.JStatement defaultCase) { assert block != null; assert cases != null; <START_MOD>assert defaultCase != null; <END_MOD>blocksToResolve.add(new com.android.jack.cfg.ForwardBranchResolver.SwitchBasicBlockToResolve(block, cases, defaultCase)); }
<START_MOD>private java.lang.String generateTextSrc(com.android.mms.model.SlideshowModel slideshow, int position) { final java.lang.String prefix = "text_"; final java.lang.String postfix = ".txt"; java.lang.StringBuilder src = new java.lang.StringBuilder(prefix).append(position).append(postfix); boolean hasDupSrc = false; do { for (com.android.mms.model.SlideModel model : slideshow) { if (model.hasText()) { if (model.getText().getSrc().equals(src.toString())) { src = new java.lang.StringBuilder(prefix).append((position + 1)).append(postfix); hasDupSrc |= true; break; } } hasDupSrc &= false; } } while (hasDupSrc ); return src.toString(); }<END_MOD>
<START_MOD>@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JNewArray x) { check(x.getArrayType(), x); }<END_MOD>
@java.lang.Override public int getDisplayRule(<START_MOD>android.telephony.ServiceState serviceState<END_MOD>) { int rule; if ((((mParentApp) != null) && ((mParentApp.getUiccCard()) != null)) && ((mParentApp.getUiccCard().getOperatorBrandOverride()) != null)) { rule = SPN_RULE_SHOW_PLMN; } else if ((android.text.TextUtils.isEmpty(getServiceProviderName())) || ((mSpnDisplayCondition) == (-1))) { rule = SPN_RULE_SHOW_PLMN; } else if (<START_MOD>shouldConsiderServiceStateRoaming() ? !(serviceState.getRoaming()) : <END_MOD>isOnMatchingPlmn(<START_MOD>serviceState.getOperatorNumeric()<END_MOD>)) { rule = SPN_RULE_SHOW_SPN; if (((mSpnDisplayCondition) & 1) == 1) { rule |= SPN_RULE_SHOW_PLMN; } } else { rule = SPN_RULE_SHOW_PLMN; if (((mSpnDisplayCondition) & 2) == 0) { rule |= SPN_RULE_SHOW_SPN; } } return rule; }
<START_MOD>@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(minHomeDownlinkBandwidth); dest.writeLong(minHomeUplinkBandwidth); dest.writeLong(minRoamingDownlinkBandwidth); dest.writeLong(minRoamingUplinkBandwidth); dest.writeLong(updateIntervalInMinutes); dest.writeString(updateMethod); dest.writeString(restriction); dest.writeString(policyServerUri); dest.writeString(username); dest.writeString(base64EncodedPassword); dest.writeString(trustRootCertUrl); dest.writeByteArray(trustRootCertSha256Fingerprint); dest.writeStringArray(excludedSsidList); android.net.wifi.hotspot2.pps.Policy.writeProtoPortMap(dest, requiredProtoPortMap); dest.writeInt(maximumBssLoadValue); android.net.wifi.hotspot2.pps.Policy.writeRoamingPartnerList(dest, flags, preferredRoamingPartnerList); }<END_MOD>
<START_MOD>@java.lang.Override public void onStart(android.content.Intent intent, int startid) { android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, "Receiver service started"); byte[] body; byte[] header; body = intent.getByteArrayExtra("data"); header = intent.getByteArrayExtra("header"); android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, "header:"); android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, com.android.internal.util.HexDump.dumpHexString(header)); android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, "body:"); android.util.Log.d(com.android.smspush.unitTests.ReceiverService.LOG_TAG, com.android.internal.util.HexDump.dumpHexString(body)); com.android.smspush.unitTests.DataVerify.SetLastReceivedPdu(body); }<END_MOD>
<START_MOD>public<END_MOD> <START_MOD>int setAllowedCarriers(int slotId,<END_MOD> java.util.List<android.service.carrier.CarrierIdentifier> <START_MOD>carriers<END_MOD>) { try { com.android.internal.telephony.ITelephony service = getITelephony(); if (service != null) { return service.<START_MOD>setAllowedCarriers<END_MOD>(<START_MOD>slotId, carriers<END_MOD>); } } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.TelephonyManager.TAG,   calling ITelephony e); } <START_MOD>return<END_MOD> <START_MOD>-1<END_MOD>; }
<START_MOD>public void testExtract7() throws java.lang.Exception { checkRefactoring("extractstyle2.xml", "newstyles8.xml", "newstyle", true, true, 2, "@+id/button1", "@+id/button2"); }<END_MOD>
<START_MOD>private static int convertRanToHalRan(int radioAccessNetwork) { switch (radioAccessNetwork) { case android.telephony.AccessNetworkConstants.AccessNetworkType.GERAN : return 1; case android.telephony.AccessNetworkConstants.AccessNetworkType.UTRAN : return 2; case android.telephony.AccessNetworkConstants.AccessNetworkType.EUTRAN : return 3; case android.telephony.AccessNetworkConstants.AccessNetworkType.CDMA2000 : return 4; case android.telephony.AccessNetworkConstants.AccessNetworkType.IWLAN : return 5; case android.telephony.AccessNetworkConstants.AccessNetworkType.UNKNOWN : default : return 0; } }<END_MOD>
private void detachVolume(android.net.Uri uri) { if ((android.os.Binder.getCallingPid()) != (java.lang.Process.myPid())) { throw new java.lang.SecurityException( and closing databases not allowed. } java.lang.String volume = uri.getPathSegments().get(0); if (com.android.providers.media.MediaProvider.INTERNAL_VOLUME.equals(volume)) { throw new java.lang.UnsupportedOperationException( the internal volume is not allowed } else if (!(com.android.providers.media.MediaProvider.EXTERNAL_VOLUME.equals(volume))) { throw new java.lang.IllegalArgumentException(( is no volume named   + volume)); } <START_MOD>try { mDatabasesLock.writeLock().lock();<END_MOD> com.android.providers.media.MediaProvider.DatabaseHelper database = mDatabases.get(volume); if (database == null) return; try { java.io.File file = new java.io.File(database.getReadableDatabase().getPath()); file.setLastModified(java.lang.System.currentTimeMillis()); } catch (java.lang.Exception e) { android.util.Log.e(com.android.providers.media.MediaProvider.TAG,   touch database file e); } mDatabases.remove(volume); database.close(); } <START_MOD>finally { mDatabasesLock.writeLock().unlock(); } <END_MOD>getContext().getContentResolver().notifyChange(uri, null); if (com.android.providers.media.MediaProvider.LOCAL_LOGV) android.util.Log.v(com.android.providers.media.MediaProvider.TAG, ( volume:   + volume)); }
public void test_enableDisable() {<START_MOD> if (!(isSupport)) { return; }<END_MOD> android.bluetooth.BluetoothAdapter adapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); for (int i = 0; i < 5; i++) { disable(adapter); enable(adapter); } }
<START_MOD>protected boolean supportsMultiWindow() throws com.android.tradefed.device.DeviceNotAvailableException { return (hasDeviceFeature("android.software.multiwindow")) || (android.wm.cts.CrossAppDragAndDropTests.PRETEND_DEVICE_SUPPORTS_MULTIWINDOW); }<END_MOD>
public void importProjects(@com.android.annotations.NonNull java.util.List<java.io.File> projectDirs) throws java.io.IOException { mSummary = new com.android.tools.gradle.eclipse.ImportSummary(this); mProjectMap.clear(); mHandledJars.clear(); mWarnings.clear(); mErrors.clear(); mWorkspaceProjects = null; mRootModules = java.util.Collections.emptyList(); mModules = com.<START_MOD>android.tools.gradle.eclipse<END_MOD>.Sets.newHashSet(); for (java.io.File file : projectDirs) { if (file.isFile()) { assert !(file.isDirectory()); file = file.getParentFile(); } guessWorkspace(file); if (com.android.tools.gradle.eclipse.GradleImport.isAdtProjectDir(file)) { guessSdk(file); guessNdk(file); try { com.android.tools.gradle.eclipse.EclipseProject.getProject(this, file); } catch (com.android.tools.gradle.eclipse.GradleImport.ImportException e) { return; } catch (java.lang.Exception e) { reportError(null, file, e.toString(), false); return; } } else { reportError(null, file, ( a recognized project:   + file), false); return; } } java.util.Set<com.android.tools.gradle.eclipse.EclipseProject> projects = com.<START_MOD>android.tools.gradle.eclipse<END_MOD>.Sets.newHashSet(mProjectMap.values()); mRootModules = com.android.tools.gradle.eclipse.EclipseProject.performImport(this, projects); for (com.android.tools.gradle.eclipse.ImportModule module : mRootModules) { mModules.add(module); mModules.addAll(module.getAllDependencies()); } }
public void <START_MOD>testParse_withMultiplier<END_MOD>() { java.text.DecimalFormat format = ((java.text.DecimalFormat) (java.text.NumberFormat.getNumberInstance(java.util.Locale.ENGLISH))); java.lang.Number result; format.setMultiplier(100); result = format.parse("9223372036854775807", new java.text.ParsePosition(0)); assertEquals(( result type multiplier 100:   + result), java.lang.Double.class, result.getClass()); assertEquals(( result for multiplier 100:   + result), 9.223372036854776E16, result.doubleValue()); format.setMultiplier(1000); result = format.parse("9223372036854775807", new java.text.ParsePosition(0)); assertEquals(( result type multiplier 1000:   + result), java.lang.Double.class, result.getClass()); assertEquals(( result for multiplier 1000:   + result), 9.223372036854776E15, result.doubleValue()); format.setMultiplier(10000); result = format.parse("9223372036854775807", new java.text.ParsePosition(0)); assertEquals(( result type multiplier 10000:   + result), java.lang.Double.class, result.getClass()); assertEquals(( result for multiplier 10000:   + result), 9.223372036854776E14, result.doubleValue()); }
public android.bluetooth.le.PeriodicAdvertisingParameters.Builder setIncludeTxPower(boolean includeTxPower) { this.<START_MOD>mIncludeTxPower<END_MOD> = includeTxPower; return this; }
@android.test.suitebuilder.annotation.MediumTest public void testSendCallEventNull() throws java.lang.Exception { com.android.server.telecom.tests.IdPair ids = startAndMakeActiveIncomingCall("650-555-1212", mPhoneAccountA0.getAccountHandle(), mConnectionServiceFixtureA); assertEquals(Call.STATE_ACTIVE, mInCallServiceFixtureX.getCall(ids.mCallId).getState()); mInCallServiceFixtureX.mInCallAdapter.sendCallEvent(ids.mCallId, com.android.server.telecom.tests.BasicCallTests.TEST_EVENT, null); verify(mConnectionServiceFixtureA.getTestDouble(), timeout(com.android.server.telecom.tests.TEST_TIMEOUT)).sendCallEvent(ids.mCallId, com.android.server.telecom.tests.BasicCallTests.TEST_EVENT, null<START_MOD>, any()<END_MOD>); }
@javax.annotation.Nonnull public static java.io.File getRuntimeEnvironmentRootDir(@javax.annotation.Nonnull java.lang.String rtName) { java.lang.String rtLocationPath = com.android.jack.test.<START_MOD>TestingEnvironment.getProperty(((com.android.jack.test.<END_MOD>toolchain.AbstractTestTools.<START_MOD>RUNTIME_LOCATION_PREFIX) + rtName)); if (rtLocationPath == null) { throw new com.android.jack.test.TestConfigurationException(((((( for runtime   + rtName) +   is not specified. Set property   + <END_MOD>(com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LOCATION_PREFIX)<START_MOD>) + rtName) + "'")); } java.io.File rtLocation = new java.io.File(rtLocationPath<END_MOD>); if (<START_MOD>!(rtLocation.exists())<END_MOD>) { throw new com.android.jack.test.TestConfigurationException((((( for runtime   + rtName) +   does not exist:   + rtLocationPath) + "'")); } if (!(rtLocation.isDirectory())) { throw new com.android.jack.test.TestConfigurationException((((( for runtime   + rtName) +   is not a directory:   + rtLocationPath) + "'")); } return rtLocation; }
private void handleInterfaceServingStateActive(int mode, com.android.server.connectivity.tethering.TetherInterfaceStateMachine who) { if ((mNotifyList.indexOf(who)) < 0) { mNotifyList.add(who); mIPv6TetheringCoordinator.addActiveDownstream(who, mode); } if (mode == (com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED)) { mForwardedDownstreams.add(who); } else { mForwardedDownstreams.remove(who); } <START_MOD>if ((who.interfaceType()) == (android.net.ConnectivityManager.TETHERING_WIFI)) { int wifiMode = android.net.wifi.WifiManager.IFACE_IP_MODE_CONFIGURATION_ERROR; switch (mode) { case com.android.server.connectivity.tethering.IControlsTethering.STATE_TETHERED : wifiMode = android.net.wifi.WifiManager.IFACE_IP_MODE_TETHERED; break; case com.android.server.connectivity.tethering.IControlsTethering.STATE_LOCAL_ONLY : wifiMode = android.net.wifi.WifiManager.IFACE_IP_MODE_LOCAL_ONLY; break; } if (wifiMode != (android.net.wifi.WifiManager.IFACE_IP_MODE_CONFIGURATION_ERROR)) { getWifiManager().updateInterfaceIpState(who.interfaceName(), wifiMode); } } }<END_MOD>
@javax.annotation.Nonnull public static <T> com.android.sched.util.config.id.DefaultFactoryPropertyId<T> create(@javax.annotation.Nonnull java.lang.String name, @javax.annotation.Nonnull java.lang.String description, @javax.annotation.Nonnull java.lang.<START_MOD>String varName, @javax.annotation.Nonnull java.lang.<END_MOD>Class<T> type) { return new com.android.sched.util.config.id.DefaultFactoryPropertyId<T>(name, description, new com.android.sched.util.codec.DefaultFactorySelector<T>(type)); }
<START_MOD>@java.lang.Override public boolean getIsSoftReferenceType() { return mIsSoftReferenceClass; }<END_MOD>
<START_MOD>@org.junit.Test <END_MOD>public void testVpn() throws java.lang.Exception { <START_MOD>mInstrumentation = testRule.getInstrumentation(); mDevice = testRule.getDevice(); <END_MOD>if (!(verifyVpnStatus())) { com.android.devtools.systemimage.uitest.utils.AppManager.installApp(mInstrumentation, "FredVPN.apk"); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, "TestVPN"); mDevice.registerWatcher(com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher.class.getName(), new com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher(mDevice)); mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.VpnTest.START_VPN_BUTTON_RES)).clickAndWaitForNewWindow(); <START_MOD>junit.framework.Assert.<END_MOD>assertTrue( to find the VPN lock icon after starting VPN! verifyVpnStatus()); mDevice.removeWatcher(com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher.class.getName()); } com.android.devtools.systemimage.uitest.utils.AppManager.uninstallApp(mInstrumentation, "TestVPN", null); }
public void test_Apia_jumpForwardOverInternationalDateLine_P12_to_M12() { java.time.zone.ZoneRules test = pacificApia(); java.time.Instant instantBefore = java.time.LocalDate.of(<START_MOD>1892<END_MOD>, 7, 2).atStartOfDay(java.time.ZoneOffset.UTC).toInstant(); java.time.zone.ZoneOffsetTransition trans = test.nextTransition(instantBefore); assertEquals(trans.getDateTimeBefore(), java.time.LocalDateTime.of(<START_MOD>1892<END_MOD>, 7, 5, 0, 0)); assertEquals(trans.getDateTimeAfter(), java.time.LocalDateTime.of(<START_MOD>1892<END_MOD>, 7, 4, 0, 0)); assertEquals(trans.isGap(), false); assertEquals(trans.isOverlap(), true); assertEquals(trans.isValidOffset(java.time.ZoneOffset.ofHoursMinutesSeconds((+12), 33, 4)), true); assertEquals(trans.isValidOffset(java.time.ZoneOffset.ofHoursMinutesSeconds((-11), (-26), (-56))), true); assertEquals(trans.getDuration(), java.time.Duration.ofHours((-24))); assertEquals(trans.getInstant(), java.time.LocalDateTime.of(<START_MOD>1892, 7, 4, 0, 0).toInstant(java.time.ZoneOffset.ofHoursMinutesSeconds((-11), (-26), (-56)))); java.time.ZonedDateTime zdt = java.time.ZonedDateTime.of(1892, 7, 4, 23, 0, 0, 0, java.time.ZoneId.of("Pacific/Apia")); assertEquals(zdt.plusHours(2).toLocalDateTime(), java.time.LocalDateTime.of(<END_MOD>1879, 7, 4, 1, 0, 0)); }
public static synchronized com.android.internal.telephony.uicc.UiccController <START_MOD>make<END_MOD>(<START_MOD>android.content.Context c, <END_MOD>com.android.internal.telephony.<START_MOD>CommandsInterface<END_MOD> <START_MOD>ci<END_MOD>) { if ((com.android.internal.telephony.uicc.UiccController.mInstance) <START_MOD>!=<END_MOD> null) {<START_MOD> throw new java.lang.RuntimeException( should only be called once }<END_MOD> com.android.internal.telephony.uicc.UiccController.mInstance = new com.android.internal.telephony.uicc.UiccController(<START_MOD>c, ci<END_MOD>); return com.android.internal.telephony.uicc.UiccController.mInstance; }
<START_MOD>synchronized void nAllocation1DElementData(long id, int xoff, int mip, int compIdx, byte[] d, int sizeBytes) { validate(); rsnAllocation1DElementData(mContext, id, xoff, mip, compIdx, d, sizeBytes); }<END_MOD>
private void processLogLines(java.lang.String[] lines) { java.util.List<com.android.ddmuilib.logcat.LogCatMessage> messages = mLogCatMessageParser.processLogLines(lines, mPidToNameMapper); if ((messages.size()) > 0) { <START_MOD>int<END_MOD> <START_MOD>nDeleted<END_MOD> <START_MOD>=<END_MOD> mLogMessages.<START_MOD>appendMessages<END_MOD>(<START_MOD>messages<END_MOD>); sendMessageReceivedEvent(messages<START_MOD>, nDeleted<END_MOD>); } }
@org.junit.Test<START_MOD> @java.lang.Runtime<END_MOD> public void testDefaultMethod012() throws java.lang.Exception { run(DEFAULTMETHOD012); }
<START_MOD>public static void transform(float a, float b, float c, float d, float e, float f, com.android.assetstudiolib.vectordrawable.vg.VDPath.Node[] nodes) { float[] pre = new float[2]; for (int i = 0; i < (nodes.length); i++) { nodes[i].transform(a, b, c, d, e, f, pre); } }<END_MOD>
<START_MOD>@java.lang.Override public com.android.dx.dex.file.ClassDefItem call() { long now = java.lang.System.nanoTime(); com.android.dx.dex.file.ClassDefItem clazz = com.android.dx.command.dexer.Main.translateClass(name, bytes, classFile); com.android.dx.command.dexer.Main.translateTime += (java.lang.System.nanoTime()) - now; com.android.dx.command.dexer.Main.methodDefs += classFile.getMethods().size(); com.android.dx.command.dexer.Main.fieldDefs += classFile.getFields().size(); return clazz; }<END_MOD>
public static int Shl0(int arg) { <START_MOD>if (Main.doThrow) { throw new java.lang.Error(); } <END_MOD>return arg << 0; }
<START_MOD>public static java.lang.String getNdkBuildTaskName(@com.android.annotations.NonNull org.gradle.nativeplatform.NativeBinarySpec binary) { return com.android.build.gradle.ndk.internal.NdkNamingScheme.getTaskName(binary, "build", "Ndk"); }<END_MOD>
<START_MOD>public void testDisplayNamesOnNonGregorianCalendar() { assertEquals("Jan", formatDateNonGregorianCalendar("MMM")); assertEquals("Jan", formatDateNonGregorianCalendar("LLL")); assertEquals("Thu", formatDateNonGregorianCalendar("EEE")); assertEquals("Thu", formatDateNonGregorianCalendar("ccc")); }<END_MOD>
<START_MOD>public boolean isOlderThan(int release, int subRelease) { return ((this.releaseCode) > release) || (((this.releaseCode) == release) && ((this.subReleaseCode) > subRelease)); }<END_MOD>
<START_MOD>@org.junit.Test public void testSetWpsDeviceType() throws java.lang.Exception { java.lang.String validDeviceType = "10-0050F204-5"; java.lang.String invalidDeviceType1 = "10-02050F204-5"; java.lang.String invalidDeviceType2 = "102-0050F204-5"; when(mISupplicantStaIfaceMock.setWpsDeviceType(any(byte[].class))).thenReturn(mStatusSuccess); executeAndValidateInitializationSequence(false, false, false); assertTrue(mDut.setWpsDeviceType(validDeviceType)); assertFalse(mDut.setWpsDeviceType(invalidDeviceType1)); assertFalse(mDut.setWpsDeviceType(invalidDeviceType2)); }<END_MOD>
<START_MOD>@java.lang.Override <END_MOD>protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return getUserRecord().<START_MOD>transformQuotaTracker<END_MOD>; }
public static short shortToCharToShort(short value) {<START_MOD> if (Main.doThrow) { throw new java.lang.Error(); }<END_MOD> return ((short) ((char) (value))); }
public void testDiff6() throws java.lang.Exception { java.lang.String reference = "" + ((((((((((("<manifest\n" +   xmlns:android= +   xmlns:tools= +   package= + "\n") +   <activity android:name=   +   android:configChanges= + "\n") +   <intent-filter android:label= + "\n") +   </activity> + "</manifest>"); java.lang.String other = "" + (((((((("<manifest\n" +   xmlns:android= +   xmlns:tools= +   package= + "\n") +   <activity android:name=   +   android:configChanges= + "\n") + "</manifest>"); com.android.manifmerger.XmlDocument refDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), "testDiff6()"), reference); com.android.manifmerger.XmlDocument otherDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), "testDiff6()"), other); <START_MOD>assertTrue<END_MOD>(refDocument.getRootNode().getNodeByTypeAndKey(ManifestModel.NodeTypes.ACTIVITY, "com.example.lib3.activityOne").get().compareTo(otherDocument.getRootNode().getNodeByTypeAndKey(ManifestModel.NodeTypes.ACTIVITY, "com.example.lib3.activityOne").get(), mergingReport)<START_MOD>.isPresent()<END_MOD>); }
<START_MOD>@java.lang.Override public void onRttConnectionRemotelyTerminated(java.lang.String callId, android.telecom.Logging.Session.Info sessionInfo) throws android.os.RemoteException { }<END_MOD>
public void testInstrumentationNotAllowed() { <START_MOD>android.content.Context myContext = getInstrumentation().getContext(); android.content.ComponentName appDiffCertInstrumentation = new android.content.ComponentName(myContext, com.android.cts.instrumentationdiffcertapp.EmptyInstrumentation.class); try { getInstrumentation().getContext().startInstrumentation(appDiffCertInstrumentation, null, new android.os.Bundle()); <END_MOD>fail( <START_MOD>launch<END_MOD> <START_MOD>instrumentation<END_MOD> }<START_MOD> catch (java.lang.SecurityException e) { } }<END_MOD>
<START_MOD>@org.junit.Test public void testBookmarkWebSiteInBrowser() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, "Browser"); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.BROWSER_URL_TEXT_FIELD_RES)).click(); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.BROWSER_URL_TEXT_FIELD_RES)).clearTextField(); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.BROWSER_URL_TEXT_FIELD_RES)).setText("espn.com"); device.pressEnter(); device.pressMenu(); device.findObject(new android.support.test.uiautomator.UiSelector().text("Save to bookmarks")).click(); device.findObject(new android.support.test.uiautomator.UiSelector().text("OK")).click(); device.pressMenu(); device.findObject(new android.support.test.uiautomator.UiSelector().text("Bookmarks")).click(); assertTrue(((device.findObject(new android.support.test.uiautomator.UiSelector().text("Bookmarks")).exists()) && (device.findObject(new android.support.test.uiautomator.UiSelector().textContains("ESPN: The Worldwide Leader in Sports")).exists()))); }<END_MOD>
private static int compareBooleans(boolean x, boolean y) { <START_MOD>try {<END_MOD> java.lang.<START_MOD>Class<?> c = java<END_MOD>.<START_MOD>lang.Class.forName("Smali"); java.lang.reflect.Method m = c.getMethod("compareBooleans", boolean.class, boolean.class); return <END_MOD>((<START_MOD>java.lang.Integer)<END_MOD> <START_MOD>(m.invoke(null<END_MOD>, <START_MOD>x, <END_MOD>y<START_MOD>)<END_MOD>)); }<START_MOD> catch (java.lang.Exception ex) { throw new java.lang.Error(ex); } }<END_MOD>
<START_MOD>public boolean hasSource(com.android.sdklib.internal.repository.SdkSourceCategory category, com.android.sdklib.internal.repository.SdkSource source) { java.util.ArrayList<com.android.sdklib.internal.repository.SdkSource> list = mSources.get(category); if (list != null) { for (com.android.sdklib.internal.repository.SdkSource s : list) { if (s.equals(source)) { return true; } } } return false; }<END_MOD>
<START_MOD>private void removeNonJlsCompliantFields(com.android.jack.ir.ast.JDefinedClass thisClass, java.util.Set<com.android.jack.ir.ast.JField> fields) { com.android.jack.optimizations.modifiers.FieldFinalizer.FinalizingPhase.Analyzer analyzer = new com.android.jack.optimizations.modifiers.FieldFinalizer.FinalizingPhase.Analyzer(fields); for (com.android.jack.ir.ast.JMethod method : thisClass.getMethods()) { if (com.android.jack.optimizations.modifiers.FieldFinalizer.isConstructor(method)) { analyzer.setMethod(method); analyzer.analyze(); if (fields.isEmpty()) { return; } } } }<END_MOD>
@java.lang.Override @com.android.annotations.Nullable public java.lang.Boolean <START_MOD>getRenderscriptSupportModeEnabled<END_MOD>() { return mRenderscriptSupportMode; }
public int startSendingOffloadedPacket(int slot, byte[] srcMac, com.android.server.connectivity.KeepalivePacketData keepAlivePacket, int periodInMs) { <START_MOD>mLog<END_MOD>.d(((( slot= + slot) +   periodInMs= + periodInMs)); java.util.ArrayList<java.lang.Byte> data = com.android.server.wifi.util.NativeUtil.byteArrayToArrayList(keepAlivePacket.data); short protocol = ((short) (keepAlivePacket.protocol)); synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return -1; try { android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.startSendingKeepAlivePackets(slot, data, protocol, srcMac, keepAlivePacket.dstMac, periodInMs); if (<START_MOD>!(ok<END_MOD>(status<START_MOD>)<END_MOD>)) return -1; return 0; } catch (android.os.RemoteException e) { kilroy(); handleRemoteException(e); return -1; } } }
private static boolean startSystemServer() throws com.android.internal.os.ZygoteInit.MethodAndArgsCaller, java.lang.RuntimeException { long capabilities = com.android.internal.os.ZygoteInit.posixCapabilitiesAsBits(OsConstants.CAP_KILL, OsConstants.CAP_NET_ADMIN, OsConstants.CAP_NET_BIND_SERVICE, OsConstants.CAP_NET_BROADCAST, OsConstants.CAP_NET_RAW, OsConstants.CAP_SYS_MODULE, OsConstants.CAP_SYS_NICE, OsConstants.CAP_SYS_RESOURCE, OsConstants.CAP_SYS_TIME, OsConstants.CAP_SYS_TTY_CONFIG<START_MOD>, OsConstants.CAP_BLOCK_SUSPEND<END_MOD>); java.lang.String[] args = new java.lang.String[]{ "--setuid=1000", "--setgid=1000", "--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1032,3001,3002,3003,3006,3007", (("--capabilities=" + capabilities) + ",") + capabilities, "--runtime-init", "--nice-name=system_server", "com.android.server.SystemServer" }; com.android.internal.os.ZygoteConnection.Arguments parsedArgs = null; int pid; try { parsedArgs = new com.android.internal.os.ZygoteConnection.Arguments(args); com.android.internal.os.ZygoteConnection.applyDebuggerSystemProperty(parsedArgs); com.android.internal.os.ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs); pid = com.android.internal.os.Zygote.forkSystemServer(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids, parsedArgs.debugFlags, null, parsedArgs.permittedCapabilities, parsedArgs.effectiveCapabilities); } catch (java.lang.IllegalArgumentException ex) { throw new java.lang.RuntimeException(ex); } if (pid == 0) { com.android.internal.os.ZygoteInit.handleSystemServerProcess(parsedArgs); } return true; }
<START_MOD>public void verifyCommandDispatchKeyDown() { mTvView.dispatchKeyEvent(new android.view.KeyEvent(android.view.KeyEvent.ACTION_DOWN, android.view.KeyEvent.KEYCODE_K)); mInstrumentation.waitForIdleSync(); new android.cts.util.PollingCheck(android.media.tv.cts.TvInputServiceTest.TIME_OUT) { @java.lang.Override protected boolean check() { android.media.tv.cts.TvInputServiceTest.CountingTvInputService.CountingSession session = android.media.tv.cts.TvInputServiceTest.CountingTvInputService.sSession; return (session != null) && ((session.mKeyDownCount) > 0); } }.run(); }<END_MOD>
static void getChar(java.lang.invoke.MethodHandle m, Main.ValueHolder v, char value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final char got; if (v == null) { got = ((char) (m.invokeExact())); } else { got = ((char) (m.invokeExact(v))); } Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.<START_MOD>assertEqual<END_MOD>(exceptionThrown, expectFailure); }
public void switchToSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { <START_MOD>getIEuiccController()<END_MOD>.switchToSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@javax.annotation.Nonnull private static java.util.<START_MOD>LinkedHashMap<END_MOD><com.android.jack.ir.ast.JVariable, com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo> collectDefinitions(@javax.annotation.Nonnull com.android.jack.cfg.ControlFlowGraph cfg) { java.util.<START_MOD>LinkedHashMap<END_MOD><com.android.jack.ir.ast.JVariable, com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo> defs = com.google.common.collect.Maps.<START_MOD>newLinkedHashMap<END_MOD>(); for (com.android.jack.cfg.BasicBlock bb : cfg.getNodes()) { for (com.android.jack.ir.ast.JStatement stmt : bb.getStatements()) { com.android.jack.analysis.DefinitionMarker dm = com.android.jack.util.ThreeAddressCodeFormUtils.getDefinitionMarker(stmt); if (dm != null) { com.android.jack.ir.ast.JVariable variable = dm.getDefinedVariable(); if (!(defs.containsKey(variable))) { defs.put(variable, new com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo(<START_MOD>variable<END_MOD>)); } defs.get(variable).defs.add(dm); } for (com.android.jack.ir.ast.JVariableRef ref : com.android.jack.util.OptimizationTools.getUsedVariables(stmt)) { com.android.jack.ir.ast.JVariable variable = ref.getTarget(); if (!(defs.containsKey(variable))) { defs.put(variable, new com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo(<START_MOD>variable<END_MOD>)); } defs.get(variable).refStmts.add(stmt); } } } return defs; }
@org.junit.Test public void testDependency001() throws java.lang.Exception { com.android.jack.test.helper.IncrementalTestHelper ite = new com.android.jack.test.helper.IncrementalTestHelper(com.android.jack.test.toolchain.AbstractTestTools.createTempDir()); ite.setIsApiTest(); ite.addJavaFile("jack.incremental", "A.java", ( jack.incremental;   + (( class A {   +   public static class B { public void m() {} }   +   public static void main(String[] args) {new B().m();} }   ite.incrementalBuildFromFolder(); junit.framework.Assert.assertEquals(2, ite.<START_MOD>getJayceSize<END_MOD>()); ite.addJavaFile("jack.incremental", "A.java", ( jack.incremental;   + ( class A {   +   public static void main(String[] args) {new B().m();} }   try { ite.incrementalBuildFromFolder(); junit.framework.Assert.fail(); } catch (com.android.jack.frontend.FrontendCompilationException e) { junit.framework.Assert.assertEquals(0, ite.<START_MOD>getJayceSize()); } }<END_MOD>
<START_MOD>private java.util.zip.ZipEntry findEntryWithDirectoryFallback(java.lang.String entryName) { java.util.zip.ZipEntry entry = jarFile.findEntry(entryName); if ((entry == null) && (!(entryName.endsWith("/")))) { entry = jarFile.findEntry((entryName + "/")); } return entry; }<END_MOD>
public static com.android.manifmerger.XmlDocument load(com.android.manifmerger.KeyResolver<java.lang.String> selectors, com.android.manifmerger.PlaceholderHandler.KeyBasedValueResolver<com.android.manifmerger.<START_MOD>ManifestTask<END_MOD>.SystemProperty> systemPropertyResolver, java.lang.String displayName, java.io.File xmlFile) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { java.io.InputStream inputStream = new java.io.BufferedInputStream(new java.io.FileInputStream(xmlFile)); com.android.utils.PositionXmlParser positionXmlParser = new com.android.utils.PositionXmlParser(); org.w3c.dom.Document domDocument = positionXmlParser.parse(inputStream); return domDocument != null ? new com.android.manifmerger.XmlDocument(positionXmlParser, new com.android.manifmerger.XmlLoader.FileSourceLocation(displayName, xmlFile), selectors, systemPropertyResolver, domDocument.getDocumentElement()) : null; }
private com.android.apksig.DefaultApkSignerEngine.OutputApkSigningBlockRequestImpl outputZipSectionsInternal(com.android.apksig.util.DataSource zipEntries, com.android.apksig.util.DataSource zipCentralDirectory, com.android.apksig.util.DataSource zipEocd, boolean apkSigningBlockPaddingSupported) throws java.io.IOException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.SignatureException { checkNotClosed(); checkV1SigningDoneIfEnabled(); if (!(mV2SigningEnabled)) { return null; } invalidateV2Signature(<START_MOD>); java.util.List<com.android.apksig.internal.apk.v2.V2SchemeSigner.SignerConfig> v2SignerConfigs = createV2SignerConfigs(apkSigningBlockPaddingSupported<END_MOD>); com.android.apksig.internal.util.Pair<byte[], java.lang.Integer> result = com.android.apksig.internal.apk.v2.V2SchemeSigner.generateApkSigningBlock(zipEntries, zipCentralDirectory, zipEocd, <START_MOD>v2SignerConfigs<END_MOD>, apkSigningBlockPaddingSupported); byte[] apkSigningBlock = result.getFirst(); int padSizeBeforeApkSigningBlock = result.getSecond(); mAddV2SignatureRequest = new com.android.apksig.DefaultApkSignerEngine.OutputApkSigningBlockRequestImpl(apkSigningBlock, padSizeBeforeApkSigningBlock); return mAddV2SignatureRequest; }
void getFolderItemsNowPlaying(byte[] bdaddr, com.android.bluetooth.avrcp.AvrcpCmd.FolderItemsCmd reqObj, com.android.bluetooth.avrcp.MediaController mediaController) { java.util.List<android.media.session.MediaSession.QueueItem> <START_MOD>items = mNowPlayingList; if (com.android.bluetooth.avrcp.AddressedMediaPlayer.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, "getFolderItemsNowPlaying"); if (items == null) { if (mediaController == null) { android.util.Log.e(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG,   = null, sending no available players response mMediaInterface.folderItemsRsp(bdaddr, AvrcpConstants.RSP_NO_AVBL_PLAY, null); return; } items = mediaController.getQueue(); if (items == null) { android.util.Log.i(com.android.bluetooth.avrcp.AddressedMediaPlayer.TAG, (( queue from   + (mediaController.getPackageName())) +   constructing current-item list android.media.MediaMetadata metadata = mediaController.getMetadata(); android.media.session.MediaSession.QueueItem current = getCurrentQueueItem(mediaController); items = new<END_MOD> java.util.<START_MOD>ArrayList<END_MOD><android.media.session.MediaSession.QueueItem><START_MOD>(); items.add(current); } }<END_MOD> getFolderItemsFilterAttr(bdaddr, reqObj, <START_MOD>items<END_MOD>, AvrcpConstants.<START_MOD>BTRC_SCOPE_NOW_PLAYING<END_MOD>, reqObj.mStartItem, reqObj.mEndItem); }
@java.lang.Override public void enter() { android.bluetooth.BluetoothDevice erroneouslyConnectedDevice = getBluetoothAudioConnectedDevice(); if (erroneouslyConnectedDevice != null) { android.telecom.Log.w(com.android.server.telecom.bluetooth.BluetoothRouteManager.LOG_TAG, ( AudioOff state but device %s appears to be connected.   + "Disconnecting."), erroneouslyConnectedDevice); disconnectAudio(); } cleanupStatesForDisconnectedDevices(); <START_MOD>mListener.onBluetoothAudioDisconnected(); <END_MOD>}
@org.junit.Test public void testMacAddrTypes() { android.net.MacAddressTest.AddrTypeTestCase[] testcases = new android.net.MacAddressTest.AddrTypeTestCase[]{ android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 0), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNKNOWN, 1, 2, 3, 4, 5, 6, 7), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_UNICAST, 160, 176, 192, 208, 224, 240), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_BROADCAST, 255, 255, 255, 255, 255, 255), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 1, 2, 3, 4, 5, 6), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 11, 22, 33, 44, 55, 66), android.net.MacAddressTest.AddrTypeTestCase.of(MacAddress.TYPE_MULTICAST, 33, 33, 170, 187, 204, 221)<START_MOD>.of(MacAddress.TYPE_UNSPECIFIED, 0, 0, 0, 0, 0, 0)<END_MOD> }; for (android.net.MacAddressTest.AddrTypeTestCase t : testcases) { int got = android.net.MacAddress.macAddressType(t.addr); java.lang.String msg = java.lang.String.format( type of %s to be %s, but got %s java.util.Arrays.toString(t.addr), t.expectedType, got); assertEquals(msg, t.expectedType, got); if (got != (MacAddress.TYPE_UNKNOWN)) { assertEquals(got, android.net.MacAddress.fromBytes(t.addr).<START_MOD>getAddressType<END_MOD>()); } } }
public void test_23831() throws java.lang.Exception { byte[] bytes = new byte[]{ ((byte) (245)), ((byte) (169)), ((byte) (234)), ((byte) (33)) }; java.lang.String expected = <START_MOD>"���!"<END_MOD>; java.nio.charset.CharsetDecoder decoder = java.nio.charset.Charset.forName("UTF-8").newDecoder(); decoder.onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE); assertEquals(expected, decoder.decode(java.nio.ByteBuffer.wrap(bytes)).toString()); assertEquals(expected, new java.lang.String(bytes, "UTF-8")); }
private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { <START_MOD>com.android.internal.util.Preconditions.checkArgument((callback != null),   NetworkCallback com.android.internal.util.Preconditions.checkArgument(((action == (android.net.ConnectivityManager.REQUEST)) || (need != null)),   NetworkCapabilities final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { <END_MOD>if (<START_MOD>(callback.networkRequest) != null) { android.util.Log.e(android.net.ConnectivityManager.TAG,   was already registered } android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action<END_MOD> == <START_MOD>(android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != <END_MOD>null) { <START_MOD>android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { <END_MOD>throw e.rethrowFromSystemServer(); } return request; }
public void testConfigurationUpdatesWhenRotatingWhileDocked() throws java.lang.Exception {<START_MOD> if (!(supportsMultiWindow())) { return; }<END_MOD> setDeviceRotation(0); launchActivityInStack(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); final android.server.cts.ReportedSizes orientationASizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); setDeviceRotation(1); final android.server.cts.ReportedSizes orientationBSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.TEST_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); android.server.cts.ActivityManagerAppConfigurationTests.assertSizesRotate(orientationASizes, orientationBSizes); }
<START_MOD>public void testSystem_setSecurityManager_notNull_throwsException() { try { java.lang.System.setSecurityManager(new java.lang.SecurityManager()); fail(("Expected " + (java.lang.SecurityException.class.getName()))); } catch (java.lang.SecurityException e) { } }<END_MOD>
<START_MOD>public void longDivTest() throws java.lang.Exception { for (int i = 0; i < 500; i++) { if (!(div1())) { java.lang.System.out.println("longDivTest failed."); return; } } for (int i = 0; i < 500; i++) { if (!(div2())) { java.lang.System.out.println("longDivTest failed."); return; } } for (int i = 0; i < 500; i++) { if (!(div3())) { java.lang.System.out.println("longDivTest failed."); return; } } java.lang.System.out.println("longDivTest passes"); }<END_MOD>
<START_MOD>private void setDisplayName() { com.android.internal.telephony.uicc.SubscriptionManager subManager = com.android.internal.telephony.uicc.SubscriptionManager.from(mContext); int[] subId = subManager.getSubId(mParentApp.getPhoneId()); if ((subId == null) || ((subId.length) <= 0)) { log(("subId not valid for Phone " + (mParentApp.getPhoneId()))); return; } android.telephony.SubscriptionInfo subInfo = subManager.getActiveSubscriptionInfo(subId[0]); if ((subInfo != null) && ((subInfo.getNameSource()) != (SubscriptionManager.NAME_SOURCE_USER_INPUT))) { java.lang.CharSequence oldSubName = subInfo.getDisplayName(); java.lang.String newCarrierName = mTelephonyManager.getSimOperatorName(subId[0]); if ((!(android.text.TextUtils.isEmpty(newCarrierName))) && (!(newCarrierName.equals(oldSubName)))) { log(((("sim name[" + (mParentApp.getPhoneId())) + "] = ") + newCarrierName)); com.android.internal.telephony.SubscriptionController.getInstance().setDisplayName(newCarrierName, subId[0]); } } else { log((((("SUB[" + (mParentApp.getPhoneId())) + "] ") + (subId[0])) + " SubInfo not created yet")); } }<END_MOD>
public void testAesCbcHmacSha256Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }
public void setLineWidth(float width) { <START_MOD>if <END_MOD>(width <START_MOD><<END_MOD> 0)<START_MOD> { throw new java.lang.AssertionError(<END_MOD>);<START_MOD> }<END_MOD> mLineWidth = width; }
<START_MOD>@java.lang.Override public java.lang.String toString() { return java.lang.Integer.toString(myNumber); }<END_MOD>
public vogar.commands.Command build() { vogar.commands.Command.Builder builder = new vogar.commands.Command.Builder(log); for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : env.entrySet()) { builder.env(entry.getKey(), entry.getValue()); } builder.args(vmCommand); if (classpathViaProperty) { builder.args(("-Djava.class.path=" + (classpath))); } else { builder.args("-classpath", classpath.toString()); } if (!(bootClasspath.isEmpty())) { builder.args(("-Xbootclasspath/a:" + (bootClasspath))); } if ((userDir) != null) { builder.args(("-Duser.dir=" + (userDir))); } if ((<START_MOD>debugPort<END_MOD>) != null) { builder.args((<START_MOD>("-Xrunjdwp:transport=dt_socket,address=" + <END_MOD>(debugPort)) + ",server=y,suspend=y")); } builder.args(vmArgs); builder.args(mainClass); builder.args(args); builder.tee(output); builder.maxLength(maxLength); return builder.build(); }
<START_MOD>@<END_MOD>java.lang.<START_MOD>Override<END_MOD> <START_MOD>public<END_MOD> <START_MOD>synchronized<END_MOD> <START_MOD>void<END_MOD> <START_MOD>onDisconnect<END_MOD>(int <START_MOD>connectionId<END_MOD>) { <START_MOD>mThreads<END_MOD>.<START_MOD>remove<END_MOD>(<START_MOD>connectionId<END_MOD>); }
<START_MOD>@org.junit.Test public void testBasicDnsConfigurationPushed() throws java.lang.Exception { mCellNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_CELLULAR); mCellNetworkAgent.connect(false); waitForIdle(); final android.net.LinkProperties cellLp = new android.net.LinkProperties(); cellLp.setInterfaceName("test_rmnet_data0"); mCellNetworkAgent.sendLinkProperties(cellLp); waitForIdle(); verify(mNetworkManagementService, times(1)).setDnsConfigurationForNetwork(anyInt(), mStringArrayCaptor.capture(), any()); com.android.server.ConnectivityServiceTest.assertEmpty(mStringArrayCaptor.getValue()); reset(mNetworkManagementService); cellLp.addDnsServer(java.net.InetAddress.getByName("2001:db8::1")); cellLp.addDnsServer(java.net.InetAddress.getByName("192.0.2.1")); mCellNetworkAgent.sendLinkProperties(cellLp); waitForIdle(); verify(mNetworkManagementService, times(1)).setDnsConfigurationForNetwork(anyInt(), mStringArrayCaptor.capture(), any()); assertEquals(2, mStringArrayCaptor.getValue().length); assertTrue(com.android.internal.util.ArrayUtils.containsAll(mStringArrayCaptor.getValue(), new java.lang.String[]{ "2001:db8::1", "192.0.2.1" })); reset(mNetworkManagementService); }<END_MOD>
public void testGoodOverrideFile() throws java.lang.Exception { java.io.RandomAccessFile in = new java.io.RandomAccessFile(libcore.util.ZoneInfoDBTest.<START_MOD>DEFAULT_FILE_2, "r"); byte[] content = new byte[((int) (in.length()))]; in.readFully(content); content[6] = '9'; content[7] = '9'; content[8] = '9'; content[9] = '9'; content[10] = 'z'; in.close(); java.lang.String goodFile = libcore.util.ZoneInfoDBTest.makeTemporaryFile(content); try { libcore.util.ZoneInfoDB.TzData data = new libcore.util.ZoneInfoDB.TzData(goodFile, libcore.util.ZoneInfoDBTest.<END_MOD>DEFAULT_FILE_1, <START_MOD>libcore.util.ZoneInfoDBTest.DEFAULT_FILE_2); assertEquals("9999z", data.getVersion()); assertEquals(java.util.TimeZone.getAvailableIDs()<END_MOD>.length<START_MOD>, data.getAvailableIDs().length); } finally { new java.io.File(<END_MOD>goodFile<START_MOD>).delete(<END_MOD>); } }
@java.lang.Override public <START_MOD>java.util.List<<END_MOD>com.android.ide.common.rendering.api.ViewInfo<START_MOD>><END_MOD> getRootView() { return mRootViewInfo; }
<START_MOD>@com.android.internal.annotations.GuardedBy("this") private void setVpnForcedWithExemptionsLocked(boolean enforce, @android.annotation.Nullable java.util.List<java.lang.String> exemptedPackages) { final java.util.Set<android.net.UidRange> removedRanges = new android.util.ArraySet(mBlockedUsers); final java.util.Set<android.net.UidRange> addedRanges; if (enforce) { addedRanges = createUserAndRestrictedProfilesRanges(mUserHandle, null, exemptedPackages); removedRanges.removeAll(addedRanges); addedRanges.removeAll(mBlockedUsers); } else { addedRanges = java.util.Collections.<android.net.UidRange>emptySet(); } setAllowOnlyVpnForUids(false, removedRanges); setAllowOnlyVpnForUids(true, addedRanges); }<END_MOD>
@com.android.annotations.NonNull public java.util.Set<java.lang.String> getApplicableFilters() { if (!(enable)) { return java.util.Collections.singleton(null); } java.util.Set<java.lang.String> results = com.google.common.collect.Sets.newHashSetWithExpectedSize(<START_MOD>values<END_MOD>.size()); for (java.lang.String <START_MOD>value<END_MOD> : <START_MOD>values<END_MOD>) { if (<START_MOD>allowedValues<END_MOD>.contains(<START_MOD>value<END_MOD>)) { <START_MOD>java.lang.System.out.println((   + value)); <END_MOD>results.add(<START_MOD>value<END_MOD>); }<START_MOD> else { java.lang.System.out.println((   + value));<END_MOD> } } return results; }
<START_MOD>private boolean isLocationEnabled() { return (Settings.Secure.getInt(getContentResolver(), Settings.Secure.LOCATION_MODE, Settings.Secure.LOCATION_MODE_OFF)) != (Settings.Secure.LOCATION_MODE_OFF); }<END_MOD>
@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock catchBlock) { super.visit(catchBlock); assert currentStmts.isEmpty(); java.util.List<com.android.jack.ir.ast.JStatement> catchStmts = catchBlock.getStatements(); assert (catchStmts.size()) >= 1; accept(catchStmts.get(0)); assert (cfg) != null; com.android.jack.cfg.CatchBasicBlock catchBasicBlock = new com.android.jack.cfg.CatchBasicBlock(cfg, currentStmts, catchBlock.getCatchTypes(), catchBlock.getCatchVar()); setBlockOfStatement(catchBasicBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(getConcreteStatement(catchBlock)); if (nextStatement != null) { forwardBranchResolver.<START_MOD>addNormalBasicBlock(<END_MOD>catchBasicBlock, nextStatement); } accept(catchStmts.subList(1, catchStmts.size())); return false; }
private void handleNetCap(android.net.Network network, android.net.NetworkCapabilities newNc) { <START_MOD>android.net.NetworkState newState = null; final android.net.NetworkState prev = mNetworkMap.get(network); <END_MOD>if (<START_MOD>prev == null) { newState = new android.net.NetworkState(null, null, newNc, network, null, null); } else if (<END_MOD>!(<START_MOD>newNc.equals(prev.networkCapabilities))) { newState = new android.net.NetworkState(null, prev.linkProperties, newNc, network, null, null); } else<END_MOD> { return; } if (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.VDBG) { android.util.Log.d(com.android.server.connectivity.tethering.UpstreamNetworkMonitor.TAG, java.lang.String.format( for %s: %s network, newNc)); } mNetworkMap.put(network, <START_MOD>newState<END_MOD>); notifyTarget(com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_CAPABILITIES, network); }
<START_MOD>@com.android.annotations.NonNull @java.lang.Override public com.android.ide.common.process.ProcessResult execute(@com.android.annotations.NonNull com.android.ide.common.process.ProcessInfo processInfo, @com.android.annotations.NonNull com.android.ide.common.process.ProcessOutputHandler processOutputHandler) { java.util.List<java.lang.String> command = com.google.common.collect.Lists.newArrayList(); command.add(processInfo.getExecutable()); command.addAll(processInfo.getArgs()); java.lang.String commandString = com.google.common.base.Joiner.on(' ').join(command); mLogger.info(("command: " + commandString)); try { java.lang.ProcessBuilder processBuilder = new java.lang.ProcessBuilder(command); java.util.Map<java.lang.String, java.lang.Object> envVariableMap = processInfo.getEnvironment(); if (!(envVariableMap.isEmpty())) { java.util.Map<java.lang.String, java.lang.String> env = processBuilder.environment(); for (java.util.Map.Entry<java.lang.String, java.lang.Object> entry : envVariableMap.entrySet()) { env.put(entry.getKey(), entry.getValue().toString()); } } java.lang.Process process = processBuilder.start(); com.android.ide.common.process.ProcessOutput output = processOutputHandler.createOutput(); int exitCode = com.android.ide.common.process.DefaultProcessExecutor.grabProcessOutput(process, output); processOutputHandler.handleOutput(output); return new com.android.ide.common.process.ProcessResultImpl(commandString, exitCode); } catch (java.io.IOException e) { return new com.android.ide.common.process.ProcessResultImpl(commandString, e); } catch (java.lang.InterruptedException e) { return new com.android.ide.common.process.ProcessResultImpl(commandString, e); } catch (com.android.ide.common.process.ProcessException e) { return new com.android.ide.common.process.ProcessResultImpl(commandString, e); } }<END_MOD>
public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if ((obj == null) || ((getClass()) != (obj.getClass()))) return false; java.text.DateFormatSymbols that = ((java.text.DateFormatSymbols) (obj)); <START_MOD>if (!(((((((((((((((java.util.Arrays.equals(eras, that.eras)) && (java.util.Arrays.equals(months, that.months))) && (java.util.Arrays.equals(shortMonths, that.shortMonths))) && (java.util.Arrays.equals(tinyMonths, that.tinyMonths))) && (java.util.Arrays.equals(weekdays, that.weekdays))) && (java.util.Arrays.equals(shortWeekdays, that.shortWeekdays))) && (java.util.Arrays.equals(tinyWeekdays, that.tinyWeekdays))) && (java.util.Arrays.equals(standAloneMonths, that.standAloneMonths))) && (java.util.Arrays.equals(shortStandAloneMonths, that.shortStandAloneMonths))) && (java.util.Arrays.equals(tinyStandAloneMonths, that.tinyStandAloneMonths))) && (java.util.Arrays.equals(standAloneWeekdays, that.standAloneWeekdays))) && (java.util.Arrays.equals(shortStandAloneWeekdays, that.shortStandAloneWeekdays))) && (java.util.Arrays.equals(tinyStandAloneWeekdays, that.tinyStandAloneWeekdays))) && (java.util.Arrays.equals(ampms, that.ampms))) && ((((localPatternChars) != null) && (localPatternChars.equals(that.localPatternChars))) || (((localPatternChars) == null) && ((that.localPatternChars) == null))))) { <END_MOD>return <START_MOD>false; } if ((((zoneStrings) == null) && ((that.zoneStrings) == null)) && (java.util.Objects.equals(locale, that.locale))) { return true; } return <END_MOD>java.util.Arrays.deepEquals(getZoneStringsWrapper(), that.getZoneStringsWrapper()); }
<START_MOD>@org.junit.Test public void testSplitLastPeriod() { com.ibm.icu.text.TimeZoneNames timeZoneNames = com.ibm.icu.text.TimeZoneNames.getInstance(ULocale.ENGLISH); com.ibm.icu.util.BasicTimeZone honoluluTz = ((com.ibm.icu.util.BasicTimeZone) (com.ibm.icu.util.TimeZone.getTimeZone("Pacific/Honolulu"))); int honoluluRawOffset = -36000000; int honoluluDstOffset = 0; java.lang.String honoluluOldName = null; java.lang.String honoluluNewName = "Hawaii-Aleutian Standard Time"; java.time.Instant startInstant = java.time.Instant.EPOCH; java.time.Instant endInstant = java.time.Instant.ofEpochSecond(631152000L); com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod honoluluPeriod = com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod.create(timeZoneNames, honoluluTz, startInstant, endInstant); java.time.Instant partitionInstant = java.time.Instant.ofEpochSecond(500000000L); com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod[] shards = com.android.libcore.timezone.tzlookup.zonetree.ZoneOffsetPeriod.splitAtTime(honoluluPeriod, timeZoneNames, honoluluTz, partitionInstant); assertEquals(startInstant, shards[0].getStartInstant()); assertEquals(partitionInstant, shards[0].getEndInstant()); assertEquals(honoluluRawOffset, shards[0].getRawOffsetMillis()); assertEquals(honoluluDstOffset, shards[0].getDstOffsetMillis()); assertEquals(honoluluOldName, shards[0].getName()); assertEquals(partitionInstant, shards[1].getStartInstant()); assertEquals(endInstant, shards[1].getEndInstant()); assertEquals(honoluluRawOffset, shards[1].getRawOffsetMillis()); assertEquals(honoluluDstOffset, shards[1].getDstOffsetMillis()); assertEquals(honoluluNewName, shards[1].getName()); }<END_MOD>
public static final void main(java.lang.String[] argv) {<START_MOD> com.android.internal.os.RuntimeInit.enableDebuggingFeatures();<END_MOD> if (((argv.length) == 2) && (argv[1].equals("application"))) { if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG,   Starting application com.android.internal.os.RuntimeInit.redirectLogStreams(); } else { if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG,   Starting tool } com.android.internal.os.RuntimeInit.commonInit(); com.android.internal.os.RuntimeInit.nativeFinishInit(); if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG,   RuntimeInit! }
static float <START_MOD>$opt$noinline$LongToFloat<END_MOD>(long a) { return ((float) (a)); }
private com.android.internal.telephony.RILRequest findAndRemoveRequestFromList(int serial) { com.android.internal.telephony.RILRequest rr = null; synchronized(mRequestList) { rr = mRequestList.get(serial); if (rr != null) { mRequestList.remove(serial); } } <START_MOD>if (rr != null) { } <END_MOD>return rr; }
@java.lang.Override public void runConformTest(java.lang.String[] srcDescription) { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeList = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(1); excludeList.add(com.android.jack.test.toolchain.JillBasedToolchain.class); com.android.jack.test.toolchain.JackBasedToolchain jackToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, excludeList); <START_MOD>try { java.io.File sourceFolder = buildSourceFolder(srcDescription); java.io.File dexOutDir = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); <END_MOD>jackToolchain.addToClasspath(jackToolchain.getDefaultBootClasspath()); jackToolchain.setSourceLevel(SourceLevel.JAVA_8); jackToolchain.srcToExe(dexOutDir, false, sourceFolder); } catch (java.lang.Exception e) { e.printStackTrace(); junit.framework.Assert.fail(); } }
<START_MOD>@java.lang.Override public void close() throws java.io.IOException { if (hasEntries) { super.close(); } else { subStream.close(); } }<END_MOD>
<START_MOD>@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JSynchronizedBlock jSyncBock) { if (!(jSyncBock.getLockExpr().getType().isSameType(ams))) { return; } com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest(jSyncBock.getParent()); tr.append(new com.android.jack.transformations.request.PrependStatement(jSyncBock.getSynchronizedBlock(), makeBoostCall(jSyncBock.getSourceInfo()))); tr.append(new com.android.jack.transformations.request.AppendStatement(jSyncBock.getSynchronizedBlock(), makeResetCall(jSyncBock.getSourceInfo()))); tr.commit(); java.lang.System.out.println("Inserted boost / reset Calls."); }<END_MOD>
public static void main(java.lang.String[] args) { Main.InlineVoid(); if ((Main.InlineInt()) != 4) { throw new java.lang.Error(); } if ((Main.InlineWide()) != 8L) { throw new java.lang.Error(); } if ((Main.InlineParameter(42)) != 42) { throw new java.lang.Error(); } if ((Main.InlineWideParameter(4294967297L)) != 4294967297L) { throw new java.lang.Error(); } if ((Main.InlineReferenceParameter(Main.class)) != (Main.class)) { throw new java.lang.Error(); } if ((Main.InlineAdd()) != 8) { throw new java.lang.Error(); } if (((Main.InlineFieldAccess()) != 43) || ((Main.InlineFieldAccess()) != 44)) { throw new java.lang.Error(); } if ((Main.InlineWithControlFlow(true)) != 4) { throw new java.lang.Error(); } if ((Main.InlineWithControlFlow(false)) != 2) { throw new java.lang.Error(); } <START_MOD>if ((Main.InlinedIntrinsicsAreStillIntrinsic()) != 1) { throw new java.lang.Error(); } }<END_MOD>
<START_MOD>@java.lang.Override public void onPrivateDnsValidationEvent(int netId, java.lang.String ipAddress, java.lang.String hostname, boolean validated) { try { mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_PRIVATE_DNS_VALIDATION_UPDATE, new com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate(netId, java.net.InetAddress.parseNumericAddress(ipAddress), hostname, validated))); } catch (java.lang.IllegalArgumentException e) { } }<END_MOD>
@java.lang.Override public void freeUnderlyingResources() { for (int direction : com.android.server.IpSecService.DIRECTIONS) { int spi = mSpis[direction].getSpi(); try { mSrvConfig.getNetdInstance().ipSecDeleteSecurityAssociation(mResourceId, direction, mConfig.getLocalAddress(), mConfig.getRemoteAddress(), spi<START_MOD>, 0, 0<END_MOD>); } catch (android.os.ServiceSpecificException e) { } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.IpSecService.TAG, ( to delete SA with ID:   + (mResourceId))); } } getResourceTracker().give(); }
void cleanup() { mRegularScanClients.clear(); mBatchClients.clear(); mSuspendedScanClients.clear(); mScanNative.cleanup(); if ((mActivityManager) != null) { <START_MOD>try { <END_MOD>mActivityManager.removeOnUidImportanceListener(mUidImportanceListener); } <START_MOD>catch (java.lang.IllegalArgumentException e) { android.util.Log.e(com.android.bluetooth.gatt.ScanManager.TAG,   when invoking removeOnUidImportanceListener e); } } <END_MOD>if ((mDm) != null) { mDm.unregisterDisplayListener(mDisplayListener); } if ((mHandler) != null) { mHandler.removeCallbacksAndMessages(null); android.os.Looper looper = mHandler.getLooper(); if (looper != null) { looper.quitSafely(); } mHandler = null; } }
<START_MOD>public void onPreferredNfcFServiceChanged() { if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, "Preferred NFC-F service changed."); synchronized(mLock) { generateT3tIdentifiersCacheLocked(); } }<END_MOD>
@java.lang.Override public boolean onConnect(android.bluetooth.BluetoothDevice device, android.bluetooth.BluetoothSocket socket) { if (com.android.bluetooth.opp.BluetoothOppService.D) { android.util.Log.d(com.android.bluetooth.opp.BluetoothOppService.TAG, ((( onConnect BluetoothSocket : + socket) +     :device : + device)); } com.android.bluetooth.BluetoothObexTransport transport = new com.android.bluetooth.BluetoothObexTransport(socket); android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.opp.BluetoothOppService.MSG_INCOMING_BTOPP_CONNECTION); msg.obj = transport; msg.sendToTarget(); <START_MOD>mAcceptNewConnect = false; <END_MOD>return true; }
<START_MOD>private void scheduleTimeout() { mHandler.removeMessages(com.android.cts.verifier.managedprovisioning.ByodHelperActivity.MSG_TIMEOUT); mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.cts.verifier.managedprovisioning.ByodHelperActivity.MSG_TIMEOUT), mTimeout); }<END_MOD>
public void writeToParcel(android.os.Parcel dest, int flags) { <START_MOD>if ((networkCapabilities) != null) { <END_MOD>dest.<START_MOD>writeInt<END_MOD>(<START_MOD>1); <END_MOD>networkCapabilities<START_MOD>.writeToParcel(dest<END_MOD>, flags);<START_MOD> } else { dest.writeInt(0); }<END_MOD> dest.writeInt(legacyType); dest.writeInt(requestId); dest.writeString(type.name()); }
@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); <START_MOD>dest.writeArraySet(new android.util.ArraySet(mAllowedUids)); <END_MOD>}
<START_MOD>@java.lang.Override public boolean canAddMoreManagedProfiles() { com.android.server.pm.UserManagerService.checkManageUsersPermission("check if more managed profiles can be added."); synchronized(mPackagesLock) { if ((numberOfUsersOfTypeLocked(UserInfo.FLAG_MANAGED_PROFILE, true)) >= (com.android.server.pm.UserManagerService.MAX_MANAGED_PROFILES)) { return false; } } int usersCount = getAliveUsersExcludingGuestsCount(); return (usersCount == 1) || (usersCount < (android.os.UserManager.getMaxSupportedUsers())); }<END_MOD>
@org.junit.Test public void testCompile021() throws java.lang.Exception { java.lang.String packageName = "com.android.jack.switchstatement.test021.jack"; java.lang.String classPrefix = (packageName.replace('.', '_')) + "_"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put("Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo("java_lang_Thread$State", <START_MOD>false)); input.put("SyntheticSwitchmapClass-*", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo("java_lang_Thread$State", <END_MOD>true)); checkCompiledCode(packageName, input); }
private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, <START_MOD>android.renderscript.Int2 javaRslt, android.renderscript.Int2 rsRslt) { final boolean success = ((javaRslt.x) == (rsRslt.x)) && ((javaRslt.y) == (rsRslt.y)); java.lang.String status = (success) ? "PASSED" : "FAILED"; if (success && (t != null)) status +=     + (t.string()); android.util.Log.i(<END_MOD>com.android.rs.test.<START_MOD>UT_reduce.TAG, ((((((((((((testName +   java ( + (javaRslt.x)) +     + (javaRslt.y)) + ")") +   <END_MOD>rs<START_MOD> ( + (rsRslt.x)) +     + (rsRslt.y)) + ")") +     +<END_MOD> status)); return success; }
public static void updateThread(android.database.sqlite.SQLiteDatabase db, long thread_id) { if (thread_id < 0) { com.android.providers.telephony.MmsSmsDatabaseHelper.updateAllThreads(db, null, null); return; } <START_MOD>com.android.providers.telephony.MmsSmsDatabaseHelper.updateAllThreads(<END_MOD>db, <START_MOD> <END_MOD> = ?) new java.lang.String[]{ java.lang.String.valueOf(thread_id) }); }
public void testMinimalSizeDocked() throws java.lang.Exception { if (<START_MOD>(<END_MOD>!(supportsMultiWindowMode(<START_MOD>))) || (!(supportsSplitScreenMultiWindow()<END_MOD>))) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(android.server.cts.INFO,   test: no multi-window support return; } testMinimalSize(android.server.cts.DOCKED_STACK_ID); }
<START_MOD>void sendMediaKeyEvent(int key, int state) { com.android.bluetooth.avrcp.MediaPlayerList.d(((("sendMediaKeyEvent: key=" + key) + " state=") + state)); int action = (state == 0) ? android.view.KeyEvent.ACTION_DOWN : android.view.KeyEvent.ACTION_UP; android.view.KeyEvent event = new android.view.KeyEvent(action, com.android.bluetooth.avrcp.Helpers.avrcpPassthroughToKeyCode(key)); mMediaSessionManager.dispatchMediaKeyEvent(event); }<END_MOD>
<START_MOD>@java.lang.Override @javax.annotation.Nonnull java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.BaseVFile file) throws com.android.sched.util.file.WrongPermissionException { assert (mdFactory) != null; return new java.security.DigestOutputStream(vfs.openWrite(file), mdFactory.create()) { @java.lang.Override public void close() throws java.io.IOException { super.close(); com.android.sched.vfs.MessageDigestFS.this.digest = new java.lang.String(com.android.sched.vfs.MessageDigestFS.encode(getMessageDigest().digest())); } }; }<END_MOD>
public void reloadSdk(com.android.<START_MOD>utils<END_MOD>.<START_MOD>ILogger<END_MOD> log) { java.util.ArrayList<com.android.sdklib.IAndroidTarget> list = new java.util.ArrayList<com.android.sdklib.IAndroidTarget>(); com.android.sdklib.SdkManager.loadPlatforms(mOsSdkPath, list, log); com.android.sdklib.SdkManager.loadAddOns(mOsSdkPath, list, log); java.util.Collections.sort(list); setTargets(list.toArray(new com.android.sdklib.IAndroidTarget[list.size()])); initializeSamplePaths(log); }
<START_MOD>java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>[] value() default { };<END_MOD>
<START_MOD>private void checkAbsShort4() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I16_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inValue, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U16_4(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testAbsShort4(inValue, out); verifyResultsAbsShort4(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAbsShort4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U16_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAbsShort4(inValue, out); verifyResultsAbsShort4(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testAbsShort4: " + (e.toString()))); } }<END_MOD>
public void dispose() { <START_MOD>synchronized(this) { if ((mService) == null) { return; <END_MOD>}<START_MOD> try { mService.dispose(mAppName, mSubscriptionId); } catch (android.os.RemoteException e) { } } }<END_MOD>
<START_MOD>private void startUSBTethering() { com.android.pmc.PMCMainActivity.OnStartTetheringCallback tetherCallback = new com.android.pmc.PMCMainActivity.OnStartTetheringCallback(); mConnManager.startTethering(ConnectivityManager.TETHERING_USB, true, tetherCallback); if (uTethered) { mBtnStart.setEnabled(false); mRadioGroup.setFocusable(false); mTextView.setText("Started usb tethering"); } }<END_MOD>
void onBluetoothStateChange(boolean on);
public void startTrackingBssids(android.net.wifi.WifiScanner.BssidInfo[] bssidInfos, int apLostThreshold, android.net.wifi.WifiScanner.BssidListener listener) { }
public int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws java.io.InterruptedIOException<START_MOD>, libcore.io.ErrnoException<END_MOD>;
@java.lang.Override public void apply() { for (java.lang.Object candidate : toAnnotate) { if (candidate instanceof com.android.jack.ir.ast.Annotable) { com.android.jack.ir.ast.Annotable annotable = ((com.android.jack.ir.ast.Annotable) (candidate)); if (annotable.getAnnotation(annotation)<START_MOD>.isEmpty()<END_MOD>) { com.android.jack.ir.ast.JAnnotationLiteral literal = new com.android.jack.ir.ast.JAnnotationLiteral(com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN, annotation.getRetentionPolicy(), annotation); annotable.addAnnotation(literal); literal.updateParents(((com.android.jack.ir.ast.JNode) (annotable))); } } } }
<START_MOD>@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.VPath getPath() { return wrappedFiles.get(0).getPath(); }<END_MOD>
void stopScan() { (this.scansStopped)++; <START_MOD>if (!(<END_MOD>isScanning<START_MOD>)) return; isScanning<END_MOD> = false; stopTime = java.lang.System.currentTimeMillis(); long currTime = (stopTime) - (startTime); minScanTime = java.lang.Math.min(currTime, minScanTime); maxScanTime = java.lang.Math.max(currTime, maxScanTime); totalScanTime += currTime; lastScans.add(currTime); if ((lastScans.size()) > (com.android.bluetooth.gatt.ContextMap.ScanStats.NUM_SCAN_DURATIONS_KEPT)) { lastScans.remove(0); } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_STOP); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setInitiator(appName); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); synchronized(mScanEvents) { if ((mScanEvents.size()) == (com.android.bluetooth.gatt.ContextMap.NUM_SCAN_EVENTS_KEPT)) mScanEvents.remove(0); mScanEvents.add(scanEvent); } }
public static boolean updateProjects(org.eclipse.jdt.core.IJavaProject[] androidProjects) { try { int projectCount = androidProjects.length; org.eclipse.jdt.core.IClasspathContainer[] <START_MOD>libraryContainers<END_MOD> = new org.eclipse.jdt.core.IClasspathContainer[projectCount]; <START_MOD>org.eclipse.jdt.core.IClasspathContainer[] dependencyContainers = new org.eclipse.jdt.core.IClasspathContainer[projectCount]; <END_MOD>for (int i = 0; i < projectCount; i++) { <START_MOD>libraryContainers<END_MOD>[i] = com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.allocateLibraryContainer(androidProjects[i]); <START_MOD>dependencyContainers[i] = com.android.ide.eclipse.adt.internal.project.LibraryClasspathContainerInitializer.allocateDependencyContainer(androidProjects[i]); <END_MOD>} org.eclipse.jdt.core.JavaCore.setClasspathContainer(new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.AdtConstants.CONTAINER_LIBRARIES), androidProjects, <START_MOD>libraryContainers<END_MOD>, new org.eclipse.core.runtime.NullProgressMonitor()); <START_MOD>org.eclipse.jdt.core.JavaCore.setClasspathContainer(new org.eclipse.core.runtime.Path(com.android.ide.eclipse.adt.AdtConstants.CONTAINER_DEPENDENCIES), androidProjects, dependencyContainers, new org.eclipse.core.runtime.NullProgressMonitor()); <END_MOD>return true; } catch (org.eclipse.jdt.core.JavaModelException e) { return false; } }
public void close() { android.util.Log.d(android.net.IpSecTransform.TAG, ( Transform with Id   + (mResourceId))); if ((mResourceId) == (android.net.IpSecManager.INVALID_RESOURCE_ID)) { mCloseGuard.close(); return; } try { android.net.IIpSecService svc = getIpSecService(); <START_MOD>synchronized(mKeepaliveCallback) { if ((mKeepalive) != null) { stopNattKeepalive(); } } <END_MOD>svc.deleteTransportModeTransform(mResourceId); } catch (android.os.RemoteException e) { throw e.rethrowAsRuntimeException(); } finally { mResourceId = android.net.IpSecManager.INVALID_RESOURCE_ID; mCloseGuard.close(); } }
public int size() { return configs.<START_MOD>size()<END_MOD>; }
<START_MOD>private void exitIdleMode() { }<END_MOD>
@java.lang.Override public void testFailed(com.android.ide.eclipse.adt.internal.launch.junit.runtime.TestFailure status, com.android.ddmlib.testrunner.TestIdentifier test, java.lang.String trace) { <START_MOD>java.lang.System.out.println(( failed:   + test)); <END_MOD>}
public abstract java.util.Collection<com.android.ide.eclipse.adt.internal.resources.manager.<START_MOD>ResourceItem<END_MOD>> getResources(com.android.resources.ResourceType type, com.android.ide.eclipse.adt.internal.resources.manager.<START_MOD>ResourceRepository<END_MOD> <START_MOD>resources<END_MOD>);
public void deviceConnected(final com.android.ddmlib.IDevice device) { <START_MOD>executeInBackground( device new java.lang.Runnable() { public void run() { <END_MOD>if (device.isOnline()) { com.android.hierarchyviewerlib.device.DeviceBridge.setupDeviceForward(device); if (!(com.android.hierarchyviewerlib.device.DeviceBridge.isViewServerRunning(device))) { if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { try { java.lang.Thread.sleep(2000); } catch (java.lang.InterruptedException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, ( to debug device   + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); return; } if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, ( to debug device   + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); } else { loadViewServerInfoAndWindows(device); } return; } } loadViewServerInfoAndWindows(device); } }<START_MOD> }); }<END_MOD>
public void testReadWrite_NonBlock_Normal() throws java.lang.Exception { byte[] sourceArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; byte[] targetArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; for (int i = 0; i < (sourceArray.length); i++) { sourceArray[i] = ((byte) (i)); } this.channel1.configureBlocking(false); this.channel2.configureBlocking(false); this.channel1.socket().bind(<START_MOD>datagramSocket2Address<END_MOD>); this.channel1.connect(<START_MOD>datagramSocket1Address<END_MOD>); this.channel2.socket().bind(<START_MOD>datagramSocket1Address<END_MOD>); this.channel2.connect(<START_MOD>datagramSocket2Address<END_MOD>); readWriteReadData(this.channel1, sourceArray, this.channel2, targetArray, org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL, "testReadWrite_NonBlock_Normal"); }
<START_MOD>private org.eclipse.core.resources.IResource copyJarIntoProject(org.eclipse.core.resources.IProject project, java.io.File jarPath, org.eclipse.core.runtime.IProgressMonitor monitor) throws java.io.IOException, org.eclipse.core.runtime.CoreException { org.eclipse.core.resources.IResource res = project.findMember(SdkConstants.FD_NATIVE_LIBS); if (res == null) { org.eclipse.core.resources.IFolder resFolder = project.getFolder(SdkConstants.FD_NATIVE_LIBS); resFolder.create(IResource.FORCE, true, new org.eclipse.core.runtime.SubProgressMonitor(monitor, 1)); res = resFolder; } org.eclipse.core.runtime.IPath resPath = (res == null) ? null : res.getLocation(); java.io.File osResDir = (resPath == null) ? null : resPath.toFile(); java.io.File destPath = new java.io.File(osResDir, jarPath.getName()); copyFile(jarPath, destPath); return project.findMember((((com.android.sdklib.SdkConstants.FD_NATIVE_LIBS) + (com.android.ide.eclipse.adt.AdtConstants.WS_SEP)) + (destPath.getName()))); }<END_MOD>
public android.graphics.Bitmap getPhoto(int appWidgetId) { android.database.Cursor c = null; android.graphics.Bitmap bitmap = null; try { android.database.sqlite.SQLiteDatabase db = getReadableDatabase(); java.lang.String<START_MOD>[] selectionArgs = new<END_MOD> java.lang.String<START_MOD>[]{<END_MOD> com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.FIELD_APPWIDGET_ID, <START_MOD>java.lang.String.valueOf(<END_MOD>appWidgetId)<START_MOD> }<END_MOD>; c = db.query(com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.TABLE_PHOTOS, com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.PHOTOS_PROJECTION, <START_MOD>"?=?", selectionArgs<END_MOD>, null, null, null, null); if ((c != null) && (com.cooliris.media.PhotoAppWidgetProvider.LOGD)) { android.util.Log.d(com.cooliris.media.PhotoAppWidgetProvider.TAG, ( query count= + (c.getCount()))); } if ((c != null) && (c.moveToFirst())) { byte[] data = c.getBlob(com.cooliris.media.PhotoAppWidgetProvider.PhotoDatabaseHelper.INDEX_PHOTO_BLOB); if (data != null) { bitmap = android.graphics.BitmapFactory.decodeByteArray(data, 0, data.length); } } } catch (android.database.sqlite.SQLiteException e) { android.util.Log.e(com.cooliris.media.PhotoAppWidgetProvider.TAG,   not load photo from database e); } finally { if (c != null) { c.close(); } } return bitmap; }
@java.lang.Override public java.lang.String installPackage(java.lang.String packageFilePath, boolean reinstall, java.lang.String... extraArgs) throws com.android.ddmlib.InstallException { try { java.lang.String remoteFilePath = syncPackageToDevice(packageFilePath); java.lang.String result = installRemotePackage(remoteFilePath, reinstall, extraArgs); removeRemotePackage(remoteFilePath); return result; } catch (java.io.IOException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.AdbCommandRejectedException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.TimeoutException e) { throw new com.android.ddmlib.InstallException(e); } catch (com.android.ddmlib.SyncException e) { throw new com.android.ddmlib.InstallException(e); } <START_MOD>catch (java.lang.InterruptedException e) { throw new com.android.ddmlib.InstallException(e); } }<END_MOD>
<START_MOD>public com.android.monkeyrunner.easy.HierarchyViewer getHierarchyViewer() { return new com.android.monkeyrunner.easy.HierarchyViewer(device); }<END_MOD>
@java.lang.Override public int bulkInsert(android.net.Uri uri, android.content.ContentValues[] values) { int match = com.android.providers.media.MediaProvider.URI_MATCHER.match(uri); if (match == (com.android.providers.media.MediaProvider.VOLUMES)) { return super.bulkInsert(uri, values); } com.android.providers.media.MediaProvider.DatabaseHelper helper = getDatabaseForUri(uri); if (helper == null) { throw new java.lang.UnsupportedOperationException(( URI:   + uri)); } android.database.sqlite.SQLiteDatabase db = helper.getWritableDatabase(); if (db == null) { throw new java.lang.IllegalStateException(( open database for   + uri)); } if ((match == (com.android.providers.media.MediaProvider.AUDIO_PLAYLISTS_ID)) || (match == (com.android.providers.media.MediaProvider.AUDIO_PLAYLISTS_ID_MEMBERS))) { return playlistBulkInsert(db, uri, values); } else if (match == (com.android.providers.media.MediaProvider.MTP_OBJECT_REFERENCES)) { int handle = java.lang.Integer.parseInt(uri.getPathSegments().get(2)); return setObjectReferences(helper, db, handle, values); } db.beginTransaction(); java.util.ArrayList<java.lang.Long> notifyRowIds = new java.util.ArrayList<java.lang.Long>(); int numInserted = 0; try { int len = values.length; for (int i = 0; i < len; i++) { if ((values[i]) != null) { insertInternal(uri, match, values[i], notifyRowIds); } } numInserted = len; db.setTransactionSuccessful(); } finally { db.endTransaction(); } <START_MOD>if (uri != null) { if (uri.toString().contains("content://media/external")) { <END_MOD>notifyMtp(notifyRowIds); <START_MOD>} } <END_MOD>getContext().getContentResolver().notifyChange(uri, null); return numInserted; }
<START_MOD>public void testSerializeSession_NullOCSPResponses() throws java.lang.Exception { org.conscrypt.OpenSSLSessionImpl mockSession = mock(org.conscrypt.OpenSSLSessionImpl.class); when(mockSession.getId()).thenReturn(new byte[]{ 17, 9, 3, 32 }); when(mockSession.getPeerHost()).thenReturn("ssl.example.com"); when(mockSession.getPeerPort()).thenReturn(443); when(mockSession.getEncoded()).thenReturn(new byte[]{ 1, 2, 3 }); when(mockSession.getStatusResponses()).thenReturn(null); java.security.cert.Certificate mockCert = mock(java.security.cert.Certificate.class); when(mockCert.getEncoded()).thenReturn(new byte[]{ 5, 6, 7, 16 }); when(mockSession.getPeerCertificates()).thenReturn(new java.security.cert.Certificate[]{ mockCert }); org.conscrypt.SSLClientSessionCache mockCache = mock(org.conscrypt.SSLClientSessionCache.class); org.conscrypt.ClientSessionContext context = new org.conscrypt.ClientSessionContext(); context.setPersistentCache(mockCache); context.putSession(mockSession); verify(mockCache).putSessionData(eq(mockSession), any(byte[].class)); }<END_MOD>
public java.io.FileDescriptor open(java.lang.String path, int flags, int mode) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { return os.open(path, flags, mode); }
private void queryNewDeviceForInfo(com.android.ddmlib.Device device) { try { device.<START_MOD>fetchProperties(<END_MOD>); queryNewDeviceForMountingPoint(device, IDevice.MNT_EXTERNAL_STORAGE); queryNewDeviceForMountingPoint(device, IDevice.MNT_DATA); queryNewDeviceForMountingPoint(device, IDevice.MNT_ROOT); if (device.isEmulator()) { com.android.ddmlib.EmulatorConsole console = com.android.ddmlib.EmulatorConsole.getConsole(device); if (console != null) { device.setAvdName(console.getAvdName()); console.close(); } } } catch (com.android.ddmlib.TimeoutException e) { com.android.ddmlib.Log.w("DeviceMonitor", java.lang.String.format( timeout getting info for device %s device.getSerialNumber())); } catch (com.android.ddmlib.AdbCommandRejectedException e) { com.android.ddmlib.Log.w("DeviceMonitor", java.lang.String.format( rejected command to get device %1$s info: %2$s device.getSerialNumber(), e.getMessage())); } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { com.android.ddmlib.Log.w("DeviceMonitor", java.lang.String.format( shell command took too long returning info for device %s device.getSerialNumber())); } catch (java.io.IOException e) { com.android.ddmlib.Log.w("DeviceMonitor", java.lang.String.format( Error getting info for device %s device.getSerialNumber())); } }
<START_MOD>@java.lang.Override public int getTargetSdkVersion(@com.android.annotations.NonNull java.io.File manifestFile) { try { java.lang.Object value = com.android.xml.AndroidManifest.getTargetSdkVersion(new com.android.io.FileWrapper(manifestFile)); if (value != null) { return ((java.lang.Integer) (value)); } else { return -1; } } catch (javax.xml.xpath.XPathExpressionException e) { } catch (com.android.io.StreamException e) { throw new java.lang.RuntimeException(e); } return -1; }<END_MOD>
public int write(java.nio.ByteBuffer src) throws java.io.IOException { ensureOpen(); if (!(writable)) throw new java.nio.channels.NonWritableChannelException(); synchronized(positionLock) { int n = 0; int ti = -1; java.lang.Object traceContext = sun.misc.IoTrace.fileWriteBegin(path); try { begin(); ti = threads.add(); if (!(isOpen())) return 0; <START_MOD>dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); <END_MOD>do { n = sun.nio.ch.IOUtil.write(fd, src, (-1), nd); } while ((n == (sun.nio.ch.IOStatus.INTERRUPTED)) && (isOpen()) ); return sun.nio.ch.IOStatus.normalize(n); } finally { threads.remove(ti); end((n > 0)); sun.misc.IoTrace.fileWriteEnd(traceContext, (n >   ? n : 0)); assert sun.nio.ch.IOStatus.check(n); } } }
<START_MOD>private void computeEditHighlightRegions() { editHightlightRegions.clear(); java.awt.Rectangle r = null; int f = editSegment.first; int s = editSegment.second; int min = java.lang.Math.min(f, s); int diff = java.lang.Math.abs((f - s)); switch (editRegion) { case LEFT_PATCH : editPatchRegion = displayCoordinates(new java.awt.Rectangle(0, min, 1, diff)); editHightlightRegions.addAll(getHorizontalHighlightRegions(0, min, image.getWidth(), diff)); break; case RIGHT_PADDING : editPatchRegion = displayCoordinates(new java.awt.Rectangle(((image.getWidth()) - 1), min, 1, diff)); editHightlightRegions.addAll(getHorizontalHighlightRegions(0, min, image.getWidth(), diff)); break; case TOP_PATCH : editPatchRegion = displayCoordinates(new java.awt.Rectangle(min, 0, diff, 1)); editHightlightRegions.addAll(getVerticalHighlightRegions(min, 0, diff, image.getHeight())); break; case BOTTOM_PADDING : editPatchRegion = displayCoordinates(new java.awt.Rectangle(min, ((image.getHeight()) - 1), diff, 1)); editHightlightRegions.addAll(getVerticalHighlightRegions(min, 0, diff, image.getHeight())); } }<END_MOD>
public void updatePreferenceIntents(android.support.v7.preference.PreferenceGroup prefs, final java.lang.String acccountType, android.accounts.Account account) { final android.content.pm.PackageManager pm = mFragment.getActivity().getPackageManager(); for (int i = 0; i < (prefs.getPreferenceCount());) { android.support.v7.preference.Preference pref = prefs.getPreference(i); if (pref instanceof android.support.v7.preference.PreferenceGroup) { updatePreferenceIntents(((android.support.v7.preference.PreferenceGroup) (pref)), acccountType, account); } android.content.Intent intent = pref.getIntent(); if (intent != null) { if (<START_MOD>android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS.equals(<END_MOD>intent.getAction())) { pref.setOnPreferenceClickListener(new com.android.settings.accounts.AccountTypePreferenceLoader.FragmentStarter(com.android.settings.location.LocationSettings.class.getName(), R.string.location_settings_title)); } else { android.content.pm.ResolveInfo ri = pm.resolveActivityAsUser(intent, PackageManager.MATCH_DEFAULT_ONLY, mUserHandle.getIdentifier()); if (ri == null) { prefs.removePreference(pref); continue; } intent.putExtra(com.android.settings.accounts.AccountTypePreferenceLoader.ACCOUNT_KEY, account); intent.setFlags(((intent.getFlags()) | (android.content.Intent.FLAG_ACTIVITY_NEW_TASK))); pref.setOnPreferenceClickListener(new android.support.v7.preference.Preference.OnPreferenceClickListener() { @java.lang.Override public boolean onPreferenceClick(android.support.v7.preference.Preference preference) { android.content.Intent prefIntent = preference.getIntent(); if (isSafeIntent(pm, prefIntent, acccountType)) { mFragment.getActivity().startActivityAsUser(prefIntent, mUserHandle); } else { android.util.Log.e(com.android.settings.accounts.AccountTypePreferenceLoader.TAG, (( to launch authenticator intent because +   exploits Settings permissions:   + prefIntent)); } return true; } }); } } i++; } }
private long startingTask(@javax.annotation.Nonnull com.android.jack.server.ServerInfo info) throws com.android.jack.server.JackHttpServer.ServerClosedException { long id; synchronized(lock) { if (shuttingDown) { throw new com.android.jack.server.JackHttpServer.ServerClosedException(); } id = info.totalLocal; (info.totalLocal)++; if ((info.currentLocal) == 0) { cancelTimer(); <START_MOD>exitIdleMode(); <END_MOD>} (info.currentLocal)++; if ((info.currentLocal) > (info.maxLocal)) { info.maxLocal = info.currentLocal; } } return id; }
synchronized int getConnectionState() { com.android.internal.util.IState currentState = getCurrentState(); if (currentState == (mConnecting)) { return android.bluetooth.BluetoothProfile.STATE_CONNECTING; } else if (currentState instanceof com.android.bluetooth.hfp.HeadsetStateMachine.ConnectedBase) { return android.bluetooth.BluetoothProfile.STATE_CONNECTED; } else if (currentState == (mDisconnecting)) { return android.bluetooth.BluetoothProfile.STATE_DISCONNECTING; } return android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; }
public static int doubleConditionEqualZero(double d) {<START_MOD> if (Main.doThrow) { throw new java.lang.Error(); }<END_MOD> return (d > 42.0) != false ? 13 : 54; }
private void handleConfiguredNetworksChanged() { java.util.List<android.net.wifi.WifiConfiguration> wifiConfigurations = mWifiManager.getConfiguredNetworks(); if (wifiConfigurations == null) { return; } mSavedNetworks.clear(); mSavedSsids.clear(); for (int i = 0; i < (wifiConfigurations.size()); i++) { android.net.wifi.WifiConfiguration wifiConfiguration = wifiConfigurations.get(i); if (((wifiConfiguration.status) != (WifiConfiguration.Status.ENABLED)) || (wifiConfiguration.useExternalScores)) { continue; } if (wifiConfiguration.hasNoInternetAccess()) { continue; } java.lang.String ssid = <START_MOD>com.android.networkrecommendation.WifiConfigurationUtil<END_MOD>.removeDoubleQuotes(wifiConfiguration); if (android.text.TextUtils.isEmpty(ssid)) { continue; } mSavedNetworks.put(ssid, wifiConfiguration); mSavedSsids.add(ssid); } mSavedSsidsInLastScan.retainAll(mSavedSsids); }
<START_MOD>@java.lang.Override public void onResult(android.service.euicc.EuiccProfileInfo[] profiles) { callback.onComplete(EuiccCardManager.RESULT_OK, profiles); }<END_MOD>
public void openCameraDevice(int cameraId) throws com.android.cts.verifier.camera.its.ItsException { com.android.cts.verifier.camera.its.Logt.i(com.android.cts.verifier.camera.its.ItsService.TAG, java.lang.String.format( camera %d cameraId)); java.lang.String[] devices; try { devices = mCameraManager.getCameraIdList(); if ((devices == null) || ((devices.length) == 0)) { throw new com.android.cts.verifier.camera.its.ItsException( camera devices<START_MOD> } if ((mMemoryQuota) == (-1)) { for (java.lang.String camId : devices) { android.hardware.camera2.CameraCharacteristics chars = mCameraManager.getCameraCharacteristics(camId); android.util.Size maxYuvSize = com.android.cts.verifier.camera.its.ItsUtils.getYuvOutputSizes(mCameraCharacteristics)[0]; int quota = (((maxYuvSize.getWidth()) * (maxYuvSize.getHeight())) * 4) * 3; if (quota > (mMemoryQuota)) { mMemoryQuota = quota; } }<END_MOD> } } catch (android.hardware.camera2.CameraAccessException e) { throw new com.android.cts.verifier.camera.its.ItsException( to get device ID list e); } try { mCamera = mBlockingCameraManager.openCamera(devices[cameraId], mCameraListener, mCameraHandler); mCameraCharacteristics = mCameraManager.getCameraCharacteristics(devices[cameraId]); <START_MOD>mSocketQueueQuota = new java<END_MOD>.util.concurrent.Semaphore(<START_MOD>mMemoryQuota<END_MOD>, true); } catch (android.hardware.camera2.CameraAccessException e) { throw new com.android.cts.verifier.camera.its.ItsException( to open camera e); } catch (com.android.ex.camera2.blocking.BlockingCameraManager.BlockingOpenException e) { throw new com.android.cts.verifier.camera.its.ItsException( to open camera (after blocking) e); } mSocketRunnableObj.sendResponse("cameraOpened", ""); }
<START_MOD>@java.lang.Override public int hashCode() { int result = mSourceFile.hashCode(); result = (31 * result) + (mBuildToolsRevision.hashCode()); return result; }<END_MOD>
<START_MOD>@java.lang.Override public void notifySimActivationStateChanged(com.android.internal.telephony.Phone sender, android.telephony.SimActivationState activationState) { try { mRegistry.notifySimActivationStateChangedForPhoneId(sender.getPhoneId(), sender.getSubId(), activationState); } catch (android.os.RemoteException ex) { } }<END_MOD>
protected void define(com.android.sdkmanager.CommandLineProcessor.Mode mode, boolean mandatory, java.lang.String verb, java.lang.String directObject, java.lang.String shortName, java.lang.String longName, java.lang.String description, java.lang.Object defaultValue) { assert !(mandatory && (mode == (com.android.sdkmanager.CommandLineProcessor.Mode.BOOLEAN))); <START_MOD>assert shortName != null; assert longName != null; assert ((shortName != null) && ((shortName.length()) > 0)) || ((longName != null) && ((longName.length()) > 0)); <END_MOD>if (directObject == null) { directObject = com.android.sdkmanager.CommandLineProcessor.NO_VERB_OBJECT; } java.lang.String key = (((verb + "/") + directObject) + "/") + longName; mArguments.put(key, new com.android.sdkmanager.CommandLineProcessor.Arg(mode, mandatory, verb, directObject, shortName, longName, description, defaultValue)); }
<START_MOD>private void verifyResultsAbsInt4(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { int[] arrayInValue = new int[(INPUTSIZE) * 4]; inValue.copyTo(arrayInValue); int[] arrayOut = new int[(INPUTSIZE) * 4]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 4; j++) { android.renderscript.cts.TestAbs.ArgumentsIntUint args = new android.renderscript.cts.TestAbs.ArgumentsIntUint(); args.inValue = arrayInValue[((i * 4) + j)]; android.renderscript.cts.CoreMathVerifier.computeAbs(args); int actualOut = arrayOut[((i * 4) + j)]; int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; float ulpf; ulpf = (java.lang.Math.ulp(args.out)) * ulf; assertEquals(((((((((((((((((("Incorrect output for checkAbsInt4" + (relaxed ? "_relaxed" : "")) + " @[") + i) + ", ") + j) + "] with ulf:") + ulf) + ".\n") + "Input inValue:") + (args.inValue)) + "\n") + "Expected output out:") + (args.out)) + "\n") + "Actual output out:") + actualOut) + "\n"), args.out, actualOut, ulpf); } } }<END_MOD>
private int getDexFlags(android.content.pm.ApplicationInfo info, java.lang.String compilerFilter, com.android.server.pm.dex.DexoptOptions options) { int flags = info.flags; boolean debuggable = (flags & (android.content.pm.ApplicationInfo.FLAG_DEBUGGABLE)) != 0; boolean isProfileGuidedFilter = dalvik.system.DexFile.isProfileGuidedCompilerFilter(compilerFilter); boolean isPublic = (!(info.isForwardLocked())) && (!isProfileGuidedFilter); int profileFlag = (isProfileGuidedFilter) ? com.android.server.pm.Installer.DEXOPT_PROFILE_GUIDED : 0; int dexFlags = ((((<START_MOD>(<END_MOD>isPublic ? com.android.server.pm.Installer.DEXOPT_PUBLIC : 0) | (debuggable ? com.android.server.pm.Installer.DEXOPT_DEBUGGABLE : 0)) | profileFlag) | (options.isBootComplete() ? com.android.server.pm.Installer.DEXOPT_BOOTCOMPLETE : 0)) | (options.isDexoptIdleBackgroundJob() ? com.android.server.pm.Installer.DEXOPT_IDLE_BACKGROUND_JOB : 0)<START_MOD>) | (info.isSystemApp() ? com.android.server.pm.Installer.DEXOPT_DISABLE_HIDDEN_API_CHECKS : 0)<END_MOD>; return adjustDexoptFlags(dexFlags); }
public void skip(int i) { if (shouldThunk()) { mN.skip(i); return; } int res = (mPos) + i; if ((res < 0) || (res > (mLen))) { throw new android.support.v8.renderscript.RSIllegalArgumentException(( of range argument:   + i)); } mPos = res; }
public void fsync(java.io.FileDescriptor fd) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
@java.lang.Override public void enter() { turnOnMasterTetherSettings(); simChange.startListening(); mUpstreamNetworkMonitor.start(); mOffloadController.start(); <START_MOD>if (upstreamWanted()) { <END_MOD>chooseUpstreamType(true); mTryCell = false; }<START_MOD> }<END_MOD>
public int write(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer) throws <START_MOD>android.os.ErrnoException, <END_MOD>java.io.InterruptedIOException;
<START_MOD>public int testAdd(int a) { com.android.jack.java8.lambda.test037.jack.I i = () -> a + (field); return i.addOutsideValue(); }<END_MOD>
<START_MOD>@org.junit.Test public void validatePolicyWithInvalidServerUri() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Policy policy = android.net.wifi.hotspot2.pps.PolicyTest.createPolicy(); byte[] rawUriBytes = new byte[(android.net.wifi.hotspot2.pps.PolicyTest.MAX_URI_BYTES) + 1]; policy.policyServerUri = new java.lang.String(rawUriBytes, java.nio.charset.StandardCharsets.UTF_8); assertFalse(policy.validate()); }<END_MOD>
@java.lang.Override public android.net.NetworkStatsHistory getHistoryIntervalForUid(android.net.NetworkTemplate template, int uid, int set, int tag, int fields, long start, long end) { if (tag == (android.net.NetworkStats.TAG_NONE)) { return getUidComplete().getHistory(template, null, uid, set, tag, <START_MOD>android.net.NetworkStats.DEFAULT_NETWORK_ALL, <END_MOD>fields, start, end, mAccessLevel, mCallingUid); } else if (uid == (android.os.Binder.getCallingUid())) { return getUidTagComplete().getHistory(template, null, uid, set, tag, <START_MOD>android.net.NetworkStats.DEFAULT_NETWORK_ALL, <END_MOD>fields, start, end, mAccessLevel, mCallingUid); } else { throw new java.lang.SecurityException((( package   + (mCallingPackage)) +   cannot access tag information from a different uid } }
private void exportGradleWrapper(@com.android.annotations.NonNull java.io.File destDir) throws java.io.IOException { if (((mGradleWrapperLocation) != null) && (mGradleWrapperLocation.exists())) { java.io.File gradlewDest = new java.io.File(destDir, <START_MOD>com.android.SdkConstants.FN_GRADLE_WRAPPER_UNIX<END_MOD>); copyDir(new java.io.File(mGradleWrapperLocation, <START_MOD>com.android.SdkConstants.FN_GRADLE_WRAPPER_UNIX<END_MOD>), gradlewDest, null); boolean madeExecutable = gradlewDest.setExecutable(true); if (!madeExecutable) { reportWarning(((com.android.tools.gradle.eclipse.ImportModule) (null)), gradlewDest,   not make gradle wrapper script executable } copyDir(new java.io.File(mGradleWrapperLocation, <START_MOD>com.android.SdkConstants.FN_GRADLE_WRAPPER_WIN), new java.io.File(destDir, com.android.SdkConstants.FN_GRADLE_WRAPPER_WIN<END_MOD>), null); copyDir(new java.io.File(mGradleWrapperLocation, <START_MOD>com.android.SdkConstants.FN_GRADLE_WRAPPER_UNIX), new java.io.File(destDir, com.android.SdkConstants.FN_GRADLE_WRAPPER_UNIX<END_MOD>), null); } }
public static int intConditionNotEqualOne(int i) {<START_MOD> if (Main.doThrow) { throw new java.lang.Error(); }<END_MOD> return (i > 42) == (Main.$inline$true()) ? 13 : 54; }
<START_MOD>private void sendIPv6TetherUpdates(android.net.NetworkState upstreamState) { verify(mIPv6TetheringCoordinator, times(1)).addActiveDownstream(argThat(( sm) -> sm.linkProperties().getInterfaceName().equals(com.android.server.connectivity.TetheringTest.TEST_USB_IFNAME)), eq(IControlsTethering.STATE_TETHERED)); for (com.android.server.connectivity.tethering.TetherInterfaceStateMachine tism : mTetheringDependencies.getIPv6CoordinatorNotifyList()) { android.net.NetworkState ipv6OnlyState = com.android.server.connectivity.TetheringTest.buildMobileUpstreamState(false, true); tism.sendMessage(TetherInterfaceStateMachine.CMD_IPV6_TETHER_UPDATE, 0, 0, (upstreamState.linkProperties.isIPv6Provisioned() ? ipv6OnlyState.linkProperties : null)); } mLooper.dispatchAll(); }<END_MOD>
public java.lang.String[] getIsimImpu(<START_MOD>int subId<END_MOD>) { com.android.internal.telephony.Phone phone = getPhone(<START_MOD>subId<END_MOD>); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE,   READ_PRIVILEGED_PHONE_STATE com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimImpu(); } else { return null; } }
void putBigEndian(byte[] a, boolean neg) { this.makeValid(); java.math.NativeBN.BN_bin2bn(a, a.length, neg, this.<START_MOD>nativePtr<END_MOD>); }
private static void handleHELO(com.android.ddmlib.Client client, java.nio.ByteBuffer data) { int version; int pid; int vmIdentLen; int appNameLen; java.lang.String vmIdent; java.lang.String appName; version = data.getInt(); pid = data.getInt(); vmIdentLen = data.getInt(); appNameLen = data.getInt(); vmIdent = getString(data, vmIdentLen); appName = getString(data, appNameLen); <START_MOD>int userId = -1; boolean validUserId = false; if (data.hasRemaining()) { try { userId = data.getInt(); validUserId = true; } catch (java.nio.BufferUnderflowException e) { } } <END_MOD>com.android.ddmlib.Log.d("ddm-hello", (((((((( v= + version) +   pid= + pid) +   vm= + vmIdent) +   app= + appName) + "'")); com.android.ddmlib.ClientData cd = client.getClientData(); synchronized(cd) { if ((cd.getPid()) == pid) { cd.setVmIdentifier(vmIdent); cd.setClientDescription(appName); cd.isDdmAware(true); <START_MOD>if (validUserId) { cd.setUserId(userId); } <END_MOD>} else { com.android.ddmlib.Log.e("ddm-hello", (((( pid ( + pid) +   does not match client pid ( + (cd.getPid())) + ")")); } } client = checkDebuggerPortForAppName(client, appName); if (client != null) { client.update(Client.CHANGE_NAME); } }
<START_MOD>android.content.ComponentName getServiceComponent() { return mDelegate.getServiceComponent(); }<END_MOD>
public void deleteSubscription(int subscriptionId, android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } <START_MOD>com.<END_MOD>android<START_MOD>.internal<END_MOD>.telephony.euicc.<START_MOD>IEuiccController controller = <END_MOD>getIEuiccController()<START_MOD>; if (controller == null) return; try { controller<END_MOD>.deleteSubscription(subscriptionId, mContext.getOpPackageName(), callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
<START_MOD>@java.lang.Override public void run() { org.eclipse.swt.widgets.FileDialog fd = new org.eclipse.swt.widgets.FileDialog(mImageCanvas.getShell(), org.eclipse.swt.SWT.SAVE); fd.setFilterExtensions(new java.lang.String[]{ "*.png" }); if ((com.android.ide.eclipse.gltrace.views.SaveImageAction.sLastUsedPath) != null) { fd.setFilterPath(com.android.ide.eclipse.gltrace.views.SaveImageAction.sLastUsedPath); } java.lang.String path = fd.open(); if (path == null) { return; } com.android.ide.eclipse.gltrace.views.SaveImageAction.sLastUsedPath = new java.io.File(path).getParent(); mImageCanvas.exportImageTo(path); }<END_MOD>
@java.lang.Override public boolean processMessage(android.os.Message message) { if (super.processMessage(message)) return true; maybeLogMessage(this, message.what); switch (message.what) { case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_REQUESTED : <START_MOD>mLog<END_MOD>.<START_MOD>error<END_MOD>( while in local<START_MOD>-only<END_MOD> hotspot mode. break; case com.android.server.connectivity.tethering.TetherInterfaceStateMachine.CMD_TETHER_CONNECTION_CHANGED : break; default : return false; } return true; }
<START_MOD>@java.lang.Override public void execute(com.android.build.gradle.model.AndroidBinary androidBinary) { com.android.build.gradle.model.DefaultAndroidBinary binary = ((com.android.build.gradle.model.DefaultAndroidBinary) (androidBinary)); if (!(binary.getBuildType().getName().equals(BuilderConstants.DEBUG))) { return; } com.android.build.gradle.internal.variant.BaseVariantData testedVariantData = binary.getVariantData(); assert testedVariantData != null : "Internal error: tested variant must be created before test variant."; com.android.build.gradle.internal.variant.TestVariantData testVariantData = variantManager.createTestVariantData(testedVariantData, com.android.build.gradle.model.ANDROID_TEST); variantManager.getVariantDataList().add(testVariantData); variantManager.createTasksForVariantData(new com.android.build.gradle.model.TaskCollectionBuilderAdaptor(tasks), testVariantData); }<END_MOD>
private void startApp(com.android.graphics.benchmark.ApkInfo apk) throws IntentFilter.MalformedMimeTypeException, java.io.IOException { android.os.Looper.prepare(); mHandler = new android.os.Handler(); registerReceiver(); mReport.begin(apk.getName()); android.util.Log.d(com.android.graphics.benchmark.device.GraphicsBenchmarkTest.TAG, (   + (apk.getPackageName()))); android.content.Intent intent = android.support.test.InstrumentationRegistry.getContext().getPackageManager().getLaunchIntentForPackage(apk.getPackageName()); for (com.android.graphics.benchmark.ApkInfo.Argument argument : mApk.getArgs()) { intent.putExtra(argument.getKey(), argument.getValue()); } android.support.test.InstrumentationRegistry.getContext().startActivity(intent); mHandler.postDelayed(() -> mHandler.getLooper().quit(), <START_MOD>mApk.getRunTime()<END_MOD>); android.os.Looper.loop(); mReport.end(); }
public static void assertEquals(java.lang.String message, java.lang.Object expected, java.lang.Object actual) { if (actual == null ? expected != null : !(<START_MOD>expected<END_MOD>.equals(<START_MOD>actual<END_MOD>))) { junit.framework.Assert.fail(message, (((   + expected) +   but was   + actual)); } }
public final void testGetLayoutParamsInfo() throws java.lang.Exception { com.android.ide.<START_MOD>common.platformData<END_MOD>.ViewClassInfo.LayoutParamsInfo info1 = _getLayoutParamsInfo(mock_android.view.ViewGroup.LayoutParams.class); assertNotNull(info1); assertNull(info1.getSuperClass()); com.android.ide.<START_MOD>common.platformData<END_MOD>.ViewClassInfo.LayoutParamsInfo info2 = _getLayoutParamsInfo(mock_android.widget.LinearLayout.LayoutParams.class); assertNotNull(info2); assertSame(info1, info2.getSuperClass()); com.android.ide.<START_MOD>common.platformData<END_MOD>.ViewClassInfo.LayoutParamsInfo info3 = _getLayoutParamsInfo(mock_android.widget.TableLayout.LayoutParams.class); assertNotNull(info3); assertNotSame(info1, info3.getSuperClass()); assertNotSame(info2, info3.getSuperClass()); assertSame(info1, info3.getSuperClass().getSuperClass()); }
public void testRunNormalInput() { <START_MOD>mVtsPythonRunnerHelper<END_MOD> = <START_MOD>createMockVtsPythonRunnerHelper<END_MOD>(CommandStatus.SUCCESS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); mTest.<START_MOD>setVtsPythonRunnerHelper<END_MOD>(<START_MOD>mVtsPythonRunnerHelper<END_MOD>); try { mTest.run(mMockInvocationListener); } catch (java.lang.IllegalArgumentException e) { fail(); e.printStackTrace(); } catch (com.android.tradefed.device.DeviceNotAvailableException e) { fail(); e.printStackTrace(); } }
public android.net.wifi.WifiConfiguration getMatchingWifiConfig(android.net.wifi.ScanResult scanResult) { if (scanResult == null) {<START_MOD> android.util.Log.e(com.android.server.wifi.hotspot2.PasspointManager.TAG,   to get matching config for a null ScanResult<END_MOD> return null; } Pair<com.android.server.wifi.hotspot2.PasspointProvider, com.android.server.wifi.hotspot2.PasspointMatch> matchedProvider = matchProvider(scanResult); if (matchedProvider == null) { <START_MOD>android.util.Log.d(com.android.server.wifi.hotspot2.PasspointManager.TAG, ( provider found for   + (scanResult.SSID))); <END_MOD>return null; } android.net.wifi.WifiConfiguration config = matchedProvider.first.getWifiConfig(); config.SSID = com.android.server.wifi.util.ScanResultUtil.createQuotedSSID(scanResult.SSID); return config; }
<START_MOD>public void testModf() { checkModfFloatFloat(); checkModfFloat2Float2(); checkModfFloat3Float3(); checkModfFloat4Float4(); }<END_MOD>
@java.lang.Override public void run() { char[] charBuffer = new char[com.android.tradefed.util.ProcessHelper.ReaderThread.BUF_SIZE]; try { while (true) { int readCount = mReader.read(charBuffer, 0, charBuffer.length); if (readCount < 0) { break; } <START_MOD>java.lang.String newRead = new java.lang.String(charBuffer, 0, readCount); int newLineLen = 0; if (newRead.endsWith("\r\n")) { newLineLen = 2; } else if (newRead.endsWith("\n")) { newLineLen = 1; } if ((mOutputType) == (com.android.tradefed.util.ProcessHelper.ReaderThread.TYPE_STDOUT)) { com.android.tradefed.log.LogUtil.CLog.i(newRead.substring(0, ((newRead.length()) - newLineLen))); } else if ((mOutputType) == (com.android.tradefed.util.ProcessHelper.ReaderThread.TYPE_STDERR)) { com.android.tradefed.log.LogUtil.CLog.e(newRead.substring(0, ((newRead.length()) - newLineLen))); } <END_MOD>mBuffer.append(<START_MOD>newRead<END_MOD>); } } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e( %s getName(), e.toString()); } }
public java.lang.Runnable registerNativeAllocation(java.lang.Object referent, long nativePtr) { if (referent == null) { throw new java.lang.IllegalArgumentException( is null } if (nativePtr == 0) { throw new java.lang.IllegalArgumentException( is null } try { libcore.util.NativeAllocationRegistry.registerNativeAllocation(this.size); } catch (java.lang.OutOfMemoryError oome) { libcore.util.NativeAllocationRegistry.applyFreeFunction(freeFunction, nativePtr); throw oome; } <START_MOD>libcore.util.NativeAllocationRegistry.CleanerThunk thunk = new libcore.util.NativeAllocationRegistry.CleanerThunk(); <END_MOD>sun.misc.Cleaner cleaner = sun.misc.Cleaner.create(referent, <START_MOD>thunk); libcore.util.NativeAllocationRegistry.CleanerRunner result = new libcore.util.NativeAllocationRegistry.CleanerRunner(cleaner); thunk.setNativePtr(nativePtr<END_MOD>); return <START_MOD>result; }<END_MOD>
<START_MOD>@java.lang.Override public void onRemoteRttUpgradeRequest(android.telecom.Connection c) { java.lang.String id = mIdByConnection.get(c); if (id != null) { mAdapter.onRemoteRttUpgradeRequest(id); } }<END_MOD>
<START_MOD>private int readUnsignedByte() throws java.io.IOException { return (mInput.readByte()) & 255; }<END_MOD>
public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(<START_MOD>mTdScdmaRscp); out.writeInt(<END_MOD>mLteRsrpBoost); out.writeInt((<START_MOD>mIsGsm<END_MOD> ? 1 : 0)); out.writeInt((mUseOnlyRsrpForLteLevel ? 1 : 0)); }
public long getFreeSpace() { try { <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.StructStatVfs sb = Libcore.os.statvfs(path); return (sb.f_bfree) * (sb.f_bsize); } catch (<START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException errnoException) { return 0; } }
<START_MOD>void regularScanTimeout() { for (com.android.bluetooth.gatt.ScanClient client : mRegularScanClients) { if ((client.settings.getScanMode()) != (android.bluetooth.le.ScanSettings.SCAN_MODE_OPPORTUNISTIC)) { logd(("apanicke: clientif set to opp: " + (client.clientIf))); setOpportunisticScanClient(client); client.stats.setScanTimeout(); } } logd("apanicke: stop scan"); gattClientScanNative(false); }<END_MOD>
<START_MOD>@org.junit.BeforeClass public static void prepareAgent() throws java.lang.Exception { android.jvmti.attaching.cts.AttachingTest.sAgentFile = android.jvmti.attaching.cts.AttachingTest.copyAgentToFile("jvmtiattachingtestagent"); }<END_MOD>
@org.junit.Test public void testAdapterOnAutoConnect() { <START_MOD>when(mAdapterService<END_MOD>.getState()).thenReturn(BluetoothAdapter.STATE_ON); when(<START_MOD>mAdapterService<END_MOD>.isQuietModeEnabled()).thenReturn(false); android.bluetooth.BluetoothDevice[] bondedDevices = new android.bluetooth.BluetoothDevice[1]; bondedDevices[0] = <START_MOD>mTestDevice; when(mAdapterService<END_MOD>.getBondedDevices()).thenReturn(bondedDevices); when(<START_MOD>mHeadsetService<END_MOD>.getPriority(<START_MOD>mTestDevice<END_MOD>)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(<START_MOD>mA2dpService<END_MOD>.getPriority(<START_MOD>mTestDevice<END_MOD>)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(<START_MOD>mAdapterService, mServiceFactory<END_MOD>); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_STATE_CHANGED); intent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_ON); injector.onReceive(null, intent); <START_MOD>executeDelayedMessages(1); <END_MOD>verify(<START_MOD>mHeadsetService, <END_MOD>times(1)).connect(eq(<START_MOD>mTestDevice<END_MOD>)); verify(<START_MOD>mA2dpService, <END_MOD>times(1)).connect(eq(<START_MOD>mTestDevice<END_MOD>)); }
public boolean p2pFind()<START_MOD> { if ((com.android.server.wifi.WifiNative.HIDL_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.find(); } else<END_MOD> { return doBooleanCommand("P2P_FIND"); }<START_MOD> }<END_MOD>
<START_MOD>private void checkRemainderFloat2Float2() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testRemainderFloat2Float2(inX, out); verifyResultsRemainderFloat2Float2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRemainderFloat2Float2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testRemainderFloat2Float2(inX, out); verifyResultsRemainderFloat2Float2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testRemainderFloat2Float2: " + (e.toString()))); } }<END_MOD>
@java.lang.SuppressWarnings("SuspiciousNameCombination") @com.android.annotations.NonNull public com.android.ide.common.rendering.api.HardwareConfig getConfig() { com.android.sdklib.devices.Screen screen = mDevice.getDefaultHardware().getScreen(); int x = screen.getXDimension(); int y = screen.getYDimension(); int width; int height; if (x > y) { if ((mScreenOrientation) == (com.android.resources.ScreenOrientation.LANDSCAPE)) { width = x; height = y; } else { width = y; height = x; } } else { if ((mScreenOrientation) == (com.android.resources.ScreenOrientation.LANDSCAPE)) { width = y; height = x; } else { width = x; height = y; } } if ((mOverrideRenderHeight) != (-1)) { width = mOverrideRenderWidth; } if ((mOverrideRenderHeight) != (-1)) { height = mOverrideRenderHeight; } if ((mMaxRenderWidth) != (-1)) { width = mMaxRenderWidth; } if ((mMaxRenderHeight) != (-1)) { height = mMaxRenderHeight; } <START_MOD>com.android.resources.ScreenRound roundness = mDevice.getDefaultHardware().getScreen().getScreenRound(); <END_MOD>return new com.android.ide.common.rendering.api.HardwareConfig(width, height, screen.getPixelDensity(), ((float) (screen.getXdpi())), ((float) (screen.getYdpi())), screen.getSize(), mScreenOrientation, <START_MOD>roundness, <END_MOD>((mDevice.getDefaultHardware().getButtonType()) == (com.android.sdklib.devices.ButtonType.SOFT))); }
void <START_MOD>initConnected<END_MOD>(java.net.InetSocketAddress <START_MOD>address, int status, boolean updateSocketState) { this.status<END_MOD> = <START_MOD>status; connectAddress = address; if <END_MOD>(<START_MOD>((status == <END_MOD>(java.<START_MOD>nio<END_MOD>.<START_MOD>SocketChannelImpl.SOCKET_STATUS_CONNECTED)<END_MOD>) <START_MOD>&& updateSocketState<END_MOD>) <START_MOD>&&<END_MOD> ((socket) != null)<START_MOD>)<END_MOD> { socket.<START_MOD>initConnected(connectAddress.getAddress<END_MOD>()<START_MOD>, connectAddress<END_MOD>.<START_MOD>getPort<END_MOD>(<START_MOD>)<END_MOD>); } }
public void <START_MOD>testKeyPairGenerator_GenerateKeyPair_EC_Unencrypted_Success<END_MOD>() throws java.lang.Exception { mGenerator.initialize(new android.security.KeyPairGeneratorSpec.Builder(getContext()).setAlias(android.security.AndroidKeyPairGeneratorTest.TEST_ALIAS_1<START_MOD>).setKeyType("EC"<END_MOD>).setSubject(android.security.AndroidKeyPairGeneratorTest.TEST_DN_1).setSerialNumber(android.security.AndroidKeyPairGeneratorTest.TEST_SERIAL_1).setStartDate(android.security.AndroidKeyPairGeneratorTest.NOW).setEndDate(android.security.AndroidKeyPairGeneratorTest.NOW_PLUS_10_YEARS).build()); final java.security.KeyPair pair = mGenerator.generateKeyPair(); assertNotNull( KeyPair returned should not be null pair); assertKeyPairCorrect(pair, android.security.AndroidKeyPairGeneratorTest.TEST_ALIAS_1, <START_MOD>"EC", <END_MOD>android.security.AndroidKeyPairGeneratorTest.TEST_DN_1, android.security.AndroidKeyPairGeneratorTest.TEST_SERIAL_1, android.security.AndroidKeyPairGeneratorTest.NOW, android.security.AndroidKeyPairGeneratorTest.NOW_PLUS_10_YEARS); }
<START_MOD>private void recordCssUrl(@com.android.annotations.Nullable com.android.build.gradle.tasks.ResourceUsageAnalyzer.Resource from, @com.android.annotations.NonNull java.lang.String value) { if (!(referencedUrl(from, value))) { referencedString(value); } }<END_MOD>
private void <START_MOD>createButton<END_MOD>(org.eclipse.swt.widgets.Composite parent) {<START_MOD> int style = org.eclipse.swt.SWT.FLAT; if (mIsToggle) { style |= org.eclipse.swt.SWT.TOGGLE; }<END_MOD> final org.eclipse.swt.widgets.Button b = new org.eclipse.swt.widgets.Button(parent, <START_MOD>style<END_MOD>); if ((mUiTooltip) != null) { b.setToolTipText(mUiTooltip); } if ((mImage) != null) { b.setImage(mImage); } if ((mUiLabel) != null) { b.setText(mUiLabel); } b.addSelectionListener(new org.eclipse.swt.events.SelectionAdapter() { @java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { onSelected(b.getSelection()); } }); }
<START_MOD>@com.android.annotations.NonNull public static com.android.sdklib.internal.repository.packages.FullRevision parseRevision(@com.android.annotations.NonNull java.lang.String revision) throws java.lang.NumberFormatException { if (revision == null) { throw new java.lang.NumberFormatException("revision is <null>"); } java.lang.Throwable cause = null; try { java.util.regex.Matcher m = com.android.sdklib.internal.repository.packages.FullRevision.FULL_REVISION_PATTERN.matcher(revision); if ((m != null) && (m.matches())) { int major = java.lang.Integer.parseInt(m.group(1)); java.lang.String s = m.group(2); int minor = (s == null) ? com.android.sdklib.internal.repository.packages.FullRevision.IMPLICIT_MINOR_REV : java.lang.Integer.parseInt(s); s = m.group(3); int micro = (s == null) ? com.android.sdklib.internal.repository.packages.FullRevision.IMPLICIT_MICRO_REV : java.lang.Integer.parseInt(s); s = m.group(4); int preview = (s == null) ? com.android.sdklib.internal.repository.packages.FullRevision.NOT_A_PREVIEW : java.lang.Integer.parseInt(s); return new com.android.sdklib.internal.repository.packages.FullRevision(major, minor, micro, preview); } } catch (java.lang.Throwable t) { cause = t; } java.lang.NumberFormatException n = new java.lang.NumberFormatException(("Invalid full revision: " + revision)); if (cause != null) { n.initCause(cause); } throw n; }<END_MOD>
@java.lang.Override public final int getSize() { return (mLength) * (mType.getSize(<START_MOD>mHeap.mSnapshot<END_MOD>)); }
public void test_applyPattern() { java.text.DecimalFormat format = new java.text.DecimalFormat("#.#"); assertEquals( pattern 1 <START_MOD>"0.#"<END_MOD>, format.toPattern()); format = new java.text.DecimalFormat("#."); assertEquals( pattern 2 <START_MOD>"0."<END_MOD>, format.toPattern()); format = new java.text.DecimalFormat("#"); assertEquals( pattern 3 <START_MOD>"0"<END_MOD>, format.toPattern()); format = new java.text.DecimalFormat(".#"); assertEquals( pattern 4 "#.0", format.toPattern()); format = new java.text.DecimalFormat(); format.setMinimumIntegerDigits(0); format.setMinimumFractionDigits(0); format.setMaximumFractionDigits(0); format.applyPattern("00.0#"); assertEquals( integer digits not set 2, format.getMinimumIntegerDigits()); assertEquals( fraction digits not set 1, format.getMinimumFractionDigits()); assertEquals( fraction digits not set 2, format.getMaximumFractionDigits()); try { format.applyPattern(null); <START_MOD>} catch (java.lang.NullPointerException unexpected) { <END_MOD>fail(); } <START_MOD>try { format.applyPattern("%#,##,###,####'"); fail(); } <END_MOD>catch (java.lang.<START_MOD>IllegalArgumentException<END_MOD> expected) { } try { format.applyPattern(<START_MOD>"#.##0.00"<END_MOD>); fail(); } catch (java.lang.IllegalArgumentException expected) { } <START_MOD>}<END_MOD>
<START_MOD>public void add(java.lang.Object pathOrGroup) { mCurrentGroup.add(pathOrGroup); }<END_MOD>
<START_MOD>public void test_Builder_setLanguageTag_singleSubtag() { java.util.Locale.Builder b = new java.util.Locale.Builder(); b.setLanguageTag("en"); java.util.Locale l = b.build(); assertEquals("en", l.getLanguage()); b = new java.util.Locale.Builder(); b.setLanguageTag("eng"); l = b.build(); assertEquals("eng", l.getLanguage()); b = new java.util.Locale.Builder(); try { b.setLanguageTag("a"); fail(); } catch (java.util.IllformedLocaleException ifle) { } }<END_MOD>
<START_MOD>@java.lang.Override public final boolean equals(java.lang.Object obj) { return (obj instanceof com.android.jack.library.OutputLibraryLocation) && (((com.android.jack.library.OutputLibraryLocation) (obj)).outputLibrary.equals(outputLibrary)); }<END_MOD>
<START_MOD>public com.android.bluetooth.pbapclient.PbapClientConnectionHandler.Builder setContext(android.content.Context cntxt) { this.context = cntxt; return this; }<END_MOD>
private static void doFollowReferencesTestImpl(Main.A root<START_MOD>, java.lang.Class<?> klass<END_MOD>, int stopAfter, int followSet, java.lang.Object asRoot, Main.Verifier v, java.lang.String additionalEnabled) { java.lang.String[] lines = Main.followReferences(0, <START_MOD>klass<END_MOD>, root, stopAfter, followSet, asRoot); <START_MOD>if (klass == null) { <END_MOD>v.process(lines, additionalEnabled); }<START_MOD> else { java.util.Arrays.sort(lines); for (java.lang.String l : lines) { java.lang.System.out.println(l); } } }<END_MOD>
@javax.annotation.Nonnull private com.android.sched.util.config.cli.TokenIterator.Entry getNext() throws com.android.sched.util.file.CannotReadException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotFileException, com.android.sched.util.file.WrongPermissionException, java.util.NoSuchElementException { while (true) { java.io.StreamTokenizer tokenizer = <START_MOD>sources<END_MOD>.peek()<START_MOD>.tokenizer<END_MOD>; while (tokenizer != null) { try { if ((tokenizer.nextToken()) != (java.io.StreamTokenizer.TT_EOF)) { if (((allowFileRefInFile) && (!(tokenizer.sval.isEmpty()))) && ((tokenizer.sval.charAt(0)) == (filePrefix))) { pushFileTokenizer(tokenizer.sval.substring(1)); tokenizer = <START_MOD>sources<END_MOD>.peek()<START_MOD>.tokenizer<END_MOD>; continue; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(tokenizer.sval, new com.android.sched.util.location.LineLocation(<START_MOD>sources<END_MOD>.peek()<START_MOD>.location<END_MOD>, tokenizer.lineno())); } } } catch (java.io.IOException e) { <START_MOD>try { throw new com.android.sched.util.file.CannotReadException(sources.peek().location); } finally { sources<END_MOD>.clear(); <START_MOD>sources<END_MOD>.push(null); index = args.length; <START_MOD>} } com.android.sched.util.file.InputStreamFile file = sources<END_MOD>.peek()<START_MOD>.file; assert file != null; try { file.getInputStream().close(); } catch (java.io.IOException e) { com.android.sched.util.config.cli.TokenIterator.logger.log(java.util.logging.Level.FINE, ( close   + (file.getLocation()))); } sources<END_MOD>.pop(); tokenizer = <START_MOD>sources<END_MOD>.peek()<START_MOD>.tokenizer<END_MOD>; } if ((index) >= (args.length)) { throw new java.util.NoSuchElementException(); } if (((allowFileRefInArray) && (!(args[index].isEmpty()))) && ((args[index].charAt(0)) == (filePrefix))) { pushFileTokenizer(args[index].substring(1)); (index)++; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(args[((index)++)], <START_MOD>sources<END_MOD>.peek()<START_MOD>.location); } } }<END_MOD>
static void setFloat(java.lang.invoke.MethodHandle m, Main.ValueHolder v, float value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.<START_MOD>assertEqual<END_MOD>(exceptionThrown, expectFailure); }
public java.lang.String getHexString() { java.lang.String out = "0x"; byte[] ssidbytes = getOctets(); for (int i = 0; i < (octets.size()); i++) { out += java.lang.String.format(java.util.Locale.US, "%02x", ssidbytes[i]); } return <START_MOD>i ? <END_MOD>out<START_MOD> : android.net.wifi.WifiSsid.NONE<END_MOD>; }
<START_MOD>private void checkClzUint2() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inValue, 35, 0, 500); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testClzUint2(inValue, out); verifyResultsClzUint2(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testClzUint2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testClzUint2(inValue, out); verifyResultsClzUint2(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testClzUint2: " + (e.toString()))); } }<END_MOD>
static void inlinedForNull(java.lang.Iterable<?> it) { if (it != null) { <START_MOD>if (Main<END_MOD>.<START_MOD>doThrow) throw new java.lang.Error<END_MOD>(<START_MOD>""<END_MOD>); } }
public static boolean isDeveloperOptionsEnabled(<START_MOD>final <END_MOD>android.app.Instrumentation instrumentation) throws android.support.test.uiautomator.UiObjectNotFoundException {<START_MOD> com.android.devtools.systemimage.uitest.utils.SettingsUtil.findItem(instrumentation,   options<END_MOD> return com.android.devtools.systemimage.uitest.utils.SettingsUtil.scrollToItem(instrumentation,   options }
@android.test.suitebuilder.annotation.MediumTest public void testUserBluetoothSwitchOff() { com.android.server.telecom.CallAudioRouteStateMachine stateMachine = new com.android.server.telecom.CallAudioRouteStateMachine(mContext, mockCallsManager, <START_MOD>mockBluetoothRouteManager<END_MOD>, mockWiredHeadsetManager, mockStatusBarNotifier, mAudioServiceFactory, true); when(<START_MOD>mockBluetoothRouteManager<END_MOD>.isBluetoothAudioConnectedOrPending()).thenReturn(false); when(<START_MOD>mockBluetoothRouteManager<END_MOD>.isBluetoothAvailable()).thenReturn(true); when(mockAudioManager.isSpeakerphoneOn()).thenReturn(true); android.telecom.CallAudioState initState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, ((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); stateMachine.initialize(initState); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.SWITCH_FOCUS, CallAudioRouteStateMachine.ACTIVE_FOCUS); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.USER_SWITCH_BASELINE_ROUTE); android.telecom.CallAudioState expectedEndState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_EARPIECE, ((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); waitForStateMachineActionCompletion(stateMachine, CallAudioRouteStateMachine.RUN_RUNNABLE); verifyNewSystemCallAudioState(initState, expectedEndState); resetMocks(); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH); stateMachine.sendMessageWithSessionInfo(CallAudioRouteStateMachine.CONNECT_BLUETOOTH); waitForStateMachineActionCompletion(stateMachine, CallAudioRouteStateMachine.RUN_RUNNABLE); assertEquals(expectedEndState, stateMachine.getCurrentCallAudioState()); }
<START_MOD>public void testParseDoubleWithDefault() throws java.lang.Exception { java.util.Locale.setDefault(java.util.Locale.US); assertEquals(1000.0, com.android.utils.SdkUtils.parseLocalizedDouble("1000", 0)); assertEquals(2.0, com.android.utils.SdkUtils.parseLocalizedDouble("2x", 3)); assertEquals(4.0, com.android.utils.SdkUtils.parseLocalizedDouble("", 4)); assertEquals(5.0, com.android.utils.SdkUtils.parseLocalizedDouble("test", 5)); java.util.Locale.setDefault(java.util.Locale.FRANCE); assertEquals(1000.0, com.android.utils.SdkUtils.parseLocalizedDouble("1000", (-1))); assertEquals(8.0, com.android.utils.SdkUtils.parseLocalizedDouble("", 8)); }<END_MOD>
<START_MOD>public com.android.internal.telephony.IccCardApplicationStatus.PersoSubState getPersoSubState() { return mPersoSubState; }<END_MOD>
public static final android.os.Process.ProcessStartResult start(final java.lang.String processClass, final java.lang.String niceName, int uid, int gid, int[] gids, int <START_MOD>artFlags<END_MOD>, int mountExternal, int targetSdkVersion, java.lang.String seInfo, java.lang.String abi, java.lang.String instructionSet, java.lang.String appDataDir, java.lang.String invokeWith, java.lang.String[] zygoteArgs) { return android.os.Process.zygoteProcess.start(processClass, niceName, uid, gid, gids, <START_MOD>artFlags<END_MOD>, mountExternal, targetSdkVersion, seInfo, abi, instructionSet, appDataDir, invokeWith, zygoteArgs); }
@java.lang.Override public final java.lang.String toString() {<START_MOD> java.lang.String str;<END_MOD> com.android.jack.util.DefaultTextOutput out = new com.android.jack.util.DefaultTextOutput(true); com.android.jack.ir.impl.ToStringGenerationVisitor v = new com.android.jack.ir.impl.ToStringGenerationVisitor(out); v.accept(this); <START_MOD>str =<END_MOD> out.toString(); <START_MOD>com.android.jack.ir.sourceinfo.SourceInfo sourceInfo = getSourceInfo(); if (sourceInfo != (com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN)) { str += ( ( + (getSourceInfo().toString())) + ")"; <END_MOD>}<START_MOD> return str; }<END_MOD>
private static void <START_MOD>assertMeid<END_MOD>(java.lang.String <START_MOD>meid<END_MOD>) { if ((<START_MOD>meid<END_MOD>.length()) == 14) { android.telephony.cts.TelephonyManagerTest.assertMeidFormat(<START_MOD>meid<END_MOD>); } else if ((<START_MOD>meid<END_MOD>.length()) == 8) { android.telephony.cts.TelephonyManagerTest.assertHexadecimalEsnFormat(<START_MOD>meid<END_MOD>); } else { fail( id on CDMA must be 14-digit hex MEID or 8-digit hex ESN. } }
<START_MOD>public android.net.wifi.IClientInterface setupDriverForClientMode(android.net.wifi.IWificond wificond) { return mWificondControl.setupDriverForClientMode(wificond); }<END_MOD>
public boolean updateAdnRecordsInEfByIndex(int efid, java.lang.String newTag, java.lang.String newPhoneNumber, int index, java.lang.String pin2) { if ((phone.getContext().checkCallingOrSelfPermission(android.Manifest.permission.WRITE_CONTACTS)) != (android.content.pm.PackageManager.PERMISSION_GRANTED)) { throw new java.lang.SecurityException( android.permission.WRITE_CONTACTS permission } if (com.android.internal.telephony.IccPhoneBookInterfaceManager.DBG) logd(((((((((((( efid= + efid) +   Index= + index) +   ==>   + "(") + newTag) + ",") + newPhoneNumber) + ")") +   pin2= + pin2)); synchronized(mLock) { checkThread(); success = false; <START_MOD>java.util.concurrent.atomic.AtomicBoolean status = new java.util.concurrent.atomic.AtomicBoolean(false); <END_MOD>android.os.Message response = mBaseHandler.obtainMessage(com.android.internal.telephony.IccPhoneBookInterfaceManager.EVENT_UPDATE_DONE<START_MOD>, status<END_MOD>); com.android.internal.telephony.AdnRecord newAdn = new com.android.internal.telephony.AdnRecord(newTag, newPhoneNumber); adnCache.updateAdnByIndex(efid, newAdn, index, pin2, response); <START_MOD>while (!(status.get())) { <END_MOD>try { mLock.wait(); } catch (java.lang.InterruptedException e) { logd( while trying to update by index } } <START_MOD>} <END_MOD>return success; }
protected boolean getLockedRecordsLoaded() { return ((mRecordsToLoad) == 0) && (<START_MOD>(mLockedRecordsReqReason) == (com.android.internal.telephony.uicc.IccRecords.LOCKED_RECORDS_REQ_REASON_PIN_LOCKED)<END_MOD>); }
@java.lang.Override public void fchmod(java.io.FileDescriptor fd, int mode) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.fchmod(fd, mode); }
<START_MOD>boolean waitForCallback(int callback) { java.util.Iterator<java.lang.Integer> it = mCallbackQueue.iterator(); while (it.hasNext()) { if ((it.next()) == callback) { it.remove(); return true; } } mCurrentWaitForCallback = callback; mBlocker = new java.util.concurrent.CountDownLatch(1); try { return mBlocker.await(android.net.wifi.aware.cts.SingleDeviceTest.WAIT_FOR_AWARE_CHANGE, java.util.concurrent.TimeUnit.SECONDS); } catch (java.lang.InterruptedException e) { return false; } }<END_MOD>
<START_MOD>public void cleanUp() { if (isRunning()) { com.android.tradefed.log.LogUtil.CLog.e("Kill the running process."); mProcess.destroy(); } try { mStdinWriter.close(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } try { mStdoutReader.close(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } try { mStderrReader.close(); } catch (java.io.IOException e) { com.android.tradefed.log.LogUtil.CLog.e(e); } com.android.tradefed.util.ProcessUtil.joinThread(mStdoutThread, com.android.tradefed.util.ProcessUtil.THREAD_JOIN_TIMEOUT_MSECS); com.android.tradefed.util.ProcessUtil.joinThread(mStderrThread, com.android.tradefed.util.ProcessUtil.THREAD_JOIN_TIMEOUT_MSECS); }<END_MOD>
<START_MOD>public static void validate(@javax.annotation.Nonnull com.android.jack.ir.ast.cfg.JBasicBlockElement element) { new com.android.jack.ir.ast.cfg.CFGExpressionValidator().accept(element); }<END_MOD>
<START_MOD>void onDeviceSelection() { com.android.sdklib.devices.Device currentDevice = getSelectedDevice(); if (currentDevice != null) { fillDeviceProperties(currentDevice); } toggleCameras(); validatePage(); }<END_MOD>
<START_MOD>private boolean parseAidlOutput(java.util.ArrayList<java.lang.String> lines, org.eclipse.core.resources.IFile file) { if ((lines.size()) == 0) { return false; } java.util.regex.Matcher m; for (int i = 0; i < (lines.size()); i++) { java.lang.String p = lines.get(i); m = com.android.ide.eclipse.adt.internal.build.nonjava.AidlGenerator.sAidlPattern1.matcher(p); if (m.matches()) { java.lang.String lineStr = m.group(2); java.lang.String msg = m.group(3); int line = 0; try { line = java.lang.Integer.parseInt(lineStr); } catch (java.lang.NumberFormatException e) { return true; } com.android.ide.eclipse.adt.internal.project.BaseProjectHelper.markResource(file, AndroidConstants.MARKER_AIDL, msg, line, IMarker.SEVERITY_ERROR); continue; } return true; } return false; }<END_MOD>
@org.junit.Test<START_MOD> @java.lang.Runtime<END_MOD> public void retroLambdaDefaultMethodsTest024() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_024); }
<START_MOD>public boolean isManageConferenceCallSupported() { return mIsManageConferenceCallSupported; }<END_MOD>
public int fcntlVoid(java.io.FileDescriptor fd, int cmd) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException { return os.fcntlVoid(fd, cmd); }
private static void doTestPrimitiveFieldsIntegral() { <START_MOD>art.Test906<END_MOD>.IntObject intObject = new <START_MOD>art.Test906<END_MOD>.IntObject(); <START_MOD>art.<END_MOD>Main.setTag(intObject, 10000); java.lang.System.out.println(<START_MOD>art.Test906<END_MOD>.iterateThroughHeapPrimitiveFields(10000)); java.lang.System.out.println(<START_MOD>art.<END_MOD>Main.getTag(intObject)); }
public int dexopt(java.lang.String apkPath, int uid, boolean isPublic, java.lang.String pkgName, java.lang.String instructionSet<START_MOD>, int dexoptStatus<END_MOD>, boolean vmSafeMode, boolean debuggable) { if (!(com.android.server.pm.Installer.isValidInstructionSet(instructionSet))) { android.util.Slog.e(com.android.server.pm.Installer.TAG, ( instruction set:   + instructionSet)); return -1; } return mInstaller.dexopt(apkPath, uid, isPublic, pkgName, instructionSet, <START_MOD>dexoptStatus, <END_MOD>vmSafeMode, debuggable); }
<START_MOD>public void testMultiply_near64BitOverflow_negative() { assertEquals("-9223372036854775808", libcore.java.math.BigDecimalTest.multiply(java.lang.Long.MIN_VALUE, 1).toString()); assertEquals("-9223372036854775808", libcore.java.math.BigDecimalTest.multiply(((java.lang.Long.MIN_VALUE) / 2), 2).toString()); assertEquals("-9223372036854775808", libcore.java.math.BigDecimalTest.multiply((-(1L << 31)), (1L << 32)).toString()); assertEquals("-9223372036854775807", libcore.java.math.BigDecimalTest.multiply((-42128471623L), 218934409L).toString()); assertEquals("-9223372036854775810", libcore.java.math.BigDecimalTest.multiply(((-((java.lang.Long.MIN_VALUE) / 2)) + 1), (-2)).toString()); }<END_MOD>
public boolean configureRoaming(com.android.server.wifi.WifiNative.RoamingConfig config) { synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return boolResult(false); try { android.hardware.wifi.V1_0.StaRoamingConfig roamingConfig = new android.hardware.wifi.V1_0.StaRoamingConfig(); if ((config.blacklistBssids) != null) { for (java.lang.String bssid : config.blacklistBssids) { byte[] mac = com.android.server.wifi.util.NativeUtil.macAddressToByteArray(bssid); roamingConfig.bssidBlacklist.add(mac); } } if ((config.whitelistSsids) != null) { for (java.lang.String ssidStr : config.whitelistSsids) { java.lang.String unquotedSsidStr = android.net.wifi.WifiInfo.removeDoubleQuotes(ssidStr); int len = unquotedSsidStr.length(); if (len > 32) { mLog.err( skip invalid SSID % continue; } byte[] ssid = new byte[len]; for (int i = 0; i < len; i++) { ssid[i] = ((byte) (unquotedSsidStr.charAt(i))); } roamingConfig.ssidWhitelist.add(ssid); } } android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.configureRoaming(roamingConfig); if (!(ok(status))) return false; } catch (android.os.RemoteException e) { handleRemoteException(e); return false; } <START_MOD>catch (java.lang.IllegalArgumentException e) { mLog.err( argument <END_MOD>return <START_MOD>false; } return <END_MOD>true; } }
public void <START_MOD>requestAllProfiles<END_MOD>(java.lang.String cardId<START_MOD>, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor<END_MOD>, android.telephony.euicc.EuiccCardManager.ResultCallback<android.service.euicc.EuiccProfileInfo[]> callback) { try { getIEuiccCardController().getAllProfiles(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetAllProfilesCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.service.euicc.EuiccProfileInfo[] profiles) { <START_MOD>executor.execute(() -> <END_MOD>callback.onComplete(resultCode, profiles)<START_MOD>)<END_MOD>; } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG,   calling getAllProfiles e); throw e.rethrowFromSystemServer(); } }
private void notifyHostEmuDeactivated(<START_MOD>int type<END_MOD>) { mListener.onHostCardEmulationDeactivated(<START_MOD>type<END_MOD>); }
<START_MOD>@java.lang.Override public boolean stopCreatingSensfResDuringActivationForService(int userId, android.content.ComponentName service, boolean stop) throws android.os.RemoteException { com.android.nfc.NfcPermissions.validateUserId(userId); com.android.nfc.NfcPermissions.enforceUserPermissions(mContext); if (!(isNfcFServiceInstalled(userId, service))) { return false; } return false; }<END_MOD>
public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.<START_MOD>getKey(256)<END_MOD>); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, <START_MOD>android.net.cts.IpSecManagerTest.getKey<END_MOD>(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth<START_MOD>, null<END_MOD>, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, <START_MOD>null, <END_MOD>false, 1, true); }
<START_MOD>@java.lang.Override protected void initDisconnected() { super.initDisconnected(); connectedPort = -1; connectedAddress = null; isNativeConnected = false; }<END_MOD>
public native int poll(<START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.StructPollfd[] fds, int timeoutMs) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
public java.util.List<java.lang.String> getCarrierPackageNamesForIntent(android.content.pm.PackageManager packageManager, android.content.Intent intent<START_MOD>) { if (!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)<END_MOD>) { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return carrierPrivilegeRules == null ? null : carrierPrivilegeRules.getCarrierPackageNamesForIntent(packageManager, intent); }<START_MOD> else { if ((mUiccProfile) != null) { return mUiccProfile.getCarrierPackageNamesForIntent(packageManager, intent); } else { return null; } } }<END_MOD>
public void testConstructor_NullStartDate_Failure() throws java.lang.Exception { <START_MOD>android.security.KeyPairGeneratorSpec<END_MOD> <START_MOD>spec =<END_MOD> new android.security.KeyPairGeneratorSpec(getContext(), android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1, "RSA", 1024, null, android.security.KeyPairGeneratorSpecTest.TEST_DN_1, android.security.KeyPairGeneratorSpecTest.SERIAL_1, null, android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS, 0); <START_MOD>assertEquals<END_MOD>(<START_MOD>android.security.KeyPairGeneratorSpecTest.DEFAULT_CERT_NOT_BEFORE,<END_MOD> <START_MOD>spec.getStartDate());<END_MOD> }
<START_MOD>public void testChannelRead_exceptionOnCloseWhenBlocked() throws java.lang.Exception { libcore.java.nio.channels.FileIOInterruptTest.FifoWriter fifoWriter = new libcore.java.nio.channels.FileIOInterruptTest.FifoWriter(fifoFile); fifoWriter.start(); java.io.FileInputStream fis = new java.io.FileInputStream(fifoFile); java.nio.channels.FileChannel fileInputChannel = fis.getChannel(); libcore.java.nio.channels.FileIOInterruptTest.ChannelReader channelReader = new libcore.java.nio.channels.FileIOInterruptTest.ChannelReader(fileInputChannel); java.lang.Thread channelReaderThread = libcore.java.nio.channels.FileIOInterruptTest.createAndStartThread("ChannelReader", channelReader); channelReader.waitForThreadToBlock(); fileInputChannel.close(); libcore.java.nio.channels.FileIOInterruptTest.waitToDie(channelReaderThread); assertSame(java.nio.channels.AsynchronousCloseException.class, channelReader.ioe.getClass()); assertFalse(channelReader.wasInterrupted); fifoWriter.tidyUp(); }<END_MOD>
private Camera.Size getOptimalPreviewSize(java.util.List<android.hardware.Camera.Size> sizes, int w, int h) { final double ASPECT_TOLERANCE = 0.1; double targetRatio = ((double) (640)) / ((double) (480)); if (sizes == null) return null; android.hardware.Camera.Size optimalSize = null; int minDiff = java.lang.Integer.MAX_VALUE; int curDiff; int targetHeight = h; int targetWidth = w; boolean aspectRatio = true; <START_MOD>boolean maintainCeiling = true; if ((sizes.size()) == 0) return null; <END_MOD>while (true) { for (android.hardware.Camera.Size size : sizes) { if (aspectRatio) { double ratio = ((double) (size.width)) / (size.height); if ((java.lang.Math.abs((ratio - targetRatio))) > ASPECT_TOLERANCE) { continue; } } curDiff = (java.lang.Math.abs(((size.height) - targetHeight))) + (java.lang.Math.abs(((size.width) - targetWidth))); if (((<START_MOD>maintainCeiling && (<END_MOD>curDiff < minDiff)<START_MOD>)<END_MOD> && ((size.height) <= targetHeight)) && ((size.width) <= targetWidth)) { optimalSize = size; minDiff = curDiff; } <START_MOD>else if ((maintainCeiling == false) && (curDiff < minDiff)) { <END_MOD>optimalSize <START_MOD>= size; minDiff = curDiff; } } if ((optimalSize <END_MOD>== null) <START_MOD>&& (<END_MOD>aspectRatio <START_MOD>== true)) { aspectRatio <END_MOD>= false; } else <START_MOD>if (maintainCeiling == true) { maintainCeiling = false; } else <END_MOD>{ break; } } return optimalSize; }
<START_MOD>@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if (!(intent.getAction().equals(com.android.pmc.A2dpReceiver.A2DP_INTENT))) return; boolean alarm = intent.hasExtra(com.android.pmc.A2dpReceiver.A2DP_ALARM); if (alarm) { android.util.Log.d(com.android.pmc.A2dpReceiver.TAG, "Received Alarm broadcast message"); handleAlarm(intent); } else { processParameters(intent); android.util.Log.d(com.android.pmc.A2dpReceiver.TAG, "Received PMC command message"); } }<END_MOD>
public void handleMessage(android.os.Message msg) { if ((msg.what) == 0) { mConsuming = false; setEnabled(true); } <START_MOD>else if ((msg.what) == (-1)) { setEnabled(false); <END_MOD>}<START_MOD> }<END_MOD>
public void registerListener(android.os.storage.StorageEventListener listener) { if (listener == null) { return; } synchronized(mListeners) { <START_MOD>if (((mBinderListener) == null) && ((mMountService) != null)) { try { mBinderListener = new android.os.storage.StorageManager.MountServiceBinderListener(); mMountService.registerListener(mBinderListener); } catch (android.os.RemoteException rex) { android.util.Log.e(android.os.storage.StorageManager.TAG,   mBinderListener failed return; } } <END_MOD>mListeners.add(new android.os.storage.StorageManager.ListenerDelegate(listener)); } }
synchronized void <START_MOD>onConnectStateChangedFromNative<END_MOD>(byte[] address, int state) { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ((( address= + (java.<START_MOD>lang.String.format("%02x", java.<END_MOD>util.Arrays.toString(address<START_MOD>)<END_MOD>))) +   state= + state)); } android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.hid.HidDeviceService.MESSAGE_CONNECT_STATE_CHANGED); msg.obj = address; msg.arg1 = state; mHandler.sendMessage(msg); }
public void setFromFieldPacker(int xoff, int yoff, int <START_MOD>zoff, int w, int h, int d<END_MOD>, android.renderscript.FieldPacker fp) { <START_MOD>mRS.validate(); int eSize = mType.mElement.getBytesSize(); final byte[] data = fp.getData(); int data_length = fp.getPos(); int count = (w * h) * d; if ((eSize * count) != data_length) { throw new android.renderscript.RSIllegalArgumentException((((( packer length   + data_length) +   not divisible by element size   + eSize) + ".")); } if ((mCurrentDimZ) > 0) { copy3DRangeFromUnchecked<END_MOD>(xoff, yoff, <START_MOD>zoff, w, h, d, data, Element.DataType.SIGNED_8, data.length); } else if ((mCurrentDimY) > <END_MOD>0<START_MOD>) { copy2DRangeFromUnchecked(xoff, yoff, w, h, data, Element.DataType.SIGNED_8, data.length); } else { copy1DRangeFromUnchecked(xoff, w, data); } }<END_MOD>
@java.lang.Override @javax.annotation.Nonnull public <START_MOD>synchronized <END_MOD>com.android.sched.vfs.OutputVFile createOutputVFile(@javax.annotation.Nonnull com.android.sched.vfs.VPath path) throws com.android.sched.util.file.CannotCreateFileException { <START_MOD>assert !(vfs.isClosed()); <END_MOD>java.io.File file = new java.io.File(dir, path.getPathAsString(ZipUtils.ZIP_SEPARATOR)); if ((!(file.getParentFile().mkdirs())) && (!(file.getParentFile().isDirectory()))) { throw new com.android.sched.util.file.CannotCreateFileException(new com.android.sched.util.location.DirectoryLocation(file.getParentFile())); } assert !(path.equals(VPath.ROOT)); java.lang.String newEntryName = path.getPathAsString(ZipUtils.ZIP_SEPARATOR); java.lang.String parentEntryName = zipEntry.getName(); if (!(parentEntryName.isEmpty())) { newEntryName = parentEntryName + newEntryName; } return new com.android.sched.vfs.InputOutputZipVFile(vfs, file, new java.util.zip.ZipEntry(newEntryName)); }
@org.junit.Test @java.lang.Runtime public void test103() throws java.lang.Exception { java.lang.String test = "com.android.jack.optimizations.valuepropagation.test103"; java.lang.String aType = "Lcom/android/jack/optimizations/valuepropagation/test103/jack/A;"; java.lang.String bType = "Lcom/android/jack/optimizations/valuepropagation/test103/jack/B;"; java.lang.String cType = "Lcom/android/jack/optimizations/valuepropagation/test103/jack/C;"; java.lang.String dType = "Lcom/android/jack/optimizations/valuepropagation/test103/jack/D;"; java.lang.String foo = (("foo(" + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR)) + ")") + (com.android.jack.optimizations.valuepropagation.ValuePropagationTests.STR); compileAndValidate(defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "A.foo.dalvik"))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "B.foo.dalvik"))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "C.foo.dalvik"))).insert(dType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(foo, dalvik(test, "D.foo.dalvik")))<START_MOD>, test<END_MOD>); }
<START_MOD>@java.lang.Override @javax.annotation.Nonnull protected com.android.jack.ir.ast.JStatement updateCatchBlockList(@javax.annotation.Nonnull com.android.jack.ir.ast.JStatement clonedStmt, @javax.annotation.Nonnull com.android.jack.ir.ast.JStatement orignalStmt) { com.android.jack.ir.ast.JStatement result = super.updateCatchBlockList(clonedStmt, orignalStmt); for (com.android.jack.ir.ast.JCatchBlock catchBlock : callSiteStmt.getJCatchBlocks()) { result.appendCatchBlock(catchBlock); } return result; }<END_MOD>
@java.lang.Override protected void engineUpdate(byte[] input, int offset, int len) { org.conscrypt.<START_MOD>OpenSSLDigestContext ctxRef = ctx; org.conscrypt.<END_MOD>NativeCrypto.EVP_DigestUpdate(<START_MOD>ctxRef.getContext<END_MOD>(), input, offset, len); }
public void test_Constructor()<START_MOD> throws java.lang.InterruptedException<END_MOD> { java.util.Timer t = null; try { t = new java.util.Timer(); tests.api.java.util.TimerTest.TimerTestTask testTask = new tests.api.java.util.TimerTest.TimerTestTask(); t.schedule(testTask, 200); awaitRun(testTask); t.cancel(); } finally { if (t != null) t.cancel(); } }
public android.os.PersistableBundle getCarrierConfig() { android.telephony.CarrierConfigManager carrierConfigManager = mContext.getSystemService(android.telephony.CarrierConfigManager.class); return carrierConfigManager.getConfigForSubId(<START_MOD>getSubId()<END_MOD>); }
@org.junit.Test public void xor_long() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(XOR_LONG).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), <START_MOD>"jack/jack-tests/src/com/android/jack/DxTestCase.java"<END_MOD>)).compileAndRunTest(); }
@java.lang.Override public void onSettingsChanged(com.android.sdkuilib.internal.repository.SettingsController controller, com.android.sdkuilib.internal.repository.SettingsController.Settings oldSettings) { if ((mDownloadCache) != null) { if ((controller.getSettings().getUseDownloadCache()) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.FRESH_CACHE))) { mDownloadCache = null; } else if ((!(controller.getSettings().getUseDownloadCache())) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.DIRECT))) { mDownloadCache = null; } } if ((<START_MOD>(<END_MOD>oldSettings.getForceHttp()) != (controller.getSettings().getForceHttp())) <START_MOD>|| ((oldSettings.getEnablePreviews()) != (controller.getSettings().getEnablePreviews()))) <END_MOD>{ refreshSources(false); } }
@java.lang.SuppressWarnings("MethodNamesDifferingOnlyByCase") public static void main(java.lang.String[] args) { if (((args.length) == 1) && ("%f".equals(args[0]))) { args = com.intellij.idea.Main.NO_ARGS; } com.intellij.idea.Main.setFlags(args); if (com.intellij.idea.Main.isHeadless()) { java.lang.System.setProperty(com.intellij.idea.Main.AWT_HEADLESS, java.lang.Boolean.TRUE.toString()); } else if (java.awt.GraphicsEnvironment.isHeadless()) { com.intellij.idea.Main.showMessage( Error   to detect graphics environment true); java.lang.System.exit(com.intellij.idea.Main.NO_GRAPHICS); } else if ((args.length) == 0) { try { com.intellij.idea.Main.installPatch(); } catch (java.lang.Throwable t) { com.intellij.idea.Main.showMessage( Failed t); java.lang.System.exit(com.intellij.idea.Main.UPDATE_FAILED); } } <START_MOD>com.intellij.idea.Main.createRecordFile(); <END_MOD>try { com.intellij.ide.Bootstrap.main(args, ((com.intellij.idea.Main.class.getName()) + "Impl"), "start"); } catch (java.lang.Throwable t) { com.intellij.idea.Main.showMessage( Failed t); java.lang.System.exit(com.intellij.idea.Main.STARTUP_EXCEPTION); } }
<START_MOD>@java.lang.Override public void onClick(android.content.DialogInterface dialog, int which) { setResult(com.android.cts.verifier.bluetooth.RESULT_CANCELED); finish(); }<END_MOD>
<START_MOD>private void initJni() throws java.io.IOException { java.io.File jniDir = new java.io.File(mDir, "jni"); if (!(jniDir.exists())) { return; } if (mNdkProject) { mNativeSources = jniDir; java.io.File makefile = new java.io.File(jniDir, "Android.mk"); if (makefile.exists()) { java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("\\s*LOCAL_MODULE\\s*:=\\s*(\\S+)\\s*"); for (java.lang.String line : com.google.common.io.Files.readLines(makefile, Charsets.UTF_8)) { java.util.regex.Matcher matcher = pattern.matcher(line); if (matcher.matches()) { mNativeModuleName = matcher.group(1); if ((mNativeLibs) != null) { java.lang.String libName = ("lib" + (mNativeModuleName)) + ".so"; java.util.ListIterator<java.io.File> iterator = mNativeLibs.listIterator(); while (iterator.hasNext()) { java.io.File lib = iterator.next(); if (libName.equals(lib.getName())) { iterator.remove(); } } if (mNativeLibs.isEmpty()) { mNativeLibs = null; } } break; } } } } else { mImporter.reportWarning(this, getClassPathFile(), ("Project contains a jni directory, but does not have an Eclipse C/C++ " + "nature: malformed NDK project?")); } }<END_MOD>
<START_MOD>public void testSetGroupingSeparator() { int number = 1234; java.text.DecimalFormat df; java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(java.util.Locale.US); dfs.setGroupingSeparator(' '); df = new java.text.DecimalFormat("#,##0.00;-#,##0.00", dfs); assertEquals("1 234.00", df.format(number)); df = new java.text.DecimalFormat("¤#,##0.00;¤-#,##0.00", dfs); assertEquals("$1 234.00", df.format(number)); }<END_MOD>
public static int forkAndSpecialize(int uid, int gid, int[] gids, int debugFlags, int[][] rlimits<START_MOD>, java.lang.String SEInfo, java.lang.String niceName<END_MOD>) { dalvik.system.Zygote.preFork(); int pid = dalvik.system.Zygote.nativeForkAndSpecialize(uid, gid, gids, debugFlags, rlimits<START_MOD>, SEInfo, niceName<END_MOD>); dalvik.system.Zygote.postFork(); return pid; }
public void <START_MOD>testHashCode<END_MOD>() { java.text.DecimalFormat df1 = new java.text.DecimalFormat(); java.text.DecimalFormat df2 = ((java.text.DecimalFormat) (df1.clone())); assertTrue( codes of equals object are not equal ((df2.hashCode()) == (df1.hashCode()))); }
public void test_ConstructorZ()<START_MOD> throws java.lang.InterruptedException<END_MOD> { java.util.Timer t = null; try { t = new java.util.Timer(true); tests.api.java.util.TimerTest.TimerTestTask testTask = new tests.api.java.util.TimerTest.TimerTestTask(); t.schedule(testTask, 200); awaitRun(testTask); t.cancel(); } finally { if (t != null) t.cancel(); } }
@org.junit.Test public void <START_MOD>compileWithAnnotationProcessorNoAuto_classpath<END_MOD>() throws java.lang.Exception { <START_MOD>com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); <END_MOD>java.io.File <START_MOD>jackOut<END_MOD> = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File <START_MOD>processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorClasses(java.util.Collections.singletonList(com.android.jack.annotation.processor.sample.processors.SourceAnnotationProcessor.class.getName())); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.addToClasspath(processors); jack.srcToLib(<END_MOD>jackOut<START_MOD>, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut<END_MOD> = com.android.jack.<START_MOD>library.JackLibraryFactory.getInputLibrary(new com.android.sched.vfs.DirectFS(new com.android.sched.util.file.Directory(jackOut<END_MOD>.getPath()<START_MOD>, null, com.android.sched.util.file.FileOrDirectory.Existence.MUST_EXIST, com.android.sched.util.file.FileOrDirectory.Permission.READ, com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE), com.android.sched.util.file.FileOrDirectory.Permission.READ)); junit.framework.Assert.assertFalse(libOut.containsFileType(FileType.RSC)); libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath("Annotated2Duplicated", '/')<END_MOD>); }
public void setVar(int index, <START_MOD>double<END_MOD> v) { <START_MOD>if (mUseIncSupp) { <END_MOD>mRS.<START_MOD>nIncScriptSetVarD<END_MOD>(getID(mRS), index, v); }<START_MOD> else { mRS.nScriptSetVarD(getID(mRS), index, v); } }<END_MOD>
@org.junit.Test public void testCompile021() throws java.lang.Exception { java.lang.String packageName = "com.android.jack.switchstatement.test021.jack"; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> <START_MOD>input1<END_MOD> = com.google.common.collect.Maps.newHashMap(); { <START_MOD>input1<END_MOD>.put("Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo("java-lang-Thread$State", true)); } <START_MOD>java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input2 = com.google.common.collect.Maps.newHashMap(); { input2.put("Switch1", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo("java-lang-Thread$State", true)); } compileCode<END_MOD>(packageName, <START_MOD>input1, input2<END_MOD>); }
public int syncGetSupportedFeatures(com.android.internal.util.AsyncChannel channel) { android.os.Message resultMsg = channel.sendMessageSynchronously(com.android.server.wifi.WifiStateMachine.CMD_GET_SUPPORTED_FEATURES); int supportedFeatureSet = resultMsg.arg1; resultMsg.recycle(); <START_MOD>boolean disableRtt = android.os.SystemProperties.getBoolean("config.disable_rtt", false); if (disableRtt) { supportedFeatureSet &= ~((WifiManger.WIFI_FEATURE_D2D_RTT) | (WifiManger.WIFI_FEATURE_D2AP_RTT)); } <END_MOD>return supportedFeatureSet; }
<START_MOD>private static java.lang.String mapToString(java.util.Map<java.lang.String, java.lang.Integer> map) { java.lang.StringBuilder sb = new java.lang.StringBuilder(""); for (java.util.Map.Entry<java.lang.String, java.lang.Integer> entry : map.entrySet()) { sb.append(java.lang.String.format("%s %d\n", entry.getKey(), entry.getValue())); } return sb.toString(); }<END_MOD>
private void <START_MOD>dumpMetrics<END_MOD>(java.io.FileDescriptor fd) { <START_MOD>android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, "dumpMetrics"); <END_MOD>com.android.bluetooth.btservice.BluetoothProto.BluetoothLog <START_MOD>metrics<END_MOD> = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); <START_MOD>metrics<END_MOD>.setNumBondedDevices(getBondedDevices().length); for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dumpProto(<START_MOD>metrics); } byte[] nativeMetricsBytes = dumpMetricsNative(); android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, ( native metrics size is   + (nativeMetricsBytes.length)));<END_MOD> try { <START_MOD>metrics.mergeFrom(nativeMetricsBytes); } catch (com.google.protobuf.micro.InvalidProtocolBufferMicroException ex) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ( parsing metrics Protobuf:   + (ex.getMessage()))); return; } byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); android.util.Log.i(com.android.bluetooth.btservice.AdapterService.TAG, ( combined metrics size is   + (metricsBytes.length))); try (<END_MOD>java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)<START_MOD>) { protoOut.write(metricsBytes); } catch (<END_MOD>java.<START_MOD>io.IOException e) { errorLog( to <END_MOD>write<START_MOD> Java protobuf<END_MOD> to file descriptor. } }
public void test_getNetworkInterface() throws java.io.IOException { java.net.MulticastSocket mss = new java.net.MulticastSocket(0); java.net.NetworkInterface theInterface = mss.getNetworkInterface(); assertTrue(( interface returned wrong network interface when not set: + theInterface), theInterface.getInetAddresses().hasMoreElements()); java.net.InetAddress firstAddress = theInterface.getInetAddresses().nextElement(); assertTrue(firstAddress.isAnyLocalAddress()); mss.setNetworkInterface(<START_MOD>ipv4NetworkInterface<END_MOD>); assertEquals( did not return interface set by setNeworkInterface <START_MOD>ipv4NetworkInterface<END_MOD>, mss.getNetworkInterface()); mss.setNetworkInterface(loopbackInterface); assertEquals(<START_MOD>(<END_MOD> did not return network interface set by second<START_MOD> +  <END_MOD> setNetworkInterface call loopbackInterface, mss.getNetworkInterface()); mss.close(); <START_MOD>if ((ipv6networkInterface) != null) { <END_MOD>mss = new java.net.MulticastSocket(0); <START_MOD>mss.setNetworkInterface(ipv6networkInterface); assertEquals( did not return interface set by setNeworkInterface ipv6networkInterface, mss.getNetworkInterface()); mss.close(); } mss = new java.net.MulticastSocket(0); java.util.Enumeration addresses = ipv4NetworkInterface.getInetAddresses(); <END_MOD>if (<START_MOD>addresses.hasMoreElements()<END_MOD>) { <START_MOD>firstAddress = ((java.net.InetAddress) (addresses.nextElement())); mss.setInterface(firstAddress<END_MOD>); assertEquals( did not return interface set by <START_MOD>setInterface ipv4NetworkInterface<END_MOD>, mss.getNetworkInterface()); } mss<START_MOD>.close(<END_MOD>); }
@java.lang.Override public void removeImsFeature(int slotId, int feature) throws android.os.RemoteException { synchronized(mFeatures) { <START_MOD>enforceCallingOrSelfPermission(android.telephony.ims.MODIFY_PHONE_STATE, "createImsFeature"); <END_MOD>onRemoveImsFeatureInternal(slotId, feature); } }
@javax.annotation.Nonnull private static java.lang.String convertNameToPattern(@javax.annotation.Nonnull java.lang.String name<START_MOD>, @javax.annotation.Nonnull com.android.jack.shrob.proguard.GrammarActions.NameFormat format<END_MOD>) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (int i = 0; i < (name.length()); i++) { char c = name.charAt(i); switch (c) { case '?' : <START_MOD>com.android.jack.shrob.proguard.GrammarActions.appendPatternNotSeparator(format, sb); break; case '*' : int j = i + 1; if ((j < (name.length())) && ((name.charAt(j)) == '*')) { <END_MOD>sb.append(<START_MOD>".*"); i++; } else { com.android.jack.shrob.proguard.GrammarActions.appendPatternNotSeparator(format, sb); sb.append("*"); }<END_MOD> break; case <START_MOD>'$'<END_MOD> : sb.append(<START_MOD>"\\$"); break; default :<END_MOD> sb.append(<START_MOD>c);<END_MOD> break; } } return sb.toString(); }
<START_MOD>public void writeToParcel(android.os.Parcel out, int flags) { out.writeParcelable(new android.os.ParcelUuid(mUuid), 0); out.writeInt(mInstanceId); out.writeInt(mServiceType); out.writeTypedArray(mCharacteristics.toArray(new android.bluetooth.BluetoothGattCharacteristic[0]), 0); android.bluetooth.BluetoothGattIncludedService[] includedServices = new android.bluetooth.BluetoothGattIncludedService[mIncludedServices.size()]; int i = 0; for (android.bluetooth.BluetoothGattService s : mIncludedServices) { includedServices[i] = new android.bluetooth.BluetoothGattIncludedService(s.getUuid(), s.getInstanceId(), s.getType()); i++; } out.writeTypedArray(includedServices, 0); }<END_MOD>
<START_MOD>@javax.annotation.Nonnull @java.lang.Override java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.WRITE); java.io.File path = getNativeFile(file.getPath()); try { return new java.io.FileOutputStream(path); } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.WRITE); throw new com.android.sched.util.ConcurrentIOException(e); } }<END_MOD>
<START_MOD>public static void computeAcospi(android.renderscript.cts.TestAcospi.ArgumentsFloatFloat args) { args.ulf = 5; args.ulfRelaxed = 128; args.out = ((float) ((java.lang.Math.acos(args.in)) / (java.lang.Math.PI))); }<END_MOD>
@java.lang.Override void onStop() { if (com.android.bips.discovery.ManualDiscovery.DEBUG) android.util.Log.d(com.android.bips.discovery.ManualDiscovery.TAG, "onStop"); <START_MOD>mWifiMonitor.stop(); allPrintersLost(); <END_MOD>}
public void run() { android.<START_MOD>renderscript<END_MOD>.RenderScript pRS = android.<START_MOD>renderscript<END_MOD>.RenderScript.create(mCtx); com.android.rs.test.ScriptC_kernel3d s = new com.android.rs.test.ScriptC_kernel3d(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_init_vars(A); s.forEach_root(A, B); s.invoke_verify_root(); s.invoke_kernel_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }
public static boolean containsAttribute(java.util.ArrayList<com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor> attributes, java.lang.String nsUri, com.android.ide.<START_MOD>common<END_MOD>.<START_MOD>platformData<END_MOD>.AttributeInfo info) { java.lang.String xmlLocalName = info.getName(); for (com.android.ide.eclipse.adt.internal.editors.descriptors.AttributeDescriptor desc : attributes) { if (desc.getXmlLocalName().equals(xmlLocalName)) { if ((nsUri == (desc.getNamespaceUri())) || ((nsUri != null) && (nsUri.equals(desc.getNamespaceUri())))) { return true; } } } return false; }
<START_MOD>@java.lang.Override com.android.ahat.heapdump.ReferenceIterator getReferences() { final com.android.ahat.heapdump.AhatInstance src = this; java.util.List<com.android.ahat.heapdump.Reference> refs = new java.util.AbstractList<com.android.ahat.heapdump.Reference>() { @java.lang.Override public int size() { return mFieldValues.length; } @java.lang.Override public com.android.ahat.heapdump.Reference get(int index) { com.android.ahat.heapdump.FieldValue field = mFieldValues[index]; com.android.ahat.heapdump.Value value = field.value; if ((value != null) && (value.isAhatInstance())) { boolean strong = (!(field.name.equals("referent"))) || (!(isInstanceOfClass("java.lang.ref.Reference"))); return new com.android.ahat.heapdump.Reference(src, ("." + (field.name)), value.asAhatInstance(), strong); } return null; } }; return new com.android.ahat.heapdump.ReferenceIterator(refs); }<END_MOD>
@java.lang.Override protected void printFilteredProblem(@javax.annotation.Nonnull com.android.jack.reporting.Reportable.ProblemLevel problemLevel, @javax.annotation.Nonnull java.lang.String message, @javax.annotation.CheckForNull java.lang.String fileName, int startLine, int endLine, int startColumn, int endColumn) { java.lang.StringBuffer messageBuffer = new java.lang.StringBuffer(problemLevel.toString()); messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (fileName != null) { messageBuffer.append(fileName); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (startLine >= 0) { messageBuffer.append(startLine); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (endLine >= 0) { messageBuffer.append(endLine); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (startColumn >= 0) { messageBuffer.append(startColumn); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); if (endColumn >= 0) { messageBuffer.append(endColumn); } messageBuffer.append(com.android.jack.reporting.SdkReporter.MESSAGE_SEPARATOR); messageBuffer.append(message); <START_MOD>java.io.PrintStream printer = streamByLevel.get(problemLevel); if (printer == null) { printer = <END_MOD>reporterStream<START_MOD>; } printer<END_MOD>.println(messageBuffer.toString()); }
<START_MOD>@vogar.target.TestRunnerProperties(testClass = vogar.target.junit4.FailTest.class) @org.junit.Test public void testRunner_FailTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().failure("failure", "java.lang.AssertionError: failed.\n").success("success").success("throwAnotherExpectedException").failure("throwException", "java.lang.RuntimeException: exception\n").success("throwExpectedException").completedNormally(); }<END_MOD>
@<START_MOD>org<END_MOD>.<START_MOD>junit<END_MOD>.<START_MOD>Before<END_MOD> public void setUp() throws android.os.RemoteException, android.support.test.uiautomator.UiObjectNotFoundException { <START_MOD>android<END_MOD>.<START_MOD>support<END_MOD>.<START_MOD>test<END_MOD>.<START_MOD>uiautomator.UiDevice<END_MOD> mDevice = android.support.test.uiautomator.UiDevice.getInstance(<START_MOD>instrumentation<END_MOD>); if (!(mDevice.isScreenOn())) { mDevice.wakeUp(); mDevice.wait(android.support.test.uiautomator.Until.hasObject(android.support.test.uiautomator.By.res("android", "glow_pad_view")), 10000); mDevice.swipe(560, 1500, 560, 1000, 40); } mDevice.pressHome(); }
<START_MOD>@java.lang.Override public void send(byte[] data) throws java.io.IOException { mSocket.send(new java.net.DatagramPacket(data, data.length)); }<END_MOD>
@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { if ((com.android.cts.verifier.usb.UsbAccessoryTestActivity.ACTION_USB_PERMISSION.equals(intent.getAction())) || (UsbManager.ACTION_USB_ACCESSORY_ATTACHED.equals(intent.getAction()))) { android.hardware.usb.UsbAccessory accessory = intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY); if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) { openAccessory(accessory); } else { android.util.Log.i(com.android.cts.verifier.usb.UsbAccessoryTestActivity.TAG,   denied... } mPermissionRequestPending = false; } <START_MOD>else if (UsbManager.ACTION_USB_ACCESSORY_DETACHED.equals(intent.getAction())) { android.hardware.usb.UsbAccessory accessory = intent.getParcelableExtra(UsbManager.EXTRA_ACCESSORY); if ((accessory != null) && (accessory.equals(mAccessory))) { closeAccessory(); } } }<END_MOD>
<START_MOD>private void showIncomingCallNotification(com.android.server.telecom.Call call) { android.telecom.Log.i(this, "showIncomingCallNotification showCall = %s", call); java.lang.String name = ""; if ((call.getCallerDisplayNamePresentation()) == (android.telecom.TelecomManager.PRESENTATION_ALLOWED)) { name = call.getCallerDisplayName(); } if (android.text.TextUtils.isEmpty(name)) { name = call.getName(); } android.app.Notification.Builder builder = getNotificationBuilder(call.getTargetPhoneAccountLabel(), name, call.getPhoneNumber()); mNotificationManager.notify(com.android.server.telecom.ui.IncomingCallNotifier.NOTIFICATION_INCOMING_CALL, builder.build()); }<END_MOD>
@org.junit.Before public void setup() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); <START_MOD>when(mMockInjector.getWifiAwareStateManager()).thenReturn(mAwareStateManager); mDut = new <END_MOD>com.android.server.wifi.aware.<START_MOD>WifiAwareNative(mMockInjector, false); when(mMockInjector<END_MOD>.<START_MOD>getWifiAwareNative<END_MOD>(<START_MOD>)).thenReturn(mDut<END_MOD>); com.android.server.wifi.HalMockUtils.initHalMockLibrary(); com.android.server.wifi.aware.WifiAwareHalMock.initAwareHalMockLibrary(mDut); com.android.server.wifi.aware.WifiAwareNative.initAwareHandlersNative(com.android.server.wifi.WifiNative.class, WifiNative.sWlan0Index); com.android.server.wifi.HalMockUtils.setHalMockObject(mAwareHalMock); }
public static java.lang.String[] checkEnabledProtocols(java.lang.String[] protocols) { if (protocols == null) { throw new java.lang.IllegalArgumentException( == null } <START_MOD>protocols = org.conscrypt.Platform.filterProtocolsIfNeeded(protocols); <END_MOD>for (int i = 0; i < (protocols.length); i++) { java.lang.String protocol = protocols[i]; if (protocol == null) { throw new java.lang.IllegalArgumentException((("protocols[" + i) +   == null } if (((!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1))) && (!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1_1)))) && (!(protocol.equals(org.conscrypt.NativeCrypto.SUPPORTED_PROTOCOL_TLSV1_2)))) { throw new java.lang.IllegalArgumentException(((   + protocol) +   is not supported } } return protocols; }
@java.lang.Override public void handle(com.sun.net.httpserver.HttpExchange exchange) throws java.io.IOException { java.lang.ClassLoader loader = com.android.ahat.StaticHandler.class.getClassLoader(); java.io.InputStream is = loader.getResourceAsStream(mResourceName); if (is == null) { exchange.getResponseHeaders().add("Content-Type", "text/html"); exchange.sendResponseHeaders(404, 0); java.io.PrintStream ps = new java.io.PrintStream(exchange.getResponseBody()); com.android.ahat.HtmlDoc doc = new com.android.ahat.HtmlDoc(ps, com.android.ahat.DocString.text("ahat"), com.android.ahat.DocString.uri("style.css")); doc.big(com.android.ahat.DocString.text( not found. doc.close(); } else { exchange.getResponseHeaders().add("Content-Type", mContentType); exchange.sendResponseHeaders(200, 0); java.io.OutputStream os = exchange.getResponseBody(); <START_MOD>int read; byte[] buf = new byte[4096]; while ((read = <END_MOD>is<START_MOD>.read(buf)) > 0) {<END_MOD> os<START_MOD>.write(buf, 0, read); } is.close(<END_MOD>); os.close(); } }
@java.lang.Override public void libToLib(@javax.annotation.Nonnull java.io.File[] in, @javax.annotation.Nonnull java.io.File out, boolean zipFiles) throws java.lang.Exception { java.util.List<java.lang.String> commandLine = new java.util.ArrayList<java.lang.String>(); libToCommon(commandLine, getClasspathAsString(), in); if (zipFiles) { commandLine.add("--output-jack"); <START_MOD>commandLine.add(out.getAbsolutePath()); <END_MOD>} else { <START_MOD>if ((incrementalFolder) != null) { throw new java.lang.UnsupportedOperationException(); } addPropertiesForOutputJackDir(commandLine, <END_MOD>out<START_MOD>); }<END_MOD> com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(commandLine.toArray(new java.lang.String[commandLine.size()])); exec.inheritEnvironment(); exec.setErr(errRedirectStream); exec.setOut(outRedirectStream); exec.setVerbose(isVerbose); if ((exec.run()) != 0) { throw new java.lang.RuntimeException( compiler exited with an error } }
<START_MOD>private void onUnknownAt(java.lang.String atString, byte[] address) { com.android.bluetooth.hfp.HeadsetStackEvent event = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_UNKNOWN_AT); event.valueString = atString; event.device = getDevice(address); sendMessageToService(event); }<END_MOD>
private void createTypes(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage enclosingPackage, @javax.annotation.Nonnull com.android.jack.ir.impl.ReferenceMapper refMap, @javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.ast.TypeDeclaration typeDeclaration) { <START_MOD>if ((typeDeclaration.binding) == null) { return; } <END_MOD>com.android.jack.ir.impl.EcjSourceTypeLoader.createType(refMap, enclosingPackage, typeDeclaration.binding, typeDeclaration, new com.android.sched.util.location.FileLocation(new java.io.File(new java.lang.String(typeDeclaration.compilationResult.fileName)))); if ((typeDeclaration.memberTypes) != null) { for (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration memberType : typeDeclaration.memberTypes) { createTypes(enclosingPackage, refMap, memberType); } } }
@java.lang.Override public void dispose() { synchronized(com.android.internal.telephony.PhoneProxy.lockForRadioTechnologyChange) { super.dispose(); log("dispose"); unregisterForRuimRecordEvents(); mCM.unregisterForAvailable(this); mCM.unregisterForOffOrNotAvailable(this); mCM.unregisterForOn(this); mSST.unregisterForNetworkAttached(this); mCM.unSetOnSuppServiceNotification(this); <START_MOD>mCM.unregisterForExitEmergencyCallbackMode(this); <END_MOD>removeCallbacks(mExitEcmRunnable); mPendingMmis.clear(); mCT.dispose(); mDataConnectionTracker.dispose(); mSST.dispose(); mCdmaSSM.dispose(this); mSMS.dispose(); mRuimPhoneBookInterfaceManager.dispose(); mRuimSmsInterfaceManager.dispose(); mSubInfo.dispose(); mEriManager.dispose(); } }
<START_MOD>@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); java.lang.reflect.Method method = com.android.bluetooth.btservice.AdapterService.class.getDeclaredMethod("setAdapterService", com.android.bluetooth.btservice.AdapterService.class); method.setAccessible(true); method.invoke(mAdapterService, mAdapterService); mTargetContext = android.support.test.InstrumentationRegistry.getTargetContext(); mAdapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); mTestDevice = mAdapter.getRemoteDevice("00:01:02:03:04:05"); mHandlerThread = new android.os.HandlerThread("A2dpStateMachineTestHandlerThread"); mHandlerThread.start(); mA2dpStateMachine = new com.android.bluetooth.a2dp.A2dpStateMachine(mA2dpService, mTargetContext, mA2dpNativeInterface, mHandlerThread.getLooper()); mA2dpStateMachine.start(); }<END_MOD>
<START_MOD>private java.lang.String getFooter(java.lang.String link) { return ((("<br><br>For details, visit the" + " <a href='") + link) + "'>") + "VTS dashboard.</a>"; }<END_MOD>
<START_MOD>void dump(java.util.ArrayList<android.nfc.cardemulation.NfcFServiceInfo> services) { for (android.nfc.cardemulation.NfcFServiceInfo service : services) { if (com.android.nfc.cardemulation.RegisteredNfcFServicesCache.DEBUG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredNfcFServicesCache.TAG, service.toString()); } }<END_MOD>
<START_MOD>public static void build(org.eclipse.core.resources.IProject project, org.eclipse.core.runtime.IProgressMonitor monitor, boolean enablePostC) throws org.eclipse.core.runtime.CoreException { if (enablePostC) { java.util.Map<java.lang.String, java.lang.String> args = new java.util.TreeMap<java.lang.String, java.lang.String>(); args.put(AdtConstants.FULL_BUILD_REQUESTED, ""); org.eclipse.core.resources.IProjectDescription desc = project.getDescription(); org.eclipse.core.resources.ICommand[] commands = desc.getBuildSpec(); for (int i = 0; i < (commands.length); ++i) { project.build(IncrementalProjectBuilder.INCREMENTAL_BUILD, commands[i].getBuilderName(), args, monitor); } } else { project.build(IncrementalProjectBuilder.INCREMENTAL_BUILD, monitor); } }<END_MOD>
public void testIsCameraEnabledInPrimaryProfile() throws java.lang.Exception { assertFalse(mDevicePolicyManager.getCameraDisabled(mPrimaryAdminComponent)); assertFalse(mDevicePolicyManager.getCameraDisabled(null)); <START_MOD>waitUntilCameraPolicyEnforced(true); <END_MOD>checkCanOpenCamera(true); }
<START_MOD>public boolean isChildCall() { return mIsChildCall; }<END_MOD>
<START_MOD>private com.android.bluetooth.a2dp.A2dpStateMachine getStateMachine(android.bluetooth.BluetoothDevice device) { if (device == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, "getStateMachine failed: device cannot be null"); return null; } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachines.get(device); if (sm != null) { return sm; } if ((mStateMachines.size()) > (com.android.bluetooth.a2dp.A2dpService.MAX_A2DP_STATE_MACHINES)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ("Maximum number of A2DP state machines reached: " + (com.android.bluetooth.a2dp.A2dpService.MAX_A2DP_STATE_MACHINES))); return null; } if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, ("Creating a new state machine for " + device)); } sm = com.android.bluetooth.a2dp.A2dpStateMachine.make(device, this, this, mA2dpNativeInterface, mStateMachinesThread.getLooper()); mStateMachines.put(device, sm); return sm; } }<END_MOD>
public void testMigrated() { org.gradle.tooling.GradleConnector connector = org.gradle.tooling.GradleConnector.newConnector(); java.io.File projectDir = new java.io.File(getTestDir(), "migrated"); connector.forProjectDirectory(projectDir); org.gradle.tooling.ProjectConnection connection = connector.connect(); try { com.android.build.gradle.model.AndroidProject model = connection.getModel(com.android.build.gradle.model.AndroidProject.class); assertNotNull( <START_MOD>Object<END_MOD> model); assertEquals(<START_MOD> Name <END_MOD>"migrated", model.getName()); assertFalse(<START_MOD> Project <END_MOD>model.isLibrary()); com.android.build.gradle.model.ProductFlavorContainer defaultConfig = model.getDefaultConfig(); new com.android.build.gradle.model.AndroidProjectTest.SourceProviderTester(model.getName(), projectDir, "main", defaultConfig.getSourceProvider()).setJavaDir("src").setResourcesDir("src").setAidlDir("src").setRenderscriptDir("src").setResDir("res").setAssetsDir("assets").setManifestFile("AndroidManifest.xml").test(); new com.android.build.gradle.model.AndroidProjectTest.SourceProviderTester(model.getName(), projectDir, "instrumentTest", defaultConfig.getTestSourceProvider()).setJavaDir("tests/java").setResourcesDir("tests/resources").setAidlDir("tests/aidl").setJniDir("tests/jni").setRenderscriptDir("tests/rs").setResDir("tests/res").setAssetsDir("tests/assets").setManifestFile("tests/AndroidManifest.xml").test(); } finally { connection.close(); } }
private int loadInstanceDump() throws java.io.IOException { long id = readId(); int stackId = mInput.readInt(); com.android.tools.perflib.heap.StackTrace stack = mState.getStackTrace(stackId); <START_MOD>final <END_MOD>long classId = readId(); int remaining = mInput.readInt(); <START_MOD>final <END_MOD>com.android.tools.perflib.heap.ClassInstance instance = new com.android.tools.perflib.heap.ClassInstance(id, stack<START_MOD>); final byte[] data = new byte[remaining]; mInput.readFully(data); final java.io.DataInputStream stream = new java.io.DataInputStream(new java.io.ByteArrayInputStream(data)); mPost.add(new com.android.tools.perflib.heap.HprofParser.PostOperation(com.android.tools.perflib.heap.HprofParser.RESOLVE_CLASSES, new java.util.concurrent.Callable() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { instance.setClass(mState.findClass(<END_MOD>classId)<START_MOD>); return null; } })); mPost.add(new com.android.tools.perflib.heap.HprofParser.PostOperation(com.android.tools.perflib.heap.HprofParser.RESOLVE_VALUES, new java.util.concurrent.Callable() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.android.tools.perflib.heap.ClassObj clazz = instance.getClassObj(); while (clazz != null) { for (com.android.tools.perflib.heap.Field field : clazz.getFields()) { instance.addField(field, readValue(stream, instance, field.getType())); } clazz = clazz.getSuperClassObj(); } return null; } })); instance.setHeap(mState.mCurrentHeap); mState.addInstance(id, instance); return ((((mIdSize) + 4) + (mIdSize)) + 4) +<END_MOD> remaining<START_MOD>; }<END_MOD>
public void toggleMethodProfiling() { try { <START_MOD>switch<END_MOD> (mClientData.getMethodProfilingStatus()) { <START_MOD>case<END_MOD> <START_MOD>TRACER_ON : stopMethodProfiling<END_MOD>(); <START_MOD>break;<END_MOD> <START_MOD>case<END_MOD> <START_MOD>SAMPLER_ON<END_MOD> <START_MOD>: stopMethodSampling<END_MOD>(); <START_MOD>break<END_MOD>; <START_MOD>case<END_MOD> <START_MOD>OFF : startMethodProfiling<END_MOD>(); <START_MOD>break<END_MOD>; } } catch (java.io.IOException e) { com.android.ddmlib.Log.w("ddms",   method profiling failed } }
private void cmdList(java.io.FileDescriptor fd, java.io.PrintWriter pw, java.lang.String[] args) { final java.util.ArrayList<android.net.ConnectivityMetricsEvent> events; synchronized(mLock) { events = new java.util.ArrayList(mBuffer); } if (((args.length) > 1) && (args[1].equals("proto"))) { for (com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent ev : com.android.server.connectivity.IpConnectivityEventBuilder.toProto(events)) { pw.print(ev.toString()); } if ((mNetdListener) != null) { mNetdListener.listAsProtos(pw); } <START_MOD>mDefaultNetworkMonitor.listEventsAsProto(pw); <END_MOD>return; } for (android.net.ConnectivityMetricsEvent ev : events) { pw.println(ev.toString()); } if ((mNetdListener) != null) { mNetdListener.list(pw); } <START_MOD>mDefaultNetworkMonitor.listEvents(pw); }<END_MOD>
<START_MOD>public static int StaticConditionNulls() { java.lang.Object a = null; java.lang.Object b = null; return a == b ? 5 : 2; }<END_MOD>
@java.lang.Override public int compare(com.android.ahat.<START_MOD>heapdump.<END_MOD>Site.ObjectsInfo a, com.android.ahat<START_MOD>.heapdump<END_MOD>.Site.ObjectsInfo b) { java.lang.String aName = <START_MOD>a<END_MOD>.<START_MOD>classObj<END_MOD>.getClassName(); java.lang.String bName = <START_MOD>b<END_MOD>.<START_MOD>classObj<END_MOD>.getClassName(); return aName.compareTo(bName); }
<START_MOD>@org.junit.Test public void testBinderDeathAfterCleanupAndReleaseDoesNothing() throws android.os.RemoteException { com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = getTestRefcountedResource(); refcountedResource.cleanupAndRelease(); assertResourceState(refcountedResource, (-1), 1, 1, 1, 1); refcountedResource.binderDied(); assertResourceState(refcountedResource, (-1), 2, 1, 1, 1); }<END_MOD>
boolean isMetadataSynced() { if ((<START_MOD>(<END_MOD>getQueue()) != null) <START_MOD>&& ((getActiveQueueID()) != (-1))) <END_MOD>{ android.media.session.MediaSession.QueueItem currItem = null; for (android.media.session.MediaSession.QueueItem item : getQueue()) { if ((item.getQueueId()) == (getActiveQueueID())) { currItem = item; break; } } <START_MOD>com.android.bluetooth.avrcp.Metadata qitem = com.android.bluetooth.avrcp.Util.toMetadata(currItem); com.android.bluetooth.avrcp.Metadata mdata = com.android.bluetooth.avrcp.Util.toMetadata(getMetadata()); qitem.mediaId = ""; mdata.mediaId = ""; <END_MOD>if ((currItem == null) || (!(<START_MOD>qitem<END_MOD>.equals(<START_MOD>mdata<END_MOD>)))) { if (com.android.bluetooth.avrcp.MediaPlayerWrapper.DEBUG) { android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ( currently out of sync for   + (mPackageName))); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (   Current queueItem:   + currItem)); android.util.Log.d(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (   Current metadata :   + (getMetadata().getDescription()))); } return false; } } return true; }
public void addObj(android.support.v8.renderscript.BaseObj obj) { if (shouldThunk()) { if (obj != null) { mN.addObj(obj.getNObj()); } else { mN.addObj(null); } return; } if (obj != null) { addI32(obj.getID(null)); } else { addI32(0); } }
org.gradle.model.<START_MOD>collection<END_MOD>.<START_MOD>ManagedSet<END_MOD><com.android.build.gradle.<START_MOD>managed<END_MOD>.<START_MOD>ManagedBuildType<END_MOD>> getBuildTypes();
<START_MOD>@org.junit.Test public void testBuilder_BasedOnAnotherProfile() { android.service.euicc.EuiccProfileInfo p = new android.service.euicc.EuiccProfileInfo.Builder().setIccid("21430000000000006587").setNickname("profile nickname").setProfileName("profile name").setServiceProviderName("service provider").setOperatorId(new android.service.euicc.OperatorId(new byte[]{ 35, 69, 103 }, new byte[]{ 1, 2, 3 }, new byte[]{ 4, 5 })).setState(EuiccProfileInfo.ProfileState.ENABLED).setProfileClass(EuiccProfileInfo.ProfileClass.OPERATIONAL).setPolicyRules(EuiccProfileInfo.PolicyRule.DO_NOT_DELETE).setUiccAccessRule(new android.telephony.UiccAccessRule[]{ new android.telephony.UiccAccessRule(new byte[0], null, 0) }).build(); android.service.euicc.EuiccProfileInfo copied = new android.service.euicc.EuiccProfileInfo.Builder(p).build(); assertEquals(p, copied); assertEquals(p.hashCode(), copied.hashCode()); }<END_MOD>
public void testClientConfiguredGzipContentEncoding() throws java.lang.Exception { byte[] bodyBytes = gzip("ABCDEFGHIJKLMNOPQRSTUVWXYZ".getBytes("UTF-8")); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(bodyBytes).addHeader( gzip").addHeader(("Content-Length:   + (bodyBytes.length)))); server.play(); java.net.URLConnection connection = server.getUrl("/").openConnection(); connection.addRequestProperty("Accept-Encoding", "gzip"); java.io.InputStream gunzippedIn = new java.util.zip.GZIPInputStream(connection.getInputStream()); assertEquals("ABCDEFGHIJKLMNOPQRSTUVWXYZ", readAscii(gunzippedIn, java.lang.Integer.MAX_VALUE)); assertEquals(bodyBytes.length, connection.getContentLength()); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); <START_MOD>libcore.java.net.URLConnectionTest.<END_MOD>assertContains(request.getHeaders(),   gzip }
@java.lang.Override public java.util.Set<vogar.tasks.Task> installTasks() { java.util.Set<vogar.tasks.Task> result = new java.util.HashSet<vogar.tasks.Task>(); for (java.io.File classpathElement : run.classpath.getElements()) { java.lang.String name = run.basenameOfJar(classpathElement); java.io.File localDex = run.localDexFile(name); <START_MOD>java.io.File localDesugarTempDir = run.localDesugarTempDir(name); <END_MOD>result.add(createCreateDexJarTask(run.classpath, classpathElement, name, null, localDex<START_MOD>, localDesugarTempDir<END_MOD>)); } result.add(new vogar.tasks.MkdirTask(run.mkdir, dalvikCache())); return result; }
<START_MOD>@java.lang.Override @javax.annotation.Nonnull java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVFile file, boolean append) throws com.android.sched.util.file.WrongPermissionException { if (!(isWritable())) { throw new java.lang.UnsupportedOperationException(); } com.android.sched.vfs.BaseVFile wrappedFile = file.getWrappedFiles().get(0); boolean wrappedFileIsWritable = wrappedFile.getVFS().getCapabilities().contains(Capabilities.WRITE); if (!wrappedFileIsWritable) { try { loadWritableFile(file); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } } return file.getWrappedFiles().get(0).getOutputStream(append); }<END_MOD>
<START_MOD>public void initConnected(java.net.InetAddress remoteAddress, int remotePort) { isConnected = true; impl.initConnected(remoteAddress, remotePort); }<END_MOD>
private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV2Block, java.util.Set<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm> contentDigestsToVerify, <START_MOD>int maxSdkVersion, <END_MOD>com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result result) throws java.security.NoSuchAlgorithmException { java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.v2.V2SchemeVerifier.getLengthPrefixedSlice(apkSignatureSchemeV2Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V2_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V2_SIG_NO_SIGNERS); return; } java.security.cert.CertificateFactory certFactory; try { certFactory = java.security.cert.CertificateFactory.getInstance("X.509"); } catch (java.security.cert.CertificateException e) { throw new java.lang.RuntimeException( to obtain X.509 CertificateFactory e); } int signerCount = 0; while (signers.hasRemaining()) { int signerIndex = signerCount; signerCount++; com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.v2.V2SchemeVerifier.Result.SignerInfo(); signerInfo.index = signerIndex; result.signers.add(signerInfo); try { java.nio.ByteBuffer signer = com.android.apksig.internal.apk.v2.V2SchemeVerifier.getLengthPrefixedSlice(signers); com.android.apksig.internal.apk.v2.V2SchemeVerifier.parseSigner(signer, certFactory, signerInfo, contentDigestsToVerify<START_MOD>, maxSdkVersion<END_MOD>); } catch (com.android.apksig.apk.ApkFormatException | java.nio.BufferUnderflowException e) { signerInfo.addError(Issue.V2_SIG_MALFORMED_SIGNER); return; } } }
@java.lang.Override protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); requestWindowFeature(Window.FEATURE_NO_TITLE); getWindow().setBackgroundDrawableResource(R.drawable.class_zero_background);<START_MOD> if ((messageQueue) == null) { messageQueue = new java.util.ArrayList<android.telephony.SmsMessage>(); }<END_MOD> byte[] pdu = getIntent().getByteArrayExtra("pdu"); java.lang.String format = getIntent().getStringExtra("format"); <START_MOD>android.telephony.SmsMessage rawMessage<END_MOD> = android.telephony.SmsMessage.createFromPdu(pdu, format); java.lang.CharSequence messageChars = <START_MOD>rawMessage<END_MOD>.getMessageBody(); java.lang.String message = messageChars.toString(); if (android.text.TextUtils.isEmpty(message)) { <START_MOD>if ((messageQueue.size()) == 0) { <END_MOD>finish(); <START_MOD>} <END_MOD>return; } <START_MOD>messageQueue.add(rawMessage); if ((messageQueue.size()) == 1) { displayZeroMessage(rawMessage); }<END_MOD> if (icicle != null) { mTimerSet = icicle.getLong(com.android.mms.ui.ClassZeroActivity.TIMER_FIRE, mTimerSet); } }
<START_MOD>private int convertRILRegStateToServiceState(int regState) { switch (regState) { case android.hardware.radio.V1_0.RegState.NOT_REG_MT_NOT_SEARCHING_OP : return android.telephony.ServiceState.RIL_REG_STATE_NOT_REG; case android.hardware.radio.V1_0.RegState.REG_HOME : return android.telephony.ServiceState.RIL_REG_STATE_HOME; case android.hardware.radio.V1_0.RegState.NOT_REG_MT_SEARCHING_OP : return android.telephony.ServiceState.RIL_REG_STATE_SEARCHING; case android.hardware.radio.V1_0.RegState.REG_DENIED : return android.telephony.ServiceState.RIL_REG_STATE_DENIED; case android.hardware.radio.V1_0.RegState.UNKNOWN : return android.telephony.ServiceState.RIL_REG_STATE_UNKNOWN; case android.hardware.radio.V1_0.RegState.REG_ROAMING : return android.telephony.ServiceState.RIL_REG_STATE_ROAMING; case android.hardware.radio.V1_0.RegState.NOT_REG_MT_NOT_SEARCHING_OP_EM : return android.telephony.ServiceState.RIL_REG_STATE_NOT_REG_EMERGENCY_CALL_ENABLED; case android.hardware.radio.V1_0.RegState.NOT_REG_MT_SEARCHING_OP_EM : return android.telephony.ServiceState.RIL_REG_STATE_SEARCHING_EMERGENCY_CALL_ENABLED; case android.hardware.radio.V1_0.RegState.REG_DENIED_EM : return android.telephony.ServiceState.RIL_REG_STATE_DENIED_EMERGENCY_CALL_ENABLED; case android.hardware.radio.V1_0.RegState.UNKNOWN_EM : return android.telephony.ServiceState.RIL_REG_STATE_UNKNOWN_EMERGENCY_CALL_ENABLED; default : return android.telephony.ServiceState.REGISTRATION_STATE_NOT_REGISTERED_AND_NOT_SEARCHING; } }<END_MOD>
<START_MOD>@org.junit.Test public void validateEapTtlsUserCredentialWithMismatchFingerprint() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential(); cred.realm = "realm"; cred.userCredential = new android.net.wifi.hotspot2.pps.Credential.UserCredential(); cred.userCredential.username = "username"; cred.userCredential.password = "password"; cred.userCredential.eapType = Credential.EAP_TLS; cred.certCredential = new android.net.wifi.hotspot2.pps.Credential.CertificateCredential(); cred.certCredential.certType = "x509v3"; cred.certCredential.certSha256FingerPrint = new byte[32]; java.util.Arrays.fill(cred.certCredential.certSha256FingerPrint, ((byte) (0))); cred.caCertificate = android.net.wifi.FakeKeys.CA_CERT0; cred.clientCertificateChain = new java.security.cert.X509Certificate[]{ android.net.wifi.FakeKeys.CLIENT_CERT }; cred.clientPrivateKey = android.net.wifi.FakeKeys.RSA_KEY1; assertFalse(cred.validate()); }<END_MOD>
public void testLibTestDep() { com.android.build.gradle.model.AndroidProjectTest.ProjectData projectData = getModelForProject("libTestDep"); com.android.builder.model.AndroidProject model = projectData.model; java.util.Collection<com.android.builder.model.Variant> variants = model.getVariants(); com.android.builder.model.Variant debugVariant = com.android.build.gradle.model.AndroidProjectTest.getVariant(variants, "debug"); assertNotNull(debugVariant); java.util.Collection<com.android.builder.model.AndroidArtifact> extraAndroidArtifact = debugVariant.getExtraAndroidArtifacts(); com.android.builder.model.AndroidArtifact testArtifact = com.android.build.gradle.model.AndroidProjectTest.getAndroidArtifact(extraAndroidArtifact, com.android.build.gradle.model.ARTIFACT_ANDROID_TEST); assertNotNull(testArtifact); com.android.builder.model.Dependencies testDependencies = testArtifact.getDependencies(); java.util.Collection<java.io.File> jars = testDependencies.<START_MOD>getJavaLibraries<END_MOD>(); assertEquals(2, jars.size()); for (java.io.File f : jars) { assertTrue(((f.getName().equals("guava-11.0.2.jar")) || (f.getName().equals("jsr305-1.3.9.jar")))); } }
private void bindAndInitialize() throws android.telephony.mbms.MbmsException { android.telephony.mbms.MbmsUtils.startBinding(mContext, android.telephony.MbmsStreamingManager.MBMS_STREAMING_SERVICE_ACTION, new android.content.ServiceConnection() { @java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsStreamingService streamingService = IMbmsStreamingService.Stub.asInterface(service); int result; try { result = streamingService.initialize(mCallbackToApp, mSubscriptionId); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG,   died before initialization <START_MOD>sendErrorToApp(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); android.telephony.MbmsStreamingManager.sIsInitialized = false; <END_MOD>return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsStreamingManager.LOG_TAG,   exception during initialization <START_MOD>sendErrorToApp(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); android.telephony.MbmsStreamingManager.sIsInitialized = false; return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { sendErrorToApp(result,   returned during initialization android.telephony.MbmsStreamingManager.sIsInitialized = false; return; } <END_MOD>try { <START_MOD>streamingService.asBinder().linkToDeath(mDeathRecipient, 0); } catch (android.os.RemoteException e) { sendErrorToApp<END_MOD>(MbmsException.<START_MOD>ERROR_MIDDLEWARE_LOST,   lost<END_MOD> during initialization <START_MOD>android.telephony.MbmsStreamingManager.sIsInitialized = false;<END_MOD> return; } mService.set(streamingService); } @java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { <START_MOD>android.telephony.MbmsStreamingManager.sIsInitialized = false; <END_MOD>mService.set(null); } }); }
<START_MOD>public void testMethodEntry() { logWriter.println("testMethodEntry started"); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); long threadID = getFilteredThreadId(); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.setThreadOnlyMethodEntry(org.apache.harmony.jpda.tests.jdwp.EventModifiers.ThreadOnlyModifierTest.TEST_CLASS_NAME, threadID); checkReplyPacket(reply, "Failed to set METHOD_ENTRY with thread only modifier"); int requestID = reply.getNextValueAsInt(); assertAllDataRead(reply); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); waitForThreadEvent(JDWPConstants.EventKind.METHOD_ENTRY, requestID, threadID); reply = debuggeeWrapper.vmMirror.clearEvent(JDWPConstants.EventKind.METHOD_ENTRY, requestID); checkReplyPacket(reply, ("Failed to clear event " + requestID)); logWriter.println("testMethodEntry done"); }<END_MOD>
@com.googlecode.android_scripting.rpc.Rpc(description =   Enhanced 4G mode. public void imsSetEnhanced4gMode(@com.googlecode.android_scripting.rpc.RpcParameter(name = "enable") java.lang.Boolean enable) { com.android.ims.ImsManager.<START_MOD>setEnhanced4gLteModeSettingForSlot<END_MOD>(enable); }
public void testMergedResourcesByName() throws java.lang.Exception { com.android.ide.common.res2.ResourceMerger merger = com.android.ide.common.res2.ResourceMergerTest.getResourceMerger(); verifyResourceExists(merger, "drawable/icon", <START_MOD>"drawable-ldpi/icon"<END_MOD>, "drawable/icon2", "drawable/patch", "raw/foo", "layout/main", "layout/layout_ref", "layout/alias_replaced_by_file", "layout/file_replaced_by_alias", "drawable/color_drawable", "drawable/drawable_ref", "color/color", "string/basic_string", "string/xliff_string", "string/xliff_with_carriage_return", "string/styled_string", "style/style", "array/string_array", "attr/dimen_attr", "attr/string_attr", "attr/enum_attr", "attr/flag_attr", "attr/blah", "attr/blah2", "attr/flagAttr", "declare-styleable/declare_styleable", "dimen/dimen", <START_MOD>"dimen-sw600dp/offset"<END_MOD>, "id/item_id", "integer/integer"); }
public int sendto(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetAddress inetAddress, int port) throws <START_MOD>android.os.ErrnoException, <END_MOD>java.net.SocketException;
public java.lang.String serialize() { float duration = (timeMs) / 1000.0F; java.lang.String pydict = com.android.monkeyrunner.recorder.actions.PyDictUtilBuilder.newBuilder().addTuple("start", startx, starty).addTuple("end", endx, endy).add("duration", duration).add("steps", steps).build(); return "DRAG|" + pydict; }
<START_MOD>@java.lang.Override public boolean isPreview() { for (com.android.ide.common.repository.GradleCoordinate.RevisionComponent component : mItems) { if (component.isPreview()) { return true; } } return false; }<END_MOD>
<START_MOD>@java.lang.Override public void onRttConnectionFailure(com.android.server.telecom.Call call) { }<END_MOD>
@com.android.annotations.Nullable private com.android.builder.model.AndroidProject execute(@com.android.annotations.NonNull java.util.List<java.lang.String> arguments, boolean returnModel, @com.android.annotations.NonNull java.lang.String... tasks) { org.gradle.tooling.ProjectConnection connection = getProjectConnection(); try { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add("-i"); args.add("-u"); args.addAll(arguments); org.gradle.tooling.BuildLauncher launcher = connection.newBuild().forTasks(tasks).withArguments(args.toArray(new java.lang.String[args.size()]))<START_MOD>.setJvmArguments(com.android.build.gradle.integration.common.utils.JacocoAgent.getJvmArg())<END_MOD>; if ((stdout) != null) { launcher.setStandardOutput(stdout); } launcher.run(); if (returnModel) { return connection.getModel(com.android.builder.model.AndroidProject.class); } } finally { connection.close(); } return null; }
public void testRegisterTwiceWithSameSensor() { android.hardware.Sensor sensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER); if (sensor == null) { throw new android.hardware.cts.helpers.SensorNotSupportedException(android.hardware.Sensor.TYPE_ACCELEROMETER); } boolean result = mSensorManager.registerListener(mNullSensorEventListener, sensor, SensorManager.SENSOR_DELAY_NORMAL); assertTrue(result); result = mSensorManager.registerListener(mNullSensorEventListener, sensor, SensorManager.SENSOR_DELAY_NORMAL); assertFalse(result); <START_MOD>mSensorManager.unregisterListener(mNullSensorEventListener); <END_MOD>}
@com.android.annotations.NonNull public java.util.Map<java.lang.String, com.android.builder.model.AndroidProject> getAllModels() { <START_MOD>java.util.Map<java.lang.String, com.android.builder.model.AndroidProject> allModels = getAllModels(new com.android.build.gradle.integration.common.fixture.GetAndroidModelAction(), false); for (com.android.builder.model.AndroidProject project : allModels.values()) { if (!(project.getSyncIssues().isEmpty())) { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append( ").append(project.getName()).append(" had sync issues : for (com.android.builder.model.SyncIssue syncIssue : project.getSyncIssues()) { msg.append(syncIssue); msg.append("\n"); } fail(msg.toString()); } } <END_MOD>return <START_MOD>allModels; }<END_MOD>
private void initDevices() { mDeviceList = null; com.android.ide.eclipse.adt.internal.sdk.Sdk sdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent(); if (sdk != null) { <START_MOD>mDeviceManager = new com.android.sdklib.devices.DeviceManager(<END_MOD>com.android.ide.eclipse.adt.<START_MOD>AdtPlugin.getDefault()); mDeviceList = mDeviceManager.getDevices(sdk.getSdkLocation()<END_MOD>); } if (((mDeviceList) != null) && ((mDeviceList.size()) > 0)) { com.android.<START_MOD>sdklib.devices.Device<END_MOD> first = mDeviceList.get(0); selectDevice(first); java.util.List<com.android.<START_MOD>sdklib.devices.State<END_MOD>> <START_MOD>states<END_MOD> = first.<START_MOD>getAllStates(); selectDeviceState(states<END_MOD>.get(0)); } else { selectDevice(null); } }
<START_MOD>@org.junit.Test public void testValidConfigIsSavedOnFailureToStart() throws java.lang.Exception { when(mWifiInjector.makeWificond()).thenReturn(null); when(mWifiInjector.getWifiApConfigStore()).thenReturn(mWifiApConfigStore); android.net.wifi.WifiConfiguration config = new android.net.wifi.WifiConfiguration(); config.SSID = "ThisIsAConfig"; mWifiStateMachinePrime.enterSoftAPMode(config); mLooper.dispatchNext(); assertEquals("SoftAPModeState", mWifiStateMachinePrime.getCurrentMode()); mLooper.dispatchNext(); assertEquals("SoftAPModeState", mWifiStateMachinePrime.getCurrentMode()); verify(mWifiApConfigStore).setApConfiguration(eq(config)); }<END_MOD>
<START_MOD>private void postAdjustSuggestedStreamVolume(final int direction, final int suggestedStream, final int flags, final java.lang.String packageName, final java.lang.String TAG) { mHandler.post(new java.lang.Runnable() { @java.lang.Override public void run() { try { mAudioService.adjustSuggestedStreamVolume(direction, suggestedStream, flags, packageName, TAG); } catch (android.os.RemoteException e) { android.util.Log.e(TAG, "Error adjusting default volume.", e); } } }); }<END_MOD>
static void setDouble(java.lang.invoke.MethodHandle m, Main.ValueHolder v, double value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.<START_MOD>assertEqual<END_MOD>(exceptionThrown, expectFailure); }
<START_MOD>static boolean isAbstract(java.lang.Class<?> klass) { return ((klass.getModifiers()) & (java.lang.reflect.Modifier.ABSTRACT)) == (java.lang.reflect.Modifier.ABSTRACT); }<END_MOD>
private static synchronized java.security.Key getEncryptKey(java.lang.String algorithm) throws java.lang.Exception { java.security.Key key = libcore.javax.crypto.CipherTest.ENCRYPT_KEYS.get(algorithm); if (key != null) { return key; } algorithm = libcore.javax.crypto.CipherTest.<START_MOD>getBaseAlgorithm<END_MOD>(algorithm); if (algorithm.<START_MOD>startsWith<END_MOD>("RSA")) { java.security.KeyFactory kf = java.security.KeyFactory.getInstance("RSA"); java.security.spec.RSAPrivateKeySpec keySpec = new java.security.spec.RSAPrivateKeySpec(libcore.javax.crypto.CipherTest.RSA_2048_modulus, libcore.javax.crypto.CipherTest.RSA_2048_privateExponent); key = kf.generatePrivate(keySpec); } else { javax.crypto.KeyGenerator kg = javax.crypto.KeyGenerator.getInstance(algorithm); key = kg.generateKey(); } libcore.javax.crypto.CipherTest.ENCRYPT_KEYS.put(algorithm, key); return key; }
<START_MOD>private synchronized void init(@com.android.annotations.NonNull com.android.utils.ILogger logger) { if ((mSdkInfo) == null) { java.lang.String host; if ((com.android.SdkConstants.CURRENT_PLATFORM) == (com.android.SdkConstants.PLATFORM_DARWIN)) { host = "darwin-x86"; } else if ((com.android.SdkConstants.CURRENT_PLATFORM) == (com.android.SdkConstants.PLATFORM_LINUX)) { host = "linux"; } else { throw new java.lang.IllegalStateException("Windows is not supported for platform development"); } mSdkInfo = new com.android.builder.sdk.SdkInfo(new java.io.File(mTreeLocation, (("out/host/" + host) + "/framework/annotations.jar")), mNdkLocation, new java.io.File(mTreeLocation, (("out/host/" + host) + "/bin/adb")), new java.io.File(getHostToolsFolder(), com.android.SdkConstants.FN_ZIPALIGN)); } }<END_MOD>
<START_MOD>private void processFile(java.io.File sourceFolder, java.io.File file, com.android.builder.internal.compiler.SourceSearcher.SourceFileProcessor processor) throws java.io.IOException, java.lang.InterruptedException { if (file.isFile()) { if (checkExtension(file)) { processor.processFile(sourceFolder, file); } } else if (file.isDirectory()) { java.io.File[] children = file.listFiles(); if (children != null) { for (java.io.File child : children) { processFile(sourceFolder, child, processor); } } } }<END_MOD>
<START_MOD>@java.lang.Override @javax.annotation.Nonnull java.io.InputStream openRead(@javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.READ); java.io.File path = getNativeFile(file.getPath()); try { return new java.io.FileInputStream(path); } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.READ); throw new com.android.sched.util.ConcurrentIOException(e); } }<END_MOD>
private void loadViewServerInfoAndWindows(final com.android.ddmlib.IDevice device) { com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo viewServerInfo = com.android.hierarchyviewerlib.device.DeviceBridge.loadViewServerInfo(device); if (viewServerInfo == null) { return; } com.android.hierarchyviewerlib.device.Window[] windows = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindows(device); com.android.hierarchyviewerlib.ComponentRegistry.getDeviceSelectionModel().addDevice(device, windows); if ((viewServerInfo.protocolVersion) >= 3) { com.android.hierarchyviewerlib.device.WindowUpdater.startListenForWindowChanges(this, device); focusChanged(device); } }
<START_MOD>public void setTestOutputDir(java.io.File testOutputDir) { this.testOutputDir = testOutputDir; }<END_MOD>
<START_MOD>@org.junit.Test public void validateEapTtlsUserCredentialWithoutCaCert() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential(); cred.realm = "realm"; cred.userCredential = new android.net.wifi.hotspot2.pps.Credential.UserCredential(); cred.userCredential.username = "username"; cred.userCredential.password = "password"; cred.userCredential.eapType = Credential.EAP_TTLS; cred.userCredential.nonEapInnerMethod = "MS-CHAP"; assertFalse(cred.validate()); }<END_MOD>
<START_MOD>public void testControllerUpdate() { com.android.bluetooth.avrcp.MediaPlayerWrapper wrapper = com.android.bluetooth.avrcp.MediaPlayerWrapper.wrap(mMockController, mThread.getLooper()); org.junit.Assert.assertTrue(wrapper.isReady()); wrapper.registerCallback(mTestCbs); com.android.bluetooth.avrcp.MediaController mUpdatedController = mock(com.android.bluetooth.avrcp.MediaController.class); doReturn(mTestState).when(mUpdatedController).getPlaybackState(); mTestMetadata.putString(MediaMetadata.METADATA_KEY_TITLE, "New Title"); doReturn(mTestMetadata.build()).when(mUpdatedController).getMetadata(); doReturn(null).when(mMockController).getQueue(); wrapper.updateMediaController(mUpdatedController); verify(mUpdatedController).registerCallback(mControllerCbs.capture(), any()); com.android.bluetooth.avrcp.MediaController.Callback controllerCallbacks = mControllerCbs.getValue(); controllerCallbacks.onMetadataChanged(mTestMetadata.build()); verify(mTestCbs, never()).mediaUpdatedCallback(any()); }<END_MOD>
private void updateCarrierIdAndName(int cid, java.lang.String name) { boolean update = false; if (!(com.android.internal.telephony.CarrierIdentifier.equals(name, mCarrierName, true))) { com.android.internal.telephony.CarrierIdentifier.logd(((( from: + (mCarrierName)) +   to: + name)); mCarrierName = name; update = true; } if (cid != (mCarrierId)) { com.android.internal.telephony.CarrierIdentifier.logd(((( from: + (mCarrierId)) +   to: + cid)); mCarrierId = cid; update = true; } if (update) { mCarrierIdLocalLog.log(((( cid: + (mCarrierId)) +   name: + (mCarrierName))); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_SUBSCRIPTION_CARRIER_IDENTITY_CHANGED); intent.putExtra(TelephonyManager.EXTRA_CARRIER_ID, mCarrierId); intent.putExtra(TelephonyManager.EXTRA_CARRIER_NAME, mCarrierName); intent.putExtra(TelephonyManager.EXTRA_SUBSCRIPTION_ID, mPhone.getSubId()); mContext.sendBroadcast(intent); android.content.ContentValues cv = new android.content.ContentValues(); cv.put(<START_MOD>CarrierId.CARRIER_ID<END_MOD>, mCarrierId); cv.put(<START_MOD>CarrierId<END_MOD>.NAME, mCarrierName); mContext.getContentResolver().update(android.net.Uri.withAppendedPath(<START_MOD>CarrierId<END_MOD>.CONTENT_URI, java.lang.Integer.toString(mPhone.getSubId())), cv, null, null); } }
public void test_EVP_CipherInit_ex_Null_Failure() throws java.lang.Exception { org.apache.harmony.xnet.provider.jsse.OpenSSLCipherContext context = new org.apache.harmony.xnet.provider.jsse.OpenSSLCipherContext(org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CIPHER_CTX_new()); int evpCipher = org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_get_cipherbyname("aes-128-ecb"); try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EVP_CipherInit_ex(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, evpCipher, null, null, true); fail( context should throw NullPointerException } catch (java.lang.NullPointerException expected) { } }
<START_MOD>public boolean isValid() { return (address) != 0; }<END_MOD>
@java.lang.Override public final int initialize(final android.telephony.mbms.IMbmsStreamingManagerCallback callback, final int subscriptionId) throws android.os.RemoteException { final int uid = android.os.Binder.getCallingUid(); callback.asBinder().linkToDeath(new android.telephony.mbms.vendor.DeathRecipient() { @java.lang.Override public void binderDied() { onAppCallbackDied(uid, subscriptionId); } }, 0); return initialize(new android.telephony.mbms.<START_MOD>MbmsStreamingSessionCallback<END_MOD>() { @java.lang.Override public void onError(int errorCode, java.lang.String message) { try { callback.<START_MOD>onError<END_MOD>(errorCode, message); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } @java.lang.Override public void onStreamingServicesUpdated(java.util.List<android.telephony.mbms.StreamingServiceInfo> services) { try { callback.<START_MOD>onStreamingServicesUpdated<END_MOD>(services); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } @java.lang.Override public void onMiddlewareReady() { try { callback.<START_MOD>onMiddlewareReady<END_MOD>(); } catch (android.os.RemoteException e) { onAppCallbackDied(uid, subscriptionId); } } }, subscriptionId); }
synchronized void nAllocationRead1D(long id, int off, int mip, int count, java.lang.Object d, int sizeBytes, android.renderscript.Element.DataType dt<START_MOD>, int mSize, boolean usePadding, byte[] buffer<END_MOD>) { validate(); rsnAllocationRead1D(mContext, id, off, mip, count, d, sizeBytes, dt.mID<START_MOD>, mSize, usePadding, buffer<END_MOD>); }
@java.lang.Override public void onCreate(android.database.sqlite.SQLiteDatabase db) { db.execSQL(((((((((((((((((((((((<START_MOD>((((<END_MOD> TABLE   + (com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE)) +   INTEGER PRIMARY KEY, +   TEXT, +   TEXT, +   TEXT, +   TEXT, +   TEXT, +   TEXT, +   TEXT, +   TEXT, +   TEXT, +   TEXT, +   TEXT, +   TEXT, +   TEXT, +   INTEGER, +   TEXT, +   INTEGER, +   TEXT, +   TEXT, +   BOOLEAN, +   INTEGER<START_MOD>, +   TEXT, +   TEXT, +   TEXT, +   TEXT<END_MOD>); initDatabase(db); }
public static java.lang.String mapLibraryName(java.lang.String nickname)<START_MOD> { return ("lib" + nickname) + ".so"<END_MOD>;<START_MOD> }<END_MOD>
public native void tcdrain(java.io.FileDescriptor fd) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException;
@java.lang.Override public void getNetworkSelectionMode(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_QUERY_NETWORK_SELECTION_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getNetworkSelectionMode(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "getNetworkSelectionMode", e); } } }
<START_MOD>@java.lang.Override public void onConnectionStateChange(android.bluetooth.BluetoothGatt gatt, int status, int newState) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, ("onConnectionStateChange " + status)); if (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, ((("State Connected to mac address " + (gatt.getDevice().getAddress())) + " status ") + status)); mBluetoothGatt.discoverServices(); } else if (newState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, ((("State Disconnected from mac address " + (gatt.getDevice().getAddress())) + " status ") + status)); } else if (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTING)) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, ((("State Connecting to mac address " + (gatt.getDevice().getAddress())) + " status ") + status)); } else if (newState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTING)) { android.util.Log.d(com.android.pmc.GattClientListener.TAG, ((("State Disconnecting from mac address " + (gatt.getDevice().getAddress())) + " status ") + status)); } }<END_MOD>
@android.test.suitebuilder.annotation.SmallTest @org.junit.Test public void testRegistrationCallbackSendCurrentStateDisconnected() throws android.os.RemoteException { android.telephony.ims.stub.ImsRegistrationImplBase.Callback mCallback2 = spy(new android.telephony.ims.stub.ImsRegistrationImplBase.Callback()); com.android.ims.ImsReasonInfo info = new com.android.ims.ImsReasonInfo(com.android.ims.ImsReasonInfo.CODE_LOCAL_NETWORK_NO_LTE_COVERAGE, 0); mRegistration.onDeregistered(info); mRegBinder.addRegistrationCallback(mCallback2); verify(mCallback).onDeregistered(eq(info)); verify(mCallback2).onDeregistered(eq(info)); }
protected void t_FormatWithField(int count, java.text.Format format, java.lang.Object object, java.lang.String text, java.text.Format.Field field, int begin, int end) { java.lang.StringBuffer buffer = new java.lang.StringBuffer(); java.text.FieldPosition pos = new java.text.FieldPosition(field); format.format(object, buffer, pos); if (text == null) { assertEquals(((   + count) +   incorrect formatted text this.text, buffer.toString()); } else { assertEquals(((   + count) +   incorrect formatted text text, buffer.toString()); } <START_MOD>if ((begin != (pos.getBeginIndex())) || (end != (pos.getEndIndex()))) { <END_MOD>assertEquals(((begin <START_MOD>+ "..") + end), (((<END_MOD>pos.getBeginIndex())<START_MOD> + "..") + (<END_MOD>pos.getEndIndex())<START_MOD>)); } }<END_MOD>
<START_MOD>public java.io.BufferedReader getInputStream() throws java.io.IOException { if ((in) != null) { return in; } return in = new java.io.BufferedReader(new java.io.InputStreamReader(socketChannel.socket().getInputStream())); }<END_MOD>
<START_MOD>private void handleImportanceChange(com.android.bluetooth.gatt.ScanManager.UidImportance imp) { if (imp == null) { return; } int uid = imp.uid; int importance = imp.importance; if (importance <= (ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND_SERVICE)) { for (com.android.bluetooth.gatt.ScanClient client : mRegularScanClients) { if (((client.appUid) == uid) && ((client.passiveSettings) != null)) { client.settings = client.passiveSettings; client.passiveSettings = null; } } } else { for (com.android.bluetooth.gatt.ScanClient client : mRegularScanClients) { if ((client.appUid) == uid) { client.passiveSettings = client.settings; android.bluetooth.le.ScanSettings.Builder builder = new android.bluetooth.le.ScanSettings.Builder(); android.bluetooth.le.ScanSettings settings = client.settings; builder.setScanMode(ScanSettings.SCAN_MODE_LOW_POWER); builder.setCallbackType(settings.getCallbackType()); builder.setScanResultType(settings.getScanResultType()); builder.setReportDelay(settings.getReportDelayMillis()); builder.setNumOfMatches(settings.getNumOfMatches()); client.settings = builder.build(); } } } mScanNative.configureRegularScanParams(); }<END_MOD>
<START_MOD>public void addConnectionToConferenceController(com.android.services.telephony.TelephonyConnection connection) { if (connection.isImsConnection()) { com.android.services.telephony.Log.d(this, ("Adding IMS connection to conference controller: " + connection)); mImsConferenceController.add(connection); } else { int phoneType = connection.getCall().getPhone().getPhoneType(); if (phoneType == (android.telephony.TelephonyManager.PHONE_TYPE_GSM)) { com.android.services.telephony.Log.d(this, ("Adding GSM connection to conference controller: " + connection)); mTelephonyConferenceController.add(connection); } else if ((phoneType == (android.telephony.TelephonyManager.PHONE_TYPE_CDMA)) && (connection instanceof com.android.services.telephony.CdmaConnection)) { com.android.services.telephony.Log.d(this, ("Adding CDMA connection to conference controller: " + connection)); mCdmaConferenceController.add(((com.android.services.telephony.CdmaConnection) (connection))); } } }<END_MOD>
<START_MOD>@java.lang.Override public boolean isValidParent(@javax.annotation.CheckForNull com.android.jack.ir.ast.JNode parent) { return (parent instanceof com.android.jack.ir.ast.JStatement) || (parent instanceof com.android.jack.ir.ast.JAbstractMethodBody); }<END_MOD>
<START_MOD>@java.lang.Override public void onRttConnectionFailure(com.android.server.telecom.Call call) { notifyRttFailure(call); updateCall(call, false, true); }<END_MOD>
<START_MOD>@java.lang.Override public java.util.Collection<com.android.builder.model.SigningConfig> getSigningConfigs() { return com.google.common.collect.ImmutableList.copyOf(com.google.common.collect.Iterables.transform(model.getSigningConfigs(), new com.google.common.base.Function<com.android.build.gradle.managed.SigningConfig, com.android.builder.model.SigningConfig>() { @java.lang.Override public com.android.build.gradle.managed.SigningConfig apply(com.android.build.gradle.managed.SigningConfig signingConfig) { return new com.android.build.gradle.managed.SigningConfigAdaptor(signingConfig); } })); }<END_MOD>
<START_MOD>@org.junit.Test public void testParcelNetworkCapabilities() { final java.util.Set<android.net.UidRange> uids = new android.util.ArraySet(); uids.add(new android.net.UidRange(50, 100)); uids.add(new android.net.UidRange(3000, 4000)); final android.net.NetworkCapabilities netCap = new android.net.NetworkCapabilities().addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_INTERNET).setAllowedUids(uids).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_EIMS).addCapability(android.net.NetworkCapabilities.NET_CAPABILITY_NOT_METERED); assertEqualsThroughMarshalling(netCap); }<END_MOD>
protected java.lang.String getEFPath(int efid) { switch (efid) { case EF_SMS : case EF_CST : case EF_RUIM_SPN : <START_MOD>case EF_CSIM_LI : case EF_CSIM_MDN : case EF_CSIM_IMSIM : case EF_CSIM_CDMAHOME : case EF_CSIM_EPRL : <END_MOD>return (MF_SIM) + (DF_CDMA); } return getCommonIccEFPath(efid); }
<START_MOD>@java.lang.Override public void showPopup(com.intellij.ui.awt.RelativePoint showTarget) { if (((myJBPopup) == null) || (myJBPopup.isDisposed())) { com.google.gct.idea.elysium.UserSelector.PopupPanel popupPanel = new com.google.gct.idea.elysium.UserSelector.PopupPanel(); popupPanel.initializeContent(getText()); com.intellij.openapi.ui.popup.ComponentPopupBuilder popup = com.intellij.openapi.ui.popup.JBPopupFactory.getInstance().createComponentPopupBuilder(popupPanel, popupPanel.getInitialFocus()); myJBPopup = popup.createPopup(); } if (!(myJBPopup.isVisible())) { myJBPopup.show(showTarget); } }<END_MOD>
<START_MOD>@org.junit.Test public void testMessageFromNative_deviceConnected() { mCurrentDevice = getTestDevice(0); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectedEvent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mNativeInterface, mSystemInterface); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.STACK_EVENT, connectedEvent); when(mStateMachines.get(mCurrentDevice).getDevice()).thenReturn(mCurrentDevice); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_CONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(mCurrentDevice), mHeadsetService.getConnectedDevices()); com.android.bluetooth.hfp.HeadsetStackEvent disconnectEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(disconnectEvent); verify(mStateMachines.get(mCurrentDevice)).sendMessage(HeadsetStateMachine.STACK_EVENT, disconnectEvent); when(mStateMachines.get(mCurrentDevice).getConnectionState()).thenReturn(BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_DISCONNECTED, mHeadsetService.getConnectionState(mCurrentDevice)); org.junit.Assert.assertEquals(java.util.Collections.EMPTY_LIST, mHeadsetService.getConnectedDevices()); }<END_MOD>
private static void createGradleProperties(@com.android.annotations.NonNull java.io.File location) throws java.io.IOException { com.google.common.io.Files.write(( -XX:MaxPermSize=<START_MOD>2048<END_MOD>m + "org.gradle.daemon=true\n"), new java.io.File(location, "gradle.properties"), java.nio.charset.Charset.defaultCharset()); }
<START_MOD>private void checkSinhFloat2() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testSinhFloat2(in, out); verifyResultsSinhFloat2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testSinhFloat2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testSinhFloat2(in, out); verifyResultsSinhFloat2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testSinhFloat2: " + (e.toString()))); } }<END_MOD>
<START_MOD>public java.util.Collection<com.android.bips.discovery.DiscoveredPrinter> getSavedPrinters() { return getChildren().stream().filter(( child) -> child != (this)).flatMap(( child) -> child.getSavedPrinters().stream()).collect(java.util.stream.Collectors.toList()); }<END_MOD>
@java.lang.Override public java.lang.String getShortDescription() { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData target = getAndroidTarget(); com.android.ide.eclipse.adt.internal.editors.manifest.descriptors.AndroidManifestDescriptors manifestDescriptors = null; if (target != null) { manifestDescriptors = target.getManifestDescriptors(); } <START_MOD>java.lang.String name = getDescriptor().getUiName(); <END_MOD>if ((((manifestDescriptors != null) && ((getXmlNode()) != null)) && ((getXmlNode()) instanceof org.w3c.dom.Element)) && (getXmlNode().hasAttributes())) { com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor desc = getDescriptor(); if ((desc != (manifestDescriptors.getManifestElement())) && (desc != (manifestDescriptors.getApplicationElement()))) { org.w3c.dom.Element elem = ((org.w3c.dom.Element) (getXmlNode())); java.lang.String attr = _Element_getAttributeNS(elem, SdkConstants.NS_RESOURCES, AndroidManifestDescriptors.ANDROID_NAME_ATTR); if ((attr == null) || ((attr.length()) == 0)) { attr = _Element_getAttributeNS(elem, SdkConstants.NS_RESOURCES, AndroidManifestDescriptors.ANDROID_LABEL_ATTR); } if ((attr != null) && ((attr.length()) > 0))<START_MOD> { if ((attr.indexOf(name)) >= 0) { return attr; } else<END_MOD> { return java.lang.String.format( (%2$s) attr, <START_MOD>name); }<END_MOD> } } } return java.lang.String.format("%1$s", <START_MOD>name); }<END_MOD>
<START_MOD>public static void captureView(com.android.ddmlib.Client client, java.lang.String viewRoot, java.lang.String view, com.android.ddmlib.HandleViewDebug.CaptureViewHandler handler) throws java.io.IOException { com.android.ddmlib.HandleViewDebug.sendJdwpPacket(client, com.android.ddmlib.HandleViewDebug.CHUNK_VUCV, viewRoot, view, handler); }<END_MOD>
<START_MOD>@org.junit.Test public void testSystemPropertyAllowsStart() { setupFunctioningHardwareInterface(); when(mSystemProperties.getBoolean(eq(com.android.server.connectivity.tethering.OffloadController.OFFLOAD_ENABLED_SYSPROP_KEY), anyBoolean())).thenReturn(true); final com.android.server.connectivity.tethering.OffloadController offload = new com.android.server.connectivity.tethering.OffloadController(null, mHardware, mSystemProperties, new android.net.util.SharedLog("test")); offload.start(); final org.mockito.InOrder inOrder = inOrder(mHardware, mSystemProperties); inOrder.verify(mSystemProperties, times(1)).getBoolean(com.android.server.connectivity.tethering.OffloadController.OFFLOAD_ENABLED_SYSPROP_KEY, true); inOrder.verify(mHardware, times(1)).initOffloadConfig(); inOrder.verify(mHardware, times(1)).initOffloadControl(any(OffloadHardwareInterface.ControlCallback.class)); inOrder.verifyNoMoreInteractions(); }<END_MOD>
public int getsockoptInt(java.io.FileDescriptor fd, int level, int option) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { return os.getsockoptInt(fd, level, option); }
<START_MOD>@java.lang.Override public org.conscrypt.ct.CTLogInfo getKnownLog(byte[] logId) { return org.conscrypt.CTLogStoreImpl.KNOWN_LOGS.get(java.nio.ByteBuffer.wrap(logId)); }<END_MOD>
@java.lang.Override public void write(@javax.annotation.Nonnull com.android.sched.vfs.OutputVDir outputVDir) throws com.android.jack.<START_MOD>backend.dex.DexWritingException<END_MOD> { int dexCount = 1; com.android.jack.tools.merger.JackMerger merger = new com.android.jack.tools.merger.JackMerger(createDexFile()); com.android.sched.vfs.OutputVFile<START_MOD> outputDex; try {<END_MOD> outputDex = getOutputDex(outputVDir, (dexCount++)); java.util.List<com.android.sched.vfs.InputVFile> mainDexList = new java.util.ArrayList<com.android.sched.vfs.InputVFile>(); java.util.List<com.android.sched.vfs.InputVFile> anyDexList = new java.util.ArrayList<com.android.sched.vfs.InputVFile>(); fillDexLists(mainDexList, anyDexList); for (com.android.sched.vfs.InputVFile currentDex : mainDexList) { try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergeOverflow e) { throw new com.android.jack.<START_MOD>backend.dex.DexWritingException<END_MOD>( many classes in main dex. Index overflow while merging dex files e); } } for (com.android.sched.vfs.InputVFile currentDex : anyDexList) { try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergeOverflow e) { finishMerge(merger, outputDex); outputDex = getOutputDex(outputVDir, (dexCount++)); merger = new com.android.jack.tools.merger.JackMerger(createDexFile()); try { mergeDex(merger, currentDex); } catch (com.android.jack.tools.merger.MergeOverflow e1) { throw new java.lang.AssertionError(); } } } <START_MOD>} catch (com.android.sched.util.file.CannotCreateFileException e) { throw new com.android.jack.backend.dex.DexWritingException(e); } <END_MOD>finishMerge(merger, outputDex); }
@org.junit.Test public void test002e() throws java.lang.Exception { java.io.File jackOutput; try { jackOutput = runTest002(true, "fail"<START_MOD>, true<END_MOD>); junit.framework.Assert.fail(); } catch (com.android.jack.resource.ResourceImportConflictException e) { } }
public java.lang.String StripTelephoneNumber(java.lang.String vCard) { java.lang.String[] attr = vCard.split(java.lang.System.getProperty("line.separator")); java.lang.String Vcard = ""; for (int i = 0; i < (attr.length); i++) { if (attr[i].startsWith("TEL")) { attr[i] = attr[i].replace("(", ""); attr[i] = attr[i].replace(")", ""); attr[i] = attr[i].replace("-", ""); attr[i] = attr[i].replace(   ""); } } for (int i = 0; i < (attr.length); i++) { if (!(attr[i].<START_MOD>isEmpty())) { vCard = vCard<END_MOD>.concat(((attr[i]) + "\n")); } } if (com.android.bluetooth.pbap.BluetoothPbapVcardManager.V) android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, ( with stripped telephone no.:   + Vcard)); return Vcard; }
public static javax.net.ssl.SSLSession wrapSSLSession(org.conscrypt.<START_MOD>OpenSSLAbstractSession<END_MOD> sslSession) { if ((Build.VERSION.SDK_INT) <= 23) { return sslSession; } else { return new org.conscrypt.OpenSSLExtendedSessionImpl(sslSession); } }
<START_MOD>@java.lang.Deprecated <END_MOD>@com.android.annotations.VisibleForTesting(visibility = com.android.annotations.VisibleForTesting.Visibility.PRIVATE) protected void setTargets(@com.android.annotations.NonNull com.android.sdklib.IAndroidTarget[] targets) { assert targets != null; mTargets = targets; }
public com.android.<START_MOD>ide.common.rendering<END_MOD>.api.<START_MOD>RenderSession<END_MOD> createScene(com.android.<START_MOD>ide.common.rendering<END_MOD>.api.<START_MOD>Params<END_MOD> params) { if ((mBridge) != null) { return mBridge.<START_MOD>createSession<END_MOD>(params); } else if ((mLegacyBridge) != null) { return createLegacyScene(params); } return null; }
public void test_replaceAll() { java.util.IdentityHashMap<java.lang.String, java.lang.String> map = new java.util.IdentityHashMap<>(); java.lang.String key1 = "key1"; java.lang.String key2 = "key2"; java.lang.String key3 = "key3"; map.put(key1, "1"); map.put(key2, "2"); map.put(key3, "3"); map.replaceAll(( k, v) -> k + v); assertEquals("key11", map.get(key1)); assertEquals("key22", map.get(key2)); assertEquals("key33", map.get(key3)); assertEquals(3, map.size()); try { map.replaceAll(new java.util.function.BiFunction<java.lang.String, java.lang.String, java.lang.String>() { @java.lang.Override public java.lang.String apply(java.lang.String s, java.lang.String s2) { map.put("key4", "4"); return ""; } }); <START_MOD>fail( have thrown <END_MOD>} catch (java.util.ConcurrentModificationException expected) { } }
<START_MOD>private static void assertSSLContextDefaultConfiguration(javax.net.ssl.SSLContext sslContext) { javax.net.ssl.SSLParameters defaultParameters = sslContext.getDefaultSSLParameters(); libcore.java.security.StandardNames.assertSSLContextEnabledProtocols(sslContext.getProtocol(), defaultParameters.getProtocols()); libcore.java.security.StandardNames.assertDefaultCipherSuites(defaultParameters.getCipherSuites()); assertFalse(defaultParameters.getWantClientAuth()); assertFalse(defaultParameters.getNeedClientAuth()); javax.net.ssl.SSLParameters supportedParameters = sslContext.getSupportedSSLParameters(); libcore.java.security.StandardNames.assertSupportedCipherSuites(supportedParameters.getCipherSuites()); libcore.java.security.StandardNames.assertSupportedProtocols(supportedParameters.getProtocols()); assertFalse(supportedParameters.getWantClientAuth()); assertFalse(supportedParameters.getNeedClientAuth()); libcore.javax.net.ssl.SSLConfigurationAsserts.assertContainsAll("Unsupported enabled cipher suites", supportedParameters.getCipherSuites(), defaultParameters.getCipherSuites()); libcore.javax.net.ssl.SSLConfigurationAsserts.assertContainsAll("Unsupported enabled protocols", supportedParameters.getProtocols(), defaultParameters.getProtocols()); }<END_MOD>
<START_MOD>public static native byte[][] EC_POINT_get_affine_coordinates(int type, int groupCtx, int pointCtx);<END_MOD>
<START_MOD>public void event(android.telecom.Logging.Events.EventRecordEntry recordEntry, java.lang.String event, java.lang.String format, java.lang.Object... args) { java.lang.String msg; try { msg = ((args == null) || ((args.length) == 0)) ? format : java.lang.String.format(java.util.Locale.US, format, args); } catch (java.util.IllegalFormatException ife) { android.telecom.Log.e("Log", ife, "IllegalFormatException: formatString='%s' numArgs=%d", format, args.length); msg = format + " (An error occurred while formatting the message.)"; } event(recordEntry, event, msg); }<END_MOD>
<START_MOD>org.eclipse.core.resources.IMarker createMarkerFromSearchMatch(org.eclipse.core.resources.IFile file, org.eclipse.jdt.core.search.SearchMatch match) { java.util.HashMap<java.lang.String, java.lang.Object> map = new java.util.HashMap<java.lang.String, java.lang.Object>(); map.put(IMarker.CHAR_START, new java.lang.Integer(match.getOffset())); map.put(IMarker.CHAR_END, new java.lang.Integer(((match.getOffset()) + (match.getLength())))); org.eclipse.core.resources.IMarker marker = null; try { marker = file.createMarker(IMarker.TEXT); marker.setAttributes(map); } catch (org.eclipse.core.runtime.CoreException e) { e.printStackTrace(); } return marker; }<END_MOD>
<START_MOD>@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.LongSuite.class, timeout = 1) @org.junit.Test public void testRunner_LongSuite_WithTimeout() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().forTestClass(vogar.target.junit3.LongTest.class).failure("test", "java.util.concurrent.TimeoutException\n").aborted(); }<END_MOD>
<START_MOD>@org.junit.Test public void test_readAllLine$Path$Charset() throws java.io.IOException { junit.framework.TestCase.assertTrue(java.nio.file.Files.exists(filesSetup.getDataFilePath())); libcore.java.nio.file.FilesSetup.writeToFile(filesSetup.getDataFilePath(), ("\n" + (libcore.java.nio.file.FilesSetup.TEST_FILE_DATA_2)), java.nio.file.StandardOpenOption.APPEND); java.util.List<java.lang.String> out = java.nio.file.Files.readAllLines(filesSetup.getDataFilePath(), java.nio.charset.Charset.forName("UTF-8")); assertEquals(2, out.size()); assertEquals(libcore.java.nio.file.FilesSetup.TEST_FILE_DATA, out.get(0)); assertEquals(libcore.java.nio.file.FilesSetup.TEST_FILE_DATA_2, out.get(1)); out = java.nio.file.Files.readAllLines(filesSetup.getDataFilePath(), java.nio.charset.Charset.forName("UTF-16")); assertEquals(1, out.size()); assertEquals("桥汬漊瑥獴", out.get(0)); filesSetup.reset(); try { java.nio.file.Files.readAllLines(filesSetup.getTestPath(), java.nio.charset.Charset.forName("UTF-8")); fail(); } catch (java.nio.file.NoSuchFileException expected) { } }<END_MOD>
<START_MOD>private static java.nio.charset.Charset getConsoleEncoding() { java.lang.String consoleCharsetName = null; try { java.lang.reflect.Method encodingMethod = java.io.Console.class.getDeclaredMethod("encoding"); encodingMethod.setAccessible(true); consoleCharsetName = ((java.lang.String) (encodingMethod.invoke(null))); } catch (java.lang.ReflectiveOperationException ignored) { } if (consoleCharsetName == null) { java.nio.charset.Charset defaultCharset = java.nio.charset.Charset.defaultCharset(); java.lang.System.err.println((("warning: Failed to obtain console character encoding name. Assuming " + defaultCharset) + " instead")); return defaultCharset; } else { try { return java.nio.charset.Charset.forName(consoleCharsetName); } catch (java.lang.IllegalArgumentException e) { java.nio.charset.Charset defaultCharset = java.nio.charset.Charset.defaultCharset(); java.lang.System.err.println((((("warning: Console uses unknown character encoding: " + consoleCharsetName) + ". Assuming ") + defaultCharset) + " instead")); return defaultCharset; } } }<END_MOD>
@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testBaseIntersectionCast() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_39).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
@com.android.annotations.<START_MOD>NonNull<END_MOD> @java.lang.Override public java.<START_MOD>util.Collection<java.<END_MOD>io.File<START_MOD>><END_MOD> <START_MOD>getJarJarRuleFiles<END_MOD>() { return buildType.<START_MOD>getJarJarRuleFiles<END_MOD>(); }
<START_MOD>@com.android.annotations.NonNull public com.android.ide.common.repository.ResourceVisibilityLookup get(@com.android.annotations.NonNull com.android.builder.model.AndroidLibrary library) { com.android.ide.common.repository.ResourceVisibilityLookup visibility = mLibraryMap.get(library); if (visibility == null) { visibility = new com.android.ide.common.repository.ResourceVisibilityLookup.LibraryResourceVisibility(library); java.util.List<? extends com.android.builder.model.AndroidLibrary> dependsOn = library.getLibraryDependencies(); if (!(dependsOn.isEmpty())) { java.util.List<com.android.ide.common.repository.ResourceVisibilityLookup> list = com.google.common.collect.Lists.newArrayListWithExpectedSize(((dependsOn.size()) + 1)); list.add(visibility); for (com.android.builder.model.AndroidLibrary d : dependsOn) { com.android.ide.common.repository.ResourceVisibilityLookup v = get(d); if (!(v.isEmpty())) { list.add(v); } } if (!(list.isEmpty())) { visibility = new com.android.ide.common.repository.ResourceVisibilityLookup.MultipleLibraryResourceVisibility(list); } } mLibraryMap.put(library, visibility); } return visibility; }<END_MOD>
public int enableFirmwareRoaming(int state) { kilroy(); synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_NOT_STARTED; kilroy(); try { kilroy(); byte val; switch (state) { case WifiNative.DISABLE_FIRMWARE_ROAMING : val = android.hardware.wifi.V1_0.StaRoamingState.DISABLED; break; case WifiNative.ENABLE_FIRMWARE_ROAMING : val = android.hardware.wifi.V1_0.StaRoamingState.ENABLED; break; default : <START_MOD>mLog<END_MOD>.e(( invalid argument   + state)); return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_INVALID_ARGS; } kilroy(); android.hardware.wifi.V1_0.WifiStatus status = mIWifiStaIface.setRoamingState(val); <START_MOD>mLog<END_MOD>.d(( returned   + (status.code))); return status.code; } catch (android.os.RemoteException e) { kilroy(); handleRemoteException(e); return android.hardware.wifi.V1_0.WifiStatusCode.ERROR_UNKNOWN; } } }
<START_MOD>public byte[] getIntAsArray(int value) { byte[] array = ((java.nio.ByteBuffer) (mIntBuffer.rewind())).putInt(value).array(); return array; }<END_MOD>
public void addU32(long v) { if (shouldThunk()) { mN.addU32(v); return; } if ((v < 0) || (v > 4294967295L)) { android.util.Log.e("rs", ((   + v) +   ) throw new java.lang.IllegalArgumentException( value out of range for type } align(4); mData[((mPos)++)] = ((byte) (v & 255)); mData[((mPos)++)] = ((byte) ((v >> 8) & 255)); mData[((mPos)++)] = ((byte) ((v >> 16) & 255)); mData[((mPos)++)] = ((byte) ((v >> 24) & 255)); }
<START_MOD>@java.lang.Override public synchronized void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) throws java.lang.Exception { if ((((method.getEnclosingType().isExternal()) || (method.isNative())) || (method.isAbstract())) || (!(filter.accept(this.getClass(), method)))) { return; } com.android.jack.transformations.request.TransformationRequest tr = new com.android.jack.transformations.request.TransformationRequest(method); com.android.jack.transformations.ast.inner.MethodCallDispatchAdjuster.MethodCallAdjuster visitor = new com.android.jack.transformations.ast.inner.MethodCallDispatchAdjuster.MethodCallAdjuster(tr, method.getEnclosingType()); visitor.accept(method); if (method.containsMarker(com.android.jack.transformations.ast.inner.NeedsRethising.class)) { com.android.jack.transformations.ast.inner.MethodCallDispatchAdjuster.ThisAccessAdjuster visitor2 = new com.android.jack.transformations.ast.inner.MethodCallDispatchAdjuster.ThisAccessAdjuster(tr, method); visitor2.accept(method); method.removeMarker(com.android.jack.transformations.ast.inner.NeedsRethising.class); } tr.commit(); }<END_MOD>
private void getPixelValuesFromOutputBuffer(java.nio.ByteBuffer buffer, int x, int y, com.android.cts.videoperf.VideoEncoderDecoderTest.YUVValue result) { result.mY = buffer.get(((y * (<START_MOD>mBufferStride<END_MOD>)) + x)); if (isDstSemiPlanar()) { int index = (((<START_MOD>mBufferStride) * (mBufferStrideHeight)) + ((y / 2) * (mBufferStride<END_MOD>))) + ((x / 2) * 2); result.mU = buffer.get(index); result.mV = buffer.get((index + 1)); } else { int vOffset = ((<START_MOD>mBufferStride) * (mBufferStrideHeight<END_MOD>)) / 4; int index = (((<START_MOD>mBufferStride) * (mBufferStrideHeight)) + (((y / 2) * (mBufferStride<END_MOD>)) / 2)) + (x / 2); result.mU = buffer.get(index); result.mV = buffer.get((index + vOffset)); } }
public <START_MOD>java.util.List<<END_MOD>com.android.ide.common.rendering.api.ViewInfo<START_MOD>><END_MOD> getRootView() { return null; }
final void get(long[] dst, int dstOffset, int longCount) { <START_MOD>checkCanAccess<END_MOD>(); int byteCount = checkGetBounds(SizeOf.LONG, dst.length, dstOffset, longCount); this.block.peekLongArray(((offset) + (position)), dst, dstOffset, longCount, order.needsSwap); position += byteCount; }
void putBigEndianTwosComplement(byte[] a) { this.makeValid(); java.math.NativeBN.twosComp2bn(a, a.length, this.<START_MOD>nativePtr<END_MOD>); }
private javax.crypto.KeyAgreementSpi getSpi() { <START_MOD>try { <END_MOD>return getSpi(null); }<START_MOD> catch (java.security.InvalidKeyException e) { throw new java.lang.IllegalStateException( code (InvalidKeyException thrown for non-specified key) } }<END_MOD>
<START_MOD>java.lang.String getZoneInfosString() { return zoneInfos.stream().map(( z) -> (((z.getId()) + "(") + (z.getPriority())) + ")").collect(java.util.stream.Collectors.toList()).toString(); }<END_MOD>
static float <START_MOD>$opt$noinline$CharToFloat<END_MOD>(char a) { return ((float) (a)); }
public void testConnectOverProxy_implicit_http_fails() throws java.lang.Exception { byte[] fileContents =   1234567890 java.net.URL fileUrl = addFileEntry(libcore.java.net.FtpURLConnectionTest.FILE_PATH, fileContents); java.net.ProxySelector defaultProxySelector = java.net.ProxySelector.getDefault(); try { libcore.java.net.FtpURLConnectionTest.CountingProxy countingProxy = libcore.java.net.FtpURLConnectionTest.CountingProxy.start(); java.net.Proxy proxy = countingProxy.asProxy(); libcore.java.net.FtpURLConnectionTest.SingleProxySelector proxySelector = new libcore.java.net.FtpURLConnectionTest.SingleProxySelector(proxy); java.net.ProxySelector.setDefault(proxySelector); java.net.URLConnection connection = fileUrl.openConnection(); java.io.InputStream inputStream = connection.getInputStream(); java.io.IOException e = proxySelector.getLastException(); assertEquals( connections over HTTP proxy not supported e.getMessage()); libcore.java.net.FtpURLConnectionTest.assertContents(fileContents, inputStream); int numConnections = countingProxy.shutdownAndGetConnectionCount(); assertEquals(0, numConnections); } <START_MOD>finally { java.net.ProxySelector.setDefault(defaultProxySelector); <END_MOD>} }
<START_MOD>@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testInvokePolymorphic006_2() throws java.lang.Exception { com.android.jack.test.toolchain.JackApiToolchainBase toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchainBase.class); java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); toolchain.setOutputStream(out); toolchain.setErrorStream(errOut); toolchain.addToClasspath(toolchain.getDefaultBootClasspath()); toolchain.addProperty(Options.ANDROID_MIN_API_LEVEL.getName(), java.lang.String.valueOf(com.android.jack.java7.InvokePolymorphicTests.O_API_LEVEL)); toolchain.srcToExe(com.android.jack.test.toolchain.AbstractTestTools.createTempDir(), false, com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir("com.android.jack.java7.invokepolymorphic.test006")); junit.framework.Assert.assertTrue(errOut.toString().isEmpty()); }<END_MOD>
@java.lang.Override public com.android.builder.core.DefaultBuildType create(java.lang.String name) { return instantiator.newInstance(com.android.build.gradle.internal.dsl.BuildTypeDsl.class, name, project, instantiator); }
protected void receive_oversize_java_net_DatagramPacket()<START_MOD> throws java.lang.Exception<END_MOD> { final int[] ports = tests.support.Support_PortManager.getNextPortsForUDP(2); final int portNumber = ports[0]; class TestDGRcvOver implements java.lang.Runnable { public void run() { java.net.InetAddress localHost = null; try { localHost = java.net.InetAddress.getLocalHost(); java.lang.Thread.sleep(1000); java.net.DatagramSocket sds = new java.net.DatagramSocket(ports[1]); java.net.DatagramPacket rdp = new java.net.DatagramPacket("0123456789".getBytes(), 10, localHost, portNumber); sds.send(rdp); sds.close(); } catch (java.lang.Exception e) { <START_MOD>throw new java.lang.RuntimeException(<END_MOD>e); } } } try { new java.lang.Thread(new TestDGRcvOver(), "DGSenderOver").start(); ds = new java.net.DatagramSocket(portNumber); ds.setSoTimeout(6000); byte[] rbuf = new byte[5]; java.net.DatagramPacket rdp = new java.net.DatagramPacket(rbuf, rbuf.length); ds.receive(rdp); ds.close(); assertTrue(( oversize failed to return correct data:   + (new java.lang.String(rbuf, 0, 5))), new java.lang.String(rbuf, 0, 5).equals("01234")); } catch (java.lang.Exception e) { java.lang.System.err.println(( during send test:   + e)); e.printStackTrace(); fail(((((   + portNumber) +   Exception:   + e) +   during oversize send test } finally { ds.close(); } }
<START_MOD>private synchronized android.security.cts.OpenSSLEarlyCCSTest.TlsRecord getFirstRecordReceivedAfterCCSWasInjected() { return mFirstRecordReceivedAfterCCSWasInjected; }<END_MOD>
public native void setenv(java.lang.String name, java.lang.String value, boolean overwrite) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
@android.test.suitebuilder.annotation.SmallTest<START_MOD> @org.junit.Test<END_MOD> public void testInitializationWithEarpieceAndBluetoothNoHeadset() { android.telecom.CallAudioState expectedState = new android.telecom.CallAudioState(false, android.telecom.CallAudioState.ROUTE_BLUETOOTH, (((android.telecom.CallAudioState.ROUTE_EARPIECE) | (android.telecom.CallAudioState.ROUTE_SPEAKER)) | (android.telecom.CallAudioState.ROUTE_BLUETOOTH))); initializationTestHelper(expectedState, true); }
@org.junit.Test public void testDefaultMethodReference() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_32).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
private java.lang.String getNameFromInputVFile(@javax.annotation.Nonnull com.android.jack.library.InputLibrary jackLibrary, @javax.annotation.Nonnull com.android.sched.vfs.InputVFile jppFile) { com.android.sched.util.location.Location loc = jppFile.getLocation(); java.lang.String name; if (loc instanceof com.android.sched.util.location.ZipLocation) { name = ((com.android.sched.util.location.ZipLocation) (jppFile.getLocation())).getEntryName(); if ((jackLibrary.getMajorVersion()) != 0) { name = name.substring(((FileType.JPP.<START_MOD>buildDirVPath(null<END_MOD>).split().iterator().next().length()) + 1)); } else { name = name.substring("JACK-INF/".length()); } } else { name = ((com.android.sched.util.location.FileLocation) (jppFile.getLocation())).getPath(); if ((jackLibrary.getMajorVersion()) != 0) { java.lang.String prefix = (FileType.JPP.<START_MOD>buildDirVPath(null<END_MOD>).split().iterator().next()) + '/'; name = name.substring(((name.lastIndexOf(prefix)) + (prefix.length()))); } else { name = name.substring("JACK-INF/".length()); } } return name; }
public static java.nio.channels.SocketChannel createPassThroughConnection(java.net.InetSocketAddress adbSockAddr, com.android.ddmlib.Device device, int pid) throws<START_MOD> com.android.ddmlib.TimeoutException,<END_MOD> java.io.IOException { java.nio.channels.SocketChannel adbChan = java.nio.channels.SocketChannel.open(adbSockAddr); try { adbChan.socket().setTcpNoDelay(true); adbChan.configureBlocking(false); com.android.ddmlib.AdbHelper.setDevice(adbChan, device); byte[] req = com.android.ddmlib.AdbHelper.createJdwpForwardRequest(pid); <START_MOD>com.android.ddmlib.AdbHelper.write(adbChan, req); com.android.ddmlib.AdbHelper.AdbResponse resp = com.android.ddmlib.AdbHelper.readAdbResponse(adbChan, false); <END_MOD>if (<START_MOD>!(<END_MOD>resp.okay))<START_MOD> {<END_MOD> throw new java.io.IOException(( request rejected:   + (resp.message))); <START_MOD>} <END_MOD>adbChan.configureBlocking(true); } <START_MOD>finally<END_MOD> { adbChan.close(); } return adbChan; }
private <START_MOD>com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState networkForRequest(NetworkRequest request) { <END_MOD>java.lang.<START_MOD>String requestedIface = null; android.net.NetworkSpecifier specifier = request.networkCapabilities.getNetworkSpecifier(); if (specifier instanceof android.net.StringNetworkSpecifier) { requestedIface = ((android.net.StringNetworkSpecifier) (specifier)).specifier; } com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState network = null; if (!(android.text.TextUtils.isEmpty(requestedIface))) { com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState n = mTrackingInterfaces.get(requestedIface); network = (n.statisified(request.networkCapabilities)) ? n : null; } else { for (com.android.server.ethernet.EthernetNetworkFactory.NetworkInterfaceState n : mTrackingInterfaces.values()) { if (n.statisified(request.networkCapabilities)) { network = n; break; } } } return network; }<END_MOD>
@org.junit.Test public void aget_wide() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(AGET_WIDE).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), <START_MOD>"jack/jack-tests/src/com/android/jack/DxTestCase.java"<END_MOD>)).compileAndRunTest(); }
<START_MOD>private void checkPownFloat4Int4() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inY, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testPownFloat4Int4(inX, out); verifyResultsPownFloat4Int4(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testPownFloat4Int4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testPownFloat4Int4(inX, out); verifyResultsPownFloat4Int4(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testPownFloat4Int4: " + (e.toString()))); } }<END_MOD>
@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) throws java.lang.Exception { com.android.sched.vfs.<START_MOD>OutputVFile vFile<END_MOD> = <START_MOD>outputLibrary.getJayceOutputVFile(type); try { java.io.OutputStream out = new java.io.BufferedOutputStream(vFile.openWrite()); try { com.android.jack.jayce.JayceWriter writer = new com.android.jack.jayce.JayceWriter(out); writer.write(type, (   + (com.android.jack.Jack.getVersionString()))); if (<END_MOD>com.android.sched.<START_MOD>util.config.ThreadConfig.get(JackIncremental.GENERATE_COMPILER_STATE).booleanValue()) { assert vFile instanceof com.android.sched.<END_MOD>vfs.<START_MOD>DirectFile; com.android.jack.experimental.incremental.CompilerState csm = com.android.jack.experimental.incremental.JackIncremental.getCompilerState(); assert csm != null; csm.addMappingBetweenJavaFileAndTypeName(type.getSourceInfo().getFileName(), com.android.jack.experimental.incremental.JackIncremental.getFormatter().getName(type)); } } finally { out.close(); } } catch (java.io.IOException e) { throw new com.android.jack.JackFileException((( not write Jack file to output   +<END_MOD> vFile<START_MOD>) + "'")<END_MOD>, e)<START_MOD>; } }<END_MOD>
@java.lang.Override protected void registerTabs() { addFailuresTab(); if (!(getResults().getPackages().isEmpty())) { addTab("Packages", new org.gradle.internal.ErroringAction<<START_MOD>com.android.build.gradle.internal.test.report<END_MOD>.SimpleHtmlWriter>() { @java.lang.Override protected void doExecute(<START_MOD>com.android.build.gradle.internal.test.report<END_MOD>.SimpleHtmlWriter writer) throws java.io.IOException { renderPackages(writer); } }); } addTab("Classes", new org.gradle.internal.ErroringAction<<START_MOD>com.android.build.gradle.internal.test.report<END_MOD>.SimpleHtmlWriter>() { @java.lang.Override public void doExecute(<START_MOD>com.android.build.gradle.internal.test.report<END_MOD>.SimpleHtmlWriter htmlWriter) throws java.io.IOException { renderClasses(htmlWriter); } }); }
<START_MOD>public void timeRelativeDateTimeFormatter_getRelativeTimeSpanString(int reps) throws java.lang.Exception { java.util.Locale l = java.util.Locale.US; java.util.TimeZone utc = java.util.TimeZone.getTimeZone("UTC"); int flags = 0; for (int rep = 0; rep < reps; ++rep) { getRelativeTimeSpanString(l, utc, 0L, 0L, 0L, flags); } }<END_MOD>
<START_MOD>@java.lang.Override public void valueChanged(javax.swing.event.ListSelectionEvent e) { com.google.gct.login.CredentialedUser user = ((com.google.gct.login.CredentialedUser) (myJList.getSelectedValue())); if ((user != null) && (!(user instanceof com.google.gct.idea.elysium.UserSelector.PopupPanel.EmptyMarker))) { this.setText(user.getEmail()); javax.swing.SwingUtilities.invokeLater(new java.lang.Runnable() { @java.lang.Override public void run() { com.google.gct.idea.elysium.UserSelector.this.hidePopup(); } }); } }<END_MOD>
<START_MOD>public static void shutdown() { com.android.ide.common.internal.ExecutorSingleton.checkExecutor(); com.android.ide.common.internal.ExecutorSingleton.sExecutorService.shutdown(); com.android.ide.common.internal.ExecutorSingleton.sExecutorService = com.android.ide.common.internal.ExecutorSingleton.create(); }<END_MOD>
<START_MOD>public void dump(java.io.FileDescriptor fd, java.io.PrintWriter pw, java.lang.String[] args) { pw.println(" T3T Identifier cache entries: "); for (java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo> entry : mT3tIdentifiersCache.entrySet()) { pw.println((" NFCID2: " + (entry.getKey()))); pw.println(" NfcFServiceInfo: "); entry.getValue().dump(fd, pw, args); } pw.println(""); mRoutingManager.dump(fd, pw, args); pw.println(""); }<END_MOD>
<START_MOD>public void testIsParentalControlsEnabled() { mManager.isParentalControlsEnabled(); }<END_MOD>
<START_MOD>@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVFile file) { return file.getWrappedFiles().get(0).getLocation(); }<END_MOD>
public void test_SSL_do_handshake_NULL_SSL() throws java.lang.Exception { try { org.apache.harmony.xnet.provider.jsse.NativeCrypto.SSL_do_handshake(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL, null, null, 0, false, null); fail(); } catch (java.lang.NullPointerException expected) { } <START_MOD>org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertNoErrors(); <END_MOD>}
<START_MOD>public<END_MOD> static native java.lang.String <START_MOD>getISO3Language<END_MOD>(java.lang.String <START_MOD>languageCode<END_MOD>);
<START_MOD>public void testJustAuth() throws java.lang.Exception { android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, auth, null, false, 1, true); }<END_MOD>
private void postCreate() { if ((mUpdaterData) != null) { mTextSdkOsPath.setText(mUpdaterData.getOsSdkRoot()); } mTreeViewer.setContentProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgContentProvider()); mColumnApi.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnApi))); mColumnName.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnName))); mColumnStatus.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnStatus))); mColumnRevision.setLabelProvider(new org.eclipse.jface.viewers.TreeColumnViewerLabelProvider(new com.android.sdkuilib.internal.repository.PackagesPage.PkgCellLabelProvider(mColumnRevision))); org.eclipse.swt.graphics.FontData fontData = mTree.getFont().getFontData()[0]; fontData.setStyle(SWT.ITALIC); mTreeFontItalic = new org.eclipse.swt.graphics.Font(mTree.getDisplay(), fontData); mColorUpdate = new org.eclipse.swt.graphics.Color(mTree.getDisplay(), 255, 255, 204); mColorNew = new org.eclipse.swt.graphics.Color(mTree.getDisplay(), 255, 238, 204); mTree.addDisposeListener(new org.eclipse.swt.events.DisposeListener() { public void widgetDisposed(org.eclipse.swt.events.DisposeEvent e) { mTreeFontItalic.dispose(); mColorUpdate.dispose(); mColorNew.dispose(); mTreeFontItalic = null; mColorUpdate = null; mColorNew = null; } }); <START_MOD>mStatusButton.setImage(getImage("status_ok_16.png")); <END_MOD>}
<START_MOD>public void testEofInEntityValue() throws java.lang.Exception { assertParseFailure("<!ENTITY aaa \"unterminated"); }<END_MOD>
public void testExecuteQuery() throws java.sql.SQLException { java.lang.String[] queries2 = new java.lang.String[]{   zoo set name='Masha', family='cat' where id=;   into hutch (id, animal_id, address) values (1, ?, 1   into hutch (id, animal_id, address) values (?, 1,   5 }; for (int i = 0; i < (queries2.length); i++) { java.sql.PreparedStatement ps = null; try { ps = conn.prepareStatement(queries2[i]); ps.executeQuery(); fail(( is not thrown for query:   + (queries2[i]))); } catch (java.sql.SQLException sqle) { } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } } <START_MOD>try { java.sql.PreparedStatement ps = null; <END_MOD>java.lang.String query =   <START_MOD>view address as select address from hutch where animal_id=? ps = conn.prepareStatement(query); ps.executeQuery(); ps = conn.prepareStatement( <END_MOD>* from <START_MOD>address ps.executeQuery(); fail(( is not thrown for query:   + query)); } catch (java.lang.Exception sqle) { } java.lang.String query =   * from <END_MOD>zoo where id = ? java.sql.PreparedStatement ps = null; try { ps = conn.prepareStatement(query); ps.setInt(1, 1); java.sql.ResultSet rs = ps.executeQuery(); rs.next(); assertEquals(1, rs.getInt(1)); assertEquals("Kesha", rs.getString(2)); assertEquals("parrot", rs.getString(3)); } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } try { ps = conn.prepareStatement(query); ps.setInt(1, 5); java.sql.ResultSet rs = ps.executeQuery(); assertNotNull(rs); assertFalse(rs.next()); } finally { try { ps.close(); } catch (java.lang.Exception ee) { } } }
protected void openDevice(java.lang.String cameraId) throws java.lang.Exception { mCamera = android.hardware.camera2.cts.CameraTestUtils.CameraTestUtils.openCamera(mCameraManager, cameraId, mCameraListener, mHandler); mCollector.setCameraId(cameraId); mStaticInfo = new android.hardware.camera2.cts.helpers.StaticMetadata(mCameraManager.getCameraCharacteristics(cameraId), android.hardware.camera2.cts.helpers.StaticMetadata.CheckLevel.ASSERT, null); mOrderedPreviewSizes = getSupportedPreviewSizes(cameraId, mCameraManager, <START_MOD>getDisplaySize()<END_MOD>); mOrderedVideoSizes = getSupportedVideoSizes(cameraId, mCameraManager, android.hardware.camera2.cts.testcases.PREVIEW_SIZE_BOUND); mOrderedStillSizes = getSupportedStillSizes(cameraId, mCameraManager, null); mMinPreviewFrameDurationMap = mStaticInfo.getAvailableMinFrameDurationsForFormatChecked(ImageFormat.YUV_420_888); }
<START_MOD>public void testExp10() { checkExp10Float(); checkExp10Float2(); checkExp10Float3(); checkExp10Float4(); }<END_MOD>
<START_MOD>private static java.lang.String getFailureMessage(int input) { java.lang.StringBuilder newString = new java.lang.StringBuilder(); newString.append((("Test input :" + input) + "\n")); for (int i = 0; i < (com.android.server.wifi.util.WifiPermissionsUtilTest.MAX_PERMISSIONS); i++) { if (com.android.server.wifi.util.WifiPermissionsUtilTest.getValAtOffset(input, i)) { newString.append(((com.android.server.wifi.util.WifiPermissionsUtilTest.sPermissions[i]) + ":\tTrue ")); } else { newString.append(((com.android.server.wifi.util.WifiPermissionsUtilTest.sPermissions[i]) + ":\tFalse ")); } newString.append("\n"); } return newString.toString(); }<END_MOD>
<START_MOD>@com.googlecode.android_scripting.rpc.Rpc(description = "Resets TelephonyManager settings to factory default.") public void imsFactoryReset() { mImsManager.factoryResetSlot(); }<END_MOD>
<START_MOD>public java.util.List<com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction> callGetContextMenu(com.android.ide.eclipse.adt.internal.editors.layout.uimodel.UiViewElementNode element) { com.android.ide.eclipse.adt.editors.layout.gscripts.IViewRule rule = loadRule(element); if (rule != null) { try { return rule.getContextMenu(); } catch (java.lang.Exception e) { logError("%s.getContextMenu() failed: %s", rule.getClass().getSimpleName(), e.toString()); } } return null; }<END_MOD>
<START_MOD>public void setManifest(java.io.File manifest) { mManifest = manifest; }<END_MOD>
public void link(java.lang.String oldPath, java.lang.String newPath) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
boolean connectAudio() { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM,   BLUETOOTH permission if (!(mStateMachine.isConnected())) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG,   profile not connected return false; } if (<START_MOD>(<END_MOD>mStateMachine.<START_MOD>getAudioState<END_MOD>(<START_MOD>)) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED<END_MOD>)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, <START_MOD>(<END_MOD> audio is <START_MOD>not<END_MOD> <START_MOD>idle, current state   + (mStateMachine.getAudioState())));<END_MOD> return false; } mStateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO); return true; }
<START_MOD>@java.lang.Override public void applyTransportModeTransform(android.net.IpSecManager ism, int direction, android.net.IpSecTransform transform) throws java.io.IOException { ism.applyTransportModeTransform(mFd, direction, transform); }<END_MOD>
@java.lang.Override public void onManagerConnected(int status) { android.util.Log.v(com.android.cts.verifier.sensors.helpers.OpenCVLibrary.TAG, ( Loading status:   + status)); switch (status) { case org.opencv.android.LoaderCallbackInterface.SUCCESS : { com.android.cts.verifier.sensors.helpers.OpenCVLibrary.mLoaded = true; } break; default : { super.onManagerConnected(status); } break; } <START_MOD>done.countDown(); <END_MOD>}
<START_MOD>public boolean isOlderOrEqualsThan(int release, int subRelease) { return ((this.releaseCode) > release) || (((this.releaseCode) == release) && ((this.subReleaseCode) >= subRelease)); }<END_MOD>
<START_MOD>public java.util.Locale.Builder setScript(java.lang.String script) { if ((script == null) || (script.isEmpty())) { this.script = ""; return this; } final java.lang.String lowercaseScript = script.toLowerCase(java.util.Locale.ROOT); if (!(java.util.Locale.isValidBcp47Alpha(lowercaseScript, 4, 4))) { throw new java.util.IllformedLocaleException(("Invalid script: " + script)); } this.script = java.util.Locale.titleCaseAsciiWord(lowercaseScript); return this; }<END_MOD>
android.net.IpSecConfig buildIpSecConfig() throws java.lang.Exception { android.net.IpSecManager ipSecManager = new android.net.IpSecManager(mIpSecService); when(mMockNetd.ipSecAllocateSpi(anyInt(), anyInt(), anyString(), anyString(), anyInt())).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI).thenReturn(com.android.server.IpSecServiceTest.DROID_SPI2); android.net.IpSecAlgorithm encryptAlgo = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, com.android.server.IpSecServiceTest.CRYPT_KEY); android.net.IpSecAlgorithm authAlgo = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, com.android.server.IpSecServiceTest.AUTH_KEY, ((com.android.server.IpSecServiceTest.AUTH_KEY.length) * 8)); java.net.InetAddress localAddr = java.net.InetAddress.getByAddress(new byte[]{ 127, 0, 0, 1 }); <START_MOD>java.net.InetAddress remoteAddr = java.net.InetAddress.getByAddress(new byte[]{ 8, 8, 4, 4 }); <END_MOD>android.net.IpSecManager.SecurityParameterIndex outSpi = ipSecManager.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, localAddr); android.net.IpSecManager.SecurityParameterIndex inSpi = ipSecManager.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_IN, localAddr); android.net.IpSecConfig <START_MOD>config = new android.net.IpSecConfig(); config.setSpiResourceId(IpSecTransform.DIRECTION_IN, inSpi.getResourceId()); config.setSpiResourceId<END_MOD>(IpSecTransform.DIRECTION_OUT, outSpi<START_MOD>.getResourceId()); config.setEncryption(IpSecTransform.DIRECTION_OUT, encryptAlgo); config.setAuthentication(IpSecTransform.DIRECTION_OUT, authAlgo); config.setEncryption<END_MOD>(IpSecTransform.DIRECTION_IN, encryptAlgo)<START_MOD>; config<END_MOD>.setAuthentication(IpSecTransform.<START_MOD>DIRECTION_IN<END_MOD>, authAlgo)<START_MOD>; config.setRemoteAddress(remoteAddr<END_MOD>); return <START_MOD>config<END_MOD>; }
<START_MOD>public final void addReferenceClass(@com.android.annotations.NonNull com.android.tools.perflib.heap.ClassObj referenceClass) { mReferenceClasses.add(referenceClass); }<END_MOD>
private static boolean shouldOutputApkEntry(com.android.<START_MOD>apksig<END_MOD>.core.ApkSignerEngine apkSigner, java.util.jar.JarFile inFile, java.util.jar.JarEntry inEntry, byte[] tmpbuf) throws java.io.IOException { if (apkSigner == null) { return true; } com.android.<START_MOD>apksig<END_MOD>.core.ApkSignerEngine.InputJarEntryInstructions instructions = apkSigner.inputJarEntry(inEntry.getName()); com.android.<START_MOD>apksig<END_MOD>.core.ApkSignerEngine.InspectJarEntryRequest inspectEntryRequest = instructions.getInspectJarEntryRequest(); if (inspectEntryRequest != null) { com.android.signapk.SignApk.provideJarEntry(inFile, inEntry, inspectEntryRequest, tmpbuf); } switch (instructions.getOutputPolicy()) { case OUTPUT : return true; case SKIP : case OUTPUT_BY_ENGINE : return false; default : throw new java.lang.RuntimeException(( output policy:   + (instructions.getOutputPolicy()))); } }
public static java.lang.String escapeResourceString(java.lang.String s) { int n = s.length(); if (n == 0) { return ""; } java.lang.StringBuilder sb = new java.lang.StringBuilder(((s.length()) * 2)); boolean hasSpace = ((s.charAt(0)) ==     || ((s.charAt((n - 1))) ==     if (hasSpace) { sb.append('"'); } else if (((s.charAt(0)) == '@') || ((s.charAt(0)) == '?')) { sb.append('\\'); } for (int i = 0; i < n; ++i) { char c = s.charAt(i); switch (c) { case '\'' : if (!hasSpace) { sb.append('\\'); } sb.append(<START_MOD>'\\'); break; case '"' : case '\\' : sb.append('\\'); sb.append(<END_MOD>c); break; case <START_MOD>'<' : sb.append(com.android.SdkConstants.LT_ENTITY); break; case '&' : sb.append(com.android.SdkConstants.AMP_ENTITY); break; case '\n' : sb.append("\\n"); break; case '\t' : sb.append("\\t"); break; default : sb.append(c); break; } } if (hasSpace) { sb.append(<END_MOD>'"'); } return sb.toString(); }
public android.net.NetworkStats readNetworkStatsDetail(int limitUid, java.lang.String[] limitIfaces, int limitTag, android.net.NetworkStats lastStats) throws java.io.IOException { <START_MOD>return<END_MOD> readNetworkStatsDetailInternal(limitUid, limitIfaces, limitTag, lastStats); }
<START_MOD>public void testNullRepeatedFields() { com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano message = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano(); message.repeatedInt32 = null; com.google.protobuf.nano.MessageNano.toByteArray(message); assertNotNull(message.toString()); message = new com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano(); message.repeatedNestedEnum = null; com.google.protobuf.nano.MessageNano.toByteArray(message); assertNotNull(message.toString()); }<END_MOD>
public void msync(long address, long byteCount, int flags) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { os.msync(address, byteCount, flags); }
@javax.annotation.Nonnull @java.lang.Override public com.android.jack.ir.ast.JMethodId getMethodId(@javax.annotation.Nonnull java.lang.String name, @javax.annotation.Nonnull java.util.List<? extends com.android.jack.ir.ast.JType> argsType, @javax.annotation.Nonnull com.android.jack.ir.ast.MethodKind kind) throws com.android.jack.lookup.JMethodLookupException { assert !((name.contains("(")) || (name.contains(")"))); loader.ensureMethods(this); for (com.android.jack.ir.ast.JMethod method : methods) { com.android.jack.ir.ast.JMethodId id = method.getMethodId(); if (<START_MOD>(<END_MOD>id.equals(name, argsType)) <START_MOD>&& ((id.getKind()) == kind)) <END_MOD>{ return id; } } for (com.android.jack.ir.ast.JInterface jType : getImplements()) { try { return jType.getMethodId(name, argsType, kind); } catch (com.android.jack.lookup.JMethodLookupException e) { } } com.android.jack.ir.ast.JClass superClass = getSuperClass(); if (superClass != null) { try { return superClass.getMethodId(name, argsType, kind); } catch (com.android.jack.lookup.JMethodLookupException e) { } } throw new com.android.jack.lookup.JMethodIdLookupException(this, name, argsType); }
<START_MOD>private void verifyResultsAbsInt(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { int[] arrayInValue = new int[(INPUTSIZE) * 1]; inValue.copyTo(arrayInValue); int[] arrayOut = new int[(INPUTSIZE) * 1]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 1; j++) { android.renderscript.cts.TestAbs.ArgumentsIntUint args = new android.renderscript.cts.TestAbs.ArgumentsIntUint(); args.inValue = arrayInValue[i]; android.renderscript.cts.CoreMathVerifier.computeAbs(args); int actualOut = arrayOut[((i * 1) + j)]; int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; float ulpf; ulpf = (java.lang.Math.ulp(args.out)) * ulf; assertEquals(((((((((((((((((("Incorrect output for checkAbsInt" + (relaxed ? "_relaxed" : "")) + " @[") + i) + ", ") + j) + "] with ulf:") + ulf) + ".\n") + "Input inValue:") + (args.inValue)) + "\n") + "Expected output out:") + (args.out)) + "\n") + "Actual output out:") + actualOut) + "\n"), args.out, actualOut, ulpf); } } }<END_MOD>
@java.lang.SuppressWarnings("resource") @javax.annotation.Nonnull @java.lang.Override java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVFile file, boolean append) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.WRITE); VFSStatCategory.DIR_WRITE.getCounterStat(getTracer(), infoString).incValue(); java.io.File path = getNativeFile(file.getPath()); try { java.io.OutputStream os = new java.io.FileOutputStream(path, append); assert (os = trackOpenedStream(os, file)) != null; return os; } catch (java.io.FileNotFoundException e) { com.android.sched.<START_MOD>vfs.DirectFS.handleFileNotFound(e, <END_MOD>path, file.getLocation()); throw new <START_MOD>java.lang.AssertionError<END_MOD>(e); } }
public java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo> computeUpdates(java.util.Collection<com.android.sdklib.internal.repository.Archive> selectedArchives, com.android.sdklib.internal.repository.SdkSources sources, java.lang.Package[] localPkgs, boolean includeObsoletes) { java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo> archives = new java.util.ArrayList<com.android.sdkuilib.internal.repository.ArchiveInfo>(); java.util.ArrayList<java.lang.Package> remotePkgs = new java.util.ArrayList<java.lang.Package>(); com.android.sdklib.internal.repository.SdkSource[] remoteSources = sources.getAllSources(); com.android.sdkuilib.internal.repository.ArchiveInfo[] localArchives = createLocalArchives(localPkgs); if (selectedArchives == null) { selectedArchives = findUpdates(localArchives, remotePkgs, remoteSources, includeObsoletes); } for (com.android.sdklib.internal.repository.Archive a : selectedArchives) { insertArchive(a, archives, selectedArchives, remotePkgs, remoteSources, localArchives, false); } <START_MOD>fixMissingLocalDependencies(archives, selectedArchives, remotePkgs, remoteSources, localArchives); <END_MOD>return archives; }
@java.lang.Override public final void accept(com.android.tools.perflib.heap.Visitor visitor) { com.android.tools.perflib.heap.Instance instance = getReferredInstance(); if (instance != null) { <START_MOD>visitor.visit(<END_MOD>instance); } }
<START_MOD>@java.lang.Override public java.io.File getOutputDir() { return outputDir; }<END_MOD>
private void persistBluetoothSetting(int value) {<START_MOD> long callingIdentity = android.os.Binder.clearCallingIdentity();<END_MOD> Settings.Global.putInt(mContext.getContentResolver(), Settings.Global.BLUETOOTH_ON, value); <START_MOD>android.os.Binder.restoreCallingIdentity(callingIdentity); <END_MOD>}
public void <START_MOD>requestEuiccChallenge<END_MOD>(java.lang.String cardId<START_MOD>, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor<END_MOD>, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().getEuiccChallenge(mContext.getOpPackageName(), cardId, new com.android.internal.telephony.euicc.IGetEuiccChallengeCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] challenge) { <START_MOD>executor.execute(() -> <END_MOD>callback.onComplete(resultCode, challenge)<START_MOD>)<END_MOD>; } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG,   calling getEuiccChallenge e); throw e.rethrowFromSystemServer(); } }
public long <START_MOD>getExclusiveThreadTime(java.lang.String thread<END_MOD>) { <START_MOD>com.android.tools.perflib.vmtrace.MethodInfo.MethodStats<END_MOD> <START_MOD>stats<END_MOD> <START_MOD>= mPerThreadStats.get(thread); return stats != null ? stats.exclusiveThreadTime : 0<END_MOD>; }
@java.lang.Override public java.io.File call() throws java.lang.Exception { return <START_MOD>((com.android.build.gradle.internal.variant.ApkVariantOutputData) (<END_MOD>scope.<START_MOD>getVariantOutputData())).packageApplicationTask.getOutputFile<END_MOD>(); }
<START_MOD>@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { sendRemoteRttUpgradeRequest(); }<END_MOD>
<START_MOD>@java.lang.Override public android.icu.impl.UResource.TableSink getOrCreateTableSink(android.icu.impl.UResource.Key key, int initialSize) { if (key.contentEquals(android.icu.text.DateIntervalInfo.INTERVAL_FORMATS_KEY)) { return skeletonSink; } return null; }<END_MOD>
private void updateHoverRegion(int x, int y) { x = imageXCoordinate(x); y = imageYCoordinate(y); com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo verticalUpdateRegion = findVerticalPatch(x, y); com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo horizontalUpdateRegion = findHorizontalPatch(x, y); computeHighlightRegions(verticalUpdateRegion, horizontalUpdateRegion); <START_MOD>com.android.draw9patch.ui.ImageViewer.UpdateRegionInfo editRegion = pickUpdateRegion(x, y, verticalUpdateRegion, horizontalUpdateRegion); if (editRegion != null) { <END_MOD>java.awt.Cursor c = getCursor(x, y, <START_MOD>editRegion<END_MOD>); setCursor(c); }<START_MOD> else { setCursor(java.awt.Cursor.getDefaultCursor()); } }<END_MOD>
<START_MOD>private void checkLgammaFloat4Int4() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); try { android.renderscript.Allocation outY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32_4(mRS), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocOutY(outY); script.forEach_testLgammaFloat4Int4(inX, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLgammaFloat4Int4: " + (e.toString()))); } try { android.renderscript.Allocation outY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32_4(mRS), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocOutY(outY); scriptRelaxed.forEach_testLgammaFloat4Int4(inX, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLgammaFloat4Int4: " + (e.toString()))); } }<END_MOD>
public void testProguardFile(java.lang.Object proguardFile) { <START_MOD>getTestProguardFiles()<END_MOD>.add(project.file(proguardFile)); }
public java.io.FileDescriptor dup(java.io.FileDescriptor oldFd) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException { return os.dup(oldFd); }
<START_MOD>public void testDecodeUint32() { final java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (103)), ((byte) (69)), ((byte) (35)), ((byte) (1)), ((byte) (239)), ((byte) (205)), ((byte) (171)), ((byte) (16)) }); final long[] expected = new long[]{ 0, 19088743, 279694831 }; com.android.tools.rpclib.binary.Decoder d = new com.android.tools.rpclib.binary.Decoder(input); try { for (long u32 : expected) { assertEquals(u32, ((d.uint32()) & -1)); } } catch (java.io.IOException ex) { assertNull(ex); } }<END_MOD>
<START_MOD>@javax.annotation.Nonnull private java.util.Set<java.lang.String> getModifiedFileNames(@javax.annotation.Nonnull java.util.Set<java.lang.String> javaFileNames) { assert (fileDependencies) != null; java.util.Set<java.lang.String> modifiedFileNames = new java.util.HashSet<java.lang.String>(); for (java.lang.String javaFileName : fileDependencies.getCompiledJavaFiles()) { if (javaFileNames.contains(javaFileName)) { java.io.File javaFile = new java.io.File(javaFileName); for (java.lang.String typeName : fileDependencies.getTypeNames(javaFileName)) { java.io.File dexFile = getDexFile(typeName); if ((!(dexFile.exists())) || ((javaFile.lastModified()) > (dexFile.lastModified()))) { modifiedFileNames.add(javaFileName); } } } } return modifiedFileNames; }<END_MOD>
@java.lang.Override public void setSmscAddress(java.lang.String address, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_SET_SMSC_ADDRESS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) +   address =   + address)); } try { radioProxy.setSmscAddress(rr.mSerial, convertNullToEmptyString(address)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "setSmscAddress", e); } } }
<START_MOD>@com.android.annotations.NonNull @java.lang.Override public java.util.List<java.lang.String> getProjectDependenciesPath() { return null; }<END_MOD>
<START_MOD>private void enforceWifiDisplayPermission(int uid) { mContext.enforcePermission(android.Manifest.permission.CONFIGURE_WIFI_DISPLAY, uid, (-1), "WifiP2pService"); }<END_MOD>
<START_MOD>@java.lang.Override protected void initConnected(java.net.InetAddress remoteAddress, int remotePort) { super.initConnected(remoteAddress, remotePort); isNativeConnected = true; connectedAddress = remoteAddress; connectedPort = remotePort; }<END_MOD>
public void test_X509_NAME_hashes() { javax.security.auth.x500.X500Principal name = new javax.security.auth.x500.X500Principal("CN=localhost"); assertEquals((-1372642656), org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_NAME_hash(name)); assertEquals((-1626170662), org.apache.harmony.xnet.provider.jsse.NativeCrypto.X509_NAME_hash_old(name)); <START_MOD>org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertNoErrors(); <END_MOD>}
public static android.support.v8.renderscript.ScriptIntrinsicConvolve3x3 create(android.support.v8.renderscript.RenderScript rs, android.support.v8.renderscript.Element e) { float[] f = new float[]{ 0, 0, 0, 0, 1, 0, 0, 0,   }; if (<START_MOD>(((((((!(e.isCompatible(android.support.v8.renderscript.Element.U8(rs)))) && (!(e.isCompatible(android.support.v8.renderscript.Element.U8_2(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.U8_3(rs))))) && (<END_MOD>!(e.isCompatible(android.support.v8.renderscript.Element.U8_4(rs))))<START_MOD>) && (!(e.isCompatible(android.support.v8.renderscript.Element.F32(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.F32_2(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.F32_3(rs))))) && (!(e.isCompatible(android.support.v8.renderscript.Element.F32_4(rs)))))<END_MOD> { throw new android.support.v8.renderscript.RSIllegalArgumentException( element type. } long id<START_MOD>; boolean mUseIncSupp<END_MOD> = <START_MOD>false; if (true || ((rs.isUseNative()) && ((android.os.Build.VERSION.SDK_INT) < 21))) { android.util.Log.v( RS Test   Intrinsic mUseIncSupp = true; id = rs.nIncScriptIntrinsicCreate(1, e.getID(rs)); android.util.Log.v( RS Test   Intrinsic Completed } else { id = <END_MOD>rs.nScriptIntrinsicCreate(1, e.getID(rs)); <START_MOD>} <END_MOD>android.support.v8.renderscript.ScriptIntrinsicConvolve3x3 si = new android.support.v8.renderscript.ScriptIntrinsicConvolve3x3(id, rs); si.<START_MOD>setIncSupp(mUseIncSupp); si.<END_MOD>setCoefficients(f); return si; }
public void bindResponse(int ind_id, boolean ind_status) { <START_MOD>final android.bluetooth.IBluetoothHeadset service = mService; <END_MOD>if ((<START_MOD>service<END_MOD> != null) && (isEnabled())) { try { <START_MOD>service<END_MOD>.bindResponse(ind_id, ind_status); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, e.toString()); } } else { android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG,   not attached to service if (android.bluetooth.BluetoothHeadset.DBG) android.util.Log.d(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); } }
<START_MOD>public void computeCallStats(com.android.tools.perflib.vmtrace.Call c, com.android.tools.perflib.vmtrace.Call parent, com.android.tools.perflib.vmtrace.ThreadInfo thread) { long methodId = c.getMethodId(); com.android.tools.perflib.vmtrace.MethodProfileData.Builder builder = getProfileDataBuilder(methodId); builder.addCallTime(c, parent, thread); builder.incrementInvocationCount(c, thread); for (com.android.tools.perflib.vmtrace.Call callee : c.getCallees()) { computeCallStats(callee, c, thread); } }<END_MOD>
<START_MOD>@java.lang.Override public void createFiles() throws java.io.IOException { java.io.File root = getLocation(); java.io.File src = new java.io.File(root, "src"); java.io.File main = new java.io.File(src, "main"); main.mkdirs(); java.io.File manifest = new java.io.File(main, "AndroidManifest.xml"); com.google.common.io.Files.write(((("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" + ("<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n" + " package=\"com")) + (getPath().replace(':', '.'))) + "\" />\n"), manifest, Charsets.UTF_8); }<END_MOD>
public void seteuid(int euid) throws <START_MOD>libcore<END_MOD>.<START_MOD>io<END_MOD>.ErrnoException;
private<START_MOD> synchronized<END_MOD> boolean <START_MOD>checkConnection<END_MOD>(<START_MOD>) { if ((mSocketChannel) == null<END_MOD>) { java.net.InetSocketAddress socketAddr; try { java.net.InetAddress hostAddr = java.net.InetAddress.getByName(com.android.ddmlib.EmulatorConsole.HOST); socketAddr = new java.net.InetSocketAddress(hostAddr, mPort); mSocketChannel = java.nio.channels.SocketChannel.open(socketAddr); } catch (java.io.IOException <START_MOD>e<END_MOD>) {<START_MOD> com.android.ddmlib.Log.w(com.android.ddmlib.EmulatorConsole.LOG_TAG, ( to start Emulator console for   + (java.lang.Integer.toString(mPort))));<END_MOD> return false; } <START_MOD>} return ping<END_MOD>(); }
<START_MOD>public void changeEventCacheSize(int newSize) { java.util.concurrent.LinkedBlockingQueue<android.telecom.Logging.Events.EventRecord> oldEventLog = mEventRecords; mEventRecords = new java.util.concurrent.LinkedBlockingQueue<>(newSize); mCallEventRecordMap.clear(); oldEventLog.forEach(this::addCallEventRecord); }<END_MOD>
protected <T extends com.android.jack.ir.ast.JReferenceType> T getNonArrayType(@javax.annotation.Nonnull java.lang.String signature, @javax.annotation.Nonnull com.android.jack.lookup.JLookup.Adapter<T> adapter) throws com.android.jack.ir.ast.MissingJTypeLookupException { java.util.Map<java.lang.String, T> cache = adapter.getCache(); T type; synchronized(cache) { type = cache.get(signature); if (type == null) { <START_MOD>assert com.android.jack.util.NamingTools.isClassDescriptor(signature) : ( signature   + signature) + "'"; <END_MOD>type = findClassOrInterface(signature, adapter); cache.put(signature, type); } } return type; }
<START_MOD>public static void computeLdexp(android.renderscript.cts.TestLdexp.ArgumentsFloatIntFloat args) { args.ulf = 4; args.ulfRelaxed = 12; args.out = ((float) ((args.inX) * (java.lang.Math.pow(2.0, args.inY)))); }<END_MOD>
@java.lang.Override public boolean checkForCondition() { android.support.test.uiautomator.UiObject androidCling = mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.ANDROID_WELCOME_CLING_RES)); try { if (androidCling.exists()) { androidCling.click(); return true; } else { return false; } } catch (android.support.test.uiautomator.UiObjectNotFoundException e) { junit.framework.Assert.fail(e.getStackTrace().toString()); return false; } }
<START_MOD>private static java.lang.String getFragmentInfo(android.security.cts.OpenSSLEarlyCCSTest.TlsRecord record, boolean mayBeEncrypted) { java.lang.StringBuilder result = new java.lang.StringBuilder(); if (mayBeEncrypted) { result.append("encrypted?"); } else { switch (record.protocol) { case android.security.cts.OpenSSLEarlyCCSTest.TlsProtocols.ALERT : result.append(((("level: " + ((record.fragment.length) > 0 ? java.lang.String.valueOf(((record.fragment[0]) & 255)) : "n/a")) + ", description: ") + ((record.fragment.length) > 1 ? java.lang.String.valueOf(((record.fragment[1]) & 255)) : "n/a"))); break; case android.security.cts.OpenSSLEarlyCCSTest.TlsProtocols.APPLICATION_DATA : break; case android.security.cts.OpenSSLEarlyCCSTest.TlsProtocols.CHANGE_CIPHER_SPEC : result.append(("payload: " + ((record.fragment.length) > 0 ? java.lang.String.valueOf(((record.fragment[0]) & 255)) : "n/a"))); break; case android.security.cts.OpenSSLEarlyCCSTest.TlsProtocols.HANDSHAKE : result.append(("type: " + ((record.fragment.length) > 0 ? java.lang.String.valueOf(((record.fragment[0]) & 255)) : "n/a"))); break; } } result.append(", ").append(("fragment length: " + (record.fragment.length))); return result.toString(); }<END_MOD>
<START_MOD>static long $opt$DivZero(long a) { return a / 0; }<END_MOD>
private static java.util.jar.JarFile retrieve(final java.net.URL url, final sun.net.www.protocol.jar.URLJarFile.URLJarFileCloseController closeController) throws java.io.IOException { java.util.jar.JarFile result = null; try (final java.io.InputStream in = url.openConnection().getInputStream()) { result = java.security.AccessController.doPrivileged(new java.security.PrivilegedExceptionAction<java.util.jar.JarFile>() { public java.util.jar.JarFile run() throws java.io.IOException { java.nio.file.Path tmpFile = java.nio.file.Files.createTempFile("jar_cache", null); try { java.nio.file.Files.copy(in, tmpFile, java.nio.file.StandardCopyOption.REPLACE_EXISTING); java.util.jar.JarFile jarFile = new sun.net.www.protocol.jar.URLJarFile(tmpFile.toFile(), closeController); tmpFile.toFile().deleteOnExit(); return jarFile; } catch (java.lang.Throwable thr) { try { java.nio.file.Files.delete(tmpFile); } catch (java.io.IOException ioe) { thr.addSuppressed(ioe); } throw thr; } } }); } catch (java.security.PrivilegedActionException pae) { throw ((java.io.IOException) (pae.getException())); } return result; }
<START_MOD>public static com.android.apksig.util.DataSource generateApkSigningBlockCDOffset(com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource eocd) throws java.io.IOException { long centralDirOffsetForDigesting = beforeCentralDir.size(); java.nio.ByteBuffer eocdBuf = java.nio.ByteBuffer.allocate(((int) (eocd.size()))); eocdBuf.order(java.nio.ByteOrder.LITTLE_ENDIAN); eocd.copyTo(0, ((int) (eocd.size())), eocdBuf); eocdBuf.flip(); com.android.apksig.internal.zip.ZipUtils.setZipEocdCentralDirectoryOffset(eocdBuf, centralDirOffsetForDigesting); return com.android.apksig.util.DataSources.asDataSource(eocdBuf); }<END_MOD>
public boolean enable(java.lang.String packageName) throws android.os.RemoteException { final int callingUid = android.os.Binder.getCallingUid(); final boolean callerSystem = (android.os.UserHandle.getAppId(callingUid)) == (SYSTEM_UID); if (isBluetoothDisallowed()) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG,   not enabling - bluetooth disallowed } return false; } if (!callerSystem) { if (!(checkIfCallerIsForegroundUser())) { android.util.Slog.w(com.android.server.BluetoothManagerService.TAG,   not allowed for non-active and non system user return false; } mContext.enforceCallingOrSelfPermission(com.android.server.BluetoothManagerService.BLUETOOTH_ADMIN_PERM,   BLUETOOTH ADMIN permission if (((!(isEnabled())) && (mPermissionReviewRequired)) && (startConsentUiIfNeeded(packageName, callingUid, BluetoothAdapter.ACTION_REQUEST_ENABLE))) { return false; } } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ((((((("enable(" + packageName) +   mBluetooth = + (mBluetooth)) +   mBinding =   + (mBinding)) +   mState =   + (android.bluetooth.BluetoothAdapter.nameForState(mState)))); } synchronized(mReceiver) { mQuietEnableExternal = false; mEnableExternal = true; sendEnableMsg(false, <START_MOD>com.android.server.BluetoothManagerService.REASON_PACKAGE, <END_MOD>packageName); } if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG,   returning } return true; }
private java.util.List<java.security.cert.X509Certificate> checkTrusted(java.security.cert.X509Certificate[] chain, java.lang.String authType, javax.net.ssl.SSLSession session, javax.net.ssl.SSLParameters parameters, boolean clientAuth) throws java.security.cert.CertificateException { <START_MOD>byte[] ocspData = null;<END_MOD> java.lang.String hostname = <START_MOD>null; if <END_MOD>(session != null) <START_MOD>{ hostname =<END_MOD> session.getPeerHost()<START_MOD>; ocspData = getOcspDataFromSession(session); }<END_MOD> if ((session != null) && (parameters != null)) { java.lang.String identificationAlgorithm = parameters.getEndpointIdentificationAlgorithm(); if ((identificationAlgorithm != null) && ("HTTPS".equals(identificationAlgorithm.toUpperCase(java.util.Locale.US)))) { javax.net.ssl.HostnameVerifier verifier = javax.net.ssl.HttpsURLConnection.getDefaultHostnameVerifier(); if (!(verifier.verify(hostname, session))) { throw new java.security.cert.CertificateException( subjectAltNames on the certificate match } } } return checkTrusted(chain, <START_MOD>ocspData, <END_MOD>authType, hostname, clientAuth); }
public java.lang.String getMethodName(long classID, long methodID) { org.apache.harmony.jpda.tests.framework.jdwp.<START_MOD>VmMirror.MethodInfo[]<END_MOD> <START_MOD>methodInfos<END_MOD> = <START_MOD>getMethodsInfo(classID);<END_MOD> <START_MOD>for (<END_MOD>org.apache.harmony.jpda.tests.framework.jdwp.<START_MOD>VmMirror<END_MOD>.<START_MOD>MethodInfo<END_MOD> <START_MOD>methodInfo<END_MOD> <START_MOD>:<END_MOD> <START_MOD>methodInfos<END_MOD>) { if (<START_MOD>methodID<END_MOD> == <START_MOD>(methodInfo.getMethodID())<END_MOD>) { <START_MOD>return<END_MOD> <START_MOD>methodInfo.getName()<END_MOD>; } } return <START_MOD>"unknown"<END_MOD>; }
<START_MOD>public dalvik.system.EmulatedStackFrame.StackFrameAccessor attach(dalvik.system.EmulatedStackFrame stackFrame) { frame = stackFrame; frameBuf = java.nio.ByteBuffer.wrap(frame.stackFrame).order(java.nio.ByteOrder.LITTLE_ENDIAN); numArgs = frame.type.ptypes().length; return this; }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; }<END_MOD>
void silenceRingers() { for (com.android.server.telecom.Call call : mRingingCalls) { call.silence(); } mRingingCalls.clear(); mRinger.stopRinging(); mRinger.stopCallWaiting(); <START_MOD>if (mCallsManager.hasRingingCall()) { return; } <END_MOD>mCallAudioModeStateMachine.sendMessageWithArgs(CallAudioModeStateMachine.NO_MORE_RINGING_CALLS, makeArgsForModeStateMachine()); }
<START_MOD>@javax.annotation.Nonnull protected static java.lang.Object instantiateConstructorWithParameters(@javax.annotation.Nonnull java.lang.String className, @javax.annotation.Nonnull java.lang.Class<?>[] parameterTypes, @javax.annotation.Nonnull java.lang.Object[] parameterInstances, @javax.annotation.Nonnull java.lang.String version) throws com.android.jack.jayce.JayceVersionException { java.lang.Object constructorInstance = null; try { java.lang.Class<?> jayceReaderClass = java.lang.Class.forName(className); java.lang.reflect.Constructor<?> constructor = jayceReaderClass.getConstructor(parameterTypes); constructorInstance = constructor.newInstance(parameterInstances); } catch (java.lang.SecurityException e) { throw new java.lang.AssertionError("Security issue with Jayce stream"); } catch (java.lang.IllegalArgumentException e) { throw new java.lang.AssertionError(("Illegal argument for Jayce processor for version " + version)); } catch (java.lang.ClassNotFoundException e) { throw new com.android.jack.jayce.JayceVersionException((("Jayce version " + version) + " not supported")); } catch (java.lang.NoSuchMethodException e) { throw new java.lang.AssertionError(("Jayce processing method not found for version " + version)); } catch (java.lang.InstantiationException e) { throw new java.lang.AssertionError(("Problem instantiating Jayce processor for version " + version)); } catch (java.lang.IllegalAccessException e) { throw new java.lang.AssertionError(("Problem accessing Jayce processor for version " + version)); } catch (java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException(e.getCause()); } return constructorInstance; }<END_MOD>
public synchronized int bindServer() { java.net.InetSocketAddress serverAddress = getSyncServerAddress(); try { logWriter.println(( Binding socket on:   + serverAddress)); <START_MOD>int syncServerPort = serverAddress.getPort(); java.net.InetAddress syncServerInetAddress = serverAddress.getAddress(); <END_MOD>serverSocket = new java.net.ServerSocket(<START_MOD>syncServerPort<END_MOD>, 0, <START_MOD>syncServerInetAddress); if (syncServerPort == 0) { int localSyncPort = serverSocket.getLocalPort(); if (isSyncPortConflictingWithTransportAddress(localSyncPort)) { logWriter.println(( Retrying, as sync port is already used in transport address:   + localSyncPort)); java.net.ServerSocket newServerSocket = new java.net.ServerSocket(0, 0, syncServerInetAddress); serverSocket.close(); serverSocket = newServerSocket; } }<END_MOD> int localPort = serverSocket.getLocalPort(); logWriter.println((((( Bound socket on:   + serverAddress) +   (local port:   + localPort) + ")")); return localPort; } catch (java.io.IOException e) { throw new org.apache.harmony.jpda.tests.framework.TestErrorException( Exception in binding for socket sync connection e); } }
@org.junit.Test public void sub_float() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(SUB_FLOAT).setSrcDirName("jm").setRefDirName(".").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), <START_MOD>"jack/jack-tests/src/com/android/jack/DxTestCase.java"<END_MOD>)).compileAndRunTest(); }
public void test_equals() { java.text.NumberFormat nf1 = java.text.NumberFormat.getInstance(); java.text.NumberFormat nf2 = java.text.NumberFormat.getInstance(); assertTrue( are not equal nf1.equals(nf2)); assertTrue( same Objects are not equal nf1.equals(nf1)); nf2.setMaximumIntegerDigits(100); assertFalse( NumberFormat are equal nf1.equals(nf2)); nf2.setMaximumIntegerDigits(nf1.getMaximumIntegerDigits()); <START_MOD>assertFalse<END_MOD>( same Objects are equal nf1.equals(nf2)); nf1 = java.text.NumberFormat.getIntegerInstance(); nf2 = java.text.NumberFormat.getIntegerInstance(java.util.Locale.CHINA); assertFalse( NumberFormat are equal nf1.equals(nf2)); assertFalse( is equal null nf1.equals(null)); }
private static native boolean native_invert(<START_MOD>long<END_MOD> native_object, <START_MOD>long<END_MOD> inverse);
<START_MOD>void generateForegroundT3tIdentifiersCacheLocked() { if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, "generateForegroundT3tIdentifiersCacheLocked"); mForegroundT3tIdentifiersCache.clear(); if ((mPreferredForegroundService) != null) { for (android.nfc.cardemulation.NfcFServiceInfo service : mServices) { if (mPreferredForegroundService.equals(service.getComponent())) { mForegroundT3tIdentifiersCache.put(service.getNfcid2(), service); break; } } } if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, ("mForegroundT3tIdentifiersCache: size=" + (mForegroundT3tIdentifiersCache.size()))); for (java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo> entry : mForegroundT3tIdentifiersCache.entrySet()) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, (((" " + (entry.getKey())) + "/") + (entry.getValue().getComponent().toString()))); } } updateRoutingLocked(); }<END_MOD>
<START_MOD>private void assertDomainZeroOrN(java.lang.String domain, java.lang.String... executables) throws java.io.FileNotFoundException { java.util.List<android.security.cts.SELinuxDomainTest.ProcessDetails> procs = android.security.cts.SELinuxDomainTest.ProcessDetails.getProcessMap().get(domain); if (procs == null) { return; } java.util.Set<java.lang.String> execList = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList(executables)); for (android.security.cts.SELinuxDomainTest.ProcessDetails p : procs) { java.lang.String msg = (((((("Expected one of \"" + execList) + "\" in SELinux domain \"") + domain) + "\"") + " Found: \"") + p) + "\""; assertTrue(msg, execList.contains(p.procTitle)); } }<END_MOD>
<START_MOD>private void updateInterfaceState(java.lang.String iface, boolean up) { boolean modified = mFactory.updateInterfaceLinkState(iface, up); if (modified) { boolean restricted = isRestrictedInterface(iface); int n = mListeners.beginBroadcast(); for (int i = 0; i < n; i++) { try { if (restricted) { com.android.server.ethernet.EthernetTracker.ListenerInfo listenerInfo = ((com.android.server.ethernet.EthernetTracker.ListenerInfo) (mListeners.getBroadcastCookie(i))); if (!(listenerInfo.canUseRestrictedNetworks)) continue; } mListeners.getBroadcastItem(i).onAvailabilityChanged(iface, up); } catch (android.os.RemoteException e) { } } mListeners.finishBroadcast(); } }<END_MOD>
public com.android.ide.<START_MOD>common.platformData<END_MOD>.AttrsXmlParser preload() { org.w3c.dom.Document doc = getDocument(); if (doc == null) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.WARNING,   to find %1$s mOsAttrsXmlPath); return this; } org.w3c.dom.Node res = doc.getFirstChild(); while (((res != null) && ((res.getNodeType()) != (org.w3c.dom.Node.ELEMENT_NODE))) && (!(res.getNodeName().equals("resources")))) { res = res.getNextSibling(); } if (res == null) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.WARNING,   to find a <resources> node in %1$s mOsAttrsXmlPath); return this; } parseResources(res); return this; }
<START_MOD>@java.lang.Override protected void handleOuterFieldRead(@javax.annotation.Nonnull com.android.jack.transformations.request.TransformationRequest tr, @javax.annotation.Nonnull com.android.jack.ir.ast.JFieldRef fieldRef, @javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface accessorClass) { com.android.jack.ir.ast.JField field = fieldRef.getFieldId().getField(); assert field != null; com.android.jack.transformations.ast.inner.GetterMarker marker = accessorClass.getMarker(com.android.jack.transformations.ast.inner.GetterMarker.class); if (marker == null) { marker = new com.android.jack.transformations.ast.inner.GetterMarker(); accessorClass.addMarker(marker); } com.android.jack.ir.ast.JMethod getter = marker.getOrCreateGetter(field, (<END_MOD>(com.android.jack.ir.ast.JDefinedClass<START_MOD>) (accessorClass))); com.android.jack.ir.ast.JMethodId getterId = getter.getMethodId(); com.android.jack.ir.ast.JMethodCall getterCall = new com.android.jack.ir.ast.JMethodCall(fieldRef.getSourceInfo(), null, accessorClass, getterId, getter.getType(), getterId.canBeVirtual()); if (!(field.isStatic())<END_MOD>) { com.android.jack.ir.ast.<START_MOD>JExpression instance = fieldRef.getInstance(); assert instance<END_MOD> != null<START_MOD>; getterCall.addArg(instance)<END_MOD>; } <START_MOD>assert (getterCall.getArgs().size()) == (getter.getParams().size()); tr.append(new com.android.jack.transformations.request.Replace(fieldRef, getterCall<END_MOD>)); }
public void loadLayoutParamsAttributes(com.android.ide.common.resources.platform.ViewClassInfo.LayoutParamsInfo info) { if ((getDocument()) != null) { com.android.ide.common.resources.platform.ViewClassInfo viewLayoutClass = info.getViewLayoutClass(); java.lang.String xmlName = java.lang.String.format("%1$s_%2$s", viewLayoutClass.getShortClassName(), info.getShortClassName()); xmlName = <START_MOD>com.android.ide.eclipse.adt.AdtUtils.stripFirst(xmlName<END_MOD>, <START_MOD>"Params"<END_MOD>); com.android.ide.common.resources.platform.DeclareStyleableInfo style = mStyleMap.get(xmlName); if (style != null) { java.lang.String definedBy = (viewLayoutClass.getFullClassName()) + (DOT_LAYOUT_PARAMS); com.android.ide.common.resources.platform.AttributeInfo[] attributes = style.getAttributes(); for (com.android.ide.common.resources.platform.AttributeInfo attribute : attributes) { if ((attribute.getDefinedBy()) == null) { attribute.setDefinedBy(definedBy); } } info.setAttributes(attributes); } } }
<START_MOD>@com.android.annotations.NonNull public com.android.builder.core.ApkInfoParser.ApkInfo parseApk(@com.android.annotations.NonNull java.io.File apkFile) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { if (!(mAaptFile.isFile())) { throw new java.lang.IllegalStateException(("aapt is missing from location: " + (mAaptFile.getAbsolutePath()))); } final java.util.List<java.lang.String> aaptOutput = getAaptOutput(apkFile); return com.android.builder.core.ApkInfoParser.getApkInfo(aaptOutput); }<END_MOD>
private java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM,   BLUETOOTH permission <START_MOD>java.util.ArrayList<android.bluetooth.BluetoothDevice><END_MOD> <START_MOD>devices = new java<END_MOD>.<START_MOD>util.ArrayList<><END_MOD>(); <START_MOD>if (states == null) { return devices; <END_MOD>}<START_MOD> synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { int currentState = stateMachine.getConnectionState(); for (int state : states) { if (currentState == state) { devices.add(stateMachine.getDevice()); break; } } } } return devices; }<END_MOD>
<START_MOD>public void testNewInstanceString_StringConstructor() { runTestNewInstanceString("(Ljava/lang/String;)V", new org.apache.harmony.jpda.tests.jdwp.ClassType.NewInstanceStringTest.ConstructorArgumentsProvider() { @java.lang.Override public void provideConstructorArguments(java.util.List<org.apache.harmony.jpda.tests.framework.jdwp.Value> constructorArguments) { long debuggeeClassId = getClassIDBySignature(getDebuggeeClassSignature()); long testStringFieldId = checkField(debuggeeClassId, "TEST_STRING"); org.apache.harmony.jpda.tests.framework.jdwp.Value testStringValue = debuggeeWrapper.vmMirror.getReferenceTypeValue(debuggeeClassId, testStringFieldId); constructorArguments.add(testStringValue); } }); }<END_MOD>
@org.junit.Test public void testApplyWhenNewFileExistsStrict() throws java.lang.Exception { myPatchSpec.setStrict(true); <START_MOD>myPatchSpec.setDeleteFiles(java.util.Collections.singletonList("lib/java_pid*.hprof")); <END_MOD>com.intellij.updater.Patch patch = com.intellij.updater.PatchFileCreator.create(myPatchSpec, myFile, com.intellij.updater.TEST_UI); com.intellij.openapi.util.io.FileUtil.writeToFile(new java.io.File(myOlderDir, "newfile.txt"), "hello"); com.intellij.<START_MOD>openapi.util.io.FileUtil.writeToFile(new java.io.File(myOlderDir, "lib/java_pid1234.hprof"), "bye!"); com.intellij.<END_MOD>updater.PatchFileCreator.PreparationResult preparationResult = com.intellij.updater.PatchFileCreator.prepareAndValidate(myFile, myOlderDir, com.intellij.updater.TEST_UI); assertEquals(1, preparationResult.validationResults.size()); assertEquals(new com.intellij.updater.ValidationResult(ValidationResult.Kind.CONFLICT, "newfile.txt", ValidationResult.Action.VALIDATE,   file ValidationResult.Option.DELETE), preparationResult.validationResults.get(0)); assertAppliedAndRevertedCorrectly(patch, preparationResult); }
<START_MOD>public void registerListener(com.android.sdklib.devices.DeviceManager.DevicesChangeListener listener) { synchronized(com.android.sdklib.devices.DeviceManager.listeners) { com.android.sdklib.devices.DeviceManager.listeners.add(listener); } }<END_MOD>
private void sendConnectionStateChange(int profile, android.content.Intent connIntent) { android.bluetooth.BluetoothDevice device = connIntent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); int prevState = connIntent.getIntExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, (-1)); int state = connIntent.getIntExtra(BluetoothProfile.EXTRA_STATE, (-1)); android.util.Log.d(com.android.bluetooth.btservice.AdapterProperties.TAG, ((((((( profile= + profile) +   device= + device) +     + prevState) +   ->   + state)); if (!(com.android.bluetooth.btservice.AdapterProperties.isNormalStateTransition(prevState, state))) { android.util.Log.<START_MOD>w<END_MOD>(com.android.bluetooth.btservice.AdapterProperties.TAG, ((((((( <START_MOD>abnormal<END_MOD> transition for profile= + profile) +   device= + device) +     + prevState) +   ->   + state)); } sendConnectionStateChange(device, profile, state, prevState); }
<START_MOD>private int getParameterModifier(@javax.annotation.Nonnegative int localIdx, @javax.annotation.CheckForNull org.objectweb.asm.tree.LocalVariableNode lvn) { if ((currentMethod.parameters) != null) { return (currentMethod.parameters.get((com.android.jill.frontend.java.AsmHelper.isStatic(currentMethod) ? localIdx : localIdx - 1)).access) | (com.android.jill.frontend.java.MethodBodyWriter.NAME_PRESENT); } else if (lvn == null) { return ACC_SYNTHETIC; } return com.android.jill.frontend.java.MethodBodyWriter.NO_MODIFIER; }<END_MOD>
private void executeBuild(java.util.List<java.lang.String> arguments, org.gradle.tooling.ProjectConnection connection, java.lang.String[] tasks) { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add("-i"); args.add("-u"); args.addAll(arguments); org.gradle.tooling.BuildLauncher launcher = connection.newBuild().forTasks(tasks).withArguments(args.toArray(new java.lang.String[args.size()])); <START_MOD>java.lang.StringBuilder jvmArguments = new java.lang.StringBuilder(); java.lang.String debugIntegrationTest = java.lang.System.getenv("DEBUG_INNER_TEST"); if ((!<END_MOD>(com.<START_MOD>google.common.base.Strings.isNullOrEmpty(debugIntegrationTest))) && (debugIntegrationTest.equals(name))) { jvmArguments.append("-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"); } if (com.<END_MOD>android.build.gradle.integration.common.utils.JacocoAgent.isJacocoEnabled()) { <START_MOD>if ((jvmArguments.length()) != 0) { jvmArguments.append(   } jvmArguments.append(com.android.build.gradle.integration.common.utils.JacocoAgent.getJvmArg()); } if ((jvmArguments.length()) > 0) { <END_MOD>launcher.setJvmArguments(<START_MOD>jvmArguments.toString<END_MOD>()); } if ((stdout) != null) { launcher.setStandardOutput(stdout); } launcher.run(); }
private void bindAndInitialize() throws android.telephony.mbms.MbmsException { android.telephony.mbms.MbmsUtils.startBinding(mContext, android.telephony.MbmsDownloadManager.MBMS_DOWNLOAD_SERVICE_ACTION, new android.content.ServiceConnection() { @java.lang.Override public void onServiceConnected(android.content.ComponentName name, android.os.IBinder service) { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = IMbmsDownloadService.Stub.asInterface(service); int result; try { result = downloadService.initialize(mSubscriptionId, mCallback); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG,   died before initialization <START_MOD>android.telephony.MbmsDownloadManager.sIsInitialized = false; <END_MOD>return; } catch (java.lang.RuntimeException e) { android.util.Log.e(android.telephony.MbmsDownloadManager.LOG_TAG,   exception during initialization <START_MOD>sendErrorToApp<END_MOD>(MbmsException.InitializationErrors.ERROR_UNABLE_TO_INITIALIZE, e.toString()); <START_MOD>android.telephony.MbmsDownloadManager.sIsInitialized = false; <END_MOD>return; } if (result != (android.telephony.mbms.MbmsException.SUCCESS)) { <START_MOD>sendErrorToApp<END_MOD>(result,   returned during initialization<START_MOD> android.telephony.MbmsDownloadManager.sIsInitialized = false; return; } try { downloadService.asBinder().linkToDeath(mDeathRecipient, 0); } catch (android.os.RemoteException e) { sendErrorToApp(MbmsException.ERROR_MIDDLEWARE_LOST,   lost during initialization android.telephony.MbmsDownloadManager.sIsInitialized = false;<END_MOD> return; } mService.set(downloadService); } @java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { <START_MOD>android.telephony.MbmsDownloadManager.sIsInitialized = false; <END_MOD>mService.set(null); } }); }
<START_MOD>public void deviceConnected(final com.android.ddmlib.IDevice device) { if (device.isOnline()) { com.android.hierarchyviewerlib.device.DeviceBridge.setupDeviceForward(device); if (!(com.android.hierarchyviewerlib.device.DeviceBridge.isViewServerRunning(device))) { if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); com.android.ddmlib.Log.e("hierarchy", ("Unable to debug device " + device)); return; } } com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo viewServerInfo = com.android.hierarchyviewerlib.device.DeviceBridge.loadViewServerInfo(device); executeInBackground(new java.lang.Runnable() { public void run() { com.android.hierarchyviewerlib.device.Window[] windows = com.android.hierarchyviewerlib.device.DeviceBridge.loadWindows(device); com.android.hierarchyviewerlib.ComponentRegistry.getDeviceSelectionModel().addDevice(device, windows); } }); if ((viewServerInfo.getProtocolVersion()) >= 3) { com.android.hierarchyviewerlib.device.WindowUpdater.startListenForWindowChanges(this, device); focusChanged(device); } } }<END_MOD>
<START_MOD>private static java.util.List<java.lang.String> getPreferredHourFormats(android.icu.util.ULocale uLocale) { android.icu.util.ULocale max = android.icu.util.ULocale.addLikelySubtags(uLocale); java.lang.String country = max.getCountry(); if (country.isEmpty()) { country = "001"; } java.lang.String langCountry = ((max.getLanguage()) + "_") + country; java.util.List<java.lang.String> list = android.icu.text.DateTimePatternGenerator.LOCALE_TO_PREFERED_HOUR.get(langCountry); if (list == null) { list = android.icu.text.DateTimePatternGenerator.LOCALE_TO_PREFERED_HOUR.get(country); if (list == null) { list = java.util.Collections.singletonList("H"); } } return list; }<END_MOD>
<START_MOD>@java.lang.Override public void writeTo(com.android.jack.dx.util.AnnotatedOutput out, com.android.jack.dx.dex.code.DalvInsn insn) { com.android.jack.dx.rop.code.RegisterSpecList regs = explicitize(insn.getRegisters()); int sz = regs.size(); int r0 = (sz > 0) ? regs.get(0).getReg() : 0; int r1 = (sz > 1) ? regs.get(1).getReg() : 0; int r2 = (sz > 2) ? regs.get(2).getReg() : 0; int r3 = (sz > 3) ? regs.get(3).getReg() : 0; int r4 = (sz > 4) ? regs.get(4).getReg() : 0; write(out, opcodeUnit(insn, makeByte(r4, sz)), codeUnit(r0, r1, r2, r3)); }<END_MOD>
<START_MOD>@com.android.annotations.NonNull public ResourceVisibilityLookup.Provider getResourceVisibility() { if ((mResourceVisibility) == null) { mResourceVisibility = new com.android.ide.common.repository.ResourceVisibilityLookup.Provider(); } return mResourceVisibility; }<END_MOD>
@java.lang.Override protected boolean engineVerify(byte[] sigBytes) throws java.security.SignatureException { if ((key) == null) { throw new java.security.SignatureException( RSA public key } if (inputIsTooLong) { return false; } byte[] <START_MOD>outputBuffer<END_MOD> = new byte[inputBuffer.length]; <START_MOD>try { final int resultSize; try { resultSize = org.apache.harmony.xnet.provider.jsse.NativeCrypto.RSA_public_decrypt(sigBytes.length, sigBytes, outputBuffer, key.getPkeyContext(), NativeCrypto.RSA_PKCS1_PADDING); } catch (java.security.SignatureException e) { throw e; } catch (java.lang.Exception e) { return false; } if (resultSize != (outputBuffer.length)) { outputBuffer = java.util.Arrays.copyOf(outputBuffer, resultSize); } boolean matches = resultSize == (inputOffset); for (int i = 0; i < resultSize; i++) { if ((inputBuffer[i]) != (outputBuffer[i])) { matches = false; } } return matches; } catch (java.lang.Exception ex) { throw<END_MOD> new <START_MOD>java.security.SignatureException(ex); } finally { inputOffset =<END_MOD> 0<START_MOD>; } }<END_MOD>
<START_MOD>@java.lang.Override public boolean satisfiedBy(android.net.NetworkSpecifier other) { if (other == null) return true; if (!(other instanceof android.net.StringNetworkSpecifier)) return false; return specifier.equals(((android.net.StringNetworkSpecifier) (other)).specifier); }<END_MOD>
@com.googlecode.android_scripting.rpc.Rpc(description =   a wifi network with priority public void wifiForgetNetwork(@com.googlecode.android_scripting.rpc.RpcParameter(name = "wifiSSID") java.lang.Integer newtorkId) { com.googlecode.android_scripting.facade.wifi.WifiManagerFacade.WifiActionListener listener = new com.googlecode.android_scripting.facade.wifi.WifiManagerFacade.WifiActionListener(mEventFacade, <START_MOD>com.googlecode.android_scripting.facade.wifi.WifiConstants.WifiForgetNetworkCallback<END_MOD>); mWifi.forget(newtorkId, listener); }
<START_MOD>public void testConnectionFailed() throws java.lang.Throwable { if (!(android.media.tv.cts.Utils.hasTvInputFramework(getActivity()))) { return; } mTvView.tune("invalid_input_id", TvContract.Channels.CONTENT_URI); mInstrumentation.waitForIdleSync(); new android.cts.util.PollingCheck(android.media.tv.cts.TvViewTest.TIME_OUT) { @java.lang.Override protected boolean check() { return (mCallback.getConnectionFailedCount()) > 0; } }.run(); }<END_MOD>
<START_MOD>com.android.ahat.heapdump<END_MOD>.Site add(java.util.<START_MOD>List<END_MOD><com.android.tools.perflib.heap.StackFrame> path, com.android.<START_MOD>ahat.heapdump.AhatInstance<END_MOD> inst) { mObjects.add(inst); java.lang.String heap = inst.getHeap().getName(); mSizesByHeap.put(heap, ((getSize(heap)) + (inst.getSize()))); java.util.Map<com.android.<START_MOD>ahat.heapdump.AhatClassObj, com.android.ahat.heapdump<END_MOD>.Site.ObjectsInfo> classToObjectsInfo = mObjectsInfoMap.get(inst.getHeap()); if (classToObjectsInfo == null) { classToObjectsInfo = new java.util.HashMap<com.android.<START_MOD>ahat.heapdump.AhatClassObj, com.android.ahat.heapdump<END_MOD>.Site.ObjectsInfo>(); mObjectsInfoMap.put(inst.getHeap(), classToObjectsInfo); } com.android.ahat.<START_MOD>heapdump.<END_MOD>Site.ObjectsInfo info = classToObjectsInfo.get(inst.getClassObj()); if (info == null) { info = new com.android.ahat.<START_MOD>heapdump.<END_MOD>Site.ObjectsInfo(inst.getHeap(), inst.getClassObj(), 0, 0); mObjectsInfos.add(info); classToObjectsInfo.put(inst.getClassObj(), info); } (info.numInstances)++; info.numBytes += inst.getSize(); if (<START_MOD>!(<END_MOD>path.<START_MOD>isEmpty()<END_MOD>)) { java.lang.String next = path.<START_MOD>get(0).toString(); com.android.ahat.heapdump.Site child = mChildren.get(<END_MOD>next<START_MOD>); if (<END_MOD>child <START_MOD>== null) { child = new com.android.ahat.heapdump.Site(this, next, inst.getId(), ((path.size()) - 1));<END_MOD> mChildren.<START_MOD>put<END_MOD>(next<START_MOD>, <END_MOD>child<START_MOD>); } return child.add(path.subList(1, path.size()), inst); } else<END_MOD> { <START_MOD>return <END_MOD>this; } }
<START_MOD>private boolean getWifiWakeupEnabledSetting() { return (Settings.Global.getInt(mContext.getContentResolver(), Settings.Global.WIFI_WAKEUP_ENABLED, 0)) == 1; }<END_MOD>
<START_MOD>public static boolean isFactoryROM() { return (com.android.compatibility.common.util.PropertyUtil.getFirstApiLevel()) == (com.android.compatibility.common.util.PropertyUtil.INT_VALUE_IF_UNSET); }<END_MOD>
private static void printReferences(com.android.ahat.Doc doc, com.android.<START_MOD>ahat.Query query, com.android.<END_MOD>tools.perflib.heap.Instance inst) { doc.section( with References to this Object if (inst.getHardReferences().isEmpty()) { doc.println(com.android.ahat.DocString.text("(none)")); } else { doc.table(new com.android.ahat.Column("Object")); <START_MOD>java.util.Collection<com.android.tools.perflib.heap.Instance> references = inst.getHardReferences(); com.android.ahat.LimitSelector selector = new com.android.ahat.LimitSelector(query, com.android.ahat.ObjectHandler.HARD_REFS_ID, references.size()); int limit = selector.getSelectedLimit(); java.util.Iterator<com.android.tools.perflib.heap.Instance> iter = references.iterator(); <END_MOD>for (<START_MOD>int i = 0; (i < limit) && (iter.hasNext()); i++) { <END_MOD>com.android.tools.perflib.heap.Instance ref <START_MOD>= iter.next(); doc.row(com.android.ahat.Value.render(ref)); } doc.end(); selector.render(doc); } if ((<END_MOD>inst.<START_MOD>getSoftReferences()) != null<END_MOD>) { doc.<START_MOD>section( with Soft References to this Object doc.table(new com.android.ahat.Column("Object")); java.util.Collection<com.android.tools.perflib.heap.Instance> references = inst.getSoftReferences(); com.android.ahat.LimitSelector selector = new com.android.ahat.LimitSelector(query, com.android.ahat.ObjectHandler.SOFT_REFS_ID, references.size()); int limit = selector.getSelectedLimit(); java.util.Iterator<com.android.tools.perflib.heap.Instance> iter = references.iterator(); for (int i = 0; (i < limit) && (iter.hasNext()); i++) { com.android.tools.perflib.heap.Instance ref = iter.next(); doc.<END_MOD>row(com.android.ahat.Value.render(ref)); } doc.end(); <START_MOD>selector.render(doc); <END_MOD>} }
<START_MOD>@com.android.annotations.Nullable public static com.android.sdklib.AndroidVersion getVersion(@com.android.annotations.Nullable java.lang.String value, @com.android.annotations.Nullable com.android.sdklib.IAndroidTarget[] targets) { if ((value == null) || (value.isEmpty())) { return null; } if (java.lang.Character.isDigit(value.charAt(0))) { try { int api = java.lang.Integer.parseInt(value); if (api >= 1) { return new com.android.sdklib.AndroidVersion(api, null); } return null; } catch (java.lang.NumberFormatException e) { return null; } } if (targets != null) { for (int i = (targets.length) - 1; i >= 0; i--) { com.android.sdklib.IAndroidTarget target = targets[i]; if (target.isPlatform()) { com.android.sdklib.AndroidVersion version = target.getVersion(); if ((version.isPreview()) && (value.equalsIgnoreCase(version.getCodename()))) { return new com.android.sdklib.AndroidVersion(version.getApiLevel(), version.getCodename()); } } } } int api = com.android.ide.common.sdk.SdkVersionInfo.getApiByPreviewName(value, false); if (api != (-1)) { return new com.android.sdklib.AndroidVersion((api - 1), value); } return new com.android.sdklib.AndroidVersion(com.android.ide.common.sdk.SdkVersionInfo.HIGHEST_KNOWN_API, value); }<END_MOD>
<START_MOD>boolean process() { if ((mQueue.size()) == 0) { return false; } short tid = mQueue.poll(); int mid = mMessageIdsByTid.get(tid); if (((mNumberOfRetries) != null) && (mNumberOfRetries.containsKey(mid))) { int numRetries = mNumberOfRetries.get(mid); if (numRetries == (-1)) { mDut.onMessageSendFailNotification(tid, NanStatusType.INTERNAL_FAILURE); } else { int currentRetries = mRetriesByMid.get(mid); if (currentRetries > numRetries) { return false; } else if (currentRetries == numRetries) { mDut.onMessageSendSuccessNotification(tid); } else { mDut.onMessageSendFailNotification(tid, NanStatusType.NO_OTA_ACK); } mRetriesByMid.put(mid, (currentRetries + 1)); } } else { mDut.onMessageSendSuccessNotification(tid); } return true; }<END_MOD>
@java.lang.Override public void endTraceSeed(@javax.annotation.Nonnull com.android.jack.ir.ast.JField field) { composedStatus.pop(); <START_MOD>for (com.android.jack.analysis.tracer.TracerBrush config : brushes) { config.endTraceSeed(field); <END_MOD>}<START_MOD> }<END_MOD>
<START_MOD>private void addInclusiveTime(com.android.tools.perflib.vmtrace.Call call, com.android.tools.perflib.vmtrace.Call parent, com.android.tools.perflib.vmtrace.ThreadInfo thread, com.android.tools.perflib.vmtrace.ClockType type) { long time = call.getInclusiveTime(type, java.util.concurrent.TimeUnit.NANOSECONDS); mAllThreadStats.addInclusiveTime(time, type); getPerThreadCumulativeStats(thread).addInclusiveTime(time, type); if (parent != null) { getPerCallerTime(thread, parent).addInclusiveTime(time, type); } for (com.android.tools.perflib.vmtrace.Call callee : call.getCallees()) { } }<END_MOD>
@android.annotation.Nullable public android.telephony.euicc.EuiccInfo getEuiccInfo() { if (!(isEnabled())) { return null; } try { return <START_MOD>getIEuiccController()<END_MOD>.getEuiccInfo(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }
@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JThrowStatement throwStmt) { super.visit(throwStmt); assert (cfg) != null; com.android.jack.cfg.ThrowBasicBlock throwBlock = new com.android.jack.cfg.ThrowBasicBlock(cfg, currentStmts); setBlockOfStatement(throwBlock); <START_MOD>forwardBranchResolver.addPeiBasicBlock<END_MOD>(throwBlock, <START_MOD>null, <END_MOD>throwStmt<START_MOD>.getJCatchBlocks()<END_MOD>); return false; }
<START_MOD>public void addRequestResponsePair(android.telecom.Logging.Events.TimedEventPair p) { if (requestResponsePairs.containsKey(p.mRequest)) { requestResponsePairs.get(p.mRequest).add(p); } else { java.util.ArrayList<android.telecom.Logging.Events.TimedEventPair> responses = new java.util.ArrayList<>(); responses.add(p); requestResponsePairs.put(p.mRequest, responses); } }<END_MOD>
public java.lang.Object[] getElements(java.lang.Object inputElement) { if (inputElement instanceof com.android.hierarchyviewerlib.models.DeviceSelectionModel) { <START_MOD>java.lang.System.out.println((   + (model.getDevices().length))); <END_MOD>return model.getDevices(); } return new java.lang.Object[0]; }
<START_MOD>public static void listViewRoots(com.android.ddmlib.Client client, com.android.ddmlib.HandleViewDebug.ListViewRootsHandler replyHandler) throws java.io.IOException { java.nio.ByteBuffer buf = allocBuffer(4); com.android.ddmlib.JdwpPacket packet = new com.android.ddmlib.JdwpPacket(buf); java.nio.ByteBuffer chunkBuf = getChunkDataBuf(buf); chunkBuf.putInt(1); finishChunkPacket(packet, com.android.ddmlib.HandleViewDebug.CHUNK_VULW, chunkBuf.position()); client.sendAndConsume(packet, replyHandler); }<END_MOD>
<START_MOD>public static void setProcessUseLocalNameservers(android.net.Network network) { final long netidForResolv = (NETID_USE_LOCAL_NAMESERVERS) | ((long) (network.netId)); android.net.NetworkUtils.bindProcessToNetworkForHostResolution(((int) (netidForResolv))); }<END_MOD>
<START_MOD>@java.lang.Override public void onReceive(android.content.Context context, android.content.Intent intent) { android.util.Log.d(com.android.bluetooth.btservice.RemoteDevices.TAG, ("received intent: " + intent)); java.lang.String action = intent.getAction(); switch (action) { case android.bluetooth.BluetoothHeadset.ACTION_HF_INDICATORS_VALUE_CHANGED : onHfIndicatorValueChanged(intent); break; default : android.util.Log.w(com.android.bluetooth.btservice.RemoteDevices.TAG, ("unhandled intent: " + intent)); break; } }<END_MOD>
<START_MOD>private static void parseSigners(java.nio.ByteBuffer apkSignatureSchemeV3Block, java.util.Set<com.android.apksig.internal.apk.ContentDigestAlgorithm> contentDigestsToVerify, int minSdkVersion, int maxSdkVersion, com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result) throws java.security.NoSuchAlgorithmException { java.nio.ByteBuffer signers; try { signers = com.android.apksig.internal.apk.ApkSigningBlockUtils.getLengthPrefixedSlice(apkSignatureSchemeV3Block); } catch (com.android.apksig.apk.ApkFormatException e) { result.addError(Issue.V3_SIG_MALFORMED_SIGNERS); return; } if (!(signers.hasRemaining())) { result.addError(Issue.V3_SIG_NO_SIGNERS); return; } java.security.cert.CertificateFactory certFactory; try { certFactory = java.security.cert.CertificateFactory.getInstance("X.509"); } catch (java.security.cert.CertificateException e) { throw new java.lang.RuntimeException("Failed to obtain X.509 CertificateFactory", e); } int signerCount = 0; while (signers.hasRemaining()) { int signerIndex = signerCount; signerCount++; com.android.apksig.internal.apk.ApkSigningBlockUtils.Result.SignerInfo signerInfo = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result.SignerInfo(); signerInfo.index = signerIndex; result.signers.add(signerInfo); try { java.nio.ByteBuffer signer = com.android.apksig.internal.apk.ApkSigningBlockUtils.getLengthPrefixedSlice(signers); com.android.apksig.internal.apk.v3.V3SchemeVerifier.parseSigner(signer, certFactory, signerInfo, contentDigestsToVerify, minSdkVersion, maxSdkVersion); } catch (com.android.apksig.apk.ApkFormatException | java.nio.BufferUnderflowException e) { signerInfo.addError(Issue.V3_SIG_MALFORMED_SIGNER); return; } } }<END_MOD>
@org.junit.Test public void testMethodRef006() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(METHODREF006).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.<START_MOD>LAMBDA_MODE<END_MOD>.getName(), <START_MOD>Options<END_MOD>.<START_MOD>LambdaMode<END_MOD>.<START_MOD>LEGACY<END_MOD>.toString()).compileAndRunTest(); }
com.android.internal.telephony.cat.Menu getMainMenu(int slotId) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkAppService.LOG_TAG, ( getMainMenu, sim id:   + slotId)); if (((slotId >= 0) && (slotId < (mSimCount))) && ((mStkContext[slotId].mMainCmd) != null)) { <START_MOD>com.android.internal.telephony.cat.Menu menu =<END_MOD> mStkContext[slotId].mMainCmd.getMenu(); <START_MOD>if ((menu != null) && ((mSimCount) > (com.android.internal.telephony.PhoneConstants.MAX_PHONE_COUNT_SINGLE_SIM))) { if ((menu.title) == null) { com.android.stk.StkMenuConfig config = com.android.stk.StkMenuConfig.getInstance(getApplicationContext()); java.lang.String label = config.getLabel(slotId); if (label != null) { android.os.Parcel parcel = android.os.Parcel.obtain(); menu.writeToParcel(parcel, 0); parcel.setDataPosition(0); menu = Menu.CREATOR.createFromParcel(parcel); parcel.recycle(); menu.title = label; } } } return menu; <END_MOD>} else { return null; } }
public static android.net.MacAddress <START_MOD>makeRandomAddress<END_MOD>() { return android.net.MacAddress.<START_MOD>makeRandomAddress<END_MOD>(android.net.MacAddress.BASE_ANDROID_MAC, new java.util.Random()); }
@<START_MOD>org.junit.Before<END_MOD> public void setUp() { resetLatch(); mLocalSocket = null; mLocalSockName = null; mLastRecvBuf = null; mExited = false; mReceiver = new android.net.util.BlockingSocketReader() { @java.lang.Override protected java.io.FileDescriptor createSocket() { java.io.FileDescriptor s = null; try { s = android.system.Os.socket(android.net.util.AF_INET6, android.net.util.SOCK_DGRAM, android.net.util.IPPROTO_UDP); android.system.Os.bind(s, android.net.util.BlockingSocketReaderTest.LOOPBACK6, 0); mLocalSockName = ((java.net.InetSocketAddress) (android.system.Os.getsockname(s))); android.system.Os.setsockoptTimeval(s, android.net.util.SOL_SOCKET, android.net.util.SO_SNDTIMEO, android.net.util.BlockingSocketReaderTest.TIMEO); } catch (android.system.ErrnoException | java.net.SocketException e) { closeSocket(s); fail(); return null; } mLocalSocket = s; return s; } @java.lang.Override protected void handlePacket(byte[] recvbuf, int length) { mLastRecvBuf = java.util.Arrays.copyOf(recvbuf, length); mLatch.countDown(); } @java.lang.Override protected void onExit() { mExited = true; mLatch.countDown(); } }; }
<START_MOD>@com.android.annotations.NonNull @java.lang.Override public java.util.List<java.io.File> getJars() { return null; }<END_MOD>
<START_MOD>private static java.lang.String parseOtherHomePartnerInstance(android.net.wifi.hotspot2.omadm.PPSMOParser.PPSNode node) throws android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException { if (node.isLeaf()) throw new android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException("Leaf node not expected for OtherHomePartner instance"); java.lang.String fqdn = null; for (android.net.wifi.hotspot2.omadm.PPSMOParser.PPSNode child : node.getChildren()) { switch (child.getName()) { case android.net.wifi.hotspot2.omadm.PPSMOParser.NODE_FQDN : fqdn = android.net.wifi.hotspot2.omadm.PPSMOParser.getPpsNodeValue(child); break; default : throw new android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException(("Unknown node under OtherHomePartner instance: " + (child.getName()))); } } if (fqdn == null) throw new android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException("OtherHomePartner instance missing FQDN field"); return fqdn; }<END_MOD>
<START_MOD>public static native byte[] i2d_X509_PUBKEY(int ctx);<END_MOD>
<START_MOD>public java.lang.String getToolchainDirectory(java.lang.String abi) { return getToolchainDirectory(toolchainName, toolchainVersion, abi); }<END_MOD>
static java.lang.String[] getAlgorithms(java.lang.String propertyName) { java.lang.String property; }
<START_MOD>private static java.util.Map<java.lang.String, java.lang.Integer> stringToMap(java.lang.String str) { java.util.Map<java.lang.String, java.lang.Integer> map = new java.util.HashMap<>(); for (java.lang.String entry : str.split("\n")) { java.lang.String[] parts = entry.split(" "); map.put(parts[0], java.lang.Integer.parseInt(parts[1])); } return map; }<END_MOD>
<START_MOD>@vogar.target.TestRunnerProperties(testClass = vogar.target.junit4.TestMethodWithParameterTest.class) @org.junit.Test public void testRunner_TestMethodWithParameterTest_Requested() throws java.lang.Exception { java.lang.String methodName = "parameterized"; vogar.target.TestRunner runner = testRunnerRule.createTestRunner(methodName); runner.run(); checkFilteredOutput().failure(methodName, (("java.lang.Exception: Method " + methodName) + " should have no parameters\n")).completedNormally(); }<END_MOD>
<START_MOD>public <END_MOD>void connectionStateChanged(android.bluetooth.BluetoothDevice device, int newState, int prevState) { if ((prevState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (newState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { if ((getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.AUDIO_CONNECTABLE_STATES).size()) > 1) { mNativeInterface.configureInbandRingingEnabledUsingBsir(false); <START_MOD>mInbandRingingAllowed = false; <END_MOD>} } if ((prevState != (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) && (newState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED))) { if ((getDevicesMatchingConnectionStates(com.android.bluetooth.hfp.HeadsetService.AUDIO_CONNECTABLE_STATES).size()) <= 1) { mNativeInterface.configureInbandRingingEnabledUsingBsir(true); <START_MOD>mInbandRingingAllowed = true; } } }<END_MOD>
<START_MOD>public static java.lang.String samplesMsg(@org.jetbrains.annotations.NotNull @org.jetbrains.annotations.PropertyKey(resourceBundle = com.google.gct.idea.util.GctBundle.SAMPLES) java.lang.String key, @org.jetbrains.annotations.NotNull java.lang.Object... params) { return com.intellij.CommonBundle.message(com.google.gct.idea.util.GctBundle.getBundle(com.google.gct.idea.util.GctBundle.SAMPLES), key, params); }<END_MOD>
<START_MOD>public boolean getSnapshotSaveData() { return mSaveSnapshot; }<END_MOD>
<START_MOD>public void testSignature_updateArray_negativeLength_throws() throws java.lang.Exception { try { java.security.Signature s = new libcore.java.security.SignatureTest.MySignature("FOO"); s.update(new byte[4], 1, (-1)); fail(); } catch (java.lang.IllegalArgumentException expected) { } }<END_MOD>
public void testBug15081434() throws java.lang.Exception { java.text.DecimalFormat df = ((java.text.DecimalFormat) (java.text.NumberFormat.getCurrencyInstance(java.util.Locale.US))); try { df.parse(null); fail(); } catch (java.lang.NullPointerException expected) { } try { df.applyLocalizedPattern(null); <START_MOD>} catch (java.lang.NullPointerException unexpected) { fail(); } try { df.applyPattern(null); } catch (java.lang.NullPointerException unexpected) { fail(); } try { df.applyPattern(null); } catch (java.lang.NullPointerException unexpected) { fail(); } try { df.format(null, new java.lang.StringBuffer(), new java.text.FieldPosition(0)); fail(); } catch (java.lang.IllegalArgumentException<END_MOD> expected) { } try { df.<START_MOD>parse(null, new java.text.ParsePosition(0)<END_MOD>); fail(); } catch (java.lang.NullPointerException expected) { } <START_MOD>df.setDecimalFormatSymbols(null); try { df.setCurrency<END_MOD>(null); fail(); } catch (java.lang.NullPointerException expected) { } <START_MOD>df.setNegativePrefix(null); df.setNegativeSuffix(null); df.setPositivePrefix(null); df.setPositiveSuffix(null); try { df.setRoundingMode(null); fail(); } catch (java.lang.NullPointerException<END_MOD> expected) { } <START_MOD>}<END_MOD>
<START_MOD>@java.lang.Override protected void engineReset() { android.os.IBinder operationToken = mOperationToken; if (operationToken != null) { mOperationToken = null; mKeyStore.abort(operationToken); } mChunkedStreamer = null; android.security.keymaster.KeymasterArguments keymasterArgs = new android.security.keymaster.KeymasterArguments(); keymasterArgs.addInt(KeymasterDefs.KM_TAG_DIGEST, mDigest); android.security.keymaster.OperationResult opResult = mKeyStore.begin(mKeyAliasInKeyStore, KeymasterDefs.KM_PURPOSE_SIGN, true, keymasterArgs, null, new android.security.keymaster.KeymasterArguments()); if (opResult == null) { throw new android.security.KeyStoreConnectException(); } else if (((opResult.resultCode) != (android.security.keymaster.KeymasterDefs.KM_ERROR_OK)) && ((opResult.resultCode) != (KeyStore.NO_ERROR))) { throw new android.security.CryptoOperationException("Failed to start keystore operation", android.security.KeymasterUtils.getExceptionForKeymasterError(opResult.resultCode)); } mOperationToken = opResult.token; if ((mOperationToken) == null) { throw new android.security.CryptoOperationException("Keystore returned null operation token"); } mChunkedStreamer = new android.security.KeyStoreCryptoOperationChunkedStreamer(new android.security.KeyStoreHmacSpi.KeyStoreStreamingConsumer(mKeyStore, mOperationToken)); }<END_MOD>
@java.lang.Override public void iccOpenLogicalChannel(java.lang.String aid, int p2, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.<START_MOD>RILConstants.<END_MOD>RIL_REQUEST_SIM_OPEN_CHANNEL, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { if (android.os.Build.IS_DEBUGGABLE) { riljLog((((((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) +   aid =   + aid) +   p2 =   + p2)); } else { riljLog((((rr.serialString()) +     + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } } try { radioProxy.iccOpenLogicalChannel(rr.mSerial, convertNullToEmptyString(aid), p2); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, "iccOpenLogicalChannel", e); } } }
void messageFromNative(com.android.bluetooth.a2dp.A2dpStackEvent stackEvent) { <START_MOD>synchronized(mStateMachines) { android.bluetooth.BluetoothDevice device = stackEvent.device; if ((stackEvent.type) == (A2dpStackEvent.EVENT_TYPE_CODEC_CONFIG_CHANGED)) { android.bluetooth.BluetoothDevice zeroDevice = mAdapter.getRemoteDevice("00:00:00:00:00:00"); if ((device == null) || (device.equals(zeroDevice))) { mLocalCodecStatus = stackEvent.codecStatus; return; } } com.android.bluetooth.a2dp.A2dpStateMachine sm = getStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ( process stack event: no state machine:   + stackEvent)); return; } sm<END_MOD>.sendMessage(A2dpStateMachine.STACK_EVENT, stackEvent); }<START_MOD> }<END_MOD>
<START_MOD>@org.junit.Test public void test014() throws java.lang.Exception { com.android.jack.java7.trywithresources.test002.jack.TryWithResourcesTest002.m14(15); }<END_MOD>
@javax.annotation.Nonnull private static java.util.Properties loadLibraryProperties(@javax.annotation.Nonnull com.android.sched.vfs.InputVFS vfs) throws com.android.jack.library.NotJackLibraryException { java.util.Properties libraryProperties = new java.util.Properties(); try { com.android.sched.vfs.InputVFile libProp = vfs.getRootInputVDir().getInputVFile(JackLibrary.LIBRARY_PROPERTIES_VPATH); java.io.InputStream inputStream = null; try { inputStream = libProp.getInputStream(); libraryProperties.load(inputStream); } finally { if (inputStream != null) { try { inputStream.close(); } catch (java.io.IOException e) { com.android.jack.library.JackLibraryFactory.logger.log(java.util.logging.Level.WARNING,   to close ''{0}'' libProp.getLocation().getDescription()); } } } } catch (<START_MOD>com.android.sched.util.file.NotFileOrDirectoryException | com.android.sched.util.file.NoSuchFileException | com.android.sched.util.file.WrongPermissionException e) { throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } catch (<END_MOD>java.io.IOException e) { throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } return libraryProperties; }
public java.net.SocketAddress getpeername(java.io.FileDescriptor fd) throws <START_MOD>android<END_MOD>.<START_MOD>os<END_MOD>.ErrnoException { return os.getpeername(fd); }
<START_MOD>public final void onRegistered(@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech int imsRadioTech) { onImsConnected(imsRadioTech); }<END_MOD>
public void touch(int x, int y, com.android.monkeyrunner.adb.TouchPressType type) { try { switch (type) { case DOWN : manager.touchDown(x, y); break; case UP : manager.touchUp(x, y); break; case DOWN_AND_UP : manager.tap(x, y); break; } } catch (java.io.IOException e) { com.android.monkeyrunner.adb.AdbMonkeyDevice.LOG.log(java.util.logging.Level.SEVERE, ((((( sending touch event:   + x) +     + y) +     + type), e); } }
<START_MOD>private boolean isPhoneStateIdle() { for (int i = 0; i < (android.telephony.TelephonyManager.getDefault().getPhoneCount()); i++) { com.android.internal.telephony.Phone phone = com.android.internal.telephony.PhoneFactory.getPhone(i); if ((phone != null) && ((phone.getState()) != (PhoneConstants.State.IDLE))) { log(("isPhoneStateIdle: Voice call active on sub: " + i)); return false; } } return true; }<END_MOD>
@java.lang.Override public void deleteTransportModeTransform(int resourceId) throws android.os.RemoteException { synchronized(mTransformRecords) { com.android.server.IpSecService.TransformRecord record; record = mTransformRecords.get(resourceId); if (record == null) { throw new java.lang.IllegalArgumentException(((   + resourceId) +   is not available to be deleted } if (((record.pid) != (android.os.Binder.getCallingPid())) || ((record.uid) != (android.os.Binder.getCallingUid()))) { throw new java.lang.SecurityException( the owner of an IpSec Transform may delete it! } record.<START_MOD>release<END_MOD>(); mTransformRecords.remove(resourceId); <START_MOD>} }<END_MOD>
public static void main() { try { LocalClass3.CC.newInstance(); java.lang.System.out.println( succeeded } catch (java.lang.Exception ex) { java.lang.System.err.println( unexpected LocalClass3 failure ex.printStackTrace(<START_MOD>java.lang.System.out<END_MOD>); } }
<START_MOD>@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) throws java.lang.Exception { if (type.isExternal()) { return; } if (hasProblematicAnnotation(type)) { type.addMarker(MainDexMarker.INSTANCE); } }<END_MOD>
@java.lang.Override public void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, "onCreate"); requestWindowFeature(Window.FEATURE_NO_TITLE); setContentView(R.layout.stk_menu_list); mInstance = this; mTitleTextView = ((android.widget.TextView) (findViewById(R.id.title_text))); mTitleIconView = ((android.widget.ImageView) (findViewById(R.id.title_icon))); mProgressView = ((android.widget.ProgressBar) (findViewById(R.id.progress_bar))); mContext = getBaseContext(); getListView().setOnCreateContextMenuListener(this); initFromIntent(getIntent()); }
@java.lang.Override @javax.annotation.Nonnull public void setProperty(@javax.annotation.Nonnull java.lang.String <START_MOD>key<END_MOD>, @javax.annotation.Nonnull java.lang.String <START_MOD>value<END_MOD>) { <START_MOD>options.addProperty(key, value); <END_MOD>}
<START_MOD>public java.lang.String getSysroot(java.lang.String abi) { return ((((ndkDirectory) + "/platforms/") + (compileSdkVersion)) + "/arch-") + (com.android.build.gradle.internal.NdkHandler.ARCHITECTURE_STRING.get(abi)); }<END_MOD>
<START_MOD>@java.lang.Override public org.eclipse.swt.graphics.Image loadCapture(com.android.hierarchyviewerlib.models.Window window, com.android.hierarchyviewerlib.models.ViewNode viewNode) { com.android.ddmlib.Client c = window.getClient(); if (c == null) { return null; } java.lang.String viewRoot = window.getTitle(); com.android.ddmlib.HandleViewDebug.CaptureViewHandler handler = new com.android.ddmlib.HandleViewDebug.CaptureViewHandler(); try { com.android.ddmlib.HandleViewDebug.captureView(c, viewRoot, viewNode.toString(), handler); } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DdmViewDebugDevice.TAG, e); return null; } byte[] data = handler.getData(10, java.util.concurrent.TimeUnit.SECONDS); return data == null ? null : new org.eclipse.swt.graphics.Image(org.eclipse.swt.widgets.Display.getDefault(), new java.io.ByteArrayInputStream(data)); }<END_MOD>
<START_MOD>private boolean isUseOnlyRsrpForLteLevel() { android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (mPhone.getContext().getSystemService(Context.CARRIER_CONFIG_SERVICE))); android.os.PersistableBundle config = null; if (configManager != null) { config = configManager.getConfigForSubId(mPhone.getSubId()); } if (config != null) { return config.getBoolean(CarrierConfigManager.KEY_USE_ONLY_RSRP_FOR_LTE_SIGNAL_BAR_BOOL); } else { return android.telephony.CarrierConfigManager.getDefaultConfig().getBoolean(CarrierConfigManager.KEY_USE_ONLY_RSRP_FOR_LTE_SIGNAL_BAR_BOOL); } }<END_MOD>
<START_MOD>private void checkClzUchar4() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U8_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inValue, 35, 0, 500); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U8_4(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testClzUchar4(inValue, out); verifyResultsClzUchar4(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testClzUchar4: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U8_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testClzUchar4(inValue, out); verifyResultsClzUchar4(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testClzUchar4: " + (e.toString()))); } }<END_MOD>
<START_MOD>private void checkLog10Float2() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testLog10Float2(in, out); verifyResultsLog10Float2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLog10Float2: " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLog10Float2(in, out); verifyResultsLog10Float2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke forEach_testLog10Float2: " + (e.toString()))); } }<END_MOD>
<START_MOD>protected boolean mustTraceOverridingMethod(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) { synchronized(method) { com.android.jack.analysis.tracer.BasicTracerMarker marker = method.getMarker(markerClass); if (marker != null) { return marker.mustTraceOverridingMethods(); } } return false; }<END_MOD>
@java.lang.Override public void onInputBufferAvailable(android.media.MediaCodec codec, int index) { <START_MOD>if (mMime.startsWith("video/")) { <END_MOD>fail(((<START_MOD>(<END_MOD>codec<START_MOD>.getInputFormat())<END_MOD> +   onInputBufferAvailable   + index)); }<START_MOD> else { synchronized(mInputBufferIndices) { mInputBufferIndices.add(index); } } }<END_MOD>
<START_MOD>public void setVersioncode(java.lang.String versionCode) { if ((versionCode.length()) > 0) { try { mVersionCode = java.lang.Integer.decode(versionCode); } catch (java.lang.NumberFormatException e) { java.lang.System.out.println(java.lang.String.format("WARNING: Ignoring version code value '%s'.", versionCode)); } } }<END_MOD>
public boolean avoidBadWifi() { return <START_MOD>mHandoverPolicyTracker<END_MOD>.currentValue(); }
public void run() { android.<START_MOD>renderscript<END_MOD>.RenderScript pRS = android.<START_MOD>renderscript<END_MOD>.RenderScript.create(mCtx); com.android.rs.test.ScriptC_kernel_struct s = new com.android.rs.test.ScriptC_kernel_struct(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_init_vars(A); s.forEach_root(A, B); s.invoke_verify_root(); s.invoke_kernel_struct_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }
public void onIfaceAdded(int type, java.lang.String name) { kilroy(); <START_MOD>mLog<END_MOD>.d((((   + type) +   name:   + name)); }
public void projectRenamed(org.eclipse.core.resources.IProject project, org.eclipse.core.runtime.IPath from) { com.android.ide.eclipse.adt.internal.sdk.ProjectState renamedState = com.android.ide.eclipse.adt.internal.sdk.Sdk.getProjectState(project); if (renamedState.isLibrary()) { disposeLibraryProject(from.lastSegment()); synchronized(com.android.ide.eclipse.adt.internal.sdk.Sdk.sLock) { for (com.android.ide.eclipse.adt.internal.sdk.ProjectState projectState : com.android.ide.eclipse.adt.internal.sdk.Sdk.sProjectStateMap.values()) { if ((projectState != renamedState) && (projectState.isMissingLibraries())) { org.eclipse.core.runtime.IPath oldRelativePath = com.android.ide.eclipse.adt.internal.sdk.Sdk.makeRelativeTo(from, projectState.getProject().getFullPath()); org.eclipse.core.runtime.IPath newRelativePath = com.android.ide.eclipse.adt.internal.sdk.Sdk.makeRelativeTo(project.getFullPath(), projectState.getProject().getFullPath()); com.android.ide.eclipse.adt.internal.sdk.ProjectState.LibraryState libState = projectState.updateLibrary(oldRelativePath.toString(), newRelativePath.toString(), renamedState); if (libState != null) { com.android.ide.eclipse.adt.internal.sdk.Sdk.LinkLibraryBundle bundle = new com.android.ide.eclipse.adt.internal.sdk.Sdk.LinkLibraryBundle(); bundle.mProject = projectState.getProject(); bundle.<START_MOD>mNewLibraryProjects<END_MOD> = new org.eclipse.core.resources.IProject[]{ libState.getProjectState().getProject() }; bundle.mCleanupCPE = false; startActionBundle(bundle); } } } } } }