PR_ID,filename,method_idx_x,codebase,codebase-hash,initial,initial-hash,codebase-signature,init-signature,total_patchsets,method_idx,approved,approved-hash,approved-signature,row-num-right,init-ver-len,app-ver-len
91995,luni_src_main_java_libcore_io_ForwardingOs.java,8.0,"public int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws java.io.InterruptedIOException, libcore.io.ErrnoException { return os.writev(fd, buffers, offsets, byteCounts); }",d789d983a23cf9aee93eb7c5544b7bd0464d9aff,"public int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws android.os.ErrnoException, java.io.InterruptedIOException { return os.writev(fd, buffers, offsets, byteCounts); }",cf05644f3e8ad3c2c2a981f4c51d9789573fcd0f,"writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])","writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])",3,9,"public int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws android.system.ErrnoException, java.io.InterruptedIOException { return os.writev(fd, buffers, offsets, byteCounts); }",db1c565e4980004721988fd5c8776aa8d862cc63,"writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])",170496,61,61
628453,ojluni_src_main_java_java_lang_System.java,50.0,"public static void arraycopy(float[] src, int srcPos, float[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_FLOAT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyFloatUnchecked(src, srcPos, dst, dstPos, length); } }",257503f5fd3804aac364b1b32666151668a89c0f,"private static void arraycopy(float[] src, int srcPos, float[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_FLOAT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyFloatUnchecked(src, srcPos, dst, dstPos, length); } }",b1c4a3c65cbecdd97a46a7932143bada7732948b,"arraycopy(float[],int,float[],int,int)","arraycopy(float[],int,float[],int,int)",6,50,"@java.lang.SuppressWarnings(""unused"") private static void arraycopy(float[] src, int srcPos, float[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_FLOAT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyFloatUnchecked(src, srcPos, dst, dstPos, length); } }",ff1990277c0ff7885c34947edc5cbcae24a64562,"arraycopy(float[],int,float[],int,int)",161260,328,337
344071,tests_telephonytests_src_com_android_internal_telephony_Sms7BitEncodingTranslatorTest.java,0.0,"@android.platform.test.annotations.Postsubmit @org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCommonTranslate() { java.lang.String s = null; try { s = new java.lang.String(new byte[]{ ((byte) (0)), ((byte) (211)), ((byte) (0)), ((byte) (207)), ((byte) (1)), ((byte) (4)) }, ""UTF-16""); } catch (java.io.UnsupportedEncodingException e) { fail(e.toString()); } assertEquals(""OIA"", com.android.internal.telephony.Sms7BitEncodingTranslator.translate(s)); }",be58bac7e7369f05fc3d912565cdb7ce26c1fe24,"@com.android.internal.telephony.FlakyTest @android.platform.test.annotations.Postsubmit @org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCommonTranslate() { java.lang.String s = null; try { s = new java.lang.String(new byte[]{ ((byte) (0)), ((byte) (211)), ((byte) (0)), ((byte) (207)), ((byte) (1)), ((byte) (4)) }, ""UTF-16""); } catch (java.io.UnsupportedEncodingException e) { fail(e.toString()); } assertEquals(""OIA"", com.android.internal.telephony.Sms7BitEncodingTranslator.translate(s)); }",533fa26c7b6667d97f14a53fe178b62fd126c0aa,testCommonTranslate(),testCommonTranslate(),3,0,"@android.support.test.filters.FlakyTest @android.platform.test.annotations.Postsubmit @org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testCommonTranslate() { java.lang.String s = null; try { s = new java.lang.String(new byte[]{ ((byte) (0)), ((byte) (211)), ((byte) (0)), ((byte) (207)), ((byte) (1)), ((byte) (4)) }, ""UTF-16""); } catch (java.io.UnsupportedEncodingException e) { fail(e.toString()); } assertEquals(""OIA"", com.android.internal.telephony.Sms7BitEncodingTranslator.translate(s)); }",e6d26a93c804d5af73b3cbf2ad565a04c0a6cff5,testCommonTranslate(),262825,167,167
108516,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,68.0,"public void test_parseLjava_lang_String_Ljava_text_ParsePosition_2() { java.text.DecimalFormat form = ((java.text.DecimalFormat) (java.text.DecimalFormat.getInstance(java.util.Locale.US))); form.setParseIntegerOnly(true); form.setParseBigDecimal(true); final java.lang.String doubleMax2 = ""359,538,626,972,463,141,629,054,847,463,408,"" + (((((""713,596,141,135,051,689,993,197,834,953,606,314,521,560,057,077,"" + ""521,179,117,265,533,756,343,080,917,907,028,764,928,468,642,653,"") + ""778,928,365,536,935,093,407,075,033,972,099,821,153,102,564,152,"") + ""490,980,180,778,657,888,151,737,016,910,267,884,609,166,473,806,"") + ""445,896,331,617,118,664,246,696,549,595,652,408,289,446,337,476,"") + ""354,361,838,599,762,500,808,052,368,249,716,736""); java.lang.Number number = form.parse(doubleMax2, new java.text.ParsePosition(0)); assertTrue((number instanceof java.math.BigDecimal)); java.math.BigDecimal result = ((java.math.BigDecimal) (number)); assertEquals(new java.math.BigDecimal(java.lang.Double.MAX_VALUE).add(new java.math.BigDecimal(java.lang.Double.MAX_VALUE)), result); }",c8a1f7e56a176fa4fbbb389ceec8176dc03746ae,"public void testParse_largeBigDecimal() { java.text.DecimalFormat form = ((java.text.DecimalFormat) (java.text.DecimalFormat.getInstance(java.util.Locale.US))); form.setParseIntegerOnly(true); form.setParseBigDecimal(true); final java.lang.String doubleMax2 = ""359,538,626,972,463,141,629,054,847,463,408,"" + (((((""713,596,141,135,051,689,993,197,834,953,606,314,521,560,057,077,"" + ""521,179,117,265,533,756,343,080,917,907,028,764,928,468,642,653,"") + ""778,928,365,536,935,093,407,075,033,972,099,821,153,102,564,152,"") + ""490,980,180,778,657,888,151,737,016,910,267,884,609,166,473,806,"") + ""445,896,331,617,118,664,246,696,549,595,652,408,289,446,337,476,"") + ""354,361,838,599,762,500,808,052,368,249,716,736""); java.lang.Number number = form.parse(doubleMax2, new java.text.ParsePosition(0)); assertTrue((number instanceof java.math.BigDecimal)); java.math.BigDecimal result = ((java.math.BigDecimal) (number)); assertEquals(new java.math.BigDecimal(java.lang.Double.MAX_VALUE).add(new java.math.BigDecimal(java.lang.Double.MAX_VALUE)), result); }",b62773b4054a480c0676edd862a113c8fd5e20c7,test_parseLjava_lang_String_Ljava_text_ParsePosition_2(),testParse_largeBigDecimal(),2,13,"public void test_parse_largeBigDecimal() { java.text.DecimalFormat form = ((java.text.DecimalFormat) (java.text.DecimalFormat.getInstance(java.util.Locale.US))); form.setParseIntegerOnly(true); form.setParseBigDecimal(true); final java.lang.String doubleMax2 = ""359,538,626,972,463,141,629,054,847,463,408,"" + (((((""713,596,141,135,051,689,993,197,834,953,606,314,521,560,057,077,"" + ""521,179,117,265,533,756,343,080,917,907,028,764,928,468,642,653,"") + ""778,928,365,536,935,093,407,075,033,972,099,821,153,102,564,152,"") + ""490,980,180,778,657,888,151,737,016,910,267,884,609,166,473,806,"") + ""445,896,331,617,118,664,246,696,549,595,652,408,289,446,337,476,"") + ""354,361,838,599,762,500,808,052,368,249,716,736""); java.lang.Number number = form.parse(doubleMax2, new java.text.ParsePosition(0)); assertTrue((number instanceof java.math.BigDecimal)); java.math.BigDecimal result = ((java.math.BigDecimal) (number)); assertEquals(new java.math.BigDecimal(java.lang.Double.MAX_VALUE).add(new java.math.BigDecimal(java.lang.Double.MAX_VALUE)), result); }",790a5ab0f5ecf38897c5cccd3f6e2b0907dc314b,test_parse_largeBigDecimal(),84426,394,395
484817,services_net_java_android_net_util_BlockingSocketReader.java,2.0,"private final void mainLoop() { while (isRunning()) { final int bytesRead; try { bytesRead = android.system.Os.read(mSocket, mPacket, 0, mPacket.length); if (bytesRead < 1) { if (isRunning()) logError(""Socket closed, exiting"", null); break; } (mPacketsReceived)++; } catch (android.system.ErrnoException e) { if ((e.errno) != (android.system.OsConstants.EINTR)) { if (isRunning()) logError(""read error: "", e); break; } continue; } catch (java.io.IOException ioe) { if (isRunning()) logError(""read error: "", ioe); continue; } try { handlePacket(mPacket, bytesRead); } catch (java.lang.Exception e) { logError(""Unexpected exception: "", e); break; } } stop(); onExit(); }",73d6a25f48238d5fe86305398ffc2f9e19fff126,"private final void mainLoop() { final android.os.Looper looper = android.net.util.BlockingSocketReader.getMyLooper(); final android.os.MessageQueue queue = looper.getQueue(); final int eventsOfInterest = (EVENT_INPUT) | (EVENT_ERROR); queue.addOnFileDescriptorEventListener(mSocket, eventsOfInterest, new android.os.MessageQueue.OnFileDescriptorEventListener() { @java.lang.Override public int onFileDescriptorEvents(java.io.FileDescriptor fd, int events) { android.util.Log.e(""XXX"", (((""fd "" + fd) + "" got "") + events)); final boolean hasInput = (events & (EVENT_INPUT)) != 0; android.util.Log.e(""XXX"", (""hasInput "" + hasInput)); final boolean hasError = (events & (EVENT_ERROR)) != 0; android.util.Log.e(""XXX"", (""hasError "" + hasError)); if (hasError || (hasInput && (!(handleInput())))) { stop(); queue.removeOnFileDescriptorEventListener(fd); onExit(); looper.quitSafely(); return 0; } return eventsOfInterest; } }); looper.loop(); }",385666b59a973262128e65a839cc5888b62e8236,mainLoop(),mainLoop(),13,0,"private void createAndRegisterFd() { if ((mFd) != null) return; try { mFd = createFd(); if ((mFd) != null) { libcore.io.IoUtils.setBlocking(mFd, false); } } catch (java.lang.Exception e) { logError(""Failed to create socket: "", e); android.net.util.BlockingSocketReader.closeFd(mFd); mFd = null; return; } if ((mFd) == null) return; mQueue.addOnFileDescriptorEventListener(mFd, android.net.util.BlockingSocketReader.FD_EVENTS, new android.os.MessageQueue.OnFileDescriptorEventListener() { @java.lang.Override public int onFileDescriptorEvents(java.io.FileDescriptor fd, int events) { if ((!(isRunning())) || (!(handleInput()))) { unregisterAndDestroyFd(); return android.net.util.BlockingSocketReader.UNREGISTER_THIS_FD; } return android.net.util.BlockingSocketReader.FD_EVENTS; } }); onStart(); }",1830c40558eef118633e6279f4427313e4a4b5c4,createAndRegisterFd(),236023,255,240
152275,jack-tests_tests_com_android_jack_fileconflict_FileConflictTests.java,3.0,"@org.junit.Test public void test002b() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); try { jackOutput = runTest002(false, ""fail"", errOut, true, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { junit.framework.Assert.assertTrue(((e.getCause()) instanceof com.android.jack.library.LibraryReadingException)); junit.framework.Assert.assertTrue(((e.getCause().getCause()) instanceof com.android.jack.resource.ResourceImportConflictException)); java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains(""Resource in"")); junit.framework.Assert.assertTrue(errString.contains(""rsc/Resource1"")); junit.framework.Assert.assertTrue(errString.contains(""has already been imported"")); } }",f39b5a3b035c1bb27c75437effd109b573268819,"@org.junit.experimental.categories.Category(com.android.jack.test.category.KnownBugs.class) @org.junit.Test public void test002b() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); try { jackOutput = runTest002(false, ""fail"", errOut, true, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { junit.framework.Assert.assertTrue(((e.getCause()) instanceof com.android.jack.library.LibraryReadingException)); junit.framework.Assert.assertTrue(((e.getCause().getCause()) instanceof com.android.jack.resource.ResourceImportConflictException)); java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains(""Resource in"")); junit.framework.Assert.assertTrue(errString.contains(""rsc/Resource1"")); junit.framework.Assert.assertTrue(errString.contains(""has already been imported"")); } }",e33c27debd4f4b4e3797b98d6f803790365c33bf,test002b(),test002b(),2,3,"@org.junit.Test @org.junit.Ignore public void test002b() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); try { jackOutput = runTest002(false, ""fail"", errOut, true, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { junit.framework.Assert.assertTrue(((e.getCause()) instanceof com.android.jack.library.LibraryReadingException)); junit.framework.Assert.assertTrue(((e.getCause().getCause()) instanceof com.android.jack.resource.ResourceImportConflictException)); java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains(""Resource in"")); junit.framework.Assert.assertTrue(errString.contains(""rsc/Resource1"")); junit.framework.Assert.assertTrue(errString.contains(""has already been imported"")); } }",d2fea3a5aef51b820b78f02198d63c2a4e3ee47f,test002b(),22231,237,216
128670,src_com_android_nfc_cardemulation_RegisteredT3tIdentifiersCache.java,,,,public void onNfcEnabled() { synchronized(mLock) { mNfcEnabled = true; updateRoutingLocked(); } },c970027fae65c017639e66c944d2bd6fb136612b,,onNfcEnabled(),10,3,public void onUserSwitched() { synchronized(mLock) { mForegroundT3tIdentifiersCache.clear(); updateRoutingLocked(); mEnabledForegroundService = null; } },78fbe840549d6833af1fe66fbe6a788e5bbb417a,onUserSwitched(),148745,27,37
113971,build-system_gradle_src_test_groovy_com_android_build_gradle_internal_test_fixture_GradleTestProject.java,2.0,private static void deleteRecursive(java.io.File root) { if (root.exists()) { if (root.isDirectory()) { for (java.io.File file : root.listFiles()) { com.android.build.gradle.internal.test.fixture.GradleProjectTestRule.deleteRecursive(file); } } assertTrue(root.delete()); } },31f7352dd19a983b1a4b93171680515b2a72b4b8,private static void deleteRecursive(java.io.File root) { if (root.exists()) { if (root.isDirectory()) { java.io.File[] files = root.listFiles(); if (files != null) { for (java.io.File file : files) { com.android.build.gradle.internal.test.fixture.GradleTestProject.deleteRecursive(file); } } } assertTrue(root.delete()); } },bcc2ff6c642f0ac6ed224b10c4e7bb0f52be279a,deleteRecursive(java.io.File),deleteRecursive(java.io.File),5,3,private static void deleteRecursive(java.io.File root) { if (root.exists()) { if (root.isDirectory()) { java.io.File[] files = root.listFiles(); if (files != null) { for (java.io.File file : files) { com.android.test.common.fixture.GradleTestProject.deleteRecursive(file); } } } assertTrue(root.delete()); } },5b2390f66a59d1ad735b98bc66c582201fe6f948,deleteRecursive(java.io.File),464107,95,91
149371,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_scope_VariantScope.java,66.0,public void setJavaCompileTask(@com.android.annotations.Nullable com.android.build.gradle.internal.scope.AndroidTask<? extends org.gradle.api.tasks.compile.AbstractCompile> javaCompileTask) { this.javaCompileTask = javaCompileTask; },b605c99219b8b9e92a00a3e78416d015371610cc,public void setActiveJavaCompileTask(@com.android.annotations.NonNull com.android.build.gradle.internal.scope.AndroidTask<? extends org.gradle.api.tasks.compile.AbstractCompile> javaCompileTask) { this.activeJavaCompileTask = javaCompileTask; },8a749f40a5ef2e6ed0156d3269e6ba99a55b2bbf,setJavaCompileTask(com.android.build.gradle.internal.scope.AndroidTask),setActiveJavaCompileTask(com.android.build.gradle.internal.scope.AndroidTask),4,58,public void setJavaCompilerTask(@com.android.annotations.NonNull com.android.build.gradle.internal.scope.AndroidTask<? extends org.gradle.api.tasks.compile.AbstractCompile> javaCompileTask) { this.javaCompilerTask = javaCompileTask; },b977c8bdb1ac7547ea2bd5c0989bae4c5d19599d,setJavaCompilerTask(com.android.build.gradle.internal.scope.AndroidTask),385746,61,58
18960,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_common_platformData_ViewClassInfo.java,5.0,public void setSuperClass(com.android.ide.eclipse.adt.internal.resources.ViewClassInfo superClass) { mSuperClass = superClass; },eee370137927e995a3cd8f6ac33770d9ea521f25,public void setSuperClass(com.android.ide.common.platformData.ViewClassInfo superClass) { mSuperClass = superClass; },3eee80c25188f74fd88fe5ca5d6809169b37ec2c,setSuperClass(com.android.ide.eclipse.adt.internal.resources.ViewClassInfo),setSuperClass(com.android.ide.common.platformData.ViewClassInfo),2,5,public void setSuperClass(com.android.ide.common.resources.platform.ViewClassInfo superClass) { mSuperClass = superClass; },951254c8c1a55035e4cfdf7e5049a23f937c8f5c,setSuperClass(com.android.ide.common.resources.platform.ViewClassInfo),136334,29,30
305308,jack_src_com_android_jack_jayce_v0002_nodes_NDeclaredType.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.Collection<com.android.jack.jayce.v0002.nodes.NField> getFields() { return fields.values(); },caac5a187dd7bedc4750dbf0e1226d622b02fd5f,,getFields(),2,1,@javax.annotation.Nonnull public java.util.Collection<com.android.jack.jayce.v0002.nodes.NField> getFields() { return fields.values(); },40c02146213cbcd33d0385cf81532e71796b5449,getFields(),33458,35,41
305190,ojluni_src_main_java_java_lang_invoke_Transformers.java,30.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.lang.Object longArray(dalvik.system.EmulatedStackFrame.StackFrameReader reader, java.lang.Class<?>[] ptypes, int offset, int length) { long[] arityArray = new long[length]; for (int i = 0; i < length; ++i) { java.lang.Class<?> argumentType = ptypes[(i + offset)]; switch (sun.invoke.util.Wrapper.basicTypeChar(argumentType)) { case 'J' : { arityArray[i] = reader.nextLong(); break; } case 'I' : { arityArray[i] = reader.nextInt(); break; } case 'S' : { arityArray[i] = reader.nextShort(); break; } case 'B' : { arityArray[i] = reader.nextByte(); break; } default : { arityArray[i] = ((long) (reader.nextReference(argumentType))); break; } } } return arityArray; }",9466939e74920e642a4f84659221329b13dca95e,,"longArray(dalvik.system.EmulatedStackFrame.StackFrameReader,java.lang.Class[],int,int)",5,31,"private static java.lang.Object longArray(dalvik.system.EmulatedStackFrame.StackFrameReader reader, java.lang.Class<?>[] ptypes, int offset, int length) { long[] arityArray = new long[length]; for (int i = 0; i < length; ++i) { java.lang.Class<?> argumentType = ptypes[(i + offset)]; switch (sun.invoke.util.Wrapper.basicTypeChar(argumentType)) { case 'J' : { arityArray[i] = reader.nextLong(); break; } case 'I' : { arityArray[i] = reader.nextInt(); break; } case 'S' : { arityArray[i] = reader.nextShort(); break; } case 'B' : { arityArray[i] = reader.nextByte(); break; } default : { arityArray[i] = ((java.lang.Long) (reader.nextReference(argumentType))); break; } } } return arityArray; }",20969ea8804f117e9d5efc198a80e6621b49c7ed,"longArray(dalvik.system.EmulatedStackFrame.StackFrameReader,java.lang.Class[],int,int)",383847,226,230
21409,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_ui_ResourceChooser.java,3.0,"@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { super.widgetSelected(e); if ((mResourceType) == (com.android.resources.ResourceType.STRING)) { createNewString(); } else { assert com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.isValueResource(mResourceType); java.lang.String newName = createNewValue(mResourceType); if (newName != null) { com.android.ide.eclipse.adt.internal.resources.ResourceItem[] items = setupResourceList(); selectItemName(newName, items); } } }",8d960e9fd9475b45e5dcabc3962c912943028efb,"@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { super.widgetSelected(e); if ((mResourceType) == (com.android.resources.ResourceType.STRING)) { createNewString(); } else { assert com.android.ide.eclipse.adt.internal.wizards.newxmlfile.ResourceNameValidator.isValueBasedResourceType(mResourceType); java.lang.String newName = createNewValue(mResourceType); if (newName != null) { com.android.ide.eclipse.adt.internal.resources.ResourceItem[] items = setupResourceList(); selectItemName(newName, items); } } }",ebcfb8b47d4f32f44f24eea074cdcc6dee118ded,widgetSelected(org.eclipse.swt.events.SelectionEvent),widgetSelected(org.eclipse.swt.events.SelectionEvent),2,3,"@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { super.widgetSelected(e); if ((mResourceType) == (com.android.resources.ResourceType.STRING)) { createNewString(); } else { assert com.android.ide.eclipse.adt.internal.resources.ResourceNameValidator.isValueBasedResourceType(mResourceType); java.lang.String newName = createNewValue(mResourceType); if (newName != null) { com.android.ide.eclipse.adt.internal.resources.ResourceItem[] items = setupResourceList(); selectItemName(newName, items); } } }",3e10c08f73845bef4982373d9e343b3db10e1d5b,widgetSelected(org.eclipse.swt.events.SelectionEvent),257271,147,142
110490,jack_src_com_android_jack_Jack.java,13.0,"private static void putInJackClasspath(@javax.annotation.Nonnull java.util.List<java.io.File> jackFiles, @javax.annotation.Nonnull com.android.jack.ir.ast.JPackage rootPackage, @javax.annotation.Nonnull com.android.jack.lookup.JPhantomLookup phantomJNodeLookup, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks) { com.android.sched.util.config.ReflectFactory<com.android.jack.jayce.JaycePackageLoader> factory = com.android.sched.util.config.ThreadConfig.get(com.android.jack.Jack.CLASSPATH_POLICY); for (final java.io.File jackFile : jackFiles) { try { com.android.sched.vfs.InputVDir vDir = com.android.jack.Jack.wrapAsVDir(jackFile, hooks); com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create(vDir, phantomJNodeLookup); rootPackage.addLoader(rootPLoader); } catch (java.io.IOException ioException) { com.android.jack.Jack.logger.log(java.util.logging.Level.WARNING, ""Bad classpath entry ignored: {0}"", ioException.getMessage()); } } }",0911ccedaa03fa0349e231f883d6c0931558a915,"private static void putInJackClasspath(@javax.annotation.Nonnull java.util.List<java.io.File> jackFiles, @javax.annotation.Nonnull com.android.jack.ir.ast.JPackage rootPackage, @javax.annotation.Nonnull com.android.jack.lookup.JPhantomLookup phantomJNodeLookup, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks) { com.android.sched.util.config.ReflectFactory<com.android.jack.jayce.JaycePackageLoader> factory = com.android.sched.util.config.ThreadConfig.get(com.android.jack.Jack.CLASSPATH_POLICY); for (final java.io.File jackFile : jackFiles) { try { com.android.sched.vfs.InputRootVDir vDir = com.android.jack.Jack.wrapAsVDir(jackFile, hooks); com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create(new com.android.jack.library.JackLibrary(vDir), phantomJNodeLookup); rootPackage.addLoader(rootPLoader); } catch (java.io.IOException ioException) { com.android.jack.Jack.logger.log(java.util.logging.Level.WARNING, ""Bad classpath entry ignored: {0}"", ioException.getMessage()); } } }",4cb153dd9b33f4dfcf8566b50248b64c302d62b1,"putInJackClasspath(java.util.List,com.android.jack.ir.ast.JPackage,com.android.jack.lookup.JPhantomLookup,com.android.sched.util.RunnableHooks)","putInJackClasspath(java.util.List,com.android.jack.ir.ast.JPackage,com.android.jack.lookup.JPhantomLookup,com.android.sched.util.RunnableHooks)",4,13,"private static void putInJackClasspath(@javax.annotation.Nonnull java.util.List<java.io.File> jackFiles, @javax.annotation.Nonnull com.android.jack.ir.ast.JPackage rootPackage, @javax.annotation.Nonnull com.android.jack.lookup.JPhantomLookup phantomJNodeLookup, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks) { com.android.sched.util.config.ReflectFactory<com.android.jack.jayce.JaycePackageLoader> factory = com.android.sched.util.config.ThreadConfig.get(com.android.jack.Jack.CLASSPATH_POLICY); for (final java.io.File jackFile : jackFiles) { try { com.android.sched.vfs.InputRootVDir vDir = com.android.jack.Jack.wrapAsVDir(jackFile, hooks); com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create(new com.android.jack.library.InputJackLibrary(vDir), phantomJNodeLookup); rootPackage.addLoader(rootPLoader); } catch (java.io.IOException ioException) { com.android.jack.Jack.logger.log(java.util.logging.Level.WARNING, ""Bad classpath entry ignored: {0}"", ioException.getMessage()); } } }",b27608f4bd4198cce1d47bc2f8ba4e20bd094c35,"putInJackClasspath(java.util.List,com.android.jack.ir.ast.JPackage,com.android.jack.lookup.JPhantomLookup,com.android.sched.util.RunnableHooks)",334757,311,312
396733,luni_src_test_java_libcore_java_net_FtpURLConnectionTest.java,8.0,"public void testInputUrl() throws java.lang.Exception { byte[] fileContents = ""abcdef 1234567890"".getBytes(java.nio.charset.StandardCharsets.UTF_8); java.net.URL fileUrl = addFileEntry(libcore.java.net.FtpURLConnectionTest.FILE_PATH, fileContents); java.net.URLConnection connection = fileUrl.openConnection(); libcore.java.net.FtpURLConnectionTest.assertContents(fileContents, connection.getInputStream()); }",708955a4c96fe62090560c8188201ec3b1911a69,"public void testInputUrl() throws java.lang.Exception { byte[] fileContents = ""abcdef 1234567890"".getBytes(java.nio.charset.StandardCharsets.UTF_8); addFileEntry(libcore.java.net.FtpURLConnectionTest.FILE_PATH, fileContents); java.net.URL fileUrl = getFileUrlWithCredentials(libcore.java.net.FtpURLConnectionTest.USER, libcore.java.net.FtpURLConnectionTest.PASSWORD, libcore.java.net.FtpURLConnectionTest.FILE_PATH); java.net.URLConnection connection = fileUrl.openConnection(); libcore.java.net.FtpURLConnectionTest.assertContents(fileContents, connection.getInputStream()); }",0313637e9916881c2f9b84d314350fa681f59e5d,testInputUrl(),testInputUrl(),2,7,"public void testInputUrl() throws java.lang.Exception { byte[] fileContents = ""abcdef 1234567890"".getBytes(java.nio.charset.StandardCharsets.UTF_8); addFileEntry(libcore.java.net.FtpURLConnectionTest.FILE_PATH, fileContents); java.net.URL fileUrl = getFileUrlWithCredentials(libcore.java.net.FtpURLConnectionTest.VALID_USER, libcore.java.net.FtpURLConnectionTest.VALID_PASSWORD, libcore.java.net.FtpURLConnectionTest.FILE_PATH); java.net.URLConnection connection = fileUrl.openConnection(); libcore.java.net.FtpURLConnectionTest.assertContents(fileContents, connection.getInputStream()); }",a2ea348724b016e4c8a81807ef10a8027e6734a2,testInputUrl(),377244,146,150
328878,jack_src_com_android_jack_transformations_ast_string_parameterrefiners_GetMethodParameterRefiner.java,2.0,"@java.lang.Override @javax.annotation.CheckForNull public com.android.jack.ir.ast.JAbstractStringLiteral getRefinedExpression(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call, @javax.annotation.Nonnull com.android.jack.ir.ast.JStringLiteral paramToRefine) { com.android.jack.ir.ast.JMethodNameLiteral strMethodLiteral = null; java.lang.String methodName = paramToRefine.getValue(); com.android.jack.ir.ast.JDefinedClassOrInterface type = getTypeFromClassLiteralExpression(call.getInstance()); java.lang.String methodSignature = getMethodSignature(call); if ((type != null) && (methodSignature != null)) { com.android.jack.ir.ast.JMethod method = lookupMethod(type, methodSignature); if (method != null) { strMethodLiteral = new com.android.jack.ir.ast.JMethodNameLiteral(paramToRefine.getSourceInfo(), method); assert methodName.equals(strMethodLiteral.getValue()); } } return strMethodLiteral; }",d4c8b74b672a19243e136ee173ce3690a0ea0f44,"@java.lang.Override @javax.annotation.CheckForNull public com.android.jack.ir.ast.JAbstractStringLiteral getRefinedExpression(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call, @javax.annotation.Nonnull com.android.jack.ir.ast.JStringLiteral paramToRefine) { com.android.jack.ir.ast.JMethodNameLiteral strMethodLiteral = null; java.lang.String methodName = paramToRefine.getValue(); com.android.jack.ir.ast.JDefinedClassOrInterface type = getTypeFromClassLiteralExpression(call.getInstance()); java.lang.String methodSignature = getMethodSignature(methodName, call); if ((type != null) && (methodSignature != null)) { com.android.jack.ir.ast.JMethod method = lookupMethod(type, methodSignature); if (method != null) { strMethodLiteral = new com.android.jack.ir.ast.JMethodNameLiteral(paramToRefine.getSourceInfo(), method); assert methodName.equals(strMethodLiteral.getValue()); } } return strMethodLiteral; }",fbd9ea60bf88e3675e4512d6e854fbaa5498ffe8,"getRefinedExpression(com.android.jack.ir.ast.JMethodCall,com.android.jack.ir.ast.JStringLiteral)","getRefinedExpression(com.android.jack.ir.ast.JMethodCall,com.android.jack.ir.ast.JStringLiteral)",4,1,"@java.lang.Override @javax.annotation.CheckForNull public com.android.jack.ir.ast.JAbstractStringLiteral getRefinedExpression(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call, @javax.annotation.Nonnull com.android.jack.ir.ast.JStringLiteral paramToRefine) { com.android.jack.ir.ast.JMethodNameLiteral strMethodLiteral = null; java.lang.String methodName = paramToRefine.getValue(); com.android.jack.ir.ast.JDefinedClassOrInterface type = getTypeFromClassLiteralExpression(call.getInstance()); java.lang.String methodSignature = getMethodSignature(call); if ((type != null) && (methodSignature != null)) { com.android.jack.ir.ast.JMethod method = lookupMethod(type, methodSignature); if (method != null) { strMethodLiteral = new com.android.jack.ir.ast.JMethodNameLiteral(paramToRefine.getSourceInfo(), method); assert methodName.equals(strMethodLiteral.getValue()); } } return strMethodLiteral; }",d4c8b74b672a19243e136ee173ce3690a0ea0f44,"getRefinedExpression(com.android.jack.ir.ast.JMethodCall,com.android.jack.ir.ast.JStringLiteral)",429615,243,241
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,40.0,"public void testIke() throws java.lang.Exception { java.net.InetAddress localAddr = java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr);android.net.IpSecTransform transform = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, spi, encapSocket, localAddr)) { java.io.FileDescriptor sock = null; try { sock = android.net.cts.IpSecManagerTest.getBoundUdpSocket(localAddr); int port = android.net.cts.IpSecManagerTest.getPort(sock); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_OUT, transform); byte[] header = new byte[]{ 1, 1, 1, 1 }; java.lang.String message = ""Sample ESP Packet""; byte[] data = ((new java.lang.String(header)) + message).getBytes(""UTF-8""); android.system.Os.sendto(sock, data, 0, data.length, 0, localAddr, encapSocket.getPort()); header = new byte[]{ 0, 0, 0, 0 }; message = ""Sample IKE Packet""; data = ((new java.lang.String(header)) + message).getBytes(""UTF-8""); android.system.Os.sendto(encapSocket.getSocket(), data, 0, data.length, 0, localAddr, encapSocket.getPort()); byte[] in = new byte[4]; in[0] = 1; android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertTrue(""Encap socket received UDP-encap-ESP data despite invalid SPIs"", java.util.Arrays.equals(header, in)); mISM.removeTransportModeTransforms(sock); } finally { if (sock != null) { android.system.Os.close(sock); } } } }",f5200a9c7bf1c917c5bd4510eae710a296e465d2,"public void testIke() throws java.lang.Exception { java.net.InetAddress localAddr = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr);android.net.IpSecTransform transform = android.net.cts.IpSecManagerTest.buildIpSecTransform(mContext, spi, encapSocket, localAddr)) { java.io.FileDescriptor sock = null; try { sock = android.net.cts.IpSecManagerTest.getBoundUdpSocket(localAddr); int port = getPort(sock); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_OUT, transform); byte[] header = new byte[]{ 1, 1, 1, 1 }; java.lang.String message = ""Sample ESP Packet""; byte[] data = ((new java.lang.String(header)) + message).getBytes(""UTF-8""); android.system.Os.sendto(sock, data, 0, data.length, 0, localAddr, encapSocket.getPort()); header = new byte[]{ 0, 0, 0, 0 }; message = ""Sample IKE Packet""; data = ((new java.lang.String(header)) + message).getBytes(""UTF-8""); android.system.Os.sendto(encapSocket.getSocket(), data, 0, data.length, 0, localAddr, encapSocket.getPort()); byte[] in = new byte[4]; in[0] = 1; android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertTrue(""Encap socket received UDP-encap-ESP data despite invalid SPIs"", java.util.Arrays.equals(header, in)); mISM.removeTransportModeTransforms(sock); } finally { if (sock != null) { android.system.Os.close(sock); } } } }",5ff0f4eaeed5bc41317f5066d88b4eafb4e73b12,testIke(),testIke(),15,62,"public void testIke() throws java.lang.Exception { java.net.InetAddress localAddr = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket();android.net.IpSecManager.SecurityParameterIndex spi = mISM.allocateSecurityParameterIndex(localAddr);android.net.IpSecTransform transform = buildIpSecTransform(mContext, spi, encapSocket, localAddr)) { java.io.FileDescriptor sock = null; try { sock = android.net.cts.IpSecManagerTest.getBoundUdpSocket(localAddr); int port = getPort(sock); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_IN, transform); mISM.applyTransportModeTransform(sock, IpSecManager.DIRECTION_OUT, transform); byte[] header = new byte[]{ 1, 1, 1, 1 }; java.lang.String message = ""Sample ESP Packet""; byte[] data = ((new java.lang.String(header)) + message).getBytes(""UTF-8""); android.system.Os.sendto(sock, data, 0, data.length, 0, localAddr, encapSocket.getPort()); header = new byte[]{ 0, 0, 0, 0 }; message = ""Sample IKE Packet""; data = ((new java.lang.String(header)) + message).getBytes(""UTF-8""); android.system.Os.sendto(encapSocket.getFileDescriptor(), data, 0, data.length, 0, localAddr, encapSocket.getPort()); byte[] in = new byte[4]; in[0] = 1; android.system.Os.read(encapSocket.getFileDescriptor(), in, 0, in.length); assertTrue(""Encap socket received UDP-encap-ESP data despite invalid SPIs"", java.util.Arrays.equals(header, in)); mISM.removeTransportModeTransforms(sock); } finally { if (sock != null) { android.system.Os.close(sock); } } } }",9279f756184b2f75dbcbcdc750bb6b5bf15e858f,testIke(),381516,478,466
516077,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_KeyguardTests.java,4.0,"public void testKeyguardHidesActivity() throws java.lang.Exception { if (!(isHandheld())) { return; } launchActivity(""TestActivity""); mAmWmState.computeState(mDevice, new java.lang.String[]{ ""TestActivity"" }); mAmWmState.assertVisibility(""TestActivity"", true); gotoKeyguard(); mAmWmState.computeState(mDevice, null); assertShowingAndNotOccluded(); mAmWmState.assertVisibility(""TestActivity"", false); unlockDevice(); }",6051af21fd70b796caee36edccf8c63896347cac,"public void testKeyguardHidesActivity() throws java.lang.Exception { if (!(isHandheld())) { return; } launchActivity(""TestActivity""); mAmWmState.computeState(mDevice, new java.lang.String[]{ ""TestActivity"" }); mAmWmState.assertVisibility(""TestActivity"", true); gotoKeyguard(); mAmWmState.waitForKeyguardShowingAndNotOccluded(mDevice); mAmWmState.computeState(mDevice, null); assertShowingAndNotOccluded(); mAmWmState.assertVisibility(""TestActivity"", false); unlockDevice(); }",4e9e0397310db387ae6c5448b76610c64901cbaa,testKeyguardHidesActivity(),testKeyguardHidesActivity(),3,4,"public void testKeyguardHidesActivity() throws java.lang.Exception { if (!(isHandheld())) { return; } launchActivity(""TestActivity""); mAmWmState.computeState(mDevice, new java.lang.String[]{ ""TestActivity"" }); mAmWmState.assertVisibility(""TestActivity"", true); gotoKeyguard(); mAmWmState.computeState(mDevice, null); assertShowingAndNotOccluded(); mAmWmState.assertVisibility(""TestActivity"", false); unlockDevice(); }",6051af21fd70b796caee36edccf8c63896347cac,testKeyguardHidesActivity(),104729,136,116
18522,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_common_layout_BaseLayout.java,,,,"protected java.lang.String findNewId(java.lang.String fqcn, java.util.Set<java.lang.String> existingIdMap) { java.lang.String name = fqcn.substring(((fqcn.lastIndexOf('.')) + 1)); for (int i = 1; i < 1000000; i++) { java.lang.String id = java.lang.String.format(""@+id/%s%02d"", name, i); if (!(existingIdMap.contains(id))) { existingIdMap.add(id); return id; } } return null; }",05acc8464f2e49b82cba993a97eb70e4ae182406,,"findNewId(java.lang.String,java.util.Set)",4,1,"protected java.lang.String findNewId(java.lang.String fqcn, java.util.Set<java.lang.String> existingIdSet) { java.lang.String name = fqcn.substring(((fqcn.lastIndexOf('.')) + 1)); for (int i = 1; i < 1000000; i++) { java.lang.String id = java.lang.String.format(""@+id/%s%02d"", name, i); if (!(existingIdSet.contains(id))) { existingIdSet.add(id); return id; } } return null; }",a5aef391785fed3d7f37c8f065b46c7897e76caa,"findNewId(java.lang.String,java.util.Set)",72597,122,122
185164,tests_java_app_src_android_aidl_tests_TestServiceClient.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void checkFileDescriptorPassing(android.aidl.tests.ITestService service) throws android.aidl.tests.TestServiceClient.TestFailException { mLog.log(""Checking that service can receive and return file descriptors...""); try { java.io.FileOutputStream fileOutputStream = openFileOutput(""test-dummy"", Context.MODE_PRIVATE); java.io.FileDescriptor descriptor = fileOutputStream.getFD(); java.io.FileDescriptor journeyed = service.RepeatFileDescriptor(descriptor); fileOutputStream.close(); java.io.FileOutputStream journeyedStream = new java.io.FileOutputStream(journeyed); java.lang.String testData = ""FrazzleSnazzleFlimFlamFlibbityGumboChops""; byte[] output = testData.getBytes(); journeyedStream.write(output); journeyedStream.close(); java.io.FileInputStream fileInputStream = openFileInput(""test-dummy""); byte[] input = new byte[output.length]; if ((fileInputStream.read(input)) != (input.length)) { mLog.logAndThrow(""Read short count from file""); } if (!(testData.equals(new java.lang.String(input)))) { mLog.logAndThrow(""Read incorrect data""); } } catch (android.os.RemoteException ex) { mLog.log(ex.toString()); mLog.logAndThrow(""Service failed to repeat a file descriptor.""); } catch (java.io.IOException ex) { mLog.log(ex.toString()); mLog.logAndThrow(""Exception while operating on temporary file""); } mLog.log(""...service can receive and return file descriptors.""); }",f36e3526c6f249d218fb9df331b56045879802d1,,checkFileDescriptorPassing(android.aidl.tests.ITestService),5,4,"private void checkFileDescriptorPassing(android.aidl.tests.ITestService service) throws android.aidl.tests.TestServiceClient.TestFailException { mLog.log(""Checking that service can receive and return file descriptors...""); try { java.io.FileOutputStream fileOutputStream = openFileOutput(""test-dummy"", Context.MODE_PRIVATE); java.io.FileDescriptor descriptor = fileOutputStream.getFD(); java.io.FileDescriptor journeyed = service.RepeatFileDescriptor(descriptor); fileOutputStream.close(); java.io.FileOutputStream journeyedStream = new java.io.FileOutputStream(journeyed); java.lang.String testData = ""FrazzleSnazzleFlimFlamFlibbityGumboChops""; byte[] output = testData.getBytes(); journeyedStream.write(output); journeyedStream.close(); java.io.FileInputStream fileInputStream = openFileInput(""test-dummy""); byte[] input = new byte[output.length]; if ((fileInputStream.read(input)) != (input.length)) { mLog.logAndThrow(""Read short count from file""); } if (!(java.util.Arrays.equals(input, output))) { mLog.logAndThrow(""Read incorrect data""); } } catch (android.os.RemoteException ex) { mLog.log(ex.toString()); mLog.logAndThrow(""Service failed to repeat a file descriptor.""); } catch (java.io.IOException ex) { mLog.log(ex.toString()); mLog.logAndThrow(""Exception while operating on temporary file""); } mLog.log(""...service can receive and return file descriptors.""); }",a12ad7d80355c93e433e023fc9150ff6eb0bd978,checkFileDescriptorPassing(android.aidl.tests.ITestService),82436,358,356
317772,hostsidetests_security_src_android_security_cts_SELinuxHostTest.java,1.0,"@com.android.compatibility.common.util.CddTest(requirement = ""9.7"") public void testAospPropertyContexts() throws java.lang.Exception { devicePcFile = java.io.File.createTempFile(""property_contexts"", "".tmp""); devicePcFile.deleteOnExit(); mDevice.pullFile(""/property_contexts"", devicePcFile); aospPcFile = copyResourceToTempFile(""/general_property_contexts""); assertFileStartsWith(aospPcFile, devicePcFile); }",d2d42966bcf311b623ef09d18b50a545db248d71,"@com.android.compatibility.common.util.CddTest(requirement = ""9.7"") public void testAospPropertyContexts() throws java.lang.Exception { devicePcFile = java.io.File.createTempFile(""property_contexts"", "".tmp""); devicePcFile.deleteOnExit(); mDevice.pullFile(""/plat_property_contexts"", devicePcFile); aospPcFile = copyResourceToTempFile(""/plat_property_contexts""); assertFileStartsWith(aospPcFile, devicePcFile); }",6355519eda42f80da5832a5e11931bb9ff178478,testAospPropertyContexts(),testAospPropertyContexts(),4,1,"@com.android.compatibility.common.util.CddTest(requirement = ""9.7"") public void testAospPropertyContexts() throws java.lang.Exception { devicePcFile = java.io.File.createTempFile(""property_contexts"", "".tmp""); devicePcFile.deleteOnExit(); mDevice.pullFile(""/plat_property_contexts"", devicePcFile); aospPcFile = copyResourceToTempFile(""/plat_property_contexts""); assertFileEquals(aospPcFile, devicePcFile); }",5c8c6707d9eef2737f6d9c72a538370b0e55af29,testAospPropertyContexts(),324144,116,115
91995,luni_src_main_java_java_io_File.java,4.0,public boolean delete() { try { Libcore.os.remove(path); return true; } catch (libcore.io.ErrnoException errnoException) { return false; } },f4d132329e91ac4bf88fbdf2dcc87416e74c33ed,public boolean delete() { try { Libcore.os.remove(path); return true; } catch (android.os.ErrnoException errnoException) { return false; } },a5c8ddb122d3e3e4abad432267ff860321b8b470,delete(),delete(),3,4,public boolean delete() { try { Libcore.os.remove(path); return true; } catch (android.system.ErrnoException errnoException) { return false; } },51c19a8723212478b086792a74cdc55483fcf981,delete(),169430,40,40
230812,ojluni_src_main_java_sun_nio_fs_UnixPath.java,,,,@java.lang.Override public java.lang.String toString() { if ((stringValue) == null) { stringValue = fs.normalizeJavaPath(new java.lang.String(path)); } return stringValue; },10f15f8694248be87aaedb6685d27c0facc6fb65,,toString(),8,4,@java.lang.Override public java.lang.String toString() { if ((stringValue) == null) { stringValue = fs.normalizeJavaPath(sun.nio.fs.Util.toString(path)); } return stringValue; },c734a71bc9ea326bbf38f4f03fa7f4fd6a5021ae,toString(),120265,49,52
156092,platform_platform-impl_src_com_intellij_openapi_fileEditor_impl_text_LargeFileEditorProvider.java,0.0,"@java.lang.Override public boolean accept(@org.jetbrains.annotations.NotNull com.intellij.openapi.project.Project project, @org.jetbrains.annotations.NotNull com.intellij.openapi.vfs.VirtualFile file) { if ((file.isDirectory()) || (!(file.isValid()))) { return false; } return com.intellij.psi.SingleRootFileViewProvider.isTooLargeForContentLoading(file); }",9433056a0963df22170bea7e41e9ac6da1df4393,"@java.lang.Override public boolean accept(@org.jetbrains.annotations.NotNull com.intellij.openapi.project.Project project, @org.jetbrains.annotations.NotNull com.intellij.openapi.vfs.VirtualFile file) { if (((file.isDirectory()) || (!(file.isValid()))) || (file.getFileType().isBinary())) { return false; } return com.intellij.psi.SingleRootFileViewProvider.isTooLargeForContentLoading(file); }",3efc10941324de4d9f8e2add82cd7e2accefa617,"accept(com.intellij.openapi.project.Project,com.intellij.openapi.vfs.VirtualFile)","accept(com.intellij.openapi.project.Project,com.intellij.openapi.vfs.VirtualFile)",4,0,"@java.lang.Override public boolean accept(@org.jetbrains.annotations.NotNull com.intellij.openapi.project.Project project, @org.jetbrains.annotations.NotNull com.intellij.openapi.vfs.VirtualFile file) { return (com.intellij.openapi.fileEditor.impl.text.TextEditorProvider.isTextFile(file)) && (com.intellij.psi.SingleRootFileViewProvider.isTooLargeForContentLoading(file)); }",2e071aa44d72a06a4aba909b1c8fe20eade67dd0,"accept(com.intellij.openapi.project.Project,com.intellij.openapi.vfs.VirtualFile)",7951,100,99
636720,src_com_android_bluetooth_newavrcp_helpers_MediaData.java,,,,"@java.lang.Override public boolean equals(java.lang.Object o) { if (o == null) return false; if (!(o instanceof com.android.bluetooth.avrcp.MediaData)) return false; final com.android.bluetooth.avrcp.MediaData u = ((com.android.bluetooth.avrcp.MediaData) (o)); if (!(java.util.Objects.equals(metadata, u.metadata))) { return false; } if (!(java.util.Objects.equals(queue, u.queue))) { return false; } if (!(com.android.bluetooth.avrcp.MediaPlayerWrapper.playstateEquals(state, u.state))) { return false; } return true; }",8d26d12bb220343648ddb2030e94ca7c05e11beb,,equals(java.lang.Object),4,0,"@java.lang.Override public boolean equals(java.lang.Object o) { if (o == null) return false; if (!(o instanceof com.android.bluetooth.avrcp.MediaData)) return false; final com.android.bluetooth.avrcp.MediaData u = ((com.android.bluetooth.avrcp.MediaData) (o)); if (!(com.android.bluetooth.avrcp.MediaPlayerWrapper.playstateEquals(state, u.state))) { return false; } if (!(java.util.Objects.equals(metadata, u.metadata))) { return false; } if (!(java.util.Objects.equals(queue, u.queue))) { return false; } return true; }",62d789e41e30b36e981d5c13dfbc8193788099ac,equals(java.lang.Object),429915,157,157
555179,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_VMDebug_VMDebugTest.java,,,,"public void testVMDebug() { synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); SendDebuggerActivity(); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); org.apache.harmony.jpda.tests.jdwp.VMDebug.VMDebugDebuggee.DebugResult res = org.apache.harmony.jpda.tests.jdwp.VMDebug.VMDebugDebuggee.ReadResult(synchronizer.receiveMessage()); if (res == null) { fail(""unable to deserialize result data""); } else { logWriter.println((""Recieved results: "" + res)); assertFalse(""no error expected"", res.error_occured); assertTrue(""expected active debugger!"", res.is_debugging_enabled); assertTrue(""expected active debugger connection!"", res.is_debugger_connected); if (10 > (res.last_debugger_activity)) { fail((""Expected last debugger activity to be greater then 10, was "" + (res.last_debugger_activity))); } } synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); }",dfff0812775c7bd58182ad970b7d5b733a1c6fe0,,testVMDebug(),2,2,"public void testVMDebug() { synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); sendDebuggerActivity(); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); org.apache.harmony.jpda.tests.jdwp.VMDebug.VMDebugDebuggee.DebugResult res = org.apache.harmony.jpda.tests.jdwp.VMDebug.VMDebugDebuggee.readResult(synchronizer.receiveMessage()); if (res == null) { fail(""unable to deserialize result data""); } else { logWriter.println((""Received results: "" + res)); assertFalse(""no error expected"", res.error_occured); assertTrue(""expected active debugger!"", res.is_debugging_enabled); assertTrue(""expected active debugger connection!"", res.is_debugger_connected); if ((org.apache.harmony.jpda.tests.jdwp.VMDebug.VMDebugTest.EXPECTED_WAIT_TIME) > (res.last_debugger_activity)) { fail((""Expected last debugger activity to be greater than 10, was "" + (res.last_debugger_activity))); } } synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); }",261b27be76d6c5595828339e767cf13e7ca7160a,testVMDebug(),273815,246,272
374866,telephony_java_android_telephony_TelephonyManager.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@android.telephony.RequiresPermission(android.Manifest.permission.CALL_PHONE) public void sendUssdRequest(java.lang.String ussdRequest, final android.telephony.TelephonyManager.UssdResponseCallback callback, android.telephony.Handler handler) { checkNotNull(callback, ""UssdResponseCallback cannot be null.""); final android.telephony.TelephonyManager telephonyManager = this; android.os.ResultReceiver wrappedCallback = new android.os.ResultReceiver(handler) { @java.lang.Override protected void onReceiveResult(int resultCode, android.os.Bundle ussdResponse) { android.telephony.Rlog.d(android.telephony.TelephonyManager.TAG, (""USSD:"" + resultCode)); checkNotNull(ussdResponse, ""ussdResponse cannot be null.""); android.telephony.UssdResponse response = ussdResponse.getParcelable(android.telephony.USSD_RESPONSE); if (resultCode == (USSD_RETURN_SUCCESS)) { callback.onReceiveUssdResponse(telephonyManager, response.getUssdRequest(), response.getReturnMessage()); } else { callback.onReceiveUssdResponseFailed(telephonyManager, response.getUssdRequest(), resultCode); } } }; try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony != null) { telephony.handleUssdRequest(getSubId(), ussdRequest, wrappedCallback); } } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.TelephonyManager.TAG, ""Error calling ITelephony#sendUSSDCode"", e); android.telephony.UssdResponse response = new android.telephony.UssdResponse(ussdRequest, """"); android.os.Bundle returnData = new android.os.Bundle(); returnData.putParcelable(android.telephony.USSD_RESPONSE, response); wrappedCallback.send(android.telephony.USSD_ERROR_SERVICE_UNAVAIL, returnData); } }",a3c7a84cf519996bddc1c86a156577867f2df6a6,,"sendUssdRequest(java.lang.String,android.telephony.TelephonyManager$UssdResponseCallback,android.telephony.Handler)",3,46,"@android.annotation.RequiresPermission(android.Manifest.permission.CALL_PHONE) public void sendUssdRequest(java.lang.String ussdRequest, final android.telephony.TelephonyManager.OnReceiveUssdResponseCallback callback, android.os.Handler handler) { checkNotNull(callback, ""OnReceiveUssdResponseCallback cannot be null.""); android.os.ResultReceiver wrappedCallback = new android.os.ResultReceiver(handler) { @java.lang.Override protected void onReceiveResult(int resultCode, android.os.Bundle ussdResponse) { android.telephony.Rlog.d(android.telephony.TelephonyManager.TAG, (""USSD:"" + resultCode)); checkNotNull(ussdResponse, ""ussdResponse cannot be null.""); android.telephony.UssdResponse response = ussdResponse.getParcelable(android.telephony.TelephonyManager.USSD_RESPONSE); if (resultCode == (android.telephony.TelephonyManager.USSD_RETURN_SUCCESS)) { callback.onReceiveUssdResponse(response.getUssdRequest(), response.getReturnMessage()); } else { callback.onReceiveUssdResponseFailed(response.getUssdRequest(), resultCode); } } }; try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony != null) { telephony.handleUssdRequest(getSubId(), ussdRequest, wrappedCallback); } } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.TelephonyManager.TAG, ""Error calling ITelephony#sendUSSDCode"", e); android.telephony.UssdResponse response = new android.telephony.UssdResponse(ussdRequest, """"); android.os.Bundle returnData = new android.os.Bundle(); returnData.putParcelable(android.telephony.TelephonyManager.USSD_RESPONSE, response); wrappedCallback.send(android.telephony.TelephonyManager.USSD_ERROR_SERVICE_UNAVAIL, returnData); } }",37dd364181db9f9f14972c4e3fe46317a50ee9fe,"sendUssdRequest(java.lang.String,android.telephony.TelephonyManager$OnReceiveUssdResponseCallback,android.os.Handler)",172142,454,452
21310,tests_tests_text_src_android_text_method_cts_MultiTapKeyListenerTest.java,0.0,"public void testOnKeyDown_capitalizeSentences() { android.text.method.MultiTapKeyListener keyListener = android.text.method.MultiTapKeyListener.getInstance(false, Capitalize.SENTENCES); prepareEmptyTextView(); callOnKeyDown(keyListener, KeyEvent.KEYCODE_4, 2); assertEquals(""H"", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_4, 3); assertEquals(""Hi"", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_1, 1); assertEquals(""Hi."", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_POUND, 1); assertEquals(""Hi. "", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_2, 2); assertEquals(""Hi. B"", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_9, 3); assertEquals(""Hi. By"", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_3, 2); assertEquals(""Hi. Bye"", mTextView.getText().toString()); }",6e664bce6e0cc72157084878a8b4b72e7800e2e4,"public void testOnKeyDown_capitalizeSentences() { android.text.method.MultiTapKeyListener keyListener = android.text.method.MultiTapKeyListener.getInstance(false, Capitalize.SENTENCES); prepareEmptyTextView(); callOnKeyDown(keyListener, KeyEvent.KEYCODE_4, 2); assertEquals(""H"", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_4, 3); assertEquals(""Hi"", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_1, 1); assertEquals(""Hi."", mTextView.getText().toString()); }",a1f88d44e3f64a6a57f716c4b43d8ef101109d54,testOnKeyDown_capitalizeSentences(),testOnKeyDown_capitalizeSentences(),3,0,"public void testOnKeyDown_capitalizeSentences() { android.text.method.MultiTapKeyListener keyListener = android.text.method.MultiTapKeyListener.getInstance(false, Capitalize.SENTENCES); prepareEmptyTextView(); callOnKeyDown(keyListener, KeyEvent.KEYCODE_4, 2); assertEquals(""H"", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_4, 3); assertEquals(""Hi"", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_1, 1); assertEquals(""Hi."", mTextView.getText().toString()); addSpace(); callOnKeyDown(keyListener, KeyEvent.KEYCODE_2, 2); assertEquals(""Hi. B"", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_9, 3); assertEquals(""Hi. By"", mTextView.getText().toString()); callOnKeyDown(keyListener, KeyEvent.KEYCODE_3, 2); assertEquals(""Hi. Bye"", mTextView.getText().toString()); }",ff4d58be383a6e0a26cc43a08a2a016973bd1535,testOnKeyDown_capitalizeSentences(),135173,130,214
627898,jdwp_src_test_java_org_apache_harmony_jpda_tests_framework_StreamRedirector.java,0.0,"@java.lang.Override public void run() { logWriter.println((""Redirector started: "" + (name))); try { java.lang.String line = """"; while (!(doExit)) { try { line = br.readLine(); if (line == null) break; logWriter.println((((name) + ""> "") + line)); } catch (java.lang.IllegalStateException e) { } } logWriter.println((""Redirector completed: "" + (name))); } catch (java.io.IOException e) { logWriter.printError(e); } }",284c465269868ba3fc19498ec20c721f79a13f10,"@java.lang.Override public void run() { logWriter.println((""Redirector started: "" + (name))); try { java.lang.String line = """"; while ((!(doExit)) || (br.ready())) { try { line = br.readLine(); if (line == null) break; logWriter.println((((name) + ""> "") + line)); } catch (java.lang.IllegalStateException e) { } } logWriter.println((""Redirector completed: "" + (name))); } catch (java.io.IOException e) { logWriter.printError(e); } }",570af5017c1d776693702f41bbaf0a4301476a29,run(),run(),4,0,"@java.lang.Override public void run() { logWriter.println((""Redirector started: "" + (name))); try { java.lang.StringBuilder cur = new java.lang.StringBuilder(); while ((!(doExit)) || (br.ready())) { try { int nc = br.read(); if (nc == (-1)) { if ((cur.length()) != 0) { logWriter.println((((name) + ""> "") + (cur.toString()))); cur.setLength(0); } break; } else if (nc == ((int) ('\n'))) { logWriter.println((((name) + ""> "") + (cur.toString()))); cur.setLength(0); } else { cur.appendCodePoint(nc); } } catch (java.lang.IllegalStateException e) { } } if ((cur.length()) != 0) { logWriter.println((((name) + ""> "") + (cur.toString()))); cur.setLength(0); } logWriter.println((""Redirector completed: "" + (name))); } catch (java.io.IOException e) { logWriter.printError(e); } }",9bfb695410383efba6640c1fef041f93271ffc43,run(),78618,132,244
84300,build-system_manifest-merger_src_test_java_com_android_manifmerger_ManifestMerger2Test.java,0.0,"public static junit.framework.Test suite() { junit.framework.TestSuite suite = new junit.framework.TestSuite(); suite.setName(""ManifestMergerTestSuite""); for (java.lang.String fileName : com.android.manifmerger.ManifestMerger2Test.sDataFiles) { suite.addTest(junit.framework.TestSuite.createTest(com.android.manifmerger.ManifestMerger2Test.class, fileName)); } return suite; }",952bc802d1645b176209d3786590c9274df6d4c0,"public void testValidationFailure() throws ManifestMerger2.MergeFailureException, java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException { com.android.sdklib.mock.MockLog mockLog = new com.android.sdklib.mock.MockLog(); java.lang.String input = """" + ((((((((((""<manifest\n"" + "" xmlns:android=\""http://schemas.android.com/apk/res/android\""\n"") + "" xmlns:tools=\""http://schemas.android.com/tools\""\n"") + "" package=\""com.example.lib3\"">\n"") + ""\n"") + "" <application android:label=\""@string/lib_name\"" />\n"") + ""\n"") + "" <activity android:name=\""activityOne\"" "") + "" tools:re place=\""exported\""/>\n"") + ""\n"") + ""</manifest>""); java.io.File tmpFile = inputAsFile(""ManifestMerger2Test_testValidationFailure"", input); assertTrue(tmpFile.exists()); try { com.android.manifmerger.MergingReport mergingReport = com.android.manifmerger.ManifestMerger2.newInvoker(tmpFile, mockLog).merge(); assertEquals(MergingReport.Result.ERROR, mergingReport.getResult()); assertTrue(mockLog.toString().contains(""tools:replace"")); assertFalse(mergingReport.getMergedDocument().isPresent()); } finally { assertTrue(tmpFile.delete()); } }",7c0549d2094677bcfdf26b4a1625873f7dd2e96a,suite(),testValidationFailure(),7,1,"public static junit.framework.Test suite() { junit.framework.TestSuite suite = new junit.framework.TestSuite(); suite.setName(""ManifestMergerTestSuite""); for (java.lang.String fileName : com.android.manifmerger.ManifestMerger2Test.sDataFiles) { suite.addTest(junit.framework.TestSuite.createTest(com.android.manifmerger.ManifestMerger2Test.class, fileName)); } return suite; }",952bc802d1645b176209d3786590c9274df6d4c0,suite(),343159,316,98
452581,harnesses_tradefed_tests_src_com_android_tradefed_testtype_VtsMultiDeviceTestTest.java,3.0,"public void testRunNormalInputOnWindows() throws com.android.tradefed.device.DeviceNotAvailableException, java.lang.IllegalArgumentException { java.lang.String originalName = java.lang.System.getProperty(VtsMultiDeviceTest.OS_NAME); java.lang.System.setProperty(VtsMultiDeviceTest.OS_NAME, VtsMultiDeviceTest.WINDOWS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); mTest.setRunUtil(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockRunUtil(""where"", ""python.exe"", CommandStatus.SUCCESS)); try { mTest.run(mMockInvocationListener); } finally { java.lang.System.setProperty(VtsMultiDeviceTest.OS_NAME, originalName); } }",6e15248b00badfd3386e207a57e330478b55279b,"public void testRunNormalInputOnWindows() throws com.android.tradefed.device.DeviceNotAvailableException, java.lang.IllegalArgumentException { java.lang.String originalName = java.lang.System.getProperty(VtsPythonUtil.OS_NAME); java.lang.System.setProperty(VtsPythonUtil.OS_NAME, VtsPythonUtil.WINDOWS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); mTest.setRunUtil(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockRunUtil(""where"", ""python.exe"", CommandStatus.SUCCESS)); try { mTest.run(mMockInvocationListener); } finally { java.lang.System.setProperty(VtsPythonUtil.OS_NAME, originalName); } }",ccf8933dd13fb1c085c0d1239586419fba55986e,testRunNormalInputOnWindows(),testRunNormalInputOnWindows(),12,3,"public void testRunNormalInputOnWindows() throws com.android.tradefed.device.DeviceNotAvailableException, java.lang.IllegalArgumentException { java.lang.String originalName = java.lang.System.getProperty(VtsMultiDeviceTest.OS_NAME); java.lang.System.setProperty(VtsMultiDeviceTest.OS_NAME, VtsMultiDeviceTest.WINDOWS); mTest.setDevice(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockDevice()); mTest.setRunUtil(com.android.tradefed.testtype.VtsMultiDeviceTestTest.createMockRunUtil(""where"", ""python.exe"", CommandStatus.SUCCESS)); try { mTest.run(mMockInvocationListener); } finally { java.lang.System.setProperty(VtsMultiDeviceTest.OS_NAME, originalName); } }",6e15248b00badfd3386e207a57e330478b55279b,testRunNormalInputOnWindows(),400164,193,197
109038,jack_src_com_android_jack_jayce_JayceClassOrInterfaceLoader.java,2.0,"@java.lang.Override protected void ensureAll(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loaded) { synchronized(this) { if (!(structureLoaded)) { structureLoaded = true; com.android.jack.jayce.DeclaredTypeNode type; try { type = getNNode(NodeLevel.STRUCTURE); } catch (java.io.IOException e) { throw new com.android.jack.load.JackLoadingException(getLocation(), e); } catch (com.android.jack.JackFileException e) { throw new com.android.jack.load.JackLoadingException(getLocation(), e); } try { type.updateToStructure(loaded, this); } catch (com.android.jack.lookup.JLookupException e) { throw new com.android.jack.load.JackLoadingException(getLocation(), e); } com.android.jack.frontend.ParentSetter parentSetter = new com.android.jack.frontend.ParentSetter(); parentSetter.accept(loaded); tracer.getStatistic(com.android.jack.jayce.JayceClassOrInterfaceLoader.STRUCTURE_LOAD).incValue(); methodNotLoadedCount = loaded.getMethods().size(); if ((methodNotLoadedCount) == 0) { loaded.removeLoader(); } } } }",3b13ab7cbccd4cc53b4b066d78e45406236a8fae,"@java.lang.Override protected void ensureAll(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loaded) { synchronized(this) { if (!(structureLoaded)) { structureLoaded = true; com.android.jack.jayce.DeclaredTypeNode type; try { type = getNNode(NodeLevel.STRUCTURE, loaded.getSession()); } catch (java.io.IOException e) { throw new com.android.jack.load.JackLoadingException(getLocation(), e); } catch (com.android.jack.JackFileException e) { throw new com.android.jack.load.JackLoadingException(getLocation(), e); } try { type.updateToStructure(loaded, this); } catch (com.android.jack.lookup.JLookupException e) { throw new com.android.jack.load.JackLoadingException(getLocation(), e); } com.android.jack.frontend.ParentSetter parentSetter = new com.android.jack.frontend.ParentSetter(); parentSetter.accept(loaded); tracer.getStatistic(com.android.jack.jayce.JayceClassOrInterfaceLoader.STRUCTURE_LOAD).incValue(); methodNotLoadedCount = loaded.getMethods().size(); if ((methodNotLoadedCount) == 0) { loaded.removeLoader(); } } } }",7f94c1c439cc5838474b90853a0a9ab58dcf1882,ensureAll(com.android.jack.ir.ast.JDefinedClassOrInterface),ensureAll(com.android.jack.ir.ast.JDefinedClassOrInterface),3,2,"@java.lang.Override protected void ensureAll(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loaded) { synchronized(this) { if (!(structureLoaded)) { structureLoaded = true; com.android.jack.jayce.DeclaredTypeNode type; try { type = getNNode(NodeLevel.STRUCTURE, loaded.getSession().getUserLogger()); } catch (java.io.IOException e) { throw new com.android.jack.load.JackLoadingException(getLocation(), e); } catch (com.android.jack.JackFileException e) { throw new com.android.jack.load.JackLoadingException(getLocation(), e); } try { type.updateToStructure(loaded, this); } catch (com.android.jack.lookup.JLookupException e) { throw new com.android.jack.load.JackLoadingException(getLocation(), e); } com.android.jack.frontend.ParentSetter parentSetter = new com.android.jack.frontend.ParentSetter(); parentSetter.accept(loaded); tracer.getStatistic(com.android.jack.jayce.JayceClassOrInterfaceLoader.STRUCTURE_LOAD).incValue(); methodNotLoadedCount = loaded.getMethods().size(); if ((methodNotLoadedCount) == 0) { loaded.removeLoader(); } } } }",440d2e9a35c81fed00924d977c9bb07488121501,ensureAll(com.android.jack.ir.ast.JDefinedClassOrInterface),402730,285,288
15949,ddms_libs_ddmuilib_src_com_android_ddmuilib_explorer_DeviceExplorer.java,30.0,"private void pushFile(final java.lang.String local, final java.lang.String remoteDirectory) { try { final com.android.ddmlib.SyncService sync = mCurrentDevice.getSyncService(); if (sync != null) { new org.eclipse.jface.dialogs.ProgressMonitorDialog(mParent.getShell()).run(true, true, new org.eclipse.jface.operation.IRunnableWithProgress() { public void run(org.eclipse.core.runtime.IProgressMonitor monitor) throws java.lang.InterruptedException, java.lang.reflect.InvocationTargetException { java.lang.String[] segs = local.split(java.util.regex.Pattern.quote(java.io.File.separator)); java.lang.String name = segs[((segs.length) - 1)]; java.lang.String remoteFile = (remoteDirectory + (com.android.ddmlib.FileListingService.FILE_SEPARATOR)) + name; com.android.ddmlib.SyncService.SyncResult result = sync.pushFile(local, remoteFile, new com.android.ddmuilib.SyncProgressMonitor(monitor, java.lang.String.format(""Pushing %1$s to the device."", name))); if ((result.getCode()) != (com.android.ddmlib.SyncService.RESULT_OK)) { com.android.ddmuilib.console.DdmConsole.printErrorToConsole(java.lang.String.format(""Failed to push %1$s on %2$s: %3$s"", name, mCurrentDevice.getSerialNumber(), result.getMessage())); } sync.close(); } }); } } catch (java.lang.Exception e) { com.android.ddmuilib.console.DdmConsole.printErrorToConsole(""Failed to push the item(s).""); com.android.ddmuilib.console.DdmConsole.printErrorToConsole(e.getMessage()); } }",e8b10fa755f80bc5decfecaeafa02cff70973888,"private void pushFile(final java.lang.String local, final java.lang.String remoteDirectory) { try { final com.android.ddmlib.SyncService sync = mCurrentDevice.getSyncService(); if (sync != null) { java.lang.String[] segs = local.split(java.util.regex.Pattern.quote(java.io.File.separator)); java.lang.String name = segs[((segs.length) - 1)]; final java.lang.String remoteFile = (remoteDirectory + (com.android.ddmlib.FileListingService.FILE_SEPARATOR)) + name; com.android.ddmuilib.SyncProgressHelper.run(new com.android.ddmuilib.SyncProgressHelper.SyncRunnable() { public void run(com.android.ddmlib.SyncService.ISyncProgressMonitor monitor) throws com.android.ddmlib.SyncException, com.android.ddmlib.TimeoutException, java.io.IOException { sync.pushFile(local, remoteFile, monitor); } public void close() { sync.close(); } }, java.lang.String.format(""Pushing %1$s to the device."", name), mParent.getShell()); } } catch (com.android.ddmlib.SyncException e) { if (e.wasCancelled()) { com.android.ddmuilib.console.DdmConsole.printErrorToConsole(java.lang.String.format(""Failed to push selection: %1$s"", e.getMessage())); } } catch (java.lang.Exception e) { com.android.ddmuilib.console.DdmConsole.printErrorToConsole(""Failed to push the item(s).""); com.android.ddmuilib.console.DdmConsole.printErrorToConsole(e.getMessage()); } }",eae7b33e6f212fac153c1b853eadfbdc0d610aee,"pushFile(java.lang.String,java.lang.String)","pushFile(java.lang.String,java.lang.String)",6,30,"private void pushFile(final java.lang.String local, final java.lang.String remoteDirectory) { try { final com.android.ddmlib.SyncService sync = mCurrentDevice.getSyncService(); if (sync != null) { java.lang.String[] segs = local.split(java.util.regex.Pattern.quote(java.io.File.separator)); java.lang.String name = segs[((segs.length) - 1)]; final java.lang.String remoteFile = (remoteDirectory + (com.android.ddmlib.FileListingService.FILE_SEPARATOR)) + name; com.android.ddmuilib.SyncProgressHelper.run(new com.android.ddmuilib.SyncProgressHelper.SyncRunnable() { public void run(com.android.ddmlib.SyncService.ISyncProgressMonitor monitor) throws com.android.ddmlib.SyncException, com.android.ddmlib.TimeoutException, java.io.IOException { sync.pushFile(local, remoteFile, monitor); } public void close() { sync.close(); } }, java.lang.String.format(""Pushing %1$s to the device."", name), mParent.getShell()); } } catch (com.android.ddmlib.SyncException e) { if ((e.wasCanceled()) == false) { com.android.ddmuilib.console.DdmConsole.printErrorToConsole(java.lang.String.format(""Failed to push selection: %1$s"", e.getMessage())); } } catch (java.lang.Exception e) { com.android.ddmuilib.console.DdmConsole.printErrorToConsole(""Failed to push the item(s).""); com.android.ddmuilib.console.DdmConsole.printErrorToConsole(e.getMessage()); } }",4054cdb1fb30dbfb70f2157f69abe7fc719da608,"pushFile(java.lang.String,java.lang.String)",59866,404,408
162651,ddmlib_src_main_java_com_android_ddmlib_IDevice.java,27.0,"com.android.ddmlib.RawImage getScreenshot() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException;",94f611d65d622886d9f0c82353d469f5cb8f9a7c,"com.android.ddmlib.RawImage getScreenshot() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException, java.lang.InterruptedException;",5271bb722c42780c01dea118377a34e7ad632fab,getScreenshot(),getScreenshot(),4,27,"com.android.ddmlib.RawImage getScreenshot() throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException;",94f611d65d622886d9f0c82353d469f5cb8f9a7c,getScreenshot(),352897,51,44
104053,luni_src_test_java_libcore_java_util_CurrencyTest.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test_nullLocales() { java.util.Currency currency = java.util.Currency.getInstance(java.util.Locale.getDefault()); assertEquals(currency.getSymbol(java.util.Locale.getDefault()), currency.getSymbol(null)); }",171b7c5970dffda293413b0a9d6fc6d2ba2423a9,,test_nullLocales(),3,1,public void test_nullLocales() { java.util.Currency currency = java.util.Currency.getInstance(java.util.Locale.getDefault()); try { currency.getSymbol(null); fail(); } catch (java.lang.NullPointerException expected) { } },543da4ed65b5b4ebdb225a75ee8862d090b37e1c,test_nullLocales(),275885,53,55
173845,libart_src_main_java_java_lang_Daemons.java,1.0,"private boolean waitForFinalization() { long startTime = java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingStartedNanos; sleepFor(startTime, java.lang.Daemons.MAX_FINALIZE_NANOS); return ((java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingObject) == null) || ((java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingStartedNanos) != startTime); }",a75fca2f8b7a18e0cbdf18a579b049004f2f0ff9,private boolean waitForFinalization() { long startCount = java.lang.Daemons.FinalizerDaemon.INSTANCE.progressCounter.get(); sleepFor(java.lang.Daemons.MAX_FINALIZE_NANOS); return !(((getNeedToWork()) && ((java.lang.Daemons.FinalizerDaemon.INSTANCE.progressCounter.get()) == startCount)) && ((java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingObject) != null)); },03f1ad75f1f8fc5a86ead776a625864819661231,waitForFinalization(),waitForFinalization(),8,3,private java.lang.ref.FinalizerReference<?> waitForFinalization() { long startCount = java.lang.Daemons.FinalizerDaemon.INSTANCE.progressCounter.get(); sleepFor(java.lang.Daemons.MAX_FINALIZE_NANOS); if ((getNeedToWork()) && ((java.lang.Daemons.FinalizerDaemon.INSTANCE.progressCounter.get()) == startCount)) { java.lang.ref.FinalizerReference<?> finalizing = java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingObject; sleepFor(java.lang.Daemons.NANOS_PER_SECOND); if ((getNeedToWork()) && ((java.lang.Daemons.FinalizerDaemon.INSTANCE.progressCounter.get()) == startCount)) { return finalizing; } } return null; },b6cd1d52ad26c5168dc4835e354c7a35d87ad1aa,waitForFinalization(),293245,103,175
337587,src_com_android_server_telecom_InCallController.java,14.0,"private void updateCall(com.android.server.telecom.Call call, boolean videoProviderChanged) { if (!(mInCallServices.isEmpty())) { android.telecom.Log.i(this, ""Sending updateCall %s"", call); java.util.List<android.content.ComponentName> componentsUpdated = new java.util.ArrayList<>(); for (java.util.Map.Entry<com.android.server.telecom.InCallController.InCallServiceInfo, com.android.internal.telecom.IInCallService> entry : mInCallServices.entrySet()) { com.android.server.telecom.InCallController.InCallServiceInfo info = entry.getKey(); if ((call.isExternalCall()) && (!(info.isExternalCallsSupported()))) { continue; } android.telecom.ParcelableCall parcelableCall = com.android.server.telecom.ParcelableCallUtils.toParcelableCall(call, videoProviderChanged, mCallsManager.getPhoneAccountRegistrar(), info.isExternalCallsSupported()); android.content.ComponentName componentName = info.getComponentName(); com.android.internal.telecom.IInCallService inCallService = entry.getValue(); componentsUpdated.add(componentName); try { inCallService.updateCall(parcelableCall); } catch (android.os.RemoteException ignored) { } } android.telecom.Log.i(this, ""Components updated: %s"", componentsUpdated); } }",43076ada6bc6b89ac3ac05f7fa5c6e6338806a18,"private void updateCall(com.android.server.telecom.Call call, boolean videoProviderChanged) { if (!(mInCallServices.isEmpty())) { android.telecom.Log.i(this, ""Sending updateCall %s"", call); java.util.List<android.content.ComponentName> componentsUpdated = new java.util.ArrayList<>(); for (java.util.Map.Entry<com.android.server.telecom.InCallController.InCallServiceInfo, com.android.internal.telecom.IInCallService> entry : mInCallServices.entrySet()) { com.android.server.telecom.InCallController.InCallServiceInfo info = entry.getKey(); if ((call.isExternalCall()) && (!(info.isExternalCallsSupported()))) { continue; } if ((call.isSelfManaged()) && (!(info.isSelfManagedCallsSupported()))) { continue; } android.telecom.ParcelableCall parcelableCall = com.android.server.telecom.ParcelableCallUtils.toParcelableCall(call, videoProviderChanged, mCallsManager.getPhoneAccountRegistrar(), info.isExternalCallsSupported()); android.content.ComponentName componentName = info.getComponentName(); com.android.internal.telecom.IInCallService inCallService = entry.getValue(); componentsUpdated.add(componentName); try { inCallService.updateCall(parcelableCall); } catch (android.os.RemoteException ignored) { } } android.telecom.Log.i(this, ""Components updated: %s"", componentsUpdated); } }",fbb2774bf0ecae14d8d52fd03bea7eab5619be4c,"updateCall(com.android.server.telecom.Call,boolean)","updateCall(com.android.server.telecom.Call,boolean)",3,14,"private void updateCall(com.android.server.telecom.Call call, boolean videoProviderChanged, boolean rttInfoChanged) { if (!(mInCallServices.isEmpty())) { android.telecom.Log.i(this, ""Sending updateCall %s"", call); java.util.List<android.content.ComponentName> componentsUpdated = new java.util.ArrayList<>(); for (java.util.Map.Entry<com.android.server.telecom.InCallController.InCallServiceInfo, com.android.internal.telecom.IInCallService> entry : mInCallServices.entrySet()) { com.android.server.telecom.InCallController.InCallServiceInfo info = entry.getKey(); if ((call.isExternalCall()) && (!(info.isExternalCallsSupported()))) { continue; } if ((call.isSelfManaged()) && (!(info.isSelfManagedCallsSupported()))) { continue; } android.telecom.ParcelableCall parcelableCall = com.android.server.telecom.ParcelableCallUtils.toParcelableCall(call, videoProviderChanged, mCallsManager.getPhoneAccountRegistrar(), info.isExternalCallsSupported(), (rttInfoChanged && (info.equals(mInCallServiceConnection.getInfo())))); android.content.ComponentName componentName = info.getComponentName(); com.android.internal.telecom.IInCallService inCallService = entry.getValue(); componentsUpdated.add(componentName); try { inCallService.updateCall(parcelableCall); } catch (android.os.RemoteException ignored) { } } android.telecom.Log.i(this, ""Components updated: %s"", componentsUpdated); } }",3e93611e01719eea95e5157d6046d22ce6e6ba8f,"updateCall(com.android.server.telecom.Call,boolean,boolean)",281854,347,373
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,38.0,"public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",933f010bc566d836aa9bca077cb1b43b8ac75dd2,"public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",ffff38cd5ca5f03bbf86c4ecf2083476b3eb711f,testAesCbcHmacMd5Udp4(),testAesCbcHmacMd5Udp4(),9,42,"public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",327bd5a54e9ab30edcaf125e5004fe6703e04d43,testAesCbcHmacMd5Udp4(),1894,213,213
21955,luni_src_test_java_tests_api_java_util_CalendarTest.java,5.0,"public void test_getInstance() { java.util.Calendar us_calendar = java.util.Calendar.getInstance(java.util.Locale.US); java.util.Calendar ch_calendar = java.util.Calendar.getInstance(java.util.Locale.CHINESE); assertEquals(java.util.Calendar.SUNDAY, us_calendar.getFirstDayOfWeek()); assertEquals(java.util.Calendar.MONDAY, ch_calendar.getFirstDayOfWeek()); java.util.Calendar gmt_calendar = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone(""GMT""), java.util.Locale.US); assertEquals(java.util.TimeZone.getTimeZone(""GMT""), gmt_calendar.getTimeZone()); java.util.Calendar est_calendar = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone(""EST""), java.util.Locale.US); assertEquals(java.util.TimeZone.getTimeZone(""EST"").getID(), est_calendar.getTimeZone().getID()); }",a04aae2de5712e8d9ef51147217cfa53c8c7d83a,"public void test_getInstance() { if (isAvailableLocale(java.util.Locale.US)) { java.util.Calendar calendar = java.util.Calendar.getInstance(java.util.Locale.US); assertEquals(java.util.Calendar.SUNDAY, calendar.getFirstDayOfWeek()); } if (isAvailableLocale(java.util.Locale.CHINESE)) { java.util.Calendar calendar = java.util.Calendar.getInstance(java.util.Locale.CHINESE); assertEquals(java.util.Calendar.MONDAY, calendar.getFirstDayOfWeek()); } java.util.Calendar gmt_calendar = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone(""GMT""), java.util.Locale.US); assertEquals(java.util.TimeZone.getTimeZone(""GMT""), gmt_calendar.getTimeZone()); java.util.Calendar est_calendar = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone(""EST""), java.util.Locale.US); assertEquals(java.util.TimeZone.getTimeZone(""EST"").getID(), est_calendar.getTimeZone().getID()); }",9297940537c4eb10f61210d703cd12a7b7a4c161,test_getInstance(),test_getInstance(),5,5,"public void test_getInstance() { if (tests.support.Support_Locale.areLocalesAvailable(java.util.Locale.US)) { java.util.Calendar us_calendar = java.util.Calendar.getInstance(java.util.Locale.US); assertEquals(java.util.Calendar.SUNDAY, us_calendar.getFirstDayOfWeek()); } if (tests.support.Support_Locale.areLocalesAvailable(java.util.Locale.CHINESE)) { java.util.Calendar ch_calendar = java.util.Calendar.getInstance(java.util.Locale.CHINESE); assertEquals(java.util.Calendar.MONDAY, ch_calendar.getFirstDayOfWeek()); } java.util.Calendar gmt_calendar = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone(""GMT""), java.util.Locale.US); assertEquals(java.util.TimeZone.getTimeZone(""GMT""), gmt_calendar.getTimeZone()); java.util.Calendar est_calendar = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone(""EST""), java.util.Locale.US); assertEquals(java.util.TimeZone.getTimeZone(""EST"").getID(), est_calendar.getTimeZone().getID()); }",c0580479d5882f192a8dc249fbe386701ad3d1c1,test_getInstance(),358490,254,278
219413,benchmarks_src_benchmarks_regression_IntegerBenchmark.java,2.0,"public int timeIntegerValueOf(int reps) throws java.lang.Exception { java.lang.String[] intStrings = new java.lang.String[]{ ""0"", ""1"", ""12"", ""123"", ""1234"", ""12345"", ""123456"", ""1234567"", ""12345678"" }; int t = 0; for (int i = 0; i < reps; ++i) { for (int j = 0; j < (intStrings.length); ++j) { t += java.lang.Integer.valueOf(intStrings[j]); } } return t; }",89fe8557ab14d8e74df52326218018c91a93d123,"public int timeIntegerValueOf(int reps) throws java.lang.Exception { java.lang.String[] intStrings = new java.lang.String[]{ ""0"", ""1"", ""12"", ""123"", ""1234"", ""12345"", ""123456"", ""1234567"", ""12345678"" }; int t = 0; for (int i = 0; i < reps; ++i) { for (int j = 0; j < (intStrings.length); ++j) { t += java.lang.Integer.parseInt(intStrings[j]); } } return t; }",b35bea5aa67a792bab8270cee35fd9e66e0183c8,timeIntegerValueOf(int),timeIntegerValueOf(int),5,2,"public int timeIntegerValueOf(int reps) throws java.lang.Exception { java.lang.String[] intStrings = new java.lang.String[]{ ""0"", ""1"", ""12"", ""123"", ""1234"", ""12345"", ""123456"", ""1234567"", ""12345678"" }; int t = 0; for (int i = 0; i < reps; ++i) { for (int j = 0; j < (intStrings.length); ++j) { t += java.lang.Integer.valueOf(intStrings[j]); } } return t; }",89fe8557ab14d8e74df52326218018c91a93d123,timeIntegerValueOf(int),234902,123,123
95682,build-system_builder_src_main_java_com_android_builder_ApiVersionImpl.java,,,,@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass()) != (o.getClass()))) { return false; } com.android.builder.ApiVersionImpl that = ((com.android.builder.ApiVersionImpl) (o)); if ((mApiLevel) != (that.mApiLevel)) { return false; } if ((mCodename) != null ? !(mCodename.equals(that.mCodename)) : (that.mCodename) != null) { return false; } return true; },bc4b4ec78e78be0218eb7644d2112beb561f324d,,equals(java.lang.Object),8,0,@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if ((o == null) || ((getClass()) != (o.getClass()))) { return false; } com.android.builder.DefaultApiVersion that = ((com.android.builder.DefaultApiVersion) (o)); if ((mApiLevel) != (that.mApiLevel)) { return false; } if ((mCodename) != null ? !(mCodename.equals(that.mCodename)) : (that.mCodename) != null) { return false; } return true; },e4cd21bed37e6971600bf341a498282ce8eb3f40,equals(java.lang.Object),227667,143,143
466677,core_java_android_net_IpSecConfig.java,10.0,public java.net.InetAddress getLocalAddress() { return localAddress; },5b2294a8342681924848e191483caaca536f5abd,public java.net.InetAddress getLocalAddress() { return mLocalAddress; },d0ea9e8c9554d00cbbe070fa5f26ab5dfd2965db,getLocalAddress(),getLocalAddress(),17,10,public java.lang.String getLocalAddress() { return mLocalAddress; },8152e18bc5f316097f99fc6c200b6a1c4aa6f86b,getLocalAddress(),176151,17,17
347050,tests_wifitests_src_com_android_server_wifi_scanner_WificondWifiScannerTest.java,1.0,"@org.junit.Test public void backgroundScanNoBatch() { com.android.server.wifi.WifiNative.ScanSettings settings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder().withBasePeriod(10000).withMaxApPerScan(10).addBucketWithBand(10000, WifiScanner.REPORT_EVENT_NO_BATCH, WifiScanner.WIFI_BAND_24_GHZ).build(); com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod[] expectedPeriods = new com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod[]{ new com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod.ReportType.NONE, com.android.server.wifi.ScanResults.create(0, 2400, 2400, 2400), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)), new com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod.ReportType.NONE, com.android.server.wifi.ScanResults.create(1, 2400, 2400, 2450), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)), new com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod.ReportType.NONE, com.android.server.wifi.ScanResults.create(2, 2400, 2450, 2400), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)) }; doSuccessfulTest(settings, expectedPeriods); }",62f6b41ca3ce5a7ed85d13fa824ad20026a15748,"@org.junit.Test public void backgroundScanNoBatch() { com.android.server.wifi.WifiNative.ScanSettings settings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder().withBasePeriod(10000).withMaxApPerScan(10).addBucketWithBand(10000, WifiScanner.REPORT_EVENT_NO_BATCH, WifiScanner.WIFI_BAND_24_GHZ).build(); com.android.server.wifi.scanner.WificondWifiScannerTest.ScanPeriod[] expectedPeriods = new com.android.server.wifi.scanner.WificondWifiScannerTest.ScanPeriod[]{ new com.android.server.wifi.scanner.WificondWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.WificondWifiScannerTest.ScanPeriod.ReportType.NONE, com.android.server.wifi.ScanResults.create(0, 2400, 2400, 2400), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)), new com.android.server.wifi.scanner.WificondWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.WificondWifiScannerTest.ScanPeriod.ReportType.NONE, com.android.server.wifi.ScanResults.create(1, 2400, 2400, 2450), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)), new com.android.server.wifi.scanner.WificondWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.WificondWifiScannerTest.ScanPeriod.ReportType.NONE, com.android.server.wifi.ScanResults.create(2, 2400, 2450, 2400), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)) }; doSuccessfulTest(settings, expectedPeriods); }",ac28970e0e223dee28b8d6d8094aa7b327b071c6,backgroundScanNoBatch(),backgroundScanNoBatch(),12,1,"@org.junit.Test public void backgroundScanNoBatch() { com.android.server.wifi.WifiNative.ScanSettings settings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder().withBasePeriod(10000).withMaxApPerScan(10).addBucketWithBand(10000, WifiScanner.REPORT_EVENT_NO_BATCH, WifiScanner.WIFI_BAND_24_GHZ).build(); com.android.server.wifi.scanner.WificondScannerTest.ScanPeriod[] expectedPeriods = new com.android.server.wifi.scanner.WificondScannerTest.ScanPeriod[]{ new com.android.server.wifi.scanner.WificondScannerTest.ScanPeriod(com.android.server.wifi.scanner.WificondScannerTest.ScanPeriod.ReportType.NONE, com.android.server.wifi.ScanResults.create(0, 2400, 2400, 2400), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)), new com.android.server.wifi.scanner.WificondScannerTest.ScanPeriod(com.android.server.wifi.scanner.WificondScannerTest.ScanPeriod.ReportType.NONE, com.android.server.wifi.ScanResults.create(1, 2400, 2400, 2450), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)), new com.android.server.wifi.scanner.WificondScannerTest.ScanPeriod(com.android.server.wifi.scanner.WificondScannerTest.ScanPeriod.ReportType.NONE, com.android.server.wifi.ScanResults.create(2, 2400, 2450, 2400), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)) }; doSuccessfulTest(settings, expectedPeriods); }",524650d2d709ddb073b39483d8c7fecdd3bff7b0,backgroundScanNoBatch(),82513,404,396
557179,services_core_java_com_android_server_hdmi_HdmiControlService.java,130.0,"void setAudioStatus(boolean mute, int volume) { if ((!(isTvDeviceEnabled())) || (!(tv().isSystemAudioActivated()))) { return; } android.media.AudioManager audioManager = getAudioManager(); boolean muted = audioManager.isStreamMute(AudioManager.STREAM_MUSIC); if (mute) { if (!muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, true); } } else { if (muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, false); } audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, volume, ((android.media.AudioManager.FLAG_SHOW_UI) | (android.media.AudioManager.FLAG_HDMI_SYSTEM_AUDIO_VOLUME))); } }",5a627a0a034b09f2bfebe9d9aa363131f4b3b399,"void setAudioStatus(boolean mute, int volume) { if ((!(isTvDeviceEnabled())) || (!(tv().isSystemAudioActivated()))) { return; } android.media.AudioManager audioManager = getAudioManager(); boolean muted = audioManager.isStreamMute(AudioManager.STREAM_MUSIC); if (mute) { if (!muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, true); } } else { if (muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, false); } int flag = android.media.AudioManager.FLAG_HDMI_SYSTEM_AUDIO_VOLUME; if ((0 <= volume) && (volume <= 100)) { android.util.Slog.i(com.android.server.hdmi.HdmiControlService.TAG, (""volume: "" + volume)); flag |= android.media.AudioManager.FLAG_SHOW_UI; } audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, volume, flag); } }",37c9ceee72c1747df46bf4ad577c726b315f20e8,"setAudioStatus(boolean,int)","setAudioStatus(boolean,int)",3,130,"void setAudioStatus(boolean mute, int volume) { if ((!(isTvDeviceEnabled())) || (!(tv().isSystemAudioActivated()))) { return; } android.media.AudioManager audioManager = getAudioManager(); boolean muted = audioManager.isStreamMute(AudioManager.STREAM_MUSIC); if (mute) { if (!muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, true); } } else { if (muted) { audioManager.setStreamMute(AudioManager.STREAM_MUSIC, false); } int flag = android.media.AudioManager.FLAG_HDMI_SYSTEM_AUDIO_VOLUME; if ((0 <= volume) && (volume <= 100)) { android.util.Slog.i(com.android.server.hdmi.HdmiControlService.TAG, (""volume: "" + volume)); flag |= android.media.AudioManager.FLAG_SHOW_UI; audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, volume, flag); } } }",c7931e2095d464a32d8c74e3120afcbddd5abd87,"setAudioStatus(boolean,int)",198159,217,217
395673,core_java_android_nfc_cardemulation_ApduServiceInfo.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.List<java.lang.String> getSubsetAids() { final java.util.ArrayList<java.lang.String> subsetAids = new java.util.ArrayList<java.lang.String>(); for (android.nfc.cardemulation.AidGroup group : getAidGroups()) { for (java.lang.String aid : group.aids) { if (aid.endsWith(""@"")) { subsetAids.add(aid); } } } return subsetAids; }",fc80d0b0e037e1dac79743eb156292a2c5c46ffa,,getSubsetAids(),6,5,"public java.util.List<java.lang.String> getSubsetAids() { final java.util.ArrayList<java.lang.String> subsetAids = new java.util.ArrayList<java.lang.String>(); for (android.nfc.cardemulation.AidGroup group : getAidGroups()) { for (java.lang.String aid : group.aids) { if (aid.endsWith(""#"")) { subsetAids.add(aid); } } } return subsetAids; }",537ba16edd5ef44af14fc2ff323622e3377b704d,getSubsetAids(),448247,116,116
554885,src_com_android_phone_SubscriptionInfoHelper.java,1.0,"public android.content.Intent getIntent(java.lang.Class newActivityClass) { android.content.Intent intent = new android.content.Intent(com.android.phone.SubscriptionInfoHelper.mContext, newActivityClass); if (hasSubId()) { intent.putExtra(com.android.phone.SubscriptionInfoHelper.SUB_ID_EXTRA, com.android.phone.SubscriptionInfoHelper.mSubId); } if (!(android.text.TextUtils.isEmpty(com.android.phone.SubscriptionInfoHelper.mSubLabel))) { intent.putExtra(com.android.phone.SubscriptionInfoHelper.SUB_LABEL_EXTRA, com.android.phone.SubscriptionInfoHelper.mSubLabel); } return intent; }",f96d8b10b078f41b4b4ecde3730535f629d5085d,"public android.content.Intent getIntent(java.lang.Class newActivityClass) { android.content.Intent intent = new android.content.Intent(com.android.phone.SubscriptionInfoHelper.sContext, newActivityClass); if (hasSubId()) { intent.putExtra(com.android.phone.SubscriptionInfoHelper.SUB_ID_EXTRA, com.android.phone.SubscriptionInfoHelper.sSubId); } if (!(android.text.TextUtils.isEmpty(com.android.phone.SubscriptionInfoHelper.sSubLabel))) { intent.putExtra(com.android.phone.SubscriptionInfoHelper.SUB_LABEL_EXTRA, com.android.phone.SubscriptionInfoHelper.sSubLabel); } return intent; }",bc5ecaddd200daa54ec1131e68940ed49ea02415,getIntent(java.lang.Class),getIntent(java.lang.Class),3,1,"public android.content.Intent getIntent(java.lang.Class newActivityClass) { android.content.Intent intent = new android.content.Intent(mContext, newActivityClass); if (hasSubId()) { intent.putExtra(com.android.phone.SubscriptionInfoHelper.SUB_ID_EXTRA, mSubId); } if (!(android.text.TextUtils.isEmpty(mSubLabel))) { intent.putExtra(com.android.phone.SubscriptionInfoHelper.SUB_LABEL_EXTRA, mSubLabel); } return intent; }",b925b8b5cd00ddf073069f67d31882c63f8e2789,getIntent(java.lang.Class),415616,155,114
319964,jack_src_com_android_jack_dx_ssa_back_IdenticalBlockCombiner.java,3.0,"public com.android.jack.dx.rop.code.RopMethod process() { int szBlocks = blocks.size(); java.util.BitSet toDelete = new java.util.BitSet(blocks.getMaxLabel()); for (int bindex = 0; bindex < szBlocks; bindex++) { com.android.jack.dx.rop.code.BasicBlock b = blocks.get(bindex); if (toDelete.get(b.getLabel())) { continue; } com.android.jack.dx.util.IntList preds = ropMethod.labelToPredecessors(b.getLabel()); int szPreds = preds.size(); for (int i = 0; i < szPreds; i++) { int iLabel = preds.get(i); com.android.jack.dx.rop.code.BasicBlock iBlock = blocks.labelToBlock(iLabel); if (((toDelete.get(iLabel)) || ((iBlock.getSuccessors().size()) > 1)) || ((iBlock.getFirstInsn().getOpcode().getOpcode()) == (com.android.jack.dx.rop.code.RegOps.MOVE_RESULT))) { continue; } com.android.jack.dx.util.IntList toCombine = new com.android.jack.dx.util.IntList(); for (int j = i + 1; j < szPreds; j++) { int jLabel = preds.get(j); com.android.jack.dx.rop.code.BasicBlock jBlock = blocks.labelToBlock(jLabel); if (((jBlock.getSuccessors().size()) == 1) && (com.android.jack.dx.ssa.back.IdenticalBlockCombiner.compareInsns(iBlock, jBlock))) { toCombine.add(jLabel); toDelete.set(jLabel); } } combineBlocks(iLabel, toCombine); } } for (int i = szBlocks - 1; i >= 0; i--) { if (toDelete.get(newBlocks.get(i).getLabel())) { newBlocks.set(i, null); } } newBlocks.shrinkToFit(); newBlocks.setImmutable(); return new com.android.jack.dx.rop.code.RopMethod(newBlocks, ropMethod.getFirstLabel()); }",ef8f031f884226035ed1cde1cfc9894d1802abe6,"public com.android.jack.dx.rop.code.RopMethod process() { int szBlocks = blocks.size(); java.util.BitSet toDelete = new java.util.BitSet(blocks.getMaxLabel()); for (int bindex = 0; bindex < szBlocks; bindex++) { com.android.jack.dx.rop.code.BasicBlock b = blocks.get(bindex); if (toDelete.get(b.getLabel())) { continue; } com.android.jack.dx.util.IntList preds = ropMethod.labelToPredecessors(b.getLabel()); int szPreds = preds.size(); for (int i = 0; i < szPreds; i++) { int iLabel = preds.get(i); com.android.jack.dx.rop.code.BasicBlock iBlock = blocks.labelToBlock(iLabel); if (((toDelete.get(iLabel)) || ((iBlock.getSuccessors().size()) > 1)) || ((iBlock.getFirstInsn().getOpcode().getOpcode()) == (com.android.jack.dx.rop.code.RegOps.MOVE_RESULT))) { continue; } com.android.jack.dx.util.IntList toCombine = new com.android.jack.dx.util.IntList(); for (int j = i + 1; j < szPreds; j++) { int jLabel = preds.get(j); com.android.jack.dx.rop.code.BasicBlock jBlock = blocks.labelToBlock(jLabel); if (((jBlock.getSuccessors().size()) == 1) && (com.android.jack.dx.ssa.back.IdenticalBlockCombiner.compareInsns(iBlock, jBlock))) { toCombine.add(jLabel); toDelete.set(jLabel); } } combineBlocks(iLabel, toCombine); } } for (int i = szBlocks - 1; i >= 0; i--) { if (toDelete.get(newBlocks.get(i).getLabel())) { newBlocks.set(i, null); } } newBlocks.shrinkToFit(); newBlocks.setImmutable(); return new com.android.jack.dx.rop.code.RopMethod(newBlocks, ropMethod.getFirstLabel(), ropMethod.hasParameterInOrder()); }",4a54d7478c994678cde9396c2980403110532e06,process(),process(),4,3,"public com.android.jack.dx.rop.code.RopMethod process() { int szBlocks = blocks.size(); java.util.BitSet toDelete = new java.util.BitSet(blocks.getMaxLabel()); for (int bindex = 0; bindex < szBlocks; bindex++) { com.android.jack.dx.rop.code.BasicBlock b = blocks.get(bindex); if (toDelete.get(b.getLabel())) { continue; } com.android.jack.dx.util.IntList preds = ropMethod.labelToPredecessors(b.getLabel()); int szPreds = preds.size(); for (int i = 0; i < szPreds; i++) { int iLabel = preds.get(i); com.android.jack.dx.rop.code.BasicBlock iBlock = blocks.labelToBlock(iLabel); if (((toDelete.get(iLabel)) || ((iBlock.getSuccessors().size()) > 1)) || ((iBlock.getFirstInsn().getOpcode().getOpcode()) == (com.android.jack.dx.rop.code.RegOps.MOVE_RESULT))) { continue; } com.android.jack.dx.util.IntList toCombine = new com.android.jack.dx.util.IntList(); for (int j = i + 1; j < szPreds; j++) { int jLabel = preds.get(j); com.android.jack.dx.rop.code.BasicBlock jBlock = blocks.labelToBlock(jLabel); if (((jBlock.getSuccessors().size()) == 1) && (com.android.jack.dx.ssa.back.IdenticalBlockCombiner.compareInsns(iBlock, jBlock))) { toCombine.add(jLabel); toDelete.set(jLabel); } } combineBlocks(iLabel, toCombine); } } for (int i = szBlocks - 1; i >= 0; i--) { if (toDelete.get(newBlocks.get(i).getLabel())) { newBlocks.set(i, null); } } newBlocks.shrinkToFit(); newBlocks.setImmutable(); return new com.android.jack.dx.rop.code.RopMethod(newBlocks, ropMethod.getFirstLabel(), ropMethod.withDexCallingConvention()); }",3692675e97a6517569e56f15f1e0f010929b8d82,process(),383673,510,511
269312,service_java_com_android_server_wifi_ExternalScoreEvaluator.java,,,,"public void initialize(android.content.Context context, com.android.server.wifi.WifiConfigManager configManager, android.net.wifi.WifiInfo wifiInfo, com.android.server.wifi.Clock clock, android.util.LocalLog localLog) { mWifiConfigManager = configManager; mWifiInfo = wifiInfo; mClock = clock; mLocalLog = localLog; }",4d55fc2143f43968219adfef239b971cfadc641a,,"initialize(android.content.Context,com.android.server.wifi.WifiConfigManager,android.net.wifi.WifiInfo,com.android.server.wifi.Clock,android.util.LocalLog)",13,10,"private void updateNetworkScoreCache(java.util.List<com.android.server.wifi.ScanDetail> scanDetails) { java.util.ArrayList<android.net.NetworkKey> unscoredNetworks = new java.util.ArrayList<android.net.NetworkKey>(); for (com.android.server.wifi.ScanDetail scanDetail : scanDetails) { android.net.wifi.ScanResult scanResult = scanDetail.getScanResult(); if (((mScoreCache) != null) && (!(mScoreCache.isScoredNetwork(scanResult)))) { android.net.WifiKey wifiKey; try { wifiKey = new android.net.WifiKey(((""\"""" + (scanResult.SSID)) + ""\""""), scanResult.BSSID); android.net.NetworkKey ntwkKey = new android.net.NetworkKey(wifiKey); unscoredNetworks.add(ntwkKey); } catch (java.lang.IllegalArgumentException e) { android.util.Log.w(com.android.server.wifi.ExternalScoreEvaluator.TAG, ((((""Invalid SSID="" + (scanResult.SSID)) + "" BSSID="") + (scanResult.BSSID)) + "" for network score. Skip."")); } } } if (((mScoreManager) != null) && ((unscoredNetworks.size()) != 0)) { android.net.NetworkKey[] unscoredNetworkKeys = unscoredNetworks.toArray(new android.net.NetworkKey[unscoredNetworks.size()]); mScoreManager.requestScores(unscoredNetworkKeys); } }",34a2c34367ac2e032f3d68b4a631c016a1e38b76,updateNetworkScoreCache(java.util.List),347427,85,341
578733,telephony_java_android_telephony_CellIdentityLte.java,2.0,@java.lang.Override public int describeContents() { return 0; },8a5b71b1094c8891d9d03a02e6922680a0f498d3,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { if (android.telephony.CellIdentityLte.DBG) android.telephony.CellIdentityLte.log((""writeToParcel(Parcel, int): "" + (toString()))); super.writeToParcel(dest, flags, android.telephony.TYPE_LTE); dest.writeInt(mCi); dest.writeInt(mPci); dest.writeInt(mTac); dest.writeInt(mEarfcn); dest.writeString(mMccStr); dest.writeString(mMncStr); dest.writeString(mAlphaLong); dest.writeString(mAlphaShort); }",47659498771ec6e74d9c7372a7dcc3e4c37df0ef,describeContents(),"writeToParcel(android.os.Parcel,int)",11,12,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { if (android.telephony.CellIdentityLte.DBG) log((""writeToParcel(Parcel, int): "" + (toString()))); super.writeToParcel(dest, android.telephony.TYPE_LTE); dest.writeInt(mCi); dest.writeInt(mPci); dest.writeInt(mTac); dest.writeInt(mEarfcn); dest.writeString(mAlphaLong); dest.writeString(mAlphaShort); }",23cdce9aabcb95ce48a646783f95c8997e1a8e7f,"writeToParcel(android.os.Parcel,int)",60183,146,117
189059,tools_signapk_src_com_android_signapk_SignApk.java,20.0,"private static void signFile(java.util.jar.Manifest manifest, java.security.cert.X509Certificate[] publicKey, java.security.PrivateKey[] privateKey, java.util.jar.JarOutputStream outputJar) throws java.lang.Exception { long timestamp = (publicKey[0].getNotBefore().getTime()) + (3600L * 1000); java.util.jar.JarEntry je = new java.util.jar.JarEntry(java.util.jar.JarFile.MANIFEST_NAME); je.setTime(timestamp); outputJar.putNextEntry(je); manifest.write(outputJar); int numKeys = publicKey.length; for (int k = 0; k < numKeys; ++k) { je = new java.util.jar.JarEntry((numKeys == 1 ? com.android.signapk.SignApk.CERT_SF_NAME : java.lang.String.format(com.android.signapk.SignApk.CERT_SF_MULTI_NAME, k))); je.setTime(timestamp); outputJar.putNextEntry(je); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); com.android.signapk.SignApk.writeSignatureFile(manifest, baos, com.android.signapk.SignApk.getDigestAlgorithm(publicKey[k])); byte[] signedData = baos.toByteArray(); outputJar.write(signedData); final java.lang.String keyType = publicKey[k].getPublicKey().getAlgorithm(); je = new java.util.jar.JarEntry((numKeys == 1 ? java.lang.String.format(com.android.signapk.SignApk.CERT_SIG_NAME, keyType) : java.lang.String.format(com.android.signapk.SignApk.CERT_SIG_MULTI_NAME, k, keyType))); je.setTime(timestamp); outputJar.putNextEntry(je); com.android.signapk.SignApk.writeSignatureBlock(new org.bouncycastle.cms.CMSProcessableByteArray(signedData), publicKey[k], privateKey[k], outputJar); } }",7ee5f73d0a2232206737d9e797c14924b3fe3b44,"private static void signFile(java.util.jar.Manifest manifest, java.security.cert.X509Certificate[] publicKey, java.security.PrivateKey[] privateKey, java.util.jar.JarOutputStream outputJar, boolean additionallySignedUsingAnApkSignatureScheme) throws java.lang.Exception { long timestamp = (publicKey[0].getNotBefore().getTime()) + (3600L * 1000); java.util.jar.JarEntry je = new java.util.jar.JarEntry(java.util.jar.JarFile.MANIFEST_NAME); je.setTime(timestamp); outputJar.putNextEntry(je); manifest.write(outputJar); int numKeys = publicKey.length; for (int k = 0; k < numKeys; ++k) { je = new java.util.jar.JarEntry((numKeys == 1 ? com.android.signapk.SignApk.CERT_SF_NAME : java.lang.String.format(com.android.signapk.SignApk.CERT_SF_MULTI_NAME, k))); je.setTime(timestamp); outputJar.putNextEntry(je); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); com.android.signapk.SignApk.writeSignatureFile(manifest, baos, com.android.signapk.SignApk.getDigestAlgorithm(publicKey[k]), additionallySignedUsingAnApkSignatureScheme); byte[] signedData = baos.toByteArray(); outputJar.write(signedData); final java.lang.String keyType = publicKey[k].getPublicKey().getAlgorithm(); je = new java.util.jar.JarEntry((numKeys == 1 ? java.lang.String.format(com.android.signapk.SignApk.CERT_SIG_NAME, keyType) : java.lang.String.format(com.android.signapk.SignApk.CERT_SIG_MULTI_NAME, k, keyType))); je.setTime(timestamp); outputJar.putNextEntry(je); com.android.signapk.SignApk.writeSignatureBlock(new org.bouncycastle.cms.CMSProcessableByteArray(signedData), publicKey[k], privateKey[k], outputJar); } }",844a685f5b8f80a2df3d5c35d0f3fa423d582fe1,"signFile(java.util.jar.Manifest,java.security.cert.X509Certificate[],java.security.PrivateKey[],java.util.jar.JarOutputStream)","signFile(java.util.jar.Manifest,java.security.cert.X509Certificate[],java.security.PrivateKey[],java.util.jar.JarOutputStream,boolean)",9,26,"private static void signFile(java.util.jar.Manifest manifest, java.security.cert.X509Certificate[] publicKey, java.security.PrivateKey[] privateKey, int minSdkVersion, boolean additionallySignedUsingAnApkSignatureScheme, java.util.jar.JarOutputStream outputJar) throws java.lang.Exception { long timestamp = (publicKey[0].getNotBefore().getTime()) + (3600L * 1000); java.util.jar.JarEntry je = new java.util.jar.JarEntry(java.util.jar.JarFile.MANIFEST_NAME); je.setTime(timestamp); outputJar.putNextEntry(je); manifest.write(outputJar); int numKeys = publicKey.length; for (int k = 0; k < numKeys; ++k) { je = new java.util.jar.JarEntry((numKeys == 1 ? com.android.signapk.SignApk.CERT_SF_NAME : java.lang.String.format(com.android.signapk.SignApk.CERT_SF_MULTI_NAME, k))); je.setTime(timestamp); outputJar.putNextEntry(je); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); com.android.signapk.SignApk.writeSignatureFile(manifest, baos, com.android.signapk.SignApk.getDigestAlgorithm(publicKey[k], minSdkVersion), additionallySignedUsingAnApkSignatureScheme); byte[] signedData = baos.toByteArray(); outputJar.write(signedData); final java.lang.String keyType = publicKey[k].getPublicKey().getAlgorithm(); je = new java.util.jar.JarEntry((numKeys == 1 ? java.lang.String.format(com.android.signapk.SignApk.CERT_SIG_NAME, keyType) : java.lang.String.format(com.android.signapk.SignApk.CERT_SIG_MULTI_NAME, k, keyType))); je.setTime(timestamp); outputJar.putNextEntry(je); com.android.signapk.SignApk.writeSignatureBlock(new org.bouncycastle.cms.CMSProcessableByteArray(signedData), publicKey[k], privateKey[k], minSdkVersion, outputJar); } }",f7fe4bf43da484ea1c590845df03eff27b6df04b,"signFile(java.util.jar.Manifest,java.security.cert.X509Certificate[],java.security.PrivateKey[],int,boolean,java.util.jar.JarOutputStream)",264192,467,476
561230,core_java_android_service_euicc_EuiccProfileInfo.java,24.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public android.service.euicc.OperatorId getOperatorId() { return operatorId; },c528506b86b5fd0e49abfbce1540096b0defa895,,getOperatorId(),8,24,public android.service.carrier.CarrierIdentifier getCarrierIdentifier() { return carrierIdentifier; },c10929f6bab57bd6c342c42a6b87269f4b5d88aa,getCarrierIdentifier(),314744,21,23
439218,tools_ahat_src_heapdump_AhatClassObj.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public com.android.ahat.heapdump.Reference get(int index) { com.android.ahat.heapdump.FieldValue field = mStaticFieldValues[index]; com.android.ahat.heapdump.Value value = field.value; if ((value != null) && (value.isAhatInstance())) { return new com.android.ahat.heapdump.Reference(src, (""."" + (field.name)), value.asAhatInstance(), true); } return null; }",a7ea058a15367d3f44626bfd88b4f06e037c5e6c,,get(int),2,5,"@java.lang.Override public com.android.ahat.heapdump.Reference get(int index) { com.android.ahat.heapdump.FieldValue field = mStaticFieldValues[index]; com.android.ahat.heapdump.Value value = field.value; if ((value != null) && (value.isAhatInstance())) { return new com.android.ahat.heapdump.Reference(this, (""."" + (field.name)), value.asAhatInstance(), true); } return null; }",27bb661988f2b075f5cd35cda833acb80e198cb0,get(int),327933,119,119
595602,src_java_com_android_internal_telephony_uicc_UiccProfile.java,52.0,"@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { case com.android.internal.telephony.uicc.UiccProfile.EVENT_OPEN_LOGICAL_CHANNEL_DONE : case com.android.internal.telephony.uicc.UiccProfile.EVENT_CLOSE_LOGICAL_CHANNEL_DONE : case com.android.internal.telephony.uicc.UiccProfile.EVENT_TRANSMIT_APDU_LOGICAL_CHANNEL_DONE : case com.android.internal.telephony.uicc.UiccProfile.EVENT_TRANSMIT_APDU_BASIC_CHANNEL_DONE : case com.android.internal.telephony.uicc.UiccProfile.EVENT_SIM_IO_DONE : android.os.AsyncResult ar = ((android.os.AsyncResult) (msg.obj)); if ((ar.exception) != null) { loglocal((""Exception: "" + (ar.exception))); log((""Error in SIM access with exception"" + (ar.exception))); } android.os.AsyncResult.forMessage(((android.os.Message) (ar.userObj)), ar.result, ar.exception); ((android.os.Message) (ar.userObj)).sendToTarget(); break; case com.android.internal.telephony.uicc.UiccProfile.EVENT_CARRIER_PRIVILEGES_LOADED : onCarrierPriviligesLoadedMessage(); break; default : loge((""Unknown Event "" + (msg.what))); } }",55222f8ec98b9db40cfb61985efdaf6c9ca44720,"@java.lang.Override public void handleMessage(android.os.Message msg) { switch (msg.what) { default : loge((""Unknown Event "" + (msg.what))); } }",552bd9b841f68c59fa6016ef2c01e32a2a0956ba,handleMessage(android.os.Message),handleMessage(android.os.Message),13,49,private void setExternalStateOnReady() { if (areAllApplicationsReady()) { if ((areAllRecordsLoaded()) && (areCarrierPriviligeRulesLoaded())) { setExternalState(IccCardConstants.State.LOADED); } else { setExternalState(IccCardConstants.State.READY); } } else { setExternalState(IccCardConstants.State.NOT_READY); } },11a6fb59657f7d66beedc5e6dd3abc7eebcbb832,setExternalStateOnReady(),424445,44,87
298006,wifi_tests_src_android_net_wifi_hotspot2_pps_CredentialTest.java,23.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void validateEapTtlsUserCredentialWithoutClientCertChain() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential(); cred.realm = ""realm""; cred.userCredential = new android.net.wifi.hotspot2.pps.Credential.UserCredential(); cred.userCredential.username = ""username""; cred.userCredential.password = ""password""; cred.userCredential.eapType = Credential.EAP_TLS; cred.certCredential = new android.net.wifi.hotspot2.pps.Credential.CertificateCredential(); cred.certCredential.certType = ""x509v3""; cred.certCredential.certSha256FingerPrint = java.security.MessageDigest.getInstance(""SHA-256"").digest(FakeKeys.CLIENT_CERT.getEncoded()); cred.caCertificate = android.net.wifi.FakeKeys.CA_CERT0; cred.clientPrivateKey = android.net.wifi.FakeKeys.RSA_KEY1; assertFalse(cred.validate()); }",60b58ee49f472bfd8a26553c56a39a4364154754,,validateEapTtlsUserCredentialWithoutClientCertChain(),8,22,"@org.junit.Test public void validateCertCredentialWithoutClientCertChain() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential(); cred.realm = ""realm""; cred.certCredential = new android.net.wifi.hotspot2.pps.Credential.CertificateCredential(); cred.certCredential.certType = ""x509v3""; cred.certCredential.certSha256FingerPrint = java.security.MessageDigest.getInstance(""SHA-256"").digest(FakeKeys.CLIENT_CERT.getEncoded()); cred.caCertificate = android.net.wifi.FakeKeys.CA_CERT0; cred.clientPrivateKey = android.net.wifi.FakeKeys.RSA_KEY1; assertFalse(cred.validate()); }",b97f3ed040e9b7e786421ac419d0ed547623ce84,validateCertCredentialWithoutClientCertChain(),484621,245,179
354781,src_java_com_android_internal_telephony_gsm_GsmSmsCbMessage.java,0.0,"public static android.telephony.SmsCbMessage createSmsCbMessage(com.android.internal.telephony.gsm.SmsCbHeader header, android.telephony.SmsCbLocation location, byte[][] pdus) throws java.lang.IllegalArgumentException { if (header.isEtwsPrimaryNotification()) { return new android.telephony.SmsCbMessage(android.telephony.SmsCbMessage.MESSAGE_FORMAT_3GPP, header.getGeographicalScope(), header.getSerialNumber(), location, header.getServiceCategory(), null, ""ETWS"", android.telephony.SmsCbMessage.MESSAGE_PRIORITY_EMERGENCY, header.getEtwsInfo(), header.getCmasInfo()); } else { java.lang.String language = null; java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (byte[] pdu : pdus) { android.util.Pair<java.lang.String, java.lang.String> p = com.android.internal.telephony.gsm.GsmSmsCbMessage.parseBody(header, pdu); language = p.first; sb.append(p.second); } int priority = (header.isEmergencyMessage()) ? android.telephony.SmsCbMessage.MESSAGE_PRIORITY_EMERGENCY : android.telephony.SmsCbMessage.MESSAGE_PRIORITY_NORMAL; return new android.telephony.SmsCbMessage(android.telephony.SmsCbMessage.MESSAGE_FORMAT_3GPP, header.getGeographicalScope(), header.getSerialNumber(), location, header.getServiceCategory(), language, sb.toString(), priority, header.getEtwsInfo(), header.getCmasInfo()); } }",6380539855841f0f528814e944a1d53674defa93,"private static java.lang.String getEtwsPrimaryMessage(android.content.Context context, int category) { android.content.res.Resources r = context.getResources(); switch (category) { case android.telephony.SmsCbEtwsInfo.ETWS_WARNING_TYPE_EARTHQUAKE : return r.getString(R.string.etws_primary_default_message_earthquake); case android.telephony.SmsCbEtwsInfo.ETWS_WARNING_TYPE_TSUNAMI : return r.getString(R.string.etws_primary_default_message_tsunami); case android.telephony.SmsCbEtwsInfo.ETWS_WARNING_TYPE_EARTHQUAKE_AND_TSUNAMI : return r.getString(R.string.etws_primary_default_message_earthquake_and_tsunami); case android.telephony.SmsCbEtwsInfo.ETWS_WARNING_TYPE_TEST_MESSAGE : return r.getString(R.string.etws_primary_default_message_test); case android.telephony.SmsCbEtwsInfo.ETWS_WARNING_TYPE_OTHER_EMERGENCY : return r.getString(R.string.etws_primary_default_message_others); default : return """"; } }",2e46c0ce749a78839e213c402a89e159cc6d0654,"createSmsCbMessage(com.android.internal.telephony.gsm.SmsCbHeader,android.telephony.SmsCbLocation,byte[][])","getEtwsPrimaryMessage(android.content.Context,int)",3,1,"private static java.lang.String getEtwsPrimaryMessage(android.content.Context context, int category) { final android.content.res.Resources r = context.getResources(); switch (category) { case android.telephony.SmsCbEtwsInfo.ETWS_WARNING_TYPE_EARTHQUAKE : return r.getString(R.string.etws_primary_default_message_earthquake); case android.telephony.SmsCbEtwsInfo.ETWS_WARNING_TYPE_TSUNAMI : return r.getString(R.string.etws_primary_default_message_tsunami); case android.telephony.SmsCbEtwsInfo.ETWS_WARNING_TYPE_EARTHQUAKE_AND_TSUNAMI : return r.getString(R.string.etws_primary_default_message_earthquake_and_tsunami); case android.telephony.SmsCbEtwsInfo.ETWS_WARNING_TYPE_TEST_MESSAGE : return r.getString(R.string.etws_primary_default_message_test); case android.telephony.SmsCbEtwsInfo.ETWS_WARNING_TYPE_OTHER_EMERGENCY : return r.getString(R.string.etws_primary_default_message_others); default : return """"; } }",2030737657717f63c071c5ee692852f4d2cc0a50,"getEtwsPrimaryMessage(android.content.Context,int)",269333,307,308
318747,jack_src_com_android_jack_dx_dex_file_ClassDefsSection.java,0.0,"@java.lang.Override public com.android.jack.dx.dex.file.IndexedItem get(com.android.jack.dx.rop.cst.Constant cst) { if (cst == null) { throw new java.lang.NullPointerException(""cst == null""); } throwIfNotPrepared(); com.android.jack.dx.rop.type.Type type = ((com.android.jack.dx.rop.cst.CstType) (cst)).getClassType(); com.android.jack.dx.dex.file.IndexedItem result = classDefs.get(type); if (result == null) { throw new java.lang.IllegalArgumentException(""not found""); } return result; }",c7c02e08fada37b37757fe10b7921402ba064957,"@java.lang.Override public com.android.jack.dx.dex.file.IndexedItem get(com.android.jack.dx.rop.cst.Constant cst) { assert cst != null; throwIfNotPrepared(); com.android.jack.dx.rop.type.Type type = ((com.android.jack.dx.rop.cst.CstType) (cst)).getClassType(); com.android.jack.dx.dex.file.IndexedItem result = classDefs.get(type); if (result == null) { throw new java.lang.IllegalArgumentException(""not found""); } return result; }",34ccff556053d73bfc23158df723007852eb3518,get(com.android.jack.dx.rop.cst.Constant),get(com.android.jack.dx.rop.cst.Constant),3,0,"@java.lang.Override public com.android.jack.dx.dex.file.IndexedItem get(com.android.jack.dx.rop.cst.Constant cst) { assert cst != null; throwIfNotPrepared(); com.android.jack.dx.dex.file.IndexedItem result = classDefs.get(cst); if (result == null) { throw new java.lang.IllegalArgumentException(""not found""); } return result; }",b64ea4e4dee7a12f06babfbb83d1c63a333be042,get(com.android.jack.dx.rop.cst.Constant),521497,143,100
540316,src_com_android_bluetooth_a2dp_A2dpStateMachine.java,20.0,boolean okToConnect(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.btservice.AdapterService adapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); int priority = mService.getPriority(device); if ((adapterService == null) || ((adapterService.isQuietModeEnabled()) && ((mTargetDevice) == null))) { return false; } if (((android.bluetooth.BluetoothProfile.PRIORITY_OFF) < priority) || (((android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED) == priority) && ((device.getBondState()) != (android.bluetooth.BluetoothDevice.BOND_NONE)))) { return true; } return false; },6613f0afd396fcae5ce8a5ec5815fe5f3b3083a8,boolean okToConnect(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.btservice.AdapterService adapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); int priority = mService.getPriority(device); if ((adapterService == null) || (adapterService.isQuietModeEnabled())) { return false; } if (((android.bluetooth.BluetoothProfile.PRIORITY_OFF) < priority) || (((android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED) == priority) && ((device.getBondState()) != (android.bluetooth.BluetoothDevice.BOND_NONE)))) { return true; } return false; },00debfdb84b47e2dac942012c3a047c50f591884,okToConnect(android.bluetooth.BluetoothDevice),okToConnect(android.bluetooth.BluetoothDevice),9,26,"boolean okToConnect(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.btservice.AdapterService adapterService = com.android.bluetooth.btservice.AdapterService.getAdapterService(); int priority = mService.getPriority(device); if ((adapterService == null) || (adapterService.isQuietModeEnabled())) { return false; } if (!(mService.canConnectToDevice(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpStateMachine.TAG, ((""Cannot connect to "" + device) + "" : too many connected devices"")); return false; } if (((android.bluetooth.BluetoothProfile.PRIORITY_OFF) < priority) || (((android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED) == priority) && ((device.getBondState()) != (android.bluetooth.BluetoothDevice.BOND_NONE)))) { return true; } return false; }",114585acaacb2901388ab6c6303cdd3bd8b36c56,okToConnect(android.bluetooth.BluetoothDevice),280274,139,199
362792,core_java_android_util_IntArray.java,3.0,"public void add(int index, int value) { if ((index < 0) || (index > (mSize))) { throw new java.lang.IndexOutOfBoundsException(); } ensureCapacity(1); if (((mSize) - index) != 0) { java.lang.System.arraycopy(mValues, index, mValues, (index + 1), ((mSize) - index)); } mValues[index] = value; (mSize)++; }",b46412ab2a284a3a785a40cea64712ea2724a61e,"public void add(int index, int value) { checkBounds(index); ensureCapacity(1); if (((mSize) - index) != 0) { java.lang.System.arraycopy(mValues, index, mValues, (index + 1), ((mSize) - index)); } mValues[index] = value; (mSize)++; }",5cf7d17e77425ce52eb9f629b991bc595675a83a,"add(int,int)","add(int,int)",5,2,"public void add(int index, int value) { ensureCapacity(1); int rightSegment = (mSize) - index; (mSize)++; checkBounds(index); if (rightSegment != 0) { java.lang.System.arraycopy(mValues, index, mValues, (index + 1), rightSegment); } mValues[index] = value; }",da6559a06b06d998ba61018f7d36cc7944e48617,"add(int,int)",11827,74,76
81416,tests_tests_renderscript_src_android_renderscript_cts_TestFrexp.java,,,,"private void checkFrexpFloatInt() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation outIptr = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32(mRS), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocOutIptr(outIptr); script.forEach_testFrexpFloatInt(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFrexpFloatInt: "" + (e.toString()))); } try { android.renderscript.Allocation outIptr = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32(mRS), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocOutIptr(outIptr); scriptRelaxed.forEach_testFrexpFloatInt(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFrexpFloatInt: "" + (e.toString()))); } }",01e165f16f8f4e50bdf3c83188aaa8b59e27ef51,,checkFrexpFloatInt(),9,3,"private void checkFrexpFloatIntFloat() { android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 5494598401121446765L); try { android.renderscript.Allocation outIptr = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.SIGNED_32, 1), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.set_gAllocOutIptr(outIptr); script.forEach_testFrexpFloatIntFloat(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFrexpFloatIntFloat: "" + (e.toString()))); } try { android.renderscript.Allocation outIptr = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.SIGNED_32, 1), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocOutIptr(outIptr); scriptRelaxed.forEach_testFrexpFloatIntFloat(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFrexpFloatIntFloat: "" + (e.toString()))); } }",f44a41785f9eeb6b05ddf7d6434fd4a4c96dcfed,checkFrexpFloatIntFloat(),143502,437,418
137351,rs_java_android_renderscript_RenderScript.java,222.0,"native void rsnAllocationRead(long con, long id, java.lang.Object d, int dt);",b21b6a8f6a244ede85dc2292a99449718738aeab,"native void rsnAllocationRead(long con, long id, java.lang.Object d, int dt, int mSize, boolean usePadding, byte[] buffer);",95f2c67b09336d9fea5e03ba9f6b4ba365aabf10,"rsnAllocationRead(long,long,java.lang.Object,int)","rsnAllocationRead(long,long,java.lang.Object,int,int,boolean,byte[])",5,103,"native void rsnAllocationRead(long con, long id, java.lang.Object d, int dt, int mSize, boolean usePadding);",e2542a7e61ec4bc442493f3a90471eb53b93d35d,"rsnAllocationRead(long,long,java.lang.Object,int,int,boolean)",432374,36,32
247450,sched_src_com_android_sched_vfs_DirectFS.java,29.0,"@java.lang.Override @javax.annotation.Nonnull java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file, boolean append) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.WRITE); java.io.File path = getNativeFile(file.getPath()); try { return new java.io.FileOutputStream(path, append); } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.WRITE); throw new com.android.sched.util.ConcurrentIOException(e); } }",620818601043282e733f21c75e2beb6e968a52de,"@java.lang.Override @javax.annotation.Nonnull java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file, boolean append) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.WRITE); com.android.sched.util.log.TracerFactory.getTracer().getStatistic(com.android.sched.vfs.DirectFS.WRITTEN_PHYSICAL_FILES).incValue(); java.io.File path = getNativeFile(file.getPath()); try { return new java.io.FileOutputStream(path, append); } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.WRITE); throw new com.android.sched.util.ConcurrentIOException(e); } }",41c2597b75638c93dfd40dc1851a0b1b6f899ea0,"openWrite(com.android.sched.vfs.ParentVFile,boolean)","openWrite(com.android.sched.vfs.ParentVFile,boolean)",5,29,"@java.lang.Override @javax.annotation.Nonnull java.io.OutputStream openWrite(@javax.annotation.Nonnull com.android.sched.vfs.ParentVFile file, boolean append) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.WRITE); com.android.sched.util.log.Tracer tracer = getTracer(); if (tracer != null) { tracer.getStatistic(com.android.sched.vfs.DirectFS.WRITTEN_PHYSICAL_FILES).incValue(); } java.io.File path = getNativeFile(file.getPath()); try { return new java.io.FileOutputStream(path, append); } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.WRITE); throw new com.android.sched.util.ConcurrentIOException(e); } }",f1a471fc5f8b7678607ba4074fc8f2676bbed1b1,"openWrite(com.android.sched.vfs.ParentVFile,boolean)",82140,201,211
253791,luni_src_main_java_libcore_io_Posix.java,91.0,"public native android.system.StructUcred getsockoptUcred(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException;",c2697f4f85dccf93d71c233aaef483d433508510,"public native libcore.io.StructUcred getsockoptUcred(java.io.FileDescriptor fd, int level, int option) throws libcore.io.ErrnoException;",e48c8d6e73c73ee622394544376e3667145d4f79,"getsockoptUcred(java.io.FileDescriptor,int,int)","getsockoptUcred(java.io.FileDescriptor,int,int)",8,88,"public native android.system.StructUcred getsockoptUcred(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException;",c2697f4f85dccf93d71c233aaef483d433508510,"getsockoptUcred(java.io.FileDescriptor,int,int)",494494,39,37
350305,telephony_java_android_telephony_TelephonyManager.java,259.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@android.annotation.Nullable android.telephony.SignalStrength getSignalStrength() { return getSignalStrength(getSubId()); },f60568c9ee53559c2a88cc643498b22cf339e0b6,,getSignalStrength(),9,20,public boolean getEmergencyCallbackMode() { return getEmergencyCallbackMode(getSubId()); },22a1e2b77dc948a38bdbd7c25f33318863a95e5c,getEmergencyCallbackMode(),266936,26,24
342756,src_java_com_android_internal_telephony_DeviceStateMonitor.java,,,,"private void sendDeviceState(com.android.internal.telephony.DeviceStateMonitor.DeviceStateType type, boolean state) { mLocalLog.log((((""send type: "" + type) + "", state="") + state)); mPhone.mCi.sendDeviceState(type, state, null); }",90319c62b533eb9988653039bc6fdaf955022f4e,,"sendDeviceState(com.android.internal.telephony.DeviceStateMonitor$DeviceStateType,boolean)",18,12,"private void sendDeviceState(int type, boolean state) { log((((""send type: "" + (deviceTypeToString(type))) + "", state="") + state), true); mPhone.mCi.sendDeviceState(type, state, null); }",ca41e0b0f81c17343d24c67f021ea5860e394196,"sendDeviceState(int,boolean)",507376,68,57
90451,src_main_java_org_conscrypt_OpenSSLSocketImpl.java,3.0,"private void notifyHandshakeCompletedListeners() { if (((listeners) != null) && (!(listeners.isEmpty()))) { javax.net.ssl.HandshakeCompletedEvent event = new javax.net.ssl.HandshakeCompletedEvent(this, sslSession); for (javax.net.ssl.HandshakeCompletedListener listener : listeners) { try { listener.handshakeCompleted(event); } catch (java.lang.RuntimeException e) { java.lang.Thread thread = java.lang.Thread.currentThread(); thread.getUncaughtExceptionHandler().uncaughtException(thread, e); } } } }",b2090c268f1e04f6d8e32e021193136ab826456f,"private void notifyHandshakeCompletedListeners() { if (((listeners) != null) && (!(listeners.isEmpty()))) { javax.net.ssl.HandshakeCompletedEvent event = new javax.net.ssl.HandshakeCompletedEvent(this, sslParameters.getSession()); for (javax.net.ssl.HandshakeCompletedListener listener : listeners) { try { listener.handshakeCompleted(event); } catch (java.lang.RuntimeException e) { java.lang.Thread thread = java.lang.Thread.currentThread(); thread.getUncaughtExceptionHandler().uncaughtException(thread, e); } } } }",5ff7aea60531194c895b1680a49c3a8f8661fc55,notifyHandshakeCompletedListeners(),notifyHandshakeCompletedListeners(),9,3,"private void notifyHandshakeCompletedListeners() { if (((listeners) != null) && (!(listeners.isEmpty()))) { javax.net.ssl.HandshakeCompletedEvent event = new javax.net.ssl.HandshakeCompletedEvent(this, sslSession); for (javax.net.ssl.HandshakeCompletedListener listener : listeners) { try { listener.handshakeCompleted(event); } catch (java.lang.RuntimeException e) { java.lang.Thread thread = java.lang.Thread.currentThread(); thread.getUncaughtExceptionHandler().uncaughtException(thread, e); } } } }",b2090c268f1e04f6d8e32e021193136ab826456f,notifyHandshakeCompletedListeners(),472936,121,119
326498,tests_wifitests_src_com_android_server_wifi_HalDeviceManagerTest.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testCreateApInterfaceNoInitMode() throws java.lang.Exception { final java.lang.String name = ""ap0""; com.android.server.wifi.HalDeviceManagerTest.BaselineChip chipMock = new com.android.server.wifi.HalDeviceManagerTest.BaselineChip(); chipMock.initialize(); mInOrder = inOrder(mServiceManagerMock, mWifiMock, chipMock.chip, mManagerStatusCallbackMock); executeAndValidateStartupSequence(); com.android.server.wifi.HalDeviceManager.InterfaceDestroyedListener idl = mock(HalDeviceManager.InterfaceDestroyedListener.class); com.android.server.wifi.HalDeviceManager.InterfaceAvailableForRequestListener iafrl = mock(HalDeviceManager.InterfaceAvailableForRequestListener.class); android.hardware.wifi.V1_0.IWifiApIface iface = ((android.hardware.wifi.V1_0.IWifiApIface) (validateInterfaceSequence(chipMock, false, (-1000), IfaceType.AP, name, com.android.server.wifi.HalDeviceManagerTest.BaselineChip.AP_CHIP_MODE_ID, null, idl, iafrl))); mDut.removeIface(iface); mTestLooper.dispatchAll(); mInOrder.verify(chipMock.chip).removeApIface(name); verify(idl).onDestroyed(); verifyNoMoreInteractions(mManagerStatusCallbackMock, idl, iafrl); }",08d00f560916b6ac57faeedc235610644e87fcb3,,testCreateApInterfaceNoInitMode(),8,18,"@org.junit.Test public void testCreateApInterfaceNoInitMode() throws java.lang.Exception { final java.lang.String name = ""ap0""; com.android.server.wifi.HalDeviceManagerTest.BaselineChip chipMock = new com.android.server.wifi.HalDeviceManagerTest.BaselineChip(); chipMock.initialize(); mInOrder = inOrder(mServiceManagerMock, mWifiMock, chipMock.chip, mManagerStatusCallbackMock); executeAndValidateInitializationSequence(); executeAndValidateStartupSequence(); com.android.server.wifi.HalDeviceManager.InterfaceDestroyedListener idl = mock(HalDeviceManager.InterfaceDestroyedListener.class); com.android.server.wifi.HalDeviceManager.InterfaceAvailableForRequestListener iafrl = mock(HalDeviceManager.InterfaceAvailableForRequestListener.class); android.hardware.wifi.V1_0.IWifiApIface iface = ((android.hardware.wifi.V1_0.IWifiApIface) (validateInterfaceSequence(chipMock, false, (-1000), IfaceType.AP, name, com.android.server.wifi.HalDeviceManagerTest.BaselineChip.AP_CHIP_MODE_ID, null, idl, iafrl))); collector.checkThat(""allocated interface"", iface, org.hamcrest.core.IsNull.notNullValue()); mDut.removeIface(iface); mTestLooper.dispatchAll(); mInOrder.verify(chipMock.chip).removeApIface(name); verify(idl).onDestroyed(); verifyNoMoreInteractions(mManagerStatusCallbackMock, idl, iafrl); }",eec73711efa18f5bd706bed4c32e4e30a4aaaff9,testCreateApInterfaceNoInitMode(),389607,331,359
162651,ddmlib_src_main_java_com_android_ddmlib_IDevice.java,29.0,"void startScreenRecorder(@com.android.annotations.NonNull java.lang.String remoteFilePath, @com.android.annotations.NonNull com.android.ddmlib.ScreenRecorderOptions options, @com.android.annotations.NonNull com.android.ddmlib.IShellOutputReceiver receiver) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException;",b902d595241c8a31dc95cc00045a7c4d0d751c23,"void startScreenRecorder(@com.android.annotations.NonNull java.lang.String remoteFilePath, @com.android.annotations.NonNull com.android.ddmlib.ScreenRecorderOptions options, @com.android.annotations.NonNull com.android.ddmlib.IShellOutputReceiver receiver) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException, java.lang.InterruptedException;",7b719129457bf0d6aa19c5ba0c3fab42ce02d8eb,"startScreenRecorder(java.lang.String,com.android.ddmlib.ScreenRecorderOptions,com.android.ddmlib.IShellOutputReceiver)","startScreenRecorder(java.lang.String,com.android.ddmlib.ScreenRecorderOptions,com.android.ddmlib.IShellOutputReceiver)",4,29,"void startScreenRecorder(@com.android.annotations.NonNull java.lang.String remoteFilePath, @com.android.annotations.NonNull com.android.ddmlib.ScreenRecorderOptions options, @com.android.annotations.NonNull com.android.ddmlib.IShellOutputReceiver receiver) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException;",b902d595241c8a31dc95cc00045a7c4d0d751c23,"startScreenRecorder(java.lang.String,com.android.ddmlib.ScreenRecorderOptions,com.android.ddmlib.IShellOutputReceiver)",352905,116,109
43139,common_src_com_android_SdkUtils.java,,,,"public static boolean endsWith(java.lang.CharSequence sequence, java.lang.CharSequence suffix) { return com.android.SdkUtils.endsWith(sequence, sequence.length(), suffix); }",b8eb8649c60e88de99137f8909a089c583ae6118,,"endsWith(java.lang.CharSequence,java.lang.CharSequence)",3,2,"public static boolean endsWith(java.lang.CharSequence sequence, java.lang.CharSequence suffix) { return com.android.utils.SdkUtils.endsWith(sequence, sequence.length(), suffix); }",e256edbcb6fdff34c043f9c52614320dd88af07b,"endsWith(java.lang.CharSequence,java.lang.CharSequence)",523498,40,42
136140,rpclib_src_test_java_com_android_tools_rpclib_binary_DecoderTest.java,,,,"public void testDecodeInt64() { final java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (127)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (128)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)) }); final long[] expected = new long[]{ 0L, 9223372036854775807L, -9223372036854775808L, -1L }; com.android.tools.rpclib.binary.Decoder d = new com.android.tools.rpclib.binary.Decoder(input); try { for (long s64 : expected) { assertEquals(s64, d.int64()); } } catch (java.io.IOException ex) { assertNull(ex); } }",0d882d6776846b9fb45c253fb57d8547473818b4,,testDecodeInt64(),3,1,"public void testDecodeInt64() throws java.io.IOException { final java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(new byte[]{ ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (127)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (0)), ((byte) (128)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)), ((byte) (255)) }); final long[] expected = new long[]{ 0L, 9223372036854775807L, -9223372036854775808L, -1L }; com.android.tools.rpclib.binary.Decoder d = new com.android.tools.rpclib.binary.Decoder(input); for (long s64 : expected) { assertEquals(s64, d.int64()); } }",089d3dace05e364dd23fb371e8a3e735b1e52998,testDecodeInt64(),49532,354,341
116891,src_vogar_android_AdbTarget.java,3.0,"@java.lang.Override public void await(java.io.File nonEmptyDirectory) { run.androidSdk.waitForDevice(); run.androidSdk.waitForNonEmptyDirectory(nonEmptyDirectory, (5 * 60)); run.androidSdk.remount(); }",c9999393db72078e7f98fe9f7e900632a26f28ee,"@java.lang.Override public void await(java.io.File directory) { run.androidSdk.waitForDevice(); run.androidSdk.waitForDirectory(directory, (5 * 60)); run.androidSdk.remount(); }",d18d6e5ec3a7513c3647a5c863998db88e4611c9,await(java.io.File),await(java.io.File),3,3,@java.lang.Override public void await(java.io.File directory) { run.androidSdk.waitForDevice(); run.androidSdk.ensureDirectory(directory); run.androidSdk.remount(); },3ec1355d03e411358b7dafae9018736634ac177a,await(java.io.File),70714,50,45
326498,tests_wifitests_src_com_android_server_wifi_HalDeviceManagerTest.java,7.0,"@org.junit.Test public void testStartStopFlow() throws java.lang.Exception { executeAndValidateStartupSequence(); mDut.stop(); mTestLooper.dispatchAll(); mInOrder.verify(mWifiMock).stop(); mInOrder.verify(mManagerStatusCallbackMock).onStop(); verifyNoMoreInteractions(mServiceManagerMock, mWifiMock, mManagerStatusCallbackMock); }",a5262a80f198f0457a61338932b6468b96ed16e7,"@org.junit.Test public void testStartStopFlow() throws java.lang.Exception { mInOrder = inOrder(mServiceManagerMock, mWifiMock, mManagerStatusCallbackMock); executeAndValidateStartupSequence(); mDut.stop(); mTestLooper.dispatchAll(); mInOrder.verify(mWifiMock).stop(); mInOrder.verify(mManagerStatusCallbackMock).onStop(); verifyNoMoreInteractions(mManagerStatusCallbackMock); }",d49ca727df404fd46dcce0390a340c677b47679f,testStartStopFlow(),testStartStopFlow(),8,9,"@org.junit.Test public void testStartStopFlow() throws java.lang.Exception { mInOrder = inOrder(mServiceManagerMock, mWifiMock, mManagerStatusCallbackMock); executeAndValidateInitializationSequence(); executeAndValidateStartupSequence(); mDut.stop(); mTestLooper.dispatchAll(); mInOrder.verify(mWifiMock).stop(); mInOrder.verify(mManagerStatusCallbackMock).onStop(); verifyNoMoreInteractions(mManagerStatusCallbackMock); }",dd696fab08ce5f2216d37b891dea96f2825005dc,testStartStopFlow(),389631,97,103
335040,service_java_com_android_server_wifi_SupplicantP2pIfaceHal.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean setPowerSave(java.lang.String groupIfName, boolean enable) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure())) return false; com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult(((((""setPowerSave("" + groupIfName) + "", "") + enable) + "")"")); try { result.setResult(mISupplicantP2pIface.setPowerSave(groupIfName, enable)); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""ISupplicantP2pIface exception: "" + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }",782f4351dc4ae5568c78b5b51f3f5810f53b50d6,,"setPowerSave(java.lang.String,boolean)",23,43,"public boolean setPowerSave(java.lang.String groupIfName, boolean enable) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure(""setPowerSave""))) return false; com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult(((((""setPowerSave("" + groupIfName) + "", "") + enable) + "")"")); try { result.setResult(mISupplicantP2pIface.setPowerSave(groupIfName, enable)); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""ISupplicantP2pIface exception: "" + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }",e48c57f18b53ae128b0c7107e1cc6721d6b5d51d,"setPowerSave(java.lang.String,boolean)",258131,229,233
593154,src_com_android_bips_ui_AddManualPrinterDialog.java,9.0,private void updateButtonState() { java.lang.String hostname = mHostnameView.getText().toString(); java.util.regex.Matcher hostMatch = com.android.bips.ui.AddManualPrinterDialog.HOSTNAME_PATTERN.matcher(hostname); mAddButton.setEnabled(hostMatch.matches()); },b5397246a2112a0d89ebc45f9ad5976078738169,private void updateButtonState() { java.lang.String hostname = mHostnameView.getText().toString(); java.util.regex.Matcher uriMatcher = com.android.bips.ui.AddManualPrinterDialog.PRINTER_URI_PATTERN.matcher(hostname); mAddButton.setEnabled(uriMatcher.matches()); },36c284df72fe3b1a4889792bfbe84421329d257e,updateButtonState(),updateButtonState(),2,8,private void updateButtonState() { java.lang.String hostname = mHostnameView.getText().toString(); java.util.regex.Matcher uriMatcher = com.android.bips.ui.AddManualPrinterDialog.FULL_URI_PATTERN.matcher(hostname); mAddButton.setEnabled(uriMatcher.matches()); },5ef65d204f49ddb0cbf150903d49a64be651db29,updateButtonState(),184255,69,68
660825,luni_src_main_java_libcore_io_BlockGuardOs.java,55.0,@java.lang.Override public void close(java.io.FileDescriptor fd) throws android.system.ErrnoException { try { if (fd.isSocket$()) { if (libcore.io.BlockGuardOs.isLingerSocket(fd)) { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); } } } catch (android.system.ErrnoException ignored) { } os.close(fd); },0238cbf65b43ed03ccbfa2dc5cbcba8eabce6298,@java.lang.Override public void close(java.io.FileDescriptor fd) throws android.system.ErrnoException { try { if ((fd != null) && (fd.isSocket$())) { if (libcore.io.BlockGuardOs.isLingerSocket(fd)) { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); } } } catch (android.system.ErrnoException ignored) { } os.close(fd); },9e5c89cf730dbf9d35bb27d480f3c74ad13543dc,close(java.io.FileDescriptor),close(java.io.FileDescriptor),2,55,@java.lang.Override public void close(java.io.FileDescriptor fd) throws android.system.ErrnoException { try { if (fd.isSocket$()) { if (libcore.io.BlockGuardOs.isLingerSocket(fd)) { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); } } } catch (android.system.ErrnoException ignored) { } os.close(fd); },0238cbf65b43ed03ccbfa2dc5cbcba8eabce6298,close(java.io.FileDescriptor),13470,102,95
619666,luni_src_test_java_libcore_dalvik_system_PathClassLoaderTest.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onCustomSlowCall(java.lang.String name) { throw new java.lang.RuntimeException((""onCustomSlowCall: "" + name)); }",f4c7e61a7757cfce06e599155ec4c058b992dc34,,onCustomSlowCall(java.lang.String),6,1,"@java.lang.Override public void onExplicitGc() { throw new java.lang.RuntimeException(""onExplicitGc""); }",55ad37d5b92f90fbe543bd617015cc4ed66cb551,onExplicitGc(),332666,40,28
105745,perflib_src_main_java_com_android_tools_perflib_heap_ClassObj.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.Map<com.android.tools.perflib.heap.Field, java.lang.Object> getStaticFields() { java.util.Map<com.android.tools.perflib.heap.Field, java.lang.Object> result = new java.util.HashMap<com.android.tools.perflib.heap.Field, java.lang.Object>(); getBuffer().setPosition(mStaticFieldsOffset); int numEntries = readUnsignedShort(); for (int i = 0; i < numEntries; i++) { com.android.tools.perflib.heap.Field f = mStaticFields[i]; readId(); readUnsignedByte(); java.lang.Object value = readValue(f.getType()); result.put(f, value); } return result; }",bed180281eeb1aee3e5daba52679de269b7e1193,,getStaticFields(),2,14,"public java.util.Map<com.android.tools.perflib.heap.Field, java.lang.Object> getStaticFieldValues() { java.util.Map<com.android.tools.perflib.heap.Field, java.lang.Object> result = new java.util.HashMap<com.android.tools.perflib.heap.Field, java.lang.Object>(); getBuffer().setPosition(mStaticFieldsOffset); int numEntries = readUnsignedShort(); for (int i = 0; i < numEntries; i++) { com.android.tools.perflib.heap.Field f = mStaticFields[i]; readId(); readUnsignedByte(); java.lang.Object value = readValue(f.getType()); result.put(f, value); } return result; }",3e809071be97953ba047f472c82ecbcc273acbfb,getStaticFieldValues(),361235,168,169
405792,tests_net_java_com_android_server_connectivity_tethering_OffloadControllerTest.java,,,,@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); },9af07e4ab67866ffec487a8c3efcf993ed657dbd,,setUp(),2,1,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mContentResolver = new android.test.mock.MockContentResolver(mContext); mContentResolver.addProvider(Settings.AUTHORITY, new com.android.internal.util.test.FakeSettingsProvider()); when(mContext.getPackageName()).thenReturn(""OffloadControllerTest""); when(mContext.getContentResolver()).thenReturn(mContentResolver); }",36ec9161aee462982561228b0689f162901887da,setUp(),442177,29,96
81416,tests_tests_renderscript_src_android_renderscript_cts_TestTgamma.java,,,,"private void checkTgammaFloat2() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testTgammaFloat2(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testTgammaFloat2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testTgammaFloat2(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testTgammaFloat2: "" + (e.toString()))); } }",d56743ffad66cd4e92c536c6600b16f2feacab4b,,checkTgammaFloat2(),9,3,"private void checkTgammaFloat2Float2() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -4359457384576921786L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testTgammaFloat2Float2(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testTgammaFloat2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testTgammaFloat2Float2(in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testTgammaFloat2Float2: "" + (e.toString()))); } }",08c57ac51f2ae1c1ee6b62b774636810740344b5,checkTgammaFloat2Float2(),143055,297,278
553545,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_VMDebug_VMDebugDebuggee.java,,,,"@java.lang.Override public void run() { synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_READY); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); boolean error_occured = false; boolean is_debugger_connected = false; boolean is_debugging_enabled = false; long last_debugger_activity = -1; try { java.lang.Thread.sleep(100); java.lang.Class<?> vmdebug = java.lang.Class.forName(""dalvik.system.VMDebug""); java.lang.reflect.Method isDebuggerConnectedMethod = vmdebug.getDeclaredMethod(""isDebuggerConnected""); java.lang.reflect.Method isDebuggingEnabledMethod = vmdebug.getDeclaredMethod(""isDebuggingEnabled""); java.lang.reflect.Method lastDebuggerActivityMethod = vmdebug.getDeclaredMethod(""lastDebuggerActivity""); is_debugger_connected = ((boolean) (isDebuggerConnectedMethod.invoke(null))); is_debugging_enabled = ((boolean) (isDebuggingEnabledMethod.invoke(null))); last_debugger_activity = ((long) (lastDebuggerActivityMethod.invoke(null))); } catch (java.lang.NoSuchMethodException e) { error_occured = true; logWriter.println((""Unable to find one of the VMDebug methods!"" + e)); } catch (java.lang.ClassNotFoundException e) { error_occured = true; logWriter.println(""Could not find VMDebug""); } catch (java.lang.Exception e) { logWriter.println((""Other exception occured "" + e)); error_occured = true; } SendResult(error_occured, is_debugger_connected, is_debugging_enabled, last_debugger_activity); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); }",fa7b982f2a7239b124f0aae2a84890e185067203,,run(),3,4,"@java.lang.Override public void run() { synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_READY); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); boolean error_occured = false; boolean is_debugger_connected = false; boolean is_debugging_enabled = false; long last_debugger_activity = -1; try { java.lang.Thread.sleep(100); java.lang.Class<?> vmdebug = java.lang.Class.forName(""dalvik.system.VMDebug""); java.lang.reflect.Method isDebuggerConnectedMethod = vmdebug.getDeclaredMethod(""isDebuggerConnected""); java.lang.reflect.Method isDebuggingEnabledMethod = vmdebug.getDeclaredMethod(""isDebuggingEnabled""); java.lang.reflect.Method lastDebuggerActivityMethod = vmdebug.getDeclaredMethod(""lastDebuggerActivity""); is_debugger_connected = ((boolean) (isDebuggerConnectedMethod.invoke(null))); is_debugging_enabled = ((boolean) (isDebuggingEnabledMethod.invoke(null))); last_debugger_activity = ((long) (lastDebuggerActivityMethod.invoke(null))); } catch (java.lang.NoSuchMethodException e) { error_occured = true; logWriter.println((""Unable to find one of the VMDebug methods!"" + e)); } catch (java.lang.ClassNotFoundException e) { error_occured = true; logWriter.println(""Could not find VMDebug""); } catch (java.lang.Exception e) { error_occured = true; logWriter.println((""Other exception occured "" + e)); } SendResult(error_occured, is_debugger_connected, is_debugging_enabled, last_debugger_activity); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); }",c4c2f9cc0ceb0b5442d73a39cfc8a3d502083bce,run(),453429,394,394
252478,java_tests_RsTest_src_com_android_rs_test_UT_copy_test.java,3.0,"void testFloat2(com.android.rs.test.RenderScript rs, com.android.rs.test.ScriptC_copy_test s) { com.android.rs.test.Allocation a1 = com.android.rs.test.Allocation.createSized(rs, com.android.rs.test.Element.F32_2(rs), 1024); com.android.rs.test.Allocation a2 = com.android.rs.test.Allocation.createSized(rs, com.android.rs.test.Element.F32_2(rs), 1024); float[] f1 = new float[1024 * 2]; float[] f2 = new float[1024 * 2]; for (int ct = 0; ct < (f1.length); ct++) { f1[ct] = ((float) (ct)); } a1.copyFrom(f1); s.forEach_copyFloat2(a1, a2); a2.copyTo(f2); for (int ct = 0; ct < (f1.length); ct++) { if ((f1[ct]) != (f2[ct])) { failTest(); android.util.Log.v(""RS Test"", (((((""Compare failed at "" + ct) + "", "") + (f1[ct])) + "", "") + (f2[ct]))); } } a1.destroy(); a2.destroy(); }",b47323f9c97b3fc4669b9900b91a0b31c71406ef,"void testFloat2(android.renderscript.RenderScript rs, com.android.rs.test.ScriptC_copy_test s) { android.renderscript.Allocation a1 = android.renderscript.Allocation.createSized(rs, android.renderscript.Element.F32_2(rs), 1024); android.renderscript.Allocation a2 = android.renderscript.Allocation.createSized(rs, android.renderscript.Element.F32_2(rs), 1024); float[] f1 = new float[1024 * 2]; float[] f2 = new float[1024 * 2]; for (int ct = 0; ct < (f1.length); ct++) { f1[ct] = ((float) (ct)); } a1.copyFrom(f1); s.forEach_copyFloat2(a1, a2); a2.copyTo(f2); for (int ct = 0; ct < (f1.length); ct++) { if ((f1[ct]) != (f2[ct])) { failTest(); android.util.Log.v(""RS Test"", (((((""Compare failed at "" + ct) + "", "") + (f1[ct])) + "", "") + (f2[ct]))); } } a1.destroy(); a2.destroy(); }",de5dc076e24707ec33580ed25f714c1c32f4fc36,"testFloat2(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_copy_test)","testFloat2(android.renderscript.RenderScript,com.android.rs.test.ScriptC_copy_test)",7,2,"void testFloat2(com.android.rs.test.RenderScript rs, com.android.rs.test.ScriptC_copy_test s) { com.android.rs.test.Allocation a1 = com.android.rs.test.Allocation.createSized(rs, com.android.rs.test.Element.F32_2(rs), 1024); com.android.rs.test.Allocation a2 = com.android.rs.test.Allocation.createSized(rs, com.android.rs.test.Element.F32_2(rs), 1024); float[] f1 = new float[1024 * 2]; float[] f2 = new float[1024 * 2]; for (int ct = 0; ct < (f1.length); ct++) { f1[ct] = ((float) (ct)); } a1.copyFrom(f1); s.forEach_copyFloat2(a1, a2); a2.copyTo(f2); for (int ct = 0; ct < (f1.length); ct++) { if ((f1[ct]) != (f2[ct])) { failTest(); android.util.Log.v(""RS Test"", (((((""Compare failed at "" + ct) + "", "") + (f1[ct])) + "", "") + (f2[ct]))); } } a1.destroy(); a2.destroy(); }",b47323f9c97b3fc4669b9900b91a0b31c71406ef,"testFloat2(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_copy_test)",379541,272,293
230812,ojluni_src_main_java_sun_nio_fs_UnixFileSystemProvider.java,,,,"@java.lang.Override public java.nio.file.Path readSymbolicLink(java.nio.file.Path obj1) throws java.io.IOException { sun.nio.fs.UnixPath link = sun.nio.fs.UnixPath.toUnixPath(obj1); java.lang.SecurityManager sm = java.lang.System.getSecurityManager(); if (sm != null) { java.io.FilePermission perm = new java.io.FilePermission(link.getPathForPermissionCheck(), sun.security.util.SecurityConstants.FILE_READLINK_ACTION); java.security.AccessController.checkPermission(perm); } try { byte[] target = sun.nio.fs.UnixNativeDispatcher.readlink(link); return new sun.nio.fs.UnixPath(link.getFileSystem(), target); } catch (sun.nio.fs.UnixException x) { if ((x.errno()) == (sun.nio.fs.UnixConstants.EINVAL)) throw new java.nio.file.NotLinkException(link.getPathForExceptionMessage()); x.rethrowAsIOException(link); return null; } }",1d967ba23cd98ca4d96cf671df0b089390818060,,readSymbolicLink(java.nio.file.Path),8,6,"@java.lang.Override public java.nio.file.Path readSymbolicLink(java.nio.file.Path obj1) throws java.io.IOException { sun.nio.fs.UnixPath link = sun.nio.fs.UnixPath.toUnixPath(obj1); java.lang.SecurityManager sm = java.lang.System.getSecurityManager(); if (sm != null) { java.io.FilePermission perm = new java.io.FilePermission(link.getPathForPermissionCheck(), sun.security.util.SecurityConstants.FILE_READLINK_ACTION); sm.checkPermission(perm); } try { byte[] target = sun.nio.fs.UnixNativeDispatcher.readlink(link); return new sun.nio.fs.UnixPath(link.getFileSystem(), target); } catch (sun.nio.fs.UnixException x) { if ((x.errno()) == (sun.nio.fs.UnixConstants.EINVAL)) throw new java.nio.file.NotLinkException(link.getPathForExceptionMessage()); x.rethrowAsIOException(link); return null; } }",3854c91161a49149ca2f2649110e631389cfec8c,readSymbolicLink(java.nio.file.Path),119986,242,238
620863,src_java_com_android_internal_telephony_imsphone_ImsPhoneCallTracker.java,111.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean shouldNumberBePlacedOnIms(boolean isEmergency, java.lang.String number) { int processCallResult; try { if ((mImsManager) != null) { processCallResult = mImsManager.shouldProcessCall(isEmergency, new java.lang.String[]{ number }); android.telephony.Rlog.i(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, (((""shouldProcessCall: number: "" + (android.telephony.Rlog.pii(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, number))) + "", result: "") + processCallResult)); } else { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ""ImsManager unavailable, shouldProcessCall returning false.""); return false; } } catch (com.android.ims.ImsException e) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ""ImsService unavailable, shouldProcessCall returning false.""); return false; } if (processCallResult == (android.telephony.ims.feature.MmTelFeature.PROCESS_CALL_IMS)) { return true; } else if (processCallResult == (android.telephony.ims.feature.MmTelFeature.PROCESS_CALL_CSFB)) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ""shouldProcessCall: place over CSFB instead.""); return false; } else { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ""shouldProcessCall returned unknown result.""); return false; } }",3b47647233442b1a13981f575d8493d130a9f205,,"shouldNumberBePlacedOnIms(boolean,java.lang.String)",2,95,"private boolean shouldNumberBePlacedOnIms(boolean isEmergency, java.lang.String number) { int processCallResult; try { if ((mImsManager) != null) { processCallResult = mImsManager.shouldProcessCall(isEmergency, new java.lang.String[]{ number }); android.telephony.Rlog.i(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, (((""shouldProcessCall: number: "" + (android.telephony.Rlog.pii(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, number))) + "", result: "") + processCallResult)); } else { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ""ImsManager unavailable, shouldProcessCall returning false.""); return false; } } catch (com.android.ims.ImsException e) { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ""ImsService unavailable, shouldProcessCall returning false.""); return false; } switch (processCallResult) { case android.telephony.ims.feature.MmTelFeature.PROCESS_CALL_IMS : { return true; } case android.telephony.ims.feature.MmTelFeature.PROCESS_CALL_CSFB : { android.telephony.Rlog.i(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ""shouldProcessCall: place over CSFB instead.""); return false; } default : { android.telephony.Rlog.w(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, ""shouldProcessCall returned unknown result.""); return false; } } }",ab6928f3e3c33052c19cf3dea0cc330412969269,"shouldNumberBePlacedOnIms(boolean,java.lang.String)",347776,435,434
594260,telephony_java_android_telephony_euicc_EuiccManager.java,11.0,"public void continueOperation(android.content.Intent resolutionIntent, android.os.Bundle resolutionExtras) { if (!(isEnabled())) { android.app.PendingIntent callbackIntent = resolutionIntent.getParcelableExtra(android.telephony.euicc.EuiccManager.EXTRA_EMBEDDED_SUBSCRIPTION_RESOLUTION_CALLBACK_INTENT); if (callbackIntent != null) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); } return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().continueOperation(resolutionIntent, resolutionExtras); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",59735a5061dbc6778a6665cc2f54555d06cf172f,"public void continueOperation(android.content.Intent resolutionIntent, android.os.Bundle resolutionExtras) { if (!(isEnabled())) { android.app.PendingIntent callbackIntent = resolutionIntent.getParcelableExtra(android.telephony.euicc.EuiccManager.EXTRA_EMBEDDED_SUBSCRIPTION_RESOLUTION_CALLBACK_INTENT); if (callbackIntent != null) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); } return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.continueOperation(resolutionIntent, resolutionExtras); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",41d09a09e64917fdccc73fecdff0f60595557276,"continueOperation(android.content.Intent,android.os.Bundle)","continueOperation(android.content.Intent,android.os.Bundle)",3,11,"public void continueOperation(android.content.Intent resolutionIntent, android.os.Bundle resolutionExtras) { if (!(isEnabled())) { android.app.PendingIntent callbackIntent = resolutionIntent.getParcelableExtra(android.telephony.euicc.EuiccManager.EXTRA_EMBEDDED_SUBSCRIPTION_RESOLUTION_CALLBACK_INTENT); if (callbackIntent != null) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); } return; } try { getIEuiccController().continueOperation(resolutionIntent, resolutionExtras); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",622365af31673f7f9e7f59c5f91db131d9de4f44,"continueOperation(android.content.Intent,android.os.Bundle)",409156,170,142
424439,test_633-checker-rtp-getclass_src_Main.java,6.0,public static void main(java.lang.String[] args) { java.lang.System.out.println(Main.$opt$noinline$foo(new Main())); java.lang.System.out.println(Main.$opt$noinline$foo(new SubMain())); java.lang.System.out.println(Main.$opt$noinline$foo(new SubSubMain())); },b429330a0f47133f161560b7aa7ea63774df8553,"public static void main(java.lang.String[] args) { java.lang.System.out.println(Main.$opt$noinline$foo(new Main())); java.lang.System.out.println(Main.$noinline$runSmaliTest(""$opt$noinline$foo"", new Main())); java.lang.System.out.println(Main.$opt$noinline$foo(new SubMain())); java.lang.System.out.println(Main.$noinline$runSmaliTest(""$opt$noinline$foo"", new SubMain())); java.lang.System.out.println(Main.$opt$noinline$foo(new SubSubMain())); java.lang.System.out.println(Main.$noinline$runSmaliTest(""$opt$noinline$foo"", new SubSubMain())); }",964e9e68751aae9bcdff431bb4b1defe1dcc979e,main(java.lang.String[]),main(java.lang.String[]),2,7,"public static void main(java.lang.String[] args) { java.lang.System.out.println(Main.$noinline$runSmaliTest(""$opt$noinline$foo"", new Main())); java.lang.System.out.println(Main.$noinline$runSmaliTest(""$opt$noinline$foo"", new SubMain())); java.lang.System.out.println(Main.$noinline$runSmaliTest(""$opt$noinline$foo"", new SubSubMain())); }",3e8c6cc293c69ec1ab12f553aae1aaf440002f33,main(java.lang.String[]),242588,189,117
52061,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_OpenSSLECDHKeyAgreement.java,,,,"private void checkCompleted() { if (!(mCompleted)) { throw new java.lang.IllegalStateException(""Key agreement not completed""); } }",8fff21f5bdded647251ad1ece08afc2f2a5c6ae5,,checkCompleted(),6,3,"private void checkCompleted() { if ((mResult) == null) { throw new java.lang.IllegalStateException(""Key agreement not completed""); } }",d920c1eb21201c8ce687222897e76a4abd0ed313,checkCompleted(),177297,28,32
278609,telecomm_java_android_telecom_Log.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static android.telecom.Logging.Events getEvents() { if ((android.telecom.Log.sEvents) == null) { synchronized(android.telecom.Log.sSingletonSync) { if ((android.telecom.Log.sEvents) == null) { android.telecom.Log.sEvents = new android.telecom.Logging.Events(android.telecom.Log::getSessionId); return android.telecom.Log.sEvents; } } } return android.telecom.Log.sEvents; },f7557cd35e07f43c518291daa09d29d65216ac4d,,getEvents(),3,34,private static android.telecom.Logging.EventManager getEventManager() { if ((android.telecom.Log.sEventManager) == null) { synchronized(android.telecom.Log.sSingletonSync) { if ((android.telecom.Log.sEventManager) == null) { android.telecom.Log.sEventManager = new android.telecom.Logging.EventManager(android.telecom.Log::getSessionId); return android.telecom.Log.sEventManager; } } } return android.telecom.Log.sEventManager; },5524153df055eed6f239e5ec13eeb866de32c7a8,getEventManager(),122367,126,134
507524,src_com_android_bluetooth_opp_BluetoothOppService.java,29.0,@java.lang.Override protected com.android.bluetooth.btservice.ProfileService.IProfileServiceBinder initBinder() { return null; },d1c3437870effa8762d2989280593e0e5e689f3d,@java.lang.Override protected com.android.bluetooth.opp.IProfileServiceBinder initBinder() { return null; },b8bf71af2167fb2abf154c870b9ee74d9d8dbfb0,initBinder(),initBinder(),26,29,@java.lang.Override protected com.android.bluetooth.btservice.ProfileService.IProfileServiceBinder initBinder() { return null; },d1c3437870effa8762d2989280593e0e5e689f3d,initBinder(),155903,27,31
53792,builder_src_main_java_com_android_builder_VariantConfiguration.java,40.0,"public com.android.builder.VariantConfiguration setAndroidDependencies(@com.android.annotations.NonNull java.util.List<com.android.builder.AndroidDependency> directLibraries) { if (directLibraries != null) { mDirectLibraries.addAll(directLibraries); } resolveIndirectLibraryDependencies(mDirectLibraries, mFlatLibraries); return this; }",7ee285830b407cc0afa0040830e3ea7b8a8d1c4d,"public com.android.builder.VariantConfiguration setDependencies(@com.android.annotations.NonNull java.util.List<? extends com.android.builder.DependencyContainer> containers) { for (com.android.builder.DependencyContainer container : containers) { mDirectLibraries.addAll(container.getAndroidDependencies()); mJars.addAll(container.getJarDependencies()); mJars.addAll(container.getLocalDependencies()); } resolveIndirectLibraryDependencies(mDirectLibraries, mFlatLibraries); for (com.android.builder.AndroidDependency androidDependency : mFlatLibraries) { mJars.addAll(androidDependency.getLocalDependencies()); } return this; }",e2bfdd771fffee3c6325c0f0c3ec3bfb42276140,setAndroidDependencies(java.util.List),setDependencies(java.util.List),3,30,"@com.android.annotations.NonNull public com.android.builder.VariantConfiguration setDependencies(@com.android.annotations.NonNull java.util.List<? extends com.android.builder.DependencyContainer> containers) { for (com.android.builder.DependencyContainer container : containers) { mDirectLibraries.addAll(container.getAndroidDependencies()); mJars.addAll(container.getJarDependencies()); mJars.addAll(container.getLocalDependencies()); } resolveIndirectLibraryDependencies(mDirectLibraries, mFlatLibraries); for (com.android.builder.AndroidDependency androidDependency : mFlatLibraries) { mJars.addAll(androidDependency.getLocalDependencies()); } return this; }",4940e463e5d2e69b88250548d58ce971b1024190,setDependencies(java.util.List),334298,136,144
131611,sched_src_com_android_sched_vfs_MessageDigestFS.java,32.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.VPath getPathFromDir(@javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent, @javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVFile file) { return null; }",f00abb02f4717bcb5f0aa1873224a2b56a9260ac,,"getPathFromDir(com.android.sched.vfs.BaseVDir,com.android.sched.vfs.MessageDigestFS$MessageDigestVFile)",8,26,"@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.VPath getPathFromDir(@javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVDir parent, @javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVFile file) { return vfs.getPathFromDir(parent.getWrappedDir(), file.getWrappedFile()); }",e767174958666ce91f003d970a99a10592aaca83,"getPathFromDir(com.android.sched.vfs.MessageDigestFS$MessageDigestVDir,com.android.sched.vfs.MessageDigestFS$MessageDigestVFile)",401128,72,90
369437,src_com_android_bluetooth_avrcp_Avrcp.java,20.0,"private synchronized void addMediaPlayerController(android.media.session.MediaController controller) { java.lang.String packageName = controller.getPackageName(); removeMediaPlayerInfo(packageName); com.android.bluetooth.avrcp.MediaPlayerInfo info = new com.android.bluetooth.avrcp.MediaPlayerInfo(com.android.bluetooth.avrcp.MediaController.wrap(controller), AvrcpConstants.PLAYER_TYPE_AUDIO, AvrcpConstants.PLAYER_SUBTYPE_NONE, getPlayStateBytes(controller.getPlaybackState()), getFeatureBitMask(packageName), getAppLabel(packageName)); addMediaPlayerInfo(info); }",7864f62656c7e697c07419a8cff1695bbbf7fb89,"private synchronized void addMediaPlayerController(android.media.session.MediaController controller) { java.lang.String packageName = controller.getPackageName(); removeMediaPlayerInfo(packageName); com.android.bluetooth.avrcp.MediaPlayerInfo info = new com.android.bluetooth.avrcp.MediaPlayerInfo(com.android.bluetooth.avrcp.MediaController.wrap(controller), AvrcpConstants.PLAYER_TYPE_AUDIO, AvrcpConstants.PLAYER_SUBTYPE_NONE, getPlayStateBytes(controller.getPlaybackState()), getFeatureBitMask(packageName), controller.getPackageName(), getAppLabel(packageName)); addMediaPlayerInfo(info); }",a1e3bb18ccd1d9e56b274a922357b57c53165fa9,addMediaPlayerController(android.media.session.MediaController),addMediaPlayerController(android.media.session.MediaController),3,20,"private synchronized void addMediaPlayerController(android.media.session.MediaController controller) { java.lang.String packageName = controller.getPackageName(); com.android.bluetooth.avrcp.MediaPlayerInfo info = new com.android.bluetooth.avrcp.MediaPlayerInfo(com.android.bluetooth.avrcp.MediaController.wrap(controller), AvrcpConstants.PLAYER_TYPE_AUDIO, AvrcpConstants.PLAYER_SUBTYPE_NONE, getPlayStateBytes(controller.getPlaybackState()), getFeatureBitMask(packageName), controller.getPackageName(), getAppLabel(packageName)); addMediaPlayerInfo(info); }",c06badadce49ff1cd5e30a45b43c877fcc0656cf,addMediaPlayerController(android.media.session.MediaController),477651,139,133
140611,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_core_GradleVariantConfiguration.java,5.0,"@com.android.annotations.NonNull @java.lang.Override public com.android.builder.core.VariantConfiguration addProductFlavor(@com.android.annotations.NonNull com.android.build.gradle.internal.dsl.GroupableProductFlavor productFlavor, @com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider, @com.android.annotations.NonNull java.lang.String dimensionName) { checkNotNull(productFlavor); checkNotNull(sourceProvider); checkNotNull(dimensionName); super.addProductFlavor(productFlavor, sourceProvider, dimensionName); computeNdkConfig(); return this; }",da4560d6f4623aca805b8d4a2288ad1d7fa51e03,"@com.android.annotations.NonNull @java.lang.Override public com.android.builder.core.VariantConfiguration addProductFlavor(@com.android.annotations.NonNull com.android.build.gradle.internal.dsl.GradleGroupableProductFlavor productFlavor, @com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider, @com.android.annotations.NonNull java.lang.String dimensionName) { checkNotNull(productFlavor); checkNotNull(sourceProvider); checkNotNull(dimensionName); super.addProductFlavor(productFlavor, sourceProvider, dimensionName); computeNdkConfig(); return this; }",b376f6122b514baf22b528125bae6b2c65a7c620,"addProductFlavor(com.android.build.gradle.internal.dsl.GroupableProductFlavor,com.android.builder.model.SourceProvider,java.lang.String)","addProductFlavor(com.android.build.gradle.internal.dsl.GradleGroupableProductFlavor,com.android.builder.model.SourceProvider,java.lang.String)",10,3,"@com.android.annotations.NonNull @java.lang.Override public com.android.builder.core.VariantConfiguration addProductFlavor(@com.android.annotations.NonNull com.android.build.gradle.internal.dsl.CoreProductFlavor productFlavor, @com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider, @com.android.annotations.NonNull java.lang.String dimensionName) { checkNotNull(productFlavor); checkNotNull(sourceProvider); checkNotNull(dimensionName); super.addProductFlavor(productFlavor, sourceProvider, dimensionName); computeNdkConfig(); return this; }",75773803b9cefd22daf4471dedf7ced6d69c8ca3,"addProductFlavor(com.android.build.gradle.internal.dsl.CoreProductFlavor,com.android.builder.model.SourceProvider,java.lang.String)",275110,133,131
136582,sched_src_com_android_sched_util_codec_OutputStreamCodec.java,7.0,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.util.file.OutputStreamFile checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) throws com.android.sched.util.codec.ParsingException { super.checkString(context, string); if (string.equals(com.android.sched.util.codec.STANDARD_IO_NAME)) { return new com.android.sched.util.file.OutputStreamFile(); } else { try { return new com.android.sched.util.file.OutputStreamFile(string, context.getRunnableHooks(), existence, change, append); } catch (java.io.IOException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } } }",d8da34b9e8e02707812adaf8306162d7bf4ffdb8,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.util.file.OutputStreamFile checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) throws com.android.sched.util.codec.ParsingException { super.checkString(context, string); if ((string.equals(com.android.sched.util.codec.STANDARD_IO_NAME)) || (string.equals(com.android.sched.util.codec.ERROR_IO_NAME))) { return new com.android.sched.util.file.OutputStreamFile(string); } else { try { return new com.android.sched.util.file.OutputStreamFile(string, context.getRunnableHooks(), existence, change, append); } catch (java.io.IOException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } } }",d757cef03957e95e9ba0c9c2e0258277c7d89d41,"checkString(com.android.sched.util.codec.CodecContext,java.lang.String)","checkString(com.android.sched.util.codec.CodecContext,java.lang.String)",15,8,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.util.file.OutputStreamFile checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) throws com.android.sched.util.codec.ParsingException { if (string.equals(com.android.sched.util.codec.STANDARD_IO_NAME)) { if (!(allowStandardIO)) { throw new com.android.sched.util.codec.ParsingException(""Standard output can not be used""); } return new com.android.sched.util.file.OutputStreamFile(context.getStandardOutput(), StandardOutputKind.STANDARD_OUTPUT.getLocation()); } else if (string.equals(com.android.sched.util.codec.STANDARD_ERROR_NAME)) { if (!(allowStandardError)) { throw new com.android.sched.util.codec.ParsingException(""Standard error can not be used""); } return new com.android.sched.util.file.OutputStreamFile(context.getStandardError(), StandardOutputKind.STANDARD_ERROR.getLocation()); } else { try { return new com.android.sched.util.file.OutputStreamFile(string, context.getRunnableHooks(), existence, change, append); } catch (java.io.IOException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } } }",a455e2b0c384c407eb9e3b54c29ce398248a1e9f,"checkString(com.android.sched.util.codec.CodecContext,java.lang.String)",289401,215,309
321374,test_129-ThreadGetId_src_Main.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static java.lang.Thread getHeapTaskDaemon() throws java.lang.Exception { java.lang.reflect.Field f = java.lang.ThreadGroup.class.getDeclaredField(""systemThreadGroup""); f.setAccessible(true); java.lang.ThreadGroup systemThreadGroup = ((java.lang.ThreadGroup) (f.get(null))); while (true) { int activeCount = systemThreadGroup.activeCount(); java.lang.Thread[] array = new java.lang.Thread[activeCount]; systemThreadGroup.enumerate(array); for (java.lang.Thread thread : array) { if (thread.getName().equals(""HeapTaskDaemon"")) { return thread; } } java.lang.Thread.sleep(10); } }",298923a0c13788bbac70f6fe569abfad69295f77,,getHeapTaskDaemon(),3,0,"static java.lang.Thread getHeapTaskDaemon() throws java.lang.Exception { java.lang.reflect.Field f = java.lang.ThreadGroup.class.getDeclaredField(""systemThreadGroup""); f.setAccessible(true); java.lang.ThreadGroup systemThreadGroup = ((java.lang.ThreadGroup) (f.get(null))); while (true) { int activeCount = systemThreadGroup.activeCount(); java.lang.Thread[] array = new java.lang.Thread[activeCount]; systemThreadGroup.enumerate(array); for (java.lang.Thread thread : array) { if ((thread.getName().equals(""HeapTaskDaemon"")) && ((thread.getState()) != (java.lang.Thread.State.NEW))) { return thread; } } java.lang.Thread.sleep(10); } }",973dfd64b05b8ee512e8ba2bfcee74db24034308,getHeapTaskDaemon(),85955,152,172
577277,core_java_android_net_NetworkCapabilities.java,28.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean allowsUid(int uid) { if (null == (mAllowedUids)) return true; for (android.net.UidRange range : mAllowedUids) { if (range.contains(uid)) { return true; } } return false; },81cee3bc980ce67d6a977b2b8c4fa5042149de4b,,allowsUid(int),13,10,public boolean appliesToUid(int uid) { if (null == (mUids)) return true; for (android.net.UidRange range : mUids) { if (range.contains(uid)) { return true; } } return false; },bf08c0e711d1bdef1a0ecc5efdeb9d787660c126,appliesToUid(int),122890,57,56
513800,src_main_java_com_android_apksig_internal_util_ChainedDataSource.java,,,,"@java.lang.Override public java.nio.ByteBuffer getByteBuffer(long offset, int size) throws java.io.IOException { if ((offset + size) > (mTotalSize)) { throw new java.lang.IndexOutOfBoundsException(""Requested more than available""); } com.android.apksig.util.ReadableDataSink sink = com.android.apksig.util.DataSinks.newInMemoryDataSink(size); feed(offset, size, sink); return sink.getByteBuffer(0, size); }",d27e7cdc725aaf1327c0a8b3615e17dd6e696989,,"getByteBuffer(long,int)",5,1,"@java.lang.Override public java.nio.ByteBuffer getByteBuffer(long offset, int size) throws java.io.IOException { if ((offset + size) > (mTotalSize)) { throw new java.lang.IndexOutOfBoundsException(""Requested more than available""); } com.android.apksig.internal.util.Pair<java.lang.Integer, java.lang.Long> firstSource = locateDataSource(offset); int i = firstSource.getFirst(); offset = firstSource.getSecond(); if ((offset + size) <= (mSources[i].size())) { return mSources[i].getByteBuffer(offset, size); } java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocate(size); for (; (i < (mSources.length)) && (buffer.hasRemaining()); i++) { long sizeToCopy = java.lang.Math.min(((mSources[i].size()) - offset), buffer.remaining()); mSources[i].copyTo(offset, java.lang.Math.toIntExact(sizeToCopy), buffer); offset = 0; } buffer.rewind(); return buffer; }",779b33fb2970f6f9baccabbd3ccf2e43cdc65f5d,"getByteBuffer(long,int)",377655,109,236
577277,services_core_java_com_android_server_connectivity_Vpn.java,51.0,"private void prepareInternal(java.lang.String newPackage) { long token = android.os.Binder.clearCallingIdentity(); try { if ((mInterface) != null) { mStatusIntent = null; agentDisconnect(); jniReset(mInterface); mInterface = null; mVpnUsers = null; } if ((mConnection) != null) { try { mConnection.mService.transact(IBinder.LAST_CALL_TRANSACTION, android.os.Parcel.obtain(), null, IBinder.FLAG_ONEWAY); } catch (java.lang.Exception e) { } mContext.unbindService(mConnection); mConnection = null; } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } try { mNetd.denyProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, (((""Failed to disallow UID "" + (mOwnerUID)) + "" to call protect() "") + e)); } android.util.Log.i(com.android.server.connectivity.Vpn.TAG, (((""Switched from "" + (mPackage)) + "" to "") + newPackage)); mPackage = newPackage; mOwnerUID = getAppUid(newPackage, mUserHandle); try { mNetd.allowProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, (((""Failed to allow UID "" + (mOwnerUID)) + "" to call protect() "") + e)); } mConfig = null; updateState(DetailedState.IDLE, ""prepare""); setVpnForcedLocked(mLockdown); } finally { android.os.Binder.restoreCallingIdentity(token); } }",da5bb34197c856f57fb649275e7336ba8279c502,"private void prepareInternal(java.lang.String newPackage) { long token = android.os.Binder.clearCallingIdentity(); try { if ((mInterface) != null) { mStatusIntent = null; agentDisconnect(); jniReset(mInterface); mInterface = null; mNetworkCapabilities.setAllowedUids(null); } if ((mConnection) != null) { try { mConnection.mService.transact(IBinder.LAST_CALL_TRANSACTION, android.os.Parcel.obtain(), null, IBinder.FLAG_ONEWAY); } catch (java.lang.Exception e) { } mContext.unbindService(mConnection); mConnection = null; } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } try { mNetd.denyProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, (((""Failed to disallow UID "" + (mOwnerUID)) + "" to call protect() "") + e)); } android.util.Log.i(com.android.server.connectivity.Vpn.TAG, (((""Switched from "" + (mPackage)) + "" to "") + newPackage)); mPackage = newPackage; mOwnerUID = getAppUid(newPackage, mUserHandle); try { mNetd.allowProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, (((""Failed to allow UID "" + (mOwnerUID)) + "" to call protect() "") + e)); } mConfig = null; updateState(DetailedState.IDLE, ""prepare""); setVpnForcedLocked(mLockdown); } finally { android.os.Binder.restoreCallingIdentity(token); } }",7d4b4e5dc7b6c4c3ce66e37416b2db2db416a26b,prepareInternal(java.lang.String),prepareInternal(java.lang.String),13,51,"private void prepareInternal(java.lang.String newPackage) { long token = android.os.Binder.clearCallingIdentity(); try { if ((mInterface) != null) { mStatusIntent = null; agentDisconnect(); jniReset(mInterface); mInterface = null; mNetworkCapabilities.setUids(null); } if ((mConnection) != null) { try { mConnection.mService.transact(IBinder.LAST_CALL_TRANSACTION, android.os.Parcel.obtain(), null, IBinder.FLAG_ONEWAY); } catch (java.lang.Exception e) { } mContext.unbindService(mConnection); mConnection = null; } else if ((mLegacyVpnRunner) != null) { mLegacyVpnRunner.exit(); mLegacyVpnRunner = null; } try { mNetd.denyProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, (((""Failed to disallow UID "" + (mOwnerUID)) + "" to call protect() "") + e)); } android.util.Log.i(com.android.server.connectivity.Vpn.TAG, (((""Switched from "" + (mPackage)) + "" to "") + newPackage)); mPackage = newPackage; mOwnerUID = getAppUid(newPackage, mUserHandle); try { mNetd.allowProtect(mOwnerUID); } catch (java.lang.Exception e) { android.util.Log.wtf(com.android.server.connectivity.Vpn.TAG, (((""Failed to allow UID "" + (mOwnerUID)) + "" to call protect() "") + e)); } mConfig = null; updateState(DetailedState.IDLE, ""prepare""); setVpnForcedLocked(mLockdown); } finally { android.os.Binder.restoreCallingIdentity(token); } }",b0d2c6b47ce8d379eb6f0d5db3c53a801319b8de,prepareInternal(java.lang.String),122983,434,433
144267,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_ExtraModelInfo.java,2.0,"public void registerBuildTypeSourceProvider(@com.android.annotations.NonNull java.lang.String name, @com.android.annotations.NonNull com.android.build.gradle.internal.dsl.BuildType buildType, @com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider) { if ((extraArtifactMap.get(name)) == null) { throw new java.lang.IllegalArgumentException(""Artifact with name $name is not yet registered. Use registerArtifactType()""); } extraBuildTypeSourceProviders.put(buildType.getName(), new com.android.build.gradle.internal.variant.DefaultSourceProviderContainer(name, sourceProvider)); }",73b73d6a4a150918d88c35b9539ada30803a3781,"public void registerBuildTypeSourceProvider(@com.android.annotations.NonNull java.lang.String name, @com.android.annotations.NonNull com.android.build.gradle.internal.dsl.BuildType buildType, @com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider) { if ((extraArtifactMap.get(name)) == null) { throw new java.lang.IllegalArgumentException(java.lang.String.format(""Artifact with name %s is not yet registered. Use registerArtifactType()"", name)); } extraBuildTypeSourceProviders.put(buildType.getName(), new com.android.build.gradle.internal.variant.DefaultSourceProviderContainer(name, sourceProvider)); }",fdaac235f848af5568220276107ca68b2f68d7d9,"registerBuildTypeSourceProvider(java.lang.String,com.android.build.gradle.internal.dsl.BuildType,com.android.builder.model.SourceProvider)","registerBuildTypeSourceProvider(java.lang.String,com.android.build.gradle.internal.dsl.BuildType,com.android.builder.model.SourceProvider)",2,3,"public void registerBuildTypeSourceProvider(@com.android.annotations.NonNull java.lang.String name, @com.android.annotations.NonNull com.android.build.gradle.internal.dsl.BuildType buildType, @com.android.annotations.NonNull com.android.builder.model.SourceProvider sourceProvider) { if ((extraArtifactMap.get(name)) == null) { throw new java.lang.IllegalArgumentException(java.lang.String.format(""Artifact with name %1$s is not yet registered. Use registerArtifactType()"", name)); } extraBuildTypeSourceProviders.put(buildType.getName(), new com.android.build.gradle.internal.variant.DefaultSourceProviderContainer(name, sourceProvider)); }",2a0b5e692305a29d9d80579a8ee65e14c9557097,"registerBuildTypeSourceProvider(java.lang.String,com.android.build.gradle.internal.dsl.BuildType,com.android.builder.model.SourceProvider)",351176,157,159
342756,src_java_com_android_internal_telephony_DeviceStateMonitor.java,,,,private boolean isPowerSaveModeOn() { android.os.PowerManager pm = ((android.os.PowerManager) (mPhone.getContext().getSystemService(Context.POWER_SERVICE))); return pm.isPowerSaveMode(); },6fc736001f0b1a9cc91d0408622b267f28792305,,isPowerSaveModeOn(),18,14,private boolean isPowerSaveModeOn() { final android.os.PowerManager pm = ((android.os.PowerManager) (mPhone.getContext().getSystemService(Context.POWER_SERVICE))); return pm.isPowerSaveMode(); },cf37987beeebe185e5934eac967530fddb8ed15e,isPowerSaveModeOn(),507380,49,50
175765,luni_src_main_java_java_math_BigInt.java,7.0,"static java.math.BigInt bigExp(java.math.BigInt a, java.math.BigInt p) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_exp(r.bignum, a.bignum, p.bignum); return r; }",b674b3b0f0e2357eab2b1a13e3c34a085a7e4a8e,"static java.math.BigInt bigExp(java.math.BigInt a, java.math.BigInt p) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_exp(r.nativePtr, a.nativePtr, p.nativePtr); return r; }",d17cef6c250948e0061fd9a79ea45c11f6691dc0,"bigExp(java.math.BigInt,java.math.BigInt)","bigExp(java.math.BigInt,java.math.BigInt)",10,7,"static java.math.BigInt bigExp(java.math.BigInt a, java.math.BigInt p) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_exp(r.bignum, a.bignum, p.bignum); return r; }",b674b3b0f0e2357eab2b1a13e3c34a085a7e4a8e,"bigExp(java.math.BigInt,java.math.BigInt)",337177,72,72
207932,src_com_android_bluetooth_pbap_BluetoothPbapVcardManager.java,31.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean CheckVcardSelector(java.lang.String vcard, java.lang.String vcardselectorop) { boolean selectedIn = true; for (com.android.bluetooth.pbap.BluetoothPbapVcardManager.PropertySelector.PropertyMask bit : com.android.bluetooth.pbap.BluetoothPbapVcardManager.PropertySelector.PropertyMask.values()) { if (checkbit(bit.pos, selector)) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, (""checking for prop :"" + (bit.prop))); if (vcardselectorop.equals(""0"")) { if (checkprop(vcard, bit.prop)) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, (""bit.prop.equals current prop :"" + (bit.prop))); selectedIn = true; break; } else { selectedIn = false; } } else if (vcardselectorop.equals(""1"")) { if (!(checkprop(vcard, bit.prop))) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, (""bit.prop.notequals current prop"" + (bit.prop))); selectedIn = false; return selectedIn; } else { selectedIn = true; } } } } return selectedIn; }",3a06bf2099483766b9b92fe94a52634f4df02c7e,,"CheckVcardSelector(java.lang.String,java.lang.String)",30,14,"private boolean CheckVcardSelector(java.lang.String vcard, java.lang.String vcardselectorop) { boolean selectedIn = true; for (com.android.bluetooth.pbap.BluetoothPbapVcardManager.PropertySelector.PropertyMask bit : com.android.bluetooth.pbap.BluetoothPbapVcardManager.PropertySelector.PropertyMask.values()) { if (checkbit(bit.pos, selector)) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, (""checking for prop :"" + (bit.prop))); if (vcardselectorop.equals(""0"")) { if (checkprop(vcard, bit.prop)) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, (""bit.prop.equals current prop :"" + (bit.prop))); selectedIn = true; break; } else { selectedIn = false; } } else if (vcardselectorop.equals(""1"")) { if (!(checkprop(vcard, bit.prop))) { android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, (""bit.prop.notequals current prop"" + (bit.prop))); selectedIn = false; return selectedIn; } else { selectedIn = true; } } } } return selectedIn; }",85e48b011ac7ac8260fd0586ad2532fcd9d79bbd,"CheckVcardSelector(java.lang.String,java.lang.String)",296968,319,319
387095,src_com_android_bluetooth_avrcp_Avrcp.java,38.0,"private void startBrowsedPlayer(int browseId) { if ((browseId < 0) || (browseId >= (mBrowsePlayerInfoList.size()))) return; com.android.bluetooth.avrcp.BrowsePlayerInfo player = mBrowsePlayerInfoList.get(browseId); android.content.Intent intent = new android.content.Intent(); intent.setComponent(new android.content.ComponentName(player.packageName, player.serviceClass)); android.util.Log.i(com.android.bluetooth.avrcp.Avrcp.TAG, (((""Starting service:"" + (player.packageName)) + "", "") + (player.serviceClass))); try { mContext.startService(intent); } catch (java.lang.SecurityException ex) { android.util.Log.e(com.android.bluetooth.avrcp.Avrcp.TAG, (((""Can't start "" + (player.serviceClass)) + "": "") + (ex.getMessage()))); } }",e2367ea8b74247697a643b4cd51cfaccf250a828,"private void startBrowsedPlayer(int browseId) { com.android.bluetooth.avrcp.BrowsePlayerInfo player = null; synchronized(mBrowsePlayerInfoList) { if ((browseId < 0) || (browseId >= (mBrowsePlayerInfoList.size()))) return; player = mBrowsePlayerInfoList.get(browseId); } android.content.Intent intent = new android.content.Intent(); intent.setComponent(new android.content.ComponentName(player.packageName, player.serviceClass)); android.util.Log.i(com.android.bluetooth.avrcp.Avrcp.TAG, (((""Starting service:"" + (player.packageName)) + "", "") + (player.serviceClass))); try { mContext.startService(intent); } catch (java.lang.SecurityException ex) { android.util.Log.e(com.android.bluetooth.avrcp.Avrcp.TAG, (((""Can't start "" + (player.serviceClass)) + "": "") + (ex.getMessage()))); } }",79dae1018d91bc6799f34b3e6b1f035f952e1977,startBrowsedPlayer(int),startBrowsedPlayer(int),5,19,private void removeMediaController(android.media.session.MediaController controller) { synchronized(mMediaPlayerInfoList) { for (com.android.bluetooth.avrcp.MediaPlayerInfo info : mMediaPlayerInfoList.values()) { com.android.bluetooth.avrcp.MediaController c = info.getMediaController(); if ((c != null) && (c.equals(controller))) info.setMediaController(null); } } },3ef99397d4a510fbaf91710738fc70c86851510e,removeMediaController(android.media.session.MediaController),169018,228,93
316531,tests_wifitests_src_com_android_server_wifi_hotspot2_ANQPRequestManagerTest.java,,,,"@org.junit.Test public void requestR1ANQPElementsWithRC() throws java.lang.Exception { when(mHandler.requestANQP(com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID, com.android.server.wifi.hotspot2.ANQPRequestManagerTest.R1_ANQP_WITH_RC)).thenReturn(true); assertTrue(mManager.requestANQPElements(com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID, com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_ANQP_KEY, true, false)); }",30ed465f3712e8fc267b5966743ab355c4173fbd,,requestR1ANQPElementsWithRC(),9,1,"@org.junit.Test public void requestR1ANQPElementsWithRC() throws java.lang.Exception { when(mHandler.requestANQP(com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID, com.android.server.wifi.hotspot2.ANQPRequestManagerTest.R1_ANQP_WITH_RC)).thenReturn(true); assertTrue(mManager.requestANQPElements(com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID, com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_SCAN_DETAIL, true, false)); }",7616698be31615f216f4501c88d110dbcf948680,requestR1ANQPElementsWithRC(),486437,152,150
380638,telephony_java_android_telephony_MbmsDownloadManager.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static android.telephony.MbmsDownloadManager createManager(android.content.Context context, android.telephony.mbms.IMbmsDownloadManagerListener listener, java.lang.String downloadAppName) throws android.telephony.mbms.MbmsInitializationException { android.telephony.MbmsDownloadManager mdm = new android.telephony.MbmsDownloadManager(context, listener, downloadAppName, android.telephony.SubscriptionManager.getDefaultSubscriptionId()); mdm.bindAndInitialize(); return mdm; }",5adf71867b9cb3deef795d69a51ede4e2a2dd37f,,"createManager(android.content.Context,android.telephony.mbms.IMbmsDownloadManagerListener,java.lang.String)",2,1,"public static android.telephony.MbmsDownloadManager createManager(android.content.Context context, android.telephony.mbms.IMbmsDownloadManagerCallback listener, java.lang.String downloadAppName) throws android.telephony.mbms.MbmsInitializationException { android.telephony.MbmsDownloadManager mdm = new android.telephony.MbmsDownloadManager(context, listener, downloadAppName, android.telephony.SubscriptionManager.getDefaultSubscriptionId()); mdm.bindAndInitialize(); return mdm; }",b433959186fe35d007cd34359fc939933f3b6a30,"createManager(android.content.Context,android.telephony.mbms.IMbmsDownloadManagerCallback,java.lang.String)",456072,103,103
623326,src_java_com_android_internal_telephony_RatRatcheter.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static boolean updateBandwidths(int[] bandwidths, android.telephony.ServiceState serviceState) { if (bandwidths == null) { return false; } int ssAggregateBandwidth = 0; int[] ssBandwidths = serviceState.getCellBandwidths(); if (ssBandwidths != null) { for (int bw : ssBandwidths) { ssAggregateBandwidth += bw; } } int newAggregateBandwidth = 0; for (int bw : bandwidths) { newAggregateBandwidth += bw; } if (newAggregateBandwidth > ssAggregateBandwidth) { serviceState.setCellBandwidths(bandwidths); return true; } return false; }",f80ff2d0c7cd5d50b63658071985506ac8caec7f,,"updateBandwidths(int[],android.telephony.ServiceState)",4,1,"public static boolean updateBandwidths(int[] bandwidths, android.telephony.ServiceState serviceState) { if (bandwidths == null) { return false; } int ssAggregateBandwidth = java.util.Arrays.stream(serviceState.getCellBandwidths()).sum(); int newAggregateBandwidth = java.util.Arrays.stream(bandwidths).sum(); if (newAggregateBandwidth > ssAggregateBandwidth) { serviceState.setCellBandwidths(bandwidths); return true; } return false; }",f2c72980756657e75f6851a7a080292e6ef04011,"updateBandwidths(int[],android.telephony.ServiceState)",198975,145,109
328321,src_java_com_android_internal_telephony_uicc_UiccCard.java,18.0,"public void iccOpenLogicalChannel(java.lang.String AID, android.os.Message response) { loglocal((((((""Open Logical Channel: "" + AID) + "" by pid:"") + (android.os.Binder.getCallingPid())) + "" uid:"") + (android.os.Binder.getCallingUid()))); mCi.iccOpenLogicalChannel(AID, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_OPEN_LOGICAL_CHANNEL_DONE, response)); }",fd23cbd1dfd1144629ff1f5eca0d9f75b986538f,"public void iccOpenLogicalChannel(java.lang.String AID, byte p2, android.os.Message response) { loglocal((((((((""Open Logical Channel: "" + AID) + "" , "") + p2) + "" by pid:"") + (android.os.Binder.getCallingPid())) + "" uid:"") + (android.os.Binder.getCallingUid()))); mCi.iccOpenLogicalChannel(AID, p2, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_OPEN_LOGICAL_CHANNEL_DONE, response)); }",e752ab88b124793fd560e5680fde33d5b6df3a91,"iccOpenLogicalChannel(java.lang.String,android.os.Message)","iccOpenLogicalChannel(java.lang.String,byte,android.os.Message)",6,4,"public void iccOpenLogicalChannel(java.lang.String AID, int p2, android.os.Message response) { loglocal((((((((""Open Logical Channel: "" + AID) + "" , "") + p2) + "" by pid:"") + (android.os.Binder.getCallingPid())) + "" uid:"") + (android.os.Binder.getCallingUid()))); mCi.iccOpenLogicalChannel(AID, p2, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_OPEN_LOGICAL_CHANNEL_DONE, response)); }",56dfc90eb8eff7cc649690844444774804a720d1,"iccOpenLogicalChannel(java.lang.String,int,android.os.Message)",26661,135,135
607217,src_com_android_bluetooth_btservice_AdapterService.java,200.0,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println(""Skipping dump in APP SERVICES, see bluetooth_manager section.""); writer.println(""Use --print argument for dumpsys direct from AdapterService.""); return; } verboseLog((""dumpsys arguments, check for protobuf output: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].startsWith(""--proto"")) { if (args[0].equals(""--proto-bin"")) { dumpMetrics(fd); } else if (args[0].equals(""--proto-java-bin"")) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, (""proto-java-bin dump, empty metrics size is "" + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog(""Unable to write Java protobuf to file descriptor.""); } } return; } writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",fb1a555f3d4c79f3b12e492c82bc1881b812cc15,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println(""Skipping dump in APP SERVICES, see bluetooth_manager section.""); writer.println(""Use --print argument for dumpsys direct from AdapterService.""); return; } verboseLog((""dumpsys arguments, check for protobuf output: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].startsWith(""--proto"")) { if (args[0].equals(""--proto-bin"")) { dumpMetrics(fd); } else if (args[0].equals(""--proto-java-bin"")) { com.android.bluetooth.btservice.BluetoothProto.BluetoothLog metrics = new com.android.bluetooth.btservice.BluetoothProto.BluetoothLog(); byte[] metricsBytes = android.util.Base64.encode(metrics.toByteArray(), Base64.DEFAULT); android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, (""proto-java-bin dump, empty metrics size is "" + (metricsBytes.length))); try (java.io.FileOutputStream protoOut = new java.io.FileOutputStream(fd)) { protoOut.write(metricsBytes); } catch (java.io.IOException e) { errorLog(""Unable to write Java protobuf to file descriptor.""); } } return; } writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",25ee67c469f3cc91e75415564c89f4ae08be2c32,"dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])","dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])",8,201,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) == 0) { writer.println(""Skipping dump in APP SERVICES, see bluetooth_manager section.""); writer.println(""Use --print argument for dumpsys direct from AdapterService.""); return; } verboseLog((""dumpsys arguments, check for protobuf output: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].equals(""--proto-bin"")) { dumpMetrics(fd); return; } writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (com.android.bluetooth.btservice.ProfileService profile : mRegisteredProfiles) { profile.dump(sb); } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",043367c7ce1ebacb54a966fbfdb2600d93161de0,"dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])",75764,477,302
342546,services_core_java_com_android_server_connectivity_tethering_UpstreamNetworkMonitor.java,4.0,"@java.lang.Override public void onLinkPropertiesChanged(android.net.Network network, android.net.LinkProperties newLp) { mTarget.getHandler().post(() -> handleLinkProp(network, newLp)); }",228ec59cde57740a79cb0d1c7daabd237f08bf91,"@java.lang.Override public void onLinkPropertiesChanged(android.net.Network network, android.net.LinkProperties newLp) { handleLinkProp(network, newLp); }",82e2372a58f246c03df002b61153150d9bdb1dd0,"onLinkPropertiesChanged(android.net.Network,android.net.LinkProperties)","onLinkPropertiesChanged(android.net.Network,android.net.LinkProperties)",4,5,"@java.lang.Override public void onLinkPropertiesChanged(android.net.Network network, android.net.LinkProperties newLp) { checkExpectedThread(); handleLinkProp(network, newLp); }",da0670f2bd06d615871ac51053db6025e3a8afcd,"onLinkPropertiesChanged(android.net.Network,android.net.LinkProperties)",38480,42,46
143278,luni_src_main_java_libcore_net_NetworkSecurityPolicy.java,,,,public static synchronized void setCleartextTrafficPermitted(boolean permitted) { libcore.net.NetworkSecurityPolicy.cleartextTrafficPermitted = permitted; },a96a3861708fa46a3f668c9656fc0a3cca4f45d3,,setCleartextTrafficPermitted(boolean),7,0,public static void setCleartextTrafficPermitted(boolean permitted) { libcore.net.NetworkSecurityPolicy.cleartextTrafficPermitted = permitted; },6834e5aa20c58f42292d7dadaeef2ba407094333,setCleartextTrafficPermitted(boolean),260520,30,29
534821,tests_unit_src_com_android_bluetooth_hfp_HeadsetStateMachineTest.java,,,,"@org.junit.Test public void testStateTransition_ConnectedToAudioOn_StackAudioConnected() { setUpConnectedState(); mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_CONNECTING, mTestDevice)); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).transitionTo(any(HeadsetStateMachine.AudioOn.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getAudioStateBroadcastMatcher(mTestDevice, BluetoothHeadset.STATE_AUDIO_CONNECTED, BluetoothHeadset.STATE_AUDIO_DISCONNECTED), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }",f2fa3f84cde415895fc85795772d2fed1ed90755,,testStateTransition_ConnectedToAudioOn_StackAudioConnected(),28,30,"@org.junit.Test public void testStateTransition_ConnectedToAudioOn_StackAudioConnected() { int numBroadcastsSent = setUpConnectedState(); numBroadcastsSent++; mHeadsetStateMachine.sendMessage(HeadsetStateMachine.STACK_EVENT, new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_CONNECTED, mTestDevice)); verify(mHeadsetService, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS).times(numBroadcastsSent)).sendBroadcastAsUser(mIntentArgument.capture(), eq(UserHandle.ALL), eq(HeadsetService.BLUETOOTH_PERM)); com.android.bluetooth.hfp.HeadsetStateMachineTest.verifyAudioStateBroadcast(mTestDevice, BluetoothHeadset.STATE_AUDIO_CONNECTED, BluetoothHeadset.STATE_AUDIO_DISCONNECTED, mIntentArgument.getValue()); org.junit.Assert.assertThat(mHeadsetStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(HeadsetStateMachine.AudioOn.class)); }",ae484fea144a8f4fb056efca83c24235e351af43,testStateTransition_ConnectedToAudioOn_StackAudioConnected(),71071,209,255
208990,jack-tests_tests_com_android_jack_error_FileAccessErrorTest.java,4.0,"@org.junit.Test public void testFileAccessError003() throws java.lang.Exception { com.android.jack.test.helper.ErrorTestHelper te = new com.android.jack.test.helper.ErrorTestHelper(); java.io.File a = com.android.jack.test.toolchain.AbstractTestTools.createFile(te.getSourceFolder(), ""jack.incremental"", ""A.java"", (""package jack.incremental; \n"" + ""public class A {} \n"")); if (!(a.setReadable(false))) { junit.framework.Assert.fail((""Fails to change file permissions of "" + (a.getAbsolutePath()))); } com.android.jack.test.toolchain.JackApiToolchainBase jackApiToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchainBase.class); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackApiToolchain.setErrorStream(errOut); try { jackApiToolchain.addToClasspath(jackApiToolchain.getDefaultBootClasspath()).srcToExe(te.getOutputDexFolder(), false, te.getSourceFolder()); junit.framework.Assert.fail(); } catch (com.android.jack.JackUserException e) { junit.framework.Assert.assertTrue(e.getMessage().contains(""is not readable"")); } finally { if (!(a.setReadable(true))) { junit.framework.Assert.fail((""Fails to change file permissions of "" + (a.getAbsolutePath()))); } } }",79c55d075ede923ec520bb212bb2793904ee982d,"@org.junit.Test public void testFileAccessError003() throws java.lang.Exception { com.android.jack.error.FileAccessErrorTest.assumeNotWindows(); com.android.jack.test.helper.ErrorTestHelper te = new com.android.jack.test.helper.ErrorTestHelper(); java.io.File a = com.android.jack.test.toolchain.AbstractTestTools.createFile(te.getSourceFolder(), ""jack.incremental"", ""A.java"", (""package jack.incremental; \n"" + ""public class A {} \n"")); if (!(a.setReadable(false))) { junit.framework.Assert.fail((""Fails to change file permissions of "" + (a.getAbsolutePath()))); } com.android.jack.test.toolchain.JackApiToolchainBase jackApiToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchainBase.class); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackApiToolchain.setErrorStream(errOut); try { jackApiToolchain.addToClasspath(jackApiToolchain.getDefaultBootClasspath()).srcToExe(te.getOutputDexFolder(), false, te.getSourceFolder()); junit.framework.Assert.fail(); } catch (com.android.jack.JackUserException e) { junit.framework.Assert.assertTrue(e.getMessage().contains(""is not readable"")); } finally { if (!(a.setReadable(true))) { junit.framework.Assert.fail((""Fails to change file permissions of "" + (a.getAbsolutePath()))); } } }",c88b9b86b8e952165d8fcf21da74281ef28dbd95,testFileAccessError003(),testFileAccessError003(),3,3,"@org.junit.Test public void testFileAccessError003() throws java.lang.Exception { com.android.jack.test.helper.ErrorTestHelper te = new com.android.jack.test.helper.ErrorTestHelper(); java.io.File a = com.android.jack.test.toolchain.AbstractTestTools.createFile(te.getSourceFolder(), ""jack.incremental"", ""A.java"", (""package jack.incremental; \n"" + ""public class A {} \n"")); org.junit.Assume.assumeTrue(a.setReadable(false)); com.android.jack.test.toolchain.JackApiToolchainBase jackApiToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchainBase.class); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackApiToolchain.setErrorStream(errOut); try { jackApiToolchain.addToClasspath(jackApiToolchain.getDefaultBootClasspath()).srcToExe(te.getOutputDexFolder(), false, te.getSourceFolder()); junit.framework.Assert.fail(); } catch (com.android.jack.JackUserException e) { junit.framework.Assert.assertTrue(e.getMessage().contains(""is not readable"")); } finally { if (!(a.setReadable(true))) { junit.framework.Assert.fail((""Fails to change file permissions of "" + (a.getAbsolutePath()))); } } }",fa4f124df4c01f1cd5fbba2b30719e16a0028e7c,testFileAccessError003(),17876,368,333
340832,src_com_android_server_telecom_ConnectionServiceWrapper.java,58.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onRttConnectionFailure(java.lang.String callId, android.telecom.Logging.Session.Info sessionInfo) throws android.os.RemoteException { android.telecom.Log.startSession(sessionInfo, ""CSW.oRCF""); long token = android.os.Binder.clearCallingIdentity(); try { synchronized(mLock) { com.android.server.telecom.Call call = mCallIdMapper.getCall(callId); if (call != null) { call.onRttConnectionFailure(); } } } finally { android.os.Binder.restoreCallingIdentity(token); android.telecom.Log.endSession(); } }",ee948d56dc8f45eac799e06f0eda5efd76f778af,,"onRttConnectionFailure(java.lang.String,android.telecom.Logging.Session$Info)",8,9,"@java.lang.Override public void onRttInitiationFailure(java.lang.String callId, int reason, android.telecom.Logging.Session.Info sessionInfo) throws android.os.RemoteException { android.telecom.Log.startSession(sessionInfo, ""CSW.oRIF""); long token = android.os.Binder.clearCallingIdentity(); try { synchronized(mLock) { com.android.server.telecom.Call call = mCallIdMapper.getCall(callId); if (call != null) { call.onRttConnectionFailure(reason); } } } finally { android.os.Binder.restoreCallingIdentity(token); android.telecom.Log.endSession(); } }",9cd14b4029c9f57d9db0c2df4e1d664520244392,"onRttInitiationFailure(java.lang.String,int,android.telecom.Logging.Session$Info)",219937,155,161
81416,tests_tests_renderscript_src_android_renderscript_cts_TestTrunc.java,,,,public void testTrunc() { checkTruncFloat(); checkTruncFloat2(); checkTruncFloat3(); checkTruncFloat4(); },01f9466dba35252bf1cd58119e63d73d2f221225,,testTrunc(),9,5,public void testTrunc() { checkTruncFloatFloat(); checkTruncFloat2Float2(); checkTruncFloat3Float3(); checkTruncFloat4Float4(); },437968c63c0a15365c9ad30da26c91997c43672f,testTrunc(),143294,36,43
81416,tests_tests_renderscript_src_android_renderscript_cts_TestLog.java,,,,"private void checkLogFloat3() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testLogFloat3(in, out); verifyResultsLogFloat3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLogFloat3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLogFloat3(in, out); verifyResultsLogFloat3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLogFloat3: "" + (e.toString()))); } }",27734c44b7e58c703060d7adcc86429f0fb28e15,,checkLogFloat3(),9,3,"private void checkLogFloat3Float3() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, -3184772508390207218L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); script.forEach_testLogFloat3Float3(in, out); verifyResultsLogFloat3Float3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLogFloat3Float3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLogFloat3Float3(in, out); verifyResultsLogFloat3Float3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLogFloat3Float3: "" + (e.toString()))); } }",ccaba36b2bd11b8e8fe00f8b9575e0e63e911678,checkLogFloat3Float3(),143317,317,303
577277,services_core_java_com_android_server_connectivity_Vpn.java,43.0,public synchronized boolean appliesToUid(int uid) { if (!(isRunningLocked())) { return false; } for (android.net.UidRange uidRange : mVpnUsers) { if (uidRange.contains(uid)) { return true; } } return false; },9212efa65a5cf0037356c6a727420650b49d6193,public synchronized boolean appliesToUid(int uid) { if (!(isRunningLocked())) { return false; } return mNetworkCapabilities.allowsUid(uid); },f44afafbc747ba06a2bc17425d84e2c563ad4761,appliesToUid(int),appliesToUid(int),13,43,public synchronized boolean appliesToUid(int uid) { if (!(isRunningLocked())) { return false; } return mNetworkCapabilities.appliesToUid(uid); },9ea093364c23225cc6551805e2bab0f700b37f3c,appliesToUid(int),122935,33,34
83690,src_com_android_phone_CallLogger.java,5.0,"public void logCall(com.android.internal.telephony.CallerInfo ci, java.lang.String number, int presentation, int callType, long start, long duration) { final boolean isEmergencyNumber = android.telephony.PhoneNumberUtils.isLocalEmergencyNumber(number, mApplication); final boolean okToLogEmergencyNumber = mApplication.getResources().getBoolean(R.bool.allow_emergency_numbers_in_call_log); boolean isOkToLogThisCall = (!isEmergencyNumber) || okToLogEmergencyNumber; if (isOkToLogThisCall) { if (com.android.phone.CallLogger.DBG) { log((((((((((((""sending Calllog entry: "" + ci) + "", "") + (com.android.phone.PhoneUtils.toLogSafePhoneNumber(number))) + "","") + presentation) + "", "") + callType) + "", "") + start) + "", "") + duration)); } com.android.phone.common.CallLogAsync.AddCallArgs args = new com.android.phone.common.CallLogAsync.AddCallArgs(mApplication, ci, number, presentation, callType, start, duration); mCallLog.addCall(args); } }",60149e191d0512c8ad9770d33dd8bc8e2d359220,"public void logCall(com.android.internal.telephony.CallerInfo ci, java.lang.String number, int presentation, int callType, long start, long duration, int disconnectCause) { final boolean isEmergencyNumber = android.telephony.PhoneNumberUtils.isLocalEmergencyNumber(number, mApplication); final boolean okToLogEmergencyNumber = mApplication.getResources().getBoolean(R.bool.allow_emergency_numbers_in_call_log); boolean isOkToLogThisCall = (!isEmergencyNumber) || okToLogEmergencyNumber; if (isOkToLogThisCall) { if (com.android.phone.CallLogger.DBG) { log((((((((((((((""sending Calllog entry: "" + ci) + "", "") + (com.android.phone.PhoneUtils.toLogSafePhoneNumber(number))) + "","") + presentation) + "", "") + callType) + "", "") + start) + "", "") + duration) + "", "") + (android.telephony.DisconnectCause.toString(disconnectCause)))); } com.android.phone.common.CallLogAsync.AddCallArgs args = new com.android.phone.common.CallLogAsync.AddCallArgs(mApplication, ci, number, presentation, callType, start, duration, disconnectCause); mCallLog.addCall(args); } }",3c511b735543ca1534cddc32ea1361355d8826f5,"logCall(com.android.internal.telephony.CallerInfo,java.lang.String,int,int,long,long)","logCall(com.android.internal.telephony.CallerInfo,java.lang.String,int,int,long,long,int)",2,1,"public void logCall(com.android.internal.telephony.CallerInfo ci, java.lang.String number, int presentation, int callType, long start, long duration) { final boolean isEmergencyNumber = android.telephony.PhoneNumberUtils.isLocalEmergencyNumber(number, mApplication); final boolean okToLogEmergencyNumber = mApplication.getResources().getBoolean(R.bool.allow_emergency_numbers_in_call_log); boolean isOkToLogThisCall = (!isEmergencyNumber) || okToLogEmergencyNumber; if (isOkToLogThisCall) { if (com.android.phone.CallLogger.DBG) { log((((((((((((""sending Calllog entry: "" + ci) + "", "") + (com.android.phone.PhoneUtils.toLogSafePhoneNumber(number))) + "","") + presentation) + "", "") + callType) + "", "") + start) + "", "") + duration)); } com.android.phone.common.CallLogAsync.AddCallArgs args = new com.android.phone.common.CallLogAsync.AddCallArgs(mApplication, ci, number, presentation, callType, start, duration); mCallLog.addCall(args); } }",60149e191d0512c8ad9770d33dd8bc8e2d359220,"logCall(com.android.internal.telephony.CallerInfo,java.lang.String,int,int,long,long)",357969,311,285
337823,src_com_android_server_telecom_RespondViaSmsManager.java,2.0,"private void rejectCallWithMessage(android.content.Context context, java.lang.String phoneNumber, java.lang.String textMessage, int subId) { if (textMessage != null) { final android.content.ComponentName component = com.android.internal.telephony.SmsApplication.getDefaultRespondViaMessageApplication(context, true); if (component != null) { final android.net.Uri uri = android.net.Uri.fromParts(Constants.SCHEME_SMSTO, phoneNumber, null); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_RESPOND_VIA_MESSAGE, uri); intent.putExtra(Intent.EXTRA_TEXT, textMessage); if (android.telephony.SubscriptionManager.isValidSubscriptionId(subId)) { intent.putExtra(PhoneConstants.SUBSCRIPTION_KEY, subId); } com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = phoneNumber; args.arg2 = context; mHandler.obtainMessage(com.android.server.telecom.RespondViaSmsManager.MSG_SHOW_SENT_TOAST, args).sendToTarget(); intent.setComponent(component); context.startService(intent); } } }",03614f6aaa784e6aa843a1e01bf53427b15bdd39,"private void rejectCallWithMessage(android.content.Context context, java.lang.String phoneNumber, java.lang.String textMessage, int subId, java.lang.String contactName) { if ((textMessage != null) && (!(android.text.TextUtils.isEmpty(textMessage)))) { final android.content.ComponentName component = com.android.internal.telephony.SmsApplication.getDefaultRespondViaMessageApplication(context, true); if (component != null) { final android.net.Uri uri = android.net.Uri.fromParts(Constants.SCHEME_SMSTO, phoneNumber, null); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_RESPOND_VIA_MESSAGE, uri); intent.putExtra(Intent.EXTRA_TEXT, textMessage); if (android.telephony.SubscriptionManager.isValidSubscriptionId(subId)) { intent.putExtra(PhoneConstants.SUBSCRIPTION_KEY, subId); } com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = (!(android.text.TextUtils.isEmpty(contactName))) ? contactName : phoneNumber; args.arg2 = context; mHandler.obtainMessage(com.android.server.telecom.RespondViaSmsManager.MSG_SHOW_SENT_TOAST, args).sendToTarget(); intent.setComponent(component); context.startService(intent); } } }",c782394d6eae224d15dfe1068a23f73635035bd4,"rejectCallWithMessage(android.content.Context,java.lang.String,java.lang.String,int)","rejectCallWithMessage(android.content.Context,java.lang.String,java.lang.String,int,java.lang.String)",3,0,"private void rejectCallWithMessage(android.content.Context context, java.lang.String phoneNumber, java.lang.String textMessage, int subId, java.lang.String contactName) { if (!(android.text.TextUtils.isEmpty(textMessage))) { final android.content.ComponentName component = com.android.internal.telephony.SmsApplication.getDefaultRespondViaMessageApplication(context, true); if (component != null) { final android.net.Uri uri = android.net.Uri.fromParts(Constants.SCHEME_SMSTO, phoneNumber, null); final android.content.Intent intent = new android.content.Intent(android.telephony.TelephonyManager.ACTION_RESPOND_VIA_MESSAGE, uri); intent.putExtra(Intent.EXTRA_TEXT, textMessage); if (android.telephony.SubscriptionManager.isValidSubscriptionId(subId)) { intent.putExtra(PhoneConstants.SUBSCRIPTION_KEY, subId); } com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = (!(android.text.TextUtils.isEmpty(contactName))) ? contactName : phoneNumber; args.arg2 = context; mHandler.obtainMessage(com.android.server.telecom.RespondViaSmsManager.MSG_SHOW_SENT_TOAST, args).sendToTarget(); intent.setComponent(component); context.startService(intent); } } }",b205cc395b753d17b3ab3a7ea4b8d0001e3cb866,"rejectCallWithMessage(android.content.Context,java.lang.String,java.lang.String,int,java.lang.String)",88711,313,305
41115,src_java_com_android_internal_telephony_UiccCardApplication.java,,,,"public void supplyPin(java.lang.String pin, android.os.Message onComplete) { mCi.supplyIccPin(pin, onComplete); }",f22aa7a283ca322f3235a5d857ca2aa9b8df5297,,"supplyPin(java.lang.String,android.os.Message)",22,0,"public void supplyPin(java.lang.String pin, android.os.Message onComplete) { synchronized(mLock) { mCi.supplyIccPin(pin, onComplete); } }",11fde83942a8b561dc532fa636bedfe3b2480498,"supplyPin(java.lang.String,android.os.Message)",499294,35,42
684217,harnesses_tradefed_src_com_android_tradefed_util_OutputUtil.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void addVtsRunnerOutputFile(java.io.File logFile) { java.lang.String fileName = logFile.getName(); com.android.tradefed.result.LogDataType type; if (fileName.endsWith("".html"")) { type = com.android.tradefed.result.LogDataType.HTML; } else if (fileName.startsWith(""logcat"")) { type = com.android.tradefed.result.LogDataType.LOGCAT; } else if ((fileName.startsWith(""bugreport"")) && (fileName.endsWith("".zip""))) { type = com.android.tradefed.result.LogDataType.BUGREPORTZ; } else if ((fileName.endsWith("".txt"")) || (fileName.endsWith("".log""))) { type = com.android.tradefed.result.LogDataType.TEXT; } else if (fileName.endsWith("".zip"")) { type = com.android.tradefed.result.LogDataType.ZIP; } else { com.android.tradefed.log.LogUtil.CLog.w(""Unknown output file type. Skipping %s"", logFile); return; } java.lang.String outputFileName = ((((mTestModuleName) + ""_"") + fileName) + ""_"") + (mAbiBitness); com.android.tradefed.result.FileInputStreamSource inputSource = new com.android.tradefed.result.FileInputStreamSource(logFile); mListener.testLog(outputFileName, type, inputSource); }",54e72a2979a43acab98dba8e412ce1b7d21cfdab,,addVtsRunnerOutputFile(java.io.File),8,0,"private void addVtsRunnerOutputFile(java.io.File logFile) { java.lang.String fileName = logFile.getName(); com.android.tradefed.result.LogDataType type; if (fileName.endsWith("".html"")) { type = com.android.tradefed.result.LogDataType.HTML; } else if (fileName.startsWith(""logcat"")) { type = com.android.tradefed.result.LogDataType.LOGCAT; } else if ((fileName.startsWith(""bugreport"")) && (fileName.endsWith("".zip""))) { type = com.android.tradefed.result.LogDataType.BUGREPORTZ; } else if ((fileName.endsWith("".txt"")) || (fileName.endsWith("".log""))) { type = com.android.tradefed.result.LogDataType.TEXT; } else if (fileName.endsWith("".zip"")) { type = com.android.tradefed.result.LogDataType.ZIP; } else { com.android.tradefed.log.LogUtil.CLog.w(""Unknown output file type. Skipping %s"", logFile); return; } java.lang.String outputFileName = ((((mTestModuleName) + ""_"") + fileName) + ""_"") + (mAbiName); com.android.tradefed.result.FileInputStreamSource inputSource = new com.android.tradefed.result.FileInputStreamSource(logFile); mListener.testLog(outputFileName, type, inputSource); }",f528a9e185d56b505495efd2acfe74693de3b9a9,addVtsRunnerOutputFile(java.io.File),445736,325,324
151051,tests_tests_tv_src_android_media_tv_cts_TvInputServiceTest.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void verifyCommandDispatchKeyMultiple() { mTvView.dispatchKeyEvent(new android.view.KeyEvent(android.view.KeyEvent.ACTION_MULTIPLE, android.view.KeyEvent.KEYCODE_K)); mInstrumentation.waitForIdleSync(); new android.cts.util.PollingCheck(android.media.tv.cts.TvInputServiceTest.TIME_OUT) { @java.lang.Override protected boolean check() { android.media.tv.cts.TvInputServiceTest.CountingTvInputService.CountingSession session = android.media.tv.cts.TvInputServiceTest.CountingTvInputService.sSession; return (session != null) && ((session.mKeyMultipleCount) > 0); } }.run(); }",4184da3cbd6c8aee3ad306fa86f78ec724c4ad79,,verifyCommandDispatchKeyMultiple(),4,17,"public void verifyCommandDispatchKeyMultiple() { resetCounts(); mTvView.dispatchKeyEvent(new android.view.KeyEvent(android.view.KeyEvent.ACTION_MULTIPLE, android.view.KeyEvent.KEYCODE_K)); mInstrumentation.waitForIdleSync(); new android.cts.util.PollingCheck(android.media.tv.cts.TvInputServiceTest.TIME_OUT) { @java.lang.Override protected boolean check() { android.media.tv.cts.TvInputServiceTest.CountingTvInputService.CountingSession session = android.media.tv.cts.TvInputServiceTest.CountingTvInputService.sSession; return (session != null) && ((session.mKeyMultipleCount) > 0); } }.run(); }",8f0288d3ac3a6d9cd5e80dd31449dce11e957752,verifyCommandDispatchKeyMultiple(),386873,164,167
81416,tests_tests_renderscript_src_android_renderscript_cts_TestAtanpi.java,,,,"private void checkAtanpiFloat4() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testAtanpiFloat4(in, out); verifyResultsAtanpiFloat4(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAtanpiFloat4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAtanpiFloat4(in, out); verifyResultsAtanpiFloat4(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAtanpiFloat4: "" + (e.toString()))); } }",4a98b52619272b682969c0fa83bac87141c029ab,,checkAtanpiFloat4(),9,1,"private void checkAtanpiFloat4Float4() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, -6100894109856703738L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); script.forEach_testAtanpiFloat4Float4(in, out); verifyResultsAtanpiFloat4Float4(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAtanpiFloat4Float4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAtanpiFloat4Float4(in, out); verifyResultsAtanpiFloat4Float4(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAtanpiFloat4Float4: "" + (e.toString()))); } }",430528a68e3f9e4b2b356c0d0b195597c5860380,checkAtanpiFloat4Float4(),142614,336,320
81416,tests_tests_renderscript_src_android_renderscript_cts_TestDegrees.java,,,,"private void checkDegreesFloat() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inValue, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testDegreesFloat(inValue, out); verifyResultsDegreesFloat(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testDegreesFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testDegreesFloat(inValue, out); verifyResultsDegreesFloat(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testDegreesFloat: "" + (e.toString()))); } }",edb713f8c1d9719614551419da8c1b412f94643c,,checkDegreesFloat(),9,2,"private void checkDegreesFloatFloat() { android.renderscript.Allocation inValue = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 3685627094478317672L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.forEach_testDegreesFloatFloat(inValue, out); verifyResultsDegreesFloatFloat(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testDegreesFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testDegreesFloatFloat(inValue, out); verifyResultsDegreesFloatFloat(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testDegreesFloatFloat: "" + (e.toString()))); } }",9197b9d322f04dc429f330912b799e98bdd63644,checkDegreesFloatFloat(),142632,315,295
112695,build-system_builder_src_main_java_com_android_builder_core_DefaultBuildType.java,9.0,"@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add(""name"", mName).add(""debuggable"", mDebuggable).add(""testCoverageEnabled"", mTestCoverageEnabled).add(""jniDebuggable"", mJniDebuggable).add(""renderscriptDebuggable"", mRenderscriptDebuggable).add(""renderscriptOptimLevel"", mRenderscriptOptimLevel).add(""applicationIdSuffix"", mApplicationIdSuffix).add(""versionNameSuffix"", mVersionNameSuffix).add(""minifyEnabled"", mMinifyEnabled).add(""zipAlignEnabled"", mZipAlignEnabled).add(""signingConfig"", mSigningConfig).add(""embedMicroApp"", mEmbedMicroApp).add(""mBuildConfigFields"", getBuildConfigFields()).add(""mResValues"", getResValues()).add(""mProguardFiles"", getProguardFiles()).add(""mConsumerProguardFiles"", getConsumerProguardFiles()).add(""mManifestPlaceholders"", getManifestPlaceholders()).toString(); }",9ce8e9b26449954f7131a8bdb1ea0e34afa40910,"@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add(""name"", mName).add(""debuggable"", mDebuggable).add(""testCoverageEnabled"", mTestCoverageEnabled).add(""jniDebuggable"", mJniDebuggable).add(""pseudolocalize"", mPseudolocalize).add(""renderscriptDebuggable"", mRenderscriptDebuggable).add(""renderscriptOptimLevel"", mRenderscriptOptimLevel).add(""applicationIdSuffix"", mApplicationIdSuffix).add(""versionNameSuffix"", mVersionNameSuffix).add(""minifyEnabled"", mMinifyEnabled).add(""zipAlignEnabled"", mZipAlignEnabled).add(""signingConfig"", mSigningConfig).add(""embedMicroApp"", mEmbedMicroApp).add(""mBuildConfigFields"", getBuildConfigFields()).add(""mResValues"", getResValues()).add(""mProguardFiles"", getProguardFiles()).add(""mConsumerProguardFiles"", getConsumerProguardFiles()).add(""mManifestPlaceholders"", getManifestPlaceholders()).toString(); }",3b8ce22d439f30bc5411ee3bbb811569f89e1389,toString(),toString(),4,7,"@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add(""name"", mName).add(""debuggable"", mDebuggable).add(""testCoverageEnabled"", mTestCoverageEnabled).add(""jniDebuggable"", mJniDebuggable).add(""pseudoLocalesEnabled"", mPseudoLocalesEnabled).add(""renderscriptDebuggable"", mRenderscriptDebuggable).add(""renderscriptOptimLevel"", mRenderscriptOptimLevel).add(""applicationIdSuffix"", mApplicationIdSuffix).add(""versionNameSuffix"", mVersionNameSuffix).add(""minifyEnabled"", mMinifyEnabled).add(""zipAlignEnabled"", mZipAlignEnabled).add(""signingConfig"", mSigningConfig).add(""embedMicroApp"", mEmbedMicroApp).add(""mBuildConfigFields"", getBuildConfigFields()).add(""mResValues"", getResValues()).add(""mProguardFiles"", getProguardFiles()).add(""mConsumerProguardFiles"", getConsumerProguardFiles()).add(""mManifestPlaceholders"", getManifestPlaceholders()).toString(); }",fbadeecad62cd2a1ed163d8a2a5a70817d06d0b0,toString(),109692,256,256
379932,core_java_android_net_nsd_NsdManager.java,14.0,private int getListenerKey(java.lang.Object listener) { synchronized(mMapLock) { int valueIndex = mListenerMap.indexOfValue(listener); if (valueIndex != (-1)) { return mListenerMap.keyAt(valueIndex); } } return android.net.nsd.NsdManager.INVALID_LISTENER_KEY; },0cace2b51468e48bde0c27f2f4471ba259af046a,"private int getListenerKey(java.lang.Object listener) { synchronized(mMapLock) { int valueIndex = mListenerMap.indexOfValue(listener); if (valueIndex != (-1)) { return mListenerMap.keyAt(valueIndex); } } throw new java.lang.IllegalArgumentException(""listener not registered""); }",b533cf0afbf0f5d0337f6ce253fc8f98ef99bd8b,getListenerKey(java.lang.Object),getListenerKey(java.lang.Object),9,10,"private int getListenerKey(java.lang.Object listener) { android.net.nsd.NsdManager.checkListener(listener); synchronized(mMapLock) { int valueIndex = mListenerMap.indexOfValue(listener); checkArgument((valueIndex != (-1)), ""listener not registered""); return mListenerMap.keyAt(valueIndex); } }",944bc627ff260077b7fff676ee28880f613954c0,getListenerKey(java.lang.Object),79048,68,75
252478,java_tests_RsTest_src_com_android_rs_test_UT_kernel2d.java,0.0,"private void initializeGlobals(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_kernel2d s) { com.android.rs.test.Type.Builder typeBuilder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.I32(RS)); int X = 2; s.set_gDimX(X); typeBuilder.setX(X); int Y = 5; s.set_gDimY(Y); typeBuilder.setY(Y); A = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.set_A(A); B = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.set_B(B); return; }",533744b981b163e6a3a718083a7b599116a7f896,"private void initializeGlobals(android.renderscript.RenderScript RS, com.android.rs.test.ScriptC_kernel2d s) { android.renderscript.Type.Builder typeBuilder = new android.renderscript.Type.Builder(RS, android.renderscript.Element.I32(RS)); int X = 2; s.set_gDimX(X); typeBuilder.setX(X); int Y = 5; s.set_gDimY(Y); typeBuilder.setY(Y); A = android.renderscript.Allocation.createTyped(RS, typeBuilder.create()); s.set_A(A); B = android.renderscript.Allocation.createTyped(RS, typeBuilder.create()); s.set_B(B); return; }",7786391fc3d449f02a3e35b037460fe063c771b1,"initializeGlobals(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_kernel2d)","initializeGlobals(android.renderscript.RenderScript,com.android.rs.test.ScriptC_kernel2d)",7,0,"private void initializeGlobals(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_kernel2d s) { com.android.rs.test.Type.Builder typeBuilder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.I32(RS)); int X = 2; s.set_gDimX(X); typeBuilder.setX(X); int Y = 5; s.set_gDimY(Y); typeBuilder.setY(Y); A = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.set_A(A); B = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.set_B(B); return; }",533744b981b163e6a3a718083a7b599116a7f896,"initializeGlobals(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_kernel2d)",379443,172,190
206100,jack_src_com_android_jack_ir_ast_JPackage.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public synchronized boolean hasPhantom() { return !(((((phantomTypes.isEmpty()) && (phantomClasses.isEmpty())) && (phantomInterfaces.isEmpty())) && (phantomEnums.isEmpty())) && (phantomAnnotations.isEmpty())); },3b76bf9f1ebd57e09b814a14e3437631b574f73c,,hasPhantom(),7,24,@javax.annotation.Nonnull public synchronized java.util.Collection<com.android.jack.ir.ast.JPhantomClassOrInterface> getPhantoms() { java.util.List<com.android.jack.ir.ast.JPhantomClassOrInterface> phantoms = new java.util.ArrayList<com.android.jack.ir.ast.JPhantomClassOrInterface>((((((phantomTypes.size()) + (phantomClasses.size())) + (phantomInterfaces.size())) + (phantomEnums.size())) + (phantomAnnotations.size()))); phantoms.addAll(phantomTypes); phantoms.addAll(phantomClasses); phantoms.addAll(phantomInterfaces); phantoms.addAll(phantomEnums); phantoms.addAll(phantomAnnotations); return phantoms; },c1b913382769d6ea7fb393f0c99bf51c2913d157,getPhantoms(),97976,56,199
657832,src_com_android_bluetooth_hfp_HeadsetPhoneState.java,6.0,"private void stopListenForPhoneState() { if (mListening) { mTelephonyManager.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE); mListening = false; } }",31fddde9cf6c767758c3e0e62239383cd7305cdf,"private void stopListenForPhoneState() { if ((mPhoneStateListener) == null) { android.util.Log.i(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ""stopListenForPhoneState, no listener indicates nothing is listening""); return; } mTelephonyManager.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE); mTelephonyManager.setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_NORMAL); mPhoneStateListener = null; }",d869fa3a59d9793d10d76a846b5417ab02737885,stopListenForPhoneState(),stopListenForPhoneState(),10,6,"private void stopListenForPhoneState() { if ((mPhoneStateListener) == null) { android.util.Log.i(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, ""stopListenForPhoneState(), no listener indicates nothing is listening""); return; } android.util.Log.i(com.android.bluetooth.hfp.HeadsetPhoneState.TAG, (""stopListenForPhoneState(), stopping listener, enabled_events="" + (getTelephonyEventsToListen()))); mTelephonyManager.listen(mPhoneStateListener, PhoneStateListener.LISTEN_NONE); mPhoneStateListener = null; }",c2545a7af39b6af12d8d2df0438da9db315ec9c0,stopListenForPhoneState(),182350,127,138
143589,luni_src_main_java_java_util_zip_ZipOutputStream.java,9.0,"@java.lang.Override public void write(byte[] buffer, int offset, int byteCount) throws java.io.IOException { java.util.Arrays.checkOffsetAndCount(buffer.length, offset, byteCount); if ((currentEntry) == null) { throw new java.util.zip.ZipException(""No active entry""); } if ((currentEntry.getMethod()) == (java.util.zip.ZipOutputStream.STORED)) { out.write(buffer, offset, byteCount); } else { super.write(buffer, offset, byteCount); } crc.update(buffer, offset, byteCount); }",e3997b1de58acf467e1f0c292d35c3f6119608c3,"@java.lang.Override public void write(byte[] buffer, int offset, int byteCount) throws java.io.IOException { java.util.Arrays.checkOffsetAndCount(buffer.length, offset, byteCount); if ((currentEntry) == null) { throw new java.util.zip.ZipException(""No active entry""); } final long totalBytes = (crc.tbytes) + byteCount; if ((totalBytes > (Zip64.MAX_ZIP_ENTRY_AND_ARCHIVE_SIZE)) && (!(currentEntryNeedsZip64))) { throw new java.io.IOException(((""Zip entry size ("" + totalBytes) + "" bytes) cannot be represented in the zip format (needs Zip64)"")); } if ((currentEntry.getMethod()) == (java.util.zip.ZipOutputStream.STORED)) { out.write(buffer, offset, byteCount); } else { super.write(buffer, offset, byteCount); } crc.update(buffer, offset, byteCount); }",7e8eec1e6e69ad361e9bd60bab5580cfa5bcf23b,"write(byte[],int,int)","write(byte[],int,int)",3,9,"@java.lang.Override public void write(byte[] buffer, int offset, int byteCount) throws java.io.IOException { java.util.Arrays.checkOffsetAndCount(buffer.length, offset, byteCount); if ((currentEntry) == null) { throw new java.util.zip.ZipException(""No active entry""); } final long totalBytes = (crc.tbytes) + byteCount; if ((totalBytes > (Zip64.MAX_ZIP_ENTRY_AND_ARCHIVE_SIZE)) && (!(currentEntryNeedsZip64))) { throw new java.io.IOException((((""Zip entry size ("" + totalBytes) + "" bytes) cannot be represented in the zip format (needs Zip64)."") + "" Set the entry length using ZipEntry#setLength to use Zip64 where necessary."")); } if ((currentEntry.getMethod()) == (java.util.zip.ZipOutputStream.STORED)) { out.write(buffer, offset, byteCount); } else { super.write(buffer, offset, byteCount); } crc.update(buffer, offset, byteCount); }",51bc8422aa3875689f958c29f4ecf5bb38fb1da6,"write(byte[],int,int)",496918,226,248
310631,tests_wifitests_src_com_android_server_wifi_hotspot2_anqp_DomainNameElementTest.java,,,,@org.junit.Test public void parseBufferWithEmptyBuffer() throws java.lang.Exception { assertTrue(com.android.server.wifi.hotspot2.anqp.DomainNameElement.parse(java.nio.ByteBuffer.allocate(0)).getDomains().isEmpty()); },b2568f32a00baca78e892d86f5ba61fcd2391d38,,parseBufferWithEmptyBuffer(),8,3,@org.junit.Test public void parseEmptyBuffer() throws java.lang.Exception { assertTrue(com.android.server.wifi.hotspot2.anqp.DomainNameElement.parse(java.nio.ByteBuffer.allocate(0)).getDomains().isEmpty()); },d625ae66e6cc046b4e476c490acbe3264e89b2e0,parseEmptyBuffer(),116624,57,55
41115,src_java_com_android_internal_telephony_IccCardProxy.java,,,,public boolean getIccFdnEnabled() { java.lang.Boolean retValue = ((mUiccApplication) != null) ? mUiccApplication.getIccFdnEnabled() : false; return retValue; },c1a0d213c6b23afaf39f0a200a3e461e103a64bc,,getIccFdnEnabled(),22,4,public boolean getIccRecordsLoaded() { synchronized(mLock) { if ((mIccRecords) != null) { return mIccRecords.getRecordsLoaded(); } return false; } },e367941da0d2f95138a64fa3eb2ad1925c287042,getIccRecordsLoaded(),499851,48,43
305913,jack-tests_tests_com_android_jack_java7_invokecustom_test004_Tests.java,,,,"@com.android.jack.annotations.CalledByInvokeCustom(invokeMethodHandle = @com.android.jack.annotations.LinkerMethodHandle(kind = com.android.jack.annotations.MethodHandleKind.INVOKE_STATIC, enclosingType = com.android.jack.java7.invokecustom.test004.Tests.class, name = ""linkerMethod""), methodHandleExtraArgs = { @com.android.jack.annotations.Constant(booleanValue = true), @com.android.jack.annotations.Constant(byteValue = 1), @com.android.jack.annotations.Constant(charValue = 'a'), @com.android.jack.annotations.Constant(shortValue = 1024), @com.android.jack.annotations.Constant(intValue = 1), @com.android.jack.annotations.Constant(floatValue = 11.0F), @com.android.jack.annotations.Constant(doubleValue = 2.2), @com.android.jack.annotations.Constant(stringValue = ""Hello""), @com.android.jack.annotations.Constant(classValue = com.android.jack.java7.invokecustom.test004.Tests.class), @com.android.jack.annotations.Constant(longValue = 123456789L) }, name = ""add"", returnType = int.class, argumentTypes = { int.class, int.class }) private static int add(int a, int b) { return a + b; }",f49a1fd8c9027ca1100e992783bf5f265f15d136,,"add(int,int)",7,0,"@com.android.jack.annotations.CalledByInvokeCustom(invokeMethodHandle = @com.android.jack.annotations.LinkerMethodHandle(kind = com.android.jack.annotations.MethodHandleKind.INVOKE_STATIC, enclosingType = com.android.jack.java7.invokecustom.test004.Tests.class, name = ""linkerMethod"", argumentTypes = { java.lang.invoke.MethodHandles.Lookup.class, java.lang.String.class, java.lang.invoke.MethodType.class, boolean.class, byte.class, char.class, short.class, int.class, float.class, double.class, java.lang.String.class, java.lang.Class.class, long.class }), methodHandleExtraArgs = { @com.android.jack.annotations.Constant(booleanValue = true), @com.android.jack.annotations.Constant(byteValue = 1), @com.android.jack.annotations.Constant(charValue = 'a'), @com.android.jack.annotations.Constant(shortValue = 1024), @com.android.jack.annotations.Constant(intValue = 1), @com.android.jack.annotations.Constant(floatValue = 11.1F), @com.android.jack.annotations.Constant(doubleValue = 2.2), @com.android.jack.annotations.Constant(stringValue = ""Hello""), @com.android.jack.annotations.Constant(classValue = com.android.jack.java7.invokecustom.test004.Tests.class), @com.android.jack.annotations.Constant(longValue = 123456789L) }, name = ""add"", returnType = int.class, argumentTypes = { int.class, int.class }) private static int add(int a, int b) { return a + b; }",563382f5723339c98d7437f8cb66da323a75c105,"add(int,int)",44756,302,386
579565,src_java_com_android_internal_telephony_RIL.java,116.0,"@java.lang.Override public void nvResetConfig(int resetType, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_NV_RESET_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" resetType = "") + resetType)); } try { radioProxy.nvResetConfig(rr.mSerial, com.android.internal.telephony.RIL.convertToHalResetNvType(resetType)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""nvResetConfig"", e); } } }",aef55b5ac05bff4ad12969e415cbf7972801524a,"@java.lang.Override public void nvResetConfig(int resetType, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_NV_RESET_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" resetType = "") + resetType)); } try { radioProxy.nvResetConfig(rr.mSerial, com.android.internal.telephony.RIL.convertToHalResetNvType(resetType)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""nvResetConfig"", e); } } }",0c3416bcd5e1ce1b08f524bc5710db7856616fcd,"nvResetConfig(int,android.os.Message)","nvResetConfig(int,android.os.Message)",3,116,"@java.lang.Override public void nvResetConfig(int resetType, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_NV_RESET_CONFIG, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" resetType = "") + resetType)); } try { radioProxy.nvResetConfig(rr.mSerial, com.android.internal.telephony.RIL.convertToHalResetNvType(resetType)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""nvResetConfig"", e); } } }",aef55b5ac05bff4ad12969e415cbf7972801524a,"nvResetConfig(int,android.os.Message)",89227,246,242
631549,services_core_java_com_android_server_IpSecService.java,46.0,"@java.lang.Override public synchronized void removeAddressFromTunnelInterface(int tunnelResourceId, java.lang.String localAddr) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); }",9ced367f2c059bde4a27bdb94ddf0039fb711894,"@java.lang.Override public synchronized void removeAddressFromTunnelInterface(int tunnelResourceId, android.net.LinkAddress localAddr) { com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); try { mSrvConfig.getNetdInstance().interfaceDelAddress(tunnelInterfaceInfo.mInterfaceName, localAddr.getAddress().getHostAddress(), localAddr.getPrefixLength()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throwFromServiceSpecificException(e); } }",08bffc10b0a6c35140d45d931d42387b5707720a,"removeAddressFromTunnelInterface(int,java.lang.String)","removeAddressFromTunnelInterface(int,android.net.LinkAddress)",6,70,"@java.lang.Override public synchronized void removeAddressFromTunnelInterface(int tunnelResourceId, android.net.LinkAddress localAddr) { enforceNetworkStackPermission(); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); try { mSrvConfig.getNetdInstance().interfaceDelAddress(tunnelInterfaceInfo.mInterfaceName, localAddr.getAddress().getHostAddress(), localAddr.getPrefixLength()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throw new java.lang.IllegalArgumentException(e); } }",c3835ec40c4559ddd06c0cf871d14f9db4896a17,"removeAddressFromTunnelInterface(int,android.net.LinkAddress)",137917,171,179
140611,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_VariantManager.java,26.0,"@java.lang.Override @com.android.annotations.NonNull public java.util.Map<java.lang.String, com.android.build.gradle.internal.ProductFlavorData<com.android.build.gradle.internal.dsl.GroupableProductFlavor>> getProductFlavors() { return productFlavors; }",e1675c0be47d6007eec741dfa469997ddd7066ee,"@java.lang.Override @com.android.annotations.NonNull public java.util.Map<java.lang.String, com.android.build.gradle.internal.ProductFlavorData<com.android.build.gradle.internal.dsl.GradleGroupableProductFlavor>> getProductFlavors() { return productFlavors; }",484749f3a6e72d69a53afa48dbac3000452d6aab,getProductFlavors(),getProductFlavors(),10,25,"@java.lang.Override @com.android.annotations.NonNull public java.util.Map<java.lang.String, com.android.build.gradle.internal.ProductFlavorData<com.android.build.gradle.internal.dsl.CoreProductFlavor>> getProductFlavors() { return productFlavors; }",eb7e9e443ead4d6734f9ca55f2dd8c6f6e5c57e4,getProductFlavors(),275192,71,69
390413,services_core_java_com_android_server_hdmi_RequestShortAudioDescriptorAction.java,,,,"private void sendRequestShortAudioDescriptor() { byte[] params = new byte[4]; params[0] = ((byte) (MSAPI_CODEC_DD)); params[1] = ((byte) (MSAPI_CODEC_AAC)); params[2] = ((byte) (MSAPI_CODEC_DTS)); params[3] = ((byte) (MSAPI_CODEC_DDP)); com.android.server.hdmi.HdmiCecMessage command = com.android.server.hdmi.HdmiCecMessageBuilder.buildRequestShortAudioDescriptor(getSourceAddress(), mAvrAddress, params); sendCommand(command, new com.android.server.hdmi.HdmiControlService.SendMessageCallback() { @java.lang.Override public void onSendCompleted(int error) { switch (error) { case Constants.SEND_RESULT_SUCCESS : case Constants.SEND_RESULT_BUSY : case Constants.SEND_RESULT_FAILURE : break; case Constants.SEND_RESULT_NAK : com.android.server.hdmi.HdmiLogger.debug(""Failed to send <Request Short Audio Descriptor>.""); finish(); break; } } }); }",2ad0d66bed855f37793fdc562239f29b249bd570,,sendRequestShortAudioDescriptor(),11,4,"private void sendRequestShortAudioDescriptor() { byte[] params = new byte[4]; params[0] = ((byte) (Constants.MSAPI_CODEC_DD)); params[1] = ((byte) (Constants.MSAPI_CODEC_AAC)); params[2] = ((byte) (Constants.MSAPI_CODEC_DTS)); params[3] = ((byte) (Constants.MSAPI_CODEC_DDP)); com.android.server.hdmi.HdmiCecMessage command = com.android.server.hdmi.HdmiCecMessageBuilder.buildRequestShortAudioDescriptor(getSourceAddress(), mAvrAddress, params); sendCommand(command, new com.android.server.hdmi.HdmiControlService.SendMessageCallback() { @java.lang.Override public void onSendCompleted(int error) { switch (error) { case Constants.SEND_RESULT_SUCCESS : case Constants.SEND_RESULT_BUSY : case Constants.SEND_RESULT_FAILURE : break; case Constants.SEND_RESULT_NAK : com.android.server.hdmi.HdmiLogger.debug(""Failed to send <Request Short Audio Descriptor>.""); finish(); break; } } }); }",faf84fa6b70b83a7276a4a9cb3a745bf63db3e77,sendRequestShortAudioDescriptor(),435424,260,268
542981,src_com_android_bluetooth_hid_HidDeviceNativeInterface.java,,,,public boolean connect(byte[] btAddress) { return connectNative(btAddress); },a55867ccec116adf8308ada69f911fa13668b84f,,connect(byte[]),14,9,private android.bluetooth.BluetoothDevice getDevice(byte[] address) { if (address == null) { return null; } return mAdapter.getRemoteDevice(address); },390a0db45126fc6917841f670e525d439a1be6dd,getDevice(byte[]),329430,18,34
41115,src_java_com_android_internal_telephony_ims_IsimFileHandler.java,,,,"protected void loge(java.lang.String msg) { android.util.Log.e(com.android.internal.telephony.ims.IsimFileHandler.LOG_TAG, msg); }",c78362ab4d8f097f0da9a3866a51291cb01bc0d4,,loge(java.lang.String),22,0,"@java.lang.Override protected void loge(java.lang.String msg) { android.util.Log.e(com.android.internal.telephony.ims.IsimFileHandler.LOG_TAG, msg); }",9734f745ddde713c5c4d61ef35fdb337a807cc4f,loge(java.lang.String),500129,43,49
638000,telephony_java_android_telephony_SubscriptionManager.java,0.0,"public android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int subId) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd((""[getActiveSubscriptionInfo]+ subId="" + subId)); if (!(android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionManager.logd(""[getActiveSubscriptionInfo]- invalid subId""); } return null; } android.telephony.SubscriptionInfo subInfo = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService(""isub"")); if (iSub != null) { subInfo = iSub.getActiveSubscriptionInfo(subId, mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return subInfo; }",ca606e61805b31a05fd77077fe8baf72a4dbd9a4,"@android.annotation.SuppressAutoDoc @android.telephony.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int subId) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd((""[getActiveSubscriptionInfo]+ subId="" + subId)); if (!(android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionManager.logd(""[getActiveSubscriptionInfo]- invalid subId""); } return null; } android.telephony.SubscriptionInfo subInfo = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService(""isub"")); if (iSub != null) { subInfo = iSub.getActiveSubscriptionInfo(subId, mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return subInfo; }",109dd0f30bd1c8cbea7e80e40e1290dba75445fc,getActiveSubscriptionInfo(int),getActiveSubscriptionInfo(int),2,0,"@android.annotation.SuppressAutoDoc @android.annotation.RequiresPermission(android.Manifest.permission.READ_PHONE_STATE) public android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int subId) { if (android.telephony.SubscriptionManager.VDBG) android.telephony.SubscriptionManager.logd((""[getActiveSubscriptionInfo]+ subId="" + subId)); if (!(android.telephony.SubscriptionManager.isValidSubscriptionId(subId))) { if (android.telephony.SubscriptionManager.DBG) { android.telephony.SubscriptionManager.logd(""[getActiveSubscriptionInfo]- invalid subId""); } return null; } android.telephony.SubscriptionInfo subInfo = null; try { com.android.internal.telephony.ISub iSub = ISub.Stub.asInterface(android.os.ServiceManager.getService(""isub"")); if (iSub != null) { subInfo = iSub.getActiveSubscriptionInfo(subId, mContext.getOpPackageName()); } } catch (android.os.RemoteException ex) { } return subInfo; }",7568448fb8783a54966a7f9f250492d622797708,getActiveSubscriptionInfo(int),516777,224,224
101896,build-system_gradle_src_main_groovy_com_android_build_gradle_internal_variant_BaseVariantOutputData.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.android.annotations.NonNull public java.lang.String getDirName() { return variantData.getVariantConfiguration().getDirName(); },f9b007b24c1f86cb75965857202fdccda7dc6f79,,getDirName(),4,4,@com.android.annotations.NonNull public java.lang.String getDirName() { if ((densityFilter) == null) { return variantData.getVariantConfiguration().computeDirNameWithSplits(com.android.build.gradle.internal.variant.BaseVariantOutputData.UNIVERSAL); } return variantData.getVariantConfiguration().computeDirNameWithSplits(densityFilter); },7c187e0cf1da201b34fedf17144492932ea4e028,getDirName(),153853,32,84
253791,luni_src_main_java_libcore_io_Os.java,64.0,"public int getsockoptByte(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException;",3b1f1a4672c7170e8f2b946e4be6a90eaff8aed7,"public int getsockoptByte(java.io.FileDescriptor fd, int level, int option) throws libcore.io.ErrnoException;",8f51e59b36639ce6a3a469ac42cbc25e41d50e54,"getsockoptByte(java.io.FileDescriptor,int,int)","getsockoptByte(java.io.FileDescriptor,int,int)",8,61,"public int getsockoptByte(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException;",3b1f1a4672c7170e8f2b946e4be6a90eaff8aed7,"getsockoptByte(java.io.FileDescriptor,int,int)",494582,30,29
90454,build-system_manifest-merger_src_main_java_com_android_manifmerger_Actions.java,16.0,"public org.w3c.dom.Node toXml(org.w3c.dom.Element location) { location.appendChild(mSourceLocation.toXml(location.getOwnerDocument())); org.w3c.dom.Element position = location.getOwnerDocument().createElement(""position""); position.setAttribute(""line"", java.lang.String.valueOf(mPosition.getLine())); position.setAttribute(""col"", java.lang.String.valueOf(mPosition.getColumn())); position.setAttribute(""offset"", java.lang.String.valueOf(mPosition.getOffset())); location.appendChild(position); return location; }",52d739d1a1ca86040e3aecab1dcec7acb4458ddc,"public org.w3c.dom.Node toXml(org.w3c.dom.Element location) { org.w3c.dom.Node locationNode = mSourceLocation.toXml(location.getOwnerDocument()); location.appendChild(locationNode); org.w3c.dom.Element position = location.getOwnerDocument().createElement(""position""); position.setAttribute(""line"", java.lang.String.valueOf(mPosition.getLine())); position.setAttribute(""col"", java.lang.String.valueOf(mPosition.getColumn())); position.setAttribute(""offset"", java.lang.String.valueOf(mPosition.getOffset())); location.appendChild(position); return location; }",4c2429314373f91461fa103166ac478932e0e701,toXml(org.w3c.dom.Element),toXml(org.w3c.dom.Element),2,16,"public org.w3c.dom.Node toXml(org.w3c.dom.Element location) { location.appendChild(mSourceLocation.toXml(location.getOwnerDocument())); location.appendChild(com.android.manifmerger.PositionImpl.toXml(mPosition, location.getOwnerDocument())); return location; }",549c8b2fe513d32d52f288406a220fb8ac0ac4ca,toXml(org.w3c.dom.Element),271822,143,72
278072,service_java_com_android_server_wifi_p2p_WifiP2pServiceImpl.java,44.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private android.net.wifi.p2p.WifiP2pDeviceList getPeers(java.lang.String pkgName, int uid) { if ((mWifiInjector) == null) { mWifiInjector = com.android.server.wifi.WifiInjector.getInstance(); } com.android.server.wifi.util.WifiPermissionsUtil wifiPermissionsUtil = mWifiInjector.getWifiPermissionsUtil(); if (wifiPermissionsUtil.canAccessScanResults(pkgName, uid, com.android.server.wifi.p2p.WifiP2pServiceImpl.UNKNOWN_PID, ((Build.VERSION_CODES.N) + 2))) { return new android.net.wifi.p2p.WifiP2pDeviceList(mPeers); } else { return new android.net.wifi.p2p.WifiP2pDeviceList(); } }",37c54a2bc57e6c508c5bdb237ee363882bc65c82,,"getPeers(java.lang.String,int)",9,45,"private android.net.wifi.p2p.WifiP2pDeviceList getPeers(android.os.Bundle pkg, int uid) { java.lang.String pkgName = pkg.getString(WifiP2pManager.CALLING_PACKAGE); boolean scanPermission = false; com.android.server.wifi.util.WifiPermissionsUtil wifiPermissionsUtil; if ((mWifiInjector) == null) { mWifiInjector = com.android.server.wifi.WifiInjector.getInstance(); } wifiPermissionsUtil = mWifiInjector.getWifiPermissionsUtil(); try { scanPermission = wifiPermissionsUtil.canAccessScanResults(pkgName, uid, ((Build.VERSION_CODES.N) + 2)); } catch (java.lang.SecurityException e) { android.util.Log.e(com.android.server.wifi.p2p.WifiP2pServiceImpl.TAG, ""Security Exception, cannot access peer list""); } if (scanPermission) { return new android.net.wifi.p2p.WifiP2pDeviceList(mPeers); } else { return new android.net.wifi.p2p.WifiP2pDeviceList(); } }",46702fada3412e2649bc55c70659e10e362a8c69,"getPeers(android.os.Bundle,int)",380279,187,255
110322,jack_tests_com_android_jack_TestTools.java,32.0,"@javax.annotation.Nonnull public static com.android.jack.ir.ast.JSession buildSession(@javax.annotation.Nonnull com.android.jack.Options options, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks) throws java.lang.Exception { if (((options.proguardFlagsFiles) != null) && (!(options.proguardFlagsFiles.isEmpty()))) { if ((options.flags) == null) { options.flags = new com.android.jack.shrob.spec.Flags(); } for (java.io.File proguardFlagsFile : options.proguardFlagsFiles) { com.android.jack.shrob.proguard.GrammarActions.parse(proguardFlagsFile.getAbsolutePath(), ""."", options.flags); } options.applyShrobFlags(); } options.checkValidity(hooks); com.android.sched.util.config.ThreadConfig.setConfig(options.getConfig()); com.android.jack.ir.ast.JSession session = com.android.jack.Jack.buildSession(options, hooks); com.android.sched.scheduler.Request request = com.android.jack.Jack.createInitialRequest(); request.addInitialTagsOrMarkers(com.android.jack.Jack.getJavaSourceInitialTagSet()); if (com.android.sched.util.config.ThreadConfig.get(Options.GENERATE_JACK_FILE).booleanValue()) { request.addProduction(com.android.jack.backend.jayce.JackFormatProduct.class); } com.android.sched.scheduler.PlanBuilder<com.android.jack.ir.ast.JSession> planBuilder = request.getPlanBuilder(com.android.jack.ir.ast.JSession.class); com.android.jack.Jack.fillDexPlan(options, planBuilder); request.addTargetIncludeTagOrMarker(ClassDefItemMarker.Complete.class); planBuilder.getPlan().getScheduleInstance().process(session); return session; }",25eca8f05c3262814bb623b8e44c485249b27d38,"@javax.annotation.Nonnull public static com.android.jack.ir.ast.JSession buildSession(@javax.annotation.Nonnull com.android.jack.Options options, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks) throws java.lang.Exception { if (((options.proguardFlagsFiles) != null) && (!(options.proguardFlagsFiles.isEmpty()))) { if ((options.flags) == null) { options.flags = new com.android.jack.shrob.spec.Flags(); } for (java.io.File proguardFlagsFile : options.proguardFlagsFiles) { com.android.jack.shrob.proguard.GrammarActions.parse(proguardFlagsFile.getAbsolutePath(), ""."", options.flags); } options.applyShrobFlags(); } options.checkValidity(hooks); com.android.sched.util.config.ThreadConfig.setConfig(options.getConfig()); com.android.jack.ir.ast.JSession session = com.android.jack.Jack.buildSession(options, hooks); com.android.sched.scheduler.Request request = com.android.jack.Jack.createInitialRequest(); request.addInitialTagsOrMarkers(com.android.jack.Jack.getJavaSourceInitialTagSet()); if (com.android.sched.util.config.ThreadConfig.get(Options.GENERATE_JACK_FILE).booleanValue()) { request.addProduction(com.android.jack.backend.jayce.JayceFormatProduct.class); } com.android.sched.scheduler.PlanBuilder<com.android.jack.ir.ast.JSession> planBuilder = request.getPlanBuilder(com.android.jack.ir.ast.JSession.class); com.android.jack.Jack.fillDexPlan(options, planBuilder); request.addTargetIncludeTagOrMarker(ClassDefItemMarker.Complete.class); planBuilder.getPlan().getScheduleInstance().process(session); return session; }",89ed00ea180e4491744841cae73b1245f116b002,"buildSession(com.android.jack.Options,com.android.sched.util.RunnableHooks)","buildSession(com.android.jack.Options,com.android.sched.util.RunnableHooks)",6,32,"@javax.annotation.Nonnull public static com.android.jack.ir.ast.JSession buildSession(@javax.annotation.Nonnull com.android.jack.Options options, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks) throws java.lang.Exception { if (((options.proguardFlagsFiles) != null) && (!(options.proguardFlagsFiles.isEmpty()))) { if ((options.flags) == null) { options.flags = new com.android.jack.shrob.spec.Flags(); } for (java.io.File proguardFlagsFile : options.proguardFlagsFiles) { com.android.jack.shrob.proguard.GrammarActions.parse(proguardFlagsFile.getAbsolutePath(), ""."", options.flags); } options.applyShrobFlags(); } options.checkValidity(hooks); com.android.sched.util.config.ThreadConfig.setConfig(options.getConfig()); com.android.jack.ir.ast.JSession session = com.android.jack.Jack.buildSession(options, hooks); com.android.sched.scheduler.Request request = com.android.jack.Jack.createInitialRequest(); request.addInitialTagsOrMarkers(com.android.jack.Jack.getJavaSourceInitialTagSet()); request.addProduction(com.android.jack.backend.dex.IntermediateDexProduct.class); if (com.android.sched.util.config.ThreadConfig.get(Options.GENERATE_JAYCE_FILE).booleanValue()) { request.addProduction(com.android.jack.backend.jayce.JayceFormatProduct.class); } com.android.sched.scheduler.PlanBuilder<com.android.jack.ir.ast.JSession> planBuilder = request.getPlanBuilder(com.android.jack.ir.ast.JSession.class); com.android.jack.Jack.fillDexPlan(options, planBuilder); request.addTargetIncludeTagOrMarker(ClassDefItemMarker.Complete.class); planBuilder.getPlan().getScheduleInstance().process(session); return session; }",1cb7f732c899698c2592ca31fadfc4b8a956e174,"buildSession(com.android.jack.Options,com.android.sched.util.RunnableHooks)",296309,433,455
340746,ojluni_src_main_java_java_lang_String.java,25.0,"native void setCharAt(int index, char c);",302214a46f15d7e143237d4684c6032f6bfaad68,"@dalvik.annotation.optimization.FastNative native void setCharAt(int index, char c);",e14b0d96e99ca69f903ee7b32d727c83149b097b,"setCharAt(int,char)","setCharAt(int,char)",3,17,"@dalvik.annotation.optimization.FastNative private native java.lang.String doReplace(char oldChar, char newChar);",3cc4568f53481cdcf3ddc66c95c07147f9103e85,"doReplace(char,char)",86099,20,27
505551,src_com_android_bluetooth_hid_HidDevService.java,34.0,"@java.lang.Override public boolean sendReport(android.bluetooth.BluetoothDevice device, int id, byte[] data) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.v(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, (((""sendReport(): device="" + device) + "" id="") + id)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { return false; } return service.sendReport(device, id, data); }",95d3fc471092f0478f51c7446c8f82f9d9f6dfd7,"@java.lang.Override public boolean sendReport(android.bluetooth.BluetoothDevice device, int id, byte[] data) { if (com.android.bluetooth.hid.HidDevService.DBG) android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, (((""sendReport(): device="" + device) + "" id="") + id)); com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { android.util.Log.w(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, ""sendReport: HidDevService is null""); return false; } return service.sendReport(device, id, data); }",6dabec3a463f28c3382e36a4d19a4483c4b17ba7,"sendReport(android.bluetooth.BluetoothDevice,int,byte[])","sendReport(android.bluetooth.BluetoothDevice,int,byte[])",9,34,"@java.lang.Override public boolean sendReport(android.bluetooth.BluetoothDevice device, int id, byte[] data) { if (com.android.bluetooth.hid.HidDevService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDevService.BluetoothHidDeviceBinder.TAG, (((""sendReport(): device="" + device) + "" id="") + id)); } com.android.bluetooth.hid.HidDevService service = getService(); if (service == null) { return false; } return service.sendReport(device, id, data); }",60cf08d59210df242a66e64d1139f61a4a52f443,"sendReport(android.bluetooth.BluetoothDevice,int,byte[])",47813,177,138
647079,tests_net_java_android_net_apf_ApfTest.java,39.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void assertDataMemoryContents(int expected, android.net.apf.ApfGenerator gen, byte[] packet, byte[] expected_data, int filterAge) throws android.net.apf.ApfGenerator.IllegalInstructionException, java.lang.Exception { byte[] data = new byte[expected_data.length]; byte[] program = gen.generate(); android.net.apf.ApfTest.assertReturnCodesEqual(expected, android.net.apf.ApfTest.apfSimulate(program, packet, data, filterAge)); if (!(java.util.Arrays.equals(expected_data, data))) { throw new java.lang.Exception((((((""program: "" + (com.android.internal.util.HexDump.toHexString(program))) + ""\ndata memory: "") + (com.android.internal.util.HexDump.toHexString(data))) + ""\nexpected: "") + (com.android.internal.util.HexDump.toHexString(expected_data)))); } }",3f75a79bc45b095d23878c1aba6d3984653d5a17,,"assertDataMemoryContents(int,android.net.apf.ApfGenerator,byte[],byte[],int)",14,5,"private void assertDataMemoryContents(int expected, byte[] program, byte[] packet, byte[] data, byte[] expected_data) throws android.net.apf.ApfGenerator.IllegalInstructionException, java.lang.Exception { android.net.apf.ApfTest.assertReturnCodesEqual(expected, android.net.apf.ApfTest.apfSimulate(program, packet, data, 0)); if (!(java.util.Arrays.equals(expected_data, data))) { throw new java.lang.Exception((((((""program: "" + (com.android.internal.util.HexDump.toHexString(program))) + ""\ndata memory: "") + (com.android.internal.util.HexDump.toHexString(data))) + ""\nexpected: "") + (com.android.internal.util.HexDump.toHexString(expected_data)))); } }",c0f24a95fdc42292f1455fd3a1d934acfd29e62c,"assertDataMemoryContents(int,byte[],byte[],byte[],byte[])",166233,222,191
197692,ojluni_src_main_java_javax_crypto_Cipher.java,50.0,"public static final javax.crypto.Cipher getInstance(java.lang.String transformation) throws java.security.NoSuchAlgorithmException, javax.crypto.NoSuchPaddingException { java.util.List transforms = javax.crypto.Cipher.getTransforms(transformation); java.util.List services = javax.crypto.Cipher.getServices(transforms); java.util.Iterator t = services.iterator(); java.lang.Exception failure = null; while (t.hasNext()) { java.security.Provider.Service s = ((java.security.Provider.Service) (t.next())); if ((javax.crypto.JceSecurity.canUseProvider(s.getProvider())) == false) { continue; } javax.crypto.Cipher.Transform tr = javax.crypto.Cipher.getTransform(s, transforms); if (tr == null) { continue; } int canuse = tr.supportsModePadding(s); if (canuse == (javax.crypto.Cipher.S_NO)) { continue; } if (canuse == (javax.crypto.Cipher.S_YES)) { try { javax.crypto.CipherSpi spi = ((javax.crypto.CipherSpi) (s.newInstance(null))); return new javax.crypto.Cipher(transformation, transforms); } catch (java.lang.Exception e) { failure = e; } } else { try { javax.crypto.CipherSpi spi = ((javax.crypto.CipherSpi) (s.newInstance(null))); tr.setModePadding(spi); return new javax.crypto.Cipher(transformation, transforms); } catch (java.lang.Exception e) { failure = e; } } } throw new java.security.NoSuchAlgorithmException((""Cannot find any provider supporting "" + transformation), failure); }",d44a4752ad81f1d576d26c34b43933840900a5a9,"public static final javax.crypto.Cipher getInstance(java.lang.String transformation, java.lang.String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, javax.crypto.NoSuchPaddingException { if ((provider == null) || ((provider.length()) == 0)) { throw new java.lang.IllegalArgumentException(""Missing provider""); } java.security.Provider p = java.security.Security.getProvider(provider); if (p == null) { throw new java.security.NoSuchProviderException((""No such provider: "" + provider)); } return javax.crypto.Cipher.getCipher(transformation, p); }",9f82e6c0c86a4c0f15a3f5b3e43340a56e39327b,getInstance(java.lang.String),"getInstance(java.lang.String,java.lang.String)",4,0,"public static final javax.crypto.Cipher getInstance(java.lang.String transformation, java.lang.String provider) throws java.security.NoSuchAlgorithmException, java.security.NoSuchProviderException, javax.crypto.NoSuchPaddingException { if ((provider == null) || ((provider.length()) == 0)) { throw new java.lang.IllegalArgumentException(""Missing provider""); } java.security.Provider p = java.security.Security.getProvider(provider); if (p == null) { throw new java.security.NoSuchProviderException((""No such provider: "" + provider)); } return javax.crypto.Cipher.createCipher(transformation, p); }",b2e18075a945ee27f228d7dbabd5b69fb53e840c,"getInstance(java.lang.String,java.lang.String)",132320,137,137
317740,services_core_java_com_android_server_BluetoothManagerService.java,27.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.String toString() { return (((android.text.format.DateFormat.format(""MM-dd hh:mm:ss.SSS "", mTimestamp)) + (mEnable ? "" Enabled "" : "" Disabled "")) + "" by "") + (mPackageName); }",5f2149ab1c232466643d8d3f157bd3251187a405,,toString(),3,0,"public java.lang.String toString() { return (((android.text.format.DateFormat.format(""MM-dd hh:mm:ss "", mTimestamp)) + (mEnable ? "" Enabled "" : "" Disabled "")) + "" by "") + (mPackageName); }",9400cfc924e988a72824e3499d027c2f79418702,toString(),496693,65,63
55231,luni_src_main_java_java_util_zip_ZipFile.java,12.0,"public java.io.InputStream getInputStream(java.util.zip.ZipEntry entry) throws java.io.IOException { entry = getEntry(entry.getName()); if (entry == null) { return null; } java.io.RandomAccessFile localRaf = raf; synchronized(localRaf) { java.util.zip.ZipFile.RAFStream rafStream = new java.util.zip.ZipFile.RAFStream(localRaf, ((entry.localHeaderRelOffset) + 28)); java.io.DataInputStream is = new java.io.DataInputStream(rafStream); int localExtraLenOrWhatever = java.lang.Short.reverseBytes(is.readShort()); is.close(); rafStream.skip(((entry.nameLength) + localExtraLenOrWhatever)); rafStream.length = (rafStream.offset) + (entry.compressedSize); if ((entry.compressionMethod) == (java.util.zip.ZipEntry.DEFLATED)) { int bufSize = java.lang.Math.max(1024, ((int) (java.lang.Math.min(entry.getSize(), 65535L)))); return new java.util.zip.ZipFile.ZipInflaterInputStream(rafStream, new java.util.zip.Inflater(true), bufSize, entry); } else { return rafStream; } } }",2f3d4a18d3340409872ae2d6934dca67f1d1a044,"public java.io.InputStream getInputStream(java.util.zip.ZipEntry entry) throws java.io.IOException { entry = getEntry(entry.getName()); if (entry == null) { return null; } java.io.RandomAccessFile localRaf = raf; synchronized(localRaf) { java.util.zip.ZipFile.RAFStream rafStream = new java.util.zip.ZipFile.RAFStream(localRaf, ((entry.localHeaderRelOffset) + 6)); java.io.DataInputStream is = new java.io.DataInputStream(rafStream); int gpbf = java.lang.Short.reverseBytes(is.readShort()); if ((gpbf & (~(java.util.zip.ZipFile.GPBF_SUPPORTED_MASK))) != 0) { throw new java.util.zip.ZipException((""General Purpose Bit Flag bit(s) not supported, GPBF="" + gpbf)); } is.skipBytes(20); int localExtraLenOrWhatever = java.lang.Short.reverseBytes(is.readShort()); is.close(); rafStream.skip(((entry.nameLength) + localExtraLenOrWhatever)); rafStream.length = (rafStream.offset) + (entry.compressedSize); if ((entry.compressionMethod) == (java.util.zip.ZipEntry.DEFLATED)) { int bufSize = java.lang.Math.max(1024, ((int) (java.lang.Math.min(entry.getSize(), 65535L)))); return new java.util.zip.ZipFile.ZipInflaterInputStream(rafStream, new java.util.zip.Inflater(true), bufSize, entry); } else { return rafStream; } } }",30fcdf1b4a2dcdf35dbb71cae323f18c5c11bdfd,getInputStream(java.util.zip.ZipEntry),getInputStream(java.util.zip.ZipEntry),2,12,"public java.io.InputStream getInputStream(java.util.zip.ZipEntry entry) throws java.io.IOException { entry = getEntry(entry.getName()); if (entry == null) { return null; } java.io.RandomAccessFile localRaf = raf; synchronized(localRaf) { java.util.zip.ZipFile.RAFStream rafStream = new java.util.zip.ZipFile.RAFStream(localRaf, ((entry.localHeaderRelOffset) + 6)); java.io.DataInputStream is = new java.io.DataInputStream(rafStream); int gpbf = java.lang.Short.reverseBytes(is.readShort()); if ((gpbf & (~(java.util.zip.ZipFile.GPBF_SUPPORTED_MASK))) != 0) { throw new java.util.zip.ZipException((""Invalid General Purpose Bit Flag: "" + gpbf)); } is.skipBytes(20); int localExtraLenOrWhatever = java.lang.Short.reverseBytes(is.readShort()); is.close(); rafStream.skip(((entry.nameLength) + localExtraLenOrWhatever)); rafStream.length = (rafStream.offset) + (entry.compressedSize); if ((entry.compressionMethod) == (java.util.zip.ZipEntry.DEFLATED)) { int bufSize = java.lang.Math.max(1024, ((int) (java.lang.Math.min(entry.getSize(), 65535L)))); return new java.util.zip.ZipFile.ZipInflaterInputStream(rafStream, new java.util.zip.Inflater(true), bufSize, entry); } else { return rafStream; } } }",3c5256c494bd2436cb2c6223041085b9c1dec19d,getInputStream(java.util.zip.ZipEntry),496070,369,361
63650,luni_src_test_java_libcore_java_net_URLConnectionTest.java,98.0,"public void testConnectTimeouts() throws java.io.IOException { tests.net.StuckServer ss = new tests.net.StuckServer(false); int serverPort = ss.getLocalPort(); java.net.URLConnection urlConnection = new java.net.URL((""http://localhost:"" + serverPort)).openConnection(); int timeout = 1000; urlConnection.setConnectTimeout(timeout); long start = java.lang.System.currentTimeMillis(); try { urlConnection.getInputStream(); fail(); } catch (java.net.SocketTimeoutException expected) { long elapsed = (java.lang.System.currentTimeMillis()) - start; int attempts = java.net.InetAddress.getAllByName(""localhost"").length; assertTrue((((((""timeout="" + timeout) + "", elapsed="") + elapsed) + "", attempts="") + attempts), ((java.lang.Math.abs(((attempts * timeout) - elapsed))) < 500)); } finally { ss.close(); } }",6bdacfd346b6b31d252c9fbaa5a7deda201dca87,"public void testConnectTimeouts() throws java.io.IOException { tests.net.StuckServer ss = new tests.net.StuckServer(true); int serverPort = ss.getLocalPort(); java.lang.String hostName = ss.getLocalSocketAddress().getAddress().getHostName(); java.net.URLConnection urlConnection = new java.net.URL(((((""http://"" + hostName) + "":"") + serverPort) + ""/"")).openConnection(); int timeout = 1000; urlConnection.setConnectTimeout(timeout); long start = java.lang.System.currentTimeMillis(); try { urlConnection.getInputStream(); fail(); } catch (java.net.SocketTimeoutException expected) { long elapsed = (java.lang.System.currentTimeMillis()) - start; int attempts = java.net.InetAddress.getAllByName(""localhost"").length; assertTrue((((((""timeout="" + timeout) + "", elapsed="") + elapsed) + "", attempts="") + attempts), ((java.lang.Math.abs(((attempts * timeout) - elapsed))) < 500)); } finally { ss.close(); } }",8575c80921dc44f35eaa392ba4fe2cecb908615e,testConnectTimeouts(),testConnectTimeouts(),3,98,"public void testConnectTimeouts() throws java.io.IOException { tests.net.StuckServer ss = new tests.net.StuckServer(true); int serverPort = ss.getLocalPort(); java.lang.String hostName = ss.getLocalSocketAddress().getAddress().getHostAddress(); java.net.URLConnection urlConnection = new java.net.URL(((((""http://"" + hostName) + "":"") + serverPort) + ""/"")).openConnection(); int timeout = 1000; urlConnection.setConnectTimeout(timeout); long start = java.lang.System.currentTimeMillis(); try { urlConnection.getInputStream(); fail(); } catch (java.net.SocketTimeoutException expected) { long elapsed = (java.lang.System.currentTimeMillis()) - start; int attempts = java.net.InetAddress.getAllByName(""localhost"").length; assertTrue((((((""timeout="" + timeout) + "", elapsed="") + elapsed) + "", attempts="") + attempts), ((java.lang.Math.abs(((attempts * timeout) - elapsed))) < 500)); } finally { ss.close(); } }",85446dc68d5097ca92de8f85423bd355a10550b6,testConnectTimeouts(),443039,233,233
90452,src_main_java_org_conscrypt_OpenSSLBIOSink.java,,,,"@java.lang.Override public int read() throws java.io.IOException { byte[] singleByte = new byte[1]; int numRead = read(singleByte, 0, 1); if (numRead != 1) { return numRead; } return singleByte[0]; }",930e1f89b08bab7f7d34ca859bb6dae0c05a9c68,,read(),11,7,public static org.conscrypt.OpenSSLBIOSink create() { java.io.ByteArrayOutputStream buffer = new java.io.ByteArrayOutputStream(); return new org.conscrypt.OpenSSLBIOSink(buffer); },46d00ffd8257b310aab8cfc2487494c315292b69,create(),131564,53,49
124160,sched_src_com_android_sched_vfs_MessageDigestFS.java,,,,@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.BaseVDir getRootDir() { return changeVFS(vfs.getRootDir()); },585eca7d68a7ec9912aca32e8114fe26c24aa42a,,getRootDir(),5,11,@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.BaseVDir getRootDir() { return vfs.getRootDir(); },fd8284b32cd0e458701d6bc012870dbed230cabb,getRootDir(),215251,38,36
229824,system_image_uitests_app_src_androidTest_java_com_android_devtools_systemimage_uitest_smoke_ShellUtilTest.java,0.0,"public void testShellUtilIntegrity() throws java.lang.Exception { java.lang.String cmd = ""ls /system/bin""; com.android.devtools.systemimage.uitest.utils.ShellUtil.ShellResult result = com.android.devtools.systemimage.uitest.utils.ShellUtil.invokeCommand(cmd); assertTrue(result.stderr, ((result.stderr.length()) == 0)); java.io.InputStream inputStream = mInstrumentation.getTargetContext().getAssets().open(""util.txt""); java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream, ""UTF-8"")); java.lang.String line; java.lang.StringBuilder util = new java.lang.StringBuilder(); while ((line = reader.readLine()) != null) { util.append(line).append(""\n""); } assertEquals(""Failure: The shell util is incomplete!"", util.toString(), result.stdout); }",b4820ffa57458fd6a2a7ae22b69436e981f4e8b0,"@org.junit.Test public void testShellUtilIntegrity() throws java.lang.Exception { mInstrumentation = testRule.getInstrumentation(); java.lang.String cmd = ""ls /system/bin""; com.android.devtools.systemimage.uitest.utils.ShellUtil.ShellResult result = com.android.devtools.systemimage.uitest.utils.ShellUtil.invokeCommand(cmd); junit.framework.Assert.assertTrue(result.stderr, ((result.stderr.length()) == 0)); java.io.InputStream inputStream = mInstrumentation.getTargetContext().getAssets().open(""util.txt""); java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream, ""UTF-8"")); java.lang.String line; java.lang.StringBuilder util = new java.lang.StringBuilder(); while ((line = reader.readLine()) != null) { util.append(line).append(""\n""); } junit.framework.Assert.assertEquals(""Failure: The shell util is incomplete!"", util.toString(), result.stdout); }",b8c119c9df642c1f516efe66f88d0d56ae2b9cd3,testShellUtilIntegrity(),testShellUtilIntegrity(),5,0,"@org.junit.Test public void testShellUtilIntegrity() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); java.lang.String cmd = ""ls /system/bin""; com.android.devtools.systemimage.uitest.utils.ShellUtil.ShellResult result = com.android.devtools.systemimage.uitest.utils.ShellUtil.invokeCommand(cmd); org.junit.Assert.assertTrue(result.stderr, ((result.stderr.length()) == 0)); java.io.InputStream inputStream = instrumentation.getTargetContext().getAssets().open(""util.txt""); java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream, ""UTF-8"")); java.lang.String line; java.lang.StringBuilder util = new java.lang.StringBuilder(); while ((line = reader.readLine()) != null) { util.append(line).append(""\n""); } org.junit.Assert.assertThat(""Failure: The shell util is incomplete."", result.stderr, org.hamcrest.Matchers.isEmptyOrNullString()); }",7fe6cb9f841c7e62b771d089794763459fe4985e,testShellUtilIntegrity(),154684,231,240
186130,jack-tests_tests_com_android_jack_java8_GwtTest.java,16.0,"@org.junit.Test public void testThisRefInDefenderMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_33).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",e819319978a19dbc387fe491655dcc02515a5960,"@org.junit.Test public void testThisRefInDefenderMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_33).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",9d1c20d05e58bab21e1e591d50dc5c3286fa0caf,testThisRefInDefenderMethod(),testThisRefInDefenderMethod(),7,16,@org.junit.Test public void testThisRefInDefenderMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_33).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },47a36eda9446b17c433eda70e28c8e02aa32481a,testThisRefInDefenderMethod(),466282,89,63
349432,service_java_com_android_server_wifi_WifiNative.java,33.0,"public boolean p2pProvisionDiscovery(android.net.wifi.p2p.WifiP2pConfig config) { if (config == null) return false; if ((com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.provisionDiscovery(config); } else { switch (config.wps.setup) { case android.net.wifi.WpsInfo.PBC : return doBooleanCommand(((""P2P_PROV_DISC "" + (config.deviceAddress)) + "" pbc"")); case android.net.wifi.WpsInfo.DISPLAY : return doBooleanCommand(((""P2P_PROV_DISC "" + (config.deviceAddress)) + "" keypad"")); case android.net.wifi.WpsInfo.KEYPAD : return doBooleanCommand(((""P2P_PROV_DISC "" + (config.deviceAddress)) + "" display"")); default : break; } return false; } }",b562fa5f228a48e604c8abc26d28c0a56594e831,public boolean p2pProvisionDiscovery(android.net.wifi.p2p.WifiP2pConfig config) { if (config == null) return false; return mSupplicantP2pIfaceHal.provisionDiscovery(config); },f63d56300d0c0cd12b5e4d51b005fd5218220718,p2pProvisionDiscovery(android.net.wifi.p2p.WifiP2pConfig),p2pProvisionDiscovery(android.net.wifi.p2p.WifiP2pConfig),17,30,public boolean p2pProvisionDiscovery(android.net.wifi.p2p.WifiP2pConfig config) { return mSupplicantP2pIfaceHal.provisionDiscovery(config); },a628a0446f3334021d6ea06ab803de5a7a0ce75a,p2pProvisionDiscovery(android.net.wifi.p2p.WifiP2pConfig),6768,54,45
245772,test_609-checker-inline-interface_src_Main.java,,,,public void doCall();,6d0f3920f0b99e8fb18750b5e014bedcb94149b7,,doCall(),6,1,public void $noinline$doCall();,e7b51c01695eb61a6e8101c3e2f76f088b966974,$noinline$doCall(),465467,5,10
139390,src_com_google_gct_idea_debugger_CloudDebugProcess.java,,,,@java.lang.Override public void run() { try { com.google.gct.idea.debugger.ListBreakpointsResponse response = myCloudDebuggerClient.debuggees().breakpoints().list(myDebugeeId).setIncludeInactive(java.lang.Boolean.TRUE).execute(); setCurrentBreakpointsFromList(response.getBreakpoints()); } catch (java.io.IOException ex) { } },6b1fd38e5227cf0d64e75e7e528e846caad9111c,,run(),30,30,"@java.lang.Override public void onFailure(@org.jetbrains.annotations.NotNull java.lang.Throwable t) { com.google.gct.idea.debugger.CloudDebugProcess.LOG.warn(""Could not navigate to breakpoint:"", t); }",83c1b3c321534a5d748c90e795b74b7dee203202,onFailure(java.lang.Throwable),250768,89,57
50361,builder_src_main_java_com_android_builder_internal_incremental_DependencyDataStore.java,,,,public java.util.List<com.android.builder.internal.incremental.DependencyData> getData() { return mDataList; },b1f9b51a4bb8345caeb4f9750b05adc915c9d60b,,getData(),3,5,@com.android.annotations.NonNull public java.util.Collection<com.android.builder.internal.incremental.DependencyData> getData() { return mMainFileMap.values(); },60bf3b60b9c8a8e2dab71db7c0c7611e28c23669,getData(),263307,30,41
245662,jack-tests_tests_com_android_jack_assign_test002_jack_Assign002.java,0.0,public static void test() { int i; assertTrue(((i = 2) == 2)); assertTrue((i == 2)); },1922a044aa638a3900e6f9f53e574529aa490645,public static void test() { int i = 0; assertTrue(((i = 2) == 2)); assertTrue((i == 2)); },2191b44bda0095e82fc916a69c51c8c8ceeb6c9e,test(),test(),2,0,public static void test() { int i; assertTrue(((i = 2) == 2)); assertTrue((i == 2)); },1922a044aa638a3900e6f9f53e574529aa490645,test(),64168,24,23
520135,core_java_android_net_metrics_WakeupStats.java,3.0,public void countEvent(android.net.metrics.WakeupEvent ev) { (totalWakeups)++; switch (ev.uid) { case ROOT_UID : (rootWakeups)++; break; case SYSTEM_UID : (systemWakeups)++; break; case android.net.metrics.WakeupStats.NO_UID : (noUidWakeups)++; break; default : if ((ev.uid) >= (FIRST_APPLICATION_UID)) { (applicationWakeups)++; } else { (nonApplicationWakeups)++; } break; } },4c818e4632ee9733222ccff35ab7d321a6ea375b,"public void countEvent(android.net.metrics.WakeupEvent ev) { (totalWakeups)++; switch (ev.uid) { case ROOT_UID : (rootWakeups)++; break; case SYSTEM_UID : (systemWakeups)++; break; case android.net.metrics.WakeupStats.NO_UID : (noUidWakeups)++; break; default : if ((ev.uid) >= (FIRST_APPLICATION_UID)) { (applicationWakeups)++; } else { (nonApplicationWakeups)++; } break; } if ((ev.dstHwAddr.length) == (android.net.metrics.WakeupStats.L2_BROADCAST.length)) { if (java.util.Arrays.equals(ev.dstHwAddr, android.net.metrics.WakeupStats.L2_BROADCAST)) { (l2BroadcastCounts)++; } else if ((ev.dstHwAddr[0]) == 1) { (l2MulticastCounts)++; } else { (l2UnicastCounts)++; } } android.net.metrics.WakeupStats.increment(ethertypes, ev.ethertype); if ((ev.ipProtocol) >= 0) { android.net.metrics.WakeupStats.increment(ipProtocols, ev.ipProtocol); } }",49edc11a6629df570a2fb1cd60178559cc1e5397,countEvent(android.net.metrics.WakeupEvent),countEvent(android.net.metrics.WakeupEvent),5,3,"public void countEvent(android.net.metrics.WakeupEvent ev) { (totalWakeups)++; switch (ev.uid) { case ROOT_UID : (rootWakeups)++; break; case SYSTEM_UID : (systemWakeups)++; break; case android.net.metrics.WakeupStats.NO_UID : (noUidWakeups)++; break; default : if ((ev.uid) >= (FIRST_APPLICATION_UID)) { (applicationWakeups)++; } else { (nonApplicationWakeups)++; } break; } switch (android.net.MacAddress.macAddressType(ev.dstHwAddr)) { case UNICAST : (l2UnicastCount)++; break; case MULTICAST : (l2MulticastCount)++; break; case BROADCAST : (l2BroadcastCount)++; break; default : break; } android.net.metrics.WakeupStats.increment(ethertypes, ev.ethertype); if ((ev.ipNextHeader) >= 0) { android.net.metrics.WakeupStats.increment(ipNextHeaders, ev.ipNextHeader); } }",c53d5f2ca4ea5db6b9069ce5d98d27c554086311,countEvent(android.net.metrics.WakeupEvent),47207,290,259
51804,tests_tests_widget_src_android_widget_cts_ToastTest.java,22.0,"public void run() { mToast.setGravity(Gravity.BOTTOM, 0, 0); mToast.show(); }",01be46b79e7f1af3b77ee8911eaa8a098ae6a93d,"public void run() { mToast.setGravity(Gravity.BOTTOM, 0, 0); mToast.show(); mLayoutListener.register(mToast.getView()); }",63af56948d69e81c4f3313873fb38a1f57b394d1,run(),run(),4,22,"public void run() { mToast.setGravity(Gravity.BOTTOM, 0, 0); mToast.show(); registerLayoutListener(mToast.getView()); }",b07f7e6ea6777f2c52775544f7a060a36183bafc,run(),514262,33,31
251120,luni_src_main_java_libcore_net_MimeUtils.java,1.0,public static boolean hasExtension(java.lang.String extension) { if ((extension == null) || (extension.isEmpty())) { return false; } return libcore.net.MimeUtils.extensionToMimeTypeMap.containsKey(extension); },acc5295fbd237c11d5920a78e8aac45a5ebc8504,public static boolean hasExtension(java.lang.String extension) { if ((extension == null) || (extension.isEmpty())) { return false; } extension = extension.toLowerCase(); return libcore.net.MimeUtils.extensionToMimeTypeMap.containsKey(extension); },4c5a1a0b436fcfe967e1530c1d214cb6e0b8796a,hasExtension(java.lang.String),hasExtension(java.lang.String),8,1,public static boolean hasExtension(java.lang.String extension) { return (libcore.net.MimeUtils.guessMimeTypeFromExtension(extension)) != null; },0f5fa062dfc7b2c536ee8bcd174102f4d1ad89b5,hasExtension(java.lang.String),336137,57,35
554242,tests_tests_media_src_android_media_cts_AudioManagerTest.java,20.0,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getContext(); android.media.cts.Utils.enableAppOps(mContext.getPackageName(), android.media.cts.AudioManagerTest.APPOPS_OP_STR, getInstrumentation()); mAudioManager = ((android.media.AudioManager) (mContext.getSystemService(Context.AUDIO_SERVICE))); android.os.Vibrator vibrator = ((android.os.Vibrator) (mContext.getSystemService(Context.VIBRATOR_SERVICE))); mNm = ((android.app.NotificationManager) (mContext.getSystemService(Context.NOTIFICATION_SERVICE))); mHasVibrator = (vibrator != null) && (vibrator.hasVibrator()); mUseFixedVolume = mContext.getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier(""config_useFixedVolume"", ""bool"", ""android"")); android.content.pm.PackageManager packageManager = mContext.getPackageManager(); mIsTelevision = (packageManager != null) && ((packageManager.hasSystemFeature(PackageManager.FEATURE_LEANBACK)) || (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEVISION))); }",b0abda268e15fdd1470db9352900a125ea5b1156,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getContext(); android.media.cts.Utils.enableAppOps(mContext.getPackageName(), android.media.cts.AudioManagerTest.APPOPS_OP_STR, getInstrumentation()); mAudioManager = ((android.media.AudioManager) (mContext.getSystemService(Context.AUDIO_SERVICE))); android.os.Vibrator vibrator = ((android.os.Vibrator) (mContext.getSystemService(Context.VIBRATOR_SERVICE))); mNm = ((android.app.NotificationManager) (mContext.getSystemService(Context.NOTIFICATION_SERVICE))); mHasVibrator = (vibrator != null) && (vibrator.hasVibrator()); mUseFixedVolume = mContext.getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier(""config_useFixedVolume"", ""bool"", ""android"")); android.content.pm.PackageManager packageManager = mContext.getPackageManager(); mIsTelevision = (packageManager != null) && ((packageManager.hasSystemFeature(PackageManager.FEATURE_LEANBACK)) || (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEVISION))); mIsSingleVolume = android.media.AudioSystem.isSingleVolume(mContext); }",c6e81cd6a3fc7ad5c2600cd6f9b29875e47a196f,setUp(),setUp(),2,20,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getContext(); android.media.cts.Utils.enableAppOps(mContext.getPackageName(), android.media.cts.AudioManagerTest.APPOPS_OP_STR, getInstrumentation()); mAudioManager = ((android.media.AudioManager) (mContext.getSystemService(Context.AUDIO_SERVICE))); android.os.Vibrator vibrator = ((android.os.Vibrator) (mContext.getSystemService(Context.VIBRATOR_SERVICE))); mNm = ((android.app.NotificationManager) (mContext.getSystemService(Context.NOTIFICATION_SERVICE))); mHasVibrator = (vibrator != null) && (vibrator.hasVibrator()); mUseFixedVolume = mContext.getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier(""config_useFixedVolume"", ""bool"", ""android"")); android.content.pm.PackageManager packageManager = mContext.getPackageManager(); mIsTelevision = (packageManager != null) && ((packageManager.hasSystemFeature(PackageManager.FEATURE_LEANBACK)) || (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEVISION))); mIsSingleVolume = mContext.getResources().getBoolean(android.content.res.Resources.getSystem().getIdentifier(""config_single_volume"", ""bool"", ""android"")); mSkipRingerTests = ((mUseFixedVolume) || (mIsTelevision)) || (mIsSingleVolume); }",5cba7783b1ddfc928fb84b8f159f79cd7b4926d3,setUp(),429764,284,329
633606,src_com_android_bluetooth_hearingaid_HearingAidNativeInterface.java,,,,private static native void setVolumeNative(int volume);,4630d2beffd3943b393b09c9da29af6990f6634c,,setVolumeNative(int),34,13,private native void setVolumeNative(int volume);,130d6e3627abc91aea786e85b078ef3854010746,setVolumeNative(int),484208,11,10
44352,builder_src_main_java_com_android_builder_BuildConfig.java,,,,@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) return true; if ((o == null) || ((getClass()) != (o.getClass()))) return false; com.android.builder.BuildConfig that = ((com.android.builder.BuildConfig) (o)); if ((mBuildConfigLines) != null ? !(mBuildConfigLines.equals(that.mBuildConfigLines)) : (that.mBuildConfigLines) != null) return false; return true; },48bae224f9fff189c29b6ae40e3ea9129715c532,,equals(java.lang.Object),7,0,@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) return true; if ((o == null) || ((getClass()) != (o.getClass()))) return false; com.android.builder.BuildConfig that = ((com.android.builder.BuildConfig) (o)); if (!(mBuildConfigLines.equals(that.mBuildConfigLines))) return false; return true; },35d2018d679bb66f8a2520905b24c85a3064028f,equals(java.lang.Object),354880,115,94
119672,jack_src_com_android_jack_library_v0001_OutputJackLibraryImpl.java,13.0,"@java.lang.Override @javax.annotation.Nonnull public void delete(@javax.annotation.Nonnull com.android.jack.library.FileType fileType, @javax.annotation.Nonnull com.android.sched.vfs.VPath typePath) throws com.android.sched.util.file.CannotDeleteFileException { vfs.getRootInputOutputVDir().delete(fileType.buildFileVPath(typePath)); }",87fb713452a58c451a65df35cbe6ebc11ceb7a94,"@java.lang.Override @javax.annotation.Nonnull public void delete(@javax.annotation.Nonnull com.android.jack.library.FileType fileType, @javax.annotation.Nonnull com.android.sched.vfs.VPath typePath) throws com.android.sched.util.file.CannotDeleteFileException { assert !(closed); vfs.getRootInputOutputVDir().delete(fileType.buildFileVPath(typePath)); }",1f177023dfac9e83a98cfaa9adae4f5026e6c51a,"delete(com.android.jack.library.FileType,com.android.sched.vfs.VPath)","delete(com.android.jack.library.FileType,com.android.sched.vfs.VPath)",4,14,"@java.lang.Override @javax.annotation.Nonnull public void delete(@javax.annotation.Nonnull com.android.jack.library.FileType fileType, @javax.annotation.Nonnull com.android.sched.vfs.VPath typePath) throws com.android.sched.util.file.CannotDeleteFileException { assert !(isClosed()); vfs.getRootInputOutputVDir().delete(fileType.buildFileVPath(typePath)); }",4f6cd93da4e6af5c136dd70f619524bba14880ab,"delete(com.android.jack.library.FileType,com.android.sched.vfs.VPath)",176197,95,95
501126,src_com_android_bluetooth_btservice_AdapterProperties.java,33.0,"void onBluetoothDisable() { com.android.bluetooth.btservice.AdapterProperties.debugLog(""onBluetoothDisable()""); mBluetoothDisabling = true; if ((getState()) == (android.bluetooth.BluetoothAdapter.STATE_TURNING_OFF)) { mService.cancelDiscovery(); setScanMode(AbstractionLayer.BT_SCAN_MODE_NONE); } }",3ba6bccbd04f519381088cb46cd78af8a103b28b,"void onBluetoothDisable() { com.android.bluetooth.btservice.AdapterProperties.debugLog(""onBluetoothDisable()""); mBluetoothDisabling = true; if ((getState()) == (android.bluetooth.BluetoothAdapter.STATE_TURNING_OFF)) { mService.cancelDiscovery(); setScanMode(AbstractionLayer.BT_SCAN_MODE_NONE); } setConnectionState(BluetoothAdapter.STATE_DISCONNECTED); }",1428bdb65fe5aef158da3b58921dd12f86cb82a4,onBluetoothDisable(),onBluetoothDisable(),8,33,"void onBluetoothDisable() { com.android.bluetooth.btservice.AdapterProperties.debugLog(""onBluetoothDisable()""); mBluetoothDisabling = true; if ((getState()) == (android.bluetooth.BluetoothAdapter.STATE_TURNING_OFF)) { mService.cancelDiscovery(); setScanMode(AbstractionLayer.BT_SCAN_MODE_NONE); } }",3ba6bccbd04f519381088cb46cd78af8a103b28b,onBluetoothDisable(),30315,89,78
157611,jack-tests_src_com_android_jack_test_toolchain_JillBasedToolchain.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected void processWithJarJar(@javax.annotation.Nonnull java.io.File jarjarRules, @javax.annotation.Nonnull java.io.File inJar, @javax.annotation.Nonnull java.io.File outJar) { java.lang.String[] args = new java.lang.String[]{ ""java"", ""-Dverbose="" + (java.lang.String.valueOf(isVerbose)), ""-jar"", jarjarPrebuilt.getAbsolutePath(), ""process"", jarjarRules.getAbsolutePath(), inJar.getAbsolutePath(), outJar.getAbsolutePath() }; com.android.jack.test.util.ExecuteFile execFile = new com.android.jack.test.util.ExecuteFile(args); execFile.setOut(outRedirectStream); execFile.setErr(errRedirectStream); execFile.setVerbose(isVerbose); try { if ((execFile.run()) != 0) { throw new java.lang.RuntimeException(""JarJar exited with an error""); } } catch (com.android.jack.test.util.ExecFileException e) { throw new java.lang.RuntimeException(""An error occurred while running Jarjar"", e); } }",2c27af30f124482aa58effa12fee03465e8fea9b,,"processWithJarJar(java.io.File,java.io.File,java.io.File)",11,15,"protected void processWithJarJar(@javax.annotation.Nonnull java.io.File jarjarRules, @javax.annotation.Nonnull java.io.File inJar, @javax.annotation.Nonnull java.io.File outJar) { boolean assertEnable = false; assert true == (assertEnable = true); java.lang.String[] args = new java.lang.String[]{ ""java"", assertEnable ? ""-ea"" : ""-da"", ""-Dverbose="" + (java.lang.String.valueOf(isVerbose)), ""-jar"", jarjarPrebuilt.getAbsolutePath(), ""process"", jarjarRules.getAbsolutePath(), inJar.getAbsolutePath(), outJar.getAbsolutePath() }; com.android.jack.test.util.ExecuteFile execFile = new com.android.jack.test.util.ExecuteFile(args); execFile.setOut(outRedirectStream); execFile.setErr(errRedirectStream); execFile.setVerbose(isVerbose); try { if ((execFile.run()) != 0) { throw new java.lang.RuntimeException(""JarJar exited with an error""); } } catch (com.android.jack.test.util.ExecFileException e) { throw new java.lang.RuntimeException(""An error occurred while running Jarjar"", e); } }",f1c99c6c42dfbfc84caf1c6df39295c1e6699f81,"processWithJarJar(java.io.File,java.io.File,java.io.File)",492530,245,273
406272,harnesses_tradefed_src_com_android_tradefed_testtype_VtsMultiDeviceTestResultParser.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void printJsonTables(java.lang.String name, org.json.JSONArray table) throws org.json.JSONException { java.util.ArrayList<java.lang.Integer> columnLength = new java.util.ArrayList<java.lang.Integer>(); for (int i = 0; i < (table.length()); i++) { org.json.JSONArray row = table.getJSONArray(i); for (int j = 0; j < (row.length()); j++) { if ((columnLength.size()) == j) { columnLength.add(1); } if (!(row.isNull(j))) { int len = row.getString(j).length(); if ((columnLength.get(j)) < len) { columnLength.set(j, len); } } } } java.lang.StringBuilder sb = new java.lang.StringBuilder((name + ""\n"")); for (int i = 0; i < (table.length()); i++) { org.json.JSONArray row = table.getJSONArray(i); for (int j = 0; j < (row.length()); j++) { java.lang.String cell = (row.isNull(j)) ? """" : row.getString(j); if (j > 0) { sb.append("" ""); } for (int k = 0; k < ((columnLength.get(j)) - (cell.length())); k++) { sb.append("" ""); } sb.append(cell); } sb.append(""\n""); } com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, sb.toString()); }",b1644cce46455b6cafea45dec61e701e06334260,,"printJsonTables(java.lang.String,org.json.JSONArray)",5,5,"private static void printJsonTable(java.lang.String name, org.json.JSONArray table) throws org.json.JSONException { java.util.ArrayList<java.lang.Integer> columnLength = new java.util.ArrayList<java.lang.Integer>(); for (int rowIndex = 0; rowIndex < (table.length()); rowIndex++) { org.json.JSONArray row = table.getJSONArray(rowIndex); for (int colIndex = 0; colIndex < (row.length()); colIndex++) { if ((columnLength.size()) == colIndex) { columnLength.add(1); } if (!(row.isNull(colIndex))) { int len = row.getString(colIndex).length(); if ((columnLength.get(colIndex)) < len) { columnLength.set(colIndex, len); } } } } java.lang.StringBuilder sb = new java.lang.StringBuilder((name + ""\n"")); for (int rowIndex = 0; rowIndex < (table.length()); rowIndex++) { org.json.JSONArray row = table.getJSONArray(rowIndex); for (int colIndex = 0; colIndex < (row.length()); colIndex++) { java.lang.String cell = (row.isNull(colIndex)) ? """" : row.getString(colIndex); if (colIndex > 0) { sb.append("" ""); } int padLength = (columnLength.get(colIndex)) - (cell.length()); for (int padCount = 0; padCount < padLength; padCount++) { sb.append("" ""); } sb.append(cell); } sb.append(""\n""); } com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, sb.toString()); }",161e32450aba2e346665091ca73fe1f351ce3efc,"printJsonTable(java.lang.String,org.json.JSONArray)",132339,345,361
337409,luni_src_test_java_libcore_java_nio_file_Files2Test.java,60.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void test_write$Path$Iterable$Charset$OpenOption_NPE() throws java.io.IOException { try { java.nio.file.Files.write(null, new java.util.ArrayList<>(), java.nio.charset.Charset.forName(""UTF-16"")); fail(); } catch (java.lang.NullPointerException expected) { } try { java.nio.file.Files.write(filesSetup.getDataFilePath(), null, java.nio.charset.Charset.forName(""UTF-16"")); fail(); } catch (java.lang.NullPointerException expected) { } try { java.nio.file.Files.write(filesSetup.getDataFilePath(), new java.util.ArrayList(), ((java.nio.file.OpenOption[]) (null))); fail(); } catch (java.lang.NullPointerException expected) { } }",bf99c964eba7493bb1a51746e25b3ff0e6ca18eb,,test_write$Path$Iterable$Charset$OpenOption_NPE(),5,15,"@org.junit.Test public void test_write$Path$Iterable$Charset$OpenOption_NPE() throws java.io.IOException { try { java.nio.file.Files.write(null, new java.util.ArrayList<>(), java.nio.charset.StandardCharsets.UTF_16); fail(); } catch (java.lang.NullPointerException expected) { } try { java.nio.file.Files.write(filesSetup.getDataFilePath(), null, java.nio.charset.StandardCharsets.UTF_16); fail(); } catch (java.lang.NullPointerException expected) { } try { java.nio.file.Files.write(filesSetup.getDataFilePath(), new java.util.ArrayList(), ((java.nio.file.OpenOption[]) (null))); fail(); } catch (java.lang.NullPointerException expected) { } }",f4365f83a887195869efcd06d075942fcf10cbd6,test_write$Path$Iterable$Charset$OpenOption_NPE(),336369,182,180
584815,src_java_com_android_internal_telephony_uicc_RuimRecords.java,28.0,"private void onLocked() { if (DBG) log(""only fetch EF_ICCID in locked state""); mLockedRecordsRequested = true; mFh.loadEFTransparent(com.android.internal.telephony.uicc.EF_ICCID, obtainMessage(com.android.internal.telephony.uicc.RuimRecords.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }",2630b9f9918ee985b0d63a41bf09a2697b1d521e,"private void onLocked(int msg) { if (DBG) log(""only fetch EF_ICCID in locked state""); mLockedRecordsReqReason = (msg == (com.android.internal.telephony.uicc.RuimRecords.EVENT_APP_LOCKED)) ? LOCKED_RECORDS_REQ_REASON_PIN_LOCKED : LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED; mFh.loadEFTransparent(com.android.internal.telephony.uicc.EF_ICCID, obtainMessage(com.android.internal.telephony.uicc.RuimRecords.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }",9905d9938bf8b99ca78c9caf856f47280645aee4,onLocked(),onLocked(int),3,30,"private void onLocked(int msg) { if (DBG) log(""only fetch EF_ICCID in locked state""); mLockedRecordsReqReason = (msg == (com.android.internal.telephony.uicc.RuimRecords.EVENT_APP_LOCKED)) ? LOCKED_RECORDS_REQ_REASON_LOCKED : LOCKED_RECORDS_REQ_REASON_NETWORK_LOCKED; mFh.loadEFTransparent(com.android.internal.telephony.uicc.EF_ICCID, obtainMessage(com.android.internal.telephony.uicc.RuimRecords.EVENT_GET_ICCID_DONE)); (mRecordsToLoad)++; }",218052664b462f102273b2ba39b1a548bfaf0bf3,onLocked(int),500703,151,149
66143,sdk-common_src_main_java_com_android_ide_common_resources_ResourceItemResolver.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.android.annotations.NonNull public static java.lang.String getDisplayString(@com.android.annotations.NonNull java.lang.String url, @com.android.annotations.NonNull java.util.List<com.android.ide.common.rendering.api.ResourceValue> lookupChain) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(url); java.lang.String prev = url; for (com.android.ide.common.rendering.api.ResourceValue element : lookupChain) { if (element == null) { continue; } java.lang.String value = element.getValue(); java.lang.String text = value; if ((prev != null) && (text.equals(prev))) { continue; } sb.append("" => ""); if (!((text.startsWith(com.android.SdkConstants.PREFIX_THEME_REF)) || (text.startsWith(com.android.SdkConstants.PREFIX_RESOURCE_REF)))) { int end = java.lang.Math.max(text.lastIndexOf('/'), text.lastIndexOf('\\')); if (end != (-1)) { text = text.substring((end + 1)); } } sb.append(text); prev = value; } return sb.toString(); }",d1d794ecc894ef09d7ce1d1653c73dee53c74c88,,"getDisplayString(java.lang.String,java.util.List)",2,9,"@com.android.annotations.NonNull public static java.lang.String getDisplayString(@com.android.annotations.NonNull java.lang.String url, @com.android.annotations.NonNull java.util.List<com.android.ide.common.rendering.api.ResourceValue> lookupChain) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(url); java.lang.String prev = url; for (com.android.ide.common.rendering.api.ResourceValue element : lookupChain) { if (element == null) { continue; } java.lang.String value = element.getValue(); if (value == null) { continue; } java.lang.String text = value; if (text.equals(prev)) { continue; } sb.append("" => ""); if (!((text.startsWith(com.android.SdkConstants.PREFIX_THEME_REF)) || (text.startsWith(com.android.SdkConstants.PREFIX_RESOURCE_REF)))) { int end = java.lang.Math.max(text.lastIndexOf('/'), text.lastIndexOf('\\')); if (end != (-1)) { text = text.substring((end + 1)); } } sb.append(text); prev = value; } return sb.toString(); }",b2b1236631fc1645062e1c80b72ed8d4d1a05c89,"getDisplayString(java.lang.String,java.util.List)",431603,275,278
19302,layoutlib_api_src_com_android_layoutlib_api_LayoutScene.java,11.0,"public com.android.layoutlib.api.SceneResult moveChild(java.lang.Object parentView, java.lang.Object childView, java.lang.Object beforeSibling, com.android.layoutlib.api.LayoutScene.IAnimationListener listener) { return SceneStatus.NOT_IMPLEMENTED.getResult(); }",0657c45ac22f4bd83a25dfbab2a7cb20a7766660,"public com.android.layoutlib.api.SceneResult moveChild(java.lang.Object parentView, java.lang.Object childView, int idnex, com.android.layoutlib.api.LayoutScene.IAnimationListener listener) { return SceneStatus.NOT_IMPLEMENTED.getResult(); }",e6128e523a12ed88946718364fbe6cc707a09d4d,"moveChild(java.lang.Object,java.lang.Object,java.lang.Object,com.android.layoutlib.api.LayoutScene$IAnimationListener)","moveChild(java.lang.Object,java.lang.Object,int,com.android.layoutlib.api.LayoutScene$IAnimationListener)",4,4,"public com.android.layoutlib.api.SceneResult moveChild(java.lang.Object parentView, java.lang.Object childView, int index, com.android.layoutlib.api.LayoutScene.IAnimationListener listener) { return SceneStatus.NOT_IMPLEMENTED.getResult(); }",d91afa79a4e9246794fa5de23094d9f23c65309d,"moveChild(java.lang.Object,java.lang.Object,int,com.android.layoutlib.api.LayoutScene$IAnimationListener)",18492,65,63
186130,jack-tests_tests_com_android_jack_java8_GwtTest.java,20.0,"@org.junit.Test public void testDefenderMethodByInterfaceInstance() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_31).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",3202b92c3705d99bbce17a35a9c1df2435a83e25,"@org.junit.Test public void testDefenderMethodByInterfaceInstance() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_31).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",2874eaf546a0fb56c9075b55c9a9fefa2ea73ac1,testDefenderMethodByInterfaceInstance(),testDefenderMethodByInterfaceInstance(),7,20,@org.junit.Test public void testDefenderMethodByInterfaceInstance() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_31).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },90ec5e57c9dbc6fc16506c738bc96338f13e6b2d,testDefenderMethodByInterfaceInstance(),466279,89,63
161251,benchmarks_src_benchmarks_regression_CollatorBenchmark.java,,,,"public void timeCollatorPrimary(int reps) { java.text.RuleBasedCollator collator = ((java.text.RuleBasedCollator) (java.text.Collator.getInstance(java.util.Locale.US))); collator.setStrength(java.text.Collator.PRIMARY); for (int i = 0; i < reps; i++) { collator.compare(""abcde"", ""abcdf""); collator.compare(""abcde"", ""abcde""); collator.compare(""abcdf"", ""abcde""); } }",6e23051f19d25733eec396a15f2a67ca7b2a9c15,,timeCollatorPrimary(int),18,2,"public void timeCollatorPrimary(int reps) { benchmarks.regression.CollatorBenchmark.collator.setStrength(java.text.Collator.PRIMARY); for (int i = 0; i < reps; i++) { benchmarks.regression.CollatorBenchmark.collator.compare(""abcde"", ""abcdf""); benchmarks.regression.CollatorBenchmark.collator.compare(""abcde"", ""abcde""); benchmarks.regression.CollatorBenchmark.collator.compare(""abcdf"", ""abcde""); } }",f4be1249c517093e1d9b22ff8543f9b49aa74ffc,timeCollatorPrimary(int),33868,109,113
19512,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gle2_PropertySheetPage.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void handleEvent(org.eclipse.swt.widgets.Event event) { if (((event.detail) & (org.eclipse.swt.SWT.SELECTED)) != 0) { org.eclipse.swt.graphics.GC gc = event.gc; org.eclipse.swt.graphics.Rectangle area = tree.getClientArea(); int columnCount = tree.getColumnCount(); if (((event.index) == (columnCount - 1)) || (columnCount == 0)) { int width = ((area.x) + (area.width)) - (event.x); if (width > 0) { org.eclipse.swt.graphics.Region region = new org.eclipse.swt.graphics.Region(); gc.getClipping(region); region.add(event.x, event.y, width, event.height); gc.setClipping(region); region.dispose(); } } gc.setAdvanced(true); if (gc.getAdvanced()) { gc.setAlpha(127); } org.eclipse.swt.graphics.Rectangle rect = event.getBounds(); org.eclipse.swt.graphics.Color foreground = gc.getForeground(); org.eclipse.swt.graphics.Color background = gc.getBackground(); org.eclipse.swt.widgets.Display display = tree.getDisplay(); gc.setForeground(display.getSystemColor(SWT.COLOR_RED)); gc.setBackground(display.getSystemColor(SWT.COLOR_LIST_BACKGROUND)); gc.fillGradientRectangle(0, rect.y, 500, rect.height, false); gc.setForeground(foreground); gc.setBackground(background); event.detail &= ~(org.eclipse.swt.SWT.SELECTED); } }",4bc3af1e51fb27691d6f7ef8d79d6b458c323a58,,handleEvent(org.eclipse.swt.widgets.Event),4,1,"public void handleEvent(org.eclipse.swt.widgets.Event event) { if (((event.detail) & (org.eclipse.swt.SWT.SELECTED)) != 0) { org.eclipse.swt.graphics.GC gc = event.gc; org.eclipse.swt.graphics.Rectangle area = tree.getClientArea(); int columnCount = tree.getColumnCount(); if (((event.index) == (columnCount - 1)) || (columnCount == 0)) { int width = ((area.x) + (area.width)) - (event.x); if (width > 0) { org.eclipse.swt.graphics.Region region = new org.eclipse.swt.graphics.Region(); gc.getClipping(region); region.add(event.x, event.y, width, event.height); gc.setClipping(region); region.dispose(); } } gc.setAdvanced(true); if (gc.getAdvanced()) { gc.setAlpha(127); } org.eclipse.swt.graphics.Rectangle rect = event.getBounds(); org.eclipse.swt.graphics.Color foreground = gc.getForeground(); org.eclipse.swt.graphics.Color background = gc.getBackground(); org.eclipse.swt.widgets.Display display = tree.getDisplay(); gc.setForeground(display.getSystemColor(SWT.COLOR_LIST_SELECTION)); gc.setBackground(display.getSystemColor(SWT.COLOR_LIST_BACKGROUND)); gc.fillGradientRectangle(0, rect.y, 500, rect.height, false); gc.setForeground(foreground); gc.setBackground(background); event.detail &= ~(org.eclipse.swt.SWT.SELECTED); } }",4d38a5e791a33910b772481cb4c3409aa5063275,handleEvent(org.eclipse.swt.widgets.Event),427716,347,349
307044,luni_src_main_java_libcore_io_IoBridge.java,15.0,"public static void connect(java.io.FileDescriptor fd, java.net.InetAddress inetAddress, int port, int timeoutMs) throws java.net.SocketException, java.net.SocketTimeoutException { try { libcore.io.IoBridge.connectErrno(fd, inetAddress, port, timeoutMs); } catch (android.system.ErrnoException errnoException) { throw new java.net.ConnectException(libcore.io.IoBridge.connectDetail(inetAddress, port, timeoutMs, errnoException), errnoException); } catch (java.net.SocketException ex) { throw ex; } catch (java.net.SocketTimeoutException ex) { throw ex; } catch (java.io.IOException ex) { throw new java.net.SocketException(ex); } }",68623206096bd774ccba3774e5251d7ec46f6453,"public static void connect(java.io.FileDescriptor fd, java.net.InetAddress inetAddress, int port, int timeoutMs) throws java.net.SocketException, java.net.SocketTimeoutException { try { libcore.io.IoBridge.connectErrno(fd, inetAddress, port, timeoutMs); } catch (android.system.ErrnoException errnoException) { throw new java.net.ConnectException(libcore.io.IoBridge.connectDetail(inetAddress, port, libcore.io.IoBridge.getSocketLocalAddress(fd), libcore.io.IoBridge.getSocketLocalPort(fd), timeoutMs, errnoException), errnoException); } catch (java.net.SocketException ex) { throw ex; } catch (java.net.SocketTimeoutException ex) { throw ex; } catch (java.io.IOException ex) { throw new java.net.SocketException(ex); } }",a1eb25d1ee29e72996712b37abb70763fd5aa1f5,"connect(java.io.FileDescriptor,java.net.InetAddress,int,int)","connect(java.io.FileDescriptor,java.net.InetAddress,int,int)",3,14,"public static void connect(java.io.FileDescriptor fd, java.net.InetAddress inetAddress, int port, int timeoutMs) throws java.net.SocketException, java.net.SocketTimeoutException { try { libcore.io.IoBridge.connectErrno(fd, inetAddress, port, timeoutMs); } catch (android.system.ErrnoException errnoException) { throw new java.net.ConnectException(libcore.io.IoBridge.connectDetail(fd, inetAddress, port, timeoutMs, errnoException), errnoException); } catch (java.net.SocketException ex) { throw ex; } catch (java.net.SocketTimeoutException ex) { throw ex; } catch (java.io.IOException ex) { throw new java.net.SocketException(ex); } }",c06f3a8f824f13646e073b39f675347a7297d234,"connect(java.io.FileDescriptor,java.net.InetAddress,int,int)",197535,200,173
426200,tests_tests_text_src_android_text_method_cts_TouchTest.java,0.0,"private int getTextWidth(java.lang.String str, android.text.TextPaint paint) { float totalWidth = 0.0F; float[] widths = new float[str.length()]; paint.getTextWidths(str, widths); for (float f : widths) { totalWidth += f; } return ((int) (totalWidth)); }",8517c3aaf19de80a55ec5a93c33db306150f587b,"private int getTextWidth(java.lang.CharSequence str, android.text.TextPaint paint) { float totalWidth = 0.0F; float[] widths = new float[str.length()]; paint.getTextWidths(str, 0, str.length(), widths); for (float f : widths) { totalWidth += f; } return ((int) (totalWidth)); }",67d72a7972122c0fc57158dda519f96c474520ba,"getTextWidth(java.lang.String,android.text.TextPaint)","getTextWidth(java.lang.CharSequence,android.text.TextPaint)",3,0,"private int getTextWidth(java.lang.String str, android.text.TextPaint paint) { float totalWidth = 0.0F; float[] widths = new float[str.length()]; paint.getTextWidths(str, widths); for (float f : widths) { totalWidth += f; } return ((int) (totalWidth)); }",8517c3aaf19de80a55ec5a93c33db306150f587b,"getTextWidth(java.lang.String,android.text.TextPaint)",224105,83,78
367559,test_913-heaps_src_Main.java,28.0,"private static void doTestPrimitiveFieldsClasses() { Main.setTag(Main.IntObject.class, 10000); java.lang.System.out.println(Main.followReferencesPrimitiveFields(Main.IntObject.class)); java.lang.System.out.println(Main.getTag(Main.IntObject.class)); Main.setTag(Main.IntObject.class, 0); Main.setTag(Main.FloatObject.class, 10000); java.lang.System.out.println(Main.followReferencesPrimitiveFields(Main.FloatObject.class)); java.lang.System.out.println(Main.getTag(Main.FloatObject.class)); Main.setTag(Main.FloatObject.class, 0); Main.setTag(Main.Inf1.class, 10000); java.lang.System.out.println(Main.followReferencesPrimitiveFields(Main.Inf1.class)); java.lang.System.out.println(Main.getTag(Main.Inf1.class)); Main.setTag(Main.Inf1.class, 0); Main.setTag(Main.Inf2.class, 10000); java.lang.System.out.println(Main.followReferencesPrimitiveFields(Main.Inf2.class)); java.lang.System.out.println(Main.getTag(Main.Inf2.class)); Main.setTag(Main.Inf2.class, 0); }",01b20aef116f6b316bf2ec660299faed162be56b,"private static void doTestPrimitiveFieldsClasses() { art.Main.setTag(art.Test913.IntObject.class, 10000); java.lang.System.out.println(art.Test913.followReferencesPrimitiveFields(art.Test913.IntObject.class)); java.lang.System.out.println(art.Main.getTag(art.Test913.IntObject.class)); art.Main.setTag(art.Test913.IntObject.class, 0); art.Main.setTag(art.Test913.FloatObject.class, 10000); java.lang.System.out.println(art.Test913.followReferencesPrimitiveFields(art.Test913.FloatObject.class)); java.lang.System.out.println(art.Main.getTag(art.Test913.FloatObject.class)); art.Main.setTag(art.Test913.FloatObject.class, 0); art.Main.setTag(art.Test913.Inf1.class, 10000); java.lang.System.out.println(art.Test913.followReferencesPrimitiveFields(art.Test913.Inf1.class)); java.lang.System.out.println(art.Main.getTag(art.Test913.Inf1.class)); art.Main.setTag(art.Test913.Inf1.class, 0); art.Main.setTag(art.Test913.Inf2.class, 10000); java.lang.System.out.println(art.Test913.followReferencesPrimitiveFields(art.Test913.Inf2.class)); java.lang.System.out.println(art.Main.getTag(art.Test913.Inf2.class)); art.Main.setTag(art.Test913.Inf2.class, 0); }",f50c886750e19586f76dc056116b198b2ad1c6ab,doTestPrimitiveFieldsClasses(),doTestPrimitiveFieldsClasses(),2,29,"private static void doTestPrimitiveFieldsClasses() { art.Test913.setTag(art.Test913.IntObject.class, 10000); java.lang.System.out.println(art.Test913.followReferencesPrimitiveFields(art.Test913.IntObject.class)); java.lang.System.out.println(art.Test913.getTag(art.Test913.IntObject.class)); art.Test913.setTag(art.Test913.IntObject.class, 0); art.Test913.setTag(art.Test913.FloatObject.class, 10000); java.lang.System.out.println(art.Test913.followReferencesPrimitiveFields(art.Test913.FloatObject.class)); java.lang.System.out.println(art.Test913.getTag(art.Test913.FloatObject.class)); art.Test913.setTag(art.Test913.FloatObject.class, 0); art.Test913.setTag(art.Test913.Inf1.class, 10000); java.lang.System.out.println(art.Test913.followReferencesPrimitiveFields(art.Test913.Inf1.class)); java.lang.System.out.println(art.Test913.getTag(art.Test913.Inf1.class)); art.Test913.setTag(art.Test913.Inf1.class, 0); art.Test913.setTag(art.Test913.Inf2.class, 10000); java.lang.System.out.println(art.Test913.followReferencesPrimitiveFields(art.Test913.Inf2.class)); java.lang.System.out.println(art.Test913.getTag(art.Test913.Inf2.class)); art.Test913.setTag(art.Test913.Inf2.class, 0); }",9dc8939d78e7413729fec5dab1b6f1a82fff0334,doTestPrimitiveFieldsClasses(),298595,367,379
50953,sdklib_src_main_java_com_android_sdklib_internal_repository_packages_FullRevision.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public int compareTo(com.android.sdklib.internal.repository.packages.FullRevision rhs, boolean ignorePreview) { int delta = (mMajor) - (rhs.mMajor); if (delta != 0) { return delta; } delta = (mMinor) - (rhs.mMinor); if (delta != 0) { return delta; } delta = (mMicro) - (rhs.mMicro); if (delta != 0) { return delta; } if (!ignorePreview) { int p1 = ((mPreview) == (com.android.sdklib.internal.repository.packages.FullRevision.NOT_A_PREVIEW)) ? java.lang.Integer.MAX_VALUE : mPreview; int p2 = ((rhs.mPreview) == (com.android.sdklib.internal.repository.packages.FullRevision.NOT_A_PREVIEW)) ? java.lang.Integer.MAX_VALUE : rhs.mPreview; delta = p1 - p2; } return delta; }",00486bc900c88d40e1402c03e379da403fdad154,,"compareTo(com.android.sdklib.internal.repository.packages.FullRevision,boolean)",5,12,"public int compareTo(com.android.sdklib.internal.repository.packages.FullRevision rhs, com.android.sdklib.internal.repository.packages.FullRevision.PreviewComparison comparePreview) { int delta = (mMajor) - (rhs.mMajor); if (delta != 0) { return delta; } delta = (mMinor) - (rhs.mMinor); if (delta != 0) { return delta; } delta = (mMicro) - (rhs.mMicro); if (delta != 0) { return delta; } int p1; int p2; switch (comparePreview) { case IGNORE : break; case COMPARE_NUMBER : p1 = ((mPreview) == (com.android.sdklib.internal.repository.packages.FullRevision.NOT_A_PREVIEW)) ? java.lang.Integer.MAX_VALUE : mPreview; p2 = ((rhs.mPreview) == (com.android.sdklib.internal.repository.packages.FullRevision.NOT_A_PREVIEW)) ? java.lang.Integer.MAX_VALUE : rhs.mPreview; delta = p1 - p2; break; case COMPARE_TYPE : p1 = ((mPreview) == (com.android.sdklib.internal.repository.packages.FullRevision.NOT_A_PREVIEW)) ? 1 : 0; p2 = ((rhs.mPreview) == (com.android.sdklib.internal.repository.packages.FullRevision.NOT_A_PREVIEW)) ? 1 : 0; delta = p1 - p2; break; } return delta; }",af04ca15e57cc1e79decd047a0dc6081a750e633,"compareTo(com.android.sdklib.internal.repository.packages.FullRevision,com.android.sdklib.internal.repository.packages.FullRevision$PreviewComparison)",222209,216,347
439218,tools_ahat_test_DominatorsTest.java,,,,@java.lang.Override public void setDominator(com.android.ahat.heapdump.DominatorsComputation.Node dominator) { this.dominator = ((com.android.ahat.DominatorsTest.Node) (dominator)); },a54925f545057fd3e8c6da0b337ff21212f15e74,,setDominator(com.android.ahat.heapdump.DominatorsComputation$Node),2,11,@java.lang.Override public void setDominator(com.android.ahat.dominators.DominatorsComputation.Node dominator) { this.dominator = ((com.android.ahat.DominatorsTest.Node) (dominator)); },f571bc0873a64dd06876caa3482da8f1b3a9a6e5,setDominator(com.android.ahat.dominators.DominatorsComputation$Node),327957,58,59
555560,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,25.0,"public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth); }",444fc2912f12b410011c06930fe0d11e6b347da8,"public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false); }",631957a163e73ef3f8637ffe85161628f31d1933,testAesCbcHmacMd5Udp4(),testAesCbcHmacMd5Udp4(),9,28,"public void testAesCbcHmacMd5Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1); }",dd0e1ab54938b031d197068705ea53c8eefd9bb0,testAesCbcHmacMd5Udp4(),439653,151,153
116880,build-system_builder_src_main_java_com_android_builder_testing_TestData.java,0.0,@com.android.annotations.NonNull java.lang.Boolean getFunctionalTest();,f9e8017e011497693d419f3001e6e9ebdb992833,boolean getFunctionalTest();,4911f9157584b71930309420c47f84b5ee85a8b8,getFunctionalTest(),getFunctionalTest(),4,0,@com.android.annotations.NonNull java.lang.Boolean getFunctionalTest();,f9e8017e011497693d419f3001e6e9ebdb992833,getFunctionalTest(),103620,5,17
113636,jack_src_com_android_jack_library_InputJackLibrary.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean hasFileType(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) { return fileTypes.contains(fileType); },a2dc67750cceb2e2c6ac80e63788586065a913cf,,hasFileType(com.android.jack.library.FileType),5,4,@java.lang.Override public boolean containsFileType(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) { return fileTypes.contains(fileType); },d40402959c6b7578591488ef569afc7738b16f56,containsFileType(com.android.jack.library.FileType),38417,39,39
439359,tools_dexfuzz_src_dexfuzz_program_mutators_NewArrayLengthChanger.java,3.0,"@java.lang.Override protected void applyMutation(dexfuzz.program.Mutation uncastMutation) { dexfuzz.program.mutators.NewArrayLengthChanger.AssociatedMutation mutation = ((dexfuzz.program.mutators.NewArrayLengthChanger.AssociatedMutation) (uncastMutation)); dexfuzz.program.MutatableCode mutatableCode = mutation.mutatableCode; dexfuzz.program.MInsn newArrayInsn = newArrayLengthInsns.get(mutation.newArrayToChangeIdx); int newArrayInsnIdx = mutatableCode.getInstructionIndex(newArrayInsn); dexfuzz.program.MInsn newInsn = new dexfuzz.program.MInsn(); newInsn.insn = new dexfuzz.rawdex.Instruction(); newInsn.insn.info = dexfuzz.rawdex.Instruction.getOpcodeInfo(Opcode.CONST_16); newInsn.insn.vregA = ((int) (newArrayInsn.insn.vregB)); newInsn.insn.vregB = rng.nextInt(100); mutatableCode.insertInstructionAt(newInsn, newArrayInsnIdx); dexfuzz.Log.info((""Changed the length of the array to "" + (newInsn.insn.vregB))); stats.incrementStat(""Changed length of new array""); }",e0448976c6389886bd115601f2192aa204f1b882,"@java.lang.Override protected void applyMutation(dexfuzz.program.Mutation uncastMutation) { dexfuzz.program.mutators.NewArrayLengthChanger.AssociatedMutation mutation = ((dexfuzz.program.mutators.NewArrayLengthChanger.AssociatedMutation) (uncastMutation)); dexfuzz.program.MutatableCode mutatableCode = mutation.mutatableCode; dexfuzz.program.MInsn newArrayInsn = newArrayLengthInsns.get(mutation.newArrayToChangeIdx); int newArrayInsnIdx = mutatableCode.getInstructionIndex(newArrayInsn); dexfuzz.program.MInsn newInsn = new dexfuzz.program.MInsn(); newInsn.insn = new dexfuzz.rawdex.Instruction(); newInsn.insn.info = dexfuzz.rawdex.Instruction.getOpcodeInfo(Opcode.CONST_16); newArrayInsn.insn.vregB = mutatableCode.getTemporaryVReg(0); newInsn.insn.vregA = ((int) (newArrayInsn.insn.vregB)); newInsn.insn.vregB = rng.nextInt(100); mutatableCode.insertInstructionAt(newInsn, newArrayInsnIdx); dexfuzz.Log.info((""Changed the length of the array to "" + (newInsn.insn.vregB))); stats.incrementStat(""Changed length of new array""); }",e1b9732d9b604ce3a74f78f2e3a579fb998d178d,applyMutation(dexfuzz.program.Mutation),applyMutation(dexfuzz.program.Mutation),19,4,"@java.lang.Override protected void applyMutation(dexfuzz.program.Mutation uncastMutation) { dexfuzz.program.mutators.NewArrayLengthChanger.AssociatedMutation mutation = ((dexfuzz.program.mutators.NewArrayLengthChanger.AssociatedMutation) (uncastMutation)); dexfuzz.program.MutatableCode mutatableCode = mutation.mutatableCode; dexfuzz.program.MInsn newArrayInsn = newArrayLengthInsns.get(mutation.newArrayToChangeIdx); int newArrayInsnIdx = mutatableCode.getInstructionIndex(newArrayInsn); if (newArrayInsnIdx < 0) { newArrayInsnIdx = scanNewArray(mutatableCode); if (newArrayInsnIdx == (-1)) { return; } } dexfuzz.program.MInsn newInsn = new dexfuzz.program.MInsn(); newInsn.insn = new dexfuzz.rawdex.Instruction(); newInsn.insn.info = dexfuzz.rawdex.Instruction.getOpcodeInfo(Opcode.CONST_16); mutatableCode.allocateTemporaryVRegs(1); newArrayInsn.insn.vregB = mutatableCode.getTemporaryVReg(0); newInsn.insn.vregA = ((int) (newArrayInsn.insn.vregB)); newInsn.insn.vregB = rng.nextInt(100); mutatableCode.insertInstructionAt(newInsn, newArrayInsnIdx); dexfuzz.Log.info((""Changed the length of the array to "" + (newInsn.insn.vregB))); stats.incrementStat(""Changed length of new array""); mutatableCode.finishedUsingTemporaryVRegs(); }",657a16f18974d7d3ffd2e2c89e58f6dba0f8e572,applyMutation(dexfuzz.program.Mutation),206085,324,383
438759,services_core_java_com_android_server_pm_PackageManagerService.java,252.0,"private int performDexOptInternal(java.lang.String packageName, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete) { android.content.pm.PackageParser.Package p; synchronized(mPackages) { p = mPackages.get(packageName); if (p == null) { return PackageDexOptimizer.DEX_OPT_FAILED; } mPackageUsage.maybeWriteAsync(mPackages); mCompilerStats.maybeWriteAsync(); } long callingId = android.os.Binder.clearCallingIdentity(); try { synchronized(mInstallLock) { return performDexOptInternalWithDependenciesLI(p, checkProfiles, targetCompilerFilter, force, bootComplete); } } finally { android.os.Binder.restoreCallingIdentity(callingId); } }",868ac1a63066c7071f25e1e1b538349bfe180aea,"private int performDexOptInternal(java.lang.String packageName, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete, boolean downgrade) { android.content.pm.PackageParser.Package p; synchronized(mPackages) { p = mPackages.get(packageName); if (p == null) { return PackageDexOptimizer.DEX_OPT_FAILED; } mPackageUsage.maybeWriteAsync(mPackages); mCompilerStats.maybeWriteAsync(); } long callingId = android.os.Binder.clearCallingIdentity(); try { synchronized(mInstallLock) { return performDexOptInternalWithDependenciesLI(p, checkProfiles, targetCompilerFilter, force, bootComplete, downgrade); } } finally { android.os.Binder.restoreCallingIdentity(callingId); } }",065535e9db08d843ac54e0a5608f476531b578ba,"performDexOptInternal(java.lang.String,boolean,java.lang.String,boolean,boolean)","performDexOptInternal(java.lang.String,boolean,java.lang.String,boolean,boolean,boolean)",3,276,"private int performDexOptInternal(java.lang.String packageName, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete) { android.content.pm.PackageParser.Package p; synchronized(mPackages) { p = mPackages.get(packageName); if (p == null) { return PackageDexOptimizer.DEX_OPT_FAILED; } mPackageUsage.maybeWriteAsync(mPackages); mCompilerStats.maybeWriteAsync(); } long callingId = android.os.Binder.clearCallingIdentity(); try { synchronized(mInstallLock) { return performDexOptInternalWithDependenciesLI(p, checkProfiles, targetCompilerFilter, force, bootComplete); } } finally { android.os.Binder.restoreCallingIdentity(callingId); } }",868ac1a63066c7071f25e1e1b538349bfe180aea,"performDexOptInternal(java.lang.String,boolean,java.lang.String,boolean,boolean)",470066,172,167
15341,sdkmanager_libs_sdklib_src_com_android_sdklib_build_ApkBuilder.java,,,,void clear() { mNativeLibs.clear(); mNativeLibInteference = false; },6d01e5f410cc6bbbad6cd5e0132cdc17d3642fd9,,clear(),15,4,void reset(java.io.File inputFile) { mInputFile = inputFile; mNativeLibs.clear(); mNativeLibsConflict = false; },eb5abee744af2c4358e76b28718410e60ae525a8,reset(java.io.File),230115,21,33
81416,tests_tests_renderscript_src_android_renderscript_cts_TestLength.java,,,,"private void checkLengthFloat3() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testLengthFloat3(inV, out); verifyResultsLengthFloat3(inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLengthFloat3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLengthFloat3(inV, out); verifyResultsLengthFloat3(inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLengthFloat3: "" + (e.toString()))); } }",ec5e8f83515db678581b0e8df91cab325b4a90fe,,checkLengthFloat3(),9,3,"private void checkLengthFloat3Float() { android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, 3474712323045081773L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.forEach_testLengthFloat3Float(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLengthFloat3Float: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLengthFloat3Float(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLengthFloat3Float: "" + (e.toString()))); } }",276826f3e05cb2415e33087eb4c5f605ff9f3506,checkLengthFloat3Float(),143416,321,274
43139,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_formatting_XmlPrettyPrinter.java,11.0,"private boolean hasBlankLineAbove() { if ((mOut.length()) < (2 * (mLineSeparator.length()))) { return false; } return (com.android.ide.eclipse.adt.AdtUtils.endsWith(mOut, mLineSeparator)) && (com.android.ide.eclipse.adt.AdtUtils.endsWith(mOut, ((mOut.length()) - (mLineSeparator.length())), mLineSeparator)); }",5a251631d78c920435593ba683f1d8f04e0254dd,"private boolean hasBlankLineAbove() { if ((mOut.length()) < (2 * (mLineSeparator.length()))) { return false; } return (com.android.SdkUtils.endsWith(mOut, mLineSeparator)) && (com.android.SdkUtils.endsWith(mOut, ((mOut.length()) - (mLineSeparator.length())), mLineSeparator)); }",02169faf4a15f8e6b69b07ddc54e6213845b81b2,hasBlankLineAbove(),hasBlankLineAbove(),3,11,"private boolean hasBlankLineAbove() { if ((mOut.length()) < (2 * (mLineSeparator.length()))) { return false; } return (com.android.utils.SdkUtils.endsWith(mOut, mLineSeparator)) && (com.android.utils.SdkUtils.endsWith(mOut, ((mOut.length()) - (mLineSeparator.length())), mLineSeparator)); }",8ace556a07e287b0057b585cc499dff7c1f7ffde,hasBlankLineAbove(),523297,85,89
186130,jack-tests_tests_com_android_jack_java8_LambdaTest.java,23.0,"@org.junit.Test public void testLamba025() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA025).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",2a195538ce5dfa92f72ce629b184aed9cc809d00,"@org.junit.Test public void testLamba025() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA025).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",54a7d59753486e0f55cbada5c9aea430d81edd8e,testLamba025(),testLamba025(),7,23,@org.junit.Test public void testLamba025() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA025).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },9176b334b9973e42b0bc2b53f1d6f371090d0006,testLamba025(),466358,83,57
316348,src_com_android_networkrecommendation_DefaultNetworkRecommendationService.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.lang.String configToString(android.net.wifi.WifiConfiguration config) { if (config == null) { return null; } java.lang.StringBuilder sb = new java.lang.StringBuilder().append(""ID="").append(config.networkId).append("",SSID="").append(config.SSID).append("",useExternalScores="").append(config.useExternalScores); return sb.toString(); }",151dda76d0f9639e110147804fa109bdcc371deb,,configToString(android.net.wifi.WifiConfiguration),4,5,"private static java.lang.String configToString(android.net.wifi.WifiConfiguration config) { if (config == null) { return null; } java.lang.StringBuilder sb = new java.lang.StringBuilder().append(""ID="").append(config.networkId).append("",SSID="").append(config.SSID).append("",useExternalScores="").append(config.useExternalScores).append("",meteredHint="").append(config.meteredHint).append("",meteredOverride="").append(config.meteredOverride); return sb.toString(); }",1af4f002a7509516251d790d9ffcd80617e58e43,configToString(android.net.wifi.WifiConfiguration),406666,92,124
272620,wifi_java_android_net_wifi_p2p_WifiP2pManager.java,50.0,"public void requestPeers(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.PeerListListener listener) { android.net.wifi.p2p.WifiP2pManager.checkChannel(c); c.mAsyncChannel.sendMessage(android.net.wifi.p2p.WifiP2pManager.REQUEST_PEERS, 0, c.putListener(listener)); }",65fb7693d92d7637e7c7883e2bcc0c633fd4d6e9,"public void requestPeers(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.PeerListListener listener) { android.net.wifi.p2p.WifiP2pDeviceList peerList; android.net.wifi.p2p.WifiP2pManager.checkChannel(c); try { peerList = mService.getPeers(c.mContext.getOpPackageName()); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } c.mHandler.sendMessage(c.mHandler.obtainMessage(android.net.wifi.p2p.WifiP2pManager.RESPONSE_PEERS, 0, c.putListener(listener), peerList)); }",8b42df28b30fc4a90dd4adc2665f80f1ecf0873b,"requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PeerListListener)","requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PeerListListener)",12,50,"public void requestPeers(android.net.wifi.p2p.WifiP2pManager.Channel c, android.net.wifi.p2p.WifiP2pManager.PeerListListener listener) { android.net.wifi.p2p.WifiP2pManager.checkChannel(c); android.os.Bundle callingPackage = new android.os.Bundle(); callingPackage.putString(android.net.wifi.p2p.WifiP2pManager.CALLING_PACKAGE, c.mContext.getOpPackageName()); c.mAsyncChannel.sendMessage(android.net.wifi.p2p.WifiP2pManager.REQUEST_PEERS, 0, c.putListener(listener), callingPackage); }",86e42d293b99fbc321a9e53d7571d8a6d294472b,"requestPeers(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$PeerListListener)",54353,174,157
116501,src_main_java_org_conscrypt_OpenSSLECPrivateKey.java,9.0,"private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException { stream.defaultReadObject(); byte[] encoded = ((byte[]) (stream.readObject())); key = new org.conscrypt.OpenSSLKey(org.conscrypt.NativeCrypto.d2i_PKCS8_PRIV_KEY_INFO(encoded)); final long origGroup = org.conscrypt.NativeCrypto.EC_KEY_get0_group(key.getNativeRef()); group = new org.conscrypt.OpenSSLECGroupContext(org.conscrypt.NativeCrypto.EC_GROUP_dup(origGroup)); }",d12e31eb54e0e42e56601a97232f3f61066a453e,"private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException { stream.defaultReadObject(); byte[] encoded = ((byte[]) (stream.readObject())); key = new org.conscrypt.OpenSSLKey(org.conscrypt.NativeCrypto.d2i_PKCS8_PRIV_KEY_INFO(encoded)); group = new org.conscrypt.OpenSSLECGroupContext(org.conscrypt.NativeCrypto.EC_KEY_get1_group(key.getNativeRef())); }",86e3a6384517234fdb10cab28ae314319bc2388d,readObject(java.io.ObjectInputStream),readObject(java.io.ObjectInputStream),3,9,"private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException { stream.defaultReadObject(); byte[] encoded = ((byte[]) (stream.readObject())); key = new org.conscrypt.OpenSSLKey(org.conscrypt.NativeCrypto.d2i_PKCS8_PRIV_KEY_INFO(encoded)); group = new org.conscrypt.OpenSSLECGroupContext(new org.conscrypt.NativeRef.EC_GROUP(org.conscrypt.NativeCrypto.EC_KEY_get1_group(key.getNativeRef()))); }",a9d145c37dab44d3348f313f3ba822170857ff5e,readObject(java.io.ObjectInputStream),57588,120,134
324140,services_core_java_com_android_server_NetworkManagementService.java,75.0,private void notifyInterfaceAdded(java.lang.String iface) { final int length = mObservers.beginBroadcast(); try { for (int i = 0; i < length; i++) { try { mObservers.getBroadcastItem(i).interfaceAdded(iface); } catch (android.os.RemoteException | java.lang.RuntimeException e) { } } } finally { mObservers.finishBroadcast(); } },f76bb9ff519460b36a91c44d95d7e18dc0b7b30f,private void notifyInterfaceAdded(java.lang.String iface) { invokeForAllObservers(new com.android.server.NetworkManagementService.CallbackInvocation() { @java.lang.Override public void call(android.net.INetworkManagementEventObserver o) throws android.os.RemoteException { o.interfaceAdded(iface); } }); },172497ddec95e5257c8f4d13db05532f05f8ddec,notifyInterfaceAdded(java.lang.String),notifyInterfaceAdded(java.lang.String),3,66,private void notifyInterfaceAdded(java.lang.String iface) { invokeForAllObservers(( o) -> o.interfaceAdded(iface)); },72acfb9ca2bd9b41c71b941ec2bbd877f0a445e6,notifyInterfaceAdded(java.lang.String),137151,73,32
402813,tools_ahat_src_heapdump_AhatHeap.java,1.0,void addToSize(long increment) { mSize += increment; },0473b2dbcb75d34fa64e7c02335fbed81871e39f,void addToSize(com.android.ahat.heapdump.Size size) { mSize.add(size); },a52b34667173f6e708f4dfec6631d40d8235795d,addToSize(long),addToSize(com.android.ahat.heapdump.Size),3,0,void addToSize(com.android.ahat.heapdump.Size size) { mSize = mSize.plus(size); },fdaf275df2dbcb92ee526265a776423a2b24e52e,addToSize(com.android.ahat.heapdump.Size),281097,26,29
100394,test_082-inline-execute_src_Main.java,38.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static void test_Memory_peekShortNative() { byte[] b = new byte[2]; b[0] = 52; b[1] = 18; long address = dalvik.system.VMRuntime.getRuntime().addressOf(b); junit.framework.Assert.assertEquals(libcore.io.Memory.peekShortNative(address), 4660); }",c92c7c263c29c23399c6755340d1e19addec72fd,,test_Memory_peekShortNative(),2,20,"public static void test_Memory_peekShort() throws java.lang.Exception { byte[] b = new byte[3]; b[0] = 19; b[1] = 18; b[2] = 17; long address = ((long) (Main.address_of.invoke(Main.runtime, b))); junit.framework.Assert.assertEquals(((short) (Main.peek_short.invoke(null, address, false))), 4627); junit.framework.Assert.assertEquals(((short) (Main.peek_short.invoke(null, (address + 1), false))), 4370); }",6c26a073c96e349a0ee72b48871994094b480626,test_Memory_peekShort(),348651,73,124
152334,apps_CtsVerifier_src_com_android_cts_verifier_tv_SearchUtil.java,,,,"public static java.util.List<android.app.SearchableInfo> getSearchableInfos(android.content.Context context) { android.content.pm.PackageManager pm = context.getPackageManager(); java.util.Set<java.lang.String> possibleTvAppPackages = new java.util.HashSet<>(); java.util.List<android.content.pm.ResolveInfo> infos = pm.queryIntentActivities(new android.content.Intent(android.content.Intent.ACTION_VIEW, TvContract.Channels.CONTENT_URI), 0); for (android.content.pm.ResolveInfo info : infos) { possibleTvAppPackages.add(info.activityInfo.packageName); } infos = pm.queryIntentActivities(new android.content.Intent(android.content.Intent.ACTION_VIEW, TvContract.Programs.CONTENT_URI), 0); for (android.content.pm.ResolveInfo info : infos) { possibleTvAppPackages.add(info.activityInfo.packageName); } android.app.SearchManager sm = ((android.app.SearchManager) (context.getSystemService(Context.SEARCH_SERVICE))); java.util.List<android.app.SearchableInfo> searchableInfos = sm.getSearchablesInGlobalSearch(); java.util.List<android.app.SearchableInfo> tvSearchableInfos = new java.util.ArrayList<>(); for (android.app.SearchableInfo info : searchableInfos) { if (possibleTvAppPackages.contains(info.getSearchActivity().getPackageName())) { tvSearchableInfos.add(info); } } return tvSearchableInfos; }",8f2942934d5905f3983b9bbc6270e896a312c553,,getSearchableInfos(android.content.Context),4,1,"public static java.util.List<android.app.SearchableInfo> getSearchableInfos(android.content.Context context) { android.content.pm.PackageManager pm = context.getPackageManager(); java.util.Set<java.lang.String> tvPackages = new java.util.HashSet<>(); java.util.List<android.content.pm.ResolveInfo> infos = pm.queryIntentActivities(new android.content.Intent(android.content.Intent.ACTION_VIEW, TvContract.Channels.CONTENT_URI), 0); for (android.content.pm.ResolveInfo info : infos) { tvPackages.add(info.activityInfo.packageName); } infos = pm.queryIntentActivities(new android.content.Intent(android.content.Intent.ACTION_VIEW, TvContract.Programs.CONTENT_URI), 0); for (android.content.pm.ResolveInfo info : infos) { tvPackages.add(info.activityInfo.packageName); } android.app.SearchManager sm = ((android.app.SearchManager) (context.getSystemService(Context.SEARCH_SERVICE))); java.util.List<android.app.SearchableInfo> globalSearchableInfos = sm.getSearchablesInGlobalSearch(); java.util.List<android.app.SearchableInfo> tvSearchableInfos = new java.util.ArrayList<>(); for (android.app.SearchableInfo info : globalSearchableInfos) { if (tvPackages.contains(info.getSearchActivity().getPackageName())) { tvSearchableInfos.add(info); } } return tvSearchableInfos; }",794c2ef6abc987cd29ada8f1603ed6215f9ecd1e,getSearchableInfos(android.content.Context),224325,342,334
64774,src_java_com_android_internal_telephony_dataconnection_DcTrackerBase.java,79.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,void startByteCounting() { startNetStatPoll(); startDataStallAlarm(com.android.internal.telephony.dataconnection.DcTrackerBase.DATA_STALL_NOT_SUSPECTED); },78933ece12166246290b8e3c5cec2907e67edb11,,startByteCounting(),8,76,public void sendStartNetStatPoll(com.android.internal.telephony.DctConstants.Activity activity) { android.os.Message msg = obtainMessage(DctConstants.CMD_NET_STAT_POLL); msg.arg1 = com.android.internal.telephony.DctConstants.ENABLED; msg.obj = activity; sendMessage(msg); },566c9d77a9f11b324d580510344a115635d33421,sendStartNetStatPoll(com.android.internal.telephony.DctConstants$Activity),516826,45,76
152041,tests_tests_media_src_android_media_cts_StubMediaBrowserService.java,1.0,"@java.lang.Override public android.media.cts.BrowserRoot onGetRoot(java.lang.String clientPackageName, int clientUid, android.os.Bundle rootHints) { mExtras = new android.os.Bundle(); mExtras.putString(android.media.cts.StubMediaBrowserService.EXTRAS_KEY, android.media.cts.StubMediaBrowserService.EXTRAS_VALUE); return new android.media.cts.BrowserRoot(android.media.cts.StubMediaBrowserService.MEDIA_ID_ROOT, mExtras); }",44c041f68421f5b3ee0e2de90ac273e66eae9abe,"@java.lang.Override public android.media.cts.BrowserRoot onGetRoot(java.lang.String clientPackageName, int clientUid, android.os.Bundle rootHints) { mExtras = new android.os.Bundle(); mExtras.putString(android.media.cts.StubMediaBrowserService.EXTRAS_KEY, android.media.cts.StubMediaBrowserService.EXTRAS_VALUE); android.media.cts.StubMediaBrowserService.sBrowserRoot = new android.media.cts.BrowserRoot(android.media.cts.StubMediaBrowserService.MEDIA_ID_ROOT, mExtras); return android.media.cts.StubMediaBrowserService.sBrowserRoot; }",1ee88bff421fe7ac285ad139735cb9f501a9acac,"onGetRoot(java.lang.String,int,android.os.Bundle)","onGetRoot(java.lang.String,int,android.os.Bundle)",12,1,"@java.lang.Override public android.media.cts.BrowserRoot onGetRoot(java.lang.String clientPackageName, int clientUid, android.os.Bundle rootHints) { mExtras = new android.os.Bundle(); mExtras.putString(android.media.cts.StubMediaBrowserService.EXTRAS_KEY, android.media.cts.StubMediaBrowserService.EXTRAS_VALUE); return new android.media.cts.BrowserRoot(android.media.cts.StubMediaBrowserService.MEDIA_ID_ROOT, mExtras); }",44c041f68421f5b3ee0e2de90ac273e66eae9abe,"onGetRoot(java.lang.String,int,android.os.Bundle)",138119,159,127
142363,jack_src_com_android_jack_cfg_CfgBuilder.java,14.0,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JLabeledStatement labeledStatement) { if (!(currentStmts.isEmpty())) { assert (cfg) != null; com.android.jack.cfg.BasicBlock normalBasicBlock = new com.android.jack.cfg.NormalBasicBlock(cfg, currentStmts); setBlockOfStatement(normalBasicBlock); forwardBranchResolver.addForwardBranch(ForwardBranchKind.BRANCH, normalBasicBlock, getConcreteStatement(((com.android.jack.ir.ast.JBlock) (labeledStatement.getBody())))); } super.visit(labeledStatement); return true; }",d3c041b80cdd7d52cfdcf117c11910e5295f1704,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JLabeledStatement labeledStatement) { if (!(currentStmts.isEmpty())) { assert (cfg) != null; com.android.jack.cfg.NormalBasicBlock normalBasicBlock = new com.android.jack.cfg.NormalBasicBlock(cfg, currentStmts); setBlockOfStatement(normalBasicBlock); forwardBranchResolver.addNormalBasicBlock(normalBasicBlock, getConcreteStatement(((com.android.jack.ir.ast.JBlock) (labeledStatement.getBody())))); } super.visit(labeledStatement); return true; }",4b5274a7824eb330d979354c6bbed6c12f6e75c7,visit(com.android.jack.ir.ast.JLabeledStatement),visit(com.android.jack.ir.ast.JLabeledStatement),6,5,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JLabeledStatement labeledStatement) { if (!(currentStmts.isEmpty())) { com.android.jack.cfg.NormalBasicBlock normalBasicBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(normalBasicBlock); forwardBranchResolver.addNormalBasicBlock(normalBasicBlock, getConcreteStatement(((com.android.jack.ir.ast.JBlock) (labeledStatement.getBody())))); } super.visit(labeledStatement); return true; }",7510b444c17ccde106c982c507844d222332b4f5,visit(com.android.jack.ir.ast.JLabeledStatement),321117,142,139
181901,apps_CtsVerifier_src_com_android_cts_verifier_jobscheduler_IdleConstraintTestActivity.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override protected void onPostExecute(java.lang.Void result) { mTestState = com.android.cts.verifier.jobscheduler.IdleConstraintTestActivity.IDLE_ON_TEST_STATE_NOT_STARTED; android.os.PowerManager.WakeLock fullWakeLock = mPowerManager.newWakeLock((((android.os.PowerManager.FULL_WAKE_LOCK) | (android.os.PowerManager.ACQUIRE_CAUSES_WAKEUP)) | (android.os.PowerManager.ON_AFTER_RELEASE)), com.android.cts.verifier.jobscheduler.IdleConstraintTestActivity.TAG); fullWakeLock.acquire(); fullWakeLock.release(); mPartialWakeLock.release(); }",d4fcd652ba3b5a7343229680920e7fedeb20a1b9,,onPostExecute(java.lang.Void),2,1,"@java.lang.Override protected void onPostExecute(java.lang.Void result) { mTestState = com.android.cts.verifier.jobscheduler.IdleConstraintTestActivity.IDLE_ON_TEST_STATE_NOT_IN_PROGRESS; android.os.PowerManager.WakeLock fullWakeLock = mPowerManager.newWakeLock((((android.os.PowerManager.FULL_WAKE_LOCK) | (android.os.PowerManager.ACQUIRE_CAUSES_WAKEUP)) | (android.os.PowerManager.ON_AFTER_RELEASE)), com.android.cts.verifier.jobscheduler.IdleConstraintTestActivity.TAG); fullWakeLock.acquire(); fullWakeLock.release(); mPartialWakeLock.release(); }",94a1572c55ad77e7de3a49056890e0542b655d3c,onPostExecute(java.lang.Void),273544,154,156
186130,jack-tests_tests_com_android_jack_java8_LambdaTest.java,27.0,"@org.junit.Test public void testLamba012() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA012).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",8108874279aeddbb55a4593670722c4340c8b483,"@org.junit.Test public void testLamba012() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA012).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",cf777113979d54bf88be6e262a999eb428679542,testLamba012(),testLamba012(),7,27,@org.junit.Test public void testLamba012() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA012).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },3899d30658e03762df302c16364ac4c9d4e46dcd,testLamba012(),466354,82,56
119600,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_fixture_GradleTestProject.java,37.0,"private void executeBuild(java.util.List<java.lang.String> arguments, org.gradle.tooling.ProjectConnection connection, java.lang.String[] tasks) { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add(""-i""); args.add(""-u""); args.addAll(arguments); org.gradle.tooling.BuildLauncher launcher = connection.newBuild().forTasks(tasks).withArguments(args.toArray(new java.lang.String[args.size()])); if ((stdout) != null) { launcher.setStandardOutput(stdout); } launcher.run(); }",b5cd9b031806c0bef69b41556590ef96d78513a5,"private void executeBuild(java.util.List<java.lang.String> arguments, org.gradle.tooling.ProjectConnection connection, java.lang.String[] tasks) { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add(""-i""); args.add(""-u""); args.addAll(arguments); org.gradle.tooling.BuildLauncher launcher = connection.newBuild().forTasks(tasks).withArguments(args.toArray(new java.lang.String[args.size()])); if (com.android.build.gradle.integration.common.utils.JacocoAgent.enableJacoco()) { launcher.setJvmArguments(com.android.build.gradle.integration.common.utils.JacocoAgent.getJvmArg()); } if ((stdout) != null) { launcher.setStandardOutput(stdout); } launcher.run(); }",50f26f87c50e6ad158c44e0852e205c3f7231387,"executeBuild(java.util.List,org.gradle.tooling.ProjectConnection,java.lang.String[])","executeBuild(java.util.List,org.gradle.tooling.ProjectConnection,java.lang.String[])",4,37,"private void executeBuild(java.util.List<java.lang.String> arguments, org.gradle.tooling.ProjectConnection connection, java.lang.String[] tasks) { java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayListWithCapacity((2 + (arguments.size()))); args.add(""-i""); args.add(""-u""); args.addAll(arguments); org.gradle.tooling.BuildLauncher launcher = connection.newBuild().forTasks(tasks).withArguments(args.toArray(new java.lang.String[args.size()])); if (com.android.build.gradle.integration.common.utils.JacocoAgent.isJacocoEnabled()) { launcher.setJvmArguments(com.android.build.gradle.integration.common.utils.JacocoAgent.getJvmArg()); } if ((stdout) != null) { launcher.setStandardOutput(stdout); } launcher.run(); }",85588c7473b4aa5103bcf3d517be0d2201a77768,"executeBuild(java.util.List,org.gradle.tooling.ProjectConnection,java.lang.String[])",189988,215,216
14804,samples_ApiDemos_src_com_example_android_apis_app_ForegroundService.java,7.0,"void stopForegroundCompat(int id) { if ((mStopForeground) != null) { mStopForegroundArgs[0] = java.lang.Boolean.TRUE; try { mStopForeground.invoke(this, mStopForegroundArgs); } catch (java.lang.reflect.InvocationTargetException e) { android.util.Log.w(""ApiDemos"", ""Unable to invoke stopForeground"", e); } catch (java.lang.IllegalAccessException e) { android.util.Log.w(""ApiDemos"", ""Unable to invoke stopForeground"", e); } return; } mNM.cancel(id); setForeground(false); }",da2adf4fb7cee8b1e88375b6884a103d1111786e,"@java.lang.SuppressWarnings(""deprecation"") void stopForegroundCompat(int id) { if ((mStopForeground) != null) { mStopForegroundArgs[0] = java.lang.Boolean.TRUE; try { mStopForeground.invoke(this, mStopForegroundArgs); } catch (java.lang.reflect.InvocationTargetException e) { android.util.Log.w(""ApiDemos"", ""Unable to invoke stopForeground"", e); } catch (java.lang.IllegalAccessException e) { android.util.Log.w(""ApiDemos"", ""Unable to invoke stopForeground"", e); } return; } mNM.cancel(id); setForeground(false); }",24eb9e90c5d96a8174479a10cec80f392f27513b,stopForegroundCompat(int),stopForegroundCompat(int),3,7,"void stopForegroundCompat(int id) { if ((mStopForeground) != null) { mStopForegroundArgs[0] = java.lang.Boolean.TRUE; try { mStopForeground.invoke(this, mStopForegroundArgs); } catch (java.lang.reflect.InvocationTargetException e) { android.util.Log.w(""ApiDemos"", ""Unable to invoke stopForeground"", e); } catch (java.lang.IllegalAccessException e) { android.util.Log.w(""ApiDemos"", ""Unable to invoke stopForeground"", e); } return; } mNM.cancel(id); setForeground(false); }",da2adf4fb7cee8b1e88375b6884a103d1111786e,stopForegroundCompat(int),431269,143,134
18960,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_common_platformData_ViewClassInfo.java,0.0,public com.android.ide.eclipse.adt.internal.resources.ViewClassInfo getSuperClass() { return mSuperClass; },affed0e798046df597e3c3328d242cf2ebc351f3,public com.android.ide.common.platformData.ViewClassInfo getSuperClass() { return mSuperClass; },99a281c3a9841ab80fb2241d458ce2c3d6f99925,getSuperClass(),getSuperClass(),2,0,public com.android.ide.common.resources.platform.ViewClassInfo getSuperClass() { return mSuperClass; },88372540d3cfcc2046c3026c2f33302615e2c971,getSuperClass(),136342,23,24
360729,wifi_java_android_net_wifi_aware_WifiAwareManager.java,31.0,"public java.lang.String createNetworkSpecifier(int clientId, @android.net.wifi.aware.WifiAwareManager.DataPathRole int role, @android.annotation.Nullable byte[] peer, @android.annotation.Nullable byte[] pmk, @android.annotation.Nullable java.lang.String passphrase) { if (android.net.wifi.aware.WifiAwareManager.VDBG) { android.util.Log.v(android.net.wifi.aware.WifiAwareManager.TAG, (((((""createNetworkSpecifier: role="" + role) + "", pmk="") + (pmk == null ? ""null"" : ""non-null"")) + "", passphrase="") + (passphrase == null ? ""null"" : ""non-null""))); } int type = (peer == null) ? android.net.wifi.aware.WifiAwareManager.NETWORK_SPECIFIER_TYPE_OOB_ANY_PEER : android.net.wifi.aware.WifiAwareManager.NETWORK_SPECIFIER_TYPE_OOB; if ((role != (android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_INITIATOR)) && (role != (android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_RESPONDER))) { throw new java.lang.IllegalArgumentException((""createNetworkSpecifier: Invalid 'role' argument when creating a network "" + ""specifier"")); } if (role == (android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_INITIATOR)) { if (peer == null) { throw new java.lang.IllegalArgumentException((""createNetworkSpecifier: Invalid peer MAC "" + ""address - null not permitted on INITIATOR"")); } } if ((peer != null) && ((peer.length) != 6)) { throw new java.lang.IllegalArgumentException(""createNetworkSpecifier: Invalid peer MAC address""); } org.json.JSONObject json; try { json = new org.json.JSONObject(); json.put(android.net.wifi.aware.WifiAwareManager.NETWORK_SPECIFIER_KEY_TYPE, type); json.put(android.net.wifi.aware.WifiAwareManager.NETWORK_SPECIFIER_KEY_ROLE, role); json.put(android.net.wifi.aware.WifiAwareManager.NETWORK_SPECIFIER_KEY_CLIENT_ID, clientId); if (peer != null) { json.put(android.net.wifi.aware.WifiAwareManager.NETWORK_SPECIFIER_KEY_PEER_MAC, new java.lang.String(libcore.util.HexEncoding.encode(peer))); } if (pmk == null) { pmk = new byte[0]; } json.put(android.net.wifi.aware.WifiAwareManager.NETWORK_SPECIFIER_KEY_PMK, android.util.Base64.encodeToString(pmk, 0, pmk.length, Base64.DEFAULT)); if (passphrase == null) { passphrase = new java.lang.String(); } json.put(android.net.wifi.aware.WifiAwareManager.NETWORK_SPECIFIER_KEY_PASSPHRASE, passphrase); } catch (org.json.JSONException e) { return """"; } return json.toString(); }",587b85999a279bcecae27787141711637d3e329f,"public android.net.NetworkSpecifier createNetworkSpecifier(int clientId, @android.net.wifi.aware.WifiAwareManager.DataPathRole int role, @android.annotation.Nullable byte[] peer, @android.annotation.Nullable byte[] pmk, @android.annotation.Nullable java.lang.String passphrase) { if (android.net.wifi.aware.WifiAwareManager.VDBG) { android.util.Log.v(android.net.wifi.aware.WifiAwareManager.TAG, (((((""createNetworkSpecifier: role="" + role) + "", pmk="") + (pmk == null ? ""null"" : ""non-null"")) + "", passphrase="") + (passphrase == null ? ""null"" : ""non-null""))); } android.net.wifi.aware.WifiAwareNetworkSpecifier ns = new android.net.wifi.aware.WifiAwareNetworkSpecifier(); ns.type = (peer == null) ? WifiAwareNetworkSpecifier.NETWORK_SPECIFIER_TYPE_OOB_ANY_PEER : WifiAwareNetworkSpecifier.NETWORK_SPECIFIER_TYPE_OOB; if ((role != (android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_INITIATOR)) && (role != (android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_RESPONDER))) { throw new java.lang.IllegalArgumentException((""createNetworkSpecifier: Invalid 'role' argument when creating a network "" + ""specifier"")); } if (role == (android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_INITIATOR)) { if (peer == null) { throw new java.lang.IllegalArgumentException((""createNetworkSpecifier: Invalid peer MAC "" + ""address - null not permitted on INITIATOR"")); } } if ((peer != null) && ((peer.length) != 6)) { throw new java.lang.IllegalArgumentException(""createNetworkSpecifier: Invalid peer MAC address""); } ns.role = role; ns.clientId = clientId; ns.peerMac = peer; ns.pmk = pmk; ns.passphrase = passphrase; return ns; }",cc2cd73ed4e1b0afe28b4ea3a85b44da8c2149ac,"createNetworkSpecifier(int,int,byte[],byte[],java.lang.String)","createNetworkSpecifier(int,int,byte[],byte[],java.lang.String)",15,31,"public android.net.NetworkSpecifier createNetworkSpecifier(int clientId, @android.net.wifi.aware.WifiAwareManager.DataPathRole int role, @android.annotation.Nullable byte[] peer, @android.annotation.Nullable byte[] pmk, @android.annotation.Nullable java.lang.String passphrase) { if (android.net.wifi.aware.WifiAwareManager.VDBG) { android.util.Log.v(android.net.wifi.aware.WifiAwareManager.TAG, (((((""createNetworkSpecifier: role="" + role) + "", pmk="") + (pmk == null ? ""null"" : ""non-null"")) + "", passphrase="") + (passphrase == null ? ""null"" : ""non-null""))); } if ((role != (android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_INITIATOR)) && (role != (android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_RESPONDER))) { throw new java.lang.IllegalArgumentException((""createNetworkSpecifier: Invalid 'role' argument when creating a network "" + ""specifier"")); } if (role == (android.net.wifi.aware.WifiAwareManager.WIFI_AWARE_DATA_PATH_ROLE_INITIATOR)) { if (peer == null) { throw new java.lang.IllegalArgumentException((""createNetworkSpecifier: Invalid peer MAC "" + ""address - null not permitted on INITIATOR"")); } } if ((peer != null) && ((peer.length) != 6)) { throw new java.lang.IllegalArgumentException(""createNetworkSpecifier: Invalid peer MAC address""); } return new android.net.wifi.aware.WifiAwareNetworkSpecifier((peer == null ? WifiAwareNetworkSpecifier.NETWORK_SPECIFIER_TYPE_OOB_ANY_PEER : WifiAwareNetworkSpecifier.NETWORK_SPECIFIER_TYPE_OOB), role, clientId, 0, 0, peer, pmk, passphrase); }",43768b231c2d3d176409902aa39e575b2f9ba7c9,"createNetworkSpecifier(int,int,byte[],byte[],java.lang.String)",43184,497,456
91995,luni_src_main_java_libcore_io_ForwardingOs.java,44.0,public void setuid(int uid) throws libcore.io.ErrnoException { os.setuid(uid); },71d9778c2061cfaf3698930d4c206aedd7c05c73,public void setuid(int uid) throws android.os.ErrnoException { os.setuid(uid); },bcaacbf7a9c4c695de446a96c949dba2bf63b705,setuid(int),setuid(int),3,42,public void setuid(int uid) throws android.system.ErrnoException { os.setuid(uid); },74c0cb0fa2f180154286697b32c1c40ca6c4c287,setuid(int),170508,25,25
281666,ojluni_src_main_java_java_net_Inet6AddressImpl.java,0.0,"@java.lang.Override public boolean isReachable(java.net.InetAddress addr, int timeout, java.net.NetworkInterface netif, int ttl) throws java.io.IOException { byte[] ifaddr = null; int scope = -1; int netif_scope = -1; if (netif != null) { java.util.Enumeration<java.net.InetAddress> it = netif.getInetAddresses(); java.net.InetAddress inetaddr = null; while (it.hasMoreElements()) { inetaddr = it.nextElement(); if (inetaddr.getClass().isInstance(addr)) { ifaddr = inetaddr.getAddress(); if (inetaddr instanceof java.net.Inet6Address) { netif_scope = ((java.net.Inet6Address) (inetaddr)).getScopeId(); } break; } } if (ifaddr == null) { return false; } } if (addr instanceof java.net.Inet6Address) scope = ((java.net.Inet6Address) (addr)).getScopeId(); dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); try { return isReachable0(addr.getAddress(), scope, timeout, ifaddr, ttl, netif_scope); } catch (java.io.IOException ioe) { return false; } }",1edaf41360ed3737dba2f74aceb6f31782453586,"@java.lang.Override public boolean isReachable(java.net.InetAddress addr, int timeout, java.net.NetworkInterface netif, int ttl) throws java.io.IOException { java.io.FileDescriptor fd = libcore.io.IoBridge.socket(true); java.net.InetAddress sourceAddr = null; if (netif != null) { java.util.Enumeration<java.net.InetAddress> inetAddrs = netif.getInetAddresses(); while (inetAddrs.hasMoreElements()) { java.net.InetAddress inetAddr = inetAddrs.nextElement(); if (inetAddr.getClass().isInstance(addr)) { sourceAddr = inetAddr; break; } } if (sourceAddr == null) { return false; } } try { if (sourceAddr != null) { libcore.io.IoBridge.bind(fd, sourceAddr, 0); } libcore.io.IoBridge.connect(fd, addr, 7, timeout); return true; } catch (java.io.IOException e) { java.lang.Throwable cause = e.getCause(); return (cause instanceof android.system.ErrnoException) && ((((android.system.ErrnoException) (cause)).errno) == (android.system.OsConstants.ECONNREFUSED)); } finally { libcore.io.IoBridge.closeAndSignalBlockedThreads(fd); } }",6f6bd96f8095f0d2cc9da3d2c1bc2ca186dd127e,"isReachable(java.net.InetAddress,int,java.net.NetworkInterface,int)","isReachable(java.net.InetAddress,int,java.net.NetworkInterface,int)",4,0,"@java.lang.Override public boolean isReachable(java.net.InetAddress addr, int timeout, java.net.NetworkInterface netif, int ttl) throws java.io.IOException { java.io.FileDescriptor fd = libcore.io.IoBridge.socket(true); java.net.InetAddress sourceAddr = null; if (netif != null) { java.util.Enumeration<java.net.InetAddress> it = netif.getInetAddresses(); java.net.InetAddress inetaddr = null; while (it.hasMoreElements()) { inetaddr = it.nextElement(); if (inetaddr.getClass().isInstance(addr)) { sourceAddr = inetaddr; break; } } if (sourceAddr == null) { return false; } } try { if (sourceAddr != null) { libcore.io.IoBridge.bind(fd, sourceAddr, 0); } libcore.io.IoBridge.connect(fd, addr, 7, timeout); return true; } catch (java.io.IOException e) { java.lang.Throwable cause = e.getCause(); return (cause instanceof android.system.ErrnoException) && ((((android.system.ErrnoException) (cause)).errno) == (android.system.OsConstants.ECONNREFUSED)); } finally { libcore.io.IoBridge.closeAndSignalBlockedThreads(fd); } }",ab597ae3970b93333a4f20e35e228587822d8ed2,"isReachable(java.net.InetAddress,int,java.net.NetworkInterface,int)",342838,296,294
46820,core_tests_overlaytests_OverlayTest_src_com_android_overlaytest_OverlayBaseTest.java,47.0,"public void testAsset() throws java.lang.Throwable { final int resId = com.android.internal.R.drawable.default_wallpaper; int actual = calculateRawResourceChecksum(resId); int expected = (mWithOverlay) ? 20954 : 1371086; assertEquals(expected, actual); }",aadc688777f70eb2a28aa878ccb7c60f731b4853,"public void testAsset() throws java.lang.Throwable { final int resId = com.android.internal.R.drawable.rro_test_drawable; int actual = calculateRawResourceChecksum(resId); int expected = 0; switch (mMode) { case com.android.overlaytest.OverlayBaseTest.MODE_NO_OVERLAY : expected = 22117; break; case com.android.overlaytest.OverlayBaseTest.MODE_SINGLE_OVERLAY : case com.android.overlaytest.OverlayBaseTest.MODE_MULTIPLE_OVERLAYS : expected = 20954; break; default : fail((""Unknown mode "" + (mMode))); } assertEquals(expected, actual); }",886cdeaad66bee2700433b43d4016b8a13d931bd,testAsset(),testAsset(),16,43,"public void testDrawable() throws java.lang.Throwable { final int resId = R.drawable.drawable; int actual = calculateRawResourceChecksum(resId); int expected = 0; switch (mMode) { case com.android.overlaytest.OverlayBaseTest.MODE_NO_OVERLAY : expected = 22117; break; case com.android.overlaytest.OverlayBaseTest.MODE_SINGLE_OVERLAY : case com.android.overlaytest.OverlayBaseTest.MODE_MULTIPLE_OVERLAYS : expected = 20954; break; default : fail((""Unknown mode "" + (mMode))); } assertEquals(expected, actual); }",1e49ce65a928d89e852154ffdd01d726c8b122f8,testDrawable(),81751,156,145
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,16.0,"public void testAesCbcHmacSha256Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",88978a15ec5bbfc06949275a63155ba11955c8f9,"public void testAesCbcHmacSha256Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",d276fe1c960fe32c50386386ba5dd4c74e11831f,testAesCbcHmacSha256Udp4UdpEncap(),testAesCbcHmacSha256Udp4UdpEncap(),15,19,"public void testAesCbcHmacSha256Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",9d205e25cf498102a5b1bc519e9c3ca372a1d400,testAesCbcHmacSha256Udp4UdpEncap(),381523,153,184
683290,src_apksigner_java_com_android_apksigner_ApkSignerTool.java,11.0,"public static void main(java.lang.String[] params) throws java.lang.Exception { if ((((params.length) == 0) || (""--help"".equals(params[0]))) || (""-h"".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""--version"".equals(params[0])) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } java.lang.String cmd = params[0]; try { if (""sign"".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""verify"".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""rotate"".equals(cmd)) { com.android.apksigner.ApkSignerTool.rotate(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""help"".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""version"".equals(cmd)) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } else { throw new com.android.apksigner.ApkSignerTool.ParameterException(((""Unsupported command: "" + cmd) + "". See --help for supported commands"")); } } catch (com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksigner.OptionsParser e) { java.lang.System.err.println(e.getMessage()); java.lang.System.exit(1); return; } }",98aafc713d46dfbbd4fd6834459a6a077142e660,"public static void main(java.lang.String[] params) throws java.lang.Exception { if ((((params.length) == 0) || (""--help"".equals(params[0]))) || (""-h"".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""--version"".equals(params[0])) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } java.lang.String cmd = params[0]; try { if (""sign"".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""verify"".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""rotate"".equals(cmd)) { com.android.apksigner.ApkSignerTool.rotate(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""help"".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""version"".equals(cmd)) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } else if (""dump-hints"".equals(cmd)) { com.android.apksigner.ApkSignerTool.dumpHints(java.util.Arrays.copyOfRange(params, 1, params.length)); } else { throw new com.android.apksigner.ApkSignerTool.ParameterException(((""Unsupported command: "" + cmd) + "". See --help for supported commands"")); } } catch (com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksigner.OptionsParser e) { java.lang.System.err.println(e.getMessage()); java.lang.System.exit(1); return; } }",06f3ba451cae8dbeba865b7c1e5522a8c07add03,main(java.lang.String[]),main(java.lang.String[]),4,10,"public static void main(java.lang.String[] params) throws java.lang.Exception { if ((((params.length) == 0) || (""--help"".equals(params[0]))) || (""-h"".equals(params[0]))) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""--version"".equals(params[0])) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } java.lang.String cmd = params[0]; try { if (""sign"".equals(cmd)) { com.android.apksigner.ApkSignerTool.sign(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""verify"".equals(cmd)) { com.android.apksigner.ApkSignerTool.verify(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""rotate"".equals(cmd)) { com.android.apksigner.ApkSignerTool.rotate(java.util.Arrays.copyOfRange(params, 1, params.length)); return; } else if (""help"".equals(cmd)) { com.android.apksigner.ApkSignerTool.printUsage(com.android.apksigner.ApkSignerTool.HELP_PAGE_GENERAL); return; } else if (""version"".equals(cmd)) { java.lang.System.out.println(com.android.apksigner.ApkSignerTool.VERSION); return; } else { throw new com.android.apksigner.ApkSignerTool.ParameterException(((""Unsupported command: "" + cmd) + "". See --help for supported commands"")); } } catch (com.android.apksigner.ApkSignerTool.ParameterException | com.android.apksigner.OptionsParser e) { java.lang.System.err.println(e.getMessage()); java.lang.System.exit(1); return; } }",98aafc713d46dfbbd4fd6834459a6a077142e660,main(java.lang.String[]),402533,494,448
91995,luni_src_main_java_libcore_io_BlockGuardOs.java,37.0,"@java.lang.Override public int recvfrom(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetSocketAddress srcAddress) throws java.net.SocketException, libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); return os.recvfrom(fd, bytes, byteOffset, byteCount, flags, srcAddress); }",9db873a04b611ea5fdef3d361417afc1d9829fc1,"@java.lang.Override public int recvfrom(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetSocketAddress srcAddress) throws android.os.ErrnoException, java.net.SocketException { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); return os.recvfrom(fd, bytes, byteOffset, byteCount, flags, srcAddress); }",b841431480ef8e0f8808e3fd77ae5648655ebc9d,"recvfrom(java.io.FileDescriptor,byte[],int,int,int,java.net.InetSocketAddress)","recvfrom(java.io.FileDescriptor,byte[],int,int,int,java.net.InetSocketAddress)",3,38,"@java.lang.Override public int recvfrom(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount, int flags, java.net.InetSocketAddress srcAddress) throws android.system.ErrnoException, java.net.SocketException { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); return os.recvfrom(fd, bytes, byteOffset, byteCount, flags, srcAddress); }",c45b4a445a8c3805d797706c7d3f3d69cf422d0a,"recvfrom(java.io.FileDescriptor,byte[],int,int,int,java.net.InetSocketAddress)",170356,95,95
353609,src_com_android_bluetooth_gatt_AdvertiseManager.java,1.0,"private void postCallback(int advertiserId, int status) { try { com.android.bluetooth.gatt.AdvertiseClient client = getAdvertiseClient(advertiserId); android.bluetooth.le.AdvertiseSettings settings = (client == null) ? null : client.settings; boolean isStart = true; mService.onMultipleAdvertiseCallback(advertiserId, status, isStart, settings); } catch (android.os.RemoteException e) { loge(""failed onMultipleAdvertiseCallback"", e); } }",bf52d47bccfb75bc70498e2fe2259fdd9ca94ac7,"void onAdvertisingSetEnabled(int advertiser_id, boolean enable, int status) throws java.lang.Exception { if (com.android.bluetooth.gatt.AdvertiseManager.DBG) android.util.Log.d(com.android.bluetooth.gatt.AdvertiseManager.TAG, (((((""onAdvertisingSetEnabled() - advertiser_id="" + advertiser_id) + "", enable="") + enable) + "", status="") + status)); java.util.Map.Entry<android.os.IBinder, com.android.bluetooth.gatt.AdvertiseManager.AdvertiserBag> entry = findAdvertiser(advertiser_id); if (entry == null) { android.util.Log.i(com.android.bluetooth.gatt.AdvertiseManager.TAG, (""onAdvertisingSetEnable() - no callback found for advertiser_id "" + advertiser_id)); return; } android.bluetooth.le.IAdvertisingSetCallback callback = entry.getValue().callback; callback.onAdvertisingEnabled(advertiser_id, enable, status); }",776198cb4ade057cff8836b3d30a65d6880f4163,"postCallback(int,int)","onAdvertisingSetEnabled(int,boolean,int)",6,4,"void onAdvertisingSetEnabled(int advertiser_id, boolean enable, int status) throws java.lang.Exception { logd((((((""onAdvertisingSetEnabled() - advertiser_id="" + advertiser_id) + "", enable="") + enable) + "", status="") + status)); java.util.Map.Entry<android.os.IBinder, com.android.bluetooth.gatt.AdvertiseManager.AdvertiserInfo> entry = findAdvertiser(advertiser_id); if (entry == null) { android.util.Log.i(com.android.bluetooth.gatt.AdvertiseManager.TAG, (""onAdvertisingSetEnable() - no callback found for advertiser_id "" + advertiser_id)); return; } android.bluetooth.le.IAdvertisingSetCallback callback = entry.getValue().callback; callback.onAdvertisingEnabled(advertiser_id, enable, status); }",60f2daf5d267fe859197171e213e1ba137ed2a94,"onAdvertisingSetEnabled(int,boolean,int)",464334,248,212
91995,luni_src_main_java_libcore_io_ForwardingOs.java,110.0,"public void munlock(long address, long byteCount) throws libcore.io.ErrnoException { os.munlock(address, byteCount); }",4b5b07eff8f49888b2ba16d4deabf49782593211,"public void munlock(long address, long byteCount) throws android.os.ErrnoException { os.munlock(address, byteCount); }",a46a2d1f7b9547730ff3be2e6119a18043b99416,"munlock(long,long)","munlock(long,long)",3,110,"public void munlock(long address, long byteCount) throws android.system.ErrnoException { os.munlock(address, byteCount); }",c09bfec6fba3700449f7574274ccd2beef9535d4,"munlock(long,long)",170449,32,32
120315,jack_src_com_android_jack_ir_sourceinfo_LineSourceInfo.java,2.0,@java.lang.Override @javax.annotation.Nonnull public java.lang.String toString() { return (((fileSourceInfo.getFileName()) + '(') + (getStartLine())) + ')'; },c01fd412f1f252191b450b0277f08a99518588cd,"@java.lang.Override public java.lang.String toString() { return ((((getFileName()) + "":"") + (getStartLine())) + '-') + (getEndLine()); }",1d538720402c92b32fcee9e269d54b6ac8eff3fb,toString(),toString(),3,2,"@java.lang.Override @javax.annotation.Nonnull public java.lang.String toString() { return ((((getFileName()) + "":"") + (getStartLine())) + '-') + (getEndLine()); }",b91ea609eca29f3c0ac332cacd4d333cbfcfb457,toString(),161055,37,43
630005,src_com_android_providers_telephony_CarrierIdProvider.java,8.0,"private int updateCarrierIdForCurrentSubscription(android.net.Uri uri, android.content.ContentValues cv) { int subId; try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException((""invalid subid in provided uri "" + uri)); } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""updateCarrierIdForSubId: "" + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(com.android.internal.telephony.SubscriptionController.getInstance().isActiveSubId(subId))) { final java.util.List activeSubscriptions = java.util.Arrays.asList(com.android.internal.telephony.SubscriptionController.getInstance().getActiveSubIdList()); int count = 0; for (int subscription : mCurrentSubscriptionMap.keySet()) { if (!(activeSubscriptions.contains(subscription))) { count++; android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""updateCarrierIdForSubId: "" + subscription)); mCurrentSubscriptionMap.remove(subscription); getContext().getContentResolver().notifyChange(CarrierIdentification.CONTENT_URI, null); } } return count; } else { mCurrentSubscriptionMap.put(subId, new android.util.Pair(cv.getAsInteger(CarrierIdentification.CID), cv.getAsString(CarrierIdentification.NAME))); getContext().getContentResolver().notifyChange(CarrierIdentification.CONTENT_URI, null); return 1; } }",534e92779d5a2ce830b47318e69e1e756930b853,"private int updateCarrierIdForCurrentSubscription(android.net.Uri uri, android.content.ContentValues cv) { int subId; try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException((""invalid subid in provided uri "" + uri)); } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""updateCarrierIdForSubId: "" + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(com.android.internal.telephony.SubscriptionController.getInstance().isActiveSubId(subId))) { final java.util.List activeSubscriptions = java.util.Arrays.asList(com.android.internal.telephony.SubscriptionController.getInstance().getActiveSubIdList()); int count = 0; for (int subscription : mCurrentSubscriptionMap.keySet()) { if (!(activeSubscriptions.contains(subscription))) { count++; android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""updateCarrierIdForSubId: "" + subscription)); mCurrentSubscriptionMap.remove(subscription); getContext().getContentResolver().notifyChange(CarrierId.CONTENT_URI, null); } } return count; } else { mCurrentSubscriptionMap.put(subId, new android.util.Pair(cv.getAsInteger(CarrierId.CARRIER_ID), cv.getAsString(CarrierId.NAME))); getContext().getContentResolver().notifyChange(CarrierId.CONTENT_URI, null); return 1; } }",2618c6e602b664e1e0cd9e3715976b72faf8b70e,"updateCarrierIdForCurrentSubscription(android.net.Uri,android.content.ContentValues)","updateCarrierIdForCurrentSubscription(android.net.Uri,android.content.ContentValues)",2,8,"private int updateCarrierIdForCurrentSubscription(android.net.Uri uri, android.content.ContentValues cv) { int subId; try { subId = java.lang.Integer.parseInt(uri.getLastPathSegment()); } catch (java.lang.NumberFormatException e) { throw new java.lang.IllegalArgumentException((""invalid subid in provided uri "" + uri)); } android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""updateCarrierIdForSubId: "" + subId)); if (subId == (android.telephony.SubscriptionManager.DEFAULT_SUBSCRIPTION_ID)) { subId = com.android.internal.telephony.SubscriptionController.getInstance().getDefaultSubId(); } if (!(com.android.internal.telephony.SubscriptionController.getInstance().isActiveSubId(subId))) { final java.util.List activeSubscriptions = java.util.Arrays.asList(com.android.internal.telephony.SubscriptionController.getInstance().getActiveSubIdList()); int count = 0; for (int subscription : mCurrentSubscriptionMap.keySet()) { if (!(activeSubscriptions.contains(subscription))) { count++; android.util.Log.d(com.android.providers.telephony.CarrierIdProvider.TAG, (""updateCarrierIdForSubId: "" + subscription)); mCurrentSubscriptionMap.remove(subscription); getContext().getContentResolver().notifyChange(CarrierId.CONTENT_URI, null); } } return count; } else { mCurrentSubscriptionMap.put(subId, new android.util.Pair(cv.getAsInteger(CarrierId.CARRIER_ID), cv.getAsString(CarrierId.CARRIER_NAME))); getContext().getContentResolver().notifyChange(CarrierId.CONTENT_URI, null); return 1; } }",922585e7d1fce4bc43695b41082065a2627bd313,"updateCarrierIdForCurrentSubscription(android.net.Uri,android.content.ContentValues)",267005,375,379
542981,src_com_android_bluetooth_hid_HidDeviceNativeInterface.java,,,,"private synchronized void onApplicationStateChanged(byte[] address, boolean registered) { com.android.bluetooth.hid.HidDeviceService service = com.android.bluetooth.hid.HidDeviceService.getHidDeviceService(); if (service != null) { service.onApplicationStateChangedFromNative(address, registered); } else { android.util.Log.wtfStack(com.android.bluetooth.hid.HidDeviceNativeInterface.TAG, (""FATAL: onApplicationStateChanged() "" + ""is called from the stack while service is not available."")); } }",8b9fe90df93ec8e639ec17d12679c03b7e7f2b30,,"onApplicationStateChanged(byte[],boolean)",14,21,"private synchronized void onApplicationStateChanged(byte[] address, boolean registered) { com.android.bluetooth.hid.HidDeviceService service = com.android.bluetooth.hid.HidDeviceService.getHidDeviceService(); if (service != null) { service.onApplicationStateChangedFromNative(getDevice(address), registered); } else { android.util.Log.wtfStack(com.android.bluetooth.hid.HidDeviceNativeInterface.TAG, (""FATAL: onApplicationStateChanged() "" + ""is called from the stack while service is not available."")); } }",2eff0201a1efc76e08e433d71b862ee9be63be4f,"onApplicationStateChanged(byte[],boolean)",329426,123,125
79721,graphics_java_android_graphics_Bitmap.java,94.0,"private static native void nativeCopyPixelsFromBuffer(int nb, java.nio.Buffer src);",14853833428641229deb6490b32548527c199c4d,"private static native void nativeCopyPixelsFromBuffer(long nb, java.nio.Buffer src);",ea013d57f36fe520a157a7b327c339b81c200f70,"nativeCopyPixelsFromBuffer(int,java.nio.Buffer)","nativeCopyPixelsFromBuffer(long,java.nio.Buffer)",6,88,"private static native void nativeCopyPixelsFromBuffer(long nativeBitmap, java.nio.Buffer src);",9e2d8b90e793518a7b3483c2e15ecac439954878,"nativeCopyPixelsFromBuffer(long,java.nio.Buffer)",35745,20,21
306251,service_java_com_android_server_wifi_hotspot2_DomainMatcher.java,1.0,public com.android.server.wifi.hotspot2.DomainMatcher.Match isSubDomain(java.util.List<java.lang.String> domain) { com.android.server.wifi.hotspot2.DomainMatcher.Label label = mRoot; for (java.lang.String labelString : domain) { label = label.getSubLabel(labelString); if (label == null) { return com.android.server.wifi.hotspot2.DomainMatcher.Match.None; } else if ((label.getMatch()) != (com.android.server.wifi.hotspot2.DomainMatcher.Match.None)) { return label.getMatch(); } } return com.android.server.wifi.hotspot2.DomainMatcher.Match.None; },f86fa4134288b364223de6f97b0302e8a3a279d5,public com.android.server.wifi.hotspot2.DomainMatcher.Match isSubDomain(java.lang.String domainName) { if (android.text.TextUtils.isEmpty(domainName)) { return com.android.server.wifi.hotspot2.DomainMatcher.Match.None; } java.util.List<java.lang.String> domainLabels = com.android.server.wifi.hotspot2.Utils.splitDomain(domainName); com.android.server.wifi.hotspot2.DomainMatcher.Label label = mRoot; com.android.server.wifi.hotspot2.DomainMatcher.Match match = com.android.server.wifi.hotspot2.DomainMatcher.Match.None; for (java.lang.String labelString : domainLabels) { label = label.getSubLabel(labelString); if (label == null) { break; } else if ((label.getMatch()) != (com.android.server.wifi.hotspot2.DomainMatcher.Match.None)) { match = label.getMatch(); if (match == (com.android.server.wifi.hotspot2.DomainMatcher.Match.Primary)) { break; } } } return match; },5ad11fc91d9af7f6091c955070d4c7b96c231a07,isSubDomain(java.util.List),isSubDomain(java.lang.String),7,2,public int isSubDomain(java.lang.String domainName) { if (android.text.TextUtils.isEmpty(domainName)) { return com.android.server.wifi.hotspot2.DomainMatcher.MATCH_NONE; } java.util.List<java.lang.String> domainLabels = com.android.server.wifi.hotspot2.Utils.splitDomain(domainName); com.android.server.wifi.hotspot2.DomainMatcher.Label label = mRoot; int match = com.android.server.wifi.hotspot2.DomainMatcher.MATCH_NONE; for (java.lang.String labelString : domainLabels) { label = label.getSubLabel(labelString); if (label == null) { break; } else if ((label.getMatch()) != (com.android.server.wifi.hotspot2.DomainMatcher.MATCH_NONE)) { match = label.getMatch(); if (match == (com.android.server.wifi.hotspot2.DomainMatcher.MATCH_PRIMARY)) { break; } } } return match; },fd82338ed67aec3402cd0726fd2db1212d4237fa,isSubDomain(java.lang.String),64474,249,223
60080,ddmlib_src_main_java_com_android_ddmlib_Device.java,11.0,"@java.lang.Override public void executeShellCommand(java.lang.String command, com.android.ddmlib.IShellOutputReceiver receiver, int maxTimeToOutputResponse) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.AdbHelper.executeRemoteCommand(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), command, this, receiver, maxTimeToOutputResponse); }",671c30463e8bf39268b81dc36581a200349e6a7b,"@java.lang.Override public void executeShellCommand(java.lang.String command, com.android.ddmlib.IShellOutputReceiver receiver, long maxTimeToOutputResponse) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.AdbHelper.executeRemoteCommand(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), command, this, receiver, maxTimeToOutputResponse); }",2b8bbb729d1cb63ef8133412f3dc24a670150054,"executeShellCommand(java.lang.String,com.android.ddmlib.IShellOutputReceiver,int)","executeShellCommand(java.lang.String,com.android.ddmlib.IShellOutputReceiver,long)",5,52,"@java.lang.Override public void executeShellCommand(java.lang.String command, com.android.ddmlib.IShellOutputReceiver receiver, int maxTimeToOutputResponse) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.AdbHelper.executeRemoteCommand(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), command, this, receiver, maxTimeToOutputResponse); }",671c30463e8bf39268b81dc36581a200349e6a7b,"executeShellCommand(java.lang.String,com.android.ddmlib.IShellOutputReceiver,int)",48521,130,130
326498,tests_wifitests_src_com_android_server_wifi_HalDeviceManagerTest.java,3.0,"@org.junit.Before public void before() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mTestLooper = new android.os.test.TestLooper(); mStatusOk = new android.hardware.wifi.V1_0.WifiStatus(); mStatusOk.code = android.hardware.wifi.V1_0.WifiStatusCode.SUCCESS; mStatusFail = new android.hardware.wifi.V1_0.WifiStatus(); mStatusFail.code = android.hardware.wifi.V1_0.WifiStatusCode.ERROR_UNKNOWN; when(mServiceManagerMock.linkToDeath(any(IHwBinder.DeathRecipient.class), anyLong())).thenReturn(true); when(mServiceManagerMock.registerForNotifications(anyString(), anyString(), any(IServiceNotification.Stub.class))).thenReturn(true); when(mWifiMock.linkToDeath(any(IHwBinder.DeathRecipient.class), anyLong())).thenReturn(true); when(mWifiMock.registerEventCallback(any(android.hardware.wifi.V1_0.IWifiEventCallback.class))).thenReturn(mStatusOk); when(mWifiMock.start()).thenReturn(mStatusOk); when(mWifiMock.stop()).thenReturn(mStatusOk); mInOrder = inOrder(mServiceManagerMock, mWifiMock, mManagerStatusCallbackMock); mDut = new com.android.server.wifi.HalDeviceManagerTest.HalDeviceManagerSpy(); executeAndValidateInitializationSequence(); }",b88f1424a2c3b41a1cb40809de151ee4b8c1163f,"@org.junit.Before public void before() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mTestLooper = new android.os.test.TestLooper(); mStatusOk = getStatus(WifiStatusCode.SUCCESS); mStatusFail = getStatus(WifiStatusCode.ERROR_UNKNOWN); when(mServiceManagerMock.linkToDeath(any(IHwBinder.DeathRecipient.class), anyLong())).thenReturn(true); when(mServiceManagerMock.registerForNotifications(anyString(), anyString(), any(IServiceNotification.Stub.class))).thenReturn(true); when(mWifiMock.linkToDeath(any(IHwBinder.DeathRecipient.class), anyLong())).thenReturn(true); when(mWifiMock.registerEventCallback(any(android.hardware.wifi.V1_0.IWifiEventCallback.class))).thenReturn(mStatusOk); when(mWifiMock.start()).thenReturn(mStatusOk); when(mWifiMock.stop()).thenReturn(mStatusOk); mDut = new com.android.server.wifi.HalDeviceManagerTest.HalDeviceManagerSpy(); executeAndValidateInitializationSequence(); }",7f441a84ba188e9b7c2046e6a5b8a106812fd9f1,before(),before(),8,4,"@org.junit.Before public void before() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mTestLooper = new android.os.test.TestLooper(); mStatusOk = getStatus(WifiStatusCode.SUCCESS); mStatusFail = getStatus(WifiStatusCode.ERROR_UNKNOWN); when(mServiceManagerMock.linkToDeath(any(IHwBinder.DeathRecipient.class), anyLong())).thenReturn(true); when(mServiceManagerMock.registerForNotifications(anyString(), anyString(), any(IServiceNotification.Stub.class))).thenReturn(true); when(mWifiMock.linkToDeath(any(IHwBinder.DeathRecipient.class), anyLong())).thenReturn(true); when(mWifiMock.registerEventCallback(any(android.hardware.wifi.V1_0.IWifiEventCallback.class))).thenReturn(mStatusOk); when(mWifiMock.start()).thenReturn(mStatusOk); when(mWifiMock.stop()).thenReturn(mStatusOk); mDut = new com.android.server.wifi.HalDeviceManagerTest.HalDeviceManagerSpy(); }",b923264c61d84e09f6d5b66087289d41326b6eb0,before(),389646,256,250
159811,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_VariantManager.java,16.0,"private com.android.builder.model.SigningConfig createSigningOverride() { if ((((project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_STORE_FILE)) && (project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_STORE_PASSWORD))) && (project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_KEY_ALIAS))) && (project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_KEY_PASSWORD))) { com.android.build.gradle.internal.dsl.SigningConfig signingConfigDsl = new com.android.build.gradle.internal.dsl.SigningConfig(""externalOverride""); java.util.Map<java.lang.String, ?> props = project.getProperties(); signingConfigDsl.setStoreFile(new java.io.File(((java.lang.String) (props.get(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_STORE_FILE))))); signingConfigDsl.setStorePassword(((java.lang.String) (props.get(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_STORE_PASSWORD)))); signingConfigDsl.setKeyAlias(((java.lang.String) (props.get(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_KEY_ALIAS)))); signingConfigDsl.setKeyPassword(((java.lang.String) (props.get(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_KEY_PASSWORD)))); if (project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_STORE_TYPE)) { signingConfigDsl.setStoreType(((java.lang.String) (props.get(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_STORE_TYPE)))); } return signingConfigDsl; } return null; }",1d36b177ffc39c27ed4adcf5ff692491456b7294,"private com.android.builder.model.SigningConfig createSigningOverride() { if ((((project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_STORE_FILE)) && (project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_STORE_PASSWORD))) && (project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_KEY_ALIAS))) && (project.hasProperty(com.android.builder.model.AndroidProject.PROPERTY_SIGNING_KEY_PASSWORD))) { com.android.build.gradle.internal.dsl.SigningConfig signingConfigDsl = new com.android.build.gradle.internal.dsl.SigningConfig(""externalOverride""); signingConfigDsl.setStoreFile(new java.io.File(com.android.build.gradle.AndroidGradleOptions.getSigningStoreFile(project))); signingConfigDsl.setStorePassword(com.android.build.gradle.AndroidGradleOptions.getSigningStorePassword(project)); signingConfigDsl.setKeyAlias(com.android.build.gradle.AndroidGradleOptions.getSigningKeyAlias(project)); signingConfigDsl.setKeyPassword(com.android.build.gradle.AndroidGradleOptions.getSigningKeyPassword(project)); java.lang.String storeType = com.android.build.gradle.AndroidGradleOptions.getSigningStoreType(project); if (storeType != null) { signingConfigDsl.setStoreType(storeType); } return signingConfigDsl; } return null; }",0613eb841bb0a73c980f762f74076ed7839db060,createSigningOverride(),createSigningOverride(),5,16,"private com.android.builder.model.SigningConfig createSigningOverride() { com.android.build.gradle.AndroidGradleOptions.SigningOptions signingOptions = com.android.build.gradle.AndroidGradleOptions.getSigningOptions(project); if (signingOptions != null) { com.android.build.gradle.internal.dsl.SigningConfig signingConfigDsl = new com.android.build.gradle.internal.dsl.SigningConfig(""externalOverride""); signingConfigDsl.setStoreFile(new java.io.File(signingOptions.storeFile)); signingConfigDsl.setStorePassword(signingOptions.keyPassword); signingConfigDsl.setKeyAlias(signingOptions.keyAlias); signingConfigDsl.setKeyPassword(signingOptions.keyPassword); if ((signingOptions.storeType) != null) { signingConfigDsl.setStoreType(signingOptions.storeType); } return signingConfigDsl; } return null; }",3e78c7407324c18946aa4287deebdd4b32498ffd,createSigningOverride(),279969,329,202
533768,core_java_android_net_IpSecAlgorithm.java,6.0,"private static boolean isTruncationLengthValid(java.lang.String algo, int truncLenBits) { switch (algo) { case android.net.IpSecAlgorithm.CRYPT_AES_CBC : return ((truncLenBits == 128) || (truncLenBits == 192)) || (truncLenBits == 256); case android.net.IpSecAlgorithm.AUTH_HMAC_MD5 : return (truncLenBits >= 96) && (truncLenBits <= 128); case android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 : return (truncLenBits >= 96) && (truncLenBits <= 160); case android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 : return (truncLenBits >= 96) && (truncLenBits <= 256); case android.net.IpSecAlgorithm.AUTH_HMAC_SHA384 : return (truncLenBits >= 192) && (truncLenBits <= 384); case android.net.IpSecAlgorithm.AUTH_HMAC_SHA512 : return (truncLenBits >= 256) && (truncLenBits <= 512); case android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM : return ((truncLenBits == 64) || (truncLenBits == 96)) || (truncLenBits == 128); default : return false; } }",504aa1332ecfa10763173b57c1799bb460bff82f,"private static boolean isValid(java.lang.String name, int length, int truncationLength) { java.util.function.IntPredicate isValidLength = android.net.IpSecAlgorithm.sAlgorithms.get(name); if (isValidLength == null) { android.util.Log.e(android.net.IpSecAlgorithm.TAG, ""Couldn't find a matching algorithm!""); return false; } return ((isValidLength.test(length)) && (isValidLength.test(truncationLength))) && (truncationLength <= length); }",90c83cab0f15dbd04af7025c999d5239e2b5d7f6,"isTruncationLengthValid(java.lang.String,int)","isValid(java.lang.String,int,int)",3,4,"private static void checkValidOrThrow(java.lang.String name, int keyLen, int truncLen) { boolean isValidLen = true; boolean isValidTruncLen = true; switch (name) { case android.net.IpSecAlgorithm.CRYPT_AES_CBC : isValidLen = ((keyLen == 128) || (keyLen == 192)) || (keyLen == 256); break; case android.net.IpSecAlgorithm.AUTH_HMAC_MD5 : isValidLen = keyLen == 128; isValidTruncLen = (truncLen >= 96) && (truncLen <= 128); break; case android.net.IpSecAlgorithm.AUTH_HMAC_SHA1 : isValidLen = keyLen == 160; isValidTruncLen = (truncLen >= 96) && (truncLen <= 160); break; case android.net.IpSecAlgorithm.AUTH_HMAC_SHA256 : isValidLen = keyLen == 256; isValidTruncLen = (truncLen >= 96) && (truncLen <= 256); break; case android.net.IpSecAlgorithm.AUTH_HMAC_SHA384 : isValidLen = keyLen == 384; isValidTruncLen = (truncLen >= 192) && (truncLen <= 384); break; case android.net.IpSecAlgorithm.AUTH_HMAC_SHA512 : isValidLen = keyLen == 512; isValidTruncLen = (truncLen >= 256) && (truncLen <= 512); break; case android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM : isValidLen = ((keyLen == (128 + 32)) || (keyLen == (192 + 32))) || (keyLen == (256 + 32)); break; default : throw new java.lang.IllegalArgumentException((""Couldn't find an algorithm: "" + name)); } if (!isValidLen) { throw new java.lang.IllegalArgumentException((""Invalid key material keyLength: "" + keyLen)); } if (!isValidTruncLen) { throw new java.lang.IllegalArgumentException((""Invalid truncation keyLength: "" + truncLen)); } }",bc7f3864c872945e58db04344ce169e816cbbff2,"checkValidOrThrow(java.lang.String,int,int)",288327,115,463
9029,libcore_luni_src_main_java_org_apache_harmony_luni_platform_PlatformAddressFactory.java,0.0,"public static org.apache.harmony.luni.platform.PlatformAddress on(int value, long size) { org.apache.harmony.luni.platform.PlatformAddress addr = (value == 0) ? PlatformAddress.NULL : new org.apache.harmony.luni.platform.PlatformAddress(value, size); return addr; }",4f671bc9a237e78fc5cecce2b6077a0435e982d8,"public static synchronized org.apache.harmony.luni.platform.PlatformAddress on(int value, long size) { if (value == 0) { return PlatformAddress.NULL; } int idx = value >> 5; int probe = 0; do { org.apache.harmony.luni.platform.PlatformAddress cachedObj = org.apache.harmony.luni.platform.PlatformAddressFactory.cache[((idx + probe) & ((org.apache.harmony.luni.platform.PlatformAddressFactory.CACHESIZE) - 1))]; if (cachedObj == null) { return org.apache.harmony.luni.platform.PlatformAddressFactory.cache[((idx + probe) & ((org.apache.harmony.luni.platform.PlatformAddressFactory.CACHESIZE) - 1))] = new org.apache.harmony.luni.platform.PlatformAddress(value, size); } if (((cachedObj.osaddr) == value) && ((cachedObj.size) == size)) { return cachedObj; } } while ((probe++) < (org.apache.harmony.luni.platform.PlatformAddressFactory.MAXPROBES) ); org.apache.harmony.luni.platform.PlatformAddressFactory.replIdx %= (org.apache.harmony.luni.platform.PlatformAddressFactory.MAXPROBES) + 1; return org.apache.harmony.luni.platform.PlatformAddressFactory.cache[((idx + ((org.apache.harmony.luni.platform.PlatformAddressFactory.replIdx)++)) & ((org.apache.harmony.luni.platform.PlatformAddressFactory.CACHESIZE) - 1))] = new org.apache.harmony.luni.platform.PlatformAddress(value, size); }",cf9a6b08af15e981922aefb991e9ec3619f88c84,"on(int,long)","on(int,long)",3,0,"public static synchronized org.apache.harmony.luni.platform.PlatformAddress on(int value, long size) { if (value == 0) { return PlatformAddress.NULL; } int idx = value >> 5; for (int probe = 0; probe < (org.apache.harmony.luni.platform.PlatformAddressFactory.MAX_PROBES); probe++) { org.apache.harmony.luni.platform.PlatformAddress cachedObj = org.apache.harmony.luni.platform.PlatformAddressFactory.cache[((idx + probe) & (org.apache.harmony.luni.platform.PlatformAddressFactory.CACHE_MASK))]; if (cachedObj == null) { return org.apache.harmony.luni.platform.PlatformAddressFactory.cache[((idx + probe) & (org.apache.harmony.luni.platform.PlatformAddressFactory.CACHE_MASK))] = new org.apache.harmony.luni.platform.PlatformAddress(value, size); } if (((cachedObj.osaddr) == value) && ((cachedObj.size) == size)) { return cachedObj; } } org.apache.harmony.luni.platform.PlatformAddressFactory.replacementIndex = ((org.apache.harmony.luni.platform.PlatformAddressFactory.replacementIndex) + 1) % (org.apache.harmony.luni.platform.PlatformAddressFactory.MAX_PROBES); return org.apache.harmony.luni.platform.PlatformAddressFactory.cache[((idx + (org.apache.harmony.luni.platform.PlatformAddressFactory.replacementIndex)) & (org.apache.harmony.luni.platform.PlatformAddressFactory.CACHE_MASK))] = new org.apache.harmony.luni.platform.PlatformAddress(value, size); }",9783cdd2588c657740f8a2e5f1a3418f9e767fe3,"on(int,long)",437965,416,420
81416,tests_tests_renderscript_src_android_renderscript_cts_TestCbrt.java,,,,"private void checkCbrtFloat3() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testCbrtFloat3(in, out); verifyResultsCbrtFloat3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCbrtFloat3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testCbrtFloat3(in, out); verifyResultsCbrtFloat3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCbrtFloat3: "" + (e.toString()))); } }",14839d63e0071aafd692f08b44c884b91e5df603,,checkCbrtFloat3(),9,9,"private void checkCbrtFloat3Float3() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, 6767891262043174748L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); script.forEach_testCbrtFloat3Float3(in, out); verifyResultsCbrtFloat3Float3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCbrtFloat3Float3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testCbrtFloat3Float3(in, out); verifyResultsCbrtFloat3Float3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCbrtFloat3Float3: "" + (e.toString()))); } }",08b350c86b526468748f3f9a1e98dc34bb988bc8,checkCbrtFloat3Float3(),142873,331,315
91995,luni_src_main_java_libcore_io_BlockGuardOs.java,6.0,"@java.lang.Override public int write(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws java.io.InterruptedIOException, libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); return os.write(fd, bytes, byteOffset, byteCount); }",8d1b13dd084f24787cb65c56b4565851f6065c2c,"@java.lang.Override public int write(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws android.os.ErrnoException, java.io.InterruptedIOException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); return os.write(fd, bytes, byteOffset, byteCount); }",6f19b6ace55764fa055cea4d1e8550bd4216230d,"write(java.io.FileDescriptor,byte[],int,int)","write(java.io.FileDescriptor,byte[],int,int)",3,7,"@java.lang.Override public int write(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws android.system.ErrnoException, java.io.InterruptedIOException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); return os.write(fd, bytes, byteOffset, byteCount); }",919201693db4b6c23c62f0f3e8c20fe76de872ab,"write(java.io.FileDescriptor,byte[],int,int)",170354,77,77
558960,src_java_com_android_internal_telephony_uicc_UiccCard.java,30.0,"public void iccExchangeSimIO(int fileID, int command, int p1, int p2, int p3, java.lang.String pathID, android.os.Message response) { mCi.iccIO(command, fileID, pathID, p1, p2, p3, null, null, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_SIM_IO_DONE, response)); }",0f658cc4e196ab400023dd65199a06bd55f8ce0f,"public void iccExchangeSimIO(int fileID, int command, int p1, int p2, int p3, java.lang.String pathID, android.os.Message response) { if ((!(com.android.internal.telephony.uicc.UiccCard.UICC_REFACTOR)) || ((mUiccProfile) == null)) { mCi.iccIO(command, fileID, pathID, p1, p2, p3, null, null, mHandler.obtainMessage(com.android.internal.telephony.uicc.UiccCard.EVENT_SIM_IO_DONE, response)); } else { if ((mUiccProfile) != null) { mUiccProfile.iccExchangeSimIO(fileID, command, p1, p2, p3, pathID, response); } } }",71ac1903e656c1c1bcd37ce439b7115c59cd5396,"iccExchangeSimIO(int,int,int,int,int,java.lang.String,android.os.Message)","iccExchangeSimIO(int,int,int,int,int,java.lang.String,android.os.Message)",8,18,"@java.lang.Deprecated public void iccExchangeSimIO(int fileID, int command, int p1, int p2, int p3, java.lang.String pathID, android.os.Message response) { if ((mUiccProfile) != null) { mUiccProfile.iccExchangeSimIO(fileID, command, p1, p2, p3, pathID, response); } else { loge(""iccExchangeSimIO Failed!""); } }",6a5fc7562287a3b806c6e675b680e146dd30e329,"iccExchangeSimIO(int,int,int,int,int,java.lang.String,android.os.Message)",47900,179,101
601742,src_com_android_bluetooth_pbap_BluetoothPbapUtils.java,4.0,"static void loadAllContacts(android.content.Context context, android.os.Handler handler) { if (com.android.bluetooth.pbap.BluetoothPbapUtils.V) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, ""Loading Contacts ...""); } java.lang.String[] projection = new java.lang.String[]{ android.provider.ContactsContract.Data.CONTACT_ID, android.provider.ContactsContract.Data.DATA1, android.provider.ContactsContract.Data.MIMETYPE }; com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = com.android.bluetooth.pbap.BluetoothPbapUtils.fetchAndSetContacts(context, handler, projection, null, null, true); if ((com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts) < 0) { com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = 0; return; } com.android.bluetooth.pbap.BluetoothPbapUtils.sContactsLoaded = true; }",d99596b1395c2bfbffc6f780427877b99186f060,"static void loadAllContacts(android.content.Context context, android.os.Handler handler) { if (com.android.bluetooth.pbap.BluetoothPbapUtils.V) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, ""Loading Contacts ...""); } java.lang.String[] projection = new java.lang.String[]{ android.provider.ContactsContract.Data.CONTACT_ID, android.provider.ContactsContract.Data.DATA1, android.provider.ContactsContract.Data.MIMETYPE }; com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = com.android.bluetooth.pbap.BluetoothPbapUtils.fetchAndSetContacts(context, handler, projection, null, null, true); if ((com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts) < 0) { com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = 0; return; } handler.sendMessage(handler.obtainMessage(BluetoothPbapService.LOAD_CONTACTS)); }",25a483f4acd0916679730959d2dcf899106001e3,"loadAllContacts(android.content.Context,android.os.Handler)","loadAllContacts(android.content.Context,android.os.Handler)",8,4,"static void loadAllContacts(android.content.Context context, android.os.Handler handler) { if (com.android.bluetooth.pbap.BluetoothPbapUtils.V) { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapUtils.TAG, ""Loading Contacts ...""); } java.lang.String[] projection = new java.lang.String[]{ android.provider.ContactsContract.Data.CONTACT_ID, android.provider.ContactsContract.Data.DATA1, android.provider.ContactsContract.Data.MIMETYPE }; com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = com.android.bluetooth.pbap.BluetoothPbapUtils.fetchAndSetContacts(context, handler, projection, null, null, true); if ((com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts) < 0) { com.android.bluetooth.pbap.BluetoothPbapUtils.sTotalContacts = 0; return; } handler.sendMessage(handler.obtainMessage(BluetoothPbapService.CONTACTS_LOADED)); }",f343b20b503f07089c3f2bee3cdaa1d16246e316,"loadAllContacts(android.content.Context,android.os.Handler)",276626,241,242
253791,luni_src_main_java_libcore_io_ForwardingOs.java,84.0,public android.system.StructStatVfs statvfs(java.lang.String path) throws android.system.ErrnoException { return os.statvfs(path); },7e082dc4ac6a7becbbfe511cefd1aea826e921bd,public libcore.io.StructStatVfs statvfs(java.lang.String path) throws libcore.io.ErrnoException { return os.statvfs(path); },593d9a8da2339695c6af90cfa8be08307d8b6eb7,statvfs(java.lang.String),statvfs(java.lang.String),8,81,public android.system.StructStatVfs statvfs(java.lang.String path) throws android.system.ErrnoException { return os.statvfs(path); },7e082dc4ac6a7becbbfe511cefd1aea826e921bd,statvfs(java.lang.String),494735,38,36
253791,luni_src_main_java_libcore_io_Posix.java,131.0,"public native void setxattr(java.lang.String path, java.lang.String name, byte[] value, int flags) throws android.system.ErrnoException;",4d0558715ea81aa0802e91604d9cbb3b82109c23,"public native void setxattr(java.lang.String path, java.lang.String name, byte[] value, int flags) throws libcore.io.ErrnoException;",a424ea4b3722373d959971dbe6e35d6bda827753,"setxattr(java.lang.String,java.lang.String,byte[],int)","setxattr(java.lang.String,java.lang.String,byte[],int)",8,130,"public native void setxattr(java.lang.String path, java.lang.String name, byte[] value, int flags) throws android.system.ErrnoException;",4d0558715ea81aa0802e91604d9cbb3b82109c23,"setxattr(java.lang.String,java.lang.String,byte[],int)",494509,38,37
302978,dalvik_src_main_java_dalvik_system_DexPathList.java,15.0,"public java.lang.String findNativeLibrary(java.lang.String name) { maybeInit(); if (isDirectory) { java.lang.String path = new java.io.File(dir, name).getPath(); if (libcore.io.IoUtils.canOpenReadOnly(path)) { return path; } } else if ((urlHandler) != null) { java.lang.String entryName = new java.io.File(dir, name).getPath(); if (urlHandler.isEntryStored(entryName)) { return ((zip.getPath()) + (dalvik.system.DexPathList.zipSeparator)) + entryName; } } return null; }",6a657ca363447f24d39c58a358148f1f8b4a87be,"public java.lang.String findNativeLibrary(java.lang.String name) { maybeInit(); if ((zipDir) == null) { java.lang.String entryPath = new java.io.File(path, name).getPath(); if (libcore.io.IoUtils.canOpenReadOnly(entryPath)) { return entryPath; } } else if ((urlHandler) != null) { java.lang.String entryName = new java.io.File(zipDir, name).getPath(); if (urlHandler.isEntryStored(entryName)) { return ((path.getPath()) + (dalvik.system.DexPathList.zipSeparator)) + entryName; } } return null; }",c065a14b1fe4aef18fb33846c1e3fa142aa4f44f,findNativeLibrary(java.lang.String),findNativeLibrary(java.lang.String),3,15,"public java.lang.String findNativeLibrary(java.lang.String name) { maybeInit(); if ((zipDir) == null) { java.lang.String entryPath = new java.io.File(path, name).getPath(); if (libcore.io.IoUtils.canOpenReadOnly(entryPath)) { return entryPath; } } else if ((urlHandler) != null) { java.lang.String entryName = ((zipDir) + '/') + name; if (urlHandler.isEntryStored(entryName)) { return ((path.getPath()) + (dalvik.system.DexPathList.zipSeparator)) + entryName; } } return null; }",3bd83ef5352eaa895b9c2af1dd8abf71b697702b,findNativeLibrary(java.lang.String),126713,152,148
106962,jack_src_com_android_jack_lookup_JNodeLookup.java,2.0,@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedEnum getEnum(@javax.annotation.Nonnull java.lang.String typeName) throws com.android.jack.ir.ast.JTypeLookupException { return ((com.android.jack.ir.ast.JDefinedEnum) (getType(typeName))); },602c7dd4a781ff36ffd0368e91345fd25721eec9,@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedEnum getEnum(@javax.annotation.Nonnull java.lang.String typeName) throws com.android.jack.ir.ast.JTypeLookupException { com.android.jack.ir.ast.JType type = getType(typeName); if (type instanceof com.android.jack.ir.ast.JDefinedEnum) { return ((com.android.jack.ir.ast.JDefinedEnum) (type)); } else { throw new com.android.jack.ir.ast.JTypeLookupException(typeName); } },05d77f4212edf4944f032851cb73263952f6e286,getEnum(java.lang.String),getEnum(java.lang.String),4,2,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedEnum getEnum(@javax.annotation.Nonnull java.lang.String typeName) throws com.android.jack.ir.ast.JTypeLookupException { com.android.jack.ir.ast.JType type = getType(typeName); if (type instanceof com.android.jack.ir.ast.JDefinedEnum) { return ((com.android.jack.ir.ast.JDefinedEnum) (type)); } else { throw new com.android.jack.ir.ast.IncompatibleJTypeLookupException(type, com.android.jack.ir.ast.JDefinedEnum.class); } }",9b57fc2bac11830fc41439d48891466c97db9e92,getEnum(java.lang.String),511827,139,156
630846,src_java_com_android_internal_telephony_ims_ImsResolver.java,47.0,"private void updateBoundCarrierServices(int subId) { int slotId = mSubscriptionManagerProxy.getSlotIndex(subId); java.lang.String newPackageName = mCarrierConfigManager.getConfigForSubId(subId).getString(CarrierConfigManager.KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING, null); if ((slotId != (android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX)) && (slotId < (mNumSlots))) { java.lang.String oldPackageName = mCarrierServices[slotId]; mCarrierServices[slotId] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""Carrier Config updated, binding new ImsService""); unbindImsService(getImsServiceInfoFromCache(oldPackageName)); bindNewImsService(getImsServiceInfoFromCache(newPackageName)); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } } }",8d93d6f2a142f6746c99f853ffdfe53d2e4a3736,"private void updateBoundCarrierServices(int subId) { int slotId = mSubscriptionManagerProxy.getSlotIndex(subId); java.lang.String newPackageName = mCarrierConfigManager.getConfigForSubId(subId).getString(CarrierConfigManager.KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING, null); if ((slotId != (android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX)) && (slotId < (mNumSlots))) { java.lang.String oldPackageName = mCarrierServices[slotId]; mCarrierServices[slotId] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""Carrier Config updated, binding new ImsService""); unbindImsService(getImsServiceInfoFromCache(oldPackageName)); com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo newInfo = getImsServiceInfoFromCache(newPackageName); if (newInfo.featureFromMetadata) { bindNewImsService(newInfo); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } else { } } } }",2889ec7f9406ecc9d1f19618e08ae1575bc40196,updateBoundCarrierServices(int),updateBoundCarrierServices(int),10,58,"private void updateBoundCarrierServices(int slotId) { int subId = mSubscriptionManagerProxy.getSubId(slotId); java.lang.String newPackageName = mCarrierConfigManager.getConfigForSubId(subId).getString(CarrierConfigManager.KEY_CONFIG_IMS_PACKAGE_OVERRIDE_STRING, null); if ((slotId > (android.telephony.SubscriptionManager.INVALID_SIM_SLOT_INDEX)) && (slotId < (mNumSlots))) { java.lang.String oldPackageName = mCarrierServices[slotId]; mCarrierServices[slotId] = newPackageName; if (!(android.text.TextUtils.equals(newPackageName, oldPackageName))) { android.util.Log.i(com.android.internal.telephony.ims.ImsResolver.TAG, ""Carrier Config updated, binding new ImsService""); unbindImsService(getImsServiceInfoFromCache(oldPackageName)); com.android.internal.telephony.ims.ImsResolver.ImsServiceInfo newInfo = getImsServiceInfoFromCache(newPackageName); if ((newInfo == null) || (newInfo.featureFromMetadata)) { bindImsService(newInfo); updateImsServiceFeatures(getImsServiceInfoFromCache(mDeviceService)); } else { scheduleQueryForFeatures(newInfo); } } } }",eab778dbef9cab2693bf09ee8e4a07415d0450b2,updateBoundCarrierServices(int),156007,276,291
54744,luni_src_main_java_java_nio_DoubleArrayBuffer.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static java.nio.DoubleArrayBuffer copy(java.nio.DoubleArrayBuffer other, int markOfOther, boolean isReadOnly) { java.nio.DoubleArrayBuffer buf = new java.nio.DoubleArrayBuffer(other.capacity(), other.backingArray, other.arrayOffset, isReadOnly); buf.limit = other.limit; buf.position = other.position(); buf.mark = markOfOther; return buf; }",3134f6be863a97521d8f935967e6daff73c5cca7,,"copy(java.nio.DoubleArrayBuffer,int,boolean)",6,7,"private static java.nio.DoubleArrayBuffer copy(java.nio.DoubleArrayBuffer other, int markOfOther, boolean isReadOnly) { java.nio.DoubleArrayBuffer buf = new java.nio.DoubleArrayBuffer(other.capacity(), other.backingArray, other.arrayOffset, isReadOnly); buf.limit = other.limit; buf.position = other.position(); buf.mark = markOfOther; return buf; }",4fd2dafd202196c5a7be4f03ddc2bda5e4f5519a,"copy(java.nio.DoubleArrayBuffer,int,boolean)",358651,88,89
329566,src_java_com_android_ims_ImsManager.java,81.0,"public void addRegistrationListener(int serviceClass, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable(); if (listener == null) { throw new java.lang.NullPointerException(""listener can't be null""); } try { mImsService.addRegistrationListener(mPhoneId, serviceClass, createRegistrationListenerProxy(serviceClass, listener)); } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException(""addRegistrationListener()"", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } }",a35ddbd303d6843a2b2f79ee27f774444f0f2e91,"public void addRegistrationListener(int serviceClass, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable(); if (listener == null) { throw new java.lang.NullPointerException(""listener can't be null""); } try { mImsServiceProxy.addRegistrationListener(0, createRegistrationListenerProxy(serviceClass, listener)); } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException(""addRegistrationListener()"", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } }",8bcd5857aa7b58eebaa5f88c6ef5272a9fd0c769,"addRegistrationListener(int,com.android.ims.ImsConnectionStateListener)","addRegistrationListener(int,com.android.ims.ImsConnectionStateListener)",9,39,"public void addRegistrationListener(int serviceClass, com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { checkAndThrowExceptionIfServiceUnavailable(); if (listener == null) { throw new java.lang.NullPointerException(""listener can't be null""); } try { com.android.ims.ImsManager.ImsRegistrationListenerProxy p = createRegistrationListenerProxy(serviceClass, listener); mRegistrationListeners.add(p); mImsServiceProxy.addRegistrationListener(ImsFeature.MMTEL, p); } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException(""addRegistrationListener()"", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } }",2ca0bafc7c5492e98a8eb9a5673c077a7e5baf5f,"addRegistrationListener(int,com.android.ims.ImsConnectionStateListener)",178099,139,175
116501,src_main_java_org_conscrypt_OpenSSLECPointContext.java,4.0,"public static org.conscrypt.OpenSSLECPointContext getInstance(int curveType, org.conscrypt.OpenSSLECGroupContext group, java.security.spec.ECPoint javaPoint) { org.conscrypt.OpenSSLECPointContext point = new org.conscrypt.OpenSSLECPointContext(group, org.conscrypt.NativeCrypto.EC_POINT_new(group.getContext())); org.conscrypt.NativeCrypto.EC_POINT_set_affine_coordinates(group.getContext(), point.getContext(), javaPoint.getAffineX().toByteArray(), javaPoint.getAffineY().toByteArray()); return point; }",b3a248bd8d1e6900f8e7c4a747386df7970dbdd3,"public static org.conscrypt.OpenSSLECPointContext getInstance(int curveType, org.conscrypt.OpenSSLECGroupContext group, java.security.spec.ECPoint javaPoint) { org.conscrypt.OpenSSLECPointContext point = new org.conscrypt.OpenSSLECPointContext(group, org.conscrypt.NativeCrypto.EC_POINT_new(group.getNativeRef())); org.conscrypt.NativeCrypto.EC_POINT_set_affine_coordinates(group.getNativeRef(), point.getNativeRef(), javaPoint.getAffineX().toByteArray(), javaPoint.getAffineY().toByteArray()); return point; }",e387830842d718092f4a8a9d51efacf5ffcb6fd9,"getInstance(int,org.conscrypt.OpenSSLECGroupContext,java.security.spec.ECPoint)","getInstance(int,org.conscrypt.OpenSSLECGroupContext,java.security.spec.ECPoint)",3,4,"public static org.conscrypt.OpenSSLECPointContext getInstance(int curveType, org.conscrypt.OpenSSLECGroupContext group, java.security.spec.ECPoint javaPoint) { org.conscrypt.OpenSSLECPointContext point = new org.conscrypt.OpenSSLECPointContext(group, new org.conscrypt.NativeRef.EC_POINT(org.conscrypt.NativeCrypto.EC_POINT_new(group.getNativeRef()))); org.conscrypt.NativeCrypto.EC_POINT_set_affine_coordinates(group.getNativeRef(), point.getNativeRef(), javaPoint.getAffineX().toByteArray(), javaPoint.getAffineY().toByteArray()); return point; }",56c5cc896c4f2c19a83c0c8f41e9d19b68942e80,"getInstance(int,org.conscrypt.OpenSSLECGroupContext,java.security.spec.ECPoint)",57571,145,159
36273,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_configuration_ConfigurationComposite.java,113.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig getSelectedDeviceConfig() { return ((com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig) (mPortraitRadio.getData())); },e15af5ab42bda5ac3e129b1e0d5e173d93755298,,getSelectedDeviceConfig(),6,116,com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig getSelectedDeviceConfig() { return ((com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig) (mOrientationCombo.getData())); },f87501ef2834157351d7dee72997bc4a1a2c3d33,getSelectedDeviceConfig(),295044,61,58
42984,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_configuration_ConfigurationChooser.java,,,,"private static java.lang.String getThemeLabel(java.lang.String theme, boolean brief) { theme = com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme(theme); if (brief) { int index = theme.lastIndexOf('.'); if (index < ((theme.length()) - 1)) { return theme.substring((index + 1)); } } return theme; }",b8640edc58ed8d977797d30d8b520b3072aa345d,,"getThemeLabel(java.lang.String,boolean)",2,52,"public static java.lang.String getThemeLabel(java.lang.String theme, boolean brief) { theme = com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme(theme); if (brief) { int index = theme.lastIndexOf('.'); if (index < ((theme.length()) - 1)) { return theme.substring((index + 1)); } } return theme; }",007c89382e2939e9d80759d2a50669281e9717aa,"getThemeLabel(java.lang.String,boolean)",311779,91,91
139390,src_com_google_gct_idea_debugger_CloudStackFrame.java,,,,"@java.lang.Override public void computeChildren(@org.jetbrains.annotations.NotNull com.google.gct.idea.debugger.XCompositeNode node) { final com.google.gct.idea.debugger.XValueChildrenList list = new com.google.gct.idea.debugger.XValueChildrenList(); java.util.List<com.google.api.services.debugger.model.Variable> arguments = myFrame.getArguments(); if ((arguments != null) && ((arguments.size()) > 0)) { for (com.google.api.services.debugger.model.Variable variable : arguments) { if (!(com.google.api.client.repackaged.com.google.common.base.Strings.isNullOrEmpty(variable.getName()))) { list.add(variable.getName(), new com.google.gct.idea.debugger.CloudStackFrame.MyValue(variable, myVariableTable)); } } } java.util.List<com.google.api.services.debugger.model.Variable> locals = myFrame.getLocals(); if ((locals != null) && ((locals.size()) > 0)) { for (com.google.api.services.debugger.model.Variable variable : locals) { if (!(com.google.api.client.repackaged.com.google.common.base.Strings.isNullOrEmpty(variable.getName()))) { list.add(variable.getName(), new com.google.gct.idea.debugger.CloudStackFrame.MyValue(variable, myVariableTable)); } } } node.addChildren(list, true); }",539b430d014a21fd7d93ee9c597b27bb86cf6c19,,computeChildren(com.google.gct.idea.debugger.XCompositeNode),30,0,"@java.lang.Override public void computeChildren(@org.jetbrains.annotations.NotNull com.google.gct.idea.debugger.XCompositeNode node) { final com.google.gct.idea.debugger.XValueChildrenList list = new com.google.gct.idea.debugger.XValueChildrenList(); java.util.List<com.google.api.services.debugger.model.Variable> arguments = myFrame.getArguments(); if ((arguments != null) && ((arguments.size()) > 0)) { for (com.google.api.services.debugger.model.Variable variable : arguments) { if (!(com.google.api.client.repackaged.com.google.common.base.Strings.isNullOrEmpty(variable.getName()))) { list.add(variable.getName(), new com.google.gct.idea.debugger.CloudStackFrame.MyValue(variable, myVariableTable)); } } } java.util.List<com.google.api.services.debugger.model.Variable> locals = myFrame.getLocals(); if ((locals != null) && ((locals.size()) > 0)) { for (com.google.api.services.debugger.model.Variable variable : locals) { if (!(com.google.api.client.repackaged.com.google.common.base.Strings.isNullOrEmpty(variable.getName()))) { list.add(variable.getName(), new com.google.gct.idea.debugger.CloudStackFrame.MyValue(variable, myVariableTable)); } } } if (((myEvaluatedExpressions) != null) && ((myEvaluatedExpressions.size()) > 0)) { list.addTopGroup(new com.google.gct.idea.debugger.CloudStackFrame.CustomWatchGroup()); } node.addChildren(list, true); }",7bae49844bfbab1fb0ff529522c7f7a060ce1749,computeChildren(com.google.gct.idea.debugger.XCompositeNode),250756,357,407
160206,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_tasks_ValidateSigningTask.java,,,,"@org.gradle.api.tasks.TaskAction public void validate() throws AndroidLocation.AndroidLocationException, com.android.ide.common.signing.KeytoolException { java.io.File storeFile = signingConfig.getStoreFile(); if (storeFile == null) { throw new org.gradle.api.tasks.StopExecutionException((""Keystore file not set for signing config "" + (signingConfig.getName()))); } if (!(storeFile.exists())) { if (com.android.ide.common.signing.KeystoreHelper.defaultDebugKeystoreLocation().equals(storeFile.getAbsolutePath())) { checkState(signingConfig.isSigningReady(), ""Debug signing config not ready.""); getLogger().info(""Creating default debug keystore at {}"", storeFile.getAbsolutePath()); if (!(com.android.ide.common.signing.KeystoreHelper.createDebugStore(signingConfig.getStoreType(), signingConfig.getStoreFile(), signingConfig.getStorePassword(), signingConfig.getKeyPassword(), signingConfig.getKeyAlias(), getILogger()))) { throw new java.lang.RuntimeException(""Unable to recreate missing debug keystore.""); } } else { throw new java.lang.IllegalArgumentException(java.lang.String.format(""Keystore file %s not found for signing config '%s'."", storeFile.getAbsolutePath(), signingConfig.getName())); } } }",c4aed015becb7d978c5280f9f651e4e6fe3e110e,,validate(),4,3,"@org.gradle.api.tasks.TaskAction public void validate() throws AndroidLocation.AndroidLocationException, com.android.ide.common.signing.KeytoolException { java.io.File storeFile = signingConfig.getStoreFile(); if (storeFile == null) { throw new java.lang.IllegalArgumentException((""Keystore file not set for signing config "" + (signingConfig.getName()))); } if (!(storeFile.exists())) { if (com.android.ide.common.signing.KeystoreHelper.defaultDebugKeystoreLocation().equals(storeFile.getAbsolutePath())) { checkState(signingConfig.isSigningReady(), ""Debug signing config not ready.""); getLogger().info(""Creating default debug keystore at {}"", storeFile.getAbsolutePath()); if (!(com.android.ide.common.signing.KeystoreHelper.createDebugStore(signingConfig.getStoreType(), signingConfig.getStoreFile(), signingConfig.getStorePassword(), signingConfig.getKeyPassword(), signingConfig.getKeyAlias(), getILogger()))) { throw new org.gradle.tooling.BuildException(""Unable to recreate missing debug keystore."", null); } } else { throw new java.lang.IllegalArgumentException(java.lang.String.format(""Keystore file %s not found for signing config '%s'."", storeFile.getAbsolutePath(), signingConfig.getName())); } } }",7b314e62236b892f744bafa893cd2d7605a21d47,validate(),403929,283,284
333684,tools_ahat_test_InstanceUtilsTest.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void asStringExactMaxEmbeddedZero() throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump(); com.android.tools.perflib.heap.Instance str = ((com.android.tools.perflib.heap.Instance) (dump.getDumpedThing(""embeddedZero""))); assertEquals(""embedded\u0000"", com.android.ahat.InstanceUtils.asString(str, 9)); }",61edb9cb039012a2f611f2c57be6e2667b6de8bd,,asStringExactMaxEmbeddedZero(),4,4,"@org.junit.Test public void asStringExactMaxEmbeddedZero() throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump(); com.android.tools.perflib.heap.Instance str = ((com.android.tools.perflib.heap.Instance) (dump.getDumpedThing(""embeddedZero""))); assertEquals(""embedded\u0000..."", com.android.ahat.InstanceUtils.asString(str, 12)); }",feca32800b5f5186743d9223ca05269480bd5265,asStringExactMaxEmbeddedZero(),126205,113,113
60841,core_java_android_text_format_DateFormat.java,21.0,"private static java.lang.String getDateFormatStringForSetting(android.content.Context context, java.lang.String value) { if (value != null) { int month = value.indexOf('M'); int day = value.indexOf('d'); int year = value.indexOf('y'); if (((month >= 0) && (day >= 0)) && (year >= 0)) { java.lang.String template = context.getString(R.string.numeric_date_template); if ((year < month) && (year < day)) { if (month < day) { value = java.lang.String.format(template, ""yyyy"", ""MM"", ""dd""); } else { value = java.lang.String.format(template, ""yyyy"", ""dd"", ""MM""); } } else if (month < day) { if (day < year) { value = java.lang.String.format(template, ""MM"", ""dd"", ""yyyy""); } else { value = java.lang.String.format(template, ""MM"", ""yyyy"", ""dd""); } } else { if (month < year) { value = java.lang.String.format(template, ""dd"", ""MM"", ""yyyy""); } else { value = java.lang.String.format(template, ""dd"", ""yyyy"", ""MM""); } } return value; } } value = context.getString(R.string.numeric_date_format); return value; }",39a355271973cae5167abe6c05599011eab4ef4b,"private static java.lang.String getDateFormatStringForSetting(android.content.Context context, java.lang.String value) { if (value != null) { int month = value.indexOf('M'); int day = value.indexOf('d'); int year = value.indexOf('y'); if (((month >= 0) && (day >= 0)) && (year >= 0)) { java.lang.String template = context.getString(R.string.numeric_date_template); if ((year < month) && (year < day)) { if (month < day) { value = java.lang.String.format(template, ""yyyy"", ""MM"", ""dd""); } else { value = java.lang.String.format(template, ""yyyy"", ""dd"", ""MM""); } } else if (month < day) { if (day < year) { value = java.lang.String.format(template, ""MM"", ""dd"", ""yyyy""); } else { value = java.lang.String.format(template, ""MM"", ""yyyy"", ""dd""); } } else { if (month < year) { value = java.lang.String.format(template, ""dd"", ""MM"", ""yyyy""); } else { value = java.lang.String.format(template, ""dd"", ""yyyy"", ""MM""); } } return value; } } libcore.icu.LocaleData d = libcore.icu.LocaleData.get(context.getResources().getConfiguration().locale); value = d.getDateFormat(java.text.DateFormat.SHORT); if (!(value.contains(""yyyy""))) { final int iLen = value.length(); final int i = (value.lastIndexOf('y')) + 1; value = ((value.substring(0, i)) + ""yy"") + (i < iLen ? value.substring(i, iLen) : """"); } return value; }",59f9412532ddf8f0bd267ae166a2fce8fbe61344,"getDateFormatStringForSetting(android.content.Context,java.lang.String)","getDateFormatStringForSetting(android.content.Context,java.lang.String)",2,21,"private static java.lang.String getDateFormatStringForSetting(android.content.Context context, java.lang.String value) { if (value != null) { int month = value.indexOf('M'); int day = value.indexOf('d'); int year = value.indexOf('y'); if (((month >= 0) && (day >= 0)) && (year >= 0)) { java.lang.String template = context.getString(R.string.numeric_date_template); if ((year < month) && (year < day)) { if (month < day) { value = java.lang.String.format(template, ""yyyy"", ""MM"", ""dd""); } else { value = java.lang.String.format(template, ""yyyy"", ""dd"", ""MM""); } } else if (month < day) { if (day < year) { value = java.lang.String.format(template, ""MM"", ""dd"", ""yyyy""); } else { value = java.lang.String.format(template, ""MM"", ""yyyy"", ""dd""); } } else { if (month < year) { value = java.lang.String.format(template, ""dd"", ""MM"", ""yyyy""); } else { value = java.lang.String.format(template, ""dd"", ""yyyy"", ""MM""); } } return value; } } libcore.icu.LocaleData d = libcore.icu.LocaleData.get(context.getResources().getConfiguration().locale); return d.shortDateFormat4; }",900d5e507f02e05222b9309429d4a104fce04935,"getDateFormatStringForSetting(android.content.Context,java.lang.String)",438805,411,333
15685,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_configuration_ConfigurationComposite.java,25.0,boolean setData(java.lang.String data) { java.lang.String[] values = data.split(com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigState.SEP); if ((values.length) == 4) { for (com.android.ide.eclipse.adt.internal.sdk.LayoutDevice d : mDeviceList) { if (d.getName().equals(values[0])) { device = d; com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config = device.getConfigs().get(values[1]); if (config != null) { configName = values[1]; locale = new com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier[2]; java.lang.String[] locales = values[2].split(com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigState.SEP_LOCALE); if ((locales.length) >= 2) { if ((locales[0].length()) > 0) { locale[0] = new com.android.ide.eclipse.adt.internal.resources.configurations.LanguageQualifier(locales[0]); } if ((locales[1].length()) > 0) { locale[1] = new com.android.ide.eclipse.adt.internal.resources.configurations.RegionQualifier(locales[1]); } } theme = values[3]; return true; } } } } return false; },3e4fea03b0b155787805f453ce6cff524d4ccc12,boolean setData(java.lang.String data) { java.lang.String[] values = data.split(com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigState.SEP); if ((values.length) == 6) { for (com.android.ide.eclipse.adt.internal.sdk.LayoutDevice d : mDeviceList) { if (d.getName().equals(values[0])) { device = d; com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config = device.getConfigs().get(values[1]); if (config != null) { configName = values[1]; locale = new com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier[2]; java.lang.String[] locales = values[2].split(com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigState.SEP_LOCALE); if ((locales.length) >= 2) { if ((locales[0].length()) > 0) { locale[0] = new com.android.ide.eclipse.adt.internal.resources.configurations.LanguageQualifier(locales[0]); } if ((locales[1].length()) > 0) { locale[1] = new com.android.ide.eclipse.adt.internal.resources.configurations.RegionQualifier(locales[1]); } } theme = values[3]; dock = com.android.sdklib.resources.DockMode.getEnum(values[4]); night = com.android.sdklib.resources.NightMode.getEnum(values[5]); return true; } } } } return false; },2e967eecec78b55bbd3f19bfdc9da3f83f657136,setData(java.lang.String),setData(java.lang.String),4,27,boolean setData(java.lang.String data) { java.lang.String[] values = data.split(com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigState.SEP); if ((values.length) == 6) { for (com.android.ide.eclipse.adt.internal.sdk.LayoutDevice d : mDeviceList) { if (d.getName().equals(values[0])) { device = d; com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration config = device.getConfigs().get(values[1]); if (config != null) { configName = values[1]; locale = new com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier[2]; java.lang.String[] locales = values[2].split(com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationComposite.ConfigState.SEP_LOCALE); if ((locales.length) >= 2) { if ((locales[0].length()) > 0) { locale[0] = new com.android.ide.eclipse.adt.internal.resources.configurations.LanguageQualifier(locales[0]); } if ((locales[1].length()) > 0) { locale[1] = new com.android.ide.eclipse.adt.internal.resources.configurations.RegionQualifier(locales[1]); } } theme = values[3]; dock = com.android.sdklib.resources.DockMode.getEnum(values[4]); if ((dock) == null) { dock = com.android.sdklib.resources.DockMode.NONE; } night = com.android.sdklib.resources.NightMode.getEnum(values[5]); if ((night) == null) { night = com.android.sdklib.resources.NightMode.NOTNIGHT; } return true; } } } } return false; },1959c8fbfc59dc9e3fa28ebe8c29c8bdbae3ae2a,setData(java.lang.String),451982,367,424
51249,luni_src_main_java_java_util_Collections.java,212.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,static int secondaryHash(java.lang.Object key) { return java.util.Collections.secondaryHash(key.hashCode()); },db8a2ff824a20f922338e3b58e91dfe477578b5d,,secondaryHash(java.lang.Object),3,83,public static int secondaryHash(java.lang.Object key) { return java.util.Collections.secondaryHash(key.hashCode()); },02dd99a4a63937b880f3d438f53745f359a7fa81,secondaryHash(java.lang.Object),186102,28,29
175742,jack_src_com_android_jack_backend_dex_rop_CodeItemBuilder.java,1.0,"@javax.annotation.Nonnull private com.android.jack.dx.dex.code.DalvCode createCode(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method, @javax.annotation.Nonnull com.android.jack.dx.rop.code.RopMethod ropMethod) { com.android.jack.dx.dex.DexOptions options = new com.android.jack.dx.dex.DexOptions(); options.forceJumbo = forceJumbo; int paramSize = getParameterWordCount(method); int positionListKind; com.android.jack.dx.rop.code.LocalVariableInfo lvInfo; if (emitLocalDebugInfo) { lvInfo = com.android.jack.dx.rop.code.LocalVariableExtractor.extract(ropMethod); } else { lvInfo = null; } if (emitLineNumberTable) { positionListKind = com.android.jack.dx.dex.code.PositionList.LINES; } else { positionListKind = com.android.jack.dx.dex.code.PositionList.NONE; } return com.android.jack.dx.dex.code.RopTranslator.translate(ropMethod, positionListKind, lvInfo, paramSize, options); }",25c18893256113553852e4abde7018a15c0a9d34,"@javax.annotation.Nonnull private com.android.jack.dx.dex.code.DalvCode createCode(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method, @javax.annotation.Nonnull com.android.jack.dx.rop.code.RopMethod ropMethod) { com.android.jack.dx.dex.DexOptions options = new com.android.jack.dx.dex.DexOptions(); options.forceJumbo = forceJumbo; int paramSize = getParameterWordSize(method); int positionListKind; com.android.jack.dx.rop.code.LocalVariableInfo lvInfo; if (emitLocalDebugInfo) { lvInfo = com.android.jack.dx.rop.code.LocalVariableExtractor.extract(ropMethod); } else { lvInfo = null; } if (emitLineNumberTable) { positionListKind = com.android.jack.dx.dex.code.PositionList.LINES; } else { positionListKind = com.android.jack.dx.dex.code.PositionList.NONE; } return com.android.jack.dx.dex.code.RopTranslator.translate(ropMethod, positionListKind, lvInfo, paramSize, options); }",f47b76d3f86d2dfe1ea6ea246fc7d529e8573746,"createCode(com.android.jack.ir.ast.JMethod,com.android.jack.dx.rop.code.RopMethod)","createCode(com.android.jack.ir.ast.JMethod,com.android.jack.dx.rop.code.RopMethod)",6,1,"@javax.annotation.Nonnull private com.android.jack.dx.dex.code.DalvCode createCode(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method, @javax.annotation.Nonnull com.android.jack.dx.rop.code.RopMethod ropMethod) { com.android.jack.dx.dex.DexOptions options = new com.android.jack.dx.dex.DexOptions(); options.forceJumbo = forceJumbo; int paramSize = getParameterWordCount(method); int positionListKind; com.android.jack.dx.rop.code.LocalVariableInfo lvInfo; if (emitLocalDebugInfo) { lvInfo = com.android.jack.dx.rop.code.LocalVariableExtractor.extract(ropMethod); } else { lvInfo = null; } if (emitLineNumberTable) { positionListKind = com.android.jack.dx.dex.code.PositionList.LINES; } else { positionListKind = com.android.jack.dx.dex.code.PositionList.NONE; } return com.android.jack.dx.dex.code.RopTranslator.translate(ropMethod, positionListKind, lvInfo, paramSize, options); }",25c18893256113553852e4abde7018a15c0a9d34,"createCode(com.android.jack.ir.ast.JMethod,com.android.jack.dx.rop.code.RopMethod)",224533,277,276
434739,telephony_java_android_telephony_TelephonyManager.java,115.0,public java.lang.String getIsimImpi() { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) return null; return info.getIsimImpi(); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } },50aa3cd280e2c5b4def143d11c043e0d42823c25,public java.lang.String getIsimImpi() { return getIsimImpi(getSubId()); },08b58dcb3d510680749e196c7879e284ff9df8f8,getIsimImpi(),getIsimImpi(),2,114,public java.lang.String getIsimImpi() { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) return null; return info.getIsimImpi(getSubId()); } catch (android.os.RemoteException ex) { return null; } catch (java.lang.NullPointerException ex) { return null; } },01fb877457fbefb0486677c8cee5a12e0f83a7d1,getIsimImpi(),427394,24,84
330971,tests_wifitests_src_com_android_server_wifi_hotspot2_PasspointEventHandlerTest.java,3.0,"@org.junit.Test public void anqpRequestCompletedWithError() { mHandler.notifyANQPDone(com.android.server.wifi.hotspot2.PasspointEventHandlerTest.BSSID, false); verify(mWifiNative, never()).scanResult(anyString()); verify(mCallbacks).onANQPResponse(com.android.server.wifi.hotspot2.PasspointEventHandlerTest.BSSID, null); }",367451ff263c551264925e5e7d261990a8c5feb1,"@org.junit.Test public void anqpRequestCompletedWithError() { mHandler.notifyANQPDone(com.android.server.wifi.hotspot2.PasspointEventHandlerTest.BSSID, false); verify(mCallbacks).onANQPResponse(com.android.server.wifi.hotspot2.PasspointEventHandlerTest.BSSID, null); }",5da6f19c108edb0e67871ba73323e812aa10938f,anqpRequestCompletedWithError(),anqpRequestCompletedWithError(),17,3,"@org.junit.Test public void anqpRequestCompletedWithError() { mHandler.notifyANQPDone(com.android.server.wifi.hotspot2.PasspointEventHandlerTest.BSSID, false); verify(mWifiNative, never()).scanResult(anyString()); verify(mCallbacks).onANQPResponse(com.android.server.wifi.hotspot2.PasspointEventHandlerTest.BSSID, null); }",367451ff263c551264925e5e7d261990a8c5feb1,anqpRequestCompletedWithError(),79617,77,90
583630,src_com_android_bips_LocalDiscoverySessionInfo.java,,,,"private void load() { if (!(mCacheFile.exists())) return; try (android.util.JsonReader reader = new android.util.JsonReader(new java.io.FileReader(mCacheFile))) { reader.beginObject(); while (reader.hasNext()) { switch (reader.nextName()) { case com.android.bips.LocalDiscoverySessionInfo.NAME_KNOWN_GOOD : mKnownGood.addAll(loadPrinterIds(reader)); break; case com.android.bips.LocalDiscoverySessionInfo.NAME_PRIORITY : mPriority.addAll(loadPrinterIds(reader)); break; default : reader.skipValue(); break; } } reader.endObject(); } catch (java.io.IOException e) { android.util.Log.w(com.android.bips.LocalDiscoverySessionInfo.TAG, (""Failed to read info from "" + (com.android.bips.LocalDiscoverySessionInfo.CACHE_FILE)), e); } }",803f0a742740335c4fba12dcaccc013d296f6230,,load(),4,0,"private void load() { if (!(mCacheFile.exists())) { return; } try (android.util.JsonReader reader = new android.util.JsonReader(new java.io.FileReader(mCacheFile))) { reader.beginObject(); while (reader.hasNext()) { switch (reader.nextName()) { case com.android.bips.LocalDiscoverySessionInfo.NAME_KNOWN_GOOD : mKnownGood.addAll(loadPrinterIds(reader)); break; case com.android.bips.LocalDiscoverySessionInfo.NAME_PRIORITY : mPriority.addAll(loadPrinterIds(reader)); break; default : reader.skipValue(); break; } } reader.endObject(); } catch (java.io.IOException e) { android.util.Log.w(com.android.bips.LocalDiscoverySessionInfo.TAG, (""Failed to read info from "" + (com.android.bips.LocalDiscoverySessionInfo.CACHE_FILE)), e); } }",d3a762d84578f99ff2e558a40b8cbef223e4db10,load(),33214,211,213
128670,nci_src_com_android_nfc_dhimpl_NativeNfcManager.java,25.0,private void notifyHostEmuActivated() { mListener.onHostCardEmulationActivated(); },d4ece76c4d5202df06e81dd00bedf463d221fbb7,private void notifyHostEmuActivated(int type) { mListener.onHostCardEmulationActivated(type); },c22fec81af108d991c33125e9b39f03d7a850aa9,notifyHostEmuActivated(),notifyHostEmuActivated(int),10,17,private void notifyHostEmuActivated(int technology) { mListener.onHostCardEmulationActivated(technology); },81d61414d347e71366032ebb7886aaf4bbd3188a,notifyHostEmuActivated(int),148444,24,26
188703,jack_tests_com_android_jack_TestTools.java,17.0,"public static java.io.File createTempDir(@javax.annotation.Nonnull java.lang.String prefix) throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotSetPermissionException, com.android.sched.util.file.WrongPermissionException { final java.io.File tmp = com.android.sched.util.file.Files.createTempDir(((com.android.jack.TestTools.TMP_PREFIX) + prefix)); java.lang.Runtime.getRuntime().addShutdownHook(new java.lang.Thread() { @java.lang.Override public void run() { try { com.android.sched.util.file.FileUtils.deleteDir(tmp); } catch (java.io.IOException e) { java.lang.System.err.println(e.getMessage()); } } }); return tmp; }",1e9db00df1a7be0d0c4aacf4553fcca0cf13f558,"public static java.io.File createTempDir(@javax.annotation.Nonnull java.lang.String prefix) throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotSetPermissionException, com.android.sched.util.file.CannotUnsetPermissionException { final java.io.File tmp = com.android.sched.util.file.Files.createTempDir(((com.android.jack.TestTools.TMP_PREFIX) + prefix)); java.lang.Runtime.getRuntime().addShutdownHook(new java.lang.Thread() { @java.lang.Override public void run() { try { com.android.sched.util.file.FileUtils.deleteDir(tmp); } catch (java.io.IOException e) { java.lang.System.err.println(e.getMessage()); } } }); return tmp; }",8600e0fadb57a807eb74dee57de6d13570ec8316,createTempDir(java.lang.String),createTempDir(java.lang.String),3,17,"public static java.io.File createTempDir(@javax.annotation.Nonnull java.lang.String prefix) throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotSetPermissionException { final java.io.File tmp = com.android.sched.util.file.Files.createTempDir(((com.android.jack.TestTools.TMP_PREFIX) + prefix)); java.lang.Runtime.getRuntime().addShutdownHook(new java.lang.Thread() { @java.lang.Override public void run() { try { com.android.sched.util.file.FileUtils.deleteDir(tmp); } catch (java.io.IOException e) { java.lang.System.err.println(e.getMessage()); } } }); return tmp; }",1c3dd1dcb282aed9b6b8450ff5910de390bdc6d2,createTempDir(java.lang.String),89413,188,172
443034,services_core_java_com_android_server_connectivity_NetworkNotificationManager.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private int priority(int eventId) { switch (eventId) { case com.android.internal.logging.MetricsProto.MetricsEvent.NOTIFICATION_NETWORK_SIGN_IN : return 4; case com.android.internal.logging.MetricsProto.MetricsEvent.NOTIFICATION_NETWORK_NO_INTERNET : return 3; case com.android.internal.logging.MetricsProto.MetricsEvent.NOTIFICATION_NETWORK_SWITCH : return 2; case com.android.internal.logging.MetricsProto.MetricsEvent.NOTIFICATION_NETWORK_LOST_INTERNET : return 1; default : return 0; } },988ae0130e8603e7f0a7c6fdbe054a59547679fe,,priority(int),4,8,private static int priority(com.android.server.connectivity.NetworkNotificationManager.NotificationType t) { if (t == null) { return 0; } switch (t) { case SIGN_IN : return 4; case NO_INTERNET : return 3; case NETWORK_SWITCH : return 2; case LOST_INTERNET : return 1; default : return 0; } },e64d9fb6de6d5db0bafe85132e4724316b1b8cdd,priority(com.android.server.connectivity.NetworkNotificationManager$NotificationType),171503,125,82
253791,luni_src_main_java_libcore_io_Os.java,88.0,public java.net.SocketAddress getsockname(java.io.FileDescriptor fd) throws android.system.ErrnoException;,1b15e1a96b8ab6acbec8c32580b089594f9fe883,public java.net.SocketAddress getsockname(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;,edf2dc5b2dac3e72af89695a3734391dab38d2ab,getsockname(java.io.FileDescriptor),getsockname(java.io.FileDescriptor),8,85,public java.net.SocketAddress getsockname(java.io.FileDescriptor fd) throws android.system.ErrnoException;,1b15e1a96b8ab6acbec8c32580b089594f9fe883,getsockname(java.io.FileDescriptor),494660,27,26
98035,apps_CtsVerifier_src_com_android_cts_verifier_streamquality_StreamingVideoActivity.java,6.0,"@java.lang.Override protected void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.pass_fail_list); setPassFailButtonClickListeners(); setInfoResources(R.string.streaming_video, R.string.streaming_video_info, (-1)); android.widget.TextView empty = ((android.widget.TextView) (findViewById(android.R.id.empty))); empty.setText(R.string.sv_no_data); getPassButton().setEnabled(false); setTestListAdapter(getStreamAdapter()); }",c2b62e35e5b1512e99dbb80bc16dd197ef6f6a1c,"@java.lang.Override protected void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.pass_fail_list); setPassFailButtonClickListeners(); setInfoResources(R.string.streaming_video, R.string.streaming_video_info, (-1)); android.widget.TextView empty = ((android.widget.TextView) (findViewById(android.R.id.empty))); empty.setText(R.string.sv_no_data); getPassButton().setEnabled(false); try { setTestListAdapter(getStreamAdapter()); } catch (java.lang.InterruptedException e) { e.printStackTrace(); } }",0c1a11f17c078bdd8759e8c2b9207795b4bf537a,onCreate(android.os.Bundle),onCreate(android.os.Bundle),2,7,"@java.lang.Override protected void onCreate(android.os.Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.pass_fail_list); setPassFailButtonClickListeners(); setInfoResources(R.string.streaming_video, R.string.streaming_video_info, (-1)); android.widget.TextView empty = ((android.widget.TextView) (findViewById(android.R.id.empty))); empty.setText(R.string.sv_no_data); getPassButton().setEnabled(false); setTestListAdapter(getStreamAdapter()); }",c2b62e35e5b1512e99dbb80bc16dd197ef6f6a1c,onCreate(android.os.Bundle),420480,148,129
54932,core_java_android_net_http_HttpResponseCache.java,7.0,@java.lang.Override public void trackResponse(java.net.ResponseSource source) { delegate.trackResponse(source); },ce7b8f9312075680f6156118afae37a941e07386,@java.lang.Override public void trackResponse(com.android.okhttp.ResponseSource source) { super.delegate.trackResponse(source); },0c2f5e915d8455239b93a6f5773c6b5b138ee78d,trackResponse(java.net.ResponseSource),trackResponse(com.android.okhttp.ResponseSource),4,5,@java.lang.Override public void trackResponse(com.android.okhttp.ResponseSource source) { delegate.trackResponse(source); },6207920c0dff8190c59852fc4f6fd1d8bb3eb30b,trackResponse(com.android.okhttp.ResponseSource),247557,32,30
336363,luni_src_test_java_libcore_java_util_CalendarBuilderTest.java,,,,@org.junit.Test(expected = java.lang.NullPointerException.class) public void test_setFields_null() { builder.setFields(null); },258e30eea4defc11391f309047cfb1f7827a699f,,test_setFields_null(),3,24,@org.junit.Test(expected = java.lang.NullPointerException.class) public void test_setFields_null() { new java.util.Calendar.Builder().setFields(null); },393b4f206fbc014434d1658545ae762fb937e611,test_setFields_null(),98481,36,43
367259,core_java_android_net_IpSecManager.java,1.0,"public android.net.IpSecManager.SecurityParameterIndex reserveSecurityParameterIndex(int direction, java.net.InetAddress remoteAddress, int requestedSpi) throws android.net.IpSecManager.ResourceUnavailableException, android.net.IpSecManager.SpiUnavailableException { return new android.net.IpSecManager.SecurityParameterIndex(mService, direction, remoteAddress, requestedSpi); }",e61f5c1bbde9f0eb18e83e86f0697c6acb1c5da5,"public android.net.IpSecManager.SecurityParameterIndex reserveSecurityParameterIndex(int direction, java.net.InetAddress remoteAddress) throws android.net.IpSecManager.ResourceUnavailableException { try { return new android.net.IpSecManager.SecurityParameterIndex(mService, direction, remoteAddress, android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX); } catch (android.net.IpSecManager.SpiUnavailableException impossible) { return null; } }",84512a3908a33946be93f771483da337360b69a5,"reserveSecurityParameterIndex(int,java.net.InetAddress,int)","reserveSecurityParameterIndex(int,java.net.InetAddress)",5,13,"public android.net.IpSecManager.SecurityParameterIndex reserveSecurityParameterIndex(int direction, java.net.InetAddress remoteAddress) throws android.net.IpSecManager.ResourceUnavailableException { try { return new android.net.IpSecManager.SecurityParameterIndex(mService, direction, remoteAddress, android.net.IpSecManager.INVALID_SECURITY_PARAMETER_INDEX); } catch (android.net.IpSecManager.SpiUnavailableException unlikely) { throw new android.net.IpSecManager.ResourceUnavailableException(""No SPIs available""); } }",c2d75546623b9ee4bb9afb2ccaafd336ecbe29bf,"reserveSecurityParameterIndex(int,java.net.InetAddress)",459156,103,119
20567,tests_tests_permission_src_android_permission_cts_NoCallPermissionTest.java,2.0,"@android.test.suitebuilder.annotation.SmallTest public void testCallVoicemail() { try { android.content.Intent intent = new android.content.Intent(""android.intent.action.CALL_PRIVILEGED"", android.net.Uri.fromParts(""voicemail"", """", null)); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); mContext.startActivity(intent); fail(""startActivity(Intent.ACTION_CALL_PRIVILEGED) did not throw SecurityException as expected""); } catch (java.lang.SecurityException e) { } }",eefb2181c2fd1f857a81110bc8effd9a2bb90128,"@android.test.suitebuilder.annotation.SmallTest public void testCallVoicemail() { android.content.pm.PackageManager packageManager = getContext().getPackageManager(); if (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEPHONY)) { try { android.content.Intent intent = new android.content.Intent(""android.intent.action.CALL_PRIVILEGED"", android.net.Uri.fromParts(""voicemail"", """", null)); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); mContext.startActivity(intent); fail(""startActivity(Intent.ACTION_CALL_PRIVILEGED) did not throw SecurityException as expected""); } catch (java.lang.SecurityException e) { } } else { return; } }",a20e04ee69675cca3eb2b5d99453897431d4cf1a,testCallVoicemail(),testCallVoicemail(),2,2,"@android.test.suitebuilder.annotation.SmallTest public void testCallVoicemail() { android.content.pm.PackageManager packageManager = getContext().getPackageManager(); if (packageManager.hasSystemFeature(PackageManager.FEATURE_TELEPHONY)) { try { android.content.Intent intent = new android.content.Intent(""android.intent.action.CALL_PRIVILEGED"", android.net.Uri.fromParts(""voicemail"", """", null)); intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK); mContext.startActivity(intent); fail(""startActivity(Intent.ACTION_CALL_PRIVILEGED) did not throw SecurityException as expected""); } catch (java.lang.SecurityException e) { } } }",85ed32254278df31bab14394ca5821c69baff998,testCallVoicemail(),49937,164,159
533100,telephony_java_android_telephony_TelephonyManager.java,249.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.android.ims.internal.IImsMMTelFeature getImsEmergencyMMTelFeatureAndListen(int slotIndex, com.android.ims.internal.IImsServiceFeatureListener callback) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony != null) { return telephony.getEmergencyMMTelFeatureAndListen(slotIndex, callback); } } catch (android.os.RemoteException e) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, (""getImsEmergencyMMTelFeatureAndListen, RemoteException: "" + (e.getMessage()))); } return null; }",1a507be25840ad53b8c8107cd762bbd5ec985d89,,"getImsEmergencyMMTelFeatureAndListen(int,com.android.ims.internal.IImsServiceFeatureListener)",5,306,"@android.annotation.Nullable public com.android.ims.internal.IImsMMTelFeature getImsEmergencyMMTelFeatureAndListen(int slotIndex, com.android.ims.internal.IImsServiceFeatureCallback callback) { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); if (telephony != null) { return telephony.getEmergencyMMTelFeatureAndListen(slotIndex, callback); } } catch (android.os.RemoteException e) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, (""getImsEmergencyMMTelFeatureAndListen, RemoteException: "" + (e.getMessage()))); } return null; }",525b1ef06b5755f6a7120772c1ee969b782930f1,"getImsEmergencyMMTelFeatureAndListen(int,com.android.ims.internal.IImsServiceFeatureCallback)",517376,159,165
83276,src_main_java_org_conscrypt_OpenSSLSignature.java,9.0,"@java.lang.Override protected byte[] engineSign() throws java.security.SignatureException { if ((key) == null) { throw new java.security.SignatureException(""Need DSA or RSA or EC private key""); } try { byte[] buffer = new byte[org.conscrypt.NativeCrypto.EVP_PKEY_size(key.getPkeyContext())]; int bytesWritten = org.conscrypt.NativeCrypto.EVP_SignFinal(ctx, buffer, 0, key.getPkeyContext()); byte[] signature = new byte[bytesWritten]; java.lang.System.arraycopy(buffer, 0, signature, 0, bytesWritten); return signature; } catch (java.lang.Exception ex) { throw new java.security.SignatureException(ex); } finally { destroyContextIfExists(); } }",9d7436b316785ad9120ca8c62fc48e2613c075d5,"@java.lang.Override protected byte[] engineSign() throws java.security.SignatureException { if ((key) == null) { throw new java.security.SignatureException(""Need DSA or RSA or EC private key""); } final org.conscrypt.OpenSSLDigestContext ctx = this.ctx; try { byte[] buffer = new byte[org.conscrypt.NativeCrypto.EVP_PKEY_size(key.getPkeyContext())]; int bytesWritten = org.conscrypt.NativeCrypto.EVP_SignFinal(ctx.getContext(), buffer, 0, key.getPkeyContext()); byte[] signature = new byte[bytesWritten]; java.lang.System.arraycopy(buffer, 0, signature, 0, bytesWritten); return signature; } catch (java.lang.Exception ex) { throw new java.security.SignatureException(ex); } finally { resetContext(); } }",ac4943a75e4a2b791e4932ddaf99bb4561ca715c,engineSign(),engineSign(),5,10,"@java.lang.Override protected byte[] engineSign() throws java.security.SignatureException { if ((key) == null) { throw new java.security.SignatureException(""Need DSA or RSA or EC private key""); } final org.conscrypt.OpenSSLDigestContext ctxLocal = ctx; try { byte[] buffer = new byte[org.conscrypt.NativeCrypto.EVP_PKEY_size(key.getPkeyContext())]; int bytesWritten = org.conscrypt.NativeCrypto.EVP_SignFinal(ctxLocal, buffer, 0, key.getPkeyContext()); byte[] signature = new byte[bytesWritten]; java.lang.System.arraycopy(buffer, 0, signature, 0, bytesWritten); return signature; } catch (java.lang.Exception ex) { throw new java.security.SignatureException(ex); } finally { resetContext(); } }",288c626cd463f7a69873b77a2be75a5ec17a88e6,engineSign(),254276,191,189
654568,src_com_android_bluetooth_btservice_MetricsLogger.java,,,,"public static void dumpProto(com.android.bluetooth.BluetoothMetricsProto.BluetoothLog.Builder metricsBuilder) { synchronized(com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts) { com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.forEach(( key, value) -> metricsBuilder.addProfileUsageStats(com.android.bluetooth.BluetoothMetricsProto.ProfileUsageStats.newBuilder().setProfileId(key).setNumTimesConnected(value).build())); com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.clear(); } }",4993f16aaab13c7fd2dc592a3e52710343b93158,,dumpProto(com.android.bluetooth.BluetoothMetricsProto.BluetoothLog$Builder),18,0,"public static void dumpProto(com.android.bluetooth.BluetoothMetricsProto.BluetoothLog.Builder metricsBuilder) { synchronized(com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts) { com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.forEach(( key, value) -> metricsBuilder.addProfileConnectionStats(com.android.bluetooth.BluetoothMetricsProto.ProfileConnectionStats.newBuilder().setProfileId(key).setNumTimesConnected(value).build())); com.android.bluetooth.btservice.MetricsLogger.sProfileConnectionCounts.clear(); } }",901016ccebbad6ae6c5ff01ecc2a0748c98ce70c,dumpProto(com.android.bluetooth.BluetoothMetricsProto.BluetoothLog$Builder),135773,129,129
309130,services_core_java_com_android_server_pm_ShortcutPackageInfo.java,3.0,"public void saveToXml(org.xmlpull.v1.XmlSerializer out) throws java.io.IOException { out.startTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_ROOT); com.android.server.pm.ShortcutService.writeAttr(out, com.android.server.pm.ShortcutPackageInfo.ATTR_VERSION, mVersionCode); com.android.server.pm.ShortcutService.writeAttr(out, com.android.server.pm.ShortcutPackageInfo.ATTR_SHADOW, mIsShadow); for (int i = 0; i < (mSigHashes.size()); i++) { out.startTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_SIGNATURE); com.android.server.pm.ShortcutService.writeAttr(out, com.android.server.pm.ShortcutPackageInfo.ATTR_SIGNATURE_HASH, libcore.io.Base64.encode(mSigHashes.get(i))); out.endTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_SIGNATURE); } out.endTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_ROOT); }",8a7f8a1723c5d61ddda8d57a4e82a1c698968ed1,"public void saveToXml(org.xmlpull.v1.XmlSerializer out) throws java.io.IOException { out.startTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_ROOT); com.android.server.pm.ShortcutService.writeAttr(out, com.android.server.pm.ShortcutPackageInfo.ATTR_VERSION, mVersionCode); com.android.server.pm.ShortcutService.writeAttr(out, com.android.server.pm.ShortcutPackageInfo.ATTR_SHADOW, mIsShadow); for (int i = 0; i < (mSigHashes.size()); i++) { out.startTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_SIGNATURE); java.lang.String encoded = java.util.Base64.getEncoder().encodeToString(mSigHashes.get(i)); com.android.server.pm.ShortcutService.writeAttr(out, com.android.server.pm.ShortcutPackageInfo.ATTR_SIGNATURE_HASH, encoded); out.endTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_SIGNATURE); } out.endTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_ROOT); }",cd1ad45e3a6cd0cc9600239030c79b2c21773a4f,saveToXml(org.xmlpull.v1.XmlSerializer),saveToXml(org.xmlpull.v1.XmlSerializer),3,3,"public void saveToXml(org.xmlpull.v1.XmlSerializer out) throws java.io.IOException { out.startTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_ROOT); com.android.server.pm.ShortcutService.writeAttr(out, com.android.server.pm.ShortcutPackageInfo.ATTR_VERSION, mVersionCode); com.android.server.pm.ShortcutService.writeAttr(out, com.android.server.pm.ShortcutPackageInfo.ATTR_SHADOW, mIsShadow); for (int i = 0; i < (mSigHashes.size()); i++) { out.startTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_SIGNATURE); final java.lang.String encoded = java.util.Base64.getEncoder().encodeToString(mSigHashes.get(i)); com.android.server.pm.ShortcutService.writeAttr(out, com.android.server.pm.ShortcutPackageInfo.ATTR_SIGNATURE_HASH, encoded); out.endTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_SIGNATURE); } out.endTag(null, com.android.server.pm.ShortcutPackageInfo.TAG_ROOT); }",769dd144cd30a6748b6e0e760a98b5246c45cb91,saveToXml(org.xmlpull.v1.XmlSerializer),381601,264,265
281683,ojluni_src_main_java_java_io_ObjectOutputStream.java,103.0,"private void defaultWriteFields(java.lang.Object obj, java.io.ObjectStreamClass desc) throws java.io.IOException { desc.checkDefaultSerialize(); int primDataSize = desc.getPrimDataSize(); if (((primVals) == null) || ((primVals.length) < primDataSize)) { primVals = new byte[primDataSize]; } desc.getPrimFieldValues(obj, primVals); bout.write(primVals, 0, primDataSize, false); java.io.ObjectStreamField[] fields = desc.getFields(false); java.lang.Object[] objVals = new java.lang.Object[desc.getNumObjFields()]; int numPrimFields = (fields.length) - (objVals.length); desc.getObjFieldValues(obj, objVals); for (int i = 0; i < (objVals.length); i++) { if (java.io.ObjectOutputStream.extendedDebugInfo) { debugInfoStack.push(((((((""field (class \"""" + (desc.getName())) + ""\"", name: \"""") + (fields[(numPrimFields + i)].getName())) + ""\"", type: \"""") + (fields[(numPrimFields + i)].getType())) + ""\"")"")); } try { writeObject0(objVals[i], fields[(numPrimFields + i)].isUnshared()); } finally { if (java.io.ObjectOutputStream.extendedDebugInfo) { debugInfoStack.pop(); } } } }",748fe42c9d47d8d97d2fdde8164821d917ff3818,"private void defaultWriteFields(java.lang.Object obj, java.io.ObjectStreamClass desc) throws java.io.IOException { java.lang.Class<?> cl = desc.forClass(); if (((cl != null) && (obj != null)) && (!(cl.isInstance(obj)))) { throw new java.lang.ClassCastException(); } desc.checkDefaultSerialize(); int primDataSize = desc.getPrimDataSize(); if (((primVals) == null) || ((primVals.length) < primDataSize)) { primVals = new byte[primDataSize]; } desc.getPrimFieldValues(obj, primVals); bout.write(primVals, 0, primDataSize, false); java.io.ObjectStreamField[] fields = desc.getFields(false); java.lang.Object[] objVals = new java.lang.Object[desc.getNumObjFields()]; int numPrimFields = (fields.length) - (objVals.length); desc.getObjFieldValues(obj, objVals); for (int i = 0; i < (objVals.length); i++) { if (java.io.ObjectOutputStream.extendedDebugInfo) { debugInfoStack.push(((((((""field (class \"""" + (desc.getName())) + ""\"", name: \"""") + (fields[(numPrimFields + i)].getName())) + ""\"", type: \"""") + (fields[(numPrimFields + i)].getType())) + ""\"")"")); } try { writeObject0(objVals[i], fields[(numPrimFields + i)].isUnshared()); } finally { if (java.io.ObjectOutputStream.extendedDebugInfo) { debugInfoStack.pop(); } } } }",6b60c0af3dc09db84f06841fb0de2fd6d284bbc5,"defaultWriteFields(java.lang.Object,java.io.ObjectStreamClass)","defaultWriteFields(java.lang.Object,java.io.ObjectStreamClass)",2,103,"private void defaultWriteFields(java.lang.Object obj, java.io.ObjectStreamClass desc) throws java.io.IOException { desc.checkDefaultSerialize(); int primDataSize = desc.getPrimDataSize(); if (((primVals) == null) || ((primVals.length) < primDataSize)) { primVals = new byte[primDataSize]; } desc.getPrimFieldValues(obj, primVals); bout.write(primVals, 0, primDataSize, false); java.io.ObjectStreamField[] fields = desc.getFields(false); java.lang.Object[] objVals = new java.lang.Object[desc.getNumObjFields()]; int numPrimFields = (fields.length) - (objVals.length); desc.getObjFieldValues(obj, objVals); for (int i = 0; i < (objVals.length); i++) { if (java.io.ObjectOutputStream.extendedDebugInfo) { debugInfoStack.push(((((((""field (class \"""" + (desc.getName())) + ""\"", name: \"""") + (fields[(numPrimFields + i)].getName())) + ""\"", type: \"""") + (fields[(numPrimFields + i)].getType())) + ""\"")"")); } try { writeObject0(objVals[i], fields[(numPrimFields + i)].isUnshared()); } finally { if (java.io.ObjectOutputStream.extendedDebugInfo) { debugInfoStack.pop(); } } } }",748fe42c9d47d8d97d2fdde8164821d917ff3818,"defaultWriteFields(java.lang.Object,java.io.ObjectStreamClass)",311567,369,326
186130,jack-tests_tests_com_android_jack_java8_MethodRefTest.java,8.0,"@org.junit.Test public void testMethodRef005() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(METHODREF005).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",b250887b1fb868336a5eb4c9053c5e80001d4e20,"@org.junit.Test public void testMethodRef005() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(METHODREF005).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",94ba1bb5d0f56f6f06751382e96ecc2a78edea96,testMethodRef005(),testMethodRef005(),7,8,@org.junit.Test public void testMethodRef005() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(METHODREF005).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },ba6bd1cb04b694ea750506599f898c158bdd5870,testMethodRef005(),466392,79,53
429505,telephony_java_android_telephony_SmsManager.java,37.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void sendMultipartTextMessage(java.lang.String destinationAddress, java.lang.String scAddress, java.util.ArrayList<java.lang.String> parts, java.util.ArrayList<android.app.PendingIntent> sentIntents, java.util.ArrayList<android.app.PendingIntent> deliveryIntents, int priority, boolean isExpectMore, int validityPeriod) { sendMultipartTextMessageInternal(destinationAddress, scAddress, parts, sentIntents, deliveryIntents, true); }",83c2b95aa8014ac806dd17ebe36686f5b4e28267,,"sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,int,boolean,int)",6,49,"public void sendMultipartTextMessage(java.lang.String destinationAddress, java.lang.String scAddress, java.util.ArrayList<java.lang.String> parts, java.util.ArrayList<android.app.PendingIntent> sentIntents, java.util.ArrayList<android.app.PendingIntent> deliveryIntents, int priority, boolean expectMore, int validityPeriod) { sendMultipartTextMessageInternal(destinationAddress, scAddress, parts, sentIntents, deliveryIntents, true); }",a8762dbb935ce53e0690cc0ae9894b78d74bc01a,"sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,int,boolean,int)",100478,105,104
151667,sched_src_com_android_sched_util_file_InputZipFile.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@javax.annotation.Nonnegative public long getLastModified() { assert (file) != null; return file.lastModified(); },53002c74a21bfe2d075d8e802bf9aaaee091805a,,getLastModified(),4,0,public long getLastModified() { assert (file) != null; return file.lastModified(); },b32b14534d762ad706742a96bd36387f7291b1c7,getLastModified(),504697,25,19
88570,java_src_main_java_com_google_protobuf_nano_ExtendableMessageNano.java,3.0,@java.lang.Override public int getSerializedSize() { int size = 0; int unknownFieldCount = ((unknownFieldData) == null) ? 0 : unknownFieldData.size(); for (int i = 0; i < unknownFieldCount; i++) { com.google.protobuf.nano.UnknownFieldData unknownField = unknownFieldData.get(i); size += com.google.protobuf.nano.CodedOutputByteBufferNano.computeRawVarint32Size(unknownField.tag); size += unknownField.bytes.length; } cachedSize = size; return size; },78c0330f3bc206cdeed971cb82c85a0442f25e61,@java.lang.Override public int computeSerializedSize() { int size = 0; int unknownFieldCount = ((unknownFieldData) == null) ? 0 : unknownFieldData.size(); for (int i = 0; i < unknownFieldCount; i++) { com.google.protobuf.nano.UnknownFieldData unknownField = unknownFieldData.get(i); size += com.google.protobuf.nano.CodedOutputByteBufferNano.computeRawVarint32Size(unknownField.tag); size += unknownField.bytes.length; } return size; },1eb5638dde47ca48adb8aac0dcfa4b89898c80b3,getSerializedSize(),computeSerializedSize(),7,4,@java.lang.Override protected int computeSerializedSize() { int size = 0; int unknownFieldCount = ((unknownFieldData) == null) ? 0 : unknownFieldData.size(); for (int i = 0; i < unknownFieldCount; i++) { com.google.protobuf.nano.UnknownFieldData unknownField = unknownFieldData.get(i); size += com.google.protobuf.nano.CodedOutputByteBufferNano.computeRawVarint32Size(unknownField.tag); size += unknownField.bytes.length; } return size; },cec6a039a6047babe5799465d9187194167ecbdc,computeSerializedSize(),456785,120,120
530666,src_com_android_bluetooth_a2dp_StackEvent.java,,,,"private static java.lang.String eventTypeToString(int type) { switch (type) { case com.android.bluetooth.a2dp.StackEvent.EVENT_TYPE_NONE : return ""EVENT_TYPE_NONE""; case com.android.bluetooth.a2dp.StackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED : return ""EVENT_TYPE_CONNECTION_STATE_CHANGED""; case com.android.bluetooth.a2dp.StackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED : return ""EVENT_TYPE_AUDIO_STATE_CHANGED""; default : return ""EVENT_TYPE_UNKNOWN:"" + type; } }",203dbaa20ac6d17dc412baafdbc0fba43e7c5eec,,eventTypeToString(int),6,0,"private static java.lang.String eventTypeToString(int type) { switch (type) { case com.android.bluetooth.a2dp.A2dpStackEvent.EVENT_TYPE_NONE : return ""EVENT_TYPE_NONE""; case com.android.bluetooth.a2dp.A2dpStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED : return ""EVENT_TYPE_CONNECTION_STATE_CHANGED""; case com.android.bluetooth.a2dp.A2dpStackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED : return ""EVENT_TYPE_AUDIO_STATE_CHANGED""; default : return ""EVENT_TYPE_UNKNOWN:"" + type; } }",140e25f0c4aec4096a8ec9ae8b2526b9ab9b2a30,eventTypeToString(int),280648,139,148
548206,src_com_android_bluetooth_hfp_HeadsetService.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,android.bluetooth.BluetoothDevice getCurrentAudioDevice() { synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { if ((stateMachine.getAudioState()) == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) { return stateMachine.getDevice(); } } return null; } },a4cff85326293d5aa5fdb564e14986d3496bf4a6,,getCurrentAudioDevice(),34,55,private java.util.List<android.bluetooth.BluetoothDevice> getNonIdleAudioDevices() { java.util.ArrayList<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<>(); synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { if ((stateMachine.getAudioState()) != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) { devices.add(stateMachine.getDevice()); } } } return devices; },a78e1ef4131309ac86a5c6bdf6f6aecfe4ee81a1,getNonIdleAudioDevices(),210716,82,117
595619,src_java_com_android_internal_telephony_RadioConfig.java,,,,"private static java.lang.String requestToString(int request) { switch (request) { case com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_SLOT_STATUS : return ""GET_SLOT_STATUS""; default : return ""<unknown request>""; } }",02cd6902ebd9c884157f128a9ec799e3084677cb,,requestToString(int),5,9,"private static java.lang.String requestToString(int request) { switch (request) { case com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_SLOT_STATUS : return ""GET_SLOT_STATUS""; case com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_LOGICAL_TO_PHYSICAL_SLOT_MAPPING : return ""SET_LOGICAL_TO_PHYSICAL_SLOT_MAPPING""; default : return ""<unknown request>""; } }",77e7b7e5179e3769f521a2269574e3cde5655cee,requestToString(int),227245,64,117
229410,jack_src_com_android_jack_shrob_obfuscation_ObfuscationContextInfo.java,,,,"@java.lang.Override @javax.annotation.Nonnull public java.lang.String getMessage() { return ""Obfuscation: "" + (cause.getMessage()); }",75b9b7d5ea0b0449007a34e8ed399306253c28e1,,getMessage(),5,1,"@java.lang.Override @javax.annotation.Nonnull public java.lang.String getMessage() { return ((location.getDescription()) + "": Obfuscation: "") + (cause.getMessage()); }",c757c69256f74661c0756c041a17485359fc0f37,getMessage(),484162,35,45
81416,tests_tests_renderscript_src_android_renderscript_cts_TestAbs.java,,,,"private void checkAbsShort() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I16(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inValue, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U16(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testAbsShort(inValue, out); verifyResultsAbsShort(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAbsShort: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.U16(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAbsShort(inValue, out); verifyResultsAbsShort(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAbsShort: "" + (e.toString()))); } }",7ca5f23ddfe36a39655829009c20882f2d056e04,,checkAbsShort(),9,9,"private void checkAbsShortUshort() { android.renderscript.Allocation inValue = CreateRandomAllocation(mRS, Element.DataType.SIGNED_16, 1, 1129140707171517933L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_16, 1), android.renderscript.cts.INPUTSIZE); script.forEach_testAbsShortUshort(inValue, out); verifyResultsAbsShortUshort(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAbsShortUshort: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.UNSIGNED_16, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAbsShortUshort(inValue, out); verifyResultsAbsShortUshort(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAbsShortUshort: "" + (e.toString()))); } }",c7eef0c4aeeb637fd313d5756b8ef0b41c3ef0f6,checkAbsShortUshort(),143042,313,304
273215,core_java_android_os_ZygoteProcess.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void preloadPackageForAbi(java.lang.String packagePath, java.lang.String libsPath, java.lang.String abi) throws android.os.ZygoteStartFailedEx, java.io.IOException { android.os.ZygoteProcess.ZygoteState state = openZygoteSocketIfNeeded(abi); state.writer.write(""3""); state.writer.newLine(); state.writer.write(""--preload-package""); state.writer.newLine(); state.writer.write(packagePath); state.writer.newLine(); state.writer.write(libsPath); state.writer.newLine(); state.writer.flush(); }",0081d63b335db151360aa8ae09ae6d80e3a02cd1,,"preloadPackageForAbi(java.lang.String,java.lang.String,java.lang.String)",8,10,"public void preloadPackageForAbi(java.lang.String packagePath, java.lang.String libsPath, java.lang.String abi) throws android.os.ZygoteStartFailedEx, java.io.IOException { synchronized(mLock) { android.os.ZygoteProcess.ZygoteState state = openZygoteSocketIfNeeded(abi); state.writer.write(""3""); state.writer.newLine(); state.writer.write(""--preload-package""); state.writer.newLine(); state.writer.write(packagePath); state.writer.newLine(); state.writer.write(libsPath); state.writer.newLine(); state.writer.flush(); } }",9848f86641a8d07520464fd33130a0ac07e326c4,"preloadPackageForAbi(java.lang.String,java.lang.String,java.lang.String)",481573,147,154
310544,tests_wifitests_src_com_android_server_wifi_hotspot2_anqp_VenueNameElementTest.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@org.junit.Test public void parseBufferWithEmptyVenueName() throws java.lang.Exception { byte[] testData = getTestData(new java.lang.String[0]); java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocate(testData.length); buffer.put(testData); buffer.position(0); assertTrue(com.android.server.wifi.hotspot2.anqp.VenueNameElement.parse(buffer).getNames().isEmpty()); },7ea2c9f8fe734858e76f511f5a17d79b77e90127,,parseBufferWithEmptyVenueName(),6,2,@org.junit.Test public void parseBufferWithEmptyVenueName() throws java.lang.Exception { java.nio.ByteBuffer buffer = java.nio.ByteBuffer.wrap(getTestData(new java.lang.String[0])); assertTrue(com.android.server.wifi.hotspot2.anqp.VenueNameElement.parse(buffer).getNames().isEmpty()); },4cc8a5f31d2228dcc8ea625c2005eaece1decd27,parseBufferWithEmptyVenueName(),48815,99,78
591217,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static com.android.internal.telephony.uicc.euicc.OperatorId buildOperatorId(com.android.internal.telephony.uicc.asn1.Asn1Node node) throws com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException, com.android.internal.telephony.uicc.asn1.TagNotFoundException { byte[] gid1 = null; if (node.hasChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_1)) { gid1 = node.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_1).asBytes(); } byte[] gid2 = null; if (node.hasChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_2)) { gid2 = node.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_2).asBytes(); } return new com.android.internal.telephony.uicc.euicc.OperatorId(node.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_0).asBytes(), gid1, gid2); }",805f064987f4ce586215cb9a568fa8f261789dee,,buildOperatorId(com.android.internal.telephony.uicc.asn1.Asn1Node),5,27,"private static android.service.carrier.CarrierIdentifier buildCarrierIdentifier(com.android.internal.telephony.uicc.asn1.Asn1Node node) throws com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException, com.android.internal.telephony.uicc.asn1.TagNotFoundException { java.lang.String gid1 = null; if (node.hasChild(Tags.TAG_CTX_1)) { gid1 = com.android.internal.telephony.uicc.IccUtils.bytesToHexString(node.getChild(Tags.TAG_CTX_1).asBytes()); } java.lang.String gid2 = null; if (node.hasChild(Tags.TAG_CTX_2)) { gid2 = com.android.internal.telephony.uicc.IccUtils.bytesToHexString(node.getChild(Tags.TAG_CTX_2).asBytes()); } return new android.service.carrier.CarrierIdentifier(node.getChild(Tags.TAG_CTX_0).asBytes(), gid1, gid2); }",91584e72f9508490da5fb99b4ff2c163296268be,buildCarrierIdentifier(com.android.internal.telephony.uicc.asn1.Asn1Node),970,279,244
88521,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_Events_Breakpoint002Test.java,,,,"public void testInlinedReturnObjectArgument() { logWriter.println(""testInlinedReturnObjectArgument started""); testBreakpointIn(""breakpointReturnObjectArg""); logWriter.println(""testInlinedReturnObjectArgument done""); }",5365d0afd4e715f42a8ced65c42ea1b55efc2e2b,,testInlinedReturnObjectArgument(),3,4,"public void testInlinedReturnObjectArgument() { testBreakpointIn(""testInlinedReturnObjectArgument"", ""breakpointReturnObjectArg""); }",b5e3cbfac2c43a39227b23b6f7caa7a022b573d6,testInlinedReturnObjectArgument(),274233,47,29
649475,src_com_android_bluetooth_btservice_ActiveDeviceManager.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void setHearingAidActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ((""setHeraingAidActiveDevice("" + device) + "")"")); } final com.android.bluetooth.hearingaid.HearingAidService hearingAidService = mFactory.getHearingAidService(); if (hearingAidService == null) { return; } hearingAidService.setActiveDevice(device); mHearingAidActiveDevice = device; }",28de60064ddcecf8123619ddd7cccefa3e6ad313,,setHearingAidActiveDevice(android.bluetooth.BluetoothDevice),8,3,"private void setHearingAidActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ((""setHearingAidActiveDevice("" + device) + "")"")); } final com.android.bluetooth.hearingaid.HearingAidService hearingAidService = mFactory.getHearingAidService(); if (hearingAidService == null) { return; } if (!(hearingAidService.setActiveDevice(device))) { return; } mHearingAidActiveDevice = device; }",91adfe269e394d5c1085d41291b6ecddbcddf028,setHearingAidActiveDevice(android.bluetooth.BluetoothDevice),438632,148,153
161251,benchmarks_src_benchmarks_regression_CollatorBenchmark.java,,,,"public void timeCollatorTertiary(int reps) { java.text.RuleBasedCollator collator = ((java.text.RuleBasedCollator) (java.text.Collator.getInstance(java.util.Locale.US))); collator.setStrength(java.text.Collator.TERTIARY); for (int i = 0; i < reps; i++) { collator.compare(""abcdE"", ""abcde""); collator.compare(""abcde"", ""abcde""); collator.compare(""abcde"", ""abcdE""); } }",20c28d7a00e98ad4ae99dd85923710d0b7d7d861,,timeCollatorTertiary(int),18,1,"public void timeCollatorTertiary(int reps) { benchmarks.regression.CollatorBenchmark.collator.setStrength(java.text.Collator.TERTIARY); for (int i = 0; i < reps; i++) { benchmarks.regression.CollatorBenchmark.collator.compare(""abcdE"", ""abcde""); benchmarks.regression.CollatorBenchmark.collator.compare(""abcde"", ""abcde""); benchmarks.regression.CollatorBenchmark.collator.compare(""abcde"", ""abcdE""); } }",f280a39cdd4edade7d97c6c480a2260d4c31308a,timeCollatorTertiary(int),33869,114,118
157636,jack_src_com_android_jack_optimizations_UseDefsChainsSimplifier.java,5.0,"private boolean hasOnlyOneDefinition(@javax.annotation.Nonnull com.android.jack.ir.ast.JVariable var, @javax.annotation.Nonnull com.android.jack.cfg.BasicBlock bb) { com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker rdm = bb.getMarker(com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker.class); assert rdm != null; boolean alreadyDefined = false; for (com.android.jack.analysis.DefinitionMarker dm : rdm.getReachingDefs()) { if ((dm.getDefinedVariable()) == var) { if (alreadyDefined) { return false; } alreadyDefined = true; } } return true; }",befe1b8a49216ed3f41aa6b02970ff7aaa24dfff,"private boolean bbHasOnlyDefinitions(@javax.annotation.Nonnull com.android.jack.cfg.BasicBlock bb, @javax.annotation.Nonnull com.android.jack.ir.ast.JVariable targetVar, @javax.annotation.Nonnull java.util.List<com.android.jack.analysis.DefinitionMarker> defsToFound) { com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker rdm = bb.getMarker(com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker.class); assert rdm != null; int nbDef = 0; for (com.android.jack.analysis.DefinitionMarker def : rdm.getReachingDefs()) { if ((def.getDefinedVariable()) == targetVar) { if (defsToFound.contains(def)) { nbDef++; } else { return false; } } } return (defsToFound.size()) == nbDef; }",0b5df15032c83ed021305b624dfadb51eb1966e6,"hasOnlyOneDefinition(com.android.jack.ir.ast.JVariable,com.android.jack.cfg.BasicBlock)","bbHasOnlyDefinitions(com.android.jack.cfg.BasicBlock,com.android.jack.ir.ast.JVariable,java.util.List)",13,4,"private boolean bbHasOnlyDefinitions(@javax.annotation.Nonnull com.android.jack.cfg.BasicBlock bb, @javax.annotation.Nonnull com.android.jack.ir.ast.JVariable var, @javax.annotation.Nonnull java.util.List<com.android.jack.analysis.DefinitionMarker> defsToFound) { int nbDef = 0; for (com.android.jack.analysis.DefinitionMarker def : com.android.jack.util.UseDefHelper.getReachingDefs(bb)) { if ((def.getDefinedVariable()) == var) { if (defsToFound.contains(def)) { nbDef++; } else { return false; } } } return (defsToFound.size()) == nbDef; }",d5fe104da6e19cdb83235c61e7eafae4729b9973,"bbHasOnlyDefinitions(com.android.jack.cfg.BasicBlock,com.android.jack.ir.ast.JVariable,java.util.List)",113546,212,161
347050,tests_wifitests_src_com_android_server_wifi_scanner_WificondWifiScannerTest.java,23.0,"@org.junit.Test public void backgroundScanSuccessSingleBucket() { com.android.server.wifi.WifiNative.ScanSettings settings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder().withBasePeriod(10000).withMaxApPerScan(10).addBucketWithBand(10000, WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN, WifiScanner.WIFI_BAND_24_GHZ).build(); com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod[] expectedPeriods = new com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod[]{ new com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod.ReportType.RESULT, com.android.server.wifi.ScanResults.create(0, 2400), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)), new com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.SupplicantWifiScannerTest.ScanPeriod.ReportType.RESULT, com.android.server.wifi.ScanResults.create(1, 2450), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)) }; doSuccessfulTest(settings, expectedPeriods); }",e889518cc2da61cc20d1081d030dafaa9caf5108,"@org.junit.Test public void backgroundScanSuccessSingleBucket() { com.android.server.wifi.WifiNative.ScanSettings settings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder().withBasePeriod(10000).withMaxApPerScan(10).addBucketWithBand(10000, WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN, WifiScanner.WIFI_BAND_24_GHZ).build(); com.android.server.wifi.scanner.WificondWifiScannerTest.ScanPeriod[] expectedPeriods = new com.android.server.wifi.scanner.WificondWifiScannerTest.ScanPeriod[]{ new com.android.server.wifi.scanner.WificondWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.WificondWifiScannerTest.ScanPeriod.ReportType.RESULT, com.android.server.wifi.ScanResults.create(0, 2400), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)), new com.android.server.wifi.scanner.WificondWifiScannerTest.ScanPeriod(com.android.server.wifi.scanner.WificondWifiScannerTest.ScanPeriod.ReportType.RESULT, com.android.server.wifi.ScanResults.create(1, 2450), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)) }; doSuccessfulTest(settings, expectedPeriods); }",21fbb294be168f18b3371bb4964da211c1570f0b,backgroundScanSuccessSingleBucket(),backgroundScanSuccessSingleBucket(),12,24,"@org.junit.Test public void backgroundScanSuccessSingleBucket() { com.android.server.wifi.WifiNative.ScanSettings settings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder().withBasePeriod(10000).withMaxApPerScan(10).addBucketWithBand(10000, WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN, WifiScanner.WIFI_BAND_24_GHZ).build(); com.android.server.wifi.scanner.WificondScannerTest.ScanPeriod[] expectedPeriods = new com.android.server.wifi.scanner.WificondScannerTest.ScanPeriod[]{ new com.android.server.wifi.scanner.WificondScannerTest.ScanPeriod(com.android.server.wifi.scanner.WificondScannerTest.ScanPeriod.ReportType.RESULT, com.android.server.wifi.ScanResults.create(0, 2400), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)), new com.android.server.wifi.scanner.WificondScannerTest.ScanPeriod(com.android.server.wifi.scanner.WificondScannerTest.ScanPeriod.ReportType.RESULT, com.android.server.wifi.ScanResults.create(1, 2450), expectedBandScanFreqs(WifiScanner.WIFI_BAND_24_GHZ)) }; doSuccessfulTest(settings, expectedPeriods); }",6816bc0ab598ec04e173650de2a6d54a21405351,backgroundScanSuccessSingleBucket(),82515,314,308
199192,luni_src_test_java_libcore_util_ZoneInfoTest.java,,,,"public void testMakeTimeZone_HasFutureDST_NoPastDST_NegativeTransitions() throws java.io.IOException { int[][] times = new int[][]{ new int[]{ -2000, 0 }, new int[]{ -500, 1 }, new int[]{ -100, 2 } }; int[][] offsets = new int[][]{ new int[]{ 1800, 0 }, new int[]{ 3600, 0 }, new int[]{ 5400, 1 } }; int expectedDSTSavings = libcore.util.ZoneInfoTest.secondsInMillis((5400 - 3600)); libcore.util.ZoneInfo zoneInfo = createZoneInfo(times, offsets, libcore.util.ZoneInfoTest.secondsInMillis((-700))); assertTrue(""Should use DST but doesn't"", zoneInfo.useDaylightTime()); assertEquals(expectedDSTSavings, zoneInfo.getDSTSavings()); zoneInfo = createZoneInfo(times, offsets, ((libcore.util.ZoneInfoTest.secondsInMillis((-100))) - 5)); assertTrue(""Should use DST but doesn't"", zoneInfo.useDaylightTime()); assertEquals(expectedDSTSavings, zoneInfo.getDSTSavings()); }",aa863d0afd535522d79fcd9685eb5328315fa0f7,,testMakeTimeZone_HasFutureDST_NoPastDST_NegativeTransitions(),6,1,"public void testMakeTimeZone_HasFutureDST_NoPastDST_NegativeTransitions() throws java.lang.Exception { int[][] times = new int[][]{ new int[]{ -2000, 0 }, new int[]{ -500, 1 }, new int[]{ -100, 2 } }; int[][] offsets = new int[][]{ new int[]{ 1800, 0 }, new int[]{ 3600, 0 }, new int[]{ 5400, 1 } }; int expectedDSTSavings = libcore.util.ZoneInfoTest.secondsInMillis((5400 - 3600)); libcore.util.ZoneInfo zoneInfo = createZoneInfo(times, offsets, libcore.util.ZoneInfoTest.secondsInMillis((-700))); assertTrue(""Should use DST but doesn't"", zoneInfo.useDaylightTime()); assertEquals(expectedDSTSavings, zoneInfo.getDSTSavings()); zoneInfo = createZoneInfo(times, offsets, ((libcore.util.ZoneInfoTest.secondsInMillis((-100))) - 5)); assertTrue(""Should use DST but doesn't"", zoneInfo.useDaylightTime()); assertEquals(expectedDSTSavings, zoneInfo.getDSTSavings()); }",0fb34be1e16cd0518e42e59005c377f501af579d,testMakeTimeZone_HasFutureDST_NoPastDST_NegativeTransitions(),67609,253,253
361230,luni_src_test_java_libcore_util_TimeZoneFinderTest.java,,,,"@org.junit.Test public void xmlParsing_noCountriesOk() throws java.lang.Exception { libcore.util.TimeZoneFinderTest.parse((""<timezones>\n"" + (("" <countryzones>\n"" + "" </countryzones>\n"") + ""</timezones>\n""))); }",655ce2ab8a0299afcfb7e357004fe551dfafcf4e,,xmlParsing_noCountriesOk(),8,26,"@org.junit.Test public void xmlParsing_noCountriesOk() throws java.lang.Exception { libcore.util.TimeZoneFinderTest.validate((""<timezones>\n"" + (("" <countryzones>\n"" + "" </countryzones>\n"") + ""</timezones>\n""))); }",24a17a0b090cdcb97bfadbc273ca9903011bd604,xmlParsing_noCountriesOk(),429172,68,68
48401,ddms_libs_ddmlib_src_main_java_com_android_ddmlib_Client.java,35.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean stopOpenGlTracing() { boolean canTraceOpenGl = mClientData.hasFeature(ClientData.FEATURE_OPENGL_TRACING); if (!canTraceOpenGl) { return false; } try { com.android.ddmlib.HandleOpenGlTracing.sendStopGlTracing(this); return true; } catch (java.io.IOException e) { com.android.ddmlib.Log.w(""ddms"", ""Stop OpenGL Tracing failed""); return false; } }",08b5d3c4864e352b75152e00f57bc37436746da0,,stopOpenGlTracing(),7,30,"public boolean stopOpenGlTracing() { boolean canTraceOpenGl = mClientData.hasFeature(ClientData.FEATURE_OPENGL_TRACING); if (!canTraceOpenGl) { return false; } try { com.android.ddmlib.OpenGlTraceChunkHandler.sendStopGlTracing(this); return true; } catch (java.io.IOException e) { com.android.ddmlib.Log.w(""ddms"", ""Stop OpenGL Tracing failed""); return false; } }",aac862f16fdbdbc7fb2c922e1c5027bcc3968e9b,stopOpenGlTracing(),214465,108,109
14640,anttasks_src_com_android_ant_MultiApkExportTask.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void write(java.io.FileWriter writer) throws java.io.IOException { for (int i = 0; i < (com.android.ant.MultiApkExportTask.ExportData.INDEX_MAX); i++) { write(i, writer); } }",d547ac09efa34a5dcf8d15188ef811c0fd404cf8,,write(java.io.FileWriter),5,12,"public void write(java.io.FileWriter writer) throws java.io.IOException { for (int i = 0; i < (com.android.ant.MultiApkExportTask.ApkData.INDEX_MAX); i++) { write(i, writer); } }",0537ccfb203ad6455e5a185160e8f8789e45bb29,write(java.io.FileWriter),201733,56,56
632510,src_java_com_android_internal_telephony_RIL.java,62.0,"static android.telephony.SignalStrength convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gsm.signalStrength, signalStrength.gsm.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, signalStrength.tdScdma.rscp); }",bcd832f38d7b20fee7a87214b92fb40a4ac0b930,"static android.telephony.SignalStrength convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gsm.signalStrength, signalStrength.gsm.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, tdscdmaRsrp_1_2); }",6f1b91b4524ab3b333781d4e7d4c042926b5fd44,convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength),convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength),6,62,"static android.telephony.SignalStrength convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength signalStrength) { return new android.telephony.SignalStrength(signalStrength.gsm.signalStrength, signalStrength.gsm.bitErrorRate, signalStrength.cdma.dbm, signalStrength.cdma.ecio, signalStrength.evdo.dbm, signalStrength.evdo.ecio, signalStrength.evdo.signalNoiseRatio, signalStrength.lte.signalStrength, signalStrength.lte.rsrp, signalStrength.lte.rsrq, signalStrength.lte.rssnr, signalStrength.lte.cqi, signalStrength.tdScdma.rscp, signalStrength.wcdma.base.signalStrength, signalStrength.wcdma.rscp); }",6bdc8dff5a75e31c221a4c856357b348f2f97dce,convertHalSignalStrength_1_2(android.hardware.radio.V1_2.SignalStrength),105690,161,184
14893,sdkmanager_libs_sdklib_src_com_android_sdklib_internal_export_ApkData.java,3.0,"public java.lang.String getLogLine() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(mBuildInfo).append(':'); write(sb, com.android.sdklib.internal.export.ApkData.PROP_MINOR, mMinor); write(sb, com.android.sdklib.internal.export.ApkData.PROP_PROJECT, mRelativePath); write(sb, com.android.sdklib.internal.export.ApkData.PROP_API, mMinSdkVersion); if ((mGlVersion) != (com.android.sdklib.xml.ManifestData.GL_ES_VERSION_NOT_SET)) { write(sb, com.android.sdklib.internal.export.ApkData.PROP_GL, mGlVersion); } if ((mAbi) != null) { write(sb, com.android.sdklib.internal.export.ApkData.PROP_ABI, mAbi); } write(sb, com.android.sdklib.internal.export.ApkData.PROP_SCREENS, mSupportsScreens); return sb.toString(); }",1d5bea04d57c9cfc0c3db2e06096c9d2f691a27a,"public java.lang.String getLogLine() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(mOutputName).append(':'); write(sb, com.android.sdklib.internal.export.ApkData.PROP_BUILDINFO, mBuildInfo); write(sb, com.android.sdklib.internal.export.ApkData.PROP_MINOR, mMinor); write(sb, com.android.sdklib.internal.export.ApkData.PROP_PROJECT, mRelativePath); write(sb, com.android.sdklib.internal.export.ApkData.PROP_API, mMinSdkVersion); if ((mGlVersion) != (com.android.sdklib.xml.ManifestData.GL_ES_VERSION_NOT_SET)) { write(sb, com.android.sdklib.internal.export.ApkData.PROP_GL, mGlVersion); } if ((mAbi) != null) { write(sb, com.android.sdklib.internal.export.ApkData.PROP_ABI, mAbi); } write(sb, com.android.sdklib.internal.export.ApkData.PROP_SCREENS, mSupportsScreens.getEncodedValues()); return sb.toString(); }",b19b6d6874aa09083f0165b3f7370b2b9e93ff9a,getLogLine(),getLogLine(),7,3,"public java.lang.String getLogLine() { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(mOutputName).append(':'); write(sb, com.android.sdklib.internal.export.ApkData.PROP_BUILDINFO, mBuildInfo); write(sb, com.android.sdklib.internal.export.ApkData.PROP_MINOR, mMinor); write(sb, com.android.sdklib.internal.export.ApkData.PROP_PROJECT, mRelativePath); write(sb, com.android.sdklib.internal.export.ApkData.PROP_API, mMinSdkVersion); if ((mGlVersion) != (com.android.sdklib.xml.ManifestData.GL_ES_VERSION_NOT_SET)) { write(sb, com.android.sdklib.internal.export.ApkData.PROP_GL, (""0x"" + (java.lang.Integer.toHexString(mGlVersion)))); } if ((mAbi) != null) { write(sb, com.android.sdklib.internal.export.ApkData.PROP_ABI, mAbi); } write(sb, com.android.sdklib.internal.export.ApkData.PROP_SCREENS, mSupportsScreens.getEncodedValues()); return sb.toString(); }",d7891f4ef00baaf81700ed900e3c7de0752ae2c3,getLogLine(),107047,275,290
253791,luni_src_main_java_libcore_io_ForwardingOs.java,101.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public libcore.io.StructIfaddrs[] getifaddrs() throws libcore.io.ErrnoException { return os.getifaddrs(); },4974b57e8e1e553db616e19846a8ef7cc8d4f3bc,,getifaddrs(),8,105,public android.system.StructIfaddrs[] getifaddrs() throws android.system.ErrnoException { return os.getifaddrs(); },01b21d40dd4def2726d99a1c563947c9cef014f3,getifaddrs(),494808,35,33
63692,lint_libs_lint-checks_src_main_java_com_android_tools_lint_checks_SecureRandomGeneratorDetector.java,,,,"@java.lang.Override public void afterCheckProject(@com.android.annotations.NonNull com.android.tools.lint.checks.Context context) { if (((mLocation) != null) && (!(mIgnore))) { java.lang.String message = ((""Potentially insecure random numbers on some versions of "" + ""Android. Read "") + (com.android.tools.lint.checks.SecureRandomGeneratorDetector.BLOG_URL)) + "" for more info.""; context.report(com.android.tools.lint.checks.SecureRandomGeneratorDetector.ISSUE, mLocation, message, null); } }",eaef754ccc0120ef049a879ea0a82e583720b624,,afterCheckProject(com.android.tools.lint.checks.Context),6,4,"@java.lang.Override public void afterCheckProject(@com.android.annotations.NonNull com.android.tools.lint.detector.api.Context context) { if (((mLocation) != null) && (!(mIgnore))) { java.lang.String message = ((""Potentially insecure random numbers on Android 4.3 and older. "" + ""Read "") + (com.android.tools.lint.checks.SecureRandomGeneratorDetector.BLOG_URL)) + "" for more info.""; context.report(com.android.tools.lint.checks.SecureRandomGeneratorDetector.ISSUE, mLocation, message, null); } }",45aff9dd505d5e429a5f46ae0b5bcd7c4e6229b4,afterCheckProject(com.android.tools.lint.detector.api.Context),300273,136,138
19248,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gle2_ImageOverlay.java,5.0,"public org.eclipse.swt.graphics.Image setImage(java.awt.image.BufferedImage awtImage) { if (awtImage != (mAwtImage)) { mAwtImage = null; if ((mImage) != null) { mImage.dispose(); } if (awtImage == null) { mImage = null; } else { mImage = com.android.ide.eclipse.adt.internal.editors.layout.gle2.SwtUtils.convertToSwt(mCanvas.getDisplay(), awtImage, false, (-1)); } } else { java.awt.image.WritableRaster awtRaster = mAwtImage.getRaster(); java.awt.image.DataBufferByte byteBuffer = ((java.awt.image.DataBufferByte) (awtRaster.getDataBuffer())); byte[] data = byteBuffer.getData(); org.eclipse.swt.graphics.ImageData imageData = new org.eclipse.swt.graphics.ImageData(mAwtImage.getWidth(), mAwtImage.getHeight(), 32, new org.eclipse.swt.graphics.PaletteData(16711680, 65280, 255)); java.lang.System.arraycopy(data, 0, imageData.data, 0, data.length); mImage = new org.eclipse.swt.graphics.Image(getDevice(), imageData); } return mImage; }",55d67b4946bbe61026b6e8c8a9e7f17dc292e381,"public synchronized org.eclipse.swt.graphics.Image setImage(java.awt.image.BufferedImage awtImage) { if (awtImage != (mAwtImage)) { mAwtImage = null; if ((mImage) != null) { mImage.dispose(); } if (awtImage == null) { mImage = null; } else { mImage = com.android.ide.eclipse.adt.internal.editors.layout.gle2.SwtUtils.convertToSwt(mCanvas.getDisplay(), awtImage, false, (-1)); } } else { assert awtImage instanceof com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage; mImage = ((com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage) (awtImage)).getSwtImage(); } return mImage; }",f610260db726155ccd1574c0cf76106f49c38699,setImage(java.awt.image.BufferedImage),setImage(java.awt.image.BufferedImage),6,2,"public synchronized org.eclipse.swt.graphics.Image setImage(java.awt.image.BufferedImage awtImage) { if ((awtImage != (mAwtImage)) || (awtImage == null)) { mAwtImage = null; if ((mImage) != null) { mImage.dispose(); } if (awtImage == null) { mImage = null; } else { mImage = com.android.ide.eclipse.adt.internal.editors.layout.gle2.SwtUtils.convertToSwt(mCanvas.getDisplay(), awtImage, false, (-1)); } } else { assert awtImage instanceof com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage; mImage = ((com.android.ide.eclipse.adt.internal.editors.layout.gle2.ImageOverlay.SwtReadyBufferedImage) (awtImage)).getSwtImage(); } return mImage; }",f34d1a08fca03b574af08774578239ecb98b1c4d,setImage(java.awt.image.BufferedImage),62802,207,215
53792,gradle_src_main_groovy_com_android_build_gradle_internal_dependency_AndroidDependencyImpl.java,,,,@java.lang.Override public java.util.List<com.android.builder.AndroidDependency> getDependencies() { return dependencies; },d2e800d72d5dd150aff4e22b2512e759727d5a8a,,getDependencies(),3,1,@java.lang.Override @com.android.annotations.NonNull public java.util.List<com.android.builder.AndroidDependency> getDependencies() { return dependencies; },0f296231bffb0c53bd60b60fde4c9dda62e1ce5a,getDependencies(),334342,30,38
91995,support_src_test_java_tests_io_MockOs.java,4.0,"public void enqueueFault(java.lang.String methodName, final int errno) { getHandlers(methodName).add(new java.lang.reflect.InvocationHandler() { @java.lang.Override public java.lang.Object invoke(java.lang.Object proxy, java.lang.reflect.Method method, java.lang.Object[] args) throws libcore.io.ErrnoException { throw new libcore.io.ErrnoException(method.getName(), errno); } }); }",85b2bec1b3b25501fdda38f6eba89a3bd9d8edb2,"public void enqueueFault(java.lang.String methodName, final int errno) { getHandlers(methodName).add(new java.lang.reflect.InvocationHandler() { @java.lang.Override public java.lang.Object invoke(java.lang.Object proxy, java.lang.reflect.Method method, java.lang.Object[] args) throws android.os.ErrnoException { throw new android.os.ErrnoException(method.getName(), errno); } }); }",4d210270025de235bcc4bab79e076635225fbe24,"enqueueFault(java.lang.String,int)","enqueueFault(java.lang.String,int)",3,4,"public void enqueueFault(java.lang.String methodName, final int errno) { getHandlers(methodName).add(new java.lang.reflect.InvocationHandler() { @java.lang.Override public java.lang.Object invoke(java.lang.Object proxy, java.lang.reflect.Method method, java.lang.Object[] args) throws android.system.ErrnoException { throw new android.system.ErrnoException(method.getName(), errno); } }); }",779dc1034f230f653f9318a1aeb8a39ac79ad21e,"enqueueFault(java.lang.String,int)",169715,104,104
263610,jack_src_com_android_jack_ir_sourceinfo_SourceInfoFactory.java,0.0,"@javax.annotation.Nonnull public com.android.jack.ir.sourceinfo.SourceInfo create(int startCol, int endCol, @javax.annotation.Nonnegative int startLine, @javax.annotation.Nonnegative int endLine, @javax.annotation.Nonnull java.lang.String fileName) { com.android.jack.ir.sourceinfo.FileSourceInfo fileSourceInfo = create(fileName); com.android.jack.ir.sourceinfo.LineSourceInfo lineSourceOrigin = create(startLine, endLine, fileSourceInfo); if ((startCol <= 0) && (endCol <= 0)) { return lineSourceOrigin; } com.android.jack.ir.sourceinfo.ColumnSourceInfo newInstance = new com.android.jack.ir.sourceinfo.ColumnSourceInfo(lineSourceOrigin, startCol, endCol); com.android.jack.ir.sourceinfo.ColumnSourceInfo canonical = canonicalColumnSourceInfos.get(newInstance); assert (canonical == null) || ((newInstance != canonical) && (newInstance.equals(canonical))); if (canonical != null) { return canonical; } else { com.android.jack.ir.sourceinfo.ColumnSourceInfo previousValue = canonicalColumnSourceInfos.putIfAbsent(newInstance, newInstance); if (previousValue != null) { newInstance = previousValue; } return newInstance; } }",9f0adedafe53cab16628ac312e47967262647061,"@javax.annotation.Nonnull public com.android.jack.ir.sourceinfo.SourceInfo create(int startCol, int endCol, @javax.annotation.Nonnegative int startLine, @javax.annotation.Nonnegative int endLine, @javax.annotation.Nonnull java.lang.String fileName) { com.android.jack.ir.sourceinfo.FileSourceInfo fileSourceInfo = create(fileName); if (startLine <= 0) { assert endLine <= 0; return fileSourceInfo; } com.android.jack.ir.sourceinfo.LineSourceInfo lineSourceOrigin = create(startLine, endLine, fileSourceInfo); if (startCol <= 0) { assert endCol <= 0; return lineSourceOrigin; } com.android.jack.ir.sourceinfo.ColumnSourceInfo newInstance = new com.android.jack.ir.sourceinfo.ColumnSourceInfo(lineSourceOrigin, startCol, endCol); com.android.jack.ir.sourceinfo.ColumnSourceInfo canonical = canonicalColumnSourceInfos.get(newInstance); assert (canonical == null) || ((newInstance != canonical) && (newInstance.equals(canonical))); if (canonical != null) { return canonical; } else { com.android.jack.ir.sourceinfo.ColumnSourceInfo previousValue = canonicalColumnSourceInfos.putIfAbsent(newInstance, newInstance); if (previousValue != null) { newInstance = previousValue; } return newInstance; } }",255532fa7f3149f8272844f4729019304bc68210,"create(int,int,int,int,java.lang.String)","create(int,int,int,int,java.lang.String)",3,0,"@javax.annotation.Nonnull public com.android.jack.ir.sourceinfo.SourceInfo create(@javax.annotation.Nonnegative int startCol, @javax.annotation.Nonnegative int endCol, @javax.annotation.Nonnegative int startLine, @javax.annotation.Nonnegative int endLine, @javax.annotation.Nonnull java.lang.String fileName) { com.android.jack.ir.sourceinfo.SourceInfo si = create(startLine, endLine, fileName); if ((startCol == (SourceInfo.UNKNOWN_COLUMN_NUMBER)) || (si instanceof com.android.jack.ir.sourceinfo.FileSourceInfo)) { assert endCol == (SourceInfo.UNKNOWN_COLUMN_NUMBER); return si; } com.android.jack.ir.sourceinfo.ColumnSourceInfo newInstance = new com.android.jack.ir.sourceinfo.ColumnSourceInfo(((com.android.jack.ir.sourceinfo.LineSourceInfo) (si)), startCol, endCol); com.android.jack.ir.sourceinfo.ColumnSourceInfo canonical = canonicalColumnSourceInfos.get(newInstance); assert (canonical == null) || ((newInstance != canonical) && (newInstance.equals(canonical))); if (canonical != null) { return canonical; } else { com.android.jack.ir.sourceinfo.ColumnSourceInfo previousValue = canonicalColumnSourceInfos.putIfAbsent(newInstance, newInstance); if (previousValue != null) { newInstance = previousValue; } return newInstance; } }",081f9116ba5c111632e91077c22de78375300b48,"create(int,int,int,int,java.lang.String)",12303,304,323
106847,java_java-impl_src_com_intellij_codeInspection_reference_RefJavaManagerImpl.java,28.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public com.intellij.codeInspection.reference.PsiClass getAndroidContext() { return myAndroidContext; },1b5ead349002cf5f511b42ff07722e369d52cfa2,,getAndroidContext(),2,31,@java.lang.Override public com.intellij.codeInspection.reference.PsiClass getAndroidContentProvider() { return myAndroidContentProvider; },7da49599dbff6c1ce836969987fee63eb6906f17,getAndroidContentProvider(),469809,31,31
41115,src_java_com_android_internal_telephony_UiccCard.java,,,,public boolean isApplicationOnIcc(com.android.internal.telephony.IccCardApplicationStatus.AppType type) { for (int i = 0; i < (mUiccApplications.length); i++) { if (((mUiccApplications[i]) != null) && ((mUiccApplications[i].getType()) == type)) { return true; } } return false; },010b482127e4a07b4fa07a8723b231222cd6dfbe,,isApplicationOnIcc(com.android.internal.telephony.IccCardApplicationStatus$AppType),22,0,public boolean isApplicationOnIcc(com.android.internal.telephony.IccCardApplicationStatus.AppType type) { synchronized(mLock) { for (int i = 0; i < (mUiccApplications.length); i++) { if (((mUiccApplications[i]) != null) && ((mUiccApplications[i].getType()) == type)) { return true; } } return false; } },087323d8b071184e95ba095ef2a7c4bc63ba0b1b,isApplicationOnIcc(com.android.internal.telephony.IccCardApplicationStatus$AppType),499315,83,90
540924,services_core_java_com_android_server_IpSecService.java,56.0,@java.lang.Override protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return mUserQuotaTracker.getUserRecord(this.uid).socket; },f6063aeacc093d28076f0ea5e83121f001346042,@java.lang.Override protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return getUserRecord().socketQuotaTracker; },9bab24c493955cf67274f943731f178c17f09ed6,getResourceTracker(),getResourceTracker(),6,51,@java.lang.Override protected com.android.server.IpSecService.ResourceTracker getResourceTracker() { return getUserRecord().mSocketQuotaTracker; },ae5d861597d89bac0c272c18b7fc2e4dbdf8bd1d,getResourceTracker(),180071,32,33
358197,src_com_android_bluetooth_avrcp_Avrcp.java,92.0,"private byte getPlayBackState(com.android.bluetooth.avrcp.MediaController mediaController) { android.media.session.PlaybackState pbState = mediaController.getPlaybackState(); byte playStateBytes = com.android.bluetooth.avrcp.Avrcp.PLAYSTATUS_STOPPED; if (pbState != null) { playStateBytes = ((byte) (convertPlayStateToBytes(pbState.getState()))); android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, (""getPlayBackState: playStateBytes = "" + playStateBytes)); } else { android.util.Log.w(com.android.bluetooth.avrcp.Avrcp.TAG, (""playState object null, sending playStateBytes = "" + playStateBytes)); } return playStateBytes; }",6c1ed4f5d95d3fa08c73ae588a05262418786758,"private synchronized void addMediaPlayerInfo(android.media.session.MediaController controller) { java.lang.String packageName = controller.getPackageName(); com.android.bluetooth.avrcp.MediaPlayerInfo info = new com.android.bluetooth.avrcp.MediaPlayerInfo(com.android.bluetooth.avrcp.MediaController.wrap(controller), AvrcpConstants.PLAYER_TYPE_AUDIO, AvrcpConstants.PLAYER_SUBTYPE_NONE, getPlayStateBytes(controller.getPlaybackState()), getFeatureBitMask(packageName), getAppLabel(packageName)); if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, info.toString()); (mLastUsedPlayerID)++; mMediaPlayerInfoList.put(mLastUsedPlayerID, info); }",168f07040ce4ac70966428c614f7373d480c83da,getPlayBackState(com.android.bluetooth.avrcp.MediaController),addMediaPlayerInfo(android.media.session.MediaController),11,123,"private synchronized void addMediaPlayerController(android.media.session.MediaController controller) { java.lang.String packageName = controller.getPackageName(); removeMediaPlayerInfo(packageName); com.android.bluetooth.avrcp.MediaPlayerInfo info = new com.android.bluetooth.avrcp.MediaPlayerInfo(com.android.bluetooth.avrcp.MediaController.wrap(controller), AvrcpConstants.PLAYER_TYPE_AUDIO, AvrcpConstants.PLAYER_SUBTYPE_NONE, getPlayStateBytes(controller.getPlaybackState()), getFeatureBitMask(packageName), getAppLabel(packageName)); addMediaPlayerInfo(info); }",7864f62656c7e697c07419a8cff1695bbbf7fb89,addMediaPlayerController(android.media.session.MediaController),389447,191,135
84300,build-system_manifest-merger_src_main_java_com_android_manifmerger_ManifestMerger2.java,0.0,"private com.android.manifmerger.MergingReport merge() throws com.android.manifmerger.ManifestMerger2.MergeFailureException { com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder(mILogger); com.google.common.base.Optional<com.android.manifmerger.XmlDocument> xmlDocumentOptional = com.google.common.base.Optional.absent(); for (java.io.File inputFile : mFlavorsAndBuildTypeFiles) { mILogger.info((""Merging flavors and build manifest "" + (inputFile.getPath()))); xmlDocumentOptional = merge(xmlDocumentOptional, inputFile, mergingReportBuilder); } mILogger.info((""Merging main manifest"" + (mMainManifestFile.getPath()))); xmlDocumentOptional = merge(xmlDocumentOptional, mMainManifestFile, mergingReportBuilder); for (java.io.File inputFile : mLibraryFiles) { mILogger.info((""Merging library manifest "" + (inputFile.getPath()))); xmlDocumentOptional = merge(xmlDocumentOptional, inputFile, mergingReportBuilder); } if (xmlDocumentOptional.isPresent()) { mergingReportBuilder.setMergedDocument(xmlDocumentOptional.get()); } return mergingReportBuilder.build(); }",9802aa2cd63076d40bed66a1c4e9cbf1becf9ab4,"private com.android.manifmerger.MergingReport merge() throws com.android.manifmerger.ManifestMerger2.MergeFailureException { com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder(mILogger); com.google.common.base.Optional<com.android.manifmerger.XmlDocument> xmlDocumentOptional = com.google.common.base.Optional.absent(); for (java.io.File inputFile : mFlavorsAndBuildTypeFiles) { mILogger.info((""Merging flavors and build manifest "" + (inputFile.getPath()))); xmlDocumentOptional = merge(xmlDocumentOptional, inputFile, mergingReportBuilder); if (!(xmlDocumentOptional.isPresent())) { return mergingReportBuilder.build(); } } mILogger.info((""Merging main manifest"" + (mMainManifestFile.getPath()))); xmlDocumentOptional = merge(xmlDocumentOptional, mMainManifestFile, mergingReportBuilder); if (!(xmlDocumentOptional.isPresent())) { return mergingReportBuilder.build(); } for (java.io.File inputFile : mLibraryFiles) { mILogger.info((""Merging library manifest "" + (inputFile.getPath()))); xmlDocumentOptional = merge(xmlDocumentOptional, inputFile, mergingReportBuilder); if (!(xmlDocumentOptional.isPresent())) { return mergingReportBuilder.build(); } } mergingReportBuilder.setMergedDocument(xmlDocumentOptional.get()); return mergingReportBuilder.build(); }",23f3af667855760e4a9795dc436610d21b945cdb,merge(),merge(),7,0,"private com.android.manifmerger.MergingReport merge() throws com.android.manifmerger.ManifestMerger2.MergeFailureException { com.android.manifmerger.MergingReport.Builder mergingReportBuilder = new com.android.manifmerger.MergingReport.Builder(mLogger); com.google.common.base.Optional<com.android.manifmerger.XmlDocument> xmlDocumentOptional = com.google.common.base.Optional.absent(); for (java.io.File inputFile : mFlavorsAndBuildTypeFiles) { mLogger.info(""Merging flavors and build manifest %s \n"", inputFile.getPath()); xmlDocumentOptional = merge(xmlDocumentOptional, inputFile, mergingReportBuilder); if (!(xmlDocumentOptional.isPresent())) { return mergingReportBuilder.build(); } } mLogger.info(""Merging main manifest %s\n"", mMainManifestFile.getPath()); xmlDocumentOptional = merge(xmlDocumentOptional, mMainManifestFile, mergingReportBuilder); if (!(xmlDocumentOptional.isPresent())) { return mergingReportBuilder.build(); } for (java.io.File inputFile : mLibraryFiles) { mLogger.info((""Merging library manifest "" + (inputFile.getPath()))); xmlDocumentOptional = merge(xmlDocumentOptional, inputFile, mergingReportBuilder); if (!(xmlDocumentOptional.isPresent())) { return mergingReportBuilder.build(); } } mergingReportBuilder.setMergedDocument(xmlDocumentOptional.get()); return mergingReportBuilder.build(); }",03f44ab5ccbc692d9a464e811395db3affd1dd46,merge(),343158,321,319
92220,src_com_android_settings_applications_RunningState.java,22.0,"private void addOtherUserItem(android.content.Context context, java.util.ArrayList<com.android.settings.applications.RunningState.MergedItem> newMergedItems, android.util.SparseArray<com.android.settings.applications.RunningState.MergedItem> userItems, com.android.settings.applications.RunningState.MergedItem newItem) { com.android.settings.applications.RunningState.MergedItem userItem = userItems.get(newItem.mUserId); boolean first = (userItem == null) || ((userItem.mCurSeq) != (mSequence)); if (first) { if (userItem == null) { userItem = new com.android.settings.applications.RunningState.MergedItem(newItem.mUserId); userItems.put(newItem.mUserId, userItem); } else { userItem.mChildren.clear(); } userItem.mCurSeq = mSequence; if ((userItem.mUser = mUsers.get(newItem.mUserId)) == null) { userItem.mUser = new com.android.settings.applications.RunningState.UserState(); android.content.pm.UserInfo info = mUm.getUserInfo(newItem.mUserId); userItem.mUser.mInfo = info; if (info != null) { userItem.mUser.mIcon = com.android.settings.users.UserUtils.getUserIcon(context, mUm, info, context.getResources()); } java.lang.String name = (info != null) ? info.name : null; if (name == null) { name = java.lang.Integer.toString(info.id); } userItem.mUser.mLabel = context.getResources().getString(R.string.running_process_item_user_label, name); } newMergedItems.add(userItem); } userItem.mChildren.add(newItem); }",ab2a3a1465626320642d3e830cedb7e15d5a851b,"private void addOtherUserItem(android.content.Context context, java.util.ArrayList<com.android.settings.applications.RunningState.MergedItem> newMergedItems, android.util.SparseArray<com.android.settings.applications.RunningState.MergedItem> userItems, com.android.settings.applications.RunningState.MergedItem newItem) { com.android.settings.applications.RunningState.MergedItem userItem = userItems.get(newItem.mUserId); boolean first = (userItem == null) || ((userItem.mCurSeq) != (mSequence)); if (first) { if (userItem == null) { userItem = new com.android.settings.applications.RunningState.MergedItem(newItem.mUserId); userItems.put(newItem.mUserId, userItem); } else { userItem.mChildren.clear(); } userItem.mCurSeq = mSequence; if ((userItem.mUser = mUsers.get(newItem.mUserId)) == null) { userItem.mUser = new com.android.settings.applications.RunningState.UserState(); android.content.pm.UserInfo info = mUm.getUserInfo(newItem.mUserId); userItem.mUser.mInfo = info; if (info != null) { userItem.mUser.mIcon = com.android.settings.users.UserUtils.getUserIcon(context, mUm, info, context.getResources()); } java.lang.String name = (info != null) ? info.name : null; if ((name == null) && (info != null)) { name = java.lang.Integer.toString(info.id); } else if (info == null) { name = ""null""; } userItem.mUser.mLabel = context.getResources().getString(R.string.running_process_item_user_label, name); } newMergedItems.add(userItem); } userItem.mChildren.add(newItem); }",876379c21ce229db1912d5f4e2c28ecc99e23efe,"addOtherUserItem(android.content.Context,java.util.ArrayList,android.util.SparseArray,com.android.settings.applications.RunningState$MergedItem)","addOtherUserItem(android.content.Context,java.util.ArrayList,android.util.SparseArray,com.android.settings.applications.RunningState$MergedItem)",2,22,"private void addOtherUserItem(android.content.Context context, java.util.ArrayList<com.android.settings.applications.RunningState.MergedItem> newMergedItems, android.util.SparseArray<com.android.settings.applications.RunningState.MergedItem> userItems, com.android.settings.applications.RunningState.MergedItem newItem) { com.android.settings.applications.RunningState.MergedItem userItem = userItems.get(newItem.mUserId); boolean first = (userItem == null) || ((userItem.mCurSeq) != (mSequence)); if (first) { if (userItem == null) { userItem = new com.android.settings.applications.RunningState.MergedItem(newItem.mUserId); userItems.put(newItem.mUserId, userItem); } else { userItem.mChildren.clear(); } userItem.mCurSeq = mSequence; if ((userItem.mUser = mUsers.get(newItem.mUserId)) == null) { userItem.mUser = new com.android.settings.applications.RunningState.UserState(); android.content.pm.UserInfo info = mUm.getUserInfo(newItem.mUserId); userItem.mUser.mInfo = info; if (info != null) { userItem.mUser.mIcon = com.android.settings.users.UserUtils.getUserIcon(context, mUm, info, context.getResources()); } java.lang.String name = (info != null) ? info.name : null; if ((name == null) && (info != null)) { name = java.lang.Integer.toString(info.id); } else if (info == null) { name = context.getString(R.string.unknown); } userItem.mUser.mLabel = context.getResources().getString(R.string.running_process_item_user_label, name); } newMergedItems.add(userItem); } userItem.mChildren.add(newItem); }",21dc4b02b68a43a746907fe448d247b4d9a083a9,"addOtherUserItem(android.content.Context,java.util.ArrayList,android.util.SparseArray,com.android.settings.applications.RunningState$MergedItem)",345004,440,447
199631,jack-tests_src_com_android_jack_test_toolchain_AbstractTestTools.java,7.0,"public static java.io.File getPrebuilt(@javax.annotation.Nonnull java.lang.String prebuiltName) { java.lang.String prebuiltVarName = (com.android.jack.test.toolchain.AbstractTestTools.TOOLCHAIN_PREBUILT_PREFIX) + prebuiltName; java.lang.String prebuiltPath; prebuiltPath = com.android.jack.test.TestsProperties.getProperty(prebuiltVarName); if (prebuiltPath.equals("""")) { throw new com.android.jack.test.TestConfigurationException(((""Property '"" + prebuiltVarName) + ""' is not set"")); } java.io.File result = new java.io.File(prebuiltPath); if (!(result.isAbsolute())) { result = new java.io.File(com.android.jack.test.TestsProperties.getJackRootDir(), prebuiltPath); } if (!(result.exists())) { throw new com.android.jack.test.TestConfigurationException(((((""Can not find '"" + prebuiltName) + ""' prebuilt at '"") + (result.getPath())) + ""'"")); } return result; }",3e3018db602b23491022060bf5264489466ffab5,"@javax.annotation.Nonnull public static java.io.File getPrebuilt(@javax.annotation.Nonnull java.lang.String prebuiltName) { java.lang.String prebuiltVarName = (com.android.jack.test.toolchain.AbstractTestTools.TOOLCHAIN_PREBUILT_PREFIX) + prebuiltName; java.lang.String prebuiltPath = com.android.jack.test.TestsProperties.getProperty(prebuiltVarName).trim(); if (prebuiltPath.equals("""")) { throw new com.android.jack.test.TestConfigurationException(((""Property '"" + prebuiltVarName) + ""' is not set"")); } java.io.File result = new java.io.File(prebuiltPath); if (!(result.isAbsolute())) { result = new java.io.File(com.android.jack.test.TestsProperties.getJackRootDir(), prebuiltPath); } if (!(result.exists())) { throw new com.android.jack.test.TestConfigurationException(((((""Can not find '"" + prebuiltName) + ""' prebuilt at '"") + (result.getPath())) + ""'"")); } return result; }",01842fc6962d8e8f761662744363f9d2a3e4cb25,getPrebuilt(java.lang.String),getPrebuilt(java.lang.String),8,6,"@javax.annotation.Nonnull public static java.io.File getPrebuilt(@javax.annotation.Nonnull java.lang.String prebuiltName) { java.lang.String prebuiltVarName = (com.android.jack.test.toolchain.AbstractTestTools.TOOLCHAIN_PREBUILT_PREFIX) + prebuiltName; java.lang.String prebuiltPath = com.android.jack.test.TestsProperties.getProperty(prebuiltVarName).trim(); if (prebuiltPath.equals("""")) { throw new java.lang.AssertionError(((""Property '"" + prebuiltVarName) + ""' is not set"")); } java.io.File result = new java.io.File(prebuiltPath); if (!(result.isAbsolute())) { result = new java.io.File(com.android.jack.test.TestsProperties.getJackRootDir(), prebuiltPath); } if (!(result.exists())) { throw new com.android.jack.test.TestConfigurationException(((((""Can not find '"" + prebuiltName) + ""' prebuilt at '"") + (result.getPath())) + ""'"")); } return result; }",67b2a5148452890980c417c36d13fd223503733d,getPrebuilt(java.lang.String),106430,240,234
71536,luni_src_main_java_java_security_Provider.java,33.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private <T> boolean isInList(T[] itemList, T target) { if (target == null) { return false; } for (T item : itemList) { if (target.equals(item)) { return true; } } return false; }",95710500f642c87525e785463a884c8aed0c33c8,,"isInList(java.lang.Object[],java.lang.Object)",4,9,"private static final <T> boolean isInArray(T[] itemList, T target) { if (target == null) { return false; } for (T item : itemList) { if (target.equals(item)) { return true; } } return false; }",621920c614decc41ff5f46937406f32a5a2c46af,"isInArray(java.lang.Object[],java.lang.Object)",334615,56,59
89225,libart_src_main_java_java_lang_reflect_Field.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private native int getIntNative(java.lang.Object object) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;",7831f842b83fce91dff8c274ab6ab03d1b13359d,,getIntNative(java.lang.Object),2,24,"private native int getInt(java.lang.Object object, boolean accessible) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;",2f5a2cbd18821c01cfc59209a872bef50f474a36,"getInt(java.lang.Object,boolean)",134503,29,31
81416,tests_tests_renderscript_src_android_renderscript_cts_TestNativePowr.java,,,,"private void checkNativePowrFloatFloat() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testNativePowrFloatFloat(inV, out); verifyResultsNativePowrFloatFloat(inV, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testNativePowrFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testNativePowrFloatFloat(inV, out); verifyResultsNativePowrFloatFloat(inV, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testNativePowrFloatFloat: "" + (e.toString()))); } }",91a861211ec59a71a094bdcbcc3d800e76743007,,checkNativePowrFloatFloat(),9,0,"private void checkNativePowrFloatFloatFloat() { android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 4257427356127246139L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 4257427356127246139L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testNativePowrFloatFloatFloat(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testNativePowrFloatFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testNativePowrFloatFloatFloat(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testNativePowrFloatFloatFloat: "" + (e.toString()))); } }",72bc681af9c3618b25626f1c11af33f73ce1b9d7,checkNativePowrFloatFloatFloat(),142938,435,344
253791,luni_src_main_java_libcore_io_Posix.java,101.0,public native void fdatasync(java.io.FileDescriptor fd) throws android.system.ErrnoException;,1d2f4de205b0f9a8f2b6aa4d8062739b6f133924,public native void fdatasync(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;,ed27ab21728fed4daf2f85c1a97b0101392d4ce9,fdatasync(java.io.FileDescriptor),fdatasync(java.io.FileDescriptor),8,98,public native void fdatasync(java.io.FileDescriptor fd) throws android.system.ErrnoException;,1d2f4de205b0f9a8f2b6aa4d8062739b6f133924,fdatasync(java.io.FileDescriptor),494532,24,23
17573,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gle2_DynamicContextMenu.java,8.0,"public void run() { for (com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction a2 : actions) { if (a2 instanceof com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) { gre.callClosure(((com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) (a2)).getClosure(), a2, key, (!isChecked)); } } }",1eb8725c210c711d12849f8a766c3f633909cb81,"public void run() { for (com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction a2 : actions) { if (a2 instanceof com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) { ((com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) (a2)).getCallback().action(a2, key, (!isChecked)); } } }",fb155b17ed58a7ea3064594dfdae1f1ba8fcbe88,run(),run(),4,8,"public void run() { for (com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction a2 : actions) { if (a2 instanceof com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) { try { ((com.android.ide.eclipse.adt.editors.layout.gscripts.MenuAction.Action) (a2)).getCallback().action(a2, key, (!isChecked)); } catch (java.lang.Exception e) { com.android.ide.eclipse.adt.internal.editors.layout.gre.RulesEngine gre = mCanvas.getRulesEngine(); gre.logError(""XML edit operation failed: %s"", e.toString()); } } } }",45d167bd1ce74b3a0719d14406b0cdc1ebf260e1,run(),301416,113,177
204848,src_com_android_bluetooth_gatt_GattService.java,11.0,"void startScan(int appIf, boolean isServer, android.bluetooth.le.ScanSettings settings, java.util.List<android.bluetooth.le.ScanFilter> filters, java.util.List<java.util.List<android.bluetooth.le.ResultStorageDescriptor>> storages, java.lang.String callingPackage) { if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ""start scan with filters""); enforceAdminPermission(); if (needsPrivilegedPermissionForScan(settings)) { enforcePrivilegedPermission(); } final com.android.bluetooth.gatt.ScanClient scanClient = new com.android.bluetooth.gatt.ScanClient(appIf, isServer, settings, filters, storages); scanClient.hasLocationPermission = com.android.bluetooth.Utils.checkCallerHasLocationPermission(this, mAppOps, callingPackage); scanClient.hasPeersMacAddressPermission = com.android.bluetooth.Utils.checkCallerHasPeersMacAddressPermission(this); scanClient.legacyForegroundApp = com.android.bluetooth.Utils.isLegacyForegroundApp(this, callingPackage); mClientMap.getScanStatsById(appIf).startScan(); mScanManager.startScan(scanClient); }",e15bfa944c1bd95ee9f3bf489064167d843ecadd,"void startScan(int appIf, boolean isServer, android.bluetooth.le.ScanSettings settings, java.util.List<android.bluetooth.le.ScanFilter> filters, java.util.List<java.util.List<android.bluetooth.le.ResultStorageDescriptor>> storages, java.lang.String callingPackage) { if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ""start scan with filters""); enforceAdminPermission(); if (needsPrivilegedPermissionForScan(settings)) { enforcePrivilegedPermission(); } final com.android.bluetooth.gatt.ScanClient scanClient = new com.android.bluetooth.gatt.ScanClient(appIf, isServer, settings, filters, storages); scanClient.hasLocationPermission = com.android.bluetooth.Utils.checkCallerHasLocationPermission(this, mAppOps, callingPackage); scanClient.hasPeersMacAddressPermission = com.android.bluetooth.Utils.checkCallerHasPeersMacAddressPermission(this); scanClient.legacyForegroundApp = com.android.bluetooth.Utils.isLegacyForegroundApp(this, callingPackage); mClientMap.getScanStatsById(appIf).startScan(settings); mScanManager.startScan(scanClient); }",7b4a86b684fa27a9764d7c59c2dafc6e226b76a1,"startScan(int,boolean,android.bluetooth.le.ScanSettings,java.util.List,java.util.List,java.lang.String)","startScan(int,boolean,android.bluetooth.le.ScanSettings,java.util.List,java.util.List,java.lang.String)",5,11,"void startScan(int appIf, boolean isServer, android.bluetooth.le.ScanSettings settings, java.util.List<android.bluetooth.le.ScanFilter> filters, java.util.List<java.util.List<android.bluetooth.le.ResultStorageDescriptor>> storages, java.lang.String callingPackage) { if (com.android.bluetooth.gatt.GattService.DBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ""start scan with filters""); enforceAdminPermission(); if (needsPrivilegedPermissionForScan(settings)) { enforcePrivilegedPermission(); } final com.android.bluetooth.gatt.ScanClient scanClient = new com.android.bluetooth.gatt.ScanClient(appIf, isServer, settings, filters, storages); scanClient.hasLocationPermission = com.android.bluetooth.Utils.checkCallerHasLocationPermission(this, mAppOps, callingPackage); scanClient.hasPeersMacAddressPermission = com.android.bluetooth.Utils.checkCallerHasPeersMacAddressPermission(this); scanClient.legacyForegroundApp = com.android.bluetooth.Utils.isLegacyForegroundApp(this, callingPackage); mClientMap.getScanStatsById(appIf).recordScanStart(settings); mScanManager.startScan(scanClient); }",80a5c85368940eff21939ece8b794656f015effb,"startScan(int,boolean,android.bluetooth.le.ScanSettings,java.util.List,java.util.List,java.lang.String)",518552,293,294
204756,sched_src_com_android_sched_scheduler_SingleScheduleInstance.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void run() { process(this, t); }",c9c7d0b2ad2cf89d9607ad0e7d6c34fff874422b,,run(),5,2,"@java.lang.Override public void run() { try { com.android.sched.scheduler.SingleScheduleInstance.Worker.process(schedule, component); } catch (com.android.sched.scheduler.ProcessException e) { exception = e; } }",54d9149eb45542e7cc303ca0bba7727687e146a9,run(),17164,19,55
278609,telecomm_java_android_telecom_Log.java,4.0,"public static void e(java.lang.Object objectPrefix, java.lang.Throwable tr, java.lang.String format, java.lang.Object... args) { if (android.telecom.Log.ERROR) { android.util.Log.e(android.telecom.Log.TAG, android.telecom.Log.buildMessage(android.telecom.Log.getPrefixFromObject(objectPrefix), format, args), tr); } }",84f3ee2f822bfc9c18f7b2f11901e0fce4998ea3,"public static void e(java.lang.Object objectPrefix, java.lang.Throwable tr, java.lang.String format, java.lang.Object... args) { if (android.telecom.Log.ERROR) { android.telecom.Log.systemLogger.e(android.telecom.Log.TAG, android.telecom.Log.buildMessage(android.telecom.Log.getPrefixFromObject(objectPrefix), format, args), tr); } }",69ed08dbcf739d7cabb7768c0fb08b02166bd94c,"e(java.lang.Object,java.lang.Throwable,java.lang.String,java.lang.Object[])","e(java.lang.Object,java.lang.Throwable,java.lang.String,java.lang.Object[])",3,8,"public static void e(java.lang.Object objectPrefix, java.lang.Throwable tr, java.lang.String format, java.lang.Object... args) { if (android.telecom.Log.ERROR) { android.util.Slog.e(android.telecom.Log.TAG, android.telecom.Log.buildMessage(android.telecom.Log.getPrefixFromObject(objectPrefix), format, args), tr); } }",a8a0844d074ac9df2ff2457db2bc0680f7b8e60b,"e(java.lang.Object,java.lang.Throwable,java.lang.String,java.lang.Object[])",122338,106,102
72630,sdklib_src_main_java_com_android_sdklib_repository_local_LocalPkgInfo.java,9.0,@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((getDesc()) == null ? 0 : getDesc().hashCode()); result = (prime * result) + ((mLocalDir) == null ? 0 : mLocalDir.hashCode()); result = (prime * result) + ((mSourceProperties) == null ? 0 : mSourceProperties.hashCode()); return result; },e4eb19a1a87620e4b0b181cd3aa93bc22bb596bd,@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((getDesc()) == null ? 0 : getDesc().hashCode()); result = (prime * result) + ((mLocalDir) == null ? 0 : mLocalDir.hashCode()); result = (prime * result) + ((mSourceProperties) == null ? 0 : mSourceProperties.hashCode()); result = (prime * result) + ((mUpdate) == null ? 0 : mUpdate.hashCode()); return result; },656a0bd4a14303c5ceee993b12009c910c03cbf6,hashCode(),hashCode(),4,8,@java.lang.Override public int hashCode() { final int prime = 31; int result = 1; result = (prime * result) + ((getDesc()) == null ? 0 : getDesc().hashCode()); result = (prime * result) + ((mLocalDir) == null ? 0 : mLocalDir.hashCode()); result = (prime * result) + ((mSourceProperties) == null ? 0 : mSourceProperties.hashCode()); return result; },e4eb19a1a87620e4b0b181cd3aa93bc22bb596bd,hashCode(),61467,125,101
251120,luni_src_main_java_libcore_net_MimeUtils.java,2.0,public static java.lang.String guessMimeTypeFromExtension(java.lang.String extension) { if ((extension == null) || (extension.isEmpty())) { return null; } return libcore.net.MimeUtils.extensionToMimeTypeMap.get(extension); },356379fbd0ea1a739091cdaa7da1f79907cc52a6,public static java.lang.String guessMimeTypeFromExtension(java.lang.String extension) { if ((extension == null) || (extension.isEmpty())) { return null; } extension = extension.toLowerCase(); return libcore.net.MimeUtils.extensionToMimeTypeMap.get(extension); },8e71e10744ec326a0ba0d358e3608b206bcc7c56,guessMimeTypeFromExtension(java.lang.String),guessMimeTypeFromExtension(java.lang.String),8,2,public static java.lang.String guessMimeTypeFromExtension(java.lang.String extension) { if ((extension == null) || (extension.isEmpty())) { return null; } extension = extension.toLowerCase(java.util.Locale.US); return libcore.net.MimeUtils.extensionToMimeTypeMap.get(extension); },0c45a0f57f10fe51c559e43f69dd562c1ed57ccf,guessMimeTypeFromExtension(java.lang.String),336136,63,71
204829,jack_src_com_android_jack_library_v0002_InputJackLibraryImpl.java,2.0,"@java.lang.Override public boolean hasCompliantPrebuilts() { { com.android.sched.util.config.Config config = com.android.sched.util.config.ThreadConfig.getConfig(); java.util.Collection<com.android.sched.util.config.id.PropertyId<?>> properties = config.getPropertyIds(); for (com.android.sched.util.config.id.PropertyId<?> property : properties) { if (property.hasCategory(com.android.jack.library.PrebuiltCompatibility.class)) { try { if (!(getProperty((""config."" + (property.getName()))).equals(config.getAsString(property)))) { return false; } } catch (com.android.jack.library.MissingLibraryPropertyException e) { return false; } } } return true; } }",7e4288aa9d338c8ad98f70f2ccee7209642c1292,"@java.lang.Override public boolean hasCompliantPrebuilts() { com.android.sched.util.config.Config config = com.android.sched.util.config.ThreadConfig.getConfig(); for (com.android.sched.util.config.id.PropertyId<?> property : config.getPropertyIds()) { if (property.hasCategory(com.android.jack.library.PrebuiltCompatibility.class)) { try { java.lang.String value = getProperty((""config."" + (property.getName()))); com.android.jack.library.PrebuiltCompatibility compatibility = property.getCategory(com.android.jack.library.PrebuiltCompatibility.class); if (compatibility != null) { return compatibility.isCompatible(config, value); } else { return config.parseAs(property, value).equals(config.get(property)); } } catch (com.android.jack.library.MissingLibraryPropertyException e) { com.android.jack.library.v0002.InputJackLibraryImpl.logger.log(java.util.logging.Level.FINE, e.getMessage()); return false; } catch (com.android.sched.util.codec.ParsingException e) { com.android.jack.library.v0002.InputJackLibraryImpl.logger.log(java.util.logging.Level.FINE, ""Property ''{0}'' is malformed from library {1}: {2}"", new java.lang.Object[]{ property.getName(), getLocation().getDescription(), e.getMessage() }); return false; } } } return true; }",4c34e60eec1fbc7027d43911eaf453fa3037f1bb,hasCompliantPrebuilts(),hasCompliantPrebuilts(),8,2,"@java.lang.Override public boolean hasCompliantPrebuilts() { com.android.sched.util.config.Config config = com.android.sched.util.config.ThreadConfig.getConfig(); for (com.android.sched.util.config.id.PropertyId<?> property : config.getPropertyIds()) { if (property.hasCategory(com.android.jack.library.PrebuiltCompatibility.class)) { try { java.lang.String value = getProperty((""config."" + (property.getName()))); com.android.jack.library.PrebuiltCompatibility compatibility = property.getCategory(com.android.jack.library.PrebuiltCompatibility.class); if (compatibility != null) { return compatibility.isCompatible(config, value); } else { return config.parseAs(value, property).equals(config.get(property)); } } catch (com.android.jack.library.MissingLibraryPropertyException e) { com.android.jack.library.v0002.InputJackLibraryImpl.logger.log(java.util.logging.Level.FINE, e.getMessage()); return false; } catch (com.android.sched.util.codec.ParsingException e) { com.android.jack.library.v0002.InputJackLibraryImpl.logger.log(java.util.logging.Level.FINE, ""Property ''{0}'' is malformed from library {1}: {2}"", new java.lang.Object[]{ property.getName(), getLocation().getDescription(), e.getMessage() }); return false; } } } return true; }",9d3278893505569d5ea06707b53167b27fabd9e1,hasCompliantPrebuilts(),382274,332,332
154099,src_main_java_org_conscrypt_CryptoUpcalls.java,3.0,"public static java.security.Provider getExternalProvider(java.lang.String algorithm) { java.security.Provider selectedProvider = null; for (java.security.Provider p : java.security.Security.getProviders(algorithm)) { if (!(p.getClass().getClassLoader().equals(org.conscrypt.CryptoUpcalls.class.getClassLoader()))) { selectedProvider = p; break; } } if (selectedProvider == null) { java.lang.System.err.println((""Could not find external provider for algorithm: "" + algorithm)); } return selectedProvider; }",2b7aa0c29a3b82856f440f54f1d22850b8da3553,"public static java.util.ArrayList<java.security.Provider> getExternalProviders(java.lang.String algorithm) { java.util.ArrayList<java.security.Provider> providers = new java.util.ArrayList<>(1); for (java.security.Provider p : java.security.Security.getProviders(algorithm)) { if (!(org.conscrypt.CryptoUpcalls.isOurProvider(p))) { providers.add(p); } } if ((providers.size()) == 0) { java.lang.System.err.println((""Could not find external provider for algorithm: "" + algorithm)); } return providers; }",b64816683241cc607e48a0f99839c9e8aca81181,getExternalProvider(java.lang.String),getExternalProviders(java.lang.String),5,2,"private static java.util.ArrayList<java.security.Provider> getExternalProviders(java.lang.String algorithm) { java.util.ArrayList<java.security.Provider> providers = new java.util.ArrayList<>(1); for (java.security.Provider p : java.security.Security.getProviders(algorithm)) { if (!(org.conscrypt.CryptoUpcalls.isOurProvider(p))) { providers.add(p); } } if (providers.isEmpty()) { java.lang.System.err.println((""Could not find external provider for algorithm: "" + algorithm)); } return providers; }",393c66d6b0c65f47df6be471348ddadc31729531,getExternalProviders(java.lang.String),290059,137,134
253791,luni_src_main_java_libcore_io_Posix.java,47.0,"public native java.lang.String getnameinfo(java.net.InetAddress address, int flags) throws android.system.GaiException;",5de6c8f2158fbf77bd52f8f0d7aa044e31218eb5,"public native java.lang.String getnameinfo(java.net.InetAddress address, int flags) throws libcore.io.GaiException;",9e9701b354863640251268dc88a44258b8f034c2,"getnameinfo(java.net.InetAddress,int)","getnameinfo(java.net.InetAddress,int)",8,45,"public native java.lang.String getnameinfo(java.net.InetAddress address, int flags) throws android.system.GaiException;",5de6c8f2158fbf77bd52f8f0d7aa044e31218eb5,"getnameinfo(java.net.InetAddress,int)",494459,31,30
91995,luni_src_main_java_java_nio_FileChannelImpl.java,8.0,"private int readImpl(java.nio.ByteBuffer buffer, long position) throws java.io.IOException { buffer.checkWritable(); checkOpen(); checkReadable(); if (!(buffer.hasRemaining())) { return 0; } int bytesRead = 0; boolean completed = false; try { begin(); try { if (position == (-1)) { bytesRead = Libcore.os.read(fd, buffer); } else { bytesRead = Libcore.os.pread(fd, buffer, position); } if (bytesRead == 0) { bytesRead = -1; } } catch (libcore.io.ErrnoException errnoException) { if ((errnoException.errno) == (EAGAIN)) { bytesRead = 0; } else { throw errnoException.rethrowAsIOException(); } } completed = true; } finally { end((completed && (bytesRead >= 0))); } if (bytesRead > 0) { buffer.position(((buffer.position()) + bytesRead)); } return bytesRead; }",aec29c8e3f0d28c3cf27c67fc8e51009f44a2f8c,"private int readImpl(java.nio.ByteBuffer buffer, long position) throws java.io.IOException { buffer.checkWritable(); checkOpen(); checkReadable(); if (!(buffer.hasRemaining())) { return 0; } int bytesRead = 0; boolean completed = false; try { begin(); try { if (position == (-1)) { bytesRead = Libcore.os.read(fd, buffer); } else { bytesRead = Libcore.os.pread(fd, buffer, position); } if (bytesRead == 0) { bytesRead = -1; } } catch (android.os.ErrnoException errnoException) { if ((errnoException.errno) == (EAGAIN)) { bytesRead = 0; } else { throw errnoException.rethrowAsIOException(); } } completed = true; } finally { end((completed && (bytesRead >= 0))); } if (bytesRead > 0) { buffer.position(((buffer.position()) + bytesRead)); } return bytesRead; }",6773dd011ef5a3c4b81650499569b5af2f1f884e,"readImpl(java.nio.ByteBuffer,long)","readImpl(java.nio.ByteBuffer,long)",3,8,"private int readImpl(java.nio.ByteBuffer buffer, long position) throws java.io.IOException { buffer.checkWritable(); checkOpen(); checkReadable(); if (!(buffer.hasRemaining())) { return 0; } int bytesRead = 0; boolean completed = false; try { begin(); try { if (position == (-1)) { bytesRead = Libcore.os.read(fd, buffer); } else { bytesRead = Libcore.os.pread(fd, buffer, position); } if (bytesRead == 0) { bytesRead = -1; } } catch (android.system.ErrnoException errnoException) { if ((errnoException.errno) == (EAGAIN)) { bytesRead = 0; } else { throw errnoException.rethrowAsIOException(); } } completed = true; } finally { end((completed && (bytesRead >= 0))); } if (bytesRead > 0) { buffer.position(((buffer.position()) + bytesRead)); } return bytesRead; }",e7eb3cf5822cef1d4b850d30c6ca4bbfd1630f85,"readImpl(java.nio.ByteBuffer,long)",170128,201,201
267394,jack_src_com_android_jack_library_v0002_InputJackLibraryImpl.java,15.0,"@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) { com.android.sched.vfs.InputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VFS prefixedInputVFS = null; try { prefixedInputVFS = new com.android.sched.vfs.PrefixedFS(vfs, com.android.jack.library.v0002.InputJackLibraryImpl.getSectionPath(fileType)); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.NotDirectoryException e) { throw new java.lang.AssertionError(e); } if (fileType == (com.android.jack.library.FileType.PREBUILT)) { try { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(new com.android.sched.vfs.MessageDigestFS(prefixedInputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO))); } catch (com.android.sched.vfs.WrongVFSFormatException e) { throw new java.lang.AssertionError(e); } } else { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(prefixedInputVFS); } sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }",aa511880824f3b9386653fcd00c100b37e7f97fc,"@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) { com.android.sched.vfs.InputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VFS prefixedInputVFS = null; try { prefixedInputVFS = new com.android.sched.vfs.PrefixedFS(vfs, com.android.jack.library.v0002.InputJackLibraryImpl.getSectionPath(fileType)); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.NotDirectoryException e) { throw new java.lang.AssertionError(e); } if (fileType == (com.android.jack.library.FileType.PREBUILT)) { try { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(new com.android.sched.vfs.MessageDigestFS(prefixedInputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO))); } catch (com.android.sched.vfs.WrongVFSFormatException | com.android.sched.vfs.NoDigestFoundException e) { throw new java.lang.AssertionError(e); } } else { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(prefixedInputVFS); } sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }",b5633ae063424eebc170098404096100e78e1faa,getSectionVFS(com.android.jack.library.FileType),getSectionVFS(com.android.jack.library.FileType),5,16,"@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) { com.android.sched.vfs.InputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VFS prefixedInputVFS = null; try { prefixedInputVFS = new com.android.sched.vfs.PrefixedFS(vfs, com.android.jack.library.v0002.InputJackLibraryImpl.getSectionPath(fileType), com.android.sched.util.file.FileOrDirectory.Existence.MUST_EXIST); } catch (com.android.sched.vfs.WrongVFSTypeException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.NotDirectoryException e) { throw new java.lang.AssertionError(e); } if (fileType == (com.android.jack.library.FileType.PREBUILT)) { try { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(new com.android.sched.vfs.MessageDigestFS(prefixedInputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO))); } catch (com.android.sched.vfs.BadVFSFormatException | com.android.sched.vfs.WrongVFSTypeException e) { throw new java.lang.AssertionError(e); } } else { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(prefixedInputVFS); } sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }",c5178815e9c16b2bc53b6e2ccea8d25747b93dd2,getSectionVFS(com.android.jack.library.FileType),98415,368,416
335040,service_java_com_android_server_wifi_SupplicantP2pIfaceHal.java,53.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean setListenChannel(int channel, int operatingClass) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure())) return false; if ((channel < 0) || (operatingClass < 0)) return false; com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult(((((""setListenChannel("" + channel) + "", "") + operatingClass) + "")"")); try { result.setResult(mISupplicantP2pIface.setListenChannel(channel, operatingClass)); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""ISupplicantP2pIface exception: "" + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }",27a56fb65194929d95fe660b20b91e6eb439cab1,,"setListenChannel(int,int)",23,19,"public boolean setListenChannel(int channel, int operatingClass) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure(""setListenChannel""))) return false; if ((channel < 0) || (operatingClass < 0)) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (((""Invalid values supplied to setListenChannel: "" + channel) + "", "") + operatingClass)); return false; } com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult(((((""setListenChannel("" + channel) + "", "") + operatingClass) + "")"")); try { result.setResult(mISupplicantP2pIface.setListenChannel(channel, operatingClass)); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""ISupplicantP2pIface exception: "" + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }",8832e9582a67e0879c4a33b6ffa7a7e637ebd107,"setListenChannel(int,int)",258156,238,297
442212,tests_net_java_android_net_ip_IpReachabilityMonitorTest.java,,,,"android.net.ip.IpReachabilityMonitor makeMonitor() { return new android.net.ip.IpReachabilityMonitor(""fake0"", 1, mLog, mCallback, null, mConfig); }",8db28491fa12377c3f43f436ddc33299a4998f78,,makeMonitor(),4,1,"android.net.ip.IpReachabilityMonitor makeMonitor() { return new android.net.ip.IpReachabilityMonitor(""fake0"", 1, mLog, mCallback, null, mDependencies); }",d6f837d202fdda70ac51a83f84e365dcda12fdc0,makeMonitor(),282898,44,44
54854,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_OpenSSLECDHKeyAgreement.java,1.0,"@java.lang.Override public java.security.Key engineDoPhase(java.security.Key key, boolean lastPhase) throws java.security.InvalidKeyException { if ((mOpenSslPrivateKey) == null) { throw new java.lang.IllegalStateException(""Not initialized""); } if (!lastPhase) { throw new java.lang.IllegalStateException(""ECDH only has one phase""); } if (key == null) { throw new java.security.InvalidKeyException(""key == null""); } if (!(key instanceof java.security.interfaces.ECPublicKey)) { throw new java.security.InvalidKeyException((""This phase requires an ECPublicKey. Actual key type: "" + (key.getClass()))); } java.security.interfaces.ECPublicKey publicKey = ((java.security.interfaces.ECPublicKey) (key)); org.apache.harmony.xnet.provider.jsse.OpenSSLKey openSslPublicKey; if (publicKey instanceof org.apache.harmony.xnet.provider.jsse.OpenSSLECPublicKey) { openSslPublicKey = ((org.apache.harmony.xnet.provider.jsse.OpenSSLECPublicKey) (publicKey)).getOpenSSLKey(); } else { if (!(""X.509"".equals(publicKey.getFormat()))) { throw new java.security.InvalidKeyException((((""Non-OpenSSL public key ("" + (publicKey.getClass())) + "") offers unsupported encoding format: "") + (publicKey.getFormat()))); } byte[] encoded = publicKey.getEncoded(); if (encoded == null) { throw new java.security.InvalidKeyException(((""Non-OpenSSL public key ("" + (publicKey.getClass())) + "") does not provide encoded form"")); } try { openSslPublicKey = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.d2i_PUBKEY(encoded)); } catch (java.lang.Exception e) { throw new java.security.InvalidKeyException(""Failed to decode X.509 encoded public key"", e); } } byte[] buffer = new byte[mExpectedResultLength]; int actualResultLength = org.apache.harmony.xnet.provider.jsse.NativeCrypto.ECDH_compute_key(buffer, 0, openSslPublicKey.getPkeyContext(), mOpenSslPrivateKey.getPkeyContext()); byte[] result; if (actualResultLength == (-1)) { throw new java.lang.RuntimeException((""Engine returned "" + actualResultLength)); } else if (actualResultLength == (mExpectedResultLength)) { result = buffer; } else if (actualResultLength < (mExpectedResultLength)) { result = new byte[actualResultLength]; java.lang.System.arraycopy(buffer, 0, mResult, 0, mResult.length); } else { throw new java.lang.RuntimeException((((""Engine produced a longer than expected result. Expected: "" + (mExpectedResultLength)) + "", actual: "") + actualResultLength)); } mResult = result; return null; }",ea6bc98aa9f94cb0c7a9d6407d8f4229c751ea2b,"@java.lang.Override public java.security.Key engineDoPhase(java.security.Key key, boolean lastPhase) throws java.security.InvalidKeyException { if ((mOpenSslPrivateKey) == null) { throw new java.lang.IllegalStateException(""Not initialized""); } if (!lastPhase) { throw new java.lang.IllegalStateException(""ECDH only has one phase""); } if (key == null) { throw new java.security.InvalidKeyException(""key == null""); } if (!(key instanceof java.security.PublicKey)) { throw new java.security.InvalidKeyException((""Not a public key: "" + (key.getClass()))); } org.apache.harmony.xnet.provider.jsse.OpenSSLKey openSslPublicKey = ((org.apache.harmony.xnet.provider.jsse.OpenSSLKeyHolder) (org.apache.harmony.xnet.provider.jsse.OpenSSLECDHKeyAgreement.translateKeyToOpenSslKey(key))).getOpenSSLKey(); byte[] buffer = new byte[mExpectedResultLength]; int actualResultLength = org.apache.harmony.xnet.provider.jsse.NativeCrypto.ECDH_compute_key(buffer, 0, openSslPublicKey.getPkeyContext(), mOpenSslPrivateKey.getPkeyContext()); byte[] result; if (actualResultLength == (-1)) { throw new java.lang.RuntimeException((""Engine returned "" + actualResultLength)); } else if (actualResultLength == (mExpectedResultLength)) { result = buffer; } else if (actualResultLength < (mExpectedResultLength)) { result = new byte[actualResultLength]; java.lang.System.arraycopy(buffer, 0, mResult, 0, mResult.length); } else { throw new java.lang.RuntimeException((((""Engine produced a longer than expected result. Expected: "" + (mExpectedResultLength)) + "", actual: "") + actualResultLength)); } mResult = result; return null; }",097526faf28e21e7129d11e463b1534b7eebcd0f,"engineDoPhase(java.security.Key,boolean)","engineDoPhase(java.security.Key,boolean)",2,0,"@java.lang.Override public java.security.Key engineDoPhase(java.security.Key key, boolean lastPhase) throws java.security.InvalidKeyException { if ((mOpenSslPrivateKey) == null) { throw new java.lang.IllegalStateException(""Not initialized""); } if (!lastPhase) { throw new java.lang.IllegalStateException(""ECDH only has one phase""); } if (key == null) { throw new java.security.InvalidKeyException(""key == null""); } if (!(key instanceof java.security.PublicKey)) { throw new java.security.InvalidKeyException((""Not a public key: "" + (key.getClass()))); } org.apache.harmony.xnet.provider.jsse.OpenSSLKey openSslPublicKey = org.apache.harmony.xnet.provider.jsse.OpenSSLECDHKeyAgreement.translateKeyToEcOpenSSLKey(key); byte[] buffer = new byte[mExpectedResultLength]; int actualResultLength = org.apache.harmony.xnet.provider.jsse.NativeCrypto.ECDH_compute_key(buffer, 0, openSslPublicKey.getPkeyContext(), mOpenSslPrivateKey.getPkeyContext()); byte[] result; if (actualResultLength == (-1)) { throw new java.lang.RuntimeException((""Engine returned "" + actualResultLength)); } else if (actualResultLength == (mExpectedResultLength)) { result = buffer; } else if (actualResultLength < (mExpectedResultLength)) { result = new byte[actualResultLength]; java.lang.System.arraycopy(buffer, 0, mResult, 0, mResult.length); } else { throw new java.lang.RuntimeException((((""Engine produced a longer than expected result. Expected: "" + (mExpectedResultLength)) + "", actual: "") + actualResultLength)); } mResult = result; return null; }",523fcdbf7943cfc664c840aac034971cdf9482b0,"engineDoPhase(java.security.Key,boolean)",524181,428,400
253791,luni_src_main_java_libcore_io_Os.java,23.0,"public void setreuid(int ruid, int euid) throws android.system.ErrnoException;",b703105a055510e2991209896d8850ff998237cb,"public void setreuid(int ruid, int euid) throws libcore.io.ErrnoException;",98b25a28ef6c540f9dc925156bd2251281e55d9f,"setreuid(int,int)","setreuid(int,int)",8,21,"public void setreuid(int ruid, int euid) throws android.system.ErrnoException;",b703105a055510e2991209896d8850ff998237cb,"setreuid(int,int)",494622,24,23
197692,ojluni_src_main_java_javax_crypto_Cipher.java,14.0,"public final void init(int opmode, java.security.Key key, java.security.SecureRandom random) throws java.security.InvalidKeyException { initialized = false; javax.crypto.Cipher.checkOpmode(opmode); if (((spi) != null) && (((lock) == null) || (key == null))) { checkCryptoPerm(spi, key); spi.engineInit(opmode, key, random); } else { try { chooseProvider(javax.crypto.Cipher.I_KEY, opmode, key, null, null, random); } catch (java.security.InvalidAlgorithmParameterException e) { throw new java.security.InvalidKeyException(e); } } initialized = true; this.opmode = opmode; }",c2d8884dace07838fecaf40ff15076ea9705c326,"public final void init(int opmode, java.security.Key key, java.security.SecureRandom random) throws java.security.InvalidKeyException { initialized = false; javax.crypto.Cipher.checkOpmode(opmode); if (((spi) != null) && (key == null)) { checkCryptoPerm(spi, key); spi.engineInit(opmode, key, random); } else { try { chooseProvider(javax.crypto.Cipher.InitType.KEY, opmode, key, null, null, random); } catch (java.security.InvalidAlgorithmParameterException e) { throw new java.security.InvalidKeyException(e); } } initialized = true; this.opmode = opmode; }",b77cb72d619ef5d10ca23328ec476bc13449e2c0,"init(int,java.security.Key,java.security.SecureRandom)","init(int,java.security.Key,java.security.SecureRandom)",4,15,"public final void init(int opmode, java.security.Key key, java.security.SecureRandom random) throws java.security.InvalidKeyException { initialized = false; javax.crypto.Cipher.checkOpmode(opmode); if (((spi) != null) && (key == null)) { spi.engineInit(opmode, key, random); } else { try { chooseProvider(javax.crypto.Cipher.InitType.KEY, opmode, key, null, null, random); } catch (java.security.InvalidAlgorithmParameterException e) { throw new java.security.InvalidKeyException(e); } } initialized = true; this.opmode = opmode; }",9100453b0bac09b9941145515b5e0132e35d03ab,"init(int,java.security.Key,java.security.SecureRandom)",132284,154,146
41115,src_java_com_android_internal_telephony_ims_IsimFileHandler.java,,,,protected java.lang.String getEFPath(int efid) { switch (efid) { case EF_IMPI : case EF_IMPU : case EF_DOMAIN : return (MF_SIM) + (DF_ADF); } java.lang.String path = getCommonIccEFPath(efid); return path; },2792ce0cdf99aac38696d5b7dc66e3ab1522e9e7,,getEFPath(int),22,1,@java.lang.Override protected java.lang.String getEFPath(int efid) { switch (efid) { case EF_IMPI : case EF_IMPU : case EF_DOMAIN : return (MF_SIM) + (DF_ADF); } java.lang.String path = getCommonIccEFPath(efid); return path; },81c40aa9c08825b6ae019907634d99b39754754b,getEFPath(int),500128,81,87
91995,luni_src_main_java_libcore_io_Posix.java,68.0,public native libcore.io.StructStat fstat(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;,37b257971375c297a26f4a9bbcabf2addc95959b,public native android.os.StructStat fstat(java.io.FileDescriptor fd) throws android.os.ErrnoException;,ea6d0118495d6b428060d4d16940fd179e1b578e,fstat(java.io.FileDescriptor),fstat(java.io.FileDescriptor),3,67,public native android.system.StructStat fstat(java.io.FileDescriptor fd) throws android.system.ErrnoException;,1bd3e23e97eaab52ce3942875d158a2154fa6ac8,fstat(java.io.FileDescriptor),169844,27,27
81416,tests_tests_renderscript_src_android_renderscript_cts_TestClz.java,,,,"private void verifyResultsClzChar(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { byte[] arrayInValue = new byte[(INPUTSIZE) * 1]; inValue.copyTo(arrayInValue); byte[] arrayOut = new byte[(INPUTSIZE) * 1]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 1; j++) { android.renderscript.cts.TestClz.ArgumentsCharChar args = new android.renderscript.cts.TestClz.ArgumentsCharChar(); args.inValue = arrayInValue[i]; android.renderscript.cts.CoreMathVerifier.computeClz(args); byte actualOut = arrayOut[((i * 1) + j)]; int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; float ulpf; ulpf = (java.lang.Math.ulp(args.out)) * ulf; assertEquals((((((((((((((((((""Incorrect output for checkClzChar"" + (relaxed ? ""_relaxed"" : """")) + "" @["") + i) + "", "") + j) + ""] with ulf:"") + ulf) + "".\n"") + ""Input inValue:"") + (args.inValue)) + ""\n"") + ""Expected output out:"") + (args.out)) + ""\n"") + ""Actual output out:"") + actualOut) + ""\n""), args.out, actualOut, ulpf); } } }",cd143ab34f3fb2bb774160cec734def0369dd9ee,,"verifyResultsClzChar(android.renderscript.Allocation,android.renderscript.Allocation,boolean)",9,45,"private void verifyResultsClzCharChar(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { byte[] arrayInValue = new byte[(INPUTSIZE) * 1]; inValue.copyTo(arrayInValue); byte[] arrayOut = new byte[(INPUTSIZE) * 1]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 1; j++) { android.renderscript.cts.TestClz.ArgumentsCharChar args = new android.renderscript.cts.TestClz.ArgumentsCharChar(); args.inValue = arrayInValue[i]; android.renderscript.cts.CoreMathVerifier.computeClz(args); int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; boolean valid = true; int neededUlf = 0; if ((args.out) != (arrayOut[((i * 1) + j)])) { valid = false; } if (!valid) { java.lang.StringBuilder message = new java.lang.StringBuilder(); message.append(java.lang.String.format(""Input inValue: %d"", args.inValue)); message.append(""\n""); message.append(java.lang.String.format(""Expected output out: %d"", args.out)); message.append(""\n""); message.append(java.lang.String.format(""Actual output out: %d"", arrayOut[((i * 1) + j)])); if ((args.out) != (arrayOut[((i * 1) + j)])) { message.append("" FAIL""); } message.append(""\n""); assertTrue((((""Incorrect output for checkClzCharChar"" + (relaxed ? ""_relaxed"" : """")) + "":\n"") + (message.toString())), valid); } } } }",43c34b8e988c95b183e46f19827a8e10e8bbba4b,"verifyResultsClzCharChar(android.renderscript.Allocation,android.renderscript.Allocation,boolean)",143432,365,420
233353,test_vogar_target_TestRunnerTest.java,2.0,"@vogar.target.TestRunnerProperties(testClass = vogar.target.TestRunnerTest.JUnit3Test.class) @org.junit.Test public void testConstructor_SkipPastJUnitRunner() throws java.lang.Exception { java.lang.String failingTestName = (vogar.target.TestRunnerTest.JUnit3Test.class.getName()) + ""#testMethodName""; vogar.target.TestRunner runner = testRunnerRule.createTestRunner(""--skipPast"", failingTestName); java.lang.String skipPast = runner.skipPastReference.get(); assertEquals(failingTestName, skipPast); runner.run(); assertEquals(((((("""" + ""//00xx{\""outcome\"":\"""") + (vogar.target.TestRunnerTest.JUnit3Test.class.getName())) + ""#testOtherName\""}\n"") + ""//00xx{\""result\"":\""SUCCESS\""}\n"") + ""//00xx{\""completedNormally\"":true}\n""), ios.contents(Stream.OUT)); }",66f6ad2d7192d5808893722be97f2075b867af7c,@vogar.target.TestRunnerProperties(testClass = java.lang.Object.class) @org.junit.Test public void testRunner_Object() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().noRunner().completedNormally(); },2407a66a01c2e3b7ba41edbf9c33abae7ccec0a9,testConstructor_SkipPastJUnitRunner(),testRunner_Object(),3,3,@vogar.target.TestRunnerProperties(testClass = java.lang.Object.class) @org.junit.Test public void testRunner_Object() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); expectedResults().noRunner().completedNormally(); },16aa8f48f499ef294185f3b43d9880d53869593f,testRunner_Object(),130746,72,71
336363,luni_src_test_java_libcore_java_util_CalendarBuilderTest.java,,,,"@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void test_set_field_too_high() { builder.set(java.util.Calendar.FIELD_COUNT, 1); }",5921edda14f23551410ef9c9ff3991f6866a397a,,test_set_field_too_high(),3,26,"@org.junit.Test(expected = java.lang.IllegalArgumentException.class) public void test_set_field_too_high() { new java.util.Calendar.Builder().set(java.util.Calendar.FIELD_COUNT, 1); }",b3be251bd80e9e5e4550c0ebb6ad6745a705b420,test_set_field_too_high(),98482,47,54
17745,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_RemotePackagesPage.java,18.0,"private void onRemoveSiteSelected() { boolean changed = false; org.eclipse.jface.viewers.ISelection sel = mTreeViewerSources.getSelection(); if (((mUpdaterData) != null) && (sel instanceof org.eclipse.jface.viewers.ITreeSelection)) { for (java.lang.Object c : ((org.eclipse.jface.viewers.ITreeSelection) (sel)).toList()) { if ((c instanceof com.android.sdklib.internal.repository.SdkSource) && (((com.android.sdklib.internal.repository.SdkSource) (c)).isUserSource())) { com.android.sdklib.internal.repository.SdkSource source = ((com.android.sdklib.internal.repository.SdkSource) (c)); java.lang.String title = ""Delete Add-on Site?""; java.lang.String msg = java.lang.String.format(""Are you sure you want to delete the add-on site '%1$s'?"", source.getUrl()); if (org.eclipse.jface.dialogs.MessageDialog.openQuestion(getShell(), title, msg)) { mUpdaterData.getSources().remove(source); changed = true; } } } } if (changed) { onRefreshSelected(); } }",48749a6317af3a142314dca980d526a4d74b5356,"private void onRemoveSiteSelected() { boolean changed = false; org.eclipse.jface.viewers.ISelection sel = mTreeViewerSources.getSelection(); if (((mUpdaterData) != null) && (sel instanceof org.eclipse.jface.viewers.ITreeSelection)) { for (java.lang.Object c : ((org.eclipse.jface.viewers.ITreeSelection) (sel)).toList()) { if (c instanceof com.android.sdklib.internal.repository.SdkSource) { com.android.sdklib.internal.repository.SdkSource source = ((com.android.sdklib.internal.repository.SdkSource) (c)); if (mUpdaterData.getSources().hasSource(SdkSourceCategory.USER_ADDONS, source)) { java.lang.String title = ""Delete Add-on Site?""; java.lang.String msg = java.lang.String.format(""Are you sure you want to delete the add-on site '%1$s'?"", source.getUrl()); if (org.eclipse.jface.dialogs.MessageDialog.openQuestion(getShell(), title, msg)) { mUpdaterData.getSources().remove(source); changed = true; } } } } } if (changed) { onRefreshSelected(); } }",a78a92928eebc16dac102851503ec69a50877d3e,onRemoveSiteSelected(),onRemoveSiteSelected(),3,19,"private void onRemoveSiteSelected() { boolean changed = false; org.eclipse.jface.viewers.ISelection sel = mTreeViewerSources.getSelection(); if (((mUpdaterData) != null) && (sel instanceof org.eclipse.jface.viewers.ITreeSelection)) { for (java.lang.Object c : ((org.eclipse.jface.viewers.ITreeSelection) (sel)).toList()) { if (c instanceof com.android.sdklib.internal.repository.SdkSource) { com.android.sdklib.internal.repository.SdkSource source = ((com.android.sdklib.internal.repository.SdkSource) (c)); if (mUpdaterData.getSources().hasSourceUrl(SdkSourceCategory.USER_ADDONS, source)) { java.lang.String title = ""Delete Add-on Site?""; java.lang.String msg = java.lang.String.format(""Are you sure you want to delete the add-on site '%1$s'?"", source.getUrl()); if (org.eclipse.jface.dialogs.MessageDialog.openQuestion(getShell(), title, msg)) { mUpdaterData.getSources().remove(source); changed = true; } } } } } if (changed) { onRefreshSelected(); } }",2d79a9861fba84257939461e7acdf7798ead2529,onRemoveSiteSelected(),435881,281,282
105901,build-system_gradle_src_main_groovy_com_android_build_gradle_model_DefaultAndroidComponentSpec.java,,,,@java.lang.Override public void setExtension(com.android.build.gradle.BaseExtension extension) { this.extension = extension; },8f2b35ebb9a82d4b280f8343778a9cae97716693,,setExtension(com.android.build.gradle.BaseExtension),15,2,public void setExtension(com.android.build.gradle.BaseExtension extension) { this.extension = extension; },63a009285d7f6424260514171c1e8b67630cfa6a,setExtension(com.android.build.gradle.BaseExtension),513921,31,25
159710,tests_tests_hardware_src_android_hardware_camera2_cts_PerformanceTest.java,6.0,"private void initializeImageReader(java.lang.String cameraId, int format) throws java.lang.Exception { mOrderedPreviewSizes = android.hardware.camera2.cts.CameraTestUtils.getSupportedPreviewSizes(cameraId, mCameraManager, CameraTestUtils.PREVIEW_SIZE_BOUND); android.util.Size maxPreviewSize = mOrderedPreviewSizes.get(0); createImageReader(maxPreviewSize, format, android.hardware.camera2.cts.PerformanceTest.NUM_MAX_IMAGES, null); updatePreviewSurface(maxPreviewSize); }",439afe0879308f05a718034a3fe6e8bf5f9289d0,"private void initializeImageReader(java.lang.String cameraId, int format) throws java.lang.Exception { mOrderedPreviewSizes = android.hardware.camera2.cts.CameraTestUtils.getSupportedPreviewSizes(cameraId, mCameraManager, getDisplaySize()); android.util.Size maxPreviewSize = mOrderedPreviewSizes.get(0); createImageReader(maxPreviewSize, format, android.hardware.camera2.cts.PerformanceTest.NUM_MAX_IMAGES, null); updatePreviewSurface(maxPreviewSize); }",cd4440088c33bcaa6469f75e705dfd51b6c4f34e,"initializeImageReader(java.lang.String,int)","initializeImageReader(java.lang.String,int)",4,6,"private void initializeImageReader(java.lang.String cameraId, int format) throws java.lang.Exception { mOrderedPreviewSizes = android.hardware.camera2.cts.CameraTestUtils.getSupportedPreviewSizes(cameraId, mCameraManager, android.hardware.camera2.cts.CameraTestUtils.getPreviewSizeBound(mWindowManager, CameraTestUtils.PREVIEW_SIZE_BOUND)); android.util.Size maxPreviewSize = mOrderedPreviewSizes.get(0); createImageReader(maxPreviewSize, format, android.hardware.camera2.cts.PerformanceTest.NUM_MAX_IMAGES, null); updatePreviewSurface(maxPreviewSize); }",b3a6e9d6f04f7763270ce06540be7e9d25b40034,"initializeImageReader(java.lang.String,int)",204091,111,141
153032,luni_src_main_java_java_lang_StrictMath.java,28.0,public static native double floor(double d);,94a31d5d4a99b38fafbaf9faf8e4ded076d3ba1d,public static double floor(double d) { int i; int j; final long bits = java.lang.Double.doubleToRawLongBits(d); int highBits = ((int) (bits >>> 32)); int lowBits = ((int) (bits)); int exp = ((highBits >> 20) & 2047) - 1023; if (exp < 0) { if (((java.lang.StrictMath.HUGE) + d) > 0.0) { if (highBits >= 0) { highBits = 0; } else if (((highBits & 2147483647) | lowBits) != 0) { highBits = -1074790400; } lowBits = 0; } } else if (exp < 20) { i = 1048575 >> exp; if (((highBits & i) | lowBits) == 0) { return d; } if (((java.lang.StrictMath.HUGE) + d) > 0.0) { if (highBits < 0) { highBits += 1048576 >> exp; } highBits &= ~i; lowBits = 0; } } else if (exp > 51) { if (exp == 1024) { return d + d; } return d; } else { i = -1 >> (exp - 20); if ((lowBits & i) == 0) { return d; } if (((java.lang.StrictMath.HUGE) + d) > 0.0) { if (highBits < 0) { if (exp == 20) { highBits += 1; } else { j = lowBits + (1 << (52 - exp)); if (j < lowBits) { highBits += 1; } lowBits = j; } } lowBits &= ~i; } } return java.lang.Double.longBitsToDouble(((((long) (highBits)) << 32) + lowBits)); },c7e08ff9e4d888ebbe684327ab7e513e2bf0d6aa,floor(double),floor(double),9,29,public static double floor(double d) { final long bits = java.lang.Double.doubleToRawLongBits(d); int highBits = java.lang.StrictMath.highBits(bits); int lowBits = java.lang.StrictMath.lowBits(bits); int exp = ((highBits >> 20) & 2047) - 1023; if (exp < 0) { if (((java.lang.StrictMath.HUGE) + d) > 0.0) { if (highBits >= 0) { highBits = 0; } else if (((highBits & 2147483647) | lowBits) != 0) { highBits = -1074790400; } lowBits = 0; } } else if (exp < 20) { int i = 1048575 >> exp; if (((highBits & i) | lowBits) == 0) { return d; } if (((java.lang.StrictMath.HUGE) + d) > 0.0) { if (highBits < 0) { highBits += 1048576 >> exp; } highBits &= ~i; lowBits = 0; } } else if (exp > 51) { if (exp == 1024) { return d + d; } return d; } else { int i = -1 >>> (exp - 20); if ((lowBits & i) == 0) { return d; } if (((java.lang.StrictMath.HUGE) + d) > 0.0) { if (highBits < 0) { if (exp == 20) { highBits += 1; } else { int j = ((int) (lowBits + (1 << (52 - exp)))); if ((lowBits < 0) && (j >= 0)) { highBits += 1; } lowBits = j; } } lowBits &= ~i; } } return java.lang.Double.longBitsToDouble(((((long) (highBits)) << 32) + (lowBits & 4294967295L))); },abf7a1f17f74e7df254348137196445e1357c17b,floor(double),14206,392,414
81413,v8_renderscript_java_src_android_support_v8_renderscript_FieldPacker.java,32.0,"public void addI8(android.support.v8.renderscript.Byte4 v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addI8(new android.renderscript.Byte4(v.x, v.y, v.z, v.w)); return; } addI8(v.x); addI8(v.y); addI8(v.z); addI8(v.w); }",9f8fdc5aec0e7350176ada8182c3ba509e4e1889,"public void addI8(android.support.v8.renderscript.Byte4 v) { if (shouldThunk()) { mN.addI8(new android.renderscript.Byte4(v.x, v.y, v.z, v.w)); return; } addI8(v.x); addI8(v.y); addI8(v.z); addI8(v.w); }",9a766e7df4346414aecb42328819da25e86e2874,addI8(android.support.v8.renderscript.Byte4),addI8(android.support.v8.renderscript.Byte4),5,31,"public void addI8(android.support.v8.renderscript.Byte4 v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addI8(new android.renderscript.Byte4(v.x, v.y, v.z, v.w)); return; } addI8(v.x); addI8(v.y); addI8(v.z); addI8(v.w); }",9f8fdc5aec0e7350176ada8182c3ba509e4e1889,addI8(android.support.v8.renderscript.Byte4),205140,97,110
186130,jack-tests_tests_com_android_jack_java8_MethodRefTest.java,2.0,"@org.junit.Test public void testMethodRef009() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(METHODREF009).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",0c9231d81bef2c3e914b77b72af1f6741ae6cd2d,"@org.junit.Test public void testMethodRef009() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(METHODREF009).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",e9fbec575f608eba3e59731cf3c4aca968715801,testMethodRef009(),testMethodRef009(),7,2,@org.junit.Test public void testMethodRef009() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(METHODREF009).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },4149770328536e3b8e32fc0a895f0c8f9cd63baa,testMethodRef009(),466397,79,53
296426,system_image_uitests_app_src_androidTest_java_com_android_devtools_systemimage_uitest_smoke_VpnTest.java,2.0,private static boolean verifyVpnStatus(final android.support.test.uiautomator.UiDevice device) throws java.lang.Exception { device.openNotification(); boolean isTrue = new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { return (device.hasObject(android.support.test.uiautomator.By.res(Res.VPN_LOCK_ICON_RES))) || (device.hasObject(android.support.test.uiautomator.By.text(com.android.devtools.systemimage.uitest.smoke.VpnTest.VPN_ACTIVATED_TEXT))); } }); device.pressHome(); return isTrue; },aa839136467d28474f82fa56a912a29cb42b4e3c,"private static boolean verifyVpnStatus(final android.support.test.uiautomator.UiDevice device) throws java.lang.Exception { device.openNotification(); boolean isTrue = false; if ((com.android.devtools.systemimage.uitest.utils.SystemUtil.getApiLevel()) >= 24) { device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(""com.android.systemui:id/expand_indicator"").className(""android.widget.ImageView"")).click(); isTrue = new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { return device.hasObject(android.support.test.uiautomator.By.text(com.android.devtools.systemimage.uitest.smoke.VpnTest.NETWORK_MONITORED_TEXT)); } }); } else { isTrue = new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { return (device.hasObject(android.support.test.uiautomator.By.res(Res.VPN_LOCK_ICON_RES))) || (device.hasObject(android.support.test.uiautomator.By.text(com.android.devtools.systemimage.uitest.smoke.VpnTest.VPN_ACTIVATED_TEXT))); } }); } device.pressHome(); return isTrue; }",6fa469a4edaeeb666eb5d49c89869a93808c4bd8,verifyVpnStatus(android.support.test.uiautomator.UiDevice),verifyVpnStatus(android.support.test.uiautomator.UiDevice),3,1,"private boolean verifyVpnStatus(final android.support.test.uiautomator.UiDevice device) throws java.lang.Exception { device.openNotification(); boolean isTrue = false; if ((testFramework.getApi()) >= 24) { device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(""com.android.systemui:id/expand_indicator"").className(""android.widget.ImageView"")).click(); isTrue = new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { return device.hasObject(android.support.test.uiautomator.By.text(com.android.devtools.systemimage.uitest.smoke.VpnTest.NETWORK_MONITORED_TEXT)); } }); } else { isTrue = new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { return (device.hasObject(android.support.test.uiautomator.By.res(Res.VPN_LOCK_ICON_RES))) || (device.hasObject(android.support.test.uiautomator.By.text(com.android.devtools.systemimage.uitest.smoke.VpnTest.VPN_ACTIVATED_TEXT))); } }); } device.pressHome(); return isTrue; }",e01f4e494faa3a351d0aa2ffddde732a30e12c9d,verifyVpnStatus(android.support.test.uiautomator.UiDevice),435297,384,368
62820,gradle_src_main_groovy_com_android_build_gradle_internal_model_BuildTypeImpl.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.android.annotations.Nullable @java.lang.Override public java.lang.String getProguardRules() { return proguardRules; },8ddcc0fe97f65a3ee633ba2b1f32ff7757252416,,getProguardRules(),9,11,@com.android.annotations.NonNull @java.lang.Override public java.util.List<java.io.File> getConsumerProguardFiles() { return java.util.Collections.emptyList(); },d77a7c4f5b94045570965e186e514fd3321a4061,getConsumerProguardFiles(),105344,32,44
19529,src_com_android_stk_StkDialogActivity.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onDestroy() { super.onDestroy(); if (!(mIsResponseSent)) { sendResponse(StkAppService.RES_ID_TIMEOUT); } },aef66ac0971ebf3b9e275488b0e71ae43aa19d30,,onDestroy(),7,1,@java.lang.Override public void onStop() { super.onStop(); if (!(mIsResponseSent)) { sendResponse(StkAppService.RES_ID_TIMEOUT); } },d35705610cd63551dbbe7dc325b530c623fd7bba,onStop(),225054,38,38
175765,luni_src_main_java_java_math_BigInt.java,28.0,"static java.math.BigInt generatePrimeDefault(int bitLength) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_generate_prime_ex(r.bignum, bitLength, false, 0, 0, 0); return r; }",702bd41d828f840695b126f814d3f75d64eb7d9f,"static java.math.BigInt generatePrimeDefault(int bitLength) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_generate_prime_ex(r.nativePtr, bitLength, false, 0, 0, 0); return r; }",0c8e07c806f4535b06007542d3b58e978ba91b40,generatePrimeDefault(int),generatePrimeDefault(int),10,27,"static java.math.BigInt generatePrimeDefault(int bitLength) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_generate_prime_ex(r.bignum, bitLength, false, 0, 0, 0); return r; }",702bd41d828f840695b126f814d3f75d64eb7d9f,generatePrimeDefault(int),337187,65,65
272714,luni_src_test_java_libcore_java_security_SignatureTest.java,45.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testSignature_updateArray_invalidLengths_throws() throws java.lang.Exception { try { java.security.Signature s = new libcore.java.security.SignatureTest.MySignature(""FOO""); s.update(new byte[4], 3, 2); fail(); } catch (java.lang.IllegalArgumentException expected) { } }",057397007261616f583b6d43f7dc390494f6ca85,,testSignature_updateArray_invalidLengths_throws(),4,68,"public void testSignature_updateArray_invalidLengths_throws() throws java.lang.Exception { try { java.security.Signature s = new libcore.java.security.SignatureTest.MySignature(""FOO""); s.initVerify(libcore.java.security.SignatureTest.createPublicKey()); s.update(new byte[4], 3, 2); fail(); } catch (java.lang.IllegalArgumentException expected) { } }",0edd8689bd11f80c7e2c5481d11f420d6192f1f8,testSignature_updateArray_invalidLengths_throws(),29372,74,93
335040,service_java_com_android_server_wifi_WifiNative.java,286.0,"public boolean p2pSetChannel(int lc, int oc) { if (com.android.server.wifi.WifiNative.DBG) android.util.Log.d(mTAG, (((""p2pSetChannel: lc="" + lc) + "", oc="") + oc)); synchronized(com.android.server.wifi.WifiNative.sLock) { if ((lc >= 1) && (lc <= 11)) { if (!(doBooleanCommand((""P2P_SET listen_channel "" + lc)))) { return false; } } else if (lc != 0) { return false; } if ((oc >= 1) && (oc <= 165)) { int freq = (oc <= 14 ? 2407 : 5000) + (oc * 5); return doBooleanCommand(((((""P2P_SET disallow_freq 1000-"" + (freq - 5)) + "","") + (freq + 5)) + ""-6000"")); } else if (oc == 0) { return doBooleanCommand(""P2P_SET disallow_freq \""\""""); } } return false; }",4de4c2aeb4987d92e02972e99b858ae02ec12e0a,"public boolean p2pSetChannel(int lc, int oc) { if (com.android.server.wifi.WifiNative.DBG) android.util.Log.d(mTAG, (((""p2pSetChannel: lc="" + lc) + "", oc="") + oc)); if ((com.android.server.wifi.WifiNative.HIDL_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.setListenChannel(lc, oc); } else { synchronized(com.android.server.wifi.WifiNative.sLock) { if ((lc >= 1) && (lc <= 11)) { if (!(doBooleanCommand((""P2P_SET listen_channel "" + lc)))) { return false; } } else if (lc != 0) { return false; } if ((oc >= 1) && (oc <= 165)) { int freq = (oc <= 14 ? 2407 : 5000) + (oc * 5); return doBooleanCommand(((((""P2P_SET disallow_freq 1000-"" + (freq - 5)) + "","") + (freq + 5)) + ""-6000"")); } else if (oc == 0) { return doBooleanCommand(""P2P_SET disallow_freq \""\""""); } } return false; } }",eb3203216d9139f2ec0e212b27b642df579195f8,"p2pSetChannel(int,int)","p2pSetChannel(int,int)",23,296,"public boolean p2pSetChannel(int lc, int oc) { if (com.android.server.wifi.WifiNative.DBG) android.util.Log.d(mTAG, (((""p2pSetChannel: lc="" + lc) + "", oc="") + oc)); if ((com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.setListenChannel(lc, oc); } else { synchronized(com.android.server.wifi.WifiNative.sLock) { if ((lc >= 1) && (lc <= 11)) { if (!(doBooleanCommand((""P2P_SET listen_channel "" + lc)))) { return false; } } else if (lc != 0) { return false; } if ((oc >= 1) && (oc <= 165)) { int freq = (oc <= 14 ? 2407 : 5000) + (oc * 5); return doBooleanCommand(((((""P2P_SET disallow_freq 1000-"" + (freq - 5)) + "","") + (freq + 5)) + ""-6000"")); } else if (oc == 0) { return doBooleanCommand(""P2P_SET disallow_freq \""\""""); } } return false; } }",f32e3dcb6cf4d6171fd25df16898497441d622fc,"p2pSetChannel(int,int)",258410,303,307
54626,gradle_src_main_groovy_com_android_build_gradle_internal_DefaultAndroidSourceSet.java,23.0,@java.lang.Override public java.io.File getManifestFile() { return getManifest().getFile(); },ec76cd171afe16c7c6942144622a0e913e7f6148,@java.lang.Override public java.io.File getManifestFile() { return getManifest().getSrcFile(); },20c5d113062abab0e5c16b1fa8c24d83c9048994,getManifestFile(),getManifestFile(),2,23,@java.lang.Override @com.android.annotations.NonNull public java.io.File getManifestFile() { return getManifest().getSrcFile(); },814df930df94d17ae263f81b1cb311d5de159326,getManifestFile(),334700,26,34
112777,jack_src_com_android_jack_library_LibraryFormatException.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.lang.String getMessage() { return ((location.getDescription()) + "" is invalid library:"") + (super.getMessage()); }",3558e0bb8b19f60937adf8c890d3ef97158fc07c,,getMessage(),12,0,"@java.lang.Override @javax.annotation.Nonnull public java.lang.String getMessage() { return (location.getDescription()) + "" is an invalid library""; }",5d34d8476c0ca881c8ef5f7f8f77a26455509658,getMessage(),442639,37,36
124242,jack_tests_com_android_jack_test_TestingEnvironment.java,,,,"@javax.annotation.Nonnull public static java.lang.String getProperty(@javax.annotation.Nonnull java.lang.String key) { java.lang.String value = com.android.jack.test.TestingEnvironment.testsProperties.getProperty(key); if (value == null) { throw new com.android.jack.test.TestConfigurationException(((""Undefined property : '"" + key) + ""'"")); } return value; }",bd57da5b5cf9017c7e710d1eff87d2d1195c6252,,getProperty(java.lang.String),4,1,"@javax.annotation.Nonnull public static java.lang.String getProperty(@javax.annotation.Nonnull java.lang.String key) { java.lang.String value = com.android.jack.test.TestsProperties.testsProperties.getProperty(key); if (value == null) { throw new com.android.jack.test.TestConfigurationException(((""Undefined property : '"" + key) + ""'"")); } return value; }",ea90e71998eba82f8812dda62b149b78b0d7f1bf,getProperty(java.lang.String),430893,94,94
42594,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_ui_PackagesPageImpl.java,,,,@java.lang.Override public void run() { if (changed || ((mTreeViewer.getInput()) != (mDiffLogic.getCategories(isSortByApi())))) { refreshViewerInput(); } },e433ef8a6491bea2f36584a2f983aaab57dab2de,,run(),8,24,@java.lang.Override public void run() { if (changed || ((mITreeViewer.getInput()) != (mDiffLogic.getCategories(isSortByApi())))) { refreshViewerInput(); } },e622d10a3f948d20ed84da3cf955536e225e9a33,run(),195208,45,46
482238,tests_net_java_com_android_server_connectivity_NetdEventListenerServiceTest.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testWakeupStatsLogging() throws java.lang.Exception { wakeupEvent(""wlan0"", 1000); wakeupEvent(""rmnet0"", 10123); wakeupEvent(""wlan0"", 1000); wakeupEvent(""rmnet0"", 10008); wakeupEvent(""wlan0"", (-1)); wakeupEvent(""wlan0"", 10008); wakeupEvent(""rmnet0"", 1000); wakeupEvent(""wlan0"", 10004); wakeupEvent(""wlan0"", 1000); wakeupEvent(""wlan0"", (-1)); wakeupEvent(""rmnet0"", 10052); wakeupEvent(""rmnet0"", 1000); java.lang.String got = flushStatistics(); java.lang.String want = java.lang.String.join(""\n"", ""dropped_events: 0"", ""events <"", "" if_name: \""\"""", "" link_layer: 2"", "" network_id: 0"", "" time_ms: 0"", "" transports: 0"", "" wakeup_stats <"", "" anonymous_wakeups: 0"", "" application_wakeups: 3"", "" duration_sec: 0"", "" frameworks_wakeups: 2"", "" total_wakeups: 5"", "" >"", "">"", ""events <"", "" if_name: \""\"""", "" link_layer: 4"", "" network_id: 0"", "" time_ms: 0"", "" transports: 0"", "" wakeup_stats <"", "" anonymous_wakeups: 2"", "" application_wakeups: 2"", "" duration_sec: 0"", "" frameworks_wakeups: 3"", "" total_wakeups: 7"", "" >"", "">"", ""version: 2\n""); assertEquals(want, got); }",38c8af633dfbc8233605279a555daefa93eb4a39,,testWakeupStatsLogging(),3,0,"@org.junit.Test public void testWakeupStatsLogging() throws java.lang.Exception { wakeupEvent(""wlan0"", 1000); wakeupEvent(""rmnet0"", 10123); wakeupEvent(""wlan0"", 1000); wakeupEvent(""rmnet0"", 10008); wakeupEvent(""wlan0"", (-1)); wakeupEvent(""wlan0"", 10008); wakeupEvent(""rmnet0"", 1000); wakeupEvent(""wlan0"", 10004); wakeupEvent(""wlan0"", 1000); wakeupEvent(""wlan0"", 0); wakeupEvent(""wlan0"", (-1)); wakeupEvent(""rmnet0"", 10052); wakeupEvent(""wlan0"", 0); wakeupEvent(""rmnet0"", 1000); wakeupEvent(""wlan0"", 1010); java.lang.String got = flushStatistics(); java.lang.String want = java.lang.String.join(""\n"", ""dropped_events: 0"", ""events <"", "" if_name: \""\"""", "" link_layer: 2"", "" network_id: 0"", "" time_ms: 0"", "" transports: 0"", "" wakeup_stats <"", "" application_wakeups: 3"", "" duration_sec: 0"", "" non_application_wakeups: 0"", "" root_wakeups: 0"", "" system_wakeups: 2"", "" total_wakeups: 5"", "" unrouted_wakeups: 0"", "" >"", "">"", ""events <"", "" if_name: \""\"""", "" link_layer: 4"", "" network_id: 0"", "" time_ms: 0"", "" transports: 0"", "" wakeup_stats <"", "" application_wakeups: 2"", "" duration_sec: 0"", "" non_application_wakeups: 1"", "" root_wakeups: 2"", "" system_wakeups: 3"", "" total_wakeups: 10"", "" unrouted_wakeups: 2"", "" >"", "">"", ""version: 2\n""); assertEquals(want, got); }",3036360ce5ec3f553bc26dcd27e5a462f6d3537a,testWakeupStatsLogging(),455544,363,429
223822,server_jack-server_src_com_android_jack_server_type_CommandOut.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void close(int exitCode) throws java.io.IOException;,fbeb9eb521d948242fe40daa624de0ccc064ff51,,close(int),7,0,void close(int exitCode) throws java.io.IOException;,9843e42f3b24f7f2f3775f65ae3433018aa6c254,close(int),437306,14,13
637156,src_java_com_android_internal_telephony_ims_ImsServiceController.java,0.0,"private void removeImsServiceFeature(android.util.Pair<java.lang.Integer, java.lang.Integer> featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ""removeImsServiceFeature called with null values.""); return; } com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback callbackToRemove = mFeatureStatusCallbacks.stream().filter(( c) -> ((c.mSlotId) == (featurePair.first)) && ((c.mFeatureType) == (featurePair.second))).findFirst().orElse(null); if (callbackToRemove != null) { mFeatureStatusCallbacks.remove(callbackToRemove); } removeImsFeature(featurePair.first, featurePair.second, (callbackToRemove != null ? callbackToRemove.getCallback() : null)); removeImsFeatureBinder(featurePair.first, featurePair.second); mCallbacks.imsServiceFeatureRemoved(featurePair.first, featurePair.second, this); sendImsFeatureRemovedCallback(featurePair.first, featurePair.second); }",522f152dd5bcae71f8f18d0ace092f8d456a52b6,"private void removeImsServiceFeature(android.util.Pair<java.lang.Integer, java.lang.Integer> featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ""removeImsServiceFeature called with null values.""); return; } if ((featurePair.second) != (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback callbackToRemove = mFeatureStatusCallbacks.stream().filter(( c) -> ((c.mSlotId) == (featurePair.first)) && ((c.mFeatureType) == (featurePair.second))).findFirst().orElse(null); if (callbackToRemove != null) { mFeatureStatusCallbacks.remove(callbackToRemove); } removeImsFeature(featurePair.first, featurePair.second, (callbackToRemove != null ? callbackToRemove.getCallback() : null)); removeImsFeatureBinder(featurePair.first, featurePair.second); mCallbacks.imsServiceFeatureRemoved(featurePair.first, featurePair.second, this); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, (""doesn't support emergency calling on slot "" + (featurePair.first))); } sendImsFeatureRemovedCallback(featurePair.first, featurePair.second); }",e75e05ccbcb7828212dfb3a8fa925e54c20d3c36,removeImsServiceFeature(android.util.Pair),removeImsServiceFeature(android.util.Pair),3,3,"private void removeImsServiceFeature(android.telephony.ims.stub.ImsFeatureConfiguration.FeatureSlotPair featurePair) throws android.os.RemoteException { if ((!(isServiceControllerAvailable())) || ((mCallbacks) == null)) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, ""removeImsServiceFeature called with null values.""); return; } if ((featurePair.featureType) != (android.telephony.ims.feature.ImsFeature.FEATURE_EMERGENCY_MMTEL)) { com.android.internal.telephony.ims.ImsServiceController.ImsFeatureStatusCallback callbackToRemove = mFeatureStatusCallbacks.stream().filter(( c) -> ((c.mSlotId) == (featurePair.slotId)) && ((c.mFeatureType) == (featurePair.featureType))).findFirst().orElse(null); if (callbackToRemove != null) { mFeatureStatusCallbacks.remove(callbackToRemove); } removeImsFeature(featurePair.slotId, featurePair.featureType, (callbackToRemove != null ? callbackToRemove.getCallback() : null)); removeImsFeatureBinder(featurePair.slotId, featurePair.featureType); mCallbacks.imsServiceFeatureRemoved(featurePair.slotId, featurePair.featureType, this); } else { android.util.Log.i(com.android.internal.telephony.ims.ImsServiceController.LOG_TAG, (""doesn't support emergency calling on slot "" + (featurePair.slotId))); } sendImsFeatureRemovedCallback(featurePair.slotId, featurePair.featureType); }",158167d050b5b2d592c8e47345f691a17f6dfa75,removeImsServiceFeature(android.telephony.ims.stub.ImsFeatureConfiguration$FeatureSlotPair),207816,364,375
90965,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_EventModifiers_ThreadOnlyModifierTest.java,,,,"public void testException() { logWriter.println(""testException started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); long threadID = getFilteredThreadId(); final java.lang.String exceptionClassSignature = ""Lorg/apache/harmony/jpda/tests/jdwp/EventModifiers/ThreadOnlyModifierDebuggee$TestException;""; org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.setThreadOnlyException(exceptionClassSignature, true, false, threadID); checkReplyPacket(reply, ""Failed to set EXCEPTION with thread only modifier""); int requestID = reply.getNextValueAsInt(); assertAllDataRead(reply); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); waitForThreadEvent(JDWPConstants.EventKind.EXCEPTION, requestID, threadID); reply = debuggeeWrapper.vmMirror.clearEvent(JDWPConstants.EventKind.EXCEPTION, requestID); checkReplyPacket(reply, (""Failed to clear event "" + requestID)); logWriter.println(""testException done""); }",982340624f73b06431e2db79b9b9087d22e67338,,testException(),3,11,"public void testException() { logWriter.println(""testException started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); org.apache.harmony.jpda.tests.framework.jdwp.EventBuilder builder = createExceptionEventBuilder(""Lorg/apache/harmony/jpda/tests/jdwp/EventModifiers/ThreadOnlyModifierDebuggee$TestException;"", true, false); testEventWithThreadOnlyModifier(builder); logWriter.println(""testException done""); }",966219b511e7a9200ba849454693f34c1e6b46d3,testException(),127194,252,112
152520,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_ndk_internal_NdkConfiguration.java,7.0,"public static void createTasks(org.gradle.model.collection.CollectionBuilder<org.gradle.api.Task> tasks, org.gradle.nativeplatform.SharedLibraryBinarySpec binary, java.io.File buildDir, com.android.build.gradle.managed.NdkConfig ndkConfig, com.android.build.gradle.internal.NdkHandler ndkHandler) { com.android.build.gradle.ndk.internal.StlConfiguration.createStlCopyTask(ndkHandler, ndkConfig.getStl(), tasks, buildDir, binary); if (binary.getBuildType().getName().equals(BuilderConstants.DEBUG)) { com.android.build.gradle.ndk.internal.NdkConfiguration.setupNdkGdbDebug(tasks, binary, buildDir, ndkConfig, ndkHandler); } }",48308df1b411b2531303e8ce207e70eb9a7eaaea,"public static void createTasks(org.gradle.model.collection.CollectionBuilder<org.gradle.api.Task> tasks, org.gradle.nativeplatform.SharedLibraryBinarySpec binary, java.io.File buildDir, com.android.build.gradle.managed.NdkConfig ndkConfig, com.android.build.gradle.internal.NdkHandler ndkHandler) { com.android.build.gradle.ndk.internal.StlConfiguration.createStlCopyTask(ndkHandler, ndkConfig.getStl(), tasks, buildDir, binary); if (binary.getBuildType().getName().equals(BuilderConstants.DEBUG)) { com.android.build.gradle.ndk.internal.NdkConfiguration.setupNdkGdbDebug(tasks, binary, buildDir, ndkConfig, ndkHandler); } com.android.build.gradle.ndk.internal.NdkConfiguration.createStripDebugTask(tasks, binary, buildDir, ndkHandler); }",499de2978d9255d27378ab659e540d319bfaf0c3,"createTasks(org.gradle.model.collection.CollectionBuilder,org.gradle.nativeplatform.SharedLibraryBinarySpec,java.io.File,com.android.build.gradle.managed.NdkConfig,com.android.build.gradle.internal.NdkHandler)","createTasks(org.gradle.model.collection.CollectionBuilder,org.gradle.nativeplatform.SharedLibraryBinarySpec,java.io.File,com.android.build.gradle.managed.NdkConfig,com.android.build.gradle.internal.NdkHandler)",6,6,"public static void createTasks(org.gradle.model.ModelMap<org.gradle.api.Task> tasks, org.gradle.nativeplatform.SharedLibraryBinarySpec binary, java.io.File buildDir, com.android.build.gradle.managed.NdkConfig ndkConfig, com.android.build.gradle.internal.NdkHandler ndkHandler) { com.android.build.gradle.ndk.internal.StlConfiguration.createStlCopyTask(ndkHandler, ndkConfig.getStl(), tasks, buildDir, binary); if (binary.getBuildType().getName().equals(BuilderConstants.DEBUG)) { com.android.build.gradle.ndk.internal.NdkConfiguration.setupNdkGdbDebug(tasks, binary, buildDir, ndkConfig, ndkHandler); } com.android.build.gradle.ndk.internal.NdkConfiguration.createStripDebugTask(tasks, binary, buildDir, ndkHandler); }",6a4fe0356f7e44dcd20a5bb0dd31472dcb0e1af5,"createTasks(org.gradle.model.ModelMap,org.gradle.nativeplatform.SharedLibraryBinarySpec,java.io.File,com.android.build.gradle.managed.NdkConfig,com.android.build.gradle.internal.NdkHandler)",524437,211,209
427187,src_com_android_bluetooth_hfpclient_HeadsetClientService.java,43.0,"boolean acceptCall(android.bluetooth.BluetoothDevice device, int flag) { enforceCallingOrSelfPermission(com.android.bluetooth.hfpclient.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = getStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, (""Cannot allocate SM for device "" + device)); return false; } int connectionState = sm.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } android.os.Message msg = sm.obtainMessage(HeadsetClientStateMachine.ACCEPT_CALL); msg.arg1 = flag; sm.sendMessage(msg); return true; }",09991746e45d0c8a5085657b9e0af2baece02ca2,"boolean acceptCall(android.bluetooth.BluetoothDevice device, int flag) { enforceCallingOrSelfPermission(com.android.bluetooth.hfpclient.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(this) { for (java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.hfpclient.HeadsetClientStateMachine> entry : mStateMachineMap.entrySet()) { if ((entry.getValue()) != null) { int connectionState = entry.getValue().getConnectionState(entry.getKey()); android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, (((""accepting a call on device "" + device) + ""Disconnecting possibly on "") + (entry.getValue()))); if (connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) entry.getValue().obtainMessage(HeadsetClientStateMachine.TERMINATE_CALL).sendToTarget(); } } } com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = getStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, (""Cannot allocate SM for device "" + device)); return false; } int connectionState = sm.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } android.os.Message msg = sm.obtainMessage(HeadsetClientStateMachine.ACCEPT_CALL); msg.arg1 = flag; sm.sendMessage(msg); return true; }",f52d744aecdabe468347a08c18eb90bb33cba3fc,"acceptCall(android.bluetooth.BluetoothDevice,int)","acceptCall(android.bluetooth.BluetoothDevice,int)",4,43,"boolean acceptCall(android.bluetooth.BluetoothDevice device, int flag) { enforceCallingOrSelfPermission(com.android.bluetooth.hfpclient.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(this) { for (java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.hfpclient.HeadsetClientStateMachine> entry : mStateMachineMap.entrySet()) { if ((entry.getValue()) == null) { continue; } int connectionState = entry.getValue().getConnectionState(entry.getKey()); if (com.android.bluetooth.hfpclient.HeadsetClientService.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, (((""Accepting a call on device "" + device) + "". Possibly disconnecting on "") + (entry.getValue()))); } if (connectionState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) entry.getValue().obtainMessage(HeadsetClientStateMachine.TERMINATE_CALL).sendToTarget(); } } com.android.bluetooth.hfpclient.HeadsetClientStateMachine sm = getStateMachine(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientService.TAG, (""Cannot allocate SM for device "" + device)); return false; } int connectionState = sm.getConnectionState(device); if (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { return false; } android.os.Message msg = sm.obtainMessage(HeadsetClientStateMachine.ACCEPT_CALL); msg.arg1 = flag; sm.sendMessage(msg); return true; }",0605df899cfbd2e5e232e523cfe495cc53f65f21,"acceptCall(android.bluetooth.BluetoothDevice,int)",143921,366,374
278542,dx_src_com_android_jack_dx_io_instructions_ZeroRegisterDecodedInstruction.java,1.0,"@java.lang.Override public com.android.jack.dx.io.instructions.DecodedInstruction withIndex(int newIndex) { return new com.android.jack.dx.io.instructions.ZeroRegisterDecodedInstruction(getFormat(), getOpcode(), newIndex, getIndexType(), getTarget(), getLiteral()); }",9edb6793d456c9acb8971706a2f6e481b1173d75,"@java.lang.Override public com.android.jack.dx.io.instructions.DecodedInstruction withIndex(int newIndex) { return new com.android.jack.dx.io.instructions.ZeroRegisterDecodedInstruction(getFormat(), getOpcode(), newIndex, getFirstIndexType(), getTarget(), getLiteral()); }",805133a14207a818113bf8666a42395f36f437b6,withIndex(int),withIndex(int),5,1,"@java.lang.Override public com.android.jack.dx.io.instructions.DecodedInstruction withIndex(int newFirstIndex, int newSecondIndex) { assert (getSecondIndexType()) == (com.android.jack.dx.io.IndexType.NONE); return new com.android.jack.dx.io.instructions.ZeroRegisterDecodedInstruction(getFormat(), getOpcode(), newFirstIndex, getFirstIndexType(), getTarget(), getLiteral()); }",cac377f2474ad31e39904eee567d8e797d4b1a06,"withIndex(int,int)",101614,70,100
113406,jack_src_com_android_jack_jayce_JayceClassOrInterfaceLoader.java,10.0,"@javax.annotation.Nonnull private com.android.jack.ir.ast.JDefinedClassOrInterface create(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.jayce.JayceFormatException, com.android.jack.jayce.JayceVersionException, java.io.IOException { com.android.jack.jayce.DeclaredTypeNode type = getNNode(NodeLevel.TYPES); java.lang.String packageQualifiedName = com.android.jack.util.NamingTools.getPackageNameFromBinaryName(com.android.jack.util.NamingTools.getClassBinaryNameFromDescriptor(type.getSignature())); com.android.jack.ir.ast.JPackage pack = session.getLookup().getOrCreatePackage(packageQualifiedName); com.android.jack.ir.ast.JDefinedClassOrInterface jType = type.create(pack, this); return jType; }",eada975d505f845a7c33042bd5be6bfab4f4db80,"@javax.annotation.Nonnull private com.android.jack.ir.ast.JDefinedClassOrInterface create(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.library.LibraryFormatException, java.io.IOException { com.android.jack.jayce.DeclaredTypeNode type = getNNode(NodeLevel.TYPES); java.lang.String packageQualifiedName = com.android.jack.util.NamingTools.getPackageNameFromBinaryName(com.android.jack.util.NamingTools.getClassBinaryNameFromDescriptor(type.getSignature())); com.android.jack.ir.ast.JPackage pack = session.getLookup().getOrCreatePackage(packageQualifiedName); com.android.jack.ir.ast.JDefinedClassOrInterface jType = type.create(pack, this); return jType; }",7ffb9b8f7f464d4061014ac7550c540ac88ce5af,create(com.android.jack.ir.ast.JSession),create(com.android.jack.ir.ast.JSession),4,10,"@javax.annotation.Nonnull private com.android.jack.ir.ast.JDefinedClassOrInterface create(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.library.LibraryFormatException, com.android.jack.library.LibraryIOException { com.android.jack.jayce.DeclaredTypeNode type = getNNode(NodeLevel.TYPES); java.lang.String packageQualifiedName = com.android.jack.util.NamingTools.getPackageNameFromBinaryName(com.android.jack.util.NamingTools.getClassBinaryNameFromDescriptor(type.getSignature())); com.android.jack.ir.ast.JPackage pack = session.getLookup().getOrCreatePackage(packageQualifiedName); com.android.jack.ir.ast.JDefinedClassOrInterface jType = type.create(pack, this); return jType; }",a6c15e20f07f3c2f7181a25f9bae35f7f836f288,create(com.android.jack.ir.ast.JSession),48350,185,190
267940,src_com_android_stk_StkMenuActivity.java,6.0,"@java.lang.Override public void onResume() { super.onResume(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (((""onResume, slot id: "" + (mSlotId)) + "","") + (mState))); appService.indicateMenuVisibility(true, mSlotId); if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { mStkMenu = appService.getMainMenu(mSlotId); } else { mStkMenu = appService.getMenu(mSlotId); } if ((mStkMenu) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""menu is null""); cancelTimeOut(); finish(); return; } if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""set main menu instance.""); appService.getStkContext(mSlotId).setMainActivityInstance(this); } displayMenu(); startTimeOut(); if (!(mAcceptUsersInput)) { mAcceptUsersInput = true; } invalidateOptionsMenu(); mProgressView.setIndeterminate(false); mProgressView.setVisibility(View.GONE); }",71433f885dde006cbc8f82f39e48c0a30022800a,"@java.lang.Override public void onResume() { super.onResume(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (((""onResume, slot id: "" + (mSlotId)) + "","") + (mState))); appService.indicateMenuVisibility(true, mSlotId); if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { mStkMenu = appService.getMainMenu(mSlotId); } else { mStkMenu = appService.getMenu(mSlotId); } if ((mStkMenu) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""menu is null""); cancelTimeOut(); finish(); return; } if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""set main menu instance.""); appService.getStkContext(mSlotId).setMainActivityInstance(this); } displayMenu(); startTimeOut(); mAcceptUsersInput = true; showProgressBar(false); invalidateOptionsMenu(); android.support.v4.content.LocalBroadcastManager.getInstance(this).registerReceiver(mLocalBroadcastReceiver, new android.content.IntentFilter(StkAppService.SESSION_ENDED)); }",1881c914d1fd930167d53d80ade3101481c5dd29,onResume(),onResume(),11,7,"@java.lang.Override public void onResume() { super.onResume(); com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (((""onResume, slot id: "" + (mSlotId)) + "","") + (mState))); appService.indicateMenuVisibility(true, mSlotId); if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { mStkMenu = appService.getMainMenu(mSlotId); } else { mStkMenu = appService.getMenu(mSlotId); } if ((mStkMenu) == null) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""menu is null""); cancelTimeOut(); finish(); return; } if ((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, ""set main menu instance.""); appService.getStkContext(mSlotId).setMainActivityInstance(this); } displayMenu(); startTimeOut(); invalidateOptionsMenu(); }",521e80721790ef919f0cfea723b4aba4582c8387,onResume(),101855,343,290
81416,tests_tests_renderscript_src_android_renderscript_cts_TestAcosh.java,,,,"private void checkAcoshFloat2() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testAcoshFloat2(in, out); verifyResultsAcoshFloat2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAcoshFloat2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAcoshFloat2(in, out); verifyResultsAcoshFloat2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAcoshFloat2: "" + (e.toString()))); } }",9862d379ac2c7478511f8ab95dec69ba5b866aae,,checkAcoshFloat2(),9,5,"private void checkAcoshFloat2Float2() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -5083525519380667992L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testAcoshFloat2Float2(in, out); verifyResultsAcoshFloat2Float2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAcoshFloat2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAcoshFloat2Float2(in, out); verifyResultsAcoshFloat2Float2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAcoshFloat2Float2: "" + (e.toString()))); } }",8d0fda8fe88b74f20b223bcab151920aa01200b0,checkAcoshFloat2Float2(),143492,330,316
199831,src_com_android_bluetooth_avrcp_Avrcp.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void blackListCurrentDevice() { mFeatures &= ~(com.android.bluetooth.avrcp.Avrcp.BTRC_FEAT_ABSOLUTE_VOLUME); mAudioManager.avrcpSupportsAbsoluteVolume(mAddress, isAbsoluteVolumeSupported()); android.content.SharedPreferences pref = mContext.getSharedPreferences(com.android.bluetooth.avrcp.Avrcp.ABSOLUTE_VOLUME_BLACKLIST_FILE, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editor = pref.edit(); editor.putBoolean(mAddress, true); editor.commit(); }",a63d2b111e625af350d079f531ddccde327d0244,,blackListCurrentDevice(),3,11,"private void blackListCurrentDevice() { mFeatures &= ~(com.android.bluetooth.avrcp.Avrcp.BTRC_FEAT_ABSOLUTE_VOLUME); mAudioManager.avrcpSupportsAbsoluteVolume(mAddress, isAbsoluteVolumeSupported()); android.content.SharedPreferences pref = mContext.getSharedPreferences(com.android.bluetooth.avrcp.Avrcp.ABSOLUTE_VOLUME_BLACKLIST, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editor = pref.edit(); editor.putBoolean(mAddress, true); editor.commit(); }",8d65c91a28bda67a9dd43befeafbd5210f8abfcb,blackListCurrentDevice(),337961,129,127
150140,src_com_google_gct_idea_appengine_run_AppEngineRunConfigurationSettingsEditor.java,0.0,protected void syncWithBuildFile() { com.google.gct.idea.appengine.gradle.facet.AppEngineGradleFacet facet = com.google.gct.idea.appengine.gradle.facet.AppEngineGradleFacet.getInstance(moduleSelector.getModule()); if (facet != null) { com.google.gct.idea.appengine.gradle.facet.AppEngineConfigurationProperties model = facet.getConfiguration().getState(); if (model != null) { myServerPortField.setText(model.HTTP_PORT.toString()); myServerAddressField.setText(model.HTTP_ADDRESS); myAppEngineSdkField.setText(model.APPENGINE_SDKROOT); myWarPathField.setText(model.WAR_DIR); myVmArgsField.setText(model.getJvmFlags()); } } },f1b5709044e8f1ab301a1332cf0d9a1e5929ca9b,protected void syncWithBuildFile() { com.google.gct.idea.appengine.gradle.facet.AppEngineGradleFacet facet = com.google.gct.idea.appengine.gradle.facet.AppEngineGradleFacet.getInstance(myModuleSelector.getModule()); if (facet != null) { com.google.gct.idea.appengine.gradle.facet.AppEngineConfigurationProperties model = facet.getConfiguration().getState(); if (model != null) { myServerPortField.setText(model.HTTP_PORT.toString()); myServerAddressField.setText(model.HTTP_ADDRESS); myAppEngineSdkField.setText(model.APPENGINE_SDKROOT); myWarPathField.setText(model.WAR_DIR); myVmArgsField.setText(model.getJvmFlags()); myUpdateCheckCheckBox.setSelected(model.DISABLE_UPDATE_CHECK); } } },cd1afac9ccd9b4a86a2f8c33a4c800dba64e3484,syncWithBuildFile(),syncWithBuildFile(),9,0,"protected void syncWithBuildFileViaFacet() { myServerPortField.setText(""""); myServerAddressField.setText(""""); myAppEngineSdkField.setText(""""); myWarPathField.setText(""""); myVmArgsField.setText(""""); myUpdateCheckCheckBox.setSelected(false); com.google.gct.idea.appengine.gradle.facet.AppEngineGradleFacet facet = com.google.gct.idea.appengine.gradle.facet.AppEngineGradleFacet.getAppEngineFacetByModule(myModuleSelector.getModule()); if (facet != null) { com.google.gct.idea.appengine.gradle.facet.AppEngineConfigurationProperties model = facet.getConfiguration().getState(); if (model != null) { myServerPortField.setText(model.HTTP_PORT.toString()); myServerAddressField.setText(model.HTTP_ADDRESS); myAppEngineSdkField.setText(model.APPENGINE_SDKROOT); myWarPathField.setText(model.WAR_DIR); myVmArgsField.setText(model.getJvmFlags()); myUpdateCheckCheckBox.setSelected(model.DISABLE_UPDATE_CHECK); } } }",7bd992149d4ce2f7973bf97e5e3c7fe1d789b480,syncWithBuildFileViaFacet(),505520,184,233
398192,services_core_java_com_android_server_timezone_PackageTracker.java,13.0,"static com.android.server.timezone.PackageTracker create(android.content.Context context) { com.android.server.timezone.PackageTrackerHelperImpl helperImpl = new com.android.server.timezone.PackageTrackerHelperImpl(context); return new com.android.server.timezone.PackageTracker(helperImpl, helperImpl, helperImpl, new com.android.server.timezone.PackageStatusStorage(context), new com.android.server.timezone.IntentHelperImpl(context)); }",676adb91e42b5e20cc6bfdee9ca7bf9d68bcd4f3,"static com.android.server.timezone.PackageTracker create(android.content.Context context) { com.android.server.timezone.PackageTrackerHelperImpl helperImpl = new com.android.server.timezone.PackageTrackerHelperImpl(context); return new com.android.server.timezone.PackageTracker(helperImpl, helperImpl, helperImpl, new com.android.server.timezone.PackageStatusStorage(android.os.Environment.getDataDirectory()), new com.android.server.timezone.IntentHelperImpl(context)); }",21915e655afa8eafe3620b3bcbf5a7ffa665b6b6,create(android.content.Context),create(android.content.Context),2,13,"static com.android.server.timezone.PackageTracker create(android.content.Context context) { com.android.server.timezone.PackageTrackerHelperImpl helperImpl = new com.android.server.timezone.PackageTrackerHelperImpl(context); java.io.File storageDir = new java.io.File(android.os.Environment.getDataSystemDirectory(), ""timezone""); if (!(storageDir.exists())) { storageDir.mkdir(); } return new com.android.server.timezone.PackageTracker(helperImpl, helperImpl, helperImpl, new com.android.server.timezone.PackageStatusStorage(storageDir), new com.android.server.timezone.IntentHelperImpl(context)); }",88635d6916dd1790887cd487061d36cd69ce846a,create(android.content.Context),32194,113,148
81416,tests_tests_renderscript_src_android_renderscript_cts_TestCross.java,,,,"private void checkCrossFloat4Float4() { android.renderscript.Allocation inLhs = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inLhs, 35, 0.0F, 1.0F); android.renderscript.Allocation inRhs = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inRhs, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInRhs(inRhs); script.forEach_testCrossFloat4Float4(inLhs, out); verifyResultsCrossFloat4Float4(inLhs, inRhs, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCrossFloat4Float4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInRhs(inRhs); scriptRelaxed.forEach_testCrossFloat4Float4(inLhs, out); verifyResultsCrossFloat4Float4(inLhs, inRhs, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCrossFloat4Float4: "" + (e.toString()))); } }",5c1b13a0c0f6abd48d71259b4932bb7b5e86e013,,checkCrossFloat4Float4(),9,2,"private void checkCrossFloat4Float4Float4() { android.renderscript.Allocation inLhs = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 7731492639431494232L); android.renderscript.Allocation inRhs = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, 7731492639431494232L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); script.set_gAllocInRhs(inRhs); script.forEach_testCrossFloat4Float4Float4(inLhs, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCrossFloat4Float4Float4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInRhs(inRhs); scriptRelaxed.forEach_testCrossFloat4Float4Float4(inLhs, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testCrossFloat4Float4Float4: "" + (e.toString()))); } }",be809f1c67dcf7b12ddc47f24ab85223a057beda,checkCrossFloat4Float4Float4(),143175,457,359
102374,luni_src_main_java_javax_crypto_SealedObject.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.lang.Object readSerialized(byte[] serialized) throws java.io.IOException, java.lang.ClassNotFoundException { java.io.ObjectInputStream ois = null; try { ois = new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(serialized)); return ois.readObject(); } finally { javax.crypto.SealedObject.closeQuietly(ois); } }",b6a7820591a4cc59e9cbd29e791ef3f899e4012c,,readSerialized(byte[]),3,1,"private static java.lang.Object readSerialized(byte[] serialized) throws java.io.IOException, java.lang.ClassNotFoundException { java.io.ObjectInputStream ois = null; try { ois = new java.io.ObjectInputStream(new java.io.ByteArrayInputStream(serialized)); return ois.readObject(); } finally { libcore.io.IoUtils.closeQuietly(ois); } }",3509f5b9a54d7c5e349b502005f46c0ed7120140,readSerialized(byte[]),304856,82,83
380054,Common_src_com_googlecode_android_scripting_facade_bluetooth_BluetoothLeAdvertisingSetFacade.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onOwnAddressRead(android.bluetooth.le.AdvertisingSet advertisingSet, int addressType, java.lang.String address) { com.googlecode.android_scripting.Log.d((((""onOwnAddressRead"" + (mEventType)) + "" "") + (setIndex))); android.os.Bundle results = new android.os.Bundle(); results.putInt(""set_id"", setIndex); results.putInt(""addressType"", addressType); results.putString(""address"", address); mEventFacade.postEvent((((mEventType) + (setIndex)) + ""onOwnAddressRead""), results); }",c58eb11c5b3c420c47dc111a61bd90acb7ddf343,,"onOwnAddressRead(android.bluetooth.le.AdvertisingSet,int,java.lang.String)",2,5,"@java.lang.Override public void onOwnAddressRead(android.bluetooth.le.AdvertisingSet advertisingSet, int addressType, java.lang.String address) { com.googlecode.android_scripting.Log.d((((""onOwnAddressRead"" + (mEventType)) + "" "") + (setIndex))); android.os.Bundle results = new android.os.Bundle(); results.putInt(""setId"", setIndex); results.putInt(""addressType"", addressType); results.putString(""address"", address); mEventFacade.postEvent((((mEventType) + (setIndex)) + ""onOwnAddressRead""), results); }",fbfe02723e42c169d94cfc884d4037f781a98095,"onOwnAddressRead(android.bluetooth.le.AdvertisingSet,int,java.lang.String)",144154,144,142
90413,build-system_manifest-merger_src_main_java_com_android_manifmerger_Actions.java,21.0,"void log(com.android.utils.ILogger logger) { java.lang.StringBuilder stringBuilder = new java.lang.StringBuilder(); stringBuilder.append(com.android.manifmerger.Actions.HEADER); for (java.util.Map.Entry<com.android.manifmerger.XmlNode.NodeKey, com.android.manifmerger.Actions.DecisionTreeRecord> record : mRecords.entrySet()) { stringBuilder.append(record.getKey()).append(""\n""); for (com.android.manifmerger.Actions.NodeRecord nodeRecord : record.getValue().getNodeRecords()) { nodeRecord.print(stringBuilder); stringBuilder.append(""\n""); } for (java.util.Map.Entry<com.android.manifmerger.XmlNode.NodeName, java.util.List<com.android.manifmerger.Actions.AttributeRecord>> attributeRecords : record.getValue().mAttributeRecords.entrySet()) { stringBuilder.append(""\t"").append(attributeRecords.getKey()); for (com.android.manifmerger.Actions.AttributeRecord attributeRecord : attributeRecords.getValue()) { stringBuilder.append(""\t\t""); attributeRecord.print(stringBuilder); stringBuilder.append(""\n""); } } } logger.info(stringBuilder.toString()); }",61e59d2d0c9774f4ee3fd146e44172318c701b6b,"void log(com.android.utils.ILogger logger) { java.lang.StringBuilder stringBuilder = new java.lang.StringBuilder(); stringBuilder.append(com.android.manifmerger.Actions.HEADER); for (java.util.Map.Entry<com.android.manifmerger.XmlNode.NodeKey, com.android.manifmerger.Actions.DecisionTreeRecord> record : mRecords.entrySet()) { stringBuilder.append(record.getKey()).append(""\n""); for (com.android.manifmerger.Actions.NodeRecord nodeRecord : record.getValue().getNodeRecords()) { nodeRecord.print(stringBuilder); stringBuilder.append(""\n""); } for (java.util.Map.Entry<com.android.manifmerger.XmlNode.NodeName, java.util.List<com.android.manifmerger.Actions.AttributeRecord>> attributeRecords : record.getValue().mAttributeRecords.entrySet()) { stringBuilder.append(""\t"").append(attributeRecords.getKey()).append(""\n""); for (com.android.manifmerger.Actions.AttributeRecord attributeRecord : attributeRecords.getValue()) { stringBuilder.append(""\t\t""); attributeRecord.print(stringBuilder); stringBuilder.append(""\n""); } } } logger.info(stringBuilder.toString()); }",fc24f855f038b01e1a9906695c783b58fe87a209,log(com.android.utils.ILogger),log(com.android.utils.ILogger),3,21,"void log(com.android.utils.ILogger logger) { java.lang.StringBuilder stringBuilder = new java.lang.StringBuilder(); stringBuilder.append(com.android.manifmerger.Actions.HEADER); for (java.util.Map.Entry<com.android.manifmerger.XmlNode.NodeKey, com.android.manifmerger.Actions.DecisionTreeRecord> record : mRecords.entrySet()) { stringBuilder.append(record.getKey()).append(""\n""); for (com.android.manifmerger.Actions.NodeRecord nodeRecord : record.getValue().getNodeRecords()) { nodeRecord.print(stringBuilder); stringBuilder.append('\n'); } for (java.util.Map.Entry<com.android.manifmerger.XmlNode.NodeName, java.util.List<com.android.manifmerger.Actions.AttributeRecord>> attributeRecords : record.getValue().mAttributeRecords.entrySet()) { stringBuilder.append('\t').append(attributeRecords.getKey()).append('\n'); for (com.android.manifmerger.Actions.AttributeRecord attributeRecord : attributeRecords.getValue()) { stringBuilder.append(""\t\t""); attributeRecord.print(stringBuilder); stringBuilder.append('\n'); } } } logger.info(stringBuilder.toString()); }",fa66dffefb701b6788cca69f125a76a05e8987fd,log(com.android.utils.ILogger),274360,287,290
50376,common_src_main_java_com_android_utils_SdkUtils.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static double parseLocalizedDouble(java.lang.String string) throws java.text.ParseException { return java.text.NumberFormat.getNumberInstance().parse(string).doubleValue(); },275d0919b82b6eb426a1f3c57364e1e84d6bc8b6,,parseLocalizedDouble(java.lang.String),3,7,public static double parseLocalizedDouble(@com.android.annotations.NonNull java.lang.String string) throws java.text.ParseException { if (string.isEmpty()) { return 0.0; } return java.text.NumberFormat.getNumberInstance().parse(string).doubleValue(); },f0cb9122c5afcbf1b9cca63160e1a80f0e2582e8,parseLocalizedDouble(java.lang.String),491227,38,55
83593,luni_src_test_java_libcore_java_util_zip_ZipFileTest.java,15.0,"public void testInflatingStreamsRequiringZipRefill() throws java.io.IOException { int originalSize = 1024 * 1024; byte[] readBuffer = new byte[8192]; java.util.zip.ZipInputStream in = new java.util.zip.ZipInputStream(new java.io.FileInputStream(createZipFile(1, originalSize))); while ((in.getNextEntry()) != null) { while ((in.read(readBuffer, 0, readBuffer.length)) != (-1)) { } } in.close(); }",e5abc3ad813e89eb5cf130d1ad83f3b0989358de,"public void testInflatingStreamsRequiringZipRefill() throws java.io.IOException { int originalSize = 1024 * 1024; byte[] readBuffer = new byte[8192]; java.util.zip.ZipInputStream in = new java.util.zip.ZipInputStream(new java.io.FileInputStream(createZipFile(1, originalSize))); while ((in.getNextEntry()) != null) { drainStream(readBuffer, in); } in.close(); }",626f42ac2da986ce2581e56ccbbbf069f8213c8a,testInflatingStreamsRequiringZipRefill(),testInflatingStreamsRequiringZipRefill(),11,18,"public void testInflatingStreamsRequiringZipRefill() throws java.io.IOException { int originalSize = 1024 * 1024; byte[] readBuffer = new byte[8192]; java.util.zip.ZipInputStream in = new java.util.zip.ZipInputStream(new java.io.FileInputStream(createZipFile(1, originalSize))); while ((in.getNextEntry()) != null) { while ((in.read(readBuffer, 0, readBuffer.length)) != (-1)) { } } in.close(); }",e5abc3ad813e89eb5cf130d1ad83f3b0989358de,testInflatingStreamsRequiringZipRefill(),111938,96,110
184543,jack_src_com_android_jack_backend_dex_rop_RopRegisterManager.java,3.0,"@javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec createThisReg(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) { assert (thisReg) == null : ""This register was already created.""; com.android.jack.dx.rop.type.Type dexRegType = com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx(type); if (emitDebugInfo) { com.android.jack.dx.rop.cst.CstString cstSignature = null; com.android.jack.ir.ast.marker.ThisRefTypeInfo thisMarker = type.getMarker(com.android.jack.ir.ast.marker.ThisRefTypeInfo.class); if ((thisMarker != null) && (!(thisMarker.getGenericSignature().isEmpty()))) { cstSignature = new com.android.jack.dx.rop.cst.CstString(thisMarker.getGenericSignature()); } com.android.jack.dx.rop.code.LocalItem localItem = com.android.jack.dx.rop.code.LocalItem.make(new com.android.jack.dx.rop.cst.CstString(""this""), com.android.jack.backend.dex.rop.RopHelper.getCstType(type), cstSignature); thisReg = com.android.jack.dx.rop.code.RegisterSpec.make(nextFreeReg, dexRegType, localItem); } else { thisReg = com.android.jack.dx.rop.code.RegisterSpec.make(nextFreeReg, dexRegType); } nextFreeReg += dexRegType.getCategory(); assert (thisReg) != null; return thisReg; }",9b9c2a93dfae61f7707c2f7fd2064409787fa703,"@javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec createThisReg(@javax.annotation.Nonnull com.android.jack.ir.ast.JThis jThis) { assert (thisReg) == null : ""This register was already created.""; com.android.jack.ir.ast.JDefinedClassOrInterface type = ((com.android.jack.ir.ast.JDefinedClassOrInterface) (jThis.getType())); com.android.jack.dx.rop.type.Type dexRegType = com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx(type); if ((emitDebugInfo) && ((jThis.getName()) != null)) { com.android.jack.dx.rop.cst.CstString cstSignature = null; com.android.jack.ir.ast.marker.ThisRefTypeInfo thisMarker = type.getMarker(com.android.jack.ir.ast.marker.ThisRefTypeInfo.class); if ((thisMarker != null) && (!(thisMarker.getGenericSignature().isEmpty()))) { cstSignature = new com.android.jack.dx.rop.cst.CstString(thisMarker.getGenericSignature()); } com.android.jack.dx.rop.code.LocalItem localItem = com.android.jack.dx.rop.code.LocalItem.make(new com.android.jack.dx.rop.cst.CstString(""this""), com.android.jack.backend.dex.rop.RopHelper.getCstType(type), cstSignature); thisReg = com.android.jack.dx.rop.code.RegisterSpec.make(nextFreeReg, dexRegType, localItem); } else { thisReg = com.android.jack.dx.rop.code.RegisterSpec.make(nextFreeReg, dexRegType); } nextFreeReg += dexRegType.getCategory(); assert (thisReg) != null; return thisReg; }",53b6a42e3af91486f4b478cb6fa622917753b50a,createThisReg(com.android.jack.ir.ast.JDefinedClassOrInterface),createThisReg(com.android.jack.ir.ast.JThis),3,7,"@javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec createThisReg(@javax.annotation.Nonnull com.android.jack.ir.ast.JThis jThis) { assert (thisReg) == null : ""This register was already created.""; com.android.jack.ir.ast.JDefinedClassOrInterface type = ((com.android.jack.ir.ast.JDefinedClassOrInterface) (jThis.getType())); com.android.jack.dx.rop.type.Type dexRegType = com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx(type); java.lang.String name = jThis.getName(); if ((emitDebugInfo) && (name != null)) { com.android.jack.dx.rop.cst.CstString cstSignature = null; com.android.jack.ir.ast.marker.ThisRefTypeInfo thisMarker = type.getMarker(com.android.jack.ir.ast.marker.ThisRefTypeInfo.class); if ((thisMarker != null) && (!(thisMarker.getGenericSignature().isEmpty()))) { cstSignature = new com.android.jack.dx.rop.cst.CstString(thisMarker.getGenericSignature()); } com.android.jack.dx.rop.code.LocalItem localItem = com.android.jack.dx.rop.code.LocalItem.make(new com.android.jack.dx.rop.cst.CstString(name), com.android.jack.backend.dex.rop.RopHelper.getCstType(type), cstSignature); thisReg = com.android.jack.dx.rop.code.RegisterSpec.make(nextFreeReg, dexRegType, localItem); } else { thisReg = com.android.jack.dx.rop.code.RegisterSpec.make(nextFreeReg, dexRegType); } nextFreeReg += dexRegType.getCategory(); assert (thisReg) != null; return thisReg; }",3b3b276addeaa085c72570fa402b5cef5fb8dd26,createThisReg(com.android.jack.ir.ast.JThis),230414,454,461
108152,sched_src_com_android_sched_util_file_OutputZipFile.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void putNextEntry(java.util.zip.ZipEntry e) throws java.io.IOException { hasEntries = true; super.putNextEntry(e); },cf261d54bf2b5319e2c4d97325fe0b00d007678b,,putNextEntry(java.util.zip.ZipEntry),3,4,@java.lang.Override public void putNextEntry(@javax.annotation.Nonnull java.util.zip.ZipEntry e) throws java.io.IOException { hasEntries = true; super.putNextEntry(e); },94c5a32ddd59782fbb7df3823e8c0ee560acbd07,putNextEntry(java.util.zip.ZipEntry),183396,40,45
243441,test_458-checker-instruction-simplification_src_Main.java,59.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static long longUnnecessaryShiftMasking(long value, int shift) { return value >> (shift & 63); }",7418fd3c9af2256ceba9e20288b3dbbb9d8bf409,,"longUnnecessaryShiftMasking(long,int)",3,70,"public static long $noinline$longUnnecessaryShiftMasking(long value, int shift) { if (Main.doThrow) { throw new java.lang.Error(); } return value >> (shift & 63); }",e625422a3393b3bda895e406e680dbbe5140a0d5,"$noinline$longUnnecessaryShiftMasking(long,int)",414342,27,48
354498,services_core_java_com_android_server_connectivity_Tethering.java,74.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean upstreamWanted() { synchronized(mPublicSync) { for (java.util.Map.Entry<java.lang.String, com.android.server.connectivity.Tethering.TetherState> e : mTetherStates.entrySet()) { if ((e.getValue().stateMachine.mode()) == (com.android.server.connectivity.Tethering.Mode.TETHERING)) { return true; } } } return false; }",5d88c6688036adea43cfcf234e10208f6e2ab544,,upstreamWanted(),14,77,private boolean upstreamWanted() { if (!(mForwardedDownstreams.isEmpty())) return true; synchronized(mPublicSync) { return (mUsbTetherRequested) || (mWifiTetherRequested); } },6faae75c6fa0732a95bfc335d79e17407b00f4be,upstreamWanted(),125083,102,45
370272,luni_src_test_java_libcore_java_io_FileInputStreamTest.java,11.0,"public void testSkipOnLargeFiles() throws java.lang.Exception { java.io.File largeFile = java.io.File.createTempFile(""FileInputStreamTest_testSkipOnLargeFiles"", """"); final long requiredFreeSpaceBytes = (3172L * 1024) * 1024; long fileSize = ((3 * 1024L) * 1024) * 1024; final android.system.StructStatVfs statVfs = android.system.Os.statvfs(largeFile.getPath()); final long freeSpaceAvailableBytes = (statVfs.f_bsize) * (statVfs.f_bavail); if (freeSpaceAvailableBytes < requiredFreeSpaceBytes) { return; } try { libcore.java.io.FileInputStreamTest.allocateEmptyFile(largeFile, fileSize); assertEquals(fileSize, largeFile.length()); try (java.io.FileInputStream fis = new java.io.FileInputStream(largeFile)) { long lastByte = fileSize - 1; assertEquals(0, Libcore.os.lseek(fis.getFD(), 0, OsConstants.SEEK_CUR)); assertEquals(lastByte, fis.skip(lastByte)); } java.io.FileInputStream fis = new java.io.FileInputStream(largeFile); long lastByte = (((3 * 1024) * 1024) * 1024L) - 1; assertEquals(0, Libcore.os.lseek(fis.getFD(), 0, OsConstants.SEEK_CUR)); assertEquals(lastByte, fis.skip(lastByte)); } finally { assertTrue(largeFile.delete()); } }",9da4f8d7a1b71ed29c46cba531d108845033f35e,"public void testSkipOnLargeFiles() throws java.lang.Exception { java.io.File largeFile = java.io.File.createTempFile(""FileInputStreamTest_testSkipOnLargeFiles"", """"); final long requiredFreeSpaceBytes = (3172L * 1024) * 1024; long fileSize = ((3 * 1024L) * 1024) * 1024; final android.system.StructStatVfs statVfs = android.system.Os.statvfs(largeFile.getPath()); final long freeSpaceAvailableBytes = (statVfs.f_bsize) * (statVfs.f_bavail); if (freeSpaceAvailableBytes < requiredFreeSpaceBytes) { return; } try { libcore.java.io.FileInputStreamTest.allocateEmptyFile(largeFile, fileSize); assertEquals(fileSize, largeFile.length()); try (java.io.FileInputStream fis = new java.io.FileInputStream(largeFile)) { long lastByte = fileSize - 1; assertEquals(0, Libcore.os.lseek(fis.getFD(), 0, OsConstants.SEEK_CUR)); assertEquals(lastByte, fis.skip(lastByte)); } try (java.io.FileInputStream fis = new java.io.FileInputStream(largeFile)) { long lastByte = (((3 * 1024) * 1024) * 1024L) - 1; assertEquals(0, Libcore.os.lseek(fis.getFD(), 0, OsConstants.SEEK_CUR)); assertEquals(lastByte, fis.skip(lastByte)); } } finally { assertTrue(largeFile.delete()); } }",434258a39ad6e5f618ab3100a100c15a6a684ccb,testSkipOnLargeFiles(),testSkipOnLargeFiles(),3,11,"public void testSkipOnLargeFiles() throws java.lang.Exception { java.io.File largeFile = java.io.File.createTempFile(""FileInputStreamTest_testSkipOnLargeFiles"", """"); final long requiredFreeSpaceBytes = (3172L * 1024) * 1024; long fileSize = ((3 * 1024L) * 1024) * 1024; final android.system.StructStatVfs statVfs = android.system.Os.statvfs(largeFile.getPath()); final long freeSpaceAvailableBytes = (statVfs.f_bsize) * (statVfs.f_bavail); if (freeSpaceAvailableBytes < requiredFreeSpaceBytes) { return; } try { libcore.java.io.FileInputStreamTest.allocateEmptyFile(largeFile, fileSize); assertEquals(fileSize, largeFile.length()); try (java.io.FileInputStream fis = new java.io.FileInputStream(largeFile)) { long lastByte = fileSize - 1; assertEquals(0, Libcore.os.lseek(fis.getFD(), 0, OsConstants.SEEK_CUR)); assertEquals(lastByte, fis.skip(lastByte)); } } finally { assertTrue(largeFile.delete()); } }",f5372646c41468f9fca10169b3a25049ac08dad4,testSkipOnLargeFiles(),374207,330,253
55540,sdk-common_src_test_java_com_android_ide_common_res2_ResourceRepositoryTest.java,,,,"public void testMergeByCount() throws java.lang.Exception { com.android.ide.common.res2.ResourceRepository repo = getResourceRepository(); java.util.Map<com.android.resources.ResourceType, com.google.common.collect.Multimap<java.lang.String, com.android.ide.common.res2.ResourceItem>> items = repo.getItems(); assertEquals(6, items.get(ResourceType.DRAWABLE).size()); assertEquals(1, items.get(ResourceType.RAW).size()); assertEquals(4, items.get(ResourceType.LAYOUT).size()); assertEquals(1, items.get(ResourceType.COLOR).size()); assertEquals(3, items.get(ResourceType.STRING).size()); assertEquals(1, items.get(ResourceType.STYLE).size()); assertEquals(1, items.get(ResourceType.ARRAY).size()); assertEquals(4, items.get(ResourceType.ATTR).size()); assertEquals(1, items.get(ResourceType.DECLARE_STYLEABLE).size()); assertEquals(1, items.get(ResourceType.DIMEN).size()); assertEquals(1, items.get(ResourceType.ID).size()); assertEquals(1, items.get(ResourceType.INTEGER).size()); }",f566078ae1574f0bb541b8345b233efbf905a6ec,,testMergeByCount(),8,13,"public void testMergeByCount() throws java.lang.Exception { com.android.ide.common.res2.ResourceRepository repo = getResourceRepository(); java.util.Map<com.android.resources.ResourceType, com.google.common.collect.ListMultimap<java.lang.String, com.android.ide.common.res2.ResourceItem>> items = repo.getItems(); assertEquals(6, items.get(ResourceType.DRAWABLE).size()); assertEquals(1, items.get(ResourceType.RAW).size()); assertEquals(4, items.get(ResourceType.LAYOUT).size()); assertEquals(1, items.get(ResourceType.COLOR).size()); assertEquals(3, items.get(ResourceType.STRING).size()); assertEquals(1, items.get(ResourceType.STYLE).size()); assertEquals(1, items.get(ResourceType.ARRAY).size()); assertEquals(4, items.get(ResourceType.ATTR).size()); assertEquals(1, items.get(ResourceType.DECLARE_STYLEABLE).size()); assertEquals(1, items.get(ResourceType.DIMEN).size()); assertEquals(1, items.get(ResourceType.ID).size()); assertEquals(1, items.get(ResourceType.INTEGER).size()); }",df2a240082905c63d25062df49ece400ca79ec10,testMergeByCount(),454325,230,231
91995,luni_src_main_java_libcore_io_Os.java,70.0,"public void setsockoptIfreq(java.io.FileDescriptor fd, int level, int option, java.lang.String value) throws libcore.io.ErrnoException;",06d6efdd9e3e958295c1326d2ab12c9b3e37d8e3,"public void setsockoptIfreq(java.io.FileDescriptor fd, int level, int option, java.lang.String value) throws android.os.ErrnoException;",1abbf2b70aa450162dfc98c8b3d82a15eaa1232f,"setsockoptIfreq(java.io.FileDescriptor,int,int,java.lang.String)","setsockoptIfreq(java.io.FileDescriptor,int,int,java.lang.String)",3,68,"public void setsockoptIfreq(java.io.FileDescriptor fd, int level, int option, java.lang.String value) throws android.system.ErrnoException;",d70e368006e5c338344cd6d78d62c8e65c323a92,"setsockoptIfreq(java.io.FileDescriptor,int,int,java.lang.String)",170223,37,37
339002,wifi_tests_src_android_net_wifi_aware_WifiAwareManagerTest.java,31.0,"@org.junit.Test public void testConfigRequestBuilderDefaults() { android.net.wifi.aware.ConfigRequest configRequest = new android.net.wifi.aware.ConfigRequest.Builder().build(); collector.checkThat(""mClusterHigh"", ConfigRequest.CLUSTER_ID_MAX, equalTo(configRequest.mClusterHigh)); collector.checkThat(""mClusterLow"", ConfigRequest.CLUSTER_ID_MIN, equalTo(configRequest.mClusterLow)); collector.checkThat(""mMasterPreference"", 0, equalTo(configRequest.mMasterPreference)); collector.checkThat(""mSupport5gBand"", false, equalTo(configRequest.mSupport5gBand)); }",63b6f7e118768480bc504f4f1b24e4b882a2d061,"@org.junit.Test public void testConfigRequestBuilderDefaults() { android.net.wifi.aware.ConfigRequest configRequest = new android.net.wifi.aware.ConfigRequest.Builder().build(); collector.checkThat(""mClusterHigh"", ConfigRequest.CLUSTER_ID_MAX, equalTo(configRequest.mClusterHigh)); collector.checkThat(""mClusterLow"", ConfigRequest.CLUSTER_ID_MIN, equalTo(configRequest.mClusterLow)); collector.checkThat(""mMasterPreference"", 0, equalTo(configRequest.mMasterPreference)); collector.checkThat(""mSupport5gBand"", false, equalTo(configRequest.mSupport5gBand)); collector.checkThat(""mDiscoveryWindowInterval.length"", 2, equalTo(configRequest.mDiscoveryWindowInterval.length)); collector.checkThat(""mDiscoveryWindowInterval[2.4GHz]"", 0, equalTo(configRequest.mDiscoveryWindowInterval[ConfigRequest.NAN_BAND_24GHZ])); collector.checkThat(""mDiscoveryWindowInterval[5Hz]"", 0, equalTo(configRequest.mDiscoveryWindowInterval[ConfigRequest.NAN_BAND_5GHZ])); }",f1f4d09e9a036f38a193dbfb2c56621f64dde1a9,testConfigRequestBuilderDefaults(),testConfigRequestBuilderDefaults(),4,33,"@org.junit.Test public void testConfigRequestBuilderDefaults() { android.net.wifi.aware.ConfigRequest configRequest = new android.net.wifi.aware.ConfigRequest.Builder().build(); collector.checkThat(""mClusterHigh"", ConfigRequest.CLUSTER_ID_MAX, equalTo(configRequest.mClusterHigh)); collector.checkThat(""mClusterLow"", ConfigRequest.CLUSTER_ID_MIN, equalTo(configRequest.mClusterLow)); collector.checkThat(""mMasterPreference"", 0, equalTo(configRequest.mMasterPreference)); collector.checkThat(""mSupport5gBand"", false, equalTo(configRequest.mSupport5gBand)); collector.checkThat(""mDiscoveryWindowInterval.length"", 2, equalTo(configRequest.mDiscoveryWindowInterval.length)); collector.checkThat(""mDiscoveryWindowInterval[2.4GHz]"", ConfigRequest.DW_INTERVAL_NOT_INIT, equalTo(configRequest.mDiscoveryWindowInterval[ConfigRequest.NAN_BAND_24GHZ])); collector.checkThat(""mDiscoveryWindowInterval[5Hz]"", ConfigRequest.DW_INTERVAL_NOT_INIT, equalTo(configRequest.mDiscoveryWindowInterval[ConfigRequest.NAN_BAND_5GHZ])); }",68585c59bf0d57f01fd5a32833685211c03a61f6,testConfigRequestBuilderDefaults(),253881,250,274
229489,jack_src_com_android_jack_CommandLine.java,1.0,"public static void printVersion(@javax.annotation.Nonnull java.io.PrintStream printStream, @javax.annotation.Nonnull com.android.jack.plugin.Plugin plugin) { printStream.println(((((((""Jack plugin: "" + (plugin.getFriendlyName())) + "" ("") + (plugin.getName())) + "") "") + (plugin.getVersion().getVerboseVersion())) + '.')); printStream.println((("" "" + (plugin.getDescription())) + '.')); }",bcf90494eb672d772e64d45e1969d06b57a325f5,"public static void printVersion(@javax.annotation.Nonnull java.io.PrintStream printStream, @javax.annotation.Nonnull com.android.jack.plugin.v01.Plugin plugin) { printStream.println(((((((""Jack plugin: "" + (plugin.getFriendlyName())) + "" ("") + (plugin.getName())) + "") "") + (plugin.getVersion().getVerboseVersion())) + '.')); printStream.println((("" "" + (plugin.getDescription())) + '.')); }",3ee55498b51594cd6393b16cc08e60321ea37306,"printVersion(java.io.PrintStream,com.android.jack.plugin.Plugin)","printVersion(java.io.PrintStream,com.android.jack.plugin.v01.Plugin)",5,4,"public static void printVersion(@javax.annotation.Nonnull java.io.PrintStream printStream, @javax.annotation.Nonnull com.android.jack.plugin.v01.Plugin plugin) { printStream.println(((((((""Jack plugin: "" + (plugin.getFriendlyName())) + "" ("") + (plugin.getCanonicalName())) + "") "") + (plugin.getVersion().getVerboseVersion())) + '.')); printStream.println((("" "" + (plugin.getDescription())) + '.')); }",7b4d3d4a239d32dc6160a301802cb797164d0ed5,"printVersion(java.io.PrintStream,com.android.jack.plugin.v01.Plugin)",282288,107,107
36861,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_wizards_templates_NewProjectPage.java,,,,@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { if (mIgnore) { return; } java.lang.Object source = e.getSource(); if (source == (mChooseSdkButton)) { assert false; } else if (source == (mMinSdkCombo)) { mValues.minSdk = getSelectedMinSdk(); java.lang.Integer minSdk = mMinNameToApi.get(mValues.minSdk); if (minSdk != null) { mValues.iconState.minSdk = minSdk.intValue(); } else { assert false : mValues.minSdk; } } else if (source == (mBuildSdkCombo)) { mValues.target = getSelectedBuildTarget(); if (mValues.target.getVersion().isPreview()) { mValues.minSdk = mValues.target.getVersion().getCodename(); try { mIgnore = true; mMinSdkCombo.setText(mValues.minSdk); } finally { mIgnore = false; } } else { java.lang.String minSdk = mValues.minSdk; int buildApiLevel = mValues.target.getVersion().getApiLevel(); if ((((minSdk != null) && (!(minSdk.isEmpty()))) && (java.lang.Character.isDigit(minSdk.charAt(0)))) && (buildApiLevel < (java.lang.Integer.parseInt(minSdk)))) { mValues.minSdk = java.lang.Integer.toString(buildApiLevel); try { mIgnore = true; setSelectedMinSdk(buildApiLevel); } finally { mIgnore = false; } } } } else if (source == (mSkeletonToggle)) { mValues.createAppSkeleton = mSkeletonToggle.getSelection(); } validatePage(); },f2d7d238f556dbd3a02a9cbc3e46049e2e033fbd,,widgetSelected(org.eclipse.swt.events.SelectionEvent),2,1,@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { if (mIgnore) { return; } java.lang.Object source = e.getSource(); if (source == (mChooseSdkButton)) { assert false; } else if (source == (mMinSdkCombo)) { mValues.minSdk = getSelectedMinSdk(); java.lang.Integer minSdk = mMinNameToApi.get(mValues.minSdk); if (minSdk != null) { mValues.iconState.minSdk = minSdk.intValue(); } else { assert false : mValues.minSdk; } } else if (source == (mBuildSdkCombo)) { mValues.target = getSelectedBuildTarget(); if (mValues.target.getVersion().isPreview()) { mValues.minSdk = mValues.target.getVersion().getCodename(); try { mIgnore = true; mMinSdkCombo.setText(mValues.minSdk); } finally { mIgnore = false; } } else { java.lang.String minSdk = mValues.minSdk; int buildApiLevel = mValues.target.getVersion().getApiLevel(); if ((((minSdk != null) && (!(minSdk.isEmpty()))) && (java.lang.Character.isDigit(minSdk.charAt(0)))) && (buildApiLevel < (java.lang.Integer.parseInt(minSdk)))) { mValues.minSdk = java.lang.Integer.toString(buildApiLevel); try { mIgnore = true; setSelectedMinSdk(buildApiLevel); } finally { mIgnore = false; } } } } else if (source == (mSkeletonToggle)) { mValues.createAppSkeleton = mSkeletonToggle.getSelection(); mValues.createIcon = mValues.createAppSkeleton; } validatePage(); },512904da2e4e3d8306c86ead9da965689fa14dd0,widgetSelected(org.eclipse.swt.events.SelectionEvent),370380,377,390
129220,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_fixture_app_LargeTestProject.java,,,,"private com.android.build.gradle.integration.common.fixture.app.GradleModule createProject(com.android.build.gradle.integration.common.fixture.app.LargeTestProject.ModuleFactory factory, int depth, java.lang.String path, java.io.File location, java.lang.String suffix) throws java.io.IOException { java.util.List<com.android.build.gradle.integration.common.fixture.app.GradleModule> deps = com.google.common.collect.Lists.newArrayList(); if (depth < (maxDepth)) { for (int i = 0; i < (maxBreadth); i++) { java.lang.String newSuffix = suffix + (i + 1); com.android.build.gradle.integration.common.fixture.app.GradleModule project = createProject(factory, (depth + 1), (((path + ""lib"") + newSuffix) + "":""), new java.io.File(location, (""lib"" + newSuffix)), newSuffix); deps.add(project); } } com.android.build.gradle.integration.common.fixture.app.GradleModule project = factory.createModule(new java.io.File(location, (""main"" + suffix)), ((path + ""main"") + suffix), deps); project.create(); return project; }",9bfa5ff74a6288b1ae0b871a99f7e5dc79697890,,"createProject(com.android.build.gradle.integration.common.fixture.app.LargeTestProject$ModuleFactory,int,java.lang.String,java.io.File,java.lang.String)",8,0,"private com.android.build.gradle.integration.common.fixture.app.GradleModule createProject(@com.android.annotations.NonNull com.android.build.gradle.integration.common.fixture.app.LargeTestProject.ModuleFactory factory, int depth, @com.android.annotations.NonNull java.lang.String path, @com.android.annotations.NonNull java.io.File location, @com.android.annotations.NonNull java.lang.String suffix) throws java.io.IOException { java.util.List<com.android.build.gradle.integration.common.fixture.app.GradleModule> deps = com.google.common.collect.Lists.newArrayList(); if (depth < (maxDepth)) { for (int i = 0; i < (maxBreadth); i++) { java.lang.String newSuffix = suffix + (i + 1); com.android.build.gradle.integration.common.fixture.app.GradleModule project = createProject(factory, (depth + 1), (((path + ""lib"") + newSuffix) + "":""), new java.io.File(location, (""lib"" + newSuffix)), newSuffix); deps.add(project); } } com.android.build.gradle.integration.common.fixture.app.GradleModule project = factory.createModule(new java.io.File(location, (""main"" + suffix)), ((path + ""main"") + suffix), deps); project.create(); return project; }",531ee474ea40ce33de6915d711294045357427c2,"createProject(com.android.build.gradle.integration.common.fixture.app.LargeTestProject$ModuleFactory,int,java.lang.String,java.io.File,java.lang.String)",14665,299,330
61182,sdk-common_src_main_java_com_android_ide_common_res2_DataMerger.java,12.0,"public com.android.utils.Pair<S, java.io.File> getDataSetContaining(java.io.File file) { for (S dataSet : mDataSets) { java.io.File sourceFile = dataSet.findMatchingSourceFile(file); if (sourceFile != null) { return com.android.utils.Pair.of(dataSet, sourceFile); } } return null; }",1ba9db2a07201cef8b8912ebea68a65b974d6eaa,"public void getDataSetContaining(@com.android.annotations.NonNull java.io.File file, @com.android.annotations.NonNull com.android.ide.common.res2.DataMerger.IncData<S> incData) { if (mDataSets.isEmpty()) { incData.status = com.android.ide.common.res2.DataMerger.IncDataStatus.UNKNOWN_FILE; return; } S tempDataSet = mDataSets.get(0); if (!(tempDataSet.checkFileForAndroidRes(file))) { incData.status = com.android.ide.common.res2.DataMerger.IncDataStatus.IGNORED_FILE; return; } for (S dataSet : mDataSets) { java.io.File sourceFile = dataSet.findMatchingSourceFile(file); if (sourceFile != null) { incData.dataSet = dataSet; incData.sourceFile = sourceFile; incData.status = (dataSet.isValidSourceFile(sourceFile, file)) ? com.android.ide.common.res2.DataMerger.IncDataStatus.VALID_FILE : com.android.ide.common.res2.DataMerger.IncDataStatus.IGNORED_FILE; return; } } incData.status = com.android.ide.common.res2.DataMerger.IncDataStatus.UNKNOWN_FILE; }",65323d5b4f71556f0d00922ee32bfdb6fdfbf104,getDataSetContaining(java.io.File),"getDataSetContaining(java.io.File,com.android.ide.common.res2.DataMerger$IncData)",5,15,"public com.android.ide.common.res2.FileValidity<S> findDataSetContaining(@com.android.annotations.NonNull java.io.File file, @com.android.annotations.Nullable com.android.ide.common.res2.FileValidity<S> fileValidity) { if (fileValidity == null) { fileValidity = new com.android.ide.common.res2.FileValidity<S>(); } if (mDataSets.isEmpty()) { fileValidity.status = FileValidity.FileStatus.UNKNOWN_FILE; return fileValidity; } S tempDataSet = mDataSets.get(0); if (!(tempDataSet.checkFileForAndroidRes(file))) { fileValidity.status = FileValidity.FileStatus.IGNORED_FILE; return fileValidity; } for (S dataSet : mDataSets) { java.io.File sourceFile = dataSet.findMatchingSourceFile(file); if (sourceFile != null) { fileValidity.dataSet = dataSet; fileValidity.sourceFile = sourceFile; fileValidity.status = (dataSet.isValidSourceFile(sourceFile, file)) ? FileValidity.FileStatus.VALID_FILE : FileValidity.FileStatus.IGNORED_FILE; return fileValidity; } } fileValidity.status = FileValidity.FileStatus.UNKNOWN_FILE; return fileValidity; }",f7d7039641b7f6c14dc4c9cdbdd7c7a58ce733e0,"findDataSetContaining(java.io.File,com.android.ide.common.res2.FileValidity)",90820,287,269
81416,tests_tests_renderscript_src_android_renderscript_cts_TestAtan.java,,,,public void testAtan() { checkAtanFloat(); checkAtanFloat2(); checkAtanFloat3(); checkAtanFloat4(); },2d191a8bcb933511f63d10f000f0aec55ccee725,,testAtan(),9,9,public void testAtan() { checkAtanFloatFloat(); checkAtanFloat2Float2(); checkAtanFloat3Float3(); checkAtanFloat4Float4(); },544562889d8c3eea840b2ae757f847b89c577547,testAtan(),143076,31,38
328259,jill_src_com_android_jill_frontend_java_MethodBodyWriter.java,63.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@javax.annotation.CheckForNull private java.lang.String getParameterName(@javax.annotation.Nonnegative int localIdx) { if ((currentMethod.parameters) != null) { return currentMethod.parameters.get((com.android.jill.frontend.java.AsmHelper.isStatic(currentMethod) ? localIdx : localIdx - 1)).name; } return null; },006650456e07b34e9ccf805566deae796019c1e8,,getParameterName(int),6,79,@javax.annotation.CheckForNull private java.lang.String getParameterName(@javax.annotation.Nonnegative int parameterIdx) { if ((currentMethod.parameters) != null) { return currentMethod.parameters.get(parameterIdx).name; } return null; },eb557b15f77b4fc6d253d3fb46e18eab452f1cad,getParameterName(int),166789,85,56
540924,tests_net_java_com_android_server_IpSecServiceTest.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testUdpEncapsulationSocketBinderDeath() throws java.lang.Exception { int localport = findUnusedPort(); IpSecUdpEncapResponse udpEncapResp = mIpSecService.openUdpEncapsulationSocket(localport, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mEncapSocketRecords.getRefcountedResourceOrThrow(udpEncapResp.resourceId); refcountedRecord.binderDied(); assertEquals(0, userRecord.socketQuotaTracker.current()); try { userRecord.mEncapSocketRecords.getRefcountedResourceOrThrow(udpEncapResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",f1de46b207252e7ac54fee55461fcb4a3c81ecb4,,testUdpEncapsulationSocketBinderDeath(),6,2,"@org.junit.Test public void testUdpEncapsulationSocketBinderDeath() throws java.lang.Exception { int localport = findUnusedPort(); IpSecUdpEncapResponse udpEncapResp = mIpSecService.openUdpEncapsulationSocket(localport, new android.os.Binder()); com.android.server.IpSecService.UserRecord userRecord = mIpSecService.mUserResourceTracker.getUserRecord(android.system.Os.getuid()); com.android.server.IpSecService.RefcountedResource refcountedRecord = userRecord.mEncapSocketRecords.getRefcountedResourceOrThrow(udpEncapResp.resourceId); refcountedRecord.binderDied(); assertEquals(0, userRecord.mSocketQuotaTracker.mCurrent); try { userRecord.mEncapSocketRecords.getRefcountedResourceOrThrow(udpEncapResp.resourceId); fail(""Expected IllegalArgumentException on attempt to access deleted resource""); } catch (java.lang.IllegalArgumentException expected) { } }",5fde0bd67d14073aef1daf157536e034f0baa648,testUdpEncapsulationSocketBinderDeath(),180082,214,215
81416,tests_tests_renderscript_src_android_renderscript_cts_TestFmin.java,,,,"private void checkFminFloat4Float() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testFminFloat4Float(inX, out); verifyResultsFminFloat4Float(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFminFloat4Float: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testFminFloat4Float(inX, out); verifyResultsFminFloat4Float(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFminFloat4Float: "" + (e.toString()))); } }",56a71a0ef4146f652892cfc4a445d4dd92113bf7,,checkFminFloat4Float(),9,8,"private void checkFminFloat4FloatFloat4() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, -4925876494672766996L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, -4925876494672766996L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testFminFloat4FloatFloat4(inX, out); verifyResultsFminFloat4FloatFloat4(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFminFloat4FloatFloat4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testFminFloat4FloatFloat4(inX, out); verifyResultsFminFloat4FloatFloat4(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFminFloat4FloatFloat4: "" + (e.toString()))); } }",c7c58be98e9d55e416d7d135f4fe5d69f1a1ca84,checkFminFloat4FloatFloat4(),142976,441,391
554242,tests_tests_media_src_android_media_cts_AudioManagerTest.java,18.0,"public void testAdjustVolumeInAlarmsOnlyMode() throws java.lang.Exception { if ((mUseFixedVolume) || (mIsTelevision)) { return; } try { android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 1, 0); setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALARMS); int musicVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC); mAudioManager.adjustStreamVolume(AudioManager.STREAM_MUSIC, AudioManager.ADJUST_RAISE, 0); int volumeDelta = getVolumeDelta(mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); assertEquals((musicVolume + volumeDelta), mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); } finally { setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL); } }",93b02278f8c6a762d50a3a42442e8c55a24e0f4b,"public void testAdjustVolumeInAlarmsOnlyMode() throws java.lang.Exception { if (((mUseFixedVolume) || (mIsTelevision)) || (mIsSingleVolume)) { return; } try { android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 1, 0); setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALARMS); int musicVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC); mAudioManager.adjustStreamVolume(AudioManager.STREAM_MUSIC, AudioManager.ADJUST_RAISE, 0); int volumeDelta = getVolumeDelta(mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); assertEquals((musicVolume + volumeDelta), mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); } finally { setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL); } }",61f02f8e5a8a72a3e96a67555cfc2454318c9715,testAdjustVolumeInAlarmsOnlyMode(),testAdjustVolumeInAlarmsOnlyMode(),2,18,"public void testAdjustVolumeInAlarmsOnlyMode() throws java.lang.Exception { if (mSkipRingerTests) { return; } try { android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, 1, 0); setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALARMS); int musicVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC); mAudioManager.adjustStreamVolume(AudioManager.STREAM_MUSIC, AudioManager.ADJUST_RAISE, 0); int volumeDelta = getVolumeDelta(mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); assertEquals((musicVolume + volumeDelta), mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)); } finally { setInterruptionFilter(NotificationManager.INTERRUPTION_FILTER_ALL); } }",5f751f57168cccfc27fe4b06679cc4e4c28bf182,testAdjustVolumeInAlarmsOnlyMode(),429746,203,189
361230,luni_src_main_java_libcore_util_TimeZoneFinder.java,,,,public java.util.List<android.icu.util.TimeZone> lookupTimeZonesByCountry(java.lang.String countryIso) { java.util.List<android.icu.util.TimeZone> countryTimeZones = countryZones.get(countryIso); if (countryTimeZones == null) { return java.util.Collections.emptyList(); } return countryTimeZones; },36bbf02450406ae7ea4bbceb22f9fdcb378a87c9,,lookupTimeZonesByCountry(java.lang.String),8,5,"public java.util.List<android.icu.util.TimeZone> lookupTimeZonesByCountry(java.lang.String countryIso) { synchronized(this) { if (countryIso.equals(lastCountryIso)) { return lastCountryTimeZones; } } libcore.util.TimeZoneFinder.CountryZonesExtractor extractor = new libcore.util.TimeZoneFinder.CountryZonesExtractor(countryIso); java.util.List<android.icu.util.TimeZone> countryTimeZones = null; try { processXml(extractor); countryTimeZones = extractor.getMatchedZones(); } catch (java.io.IOException e) { java.lang.System.logW(""Error reading country zones "", e); countryIso = null; } catch (org.xmlpull.v1.XmlPullParserException e) { java.lang.System.logW(""Error reading country zones "", e); } synchronized(this) { lastCountryIso = countryIso; lastCountryTimeZones = countryTimeZones; } return countryTimeZones; }",99499b2ecc5a4e3f19e9a9c6ae22404a2e93be01,lookupTimeZonesByCountry(java.lang.String),429182,90,233
81416,tests_tests_renderscript_src_android_renderscript_cts_TestHalfSqrt.java,,,,"private void checkHalfSqrtFloat2() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testHalfSqrtFloat2(inV, out); verifyResultsHalfSqrtFloat2(inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testHalfSqrtFloat2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testHalfSqrtFloat2(inV, out); verifyResultsHalfSqrtFloat2(inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testHalfSqrtFloat2: "" + (e.toString()))); } }",776fbe5fcf7e32fcbfccd15aad77f7996bf3cf96,,checkHalfSqrtFloat2(),9,0,"private void checkHalfSqrtFloat2Float2() { android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -5823962698978187623L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testHalfSqrtFloat2Float2(inV, out); verifyResultsHalfSqrtFloat2Float2(inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testHalfSqrtFloat2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testHalfSqrtFloat2Float2(inV, out); verifyResultsHalfSqrtFloat2Float2(inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testHalfSqrtFloat2Float2: "" + (e.toString()))); } }",b4905394dc708722c18d8bd559f5f3bc8e611f15,checkHalfSqrtFloat2Float2(),143358,336,320
21889,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_xml_Hyperlinks.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static org.eclipse.jface.text.hyperlink.IHyperlink[] getStyleLinks(com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.XmlContext context, org.eclipse.jface.text.IRegion range, java.lang.String url) { org.w3c.dom.Attr attribute = context.getAttribute(); if (attribute != null) { int caret = context.getInnerRegionCaretOffset(); java.lang.String value = attribute.getValue(); int index = value.indexOf('.', caret); if (index != (-1)) { url = url.substring(0, index); range = new org.eclipse.jface.text.Region(range.getOffset(), ((range.getLength()) - ((value.length()) - index))); } } com.android.util.Pair<com.android.resources.ResourceType, java.lang.String> resource = com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.parseResource(url); if (resource == null) { java.lang.String androidStyle = ""@android:style/""; if (url.startsWith(com.android.ide.eclipse.adt.internal.editors.xml.ANDROID_RESOURCE_PREFIX)) { url = androidStyle + (url.substring(com.android.ide.eclipse.adt.internal.editors.xml.ANDROID_RESOURCE_PREFIX.length())); } else if (url.startsWith(((com.android.ide.eclipse.adt.AdtConstants.ANDROID_PKG) + ':'))) { url = androidStyle + (url.substring(((com.android.ide.eclipse.adt.AdtConstants.ANDROID_PKG.length()) + 1))); } else { url = ""@style/"" + url; } } return com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.getResourceLinks(range, url); }",bee64ab4682730569494788df86540dbbf226c29,,"getStyleLinks(com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks$XmlContext,org.eclipse.jface.text.IRegion,java.lang.String)",2,64,"private static org.eclipse.jface.text.hyperlink.IHyperlink[] getStyleLinks(com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.XmlContext context, org.eclipse.jface.text.IRegion range, java.lang.String url) { org.w3c.dom.Attr attribute = context.getAttribute(); if (attribute != null) { int caret = context.getInnerRegionCaretOffset(); java.lang.String value = attribute.getValue(); int index = value.indexOf('.', caret); if (index != (-1)) { url = url.substring(0, index); range = new org.eclipse.jface.text.Region(range.getOffset(), ((range.getLength()) - ((value.length()) - index))); } } com.android.util.Pair<com.android.resources.ResourceType, java.lang.String> resource = com.android.ide.eclipse.adt.internal.resources.ResourceHelper.parseResource(url); if (resource == null) { java.lang.String androidStyle = ""@android:style/""; if (url.startsWith(com.android.ide.eclipse.adt.internal.editors.xml.PREFIX_ANDROID_RESOURCE_REF)) { url = androidStyle + (url.substring(com.android.ide.eclipse.adt.internal.editors.xml.PREFIX_ANDROID_RESOURCE_REF.length())); } else if (url.startsWith(((com.android.ide.eclipse.adt.AdtConstants.ANDROID_PKG) + ':'))) { url = androidStyle + (url.substring(((com.android.ide.eclipse.adt.AdtConstants.ANDROID_PKG.length()) + 1))); } else { url = ""@style/"" + url; } } return com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.getResourceLinks(range, url); }",cf37bd53222f259b07dc953088280ccffaabe844,"getStyleLinks(com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks$XmlContext,org.eclipse.jface.text.IRegion,java.lang.String)",134945,420,421
37720,sdkmanager_libs_sdklib_src_com_android_sdklib_devices_Device.java,,,,public com.android.sdklib.devices.Device.Meta getMeta() { return mMeta; },769b764df4841a08467e54f5d2ef5e67c6171bf1,,getMeta(),8,15,public com.android.sdklib.devices.Meta getMeta() { return mMeta; },d43a8c22f11569a6ee07fb47f01c911b858927fd,getMeta(),17794,23,21
81416,tests_tests_renderscript_src_android_renderscript_cts_TestSqrt.java,,,,public void testSqrt() { checkSqrtFloat(); checkSqrtFloat2(); checkSqrtFloat3(); checkSqrtFloat4(); },fc3f2878ea31826c5d8f12a2b0f525f71c5855f5,,testSqrt(),9,8,public void testSqrt() { checkSqrtFloatFloat(); checkSqrtFloat2Float2(); checkSqrtFloat3Float3(); checkSqrtFloat4Float4(); },81e570fcb7e9c9eef42d60a4762ddd27177a6922,testSqrt(),142857,31,38
81416,tests_tests_renderscript_src_android_renderscript_cts_TestFastLength.java,,,,"private void checkFastLengthFloat3() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testFastLengthFloat3(inV, out); verifyResultsFastLengthFloat3(inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFastLengthFloat3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testFastLengthFloat3(inV, out); verifyResultsFastLengthFloat3(inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFastLengthFloat3: "" + (e.toString()))); } }",395ed8a27a5b7f8d04d675ce0eae57a175e1ec2a,,checkFastLengthFloat3(),9,1,"private void checkFastLengthFloat3Float() { android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, -6267952730197838278L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.forEach_testFastLengthFloat3Float(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFastLengthFloat3Float: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testFastLengthFloat3Float(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFastLengthFloat3Float: "" + (e.toString()))); } }",ad2b6f055ff88aefc5419d8aaec2f71fa3cdc5b0,checkFastLengthFloat3Float(),142930,328,279
57705,src_com_android_browser_BookmarkUtils.java,6.0,"static void displayRemoveBookmarkDialog(final long id, final java.lang.String title, final android.content.Context context, final android.os.Message msg) { new android.app.AlertDialog.Builder(context).setIconAttribute(android.R.attr.alertDialogIcon).setMessage(context.getString(R.string.delete_bookmark_warning, title)).setPositiveButton(R.string.ok, new android.content.DialogInterface.OnClickListener() { @java.lang.Override public void onClick(android.content.DialogInterface dialog, int whichButton) { if (msg != null) { msg.sendToTarget(); } java.lang.Runnable runnable = new java.lang.Runnable() { @java.lang.Override public void run() { android.net.Uri uri = android.content.ContentUris.withAppendedId(BrowserContract.Bookmarks.CONTENT_URI, id); context.getContentResolver().delete(uri, null, null); } }; new java.lang.Thread(runnable).start(); } }).setNegativeButton(R.string.cancel, null).show(); }",b3b0fc1be3c7b73ca3ced169a0517ff5d16b17cb,"static void displayRemoveBookmarkDialog(final long id, final java.lang.String title, final android.content.Context context, final android.os.Message msg, final boolean isFolder) { new android.app.AlertDialog.Builder(context).setIconAttribute(android.R.attr.alertDialogIcon).setMessage(context.getString(R.string.delete_bookmark_warning, title)).setPositiveButton(R.string.ok, new android.content.DialogInterface.OnClickListener() { @java.lang.Override public void onClick(android.content.DialogInterface dialog, int whichButton) { if (msg != null) { msg.sendToTarget(); } java.lang.Runnable runnable = new java.lang.Runnable() { @java.lang.Override public void run() { if (!isFolder) { android.net.Uri uri = android.content.ContentUris.withAppendedId(BrowserContract.Bookmarks.CONTENT_URI, id); context.getContentResolver().delete(uri, null, null); } else { com.android.browser.BookmarkUtils.loadFolderAndDelete(id, context); } } }; new java.lang.Thread(runnable).start(); } }).setNegativeButton(R.string.cancel, null).show(); }",d763b8e81081e276ee97badaa68f35ec3d2b4bfa,"displayRemoveBookmarkDialog(long,java.lang.String,android.content.Context,android.os.Message)","displayRemoveBookmarkDialog(long,java.lang.String,android.content.Context,android.os.Message,boolean)",4,8,"static void displayRemoveBookmarkDialog(final long id, final java.lang.String title, final android.content.Context context, final android.os.Message msg) { new android.app.AlertDialog.Builder(context).setIconAttribute(android.R.attr.alertDialogIcon).setMessage(context.getString(R.string.delete_bookmark_warning, title)).setPositiveButton(R.string.ok, new android.content.DialogInterface.OnClickListener() { @java.lang.Override public void onClick(android.content.DialogInterface dialog, int whichButton) { if (msg != null) { msg.sendToTarget(); } java.lang.Runnable runnable = new java.lang.Runnable() { @java.lang.Override public void run() { android.net.Uri uri = android.content.ContentUris.withAppendedId(BrowserContract.Bookmarks.CONTENT_URI, id); context.getContentResolver().delete(uri, null, null); } }; new java.lang.Thread(runnable).start(); } }).setNegativeButton(R.string.cancel, null).show(); }",b3b0fc1be3c7b73ca3ced169a0517ff5d16b17cb,"displayRemoveBookmarkDialog(long,java.lang.String,android.content.Context,android.os.Message)",352160,268,235
589435,services_core_java_com_android_server_ConnectivityService.java,123.0,"@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null) ? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); enforceAccessPermission(); } else { networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestableCapabilities(networkCapabilities); if (timeoutMs < 0) { throw new java.lang.IllegalArgumentException(""Bad timeout specified""); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log((""requestNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); if (timeoutMs > 0) { mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs); } return networkRequest; }",42a18aa11a8807c3c87eddedfd2f1c2095e426e0,"@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null) ? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); enforceAccessPermission(); } else { networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestableCapabilities(networkCapabilities); networkCapabilities.setSingleUid(android.os.Binder.getCallingUid()); if (timeoutMs < 0) { throw new java.lang.IllegalArgumentException(""Bad timeout specified""); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log((""requestNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); if (timeoutMs > 0) { mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs); } return networkRequest; }",8c0aae725d6bc33258d8f4266288f7fcf5086b04,"requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)","requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)",14,127,"@java.lang.Override public android.net.NetworkRequest requestNetwork(android.net.NetworkCapabilities networkCapabilities, android.os.Messenger messenger, int timeoutMs, android.os.IBinder binder, int legacyType) { final android.net.NetworkRequest.Type type = (networkCapabilities == null) ? NetworkRequest.Type.TRACK_DEFAULT : NetworkRequest.Type.REQUEST; if (type == (NetworkRequest.Type.TRACK_DEFAULT)) { networkCapabilities = new android.net.NetworkCapabilities(mDefaultRequest.networkCapabilities); networkCapabilities.removeCapability(com.android.server.NET_CAPABILITY_NOT_VPN); enforceAccessPermission(); } else { networkCapabilities = new android.net.NetworkCapabilities(networkCapabilities); enforceNetworkRequestPermissions(networkCapabilities); enforceMeteredApnPolicy(networkCapabilities); } ensureRequestableCapabilities(networkCapabilities); networkCapabilities.setSingleUid(android.os.Binder.getCallingUid()); if (timeoutMs < 0) { throw new java.lang.IllegalArgumentException(""Bad timeout specified""); } ensureValidNetworkSpecifier(networkCapabilities); android.net.NetworkRequest networkRequest = new android.net.NetworkRequest(networkCapabilities, legacyType, nextNetworkRequestId(), type); com.android.server.ConnectivityService.NetworkRequestInfo nri = new com.android.server.ConnectivityService.NetworkRequestInfo(messenger, networkRequest, binder); if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log((""requestNetwork for "" + nri)); mHandler.sendMessage(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_REGISTER_NETWORK_REQUEST, nri)); if (timeoutMs > 0) { mHandler.sendMessageDelayed(mHandler.obtainMessage(com.android.server.ConnectivityService.EVENT_TIMEOUT_NETWORK_REQUEST, nri), timeoutMs); } return networkRequest; }",98aa6a9fd7218a1c3c893ea2705dc64b85b4e8d1,"requestNetwork(android.net.NetworkCapabilities,android.os.Messenger,int,android.os.IBinder,int)",106379,388,412
81416,tests_tests_renderscript_src_android_renderscript_cts_TestLength.java,,,,"private void checkLengthFloat2() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testLengthFloat2(inV, out); verifyResultsLengthFloat2(inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLengthFloat2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLengthFloat2(inV, out); verifyResultsLengthFloat2(inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLengthFloat2: "" + (e.toString()))); } }",4908a3bbf245e4f182d8e6372a21772ae12e1fb9,,checkLengthFloat2(),9,5,"private void checkLengthFloat2Float() { android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 2545418583573859066L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.forEach_testLengthFloat2Float(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLengthFloat2Float: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLengthFloat2Float(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLengthFloat2Float: "" + (e.toString()))); } }",b20b6c1a13e4f04a4a00821cb30bd621af8df2e3,checkLengthFloat2Float(),143415,320,274
54131,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_sdk_Sdk.java,48.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.android.annotations.Nullable public com.android.sdklib.BuildToolInfo getBuildToolInfo(@com.android.annotations.Nullable java.lang.String buildToolVersion) { if (buildToolVersion != null) { return mManager.getBuildTool(com.android.sdklib.repository.FullRevision.parseRevision(buildToolVersion)); } return null; },d2fc6662d78d82356497aba44deb85a318080f48,,getBuildToolInfo(java.lang.String),4,63,@com.android.annotations.Nullable public com.android.sdklib.BuildToolInfo getBuildToolInfo(@com.android.annotations.Nullable java.lang.String buildToolVersion) { if (buildToolVersion != null) { try { return mManager.getBuildTool(com.android.sdklib.repository.FullRevision.parseRevision(buildToolVersion)); } catch (java.lang.Exception e) { } } return null; },4c766114cdb11759c769f9c7ceb55968883b4e12,getBuildToolInfo(java.lang.String),261832,81,95
42984,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_configuration_ConfigurationChooser.java,,,,@com.android.annotations.NonNull java.util.List<com.android.sdklib.IAndroidTarget> getTargetList() { return mTargetList; },3eb06b7efff223568687a94f0c4342cde4e42a5f,,getTargetList(),2,22,@com.android.annotations.NonNull public java.util.List<com.android.sdklib.IAndroidTarget> getTargetList() { return mTargetList; },735806bed02305ce00f1457a5b7d6d640f002f82,getTargetList(),311792,36,37
238591,src_com_android_phone_settings_fdn_FdnList.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean onMenuItemClick(android.view.MenuItem item) { if ((item.getItemId()) == (com.android.phone.settings.fdn.FdnList.MENU_DIAL)) { dialSelected(position); } else if ((item.getItemId()) == (com.android.phone.settings.fdn.FdnList.MENU_EDIT)) { editSelected(position); } return true; },a37b9f2863f1260a2d0b287874faa22a4b63bb3c,,onMenuItemClick(android.view.MenuItem),11,15,@java.lang.Override public boolean onMenuItemClick(android.view.MenuItem item) { if ((item.getItemId()) == (com.android.phone.settings.fdn.FdnList.MENU_EDIT)) { editSelected(position); } else if ((item.getItemId()) == (com.android.phone.settings.fdn.FdnList.MENU_DELETE)) { deleteSelected(position); } else if ((item.getItemId()) == (com.android.phone.settings.fdn.FdnList.MENU_DIAL)) { dialSelected(position); } return true; },e71578839d14b0ce0afa30662b159e2db6a0aa28,onMenuItemClick(android.view.MenuItem),288677,97,133
17554,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gle2_LayoutCanvas.java,56.0,@java.lang.Override public void dispose() { super.dispose(); if ((mOutlinePage) != null) { mOutlinePage.setModel(null); mOutlinePage = null; } if ((mHoverFgColor) != null) { mHoverFgColor.dispose(); mHoverFgColor = null; } if ((mDropTarget) != null) { mDropTarget.dispose(); mDropTarget = null; } if ((mRulesEngine) != null) { mRulesEngine.dispose(); mRulesEngine = null; } if ((mDragSource) != null) { mDragSource.dispose(); mDragSource = null; } if ((mClipboard) != null) { mClipboard.dispose(); mClipboard = null; } },be1a286d83772dc5db7710903e43d9247596246f,@java.lang.Override public void dispose() { super.dispose(); if ((mOutlinePage) != null) { mOutlinePage.setModel(null); mOutlinePage = null; } if ((mHoverStrokeColor) != null) { mHoverStrokeColor.dispose(); mHoverStrokeColor = null; } if ((mHoverFillColor) != null) { mHoverFillColor.dispose(); mHoverFillColor = null; } if ((mDropTarget) != null) { mDropTarget.dispose(); mDropTarget = null; } if ((mRulesEngine) != null) { mRulesEngine.dispose(); mRulesEngine = null; } if ((mDragSource) != null) { mDragSource.dispose(); mDragSource = null; } if ((mClipboard) != null) { mClipboard.dispose(); mClipboard = null; } },15cc3adbd716aa1df1dbf0c2ae7f629485c8913e,dispose(),dispose(),2,56,@java.lang.Override public void dispose() { super.dispose(); if ((mOutlinePage) != null) { mOutlinePage.setModel(null); mOutlinePage = null; } if ((mOutlineColor) != null) { mOutlineColor.dispose(); mOutlineColor = null; } if ((mHoverStrokeColor) != null) { mHoverStrokeColor.dispose(); mHoverStrokeColor = null; } if ((mHoverFillColor) != null) { mHoverFillColor.dispose(); mHoverFillColor = null; } if ((mDropTarget) != null) { mDropTarget.dispose(); mDropTarget = null; } if ((mRulesEngine) != null) { mRulesEngine.dispose(); mRulesEngine = null; } if ((mDragSource) != null) { mDragSource.dispose(); mDragSource = null; } if ((mClipboard) != null) { mClipboard.dispose(); mClipboard = null; } },8d781c30f9e73599b2a52b257a3fe1c43eed8e05,dispose(),374795,186,210
111960,build-system_builder_src_main_java_com_android_builder_core_VariantConfiguration.java,75.0,public boolean getMultiDex() { java.lang.Boolean value = mBuildType.getMultiDex(); if (value != null) { return value; } value = mMergedFlavor.getMultiDex(); if (value != null) { return value; } return false; },e98c8d75980196e076b65f5a2f5a35e357ffb113,public boolean isMultiDex() { java.lang.Boolean value = mBuildType.getMultiDex(); if (value != null) { return value; } value = mMergedFlavor.getMultiDex(); if (value != null) { return value; } return false; },46eafbc84b5b785cbb0c922d31509744bfa15f35,getMultiDex(),isMultiDex(),9,34,public boolean isMultiDexEnabled() { java.lang.Boolean value = mBuildType.getMultiDexEnabled(); if (value != null) { return value; } value = mMergedFlavor.getMultiDexEnabled(); if (value != null) { return value; } return false; },919263819683d917dfc5c978848a136223dd7a4f,isMultiDexEnabled(),480243,55,58
205395,ojluni_src_main_java_java_util_Arrays.java,27.0,"public static void sort(java.lang.Object[] a, int fromIndex, int toIndex) { if (java.util.Arrays.LegacyMergeSort.userRequested) java.util.Arrays.legacyMergeSort(a, fromIndex, toIndex); else java.util.ComparableTimSort.sort(a, fromIndex, toIndex); }",9a6d6e2eae16bd0589d9a63c09c991b19e8b6dc7,"public static void sort(java.lang.Object[] a, int fromIndex, int toIndex) { if (java.util.Arrays.LegacyMergeSort.userRequested) java.util.Arrays.legacyMergeSort(a, fromIndex, toIndex); else java.util.ComparableTimSort.sort(a, fromIndex, toIndex, null, 0, 0); }",be24d29d55e8ede2d6251b9705e6c1daee267304,"sort(java.lang.Object[],int,int)","sort(java.lang.Object[],int,int)",4,27,"public static void sort(java.lang.Object[] a, int fromIndex, int toIndex) { java.util.Arrays.rangeCheck(a.length, fromIndex, toIndex); if (java.util.Arrays.LegacyMergeSort.userRequested) java.util.Arrays.legacyMergeSort(a, fromIndex, toIndex); else java.util.ComparableTimSort.sort(a, fromIndex, toIndex, null, 0, 0); }",ff77dd4b9bafb970a4aea1d8a56b2fa3648ea4f8,"sort(java.lang.Object[],int,int)",424929,75,93
68130,java_src_test_java_com_google_protobuf_NanoTest.java,43.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void populate(com.google.protobuf.nano.NanoReferenceTypes.TestAllTypesNano message) { message.optionalInt32 = 5; message.optionalInt64 = 777L; message.optionalFloat = 1.0F; message.optionalDouble = 2.0; message.optionalBool = true; message.optionalString = ""Hello""; message.optionalBytes = new byte[]{ 1, 2, 3 }; message.optionalNestedMessage = new com.google.protobuf.nano.NanoReferenceTypes.TestAllTypesNano.NestedMessage(); message.optionalNestedMessage.foo = 27; message.optionalNestedEnum = com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAR; message.repeatedInt32 = new int[]{ 5, 6, 7, 8 }; message.repeatedInt64 = new long[]{ 27L, 28L, 29L }; message.repeatedFloat = new float[]{ 5.0F, 6.0F }; message.repeatedDouble = new double[]{ 99.1, 22.5 }; message.repeatedBool = new boolean[]{ true, false, true }; message.repeatedString = new java.lang.String[]{ ""One"", ""Two"" }; message.repeatedBytes = new byte[][]{ new byte[]{ 2, 7 }, new byte[]{ 2, 7 } }; message.repeatedNestedMessage = new com.google.protobuf.nano.NanoReferenceTypes.TestAllTypesNano.NestedMessage[]{ message.optionalNestedMessage, message.optionalNestedMessage }; message.repeatedNestedEnum = new int[]{ com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAR, com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAZ }; message.defaultFloatNan = 1.0F; message.defaultDoubleNan = 1.0; }",99443f5d66f4c9bc546af3792dda75dea9e8501e,,populate(com.google.protobuf.nano.NanoReferenceTypes$TestAllTypesNano),4,30,"private com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano createRefTypedMessageForHashCodeEqualsTest() { com.google.protobuf.nano.NanoReferenceTypes.TestAllTypesNano message = new com.google.protobuf.nano.NanoReferenceTypes.TestAllTypesNano(); message.optionalInt32 = 5; message.optionalInt64 = 777L; message.optionalFloat = 1.0F; message.optionalDouble = 2.0; message.optionalBool = true; message.optionalString = ""Hello""; message.optionalBytes = new byte[]{ 1, 2, 3 }; message.optionalNestedMessage = new com.google.protobuf.nano.NanoReferenceTypes.TestAllTypesNano.NestedMessage(); message.optionalNestedMessage.foo = 27; message.optionalNestedEnum = com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAR; message.repeatedInt32 = new int[]{ 5, 6, 7, 8 }; message.repeatedInt64 = new long[]{ 27L, 28L, 29L }; message.repeatedFloat = new float[]{ 5.0F, 6.0F }; message.repeatedDouble = new double[]{ 99.1, 22.5 }; message.repeatedBool = new boolean[]{ true, false, true }; message.repeatedString = new java.lang.String[]{ ""One"", ""Two"" }; message.repeatedBytes = new byte[][]{ new byte[]{ 2, 7 }, new byte[]{ 2, 7 } }; message.repeatedNestedMessage = new com.google.protobuf.nano.NanoReferenceTypes.TestAllTypesNano.NestedMessage[]{ message.optionalNestedMessage, message.optionalNestedMessage }; message.repeatedNestedEnum = new int[]{ com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAR, com.google.protobuf.nano.NanoOuterClass.TestAllTypesNano.BAZ }; return message; }",6cada3b4d8359674b6dfad7ec7353bfc0859a614,createRefTypedMessageForHashCodeEqualsTest(),283694,386,411
334106,service_java_com_android_server_wifi_WifiConfigManager.java,27.0,"public boolean loadFromUserStoreAfterUnlockOrSwitch(int userId) { com.android.server.wifi.WifiConfigStoreData storeData; try { storeData = mWifiConfigStore.switchUserStoreAndRead(mWifiConfigStore.createUserFile(userId)); } catch (java.io.IOException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG, ""Reading from new store failed. All saved private networks are lost!"", e); return false; } catch (org.xmlpull.v1.XmlPullParserException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG, (""XML deserialization of store failed. All saved private networks are"" + ""lost!""), e); return false; } loadInternalDataFromUserStore(storeData.getUserConfigurations(), storeData.getDeletedEphemeralSSIDs()); return true; }",a8cc189347abf06e96386551f12537682d944b0e,"public boolean loadFromUserStoreAfterUnlockOrSwitch(int userId) { try { mWifiConfigStore.switchUserStoreAndRead(com.android.server.wifi.WifiConfigStore.createUserFile(userId)); } catch (java.io.IOException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG, ""Reading from new store failed. All saved private networks are lost!"", e); return false; } catch (org.xmlpull.v1.XmlPullParserException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG, (""XML deserialization of store failed. All saved private networks are"" + ""lost!""), e); return false; } loadInternalDataFromUserStore(mWifiNetworkListStoreData.getUserConfigurations(), mDeletedEphemeralSsidsStoreData.getSsidList()); return true; }",5c72bebef990d2e995029108427d34828cff783c,loadFromUserStoreAfterUnlockOrSwitch(int),loadFromUserStoreAfterUnlockOrSwitch(int),5,27,"public boolean loadFromUserStoreAfterUnlockOrSwitch(int userId) { try { mWifiConfigStore.switchUserStoreAndRead(com.android.server.wifi.WifiConfigStore.createUserFile(userId)); } catch (java.io.IOException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG, ""Reading from new store failed. All saved private networks are lost!"", e); return false; } catch (org.xmlpull.v1.XmlPullParserException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG, (""XML deserialization of store failed. All saved private networks are"" + ""lost!""), e); return false; } loadInternalDataFromUserStore(mNetworkListStoreData.getUserConfigurations(), mDeletedEphemeralSsidsStoreData.getSsidList()); return true; }",c6e4965fc0a85ad80673ef21a5bae5146100ca8e,loadFromUserStoreAfterUnlockOrSwitch(int),384305,199,198
377920,tests_java_api_RSUnitTests_src_com_android_rs_unittest_UnitTest.java,9.0,public void runTest() { result = com.android.rs.unittest.UnitTest.UnitTestResult.UT_RUNNING; run(); },9ff8e7d2bd45acdfbcaa4839f9cbfba1b9e40478,public void runTest() { mResult = com.android.rs.unittest.UnitTest.UnitTestResult.UT_RUNNING; run(); if (mExpectMessage) { while (!(mGotMessage)) { java.lang.Thread.currentThread().yield(); } } },d4ca1ee5de76182ca372f68c679281500a2e12aa,runTest(),runTest(),4,9,"public void runTest() { mResult = com.android.rs.unittest.UnitTest.UnitTestResult.UT_RUNNING; run(); if ((mCountDownLatch) != null) { try { boolean success = mCountDownLatch.await((5 * 60), java.util.concurrent.TimeUnit.SECONDS); if (!success) { failTest(); android.util.Log.e(""Unit test %s waited too long for pass/fail message"", toString()); } } catch (java.lang.InterruptedException e) { failTest(); android.util.Log.e(com.android.rs.unittest.UnitTest.TAG, java.lang.String.format((""Unit test %s raised InterruptedException when "" + ""listening for pass/fail message""), toString())); } } }",972e770f571b959443ea0559b30a54b015d2ab81,runTest(),5152,57,170
79521,core_java_android_animation_PropertyValuesHolder.java,9.0,"@java.lang.Override void setupSetter(java.lang.Class targetClass) { if ((mProperty) != null) { return; } try { mPropertyMapLock.writeLock().lock(); java.util.HashMap<java.lang.String, java.lang.Integer> propertyMap = android.animation.PropertyValuesHolder.FloatPropertyValuesHolder.sJNISetterPropertyMap.get(targetClass); if (propertyMap != null) { java.lang.Integer mJniSetterInteger = propertyMap.get(mPropertyName); if (mJniSetterInteger != null) { mJniSetter = mJniSetterInteger; } } if ((mJniSetter) == 0) { java.lang.String methodName = android.animation.PropertyValuesHolder.getMethodName(""set"", mPropertyName); mJniSetter = android.animation.PropertyValuesHolder.nGetFloatMethod(targetClass, methodName); if ((mJniSetter) != 0) { if (propertyMap == null) { propertyMap = new java.util.HashMap<java.lang.String, java.lang.Integer>(); android.animation.PropertyValuesHolder.FloatPropertyValuesHolder.sJNISetterPropertyMap.put(targetClass, propertyMap); } propertyMap.put(mPropertyName, mJniSetter); } } } catch (java.lang.NoSuchMethodError e) { } finally { mPropertyMapLock.writeLock().unlock(); } if ((mJniSetter) == 0) { super.setupSetter(targetClass); } }",2f45757e410e5d7e985b0b8a2d40acde7c6b4595,"@java.lang.Override void setupSetter(java.lang.Class targetClass) { if ((mProperty) != null) { return; } try { mPropertyMapLock.writeLock().lock(); java.util.HashMap<java.lang.String, java.lang.Long> propertyMap = android.animation.PropertyValuesHolder.FloatPropertyValuesHolder.sJNISetterPropertyMap.get(targetClass); if (propertyMap != null) { java.lang.Long mJniSetterLong = propertyMap.get(mPropertyName); if (mJniSetterLong != null) { mJniSetter = mJniSetterLong; } } if ((mJniSetter) == 0) { java.lang.String methodName = android.animation.PropertyValuesHolder.getMethodName(""set"", mPropertyName); mJniSetter = android.animation.PropertyValuesHolder.nGetFloatMethod(targetClass, methodName); if ((mJniSetter) != 0) { if (propertyMap == null) { propertyMap = new java.util.HashMap<java.lang.String, java.lang.Long>(); android.animation.PropertyValuesHolder.FloatPropertyValuesHolder.sJNISetterPropertyMap.put(targetClass, propertyMap); } propertyMap.put(mPropertyName, mJniSetter); } } } catch (java.lang.NoSuchMethodError e) { } finally { mPropertyMapLock.writeLock().unlock(); } if ((mJniSetter) == 0) { super.setupSetter(targetClass); } }",b9ab877d594cb7cf9c420a4c2b678f2b4b7cc37f,setupSetter(java.lang.Class),setupSetter(java.lang.Class),3,10,"@java.lang.Override void setupSetter(java.lang.Class targetClass) { if ((mProperty) != null) { return; } try { mPropertyMapLock.writeLock().lock(); java.util.HashMap<java.lang.String, java.lang.Long> propertyMap = android.animation.PropertyValuesHolder.FloatPropertyValuesHolder.sJNISetterPropertyMap.get(targetClass); if (propertyMap != null) { java.lang.Long jniSetter = propertyMap.get(mPropertyName); if (jniSetter != null) { mJniSetter = jniSetter; } } if ((mJniSetter) == 0) { java.lang.String methodName = android.animation.PropertyValuesHolder.getMethodName(""set"", mPropertyName); mJniSetter = android.animation.PropertyValuesHolder.nGetFloatMethod(targetClass, methodName); if ((mJniSetter) != 0) { if (propertyMap == null) { propertyMap = new java.util.HashMap<java.lang.String, java.lang.Long>(); android.animation.PropertyValuesHolder.FloatPropertyValuesHolder.sJNISetterPropertyMap.put(targetClass, propertyMap); } propertyMap.put(mPropertyName, mJniSetter); } } } catch (java.lang.NoSuchMethodError e) { } finally { mPropertyMapLock.writeLock().unlock(); } if ((mJniSetter) == 0) { super.setupSetter(targetClass); } }",4164405c2517d960c4f7e41567d661ecb75f5a02,setupSetter(java.lang.Class),256105,314,307
114459,jack_src_com_android_jack_library_v0000_InputJackLibraryImpl.java,3.0,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.InputVFile getFile(@javax.annotation.Nonnull com.android.jack.library.FileType fileType, @javax.annotation.Nonnull com.android.sched.vfs.VPath typePath) throws com.android.jack.library.FileTypeDoesNotExistException { try { typePath.addSuffix(fileType.getFileExtension()); return libraryVDir.getInputVFile(typePath); } catch (com.android.sched.util.file.NotFileOrDirectoryException e) { throw new com.android.jack.library.FileTypeDoesNotExistException(getLocation(), typePath, fileType); } catch (com.android.sched.util.file.NoSuchFileException e) { throw new com.android.jack.library.FileTypeDoesNotExistException(getLocation(), typePath, fileType); } }",5f44030e2777730de2f52a75b4b7948434a3ba49,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.InputVFile getFile(@javax.annotation.Nonnull com.android.jack.library.FileType fileType, @javax.annotation.Nonnull com.android.sched.vfs.VPath typePath) throws com.android.jack.library.FileTypeDoesNotExistException { try { com.android.sched.vfs.VPath localPath = new com.android.sched.vfs.VPath(typePath.getPathAsString('/'), '/'); localPath.addSuffix(fileType.getFileExtension()); return libraryVDir.getInputVFile(localPath); } catch (com.android.sched.util.file.NotFileOrDirectoryException e) { throw new com.android.jack.library.FileTypeDoesNotExistException(getLocation(), typePath, fileType); } catch (com.android.sched.util.file.NoSuchFileException e) { throw new com.android.jack.library.FileTypeDoesNotExistException(getLocation(), typePath, fileType); } }",0abd425e07013513b5a459c2eed6dfc28fc32533,"getFile(com.android.jack.library.FileType,com.android.sched.vfs.VPath)","getFile(com.android.jack.library.FileType,com.android.sched.vfs.VPath)",16,3,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.InputVFile getFile(@javax.annotation.Nonnull com.android.jack.library.FileType fileType, @javax.annotation.Nonnull com.android.sched.vfs.VPath typePath) throws com.android.jack.library.FileTypeDoesNotExistException { try { com.android.sched.vfs.VPath clonedPath = typePath.clone(); clonedPath.addSuffix(fileType.getFileExtension()); return libraryVDir.getInputVFile(clonedPath); } catch (com.android.sched.util.file.NotFileOrDirectoryException e) { throw new com.android.jack.library.FileTypeDoesNotExistException(getLocation(), typePath, fileType); } catch (com.android.sched.util.file.NoSuchFileException e) { throw new com.android.jack.library.FileTypeDoesNotExistException(getLocation(), typePath, fileType); } }",4d413f5d1f7d20a3b82562d118e4fd65b8fe0b30,"getFile(com.android.jack.library.FileType,com.android.sched.vfs.VPath)",482796,221,206
48539,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_OpenSSLX509Certificate.java,,,,@java.lang.Override public boolean[] getIssuerUniqueID() { return null; },78af94049dd15d87f45e00e26733a547aee09c27,,getIssuerUniqueID(),17,18,@java.lang.Override public boolean[] getIssuerUniqueID() { return org.apache.harmony.xnet.provider.jsse.NativeCrypto.get_X509_issuerUID(mContext); },83db9c1443850d7d802387024f49339c7aca9d6c,getIssuerUniqueID(),437038,18,44
74194,build-system_gradle_src_build-test_groovy_com_android_build_gradle_BuildTest.java,0.0,"protected java.io.File buildProject(java.lang.String name, java.lang.String gradleVersion) { return runTasksOnProject(name, gradleVersion, ""clean"", ""assembleDebug"", ""lint""); }",aa6f863a4e8b90cd6f074d391d88547424db7f20,"protected java.io.File buildProject(java.lang.String name, java.lang.String gradleVersion) { return runTasksOnProject(name, gradleVersion, ""clean"", ""assembleDebug""); }",2357de806f73ba98764e16a282b187763a870b3a,"buildProject(java.lang.String,java.lang.String)","buildProject(java.lang.String,java.lang.String)",7,0,"protected java.io.File buildProject(java.lang.String name, java.lang.String gradleVersion) { return runTasksOnProject(name, gradleVersion, ""clean"", ""assembleDebug"", ""lint""); }",aa6f863a4e8b90cd6f074d391d88547424db7f20,"buildProject(java.lang.String,java.lang.String)",24056,44,48
243393,jack_src_com_android_jack_backend_ResourceWriter.java,0.0,@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws java.lang.Exception { assert (outputVDir) != null; java.util.List<com.android.jack.ir.ast.Resource> resources = session.getResources(); for (com.android.jack.ir.ast.Resource resource : resources) { com.android.sched.vfs.InputVFile inputFile = resource.getVFile(); com.android.sched.vfs.VPath path = resource.getPath(); com.android.sched.vfs.OutputVFile outputFile = outputVDir.getRootOutputVDir().createOutputVFile(path); outputFile.copy(inputFile); } },ead735da0bd6cd36e17fc370950516ab8b28503b,@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) { assert (outputVDir) != null; java.util.List<com.android.jack.ir.ast.Resource> resources = session.getResources(); for (com.android.jack.ir.ast.Resource resource : resources) { com.android.sched.vfs.InputVFile inputFile = resource.getVFile(); com.android.sched.vfs.VPath path = resource.getPath(); com.android.sched.vfs.OutputVFile outputFile = outputVDir.getRootOutputVDir().createOutputVFile(path); outputFile.copy(inputFile); } },284796189c4e9efe23f879090efa422d3eb29007,run(com.android.jack.ir.ast.JSession),run(com.android.jack.ir.ast.JSession),4,0,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) { assert (outputVDir) != null; java.util.List<com.android.jack.ir.ast.Resource> resources = session.getResources(); for (com.android.jack.ir.ast.Resource resource : resources) { com.android.sched.vfs.InputVFile inputFile = resource.getVFile(); com.android.sched.vfs.VPath path = resource.getPath(); try { com.android.sched.vfs.OutputVFile outputFile = outputVDir.getRootOutputVDir().createOutputVFile(path); outputFile.copy(inputFile); } catch (com.android.sched.util.file.CannotCreateFileException | com.android.sched.util.file.WrongPermissionException | com.android.sched.util.file.CannotCloseException | com.android.sched.util.file.CannotReadException | com.android.sched.util.file.CannotWriteException e) { com.android.jack.reporting.ReportableIOException reportable = new com.android.jack.reporting.ReportableIOException(""Dex resource writing"", e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, reportable); throw new com.android.jack.JackAbortException(reportable); } } }",5337e7f61c4f5a3eb2407403e9dc71582961d866,run(com.android.jack.ir.ast.JSession),126185,154,303
579565,src_java_com_android_internal_telephony_RIL.java,161.0,"@java.lang.Override public void getPreferredVoicePrivacy(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getPreferredVoicePrivacy(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getPreferredVoicePrivacy"", e); } } }",fb0752f752df8dcfa101e2e0c6983b6166569c8c,"@java.lang.Override public void getPreferredVoicePrivacy(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getPreferredVoicePrivacy(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getPreferredVoicePrivacy"", e); } } }",c2f005b5f8914cb43c98bbf1287fdf56c2448a55,getPreferredVoicePrivacy(android.os.Message),getPreferredVoicePrivacy(android.os.Message),3,161,"@java.lang.Override public void getPreferredVoicePrivacy(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getPreferredVoicePrivacy(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getPreferredVoicePrivacy"", e); } } }",fb0752f752df8dcfa101e2e0c6983b6166569c8c,getPreferredVoicePrivacy(android.os.Message),89302,216,212
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,23.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testResetMemory() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses(""BF34038001009000""); mEuiccCard.resetMemory(EuiccCard.ResetOption.DELETE_FIELD_LOADED_TEST_PROFILES); verifyStoreData(channel, ""BF340482020640""); }",8f764790008d009198ccea1eab1286433508149b,,testResetMemory(),8,13,"@org.junit.Test public void testResetMemory() { int channel = mockLogicalChannelResponses(""BF34038001009000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<java.lang.Void> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.resetMemory(EuiccCardManager.RESET_OPTION_DELETE_FIELD_LOADED_TEST_PROFILES, resultCaptor, mHandler); resultCaptor.await(); assertUnexpectedException(resultCaptor.exception); verifyStoreData(channel, ""BF340482020640""); }",38cb30b5de0658b7c50bf1b18387e388a78338c1,testResetMemory(),396910,112,150
110924,jack_tests_com_android_jack_tools_merger_test011_MergerTest011.java,6.0,"@org.junit.Test public void testMergerWithHighNumberOfMethods() throws java.lang.Exception { java.io.File srcFolder = com.android.jack.TestTools.createTempDir(""oneDexPerType"", ""SrcFolder""); for (int fileIdx = 0; fileIdx < (com.android.jack.tools.merger.test011.MergerTest011.fileCount); fileIdx++) { generateJavaFileWithMethods(srcFolder, fileIdx, 100); } generateJavaFileWithMethods(srcFolder, com.android.jack.tools.merger.test011.MergerTest011.fileCount, 36); try { buildOneDexPerType(com.android.jack.TestTools.getDefaultBootclasspathString(), srcFolder, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { java.lang.Throwable cause = e.getCause(); junit.framework.Assert.assertTrue((cause instanceof com.android.jack.backend.dex.DexWritingException)); junit.framework.Assert.assertTrue(((cause.getCause()) instanceof com.android.jack.backend.dex.SingleDexOverflowException)); junit.framework.Assert.assertTrue(((cause.getCause().getCause()) instanceof com.android.jack.tools.merger.MethodIdOverflowException)); } }",cc3ff9bfe5382364d41f191ed6500158f4689988,"@org.junit.Test public void testMergerWithHighNumberOfMethods() throws java.lang.Exception { java.io.File srcFolder = com.android.jack.TestTools.createTempDir(""oneDexPerType"", ""SrcFolder""); for (int fileIdx = 0; fileIdx < (com.android.jack.tools.merger.test011.MergerTest011.fileCount); fileIdx++) { generateJavaFileWithMethods(srcFolder, fileIdx, 100); } generateJavaFileWithMethods(srcFolder, com.android.jack.tools.merger.test011.MergerTest011.fileCount, 36); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); java.io.PrintStream redirectStream = new java.io.PrintStream(baos); java.lang.System.setErr(redirectStream); try { buildOneDexPerType(com.android.jack.TestTools.getDefaultBootclasspathString(), srcFolder, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { java.lang.Throwable cause = e.getCause(); junit.framework.Assert.assertTrue((cause instanceof com.android.jack.backend.dex.DexWritingException)); junit.framework.Assert.assertTrue(((cause.getCause()) instanceof com.android.jack.backend.dex.SingleDexOverflowException)); junit.framework.Assert.assertTrue(((cause.getCause().getCause()) instanceof com.android.jack.tools.merger.MethodIdOverflowException)); junit.framework.Assert.assertTrue(baos.toString().contains(com.android.jack.tools.merger.test011.MergerTest011.expectedMessage)); } finally { redirectStream.close(); } }",6f9e06783d234e7065316ccba0a463d10093fc87,testMergerWithHighNumberOfMethods(),testMergerWithHighNumberOfMethods(),2,6,"@org.junit.Test public void testMergerWithHighNumberOfMethods() throws java.lang.Exception { java.io.File srcFolder = com.android.jack.TestTools.createTempDir(""oneDexPerType"", ""SrcFolder""); for (int fileIdx = 0; fileIdx < (com.android.jack.tools.merger.test011.MergerTest011.fileCount); fileIdx++) { generateJavaFileWithMethods(srcFolder, fileIdx, 100); } generateJavaFileWithMethods(srcFolder, com.android.jack.tools.merger.test011.MergerTest011.fileCount, 36); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); java.io.PrintStream redirectStream = new java.io.PrintStream(baos); java.lang.System.setErr(redirectStream); try { buildOneDexPerType(com.android.jack.TestTools.getDefaultBootclasspathString(), srcFolder, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { java.lang.Throwable cause = e.getCause(); junit.framework.Assert.assertTrue((cause instanceof com.android.jack.backend.dex.DexWritingException)); junit.framework.Assert.assertTrue(((cause.getCause()) instanceof com.android.jack.backend.dex.SingleDexOverflowException)); junit.framework.Assert.assertTrue(((cause.getCause().getCause()) instanceof com.android.jack.tools.merger.MethodIdOverflowException)); junit.framework.Assert.assertTrue(baos.toString().contains(com.android.jack.tools.merger.test011.MergerTest011.EXPECTED_MESSAGE)); } finally { redirectStream.close(); } }",c06d2bd9e774031c7b784cffb4ddcff3fe6341b7,testMergerWithHighNumberOfMethods(),356636,367,368
43713,luni_src_test_java_libcore_javax_crypto_CipherTest.java,38.0,"private static int getExpectedBlockSize(java.lang.String algorithm) { java.lang.Integer expected = libcore.javax.crypto.CipherTest.EXPECTED_BLOCK_SIZE.get(algorithm); assertNotNull(algorithm, expected); return expected; }",34665502606fd4ac77bbada87cc6a95a8ef8257e,"private static int getExpectedBlockSize(java.lang.String algorithm) { final int firstSlash = algorithm.indexOf('/'); if (firstSlash != (-1)) { algorithm = algorithm.substring(0, firstSlash); } java.lang.Integer expected = libcore.javax.crypto.CipherTest.EXPECTED_BLOCK_SIZE.get(algorithm); assertNotNull(algorithm, expected); return expected; }",7ab8b26fbcffb780ea7b15566a655779d726472e,getExpectedBlockSize(java.lang.String),getExpectedBlockSize(java.lang.String),8,27,"private static int getExpectedBlockSize(java.lang.String algorithm, java.security.Key key) { final int firstSlash = algorithm.indexOf('/'); if (firstSlash != (-1)) { algorithm = algorithm.substring(0, firstSlash); } if ((!(libcore.java.security.StandardNames.IS_RI)) && (""RSA"".equals(libcore.javax.crypto.CipherTest.getBaseAlgorithm(algorithm)))) { return (libcore.javax.crypto.CipherTest.getRSAModulusSize(key)) - 1; } java.lang.Integer expected = libcore.javax.crypto.CipherTest.EXPECTED_BLOCK_SIZE.get(algorithm); assertNotNull(algorithm, expected); return expected; }",d97abd069fefcc50c912b71abcd4357dac11d1bc,"getExpectedBlockSize(java.lang.String,java.security.Key)",147384,83,154
553459,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerDisplayTests.java,40.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean isVrHeadset() { try { if (mDevice.getProperty(android.server.cts.ActivityManagerDisplayTests.VR_STANDALONE_DEVICE).equals(""1"")) { return true; } return false; } catch (com.android.tradefed.device.DeviceNotAvailableException e) { return false; } }",72e84d25148bf729f773f419b0d8e46e5d205d24,,isVrHeadset(),8,38,"private boolean isVrHeadset() { try { if (mDevice.getProperty(android.server.cts.ActivityManagerDisplayTests.VR_STANDALONE_DEVICE_PROPERTY).equals(""1"")) { return true; } return false; } catch (com.android.tradefed.device.DeviceNotAvailableException e) { return false; } }",2d1fa4505f01ae34334a342df131e9386fefce09,isVrHeadset(),118136,74,76
123694,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_StackFrame_GetValues002Test.java,,,,"public void testGetValues_Boolean() { org.apache.harmony.jpda.tests.jdwp.StackFrame.GetValues002Test.GetValuesTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.GetValues002Test.GetValuesTester(""testGetValues_Boolean"", ""breakpointBoolean"", ""runBreakpointBoolean"", ""param"", JDWPConstants.Tag.BOOLEAN_TAG) { @java.lang.Override public void checkValue(org.apache.harmony.jpda.tests.framework.jdwp.Value value) { assertEquals((""Incorrect value in variable "" + (getTestVariableName())), GetValues002Debuggee.BOOLEAN_PARAM_VALUE, value.getBooleanValue()); } }; runTest(tester); }",9c7dbc67832781c12000547dff87a7d4911f68cd,,testGetValues_Boolean(),8,0,"public void testGetValues001_Boolean() { org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester(""breakpointBoolean"", StackTrace002Debuggee.BOOLEAN_SIGNAL); org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod(""runBreakpointBoolean""); methodInfo.addVariable(""param"", new org.apache.harmony.jpda.tests.framework.jdwp.Value(StackTrace002Debuggee.BOOLEAN_PARAM_VALUE)); runStackFrameTest(tester); }",4edc0bf2877d5e3dabd737c9d3b76121e37ce77b,testGetValues001_Boolean(),215713,172,153
346149,service_java_com_android_server_wifi_WifiVendorHal.java,42.0,"public boolean startScan(com.android.server.wifi.WifiNative.ScanSettings settings, com.android.server.wifi.WifiNative.ScanEventHandler eventHandler) { android.hardware.wifi.V1_0.WifiStatus status; kilroy(); if (eventHandler == null) return false; synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return false; try { if (((mScan) != null) && (!(mScan.paused))) { status = mIWifiStaIface.stopBackgroundScan(mScan.cmdId); if ((status.code) != (android.hardware.wifi.V1_0.WifiStatusCode.SUCCESS)) { kilroy(); } mScan = null; } mLastScanCmdId = ((mLastScanCmdId) % 9) + 1; com.android.server.wifi.WifiVendorHal.CurrentBackgroundScan scan = new com.android.server.wifi.WifiVendorHal.CurrentBackgroundScan(mLastScanCmdId, settings); status = mIWifiStaIface.startBackgroundScan(scan.cmdId, scan.param); if ((status.code) != (android.hardware.wifi.V1_0.WifiStatusCode.SUCCESS)) return false; kilroy(); scan.eventHandler = eventHandler; mScan = scan; return true; } catch (android.os.RemoteException e) { handleRemoteException(e); return false; } } }",d0cb06eea8bbb7d7c5d992effcc62d56fdb072a6,"public boolean startScan(com.android.server.wifi.WifiNative.ScanSettings settings, com.android.server.wifi.WifiNative.ScanEventHandler eventHandler) { android.hardware.wifi.V1_0.WifiStatus status; kilroy(); if (eventHandler == null) return false; synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return false; try { if (((mScan) != null) && (!(mScan.paused))) { status = mIWifiStaIface.stopBackgroundScan(mScan.cmdId); if (!(ok(status))) { kilroy(); } mScan = null; } mLastScanCmdId = ((mLastScanCmdId) % 9) + 1; com.android.server.wifi.WifiVendorHal.CurrentBackgroundScan scan = new com.android.server.wifi.WifiVendorHal.CurrentBackgroundScan(mLastScanCmdId, settings); status = mIWifiStaIface.startBackgroundScan(scan.cmdId, scan.param); if (!(ok(status))) return false; kilroy(); scan.eventHandler = eventHandler; mScan = scan; return true; } catch (android.os.RemoteException e) { handleRemoteException(e); return false; } } }",159887a17ec2a53e1eafc40d3fe9a4424778cc21,"startScan(com.android.server.wifi.WifiNative$ScanSettings,com.android.server.wifi.WifiNative$ScanEventHandler)","startScan(com.android.server.wifi.WifiNative$ScanSettings,com.android.server.wifi.WifiNative$ScanEventHandler)",5,42,"public boolean startScan(com.android.server.wifi.WifiNative.ScanSettings settings, com.android.server.wifi.WifiNative.ScanEventHandler eventHandler) { android.hardware.wifi.V1_0.WifiStatus status; if (eventHandler == null) return boolResult(false); synchronized(com.android.server.wifi.WifiVendorHal.sLock) { if ((mIWifiStaIface) == null) return boolResult(false); try { if (((mScan) != null) && (!(mScan.paused))) { ok(mIWifiStaIface.stopBackgroundScan(mScan.cmdId)); mScan = null; } mLastScanCmdId = ((mLastScanCmdId) % 9) + 1; com.android.server.wifi.WifiVendorHal.CurrentBackgroundScan scan = new com.android.server.wifi.WifiVendorHal.CurrentBackgroundScan(mLastScanCmdId, settings); status = mIWifiStaIface.startBackgroundScan(scan.cmdId, scan.param); if (!(ok(status))) return false; scan.eventHandler = eventHandler; mScan = scan; return true; } catch (android.os.RemoteException e) { handleRemoteException(e); return false; } } }",2fbec442ddea7f1c007fba408a5ef9e5453e1a3d,"startScan(com.android.server.wifi.WifiNative$ScanSettings,com.android.server.wifi.WifiNative$ScanEventHandler)",404603,294,277
161522,jack-server_src_com_android_jack_server_JackHttpServer.java,44.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@javax.annotation.Nonnull public java.lang.String getLogPattern() { return com.android.jack.server.ServerLogConfiguration.getLogFilePattern((((serverDir.getPath().replace(java.io.File.separatorChar, '/')) + '/') + (com.android.jack.server.JackHttpServer.LOG_FILE_PATTERN))); }",c70fd0d77b2b91ff71efdb8c0a64cb27095d2fbc,,getLogPattern(),8,56,@javax.annotation.Nonnull public com.android.jack.server.ServerLogConfiguration getLogConfiguration() { return logConfiguration.clone(); },3d8fea76732197e167d03b252b7dc68c159b4249,getLogConfiguration(),115619,73,29
161932,platform_bootstrap_src_com_intellij_idea_Main.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void createRecordFile() { if ((!(com.intellij.idea.Main.isHeadless)) && (""AndroidStudio"".equals(java.lang.System.getProperty(com.intellij.idea.Main.PLATFORM_PREFIX_PROPERTY)))) { try { java.io.File f = com.intellij.openapi.util.io.FileUtil.createTempFile(""AndroidStudio."", java.util.UUID.randomUUID().toString()); java.lang.System.setProperty(""studio.record.file"", f.getAbsolutePath()); } catch (java.io.IOException ex) { } } }",890f21f454ade2fd0f6d246c0dd700e0272122cd,,createRecordFile(),7,12,"private static void createRecordFile() { try { java.io.File f = new java.io.File(com.intellij.openapi.application.PathManager.getTempPath(), java.lang.String.format(""%s.%s"", java.lang.System.getProperty(com.intellij.idea.Main.PLATFORM_PREFIX_PROPERTY), java.util.UUID.randomUUID().toString())); if (f.createNewFile()) { java.lang.System.setProperty(""studio.record.file"", f.getAbsolutePath()); } } catch (java.io.IOException ex) { } }",7d3e5ca6a0cfeecba25506cce6af218219e974cb,createRecordFile(),141435,124,124
355599,tests_wifitests_src_com_android_server_wifi_p2p_SupplicantP2pIfaceHalTest.java,65.0,"public void answer(byte[] peer, int method, java.lang.String pin, boolean joinExisting, boolean persistent, int goIntent, ISupplicantP2pIface.connectCallback cb) throws android.os.RemoteException { methods.add(method); if (method == (ISupplicantP2pIface.WpsProvisionMethod.DISPLAY)) { assertEquals(pin, configPin); } cb.onValues(mStatusSuccess, pin); }",37a9a0e906bdcedc14b808ebdae94ffbebdda36d,"public void answer(byte[] peer, int method, java.lang.String pin, boolean joinExisting, boolean persistent, int goIntent, ISupplicantP2pIface.connectCallback cb) throws android.os.RemoteException { methods.add(method); if ((method == (ISupplicantP2pIface.WpsProvisionMethod.DISPLAY)) && (android.text.TextUtils.isEmpty(pin))) { cb.onValues(mStatusSuccess, configPin); } else { assertEquals(pin, configPin); cb.onValues(mStatusSuccess, """"); } }",2079c6f8b417e6ef07fc7a036554d08582c4d6e0,"answer(byte[],int,java.lang.String,boolean,boolean,int,ISupplicantP2pIface.connectCallback)","answer(byte[],int,java.lang.String,boolean,boolean,int,ISupplicantP2pIface.connectCallback)",4,65,"public void answer(byte[] peer, int method, java.lang.String pin, boolean joinExisting, boolean persistent, int goIntent, ISupplicantP2pIface.connectCallback cb) throws android.os.RemoteException { methods.add(method); if ((method == (ISupplicantP2pIface.WpsProvisionMethod.DISPLAY)) && (android.text.TextUtils.isEmpty(pin))) { cb.onValues(mStatusSuccess, configPin); } else { if (method != (ISupplicantP2pIface.WpsProvisionMethod.PBC)) { assertEquals(pin, configPin); } cb.onValues(mStatusSuccess, """"); } }",10c91ae32a996128240f4f50d4e9fa4806baa19c,"answer(byte[],int,java.lang.String,boolean,boolean,int,ISupplicantP2pIface.connectCallback)",100082,128,154
195862,test_087-gc-after-link_src_Main.java,0.0,"private static void processFailLoadAndGc() throws Main.TestFailed { try { Main.BrokenDexLoader loader; loader = new Main.BrokenDexLoader(java.lang.ClassLoader.getSystemClassLoader()); loader.findBrokenClass(); java.lang.System.err.println(""ERROR: Inaccessible was accessible""); } catch (java.lang.reflect.InvocationTargetException ite) { java.lang.Throwable cause = ite.getCause(); if (cause instanceof java.lang.NullPointerException) { java.lang.System.err.println(""Got expected ITE/NPE""); } else { java.lang.System.err.println(""Got unexpected ITE""); ite.printStackTrace(); } } }",68223fa1efca39a320e7ecc73834aeb09edf50f0,"private static void processFailLoadAndGc() throws Main.TestFailed { try { Main.BrokenDexLoader loader; loader = new Main.BrokenDexLoader(java.lang.ClassLoader.getSystemClassLoader()); loader.findBrokenClass(); java.lang.System.err.println(""ERROR: Inaccessible was accessible""); } catch (java.lang.reflect.InvocationTargetException ite) { java.lang.Throwable cause = ite.getCause(); if (cause instanceof java.lang.NullPointerException) { java.lang.System.err.println(""Got expected ITE/NPE""); } else { java.lang.System.err.println(""Got unexpected ITE""); ite.printStackTrace(java.lang.System.out); } } }",4aa98f67b3b1402abcb7d7ba985dfe7d816907c8,processFailLoadAndGc(),processFailLoadAndGc(),3,0,"private static void processFailLoadAndGc() throws Main.TestFailed { try { Main.BrokenDexLoader loader; loader = new Main.BrokenDexLoader(java.lang.ClassLoader.getSystemClassLoader()); loader.findBrokenClass(); java.lang.System.out.println(""ERROR: Inaccessible was accessible""); } catch (java.lang.reflect.InvocationTargetException ite) { java.lang.Throwable cause = ite.getCause(); if (cause instanceof java.lang.NullPointerException) { java.lang.System.out.println(""Got expected ITE/NPE""); } else { java.lang.System.out.println(""Got unexpected ITE""); ite.printStackTrace(java.lang.System.out); } } }",91cd5d9cff43dfd40c2d01b8a779e2c251c9be96,processFailLoadAndGc(),228157,157,157
81416,tests_tests_renderscript_src_android_renderscript_cts_TestSinpi.java,,,,"private void checkSinpiFloat2() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testSinpiFloat2(in, out); verifyResultsSinpiFloat2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testSinpiFloat2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testSinpiFloat2(in, out); verifyResultsSinpiFloat2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testSinpiFloat2: "" + (e.toString()))); } }",d41de9b63883662ca49046d6cc628bece9f04cd0,,checkSinpiFloat2(),9,1,"private void checkSinpiFloat2Float2() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -3081699208731503668L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testSinpiFloat2Float2(in, out); verifyResultsSinpiFloat2Float2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testSinpiFloat2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testSinpiFloat2Float2(in, out); verifyResultsSinpiFloat2Float2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testSinpiFloat2Float2: "" + (e.toString()))); } }",3c5dbf3ba955b81679bb6b21db957a41f55f49c9,checkSinpiFloat2Float2(),142953,330,315
211850,ojluni_src_main_java_sun_security_jca_ProviderList.java,6.0,"public java.security.Provider.Service getService(java.lang.String type, java.lang.String name) { for (int i = 0; i < (configs.length); i++) { java.security.Provider p = getProvider(i); java.security.Provider.Service s = p.getService(type, name); if (s != null) { return s; } } return null; }",16332d1261f8a671297f6f23af5eed0696a368cf,"public java.security.Provider.Service getService(java.lang.String type, java.lang.String name) { for (sun.security.jca.ProviderConfig config : configs) { java.security.Provider p = getProvider(config); java.security.Provider.Service s = p.getService(type, name); if (s != null) { return s; } } return null; }",11cf405c78684b190d35c57803233ce0216ab437,"getService(java.lang.String,java.lang.String)","getService(java.lang.String,java.lang.String)",4,6,"public java.security.Provider.Service getService(java.lang.String type, java.lang.String name) { for (int i = 0; i < (configs.length); i++) { java.security.Provider p = getProvider(i); java.security.Provider.Service s = p.getService(type, name); if (s != null) { return s; } } return null; }",16332d1261f8a671297f6f23af5eed0696a368cf,"getService(java.lang.String,java.lang.String)",291439,88,89
39625,lint_libs_lint_api_src_com_android_tools_lint_detector_api_LintUtils.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static int getNextOpcode(org.objectweb.asm.tree.AbstractInsnNode node) { while (true) { node = node.getNext(); if (node == null) { return org.objectweb.asm.Opcodes.NOP; } else { int type = node.getType(); if ((type != (org.objectweb.asm.tree.AbstractInsnNode.LINE)) && (type != (org.objectweb.asm.tree.AbstractInsnNode.LABEL))) { return node.getOpcode(); } } } },d723a03471c64e4928c54fb7828cbdb2eb434010,,getNextOpcode(org.objectweb.asm.tree.AbstractInsnNode),4,5,public static int getNextOpcode(@com.android.annotations.NonNull org.objectweb.asm.tree.AbstractInsnNode node) { org.objectweb.asm.tree.AbstractInsnNode next = com.android.tools.lint.detector.api.LintUtils.getNextInstruction(node); if (next != null) { return next.getOpcode(); } else { return org.objectweb.asm.Opcodes.NOP; } },bcb81d3c8cf353ece99b6b091dcda6992892154e,getNextOpcode(org.objectweb.asm.tree.AbstractInsnNode),21681,111,94
141541,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_test_TestApplicationTestData.java,,,,@com.android.annotations.Nullable @java.lang.Override public java.lang.String getTestedApplicationId() { return testVariant.getApplicationId(); },5f40291ba1dfbd7bbc09d33447f6fc6db20b1dc2,,getTestedApplicationId(),4,6,@com.android.annotations.Nullable @java.lang.Override public java.lang.String getTestedApplicationId() { com.android.builder.core.ApkInfoParser.ApkInfo apkInfo = loadTestedApkInfo(); return apkInfo.getPackageName(); },f0843ccfb86014cfd91210a9b448ff01065e7916,getTestedApplicationId(),168819,35,57
122792,core_java_android_net_http_HttpResponseCache.java,4.0,"@java.lang.Override public java.net.CacheResponse get(java.net.URI uri, java.lang.String requestMethod, java.util.Map<java.lang.String, java.util.List<java.lang.String>> requestHeaders) throws java.io.IOException { return delegate.get(uri, requestMethod, requestHeaders); }",2fad30fe563bdc974e40fc02b4a7ca77f3143306,"@java.lang.Override public java.net.CacheResponse get(java.net.URI uri, java.lang.String requestMethod, java.util.Map<java.lang.String, java.util.List<java.lang.String>> requestHeaders) throws java.io.IOException { return shimResponseCache.get(uri, requestMethod, requestHeaders); }",994e87f8cbe552622dd5952fccc9ae16b06dd633,"get(java.net.URI,java.lang.String,java.util.Map)","get(java.net.URI,java.lang.String,java.util.Map)",6,5,"@java.lang.Override public java.net.CacheResponse get(java.net.URI uri, java.lang.String requestMethod, java.util.Map<java.lang.String, java.util.List<java.lang.String>> requestHeaders) throws java.io.IOException { return delegate.get(uri, requestMethod, requestHeaders); }",2fad30fe563bdc974e40fc02b4a7ca77f3143306,"get(java.net.URI,java.lang.String,java.util.Map)",272998,81,78
83276,src_main_java_org_conscrypt_NativeCrypto.java,185.0,public static native long EVP_VerifyInit(java.lang.String algorithm);,5f5da3b36df8d65d3a2614883bb9a46305b427f0,"public static native int EVP_VerifyInit(long ctx, long evpRef);",d2ddda80679482c581592144da5a1a4042872557,EVP_VerifyInit(java.lang.String),"EVP_VerifyInit(long,long)",5,229,"public static native int EVP_VerifyInit(org.conscrypt.OpenSSLDigestContext ctx, long evpRef);",87e71d9d07229506e44d93883969c926bf1178df,"EVP_VerifyInit(org.conscrypt.OpenSSLDigestContext,long)",254566,18,27
121951,build-system_builder_src_main_java_com_android_builder_core_ApkInfoParser.java,6.0,"@com.android.annotations.NonNull private java.util.List<java.lang.String> getAaptOutput(@com.android.annotations.NonNull java.io.File apkFile) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { java.util.ArrayList<java.lang.String> command = com.google.common.collect.Lists.newArrayList(); command.add(mAaptFile.getAbsolutePath()); command.add(""dump""); command.add(""badging""); command.add(apkFile.getPath()); final java.util.List<java.lang.String> aaptOutput = com.google.common.collect.Lists.newArrayList(); mCommandLineRunner.runCmdLine(command, new com.android.ide.common.internal.CommandLineRunner.CommandLineOutput() { @java.lang.Override public void out(@com.android.annotations.Nullable java.lang.String line) { if (line != null) { aaptOutput.add(line); } } @java.lang.Override public void err(@com.android.annotations.Nullable java.lang.String line) { super.err(line); } }, null); return aaptOutput; }",f5510254ff36fbe2c998346515e01338466b8163,"@com.android.annotations.NonNull private java.util.List<java.lang.String> getAaptOutput(@com.android.annotations.NonNull java.io.File apkFile) throws com.android.ide.common.process.ProcessException { java.util.ArrayList<java.lang.String> command = com.google.common.collect.Lists.newArrayList(); com.android.ide.common.process.ProcessInfoBuilder builder = new com.android.ide.common.process.ProcessInfoBuilder(); builder.setExecutable(mAaptFile); builder.addArg(""dump""); builder.addArg(""badging""); builder.addArg(apkFile.getPath()); com.android.ide.common.process.CachedProcessOutputHandler processOutputHandler = new com.android.ide.common.process.CachedProcessOutputHandler(); com.android.ide.common.process.ProcessResult result = mProcessExecutor.execute(builder.createProcess(), processOutputHandler); result.rethrowFailure().assertNormalExitValue(); com.android.ide.common.process.BaseProcessOutputHandler.BaseProcessOutput output = processOutputHandler.getProcessOutput(); return com.google.common.base.Splitter.on('\n').splitToList(output.getStandardOutputAsString()); }",2037bb663282593675ac33720e76574156513698,getAaptOutput(java.io.File),getAaptOutput(java.io.File),6,6,"@com.android.annotations.NonNull private java.util.List<java.lang.String> getAaptOutput(@com.android.annotations.NonNull java.io.File apkFile) throws com.android.ide.common.process.ProcessException { com.android.ide.common.process.ProcessInfoBuilder builder = new com.android.ide.common.process.ProcessInfoBuilder(); builder.setExecutable(mAaptFile); builder.addArgs(""dump"", ""badging"", apkFile.getPath()); com.android.ide.common.process.CachedProcessOutputHandler processOutputHandler = new com.android.ide.common.process.CachedProcessOutputHandler(); mProcessExecutor.execute(builder.createProcess(), processOutputHandler).rethrowFailure().assertNormalExitValue(); com.android.ide.common.process.BaseProcessOutputHandler.BaseProcessOutput output = processOutputHandler.getProcessOutput(); return com.google.common.base.Splitter.on('\n').splitToList(output.getStandardOutputAsString()); }",95967bd88132f723d4db3438694b7edf4a2b8604,getAaptOutput(java.io.File),265540,264,212
79684,build-system_gradle_src_main_groovy_com_android_build_gradle_api_ApkVariant.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,java.util.Collection<java.io.File> getApkLibraries();,bef6cb9a89360eb64e6b187db6ef99a60a12305b,,getApkLibraries(),2,9,@com.android.annotations.NonNull java.util.Collection<java.io.File> getApkLibraries();,11cd5e016bf1b1bd6b7d81d095b220ee042b7509,getApkLibraries(),452138,16,24
238591,src_com_android_phone_settings_fdn_FdnList.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void showPopUp() { getMenu().add(0, com.android.phone.settings.fdn.FdnList.MENU_DIAL, 0, getString(R.string.menu_dial_string)); getMenu().add(0, com.android.phone.settings.fdn.FdnList.MENU_EDIT, 0, getString(R.string.menu_edit)); setOnMenuItemClickListener(mMenuItemListener); show(); }",76054308fea4d996fdddbfb97dd98450a8a2dcf7,,showPopUp(),11,7,"public void showPopUp() { getMenu().add(0, com.android.phone.settings.fdn.FdnList.MENU_EDIT, 0, getString(R.string.menu_edit)); getMenu().add(0, com.android.phone.settings.fdn.FdnList.MENU_DELETE, 0, getString(R.string.menu_delete)); if (mFdnDialDirectlySupported) { getMenu().add(0, com.android.phone.settings.fdn.FdnList.MENU_DIAL, 0, getString(R.string.menu_dial)); } setOnMenuItemClickListener(mMenuItemListener); show(); }",b4f1ded190f89ffc948abaeef02ac6dfb4b715ed,showPopUp(),288676,93,138
633505,services_core_java_com_android_server_ConnectivityService.java,223.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void handlePrivateDnsValidationUpdate(com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate update) { mDnsManager.updatePrivateDnsValidation(update); com.android.server.connectivity.NetworkAgentInfo nai = getNetworkAgentInfoForNetwork(new android.net.Network(update.netId)); if (nai == null) { return; } if (mDnsManager.maybeFixLinkPropertiesPrivateDns(nai.network.netId, new android.net.LinkProperties(nai.linkProperties))) { handleUpdateLinkProperties(nai, new android.net.LinkProperties(nai.linkProperties)); } }",db10a7ccf9f9753691b07c7910946a71496dbe55,,handlePrivateDnsValidationUpdate(com.android.server.connectivity.DnsManager$PrivateDnsValidationUpdate),10,187,"private void handlePrivateDnsValidationUpdate(com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate update) { com.android.server.connectivity.NetworkAgentInfo nai = getNetworkAgentInfoForNetId(update.netId); if (nai == null) { return; } mDnsManager.updatePrivateDnsValidation(update); handleUpdateLinkProperties(nai, new android.net.LinkProperties(nai.linkProperties)); }",0bb0e0293b02f74493120c19bd9e682154176e4e,handlePrivateDnsValidationUpdate(com.android.server.connectivity.DnsManager.PrivateDnsValidationUpdate),130517,144,101
597817,telephony_java_android_telephony_data_DataService.java,16.0,"@java.lang.Override public android.os.IBinder onBind(android.content.Intent intent) { if ((intent == null) || (!(android.telephony.data.DataService.DATA_SERVICE_INTERFACE.equals(intent.getAction())))) { loge((""Unexpected intent "" + intent)); return null; } int slotId = intent.getIntExtra(android.telephony.data.DataService.DATA_SERVICE_EXTRA_SLOT_ID, SubscriptionManager.INVALID_SIM_SLOT_INDEX); if (!(android.telephony.SubscriptionManager.isValidSlotIndex(slotId))) { loge((""Invalid slot id "" + slotId)); return null; } log((""onBind: slot id="" + slotId)); android.telephony.data.DataService.IDataServiceWrapper binder = mBinderMap.get(slotId); if (binder == null) { android.os.Message msg = mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_INTERNAL_REQUEST_INITIALIZE_SERVICE); msg.arg1 = slotId; msg.sendToTarget(); binder = new android.telephony.data.DataService.IDataServiceWrapper(slotId); mBinderMap.put(slotId, binder); } return binder; }",7e14803dcd22ab44517b3fd41bdd25d90290ff61,"@java.lang.Override public android.os.IBinder onBind(android.content.Intent intent) { if ((intent == null) || (!(android.telephony.data.DataService.DATA_SERVICE_INTERFACE.equals(intent.getAction())))) { loge((""Unexpected intent "" + intent)); return null; } if ((mBinder) != null) return mBinder; mHandler.obtainMessage(android.telephony.data.DataService.DATA_SERVICE_INTERNAL_REQUEST_INITIALIZE_SERVICE).sendToTarget(); mBinder = new android.telephony.data.DataService.IDataServiceWrapper(); return mBinder; }",a77219f0db311b10cbe9d53c264da1ba1cf773bf,onBind(android.content.Intent),onBind(android.content.Intent),3,23,"@java.lang.Override public android.os.IBinder onBind(android.content.Intent intent) { if ((intent == null) || (!(android.telephony.data.DataService.DATA_SERVICE_INTERFACE.equals(intent.getAction())))) { loge((""Unexpected intent "" + intent)); return null; } return mBinder; }",6aa932bfbfbc491fc6a931a93db41d959e082474,onBind(android.content.Intent),329974,137,75
168920,tools_ahat_src_DocString.java,0.0,"public static java.net.URI uri(java.lang.String format, java.lang.Object... args) { java.lang.String uriString = java.lang.String.format(format, args); try { return new java.net.URI(uriString); } catch (java.net.URISyntaxException e) { throw new java.lang.IllegalStateException((""Known good uri has syntax error: "" + uriString), e); } }",04e1b5119ca9382be49271eab27f8748533cfc6a,"public static java.net.URI uri(java.lang.String format, java.lang.Object... args) { java.lang.String uriString = ((args.length) > 0) ? java.lang.String.format(format, args) : format; try { return new java.net.URI(uriString); } catch (java.net.URISyntaxException e) { throw new java.lang.IllegalStateException((""Known good uri has syntax error: "" + uriString), e); } }",dd211a1e716653c2aba49b59a8c680b19d383c78,"uri(java.lang.String,java.lang.Object[])","uri(java.lang.String,java.lang.Object[])",3,5,"public static java.net.URI formattedUri(java.lang.String format, java.lang.Object... args) { return com.android.ahat.DocString.uri(java.lang.String.format(format, args)); }",228c61d2afaf6cdea4685ea2078bb05875f32886,"formattedUri(java.lang.String,java.lang.Object[])",345812,110,52
409039,services_core_java_com_android_server_connectivity_Tethering.java,5.0,"protected void chooseUpstreamType(boolean tryCell) { updateConfiguration(); final int upstreamType = findPreferredUpstreamType(getConnectivityManager(), mConfig); if (upstreamType == (android.net.ConnectivityManager.TYPE_NONE)) { if (tryCell) { mUpstreamNetworkMonitor.registerMobileNetworkRequest(); } else { sendMessageDelayed(com.android.server.connectivity.Tethering.TetherMasterSM.CMD_RETRY_UPSTREAM, com.android.server.connectivity.Tethering.TetherMasterSM.UPSTREAM_SETTLE_TIME_MS); } } setUpstreamByType(upstreamType); }",c9736972ca8d8a98f60b02c3c7055744fd082945,"protected void chooseUpstreamType(boolean tryCell) { updateConfiguration(); final int upstreamType = findPreferredUpstreamType(mConfig); if (upstreamType == (android.net.ConnectivityManager.TYPE_NONE)) { if (tryCell) { mUpstreamNetworkMonitor.registerMobileNetworkRequest(); } else { sendMessageDelayed(com.android.server.connectivity.Tethering.TetherMasterSM.CMD_RETRY_UPSTREAM, com.android.server.connectivity.Tethering.TetherMasterSM.UPSTREAM_SETTLE_TIME_MS); } } setUpstreamByType(upstreamType); }",c143b1f2212e82a2591d1321e7472ee4e9085c3d,chooseUpstreamType(boolean),chooseUpstreamType(boolean),5,5,"protected void chooseUpstreamType(boolean tryCell) { updateConfiguration(); final int upstreamType = mUpstreamNetworkMonitor.selectPreferredUpstreamType(mConfig.preferredUpstreamIfaceTypes); if (upstreamType == (android.net.ConnectivityManager.TYPE_NONE)) { if (tryCell) { mUpstreamNetworkMonitor.registerMobileNetworkRequest(); } else { sendMessageDelayed(com.android.server.connectivity.Tethering.TetherMasterSM.CMD_RETRY_UPSTREAM, com.android.server.connectivity.Tethering.TetherMasterSM.UPSTREAM_SETTLE_TIME_MS); } } setUpstreamByType(upstreamType); }",5ca68d7820e9e0b72317c3bd07f2a07e45c6e9cf,chooseUpstreamType(boolean),375048,134,145
580423,luni_src_main_java_libcore_io_ForwardingOs.java,130.0,"public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException { return os.sendfile(outFd, inFd, inOffset, byteCount); }",dc1294acc7deca7c39e29d8ea064027aca562cc4,"public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, libcore.util.MutableLong offset, long byteCount) throws android.system.ErrnoException { return os.sendfile(outFd, inFd, offset, byteCount); }",8da3f3683ab5d0e5b65cf795d4c2508b8902847d,"sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)","sendfile(java.io.FileDescriptor,java.io.FileDescriptor,libcore.util.MutableLong,long)",3,122,"public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.system.Int64Ref offset, long byteCount) throws android.system.ErrnoException { return os.sendfile(outFd, inFd, offset, byteCount); }",4ab8befac355f6e74f458a6be0897657497caade,"sendfile(java.io.FileDescriptor,java.io.FileDescriptor,android.system.Int64Ref,long)",381114,65,65
276117,system_image_uitests_app_src_androidTest_java_com_android_devtools_systemimage_uitest_smoke_VpnTest.java,0.0,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""14578822"") public void testVpn() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); if (!(com.android.devtools.systemimage.uitest.smoke.VpnTest.verifyVpnStatus(device))) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""TestVPN""); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.START_VPN_BUTTON_RES)).clickAndWaitForNewWindow(); new com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher(device).checkForCondition(); org.junit.Assert.assertTrue(""Failed to find the VPN lock icon after starting VPN!"", com.android.devtools.systemimage.uitest.smoke.VpnTest.verifyVpnStatus(device)); } }",c3802e70713c6a3c029624cd5e09ca929e10de3b,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""14578822"") public void testVpn() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); if ((com.android.devtools.systemimage.uitest.utils.SystemUtil.getApiLevel()) != 19) { if (!(com.android.devtools.systemimage.uitest.smoke.VpnTest.verifyVpnStatus(device))) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""TestVPN""); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.START_VPN_BUTTON_RES)).clickAndWaitForNewWindow(); new com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher(device).checkForCondition(); org.junit.Assert.assertTrue(""Failed to find the VPN lock icon after starting VPN!"", com.android.devtools.systemimage.uitest.smoke.VpnTest.verifyVpnStatus(device)); } } }",85b78eec4efee2cf2e426403ed4d736e3d9c7bd2,testVpn(),testVpn(),4,0,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""14578822"") public void testVpn() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); if ((com.android.devtools.systemimage.uitest.utils.SystemUtil.getApiLevel()) == 19) { return; } if (!(com.android.devtools.systemimage.uitest.smoke.VpnTest.verifyVpnStatus(device))) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""TestVPN""); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(Res.START_VPN_BUTTON_RES)).clickAndWaitForNewWindow(); new com.android.devtools.systemimage.uitest.watchers.VpnPopupWatcher(device).checkForCondition(); org.junit.Assert.assertTrue(""Failed to find the VPN lock icon after starting VPN!"", com.android.devtools.systemimage.uitest.smoke.VpnTest.verifyVpnStatus(device)); } }",5dff74fa4bf1c493e5fb038c8b6f713479121901,testVpn(),299124,276,278
258270,jack-tests_tests_com_android_jack_optimizations_wofr_WriteOnlyFieldRemovalTests.java,4.0,"@org.junit.Test @java.lang.Runtime public void test002() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.wofr.test002""; java.lang.String aType = ""Lcom/android/jack/optimizations/wofr/test002/jack/A;""; compileAndValidate(test, defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(((""test("" + aType) + ""I)V""), dalvik(test, ""A.test.dalvik"")))); com.android.jack.optimizations.wofr.CompilationProperties properties = defaultProperties().with(Optimizations.WriteOnlyFieldRemoval.PRESERVE_NULL_CHECKS.getName(), java.lang.Boolean.TRUE).with(Optimizations.WriteOnlyFieldRemoval.PRESERVE_OBJECT_LIFETIME.getName(), java.lang.Boolean.TRUE).with(Optimizations.WriteOnlyFieldRemoval.ENSURE_TYPE_INITIALIZERS.getName(), java.lang.Boolean.TRUE); compileAndValidate(test, properties, new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(((""test("" + aType) + ""I)V""), dalvik(test, ""A.test.jls.dalvik"")))); }",204faa6ab03cf73986f994a0ca3859ab81ed5009,"@org.junit.Test @java.lang.Runtime public void test002() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.wofr.test002""; java.lang.String aType = ""Lcom/android/jack/optimizations/wofr/test002/jack/A;""; compileAndValidate(defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(((""test("" + aType) + ""I)V""), dalvik(test, ""A.test.dalvik""))), test); com.android.jack.optimizations.wofr.CompilationProperties properties = defaultProperties().with(Optimizations.WriteOnlyFieldRemoval.PRESERVE_NULL_CHECKS.getName(), java.lang.Boolean.TRUE).with(Optimizations.WriteOnlyFieldRemoval.PRESERVE_OBJECT_LIFETIME.getName(), java.lang.Boolean.TRUE).with(Optimizations.WriteOnlyFieldRemoval.ENSURE_TYPE_INITIALIZERS.getName(), java.lang.Boolean.TRUE); compileAndValidate(properties, new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(((""test("" + aType) + ""I)V""), dalvik(test, ""A.test.jls.dalvik""))), test); }",1e84760064131feeffbaf1f4d2051f4a615c1a0c,test002(),test002(),5,4,"@org.junit.Test @java.lang.Runtime public void test002() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.wofr.test002""; java.lang.String aType = ""Lcom/android/jack/optimizations/wofr/test002/jack/A;""; compileAndValidate(test, defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(((""test("" + aType) + ""I)V""), dalvik(test, ""A.test.dalvik"")))); com.android.jack.optimizations.wofr.CompilationProperties properties = defaultProperties().with(Optimizations.WriteOnlyFieldRemoval.PRESERVE_NULL_CHECKS.getName(), java.lang.Boolean.TRUE).with(Optimizations.WriteOnlyFieldRemoval.PRESERVE_OBJECT_LIFETIME.getName(), java.lang.Boolean.TRUE).with(Optimizations.WriteOnlyFieldRemoval.ENSURE_TYPE_INITIALIZERS.getName(), java.lang.Boolean.TRUE); compileAndValidate(test, properties, new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(((""test("" + aType) + ""I)V""), dalvik(test, ""A.test.jls.dalvik"")))); }",204faa6ab03cf73986f994a0ca3859ab81ed5009,test002(),32077,338,338
128670,src_com_android_nfc_DeviceHost.java,3.0,public void onHostCardEmulationActivated();,470fe21f2aa79a14a6ddcc4691c29a7a9b09d78b,public void onHostCardEmulationActivated(int type);,4a3e7aac52a67692014d44892179721a1aa4f3eb,onHostCardEmulationActivated(),onHostCardEmulationActivated(int),10,14,public void onHostCardEmulationActivated(int technology);,162a5fc8e0bf78d35014a43506fdb3835b59ea61,onHostCardEmulationActivated(int),148668,12,12
267273,jack_src_com_android_jack_jayce_v0004_io_JayceInternalWriterImpl.java,1.0,public void writeCurrentFileName(@javax.annotation.Nonnull java.lang.String fileName) throws java.io.IOException { writeOpenFileName(); writeString(fileName); writeCloseFileName(); currentFileName = fileName; },e238ee60e80e65d8a227f39f3f8e4f318062efd7,private void writeCurrentFileName(@javax.annotation.Nonnull java.lang.String fileName) throws java.io.IOException { writeOpenFileName(); writeString(fileName); writeCloseFileName(); currentFileName = fileName; },b55d18453515e371f6beca8a4a3a79cfc847728d,writeCurrentFileName(java.lang.String),writeCurrentFileName(java.lang.String),3,1,public void writeCurrentFileName(@javax.annotation.Nonnull java.lang.String fileName) throws java.io.IOException { writeOpenFileName(); writeString(fileName); writeCloseFileName(); currentFileName = fileName; },e238ee60e80e65d8a227f39f3f8e4f318062efd7,writeCurrentFileName(java.lang.String),524577,44,44
429819,luni_src_test_java_libcore_javax_net_ssl_SSLSocketTest.java,7.0,"public void test_SSLSocket_setSoWriteTimeout() throws java.lang.Exception { if (libcore.java.security.StandardNames.IS_RI) { return; } final libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); SSLSocket client = ((SSLSocket) (c.clientContext.getSocketFactory().createSocket())); int sendBufferSize = 1024; client.setSendBufferSize(sendBufferSize); sendBufferSize = client.getSendBufferSize(); final int recvBufferSize = 128; c.serverSocket.setReceiveBufferSize(recvBufferSize); client.connect(new java.net.InetSocketAddress(c.host, c.port)); final SSLSocket server = ((SSLSocket) (c.serverSocket.accept())); java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newSingleThreadExecutor(); java.util.concurrent.Future<java.lang.Void> future = executor.submit(new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { server.startHandshake(); return null; } }); executor.shutdown(); client.startHandshake(); java.lang.String expectedClassName = ""com.android.org.conscrypt.OpenSSLSocketImpl""; java.lang.Class<?> actualClass = client.getClass(); assertEquals(expectedClassName, actualClass.getName()); java.lang.reflect.Method setSoWriteTimeout = actualClass.getMethod(""setSoWriteTimeout"", new java.lang.Class<?>[]{ java.lang.Integer.TYPE }); setSoWriteTimeout.invoke(client, 1); try { final int extra = 1; client.getOutputStream().write(new byte[sendBufferSize + extra]); fail(); } catch (java.net.SocketTimeoutException expected) { } future.get(); client.close(); server.close(); c.close(); }",0fd2afd42282d88bc2bf4e4e5eddce63fb0e3245,"public void test_SSLSocket_setSoWriteTimeout() throws java.lang.Exception { if (libcore.java.security.StandardNames.IS_RI) { return; } final libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); SSLSocket client = ((SSLSocket) (c.clientContext.getSocketFactory().createSocket())); int sendBufferSize = 1024; client.setSendBufferSize(sendBufferSize); sendBufferSize = client.getSendBufferSize(); final int recvBufferSize = 128; c.serverSocket.setReceiveBufferSize(recvBufferSize); client.connect(new java.net.InetSocketAddress(c.host, c.port)); final SSLSocket server = ((SSLSocket) (c.serverSocket.accept())); java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newSingleThreadExecutor(); java.util.concurrent.Future<java.lang.Void> future = executor.submit(new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { server.startHandshake(); return null; } }); executor.shutdown(); client.startHandshake(); java.lang.String expectedClassName = ""com.android.org.conscrypt.ConscryptFileDescriptorSocket""; java.lang.Class<?> actualClass = client.getClass(); assertEquals(expectedClassName, actualClass.getName()); java.lang.reflect.Method setSoWriteTimeout = actualClass.getMethod(""setSoWriteTimeout"", new java.lang.Class<?>[]{ java.lang.Integer.TYPE }); setSoWriteTimeout.invoke(client, 1); try { final int extra = 1; client.getOutputStream().write(new byte[sendBufferSize + extra]); fail(); } catch (java.net.SocketTimeoutException expected) { } future.get(); client.close(); server.close(); c.close(); }",7d0686f2269ae06dad7b3833ae98ec9c8c8a86a3,test_SSLSocket_setSoWriteTimeout(),test_SSLSocket_setSoWriteTimeout(),3,7,"public void test_SSLSocket_setSoWriteTimeout() throws java.lang.Exception { if (libcore.java.security.StandardNames.IS_RI) { return; } final libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); SSLSocket client = ((SSLSocket) (c.clientContext.getSocketFactory().createSocket())); int sendBufferSize = 1024; client.setSendBufferSize(sendBufferSize); sendBufferSize = client.getSendBufferSize(); final int recvBufferSize = 128; c.serverSocket.setReceiveBufferSize(recvBufferSize); client.connect(new java.net.InetSocketAddress(c.host, c.port)); final SSLSocket server = ((SSLSocket) (c.serverSocket.accept())); java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newSingleThreadExecutor(); java.util.concurrent.Future<java.lang.Void> future = executor.submit(new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { server.startHandshake(); return null; } }); executor.shutdown(); client.startHandshake(); java.lang.String expectedClassName = ""com.android.org.conscrypt.ConscryptFileDescriptorSocket""; java.lang.Class<?> actualClass = client.getClass(); assertEquals(expectedClassName, actualClass.getName()); java.lang.Class<?> superClass = actualClass.getSuperclass(); assertEquals(""com.android.org.conscrypt.OpenSSLSocketImpl"", superClass.getName()); java.lang.reflect.Method setSoWriteTimeout = actualClass.getMethod(""setSoWriteTimeout"", new java.lang.Class<?>[]{ java.lang.Integer.TYPE }); setSoWriteTimeout.invoke(client, 1); try { final int extra = 1; client.getOutputStream().write(new byte[sendBufferSize + extra]); fail(); } catch (java.net.SocketTimeoutException expected) { } future.get(); client.close(); server.close(); c.close(); }",1890d6495625cdc3c4e3bc56eee92e688db0ced1,test_SSLSocket_setSoWriteTimeout(),16869,409,444
640059,src_com_android_bluetooth_avrcp_mockable_MediaBrowser.java,,,,void disconnect() { mDelegate.disconnect(); },f08d66f48c2548a289fc554f86a99e29d91fd777,,disconnect(),4,11,public void disconnect() { mDelegate.disconnect(); },df6cba658d2b2dcf8ef3c0a81cc784d3b3bed936,disconnect(),302991,10,11
340810,telecomm_java_android_telecom_RemoteConnection.java,67.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,void onRttConnectionRemotelyTerminated() { for (android.telecom.RemoteConnection.CallbackRecord record : mCallbackRecords) { final android.telecom.RemoteConnection connection = this; final android.telecom.RemoteConnection.Callback callback = record.getCallback(); record.getHandler().post(() -> callback.onRttConnectionRemotelyTerminated(connection)); } },8c830b332a07c54f7b66b716ef5755cd7e9c9431,,onRttConnectionRemotelyTerminated(),6,121,void onRttSessionRemotelyTerminated() { for (android.telecom.RemoteConnection.CallbackRecord record : mCallbackRecords) { final android.telecom.RemoteConnection connection = this; final android.telecom.RemoteConnection.Callback callback = record.getCallback(); record.getHandler().post(() -> callback.onRttSessionRemotelyTerminated(connection)); } },fca85c9d56325c874b4fff38c582fca59ee8215f,onRttSessionRemotelyTerminated(),392989,85,85
116997,telecomm_java_android_telecom_Connection.java,30.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void onConferenceParticipantsChanged(android.telecom.Connection c, java.util.List<android.telecom.ConferenceParticipant> participants) { }",c342199ac488b67a75146261daa7d122d945ed30,,"onConferenceParticipantsChanged(android.telecom.Connection,java.util.List)",2,16,"public void onConferenceParticipantChanged(android.telecom.Connection c, android.telecom.ConferenceParticipant participant) { }",d0145b7811299312b8253cf995fb58dc093bbab1,"onConferenceParticipantChanged(android.telecom.Connection,android.telecom.ConferenceParticipant)",188272,36,29
632219,services_core_java_com_android_server_BluetoothManagerService.java,73.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.lang.String getReasonString(int reason) { switch (reason) { case com.android.server.BluetoothManagerService.REASON_PACKAGE : return ""REASON_PACKAGE""; case com.android.server.BluetoothManagerService.REASON_AIRPLANE_MODE : return ""REASON_AIRPLANE_MODE""; case com.android.server.BluetoothManagerService.REASON_DISALLOWED : return ""REASON_DISALLOWED""; case com.android.server.BluetoothManagerService.REASON_RESTARTED : return ""REASON_RESTARTED""; case com.android.server.BluetoothManagerService.REASON_START_CRASH : return ""REASON_START_CRASH""; case com.android.server.BluetoothManagerService.REASON_SYSTEM_BOOT : return ""REASON_SYSTEM_BOOT""; case com.android.server.BluetoothManagerService.REASON_UNEXPECTED : return ""REASON_UNEXPECTED""; case com.android.server.BluetoothManagerService.REASON_USER_SWITCH : return ""REASON_USER_SWITCH""; case com.android.server.BluetoothManagerService.REASON_RESTORE_USER_SETTING : return ""REASON_RESTORE_USER_SETTING""; default : return (""REASON_UNKNOWN["" + reason) + ""]""; } }",1561cc6f25b92593fea4b5b4abe6dbe8489f1cce,,getReasonString(int),9,30,"private static java.lang.String getEnableDisableReasonString(int reason) { switch (reason) { case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_APPLICATION_REQUEST : return ""APPLICATION_REQUEST""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_AIRPLANE_MODE : return ""AIRPLANE_MODE""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_DISALLOWED : return ""DISALLOWED""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_RESTARTED : return ""RESTARTED""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_START_ERROR : return ""START_ERROR""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_SYSTEM_BOOT : return ""SYSTEM_BOOT""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_CRASH : return ""CRASH""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_USER_SWITCH : return ""USER_SWITCH""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_RESTORE_USER_SETTING : return ""RESTORE_USER_SETTING""; case android.bluetooth.BluetoothProtoEnums.ENABLE_DISABLE_REASON_UNSPECIFIED : default : return (""UNKNOWN["" + reason) + ""]""; } }",8f42572eeefbd1cef5243fe07a213100e5ee35e3,getEnableDisableReasonString(int),386496,273,305
123699,sched_src_com_android_sched_vfs_PrefixedFS.java,,,,"@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.BaseVFile createVFile(@javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent, @javax.annotation.Nonnull java.lang.String name) throws com.android.sched.util.file.CannotCreateFileException { return changeVFS(vfs.createVFile(parent, name)); }",d58e7ac09fae99a32383923df08d6e71c06d57c4,,"createVFile(com.android.sched.vfs.BaseVDir,java.lang.String)",5,6,"@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.BaseVFile createVFile(@javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent, @javax.annotation.Nonnull java.lang.String name) throws com.android.sched.util.file.CannotCreateFileException { return vfs.createVFile(parent, name); }",972ef3b6a88195807043fa89a3c48fef187e7b39,"createVFile(com.android.sched.vfs.BaseVDir,java.lang.String)",327456,89,87
67983,xml_src_main_java_org_xmlpull_v1_XmlPullParserFactory.java,7.0,"public static org.xmlpull.v1.XmlPullParserFactory newInstance(java.lang.String classNames, java.lang.Class context) throws org.xmlpull.v1.XmlPullParserException { classNames = ""org.kxml2.io.KXmlParser,org.kxml2.io.KXmlSerializer""; org.xmlpull.v1.XmlPullParserFactory factory = null; final java.util.ArrayList parserClasses = new java.util.ArrayList(); final java.util.ArrayList serializerClasses = new java.util.ArrayList(); int pos = 0; while (pos < (classNames.length())) { int cut = classNames.indexOf(',', pos); if (cut == (-1)) cut = classNames.length(); final java.lang.String name = classNames.substring(pos, cut); java.lang.Class candidate = null; java.lang.Object instance = null; try { candidate = java.lang.Class.forName(name); instance = candidate.newInstance(); } catch (java.lang.Exception e) { } if (candidate != null) { boolean recognized = false; if (instance instanceof org.xmlpull.v1.XmlPullParser) { parserClasses.add(candidate); recognized = true; } if (instance instanceof org.xmlpull.v1.XmlSerializer) { serializerClasses.add(candidate); recognized = true; } if (instance instanceof org.xmlpull.v1.XmlPullParserFactory) { if (factory == null) { factory = ((org.xmlpull.v1.XmlPullParserFactory) (instance)); } recognized = true; } if (!recognized) { throw new org.xmlpull.v1.XmlPullParserException((""incompatible class: "" + name)); } } pos = cut + 1; } if (factory == null) { factory = new org.xmlpull.v1.XmlPullParserFactory(); } factory.parserClasses = parserClasses; factory.serializerClasses = serializerClasses; factory.classNamesLocation = ""org.kxml2.io.kXmlParser,org.kxml2.io.KXmlSerializer""; return factory; }",b944425fa30796c224fafefa59c7dec5aa86ae7d,"public static org.xmlpull.v1.XmlPullParserFactory newInstance(java.lang.String unused, java.lang.Class unused2) throws org.xmlpull.v1.XmlPullParserException { final org.xmlpull.v1.XmlPullParserFactory factory = new org.xmlpull.v1.XmlPullParserFactory(); final java.util.ArrayList parserClasses = new java.util.ArrayList(); try { java.lang.Class<?> parser = java.lang.Class.forName(""org.kxml2.io.KXmlParser""); parser.newInstance(); parserClasses.add(parser); } catch (java.lang.Exception e) { } factory.parserClasses = parserClasses; final java.util.ArrayList serializerClasses = new java.util.ArrayList(); try { java.lang.Class<?> serializer = java.lang.Class.forName(""org.kxml2.io.KXmlSerializer""); serializer.newInstance(); serializerClasses.add(serializer); } catch (java.lang.Exception e) { } factory.serializerClasses = serializerClasses; factory.classNamesLocation = ""org.kxml2.io.kXmlParser,org.kxml2.io.KXmlSerializer""; return factory; }",18162be4b7c2339e09426cce4299bf677782c540,"newInstance(java.lang.String,java.lang.Class)","newInstance(java.lang.String,java.lang.Class)",4,7,"public static org.xmlpull.v1.XmlPullParserFactory newInstance(java.lang.String unused, java.lang.Class unused2) throws org.xmlpull.v1.XmlPullParserException { return org.xmlpull.v1.XmlPullParserFactory.newInstance(); }",db2a33efd3098d3d191dff7fa6380fc324cbbca9,"newInstance(java.lang.String,java.lang.Class)",332277,247,53
553349,tests_app_src_android_app_cts_ActionBarTest.java,4.0,public void testOptionsMenuKey() { if (!(mActivity.getWindow().hasFeature(Window.FEATURE_OPTIONS_PANEL))) { return; } final boolean[] menuIsVisible = new boolean[]{ false }; mActivity.getActionBar().addOnMenuVisibilityListener(( isVisible) -> menuIsVisible[0] = isVisible); getInstrumentation().sendKeyDownUpSync(KeyEvent.KEYCODE_MENU); getInstrumentation().waitForIdleSync(); assertTrue(menuIsVisible[0]); getInstrumentation().sendKeyDownUpSync(KeyEvent.KEYCODE_MENU); getInstrumentation().waitForIdleSync(); assertFalse(menuIsVisible[0]); },fef4d54465a0f5554ee10e30eb0e5cd783a5dbac,public void testOptionsMenuKey() { if (!(mActivity.getWindow().hasFeature(Window.FEATURE_OPTIONS_PANEL))) { return; } final boolean[] menuIsVisible = new boolean[]{ false }; mActivity.getActionBar().addOnMenuVisibilityListener(( isVisible) -> menuIsVisible[0] = isVisible); java.lang.Thread.sleep(android.app.cts.ActionBarTest.WAIT_TIME_MS); getInstrumentation().sendKeyDownUpSync(KeyEvent.KEYCODE_MENU); getInstrumentation().waitForIdleSync(); assertTrue(menuIsVisible[0]); getInstrumentation().sendKeyDownUpSync(KeyEvent.KEYCODE_MENU); getInstrumentation().waitForIdleSync(); assertFalse(menuIsVisible[0]); },be1e42a9b70bfa2dba0ffd96af627d7da78f823c,testOptionsMenuKey(),testOptionsMenuKey(),4,4,"public void testOptionsMenuKey() throws java.lang.Exception { if (!(mActivity.getWindow().hasFeature(Window.FEATURE_OPTIONS_PANEL))) { return; } final boolean[] menuIsVisible = new boolean[]{ false }; mActivity.getActionBar().addOnMenuVisibilityListener(( isVisible) -> menuIsVisible[0] = isVisible); assertTrue(mActivity.windowFocusSignal.await(1000, java.util.concurrent.TimeUnit.MILLISECONDS)); getInstrumentation().sendKeyDownUpSync(KeyEvent.KEYCODE_MENU); getInstrumentation().waitForIdleSync(); assertTrue(menuIsVisible[0]); getInstrumentation().sendKeyDownUpSync(KeyEvent.KEYCODE_MENU); getInstrumentation().waitForIdleSync(); assertFalse(menuIsVisible[0]); }",bca7c5a3e9ceb2f38dd586daf0313a34c852c048,testOptionsMenuKey(),294471,148,151
520095,core_java_android_os_HwBinder.java,7.0,"public static final native android.os.IHwBinder getService(java.lang.String iface, java.lang.String serviceName) throws android.os.RemoteException, java.util.NoSuchElementException;",e781bbbba8faf969f0798d8dfba6c093e8ac91a5,"public static final native android.os.IHwBinder getService(java.lang.String iface, java.lang.String serviceName, boolean isTry) throws android.os.RemoteException, java.util.NoSuchElementException;",d96a1adf2934217eda2b3efedd6a4b563e02b0fd,"getService(java.lang.String,java.lang.String)","getService(java.lang.String,java.lang.String,boolean)",3,0,"public static final native android.os.IHwBinder getService(java.lang.String iface, java.lang.String serviceName, boolean retry) throws android.os.RemoteException, java.util.NoSuchElementException;",0c7aafc73b4868cbf2daab70a86ffb0c67d109a1,"getService(java.lang.String,java.lang.String,boolean)",46670,47,46
584550,src_main_java_com_android_apksig_internal_apk_SigningBlockScheme_ApkSigningBlockUtils.java,,,,"private static void computeApkVerityDigest(com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd, java.util.Map<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm, byte[]> outputContentDigests) throws java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.util.VerityTreeBuilder builder = new com.android.apksig.internal.util.VerityTreeBuilder(new byte[8]); outputContentDigests.put(ContentDigestAlgorithm.VERITY_CHUNKED_SHA256, builder.generateVerityTreeRootHash(beforeCentralDir, centralDir, eocd)); }",22ff251cc410ebcbbf0c02894d10ee5b62966b7d,,"computeApkVerityDigest(com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,java.util.Map)",4,23,"private static void computeApkVerityDigest(com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd, java.util.Map<com.android.apksig.internal.apk.ContentDigestAlgorithm, byte[]> outputContentDigests) throws java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.util.VerityTreeBuilder builder = new com.android.apksig.internal.util.VerityTreeBuilder(new byte[8]); outputContentDigests.put(ContentDigestAlgorithm.VERITY_CHUNKED_SHA256, builder.generateVerityTreeRootHash(beforeCentralDir, centralDir, eocd)); }",f154b5c595e1589855073a6dc4b08c9c300ad2b4,"computeApkVerityDigest(com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,java.util.Map)",4634,175,171
584550,src_main_java_com_android_apksig_internal_apk_SigningBlockScheme_v2_V2SchemeVerifier.java,,,,"public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion, int maxSdkVersion) throws ApkSigningBlockUtils.SignatureNotFoundException, com.android.apksig.apk.ApkFormatException, java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.Result(); com.android.apksig.internal.apk.SigningBlockScheme.SignatureInfo signatureInfo = com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.SigningBlockScheme.v2.V2SchemeVerifier.APK_SIGNATURE_SCHEME_V2_BLOCK_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.internal.apk.SigningBlockScheme.v2.V2SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, minSdkVersion, maxSdkVersion, result); return result; }",91f0debb19e5865bda0cb9085d778da6bdc6fa8e,,"verify(com.android.apksig.util.DataSource,com.android.apksig.apk.ApkUtils$ZipSections,int,int)",4,0,"public static ApkSigningBlockUtils.Result verify(com.android.apksig.util.DataSource apk, com.android.apksig.apk.ApkUtils.ZipSections zipSections, int minSdkVersion, int maxSdkVersion) throws ApkSigningBlockUtils.SignatureNotFoundException, com.android.apksig.apk.ApkFormatException, java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.apk.ApkSigningBlockUtils.Result result = new com.android.apksig.internal.apk.ApkSigningBlockUtils.Result(); com.android.apksig.internal.apk.SignatureInfo signatureInfo = com.android.apksig.internal.apk.ApkSigningBlockUtils.findSignature(apk, zipSections, com.android.apksig.internal.apk.v2.V2SchemeVerifier.APK_SIGNATURE_SCHEME_V2_BLOCK_ID, result); com.android.apksig.util.DataSource beforeApkSigningBlock = apk.slice(0, signatureInfo.apkSigningBlockOffset); com.android.apksig.util.DataSource centralDir = apk.slice(signatureInfo.centralDirOffset, ((signatureInfo.eocdOffset) - (signatureInfo.centralDirOffset))); java.nio.ByteBuffer eocd = signatureInfo.eocd; com.android.apksig.internal.apk.v2.V2SchemeVerifier.verify(beforeApkSigningBlock, signatureInfo.signatureBlock, centralDir, eocd, minSdkVersion, maxSdkVersion, result); return result; }",848093585bcc9ffa572a812d393be9325b696b45,"verify(com.android.apksig.util.DataSource,com.android.apksig.apk.ApkUtils$ZipSections,int,int)",4565,357,333
346149,service_java_com_android_server_wifi_WifiVendorHal.java,14.0,"public void stopVendorHal() { mHalDeviceManager.stop(); android.util.Log.i(com.android.server.wifi.WifiVendorHal.TAG, ""Vendor Hal stopped""); }",7133c7485d693d1c8c6526b139b47bf75afa775c,"public void stopVendorHal() { mHalDeviceManager.stop(); mLog.i(""Vendor Hal stopped""); }",c9b4707afcefe311ca341817137fe8adbdc24f8e,stopVendorHal(),stopVendorHal(),5,13,"public void stopVendorHal() { mHalDeviceManager.stop(); mErrLog.i(""Vendor Hal stopped""); }",cc0f6b32e415c43e60b87b02af385fd6815c28b8,stopVendorHal(),404614,25,26
321490,jack-tests_tests_com_android_jack_classfile_ClassfileTests.java,0.0,"@org.junit.Test public void testClassFileIsCompiled() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File[] defaultClasspath = toolchain.getDefaultBootClasspath(); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""jackOut"", toolchain.getLibraryExtension()); java.io.File classOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File sourceDir = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(""com.android.jack.classfile.test001""); toolchain.addProperty(Options.EMIT_CLASS_FILES.getName(), ""true""); toolchain.addProperty(Options.EMIT_CLASS_FILES_FOLDER.getName(), classOut.getPath()); toolchain.addToClasspath(defaultClasspath).srcToLib(jackOut, true, sourceDir); junit.framework.Assert.assertTrue(new java.io.File(classOut, ""com/android/jack/classfile/test001/jack/ClassTest.class"").isFile()); }",86970ac1e351b27be7243f0be12f6e6c9623d555,"@org.junit.Test public void testClassFileIsCompiled() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, java.util.Collections.<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>singletonList(com.android.jack.test.toolchain.JillBasedToolchain.class)); java.io.File[] defaultClasspath = toolchain.getDefaultBootClasspath(); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""jackOut"", toolchain.getLibraryExtension()); java.io.File classOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File sourceDir = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(""com.android.jack.classfile.test001""); toolchain.addProperty(Options.EMIT_CLASS_FILES.getName(), ""true""); toolchain.addProperty(Options.EMIT_CLASS_FILES_FOLDER.getName(), classOut.getPath()); toolchain.addToClasspath(defaultClasspath).srcToLib(jackOut, true, sourceDir); junit.framework.Assert.assertTrue(new java.io.File(classOut, ""com/android/jack/classfile/test001/jack/ClassTest.class"").isFile()); }",c39afda1ebcd47d39bfe4778ebd368d0a8296170,testClassFileIsCompiled(),testClassFileIsCompiled(),2,0,"@org.junit.Test public void testClassFileIsCompiled() throws java.lang.Exception { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeList = java.util.Collections.<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>singletonList(com.android.jack.test.toolchain.JillBasedToolchain.class); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, excludeList); java.io.File[] defaultClasspath = toolchain.getDefaultBootClasspath(); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""jackOut"", toolchain.getLibraryExtension()); java.io.File classOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File sourceDir = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(""com.android.jack.classfile.test001""); toolchain.addProperty(Options.EMIT_CLASS_FILES.getName(), ""true""); toolchain.addProperty(Options.EMIT_CLASS_FILES_FOLDER.getName(), classOut.getPath()); toolchain.addToClasspath(defaultClasspath).srcToLib(jackOut, true, sourceDir); junit.framework.Assert.assertTrue(new java.io.File(classOut, ""com/android/jack/classfile/test001/jack/ClassTest.class"").isFile()); }",09d529b30f954055ed7440cdb9913b73ed283c19,testClassFileIsCompiled(),332189,340,373
186130,jack-tests_tests_com_android_jack_java8_LambdaTest.java,1.0,"@org.junit.Test public void testLamba023() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA023).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",d3dedcc324b738a289f5f6c6db4c3d89c91417ba,"@org.junit.Test public void testLamba023() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA023).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",8018661ec08af842b3364d7d63357da17651706e,testLamba023(),testLamba023(),7,1,@org.junit.Test public void testLamba023() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA023).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },6bb84d83746d03cca541be7c82837fc1df27f0a4,testLamba023(),466359,83,57
71884,sdk-common_src_main_java_com_android_ide_common_repository_GradleCoordinate.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static com.android.ide.common.repository.GradleCoordinate.ArtifactType fromString(java.lang.String name) { if (name != null) { for (com.android.ide.common.repository.GradleCoordinate.ArtifactType at : com.android.ide.common.repository.GradleCoordinate.ArtifactType.values()) { if (at.myId.equals(name)) { return at; } } } return null; },2eb632eb504e31d1d687628b4beb35e4b5f04e1f,,fromString(java.lang.String),2,13,@com.android.annotations.Nullable public static com.android.ide.common.repository.GradleCoordinate.ArtifactType getArtifactType(@com.android.annotations.Nullable java.lang.String name) { if (name != null) { for (com.android.ide.common.repository.GradleCoordinate.ArtifactType type : com.android.ide.common.repository.GradleCoordinate.ArtifactType.values()) { if (type.myId.equalsIgnoreCase(name)) { return type; } } } return null; },bfec3f1114ea28f25374251cfcbc85a1dfacf329,getArtifactType(java.lang.String),425414,96,112
136110,jack_src_com_android_jack_jayce_JaycePackageLoader.java,4.0,"@javax.annotation.Nonnull @java.lang.Override public com.android.jack.load.PackageLoader getLoaderForSubPackage(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) throws com.android.jack.ir.ast.JPackageLookupException { for (com.android.sched.vfs.InputVElement sub : packageVDir.list()) { if ((sub.isVDir()) && (sub.getName().equals(simpleName))) { return new com.android.jack.jayce.JaycePackageLoader(inputJackLibrary, ((com.android.sched.vfs.InputVDir) (sub)), lookup, defaultLoadLevel); } } throw new com.android.jack.ir.ast.JPackageLookupException(simpleName, loading); }",2c8bc24ad4801a2441272d55ebffb02a448251d3,"@javax.annotation.Nonnull @java.lang.Override public com.android.jack.load.PackageLoader getLoaderForSubPackage(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) throws com.android.jack.ir.ast.JPackageLookupException { com.android.sched.vfs.InputVElement input = cache.get(simpleName); if ((input == null) || (!(input.isVDir()))) { throw new com.android.jack.ir.ast.JPackageLookupException(simpleName, loading); } return new com.android.jack.jayce.JaycePackageLoader(inputJackLibrary, ((com.android.sched.vfs.InputVDir) (input)), lookup, defaultLoadLevel); }",f1d82cd41285c896a805484de98a720a859c59f8,"getLoaderForSubPackage(com.android.jack.ir.ast.JPackage,java.lang.String)","getLoaderForSubPackage(com.android.jack.ir.ast.JPackage,java.lang.String)",5,4,"@javax.annotation.Nonnull @java.lang.Override public com.android.jack.load.PackageLoader getLoaderForSubPackage(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) throws com.android.jack.ir.ast.JPackageLookupException { com.android.sched.vfs.InputVDir input = vdirCache.get(simpleName); if (input == null) { throw new com.android.jack.ir.ast.JPackageLookupException(simpleName, loading); } return new com.android.jack.jayce.JaycePackageLoader(inputJackLibrary, input, lookup, defaultLoadLevel); }",2b55285a7f053f0f41c6534dd03044173f963fa5,"getLoaderForSubPackage(com.android.jack.ir.ast.JPackage,java.lang.String)",97101,182,159
162809,luni_src_main_java_libcore_io_Base64.java,3.0,"public static java.lang.String encode(byte[] in) { int length = (((in.length) + 2) * 4) / 3; byte[] out = new byte[length]; int index = 0; int end = (in.length) - ((in.length) % 3); for (int i = 0; i < end; i += 3) { out[(index++)] = libcore.io.Base64.map[(((in[i]) & 255) >> 2)]; out[(index++)] = libcore.io.Base64.map[((((in[i]) & 3) << 4) | (((in[(i + 1)]) & 255) >> 4))]; out[(index++)] = libcore.io.Base64.map[((((in[(i + 1)]) & 15) << 2) | (((in[(i + 2)]) & 255) >> 6))]; out[(index++)] = libcore.io.Base64.map[((in[(i + 2)]) & 63)]; } switch ((in.length) % 3) { case 1 : out[(index++)] = libcore.io.Base64.map[(((in[end]) & 255) >> 2)]; out[(index++)] = libcore.io.Base64.map[(((in[end]) & 3) << 4)]; out[(index++)] = '='; out[(index++)] = '='; break; case 2 : out[(index++)] = libcore.io.Base64.map[(((in[end]) & 255) >> 2)]; out[(index++)] = libcore.io.Base64.map[((((in[end]) & 3) << 4) | (((in[(end + 1)]) & 255) >> 4))]; out[(index++)] = libcore.io.Base64.map[(((in[(end + 1)]) & 15) << 2)]; out[(index++)] = '='; break; } return new java.lang.String(out, 0, index, java.nio.charset.StandardCharsets.US_ASCII); }",6810684499054edbc71d395519a91f4fbb6e9aac,"public static java.lang.String encode(byte[] in) { int len = in.length; int outputLen; outputLen = libcore.io.Base64.computeEncodingOutputLen(len); byte[] output = new byte[outputLen]; int outputIndex = 0; int i = 0; for (i = 0; i < len; i += 3) { int byteTripletAsInt = (in[i]) & 255; if ((i + 1) < len) { byteTripletAsInt <<= 8; byteTripletAsInt += (in[(i + 1)]) & 255; if ((i + 2) < len) { byteTripletAsInt <<= 8; byteTripletAsInt += (in[(i + 2)]) & 255; } else { byteTripletAsInt <<= 2; } } else { byteTripletAsInt <<= 4; } if ((i + 2) < len) { output[(outputIndex++)] = libcore.io.Base64.BASE_64_ALPHABET[((byteTripletAsInt & (libcore.io.Base64.FIRST_OUTPUT_BYTE_MASK)) >> 18)]; } if ((i + 1) < len) { output[(outputIndex++)] = libcore.io.Base64.BASE_64_ALPHABET[((byteTripletAsInt & (libcore.io.Base64.SECOND_OUTPUT_BYTE_MASK)) >> 12)]; } output[(outputIndex++)] = libcore.io.Base64.BASE_64_ALPHABET[((byteTripletAsInt & (libcore.io.Base64.THIRD_OUTPUT_BYTE_MASK)) >> 6)]; output[(outputIndex++)] = libcore.io.Base64.BASE_64_ALPHABET[(byteTripletAsInt & (libcore.io.Base64.FOURTH_OUTPUT_BYTE_MASK))]; } int inLengthMod3 = len % 3; if (inLengthMod3 > 0) { output[(outputIndex++)] = '='; if (inLengthMod3 == 1) { output[(outputIndex++)] = '='; } } try { return new java.lang.String(output, ""ASCII""); } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.RuntimeException(e); } }",5cf32dc64b2c081262495df4490f28185c07b5fe,encode(byte[]),encode(byte[]),6,5,"public static java.lang.String encode(byte[] in) { int len = in.length; int outputLen = libcore.io.Base64.computeEncodingOutputLen(len); byte[] output = new byte[outputLen]; int outputIndex = 0; for (int i = 0; i < len; i += 3) { int byteTripletAsInt = (in[i]) & 255; if ((i + 1) < len) { byteTripletAsInt <<= 8; byteTripletAsInt |= (in[(i + 1)]) & 255; if ((i + 2) < len) { byteTripletAsInt <<= 8; byteTripletAsInt |= (in[(i + 2)]) & 255; } else { byteTripletAsInt <<= 2; } } else { byteTripletAsInt <<= 4; } if ((i + 2) < len) { output[(outputIndex++)] = libcore.io.Base64.BASE_64_ALPHABET[((byteTripletAsInt & (libcore.io.Base64.FIRST_OUTPUT_BYTE_MASK)) >>> 18)]; } if ((i + 1) < len) { output[(outputIndex++)] = libcore.io.Base64.BASE_64_ALPHABET[((byteTripletAsInt & (libcore.io.Base64.SECOND_OUTPUT_BYTE_MASK)) >>> 12)]; } output[(outputIndex++)] = libcore.io.Base64.BASE_64_ALPHABET[((byteTripletAsInt & (libcore.io.Base64.THIRD_OUTPUT_BYTE_MASK)) >>> 6)]; output[(outputIndex++)] = libcore.io.Base64.BASE_64_ALPHABET[(byteTripletAsInt & (libcore.io.Base64.FOURTH_OUTPUT_BYTE_MASK))]; } int inLengthMod3 = len % 3; if (inLengthMod3 > 0) { output[(outputIndex++)] = '='; if (inLengthMod3 == 1) { output[(outputIndex++)] = '='; } } return new java.lang.String(output, java.nio.charset.StandardCharsets.US_ASCII); }",711e9d9ff7b84fbe241b9b637cb4400cb26be37f,encode(byte[]),267489,476,451
368692,services_core_java_com_android_server_ConnectivityService.java,141.0,"private void handleRemoveNetworkRequest(final com.android.server.ConnectivityService.NetworkRequestInfo nri, final int whichCallback) { final java.lang.String logCallbackType = android.net.ConnectivityManager.getCallbackName(whichCallback); if ((com.android.server.ConnectivityService.VDBG) || ((com.android.server.ConnectivityService.DBG) && (nri.request.isRequest()))) { com.android.server.ConnectivityService.log(((((""releasing "" + (nri.request)) + "" ("") + logCallbackType) + "")"")); } nri.unlinkDeathRecipient(); mNetworkRequests.remove(nri.request); synchronized(mUidToNetworkRequestCount) { int requests = mUidToNetworkRequestCount.get(nri.mUid, 0); if (requests < 1) { android.util.Slog.wtf(com.android.server.ConnectivityService.TAG, (((""BUG: too small request count "" + requests) + "" for UID "") + (nri.mUid))); } else if (requests == 1) { mUidToNetworkRequestCount.removeAt(mUidToNetworkRequestCount.indexOfKey(nri.mUid)); } else { mUidToNetworkRequestCount.put(nri.mUid, (requests - 1)); } } mNetworkRequestInfoLogs.log((""RELEASE "" + nri)); if (nri.request.isRequest()) { boolean wasKept = false; com.android.server.connectivity.NetworkAgentInfo nai = mNetworkForRequestId.get(nri.request.requestId); if (nai != null) { boolean wasBackgroundNetwork = nai.isBackgroundNetwork(); nai.removeRequest(nri.request.requestId); if (com.android.server.ConnectivityService.VDBG) { com.android.server.ConnectivityService.log((((("" Removing from current network "" + (nai.name())) + "", leaving "") + (nai.numNetworkRequests())) + "" requests."")); } updateLingerState(nai, android.os.SystemClock.elapsedRealtime()); if (unneeded(nai, com.android.server.ConnectivityService.UnneededFor.TEARDOWN)) { if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log(((""no live requests for "" + (nai.name())) + ""; disconnecting"")); teardownUnneededNetwork(nai); } else { wasKept = true; } mNetworkForRequestId.remove(nri.request.requestId); if ((!wasBackgroundNetwork) && (nai.isBackgroundNetwork())) { updateCapabilities(nai.getCurrentScore(), nai, nai.networkCapabilities); } } for (com.android.server.connectivity.NetworkAgentInfo otherNai : mNetworkAgentInfos.values()) { if ((otherNai.isSatisfyingRequest(nri.request.requestId)) && (otherNai != nai)) { android.util.Slog.wtf(com.android.server.ConnectivityService.TAG, (((((""Request "" + (nri.request)) + "" satisfied by "") + (otherNai.name())) + "", but mNetworkAgentInfos says "") + (nai != null ? nai.name() : ""null""))); } } if (((nri.request.legacyType) != (TYPE_NONE)) && (nai != null)) { boolean doRemove = true; if (wasKept) { for (int i = 0; i < (nai.numNetworkRequests()); i++) { android.net.NetworkRequest otherRequest = nai.requestAt(i); if (((otherRequest.legacyType) == (nri.request.legacyType)) && (otherRequest.isRequest())) { if (com.android.server.ConnectivityService.DBG) com.android.server.ConnectivityService.log("" still have other legacy request - leaving""); doRemove = false; } } } if (doRemove) { mLegacyTypeTracker.remove(nri.request.legacyType, nai, false); } } for (com.android.server.ConnectivityService.NetworkFactoryInfo nfi : mNetworkFactoryInfos.values()) { nfi.asyncChannel.sendMessage(android.net.NetworkFactory.CMD_CANCEL_REQUEST, nri.request); } } else { for (com.android.server.connectivity.NetworkAgentInfo nai : mNetworkAgentInfos.values()) { nai.removeRequest(nri.request.requestId); if ((nri.request.networkCapabilities.hasSignalStrength()) && (nai.satisfiesImmutableCapabilitiesOf(nri.request))) { updateSignalStrengthThresholds(nai, ""RELEASE"", nri.request); } } } callCallbackForRequest(nri, null, whichCallback, 0); }",e771bd7c9debe954c7bad7c31ae363c48ea16746,"private static <T extends android.os.Parcelable> void putParcelable(android.os.Bundle bundle, T t) { if (t == null) { return; } bundle.putParcelable(t.getClass().getSimpleName(), t); }",f8b8f50f77d4a69a3c4b39e5b626a4ddc7031a21,"handleRemoveNetworkRequest(com.android.server.ConnectivityService$NetworkRequestInfo,int)","putParcelable(android.os.Bundle,android.os.Parcelable)",6,6,"private static <T extends android.os.Parcelable> void putParcelable(android.os.Bundle bundle, T t) { bundle.putParcelable(t.getClass().getSimpleName(), t); }",1c6da8fe04a264200049ed4de968281a28799cbc,"putParcelable(android.os.Bundle,android.os.Parcelable)",343880,51,41
577277,core_java_android_net_NetworkCapabilities.java,31.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public android.net.NetworkCapabilities setAllowedUids(java.util.Set<android.net.UidRange> allowedUids) { if (null == allowedUids) { mAllowedUids = null; } else { mAllowedUids = new android.util.ArraySet(allowedUids); } return this; },9b2208d5e6270585ff24428180d63d3bdd74b4bd,,setAllowedUids(java.util.Set),13,61,public android.net.NetworkCapabilities setUids(java.util.Set<android.net.UidRange> uids) { if (null == uids) { mUids = null; } else { mUids = new android.util.ArraySet(uids); } return this; },11505c12a1b08e7ea6db409c74314d844d8717e6,setUids(java.util.Set),122834,71,65
221330,tests_tests_bluetooth_src_android_bluetooth_cts_ScanResultTest.java,0.0,"@android.test.suitebuilder.annotation.SmallTest public void testScanResultParceling() { android.bluetooth.BluetoothDevice device = android.bluetooth.BluetoothAdapter.getDefaultAdapter().getRemoteDevice(android.bluetooth.cts.ScanResultTest.DEVICE_ADDRESS); android.bluetooth.le.ScanResult result = new android.bluetooth.le.ScanResult(device, android.bluetooth.cts.TestUtils.parseScanRecord(android.bluetooth.cts.ScanResultTest.SCAN_RECORD), android.bluetooth.cts.ScanResultTest.RSSI, android.bluetooth.cts.ScanResultTest.TIMESTAMP_NANOS); android.os.Parcel parcel = android.os.Parcel.obtain(); result.writeToParcel(parcel, 0); parcel.setDataPosition(0); android.bluetooth.le.ScanResult resultFromParcel = ScanResult.CREATOR.createFromParcel(parcel); assertEquals(android.bluetooth.cts.ScanResultTest.RSSI, resultFromParcel.getRssi()); assertEquals(android.bluetooth.cts.ScanResultTest.TIMESTAMP_NANOS, resultFromParcel.getTimestampNanos()); assertEquals(device, resultFromParcel.getDevice()); android.bluetooth.cts.TestUtils.assertArrayEquals(android.bluetooth.cts.ScanResultTest.SCAN_RECORD, resultFromParcel.getScanRecord().getBytes()); }",859d0468cc77ad12a48decf6111174914a86477b,"@android.test.suitebuilder.annotation.SmallTest public void testScanResultParceling() { if (mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH)) { android.bluetooth.BluetoothDevice device = android.bluetooth.BluetoothAdapter.getDefaultAdapter().getRemoteDevice(android.bluetooth.cts.ScanResultTest.DEVICE_ADDRESS); android.bluetooth.le.ScanResult result = new android.bluetooth.le.ScanResult(device, android.bluetooth.cts.TestUtils.parseScanRecord(android.bluetooth.cts.ScanResultTest.SCAN_RECORD), android.bluetooth.cts.ScanResultTest.RSSI, android.bluetooth.cts.ScanResultTest.TIMESTAMP_NANOS); android.os.Parcel parcel = android.os.Parcel.obtain(); result.writeToParcel(parcel, 0); parcel.setDataPosition(0); android.bluetooth.le.ScanResult resultFromParcel = ScanResult.CREATOR.createFromParcel(parcel); assertEquals(android.bluetooth.cts.ScanResultTest.RSSI, resultFromParcel.getRssi()); assertEquals(android.bluetooth.cts.ScanResultTest.TIMESTAMP_NANOS, resultFromParcel.getTimestampNanos()); assertEquals(device, resultFromParcel.getDevice()); android.bluetooth.cts.TestUtils.assertArrayEquals(android.bluetooth.cts.ScanResultTest.SCAN_RECORD, resultFromParcel.getScanRecord().getBytes()); } }",b96c5e1313337dfb5e5f0cb92458368282f89a97,testScanResultParceling(),testScanResultParceling(),2,0,"@android.test.suitebuilder.annotation.SmallTest public void testScanResultParceling() { if (!(mContext.getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH))) return; android.bluetooth.BluetoothDevice device = android.bluetooth.BluetoothAdapter.getDefaultAdapter().getRemoteDevice(android.bluetooth.cts.ScanResultTest.DEVICE_ADDRESS); android.bluetooth.le.ScanResult result = new android.bluetooth.le.ScanResult(device, android.bluetooth.cts.TestUtils.parseScanRecord(android.bluetooth.cts.ScanResultTest.SCAN_RECORD), android.bluetooth.cts.ScanResultTest.RSSI, android.bluetooth.cts.ScanResultTest.TIMESTAMP_NANOS); android.os.Parcel parcel = android.os.Parcel.obtain(); result.writeToParcel(parcel, 0); parcel.setDataPosition(0); android.bluetooth.le.ScanResult resultFromParcel = ScanResult.CREATOR.createFromParcel(parcel); assertEquals(android.bluetooth.cts.ScanResultTest.RSSI, resultFromParcel.getRssi()); assertEquals(android.bluetooth.cts.ScanResultTest.TIMESTAMP_NANOS, resultFromParcel.getTimestampNanos()); assertEquals(device, resultFromParcel.getDevice()); android.bluetooth.cts.TestUtils.assertArrayEquals(android.bluetooth.cts.ScanResultTest.SCAN_RECORD, resultFromParcel.getScanRecord().getBytes()); }",d1a33bcbcb4a879cc6a59f3d59126827901b9f21,testScanResultParceling(),342006,296,296
117753,jack-tests_tests_com_android_jack_opcodes_OpcodesTests.java,2.0,"@org.junit.Test public void opc_return() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(OPC_RETURN).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",9d48afe427762b3bbdebbe96367f3040bf44b83f,"@org.junit.Test public void opc_return() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(OPC_RETURN).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",239647a7f2e9b4a1897c385becf6a8b9657fd08a,opc_return(),opc_return(),4,2,"@org.junit.Test public void opc_return() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(OPC_RETURN).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",d170cee86cb0cda508de08209df74a048d23c849,opc_return(),418886,111,109
577942,telephony_java_android_telephony_ims_stub_ImsCallSessionImplBase.java,31.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void deflect(java.lang.String deflectNumber) throws android.os.RemoteException { },40e5a4330ef48e6259f2087b3acb488fdd755af2,,deflect(java.lang.String),7,47,public void deflect(java.lang.String deflectNumber) { },2c68676ca5063929c2b1f4c4d597fb06f3b88aa8,deflect(java.lang.String),200124,30,18
131660,jack-tests_tests_com_android_jack_fileconflict_FileConflictTests.java,8.0,"@org.junit.Test public void test002a() throws java.lang.Exception { java.io.File jackOutput; try { jackOutput = runTest002(false, null); junit.framework.Assert.fail(); } catch (com.android.jack.resource.ResourceImportConflictException e) { } }",f3044b4ba7bfb551706b5bc3acea5772cf62cb77,"@org.junit.Test public void test002a() throws java.lang.Exception { java.io.File jackOutput; try { jackOutput = runTest002(false, null, true); junit.framework.Assert.fail(); } catch (com.android.jack.resource.ResourceImportConflictException e) { } }",7621b63a543a1c169c29d593329fa8e6a5cddef3,test002a(),test002a(),11,9,"@org.junit.Test public void test002a() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); try { jackOutput = runTest002(false, null, errOut, true, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { junit.framework.Assert.assertTrue(((e.getCause()) instanceof com.android.jack.library.LibraryReadingException)); junit.framework.Assert.assertTrue(((e.getCause().getCause()) instanceof com.android.jack.resource.ResourceImportConflictException)); java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains(""Resource in"")); junit.framework.Assert.assertTrue(errString.contains(""rsc/Resource1"")); junit.framework.Assert.assertTrue(errString.contains(""has already been imported"")); } }",dae2ca3c6f52a956ebc8a08c88a5cc1eb4dcb650,test002a(),181572,72,209
113644,jack_src_com_android_jack_jayce_JaycePackageLoader.java,0.0,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) { for (com.android.sched.vfs.InputVElement sub : dir.list()) { if ((!(sub.isVDir())) && (isJackFileNameOf(sub.getName(), simpleName))) { try { return new com.android.jack.jayce.JayceClassOrInterfaceLoader(inputJackLibrary, loading, simpleName, ((com.android.sched.vfs.InputVFile) (sub)), lookup, defaultLoadLevel).load(); } catch (java.io.IOException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } catch (com.android.jack.JackFileException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } } } throw new com.android.jack.ir.ast.MissingJTypeLookupException(loading, simpleName); }",87086df7614e3eb8091dca441e362a297301af81,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) throws com.android.jack.ir.ast.MissingJTypeLookupException { for (com.android.sched.vfs.InputVElement sub : dir.list()) { if ((!(sub.isVDir())) && (isJackFileNameOf(sub.getName(), simpleName))) { try { return new com.android.jack.jayce.JayceClassOrInterfaceLoader(inputJackLibrary, loading, simpleName, ((com.android.sched.vfs.InputVFile) (sub)), lookup, defaultLoadLevel).load(); } catch (java.io.IOException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } catch (com.android.jack.JackFileException e) { throw new com.android.jack.load.JackLoadingException(sub.getLocation(), e); } } } throw new com.android.jack.ir.ast.MissingJTypeLookupException(loading, simpleName); }",ddf67f9dc72b10177b0cc8ecd39fc0e096e87968,"loadClassOrInterface(com.android.jack.ir.ast.JPackage,java.lang.String)","loadClassOrInterface(com.android.jack.ir.ast.JPackage,java.lang.String)",2,0,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) throws com.android.jack.ir.ast.MissingJTypeLookupException { for (com.android.sched.vfs.InputVElement sub : packageVDir.list()) { if ((!(sub.isVDir())) && (isJackFileNameOf(sub.getName(), simpleName))) { try { return new com.android.jack.jayce.JayceClassOrInterfaceLoader(inputJackLibrary, loading, simpleName, ((com.android.sched.vfs.InputVFile) (sub)), lookup, defaultLoadLevel).load(); } catch (com.android.jack.LibraryException e) { com.android.jack.library.LibraryReadingException reportable = new com.android.jack.library.LibraryReadingException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, reportable); throw new com.android.jack.JackAbortException(reportable); } } } throw new com.android.jack.ir.ast.MissingJTypeLookupException(loading, simpleName); }",6d6a167bb5ca7daa6f5f63ea725ac9e69a6eb63f,"loadClassOrInterface(com.android.jack.ir.ast.JPackage,java.lang.String)",433729,279,295
41240,common_src_com_android_utils_StdLogger.java,,,,"@java.lang.Override public void info(java.lang.String msgFormat, java.lang.Object... args) { if ((mLevel.mLevel) > (com.android.utils.StdLogger.Level.INFO.mLevel)) { return; } java.lang.String msg = java.lang.String.format(msgFormat, args); if ((((com.android.SdkConstants.CURRENT_PLATFORM) == (com.android.SdkConstants.PLATFORM_WINDOWS)) && (!(msg.endsWith(""\r\n"")))) && (msg.endsWith(""\n""))) { msg = msg.substring(0, ((msg.length()) - 1)); } java.lang.System.out.print(msg); if (!(msg.endsWith(""\n""))) { java.lang.System.out.println(); } }",03c293acce7eaa012392729ded898cc771ee877c,,"info(java.lang.String,java.lang.Object[])",4,5,"@java.lang.Override public void info(@com.android.annotations.NonNull java.lang.String msgFormat, java.lang.Object... args) { if ((mLevel.mLevel) > (com.android.utils.StdLogger.Level.INFO.mLevel)) { return; } java.lang.String msg = java.lang.String.format(msgFormat, args); printMessage(msg, java.lang.System.out); }",1876345ad201d9cdf820ba16f0503b7c0ac6745b,"info(java.lang.String,java.lang.Object[])",403377,174,100
537552,tests_net_java_com_android_server_IpSecServiceRefcountedResourceTest.java,,,,"@org.junit.Test public void testMultipleCallsToCleanupAndRelease() throws android.os.RemoteException { com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = getTestRefcountedResource(); refcountedResource.cleanupAndRelease(); assertResourceState(refcountedResource, (-1), 1, 1, 1, 1); refcountedResource.cleanupAndRelease(); refcountedResource.cleanupAndRelease(); assertResourceState(refcountedResource, (-1), 3, 1, 1, 1); }",6e7369e18b97324571cf96eb920debaecfbf4554,,testMultipleCallsToCleanupAndRelease(),9,13,"@org.junit.Test public void testMultipleCallsToCleanupAndRelease() throws android.os.RemoteException { com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = getTestRefcountedResource(); refcountedResource.userRelease(); assertResourceState(refcountedResource, (-1), 1, 1, 1, 1); refcountedResource.userRelease(); refcountedResource.userRelease(); assertResourceState(refcountedResource, (-1), 3, 1, 1, 1); }",acdb7766ae655f9662f104e0798692099f468c0f,testMultipleCallsToCleanupAndRelease(),78041,123,120
148502,core_java_android_os_Bundle.java,20.0,public boolean hasFileDescriptors() { if (!(mFdsKnown)) { boolean fdFound = false; if ((mParcelledData) != null) { if (mParcelledData.hasFileDescriptors()) { fdFound = true; } } else { for (int i = (mMap.size()) - 1; i >= 0; i--) { java.lang.Object obj = mMap.valueAt(i); if (obj instanceof android.os.Parcelable) { if (((((android.os.Parcelable) (obj)).describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0) { fdFound = true; break; } } else if (obj instanceof android.os.Parcelable[]) { android.os.Parcelable[] array = ((android.os.Parcelable[]) (obj)); for (int n = (array.length) - 1; n >= 0; n--) { if (((array[n].describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0) { fdFound = true; break; } } } else if (obj instanceof android.util.SparseArray) { android.util.SparseArray<? extends android.os.Parcelable> array = ((android.util.SparseArray<? extends android.os.Parcelable>) (obj)); for (int n = (array.size()) - 1; n >= 0; n--) { if (((array.valueAt(n).describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0) { fdFound = true; break; } } } else if (obj instanceof java.util.ArrayList) { java.util.ArrayList array = ((java.util.ArrayList) (obj)); if ((!(array.isEmpty())) && ((array.get(0)) instanceof android.os.Parcelable)) { for (int n = (array.size()) - 1; n >= 0; n--) { android.os.Parcelable p = ((android.os.Parcelable) (array.get(n))); if ((p != null) && (((p.describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0)) { fdFound = true; break; } } } } } } mHasFds = fdFound; mFdsKnown = true; } return mHasFds; },8161081c2b931d8ec9f8b1b5f71450651382f08e,public boolean hasFileDescriptors() { if (!(mFdsKnown)) { boolean fdFound = false; if ((mParcelledData) != null) { if (mParcelledData.hasFileDescriptors()) { fdFound = true; } } else { for (int i = (mMap.size()) - 1; i >= 0; i--) { java.lang.Object obj = mMap.valueAt(i); if (obj instanceof android.os.Parcelable) { if (((((android.os.Parcelable) (obj)).describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0) { fdFound = true; break; } } else if (obj instanceof android.os.Parcelable[]) { android.os.Parcelable[] array = ((android.os.Parcelable[]) (obj)); for (int n = (array.length) - 1; n >= 0; n--) { if (((array[n].describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0) { fdFound = true; break; } } } else if (obj instanceof android.util.SparseArray) { android.util.SparseArray<? extends android.os.Parcelable> array = ((android.util.SparseArray<? extends android.os.Parcelable>) (obj)); for (int n = (array.size()) - 1; n >= 0; n--) { android.os.Parcelable p = ((android.os.Parcelable) (array.valueAt(n))); if ((p != null) && (((p.describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0)) { fdFound = true; break; } } } else if (obj instanceof java.util.ArrayList) { java.util.ArrayList array = ((java.util.ArrayList) (obj)); if ((!(array.isEmpty())) && ((array.get(0)) instanceof android.os.Parcelable)) { for (int n = (array.size()) - 1; n >= 0; n--) { android.os.Parcelable p = ((android.os.Parcelable) (array.get(n))); if ((p != null) && (((p.describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0)) { fdFound = true; break; } } } } } } mHasFds = fdFound; mFdsKnown = true; } return mHasFds; },25aad5ccaebf0eaecbd86becdf0de9a902d2bd7c,hasFileDescriptors(),hasFileDescriptors(),2,20,public boolean hasFileDescriptors() { if (!(mFdsKnown)) { boolean fdFound = false; if ((mParcelledData) != null) { if (mParcelledData.hasFileDescriptors()) { fdFound = true; } } else { for (int i = (mMap.size()) - 1; i >= 0; i--) { java.lang.Object obj = mMap.valueAt(i); if (obj instanceof android.os.Parcelable) { if (((((android.os.Parcelable) (obj)).describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0) { fdFound = true; break; } } else if (obj instanceof android.os.Parcelable[]) { android.os.Parcelable[] array = ((android.os.Parcelable[]) (obj)); for (int n = (array.length) - 1; n >= 0; n--) { android.os.Parcelable p = array[n]; if ((p != null) && (((p.describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0)) { fdFound = true; break; } } } else if (obj instanceof android.util.SparseArray) { android.util.SparseArray<? extends android.os.Parcelable> array = ((android.util.SparseArray<? extends android.os.Parcelable>) (obj)); for (int n = (array.size()) - 1; n >= 0; n--) { android.os.Parcelable p = array.valueAt(n); if ((p != null) && (((p.describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0)) { fdFound = true; break; } } } else if (obj instanceof java.util.ArrayList) { java.util.ArrayList array = ((java.util.ArrayList) (obj)); if ((!(array.isEmpty())) && ((array.get(0)) instanceof android.os.Parcelable)) { for (int n = (array.size()) - 1; n >= 0; n--) { android.os.Parcelable p = ((android.os.Parcelable) (array.get(n))); if ((p != null) && (((p.describeContents()) & (Parcelable.CONTENTS_FILE_DESCRIPTOR)) != 0)) { fdFound = true; break; } } } } } } mHasFds = fdFound; mFdsKnown = true; } return mHasFds; },d5cb79a91b3930c5bdb39cd3a08aa6422082a1c5,hasFileDescriptors(),332263,502,509
108516,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,41.0,"public void test_setPositivePrefixLjava_lang_String() throws java.lang.Exception { java.text.DecimalFormat format = new java.text.DecimalFormat(); assertEquals("""", format.getPositivePrefix()); format.setPositivePrefix(""PosPrf""); assertEquals(""PosPrf"", format.getPositivePrefix()); assertTrue(((format.parse(""PosPrf123.45"").doubleValue()) == 123.45)); format.setPositivePrefix(""""); assertEquals("""", format.getPositivePrefix()); format.setPositivePrefix(null); assertNull(format.getPositivePrefix()); }",e430a17ad674ecf2f3c1f070af755630c6b35028,"public void testSetPositivePrefix() throws java.lang.Exception { java.text.DecimalFormat format = new java.text.DecimalFormat(); assertEquals("""", format.getPositivePrefix()); format.setPositivePrefix(""PosPrf""); assertEquals(""PosPrf"", format.getPositivePrefix()); assertTrue(((format.parse(""PosPrf123.45"").doubleValue()) == 123.45)); format.setPositivePrefix(""""); assertEquals("""", format.getPositivePrefix()); format.setPositivePrefix(null); assertNull(format.getPositivePrefix()); }",504588b3fdc4fdd74071026fd28a5f7c215203f7,test_setPositivePrefixLjava_lang_String(),testSetPositivePrefix(),2,65,"public void test_setPositivePrefix() throws java.lang.Exception { java.text.DecimalFormat format = new java.text.DecimalFormat(); assertEquals("""", format.getPositivePrefix()); format.setPositivePrefix(""PosPrf""); assertEquals(""PosPrf"", format.getPositivePrefix()); assertTrue(((format.parse(""PosPrf123.45"").doubleValue()) == 123.45)); format.setPositivePrefix(""""); assertEquals("""", format.getPositivePrefix()); format.setPositivePrefix(null); assertNull(format.getPositivePrefix()); }",9d4e59633a6852f61253319e59b0bcfbdbd806f1,test_setPositivePrefix(),84412,110,111
321388,services_core_java_com_android_server_am_LockTaskNotify.java,2.0,public void handleShowToast(int lockTaskModeState) { java.lang.String text = null; if (lockTaskModeState == (android.app.ActivityManager.LOCK_TASK_MODE_LOCKED)) { text = mContext.getString(R.string.lock_to_app_toast_locked); } else if (lockTaskModeState == (android.app.ActivityManager.LOCK_TASK_MODE_PINNED)) { text = mContext.getString(R.string.lock_to_app_toast); } if (text == null) { return; } if ((mLastToast) != null) { mLastToast.cancel(); } mLastToast = makeAllUserToastAndShow(text); },f4dbfee0ec0288499aa939011112891eee923487,"public void handleShowToast(int lockTaskModeState) { java.lang.String text = null; if (lockTaskModeState == (android.app.ActivityManager.LOCK_TASK_MODE_LOCKED)) { text = mContext.getString(R.string.lock_to_app_toast_locked); } else if (lockTaskModeState == (android.app.ActivityManager.LOCK_TASK_MODE_PINNED)) { text = mContext.getString(R.string.lock_to_app_toast); } if (text == null) { return; } long showToastTime = android.os.SystemClock.elapsedRealtime(); if ((showToastTime - (mLastShowToastTime)) < (com.android.server.am.LockTaskNotify.SHOW_TOAST_MINIMUM_INTERVAL)) { com.android.server.am.Slog.i(com.android.server.am.LockTaskNotify.TAG, ""Ignore toast since it is requested very short interval.""); return; } if ((mLastToast) != null) { mLastToast.cancel(); } mLastToast = makeAllUserToastAndShow(text); mLastShowToastTime = showToastTime; }",d781f0e1a7171a76e21457a891e0e6734b71e26a,handleShowToast(int),handleShowToast(int),2,2,"public void handleShowToast(int lockTaskModeState) { java.lang.String text = null; if (lockTaskModeState == (android.app.ActivityManager.LOCK_TASK_MODE_LOCKED)) { text = mContext.getString(R.string.lock_to_app_toast_locked); } else if (lockTaskModeState == (android.app.ActivityManager.LOCK_TASK_MODE_PINNED)) { text = mContext.getString(R.string.lock_to_app_toast); } if (text == null) { return; } long showToastTime = android.os.SystemClock.elapsedRealtime(); if ((showToastTime - (mLastShowToastTime)) < (com.android.server.am.LockTaskNotify.SHOW_TOAST_MINIMUM_INTERVAL)) { android.util.Slog.i(com.android.server.am.LockTaskNotify.TAG, ""Ignore toast since it is requested in very short interval.""); return; } if ((mLastToast) != null) { mLastToast.cancel(); } mLastToast = makeAllUserToastAndShow(text); mLastShowToastTime = showToastTime; }",7889de1cd9bf3b49511c3a50725ebb1b01b221b7,handleShowToast(int),179100,257,254
629407,src_com_android_se_security_arf_SecureElement.java,5.0,"public com.android.se.Channel openLogicalArfChannel(byte[] aid) throws java.io.IOException { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { return null; } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { android.util.Log.e(mTag, (""no channels left to access ARF: "" + (e.getMessage()))); throw ((java.util.MissingResourceException) (e)); } else { android.util.Log.e(mTag, (""Error opening logical channel "" + (e.getLocalizedMessage()))); } mArfChannel = null; return null; } }",de40d503b9b6ad6454a5feb60c7a95df9e86d760,"public com.android.se.Channel openLogicalArfChannel(byte[] aid) throws java.io.IOException { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { throw new java.util.MissingResourceException(""No channel was available"", """", """"); } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { android.util.Log.e(mTag, (""no channels left to access ARF: "" + (e.getMessage()))); throw ((java.util.MissingResourceException) (e)); } else { android.util.Log.e(mTag, (""Error opening logical channel "" + (e.getLocalizedMessage()))); } mArfChannel = null; return null; } }",e26b68c462007a657278335c33d553fab74716c2,openLogicalArfChannel(byte[]),openLogicalArfChannel(byte[]),7,5,"public com.android.se.Channel openLogicalArfChannel(byte[] aid) throws java.io.IOException { try { mArfChannel = mTerminalHandle.openLogicalChannelWithoutChannelAccess(aid); if ((mArfChannel) == null) { throw new java.util.MissingResourceException(""No channel was available"", """", """"); } setUpChannelAccess(mArfChannel); return mArfChannel; } catch (java.io.IOException e) { throw e; } catch (java.lang.Exception e) { android.util.Log.e(mTag, (""Error opening logical channel "" + (e.getLocalizedMessage()))); mArfChannel = null; return null; } }",7c10f405dd8916bf2270874e97f256e0af404e61,openLogicalArfChannel(byte[]),296686,210,153
412800,services_core_java_com_android_server_connectivity_tethering_OffloadController.java,9.0,public void stop() { mUpstreamLinkProperties = null; mHwInterface.stopOffloadControl(); mControlInitialized = false; mConfigInitialized = false; },20ba6d522ec86167aa7bb098b12552a473e3a4c0,"public void stop() { final boolean hadBeenStarted = started(); mUpstreamLinkProperties = null; mHwInterface.stopOffloadControl(); mControlInitialized = false; mConfigInitialized = false; if (hadBeenStarted) mLog.log(""tethering offload stopped""); }",3c44879b3d1962e4b291c61182a415c9f53bfb1e,stop(),stop(),11,9,"public void stop() { final boolean wasStarted = started(); mUpstreamLinkProperties = null; mHwInterface.stopOffloadControl(); mControlInitialized = false; mConfigInitialized = false; if (wasStarted) mLog.log(""tethering offload stopped""); }",7ec9afa53434bbd388c959406000197699a483f4,stop(),496126,64,59
91995,luni_src_main_java_android_os_Os.java,,,,"public static int pwrite(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, long offset) throws android.os.ErrnoException, java.io.InterruptedIOException { return Libcore.os.pwrite(fd, buffer, offset); }",18c26dc327baa3bd8f67fc0b742b5d88786707d4,,"pwrite(java.io.FileDescriptor,java.nio.ByteBuffer,long)",3,61,"public static int pwrite(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, long offset) throws android.system.ErrnoException, java.io.InterruptedIOException { return Libcore.os.pwrite(fd, buffer, offset); }",4b32ef994b9ad724e681af2139b9cc2675db7ebf,"pwrite(java.io.FileDescriptor,java.nio.ByteBuffer,long)",169974,56,56
153812,jack-tests_tests_com_android_jack_fileconflict_FileConflictTests.java,6.0,"@org.junit.Test @org.junit.experimental.categories.Category(com.android.jack.test.category.KnownBugs.class) public void test002g() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackOutput = runTest002(true, ""keep-first"", errOut, false, true); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(jackOutput); checkResourceContent(zipFile, com.android.jack.fileconflict.FileConflictTests.RESOURCE1_LONGPATH, ""Res1""); checkResourceContent(zipFile, com.android.jack.fileconflict.FileConflictTests.RESOURCE2_LONGPATH, ""Res2""); checkResourceContent(zipFile, com.android.jack.fileconflict.FileConflictTests.RESOURCE3_LONGPATH, ""Res3""); java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains(""Resource in"")); junit.framework.Assert.assertTrue(errString.contains(""rsc/Resource1"")); junit.framework.Assert.assertTrue(errString.contains(""has already been imported"")); }",89c1282a6f37c8321646164a2fb34127e6ceec34,"@org.junit.Test @org.junit.experimental.categories.Category(com.android.jack.test.category.KnownBugs.class) public void test002g() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackOutput = runTest002(true, ""keep-first"", errOut, false, true); com.android.jack.library.InputJackLibrary lib = null; try { lib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibraryFromDir(jackOutput); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE1_PATH, ""Res1""); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE2_PATH, ""Res2""); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE3_PATH, ""Res3""); } finally { if (lib != null) { lib.close(); } } java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains(""Resource in"")); junit.framework.Assert.assertTrue(errString.contains(""has already been imported"")); }",39ad5f827d3788384f7a28c052bafc7f54b3cfb6,test002g(),test002g(),9,5,"@org.junit.Test @com.android.jack.test.junit.KnownIssue public void test002g() throws java.lang.Exception { java.io.File jackOutput; java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); jackOutput = runTest002(true, ""keep-first"", errOut, false, true); com.android.jack.library.InputJackLibrary lib = null; try { lib = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibrary(jackOutput); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE1_PATH, ""Res1""); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE2_PATH, ""Res2""); checkResourceContent(lib, com.android.jack.fileconflict.FileConflictTests.RESOURCE3_PATH, ""Res3""); } finally { if (lib != null) { lib.close(); } } java.lang.String errString = errOut.toString(); junit.framework.Assert.assertTrue(errString.contains(""Resource in"")); junit.framework.Assert.assertTrue(errString.contains(""rsc/Resource1"")); junit.framework.Assert.assertTrue(errString.contains(""has already been imported"")); }",f9750a33fc2cb373a77da03c14f571fdbd8f5a71,test002g(),456027,279,281
623704,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,0.0,"@org.junit.Test public void testUnbondDevice_disconnectBeforeUnbond() { mCurrentDevice = getTestDevice(0); org.junit.Assert.assertTrue(mHeadsetService.connect(mCurrentDevice)); verify(mObjectsFactory).makeStateMachine(mCurrentDevice, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectHfp(mCurrentDevice); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, mCurrentDevice); mHeadsetService.messageFromNative(connectedEvent); try { java.lang.Thread.sleep(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException exception) { org.junit.Assert.fail(""Interrupted while waiting for callback to disconnected state""); } doReturn(BluetoothDevice.BOND_NONE).when(mAdapterService).getBondState(eq(mCurrentDevice)); android.content.Intent unbondIntent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_BOND_STATE_CHANGED); unbondIntent.putExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.BOND_NONE); unbondIntent.putExtra(BluetoothDevice.EXTRA_DEVICE, mCurrentDevice); android.support.test.InstrumentationRegistry.getTargetContext().sendBroadcast(unbondIntent); verify(mObjectsFactory, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).destroyStateMachine(mStateMachineArgument.capture()); org.junit.Assert.assertEquals(mCurrentDevice, mStateMachineArgument.getValue().getDevice()); }",f09519f6de276b6a9bed9520ea9bb0f4910c5ddc,"@org.junit.Test public void testUnbondDevice_disconnectBeforeUnbond() { android.bluetooth.BluetoothDevice device = getTestDevice(0); org.junit.Assert.assertTrue(mHeadsetService.connect(device)); verify(mObjectsFactory).makeStateMachine(device, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectHfp(device); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, device); mHeadsetService.messageFromNative(connectedEvent); try { java.lang.Thread.sleep(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException exception) { org.junit.Assert.fail(""Interrupted while waiting for callback to disconnected state""); } doReturn(BluetoothDevice.BOND_NONE).when(mAdapterService).getBondState(eq(device)); android.content.Intent unbondIntent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_BOND_STATE_CHANGED); unbondIntent.putExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.BOND_NONE); unbondIntent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); android.support.test.InstrumentationRegistry.getTargetContext().sendBroadcast(unbondIntent); verify(mObjectsFactory, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).destroyStateMachine(mStateMachineArgument.capture()); org.junit.Assert.assertEquals(device, mStateMachineArgument.getValue().getDevice()); }",e3e52429d1d3c5593c8e306003d5d6408c2b8eab,testUnbondDevice_disconnectBeforeUnbond(),testUnbondDevice_disconnectBeforeUnbond(),36,14,"@org.junit.Test public void testUnbondDevice_disconnectBeforeUnbond() { android.bluetooth.BluetoothDevice device = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 0); mBondedDevices.add(device); org.junit.Assert.assertTrue(mHeadsetService.connect(device)); verify(mObjectsFactory).makeStateMachine(device, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); waitAndVerifyConnectionStateIntent(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS, device, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED); verify(mNativeInterface).connectHfp(device); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_DISCONNECTED, device); mHeadsetService.messageFromNative(connectedEvent); waitAndVerifyConnectionStateIntent(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS, device, BluetoothProfile.STATE_DISCONNECTED, BluetoothProfile.STATE_CONNECTING); doReturn(BluetoothDevice.BOND_NONE).when(mAdapterService).getBondState(eq(device)); android.content.Intent unbondIntent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_BOND_STATE_CHANGED); unbondIntent.putExtra(BluetoothDevice.EXTRA_BOND_STATE, BluetoothDevice.BOND_NONE); unbondIntent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); android.support.test.InstrumentationRegistry.getTargetContext().sendBroadcast(unbondIntent); verify(mObjectsFactory, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).destroyStateMachine(mStateMachineArgument.capture()); org.junit.Assert.assertEquals(device, mStateMachineArgument.getValue().getDevice()); }",66e042b6fae05cf6d895721180f71d2573bb7eb0,testUnbondDevice_disconnectBeforeUnbond(),10673,431,460
296296,Common_src_com_googlecode_android_scripting_facade_bluetooth_BluetoothConnectionFacade.java,0.0,"private void disconnectProfiles(android.bluetooth.BluetoothDevice device, java.lang.String deviceID) { com.googlecode.android_scripting.Log.d((""Disconnecting device "" + device)); mA2dpProfile.a2dpDisconnect(device); mA2dpSinkProfile.a2dpSinkDisconnect(device); mHidProfile.hidDisconnect(device); mHspProfile.hspDisconnect(device); mHfpClientProfile.hfpClientDisconnect(device); mPanProfile.panDisconnect(device); mPbapClientProfile.pbapClientDisconnect(device); }",4065657d15092c22ecf166cf6da5629f743748fe,"private void disconnectProfiles(android.bluetooth.BluetoothDevice device, java.lang.String deviceID) { com.googlecode.android_scripting.Log.d((""Disconnecting device "" + device)); mA2dpProfile.a2dpDisconnect(device); mA2dpSinkProfile.a2dpSinkDisconnect(device); mHidProfile.hidDisconnect(device); mHspProfile.hspDisconnect(device); mHfpClientProfile.hfpClientDisconnect(device); mPanProfile.panDisconnect(device); mPbapClientProfile.pbapClientDisconnect(device); mMapClientProfile.mapClientDisconnect(device); }",d8e74bc7ebdc46fbeb1b25fcaf9cd0971b100e96,"disconnectProfiles(android.bluetooth.BluetoothDevice,java.lang.String)","disconnectProfiles(android.bluetooth.BluetoothDevice,java.lang.String)",5,0,"private void disconnectProfiles(android.bluetooth.BluetoothDevice device, java.lang.String deviceID) { com.googlecode.android_scripting.Log.d((""Disconnecting device "" + device)); mA2dpProfile.a2dpDisconnect(device); mA2dpSinkProfile.a2dpSinkDisconnect(device); mHidProfile.hidDisconnect(device); mHspProfile.hspDisconnect(device); mHfpClientProfile.hfpClientDisconnect(device); mPbapClientProfile.pbapClientDisconnect(device); mPanProfile.panDisconnect(device); mMapClientProfile.mapClientDisconnect(device); }",a73aa4b10c398f1ad579b37cded68e6872224202,"disconnectProfiles(android.bluetooth.BluetoothDevice,java.lang.String)",419720,140,140
633606,src_com_android_bluetooth_hearingaid_HearingAidService.java,41.0,"@java.lang.Override protected boolean start() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""start()""); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) != null) { throw new java.lang.IllegalStateException(""start() called twice""); } mAdapter = java.util.Objects.requireNonNull(android.bluetooth.BluetoothAdapter.getDefaultAdapter(), ""BluetoothAdapter cannot be null when HearingAidService starts""); mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapterService(), ""AdapterService cannot be null when HearingAidService starts""); mStateMachines.clear(); mStateMachinesThread = new android.os.HandlerThread(""HearingAidService.StateMachines""); mStateMachinesThread.start(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.BondStateChangedReceiver(); registerReceiver(mBondStateChangedReceiver, filter); filter = new android.content.IntentFilter(); filter.addAction(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(this); setActiveDevice(null); return true; }",33e17dc33e9272c0a715110614045c0fd5591ffd,"@java.lang.Override protected boolean start() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""start()""); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) != null) { throw new java.lang.IllegalStateException(""start() called twice""); } mAdapter = java.util.Objects.requireNonNull(android.bluetooth.BluetoothAdapter.getDefaultAdapter(), ""BluetoothAdapter cannot be null when HearingAidService starts""); mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapterService(), ""AdapterService cannot be null when HearingAidService starts""); mHearingAidNativeInterface = java.util.Objects.requireNonNull(com.android.bluetooth.hearingaid.HearingAidNativeInterface.getInstance(), ""HearingAidNativeInterface cannot be null when HearingAidService starts""); mStateMachines.clear(); mStateMachinesThread = new android.os.HandlerThread(""HearingAidService.StateMachines""); mStateMachinesThread.start(); mHearingAidNativeInterface.init(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.BondStateChangedReceiver(); registerReceiver(mBondStateChangedReceiver, filter); filter = new android.content.IntentFilter(); filter.addAction(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(this); setActiveDevice(null); return true; }",44b632a2d3eb9579b2f6fc3e988b93e7e8d63a41,start(),start(),34,37,"@java.lang.Override protected boolean start() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""start()""); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) != null) { throw new java.lang.IllegalStateException(""start() called twice""); } mAdapterService = java.util.Objects.requireNonNull(com.android.bluetooth.btservice.AdapterService.getAdapterService(), ""AdapterService cannot be null when HearingAidService starts""); mHearingAidNativeInterface = java.util.Objects.requireNonNull(com.android.bluetooth.hearingaid.HearingAidNativeInterface.getInstance(), ""HearingAidNativeInterface cannot be null when HearingAidService starts""); mAudioManager = ((android.media.AudioManager) (getSystemService(Context.AUDIO_SERVICE))); java.util.Objects.requireNonNull(mAudioManager, ""AudioManager cannot be null when HearingAidService starts""); mStateMachines.clear(); mStateMachinesThread = new android.os.HandlerThread(""HearingAidService.StateMachines""); mStateMachinesThread.start(); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_BOND_STATE_CHANGED); mBondStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.BondStateChangedReceiver(); registerReceiver(mBondStateChangedReceiver, filter); filter = new android.content.IntentFilter(); filter.addAction(BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); mConnectionStateChangedReceiver = new com.android.bluetooth.hearingaid.HearingAidService.ConnectionStateChangedReceiver(); registerReceiver(mConnectionStateChangedReceiver, filter); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(this); mHearingAidNativeInterface.init(); return true; }",32554bb6c44ef31417d79b4dce7d5f7f09f88bae,start(),484239,452,458
217013,src_com_android_bluetooth_avrcp_Avrcp.java,42.0,"private void processRegisterNotification(int eventId, int param) { switch (eventId) { case com.android.bluetooth.avrcp.Avrcp.EVT_PLAY_STATUS_CHANGED : mPlayStatusChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM; registerNotificationRspPlayStatusNative(mPlayStatusChangedNT, convertPlayStateToPlayStatus(mCurrentPlayState)); break; case com.android.bluetooth.avrcp.Avrcp.EVT_TRACK_CHANGED : mTrackChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM; sendTrackChangedRsp(); break; case com.android.bluetooth.avrcp.Avrcp.EVT_PLAY_POS_CHANGED : long songPosition = getPlayPosition(); mPlayPosChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM; mPlaybackIntervalMs = ((long) (param)) * 1000L; if ((mCurrentPosMs) != (android.media.RemoteControlClient.PLAYBACK_POSITION_ALWAYS_UNKNOWN)) { mNextPosMs = songPosition + (mPlaybackIntervalMs); mPrevPosMs = songPosition - (mPlaybackIntervalMs); if ((mCurrentPlayState) == (android.media.RemoteControlClient.PLAYSTATE_PLAYING)) { android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MESSAGE_PLAY_INTERVAL_TIMEOUT); mHandler.sendMessageDelayed(msg, mPlaybackIntervalMs); } } registerNotificationRspPlayPosNative(mPlayPosChangedNT, ((int) (songPosition))); break; } }",bf16e71f4c3847cff60c713f5d8af9a7209381e6,"private void processRegisterNotification(int eventId, int param) { switch (eventId) { case com.android.bluetooth.avrcp.Avrcp.EVT_PLAY_STATUS_CHANGED : mPlayStatusChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM; registerNotificationRspPlayStatusNative(mPlayStatusChangedNT, convertPlayStateToPlayStatus(mCurrentPlayState)); break; case com.android.bluetooth.avrcp.Avrcp.EVT_TRACK_CHANGED : mTrackChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM; sendTrackChangedRsp(); break; case com.android.bluetooth.avrcp.Avrcp.EVT_PLAY_POS_CHANGED : long songPosition = getPlayPosition(); mPlayPosChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM; mPlaybackIntervalMs = ((long) (param)) * 1000L; if ((mCurrentPosMs) != (-1L)) { mNextPosMs = songPosition + (mPlaybackIntervalMs); mPrevPosMs = songPosition - (mPlaybackIntervalMs); if (isPlayingState(mCurrentPlayState)) { android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MESSAGE_PLAY_INTERVAL_TIMEOUT); mHandler.sendMessageDelayed(msg, mPlaybackIntervalMs); } } registerNotificationRspPlayPosNative(mPlayPosChangedNT, ((int) (songPosition))); break; } }",f9fba496dc965d768b034c6a74cf99f0b50d4e3a,"processRegisterNotification(int,int)","processRegisterNotification(int,int)",8,45,"private void processRegisterNotification(int eventId, int param) { switch (eventId) { case com.android.bluetooth.avrcp.Avrcp.EVT_PLAY_STATUS_CHANGED : mPlayStatusChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM; registerNotificationRspPlayStatusNative(mPlayStatusChangedNT, convertPlayStateToPlayStatus(mCurrentPlayState)); break; case com.android.bluetooth.avrcp.Avrcp.EVT_TRACK_CHANGED : android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ""Track changed notification enabled""); mTrackChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM; sendTrackChangedRsp(); break; case com.android.bluetooth.avrcp.Avrcp.EVT_PLAY_POS_CHANGED : long songPosition = getPlayPosition(); mPlayPosChangedNT = com.android.bluetooth.avrcp.Avrcp.NOTIFICATION_TYPE_INTERIM; mPlaybackIntervalMs = ((long) (param)) * 1000L; if ((mCurrentPosMs) != (android.media.session.PlaybackState.PLAYBACK_POSITION_UNKNOWN)) { mNextPosMs = songPosition + (mPlaybackIntervalMs); mPrevPosMs = songPosition - (mPlaybackIntervalMs); if (isPlayingState(mCurrentPlayState)) { android.os.Message msg = mHandler.obtainMessage(com.android.bluetooth.avrcp.Avrcp.MESSAGE_PLAY_INTERVAL_TIMEOUT); mHandler.sendMessageDelayed(msg, mPlaybackIntervalMs); } } registerNotificationRspPlayPosNative(mPlayPosChangedNT, ((int) (songPosition))); break; } }",42f671bd7e2d314876eb6daa5c19453de97684fa,"processRegisterNotification(int,int)",511637,361,404
257540,jack_src_com_android_jack_cfg_CfgBuilder.java,18.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JIfStatement ifStmt) { super.visit(ifStmt); com.android.jack.cfg.ConditionalBasicBlock condBlock = new com.android.jack.cfg.ConditionalBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(condBlock); assert (ifStmt.getThenStmt()) != null; accept(ifStmt.getThenStmt()); if ((!(currentStmts.isEmpty())) || (!(virtualStmts.isEmpty()))) { com.android.jack.cfg.NormalBasicBlock endOfBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(endOfBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(ifStmt); forwardBranchResolver.addNormalBasicBlock(endOfBlock, nextStatement); } com.android.jack.ir.ast.JStatement elseStmt = ifStmt.getElseStmt(); if (elseStmt != null) { accept(elseStmt); if ((!(currentStmts.isEmpty())) || (!(virtualStmts.isEmpty()))) { com.android.jack.cfg.NormalBasicBlock endOfBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(endOfBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(ifStmt); forwardBranchResolver.addNormalBasicBlock(endOfBlock, nextStatement); } } else { elseStmt = com.android.jack.util.ControlFlowHelper.getNextStatement(ifStmt); } forwardBranchResolver.addConditionalBasicBlock(condBlock, ifStmt.getThenStmt(), elseStmt); return false; }",4f03e0bdfc4e80d20489e7bef80e11a2d75debbf,,visit(com.android.jack.ir.ast.JIfStatement),5,9,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JIfStatement ifStmt) { super.visit(ifStmt); com.android.jack.cfg.ConditionalBasicBlock condBlock = new com.android.jack.cfg.ConditionalBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(condBlock); assert (ifStmt.getThenStmt()) != null; accept(ifStmt.getThenStmt()); com.android.jack.ir.ast.JStatement elseStmt = ifStmt.getElseStmt(); if ((!(currentStmts.isEmpty())) || ((elseStmt != null) && (!(virtualStmts.isEmpty())))) { com.android.jack.cfg.NormalBasicBlock endOfBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(endOfBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(ifStmt); forwardBranchResolver.addNormalBasicBlock(endOfBlock, nextStatement); } if (elseStmt != null) { accept(elseStmt); if (!(currentStmts.isEmpty())) { com.android.jack.cfg.NormalBasicBlock endOfBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(endOfBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(ifStmt); forwardBranchResolver.addNormalBasicBlock(endOfBlock, nextStatement); } } else { elseStmt = com.android.jack.util.ControlFlowHelper.getNextStatement(ifStmt); } forwardBranchResolver.addConditionalBasicBlock(condBlock, ifStmt.getThenStmt(), elseStmt); return false; }",fda83eeda3f06bb75b3bce282dab2cea9208955a,visit(com.android.jack.ir.ast.JIfStatement),131283,418,417
561514,src_com_android_bluetooth_hfp_HeadsetService.java,44.0,"boolean connectAudio(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, (""connectAudio, device="" + device)); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: device is null""); return false; } synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((""connectAudio: device "" + device) + "" was never connected/connecting"")); return false; } if ((stateMachine.getConnectionState()) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: profile not connected""); return false; } if (isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (""connectAudio: audio is not idle, current audio device is "" + (getCurrentAudioDevice()))); return false; } stateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, device); } return true; }",19d7d2dd9078e4aa83d1878a4b4dbb4105b700dd,"boolean connectAudio(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.hfp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); android.util.Log.i(com.android.bluetooth.hfp.HeadsetService.TAG, (""connectAudio, device="" + device)); if (device == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: device is null""); return false; } synchronized(mStateMachines) { final com.android.bluetooth.hfp.HeadsetStateMachine stateMachine = mStateMachines.get(device); if (stateMachine == null) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ((""connectAudio: device "" + device) + "" was never connected/connecting"")); return false; } if ((stateMachine.getConnectionState()) != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, ""connectAudio: profile not connected""); return false; } if (isAudioOn()) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (""connectAudio: audio is not idle, current audio device is "" + (getCurrentAudioDevice()))); return false; } stateMachine.sendMessage(HeadsetStateMachine.CONNECT_AUDIO, device); } return true; }",5dc004997b97034dc0c42da7e8886f7849e62c86,connectAudio(android.bluetooth.BluetoothDevice),connectAudio(android.bluetooth.BluetoothDevice),17,37,"private void broadcastActiveDevice(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, (""broadcastActiveDevice: "" + device)); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHeadset.ACTION_ACTIVE_DEVICE_CHANGED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND))); sendBroadcastAsUser(intent, UserHandle.ALL, BLUETOOTH_PERM); }",bb71e7d4fd23e6dbf5f622c91af87dfb5df3eb41,broadcastActiveDevice(android.bluetooth.BluetoothDevice),117869,340,172
627806,luni_src_main_java_libcore_util_TimeZoneFinder.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static java.lang.Boolean parseBooleanAttribute(java.lang.String attributeValue) { if (attributeValue == null) { return null; } boolean isTrue = libcore.util.TimeZoneFinder.TRUE_ATTRIBUTE_VALUE.equals(attributeValue); if (!(isTrue || (libcore.util.TimeZoneFinder.FALSE_ATTRIBUTE_VALUE.equals(attributeValue)))) { return null; } return isTrue; },1026bfb70c0124301219092e1bd80b3604b17bf8,,parseBooleanAttribute(java.lang.String),3,27,"private static java.lang.Boolean parseBooleanAttribute(org.xmlpull.v1.XmlPullParser parser, java.lang.String attributeName, java.lang.Boolean defaultValue) throws org.xmlpull.v1.XmlPullParserException { java.lang.String attributeValueString = parser.getAttributeValue(null, attributeName); if (attributeValueString == null) { return defaultValue; } boolean isTrue = libcore.util.TimeZoneFinder.TRUE_ATTRIBUTE_VALUE.equals(attributeValueString); if (!(isTrue || (libcore.util.TimeZoneFinder.FALSE_ATTRIBUTE_VALUE.equals(attributeValueString)))) { throw new org.xmlpull.v1.XmlPullParserException((((""Attribute \"""" + attributeName) + ""\"" is not \""y\"" or \""n\"": "") + (parser.getPositionDescription()))); } return isTrue; }",468aa351660b84971c71d693a73ec223a3b88581,"parseBooleanAttribute(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.Boolean)",482139,89,171
426280,services_core_java_com_android_server_connectivity_Nat464Xlat.java,5.0,"public void start() { if (isStarted()) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ""startClat: already started""); return; } if ((mNetwork.linkProperties) == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ""startClat: Can't start clat with null LinkProperties""); return; } try { mNMService.registerObserver(this); } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, (""startClat: Can't register interface observer for clat on "" + (mNetwork))); return; } mBaseIface = mNetwork.linkProperties.getInterfaceName(); if ((mBaseIface) == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ""startClat: Can't start clat on null interface""); return; } mIface = (com.android.server.connectivity.Nat464Xlat.CLAT_PREFIX) + (mBaseIface); android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, (""Starting clatd on "" + (mBaseIface))); try { mNMService.startClatd(mBaseIface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, (""Error starting clatd: "" + e)); } }",0f7f518cf750516050a481d2f5b50f4a5d1d260c,"public void start() { if (isStarted()) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ""startClat: already started""); return; } if ((mNetwork.linkProperties) == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ""startClat: Can't start clat with null LinkProperties""); return; } mBaseIface = mNetwork.linkProperties.getInterfaceName(); if ((mBaseIface) == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ""startClat: Can't start clat on null interface""); return; } mIface = (com.android.server.connectivity.Nat464Xlat.CLAT_PREFIX) + (mBaseIface); android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, (""Starting clatd on "" + (mBaseIface))); try { mNMService.registerObserver(this); mNMService.startClatd(mBaseIface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, (""Error starting clatd on "" + (mBaseIface)), e); } }",ade3ade6e58e5ca14cb32654b3157d1780e0dd33,start(),start(),16,12,"public void start() { if (isStarted()) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ""startClat: already started""); return; } if ((mNetwork.linkProperties) == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ""startClat: Can't start clat with null LinkProperties""); return; } try { mNMService.registerObserver(this); } catch (android.os.RemoteException e) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, (""startClat: Can't register interface observer for clat on "" + (mNetwork))); return; } java.lang.String baseIface = mNetwork.linkProperties.getInterfaceName(); if (baseIface == null) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, ""startClat: Can't start clat on null interface""); return; } enterStartingState(baseIface); android.util.Slog.i(com.android.server.connectivity.Nat464Xlat.TAG, (""Starting clatd on "" + (mBaseIface))); try { mNMService.startClatd(mBaseIface); } catch (android.os.RemoteException | java.lang.IllegalStateException e) { android.util.Slog.e(com.android.server.connectivity.Nat464Xlat.TAG, (""Error starting clatd on "" + (mBaseIface)), e); } }",28c403cfe21c0acbc283b6c93716dfeda44c73bd,start(),496313,339,380
512256,tests_net_java_com_android_server_connectivity_tethering_CarrierConfigChangeListenerTest.java,,,,"private void sendChangeBroadcast() { final android.content.Intent intent = new android.content.Intent(android.telephony.CarrierConfigManager.ACTION_CARRIER_CONFIG_CHANGED); mServiceContext.sendStickyBroadcastAsUser(intent, UserHandle.ALL); }",c399727d0ee2e4e0f7c03f888e10f74f621357cb,,sendChangeBroadcast(),8,3,"private void sendBroadcast() { final android.content.Intent intent = new android.content.Intent(android.net.util.VersionedBroadcastListenerTest.ACTION_TEST); mServiceContext.sendStickyBroadcastAsUser(intent, UserHandle.ALL); }",336ff67ed021b9306912ba3dc5cb2944170373c9,sendBroadcast(),171767,58,54
89225,libart_src_main_java_java_lang_reflect_Method.java,13.0,"public native java.lang.Object invoke(java.lang.Object receiver, java.lang.Object... args) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException;",d2e409e14cacfdf652fb45e3921a3324551a29db,"public java.lang.Object invoke(java.lang.Object receiver, java.lang.Object... args) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException { checkAccess(receiver, getDeclaringClass(), getModifiers()); return invokeNative(receiver, args); }",6005c2c3f8dc82dbea075732cdd18783f5e3b3a7,"invoke(java.lang.Object,java.lang.Object[])","invoke(java.lang.Object,java.lang.Object[])",2,13,"public java.lang.Object invoke(java.lang.Object receiver, java.lang.Object... args) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException { return invoke(receiver, args, isAccessible()); }",cd513877346ce60a28b48ed3faa490a996582bad,"invoke(java.lang.Object,java.lang.Object[])",134542,67,58
81416,tests_tests_renderscript_src_android_renderscript_cts_TestFabs.java,,,,"private void checkFabsFloat3() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testFabsFloat3(in, out); verifyResultsFabsFloat3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFabsFloat3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testFabsFloat3(in, out); verifyResultsFabsFloat3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFabsFloat3: "" + (e.toString()))); } }",719160a84b6609870dc7c94428db82698005ec95,,checkFabsFloat3(),9,8,"private void checkFabsFloat3Float3() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, 7183756136545814074L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); script.forEach_testFabsFloat3Float3(in, out); verifyResultsFabsFloat3Float3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFabsFloat3Float3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testFabsFloat3Float3(in, out); verifyResultsFabsFloat3Float3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFabsFloat3Float3: "" + (e.toString()))); } }",1fb1ed2bd65f5fe3d8894657d6f3c86c1c461890,checkFabsFloat3Float3(),143096,324,309
607217,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceTest.java,4.0,"@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(eq(com.android.bluetooth.hfp.HeadsetService.class.getName()), eq(BluetoothAdapter.STATE_OFF)); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService); mStateMachines.clear(); mCurrentDevice = null; }",7a1a6db993c812d92a94cdeb8c75b0d97e451625,"@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); org.mockito.ArgumentCaptor<com.android.bluetooth.hfp.HeadsetService> argument = org.mockito.ArgumentCaptor.forClass(com.android.bluetooth.hfp.HeadsetService.class); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(argument.capture(), eq(BluetoothAdapter.STATE_OFF)); org.junit.Assert.assertEquals(argument.getValue(), mHeadsetService); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService); mStateMachines.clear(); mCurrentDevice = null; }",cba019455486807ee897157cf51a0aa742448de1,tearDown(),tearDown(),8,3,"@org.junit.After public void tearDown() throws java.lang.Exception { if (!(mTargetContext.getResources().getBoolean(R.bool.profile_supported_hs_hfp))) { return; } com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfp.HeadsetService.class); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); mStateMachines.clear(); mCurrentDevice = null; java.lang.reflect.Method method = com.android.bluetooth.hfp.HeadsetObjectsFactory.class.getDeclaredMethod(""setInstanceForTesting"", com.android.bluetooth.hfp.HeadsetObjectsFactory.class); method.setAccessible(true); method.invoke(null, ((com.android.bluetooth.hfp.HeadsetObjectsFactory) (null))); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }",d92111b27bc8bc837280aeb4fb7015e24299c65d,tearDown(),75613,326,221
122283,jack_src_com_android_jack_jayce_JayceClassOrInterfaceLoader.java,8.0,"@javax.annotation.Nonnull private com.android.jack.ir.ast.JDefinedClassOrInterface create(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.library.LibraryFormatException, com.android.jack.library.LibraryIOException { com.android.jack.jayce.DeclaredTypeNode type = getNNode(NodeLevel.TYPES); java.lang.String packageQualifiedName = com.android.jack.util.NamingTools.getPackageNameFromBinaryName(com.android.jack.util.NamingTools.getClassBinaryNameFromDescriptor(type.getSignature())); com.android.jack.ir.ast.JPackage pack = session.getLookup().getOrCreatePackage(packageQualifiedName); com.android.jack.ir.ast.JDefinedClassOrInterface jType = type.create(pack, this); return jType; }",a6c15e20f07f3c2f7181a25f9bae35f7f836f288,@javax.annotation.Nonnull private com.android.jack.jayce.NodeLevel getLoadLevel(@javax.annotation.Nonnull com.android.jack.jayce.NodeLevel minimumLevel) { com.android.jack.jayce.NodeLevel loadLevel = defaultLoadLevel; if (!(loadLevel.keep(minimumLevel))) { loadLevel = minimumLevel; } return loadLevel; },022b4ed5f88281c15b695231f038a2ff9c5ac0df,create(com.android.jack.ir.ast.JSession),getLoadLevel(com.android.jack.jayce.NodeLevel),12,11,@javax.annotation.Nonnull private com.android.jack.jayce.NodeLevel getLevelForLoading(@javax.annotation.Nonnull com.android.jack.jayce.NodeLevel requiredData) { com.android.jack.jayce.NodeLevel loadLevel = defaultLoadLevel; if (!(loadLevel.keep(requiredData))) { loadLevel = requiredData; } return loadLevel; },fd38a46ba9dbe6ad5d688d2383794ed9fd8db59e,getLevelForLoading(com.android.jack.jayce.NodeLevel),20490,86,87
70983,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gle2_GraphicalEditorPart.java,105.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.android.annotations.NonNull public com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService createRenderService(com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration configuration, com.android.ide.common.resources.ResourceResolver resolver) { return com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService.create(this, configuration, resolver, com.android.ide.eclipse.adt.internal.editors.layout.gle2.GraphicalEditorPart.sCredential); }",4c8fd5ff724493f246adfc14316fc502623d053c,,"createRenderService(com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration,com.android.ide.common.resources.ResourceResolver)",2,44,"@com.android.annotations.NonNull public com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService createRenderService(com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration configuration, com.android.ide.common.resources.ResourceResolver resolver) { return com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderService.create(this, configuration, resolver, mCredential); }",78e1d5bc3a5006aed189e5e73742891ae6401765,"createRenderService(com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration,com.android.ide.common.resources.ResourceResolver)",51485,133,108
88594,src_main_java_org_conscrypt_OpenSSLSocketImpl.java,38.0,"@java.lang.SuppressWarnings(""unused"") @java.lang.Override public void verifyCertificateChain(long[] certRefs, java.lang.String authMethod) throws java.security.cert.CertificateException { try { if ((certRefs == null) || ((certRefs.length) == 0)) { throw new javax.net.ssl.SSLException(""Peer sent no certificate""); } org.conscrypt.OpenSSLX509Certificate[] peerCertChain = new org.conscrypt.OpenSSLX509Certificate[certRefs.length]; for (int i = 0; i < (certRefs.length); i++) { peerCertChain[i] = new org.conscrypt.OpenSSLX509Certificate(certRefs[i]); } boolean client = sslParameters.getUseClientMode(); if (client) { javax.net.ssl.X509TrustManager x509tm = sslParameters.getTrustManager(); if (x509tm instanceof org.conscrypt.TrustManagerImpl) { org.conscrypt.TrustManagerImpl tm = ((org.conscrypt.TrustManagerImpl) (x509tm)); tm.checkServerTrusted(peerCertChain, authMethod, getPeerHostName()); } else { x509tm.checkServerTrusted(peerCertChain, authMethod); } } else { java.lang.String authType = peerCertChain[0].getPublicKey().getAlgorithm(); sslParameters.getTrustManager().checkClientTrusted(peerCertChain, authType); } } catch (java.security.cert.CertificateException e) { throw e; } catch (java.lang.Exception e) { throw new java.security.cert.CertificateException(e); } }",2505db307cc74305d9dd899ea7d8f6c64bd77ee5,"@java.lang.SuppressWarnings(""unused"") @java.lang.Override public void verifyCertificateChain(long sslSessionNativePtr, long[] certRefs, java.lang.String authMethod) throws java.security.cert.CertificateException { try { if ((certRefs == null) || ((certRefs.length) == 0)) { throw new javax.net.ssl.SSLException(""Peer sent no certificate""); } org.conscrypt.OpenSSLX509Certificate[] peerCertChain = new org.conscrypt.OpenSSLX509Certificate[certRefs.length]; for (int i = 0; i < (certRefs.length); i++) { peerCertChain[i] = new org.conscrypt.OpenSSLX509Certificate(certRefs[i]); } handshakeSession = new org.conscrypt.OpenSSLSessionImpl(sslSessionNativePtr, null, peerCertChain, getPeerHostName(), getPeerPort(), null); boolean client = sslParameters.getUseClientMode(); java.lang.String authType = (client) ? authMethod : peerCertChain[0].getPublicKey().getAlgorithm(); javax.net.ssl.X509TrustManager x509tm = sslParameters.getTrustManager(); if (x509tm instanceof javax.net.ssl.X509ExtendedTrustManager) { javax.net.ssl.X509ExtendedTrustManager tm = ((javax.net.ssl.X509ExtendedTrustManager) (x509tm)); tm.checkServerTrusted(peerCertChain, authType, this); } else { x509tm.checkServerTrusted(peerCertChain, authType); } } catch (java.security.cert.CertificateException e) { throw e; } catch (java.lang.Exception e) { throw new java.security.cert.CertificateException(e); } }",08c548f27112ccb93b8710bcb54f188ec1d05c8e,"verifyCertificateChain(long[],java.lang.String)","verifyCertificateChain(long,long[],java.lang.String)",3,37,"@java.lang.SuppressWarnings(""unused"") @java.lang.Override public void verifyCertificateChain(long sslSessionNativePtr, long[] certRefs, java.lang.String authMethod) throws java.security.cert.CertificateException { try { javax.net.ssl.X509TrustManager x509tm = sslParameters.getX509TrustManager(); if (x509tm == null) { throw new java.security.cert.CertificateException(""No X.509 TrustManager""); } if ((certRefs == null) || ((certRefs.length) == 0)) { throw new javax.net.ssl.SSLException(""Peer sent no certificate""); } org.conscrypt.OpenSSLX509Certificate[] peerCertChain = new org.conscrypt.OpenSSLX509Certificate[certRefs.length]; for (int i = 0; i < (certRefs.length); i++) { peerCertChain[i] = new org.conscrypt.OpenSSLX509Certificate(certRefs[i]); } handshakeSession = new org.conscrypt.OpenSSLSessionImpl(sslSessionNativePtr, null, peerCertChain, getPeerHostName(), getPeerPort(), null); boolean client = sslParameters.getUseClientMode(); if (client) { if (x509tm instanceof javax.net.ssl.X509ExtendedTrustManager) { javax.net.ssl.X509ExtendedTrustManager x509etm = ((javax.net.ssl.X509ExtendedTrustManager) (x509tm)); x509etm.checkServerTrusted(peerCertChain, authMethod, this); } else { x509tm.checkServerTrusted(peerCertChain, authMethod); } } else { java.lang.String authType = peerCertChain[0].getPublicKey().getAlgorithm(); if (x509tm instanceof javax.net.ssl.X509ExtendedTrustManager) { javax.net.ssl.X509ExtendedTrustManager x509etm = ((javax.net.ssl.X509ExtendedTrustManager) (x509tm)); x509etm.checkClientTrusted(peerCertChain, authType, this); } else { x509tm.checkClientTrusted(peerCertChain, authType); } } } catch (java.security.cert.CertificateException e) { throw e; } catch (java.lang.Exception e) { throw new java.security.cert.CertificateException(e); } finally { handshakeSession = null; } }",3f128c1eea876cacb676971602601cf9ff7c80cd,"verifyCertificateChain(long,long[],java.lang.String)",310312,378,511
118993,jack-tests_tests_com_android_jack_multidex_MultiDexTests.java,1.0,"@org.junit.Test public void legacyAppTest002b() throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(""com.android.jack.multidex.test002.jack""); java.io.File out = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); com.android.jack.test.toolchain.JackApiToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class); addCommonOptionsForMultiDex(toolchain, new java.io.File(testFolder, ""config-001.jpp"")); toolchain.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), ""minimal-multidex""); toolchain.addStaticLibs(com.android.jack.multidex.MultiDexTests.library); toolchain.srcToExe(com.android.jack.test.toolchain.AbstractTestTools.getClasspathsAsString(toolchain.getDefaultBootClasspath(), new java.io.File[]{ com.android.jack.multidex.MultiDexTests.annotations, com.android.jack.multidex.MultiDexTests.frameworks }), out, false, testFolder); java.io.File outList = getListingOfDex(new java.io.File(out, ""classes.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-002-1.txt""), outList); java.io.File outList2 = getListingOfDex(new java.io.File(out, ""classes2.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-002-2.txt""), outList2); junit.framework.Assert.assertFalse(new java.io.File(out, ""classes3.dex"").exists()); return; }",84e5b7afc10f23050c88efc1a95ba734c0a3540a,"@org.junit.Test public void legacyAppTest002b() throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(""com.android.jack.multidex.test002.jack""); java.io.File out = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); com.android.jack.test.toolchain.JackApiToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class); addCommonOptionsForMultiDex(toolchain, new java.io.File(testFolder, ""config-001.jpp"")); toolchain.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), ""minimal-multidex""); toolchain.addStaticLibs(com.android.jack.multidex.MultiDexTests.library); toolchain.srcToExe(com.android.jack.test.toolchain.AbstractTestTools.getClasspathsAsString(toolchain.getDefaultBootClasspath(), new java.io.File[]{ com.android.jack.multidex.MultiDexTests.annotations, com.android.jack.multidex.MultiDexTests.frameworks }), out, false, testFolder); java.lang.String outList = getListingOfDex(new java.io.File(out, ""classes.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-002-1.txt""), outList); java.lang.String outList2 = getListingOfDex(new java.io.File(out, ""classes2.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-002-2.txt""), outList2); junit.framework.Assert.assertFalse(new java.io.File(out, ""classes3.dex"").exists()); return; }",680bc686b09f741ac8ee4aa8872495cdb918d6c3,legacyAppTest002b(),legacyAppTest002b(),4,1,"@org.junit.Test @org.junit.experimental.categories.Category(com.android.jack.test.category.SlowTests.class) public void legacyAppTest002b() throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(""com.android.jack.multidex.test002.jack""); java.io.File out = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); com.android.jack.test.toolchain.JackApiToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class); addCommonOptionsForMultiDex(toolchain, new java.io.File(testFolder, ""config-001.jpp"")); toolchain.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), ""minimal-multidex""); toolchain.addStaticLibs(com.android.jack.multidex.MultiDexTests.library); toolchain.srcToExe(com.android.jack.test.toolchain.AbstractTestTools.getClasspathsAsString(toolchain.getDefaultBootClasspath(), new java.io.File[]{ com.android.jack.multidex.MultiDexTests.annotations, com.android.jack.multidex.MultiDexTests.frameworks }), out, false, testFolder); java.lang.String outList = getListingOfDex(new java.io.File(out, ""classes.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-002-1.txt""), outList); java.lang.String outList2 = getListingOfDex(new java.io.File(out, ""classes2.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-002-2.txt""), outList2); junit.framework.Assert.assertFalse(new java.io.File(out, ""classes3.dex"").exists()); return; }",3cfa83d29531a431d67e740aaf614eebb064b4c3,legacyAppTest002b(),300014,440,466
372612,test_980-redefine-object_src_Main.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void DisableReporting() { if ((Main.DoDisableReporting) == null) { return; } try { Main.DoDisableReporting.invoke(null); } catch (java.lang.Exception e) { throw new java.lang.Error(""Unable to disable reporting!""); } }",a6a6e6cfa0213ce6ee5d75db6b7df8c48cea76db,,DisableReporting(),2,7,"private static void DisableReporting() { if ((Main.doDisableReporting) == null) { return; } try { Main.doDisableReporting.invoke(null); } catch (java.lang.Exception e) { throw new java.lang.Error(""Unable to disable reporting!""); } }",02028f13e83316d734a395d7de9a69e0b39f41ac,DisableReporting(),218141,61,61
92606,src_com_android_browser_PhoneUi.java,17.0,@java.lang.Override public void onDestroy() { hideTitleBar(); },a415c93e78bae99611e15ceb7ff636effb3a5c79,@java.lang.Override public void onDestroy() { hideTitleBar(); mAnimScreen.onDestroy(); },c9826ab9ab662a8779df2c50dd876373fc0af8f5,onDestroy(),onDestroy(),3,17,@java.lang.Override public void onDestroy() { hideTitleBar(); },a415c93e78bae99611e15ceb7ff636effb3a5c79,onDestroy(),64897,22,16
594598,telephony_java_android_telephony_data_DataService.java,18.0,"public void setupDataCall(int accessNetworkType, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, boolean isHandover, android.net.LinkProperties linkProperties, android.telephony.data.DataServiceCallback callback) { callback.onSetupDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED, null); }",feb82cfa23669fa1e1288a82925f2b43290165d1,"public void setupDataCall(int accessNetworkType, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, @android.telephony.data.DataService.RequestReason int reason, android.net.LinkProperties linkProperties, android.telephony.data.DataServiceCallback callback) { callback.onSetupDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED, null); }",1df0593fb43c6fec93257941c4a3c6af9cfa3591,"setupDataCall(int,android.telephony.data.DataProfile,boolean,boolean,boolean,android.net.LinkProperties,android.telephony.data.DataServiceCallback)","setupDataCall(int,android.telephony.data.DataProfile,boolean,boolean,int,android.net.LinkProperties,android.telephony.data.DataServiceCallback)",3,14,"public void setupDataCall(int accessNetworkType, android.telephony.data.DataProfile dataProfile, boolean isRoaming, boolean allowRoaming, @android.telephony.data.DataService.SetupDataReason int reason, android.net.LinkProperties linkProperties, android.telephony.data.DataServiceCallback callback) { callback.onSetupDataCallComplete(DataServiceCallback.RESULT_ERROR_UNSUPPORTED, null); }",d62a50221e7ed42edc1a575eec362b5c9e9d3809,"setupDataCall(int,android.telephony.data.DataProfile,boolean,boolean,int,android.net.LinkProperties,android.telephony.data.DataServiceCallback)",429806,92,93
632132,src_com_android_bluetooth_hearingaid_HearingAidStateMachine.java,,,,"@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (((""Enter Connected("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTED; removeDeferredMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT); broadcastConnectionState(mConnectionState, mLastConnectionState); broadcastAudioState(BluetoothHearingAid.STATE_NOT_PLAYING, BluetoothHearingAid.STATE_PLAYING); }",e6b896c89bf12a9716856f76f5dcf151f2bb3129,,enter(),10,17,"@java.lang.Override public void enter() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (((""Enter Connected("" + (mDevice)) + ""): "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.messageWhatToString(getCurrentMessage().what)))); mConnectionState = android.bluetooth.BluetoothProfile.STATE_CONNECTED; removeDeferredMessages(com.android.bluetooth.hearingaid.HearingAidStateMachine.CONNECT); broadcastConnectionState(mConnectionState, mLastConnectionState); }",216169cbf1c6562c053363ad788088028edca2f6,enter(),152132,164,136
148495,asset-studio_src_main_java_com_android_assetstudiolib_vectordrawable_Svg2Vector.java,,,,"private static void parseDimension(com.android.assetstudiolib.vectordrawable.vg.SVGTree avg, org.w3c.dom.Node nNode) { org.w3c.dom.Element eElement = ((org.w3c.dom.Element) (nNode)); org.w3c.dom.NamedNodeMap a = nNode.getAttributes(); int len = a.getLength(); for (int i = 0; i < len; i++) { org.w3c.dom.Node n = a.item(i); java.lang.String name = n.getNodeName(); java.lang.String value = n.getNodeValue(); int subStringSize = value.length(); if (subStringSize > 2) { if (value.endsWith(""px"")) { subStringSize = subStringSize - 2; } } if (""width"".equals(name)) { avg.w = java.lang.Float.parseFloat(value.substring(0, subStringSize)); } else if (""height"".equals(name)) { avg.h = java.lang.Float.parseFloat(value.substring(0, subStringSize)); } else if (""viewBox"".equals(name)) { avg.viewBox = new float[4]; java.lang.String[] strbox = value.split("" ""); for (int j = 0; j < (avg.viewBox.length); j++) { avg.viewBox[j] = java.lang.Float.parseFloat(strbox[j]); } } } }",98fcf26ad9d67d34585e9d526879216f7e65f90b,,"parseDimension(com.android.assetstudiolib.vectordrawable.vg.SVGTree,org.w3c.dom.Node)",11,3,"private static void parseDimension(com.android.assetstudiolib.vectordrawable.SvgTree avg, org.w3c.dom.Node nNode) { org.w3c.dom.NamedNodeMap a = nNode.getAttributes(); int len = a.getLength(); for (int i = 0; i < len; i++) { org.w3c.dom.Node n = a.item(i); java.lang.String name = n.getNodeName(); java.lang.String value = n.getNodeValue(); int subStringSize = value.length(); if (subStringSize > 2) { if (value.endsWith(""px"")) { subStringSize = subStringSize - 2; } } if (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_WIDTH.equals(name)) { avg.w = java.lang.Float.parseFloat(value.substring(0, subStringSize)); } else if (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_HEIGHT.equals(name)) { avg.h = java.lang.Float.parseFloat(value.substring(0, subStringSize)); } else if (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_VIEW_BOX.equals(name)) { avg.viewBox = new float[4]; java.lang.String[] strbox = value.split("" ""); for (int j = 0; j < (avg.viewBox.length); j++) { avg.viewBox[j] = java.lang.Float.parseFloat(strbox[j]); } } } }",fb02fbb922271b9eeaeda4bca042e7775e50b7fd,"parseDimension(com.android.assetstudiolib.vectordrawable.SvgTree,org.w3c.dom.Node)",5060,325,340
151671,jack-tests_src_com_android_jack_test_helper_IncrementalTestHelper.java,15.0,@javax.annotation.Nonnull public java.io.File getJackFolder() { return jackFolder; },ba97c6e5378a2460377b350d172e774b61babfe7,"@javax.annotation.Nonnull public java.util.Iterator<com.android.sched.vfs.InputVFile> getJayceIterator() { com.android.jack.library.InputJackLibrary compilerStateLib; com.android.sched.util.codec.CodecContext codecContext = new com.android.sched.util.codec.CodecContext(); try { com.android.jack.Options options = new com.android.jack.Options(); options.checkValidity(new com.android.sched.util.RunnableHooks()); com.android.sched.util.config.ThreadConfig.setConfig(options.getConfig()); } catch (com.android.sched.util.config.ConfigurationException e) { e.printStackTrace(); } catch (com.android.jack.IllegalOptionsException e) { e.printStackTrace(); } com.android.jack.library.InputJackLibraryCodec codec = new com.android.jack.library.InputJackLibraryCodec(); compilerStateLib = codec.parseString(codecContext, compilerStateFolder.getPath()); com.android.sched.util.config.ThreadConfig.unsetConfig(); return compilerStateLib.iterator(FileType.JAYCE); }",879c795014f65921eca9a58647d7819ae8eebad1,getJackFolder(),getJayceIterator(),5,7,"@javax.annotation.Nonnull public java.util.Iterator<com.android.sched.vfs.InputVFile> getJayceIterator() { com.android.jack.library.InputJackLibrary compilerStateLib = new com.android.jack.library.InputJackLibraryCodec().parseString(new com.android.sched.util.codec.CodecContext(), compilerStateFolder.getPath()); return compilerStateLib.iterator(FileType.JAYCE); }",9881fb00ac5c2d4221d1cbbb0eadff8742e505da,getJayceIterator(),461355,251,98
64584,perflib_src_main_java_com_android_tools_perflib_vmtrace_VmTraceParser.java,10.0,"private void computePerMethodStats(@com.android.annotations.NonNull com.android.tools.perflib.vmtrace.Call top, @com.android.annotations.NonNull com.android.tools.perflib.vmtrace.VmTraceData data) { java.util.Iterator<com.android.tools.perflib.vmtrace.Call> it = top.getCallHierarchyIterator(); while (it.hasNext()) { com.android.tools.perflib.vmtrace.Call c = it.next(); com.android.tools.perflib.vmtrace.MethodInfo info = data.getMethod(c.getMethodId()); info.addExclusiveThreadTimes(c.getExclusiveThreadTime()); if (!(c.isRecursive())) { info.addInclusiveThreadTimes(c.getInclusiveThreadTime()); } } }",e8d6f34db349f0347017af4bb34d4719dc5db60a,"private void computePerThreadStats(@com.android.annotations.NonNull com.android.tools.perflib.vmtrace.ThreadInfo thread, com.android.tools.perflib.vmtrace.VmTraceData data) { com.android.tools.perflib.vmtrace.Call c = thread.getTopLevelCall(); if (c == null) { return; } java.util.Iterator<com.android.tools.perflib.vmtrace.Call> it = c.getCallHierarchyIterator(); while (it.hasNext()) { c = it.next(); com.android.tools.perflib.vmtrace.MethodInfo info = data.getMethod(c.getMethodId()); info.addExclusiveThreadTimes(c.getExclusiveThreadTime(), thread.getName()); if (!(c.isRecursive())) { info.addInclusiveThreadTimes(c.getInclusiveThreadTime(), thread.getName()); } } }",10082001b89abb7890f04d6465106c3281bb1baa,"computePerMethodStats(com.android.tools.perflib.vmtrace.Call,com.android.tools.perflib.vmtrace.VmTraceData)","computePerThreadStats(com.android.tools.perflib.vmtrace.ThreadInfo,com.android.tools.perflib.vmtrace.VmTraceData)",4,0,"private void computePerThreadStats(@com.android.annotations.NonNull com.android.tools.perflib.vmtrace.ThreadInfo thread, com.android.tools.perflib.vmtrace.VmTraceData data) { com.android.tools.perflib.vmtrace.Call c = thread.getTopLevelCall(); if (c == null) { return; } java.util.Iterator<com.android.tools.perflib.vmtrace.Call> it = c.getCallHierarchyIterator(); while (it.hasNext()) { c = it.next(); com.android.tools.perflib.vmtrace.MethodInfo info = data.getMethod(c.getMethodId()); for (com.android.tools.perflib.vmtrace.ClockType type : com.android.tools.perflib.vmtrace.ClockType.values()) { info.addExclusiveTime(c.getExclusiveTime(type), thread.getName(), type); } if (!(c.isRecursive())) { for (com.android.tools.perflib.vmtrace.ClockType type : com.android.tools.perflib.vmtrace.ClockType.values()) { info.addInclusiveTime(c.getInclusiveTime(type), thread.getName(), type); } } } }",28b5d293cb285fb544d12490388fdde8d5a4018a,"computePerThreadStats(com.android.tools.perflib.vmtrace.ThreadInfo,com.android.tools.perflib.vmtrace.VmTraceData)",111446,192,272
332037,src_com_android_server_telecom_Call.java,69.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void setIsRttCall(boolean shouldBeRtt) { if (shouldBeRtt && (!(isRttCall()))) { try { mInCallToConnectionServiceStreams = android.os.ParcelFileDescriptor.createReliablePipe(); mConnectionServiceToInCallStreams = android.os.ParcelFileDescriptor.createReliablePipe(); } catch (java.io.IOException e) { android.telecom.Log.e(this, e, ""Failed to create pipes for RTT call.""); } } else { closeRttPipes(); mInCallToConnectionServiceStreams = null; mConnectionServiceToInCallStreams = null; } }",6f5a2bb57ca7175da8538e7b921a87901122cb68,,setIsRttCall(boolean),5,89,"public void setIsRttCall(boolean shouldBeRtt) { boolean areStreamsInitialized = ((mInCallToConnectionServiceStreams) != null) && ((mConnectionServiceToInCallStreams) != null); if (shouldBeRtt && (!areStreamsInitialized)) { try { mInCallToConnectionServiceStreams = android.os.ParcelFileDescriptor.createReliablePipe(); mConnectionServiceToInCallStreams = android.os.ParcelFileDescriptor.createReliablePipe(); } catch (java.io.IOException e) { android.telecom.Log.e(this, e, ""Failed to create pipes for RTT call.""); } } else if ((!shouldBeRtt) && areStreamsInitialized) { closeRttPipes(); mInCallToConnectionServiceStreams = null; mConnectionServiceToInCallStreams = null; } }",2738574578d8e9f6a0d0e09a678eea80fb37ca35,setIsRttCall(boolean),460214,138,181
237600,jack_src_com_android_jack_library_v0001_InputJackLibraryImpl.java,6.0,"@java.lang.Override public synchronized void close() throws com.android.jack.library.LibraryIOException { try { for (com.android.sched.vfs.InputVFS currentSectionVFS : sectionVFS.values()) { currentSectionVFS.close(); } vfs.close(); } catch (com.android.sched.util.file.CannotCloseOutputException | com.android.sched.util.file.CannotCloseInputException e) { throw new com.android.jack.library.LibraryIOException(getLocation(), e); } }",f57a17abdaf534d39450f37e84e306c7dbd44104,"@java.lang.Override public synchronized void close() throws com.android.jack.library.LibraryIOException { try { for (com.android.sched.vfs.InputVFS currentSectionVFS : sectionVFS.values()) { currentSectionVFS.close(); } vfs.close(); } catch (com.android.sched.util.file.CannotCloseException | com.android.sched.util.file.CannotCloseInputException e) { throw new com.android.jack.library.LibraryIOException(getLocation(), e); } }",3f3f9b156a1ffba5628329c23461a95a3c205710,close(),close(),4,6,"@java.lang.Override public synchronized void close() throws com.android.jack.library.LibraryIOException { try { for (com.android.sched.vfs.InputVFS currentSectionVFS : sectionVFS.values()) { currentSectionVFS.close(); } vfs.close(); } catch (com.android.sched.util.file.CannotCloseException e) { throw new com.android.jack.library.LibraryIOException(getLocation(), e); } }",09c3bdf58fce3e52f1bfbbc5ae2c0f237f4001b3,close(),434839,113,98
117753,jack-tests_tests_com_android_jack_opcodes_OpcodesTests.java,107.0,"@org.junit.Test public void new_array() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(NEW_ARRAY).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",9aa671d5a2194546e9380f6f7f4cb1e952aa2de9,"@org.junit.Test public void new_array() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(NEW_ARRAY).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",bcaefff6a2b25be11b6b9ae2c4066364f4312d67,new_array(),new_array(),4,107,"@org.junit.Test public void new_array() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(NEW_ARRAY).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",17acf5e75393f0d3557971285129a94549a28e42,new_array(),418918,109,107
230812,ojluni_src_main_java_sun_nio_fs_UnixPath.java,,,,java.lang.String getPathForPermissionCheck() { if (getFileSystem().needToResolveAgainstDefaultDirectory()) { return new java.lang.String(getByteArrayForSysCalls()); } else { return toString(); } },473b798037936130f63df2f2f69732c5ec0a8732,,getPathForPermissionCheck(),8,13,java.lang.String getPathForPermissionCheck() { if (getFileSystem().needToResolveAgainstDefaultDirectory()) { return sun.nio.fs.Util.toString(getByteArrayForSysCalls()); } else { return toString(); } },3349a05f8798479a4acc26fc2aaeb703221f0810,getPathForPermissionCheck(),120263,47,50
162242,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_model_StandaloneNdkComponentModelPlugin.java,,,,"@org.gradle.model.Mutate public void createAssembleTasksForProductFlavors(org.gradle.model.ModelMap<org.gradle.api.Task> tasks, @org.gradle.model.Path(""android.productFlavors"") org.gradle.model.ModelMap<com.android.build.gradle.managed.ProductFlavor> flavors) { if (!(flavors.isEmpty())) { for (final org.gradle.api.Named productFlavor : flavors.values()) { com.android.build.gradle.model.StandaloneNdkComponentModelPlugin.Rules.createAssembleTask(tasks, productFlavor); com.android.build.gradle.model.StandaloneNdkComponentModelPlugin.Rules.dependsOn(tasks, ""assemble"", com.android.build.gradle.model.StandaloneNdkComponentModelPlugin.Rules.getAssembleTaskName(productFlavor)); } } }",b71aae7e609705598a6e92d96f1ca7f93ce7f74d,,"createAssembleTasksForProductFlavors(org.gradle.model.ModelMap,org.gradle.model.ModelMap)",5,17,"@org.gradle.model.Mutate public static void createAssembleTasksForProductFlavors(org.gradle.model.ModelMap<org.gradle.api.Task> tasks, @org.gradle.model.Path(""android.productFlavors"") org.gradle.model.ModelMap<com.android.build.gradle.managed.ProductFlavor> flavors) { if (!(flavors.isEmpty())) { for (final org.gradle.api.Named productFlavor : flavors.values()) { com.android.build.gradle.model.StandaloneNdkComponentModelPlugin.Rules.createAssembleTask(tasks, productFlavor); com.android.build.gradle.model.StandaloneNdkComponentModelPlugin.Rules.dependsOn(tasks, ""assemble"", com.android.build.gradle.model.StandaloneNdkComponentModelPlugin.Rules.getAssembleTaskName(productFlavor)); } } }",540735ff12d81faca090ad9cd7df1229b6dd5a45,"createAssembleTasksForProductFlavors(org.gradle.model.ModelMap,org.gradle.model.ModelMap)",161349,195,196
16154,hierarchyviewer2_app_src_com_android_hierarchyviewer_HierarchyViewerApplicationDirector.java,0.0,@java.lang.Override public void executeInBackground(final java.lang.Runnable task) { executor.execute(new java.lang.Runnable() { public void run() { task.run(); } }); },b70d2a9dd82a18234da6485ef44cb26c03ee8b97,"@java.lang.Override public void executeInBackground(final java.lang.Runnable task) { executor.execute(new java.lang.Runnable() { public void run() { java.lang.System.out.println(""STARTING TASK""); task.run(); java.lang.System.out.println(""ENDING TASK""); } }); }",e6988d95f5bdcfee3d1009a88e8c477c549ebfa0,executeInBackground(java.lang.Runnable),executeInBackground(java.lang.Runnable),5,0,@java.lang.Override public void executeInBackground(final java.lang.Runnable task) { executor.execute(new java.lang.Runnable() { public void run() { task.run(); } }); },b70d2a9dd82a18234da6485ef44cb26c03ee8b97,executeInBackground(java.lang.Runnable),443985,73,44
531103,src_com_android_bluetooth_hfp_HeadsetNativeInterface.java,,,,boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice device) { return stopVoiceRecognitionNative(com.android.bluetooth.Utils.getByteAddress(device)); },de0b974cc52cced98a23d0a1cbbab85561db9647,,stopVoiceRecognition(android.bluetooth.BluetoothDevice),10,24,@android.support.annotation.VisibleForTesting public boolean stopVoiceRecognition(android.bluetooth.BluetoothDevice device) { return stopVoiceRecognitionNative(com.android.bluetooth.Utils.getByteAddress(device)); },be3a1ba3dd6e2e22e9b9cd67b88055e648336178,stopVoiceRecognition(android.bluetooth.BluetoothDevice),386071,33,43
65505,lint_cli_src_test_java_com_android_tools_lint_client_api_ProjectTest.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testInvalidLibraryReferences2() throws java.lang.Exception { com.android.tools.lint.client.api.ProjectTest.TestClient client = new com.android.tools.lint.client.api.ProjectTest.TestClient(); java.io.File dir = new java.io.File(""bogus""); com.android.tools.lint.client.api.ProjectTest.TestProject project1 = new com.android.tools.lint.client.api.ProjectTest.TestProject(client, dir); client.registerProject(dir, project1); com.android.tools.lint.client.api.ProjectTest.TestProject project2 = new com.android.tools.lint.client.api.ProjectTest.TestProject(client, dir); client.registerProject(dir, project2); project2.setDirectLibraries(java.util.Collections.<com.android.tools.lint.detector.api.Project>singletonList(project1)); project1.setDirectLibraries(java.util.Collections.<com.android.tools.lint.detector.api.Project>singletonList(project2)); java.util.List<com.android.tools.lint.detector.api.Project> libraries = project1.getAllLibraries(); assertNotNull(libraries); assertEquals(""Warning: Internal lint error: encountered Project [dir=bogus] more than once"", client.getLoggedOutput()); }",ca0efef5aff6a8c1e387c87084ab7e9fd52d0679,,testInvalidLibraryReferences2(),2,7,"public void testInvalidLibraryReferences2() throws java.lang.Exception { com.android.tools.lint.client.api.ProjectTest.TestClient client = new com.android.tools.lint.client.api.ProjectTest.TestClient(); java.io.File dir1 = new java.io.File(""project1""); java.io.File dir2 = new java.io.File(""project2""); com.android.tools.lint.client.api.ProjectTest.TestProject project1 = new com.android.tools.lint.client.api.ProjectTest.TestProject(client, dir1); client.registerProject(dir1, project1); com.android.tools.lint.client.api.ProjectTest.TestProject project2 = new com.android.tools.lint.client.api.ProjectTest.TestProject(client, dir2); client.registerProject(dir2, project2); project2.setDirectLibraries(java.util.Collections.<com.android.tools.lint.detector.api.Project>singletonList(project1)); project1.setDirectLibraries(java.util.Collections.<com.android.tools.lint.detector.api.Project>singletonList(project2)); java.util.List<com.android.tools.lint.detector.api.Project> libraries = project1.getAllLibraries(); assertNotNull(libraries); assertEquals(""Warning: Internal lint error: cyclic library dependency for Project [dir=project1]"", client.getLoggedOutput()); assertEquals(1, libraries.size()); assertSame(project2, libraries.get(0)); assertEquals(1, project2.getAllLibraries().size()); assertSame(project1, project2.getAllLibraries().get(0)); }",88c455dc7292861e2e0d35900a1475fc8fcc2b36,testInvalidLibraryReferences2(),253949,309,360
570203,src_java_com_android_ims_ImsManager.java,26.0,"public void addRegistrationListener(com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { if (listener == null) { throw new java.lang.NullPointerException(""listener can't be null""); } synchronized(mHasRegisteredLock) { if (!(mHasRegisteredForProxy)) { try { checkAndThrowExceptionIfServiceUnavailable(); mImsServiceProxy.addRegistrationListener(mRegistrationListenerProxy); com.android.ims.ImsManager.log(""RegistrationListenerProxy registered.""); mHasRegisteredForProxy = true; } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException(""addRegistrationListener()"", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } } } synchronized(mRegistrationListeners) { com.android.ims.ImsManager.log((""Local registration listener added: "" + listener)); mRegistrationListeners.add(listener); } }",66870b6af95ae7086f1a5688d1c60d115e935295,public void addRegistrationListener(com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { addRegistrationCallback(listener); },3457077a0813fd34e620471aabe89ca5edf5d79d,addRegistrationListener(com.android.ims.ImsConnectionStateListener),addRegistrationListener(com.android.ims.ImsConnectionStateListener),14,28,"public void addRegistrationListener(com.android.ims.ImsConnectionStateListener listener) throws com.android.ims.ImsException { if (listener == null) { throw new java.lang.NullPointerException(""listener can't be null""); } synchronized(mHasRegisteredLock) { if (!(mHasRegisteredForProxy)) { try { checkAndThrowExceptionIfServiceUnavailable(); mImsServiceProxy.addRegistrationListener(mImsRegistrationListenerProxy); mImsServiceProxy.getRegistration().addRegistrationCallback(mRegistrationCallback); com.android.ims.ImsManager.log(""Registration Callback/Listener registered.""); mHasRegisteredForProxy = true; } catch (android.os.RemoteException e) { throw new com.android.ims.ImsException(""addRegistrationListener()"", e, ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } } } synchronized(mRegistrationListeners) { com.android.ims.ImsManager.log((""Local registration listener added: "" + listener)); mRegistrationListeners.add(listener); } }",8944719de69d348ad82fdc95fd56cf8c4915b47b,addRegistrationListener(com.android.ims.ImsConnectionStateListener),176895,39,235
178698,rs_java_android_renderscript_Allocation.java,85.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static android.renderscript.Allocation createFromAllcation(android.renderscript.RenderScript rs, android.renderscript.Allocation alloc) { try { android.os.Trace.traceBegin(RenderScript.TRACE_TAG, ""createFromAllcation""); rs.validate(); if ((alloc.getID(rs)) == 0) { throw new android.renderscript.RSInvalidStateException(""Bad input Allocation""); } android.renderscript.Type type = alloc.getType(); int usage = alloc.getUsage(); android.renderscript.Allocation.MipmapControl mips = alloc.getMipmap(); long id = rs.nAllocationCreateTyped(type.getID(rs), mips.mID, usage, 0); if (id == 0) { throw new android.renderscript.RSRuntimeException(""Allocation creation failed.""); } android.renderscript.Allocation outAlloc = new android.renderscript.Allocation(id, rs, type, usage); if ((usage & (android.renderscript.Allocation.USAGE_IO_INPUT)) != 0) { outAlloc.shareBufferQueue(alloc); } return outAlloc; } finally { android.os.Trace.traceEnd(RenderScript.TRACE_TAG); } }",5ed186e5fb1d9193c6bdb163eb57314c15de65e5,,"createFromAllcation(android.renderscript.RenderScript,android.renderscript.Allocation)",18,93,"static android.renderscript.Allocation createFromAllcation(android.renderscript.RenderScript rs, android.renderscript.Allocation alloc) { try { android.os.Trace.traceBegin(RenderScript.TRACE_TAG, ""createFromAllcation""); rs.validate(); if ((alloc.getID(rs)) == 0) { throw new android.renderscript.RSInvalidStateException(""Bad input Allocation""); } android.renderscript.Type type = alloc.getType(); int usage = alloc.getUsage(); android.renderscript.Allocation.MipmapControl mips = alloc.getMipmap(); long id = rs.nAllocationCreateTyped(type.getID(rs), mips.mID, usage, 0); if (id == 0) { throw new android.renderscript.RSRuntimeException(""Allocation creation failed.""); } android.renderscript.Allocation outAlloc = new android.renderscript.Allocation(id, rs, type, usage, mips); if ((usage & (android.renderscript.Allocation.USAGE_IO_INPUT)) != 0) { outAlloc.shareBufferQueue(alloc); } return outAlloc; } finally { android.os.Trace.traceEnd(RenderScript.TRACE_TAG); } }",9ed2aeb519ffad2455133cfc193ec1bca1de8522,"createFromAllcation(android.renderscript.RenderScript,android.renderscript.Allocation)",167658,260,262
87714,build-system_manifest-merger_src_main_java_com_android_manifmerger_PostValidator.java,,,,"private static boolean isNodeOperationPresent(com.android.manifmerger.XmlElement xmlElement, com.android.manifmerger.ActionRecorder actionRecorder, com.android.manifmerger.ActionRecorder.ActionType actionType) { com.android.manifmerger.ActionRecorder.DecisionTreeRecord decisionTreeRecord = actionRecorder.getAllRecords().get(xmlElement.getId()); for (com.android.manifmerger.ActionRecorder.NodeRecord nodeRecord : decisionTreeRecord.getNodeRecords()) { if ((nodeRecord.getActionType()) == actionType) { return true; } } return false; }",e150023e6077f2308263145f4994cc013044ddf0,,"isNodeOperationPresent(com.android.manifmerger.XmlElement,com.android.manifmerger.ActionRecorder,com.android.manifmerger.ActionRecorder$ActionType)",3,1,"private static boolean isNodeOperationPresent(com.android.manifmerger.XmlElement xmlElement, com.android.manifmerger.ActionRecorder recorder, com.android.manifmerger.ActionRecorder.ActionType action) { com.android.manifmerger.ActionRecorder.DecisionTreeRecord record = recorder.getAllRecords().get(xmlElement.getId()); for (com.android.manifmerger.ActionRecorder.NodeRecord nodeRecord : record.getNodeRecords()) { if ((nodeRecord.getActionType()) == action) { return true; } } return false; }",f2fe116416f647ce27a9afe2ee0cb994d4dd39ed,"isNodeOperationPresent(com.android.manifmerger.XmlElement,com.android.manifmerger.ActionRecorder,com.android.manifmerger.ActionRecorder$ActionType)",517229,136,128
99283,login_src_com_google_gct_login_ui_UsersListCellRenderer.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private javax.swing.JComponent createActiveTextDisplay(com.google.gct.login.ui.UsersListItem usersListItem) { javax.swing.JPanel mainPanel = new javax.swing.JPanel(); mainPanel.setLayout(new java.awt.GridBagLayout()); mainPanel.setBackground(ACTIVE_COLOR); mainPanel.setForeground(com.intellij.util.ui.UIUtil.getListSelectionForeground()); mainPanel.setPreferredSize(new java.awt.Dimension(200, 96)); javax.swing.JPanel bottomPanel = new javax.swing.JPanel(); bottomPanel.setLayout(new javax.swing.BoxLayout(bottomPanel, javax.swing.BoxLayout.PAGE_AXIS)); bottomPanel.setBackground(ACTIVE_COLOR); bottomPanel.setForeground(com.intellij.util.ui.UIUtil.getListSelectionForeground()); bottomPanel.setPreferredSize(new java.awt.Dimension(200, 40)); javax.swing.JLabel playLabel = new javax.swing.JLabel(""Open Play Developer Console""); playLabel.setFont(PLAIN_EMAIL_FONT); playLabel.setForeground(JBColor.BLUE); bottomPanel.add(playLabel, java.awt.Component.BOTTOM_ALIGNMENT); playLabel.setBorder(javax.swing.BorderFactory.createLineBorder(JBColor.GREEN)); javax.swing.JLabel cloudLabel = new javax.swing.JLabel(""Open Cloud Console""); cloudLabel.setFont(PLAIN_EMAIL_FONT); cloudLabel.setForeground(JBColor.BLUE); bottomPanel.add(cloudLabel, java.awt.Component.BOTTOM_ALIGNMENT); cloudLabel.setBorder(javax.swing.BorderFactory.createLineBorder(JBColor.BLACK)); java.awt.GridBagConstraints topConstraints = new java.awt.GridBagConstraints(); topConstraints.gridx = 0; topConstraints.gridy = 0; topConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST; java.awt.GridBagConstraints bottomConstraints = new java.awt.GridBagConstraints(); bottomConstraints.gridx = 0; bottomConstraints.gridy = 1; bottomConstraints.weightx = 1; bottomConstraints.weighty = 5; bottomConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST; javax.swing.JComponent topPanel = createTextDisplay(true, usersListItem); mainPanel.add(topPanel, topConstraints); mainPanel.add(bottomPanel, bottomConstraints); mainPanel.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.Color.black)); return mainPanel; }",85e5d0246ae3306617b6f5074f79cb7cd79a6682,,createActiveTextDisplay(com.google.gct.login.ui.UsersListItem),7,0,"private javax.swing.JComponent createActiveTextDisplay(com.google.gct.login.ui.UsersListItem usersListItem) { javax.swing.JPanel mainPanel = new javax.swing.JPanel(); mainPanel.setLayout(new java.awt.GridBagLayout()); mainPanel.setBackground(ACTIVE_COLOR); mainPanel.setForeground(com.intellij.util.ui.UIUtil.getListSelectionForeground()); mainPanel.setPreferredSize(new java.awt.Dimension(200, 96)); javax.swing.JPanel bottomPanel = new javax.swing.JPanel(); bottomPanel.setLayout(new javax.swing.BoxLayout(bottomPanel, javax.swing.BoxLayout.PAGE_AXIS)); bottomPanel.setBackground(ACTIVE_COLOR); bottomPanel.setForeground(com.intellij.util.ui.UIUtil.getListSelectionForeground()); bottomPanel.setPreferredSize(new java.awt.Dimension(200, 40)); javax.swing.JLabel playLabel = new javax.swing.JLabel(com.google.gct.login.ui.UsersListCellRenderer.PLAY_LABEL_TEXT); playLabel.setFont(GENERAL_FONT); playLabel.setForeground(JBColor.BLUE); playLabel.setPreferredSize(PLAY_LABEL_DIMENSION); bottomPanel.add(playLabel, java.awt.Component.BOTTOM_ALIGNMENT); javax.swing.JLabel cloudLabel = new javax.swing.JLabel(com.google.gct.login.ui.UsersListCellRenderer.CLOUD_LABEL_TEXT); cloudLabel.setFont(GENERAL_FONT); cloudLabel.setForeground(JBColor.BLUE); cloudLabel.setPreferredSize(CLOUD_LABEL_DIMENSION); bottomPanel.add(cloudLabel, java.awt.Component.BOTTOM_ALIGNMENT); java.awt.GridBagConstraints topConstraints = new java.awt.GridBagConstraints(); topConstraints.gridx = 0; topConstraints.gridy = 0; topConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST; java.awt.GridBagConstraints bottomConstraints = new java.awt.GridBagConstraints(); bottomConstraints.gridx = 0; bottomConstraints.gridy = 1; bottomConstraints.weightx = 1; bottomConstraints.weighty = 5; bottomConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST; javax.swing.JComponent topPanel = createTextDisplay(true, usersListItem); mainPanel.add(topPanel, topConstraints); mainPanel.add(bottomPanel, bottomConstraints); return mainPanel; }",c7da680ffb546550c2b748dd6624b442a7835a63,createActiveTextDisplay(com.google.gct.login.ui.UsersListItem),18953,500,488
245060,jack_src_com_android_jack_backend_dex_DexFileWriter.java,0.0,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) { com.android.sched.util.log.Tracer tracer = com.android.sched.util.log.TracerFactory.getTracer(); com.android.sched.util.log.Event event = tracer.start(JackEventType.DEX_MERGER); com.android.jack.backend.dex.DexWritingTool writingTool = com.android.sched.util.config.ThreadConfig.get(com.android.jack.backend.dex.DexFileWriter.DEX_WRITING_POLICY); try { writingTool.write(outputVDir); } catch (com.android.jack.backend.dex.DexWritingException e) { session.getReporter().report(Severity.FATAL, e); throw new com.android.jack.JackAbortException(e); } finally { event.end(); } }",f0cd68502a08e7e6752fb1b16c601ffcaa52239b,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) { com.android.sched.util.log.Event event = tracer.start(JackEventType.DEX_MERGER); com.android.jack.backend.dex.DexWritingTool writingTool = com.android.sched.util.config.ThreadConfig.get(com.android.jack.backend.dex.DexFileWriter.DEX_WRITING_POLICY); try { writingTool.write(outputVDir); } catch (com.android.jack.backend.dex.DexWritingException e) { session.getReporter().report(Severity.FATAL, e); throw new com.android.jack.JackAbortException(e); } finally { event.end(); } }",0ae804b5b2aadf12ea0efba352bad81c12f503ea,run(com.android.jack.ir.ast.JSession),run(com.android.jack.ir.ast.JSession),4,0,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) { com.android.sched.util.log.Tracer tracer = com.android.sched.util.log.TracerFactory.getTracer(); com.android.sched.util.log.Event event = tracer.start(JackEventType.DEX_MERGER); com.android.jack.backend.dex.DexWritingTool writingTool = com.android.sched.util.config.ThreadConfig.get(com.android.jack.backend.dex.DexFileWriter.DEX_WRITING_POLICY); try { writingTool.write(outputVDir); } catch (com.android.jack.backend.dex.DexWritingException e) { session.getReporter().report(Severity.FATAL, e); throw new com.android.jack.JackAbortException(e); } finally { event.end(); } }",f0cd68502a08e7e6752fb1b16c601ffcaa52239b,run(com.android.jack.ir.ast.JSession),466569,175,204
638539,services_net_java_android_net_ip_IpClient.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public android.net.LinkProperties waitForProvisioning() { synchronized(this) { try { wait(); } catch (java.lang.InterruptedException e) { } return mCallbackLinkProperties; } },1f153862762ae51fd87bf90c05273f79f3830837,,waitForProvisioning(),5,52,public android.net.LinkProperties waitForProvisioning() { mCV.block(); return mCallbackLinkProperties; },de55538091b6f2dbb7f9a87212a216274196f020,waitForProvisioning(),261135,41,23
16424,src_com_android_phone_BluetoothHandsfree.java,111.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void broadcastVendorSpecificEventIntent(java.lang.String command, java.lang.Object[] arguments, android.bluetooth.BluetoothDevice device) { if (com.android.phone.BluetoothHandsfree.VDBG) com.android.phone.BluetoothHandsfree.log(((""broadcastVendorSpecificEventIntent("" + command) + "")"")); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHeadset.ACTION_VENDOR_SPECIFIC_HEADSET_EVENT); intent.putExtra(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD, command); intent.putExtra(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS, arguments); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); mContext.sendBroadcast(intent, android.Manifest.permission.BLUETOOTH); }",6d3d35901338ee227cf4f55f5aa17ca41fdb165c,,"broadcastVendorSpecificEventIntent(java.lang.String,java.lang.Object[],android.bluetooth.BluetoothDevice)",5,83,"private void broadcastVendorSpecificEventIntent(java.lang.String command, int companyId, java.lang.Object[] arguments, android.bluetooth.BluetoothDevice device) { if (com.android.phone.BluetoothHandsfree.VDBG) com.android.phone.BluetoothHandsfree.log(((""broadcastVendorSpecificEventIntent("" + command) + "")"")); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHeadset.ACTION_VENDOR_SPECIFIC_HEADSET_EVENT); intent.putExtra(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD, command); intent.putExtra(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_COMPANY_ID, companyId); intent.putExtra(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS, arguments); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); mContext.sendBroadcast(intent, android.Manifest.permission.BLUETOOTH); }",b23d8a515991d1b6ce6dc0c91e396ba8a47d7380,"broadcastVendorSpecificEventIntent(java.lang.String,int,java.lang.Object[],android.bluetooth.BluetoothDevice)",109212,185,213
113692,build-system_builder_src_main_java_com_android_builder_core_ApkInfoParser.java,,,,"@com.android.annotations.VisibleForTesting static com.android.builder.core.ApkInfoParser.ApkInfo getApkInfo(java.util.List<java.lang.String> aaptOutput) { java.util.regex.Pattern p = java.util.regex.Pattern.compile(""^package: name='([^']+)' versionCode='([0-9]*)' versionName='([^']*)'.*$""); java.lang.String pkgName = null; java.lang.String versionCode = null; java.lang.String versionName = null; for (java.lang.String line : aaptOutput) { java.util.regex.Matcher m = p.matcher(line); if (m.matches()) { pkgName = m.group(1); versionCode = m.group(2); versionName = m.group(3); break; } } if (pkgName == null) { throw new java.lang.RuntimeException(""Failed to find apk information with aapt""); } return new com.android.builder.core.ApkInfoParser.ApkInfo(pkgName, java.lang.Integer.parseInt(versionCode), versionName); }",d5232fb339faf8e0d1ef536dd09f9f1fd4584748,,getApkInfo(java.util.List),4,3,"@com.android.annotations.VisibleForTesting @com.android.annotations.NonNull static com.android.builder.core.ApkInfoParser.ApkInfo getApkInfo(@com.android.annotations.NonNull java.util.List<java.lang.String> aaptOutput) { java.lang.String pkgName = null; java.lang.String versionCode = null; java.lang.String versionName = null; for (java.lang.String line : aaptOutput) { java.util.regex.Matcher m = com.android.builder.core.ApkInfoParser.PATTERN.matcher(line); if (m.matches()) { pkgName = m.group(1); versionCode = m.group(2); versionName = m.group(3); break; } } if (pkgName == null) { throw new java.lang.RuntimeException(""Failed to find apk information with aapt""); } return new com.android.builder.core.ApkInfoParser.ApkInfo(pkgName, java.lang.Integer.parseInt(versionCode), versionName); }",4e9e5844e1ea57e16ac21d2681c6d342d2cb8b28,getApkInfo(java.util.List),440871,246,224
118993,jack-tests_tests_com_android_jack_multidex_MultiDexTests.java,6.0,"@org.junit.Test public void legacyAppTest002b_withoutAnnotations() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder(""multidex/test002""); java.io.File out = com.android.jack.TestTools.createTempDir(""out"", """"); com.android.jack.Options app1Options = addCommonOptionsForMultiDex(new java.io.File(testFolder, ""config-001.jpp"")); app1Options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), ""minimal-multidex""); app1Options.addJayceImport(com.android.jack.multidex.MultiDexTests.library); com.android.jack.TestTools.compileSourceToDex(app1Options, testFolder, (((com.android.jack.TestTools.getDefaultBootclasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())), out, false); java.io.File outList = getListingOfDex(new java.io.File(out, ""classes.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-002-1.txt""), outList); java.io.File outList2 = getListingOfDex(new java.io.File(out, ""classes2.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-002-2.txt""), outList2); junit.framework.Assert.assertFalse(new java.io.File(out, ""classes3.dex"").exists()); return; }",db2082871761d2e9af4a2e29ed9cb008440fb239,"@org.junit.Test public void legacyAppTest002b_withoutAnnotations() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder(""multidex/test002""); java.io.File out = com.android.jack.TestTools.createTempDir(""out"", """"); com.android.jack.Options app1Options = addCommonOptionsForMultiDex(new java.io.File(testFolder, ""config-001.jpp"")); app1Options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), ""minimal-multidex""); app1Options.addJayceImport(com.android.jack.multidex.MultiDexTests.library); com.android.jack.TestTools.compileSourceToDex(app1Options, testFolder, (((com.android.jack.TestTools.getDefaultBootclasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())), out, false); java.lang.String outList = getListingOfDex(new java.io.File(out, ""classes.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-002-1.txt""), outList); java.lang.String outList2 = getListingOfDex(new java.io.File(out, ""classes2.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-002-2.txt""), outList2); junit.framework.Assert.assertFalse(new java.io.File(out, ""classes3.dex"").exists()); return; }",b272df0452a5778956ad61359181b9b030ae9bcd,legacyAppTest002b_withoutAnnotations(),legacyAppTest002b_withoutAnnotations(),4,6,"@org.junit.Test @org.junit.experimental.categories.Category(com.android.jack.test.category.SlowTests.class) public void legacyAppTest002b_withoutAnnotations() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder(""multidex/test002""); java.io.File out = com.android.jack.TestTools.createTempDir(""out"", """"); com.android.jack.Options app1Options = addCommonOptionsForMultiDex(new java.io.File(testFolder, ""config-001.jpp"")); app1Options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), ""minimal-multidex""); app1Options.addImportedLibrary(com.android.jack.multidex.MultiDexTests.library); com.android.jack.TestTools.compileSourceToDex(app1Options, testFolder, (((com.android.jack.TestTools.getDefaultClasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())), out, false); java.lang.String outList = getListingOfDex(new java.io.File(out, ""classes.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-002-1.txt""), outList); java.lang.String outList2 = getListingOfDex(new java.io.File(out, ""classes2.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-002-2.txt""), outList2); junit.framework.Assert.assertFalse(new java.io.File(out, ""classes3.dex"").exists()); return; }",cf57d67caaa8147e0d6a45c0390e10550a13456c,legacyAppTest002b_withoutAnnotations(),300004,386,409
55540,sdk-common_src_main_java_com_android_ide_common_res2_ResourceRepository.java,,,,"@com.android.annotations.NonNull public java.util.Map<com.android.resources.ResourceType, java.util.Map<java.lang.String, com.android.ide.common.rendering.api.ResourceValue>> getConfiguredResources(@com.android.annotations.NonNull com.android.ide.common.resources.configuration.FolderConfiguration referenceConfig) { return java.util.Collections.emptyMap(); }",51bc5fe109a6dadd5c104b4c983e81f206f8c428,,getConfiguredResources(com.android.ide.common.resources.configuration.FolderConfiguration),8,9,"@com.android.annotations.NonNull public java.util.Map<com.android.resources.ResourceType, java.util.Map<java.lang.String, com.android.ide.common.rendering.api.ResourceValue>> getConfiguredResources(@com.android.annotations.NonNull com.android.ide.common.resources.configuration.FolderConfiguration referenceConfig) { java.util.Map<com.android.resources.ResourceType, java.util.Map<java.lang.String, com.android.ide.common.rendering.api.ResourceValue>> map = com.google.common.collect.Maps.newEnumMap(com.android.resources.ResourceType.class); synchronized(mItems) { for (com.android.resources.ResourceType key : com.android.resources.ResourceType.values()) { map.put(key, getConfiguredResource(key, referenceConfig)); } } return map; }",9c586701bcc4b08c6c825006817e385515af11cf,getConfiguredResources(com.android.ide.common.resources.configuration.FolderConfiguration),454346,90,199
104053,luni_src_main_java_java_text_DateFormat.java,20.0,"public static final java.text.DateFormat getTimeInstance(int style, java.util.Locale locale) { java.text.DateFormat.checkTimeStyle(style); return new java.text.SimpleDateFormat(libcore.icu.LocaleData.get(locale).getTimeFormat(style), locale); }",cf4850581572ea0e2d7b7cebf895ad8bf91b8b7b,"public static final java.text.DateFormat getTimeInstance(int style, java.util.Locale locale) { java.text.DateFormat.checkTimeStyle(style); locale = libcore.icu.LocaleData.mapInvalidAndNullLocales(locale); return new java.text.SimpleDateFormat(libcore.icu.LocaleData.get(locale).getTimeFormat(style), locale); }",6f3e858abeb10f9c549a2c871ce07a36abd40f6f,"getTimeInstance(int,java.util.Locale)","getTimeInstance(int,java.util.Locale)",3,20,"public static final java.text.DateFormat getTimeInstance(int style, java.util.Locale locale) { java.text.DateFormat.checkTimeStyle(style); if (locale == null) { throw new java.lang.NullPointerException(""locale == null""); } return new java.text.SimpleDateFormat(libcore.icu.LocaleData.get(locale).getTimeFormat(style), locale); }",64af3d4f24f1ad1b7143aba1161cd65b8cbeb467,"getTimeInstance(int,java.util.Locale)",275875,81,84
15094,sdkmanager_libs_sdklib_src_com_android_sdklib_internal_export_MultiApkExportHelper.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private void writeMinorVersionProperties() { },53978c1fcd9e7fcbbf030df7a1ac3f1882f2caa2,,writeMinorVersionProperties(),3,12,"private void writeMinorVersionProperties() throws com.android.sdklib.internal.export.MultiApkExportHelper.ExportException { java.io.OutputStreamWriter writer = null; try { writer = new java.io.OutputStreamWriter(new java.io.FileOutputStream(new java.io.File(mExportProjectRoot, com.android.sdklib.internal.export.MultiApkExportHelper.FILE_MINOR_CODE))); writer.append((""# Minor version codes.\n"" + (((""# To create update to select APKs without updating the main versionCode\n"" + ""# edit this file and manually increase the minor version for the select\n"") + ""# build info.\n"") + ""# Format of the file is <buildinfo>:<minor>\n""))); writeValue(writer, com.android.sdklib.internal.export.MultiApkExportHelper.PROP_VERSIONCODE, mVersionCode); for (com.android.sdklib.internal.export.ApkData apk : mApkDataList) { writeValue(writer, java.lang.Integer.toString(apk.getBuildInfo()), apk.getMinorCode()); } writer.flush(); } catch (java.lang.Exception e) { throw new com.android.sdklib.internal.export.MultiApkExportHelper.ExportException(""Failed to write minor log"", e); } finally { try { if (writer != null) { writer.close(); } } catch (java.io.IOException e) { throw new com.android.sdklib.internal.export.MultiApkExportHelper.ExportException(""Failed to write minor log"", e); } } }",859c25b08d2d5124adfac8969d5cb3205515d979,writeMinorVersionProperties(),299762,9,354
44167,luni_src_test_java_org_apache_harmony_xnet_provider_jsse_NativeCryptoTest.java,61.0,"public void test_SSL_do_handshake_server_timeout() throws java.lang.Exception { final java.net.ServerSocket listener = new java.net.ServerSocket(0); try { org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.Hooks cHooks = new org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.Hooks(); org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.Hooks sHooks = new org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.ServerHooks(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.getServerPrivateKey(), org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.getServerCertificates()); java.util.concurrent.Future<org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.TestSSLHandshakeCallbacks> client = org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.handshake(listener, (-1), true, cHooks, null); java.util.concurrent.Future<org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.TestSSLHandshakeCallbacks> server = org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.handshake(listener, 1, false, sHooks, null); server.get(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.TIMEOUT_SECONDS, java.util.concurrent.TimeUnit.SECONDS); fail(); } catch (java.util.concurrent.ExecutionException expected) { assertEquals(java.net.SocketTimeoutException.class, expected.getCause().getClass()); } }",923ae4722de75b05e8d5cfa52a0ccde71c069916,"public void test_SSL_do_handshake_server_timeout() throws java.lang.Exception { final java.net.ServerSocket listener = new java.net.ServerSocket(0); try { org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.Hooks cHooks = new org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.Hooks(); org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.Hooks sHooks = new org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.ServerHooks(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.getServerPrivateKey(), org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.getServerCertificates()); java.util.concurrent.Future<org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.TestSSLHandshakeCallbacks> client = org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.handshake(listener, (-1), true, cHooks, null); java.util.concurrent.Future<org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.TestSSLHandshakeCallbacks> server = org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.handshake(listener, 1, false, sHooks, null); server.get(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.TIMEOUT_SECONDS, java.util.concurrent.TimeUnit.SECONDS); fail(); } catch (java.util.concurrent.ExecutionException expected) { assertEquals(java.net.SocketTimeoutException.class, expected.getCause().getClass()); } org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.assertNoErrors(); }",2d62220709f390a54e193df5d655bc9ceb44b858,test_SSL_do_handshake_server_timeout(),test_SSL_do_handshake_server_timeout(),3,62,"public void test_SSL_do_handshake_server_timeout() throws java.lang.Exception { final java.net.ServerSocket listener = new java.net.ServerSocket(0); try { org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.Hooks cHooks = new org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.Hooks(); org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.Hooks sHooks = new org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.ServerHooks(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.getServerPrivateKey(), org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.getServerCertificates()); java.util.concurrent.Future<org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.TestSSLHandshakeCallbacks> client = org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.handshake(listener, (-1), true, cHooks, null); java.util.concurrent.Future<org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.TestSSLHandshakeCallbacks> server = org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.handshake(listener, 1, false, sHooks, null); server.get(org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.TIMEOUT_SECONDS, java.util.concurrent.TimeUnit.SECONDS); fail(); } catch (java.util.concurrent.ExecutionException expected) { assertEquals(java.net.SocketTimeoutException.class, expected.getCause().getClass()); } }",923ae4722de75b05e8d5cfa52a0ccde71c069916,test_SSL_do_handshake_server_timeout(),183904,410,387
570202,telephony_java_android_telephony_ims_stub_ImsRegistrationImplBase.java,2.0,private void updateNewCallbackWithState(android.telephony.ims.internal.aidl.IImsRegistrationCallback c) throws android.os.RemoteException { int state; com.android.ims.ImsReasonInfo disconnectInfo; synchronized(mLock) { state = mRegistrationState; disconnectInfo = mLastDisconnectCause; } switch (state) { case android.telephony.ims.internal.stub.ImsRegistrationImplBase.REGISTRATION_STATE_NOT_REGISTERED : { c.onDeregistered(disconnectInfo); break; } case android.telephony.ims.internal.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERING : { c.onRegistering(getConnectionType()); break; } case android.telephony.ims.internal.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERED : { c.onRegistered(getConnectionType()); break; } } },9c7575137679938b9c5f96f87b5206443cb1a312,private void updateNewCallbackWithState(com.android.ims.internal.IImsRegistrationCallback c) throws android.os.RemoteException { int state; com.android.ims.ImsReasonInfo disconnectInfo; synchronized(mLock) { state = mRegistrationState; disconnectInfo = mLastDisconnectCause; } switch (state) { case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_NOT_REGISTERED : { c.onDeregistered(disconnectInfo); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERING : { c.onRegistering(getConnectionType()); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERED : { c.onRegistered(getConnectionType()); break; } } },3b0020aaf23f81eeae98f0ceba7b3414a971febe,updateNewCallbackWithState(android.telephony.ims.internal.aidl.IImsRegistrationCallback),updateNewCallbackWithState(com.android.ims.internal.IImsRegistrationCallback),12,7,private void updateNewCallbackWithState(com.android.ims.internal.IImsRegistrationCallback c) throws android.os.RemoteException { int state; com.android.ims.ImsReasonInfo disconnectInfo; synchronized(mLock) { state = mRegistrationState; disconnectInfo = mLastDisconnectCause; } switch (state) { case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_NOT_REGISTERED : { c.onDeregistered(disconnectInfo); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERING : { c.onRegistering(getConnectionType()); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_REGISTERED : { c.onRegistered(getConnectionType()); break; } case android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_STATE_UNKNOWN : { break; } } },ea866fddd643a129327f0173b8596944d50f8b38,updateNewCallbackWithState(com.android.ims.internal.IImsRegistrationCallback),294246,186,213
393733,core_java_android_net_ConnectivityManager.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void checkCallback(android.net.ConnectivityManager.NetworkCallback callback) { com.android.internal.util.Preconditions.checkArgument((callback != null), ""null NetworkCallback""); }",1e470cc3dfd460f217400633355b47a9cdefd198,,checkCallback(android.net.ConnectivityManager$NetworkCallback),8,60,"private static void checkCallbackNotNull(android.net.ConnectivityManager.NetworkCallback callback) { com.android.internal.util.Preconditions.checkNotNull(callback, ""null NetworkCallback""); }",4aa54f0daac01f477db51cf92c835a26ea853e6e,checkCallbackNotNull(android.net.ConnectivityManager$NetworkCallback),246782,42,40
207932,src_com_android_bluetooth_pbap_BluetoothPbapVcardManager.java,18.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.String getName(java.lang.String vcard) { java.lang.String[] lines = vcard.split(com.android.bluetooth.pbap.BluetoothPbapVcardManager.PropertySelector.SEPARATOR); java.lang.String name = """"; for (java.lang.String line : lines) { if ((!(java.lang.Character.isWhitespace(line.charAt(0)))) && (!(line.startsWith(""="")))) { if (line.startsWith(""N:"")) name = line.substring(line.lastIndexOf(':'), line.length()); } } android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, (""returning name: "" + name)); return name; }",f8225c855fc245e271bdde1026d5266d23181e09,,getName(java.lang.String),30,31,"private java.lang.String getName(java.lang.String vcard) { java.lang.String[] lines = vcard.split(com.android.bluetooth.pbap.BluetoothPbapVcardManager.PropertySelector.SEPARATOR); java.lang.String name = """"; for (java.lang.String line : lines) { if ((!(java.lang.Character.isWhitespace(line.charAt(0)))) && (!(line.startsWith(""="")))) { if (line.startsWith(""N:"")) name = line.substring(line.lastIndexOf(':'), line.length()); } } android.util.Log.d(com.android.bluetooth.pbap.BluetoothPbapVcardManager.TAG, (""returning name: "" + name)); return name; }",9211ffad4c57c4950fc262adb2e32c324aebcc44,getName(java.lang.String),296961,166,166
531103,src_com_android_bluetooth_hfp_HeadsetNativeInterface.java,,,,"boolean cindResponse(android.bluetooth.BluetoothDevice device, int service, int numActive, int numHeld, int callState, int signal, int roam, int batteryCharge) { return cindResponseNative(service, numActive, numHeld, callState, signal, roam, batteryCharge, com.android.bluetooth.Utils.getByteAddress(device)); }",7207c4e24876f7a8a831a4b1f84ba5e9ca784972,,"cindResponse(android.bluetooth.BluetoothDevice,int,int,int,int,int,int,int)",10,20,"@android.support.annotation.VisibleForTesting public boolean cindResponse(android.bluetooth.BluetoothDevice device, int service, int numActive, int numHeld, int callState, int signal, int roam, int batteryCharge) { return cindResponseNative(service, numActive, numHeld, callState, signal, roam, batteryCharge, com.android.bluetooth.Utils.getByteAddress(device)); }",984720288afc6a0c4f9acf0b0172d51fe4f6b987,"cindResponse(android.bluetooth.BluetoothDevice,int,int,int,int,int,int,int)",386080,82,92
129220,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_fixture_app_GradleModule.java,,,,public java.lang.String getPath() { return path; },87489c1c44bbfc99f94ad92e8512238b55b015d9,,getPath(),8,1,@com.android.annotations.NonNull public java.lang.String getGradlePath() { return gradlePath; },2b86d89fbaa5723e66f9a7b9ff3f683be4cc07c0,getGradlePath(),14606,14,24
35611,eclipse_plugins_com.android.ide.eclipse.monitor_src_com_android_ide_eclipse_monitor_MonitorStartup.java,2.0,"@java.lang.Override protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { com.android.sdkstats.SdkStatsService stats = new com.android.sdkstats.SdkStatsService(); java.lang.String toolsPath = new org.eclipse.core.runtime.Path(com.android.ide.eclipse.monitor.MonitorPlugin.getDefault().getSdkPath()).append(""tools"").toString(); com.android.ide.eclipse.monitor.MonitorStartup.ping(stats, toolsPath); return org.eclipse.core.runtime.Status.OK_STATUS; }",82b7878d23ab9a866132ecb57e702b1ea7b874e4,"@java.lang.Override protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { com.android.sdkstats.SdkStatsService stats = new com.android.sdkstats.SdkStatsService(); java.lang.String sdkPath = com.android.ide.eclipse.monitor.MonitorPlugin.getDefault().getSdkPath(); if (sdkPath == null) { return org.eclipse.core.runtime.Status.OK_STATUS; } java.lang.String toolsPath = new org.eclipse.core.runtime.Path(sdkPath).append(""tools"").toString(); com.android.ide.eclipse.monitor.MonitorStartup.ping(stats, toolsPath); return org.eclipse.core.runtime.Status.OK_STATUS; }",a57169c7f63c0ae6e1f9e8a04fe03efc93f1b4ca,run(org.eclipse.core.runtime.IProgressMonitor),run(org.eclipse.core.runtime.IProgressMonitor),2,2,"@java.lang.Override protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { com.android.sdkstats.SdkStatsService stats = new com.android.sdkstats.SdkStatsService(); java.lang.String sdkPath = com.android.ide.eclipse.monitor.MonitorPlugin.getDefault().getSdkPath(); if (sdkPath == null) { return org.eclipse.core.runtime.Status.OK_STATUS; } java.lang.String toolsPath = new org.eclipse.core.runtime.Path(sdkPath).append(SdkConstants.FD_TOOLS).toString(); com.android.ide.eclipse.monitor.MonitorStartup.ping(stats, toolsPath); return org.eclipse.core.runtime.Status.OK_STATUS; }",06d9818e8fdd4af4fcd1906425eb15add24e93b0,run(org.eclipse.core.runtime.IProgressMonitor),209121,170,176
278609,telecomm_java_android_telecom_Log.java,44.0,"public static void wtf(java.lang.String prefix, java.lang.Throwable tr, java.lang.String format, java.lang.Object... args) { android.util.Log.wtf(android.telecom.Log.TAG, android.telecom.Log.buildMessage(prefix, format, args), tr); }",a6697f8bdd3d9dc27a579ee6421c818f58ff4897,"public static void wtf(java.lang.String prefix, java.lang.Throwable tr, java.lang.String format, java.lang.Object... args) { android.telecom.Log.systemLogger.wtf(android.telecom.Log.TAG, android.telecom.Log.buildMessage(prefix, format, args), tr); }",f30abae2455912c01285b7f7819dee565ab4982d,"wtf(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[])","wtf(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[])",3,39,"public static void wtf(java.lang.String prefix, java.lang.Throwable tr, java.lang.String format, java.lang.Object... args) { android.util.Slog.wtf(android.telecom.Log.TAG, android.telecom.Log.buildMessage(prefix, format, args), tr); }",6db732ce402ac03ce4a0bc0525b367be4206de49,"wtf(java.lang.String,java.lang.Throwable,java.lang.String,java.lang.Object[])",122340,80,76
73670,harmony-tests_src_test_java_org_apache_harmony_tests_java_nio_channels_DatagramChannelTest.java,93.0,"public void testReadWrite_Block_WriterNotBind() throws java.lang.Exception { byte[] sourceArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; byte[] targetArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; for (int i = 0; i < (sourceArray.length); i++) { sourceArray[i] = ((byte) (i)); } this.channel1.connect(localAddr1); this.channel2.socket().bind(localAddr1); this.channel2.connect(localAddr2); java.nio.ByteBuffer sourceBuf = java.nio.ByteBuffer.wrap(sourceArray); assertEquals(org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL, this.channel1.write(sourceBuf)); java.nio.ByteBuffer targetBuf = java.nio.ByteBuffer.wrap(targetArray); closeBlockedReaderChannel2(targetBuf); }",95364e5902d1a60d78424083487590438d63ecd8,"public void testReadWrite_Block_WriterNotBind() throws java.lang.Exception { byte[] sourceArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; byte[] targetArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; for (int i = 0; i < (sourceArray.length); i++) { sourceArray[i] = ((byte) (i)); } this.channel1.connect(datagramSocket1Address); this.channel2.socket().bind(datagramSocket1Address); this.channel2.connect(datagramSocket2Address); java.nio.ByteBuffer sourceBuf = java.nio.ByteBuffer.wrap(sourceArray); assertEquals(org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL, this.channel1.write(sourceBuf)); java.nio.ByteBuffer targetBuf = java.nio.ByteBuffer.wrap(targetArray); closeBlockedReaderChannel2(targetBuf); }",542207fb1e594e8f53cd73d260692384ab5c3fd5,testReadWrite_Block_WriterNotBind(),testReadWrite_Block_WriterNotBind(),2,150,"public void testReadWrite_Block_WriterNotBound() throws java.lang.Exception { byte[] sourceArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; byte[] targetArray = new byte[org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL]; for (int i = 0; i < (sourceArray.length); i++) { sourceArray[i] = ((byte) (i)); } java.nio.channels.DatagramChannel dc = java.nio.channels.DatagramChannel.open(); dc.connect(channel1Address); java.nio.ByteBuffer sourceBuf = java.nio.ByteBuffer.wrap(sourceArray); assertEquals(org.apache.harmony.tests.java.nio.channels.DatagramChannelTest.CAPACITY_NORMAL, dc.write(sourceBuf)); channel2.connect(dc.socket().getLocalSocketAddress()); java.nio.ByteBuffer targetBuf = java.nio.ByteBuffer.wrap(targetArray); closeBlockedReaderChannel2(targetBuf); }",c7549d9f9d4a2d4584f90c0438d802eb7afccc6f,testReadWrite_Block_WriterNotBound(),95882,231,229
564188,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerAssistantStackTests.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void setUp() throws java.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStack assistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_DISPLAY = assistantStack.mDisplayId; disableAssistant(); }",4a11dfd3487af4c118be8962746e204349fa15b1,,setUp(),9,7,"public void setUp() throws java.lang.Exception { super.setUp(); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_INTO_STACK); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerState.ActivityStack assistantStack = mAmWmState.getAmState().getStackById(android.server.cts.ASSISTANT_STACK_ID); android.server.cts.ActivityManagerAssistantStackTests.mAssistantDisplayId = assistantStack.mDisplayId; disableAssistant(); }",388e0b9d81d118c589ffa424668c9cdf6924e783,setUp(),33757,171,170
390413,services_core_java_com_android_server_hdmi_RequestShortAudioDescriptorAction.java,,,,"private void resetShortAudioDescriptor() { java.lang.String audioParameter = ""set_ARC_format=""; java.lang.String keyValuePairs; byte[] buffer = new byte[2]; buffer[0] = ((byte) (0)); buffer[1] = ((byte) (mAvrPort)); keyValuePairs = audioParameter + (java.util.Arrays.toString(buffer)); tv().setAudioParameters(keyValuePairs); }",e0088c7ac77e87f6259a7a098400782272d7f476,,resetShortAudioDescriptor(),11,0,"private void resetShortAudioDescriptor() { java.lang.String audioParameter = ""set_ARC_format=""; java.lang.String keyValuePairs; byte[] buffer = new byte[2]; buffer[0] = ((byte) (0)); buffer[1] = ((byte) (mAvrPort)); keyValuePairs = audioParameter + (java.util.Arrays.toString(buffer)); mCallback.updateSAD(keyValuePairs, false); }",171ece211be51863f8cb72a2a296226b6329aff3,resetShortAudioDescriptor(),435425,90,93
277339,service_java_com_android_server_wifi_RttService.java,37.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void OnClientTorndownEvent(android.net.wifi.IClientInterface networkInterface) { if (networkInterface == (mClientInterface)) { mClientInterface = null; } },cd300c0a61cb9c9d65acd4ec62714e0a086a957a,,OnClientTorndownEvent(android.net.wifi.IClientInterface),7,0,"@java.lang.Override public void OnClientTorndownEvent(android.net.wifi.IClientInterface networkInterface) { mRttStateMachine.sendMessage(com.android.server.wifi.RttService.RttServiceImpl.CMD_CLIENT_INTERFACE_DOWN, networkInterface); }",5c5c2921bb272df1925a95ec453c5e8fdd605bbd,OnClientTorndownEvent(android.net.wifi.IClientInterface),209007,46,63
607159,src_com_android_bluetooth_hfp_HeadsetStateMachine.java,63.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override protected java.lang.String getLogRecString(android.os.Message msg) { if ((msg.what) == (com.android.bluetooth.hfp.HeadsetStateMachine.STACK_EVENT)) { com.android.bluetooth.hfp.HeadsetStackEvent event = ((com.android.bluetooth.hfp.HeadsetStackEvent) (msg.obj)); return ((com.android.bluetooth.hfp.HeadsetStateMachine.getMessageName(msg.what)) + "": "") + event; } else { return ((((com.android.bluetooth.hfp.HeadsetStateMachine.getMessageName(msg.what)) + "": arg1="") + (msg.arg1)) + "", arg2="") + (msg.arg2); } }",7d3006c21b4826d952fe92006adcf72e7cc656b6,,getLogRecString(android.os.Message),6,62,"@java.lang.Override protected java.lang.String getLogRecString(android.os.Message msg) { java.lang.StringBuilder builder = new java.lang.StringBuilder(); builder.append(com.android.bluetooth.hfp.HeadsetStateMachine.getMessageName(msg.what)); builder.append("": ""); builder.append(""arg1="").append(msg.arg1).append("", arg2="").append(msg.arg2).append("", obj=""); if ((msg.obj) instanceof com.android.bluetooth.hfp.HeadsetMessageObject) { com.android.bluetooth.hfp.HeadsetMessageObject object = ((com.android.bluetooth.hfp.HeadsetMessageObject) (msg.obj)); object.buildString(builder); } else { builder.append(msg.obj); } return builder.toString(); }",dac97017cd2448714f5ad3fffda30ae632324667,getLogRecString(android.os.Message),401555,172,182
91995,luni_src_main_java_libcore_io_BlockGuardOs.java,45.0,@java.lang.Override public libcore.io.StructStatVfs fstatvfs(java.io.FileDescriptor fd) throws libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onReadFromDisk(); return os.fstatvfs(fd); },6e59fd6714e97c022d929c41e8d877fb0b66b544,@java.lang.Override public android.os.StructStatVfs fstatvfs(java.io.FileDescriptor fd) throws android.os.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onReadFromDisk(); return os.fstatvfs(fd); },148fc0a4a124911aec3eaae5cdbb9164d3002794,fstatvfs(java.io.FileDescriptor),fstatvfs(java.io.FileDescriptor),3,45,@java.lang.Override public android.system.StructStatVfs fstatvfs(java.io.FileDescriptor fd) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onReadFromDisk(); return os.fstatvfs(fd); },f2ff91719883d78080ed8d5b227746bf5e60bf74,fstatvfs(java.io.FileDescriptor),170353,60,60
91995,luni_src_main_java_libcore_io_BlockGuardOs.java,14.0,"@java.lang.Override public java.io.FileDescriptor accept(java.io.FileDescriptor fd, java.net.InetSocketAddress peerAddress) throws java.net.SocketException, libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); return tagSocket(os.accept(fd, peerAddress)); }",74f7c33193d1fce988ba9aa160b767343de56600,"@java.lang.Override public java.io.FileDescriptor accept(java.io.FileDescriptor fd, java.net.InetSocketAddress peerAddress) throws android.os.ErrnoException, java.net.SocketException { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); return tagSocket(os.accept(fd, peerAddress)); }",83e8252abbdabd89de7c470d9447473466bf1672,"accept(java.io.FileDescriptor,java.net.InetSocketAddress)","accept(java.io.FileDescriptor,java.net.InetSocketAddress)",3,14,"@java.lang.Override public java.io.FileDescriptor accept(java.io.FileDescriptor fd, java.net.InetSocketAddress peerAddress) throws android.system.ErrnoException, java.net.SocketException { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); return tagSocket(os.accept(fd, peerAddress)); }",7dc25eab88fe0b97c7b23e99239c6762eac259d4,"accept(java.io.FileDescriptor,java.net.InetSocketAddress)",170357,74,74
215441,test_525-checker-arrays-and-fields_src_Main.java,69.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static void FalseCrossOverLoop3() { Main.sArrD[20] = -3; for (int i = 0; i < (Main.sArrJ.length); i++) { Main.sArrJ[i] = ((long) (Main.sArrD[20])); } },c7d1d5a3d521a5e55b9fd7f6667c2ccd6886d322,,FalseCrossOverLoop3(),2,17,private static void FalseCrossOverLoop3() { Main.sArrD[20] = -3; for (int i = 0; i < (Main.sArrJ.length); i++) { Main.sArrJ[i] = ((long) (Main.sArrD[20])) - 2; } },f22d4cb9c3d66a8b26aa2662d0e8d550b360a201,FalseCrossOverLoop3(),45849,65,67
450344,src_test_java_com_android_apksig_ApkVerifierTest.java,64.0,"@org.junit.Test public void testV1SignedAttrs() throws java.lang.Exception { com.android.apksig.ApkVerifierTest.assertVerified(verify(""v1-only-with-signed-attrs.apk"")); }",74829b91e2feb51aaf9090c8fb9053da2aae8684,"@org.junit.Test public void testV1SignedAttrs() throws java.lang.Exception { com.android.apksig.ApkVerifierTest.assertVerified(verify(""v1-only-with-signed-attrs.apk"")); com.android.apksig.ApkVerifierTest.assertVerified(verify(""v1-only-with-signed-attrs-signerInfo1-good-signerInfo2-good.apk"")); }",7d5f7ce20a561374ad7705bf05a67d7bdf7c663d,testV1SignedAttrs(),testV1SignedAttrs(),2,63,"@org.junit.Test public void testV1SignedAttrs() throws java.lang.Exception { java.lang.String apk = ""v1-only-with-signed-attrs.apk""; com.android.apksig.ApkVerifierTest.assertVerificationFailure(verifyForMinSdkVersion(apk, AndroidSdkVersion.JELLY_BEAN_MR2), Issue.JAR_SIG_VERIFY_EXCEPTION); com.android.apksig.ApkVerifierTest.assertVerified(verifyForMinSdkVersion(apk, AndroidSdkVersion.KITKAT)); apk = ""v1-only-with-signed-attrs-signerInfo1-good-signerInfo2-good.apk""; com.android.apksig.ApkVerifierTest.assertVerificationFailure(verifyForMinSdkVersion(apk, AndroidSdkVersion.JELLY_BEAN_MR2), Issue.JAR_SIG_VERIFY_EXCEPTION); com.android.apksig.ApkVerifierTest.assertVerified(verifyForMinSdkVersion(apk, AndroidSdkVersion.KITKAT)); }",7baed37970f4e86e88c6607edcbde35cbeea695f,testV1SignedAttrs(),163610,88,223
89051,luni_src_test_java_libcore_java_lang_LongTest.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test_DecodeLong() throws java.lang.Exception { assertEquals(0, java.lang.Long.decode(""+0"").intValue()); assertEquals(473, java.lang.Long.decode(""+473"").intValue()); assertEquals(255, java.lang.Long.decode(""+0xFF"").intValue()); assertEquals(16, java.lang.Long.decode(""+020"").intValue()); assertEquals(2147483647, java.lang.Long.decode(""+2147483647"").intValue()); try { java.lang.Long.decode(""--1""); fail(); } catch (java.lang.NumberFormatException e) { } try { java.lang.Long.decode(""++1""); fail(); } catch (java.lang.NumberFormatException e) { } try { java.lang.Long.decode(""Kona""); fail(); } catch (java.lang.NumberFormatException e) { } }",a158f569d1cec603bc21893444cb64fd9451c550,,test_DecodeLong(),9,5,"public void testDecodeLong() throws java.lang.Exception { assertEquals(0, java.lang.Long.decode(""+0"").longValue()); assertEquals(473, java.lang.Long.decode(""+473"").longValue()); assertEquals(255, java.lang.Long.decode(""+0xFF"").longValue()); assertEquals(16, java.lang.Long.decode(""+020"").longValue()); assertEquals(java.lang.Long.MAX_VALUE, java.lang.Long.decode((""+"" + (java.lang.Long.MAX_VALUE))).longValue()); assertEquals((-73), java.lang.Long.decode(""-73"").longValue()); assertEquals((-255), java.lang.Long.decode(""-0xFF"").longValue()); assertEquals(255, java.lang.Long.decode(""+#FF"").longValue()); assertEquals((-255), java.lang.Long.decode(""-#FF"").longValue()); try { java.lang.Long.decode(""--1""); fail(); } catch (java.lang.NumberFormatException expected) { } try { java.lang.Long.decode(""++1""); fail(); } catch (java.lang.NumberFormatException expected) { } try { java.lang.Long.decode(""+-1""); fail(); } catch (java.lang.NumberFormatException expected) { } try { java.lang.Long.decode(""Kona""); fail(); } catch (java.lang.NumberFormatException expected) { } }",d260813967b81239bc0b88172a8a1374402e7b44,testDecodeLong(),345966,175,295
81416,tests_tests_renderscript_src_android_renderscript_cts_TestRadians.java,,,,public void testRadians() { checkRadiansFloat(); checkRadiansFloat2(); checkRadiansFloat3(); checkRadiansFloat4(); },d2118a49fac91b013083885efab12092a71cafbd,,testRadians(),9,8,public void testRadians() { checkRadiansFloatFloat(); checkRadiansFloat2Float2(); checkRadiansFloat3Float3(); checkRadiansFloat4Float4(); },5c5b8453513626d18610559a32a517e896e67567,testRadians(),143106,26,33
181901,apps_CtsVerifier_src_com_android_cts_verifier_jobscheduler_IdleConstraintTestActivity.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override protected void onResume() { super.onResume(); if ((mTestState) == (com.android.cts.verifier.jobscheduler.IdleConstraintTestActivity.IDLE_ON_TEST_STATE_NOT_STARTED)) { mStartButton.setEnabled(true); mContinueInstructionTextView.setVisibility(View.GONE); } },527f20ee214c2654683477dc60ceb9d4d01eae5c,,onResume(),2,3,@java.lang.Override protected void onResume() { super.onResume(); if ((mTestState) == (com.android.cts.verifier.jobscheduler.IdleConstraintTestActivity.IDLE_ON_TEST_STATE_NOT_IN_PROGRESS)) { mStartButton.setEnabled(true); mContinueInstructionTextView.setVisibility(View.GONE); } },e1f5a62eb62a85fcda2b135eb2eb46cd4ee74334,onResume(),273541,75,77
112562,jack_tests_com_android_jack_multidex_MultiDexTests.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void legacyAppTest002c() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder(""multidex/test002""); java.io.File out = com.android.jack.TestTools.createTempDir(""out"", """"); com.android.jack.Options app1Options = createCommonOptionsForMultiDex(new java.io.File(testFolder, ""config-001.jpp"")); app1Options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), ""multidex""); com.android.jack.TestTools.compileSourceToDex(app1Options, testFolder, (((((com.android.jack.TestTools.getDefaultBootclasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.library.getPath())), out, false); java.io.File classesDex = new java.io.File(out, ""classes.dex""); junit.framework.Assert.assertTrue(classesDex.exists()); java.io.File classes2Dex = new java.io.File(out, ""classes2.dex""); junit.framework.Assert.assertTrue(classes2Dex.exists()); java.io.File classes3Dex = new java.io.File(out, ""classes3.dex""); junit.framework.Assert.assertFalse(classes3Dex.exists()); int totalTypeNumber = (getTypeCountInDex(classesDex)) + (getTypeCountInDex(classes2Dex)); junit.framework.Assert.assertEquals(100, totalTypeNumber); return; }",cba824a53679438c0f36087f61254d9d503265c3,,legacyAppTest002c(),3,5,"@org.junit.Test public void legacyAppTest002a_withoutAnnotations() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder(""multidex/test002""); java.io.File out = com.android.jack.TestTools.createTempDir(""out"", """"); com.android.jack.Options app1Options = createCommonOptionsForMultiDex(new java.io.File(testFolder, ""config-001.jpp"")); app1Options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), ""multidex""); com.android.jack.TestTools.compileSourceToDex(app1Options, testFolder, (((((com.android.jack.TestTools.getDefaultBootclasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.library.getPath())), out, false); java.io.File classesDex = new java.io.File(out, ""classes.dex""); junit.framework.Assert.assertTrue(classesDex.exists()); java.io.File classes2Dex = new java.io.File(out, ""classes2.dex""); junit.framework.Assert.assertTrue(classes2Dex.exists()); java.io.File classes3Dex = new java.io.File(out, ""classes3.dex""); junit.framework.Assert.assertFalse(classes3Dex.exists()); int totalTypeNumber = (getTypeCountInDex(classesDex)) + (getTypeCountInDex(classes2Dex)); junit.framework.Assert.assertEquals(100, totalTypeNumber); return; }",67e8adbd46dceda4e645801ed8fd927699df247b,legacyAppTest002a_withoutAnnotations(),151049,377,380
155011,jill_src_com_android_jill_api_impl_JillProviderImpl.java,9.0,@java.lang.Override @javax.annotation.Nonnull public java.lang.String getTranslatorVersion() { return com.android.jill.Jill.getVersion().getVersion(); },3ef943646e064fb20c525d6e10b1c450483d59c8,@java.lang.Override @javax.annotation.Nonnull public java.lang.String getTranslatorVersion() { return com.android.jill.Jill.getVersion().getVersionName(); },79584db07ed8718663b3ea715cefc0d0fe720cab,getTranslatorVersion(),getTranslatorVersion(),6,9,@java.lang.Override @javax.annotation.Nonnull public java.lang.String getTranslatorVersion() { return com.android.jill.Jill.getVersion().getVersion(); },3ef943646e064fb20c525d6e10b1c450483d59c8,getTranslatorVersion(),325537,42,41
352901,src_java_com_android_internal_telephony_PhoneInternalInterface.java,7.0,com.android.internal.telephony.DataState getDataConnectionState(java.lang.String apnType);,57d6d22bcdca6428c44ed0eb283875160722f1e8,com.android.internal.telephony.PhoneConstants.DataState getDataConnectionState(java.lang.String apnType);,ee8196df444ec9f9ea881a082a3a50008f8fadea,getDataConnectionState(java.lang.String),getDataConnectionState(java.lang.String),4,7,com.android.internal.telephony.DataState getDataConnectionState(java.lang.String apnType);,57d6d22bcdca6428c44ed0eb283875160722f1e8,getDataConnectionState(java.lang.String),323818,26,23
291907,jack_src_com_android_jack_shrob_obfuscation_MethodInHierarchyFinder.java,2.0,@java.lang.Override public boolean doAction(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) { com.android.jack.shrob.obfuscation.NewMethodSignatureMarker marker = type.getMarker(com.android.jack.shrob.obfuscation.NewMethodSignatureMarker.class); if ((marker != null) && (marker.getNewNames().contains(methodKey))) { hasFoundMethodId = true; return false; } for (com.android.jack.ir.ast.JMethod sameEnclosingTypeMethod : type.getMethods()) { com.android.jack.ir.ast.JMethodIdWide id = sameEnclosingTypeMethod.getMethodId().getMethodIdWide(); if ((id.canBeVirtual()) && (!(com.android.jack.shrob.obfuscation.Renamer.mustBeRenamed(id)))) { if (com.android.jack.shrob.obfuscation.Renamer.getKey(id).equals(methodKey)) { hasFoundMethodId = true; return false; } } } return true; },a0e1a4206300fde326132bcb1329f3e830ab69fa,@java.lang.Override public boolean doAction(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) { com.android.jack.shrob.obfuscation.NewMethodKeyMarker marker = type.getMarker(com.android.jack.shrob.obfuscation.NewMethodKeyMarker.class); if ((marker != null) && (marker.getNewKeys().contains(methodKey))) { hasFoundMethodId = true; return false; } for (com.android.jack.ir.ast.JMethod sameEnclosingTypeMethod : type.getMethods()) { com.android.jack.ir.ast.JMethodIdWide id = sameEnclosingTypeMethod.getMethodId().getMethodIdWide(); if ((id.canBeVirtual()) && (!(com.android.jack.shrob.obfuscation.Renamer.mustBeRenamed(id)))) { if (com.android.jack.shrob.obfuscation.Renamer.getKey(id).equals(methodKey)) { hasFoundMethodId = true; return false; } } } return true; },21528ea767ec41ea9f7a52b5f2443c149fe19417,doAction(com.android.jack.ir.ast.JDefinedClassOrInterface),doAction(com.android.jack.ir.ast.JDefinedClassOrInterface),10,2,@java.lang.Override public boolean doAction(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) { com.android.jack.shrob.obfuscation.NewMethodKeyMarker marker = type.getMarker(com.android.jack.shrob.obfuscation.NewMethodKeyMarker.class); if ((marker != null) && (marker.getNewKeys().contains(methodKey))) { hasFoundMethodId = true; return false; } for (com.android.jack.ir.ast.JMethod sameEnclosingTypeMethod : type.getMethods()) { com.android.jack.ir.ast.JMethodIdWide id = sameEnclosingTypeMethod.getMethodId().getMethodIdWide(); if ((id.canBeVirtual()) && (!(com.android.jack.shrob.obfuscation.Renamer.mustBeRenamed(id)))) { if (com.android.jack.shrob.obfuscation.key.Key.getKey(id).equals(methodKey)) { hasFoundMethodId = true; return false; } } } return true; },c0dfebdf60b0270f55f3655b8ed08f859d89a040,doAction(com.android.jack.ir.ast.JDefinedClassOrInterface),5262,248,249
18424,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_sdk_AndroidTargetParser.java,5.0,"private com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData.LayoutBridge loadLayoutBridge() { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData.LayoutBridge layoutBridge = new com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData.LayoutBridge(); try { java.io.File f = new java.io.File(mAndroidTarget.getPath(IAndroidTarget.LAYOUT_LIB)); if ((f.isFile()) == false) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, ""layoutlib.jar is missing!""); } else { java.net.URI uri = f.toURI(); java.net.URL url = uri.toURL(); layoutBridge.classLoader = new java.net.URLClassLoader(new java.net.URL[]{ url }, this.getClass().getClassLoader()); java.lang.Class<?> clazz = layoutBridge.classLoader.loadClass(AndroidConstants.CLASS_BRIDGE); if (clazz != null) { java.lang.reflect.Constructor<?> constructor = clazz.getConstructor(); if (constructor != null) { java.lang.Object bridge = constructor.newInstance(); if (bridge instanceof com.android.layoutlib.api.ILayoutBridge) { layoutBridge.bridge = ((com.android.layoutlib.api.ILayoutBridge) (bridge)); } } } if ((layoutBridge.bridge) == null) { layoutBridge.status = LoadStatus.FAILED; com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, (""Failed to load "" + (com.android.ide.eclipse.adt.AndroidConstants.CLASS_BRIDGE))); } else { try { layoutBridge.apiLevel = layoutBridge.bridge.getApiLevel(); } catch (java.lang.AbstractMethodError e) { layoutBridge.apiLevel = 1; } layoutBridge.status = LoadStatus.LOADED; } } } catch (java.lang.Throwable t) { layoutBridge.status = LoadStatus.FAILED; com.android.ide.eclipse.adt.AdtPlugin.log(t, ""Failed to load the LayoutLib""); } return layoutBridge; }",9a51640b698e646cb3776ad647f76c53ccddf68a,"private com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData.LayoutBridge loadLayoutBridge() { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData.LayoutBridge layoutBridge = new com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData.LayoutBridge(); try { java.io.File f = new java.io.File(mAndroidTarget.getPath(IAndroidTarget.LAYOUT_LIB)); if ((f.isFile()) == false) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, ""layoutlib.jar is missing!""); } else { java.net.URI uri = f.toURI(); uri.toURL(); layoutBridge.classLoader = com.android.ide.eclipse.adt.AdtPlugin.getLayoutLoader(mAndroidTarget); java.lang.Class<?> clazz = layoutBridge.classLoader.loadClass(AndroidConstants.CLASS_BRIDGE); if (clazz != null) { java.lang.reflect.Constructor<?> constructor = clazz.getConstructor(); if (constructor != null) { java.lang.Object bridge = constructor.newInstance(); if (bridge instanceof com.android.layoutlib.api.ILayoutBridge) { layoutBridge.bridge = ((com.android.layoutlib.api.ILayoutBridge) (bridge)); } } } if ((layoutBridge.bridge) == null) { layoutBridge.status = LoadStatus.FAILED; com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, (""Failed to load "" + (com.android.ide.eclipse.adt.AndroidConstants.CLASS_BRIDGE))); } else { try { layoutBridge.apiLevel = layoutBridge.bridge.getApiLevel(); } catch (java.lang.AbstractMethodError e) { layoutBridge.apiLevel = 1; } layoutBridge.status = LoadStatus.LOADED; } } } catch (java.lang.Throwable t) { layoutBridge.status = LoadStatus.FAILED; com.android.ide.eclipse.adt.AdtPlugin.log(t, ""Failed to load the LayoutLib""); } return layoutBridge; }",4bdf1f5922e50f04842a2e5508a1522c677c3690,loadLayoutBridge(),loadLayoutBridge(),11,5,"private com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData.LayoutBridge loadLayoutBridge() { com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData.LayoutBridge layoutBridge = new com.android.ide.eclipse.adt.internal.sdk.AndroidTargetData.LayoutBridge(); try { java.io.File f = new java.io.File(mAndroidTarget.getPath(IAndroidTarget.LAYOUT_LIB)); if ((f.isFile()) == false) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, ""layoutlib.jar is missing!""); } else { java.net.URI uri = f.toURI(); java.net.URL url = uri.toURL(); layoutBridge.classLoader = new java.net.URLClassLoader(new java.net.URL[]{ url }, this.getClass().getClassLoader()); java.lang.Class<?> clazz = layoutBridge.classLoader.loadClass(AndroidConstants.CLASS_BRIDGE); if (clazz != null) { java.lang.reflect.Constructor<?> constructor = clazz.getConstructor(); if (constructor != null) { java.lang.Object bridge = constructor.newInstance(); if (bridge instanceof com.android.layoutlib.api.ILayoutBridge) { layoutBridge.bridge = ((com.android.layoutlib.api.ILayoutBridge) (bridge)); } } } if ((layoutBridge.bridge) == null) { layoutBridge.status = LoadStatus.FAILED; com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, (""Failed to load "" + (com.android.ide.eclipse.adt.AndroidConstants.CLASS_BRIDGE))); } else { try { layoutBridge.apiLevel = layoutBridge.bridge.getApiLevel(); } catch (java.lang.AbstractMethodError e) { layoutBridge.apiLevel = 1; } layoutBridge.status = LoadStatus.LOADED; } } } catch (java.lang.Throwable t) { layoutBridge.status = LoadStatus.FAILED; com.android.ide.eclipse.adt.AdtPlugin.log(t, ""Failed to load the LayoutLib""); } return layoutBridge; }",9a51640b698e646cb3776ad647f76c53ccddf68a,loadLayoutBridge(),192297,477,485
49623,ddmlib_src_main_java_com_android_ddmlib_HandleViewDebug.java,,,,"public static void requestLayout(com.android.ddmlib.Client client, java.lang.String viewRoot, java.lang.String view) throws java.io.IOException { com.android.ddmlib.HandleViewDebug.sendJdwpPacket(client, com.android.ddmlib.HandleViewDebug.CHUNK_VULT, viewRoot, view, null); }",e88b24f53c22b68c5e7c2432ff0838519ea97534,,"requestLayout(com.android.ddmlib.Client,java.lang.String,java.lang.String)",6,9,"public static void requestLayout(@com.android.annotations.NonNull com.android.ddmlib.Client client, @com.android.annotations.NonNull java.lang.String viewRoot, @com.android.annotations.NonNull java.lang.String view) throws java.io.IOException { com.android.ddmlib.HandleViewDebug.sendViewOpPacket(client, com.android.ddmlib.HandleViewDebug.VUOP_LAYOUT_VIEW, viewRoot, view, null); }",2ccfdacf19ec849662dea49ab764e5ee1c66b78f,"requestLayout(com.android.ddmlib.Client,java.lang.String,java.lang.String)",49852,85,109
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,52.0,"public void testAesCbcHmacSha256Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",9d574c51d43958f3377505897f32ddc845055711,"public void testAesCbcHmacSha256Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",96ec7047a4ef14a111a298c214b9291f7ba1335d,testAesCbcHmacSha256Udp4(),testAesCbcHmacSha256Udp4(),9,58,"public void testAesCbcHmacSha256Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, android.net.cts.IpSecManagerTest.getKey(256), 128); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",703a868bf7e15f98213bbac145dad1d0b96df61f,testAesCbcHmacSha256Udp4(),1905,213,213
181957,jack-tests_src_com_android_jack_test_toolchain_JackCliToolchain.java,14.0,"@java.lang.Override public void srcToLib(@javax.annotation.Nonnull java.io.File out, boolean zipFiles, @javax.annotation.Nonnull java.io.File... sources) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); srcToCommon(args, sources); if (zipFiles) { args.add(""--output-jack""); } else { args.add(""--output-jack-dir""); } args.add(out.getAbsolutePath()); com.android.jack.test.toolchain.AbstractTestTools.addFile(args, false, sources); com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(errRedirectStream); exec.setOut(outRedirectStream); exec.setVerbose(isVerbose); try { if ((exec.run()) != 0) { throw new java.lang.RuntimeException(""Jack compiler exited with an error""); } } catch (com.android.jack.test.util.ExecFileException e) { throw new java.lang.RuntimeException(""An error occurred while running Jack"", e); } }",7228dc4de03377b5d121abe35dac913c03a33317,"@java.lang.Override public void srcToLib(@javax.annotation.Nonnull java.io.File out, boolean zipFiles, @javax.annotation.Nonnull java.io.File... sources) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); setOutputJack(out, zipFiles); srcToCommon(args, sources); com.android.jack.test.toolchain.AbstractTestTools.addFile(args, false, sources); com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(errRedirectStream); exec.setOut(outRedirectStream); exec.setVerbose(isVerbose); try { if ((exec.run()) != 0) { throw new java.lang.RuntimeException(""Jack compiler exited with an error""); } } catch (com.android.jack.test.util.ExecFileException e) { throw new java.lang.RuntimeException(""An error occurred while running Jack"", e); } }",c90e5b58207ecc3150c75ac56eadac7a18f8ccb2,"srcToLib(java.io.File,boolean,java.io.File[])","srcToLib(java.io.File,boolean,java.io.File[])",5,18,"@java.lang.Override public void srcToLib(@javax.annotation.Nonnull java.io.File out, boolean zipFiles, @javax.annotation.Nonnull java.io.File... sources) throws java.lang.Exception { java.util.List<java.lang.String> commandLine = new java.util.ArrayList<java.lang.String>(); setOutputJack(out, zipFiles); srcToCommon(commandLine, sources); com.android.jack.test.toolchain.AbstractTestTools.addFile(commandLine, false, sources); run(commandLine); }",7c07198212d77ac70d7e59f10844785f1840bd92,"srcToLib(java.io.File,boolean,java.io.File[])",318454,250,121
71081,core_java_android_net_LinkProperties.java,26.0,public boolean addLinkAddress(android.net.LinkAddress address) { if ((address != null) && (!(mLinkAddresses.contains(address)))) { mLinkAddresses.add(address); return true; } return false; },88f9e49b58185c38a0e506c912bea46e759c443f,"public boolean addLinkAddress(android.net.LinkAddress address) { if (address == null) { return false; } int i = findLinkAddressIndex(address); if (i >= 0) { mLinkAddresses.set(i, address); return false; } else { mLinkAddresses.add(address); return true; } }",9842006c9385013f2be2d5ed9088a68f89148ffc,addLinkAddress(android.net.LinkAddress),addLinkAddress(android.net.LinkAddress),14,26,"public boolean addLinkAddress(android.net.LinkAddress address) { if (address == null) { return false; } int i = findLinkAddressIndex(address); if (i < 0) { mLinkAddresses.add(address); return true; } else if (mLinkAddresses.get(i).equals(address)) { return false; } else { mLinkAddresses.set(i, address); return true; } }",a5636baa974b31e63c6076c063b67d3022280914,addLinkAddress(android.net.LinkAddress),112984,71,91
174892,jack-tests_tests_com_android_jack_java8_GwtTest.java,,,,"@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testSuperThisRefsInDefenderMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_37).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",036800c1169576dc0598026ca538938e0f669950,,testSuperThisRefsInDefenderMethod(),7,9,"@org.junit.Test public void testSuperThisRefsInDefenderMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_37).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",d1049ba95af4f69ed262f57736a9559481828e2b,testSuperThisRefsInDefenderMethod(),261339,108,95
623704,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void connectHfpDevice(android.bluetooth.BluetoothDevice device) { org.junit.Assert.assertTrue(mHeadsetService.connect(device)); verify(mObjectsFactory).makeStateMachine(device, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); verify(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectHfp(device); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mHeadsetService.getConnectionState(device)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(device), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTING })); com.android.bluetooth.hfp.HeadsetStackEvent connectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_SLC_CONNECTED, device); mHeadsetService.messageFromNative(connectedEvent); try { java.lang.Thread.sleep(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS); } catch (java.lang.InterruptedException exception) { org.junit.Assert.fail((""Interrupted while waiting for callback for "" + device)); } org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, mHeadsetService.getConnectionState(device)); org.junit.Assert.assertThat(mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTED }), org.hamcrest.CoreMatchers.hasItem(device)); org.junit.Assert.assertEquals(device, mHeadsetService.getActiveDevice()); }",7e4c59e05eefc8a52a3234c575082263ae1b1c21,,connectHfpDevice(android.bluetooth.BluetoothDevice),36,3,"private void connectTestDevice(android.bluetooth.BluetoothDevice device) { mBondedDevices.add(device); com.android.bluetooth.hfp.HeadsetStackEvent rfcommConnectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_CONNECTED, device); mHeadsetService.messageFromNative(rfcommConnectedEvent); verify(mObjectsFactory).makeStateMachine(device, mHeadsetService.getStateMachinesThreadLooper(), mHeadsetService, mAdapterService, mNativeInterface, mSystemInterface); waitAndVerifyConnectionStateIntent(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS, device, BluetoothProfile.STATE_CONNECTING, BluetoothProfile.STATE_DISCONNECTED); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTING, mHeadsetService.getConnectionState(device)); org.junit.Assert.assertEquals(java.util.Collections.singletonList(device), mHeadsetService.getDevicesMatchingConnectionStates(new int[]{ android.bluetooth.BluetoothProfile.STATE_CONNECTING })); com.android.bluetooth.hfp.HeadsetStackEvent slcConnectedEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED, HeadsetHalConstants.CONNECTION_STATE_SLC_CONNECTED, device); mHeadsetService.messageFromNative(slcConnectedEvent); waitAndVerifyConnectionStateIntent(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS, device, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_CONNECTING); org.junit.Assert.assertEquals(BluetoothProfile.STATE_CONNECTED, mHeadsetService.getConnectionState(device)); }",7f759c90f7df1811b19e0f2c9441fb57efe1ce53,connectTestDevice(android.bluetooth.BluetoothDevice),10675,411,411
14617,apkbuilder_src_com_android_apkbuilder_internal_ApkBuilderImpl.java,0.0,"public static void processJar(java.io.File file, java.util.Collection<java.io.FileInputStream> resourcesJars) throws java.io.FileNotFoundException { if (file.isDirectory()) { java.lang.String[] filenames = file.list(new java.io.FilenameFilter() { public boolean accept(java.io.File dir, java.lang.String name) { return com.android.apkbuilder.internal.ApkBuilderImpl.PATTERN_JAR_EXT.matcher(name).matches(); } }); for (java.lang.String filename : filenames) { java.io.File f = new java.io.File(file, filename); com.android.apkbuilder.internal.ApkBuilderImpl.processJarFile(f, resourcesJars); } } else { com.android.apkbuilder.internal.ApkBuilderImpl.processJarFile(file, resourcesJars); } }",7e8d39fe1ec0d50f8a0b4674deedfb596e8a9af7,"public static void processJar(java.io.File file, java.util.Collection<java.io.FileInputStream> resourcesJars) throws com.android.apkbuilder.ApkBuilder.ApkCreationException, java.io.FileNotFoundException { if (file.isDirectory()) { java.lang.String[] filenames = file.list(new java.io.FilenameFilter() { public boolean accept(java.io.File dir, java.lang.String name) { return com.android.apkbuilder.internal.ApkBuilderImpl.PATTERN_JAR_EXT.matcher(name).matches(); } }); for (java.lang.String filename : filenames) { java.io.File f = new java.io.File(file, filename); com.android.apkbuilder.internal.ApkBuilderImpl.processJarFile(f, resourcesJars); } } else if (file.isFile()) { com.android.apkbuilder.internal.ApkBuilderImpl.processJarFile(file, resourcesJars); } else { throw new com.android.apkbuilder.ApkBuilder.ApkCreationException(((file.getAbsolutePath()) + "" does not exists!"")); } }",1cbf44893624579d8732356ca17a9394bc934b48,"processJar(java.io.File,java.util.Collection)","processJar(java.io.File,java.util.Collection)",2,0,"public static void processJar(java.io.File file, java.util.Collection<java.io.FileInputStream> resourcesJars) throws com.android.apkbuilder.ApkBuilder.ApkCreationException, java.io.FileNotFoundException { if (file.isDirectory()) { java.lang.String[] filenames = file.list(new java.io.FilenameFilter() { public boolean accept(java.io.File dir, java.lang.String name) { return com.android.apkbuilder.internal.ApkBuilderImpl.PATTERN_JAR_EXT.matcher(name).matches(); } }); for (java.lang.String filename : filenames) { java.io.File f = new java.io.File(file, filename); com.android.apkbuilder.internal.ApkBuilderImpl.processJarFile(f, resourcesJars); } } else if (file.isFile()) { com.android.apkbuilder.internal.ApkBuilderImpl.processJarFile(file, resourcesJars); } else { throw new com.android.apkbuilder.ApkBuilder.ApkCreationException(((file.getAbsolutePath()) + "" does not exist!"")); } }",2b97f45577b06374d9a7ef681eef630143012f01,"processJar(java.io.File,java.util.Collection)",170734,240,240
334367,src_java_com_android_internal_telephony_RIL.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void writeMetricsModemRestartEvent(java.lang.String reason) { mMetrics.writeModemRestartEvent(mPhoneId, reason); }",256248895a9e1fc9c13d69a3ef213f4b963605b7,,writeMetricsModemRestartEvent(java.lang.String),2,171,"static com.android.internal.telephony.RILRequest obtain(int request, android.os.Message result, android.os.WorkSource workSource) { com.android.internal.telephony.RILRequest rr = null; rr = com.android.internal.telephony.RILRequest.obtain(request, result); if (workSource != null) { rr.mWorkSource = workSource; rr.mClientId = ((java.lang.String.valueOf(workSource.get(0))) + "":"") + (workSource.getName(0)); } else { android.telephony.Rlog.e(com.android.internal.telephony.RILRequest.LOG_TAG, (""null workSource "" + request)); } return rr; }",f7734577ba25b31d0af8a30d77b22532fee11672,"obtain(int,android.os.Message,android.os.WorkSource)",255245,32,163
545099,tests_functional_com_android_documentsui_CancelFromNotificationUiTest.java,,,,public void testCopyDocument_Cancel() throws java.lang.Exception { bots.roots.openRoot(com.android.documentsui.StubProvider.ROOT_0_ID); bots.directory.findDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); device.waitForIdle(); bots.directory.clickDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); device.waitForIdle(); bots.main.clickToolbarOverflowItem(com.android.documentsui.CancelFromNotificationUiTest.COPY); device.waitForIdle(); bots.main.clickDialogCancelButton(); device.waitForIdle(); bots.directory.waitForDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); },c81f3b2f1fad05b793cad7690a0786e3f55ce6fd,,testCopyDocument_Cancel(),4,11,public void testCopyDocument_Cancel() throws java.lang.Exception { bots.roots.openRoot(com.android.documentsui.StubProvider.ROOT_0_ID); bots.directory.findDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); device.waitForIdle(); bots.directory.selectDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); device.waitForIdle(); bots.main.clickToolbarOverflowItem(com.android.documentsui.CancelFromNotificationUiTest.COPY); device.waitForIdle(); bots.main.clickDialogCancelButton(); device.waitForIdle(); bots.directory.waitForDocument(com.android.documentsui.CancelFromNotificationUiTest.TARGET_FILE); },049e9ae4404fe626656315159f98cb438f09b96f,testCopyDocument_Cancel(),87927,175,175
311525,tests_wifitests_src_com_android_server_wifi_RecommendedNetworkEvaluatorTest.java,,,,"@org.junit.Test public void testEvaluateNetworks_trusted_recommendation_oneScored_oneDeletedEphemeral() { android.net.wifi.WifiConfiguration recommendedWifiConfiguration = new android.net.wifi.WifiConfiguration(); recommendedWifiConfiguration.networkId = 5; recommendedWifiConfiguration.SSID = com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL1.getSSID(); recommendedWifiConfiguration.getNetworkSelectionStatus().setCandidate(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL1.getScanResult()); when(mWifiConfigManager.wasEphemeralNetworkDeleted(com.android.server.wifi.util.ScanResultUtil.createQuotedSSID(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL1.getSSID()))).thenReturn(false); when(mWifiConfigManager.wasEphemeralNetworkDeleted(com.android.server.wifi.util.ScanResultUtil.createQuotedSSID(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL2.getSSID()))).thenReturn(true); when(mNetworkScoreManager.requestRecommendation(any(android.net.RecommendationRequest.class))).thenReturn(new android.net.RecommendationResult(recommendedWifiConfiguration)); android.net.wifi.WifiConfiguration result = mRecommendedNetworkEvaluator.evaluateNetworks(com.google.android.collect.Lists.newArrayList(com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL1, com.android.server.wifi.RecommendedNetworkEvaluatorTest.SCAN_DETAIL2), null, null, false, false, null); assertEquals(recommendedWifiConfiguration, result); verify(mNetworkScoreManager).requestRecommendation(mRecommendationRequestCaptor.capture()); assertEquals(new android.net.NetworkCapabilities(), mRecommendationRequestCaptor.getValue().getRequiredCapabilities()); verify(mWifiConfigManager).setNetworkCandidateScanResult(recommendedWifiConfiguration.networkId, recommendedWifiConfiguration.getNetworkSelectionStatus().getCandidate(), 0); }",e740fe293f20db5c531d2b6ad18c2084049de615,,testEvaluateNetworks_trusted_recommendation_oneScored_oneDeletedEphemeral(),7,7,"@org.junit.Test public void testEvaluateNetworks_untrustedNetworksAllowed_onlyDeletedEphemeral() { when(mWifiConfigManager.wasEphemeralNetworkDeleted(com.android.server.wifi.util.ScanResultUtil.createQuotedSSID(com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL.getScanResult().SSID))).thenReturn(true); android.net.wifi.WifiConfiguration result = mRecommendedNetworkEvaluator.evaluateNetworks(com.google.android.collect.Lists.newArrayList(com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL), null, null, false, true, null); junit.framework.Assert.assertNull(result); verifyZeroInteractions(mNetworkScoreManager); }",fec82d2548f71dd88b343da2cc7c0b4bafb164d8,testEvaluateNetworks_untrustedNetworksAllowed_onlyDeletedEphemeral(),180355,413,170
118413,jack-tests_tests_com_android_jack_resource_ResourceTests.java,0.0,"@org.junit.Test public void testJackDirToJackArchive() throws java.lang.Exception { java.io.File jackFolder = com.android.jack.TestTools.createTempDir(""tempjack"", ""dir""); com.android.jack.Options options = new com.android.jack.Options(); options.addResource(new java.io.File(com.android.jack.resource.ResourceTests.FILE, ""rsc"")); com.android.jack.TestTools.compileSourceToJack(options, com.android.jack.resource.ResourceTests.FILE, com.android.jack.TestTools.getDefaultBootclasspathString(), jackFolder, false); java.io.File shrobbedJackAr = com.android.jack.TestTools.createTempFile(""shrobbedJackAr"", "".zip""); com.android.jack.ProguardFlags flags = new com.android.jack.ProguardFlags(new java.io.File(com.android.jack.resource.ResourceTests.FILE, ""proguard.flags"")); com.android.jack.TestTools.shrobJackToJack(new com.android.jack.Options(), jackFolder, null, shrobbedJackAr, java.util.Collections.singletonList(flags), true); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(shrobbedJackAr); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.RESOURCE1_SHORTPATH, ""Res1"", true); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.RESOURCE2_SHORTPATH, ""Res2"", true); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.RESOURCE3_SHORTPATH, ""Res3"", true); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.RESOURCE4_SHORTPATH, ""Res4"", true); }",22f0773a769bcd8bb19799eed8d3bd53e922d65d,"@org.junit.Test public void testJackDirToJackArchive() throws java.lang.Exception { java.io.File jackFolder = com.android.jack.TestTools.createTempDir(""tempjack"", ""dir""); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); toolchain.addResource(new java.io.File(com.android.jack.resource.ResourceTests.FILE, ""rsc"")); toolchain.srcToLib(com.android.jack.test.toolchain.AbstractTestTools.getClasspathAsString(toolchain.getDefaultBootClasspath()), jackFolder, false, com.android.jack.resource.ResourceTests.FILE); java.io.File shrobbedJackAr = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""shrobbedJackAr"", "".zip""); toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); toolchain.addProguardFlags(new java.io.File(com.android.jack.resource.ResourceTests.FILE, ""proguard.flags"")); toolchain.libToLib(jackFolder, shrobbedJackAr, true); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(shrobbedJackAr); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.RESOURCE1_SHORTPATH, ""Res1"", true); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.RESOURCE2_SHORTPATH, ""Res2"", true); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.RESOURCE3_SHORTPATH, ""Res3"", true); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.RESOURCE4_SHORTPATH, ""Res4"", true); }",75f3b722fc32501b86d2db3ff0b0a2907dc690d7,testJackDirToJackArchive(),testJackDirToJackArchive(),6,0,"@org.junit.Test public void testJackDirToJackArchive() throws java.lang.Exception { java.io.File jackFolder = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); toolchain.addResource(new java.io.File(com.android.jack.resource.ResourceTests.FILE, ""rsc"")); toolchain.srcToLib(com.android.jack.test.toolchain.AbstractTestTools.getClasspathAsString(toolchain.getDefaultBootClasspath()), jackFolder, false, com.android.jack.resource.ResourceTests.FILE); java.io.File shrobbedJackAr = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""shrobbedJackAr"", "".zip""); toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); toolchain.addProguardFlags(new java.io.File(com.android.jack.resource.ResourceTests.FILE, ""proguard.flags"")); toolchain.libToLib(jackFolder, shrobbedJackAr, true); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(shrobbedJackAr); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.RESOURCE1_SHORTPATH, ""Res1"", true); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.RESOURCE2_SHORTPATH, ""Res2"", true); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.RESOURCE3_SHORTPATH, ""Res3"", true); checkResourceContentFromZip(zipFile, com.android.jack.resource.ResourceTests.RESOURCE4_SHORTPATH, ""Res4"", true); }",9a4f0a09134591fd0ceabe5e41f974d189f97ebf,testJackDirToJackArchive(),70835,462,461
143612,jack_src_com_android_jack_tools_merger_ConstantManager.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.Collection<com.android.jack.dx.rop.cst.CstFieldRef> getCstFieldRefs() { return com.android.jack.Jack.getUnmodifiableCollections().getUnmodifiableCollection(cstFieldRefs); },ec225229d253ef48550d6c26ee9665c219a5c879,,getCstFieldRefs(),9,3,@javax.annotation.Nonnull public java.util.Collection<com.android.jack.dx.rop.cst.CstFieldRef> getCstFieldRefs() { return com.android.jack.Jack.getUnmodifiableCollections().getUnmodifiableCollection(cstFieldRefs); },bc8df649614c3673b738a4d023a4f4f35d66c0c8,getCstFieldRefs(),117201,56,62
22790,ddms_libs_ddmlib_src_com_android_ddmlib_testrunner_InstrumentationResultParser.java,4.0,"private void submitCurrentKeyValue() { if (((mCurrentKey) != null) && ((mCurrentValue) != null)) { java.lang.String statusValue = mCurrentValue.toString(); if (mInInstrumentationResultKey) { if (!(com.android.ddmlib.testrunner.InstrumentationResultParser.KNOWN_KEYS.contains(mCurrentKey))) { mInstrumentationResultBundle.put(mCurrentKey, statusValue); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.SHORTMSG)) { handleTestRunFailed(statusValue); } } else { com.android.ddmlib.testrunner.InstrumentationResultParser.TestResult testInfo = getCurrentTestInfo(); if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.CLASS)) { testInfo.mTestClass = statusValue.trim(); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.TEST)) { testInfo.mTestName = statusValue.trim(); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.NUMTESTS)) { try { testInfo.mNumTests = java.lang.Integer.parseInt(statusValue); } catch (java.lang.NumberFormatException e) { com.android.ddmlib.Log.e(com.android.ddmlib.testrunner.InstrumentationResultParser.LOG_TAG, (""Unexpected integer number of tests, received "" + statusValue)); } } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.ERROR)) { handleTestRunFailed(statusValue); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.STACK)) { testInfo.mStackTrace = statusValue; } else if (!(com.android.ddmlib.testrunner.InstrumentationResultParser.KNOWN_KEYS.contains(mCurrentKey))) { mTestMetrics.put(mCurrentKey, statusValue); } } mCurrentKey = null; mCurrentValue = null; } }",6af2d3d444d4b947eda4e42ebd90132415da5d77,"private void submitCurrentKeyValue() { if (((mCurrentKey) != null) && ((mCurrentValue) != null)) { java.lang.String statusValue = mCurrentValue.toString(); if (mInInstrumentationResultKey) { if (!(com.android.ddmlib.testrunner.InstrumentationResultParser.KNOWN_KEYS.contains(mCurrentKey))) { mInstrumentationResultBundle.put(mCurrentKey, statusValue); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.SHORTMSG)) { handleTestRunFailed(java.lang.String.format(""Instrumentation run failed due to '%s'"", statusValue)); } } else { com.android.ddmlib.testrunner.InstrumentationResultParser.TestResult testInfo = getCurrentTestInfo(); if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.CLASS)) { testInfo.mTestClass = statusValue.trim(); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.TEST)) { testInfo.mTestName = statusValue.trim(); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.NUMTESTS)) { try { testInfo.mNumTests = java.lang.Integer.parseInt(statusValue); } catch (java.lang.NumberFormatException e) { com.android.ddmlib.Log.e(com.android.ddmlib.testrunner.InstrumentationResultParser.LOG_TAG, (""Unexpected integer number of tests, received "" + statusValue)); } } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.ERROR)) { handleTestRunFailed(statusValue); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.STACK)) { testInfo.mStackTrace = statusValue; } else if (!(com.android.ddmlib.testrunner.InstrumentationResultParser.KNOWN_KEYS.contains(mCurrentKey))) { mTestMetrics.put(mCurrentKey, statusValue); } } mCurrentKey = null; mCurrentValue = null; } }",9be2059a057ec953234150c6cd157b594368b0b8,submitCurrentKeyValue(),submitCurrentKeyValue(),2,4,"private void submitCurrentKeyValue() { if (((mCurrentKey) != null) && ((mCurrentValue) != null)) { java.lang.String statusValue = mCurrentValue.toString(); if (mInInstrumentationResultKey) { if (!(com.android.ddmlib.testrunner.InstrumentationResultParser.KNOWN_KEYS.contains(mCurrentKey))) { mInstrumentationResultBundle.put(mCurrentKey, statusValue); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.SHORTMSG)) { handleTestRunFailed(java.lang.String.format(""Instrumentation run failed due to '%1$s'"", statusValue)); } } else { com.android.ddmlib.testrunner.InstrumentationResultParser.TestResult testInfo = getCurrentTestInfo(); if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.CLASS)) { testInfo.mTestClass = statusValue.trim(); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.TEST)) { testInfo.mTestName = statusValue.trim(); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.NUMTESTS)) { try { testInfo.mNumTests = java.lang.Integer.parseInt(statusValue); } catch (java.lang.NumberFormatException e) { com.android.ddmlib.Log.e(com.android.ddmlib.testrunner.InstrumentationResultParser.LOG_TAG, (""Unexpected integer number of tests, received "" + statusValue)); } } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.ERROR)) { handleTestRunFailed(statusValue); } else if (mCurrentKey.equals(com.android.ddmlib.testrunner.InstrumentationResultParser.StatusKeys.STACK)) { testInfo.mStackTrace = statusValue; } else if (!(com.android.ddmlib.testrunner.InstrumentationResultParser.KNOWN_KEYS.contains(mCurrentKey))) { mTestMetrics.put(mCurrentKey, statusValue); } } mCurrentKey = null; mCurrentValue = null; } }",5246c1cc6b1985a917f6124dfb9059a1824fffd7,submitCurrentKeyValue(),33494,500,502
142075,platform_platform-api_src_com_intellij_ui_treeStructure_treetable_TreeTableTree.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@org.jetbrains.annotations.Nullable @java.lang.Override public java.awt.Rectangle getPathBounds(javax.swing.tree.TreePath path) { java.awt.Rectangle bounds = super.getPathBounds(path); if (bounds == null) { return null; } int columnOffset = getTreeColumnOffset(); if (columnOffset != (-1)) { bounds.x += columnOffset; } return bounds; },2296a3d5d465e79b67e77c8a05f71ad12e684c1d,,getPathBounds(javax.swing.tree.TreePath),9,5,@org.jetbrains.annotations.Nullable @java.lang.Override public java.awt.Rectangle getPathBounds(javax.swing.tree.TreePath path) { java.awt.Rectangle bounds = super.getPathBounds(path); if (bounds == null) { return null; } bounds.x += getTreeColumnOffset(); return bounds; },bc3063f24751b1027e11deee4934ed586cc09988,getPathBounds(javax.swing.tree.TreePath),293664,89,72
83326,luni_src_test_java_libcore_java_security_MessageDigestTest.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testMessageDigest_MultipleThreads_Misuse() throws java.lang.Exception { java.util.concurrent.ExecutorService es = java.util.concurrent.Executors.newFixedThreadPool(THREAD_COUNT); final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(THREAD_COUNT); final java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA-256""); final byte[] message = new byte[64]; for (int i = 0; i < (THREAD_COUNT); i++) { es.submit(new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { latch.countDown(); for (int j = 0; j < 100; j++) { md.update(message); md.digest(); } return null; } }); } es.shutdown(); es.awaitTermination(1, java.util.concurrent.TimeUnit.MINUTES); }",d5503ee1bc2d25eb452ad8064baffd9e48e2296d,,testMessageDigest_MultipleThreads_Misuse(),4,2,"public void testMessageDigest_MultipleThreads_Misuse() throws java.lang.Exception { java.util.concurrent.ExecutorService es = java.util.concurrent.Executors.newFixedThreadPool(THREAD_COUNT); final java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(THREAD_COUNT); final java.security.MessageDigest md = java.security.MessageDigest.getInstance(""SHA-256""); final byte[] message = new byte[64]; for (int i = 0; i < (THREAD_COUNT); i++) { es.submit(new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { latch.countDown(); latch.await(); for (int j = 0; j < 100; j++) { md.update(message); md.digest(); } return null; } }); } es.shutdown(); assertTrue(""Test should not timeout"", es.awaitTermination(1, java.util.concurrent.TimeUnit.MINUTES)); }",3b488aa2828cdae660a35cd470408d6c062592a8,testMessageDigest_MultipleThreads_Misuse(),350204,208,219
590295,core_java_android_net_NetworkMisc.java,1.0,@java.lang.Override public android.net.NetworkMisc createFromParcel(android.os.Parcel in) { android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (in.readInt()) != 0; networkMisc.explicitlySelected = (in.readInt()) != 0; networkMisc.acceptUnvalidated = (in.readInt()) != 0; networkMisc.subscriberId = in.readString(); networkMisc.provisioningNotificationDisabled = (in.readInt()) != 0; return networkMisc; },e33c455b0af7c3ffc35c9fbdd945b307624e4852,@java.lang.Override public android.net.NetworkMisc createFromParcel(android.os.Parcel in) { android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (in.readInt()) != 0; networkMisc.explicitlySelected = (in.readInt()) != 0; networkMisc.acceptUnvalidated = (in.readInt()) != 0; networkMisc.subscriberId = in.readString(); networkMisc.provisioningNotificationDisabled = (in.readInt()) != 0; networkMisc.managerUid = in.readInt(); return networkMisc; },6f95cc3090b3783dd21b6ec492359e3daa648a0e,createFromParcel(android.os.Parcel),createFromParcel(android.os.Parcel),10,1,@java.lang.Override public android.net.NetworkMisc createFromParcel(android.os.Parcel in) { android.net.NetworkMisc networkMisc = new android.net.NetworkMisc(); networkMisc.allowBypass = (in.readInt()) != 0; networkMisc.explicitlySelected = (in.readInt()) != 0; networkMisc.acceptUnvalidated = (in.readInt()) != 0; networkMisc.subscriberId = in.readString(); networkMisc.provisioningNotificationDisabled = (in.readInt()) != 0; return networkMisc; },e33c455b0af7c3ffc35c9fbdd945b307624e4852,createFromParcel(android.os.Parcel),420204,124,114
232493,jill_src_com_android_jill_frontend_java_AsmHelper.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static boolean isMethodGenericSignature(@javax.annotation.Nonnull org.objectweb.asm.tree.MethodNode mn) { if ((mn.signature) != null) { try { new com.android.jill.signature.GenericSignatureParser<java.lang.Object>(new com.android.jill.signature.DummyAction()).parseMethodSignature(mn.signature); return true; } catch (java.lang.reflect.GenericSignatureFormatError e) { } } return false; },b27d6ff8af0f5e3da22c5f32cba2a9f748b183ca,,isMethodGenericSignature(org.objectweb.asm.tree.MethodNode),3,12,public static boolean hasValidGenericSignature(@javax.annotation.Nonnull org.objectweb.asm.tree.MethodNode mn) { if ((mn.signature) != null) { try { GenericSignatureParser.PARSER.parseMethodSignature(mn.signature); return true; } catch (java.lang.reflect.GenericSignatureFormatError e) { } } return false; },676ba7be8cf63927b853c5cba78db02a2e5e7a34,hasValidGenericSignature(org.objectweb.asm.tree.MethodNode),86296,109,78
149634,java_java-analysis-impl_src_com_intellij_codeInspection_deprecation_DeprecationInspection.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.jetbrains.annotations.Nullable @java.lang.Override public java.lang.String getDeprecationMessage(@org.jetbrains.annotations.NotNull com.intellij.codeInspection.deprecation.PsiElement deprecatedElement, @org.jetbrains.annotations.NotNull com.intellij.codeInspection.deprecation.PsiElement referenceElement, @org.jetbrains.annotations.Nullable java.lang.String symbolName, @org.jetbrains.annotations.NotNull java.lang.String defaultMessage) { if (com.intellij.codeInspection.deprecation.DeprecationInspection.AndroidDeprecationFilter.ACTION_BAR_ACTIVITY.equals(symbolName)) { return ""ActionBarActivity is deprecated; use `AppCompatActivity` instead""; } return defaultMessage; }",4949d744fb54bb66a706529c6f7ac6c1870ee6d9,,"getDeprecationMessage(com.intellij.codeInspection.deprecation.PsiElement,com.intellij.codeInspection.deprecation.PsiElement,java.lang.String,java.lang.String)",2,25,"@org.jetbrains.annotations.NotNull @java.lang.Override public java.lang.String getDeprecationMessage(@org.jetbrains.annotations.NotNull com.intellij.codeInspection.deprecation.PsiElement deprecatedElement, @org.jetbrains.annotations.NotNull com.intellij.codeInspection.deprecation.PsiElement referenceElement, @org.jetbrains.annotations.Nullable java.lang.String symbolName, @org.jetbrains.annotations.NotNull java.lang.String defaultMessage) { if (com.intellij.codeInspection.deprecation.DeprecationInspection.AndroidDeprecationFilter.ACTION_BAR_ACTIVITY.equals(symbolName)) { return ""ActionBarActivity is deprecated; use `AppCompatActivity` instead""; } return defaultMessage; }",cd87a99a7cee02fcb68a5907c6abe238d500f4be,"getDeprecationMessage(com.intellij.codeInspection.deprecation.PsiElement,com.intellij.codeInspection.deprecation.PsiElement,java.lang.String,java.lang.String)",441264,155,155
90966,luni_src_test_java_libcore_java_nio_channels_FileIOInterruptTest.java,,,,"public void testChannelWrite_exceptionOnInterrupt() throws java.lang.Exception { libcore.java.nio.channels.FileIOInterruptTest.FifoReader fifoReader = new libcore.java.nio.channels.FileIOInterruptTest.FifoReader(fifoFile); fifoReader.start(); java.nio.channels.FileChannel fileChannel = new java.io.FileOutputStream(fifoFile).getChannel(); libcore.java.nio.channels.FileIOInterruptTest.ChannelWriter channelWriter = new libcore.java.nio.channels.FileIOInterruptTest.ChannelWriter(fileChannel); java.lang.Thread channelWriterThread = libcore.java.nio.channels.FileIOInterruptTest.createAndStartThread(""ChannelWriter"", channelWriter); channelWriter.waitForThreadToBlock(); channelWriterThread.interrupt(); libcore.java.nio.channels.FileIOInterruptTest.waitToDie(channelWriterThread); assertSame(java.nio.channels.ClosedByInterruptException.class, channelWriter.ioe.getClass()); assertTrue(channelWriter.wasInterrupted); fifoReader.tidyUp(); }",992fe5b6eb190da401110d8fea48efa26710223f,,testChannelWrite_exceptionOnInterrupt(),7,7,public void testChannelWrite_exceptionOnInterrupt() throws java.lang.Exception { testChannelWrite_exceptionOnInterrupt(libcore.java.nio.channels.FileIOInterruptTest.ChannelWriter.Method.WRITE); },a614cc39a2741a63ccf26b774ba020bdf856d7b9,testChannelWrite_exceptionOnInterrupt(),329351,231,46
93166,lint_libs_lint-checks_src_main_java_com_android_tools_lint_checks_PreferenceActivityDetector.java,,,,"private java.lang.String getFqcn(@com.android.annotations.NonNull org.w3c.dom.Element activityElement) { java.lang.String activityClassName = activityElement.getAttributeNS(com.android.SdkConstants.ANDROID_URI, com.android.SdkConstants.ATTR_NAME); if ((activityClassName == null) || (activityClassName.isEmpty())) { return null; } if (activityClassName.startsWith(""."")) { if ((mPackage) != null) { return (mPackage) + activityClassName; } else { return null; } } return activityClassName; }",b0c7a45524c81ab5455a8cdc283926ae2d806d5c,,getFqcn(org.w3c.dom.Element),8,5,"private static java.lang.String getFqcn(@com.android.annotations.NonNull org.w3c.dom.Element activityElement) { java.lang.String activityClassName = activityElement.getAttributeNS(com.android.SdkConstants.ANDROID_URI, com.android.SdkConstants.ATTR_NAME); if ((activityClassName == null) || (activityClassName.isEmpty())) { return null; } if (activityClassName.startsWith(""."")) { java.lang.String pkg = activityElement.getOwnerDocument().getDocumentElement().getAttribute(com.android.SdkConstants.ATTR_PACKAGE); if (pkg != null) { return pkg + activityClassName; } else { return null; } } return activityClassName; }",790d6d48050d525ce2d185a84136ce802fe927cc,getFqcn(org.w3c.dom.Element),293509,127,151
194173,src_com_android_bluetooth_btservice_BondStateMachine.java,16.0,"private boolean createBond(android.bluetooth.BluetoothDevice dev, int transport, boolean transition) { if ((dev.getBondState()) == (android.bluetooth.BluetoothDevice.BOND_NONE)) { infoLog((""Bond address is:"" + dev)); byte[] addr = com.android.bluetooth.Utils.getBytesFromAddress(dev.getAddress()); if (!(mAdapterService.createBondNative(addr, transport))) { sendIntent(dev, BluetoothDevice.BOND_NONE, BluetoothDevice.UNBOND_REASON_REMOVED); return false; } else if (transition) { transitionTo(mPendingCommandState); } return true; } return false; }",d52fed82c35a18d334d12a43955195d7f2678ffa,"private boolean createBond(android.bluetooth.BluetoothDevice dev, int transport, android.bluetooth.OOBData oobData, boolean transition) { if ((dev.getBondState()) == (android.bluetooth.BluetoothDevice.BOND_NONE)) { infoLog((""Bond address is:"" + dev)); byte[] addr = com.android.bluetooth.Utils.getBytesFromAddress(dev.getAddress()); boolean result; if (oobData != null) { result = mAdapterService.createBondOutOfBandNative(addr, transport, oobData); } else { result = mAdapterService.createBondNative(addr, transport); } if (!result) { sendIntent(dev, BluetoothDevice.BOND_NONE, BluetoothDevice.UNBOND_REASON_REMOVED); return false; } else if (transition) { transitionTo(mPendingCommandState); } return true; } return false; }",6afbd78aa453a2497f0acd54aa5ecdb9e5581269,"createBond(android.bluetooth.BluetoothDevice,int,boolean)","createBond(android.bluetooth.BluetoothDevice,int,android.bluetooth.OOBData,boolean)",5,16,"private boolean createBond(android.bluetooth.BluetoothDevice dev, int transport, android.bluetooth.OobData oobData, boolean transition) { if ((dev.getBondState()) == (android.bluetooth.BluetoothDevice.BOND_NONE)) { infoLog((""Bond address is:"" + dev)); byte[] addr = com.android.bluetooth.Utils.getBytesFromAddress(dev.getAddress()); boolean result; if (oobData != null) { result = mAdapterService.createBondOutOfBandNative(addr, transport, oobData); } else { result = mAdapterService.createBondNative(addr, transport); } if (!result) { sendIntent(dev, BluetoothDevice.BOND_NONE, BluetoothDevice.UNBOND_REASON_REMOVED); return false; } else if (transition) { transitionTo(mPendingCommandState); } return true; } return false; }",3713524f98376149d5179fa7d33ef062429e3372,"createBond(android.bluetooth.BluetoothDevice,int,android.bluetooth.OobData,boolean)",474847,189,189
170090,src_test_java_org_conscrypt_NativeCryptoTest.java,155.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void afterHandshake(long session, long ssl, long context, java.net.Socket socket, java.io.FileDescriptor fd, org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback) throws java.lang.Exception { org.conscrypt.TestUtils.assertEqualByteArrays(SCT_TEST_DATA, org.conscrypt.NativeCrypto.SSL_get_signed_cert_timestamp_list(ssl)); super.afterHandshake(session, ssl, context, socket, fd, callback); }",4083fec4e034adb6e61d31223f7863a80c8a008c,,"afterHandshake(long,long,long,java.net.Socket,java.io.FileDescriptor,org.conscrypt.NativeCrypto.SSLHandshakeCallbacks)",8,19,"@java.lang.Override public void afterHandshake(long session, long ssl, long context, java.net.Socket socket, java.io.FileDescriptor fd, org.conscrypt.NativeCrypto.SSLHandshakeCallbacks callback) throws java.lang.Exception { org.conscrypt.NativeCryptoTest.assertEqualByteArrays(SCT_TEST_DATA, org.conscrypt.NativeCrypto.SSL_get_signed_cert_timestamp_list(ssl)); super.afterHandshake(session, ssl, context, socket, fd, callback); }",da310a651c8eda42fe87dbe2471cfe6317c6f5b5,"afterHandshake(long,long,long,java.net.Socket,java.io.FileDescriptor,org.conscrypt.NativeCrypto.SSLHandshakeCallbacks)",329841,117,118
216245,src_com_android_bluetooth_btservice_AdapterService.java,183.0,"public boolean setPin(android.bluetooth.BluetoothDevice device, boolean accept, int len, byte[] pinCode) { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ""setPin() - Not allowed for non-active user""); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.setPin(device, accept, len, pinCode); }",4c5fd950bd92f8533e5b8beb59d51c50ffd0b924,"public boolean setPin(android.bluetooth.BluetoothDevice device, boolean accept, int len, byte[] pinCode) { if (!(com.android.bluetooth.Utils.checkCallerAllowManagedProfiles(mService))) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ""setPin() - Not allowed for non-active user""); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.setPin(device, accept, len, pinCode); }",6d21b9385953f0a9bc028264881bee093adcf765,"setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])","setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])",4,183,"public boolean setPin(android.bluetooth.BluetoothDevice device, boolean accept, int len, byte[] pinCode) { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ""setPin() - Not allowed for non-active user""); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.setPin(device, accept, len, pinCode); }",4c5fd950bd92f8533e5b8beb59d51c50ffd0b924,"setPin(android.bluetooth.BluetoothDevice,boolean,int,byte[])",248407,123,117
353974,services_core_java_com_android_server_connectivity_Vpn.java,81.0,"@com.android.internal.annotations.GuardedBy(""this"") private void setVpnForcedLocked(boolean enforce) { final java.util.Set<android.net.UidRange> removedRanges = new android.util.ArraySet(mBlockedUsers); if (enforce) { final java.util.Set<android.net.UidRange> addedRanges = createUserAndRestrictedProfilesRanges(mUserHandle, null, java.util.Collections.singletonList(mPackage)); removedRanges.removeAll(addedRanges); addedRanges.removeAll(mBlockedUsers); setAllowOnlyVpnForUids(false, removedRanges); setAllowOnlyVpnForUids(true, addedRanges); } else { setAllowOnlyVpnForUids(false, removedRanges); } }",051c4103359ecadebb523805a8c2af39137c15f0,"@com.android.internal.annotations.GuardedBy(""this"") private void setVpnForcedLocked(boolean enforce) { if (com.android.server.connectivity.Vpn.isNullOrLegacyVpn(mPackage)) { setVpnForcedWithExemptionsLocked(enforce, null); } else { setVpnForcedWithExemptionsLocked(enforce, java.util.Collections.singletonList(mPackage)); } }",f7d1fe2b893444498be638d39c308b30e75f829e,setVpnForcedLocked(boolean),setVpnForcedLocked(boolean),3,80,"@com.android.internal.annotations.GuardedBy(""this"") private void setVpnForcedLocked(boolean enforce) { final java.util.List<java.lang.String> exemptedPackages = (com.android.server.connectivity.Vpn.isNullOrLegacyVpn(mPackage)) ? null : java.util.Collections.singletonList(mPackage); setVpnForcedWithExemptionsLocked(enforce, exemptedPackages); }",d182fc2de9ec591b932029756d3e1a88700c58f7,setVpnForcedLocked(boolean),127055,97,102
91995,luni_src_main_java_libcore_io_Os.java,5.0,"public int read(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws java.io.InterruptedIOException, libcore.io.ErrnoException;",6e82ec7dc4a5fdb9f74ea7f003c882d228941379,"public int read(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws android.os.ErrnoException, java.io.InterruptedIOException;",e71c7ba69def844e0122e68c8a2ca39c0fc11243,"read(java.io.FileDescriptor,byte[],int,int)","read(java.io.FileDescriptor,byte[],int,int)",3,5,"public int read(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws android.system.ErrnoException, java.io.InterruptedIOException;",470855f7089675ae9ac46c846ca5aefa19e31ab7,"read(java.io.FileDescriptor,byte[],int,int)",170171,39,39
233727,jack_src_com_android_jack_optimizations_common_LiteralValueListTracker.java,,,,"abstract void mergeWith(int index, @javax.annotation.CheckForNull com.android.jack.ir.ast.JValueLiteral literal);",3485f98fc5e7e44c1a8da1262fba89a8cd0fe802,,"mergeWith(int,com.android.jack.ir.ast.JValueLiteral)",7,7,"abstract void mergeWith(@javax.annotation.Nonnegative int index, @javax.annotation.CheckForNull com.android.jack.ir.ast.JValueLiteral literal);",b1dd12bb2fe240a4186c4ddbba7b31ba698f8681,"mergeWith(int,com.android.jack.ir.ast.JValueLiteral)",438933,29,34
36031,ddms_libs_ddmuilib_src_com_android_ddmuilib_logcat_LogCatMessageList.java,2.0,public synchronized void appendMessage(final com.android.ddmuilib.logcat.LogCatMessage m) { if ((mQ.remainingCapacity()) == 0) { mQ.poll(); } mQ.offer(m); },a95ada1ff72d4ef90fa8f2daf6596714d28c9a96,public synchronized int appendMessages(final java.util.List<com.android.ddmuilib.logcat.LogCatMessage> messages) { int nDeleted = 0; while ((mQ.remainingCapacity()) < (messages.size())) { mQ.poll(); nDeleted++; } for (com.android.ddmuilib.logcat.LogCatMessage m : messages) { mQ.offer(m); } return nDeleted; },d292ef939e1beffbcc8d2ea5c91a38e57c2b786c,appendMessage(com.android.ddmuilib.logcat.LogCatMessage),appendMessages(java.util.List),10,1,public synchronized void appendMessages(final java.util.List<com.android.ddmuilib.logcat.LogCatMessage> messages) { ensureSpace(messages.size()); for (com.android.ddmuilib.logcat.LogCatMessage m : messages) { mQ.offer(m); } },5ac0bb6f6eae92798d9e1e1e48d2edd787b80bf0,appendMessages(java.util.List),433822,99,72
162651,ddmlib_src_main_java_com_android_ddmlib_Device.java,56.0,"@java.lang.Override public com.android.ddmlib.RawImage getScreenshot(long timeout, java.util.concurrent.TimeUnit unit) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException { return com.android.ddmlib.AdbHelper.getFrameBuffer(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), this, timeout, unit); }",016357f0b65c13a1406f8eb69b1f432a54bc4f39,"@java.lang.Override public com.android.ddmlib.RawImage getScreenshot(long timeout, java.util.concurrent.TimeUnit unit) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException, java.lang.InterruptedException { return com.android.ddmlib.AdbHelper.getFrameBuffer(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), this, timeout, unit); }",04c79d24f67e0c30e84416bea35f2eea2118ed32,"getScreenshot(long,java.util.concurrent.TimeUnit)","getScreenshot(long,java.util.concurrent.TimeUnit)",4,56,"@java.lang.Override public com.android.ddmlib.RawImage getScreenshot(long timeout, java.util.concurrent.TimeUnit unit) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException { return com.android.ddmlib.AdbHelper.getFrameBuffer(com.android.ddmlib.AndroidDebugBridge.getSocketAddress(), this, timeout, unit); }",016357f0b65c13a1406f8eb69b1f432a54bc4f39,"getScreenshot(long,java.util.concurrent.TimeUnit)",353107,108,101
110610,src_com_google_gct_idea_appengine_wizard_NewCloudModuleDynamicWizardStep.java,12.0,"private void initModuleDescriptionText() { final com.android.tools.idea.templates.TemplateMetadata metadata = myState.get(NewCloudModuleDynamicWizardPath.KEY_TEMPLATE_METADATA); assert metadata != null; final com.android.tools.idea.templates.Parameter docUrlParam = metadata.getParameter(CloudModuleUtils.ATTR_DOC_URL); assert docUrlParam != null; myModuleDescriptionText.setContentType(UIUtil.HTML_MIME); myModuleDescriptionText.putClientProperty(javax.swing.JEditorPane.HONOR_DISPLAY_PROPERTIES, true); myModuleDescriptionText.setFont(javax.swing.UIManager.getFont(""Label.font"")); myModuleDescriptionText.addHyperlinkListener(new javax.swing.event.HyperlinkListener() { @java.lang.Override public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent e) { if ((e.getEventType()) == (javax.swing.event.HyperlinkEvent.EventType.ACTIVATED)) { com.intellij.ide.BrowserUtil.browse(e.getURL().toString()); } } }); myModuleDescriptionText.setText(java.lang.String.format((""<html><body>Check the <a href=\'%s\'>\""%s\""</a> documentation for more "" + ((""information about the contents of this backend module, and for "" + ""detailed instructions about connecting your Android app to this "") + ""backend.</body></html>"")), docUrlParam.initial, metadata.getTitle())); }",583187689e5d89cc59ef865f020af548658f8ef7,"@java.lang.SuppressWarnings(""unchecked"") private void setModuleDescriptionText(java.io.File templateFile) { java.util.List<com.google.gct.idea.appengine.wizard.CloudTemplateUtils.TemplateInfo> templates = myState.get(NewCloudModuleDynamicWizardPath.KEY_TEMPLATES); assert templates != null; com.android.tools.idea.templates.Parameter docUrlParam = null; com.android.tools.idea.templates.TemplateMetadata metadata = null; for (com.google.gct.idea.appengine.wizard.CloudTemplateUtils.TemplateInfo templateInfo : templates) { if (templateFile == (templateInfo.getFile())) { metadata = templateInfo.getMetadata(); assert metadata != null; docUrlParam = metadata.getParameter(CloudModuleUtils.ATTR_DOC_URL); } } assert metadata != null; assert docUrlParam != null; myModuleDescriptionText.setText(java.lang.String.format((""<html><body>Check the <a href=\'%s\'>\""%s\""</a> documentation for more "" + ((""information about the contents of this backend module, and for "" + ""detailed instructions about connecting your Android app to this "") + ""backend.</body></html>"")), docUrlParam.initial, metadata.getTitle())); }",be77d03cd7e27288d6733b1d7e99eb3b47494165,initModuleDescriptionText(),setModuleDescriptionText(java.io.File),18,4,"private void setModuleDescriptionText(@org.jetbrains.annotations.NotNull java.io.File templateFile) { com.android.tools.idea.templates.Parameter docUrlParam = null; com.android.tools.idea.templates.TemplateMetadata metadata = null; for (com.google.gct.idea.appengine.wizard.CloudTemplateUtils.TemplateInfo templateInfo : com.google.gct.idea.appengine.wizard.NewCloudModuleDynamicWizardStep.CLOUD_TEMPLATES) { if (templateFile == (templateInfo.getFile())) { metadata = templateInfo.getMetadata(); assert metadata != null; docUrlParam = metadata.getParameter(CloudModuleUtils.ATTR_DOC_URL); } } assert metadata != null; assert docUrlParam != null; myModuleDescriptionText.setText(com.google.gct.idea.util.GctBundle.message(""appengine.wizard.module_type_description"", docUrlParam.initial, metadata.getTitle())); }",a5417291070b80d2b2ef147ea98bc126492e1bb6,setModuleDescriptionText(java.io.File),28224,287,208
316531,tests_wifitests_src_com_android_server_wifi_hotspot2_ANQPRequestManagerTest.java,,,,"@org.junit.Test public void requestR1R2ANQPElementsWithoutRC() throws java.lang.Exception { when(mHandler.requestANQP(com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID, com.android.server.wifi.hotspot2.ANQPRequestManagerTest.R1R2_ANQP_WITHOUT_RC)).thenReturn(true); assertTrue(mManager.requestANQPElements(com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID, com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_ANQP_KEY, false, true)); }",76591ec8ff09675e8d404dd65304c32ed9768b80,,requestR1R2ANQPElementsWithoutRC(),9,0,"@org.junit.Test public void requestR1R2ANQPElementsWithoutRC() throws java.lang.Exception { when(mHandler.requestANQP(com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID, com.android.server.wifi.hotspot2.ANQPRequestManagerTest.R1R2_ANQP_WITHOUT_RC)).thenReturn(true); assertTrue(mManager.requestANQPElements(com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_BSSID, com.android.server.wifi.hotspot2.ANQPRequestManagerTest.TEST_SCAN_DETAIL, false, true)); }",ab0ba79b464be8eb336b25af465055fb25ecfc0e,requestR1R2ANQPElementsWithoutRC(),486439,157,155
422459,services_core_java_com_android_server_connectivity_tethering_OffloadController.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void updateLocalPrefixes(java.util.Set<android.net.IpPrefix> localPrefixes) { if (!(started())) return; mLocalPrefixes = localPrefixes; },f10e0af82340a539006761a062af197d4890faaa,,updateLocalPrefixes(java.util.Set),11,4,public void updateExemptPrefixes(java.util.Set<android.net.IpPrefix> exemptPrefixes) { if (!(started())) return; mExemptPrefixes = exemptPrefixes; },03042b01ffc2f84e42dc51f283a31bc27f020706,updateExemptPrefixes(java.util.Set),183000,37,45
17484,monkeyrunner_src_com_android_monkeyrunner_JythonUtils.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static java.lang.String buildDoc(com.android.monkeyrunner.doc.MonkeyRunnerExported doc) { return doc.doc(); },7322fa3267bff88a1c86092af6a0b9cfea2d8a1f,,buildDoc(com.android.monkeyrunner.doc.MonkeyRunnerExported),4,14,"private static java.lang.String buildDoc(com.android.monkeyrunner.doc.MonkeyRunnerExported doc) { java.util.Collection<java.lang.String> docs = com.android.monkeyrunner.JythonUtils.splitString(doc.doc(), 80); java.lang.StringBuilder sb = new java.lang.StringBuilder(); for (java.lang.String d : docs) { sb.append(d).append(""\n""); } if (((doc.args()) != null) && ((doc.args().length) > 0)) { java.lang.String[] args = doc.args(); java.lang.String[] argDocs = doc.argDocs(); sb.append(""\n Args:\n""); for (int x = 0; x < (doc.args().length); x++) { sb.append("" "").append(args[x]); if ((argDocs != null) && ((argDocs.length) > x)) { sb.append("" - ""); int indentOffset = ((args[x].length()) + 3) + 4; java.util.Collection<java.lang.String> lines = com.android.monkeyrunner.JythonUtils.splitString(argDocs[x], (80 - indentOffset)); boolean first = true; java.lang.String indent = com.android.monkeyrunner.JythonUtils.makeIndent(indentOffset); for (java.lang.String line : lines) { if (first) { first = false; sb.append(line).append(""\n""); } else { sb.append(indent).append(line).append(""\n""); } } } } } return sb.toString(); }",2b40139dac5fb87715ca2bf9f02f610c87d57fea,buildDoc(com.android.monkeyrunner.doc.MonkeyRunnerExported),388752,31,364
41115,src_java_com_android_internal_telephony_gsm_SIMRecords.java,26.0,"protected void onRadioOffOrNotAvailable() { imsi = null; msisdn = null; voiceMailNum = null; countVoiceMessages = 0; mncLength = UNINITIALIZED; iccid = null; spnDisplayCondition = -1; efMWIS = null; efCPHS_MWI = null; spdiNetworks = null; pnnHomeName = null; adnCache.reset(); log(""SIMRecords: onRadioOffOrNotAvailable set 'gsm.sim.operator.numeric' to operator=null""); android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_ICC_OPERATOR_NUMERIC, null); android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_ICC_OPERATOR_ALPHA, null); android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_ICC_OPERATOR_ISO_COUNTRY, null); recordsRequested = false; }",d3155985349d3133c3fdd2567427c9f3a33c6cf2,"protected void resetRecords() { imsi = null; msisdn = null; voiceMailNum = null; countVoiceMessages = 0; mncLength = UNINITIALIZED; iccid = null; spnDisplayCondition = -1; efMWIS = null; efCPHS_MWI = null; spdiNetworks = null; pnnHomeName = null; adnCache.reset(); log(""SIMRecords: onRadioOffOrNotAvailable set 'gsm.sim.operator.numeric' to operator=null""); android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_ICC_OPERATOR_NUMERIC, null); android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_ICC_OPERATOR_ALPHA, null); android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_ICC_OPERATOR_ISO_COUNTRY, null); recordsRequested = false; }",0ba981711a2574a8e518789d3e2d3260d56c36ae,onRadioOffOrNotAvailable(),resetRecords(),22,19,"protected void resetRecords() { mImsi = null; msisdn = null; voiceMailNum = null; countVoiceMessages = 0; mncLength = UNINITIALIZED; iccid = null; spnDisplayCondition = -1; efMWIS = null; efCPHS_MWI = null; spdiNetworks = null; pnnHomeName = null; adnCache.reset(); log(""SIMRecords: onRadioOffOrNotAvailable set 'gsm.sim.operator.numeric' to operator=null""); android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_ICC_OPERATOR_NUMERIC, null); android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_ICC_OPERATOR_ALPHA, null); android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_ICC_OPERATOR_ISO_COUNTRY, null); recordsRequested = false; }",45c83632ad9939e6565a5fc0343f9f925e83fcf5,resetRecords(),500122,223,224
41115,src_java_com_android_internal_telephony_UiccCardApplication.java,,,,public com.android.internal.telephony.IccCardApplicationStatus.AppState getState() { return mAppState; },bc477aa588873234c795af795fcb38939e2d5d9e,,getState(),22,32,public com.android.internal.telephony.IccCardApplicationStatus.AppState getState() { synchronized(mLock) { return mAppState; } },d9415645fb126eeef0eebc171890b3fe4e482a5f,getState(),499281,27,34
21795,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_AddonSitesDialog.java,,,,private void postCreate() { mListViewer.setLabelProvider(new org.eclipse.jface.viewers.LabelProvider()); mListViewer.setContentProvider(new com.android.sdkuilib.internal.repository.AddonSitesDialog.SourcesContentProvider()); if ((mUpdaterData) != null) { loadList(); } },c2c8d1b6cc600587dd694ee5cf546e961f478b99,,postCreate(),4,14,private void postCreate() { mTableViewer.setLabelProvider(new org.eclipse.jface.viewers.LabelProvider()); mTableViewer.setContentProvider(new com.android.sdkuilib.internal.repository.AddonSitesDialog.SourcesContentProvider()); loadList(); },bb680ef050b8853ea53ca484395d724d030a81ac,postCreate(),244699,70,58
586125,services_core_java_com_android_server_connectivity_DnsManager.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void updatePrivateDns(android.net.Network network, com.android.server.connectivity.DnsManager.ResolvedPrivateDnsHostname resolvedName) { android.util.Slog.w(com.android.server.connectivity.DnsManager.TAG, ((((""updatePrivateDns("" + network) + "", "") + resolvedName) + "")"")); mPrivateDnsMap.put(network.netId, resolvedName); }",608e41a98094db401aa3fb9bbc355facb3465a73,,"updatePrivateDns(android.net.Network,com.android.server.connectivity.DnsManager$ResolvedPrivateDnsHostname)",12,2,"public com.android.server.connectivity.DnsManager.PrivateDnsConfig updatePrivateDns(android.net.Network network, com.android.server.connectivity.DnsManager.PrivateDnsConfig cfg) { android.util.Slog.w(com.android.server.connectivity.DnsManager.TAG, ((((""updatePrivateDns("" + network) + "", "") + cfg) + "")"")); return cfg != null ? mPrivateDnsMap.put(network.netId, cfg) : mPrivateDnsMap.remove(network); }",2b5fead504616ad07ae47f0927c8b84e1ce6e3fc,"updatePrivateDns(android.net.Network,com.android.server.connectivity.DnsManager$PrivateDnsConfig)",465783,94,120
49901,builder_src_main_java_com_android_builder_BuildType.java,8.0,@java.lang.Override public int hashCode() { int result = super.hashCode(); result = (31 * result) + (mName.hashCode()); result = (31 * result) + (mDebuggable ? 1 : 0); result = (31 * result) + (mDebugJniBuild ? 1 : 0); result = (31 * result) + ((mPackageNameSuffix) != null ? mPackageNameSuffix.hashCode() : 0); result = (31 * result) + ((mVersionNameSuffix) != null ? mVersionNameSuffix.hashCode() : 0); result = (31 * result) + (mRunProguard ? 1 : 0); result = (31 * result) + (mZipAlign ? 1 : 0); result = (31 * result) + ((mSigningConfig) != null ? mSigningConfig.hashCode() : 0); return result; },c80888fd8ff9bfe13834bc07c41aca83cba8657f,@java.lang.Override public int hashCode() { int result = super.hashCode(); result = (31 * result) + (mDebuggable ? 1 : 0); result = (31 * result) + (mDebugJniBuild ? 1 : 0); result = (31 * result) + ((mPackageNameSuffix) != null ? mPackageNameSuffix.hashCode() : 0); result = (31 * result) + ((mVersionNameSuffix) != null ? mVersionNameSuffix.hashCode() : 0); result = (31 * result) + (mRunProguard ? 1 : 0); result = (31 * result) + (mZipAlign ? 1 : 0); result = (31 * result) + ((mSigningConfig) != null ? mSigningConfig.hashCode() : 0); return result; },c6e4aa9855727b86f9b480a941701117bd2506ef,hashCode(),hashCode(),3,8,@java.lang.Override public int hashCode() { int result = super.hashCode(); result = (31 * result) + (mName.hashCode()); result = (31 * result) + (mDebuggable ? 1 : 0); result = (31 * result) + (mDebugJniBuild ? 1 : 0); result = (31 * result) + ((mPackageNameSuffix) != null ? mPackageNameSuffix.hashCode() : 0); result = (31 * result) + ((mVersionNameSuffix) != null ? mVersionNameSuffix.hashCode() : 0); result = (31 * result) + (mRunProguard ? 1 : 0); result = (31 * result) + (mZipAlign ? 1 : 0); result = (31 * result) + ((mSigningConfig) != null ? mSigningConfig.hashCode() : 0); return result; },c80888fd8ff9bfe13834bc07c41aca83cba8657f,hashCode(),75481,175,189
460596,core_java_android_bluetooth_BluetoothHeadset.java,32.0,"public boolean connect(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log(((""connect("" + device) + "")"")); if ((((mService) != null) && (isEnabled())) && (isValidDevice(device))) { try { return mService.connect(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return false; } } if ((mService) == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, ""Proxy not attached to service""); return false; }",b59bd4da54b3b2bf8cfb03bb32a500d44be8f544,"public boolean connect(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log(((""connect("" + device) + "")"")); final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (isValidDevice(device))) { try { return service.connect(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return false; } } if (service == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, ""Proxy not attached to service""); return false; }",3d62ea60bc1b0b38d00747b21a8792cc4bce0903,connect(android.bluetooth.BluetoothDevice),connect(android.bluetooth.BluetoothDevice),17,32,"public boolean connect(android.bluetooth.BluetoothDevice device) { if (android.bluetooth.BluetoothHeadset.DBG) android.bluetooth.BluetoothHeadset.log(((""connect("" + device) + "")"")); final android.bluetooth.IBluetoothHeadset service = mService; if (((service != null) && (isEnabled())) && (android.bluetooth.BluetoothHeadset.isValidDevice(device))) { try { return service.connect(device); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return false; } } if (service == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, ""Proxy not attached to service""); return false; }",e4559b77e4df0399c60c7f77d809ab1ca94c2a24,connect(android.bluetooth.BluetoothDevice),41166,172,180
173845,libart_src_main_java_java_lang_Daemons.java,14.0,@java.lang.Override public void run() { while (isRunning()) { boolean waitSuccessful = waitForObject(); if (waitSuccessful == false) { continue; } boolean finalized = waitForFinalization(); if ((!finalized) && (!(dalvik.system.VMRuntime.getRuntime().isDebuggerActive()))) { java.lang.Object finalizedObject = java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingObject; if (finalizedObject != null) { java.lang.Daemons.FinalizerWatchdogDaemon.finalizerTimedOut(finalizedObject); break; } } } },20a2948c8cad15aa755c0de540c7f3e49ac32ce5,@java.lang.Override public void run() { while (isRunning()) { boolean needed = sleepUntilNeeded(); if (!needed) { continue; } boolean finalized = waitForFinalization(); if ((!finalized) && (!(dalvik.system.VMRuntime.getRuntime().isDebuggerActive()))) { java.lang.Object finalizedObject = java.lang.Daemons.FinalizerDaemon.INSTANCE.finalizingObject; if (finalizedObject != null) { java.lang.Daemons.FinalizerWatchdogDaemon.finalizerTimedOut(finalizedObject); break; } } } },aa899ebe1d8fdd0fb867d74fb4c8426dfe8f05db,run(),run(),8,14,@java.lang.Override public void run() { while (isRunning()) { if (!(sleepUntilNeeded())) { continue; } final java.lang.ref.FinalizerReference<?> finalizing = waitForFinalization(); if ((finalizing != null) && (!(dalvik.system.VMRuntime.getRuntime().isDebuggerActive()))) { java.lang.Daemons.FinalizerWatchdogDaemon.finalizerTimedOut(finalizing); break; } } },80b9313c80d1cfacc8a4a58a67bd200ea9eb435b,run(),293243,119,91
155011,jill_src_com_android_jill_Jill.java,1.0,"@javax.annotation.Nonnull public static com.android.jill.Version getVersion() { if ((com.android.jill.Jill.version) == null) { java.io.InputStream is = com.android.jill.Jill.class.getClassLoader().getResourceAsStream(com.android.jill.Jill.PROPERTIES_FILE); if (is != null) { com.android.jill.Jill.version = new com.android.jill.Version(is); } else { java.lang.System.err.println((""Failed to open Jack properties file "" + (com.android.jill.Jill.PROPERTIES_FILE))); throw new java.lang.AssertionError(); } } assert (com.android.jill.Jill.version) != null; return com.android.jill.Jill.version; }",1879f7fe87f2727da1ab23e65ca03570a3ddc707,"@javax.annotation.Nonnull public static com.android.sched.util.Version getVersion() { if ((com.android.jill.Jill.version) == null) { try { com.android.jill.Jill.version = com.android.sched.util.Version.getVersion(""jill"", com.android.jill.Jill.class.getClassLoader()); } catch (java.io.IOException e) { java.lang.System.err.println((""Failed to read version properties file: "" + (e.getMessage()))); throw new java.lang.AssertionError(); } catch (com.android.sched.util.codec.ParsingException e) { java.lang.System.err.println((""Failed to parse version properties file: "" + (e.getMessage()))); throw new java.lang.AssertionError(); } } assert (com.android.jill.Jill.version) != null; return com.android.jill.Jill.version; }",0fef5c0244f4b30709c036048b54aafd5920f7e4,getVersion(),getVersion(),6,1,"@javax.annotation.Nonnull public static com.android.sched.util.Version getVersion() { if ((com.android.jill.Jill.version) == null) { try { com.android.jill.Jill.version = new com.android.sched.util.Version(""jill"", com.android.jill.Jill.class.getClassLoader()); } catch (java.io.IOException e) { java.lang.System.err.println((""Failed to read version properties file: "" + (e.getMessage()))); throw new java.lang.AssertionError(); } } assert (com.android.jill.Jill.version) != null; return com.android.jill.Jill.version; }",3b61bae0fe9b370a6255029524dce75e6a1b7091,getVersion(),325529,221,170
316760,packages_SystemUI_src_com_android_systemui_qs_tiles_NfcTile.java,,,,"@java.lang.Override protected void handleUpdateState(com.android.systemui.qs.tiles.BooleanState state, java.lang.Object arg) { getAdapter(); final android.graphics.drawable.Drawable mEnable = mContext.getDrawable(R.drawable.ic_qs_nfc_enabled); final android.graphics.drawable.Drawable mDisable = mContext.getDrawable(R.drawable.ic_qs_nfc_disabled); state.label = mContext.getString(R.string.quick_settings_nfc_label); if (shouldHide()) { android.graphics.drawable.Drawable icon = mDisable.mutate(); final int disabledColor = mContext.getColor(R.color.qs_tile_tint_unavailable); icon.setTint(disabledColor); state.icon = new com.android.systemui.qs.tiles.DrawableIcon(icon); state.label = new android.text.SpannableStringBuilder().append(state.label, new android.text.style.ForegroundColorSpan(disabledColor), SpannableStringBuilder.SPAN_INCLUSIVE_INCLUSIVE); return; } state.value = mAdapter.isEnabled(); final com.android.systemui.qs.tiles.DrawableIcon icon = new com.android.systemui.qs.tiles.DrawableIcon((state.value ? mEnable : mDisable)); state.icon = icon; state.minimalAccessibilityClassName = state.expandedAccessibilityClassName = android.widget.Switch.class.getName(); state.contentDescription = state.label; }",409fdc21d8a1193fe6b9626eaf85c317ad6c4e8b,,"handleUpdateState(com.android.systemui.qs.tiles.BooleanState,java.lang.Object)",22,8,"@java.lang.Override protected void handleUpdateState(com.android.systemui.qs.tiles.BooleanState state, java.lang.Object arg) { final android.graphics.drawable.Drawable mEnable = mContext.getDrawable(R.drawable.ic_qs_nfc_enabled); final android.graphics.drawable.Drawable mDisable = mContext.getDrawable(R.drawable.ic_qs_nfc_disabled); state.value = ((mAdapter) == null) ? false : mAdapter.isEnabled(); state.label = mContext.getString(R.string.quick_settings_nfc_label); state.icon = new com.android.systemui.qs.tiles.DrawableIcon((state.value ? mEnable : mDisable)); state.minimalAccessibilityClassName = state.expandedAccessibilityClassName = android.widget.Switch.class.getName(); state.contentDescription = state.label; }",bcd6794e3cdc86783d853263264e0311521fc34c,"handleUpdateState(com.android.systemui.qs.tiles.BooleanState,java.lang.Object)",222938,336,201
101172,perflib_src_test_java_com_android_tools_perflib_heap_analysis_SyntheticHeap.java,,,,"public com.android.tools.perflib.heap.analysis.SyntheticHeap addEdge(int nodeA, int nodeB) { com.android.tools.perflib.heap.Value link = new com.android.tools.perflib.heap.Value(mNodes[nodeA]); link.setValue(mNodes[nodeB]); mNodes[nodeA].addField(new com.android.tools.perflib.heap.Field(com.android.tools.perflib.heap.Type.OBJECT, (""f"" + nodeB)), link); return this; }",be6b7d4f81fa899d99723def77f9e806e660e56e,,"addEdge(int,int)",5,1,"public com.android.tools.perflib.heap.analysis.HeapBuilder addReference(int nodeFrom, int nodeTo) { com.android.tools.perflib.heap.Value link = new com.android.tools.perflib.heap.Value(mNodes[nodeFrom]); link.setValue(mNodes[nodeTo]); mNodes[nodeFrom].addField(new com.android.tools.perflib.heap.Field(com.android.tools.perflib.heap.Type.OBJECT, (""f"" + nodeTo)), link); return this; }",b07f48bbc994a6033ad1e47d57b96cd622ccb1ea,"addReference(int,int)",504682,127,127
81416,tests_tests_renderscript_src_android_renderscript_cts_TestCross.java,,,,public void testCross() { checkCrossFloat3Float3(); checkCrossFloat4Float4(); },cbd80423f641a1902ab2c4a1445ee00cb3279109,,testCross(),9,1,public void testCross() { checkCrossFloat3Float3Float3(); checkCrossFloat4Float4Float4(); },3610c4ff53b5d90543bab8ec17f054f7ecb75ce7,testCross(),143176,21,25
108516,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,33.0,"public void test_format_minus_zero() throws java.lang.Exception { final java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(java.util.Locale.US); java.text.DecimalFormat df = new java.text.DecimalFormat(""00.0#E0"", dfs); compare(""00.0#E0: -0.0"", df.format((-0.0)), ""-00.0E0""); df = new java.text.DecimalFormat(""##0.0E0"", dfs); compare(""##0.0E0: -0.0"", df.format((-0.0)), ""-0.0E0""); df = new java.text.DecimalFormat(""#.0E0"", dfs); compare(""#.0E0: -0.0"", df.format((-0.0)), ""-.0E0""); df = new java.text.DecimalFormat(""0.#E0"", dfs); compare(""0.#E0: -0.0"", df.format((-0.0)), ""-0E0""); df = new java.text.DecimalFormat("".0E0"", dfs); compare("".0E0: -0.0"", df.format((-0.0)), ""-.0E0""); }",7ba45d71436c6f3fe5732a93ac5b74f387697101,"public void testFormatDouble_scientificNotationMinusZero() throws java.lang.Exception { final java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(java.util.Locale.US); java.text.DecimalFormat df = new java.text.DecimalFormat(""00.0#E0"", dfs); assertEquals(""00.0#E0: -0.0"", ""-00.0E0"", df.format((-0.0))); df = new java.text.DecimalFormat(""##0.0E0"", dfs); assertEquals(""##0.0E0: -0.0"", ""-0.0E0"", df.format((-0.0))); df = new java.text.DecimalFormat(""#.0E0"", dfs); assertEquals(""#.0E0: -0.0"", ""-.0E0"", df.format((-0.0))); df = new java.text.DecimalFormat(""0.#E0"", dfs); assertEquals(""0.#E0: -0.0"", ""-0E0"", df.format((-0.0))); df = new java.text.DecimalFormat("".0E0"", dfs); assertEquals("".0E0: -0.0"", ""-.0E0"", df.format((-0.0))); }",2d42efaccde1df2e23d965eab5f9ff88c95ae900,test_format_minus_zero(),testFormatDouble_scientificNotationMinusZero(),2,71,"public void test_formatDouble_scientificNotationMinusZero() throws java.lang.Exception { final java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(java.util.Locale.US); java.text.DecimalFormat df = new java.text.DecimalFormat(""00.0#E0"", dfs); assertEquals(""00.0#E0: -0.0"", ""-00.0E0"", df.format((-0.0))); df = new java.text.DecimalFormat(""##0.0E0"", dfs); assertEquals(""##0.0E0: -0.0"", ""-0.0E0"", df.format((-0.0))); df = new java.text.DecimalFormat(""#.0E0"", dfs); assertEquals(""#.0E0: -0.0"", ""-.0E0"", df.format((-0.0))); df = new java.text.DecimalFormat(""0.#E0"", dfs); assertEquals(""0.#E0: -0.0"", ""-0E0"", df.format((-0.0))); df = new java.text.DecimalFormat("".0E0"", dfs); assertEquals("".0E0: -0.0"", ""-.0E0"", df.format((-0.0))); }",e4fc195628f9d0c6d04b618bbd34aaf32e0e9c05,test_formatDouble_scientificNotationMinusZero(),84413,238,239
613398,telephony_java_android_telephony_TelephonyManager.java,143.0,public boolean isVideoTelephonyAvailable() { try { return getITelephony().isVideoTelephonyAvailable(); } catch (android.os.RemoteException ex) { return false; } catch (java.lang.NullPointerException ex) { return false; } },3db2ed1a856ef93c05f6fd3de30b20c412a882a5,public boolean isVideoTelephonyAvailable() { return isVideoTelephonyAvailable(SubscriptionManager.DEFAULT_SUBSCRIPTION_ID); },6dd9b16664a5a1d401ab2b7c548081b72b1e9048,isVideoTelephonyAvailable(),isVideoTelephonyAvailable(),4,132,@android.telephony.ims.stub.ImsRegistrationImplBase.ImsRegistrationTech public int getImsRegTechnologyForMmTel() { try { return getITelephony().getImsRegTechnologyForMmTel(getSubId()); } catch (android.os.RemoteException ex) { return android.telephony.ims.stub.ImsRegistrationImplBase.REGISTRATION_TECH_NONE; } },dd0aa110e982c59777cb3d3cdba0522dffe5b3b0,getImsRegTechnologyForMmTel(),475812,30,92
123032,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_truth_ApkSubject.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.SuppressWarnings(""NonBooleanMethodNameMayNotStartWithQuestion"") public void hasVersionName(java.lang.String versionName) throws com.android.ide.common.process.ProcessException { java.io.File apk = getSubject(); com.android.ide.common.process.ProcessExecutor processExecutor = new com.android.ide.common.process.DefaultProcessExecutor(new com.android.utils.StdLogger(StdLogger.Level.ERROR)); com.android.builder.core.ApkInfoParser parser = new com.android.builder.core.ApkInfoParser(com.android.build.gradle.integration.common.utils.SdkHelper.getAapt(), processExecutor); com.android.builder.core.ApkInfoParser.ApkInfo apkInfo = parser.parseApk(apk); java.lang.String actualVersionName = apkInfo.getVersionName(); if (actualVersionName == null) { failWithRawMessage(""Unable to query %s for versionName"", getDisplaySubject()); } if (!(apkInfo.getVersionName().equals(versionName))) { failWithBadResults(""has versionName"", versionName, ""is"", actualVersionName); } }",166eac03c44a71e8893d96bcc5748af86d06a1da,,hasVersionName(java.lang.String),3,6,"@java.lang.SuppressWarnings(""NonBooleanMethodNameMayNotStartWithQuestion"") public void hasVersionName(java.lang.String versionName) throws com.android.ide.common.process.ProcessException { java.io.File apk = getSubject(); com.android.builder.core.ApkInfoParser.ApkInfo apkInfo = com.android.build.gradle.integration.common.truth.ApkSubject.getApkInfo(apk); java.lang.String actualVersionName = apkInfo.getVersionName(); if (actualVersionName == null) { failWithRawMessage(""Unable to query %s for versionName"", getDisplaySubject()); } if (!(apkInfo.getVersionName().equals(versionName))) { failWithBadResults(""has versionName"", versionName, ""is"", actualVersionName); } }",1dd6d3c225c7afee733b9a17a309405f24f0b6bd,hasVersionName(java.lang.String),328524,252,174
42594,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_ui_PackagesPage.java,37.0,@java.lang.Override public org.eclipse.swt.graphics.Image getImage(java.lang.Object element) { com.android.sdkuilib.internal.repository.icons.ImageFactory imgFactory = mUpdaterData.getImageFactory(); if (imgFactory != null) { if ((mColumn) == (mColumnName)) { if (element instanceof com.android.sdkuilib.internal.repository.core.PkgCategory) { return imgFactory.getImageForObject(((com.android.sdkuilib.internal.repository.core.PkgCategory) (element)).getIconRef()); } else if (element instanceof com.android.sdkuilib.internal.repository.core.PkgItem) { return imgFactory.getImageForObject(((com.android.sdkuilib.internal.repository.core.PkgItem) (element)).getMainPackage()); } return imgFactory.getImageForObject(element); } else if (((mColumn) == (mColumnStatus)) && (element instanceof com.android.sdkuilib.internal.repository.core.PkgItem)) { com.android.sdkuilib.internal.repository.core.PkgItem pi = ((com.android.sdkuilib.internal.repository.core.PkgItem) (element)); switch (pi.getState()) { case INSTALLED : if (pi.hasUpdatePkg()) { return imgFactory.getImageByName(com.android.sdkuilib.internal.repository.ui.PackagesPage.ICON_PKG_UPDATE); } else { return imgFactory.getImageByName(com.android.sdkuilib.internal.repository.ui.PackagesPage.ICON_PKG_INSTALLED); } case NEW : java.lang.Package p = pi.getMainPackage(); if ((p != null) && (p.hasCompatibleArchive())) { return imgFactory.getImageByName(com.android.sdkuilib.internal.repository.ui.PackagesPage.ICON_PKG_NEW); } else { return imgFactory.getImageByName(com.android.sdkuilib.internal.repository.ui.PackagesPage.ICON_PKG_INCOMPAT); } } } } return super.getImage(element); },5eb677af16cd8606065607af57206962b26617ca,@java.lang.Override public org.eclipse.swt.graphics.Image getImage(java.lang.Object element) { com.android.sdkuilib.internal.repository.icons.ImageFactory imgFactory = mImpl.mUpdaterData.getImageFactory(); if (imgFactory != null) { if ((mColumn) == (mImpl.mColumnName)) { if (element instanceof com.android.sdkuilib.internal.repository.core.PkgCategory) { return imgFactory.getImageForObject(((com.android.sdkuilib.internal.repository.core.PkgCategory) (element)).getIconRef()); } else if (element instanceof com.android.sdkuilib.internal.repository.core.PkgItem) { return imgFactory.getImageForObject(((com.android.sdkuilib.internal.repository.core.PkgItem) (element)).getMainPackage()); } return imgFactory.getImageForObject(element); } else if (((mColumn) == (mImpl.mColumnStatus)) && (element instanceof com.android.sdkuilib.internal.repository.core.PkgItem)) { com.android.sdkuilib.internal.repository.core.PkgItem pi = ((com.android.sdkuilib.internal.repository.core.PkgItem) (element)); switch (pi.getState()) { case INSTALLED : if (pi.hasUpdatePkg()) { return imgFactory.getImageByName(PackagesPageIcons.ICON_PKG_UPDATE); } else { return imgFactory.getImageByName(PackagesPageIcons.ICON_PKG_INSTALLED); } case NEW : java.lang.Package p = pi.getMainPackage(); if ((p != null) && (p.hasCompatibleArchive())) { return imgFactory.getImageByName(PackagesPageIcons.ICON_PKG_NEW); } else { return imgFactory.getImageByName(PackagesPageIcons.ICON_PKG_INCOMPAT); } } } } return super.getImage(element); },a02c57878fc2edba49dd23440b4ba93e4a2c6157,getImage(java.lang.Object),getImage(java.lang.Object),8,44,@java.lang.Override protected void syncExec(java.lang.Runnable runnable) { if (!(isUiDisposed())) { mGroupPackages.getDisplay().syncExec(runnable); } },16a45e79d055ee97dc634714e198aa86ab24cda5,syncExec(java.lang.Runnable),195224,427,40
280681,jack-tests_tests_com_android_jack_java8_lambda_test042_Tests.java,,,,public static final int getValue(int arg1) { class LocalClass { public int getValue() { com.android.jack.java8.lambda.test042.I i = () -> com.android.jack.java8.lambda.test042.Tests.move(() -> arg1); return i.getValue(); } } return new LocalClass().getValue(); },672fcc95b888b632ca33bbb19378c45af682ff3d,,getValue(int),3,1,"public static final int getValue(int arg1) { class LocalClass { public int getValue() { java.lang.String checkCaptureOder = ""str""; com.android.jack.java8.lambda.test042.I i = () -> com.android.jack.java8.lambda.test042.Tests.move(() -> { return (checkCaptureOder.length()) + arg1; }); return i.getValue(); } } return new LocalClass().getValue(); }",dc6e47ecaa9aeee3c7c8c626f838bb3f49596b5c,getValue(int),218621,78,103
187693,test_445-checker-licm_src_Main.java,4.0,"public static void main(java.lang.String[] args) { Main.assertEquals(10, Main.div()); Main.assertEquals(100, Main.innerDiv()); Main.assertEquals(12, Main.arrayLength(new int[]{ 4, 8 })); }",01f3640a6eea1d127c77e21fba3338ecf9397f88,"public static void main(java.lang.String[] args) { Main.assertEquals(10, Main.div()); Main.assertEquals(100, Main.innerDiv()); Main.assertEquals(18900, Main.innerMul()); Main.assertEquals(105, Main.divByA(2, 0)); Main.assertEquals(12, Main.arrayLength(new int[]{ 4, 8 })); Main.assertEquals(21, Main.divAndIntrinsic(new int[]{ 4, -2, 8, -3 })); }",57d4f83e55b64455522836b373d26f2438178228,main(java.lang.String[]),main(java.lang.String[]),15,5,"public static void main(java.lang.String[] args) { Main.assertEquals(10, Main.div()); Main.assertEquals(100, Main.innerDiv()); Main.assertEquals(18900, Main.innerMul()); Main.assertEquals(105, Main.divByA(2, 0)); Main.assertEquals(12, Main.arrayLength(new int[]{ 4, 8 })); Main.assertEquals(21, Main.divAndIntrinsic(new int[]{ 4, -2, 8, -3 })); Main.assertEquals(45, Main.invariantBoundIntrinsic((-10))); Main.assertEquals(30, Main.invariantBodyIntrinsic(2, 3)); }",6aae36fb0f490cad7f578e829e5284d1d56d9d10,main(java.lang.String[]),303862,96,124
20800,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_xml_Hyperlinks.java,51.0,"private static org.eclipse.core.resources.IResource findNonValueFile(org.eclipse.core.resources.IProject project, com.android.ide.eclipse.adt.internal.resources.ResourceType type, java.lang.String name) { com.android.ide.eclipse.adt.internal.resources.manager.ProjectResources resources = com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.getResources(project, false); if (resources == null) { return null; } com.android.ide.eclipse.adt.internal.resources.configurations.FolderConfiguration configuration = com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.getConfiguration(); if (configuration != null) { org.eclipse.core.resources.IResource file = com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.findFileByConfig(type, name, resources, configuration); if (file != null) { return file; } } return com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.findFileByConfig(type, name, resources, null); }",b314c010f21f989c8a24f4ceddcf81feae1c2ec3,"private static com.android.sdklib.util.Pair<org.eclipse.core.resources.IFile, org.eclipse.jface.text.IRegion> findIdInFolder(org.eclipse.core.resources.IContainer f, java.lang.String id) { try { for (org.eclipse.core.resources.IResource resource : f.members()) { if (((resource.exists()) && (!(resource.isDerived()))) && (resource instanceof org.eclipse.core.resources.IFile)) { org.eclipse.core.resources.IFile file = ((org.eclipse.core.resources.IFile) (resource)); if (com.android.ide.eclipse.adt.AndroidConstants.EXT_XML.equals(file.getFileExtension())) { com.android.sdklib.util.Pair<org.eclipse.core.resources.IFile, org.eclipse.jface.text.IRegion> target = com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.findIdInXml(id, file); if (target != null) { return target; } } } } } catch (org.eclipse.core.runtime.CoreException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, """"); } return null; }",54c85227c7b9fa0e6a4ccb8a5964a6aae23e07cf,"findNonValueFile(org.eclipse.core.resources.IProject,com.android.ide.eclipse.adt.internal.resources.ResourceType,java.lang.String)","findIdInFolder(org.eclipse.core.resources.IContainer,java.lang.String)",2,33,"private static com.android.util.Pair<org.eclipse.core.resources.IFile, org.eclipse.jface.text.IRegion> findIdInFolder(org.eclipse.core.resources.IContainer f, java.lang.String id) { try { for (org.eclipse.core.resources.IResource resource : f.members()) { if (((resource.exists()) && (!(resource.isDerived()))) && (resource instanceof org.eclipse.core.resources.IFile)) { org.eclipse.core.resources.IFile file = ((org.eclipse.core.resources.IFile) (resource)); if (com.android.ide.eclipse.adt.AndroidConstants.EXT_XML.equals(file.getFileExtension())) { com.android.util.Pair<org.eclipse.core.resources.IFile, org.eclipse.jface.text.IRegion> target = com.android.ide.eclipse.adt.internal.editors.xml.Hyperlinks.findIdInXml(id, file); if (target != null) { return target; } } } } } catch (org.eclipse.core.runtime.CoreException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, """"); } return null; }",21d799fa6127aefd329cc4f78acf4061f6725edc,"findIdInFolder(org.eclipse.core.resources.IContainer,java.lang.String)",334385,289,283
556766,src_java_com_android_internal_telephony_dataconnection_DcTracker.java,139.0,"@com.android.internal.annotations.VisibleForTesting public static android.telephony.data.DataProfile createDataProfile(com.android.internal.telephony.dataconnection.ApnSetting apn, int profileId) { int profileType; if ((apn.bearerBitmask) == 0) { profileType = android.telephony.data.DataProfile.TYPE_COMMON; } else if (android.telephony.ServiceState.bearerBitmapHasCdma(apn.bearerBitmask)) { profileType = android.telephony.data.DataProfile.TYPE_3GPP2; } else { profileType = android.telephony.data.DataProfile.TYPE_3GPP; } return new android.telephony.data.DataProfile(profileId, apn.apn, apn.protocol, apn.authType, apn.user, apn.password, profileType, apn.maxConnsTime, apn.maxConns, apn.waitTime, apn.carrierEnabled, apn.typesBitmap, apn.roamingProtocol, apn.bearerBitmask, apn.mtu, apn.mvnoType, apn.mvnoMatchData, apn.modemCognitive); }",6ca7166278a038dca0a13825bafe65a1a3e82587,"@com.android.internal.annotations.VisibleForTesting public static android.telephony.data.DataProfile createDataProfile(com.android.internal.telephony.dataconnection.ApnSetting apn, int profileId) { int profileType; int bearerBitmap = 0; if ((apn.networkTypeBitmask) != 0) { bearerBitmap = android.telephony.ServiceState.convertNetworkTypeBitmaskToBearerBitmask(apn.networkTypeBitmask); } else { bearerBitmap = apn.bearerBitmask; } if (bearerBitmap == 0) { profileType = android.telephony.data.DataProfile.TYPE_COMMON; } else if (android.telephony.ServiceState.bearerBitmapHasCdma(bearerBitmap)) { profileType = android.telephony.data.DataProfile.TYPE_3GPP2; } else { profileType = android.telephony.data.DataProfile.TYPE_3GPP; } return new android.telephony.data.DataProfile(profileId, apn.apn, apn.protocol, apn.authType, apn.user, apn.password, profileType, apn.maxConnsTime, apn.maxConns, apn.waitTime, apn.carrierEnabled, apn.typesBitmap, apn.roamingProtocol, bearerBitmap, apn.mtu, apn.mvnoType, apn.mvnoMatchData, apn.modemCognitive); }",32f71bdcd9d0f2fd3ae64c4b61a50eb8a27eaddf,"createDataProfile(com.android.internal.telephony.dataconnection.ApnSetting,int)","createDataProfile(com.android.internal.telephony.dataconnection.ApnSetting,int)",11,139,"@com.android.internal.annotations.VisibleForTesting public static android.telephony.data.DataProfile createDataProfile(com.android.internal.telephony.dataconnection.ApnSetting apn, int profileId) { int profileType; int bearerBitmap = 0; bearerBitmap = android.telephony.ServiceState.convertNetworkTypeBitmaskToBearerBitmask(apn.networkTypeBitmask); if (bearerBitmap == 0) { profileType = android.telephony.data.DataProfile.TYPE_COMMON; } else if (android.telephony.ServiceState.bearerBitmapHasCdma(bearerBitmap)) { profileType = android.telephony.data.DataProfile.TYPE_3GPP2; } else { profileType = android.telephony.data.DataProfile.TYPE_3GPP; } return new android.telephony.data.DataProfile(profileId, apn.apn, apn.protocol, apn.authType, apn.user, apn.password, profileType, apn.maxConnsTime, apn.maxConns, apn.waitTime, apn.carrierEnabled, apn.typesBitmap, apn.roamingProtocol, bearerBitmap, apn.mtu, apn.mvnoType, apn.mvnoMatchData, apn.modemCognitive); }",45d80cfaa6d1b30ee4e70bbd3dde1998806c6488,"createDataProfile(com.android.internal.telephony.dataconnection.ApnSetting,int)",97824,318,289
44841,luni_src_test_java_org_apache_harmony_security_tests_AlgNameMapperTest.java,1.0,"public void testHardcodedAliases() throws java.lang.Exception { final java.io.ByteArrayOutputStream errBuffer = new java.io.ByteArrayOutputStream(); java.io.PrintStream out = new java.io.PrintStream(errBuffer); for (int i = 0; i < (HARDCODED_ALIASES.length); i++) { try { assertEquals(HARDCODED_ALIASES[i][1], org.apache.harmony.security.utils.AlgNameMapper.map2AlgName(HARDCODED_ALIASES[i][0])); assertEquals(HARDCODED_ALIASES[i][0], org.apache.harmony.security.utils.AlgNameMapper.map2OID(HARDCODED_ALIASES[i][1])); assertEquals(HARDCODED_ALIASES[i][1], org.apache.harmony.security.utils.AlgNameMapper.getStandardName(HARDCODED_ALIASES[i][1].toUpperCase(java.util.Locale.US))); assertTrue(org.apache.harmony.security.utils.AlgNameMapper.isOID(HARDCODED_ALIASES[i][0])); } catch (java.lang.Throwable e) { out.append(((""Error encountered checking "" + (HARDCODED_ALIASES[i][1])) + ""\n"")); e.printStackTrace(out); } } out.flush(); if ((errBuffer.size()) > 0) { throw new java.lang.Exception(((""Errors encountered:\n\n"" + (errBuffer.toString())) + ""\n\n"")); } }",1ceb386db0d2a6e85fe71c0c8f1c04ad914623a7,"public void testHardcodedAliases() throws java.lang.Exception { final java.io.ByteArrayOutputStream errBuffer = new java.io.ByteArrayOutputStream(); java.io.PrintStream out = new java.io.PrintStream(errBuffer); for (int i = 0; i < (HARDCODED_ALIASES.length); i++) { try { assertEquals(HARDCODED_ALIASES[i][1].toUpperCase(java.util.Locale.US), org.apache.harmony.security.utils.AlgNameMapper.map2AlgName(HARDCODED_ALIASES[i][0]).toUpperCase(java.util.Locale.US)); assertEquals(HARDCODED_ALIASES[i][0], org.apache.harmony.security.utils.AlgNameMapper.map2OID(HARDCODED_ALIASES[i][1])); assertEquals(HARDCODED_ALIASES[i][1].toUpperCase(java.util.Locale.US), org.apache.harmony.security.utils.AlgNameMapper.getStandardName(HARDCODED_ALIASES[i][1].toUpperCase(java.util.Locale.US))); assertTrue(org.apache.harmony.security.utils.AlgNameMapper.isOID(HARDCODED_ALIASES[i][0])); } catch (java.lang.Throwable e) { out.append(((""Error encountered checking "" + (HARDCODED_ALIASES[i][1])) + ""\n"")); e.printStackTrace(out); } } out.flush(); if ((errBuffer.size()) > 0) { throw new java.lang.Exception(((""Errors encountered:\n\n"" + (errBuffer.toString())) + ""\n\n"")); } }",f5f9a3f3f1a77d43ec7c819096c9524be971715a,testHardcodedAliases(),testHardcodedAliases(),2,1,"public void testHardcodedAliases() throws java.lang.Exception { final java.io.ByteArrayOutputStream errBuffer = new java.io.ByteArrayOutputStream(); java.io.PrintStream out = new java.io.PrintStream(errBuffer); for (int i = 0; i < (HARDCODED_ALIASES.length); i++) { try { assertEquals(HARDCODED_ALIASES[i][1].toUpperCase(java.util.Locale.US), org.apache.harmony.security.utils.AlgNameMapper.map2AlgName(HARDCODED_ALIASES[i][0]).toUpperCase(java.util.Locale.US)); assertEquals(HARDCODED_ALIASES[i][0], org.apache.harmony.security.utils.AlgNameMapper.map2OID(HARDCODED_ALIASES[i][1])); assertEquals(HARDCODED_ALIASES[i][1].toUpperCase(java.util.Locale.US), org.apache.harmony.security.utils.AlgNameMapper.getStandardName(HARDCODED_ALIASES[i][1].toUpperCase(java.util.Locale.US)).toUpperCase(java.util.Locale.US)); assertTrue(org.apache.harmony.security.utils.AlgNameMapper.isOID(HARDCODED_ALIASES[i][0])); } catch (java.lang.Throwable e) { out.append(((""Error encountered checking "" + (HARDCODED_ALIASES[i][1])) + ""\n"")); e.printStackTrace(out); } } out.flush(); if ((errBuffer.size()) > 0) { throw new java.lang.Exception(((""Errors encountered:\n\n"" + (errBuffer.toString())) + ""\n\n"")); } }",18bee709f2fe6092f0e110b7cbb4706758de9c8b,testHardcodedAliases(),303088,362,373
44621,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_ChainAnalyzer.java,,,,public void check(java.security.cert.X509Certificate[] chain) throws java.security.cert.CertificateException { for (java.security.cert.X509Certificate cert : chain) { checkCert(cert); } },b1c32c5d87e8bdbd0f1d99be38de94c0ae4bb552,,check(java.security.cert.X509Certificate[]),2,1,public static final void check(java.security.cert.X509Certificate[] chain) throws java.security.cert.CertificateException { for (java.security.cert.X509Certificate cert : chain) { org.apache.harmony.xnet.provider.jsse.ChainStrengthAnalyzer.checkCert(cert); } },446125a02410baab5d22f7907a54a08092f263d5,check(java.security.cert.X509Certificate[]),210413,50,71
146404,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_tasks_UninstallTask.java,,,,@org.gradle.api.tasks.InputFile public java.io.File getAdbExe() { return adbExe; },630688e6ef36cf5e9a4c1da91161b0029998f39a,,getAdbExe(),6,5,@org.gradle.api.tasks.InputFile public java.io.File getAdbExe() { com.android.builder.sdk.SdkInfo sdkInfo = getBuilder().getSdkInfo(); if (sdkInfo == null) { return null; } return sdkInfo.getAdb(); },971dcb67b815a938deb627175e1579eedbbd095f,getAdbExe(),413243,28,63
607396,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceTest.java,3.0,"@org.junit.After public void tearDown() throws java.util.concurrent.TimeoutException { android.content.Intent stopIntent = new android.content.Intent(android.support.test.InstrumentationRegistry.getTargetContext(), com.android.bluetooth.hfp.HeadsetService.class); stopIntent.putExtra(AdapterService.EXTRA_ACTION, AdapterService.ACTION_SERVICE_STATE_CHANGED); stopIntent.putExtra(BluetoothAdapter.EXTRA_STATE, BluetoothAdapter.STATE_OFF); mServiceRule.startService(stopIntent); verify(com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService, timeout(com.android.bluetooth.hfp.HeadsetServiceTest.ASYNC_CALL_TIMEOUT_MILLIS)).onProfileServiceStateChanged(eq(com.android.bluetooth.hfp.HeadsetService.class.getName()), eq(BluetoothAdapter.STATE_OFF)); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); reset(com.android.bluetooth.hfp.HeadsetServiceTest.sObjectsFactory, com.android.bluetooth.hfp.HeadsetServiceTest.sAdapterService); mStateMachines.clear(); mCurrentDevice = null; }",7a1a6db993c812d92a94cdeb8c75b0d97e451625,"@org.junit.After public void tearDown() throws java.lang.Exception { com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfp.HeadsetService.class); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); mStateMachines.clear(); mCurrentDevice = null; java.lang.reflect.Method method = com.android.bluetooth.hfp.HeadsetObjectsFactory.class.getDeclaredMethod(""setInstanceForTesting"", com.android.bluetooth.hfp.HeadsetObjectsFactory.class); method.setAccessible(true); method.invoke(null, ((com.android.bluetooth.hfp.HeadsetObjectsFactory) (null))); mObjectsFactory = null; com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); mAdapterService = null; }",aebc3eecaf2bbc273d78bd91532274d57ef8c717,tearDown(),tearDown(),15,3,"@org.junit.After public void tearDown() throws java.lang.Exception { if (!(mTargetContext.getResources().getBoolean(R.bool.profile_supported_hs_hfp))) { return; } com.android.bluetooth.TestUtils.stopService(mServiceRule, com.android.bluetooth.hfp.HeadsetService.class); mHeadsetService = com.android.bluetooth.hfp.HeadsetService.getHeadsetService(); org.junit.Assert.assertNull(mHeadsetService); mStateMachines.clear(); mCurrentDevice = null; java.lang.reflect.Method method = com.android.bluetooth.hfp.HeadsetObjectsFactory.class.getDeclaredMethod(""setInstanceForTesting"", com.android.bluetooth.hfp.HeadsetObjectsFactory.class); method.setAccessible(true); method.invoke(null, ((com.android.bluetooth.hfp.HeadsetObjectsFactory) (null))); com.android.bluetooth.TestUtils.clearAdapterService(mAdapterService); }",d92111b27bc8bc837280aeb4fb7015e24299c65d,tearDown(),388058,205,221
656180,telephony_java_android_telephony_TelephonyManager.java,178.0,"public android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int keyType) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) { throw new java.lang.RuntimeException(""IMSI error: Subscriber Info is null""); } int subId = getSubId(android.telephony.SubscriptionManager.getDefaultDataSubscriptionId()); if ((keyType != (android.telephony.TelephonyManager.KEY_TYPE_EPDG)) && (keyType != (android.telephony.TelephonyManager.KEY_TYPE_WLAN))) { throw new java.lang.IllegalArgumentException(""IMSI error: Invalid key type""); } android.telephony.ImsiEncryptionInfo imsiEncryptionInfo = info.getCarrierInfoForImsiEncryption(subId, keyType, mContext.getOpPackageName()); if ((imsiEncryptionInfo == null) && (isImsiEncryptionRequired(subId, keyType))) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ""IMSI error: key is required but not found""); throw new java.lang.RuntimeException(""IMSI error: key is required but not found""); } return imsiEncryptionInfo; } catch (android.os.RemoteException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, (""getCarrierInfoForImsiEncryption RemoteException"" + ex)); throw new java.lang.RuntimeException(""IMSI error: Remote Exception""); } catch (java.lang.NullPointerException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, (""getCarrierInfoForImsiEncryption NullPointerException"" + ex)); throw new java.lang.RuntimeException(""IMSI error: Null Pointer exception""); } }",a9ce5c859e853ec5c767df7c66fd84b35b1d5e1c,"public android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int keyType) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) { throw new java.lang.RuntimeException(""IMSI error: Subscriber Info is null""); } int subId = getSubId(android.telephony.SubscriptionManager.getDefaultDataSubscriptionId()); if ((keyType != (android.telephony.TelephonyManager.KEY_TYPE_EPDG)) && (keyType != (android.telephony.TelephonyManager.KEY_TYPE_WLAN))) { throw new java.lang.IllegalArgumentException(""IMSI error: Invalid key type""); } android.telephony.ImsiEncryptionInfo imsiEncryptionInfo = info.getCarrierInfoForImsiEncryption(subId, keyType, mContext.getOpPackageName()); if ((imsiEncryptionInfo == null) && (isImsiEncryptionRequired(subId, keyType))) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ""IMSI error: key is required but not found""); throw new java.lang.RuntimeException(""IMSI error: key is required but not found""); } return imsiEncryptionInfo; } catch (android.os.RemoteException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, (""getCarrierInfoForImsiEncryption RemoteException"" + ex)); } catch (java.lang.NullPointerException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, (""getCarrierInfoForImsiEncryption NullPointerException"" + ex)); } return null; }",4c6f54e3239ab76a746bf74c31306782d78e6889,getCarrierInfoForImsiEncryption(int),getCarrierInfoForImsiEncryption(int),2,178,"public android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int keyType) { try { com.android.internal.telephony.IPhoneSubInfo info = getSubscriberInfo(); if (info == null) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ""IMSI error: Subscriber Info is null""); return null; } int subId = getSubId(android.telephony.SubscriptionManager.getDefaultDataSubscriptionId()); if ((keyType != (android.telephony.TelephonyManager.KEY_TYPE_EPDG)) && (keyType != (android.telephony.TelephonyManager.KEY_TYPE_WLAN))) { throw new java.lang.IllegalArgumentException(""IMSI error: Invalid key type""); } android.telephony.ImsiEncryptionInfo imsiEncryptionInfo = info.getCarrierInfoForImsiEncryption(subId, keyType, mContext.getOpPackageName()); if ((imsiEncryptionInfo == null) && (isImsiEncryptionRequired(subId, keyType))) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, ""IMSI error: key is required but not found""); throw new java.lang.IllegalArgumentException(""IMSI error: key is required but not found""); } return imsiEncryptionInfo; } catch (android.os.RemoteException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, (""getCarrierInfoForImsiEncryption RemoteException"" + ex)); } catch (java.lang.NullPointerException ex) { android.telephony.Rlog.e(android.telephony.TelephonyManager.TAG, (""getCarrierInfoForImsiEncryption NullPointerException"" + ex)); } return null; }",4ed5aa8b81b07fb667599de9a5d0c8b2e1d43520,getCarrierInfoForImsiEncryption(int),431,362,376
94162,src_com_android_providers_media_MediaProvider.java,82.0,"private static void sanityCheck(android.database.sqlite.SQLiteDatabase db, int fromVersion) { android.database.Cursor c1 = db.query(""audio_meta"", new java.lang.String[]{ ""count(*)"" }, null, null, null, null, null); android.database.Cursor c2 = db.query(""audio_meta"", new java.lang.String[]{ ""count(distinct _data)"" }, null, null, null, null, null); c1.moveToFirst(); c2.moveToFirst(); int num1 = c1.getInt(0); int num2 = c2.getInt(0); c1.close(); c2.close(); if (num1 != num2) { android.util.Log.e(com.android.providers.media.MediaProvider.TAG, ((((((""audio_meta._data column is not unique while upgrading"" + "" from schema "") + fromVersion) + "" : "") + num1) + ""/"") + num2)); db.execSQL(""DELETE FROM audio_meta;""); } }",0ac49ae34db8ded608a4726d823e9abea4cae7c5,"private static void sanityCheck(android.database.sqlite.SQLiteDatabase db, int fromVersion) { android.database.Cursor c1 = db.query(""audio_meta"", new java.lang.String[]{ ""count(*)"" }, null, null, null, null, null); android.database.Cursor c2 = db.query(""audio_meta"", new java.lang.String[]{ ""count(distinct _data)"" }, null, null, null, null, null); try { c1.moveToFirst(); c2.moveToFirst(); int num1 = c1.getInt(0); int num2 = c2.getInt(0); if (num1 != num2) { android.util.Log.e(com.android.providers.media.MediaProvider.TAG, ((((((""audio_meta._data column is not unique while upgrading"" + "" from schema "") + fromVersion) + "" : "") + num1) + ""/"") + num2)); db.execSQL(""DELETE FROM audio_meta;""); } } finally { libcore.io.IoUtils.closeQuietly(c1); libcore.io.IoUtils.closeQuietly(c2); } }",ea3004fac290919e6639adff4f6c7272a7b029fc,"sanityCheck(android.database.sqlite.SQLiteDatabase,int)","sanityCheck(android.database.sqlite.SQLiteDatabase,int)",2,82,"private static void sanityCheck(android.database.sqlite.SQLiteDatabase db, int fromVersion) { android.database.Cursor c1 = null; android.database.Cursor c2 = null; try { c1 = db.query(""audio_meta"", new java.lang.String[]{ ""count(*)"" }, null, null, null, null, null); c2 = db.query(""audio_meta"", new java.lang.String[]{ ""count(distinct _data)"" }, null, null, null, null, null); c1.moveToFirst(); c2.moveToFirst(); int num1 = c1.getInt(0); int num2 = c2.getInt(0); if (num1 != num2) { android.util.Log.e(com.android.providers.media.MediaProvider.TAG, ((((((""audio_meta._data column is not unique while upgrading"" + "" from schema "") + fromVersion) + "" : "") + num1) + ""/"") + num2)); db.execSQL(""DELETE FROM audio_meta;""); } } finally { libcore.io.IoUtils.closeQuietly(c1); libcore.io.IoUtils.closeQuietly(c2); } }",116f8b1d7527174a4ae84f1e7f10fd3d96c15665,"sanityCheck(android.database.sqlite.SQLiteDatabase,int)",491897,241,251
273763,service_java_com_android_server_wifi_util_WifiPermissionsUtil.java,,,,"private boolean checkCallersLocationPermission(java.lang.String pkgName) { boolean stat = false; if (((mWifiPermissionsWrapper.getUidPermission(Manifest.permission.ACCESS_FINE_LOCATION)) == (android.content.pm.PackageManager.PERMISSION_GRANTED)) && (checkAppOpAllowed(AppOpsManager.OP_FINE_LOCATION, pkgName))) { stat = true; } if (((mWifiPermissionsWrapper.getUidPermission(Manifest.permission.ACCESS_COARSE_LOCATION)) == (android.content.pm.PackageManager.PERMISSION_GRANTED)) && (checkAppOpAllowed(AppOpsManager.OP_COARSE_LOCATION, pkgName))) { stat = true; } if (isLegacyForeground(pkgName)) { stat = true; } if (com.android.server.wifi.util.WifiPermissionsUtil.VERBOSE_LOG) { android.util.Log.e(com.android.server.wifi.util.WifiPermissionsUtil.TAG, (""checkCallersLocationPermission "" + stat)); } if (!stat) { android.util.Log.e(com.android.server.wifi.util.WifiPermissionsUtil.TAG, (""Permission denial: Need ACCESS_COARSE_LOCATION or "" + ""ACCESS_FINE_LOCATION permission to get scan results"")); } return stat; }",ecd47fe059c6d74cb31b6ad1b1bc7d175255b3eb,,checkCallersLocationPermission(java.lang.String),8,4,"private boolean checkCallersLocationPermission(java.lang.String pkgName, int uid, int version) { if (((mWifiPermissionsWrapper.getUidPermission(Manifest.permission.ACCESS_COARSE_LOCATION, uid)) == (android.content.pm.PackageManager.PERMISSION_GRANTED)) && (checkAppOpAllowed(AppOpsManager.OP_COARSE_LOCATION, pkgName, uid))) { return true; } if (isLegacyForeground(pkgName, version)) { return true; } return false; }",438331616260de5123ebb0c14fac1d0f58678172,"checkCallersLocationPermission(java.lang.String,int,int)",377412,276,106
249263,dx_src_com_android_jack_dx_ssa_back_SsaToRop.java,8.0,"@java.lang.Override public void visitBlock(com.android.jack.dx.ssa.SsaBasicBlock b, com.android.jack.dx.ssa.SsaBasicBlock parent) { java.util.ArrayList<com.android.jack.dx.ssa.SsaInsn> insns = b.getInsns(); if (((insns.size()) == 1) && ((insns.get(0).getOpcode()) == (com.android.jack.dx.rop.code.Rops.GOTO))) { java.util.BitSet preds = ((java.util.BitSet) (b.getPredecessors().clone())); for (int i = preds.nextSetBit(0); i >= 0; i = preds.nextSetBit((i + 1))) { com.android.jack.dx.ssa.SsaBasicBlock pb = blocks.get(i); pb.replaceSuccessor(b.getIndex(), b.getPrimarySuccessorIndex()); } } }",ecfc3f054a1d1ac4cf09d31aff89267526962de5,"@java.lang.Override public void visitBlock(com.android.jack.dx.ssa.SsaBasicBlock b, com.android.jack.dx.ssa.SsaBasicBlock parent) { if (b.isEmptyGoto()) { java.util.BitSet preds = ((java.util.BitSet) (b.getPredecessors().clone())); for (int i = preds.nextSetBit(0); i >= 0; i = preds.nextSetBit((i + 1))) { com.android.jack.dx.ssa.SsaBasicBlock pb = blocks.get(i); pb.replaceSuccessor(b.getIndex(), b.getPrimarySuccessorIndex()); } } }",be0cd4a686f041354825859385b3727abaef2ce8,"visitBlock(com.android.jack.dx.ssa.SsaBasicBlock,com.android.jack.dx.ssa.SsaBasicBlock)","visitBlock(com.android.jack.dx.ssa.SsaBasicBlock,com.android.jack.dx.ssa.SsaBasicBlock)",8,7,"@java.lang.Override public void visitBlock(com.android.jack.dx.ssa.SsaBasicBlock b, com.android.jack.dx.ssa.SsaBasicBlock parent) { if (b.isSingleGoto()) { java.util.BitSet preds = ((java.util.BitSet) (b.getPredecessors().clone())); for (int i = preds.nextSetBit(0); i >= 0; i = preds.nextSetBit((i + 1))) { com.android.jack.dx.ssa.SsaBasicBlock pb = blocks.get(i); pb.replaceSuccessor(b.getIndex(), b.getPrimarySuccessorIndex()); } } }",b8cf181897b7e74af6652939d2fd897ccd81ada2,"visitBlock(com.android.jack.dx.ssa.SsaBasicBlock,com.android.jack.dx.ssa.SsaBasicBlock)",159569,147,148
591196,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,1.0,"public void getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",54e0b17fa407570f91f2ce845b068fd197ed0428,"public void getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<com.android.internal.telephony.uicc.asn1.Asn1Node> callback, android.os.Handler handler) { java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_GET_EUICC_INFO_1).build().toHex()); } return com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponse(response); }",9100cf37b3a0c8099de91f157e63b1cfd290fa6d,"getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)","getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)",8,1,"public void getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { sendApdu(newRequestProvider((com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder requestBuilder) -> requestBuilder.addStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(Tags.TAG_GET_EUICC_INFO_1).build().toHex())), ( response) -> response, callback, handler); }",1d7b5753c5c7ba1b5b1f40151469252e92920609,"getEuiccInfo1(com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)",396853,206,131
37807,ddms_libs_ddmlib_src_com_android_ddmlib_Device.java,54.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String constructName() { if (isEmulator()) { java.lang.String avdName = getAvdName(); if (avdName != null) { return java.lang.String.format(""%s [%s]"", avdName, getSerialNumber()); } else { java.lang.String manufacturer = cleanupStringForDisplay(getProperty(com.android.ddmlib.Device.DEVICE_MANUFACTURER_PROPERTY)); java.lang.String model = cleanupStringForDisplay(getProperty(com.android.ddmlib.Device.DEVICE_MODEL_PROPERTY)); java.lang.StringBuilder sb = new java.lang.StringBuilder(20); if (manufacturer != null) { sb.append(manufacturer); sb.append(com.android.ddmlib.Device.SEPARATOR); } if (model != null) { sb.append(model); sb.append(com.android.ddmlib.Device.SEPARATOR); } sb.append(getSerialNumber()); } } return getSerialNumber(); }",2aebab35d4b0217fd5f8acf1719a2a3c7c988170,,constructName(),3,58,"private java.lang.String constructName() { if (isEmulator()) { java.lang.String avdName = getAvdName(); if (avdName != null) { return java.lang.String.format(""%s [%s]"", avdName, getSerialNumber()); } else { return getSerialNumber(); } } else { java.lang.String manufacturer = cleanupStringForDisplay(getProperty(com.android.ddmlib.Device.DEVICE_MANUFACTURER_PROPERTY)); java.lang.String model = cleanupStringForDisplay(getProperty(com.android.ddmlib.Device.DEVICE_MODEL_PROPERTY)); java.lang.StringBuilder sb = new java.lang.StringBuilder(20); if (manufacturer != null) { sb.append(manufacturer); sb.append(com.android.ddmlib.Device.SEPARATOR); } if (model != null) { sb.append(model); sb.append(com.android.ddmlib.Device.SEPARATOR); } sb.append(getSerialNumber()); return sb.toString(); } }",0f1611d2f7c740e0ba2f644c84983dc7acd6ce23,constructName(),156174,216,224
285003,tools_ahat_src_heapdump_AhatClassInstance.java,,,,public java.util.List<com.android.ahat.heapdump.FieldValue> getValues() { return mFieldValues; },656650ad3c7a65a04ae934d223352d5bf3157515,,getValues(),7,8,public java.util.List<com.android.ahat.heapdump.FieldValue> getInstanceFields() { return java.util.Arrays.asList(mFieldValues); },7dd67c0d2ea42a4f274c1fbbf3a32dd0063ddfde,getInstanceFields(),183521,29,38
13616,src_com_android_contacts_RecentCallsListActivity.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void onClick(android.content.DialogInterface dialog, int which) { if ((dialog == (mClearLogConfirmationDialog)) && (which == (android.app.AlertDialog.BUTTON_POSITIVE))) { getContentResolver().delete(Calls.CONTENT_URI, null, null); startQuery(); } }",d2948712732af4e61a8da271436687cc9b310554,,"onClick(android.content.DialogInterface,int)",5,33,@java.lang.Override protected void onContentChanged() { startQuery(); },f3040ca3b6df08a23e2b5fee2390985fe650e8be,onContentChanged(),254995,63,17
411591,harnesses_tradefed_src_com_android_tradefed_targetprep_VtsPythonVirtualenvPreparer.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String getMD5(java.lang.String str) { try { java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5""); byte[] array = md.digest(str.getBytes()); java.lang.StringBuffer sb = new java.lang.StringBuffer(); for (int i = 0; i < (array.length); ++i) { sb.append(java.lang.Integer.toHexString((((array[i]) & 255) | 256)).substring(1, 3)); } return sb.toString(); } catch (java.security.NoSuchAlgorithmException e) { throw new java.lang.RuntimeException(""Error generating MD5 hash."", e); } }",7e25264df639601c28679f25db83d2e8819b35c1,,getMD5(java.lang.String),3,4,"private java.lang.String getMD5(java.lang.String str) throws java.lang.RuntimeException { try { java.security.MessageDigest md = java.security.MessageDigest.getInstance(""MD5""); byte[] array = md.digest(str.getBytes()); java.lang.StringBuffer sb = new java.lang.StringBuffer(); for (int i = 0; i < (array.length); ++i) { sb.append(java.lang.Integer.toHexString((((array[i]) & 255) | 256)).substring(1, 3)); } return sb.toString(); } catch (java.security.NoSuchAlgorithmException e) { throw new java.lang.RuntimeException(""Error generating MD5 hash."", e); } }",156ee0fa476a00f9c36818b284a58dff84bdce7d,getMD5(java.lang.String),164776,144,150
42401,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_AdtUtils.java,32.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void run() { com.android.ide.eclipse.adt.AdtUtils.closeEditors(project); },5833218c9cfc1c6c80b269df00633594e1601b8e,,run(),2,18,"@java.lang.Override public void run() { com.android.ide.eclipse.adt.AdtUtils.closeEditors(project, save); }",500fbce05b0f8e3493e270cc0faf449cb6e1783c,run(),229220,33,35
654568,src_com_android_bluetooth_a2dpsink_A2dpSinkStateMachine.java,10.0,"private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dpSink.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); mContext.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); log((((((""Connection state "" + device) + "": "") + prevState) + ""->"") + state)); }",ed24c21d5e40740c93807d0c02107058c8792314,"private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { if ((prevState != state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.A2DP_SINK); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dpSink.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); mContext.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); log((((((""Connection state "" + device) + "": "") + prevState) + ""->"") + state)); }",6181e5e3371c01121205fdb0c07fe01c5903208c,"onConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int)","onConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int)",18,10,"private void onConnectionStateChanged(android.bluetooth.BluetoothDevice device, int prevState, int state) { if ((prevState != state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.A2DP_SINK); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothA2dpSink.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); mContext.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); log((((((""Connection state "" + device) + "": "") + prevState) + ""->"") + state)); }",aa013b8278c1932f69dac66b4381bdb0c27baf69,"onConnectionStateChanged(android.bluetooth.BluetoothDevice,int,int)",136046,198,197
39573,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gle2_LayoutWindowCoordinator.java,11.0,@com.android.annotations.Nullable public static com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator get() { return com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator.sSingleton; },4c5edf4ea01996e2b35f3a77985188dae5e741c3,public void dispose() { org.eclipse.ui.IPartService service = mWindow.getPartService(); if (service != null) { service.removePartListener(this); } com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator.sCoordinators.remove(mWindow); },8eb3a450bbdfac35b14c32a3c40557814a0e0a71,get(),dispose(),3,17,public void dispose() { org.eclipse.ui.IPartService service = mWindow.getPartService(); if (service != null) { service.removePartListener(this); } synchronized(com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator.class) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.LayoutWindowCoordinator.sCoordinators.remove(mWindow); } },7fa15ae327eb11ac487f0c29dfd9add2bf1b875c,dispose(),235399,73,103
174172,jack-tests_tests_com_android_jack_annotation_processor_AnnotationProcessorTests.java,1.0,"@org.junit.Test public void compileWithAnnotationProcessorNoAuto_processorPath() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorPath(processors.getPath()); jack.setAnnotationProcessorClasses(java.util.Collections.singletonList(com.android.jack.annotation.processor.sample.processors.ResourceAnnotationProcessor.class.getName())); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); libOut.getFile(FileType.RSC, new com.android.sched.vfs.VPath(""rscGeneratedFile0"", '/')); try { libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(""Annotated2Duplicated"", '/')); junit.framework.Assert.fail(); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { } }",f9442e9f799cf73abc107bab8fd5200b33c22e81,"@org.junit.Test public void compileWithAnnotationProcessorNoAuto_processorPath() throws java.lang.Exception { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> exclude = com.android.sched.util.collect.Lists.<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>create(com.android.jack.test.toolchain.JillBasedToolchain.class); com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, exclude); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorPath(processors.getPath()); jack.setAnnotationProcessorClasses(java.util.Collections.singletonList(com.android.jack.annotation.processor.sample.processors.ResourceAnnotationProcessor.class.getName())); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); libOut.getFile(FileType.RSC, new com.android.sched.vfs.VPath(""rscGeneratedFile0"", '/')); try { libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(""Annotated2Duplicated"", '/')); junit.framework.Assert.fail(); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { } }",cd556ecec002764a1f9cef269aafba37b3945c50,compileWithAnnotationProcessorNoAuto_processorPath(),compileWithAnnotationProcessorNoAuto_processorPath(),3,1,"@org.junit.Test public void compileWithAnnotationProcessorNoAuto_processorPath() throws java.lang.Exception { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> exclude = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(); exclude.add(com.android.jack.test.toolchain.JillBasedToolchain.class); com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, exclude); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorPath(processors.getPath()); jack.setAnnotationProcessorClasses(java.util.Collections.singletonList(com.android.jack.annotation.processor.sample.processors.ResourceAnnotationProcessor.class.getName())); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); libOut.getFile(FileType.RSC, new com.android.sched.vfs.VPath(""rscGeneratedFile0"", '/')); try { libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(""Annotated2Duplicated"", '/')); junit.framework.Assert.fail(); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { } }",74d521c2771f73daf19caebc8de57ee428445244,compileWithAnnotationProcessorNoAuto_processorPath(),251547,444,439
584550,src_main_java_com_android_apksig_internal_apk_SigningBlockScheme_ApkSigningBlockUtils.java,,,,"public static com.android.apksig.internal.util.Pair<java.util.List<com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignerConfig>, java.util.Map<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm, byte[]>> computeContentDigests(com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd, java.util.List<com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignerConfig> signerConfigs) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.SignatureException { if (signerConfigs.isEmpty()) { throw new java.lang.IllegalArgumentException(""No signer configs provided. At least one is required""); } java.util.Set<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm> contentDigestAlgorithms = new java.util.HashSet<>(1); for (com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.SignerConfig signerConfig : signerConfigs) { for (com.android.apksig.internal.apk.SigningBlockScheme.SignatureAlgorithm signatureAlgorithm : signerConfig.signatureAlgorithms) { contentDigestAlgorithms.add(signatureAlgorithm.getContentDigestAlgorithm()); } } java.util.Map<com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm, byte[]> contentDigests; try { contentDigests = com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.computeContentDigests(contentDigestAlgorithms, beforeCentralDir, centralDir, eocd); } catch (java.io.IOException e) { throw new java.io.IOException(""Failed to read APK being signed"", e); } catch (java.security.DigestException e) { throw new java.security.SignatureException(""Failed to compute digests of APK"", e); } return com.android.apksig.internal.util.Pair.of(signerConfigs, contentDigests); }",2114ac28cb58dbcae85462c9dc243aacae6e40a5,,"computeContentDigests(com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,java.util.List)",4,38,"public static com.android.apksig.internal.util.Pair<java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig>, java.util.Map<com.android.apksig.internal.apk.ContentDigestAlgorithm, byte[]>> computeContentDigests(com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd, java.util.List<com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig> signerConfigs) throws java.io.IOException, java.security.NoSuchAlgorithmException, java.security.SignatureException { if (signerConfigs.isEmpty()) { throw new java.lang.IllegalArgumentException(""No signer configs provided. At least one is required""); } java.util.Set<com.android.apksig.internal.apk.ContentDigestAlgorithm> contentDigestAlgorithms = new java.util.HashSet<>(1); for (com.android.apksig.internal.apk.ApkSigningBlockUtils.SignerConfig signerConfig : signerConfigs) { for (com.android.apksig.internal.apk.SignatureAlgorithm signatureAlgorithm : signerConfig.signatureAlgorithms) { contentDigestAlgorithms.add(signatureAlgorithm.getContentDigestAlgorithm()); } } java.util.Map<com.android.apksig.internal.apk.ContentDigestAlgorithm, byte[]> contentDigests; try { contentDigests = com.android.apksig.internal.apk.ApkSigningBlockUtils.computeContentDigests(contentDigestAlgorithms, beforeCentralDir, centralDir, eocd); } catch (java.io.IOException e) { throw new java.io.IOException(""Failed to read APK being signed"", e); } catch (java.security.DigestException e) { throw new java.security.SignatureException(""Failed to compute digests of APK"", e); } return com.android.apksig.internal.util.Pair.of(signerConfigs, contentDigests); }",e8ac6f364c0fd441e70dc4004e965d80a8b3d9fe,"computeContentDigests(com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,java.util.List)",4625,476,444
144683,v8_renderscript_java_src_android_support_v8_renderscript_RenderScript.java,6.0,public void destroy() { validate(); nContextFinish(); if ((mIncCon) != 0) { nIncContextFinish(); nIncContextDestroy(); mIncCon = 0; } nContextDeinitToClient(mContext); mMessageThread.mRun = false; try { mMessageThread.join(); } catch (java.lang.InterruptedException e) { } nContextDestroy(); nDeviceDestroy(mDev); if ((mIncDev) != 0) { nIncDeviceDestroy(mIncDev); mIncDev = 0; } mDev = 0; },60002efda713140f01a9792dde20fae71b9fef65,public void destroy() { validate(); if (mIsProcessContext) { return; } nContextFinish(); if ((mIncCon) != 0) { nIncContextFinish(); nIncContextDestroy(); mIncCon = 0; } nContextDeinitToClient(mContext); mMessageThread.mRun = false; try { mMessageThread.join(); } catch (java.lang.InterruptedException e) { } nContextDestroy(); nDeviceDestroy(mDev); if ((mIncDev) != 0) { nIncDeviceDestroy(mIncDev); mIncDev = 0; } mDev = 0; },08dcfc6805265f761597ff79d48c77168088a6da,destroy(),destroy(),2,6,public void destroy() { if (mIsProcessContext) { return; } validate(); nContextFinish(); if ((mIncCon) != 0) { nIncContextFinish(); nIncContextDestroy(); mIncCon = 0; } nContextDeinitToClient(mContext); mMessageThread.mRun = false; try { mMessageThread.join(); } catch (java.lang.InterruptedException e) { } nContextDestroy(); nDeviceDestroy(mDev); if ((mIncDev) != 0) { nIncDeviceDestroy(mIncDev); mIncDev = 0; } mDev = 0; },bd7bff67e3f9cede888505cadd7a9cb5e1f2a04e,destroy(),91516,128,128
319807,src_com_android_networkrecommendation_WifiNotificationController.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void notify(android.app.Notification notification) { mNotificationManager.notifyAsUser(null, com.android.networkrecommendation.WifiNotificationController.ICON_NETWORKS_AVAILABLE, notification, UserHandle.ALL); }",9fee7efa49d331e74de0bb98be4e022b3f6aa167,,notify(android.app.Notification),6,2,"private void postNotification(android.app.Notification notification) { mNotificationManager.notifyAsUser(null, com.android.networkrecommendation.WifiNotificationController.ICON_NETWORKS_AVAILABLE, notification, UserHandle.ALL); }",d37871a4674f8edc3030a2419eab09f3e265dc52,postNotification(android.app.Notification),489895,50,51
253791,luni_src_main_java_libcore_io_Os.java,32.0,"public void fchown(java.io.FileDescriptor fd, int uid, int gid) throws android.system.ErrnoException;",9dd5e0f1932d5b30f69c810635e776b43c79228e,"public void fchown(java.io.FileDescriptor fd, int uid, int gid) throws libcore.io.ErrnoException;",d2064ca01ba652909a21ca4e2a009890e6e81b31,"fchown(java.io.FileDescriptor,int,int)","fchown(java.io.FileDescriptor,int,int)",8,31,"public void fchown(java.io.FileDescriptor fd, int uid, int gid) throws android.system.ErrnoException;",9dd5e0f1932d5b30f69c810635e776b43c79228e,"fchown(java.io.FileDescriptor,int,int)",494570,30,29
252478,java_tests_RsTest_src_com_android_rs_test_UT_fp16.java,3.0,"private void TestHalf4(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_fp16 s, int nDims) { initializeGlobals(RS, s, com.android.rs.test.Element.F16_4(RS), nDims); s.forEach_set_kernel_half4(alloc); s.invoke_verify_half4(); initializeGlobals(RS, s, com.android.rs.test.Element.F16_4(RS), nDims); s.invoke_set_half4(); s.forEach_verify_kernel_half4(alloc); }",8e718a166cc25581b3de7b23f9fdb0fb517f7f8e,"private void TestHalf4(android.renderscript.RenderScript RS, com.android.rs.test.ScriptC_fp16 s, int nDims) { initializeGlobals(RS, s, android.renderscript.Element.F16_4(RS), nDims); s.forEach_set_kernel_half4(alloc); s.invoke_verify_half4(); initializeGlobals(RS, s, android.renderscript.Element.F16_4(RS), nDims); s.invoke_set_half4(); s.forEach_verify_kernel_half4(alloc); }",50bd8b92a706a746bf134a49637bb7e6f379dac7,"TestHalf4(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_fp16,int)","TestHalf4(android.renderscript.RenderScript,com.android.rs.test.ScriptC_fp16,int)",7,0,"private void TestHalf4(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_fp16 s, int nDims) { initializeGlobals(RS, s, com.android.rs.test.Element.F16_4(RS), nDims); s.forEach_set_kernel_half4(alloc); s.invoke_verify_half4(); initializeGlobals(RS, s, com.android.rs.test.Element.F16_4(RS), nDims); s.invoke_set_half4(); s.forEach_verify_kernel_half4(alloc); }",8e718a166cc25581b3de7b23f9fdb0fb517f7f8e,"TestHalf4(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_fp16,int)",379330,138,147
83821,build-system_builder_src_main_java_com_android_builder_png_PngWriter.java,,,,"public void write() throws java.io.IOException { int len = computeSize(); byte[] buffer = new byte[len]; java.lang.System.arraycopy(com.android.builder.png.PngWriter.SIGNATURE, 0, buffer, 0, 8); int index = writeChunk(mIhdr, buffer, 8); for (com.android.builder.png.Chunk chunk : mChunks) { index = writeChunk(chunk, buffer, index); } writeChunk(com.android.builder.png.PngWriter.sIend, buffer, index); com.google.common.io.Files.write(buffer, mToFile); }",d407c126972c6a9bdb426e6380a111580951a96a,,write(),12,1,public void write() throws java.io.IOException { java.io.FileOutputStream fos = new java.io.FileOutputStream(mToFile); try { fos.write(com.android.builder.png.PngWriter.SIGNATURE); mIhdr.write(fos); for (com.android.builder.png.Chunk chunk : mChunks) { chunk.write(fos); } com.android.builder.png.PngWriter.sIend.write(fos); } finally { fos.close(); } },e4929a502997f0cf6a32a35913bdbc27faa1e79d,write(),148838,139,110
251350,sched_src_com_android_sched_util_log_tracer_watcher_TotalAllocationWatcher.java,3.0,"@java.lang.Override public boolean notifyInstantiation(@javax.annotation.Nonnull java.lang.Object object, @javax.annotation.Nonnegative long size, int count, @javax.annotation.Nonnull com.android.sched.util.log.EventType notUsed) { try { com.android.sched.util.log.TracerFactory.getTracer().getStatistic(com.android.sched.util.log.tracer.watcher.TotalAllocationWatcher.ALLOCATIONS).recordAllocation(size); } catch (java.lang.RuntimeException e) { } return false; }",3c5b4461b5a36e002ba13a96f0953b8323a4c571,"@java.lang.Override public boolean notifyInstantiation(@javax.annotation.Nonnull java.lang.Object object, @javax.annotation.Nonnegative long size, int count, @javax.annotation.Nonnull com.android.sched.util.log.EventType notUsed, @javax.annotation.CheckForNull java.lang.StackTraceElement site) { try { getTracer().getStatistic(com.android.sched.util.log.tracer.watcher.TotalAllocationWatcher.ALLOCATIONS).recordAllocation(size); } catch (java.lang.RuntimeException e) { } return false; }",fba930e96797688ddc0cc2825a22ecda5ca3b90e,"notifyInstantiation(java.lang.Object,long,int,com.android.sched.util.log.EventType)","notifyInstantiation(java.lang.Object,long,int,com.android.sched.util.log.EventType,java.lang.StackTraceElement)",2,2,"@java.lang.Override public boolean notifyInstantiation(@javax.annotation.Nonnull java.lang.Object object, @javax.annotation.Nonnegative long size, int count, @javax.annotation.Nonnull com.android.sched.util.log.EventType notUsed, @javax.annotation.CheckForNull java.lang.StackTraceElement site) { try { com.android.sched.util.log.TracerFactory.getTracer().getStatistic(com.android.sched.util.log.tracer.watcher.TotalAllocationWatcher.ALLOCATIONS).recordAllocation(size); } catch (java.lang.RuntimeException e) { } return false; }",d2e17815ce897d652175690db1f248b487ddc2de,"notifyInstantiation(java.lang.Object,long,int,com.android.sched.util.log.EventType,java.lang.StackTraceElement)",223106,121,134
158301,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_fixture_GradleTestProject.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void executeExpectingFailure(java.lang.String... tasks) { execute(java.util.Collections.singletonList(((""-P"" + (com.android.builder.model.AndroidProject.PROPERTY_INVOKED_FROM_IDE)) + ""=true"")), false, false, com.android.build.gradle.integration.common.fixture.GradleTestProject.ExpectedBuildResult.FAILURE, tasks); }",e3bdc8a878ed62bbb6bcd2d40f5a38252d24b90d,,executeExpectingFailure(java.lang.String[]),4,18,"public void executeExpectingFailure(java.lang.String... tasks) { executeExpectingFailure(java.util.Collections.<java.lang.String>emptyList(), tasks); }",279a90a388eec0571970fa9c8cb92bc953de1091,executeExpectingFailure(java.lang.String[]),357847,90,37
252478,java_tests_RsTest_src_com_android_rs_test_UT_reduce.java,34.0,"private boolean runCorrectnessPatterns(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_reduce s) { boolean pass = true; pass &= patternDuplicateAnonymousResult(RS, s); pass &= patternFindMinAndMaxInf(RS, s); pass &= patternInterleavedReduce(RS, s); pass &= patternRedundantGet(RS, s); return pass; }",34d6180f8b3a18a60ede53879837e7d0ba20db4d,"private boolean runCorrectnessPatterns(android.renderscript.RenderScript RS, com.android.rs.test.ScriptC_reduce s) { boolean pass = true; pass &= patternDuplicateAnonymousResult(RS, s); pass &= patternInterleavedReduce(RS, s); pass &= patternRedundantGet(RS, s); return pass; }",81e1ea461ee58473c7a4089592c75770eca69a30,"runCorrectnessPatterns(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_reduce)","runCorrectnessPatterns(android.renderscript.RenderScript,com.android.rs.test.ScriptC_reduce)",7,18,"private boolean runCorrectnessPatterns(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_reduce s) { boolean pass = true; pass &= patternDuplicateAnonymousResult(RS, s); pass &= patternFindMinAndMaxInf(RS, s); pass &= patternInterleavedReduce(RS, s); pass &= patternRedundantGet(RS, s); return pass; }",34d6180f8b3a18a60ede53879837e7d0ba20db4d,"runCorrectnessPatterns(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_reduce)",379382,76,93
628453,ojluni_src_main_java_java_lang_System.java,14.0,"public static void arraycopy(int[] src, int srcPos, int[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_INT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyIntUnchecked(src, srcPos, dst, dstPos, length); } }",3bd3e507f68a4a9fd431900072260b4be2e6e557,"private static void arraycopy(int[] src, int srcPos, int[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_INT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyIntUnchecked(src, srcPos, dst, dstPos, length); } }",8cb5bb0c42ced74c37e33d0e2a1439b37bf3c992,"arraycopy(int[],int,int[],int,int)","arraycopy(int[],int,int[],int,int)",6,14,"@java.lang.SuppressWarnings(""unused"") private static void arraycopy(int[] src, int srcPos, int[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_INT_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyIntUnchecked(src, srcPos, dst, dstPos, length); } }",e8ebee4ecefb78a26673aa8b7e00929db5774070,"arraycopy(int[],int,int[],int,int)",161275,328,337
57705,src_com_android_browser_AddBookmarkPage.java,39.0,"@java.lang.Override public void onClick(android.view.View v) { if (v == (mButton)) { if ((mFolderSelector.getVisibility()) == (android.view.View.VISIBLE)) { if (mIsFolderNamerShowing) { completeOrCancelFolderNaming(false); } else { mSaveToHomeScreen = false; switchToDefaultView(true); } } else if (save()) { finish(); } } else if (v == (mCancelButton)) { if (mIsFolderNamerShowing) { completeOrCancelFolderNaming(true); } else if ((mFolderSelector.getVisibility()) == (android.view.View.VISIBLE)) { switchToDefaultView(false); } else { finish(); } } else if (v == (mFolderCancel)) { completeOrCancelFolderNaming(true); } else if (v == (mAddNewFolder)) { setShowFolderNamer(true); mFolderNamer.setText(R.string.new_folder); mFolderNamer.requestFocus(); mAddNewFolder.setVisibility(View.GONE); mAddSeparator.setVisibility(View.GONE); android.view.inputmethod.InputMethodManager imm = getInputMethodManager(); imm.focusIn(mListView); imm.showSoftInput(mFolderNamer, InputMethodManager.SHOW_IMPLICIT); } else if (v == (mRemoveLink)) { if (!(mEditingExisting)) { throw new java.lang.AssertionError((""Remove button should not be shown for"" + "" new bookmarks"")); } long id = mMap.getLong(BrowserContract.Bookmarks._ID); createHandler(); android.os.Message msg = android.os.Message.obtain(mHandler, com.android.browser.AddBookmarkPage.BOOKMARK_DELETED); com.android.browser.BookmarkUtils.displayRemoveBookmarkDialog(id, mTitle.getText().toString(), this, msg); } }",6c395816cfc736e2efe689afe71afe807ee3df1b,"@java.lang.Override public void onClick(android.view.View v) { if (v == (mButton)) { if ((mFolderSelector.getVisibility()) == (android.view.View.VISIBLE)) { if (mIsFolderNamerShowing) { completeOrCancelFolderNaming(false); } else { mSaveToHomeScreen = false; switchToDefaultView(true); } } else if (save()) { finish(); } } else if (v == (mCancelButton)) { if (mIsFolderNamerShowing) { completeOrCancelFolderNaming(true); } else if ((mFolderSelector.getVisibility()) == (android.view.View.VISIBLE)) { switchToDefaultView(false); } else { finish(); } } else if (v == (mFolderCancel)) { completeOrCancelFolderNaming(true); } else if (v == (mAddNewFolder)) { setShowFolderNamer(true); mFolderNamer.setText(R.string.new_folder); mFolderNamer.requestFocus(); mAddNewFolder.setVisibility(View.GONE); mAddSeparator.setVisibility(View.GONE); android.view.inputmethod.InputMethodManager imm = getInputMethodManager(); imm.focusIn(mListView); imm.showSoftInput(mFolderNamer, InputMethodManager.SHOW_IMPLICIT); } else if (v == (mRemoveLink)) { if (!(mEditingExisting)) { throw new java.lang.AssertionError((""Remove button should not be shown for"" + "" new bookmarks"")); } long id = mMap.getLong(BrowserContract.Bookmarks._ID); createHandler(); android.os.Message msg = android.os.Message.obtain(mHandler, com.android.browser.AddBookmarkPage.BOOKMARK_DELETED); com.android.browser.BookmarkUtils.displayRemoveBookmarkDialog(id, mTitle.getText().toString(), this, msg, mEditingFolder); } }",101d993603c4ec1aca2b8ba4406073f2d5bec0a9,onClick(android.view.View),onClick(android.view.View),4,39,"@java.lang.Override public void onClick(android.view.View v) { if (v == (mButton)) { if ((mFolderSelector.getVisibility()) == (android.view.View.VISIBLE)) { if (mIsFolderNamerShowing) { completeOrCancelFolderNaming(false); } else { mSaveToHomeScreen = false; switchToDefaultView(true); } } else if (save()) { finish(); } } else if (v == (mCancelButton)) { if (mIsFolderNamerShowing) { completeOrCancelFolderNaming(true); } else if ((mFolderSelector.getVisibility()) == (android.view.View.VISIBLE)) { switchToDefaultView(false); } else { finish(); } } else if (v == (mFolderCancel)) { completeOrCancelFolderNaming(true); } else if (v == (mAddNewFolder)) { setShowFolderNamer(true); mFolderNamer.setText(R.string.new_folder); mFolderNamer.requestFocus(); mAddNewFolder.setVisibility(View.GONE); mAddSeparator.setVisibility(View.GONE); android.view.inputmethod.InputMethodManager imm = getInputMethodManager(); imm.focusIn(mListView); imm.showSoftInput(mFolderNamer, InputMethodManager.SHOW_IMPLICIT); } else if (v == (mRemoveLink)) { if (!(mEditingExisting)) { throw new java.lang.AssertionError((""Remove button should not be shown for"" + "" new bookmarks"")); } long id = mMap.getLong(BrowserContract.Bookmarks._ID); createHandler(); android.os.Message msg = android.os.Message.obtain(mHandler, com.android.browser.AddBookmarkPage.BOOKMARK_DELETED); com.android.browser.BookmarkUtils.displayRemoveBookmarkDialog(id, mTitle.getText().toString(), this, msg); } }",6c395816cfc736e2efe689afe71afe807ee3df1b,onClick(android.view.View),352178,414,410
110925,jack_src_com_android_jack_library_OutputJackLibrary.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean needWriteSynchronization() { return (outputVDir) instanceof com.android.sched.vfs.SequentialOutputVDir; },ce1749b0991949fad58726002e9cf5e3625e3177,,needWriteSynchronization(),4,1,@java.lang.Override public boolean needsSequentialWriting() { return (outputVDir) instanceof com.android.sched.vfs.SequentialOutputVDir; },e260a5375a34e74bdb660d2383df64ac5539aa85,needsSequentialWriting(),415622,34,34
238940,jack_src_com_android_jack_shrob_proguard_GrammarActions.java,2.0,"@javax.annotation.Nonnull static com.android.jack.shrob.spec.NameSpecification name(java.lang.String name) { assert name != null; java.lang.String transformedName = (""^"" + (com.android.jack.shrob.proguard.GrammarActions.convertNameToPattern(name))) + ""$""; java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(transformedName); return new com.android.jack.shrob.spec.NameSpecification(pattern); }",fed0de45432c0513d78cb90659e9b2137d2eff05,"@javax.annotation.Nonnull static com.android.jack.shrob.spec.NameSpecification name(java.lang.String name, @javax.annotation.Nonnull com.android.jack.shrob.proguard.GrammarActions.NameFormat separator) { assert name != null; java.lang.String transformedName = (""^"" + (com.android.jack.shrob.proguard.GrammarActions.convertNameToPattern(name, separator))) + ""$""; java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(transformedName); return new com.android.jack.shrob.spec.NameSpecification(pattern); }",1af5c06262990ba9e8cb6ac4ad04d8e151948793,name(java.lang.String),"name(java.lang.String,com.android.jack.shrob.proguard.GrammarActions$NameFormat)",5,27,"@javax.annotation.Nonnull static com.android.jack.shrob.spec.NameSpecification name(java.lang.String name, @javax.annotation.Nonnull com.android.jack.shrob.proguard.GrammarActions.FilterSeparator separator) { assert name != null; java.lang.String transformedName = (""^"" + (com.android.jack.shrob.proguard.GrammarActions.convertNameToPattern(name, separator))) + ""$""; java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(transformedName); return new com.android.jack.shrob.spec.NameSpecification(pattern); }",7f09937481799d525a636e997de5255f32585e42,"name(java.lang.String,com.android.jack.shrob.proguard.GrammarActions$FilterSeparator)",444638,146,146
108516,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,0.0,"public void test_getGroupingSize() { java.text.DecimalFormat df = new java.text.DecimalFormat(""###0.##""); assertEquals(""Wrong unset size"", 0, df.getGroupingSize()); df = new java.text.DecimalFormat(""#,##0.##""); assertEquals(""Wrong set size"", 3, df.getGroupingSize()); df = new java.text.DecimalFormat(""#,###,###0.##""); assertEquals(""Wrong multiple set size"", 4, df.getGroupingSize()); }",cbfa2ce0e0c47716d3aedd7fe6f8e4d0162a05a9,"public void testGetGroupingSize() { java.text.DecimalFormat df = new java.text.DecimalFormat(""###0.##""); assertEquals(""Wrong unset size"", 0, df.getGroupingSize()); df = new java.text.DecimalFormat(""#,##0.##""); assertEquals(""Wrong set size"", 3, df.getGroupingSize()); df = new java.text.DecimalFormat(""#,###,###0.##""); assertEquals(""Wrong multiple set size"", 4, df.getGroupingSize()); }",cf1ac5907d6690c3e82040beef014f6b0e0ef2e8,test_getGroupingSize(),testGetGroupingSize(),2,10,"public void test_getGroupingSize() { java.text.DecimalFormat df = new java.text.DecimalFormat(""###0.##""); assertEquals(""Wrong unset size"", 0, df.getGroupingSize()); df = new java.text.DecimalFormat(""#,##0.##""); assertEquals(""Wrong set size"", 3, df.getGroupingSize()); df = new java.text.DecimalFormat(""#,###,###0.##""); assertEquals(""Wrong multiple set size"", 4, df.getGroupingSize()); }",cbfa2ce0e0c47716d3aedd7fe6f8e4d0162a05a9,test_getGroupingSize(),84440,97,98
375252,src_java_com_android_internal_telephony_imsphone_ImsPhoneCallTracker.java,73.0,"private void getImsService() throws com.android.ims.ImsException { if (com.android.internal.telephony.imsphone.ImsPhoneCallTracker.DBG) log(""getImsService""); mImsManager = com.android.ims.ImsManager.getInstance(mPhone.getContext(), mPhone.getPhoneId()); mImsManager.addNotifyStatusChangedCallback(mNotifyFeatureRemovedCallback); if ((mImsManager.getImsServiceStatus()) != (android.telephony.ims.feature.ImsFeature.STATE_READY)) { throw new com.android.ims.ImsException(""getImsServiceStatus()"", com.android.ims.ImsReasonInfo.CODE_LOCAL_IMS_SERVICE_DOWN); } mImsServiceRetryCount = 0; mServiceId = mImsManager.open(ImsServiceClass.MMTEL, createIncomingCallPendingIntent(), mImsConnectionStateListener); mImsManager.setImsConfigListener(mImsConfigListener); getEcbmInterface().setEcbmStateListener(mPhone.getImsEcbmStateListener()); if (mPhone.isInEcm()) { mPhone.exitEmergencyCallbackMode(); } int mPreferredTtyMode = Settings.Secure.getInt(mPhone.getContext().getContentResolver(), Settings.Secure.PREFERRED_TTY_MODE, Phone.TTY_MODE_OFF); mImsManager.setUiTTYMode(mPhone.getContext(), mPreferredTtyMode, null); com.android.ims.ImsMultiEndpoint multiEndpoint = getMultiEndpointInterface(); if (multiEndpoint != null) { multiEndpoint.setExternalCallStateListener(mPhone.getExternalCallTracker().getExternalCallStateListener()); } }",cab0c9ea1819ca228413c2b0738f342c28ba2954,"private void getImsService() throws com.android.ims.ImsException { if (com.android.internal.telephony.imsphone.ImsPhoneCallTracker.DBG) log(""getImsService""); mImsManager = com.android.ims.ImsManager.getInstance(mPhone.getContext(), mPhone.getPhoneId()); mImsManager.addNotifyStatusChangedCallback(mNotifyStatusChangedCallback); mNotifyStatusChangedCallback.notifyStatusChanged(); }",929e54be0245c66d6fcdc37afe3123b99430e945,getImsService(),getImsService(),6,74,"private void getImsService() throws com.android.ims.ImsException { if (com.android.internal.telephony.imsphone.ImsPhoneCallTracker.DBG) log(""getImsService""); mImsManager = com.android.ims.ImsManager.getInstance(mPhone.getContext(), mPhone.getPhoneId()); mImsManager.addNotifyStatusChangedCallbackIfAvailable(mNotifyStatusChangedCallback); mNotifyStatusChangedCallback.notifyStatusChanged(); }",98722ce023a3deec911e2f02bdd656472e789e3c,getImsService(),494126,107,109
311229,ojluni_src_main_java_sun_util_locale_provider_CalendarDataUtility.java,1.0,"public static java.lang.String retrieveFieldValueName(java.lang.String id, int field, int value, int style, java.util.Locale locale) { return null; }",a640cef6352ec3a0879c2e63d54b9a0f0a19a586,"public static java.lang.String retrieveFieldValueName(java.lang.String id, int field, int value, int style, java.util.Locale locale) { return sun.util.locale.provider.CalendarDataUtility.getNames(id, field, style, locale)[value]; }",a119c966ca1e18eb9d0a09f4d4355109103b18f0,"retrieveFieldValueName(java.lang.String,int,int,int,java.util.Locale)","retrieveFieldValueName(java.lang.String,int,int,int,java.util.Locale)",12,1,"public static java.lang.String retrieveFieldValueName(java.lang.String id, int field, int value, int style, java.util.Locale locale) { if (value < 0) { return null; } java.lang.String[] names = sun.util.locale.provider.CalendarDataUtility.getNames(id, field, style, locale); if (value >= (names.length)) { return null; } return names[value]; }",694e0f4c29e7f70865dcb492b04cf9f13e5a2345,"retrieveFieldValueName(java.lang.String,int,int,int,java.util.Locale)",431440,63,96
20130,sdkmanager_libs_sdklib_src_com_android_sdklib_internal_repository_BrokenPackage.java,,,,"@java.lang.Override public java.io.File getInstallFolder(java.lang.String osSdkRoot, com.android.sdklib.SdkManager sdkManager) { java.io.File samplesRoot = new java.io.File(osSdkRoot, com.android.sdklib.SdkConstants.FD_SAMPLES); for (com.android.sdklib.IAndroidTarget target : sdkManager.getTargets()) { if ((target.isPlatform()) && (target.getVersion().equals(mVersion))) { java.lang.String p = target.getPath(IAndroidTarget.SAMPLES); java.io.File f = new java.io.File(p); if (f.isDirectory()) { if (f.getParentFile().equals(samplesRoot)) { return f; } } } } java.io.File folder = new java.io.File(samplesRoot, java.lang.String.format(""android-%s"", getVersion().getApiString())); for (int n = 1; folder.exists(); n++) { folder = new java.io.File(samplesRoot, java.lang.String.format(""android-%s_%d"", getVersion().getApiString(), n)); } return folder; }",f0b8f5579f906aca26c5a744843ad8f50ecea1bb,,"getInstallFolder(java.lang.String,com.android.sdklib.SdkManager)",8,3,"@java.lang.Override public java.io.File getInstallFolder(java.lang.String osSdkRoot, com.android.sdklib.SdkManager sdkManager) { return null; }",5059a6daba863bf81c1457d94b28dd7fc3f180b0,"getInstallFolder(java.lang.String,com.android.sdklib.SdkManager)",197010,264,42
14691,src_com_android_settings_ProxySelector.java,10.0,"protected void showError(int error) { new android.app.AlertDialog.Builder(this).setTitle(R.string.proxy_error).setMessage(error).setPositiveButton(R.string.proxy_error_dismiss, null).show(); }",1453d6f06f3f080dd0a73cd68b351ba21662d0df,"protected void showError(int error) { if ((mErrorDialog) != null) { mErrorDialog.setMessage(getResources().getString(error)); mErrorDialog.show(); } else { mErrorDialog = new android.app.AlertDialog.Builder(this).setTitle(R.string.proxy_error).setMessage(error).setPositiveButton(R.string.proxy_error_dismiss, null).show(); } }",3a3d2b0376d3b849f32f57a9978e3179ac0735d1,showError(int),showError(int),3,8,"@java.lang.Override protected android.app.Dialog onCreateDialog(int id) { if (id == (com.android.settings.ProxySelector.ERROR_DIALOG_ID)) { java.lang.String hostname = mHostnameField.getText().toString().trim(); java.lang.String portStr = mPortField.getText().toString().trim(); java.lang.String msg = getString(validate(hostname, portStr)); return new android.app.AlertDialog.Builder(this).setTitle(R.string.proxy_error).setPositiveButton(R.string.proxy_error_dismiss, null).setMessage(msg).create(); } return super.onCreateDialog(id); }",3435c31dca82fac8838e2ea9b344b46b5d2a84e9,onCreateDialog(int),77736,89,145
91995,luni_src_main_java_libcore_io_Os.java,95.0,public java.io.FileDescriptor[] pipe() throws libcore.io.ErrnoException;,ce9be6a13d1c6a7005fb97671f343d6826e6b905,public java.io.FileDescriptor[] pipe() throws android.os.ErrnoException;,014c0afa526b42112056c3313260f7b6fc3a4030,pipe(),pipe(),3,95,public java.io.FileDescriptor[] pipe() throws android.system.ErrnoException;,52498b168ba108e9942f8b0b916874200868d4c1,pipe(),170160,18,18
131920,core_java_android_security_NetworkSecurityPolicy.java,,,,public boolean isInsecureTrafficPermitted() { synchronized(this) { return mInsecureTrafficPermitted; } },714e3d1a8fde69eb570094fbdeb5eb3168dc2be3,,isInsecureTrafficPermitted(),6,2,public boolean isCleartextTrafficPermitted() { synchronized(this) { return mCleartextTrafficPermitted; } },5e0ff33d00ecc1a075a9e79e9c61c74cd5bd3a23,isCleartextTrafficPermitted(),323939,23,23
18616,core_java_android_webkit_WebView.java,8.0,public void destroy() { clearTextEntry(false); if ((mListBoxDialog) != null) { mListBoxDialog.dismiss(); mListBoxDialog = null; } if ((mWebViewCore) != null) { mCallbackProxy.setWebViewClient(null); mCallbackProxy.setWebChromeClient(null); synchronized(this) { android.webkit.WebViewCore webViewCore = mWebViewCore; mWebViewCore = null; webViewCore.destroy(); } mPrivateHandler.removeCallbacksAndMessages(null); mCallbackProxy.removeCallbacksAndMessages(null); synchronized(mCallbackProxy) { mCallbackProxy.notify(); } } if ((mNativeClass) != 0) { nativeDestroy(); mNativeClass = 0; } },cd85994fca9eafd476d085ab8a32e8aaf4606e6c,public void destroy() { clearTextEntry(false); if ((mListBoxDialog) != null) { mListBoxDialog.dismiss(); mListBoxDialog = null; } if ((mSavePasswordDialog) != null) { mSavePasswordDialog.dismiss(); mSavePasswordDialog = null; } if ((mWebViewCore) != null) { mCallbackProxy.setWebViewClient(null); mCallbackProxy.setWebChromeClient(null); synchronized(this) { android.webkit.WebViewCore webViewCore = mWebViewCore; mWebViewCore = null; webViewCore.destroy(); } mPrivateHandler.removeCallbacksAndMessages(null); mCallbackProxy.removeCallbacksAndMessages(null); synchronized(mCallbackProxy) { mCallbackProxy.notify(); } } if ((mNativeClass) != 0) { nativeDestroy(); mNativeClass = 0; } },eeb6e475ae2c14e4213a7eed6e1be8d90574c748,destroy(),destroy(),4,5,public void destroy() { android.webkit.WebView.checkThread(); mProvider.destroy(); },d6bb8728a6cff2ee841ac20ee333716a0dc4ed30,destroy(),67276,176,20
23390,core_java_android_webkit_WebSettings.java,45.0,@java.lang.Deprecated public synchronized void setPluginsEnabled(boolean flag) { setPluginState(android.webkit.WebSettings.PluginState.ON); },80ead79f02137a81f3219b2cb841a15904e1bd03,@java.lang.Deprecated public synchronized void setPluginsEnabled(boolean flag) { if (flag == true) { setPluginState(android.webkit.WebSettings.PluginState.ON); } else { setPluginState(android.webkit.WebSettings.PluginState.OFF); } },acbe79d7041b92b0f45cc1a250990605314ab327,setPluginsEnabled(boolean),setPluginsEnabled(boolean),2,45,@java.lang.Deprecated public synchronized void setPluginsEnabled(boolean flag) { setPluginState((flag ? android.webkit.WebSettings.PluginState.ON : android.webkit.WebSettings.PluginState.OFF)); },cc79d4d3b368442f484cc212bc3f234d04d0d496,setPluginsEnabled(boolean),358020,61,50
151671,jack-tests_src_com_android_jack_test_helper_IncrementalTestHelper.java,10.0,"public void snapshotJackFilesModificationDate() { java.util.List<java.io.File> jackFiles = new java.util.ArrayList<java.io.File>(); fillJackFiles(jackFolder, jackFiles); for (java.io.File jackFile : jackFiles) { fileModificationDate.put(jackFile.getAbsolutePath(), java.lang.Long.valueOf(jackFile.lastModified())); } }",0150c41e7ab1f23995efdcdffb4a291d8cb0ccb1,"public void snapshotJackFilesModificationDate() { java.util.Iterator<com.android.sched.vfs.InputVFile> jayceIter = getJayceIterator(); while (jayceIter.hasNext()) { com.android.sched.vfs.InputVFile jayceFile = jayceIter.next(); com.android.sched.util.location.FileLocation location = ((com.android.sched.util.location.FileLocation) (jayceFile.getLocation())); java.io.File file = new java.io.File(location.getPath()); fileModificationDate.put(file.getAbsolutePath(), java.lang.Long.valueOf(jayceFile.getLastModified())); } }",a498bab972238c6a44624d71ead327bbb5ec0100,snapshotJackFilesModificationDate(),snapshotJackFilesModificationDate(),5,10,"public void snapshotJackFilesModificationDate() { java.util.Iterator<com.android.sched.vfs.InputVFile> jayceIter = getJayceIterator(); while (jayceIter.hasNext()) { com.android.sched.vfs.InputVFile jayceFile = jayceIter.next(); fileModificationDate.put(jayceFile.getPathFromRoot(), java.lang.Long.valueOf(jayceFile.getLastModified())); } }",ef59a79ab6087916e43d0897cfdf621b19e32a03,snapshotJackFilesModificationDate(),461366,153,103
94430,sdk-common_src_main_java_com_android_ide_common_res2_DataMerger.java,2.0,"public void writeBlobTo(@com.android.annotations.NonNull java.io.File blobRootFolder, @com.android.annotations.NonNull com.android.ide.common.res2.MergeConsumer<I> consumer) throws com.android.ide.common.res2.MergingException { javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance(); factory.setNamespaceAware(true); factory.setValidating(false); factory.setIgnoringComments(true); javax.xml.parsers.DocumentBuilder builder; try { builder = factory.newDocumentBuilder(); org.w3c.dom.Document document = builder.newDocument(); org.w3c.dom.Node rootNode = document.createElement(com.android.ide.common.res2.DataMerger.NODE_MERGER); document.appendChild(rootNode); for (S dataSet : mDataSets) { org.w3c.dom.Node dataSetNode = document.createElement(com.android.ide.common.res2.DataMerger.NODE_DATA_SET); rootNode.appendChild(dataSetNode); dataSet.appendToXml(dataSetNode, document, consumer); } java.lang.String content = com.android.ide.common.xml.XmlPrettyPrinter.prettyPrint(document, true); try { createDir(blobRootFolder); } catch (java.io.IOException ioe) { throw new com.android.ide.common.res2.MergingException(ioe).setFile(blobRootFolder); } java.io.File file = new java.io.File(blobRootFolder, com.android.ide.common.res2.DataMerger.FN_MERGER_XML); try { com.google.common.io.Files.write(content, file, Charsets.UTF_8); } catch (java.io.IOException ioe) { throw new com.android.ide.common.res2.MergingException(ioe).setFile(file); } } catch (javax.xml.parsers.ParserConfigurationException e) { throw new com.android.ide.common.res2.MergingException(e); } }",429bd9acf7b1fbd26109aba13565cfc69980b5b0,"public void writeBlobTo(@com.android.annotations.NonNull java.io.File blobRootFolder, @com.android.annotations.NonNull com.android.ide.common.res2.MergeConsumer<I> consumer) throws com.android.ide.common.res2.MergingException { javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance(); factory.setNamespaceAware(true); factory.setValidating(false); factory.setIgnoringComments(true); javax.xml.parsers.DocumentBuilder builder; try { builder = factory.newDocumentBuilder(); org.w3c.dom.Document document = builder.newDocument(); org.w3c.dom.Node rootNode = document.createElement(com.android.ide.common.res2.DataMerger.NODE_MERGER); com.android.ide.common.res2.NodeUtils.addAttribute(document, rootNode, null, com.android.ide.common.res2.DataMerger.ATTR_VERSION, java.lang.Integer.toString(com.android.ide.common.res2.DataMerger.MERGE_BLOB_VERSION)); document.appendChild(rootNode); for (S dataSet : mDataSets) { org.w3c.dom.Node dataSetNode = document.createElement(com.android.ide.common.res2.DataMerger.NODE_DATA_SET); rootNode.appendChild(dataSetNode); dataSet.appendToXml(dataSetNode, document, consumer); } java.lang.String content = com.android.ide.common.xml.XmlPrettyPrinter.prettyPrint(document, true); try { createDir(blobRootFolder); } catch (java.io.IOException ioe) { throw new com.android.ide.common.res2.MergingException(ioe).setFile(blobRootFolder); } java.io.File file = new java.io.File(blobRootFolder, com.android.ide.common.res2.DataMerger.FN_MERGER_XML); try { com.google.common.io.Files.write(content, file, Charsets.UTF_8); } catch (java.io.IOException ioe) { throw new com.android.ide.common.res2.MergingException(ioe).setFile(file); } } catch (javax.xml.parsers.ParserConfigurationException e) { throw new com.android.ide.common.res2.MergingException(e); } }",46232ea4885b5d94d3c30311f789efa61e048487,"writeBlobTo(java.io.File,com.android.ide.common.res2.MergeConsumer)","writeBlobTo(java.io.File,com.android.ide.common.res2.MergeConsumer)",2,2,"public void writeBlobTo(@com.android.annotations.NonNull java.io.File blobRootFolder, @com.android.annotations.NonNull com.android.ide.common.res2.MergeConsumer<I> consumer) throws com.android.ide.common.res2.MergingException { javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance(); factory.setNamespaceAware(true); factory.setValidating(false); factory.setIgnoringComments(true); javax.xml.parsers.DocumentBuilder builder; try { builder = factory.newDocumentBuilder(); org.w3c.dom.Document document = builder.newDocument(); org.w3c.dom.Node rootNode = document.createElement(com.android.ide.common.res2.DataMerger.NODE_MERGER); com.android.ide.common.res2.NodeUtils.addAttribute(document, rootNode, null, com.android.ide.common.res2.DataMerger.ATTR_VERSION, com.android.ide.common.res2.DataMerger.MERGE_BLOB_VERSION); document.appendChild(rootNode); for (S dataSet : mDataSets) { org.w3c.dom.Node dataSetNode = document.createElement(com.android.ide.common.res2.DataMerger.NODE_DATA_SET); rootNode.appendChild(dataSetNode); dataSet.appendToXml(dataSetNode, document, consumer); } java.lang.String content = com.android.ide.common.xml.XmlPrettyPrinter.prettyPrint(document, true); try { createDir(blobRootFolder); } catch (java.io.IOException ioe) { throw new com.android.ide.common.res2.MergingException(ioe).setFile(blobRootFolder); } java.io.File file = new java.io.File(blobRootFolder, com.android.ide.common.res2.DataMerger.FN_MERGER_XML); try { com.google.common.io.Files.write(content, file, Charsets.UTF_8); } catch (java.io.IOException ioe) { throw new com.android.ide.common.res2.MergingException(ioe).setFile(file); } } catch (javax.xml.parsers.ParserConfigurationException e) { throw new com.android.ide.common.res2.MergingException(e); } }",8a2abeb3cbf1553b7b1ca668efa98f41d2792cc9,"writeBlobTo(java.io.File,com.android.ide.common.res2.MergeConsumer)",412931,507,499
655159,src_main_java_com_android_vts_util_Pagination.java,,,,public void setDefaultPageCount(int pageCount) { this.DEFAULT_PAGE_COUNT = pageCount; },f878a660631009cecb28b6c4a971370423950988,,setDefaultPageCount(int),2,7,public int getMaxPages() { return this.maxPages; },23ab3cbfa6796c5d505615f1e68ef5d0590a8453,getMaxPages(),22098,24,14
241967,jack_src_com_android_jack_util_CloneStatementVisitor.java,5.0,"@javax.annotation.Nonnull public <T extends com.android.jack.ir.ast.JStatement> T cloneStatement(@javax.annotation.Nonnull T stmt) { clonedLabeledStmts = new java.util.HashMap<com.android.jack.ir.ast.JLabeledStatement, com.android.jack.ir.ast.JLabeledStatement>(); clonedLocals = new java.util.HashMap<com.android.jack.ir.ast.JLocal, com.android.jack.ir.ast.JLocal>(); clonedGotos = new java.util.ArrayList<com.android.jack.ir.ast.JGoto>(); clonedStmts = new java.util.HashMap<com.android.jack.ir.ast.JStatement, com.android.jack.ir.ast.JStatement>(); clonedMarkers = new java.util.ArrayList<com.android.sched.marker.Marker>(); clonedCatchBlocks = new java.util.HashMap<com.android.jack.ir.ast.JCatchBlock, com.android.jack.ir.ast.JCatchBlock>(); T statement = internalCloneStatement(stmt); fixGotos(); for (com.android.sched.marker.Marker m : clonedMarkers) { if (m instanceof com.android.jack.transformations.finallyblock.InlinedFinallyMarker) { com.android.jack.transformations.finallyblock.InlinedFinallyMarker newMarker = ((com.android.jack.transformations.finallyblock.InlinedFinallyMarker) (m)); com.android.jack.ir.ast.JStatement newStmt = clonedStmts.get(newMarker.getTryStmt()); if (newStmt != null) { newMarker.setTryStmt(((com.android.jack.ir.ast.JTryStatement) (newStmt))); } } } return statement; }",6562a647f6472fe4dc8cd7cbdff50283355c1394,@javax.annotation.Nonnull public <T extends com.android.jack.ir.ast.JStatement> T cloneStatement(@javax.annotation.Nonnull T stmt) { init(); T statement = internalCloneStatement(stmt); fixGotos(); fixMarkers(); return statement; },8265968a055d1a12e7ecc426300a3bbb35d5dfc7,cloneStatement(com.android.jack.ir.ast.JStatement),cloneStatement(com.android.jack.ir.ast.JStatement),28,6,"@javax.annotation.Nonnull public <T extends com.android.jack.ir.ast.JStatement> T cloneStatement(@javax.annotation.Nonnull T stmt) { clonedLabeledStmts = new java.util.HashMap<com.android.jack.ir.ast.JLabeledStatement, com.android.jack.ir.ast.JLabeledStatement>(); clonedLocals = new java.util.HashMap<com.android.jack.ir.ast.JLocal, com.android.jack.ir.ast.JLocal>(); clonedGotos = new java.util.ArrayList<com.android.jack.ir.ast.JGoto>(); clonedStmts = new java.util.HashMap<com.android.jack.ir.ast.JStatement, com.android.jack.ir.ast.JStatement>(); clonedMarkers = new java.util.ArrayList<com.android.sched.marker.Marker>(); clonedCatchBlocks = new java.util.HashMap<com.android.jack.ir.ast.JCatchBlock, com.android.jack.ir.ast.JCatchBlock>(); T statement = internalCloneStatement(stmt); fixGotos(); fixMarkers(); return statement; }",7db23f12d2203a0fba82373c13b1ac08139a878f,cloneStatement(com.android.jack.ir.ast.JStatement),487254,58,254
81416,tests_tests_renderscript_src_android_renderscript_cts_TestIlogb.java,,,,public void testIlogb() { checkIlogbFloat(); checkIlogbFloat2(); checkIlogbFloat3(); checkIlogbFloat4(); },d4f9b0a2a4c6af477d18d321c6a4bf1441254806,,testIlogb(),9,4,public void testIlogb() { checkIlogbFloatInt(); checkIlogbFloat2Int2(); checkIlogbFloat3Int3(); checkIlogbFloat4Int4(); },b1d01d09961ea769068399d29773d1c872e0dbfa,testIlogb(),143281,36,43
335906,src_java_com_android_internal_telephony_RIL.java,206.0,"@java.lang.Override public void getCurrentCalls(android.os.Message result) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_GET_CURRENT_CALLS, result); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(); if (radioProxy != null) { addRequest(rr); try { radioProxy.getCurrentCalls(rr.mSerial); } catch (java.lang.Exception e) { riljLoge(""getCurrentCalls"", e); rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); decrementWakeLock(rr); rr.release(); } } else { rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); rr.release(); } }",1c3de5ab63442dc87c996a7596e7aa40b0cbe79b,"@java.lang.Override public void getCurrentCalls(android.os.Message result) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_GET_CURRENT_CALLS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(); if (radioProxy != null) { addRequest(rr); try { radioProxy.getCurrentCalls(rr.mSerial); } catch (java.lang.Exception e) { riljLoge(""getCurrentCalls"", e); rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); decrementWakeLock(rr); rr.release(); } } else { rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); rr.release(); } }",ef85ff9daa91d230d8e7cbcecef1a08ca0bc77d4,getCurrentCalls(android.os.Message),getCurrentCalls(android.os.Message),5,211,"@java.lang.Override public void getCurrentCalls(android.os.Message result) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_GET_CURRENT_CALLS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(); if (radioProxy != null) { addRequest(rr); try { radioProxy.getCurrentCalls(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(""getCurrentCalls"", e, rr); } } else { rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); rr.release(); } }",b267f40c21e2444edc7f067bb49e59f6a8b248a3,getCurrentCalls(android.os.Message),449447,265,243
308588,luni_src_main_java_libcore_io_NioBufferIterator.java,4.0,"public int readInt() { int result = libcore.io.Memory.peekInt(((address) + (position)), swap); position += SizeOf.INT; return result; }",b10f1f3f83eacba92970123d4975b1d8ec3d433d,"public int readInt() { synchronized(fileLock) { file.checkNotClosed(); libcore.io.NioBufferIterator.checkReadBounds(position, size, SizeOf.INT); int result = libcore.io.Memory.peekInt(((address) + (position)), swap); position += SizeOf.INT; return result; } }",8a75297ad49c5b09927f7b0c1cf1a6d5a9ae25d8,readInt(),readInt(),12,5,"public int readInt() { file.checkNotClosed(); libcore.io.NioBufferIterator.checkReadBounds(position, length, SizeOf.INT); int result = libcore.io.Memory.peekInt(((address) + (position)), swap); position += SizeOf.INT; return result; }",4eb4a49b815f2dbee6dbcd8f145ec239d80b57de,readInt(),42618,72,65
564188,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerAssistantStackTests.java,11.0,"public void testAssistantStackZOrder() throws java.lang.Exception { if ((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ENTER_PIP, ""true""); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.PINNED_STACK_ID); mAmWmState.assertContainsStack(""Must contain pinned stack."", android.server.cts.PINNED_STACK_ID); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack(""Must contain fullscreen stack."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack(""Must contain docked stack."", android.server.cts.DOCKED_STACK_ID); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); assertAssistantStackExists(); mAmWmState.assertFrontStack(""Pinned stack should be on top."", android.server.cts.PINNED_STACK_ID); mAmWmState.assertFocusedStack(""Assistant stack should be focused."", android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }",4719ad9751141b4d30832c08c22af8ad16cf49b7,"public void testAssistantStackZOrder() throws java.lang.Exception { if ((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ENTER_PIP, ""true""); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.PINNED_STACK_ID); mAmWmState.assertContainsStack(""Must contain pinned stack."", android.server.cts.PINNED_STACK_ID); launchActivityOnDisplay(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_DISPLAY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack(""Must contain fullscreen stack."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack(""Must contain docked stack."", android.server.cts.DOCKED_STACK_ID); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); assertAssistantStackExists(); mAmWmState.assertFrontStack(""Pinned stack should be on top."", android.server.cts.PINNED_STACK_ID); mAmWmState.assertFocusedStack(""Assistant stack should be focused."", android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }",0ee891d26e4ac7dd33a6a640606d66394fc46b5d,testAssistantStackZOrder(),testAssistantStackZOrder(),9,12,"public void testAssistantStackZOrder() throws java.lang.Exception { if (((!(supportsPip())) || (!(supportsSplitScreenMultiWindow()))) || (!(assistantRunsOnPrimaryDisplay()))) return; launchActivity(android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.ActivityManagerAssistantStackTests.EXTRA_ENTER_PIP, ""true""); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.PIP_ACTIVITY, android.server.cts.PINNED_STACK_ID); mAmWmState.assertContainsStack(""Must contain pinned stack."", android.server.cts.PINNED_STACK_ID); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.TEST_ACTIVITY); launchActivityInDockStack(android.server.cts.ActivityManagerAssistantStackTests.DOCKED_ACTIVITY); mAmWmState.assertContainsStack(""Must contain fullscreen stack."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); mAmWmState.assertContainsStack(""Must contain docked stack."", android.server.cts.DOCKED_STACK_ID); enableAssistant(); launchActivity(android.server.cts.ActivityManagerAssistantStackTests.LAUNCH_ASSISTANT_ACTIVITY_FROM_SESSION); mAmWmState.waitForValidState(mDevice, android.server.cts.ActivityManagerAssistantStackTests.ASSISTANT_ACTIVITY, android.server.cts.ASSISTANT_STACK_ID); assertAssistantStackExists(); mAmWmState.assertFrontStack(""Pinned stack should be on top."", android.server.cts.PINNED_STACK_ID); mAmWmState.assertFocusedStack(""Assistant stack should be focused."", android.server.cts.ASSISTANT_STACK_ID); disableAssistant(); }",70a888a34581e5c8e3dd0da71483e9f5995af426,testAssistantStackZOrder(),33755,437,425
100204,lint_cli_src_test_java_com_android_tools_lint_checks_PropertyFileDetectorTest.java,1.0,"public void test() throws java.lang.Exception { assertEquals(("""" + ((((((""local.properties:11: Error: Colon (:) must be escaped in .property files [PropertyEscape]\n"" + ""windows.dir=C:\\my\\path\\to\\sdk\n"") + "" ~\n"") + ""local.properties:11: Error: Windows file separators (\\) must be escaped (\\\\); use C:\\\\my\\\\path\\\\to\\\\sdk [PropertyEscape]\n"") + ""windows.dir=C:\\my\\path\\to\\sdk\n"") + "" ~~~~~~~~~~~~~~~~~\n"") + ""2 errors, 0 warnings\n"")), lintProject(""local.properties=>local.properties"")); }",36fe822378d9be4b62ddd12430921725e999162e,"public void test() throws java.lang.Exception { assertEquals(("""" + ((((((""local.properties:11: Error: Colon (:) must be escaped in .property files; use C\\:\\my\\path\\to\\sdk [PropertyEscape]\n"" + ""windows.dir=C:\\my\\path\\to\\sdk\n"") + "" ~\n"") + ""local.properties:11: Error: Windows file separators (\\) must be escaped (\\\\); use C:\\\\my\\\\path\\\\to\\\\sdk [PropertyEscape]\n"") + ""windows.dir=C:\\my\\path\\to\\sdk\n"") + "" ~~~~~~~~~~~~~~~~~\n"") + ""2 errors, 0 warnings\n"")), lintProject(""local.properties=>local.properties"")); }",add8bb236121a525b6c84efc510b9876dd0ed26c,test(),test(),4,1,"public void test() throws java.lang.Exception { assertEquals(("""" + (((""local.properties:11: Error: Windows file separators (\\) must be escaped (\\\\); use C:\\\\my\\\\path\\\\to\\\\sdk [PropertyEscape]\n"" + ""windows.dir=C:\\my\\path\\to\\sdk\n"") + "" ~~~~~~~~~~~~~~~~~\n"") + ""1 errors, 0 warnings\n"")), lintProject(""local.properties=>local.properties"")); }",c139e7caa2b8abe0f3f7a3868f9373a1af850e3a,test(),441586,175,107
123871,jack_src_com_android_jack_incremental_IncrementalInputFilter.java,12.0,"@javax.annotation.Nonnull private java.util.Set<java.lang.String> getInternalFileNamesToCompile() { com.android.jack.library.InputJackLibrary incrementalInputLibrary = getIncrementalInternalLibrary(); if ((incrementalInputLibrary == null) || (needFullRebuild())) { return fileNamesOnCmdLine; } assert (typeDependencies) != null; java.util.Map<java.lang.String, java.util.Set<java.lang.String>> typeRecompileDependencies = typeDependencies.getRecompileDependencies(); java.util.Set<java.lang.String> filesToRecompile = new java.util.HashSet<java.lang.String>(); filesToRecompile.addAll(addedFileNames); filesToRecompile.addAll(modifiedFileNames); addDependencies(filesToRecompile, typeRecompileDependencies, modifiedFileNames); addDependencies(filesToRecompile, typeRecompileDependencies, deletedFileNames); tracer.getStatistic(com.android.jack.incremental.IncrementalInputFilter.RECOMPILED_FILES).incValue(filesToRecompile.size()); return filesToRecompile; }",870887106cbbacc4cd5166d61874d02408fc7596,"@javax.annotation.Nonnull private java.util.Set<java.lang.String> getInternalFileNamesToCompile() { if (needFullBuild()) { return fileNamesOnCmdLine; } java.util.Map<java.lang.String, java.util.Set<java.lang.String>> typeRecompileDependencies = typeDependencies.getRecompileDependencies(); java.util.Set<java.lang.String> filesToRecompile = new java.util.HashSet<java.lang.String>(); filesToRecompile.addAll(addedFileNames); filesToRecompile.addAll(modifiedFileNames); addDependencies(filesToRecompile, typeRecompileDependencies, modifiedFileNames); addDependencies(filesToRecompile, typeRecompileDependencies, deletedFileNames); tracer.getStatistic(com.android.jack.incremental.IncrementalInputFilter.RECOMPILED_FILES).incValue(filesToRecompile.size()); return filesToRecompile; }",987b652749706b81099be79a60d38efac17c2262,getInternalFileNamesToCompile(),getInternalFileNamesToCompile(),2,13,"@javax.annotation.Nonnull private java.util.Set<java.lang.String> getInternalFileNamesToCompile() { if (needFullBuild()) { tracer.getStatistic(com.android.jack.incremental.IncrementalInputFilter.COMPILED_FILES).incValue(fileNamesOnCmdLine.size()); return fileNamesOnCmdLine; } java.util.Map<java.lang.String, java.util.Set<java.lang.String>> typeRecompileDependencies = typeDependencies.getRecompileDependencies(); java.util.Set<java.lang.String> filesToRecompile = new java.util.HashSet<java.lang.String>(); filesToRecompile.addAll(addedFileNames); filesToRecompile.addAll(modifiedFileNames); addDependencies(filesToRecompile, typeRecompileDependencies, modifiedFileNames); addDependencies(filesToRecompile, typeRecompileDependencies, deletedFileNames); tracer.getStatistic(com.android.jack.incremental.IncrementalInputFilter.COMPILED_FILES).incValue(filesToRecompile.size()); return filesToRecompile; }",d975589d8926b362545e315ff4a99ddc9be32934,getInternalFileNamesToCompile(),289964,203,235
628453,ojluni_src_main_java_java_lang_System.java,8.0,"public static void arraycopy(char[] src, int srcPos, char[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_CHAR_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyCharUnchecked(src, srcPos, dst, dstPos, length); } }",eaf4ef5fa9d6d878e89405cef26c1eefb1a9c634,"private static void arraycopy(char[] src, int srcPos, char[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_CHAR_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyCharUnchecked(src, srcPos, dst, dstPos, length); } }",566355eb044ebc0b6b427638417c5a52a68d24e4,"arraycopy(char[],int,char[],int,int)","arraycopy(char[],int,char[],int,int)",6,8,"@java.lang.SuppressWarnings(""unused"") private static void arraycopy(char[] src, int srcPos, char[] dst, int dstPos, int length) { if (src == null) { throw new java.lang.NullPointerException(""src == null""); } if (dst == null) { throw new java.lang.NullPointerException(""dst == null""); } if (((((srcPos < 0) || (dstPos < 0)) || (length < 0)) || (srcPos > ((src.length) - length))) || (dstPos > ((dst.length) - length))) { throw new java.lang.ArrayIndexOutOfBoundsException((((((((((""src.length="" + (src.length)) + "" srcPos="") + srcPos) + "" dst.length="") + (dst.length)) + "" dstPos="") + dstPos) + "" length="") + length)); } if (length <= (java.lang.System.ARRAYCOPY_SHORT_CHAR_ARRAY_THRESHOLD)) { if (((src == dst) && (srcPos < dstPos)) && (dstPos < (srcPos + length))) { for (int i = length - 1; i >= 0; --i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } else { for (int i = 0; i < length; ++i) { dst[(dstPos + i)] = src[(srcPos + i)]; } } } else { java.lang.System.arraycopyCharUnchecked(src, srcPos, dst, dstPos, length); } }",22e7ae1db67cb02574dd8a227872c01d8d8133dc,"arraycopy(char[],int,char[],int,int)",161261,328,337
589613,services_core_java_com_android_server_net_NetworkStatsCollection.java,26.0,"public void write(java.io.DataOutputStream out) throws java.io.IOException { final java.util.HashMap<com.android.server.net.NetworkIdentitySet, java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key>> keysByIdent = com.google.android.collect.Maps.newHashMap(); for (com.android.server.net.NetworkStatsCollection.Key key : mStats.keySet()) { java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(key.ident); if (keys == null) { keys = com.google.android.collect.Lists.newArrayList(); keysByIdent.put(key.ident, keys); } keys.add(key); } out.writeInt(com.android.server.net.NetworkStatsCollection.FILE_MAGIC); out.writeInt(com.android.server.net.NetworkStatsCollection.VERSION_UNIFIED_INIT); out.writeInt(keysByIdent.size()); for (com.android.server.net.NetworkIdentitySet ident : keysByIdent.keySet()) { final java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(ident); ident.writeToStream(out); out.writeInt(keys.size()); for (com.android.server.net.NetworkStatsCollection.Key key : keys) { final android.net.NetworkStatsHistory history = mStats.get(key); out.writeInt(key.uid); out.writeInt(key.set); out.writeInt(key.tag); history.writeToStream(out); } } out.flush(); }",aa4b32d3bd5b72f6e57ce68f98e887b8569fb158,"public void write(java.io.DataOutputStream out) throws java.io.IOException { final java.util.HashMap<com.android.server.net.NetworkIdentitySet, java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key>> keysByIdent = com.google.android.collect.Maps.newHashMap(); for (com.android.server.net.NetworkStatsCollection.Key key : mStats.keySet()) { java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(key.ident); if (keys == null) { keys = com.google.android.collect.Lists.newArrayList(); keysByIdent.put(key.ident, keys); } keys.add(key); } out.writeInt(com.android.server.net.NetworkStatsCollection.FILE_MAGIC); out.writeInt(com.android.server.net.NetworkStatsCollection.VERSION_WITH_DEFAULT_NETWORK); out.writeInt(keysByIdent.size()); for (com.android.server.net.NetworkIdentitySet ident : keysByIdent.keySet()) { final java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(ident); ident.writeToStream(out); out.writeInt(keys.size()); for (com.android.server.net.NetworkStatsCollection.Key key : keys) { final android.net.NetworkStatsHistory history = mStats.get(key); out.writeInt(key.uid); out.writeInt(key.set); out.writeInt(key.tag); out.writeInt(key.defaultNetwork); history.writeToStream(out); } } out.flush(); }",a6788ae3195f2fb0a07628d23a9512643ada8edb,write(java.io.DataOutputStream),write(java.io.DataOutputStream),6,26,"public void write(java.io.DataOutputStream out) throws java.io.IOException { final java.util.HashMap<com.android.server.net.NetworkIdentitySet, java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key>> keysByIdent = com.google.android.collect.Maps.newHashMap(); for (com.android.server.net.NetworkStatsCollection.Key key : mStats.keySet()) { java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(key.ident); if (keys == null) { keys = com.google.android.collect.Lists.newArrayList(); keysByIdent.put(key.ident, keys); } keys.add(key); } out.writeInt(com.android.server.net.NetworkStatsCollection.FILE_MAGIC); out.writeInt(com.android.server.net.NetworkStatsCollection.VERSION_UNIFIED_INIT); out.writeInt(keysByIdent.size()); for (com.android.server.net.NetworkIdentitySet ident : keysByIdent.keySet()) { final java.util.ArrayList<com.android.server.net.NetworkStatsCollection.Key> keys = keysByIdent.get(ident); ident.writeToStream(out); out.writeInt(keys.size()); for (com.android.server.net.NetworkStatsCollection.Key key : keys) { final android.net.NetworkStatsHistory history = mStats.get(key); out.writeInt(key.uid); out.writeInt(key.set); out.writeInt(key.tag); history.writeToStream(out); } } out.flush(); }",aa4b32d3bd5b72f6e57ce68f98e887b8569fb158,write(java.io.DataOutputStream),53390,382,372
171402,test_024-illegal-access_src_PublicAccess.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static void accesMethod() { java.lang.String shouldFail = SemiPrivate.privvyMethod(); java.lang.System.out.println((""Got "" + shouldFail)); }",c8bf9c615e7350bb09e6818d8a0f64b02bcfb8d7,,accesMethod(),4,1,"public static void accessStaticMethod() { java.lang.String shouldFail = SemiPrivate.privvyStaticMethod(); java.lang.System.out.println((""Got "" + shouldFail)); }",0794b2cbaf11571d60bc3efd07e2c0fcdcdb952a,accessStaticMethod(),140679,41,41
632132,src_com_android_bluetooth_hearingaid_HearingAidService.java,25.0,"@java.lang.Override protected boolean stop() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop()""); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop() called before start()""); return true; } setActiveDevice(null); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; if ((mStateMachinesThread) != null) { mStateMachinesThread.quitSafely(); mStateMachinesThread = null; } mAdapterService = null; mAdapter = null; return true; }",65794a3b515081fe0d7daaf0f8d0e6dee30f24d3,"@java.lang.Override protected boolean stop() { android.util.Log.i(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop()""); if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop() called before start()""); return true; } setActiveDevice(null); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; mHearingAidNativeInterface.cleanup(); mHearingAidNativeInterface = null; synchronized(mStateMachines) { for (com.android.bluetooth.hearingaid.HearingAidStateMachine sm : mStateMachines.values()) { sm.doQuit(); sm.cleanup(); } mStateMachines.clear(); } if ((mStateMachinesThread) != null) { mStateMachinesThread.quitSafely(); mStateMachinesThread = null; } mHearingAidNativeInterface = null; mAdapterService = null; mAdapter = null; return true; }",9239a1bbd4350ed9b04e29f7ae27bf106ca2dc2a,stop(),stop(),10,23,"@java.lang.Override protected boolean stop() { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop()""); } if ((com.android.bluetooth.hearingaid.HearingAidService.sHearingAidService) == null) { android.util.Log.w(com.android.bluetooth.hearingaid.HearingAidService.TAG, ""stop() called before start()""); return true; } setActiveDevice(null); com.android.bluetooth.hearingaid.HearingAidService.setHearingAidService(null); unregisterReceiver(mBondStateChangedReceiver); mBondStateChangedReceiver = null; unregisterReceiver(mConnectionStateChangedReceiver); mConnectionStateChangedReceiver = null; synchronized(mStateMachines) { for (com.android.bluetooth.hearingaid.HearingAidStateMachine sm : mStateMachines.values()) { sm.doQuit(); sm.cleanup(); } mStateMachines.clear(); } if ((mStateMachinesThread) != null) { mStateMachinesThread.quitSafely(); mStateMachinesThread = null; } mAdapterService = null; mAdapter = null; return true; }",4eae75e3f2cb3db4ff4e634c78e663f16b32bc1e,stop(),152182,297,291
49066,builder_src_main_java_com_android_builder_testing_CustomTestRunListener.java,,,,"@java.lang.Override public void testFailed(com.android.builder.testing.TestFailure status, com.android.ddmlib.testrunner.TestIdentifier test, java.lang.String trace) { if ((mLogger) != null) { mLogger.warning(java.lang.String.format(""\n%1$s > %2$s \u001b[31mFAILED \u001b[0m"", test.getClassName(), test.getTestName())); mLogger.warning(getModifiedTrace(trace)); } super.testFailed(status, test, trace); }",50e23dbf61f1f41359f0036735839ca3a7fecd9d,,"testFailed(com.android.builder.testing.TestFailure,com.android.ddmlib.testrunner.TestIdentifier,java.lang.String)",2,3,"@java.lang.Override public void testFailed(com.android.builder.testing.TestFailure status, com.android.ddmlib.testrunner.TestIdentifier test, java.lang.String trace) { if ((mLogger) != null) { mLogger.warning(java.lang.String.format(""\n%1$s: %2$s > %3$s \u001b[31mFAILED \u001b[0m"", mDeviceName, test.getClassName(), test.getTestName())); mLogger.warning(getModifiedTrace(trace)); } mFailedTests.add(test); super.testFailed(status, test, trace); }",7e3dc9811cbcd4c128e1f9f0e11f3ca5f750cd09,"testFailed(com.android.builder.testing.TestFailure,com.android.ddmlib.testrunner.TestIdentifier,java.lang.String)",218983,128,145
114591,dalvik_src_main_java_dalvik_system_ZygoteHooks.java,4.0,"public void postForkChild(int debugFlags, java.lang.String instructionSet) { dalvik.system.ZygoteHooks.nativePostForkChild(token, debugFlags, instructionSet); }",35d2d73fed502c6b6eb387f387b25248b739fc99,"public void postForkChild(int debugFlags, java.lang.String instructionSet) { dalvik.system.ZygoteHooks.nativePostForkChild(token, debugFlags, instructionSet); java.lang.Math.setRandomSeed(java.lang.System.currentTimeMillis()); }",0917ab5aa9908cb545b27e8153323e82a8b95e83,"postForkChild(int,java.lang.String)","postForkChild(int,java.lang.String)",4,4,"public void postForkChild(int debugFlags, java.lang.String instructionSet) { dalvik.system.ZygoteHooks.nativePostForkChild(token, debugFlags, instructionSet); java.lang.Math.setRandomSeedInternal(java.lang.System.currentTimeMillis()); }",616e6eaba7c4e0473dd89dbe88c0138ac8a7f9b5,"postForkChild(int,java.lang.String)",453744,64,65
396553,src_java_com_android_internal_telephony_sip_SipPhoneBase.java,17.0,@java.lang.Override public void setNetworkSelectionModeAutomatic(android.os.Message response) { },9d2498e7d92cfe8f5193c4e6427bff7dd3ef8748,@java.lang.Override public void setNetworkSelectionModeAutomatic(com.android.internal.telephony.sip.Message response) { },7a3d90519c89e8826799dbbefcbcb3a1e9020491,setNetworkSelectionModeAutomatic(android.os.Message),setNetworkSelectionModeAutomatic(com.android.internal.telephony.sip.Message),4,74,@java.lang.Override public void setNetworkSelectionModeAutomatic(android.os.Message response) { },9d2498e7d92cfe8f5193c4e6427bff7dd3ef8748,setNetworkSelectionModeAutomatic(android.os.Message),398052,28,22
70274,java_src_main_java_com_google_protobuf_nano_Extension.java,5.0,"public static <T> com.google.protobuf.nano.Extension<T> create(int fieldNumber, com.google.protobuf.nano.Extension.TypeLiteral<T> type) { return new com.google.protobuf.nano.Extension<T>(fieldNumber, type); }",b889fde2099e1ce66314e9c3dcf4904edaa85769,"public static <M extends com.google.protobuf.nano.ExtendableMessageNano<M>, T> com.google.protobuf.nano.Extension<M, T> create(int type, java.lang.Class<T> clazz, int tag) { return new com.google.protobuf.nano.Extension<M, T>(type, clazz, tag); }",196a20cd424ac311f39acb3baac9a7becd944a42,"create(int,com.google.protobuf.nano.Extension$TypeLiteral)","create(int,java.lang.Class,int)",6,5,"public static <M extends com.google.protobuf.nano.ExtendableMessageNano<M>, T extends com.google.protobuf.nano.MessageNano> com.google.protobuf.nano.Extension<M, T> createMessageTyped(int type, java.lang.Class<T> clazz, int tag) { return new com.google.protobuf.nano.Extension<M, T>(type, clazz, tag, false); }",1a13bc43d7cacb45f39d10b0e003239a05ca70a3,"createMessageTyped(int,java.lang.Class,int)",250702,80,95
61266,java_src_main_java_com_google_protobuf_nano_WireFormatNano.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static boolean storeUnknownField(final java.util.List<com.google.protobuf.nano.UnknownFieldData> data, final com.google.protobuf.nano.CodedInputByteBufferNano input, final int tag) throws java.io.IOException { int startPos = input.getPosition(); input.skipField(tag); int endPos = input.getPosition(); byte[] bytes = input.getData(startPos, (endPos - startPos)); data.add(new com.google.protobuf.nano.UnknownFieldData(tag, bytes)); return (com.google.protobuf.nano.WireFormatNano.getTagWireType(tag)) != (com.google.protobuf.nano.WireFormatNano.WIRETYPE_END_GROUP); }",3714a6d1a8da412428bcc6db2f1d1ab054785d83,,"storeUnknownField(java.util.List,com.google.protobuf.nano.CodedInputByteBufferNano,int)",3,9,"public static boolean storeUnknownField(final java.util.List<com.google.protobuf.nano.UnknownFieldData> data, final com.google.protobuf.nano.CodedInputByteBufferNano input, final int tag) throws java.io.IOException { int startPos = input.getPosition(); boolean skip = input.skipField(tag); int endPos = input.getPosition(); byte[] bytes = input.getData(startPos, (endPos - startPos)); data.add(new com.google.protobuf.nano.UnknownFieldData(tag, bytes)); return skip; }",82e36832efcc489f4e69f56b8bde5fde7066a648,"storeUnknownField(java.util.List,com.google.protobuf.nano.CodedInputByteBufferNano,int)",3084,156,122
110106,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_Events_FieldLocationDebuggee.java,,,,public static void main(java.lang.String[] args) { runDebuggee(org.apache.harmony.jpda.tests.jdwp.Events.FieldLocationDebuggee.class); },ca4282ef475cc73ea39dbe8273a7595acb02f238,,main(java.lang.String[]),4,1,public static void main(java.lang.String[] args) { runDebuggee(org.apache.harmony.jpda.tests.jdwp.Events.FieldWithLocationDebuggee.class); },f40247687a7c6a442558d5b93690808ffc12e140,main(java.lang.String[]),37110,45,46
298803,service_java_com_android_server_wifi_util_InformationElementUtil.java,29.0,"private static java.lang.String wpaCipherToString(int cipher) { switch (cipher) { case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_CIPHER_NONE : return ""NONE""; case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_CIPHER_TKIP : return ""TKIP""; case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_CIPHER_CCMP : return ""CCMP""; default : return ""?""; } }",b9dac3a89bbe4cfeb3fb56f24983c3c7d2e490be,private static int parseWpaCipher(int cipher) { switch (cipher) { case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_CIPHER_NONE : return ScanResult.Cipher.NONE; case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_CIPHER_TKIP : return ScanResult.Cipher.TKIP; case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_CIPHER_CCMP : return ScanResult.Cipher.CCMP; default : return ScanResult.Cipher.NONE; } },8b7f7bef3b39b9cae0c37013f243934f50213eaf,wpaCipherToString(int),parseWpaCipher(int),6,0,"private static int parseWpaCipher(int cipher) { switch (cipher) { case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_CIPHER_NONE : return android.net.wifi.ScanResult.CIPHER_NONE; case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_CIPHER_TKIP : return android.net.wifi.ScanResult.CIPHER_TKIP; case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_CIPHER_CCMP : return android.net.wifi.ScanResult.CIPHER_CCMP; default : android.util.Log.w(""IE_Capabilities"", (""Unknown WPA cipher suite: "" + (java.lang.Integer.toHexString(cipher)))); return android.net.wifi.ScanResult.CIPHER_NONE; } }",5c207e7ee579dba4ad193f9fcf40d4606470d69d,parseWpaCipher(int),417688,135,188
578734,tests_telephonytests_src_com_android_internal_telephony_CellIdentityLteTest.java,1.0,"@android.test.suitebuilder.annotation.SmallTest public void testParcelWithInvalidMccMnc() { final java.lang.String invalidMcc = ""randomStuff""; final java.lang.String invalidMnc = ""randomStuff""; android.telephony.CellIdentityLte ci = new android.telephony.CellIdentityLte(com.android.internal.telephony.CellIdentityLteTest.CI, com.android.internal.telephony.CellIdentityLteTest.PCI, com.android.internal.telephony.CellIdentityLteTest.TAC, com.android.internal.telephony.CellIdentityLteTest.EARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.CI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.PCI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.TAC); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.EARFCN); p.writeString(invalidMcc); p.writeString(invalidMnc); p.setDataPosition(0); android.telephony.CellIdentityLte newCi = CellIdentityLte.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }",694185b3d2d2c70615feada7abd6efa0a1d536c3,"@android.test.suitebuilder.annotation.SmallTest public void testParcelWithInvalidMccMnc() { final java.lang.String invalidMcc = ""randomStuff""; final java.lang.String invalidMnc = ""randomStuff""; android.telephony.CellIdentityLte ci = new android.telephony.CellIdentityLte(com.android.internal.telephony.CellIdentityLteTest.CI, com.android.internal.telephony.CellIdentityLteTest.PCI, com.android.internal.telephony.CellIdentityLteTest.TAC, com.android.internal.telephony.CellIdentityLteTest.EARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(CellIdentity.TYPE_LTE); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.CI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.PCI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.TAC); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.EARFCN); p.writeString(invalidMcc); p.writeString(invalidMnc); p.setDataPosition(0); android.telephony.CellIdentityLte newCi = CellIdentityLte.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }",ad264295ee163a892099283b539798c769fbc11b,testParcelWithInvalidMccMnc(),testParcelWithInvalidMccMnc(),5,1,"@android.test.suitebuilder.annotation.SmallTest public void testParcelWithInvalidMccMnc() { final java.lang.String invalidMcc = ""randomStuff""; final java.lang.String invalidMnc = ""randomStuff""; android.telephony.CellIdentityLte ci = new android.telephony.CellIdentityLte(com.android.internal.telephony.CellIdentityLteTest.CI, com.android.internal.telephony.CellIdentityLteTest.PCI, com.android.internal.telephony.CellIdentityLteTest.TAC, com.android.internal.telephony.CellIdentityLteTest.EARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(CellIdentity.TYPE_LTE); p.writeString(invalidMcc); p.writeString(invalidMnc); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.CI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.PCI); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.TAC); p.writeInt(com.android.internal.telephony.CellIdentityLteTest.EARFCN); p.setDataPosition(0); android.telephony.CellIdentityLte newCi = CellIdentityLte.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }",6a73b5879ace0c78bd7d30f66a745c4b29346db0,testParcelWithInvalidMccMnc(),426390,313,313
252478,java_tests_RsTest_src_com_android_rs_test_UT_script_group2_gatherscatter.java,0.0,"public void initializeGlobals(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_addup s) { mArray = new int[(com.android.rs.test.UT_script_group2_gatherscatter.ARRAY_SIZE) * 4]; for (int i = 0; i < (com.android.rs.test.UT_script_group2_gatherscatter.ARRAY_SIZE); i++) { mArray[(i * 4)] = i * 7; mArray[((i * 4) + 1)] = (i * 7) + 1; mArray[((i * 4) + 2)] = (i * 7) + 2; mArray[((i * 4) + 3)] = (i * 7) + 3; } }",7980f80ca494065d8edba57c65531f8ff3a9aa76,"public void initializeGlobals(android.renderscript.RenderScript RS, com.android.rs.test.ScriptC_addup s) { mArray = new int[(com.android.rs.test.UT_script_group2_gatherscatter.ARRAY_SIZE) * 4]; for (int i = 0; i < (com.android.rs.test.UT_script_group2_gatherscatter.ARRAY_SIZE); i++) { mArray[(i * 4)] = i * 7; mArray[((i * 4) + 1)] = (i * 7) + 1; mArray[((i * 4) + 2)] = (i * 7) + 2; mArray[((i * 4) + 3)] = (i * 7) + 3; } }",3a366804f69a7eb3cbfec70e52d88051c06f9935,"initializeGlobals(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_addup)","initializeGlobals(android.renderscript.RenderScript,com.android.rs.test.ScriptC_addup)",7,0,"public void initializeGlobals(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_addup s) { mArray = new int[(com.android.rs.test.UT_script_group2_gatherscatter.ARRAY_SIZE) * 4]; for (int i = 0; i < (com.android.rs.test.UT_script_group2_gatherscatter.ARRAY_SIZE); i++) { mArray[(i * 4)] = i * 7; mArray[((i * 4) + 1)] = (i * 7) + 1; mArray[((i * 4) + 2)] = (i * 7) + 2; mArray[((i * 4) + 3)] = (i * 7) + 3; } }",7980f80ca494065d8edba57c65531f8ff3a9aa76,"initializeGlobals(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_addup)",379501,175,178
117753,jack-tests_tests_com_android_jack_opcodes_OpcodesTests.java,96.0,"@org.junit.Test public void aget_char() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(AGET_CHAR).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",fa6c5e7ecb4606ece904f888e0c94b9d15a34a4b,"@org.junit.Test public void aget_char() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(AGET_CHAR).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",e28c1e4fff4025a3f2dfd8443ed13e04c1532039,aget_char(),aget_char(),4,96,"@org.junit.Test public void aget_char() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(AGET_CHAR).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",aebc47cfc66fcc35dbbe078479ad15a3e76c459d,aget_char(),418883,111,109
434740,src_java_com_android_internal_telephony_PhoneSubInfoController.java,32.0,"public java.lang.String[] getIsimPcscf() throws android.os.RemoteException { com.android.internal.telephony.Phone phone = getPhone(getDefaultSubscription()); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, ""Requires READ_PRIVILEGED_PHONE_STATE""); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimPcscf(); } else { return null; } }",27d2f09613b53c5c9d30d28f55471532d0c49b6f,"public java.lang.String[] getIsimPcscf(int subId) throws android.os.RemoteException { com.android.internal.telephony.Phone phone = getPhone(subId); mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, ""Requires READ_PRIVILEGED_PHONE_STATE""); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimPcscf(); } else { return null; } }",ef0c8046c2c8db6fbd5dde6128fe62fa70a44f04,getIsimPcscf(),getIsimPcscf(int),2,38,"public java.lang.String[] getIsimPcscf(int subId) throws android.os.RemoteException { com.android.internal.telephony.Phone phone = getPhone(subId); if (phone != null) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, ""Requires READ_PRIVILEGED_PHONE_STATE""); com.android.internal.telephony.uicc.IsimRecords isim = phone.getIsimRecords(); if (isim != null) { return isim.getIsimPcscf(); } else { return null; } } else { loge((""getIsimPcscf phone is null for Subscription:"" + subId)); return null; } }",8a7f812b944f7be300a365dae6633bd415ab95c0,getIsimPcscf(int),169274,131,165
73571,updater_src_com_intellij_updater_SwingUpdaterUI.java,42.0,"private void doPerform() { isRunning.set(true); new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { try { myApplied = myOperation.execute(com.intellij.updater.SwingUpdaterUI.this); } catch (com.intellij.updater.OperationCancelledException ignore) { } catch (java.lang.Throwable e) { showError(e); } finally { isRunning.set(false); if (hasError.get()) { startProcess(""Failed to apply patch""); setProgress(100); myCancelButton.setText(com.intellij.updater.SwingUpdaterUI.EXIT_BUTTON_TITLE); myCancelButton.setEnabled(true); } else { exit(); } } } }).start(); }",97c74486c42510ea6f1fd468a50ba358c663f4ce,"private void doPerform() { isRunning.set(true); new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { try { myApplied = myOperation.execute(com.intellij.updater.SwingUpdaterUI.this); } catch (com.intellij.updater.OperationCancelledException ignore) { } catch (java.lang.Throwable e) { showError(e); } finally { isRunning.set(false); if (hasRetry.get()) { myRetryButton.setEnabled(true); } if (hasError.get()) { startProcess(""Failed to apply patch""); setProgress(100); myCancelButton.setText(com.intellij.updater.SwingUpdaterUI.EXIT_BUTTON_TITLE); myCancelButton.setEnabled(true); } else { exit(); } } } }).start(); }",90600639873de375de7ee4062e78983c565729fb,doPerform(),doPerform(),4,42,"private void doPerform() { isRunning.set(true); new java.lang.Thread(new java.lang.Runnable() { @java.lang.Override public void run() { try { myApplied = myOperation.execute(com.intellij.updater.SwingUpdaterUI.this); } catch (com.intellij.updater.OperationCancelledException ignore) { } catch (java.lang.Throwable e) { showError(e); } finally { isRunning.set(false); if (hasRetry.get()) { myRetryButton.setVisible(true); myRetryButton.setEnabled(true); } if (hasError.get()) { startProcess(""Failed to apply patch""); setProgress(100); myCancelButton.setText(com.intellij.updater.SwingUpdaterUI.EXIT_BUTTON_TITLE); myCancelButton.setEnabled(true); } else { exit(); } } } }).start(); }",11d78a5cf8249c6d7e550e6b1ab7c1b46a870f2d,doPerform(),334831,184,192
341547,service_java_com_android_server_wifi_WifiNative.java,274.0,"public void closeSupplicantConnection() { synchronized(com.android.server.wifi.WifiNative.sLock) { localLog(((mInterfacePrefix) + ""closeSupplicantConnection"")); com.android.server.wifi.WifiNative.closeSupplicantConnectionNative(); } }",ed2c580bcfd5a40e5aa81de79d88b9164ec0ab28,"public void closeSupplicantConnection() { if (!(com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE)) { synchronized(com.android.server.wifi.WifiNative.sLock) { localLog(((mInterfacePrefix) + ""closeSupplicantConnection"")); com.android.server.wifi.WifiNative.closeSupplicantConnectionNative(); } } }",441cf81b95883a55f76ccf73bc9030dbc613acc4,closeSupplicantConnection(),closeSupplicantConnection(),20,265,"public void closeSupplicantConnection() { if (com.android.server.wifi.WifiNative.HIDL_SUP_ENABLE) { } else { synchronized(com.android.server.wifi.WifiNative.sLock) { localLog(((mInterfacePrefix) + ""closeSupplicantConnection"")); com.android.server.wifi.WifiNative.closeSupplicantConnectionNative(); } } }",54d71426b1e8b702c1c33c476a9883c9ffe84280,closeSupplicantConnection(),177635,87,90
343029,dx_src_com_android_dx_rop_cst_CstProtoRef.java,,,,@java.lang.Override public java.lang.String toHuman() { return prototype.toString(); },0b5b2aaa94f3273d23bc5ce0d56d6cc096bab5ea,,toHuman(),8,1,@java.lang.Override public java.lang.String toHuman() { return prototype.getDescriptor(); },dee24ef55a56e2dcc95b8010a88a7933dd936d13,toHuman(),417173,22,22
79815,common_src_main_java_com_android_xml_AndroidManifest.java,7.0,"public static boolean hasVersionCode(com.android.io.IAbstractFile manifestFile) throws com.android.io.StreamException, javax.xml.xpath.XPathExpressionException { javax.xml.xpath.XPath xPath = com.android.xml.AndroidXPathFactory.newXPath(); java.lang.Object result = xPath.evaluate((((((""/"" + (com.android.xml.AndroidManifest.NODE_MANIFEST)) + ""/@"") + (AndroidXPathFactory.DEFAULT_NS_PREFIX)) + "":"") + (com.android.xml.AndroidManifest.ATTRIBUTE_VERSIONCODE)), new org.xml.sax.InputSource(manifestFile.getContents()), javax.xml.xpath.XPathConstants.NODE); if (result != null) { org.w3c.dom.Node node = ((org.w3c.dom.Node) (result)); if ((node.getNodeValue().length()) > 0) { return true; } } return false; }",741670627c69dc150a63133e23a75ecc84b52c61,"public static boolean hasVersionCode(com.android.io.IAbstractFile manifestFile) throws com.android.io.StreamException, javax.xml.xpath.XPathExpressionException { javax.xml.xpath.XPath xPath = com.android.xml.AndroidXPathFactory.newXPath(); java.io.InputStream is = null; try { is = manifestFile.getContents(); java.lang.Object result = xPath.evaluate((((((""/"" + (com.android.xml.AndroidManifest.NODE_MANIFEST)) + ""/@"") + (AndroidXPathFactory.DEFAULT_NS_PREFIX)) + "":"") + (com.android.xml.AndroidManifest.ATTRIBUTE_VERSIONCODE)), new org.xml.sax.InputSource(is), javax.xml.xpath.XPathConstants.NODE); if (result != null) { org.w3c.dom.Node node = ((org.w3c.dom.Node) (result)); if (!(node.getNodeValue().isEmpty())) { return true; } } } finally { if (is != null) { com.google.common.io.Closeables.closeQuietly(is); } } return false; }",537daebf18750298b88a68711771638a2799cb39,hasVersionCode(com.android.io.IAbstractFile),hasVersionCode(com.android.io.IAbstractFile),4,8,"public static boolean hasVersionCode(com.android.io.IAbstractFile manifestFile) throws com.android.io.StreamException, javax.xml.xpath.XPathExpressionException { javax.xml.xpath.XPath xPath = com.android.xml.AndroidXPathFactory.newXPath(); java.io.InputStream is = null; try { is = manifestFile.getContents(); java.lang.Object result = xPath.evaluate((((((""/"" + (com.android.xml.AndroidManifest.NODE_MANIFEST)) + ""/@"") + (AndroidXPathFactory.DEFAULT_NS_PREFIX)) + "":"") + (com.android.xml.AndroidManifest.ATTRIBUTE_VERSIONCODE)), new org.xml.sax.InputSource(is), javax.xml.xpath.XPathConstants.NODE); if (result != null) { org.w3c.dom.Node node = ((org.w3c.dom.Node) (result)); if (!(node.getNodeValue().isEmpty())) { return true; } } } finally { com.google.common.io.Closeables.closeQuietly(is); } return false; }",847cc5278de44bb69071288746630086ede2b6c8,hasVersionCode(com.android.io.IAbstractFile),38359,243,235
312143,src_solaris_classes_sun_awt_X11_XToolkit.java,76.0,"public int getScreenResolution() { long display = sun.awt.X11.XToolkit.getDisplay(); sun.awt.SunToolkit.awtLock(); try { return ((int) (((sun.awt.X11.XlibWrapper.DisplayWidth(display, sun.awt.X11.XlibWrapper.DefaultScreen(display))) * 25.4) / (sun.awt.X11.XlibWrapper.DisplayWidthMM(display, sun.awt.X11.XlibWrapper.DefaultScreen(display))))); } finally { sun.awt.SunToolkit.awtUnlock(); } }",4e97a01642fd96259c15b7e8fba479f616a4e63f,"public int getScreenResolution() { long display = sun.awt.X11.XToolkit.getDisplay(); sun.awt.SunToolkit.awtLock(); try { if ((java.lang.System.getenv(""_AWT_USE_XWAYLAND"")) != null) { final java.lang.String dpi = java.lang.System.getenv(""_AWT_XWAYLAND_DPI""); if ((dpi != null) && (!(dpi.trim().isEmpty()))) return java.lang.Integer.parseInt(dpi); } return ((int) (((sun.awt.X11.XlibWrapper.DisplayWidth(display, sun.awt.X11.XlibWrapper.DefaultScreen(display))) * 25.4) / (sun.awt.X11.XlibWrapper.DisplayWidthMM(display, sun.awt.X11.XlibWrapper.DefaultScreen(display))))); } finally { sun.awt.SunToolkit.awtUnlock(); } }",6c69a2be97a7eb7e721387d0f9d2ac95f842f088,getScreenResolution(),getScreenResolution(),7,76,"public int getScreenResolution() { long display = sun.awt.X11.XToolkit.getDisplay(); sun.awt.SunToolkit.awtLock(); try { final java.lang.String dpi = java.lang.System.getenv(""_AWT_FORCE_DPI""); if ((dpi != null) && (!(dpi.trim().isEmpty()))) return java.lang.Integer.parseInt(dpi); return ((int) (((sun.awt.X11.XlibWrapper.DisplayWidth(display, sun.awt.X11.XlibWrapper.DefaultScreen(display))) * 25.4) / (sun.awt.X11.XlibWrapper.DisplayWidthMM(display, sun.awt.X11.XlibWrapper.DefaultScreen(display))))); } finally { sun.awt.SunToolkit.awtUnlock(); } }",2ada6b270f4ed3105e34fc03aa1b58ceff7b058d,getScreenResolution(),345474,202,173
542981,src_com_android_bluetooth_hid_HidDeviceService.java,37.0,"@java.lang.Override protected boolean start() { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ""start()""); } initNative(); mNativeAvailable = true; return true; }",0ad71164458c4f2df9b80c02ae76bec297a63e9e,"@java.lang.Override protected boolean start() { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ""start()""); } com.android.bluetooth.hid.HidDeviceService.setHidDeviceService(this); mHandler = new com.android.bluetooth.hid.HidDeviceService.HidDeviceServiceHandler(); mHidDeviceNativeInterface.init(); mNativeAvailable = true; return true; }",47c2914ef04ad3105879758e14072946cab2b97b,start(),start(),14,38,"@java.lang.Override protected boolean start() { if (com.android.bluetooth.hid.HidDeviceService.DBG) { android.util.Log.d(com.android.bluetooth.hid.HidDeviceService.TAG, ""start()""); } mHandler = new com.android.bluetooth.hid.HidDeviceService.HidDeviceServiceHandler(); com.android.bluetooth.hid.HidDeviceService.setHidDeviceService(this); mHidDeviceNativeInterface.init(); mNativeAvailable = true; return true; }",a824c369fadbe41b9739cc8bc49ac4579ecb3287,start(),329383,124,124
65505,lint_cli_src_test_java_com_android_tools_lint_client_api_ProjectTest.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testInvalidLibraryReferences1() throws java.lang.Exception { com.android.tools.lint.client.api.ProjectTest.TestClient client = new com.android.tools.lint.client.api.ProjectTest.TestClient(); java.io.File dir = new java.io.File(""bogus""); com.android.tools.lint.client.api.ProjectTest.TestProject project1 = new com.android.tools.lint.client.api.ProjectTest.TestProject(client, dir); client.registerProject(dir, project1); project1.setDirectLibraries(java.util.Collections.<com.android.tools.lint.detector.api.Project>singletonList(project1)); java.util.List<com.android.tools.lint.detector.api.Project> libraries = project1.getAllLibraries(); assertNotNull(libraries); assertEquals(""Warning: Internal lint error: encountered Project [dir=bogus] more than once"", client.getLoggedOutput()); }",97c010fdf5851550cf8a10290d9be103818a4064,,testInvalidLibraryReferences1(),2,6,"public void testInvalidLibraryReferences1() throws java.lang.Exception { com.android.tools.lint.client.api.ProjectTest.TestClient client = new com.android.tools.lint.client.api.ProjectTest.TestClient(); java.io.File dir = new java.io.File(""project""); com.android.tools.lint.client.api.ProjectTest.TestProject project1 = new com.android.tools.lint.client.api.ProjectTest.TestProject(client, dir); client.registerProject(dir, project1); project1.setDirectLibraries(java.util.Collections.<com.android.tools.lint.detector.api.Project>singletonList(project1)); java.util.List<com.android.tools.lint.detector.api.Project> libraries = project1.getAllLibraries(); assertNotNull(libraries); assertEquals(""Warning: Internal lint error: cyclic library dependency for Project [dir=project]"", client.getLoggedOutput()); }",d4307e809c62391b17dbbaa3dca51a91f0f37f2d,testInvalidLibraryReferences1(),253948,222,218
349175,src_java_com_android_ims_ImsManager.java,66.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private int getIntCarrierConfigForSlot(java.lang.String key) { android.os.PersistableBundle b = null; if ((mConfigManager) != null) { b = mConfigManager.getConfig(); } if (b != null) { return b.getInt(key); } else { return android.telephony.CarrierConfigManager.getDefaultConfig().getInt(key); } },181c8b5cb494e6bf73ba09786a44e7d41636edb6,,getIntCarrierConfigForSlot(java.lang.String),4,24,private int getIntCarrierConfigForSlot(java.lang.String key) { int[] subIds = android.telephony.SubscriptionManager.getSubId(mPhoneId); int subId = android.telephony.SubscriptionManager.INVALID_SUBSCRIPTION_ID; if ((subIds != null) && ((subIds.length) >= 1)) { subId = subIds[0]; } android.os.PersistableBundle b = null; if ((mConfigManager) != null) { b = mConfigManager.getConfigForSubId(subId); } if (b != null) { return b.getInt(key); } else { return android.telephony.CarrierConfigManager.getDefaultConfig().getInt(key); } },a6e0349504c329d1fe5eb93236dd2c2c4be80c75,getIntCarrierConfigForSlot(java.lang.String),250920,82,150
233160,espresso_core-tests_src_androidTest_java_android_support_test_espresso_base_UiControllerImplIntegrationTest.java,1.0,"@android.test.suitebuilder.annotation.LargeTest public void testInjectLargeString() throws java.lang.InterruptedException { sendActivity = getActivity(); getInstrumentation().waitForIdleSync(); final java.util.concurrent.atomic.AtomicBoolean requestFocusSucceded = new java.util.concurrent.atomic.AtomicBoolean(false); getInstrumentation().runOnMainSync(new java.lang.Runnable() { @java.lang.Override public void run() { final android.view.View view = sendActivity.findViewById(R.id.send_data_to_call_edit_text); android.util.Log.i(""TEST"", android.support.test.espresso.util.HumanReadables.describe(view)); requestFocusSucceded.set(view.requestFocus()); android.util.Log.i(""TEST-post"", android.support.test.espresso.util.HumanReadables.describe(view)); focusLatch.countDown(); } }); assertTrue(""requestFocus timed out!"", focusLatch.await(2, java.util.concurrent.TimeUnit.SECONDS)); assertTrue(""requestFocus failed."", requestFocusSucceded.get()); getInstrumentation().runOnMainSync(new java.lang.Runnable() { @java.lang.Override public void run() { try { injectEventWorked.set(uiController.injectString(""This is a string with 32 chars!!"")); latch.countDown(); } catch (android.support.test.espresso.InjectEventSecurityException e) { injectEventThrewSecurityException.set(true); } } }); assertFalse(""SecurityException exception was thrown."", injectEventThrewSecurityException.get()); assertTrue(""Timed out!"", latch.await(20, java.util.concurrent.TimeUnit.SECONDS)); assertTrue(injectEventWorked.get()); }",4338de4a2c9c4f94c56a74380ae8a1fa8493e51e,"@android.test.suitebuilder.annotation.LargeTest @org.junit.Test public void injectLargeString() throws java.lang.InterruptedException { sendActivity = rule.getActivity(); android.support.test.InstrumentationRegistry.getInstrumentation().waitForIdleSync(); final java.util.concurrent.atomic.AtomicBoolean requestFocusSucceded = new java.util.concurrent.atomic.AtomicBoolean(false); android.support.test.InstrumentationRegistry.getInstrumentation().runOnMainSync(new java.lang.Runnable() { @java.lang.Override public void run() { final android.view.View view = sendActivity.findViewById(R.id.send_data_to_call_edit_text); android.util.Log.i(""TEST"", android.support.test.espresso.util.HumanReadables.describe(view)); requestFocusSucceded.set(view.requestFocus()); android.util.Log.i(""TEST-post"", android.support.test.espresso.util.HumanReadables.describe(view)); focusLatch.countDown(); } }); assertTrue(""requestFocus timed out!"", focusLatch.await(2, java.util.concurrent.TimeUnit.SECONDS)); assertTrue(""requestFocus failed."", requestFocusSucceded.get()); android.support.test.InstrumentationRegistry.getInstrumentation().runOnMainSync(new java.lang.Runnable() { @java.lang.Override public void run() { try { injectEventWorked.set(uiController.injectString(""This is a string with 32 chars!!"")); latch.countDown(); } catch (android.support.test.espresso.InjectEventSecurityException e) { injectEventThrewSecurityException.set(true); } } }); assertFalse(""SecurityException exception was thrown."", injectEventThrewSecurityException.get()); assertTrue(""Timed out!"", latch.await(20, java.util.concurrent.TimeUnit.SECONDS)); assertTrue(injectEventWorked.get()); }",6af287ad0ec8c3db147d33ee2cd98be2188e5508,testInjectLargeString(),injectLargeString(),2,3,"@org.junit.Test public void injectLargeString() throws java.lang.InterruptedException { sendActivity = rule.getActivity(); android.support.test.InstrumentationRegistry.getInstrumentation().waitForIdleSync(); final java.util.concurrent.atomic.AtomicBoolean requestFocusSucceded = new java.util.concurrent.atomic.AtomicBoolean(false); android.support.test.InstrumentationRegistry.getInstrumentation().runOnMainSync(new java.lang.Runnable() { @java.lang.Override public void run() { final android.view.View view = sendActivity.findViewById(R.id.send_data_to_call_edit_text); android.util.Log.i(""TEST"", android.support.test.espresso.util.HumanReadables.describe(view)); requestFocusSucceded.set(view.requestFocus()); android.util.Log.i(""TEST-post"", android.support.test.espresso.util.HumanReadables.describe(view)); focusLatch.countDown(); } }); assertTrue(""requestFocus timed out!"", focusLatch.await(2, java.util.concurrent.TimeUnit.SECONDS)); assertTrue(""requestFocus failed."", requestFocusSucceded.get()); android.support.test.InstrumentationRegistry.getInstrumentation().runOnMainSync(new java.lang.Runnable() { @java.lang.Override public void run() { try { injectEventWorked.set(uiController.injectString(""This is a string with 32 chars!!"")); latch.countDown(); } catch (android.support.test.espresso.InjectEventSecurityException e) { injectEventThrewSecurityException.set(true); } } }); assertFalse(""SecurityException exception was thrown."", injectEventThrewSecurityException.get()); assertTrue(""Timed out!"", latch.await(20, java.util.concurrent.TimeUnit.SECONDS)); assertTrue(injectEventWorked.get()); }",65200e65c7ef319207d5be26135beacc2a4cddee,injectLargeString(),234445,408,396
579565,src_java_com_android_internal_telephony_RIL.java,154.0,"@java.lang.Override public void queryCdmaRoamingPreference(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_QUERY_ROAMING_PREFERENCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getCdmaRoamingPreference(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""queryCdmaRoamingPreference"", e); } } }",4c82155f09529499fe59dab6f2ab5cc522731c0d,"@java.lang.Override public void queryCdmaRoamingPreference(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_CDMA_QUERY_ROAMING_PREFERENCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getCdmaRoamingPreference(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""queryCdmaRoamingPreference"", e); } } }",1a61efe0dd650b6d7030c755a2a02f864cab5357,queryCdmaRoamingPreference(android.os.Message),queryCdmaRoamingPreference(android.os.Message),3,154,"@java.lang.Override public void queryCdmaRoamingPreference(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_CDMA_QUERY_ROAMING_PREFERENCE, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); try { radioProxy.getCdmaRoamingPreference(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""queryCdmaRoamingPreference"", e); } } }",4c82155f09529499fe59dab6f2ab5cc522731c0d,queryCdmaRoamingPreference(android.os.Message),89251,225,221
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,19.0,"public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",cdeaf3179fc55dca20ab455aa2d7e470f16e71ca,"public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",89c55f06fc5eaa0b33e289fb9b9774b8b99208a3,testAesCbcHmacSha384Udp4(),testAesCbcHmacSha384Udp4(),9,21,"public void testAesCbcHmacSha384Udp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",931af54b13eb51933959e5ce0d38d12049092441,testAesCbcHmacSha384Udp4(),1877,214,214
87794,build-system_manifest-merger_src_test_java_com_android_manifmerger_XmlDocumentTest.java,6.0,"public void testDiff3() throws java.lang.Exception { java.lang.String main = """" + (((((((((""<manifest\n"" + "" xmlns:android=\""http://schemas.android.com/apk/res/android\""\n"") + "" package=\""com.example.lib3\"">\n"") + ""\n"") + "" <application android:label=\""@string/lib_name\"" />\n"") + "" <!-- some comment that should be ignored -->\n"") + "" <activity android:name=\""activityOne\"" />\n"") + ""\n"") + ""\n"") + ""</manifest>""); java.lang.String library = """" + ((((((((""<manifest\n"" + "" xmlns:android=\""http://schemas.android.com/apk/res/android\""\n"") + "" package=\""com.example.lib3\"">\n"") + ""\n"") + "" <!-- some comment that should also be ignored -->\n"") + "" <activity android:name=\""activityOne\"" />\n"") + "" <application android:label=\""@string/lib_name\"" />\n"") + ""\n"") + ""</manifest>""); com.android.manifmerger.XmlDocument mainDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), ""testDiff3()""), main); com.android.manifmerger.XmlDocument libraryDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), ""testDiff3()""), library); assertTrue(mainDocument.getRootNode().compareTo(libraryDocument.getRootNode(), mergingReport)); }",125f6e297c6b0228c3aee8c8ab38615d44cfa760,"public void testDiff3() throws java.lang.Exception { java.lang.String main = """" + (((((((((""<manifest\n"" + "" xmlns:android=\""http://schemas.android.com/apk/res/android\""\n"") + "" package=\""com.example.lib3\"">\n"") + ""\n"") + "" <application android:label=\""@string/lib_name\"" />\n"") + "" <!-- some comment that should be ignored -->\n"") + "" <activity android:name=\""activityOne\"" />\n"") + ""\n"") + ""\n"") + ""</manifest>""); java.lang.String library = """" + ((((((((""<manifest\n"" + "" xmlns:android=\""http://schemas.android.com/apk/res/android\""\n"") + "" package=\""com.example.lib3\"">\n"") + ""\n"") + "" <!-- some comment that should also be ignored -->\n"") + "" <activity android:name=\""activityOne\"" />\n"") + "" <application android:label=\""@string/lib_name\"" />\n"") + ""\n"") + ""</manifest>""); com.android.manifmerger.XmlDocument mainDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), ""testDiff3()""), main); com.android.manifmerger.XmlDocument libraryDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), ""testDiff3()""), library); assertFalse(mainDocument.getRootNode().compareTo(libraryDocument.getRootNode(), mergingReport).isPresent()); }",9d00670e0226a6a860e92504c6fc12a5b599ed1c,testDiff3(),testDiff3(),5,6,"public void testDiff3() throws java.lang.Exception { java.lang.String main = """" + (((((((((""<manifest\n"" + "" xmlns:android=\""http://schemas.android.com/apk/res/android\""\n"") + "" package=\""com.example.lib3\"">\n"") + ""\n"") + "" <application android:label=\""@string/lib_name\"" />\n"") + "" <!-- some comment that should be ignored -->\n"") + "" <activity android:name=\""activityOne\"" />\n"") + ""\n"") + ""\n"") + ""</manifest>""); java.lang.String library = """" + ((((((((""<manifest\n"" + "" xmlns:android=\""http://schemas.android.com/apk/res/android\""\n"") + "" package=\""com.example.lib3\"">\n"") + ""\n"") + "" <!-- some comment that should also be ignored -->\n"") + "" <activity android:name=\""activityOne\"" />\n"") + "" <application android:label=\""@string/lib_name\"" />\n"") + ""\n"") + ""</manifest>""); com.android.manifmerger.XmlDocument mainDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), ""testDiff3()""), main); com.android.manifmerger.XmlDocument libraryDocument = com.android.manifmerger.TestUtils.xmlDocumentFromString(new com.android.manifmerger.TestUtils.TestSourceLocation(getClass(), ""testDiff3()""), library); assertFalse(mainDocument.compareTo(libraryDocument).isPresent()); }",39f738b3460be836ac12dd12cb22fe25e8bfe50c,testDiff3(),132658,378,369
63748,perflib_src_main_java_com_android_tools_perflib_vmtrace_viz_CallHierarchyRenderer.java,,,,"private void drawString(java.awt.Graphics2D g, java.lang.String name, java.awt.Rectangle bounds) { double widthOnScreen = (g.getTransform().getScaleX()) * (bounds.width); if ((myFont) == null) { myFont = g.getFont().deriveFont(8.0F); } g.setFont(myFont); g.setColor(java.awt.Color.BLACK); java.awt.geom.AffineTransform origTx = g.getTransform(); mSrc.x = (bounds.x) + (com.android.tools.perflib.vmtrace.viz.CallHierarchyRenderer.TEXT_LEFT_PADDING); mSrc.y = (bounds.y) + (com.android.tools.perflib.vmtrace.viz.CallHierarchyRenderer.TEXT_HEIGHT); origTx.transform(mSrc, mDst); g.setTransform(new java.awt.geom.AffineTransform()); if (widthOnScreen > (g.getFontMetrics().stringWidth(name))) { g.drawString(name, mDst.x, mDst.y); } g.setTransform(origTx); }",7a4d9553ac344edd65a8881077930ca43d7c9578,,"drawString(java.awt.Graphics2D,java.lang.String,java.awt.Rectangle)",5,7,"private void drawString(java.awt.Graphics2D g, java.lang.String name, java.awt.Rectangle bounds, java.awt.Color fontColor) { if ((myFont) == null) { myFont = g.getFont().deriveFont(8.0F); } g.setFont(myFont); g.setColor(fontColor); java.awt.geom.AffineTransform origTx = g.getTransform(); mSrc.x = (bounds.x) + (com.android.tools.perflib.vmtrace.viz.CallHierarchyRenderer.TEXT_LEFT_PADDING); mSrc.y = (bounds.y) + (com.android.tools.perflib.vmtrace.viz.CallHierarchyRenderer.TEXT_HEIGHT); double availableWidth = (g.getTransform().getScaleX()) * (bounds.width); origTx.transform(mSrc, mDst); g.setTransform(new java.awt.geom.AffineTransform()); double stringWidth = g.getFontMetrics().stringWidth(name); if (availableWidth > stringWidth) { g.drawString(name, mDst.x, mDst.y); } g.setTransform(origTx); }",8d8dc3d8ae14c2a2d201bd7cd08ba15a592afa84,"drawString(java.awt.Graphics2D,java.lang.String,java.awt.Rectangle,java.awt.Color)",76841,238,247
608852,src_com_android_se_Terminal.java,0.0,public void selectDefaultApplication() { try { select(null); } catch (java.util.NoSuchElementException e) { if ((getAccessControlEnforcer()) != null) { try { select(mAccessControlEnforcer.getDefaultAccessControlAid()); } catch (java.lang.Exception ignore) { } } } catch (android.os.RemoteException ignore) { } synchronized(mLock) { mDefaultApplicationSelectedOnBasicChannel = true; } },c35563956ed9b48b38e3c56dfe616d571040c56c,public void selectDefaultApplication() { try { select(null); synchronized(mLock) { mDefaultApplicationSelectedOnBasicChannel = true; } } catch (java.util.NoSuchElementException e) { if ((getAccessControlEnforcer()) != null) { try { select(mAccessControlEnforcer.getDefaultAccessControlAid()); synchronized(mLock) { mDefaultApplicationSelectedOnBasicChannel = true; } } catch (java.lang.Exception ignore) { } } } catch (android.os.RemoteException ignore) { } },ac31a1e81965e501255a3d2fbfad8c076d967a06,selectDefaultApplication(),selectDefaultApplication(),5,0,public void selectDefaultApplication() { try { select(null); } catch (java.util.NoSuchElementException e) { if ((getAccessControlEnforcer()) != null) { try { select(mAccessControlEnforcer.getDefaultAccessControlAid()); } catch (java.lang.Exception ignore) { } } } catch (android.os.RemoteException ignore) { } },9b9975ba88ed8e646c7c1648e10a84189166e0d3,selectDefaultApplication(),109836,109,75
588557,library_src_android_support_multidex_MultiDexExtractor.java,3.0,"static java.util.List<? extends java.io.File> load(android.content.Context context, java.io.File sourceApk, java.io.File dexDir, java.lang.String prefsKeyPrefix, boolean forceReload) throws java.io.IOException { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((((((""MultiDexExtractor.load("" + (sourceApk.getPath())) + "", "") + forceReload) + "", "") + prefsKeyPrefix) + "")"")); long currentCrc = android.support.multidex.MultiDexExtractor.getZipCrc(sourceApk); java.io.File lockFile = new java.io.File(dexDir, android.support.multidex.MultiDexExtractor.LOCK_FILENAME); java.io.RandomAccessFile lockRaf = new java.io.RandomAccessFile(lockFile, ""rw""); java.nio.channels.FileChannel lockChannel = null; java.nio.channels.FileLock cacheLock = null; java.util.List<android.support.multidex.MultiDexExtractor.ExtractedDex> files; java.io.IOException releaseLockException = null; try { lockChannel = lockRaf.getChannel(); android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, (""Blocking on lock "" + (lockFile.getPath()))); cacheLock = lockChannel.lock(); android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((lockFile.getPath()) + "" locked"")); if ((!forceReload) && (!(android.support.multidex.MultiDexExtractor.isModified(context, sourceApk, currentCrc, prefsKeyPrefix)))) { try { files = android.support.multidex.MultiDexExtractor.loadExistingExtractions(context, sourceApk, dexDir, prefsKeyPrefix); } catch (java.io.IOException ioe) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, (""Failed to reload existing extracted secondary dex files,"" + "" falling back to fresh extraction""), ioe); files = android.support.multidex.MultiDexExtractor.performExtractions(sourceApk, dexDir); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), currentCrc, files); } } else { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ""Detected that extraction must be performed.""); files = android.support.multidex.MultiDexExtractor.performExtractions(sourceApk, dexDir); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), currentCrc, files); } } finally { if (cacheLock != null) { try { cacheLock.release(); } catch (java.io.IOException e) { android.util.Log.e(android.support.multidex.MultiDexExtractor.TAG, (""Failed to release lock on "" + (lockFile.getPath()))); releaseLockException = e; } } if (lockChannel != null) { android.support.multidex.MultiDexExtractor.closeQuietly(lockChannel); } android.support.multidex.MultiDexExtractor.closeQuietly(lockRaf); } if (releaseLockException != null) { throw releaseLockException; } android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((""load found "" + (files.size())) + "" secondary dex files"")); return files; }",47b3c7d0285210b65131f99d6bf1a93df4804f71,"java.util.List<? extends java.io.File> load(android.content.Context context, java.lang.String prefsKeyPrefix, boolean forceReload) throws java.io.IOException { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((((((""MultiDexExtractor.load("" + (sourceApk.getPath())) + "", "") + forceReload) + "", "") + prefsKeyPrefix) + "")"")); java.util.List<android.support.multidex.MultiDexExtractor.ExtractedDex> files; if ((!forceReload) && (!(android.support.multidex.MultiDexExtractor.isModified(context, sourceApk, sourceCrc, prefsKeyPrefix)))) { try { files = loadExistingExtractions(context, prefsKeyPrefix); } catch (java.io.IOException ioe) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, (""Failed to reload existing extracted secondary dex files,"" + "" falling back to fresh extraction""), ioe); files = android.support.multidex.MultiDexExtractor.performExtractions(sourceApk, dexDir); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), sourceCrc, files); } } else { if (forceReload) { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ""Forced extraction must be performed.""); } else { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ""Detected that extraction must be performed.""); } files = android.support.multidex.MultiDexExtractor.performExtractions(sourceApk, dexDir); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), sourceCrc, files); } android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((""load found "" + (files.size())) + "" secondary dex files"")); return files; }",d7bbb625166808f025dced222c97b743bbb96c3c,"load(android.content.Context,java.io.File,java.io.File,java.lang.String,boolean)","load(android.content.Context,java.lang.String,boolean)",4,6,"java.util.List<? extends java.io.File> load(android.content.Context context, java.lang.String prefsKeyPrefix, boolean forceReload) throws java.io.IOException { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((((((""MultiDexExtractor.load("" + (sourceApk.getPath())) + "", "") + forceReload) + "", "") + prefsKeyPrefix) + "")"")); if (!(cacheLock.isValid())) { throw new java.lang.IllegalStateException(""MultiDexExtractor was closed""); } java.util.List<android.support.multidex.MultiDexExtractor.ExtractedDex> files; if ((!forceReload) && (!(android.support.multidex.MultiDexExtractor.isModified(context, sourceApk, sourceCrc, prefsKeyPrefix)))) { try { files = loadExistingExtractions(context, prefsKeyPrefix); } catch (java.io.IOException ioe) { android.util.Log.w(android.support.multidex.MultiDexExtractor.TAG, (""Failed to reload existing extracted secondary dex files,"" + "" falling back to fresh extraction""), ioe); files = performExtractions(); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), sourceCrc, files); } } else { if (forceReload) { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ""Forced extraction must be performed.""); } else { android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ""Detected that extraction must be performed.""); } files = performExtractions(); android.support.multidex.MultiDexExtractor.putStoredApkInfo(context, prefsKeyPrefix, android.support.multidex.MultiDexExtractor.getTimeStamp(sourceApk), sourceCrc, files); } android.util.Log.i(android.support.multidex.MultiDexExtractor.TAG, ((""load found "" + (files.size())) + "" secondary dex files"")); return files; }",37c0dc9c94317597481760029a1f1e38e6f3eba1,"load(android.content.Context,java.lang.String,boolean)",225327,457,448
354498,services_net_java_android_net_ip_RouterAdvertisementDaemon.java,13.0,"public void buildNewRa(android.net.ip.RouterAdvertisementDaemon.RaParams deprecatedParams, android.net.ip.RouterAdvertisementDaemon.RaParams newParams) { synchronized(mLock) { if (deprecatedParams != null) { mDeprecatedInfoTracker.putPrefixes(deprecatedParams.prefixes); mDeprecatedInfoTracker.putDnses(deprecatedParams.dnses); } if (newParams != null) { mDeprecatedInfoTracker.removePrefixes(newParams.prefixes); mDeprecatedInfoTracker.removeDnses(newParams.dnses); } mRaParams = newParams; assembleRaLocked(); } maybeNotifyMulticastTransmitter(); }",cd137875fb6c630cb96405a7e1b3c623e5764eb2,"public void buildNewRa(android.net.ip.RouterAdvertisementDaemon.RaParams deprecatedParams, android.net.ip.RouterAdvertisementDaemon.RaParams newParams) { synchronized(mLock) { if (deprecatedParams != null) { final android.net.ip.RouterAdvertisementDaemon.RaParams deprecated = new android.net.ip.RouterAdvertisementDaemon.RaParams(deprecatedParams); android.net.ip.RouterAdvertisementDaemon.removeULAs(deprecated.dnses); mDeprecatedInfoTracker.putPrefixes(deprecated.prefixes); mDeprecatedInfoTracker.putDnses(deprecated.dnses); } final android.net.ip.RouterAdvertisementDaemon.RaParams params = (newParams != null) ? new android.net.ip.RouterAdvertisementDaemon.RaParams(newParams) : null; if (params != null) { android.net.ip.RouterAdvertisementDaemon.removeULAs(params.dnses); mDeprecatedInfoTracker.removePrefixes(params.prefixes); mDeprecatedInfoTracker.removeDnses(params.dnses); } mRaParams = params; assembleRaLocked(); } maybeNotifyMulticastTransmitter(); }",1d13f2671494cefb5916c9bc3cc44278d2ed3c3d,"buildNewRa(android.net.ip.RouterAdvertisementDaemon$RaParams,android.net.ip.RouterAdvertisementDaemon$RaParams)","buildNewRa(android.net.ip.RouterAdvertisementDaemon$RaParams,android.net.ip.RouterAdvertisementDaemon$RaParams)",14,12,"public void buildNewRa(android.net.ip.RouterAdvertisementDaemon.RaParams deprecatedParams, android.net.ip.RouterAdvertisementDaemon.RaParams newParams) { synchronized(mLock) { if (deprecatedParams != null) { mDeprecatedInfoTracker.putPrefixes(deprecatedParams.prefixes); mDeprecatedInfoTracker.putDnses(deprecatedParams.dnses); } if (newParams != null) { mDeprecatedInfoTracker.removePrefixes(newParams.prefixes); mDeprecatedInfoTracker.removeDnses(newParams.dnses); } mRaParams = newParams; assembleRaLocked(); } maybeNotifyMulticastTransmitter(); }",cd137875fb6c630cb96405a7e1b3c623e5764eb2,"buildNewRa(android.net.ip.RouterAdvertisementDaemon$RaParams,android.net.ip.RouterAdvertisementDaemon$RaParams)",125106,257,140
325465,tzdata_update2_src_test_libcore_tzdata_update2_TimeZoneBundleInstallerTest.java,4.0,"private static libcore.tzdata.update2.TimeZoneBundle createValidTimeZoneBundle(java.lang.String rulesVersion, java.lang.String androidRevision) throws java.lang.Exception { return libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundleBuilder(rulesVersion, androidRevision).build(); }",3f7476aa1357e8d5b767ee6f6b789e335f0a6a35,"private static libcore.tzdata.update2.TimeZoneBundle createValidTimeZoneBundle(java.lang.String rulesVersion, java.lang.String revision) throws java.lang.Exception { return libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundleBuilder(rulesVersion, revision).build(); }",6cdd73c997ca4c980d62474067d4d74a54053cee,"createValidTimeZoneBundle(java.lang.String,java.lang.String)","createValidTimeZoneBundle(java.lang.String,java.lang.String)",3,20,"private static libcore.tzdata.update2.TimeZoneBundle createValidTimeZoneBundle(java.lang.String rulesVersion, int revision) throws java.lang.Exception { return libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundleBuilder(rulesVersion, revision).build(); }",8bc0650ad025a770cf69ccc2e4d27e1a84ad2d09,"createValidTimeZoneBundle(java.lang.String,int)",402070,75,71
44490,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_ui_DeviceManagerPage.java,,,,private void onNewDevice() { },ef155e80ba141679b9f8c46cb21b39577dcd3fc2,,onNewDevice(),5,27,"private void onNewDevice() { com.android.sdkuilib.internal.widgets.DeviceCreationDialog dlg = new com.android.sdkuilib.internal.widgets.DeviceCreationDialog(getShell(), mDeviceManager, mUpdaterData.getImageFactory(), null); if ((dlg.open()) == (org.eclipse.jface.window.Window.OK)) { onRefresh(); selectCellByDevice(dlg.getCreatedDevice()); updateButtonStates(); } }",806fac9c2859d5c2d6fcba3a3759618544cf3f2c,onNewDevice(),481172,8,103
142188,sdk-common_src_main_java_com_android_ide_common_blame_SourcePositionRange.java,1.0,"@java.lang.Override public com.google.gson.JsonElement serialize(com.android.ide.common.blame.SourceFragmentPositionRange position, java.lang.reflect.Type type, com.google.gson.JsonSerializationContext jsonSerializationContext) { com.google.gson.JsonObject result = new com.google.gson.JsonObject(); if ((position.getStartLine()) != (-1)) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.START_LINE, position.getStartLine()); } if ((position.getStartColumn()) != (-1)) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.START_COLUMN, position.getStartColumn()); } if ((position.getStartOffset()) != (-1)) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.START_OFFSET, position.getStartOffset()); } if (((position.getEndLine()) != (-1)) && ((position.getEndLine()) != (position.getStartLine()))) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.END_LINE, position.getEndLine()); } if (((position.getEndColumn()) != (-1)) && ((position.getEndColumn()) != (position.getStartColumn()))) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.END_COLUMN, position.getEndColumn()); } if (((position.getEndOffset()) != (-1)) && ((position.getEndOffset()) != (position.getStartOffset()))) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.END_OFFSET, position.getEndOffset()); } return result; }",766b05dc52081c0abf7890a78bd955b4a51cd7e6,"@java.lang.Override public com.google.gson.JsonElement serialize(com.android.ide.common.blame.SourcePositionRange position, java.lang.reflect.Type type, com.google.gson.JsonSerializationContext jsonSerializationContext) { com.google.gson.JsonObject result = new com.google.gson.JsonObject(); if ((position.getStartLine()) != (-1)) { result.addProperty(com.android.ide.common.blame.SourcePositionRange.START_LINE, position.getStartLine()); } if ((position.getStartColumn()) != (-1)) { result.addProperty(com.android.ide.common.blame.SourcePositionRange.START_COLUMN, position.getStartColumn()); } if ((position.getStartOffset()) != (-1)) { result.addProperty(com.android.ide.common.blame.SourcePositionRange.START_OFFSET, position.getStartOffset()); } if (((position.getEndLine()) != (-1)) && ((position.getEndLine()) != (position.getStartLine()))) { result.addProperty(com.android.ide.common.blame.SourcePositionRange.END_LINE, position.getEndLine()); } if (((position.getEndColumn()) != (-1)) && ((position.getEndColumn()) != (position.getStartColumn()))) { result.addProperty(com.android.ide.common.blame.SourcePositionRange.END_COLUMN, position.getEndColumn()); } if (((position.getEndOffset()) != (-1)) && ((position.getEndOffset()) != (position.getStartOffset()))) { result.addProperty(com.android.ide.common.blame.SourcePositionRange.END_OFFSET, position.getEndOffset()); } return result; }",52d85272592f607b8588cec3c0760db06e416696,"serialize(com.android.ide.common.blame.SourceFragmentPositionRange,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)","serialize(com.android.ide.common.blame.SourcePositionRange,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)",4,10,"@java.lang.Override public com.google.gson.JsonElement serialize(com.android.ide.common.blame.SourceFragmentPositionRange position, java.lang.reflect.Type type, com.google.gson.JsonSerializationContext jsonSerializationContext) { com.google.gson.JsonObject result = new com.google.gson.JsonObject(); if ((position.getStartLine()) != (-1)) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.START_LINE, position.getStartLine()); } if ((position.getStartColumn()) != (-1)) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.START_COLUMN, position.getStartColumn()); } if ((position.getStartOffset()) != (-1)) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.START_OFFSET, position.getStartOffset()); } if (((position.getEndLine()) != (-1)) && ((position.getEndLine()) != (position.getStartLine()))) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.END_LINE, position.getEndLine()); } if (((position.getEndColumn()) != (-1)) && ((position.getEndColumn()) != (position.getStartColumn()))) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.END_COLUMN, position.getEndColumn()); } if (((position.getEndOffset()) != (-1)) && ((position.getEndOffset()) != (position.getStartOffset()))) { result.addProperty(com.android.ide.common.blame.SourceFragmentPositionRange.END_OFFSET, position.getEndOffset()); } return result; }",766b05dc52081c0abf7890a78bd955b4a51cd7e6,"serialize(com.android.ide.common.blame.SourceFragmentPositionRange,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)",8067,371,378
184792,jack_src_com_android_jack_jayce_JayceClassOrInterfaceLoader.java,10.0,synchronized void notifyMethodLoaded(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loaded) { assert structureLoaded; (methodNotLoadedCount)--; if ((methodNotLoadedCount) == 0) { loaded.removeLoader(); } },536a2cfb5c0fa390bbb478a86c5f8a921f46cddd,void notifyMethodLoaded(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loaded) { synchronized(loaded) { assert structureLoaded; (methodNotLoadedCount)--; if ((methodNotLoadedCount) == 0) { loaded.removeLoader(); } } },58fb1631338d7365769c58ac5311674a8435a0cc,notifyMethodLoaded(com.android.jack.ir.ast.JDefinedClassOrInterface),notifyMethodLoaded(com.android.jack.ir.ast.JDefinedClassOrInterface),4,10,synchronized void notifyMethodLoaded(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface loaded) { assert structureLoaded; (methodNotLoadedCount)--; if ((methodNotLoadedCount) == 0) { loaded.removeLoader(); } },536a2cfb5c0fa390bbb478a86c5f8a921f46cddd,notifyMethodLoaded(com.android.jack.ir.ast.JDefinedClassOrInterface),323953,63,58
110925,jack_src_com_android_jack_library_OutputJackLibrary.java,1.0,@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.OutputVDir getOutputVDir() { return outputVDir; },45c2e0ac40e27f79af464d2e95465310b7f80b24,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.OutputVFile getJayceOutputVFile(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) throws com.android.sched.util.file.CannotCreateFileException { return outputVDir.createOutputVFile(new com.android.sched.vfs.VPath(((com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter().getName(type)) + (com.android.jack.backend.jayce.JayceFileImporter.JAYCE_FILE_EXTENSION)), '/')); }",f7523131519d187d00de9ee96a4ea71e0451375f,getOutputVDir(),getJayceOutputVFile(com.android.jack.ir.ast.JDefinedClassOrInterface),4,0,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.OutputVFile getJayceOutputVFile(@javax.annotation.Nonnull com.android.sched.vfs.VPath typePath) throws com.android.sched.util.file.CannotCreateFileException { return outputVDir.createOutputVFile(new com.android.sched.vfs.VPath(((typePath.getPathAsString('/')) + (com.android.jack.backend.jayce.JayceFileImporter.JAYCE_FILE_EXTENSION)), '/')); }",43b0fc8809aea83e962596432672b3560cb8bf89,getJayceOutputVFile(com.android.sched.vfs.VPath),415623,145,127
332484,src_com_android_phone_settings_VoicemailSettingsActivity.java,22.0,"@java.lang.Override protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); mShowVoicemailPreference = (icicle == null) && (android.text.TextUtils.equals(getIntent().getAction(), com.android.phone.settings.VoicemailSettingsActivity.ACTION_ADD_VOICEMAIL)); mSubscriptionInfoHelper = new com.android.phone.SubscriptionInfoHelper(this, getIntent()); mSubscriptionInfoHelper.setActionBarTitle(getActionBar(), getResources(), R.string.voicemail_settings_with_label); mPhone = mSubscriptionInfoHelper.getPhone(); mPhoneAccountHandle = com.android.phone.PhoneUtils.makePstnPhoneAccountHandle(mPhone); mOmtpVvmCarrierConfigHelper = new com.android.phone.vvm.omtp.OmtpVvmCarrierConfigHelper(mPhone.getContext(), mPhone.getSubId()); }",08cfd6a1bec7988893d6b9df835610a78aebfe99,"@java.lang.Override protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); if ((android.os.UserHandle.myUserId()) != (android.os.UserHandle.USER_OWNER)) { android.widget.Toast.makeText(this, R.string.voice_number_setting_primary_user_only, Toast.LENGTH_SHORT).show(); finish(); return; } mShowVoicemailPreference = (icicle == null) && (android.text.TextUtils.equals(getIntent().getAction(), com.android.phone.settings.VoicemailSettingsActivity.ACTION_ADD_VOICEMAIL)); mSubscriptionInfoHelper = new com.android.phone.SubscriptionInfoHelper(this, getIntent()); mSubscriptionInfoHelper.setActionBarTitle(getActionBar(), getResources(), R.string.voicemail_settings_with_label); mPhone = mSubscriptionInfoHelper.getPhone(); mPhoneAccountHandle = com.android.phone.PhoneUtils.makePstnPhoneAccountHandle(mPhone); mOmtpVvmCarrierConfigHelper = new com.android.phone.vvm.omtp.OmtpVvmCarrierConfigHelper(mPhone.getContext(), mPhone.getSubId()); }",13df2e0317ccef5750016292103fd17d2218bb85,onCreate(android.os.Bundle),onCreate(android.os.Bundle),2,22,"@java.lang.Override protected void onCreate(android.os.Bundle icicle) { super.onCreate(icicle); android.os.UserManager userManager = getApplicationContext().getSystemService(android.os.UserManager.class); if (!(userManager.isPrimaryUser())) { android.widget.Toast.makeText(this, R.string.voice_number_setting_primary_user_only, Toast.LENGTH_SHORT).show(); finish(); return; } mShowVoicemailPreference = (icicle == null) && (android.text.TextUtils.equals(getIntent().getAction(), com.android.phone.settings.VoicemailSettingsActivity.ACTION_ADD_VOICEMAIL)); mSubscriptionInfoHelper = new com.android.phone.SubscriptionInfoHelper(this, getIntent()); mSubscriptionInfoHelper.setActionBarTitle(getActionBar(), getResources(), R.string.voicemail_settings_with_label); mPhone = mSubscriptionInfoHelper.getPhone(); mPhoneAccountHandle = com.android.phone.PhoneUtils.makePstnPhoneAccountHandle(mPhone); mOmtpVvmCarrierConfigHelper = new com.android.phone.vvm.omtp.OmtpVvmCarrierConfigHelper(mPhone.getContext(), mPhone.getSubId()); }",e9ce414c2f09d94bdbc94686599c0df418172b23,onCreate(android.os.Bundle),45784,268,274
175623,sched_src_com_android_sched_util_sched_ManagedDataAsReport.java,,,,"private static java.lang.String getId(java.lang.Class<?> cls, java.lang.Class<?> category) { java.lang.String id = cls.getCanonicalName(); if (com.android.sched.item.Feature.class.isAssignableFrom(category)) { return ""f-"" + id; } else if (com.android.sched.item.TagOrMarkerOrComponent.class.isAssignableFrom(category)) { return ""tcm-"" + id; } else if (com.android.sched.schedulable.RunnableSchedulable.class.isAssignableFrom(category)) { return ""r-"" + id; } else if (com.android.sched.schedulable.AdapterSchedulable.class.isAssignableFrom(category)) { return ""a-"" + id; } else if (com.android.sched.item.Production.class.isAssignableFrom(category)) { return ""p-"" + id; } throw new java.lang.AssertionError(((""No 'id' for '"" + id) + ""'"")); }",23a5546183c09087ea2b6606498f73dbd6aa9327,,"getId(java.lang.Class,java.lang.Class)",3,7,"@javax.annotation.Nonnull private static java.lang.String getId(@javax.annotation.Nonnull java.lang.Class<?> cls, @javax.annotation.Nonnull java.lang.Class<?> category) { java.lang.String id = cls.getCanonicalName(); if (com.android.sched.item.Feature.class.isAssignableFrom(category)) { return ""f-"" + id; } else if (com.android.sched.item.TagOrMarkerOrComponent.class.isAssignableFrom(category)) { return ""tcm-"" + id; } else if (com.android.sched.schedulable.RunnableSchedulable.class.isAssignableFrom(category)) { return ""r-"" + id; } else if (com.android.sched.schedulable.AdapterSchedulable.class.isAssignableFrom(category)) { return ""a-"" + id; } else if (com.android.sched.item.Production.class.isAssignableFrom(category)) { return ""p-"" + id; } throw new java.lang.AssertionError(((""No 'id' for '"" + id) + ""'"")); }",1f562247c74c06d5e6dca0bc0213c9909f880f7f,"getId(java.lang.Class,java.lang.Class)",18604,222,239
346697,tests_wifitests_src_com_android_server_wifi_WifiNativeTest.java,15.0,"@org.junit.Test public void testSetupDriverForClientMode() { com.android.server.wifi.WificondControl wificondControl = mock(com.android.server.wifi.WificondControl.class); android.net.wifi.IWificond wificond = mock(android.net.wifi.IWificond.class); android.net.wifi.IClientInterface clientInterface = mock(android.net.wifi.IClientInterface.class); when(wificondControl.setupDriverForClientMode()).thenReturn(clientInterface); mWifiNative.setWificondControl(wificondControl); android.net.wifi.IClientInterface returnedClientInterface = mWifiNative.setupDriverForClientMode(); assertEquals(clientInterface, returnedClientInterface); verify(wificondControl).setupDriverForClientMode(); verify(mWifiNative).startHal(eq(true)); }",c27267e4ccc0892d0cf3f11bd2698639e7cf2f04,"@org.junit.Test public void testSetupDriverForClientMode() { com.android.server.wifi.WificondControl wificondControl = mock(com.android.server.wifi.WificondControl.class); android.net.wifi.IWificond wificond = mock(android.net.wifi.IWificond.class); android.net.wifi.IClientInterface clientInterface = mock(android.net.wifi.IClientInterface.class); when(wificondControl.setupDriverForClientMode()).thenReturn(clientInterface); mWifiNative.setWificondControl(wificondControl); android.net.wifi.IClientInterface returnedClientInterface = mWifiNative.setupDriverForClientMode(); assertEquals(clientInterface, returnedClientInterface); verify(mWifiNative).startHal(eq(true)); verify(wificondControl).setupDriverForClientMode(); }",66981bfcfb397dc60dd0d03127f7fcfcbb296225,testSetupDriverForClientMode(),testSetupDriverForClientMode(),9,16,"@org.junit.Test public void testSetupDriverForClientMode() { com.android.server.wifi.WificondControl wificondControl = mock(com.android.server.wifi.WificondControl.class); android.net.wifi.IWificond wificond = mock(android.net.wifi.IWificond.class); android.net.wifi.IClientInterface clientInterface = mock(android.net.wifi.IClientInterface.class); when(wificondControl.setupDriverForClientMode()).thenReturn(clientInterface); mWifiNative.setWificondControl(wificondControl); android.net.wifi.IClientInterface returnedClientInterface = mWifiNative.setupForClientMode(); assertEquals(clientInterface, returnedClientInterface); verify(mWifiNative).startHal(eq(true)); verify(wificondControl).setupDriverForClientMode(); }",d7f4c19e3bb085b91dccd4b7a464bc541909485b,testSetupDriverForClientMode(),217818,188,187
114479,sched_src_com_android_sched_util_codec_ConvertCodec.java,,,,"@java.lang.Override @javax.annotation.CheckForNull public DST checkString(com.android.sched.util.codec.CodecContext context, java.lang.String string) throws com.android.sched.util.codec.ParsingException { codec.checkString(context, string); return null; }",1eee7ed9bd87eadfeabe853541e12c12df9bc468,,"checkString(com.android.sched.util.codec.CodecContext,java.lang.String)",2,2,"@java.lang.Override @javax.annotation.CheckForNull public DST checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) throws com.android.sched.util.codec.ParsingException { codec.checkString(context, string); return null; }",6df045ef8bac8c4d1fbe8fec28f15a1d352e9963,"checkString(com.android.sched.util.codec.CodecContext,java.lang.String)",439571,65,76
346149,service_java_com_android_server_wifi_WifiVendorHal.java,91.0,"public boolean startVendorHal(boolean isStaMode) { if (!(mHalDeviceManager.start())) { android.util.Log.e(com.android.server.wifi.WifiVendorHal.TAG, ""Failed to start the vendor HAL""); return false; } android.hardware.wifi.V1_0.IWifiIface iface; if (isStaMode) { mIWifiStaIface = mHalDeviceManager.createStaIface(null, null); if ((mIWifiStaIface) == null) { android.util.Log.e(com.android.server.wifi.WifiVendorHal.TAG, ""Failed to create STA Iface. Vendor Hal start failed""); mHalDeviceManager.stop(); return false; } iface = ((android.hardware.wifi.V1_0.IWifiIface) (mIWifiStaIface)); if (!(registerStaIfaceCallback())) { android.util.Log.e(com.android.server.wifi.WifiVendorHal.TAG, ""Failed to register sta iface callback""); mHalDeviceManager.stop(); return false; } mIWifiRttController = mHalDeviceManager.createRttController(iface); if ((mIWifiRttController) == null) { android.util.Log.e(com.android.server.wifi.WifiVendorHal.TAG, ""Failed to create RTT controller. Vendor Hal start failed""); stopVendorHal(); return false; } enableLinkLayerStats(); } else { mIWifiApIface = mHalDeviceManager.createApIface(null, null); if ((mIWifiApIface) == null) { android.util.Log.e(com.android.server.wifi.WifiVendorHal.TAG, ""Failed to create AP Iface. Vendor Hal start failed""); stopVendorHal(); return false; } iface = ((android.hardware.wifi.V1_0.IWifiIface) (mIWifiApIface)); } mIWifiChip = mHalDeviceManager.getChip(iface); if ((mIWifiChip) == null) { android.util.Log.e(com.android.server.wifi.WifiVendorHal.TAG, ""Failed to get the chip created for the Iface. Vendor Hal start failed""); stopVendorHal(); return false; } if (!(registerChipCallback())) { android.util.Log.e(com.android.server.wifi.WifiVendorHal.TAG, ""Failed to register chip callback""); mHalDeviceManager.stop(); return false; } android.util.Log.i(com.android.server.wifi.WifiVendorHal.TAG, ""Vendor Hal started successfully""); return true; }",dd6020e732d428934ea37cea4b70cdd1b4712447,"public boolean startVendorHal(boolean isStaMode) { if (!(mHalDeviceManager.start())) { mLog.e(""Failed to start the vendor HAL""); return false; } android.hardware.wifi.V1_0.IWifiIface iface; if (isStaMode) { mIWifiStaIface = mHalDeviceManager.createStaIface(null, null); if ((mIWifiStaIface) == null) { mLog.e(""Failed to create STA Iface. Vendor Hal start failed""); mHalDeviceManager.stop(); return false; } iface = ((android.hardware.wifi.V1_0.IWifiIface) (mIWifiStaIface)); if (!(registerStaIfaceCallback())) { mLog.e(""Failed to register sta iface callback""); mHalDeviceManager.stop(); return false; } mIWifiRttController = mHalDeviceManager.createRttController(iface); if ((mIWifiRttController) == null) { mLog.e(""Failed to create RTT controller. Vendor Hal start failed""); stopVendorHal(); return false; } enableLinkLayerStats(); } else { mIWifiApIface = mHalDeviceManager.createApIface(null, null); if ((mIWifiApIface) == null) { mLog.e(""Failed to create AP Iface. Vendor Hal start failed""); stopVendorHal(); return false; } iface = ((android.hardware.wifi.V1_0.IWifiIface) (mIWifiApIface)); } mIWifiChip = mHalDeviceManager.getChip(iface); if ((mIWifiChip) == null) { mLog.e(""Failed to get the chip created for the Iface. Vendor Hal start failed""); stopVendorHal(); return false; } if (!(registerChipCallback())) { mLog.e(""Failed to register chip callback""); mHalDeviceManager.stop(); return false; } mLog.i(""Vendor Hal started successfully""); return true; }",d25f6de95394af0ce50f144d09e033908a846094,startVendorHal(boolean),startVendorHal(boolean),5,94,"public boolean startVendorHal(boolean isStaMode) { if (!(mHalDeviceManager.start())) { mErrLog.e(""Failed to start the vendor HAL""); return false; } android.hardware.wifi.V1_0.IWifiIface iface; if (isStaMode) { mIWifiStaIface = mHalDeviceManager.createStaIface(null, null); if ((mIWifiStaIface) == null) { mErrLog.e(""Failed to create STA Iface. Vendor Hal start failed""); mHalDeviceManager.stop(); return false; } iface = ((android.hardware.wifi.V1_0.IWifiIface) (mIWifiStaIface)); if (!(registerStaIfaceCallback())) { mErrLog.e(""Failed to register sta iface callback""); mHalDeviceManager.stop(); return false; } mIWifiRttController = mHalDeviceManager.createRttController(iface); if ((mIWifiRttController) == null) { mErrLog.e(""Failed to create RTT controller. Vendor Hal start failed""); stopVendorHal(); return false; } enableLinkLayerStats(); } else { mIWifiApIface = mHalDeviceManager.createApIface(null, null); if ((mIWifiApIface) == null) { mErrLog.e(""Failed to create AP Iface. Vendor Hal start failed""); stopVendorHal(); return false; } iface = ((android.hardware.wifi.V1_0.IWifiIface) (mIWifiApIface)); } mIWifiChip = mHalDeviceManager.getChip(iface); if ((mIWifiChip) == null) { mErrLog.e(""Failed to get the chip created for the Iface. Vendor Hal start failed""); stopVendorHal(); return false; } if (!(registerChipCallback())) { mErrLog.e(""Failed to register chip callback""); mHalDeviceManager.stop(); return false; } mErrLog.i(""Vendor Hal started successfully""); return true; }",9844c6f42582e214fef51965a4222a6aebe83e4b,startVendorHal(boolean),404555,464,472
116997,telecomm_java_android_telecom_ConnectionService.java,66.0,private void removeConnection(android.telecom.Connection connection) { java.lang.String id = mIdByConnection.get(connection); connection.unsetConnectionService(this); connection.removeConnectionListener(mConnectionListener); mConnectionById.remove(mIdByConnection.get(connection)); mIdByConnection.remove(connection); mAdapter.removeCall(id); },a223c2c5ff8b1d0f096f4326c99195db8a762ff6,protected void removeConnection(android.telecom.Connection connection) { java.lang.String id = mIdByConnection.get(connection); connection.unsetConnectionService(this); connection.removeConnectionListener(mConnectionListener); mConnectionById.remove(mIdByConnection.get(connection)); mIdByConnection.remove(connection); mAdapter.removeCall(id); },bd101faf9e57e5b41626a7e0e232eca3b35b72a8,removeConnection(android.telecom.Connection),removeConnection(android.telecom.Connection),2,64,private void removeConnection(android.telecom.Connection connection) { java.lang.String id = mIdByConnection.get(connection); connection.unsetConnectionService(this); connection.removeConnectionListener(mConnectionListener); mConnectionById.remove(mIdByConnection.get(connection)); mIdByConnection.remove(connection); mAdapter.removeCall(id); },a223c2c5ff8b1d0f096f4326c99195db8a762ff6,removeConnection(android.telecom.Connection),188414,81,81
114079,luni_src_test_java_libcore_java_net_URLConnectionTest.java,51.0,"public void testClientSendsContentLength() throws java.lang.Exception { server.enqueue(new com.google.mockwebserver.MockResponse().setBody(""A"")); server.play(); java.net.HttpURLConnection connection = ((java.net.HttpURLConnection) (server.getUrl(""/"").openConnection())); connection.setDoOutput(true); java.io.OutputStream out = connection.getOutputStream(); out.write(new byte[]{ 'A', 'B', 'C' }); out.close(); assertEquals(""A"", readAscii(connection.getInputStream(), java.lang.Integer.MAX_VALUE)); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); assertContains(request.getHeaders(), ""Content-Length: 3""); }",4dc54d95a31a35b40e7e8256a634b263c0f278a4,"public void testClientSendsContentLength() throws java.lang.Exception { server.enqueue(new com.google.mockwebserver.MockResponse().setBody(""A"")); server.play(); java.net.HttpURLConnection connection = ((java.net.HttpURLConnection) (server.getUrl(""/"").openConnection())); connection.setDoOutput(true); java.io.OutputStream out = connection.getOutputStream(); out.write(new byte[]{ 'A', 'B', 'C' }); out.close(); assertEquals(""A"", readAscii(connection.getInputStream(), java.lang.Integer.MAX_VALUE)); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); libcore.java.net.URLConnectionTest.assertContains(request.getHeaders(), ""Content-Length: 3""); }",7511dc153b94379f0e277b7ff33cee8a5eb00539,testClientSendsContentLength(),testClientSendsContentLength(),3,51,"public void testClientSendsContentLength() throws java.lang.Exception { server.enqueue(new com.google.mockwebserver.MockResponse().setBody(""A"")); server.play(); java.net.HttpURLConnection connection = ((java.net.HttpURLConnection) (server.getUrl(""/"").openConnection())); connection.setDoOutput(true); java.io.OutputStream out = connection.getOutputStream(); out.write(new byte[]{ 'A', 'B', 'C' }); out.close(); assertEquals(""A"", readAscii(connection.getInputStream(), java.lang.Integer.MAX_VALUE)); com.google.mockwebserver.RecordedRequest request = server.takeRequest(); assertContains(request.getHeaders(), ""Content-Length: 3""); }",4dc54d95a31a35b40e7e8256a634b263c0f278a4,testClientSendsContentLength(),455376,171,161
111283,build-system_project-test_src_main_java_com_android_build_tests_ProjectTest.java,5.0,"public static junit.framework.Test suite() { java.io.File folder = com.android.build.tests.ProjectTest.getFolderFromEnvVar(com.android.build.tests.ProjectTest.TEST_FOLDER); java.io.File sdkFolder = com.android.build.tests.ProjectTest.getFolderFromEnvVar(com.android.build.tests.ProjectTest.TEST_SDK); java.io.File ndkFolder = com.android.build.tests.ProjectTest.getFolderFromEnvVar(com.android.build.tests.ProjectTest.TEST_NDK); junit.framework.TestSuite suite = new junit.framework.TestSuite(); suite.setName(""ProjectTests""); java.io.File[] children = folder.listFiles(); if (children != null) { for (java.io.File child : children) { if (child.isDirectory()) { com.android.build.tests.ProjectTest.searchForProject(suite, child, sdkFolder, ndkFolder); } } } return suite; }",129c649740fb2f53dcd6a1355a025d77fbdf531f,"public static junit.framework.Test suite() { java.io.File folder = com.android.build.tests.ProjectTest.getFolderFromEnvVar(com.android.build.tests.ProjectTest.TEST_FOLDER); java.io.File sdkFolder = com.android.build.tests.ProjectTest.getFolderFromEnvVar(com.android.build.tests.ProjectTest.TEST_SDK); java.io.File ndkFolder = com.android.build.tests.ProjectTest.getFolderFromEnvVar(com.android.build.tests.ProjectTest.TEST_NDK); java.lang.String taskName = ""assembleDebug""; if ((java.lang.System.getenv(""USE_DEVICE"")) != null) { taskName = ""connectedCheck""; } java.util.List<java.lang.String> args = com.google.common.collect.Lists.newArrayList(); if ((java.lang.System.getenv(""CUSTOM_BUILDTOOLS"")) != null) { args.add((""-PCUSTOM_BUILDTOOLS="" + (java.lang.System.getenv(""CUSTOM_BUILDTOOLS"")))); } junit.framework.TestSuite suite = new junit.framework.TestSuite(); suite.setName(""ProjectTests""); java.io.File[] children = folder.listFiles(); if (children != null) { for (java.io.File child : children) { if (child.isDirectory()) { com.android.build.tests.ProjectTest.searchForProject(suite, child, sdkFolder, ndkFolder, taskName, args); } } } return suite; }",624042dd6137db30060ba1510431209ee4e67153,suite(),suite(),3,5,"public static junit.framework.Test suite() { java.io.File folder = com.android.build.tests.ProjectTest.getFolderFromEnvVar(com.android.build.tests.ProjectTest.TEST_FOLDER); java.io.File sdkFolder = com.android.build.tests.ProjectTest.getFolderFromEnvVar(com.android.build.tests.ProjectTest.TEST_SDK); java.io.File ndkFolder = com.android.build.tests.ProjectTest.getFolderFromEnvVar(com.android.build.tests.ProjectTest.TEST_NDK); java.lang.String taskName = ""assembleDebug""; if ((java.lang.System.getenv(""USE_DEVICE"")) != null) { taskName = ""connectedCheck""; } junit.framework.TestSuite suite = new junit.framework.TestSuite(); suite.setName(""ProjectTests""); java.io.File[] children = folder.listFiles(); if (children != null) { for (java.io.File child : children) { if (child.isDirectory()) { com.android.build.tests.ProjectTest.searchForProject(suite, child, sdkFolder, ndkFolder, taskName); } } } return suite; }",00e2477314aa9e11201c743d7134c2c78ee84cbb,suite(),468251,347,266
62920,harmony-tests_src_test_java_org_apache_harmony_nio_tests_java_nio_channels_SelectorTest.java,28.0,protected void setUp() throws java.lang.Exception { super.setUp(); ssc = java.nio.channels.ServerSocketChannel.open(); ssc.configureBlocking(false); java.net.ServerSocket ss = ssc.socket(); java.net.InetSocketAddress address = new java.net.InetSocketAddress(org.apache.harmony.nio.tests.java.nio.channels.SelectorTest.PORT); ss.bind(address); selector = java.nio.channels.Selector.open(); },a5a0369fea424d5f0337295a199ef9478121809b,protected void setUp() throws java.lang.Exception { ssc = java.nio.channels.ServerSocketChannel.open(); ssc.configureBlocking(false); java.net.ServerSocket ss = ssc.socket(); ss.bind(null); localAddress = ss.getLocalSocketAddress(); selector = java.nio.channels.Selector.open(); },148cbc6d685718b1c2662cfd998bae9b4fc4941c,setUp(),setUp(),2,28,protected void setUp() throws java.lang.Exception { super.setUp(); ssc = java.nio.channels.ServerSocketChannel.open(); ssc.configureBlocking(false); java.net.ServerSocket ss = ssc.socket(); ss.bind(null); localAddress = ss.getLocalSocketAddress(); selector = java.nio.channels.Selector.open(); },5580f7abd5e948d458fbd2716e52ced92d118aca,setUp(),251494,81,86
141804,jack_src_com_android_jack_cfg_CfgBuilder.java,9.0,@javax.annotation.Nonnull public com.android.jack.cfg.ControlFlowGraph getCfg() { assert (cfg) != null; return cfg; },859dd10948198e3a845722a08840b716b7785a50,"@javax.annotation.Nonnull public com.android.jack.cfg.ControlFlowGraph getCfg() { assert (method) != null; com.android.sched.util.log.Event optEvent = com.android.sched.util.log.TracerFactory.getTracer().start(JackEventType.REMOVE_DEAD_CODE); try { com.android.jack.cfg.CfgBuilder.removeUnaccessibleNode(blocks, entryBlock, exitBlock); } finally { optEvent.end(); } return new com.android.jack.cfg.ControlFlowGraph(method, basicBlockId, entryBlock, exitBlock, blocks); }",9b1762e5e68d541f50faa6f15fcfb9b3e8a63042,getCfg(),getCfg(),12,9,"@javax.annotation.Nonnull public com.android.jack.cfg.ControlFlowGraph getCfg() { com.android.sched.util.log.Event optEvent = com.android.sched.util.log.TracerFactory.getTracer().start(JackEventType.REMOVE_DEAD_CODE); try { com.android.jack.cfg.CfgBuilder.removeUnaccessibleNode(blocks, entryBlock, exitBlock, basicBlockId); } finally { optEvent.end(); } return new com.android.jack.cfg.ControlFlowGraph(method, basicBlockId, entryBlock, exitBlock, blocks); }",4ad18712ffac5b6b5e55938045a5de4ba8d1b0b3,getCfg(),293722,132,129
332623,ojluni_src_main_java_java_lang_invoke_CallSite.java,,,,"private void InitializeGetTarget() { synchronized(java.lang.invoke.CallSite.class) { if ((java.lang.invoke.CallSite.GET_TARGET) == null) { try { java.lang.invoke.CallSite.GET_TARGET = java.lang.invoke.MethodHandles.Lookup.IMPL_LOOKUP.findVirtual(java.lang.invoke.CallSite.class, ""getTarget"", java.lang.invoke.MethodType.methodType(java.lang.invoke.MethodHandle.class)); } catch (java.lang.ReflectiveOperationException e) { throw new java.lang.InternalError(e); } } } }",2180eca6ac90fd1b11e5213b6072fe1f3d11a354,,InitializeGetTarget(),9,9,"private void initializeGetTarget() { synchronized(java.lang.invoke.CallSite.class) { if ((java.lang.invoke.CallSite.GET_TARGET) == null) { try { java.lang.invoke.CallSite.GET_TARGET = java.lang.invoke.MethodHandles.Lookup.IMPL_LOOKUP.findVirtual(java.lang.invoke.CallSite.class, ""getTarget"", java.lang.invoke.MethodType.methodType(java.lang.invoke.MethodHandle.class)); } catch (java.lang.ReflectiveOperationException e) { throw new java.lang.InternalError(e); } } } }",9ce4bdf438f4cee72480fe2c9eacc018d2d7fae9,initializeGetTarget(),83927,136,136
233353,test_vogar_target_caliper_TestRunnerCaliperTest.java,,,,"@vogar.target.TestRunnerProperties(testClass = vogar.target.caliper.TestRunnerCaliperTest.CaliperBenchmarkFailing.class) @org.junit.Test public void testRunner_CaliperBenchmark_NoRunner() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(""-i"", ""runtime""); runner.run(); checkFilteredOutput().unsupported().completedNormally(); }",be30957133eedb8cc6c4467de684696840cf029b,,testRunner_CaliperBenchmark_NoRunner(),3,2,"@vogar.target.TestRunnerProperties(testClass = vogar.target.caliper.TestRunnerCaliperTest.CaliperBenchmarkFailing.class) @org.junit.Test public void testRunner_CaliperBenchmark_NoRunner() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(""-i"", ""runtime""); runner.run(); expectedResults().unsupported().completedNormally(); }",b71098e7ed24aaa05e07da8cccdddd4eb7063b4f,testRunner_CaliperBenchmark_NoRunner(),130752,99,98
655799,system_image_uitests_app_src_androidTest_java_com_android_devtools_systemimage_uitest_smoke_SettingsTest.java,37.0,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""T144630613"") public void activateDeactivatePolicy() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); if (checkStatusOfPolicy(instrumentation, ""Sample Device Admin"")) { com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, ""Sample Device Admin""); } assertFalse(checkStatusOfPolicy(instrumentation, ""Sample Device Admin"")); com.android.devtools.systemimage.uitest.utils.SettingsUtil.activate(instrumentation, ""Sample Device Admin""); assertTrue(checkStatusOfPolicy(instrumentation, ""Sample Device Admin"")); com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, ""Sample Device Admin""); assertFalse(checkStatusOfPolicy(instrumentation, ""Sample Device Admin"")); }",87ca77dc266c06b39df27a9766e33c93c38d941d,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""T144630613"") public void activateDeactivatePolicy() throws java.lang.Exception { if (isAPIDemoInstalled) { if (checkStatusOfPolicy()) { com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, ""Sample Device Admin""); } assertFalse(checkStatusOfPolicy()); com.android.devtools.systemimage.uitest.utils.SettingsUtil.activate(instrumentation, ""Sample Device Admin""); assertTrue(checkStatusOfPolicy()); com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, ""Sample Device Admin""); assertFalse(checkStatusOfPolicy()); } }",80f98173630a62b17ecec376dcdc09fdf14e7b62,activateDeactivatePolicy(),activateDeactivatePolicy(),4,37,"@org.junit.Test @com.android.devtools.systemimage.uitest.annotations.TestInfo(id = ""T144630613"") public void activateDeactivatePolicy() throws java.lang.Exception { boolean isAPIDemoInstalled = com.android.devtools.systemimage.uitest.utils.PackageInstallationUtil.isPackageInstalled(instrumentation, ""com.example.android.apis""); if (isAPIDemoInstalled) { if (checkStatusOfPolicy()) { com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, ""Sample Device Admin""); } assertFalse(checkStatusOfPolicy()); com.android.devtools.systemimage.uitest.utils.SettingsUtil.activate(instrumentation, ""Sample Device Admin""); assertTrue(checkStatusOfPolicy()); com.android.devtools.systemimage.uitest.utils.SettingsUtil.deactivate(instrumentation, ""Sample Device Admin""); assertFalse(checkStatusOfPolicy()); } }",b79c73c3a201777acff0485e97bc8338337902b2,activateDeactivatePolicy(),289595,166,206
21452,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_PkgWindow2.java,,,,"@java.lang.Override public org.eclipse.swt.graphics.Image getImage(java.lang.Object element) { com.android.sdkuilib.internal.repository.icons.ImageFactory imgFactory = mUpdaterData.getImageFactory(); if (imgFactory != null) { if ((mColumn) == (mColumnName)) { return imgFactory.getImageForObject(element); } else if (((mColumn) == (mColumnStatus)) && (element instanceof com.android.sdkuilib.internal.repository.PkgWindow2.PkgItem)) { switch (((com.android.sdkuilib.internal.repository.PkgWindow2.PkgItem) (element)).getState()) { case INSTALLED : return imgFactory.getImageByName(""accept_icon16.png""); case UPDATE_AVAILABLE : case NEW_AVAILABLE : return imgFactory.getImageByName(""reject_icon16.png""); case LOCKED_NO_INSTALL : return imgFactory.getImageByName(""broken_pkg_16.png""); } } } return super.getImage(element); }",126e0b25a9f7e550141be3bd152e99af54599785,,getImage(java.lang.Object),6,34,"@java.lang.Override public org.eclipse.swt.graphics.Image getImage(java.lang.Object element) { com.android.sdkuilib.internal.repository.icons.ImageFactory imgFactory = mUpdaterData.getImageFactory(); if (imgFactory != null) { if ((mColumn) == (mColumnName)) { if (element instanceof com.android.sdkuilib.internal.repository.PackagesPage.PkgCategory) { return imgFactory.getImageForObject(((com.android.sdkuilib.internal.repository.PackagesPage.PkgCategory) (element)).getIconRef()); } return imgFactory.getImageForObject(element); } else if (((mColumn) == (mColumnStatus)) && (element instanceof com.android.sdkuilib.internal.repository.PackagesPage.PkgItem)) { switch (((com.android.sdkuilib.internal.repository.PackagesPage.PkgItem) (element)).getState()) { case INSTALLED : return imgFactory.getImageByName(""accept_icon16.png""); case UPDATE_AVAILABLE : case NEW_AVAILABLE : return imgFactory.getImageByName(""reject_icon16.png""); case LOCKED_NO_INSTALL : return imgFactory.getImageByName(""broken_pkg_16.png""); } } } return super.getImage(element); }",bd48255045b8d5d376a30f1a94f43d2f6133c6b9,getImage(java.lang.Object),440018,228,285
65516,sdk-common_src_main_java_com_android_ide_common_rendering_HardwareConfigHelper.java,10.0,"@com.android.annotations.NonNull public static java.lang.String getGenericLabel(@com.android.annotations.NonNull com.android.sdklib.devices.Device device) { java.lang.String name = device.getName(); if (name.equals(""3.7 FWVGA slider"")) { name = ""3.7in FWVGA slider""; } java.util.regex.Matcher matcher = com.android.ide.common.rendering.HardwareConfigHelper.GENERIC_PATTERN.matcher(name); if (matcher.matches()) { java.lang.String size = matcher.group(1); java.lang.String n = matcher.group(2); int dot = size.indexOf('.'); if (dot == (-1)) { size = size + "".0""; dot = (size.length()) - 2; } for (int i = 0; i < (2 - dot); i++) { size = ' ' + size; } name = (size + ""\"" "") + n; } return java.lang.String.format(java.util.Locale.US, ""%1$s (%2$s)"", name, com.android.ide.common.rendering.HardwareConfigHelper.getResolutionString(device)); }",fa2b096a08de4949b6b27874700cbf584258bff9,"@com.android.annotations.NonNull public static java.lang.String getGenericLabel(@com.android.annotations.NonNull com.android.sdklib.devices.Device device) { java.lang.String name = device.getName(); if (name.equals(""3.7 FWVGA slider"")) { name = ""3.7in FWVGA slider""; } java.util.regex.Matcher matcher = com.android.ide.common.rendering.HardwareConfigHelper.GENERIC_PATTERN.matcher(name); if (matcher.matches()) { java.lang.String size = matcher.group(1); java.lang.String n = matcher.group(2); int dot = size.indexOf('.'); if (dot == (-1)) { size += "".0""; dot = (size.length()) - 2; } for (int i = 0; i < (2 - dot); i++) { size = ' ' + size; } name = (size + ""\"" "") + n; } return java.lang.String.format(java.util.Locale.US, ""%1$s (%2$s)"", name, com.android.ide.common.rendering.HardwareConfigHelper.getResolutionString(device)); }",60733a5f495037663995e01d6d31e59321e97bfd,getGenericLabel(com.android.sdklib.devices.Device),getGenericLabel(com.android.sdklib.devices.Device),4,10,"@com.android.annotations.NonNull public static java.lang.String getGenericLabel(@com.android.annotations.NonNull com.android.sdklib.devices.Device device) { java.lang.String name = device.getDisplayName(); java.util.regex.Matcher matcher = com.android.ide.common.rendering.HardwareConfigHelper.GENERIC_PATTERN.matcher(name); if (matcher.matches()) { java.lang.String size = matcher.group(1); java.lang.String n = matcher.group(2); int dot = size.indexOf('.'); if (dot == (-1)) { size += "".0""; dot = (size.length()) - 2; } for (int i = 0; i < (2 - dot); i++) { size = ' ' + size; } name = (size + ""\"" "") + n; } return java.lang.String.format(java.util.Locale.US, ""%1$s (%2$s)"", name, com.android.ide.common.rendering.HardwareConfigHelper.getResolutionString(device)); }",7fb20a64e0dd998dc6ab42ee41214e4519274844,getGenericLabel(com.android.sdklib.devices.Device),517090,259,233
591196,src_java_com_android_internal_telephony_uicc_euicc_EuiccCard.java,14.0,"public void cancelSession(byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { }",244257c515a647496eeb9982124baf0593751c7b,"public void cancelSession(byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { java.lang.String command = com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(com.android.internal.telephony.uicc.euicc.TAG_CANCEL_SESSION).addChildAsBytes(com.android.internal.telephony.uicc.euicc.TAG_CTX_0, transactionId).addChildAsInteger(com.android.internal.telephony.uicc.euicc.TAG_CTX_1, reason).build().toHex(); java.lang.String response; try (com.android.internal.telephony.uicc.euicc.UiccLogicalChannel ch = com.android.internal.telephony.uicc.euicc.UiccLogicalChannel.openIsdR(mTm)) { response = ch.execStoreData(command); } com.android.internal.telephony.uicc.asn1.Asn1Node root = com.android.internal.telephony.uicc.euicc.EuiccCard.parseResponse(response); try { if (root.hasChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_1)) { throw new com.android.internal.telephony.uicc.euicc.EuiccCardErrorException(OperationCode.CANCEL_SESSION, root.getChild(com.android.internal.telephony.uicc.euicc.TAG_CTX_1).asInteger()); } } catch (com.android.internal.telephony.uicc.asn1.TagNotFoundException | com.android.internal.telephony.uicc.asn1.InvalidAsn1DataException e) { throw new com.android.internal.telephony.uicc.euicc.EuiccCardInvalidResponseException((""Cannot parse response: "" + response), e); } return root; }",108aea16616fb13d39e8c38dd464a3c117fe4098,"cancelSession(byte[],int,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)","cancelSession(byte[],int,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)",8,14,"public void cancelSession(byte[] transactionId, @android.telephony.euicc.EuiccCardManager.CancelReason int reason, com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback<byte[]> callback, android.os.Handler handler) { sendApdu(newRequestProvider((com.android.internal.telephony.uicc.euicc.apdu.RequestBuilder requestBuilder) -> requestBuilder.addStoreData(com.android.internal.telephony.uicc.asn1.Asn1Node.newBuilder(Tags.TAG_CANCEL_SESSION).addChildAsBytes(Tags.TAG_CTX_0, transactionId).addChildAsInteger(Tags.TAG_CTX_1, reason).build().toHex())), (byte[] response) -> parseResponseAndCheckSimpleError(response, EuiccCardErrorException.OPERATION_CANCEL_SESSION).toBytes(), callback, handler); }",3ed2a6caa5b5cd30b1f18341257ef3afbef5827b,"cancelSession(byte[],int,com.android.internal.telephony.uicc.euicc.async.AsyncResultCallback,android.os.Handler)",396841,460,197
253791,luni_src_main_java_libcore_io_Os.java,107.0,public int setsid() throws android.system.ErrnoException;,85424017a7bd1d62496e7722135b62878a658ea0,public int setsid() throws libcore.io.ErrnoException;,150ffd0ff296e573e3fedee55787f5017d2c4974,setsid(),setsid(),8,107,public int setsid() throws android.system.ErrnoException;,85424017a7bd1d62496e7722135b62878a658ea0,setsid(),494671,15,14
79721,graphics_java_android_graphics_Canvas.java,134.0,"private static native boolean native_clipRect(int nCanvas, float left, float top, float right, float bottom, int regionOp);",257b192a33fa94b11b7da4831c1a20c4c85e6070,"private static native boolean native_clipRect(long nCanvas, float left, float top, float right, float bottom, int regionOp);",b8c04e25c990f7161cf5c8832113ada009b18dd1,"native_clipRect(int,float,float,float,float,int)","native_clipRect(long,float,float,float,float,int)",6,33,"private static native boolean native_clipRect(long nativeCanvas, float left, float top, float right, float bottom, int regionOp);",4f9c148e341fb15c5b8f7464bf093a9a729b7dd8,"native_clipRect(long,float,float,float,float,int)",35629,29,29
110941,jack_src_com_android_jack_library_InputJackLibrary.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.InputVFile getBinary(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type, @javax.annotation.Nonnull com.android.jack.library.BinaryKind binaryKind) throws com.android.jack.library.BinaryDoesNotExistException { try { return libraryVDir.getInputVFile(new com.android.sched.vfs.VPath(((com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter().getName(type)) + (BinaryKind.DEX.getFileExtension())), '/')); } catch (com.android.sched.util.file.NotFileOrDirectoryException e) { throw new com.android.jack.library.BinaryDoesNotExistException(this, type, binaryKind); } }",ddb1ea699b576f65d5f53a4899610a2468b82ae6,,"getBinary(com.android.jack.ir.ast.JDefinedClassOrInterface,com.android.jack.library.BinaryKind)",3,7,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.InputVFile getBinary(@javax.annotation.Nonnull com.android.sched.vfs.VPath typePath, @javax.annotation.Nonnull com.android.jack.library.BinaryKind binaryKind) throws com.android.jack.library.BinaryDoesNotExistException { try { return libraryVDir.getInputVFile(new com.android.sched.vfs.VPath(((typePath.getPathAsString('/')) + (BinaryKind.DEX.getFileExtension())), '/')); } catch (com.android.sched.util.file.NotFileOrDirectoryException e) { throw new com.android.jack.library.BinaryDoesNotExistException(getLocation(), typePath, binaryKind); } }",c6b6a00f9eb577788087c3a1335522ff2241d81f,"getBinary(com.android.sched.vfs.VPath,com.android.jack.library.BinaryKind)",314760,183,166
144781,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_scope_VariantScope.java,,,,public java.util.Collection<java.lang.Object> getNdkBuildable() { return ndkBuildable; },392673630928e03c749ea051777b3f61a5b5421f,,getNdkBuildable(),6,3,@com.android.annotations.NonNull public java.util.Collection<java.lang.Object> getNdkBuildable() { return ndkBuildable; },c7fefdb880ad56ec1d3532d399aa4f9a68eccf5b,getNdkBuildable(),337597,27,35
64895,luni_src_test_java_libcore_icu_DateIntervalFormatTest.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test10560853() throws java.lang.Exception { java.util.Locale l = java.util.Locale.US; java.util.TimeZone utc = java.util.TimeZone.getTimeZone(""UTC""); long midnight = 0; long midnightNext = 1 * (libcore.icu.DateIntervalFormatTest.DAY); int flags = (FORMAT_SHOW_DATE) | (FORMAT_SHOW_WEEKDAY); assertEquals(""Thursday, January 1"", formatDateRange(l, utc, midnight, midnightNext, flags)); long nextMorning = (1 * (libcore.icu.DateIntervalFormatTest.DAY)) + 1; assertEquals(""Thursday, January 1 – Friday, January 2"", formatDateRange(l, utc, midnight, nextMorning, flags)); long nextMidnight = 2 * (libcore.icu.DateIntervalFormatTest.DAY); assertEquals(""Thursday, January 1 – Friday, January 2"", formatDateRange(l, utc, midnight, nextMidnight, flags)); }",c3103d00d962d67cdeb16f2e989ac1ac87b94cd0,,test10560853(),2,5,"public void test10560853_for_single_day_events() throws java.lang.Exception { java.util.Locale l = java.util.Locale.US; java.util.TimeZone utc = java.util.TimeZone.getTimeZone(""UTC""); int flags = ((FORMAT_SHOW_TIME) | (FORMAT_24HOUR)) | (FORMAT_SHOW_DATE); assertEquals(""January 1, 22:00–00:00"", formatDateRange(l, utc, (22 * (libcore.icu.DateIntervalFormatTest.HOUR)), (24 * (libcore.icu.DateIntervalFormatTest.HOUR)), flags)); assertEquals(""January 1, 22:00 – January 2, 00:30"", formatDateRange(l, utc, (22 * (libcore.icu.DateIntervalFormatTest.HOUR)), ((24 * (libcore.icu.DateIntervalFormatTest.HOUR)) + (30 * (libcore.icu.DateIntervalFormatTest.MINUTE))), flags)); }",e987dbe303c4c120c124a34a7e8aac528721cfef,test10560853_for_single_day_events(),253831,221,219
150078,src_main_java_org_conscrypt_OpenSSLCipher.java,55.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected void engineUpdateAAD(byte[] input, int inputOffset, int inputLen) { if ((bufCount) != 0) { throw new java.lang.IllegalStateException(""Cannot call updateAAD after calling update""); } if ((aad) == null) { aad = java.util.Arrays.copyOfRange(input, inputOffset, inputLen); } else { int newSize = (aad.length) + inputLen; byte[] newaad = new byte[newSize]; java.lang.System.arraycopy(aad, 0, newaad, 0, aad.length); java.lang.System.arraycopy(input, inputOffset, newaad, aad.length, inputLen); } }",8a8b6a580b00f7f1bbcb1ec0ba89c914baaecac5,,"engineUpdateAAD(byte[],int,int)",12,68,"protected void engineUpdateAAD(byte[] input, int inputOffset, int inputLen) { if ((aad) == null) { aad = java.util.Arrays.copyOfRange(input, inputOffset, inputLen); } else { int newSize = (aad.length) + inputLen; byte[] newaad = new byte[newSize]; java.lang.System.arraycopy(aad, 0, newaad, 0, aad.length); java.lang.System.arraycopy(input, inputOffset, newaad, aad.length, inputLen); } }",0431075016522b43ff002a6fdaee3b002948e6cc,"engineUpdateAAD(byte[],int,int)",149912,155,127
148622,build-system_builder-model_src_main_java_com_android_builder_model_NativeLibrary.java,,,,@com.android.annotations.NonNull java.lang.String getToolchain();,fc9c50d435a8dd25f1d095fe8a3d46f915a3c12d,,getToolchain(),7,9,@com.android.annotations.NonNull java.lang.String getToolchainName();,ba9ff15851950662049cb2af6bc30ce51bd8d430,getToolchainName(),134591,17,18
340832,testapps_src_com_android_server_telecom_testapps_TestConnectionManager.java,31.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onRttConnectionFailure(android.telecom.RemoteConnection connection) { sendRttConnectionFailure(); },e483a5bd4a24116cacec9ef9bcfdca531c42bb20,,onRttConnectionFailure(android.telecom.RemoteConnection),8,3,"@java.lang.Override public void onRttInitiationFailure(android.telecom.RemoteConnection connection, int reason) { sendRttInitiationFailure(reason); }",e9ab9f0db1bdec74f51ca2c5d594242f5676992a,"onRttInitiationFailure(android.telecom.RemoteConnection,int)",219775,32,39
616426,tests_unit_src_com_android_bluetooth_a2dp_A2dpServiceTest.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void verifyNoConnectionStateIntent(int timeoutMs, android.bluetooth.BluetoothDevice device, int newState, int prevState) { android.content.Intent intent = waitForNoIntent(timeoutMs, mConnectionStateChangedQueue); org.junit.Assert.assertNull(intent); }",54b93b0a6b4060a9b7b1b37859b73a31619bb2de,,"verifyNoConnectionStateIntent(int,android.bluetooth.BluetoothDevice,int,int)",4,8,"private void verifyNoConnectionStateIntent(int timeoutMs) { android.content.Intent intent = waitForNoIntent(timeoutMs, mConnectionStateChangedQueue); org.junit.Assert.assertNull(intent); }",bf3df8f21fa5f7ef275ecd762eb7d612770930a4,verifyNoConnectionStateIntent(int),345314,59,44
201481,jack_src_com_android_jack_ir_impl_JackIrBuilder.java,99.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@javax.annotation.Nonnull private com.android.jack.ir.ast.JLambda.BridgeDescriptor getBridgeDescriptor(@javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.lookup.MethodBinding mb) { com.android.jack.ir.ast.JType returnType = getTypeMap().get(mb.returnType); java.util.List<com.android.jack.ir.ast.JType> parameterTypes = new java.util.ArrayList<com.android.jack.ir.ast.JType>(mb.parameters.length); for (org.eclipse.jdt.internal.compiler.lookup.TypeBinding parameterType : mb.parameters) { parameterTypes.add(getTypeMap().get(parameterType)); } return new com.android.jack.ir.ast.JLambda.BridgeDescriptor(returnType, parameterTypes); }",c17f2647f228dee7c01dab3a75426050fc3b1061,,getBridgeDescriptor(org.eclipse.jdt.internal.compiler.lookup.MethodBinding),11,34,"@javax.annotation.Nonnull private com.android.jack.ir.ast.JMethodIdWithReturnType getJMethodIdWithReturnType(@javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.lookup.MethodBinding mb) { com.android.jack.ir.ast.JMethodId methodId = new com.android.jack.ir.ast.JMethodId(com.android.jack.ir.impl.ReferenceMapper.intern(mb.selector), com.android.jack.ir.ast.MethodKind.INSTANCE_VIRTUAL); for (org.eclipse.jdt.internal.compiler.lookup.TypeBinding parameterType : mb.parameters) { methodId.addParam(getTypeMap().get(parameterType)); } return new com.android.jack.ir.ast.JMethodIdWithReturnType(methodId, getTypeMap().get(mb.returnType)); }",5a1d625c7420cc74dc092827806b2b67fd99f0b2,getJMethodIdWithReturnType(org.eclipse.jdt.internal.compiler.lookup.MethodBinding),369275,186,193
15997,hierarchyviewer2_app_src_com_android_hierarchyviewer_HierarchyViewerApplicationDirector.java,,,,public void executeInBackground(final java.lang.Runnable task) { executor.execute(new java.lang.Runnable() { public void run() { task.run(); } }); },7613232ccf108e61062e6dc66006c7fd85df5769,,executeInBackground(java.lang.Runnable),4,0,@java.lang.Override public void executeInBackground(final java.lang.Runnable task) { executor.execute(new java.lang.Runnable() { public void run() { task.run(); } }); },b70d2a9dd82a18234da6485ef44cb26c03ee8b97,executeInBackground(java.lang.Runnable),125410,38,44
283122,harmony-tests_src_test_java_org_apache_harmony_tests_java_util_zip_ZipInputStreamTest.java,1.0,"public void testReadOneByteAtATime() throws java.io.IOException { java.io.InputStream in = new java.io.FilterInputStream(tests.support.resource.Support_Resources.getStream(""hyts_ZipFile.zip"")) { @java.lang.Override public int read(byte[] buffer, int offset, int count) throws java.io.IOException { return super.read(buffer, offset, 1); } @java.lang.Override public int read(byte[] buffer) throws java.io.IOException { return super.read(buffer, 0, 1); } }; zis = new java.util.zip.ZipInputStream(in); while ((zentry = zis.getNextEntry()) != null) { zentry.getName(); } zis.close(); }",8798120b9331b09cf175b0c1505d98991ec05fdf,"public void testReadOneByteAtATime() throws java.io.IOException { java.io.InputStream in = new java.io.FilterInputStream(tests.support.resource.Support_Resources.getStream(""hyts_ZipFile.zip"")) { @java.lang.Override public int read(byte[] buffer, int offset, int count) throws java.io.IOException { return super.read(buffer, offset, 1); } @java.lang.Override public int read(byte[] buffer) throws java.io.IOException { return super.read(buffer, 0, 1); } }; zis.close(); zis = new java.util.zip.ZipInputStream(in); while ((zentry = zis.getNextEntry()) != null) { zentry.getName(); } zis.close(); }",0e6dccf83072ac362a6e5981b6801e92a33c7708,testReadOneByteAtATime(),testReadOneByteAtATime(),7,1,"public void testReadOneByteAtATime() throws java.io.IOException { java.io.InputStream in = new java.io.FilterInputStream(tests.support.resource.Support_Resources.getStream(""hyts_ZipFile.zip"")) { @java.lang.Override public int read(byte[] buffer, int offset, int count) throws java.io.IOException { return super.read(buffer, offset, 1); } @java.lang.Override public int read(byte[] buffer) throws java.io.IOException { return super.read(buffer, 0, 1); } }; try (java.util.zip.ZipInputStream zis = new java.util.zip.ZipInputStream(in)) { while ((zentry = zis.getNextEntry()) != null) { zentry.getName(); } } }",1841581f1b977e68771cab8f8b9f9b0426588130,testReadOneByteAtATime(),188670,168,172
233353,test_vogar_target_junit3_TestRunnerJUnit3Test.java,,,,@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.TestMethodWithParameterTest.class) @org.junit.Test public void testRunner_TestMethodWithParameterTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().completedNormally(); },c43e91b52a6fa8f70afdfb352fd007a35ef66147,,testRunner_TestMethodWithParameterTest(),3,24,@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.TestMethodWithParameterTest.class) @org.junit.Test public void testRunner_TestMethodWithParameterTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); expectedResults().completedNormally(); },c4cd63469d733b66489611a05c6940a1f5cf17d4,testRunner_TestMethodWithParameterTest(),130778,79,78
61861,luni_src_main_java_java_util_concurrent_ConcurrentHashMap.java,51.0,public boolean contains(java.lang.Object value) { return containsValue(value); },da1fb08eb84d987160b8fc1463ebaa8d900664df,@java.lang.Deprecated public boolean contains(java.lang.Object value) { return containsValue(value); },8d9c759c8b5df084de50f616df64cfc8755368b3,contains(java.lang.Object),contains(java.lang.Object),6,45,public boolean contains(java.lang.Object value) { return containsValue(value); },da1fb08eb84d987160b8fc1463ebaa8d900664df,contains(java.lang.Object),334439,25,19
81416,tests_tests_renderscript_src_android_renderscript_cts_CoreMathVerifier.java,,,,public static void computeRint(android.renderscript.cts.TestRint.ArgumentsFloatFloat args) { args.ulf = 0; args.ulfRelaxed = 0; args.out = ((float) (java.lang.Math.rint(args.in))); },ff35fb7ca42e500be5782ddaca639eb2f44741fe,,computeRint(android.renderscript.cts.TestRint$ArgumentsFloatFloat),9,56,public static void computeRint(android.renderscript.cts.TestRint.ArgumentsFloatFloat args) { args.ulf = 0; args.ulfRelaxed = 0; args.out = ((float) (java.lang.StrictMath.rint(args.in))); },ff2cda6330fe6a85e01b872f44b8c075936eb525,computeRint(android.renderscript.cts.TestRint$ArgumentsFloatFloat),142468,63,64
145952,keystore_java_android_security_KeyGeneratorSpec.java,25.0,"public android.security.KeyGeneratorSpec build() { return new android.security.KeyGeneratorSpec(mContext, mKeystoreAlias, mFlags, mKeySize, mKeyValidityStart, mKeyValidityForOriginationEnd, mKeyValidityForConsumptionEnd, mPurposes, mPaddings, mBlockModes, mUserAuthenticators, mUserAuthenticationValidityDurationSeconds); }",862fa009e552b9c04185bfe30021abaae66d5cfb,"public android.security.KeyGeneratorSpec build() { return new android.security.KeyGeneratorSpec(mContext, mKeystoreAlias, mFlags, mKeySize, mKeyValidityStart, mKeyValidityForOriginationEnd, mKeyValidityForConsumptionEnd, mPurposes, mPaddings, mBlockModes, mIndCpaRequired, mUserAuthenticators, mUserAuthenticationValidityDurationSeconds); }",e3c5affa82d4001f7421a505895aa7cfa13f0d1b,build(),build(),7,25,"public android.security.KeyGeneratorSpec build() { return new android.security.KeyGeneratorSpec(mContext, mKeystoreAlias, mFlags, mKeySize, mKeyValidityStart, mKeyValidityForOriginationEnd, mKeyValidityForConsumptionEnd, mPurposes, mPaddings, mBlockModes, mRandomizedEncryptionRequired, mUserAuthenticators, mUserAuthenticationValidityDurationSeconds); }",a02c3b6258d4c090a422a7dfeeb349cb52cb8a29,build(),374425,86,86
274154,src_com_android_phone_CallBarringEditPreference.java,,,,@java.lang.Override protected void onBindView(android.view.View view) { super.onBindView(view); android.widget.TextView summaryView = ((android.widget.TextView) (view.findViewById(android.R.id.summary))); if (summaryView != null) { java.lang.CharSequence sum; int vis; if (isActivated) { sum = ((mSummaryOn) == null) ? getSummary() : mSummaryOn; } else { sum = ((mSummaryOff) == null) ? getSummary() : mSummaryOff; } if (sum != null) { summaryView.setText(sum); vis = android.view.View.VISIBLE; } else { vis = android.view.View.GONE; } if (vis != (summaryView.getVisibility())) { summaryView.setVisibility(vis); } } },61b32d598dcf55c447da1c2f5987653573e032f2,,onBindView(android.view.View),5,14,@java.lang.Override protected void onBindView(android.view.View view) { super.onBindView(view); android.widget.TextView summaryView = ((android.widget.TextView) (view.findViewById(android.R.id.summary))); if (summaryView != null) { java.lang.CharSequence sum; int vis; if (mIsActivated) { sum = ((mSummaryOn) == null) ? getSummary() : mSummaryOn; } else { sum = ((mSummaryOff) == null) ? getSummary() : mSummaryOff; } if (sum != null) { summaryView.setText(sum); vis = android.view.View.VISIBLE; } else { vis = android.view.View.GONE; } if (vis != (summaryView.getVisibility())) { summaryView.setVisibility(vis); } } },a562a302f309a10c19beeb304aa60184aa95c366,onBindView(android.view.View),437903,189,190
534235,src_vogar_android_InstallApkTask.java,1.0,"private java.io.File createDex(vogar.Action action, java.io.File actionJar) { java.io.File dex = run.localFile(action, ""classes.dex""); vogar.Classpath classesToDex = vogar.Classpath.of(actionJar); classesToDex.addAll(run.classpath); if ((run.toolchain) == (vogar.Toolchain.JACK)) { throw new java.lang.UnsupportedOperationException(""Jack support for --mode=activity not yet implemented""); } java.io.File localTempDir = run.localDir(action.getName()); vogar.Classpath dependentCp = new vogar.Classpath(); run.androidSdk.dex(run.multidex, dex, localTempDir, classesToDex, dependentCp); return dex; }",47f469e9cefed649bd2526bafec5fd8a35ffb1f0,"private java.io.File createDex(vogar.Action action, java.io.File actionJar) { java.io.File dex = run.localFile(action, ""classes.dex""); vogar.Classpath classesToDex = vogar.Classpath.of(actionJar); classesToDex.addAll(run.classpath); if ((run.toolchain) == (vogar.Toolchain.JACK)) { throw new java.lang.UnsupportedOperationException(""Jack support for --mode=activity not yet implemented""); } java.io.File localTempDir = run.localDir(action.getName()); vogar.Classpath dependentCp = new vogar.Classpath(); vogar.android.AndroidSdk.Dexer dexer = AndroidSdk.Dexer.DX; if ((run.toolchain) == (vogar.Toolchain.D8)) { dexer = AndroidSdk.Dexer.D8; } run.androidSdk.dex(run.multidex, dex, localTempDir, classesToDex, dependentCp, dexer); return dex; }",c10be457e7f2f7a2fb5302025fa64f5136122a83,"createDex(vogar.Action,java.io.File)","createDex(vogar.Action,java.io.File)",5,1,"private java.io.File createDex(vogar.Action action, java.io.File actionJar) { java.io.File dex = run.localFile(action, ""classes.dex""); vogar.Classpath classesToDex = vogar.Classpath.of(actionJar); classesToDex.addAll(run.classpath); if ((run.toolchain) == (vogar.Toolchain.JACK)) { throw new java.lang.UnsupportedOperationException(""Jack support for --mode=activity not yet implemented""); } java.io.File localTempDir = run.localDir(action.getName()); vogar.Classpath dependentCp = new vogar.Classpath(); run.androidSdk.dex(run.multidex, dex, localTempDir, classesToDex, dependentCp, run.toolchain.getDexer()); return dex; }",a5d1886225e47d24c22a8e8313fe22d9df6ce729,"createDex(vogar.Action,java.io.File)",250574,236,183
315564,test_953-invoke-polymorphic-compiler_src_Main.java,,,,"public static int Min2Print3(int a, int b, int c) { int[] values = new int[]{ a, b, c }; java.lang.System.out.println(((""Running Main.Min2Print3("" + (java.util.Arrays.toString(values))) + "")"")); return a > b ? a : b; }",9b566f60bdd3dd9cd31cf2bdb24176eb22db6656,,"Min2Print3(int,int,int)",16,7,"public static int Min2Print3(int a, int b, int c) { int[] values = new int[]{ a, b, c }; java.lang.System.err.println(((""Running Main.Min2Print3("" + (java.util.Arrays.toString(values))) + "")"")); return a > b ? a : b; }",d07f630e4b08027a46b20fa254ce767c1c711e5c,"Min2Print3(int,int,int)",306323,81,81
90966,luni_src_test_java_libcore_java_nio_channels_FileIOInterruptTest.java,,,,@java.lang.Override public void run() { java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocateDirect(10000); while (true) { buffer.position(0).limit(buffer.capacity()); try { bytesWritten += channel.write(buffer); } catch (java.io.IOException e) { this.ioe = e; break; } } wasInterrupted = java.lang.Thread.interrupted(); },e6209c026dfe55db4fedd7dc08995341a468e75f,,run(),7,23,"@java.lang.Override public void run() { java.nio.ByteBuffer buffer1 = java.nio.ByteBuffer.allocateDirect(10000); java.nio.ByteBuffer buffer2 = java.nio.ByteBuffer.allocateDirect(10000); while (true) { buffer1.position(0).limit(buffer1.capacity()); buffer2.position(0).limit(buffer2.capacity()); try { if ((method) == (libcore.java.nio.channels.FileIOInterruptTest.ChannelWriter.Method.WRITE)) { bytesWritten += channel.write(buffer1); } else { bytesWritten += channel.write(new java.nio.ByteBuffer[]{ buffer1, buffer2 }); } } catch (java.io.IOException e) { this.ioe = e; break; } } wasInterrupted = java.lang.Thread.interrupted(); }",30ad6dc08f472882793fde2abdeb44bdafdda2d4,run(),329359,85,163
580355,src_java_com_android_internal_telephony_Phone.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void notifyCellularDataStateChanged(boolean state) { mNotifier.notifyCellularDataStateChanged(this, state); }",a37099191cfe882814101bc29d5b3e1d0c4fe77f,,notifyCellularDataStateChanged(boolean),5,208,"public void notifyUserMobileDataStateChanged(boolean state) { mNotifier.notifyUserMobileDataStateChanged(this, state); }",ea26af257730a4c2caee1742369a3f7bab6f1eb3,notifyUserMobileDataStateChanged(boolean),31615,26,26
34779,luni_src_test_java_libcore_java_text_DecimalFormatTest.java,6.0,"public void testBigDecimalBug1897917() { java.text.NumberFormat pf = java.text.NumberFormat.getPercentInstance(); assertEquals(""17%"", pf.format(java.math.BigDecimal.valueOf(0.17))); java.lang.String longDec = ""11.2345678901234567890123456789012345678901234567890""; java.math.BigDecimal bd = new java.math.BigDecimal(longDec); assertBigDecimalWithFraction(bd, ""1,123.46%"", 2); assertBigDecimalWithFraction(bd, ""1,123.45678901%"", 8); assertBigDecimalWithFraction(bd, ""1,123.4567890123%"", 10); assertBigDecimalWithFraction(bd, ""1,123.45678901234567890123%"", 20); assertBigDecimalWithFraction(bd, ""1,123.456789012345678901234567890123%"", 30); assertDecFmtWithMultiplierAndFraction(""3333.33333333"", 3, 4, ""10,000""); assertDecFmtWithMultiplierAndFraction(""3333.33333333"", (-3), 4, ""-10,000""); assertDecFmtWithMultiplierAndFraction(""0.00333333"", 3, 4, ""0.01""); assertDecFmtWithMultiplierAndFraction(""3330000000000000000000000000000000"", 3, 4, ""9,990,000,000,000,000,000,000,000,000,000,000""); }",40dded8d6da3ca0346abab6b1daa417a22ad2378,"public void testBigDecimalBug1897917() { java.text.NumberFormat pf = java.text.NumberFormat.getPercentInstance(); assertEquals(""17%"", pf.format(java.math.BigDecimal.valueOf(0.17))); java.lang.String longDec = ""11.2345678901234567890123456789012345678901234567890""; java.math.BigDecimal bd = new java.math.BigDecimal(longDec); assertBigDecimalWithFraction(bd, ""1,123.46%"", 2); assertBigDecimalWithFraction(bd, ""1,123.45678901%"", 8); assertBigDecimalWithFraction(bd, ""1,123.4567890123%"", 10); assertBigDecimalWithFraction(bd, ""1,123.45678901234567890123%"", 20); assertBigDecimalWithFraction(bd, ""1,123.456789012345678901234567890123%"", 30); assertDecFmtWithMultiplierAndFraction(""3333.33333333"", 3, 4, ""10,000""); assertDecFmtWithMultiplierAndFraction(""3333.33333333"", (-3), 4, ""-10,000""); assertDecFmtWithMultiplierAndFraction(""0.00333333"", 3, 4, ""0.01""); java.text.DecimalFormat df = ((java.text.DecimalFormat) (java.text.NumberFormat.getInstance())); if (df.toPattern().equals(""#,##,##0.###"")) { assertDecFmtWithMultiplierAndFraction(""3330000000000000000000000000000000"", 3, 4, ""9,99,00,00,00,00,00,00,00,00,00,00,00,00,00,00,000""); } else if (df.toPattern().equals(""#,##0.###"")) { assertDecFmtWithMultiplierAndFraction(""3330000000000000000000000000000000"", 3, 4, ""9,990,000,000,000,000,000,000,000,000,000,000""); } }",ce6d87f11dcd643da4e859f8399400de4cdb129d,testBigDecimalBug1897917(),testBigDecimalBug1897917(),4,7,"public void testBigDecimalBug1897917() { java.text.NumberFormat pf = java.text.NumberFormat.getPercentInstance(); assertEquals(""17%"", pf.format(java.math.BigDecimal.valueOf(0.17))); java.lang.String longDec = ""11.2345678901234567890123456789012345678901234567890""; java.math.BigDecimal bd = new java.math.BigDecimal(longDec); assertBigDecimalWithFraction(bd, ""1,123.46%"", 2); assertBigDecimalWithFraction(bd, ""1,123.45678901%"", 8); assertBigDecimalWithFraction(bd, ""1,123.4567890123%"", 10); assertBigDecimalWithFraction(bd, ""1,123.45678901234567890123%"", 20); assertBigDecimalWithFraction(bd, ""1,123.456789012345678901234567890123%"", 30); assertDecFmtWithMultiplierAndFraction(""3333.33333333"", 3, 4, ""10,000""); assertDecFmtWithMultiplierAndFraction(""3333.33333333"", (-3), 4, ""-10,000""); assertDecFmtWithMultiplierAndFraction(""0.00333333"", 3, 4, ""0.01""); assertDecFmtWithMultiplierAndFractionByLocale(""3330000000000000000000000000000000"", 3, 4, java.util.Locale.US, ""9,990,000,000,000,000,000,000,000,000,000,000""); java.util.Locale inLocale = new java.util.Locale(""en"", ""IN""); if (tests.support.Support_Locale.isLocaleAvailable(inLocale)) { assertDecFmtWithMultiplierAndFractionByLocale(""3330000000000000000000000000000000"", 3, 4, inLocale, ""9,99,00,00,00,00,00,00,00,00,00,00,00,00,00,00,000""); } }",b8884c7cf9f1cc0a6addf0a4eaa8b8a527bdbe9b,testBigDecimalBug1897917(),409124,344,339
99692,java_tests_RsTest_src_com_android_rs_test_UT_foreach_multi.java,,,,"private void initializeGlobals(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_foreach_multi s) { com.android.rs.test.Type.Builder type32Builder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.U32(RS)); com.android.rs.test.Type.Builder type16Builder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.U16(RS)); int Xdim = 5; s.set_dimX(Xdim); type32Builder.setX(Xdim); type16Builder.setX(Xdim); Ain0 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.bind_ain0(Ain0); s.forEach_init_uint32_alloc(Ain0); Ain1 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.bind_ain1(Ain1); s.forEach_init_uint32_alloc(Ain1); Ain2 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.bind_ain2(Ain2); s.forEach_init_uint32_alloc(Ain2); Ain3 = com.android.rs.test.Allocation.createTyped(RS, type16Builder.create()); s.bind_ain3(Ain3); s.forEach_init_uint16_alloc(Ain3); Out0 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.bind_aout0(Out0); Out1 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.bind_aout1(Out1); Out2 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.bind_aout2(Out2); return; }",8baeed1aa60c98fefd73a47d28c7f8d4c48a7357,,"initializeGlobals(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_foreach_multi)",5,0,"private void initializeGlobals(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_foreach_multi s) { com.android.rs.test.Type.Builder type32Builder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.U32(RS)); com.android.rs.test.Type.Builder type16Builder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.U16(RS)); int Xdim = 5; s.set_dimX(Xdim); type32Builder.setX(Xdim); type16Builder.setX(Xdim); Ain0 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.set_ain0(Ain0); s.forEach_init_uint32_alloc(Ain0); Ain1 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.set_ain1(Ain1); s.forEach_init_uint32_alloc(Ain1); Ain2 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.set_ain2(Ain2); s.forEach_init_uint32_alloc(Ain2); Ain3 = com.android.rs.test.Allocation.createTyped(RS, type16Builder.create()); s.set_ain3(Ain3); s.forEach_init_uint16_alloc(Ain3); Out0 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.set_aout0(Out0); Out1 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.set_aout1(Out1); Out2 = com.android.rs.test.Allocation.createTyped(RS, type32Builder.create()); s.set_aout2(Out2); return; }",0fa41da29d4acabaefd473e367f8a3eb8a9ef03c,"initializeGlobals(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_foreach_multi)",32670,484,484
152911,tests_tests_media_src_android_media_cts_MediaSessionTest.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onExtrasChanged(android.os.Bundle extras) { synchronized(mWaitLock) { mOnExtraChangedCalled = true; mWaitLock.notify(); } },48ba96524529d9c9ebddc1750e063f2089a2ce67,,onExtrasChanged(android.os.Bundle),12,5,@java.lang.Override public void onExtrasChanged(android.os.Bundle extras) { synchronized(mWaitLock) { mOnExtraChangedCalled = true; mExtras = extras; mWaitLock.notify(); } },05a1a86d83c81bcea84b38c541f5de567c802d62,onExtrasChanged(android.os.Bundle),202972,44,50
650642,src_main_java_com_android_apksig_SigningCertificateLineage.java,15.0,"private static com.android.apksig.SigningCertificateLineage read(java.nio.ByteBuffer inputByteBuffer, int version) throws java.io.IOException { switch (version) { case com.android.apksig.SigningCertificateLineage.FIRST_VERSION : try { java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> nodes = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.readSigningCertificateLineage(getLengthPrefixedSlice(inputByteBuffer)); int minSdkVersion = com.android.apksig.SigningCertificateLineage.calculateMinSdkVersion(nodes); return new com.android.apksig.SigningCertificateLineage(minSdkVersion, nodes); } catch (com.android.apksig.apk.ApkFormatException e) { throw new java.io.IOException((""Unable to read list of signing certificate nodes in "" + ""SigningCertificateLineage""), e); } default : throw new java.lang.IllegalArgumentException(""Improper SigningCertificateLineage format: unrecognized version.""); } }",e9933fe57447f54833b93eeb171a3eb228f93550,"private static com.android.apksig.SigningCertificateLineage read(java.nio.ByteBuffer inputByteBuffer, int version) throws java.io.IOException { switch (version) { case com.android.apksig.SigningCertificateLineage.FIRST_VERSION : try { java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> nodes = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.readSigningCertificateLineage(getLengthPrefixedSlice(inputByteBuffer)); int minSdkVersion = com.android.apksig.SigningCertificateLineage.calculateMinSdkVersion(nodes); com.android.apksig.SigningCertificateLineage.checkUniqueSigningCertificates(nodes); return new com.android.apksig.SigningCertificateLineage(minSdkVersion, nodes); } catch (com.android.apksig.apk.ApkFormatException | java.security.cert.CertificateEncodingException e) { throw new java.io.IOException((""Unable to read list of signing certificate nodes in "" + ""SigningCertificateLineage""), e); } default : throw new java.lang.IllegalArgumentException(""Improper SigningCertificateLineage format: unrecognized version.""); } }",ec1dff125ed13ad60f7fa29cf6c3f91cf958e2ee,"read(java.nio.ByteBuffer,int)","read(java.nio.ByteBuffer,int)",2,14,"private static com.android.apksig.SigningCertificateLineage read(java.nio.ByteBuffer inputByteBuffer, int version) throws java.io.IOException { switch (version) { case com.android.apksig.SigningCertificateLineage.FIRST_VERSION : try { java.util.List<com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.SigningCertificateNode> nodes = com.android.apksig.internal.apk.v3.V3SigningCertificateLineage.readSigningCertificateLineage(getLengthPrefixedSlice(inputByteBuffer)); int minSdkVersion = com.android.apksig.SigningCertificateLineage.calculateMinSdkVersion(nodes); return new com.android.apksig.SigningCertificateLineage(minSdkVersion, nodes); } catch (com.android.apksig.apk.ApkFormatException e) { throw new java.io.IOException((""Unable to read list of signing certificate nodes in "" + ""SigningCertificateLineage""), e); } default : throw new java.lang.IllegalArgumentException(""Improper SigningCertificateLineage format: unrecognized version.""); } }",e9933fe57447f54833b93eeb171a3eb228f93550,"read(java.nio.ByteBuffer,int)",235217,267,238
579565,src_java_com_android_internal_telephony_RIL.java,52.0,"@java.lang.Override public void setCallForward(int action, int cfReason, int serviceClass, java.lang.String number, int timeSeconds, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_CALL_FORWARD, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" action = "") + action) + "" cfReason = "") + cfReason) + "" serviceClass = "") + serviceClass) + "" timeSeconds = "") + timeSeconds)); } android.hardware.radio.V1_0.CallForwardInfo cfInfo = new android.hardware.radio.V1_0.CallForwardInfo(); cfInfo.status = action; cfInfo.reason = cfReason; cfInfo.serviceClass = serviceClass; cfInfo.toa = android.telephony.PhoneNumberUtils.toaFromString(number); cfInfo.number = convertNullToEmptyString(number); cfInfo.timeSeconds = timeSeconds; try { radioProxy.setCallForward(rr.mSerial, cfInfo); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setCallForward"", e); } } }",121ac2c00b437852efd3d49ea1280a811a71b0a7,"@java.lang.Override public void setCallForward(int action, int cfReason, int serviceClass, java.lang.String number, int timeSeconds, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_CALL_FORWARD, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" action = "") + action) + "" cfReason = "") + cfReason) + "" serviceClass = "") + serviceClass) + "" timeSeconds = "") + timeSeconds)); } android.hardware.radio.V1_0.CallForwardInfo cfInfo = new android.hardware.radio.V1_0.CallForwardInfo(); cfInfo.status = action; cfInfo.reason = cfReason; cfInfo.serviceClass = serviceClass; cfInfo.toa = android.telephony.PhoneNumberUtils.toaFromString(number); cfInfo.number = convertNullToEmptyString(number); cfInfo.timeSeconds = timeSeconds; try { radioProxy.setCallForward(rr.mSerial, cfInfo); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setCallForward"", e); } } }",f98ae26f3e34589113fd5beb28b4b7ddcf373b5b,"setCallForward(int,int,int,java.lang.String,int,android.os.Message)","setCallForward(int,int,int,java.lang.String,int,android.os.Message)",3,52,"@java.lang.Override public void setCallForward(int action, int cfReason, int serviceClass, java.lang.String number, int timeSeconds, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_CALL_FORWARD, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" action = "") + action) + "" cfReason = "") + cfReason) + "" serviceClass = "") + serviceClass) + "" timeSeconds = "") + timeSeconds)); } android.hardware.radio.V1_0.CallForwardInfo cfInfo = new android.hardware.radio.V1_0.CallForwardInfo(); cfInfo.status = action; cfInfo.reason = cfReason; cfInfo.serviceClass = serviceClass; cfInfo.toa = android.telephony.PhoneNumberUtils.toaFromString(number); cfInfo.number = convertNullToEmptyString(number); cfInfo.timeSeconds = timeSeconds; try { radioProxy.setCallForward(rr.mSerial, cfInfo); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setCallForward"", e); } } }",121ac2c00b437852efd3d49ea1280a811a71b0a7,"setCallForward(int,int,int,java.lang.String,int,android.os.Message)",89252,372,368
88364,build-system_manifest-merger_src_main_java_com_android_manifmerger_XmlAttribute.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String mergeThisAndDefaultValue(com.android.manifmerger.MergingReport.Builder mergingReport, com.android.manifmerger.XmlElement implicitNode) { java.lang.String mergedValue = getValue(); if ((mAttributeModel) == null) { return mergedValue; } java.lang.String attributeDefaultValue = mAttributeModel.getDefaultValue(); if ((attributeDefaultValue != null) && (!(attributeDefaultValue.equals(getValue())))) { mergedValue = mAttributeModel.getMergingPolicy().merge(attributeDefaultValue, getValue()); if (mergedValue == null) { addIllegalImplicitOverrideMessage(mergingReport, mAttributeModel, implicitNode); return null; } if (mergedValue.equals(attributeDefaultValue)) { mergingReport.getActionRecorder().recordAttributeAction(this, ActionRecorder.ActionType.IMPLICIT, null); return null; } } return mergedValue; }",f8d37e3722b0ec33e2d5a28c683788e7d221cf2e,,"mergeThisAndDefaultValue(com.android.manifmerger.MergingReport$Builder,com.android.manifmerger.XmlElement)",4,7,"private java.lang.String mergeThisAndDefaultValue(com.android.manifmerger.MergingReport.Builder mergingReport, com.android.manifmerger.XmlElement implicitNode) { java.lang.String mergedValue = getValue(); if ((((mAttributeModel) == null) || ((mAttributeModel.getDefaultValue()) == null)) || (!(mAttributeModel.getMergingPolicy().shouldMergeDefaultValues()))) { return mergedValue; } java.lang.String defaultValue = mAttributeModel.getDefaultValue(); if (defaultValue.equals(mergedValue)) { return mergedValue; } else { mergedValue = mAttributeModel.getMergingPolicy().merge(defaultValue, mergedValue); if (mergedValue == null) { addIllegalImplicitOverrideMessage(mergingReport, mAttributeModel, implicitNode); return null; } if (mergedValue.equals(defaultValue)) { return null; } } return mergedValue; }",213d00923f65caec8dfd746e7e35b31e72b7a483,"mergeThisAndDefaultValue(com.android.manifmerger.MergingReport$Builder,com.android.manifmerger.XmlElement)",173466,194,192
293986,telecomm_java_android_telecom_ConnectionService.java,113.0,"@java.lang.Override public void onPostDialContinue(java.lang.String callId, boolean proceed) { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.argi1 = (proceed) ? 1 : 0; mHandler.obtainMessage(android.telecom.ConnectionService.MSG_ON_POST_DIAL_CONTINUE, args).sendToTarget(); }",2dcd356f8c7b5152ff0e85425f4ac450fa647166,"@java.lang.Override public void onPostDialContinue(java.lang.String callId, boolean proceed, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startExternalSession(sessionInfo, android.telecom.ConnectionService.SESSION_POST_DIAL_CONT); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = android.telecom.Log.createSubsession(); args.argi1 = (proceed) ? 1 : 0; mHandler.obtainMessage(android.telecom.ConnectionService.MSG_ON_POST_DIAL_CONTINUE, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }",99a458004bd20fe5d2fcab82f706228328225689,"onPostDialContinue(java.lang.String,boolean)","onPostDialContinue(java.lang.String,boolean,android.telecom.Logging.Session$Info)",8,62,"@java.lang.Override public void onPostDialContinue(java.lang.String callId, boolean proceed, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startSession(sessionInfo, android.telecom.ConnectionService.SESSION_POST_DIAL_CONT); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = android.telecom.Log.createSubsession(); args.argi1 = (proceed) ? 1 : 0; mHandler.obtainMessage(android.telecom.ConnectionService.MSG_ON_POST_DIAL_CONTINUE, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }",2b9285fe02d85c18ceaf7422d676c99792d71f51,"onPostDialContinue(java.lang.String,boolean,android.telecom.Logging.Session$Info)",425202,185,184
41115,src_java_com_android_internal_telephony_IccCardProxy.java,,,,"public void setVoiceRadioTech(int radioTech) { if (com.android.internal.telephony.IccCardProxy.DBG) log((""Setting radio tech "" + (android.telephony.ServiceState.rilRadioTechnologyToString(radioTech)))); if (android.telephony.ServiceState.isGsm(radioTech)) { mCurrentAppType = com.android.internal.telephony.uicc.UiccController.APP_FAM_3GPP; } else { mCurrentAppType = com.android.internal.telephony.uicc.UiccController.APP_FAM_3GPP2; } updateQuietMode(); }",dd0b511aa9336708e3d20b0d2c6bc5ce3fb67a46,,setVoiceRadioTech(int),22,2,"public void setVoiceRadioTech(int radioTech) { synchronized(mLock) { if (com.android.internal.telephony.IccCardProxy.DBG) { log((""Setting radio tech "" + (android.telephony.ServiceState.rilRadioTechnologyToString(radioTech)))); } if (android.telephony.ServiceState.isGsm(radioTech)) { mCurrentAppType = com.android.internal.telephony.uicc.UiccController.APP_FAM_3GPP; } else { mCurrentAppType = com.android.internal.telephony.uicc.UiccController.APP_FAM_3GPP2; } updateQuietMode(); } }",1329e1a93b33a96664ae6cf88ade515e89c5e8d3,setVoiceRadioTech(int),499836,141,150
237621,jack-tests_src_com_android_jack_test_toolchain_AbstractTestTools.java,0.0,"@javax.annotation.Nonnull public static java.util.List<com.android.jack.test.runner.RuntimeRunner> listRuntimeTestRunners(@javax.annotation.CheckForNull java.util.Properties properties) throws com.android.jack.test.runner.RuntimeRunnerException, java.lang.IllegalArgumentException, java.lang.SecurityException { if (properties != null) { java.lang.String rtAsString = properties.getProperty(com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LIST_KEY); if (rtAsString != null) { return com.android.jack.test.toolchain.AbstractTestTools.parseRuntimeList(rtAsString); } } if ((!(com.android.jack.test.toolchain.AbstractTestTools.hasRuntimeWarningBeenEmitted)) && ((com.android.jack.test.toolchain.AbstractTestTools.runtimes.size()) == 0)) { java.lang.System.err.println(""WARNING: no runtime has been provided""); com.android.jack.test.toolchain.AbstractTestTools.hasRuntimeWarningBeenEmitted = true; } return com.android.jack.test.toolchain.AbstractTestTools.runtimes; }",478ac63c93766ea0f05002a7a770ddc9cdbba9c0,"@javax.annotation.Nonnull public static java.util.List<com.android.jack.test.runner.RuntimeRunner> listRuntimeTestRunners(@javax.annotation.CheckForNull java.util.Properties properties) throws com.android.jack.test.runner.RuntimeRunnerException, java.lang.IllegalArgumentException, java.lang.SecurityException { if (properties != null) { java.lang.String rtAsString = properties.getProperty(com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LIST_KEY); if (rtAsString != null) { return com.android.jack.test.toolchain.AbstractTestTools.parseRuntimeList(rtAsString); } } if ((com.android.jack.test.toolchain.AbstractTestTools.runtimes.size()) == 0) { if (java.lang.Boolean.parseBoolean(java.lang.System.getProperty(""jack.test.runtime.tolerant""))) { if (!(com.android.jack.test.toolchain.AbstractTestTools.hasRuntimeWarningBeenEmitted)) { java.lang.System.err.println(""WARNING: no runtime has been provided""); com.android.jack.test.toolchain.AbstractTestTools.hasRuntimeWarningBeenEmitted = true; } } else { throw new com.android.jack.test.TestConfigurationException(""No runtime has been provided""); } } return com.android.jack.test.toolchain.AbstractTestTools.runtimes; }",d96f41b69eb3ff71804a702e53733bae7c9292b2,listRuntimeTestRunners(java.util.Properties),listRuntimeTestRunners(java.util.Properties),11,0,"@javax.annotation.Nonnull public static java.util.List<com.android.jack.test.runner.RuntimeRunner> listRuntimeTestRunners(@javax.annotation.CheckForNull java.util.Properties properties) throws com.android.jack.test.runner.RuntimeRunnerException, java.lang.IllegalArgumentException, java.lang.SecurityException { if (properties != null) { java.lang.String rtAsString = properties.getProperty(com.android.jack.test.toolchain.AbstractTestTools.RUNTIME_LIST_KEY); if (rtAsString != null) { return com.android.jack.test.toolchain.AbstractTestTools.parseRuntimeList(rtAsString); } } if ((com.android.jack.test.toolchain.AbstractTestTools.runtimes.size()) == 0) { if (java.lang.Boolean.parseBoolean(java.lang.System.getProperty(""jack.test.runtime.tolerant"", ""false""))) { if (!(com.android.jack.test.toolchain.AbstractTestTools.hasRuntimeWarningBeenEmitted)) { java.lang.System.err.println(""WARNING: no runtime has been provided""); com.android.jack.test.toolchain.AbstractTestTools.hasRuntimeWarningBeenEmitted = true; } } else { throw new com.android.jack.test.TestConfigurationException((""No runtime has been provided. Set property 'jack.test.runtime.tolerant' to 'true'"" + "" to allow it."")); } } return com.android.jack.test.toolchain.AbstractTestTools.runtimes; }",bfe2a0347d5366673e3724e3ba05247da62ca923,listRuntimeTestRunners(java.util.Properties),273985,310,341
258520,dalvik_src_main_java_dalvik_system_DexPathList.java,21.0,"public void addDexPath(java.lang.String dexPath, java.io.File optimizedDirectory) { final java.util.List<java.io.IOException> suppressedExceptionList = new java.util.ArrayList<java.io.IOException>(); final dalvik.system.DexPathList.Element[] newElements = dalvik.system.DexPathList.makeDexElements(dalvik.system.DexPathList.splitDexPath(dexPath), optimizedDirectory, suppressedExceptionList, definingContext); if ((newElements != null) && ((newElements.length) > 0)) { final dalvik.system.DexPathList.Element[] oldElements = dexElements; dexElements = new dalvik.system.DexPathList.Element[(oldElements.length) + (newElements.length)]; java.lang.System.arraycopy(oldElements, 0, dexElements, 0, oldElements.length); java.lang.System.arraycopy(newElements, 0, dexElements, oldElements.length, newElements.length); } if ((suppressedExceptionList.size()) > 0) { final java.io.IOException[] newSuppressedExceptions = suppressedExceptionList.toArray(new java.io.IOException[suppressedExceptionList.size()]); if ((dexElementsSuppressedExceptions) != null) { final java.io.IOException[] oldSuppressedExceptions = dexElementsSuppressedExceptions; final int suppressedExceptionsLength = (oldSuppressedExceptions.length) + (newSuppressedExceptions.length); dexElementsSuppressedExceptions = new java.io.IOException[suppressedExceptionsLength]; java.lang.System.arraycopy(oldSuppressedExceptions, 0, dexElementsSuppressedExceptions, 0, oldSuppressedExceptions.length); java.lang.System.arraycopy(newSuppressedExceptions, 0, dexElementsSuppressedExceptions, oldSuppressedExceptions.length, newSuppressedExceptions.length); } else { dexElementsSuppressedExceptions = newSuppressedExceptions; } } }",d7cab1cbb42b61cccc7a281e53fa87b0700d58c8,"public void addDexPath(java.lang.String dexPath, java.io.File optimizedDirectory) { dalvik.system.DexPathList.MakeElementsResult elementsResult = dalvik.system.DexPathList.makeDexElements(dalvik.system.DexPathList.splitDexPath(dexPath), optimizedDirectory, definingContext); final dalvik.system.DexPathList.Element[] newElements = elementsResult.getElements(); if ((newElements != null) && ((newElements.length) > 0)) { final dalvik.system.DexPathList.Element[] oldElements = dexElements; dexElements = new dalvik.system.DexPathList.Element[(oldElements.length) + (newElements.length)]; java.lang.System.arraycopy(oldElements, 0, dexElements, 0, oldElements.length); java.lang.System.arraycopy(newElements, 0, dexElements, oldElements.length, newElements.length); } dexElementsSuppressedExceptions.addAll(elementsResult.getSuppressedExceptions()); }",d1948dfa51eafdb8528af87861ae4865a76ccdd7,"addDexPath(java.lang.String,java.io.File)","addDexPath(java.lang.String,java.io.File)",12,18,"public void addDexPath(java.lang.String dexPath, java.io.File optimizedDirectory) { final java.util.List<java.io.IOException> suppressedExceptionList = new java.util.ArrayList<java.io.IOException>(); final dalvik.system.DexPathList.Element[] newElements = dalvik.system.DexPathList.makeDexElements(dalvik.system.DexPathList.splitDexPath(dexPath), optimizedDirectory, suppressedExceptionList, definingContext); if ((newElements != null) && ((newElements.length) > 0)) { final dalvik.system.DexPathList.Element[] oldElements = dexElements; dexElements = new dalvik.system.DexPathList.Element[(oldElements.length) + (newElements.length)]; java.lang.System.arraycopy(oldElements, 0, dexElements, 0, oldElements.length); java.lang.System.arraycopy(newElements, 0, dexElements, oldElements.length, newElements.length); } if ((suppressedExceptionList.size()) > 0) { final java.io.IOException[] newSuppressedExceptions = suppressedExceptionList.toArray(new java.io.IOException[suppressedExceptionList.size()]); if ((dexElementsSuppressedExceptions) != null) { final java.io.IOException[] oldSuppressedExceptions = dexElementsSuppressedExceptions; final int suppressedExceptionsLength = (oldSuppressedExceptions.length) + (newSuppressedExceptions.length); dexElementsSuppressedExceptions = new java.io.IOException[suppressedExceptionsLength]; java.lang.System.arraycopy(oldSuppressedExceptions, 0, dexElementsSuppressedExceptions, 0, oldSuppressedExceptions.length); java.lang.System.arraycopy(newSuppressedExceptions, 0, dexElementsSuppressedExceptions, oldSuppressedExceptions.length, newSuppressedExceptions.length); } else { dexElementsSuppressedExceptions = newSuppressedExceptions; } } }",d7cab1cbb42b61cccc7a281e53fa87b0700d58c8,"addDexPath(java.lang.String,java.io.File)",102097,229,426
630846,src_java_com_android_internal_telephony_ims_ImsServiceFeatureQueryManager.java,,,,@java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { },c52ddef8c7e34a20816c77ef16b645fc6991d243,,onServiceDisconnected(android.content.ComponentName),10,6,"@java.lang.Override public void onServiceDisconnected(android.content.ComponentName name) { android.util.Log.w(com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.ImsServiceFeatureQuery.LOG_TAG, (""onServiceDisconnected for component: "" + name)); }",4feb55ce44e2c4baf9be8892ca5abba6796a320a,onServiceDisconnected(android.content.ComponentName),156092,21,69
289204,luni_src_test_java_libcore_java_nio_file_DefaultSecureDirectoryStreamTest.java,,,,@org.junit.Test public void test_deleteFile() throws java.io.IOException { try (java.nio.file.SecureDirectoryStream<java.nio.file.Path> ds_path_dir1 = ((java.nio.file.SecureDirectoryStream<java.nio.file.Path>) (java.nio.file.Files.newDirectoryStream(path_root)))) { ds_path_dir1.deleteFile(path_root.relativize(path_f1)); assertFalse(java.nio.file.Files.exists(path_f1)); try { ds_path_dir1.deleteFile(path_root.relativize(path_dir1)); fail(); } catch (java.nio.file.FileSystemException expected) { } try { ds_path_dir1.deleteFile(filesSetup.getTestPath()); fail(); } catch (java.nio.file.NoSuchFileException expected) { } try { ds_path_dir1.deleteFile(null); fail(); } catch (java.lang.NullPointerException expected) { } ds_path_dir1.close(); try { ds_path_dir1.deleteFile(path_root.relativize(path_f2)); fail(); } catch (java.nio.file.ClosedDirectoryStreamException expected) { } } },3cdd53d7b2c03048d2a9c5f6a661052b2f192b30,,test_deleteFile(),9,13,@org.junit.Test public void test_deleteFile() throws java.io.IOException { try (java.nio.file.SecureDirectoryStream<java.nio.file.Path> ds_path_root = ((java.nio.file.SecureDirectoryStream<java.nio.file.Path>) (java.nio.file.Files.newDirectoryStream(path_root)))) { ds_path_root.deleteFile(path_root.relativize(path_f1)); assertFalse(java.nio.file.Files.exists(path_f1)); try { ds_path_root.deleteFile(path_root.relativize(path_dir1)); fail(); } catch (java.nio.file.FileSystemException expected) { } try { ds_path_root.deleteFile(filesSetup.getTestPath()); fail(); } catch (java.nio.file.NoSuchFileException expected) { } try { ds_path_root.deleteFile(null); fail(); } catch (java.lang.NullPointerException expected) { } ds_path_root.close(); try { ds_path_root.deleteFile(path_root.relativize(path_f2)); fail(); } catch (java.nio.file.ClosedDirectoryStreamException expected) { } } },1d97efe5bcd3b28a133a631f1ef28b61aeae8ebd,test_deleteFile(),352226,264,263
245772,test_478-checker-clinit-check-pruning_src_Main.java,30.0,static void inlinedForNull(java.lang.Iterable<?> it) { it.iterator(); },5ceedf492fc0063291422502f29a8ee99505d5a3,"static void inlinedForNull(java.lang.Iterable<?> it) { it.iterator(); if ((it != null) && (Main.doThrow)) { throw new java.lang.Error(""""); } }",f30f9faaf537f45003d78e9d82529914ddd7e5ea,inlinedForNull(java.lang.Iterable),inlinedForNull(java.lang.Iterable),6,30,"static void inlinedForNull(java.lang.Iterable<?> it) { it.iterator(); if (it != null) { if (Main.doThrow) { throw new java.lang.Error(""""); } } }",3c621ff786dd3d9576c1acb23f1484fd1e870874,inlinedForNull(java.lang.Iterable),465438,43,44
117753,jack-tests_tests_com_android_jack_opcodes_OpcodesTests.java,90.0,"@org.junit.Test public void shr_int() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(SHR_INT).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",b2dd2a5117e4552b6c8e5393a996914dccc74daf,"@org.junit.Test public void shr_int() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(SHR_INT).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",38a3bae791862da1ec91925848d083414c6d88cb,shr_int(),shr_int(),4,90,"@org.junit.Test public void shr_int() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(SHR_INT).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",06dc4775d107845f95a5b3db6b076ce48fb671c3,shr_int(),418926,112,110
220630,rules_src_androidTest_java_android_support_test_rule_ActivityTestRuleTest.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void shouldAskInstrumentationToUseGivenActivityProviderAndResetItAfterTest() throws java.lang.Throwable { android.support.test.internal.util.ActivityProvider<android.support.test.rule.ActivityTestRuleTest.ActivityFixture> activityProvider = new android.support.test.internal.util.ActivityProvider<android.support.test.rule.ActivityTestRuleTest.ActivityFixture>() { @java.lang.Override public android.support.test.rule.ActivityTestRuleTest.ActivityFixture getActivity() { return android.support.test.rule.ActivityTestRuleTest.mMockActivity; } @java.lang.Override public java.lang.Class<android.support.test.rule.ActivityTestRuleTest.ActivityFixture> getActivityClass() { return android.support.test.rule.ActivityTestRuleTest.ActivityFixture.class; } }; android.support.test.rule.ActivityTestRule<android.support.test.rule.ActivityTestRuleTest.ActivityFixture> activityTestRule = new android.support.test.rule.ActivityTestRule(activityProvider, true, false); android.support.test.runner.MonitoringInstrumentation instrumentation = mock(android.support.test.runner.MonitoringInstrumentation.class); when(instrumentation.getTargetContext()).thenReturn(android.support.test.InstrumentationRegistry.getTargetContext()); activityTestRule.setInstrumentation(instrumentation); org.junit.runners.model.Statement baseStatement = mock(org.junit.runners.model.Statement.class); activityTestRule.apply(baseStatement, mock(org.junit.runner.Description.class)).evaluate(); org.mockito.InOrder inOrder = org.mockito.Mockito.inOrder(instrumentation, baseStatement); inOrder.verify(instrumentation).useActivityProvider(activityProvider); inOrder.verify(baseStatement).evaluate(); inOrder.verify(instrumentation).resetActivityProvider(); }",a8d6e0d3d2665a5d6f632b62866896e98b73f980,,shouldAskInstrumentationToUseGivenActivityProviderAndResetItAfterTest(),6,12,"@org.junit.Test public void shouldAskInstrumentationToInterceptActivityUsingGivenFactoryAndResetItAfterTest() throws java.lang.Throwable { android.support.test.runner.intercepting.SingleActivityFactory<android.support.test.rule.ActivityTestRuleTest.ActivityFixture> singleActivityFactory = new android.support.test.runner.intercepting.SingleActivityFactory<android.support.test.rule.ActivityTestRuleTest.ActivityFixture>(android.support.test.rule.ActivityTestRuleTest.ActivityFixture.class) { @java.lang.Override public android.support.test.rule.ActivityTestRuleTest.ActivityFixture create(android.content.Intent intent) { return android.support.test.rule.ActivityTestRuleTest.mMockActivity; } }; android.support.test.rule.ActivityTestRule<android.support.test.rule.ActivityTestRuleTest.ActivityFixture> activityTestRule = new android.support.test.rule.ActivityTestRule(singleActivityFactory, true, false); android.support.test.runner.MonitoringInstrumentation instrumentation = mock(android.support.test.runner.MonitoringInstrumentation.class); when(instrumentation.getTargetContext()).thenReturn(android.support.test.InstrumentationRegistry.getTargetContext()); activityTestRule.setInstrumentation(instrumentation); org.junit.runners.model.Statement baseStatement = mock(org.junit.runners.model.Statement.class); activityTestRule.apply(baseStatement, mock(org.junit.runner.Description.class)).evaluate(); org.mockito.InOrder inOrder = org.mockito.Mockito.inOrder(instrumentation, baseStatement); inOrder.verify(instrumentation).interceptActivityUsing(singleActivityFactory); inOrder.verify(baseStatement).evaluate(); inOrder.verify(instrumentation).useDefaultInterceptingActivityFactory(); }",f4a21dc1bcd1bde072c505f1f24ef376e49f46b1,shouldAskInstrumentationToInterceptActivityUsingGivenFactoryAndResetItAfterTest(),107383,396,382
80030,luni_src_main_java_java_net_StandardSocketOptions.java,,,,"@java.lang.Override public java.lang.Integer validateAndConvertValueBeforeSet(java.io.FileDescriptor fd, java.net.NetworkInterface value) { int nicIndex = value.getIndex(); if (nicIndex == (-1)) { throw new java.lang.IllegalArgumentException(""The NetworkInterface must have a valid index""); } return nicIndex; }",6bdccf4750dd833e89944aa53c0a273ba8a4e413,,"validateAndConvertValueBeforeSet(java.io.FileDescriptor,java.net.NetworkInterface)",11,12,"@java.lang.Override public java.lang.Integer validateAndConvertValueBeforeSet(java.io.FileDescriptor fd, java.net.NetworkInterface value) { if (value == null) { throw new java.lang.IllegalArgumentException(((""value for "" + (name)) + "" must not be null"")); } int nicIndex = value.getIndex(); if (nicIndex == (-1)) { throw new java.lang.IllegalArgumentException(""The NetworkInterface must have a valid index""); } return nicIndex; }",f43f3e9ed328de9a405a52594bcb743291d16568,"validateAndConvertValueBeforeSet(java.io.FileDescriptor,java.net.NetworkInterface)",79007,77,110
162651,ddmlib_src_main_java_com_android_ddmlib_testrunner_IRemoteAndroidTestRunner.java,20.0,"void run(java.util.Collection<com.android.ddmlib.testrunner.ITestRunListener> listeners) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException;",a7b09a7a01b4f2abb8674af943a3abe5e8073cbc,"void run(java.util.Collection<com.android.ddmlib.testrunner.ITestRunListener> listeners) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException, java.lang.InterruptedException;",a04805c4faf4cb3e8003761ccdad1ee22efab468,run(java.util.Collection),run(java.util.Collection),4,20,"void run(java.util.Collection<com.android.ddmlib.testrunner.ITestRunListener> listeners) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException;",a7b09a7a01b4f2abb8674af943a3abe5e8073cbc,run(java.util.Collection),352941,80,73
127845,v8_renderscript_java_src_android_support_v8_renderscript_ScriptIntrinsicColorMatrix.java,2.0,"public static android.support.v8.renderscript.ScriptIntrinsicColorMatrix create(android.support.v8.renderscript.RenderScript rs, android.support.v8.renderscript.Element e) { if (!(e.isCompatible(android.support.v8.renderscript.Element.U8_4(rs)))) { throw new android.support.v8.renderscript.RSIllegalArgumentException(""Unsuported element type.""); } long id = rs.nScriptIntrinsicCreate(2, e.getID(rs)); return new android.support.v8.renderscript.ScriptIntrinsicColorMatrix(id, rs); }",99e3097f77d02fd083b7ec1917268ee1a62683bc,"public static android.support.v8.renderscript.ScriptIntrinsicColorMatrix create(android.support.v8.renderscript.RenderScript rs, android.support.v8.renderscript.Element e) { if (!(e.isCompatible(android.support.v8.renderscript.Element.U8_4(rs)))) { throw new android.support.v8.renderscript.RSIllegalArgumentException(""Unsuported element type.""); } long id; boolean mUseIncSupp = false; if (true || ((rs.isUseNative()) && ((android.os.Build.VERSION.SDK_INT) < 21))) { android.util.Log.v(""Inc RS Test"", ""Creating Intrinsic""); mUseIncSupp = true; id = rs.nIncScriptIntrinsicCreate(2, e.getID(rs)); android.util.Log.v(""Inc RS Test"", ""Creatie Intrinsic Completed""); } else { id = rs.nScriptIntrinsicCreate(2, e.getID(rs)); } android.support.v8.renderscript.ScriptIntrinsicColorMatrix si = new android.support.v8.renderscript.ScriptIntrinsicColorMatrix(id, rs); si.setIncSupp(mUseIncSupp); return si; }",91c001411ac1ebb0039aa6b9f70be2802fcda55a,"create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element)","create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element)",8,0,"public static android.support.v8.renderscript.ScriptIntrinsicColorMatrix create(android.support.v8.renderscript.RenderScript rs, android.support.v8.renderscript.Element e) { if (!(e.isCompatible(android.support.v8.renderscript.Element.U8_4(rs)))) { throw new android.support.v8.renderscript.RSIllegalArgumentException(""Unsuported element type.""); } long id; boolean mUseIncSupp = (rs.isUseNative()) && ((android.os.Build.VERSION.SDK_INT) < (android.support.v8.renderscript.ScriptIntrinsicColorMatrix.INTRINSIC_API_LEVEL)); id = rs.nScriptIntrinsicCreate(2, e.getID(rs), mUseIncSupp); android.support.v8.renderscript.ScriptIntrinsicColorMatrix si = new android.support.v8.renderscript.ScriptIntrinsicColorMatrix(id, rs); si.setIncSupp(mUseIncSupp); return si; }",f630c25fe2a7fbb2c882500fc44f85bb10023895,"create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element)",314618,274,227
629007,src_com_android_bluetooth_btservice_AdapterService.java,198.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void stateChangeCallback(int status) { if (status == (AbstractionLayer.BT_STATE_OFF)) { mAdapterStateMachine.sendMessage(AdapterState.DISABLED_NATIVE); } else if (status == (AbstractionLayer.BT_STATE_ON)) { mAdapterStateMachine.sendMessage(AdapterState.ENABLED_NATIVE); } else { android.util.Log.e(""TAG"", ((""Incorrect status "" + status) + "" in stateChangeCallback"")); } }",05b4f51bd6bc5fd70f7bcd5c296d53f11e43e302,,stateChangeCallback(int),14,17,"void stateChangeCallback(int status) { if (status == (AbstractionLayer.BT_STATE_OFF)) { debugLog(""stateChangeCallback: disableNative() completed""); } else if (status == (AbstractionLayer.BT_STATE_ON)) { mAdapterStateMachine.sendMessage(AdapterState.BLE_STARTED); } else { android.util.Log.e(com.android.bluetooth.btservice.AdapterService.TAG, ((""Incorrect status "" + status) + "" in stateChangeCallback"")); } }",dd399a72eae0d9853f6518ee4fd7df43c827e44f,stateChangeCallback(int),162328,97,109
118981,jack_src_com_android_jack_incremental_NoInputFilter.java,,,,@java.lang.Override @javax.annotation.Nonnull public java.util.Set<java.lang.String> getFileNamesToCompile() { return getJavaFilesSpecifiedOnCommandLine(); },d97ec74ab740202150817993d634c7b94566171f,,getFileNamesToCompile(),7,1,@java.lang.Override @javax.annotation.Nonnull public java.util.List<java.lang.String> getFileNamesToCompile() { return fileNamesToCompile; },6374df92afed2d134b8bbb26c4eb8ecc8510fd5b,getFileNamesToCompile(),148914,40,37
162651,ddmlib_src_main_java_com_android_ddmlib_IDevice.java,12.0,"void removeForward(int localPort, java.lang.String remoteSocketName, com.android.ddmlib.IDevice.DeviceUnixSocketNamespace namespace) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException;",1ef3d10720a796be18e3320b89edf4dcff32843a,"void removeForward(int localPort, java.lang.String remoteSocketName, com.android.ddmlib.IDevice.DeviceUnixSocketNamespace namespace) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException, java.lang.InterruptedException;",e2103475a443958ccec110dd6d3d0bc891b97170,"removeForward(int,java.lang.String,com.android.ddmlib.IDevice$DeviceUnixSocketNamespace)","removeForward(int,java.lang.String,com.android.ddmlib.IDevice$DeviceUnixSocketNamespace)",4,12,"void removeForward(int localPort, java.lang.String remoteSocketName, com.android.ddmlib.IDevice.DeviceUnixSocketNamespace namespace) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException;",1ef3d10720a796be18e3320b89edf4dcff32843a,"removeForward(int,java.lang.String,com.android.ddmlib.IDevice$DeviceUnixSocketNamespace)",352882,72,65
215678,jack_src_com_android_jack_optimizations_DefUsesChainsSimplifier.java,7.0,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) throws java.lang.Exception { if (((method.isNative()) || (method.isAbstract())) || (!(filter.accept(this.getClass(), method)))) { return; } com.android.jack.cfg.ControlFlowGraph cfg = method.getMarker(com.android.jack.cfg.ControlFlowGraph.class); assert cfg != null; com.android.jack.optimizations.DefUsesChainsSimplifier.Visitor visitor = new com.android.jack.optimizations.DefUsesChainsSimplifier.Visitor(method); for (com.android.jack.cfg.BasicBlock bb : cfg.getNodes()) { for (com.android.jack.ir.ast.JStatement stmt : bb.getStatements()) { visitor.accept(stmt); } } method.removeMarker(com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker.class); }",6fe970497ff2b68e66feccf048068e9ba0d87168,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) throws java.lang.Exception { if (((method.isNative()) || (method.isAbstract())) || (!(filter.accept(this.getClass(), method)))) { return; } com.android.jack.cfg.ControlFlowGraph cfg = method.getMarker(com.android.jack.cfg.ControlFlowGraph.class); assert cfg != null; java.util.Map<com.android.jack.ir.ast.JVariable, com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo> definitions = com.android.jack.optimizations.DefUsesChainsSimplifier.collectDefinitions(cfg); java.util.ArrayList<com.android.jack.optimizations.DefUsesChainsSimplifier.OptInfo> candidates = com.android.jack.optimizations.DefUsesChainsSimplifier.collectCandidates(definitions); for (com.android.jack.optimizations.DefUsesChainsSimplifier.OptInfo info : candidates) { handleCandidate(method, cfg, definitions, info); } method.removeMarker(com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker.class); }",e426084bffdb56a0e715b5639acc88740e7b5c31,run(com.android.jack.ir.ast.JMethod),run(com.android.jack.ir.ast.JMethod),2,12,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method) throws java.lang.Exception { if (((method.isNative()) || (method.isAbstract())) || (!(filter.accept(this.getClass(), method)))) { return; } com.android.jack.cfg.ControlFlowGraph cfg = method.getMarker(com.android.jack.cfg.ControlFlowGraph.class); assert cfg != null; java.util.Map<com.android.jack.ir.ast.JVariable, com.android.jack.optimizations.DefUsesChainsSimplifier.VarInfo> definitions = com.android.jack.optimizations.DefUsesChainsSimplifier.collectDefinitions(cfg); java.util.List<com.android.jack.optimizations.DefUsesChainsSimplifier.OptInfo> candidates = com.android.jack.optimizations.DefUsesChainsSimplifier.collectCandidates(definitions); for (com.android.jack.optimizations.DefUsesChainsSimplifier.OptInfo info : candidates) { handleCandidate(method, cfg, definitions, info); } method.removeMarker(com.android.jack.analysis.dfa.reachingdefs.ReachingDefsMarker.class); }",056d5cfba0e8b1c69d2ff8c307745b9ff1672e2e,run(com.android.jack.ir.ast.JMethod),487788,283,283
120480,build-system_builder_src_main_java_com_android_builder_core_VariantConfiguration.java,80.0,@com.android.annotations.NonNull public java.util.Set<java.io.File> getPackagedJars() { java.util.Set<java.io.File> jars = com.google.common.collect.Sets.newHashSetWithExpectedSize(((mJars.size()) + (mFlatLibraries.size()))); for (com.android.builder.dependency.JarDependency jar : mJars) { java.io.File jarFile = jar.getJarFile(); if ((jar.isPackaged()) && (jarFile.exists())) { jars.add(jarFile); } } for (com.android.builder.dependency.LibraryDependency libraryDependency : mFlatLibraries) { java.io.File libJar = libraryDependency.getJarFile(); if (libJar.exists()) { jars.add(libJar); } for (java.io.File jarFile : libraryDependency.getLocalJars()) { if (jarFile.isFile()) { jars.add(jarFile); } } } return jars; },b62222bb7d0455b684ee8dd9b299b1a2691ed36f,@com.android.annotations.NonNull public java.util.Set<java.io.File> getPackagedJars() { java.util.Set<java.io.File> jars = com.google.common.collect.Sets.newHashSetWithExpectedSize((((mJars.size()) + (mLocalJars.size())) + (mFlatLibraries.size()))); for (com.android.builder.dependency.JarDependency jar : mJars) { java.io.File jarFile = jar.getJarFile(); if ((jar.isPackaged()) && (jarFile.exists())) { jars.add(jarFile); } } for (com.android.builder.dependency.JarDependency jar : mLocalJars) { java.io.File jarFile = jar.getJarFile(); if ((jar.isPackaged()) && (jarFile.exists())) { jars.add(jarFile); } } for (com.android.builder.dependency.LibraryDependency libraryDependency : mFlatLibraries) { java.io.File libJar = libraryDependency.getJarFile(); if (libJar.exists()) { jars.add(libJar); } for (java.io.File jarFile : libraryDependency.getLocalJars()) { if (jarFile.isFile()) { jars.add(jarFile); } } } return jars; },f57a9e17e42f78b7506f282635ec344cd60f0558,getPackagedJars(),getPackagedJars(),7,80,@com.android.annotations.NonNull public java.util.Set<java.io.File> getPackagedJars() { java.util.Set<java.io.File> jars = com.google.common.collect.Sets.newHashSetWithExpectedSize((((mExternalJars.size()) + (mLocalJars.size())) + (mFlatLibraries.size()))); for (com.android.builder.dependency.JarDependency jar : mExternalJars) { java.io.File jarFile = jar.getJarFile(); if ((jar.isPackaged()) && (jarFile.exists())) { jars.add(jarFile); } } for (com.android.builder.dependency.JarDependency jar : mLocalJars) { java.io.File jarFile = jar.getJarFile(); if ((jar.isPackaged()) && (jarFile.exists())) { jars.add(jarFile); } } for (com.android.builder.dependency.LibraryDependency libraryDependency : mFlatLibraries) { java.io.File libJar = libraryDependency.getJarFile(); if (libJar.exists()) { jars.add(libJar); } for (java.io.File jarFile : libraryDependency.getLocalJars()) { if (jarFile.isFile()) { jars.add(jarFile); } } } return jars; },8ab1320f642d4270b89b0963c706e01eada0dddb,getPackagedJars(),391872,283,285
490680,ojluni_src_main_java_java_text_DateFormatSymbols.java,27.0,"private final java.lang.String[][] getZoneStringsImpl(boolean needsCopy) { java.lang.String[][] zoneStrings = internalZoneStrings(); if (!needsCopy) { return zoneStrings; } int len = zoneStrings.length; java.lang.String[][] aCopy = new java.lang.String[len][]; for (int i = 0; i < len; i++) { aCopy[i] = java.util.Arrays.copyOf(zoneStrings[i], zoneStrings[i].length); } return aCopy; }",d088fc395bcbd2a9ad252357766204c7fd9fe27a,"private java.lang.String[][] getZoneStringsImpl(boolean needsCopy) { if ((zoneStrings) == null) { zoneStrings = libcore.icu.TimeZoneNames.getZoneStrings(locale); } if (!needsCopy) { return zoneStrings; } int len = zoneStrings.length; java.lang.String[][] aCopy = new java.lang.String[len][]; for (int i = 0; i < len; i++) { aCopy[i] = java.util.Arrays.copyOf(zoneStrings[i], zoneStrings[i].length); } return aCopy; }",256fb87592fd6a27bf317f6be87bd7d40535c731,getZoneStringsImpl(boolean),getZoneStringsImpl(boolean),8,28,"private java.lang.String[][] getZoneStringsImpl(boolean needsCopy) { java.lang.String[][] zoneStrings = internalZoneStrings(); if (!needsCopy) { return zoneStrings; } int len = zoneStrings.length; java.lang.String[][] aCopy = new java.lang.String[len][]; for (int i = 0; i < len; i++) { aCopy[i] = java.util.Arrays.copyOf(zoneStrings[i], zoneStrings[i].length); } return aCopy; }",2cdb1ccb3b3a8ff63d4ae0da580637b0712f9105,getZoneStringsImpl(boolean),153505,139,121
90965,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_EventModifiers_InstanceOnlyModifierTest.java,,,,"public void testMethodEntry() { logWriter.println(""testMethodEntry started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); if (!(debuggeeWrapper.vmMirror.canUseInstanceFilters())) { logWriter.println(""##WARNING: this VM doesn't possess capability: canUseInstanceFilters""); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); return; } long objectID = getFilteredInstanceObjectId(); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.setInstanceOnlyMethodEntry(org.apache.harmony.jpda.tests.jdwp.EventModifiers.InstanceOnlyModifierTest.TEST_CLASS_NAME, objectID); checkReplyPacket(reply, ""Failed to set METHOD_ENTRY with thread only modifier""); int requestID = reply.getNextValueAsInt(); assertAllDataRead(reply); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); waitForEvent(JDWPConstants.EventKind.METHOD_ENTRY, requestID, objectID); reply = debuggeeWrapper.vmMirror.clearEvent(JDWPConstants.EventKind.METHOD_ENTRY, requestID); checkReplyPacket(reply, (""Failed to clear event "" + requestID)); logWriter.println(""testMethodEntry done""); }",5a5d08ce47fd5f9f708a73d31991c684be99473d,,testMethodEntry(),3,0,"public void testMethodEntry() { logWriter.println(""testMethodEntry started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); if (!(checkCanUseInstanceFilterCapability())) { synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); return; } org.apache.harmony.jpda.tests.framework.jdwp.EventBuilder builder = createMethodEntryEventBuilder(org.apache.harmony.jpda.tests.jdwp.EventModifiers.InstanceOnlyModifierTest.TEST_CLASS_NAME); testEventWithInstanceOnlyModifier(builder); logWriter.println(""testMethodEntry done""); }",f686030b35902e46e9f8d72b5eb03374643b6188,testMethodEntry(),127321,297,140
581716,src_com_android_server_telecom_Call.java,61.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.android.internal.annotations.VisibleForTesting public void setEmergencyCall(boolean flag) { mIsEmergencyCall = flag; },e41728b0e9541be6b76612599023201a9288ddf4,,setEmergencyCall(boolean),6,195,@java.lang.Override public ConnectionServiceFocusManager.ConnectionServiceFocus getConnectionServiceWrapper() { return mConnectionService; },85e6a9b1f792885697ba6e9eac05cf65be8438b3,getConnectionServiceWrapper(),502809,35,26
128670,src_com_android_nfc_cardemulation_RegisteredT3tIdentifiersCache.java,,,,"void updateRoutingLocked() { if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, ""updateRoutingLocked""); if (!(mNfcEnabled)) { if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, ""Not updating routing table because NFC is off.""); return; } java.util.List<com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.T3tIdentifier> t3tIdentifiers = new java.util.ArrayList<com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.T3tIdentifier>(); java.util.Iterator<java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo>> it; if ((mPreferredForegroundService) == null) { it = mT3tIdentifiersCache.entrySet().iterator(); } else { it = mForegroundT3tIdentifiersCache.entrySet().iterator(); } while (it.hasNext()) { java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo> entry = ((java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo>) (it.next())); t3tIdentifiers.add(new com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.T3tIdentifier(entry.getValue().getSystemCode(), entry.getValue().getNfcid2())); } mRoutingManager.configureRouting(t3tIdentifiers); }",4c9faa8761fc745e546d1c1130deb6947f96933d,,updateRoutingLocked(),10,6,"void updateRoutingLocked() { if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, ""updateRoutingLocked""); if (!(mNfcEnabled)) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, ""Not updating routing table because NFC is off.""); return; } java.util.List<com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.T3tIdentifier> t3tIdentifiers = new java.util.ArrayList<com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.T3tIdentifier>(); java.util.Iterator<java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo>> it; it = mForegroundT3tIdentifiersCache.entrySet().iterator(); while (it.hasNext()) { java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo> entry = ((java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo>) (it.next())); t3tIdentifiers.add(new com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.T3tIdentifier(entry.getValue().getSystemCode(), entry.getValue().getNfcid2())); } mRoutingManager.configureRouting(t3tIdentifiers); }",5d71b005f94d105642d8214b97ee9871cd3ed36d,updateRoutingLocked(),148743,418,366
49601,hierarchyviewer2_libs_hierarchyviewerlib_src_com_android_hierarchyviewerlib_device_DdmViewDebugDevice.java,,,,"@java.lang.Override public void loadProfileData(com.android.hierarchyviewerlib.models.Window window, com.android.hierarchyviewerlib.models.ViewNode viewNode) { }",338b81dd4f3869b34a97427512feae715364f814,,"loadProfileData(com.android.hierarchyviewerlib.models.Window,com.android.hierarchyviewerlib.models.ViewNode)",11,12,"@java.lang.Override public void loadProfileData(com.android.hierarchyviewerlib.models.Window window, com.android.hierarchyviewerlib.models.ViewNode viewNode) { com.android.ddmlib.Client c = window.getClient(); if (c == null) { return; } java.lang.String viewRoot = window.getTitle(); com.android.hierarchyviewerlib.device.DdmViewDebugDevice.CaptureByteArrayHandler handler = new com.android.hierarchyviewerlib.device.DdmViewDebugDevice.CaptureByteArrayHandler(com.android.ddmlib.HandleViewDebug.CHUNK_VUOP); try { com.android.ddmlib.HandleViewDebug.profileView(c, viewRoot, viewNode.toString(), handler); } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DdmViewDebugDevice.TAG, e); return; } byte[] data = handler.getData(30, java.util.concurrent.TimeUnit.SECONDS); if (data == null) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DdmViewDebugDevice.TAG, ""Timed out waiting for profile data""); return; } try { boolean success = com.android.hierarchyviewerlib.device.DeviceBridge.loadProfileDataRecursive(viewNode, new java.io.BufferedReader(new java.io.StringReader(new java.lang.String(data)))); if (success) { viewNode.setProfileRatings(); } } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DdmViewDebugDevice.TAG, e); return; } }",6c1c19584ed87dcc9ec7b2eaf90987161a964c1c,"loadProfileData(com.android.hierarchyviewerlib.models.Window,com.android.hierarchyviewerlib.models.ViewNode)",54222,42,390
372892,src_com_android_phone_PhoneInterfaceManager.java,131.0,"public java.lang.String[] getForbiddenPlmns(int subId, int appType) { mApp.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE, ""Requires READ_PRIVILEGED_PHONE_STATE""); if ((appType != (android.telephony.TelephonyManager.APPTYPE_USIM)) && (appType != (android.telephony.TelephonyManager.APPTYPE_SIM))) { com.android.phone.PhoneInterfaceManager.loge(""getForbiddenPlmnList(): App Type must be USIM or SIM""); return null; } java.lang.Object response = sendRequest(com.android.phone.PhoneInterfaceManager.CMD_GET_FORBIDDEN_PLMNS, new java.lang.Integer(appType), subId); if (response instanceof java.lang.String[]) { return ((java.lang.String[]) (response)); } return null; }",03483463024efc700c746b857c5b42d2a61114bd,"public java.lang.String[] getForbiddenPlmns(int subId, int appType) { mApp.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_STATE, ""Requires READ_PRIVILEGED_PHONE_STATE""); if ((appType != (android.telephony.TelephonyManager.APPTYPE_USIM)) && (appType != (android.telephony.TelephonyManager.APPTYPE_SIM))) { com.android.phone.PhoneInterfaceManager.loge(""getForbiddenPlmnList(): App Type must be USIM or SIM""); return null; } java.lang.Object response = sendRequest(com.android.phone.PhoneInterfaceManager.CMD_GET_FORBIDDEN_PLMNS, new java.lang.Integer(appType), subId); if (response instanceof java.lang.String[]) { return ((java.lang.String[]) (response)); } return null; }",39d9d9911213369669f908e3c6eb9b94a2efd852,"getForbiddenPlmns(int,int)","getForbiddenPlmns(int,int)",2,131,"public java.lang.String[] getForbiddenPlmns(int subId, int appType) { mApp.enforceCallingOrSelfPermission(android.Manifest.permission.READ_PHONE_STATE, ""Requires READ_PHONE_STATE""); if ((appType != (android.telephony.TelephonyManager.APPTYPE_USIM)) && (appType != (android.telephony.TelephonyManager.APPTYPE_SIM))) { com.android.phone.PhoneInterfaceManager.loge(""getForbiddenPlmnList(): App Type must be USIM or SIM""); return null; } java.lang.Object response = sendRequest(com.android.phone.PhoneInterfaceManager.CMD_GET_FORBIDDEN_PLMNS, new java.lang.Integer(appType), subId); if (response instanceof java.lang.String[]) { return ((java.lang.String[]) (response)); } return null; }",a9a44eca4d146798102b2eaf54269ad15e5c0efb,"getForbiddenPlmns(int,int)",131227,201,195
252478,java_tests_RsTest_src_com_android_rs_test_UT_reduce.java,0.0,"private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, final float[] javaResult, final float[] rsResult) { if ((javaResult.length) != (rsResult.length)) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((testName + "": java length "") + (javaResult.length)) + "", rs length "") + (rsResult.length)) + "": FAILED"")); return false; } for (int i = 0; i < (javaResult.length); ++i) { if ((javaResult[i]) != (rsResult[i])) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((((testName + ""["") + i) + ""]: java "") + (javaResult[i])) + "", rs "") + (rsResult[i])) + "": FAILED"")); return false; } } java.lang.String status = ""PASSED""; if (t != null) status += "" "" + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((testName + "": "") + status)); return true; }",a15b3805a779db755798fc0c76d504b9c08dca81,"private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, final float[] javaRslt, final float[] rsRslt) { if ((javaRslt.length) != (rsRslt.length)) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((testName + "": java length "") + (javaRslt.length)) + "", rs length "") + (rsRslt.length)) + "": FAILED"")); return false; } for (int i = 0; i < (javaRslt.length); ++i) { if ((javaRslt[i]) != (rsRslt[i])) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((((testName + ""["") + i) + ""]: java "") + (javaRslt[i])) + "", rs "") + (rsRslt[i])) + "": FAILED"")); return false; } } java.lang.String status = ""PASSED""; if (t != null) status += "" "" + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((testName + "": "") + status)); return true; }",ccf86edbb87509dbd4573eef9705dab9bcfdd4d2,"result(java.lang.String,com.android.rs.test.UT_reduce$timing,float[],float[])","result(java.lang.String,com.android.rs.test.UT_reduce$timing,float[],float[])",7,0,"private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, final float[] javaResult, final float[] rsResult) { if ((javaResult.length) != (rsResult.length)) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((testName + "": java length "") + (javaResult.length)) + "", rs length "") + (rsResult.length)) + "": FAILED"")); return false; } for (int i = 0; i < (javaResult.length); ++i) { if ((javaResult[i]) != (rsResult[i])) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((((testName + ""["") + i) + ""]: java "") + (javaResult[i])) + "", rs "") + (rsResult[i])) + "": FAILED"")); return false; } } java.lang.String status = ""PASSED""; if (t != null) status += "" "" + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((testName + "": "") + status)); return true; }",a15b3805a779db755798fc0c76d504b9c08dca81,"result(java.lang.String,com.android.rs.test.UT_reduce$timing,float[],float[])",379440,315,293
507524,src_com_android_bluetooth_opp_TestActivity.java,31.0,@java.lang.Override public void onClick(android.view.View view) { server = new com.android.bluetooth.opp.TestTcpServer(); java.lang.Thread server_thread = new java.lang.Thread(server); server_thread.start(); },3fc48c989addc215783698e43e505b291c90afaf,@java.lang.Override public void onClick(android.view.View view) { mServer = new com.android.bluetooth.opp.TestTcpServer(); java.lang.Thread server_thread = new java.lang.Thread(mServer); server_thread.start(); },69ab1c4ae2f63a66e574e429e6f8c20d9202acfd,onClick(android.view.View),onClick(android.view.View),26,31,@java.lang.Override public void onClick(android.view.View view) { mServer = new com.android.bluetooth.opp.TestTcpServer(); java.lang.Thread serverThread = new java.lang.Thread(mServer); serverThread.start(); },f4e0f2c41cdc02e89fc3e121925e38f030d8863d,onClick(android.view.View),155272,60,58
159876,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_dsl_TestOptions.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.android.build.gradle.internal.dsl.TestOptions.UnitTestOptions getUnitTests() { return unitTests; },8f34c931547b9ecb11fcde4e56ce5ae5e4511ada,,getUnitTests(),3,5,@com.android.annotations.NonNull public com.android.build.gradle.internal.dsl.TestOptions.UnitTestOptions getUnitTests() { return unitTests; },fc251a82c2de7e24fea6f44bba7d0d7473649f01,getUnitTests(),29557,29,37
276040,tests_wifitests_src_com_android_server_wifi_ExternalScoreEvaluatorTest.java,,,,"@org.junit.Test public void nullScoredNetworks() { java.lang.String[] ssids = new java.lang.String[]{ ""\""test1\"""", ""\""test2\"""" }; java.lang.String[] bssids = new java.lang.String[]{ ""6c:f3:7f:ae:8c:f3"", ""6c:f3:7f:ae:8c:f4"" }; int[] freqs = new int[]{ 2470, 2437 }; java.lang.String[] caps = new java.lang.String[]{ ""[WPA2-EAP-CCMP][ESS]"", ""[ESS]"" }; int[] securities = new int[]{ com.android.server.wifi.WifiConfigurationTestUtil.SECURITY_PSK, com.android.server.wifi.WifiConfigurationTestUtil.SECURITY_NONE }; int[] levels = new int[]{ (mThresholdQualifiedRssi2G) + 8, (mThresholdQualifiedRssi2G) + 8 }; java.lang.Integer[] scores = new java.lang.Integer[]{ null, null }; boolean[] meteredHints = new boolean[]{ false, true }; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); android.net.wifi.WifiConfiguration[] savedConfigs = scanDetailsAndConfigs.getWifiConfigs(); savedConfigs[0].useExternalScores = true; com.android.server.wifi.WifiNetworkSelectorTestUtil.configureScoreCache(mScoreCache, scanDetails, scores, meteredHints); android.net.wifi.WifiConfiguration candidate = mExternalScoreEvaluator.evaluateNetworks(scanDetails, null, null, false, true, mScoreCache, null); assertEquals(""Expect null configuration"", null, candidate); }",22a3c7cbcc2035412bed63db65bd030e37866386,,nullScoredNetworks(),11,9,"@org.junit.Test public void nullScoredNetworks() { java.lang.String[] ssids = new java.lang.String[]{ ""\""test1\"""", ""\""test2\"""" }; java.lang.String[] bssids = new java.lang.String[]{ ""6c:f3:7f:ae:8c:f3"", ""6c:f3:7f:ae:8c:f4"" }; int[] freqs = new int[]{ 2470, 2437 }; java.lang.String[] caps = new java.lang.String[]{ ""[WPA2-EAP-CCMP][ESS]"", ""[ESS]"" }; int[] securities = new int[]{ com.android.server.wifi.WifiConfigurationTestUtil.SECURITY_PSK, com.android.server.wifi.WifiConfigurationTestUtil.SECURITY_NONE }; int[] levels = new int[]{ (mThresholdQualifiedRssi2G) + 8, (mThresholdQualifiedRssi2G) + 8 }; java.lang.Integer[] scores = new java.lang.Integer[]{ null, null }; boolean[] meteredHints = new boolean[]{ false, true }; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); android.net.wifi.WifiConfiguration[] savedConfigs = scanDetailsAndConfigs.getWifiConfigs(); savedConfigs[0].useExternalScores = true; com.android.server.wifi.WifiNetworkSelectorTestUtil.configureScoreCache(mScoreCache, scanDetails, scores, meteredHints); android.net.wifi.WifiConfiguration candidate = mExternalScoreEvaluator.evaluateNetworks(scanDetails, null, null, false, true, null); assertEquals(""Expect null configuration"", null, candidate); }",88005f01e0b12efeed8fdbb6481ec96903d7cc1f,nullScoredNetworks(),471987,466,462
295946,sched_src_com_android_sched_util_VFSClassLoader.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@javax.annotation.Nonnull @java.lang.Override public java.io.InputStream getInputStream() throws java.io.IOException { if ((is) == null) { connect(); assert (is) != null; } return is; },3e5135cafbbc0598ce4176cef77479338d6c1834,,getInputStream(),6,5,"@javax.annotation.Nonnull @java.lang.Override @com.android.sched.util.findbugs.SuppressFBWarnings(""IS2_INCONSISTENT_SYNC"") public java.io.InputStream getInputStream() throws java.io.IOException { connect(); assert (is) != null; return is; }",995b767188340c124c89987ef8c4f4578d0baeed,getInputStream(),371851,51,67
637794,test_1934-jvmti-signal-thread_src_art_Test1934.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static void ensureInitialized(java.lang.Class c) { c.getName(); },57c2265cdd4ff688f9eff6888cc38a86e9128a09,,ensureInitialized(java.lang.Class),2,2,"private static void ensureInitialized(java.lang.Class c) { try { java.lang.Class.forName(c.getName()); } catch (java.lang.Exception e) { throw new java.lang.Error((""Failed to initialize "" + c), e); } }",034aadaaf196b2a5e658d518c6c8ec7655820e2c,ensureInitialized(java.lang.Class),233874,19,59
348652,tests_wifitests_src_com_android_server_wifi_SupplicantP2pIfaceHalTest.java,77.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void answer(final int networkId, ISupplicantP2pIface.getNetworkCallback cb) { doAnswer(new android.app.test.MockAnswerUtil.AnswerWithArguments() { public void answer(ISupplicantP2pNetwork.isCurrentCallback cb) { cb.onValues(mStatusSuccess, groups.get(networkId).isCurrent); return; } }).when(mISupplicantP2pNetworkMock).isCurrent(any(ISupplicantP2pNetwork.isCurrentCallback.class)); cb.onValues(mStatusSuccess, mISupplicantP2pNetworkMock); return; }",a0d479123ff998b973063943dce838be7cc51edf,,"answer(int,ISupplicantP2pIface.getNetworkCallback)",6,116,"public void answer(ISupplicantP2pNetwork.getSsidCallback cb) { cb.onValues(mStatusSuccess, groups.get(networkId).ssid); return; }",60f6f3eff16eba7678cc7e2ee7b6cd518263f652,answer(ISupplicantP2pNetwork.getSsidCallback),512767,147,44
52241,draw9patch_src_main_java_com_android_draw9patch_ui_ImageViewer.java,2.0,@java.lang.Override public void mouseReleased(java.awt.event.MouseEvent event) { endDrawingLine(); },01d45f4aa16a64c774a7f7b5a0b5a5c7b3daf78b,"@java.lang.Override public void mouseReleased(java.awt.event.MouseEvent event) { endDrawingLine(); endEditingRegion(event.getX(), event.getY()); }",8b7bb1fa9eff9c1a298fe021e63d1b991ce741a3,mouseReleased(java.awt.event.MouseEvent),mouseReleased(java.awt.event.MouseEvent),13,4,"@java.lang.Override public void mouseReleased(java.awt.event.MouseEvent event) { int x = imageXCoordinate(event.getX()); int y = imageYCoordinate(event.getY()); endDrawingLine(); endEditingRegion(x, y); resetDrawMode(); }",f3eeb8dd93dc8ae713513c3f1e8c1e4482bf35a4,mouseReleased(java.awt.event.MouseEvent),307273,37,59
223410,apps_CtsVerifier_src_com_android_cts_verifier_tv_MockTvInputService.java,22.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onOverlayViewSizeChanged(int width, int height) { synchronized(com.android.cts.verifier.tv.MockTvInputService.sLock) { if ((com.android.cts.verifier.tv.MockTvInputService.sOverlayViewSizeChangedCallback) != null) { if (!(com.android.cts.verifier.tv.MockTvInputService.sOverlayViewSizeChangedCallback.getBundle().getBoolean(""OverlayViewCreated""))) { com.android.cts.verifier.tv.MockTvInputService.sOverlayViewSizeChangedCallback.getBundle().putBoolean(""OverlayViewCreated"", true); } else { if (((com.android.cts.verifier.tv.MockTvInputService.sDummyVideoTrack.getVideoHeight()) <= 0) || ((com.android.cts.verifier.tv.MockTvInputService.sDummyVideoTrack.getVideoWidth()) <= 0)) { android.util.Log.w(com.android.cts.verifier.tv.MockTvInputService.TAG, ""The width or height of the selected video track is invalid.""); } else if ((height <= 0) || (width <= 0)) { android.util.Log.w(com.android.cts.verifier.tv.MockTvInputService.TAG, ""The width or height of the OverlayView is incorrect.""); } else if ((java.lang.Math.abs(((((float) (width)) / height) - ((((float) (com.android.cts.verifier.tv.MockTvInputService.sDummyVideoTrack.getVideoWidth())) * (com.android.cts.verifier.tv.MockTvInputService.sDummyVideoTrack.getVideoPixelAspectRatio())) / (com.android.cts.verifier.tv.MockTvInputService.sDummyVideoTrack.getVideoHeight()))))) < (com.android.cts.verifier.tv.MockTvInputService.sRatioEpsilon)) { com.android.cts.verifier.tv.MockTvInputService.sOverlayViewSizeChangedCallback.post(); com.android.cts.verifier.tv.MockTvInputService.sOverlayViewSizeChangedCallback = null; notifyTrackSelected(TvTrackInfo.TYPE_VIDEO, null); } } } } }",20c17bd8ff064f0b0c6f908f32a60a1e6e8868c4,,"onOverlayViewSizeChanged(int,int)",7,20,"@java.lang.Override public void onOverlayViewSizeChanged(int width, int height) { synchronized(com.android.cts.verifier.tv.MockTvInputService.sLock) { draw(); if ((com.android.cts.verifier.tv.MockTvInputService.sOverlayViewSizeChangedCallback) != null) { if (((com.android.cts.verifier.tv.MockTvInputService.sDummyVideoTrack.getVideoHeight()) <= 0) || ((com.android.cts.verifier.tv.MockTvInputService.sDummyVideoTrack.getVideoWidth()) <= 0)) { android.util.Log.w(com.android.cts.verifier.tv.MockTvInputService.TAG, ""The width or height of the selected video track is invalid.""); } else if ((height <= 0) || (width <= 0)) { android.util.Log.w(com.android.cts.verifier.tv.MockTvInputService.TAG, ""The width or height of the OverlayView is incorrect.""); } else if ((java.lang.Math.abs(((((float) (width)) / height) - ((((float) (com.android.cts.verifier.tv.MockTvInputService.sDummyVideoTrack.getVideoWidth())) * (com.android.cts.verifier.tv.MockTvInputService.sDummyVideoTrack.getVideoPixelAspectRatio())) / (com.android.cts.verifier.tv.MockTvInputService.sDummyVideoTrack.getVideoHeight()))))) < (com.android.cts.verifier.tv.MockTvInputService.DISPLAY_RATIO_EPSILON)) { com.android.cts.verifier.tv.MockTvInputService.sOverlayViewSizeChangedCallback.post(); com.android.cts.verifier.tv.MockTvInputService.sOverlayViewSizeChangedCallback = null; } } } }",a272079e3d8ba8e3b4284a9e7aa3cafd627ce667,"onOverlayViewSizeChanged(int,int)",158825,504,423
18960,eclipse_plugins_com.android.ide.eclipse.tests_unittests_com_android_ide_eclipse_adt_internal_resources_AttrsXmlParserManifestTest.java,2.0,@java.lang.Override public void setUp() throws java.lang.Exception { mFilePath = com.android.ide.eclipse.tests.AdtTestData.getInstance().getTestFilePath(com.android.ide.eclipse.adt.internal.resources.AttrsXmlParserManifestTest.MOCK_DATA_PATH); mParser = new com.android.ide.eclipse.adt.internal.resources.AttrsXmlParser(mFilePath); },9eae607ef1cf9d05c8e9cd102632b8b781da8887,@java.lang.Override public void setUp() throws java.lang.Exception { mFilePath = com.android.ide.eclipse.tests.AdtTestData.getInstance().getTestFilePath(com.android.ide.eclipse.adt.internal.resources.AttrsXmlParserManifestTest.MOCK_DATA_PATH); mParser = new com.android.ide.common.platformData.AttrsXmlParser(mFilePath); },36bb8e5df057981e2027adf27e780c6fb0a691aa,setUp(),setUp(),2,2,@java.lang.Override public void setUp() throws java.lang.Exception { mFilePath = com.android.ide.eclipse.tests.AdtTestData.getInstance().getTestFilePath(com.android.ide.common.resources.platform.AttrsXmlParserManifestTest.MOCK_DATA_PATH); mParser = new com.android.ide.common.resources.platform.AttrsXmlParser(mFilePath); },fe9180e326a82a0c762964415b91841263ba3e5f,setUp(),136345,92,90
81416,tests_tests_renderscript_src_android_renderscript_cts_TestClz.java,,,,"private void verifyResultsClzShort2(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { short[] arrayInValue = new short[(INPUTSIZE) * 2]; inValue.copyTo(arrayInValue); short[] arrayOut = new short[(INPUTSIZE) * 2]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 2; j++) { android.renderscript.cts.TestClz.ArgumentsShortShort args = new android.renderscript.cts.TestClz.ArgumentsShortShort(); args.inValue = arrayInValue[((i * 2) + j)]; android.renderscript.cts.CoreMathVerifier.computeClz(args); short actualOut = arrayOut[((i * 2) + j)]; int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; float ulpf; ulpf = (java.lang.Math.ulp(args.out)) * ulf; assertEquals((((((((((((((((((""Incorrect output for checkClzShort2"" + (relaxed ? ""_relaxed"" : """")) + "" @["") + i) + "", "") + j) + ""] with ulf:"") + ulf) + "".\n"") + ""Input inValue:"") + (args.inValue)) + ""\n"") + ""Expected output out:"") + (args.out)) + ""\n"") + ""Actual output out:"") + actualOut) + ""\n""), args.out, actualOut, ulpf); } } }",c48e56db3272885c7a1c39b96e185a9cdbd0a542,,"verifyResultsClzShort2(android.renderscript.Allocation,android.renderscript.Allocation,boolean)",9,44,"private void verifyResultsClzShort2Short2(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { short[] arrayInValue = new short[(INPUTSIZE) * 2]; inValue.copyTo(arrayInValue); short[] arrayOut = new short[(INPUTSIZE) * 2]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 2; j++) { android.renderscript.cts.TestClz.ArgumentsShortShort args = new android.renderscript.cts.TestClz.ArgumentsShortShort(); args.inValue = arrayInValue[((i * 2) + j)]; android.renderscript.cts.CoreMathVerifier.computeClz(args); int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; boolean valid = true; int neededUlf = 0; if ((args.out) != (arrayOut[((i * 2) + j)])) { valid = false; } if (!valid) { java.lang.StringBuilder message = new java.lang.StringBuilder(); message.append(java.lang.String.format(""Input inValue: %d"", args.inValue)); message.append(""\n""); message.append(java.lang.String.format(""Expected output out: %d"", args.out)); message.append(""\n""); message.append(java.lang.String.format(""Actual output out: %d"", arrayOut[((i * 2) + j)])); if ((args.out) != (arrayOut[((i * 2) + j)])) { message.append("" FAIL""); } message.append(""\n""); assertTrue((((""Incorrect output for checkClzShort2Short2"" + (relaxed ? ""_relaxed"" : """")) + "":\n"") + (message.toString())), valid); } } } }",12add134e91013a587edcb3950a2e23e0e84d0fd,"verifyResultsClzShort2Short2(android.renderscript.Allocation,android.renderscript.Allocation,boolean)",143427,375,432
194132,tools_ahat_src_InstanceUtils.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static long getLongField(com.android.tools.perflib.heap.Instance inst, java.lang.String fieldName, long def) { java.lang.Long value = com.android.ahat.InstanceUtils.getLongField(inst, fieldName); return value == null ? def : value; }",cd714376500740592bf97a0dded5dec08c832887,,"getLongField(com.android.tools.perflib.heap.Instance,java.lang.String,long)",5,5,"public static com.android.ahat.InstanceUtils.NativeAllocation getNativeAllocation(com.android.tools.perflib.heap.Instance inst) { if (!(com.android.ahat.InstanceUtils.isInstanceOfClass(inst, ""libcore.util.NativeAllocationRegistry$CleanerThunk""))) { return null; } java.lang.Long pointer = com.android.ahat.InstanceUtils.getLongField(inst, ""nativePtr"", null); if (pointer == null) { return null; } com.android.tools.perflib.heap.Instance registry = null; for (com.android.tools.perflib.heap.ClassInstance.FieldValue field : ((com.android.tools.perflib.heap.ClassInstance) (inst)).getValues()) { java.lang.Object fieldValue = field.getValue(); if (fieldValue instanceof com.android.tools.perflib.heap.Instance) { com.android.tools.perflib.heap.Instance fieldInst = ((com.android.tools.perflib.heap.Instance) (fieldValue)); if (com.android.ahat.InstanceUtils.isInstanceOfClass(fieldInst, ""libcore.util.NativeAllocationRegistry"")) { registry = fieldInst; break; } } } if (registry == null) { return null; } java.lang.Long size = com.android.ahat.InstanceUtils.getLongField(registry, ""size"", null); if (size == null) { return null; } com.android.tools.perflib.heap.Instance referent = null; for (com.android.tools.perflib.heap.Instance ref : inst.getHardReferences()) { if (com.android.ahat.InstanceUtils.isInstanceOfClass(ref, ""sun.misc.Cleaner"")) { referent = com.android.ahat.InstanceUtils.getReferent(ref); if (referent != null) { break; } } } if (referent == null) { return null; } return new com.android.ahat.InstanceUtils.NativeAllocation(size, inst.getHeap(), pointer, referent); }",9128bcf88f6840ce02f1c928ba87a80c2d73c08f,getNativeAllocation(com.android.tools.perflib.heap.Instance),302303,67,456
81416,tests_tests_renderscript_src_android_renderscript_cts_TestAbs.java,,,,"private void verifyResultsAbsChar2(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { byte[] arrayInValue = new byte[(INPUTSIZE) * 2]; inValue.copyTo(arrayInValue); byte[] arrayOut = new byte[(INPUTSIZE) * 2]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 2; j++) { android.renderscript.cts.TestAbs.ArgumentsCharUchar args = new android.renderscript.cts.TestAbs.ArgumentsCharUchar(); args.inValue = arrayInValue[((i * 2) + j)]; android.renderscript.cts.CoreMathVerifier.computeAbs(args); byte actualOut = arrayOut[((i * 2) + j)]; int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; float ulpf; ulpf = (java.lang.Math.ulp(args.out)) * ulf; assertEquals((((((((((((((((((""Incorrect output for checkAbsChar2"" + (relaxed ? ""_relaxed"" : """")) + "" @["") + i) + "", "") + j) + ""] with ulf:"") + ulf) + "".\n"") + ""Input inValue:"") + (args.inValue)) + ""\n"") + ""Expected output out:"") + (args.out)) + ""\n"") + ""Actual output out:"") + actualOut) + ""\n""), args.out, actualOut, ulpf); } } }",90e605a8cdf570c8715b8a6b7cfaec3b22c8a0b1,,"verifyResultsAbsChar2(android.renderscript.Allocation,android.renderscript.Allocation,boolean)",9,23,"private void verifyResultsAbsChar2Uchar2(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { byte[] arrayInValue = new byte[(INPUTSIZE) * 2]; inValue.copyTo(arrayInValue); byte[] arrayOut = new byte[(INPUTSIZE) * 2]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 2; j++) { android.renderscript.cts.TestAbs.ArgumentsCharUchar args = new android.renderscript.cts.TestAbs.ArgumentsCharUchar(); args.inValue = arrayInValue[((i * 2) + j)]; android.renderscript.cts.CoreMathVerifier.computeAbs(args); int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; boolean valid = true; int neededUlf = 0; if ((args.out) != (arrayOut[((i * 2) + j)])) { valid = false; } if (!valid) { java.lang.StringBuilder message = new java.lang.StringBuilder(); message.append(java.lang.String.format(""Input inValue: %d"", args.inValue)); message.append(""\n""); message.append(java.lang.String.format(""Expected output out: %x"", args.out)); message.append(""\n""); message.append(java.lang.String.format(""Actual output out: %x"", arrayOut[((i * 2) + j)])); if ((args.out) != (arrayOut[((i * 2) + j)])) { message.append("" FAIL""); } message.append(""\n""); assertTrue((((""Incorrect output for checkAbsChar2Uchar2"" + (relaxed ? ""_relaxed"" : """")) + "":\n"") + (message.toString())), valid); } } } }",5e3c5a91039544a779916b9f3e315aecbdd96bf1,"verifyResultsAbsChar2Uchar2(android.renderscript.Allocation,android.renderscript.Allocation,boolean)",143043,372,431
559360,core_java_android_net_IpSecTransform.java,16.0,@java.lang.Override public void onError(int error) { synchronized(mKeepaliveSyncLock) { mKeepaliveStatus = error; mKeepaliveSyncLock.notifyAll(); } },d596f104f42ae3d382dfb1e80819678457543d45,@java.lang.Override public void onError(int error) { synchronized(this) { mKeepalive = null; } if ((mUserKeepaliveCallback) != null) mUserKeepaliveCallback.onError(error); },a7694de4ab85a360420b464e4e14748e1ca2fa0f,onError(int),onError(int),9,16,@java.lang.Override public void onError(int error) { synchronized(this) { mKeepalive = null; mCallbackHandler.post(() -> android.net.mUserKeepaliveCallback.onError(error)); } },67766c946a2175002e923aaf52135bf399c1cfa3,onError(int),140275,49,48
325465,tzdata_update2_src_test_libcore_tzdata_update2_TimeZoneBundleInstallerTest.java,20.0,"public void testInstall_withMissingBundleVersionFile() throws java.lang.Exception { libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundleBuilder(libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION, ""001"").clearVersionForTests().buildUnvalidated(); assertFalse(installer.install(bundle.getBytes())); assertNoContentInstalled(); }",b6b9d6536ead361c54ac1e3329d387000fe03350,"public void testInstall_withMissingBundleVersionFile() throws java.lang.Exception { libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundleBuilder(libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION, ""001"").clearVersionForTests().buildUnvalidated(); assertEquals(TimeZoneBundleInstaller.INSTALL_FAIL_BAD_BUNDLE_STRUCTURE, installer.installWithErrorCode(bundle.getBytes())); assertNoContentInstalled(); }",05ddf14c534b579328cf3bf09756940e6502140c,testInstall_withMissingBundleVersionFile(),testInstall_withMissingBundleVersionFile(),3,18,"public void testInstall_withMissingBundleVersionFile() throws java.lang.Exception { libcore.tzdata.update2.TimeZoneBundle bundle = libcore.tzdata.update2.TimeZoneBundleInstallerTest.createValidTimeZoneBundleBuilder(libcore.tzdata.update2.TimeZoneBundleInstallerTest.NEW_RULES_VERSION, 1).clearVersionForTests().buildUnvalidated(); assertEquals(TimeZoneBundleInstaller.INSTALL_FAIL_BAD_BUNDLE_STRUCTURE, installer.installWithErrorCode(bundle.getBytes())); assertNoContentInstalled(); }",2ea860c0a5eb70fc583c375534e79730c5d9c037,testInstall_withMissingBundleVersionFile(),402048,124,123
305190,ojluni_src_main_java_java_lang_invoke_Transformers.java,29.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.lang.Object doubleArray(dalvik.system.EmulatedStackFrame.StackFrameReader reader, java.lang.Class<?>[] ptypes, int offset, int length) { double[] arityArray = new double[length]; for (int i = 0; i < length; ++i) { java.lang.Class<?> argumentType = ptypes[(i + offset)]; switch (sun.invoke.util.Wrapper.basicTypeChar(argumentType)) { case 'D' : { arityArray[i] = reader.nextDouble(); break; } case 'F' : { arityArray[i] = reader.nextFloat(); break; } case 'J' : { arityArray[i] = reader.nextLong(); break; } case 'I' : { arityArray[i] = reader.nextInt(); break; } case 'S' : { arityArray[i] = reader.nextShort(); break; } case 'B' : { arityArray[i] = reader.nextByte(); break; } default : { arityArray[i] = ((double) (reader.nextReference(argumentType))); break; } } } return arityArray; }",7c0276e085a9424684aaba42961005e214599d5a,,"doubleArray(dalvik.system.EmulatedStackFrame.StackFrameReader,java.lang.Class[],int,int)",5,3,"private static java.lang.Object doubleArray(dalvik.system.EmulatedStackFrame.StackFrameReader reader, java.lang.Class<?>[] ptypes, int offset, int length) { double[] arityArray = new double[length]; for (int i = 0; i < length; ++i) { java.lang.Class<?> argumentType = ptypes[(i + offset)]; switch (sun.invoke.util.Wrapper.basicTypeChar(argumentType)) { case 'D' : { arityArray[i] = reader.nextDouble(); break; } case 'F' : { arityArray[i] = reader.nextFloat(); break; } case 'J' : { arityArray[i] = reader.nextLong(); break; } case 'I' : { arityArray[i] = reader.nextInt(); break; } case 'S' : { arityArray[i] = reader.nextShort(); break; } case 'B' : { arityArray[i] = reader.nextByte(); break; } default : { arityArray[i] = ((java.lang.Double) (reader.nextReference(argumentType))); break; } } } return arityArray; }",0c03c37b20b0b22af90c3b8cf0c1405467d2d4f7,"doubleArray(dalvik.system.EmulatedStackFrame.StackFrameReader,java.lang.Class[],int,int)",383856,270,274
96518,build-system_builder_src_main_java_com_android_builder_core_DefaultProductFlavor.java,7.0,"@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add(""name"", mName).add(""minSdkVersion"", mMinSdkVersion).add(""targetSdkVersion"", mTargetSdkVersion).add(""renderscriptTargetApi"", mRenderscriptTargetApi).add(""renderscriptSupportMode"", mRenderscriptSupportMode).add(""renderscriptNdkMode"", mRenderscriptNdkMode).add(""versionCode"", mVersionCode).add(""versionName"", mVersionName).add(""packageName"", mPackageName).add(""testPackageName"", mTestPackageName).add(""testInstrumentationRunner"", mTestInstrumentationRunner).add(""testHandleProfiling"", mTestHandleProfiling).add(""testFunctionalTest"", mTestFunctionalTest).add(""signingConfig"", mSigningConfig).add(""resConfig"", mResourceConfiguration).toString(); }",6bba2ff30f50592754bc5fa0d6e737d3a0e44259,"@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add(""name"", mName).add(""minSdkVersion"", mMinSdkVersion).add(""targetSdkVersion"", mTargetSdkVersion).add(""renderscriptTargetApi"", mRenderscriptTargetApi).add(""renderscriptSupportMode"", mRenderscriptSupportMode).add(""renderscriptNdkMode"", mRenderscriptNdkMode).add(""versionCode"", mVersionCode).add(""versionName"", mVersionName).add(""applicationId"", mApplicationId).add(""testPackageName"", mTestApplicationId).add(""testInstrumentationRunner"", mTestInstrumentationRunner).add(""testHandleProfiling"", mTestHandleProfiling).add(""testFunctionalTest"", mTestFunctionalTest).add(""signingConfig"", mSigningConfig).add(""resConfig"", mResourceConfiguration).toString(); }",a4c05547368ccb292614f2a5f47e3cf82f0d0435,toString(),toString(),3,7,"@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add(""name"", mName).add(""minSdkVersion"", mMinSdkVersion).add(""targetSdkVersion"", mTargetSdkVersion).add(""renderscriptTargetApi"", mRenderscriptTargetApi).add(""renderscriptSupportMode"", mRenderscriptSupportMode).add(""renderscriptNdkMode"", mRenderscriptNdkMode).add(""versionCode"", mVersionCode).add(""versionName"", mVersionName).add(""applicationId"", mApplicationId).add(""testApplicationId"", mTestApplicationId).add(""testInstrumentationRunner"", mTestInstrumentationRunner).add(""testHandleProfiling"", mTestHandleProfiling).add(""testFunctionalTest"", mTestFunctionalTest).add(""signingConfig"", mSigningConfig).add(""resConfig"", mResourceConfiguration).toString(); }",090dfc5f312a404a0bde1a411b27d55fe4c56331,toString(),376133,195,196
111082,build-system_builder_src_test_java_com_android_builder_internal_compiler_PreDexCacheTest.java,5.0,"@java.lang.Override public void run() { try { java.io.File output = java.io.File.createTempFile(""predex"", "".jar""); output.deleteOnExit(); outputFiles[ii] = output; com.android.builder.internal.compiler.PreDexCache.getCache().preDexLibrary(input, output, dexOptions, mBuildToolInfo, false, (ii == 0 ? clrWithError : clr)); } catch (java.lang.Exception ignored) { } threadDoneCount.incrementAndGet(); }",cc646995fd9be1ebd1af50bd5e31373cef3a8fe0,"@java.lang.Override public void run() { try { java.io.File output = java.io.File.createTempFile(""predex"", "".jar""); output.deleteOnExit(); outputFiles[ii] = output; com.android.builder.internal.compiler.PreDexCache.getCache().preDexLibrary(mDxExe, input, output, dexOptions, mBuildToolInfo, false, (ii == 0 ? clrWithError : clr)); } catch (java.lang.Exception ignored) { } threadDoneCount.incrementAndGet(); }",6cb1d81cb225aa63d2544f642c109e59c737073b,run(),run(),8,5,"@java.lang.Override public void run() { try { java.io.File output = java.io.File.createTempFile(""predex"", "".jar""); output.deleteOnExit(); outputFiles[ii] = output; com.android.builder.internal.compiler.PreDexCache.getCache().preDexLibrary(input, output, false, dexOptions, mBuildToolInfo, false, (ii == 0 ? clrWithError : clr)); } catch (java.lang.Exception ignored) { } threadDoneCount.incrementAndGet(); }",e7dd9495b40fd012534caceedf8b4d7f671bef7b,run(),465061,120,117
163491,src_test_java_org_conscrypt_OpenSSLX509CertificateTest.java,,,,"public void test_deleteExtension() throws java.lang.Exception { org.conscrypt.OpenSSLX509Certificate preCert = loadTestCertificate(""test-embedded-pre-cert.pem""); org.conscrypt.OpenSSLX509Certificate finalCert = loadTestCertificate(""test-embedded-cert.pem""); org.conscrypt.TestUtils.assertEqualByteArrays(preCert.deleteExtension(org.conscrypt.OpenSSLX509CertificateTest.CT_POISON_EXTENSION).getTBSCertificate(), finalCert.deleteExtension(org.conscrypt.OpenSSLX509CertificateTest.CT_SCTLIST_EXTENSION).getTBSCertificate()); }",d88305633337b8d9078ea5516ff73a3d05945eab,,test_deleteExtension(),10,3,"public void test_deletingMissingExtension() throws java.lang.Exception { org.conscrypt.OpenSSLX509Certificate cert = loadTestCertificate(""cert.pem""); assertFalse(cert.getCriticalExtensionOIDs().contains(org.conscrypt.OpenSSLX509CertificateTest.CT_POISON_EXTENSION)); org.conscrypt.OpenSSLX509Certificate cert2 = cert.withDeletedExtension(org.conscrypt.OpenSSLX509CertificateTest.CT_POISON_EXTENSION); assertEquals(cert, cert2); }",90375f9428fcf6222de31459512719a496c22722,test_deletingMissingExtension(),48412,146,118
49484,hierarchyviewer2_libs_hierarchyviewerlib_src_com_android_hierarchyviewerlib_models_DeviceSelectionModel.java,12.0,"public void addDevice(com.android.ddmlib.IDevice device, com.android.hierarchyviewerlib.device.Window[] windows, com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo info) { synchronized(mDeviceMap) { mDeviceMap.put(device, new com.android.hierarchyviewerlib.models.DeviceSelectionModel.DeviceInfo(windows, info)); mDeviceList.add(device); } notifyDeviceConnected(device); }",dd26e82a9c5f5c3bcb974390e4924020d46b6857,"public void addDevice(com.android.hierarchyviewerlib.device.IHvDevice hvDevice) { synchronized(mDeviceMap) { if (mDeviceMap.containsKey(hvDevice)) { if (hvDevice.getDevice().isOnline()) { } return; } else { com.android.hierarchyviewerlib.models.DeviceSelectionModel.DeviceInfo info = new com.android.hierarchyviewerlib.models.DeviceSelectionModel.DeviceInfo(hvDevice.getWindows()); mDeviceMap.put(hvDevice, info); } } notifyDeviceConnected(hvDevice); }",7ae5b181666ee950cfdf7562ec267a648600dce5,"addDevice(com.android.ddmlib.IDevice,com.android.hierarchyviewerlib.device.Window[],com.android.hierarchyviewerlib.device.DeviceBridge.ViewServerInfo)",addDevice(com.android.hierarchyviewerlib.device.IHvDevice),7,20,"public void addDevice(com.android.hierarchyviewerlib.device.IHvDevice hvDevice) { synchronized(mDeviceMap) { com.android.hierarchyviewerlib.models.DeviceSelectionModel.DeviceInfo info = new com.android.hierarchyviewerlib.models.DeviceSelectionModel.DeviceInfo(hvDevice.getWindows()); mDeviceMap.put(hvDevice, info); } notifyDeviceConnected(hvDevice); }",bc48af6cfc594ea7597779c051187bf58d0d95ae,addDevice(com.android.hierarchyviewerlib.device.IHvDevice),76044,126,94
48401,ddms_libs_ddmlib_src_main_java_com_android_ddmlib_Client.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean startOpenGlTracing() { boolean canTraceOpenGl = mClientData.hasFeature(ClientData.FEATURE_OPENGL_TRACING); if (!canTraceOpenGl) { return false; } try { com.android.ddmlib.HandleOpenGlTracing.sendStartGlTracing(this); return true; } catch (java.io.IOException e) { com.android.ddmlib.Log.w(""ddms"", ""Start OpenGL Tracing failed""); return false; } }",272973d98e7699731cdf5858803b2186844531fc,,startOpenGlTracing(),7,18,"public boolean startOpenGlTracing() { boolean canTraceOpenGl = mClientData.hasFeature(ClientData.FEATURE_OPENGL_TRACING); if (!canTraceOpenGl) { return false; } try { com.android.ddmlib.OpenGlTraceChunkHandler.sendStartGlTracing(this); return true; } catch (java.io.IOException e) { com.android.ddmlib.Log.w(""ddms"", ""Start OpenGL Tracing failed""); return false; } }",82f9006cbb2c665e4872e3024bba0801ed8456e9,startOpenGlTracing(),214448,108,109
109570,src_com_google_gct_idea_samples_SampleBrowserStep.java,11.0,"@java.lang.Override public boolean validate() { if ((myState.get(com.google.gct.idea.samples.SampleImportWizardPath.SAMPLE_KEY)) == null) { setErrorHtml(""Please select a sample""); return false; } setErrorHtml(""""); return true; }",667eee13bc5ab613195fabdd901d0992c8f4f46b,"@java.lang.Override public boolean validate() { if ((myState.get(com.google.gct.idea.samples.SampleImportWizardPath.SAMPLE_KEY)) == null) { setErrorHtml(com.google.gct.idea.util.GctBundle.samplesMsg(""sample.browser.please.select"")); return false; } setErrorHtml(""""); return true; }",cec3de5bd8040eb036e94bff4648db2cc3caa31a,validate(),validate(),6,11,"@java.lang.Override public boolean validate() { if ((myState.get(com.google.gct.idea.samples.SampleImportWizardPath.SAMPLE_KEY)) == null) { setErrorHtml(com.google.gct.idea.util.GctBundle.message(""sample.browser.please.select"")); return false; } setErrorHtml(""""); return true; }",d4b4642b64c0e5824f83971f22b188122c915bdc,validate(),331597,85,84
66157,src_com_android_cellbroadcastreceiver_CellBroadcastAlertService.java,0.0,@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.android.cellbroadcastreceiver.CellBroadcastAlertService.MessageIdAndScope) { com.android.cellbroadcastreceiver.CellBroadcastAlertService.MessageIdAndScope other = ((com.android.cellbroadcastreceiver.CellBroadcastAlertService.MessageIdAndScope) (o)); return ((mMessageId) == (other.mMessageId)) && (mLocation.equals(other.mLocation)); } return false; },fbc5de3553c361f0dc72f9e314c4bb0c43392709,@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.android.cellbroadcastreceiver.CellBroadcastAlertService.MessageIdAndScope) { com.android.cellbroadcastreceiver.CellBroadcastAlertService.MessageIdAndScope other = ((com.android.cellbroadcastreceiver.CellBroadcastAlertService.MessageIdAndScope) (o)); return (((mMessageId) == (other.mMessageId)) && ((mSerialNumber) == (other.mSerialNumber))) && (mLocation.equals(other.mLocation)); } return false; },a1ed1f386b1937632ae2eb3bf239e4ba9fff23da,equals(java.lang.Object),equals(java.lang.Object),5,0,@java.lang.Override public boolean equals(java.lang.Object o) { if (o == (this)) { return true; } if (o instanceof com.android.cellbroadcastreceiver.CellBroadcastAlertService.MessageServiceCategoryAndScope) { com.android.cellbroadcastreceiver.CellBroadcastAlertService.MessageServiceCategoryAndScope other = ((com.android.cellbroadcastreceiver.CellBroadcastAlertService.MessageServiceCategoryAndScope) (o)); return (((mServiceCategory) == (other.mServiceCategory)) && ((mSerialNumber) == (other.mSerialNumber))) && (mLocation.equals(other.mLocation)); } return false; },28623b985dd2194147b1f63ec6e5eba9473f7e18,equals(java.lang.Object),489211,140,143
321355,tests_tests_telephony_src_android_telephony_cts_TelephonyManagerTest.java,23.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testGetImei() { java.lang.String imei = mTelephonyManager.getImei(); verifyImei(imei, mTelephonyManager.getDeviceId()); }",856144806335278895e015ddd1b99192f5ce8822,,testGetImei(),5,9,"@org.junit.Test public void testGetImei() { java.lang.String imei = mTelephonyManager.getImei(); if (((mTelephonyManager.getSimState()) == (android.telephony.TelephonyManager.SIM_STATE_ABSENT)) && (imei == null)) { return; } verifyImei(imei, mTelephonyManager.getDeviceId()); }",b58ee30a2086e6588190b6a2dc85811b8d71a1e0,testGetImei(),122165,47,83
91995,luni_src_main_java_android_os_Os.java,,,,"public static void kill(int pid, int signal) throws android.os.ErrnoException { Libcore.os.kill(pid, signal); }",ab1be05e9fd56610a2b8458d436c033b736df835,,"kill(int,int)",3,29,"public static void kill(int pid, int signal) throws android.system.ErrnoException { Libcore.os.kill(pid, signal); }",41aeb71a8a3429e6437854dc93c18dacec66f2ff,"kill(int,int)",170032,33,33
97181,sdklib_src_main_java_com_android_sdklib_io_FileOp.java,17.0,"@java.lang.Override @com.android.annotations.NonNull @java.lang.SuppressWarnings(""deprecation"") public java.util.Properties loadProperties(@com.android.annotations.NonNull java.io.File file) { java.util.Properties props = new java.util.Properties(); java.io.FileInputStream fis = null; try { fis = new java.io.FileInputStream(file); props.load(fis); } catch (java.io.IOException ignore) { } finally { com.google.common.io.Closeables.closeQuietly(fis); } return props; }",67c7b02523a0f1e0f453fcc9958a130671f681a3,"@java.lang.Override @com.android.annotations.NonNull @java.lang.SuppressWarnings(""deprecation"") public java.util.Properties loadProperties(@com.android.annotations.NonNull java.io.File file) { java.util.Properties props = new java.util.Properties(); com.google.common.io.Closer closer = com.google.common.io.Closer.create(); try { java.io.FileInputStream fis = closer.register(new java.io.FileInputStream(file)); props.load(fis); } catch (java.io.IOException ignore) { } finally { try { closer.close(); } catch (java.io.IOException e) { } } return props; }",509b5184e944f8c638ce2d13c90e387eb4f6cd68,loadProperties(java.io.File),loadProperties(java.io.File),7,17,@java.lang.Override @com.android.annotations.NonNull public java.util.Properties loadProperties(@com.android.annotations.NonNull java.io.File file) { java.util.Properties props = new java.util.Properties(); com.google.common.io.Closer closer = com.google.common.io.Closer.create(); try { java.io.FileInputStream fis = closer.register(new java.io.FileInputStream(file)); props.load(fis); } catch (java.io.IOException ignore) { } finally { try { closer.close(); } catch (java.io.IOException e) { } } return props; },fc3f76d024854abdf5b013a8e2f7f2dd6961c117,loadProperties(java.io.File),35037,151,142
153671,sdklib_src_test_java_com_android_sdklib_repository_descriptors_PkgDescTest.java,1.0,"public final void testPkgDescBuildTool_Preview() { com.android.sdklib.repository.descriptors.IPkgDesc p = PkgDesc.Builder.newBuildTool(new com.android.sdklib.repository.FullRevision(1, 2, 3, 4)).create(); assertEquals(PkgType.PKG_BUILD_TOOLS, p.getType()); assertTrue(p.hasFullRevision()); assertEquals(new com.android.sdklib.repository.FullRevision(1, 2, 3, 4), p.getFullRevision()); assertTrue(p.getFullRevision().isPreview()); assertFalse(p.hasMajorRevision()); assertNull(p.getMajorRevision()); assertFalse(p.hasAndroidVersion()); assertNull(p.getAndroidVersion()); assertFalse(p.hasPath()); assertNull(p.getPath()); assertFalse(p.hasMinToolsRev()); assertNull(p.getMinToolsRev()); assertFalse(p.hasMinPlatformToolsRev()); assertNull(p.getMinPlatformToolsRev()); assertEquals(""build-tools-1.2.3_rc4"", p.getInstallId()); assertEquals(com.android.sdklib.io.FileOp.append(mRoot, ""build-tools"", ""build-tools-1.2.3_rc4""), p.getCanonicalInstallFolder(mRoot)); assertEquals(""<PkgDesc Type=build_tools FullRev=1.2.3 rc4>"", p.toString()); assertEquals(""Android SDK Build-Tools 1.2.3 rc4"", p.getListDescription()); }",6394d7abfa7abe62a927251cde93fbf41ea922b4,"public final void testPkgDescBuildTool_Preview() { com.android.sdklib.repository.descriptors.IPkgDesc p = PkgDesc.Builder.newBuildTool(new com.android.sdklib.repository.FullRevision(1, 2, 3, 4)).create(); assertEquals(PkgType.PKG_BUILD_TOOLS, p.getType()); assertTrue(p.hasFullRevision()); assertEquals(new com.android.sdklib.repository.FullRevision(1, 2, 3, 4), p.getFullRevision()); assertTrue(p.getFullRevision().isPreview()); assertFalse(p.hasMajorRevision()); assertNull(p.getMajorRevision()); assertFalse(p.hasAndroidVersion()); assertNull(p.getAndroidVersion()); assertFalse(p.hasPath()); assertNull(p.getPath()); assertFalse(p.hasMinToolsRev()); assertNull(p.getMinToolsRev()); assertFalse(p.hasMinPlatformToolsRev()); assertNull(p.getMinPlatformToolsRev()); assertEquals(""build-tools-1.2.3_rc4"", p.getInstallId()); assertEquals(com.android.sdklib.io.FileOp.append(mRoot, ""build-tools"", ""build-tools-1.2.3""), p.getCanonicalInstallFolder(mRoot)); assertEquals(""<PkgDesc Type=build_tools FullRev=1.2.3 rc4>"", p.toString()); assertEquals(""Android SDK Build-Tools 1.2.3 rc4"", p.getListDescription()); }",5cb6a5ba857f959b5d3b1fc52df21df6df5d6acb,testPkgDescBuildTool_Preview(),testPkgDescBuildTool_Preview(),2,1,"public final void testPkgDescBuildTool_Preview() { com.android.sdklib.repository.descriptors.IPkgDesc p = PkgDesc.Builder.newBuildTool(new com.android.sdklib.repository.FullRevision(1, 2, 3, 4)).create(); assertEquals(PkgType.PKG_BUILD_TOOLS, p.getType()); assertTrue(p.hasFullRevision()); assertEquals(new com.android.sdklib.repository.FullRevision(1, 2, 3, 4), p.getFullRevision()); assertTrue(p.getFullRevision().isPreview()); assertFalse(p.hasMajorRevision()); assertNull(p.getMajorRevision()); assertFalse(p.hasAndroidVersion()); assertNull(p.getAndroidVersion()); assertFalse(p.hasPath()); assertNull(p.getPath()); assertFalse(p.hasMinToolsRev()); assertNull(p.getMinToolsRev()); assertFalse(p.hasMinPlatformToolsRev()); assertNull(p.getMinPlatformToolsRev()); assertEquals(""build-tools-1.2.3"", p.getInstallId()); assertEquals(com.android.sdklib.io.FileOp.append(mRoot, ""build-tools"", ""build-tools-1.2.3""), p.getCanonicalInstallFolder(mRoot)); assertEquals(""<PkgDesc Type=build_tools FullRev=1.2.3 rc4>"", p.toString()); assertEquals(""Android SDK Build-Tools 1.2.3 rc4"", p.getListDescription()); }",fc45bd3bb7bbb79f8f2c00750587dab84a1d5dcb,testPkgDescBuildTool_Preview(),323735,304,302
16424,src_com_android_phone_BluetoothHandsfree.java,114.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void registerVendorSpecificCommand(java.lang.String commandName, android.bluetooth.AtParser parser) { parser.register(commandName, new com.android.phone.BluetoothHandsfree.VendorSpecificCommandHandler(commandName)); }",e30efb72310590a626d13eb1a6a4155e6fbfc7da,,"registerVendorSpecificCommand(java.lang.String,android.bluetooth.AtParser)",5,112,"private void registerVendorSpecificCommand(java.lang.String commandName, int companyId, android.bluetooth.AtParser parser) { parser.register(commandName, new com.android.phone.BluetoothHandsfree.VendorSpecificCommandHandler(commandName, companyId)); }",ffbe49d3e9351a8ec7f22236f680e11a182238ef,"registerVendorSpecificCommand(java.lang.String,int,android.bluetooth.AtParser)",109183,52,57
106033,ddmlib_src_test_java_com_android_ddmlib_BatteryFetcherTest.java,,,,"@org.junit.Test public void getBattery_badResponse() throws java.lang.Exception { com.android.ddmlib.IDevice mockDevice = org.easymock.EasyMock.createMock(com.android.ddmlib.IDevice.class); com.android.ddmlib.DeviceTest.injectShellResponse(mockDevice, ""blargh""); com.android.ddmlib.DeviceTest.injectShellResponse(mockDevice, ""blargh""); org.easymock.EasyMock.replay(mockDevice); com.android.ddmlib.BatteryFetcher fetcher = new com.android.ddmlib.BatteryFetcher(mockDevice); org.junit.Assert.assertNull(fetcher.getBattery(0, java.util.concurrent.TimeUnit.MILLISECONDS).get()); }",867e080c99528fbe511697542822d81937b05240,,getBattery_badResponse(),3,0,"@org.junit.Test(expected = java.util.concurrent.ExecutionException.class) public void getBattery_badResponse() throws java.lang.Exception { com.android.ddmlib.IDevice mockDevice = org.easymock.EasyMock.createMock(com.android.ddmlib.IDevice.class); org.easymock.EasyMock.expect(mockDevice.getSerialNumber()).andStubReturn(""serial""); com.android.ddmlib.DeviceTest.injectShellResponse(mockDevice, ""blargh""); com.android.ddmlib.DeviceTest.injectShellResponse(mockDevice, ""blargh""); org.easymock.EasyMock.replay(mockDevice); com.android.ddmlib.BatteryFetcher fetcher = new com.android.ddmlib.BatteryFetcher(mockDevice); try { fetcher.getBattery(0, java.util.concurrent.TimeUnit.MILLISECONDS).get(); } catch (java.util.concurrent.ExecutionException e) { org.junit.Assert.assertTrue(((e.getCause()) instanceof java.io.IOException)); throw e; } }",895e4e3f3937c7ae36cd4769fdc99b0218375f1b,getBattery_badResponse(),446270,173,240
178673,jack_src_com_android_jack_library_v0001_InputJackLibraryImpl.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void mergeInputLibraries(@javax.annotation.Nonnull java.util.List<? extends com.android.jack.library.InputJackLibrary> inputLibraries) { assert sectionVFS.isEmpty(); java.util.List<com.android.sched.vfs.VFS> inputLibVfsList = new java.util.ArrayList<com.android.sched.vfs.VFS>(); for (com.android.jack.library.InputLibrary inputLib : inputLibraries) { inputLibVfsList.add(((com.android.jack.library.v0001.InputJackLibraryImpl) (inputLib)).getVfs()); } if ((vfs) instanceof com.android.sched.vfs.ReadWriteZipFS) { com.android.sched.vfs.ReadWriteZipFS zipVFS = ((com.android.sched.vfs.ReadWriteZipFS) (vfs)); com.android.sched.vfs.VFS previousWorkVfs = zipVFS.getWorkVFS(); inputLibVfsList.add(0, previousWorkVfs); zipVFS.setWorkVFS(new com.android.sched.vfs.UnionVFS(inputLibVfsList)); } else { inputLibVfsList.add(0, vfs); vfs = new com.android.sched.vfs.UnionVFS(inputLibVfsList); } }",934cf29c2ba05da683f1c3b3a07c68f08187a36e,,mergeInputLibraries(java.util.List),6,3,@javax.annotation.Nonnull private static com.android.sched.vfs.VPath getSectionPath(@javax.annotation.Nonnull com.android.jack.library.FileType type) { switch (type) { case PREBUILT : return com.android.jack.library.v0001.InputJackLibraryImpl.DEX_PREFIX; case JAYCE : return com.android.jack.library.v0001.InputJackLibraryImpl.JAYCE_PREFIX; case META : return com.android.jack.library.v0001.InputJackLibraryImpl.JPP_PREFIX; case LOG : return com.android.jack.library.v0001.InputJackLibraryImpl.LOG_PREFIX; case DEPENDENCIES : return com.android.jack.library.v0001.InputJackLibraryImpl.DEPENDENCY_PREFIX; case RSC : return com.android.jack.library.v0001.InputJackLibraryImpl.RSC_PREFIX; default : throw new java.lang.AssertionError(); } },97105cef641d043d0c0fa6d48520bb48fa7f10a3,getSectionPath(com.android.jack.library.FileType),275020,279,224
300619,dx_src_com_android_jack_dx_dex_TableOfContents.java,6.0,"private void readHeader(com.android.jack.dx.io.DexBuffer.Section headerIn) { byte[] magic = headerIn.readByteArray(8); if (!(com.android.jack.dx.dex.DexFormat.isSupportedDexMagic(magic))) { throw new com.android.jack.dx.util.DexException((""Unexpected magic: "" + (java.util.Arrays.toString(magic)))); } apiLevel = com.android.jack.dx.dex.DexFormat.magicToApi(magic); checksum = headerIn.readInt(); signature = headerIn.readByteArray(20); fileSize = headerIn.readInt(); int headerSize = headerIn.readInt(); if (headerSize != (com.android.jack.dx.dex.SizeOf.getHeaderSize(apiLevel))) { throw new com.android.jack.dx.util.DexException((""Unexpected header: 0x"" + (java.lang.Integer.toHexString(headerSize)))); } int endianTag = headerIn.readInt(); if (endianTag != (DexFormat.ENDIAN_TAG)) { throw new com.android.jack.dx.util.DexException((""Unexpected endian tag: 0x"" + (java.lang.Integer.toHexString(endianTag)))); } linkSize = headerIn.readInt(); linkOff = headerIn.readInt(); mapList.off = headerIn.readInt(); if ((mapList.off) == 0) { throw new com.android.jack.dx.util.DexException(""Cannot merge dex files that do not contain a map""); } stringIds.size = headerIn.readInt(); stringIds.off = headerIn.readInt(); typeIds.size = headerIn.readInt(); typeIds.off = headerIn.readInt(); protoIds.size = headerIn.readInt(); protoIds.off = headerIn.readInt(); fieldIds.size = headerIn.readInt(); fieldIds.off = headerIn.readInt(); methodIds.size = headerIn.readInt(); methodIds.off = headerIn.readInt(); classDefs.size = headerIn.readInt(); classDefs.off = headerIn.readInt(); dataSize = headerIn.readInt(); dataOff = headerIn.readInt(); }",5c934263aae5e06288cb58395a8e9c02f10b8fc0,"private void readHeader(com.android.jack.dx.io.DexBuffer.Section headerIn) { byte[] magic = headerIn.readByteArray(8); if (!(com.android.jack.dx.dex.DexFormat.isSupportedDexMagic(magic))) { throw new com.android.jack.dx.util.DexException((""Unexpected magic: "" + (java.util.Arrays.toString(magic)))); } apiLevel = com.android.jack.dx.dex.DexFormat.magicToApi(magic); signature = headerIn.readByteArray(20); fileSize = headerIn.readInt(); int headerSize = headerIn.readInt(); if (headerSize != (com.android.jack.dx.dex.SizeOf.getHeaderSize(apiLevel))) { throw new com.android.jack.dx.util.DexException((""Unexpected header: 0x"" + (java.lang.Integer.toHexString(headerSize)))); } int endianTag = headerIn.readInt(); if (endianTag != (DexFormat.ENDIAN_TAG)) { throw new com.android.jack.dx.util.DexException((""Unexpected endian tag: 0x"" + (java.lang.Integer.toHexString(endianTag)))); } linkSize = headerIn.readInt(); linkOff = headerIn.readInt(); mapList.off = headerIn.readInt(); if ((mapList.off) == 0) { throw new com.android.jack.dx.util.DexException(""Cannot merge dex files that do not contain a map""); } stringIds.size = headerIn.readInt(); stringIds.off = headerIn.readInt(); typeIds.size = headerIn.readInt(); typeIds.off = headerIn.readInt(); protoIds.size = headerIn.readInt(); protoIds.off = headerIn.readInt(); fieldIds.size = headerIn.readInt(); fieldIds.off = headerIn.readInt(); methodIds.size = headerIn.readInt(); methodIds.off = headerIn.readInt(); classDefs.size = headerIn.readInt(); classDefs.off = headerIn.readInt(); dataSize = headerIn.readInt(); dataOff = headerIn.readInt(); }",49fa85ea5aadbe1fa1e984bba1976ff7b8bb6fc1,readHeader(com.android.jack.dx.io.DexBuffer$Section),readHeader(com.android.jack.dx.io.DexBuffer$Section),4,6,"private void readHeader(com.android.jack.dx.io.DexBuffer.Section headerIn) { byte[] magic = headerIn.readByteArray(8); if (!(com.android.jack.dx.dex.DexFormat.isSupportedDexMagic(magic))) { throw new com.android.jack.dx.util.DexException((""Unexpected magic: "" + (java.util.Arrays.toString(magic)))); } apiLevel = com.android.jack.dx.dex.DexFormat.magicToApi(magic); headerIn.readInt(); signature = headerIn.readByteArray(20); fileSize = headerIn.readInt(); int headerSize = headerIn.readInt(); if (headerSize != (com.android.jack.dx.dex.SizeOf.getHeaderSize(apiLevel))) { throw new com.android.jack.dx.util.DexException((""Unexpected header: 0x"" + (java.lang.Integer.toHexString(headerSize)))); } int endianTag = headerIn.readInt(); if (endianTag != (DexFormat.ENDIAN_TAG)) { throw new com.android.jack.dx.util.DexException((""Unexpected endian tag: 0x"" + (java.lang.Integer.toHexString(endianTag)))); } linkSize = headerIn.readInt(); linkOff = headerIn.readInt(); mapList.off = headerIn.readInt(); if ((mapList.off) == 0) { throw new com.android.jack.dx.util.DexException(""Cannot merge dex files that do not contain a map""); } stringIds.size = headerIn.readInt(); stringIds.off = headerIn.readInt(); typeIds.size = headerIn.readInt(); typeIds.off = headerIn.readInt(); protoIds.size = headerIn.readInt(); protoIds.off = headerIn.readInt(); fieldIds.size = headerIn.readInt(); fieldIds.off = headerIn.readInt(); methodIds.size = headerIn.readInt(); methodIds.off = headerIn.readInt(); classDefs.size = headerIn.readInt(); classDefs.off = headerIn.readInt(); dataSize = headerIn.readInt(); dataOff = headerIn.readInt(); }",3205edf868e97c22219d73ab60ca4bb566746bc1,readHeader(com.android.jack.dx.io.DexBuffer$Section),288529,460,465
91995,luni_src_main_java_android_os_Os.java,,,,"public static android.os.StructTimeval getsockoptTimeval(java.io.FileDescriptor fd, int level, int option) throws android.os.ErrnoException { return Libcore.os.getsockoptTimeval(fd, level, option); }",24151623983957b3e053b66230998bde669ac74d,,"getsockoptTimeval(java.io.FileDescriptor,int,int)",3,87,"public static android.system.StructTimeval getsockoptTimeval(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException { return Libcore.os.getsockoptTimeval(fd, level, option); }",b1d838ec7c0b6be3fd2fda82810f99d7e3cd8333,"getsockoptTimeval(java.io.FileDescriptor,int,int)",169985,57,57
109570,src_com_google_gct_idea_samples_SampleBrowserStep.java,15.0,"@java.lang.Override public void init() { super.init(); initSamplesTree(); register(com.google.gct.idea.samples.SampleImportWizardPath.SAMPLE_URL, myUrlField, new com.google.gct.idea.samples.ComponentBinding<java.lang.String, com.intellij.ui.HyperlinkLabel>() { @java.lang.Override public void setValue(@org.jetbrains.annotations.Nullable java.lang.String newValue, @org.jetbrains.annotations.NotNull com.intellij.ui.HyperlinkLabel component) { component.setHyperlinkTarget(newValue); newValue = (com.intellij.openapi.util.text.StringUtil.isEmpty(newValue)) ? """" : ""Browse Source""; component.setHyperlinkText(newValue); } }); register(com.google.gct.idea.samples.SampleBrowserStep.SAMPLE_SCREENSHOT, myScreenshotHtmlPanel, new com.google.gct.idea.samples.SampleBrowserStep.EditorPaneComponentBinding()); registerValueDeriver(com.google.gct.idea.samples.SampleImportWizardPath.SAMPLE_URL, new com.google.gct.idea.samples.SampleBrowserStep.SampleUrlValueDeriver()); registerValueDeriver(com.google.gct.idea.samples.SampleBrowserStep.SAMPLE_SCREENSHOT, new com.google.gct.idea.samples.SampleBrowserStep.ImageListToStringDeriver()); registerValueDeriver(com.google.gct.idea.samples.KEY_DESCRIPTION, new com.google.gct.idea.samples.SampleBrowserStep.DescriptionValueDeriver()); mySearchBox.addDocumentListener(new com.intellij.ui.DocumentAdapter() { @java.lang.Override protected void textChanged(javax.swing.event.DocumentEvent e) { try { java.lang.String keyword = e.getDocument().getText(0, e.getDocument().getLength()); mySampleTreeManager.filterTree(keyword); } catch (javax.swing.text.BadLocationException e1) { } } }); myUrlField.setOpaque(false); }",249fb1f61a699bdece2438f56c5c72aa2347ad58,"@java.lang.Override public void init() { super.init(); initSamplesTree(); register(com.google.gct.idea.samples.SampleImportWizardPath.SAMPLE_URL, myUrlField, new com.google.gct.idea.samples.ComponentBinding<java.lang.String, com.intellij.ui.HyperlinkLabel>() { @java.lang.Override public void setValue(@org.jetbrains.annotations.Nullable java.lang.String newValue, @org.jetbrains.annotations.NotNull com.intellij.ui.HyperlinkLabel component) { component.setHyperlinkTarget(newValue); newValue = (com.intellij.openapi.util.text.StringUtil.isEmpty(newValue)) ? """" : com.google.gct.idea.util.GctBundle.samplesMsg(""sample.browse.source""); component.setHyperlinkText(newValue); } }); register(com.google.gct.idea.samples.SampleBrowserStep.SAMPLE_SCREENSHOT, myScreenshotHtmlPanel, new com.google.gct.idea.samples.SampleBrowserStep.EditorPaneComponentBinding()); registerValueDeriver(com.google.gct.idea.samples.SampleImportWizardPath.SAMPLE_URL, new com.google.gct.idea.samples.SampleBrowserStep.SampleUrlValueDeriver()); registerValueDeriver(com.google.gct.idea.samples.SampleBrowserStep.SAMPLE_SCREENSHOT, new com.google.gct.idea.samples.SampleBrowserStep.ImageListToStringDeriver()); registerValueDeriver(com.google.gct.idea.samples.KEY_DESCRIPTION, new com.google.gct.idea.samples.SampleBrowserStep.DescriptionValueDeriver()); mySearchBox.addDocumentListener(new com.intellij.ui.DocumentAdapter() { @java.lang.Override protected void textChanged(javax.swing.event.DocumentEvent e) { try { java.lang.String keyword = e.getDocument().getText(0, e.getDocument().getLength()); mySampleTreeManager.filterTree(keyword); } catch (javax.swing.text.BadLocationException e1) { } } }); myUrlField.setOpaque(false); myDescriptionPanel.setBackground(com.intellij.util.ui.UIUtil.getTextFieldBackground()); }",8070922d23cb7f70083c8b411022f686eb2a9c05,init(),init(),6,15,"@java.lang.Override public void init() { super.init(); initSamplesTree(); register(com.google.gct.idea.samples.SampleImportWizardPath.SAMPLE_URL, myUrlField, new com.google.gct.idea.samples.ComponentBinding<java.lang.String, com.intellij.ui.HyperlinkLabel>() { @java.lang.Override public void setValue(@org.jetbrains.annotations.Nullable java.lang.String newValue, @org.jetbrains.annotations.NotNull com.intellij.ui.HyperlinkLabel component) { component.setHyperlinkTarget(newValue); newValue = (com.intellij.openapi.util.text.StringUtil.isEmpty(newValue)) ? """" : com.google.gct.idea.util.GctBundle.message(""sample.browse.source""); component.setHyperlinkText(newValue); } }); register(com.google.gct.idea.samples.SampleBrowserStep.SAMPLE_SCREENSHOT, myScreenshotHtmlPanel, new com.google.gct.idea.samples.SampleBrowserStep.EditorPaneComponentBinding()); registerValueDeriver(com.google.gct.idea.samples.SampleImportWizardPath.SAMPLE_URL, new com.google.gct.idea.samples.SampleBrowserStep.SampleUrlValueDeriver()); registerValueDeriver(com.google.gct.idea.samples.SampleBrowserStep.SAMPLE_SCREENSHOT, new com.google.gct.idea.samples.SampleBrowserStep.ImageListToStringDeriver()); registerValueDeriver(com.google.gct.idea.samples.KEY_DESCRIPTION, new com.google.gct.idea.samples.SampleBrowserStep.DescriptionValueDeriver()); mySearchBox.addDocumentListener(new com.intellij.ui.DocumentAdapter() { @java.lang.Override protected void textChanged(javax.swing.event.DocumentEvent e) { try { java.lang.String keyword = e.getDocument().getText(0, e.getDocument().getLength()); mySampleTreeManager.filterTree(keyword); } catch (javax.swing.text.BadLocationException e1) { } } }); myUrlField.setOpaque(false); myDescriptionPanel.setBackground(com.intellij.util.ui.UIUtil.getTextFieldBackground()); }",b3f223041703c1d3867f2bcb3885e9c33c171592,init(),331595,487,486
54744,luni_src_main_java_java_nio_CharArrayBuffer.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static java.nio.CharArrayBuffer copy(java.nio.CharArrayBuffer other, int markOfOther, boolean isReadOnly) { java.nio.CharArrayBuffer buf = new java.nio.CharArrayBuffer(other.capacity(), other.backingArray, other.arrayOffset, isReadOnly); buf.limit = other.limit; buf.position = other.position(); buf.mark = markOfOther; return buf; }",315610d3ceae5b0a82703ed0ea61f71f60e1b630,,"copy(java.nio.CharArrayBuffer,int,boolean)",6,16,"private static java.nio.CharArrayBuffer copy(java.nio.CharArrayBuffer other, int markOfOther, boolean isReadOnly) { java.nio.CharArrayBuffer buf = new java.nio.CharArrayBuffer(other.capacity(), other.backingArray, other.arrayOffset, isReadOnly); buf.limit = other.limit; buf.position = other.position(); buf.mark = markOfOther; return buf; }",e16850a7c2eb0b23127488af8e748242a7aeb3b0,"copy(java.nio.CharArrayBuffer,int,boolean)",358568,88,89
124979,luni_src_main_java_java_util_zip_Zip64.java,,,,"public static java.util.zip.ZipFile.EocdRecord parseZip64EocdRecord(java.io.RandomAccessFile raf, long eocdRecordOffset, int commentLength) throws java.io.IOException { raf.seek(eocdRecordOffset); final int signature = java.lang.Integer.reverseBytes(raf.readInt()); if (signature != (java.util.zip.Zip64.ZIP64_EOCD_RECORD_SIGNATURE)) { throw new java.util.zip.ZipException((""Invalid zip64 eocd record offset, sig="" + (java.lang.Integer.toHexString(signature)))); } raf.skipBytes(12); byte[] zip64Eocd = new byte[java.util.zip.Zip64.ZIP64_EOCD_RECORD_EFFECTIVE_SIZE]; raf.readFully(zip64Eocd); java.nio.ByteBuffer buf = java.nio.ByteBuffer.wrap(zip64Eocd).order(java.nio.ByteOrder.LITTLE_ENDIAN); int diskNumber = buf.getInt(); int diskWithCentralDirStart = buf.getInt(); long numEntries = buf.getLong(); long totalNumEntries = buf.getLong(); buf.getLong(); long centralDirOffset = buf.getLong(); if (((numEntries != totalNumEntries) || (diskNumber != 0)) || (diskWithCentralDirStart != 0)) { throw new java.util.zip.ZipException(""Spanned archives not supported""); } return new java.util.zip.ZipFile.EocdRecord(numEntries, centralDirOffset, commentLength); }",96b8a334503ffbb34f06d5d1b6e5a6f2ccb99526,,"parseZip64EocdRecord(java.io.RandomAccessFile,long,int)",10,5,"public static java.util.zip.ZipFile.EocdRecord parseZip64EocdRecord(java.io.RandomAccessFile raf, long eocdRecordOffset, int commentLength) throws java.io.IOException { raf.seek(eocdRecordOffset); final int signature = java.lang.Integer.reverseBytes(raf.readInt()); if (signature != (java.util.zip.Zip64.ZIP64_EOCD_RECORD_SIGNATURE)) { throw new java.util.zip.ZipException((((""Invalid zip64 eocd record offset, sig="" + (java.lang.Integer.toHexString(signature))) + "" offset="") + eocdRecordOffset)); } raf.skipBytes(12); byte[] zip64Eocd = new byte[java.util.zip.Zip64.ZIP64_EOCD_RECORD_EFFECTIVE_SIZE]; raf.readFully(zip64Eocd); java.nio.ByteBuffer buf = java.nio.ByteBuffer.wrap(zip64Eocd).order(java.nio.ByteOrder.LITTLE_ENDIAN); try { int diskNumber = buf.getInt(); int diskWithCentralDirStart = buf.getInt(); long numEntries = buf.getLong(); long totalNumEntries = buf.getLong(); buf.getLong(); long centralDirOffset = buf.getLong(); if (((numEntries != totalNumEntries) || (diskNumber != 0)) || (diskWithCentralDirStart != 0)) { throw new java.util.zip.ZipException(((((((((""Spanned archives not supported :"" + "" numEntries="") + numEntries) + "", totalNumEntries="") + totalNumEntries) + "", diskNumber="") + diskNumber) + "", diskWithCentralDirStart="") + diskWithCentralDirStart)); } return new java.util.zip.ZipFile.EocdRecord(numEntries, centralDirOffset, commentLength); } catch (java.nio.BufferUnderflowException bue) { java.util.zip.ZipException zipException = new java.util.zip.ZipException(""Error parsing zip64 eocd record.""); zipException.initCause(bue); throw zipException; } }",2c8d426f5a5d6dd1ec28ee1c8cd470013f996622,"parseZip64EocdRecord(java.io.RandomAccessFile,long,int)",504663,347,479
577169,telephony_java_android_telephony_SignalStrength.java,8.0,"public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mLteRsrpBoost); out.writeInt(mTdScdmaRscp); out.writeInt((isGsm ? 1 : 0)); out.writeInt((mUseOnlyRsrpForLteLevel ? 1 : 0)); }",af60b3b23d7d8f16b6b73fdee661ff65df1a7bb1,"public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mUmtsRscp); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mLteRsrpBoost); out.writeInt(mTdScdmaRscp); out.writeInt((isGsm ? 1 : 0)); out.writeInt((mUseOnlyRsrpForLteLevel ? 1 : 0)); for (int i = 0; i < (android.telephony.SignalStrength.UMTS_RSCP_THRESHOLDS_NUM); i++) { out.writeInt(mUmtsRscpThresholds[i]); } }",3176813e7a27883e967d825c9d6b34373fadcfb8,"writeToParcel(android.os.Parcel,int)","writeToParcel(android.os.Parcel,int)",10,9,"public void writeToParcel(android.os.Parcel out, int flags) { out.writeInt(mGsmSignalStrength); out.writeInt(mGsmBitErrorRate); out.writeInt(mCdmaDbm); out.writeInt(mCdmaEcio); out.writeInt(mEvdoDbm); out.writeInt(mEvdoEcio); out.writeInt(mEvdoSnr); out.writeInt(mLteSignalStrength); out.writeInt(mLteRsrp); out.writeInt(mLteRsrq); out.writeInt(mLteRssnr); out.writeInt(mLteCqi); out.writeInt(mTdScdmaRscp); out.writeInt(mWcdmaSignalStrength); out.writeInt(mWcdmaRscpAsu); out.writeInt(mWcdmaRscp); out.writeInt(mLteRsrpBoost); out.writeBoolean(mIsGsm); out.writeBoolean(mUseOnlyRsrpForLteLevel); out.writeString(mWcdmaDefaultSignalMeasurement); out.writeIntArray(mLteRsrpThresholds); out.writeIntArray(mWcdmaRscpThresholds); }",eed9adc8fbabafef82cc84a6ae0fc6ffe4833aa5,"writeToParcel(android.os.Parcel,int)",23525,267,277
91995,luni_src_main_java_libcore_io_Posix.java,36.0,"public int write(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws java.io.InterruptedIOException, libcore.io.ErrnoException { return writeBytes(fd, bytes, byteOffset, byteCount); }",611372903d3162bb918610f2c00cadb47773fa20,"public int write(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws android.os.ErrnoException, java.io.InterruptedIOException { return writeBytes(fd, bytes, byteOffset, byteCount); }",882e5a9701dddfbb066113818d9890d51395b83d,"write(java.io.FileDescriptor,byte[],int,int)","write(java.io.FileDescriptor,byte[],int,int)",3,35,"public int write(java.io.FileDescriptor fd, byte[] bytes, int byteOffset, int byteCount) throws android.system.ErrnoException, java.io.InterruptedIOException { return writeBytes(fd, bytes, byteOffset, byteCount); }",8a0dad2b714f57a26de870cd36abb9f19d481e4b,"write(java.io.FileDescriptor,byte[],int,int)",169931,54,54
91995,luni_src_main_java_libcore_io_ForwardingOs.java,35.0,"public void mlock(long address, long byteCount) throws libcore.io.ErrnoException { os.mlock(address, byteCount); }",b2b97e7e00060691d12fcb4d91e77cb26aa3c88d,"public void mlock(long address, long byteCount) throws android.os.ErrnoException { os.mlock(address, byteCount); }",374027197ad5c74383150569cfa377446c627e45,"mlock(long,long)","mlock(long,long)",3,34,"public void mlock(long address, long byteCount) throws android.system.ErrnoException { os.mlock(address, byteCount); }",9117df2444f68fe1bfe45c5d71d033e0d0bd52d5,"mlock(long,long)",170517,32,32
73670,harmony-tests_src_test_java_org_apache_harmony_tests_java_nio_channels_DatagramChannelTest.java,119.0,"public void testReceiveSend_Block_Oversize_S2C() throws java.lang.Exception { this.channel1.socket().bind(localAddr2); sendByDatagramSocket(""0123456789"", localAddr2); receiveByChannel(5, localAddr2, ""01234""); }",bd871de71c5cdf32958c3c1534d881a54dfe2d45,"public void testReceiveSend_Block_Oversize_S2C() throws java.lang.Exception { this.channel1.socket().bind(datagramSocket2Address); sendByDatagramSocket(""0123456789"", datagramSocket2Address); receiveOnChannel1AndClose(5, datagramSocket2Address, ""01234""); }",a5b4014bfa30ecddd846b016cea0cd61156c102d,testReceiveSend_Block_Oversize_S2C(),testReceiveSend_Block_Oversize_S2C(),2,117,"public void testReceiveSend_Block_Oversize_S2C() throws java.lang.Exception { sendOnDatagramSocket1(""0123456789"", channel1Address); receiveOnChannel1AndClose(5, datagramSocket1Address, ""01234""); }",0d7cb0c9727159b56265be84a8729670d8d3fa9d,testReceiveSend_Block_Oversize_S2C(),95794,64,50
318785,jack_src_com_android_jack_backend_dex_rop_RopBuilderVisitor.java,47.0,"private void buildAlloc(@javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec destReg, @javax.annotation.Nonnull com.android.jack.ir.ast.JAlloc alloc, @javax.annotation.Nonnull com.android.jack.dx.rop.code.SourcePosition sourcePosition) { com.android.jack.dx.rop.cst.CstType type = com.android.jack.backend.dex.rop.RopHelper.getCstType(alloc.getInstanceType()); com.android.jack.dx.rop.code.Rop rop = com.android.jack.dx.rop.code.Rops.NEW_INSTANCE; addInstruction(new com.android.jack.dx.rop.code.ThrowingCstInsn(rop, sourcePosition, com.android.jack.dx.rop.code.RegisterSpecList.EMPTY, getCatchTypes(), type)); addMoveResultPseudoAsExtraInstruction(destReg, sourcePosition); }",4bbf3ee2c3843ae2b493234f50f40f18ac81e60b,"private void buildAlloc(@javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec destReg, @javax.annotation.Nonnull com.android.jack.ir.ast.JAlloc alloc, @javax.annotation.Nonnull com.android.jack.dx.rop.code.SourcePosition sourcePosition) { com.android.jack.dx.rop.type.Type type = com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx(alloc.getInstanceType()); com.android.jack.dx.rop.code.Rop rop = com.android.jack.dx.rop.code.Rops.NEW_INSTANCE; addInstruction(new com.android.jack.dx.rop.code.ThrowingCstInsn(rop, sourcePosition, com.android.jack.dx.rop.code.RegisterSpecList.EMPTY, getCatchTypes(), type)); addMoveResultPseudoAsExtraInstruction(destReg, sourcePosition); }",3b5438af4735926d98739f52874c100af68a68b6,"buildAlloc(com.android.jack.dx.rop.code.RegisterSpec,com.android.jack.ir.ast.JAlloc,com.android.jack.dx.rop.code.SourcePosition)","buildAlloc(com.android.jack.dx.rop.code.RegisterSpec,com.android.jack.ir.ast.JAlloc,com.android.jack.dx.rop.code.SourcePosition)",4,48,"private void buildAlloc(@javax.annotation.Nonnull com.android.jack.dx.rop.code.RegisterSpec destReg, @javax.annotation.Nonnull com.android.jack.ir.ast.JAlloc alloc, @javax.annotation.Nonnull com.android.jack.dx.rop.code.SourcePosition sourcePosition) { addInstruction(new com.android.jack.dx.rop.code.ThrowingCstInsn(com.android.jack.dx.rop.code.Rops.NEW_INSTANCE, sourcePosition, com.android.jack.dx.rop.code.RegisterSpecList.EMPTY, getCatchTypes(), com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx(alloc.getInstanceType()))); addMoveResultPseudoAsExtraInstruction(destReg, sourcePosition); }",82b852be269f9ade7b7bbbdbe4bb56f6a45fff36,"buildAlloc(com.android.jack.dx.rop.code.RegisterSpec,com.android.jack.ir.ast.JAlloc,com.android.jack.dx.rop.code.SourcePosition)",439865,224,185
253791,luni_src_main_java_libcore_io_Os.java,37.0,"public void posix_fallocate(java.io.FileDescriptor fd, long offset, long length) throws android.system.ErrnoException;",f86b9241bba19fbcfdf5473476b61e89a87dc950,"public void posix_fallocate(java.io.FileDescriptor fd, long offset, long length) throws libcore.io.ErrnoException;",857d8fd6ca10d6609d8e598f74a8a0657a3728eb,"posix_fallocate(java.io.FileDescriptor,long,long)","posix_fallocate(java.io.FileDescriptor,long,long)",8,35,"public void posix_fallocate(java.io.FileDescriptor fd, long offset, long length) throws android.system.ErrnoException;",f86b9241bba19fbcfdf5473476b61e89a87dc950,"posix_fallocate(java.io.FileDescriptor,long,long)",494685,31,30
41115,src_java_com_android_internal_telephony_UiccCardApplication.java,,,,"public void registerForLocked(android.os.Handler h, int what, java.lang.Object obj) { android.os.Registrant r = new android.os.Registrant(h, what, obj); mPinLockedRegistrants.add(r); notifyPinLockedRegistrantsIfNeeded(r); }",da574fb709e25b31b7b886e76cba6a809dbd1ee4,,"registerForLocked(android.os.Handler,int,java.lang.Object)",22,20,"public void registerForLocked(android.os.Handler h, int what, java.lang.Object obj) { synchronized(mLock) { android.os.Registrant r = new android.os.Registrant(h, what, obj); mPinLockedRegistrants.add(r); notifyPinLockedRegistrantsIfNeeded(r); } }",fc0ee454d96dcc2ecc460b0eecdeaf425e19bfb4,"registerForLocked(android.os.Handler,int,java.lang.Object)",499288,68,75
127845,v8_renderscript_java_src_android_support_v8_renderscript_RenderScript.java,138.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"synchronized void nIncScriptSetVarF(long id, int slot, float val) { validate(); rsnIncScriptSetVarF(mContext, id, slot, val); }",60c5808f7aa7d95095e5f592bec4c9797f50f25f,,"nIncScriptSetVarF(long,int,float)",8,125,synchronized void nIncContextFinish() { validate(); rsnIncContextFinish(mIncCon); },66504225003d66be4ed16477e1a6a7f33fb3896d,nIncContextFinish(),314489,38,21
35572,sdkmanager_libs_sdklib_tests_src_com_android_sdklib_internal_repository_packages_PreviewVersionTest.java,,,,"public final void testPreviewVersion() { com.android.sdklib.internal.repository.packages.PreviewVersion p = new com.android.sdklib.internal.repository.packages.PreviewVersion(5); assertEquals(5, p.getMajor()); assertEquals(PreviewVersion.IMPLICIT_MINOR_REV, p.getMinor()); assertEquals(PreviewVersion.IMPLICIT_MICRO_REV, p.getMicro()); assertEquals(PreviewVersion.PREVIEW_NOT_SPECIFIED, p.getPreview()); assertFalse(p.isPreview()); p = new com.android.sdklib.internal.repository.packages.PreviewVersion(6, 7, 8); assertEquals(6, p.getMajor()); assertEquals(7, p.getMinor()); assertEquals(8, p.getMicro()); assertEquals(0, p.getPreview()); assertFalse(p.isPreview()); p = new com.android.sdklib.internal.repository.packages.PreviewVersion(10, 11, 12, PreviewVersion.PREVIEW_NOT_SPECIFIED); assertEquals(10, p.getMajor()); assertEquals(11, p.getMinor()); assertEquals(12, p.getMicro()); assertEquals(0, p.getPreview()); assertFalse(p.isPreview()); p = new com.android.sdklib.internal.repository.packages.PreviewVersion(10, 11, 12, 13); assertEquals(10, p.getMajor()); assertEquals(11, p.getMinor()); assertEquals(12, p.getMicro()); assertEquals(13, p.getPreview()); assertTrue(p.isPreview()); }",197bb0d9ddce6162f3abf51a6808cfa968a02593,,testPreviewVersion(),5,0,"public final void testPreviewVersion() { com.android.sdklib.internal.repository.packages.PreviewVersion p = new com.android.sdklib.internal.repository.packages.PreviewVersion(5); assertEquals(5, p.getMajor()); assertEquals(PreviewVersion.IMPLICIT_MINOR_REV, p.getMinor()); assertEquals(PreviewVersion.IMPLICIT_MICRO_REV, p.getMicro()); assertEquals(PreviewVersion.NOT_A_PREVIEW, p.getPreview()); assertFalse(p.isPreview()); assertEquals(""5"", p.toShortString()); assertEquals(""5.0.0"", p.toString()); p = new com.android.sdklib.internal.repository.packages.PreviewVersion(5, 0, 0, 6); assertEquals(5, p.getMajor()); assertEquals(PreviewVersion.IMPLICIT_MINOR_REV, p.getMinor()); assertEquals(PreviewVersion.IMPLICIT_MICRO_REV, p.getMicro()); assertEquals(6, p.getPreview()); assertTrue(p.isPreview()); assertEquals(""5 rc6"", p.toShortString()); assertEquals(""5.0.0 rc6"", p.toString()); p = new com.android.sdklib.internal.repository.packages.PreviewVersion(6, 7, 0); assertEquals(6, p.getMajor()); assertEquals(7, p.getMinor()); assertEquals(0, p.getMicro()); assertEquals(0, p.getPreview()); assertFalse(p.isPreview()); assertEquals(""6.7"", p.toShortString()); assertEquals(""6.7.0"", p.toString()); p = new com.android.sdklib.internal.repository.packages.PreviewVersion(10, 11, 12, PreviewVersion.NOT_A_PREVIEW); assertEquals(10, p.getMajor()); assertEquals(11, p.getMinor()); assertEquals(12, p.getMicro()); assertEquals(0, p.getPreview()); assertFalse(p.isPreview()); assertEquals(""10.11.12"", p.toShortString()); assertEquals(""10.11.12"", p.toString()); p = new com.android.sdklib.internal.repository.packages.PreviewVersion(10, 11, 12, 13); assertEquals(10, p.getMajor()); assertEquals(11, p.getMinor()); assertEquals(12, p.getMicro()); assertEquals(13, p.getPreview()); assertTrue(p.isPreview()); assertEquals(""10.11.12 rc13"", p.toShortString()); assertEquals(""10.11.12 rc13"", p.toString()); }",987c773bcbc23da7022e513596e6c7989ad2e968,testPreviewVersion(),77065,305,487
281492,service_java_com_android_server_wifi_WifiStateMachinePrime.java,10.0,"private boolean checkForAndHandleModeChange(android.os.Message message) { switch (message.what) { case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_START_CLIENT_MODE : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, ((""Switching from "" + (getCurrentMode())) + "" to ClientMode"")); mModeStateMachine.transitionTo(mClientModeState); break; case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_START_SCAN_ONLY_MODE : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, ((""Switching from "" + (getCurrentMode())) + "" to ScanOnlyMode"")); mModeStateMachine.transitionTo(mScanOnlyModeState); break; case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_START_SOFT_AP_MODE : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, ((""Switching from "" + (getCurrentMode())) + "" to SoftApMode"")); mModeStateMachine.transitionTo(mSoftAPModeState); break; case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_DISABLE_WIFI : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, (""disabling wifi, calling exit on "" + (getCurrentMode()))); mModeStateMachine.getCurrentState().exit(); tearDownInterfaces(); mModeStateMachine.quit(); mModeStateMachine = null; break; default : return false; } return true; }",49d339260633bb4e61537857c28e6a6648a740e9,"private boolean checkForAndHandleModeChange(android.os.Message message) { switch (message.what) { case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_START_CLIENT_MODE : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, ((""Switching from "" + (getCurrentMode())) + "" to ClientMode"")); mModeStateMachine.transitionTo(mClientModeState); break; case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_START_SCAN_ONLY_MODE : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, ((""Switching from "" + (getCurrentMode())) + "" to ScanOnlyMode"")); mModeStateMachine.transitionTo(mScanOnlyModeState); break; case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_START_SOFT_AP_MODE : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, ((""Switching from "" + (getCurrentMode())) + "" to SoftApMode"")); mModeStateMachine.transitionTo(mSoftAPModeState); break; case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_DISABLE_WIFI : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, (""disabling wifi, calling exit on "" + (getCurrentMode()))); mModeStateMachine.getCurrentState().exit(); tearDownInterfaces(); mModeStateMachine.quit(); mModeStateMachine = null; if (!(mApConfigQueue.isEmpty())) { android.util.Log.e(com.android.server.wifi.WifiStateMachinePrime.TAG, ""AP config queue was not empty.""); mApConfigQueue.clear(); } break; default : return false; } return true; }",0b6e09f1180dd7fe289c7382cb557be4099be21a,checkForAndHandleModeChange(android.os.Message),checkForAndHandleModeChange(android.os.Message),12,10,"private boolean checkForAndHandleModeChange(android.os.Message message) { switch (message.what) { case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_START_CLIENT_MODE : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, ((""Switching from "" + (getCurrentMode())) + "" to ClientMode"")); mModeStateMachine.transitionTo(mClientModeState); break; case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_START_SCAN_ONLY_MODE : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, ((""Switching from "" + (getCurrentMode())) + "" to ScanOnlyMode"")); mModeStateMachine.transitionTo(mScanOnlyModeState); break; case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_START_SOFT_AP_MODE : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, ((""Switching from "" + (getCurrentMode())) + "" to SoftApMode"")); mModeStateMachine.transitionTo(mSoftAPModeState); break; case com.android.server.wifi.WifiStateMachinePrime.ModeStateMachine.CMD_DISABLE_WIFI : android.util.Log.d(com.android.server.wifi.WifiStateMachinePrime.TAG, ((""Switching from "" + (getCurrentMode())) + "" to WifiDisabled"")); mModeStateMachine.transitionTo(mWifiDisabledState); break; default : return NOT_HANDLED; } return HANDLED; }",ffa34fd6446f3f00da2aa2d86e51b7816894c591,checkForAndHandleModeChange(android.os.Message),252831,416,360
158444,build-system_gradle-core_src_main_groovy_com_android_build_gradle_tasks_MergeResources.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.io.File call() throws java.lang.Exception { return new java.io.File(scope.getGlobalScope().getGeneratedDir(), ""pngs""); }",23f51d1e8ea36a3b44985394f37c040b2989f7c6,,call(),8,3,@java.lang.Override public java.lang.Boolean call() throws java.lang.Exception { return extension.getAaptOptions().getUseNewCruncher(); },2aa4cb0c6181ad8e0193f790949dde665400ba63,call(),237593,43,36
342756,src_java_com_android_internal_telephony_DeviceStateMonitor.java,,,,private boolean isDeviceCharging() { android.os.BatteryManager bm = ((android.os.BatteryManager) (mPhone.getContext().getSystemService(Context.BATTERY_SERVICE))); return bm.isCharging(); },47a5695c83715e4d4631f613c8d5edf7838558ad,,isDeviceCharging(),18,15,private boolean isDeviceCharging() { final android.os.BatteryManager bm = ((android.os.BatteryManager) (mPhone.getContext().getSystemService(Context.BATTERY_SERVICE))); return bm.isCharging(); },cf013730a8a5ada36bb8e6c5d9fc1e811686ae6c,isDeviceCharging(),507379,50,51
70742,builder-model_src_main_java_com_android_builder_model_AndroidLibrary.java,7.0,@com.android.annotations.NonNull java.util.List<? extends com.android.builder.model.AndroidLibrary> getLibraryDependencies();,48580c7c85b0bcbadb06199bfab4d1070aec9887,@com.android.annotations.NonNull java.util.Collection<? extends com.android.builder.model.AndroidLibrary> getLibraryDependencies();,fe7b0db10262f30e95458bbf930651c5e1e1288f,getLibraryDependencies(),getLibraryDependencies(),8,7,@com.android.annotations.NonNull java.util.List<? extends com.android.builder.model.AndroidLibrary> getLibraryDependencies();,48580c7c85b0bcbadb06199bfab4d1070aec9887,getLibraryDependencies(),456896,30,30
273555,luni_src_test_java_org_apache_harmony_crypto_tests_javax_crypto_interfaces_DHPublicKeyTest.java,3.0,"public void test_getParams() throws java.lang.Exception { java.security.KeyPairGenerator kg = java.security.KeyPairGenerator.getInstance(""DH""); kg.initialize(1024); java.security.KeyPair kp1 = kg.genKeyPair(); java.security.KeyPair kp2 = kg.genKeyPair(); javax.crypto.interfaces.DHPublicKey pk1 = ((javax.crypto.interfaces.DHPublicKey) (kp1.getPublic())); javax.crypto.interfaces.DHPublicKey pk2 = ((javax.crypto.interfaces.DHPublicKey) (kp2.getPublic())); assertTrue(pk1.getY().getClass().getCanonicalName().equals(""java.math.BigInteger"")); assertTrue(pk2.getParams().getClass().getCanonicalName().equals(""javax.crypto.spec.DHParameterSpec"")); assertFalse(pk1.equals(pk2)); assertTrue(pk1.getY().equals(pk1.getY())); }",bfa3b595eab37abbd1bedad3f5997462b88da386,"@org.junit.Test(timeout = (15 * 60) * 1000) public void test_getParams() throws java.lang.Exception { java.security.KeyPairGenerator kg = java.security.KeyPairGenerator.getInstance(""DH""); kg.initialize(1024); java.security.KeyPair kp1 = kg.genKeyPair(); java.security.KeyPair kp2 = kg.genKeyPair(); javax.crypto.interfaces.DHPublicKey pk1 = ((javax.crypto.interfaces.DHPublicKey) (kp1.getPublic())); javax.crypto.interfaces.DHPublicKey pk2 = ((javax.crypto.interfaces.DHPublicKey) (kp2.getPublic())); assertTrue(pk1.getY().getClass().getCanonicalName().equals(""java.math.BigInteger"")); assertTrue(pk2.getParams().getClass().getCanonicalName().equals(""javax.crypto.spec.DHParameterSpec"")); assertFalse(pk1.equals(pk2)); assertTrue(pk1.getY().equals(pk1.getY())); }",e76543f1ca04ccdbc4d5343dfe3e2bd0228d1eee,test_getParams(),test_getParams(),3,3,"@org.junit.Test(timeout = (30 * 60) * 1000) public void test_getParams() throws java.lang.Exception { java.security.KeyPairGenerator kg = java.security.KeyPairGenerator.getInstance(""DH""); kg.initialize(1024); java.security.KeyPair kp1 = kg.genKeyPair(); java.security.KeyPair kp2 = kg.genKeyPair(); javax.crypto.interfaces.DHPublicKey pk1 = ((javax.crypto.interfaces.DHPublicKey) (kp1.getPublic())); javax.crypto.interfaces.DHPublicKey pk2 = ((javax.crypto.interfaces.DHPublicKey) (kp2.getPublic())); assertTrue(pk1.getY().getClass().getCanonicalName().equals(""java.math.BigInteger"")); assertTrue(pk2.getParams().getClass().getCanonicalName().equals(""javax.crypto.spec.DHParameterSpec"")); assertFalse(pk1.equals(pk2)); assertTrue(pk1.getY().equals(pk1.getY())); }",04d242159af32bb71bf9cbf628f4ee3de3cfe2f9,test_getParams(),316919,197,197
233353,test_vogar_target_junit3_TestRunnerJUnit3Test.java,,,,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.ChangeDefaultLocaleTest.class) @org.junit.Test public void testRunner_ChangeDefaultLocaleTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().success(""testDefault_Locale_CANADA"").success(""testDefault_Locale_CHINA"").completedNormally(); }",8017cfa8b9222c12f6b6af88b9cb78234dd28472,,testRunner_ChangeDefaultLocaleTest(),3,7,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.ChangeDefaultLocaleTest.class) @org.junit.Test public void testRunner_ChangeDefaultLocaleTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); expectedResults().success(""testDefault_Locale_CANADA"").success(""testDefault_Locale_CHINA"").completedNormally(); }",e711f05e0100d1374d7f2600d6dc79747fa43618,testRunner_ChangeDefaultLocaleTest(),130766,101,100
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,21.0,"public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",56c94cb5d4298afe070b3de25e7328e0dc79680e,"public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",697cf36de65e13730e5e817692d14c421bf6be03,testAesCbcHmacSha1Tcp6(),testAesCbcHmacSha1Tcp6(),15,31,"public void testAesCbcHmacSha1Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getKey(160), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",c1bf6efdb6904f05b13d76fff69c85896e448c4b,testAesCbcHmacSha1Tcp6(),381477,189,181
316751,jack_src_com_android_jack_optimizations_UseDefsChainsSimplifier.java,0.0,"private boolean stmtCanBeOptimized(@javax.annotation.Nonnull com.android.jack.ir.ast.JStatement s1, @javax.annotation.Nonnull com.android.jack.analysis.DefinitionMarker defOfa) { if ((!(defOfa.hasValue())) || (!((defOfa.getValue()) instanceof com.android.jack.ir.ast.JVariableRef))) { return false; } com.android.jack.ir.ast.JVariableRef varRefb = ((com.android.jack.ir.ast.JVariableRef) (defOfa.getValue())); com.android.jack.cfg.BasicBlock bbOfs1 = com.android.jack.util.ControlFlowHelper.getBasicBlock(s1); com.android.jack.ir.ast.JStatement s0 = defOfa.getStatement(); assert s0 != null; com.android.jack.cfg.BasicBlock bbOfs0 = com.android.jack.util.ControlFlowHelper.getBasicBlock(s0); com.android.jack.ir.ast.JVariable b = varRefb.getTarget(); if (bbOfs0 == bbOfs1) { if (!(hasLocalDef(b, bbOfs0, s0, s1))) { return true; } } else { java.util.List<com.android.jack.analysis.DefinitionMarker> defsOfbUseFroms0 = com.android.jack.util.DefsAndUsesChainOptimizationTools.getUsedDefinitions(varRefb); if ((((defsOfbUseFroms0.size()) == 1) && (bbHasOnlyDefinitions(bbOfs1, b, defsOfbUseFroms0))) && (!(hasLocalDef(b, bbOfs1, null, s1)))) { return true; } } return false; }",42a35be905f698f1e80d54071354bf52ea3d1539,"private boolean stmtCanBeOptimized(@javax.annotation.Nonnull com.android.jack.ir.ast.JStatement s1, @javax.annotation.Nonnull com.android.jack.analysis.DefinitionMarker defOfa) { if (!(defOfa.hasValue())) { return false; } if ((defOfa.getValue()) instanceof com.android.jack.ir.ast.JVariableRef) { com.android.jack.ir.ast.JVariableRef varRefb = ((com.android.jack.ir.ast.JVariableRef) (defOfa.getValue())); com.android.jack.cfg.BasicBlock bbOfs1 = com.android.jack.util.ControlFlowHelper.getBasicBlock(s1); com.android.jack.ir.ast.JStatement s0 = defOfa.getStatement(); assert s0 != null; com.android.jack.cfg.BasicBlock bbOfs0 = com.android.jack.util.ControlFlowHelper.getBasicBlock(s0); com.android.jack.ir.ast.JVariable b = varRefb.getTarget(); if (bbOfs0 == bbOfs1) { if (!(hasLocalDef(b, bbOfs0, s0, s1))) { return true; } } else { java.util.List<com.android.jack.analysis.DefinitionMarker> defsOfbUseFroms0 = com.android.jack.util.DefsAndUsesChainOptimizationTools.getUsedDefinitions(varRefb); if ((((defsOfbUseFroms0.size()) == 1) && (bbHasOnlyDefinitions(bbOfs1, b, defsOfbUseFroms0))) && (!(hasLocalDef(b, bbOfs1, null, s1)))) { return true; } } } else if (isLiteralWithoutSideEffect(defOfa.getValue())) { return true; } return false; }",c9da8d73837e5440a8149a166bc782e764e82ad8,"stmtCanBeOptimized(com.android.jack.ir.ast.JStatement,com.android.jack.analysis.DefinitionMarker)","stmtCanBeOptimized(com.android.jack.ir.ast.JStatement,com.android.jack.analysis.DefinitionMarker)",4,1,"private boolean stmtCanBeOptimized(@javax.annotation.Nonnull com.android.jack.ir.ast.JStatement s1, @javax.annotation.Nonnull com.android.jack.analysis.DefinitionMarker defOfa) { if (!(defOfa.hasValue())) { return false; } if ((defOfa.getValue()) instanceof com.android.jack.ir.ast.JVariableRef) { com.android.jack.ir.ast.JVariableRef varRefb = ((com.android.jack.ir.ast.JVariableRef) (defOfa.getValue())); com.android.jack.cfg.BasicBlock bbOfs1 = com.android.jack.util.ControlFlowHelper.getBasicBlock(s1); com.android.jack.ir.ast.JStatement s0 = defOfa.getStatement(); assert s0 != null; com.android.jack.cfg.BasicBlock bbOfs0 = com.android.jack.util.ControlFlowHelper.getBasicBlock(s0); com.android.jack.ir.ast.JVariable b = varRefb.getTarget(); if (bbOfs0 == bbOfs1) { if (!(hasLocalDef(b, bbOfs0, s0, s1))) { return true; } } else { java.util.List<com.android.jack.analysis.DefinitionMarker> defsOfbUseFroms0 = com.android.jack.util.DefsAndUsesChainOptimizationTools.getUsedDefinitions(varRefb); if ((((defsOfbUseFroms0.size()) == 1) && (bbHasOnlyDefinitions(bbOfs1, b, defsOfbUseFroms0))) && (!(hasLocalDef(b, bbOfs1, null, s1)))) { return true; } } } else if ((optimizeCstDef) && (isLiteralWithoutSideEffect(defOfa.getValue()))) { return true; } return false; }",b7c9cbb58a0856268c70a2a0812c738c4289b9d3,"stmtCanBeOptimized(com.android.jack.ir.ast.JStatement,com.android.jack.analysis.DefinitionMarker)",477767,415,423
510196,ojluni_src_main_java_java_lang_invoke_MethodHandles.java,31.0,"private java.lang.invoke.MethodHandle findAccessor(java.lang.reflect.Field field, java.lang.Class<?> refc, java.lang.Class<?> fieldType, int kind, boolean performAccessChecks) throws java.lang.IllegalAccessException { if (!performAccessChecks) { checkAccess(refc, field.getDeclaringClass(), field.getModifiers(), field.getName()); } final boolean isStaticKind = (kind == (SGET)) || (kind == (SPUT)); final int modifiers = field.getModifiers(); if ((java.lang.reflect.Modifier.isStatic(modifiers)) != isStaticKind) { java.lang.String reason = (((""Field "" + field) + "" is "") + (isStaticKind ? ""not "" : """")) + ""static""; throw new java.lang.IllegalAccessException(reason); } final boolean isSetterKind = (kind == (IPUT)) || (kind == (SPUT)); if ((java.lang.reflect.Modifier.isFinal(modifiers)) && isSetterKind) { throw new java.lang.IllegalAccessException(((""Field "" + field) + "" is final"")); } final java.lang.invoke.MethodType methodType; switch (kind) { case SGET : methodType = java.lang.invoke.MethodType.methodType(fieldType); break; case SPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, fieldType); break; case IGET : methodType = java.lang.invoke.MethodType.methodType(fieldType, refc); break; case IPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, refc, fieldType); break; default : throw new java.lang.IllegalArgumentException((""Invalid kind "" + kind)); } return new java.lang.invoke.MethodHandleImpl(field.getArtField(), kind, methodType); }",00cf7c3744ae0ab55e6ed02e197e1de7a47b06a2,"private java.lang.invoke.MethodHandle findAccessor(java.lang.reflect.Field field, java.lang.Class<?> refc, java.lang.Class<?> fieldType, int kind, boolean performAccessChecks) throws java.lang.IllegalAccessException { if (performAccessChecks) { checkAccess(refc, field.getDeclaringClass(), field.getModifiers(), field.getName()); } final boolean isStaticKind = (kind == (SGET)) || (kind == (SPUT)); final int modifiers = field.getModifiers(); if ((java.lang.reflect.Modifier.isStatic(modifiers)) != isStaticKind) { java.lang.String reason = (((""Field "" + field) + "" is "") + (isStaticKind ? ""not "" : """")) + ""static""; throw new java.lang.IllegalAccessException(reason); } final boolean isSetterKind = (kind == (IPUT)) || (kind == (SPUT)); if (((java.lang.reflect.Modifier.isFinal(modifiers)) && isSetterKind) && (!(field.isAccessible()))) { throw new java.lang.IllegalAccessException(((""Field "" + field) + "" is final"")); } final java.lang.invoke.MethodType methodType; switch (kind) { case SGET : methodType = java.lang.invoke.MethodType.methodType(fieldType); break; case SPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, fieldType); break; case IGET : methodType = java.lang.invoke.MethodType.methodType(fieldType, refc); break; case IPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, refc, fieldType); break; default : throw new java.lang.IllegalArgumentException((""Invalid kind "" + kind)); } return new java.lang.invoke.MethodHandleImpl(field.getArtField(), kind, methodType); }",2e3f2facc3f8f3493a0fa3b096e770a981c3d6b6,"findAccessor(java.lang.reflect.Field,java.lang.Class,java.lang.Class,int,boolean)","findAccessor(java.lang.reflect.Field,java.lang.Class,java.lang.Class,int,boolean)",2,31,"private java.lang.invoke.MethodHandle findAccessor(java.lang.reflect.Field field, java.lang.Class<?> refc, java.lang.Class<?> fieldType, int kind, boolean performAccessChecks) throws java.lang.IllegalAccessException { if (performAccessChecks) { checkAccess(refc, field.getDeclaringClass(), field.getModifiers(), field.getName()); } final boolean isStaticKind = (kind == (SGET)) || (kind == (SPUT)); final int modifiers = field.getModifiers(); if ((java.lang.reflect.Modifier.isStatic(modifiers)) != isStaticKind) { java.lang.String reason = (((""Field "" + field) + "" is "") + (isStaticKind ? ""not "" : """")) + ""static""; throw new java.lang.IllegalAccessException(reason); } if (performAccessChecks) { final boolean isSetterKind = (kind == (IPUT)) || (kind == (SPUT)); if (isSetterKind && (java.lang.reflect.Modifier.isFinal(modifiers))) { throw new java.lang.IllegalAccessException(((""Field "" + field) + "" is final"")); } } final java.lang.invoke.MethodType methodType; switch (kind) { case SGET : methodType = java.lang.invoke.MethodType.methodType(fieldType); break; case SPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, fieldType); break; case IGET : methodType = java.lang.invoke.MethodType.methodType(fieldType, refc); break; case IPUT : methodType = java.lang.invoke.MethodType.methodType(void.class, refc, fieldType); break; default : throw new java.lang.IllegalArgumentException((""Invalid kind "" + kind)); } return new java.lang.invoke.MethodHandleImpl(field.getArtField(), kind, methodType); }",0a982111e77839ed39868589b26bc105ea5106f9,"findAccessor(java.lang.reflect.Field,java.lang.Class,java.lang.Class,int,boolean)",55652,413,415
114478,sched_src_com_android_sched_util_codec_OutputVDirCodec.java,2.0,"@java.lang.Override public void checkValue(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull com.android.sched.vfs.OutputVDir dir) { }",48e46724380a97d56c7f08153fcd891527de44f8,"@java.lang.Override public void checkValue(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull com.android.sched.vfs.OutputRootVDir dir) { }",123f725889f499ab9e0b46763eb2af2a2d7f83e2,"checkValue(com.android.sched.util.codec.CodecContext,com.android.sched.vfs.OutputVDir)","checkValue(com.android.sched.util.codec.CodecContext,com.android.sched.vfs.OutputRootVDir)",13,3,"@java.lang.Override public void checkValue(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull com.android.sched.vfs.OutputVFS dir) { }",96ff9c00991fb8c86709a5c9571a5e3bebe2a964,"checkValue(com.android.sched.util.codec.CodecContext,com.android.sched.vfs.OutputVFS)",313006,52,50
148960,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_DependencyManager.java,8.0,"private com.android.build.gradle.internal.tasks.PrepareLibraryTask maybeCreatePrepareLibraryTask(@com.android.annotations.NonNull com.android.build.gradle.internal.dependency.LibraryDependencyImpl library, @com.android.annotations.NonNull org.gradle.api.Project project) { com.android.build.gradle.internal.dependency.LibraryDependencyImpl key = library.getNonTransitiveRepresentation(); com.android.build.gradle.internal.tasks.PrepareLibraryTask prepareLibraryTask = prepareTaskMap.get(key); if (prepareLibraryTask == null) { java.lang.String bundleName = org.gradle.util.GUtil.toCamelCase(library.getName().replaceAll(""\\:"", "" "")); prepareLibraryTask = project.getTasks().create(((""prepare"" + bundleName) + ""Library""), com.android.build.gradle.internal.tasks.PrepareLibraryTask.class); prepareLibraryTask.setDescription((""Prepare "" + (library.getName()))); prepareLibraryTask.setBundle(library.getBundle()); prepareLibraryTask.setExplodedDir(library.getBundleFolder()); prepareTaskMap.put(key, prepareLibraryTask); } return prepareLibraryTask; }",f4dbac002a324384a967a21242b33962012684c6,"private com.android.build.gradle.internal.tasks.PrepareLibraryTask maybeCreatePrepareLibraryTask(@com.android.annotations.NonNull com.android.build.gradle.internal.dependency.LibraryDependencyImpl library, @com.android.annotations.NonNull org.gradle.api.Project project) { com.android.build.gradle.internal.dependency.LibraryDependencyImpl key = library.getNonTransitiveRepresentation(); com.android.build.gradle.internal.tasks.PrepareLibraryTask prepareLibraryTask = prepareTaskMap.get(key); if (prepareLibraryTask == null) { java.lang.String bundleName = org.gradle.util.GUtil.toCamelCase(library.getName().replaceAll(""\\:"", "" "")); java.lang.System.out.println((((""\t"" + bundleName) + "": "") + (library.isOptional()))); prepareLibraryTask = project.getTasks().create(((""prepare"" + bundleName) + ""Library""), com.android.build.gradle.internal.tasks.PrepareLibraryTask.class); prepareLibraryTask.setDescription((""Prepare "" + (library.getName()))); prepareLibraryTask.setBundle(library.getBundle()); prepareLibraryTask.setExplodedDir(library.getBundleFolder()); prepareTaskMap.put(key, prepareLibraryTask); } return prepareLibraryTask; }",0b13c9c9ae8ddf9c022af33b0f6b9b297d761260,"maybeCreatePrepareLibraryTask(com.android.build.gradle.internal.dependency.LibraryDependencyImpl,org.gradle.api.Project)","maybeCreatePrepareLibraryTask(com.android.build.gradle.internal.dependency.LibraryDependencyImpl,org.gradle.api.Project)",7,8,"private com.android.build.gradle.internal.tasks.PrepareLibraryTask maybeCreatePrepareLibraryTask(@com.android.annotations.NonNull com.android.build.gradle.internal.dependency.LibraryDependencyImpl library, @com.android.annotations.NonNull org.gradle.api.Project project) { com.android.build.gradle.internal.dependency.LibraryDependencyImpl key = library.getNonTransitiveRepresentation(); com.android.build.gradle.internal.tasks.PrepareLibraryTask prepareLibraryTask = prepareTaskMap.get(key); if (prepareLibraryTask == null) { java.lang.String bundleName = org.gradle.util.GUtil.toCamelCase(library.getName().replaceAll(""\\:"", "" "")); prepareLibraryTask = project.getTasks().create(((""prepare"" + bundleName) + ""Library""), com.android.build.gradle.internal.tasks.PrepareLibraryTask.class); prepareLibraryTask.setDescription((""Prepare "" + (library.getName()))); prepareLibraryTask.setBundle(library.getBundle()); prepareLibraryTask.setExplodedDir(library.getBundleFolder()); prepareTaskMap.put(key, prepareLibraryTask); } return prepareLibraryTask; }",f4dbac002a324384a967a21242b33962012684c6,"maybeCreatePrepareLibraryTask(com.android.build.gradle.internal.dependency.LibraryDependencyImpl,org.gradle.api.Project)",13029,283,254
346308,tests_wifitests_src_com_android_server_wifi_WifiConfigManagerTest.java,97.0,"@org.junit.Test public void testEnableDisableNetworkFailedDueToPermissionDenied() throws java.lang.Exception { android.net.wifi.WifiConfiguration openNetwork = com.android.server.wifi.WifiConfigurationTestUtil.createOpenNetwork(); com.android.server.wifi.NetworkUpdateResult result = verifyAddNetworkToWifiConfigManager(openNetwork); assertTrue(mWifiConfigManager.enableNetwork(result.getNetworkId(), false, com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)); android.net.wifi.WifiConfiguration retrievedNetwork = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()); android.net.wifi.WifiConfiguration.NetworkSelectionStatus retrievedStatus = retrievedNetwork.getNetworkSelectionStatus(); assertTrue(retrievedStatus.isNetworkEnabled()); verifyUpdateNetworkStatus(retrievedNetwork, WifiConfiguration.Status.ENABLED); doAnswer(new android.app.test.MockAnswerUtil.AnswerWithArguments() { public int answer(java.lang.String permName, int uid) throws java.lang.Exception { if (uid == (com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)) { return android.content.pm.PackageManager.PERMISSION_GRANTED; } return android.content.pm.PackageManager.PERMISSION_DENIED; } }).when(mFrameworkFacade).checkUidPermission(anyString(), anyInt()); assertFalse(mWifiConfigManager.disableNetwork(result.getNetworkId(), com.android.server.wifi.WifiConfigManagerTest.TEST_UPDATE_UID)); retrievedStatus = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()).getNetworkSelectionStatus(); assertTrue(retrievedStatus.isNetworkEnabled()); assertEquals(WifiConfiguration.Status.ENABLED, retrievedNetwork.status); }",ad7ddf784f67019e1c24f70bcfc9d9129a5a8da7,"@org.junit.Test public void testEnableDisableNetworkFailedDueToPermissionDenied() throws java.lang.Exception { android.net.wifi.WifiConfiguration openNetwork = com.android.server.wifi.WifiConfigurationTestUtil.createOpenNetwork(); com.android.server.wifi.NetworkUpdateResult result = verifyAddNetworkToWifiConfigManager(openNetwork); assertTrue(mWifiConfigManager.enableNetwork(result.getNetworkId(), false, com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)); android.net.wifi.WifiConfiguration retrievedNetwork = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()); android.net.wifi.WifiConfiguration.NetworkSelectionStatus retrievedStatus = retrievedNetwork.getNetworkSelectionStatus(); assertTrue(retrievedStatus.isNetworkEnabled()); verifyUpdateNetworkStatus(retrievedNetwork, WifiConfiguration.Status.ENABLED); doAnswer(new android.app.test.MockAnswerUtil.AnswerWithArguments() { public int answer(java.lang.String permName, int uid) throws java.lang.Exception { if (uid == (com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)) { return android.content.pm.PackageManager.PERMISSION_GRANTED; } return android.content.pm.PackageManager.PERMISSION_DENIED; } }).when(mFrameworkFacade).checkUidPermission(anyString(), anyInt()); when(mWifiPermissionsUtil.checkConfigOverridePermission(anyInt())).thenReturn(false); assertFalse(mWifiConfigManager.disableNetwork(result.getNetworkId(), com.android.server.wifi.WifiConfigManagerTest.TEST_UPDATE_UID)); retrievedStatus = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()).getNetworkSelectionStatus(); assertTrue(retrievedStatus.isNetworkEnabled()); assertEquals(WifiConfiguration.Status.ENABLED, retrievedNetwork.status); }",6433f7ae82dfa71af9e22d7241235402914664bc,testEnableDisableNetworkFailedDueToPermissionDenied(),testEnableDisableNetworkFailedDueToPermissionDenied(),5,94,"@org.junit.Test public void testEnableDisableNetworkFailedDueToPermissionDenied() throws java.lang.Exception { android.net.wifi.WifiConfiguration openNetwork = com.android.server.wifi.WifiConfigurationTestUtil.createOpenNetwork(); com.android.server.wifi.NetworkUpdateResult result = verifyAddNetworkToWifiConfigManager(openNetwork); assertTrue(mWifiConfigManager.enableNetwork(result.getNetworkId(), false, com.android.server.wifi.WifiConfigManagerTest.TEST_CREATOR_UID)); android.net.wifi.WifiConfiguration retrievedNetwork = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()); android.net.wifi.WifiConfiguration.NetworkSelectionStatus retrievedStatus = retrievedNetwork.getNetworkSelectionStatus(); assertTrue(retrievedStatus.isNetworkEnabled()); verifyUpdateNetworkStatus(retrievedNetwork, WifiConfiguration.Status.ENABLED); when(mWifiPermissionsUtil.checkConfigOverridePermission(anyInt())).thenReturn(false); assertFalse(mWifiConfigManager.disableNetwork(result.getNetworkId(), com.android.server.wifi.WifiConfigManagerTest.TEST_UPDATE_UID)); retrievedStatus = mWifiConfigManager.getConfiguredNetwork(result.getNetworkId()).getNetworkSelectionStatus(); assertTrue(retrievedStatus.isNetworkEnabled()); assertEquals(WifiConfiguration.Status.ENABLED, retrievedNetwork.status); }",9648c5b53b6920aee7611107bd6f8c76e03e5401,testEnableDisableNetworkFailedDueToPermissionDenied(),489449,400,289
156022,services_core_java_com_android_server_am_ActivityStackSupervisor.java,68.0,"android.content.pm.ActivityInfo resolveActivity(android.content.Intent intent, java.lang.String resolvedType, int startFlags, android.app.ProfilerInfo profilerInfo, int userId) { android.content.pm.ActivityInfo aInfo; try { android.content.pm.ResolveInfo rInfo = android.app.AppGlobals.getPackageManager().resolveIntent(intent, resolvedType, ((android.content.pm.PackageManager.MATCH_DEFAULT_ONLY) | (ActivityManagerService.STOCK_PM_FLAGS)), userId); aInfo = (rInfo != null) ? rInfo.activityInfo : null; } catch (android.os.RemoteException e) { aInfo = null; } if (aInfo != null) { intent.setComponent(new android.content.ComponentName(aInfo.applicationInfo.packageName, aInfo.name)); if ((startFlags & (android.app.ActivityManager.START_FLAG_DEBUG)) != 0) { if (!(aInfo.processName.equals(""system""))) { mService.setDebugApp(aInfo.processName, true, false); } } if ((startFlags & (android.app.ActivityManager.START_FLAG_OPENGL_TRACES)) != 0) { if (!(aInfo.processName.equals(""system""))) { mService.setOpenGlTraceApp(aInfo.applicationInfo, aInfo.processName); } } if (profilerInfo != null) { if (!(aInfo.processName.equals(""system""))) { mService.setProfileApp(aInfo.applicationInfo, aInfo.processName, profilerInfo); } } } return aInfo; }",28a7f80db3d13ea6557cce111f5de8ea0fd1ccc6,"android.content.pm.ActivityInfo resolveActivity(android.content.Intent intent, java.lang.String resolvedType, int startFlags, android.app.ProfilerInfo profilerInfo, int userId) { android.content.pm.ActivityInfo aInfo; try { android.content.pm.ResolveInfo rInfo = android.app.AppGlobals.getPackageManager().resolveIntent(intent, resolvedType, ((android.content.pm.PackageManager.MATCH_DEFAULT_ONLY) | (ActivityManagerService.STOCK_PM_FLAGS)), userId); aInfo = (rInfo != null) ? rInfo.activityInfo : null; } catch (android.os.RemoteException e) { aInfo = null; } if (aInfo != null) { intent.setComponent(new android.content.ComponentName(aInfo.applicationInfo.packageName, aInfo.name)); if ((startFlags & (android.app.ActivityManager.START_FLAG_DEBUG)) != 0) { if (!(aInfo.processName.equals(""system""))) { mService.setDebugApp(aInfo.processName, true, false); } } if ((startFlags & (android.app.ActivityManager.START_FLAG_OPENGL_TRACES)) != 0) { if (!(aInfo.processName.equals(""system""))) { mService.setOpenGlTraceApp(aInfo.applicationInfo, aInfo.processName); } } if ((startFlags & (android.app.ActivityManager.START_FLAG_TRACK_ALLOCATION)) != 0) { if (!(aInfo.processName.equals(""system""))) { mService.setTrackAllocationApp(aInfo.applicationInfo, aInfo.processName); } } if (profilerInfo != null) { if (!(aInfo.processName.equals(""system""))) { mService.setProfileApp(aInfo.applicationInfo, aInfo.processName, profilerInfo); } } } return aInfo; }",3130c9859633cf868faf0638a9b6ca5b0bc3a09e,"resolveActivity(android.content.Intent,java.lang.String,int,android.app.ProfilerInfo,int)","resolveActivity(android.content.Intent,java.lang.String,int,android.app.ProfilerInfo,int)",3,68,"android.content.pm.ActivityInfo resolveActivity(android.content.Intent intent, java.lang.String resolvedType, int startFlags, android.app.ProfilerInfo profilerInfo, int userId) { android.content.pm.ActivityInfo aInfo; try { android.content.pm.ResolveInfo rInfo = android.app.AppGlobals.getPackageManager().resolveIntent(intent, resolvedType, ((android.content.pm.PackageManager.MATCH_DEFAULT_ONLY) | (ActivityManagerService.STOCK_PM_FLAGS)), userId); aInfo = (rInfo != null) ? rInfo.activityInfo : null; } catch (android.os.RemoteException e) { aInfo = null; } if (aInfo != null) { intent.setComponent(new android.content.ComponentName(aInfo.applicationInfo.packageName, aInfo.name)); if (!(aInfo.processName.equals(""system""))) { if ((startFlags & (android.app.ActivityManager.START_FLAG_DEBUG)) != 0) { mService.setDebugApp(aInfo.processName, true, false); } if ((startFlags & (android.app.ActivityManager.START_FLAG_OPENGL_TRACES)) != 0) { mService.setOpenGlTraceApp(aInfo.applicationInfo, aInfo.processName); } if ((startFlags & (android.app.ActivityManager.START_FLAG_TRACK_ALLOCATION)) != 0) { mService.setTrackAllocationApp(aInfo.applicationInfo, aInfo.processName); } if (profilerInfo != null) { mService.setProfileApp(aInfo.applicationInfo, aInfo.processName, profilerInfo); } } } return aInfo; }",4ce3dd00c501b51818944193b749270de542747f,"resolveActivity(android.content.Intent,java.lang.String,int,android.app.ProfilerInfo,int)",128254,412,370
584550,src_main_java_com_android_apksig_internal_apk_SigningBlockScheme_ApkSigningBlockUtils.java,,,,"public static byte[] generateApkSigningBlock(com.android.apksig.internal.util.Pair<byte[], java.lang.Integer> apkSignatureSchemeV2Pair) { byte[] apkSignatureSchemeV2Block = apkSignatureSchemeV2Pair.getFirst(); int apkSignatureSchemev2Id = apkSignatureSchemeV2Pair.getSecond(); int resultSize = ((((8 + 8) + 4) + (apkSignatureSchemeV2Block.length)) + 8) + 16; java.nio.ByteBuffer paddingPair = null; if ((resultSize % (com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES)) != 0) { int padding = (com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES) - (resultSize % (com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES)); if (padding < 12) { padding += com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES; } paddingPair = java.nio.ByteBuffer.allocate(padding).order(java.nio.ByteOrder.LITTLE_ENDIAN); paddingPair.putLong((padding - 8)); paddingPair.putInt(com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.VERITY_PADDING_BLOCK_ID); paddingPair.rewind(); resultSize += padding; } java.nio.ByteBuffer result = java.nio.ByteBuffer.allocate(resultSize); result.order(java.nio.ByteOrder.LITTLE_ENDIAN); long blockSizeFieldValue = resultSize - 8L; result.putLong(blockSizeFieldValue); long pairSizeFieldValue = 4L + (apkSignatureSchemeV2Block.length); result.putLong(pairSizeFieldValue); result.putInt(apkSignatureSchemev2Id); result.put(apkSignatureSchemeV2Block); if (paddingPair != null) { result.put(paddingPair); } result.putLong(blockSizeFieldValue); result.put(com.android.apksig.internal.apk.SigningBlockScheme.ApkSigningBlockUtils.APK_SIGNING_BLOCK_MAGIC); return result.array(); }",3a067beafa7f728f60c1f8b6409e892701380552,,generateApkSigningBlock(com.android.apksig.internal.util.Pair),4,6,"public static byte[] generateApkSigningBlock(com.android.apksig.internal.util.Pair<byte[], java.lang.Integer> apkSignatureSchemeV2Pair) { byte[] apkSignatureSchemeV2Block = apkSignatureSchemeV2Pair.getFirst(); int apkSignatureSchemev2Id = apkSignatureSchemeV2Pair.getSecond(); int resultSize = ((((8 + 8) + 4) + (apkSignatureSchemeV2Block.length)) + 8) + 16; java.nio.ByteBuffer paddingPair = null; if ((resultSize % (com.android.apksig.internal.apk.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES)) != 0) { int padding = (com.android.apksig.internal.apk.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES) - (resultSize % (com.android.apksig.internal.apk.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES)); if (padding < 12) { padding += com.android.apksig.internal.apk.ApkSigningBlockUtils.ANDROID_COMMON_PAGE_ALIGNMENT_BYTES; } paddingPair = java.nio.ByteBuffer.allocate(padding).order(java.nio.ByteOrder.LITTLE_ENDIAN); paddingPair.putLong((padding - 8)); paddingPair.putInt(com.android.apksig.internal.apk.ApkSigningBlockUtils.VERITY_PADDING_BLOCK_ID); paddingPair.rewind(); resultSize += padding; } java.nio.ByteBuffer result = java.nio.ByteBuffer.allocate(resultSize); result.order(java.nio.ByteOrder.LITTLE_ENDIAN); long blockSizeFieldValue = resultSize - 8L; result.putLong(blockSizeFieldValue); long pairSizeFieldValue = 4L + (apkSignatureSchemeV2Block.length); result.putLong(pairSizeFieldValue); result.putInt(apkSignatureSchemev2Id); result.put(apkSignatureSchemeV2Block); if (paddingPair != null) { result.put(paddingPair); } result.putLong(blockSizeFieldValue); result.put(com.android.apksig.internal.apk.ApkSigningBlockUtils.APK_SIGNING_BLOCK_MAGIC); return result.array(); }",e4045b4535c7426f872bbedc004bc187cff75282,generateApkSigningBlock(com.android.apksig.internal.util.Pair),4622,499,475
148485,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_VariantManager.java,5.0,"public void createAndroidTasks() { variantFactory.validateModel(this); variantFactory.preVariantWork(project); final com.android.build.gradle.internal.TaskFactory tasks = new com.android.build.gradle.internal.TaskContainerAdaptor(project.getTasks()); if (variantDataList.isEmpty()) { populateVariantDataList(); } com.android.builder.profile.ThreadRecorder.get().record(ExecutionType.VARIANT_MANAGER_CREATE_TESTS_TASKS, new com.android.builder.profile.Recorder.Block<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { taskManager.createTopLevelTestTasks(tasks, (!(productFlavors.isEmpty()))); return null; } }); for (final com.android.build.gradle.internal.variant.BaseVariantData<? extends com.android.build.gradle.internal.variant.BaseVariantOutputData> variantData : variantDataList) { com.android.build.gradle.internal.profile.SpanRecorders.record(project, ExecutionType.VARIANT_MANAGER_CREATE_TASKS_FOR_VARIANT, new com.android.builder.profile.Recorder.Block<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { createTasksForVariantData(tasks, variantData); return null; } }, new com.android.builder.profile.Recorder.Property(com.android.build.gradle.internal.profile.SpanRecorders.VARIANT, variantData.getName())); } createApiObjects(); taskManager.createReportTasks(variantDataList); }",66e85afc50c4104263746dbb35fa3d1819ef272f,"public void createAndroidTasks() { variantFactory.validateModel(this); variantFactory.preVariantWork(project); final com.android.build.gradle.internal.TaskFactory tasks = new com.android.build.gradle.internal.TaskContainerAdaptor(project.getTasks()); if (variantDataList.isEmpty()) { populateVariantDataList(); } com.android.builder.profile.ThreadRecorder.get().record(ExecutionType.VARIANT_MANAGER_CREATE_TESTS_TASKS, new com.android.builder.profile.Recorder.Block<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { taskManager.createTopLevelTestTasks(tasks, (!(productFlavors.isEmpty()))); return null; } }); for (final com.android.build.gradle.internal.variant.BaseVariantData<? extends com.android.build.gradle.internal.variant.BaseVariantOutputData> variantData : variantDataList) { tasks.named(""assemble"", new org.gradle.api.Action<org.gradle.api.Task>() { @java.lang.Override public void execute(org.gradle.api.Task task) { task.dependsOn(buildTypes.get(variantData.getVariantConfiguration().getBuildType().getName()).getAssembleTask()); } }); com.android.build.gradle.internal.profile.SpanRecorders.record(project, ExecutionType.VARIANT_MANAGER_CREATE_TASKS_FOR_VARIANT, new com.android.builder.profile.Recorder.Block<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { createTasksForVariantData(tasks, variantData); return null; } }, new com.android.builder.profile.Recorder.Property(com.android.build.gradle.internal.profile.SpanRecorders.VARIANT, variantData.getName())); } createApiObjects(); taskManager.createReportTasks(variantDataList); }",75212d54e7c5b1081088cb1e48cdb7c65fba8939,createAndroidTasks(),createAndroidTasks(),3,6,"public void createAndroidTasks() { variantFactory.validateModel(this); variantFactory.preVariantWork(project); final com.android.build.gradle.internal.TaskFactory tasks = new com.android.build.gradle.internal.TaskContainerAdaptor(project.getTasks()); if (variantDataList.isEmpty()) { populateVariantDataList(); } com.android.builder.profile.ThreadRecorder.get().record(ExecutionType.VARIANT_MANAGER_CREATE_TESTS_TASKS, new com.android.builder.profile.Recorder.Block<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { taskManager.createTopLevelTestTasks(tasks, (!(productFlavors.isEmpty()))); return null; } }); for (final com.android.build.gradle.internal.variant.BaseVariantData<? extends com.android.build.gradle.internal.variant.BaseVariantOutputData> variantData : variantDataList) { com.android.build.gradle.internal.profile.SpanRecorders.record(project, ExecutionType.VARIANT_MANAGER_CREATE_TASKS_FOR_VARIANT, new com.android.builder.profile.Recorder.Block<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { createTasksForVariantData(tasks, variantData); return null; } }, new com.android.builder.profile.Recorder.Property(com.android.build.gradle.internal.profile.SpanRecorders.VARIANT, variantData.getName())); } taskManager.createReportTasks(variantDataList); }",81077053e98a81269fcf97f8d1e9c2e9821e973e,createAndroidTasks(),321231,442,364
240700,luni_src_test_java_libcore_java_net_URLConnectionTest.java,242.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private libcore.javax.net.ssl.TestSSLContext createTestSSLContext() { libcore.javax.net.ssl.TestSSLContext result = libcore.javax.net.ssl.TestSSLContext.create(); testSSLContextsToClose.add(result); return result; },827d76b7261414e2f12d475436035312a99e306d,,createTestSSLContext(),4,270,private libcore.javax.net.ssl.TestSSLContext createDefaultTestSSLContext() { libcore.javax.net.ssl.TestSSLContext result = libcore.javax.net.ssl.TestSSLContext.create(); testSSLContextsToClose.add(result); return result; },b222108e0b902edb99d5a371b2c9d7d0a0926385,createDefaultTestSSLContext(),274809,57,58
101980,dalvik_src_main_java_dalvik_system_DexPathList.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.io.File[] getDexFiles() { return dexFiles; },2149fa95a9a23df6cfcd651d1b861bc5335ad5bc,,getDexFiles(),10,16,public java.util.List<java.io.File> getDexFiles() { return dexFiles; },5f3432806ec2ea9d1a8a8d5168b94d8849af8dfc,getDexFiles(),303699,18,24
36032,sdkmanager_libs_sdklib_src_com_android_sdklib_internal_repository_packages_Package.java,18.0,public com.android.sdklib.internal.repository.packages.Package.UpdateInfo canBeUpdatedBy(com.android.sdklib.internal.repository.packages.Package replacementPackage) { if (replacementPackage == null) { return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.INCOMPATIBLE; } if ((sameItemAs(replacementPackage)) == false) { return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.INCOMPATIBLE; } if ((replacementPackage.getRevision()) > (this.getRevision())) { return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.UPDATE; } return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.NOT_UPDATE; },13ac6a94d24ea75028ba871c6ffaf30a6bd3f848,public com.android.sdklib.internal.repository.packages.Package.UpdateInfo canBeUpdatedBy(com.android.sdklib.internal.repository.packages.Package replacementPackage) { if (replacementPackage == null) { return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.INCOMPATIBLE; } if ((sameItemAs(replacementPackage)) == false) { return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.INCOMPATIBLE; } if ((replacementPackage.getRevision().compareTo(this.getRevision())) > 0) { return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.UPDATE; } return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.NOT_UPDATE; },9353d48a1eb29f1aa8221584fdd47419f127494d,canBeUpdatedBy(com.android.sdklib.internal.repository.packages.Package),canBeUpdatedBy(com.android.sdklib.internal.repository.packages.Package),4,18,public com.android.sdklib.internal.repository.packages.Package.UpdateInfo canBeUpdatedBy(com.android.sdklib.internal.repository.packages.Package replacementPackage) { if (replacementPackage == null) { return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.INCOMPATIBLE; } if (!(sameItemAs(replacementPackage))) { return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.INCOMPATIBLE; } if ((replacementPackage.getRevision().compareTo(this.getRevision())) > 0) { return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.UPDATE; } return com.android.sdklib.internal.repository.packages.Package.UpdateInfo.NOT_UPDATE; },69c25d4ea517b265f2eb99169bde2db63b853373,canBeUpdatedBy(com.android.sdklib.internal.repository.packages.Package),196806,173,169
537337,tests_telephonytests_src_com_android_internal_telephony_RILTest.java,66.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testConvertHalCellInfoList_1_2ForWcdmaWithEmptyOpeartorInfo() throws java.lang.Exception { java.util.ArrayList<android.telephony.CellInfo> ret = getCellInfoListForWcdma(com.android.internal.telephony.RILTest.MCC_STR, com.android.internal.telephony.RILTest.MNC_STR, com.android.internal.telephony.RILTest.EMPTY_ALPHA_LONG, com.android.internal.telephony.RILTest.EMPTY_ALPHA_SHORT); junit.framework.Assert.assertEquals(1, ret.size()); android.telephony.CellInfoWcdma cellInfoWcdma = ((android.telephony.CellInfoWcdma) (ret.get(0))); android.telephony.CellInfoWcdma expected = new android.telephony.CellInfoWcdma(); expected.setRegistered(false); expected.setTimeStamp(com.android.internal.telephony.RILTest.TIMESTAMP); expected.setTimeStampType(com.android.internal.telephony.RILTest.RIL_TIMESTAMP_TYPE_OEM_RIL); android.telephony.CellIdentityWcdma ci = new android.telephony.CellIdentityWcdma(com.android.internal.telephony.RILTest.LAC, com.android.internal.telephony.RILTest.CID, com.android.internal.telephony.RILTest.PSC, com.android.internal.telephony.RILTest.UARFCN, com.android.internal.telephony.RILTest.MCC_STR, com.android.internal.telephony.RILTest.MNC_STR, com.android.internal.telephony.RILTest.EMPTY_ALPHA_LONG, com.android.internal.telephony.RILTest.EMPTY_ALPHA_SHORT); android.telephony.CellSignalStrengthWcdma cs = new android.telephony.CellSignalStrengthWcdma(com.android.internal.telephony.RILTest.SIGNAL_STRENGTH, com.android.internal.telephony.RILTest.BIT_ERROR_RATE); expected.setCellIdentity(ci); expected.setCellSignalStrength(cs); junit.framework.Assert.assertEquals(expected, cellInfoWcdma); }",72f4681593165e488e5df4cc040bf7427d8226f9,,testConvertHalCellInfoList_1_2ForWcdmaWithEmptyOpeartorInfo(),5,73,"@org.junit.Test public void testConvertHalCellInfoList_1_2ForWcdmaWithEmptyOperatorInfo() throws java.lang.Exception { java.util.ArrayList<android.telephony.CellInfo> ret = getCellInfoListForWcdma(com.android.internal.telephony.RILTest.MCC_STR, com.android.internal.telephony.RILTest.MNC_STR, com.android.internal.telephony.RILTest.EMPTY_ALPHA_LONG, com.android.internal.telephony.RILTest.EMPTY_ALPHA_SHORT); junit.framework.Assert.assertEquals(1, ret.size()); android.telephony.CellInfoWcdma cellInfoWcdma = ((android.telephony.CellInfoWcdma) (ret.get(0))); android.telephony.CellInfoWcdma expected = new android.telephony.CellInfoWcdma(); expected.setRegistered(false); expected.setTimeStamp(com.android.internal.telephony.RILTest.TIMESTAMP); expected.setTimeStampType(com.android.internal.telephony.RILTest.RIL_TIMESTAMP_TYPE_OEM_RIL); android.telephony.CellIdentityWcdma ci = new android.telephony.CellIdentityWcdma(com.android.internal.telephony.RILTest.LAC, com.android.internal.telephony.RILTest.CID, com.android.internal.telephony.RILTest.PSC, com.android.internal.telephony.RILTest.UARFCN, com.android.internal.telephony.RILTest.MCC_STR, com.android.internal.telephony.RILTest.MNC_STR, com.android.internal.telephony.RILTest.EMPTY_ALPHA_LONG, com.android.internal.telephony.RILTest.EMPTY_ALPHA_SHORT); android.telephony.CellSignalStrengthWcdma cs = new android.telephony.CellSignalStrengthWcdma(com.android.internal.telephony.RILTest.SIGNAL_STRENGTH, com.android.internal.telephony.RILTest.BIT_ERROR_RATE); expected.setCellIdentity(ci); expected.setCellSignalStrength(cs); junit.framework.Assert.assertEquals(expected, cellInfoWcdma); }",ac22f5e306ee0210ea30590030710965afc4374a,testConvertHalCellInfoList_1_2ForWcdmaWithEmptyOperatorInfo(),392523,497,495
245683,harmony-tests_src_test_java_org_apache_harmony_tests_java_net_HttpCookieTest.java,4.0,"public void test_DomainMatches() { boolean match = java.net.HttpCookie.domainMatches(""hostname"", ""hostname""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".com"", ""test.com""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".com."", ""test.com""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".local"", ""hostname""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".c.d"", ""a.b.c.d""); assertTrue(match); match = java.net.HttpCookie.domainMatches(""c.d"", ""a.b.c.d""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".foo.com"", ""y.x.foo.com""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".foo.com"", ""x.foo.com""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".local"", ""hostname.local""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".ajax.com"", ""a.ajax.com""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".ajax.com"", ""a.AJAX.com""); assertTrue(match); match = java.net.HttpCookie.domainMatches(""..."", ""test...""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".ajax.com"", ""b.a.AJAX.com""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".a"", ""b.a""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".ajax.com"", null); assertFalse(match); match = java.net.HttpCookie.domainMatches(null, null); assertFalse(match); match = java.net.HttpCookie.domainMatches(null, ""b.a.AJAX.com""); assertFalse(match); }",bcc2f953eeabd547414129ac9cca6e488eb7e2ab,"public void test_DomainMatches() { boolean match = java.net.HttpCookie.domainMatches(""hostname"", ""hostname""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".com"", ""test.com""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".com."", ""test.com""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".local"", ""hostname""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".c.d"", ""a.b.c.d""); assertTrue(match); match = java.net.HttpCookie.domainMatches(""c.d"", ""a.b.c.d""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".foo.com"", ""y.x.foo.com""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".foo.com"", ""x.foo.com""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".local"", ""hostname.local""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".ajax.com"", ""a.ajax.com""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".ajax.com"", ""a.AJAX.com""); assertTrue(match); match = java.net.HttpCookie.domainMatches(""..."", ""test...""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".ajax.com"", ""b.a.AJAX.com""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".a"", ""b.a""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".ajax.com"", null); assertFalse(match); match = java.net.HttpCookie.domainMatches(null, null); assertFalse(match); match = java.net.HttpCookie.domainMatches(null, ""b.a.AJAX.com""); assertFalse(match); match = java.net.HttpCookie.domainMatches(""foo.local"", ""foo""); assertTrue(match); }",b98375a8d8e25980cedbaf413c892d4a8e18ea00,test_DomainMatches(),test_DomainMatches(),2,4,"public void test_DomainMatches() { boolean match = java.net.HttpCookie.domainMatches(""hostname"", ""hostname""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".com"", ""test.com""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".com."", ""test.com""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".local"", ""hostname""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".c.d"", ""a.b.c.d""); assertTrue(match); match = java.net.HttpCookie.domainMatches(""c.d"", ""a.b.c.d""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".foo.com"", ""y.x.foo.com""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".foo.com"", ""x.foo.com""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".local"", ""hostname.local""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".ajax.com"", ""a.ajax.com""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".ajax.com"", ""a.AJAX.com""); assertTrue(match); match = java.net.HttpCookie.domainMatches(""..."", ""test...""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".ajax.com"", ""b.a.AJAX.com""); assertTrue(match); match = java.net.HttpCookie.domainMatches("".a"", ""b.a""); assertFalse(match); match = java.net.HttpCookie.domainMatches("".ajax.com"", null); assertFalse(match); match = java.net.HttpCookie.domainMatches(null, null); assertFalse(match); match = java.net.HttpCookie.domainMatches(null, ""b.a.AJAX.com""); assertFalse(match); match = java.net.HttpCookie.domainMatches(""hostname.local"", ""hostname""); assertTrue(match); }",ec2dd27409c3096b764402bec24f808adac0149f,test_DomainMatches(),278620,460,460
316531,service_java_com_android_server_wifi_hotspot2_ANQPRequestManager.java,,,,"public com.android.server.wifi.hotspot2.ANQPNetworkKey onRequestCompleted(long bssid, boolean success) { if (success) { mHoldOffInfo.remove(bssid); } return mPendingQueries.remove(bssid); }",98994565e99d2b13bc629846cd1357d4fe8b5e07,,"onRequestCompleted(long,boolean)",9,0,"public com.android.server.wifi.ScanDetail onRequestCompleted(long bssid, boolean success) { if (success) { mHoldOffInfo.remove(bssid); } return mPendingQueries.remove(bssid); }",4f96751605b4c870d97174aa5feeb5d610d99992,"onRequestCompleted(long,boolean)",486444,58,53
93566,luni_src_main_java_libcore_net_url_FileURLConnection.java,8.0,"@java.lang.Override public java.lang.String getContentType() { try { if (!(connected)) { connect(); } } catch (java.io.IOException e) { return ""content/unknown""; } if (isDir) { return ""text/plain""; } java.lang.String result = java.net.URLConnection.guessContentTypeFromName(url.getFile()); if (result != null) { return result; } try { result = java.net.URLConnection.guessContentTypeFromStream(is); } catch (java.io.IOException e) { } if (result != null) { return result; } return ""content/unknown""; }",419a8ad59bd96bb2b107c94bdbc8f8ea97140aa0,"@java.lang.Override public java.lang.String getContentType() { getHeaderField(0); final java.lang.String contentTypeHeader = headerKeysAndValues[libcore.net.url.FileURLConnection.CONTENT_TYPE_IDX]; return contentTypeHeader != null ? contentTypeHeader : ""content/unknown""; }",95047f26c1658769a0d1716af8cf4a990937ee8a,getContentType(),getContentType(),3,8,@java.lang.Override public java.lang.String getContentType() { return getHeaderField(0); },34682354c253b15b88902df580e9ccbf96e59801,getContentType(),392206,65,21
580352,telephony_java_android_telephony_PhoneStateListener.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void onCellularDataIndicatorChanged(boolean enabled) { send(android.telephony.PhoneStateListener.LISTEN_CELLULAR_DATA_INDICATOR, 0, 0, enabled); }",70ff87f2c5725ee82f7bd604690436bb0a04ea01,,onCellularDataIndicatorChanged(boolean),5,3,"public void onUserMobileDataStateChanged(boolean enabled) { send(android.telephony.PhoneStateListener.LISTEN_USER_MOBILE_DATA_STATE, 0, 0, enabled); }",56b29d452c5b9fc8f56941d9926f2d1d678e6ee0,onUserMobileDataStateChanged(boolean),111186,39,37
100743,perflib_src_main_java_com_android_tools_perflib_heap_HprofParser.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.android.tools.perflib.heap.Value readValue(java.io.DataInputStream stream, com.android.tools.perflib.heap.Instance instance, com.android.tools.perflib.heap.Type type) throws java.io.IOException { final com.android.tools.perflib.heap.Value value = new com.android.tools.perflib.heap.Value(instance); switch (type) { case OBJECT : final long id = readId(stream); mPost.add(new com.android.tools.perflib.heap.HprofParser.PostOperation(com.android.tools.perflib.heap.HprofParser.RESOLVE_INSTANCES, new java.util.concurrent.Callable() { @java.lang.Override public java.lang.Object call() throws java.lang.Exception { value.setValue(mState.findReference(id)); return null; } })); break; case BOOLEAN : value.setValue(stream.readBoolean()); break; case CHAR : value.setValue(stream.readChar()); break; case FLOAT : value.setValue(stream.readFloat()); break; case DOUBLE : value.setValue(stream.readDouble()); break; case BYTE : value.setValue(stream.readByte()); break; case SHORT : value.setValue(stream.readShort()); break; case INT : value.setValue(stream.readInt()); break; case LONG : value.setValue(stream.readLong()); break; } return value; }",fdddd168384f7e6e2b8d926c0532972162df5915,,"readValue(java.io.DataInputStream,com.android.tools.perflib.heap.Instance,com.android.tools.perflib.heap.Type)",6,9,"private com.android.tools.perflib.heap.Value readValue(java.io.DataInputStream stream, com.android.tools.perflib.heap.Instance instance, com.android.tools.perflib.heap.Type type) throws java.io.IOException { final com.android.tools.perflib.heap.Value value = new com.android.tools.perflib.heap.Value(instance); switch (type) { case OBJECT : final long id = readId(stream); mPost.add(new com.android.tools.perflib.heap.HprofParser.PostOperation(com.android.tools.perflib.heap.HprofParser.ResolvePriority.INSTANCES, new java.util.concurrent.Callable() { @java.lang.Override public java.lang.Object call() throws java.lang.Exception { value.setValue(mState.findReference(id)); return null; } })); break; case BOOLEAN : value.setValue(stream.readBoolean()); break; case CHAR : value.setValue(stream.readChar()); break; case FLOAT : value.setValue(stream.readFloat()); break; case DOUBLE : value.setValue(stream.readDouble()); break; case BYTE : value.setValue(stream.readByte()); break; case SHORT : value.setValue(stream.readShort()); break; case INT : value.setValue(stream.readInt()); break; case LONG : value.setValue(stream.readLong()); break; } return value; }",a3a9ede60969ed342b6c84d95e8caea2b2706920,"readValue(java.io.DataInputStream,com.android.tools.perflib.heap.Instance,com.android.tools.perflib.heap.Type)",20329,334,333
103652,sdkmanager_sdkuilib_src_main_java_com_android_sdkuilib_internal_widgets_AvdCreationPresenter.java,,,,"private static java.lang.String getGenericLabel(com.android.sdklib.devices.Device d) { java.lang.String name = d.getName(); if (name.equals(""3.7 FWVGA slider"")) { name = ""3.7in FWVGA slider""; } java.util.regex.Matcher matcher = com.android.sdkuilib.internal.widgets.AvdCreationPresenter.PATTERN.matcher(name); if (matcher.matches()) { java.lang.String size = matcher.group(1); java.lang.String n = matcher.group(2); int dot = size.indexOf('.'); if (dot == (-1)) { size = size + "".0""; dot = (size.length()) - 2; } for (int i = 0; i < (2 - dot); i++) { size = ' ' + size; } name = (size + ""\"" "") + n; } return java.lang.String.format(java.util.Locale.US, ""%1$s (%2$s)"", name, com.android.sdkuilib.internal.widgets.AvdCreationPresenter.getResolutionString(d)); }",3285191156daa86cad9f6449731bd9941ef78839,,getGenericLabel(com.android.sdklib.devices.Device),2,23,"private static java.lang.String getGenericLabel(com.android.sdklib.devices.Device d) { @java.lang.SuppressWarnings(""deprecation"") java.lang.String name = d.getName(); if (name.equals(""3.7 FWVGA slider"")) { name = ""3.7in FWVGA slider""; } java.util.regex.Matcher matcher = com.android.sdkuilib.internal.widgets.AvdCreationPresenter.PATTERN.matcher(name); if (matcher.matches()) { java.lang.String size = matcher.group(1); java.lang.String n = matcher.group(2); int dot = size.indexOf('.'); if (dot == (-1)) { size = size + "".0""; dot = (size.length()) - 2; } for (int i = 0; i < (2 - dot); i++) { size = ' ' + size; } name = (size + ""\"" "") + n; } return java.lang.String.format(java.util.Locale.US, ""%1$s (%2$s)"", name, com.android.sdkuilib.internal.widgets.AvdCreationPresenter.getResolutionString(d)); }",03c0275998e70f84596df0b41edd3c11e9ff3f0b,getGenericLabel(com.android.sdklib.devices.Device),67133,250,259
361230,luni_src_main_java_libcore_util_TimeZoneFinder.java,,,,"public android.icu.util.TimeZone lookupTimeZoneByCountryAndOffset(java.lang.String countryIso, int offsetSeconds, boolean isDst, long whenMillis, android.icu.util.TimeZone bias) { java.util.List<android.icu.util.TimeZone> candidates = countryZones.get(countryIso); if ((candidates == null) || (candidates.isEmpty())) { return null; } android.icu.util.TimeZone firstMatch = null; android.icu.util.TimeZone biasMatch = null; for (int i = 0; i < (candidates.size()); i++) { android.icu.util.TimeZone match = candidates.get(i); if (!(libcore.util.TimeZoneFinder.offsetMatchesAtTime(match, offsetSeconds, isDst, whenMillis))) { continue; } if (firstMatch == null) { firstMatch = match; if (bias == null) { break; } } if (match.getID().equals(bias.getID())) { biasMatch = match; break; } } android.icu.util.TimeZone toReturn; if (biasMatch != null) { toReturn = biasMatch; } else if (firstMatch != null) { toReturn = firstMatch; } else { return null; } return toReturn; }",d019f4c771011e051f576cbb845910ea1458c0d0,,"lookupTimeZoneByCountryAndOffset(java.lang.String,int,boolean,long,android.icu.util.TimeZone)",8,12,"public android.icu.util.TimeZone lookupTimeZoneByCountryAndOffset(java.lang.String countryIso, int offsetSeconds, boolean isDst, long whenMillis, android.icu.util.TimeZone bias) { java.util.List<android.icu.util.TimeZone> candidates = lookupTimeZonesByCountry(countryIso); if ((candidates == null) || (candidates.isEmpty())) { return null; } android.icu.util.TimeZone firstMatch = null; for (int i = 0; i < (candidates.size()); i++) { android.icu.util.TimeZone match = candidates.get(i); if (!(libcore.util.TimeZoneFinder.offsetMatchesAtTime(match, offsetSeconds, isDst, whenMillis))) { continue; } if (firstMatch == null) { if (bias == null) { return match; } firstMatch = match; } if (match.getID().equals(bias.getID())) { return match; } } return firstMatch; }",f5bd54a32984d2f972ff656f2162ea7e121dae43,"lookupTimeZoneByCountryAndOffset(java.lang.String,int,boolean,long,android.icu.util.TimeZone)",429183,292,228
143360,services_core_java_com_android_server_wm_DimLayer.java,4.0,"void setBounds(android.graphics.Rect bounds) { mBounds.set(bounds); if ((isDimming()) && (!(mLastBounds.equals(bounds)))) { adjustSurface(mLayer, false); } }",65475699c0c676f66e99879eb43c4151d0846bb1,"void setBounds(android.graphics.Rect bounds) { mBounds.set(bounds); if ((isDimming()) && (!(mLastBounds.equals(bounds)))) { adjustSurface(mLayer, false, true); } }",2419f142cd201f7d6e27491f3a2f0dcf989718aa,setBounds(android.graphics.Rect),setBounds(android.graphics.Rect),4,10,"void setBounds(android.graphics.Rect bounds, boolean inTransaction) { mBounds.set(bounds); if ((isDimming()) && (!(mLastBounds.equals(bounds)))) { try { if (!inTransaction) { android.view.SurfaceControl.openTransaction(); } adjustBounds(); } catch (java.lang.RuntimeException e) { android.util.Slog.w(com.android.server.wm.DimLayer.TAG, ""Failure setting size"", e); } finally { if (!inTransaction) { android.view.SurfaceControl.closeTransaction(); } } } }",7080258e2f4e4228b32a51f0e048429ecfcd2bb6,"setBounds(android.graphics.Rect,boolean)",101637,49,126
319849,tests_src_com_android_networkrecommendation_WifiWakeupControllerTest.java,12.0,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mWifiWakeupEnabledOriginalValue = Settings.Global.getInt(mContentResolver, Settings.Global.WIFI_WAKEUP_ENABLED, 0); mAirplaneModeOriginalValue = Settings.Global.getInt(mContentResolver, Settings.Global.AIRPLANE_MODE_ON, 0); Settings.Global.putInt(mContentResolver, Settings.Global.WIFI_WAKEUP_ENABLED, 1); Settings.Global.putInt(mContentResolver, Settings.Global.AIRPLANE_MODE_ON, 0); mWifiWakeupController = new com.android.networkrecommendation.WifiWakeupController(mContext, mContentResolver, android.os.Looper.getMainLooper(), mWifiManager, mWifiWakeupNetworkSelector); mWifiWakeupController.start(); verify(mContext).registerReceiver(mBroadcastReceiverCaptor.capture(), any(android.content.IntentFilter.class), anyString(), any(android.os.Handler.class)); mBroadcastReceiver = mBroadcastReceiverCaptor.getValue(); com.android.networkrecommendation.Util.sendWifiApStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_AP_STATE_DISABLED); }",02baf2ac11df7664dc2f503af894005a09f567d4,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mWifiWakeupEnabledOriginalValue = Settings.Global.getInt(mContentResolver, Settings.Global.WIFI_WAKEUP_ENABLED, 0); mAirplaneModeOriginalValue = Settings.Global.getInt(mContentResolver, Settings.Global.AIRPLANE_MODE_ON, 0); Settings.Global.putInt(mContentResolver, Settings.Global.WIFI_WAKEUP_ENABLED, 1); Settings.Global.putInt(mContentResolver, Settings.Global.AIRPLANE_MODE_ON, 0); mWifiWakeupController = new com.android.networkrecommendation.WifiWakeupController(mContext, mContentResolver, android.os.Looper.getMainLooper(), mWifiManager, mWifiWakeupNetworkSelector, null); mWifiWakeupController.start(); verify(mContext).registerReceiver(mBroadcastReceiverCaptor.capture(), any(android.content.IntentFilter.class), anyString(), any(android.os.Handler.class)); mBroadcastReceiver = mBroadcastReceiverCaptor.getValue(); com.android.networkrecommendation.Util.sendWifiApStateChanged(mBroadcastReceiver, mContext, WifiManager.WIFI_AP_STATE_DISABLED); }",7c343e6b1564c47277c39740249f653f3cf6d9d4,setUp(),setUp(),10,11,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mWifiWakeupEnabledOriginalValue = Settings.Global.getInt(mContentResolver, Settings.Global.WIFI_WAKEUP_ENABLED, 0); mAirplaneModeOriginalValue = Settings.Global.getInt(mContentResolver, Settings.Global.AIRPLANE_MODE_ON, 0); Settings.Global.putInt(mContentResolver, Settings.Global.WIFI_WAKEUP_ENABLED, 1); Settings.Global.putInt(mContentResolver, Settings.Global.AIRPLANE_MODE_ON, 0); when(mWifiManager.getWifiApState()).thenReturn(WifiManager.WIFI_AP_STATE_DISABLED); mWifiWakeupController = new com.android.networkrecommendation.WifiWakeupController(mContext, mContentResolver, android.os.Looper.getMainLooper(), mWifiManager, mWifiWakeupNetworkSelector, mWifiWakeupNotificationHelper); mWifiWakeupController.start(); verify(mContext).registerReceiver(mBroadcastReceiverCaptor.capture(), any(android.content.IntentFilter.class), anyString(), any(android.os.Handler.class)); mBroadcastReceiver = mBroadcastReceiverCaptor.getValue(); }",1c4d0b3d310516ded3af915b3a3fdb03f374c604,setUp(),110424,264,259
116997,telecomm_java_android_telecom_Connection.java,23.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected final void updateConferenceParticipants(java.util.List<android.telecom.ConferenceParticipant> conferenceParticipants) { for (android.telecom.Connection.Listener l : mListeners) { l.onConferenceParticipantsChanged(this, conferenceParticipants); } }",14e6aefb22dc7c2f831d21e3e6efc336405e91ea,,updateConferenceParticipants(java.util.List),2,22,"protected final void updateConferenceParticipant(android.telecom.ConferenceParticipant conferenceParticipant) { for (android.telecom.Connection.Listener l : mListeners) { l.onConferenceParticipantChanged(this, conferenceParticipant); } }",676e5c8a6ae6e18858baff0dc080ade842082c9e,updateConferenceParticipant(android.telecom.ConferenceParticipant),188247,64,53
285003,tools_ahat_test_InstanceTest.java,,,,"@org.junit.Test public void gcRootPath() throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump(); com.android.ahat.heapdump.AhatClassObj main = dump.getAhatSnapshot().findClass(""Main""); com.android.ahat.heapdump.AhatInstance gcPathArray = dump.getDumpedAhatInstance(""gcPathArray""); com.android.ahat.heapdump.Value value = gcPathArray.asArrayInstance().getValue(2); com.android.ahat.heapdump.AhatInstance base = value.asAhatInstance(); com.android.ahat.heapdump.AhatInstance left = base.asClassInstance().getRefField(""left""); com.android.ahat.heapdump.AhatInstance right = base.asClassInstance().getRefField(""right""); com.android.ahat.heapdump.AhatInstance target = left.asClassInstance().getRefField(""right""); java.util.List<com.android.ahat.heapdump.PathElement> path = target.getPathFromGcRoot(); assertEquals(6, path.size()); assertEquals(main, path.get(0).instance); assertEquals("".stuff"", path.get(0).field); assertTrue(path.get(0).isDominator); assertEquals("".gcPathArray"", path.get(1).field); assertTrue(path.get(1).isDominator); assertEquals(gcPathArray, path.get(2).instance); assertEquals(""[2]"", path.get(2).field); assertTrue(path.get(2).isDominator); assertEquals(base, path.get(3).instance); assertTrue(path.get(3).isDominator); if (path.get(3).field.equals("".left"")) { assertEquals("".left"", path.get(3).field); assertEquals(left, path.get(4).instance); assertEquals("".right"", path.get(4).field); assertFalse(path.get(4).isDominator); } else { assertEquals("".right"", path.get(3).field); assertEquals(right, path.get(4).instance); assertEquals("".left"", path.get(4).field); assertFalse(path.get(4).isDominator); } assertEquals(target, path.get(5).instance); assertEquals("""", path.get(5).field); assertTrue(path.get(5).isDominator); }",6af1214ff13e350ef39d23acdb2b1d5392d75c87,,gcRootPath(),7,4,"@org.junit.Test public void gcRootPath() throws java.io.IOException { com.android.ahat.TestDump dump = com.android.ahat.TestDump.getTestDump(); com.android.ahat.heapdump.AhatClassObj main = dump.getAhatSnapshot().findClass(""Main""); com.android.ahat.heapdump.AhatInstance gcPathArray = dump.getDumpedAhatInstance(""gcPathArray""); com.android.ahat.heapdump.Value value = gcPathArray.asArrayInstance().getValue(2); com.android.ahat.heapdump.AhatInstance base = value.asAhatInstance(); com.android.ahat.heapdump.AhatInstance left = base.getRefField(""left""); com.android.ahat.heapdump.AhatInstance right = base.getRefField(""right""); com.android.ahat.heapdump.AhatInstance target = left.getRefField(""right""); java.util.List<com.android.ahat.heapdump.PathElement> path = target.getPathFromGcRoot(); assertEquals(6, path.size()); assertEquals(main, path.get(0).instance); assertEquals("".stuff"", path.get(0).field); assertTrue(path.get(0).isDominator); assertEquals("".gcPathArray"", path.get(1).field); assertTrue(path.get(1).isDominator); assertEquals(gcPathArray, path.get(2).instance); assertEquals(""[2]"", path.get(2).field); assertTrue(path.get(2).isDominator); assertEquals(base, path.get(3).instance); assertTrue(path.get(3).isDominator); if (path.get(3).field.equals("".left"")) { assertEquals("".left"", path.get(3).field); assertEquals(left, path.get(4).instance); assertEquals("".right"", path.get(4).field); assertFalse(path.get(4).isDominator); } else { assertEquals("".right"", path.get(3).field); assertEquals(right, path.get(4).instance); assertEquals("".left"", path.get(4).field); assertFalse(path.get(4).isDominator); } assertEquals(target, path.get(5).instance); assertEquals("""", path.get(5).field); assertTrue(path.get(5).isDominator); }",2781c6b0d7c6f0f8fd15e8bf88c9d67f6aef0ef6,gcRootPath(),183502,510,498
124410,perflib_src_main_java_com_android_tools_perflib_heap_Instance.java,17.0,public final int getCompositeSize() { com.android.tools.perflib.heap.Instance.CollectingVisitor visitor = new com.android.tools.perflib.heap.Instance.CollectingVisitor(); this.accept(visitor); int size = 0; for (com.android.tools.perflib.heap.Instance instance : visitor.getVisited()) { size += instance.getSize(); } return size; },a5426cf6d48197ac6df44f804763c1b9a08e4d51,public final int getCompositeSize() { com.android.tools.perflib.heap.Instance.CollectingVisitor visitor = new com.android.tools.perflib.heap.Instance.CollectingVisitor(); visitor.visit(this); int size = 0; for (com.android.tools.perflib.heap.Instance instance : visitor.getVisited()) { size += instance.getSize(); } return size; },93571b7878e36e1e3e784269d2c995b55c0ed1e9,getCompositeSize(),getCompositeSize(),5,16,public final int getCompositeSize() { com.android.tools.perflib.heap.Instance.CompositeSizeVisitor visitor = new com.android.tools.perflib.heap.Instance.CompositeSizeVisitor(); visitor.doVisit(com.google.common.collect.ImmutableList.of(this)); return visitor.getCompositeSize(); },933cf59c2c92f150db9244f7d14516de926f3d7e,getCompositeSize(),245552,88,71
399252,core_java_android_net_ConnectivityManager.java,91.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@android.net.RequiresPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL) public void startCaptivePortalApp(android.net.Network network) { try { mService.startCaptivePortalApp(network); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },cccbcdc3211298e122857f16d685bba72c20ed80,,startCaptivePortalApp(android.net.Network),2,43,@android.annotation.RequiresPermission(android.Manifest.permission.CONNECTIVITY_INTERNAL) public void startCaptivePortalApp(android.net.Network network) { try { mService.startCaptivePortalApp(network); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },d31118c3e6613403ab3630103cac26a23895ab9b,startCaptivePortalApp(android.net.Network),60847,68,68
638760,tests_tests_net_src_android_net_cts_MultinetworkSysctlTest.java,0.0,"public void testProcFiles() throws android.system.ErrnoException, java.io.IOException, java.lang.NumberFormatException { for (java.lang.String sysctl : android.net.cts.MultinetworkSysctlTest.GLOBAL_SYSCTLS) { checkSysctlPermissions(sysctl); int value = java.lang.Integer.parseInt(readFile(sysctl).trim()); assertEquals(((""value of "" + sysctl) + "":""), 1, value); } java.io.File[] interfaceDirs = new java.io.File(android.net.cts.MultinetworkSysctlTest.IPV6_SYSCTL_DIR).listFiles(); for (java.io.File interfaceDir : interfaceDirs) { if ((interfaceDir.getName().equals(""all"")) || (interfaceDir.getName().equals(""lo""))) { continue; } java.lang.String sysctl = new java.io.File(interfaceDir, android.net.cts.MultinetworkSysctlTest.AUTOCONF_SYSCTL).getAbsolutePath(); checkSysctlPermissions(sysctl); int value = java.lang.Integer.parseInt(readFile(sysctl).trim()); assertLess(((""value of "" + sysctl) + "":""), value, 0); } }",efb5259682fb05a25d0c06be7c989aa99c93d729,"public void testProcFiles() throws android.system.ErrnoException, java.io.IOException, java.lang.NumberFormatException { for (java.lang.String sysctl : android.net.cts.MultinetworkSysctlTest.GLOBAL_SYSCTLS) { int value = getValue(sysctl); assertEquals(sysctl, 1, value); } java.io.File[] interfaceDirs = new java.io.File(android.net.cts.MultinetworkSysctlTest.IPV6_SYSCTL_DIR).listFiles(); for (java.io.File interfaceDir : interfaceDirs) { if ((interfaceDir.getName().equals(""all"")) || (interfaceDir.getName().equals(""lo""))) { continue; } java.lang.String sysctl = new java.io.File(interfaceDir, android.net.cts.MultinetworkSysctlTest.AUTOCONF_SYSCTL).getAbsolutePath(); int value = getValue(sysctl); assertLess(sysctl, value, 0); } }",c32417a8674648a86d7c394c849189ab2916416b,testProcFiles(),testProcFiles(),5,0,"public void testProcFiles() throws android.system.ErrnoException, java.io.IOException, java.lang.NumberFormatException { for (java.lang.String sysctl : android.net.cts.MultinetworkSysctlTest.GLOBAL_SYSCTLS) { int value = getIntValue(sysctl); assertEquals(sysctl, 1, value); } java.io.File[] interfaceDirs = new java.io.File(android.net.cts.MultinetworkSysctlTest.IPV6_SYSCTL_DIR).listFiles(); for (java.io.File interfaceDir : interfaceDirs) { if ((interfaceDir.getName().equals(""all"")) || (interfaceDir.getName().equals(""lo""))) { continue; } java.lang.String sysctl = new java.io.File(interfaceDir, android.net.cts.MultinetworkSysctlTest.AUTOCONF_SYSCTL).getAbsolutePath(); int value = getIntValue(sysctl); assertLess(sysctl, value, 0); } }",9d61d7cad2c046e1e056143b6d73cb005836746a,testProcFiles(),478490,220,222
117753,jack-tests_tests_com_android_jack_opcodes_OpcodesTests.java,19.0,"@org.junit.Test public void if_lt() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(IF_LT).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",a7673aaaee6edb03ce585c364eae18731537b07c,"@org.junit.Test public void if_lt() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(IF_LT).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",dfbc514bd6f33543dd65f06d9afc67534fc0e5f7,if_lt(),if_lt(),4,19,"@org.junit.Test public void if_lt() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(IF_LT).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",165f2fe873172680b170c57e42a03201c5847bce,if_lt(),418923,109,107
600834,core_java_android_net_TrafficStats.java,46.0,public static long getMobileTxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { total += android.net.TrafficStats.getTxBytes(iface); } return total; },ce1a6cf40d25c3bbd0b307ea2ac6b17eb86f0370,public static long getMobileTxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { long stat = android.net.TrafficStats.UNSUPPORTED; stat = android.net.TrafficStats.getTxBytes(iface); if (stat != (android.net.TrafficStats.UNSUPPORTED)) { total += stat; } } return total; },9fa1dca1e8589b1d4888956b90d7bf2ef304a69c,getMobileTxBytes(),getMobileTxBytes(),2,47,public static long getMobileTxBytes() { long total = 0; for (java.lang.String iface : android.net.TrafficStats.getMobileIfaces()) { total += android.net.TrafficStats.addIfSupported(android.net.TrafficStats.getTxBytes(iface)); } return total; },dc638d1db5c7ce941fdb3acd8b2a8375ca03e0fd,getMobileTxBytes(),267970,89,68
361230,luni_src_test_java_libcore_util_TimeZoneFinderTest.java,,,,"@org.junit.Test public void xmlParsing_missingCountryCode() throws java.lang.Exception { libcore.util.TimeZoneFinderTest.checkThrowsParserException((""<timezones>\n"" + ((((("" <countryzones>\n"" + "" <country>\n"") + "" <id>Europe/London</id>\n"") + "" </country>\n"") + "" </countryzones>\n"") + ""</timezones>\n""))); }",44465e24b499c5b199ce8c29bf618c772c70e21c,,xmlParsing_missingCountryCode(),8,20,"@org.junit.Test public void xmlParsing_missingCountryCode() throws java.lang.Exception { libcore.util.TimeZoneFinderTest.checkValidateThrowsParserException((""<timezones>\n"" + ((((("" <countryzones>\n"" + "" <country>\n"") + "" <id>Europe/London</id>\n"") + "" </country>\n"") + "" </countryzones>\n"") + ""</timezones>\n""))); }",342b3109d008fa3aaba88cb670b9194ed5c1aecd,xmlParsing_missingCountryCode(),429174,98,99
91995,luni_src_main_java_libcore_io_Os.java,24.0,"public int poll(libcore.io.StructPollfd[] fds, int timeoutMs) throws libcore.io.ErrnoException;",74e5a255ba04fc4154b27b558de6ed2a75bd6319,"public int poll(android.os.StructPollfd[] fds, int timeoutMs) throws android.os.ErrnoException;",f4a184ba64140314a1a78e2aeeab684bebbddc36,"poll(libcore.io.StructPollfd[],int)","poll(android.os.StructPollfd[],int)",3,60,"public int poll(android.system.StructPollfd[] fds, int timeoutMs) throws android.system.ErrnoException;",bd295d4e595b34a6bece62e8e72d5abe7072cbba,"poll(android.system.StructPollfd[],int)",170210,28,28
91995,luni_src_main_java_java_nio_FileChannelImpl.java,2.0,"public java.nio.channels.FileChannel position(long newPosition) throws java.io.IOException { checkOpen(); if (newPosition < 0) { throw new java.lang.IllegalArgumentException((""position: "" + newPosition)); } try { Libcore.os.lseek(fd, newPosition, java.nio.SEEK_SET); } catch (libcore.io.ErrnoException errnoException) { throw errnoException.rethrowAsIOException(); } return this; }",955393152f260f0759dd580d6e4ac0b065901d42,"public java.nio.channels.FileChannel position(long newPosition) throws java.io.IOException { checkOpen(); if (newPosition < 0) { throw new java.lang.IllegalArgumentException((""position: "" + newPosition)); } try { Libcore.os.lseek(fd, newPosition, java.nio.SEEK_SET); } catch (android.os.ErrnoException errnoException) { throw errnoException.rethrowAsIOException(); } return this; }",30ba869e35c657fe5ff817b1ec1034beda5ffa79,position(long),position(long),3,2,"public java.nio.channels.FileChannel position(long newPosition) throws java.io.IOException { checkOpen(); if (newPosition < 0) { throw new java.lang.IllegalArgumentException((""position: "" + newPosition)); } try { Libcore.os.lseek(fd, newPosition, java.nio.SEEK_SET); } catch (android.system.ErrnoException errnoException) { throw errnoException.rethrowAsIOException(); } return this; }",afaa24d6c9bf1becb39753e71be1c4d05522bce9,position(long),170141,103,103
35572,sdkmanager_libs_sdklib_src_com_android_sdklib_internal_repository_packages_PreviewVersion.java,,,,@java.lang.Override public int compareTo(com.android.sdklib.internal.repository.packages.PreviewVersion rhs) { int delta = (mMajor) - (rhs.mMajor); if (delta != 0) { return delta; } delta = (mMinor) - (rhs.mMinor); if (delta != 0) { return delta; } delta = (mMicro) - (rhs.mMicro); if (delta != 0) { return delta; } int p1 = ((mPreview) == (com.android.sdklib.internal.repository.packages.PreviewVersion.PREVIEW_NOT_SPECIFIED)) ? java.lang.Integer.MAX_VALUE : mPreview; int p2 = ((rhs.mPreview) == (com.android.sdklib.internal.repository.packages.PreviewVersion.PREVIEW_NOT_SPECIFIED)) ? java.lang.Integer.MAX_VALUE : rhs.mPreview; delta = p1 - p2; return delta; },2704523ef93a72ad46a01f1e80806ac75b130c57,,compareTo(com.android.sdklib.internal.repository.packages.PreviewVersion),5,8,@java.lang.Override public int compareTo(com.android.sdklib.internal.repository.packages.PreviewVersion rhs) { int delta = (mMajor) - (rhs.mMajor); if (delta != 0) { return delta; } delta = (mMinor) - (rhs.mMinor); if (delta != 0) { return delta; } delta = (mMicro) - (rhs.mMicro); if (delta != 0) { return delta; } int p1 = ((mPreview) == (com.android.sdklib.internal.repository.packages.PreviewVersion.NOT_A_PREVIEW)) ? java.lang.Integer.MAX_VALUE : mPreview; int p2 = ((rhs.mPreview) == (com.android.sdklib.internal.repository.packages.PreviewVersion.NOT_A_PREVIEW)) ? java.lang.Integer.MAX_VALUE : rhs.mPreview; delta = p1 - p2; return delta; },18a09f177c5b141566d5043328e8416c9fbaf338,compareTo(com.android.sdklib.internal.repository.packages.PreviewVersion),77125,213,211
253791,luni_src_main_java_libcore_io_Posix.java,125.0,"public native java.io.FileDescriptor dup2(java.io.FileDescriptor oldFd, int newFd) throws android.system.ErrnoException;",6ff7170bc481c427e37dc7ef9c57c4ae6a634514,"public native java.io.FileDescriptor dup2(java.io.FileDescriptor oldFd, int newFd) throws libcore.io.ErrnoException;",f2df9ccc3f102123c8cea3cf326e2eaefd95bba8,"dup2(java.io.FileDescriptor,int)","dup2(java.io.FileDescriptor,int)",8,124,"public native java.io.FileDescriptor dup2(java.io.FileDescriptor oldFd, int newFd) throws android.system.ErrnoException;",6ff7170bc481c427e37dc7ef9c57c4ae6a634514,"dup2(java.io.FileDescriptor,int)",494465,34,33
83593,luni_src_test_java_libcore_java_util_zip_ZipFileTest.java,18.0,"public void testZipFileLargerThan2GiB() throws java.io.IOException { if (false) { java.io.File f = createZipFile(1024, ((3 * 1024) * 1024)); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); int entryCount = 0; for (java.util.Enumeration<? extends java.util.zip.ZipEntry> e = zipFile.entries(); e.hasMoreElements();) { java.util.zip.ZipEntry zipEntry = e.nextElement(); ++entryCount; } assertEquals(1024, entryCount); zipFile.close(); } }",306337822c38f1f49eb889bf2ea528c8a01e69fe,"public void testZipFileLargerThan2GiB() throws java.io.IOException { if (false) { java.io.File f = createZipFile(1024, ((3 * 1024) * 1024)); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); int entryCount = countEntries(zipFile); assertEquals(1024, entryCount); zipFile.close(); } }",004712dceb048bc94a2ce9482abd64d21529e62f,testZipFileLargerThan2GiB(),testZipFileLargerThan2GiB(),11,4,"public void testNonUtf8Encoding() throws java.io.IOException { java.nio.charset.Charset charset = java.nio.charset.Charset.forName(""Cp437""); java.lang.String encodingDependentString = ""\u00fb""; assertEncodingDiffers(encodingDependentString, charset, java.nio.charset.StandardCharsets.US_ASCII, java.nio.charset.StandardCharsets.UTF_8); java.lang.String name = ""name"" + encodingDependentString; java.lang.String comment = ""comment"" + encodingDependentString; java.io.File result = createTemporaryZipFile(); java.io.OutputStream os = new java.io.BufferedOutputStream(new java.io.FileOutputStream(result)); java.util.zip.ZipOutputStream out = new java.util.zip.ZipOutputStream(os, charset); out.setComment(comment); java.util.zip.ZipEntry writeEntry = new java.util.zip.ZipEntry(name); writeEntry.setComment(comment); out.putNextEntry(writeEntry); out.write(""FileContentsIrrelevant"".getBytes()); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(result, java.nio.charset.StandardCharsets.US_ASCII); assertNull(zipFile.getEntry(name)); assertFalse(zipFile.getComment().equals(comment)); zipFile.close(); zipFile = new java.util.zip.ZipFile(result, charset); java.util.zip.ZipEntry readEntry = zipFile.getEntry(name); assertNotNull(readEntry); assertEquals(name, readEntry.getName()); assertEquals(comment, readEntry.getComment()); assertEquals(comment, zipFile.getComment()); zipFile.close(); }",6acaf1edf4d247885a563342418c7bc4308e7cf0,testNonUtf8Encoding(),111953,89,367
104053,luni_src_test_java_libcore_java_text_SimpleDateFormatTest.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test_nullLocales() { assertEquals(java.text.SimpleDateFormat.getDateInstance(java.text.DateFormat.SHORT, java.util.Locale.getDefault()), java.text.SimpleDateFormat.getDateInstance(java.text.DateFormat.SHORT, null)); assertEquals(java.text.SimpleDateFormat.getDateTimeInstance(java.text.DateFormat.SHORT, java.text.DateFormat.SHORT, java.util.Locale.getDefault()), java.text.SimpleDateFormat.getDateTimeInstance(java.text.DateFormat.SHORT, java.text.DateFormat.SHORT, null)); assertEquals(java.text.SimpleDateFormat.getTimeInstance(java.text.DateFormat.SHORT, java.util.Locale.getDefault()), java.text.SimpleDateFormat.getTimeInstance(java.text.DateFormat.SHORT, null)); }",0a9cd4a83ac9c6bd184062aad15079729cf5f5b1,,test_nullLocales(),3,15,"public void test_nullLocales() { try { java.text.SimpleDateFormat.getDateInstance(java.text.DateFormat.SHORT, null); fail(); } catch (java.lang.NullPointerException expected) { } try { java.text.SimpleDateFormat.getDateTimeInstance(java.text.DateFormat.SHORT, java.text.DateFormat.SHORT, null); fail(); } catch (java.lang.NullPointerException expected) { } try { java.text.SimpleDateFormat.getTimeInstance(java.text.DateFormat.SHORT, null); fail(); } catch (java.lang.NullPointerException expected) { } }",bb7eaaa6c7cd2ecb65ba71a397db04d62b9e4005,test_nullLocales(),275906,168,126
340904,test_952-invoke-custom_src_Main.java,1.0,"private static void TestLinkerMethodMultipleArgumentTypes() throws java.lang.Throwable { byte[] base64Data = TestDataLinkerMethodMultipleArgumentTypes.BASE64_DEX_FILE.getBytes(); java.util.Base64.Decoder decoder = java.util.Base64.getDecoder(); java.nio.ByteBuffer dexBuffer = java.nio.ByteBuffer.wrap(decoder.decode(base64Data)); dalvik.system.InMemoryDexClassLoader classLoader = new dalvik.system.InMemoryDexClassLoader(dexBuffer, java.lang.ClassLoader.getSystemClassLoader()); java.lang.Class<?> testClass = classLoader.loadClass(""TestLinkerMethodMultipleArgumentTypes""); java.lang.reflect.Method testMethod = testClass.getDeclaredMethod(""test"", int.class, int.class); testMethod.invoke(null, 33, 67); testMethod.invoke(null, (-10000), (+1000)); testMethod.invoke(null, (-1000), (+10000)); }",c02069fc8849226214ba1e7e5f0eaaf0bef6f859,"private static void testLinkerMethodMultipleArgumentTypes() throws java.lang.Throwable { byte[] base64Data = TestDataLinkerMethodMultipleArgumentTypes.BASE64_DEX_FILE.getBytes(); java.util.Base64.Decoder decoder = java.util.Base64.getDecoder(); java.nio.ByteBuffer dexBuffer = java.nio.ByteBuffer.wrap(decoder.decode(base64Data)); dalvik.system.InMemoryDexClassLoader classLoader = new dalvik.system.InMemoryDexClassLoader(dexBuffer, java.lang.ClassLoader.getSystemClassLoader()); java.lang.Class<?> testClass = classLoader.loadClass(""TestLinkerMethodMultipleArgumentTypes""); java.lang.reflect.Method testMethod = testClass.getDeclaredMethod(""test"", int.class, int.class); testMethod.invoke(null, 33, 67); testMethod.invoke(null, (-10000), (+1000)); testMethod.invoke(null, (-1000), (+10000)); }",d511237fae605a854e34221196be669f5f473dc6,TestLinkerMethodMultipleArgumentTypes(),testLinkerMethodMultipleArgumentTypes(),3,6,"private static void TestLinkerMethodMultipleArgumentTypes() throws java.lang.Throwable { byte[] base64Data = TestDataLinkerMethodMultipleArgumentTypes.BASE64_DEX_FILE.getBytes(); java.util.Base64.Decoder decoder = java.util.Base64.getDecoder(); java.nio.ByteBuffer dexBuffer = java.nio.ByteBuffer.wrap(decoder.decode(base64Data)); dalvik.system.InMemoryDexClassLoader classLoader = new dalvik.system.InMemoryDexClassLoader(dexBuffer, java.lang.ClassLoader.getSystemClassLoader()); java.lang.Class<?> testClass = classLoader.loadClass(""TestLinkerMethodMultipleArgumentTypes""); java.lang.reflect.Method testMethod = testClass.getDeclaredMethod(""test"", int.class, int.class); testMethod.invoke(null, 33, 67); testMethod.invoke(null, (-10000), (+1000)); testMethod.invoke(null, (-1000), (+10000)); }",c02069fc8849226214ba1e7e5f0eaaf0bef6f859,TestLinkerMethodMultipleArgumentTypes(),240373,201,201
93693,sdk-common_src_main_java_com_android_ide_common_repository_GradleCoordinate.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public int hashCode() { return myItems.hashCode(); },869999bbf4c8530d4c04a1bef927812518c43f7c,,hashCode(),2,13,@java.lang.Override public int hashCode() { return mItems.hashCode(); },3f6d931c55ed361a7a3682a5d19d90be112027d5,hashCode(),406811,18,18
362753,tests_wifitests_src_com_android_server_wifi_WifiServiceImplTest.java,18.0,"@org.junit.Test public void testSetWifiDisabledNoToggle() throws java.lang.Exception { when(mSettingsStore.handleWifiToggled(eq(false))).thenReturn(false); assertTrue(mWifiServiceImpl.setWifiEnabled(com.android.server.wifi.WifiServiceImplTest.TEST_PACKAGE_NAME, false)); verify(mWifiController, never()).obtainMessageAndSend(eq(com.android.server.wifi.WifiController.CMD_WIFI_TOGGLED)); }",53b37d3cb3283df149976c22b3f4f497ef0a41f9,"@org.junit.Test public void testSetWifiDisabledNoToggle() throws java.lang.Exception { when(mWifiStateMachine.syncGetWifiApState()).thenReturn(WifiManager.WIFI_AP_STATE_DISABLED); when(mSettingsStore.handleWifiToggled(eq(false))).thenReturn(false); assertTrue(mWifiServiceImpl.setWifiEnabled(com.android.server.wifi.WifiServiceImplTest.TEST_PACKAGE_NAME, false)); verify(mWifiController, never()).obtainMessageAndSend(eq(com.android.server.wifi.WifiController.CMD_WIFI_TOGGLED)); }",02a3b1f2c1f9a4dcb7e93d0686ccb93ca177016c,testSetWifiDisabledNoToggle(),testSetWifiDisabledNoToggle(),3,21,"@org.junit.Test public void testSetWifiDisabledNoToggle() throws java.lang.Exception { when(mWifiStateMachine.syncGetWifiApState()).thenReturn(WifiManager.WIFI_AP_STATE_DISABLED); when(mSettingsStore.handleWifiToggled(eq(false))).thenReturn(false); assertTrue(mWifiServiceImpl.setWifiEnabled(com.android.server.wifi.WifiServiceImplTest.TEST_PACKAGE_NAME, false)); verify(mWifiController, never()).sendMessage(eq(com.android.server.wifi.WifiController.CMD_WIFI_TOGGLED)); }",2bac584e5f8f5c6ad8671ae52bf4b7586a5a2690,testSetWifiDisabledNoToggle(),288900,134,131
52373,androidtestlib_src_com_android_test_runner_AndroidJUnitRunner.java,10.0,"private void addListener(java.util.List<org.junit.runner.notification.RunListener> list, org.junit.runner.JUnitCore testRunner, org.junit.runner.notification.RunListener listener) { list.add(listener); testRunner.addListener(listener); }",def2795cd9ed02e7557bade38cc56694c31bf1fd,"protected final void addListener(org.junit.runner.notification.RunListener listener) { if ((mListeners) == null) { throw new java.lang.IllegalStateException(""You may only call addListener from onTestRunnerCreated""); } mListeners.add(listener); mTestRunner.addListener(listener); }",ae9bb15e13e5507ef0d8d9bf886aaba61f33b23c,"addListener(java.util.List,org.junit.runner.JUnitCore,org.junit.runner.notification.RunListener)",addListener(org.junit.runner.notification.RunListener),3,14,"private void addListener(java.util.List<org.junit.runner.notification.RunListener> list, org.junit.runner.JUnitCore testRunner, org.junit.runner.notification.RunListener listener) { list.add(listener); testRunner.addListener(listener); }",def2795cd9ed02e7557bade38cc56694c31bf1fd,"addListener(java.util.List,org.junit.runner.JUnitCore,org.junit.runner.notification.RunListener)",55863,65,61
584046,src_com_android_providers_telephony_TelephonyProvider.java,6.0,"private void restoreDefaultAPN(int subId) { android.database.sqlite.SQLiteDatabase db = getWritableDatabase(); try { db.delete(com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE, com.android.providers.telephony.TelephonyProvider.IS_NOT_OWNED_BY_DPC, null); } catch (android.database.SQLException e) { com.android.providers.telephony.TelephonyProvider.loge((""got exception when deleting to restore: "" + e)); } android.content.SharedPreferences spApnId = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApnId = spApnId.edit(); editorApnId.clear(); editorApnId.apply(); android.content.SharedPreferences spApn = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_FULL_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApn = spApn.edit(); editorApn.clear(); editorApn.apply(); if (com.android.providers.telephony.TelephonyProvider.apnSourceServiceExists(getContext())) { restoreApnsWithService(); } else { initDatabaseWithDatabaseHelper(db); } }",dc7a923f8b8f5d1ed672063db2d7d8657086d555,"private void restoreDefaultAPN(int subId) { android.database.sqlite.SQLiteDatabase db = getWritableDatabase(); java.lang.String where = getWhereClauseForRestoreDefaultApn(db, subId); com.android.providers.telephony.TelephonyProvider.log((""restoreDefaultAPN: where: "" + where)); if (android.text.TextUtils.isEmpty(where)) { com.android.providers.telephony.TelephonyProvider.loge(""Cannot get where clause to restore APN""); where = com.android.providers.telephony.TelephonyProvider.IS_NOT_OWNED_BY_DPC; } try { db.delete(com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE, where, null); } catch (android.database.SQLException e) { com.android.providers.telephony.TelephonyProvider.loge((""got exception when deleting to restore: "" + e)); } android.content.SharedPreferences spApnId = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApnId = spApnId.edit(); editorApnId.clear(); editorApnId.apply(); android.content.SharedPreferences spApn = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_FULL_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApn = spApn.edit(); editorApn.clear(); editorApn.apply(); if (com.android.providers.telephony.TelephonyProvider.apnSourceServiceExists(getContext())) { restoreApnsWithService(); } else { initDatabaseWithDatabaseHelper(db); } }",92f72c83d4d9535836ec5da31943f0fbca2327e8,restoreDefaultAPN(int),restoreDefaultAPN(int),5,7,"private void restoreDefaultAPN(int subId) { android.database.sqlite.SQLiteDatabase db = getWritableDatabase(); android.telephony.TelephonyManager telephonyManager = ((android.telephony.TelephonyManager) (getContext().getSystemService(Context.TELEPHONY_SERVICE))); java.lang.String where = null; if ((telephonyManager.getPhoneCount()) > 1) { where = getWhereClauseForRestoreDefaultApn(db, subId); } if (android.text.TextUtils.isEmpty(where)) { where = com.android.providers.telephony.TelephonyProvider.IS_NOT_OWNED_BY_DPC; } com.android.providers.telephony.TelephonyProvider.log((""restoreDefaultAPN: where: "" + where)); try { db.delete(com.android.providers.telephony.TelephonyProvider.CARRIERS_TABLE, where, null); } catch (android.database.SQLException e) { com.android.providers.telephony.TelephonyProvider.loge((""got exception when deleting to restore: "" + e)); } android.content.SharedPreferences spApnId = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApnId = spApnId.edit(); editorApnId.clear(); editorApnId.apply(); android.content.SharedPreferences spApn = getContext().getSharedPreferences(com.android.providers.telephony.TelephonyProvider.PREF_FILE_FULL_APN, Context.MODE_PRIVATE); android.content.SharedPreferences.Editor editorApn = spApn.edit(); editorApn.clear(); editorApn.apply(); if (com.android.providers.telephony.TelephonyProvider.apnSourceServiceExists(getContext())) { restoreApnsWithService(); } else { initDatabaseWithDatabaseHelper(db); } }",54d3b687cadb4927403fa44a0945dd4a953f55f9,restoreDefaultAPN(int),264298,407,432
23690,monkeyrunner_src_com_android_monkeyrunner_controller_MonkeyController.java,2.0,@java.lang.Override public void run() { com.android.monkeyrunner.core.IMonkeyBackend adb = new com.android.monkeyrunner.adb.AdbBackend(); final com.android.monkeyrunner.core.IMonkeyDevice device = adb.waitForConnection(); com.android.monkeyrunner.controller.MonkeyControllerFrame mf = new com.android.monkeyrunner.controller.MonkeyControllerFrame(device); mf.setVisible(true); mf.addWindowListener(new java.awt.event.WindowAdapter() { @java.lang.Override public void windowClosed(java.awt.event.WindowEvent e) { device.dispose(); } }); },eb7a6a0d84c6d2069d3cf6ae766fe0b65e48266f,"@java.lang.Override public void run() { java.util.Map<java.lang.String, java.lang.String> options = new java.util.TreeMap<java.lang.String, java.lang.String>(); options.put(""backend"", ""adb""); com.android.chimpchat.ChimpChat chimpchat = new com.android.chimpchat.ChimpChat(options); final com.android.chimpchat.core.IChimpDevice device = chimpchat.waitForConnection(); com.android.monkeyrunner.controller.MonkeyControllerFrame mf = new com.android.monkeyrunner.controller.MonkeyControllerFrame(device); mf.setVisible(true); mf.addWindowListener(new java.awt.event.WindowAdapter() { @java.lang.Override public void windowClosed(java.awt.event.WindowEvent e) { device.dispose(); } }); }",e9436316680828ad2dc51e44d614c54160c4bd31,run(),run(),7,2,"@java.lang.Override public void run() { java.util.Map<java.lang.String, java.lang.String> options = new java.util.TreeMap<java.lang.String, java.lang.String>(); options.put(""backend"", ""adb""); com.android.chimpchat.ChimpChat chimpchat = com.android.chimpchat.ChimpChat.getInstance(options); final com.android.chimpchat.core.IChimpDevice device = chimpchat.waitForConnection(); com.android.monkeyrunner.controller.MonkeyControllerFrame mf = new com.android.monkeyrunner.controller.MonkeyControllerFrame(device); mf.setVisible(true); mf.addWindowListener(new java.awt.event.WindowAdapter() { @java.lang.Override public void windowClosed(java.awt.event.WindowEvent e) { device.dispose(); } }); }",500f7fe9309d7f66abee165bd28358112793b2ef,run(),265816,196,197
257520,jack_src_com_android_jack_cfg_CfgBuilder.java,15.0,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JThrowStatement throwStmt) { super.visit(throwStmt); com.android.jack.cfg.ThrowBasicBlock throwBlock = new com.android.jack.cfg.ThrowBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(throwBlock); forwardBranchResolver.addPeiBasicBlock(throwBlock, null, throwStmt.getJCatchBlocks()); throwBlock.setExitBlockWhenUncaught(exitBlock); return false; }",c5a5e65b4e2b0be8dbecfafff2d704ee60a53842,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JThrowStatement throwStmt) { super.visit(throwStmt); com.android.jack.cfg.ThrowBasicBlock throwBlock = new com.android.jack.cfg.ThrowBasicBlock(((basicBlockId)++), currentStmts); tracer.getStatistic(com.android.jack.cfg.CfgBuilder.CREATED_BASIC_BLOCK).incValue(); setBlockOfStatement(throwBlock); forwardBranchResolver.addPeiBasicBlock(throwBlock, null, throwStmt.getJCatchBlocks()); throwBlock.setExitBlockWhenUncaught(exitBlock); return false; }",e66232fa9fa3338452b98acd1b4b87c1e40570d8,visit(com.android.jack.ir.ast.JThrowStatement),visit(com.android.jack.ir.ast.JThrowStatement),5,15,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JThrowStatement throwStmt) { super.visit(throwStmt); com.android.jack.cfg.ThrowBasicBlock throwBlock = new com.android.jack.cfg.ThrowBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(throwBlock); forwardBranchResolver.addPeiBasicBlock(throwBlock, null, throwStmt.getJCatchBlocks()); throwBlock.setExitBlockWhenUncaught(exitBlock); return false; }",c5a5e65b4e2b0be8dbecfafff2d704ee60a53842,visit(com.android.jack.ir.ast.JThrowStatement),97,149,124
41115,src_java_com_android_internal_telephony_UiccCardApplication.java,,,,public boolean getIccFdnEnabled() { return mIccFdnEnabled; },ac8ac5923b38f10322b1ec9a3d02b3d3ca649adc,,getIccFdnEnabled(),22,14,public boolean getIccFdnEnabled() { synchronized(mLock) { return mIccFdnEnabled; } },0cd771e6aa3a64d266f3d9148fb978c9958cd04d,getIccFdnEnabled(),499269,19,26
73670,harmony-tests_src_test_java_org_apache_harmony_tests_java_nio_channels_DatagramChannelTest.java,51.0,"public void testSocket_Block_BasicStatusAfterConnect() throws java.io.IOException { this.channel1.connect(localAddr1); java.net.DatagramSocket s1 = this.channel1.socket(); assertSocketAfterConnect(s1); java.net.DatagramSocket s2 = this.channel1.socket(); assertSame(s1, s2); }",7d158f0050b672667142d4e96c17421571c42ba5,"public void testSocket_Block_BasicStatusAfterConnect() throws java.io.IOException { this.channel1.connect(datagramSocket1Address); java.net.DatagramSocket s1 = this.channel1.socket(); assertSocketAfterConnect(s1); java.net.DatagramSocket s2 = this.channel1.socket(); assertSame(s1, s2); }",8257d2f6b25b90355290659a71734a6217d01bc8,testSocket_Block_BasicStatusAfterConnect(),testSocket_Block_BasicStatusAfterConnect(),2,52,"public void testSocket_Block_BasicStatusAfterConnect() throws java.io.IOException { final java.nio.channels.DatagramChannel dc = java.nio.channels.DatagramChannel.open(); dc.connect(datagramSocket1Address); java.net.DatagramSocket s1 = dc.socket(); assertSocketAfterConnect(s1); java.net.DatagramSocket s2 = dc.socket(); assertSame(s1, s2); }",a5fb09f8469847d3d40e37a8f62e3df8dff5b065,testSocket_Block_BasicStatusAfterConnect(),95847,79,93
413039,luni_src_test_java_libcore_java_text_OldAttributedStringTest.java,8.0,"public void test_addAttributesLjava_util_MapII() { java.text.AttributedString as = new java.text.AttributedString(""test""); java.util.Map<java.text.AttributedCharacterIterator.Attribute, java.lang.String> whm = new java.util.WeakHashMap<java.text.AttributedCharacterIterator.Attribute, java.lang.String>(); try { whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute(""test1""), ""value1""); whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute(""test2""), ""value2""); whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute(""test3""), ""value3""); as.addAttributes(whm, 0, 3); } catch (java.lang.Exception e) { fail((""Unexpected exception "" + (e.toString()))); } try { as.addAttributes(null, 0, 3); fail(""Expected NullPointerException was not thrown""); } catch (java.lang.NullPointerException e) { } try { as.addAttributes(whm, 0, 0); fail(""Expected IllegalArgumentException was not thrown""); } catch (java.lang.IllegalArgumentException e) { } }",9e37e0e852af02992f4a26f87d3977399b9f5bfb,"public void test_addAttributesLjava_util_MapII() { java.text.AttributedString as = new java.text.AttributedString(""test""); java.util.Map<java.text.AttributedCharacterIterator.Attribute, java.lang.String> whm = new java.util.HashMap<java.text.AttributedCharacterIterator.Attribute, java.lang.String>(); try { whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute(""test1""), ""value1""); whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute(""test2""), ""value2""); whm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute(""test3""), ""value3""); as.addAttributes(whm, 0, 3); } catch (java.lang.Exception e) { fail((""Unexpected exception "" + (e.toString()))); } try { as.addAttributes(null, 0, 3); fail(""Expected NullPointerException was not thrown""); } catch (java.lang.NullPointerException e) { } try { as.addAttributes(whm, 0, 0); fail(""Expected IllegalArgumentException was not thrown""); } catch (java.lang.IllegalArgumentException e) { } }",171f2426670adb84307b7c4ea2e026e353a7e75c,test_addAttributesLjava_util_MapII(),test_addAttributesLjava_util_MapII(),3,8,"public void test_addAttributesLjava_util_MapII() { java.text.AttributedString as = new java.text.AttributedString(""test""); java.util.Map<java.text.AttributedCharacterIterator.Attribute, java.lang.String> hm = new java.util.HashMap<java.text.AttributedCharacterIterator.Attribute, java.lang.String>(); try { hm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute(""test1""), ""value1""); hm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute(""test2""), ""value2""); hm.put(new libcore.java.text.OldAttributedStringTest.TestAttributedCharacterIteratorAttribute(""test3""), ""value3""); as.addAttributes(hm, 0, 3); } catch (java.lang.Exception e) { fail((""Unexpected exception "" + (e.toString()))); } try { as.addAttributes(null, 0, 3); fail(""Expected NullPointerException was not thrown""); } catch (java.lang.NullPointerException e) { } try { as.addAttributes(hm, 0, 0); fail(""Expected IllegalArgumentException was not thrown""); } catch (java.lang.IllegalArgumentException e) { } }",4cc284ddc7b2a68a7a5fdb53b5977f2e08389c66,test_addAttributesLjava_util_MapII(),177766,284,278
127845,v8_renderscript_java_src_android_support_v8_renderscript_ScriptIntrinsicBlur.java,1.0,"public static android.support.v8.renderscript.ScriptIntrinsicBlur create(android.support.v8.renderscript.RenderScript rs, android.support.v8.renderscript.Element e) { if ((!(e.isCompatible(android.support.v8.renderscript.Element.U8_4(rs)))) && (!(e.isCompatible(android.support.v8.renderscript.Element.U8(rs))))) { throw new android.support.v8.renderscript.RSIllegalArgumentException(""Unsuported element type.""); } long id = rs.nScriptIntrinsicCreate(5, e.getID(rs)); android.support.v8.renderscript.ScriptIntrinsicBlur sib = new android.support.v8.renderscript.ScriptIntrinsicBlur(id, rs); sib.setRadius(5.0F); return sib; }",ae08c5852889f9c7a7fc46c4adc040fc673ae9a7,"public static android.support.v8.renderscript.ScriptIntrinsicBlur create(android.support.v8.renderscript.RenderScript rs, android.support.v8.renderscript.Element e) { if ((!(e.isCompatible(android.support.v8.renderscript.Element.U8_4(rs)))) && (!(e.isCompatible(android.support.v8.renderscript.Element.U8(rs))))) { throw new android.support.v8.renderscript.RSIllegalArgumentException(""Unsuported element type.""); } long id; boolean mUseIncSupp = false; if (true || ((rs.isUseNative()) && ((android.os.Build.VERSION.SDK_INT) < 21))) { android.util.Log.v(""Inc RS Test"", ""Creating Intrinsic""); mUseIncSupp = true; id = rs.nIncScriptIntrinsicCreate(5, e.getID(rs)); android.util.Log.v(""Inc RS Test"", ""Creatie Intrinsic Completed""); } else { id = rs.nScriptIntrinsicCreate(5, e.getID(rs)); } android.support.v8.renderscript.ScriptIntrinsicBlur si = new android.support.v8.renderscript.ScriptIntrinsicBlur(id, rs); si.setIncSupp(mUseIncSupp); si.setRadius(5.0F); return si; }",659894338b1ded965fd4d6f53219f30905716a75,"create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element)","create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element)",8,1,"public static android.support.v8.renderscript.ScriptIntrinsicBlur create(android.support.v8.renderscript.RenderScript rs, android.support.v8.renderscript.Element e) { if ((!(e.isCompatible(android.support.v8.renderscript.Element.U8_4(rs)))) && (!(e.isCompatible(android.support.v8.renderscript.Element.U8(rs))))) { throw new android.support.v8.renderscript.RSIllegalArgumentException(""Unsuported element type.""); } long id; boolean mUseIncSupp = (rs.isUseNative()) && ((android.os.Build.VERSION.SDK_INT) < (android.support.v8.renderscript.ScriptIntrinsicBlur.INTRINSIC_API_LEVEL)); id = rs.nScriptIntrinsicCreate(5, e.getID(rs), mUseIncSupp); android.support.v8.renderscript.ScriptIntrinsicBlur si = new android.support.v8.renderscript.ScriptIntrinsicBlur(id, rs); si.setIncSupp(mUseIncSupp); si.setRadius(5.0F); return si; }",41552a32e53d2fa90a38d4fb469fb313d45c6a0e,"create(android.support.v8.renderscript.RenderScript,android.support.v8.renderscript.Element)",314622,305,257
257520,jack_src_com_android_jack_cfg_CfgBuilder.java,10.0,"@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock block) { if (!(currentStmts.isEmpty())) { com.android.jack.cfg.NormalBasicBlock endOfBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(endOfBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(block); if (nextStatement != null) { forwardBranchResolver.addNormalBasicBlock(endOfBlock, nextStatement); } } }",f513a9ce4cc861310b4774abc41c7ee320e77560,"@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock block) { if (!(currentStmts.isEmpty())) { com.android.jack.cfg.NormalBasicBlock endOfBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); tracer.getStatistic(com.android.jack.cfg.CfgBuilder.CREATED_BASIC_BLOCK).incValue(); setBlockOfStatement(endOfBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(block); if (nextStatement != null) { forwardBranchResolver.addNormalBasicBlock(endOfBlock, nextStatement); } } }",2838f66a4309ca1652058dcc175cd1c159e4141c,endVisit(com.android.jack.ir.ast.JCatchBlock),endVisit(com.android.jack.ir.ast.JCatchBlock),5,10,"@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock block) { if (!(currentStmts.isEmpty())) { com.android.jack.cfg.NormalBasicBlock endOfBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(endOfBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(block); if (nextStatement != null) { forwardBranchResolver.addNormalBasicBlock(endOfBlock, nextStatement); } } }",f513a9ce4cc861310b4774abc41c7ee320e77560,endVisit(com.android.jack.ir.ast.JCatchBlock),109,170,145
17484,monkeyrunner_src_com_android_monkeyrunner_ScriptRunner.java,5.0,"private static void initPython(java.util.Collection<java.lang.String> pythonPath, java.lang.String[] argv) { java.util.Properties props = new java.util.Properties(); java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(java.lang.System.getProperty(""java.class.path"")); for (java.lang.String p : pythonPath) { sb.append("":"").append(p); } props.setProperty(""python.path"", sb.toString()); props.setProperty(""python.verbose"", ""error""); org.python.util.PythonInterpreter.initialize(java.lang.System.getProperties(), props, argv); }",1c0d9c715b55827b3143f02089e011e209cd8535,"private static void initPython(java.util.Collection<java.lang.String> pythonPath, java.lang.String[] argv) { java.util.Properties props = new java.util.Properties(); java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(java.lang.System.getProperty(""java.class.path"")); for (java.lang.String p : pythonPath) { sb.append("":"").append(p); } props.setProperty(""python.path"", sb.toString()); props.setProperty(""python.verbose"", ""error""); org.python.util.PythonInterpreter.initialize(java.lang.System.getProperties(), props, argv); java.lang.String frameworkDir = java.lang.System.getProperty(""java.ext.dirs""); java.io.File monkeyRunnerJar = new java.io.File(frameworkDir, ""monkeyrunner.jar""); if (monkeyRunnerJar.canRead()) { PySystemState.packageManager.addJar(monkeyRunnerJar.getAbsolutePath(), false); } }",aced446394cb5358231212424b608f3ce467052a,"initPython(java.util.Collection,java.lang.String[])","initPython(java.util.Collection,java.lang.String[])",4,6,"private static void initPython(java.lang.String executablePath, java.util.Collection<java.lang.String> pythonPath, java.lang.String[] argv) { java.util.Properties props = new java.util.Properties(); java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(java.lang.System.getProperty(""java.class.path"")); for (java.lang.String p : pythonPath) { sb.append("":"").append(p); } props.setProperty(""python.path"", sb.toString()); props.setProperty(""python.verbose"", ""error""); props.setProperty(""python.executable"", executablePath); org.python.util.PythonInterpreter.initialize(java.lang.System.getProperties(), props, argv); java.lang.String frameworkDir = java.lang.System.getProperty(""java.ext.dirs""); java.io.File monkeyRunnerJar = new java.io.File(frameworkDir, ""monkeyrunner.jar""); if (monkeyRunnerJar.canRead()) { PySystemState.packageManager.addJar(monkeyRunnerJar.getAbsolutePath(), false); } }",428897cdc306a3912e55618fb3509fbb7ed636cd,"initPython(java.lang.String,java.util.Collection,java.lang.String[])",388709,225,244
594260,telephony_java_android_telephony_euicc_EuiccManager.java,10.0,public void retainSubscriptionsForFactoryReset(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { android.telephony.euicc.EuiccManager.getIEuiccController().retainSubscriptionsForFactoryReset(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },458f273a553b2ea6f421c3e7ebd3a1d885b60ead,public void retainSubscriptionsForFactoryReset(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return; try { controller.retainSubscriptionsForFactoryReset(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },965520db72c1d2c63c24f3e1f88f97fd99a71bdd,retainSubscriptionsForFactoryReset(android.app.PendingIntent),retainSubscriptionsForFactoryReset(android.app.PendingIntent),3,10,public void retainSubscriptionsForFactoryReset(android.app.PendingIntent callbackIntent) { if (!(isEnabled())) { android.telephony.euicc.EuiccManager.sendUnavailableError(callbackIntent); return; } try { getIEuiccController().retainSubscriptionsForFactoryReset(callbackIntent); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },bfb4b04c2ed286a307afd306bdf96c945549f208,retainSubscriptionsForFactoryReset(android.app.PendingIntent),409163,111,83
310544,tests_wifitests_src_com_android_server_wifi_hotspot2_anqp_VenueNameElementTest.java,2.0,"@org.junit.Test public void testMalformedVenueNameElementBytes() { for (byte[] invalidBytes : com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.MALFORMED_VENUE_NAME_ELEMENT_BYTES) { try { com.android.server.wifi.hotspot2.anqp.VenueNameElement venueNameElement = new com.android.server.wifi.hotspot2.anqp.VenueNameElement(Constants.ANQPElementType.ANQPVenueName, java.nio.ByteBuffer.wrap(invalidBytes).order(java.nio.ByteOrder.LITTLE_ENDIAN)); } catch (java.net.ProtocolException e) { continue; } fail((""Expected exception while parsing malformed Venue Name Element bytes: "" + invalidBytes)); } }",65cfe14510f6f3edf30ba079b8fb3cf5c7296708,"@org.junit.Test public void parseBufferWithValidVenueNames() throws java.lang.Exception { byte[] testData = getTestData(new java.lang.String[]{ com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_VENUE_NAME1, com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_VENUE_NAME2 }); java.nio.ByteBuffer buffer = java.nio.ByteBuffer.allocate(testData.length); buffer.put(testData); buffer.position(0); java.util.List<com.android.server.wifi.hotspot2.anqp.I18Name> nameList = new java.util.ArrayList<>(); nameList.add(new com.android.server.wifi.hotspot2.anqp.I18Name(com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_LANGUAGE, com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_LOCALE, com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_VENUE_NAME1)); nameList.add(new com.android.server.wifi.hotspot2.anqp.I18Name(com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_LANGUAGE, com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_LOCALE, com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_VENUE_NAME2)); com.android.server.wifi.hotspot2.anqp.VenueNameElement expectedElement = new com.android.server.wifi.hotspot2.anqp.VenueNameElement(nameList); assertEquals(expectedElement, com.android.server.wifi.hotspot2.anqp.VenueNameElement.parse(buffer)); }",ddc930cdca273b1df9de52e58985295da364a650,testMalformedVenueNameElementBytes(),parseBufferWithValidVenueNames(),6,6,"@org.junit.Test public void parseBufferWithValidVenueNames() throws java.lang.Exception { java.util.List<com.android.server.wifi.hotspot2.anqp.I18Name> nameList = new java.util.ArrayList<>(); nameList.add(new com.android.server.wifi.hotspot2.anqp.I18Name(com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_LANGUAGE, com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_LOCALE, com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_VENUE_NAME1)); nameList.add(new com.android.server.wifi.hotspot2.anqp.I18Name(com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_LANGUAGE, com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_LOCALE, com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_VENUE_NAME2)); com.android.server.wifi.hotspot2.anqp.VenueNameElement expectedElement = new com.android.server.wifi.hotspot2.anqp.VenueNameElement(nameList); java.nio.ByteBuffer buffer = java.nio.ByteBuffer.wrap(getTestData(new java.lang.String[]{ com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_VENUE_NAME1, com.android.server.wifi.hotspot2.anqp.VenueNameElementTest.TEST_VENUE_NAME2 })); assertEquals(expectedElement, com.android.server.wifi.hotspot2.anqp.VenueNameElement.parse(buffer)); }",8efb32a1b706420d19f8843c0abaeb019a9666b0,parseBufferWithValidVenueNames(),48812,422,402
527402,apps_CtsVerifier_src_com_android_cts_verifier_sensors_base_BaseSensorTestActivity.java,25.0,public void append() { runOnUiThread(new java.lang.Runnable() { @java.lang.Override public void run() { mLogLayout.addView(mView); mLogScrollView.post(new java.lang.Runnable() { @java.lang.Override public void run() { mLogScrollView.fullScroll(View.FOCUS_DOWN); } }); } }); },b848cbb14ecca14ddca6098dcbbc5625da5ca89b,public void append() { runOnUiThread(new java.lang.Runnable() { @java.lang.Override public void run() { mLogLayout.addView(mView); mLogScrollView.post(new java.lang.Runnable() { @java.lang.Override public void run() { if (mIsFullScrollDown) { mLogScrollView.fullScroll(View.FOCUS_DOWN); } } }); } }); },6b8db343c2b0c826c37c4997f2378395edf5b63e,append(),append(),3,25,public void append() { runOnUiThread(new java.lang.Runnable() { @java.lang.Override public void run() { mLogLayout.addView(mView); mLogScrollView.post(new java.lang.Runnable() { @java.lang.Override public void run() { mLogScrollView.fullScroll(View.FOCUS_DOWN); } }); } }); },b848cbb14ecca14ddca6098dcbbc5625da5ca89b,append(),230140,89,79
196553,luni_src_test_java_libcore_java_util_GregorianCalendarTest.java,22.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test_computeTime_enteringDST_DelegatingTimeZone_LosAngeles_2014() { java.util.TimeZone timeZone = java.util.TimeZone.getTimeZone(""America/Los_Angeles""); timeZone = new libcore.java.util.GregorianCalendarTest.DelegatingTimeZone(timeZone); checkDSTLosAngeles2014(timeZone); }",b21e96c02421c3ad70c1d86ba8eb8ea334cd1639,,test_computeTime_enteringDST_DelegatingTimeZone_LosAngeles_2014(),2,20,public void test_computeTime_enteringDst_SimpleTimeZone_LosAngeles_2014() { checkDstLosAngeles2014(libcore.java.util.GregorianCalendarTest.CUSTOM_LOS_ANGELES_TIME_ZONE); },19dc5f3881e38d1775c31c2d3d9b2c8063fdbdfa,test_computeTime_enteringDst_SimpleTimeZone_LosAngeles_2014(),388466,89,55
174902,jack_src_com_android_jack_ir_ast_JNode.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JLambda lambda) { accept(lambda.getMethod()); return super.visit(lambda); },94da283c108dfa8723c667ac5bb8c41cfb27526d,,visit(com.android.jack.ir.ast.JLambda),9,11,@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JLambda lambda) { boolean visitChild = super.visit(lambda); if (visitChild) { accept(lambda.getMethod()); } return visitChild; },738bb172e1f3216e60dcd97f76f45daa9fdada05,visit(com.android.jack.ir.ast.JLambda),479484,44,58
146696,sched_src_com_android_sched_util_log_LoggerConfiguration.java,,,,java.util.Collection<java.util.logging.Handler> getHandlers();,a0c30ca332482ac8394c8e6c27ac5ad13a80b454,,getHandlers(),17,0,@javax.annotation.Nonnull java.util.Collection<java.util.logging.Handler> getHandlers();,4086b071ffffc0c9092b07e3ac6bdddce142884d,getHandlers(),89159,17,23
370793,tests_telephonytests_src_com_android_internal_telephony_uicc_IsimUiccRecordsTest.java,,,,"@java.lang.Override public void onLooperPrepared() { mIsimUiccRecords = new com.android.internal.telephony.uicc.IsimUiccRecords(mUiccCardApplication3gpp, mContext, mMockCI); setReady(true); }",4cc27da1b206b15cb2aec6ca4bdd85349f1730bd,,onLooperPrepared(),7,0,"@java.lang.Override public void onLooperPrepared() { mIsimUiccRecords = new com.android.internal.telephony.uicc.IsimUiccRecords(mUiccCardApplication3gpp, mContext, mSimulatedCommands); setReady(true); }",0548536de661cf676319401f91ed78553f8da5e2,onLooperPrepared(),503394,59,60
368993,services_core_java_com_android_server_connectivity_NetworkMonitor.java,38.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.net.URL[] makeCaptivePortalFallbackUrls(android.content.Context context) { java.lang.String firstUrl = com.android.server.connectivity.NetworkMonitor.getCaptivePortalFallbackUrl(context); java.lang.String joinedUrls = (firstUrl + "","") + (com.android.server.connectivity.NetworkMonitor.getSetting(context, Settings.Global.CAPTIVE_PORTAL_OTHER_FALLBACK_URLS, com.android.server.connectivity.NetworkMonitor.DEFAULT_OTHER_FALLBACK_URLS)); java.util.List<java.net.URL> urls = new java.util.ArrayList<>(); for (java.lang.String s : joinedUrls.split("","")) { java.net.URL u = makeURL(s); if (u == null) { continue; } urls.add(u); } if (urls.isEmpty()) { android.util.Log.e(com.android.server.connectivity.NetworkMonitor.TAG, java.lang.String.format(""could not create any url from %s"", firstUrl, joinedUrls)); } return urls.toArray(new java.net.URL[urls.size()]); }",f6b71daea61f660f5eb20a47d68ffa3dc6a2f2c6,,makeCaptivePortalFallbackUrls(android.content.Context),8,23,"private java.net.URL[] makeCaptivePortalFallbackUrls(android.content.Context context) { java.lang.String separator = ""|""; java.lang.String firstUrl = com.android.server.connectivity.NetworkMonitor.getSetting(context, Settings.Global.CAPTIVE_PORTAL_FALLBACK_URL, com.android.server.connectivity.NetworkMonitor.DEFAULT_FALLBACK_URL); java.lang.String joinedUrls = (firstUrl + separator) + (com.android.server.connectivity.NetworkMonitor.getSetting(context, Settings.Global.CAPTIVE_PORTAL_OTHER_FALLBACK_URLS, com.android.server.connectivity.NetworkMonitor.DEFAULT_OTHER_FALLBACK_URLS)); java.util.List<java.net.URL> urls = new java.util.ArrayList<>(); for (java.lang.String s : joinedUrls.split(separator)) { java.net.URL u = makeURL(s); if (u == null) { continue; } urls.add(u); } if (urls.isEmpty()) { android.util.Log.e(com.android.server.connectivity.NetworkMonitor.TAG, java.lang.String.format(""could not create any url from %s"", joinedUrls)); } return urls.toArray(new java.net.URL[urls.size()]); }",30ed162cd3d2c901686192166cd395e7035ca836,makeCaptivePortalFallbackUrls(android.content.Context),401898,265,305
162651,ddmlib_src_main_java_com_android_ddmlib_SyncService.java,11.0,"public void pushFile(java.lang.String local, java.lang.String remote, com.android.ddmlib.SyncService.ISyncProgressMonitor monitor) throws com.android.ddmlib.SyncException, com.android.ddmlib.TimeoutException, java.io.IOException { java.io.File f = new java.io.File(local); if (!(f.exists())) { throw new com.android.ddmlib.SyncException(com.android.ddmlib.SyncException.SyncError.NO_LOCAL_FILE); } if (f.isDirectory()) { throw new com.android.ddmlib.SyncException(com.android.ddmlib.SyncException.SyncError.LOCAL_IS_DIRECTORY); } monitor.start(((int) (f.length()))); doPushFile(local, remote, monitor); monitor.stop(); }",a7da6ee091ce0cabd873cb475503f22b1c837990,"public void pushFile(java.lang.String local, java.lang.String remote, com.android.ddmlib.SyncService.ISyncProgressMonitor monitor) throws com.android.ddmlib.SyncException, com.android.ddmlib.TimeoutException, java.io.IOException, java.lang.InterruptedException { java.io.File f = new java.io.File(local); if (!(f.exists())) { throw new com.android.ddmlib.SyncException(com.android.ddmlib.SyncException.SyncError.NO_LOCAL_FILE); } if (f.isDirectory()) { throw new com.android.ddmlib.SyncException(com.android.ddmlib.SyncException.SyncError.LOCAL_IS_DIRECTORY); } monitor.start(((int) (f.length()))); doPushFile(local, remote, monitor); monitor.stop(); }",30e6112b118837503c9658fd982e2255f4c241c6,"pushFile(java.lang.String,java.lang.String,com.android.ddmlib.SyncService$ISyncProgressMonitor)","pushFile(java.lang.String,java.lang.String,com.android.ddmlib.SyncService$ISyncProgressMonitor)",4,11,"public void pushFile(java.lang.String local, java.lang.String remote, com.android.ddmlib.SyncService.ISyncProgressMonitor monitor) throws com.android.ddmlib.SyncException, com.android.ddmlib.TimeoutException, java.io.IOException { java.io.File f = new java.io.File(local); if (!(f.exists())) { throw new com.android.ddmlib.SyncException(com.android.ddmlib.SyncException.SyncError.NO_LOCAL_FILE); } if (f.isDirectory()) { throw new com.android.ddmlib.SyncException(com.android.ddmlib.SyncException.SyncError.LOCAL_IS_DIRECTORY); } monitor.start(((int) (f.length()))); doPushFile(local, remote, monitor); monitor.stop(); }",a7da6ee091ce0cabd873cb475503f22b1c837990,"pushFile(java.lang.String,java.lang.String,com.android.ddmlib.SyncService$ISyncProgressMonitor)",352846,194,187
334106,service_java_com_android_server_wifi_WifiNetworkListStoreData.java,,,,"private java.util.List<android.net.wifi.WifiConfiguration> parseNetworkList(org.xmlpull.v1.XmlPullParser in, int outerTagDepth) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { java.util.List<android.net.wifi.WifiConfiguration> networkList = new java.util.ArrayList<>(); while (com.android.server.wifi.util.XmlUtil.gotoNextSectionWithNameOrEnd(in, com.android.server.wifi.WifiNetworkListStoreData.XML_TAG_SECTION_HEADER_NETWORK, outerTagDepth)) { android.net.wifi.WifiConfiguration config = parseWifiConfiguration(in, (outerTagDepth + 1)); networkList.add(config); } return networkList; }",3a03e3c7b4f8d39357e167451f06752bd70cf71e,,"parseNetworkList(org.xmlpull.v1.XmlPullParser,int)",5,9,"private java.util.List<android.net.wifi.WifiConfiguration> parseNetworkList(org.xmlpull.v1.XmlPullParser in, int outerTagDepth) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { java.util.List<android.net.wifi.WifiConfiguration> networkList = new java.util.ArrayList<>(); while (com.android.server.wifi.util.XmlUtil.gotoNextSectionWithNameOrEnd(in, com.android.server.wifi.NetworkListStoreData.XML_TAG_SECTION_HEADER_NETWORK, outerTagDepth)) { android.net.wifi.WifiConfiguration config = parseWifiConfiguration(in, (outerTagDepth + 1)); networkList.add(config); } return networkList; }",865b3af43d40bf68bff93a629be59b35f8e728da,"parseNetworkList(org.xmlpull.v1.XmlPullParser,int)",384035,167,166
682549,src_com_android_bluetooth_newavrcp_MediaPlayerWrapper.java,7.0,"@java.lang.Override public void handleMessage(android.os.Message msg) { if ((msg.what) != (com.android.bluetooth.avrcp.MediaPlayerWrapper.TimeoutHandler.MSG_TIMEOUT)) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Unknown message on timeout handler: "" + (msg.what))); return; } android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Timeout while waiting for metadata to sync for "" + (mPackageName))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current Metadata: "" + (getMetadata().getDescription()))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current Playstate: "" + (getPlaybackState()))); for (int i = 0; ((getQueue()) != null) && (i < (getQueue().size())); i++) { android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((("" └ QueueItem("" + i) + ""): "") + (getQueue().get(i)))); } if (com.android.bluetooth.avrcp.MediaPlayerWrapper.sTesting) android.util.Log.wtfStack(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ""Crashing the stack""); }",b356cc9eb038b6a1f428547d74a2f7359d9634c1,"@java.lang.Override public void handleMessage(android.os.Message msg) { if ((msg.what) != (com.android.bluetooth.avrcp.MediaPlayerWrapper.TimeoutHandler.MSG_TIMEOUT)) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Unknown message on timeout handler: "" + (msg.what))); return; } android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Timeout while waiting for metadata to sync for "" + (mPackageName))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current Metadata: "" + (com.android.bluetooth.avrcp.Util.toMetadata(getMetadata())))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current Playstate: "" + (getPlaybackState()))); java.util.List<com.android.bluetooth.avrcp.Metadata> current_queue = com.android.bluetooth.avrcp.Util.toMetadataList(queue); for (int i = 0; i < (current_queue.size()); i++) { android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((("" └ QueueItem("" + i) + ""): "") + (current_queue.get(i)))); } if (com.android.bluetooth.avrcp.MediaPlayerWrapper.sTesting) android.util.Log.wtfStack(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ""Crashing the stack""); }",ae4bb95091f5b7aa98c3d659358cc314e4d3c2f1,handleMessage(android.os.Message),handleMessage(android.os.Message),6,7,"@java.lang.Override public void handleMessage(android.os.Message msg) { if ((msg.what) != (com.android.bluetooth.avrcp.MediaPlayerWrapper.TimeoutHandler.MSG_TIMEOUT)) { android.util.Log.wtf(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Unknown message on timeout handler: "" + (msg.what))); return; } android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, (""Timeout while waiting for metadata to sync for "" + (mPackageName))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current Metadata: "" + (com.android.bluetooth.avrcp.Util.toMetadata(getMetadata())))); android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ("" └ Current Playstate: "" + (getPlaybackState()))); java.util.List<com.android.bluetooth.avrcp.Metadata> current_queue = com.android.bluetooth.avrcp.Util.toMetadataList(getQueue()); for (int i = 0; i < (current_queue.size()); i++) { android.util.Log.e(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ((("" └ QueueItem("" + i) + ""): "") + (current_queue.get(i)))); } if (com.android.bluetooth.avrcp.MediaPlayerWrapper.sTesting) android.util.Log.wtfStack(com.android.bluetooth.avrcp.MediaPlayerWrapper.TAG, ""Crashing the stack""); }",3832f38a9b9da0057b70e261c0d6c26da580c0d4,handleMessage(android.os.Message),316731,379,379
41115,src_java_com_android_internal_telephony_IccCardProxy.java,,,,"public void supplyPuk2(java.lang.String puk2, java.lang.String newPin2, android.os.Message onComplete) { if ((mUiccApplication) != null) { mUiccApplication.supplyPuk2(puk2, newPin2, onComplete); } else if (onComplete != null) { java.lang.Exception e = new java.lang.RuntimeException(""ICC card is absent.""); android.os.AsyncResult.forMessage(onComplete).exception = e; onComplete.sendToTarget(); return; } }",4d606f40aadf1c42270668cdb75b6bed6691c82f,,"supplyPuk2(java.lang.String,java.lang.String,android.os.Message)",22,19,"@java.lang.Override public void supplyPuk2(java.lang.String puk2, java.lang.String newPin2, android.os.Message onComplete) { synchronized(mLock) { if ((mUiccApplication) != null) { mUiccApplication.supplyPuk2(puk2, newPin2, onComplete); } else if (onComplete != null) { java.lang.Exception e = new java.lang.RuntimeException(""ICC card is absent.""); android.os.AsyncResult.forMessage(onComplete).exception = e; onComplete.sendToTarget(); return; } } }",1941ab5c28568b0c64a53781fa153b6cc9f75cc6,"supplyPuk2(java.lang.String,java.lang.String,android.os.Message)",499852,116,129
136140,rpclib_src_test_java_com_android_tools_rpclib_binary_DecoderTest.java,,,,"public void testDecodeInt8() { final java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(new byte[]{ ((byte) (0)), ((byte) (127)), ((byte) (128)), ((byte) (255)) }); final byte[] expected = new byte[]{ 0, 127, -128, -1 }; com.android.tools.rpclib.binary.Decoder d = new com.android.tools.rpclib.binary.Decoder(input); try { for (short s8 : expected) { assertEquals(s8, d.int8()); } } catch (java.io.IOException ex) { assertNull(ex); } }",44ff7dd0ca996b41b80ca7158e4fce98e7e6c97b,,testDecodeInt8(),3,13,"public void testDecodeInt8() throws java.io.IOException { final java.io.ByteArrayInputStream input = new java.io.ByteArrayInputStream(new byte[]{ ((byte) (0)), ((byte) (127)), ((byte) (128)), ((byte) (255)) }); final byte[] expected = new byte[]{ 0, 127, -128, -1 }; com.android.tools.rpclib.binary.Decoder d = new com.android.tools.rpclib.binary.Decoder(input); for (short s8 : expected) { assertEquals(s8, d.int8()); } }",00ec4b1424e680ffbf6a34eaa78acad6f34eb707,testDecodeInt8(),49533,148,135
91995,luni_src_main_java_libcore_io_Posix.java,111.0,public native libcore.io.StructStat lstat(java.lang.String path) throws libcore.io.ErrnoException;,c2cf77b7931b72b2cca68665f16045ca58f9aefb,public native android.os.StructStat lstat(java.lang.String path) throws android.os.ErrnoException;,33d8574c756aea588045b5e42da293def4d21e3b,lstat(java.lang.String),lstat(java.lang.String),3,111,public native android.system.StructStat lstat(java.lang.String path) throws android.system.ErrnoException;,4223ddd2a299557185e64d1fdee7a8104121f170,lstat(java.lang.String),169922,27,27
91995,luni_src_main_java_libcore_io_Posix.java,50.0,"public native void lchown(java.lang.String path, int uid, int gid) throws libcore.io.ErrnoException;",d86b0f16c14a0338228764b0c00f3bcee8f6c27b,"public native void lchown(java.lang.String path, int uid, int gid) throws android.os.ErrnoException;",284988cd626e15519446b4a0a2d6c08ce29e5012,"lchown(java.lang.String,int,int)","lchown(java.lang.String,int,int)",3,49,"public native void lchown(java.lang.String path, int uid, int gid) throws android.system.ErrnoException;",cbbb7dd337e14ed837863cac8ac5af199d057b6c,"lchown(java.lang.String,int,int)",169939,30,30
68360,src_main_java_org_conscrypt_OpenSSLSocketImpl.java,36.0,"@java.lang.Override public void close() throws java.io.IOException { synchronized(handshakeLock) { if (!(handshakeStarted)) { handshakeStarted = true; synchronized(this) { free(); if ((socket) != (this)) { if ((autoClose) && (!(socket.isClosed()))) { socket.close(); } } else { if (!(super.isClosed())) { super.close(); } } } return; } } synchronized(this) { org.conscrypt.NativeCrypto.SSL_interrupt(sslNativePointer); synchronized(writeLock) { synchronized(readLock) { try { if (handshakeStarted) { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); org.conscrypt.NativeCrypto.SSL_shutdown(sslNativePointer, socket.getFileDescriptor$(), this); } } catch (java.io.IOException ignored) { } finally { free(); if ((socket) != (this)) { if ((autoClose) && (!(socket.isClosed()))) { socket.close(); } } else { if (!(super.isClosed())) { super.close(); } } } } } } }",78afd32cfd0bcc7e6bad2665826d51c3e526e224,@java.lang.Override public void close() throws java.io.IOException { org.conscrypt.OpenSSLSocketImpl.SSLInputStream sslInputStream = null; org.conscrypt.OpenSSLSocketImpl.SSLOutputStream sslOutputStream = null; synchronized(stateLock) { if ((state) == (org.conscrypt.OpenSSLSocketImpl.STATE_CLOSED)) { return; } if ((state) == (org.conscrypt.OpenSSLSocketImpl.STATE_NEW)) { state = org.conscrypt.OpenSSLSocketImpl.STATE_CLOSED; closeUnderlyingSocket(); return; } if (((state) != (org.conscrypt.OpenSSLSocketImpl.STATE_READY)) && ((state) != (org.conscrypt.OpenSSLSocketImpl.STATE_READY_HANDSHAKE_CUT_THROUGH))) { state = org.conscrypt.OpenSSLSocketImpl.STATE_CLOSED; org.conscrypt.NativeCrypto.SSL_interrupt(sslNativePointer); return; } state = org.conscrypt.OpenSSLSocketImpl.STATE_CLOSED; sslInputStream = is; sslOutputStream = os; } if ((sslInputStream != null) || (sslOutputStream != null)) { org.conscrypt.NativeCrypto.SSL_interrupt(sslNativePointer); } if (sslInputStream != null) { sslInputStream.awaitPendingOps(); } if (sslOutputStream != null) { sslOutputStream.awaitPendingOps(); } shutdownAndFreeSslNative(); },f8de114347d4634d9f5a9e741455a1b45051708b,close(),close(),5,36,@java.lang.Override public void close() throws java.io.IOException { org.conscrypt.OpenSSLSocketImpl.SSLInputStream sslInputStream = null; org.conscrypt.OpenSSLSocketImpl.SSLOutputStream sslOutputStream = null; synchronized(stateLock) { if ((state) == (org.conscrypt.OpenSSLSocketImpl.STATE_CLOSED)) { return; } int oldState = state; state = org.conscrypt.OpenSSLSocketImpl.STATE_CLOSED; if (oldState == (org.conscrypt.OpenSSLSocketImpl.STATE_NEW)) { closeUnderlyingSocket(); stateLock.notifyAll(); return; } if ((oldState != (org.conscrypt.OpenSSLSocketImpl.STATE_READY)) && (oldState != (org.conscrypt.OpenSSLSocketImpl.STATE_READY_HANDSHAKE_CUT_THROUGH))) { org.conscrypt.NativeCrypto.SSL_interrupt(sslNativePointer); stateLock.notifyAll(); return; } stateLock.notifyAll(); sslInputStream = is; sslOutputStream = os; } if ((sslInputStream != null) || (sslOutputStream != null)) { org.conscrypt.NativeCrypto.SSL_interrupt(sslNativePointer); } if (sslInputStream != null) { sslInputStream.awaitPendingOps(); } if (sslOutputStream != null) { sslOutputStream.awaitPendingOps(); } shutdownAndFreeSslNative(); },44110c054582cce3d12754981316434e16ad9bb3,close(),383213,314,302
37380,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_launch_AndroidLaunchController.java,22.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void multiLaunch(com.android.ide.eclipse.adt.internal.launch.DelayedLaunchInfo launchInfo, java.util.Collection<com.android.ddmlib.IDevice> devices) { for (com.android.ddmlib.IDevice d : devices) { boolean success = doPreLaunchActions(launchInfo, d); if (!success) { java.lang.String deviceName = (d.isEmulator()) ? d.getAvdName() : d.getSerialNumber(); com.android.ide.eclipse.adt.AdtPlugin.printErrorToConsole(launchInfo.getProject(), (""Launch failed on device: "" + deviceName)); } doLaunchAction(launchInfo, d); } stopLaunch(launchInfo); }",c3635263bbc8de601d712f7ee7315558cf2bccf0,,"multiLaunch(com.android.ide.eclipse.adt.internal.launch.DelayedLaunchInfo,java.util.Collection)",4,34,"private void multiLaunch(com.android.ide.eclipse.adt.internal.launch.DelayedLaunchInfo launchInfo, java.util.Collection<com.android.ddmlib.IDevice> devices) { for (com.android.ddmlib.IDevice d : devices) { boolean success = doPreLaunchActions(launchInfo, d); if (!success) { java.lang.String deviceName = (d.isEmulator()) ? d.getAvdName() : d.getSerialNumber(); com.android.ide.eclipse.adt.AdtPlugin.printErrorToConsole(launchInfo.getProject(), (""Launch failed on device: "" + deviceName)); continue; } doLaunchAction(launchInfo, d); } stopLaunch(launchInfo); }",45a0d443f4f9301e1f91e3246a8bcd34fd1759ab,"multiLaunch(com.android.ide.eclipse.adt.internal.launch.DelayedLaunchInfo,java.util.Collection)",3942,170,172
206292,jack_src_com_android_jack_transformations_renamepackage_PackageRenamer.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void remapPhantom(@javax.annotation.Nonnull com.android.jack.ir.ast.JPhantomClassOrInterface type, @javax.annotation.Nonnull com.tonicsystems.jarjar.PackageRemapper remapper, @javax.annotation.Nonnull com.android.jack.lookup.JPhantomLookup lookup) { java.lang.String binaryName = remapper.mapValue(com.android.jack.transformations.renamepackage.PackageRenamer.formatter.getName(type)); java.lang.String simpleName = com.android.jack.util.NamingTools.getSimpleClassNameFromBinaryName(binaryName); type.setName(simpleName); lookup.removeType(type); type.getEnclosingPackage().remove(type); java.lang.String packageName = com.android.jack.util.NamingTools.getPackageNameFromBinaryName(binaryName); com.android.jack.ir.ast.JPackage newPackage = lookup.getOrCreatePackage(packageName); type.setEnclosingPackage(newPackage); newPackage.addPhantomType(type); }",ff965e1106e51d45f544f7070a55887275941327,,"remapPhantom(com.android.jack.ir.ast.JPhantomClassOrInterface,com.tonicsystems.jarjar.PackageRemapper,com.android.jack.lookup.JPhantomLookup)",4,0,"private void remapPhantom(@javax.annotation.Nonnull com.android.jack.ir.ast.JPhantomClassOrInterface type, @javax.annotation.Nonnull com.tonicsystems.jarjar.PackageRemapper remapper, @javax.annotation.Nonnull com.android.jack.lookup.JPhantomLookup lookup, @javax.annotation.Nonnull com.android.jack.transformations.request.TransformationRequest request) { java.lang.String binaryName = remapper.mapValue(com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter().getName(type)); java.lang.String simpleName = com.android.jack.util.NamingTools.getSimpleClassNameFromBinaryName(binaryName); type.setName(simpleName); lookup.removeType(type); java.lang.String packageName = com.android.jack.util.NamingTools.getPackageNameFromBinaryName(binaryName); com.android.jack.ir.ast.JPackage newPackage = lookup.getOrCreatePackage(packageName); request.append(new com.android.jack.transformations.request.ChangeEnclosingPackage(type, newPackage)); }",aed6e1d61dd39386a6ac1cf455e0759792a9719f,"remapPhantom(com.android.jack.ir.ast.JPhantomClassOrInterface,com.tonicsystems.jarjar.PackageRemapper,com.android.jack.lookup.JPhantomLookup,com.android.jack.transformations.request.TransformationRequest)",323589,225,242
626967,core_java_android_net_IpPrefix.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static java.util.Comparator<android.net.IpPrefix> lengthComparator() { return new java.util.Comparator<android.net.IpPrefix>() { @java.lang.Override public int compare(android.net.IpPrefix prefix1, android.net.IpPrefix prefix2) { final int p1len = prefix1.getPrefixLength(); final int p2len = prefix2.getPrefixLength(); if (p1len < p2len) return -1; if (p2len < p1len) return 1; final byte[] a1 = prefix1.address; final byte[] a2 = prefix2.address; final int len = ((a1.length) < (a2.length)) ? a1.length : a2.length; for (int i = 0; i < len; ++i) { if ((a1[i]) < (a2[i])) return -1; if ((a1[i]) > (a2[i])) return 1; } if ((a2.length) < len) return 1; if ((a1.length) < len) return -1; return 0; } }; }",c82094abd757dd3764d2d7662cb89e8eba2994c3,,lengthComparator(),3,15,"public static java.util.Comparator<android.net.IpPrefix> lengthComparator() { return new java.util.Comparator<android.net.IpPrefix>() { @java.lang.Override public int compare(android.net.IpPrefix prefix1, android.net.IpPrefix prefix2) { if (prefix1.isIPv4()) { if (prefix2.isIPv6()) return -1; } else { if (prefix2.isIPv4()) return 1; } final int p1len = prefix1.getPrefixLength(); final int p2len = prefix2.getPrefixLength(); if (p1len < p2len) return -1; if (p2len < p1len) return 1; final byte[] a1 = prefix1.address; final byte[] a2 = prefix2.address; final int len = ((a1.length) < (a2.length)) ? a1.length : a2.length; for (int i = 0; i < len; ++i) { if ((a1[i]) < (a2[i])) return -1; if ((a1[i]) > (a2[i])) return 1; } if ((a2.length) < len) return 1; if ((a1.length) < len) return -1; return 0; } }; }",1c54956a4b4e0e9e31d845216ee675170398e83f,lengthComparator(),116856,230,263
73168,tools_cts-java-scanner_src_com_android_cts_javascanner_DocletRunner.java,0.0,"int runJavaDoc() throws java.io.IOException, java.lang.InterruptedException { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(""javadoc""); args.add(""-doclet""); args.add(""com.android.cts.javascannerdoclet.CtsJavaScannerDoclet""); args.add(""-docletpath""); args.add(mDocletPath.toString()); args.add(""-sourcepath""); args.add(getSourcePath(mSourceDir)); args.add(""-classpath""); args.add(getClassPath()); args.addAll(getSourceFiles(mSourceDir)); java.lang.Process process = new java.lang.ProcessBuilder(args).start(); java.util.Scanner scanner = null; try { scanner = new java.util.Scanner(process.getInputStream()); while (scanner.hasNextLine()) { java.lang.System.out.println(scanner.nextLine()); } } finally { if (scanner != null) { scanner.close(); } } return process.waitFor(); }",15b0ceb4960b61cd1342f97965fc9c886ef29597,"int runJavaDoc() throws java.io.IOException, java.lang.InterruptedException { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(""javadoc""); args.add(""-doclet""); args.add(""com.android.cts.javascannerdoclet.CtsJavaScannerDoclet""); args.add(""-docletpath""); args.add(mDocletPath.toString()); args.add(""-sourcepath""); args.add(getSourcePath(mSourceDir)); args.add(""-classpath""); args.add(getClassPath()); args.addAll(getSourceFiles(mSourceDir)); java.lang.Process process = new java.lang.ProcessBuilder(args).redirectErrorStream(true).start(); java.util.Scanner scanner = null; try { scanner = new java.util.Scanner(process.getInputStream()); while (scanner.hasNextLine()) { java.lang.System.out.println(scanner.nextLine()); } } finally { if (scanner != null) { scanner.close(); } } return process.waitFor(); }",68f73eadfe879ead4ee192c9994fb1e2ab15b9f1,runJavaDoc(),runJavaDoc(),6,0,"int runJavaDoc() throws java.io.IOException, java.lang.InterruptedException { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(""javadoc""); args.add(""-doclet""); args.add(""com.android.cts.javascannerdoclet.CtsJavaScannerDoclet""); args.add(""-docletpath""); args.add(mDocletPath.toString()); args.add(""-sourcepath""); args.add(getSourcePath(mSourceDir)); args.add(""-classpath""); args.add(getClassPath()); args.addAll(getSourceFiles(mSourceDir)); java.lang.Process process = new java.lang.ProcessBuilder(args).redirectErrorStream(true).start(); java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(process.getInputStream())); try { java.lang.String line = null; while ((line = reader.readLine()) != null) { java.lang.System.out.println(line); } } finally { if (reader != null) { reader.close(); } } return process.waitFor(); }",580ca33ec294d87fa654a75de59823f56465d80b,runJavaDoc(),296537,233,250
158352,lint_libs_lint-checks_src_main_java_com_android_tools_lint_checks_AnnotationDetector.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void ensureUsingFlagStyle(@com.android.annotations.NonNull java.util.List<lombok.ast.Node> constants) { if ((constants.size()) < 3) { return; } for (lombok.ast.Node constant : constants) { if (constant instanceof lombok.ast.VariableReference) { lombok.ast.VariableDefinitionEntry d = findDeclaration(((lombok.ast.VariableReference) (constant))); if (d == null) { continue; } lombok.ast.Expression declaration = d.astInitializer(); if (declaration == null) { continue; } if (declaration instanceof lombok.ast.IntegralLiteral) { lombok.ast.IntegralLiteral literal = ((lombok.ast.IntegralLiteral) (declaration)); long value = literal.astLongValue(); if ((java.lang.Math.abs(value)) <= 1) { continue; } if ((java.lang.Long.bitCount(value)) != 1) { continue; } int shift = java.lang.Long.numberOfTrailingZeros(value); java.lang.String message = java.lang.String.format(""Consider declaring this constant using 1 << %1$d instead"", shift); mContext.report(com.android.tools.lint.checks.AnnotationDetector.FLAG_STYLE, declaration, mContext.getLocation(declaration), message); } } } }",0fae4d4247d0dfd1bf24408e582d34cbf2832bce,,ensureUsingFlagStyle(java.util.List),2,6,"private void ensureUsingFlagStyle(@com.android.annotations.NonNull java.util.List<lombok.ast.Node> constants) { if ((constants.size()) < 3) { return; } java.util.List<lombok.ast.VariableReference> references = com.google.common.collect.Lists.newArrayListWithExpectedSize(constants.size()); for (lombok.ast.Node constant : constants) { if (constant instanceof lombok.ast.VariableReference) { references.add(((lombok.ast.VariableReference) (constant))); } } java.util.List<lombok.ast.VariableDefinitionEntry> entries = com.android.tools.lint.checks.AnnotationDetector.AnnotationChecker.findDeclarations(findSurroundingClass(constants.get(0)), references); for (lombok.ast.VariableDefinitionEntry entry : entries) { lombok.ast.Expression declaration = entry.astInitializer(); if (declaration == null) { continue; } if (declaration instanceof lombok.ast.IntegralLiteral) { lombok.ast.IntegralLiteral literal = ((lombok.ast.IntegralLiteral) (declaration)); long value = literal.astLongValue(); if ((java.lang.Math.abs(value)) <= 1) { continue; } if ((java.lang.Long.bitCount(value)) != 1) { continue; } int shift = java.lang.Long.numberOfTrailingZeros(value); java.lang.String message = java.lang.String.format(""Consider declaring this constant using 1 << %1$d instead"", shift); mContext.report(com.android.tools.lint.checks.AnnotationDetector.FLAG_STYLE, declaration, mContext.getLocation(declaration), message); } } }",e1543daf61e3f0128ed98dc0efdf834ed2033fd9,ensureUsingFlagStyle(java.util.List),337777,286,369
584550,src_main_java_com_android_apksig_internal_apk_SigningBlockScheme_SignatureAlgorithm.java,3.0,com.android.apksig.internal.apk.v2.ContentDigestAlgorithm getContentDigestAlgorithm() { return mContentDigestAlgorithm; },89bbba00814dc8bf4e123609b6444fc34de71f96,public com.android.apksig.internal.apk.SigningBlockScheme.ContentDigestAlgorithm getContentDigestAlgorithm() { return mContentDigestAlgorithm; },3a113ed65a400ef66095519857d46507fdfdbf08,getContentDigestAlgorithm(),getContentDigestAlgorithm(),4,3,public com.android.apksig.internal.apk.ContentDigestAlgorithm getContentDigestAlgorithm() { return mContentDigestAlgorithm; },54eb35ecd6a5462ab1ddbe7238d3e53f732f277e,getContentDigestAlgorithm(),4567,32,28
167782,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_Events_SingleStepWithPendingExceptionDebuggee.java,,,,"public void run() { synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_READY); logWriter.println(""SingleStepWithPendingExceptionDebuggee started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); catchMethod(); catchMethod(); logWriter.println(""SingleStepWithPendingExceptionDebuggee finished""); }",a18742a178e352161d3984bc0135b8a6b2f4529c,,run(),2,3,"@java.lang.Override public void run() { synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_READY); logWriter.println(""SingleStepWithPendingExceptionDebuggee started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); catchMethod(); catchMethod(); logWriter.println(""SingleStepWithPendingExceptionDebuggee finished""); }",041850a379298985d9d2bd5a0c19eb80c0a417d4,run(),235090,77,83
308081,services_tests_servicestests_src_com_android_server_NetworkScoreServiceTest.java,,,,"@org.junit.Test public void testDisableScoring_activeScorer() throws android.os.RemoteException { when(mNetworkScorerAppManager.isCallerActiveScorer(anyInt())).thenReturn(true); when(mNetworkScorerAppManager.getActiveScorer()).thenReturn(com.android.server.NetworkScoreServiceTest.PREV_SCORER, null); when(mNetworkScorerAppManager.setActiveScorer(null)).thenReturn(true); mNetworkScoreService.registerNetworkScoreCache(NetworkKey.TYPE_WIFI, mNetworkScoreCache); mNetworkScoreService.disableScoring(); verify(mNetworkScoreCache).clearScores(); verify(mContext).sendBroadcastAsUser(com.android.server.testing.MockUtils.checkIntent(new android.content.Intent(android.net.NetworkScoreManager.ACTION_SCORER_CHANGED).setPackage(com.android.server.NetworkScoreServiceTest.PREV_SCORER.mPackageName)), eq(UserHandle.SYSTEM)); verify(mContext, never()).bindServiceAsUser(any(android.content.Intent.class), any(android.content.ServiceConnection.class), anyInt(), any(android.os.UserHandle.class)); }",f10e69549c6a4da63e81c2b217c20a94681b8b16,,testDisableScoring_activeScorer(),11,3,"@org.junit.Test public void testDisableScoring_activeScorer() throws android.os.RemoteException { when(mNetworkScorerAppManager.isCallerActiveScorer(anyInt())).thenReturn(true); when(mNetworkScorerAppManager.getActiveScorer()).thenReturn(com.android.server.NetworkScoreServiceTest.PREV_SCORER, null); when(mNetworkScorerAppManager.setActiveScorer(null)).thenReturn(true); mNetworkScoreService.registerNetworkScoreCache(NetworkKey.TYPE_WIFI, mNetworkScoreCache); mNetworkScoreService.disableScoring(); verify(mNetworkScoreCache).clearScores(); verify(mContext).sendBroadcastAsUser(com.android.server.devicepolicy.MockUtils.checkIntent(new android.content.Intent(android.net.NetworkScoreManager.ACTION_SCORER_CHANGED).setPackage(com.android.server.NetworkScoreServiceTest.PREV_SCORER.mPackageName)), eq(UserHandle.SYSTEM)); verify(mContext, never()).bindServiceAsUser(any(android.content.Intent.class), any(android.content.ServiceConnection.class), anyInt(), any(android.os.UserHandle.class)); }",18cd8fbc09c14aa89ac17b24091e3359331dcf0b,testDisableScoring_activeScorer(),38856,268,269
278601,tests_src_com_android_providers_telephony_TelephonyProviderTestable.java,,,,protected void closeDatabase() { dbHelper.close(); },108027b1576213c7cd4f541214660615a7cab61e,,closeDatabase(),6,2,protected void closeDatabase() { mDbHelper.close(); },93658598407eed1b86384431388f609704df7d65,closeDatabase(),273176,12,12
342656,PMC_src_com_android_pmc_GattClientListener.java,1.0,public java.lang.String getAdvMacAddress() { return mAdvMacAddress; },06e429afda90b2aa9be3c3e63637d42bb3775342,public java.lang.String getAdvMacAddress() { if ((mAdvMacAddress) == null) { startScan(); } return mAdvMacAddress; },cd472e281ca7cc21f6fd150b49b16f9a40364543,getAdvMacAddress(),getAdvMacAddress(),4,1,public java.lang.String getAdvMacAddress() { return mAdvMacAddress; },06e429afda90b2aa9be3c3e63637d42bb3775342,getAdvMacAddress(),325579,35,19
410988,src_java_com_android_internal_telephony_CarrierSmsUtils.java,1.0,"@android.annotation.Nullable private static java.lang.String getCarrierImsPackage(android.content.Context context, com.android.internal.telephony.Phone phone) { android.telephony.CarrierConfigManager cm = ((android.telephony.CarrierConfigManager) (context.getSystemService(Context.CARRIER_CONFIG_SERVICE))); if (cm == null) { android.telephony.Rlog.e(com.android.internal.telephony.CarrierSmsUtils.TAG, ""Failed to retrieve CarrierConfigManager""); return null; } android.os.PersistableBundle config = cm.getConfigForSubId(phone.getSubId()); if (config == null) { if (com.android.internal.telephony.CarrierSmsUtils.VDBG) android.telephony.Rlog.v(com.android.internal.telephony.CarrierSmsUtils.TAG, (""No CarrierConfig for subId:"" + (phone.getSubId()))); return null; } return config.getString(com.android.internal.telephony.CarrierSmsUtils.CARRIER_IMS_PACKAGE_KEY, null); }",f17c3f7f2965cfdcee80fdc0b6848c9abed09e12,"@android.annotation.Nullable private static java.lang.String getCarrierImsPackage(android.content.Context context, com.android.internal.telephony.Phone phone) { java.lang.String imsPackage = null; final long identity = android.os.Binder.clearCallingIdentity(); try { android.telephony.CarrierConfigManager cm = ((android.telephony.CarrierConfigManager) (context.getSystemService(Context.CARRIER_CONFIG_SERVICE))); if (cm == null) { android.telephony.Rlog.e(com.android.internal.telephony.CarrierSmsUtils.TAG, ""Failed to retrieve CarrierConfigManager""); return null; } android.os.PersistableBundle config = cm.getConfigForSubId(phone.getSubId()); if (config == null) { if (com.android.internal.telephony.CarrierSmsUtils.VDBG) android.telephony.Rlog.v(com.android.internal.telephony.CarrierSmsUtils.TAG, (""No CarrierConfig for subId:"" + (phone.getSubId()))); return null; } imsPackage = config.getString(com.android.internal.telephony.CarrierSmsUtils.CARRIER_IMS_PACKAGE_KEY, null); } finally { android.os.Binder.restoreCallingIdentity(identity); } return imsPackage; }",64295448629a27d0e3ed8239898e274a32c98fc1,"getCarrierImsPackage(android.content.Context,com.android.internal.telephony.Phone)","getCarrierImsPackage(android.content.Context,com.android.internal.telephony.Phone)",3,1,"@android.annotation.Nullable private static java.lang.String getCarrierImsPackage(android.content.Context context, com.android.internal.telephony.Phone phone) { android.telephony.CarrierConfigManager cm = ((android.telephony.CarrierConfigManager) (context.getSystemService(Context.CARRIER_CONFIG_SERVICE))); if (cm == null) { android.telephony.Rlog.e(com.android.internal.telephony.CarrierSmsUtils.TAG, ""Failed to retrieve CarrierConfigManager""); return null; } final long identity = android.os.Binder.clearCallingIdentity(); try { android.os.PersistableBundle config = cm.getConfigForSubId(phone.getSubId()); if (config == null) { if (com.android.internal.telephony.CarrierSmsUtils.VDBG) android.telephony.Rlog.v(com.android.internal.telephony.CarrierSmsUtils.TAG, (""No CarrierConfig for subId:"" + (phone.getSubId()))); return null; } return config.getString(com.android.internal.telephony.CarrierSmsUtils.CARRIER_IMS_PACKAGE_KEY, null); } finally { android.os.Binder.restoreCallingIdentity(identity); } }",1b5232971554b13e6b74f4ff1f031e9773f598df,"getCarrierImsPackage(android.content.Context,com.android.internal.telephony.Phone)",236884,287,268
62820,gradle_src_main_groovy_com_android_build_gradle_internal_model_BuildTypeImpl.java,10.0,@com.android.annotations.NonNull static com.android.build.gradle.internal.model.BuildTypeImpl cloneBuildType(com.android.builder.model.BuildType buildType) { com.android.build.gradle.internal.model.BuildTypeImpl clonedBuildType = new com.android.build.gradle.internal.model.BuildTypeImpl(); clonedBuildType.name = buildType.getName(); clonedBuildType.debuggable = buildType.isDebuggable(); clonedBuildType.jniDebugBuild = buildType.isJniDebugBuild(); clonedBuildType.renderscriptDebugBuild = buildType.isRenderscriptDebugBuild(); clonedBuildType.renderscriptOptimLevel = buildType.getRenderscriptOptimLevel(); clonedBuildType.packageNameSuffix = buildType.getPackageNameSuffix(); clonedBuildType.versionNameSuffix = buildType.getVersionNameSuffix(); clonedBuildType.runProguard = buildType.isRunProguard(); clonedBuildType.zipAlign = buildType.isZipAlign(); return clonedBuildType; },a068c5b2445ea47fb8ea76328c189cd29cf81437,@com.android.annotations.NonNull static com.android.build.gradle.internal.model.BuildTypeImpl cloneBuildType(com.android.builder.model.BuildType buildType) { com.android.build.gradle.internal.model.BuildTypeImpl clonedBuildType = new com.android.build.gradle.internal.model.BuildTypeImpl(); clonedBuildType.name = buildType.getName(); clonedBuildType.debuggable = buildType.isDebuggable(); clonedBuildType.jniDebugBuild = buildType.isJniDebugBuild(); clonedBuildType.renderscriptDebugBuild = buildType.isRenderscriptDebugBuild(); clonedBuildType.renderscriptOptimLevel = buildType.getRenderscriptOptimLevel(); clonedBuildType.packageNameSuffix = buildType.getPackageNameSuffix(); clonedBuildType.versionNameSuffix = buildType.getVersionNameSuffix(); clonedBuildType.runProguard = buildType.isRunProguard(); clonedBuildType.zipAlign = buildType.isZipAlign(); clonedBuildType.proguardRules = buildType.getProguardRules(); return clonedBuildType; },7b7cf6bf4b6de68db784f950b34819f5806b47fe,cloneBuildType(com.android.builder.model.BuildType),cloneBuildType(com.android.builder.model.BuildType),9,9,@com.android.annotations.NonNull static com.android.build.gradle.internal.model.BuildTypeImpl cloneBuildType(com.android.builder.model.BuildType buildType) { com.android.build.gradle.internal.model.BuildTypeImpl clonedBuildType = new com.android.build.gradle.internal.model.BuildTypeImpl(); clonedBuildType.name = buildType.getName(); clonedBuildType.debuggable = buildType.isDebuggable(); clonedBuildType.jniDebugBuild = buildType.isJniDebugBuild(); clonedBuildType.renderscriptDebugBuild = buildType.isRenderscriptDebugBuild(); clonedBuildType.renderscriptOptimLevel = buildType.getRenderscriptOptimLevel(); clonedBuildType.packageNameSuffix = buildType.getPackageNameSuffix(); clonedBuildType.versionNameSuffix = buildType.getVersionNameSuffix(); clonedBuildType.runProguard = buildType.isRunProguard(); clonedBuildType.zipAlign = buildType.isZipAlign(); return clonedBuildType; },a068c5b2445ea47fb8ea76328c189cd29cf81437,cloneBuildType(com.android.builder.model.BuildType),105347,237,222
294289,jack_src_com_android_jack_library_JarLibraryCodec.java,6.0,"@java.lang.Override @javax.annotation.CheckForNull public com.android.jack.library.JarLibrary checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) throws com.android.sched.util.codec.ParsingException { com.android.sched.util.file.InputZipFile inputZipFile; try { inputZipFile = new com.android.sched.util.file.InputZipFile(context.getWorkingDirectory(), string, context.getRunnableHooks(), existence, change); } catch (com.android.sched.util.file.NotFileException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } catch (com.android.sched.util.file.NoSuchFileException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } catch (com.android.sched.util.file.WrongPermissionException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } catch (com.android.sched.util.file.FileAlreadyExistsException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.CannotChangePermissionException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } catch (com.android.sched.util.file.ZipException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } return new com.android.jack.library.JarLibrary(inputZipFile); }",b355d25d3197912f28f4791fb984a8e2b31d206b,"@java.lang.Override @javax.annotation.CheckForNull public com.android.jack.library.JarLibrary checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) throws com.android.sched.util.codec.ParsingException { com.android.sched.util.file.InputZipFile inputZipFile; try { assert (((existence) == (com.android.sched.util.file.FileOrDirectory.Existence.MUST_EXIST)) && ((change) == (com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE))) && ((permissions) == (com.android.sched.util.file.FileOrDirectory.Permission.READ)); inputZipFile = new com.android.sched.util.file.InputZipFile(context.getWorkingDirectory(), string); } catch (com.android.sched.util.file.NotFileException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } catch (com.android.sched.util.file.NoSuchFileException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } catch (com.android.sched.util.file.WrongPermissionException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } catch (com.android.sched.util.file.ZipException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } return new com.android.jack.library.JarLibrary(inputZipFile); }",195215887abe82e277768e9ffd961e58a1fba427,"checkString(com.android.sched.util.codec.CodecContext,java.lang.String)","checkString(com.android.sched.util.codec.CodecContext,java.lang.String)",6,6,"@java.lang.Override @javax.annotation.CheckForNull public com.android.jack.library.JarLibrary checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) throws com.android.sched.util.codec.ParsingException { com.android.sched.util.file.InputZipFile inputZipFile; try { inputZipFile = new com.android.sched.util.file.InputZipFile(context.getWorkingDirectory(), string); } catch (com.android.sched.util.file.NotFileException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } catch (com.android.sched.util.file.NoSuchFileException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } catch (com.android.sched.util.file.WrongPermissionException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } catch (com.android.sched.util.file.ZipException e) { throw new com.android.sched.util.codec.ParsingException(e.getMessage(), e); } return new com.android.jack.library.JarLibrary(inputZipFile); }",8846fdfdaaa4a8fd5e61fb20315d6d30020e8dd3,"checkString(com.android.sched.util.codec.CodecContext,java.lang.String)",466024,370,291
505857,core_java_android_net_metrics_DefaultNetworkEvent.java,0.0,"private java.lang.String ipSupport() { if ((prevIPv4) && (prevIPv6)) { return ""DUAL""; } if (prevIPv6) { return ""IPv6""; } if (prevIPv4) { return ""IPv4""; } return ""NONE""; }",eb026fbd453a2aeba4d47af7338bfb45c78091df,"private java.lang.String ipSupport() { if ((ipv4) && (ipv6)) { return ""IPv4/v6""; } if (ipv6) { return ""IPv6""; } if (ipv4) { return ""IPv4""; } return ""NONE""; }",6967ece568701d7b68b20b26df511b20e2f4ed9c,ipSupport(),ipSupport(),22,1,"private java.lang.String ipSupport() { if ((ipv4) && (ipv6)) { return ""IPv4v6""; } if (ipv6) { return ""IPv6""; } if (ipv4) { return ""IPv4""; } return ""NONE""; }",09477f4d7283826f36bea3cc490bdd86050b6cb6,ipSupport(),244290,59,58
597573,dalvik_src_main_java_dalvik_system_CloseGuard.java,4.0,public static void setEnabled(boolean enabled) { dalvik.system.CloseGuard.ENABLED = enabled; },53940019e1960f678566c4ba87bae1b9807f48c5,public static void setEnabled(boolean enabled) { enabled = enabled; },6070bf7693e6cd75da2e22e0f787735d769233da,setEnabled(boolean),setEnabled(boolean),5,4,public static void setEnabled(boolean enabled) { dalvik.system.CloseGuard.stackAndTrackingEnabled = enabled; },5e70200b49bd1ab656c612cdf59359b2e1941807,setEnabled(boolean),298962,15,26
105710,core_java_android_text_format_TimeFormatter.java,5.0,"private void outputYear(int value, boolean outputTop, boolean outputBottom, int modifier) { int lead; int trail; final int DIVISOR = 100; trail = value % DIVISOR; lead = (value / DIVISOR) + (trail / DIVISOR); trail %= DIVISOR; if ((trail < 0) && (lead > 0)) { trail += DIVISOR; --lead; } else if ((lead < 0) && (trail > 0)) { trail -= DIVISOR; ++lead; } if (outputTop) { if ((lead == 0) && (trail < 0)) { modifyAndAppend(""-0"", modifier); } else { outputFormatter.format(android.text.format.TimeFormatter.getFormat(modifier, ""%02d"", ""%2d"", ""%d"", ""%02d""), lead); } } if (outputBottom) { int n = (trail < 0) ? -trail : trail; outputFormatter.format(android.text.format.TimeFormatter.getFormat(modifier, ""%02d"", ""%2d"", ""%d"", ""%02d""), n); } }",3c0f5c5047c3a2abdc01994538920a90b1536f8f,"private void outputYear(int value, boolean outputTop, boolean outputBottom, int modifier) { int lead; int trail; final int DIVISOR = 100; trail = value % DIVISOR; lead = (value / DIVISOR) + (trail / DIVISOR); trail %= DIVISOR; if ((trail < 0) && (lead > 0)) { trail += DIVISOR; --lead; } else if ((lead < 0) && (trail > 0)) { trail -= DIVISOR; ++lead; } if (outputTop) { if ((lead == 0) && (trail < 0)) { modifyAndAppend(""-0"", modifier); } else { outputFormattedInt(android.text.format.TimeFormatter.getFormat(modifier, ""%02d"", ""%2d"", ""%d"", ""%02d""), lead); } } if (outputBottom) { int n = (trail < 0) ? -trail : trail; outputFormattedInt(android.text.format.TimeFormatter.getFormat(modifier, ""%02d"", ""%2d"", ""%d"", ""%02d""), n); } }",febb513111a65d39a1f960856c7fb5edd52e8692,"outputYear(int,boolean,boolean,int)","outputYear(int,boolean,boolean,int)",4,4,"private void outputYear(int value, boolean outputTop, boolean outputBottom, int modifier) { int lead; int trail; final int DIVISOR = 100; trail = value % DIVISOR; lead = (value / DIVISOR) + (trail / DIVISOR); trail %= DIVISOR; if ((trail < 0) && (lead > 0)) { trail += DIVISOR; --lead; } else if ((lead < 0) && (trail > 0)) { trail -= DIVISOR; ++lead; } if (outputTop) { if ((lead == 0) && (trail < 0)) { outputBuilder.append(""-0""); } else { numberFormatter.format(android.text.format.TimeFormatter.getFormat(modifier, ""%02d"", ""%2d"", ""%d"", ""%02d""), lead); } } if (outputBottom) { int n = (trail < 0) ? -trail : trail; numberFormatter.format(android.text.format.TimeFormatter.getFormat(modifier, ""%02d"", ""%2d"", ""%d"", ""%02d""), n); } }",72d4cc84943c262451162d296ca0bf9f7144ecf2,"outputYear(int,boolean,boolean,int)",46530,246,247
632219,services_core_java_com_android_server_BluetoothManagerService.java,10.0,"public void handleOnBootPhase() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Bluetooth boot completed""); } android.os.UserManagerInternal userManagerInternal = com.android.server.LocalServices.getService(android.os.UserManagerInternal.class); userManagerInternal.addUserRestrictionsListener(mUserRestrictionsListener); final boolean isBluetoothDisallowed = isBluetoothDisallowed(); if (isBluetoothDisallowed) { return; } if ((mEnableExternal) && (isBluetoothPersistedStateOnBluetooth())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Auto-enabling Bluetooth.""); } sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_SYSTEM_BOOT); } else if (!(isNameAndAddressSet())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Getting adapter name and address""); } android.os.Message getMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_GET_NAME_AND_ADDRESS); mHandler.sendMessage(getMsg); } }",2837c55c049752cc108315bb39a2f8dbec79c242,"public void handleOnBootPhase() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Bluetooth boot completed""); } android.os.UserManagerInternal userManagerInternal = com.android.server.LocalServices.getService(android.os.UserManagerInternal.class); userManagerInternal.addUserRestrictionsListener(mUserRestrictionsListener); final boolean isBluetoothDisallowed = isBluetoothDisallowed(); if (isBluetoothDisallowed) { return; } if ((mEnableExternal) && (isBluetoothPersistedStateOnBluetooth())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Auto-enabling Bluetooth.""); } sendEnableMsg(mQuietEnableExternal, com.android.server.BluetoothManagerService.REASON_SYSTEM_BOOT, android.app.ActivityThread.currentPackageName()); } else if (!(isNameAndAddressSet())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Getting adapter name and address""); } android.os.Message getMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_GET_NAME_AND_ADDRESS); mHandler.sendMessage(getMsg); } }",58dc7978811f42da0cb02920a46cda9b594fcdfc,handleOnBootPhase(),handleOnBootPhase(),9,10,"public void handleOnBootPhase() { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Bluetooth boot completed""); } android.os.UserManagerInternal userManagerInternal = com.android.server.LocalServices.getService(android.os.UserManagerInternal.class); userManagerInternal.addUserRestrictionsListener(mUserRestrictionsListener); final boolean isBluetoothDisallowed = isBluetoothDisallowed(); if (isBluetoothDisallowed) { return; } if ((mEnableExternal) && (isBluetoothPersistedStateOnBluetooth())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Auto-enabling Bluetooth.""); } sendEnableMsg(mQuietEnableExternal, BluetoothProtoEnums.ENABLE_DISABLE_REASON_SYSTEM_BOOT, mContext.getPackageName()); } else if (!(isNameAndAddressSet())) { if (com.android.server.BluetoothManagerService.DBG) { android.util.Slog.d(com.android.server.BluetoothManagerService.TAG, ""Getting adapter name and address""); } android.os.Message getMsg = mHandler.obtainMessage(com.android.server.BluetoothManagerService.MESSAGE_GET_NAME_AND_ADDRESS); mHandler.sendMessage(getMsg); } }",f7cb05abe6f5b6d0659309d3f12d997c1f02b94a,handleOnBootPhase(),386535,319,312
238591,src_com_android_phone_settings_fdn_FdnList.java,0.0,@java.lang.Override public boolean onPrepareOptionsMenu(android.view.Menu menu) { super.onPrepareOptionsMenu(menu); boolean hasSelection = (getSelectedItemPosition()) >= 0; menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_ADD).setVisible(true); menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_EDIT).setVisible(hasSelection); menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_DELETE).setVisible(hasSelection); return true; },3a03a3b3e856ebd6c2896655b0088367109af2da,"@java.lang.Override public boolean onPrepareOptionsMenu(android.view.Menu menu) { super.onPrepareOptionsMenu(menu); boolean hasSelection = (getSelectedItemPosition()) >= 0; menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_ADD).setVisible(true); menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_EDIT).setVisible(hasSelection); menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_DELETE).setVisible(hasSelection); menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_DIAL).setVisible((hasSelection && (mConfigResUtil.getBooleanValue(this, ""config_fdn_direct_dial"")))); return true; }",ef8366ba45a5b443ac19e982e616430f059c04a1,onPrepareOptionsMenu(android.view.Menu),onPrepareOptionsMenu(android.view.Menu),11,0,@java.lang.Override public boolean onPrepareOptionsMenu(android.view.Menu menu) { super.onPrepareOptionsMenu(menu); boolean hasSelection = (getSelectedItemPosition()) >= 0; menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_ADD).setVisible(true); menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_EDIT).setVisible(hasSelection); menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_DELETE).setVisible(hasSelection); menu.findItem(com.android.phone.settings.fdn.FdnList.MENU_DIAL).setVisible((hasSelection && (mFdnDialDirectlySupported))); return true; },446eedb1d6456ddfc4a0c2dbb09f43ddd1a2b7e2,onPrepareOptionsMenu(android.view.Menu),288685,177,163
141531,hostsidetests_security_src_android_cts_security_SELinuxHostTest.java,0.0,"public void testFileContexts() throws java.lang.Exception { java.lang.ProcessBuilder pb = new java.lang.ProcessBuilder(checkFc.getAbsolutePath(), devicePolicyFile.getAbsolutePath(), deviceFcFile.getAbsolutePath()); pb.redirectOutput(java.lang.ProcessBuilder.Redirect.PIPE); pb.redirectErrorStream(true); java.lang.Process p = pb.start(); p.waitFor(); java.io.BufferedReader result = new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream())); java.lang.String line; java.lang.StringBuilder errorString = new java.lang.StringBuilder(); while ((line = result.readLine()) != null) { errorString.append(line); errorString.append(""\n""); } assertTrue((""The file_contexts file was invalid:\n"" + errorString), ((errorString.length()) == 0)); }",ba6369fe6ccd015185d7bb68b97991bb307eb165,"public void testAOSPFileContexts() throws java.lang.Exception { java.io.BufferedReader AOSPFile = new java.io.BufferedReader(new java.io.FileReader(AOSPFcFile.getAbsolutePath())); java.io.BufferedReader deviceFile = new java.io.BufferedReader(new java.io.FileReader(deviceFcFile.getAbsolutePath())); java.lang.String line1; java.lang.String line2; while ((line1 = AOSPFile.readLine()) != null) { line2 = deviceFile.readLine(); assertTrue(((((((""file_contexts does not include AOSP entries:\n"" + ""AOSP had:"") + line1) + ""\n"") + ""Device had:"") + line2) + ""\n""), line1.equals(line2)); } }",30b204153716c7ec96df983b8cffc4756ef4c3a0,testFileContexts(),testAOSPFileContexts(),2,2,"public void testAospFileContexts() throws java.lang.Exception { assertFileStartsWith(aospFcFile, deviceFcFile); }",f8884089883a46f20242e36960ed929de3eb6d14,testAospFileContexts(),225470,169,34
90965,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_EventModifiers_CountModifierTest.java,,,,"public void testBreakpoint() { logWriter.println(""testBreakpoint started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); org.apache.harmony.jpda.tests.framework.Breakpoint breakpoint = org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.createBreakpoint(); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.setCountableBreakpoint(JDWPConstants.TypeTag.CLASS, breakpoint, JDWPConstants.SuspendPolicy.ALL, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.EVENT_COUNT); checkReplyPacket(reply, ""Failed to install breakpoint with event modifier""); int requestID = reply.getNextValueAsInt(); assertAllDataRead(reply); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); waitForEvent(JDWPConstants.EventKind.BREAKPOINT, requestID); int count = getLocationEventCount(); assertEquals(""Invalid event count"", org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.EVENT_COUNT, count); reply = debuggeeWrapper.vmMirror.clearEvent(JDWPConstants.EventKind.BREAKPOINT, requestID); checkReplyPacket(reply, (""Failed to clear event "" + requestID)); logWriter.println(""testBreakpoint done""); }",8791c310913a948c6d27ec9b9b17ce3293e748f3,,testBreakpoint(),3,10,"public void testBreakpoint() { logWriter.println(""testBreakpoint started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); byte typeTag = JDWPConstants.TypeTag.CLASS; org.apache.harmony.jpda.tests.framework.Breakpoint breakpoint = new org.apache.harmony.jpda.tests.framework.Breakpoint(org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.TEST_CLASS_SIGNATURE, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.METHOD_NAME, 0); org.apache.harmony.jpda.tests.framework.jdwp.EventBuilder builder = createBreakpointEventBuilder(typeTag, breakpoint); testEventWithCountModifier(builder, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.LOCATION_COUNT_FIELD_NAME); logWriter.println(""testBreakpoint done""); }",144a6e4692c22eb895f38ff33e9c66d4ba17b764,testBreakpoint(),127188,320,217
115686,v8_renderscript_java_src_android_support_v8_renderscript_RenderScript.java,8.0,native boolean nLoadSO(boolean useNative);,489faa2b578ca702006fdda2eaaa6c294c47fb4f,"native boolean nLoadSO(boolean useNative, boolean useIO);",33911f9d9f74c112d0fa17c32895af33283ec6e9,nLoadSO(boolean),"nLoadSO(boolean,boolean)",11,57,native boolean nLoadSO(boolean useNative);,489faa2b578ca702006fdda2eaaa6c294c47fb4f,nLoadSO(boolean),275577,14,10
186130,jack-tests_tests_com_android_jack_java8_GwtTest.java,27.0,"@org.junit.Test public void testConstructorReferenceBinding() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_10).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",6e40993916257b659a0607bded7b010c831aecf2,"@org.junit.Test public void testConstructorReferenceBinding() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_10).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",2d359b5b7341c4a59fafa31a5bc4b7fc6bd6cb1b,testConstructorReferenceBinding(),testConstructorReferenceBinding(),7,27,@org.junit.Test public void testConstructorReferenceBinding() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_10).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },21fd3773e994d736c574d7f5a940fcdf6586039e,testConstructorReferenceBinding(),466260,86,60
137351,rs_java_android_renderscript_Allocation.java,96.0,"void copy2DRangeToUnchecked(int xoff, int yoff, int w, int h, java.lang.Object array, android.renderscript.Element.DataType dt, int arrayLen) { android.os.Trace.traceBegin(RenderScript.TRACE_TAG, ""copy2DRangeToUnchecked""); mRS.validate(); validate2DRange(xoff, yoff, w, h); mRS.nAllocationRead2D(getIDSafe(), xoff, yoff, mSelectedLOD, mSelectedFace.mID, w, h, array, (arrayLen * (dt.mSize)), dt); android.os.Trace.traceEnd(RenderScript.TRACE_TAG); }",8fe2d40374fb8089c625b4147571b0fd4830dc19,"void copy2DRangeToUnchecked(int xoff, int yoff, int w, int h, java.lang.Object array, android.renderscript.Element.DataType dt, int arrayLen) { android.os.Trace.traceBegin(RenderScript.TRACE_TAG, ""copy2DRangeToUnchecked""); mRS.validate(); validate2DRange(xoff, yoff, w, h); final int dataSize = ((mType.mElement.getBytesSize()) * w) * h; boolean usePadding = false; int sizeBytes = arrayLen * (dt.mSize); byte[] buffer = null; if ((mAutoPadding) && ((mType.getElement().getVectorSize()) == 3)) { if (((dataSize / 4) * 3) > sizeBytes) { throw new android.renderscript.RSIllegalArgumentException(""Array too small for allocation type.""); } usePadding = true; sizeBytes = dataSize; buffer = new byte[dataSize]; } else { if (dataSize > sizeBytes) { throw new android.renderscript.RSIllegalArgumentException(""Array too small for allocation type.""); } } mRS.nAllocationRead2D(getIDSafe(), xoff, yoff, mSelectedLOD, mSelectedFace.mID, w, h, array, sizeBytes, dt, mType.mElement.mType.mSize, usePadding, buffer); android.os.Trace.traceEnd(RenderScript.TRACE_TAG); }",3d075679480054f7e2c5837ea5735c4809df403b,"copy2DRangeToUnchecked(int,int,int,int,java.lang.Object,android.renderscript.Element$DataType,int)","copy2DRangeToUnchecked(int,int,int,int,java.lang.Object,android.renderscript.Element$DataType,int)",5,95,"void copy2DRangeToUnchecked(int xoff, int yoff, int w, int h, java.lang.Object array, android.renderscript.Element.DataType dt, int arrayLen) { android.os.Trace.traceBegin(RenderScript.TRACE_TAG, ""copy2DRangeToUnchecked""); mRS.validate(); validate2DRange(xoff, yoff, w, h); final int dataSize = ((mType.mElement.getBytesSize()) * w) * h; boolean usePadding = false; int sizeBytes = arrayLen * (dt.mSize); if ((mAutoPadding) && ((mType.getElement().getVectorSize()) == 3)) { if (((dataSize / 4) * 3) > sizeBytes) { throw new android.renderscript.RSIllegalArgumentException(""Array too small for allocation type.""); } usePadding = true; sizeBytes = dataSize; } else { if (dataSize > sizeBytes) { throw new android.renderscript.RSIllegalArgumentException(""Array too small for allocation type.""); } } mRS.nAllocationRead2D(getIDSafe(), xoff, yoff, mSelectedLOD, mSelectedFace.mID, w, h, array, sizeBytes, dt, mType.mElement.mType.mSize, usePadding); android.os.Trace.traceEnd(RenderScript.TRACE_TAG); }",6a7a00e48439c353264c41d64617e91d2990ea2d,"copy2DRangeToUnchecked(int,int,int,int,java.lang.Object,android.renderscript.Element$DataType,int)",432023,321,305
314124,sched_src_com_android_sched_marker_LocalMarkerManager.java,6.0,"@java.lang.Override public void addAllMarkers(@javax.annotation.Nonnull java.util.Collection<com.android.sched.marker.Marker> collection) { ensureMap(); for (com.android.sched.marker.Marker marker : collection) { assert isValidMarker(marker) : (((""Marker '"" + (com.android.sched.item.Items.getName(marker.getClass()))) + ""' is not supported for class '"") + (this.getClass().getName())) + ""'""; assert (markers) != null; markers.put(marker.getClass(), marker); } }",2d56cd120ed09129d28044893096d03ce9f41753,"@java.lang.Override public synchronized void addAllMarkers(@javax.annotation.Nonnull java.util.Collection<com.android.sched.marker.Marker> collection) { ensureMap(); for (com.android.sched.marker.Marker marker : collection) { assert isValidMarker(marker) : (((""Marker '"" + (com.android.sched.item.Items.getName(marker.getClass()))) + ""' is not supported for class '"") + (this.getClass().getName())) + ""'""; assert (markers) != null; markers.put(marker.getClass(), marker); } }",0af9a3dd3ea99dfc3e422b715954f5246901469b,addAllMarkers(java.util.Collection),addAllMarkers(java.util.Collection),3,6,"@java.lang.Override public void addAllMarkers(@javax.annotation.Nonnull java.util.Collection<com.android.sched.marker.Marker> collection) { synchronized(lock) { ensureMap(); for (com.android.sched.marker.Marker marker : collection) { assert isValidMarker(marker) : (((""Marker '"" + (com.android.sched.item.Items.getName(marker.getClass()))) + ""' is not supported for class '"") + (this.getClass().getName())) + ""'""; assert (markers) != null; markers.put(marker.getClass(), marker); } } }",6a30b47b1867c0d54bdd85e8955704935619b067,addAllMarkers(java.util.Collection),451162,129,134
230812,ojluni_src_main_java_sun_nio_fs_DefaultFileSystemProvider.java,,,,"public static java.nio.file.spi.FileSystemProvider create() { java.lang.String osname = java.security.AccessController.doPrivileged(new sun.security.action.GetPropertyAction(""os.name"")); if (osname.equals(""SunOS"")) return sun.nio.fs.DefaultFileSystemProvider.createProvider(""sun.nio.fs.SolarisFileSystemProvider""); if (osname.equals(""Linux"")) return sun.nio.fs.DefaultFileSystemProvider.createProvider(""sun.nio.fs.LinuxFileSystemProvider""); if ((osname.equals(""Darwin"")) || (osname.contains(""OS X""))) return sun.nio.fs.DefaultFileSystemProvider.createProvider(""sun.nio.fs.MacOSXFileSystemProvider""); throw new java.lang.AssertionError(""Platform not recognized""); }",eadc4fb2032f4e9984d3a2415d335755adb60a51,,create(),8,0,"public static java.nio.file.spi.FileSystemProvider create() { java.lang.String osname = java.security.AccessController.doPrivileged(new sun.security.action.GetPropertyAction(""os.name"")); if (osname.equals(""SunOS"")) return sun.nio.fs.DefaultFileSystemProvider.createProvider(""sun.nio.fs.SolarisFileSystemProvider""); if (osname.equals(""Linux"")) return sun.nio.fs.DefaultFileSystemProvider.createProvider(""sun.nio.fs.LinuxFileSystemProvider""); if (osname.contains(""OS X"")) return sun.nio.fs.DefaultFileSystemProvider.createProvider(""sun.nio.fs.MacOSXFileSystemProvider""); if (osname.equals(""AIX"")) return sun.nio.fs.DefaultFileSystemProvider.createProvider(""sun.nio.fs.AixFileSystemProvider""); throw new java.lang.AssertionError(""Platform not recognized""); }",8ec51915924183d6bd711f608f0a6829a35b246b,create(),119777,174,197
281663,luni_src_test_java_libcore_java_util_LocaleTest.java,26.0,"public void test_getDisplayScript() { java.util.Locale.Builder b = new java.util.Locale.Builder(); b.setLanguage(""en"").setRegion(""US"").setScript(""Latn""); java.util.Locale l = b.build(); java.util.Locale.setDefault(java.util.Locale.US); assertEquals(""Latin"", l.getDisplayScript()); assertEquals(""Lateinisch"", l.getDisplayScript(java.util.Locale.GERMAN)); assertEquals(""Latin"", l.getDisplayScript(new java.util.Locale(""nv"", ""US""))); b = new java.util.Locale.Builder(); b.setLanguage(""en"").setRegion(""US"").setScript(""Fooo""); l = b.build(); assertEquals(""Fooo"", l.getDisplayScript()); }",213b6a01294f06c9a757781710c4d8a0b8bc0d12,"public void test_getDisplayScript() { java.util.Locale.Builder b = new java.util.Locale.Builder(); b.setLanguage(""en"").setRegion(""US"").setScript(""Latn""); java.util.Locale l = b.build(); libcore.java.util.Locales defaultLocale = libcore.java.util.Locales.getDefault(); try { java.util.Locale.setDefault(java.util.Locale.US); assertEquals(""Latin"", l.getDisplayScript()); assertEquals(""Lateinisch"", l.getDisplayScript(java.util.Locale.GERMAN)); assertEquals(""Latin"", l.getDisplayScript(new java.util.Locale(""nv"", ""US""))); b = new java.util.Locale.Builder(); b.setLanguage(""en"").setRegion(""US"").setScript(""Fooo""); l = b.build(); assertEquals(""Fooo"", l.getDisplayScript()); } finally { defaultLocale.setAsDefault(); } }",00503c9fc31d32df82c0f50cd951b9a2d6600c5b,test_getDisplayScript(),test_getDisplayScript(),5,26,"public void test_getDisplayScript() { java.util.Locale.Builder b = new java.util.Locale.Builder(); b.setLanguage(""en"").setRegion(""US"").setScript(""Latn""); java.util.Locale l = b.build(); libcore.java.util.Locales locales = libcore.java.util.Locales.getAndSetDefaultForTest(java.util.Locale.US, java.util.Locale.GERMANY, java.util.Locale.FRANCE); try { assertEquals(""Lateinisch"", l.getDisplayScript()); assertEquals(""latino"", l.getDisplayScript(java.util.Locale.ITALY)); assertEquals(""Latin"", l.getDisplayScript(new java.util.Locale(""nv"", ""US""))); b = new java.util.Locale.Builder(); b.setLanguage(""en"").setRegion(""US"").setScript(""Fooo""); l = b.build(); assertEquals(""Fooo"", l.getDisplayScript()); } finally { locales.setAsDefault(); } }",a06170116f33310415601557b5f3c3f3ef2c1d6c,test_getDisplayScript(),352074,202,216
43139,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_lint_EclipseLintClient.java,41.0,"@java.lang.Override @com.android.annotations.NonNull public java.lang.String readFile(@com.android.annotations.NonNull java.io.File f) { org.eclipse.core.resources.IFile file = com.android.ide.eclipse.adt.AdtUtils.fileToIFile(f); if ((file == null) || (!(file.exists()))) { java.lang.String path = f.getPath(); com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, ""Can't find file %1$s in workspace"", path); return readPlainFile(f); } if (com.android.ide.eclipse.adt.AdtUtils.endsWithIgnoreCase(file.getName(), com.android.SdkConstants.DOT_XML)) { org.eclipse.wst.sse.core.internal.provisional.IStructuredModel model = null; try { org.eclipse.wst.sse.core.internal.provisional.IModelManager modelManager = org.eclipse.wst.sse.core.StructuredModelManager.getModelManager(); model = modelManager.getModelForRead(file); return model.getStructuredDocument().get(); } catch (java.io.IOException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, ""Cannot read XML file""); } catch (org.eclipse.core.runtime.CoreException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, null); } finally { if (model != null) { model.releaseFromRead(); } } } return readPlainFile(f); }",d2d3d327a150ff1029defe578cd2b18af72d2970,"@java.lang.Override @com.android.annotations.NonNull public java.lang.String readFile(@com.android.annotations.NonNull java.io.File f) { org.eclipse.core.resources.IFile file = com.android.ide.eclipse.adt.AdtUtils.fileToIFile(f); if ((file == null) || (!(file.exists()))) { java.lang.String path = f.getPath(); com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, ""Can't find file %1$s in workspace"", path); return readPlainFile(f); } if (com.android.SdkUtils.endsWithIgnoreCase(file.getName(), com.android.SdkConstants.DOT_XML)) { org.eclipse.wst.sse.core.internal.provisional.IStructuredModel model = null; try { org.eclipse.wst.sse.core.internal.provisional.IModelManager modelManager = org.eclipse.wst.sse.core.StructuredModelManager.getModelManager(); model = modelManager.getModelForRead(file); return model.getStructuredDocument().get(); } catch (java.io.IOException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, ""Cannot read XML file""); } catch (org.eclipse.core.runtime.CoreException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, null); } finally { if (model != null) { model.releaseFromRead(); } } } return readPlainFile(f); }",47a68b2583917f6c914296e2e8a51f84ab624fc9,readFile(java.io.File),readFile(java.io.File),3,41,"@java.lang.Override @com.android.annotations.NonNull public java.lang.String readFile(@com.android.annotations.NonNull java.io.File f) { org.eclipse.core.resources.IFile file = com.android.ide.eclipse.adt.AdtUtils.fileToIFile(f); if ((file == null) || (!(file.exists()))) { java.lang.String path = f.getPath(); com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, ""Can't find file %1$s in workspace"", path); return readPlainFile(f); } if (com.android.utils.SdkUtils.endsWithIgnoreCase(file.getName(), com.android.SdkConstants.DOT_XML)) { org.eclipse.wst.sse.core.internal.provisional.IStructuredModel model = null; try { org.eclipse.wst.sse.core.internal.provisional.IModelManager modelManager = org.eclipse.wst.sse.core.StructuredModelManager.getModelManager(); model = modelManager.getModelForRead(file); return model.getStructuredDocument().get(); } catch (java.io.IOException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, ""Cannot read XML file""); } catch (org.eclipse.core.runtime.CoreException e) { com.android.ide.eclipse.adt.AdtPlugin.log(e, null); } finally { if (model != null) { model.releaseFromRead(); } } } return readPlainFile(f); }",7f77c8889469a1b1c053ea5ea0ace86a369e9eda,readFile(java.io.File),523365,357,359
540924,services_core_java_com_android_server_IpSecService.java,6.0,"@java.lang.Override public java.lang.String toString() { return new java.lang.StringBuilder().append(""{socket="").append(socket).append("", transform="").append(transform).append("", spi="").append(spi).append(""}"").toString(); }",2c2e092378dd5dd0b0ad29633620c524b21455f8,"@java.lang.Override public java.lang.String toString() { return new java.lang.StringBuilder().append(""{spiQuotaTracker="").append(spiQuotaTracker).append("", transformQuotaTracker="").append(transformQuotaTracker).append("", socketQuotaTracker="").append(socketQuotaTracker).append("", mSpiRecords="").append(mSpiRecords).append("", mTransformRecords="").append(mTransformRecords).append("", mEncapSocketRecords="").append(mEncapSocketRecords).append(""}"").toString(); }",b25f4af5cca14501e7c749484287f181d3aacc5a,toString(),toString(),6,2,"@java.lang.Override public java.lang.String toString() { return new java.lang.StringBuilder().append(""{mSpiQuotaTracker="").append(mSpiQuotaTracker).append("", mTransformQuotaTracker="").append(mTransformQuotaTracker).append("", mSocketQuotaTracker="").append(mSocketQuotaTracker).append("", mSpiRecords="").append(mSpiRecords).append("", mTransformRecords="").append(mTransformRecords).append("", mEncapSocketRecords="").append(mEncapSocketRecords).append(""}"").toString(); }",fe1b4a8f91aef38f114997c52613761f055fc287,toString(),180042,118,124
485541,src_main_java_com_android_vts_job_VtsAlertJobServlet.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.util.Set<java.lang.String> separateAcknowledged(java.util.Set<java.lang.String> testCases, java.util.List<com.android.vts.entity.DeviceInfoEntity> devices, java.util.List<TestAcknowledgementEntity> acks) { java.util.Set<java.lang.String> acknowledged = new java.util.HashSet<>(); for (TestAcknowledgementEntity ack : acks) { boolean allDevices = ((ack.devices) == null) || ((ack.devices.size()) == 0); boolean allBranches = ((ack.branches) == null) || ((ack.branches.size()) == 0); boolean isRelevant = allDevices && allBranches; if (!isRelevant) { for (com.android.vts.entity.DeviceInfoEntity device : devices) { boolean deviceAcknowledged = allDevices || (ack.devices.contains(device.buildFlavor)); boolean branchAcknowledged = allBranches || (ack.branches.contains(device.branch)); if (deviceAcknowledged && branchAcknowledged) isRelevant = true; } } if (isRelevant) { boolean allTestCases = ((ack.testCaseNames) == null) || ((ack.testCaseNames.size()) == 0); if (allTestCases) { acknowledged.addAll(testCases); testCases.removeAll(acknowledged); } else { for (java.lang.String testCase : ack.testCaseNames) { if (testCases.contains(testCase)) { acknowledged.add(testCase); testCases.remove(testCase); } } } } } return acknowledged; }",c3818deced06ba43ada042559f04b3329402d996,,"separateAcknowledged(java.util.Set,java.util.List,java.util.List)",4,5,"private static java.util.List<com.android.vts.entity.TestAcknowledgmentEntity> getTestCaseAcknowledgments(com.google.appengine.api.datastore.Key testKey) { com.google.appengine.api.datastore.DatastoreService datastore = com.google.appengine.api.datastore.DatastoreServiceFactory.getDatastoreService(); java.util.List<com.android.vts.entity.TestAcknowledgmentEntity> acks = new java.util.ArrayList<>(); com.google.appengine.api.datastore.Query.Filter testFilter = new com.google.appengine.api.datastore.Query.FilterPredicate(com.android.vts.entity.TestAcknowledgmentEntity.TEST_KEY, Query.FilterOperator.EQUAL, testKey); com.google.appengine.api.datastore.Query q = new com.google.appengine.api.datastore.Query(com.android.vts.entity.TestAcknowledgmentEntity.KIND).setFilter(testFilter); for (com.google.appengine.api.datastore.Entity ackEntity : datastore.prepare(q).asIterable()) { com.android.vts.entity.TestAcknowledgmentEntity ack = com.android.vts.entity.TestAcknowledgmentEntity.fromEntity(ackEntity); if (ack == null) continue; acks.add(ack); } return acks; }",cc3f8000b1a24f31f52d27b7a28d00659d15f2f7,getTestCaseAcknowledgments(com.google.appengine.api.datastore.Key),39122,362,320
89225,libart_src_main_java_java_lang_reflect_Field.java,11.0,"public native void setBoolean(java.lang.Object object, boolean value) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;",2d60d0059c341562afc40baf5c675bbe768d38ac,"public void setBoolean(java.lang.Object object, boolean value) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException { checkSetFinal(); checkAccess(object, getDeclaringClass(), getModifiers()); setBooleanNative(object, value); }",df68ce7a3acfd2d1f1824ed9b32e34cd8dda6917,"setBoolean(java.lang.Object,boolean)","setBoolean(java.lang.Object,boolean)",2,10,"public void setBoolean(java.lang.Object object, boolean value) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException { setBoolean(object, value, isAccessible()); }",bee9821799fed1b0b19de38d418ed473ef1062ed,"setBoolean(java.lang.Object,boolean)",134515,54,41
106313,dalvik_src_main_java_dalvik_system_ZygoteHooks.java,0.0,"public void postForkChild(int debugFlags) { dalvik.system.ZygoteHooks.nativePostForkChild(token, debugFlags); }",63f14bb87b1552ffc5fe755fdb5da56df892e666,"public void postForkChild(int debugFlags, boolean initializeNativeBridge) { dalvik.system.ZygoteHooks.nativePostForkChild(token, debugFlags, initializeNativeBridge); }",b034ff206401619183ef3abae41968511556ee63,postForkChild(int),"postForkChild(int,boolean)",2,0,"public void postForkChild(int debugFlags, java.lang.String instructionSet) { dalvik.system.ZygoteHooks.nativePostForkChild(token, debugFlags, instructionSet); }",35d2d73fed502c6b6eb387f387b25248b739fc99,"postForkChild(int,java.lang.String)",454712,43,45
81416,tests_tests_renderscript_src_android_renderscript_cts_TestAsin.java,,,,"private void checkAsinFloat2() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testAsinFloat2(in, out); verifyResultsAsinFloat2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAsinFloat2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAsinFloat2(in, out); verifyResultsAsinFloat2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAsinFloat2: "" + (e.toString()))); } }",3fc62f294aebe7b738798b62a80b8c429a500905,,checkAsinFloat2(),9,8,"private void checkAsinFloat2Float2() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -8286168124960154170L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testAsinFloat2Float2(in, out); verifyResultsAsinFloat2Float2(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAsinFloat2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAsinFloat2Float2(in, out); verifyResultsAsinFloat2Float2(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAsinFloat2Float2: "" + (e.toString()))); } }",725a6840cfdf30bdc6e24eaefd8bf19c557f9008,checkAsinFloat2Float2(),143086,323,307
233353,test_vogar_target_AbstractTestRunnerTest.java,,,,"private static java.lang.String outcome(java.lang.String testClassName, java.lang.String methodName, java.lang.String message, vogar.Result result) { java.lang.String testName = vogar.target.AbstractTestRunnerTest.testName(testClassName, methodName); return java.lang.String.format((""//00xx{\""outcome\"":\""%s\""}\n"" + (""%s"" + ""//00xx{\""result\"":\""%s\""}\n"")), testName, (message == null ? """" : message), result); }",6c2f4f0bde5981d186124cc087a37407f62f1194,,"outcome(java.lang.String,java.lang.String,java.lang.String,vogar.Result)",3,12,"protected vogar.target.AbstractTestRunnerTest.ExpectedResults expectedResults() { checkCount.incrementAndGet(); return new vogar.target.AbstractTestRunnerTest.ExpectedResults(testRunnerRule.testClass(), ios, checkCount); }",288be757c4e39b3361628284699bf1a3b9a5d178,expectedResults(),130825,125,51
90965,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_EventModifiers_CountModifierTest.java,,,,"public void testThreadEnd() { logWriter.println(""testThreadEnd started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.setCountableThreadEnd(org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.EVENT_COUNT); checkReplyPacket(reply, ""Failed to set THREAD_END with count modifier""); int requestID = reply.getNextValueAsInt(); assertAllDataRead(reply); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); waitForEvent(JDWPConstants.EventKind.THREAD_END, requestID); int count = getThreadRunCount(); assertEquals(""Invalid event count"", org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.EVENT_COUNT, count); reply = debuggeeWrapper.vmMirror.clearEvent(JDWPConstants.EventKind.THREAD_END, requestID); checkReplyPacket(reply, (""Failed to clear event "" + requestID)); logWriter.println(""testThreadEnd done""); }",3ceba4c908a79e5f89e72f0d65e4c8ad8369cb1b,,testThreadEnd(),3,3,"public void testThreadEnd() { logWriter.println(""testThreadEnd started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); org.apache.harmony.jpda.tests.framework.jdwp.EventBuilder builder = createThreadEndBuilder(); testEventWithCountModifier(builder, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.THREAD_RUN_COUNT_FIELD_NAME); logWriter.println(""testThreadEnd done""); }",fb6c120f753cc9c4a168a47e797a13e582849d92,testThreadEnd(),127184,264,112
152974,jack-tests_src_com_android_jack_test_junit_JackTestRunner.java,,,,"private boolean shouldRun(@javax.annotation.Nonnull com.android.jack.test.toolchain.IToolchain currentToolchain, @javax.annotation.Nonnull java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>[] excludedToolchains) { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excluded = com.android.sched.util.collect.Lists.create(excludedToolchains); for (java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain> c : excluded) { if (c.isAssignableFrom(currentToolchain.getClass())) { return false; } } return true; }",8a4f0ed0fcb61e0342ead21d65373e0154bc644e,,"shouldRun(com.android.jack.test.toolchain.IToolchain,java.lang.Class[])",7,0,"private boolean isValidToolchain(@javax.annotation.Nonnull com.android.jack.test.toolchain.IToolchain currentToolchain, @javax.annotation.Nonnull java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>[] excludedToolchains) { for (java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain> c : com.android.sched.util.collect.Lists.create(excludedToolchains)) { if (c.isAssignableFrom(currentToolchain.getClass())) { return false; } } return true; }",8fa13381f0e1ce0f33b10b13f14e0a1794d90feb,"isValidToolchain(com.android.jack.test.toolchain.IToolchain,java.lang.Class[])",40824,161,131
528430,tests_src_com_android_bluetooth_btservice_PhonePolicyTest.java,7.0,"@org.junit.Test public void testProcessInitProfilePriorities() { android.bluetooth.BluetoothAdapter inst = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); android.bluetooth.BluetoothDevice device = inst.getRemoteDevice(""00:01:02:03:04:05""); com.android.bluetooth.btservice.AdapterService mockAdapterService = mock(com.android.bluetooth.btservice.AdapterService.class); com.android.bluetooth.btservice.ServiceFactory mockServiceFactory = mock(com.android.bluetooth.btservice.ServiceFactory.class); com.android.bluetooth.hfp.HeadsetService mockHeadsetService = mock(com.android.bluetooth.hfp.HeadsetService.class); com.android.bluetooth.a2dp.A2dpService mockA2dpService = mock(com.android.bluetooth.a2dp.A2dpService.class); when(mockServiceFactory.getHeadsetService()).thenReturn(mockHeadsetService); when(mockHeadsetService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); when(mockServiceFactory.getA2dpService()).thenReturn(mockA2dpService); when(mockA2dpService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); when(mockAdapterService.getMainLooper()).thenReturn(mHandlerThread.getLooper()); when(mockAdapterService.isMock()).thenReturn(true); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mockAdapterService, mockServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_UUID); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); android.os.ParcelUuid[] uuids = new android.os.ParcelUuid[2]; uuids[0] = android.bluetooth.BluetoothUuid.Handsfree; uuids[1] = android.bluetooth.BluetoothUuid.AudioSink; intent.putExtra(BluetoothDevice.EXTRA_UUID, uuids); injector.onReceive(null, intent); verify(mockHeadsetService, timeout(com.android.bluetooth.btservice.PhonePolicyTest.ASYNC_CALL_TIMEOUT).times(1)).setPriority(eq(device), eq(BluetoothProfile.PRIORITY_ON)); verify(mockA2dpService, timeout(com.android.bluetooth.btservice.PhonePolicyTest.ASYNC_CALL_TIMEOUT).times(1)).setPriority(eq(device), eq(BluetoothProfile.PRIORITY_ON)); }",e2a7ac5f664e3d091a041e7a1138932a0c08aa47,"@org.junit.Test public void testProcessInitProfilePriorities() { when(mHeadsetService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); when(mA2dpService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mAdapterService, mServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_UUID); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mTestDevice); android.os.ParcelUuid[] uuids = new android.os.ParcelUuid[2]; uuids[0] = android.bluetooth.BluetoothUuid.Handsfree; uuids[1] = android.bluetooth.BluetoothUuid.AudioSink; intent.putExtra(BluetoothDevice.EXTRA_UUID, uuids); injector.onReceive(null, intent); executeDelayedMessages(1); verify(mHeadsetService, times(1)).setPriority(eq(mTestDevice), eq(BluetoothProfile.PRIORITY_ON)); verify(mA2dpService, times(1)).setPriority(eq(mTestDevice), eq(BluetoothProfile.PRIORITY_ON)); }",34d8d89aa518089c9181aee76dc8de364428b951,testProcessInitProfilePriorities(),testProcessInitProfilePriorities(),4,7,"@org.junit.Test public void testProcessInitProfilePriorities() { when(mHeadsetService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); when(mA2dpService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_UNDEFINED); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mAdapterService, mServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothDevice.ACTION_UUID); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mTestDevice); android.os.ParcelUuid[] uuids = new android.os.ParcelUuid[2]; uuids[0] = android.bluetooth.BluetoothUuid.Handsfree; uuids[1] = android.bluetooth.BluetoothUuid.AudioSink; intent.putExtra(BluetoothDevice.EXTRA_UUID, uuids); injector.onReceive(null, intent); executePendingMessages(1); verify(mHeadsetService, times(1)).setPriority(eq(mTestDevice), eq(BluetoothProfile.PRIORITY_ON)); verify(mA2dpService, times(1)).setPriority(eq(mTestDevice), eq(BluetoothProfile.PRIORITY_ON)); }",110c51d5244a4747fc9efd506eaa68287b059363,testProcessInitProfilePriorities(),227151,279,279
114459,jack_src_com_android_jack_jayce_JaycePackageLoader.java,0.0,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) { for (com.android.sched.vfs.InputVElement sub : dir.list()) { if ((!(sub.isVDir())) && (isJackFileNameOf(sub.getName(), simpleName))) { try { return new com.android.jack.jayce.JayceClassOrInterfaceLoader(inputJackLibrary, loading, simpleName, ((com.android.sched.vfs.InputVFile) (sub)), lookup, defaultLoadLevel).load(); } catch (com.android.jack.LibraryException e) { com.android.jack.library.LibraryReadingException reportable = new com.android.jack.library.LibraryReadingException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, reportable); throw new com.android.jack.JackAbortException(reportable); } } } throw new com.android.jack.ir.ast.MissingJTypeLookupException(loading, simpleName); }",cad372546a0284f0f704c5e7bc495e738e725c38,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) { com.android.sched.vfs.VPath typePath; if ((packagePath) != null) { typePath = new com.android.sched.vfs.VPath(packagePath.getPathAsString('/'), '/'); typePath.appendPath(new com.android.sched.vfs.VPath(simpleName, '/')); } else { typePath = new com.android.sched.vfs.VPath(simpleName, '/'); } try { return new com.android.jack.jayce.JayceClassOrInterfaceLoader(inputJackLibrary, loading, simpleName, inputJackLibrary.getFile(FileType.JAYCE, typePath), lookup, defaultLoadLevel).load(); } catch (com.android.jack.LibraryException e) { com.android.jack.library.LibraryReadingException reportable = new com.android.jack.library.LibraryReadingException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, reportable); throw new com.android.jack.JackAbortException(reportable); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { throw new com.android.jack.ir.ast.MissingJTypeLookupException(loading, simpleName); } }",5edf3c5ea82a923a7d44cd2b5224d927b88d20d4,"loadClassOrInterface(com.android.jack.ir.ast.JPackage,java.lang.String)","loadClassOrInterface(com.android.jack.ir.ast.JPackage,java.lang.String)",16,0,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JDefinedClassOrInterface loadClassOrInterface(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading, @javax.annotation.Nonnull java.lang.String simpleName) { com.android.sched.vfs.VPath typePath = getPathFromPackage(simpleName); try { return new com.android.jack.jayce.JayceClassOrInterfaceLoader(inputJackLibrary, loading, simpleName, inputJackLibrary.getFile(FileType.JAYCE, typePath), lookup, defaultLoadLevel).load(); } catch (com.android.jack.LibraryException e) { com.android.jack.library.LibraryReadingException reportable = new com.android.jack.library.LibraryReadingException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, reportable); throw new com.android.jack.JackAbortException(reportable); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { throw new com.android.jack.ir.ast.MissingJTypeLookupException(loading, simpleName); } }",e9d04966c955d2081bfd69cf82f6f82f0fc6a455,"loadClassOrInterface(com.android.jack.ir.ast.JPackage,java.lang.String)",482769,335,263
581689,src_java_com_android_internal_telephony_uicc_UiccCard.java,17.0,"public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = ics.mCardState; mContext = c; mCi = ci; mIccid = ics.iccid; if ((mCardState) != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhoneId, this); } else { mUiccProfile.update(mContext, mCi, ics); } } else { throw new java.lang.RuntimeException(""Card state is absent when updating!""); } } }",afbc27b865eb2418ab421f1609f8077c9e4c5f9c,"public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = ics.mCardState; mContext = c; mCi = ci; mIccid = ics.iccid; mCardId = ics.iccid; if ((mCardState) != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhoneId, this); } else { mUiccProfile.update(mContext, mCi, ics); } } else { throw new java.lang.RuntimeException(""Card state is absent when updating!""); } } }",ac9d2104604f29ea850278aa84d1d1c3166a9805,"update(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.uicc.IccCardStatus)","update(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.uicc.IccCardStatus)",9,17,"public void update(android.content.Context c, com.android.internal.telephony.CommandsInterface ci, com.android.internal.telephony.uicc.IccCardStatus ics) { synchronized(mLock) { com.android.internal.telephony.uicc.IccCardStatus.CardState oldState = mCardState; mCardState = ics.mCardState; mContext = c; mCi = ci; mIccid = ics.iccid; updateCardId(); if ((mCardState) != (com.android.internal.telephony.uicc.IccCardStatus.CardState.CARDSTATE_ABSENT)) { if ((mUiccProfile) == null) { mUiccProfile = new com.android.internal.telephony.uicc.UiccProfile(mContext, mCi, ics, mPhoneId, this); } else { mUiccProfile.update(mContext, mCi, ics); } } else { throw new java.lang.RuntimeException(""Card state is absent when updating!""); } } }",37c4eb13dfd0e1a488b83e816609dd0efcad2755,"update(android.content.Context,com.android.internal.telephony.CommandsInterface,com.android.internal.telephony.uicc.IccCardStatus)",248678,239,233
579565,src_java_com_android_internal_telephony_RIL.java,123.0,"@java.lang.Override public void supplyIccPin2ForApp(java.lang.String pin, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_ENTER_SIM_PIN2, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" aid = "") + aid)); } try { radioProxy.supplyIccPin2ForApp(rr.mSerial, convertNullToEmptyString(pin), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""supplyIccPin2ForApp"", e); } } }",9ea695106faf91be3e094fa1fa11fdd735de0485,"@java.lang.Override public void supplyIccPin2ForApp(java.lang.String pin, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_ENTER_SIM_PIN2, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" aid = "") + aid)); } try { radioProxy.supplyIccPin2ForApp(rr.mSerial, convertNullToEmptyString(pin), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""supplyIccPin2ForApp"", e); } } }",4bf8aeec6ff9fb79ec3645681fbc9e3662372c1e,"supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)","supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)",3,123,"@java.lang.Override public void supplyIccPin2ForApp(java.lang.String pin, java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_ENTER_SIM_PIN2, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" aid = "") + aid)); } try { radioProxy.supplyIccPin2ForApp(rr.mSerial, convertNullToEmptyString(pin), convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""supplyIccPin2ForApp"", e); } } }",9ea695106faf91be3e094fa1fa11fdd735de0485,"supplyIccPin2ForApp(java.lang.String,java.lang.String,android.os.Message)",89274,265,261
335625,core_java_com_android_internal_os_WrapperInit.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void wrapperInit(int targetSdkVersion, java.lang.String[] argv) throws com.android.internal.os.Zygote.MethodAndArgsCaller { if (RuntimeInit.DEBUG) android.util.Slog.d(RuntimeInit.TAG, ""RuntimeInit: Starting application from wrapper""); com.android.internal.os.RuntimeInit.applicationInit(targetSdkVersion, argv, null); }",878ffa13d7c71a22e38aa9290777219684c8f3f8,,"wrapperInit(int,java.lang.String[])",4,2,"private static void wrapperInit(int targetSdkVersion, java.lang.String[] argv) throws com.android.internal.os.Zygote.MethodAndArgsCaller { if (RuntimeInit.DEBUG) { android.util.Slog.d(RuntimeInit.TAG, ""RuntimeInit: Starting application from wrapper""); } com.android.internal.os.RuntimeInit.applicationInit(targetSdkVersion, argv, null); }",ef0910cd3f47d00648b2188f9d663c45580c085a,"wrapperInit(int,java.lang.String[])",390522,88,90
347050,service_java_com_android_server_wifi_scanner_WificondWifiScannerImpl.java,46.0,"@java.lang.Override public boolean startSingleScan(com.android.server.wifi.WifiNative.ScanSettings settings, com.android.server.wifi.WifiNative.ScanEventHandler eventHandler) { if ((eventHandler == null) || (settings == null)) { android.util.Log.w(com.android.server.wifi.scanner.SupplicantWifiScannerImpl.TAG, (((""Invalid arguments for startSingleScan: settings="" + settings) + "",eventHandler="") + eventHandler)); return false; } if (((mPendingSingleScanSettings) != null) || (((mLastScanSettings) != null) && (mLastScanSettings.singleScanActive))) { android.util.Log.w(com.android.server.wifi.scanner.SupplicantWifiScannerImpl.TAG, ""A single scan is already running""); return false; } synchronized(mSettingsLock) { mPendingSingleScanSettings = settings; mPendingSingleScanEventHandler = eventHandler; processPendingScans(); return true; } }",db717f68be590a45bc53b6613e222491ab6aaacf,"@java.lang.Override public boolean startSingleScan(com.android.server.wifi.WifiNative.ScanSettings settings, com.android.server.wifi.WifiNative.ScanEventHandler eventHandler) { if ((eventHandler == null) || (settings == null)) { android.util.Log.w(com.android.server.wifi.scanner.WificondWifiScannerImpl.TAG, (((""Invalid arguments for startSingleScan: settings="" + settings) + "",eventHandler="") + eventHandler)); return false; } if (((mPendingSingleScanSettings) != null) || (((mLastScanSettings) != null) && (mLastScanSettings.singleScanActive))) { android.util.Log.w(com.android.server.wifi.scanner.WificondWifiScannerImpl.TAG, ""A single scan is already running""); return false; } synchronized(mSettingsLock) { mPendingSingleScanSettings = settings; mPendingSingleScanEventHandler = eventHandler; processPendingScans(); return true; } }",5470a4ba8203ed0f8d1e2193dbc07158e8f65d73,"startSingleScan(com.android.server.wifi.WifiNative$ScanSettings,com.android.server.wifi.WifiNative$ScanEventHandler)","startSingleScan(com.android.server.wifi.WifiNative$ScanSettings,com.android.server.wifi.WifiNative$ScanEventHandler)",12,49,"@java.lang.Override public boolean startSingleScan(com.android.server.wifi.WifiNative.ScanSettings settings, com.android.server.wifi.WifiNative.ScanEventHandler eventHandler) { if ((eventHandler == null) || (settings == null)) { android.util.Log.w(com.android.server.wifi.scanner.WificondScannerImpl.TAG, (((""Invalid arguments for startSingleScan: settings="" + settings) + "",eventHandler="") + eventHandler)); return false; } if (((mPendingSingleScanSettings) != null) || (((mLastScanSettings) != null) && (mLastScanSettings.singleScanActive))) { android.util.Log.w(com.android.server.wifi.scanner.WificondScannerImpl.TAG, ""A single scan is already running""); return false; } synchronized(mSettingsLock) { mPendingSingleScanSettings = settings; mPendingSingleScanEventHandler = eventHandler; processPendingScans(); return true; } }",b685271f75e0054f59ab7c0a510514409b6135c0,"startSingleScan(com.android.server.wifi.WifiNative$ScanSettings,com.android.server.wifi.WifiNative$ScanEventHandler)",82496,220,218
12845,tools_eclipse_plugins_com.android.ide.eclipse.ddms_src_com_android_ide_eclipse_ddms_views_LogCatView.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void openFile(org.eclipse.core.resources.IFile file, org.eclipse.core.resources.IMarker marker) { try { org.eclipse.ui.IWorkbenchPage page = getViewSite().getWorkbenchWindow().getActivePage(); if (page != null) { org.eclipse.ui.ide.IDE.openEditor(page, marker); marker.delete(); } } catch (org.eclipse.core.runtime.CoreException e) { e.printStackTrace(); } }",ca5c27ab63326641d5b26efad6230bc1a0238c81,,"openFile(org.eclipse.core.resources.IFile,org.eclipse.core.resources.IMarker)",3,3,"void openFile(org.eclipse.core.resources.IFile file, org.eclipse.core.resources.IMarker marker) { try { org.eclipse.ui.IWorkbenchPage page = getViewSite().getWorkbenchWindow().getActivePage(); if (page != null) { org.eclipse.ui.ide.IDE.openEditor(page, marker); marker.delete(); } } catch (org.eclipse.core.runtime.CoreException e) { org.eclipse.core.runtime.Status s = new org.eclipse.core.runtime.Status(org.eclipse.core.runtime.Status.ERROR, com.android.ide.eclipse.ddms.DdmsPlugin.PLUGIN_ID, e.getMessage(), e); com.android.ide.eclipse.ddms.DdmsPlugin.getDefault().getLog().log(s); } }",8848f6f501565c30d326ca9a7f586aa1a50f406f,"openFile(org.eclipse.core.resources.IFile,org.eclipse.core.resources.IMarker)",381216,101,182
90231,build-system_manifest-merger_src_test_java_com_android_manifmerger_MergingReportTest.java,10.0,"public void testAllTypes() { com.android.manifmerger.MergingReport mergingReport = new com.android.manifmerger.MergingReport.Builder(mLoggerMock).addInfo(""merging info"").addWarning(""something weird happened"").addError(""something bad happened"").build(); assertEquals(MergingReport.Result.ERROR, mergingReport.getResult()); }",792bb82dd46810331c3d82452e16e3bbbb9a7576,"public void testAllTypes() { com.android.manifmerger.MergingReport mergingReport = new com.android.manifmerger.MergingReport.Builder(mLoggerMock).addMessage(null, 0, 0, Severity.INFO, ""merging info"").addMessage(null, 0, 0, Severity.WARNING, ""something weird happened"").addMessage(null, 0, 0, Severity.ERROR, ""something bad happened"").build(); assertEquals(MergingReport.Result.ERROR, mergingReport.getResult()); }",f4acb8f0093513ed6b023cfb19157dea3618a842,testAllTypes(),testAllTypes(),4,10,"public void testAllTypes() { com.android.manifmerger.MergingReport mergingReport = new com.android.manifmerger.MergingReport.Builder(mLoggerMock).addMessage(mSourceLocation, 0, 0, Severity.INFO, ""merging info"").addMessage(mSourceLocation, 0, 0, Severity.WARNING, ""something weird happened"").addMessage(mSourceLocation, 0, 0, Severity.ERROR, ""something bad happened"").build(); assertEquals(MergingReport.Result.ERROR, mergingReport.getResult()); }",7e503cd2239bcda12841be3da4a2df44302487a8,testAllTypes(),464904,108,114
327252,src_com_android_providers_telephony_MmsSmsDatabaseHelper.java,29.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void upgradeDatabaseToVersion66(android.database.sqlite.SQLiteDatabase db) { try { db.execSQL(((""ALTER TABLE "" + (SmsProvider.TABLE_RAW)) + "" ADD COLUMN display_originating_addr TEXT"")); } catch (android.database.sqlite.SQLiteException e) { android.util.Log.w(com.android.providers.telephony.MmsSmsDatabaseHelper.TAG, ((""[upgradeDatabaseToVersion65] Exception adding column "" + (""display_originating_addr; "" + ""trying createThreadIdDateIndex() instead: "")) + e)); createThreadIdDateIndex(db); } }",2f6cd88a452c36a18f6d3c39486090c5fb5423df,,upgradeDatabaseToVersion66(android.database.sqlite.SQLiteDatabase),5,13,"private void upgradeDatabaseToVersion66(android.database.sqlite.SQLiteDatabase db) { try { db.execSQL(((""ALTER TABLE "" + (SmsProvider.TABLE_RAW)) + "" ADD COLUMN display_originating_addr TEXT"")); } catch (android.database.sqlite.SQLiteException e) { android.util.Log.e(com.android.providers.telephony.MmsSmsDatabaseHelper.TAG, ((""[upgradeDatabaseToVersion66] Exception adding column "" + ""display_originating_addr; "") + e)); } }",3ef77bfa91f808d6769d34002f24fed48931c0e3,upgradeDatabaseToVersion66(android.database.sqlite.SQLiteDatabase),124742,140,118
144460,sdk-common_src_test_java_com_android_ide_common_caching_CreatingCacheTest.java,7.0,"@org.junit.Test(expected = java.lang.IllegalStateException.class) public void testClear() throws java.lang.Exception { final com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String> cache = new com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String>(new com.android.ide.common.caching.CreatingCacheTest.DelayedFactory()); new java.lang.Thread() { @java.lang.Override public void run() { cache.get(""foo""); } }.start(); java.lang.Thread.sleep(1000); cache.clear(); }",abf84d032f51b3e0cb8fb09050f13f8b3348e69f,"@org.junit.Test(expected = java.lang.IllegalStateException.class) public void testClear() throws java.lang.Exception { java.util.concurrent.CountDownLatch factoryLatch = new java.util.concurrent.CountDownLatch(1); final com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String> cache = new com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String>(new com.android.ide.common.caching.CreatingCacheTest.DelayedFactory(factoryLatch)); new java.lang.Thread(new com.android.ide.common.caching.CreatingCacheTest.CacheRunnable(cache)).start(); java.lang.Thread.sleep(1000); cache.clear(); }",a60b0a7ab34e1112e27a3e606ba653b58a325e57,testClear(),testClear(),2,8,"@org.junit.Test(expected = java.lang.IllegalStateException.class) public void testClear() throws java.lang.Exception { java.util.concurrent.CountDownLatch factoryLatch = new java.util.concurrent.CountDownLatch(1); final com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String> cache = new com.android.ide.common.caching.CreatingCache<java.lang.String, java.lang.String>(new com.android.ide.common.caching.CreatingCacheTest.DelayedFactory(factoryLatch)); java.util.concurrent.CountDownLatch latch = new java.util.concurrent.CountDownLatch(1); new java.lang.Thread(new com.android.ide.common.caching.CreatingCacheTest.CacheRunnable(cache, latch)).start(); latch.await(); cache.clear(); }",b250c85b78d6e54485dc2a2af070cca9481a183b,testClear(),357083,168,184
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,55.0,"public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",9613a79b8c9c744509c781f4a856207ef5ffd93d,"public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",55025d769b7180fe8dfc50d83ffeb6f5d7db9ff9,testAesCbcHmacSha512Tcp6(),testAesCbcHmacSha512Tcp6(),15,84,"public void testAesCbcHmacSha512Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getKey(512), 256); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",98f794bdad5c660ca21764753e4cb56904479388,testAesCbcHmacSha512Tcp6(),381488,189,181
139390,src_com_google_gct_idea_debugger_CloudDebugSettingsEditor.java,,,,@org.jetbrains.annotations.NotNull @java.lang.Override protected javax.swing.JComponent createEditor() { return new javax.swing.JPanel(); },394211d1d9f1d07f35c26bc36a82e02368673115,,createEditor(),30,2,@org.jetbrains.annotations.NotNull @java.lang.Override protected javax.swing.JComponent createEditor() { return mySettingPanel.getMainPanel(); },848caa058b665ce71e522c48b51eab1e3daf2be1,createEditor(),250725,33,33
236470,src_com_android_settings_deviceinfo_Status.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private void setImsRegistrationStatus() { if (getResources().getBoolean(R.bool.config_showImsRegistrationState)) { android.telephony.TelephonyManager tm = ((android.telephony.TelephonyManager) (getSystemService(Context.TELEPHONY_SERVICE))); boolean isImsRegistered = tm.isImsRegistered(android.telephony.SubscriptionManager.getDefaultDataSubId()); mImsStatus.setSummary((isImsRegistered ? R.string.ims_reg_status_registered : R.string.ims_reg_status_not_registered)); } else { removePreferenceFromScreen(com.android.settings.deviceinfo.Status.KEY_IMS_REGISTRATION_STATE); mImsStatus = null; } },008131e85bb0b5466dca998f51c91d850fd31334,,setImsRegistrationStatus(),7,17,private void setImsRegistrationStatus() { android.telephony.CarrierConfigManager configManager = ((android.telephony.CarrierConfigManager) (getSystemService(Context.CARRIER_CONFIG_SERVICE))); int subId = android.telephony.SubscriptionManager.getDefaultDataSubscriptionId(); android.os.PersistableBundle config = null; if (configManager != null) { config = configManager.getConfigForSubId(subId); } if ((config != null) && (config.getBoolean(CarrierConfigManager.KEY_SHOW_IMS_REGISTRATION_STATUS_BOOL))) { android.telephony.TelephonyManager tm = ((android.telephony.TelephonyManager) (getSystemService(Context.TELEPHONY_SERVICE))); mImsStatus.setSummary(((tm != null) && (tm.isImsRegistered(subId)) ? R.string.ims_reg_status_registered : R.string.ims_reg_status_not_registered)); } else { removePreferenceFromScreen(com.android.settings.deviceinfo.Status.KEY_IMS_REGISTRATION_STATE); mImsStatus = null; } },4d69b687b395d305699c48ef85da3559c0de261e,setImsRegistrationStatus(),31309,161,242
555848,telephony_java_android_telephony_ims_internal_feature_MmTelFeature.java,35.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void acknowledgeSms(int messageRef, int result) { getSmsImplementation().acknowledgeSms(messageRef, result); }",6ac899208ecb292ccce96294e5dce311d7b04897,,"acknowledgeSms(int,int)",17,23,"private void acknowledgeSmsReport(int messageRef, @android.telephony.ims.internal.SmsImplBase.StatusReportResult int result) { getSmsImplementation().acknowledgeSmsReport(messageRef, result); }",dd7d5988b1ee7b4abbaf1c71b87ed7bb9e438d0a,"acknowledgeSmsReport(int,int)",374184,26,45
53262,tests_tests_permission_src_android_permission_cts_AccountManagerTest.java,,,,"@android.test.suitebuilder.annotation.SmallTest public void testGetAccountsByType() { try { mAccountManager.getAccountsByType(null); fail(""AccountManager.getAccountsByType() did not throw SecurityException as expected""); } catch (java.lang.SecurityException se) { return; } }",76a20006910fe9295fca564c692475012cb171ed,,testGetAccountsByType(),3,2,"@android.test.suitebuilder.annotation.SmallTest public void testGetAccountsByType() { try { mAccountManager.getAccountsByType(null); fail(""AccountManager.getAccountsByType() did not throw SecurityException as expected""); } catch (java.lang.SecurityException se) { } }",c28a3ef3df085673d45ff80acdda4c069134c3f0,testGetAccountsByType(),476172,66,64
554242,tests_tests_media_src_android_media_cts_AudioManagerTest.java,1.0,"public void testVolumeDndAffectedStream() throws java.lang.Exception { if (((mUseFixedVolume) || (mHasVibrator)) || (mIsTelevision)) { return; } android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 7, AudioManager.FLAG_ALLOW_RINGER_MODES); mAudioManager.setRingerMode(AudioManager.RINGER_MODE_NORMAL); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), false); try { mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 0, AudioManager.FLAG_ALLOW_RINGER_MODES); fail(""Apps without notification policy access cannot change ringer mode""); } catch (java.lang.SecurityException e) { } mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 1, AudioManager.FLAG_ALLOW_RINGER_MODES); assertEquals(""setStreamVolume did not change volume"", 1, mAudioManager.getStreamVolume(AudioManager.STREAM_SYSTEM)); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setRingerMode(AudioManager.RINGER_MODE_SILENT); mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 0, AudioManager.FLAG_ALLOW_RINGER_MODES); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), false); try { mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 6, AudioManager.FLAG_ALLOW_RINGER_MODES); fail(""Apps without notification policy access cannot change ringer mode""); } catch (java.lang.SecurityException e) { } }",2cec70e82ad7f3af345b3a4faf25249af7dc0b9c,"public void testVolumeDndAffectedStream() throws java.lang.Exception { if ((((mUseFixedVolume) || (mHasVibrator)) || (mIsTelevision)) || (mIsSingleVolume)) { return; } android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 7, AudioManager.FLAG_ALLOW_RINGER_MODES); mAudioManager.setRingerMode(AudioManager.RINGER_MODE_NORMAL); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), false); try { mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 0, AudioManager.FLAG_ALLOW_RINGER_MODES); fail(""Apps without notification policy access cannot change ringer mode""); } catch (java.lang.SecurityException e) { } mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 1, AudioManager.FLAG_ALLOW_RINGER_MODES); assertEquals(""setStreamVolume did not change volume"", 1, mAudioManager.getStreamVolume(AudioManager.STREAM_SYSTEM)); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setRingerMode(AudioManager.RINGER_MODE_SILENT); mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 0, AudioManager.FLAG_ALLOW_RINGER_MODES); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), false); try { mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 6, AudioManager.FLAG_ALLOW_RINGER_MODES); fail(""Apps without notification policy access cannot change ringer mode""); } catch (java.lang.SecurityException e) { } }",0e52cce4241bebd1468fc4fa75753f551ffe8be8,testVolumeDndAffectedStream(),testVolumeDndAffectedStream(),2,1,"public void testVolumeDndAffectedStream() throws java.lang.Exception { if ((mHasVibrator) || (mSkipRingerTests)) { return; } android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 7, AudioManager.FLAG_ALLOW_RINGER_MODES); mAudioManager.setRingerMode(AudioManager.RINGER_MODE_NORMAL); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), false); try { mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 0, AudioManager.FLAG_ALLOW_RINGER_MODES); fail(""Apps without notification policy access cannot change ringer mode""); } catch (java.lang.SecurityException e) { } mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 1, AudioManager.FLAG_ALLOW_RINGER_MODES); assertEquals(""setStreamVolume did not change volume"", 1, mAudioManager.getStreamVolume(AudioManager.STREAM_SYSTEM)); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), true); mAudioManager.setRingerMode(AudioManager.RINGER_MODE_SILENT); mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 0, AudioManager.FLAG_ALLOW_RINGER_MODES); android.media.cts.Utils.toggleNotificationPolicyAccess(mContext.getPackageName(), getInstrumentation(), false); try { mAudioManager.setStreamVolume(AudioManager.STREAM_SYSTEM, 6, AudioManager.FLAG_ALLOW_RINGER_MODES); fail(""Apps without notification policy access cannot change ringer mode""); } catch (java.lang.SecurityException e) { } }",b6409ab5c5ec5ebf2106ae874cfd4a1fdfe23db5,testVolumeDndAffectedStream(),429760,393,379
230033,test_597-deopt-new-string_src_Main.java,3.0,public void run() { if ((threadIndex) == 0) { for (int i = 0; i < (Main.totalOperations); ++i) { if ((i % 50) == 0) { Main.deoptimizeAll(); } if ((i % 50) == 25) { Main.undeoptimizeAll(); } } Main.done = true; } else { while (!(Main.done)) { $noinline$run0(); } } },9e9392c9b447cc8e5011e23f1c6cfcefb22466d4,"public void run() { if ((threadIndex) == 0) { for (int i = 0; i < (Main.totalOperations); ++i) { if ((i % 50) == 0) { Main.deoptimizeAll(); } if ((i % 50) == 25) { Main.undeoptimizeAll(); } } Main.done = true; } else { while (!(Main.done)) { java.lang.String str = $noinline$run0(); if (!(str.equals(""abc""))) { java.lang.System.out.println((""Failure! "" + str)); return; } } } }",8fbb142014b966aad309ed872b743334dcab4002,run(),run(),6,3,"public void run() { if ((threadIndex) == 0) { for (int i = 0; i < (Main.totalOperations); ++i) { if ((i % 50) == 0) { Main.deoptimizeAll(); } if ((i % 50) == 25) { Main.undeoptimizeAll(); } } Main.done = true; } else { while (!(Main.done)) { java.lang.String str = $noinline$run0(); if (!(str.equals(""abc""))) { java.lang.System.out.println((""Failure! "" + str)); java.lang.System.exit(0); } } } }",288d1704e29722c4f8f33269c5680f1cbcdfc316,run(),443986,130,136
50372,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_OpenSSLKeyHolder.java,,,,public abstract org.apache.harmony.xnet.provider.jsse.OpenSSLKey getOpenSSLKey();,5fbbccb48a7cf18468e64d2871a432073d4fa556,,getOpenSSLKey(),5,0,public org.apache.harmony.xnet.provider.jsse.OpenSSLKey getOpenSSLKey();,5c726f6dbf0c0e63e942d6c10149bf73e9ee0537,getOpenSSLKey(),391261,25,24
230812,ojluni_src_main_java_sun_nio_fs_UnixFileSystem.java,,,,private java.nio.file.FileStore readNext() { assert java.lang.Thread.holdsLock(this); for (; ;) { if (!(entries.hasNext())) return null; sun.nio.fs.UnixMountEntry entry = entries.next(); if (entry.isIgnored()) continue; java.lang.SecurityManager sm = java.lang.System.getSecurityManager(); if (sm != null) { try { sm.checkRead(new java.lang.String(entry.dir())); } catch (java.lang.SecurityException x) { continue; } } try { return getFileStore(entry); } catch (java.io.IOException ignore) { } } },9656466944745ed6c00bf78d4d42b317ee5052bd,,readNext(),8,24,private java.nio.file.FileStore readNext() { assert java.lang.Thread.holdsLock(this); for (; ;) { if (!(entries.hasNext())) return null; sun.nio.fs.UnixMountEntry entry = entries.next(); if (entry.isIgnored()) continue; java.lang.SecurityManager sm = java.lang.System.getSecurityManager(); if (sm != null) { try { sm.checkRead(sun.nio.fs.Util.toString(entry.dir())); } catch (java.lang.SecurityException x) { continue; } } try { return getFileStore(entry); } catch (java.io.IOException ignore) { } } },0af9e4c870b43cbd06aea14e85b1a1fb7d9e275e,readNext(),120097,146,149
253791,luni_src_main_java_libcore_io_Os.java,84.0,public android.system.StructStatVfs statvfs(java.lang.String path) throws android.system.ErrnoException;,64cde22c1addbdb5214a206b94def234de63f7f1,public libcore.io.StructStatVfs statvfs(java.lang.String path) throws libcore.io.ErrnoException;,cf4d30e22fe3f66e56beda64b7fa0d93cafab166,statvfs(java.lang.String),statvfs(java.lang.String),8,81,public android.system.StructStatVfs statvfs(java.lang.String path) throws android.system.ErrnoException;,64cde22c1addbdb5214a206b94def234de63f7f1,statvfs(java.lang.String),494579,29,27
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,12.0,"public void retrieveNotificationList(java.lang.String cardId, @android.telephony.euicc.EuiccNotification.Event int events, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification[]> callback) { try { getIEuiccCardController().retrieveNotificationList(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.euicc.IRetrieveNotificationListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification[] notifications) { callback.onComplete(resultCode, notifications); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling retrieveNotificationList"", e); throw e.rethrowFromSystemServer(); } }",e9edae797842000fcd8190eb61dd19c89004895f,"public void retrieveNotificationList(java.lang.String cardId, @android.telephony.euicc.EuiccNotification.Event int events, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification[]> callback) { try { getIEuiccCardController().retrieveNotificationList(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.euicc.IRetrieveNotificationListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification[] notifications) { executor.execute(() -> callback.onComplete(resultCode, notifications)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling retrieveNotificationList"", e); throw e.rethrowFromSystemServer(); } }",71f27c301b15371d24be4b510a1c23d76634fe19,"retrieveNotificationList(java.lang.String,int,android.telephony.euicc.EuiccCardManager$ResultCallback)","retrieveNotificationList(java.lang.String,int,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)",2,14,"public void retrieveNotificationList(java.lang.String cardId, @android.telephony.euicc.EuiccNotification.Event int events, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<android.telephony.euicc.EuiccNotification[]> callback) { try { getIEuiccCardController().retrieveNotificationList(mContext.getOpPackageName(), cardId, events, new com.android.internal.telephony.euicc.IRetrieveNotificationListCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, android.telephony.euicc.EuiccNotification[] notifications) { executor.execute(() -> callback.onComplete(resultCode, notifications)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling retrieveNotificationList"", e); throw e.rethrowFromSystemServer(); } }",3b6a701f97df171c018283b20ed213dd2969e4a1,"retrieveNotificationList(java.lang.String,int,java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)",476184,225,218
52632,luni_src_test_java_libcore_javax_crypto_ECDHKeyAgreementTest.java,,,,"void testDoPhase_withPhaseWhichIsNotLast(java.security.Provider provider) throws java.lang.Exception { javax.crypto.KeyAgreement keyAgreement = libcore.javax.crypto.ECDHKeyAgreementTest.getKeyAgreement(provider); keyAgreement.init(libcore.javax.crypto.ECDHKeyAgreementTest.KAT_PRIVATE_KEY1); try { keyAgreement.doPhase(libcore.javax.crypto.ECDHKeyAgreementTest.KAT_PUBLIC_KEY2, false); fail(); } catch (java.lang.IllegalArgumentException expected) { } }",c96f5be77cf6630f192f463a45d018cfdbc48aa9,,testDoPhase_withPhaseWhichIsNotLast(java.security.Provider),3,21,"void testDoPhase_withPhaseWhichIsNotLast(java.security.Provider provider) throws java.lang.Exception { javax.crypto.KeyAgreement keyAgreement = libcore.javax.crypto.ECDHKeyAgreementTest.getKeyAgreement(provider); keyAgreement.init(libcore.javax.crypto.ECDHKeyAgreementTest.KAT_PRIVATE_KEY1); try { keyAgreement.doPhase(libcore.javax.crypto.ECDHKeyAgreementTest.KAT_PUBLIC_KEY2, false); fail(); } catch (java.lang.IllegalStateException expected) { } }",39ce4ca25bf0bb4d3973f58ed0becc2b53dffe1f,testDoPhase_withPhaseWhichIsNotLast(java.security.Provider),164566,120,120
91995,luni_src_main_java_libcore_io_ForwardingOs.java,69.0,"public java.net.InetAddress getsockoptInAddr(java.io.FileDescriptor fd, int level, int option) throws libcore.io.ErrnoException { return os.getsockoptInAddr(fd, level, option); }",8a3d42c85b10b8404fadfd57b1f0bd3a3a17bf6c,"public java.net.InetAddress getsockoptInAddr(java.io.FileDescriptor fd, int level, int option) throws android.os.ErrnoException { return os.getsockoptInAddr(fd, level, option); }",b8d3ea29326d66837bf7de457f6b3fec6779f58d,"getsockoptInAddr(java.io.FileDescriptor,int,int)","getsockoptInAddr(java.io.FileDescriptor,int,int)",3,67,"public java.net.InetAddress getsockoptInAddr(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException { return os.getsockoptInAddr(fd, level, option); }",5021f7887596d4980a1f2fff904241334177fec5,"getsockoptInAddr(java.io.FileDescriptor,int,int)",170453,50,50
539395,tests_net_java_android_net_MacAddressTest.java,3.0,"@org.junit.Test public void testMacAddressRandomGeneration() { final int iterations = 1000; final java.lang.String expectedAndroidOui = ""da:a1:19""; for (int i = 0; i < iterations; i++) { android.net.MacAddress mac = android.net.MacAddress.getRandomAddress(); java.lang.String stringRepr = mac.toString(); assertTrue((stringRepr + "" expected to be a locally assigned address""), mac.isLocallyAssigned()); assertTrue(((stringRepr + "" expected to begin with "") + expectedAndroidOui), stringRepr.startsWith(expectedAndroidOui)); } final java.util.Random r = new java.util.Random(); final java.lang.String anotherOui = ""24:5f:78""; final java.lang.String expectedLocalOui = ""26:5f:78""; final android.net.MacAddress base = new android.net.MacAddress((anotherOui + "":0:0:0"")); for (int i = 0; i < iterations; i++) { android.net.MacAddress mac = android.net.MacAddress.getRandomAddress(base, r); java.lang.String stringRepr = mac.toString(); assertTrue((stringRepr + "" expected to be a locally assigned address""), mac.isLocallyAssigned()); assertTrue(((stringRepr + "" expected to begin with "") + expectedLocalOui), stringRepr.startsWith(expectedLocalOui)); } }",7d35190f6025db6ab5548b786f0b04dd537c5fed,"@org.junit.Test public void testMacAddressRandomGeneration() { final int iterations = 1000; final java.lang.String expectedAndroidOui = ""da:a1:19""; for (int i = 0; i < iterations; i++) { android.net.MacAddress mac = android.net.MacAddress.makeRandomAddress(); java.lang.String stringRepr = mac.toString(); assertTrue((stringRepr + "" expected to be a locally assigned address""), mac.isLocallyAssigned()); assertTrue(((stringRepr + "" expected to begin with "") + expectedAndroidOui), stringRepr.startsWith(expectedAndroidOui)); } final java.util.Random r = new java.util.Random(); final java.lang.String anotherOui = ""24:5f:78""; final java.lang.String expectedLocalOui = ""26:5f:78""; final android.net.MacAddress base = android.net.MacAddress.fromString((anotherOui + "":0:0:0"")); for (int i = 0; i < iterations; i++) { android.net.MacAddress mac = android.net.MacAddress.makeRandomAddress(base, r); java.lang.String stringRepr = mac.toString(); assertTrue((stringRepr + "" expected to be a locally assigned address""), mac.isLocallyAssigned()); assertTrue(((stringRepr + "" expected to begin with "") + expectedLocalOui), stringRepr.startsWith(expectedLocalOui)); } }",f399fc7b206cff6d2cc9fc176d05267ee61cff5a,testMacAddressRandomGeneration(),testMacAddressRandomGeneration(),12,4,"@org.junit.Test public void testMacAddressRandomGeneration() { final int iterations = 1000; final java.lang.String expectedAndroidOui = ""da:a1:19""; for (int i = 0; i < iterations; i++) { android.net.MacAddress mac = android.net.MacAddress.createRandomUnicastAddress(); java.lang.String stringRepr = mac.toString(); assertTrue((stringRepr + "" expected to be a locally assigned address""), mac.isLocallyAssigned()); assertTrue(((stringRepr + "" expected to begin with "") + expectedAndroidOui), stringRepr.startsWith(expectedAndroidOui)); } final java.util.Random r = new java.util.Random(); final java.lang.String anotherOui = ""24:5f:78""; final java.lang.String expectedLocalOui = ""26:5f:78""; final android.net.MacAddress base = android.net.MacAddress.fromString((anotherOui + "":0:0:0"")); for (int i = 0; i < iterations; i++) { android.net.MacAddress mac = android.net.MacAddress.createRandomUnicastAddress(base, r); java.lang.String stringRepr = mac.toString(); assertTrue((stringRepr + "" expected to be a locally assigned address""), mac.isLocallyAssigned()); assertEquals(MacAddress.TYPE_UNICAST, mac.addressType()); assertTrue(((stringRepr + "" expected to begin with "") + expectedLocalOui), stringRepr.startsWith(expectedLocalOui)); } }",a8af346ac9e9deb2998ee49d65febfa3c8e57d52,testMacAddressRandomGeneration(),220802,322,342
61861,luni_src_main_java_java_util_concurrent_ConcurrentHashMap.java,61.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,static java.lang.Class<?> comparableClassFor(java.lang.Object x) { return null; },11fed63e38963c93aa409e10904afed4a37b7277,,comparableClassFor(java.lang.Object),6,12,static java.lang.Class<?> comparableClassFor(java.lang.Object x) { if (x instanceof java.lang.Comparable) { java.lang.Class<?> c; java.lang.reflect.Type[] ts; java.lang.reflect.Type[] as; java.lang.reflect.Type t; java.lang.reflect.ParameterizedType p; if ((c = x.getClass()) == (java.lang.String.class)) return c; if ((ts = c.getGenericInterfaces()) != null) { for (int i = 0; i < (ts.length); ++i) { if ((((((t = ts[i]) instanceof java.lang.reflect.ParameterizedType) && (((p = ((java.lang.reflect.ParameterizedType) (t))).getRawType()) == (java.lang.Comparable.class))) && ((as = p.getActualTypeArguments()) != null)) && ((as.length) == 1)) && ((as[0]) == c)) return c; } } } return null; },ed785f24eddb163344020de82255145652c4e226,comparableClassFor(java.lang.Object),334436,23,227
273763,service_java_com_android_server_wifi_util_WifiPermissionsUtil.java,,,,"private boolean isScanAllowedbyApps(java.lang.String pkgName) { boolean stat = checkAppOpAllowed(AppOpsManager.OP_WIFI_SCAN, pkgName); if (com.android.server.wifi.util.WifiPermissionsUtil.VERBOSE_LOG) { android.util.Log.e(com.android.server.wifi.util.WifiPermissionsUtil.TAG, (""Scan allowed by Apps "" + stat)); } return stat; }",188e722f253e1afe85c849372df32b94350b7abb,,isScanAllowedbyApps(java.lang.String),8,5,"private boolean isScanAllowedbyApps(java.lang.String pkgName, int uid) { return checkAppOpAllowed(AppOpsManager.OP_WIFI_SCAN, pkgName, uid); }",1fb2e99d4361223db734074047b0ca63150aff0a,"isScanAllowedbyApps(java.lang.String,int)",377404,99,42
109435,build-system_gradle_src_main_groovy_com_android_build_gradle_internal_variant_ApplicationVariantFactory.java,3.0,"@java.lang.Override @com.android.annotations.NonNull public com.android.build.gradle.internal.variant.ApplicationVariantData createVariantData(@com.android.annotations.NonNull com.android.builder.core.VariantConfiguration variantConfiguration, @com.android.annotations.NonNull java.util.Set<java.lang.String> densities, @com.android.annotations.NonNull java.util.Set<java.lang.String> abis, @com.android.annotations.NonNull java.util.Set<java.lang.String> compatibleScreens) { com.android.build.gradle.internal.variant.ApplicationVariantData variant = new com.android.build.gradle.internal.variant.ApplicationVariantData(basePlugin, variantConfiguration); if (!(densities.isEmpty())) { variant.setCompatibleScreens(compatibleScreens); } if ((variant.getSplitHandlingPolicy()) == (BaseVariantData.SplitHandlingPolicy.PRE_21_POLICY)) { for (java.lang.String density : densities) { for (java.lang.String abi : abis) { variant.createOutput(density, abi); } } } else { variant.createOutput(null, null); } return variant; }",dc08170735889e92e1bedde457c478a9452e8bf0,"@java.lang.Override @com.android.annotations.NonNull public com.android.build.gradle.internal.variant.ApplicationVariantData createVariantData(@com.android.annotations.NonNull com.android.builder.core.VariantConfiguration variantConfiguration, @com.android.annotations.NonNull java.util.Set<java.lang.String> densities, @com.android.annotations.NonNull java.util.Set<java.lang.String> abis, @com.android.annotations.NonNull java.util.Set<java.lang.String> compatibleScreens) { com.android.build.gradle.internal.variant.ApplicationVariantData variant = new com.android.build.gradle.internal.variant.ApplicationVariantData(basePlugin, variantConfiguration); if (!(densities.isEmpty())) { variant.setCompatibleScreens(compatibleScreens); } if ((variant.getSplitHandlingPolicy()) == (BaseVariantData.SplitHandlingPolicy.PRE_21_POLICY)) { for (java.lang.String density : densities) { for (java.lang.String abi : abis) { com.google.common.collect.ImmutableList.Builder<com.android.build.SplitData> builder = com.google.common.collect.ImmutableList.builder(); if (density != null) { builder.add(new com.android.build.SplitData(SplitOutput.FilterType.DENSITY, density)); } if (abi != null) { builder.add(new com.android.build.SplitData(SplitOutput.FilterType.ABI, abi)); } variant.createOutput(SplitOutput.OutputType.FULL_SPLIT, builder.build()); } } } else { variant.createOutput(SplitOutput.OutputType.MAIN, java.util.Collections.<com.android.build.SplitData>emptyList()); } return variant; }",e75b384048d82a8a5a676a7ced00fd20d9e5d02d,"createVariantData(com.android.builder.core.VariantConfiguration,java.util.Set,java.util.Set,java.util.Set)","createVariantData(com.android.builder.core.VariantConfiguration,java.util.Set,java.util.Set,java.util.Set)",15,2,"@java.lang.Override @com.android.annotations.NonNull public com.android.build.gradle.internal.variant.ApplicationVariantData createVariantData(@com.android.annotations.NonNull com.android.build.gradle.internal.core.GradleVariantConfiguration variantConfiguration, @com.android.annotations.NonNull java.util.Set<java.lang.String> densities, @com.android.annotations.NonNull java.util.Set<java.lang.String> abis, @com.android.annotations.NonNull java.util.Set<java.lang.String> compatibleScreens) { com.android.build.gradle.internal.variant.ApplicationVariantData variant = new com.android.build.gradle.internal.variant.ApplicationVariantData(basePlugin, variantConfiguration); if (!(densities.isEmpty())) { variant.setCompatibleScreens(compatibleScreens); } if ((variant.getSplitHandlingPolicy()) == (BaseVariantData.SplitHandlingPolicy.PRE_21_POLICY)) { for (java.lang.String density : densities) { for (java.lang.String abi : abis) { com.google.common.collect.ImmutableList.Builder<com.android.build.FilterData> builder = com.google.common.collect.ImmutableList.builder(); if (density != null) { builder.add(FilterData.Builder.build(OutputFile.DENSITY, density)); } if (abi != null) { builder.add(FilterData.Builder.build(OutputFile.ABI, abi)); } variant.createOutput(OutputFile.OutputType.FULL_SPLIT, builder.build()); } } } else { variant.createOutput(OutputFile.OutputType.MAIN, java.util.Collections.<com.android.build.FilterData>emptyList()); } return variant; }",4776c4af36925f7269fb5d06a757df25bb3982a0,"createVariantData(com.android.build.gradle.internal.core.GradleVariantConfiguration,java.util.Set,java.util.Set,java.util.Set)",226490,407,396
285003,tools_ahat_src_heapdump_AhatClassInstance.java,,,,"@java.lang.Override public java.lang.String toString() { java.lang.String className = getClassObj().getClassName(); return java.lang.String.format(""%s@%08x"", className, getId()); }",4418369bc4abe993b822bd72c62f29baf0bb6617,,toString(),7,3,"@java.lang.Override public java.lang.String toString() { return java.lang.String.format(""%s@%08x"", getClassName(), getId()); }",d1f46086d6e968a17d0b64a99d8c5f64099f27ca,toString(),183529,50,38
91995,luni_src_main_java_libcore_io_ForwardingOs.java,81.0,"public int recvfrom(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, int flags, java.net.InetSocketAddress srcAddress) throws java.net.SocketException, libcore.io.ErrnoException { return os.recvfrom(fd, buffer, flags, srcAddress); }",42b9c5903e0a933416668d5d6dc0170c3133b8df,"public int recvfrom(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, int flags, java.net.InetSocketAddress srcAddress) throws android.os.ErrnoException, java.net.SocketException { return os.recvfrom(fd, buffer, flags, srcAddress); }",0e7cd9c56cb5531ea312ab9344ed64d58e92b3e8,"recvfrom(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetSocketAddress)","recvfrom(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetSocketAddress)",3,80,"public int recvfrom(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, int flags, java.net.InetSocketAddress srcAddress) throws android.system.ErrnoException, java.net.SocketException { return os.recvfrom(fd, buffer, flags, srcAddress); }",5fef5d2052fb828f9d290c846888db7ea29c0fbb,"recvfrom(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetSocketAddress)",170476,64,64
253791,luni_src_main_java_libcore_io_Posix.java,67.0,public native android.system.StructUtsname uname();,0aeb983fab245a4be12bdf12419adb7085890432,public native libcore.io.StructUtsname uname();,7208b1174cb2c51cad57d4615402deedff3dff7d,uname(),uname(),8,62,public native android.system.StructUtsname uname();,0aeb983fab245a4be12bdf12419adb7085890432,uname(),494535,15,14
289103,sched_src_com_android_sched_vfs_CachedDirectFS.java,42.0,"@java.lang.Override @javax.annotation.Nonnull java.io.InputStream openRead(@javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVFile file) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.READ); VFSStatCategory.DIR_READ.getCounterStat(getTracer(), infoString).incValue(); java.io.File path = getNativeFile(file.getPath()); try { return new java.io.FileInputStream(path); } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.READ); throw new com.android.sched.util.ConcurrentIOException(e); } }",06b1ae73ea55dca3849af3c363780d2a5f010291,"@java.lang.Override @javax.annotation.Nonnull java.io.InputStream openRead(@javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVFile file) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.READ); VFSStatCategory.DIR_READ.getCounterStat(getTracer(), infoString).incValue(); java.io.File path = getNativeFile(file.getPath()); try { com.android.sched.util.stream.QueryableInputStream qis = new com.android.sched.util.stream.QueryableInputStream(new java.io.FileInputStream(path)); openedStreams.add(qis); return qis; } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.READ); throw new com.android.sched.util.ConcurrentIOException(e); } }",814da0278f94d6d6f1c04eb32332c56b9219a62b,openRead(com.android.sched.vfs.CachedDirectFS$CachedParentVFile),openRead(com.android.sched.vfs.CachedDirectFS$CachedParentVFile),3,46,"@java.lang.SuppressWarnings(""resource"") @java.lang.Override @javax.annotation.Nonnull java.io.InputStream openRead(@javax.annotation.Nonnull com.android.sched.vfs.CachedDirectFS.CachedParentVFile file) throws com.android.sched.util.file.WrongPermissionException { assert !(isClosed()); assert capabilities.contains(Capabilities.READ); VFSStatCategory.DIR_READ.getCounterStat(getTracer(), infoString).incValue(); java.io.File path = getNativeFile(file.getPath()); try { java.io.InputStream is = new java.io.FileInputStream(path); assert (is = trackOpenedStream(is, file)) != null; return is; } catch (java.io.FileNotFoundException e) { com.android.sched.util.file.FileOrDirectory.checkPermissions(path, file.getLocation(), Permission.READ); throw new com.android.sched.util.ConcurrentIOException(e); } }",6dbc92e1721c717342b1e62326c077938c77d1b3,openRead(com.android.sched.vfs.CachedDirectFS$CachedParentVFile),337749,217,208
112775,jack_src_com_android_jack_backend_jayce_JayceFileImporter.java,1.0,"private void addImportedResource(@javax.annotation.Nonnull com.android.sched.vfs.InputVFile file, @javax.annotation.Nonnull com.android.jack.ir.ast.JSession session, @javax.annotation.Nonnull java.lang.String currentPath) throws com.android.jack.backend.jayce.ResourceImportConflictException { com.android.sched.vfs.VPath path = new com.android.sched.vfs.VPath(currentPath, com.android.jack.backend.jayce.JayceFileImporter.VPATH_SEPARATOR); if (path.equals(JackLibrary.LIBRARY_PROPERTIES_VPATH)) { return; } com.android.jack.ir.ast.Resource newResource = new com.android.jack.ir.ast.Resource(path, file); for (com.android.jack.ir.ast.Resource existingResource : session.getResources()) { if (existingResource.getPath().equals(path)) { if ((resourceCollisionPolicy) == (com.android.jack.backend.jayce.JayceFileImporter.CollisionPolicy.FAIL)) { throw new com.android.jack.backend.jayce.ResourceImportConflictException(newResource.getLocation(), existingResource.getLocation()); } else { session.getUserLogger().log(java.util.logging.Level.INFO, ""Resource in {0} has already been imported from {1}: ignoring import"", new java.lang.Object[]{ newResource.getLocation().getDescription(), existingResource.getLocation().getDescription() }); } return; } } session.addResource(newResource); }",6a267a234816eccfb1142894dbb570dac6b022f9,"private void addImportedResource(@javax.annotation.Nonnull com.android.sched.vfs.InputVFile file, @javax.annotation.Nonnull com.android.jack.ir.ast.JSession session, @javax.annotation.Nonnull java.lang.String currentPath) throws com.android.jack.backend.jayce.ResourceImportConflictException { com.android.sched.vfs.VPath path = new com.android.sched.vfs.VPath(currentPath, com.android.jack.backend.jayce.JayceFileImporter.VPATH_SEPARATOR); if (path.equals(JackLibrary.LIBRARY_PROPERTIES_VPATH)) { return; } com.android.jack.ir.ast.Resource newResource = new com.android.jack.ir.ast.Resource(path, file); for (com.android.jack.ir.ast.Resource existingResource : session.getResources()) { if (existingResource.getPath().equals(path)) { throw new com.android.jack.backend.jayce.ResourceImportConflictException(newResource.getLocation(), existingResource.getLocation()); } } session.addResource(newResource); }",7b0699daa020d6fdf0aa3b7d6e8cd69cb207e577,"addImportedResource(com.android.sched.vfs.InputVFile,com.android.jack.ir.ast.JSession,java.lang.String)","addImportedResource(com.android.sched.vfs.InputVFile,com.android.jack.ir.ast.JSession,java.lang.String)",9,1,"private void addImportedResource(@javax.annotation.Nonnull com.android.sched.vfs.InputVFile file, @javax.annotation.Nonnull com.android.jack.ir.ast.JSession session, @javax.annotation.Nonnull java.lang.String currentPath) throws com.android.jack.resource.ResourceImportConflictException { com.android.sched.vfs.VPath path = new com.android.sched.vfs.VPath(currentPath, com.android.jack.backend.jayce.JayceFileImporter.VPATH_SEPARATOR); com.android.jack.ir.ast.Resource newResource = new com.android.jack.ir.ast.Resource(path, file); for (com.android.jack.ir.ast.Resource existingResource : session.getResources()) { if (existingResource.getPath().equals(path)) { throw new com.android.jack.resource.ResourceImportConflictException(newResource.getLocation(), existingResource.getLocation()); } } session.addResource(newResource); }",691cc9fae5076252d853966927195239950a7932,"addImportedResource(com.android.sched.vfs.InputVFile,com.android.jack.ir.ast.JSession,java.lang.String)",487807,250,222
349432,service_java_com_android_server_wifi_WifiNative.java,171.0,"public boolean p2pSetChannel(int lc, int oc) { if (com.android.server.wifi.WifiNative.DBG) android.util.Log.d(mTAG, (((""p2pSetChannel: lc="" + lc) + "", oc="") + oc)); if ((com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.setListenChannel(lc, oc); } else { synchronized(com.android.server.wifi.WifiNative.sLock) { if ((lc >= 1) && (lc <= 11)) { if (!(doBooleanCommand((""P2P_SET listen_channel "" + lc)))) { return false; } } else if (lc != 0) { return false; } if ((oc >= 1) && (oc <= 165)) { int freq = (oc <= 14 ? 2407 : 5000) + (oc * 5); return doBooleanCommand(((((""P2P_SET disallow_freq 1000-"" + (freq - 5)) + "","") + (freq + 5)) + ""-6000"")); } else if (oc == 0) { return doBooleanCommand(""P2P_SET disallow_freq \""\""""); } } return false; } }",f32e3dcb6cf4d6171fd25df16898497441d622fc,"public boolean p2pSetChannel(int lc, int oc) { if (com.android.server.wifi.WifiNative.DBG) android.util.Log.d(mTAG, (((""p2pSetChannel: lc="" + lc) + "", oc="") + oc)); return mSupplicantP2pIfaceHal.setListenChannel(lc, oc); }",76948cb59ee2a38b433bc769e993c1efc1429121,"p2pSetChannel(int,int)","p2pSetChannel(int,int)",17,173,"public boolean p2pSetChannel(int lc, int oc) { return mSupplicantP2pIfaceHal.setListenChannel(lc, oc); }",3e5ba07dded7f4fad11e805151884c676531b2ac,"p2pSetChannel(int,int)",6800,94,40
578734,tests_telephonytests_src_com_android_internal_telephony_CellIdentityWcdmaTest.java,1.0,"@android.test.suitebuilder.annotation.SmallTest public void testParcelWithInvalidMccMnc() { final java.lang.String invalidMcc = ""randomStuff""; final java.lang.String invalidMnc = ""randomStuff""; android.telephony.CellIdentityWcdma ci = new android.telephony.CellIdentityWcdma(com.android.internal.telephony.CellIdentityWcdmaTest.LAC, com.android.internal.telephony.CellIdentityWcdmaTest.CID, com.android.internal.telephony.CellIdentityWcdmaTest.PSC, com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.LAC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.CID); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.PSC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN); p.writeString(invalidMcc); p.writeString(invalidMnc); p.setDataPosition(0); android.telephony.CellIdentityWcdma newCi = CellIdentityWcdma.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }",633d1a046ccbfd2674fcc12a20a7f9f740750c49,"@android.test.suitebuilder.annotation.SmallTest public void testParcelWithInvalidMccMnc() { final java.lang.String invalidMcc = ""randomStuff""; final java.lang.String invalidMnc = ""randomStuff""; android.telephony.CellIdentityWcdma ci = new android.telephony.CellIdentityWcdma(com.android.internal.telephony.CellIdentityWcdmaTest.LAC, com.android.internal.telephony.CellIdentityWcdmaTest.CID, com.android.internal.telephony.CellIdentityWcdmaTest.PSC, com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(CellIdentity.TYPE_WCDMA); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.LAC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.CID); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.PSC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN); p.writeString(invalidMcc); p.writeString(invalidMnc); p.setDataPosition(0); android.telephony.CellIdentityWcdma newCi = CellIdentityWcdma.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }",a8d55f4ff618be8a4061d0ca719fdcf2497118ea,testParcelWithInvalidMccMnc(),testParcelWithInvalidMccMnc(),5,1,"@android.test.suitebuilder.annotation.SmallTest public void testParcelWithInvalidMccMnc() { final java.lang.String invalidMcc = ""randomStuff""; final java.lang.String invalidMnc = ""randomStuff""; android.telephony.CellIdentityWcdma ci = new android.telephony.CellIdentityWcdma(com.android.internal.telephony.CellIdentityWcdmaTest.LAC, com.android.internal.telephony.CellIdentityWcdmaTest.CID, com.android.internal.telephony.CellIdentityWcdmaTest.PSC, com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN, null, null, null, null); android.os.Parcel p = android.os.Parcel.obtain(); p.writeInt(CellIdentity.TYPE_WCDMA); p.writeString(invalidMcc); p.writeString(invalidMnc); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.LAC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.CID); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.PSC); p.writeInt(com.android.internal.telephony.CellIdentityWcdmaTest.UARFCN); p.setDataPosition(0); android.telephony.CellIdentityWcdma newCi = CellIdentityWcdma.CREATOR.createFromParcel(p); assertEquals(ci, newCi); }",b9f7d5b2559c99bba981807cd0e161b9f9870420,testParcelWithInvalidMccMnc(),426401,328,328
81416,tests_tests_renderscript_src_android_renderscript_cts_TestAcos.java,,,,"private void checkAcosFloat() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testAcosFloat(in, out); verifyResultsAcosFloat(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAcosFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAcosFloat(in, out); verifyResultsAcosFloat(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAcosFloat: "" + (e.toString()))); } }",b9b254db85ae4e263cf637263debfd7d4ab2ac92,,checkAcosFloat(),9,1,"private void checkAcosFloatFloat() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 8723712675290550032L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.forEach_testAcosFloatFloat(in, out); verifyResultsAcosFloatFloat(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAcosFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testAcosFloatFloat(in, out); verifyResultsAcosFloatFloat(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAcosFloatFloat: "" + (e.toString()))); } }",1a622cded5780afb2ce4c43cb9c3f47bc03f7f9d,checkAcosFloatFloat(),142784,316,297
252478,java_tests_RsTest_src_com_android_rs_test_UT_copy_test.java,0.0,"void testFloat4(com.android.rs.test.RenderScript rs, com.android.rs.test.ScriptC_copy_test s) { com.android.rs.test.Allocation a1 = com.android.rs.test.Allocation.createSized(rs, com.android.rs.test.Element.F32_4(rs), 1024); com.android.rs.test.Allocation a2 = com.android.rs.test.Allocation.createSized(rs, com.android.rs.test.Element.F32_4(rs), 1024); float[] f1 = new float[1024 * 4]; float[] f2 = new float[1024 * 4]; for (int ct = 0; ct < (f1.length); ct++) { f1[ct] = ((float) (ct)); } a1.copyFrom(f1); s.forEach_copyFloat4(a1, a2); a2.copyTo(f2); for (int ct = 0; ct < (f1.length); ct++) { if ((f1[ct]) != (f2[ct])) { failTest(); android.util.Log.v(""RS Test"", (((((""Compare failed at "" + ct) + "", "") + (f1[ct])) + "", "") + (f2[ct]))); } } a1.destroy(); a2.destroy(); }",03f17951f78334ff4b13a58e189e9687a6aced6f,"void testFloat4(android.renderscript.RenderScript rs, com.android.rs.test.ScriptC_copy_test s) { android.renderscript.Allocation a1 = android.renderscript.Allocation.createSized(rs, android.renderscript.Element.F32_4(rs), 1024); android.renderscript.Allocation a2 = android.renderscript.Allocation.createSized(rs, android.renderscript.Element.F32_4(rs), 1024); float[] f1 = new float[1024 * 4]; float[] f2 = new float[1024 * 4]; for (int ct = 0; ct < (f1.length); ct++) { f1[ct] = ((float) (ct)); } a1.copyFrom(f1); s.forEach_copyFloat4(a1, a2); a2.copyTo(f2); for (int ct = 0; ct < (f1.length); ct++) { if ((f1[ct]) != (f2[ct])) { failTest(); android.util.Log.v(""RS Test"", (((((""Compare failed at "" + ct) + "", "") + (f1[ct])) + "", "") + (f2[ct]))); } } a1.destroy(); a2.destroy(); }",a4e927d1c7ac458fc60bf417009ae8333bd912e3,"testFloat4(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_copy_test)","testFloat4(android.renderscript.RenderScript,com.android.rs.test.ScriptC_copy_test)",7,3,"void testFloat4(com.android.rs.test.RenderScript rs, com.android.rs.test.ScriptC_copy_test s) { com.android.rs.test.Allocation a1 = com.android.rs.test.Allocation.createSized(rs, com.android.rs.test.Element.F32_4(rs), 1024); com.android.rs.test.Allocation a2 = com.android.rs.test.Allocation.createSized(rs, com.android.rs.test.Element.F32_4(rs), 1024); float[] f1 = new float[1024 * 4]; float[] f2 = new float[1024 * 4]; for (int ct = 0; ct < (f1.length); ct++) { f1[ct] = ((float) (ct)); } a1.copyFrom(f1); s.forEach_copyFloat4(a1, a2); a2.copyTo(f2); for (int ct = 0; ct < (f1.length); ct++) { if ((f1[ct]) != (f2[ct])) { failTest(); android.util.Log.v(""RS Test"", (((((""Compare failed at "" + ct) + "", "") + (f1[ct])) + "", "") + (f2[ct]))); } } a1.destroy(); a2.destroy(); }",03f17951f78334ff4b13a58e189e9687a6aced6f,"testFloat4(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_copy_test)",379540,274,295
72090,sdklib_src_main_java_com_android_sdklib_repository_local_Update.java,,,,"public static com.android.sdklib.repository.local.Update.Result computeUpdates(@com.android.annotations.NonNull com.android.sdklib.repository.local.LocalPkgInfo[] localPkgs, @com.android.annotations.NonNull com.google.common.collect.Multimap<com.android.sdklib.repository.descriptors.PkgType, com.android.sdklib.repository.remote.RemotePkgInfo> remotePkgs) { com.android.sdklib.repository.local.Update.Result result = new com.android.sdklib.repository.local.Update.Result(); for (com.android.sdklib.repository.local.LocalPkgInfo local : localPkgs) { com.android.sdklib.repository.local.Update.findUpdate(local, remotePkgs, result); } return result; }",2e1caa06fd141fe3f4d009f80dffcb2ae58f9190,,"computeUpdates(com.android.sdklib.repository.local.LocalPkgInfo[],com.google.common.collect.Multimap)",7,3,"public static com.android.sdklib.repository.local.Update.Result computeUpdates(@com.android.annotations.NonNull com.android.sdklib.repository.local.LocalPkgInfo[] localPkgs, @com.android.annotations.NonNull com.google.common.collect.Multimap<com.android.sdklib.repository.descriptors.PkgType, com.android.sdklib.repository.remote.RemotePkgInfo> remotePkgs) { com.android.sdklib.repository.local.Update.Result result = new com.android.sdklib.repository.local.Update.Result(); java.util.Set<com.android.sdklib.repository.remote.RemotePkgInfo> updates = com.google.common.collect.Sets.newTreeSet(); for (com.android.sdklib.repository.local.LocalPkgInfo local : localPkgs) { com.android.sdklib.repository.remote.RemotePkgInfo update = com.android.sdklib.repository.local.Update.findUpdate(local, remotePkgs, result); if (update != null) { updates.add(update); } } nextRemote : for (com.android.sdklib.repository.remote.RemotePkgInfo remote : remotePkgs.values()) { if (updates.contains(remote)) { continue nextRemote; } com.android.sdklib.repository.descriptors.IPkgDesc remoteDesc = remote.getDesc(); for (com.android.sdklib.repository.local.LocalPkgInfo local : localPkgs) { com.android.sdklib.repository.descriptors.IPkgDesc localDesc = local.getDesc(); if (((remoteDesc.compareTo(localDesc)) == 0) || (remoteDesc.isUpdateFor(localDesc))) { continue nextRemote; } } result.mNewPkgs.add(remote); } return result; }",cd9ffffc1033539632910d4f39a9f746ba947491,"computeUpdates(com.android.sdklib.repository.local.LocalPkgInfo[],com.google.common.collect.Multimap)",30231,183,407
336304,luni_src_test_java_libcore_java_text_SimpleDateFormatTest.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testTimeZoneParsingErrorIndex() { java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat(""yyyy z"", java.util.Locale.ENGLISH); java.text.ParsePosition pos = new java.text.ParsePosition(0); java.util.Date parsed; parsed = dateFormat.parse(""2000 foobar"", pos); assertNull(parsed); assertEquals(5, pos.getErrorIndex()); }",a9b1e92576290365d3431133cee4fa2e46366c54,,testTimeZoneParsingErrorIndex(),2,27,"public void testTimeZoneParsingErrorIndex() { java.text.SimpleDateFormat dateFormat = new java.text.SimpleDateFormat(""yyyy z"", java.util.Locale.ENGLISH); checkTimeZoneParsingErrorIndex(dateFormat); }",d21d83ccf858ccea8a06f9b7e8c47905de31ee61,testTimeZoneParsingErrorIndex(),242368,84,47
272912,tests_wifitests_src_com_android_server_wifi_hotspot2_PasspointManagerTest.java,,,,"@org.junit.Before public void setUp() throws java.lang.Exception { initMocks(this); when(mWifiInjector.makePasspointEventHandler(any(com.android.server.wifi.hotspot2.PasspointManager.class))).thenReturn(mHandler); mManager = new com.android.server.wifi.hotspot2.PasspointManager(mContext, mWifiInjector); }",6307ddf0ec27ae5c91c57a85bdc623214cc04f32,,setUp(),6,1,"@org.junit.Before public void setUp() throws java.lang.Exception { initMocks(this); mManager = new com.android.server.wifi.hotspot2.PasspointManager(mContext, mWifiInjector); org.mockito.ArgumentCaptor<com.android.server.wifi.hotspot2.PasspointEventHandler.Callbacks> callbacks = org.mockito.ArgumentCaptor.forClass(PasspointEventHandler.Callbacks.class); verify(mWifiInjector).makePasspointEventHandler(callbacks.capture()); mCallbacks = callbacks.getValue(); }",0660d9f15342a8efa2c65a2b5a52bf2b92b23049,setUp(),426920,82,112
88585,luni_src_test_java_libcore_javax_net_ssl_SSLSocketTest.java,24.0,"public void test_SSLSocket_getSSLParameters() throws java.lang.Exception { javax.net.ssl.SSLSocketFactory sf = ((javax.net.ssl.SSLSocketFactory) (javax.net.ssl.SSLSocketFactory.getDefault())); javax.net.ssl.SSLSocket ssl = ((javax.net.ssl.SSLSocket) (sf.createSocket())); javax.net.ssl.SSLParameters p = ssl.getSSLParameters(); assertNotNull(p); java.lang.String[] cipherSuites = p.getCipherSuites(); assertNotSame(cipherSuites, ssl.getEnabledCipherSuites()); assertEquals(java.util.Arrays.asList(cipherSuites), java.util.Arrays.asList(ssl.getEnabledCipherSuites())); java.lang.String[] protocols = p.getProtocols(); assertNotSame(protocols, ssl.getEnabledProtocols()); assertEquals(java.util.Arrays.asList(protocols), java.util.Arrays.asList(ssl.getEnabledProtocols())); assertEquals(p.getWantClientAuth(), ssl.getWantClientAuth()); assertEquals(p.getNeedClientAuth(), ssl.getNeedClientAuth()); }",d4c454c90023995dd5ad2f8dc2dcfdb1924931fe,"public void test_SSLSocket_getSSLParameters() throws java.lang.Exception { javax.net.ssl.SSLSocketFactory sf = ((javax.net.ssl.SSLSocketFactory) (javax.net.ssl.SSLSocketFactory.getDefault())); javax.net.ssl.SSLSocket ssl = ((javax.net.ssl.SSLSocket) (sf.createSocket())); javax.net.ssl.SSLParameters p = ssl.getSSLParameters(); assertNotNull(p); java.lang.String[] cipherSuites = p.getCipherSuites(); assertNotSame(cipherSuites, ssl.getEnabledCipherSuites()); assertEquals(java.util.Arrays.asList(cipherSuites), java.util.Arrays.asList(ssl.getEnabledCipherSuites())); java.lang.String[] protocols = p.getProtocols(); assertNotSame(protocols, ssl.getEnabledProtocols()); assertEquals(java.util.Arrays.asList(protocols), java.util.Arrays.asList(ssl.getEnabledProtocols())); assertEquals(p.getWantClientAuth(), ssl.getWantClientAuth()); assertEquals(p.getNeedClientAuth(), ssl.getNeedClientAuth()); assertNull(p.getEndpointIdentificationAlgorithm()); p.setEndpointIdentificationAlgorithm(""HTTPS""); assertEquals(""HTTPS"", p.getEndpointIdentificationAlgorithm()); p.setEndpointIdentificationAlgorithm(""FOO""); assertEquals(""FOO"", p.getEndpointIdentificationAlgorithm()); }",e20c9551364a2a058a29397845385f980471b53f,test_SSLSocket_getSSLParameters(),test_SSLSocket_getSSLParameters(),5,23,"public void test_SSLSocket_getSSLParameters() throws java.lang.Exception { javax.net.ssl.SSLSocketFactory sf = ((javax.net.ssl.SSLSocketFactory) (javax.net.ssl.SSLSocketFactory.getDefault())); javax.net.ssl.SSLSocket ssl = ((javax.net.ssl.SSLSocket) (sf.createSocket())); javax.net.ssl.SSLParameters p = ssl.getSSLParameters(); assertNotNull(p); java.lang.String[] cipherSuites = p.getCipherSuites(); assertNotSame(cipherSuites, ssl.getEnabledCipherSuites()); assertEquals(java.util.Arrays.asList(cipherSuites), java.util.Arrays.asList(ssl.getEnabledCipherSuites())); java.lang.String[] protocols = p.getProtocols(); assertNotSame(protocols, ssl.getEnabledProtocols()); assertEquals(java.util.Arrays.asList(protocols), java.util.Arrays.asList(ssl.getEnabledProtocols())); assertEquals(p.getWantClientAuth(), ssl.getWantClientAuth()); assertEquals(p.getNeedClientAuth(), ssl.getNeedClientAuth()); assertNull(p.getEndpointIdentificationAlgorithm()); p.setEndpointIdentificationAlgorithm(null); assertNull(p.getEndpointIdentificationAlgorithm()); p.setEndpointIdentificationAlgorithm(""HTTPS""); assertEquals(""HTTPS"", p.getEndpointIdentificationAlgorithm()); p.setEndpointIdentificationAlgorithm(""FOO""); assertEquals(""FOO"", p.getEndpointIdentificationAlgorithm()); }",2aaff8c6a48cbf98624ce23f17fe9f3de2d95baa,test_SSLSocket_getSSLParameters(),87521,277,295
95831,plugins_gradle_tooling-extension-impl_src_org_jetbrains_plugins_gradle_tooling_internal_IdeaCompilerOutputImpl.java,,,,@java.lang.Override public java.io.File getTestResourcesDir() { return testResourcesDir; },183c625a21024ad3118ce43eefb3cbc26c94c309,,getTestResourcesDir(),4,6,@java.lang.Override public java.io.File getTestResourcesDir() { return myTestResourcesDir; },8a59cde837484f9433ada003601f8c39ee97fb1c,getTestResourcesDir(),439932,24,25
236051,jack_src_com_android_jack_incremental_IncrementalInputFilter.java,9.0,"@javax.annotation.Nonnull private void fillDependencies(@javax.annotation.Nonnull com.android.jack.library.InputJackLibrary library, @javax.annotation.Nonnull com.android.sched.vfs.VPath dependencyVPath, @javax.annotation.Nonnull com.android.jack.analysis.dependency.Dependency dependency) throws com.android.jack.library.FileTypeDoesNotExistException, com.android.sched.util.file.CannotReadException { com.android.sched.vfs.InputVFile dependenciesVFile = library.getFile(FileType.DEPENDENCIES, dependencyVPath); java.io.InputStreamReader fileReader = null; try { fileReader = new java.io.InputStreamReader(dependenciesVFile.getInputStream()); dependency.read(fileReader); } catch (java.util.NoSuchElementException e) { throw new com.android.sched.util.file.CannotReadException(dependenciesVFile, e); } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotReadException(dependenciesVFile, e); } finally { if (fileReader != null) { try { fileReader.close(); } catch (java.io.IOException e) { } } } }",e670cf3b40a5282922e481a6d4bc5751496c0b28,"@javax.annotation.Nonnull private void fillDependencies(@javax.annotation.Nonnull com.android.jack.library.InputJackLibrary library, @javax.annotation.Nonnull com.android.sched.vfs.VPath dependencyVPath, @javax.annotation.Nonnull com.android.jack.analysis.dependency.Dependency dependency) throws com.android.jack.library.FileTypeDoesNotExistException, com.android.sched.util.file.CannotReadException { com.android.sched.vfs.InputVFile dependenciesVFile = library.getFile(FileType.DEPENDENCIES, dependencyVPath); java.io.InputStreamReader fileReader = null; try { fileReader = new java.io.InputStreamReader(dependenciesVFile.getInputStream()); dependency.read(fileReader); } catch (java.util.NoSuchElementException | com.android.sched.util.file.WrongPermissionException e) { throw new com.android.sched.util.file.CannotReadException(dependenciesVFile, e); } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotReadException(dependenciesVFile, e); } finally { if (fileReader != null) { try { fileReader.close(); } catch (java.io.IOException e) { } } } }",8fdd4b99d67fefed0d422bf333ce5977cb0648be,"fillDependencies(com.android.jack.library.InputJackLibrary,com.android.sched.vfs.VPath,com.android.jack.analysis.dependency.Dependency)","fillDependencies(com.android.jack.library.InputJackLibrary,com.android.sched.vfs.VPath,com.android.jack.analysis.dependency.Dependency)",4,9,"@javax.annotation.Nonnull private void fillDependencies(@javax.annotation.Nonnull com.android.jack.library.InputJackLibrary library, @javax.annotation.Nonnull com.android.sched.vfs.VPath dependencyVPath, @javax.annotation.Nonnull com.android.jack.analysis.dependency.Dependency dependency) throws com.android.jack.library.FileTypeDoesNotExistException, com.android.sched.util.file.CannotReadException { com.android.sched.vfs.InputVFile dependenciesVFile = library.getFile(FileType.DEPENDENCIES, dependencyVPath); java.io.InputStreamReader fileReader = null; try { fileReader = new java.io.InputStreamReader(dependenciesVFile.getInputStream()); dependency.read(fileReader); } catch (java.util.NoSuchElementException | com.android.sched.util.file.WrongPermissionException | java.io.IOException e) { throw new com.android.sched.util.file.CannotReadException(dependenciesVFile, e); } finally { if (fileReader != null) { try { fileReader.close(); } catch (java.io.IOException e) { } } } }",e13b34a564c31264bbf92662b0a12a6c0ea92370,"fillDependencies(com.android.jack.library.InputJackLibrary,com.android.sched.vfs.VPath,com.android.jack.analysis.dependency.Dependency)",293559,273,246
48539,luni_src_test_java_tests_security_cert_X509Certificate2Test.java,25.0,"public void testCerficateException() { try { java.security.cert.CertificateFactory cf = java.security.cert.CertificateFactory.getInstance(""X.509""); java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(tests.security.cert.X509Certificate2Test.base64certTampered.getBytes()); cert = ((java.security.cert.X509Certificate) (cf.generateCertificate(bais))); } catch (java.security.cert.CertificateException e) { } try { java.security.cert.CertificateFactory cf = java.security.cert.CertificateFactory.getInstance(""X.509""); java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(tests.security.cert.X509Certificate2Test.base64cert.getBytes()); cert = ((java.security.cert.X509Certificate) (cf.generateCertificate(bais))); } catch (java.security.cert.CertificateException e) { } }",2f54c51ee555e4de310838e2b82a22fd12023f57,"public void testCertificateException() { try { java.security.cert.CertificateFactory cf = java.security.cert.CertificateFactory.getInstance(""X.509""); java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(tests.security.cert.X509Certificate2Test.base64certTampered.getBytes()); cert = ((java.security.cert.X509Certificate) (cf.generateCertificate(bais))); } catch (java.security.cert.CertificateException e) { } try { java.security.cert.CertificateFactory cf = java.security.cert.CertificateFactory.getInstance(""X.509""); java.io.ByteArrayInputStream bais = new java.io.ByteArrayInputStream(tests.security.cert.X509Certificate2Test.base64cert.getBytes()); cert = ((java.security.cert.X509Certificate) (cf.generateCertificate(bais))); } catch (java.security.cert.CertificateException e) { } }",8063d30d143fecab82c89eca18414e13d2eb6c28,testCerficateException(),testCertificateException(),17,1,public void testCertificateException() throws java.lang.Exception { try { generateCert(tests.security.cert.X509Certificate2Test.CERT_TAMPERED); fail(); } catch (java.security.cert.CertificateException expected) { } try { generateCert(tests.security.cert.X509Certificate2Test.CERT); fail(); } catch (java.security.cert.CertificateException expected) { } },ccefdf25d6305d5a10b1fe4f6c0b664df762fb8a,testCertificateException(),437206,209,91
83593,luni_src_test_java_libcore_java_util_zip_ZipFileTest.java,8.0,"public void testZipFileWithLotsOfEntries() throws java.io.IOException { int expectedEntryCount = (64 * 1024) - 1; java.io.File f = createZipFile(expectedEntryCount, 0); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); int entryCount = 0; for (java.util.Enumeration<? extends java.util.zip.ZipEntry> e = zipFile.entries(); e.hasMoreElements();) { java.util.zip.ZipEntry zipEntry = e.nextElement(); ++entryCount; } assertEquals(expectedEntryCount, entryCount); zipFile.close(); }",81091569a296b84eaa4f16bbaf9c6c6073454f97,"public void testZipFileWithLotsOfEntries() throws java.io.IOException { int expectedEntryCount = (64 * 1024) - 1; java.io.File f = createZipFile(expectedEntryCount, 0); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); int entryCount = countEntries(zipFile); assertEquals(expectedEntryCount, entryCount); zipFile.close(); }",098ab6a38cc3400577d13d9c6e8163baa2142827,testZipFileWithLotsOfEntries(),testZipFileWithLotsOfEntries(),11,9,"public void testZipFileWithLotsOfEntries() throws java.io.IOException { int expectedEntryCount = (64 * 1024) - 1; java.io.File f = createZipFile(expectedEntryCount, 0); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); int entryCount = 0; for (java.util.Enumeration<? extends java.util.zip.ZipEntry> e = zipFile.entries(); e.hasMoreElements();) { java.util.zip.ZipEntry zipEntry = e.nextElement(); ++entryCount; } assertEquals(expectedEntryCount, entryCount); zipFile.close(); }",81091569a296b84eaa4f16bbaf9c6c6073454f97,testZipFileWithLotsOfEntries(),111948,91,137
291910,jack_src_com_android_jack_shrob_spec_ClassSpecification.java,4.0,@java.lang.Override public boolean matches(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) { if (((annotationType) != null) && (!(annotationType.matches(type.getAnnotations())))) { return false; } if (((modifier) != null) && (!(modifier.matches(type)))) { return false; } if (!(classType.matches(type))) { return false; } if (!(name.matches(com.android.jack.shrob.proguard.GrammarActions.getSourceFormatter().getName(type)))) { return false; } if (((inheritance) != null) && (!(inheritance.matches(type)))) { return false; } return true; },81bf6bc9f61bf428e3008290d887dfb6e79d1adf,@java.lang.Override public boolean matches(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) { if (((annotationType) != null) && (!(annotationType.matches(type.getAnnotations())))) { return false; } if (((modifier) != null) && (!(modifier.matches(type)))) { return false; } if (!(classType.matches(type))) { return false; } boolean matchedName = false; for (com.android.jack.shrob.spec.NameSpecification name : nameSpecs) { if (name.matches(com.android.jack.shrob.proguard.GrammarActions.getSourceFormatter().getName(type))) { matchedName = true; } } if (!matchedName) { return false; } if (((inheritance) != null) && (!(inheritance.matches(type)))) { return false; } return true; },b9a17c4261a85cfee52a6b66a3fe29b4b01e45fd,matches(com.android.jack.ir.ast.JDefinedClassOrInterface),matches(com.android.jack.ir.ast.JDefinedClassOrInterface),4,3,@java.lang.Override public boolean matches(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) { if (((annotationType) != null) && (!(annotationType.matches(type.getAnnotations())))) { return false; } if (((modifier) != null) && (!(modifier.matches(type)))) { return false; } if (!(classType.matches(type))) { return false; } boolean matchedName = false; for (com.android.jack.shrob.spec.NameSpecification name : nameSpecs) { if (name.matches(com.android.jack.shrob.proguard.GrammarActions.getSourceFormatter().getName(type))) { matchedName = true; break; } } if (!matchedName) { return false; } if (((inheritance) != null) && (!(inheritance.matches(type)))) { return false; } return true; },bc1c087284df3123dc6d1435d16447271b554430,matches(com.android.jack.ir.ast.JDefinedClassOrInterface),13094,189,191
91995,luni_src_main_java_libcore_io_Posix.java,0.0,public native java.io.FileDescriptor dup(java.io.FileDescriptor oldFd) throws libcore.io.ErrnoException;,c7429244237b0d5548547968d21e9416c464860c,public native java.io.FileDescriptor dup(java.io.FileDescriptor oldFd) throws android.os.ErrnoException;,250159d69f6f45002d8972f665a263d48334e7ff,dup(java.io.FileDescriptor),dup(java.io.FileDescriptor),3,0,public native java.io.FileDescriptor dup(java.io.FileDescriptor oldFd) throws android.system.ErrnoException;,86058ca192edcfdf8807615811c57c903b1f8048,dup(java.io.FileDescriptor),169937,27,27
153250,asset-studio_src_main_java_com_android_assetstudiolib_vectordrawable_VdPreview.java,0.0,"@com.android.annotations.Nullable public static java.awt.image.BufferedImage getPreviewFromVectorXml(int imageWidth, @com.android.annotations.Nullable java.lang.String xmlFileContent, @com.android.annotations.Nullable java.lang.StringBuilder vdErrorLog) { if ((xmlFileContent == null) || (xmlFileContent.isEmpty())) { return null; } com.android.assetstudiolib.vectordrawable.VdParser p = new com.android.assetstudiolib.vectordrawable.VdParser(); com.android.assetstudiolib.vectordrawable.VdTree vdTree; java.io.InputStream inputStream = new java.io.ByteArrayInputStream(xmlFileContent.getBytes(Charsets.UTF_8)); vdTree = p.parse(inputStream, vdErrorLog); if (vdTree == null) { return null; } java.awt.image.BufferedImage image = new java.awt.image.BufferedImage(imageWidth, ((int) (imageWidth / (vdTree.getAspectRatio()))), java.awt.image.BufferedImage.TYPE_INT_ARGB); java.awt.Graphics g = image.getGraphics(); g.setColor(new java.awt.Color(255, 255, 255, 0)); g.fillRect(0, 0, image.getWidth(), image.getHeight()); vdTree.draw(g, image.getWidth(), image.getHeight()); return image; }",9288140ffc8413947a0e74b29496050c53a9bfa0,"@com.android.annotations.Nullable public static java.awt.image.BufferedImage getPreviewFromVectorXml(int forceImageWidth, float imageScale, @com.android.annotations.Nullable java.lang.String xmlFileContent, @com.android.annotations.Nullable java.lang.StringBuilder vdErrorLog) { if ((xmlFileContent == null) || (xmlFileContent.isEmpty())) { return null; } com.android.assetstudiolib.vectordrawable.VdParser p = new com.android.assetstudiolib.vectordrawable.VdParser(); com.android.assetstudiolib.vectordrawable.VdTree vdTree; java.io.InputStream inputStream = new java.io.ByteArrayInputStream(xmlFileContent.getBytes(Charsets.UTF_8)); vdTree = p.parse(inputStream, vdErrorLog); if (vdTree == null) { return null; } float vdWidth = vdTree.getBaseWidth(); float vdHeight = vdTree.getBaseHeight(); float imageWidth; float imageHeight; if (forceImageWidth > 0) { imageWidth = forceImageWidth; imageHeight = (forceImageWidth * vdHeight) / vdWidth; } else { imageWidth = vdWidth * imageScale; imageHeight = vdHeight * imageScale; } java.awt.image.BufferedImage image = new java.awt.image.BufferedImage(((int) (imageWidth)), ((int) (imageHeight)), java.awt.image.BufferedImage.TYPE_INT_ARGB); java.awt.Graphics g = image.getGraphics(); g.setColor(new java.awt.Color(255, 255, 255, 0)); g.fillRect(0, 0, image.getWidth(), image.getHeight()); vdTree.draw(g, image.getWidth(), image.getHeight()); return image; }",aa90fe1f13425d28e1f949744e389603f8553876,"getPreviewFromVectorXml(int,java.lang.String,java.lang.StringBuilder)","getPreviewFromVectorXml(int,float,java.lang.String,java.lang.StringBuilder)",3,2,"@com.android.annotations.Nullable public static java.awt.image.BufferedImage getPreviewFromVectorXml(@com.android.annotations.NonNull com.android.assetstudiolib.vectordrawable.VdPreview.Size size, @com.android.annotations.Nullable java.lang.String xmlFileContent, @com.android.annotations.Nullable java.lang.StringBuilder vdErrorLog) { if ((xmlFileContent == null) || (xmlFileContent.isEmpty())) { return null; } com.android.assetstudiolib.vectordrawable.VdParser p = new com.android.assetstudiolib.vectordrawable.VdParser(); com.android.assetstudiolib.vectordrawable.VdTree vdTree; java.io.InputStream inputStream = new java.io.ByteArrayInputStream(xmlFileContent.getBytes(Charsets.UTF_8)); vdTree = p.parse(inputStream, vdErrorLog); if (vdTree == null) { return null; } float vdWidth = vdTree.getBaseWidth(); float vdHeight = vdTree.getBaseHeight(); float imageWidth; float imageHeight; int forceImageWidth = size.mImageWidth; float imageScale = size.mImageScale; if (forceImageWidth > 0) { imageWidth = forceImageWidth; imageHeight = (forceImageWidth * vdHeight) / vdWidth; } else { imageWidth = vdWidth * imageScale; imageHeight = vdHeight * imageScale; } java.awt.image.BufferedImage image = new java.awt.image.BufferedImage(((int) (imageWidth)), ((int) (imageHeight)), java.awt.image.BufferedImage.TYPE_INT_ARGB); java.awt.Graphics g = image.getGraphics(); g.setColor(new java.awt.Color(255, 255, 255, 0)); g.fillRect(0, 0, image.getWidth(), image.getHeight()); vdTree.draw(g, image.getWidth(), image.getHeight()); return image; }",acd24453a0fc09c22aba9ea685a16dfc5346853e,"getPreviewFromVectorXml(com.android.assetstudiolib.vectordrawable.VdPreview$Size,java.lang.String,java.lang.StringBuilder)",68077,389,426
74153,gradle-import_src_main_java_com_android_tools_gradle_eclipse_GradleImport.java,25.0,@com.android.annotations.NonNull public com.android.tools.gradle.eclipse.GradleImport setSdkManager(@com.android.annotations.NonNull com.android.sdklib.SdkManager sdkManager) { mSdkManager = sdkManager; mSdkLocation = new java.io.File(sdkManager.getLocation()); return this; },cc07dd24bc756e2f0fc3a22a6ac4b0e647376dae,@com.android.annotations.NonNull public com.android.tools.gradle.eclipse.GradleImport setSdk(@com.android.annotations.NonNull com.android.sdklib.repository.local.LocalSdk localSdk) { mLocalSdk = localSdk; mSdkLocation = localSdk.getLocation(); return this; },f12fe01a9b3f35ba82c7dd345d0ac7ade93bd0dc,setSdkManager(com.android.sdklib.SdkManager),setSdk(com.android.sdklib.repository.local.LocalSdk),3,28,@com.android.annotations.NonNull public com.android.tools.gradle.eclipse.GradleImport setSdkManager(@com.android.annotations.NonNull com.android.sdklib.SdkManager sdkManager) { mSdkManager = sdkManager; mSdkLocation = new java.io.File(sdkManager.getLocation()); return this; },cc07dd24bc756e2f0fc3a22a6ac4b0e647376dae,setSdkManager(com.android.sdklib.SdkManager),505772,68,72
110941,jack_src_com_android_jack_backend_dex_DexWritingTool.java,4.0,"protected void fillDexLists(java.util.List<com.android.sched.vfs.InputVFile> mainDexList, java.util.List<com.android.sched.vfs.InputVFile> anyDexList) throws com.android.jack.JackIOException { for (com.android.jack.ir.ast.JDefinedClassOrInterface type : com.android.jack.Jack.getSession().getTypesToEmit()) { try { com.android.sched.vfs.InputVFile inputVFile = getTypeDexDir().getInputVFile(com.android.jack.backend.dex.DexWriter.getFilePath(type)); if (type.containsMarker(com.android.jack.backend.dex.MainDexMarker.class)) { mainDexList.add(inputVFile); } else { anyDexList.add(inputVFile); } } catch (com.android.sched.util.file.NotFileOrDirectoryException e) { throw new com.android.jack.JackIOException(((""Error trying to read file for type '"" + (com.android.jack.Jack.getUserFriendlyFormatter().getName(type))) + ""'""), e); } } }",da7e3b43ac016aec38db0f5d70a8f5ffe08aa5be,"protected void fillDexLists(java.util.List<com.android.sched.vfs.InputVFile> mainDexList, java.util.List<com.android.sched.vfs.InputVFile> anyDexList) throws com.android.jack.JackIOException { for (com.android.jack.ir.ast.JDefinedClassOrInterface type : com.android.jack.Jack.getSession().getTypesToEmit()) { try { com.android.sched.vfs.InputVFile inputVFile; com.android.sched.util.location.Location loc = type.getLocation(); if (loc instanceof com.android.jack.library.TypeInInputLibraryLocation) { com.android.jack.library.InputLibrary inputLibrary = ((com.android.jack.library.TypeInInputLibraryLocation) (loc)).getInputLibraryLocation().getInputLibrary(); if (inputLibrary.hasBinary(BinaryKind.DEX)) { try { inputVFile = inputLibrary.getBinary(type, BinaryKind.DEX); } catch (com.android.jack.library.BinaryDoesNotExistException e) { throw new com.android.jack.JackUserException(e); } } else { inputVFile = getIntermediateDexDir().getInputVFile(com.android.jack.backend.dex.DexWriter.getFilePath(type)); } } else { inputVFile = getIntermediateDexDir().getInputVFile(com.android.jack.backend.dex.DexWriter.getFilePath(type)); } if (type.containsMarker(com.android.jack.backend.dex.MainDexMarker.class)) { mainDexList.add(inputVFile); } else { anyDexList.add(inputVFile); } } catch (com.android.sched.util.file.NotFileOrDirectoryException e) { throw new com.android.jack.JackIOException(((""Error trying to read file for type '"" + (com.android.jack.Jack.getUserFriendlyFormatter().getName(type))) + ""'""), e); } } }",542901d735578963002d8b1bc2bf6524d7572bf5,"fillDexLists(java.util.List,java.util.List)","fillDexLists(java.util.List,java.util.List)",3,4,"protected void fillDexLists(@javax.annotation.Nonnull java.util.List<com.android.sched.vfs.InputVFile> mainDexList, @javax.annotation.Nonnull java.util.List<com.android.sched.vfs.InputVFile> anyDexList) throws com.android.jack.library.LibraryFormatException { for (com.android.jack.ir.ast.JDefinedClassOrInterface type : com.android.jack.Jack.getSession().getTypesToEmit()) { try { com.android.sched.vfs.InputVFile inputVFile; com.android.sched.util.location.Location loc = type.getLocation(); if (loc instanceof com.android.jack.library.TypeInInputLibraryLocation) { com.android.jack.library.InputLibrary inputLibrary = ((com.android.jack.library.TypeInInputLibraryLocation) (loc)).getInputLibraryLocation().getInputLibrary(); if (inputLibrary.hasBinary(BinaryKind.DEX)) { try { inputVFile = inputLibrary.getBinary(new com.android.sched.vfs.VPath(com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter().getName(type), '/'), BinaryKind.DEX); } catch (com.android.jack.library.BinaryDoesNotExistException e) { throw new com.android.jack.library.LibraryFormatException(e); } } else { inputVFile = getIntermediateDexDir().getInputVFile(com.android.jack.backend.dex.DexWriter.getFilePath(type)); } } else { inputVFile = getIntermediateDexDir().getInputVFile(com.android.jack.backend.dex.DexWriter.getFilePath(type)); } if (type.containsMarker(com.android.jack.backend.dex.MainDexMarker.class)) { mainDexList.add(inputVFile); } else { anyDexList.add(inputVFile); } } catch (com.android.sched.util.file.NotFileOrDirectoryException e) { throw new java.lang.AssertionError(e); } } }",a7a1e422c14df68446850287110d230cf76bd7ec,"fillDexLists(java.util.List,java.util.List)",314802,444,455
159876,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_dsl_TestOptions.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setReportDir(java.lang.String reportDir) { this.reportDir = reportDir; },d4fad923e70bfb57301de6b7ff3671a3ac31f609,,setReportDir(java.lang.String),3,9,public void setReportDir(@com.android.annotations.Nullable java.lang.String reportDir) { this.reportDir = reportDir; },d7205882ef0e3aeadaa471a063e7fe974f08eb46,setReportDir(java.lang.String),29562,24,31
433560,tests_net_java_com_android_server_connectivity_tethering_OffloadControllerTest.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testNoSettingsValueDefaultDisabledDoesNotStart() { setupFunctioningHardwareInterface(); when(mHardware.getDefaultTetherOffloadDisabled()).thenReturn(1); try { Settings.Global.getInt(mContentResolver, android.provider.Settings.Global.TETHER_OFFLOAD_DISABLED); fail(); } catch (android.provider.Settings.SettingNotFoundException expected) { } final com.android.server.connectivity.tethering.OffloadController offload = new com.android.server.connectivity.tethering.OffloadController(null, mHardware, mContentResolver, new android.net.util.SharedLog(""test"")); offload.start(); final org.mockito.InOrder inOrder = inOrder(mHardware); inOrder.verify(mHardware, times(1)).getDefaultTetherOffloadDisabled(); inOrder.verify(mHardware, never()).initOffloadConfig(); inOrder.verify(mHardware, never()).initOffloadControl(any(OffloadHardwareInterface.ControlCallback.class)); inOrder.verifyNoMoreInteractions(); }",e44bc26ad1c107e84e21925c7b9bd39cca89ed6d,,testNoSettingsValueDefaultDisabledDoesNotStart(),2,1,"public void testNoSettingsValueDefaultDisabledDoesNotStart() { setupFunctioningHardwareInterface(); when(mHardware.getDefaultTetherOffloadDisabled()).thenReturn(1); try { Settings.Global.getInt(mContentResolver, android.provider.Settings.Global.TETHER_OFFLOAD_DISABLED); fail(); } catch (android.provider.Settings.SettingNotFoundException expected) { } final com.android.server.connectivity.tethering.OffloadController offload = new com.android.server.connectivity.tethering.OffloadController(null, mHardware, mContentResolver, new android.net.util.SharedLog(""test"")); offload.start(); final org.mockito.InOrder inOrder = inOrder(mHardware); inOrder.verify(mHardware, times(1)).getDefaultTetherOffloadDisabled(); inOrder.verify(mHardware, never()).initOffloadConfig(); inOrder.verify(mHardware, never()).initOffloadControl(any(OffloadHardwareInterface.ControlCallback.class)); inOrder.verifyNoMoreInteractions(); }",389cce0e31072642c640d8e7aa321cfb48514cf2,testNoSettingsValueDefaultDisabledDoesNotStart(),42042,235,229
91995,luni_src_main_java_libcore_io_Posix.java,11.0,public native void fsync(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;,d1fefe1d97f0d430594ed7ec7fdb39a4fc16c2cd,public native void fsync(java.io.FileDescriptor fd) throws android.os.ErrnoException;,52583e1320a37d5c1d2ebbe58e40a52509a64580,fsync(java.io.FileDescriptor),fsync(java.io.FileDescriptor),3,12,public native void fsync(java.io.FileDescriptor fd) throws android.system.ErrnoException;,b6fb218b4c376c56bfa7bc52701cd22db5d89936,fsync(java.io.FileDescriptor),169849,22,22
119533,libart_src_main_java_java_lang_Daemons.java,13.0,public void requestGC() { if (java.lang.Daemons.GCDaemon.atomicBoolean.getAndSet(true)) { return; } synchronized(this) { notify(); } java.lang.Daemons.GCDaemon.atomicBoolean.set(false); },e8b5b6bc05573a3daca5556045fffae1c8e0d164,public void interrupt(java.lang.Thread thread) { dalvik.system.VMRuntime.getRuntime().requestGC(); },c26125df5de0cae450d83cc40b76592789ccbeee,requestGC(),interrupt(java.lang.Thread),2,18,public void interrupt(java.lang.Thread thread) { dalvik.system.VMRuntime.getRuntime().requestConcurrentGC(); },b8898d8b7ecc74842f77ecef1c4af3a91f1ba5fb,interrupt(java.lang.Thread),95720,26,27
534735,src_com_android_server_telecom_InCallAdapter.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void handoverTo(java.lang.String callId, android.telecom.PhoneAccountHandle destAcct, int videoState, android.os.Bundle extras) { try { android.telecom.Log.startSession(""ICA.hT"", mOwnerComponentName); long token = android.os.Binder.clearCallingIdentity(); try { synchronized(mLock) { com.android.server.telecom.Call call = mCallIdMapper.getCall(callId); if (call != null) { call.handoverTo(destAcct, videoState, extras); } else { android.telecom.Log.w(this, ""sendCallEvent, unknown call id: %s"", callId); } } } finally { android.os.Binder.restoreCallingIdentity(token); } } finally { android.telecom.Log.endSession(); } }",3183c684677c11b70e4c9d36f0fb9e09367bbfc3,,"handoverTo(java.lang.String,android.telecom.PhoneAccountHandle,int,android.os.Bundle)",4,17,"@java.lang.Override public void handoverTo(java.lang.String callId, android.telecom.PhoneAccountHandle destAcct, int videoState, android.os.Bundle extras) { try { android.telecom.Log.startSession(""ICA.hT"", mOwnerComponentName); long token = android.os.Binder.clearCallingIdentity(); try { synchronized(mLock) { com.android.server.telecom.Call call = mCallIdMapper.getCall(callId); if (call != null) { call.handoverTo(destAcct, videoState, extras); } else { android.telecom.Log.w(this, ""handoverTo, unknown call id: %s"", callId); } } } finally { android.os.Binder.restoreCallingIdentity(token); } } finally { android.telecom.Log.endSession(); } }",b75ccb4f8f0742c5eaa06b499ff4f10d35e1973a,"handoverTo(java.lang.String,android.telecom.PhoneAccountHandle,int,android.os.Bundle)",398466,199,199
161052,sched_src_com_android_sched_vfs_UnionVFS.java,,,,@java.lang.Override public boolean needsSequentialWriting() { return !(vfsList.get(0).getCapabilities().contains(Capabilities.PARALLEL_WRITE)); },d44d348db52ed08ba5d1db81d7932bdf3b0252af,,needsSequentialWriting(),15,1,@java.lang.Override public boolean needsSequentialWriting() { return !(capabilities.contains(Capabilities.PARALLEL_WRITE)); },2296f8d8faeae25d071a6b31d87969c4c10ba5eb,needsSequentialWriting(),316812,34,28
384432,luni_src_test_java_libcore_java_text_OldNumberFormatTest.java,8.0,"public void test_setMaximumIntegerDigits() { java.text.NumberFormat format = java.text.NumberFormat.getInstance(); format.setMaximumIntegerDigits(2); assertEquals(""Wrong result: case 1"", ""23"", format.format(123)); format.setMaximumIntegerDigits(java.lang.Integer.MIN_VALUE); assertEquals(""Wrong result: case 2"", ""0"", format.format(123)); }",25e1a14b28d329697b49120b0917fe09a2b23cd2,"public void test_setMaximumIntegerDigits() { java.text.NumberFormat format = java.text.NumberFormat.getInstance(); format.setMaximumIntegerDigits(2); assertEquals(""Wrong result: case 1"", ""23"", format.format(123)); format.setMaximumIntegerDigits(java.lang.Integer.MIN_VALUE); assertEquals(""Wrong result: case 2"", ""3"", format.format(123)); }",5d6b42023ceaad344859b8c2e72770bb4b40f4d4,test_setMaximumIntegerDigits(),test_setMaximumIntegerDigits(),18,8,"public void test_setMaximumIntegerDigits() { java.text.NumberFormat format = java.text.NumberFormat.getInstance(); format.setMaximumIntegerDigits(2); assertEquals(""Wrong result: case 1"", ""23"", format.format(123)); format.setMaximumIntegerDigits(java.lang.Integer.MIN_VALUE); assertEquals(""Wrong result: case 2"", "".0"", format.format(123)); }",69d5b570120f5eb756db733e5a673769248a6afa,test_setMaximumIntegerDigits(),387132,78,79
153341,service_java_com_android_server_wifi_WifiStateMachine.java,5.0,"private boolean setNetworkDetailedState(android.net.NetworkInfo.DetailedState state) { boolean hidden = false; if ((linkDebouncing) || (isRoaming())) { hidden = true; } if (com.android.server.wifi.WifiStateMachine.DBG) { log((((((""setDetailed state, old ="" + (mNetworkInfo.getDetailedState())) + "" and new state="") + state) + "" hidden="") + hidden)); } if (((mNetworkInfo.getExtraInfo()) != null) && ((mWifiInfo.getSSID()) != null)) { if (!(mNetworkInfo.getExtraInfo().equals(mWifiInfo.getSSID()))) { if (com.android.server.wifi.WifiStateMachine.DBG) { log((""setDetailed state send new extra info"" + (mWifiInfo.getSSID()))); } mNetworkInfo.setExtraInfo(mWifiInfo.getSSID()); sendNetworkStateChangeBroadcast(null); } } if (hidden == true) { return false; } if (state != (mNetworkInfo.getDetailedState())) { mNetworkInfo.setDetailedState(state, null, mWifiInfo.getSSID()); if ((mNetworkAgent) != null) { mNetworkAgent.sendNetworkInfo(mNetworkInfo); } sendNetworkStateChangeBroadcast(null); return true; } return false; }",78b43986143977b76975953296f2cbb8514d9fd5,"private boolean setNetworkDetailedState(android.net.NetworkInfo.DetailedState state) { boolean hidden = false; if ((linkDebouncing) || (isRoaming())) { hidden = true; } if (com.android.server.wifi.WifiStateMachine.DBG) { log((((((""setDetailed state, old ="" + (mNetworkInfo.getDetailedState())) + "" and new state="") + state) + "" hidden="") + hidden)); } if (((mNetworkInfo.getExtraInfo()) != null) && (!(mWifiInfo.getSSID().equals(WifiSsid.NONE)))) { if (!(mNetworkInfo.getExtraInfo().equals(mWifiInfo.getSSID()))) { if (com.android.server.wifi.WifiStateMachine.DBG) { log((""setDetailed state send new extra info"" + (mWifiInfo.getSSID()))); } mNetworkInfo.setExtraInfo(mWifiInfo.getSSID()); sendNetworkStateChangeBroadcast(null); } } if (hidden == true) { return false; } if (state != (mNetworkInfo.getDetailedState())) { mNetworkInfo.setDetailedState(state, null, mWifiInfo.getSSID()); if ((mNetworkAgent) != null) { mNetworkAgent.sendNetworkInfo(mNetworkInfo); } sendNetworkStateChangeBroadcast(null); return true; } return false; }",83bfeb00bd7a8c532be2270afa4e301ceb3f5a07,setNetworkDetailedState(android.net.NetworkInfo$DetailedState),setNetworkDetailedState(android.net.NetworkInfo$DetailedState),2,5,"private boolean setNetworkDetailedState(android.net.NetworkInfo.DetailedState state) { boolean hidden = false; if ((linkDebouncing) || (isRoaming())) { hidden = true; } if (com.android.server.wifi.WifiStateMachine.DBG) { log((((((""setDetailed state, old ="" + (mNetworkInfo.getDetailedState())) + "" and new state="") + state) + "" hidden="") + hidden)); } if ((((mNetworkInfo.getExtraInfo()) != null) && ((mWifiInfo.getSSID()) != null)) && (!(mWifiInfo.getSSID().equals(WifiSsid.NONE)))) { if (!(mNetworkInfo.getExtraInfo().equals(mWifiInfo.getSSID()))) { if (com.android.server.wifi.WifiStateMachine.DBG) { log((""setDetailed state send new extra info"" + (mWifiInfo.getSSID()))); } mNetworkInfo.setExtraInfo(mWifiInfo.getSSID()); sendNetworkStateChangeBroadcast(null); } } if (hidden == true) { return false; } if (state != (mNetworkInfo.getDetailedState())) { mNetworkInfo.setDetailedState(state, null, mWifiInfo.getSSID()); if ((mNetworkAgent) != null) { mNetworkAgent.sendNetworkInfo(mNetworkInfo); } sendNetworkStateChangeBroadcast(null); return true; } return false; }",d3b2145e7b8dd53a0b1b81c2adcaf2cfb0276f83,setNetworkDetailedState(android.net.NetworkInfo$DetailedState),86961,292,306
245759,test_609-checker-inline-interface_src_Main.java,,,,static void methodWithInvokeInterface(Interface interf) { interf.$noinline$doCall(); },706cef730e1c07507a1c61a5c35727c97c42991c,,methodWithInvokeInterface(Interface),2,4,static void methodWithInvokeInterface(Interface interf) { interf.doCall(); },1240d167507c5d1ed2618a6d8dc71c64e2af445e,methodWithInvokeInterface(Interface),148423,23,19
599176,telephony_java_android_telephony_NetworkRegistrationState.java,15.0,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mTransportType); dest.writeInt(mDomain); dest.writeInt(mRegState); dest.writeInt(mAccessNetworkTechnology); dest.writeInt(mReasonForDenial); dest.writeBoolean(mEmergencyOnly); dest.writeIntArray(mAvailableServices); dest.writeParcelable(mCellIdentity, 0); }",e94deb34e24b8f6c05857287e2842e619c030c88,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mTransportType); dest.writeInt(mDomain); dest.writeInt(mRegState); dest.writeInt(mAccessNetworkTechnology); dest.writeInt(mReasonForDenial); dest.writeBoolean(mEmergencyOnly); dest.writeIntArray(mAvailableServices); dest.writeParcelable(mCellIdentity, 0); if ((mVoiceSpecificStates) != null) { dest.writeBoolean(true); mVoiceSpecificStates.writeToParcel(dest, flags); } else { dest.writeBoolean(false); } if ((mDataSpecificStates) != null) { dest.writeBoolean(true); mDataSpecificStates.writeToParcel(dest, flags); } else { dest.writeBoolean(false); } }",61688fd877d5ace187ac7ce5868080d1c25d97e6,"writeToParcel(android.os.Parcel,int)","writeToParcel(android.os.Parcel,int)",10,14,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mTransportType); dest.writeInt(mDomain); dest.writeInt(mRegState); dest.writeInt(mAccessNetworkTechnology); dest.writeInt(mReasonForDenial); dest.writeBoolean(mEmergencyOnly); dest.writeIntArray(mAvailableServices); dest.writeParcelable(mCellIdentity, 0); dest.writeParcelable(mVoiceSpecificStates, 0); dest.writeParcelable(mDataSpecificStates, 0); }",7398f039401c8341a3d59e67b41414e0c0de2426,"writeToParcel(android.os.Parcel,int)",445200,174,116
142137,sched_src_com_android_sched_util_codec_PairListToMapCodecConverter.java,2.0,"@java.lang.Override @javax.annotation.Nonnull protected java.util.Map<T, U> convert(@javax.annotation.Nonnull java.util.List<java.util.Map.Entry<T, U>> list) { java.util.Map<T, U> map = new java.util.HashMap<T, U>(java.lang.Math.round(((list.size()) / 0.75F)), 0.75F); for (java.util.Map.Entry<T, U> entry : list) { map.put(entry.getKey(), entry.getValue()); } return map; }",02d7779cbeede26969d73e8915e505e396b7bf8a,"@java.lang.Override @javax.annotation.Nonnull protected java.util.Map<T, U> convert(@javax.annotation.Nonnull java.util.List<java.util.Map.Entry<T, U>> list) throws com.android.sched.util.codec.ConvertionException { com.android.sched.util.config.ChainedException.ChainedExceptionBuilder<com.android.sched.util.codec.ConvertionException> exceptions = new com.android.sched.util.config.ChainedException.ChainedExceptionBuilder<com.android.sched.util.codec.ConvertionException>(); java.util.Map<T, U> map = new java.util.HashMap<T, U>(java.lang.Math.round(((list.size()) / 0.75F)), 0.75F); for (java.util.Map.Entry<T, U> entry : list) { if (!(map.containsKey(entry.getKey()))) { map.put(entry.getKey(), entry.getValue()); } else { exceptions.appendException(new com.android.sched.util.codec.ConvertionException(((""Value for '"" + (entry.getKey())) + ""' is defined several times""))); } } exceptions.throwIfNecessary(); return map; }",1f5137286628522bf1e72e0d00f95631c72b0f37,convert(java.util.List),convert(java.util.List),3,2,"@java.lang.Override @javax.annotation.Nonnull protected java.util.Map<T, U> convert(@javax.annotation.Nonnull java.util.List<java.util.Map.Entry<T, U>> list) throws com.android.sched.util.codec.ParsingException { com.android.sched.util.config.ChainedException.ChainedExceptionBuilder<com.android.sched.util.codec.ParsingException> exceptions = new com.android.sched.util.config.ChainedException.ChainedExceptionBuilder<com.android.sched.util.codec.ParsingException>(); java.util.Map<T, U> map = new java.util.HashMap<T, U>(java.lang.Math.round(((list.size()) / 0.75F)), 0.75F); int index = 1; for (java.util.Map.Entry<T, U> entry : list) { if (!(map.containsKey(entry.getKey()))) { map.put(entry.getKey(), entry.getValue()); } else { exceptions.appendException(new com.android.sched.util.codec.ListParsingException(index, ((""Value for '"" + (entry.getKey())) + ""' is already defined""))); } index++; } exceptions.throwIfNecessary(); return map; }",a3847cfb79e82b695745f4b5ab565126d97c2fb0,convert(java.util.List),134883,269,273
42594,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_ui_PackagesPageImpl.java,,,,@java.lang.Override public org.eclipse.swt.graphics.Image getImage(java.lang.Object element) { com.android.sdkuilib.internal.repository.icons.ImageFactory imgFactory = mUpdaterData.getImageFactory(); if (imgFactory != null) { if ((mColumn) == (mColumnName)) { if (element instanceof com.android.sdkuilib.internal.repository.core.PkgCategory) { return imgFactory.getImageForObject(((com.android.sdkuilib.internal.repository.core.PkgCategory) (element)).getIconRef()); } else if (element instanceof com.android.sdkuilib.internal.repository.core.PkgItem) { return imgFactory.getImageForObject(((com.android.sdkuilib.internal.repository.core.PkgItem) (element)).getMainPackage()); } return imgFactory.getImageForObject(element); } else if (((mColumn) == (mColumnStatus)) && (element instanceof com.android.sdkuilib.internal.repository.core.PkgItem)) { com.android.sdkuilib.internal.repository.core.PkgItem pi = ((com.android.sdkuilib.internal.repository.core.PkgItem) (element)); switch (pi.getState()) { case INSTALLED : if (pi.hasUpdatePkg()) { return imgFactory.getImageByName(PackagesPageIcons.ICON_PKG_UPDATE); } else { return imgFactory.getImageByName(PackagesPageIcons.ICON_PKG_INSTALLED); } case NEW : java.lang.Package p = pi.getMainPackage(); if ((p != null) && (p.hasCompatibleArchive())) { return imgFactory.getImageByName(PackagesPageIcons.ICON_PKG_NEW); } else { return imgFactory.getImageByName(PackagesPageIcons.ICON_PKG_INCOMPAT); } } } } return super.getImage(element); },0714f144eed7d88ba1d6145910bacf41a427a1de,,getImage(java.lang.Object),8,20,@java.lang.Override public org.eclipse.swt.graphics.Image getImage(java.lang.Object element) { com.android.sdkuilib.internal.repository.icons.ImageFactory imgFactory = mUpdaterData.getImageFactory(); if (imgFactory != null) { if ((mColumn) == (mIColumnName)) { if (element instanceof com.android.sdkuilib.internal.repository.core.PkgCategory) { return imgFactory.getImageForObject(((com.android.sdkuilib.internal.repository.core.PkgCategory) (element)).getIconRef()); } else if (element instanceof com.android.sdkuilib.internal.repository.core.PkgItem) { return imgFactory.getImageForObject(((com.android.sdkuilib.internal.repository.core.PkgItem) (element)).getMainPackage()); } return imgFactory.getImageForObject(element); } else if (((mColumn) == (mIColumnStatus)) && (element instanceof com.android.sdkuilib.internal.repository.core.PkgItem)) { com.android.sdkuilib.internal.repository.core.PkgItem pi = ((com.android.sdkuilib.internal.repository.core.PkgItem) (element)); switch (pi.getState()) { case INSTALLED : if (pi.hasUpdatePkg()) { return imgFactory.getImageByName(PackagesPageIcons.ICON_PKG_UPDATE); } else { return imgFactory.getImageByName(PackagesPageIcons.ICON_PKG_INSTALLED); } case NEW : java.lang.Package p = pi.getMainPackage(); if ((p != null) && (p.hasCompatibleArchive())) { return imgFactory.getImageByName(PackagesPageIcons.ICON_PKG_NEW); } else { return imgFactory.getImageByName(PackagesPageIcons.ICON_PKG_INCOMPAT); } } } } return super.getImage(element); },0df629a407a487e20e84e0edd75008871b23fdc2,getImage(java.lang.Object),195211,418,420
16313,hierarchyviewer2_libs_hierarchyvieweruilib_src_com_android_hierarchyvieweruilib_TreeView.java,,,,"public void handleEvent(org.eclipse.swt.widgets.Event e) { synchronized(this) { if (((tree) != null) && ((viewport) != null)) { com.android.hierarchyviewerlib.scene.DrawableViewNode.Point viewCenter = new com.android.hierarchyviewerlib.scene.DrawableViewNode.Point(((viewport.x) + ((viewport.width) / 2)), ((viewport.y) + ((viewport.height) / 2))); viewport.width = (getBounds().width) / (zoom); viewport.height = (getBounds().height) / (zoom); viewport.x = (viewCenter.x) - ((viewport.width) / 2); viewport.y = (viewCenter.y) - ((viewport.height) / 2); if ((viewport.width) > (tree.bounds.width)) { viewport.x = java.lang.Math.min(viewport.x, tree.bounds.x); viewport.x = java.lang.Math.max(viewport.x, (((tree.bounds.x) + (tree.bounds.width)) - (viewport.width))); } else { viewport.x = java.lang.Math.max(viewport.x, tree.bounds.x); viewport.x = java.lang.Math.min(viewport.x, (((tree.bounds.x) + (tree.bounds.width)) - (viewport.width))); } if ((viewport.height) > (tree.bounds.height)) { viewport.y = java.lang.Math.min(viewport.y, tree.bounds.y); viewport.y = java.lang.Math.max(viewport.y, (((tree.bounds.y) + (tree.bounds.height)) - (viewport.height))); } else { viewport.y = java.lang.Math.max(viewport.y, tree.bounds.y); viewport.y = java.lang.Math.min(viewport.y, (((tree.bounds.y) + (tree.bounds.height)) - (viewport.height))); } } } if ((viewport) != null) { model.setViewport(viewport); } }",eca845f0689ea37df846a1a642ffe678d657ca68,,handleEvent(org.eclipse.swt.widgets.Event),5,1,"public void handleEvent(org.eclipse.swt.widgets.Event e) { synchronized(this) { if (((tree) != null) && ((viewport) != null)) { com.android.hierarchyviewerlib.scene.DrawableViewNode.Point viewCenter = new com.android.hierarchyviewerlib.scene.DrawableViewNode.Point(((viewport.x) + ((viewport.width) / 2)), ((viewport.y) + ((viewport.height) / 2))); viewport.width = (getBounds().width) / (zoom); viewport.height = (getBounds().height) / (zoom); viewport.x = (viewCenter.x) - ((viewport.width) / 2); viewport.y = (viewCenter.y) - ((viewport.height) / 2); } } if ((viewport) != null) { model.setViewport(viewport); } }",f51a8262a1246e691f1fccacea7466c13ddd54d7,handleEvent(org.eclipse.swt.widgets.Event),140665,471,193
294369,src_com_android_carrierconfig_DefaultCarrierConfigService.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static boolean matchOnSP(java.lang.String xmlSP, android.service.carrier.CarrierIdentifier id) { boolean matchFound = false; java.lang.String currentSP = id.getSpn(); if (com.android.carrierconfig.DefaultCarrierConfigService.SPN_EMPTY_MATCH.equalsIgnoreCase(xmlSP)) { if ((android.text.TextUtils.isEmpty(currentSP)) || (com.android.carrierconfig.DefaultCarrierConfigService.SPN_EMPTY_MATCH.equalsIgnoreCase(currentSP))) { matchFound = true; } } else if (currentSP != null) { java.util.regex.Pattern spPattern = java.util.regex.Pattern.compile(xmlSP); java.util.regex.Matcher matcher = spPattern.matcher(currentSP); matchFound = matcher.matches(); } return matchFound; }",18372c091e9b022e091212b6da1bd1a3a2c507f2,,"matchOnSP(java.lang.String,android.service.carrier.CarrierIdentifier)",6,0,"static boolean matchOnSP(java.lang.String xmlSP, android.service.carrier.CarrierIdentifier id) { boolean matchFound = false; java.lang.String currentSP = id.getSpn(); if (com.android.carrierconfig.DefaultCarrierConfigService.SPN_EMPTY_MATCH.equalsIgnoreCase(xmlSP)) { if (android.text.TextUtils.isEmpty(currentSP)) { matchFound = true; } } else if (currentSP != null) { java.util.regex.Pattern spPattern = java.util.regex.Pattern.compile(xmlSP); java.util.regex.Matcher matcher = spPattern.matcher(currentSP); matchFound = matcher.matches(); } return matchFound; }",bb15d2963aad2eacb8aef7c9a473f36d96bbcf4a,"matchOnSP(java.lang.String,android.service.carrier.CarrierIdentifier)",349751,187,158
237521,server_jack-server_src_com_android_jack_server_JackHttpServer.java,4.0,"public void reloadConfig() throws com.android.jack.server.api.v01.ServerException, com.android.sched.util.file.NotFileException, com.android.sched.util.file.WrongPermissionException, java.io.IOException { shutdownConnections(); try { checkAccess(serverDir, java.util.EnumSet.of(java.nio.file.attribute.PosixFilePermission.OWNER_READ, java.nio.file.attribute.PosixFilePermission.OWNER_WRITE, java.nio.file.attribute.PosixFilePermission.OWNER_EXECUTE)); loadConfig(); } catch (java.io.IOException e) { shutdown(); throw e; } start(new java.util.HashMap<java.lang.String, java.lang.Object>()); }",0354a538a1730e08fd488ff761ad8ff9ca69fbe8,"public void reloadConfig() throws com.android.jack.server.api.v01.ServerException, com.android.sched.util.file.CannotChangePermissionException, com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.FileAlreadyExistsException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotFileException, com.android.sched.util.file.WrongPermissionException, java.io.IOException { shutdownConnections(); try { checkAccess(serverDir, java.util.EnumSet.of(java.nio.file.attribute.PosixFilePermission.OWNER_READ, java.nio.file.attribute.PosixFilePermission.OWNER_WRITE, java.nio.file.attribute.PosixFilePermission.OWNER_EXECUTE)); loadConfig(); } catch (java.io.IOException e) { shutdown(); throw e; } start(new java.util.HashMap<java.lang.String, java.lang.Object>()); }",f2e10d5e84571a983a2237b52005c71ee75609b7,reloadConfig(),reloadConfig(),3,4,"public void reloadConfig() throws com.android.jack.server.api.v01.ServerException, com.android.sched.util.file.CannotChangePermissionException, com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.FileAlreadyExistsException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotFileException, com.android.sched.util.file.WrongPermissionException, java.io.IOException { shutdownConnections(); try { checkAccess(serverDir, java.util.EnumSet.of(java.nio.file.attribute.PosixFilePermission.OWNER_READ, java.nio.file.attribute.PosixFilePermission.OWNER_WRITE, java.nio.file.attribute.PosixFilePermission.OWNER_EXECUTE)); loadConfig(); } catch (com.android.sched.util.file.CannotCreateFileException | com.android.sched.util.file.CannotChangePermissionException | com.android.sched.util.file.FileAlreadyExistsException | java.io.IOException | com.android.sched.util.file.NoSuchFileException | com.android.sched.util.file.NotFileException | com.android.sched.util.file.WrongPermissionException e) { shutdown(); throw e; } start(new java.util.HashMap<java.lang.String, java.lang.Object>()); }",840c876e4a9f73efd58183ccfa063d0e9135dc9a,reloadConfig(),49833,220,306
584550,src_main_java_com_android_apksig_internal_apk_SigningBlockScheme_SignatureAlgorithm.java,5.0,static com.android.apksig.internal.apk.v2.SignatureAlgorithm findById(int id) { for (com.android.apksig.internal.apk.v2.SignatureAlgorithm alg : com.android.apksig.internal.apk.v2.SignatureAlgorithm.values()) { if ((alg.getId()) == id) { return alg; } } return null; },1e69f10b643eea913b94e94695fb985833c728c9,public static com.android.apksig.internal.apk.SigningBlockScheme.SignatureAlgorithm findById(int id) { for (com.android.apksig.internal.apk.SigningBlockScheme.SignatureAlgorithm alg : com.android.apksig.internal.apk.SigningBlockScheme.SignatureAlgorithm.values()) { if ((alg.getId()) == id) { return alg; } } return null; },8987fc104af652a63ecc709cfb4e7e6f97b2ab80,findById(int),findById(int),4,5,public static com.android.apksig.internal.apk.SignatureAlgorithm findById(int id) { for (com.android.apksig.internal.apk.SignatureAlgorithm alg : com.android.apksig.internal.apk.SignatureAlgorithm.values()) { if ((alg.getId()) == id) { return alg; } } return null; },79301d652f4ce978dd84e5c3964b171ee9093e40,findById(int),4566,89,77
67243,monkeyrunner_src_main_java_com_android_monkeyrunner_MonkeyView.java,9.0,"@com.android.monkeyrunner.doc.MonkeyRunnerExported(doc = ""Returns the accessibility ids of the current view"", returns = ""The accessibility ids of the view as a list of ints"") public org.python.core.PyList getAccessibilityIds(org.python.core.PyObject[] args, java.lang.String[] kws) { org.python.core.ArgParser ap = com.android.monkeyrunner.JythonUtils.createArgParser(args, kws); com.google.common.base.Preconditions.checkNotNull(ap); int[] ids = impl.getAccessibilityIds(); org.python.core.PyList pyIds = new org.python.core.PyList(); for (int i = 0; i < (ids.length); i++) { pyIds.append(new org.python.core.PyInteger(ids[i])); } return pyIds; }",e3d81a55b5020a52f71c74599512eaa00ee5941e,"@com.android.monkeyrunner.doc.MonkeyRunnerExported(doc = ""Returns the accessibility ids of the current view"", returns = ""The accessibility ids of the view as a list of int and long"") public org.python.core.PyList getAccessibilityIds(org.python.core.PyObject[] args, java.lang.String[] kws) { org.python.core.ArgParser ap = com.android.monkeyrunner.JythonUtils.createArgParser(args, kws); com.google.common.base.Preconditions.checkNotNull(ap); java.util.List<java.lang.String> ids = impl.getAccessibilityIds(); org.python.core.PyList pyIds = new org.python.core.PyList(); if ((ids.size()) == 2) { pyIds.append(new org.python.core.PyInteger(java.lang.Integer.parseInt(ids.get(0)))); pyIds.append(new org.python.core.PyLong(java.lang.Long.parseLong(ids.get(1)))); } return pyIds; }",8b16650861b091717b7a9025eff05ea8c69a2804,"getAccessibilityIds(org.python.core.PyObject[],java.lang.String[])","getAccessibilityIds(org.python.core.PyObject[],java.lang.String[])",2,9,"@com.android.monkeyrunner.doc.MonkeyRunnerExported(doc = ""Returns the accessibility ids of the current view"", returns = ""The accessibility ids of the view as a list of int and long"") public org.python.core.PyList getAccessibilityIds(org.python.core.PyObject[] args, java.lang.String[] kws) { org.python.core.ArgParser ap = com.android.monkeyrunner.JythonUtils.createArgParser(args, kws); com.google.common.base.Preconditions.checkNotNull(ap); com.android.chimpchat.core.IChimpView.AccessibilityIds ids = impl.getAccessibilityIds(); org.python.core.PyList pyIds = new org.python.core.PyList(); pyIds.append(new org.python.core.PyInteger(ids.getWindowId())); pyIds.append(new org.python.core.PyLong(ids.getNodeId())); return pyIds; }",595ab509d7bb33c9bfa2be63b6f2bc04554296c2,"getAccessibilityIds(org.python.core.PyObject[],java.lang.String[])",153083,239,217
597795,tests_telephonytests_src_com_android_internal_telephony_ims_ImsResolverTest.java,22.0,"private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController1, com.android.internal.telephony.ims.ImsServiceController carrierController2) { mTestImsResolver.setImsServiceControllerFactory(( context, componentName) -> { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(deviceController.getComponentName()).thenReturn(componentName); return deviceController; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController1.getComponentName()).thenReturn(componentName); return carrierController1; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_2_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController2.getComponentName()).thenReturn(componentName); return carrierController2; } return null; }); }",7a21486821bdf9ab98c274858683a6530319ae39,"private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController1, com.android.internal.telephony.ims.ImsServiceController carrierController2) { mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceInterface() { return ImsServiceController.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks) { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(deviceController.getComponentName()).thenReturn(componentName); return deviceController; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController1.getComponentName()).thenReturn(componentName); return carrierController1; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_2_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController2.getComponentName()).thenReturn(componentName); return carrierController2; } return null; } }); }",affca37be18ca1047759628cab96ffbbce039812,"setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController,com.android.internal.telephony.ims.ImsServiceController,com.android.internal.telephony.ims.ImsServiceController)","setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController,com.android.internal.telephony.ims.ImsServiceController,com.android.internal.telephony.ims.ImsServiceController)",3,28,"private void setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController deviceController, com.android.internal.telephony.ims.ImsServiceController carrierController1, com.android.internal.telephony.ims.ImsServiceController carrierController2) { mTestImsResolver.setImsServiceControllerFactory(new com.android.internal.telephony.ims.ImsResolver.ImsServiceControllerFactory() { @java.lang.Override public java.lang.String getServiceInterface() { return android.telephony.ims.ImsService.SERVICE_INTERFACE; } @java.lang.Override public com.android.internal.telephony.ims.ImsServiceController create(android.content.Context context, android.content.ComponentName componentName, com.android.internal.telephony.ims.ImsServiceController.ImsServiceControllerCallbacks callbacks) { if (com.android.internal.telephony.ims.ImsResolverTest.TEST_DEVICE_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(deviceController.getComponentName()).thenReturn(componentName); return deviceController; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController1.getComponentName()).thenReturn(componentName); return carrierController1; } else if (com.android.internal.telephony.ims.ImsResolverTest.TEST_CARRIER_2_DEFAULT_NAME.getPackageName().equals(componentName.getPackageName())) { when(carrierController2.getComponentName()).thenReturn(componentName); return carrierController2; } return null; } }); }",3ccf6366943363eedacaec318fbb096f7f2e3134,"setImsServiceControllerFactory(com.android.internal.telephony.ims.ImsServiceController,com.android.internal.telephony.ims.ImsServiceController,com.android.internal.telephony.ims.ImsServiceController)",492297,379,385
37720,sdkmanager_libs_sdklib_src_com_android_sdklib_devices_Device.java,,,,public com.android.sdklib.devices.Device.Software getSoftware(int apiVersion) { for (com.android.sdklib.devices.Device.Software s : mSoftware) { if ((apiVersion >= (s.getMinSdkLevel())) && (apiVersion <= (s.getMaxSdkLevel()))) { return s; } } return null; },a20a2912e17c2aec3a9e02cf741b9c1764b598eb,,getSoftware(int),8,6,public com.android.sdklib.devices.Software getSoftware(int apiVersion) { for (com.android.sdklib.devices.Software s : mSoftware) { if ((apiVersion >= (s.getMinSdkLevel())) && (apiVersion <= (s.getMaxSdkLevel()))) { return s; } } return null; },0047747cdf8a94def2284c4a85107a416d6be4cf,getSoftware(int),17792,79,75
292326,src_com_android_bluetooth_pbap_BluetoothPbapVcardManager.java,9.0,"public final java.lang.String getOwnerPhoneNumberVcard(final boolean vcardType21, final byte[] filter) { if (com.android.bluetooth.pbap.BluetoothPbapConfig.useProfileForOwnerVcard()) { java.lang.String vcard = getOwnerPhoneNumberVcardFromProfile(vcardType21, filter); if ((vcard != null) && ((vcard.length()) != 0)) { return vcard; } } com.android.bluetooth.pbap.BluetoothPbapCallLogComposer composer = new com.android.bluetooth.pbap.BluetoothPbapCallLogComposer(mContext); java.lang.String name = com.android.bluetooth.pbap.BluetoothPbapService.getLocalPhoneName(); java.lang.String number = com.android.bluetooth.pbap.BluetoothPbapService.getLocalPhoneNum(); java.lang.String vcard = composer.composeVCardForPhoneOwnNumber(Phone.TYPE_MOBILE, name, number, vcardType21); return vcard; }",5bb19ec5206a30874f72922a6b25ddd079a00079,"public final java.lang.String getOwnerPhoneNumberVcard(final boolean vcardType21, boolean ignorefilter, final byte[] filter) { if (com.android.bluetooth.pbap.BluetoothPbapConfig.useProfileForOwnerVcard()) { java.lang.String vcard = getOwnerPhoneNumberVcardFromProfile(vcardType21, ignorefilter, filter); if ((vcard != null) && ((vcard.length()) != 0)) { return vcard; } } com.android.bluetooth.pbap.BluetoothPbapCallLogComposer composer = new com.android.bluetooth.pbap.BluetoothPbapCallLogComposer(mContext); java.lang.String name = com.android.bluetooth.pbap.BluetoothPbapService.getLocalPhoneName(); java.lang.String number = com.android.bluetooth.pbap.BluetoothPbapService.getLocalPhoneNum(); java.lang.String vcard = composer.composeVCardForPhoneOwnNumber(Phone.TYPE_MOBILE, name, number, vcardType21); return vcard; }",16684c5bbeffb7c3bccdefb7884a0843305fa889,"getOwnerPhoneNumberVcard(boolean,byte[])","getOwnerPhoneNumberVcard(boolean,boolean,byte[])",8,31,"public final java.lang.String getOwnerPhoneNumberVcard(final boolean vcardType21, final byte[] filter) { if (com.android.bluetooth.pbap.BluetoothPbapConfig.useProfileForOwnerVcard()) { java.lang.String vcard = getOwnerPhoneNumberVcardFromProfile(vcardType21, filter); if ((vcard != null) && ((vcard.length()) != 0)) { return vcard; } } com.android.bluetooth.pbap.BluetoothPbapCallLogComposer composer = new com.android.bluetooth.pbap.BluetoothPbapCallLogComposer(mContext); java.lang.String name = com.android.bluetooth.pbap.BluetoothPbapService.getLocalPhoneName(); java.lang.String number = com.android.bluetooth.pbap.BluetoothPbapService.getLocalPhoneNum(); java.lang.String vcard = composer.composeVCardForPhoneOwnNumber(Phone.TYPE_MOBILE, name, number, vcardType21); return vcard; }",5bb19ec5206a30874f72922a6b25ddd079a00079,"getOwnerPhoneNumberVcard(boolean,byte[])",55795,236,229
322567,core_java_android_bluetooth_le_ScanSettings.java,13.0,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mScanMode); dest.writeInt(mCallbackType); dest.writeInt(mScanResultType); dest.writeLong(mReportDelayMillis); dest.writeInt(mMatchMode); dest.writeInt(mNumOfMatchesPerFilter); }",2f5a307cda5d753c16c6718423cc8665944cd813,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mScanMode); dest.writeInt(mCallbackType); dest.writeInt(mScanResultType); dest.writeLong(mReportDelayMillis); dest.writeInt(mMatchMode); dest.writeInt(mNumOfMatchesPerFilter); dest.writeInt((mLegacy ? 1 : 0)); }",9fac2c9e2400be6e247dc9d64a831b74c7e5f03e,"writeToParcel(android.os.Parcel,int)","writeToParcel(android.os.Parcel,int)",23,15,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeInt(mScanMode); dest.writeInt(mCallbackType); dest.writeInt(mScanResultType); dest.writeLong(mReportDelayMillis); dest.writeInt(mMatchMode); dest.writeInt(mNumOfMatchesPerFilter); dest.writeInt((mLegacy ? 1 : 0)); dest.writeInt(mPhy); }",8d79a35c1041c94bc32e1ba5bb7b9e97629c28b9,"writeToParcel(android.os.Parcel,int)",73536,85,93
15735,ddms_libs_ddmlib_src_com_android_ddmlib_testrunner_InstrumentationResultParser.java,15.0,"private void parse(java.lang.String line) { if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS_CODE)) { submitCurrentKeyValue(); parseStatusCode(line); } else if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS)) { submitCurrentKeyValue(); parseKey(line, com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS.length()); } else if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.RESULT)) { submitCurrentKeyValue(); parseKey(line, com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.RESULT.length()); } else if ((line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS_FAILED)) || (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.CODE))) { submitCurrentKeyValue(); mTestRunFinished = true; } else if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.TIME_REPORT)) { parseTime(line, com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.TIME_REPORT.length()); } else { if ((mCurrentValue) != null) { mCurrentValue.append(""\r\n""); mCurrentValue.append(line); } else if ((line.trim().length()) > 0) { com.android.ddmlib.Log.d(com.android.ddmlib.testrunner.InstrumentationResultParser.LOG_TAG, (""unrecognized line "" + line)); } } }",1429df561b59caa6c4b0d221a9de62ee410b1875,"private void parse(java.lang.String line) { if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS_CODE)) { submitCurrentKeyValue(); mInInstrumentResultSection = false; parseStatusCode(line); } else if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS)) { submitCurrentKeyValue(); mInInstrumentResultSection = false; parseKey(line, com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS.length()); } else if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.RESULT)) { submitCurrentKeyValue(); mInInstrumentResultSection = true; parseKey(line, com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.RESULT.length()); } else if ((line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS_FAILED)) || (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.CODE))) { submitCurrentKeyValue(); mInInstrumentResultSection = false; mTestRunFinished = true; } else if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.TIME_REPORT)) { parseTime(line, com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.TIME_REPORT.length()); } else { if ((mCurrentValue) != null) { mCurrentValue.append(""\r\n""); mCurrentValue.append(line); } else if ((line.trim().length()) > 0) { com.android.ddmlib.Log.d(com.android.ddmlib.testrunner.InstrumentationResultParser.LOG_TAG, (""unrecognized line "" + line)); } } }",19c84d1e5a96193073d73bfbe135c5c412e3ea61,parse(java.lang.String),parse(java.lang.String),3,15,"private void parse(java.lang.String line) { if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS_CODE)) { submitCurrentKeyValue(); mInInstrumentationResultKey = false; parseStatusCode(line); } else if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS)) { submitCurrentKeyValue(); mInInstrumentationResultKey = false; parseKey(line, com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS.length()); } else if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.RESULT)) { submitCurrentKeyValue(); mInInstrumentationResultKey = true; parseKey(line, com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.RESULT.length()); } else if ((line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.STATUS_FAILED)) || (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.CODE))) { submitCurrentKeyValue(); mInInstrumentationResultKey = false; mTestRunFinished = true; } else if (line.startsWith(com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.TIME_REPORT)) { parseTime(line, com.android.ddmlib.testrunner.InstrumentationResultParser.Prefixes.TIME_REPORT.length()); } else { if ((mCurrentValue) != null) { mCurrentValue.append(""\r\n""); mCurrentValue.append(line); } else if ((line.trim().length()) > 0) { com.android.ddmlib.Log.d(com.android.ddmlib.testrunner.InstrumentationResultParser.LOG_TAG, (""unrecognized line "" + line)); } } }",a64d32b18094f7aca24d0fe363006b494aadecd4,parse(java.lang.String),524793,412,412
278542,dx_src_com_android_jack_dx_io_instructions_RegisterRangeDecodedInstruction.java,2.0,"@java.lang.Override public com.android.jack.dx.io.instructions.DecodedInstruction withIndex(int newIndex) { return new com.android.jack.dx.io.instructions.RegisterRangeDecodedInstruction(getFormat(), getOpcode(), newIndex, getIndexType(), getTarget(), getLiteral(), a, registerCount); }",163d906870a2ad871ebbbb95124019236962d79a,"@java.lang.Override public com.android.jack.dx.io.instructions.DecodedInstruction withIndex(int newIndex) { return new com.android.jack.dx.io.instructions.RegisterRangeDecodedInstruction(getFormat(), getOpcode(), newIndex, getFirstIndexType(), getTarget(), getLiteral(), a, registerCount); }",dffcc6bc437515e68bd94d89ca669d0662464ab8,withIndex(int),withIndex(int),5,2,"@java.lang.Override public com.android.jack.dx.io.instructions.DecodedInstruction withIndex(int newFirstIndex, int newSecondIndex) { assert (getSecondIndexType()) == (com.android.jack.dx.io.IndexType.NONE); return new com.android.jack.dx.io.instructions.RegisterRangeDecodedInstruction(getFormat(), getOpcode(), newFirstIndex, getFirstIndexType(), getTarget(), getLiteral(), a, registerCount); }",d6655b551a2fb24a6628c906774c02d32178da47,"withIndex(int,int)",101565,74,104
616948,telephony_java_android_telephony_euicc_EuiccCardManager.java,9.0,"public void authenticateServer(java.lang.String cardId, java.lang.String matchingId, byte[] serverSigned1, byte[] serverSignature1, byte[] euiccCiPkIdToBeUsed, byte[] serverCertificate, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().authenticateServer(mContext.getOpPackageName(), cardId, matchingId, serverSigned1, serverSignature1, euiccCiPkIdToBeUsed, serverCertificate, new com.android.internal.telephony.euicc.IAuthenticateServerCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { callback.onComplete(resultCode, response); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling authenticateServer"", e); throw e.rethrowFromSystemServer(); } }",276487693f64bc9023af8746a04c5af052f929ff,"public void authenticateServer(java.lang.String cardId, java.lang.String matchingId, byte[] serverSigned1, byte[] serverSignature1, byte[] euiccCiPkIdToBeUsed, byte[] serverCertificate, @android.annotation.CallbackExecutor java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().authenticateServer(mContext.getOpPackageName(), cardId, matchingId, serverSigned1, serverSignature1, euiccCiPkIdToBeUsed, serverCertificate, new com.android.internal.telephony.euicc.IAuthenticateServerCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling authenticateServer"", e); throw e.rethrowFromSystemServer(); } }",d8efdf5e45167e8850e5d0acc46050bb9108fa35,"authenticateServer(java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],android.telephony.euicc.EuiccCardManager$ResultCallback)","authenticateServer(java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)",2,0,"public void authenticateServer(java.lang.String cardId, java.lang.String matchingId, byte[] serverSigned1, byte[] serverSignature1, byte[] euiccCiPkIdToBeUsed, byte[] serverCertificate, java.util.concurrent.Executor executor, android.telephony.euicc.EuiccCardManager.ResultCallback<byte[]> callback) { try { getIEuiccCardController().authenticateServer(mContext.getOpPackageName(), cardId, matchingId, serverSigned1, serverSignature1, euiccCiPkIdToBeUsed, serverCertificate, new com.android.internal.telephony.euicc.IAuthenticateServerCallback.Stub() { @java.lang.Override public void onComplete(int resultCode, byte[] response) { executor.execute(() -> callback.onComplete(resultCode, response)); } }); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.euicc.EuiccCardManager.TAG, ""Error calling authenticateServer"", e); throw e.rethrowFromSystemServer(); } }",602282f778b70bceca9a58b21dca446f4d936150,"authenticateServer(java.lang.String,java.lang.String,byte[],byte[],byte[],byte[],java.util.concurrent.Executor,android.telephony.euicc.EuiccCardManager$ResultCallback)",476208,236,229
161052,sched_src_com_android_sched_vfs_UnionVFS.java,,,,"@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVDir getVDir(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVDir parent, @javax.annotation.Nonnull java.lang.String name) throws com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotDirectoryException { java.util.List<com.android.sched.vfs.BaseVDir> parentWrappedDirs = parent.getWrappedDirs(); com.android.sched.vfs.BaseVDir dirToWrap = null; for (com.android.sched.vfs.BaseVDir parentWrappedDir : parentWrappedDirs) { try { dirToWrap = parentWrappedDir.getVDir(name); break; } catch (com.android.sched.util.file.NoSuchFileException e) { } } if (dirToWrap == null) { throw new com.android.sched.util.file.NoSuchFileException(getVDirLocation(parent, name)); } return new com.android.sched.vfs.UnionVFS.UnionVDir(this, parent, com.google.common.collect.Lists.newArrayList(dirToWrap)); }",c188d7a4a445c4873df504525c3281f92a6cf11c,,"getVDir(com.android.sched.vfs.UnionVFS$UnionVDir,java.lang.String)",15,11,"@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVDir getVDir(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVDir parent, @javax.annotation.Nonnull java.lang.String name) throws com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotDirectoryException { parent.ensureFullyLoaded(); java.util.List<com.android.sched.vfs.BaseVDir> parentWrappedDirs = parent.getWrappedDirs(); com.android.sched.vfs.BaseVDir dirToWrap = null; boolean writable = parent.isWritable(); for (com.android.sched.vfs.BaseVDir parentWrappedDir : parentWrappedDirs) { try { dirToWrap = parentWrappedDir.getVDir(name); break; } catch (com.android.sched.util.file.NoSuchFileException e) { writable = false; } } if (dirToWrap == null) { throw new com.android.sched.util.file.NoSuchFileException(getVDirLocation(parent, name)); } return new com.android.sched.vfs.UnionVFS.UnionVDir(this, parent, com.google.common.collect.Lists.newArrayList(dirToWrap), writable); }",7eedf599845f3d2ec193c8783c60c68b0bac7dc2,"getVDir(com.android.sched.vfs.UnionVFS$UnionVDir,java.lang.String)",316800,273,293
312685,common_util_src_com_android_compatibility_common_util_InvocationHistory.java,,,,"public java.lang.Boolean tryWriteToFile(java.io.File directory) { java.io.File historyFile = new java.io.File(directory, com.android.compatibility.common.util.InvocationHistory.HISTORY_FILE); try (java.io.FileOutputStream outputStream = new java.io.FileOutputStream(historyFile)) { com.google.gson.Gson gson = new com.google.gson.Gson(); java.lang.String historyJson = gson.toJson(this); org.apache.commons.io.IOUtils.write(historyJson, outputStream); } catch (java.io.IOException e) { e.printStackTrace(); } }",42513a1eaa6378433a839bcadb6c49326e9f3184,,tryWriteToFile(java.io.File),6,6,"public java.lang.Boolean tryWriteToFile(java.io.File directory) { java.io.File historyFile = new java.io.File(directory, com.android.compatibility.common.util.InvocationHistory.HISTORY_FILE); try (java.io.PrintWriter outputStream = new java.io.PrintWriter(historyFile);com.android.json.stream.JsonWriter writer = new com.android.json.stream.JsonWriter(outputStream)) { writer.beginObject(); writer.name(""summaries""); writer.beginArray(); for (com.android.compatibility.common.util.InvocationHistory.InvocationSummary summary : summaries) { summary.toJsonStream(writer); } writer.endArray(); writer.name(""failedTests""); writer.beginArray(); for (com.android.compatibility.common.util.InvocationHistory.FailedTest test : failedTests.values()) { test.toJsonStream(writer); } writer.endArray(); writer.endObject(); return true; } catch (java.io.IOException e) { e.printStackTrace(); } return false; }",d0b0393c0a5896c9ea85bf581899198f0cfd3adb,tryWriteToFile(java.io.File),217672,138,231
23383,tests_tests_bluetooth_src_android_bluetooth_cts_BasicAdapterTest.java,6.0,"public void test_getRemoteDevice() { android.bluetooth.BluetoothAdapter adapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); disable(adapter); try { adapter.getRemoteDevice(null); fail(""IllegalArgumentException not thrown""); } catch (java.lang.IllegalArgumentException e) { } try { adapter.getRemoteDevice(""00:00:00:00:00:00:00:00""); fail(""IllegalArgumentException not thrown""); } catch (java.lang.IllegalArgumentException e) { } android.bluetooth.BluetoothDevice device = adapter.getRemoteDevice(""00:11:22:AA:BB:CC""); assertNotNull(device); assertEquals(""00:11:22:AA:BB:CC"", device.getAddress()); }",efd4a5cc5b11b1d5f294293abbc2ee9637ada14a,"public void test_getRemoteDevice() { if (!(isSupport)) { return; } android.bluetooth.BluetoothAdapter adapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); disable(adapter); try { adapter.getRemoteDevice(null); fail(""IllegalArgumentException not thrown""); } catch (java.lang.IllegalArgumentException e) { } try { adapter.getRemoteDevice(""00:00:00:00:00:00:00:00""); fail(""IllegalArgumentException not thrown""); } catch (java.lang.IllegalArgumentException e) { } android.bluetooth.BluetoothDevice device = adapter.getRemoteDevice(""00:11:22:AA:BB:CC""); assertNotNull(device); assertEquals(""00:11:22:AA:BB:CC"", device.getAddress()); }",7804dbe0a70eaa4d3e480629b36f5213573c0c0b,test_getRemoteDevice(),test_getRemoteDevice(),2,7,"public void test_getRemoteDevice() { if (!(mHasBluetooth)) { return; } android.bluetooth.BluetoothAdapter adapter = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); disable(adapter); try { adapter.getRemoteDevice(null); fail(""IllegalArgumentException not thrown""); } catch (java.lang.IllegalArgumentException e) { } try { adapter.getRemoteDevice(""00:00:00:00:00:00:00:00""); fail(""IllegalArgumentException not thrown""); } catch (java.lang.IllegalArgumentException e) { } android.bluetooth.BluetoothDevice device = adapter.getRemoteDevice(""00:11:22:AA:BB:CC""); assertNotNull(device); assertEquals(""00:11:22:AA:BB:CC"", device.getAddress()); }",ea788a076e579dc64f773e36f85848b966a080a7,test_getRemoteDevice(),288200,146,147
81416,tests_tests_renderscript_src_android_renderscript_cts_TestAtan2.java,,,,"private void checkAtan2Float3Float3() { android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInX(inX); script.forEach_testAtan2Float3Float3(inY, out); verifyResultsAtan2Float3Float3(inY, inX, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAtan2Float3Float3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInX(inX); scriptRelaxed.forEach_testAtan2Float3Float3(inY, out); verifyResultsAtan2Float3Float3(inY, inX, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAtan2Float3Float3: "" + (e.toString()))); } }",77f2fff796782ebc403ebb52f835c149df4acbce,,checkAtan2Float3Float3(),9,6,"private void checkAtan2Float3Float3Float3() { android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, 4862634314367234807L); android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, 4862634314367234807L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); script.set_gAllocInX(inX); script.forEach_testAtan2Float3Float3Float3(inY, out); verifyResultsAtan2Float3Float3Float3(inY, inX, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAtan2Float3Float3Float3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInX(inX); scriptRelaxed.forEach_testAtan2Float3Float3Float3(inY, out); verifyResultsAtan2Float3Float3Float3(inY, inX, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testAtan2Float3Float3Float3: "" + (e.toString()))); } }",09d8ad40576d659594bf5c380e8c37fe7e5c8c7f,checkAtan2Float3Float3Float3(),142889,451,401
144210,luni_src_main_java_java_text_BreakIterator.java,6.0,public static java.text.BreakIterator getCharacterInstance(java.util.Locale locale) { return new java.text.RuleBasedBreakIterator(libcore.icu.NativeBreakIterator.getCharacterInstance(locale)); },432dd71aac9430f7dd96a5e47f2372538c0173e4,public static java.text.BreakIterator getCharacterInstance(java.util.Locale locale) { return new java.text.IcuIteratorWrapper(com.android.ibm.icu.text.BreakIterator.getCharacterInstance(locale)); },b10c570c888261195116cfc3f80afde6228fddd6,getCharacterInstance(java.util.Locale),getCharacterInstance(java.util.Locale),5,6,public static java.text.BreakIterator getCharacterInstance(java.util.Locale locale) { return new java.text.IcuIteratorWrapper(com.ibm.icu.text.BreakIterator.getCharacterInstance(locale)); },fe2cdb8c3ecec96326cfd5c8a64743390fab173a,getCharacterInstance(java.util.Locale),74909,51,49
335587,service_java_com_android_server_wifi_WifiMonitor.java,29.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void onProvisionDiscoveryPbcResponse(byte[] p2pDeviceAddress) { },a32ca34b57d8e6bc3cc83c1eee0b17cf7c631186,,onProvisionDiscoveryPbcResponse(byte[]),32,69,"public void broadcastP2pGroupFormationFailure(java.lang.String iface, java.lang.String reason) { sendMessage(iface, com.android.server.wifi.WifiMonitor.P2P_GROUP_FORMATION_FAILURE_EVENT, p2pError(reason)); }",3d3c0acfdb73cbf8c7a1d5cfbc554eb9253057e0,"broadcastP2pGroupFormationFailure(java.lang.String,java.lang.String)",320146,19,63
338583,core_java_android_net_ConnectivityManager.java,117.0,"private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { if (callback == null) { throw new java.lang.IllegalArgumentException(""null NetworkCallback""); } if ((need == null) && (action != (android.net.ConnectivityManager.REQUEST))) { throw new java.lang.IllegalArgumentException(""null NetworkCapabilities""); } final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return request; }",d866d3a892da7f31c1d43824ad9ebc8acad77b17,"private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { if (callback == null) { throw new java.lang.IllegalArgumentException(""null NetworkCallback""); } if ((need == null) && (action != (android.net.ConnectivityManager.REQUEST))) { throw new java.lang.IllegalArgumentException(""null NetworkCapabilities""); } final int sdk = mContext.getApplicationInfo().targetSdkVersion; if ((sdk > (android.os.Build.VERSION_CODES.N_MR1)) && ((callback.networkRequest) == null)) { throw new java.lang.IllegalArgumentException(""NetworkCallback already registered""); } final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return request; }",1fcdab81b5868419bd15c98d45e95ac53dab78a3,"sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)","sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)",8,119,"private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { if (callback == null) { throw new java.lang.IllegalArgumentException(""null NetworkCallback""); } if ((need == null) && (action != (android.net.ConnectivityManager.REQUEST))) { throw new java.lang.IllegalArgumentException(""null NetworkCapabilities""); } final int targetSdk = mContext.getApplicationInfo().targetSdkVersion; if ((targetSdk > (android.os.Build.VERSION_CODES.N_MR1)) && ((callback.networkRequest) != null)) { throw new java.lang.IllegalArgumentException(""NetworkCallback already registered""); } final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } return request; }",416d8966994a16352bf502d4127031b11967a7e8,"sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)",137580,336,338
66220,src_java_com_android_internal_telephony_gsm_GsmSMSDispatcher.java,10.0,"@java.lang.Override protected void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddr, destAddr, text, (deliveryIntent != null)); if (pdu != null) { sendRawPdu(pdu.encodedScAddress, pdu.encodedMessage, sentIntent, deliveryIntent, destAddr); } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, ""GsmSMSDispatcher.sendText(): getSubmitPdu() returned null""); } }",4947b35560127a9b6d4e707fa0a121c4efa26af9,"@java.lang.Override protected void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddr, destAddr, text, (deliveryIntent != null)); if (pdu != null) { sendRawPdu(pdu.encodedScAddress, pdu.encodedMessage, sentIntent, deliveryIntent, destAddr, false); } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, ""GsmSMSDispatcher.sendText(): getSubmitPdu() returned null""); } }",33638cbe901d2e88be99bda925ce9a65d7ec700f,"sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)","sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)",4,2,"@java.lang.Override protected void sendText(java.lang.String destAddr, java.lang.String scAddr, java.lang.String text, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, android.net.Uri messageUri, java.lang.String callingPkg) { com.android.internal.telephony.gsm.SmsMessage.SubmitPdu pdu = com.android.internal.telephony.gsm.SmsMessage.getSubmitPdu(scAddr, destAddr, text, (deliveryIntent != null)); if (pdu != null) { if (messageUri == null) { if (com.android.internal.telephony.SmsApplication.shouldWriteMessageForPackage(callingPkg, mContext)) { messageUri = writeOutboxMessage(getSubId(), destAddr, text, (deliveryIntent != null), callingPkg); } } else { moveToOutbox(getSubId(), messageUri, callingPkg); } java.util.HashMap map = getSmsTrackerMap(destAddr, scAddr, text, pdu); com.android.internal.telephony.gsm.SmsTracker tracker = getSmsTracker(map, sentIntent, deliveryIntent, getFormat(), messageUri, false); sendRawPdu(tracker); } else { android.telephony.Rlog.e(com.android.internal.telephony.gsm.GsmSMSDispatcher.TAG, ""GsmSMSDispatcher.sendText(): getSubmitPdu() returned null""); } }",30bff4e82d3ef3854aa524e427f5df00d3198792,"sendText(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent,android.net.Uri,java.lang.String)",265222,191,321
526563,src_main_java_com_android_apksig_internal_apk_v2_V2SchemeSigner.java,11.0,"public static java.util.List<com.android.apksig.internal.apk.v2.SignatureAlgorithm> getSuggestedSignatureAlgorithms(java.security.PublicKey signingKey, int minSdkVersion) throws java.security.InvalidKeyException { java.lang.String keyAlgorithm = signingKey.getAlgorithm(); if (""RSA"".equalsIgnoreCase(keyAlgorithm)) { int modulusLengthBits = ((java.security.interfaces.RSAKey) (signingKey)).getModulus().bitLength(); if (modulusLengthBits <= 3072) { return java.util.Collections.singletonList(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA256); } else { return java.util.Collections.singletonList(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA512); } } else if (""DSA"".equalsIgnoreCase(keyAlgorithm)) { return java.util.Collections.singletonList(SignatureAlgorithm.DSA_WITH_SHA256); } else if (""EC"".equalsIgnoreCase(keyAlgorithm)) { int keySizeBits = ((java.security.interfaces.ECKey) (signingKey)).getParams().getOrder().bitLength(); if (keySizeBits <= 256) { return java.util.Collections.singletonList(SignatureAlgorithm.ECDSA_WITH_SHA256); } else { return java.util.Collections.singletonList(SignatureAlgorithm.ECDSA_WITH_SHA512); } } else { throw new java.security.InvalidKeyException((""Unsupported key algorithm: "" + keyAlgorithm)); } }",fd06c989a8b2dffa80d6988399dec209888a5d4d,"public static java.util.List<com.android.apksig.internal.apk.v2.SignatureAlgorithm> getSuggestedSignatureAlgorithms(java.security.PublicKey signingKey, int minSdkVersion, boolean apkSigningBlockPaddingSupported) throws java.security.InvalidKeyException { java.lang.String keyAlgorithm = signingKey.getAlgorithm(); if (""RSA"".equalsIgnoreCase(keyAlgorithm)) { int modulusLengthBits = ((java.security.interfaces.RSAKey) (signingKey)).getModulus().bitLength(); if (modulusLengthBits <= 3072) { return java.util.Collections.singletonList(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA256); } else { return java.util.Collections.singletonList(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA512); } } else if (""DSA"".equalsIgnoreCase(keyAlgorithm)) { return java.util.Collections.singletonList(SignatureAlgorithm.DSA_WITH_SHA256); } else if (""EC"".equalsIgnoreCase(keyAlgorithm)) { int keySizeBits = ((java.security.interfaces.ECKey) (signingKey)).getParams().getOrder().bitLength(); if (keySizeBits <= 256) { return java.util.Collections.singletonList(SignatureAlgorithm.ECDSA_WITH_SHA256); } else { return java.util.Collections.singletonList(SignatureAlgorithm.ECDSA_WITH_SHA512); } } else { throw new java.security.InvalidKeyException((""Unsupported key algorithm: "" + keyAlgorithm)); } }",fbac0d25dc2ea6b4cd24f9fbfdd1ead21ad23095,"getSuggestedSignatureAlgorithms(java.security.PublicKey,int)","getSuggestedSignatureAlgorithms(java.security.PublicKey,int,boolean)",2,0,"public static java.util.List<com.android.apksig.internal.apk.v2.SignatureAlgorithm> getSuggestedSignatureAlgorithms(java.security.PublicKey signingKey, int minSdkVersion) throws java.security.InvalidKeyException { java.lang.String keyAlgorithm = signingKey.getAlgorithm(); if (""RSA"".equalsIgnoreCase(keyAlgorithm)) { int modulusLengthBits = ((java.security.interfaces.RSAKey) (signingKey)).getModulus().bitLength(); if (modulusLengthBits <= 3072) { return java.util.Collections.singletonList(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA256); } else { return java.util.Collections.singletonList(SignatureAlgorithm.RSA_PKCS1_V1_5_WITH_SHA512); } } else if (""DSA"".equalsIgnoreCase(keyAlgorithm)) { return java.util.Collections.singletonList(SignatureAlgorithm.DSA_WITH_SHA256); } else if (""EC"".equalsIgnoreCase(keyAlgorithm)) { int keySizeBits = ((java.security.interfaces.ECKey) (signingKey)).getParams().getOrder().bitLength(); if (keySizeBits <= 256) { return java.util.Collections.singletonList(SignatureAlgorithm.ECDSA_WITH_SHA256); } else { return java.util.Collections.singletonList(SignatureAlgorithm.ECDSA_WITH_SHA512); } } else { throw new java.security.InvalidKeyException((""Unsupported key algorithm: "" + keyAlgorithm)); } }",fd06c989a8b2dffa80d6988399dec209888a5d4d,"getSuggestedSignatureAlgorithms(java.security.PublicKey,int)",93185,326,319
91995,luni_src_main_java_libcore_io_Posix.java,97.0,public native libcore.io.StructStatVfs fstatvfs(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;,0a34e77644ddf4374bb17ec9c9839504cfecca4b,public native android.os.StructStatVfs fstatvfs(java.io.FileDescriptor fd) throws android.os.ErrnoException;,781181b872648ef111254f48a949db7fb24d811f,fstatvfs(java.io.FileDescriptor),fstatvfs(java.io.FileDescriptor),3,97,public native android.system.StructStatVfs fstatvfs(java.io.FileDescriptor fd) throws android.system.ErrnoException;,4bd78226aeab53caca42bf31595790c0622277d7,fstatvfs(java.io.FileDescriptor),169926,29,29
87626,src_com_google_gct_idea_appengine_sdk_AppEngineSdk.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void addKickStartParameters(com.intellij.execution.configurations.ParametersList vmParams) { java.io.File agentJar = getSdkJar(com.google.gct.idea.appengine.sdk.AppEngineSdk.AGENT_JAR_PATH); if (agentJar != null) { vmParams.add((""-javaagent:"" + (agentJar.getAbsolutePath()))); } java.io.File overridesJar = getSdkJar(com.google.gct.idea.appengine.sdk.AppEngineSdk.OVERRIDES_JAR_PATH); if (overridesJar != null) { vmParams.add((""-Xbootclasspath/p:"" + (overridesJar.getAbsolutePath()))); } }",3fe3f585a16853fab51276524206369039c5d813,,addKickStartParameters(com.intellij.execution.configurations.ParametersList),2,3,"public void addServerVmParams(com.intellij.execution.configurations.ParametersList vmParams) { java.io.File agentJar = getSdkJar(com.google.gct.idea.appengine.sdk.AppEngineSdk.AGENT_JAR_PATH); if (agentJar != null) { vmParams.add((""-javaagent:"" + (agentJar.getAbsolutePath()))); com.google.gct.idea.appengine.sdk.AppEngineSdk.LOG.warn((""App Engine SDK Agent jar not found : "" + (com.google.gct.idea.appengine.sdk.AppEngineSdk.AGENT_JAR_PATH))); } java.io.File overridesJar = getSdkJar(com.google.gct.idea.appengine.sdk.AppEngineSdk.OVERRIDES_JAR_PATH); if (overridesJar != null) { vmParams.add((""-Xbootclasspath/p:"" + (overridesJar.getAbsolutePath()))); com.google.gct.idea.appengine.sdk.AppEngineSdk.LOG.warn((""App Engine SDK Overrides JAR not found "" + (com.google.gct.idea.appengine.sdk.AppEngineSdk.OVERRIDES_JAR_PATH))); } }",058a9c23ff627fab7c337b6299e326262a43ac55,addServerVmParams(com.intellij.execution.configurations.ParametersList),445394,151,265
103652,sdkmanager_sdkuilib_src_main_java_com_android_sdkuilib_internal_widgets_AvdCreationPresenter.java,,,,private static boolean isNexus(com.android.sdklib.devices.Device device) { return device.getName().contains(com.android.sdkuilib.internal.widgets.AvdCreationPresenter.NEXUS); },77b9888df9f28d3c9639bba609adfda45b95d81c,,isNexus(com.android.sdklib.devices.Device),2,31,"@java.lang.SuppressWarnings(""deprecation"") private static boolean isNexus(com.android.sdklib.devices.Device device) { return device.getName().contains(com.android.sdkuilib.internal.widgets.AvdCreationPresenter.NEXUS); }",0a144ca55df4b59310b839db342101bcace8de81,isNexus(com.android.sdklib.devices.Device),67102,51,60
106033,ddmlib_src_main_java_com_android_ddmlib_BatteryFetcher.java,,,,private synchronized void handleBatteryLevelFailure() { if ((mPendingRequest) != null) { mPendingRequest.set(null); } mPendingRequest = null; },e16f4b71207ab3fb8981095ea48fe5837ebfebab,,handleBatteryLevelFailure(),3,6,"private synchronized void handleBatteryLevelFailure(java.lang.Exception e) { com.android.ddmlib.Log.w(com.android.ddmlib.BatteryFetcher.LOG_TAG, java.lang.String.format(""%s getting battery level for device %s: %s"", e.getClass().getSimpleName(), mDevice.getSerialNumber(), e.getMessage())); if ((mPendingRequest) != null) { if (!(mPendingRequest.setException(e))) { com.android.ddmlib.Log.e(com.android.ddmlib.BatteryFetcher.LOG_TAG, ""Future.setException failed""); mPendingRequest.set(null); } } mPendingRequest = null; }",769b134c523133ae235829694fcaa4574c9dbe30,handleBatteryLevelFailure(java.lang.Exception),446259,36,153
204828,harmony-tests_src_test_java_org_apache_harmony_tests_java_util_LinkedHashMapTest.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test_forEach() throws java.lang.Exception { java.util.LinkedHashMap<java.lang.String, java.lang.String> map = new java.util.LinkedHashMap<java.lang.String, java.lang.String>(); map.put(""one"", ""1""); map.put(""two"", ""2""); map.put(""three"", ""3""); java.util.LinkedHashMap<java.lang.String, java.lang.String> output = new java.util.LinkedHashMap<java.lang.String, java.lang.String>(); map.forEach(( k, v) -> output.put(k, v)); assertEquals(3, output.size()); assertEquals(map.get(""one""), output.get(""one"")); assertEquals(map.get(""two""), output.get(""two"")); assertEquals(map.get(""three""), output.get(""three"")); }",569d5b05e36889bc5335c7860b3043917e30f741,,test_forEach(),4,39,"public void test_forEach() throws java.lang.Exception { java.util.LinkedHashMap<java.lang.String, java.lang.String> map = new java.util.LinkedHashMap<>(); map.put(""three"", ""3""); map.put(""two"", ""2""); map.put(""one"", ""1""); java.util.LinkedHashMap<java.lang.String, java.lang.String> output = new java.util.LinkedHashMap<>(); map.forEach(( k, v) -> output.put(k, v)); assertEquals(map, output); java.util.LinkedHashSet<java.lang.String> setOutput = new java.util.LinkedHashSet<>(); map.keySet().forEach(( k) -> setOutput.add(k)); assertEquals(map.keySet(), setOutput); setOutput.clear(); map.values().forEach(( v) -> setOutput.add(v)); assertEquals(new java.util.LinkedHashSet(map.values()), setOutput); java.util.LinkedHashSet<java.util.Map.Entry<java.lang.String, java.lang.String>> entrySetOutput = new java.util.LinkedHashSet<>(); map.entrySet().forEach(( v) -> entrySetOutput.add(v)); assertEquals(map.entrySet(), entrySetOutput); }",76709906510775804741bd23f4710fdd7be28ab1,test_forEach(),304365,182,268
270260,tests_tests_media_src_android_media_cts_BassBoostTest.java,4.0,"public void test3_2ParameterChangedListener() throws java.lang.Exception { if (!(isBassBoostAvailable())) { return; } synchronized(mLock) { mInitialized = false; createListenerLooper(false, false, true); waitForLooperInitialization_l(); getBassBoost(0); mChangedParameter = -1; mBassBoost.setStrength(android.media.cts.BassBoostTest.TEST_STRENGTH); int looperWaitCount = android.media.cts.BassBoostTest.MAX_LOOPER_WAIT_COUNT; while (((mChangedParameter) == (-1)) && ((looperWaitCount--) > 0)) { try { mLock.wait(); } catch (java.lang.Exception e) { } } terminateListenerLooper(); releaseBassBoost(); } assertEquals(""parameter change not received"", BassBoost.PARAM_STRENGTH, mChangedParameter); }",32db60244453053852fe5158b51da449387c9739,"public void test3_2ParameterChangedListener() throws java.lang.Exception { if (!(isBassBoostAvailable())) { return; } synchronized(mLock) { mInitialized = false; createListenerLooper(false, false, true); waitForLooperInitialization_l(); getBassBoost(1); mChangedParameter = -1; mBassBoost.setStrength(android.media.cts.BassBoostTest.TEST_STRENGTH); int looperWaitCount = android.media.cts.BassBoostTest.MAX_LOOPER_WAIT_COUNT; while (((mChangedParameter) == (-1)) && ((looperWaitCount--) > 0)) { try { mLock.wait(); } catch (java.lang.Exception e) { } } terminateListenerLooper(); releaseBassBoost(); } assertEquals(""parameter change not received"", BassBoost.PARAM_STRENGTH, mChangedParameter); }",6adbce24188f8651408b66cc4d3f39edb1191dc0,test3_2ParameterChangedListener(),test3_2ParameterChangedListener(),5,4,"public void test3_2ParameterChangedListener() throws java.lang.Exception { if (!(isBassBoostAvailable())) { return; } synchronized(mLock) { mInitialized = false; createListenerLooper(false, false, true); waitForLooperInitialization_l(); getBassBoost(mSession); mChangedParameter = -1; mBassBoost.setStrength(android.media.cts.BassBoostTest.TEST_STRENGTH); int looperWaitCount = android.media.cts.BassBoostTest.MAX_LOOPER_WAIT_COUNT; while (((mChangedParameter) == (-1)) && ((looperWaitCount--) > 0)) { try { mLock.wait(); } catch (java.lang.Exception e) { } } terminateListenerLooper(); releaseBassBoost(); } assertEquals(""parameter change not received"", BassBoost.PARAM_STRENGTH, mChangedParameter); }",5ebe80cc90625196d2882a63c0cf88c73a16155b,test3_2ParameterChangedListener(),278710,200,203
72740,json_src_test_java_org_json_JSONObjectTest.java,35.0,"public void testNullValue() throws org.json.JSONException { org.json.JSONObject object = new org.json.JSONObject(); object.put(""foo"", JSONObject.NULL); object.put(""bar"", ((java.util.Collection) (null))); assertTrue(object.has(""foo"")); assertFalse(object.has(""bar"")); assertTrue(object.isNull(""foo"")); assertTrue(object.isNull(""bar"")); }",8a3458294e2f8454b3b3fa0c85a26258df2a99c5,"public void testNullValue() throws org.json.JSONException { org.json.JSONObject object = new org.json.JSONObject(); object.put(""foo"", JSONObject.NULL); object.put(""bar"", ((java.lang.Object) (null))); object.put(""baz"", ((java.util.Collection) (null))); assertTrue(object.has(""foo"")); assertFalse(object.has(""bar"")); assertTrue(object.has(""baz"")); assertTrue(object.isNull(""foo"")); assertTrue(object.isNull(""bar"")); assertFalse(object.isNull(""baz"")); }",2a9d96660e777a0e4a3410d1c7bd85e7b04995ee,testNullValue(),testNullValue(),5,37,"public void testNullValue() throws org.json.JSONException { org.json.JSONObject object = new org.json.JSONObject(); object.put(""foo"", JSONObject.NULL); object.put(""bar"", ((java.util.Collection) (null))); assertTrue(object.has(""foo"")); assertFalse(object.has(""bar"")); assertTrue(object.isNull(""foo"")); assertTrue(object.isNull(""bar"")); }",8a3458294e2f8454b3b3fa0c85a26258df2a99c5,testNullValue(),43658,121,87
537552,tests_net_java_com_android_server_IpSecServiceRefcountedResourceTest.java,,,,"@org.junit.Test public void testCleanupAndRelease() throws android.os.RemoteException { android.os.IBinder binderMock = mock(android.os.IBinder.class); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = getTestRefcountedResource(binderMock); refcountedResource.cleanupAndRelease(); assertResourceState(refcountedResource, (-1), 1, 1, 1, 1); verify(binderMock).unlinkToDeath(eq(refcountedResource), eq(0)); assertNull(refcountedResource.mBinder); }",4fa62ff9332344624074373bb229ca66e03f4d35,,testCleanupAndRelease(),9,15,"@org.junit.Test public void testCleanupAndRelease() throws android.os.RemoteException { android.os.IBinder binderMock = mock(android.os.IBinder.class); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = getTestRefcountedResource(binderMock); refcountedResource.userRelease(); assertResourceState(refcountedResource, (-1), 1, 1, 1, 1); verify(binderMock).unlinkToDeath(eq(refcountedResource), eq(0)); assertNull(refcountedResource.mBinder); }",022c9211538fe03ad433117ed786ba267c2e4b47,testCleanupAndRelease(),78034,139,138
202178,src_com_android_bluetooth_hfp_HeadsetService.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void bindResponse(int ind_id, int ind_status) { com.android.bluetooth.hfp.HeadsetService service = getService(); if (service == null) return; service.bindResponse(ind_id, ind_status); }",9b0afed52fad1deeaa1dacbcbed45bfb5c3f354e,,"bindResponse(int,int)",4,18,"public void bindResponse(int ind_id, boolean ind_status) { com.android.bluetooth.hfp.HeadsetService service = getService(); if (service == null) return; service.bindResponse(ind_id, ind_status); }",3769d626f6698b7a50a7547598bae6901ed98e9b,"bindResponse(int,boolean)",22941,57,57
417103,packages_CaptivePortalLogin_src_com_android_captiveportallogin_CaptivePortalLoginActivity.java,17.0,"@java.lang.Override public void onReceivedSslError(android.webkit.WebView view, android.webkit.SslErrorHandler handler, android.net.http.SslError error) { logMetricsEvent(MetricsEvent.CAPTIVE_PORTAL_LOGIN_ACTIVITY_SSL_ERROR); android.util.Log.w(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, ((((((""SSL error (error: "" + (error.getPrimaryError())) + "" host: "") + (android.net.Uri.parse(error.getUrl()).getHost())) + "" certificate: "") + (error.getCertificate())) + ""); displaying SSL warning."")); final java.lang.String sslErrorPage = makeSslErrorPage(); if (com.android.captiveportallogin.CaptivePortalLoginActivity.VDBG) { android.util.Log.d(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, sslErrorPage); } view.loadDataWithBaseURL(com.android.captiveportallogin.CaptivePortalLoginActivity.MyWebViewClient.INTERNAL_ASSETS, sslErrorPage, ""text/HTML"", ""UTF-8"", null); }",18f3760ae533ebf86ede0601f27f8652f0f48684,"@java.lang.Override public void onReceivedSslError(android.webkit.WebView view, android.webkit.SslErrorHandler handler, android.net.http.SslError error) { java.net.URL url = com.android.captiveportallogin.CaptivePortalLoginActivity.makeURL(error.getUrl()); if (((url == null) || ((mHostname) == null)) || (!(mHostname.equals(url.getHost())))) { return; } logMetricsEvent(MetricsEvent.CAPTIVE_PORTAL_LOGIN_ACTIVITY_SSL_ERROR); android.util.Log.w(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, ((((((""SSL error (error: "" + (error.getPrimaryError())) + "" host: "") + (android.net.Uri.parse(error.getUrl()).getHost())) + "" certificate: "") + (error.getCertificate())) + ""); displaying SSL warning."")); final java.lang.String sslErrorPage = makeSslErrorPage(); if (com.android.captiveportallogin.CaptivePortalLoginActivity.VDBG) { android.util.Log.d(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, sslErrorPage); } view.loadDataWithBaseURL(com.android.captiveportallogin.CaptivePortalLoginActivity.MyWebViewClient.INTERNAL_ASSETS, sslErrorPage, ""text/HTML"", ""UTF-8"", null); }",5f2c2e8e1e475b19a3c0f16585c3f0571c8fbbe5,"onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)","onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)",10,16,"@java.lang.Override public void onReceivedSslError(android.webkit.WebView view, android.webkit.SslErrorHandler handler, android.net.http.SslError error) { final java.net.URL url = com.android.captiveportallogin.CaptivePortalLoginActivity.makeURL(error.getUrl()); final java.lang.String host = com.android.captiveportallogin.CaptivePortalLoginActivity.host(url); android.util.Log.d(com.android.captiveportallogin.CaptivePortalLoginActivity.TAG, java.lang.String.format(""SSL error: %s, url: %s, certificate: %s"", error.getPrimaryError(), com.android.captiveportallogin.CaptivePortalLoginActivity.sanitizeURL(url), error.getCertificate())); if ((url == null) || (!(java.util.Objects.equals(host, mHostname)))) { handler.cancel(); return; } logMetricsEvent(MetricsEvent.CAPTIVE_PORTAL_LOGIN_ACTIVITY_SSL_ERROR); final java.lang.String sslErrorPage = makeSslErrorPage(); view.loadDataWithBaseURL(com.android.captiveportallogin.CaptivePortalLoginActivity.MyWebViewClient.INTERNAL_ASSETS, sslErrorPage, ""text/HTML"", ""UTF-8"", null); }",f47efadee4539f35d7beeeb9ade83946371f9f1a,"onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)",299157,310,279
41115,src_java_com_android_internal_telephony_UiccCardApplication.java,,,,"public void supplyPin2(java.lang.String pin2, android.os.Message onComplete) { mCi.supplyIccPin2(pin2, onComplete); }",459262466b343b422a33f43688cb01c810c814e2,,"supplyPin2(java.lang.String,android.os.Message)",22,12,"public void supplyPin2(java.lang.String pin2, android.os.Message onComplete) { synchronized(mLock) { mCi.supplyIccPin2(pin2, onComplete); } }",12861238d8f0a39374cd6803be62555a57dda0fd,"supplyPin2(java.lang.String,android.os.Message)",499265,37,44
223057,jack_src_com_android_jack_transformations_ast_BoostLockedRegionPriority.java,,,,"private com.android.jack.ir.ast.JExpressionStatement makeBoostCall(com.android.jack.ir.sourceinfo.SourceInfo info) { return new com.android.jack.ir.ast.JExpressionStatement(info, new com.android.jack.ir.ast.JMethodCall(info, null, ams, boostMethodId, JPrimitiveTypeEnum.VOID.getType(), false)); }",88f7f04b5dc51450f8460abade6527bef99a0e51,,makeBoostCall(com.android.jack.ir.sourceinfo.SourceInfo),12,5,"private com.android.jack.ir.ast.JExpressionStatement makeRequestCall(com.android.jack.ir.sourceinfo.SourceInfo info) { assert ((lockClass) != null) && ((requestMethodId) != null); return new com.android.jack.ir.ast.JExpressionStatement(info, new com.android.jack.ir.ast.JMethodCall(info, null, requestClass, requestMethodId, JPrimitiveTypeEnum.VOID.getType(), false)); }",73e7e2b1bc6f3390bd7cfc5a40653ed558642304,makeRequestCall(com.android.jack.ir.sourceinfo.SourceInfo),273728,88,107
117292,jack_src_com_android_jack_analysis_dependency_type_TypeDependenciesWriter.java,0.0,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession program) throws com.android.jack.JackUserException { try { com.android.sched.vfs.OutputVFile outputVFile; if ((((outputLibrary) != null) && (!(isIncrementalMode))) && ((intermediateDexDir) == null)) { outputVFile = outputLibrary.createFile(FileType.DEPENDENCIES, TypeDependencies.vpath); } else { assert (intermediateDexDir) != null; com.android.sched.vfs.VPath typeDependencyPath = TypeDependencies.vpath.clone(); typeDependencyPath.prependPath(new com.android.sched.vfs.VPath("".."", '/')); outputVFile = intermediateDexDir.getRootOutputVDir().createOutputVFile(typeDependencyPath); } com.android.jack.Jack.getSession().getTypeDependencies().write(outputVFile); } catch (com.android.sched.util.file.CannotCreateFileException e) { com.android.jack.experimental.incremental.IncrementalException incrementalException = new com.android.jack.experimental.incremental.IncrementalException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, incrementalException); throw new com.android.jack.JackAbortException(incrementalException); } catch (java.io.IOException e) { com.android.jack.experimental.incremental.IncrementalException incrementalException = new com.android.jack.experimental.incremental.IncrementalException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, incrementalException); throw new com.android.jack.JackAbortException(incrementalException); } }",837ef2668eef7a80e4eea69cceb7734c707e2125,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession program) throws com.android.jack.JackUserException { try { com.android.jack.Jack.getSession().getTypeDependencies().write(outputLibrary.createFile(FileType.DEPENDENCIES, TypeDependencies.vpath)); } catch (com.android.sched.util.file.CannotCreateFileException e) { com.android.jack.experimental.incremental.IncrementalException incrementalException = new com.android.jack.experimental.incremental.IncrementalException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, incrementalException); throw new com.android.jack.JackAbortException(incrementalException); } catch (java.io.IOException e) { com.android.jack.experimental.incremental.IncrementalException incrementalException = new com.android.jack.experimental.incremental.IncrementalException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, incrementalException); throw new com.android.jack.JackAbortException(incrementalException); } }",74e2b666475d15ede53402f031fe43a5731c6201,run(com.android.jack.ir.ast.JSession),run(com.android.jack.ir.ast.JSession),12,0,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws com.android.jack.JackUserException { java.io.PrintStream ps = null; try { ps = new java.io.PrintStream(session.getJackInternalOutputLibrary().createFile(FileType.DEPENDENCIES, TypeDependencies.vpath).openWrite()); com.android.jack.Jack.getSession().getTypeDependencies().write(ps); } catch (com.android.sched.util.file.CannotCreateFileException e) { com.android.jack.experimental.incremental.IncrementalException incrementalException = new com.android.jack.experimental.incremental.IncrementalException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, incrementalException); throw new com.android.jack.JackAbortException(incrementalException); } catch (java.io.IOException e) { com.android.jack.experimental.incremental.IncrementalException incrementalException = new com.android.jack.experimental.incremental.IncrementalException(e); com.android.jack.Jack.getSession().getReporter().report(Severity.FATAL, incrementalException); throw new com.android.jack.JackAbortException(incrementalException); } finally { if (ps != null) { ps.close(); } } }",b74ed05743e54e5d752daf297307c4cd8aad00f0,run(com.android.jack.ir.ast.JSession),275270,249,292
106646,hierarchyviewer2_hierarchyviewer2lib_src_main_java_com_android_hierarchyviewerlib_ui_DumpThemeDisplay.java,,,,"private static void buildTable(java.util.List<com.android.hierarchyviewerlib.models.DumpThemeModel.DumpThemeModelData> data) { org.eclipse.swt.widgets.Table table = new org.eclipse.swt.widgets.Table(com.android.hierarchyviewerlib.ui.DumpThemeDisplay.sShell, ((org.eclipse.swt.SWT.BORDER) | (org.eclipse.swt.SWT.FULL_SELECTION))); table.setHeaderVisible(true); table.setLinesVisible(true); java.lang.String[] headers = new java.lang.String[]{ ""Resource Name"", ""Resource Value"" }; for (int i = 0; i < (headers.length); ++i) { org.eclipse.swt.widgets.TableColumn column = new org.eclipse.swt.widgets.TableColumn(table, org.eclipse.swt.SWT.NONE); column.setText(headers[i]); } for (com.android.hierarchyviewerlib.models.DumpThemeModel.DumpThemeModelData resource : data) { org.eclipse.swt.widgets.TableItem row = new org.eclipse.swt.widgets.TableItem(table, org.eclipse.swt.SWT.NONE); row.setText(0, resource.getName()); row.setText(1, resource.getValue()); } for (int i = 0; i < (headers.length); ++i) { table.getColumn(i).pack(); } table.setSize(com.android.hierarchyviewerlib.ui.DumpThemeDisplay.DEFAULT_WIDTH, com.android.hierarchyviewerlib.ui.DumpThemeDisplay.DEFAULT_HEIGHT); }",037d158efdeb015517a1d342e3dff125d3ed9618,,buildTable(java.util.List),7,0,"private static void addTableItems(java.lang.String searchText, java.util.List<com.android.hierarchyviewerlib.models.ThemeModel.ThemeModelData> list) { for (com.android.hierarchyviewerlib.models.ThemeModel.ThemeModelData data : list) { searchText = com.android.hierarchyviewerlib.ui.DumpThemeDisplay.sanitize(searchText); if ("""".equals(searchText)) { com.android.hierarchyviewerlib.ui.DumpThemeDisplay.addTableItem(data.getName(), data.getValue()); } else { if ((com.android.hierarchyviewerlib.ui.DumpThemeDisplay.sanitize(data.getName()).contains(searchText)) || (com.android.hierarchyviewerlib.ui.DumpThemeDisplay.sanitize(data.getValue()).contains(searchText))) { com.android.hierarchyviewerlib.ui.DumpThemeDisplay.addTableItem(data.getName(), data.getValue()); } } } }",3095664138b30a6bbcba93b4856efd24f7158b4c,"addTableItems(java.lang.String,java.util.List)",306124,347,211
529328,src_java_com_android_internal_telephony_SubscriptionInfoUpdater.java,0.0,"private void handleSimLocked(int slotId, java.lang.String reason) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM))) { logd(((""SIM"" + (slotId + 1)) + "" hot plug in"")); com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = null; } com.android.internal.telephony.uicc.IccFileHandler fileHandler = ((com.android.internal.telephony.SubscriptionInfoUpdater.mPhone[slotId].getIccCard()) == null) ? null : com.android.internal.telephony.SubscriptionInfoUpdater.mPhone[slotId].getIccCard().getIccFileHandler(); if (fileHandler != null) { java.lang.String iccId = com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]; if (iccId == null) { logd(""Querying IccId""); fileHandler.loadEFTransparent(IccConstants.EF_ICCID, obtainMessage(com.android.internal.telephony.SubscriptionInfoUpdater.EVENT_SIM_LOCKED_QUERY_ICCID_DONE, new com.android.internal.telephony.SubscriptionInfoUpdater.QueryIccIdUserObj(reason, slotId))); } else { logd((((""NOT Querying IccId its already set sIccid["" + slotId) + ""]="") + iccId)); updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); } } else { logd(((""sFh["" + slotId) + ""] is null, ignore"")); } }",ad756ba86bfc64b48c4dac83dcde4bc7107b31d9,"private void handleSimLocked(int slotId, java.lang.String reason) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM))) { logd(((""SIM"" + (slotId + 1)) + "" hot plug in"")); com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = null; } java.lang.String iccId = com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]; if (iccId == null) { com.android.internal.telephony.uicc.IccRecords records = com.android.internal.telephony.SubscriptionInfoUpdater.mPhone[slotId].getIccCard().getIccRecords(); if ((records.getFullIccId()) == null) { logd(""handleSimLocked: IccID null""); return; } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = records.getFullIccId(); } else { logd((((""NOT Querying IccId its already set sIccid["" + slotId) + ""]="") + iccId)); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); }",e0c57a7f1ff03243423535ea13756b25939457c8,"handleSimLocked(int,java.lang.String)","handleSimLocked(int,java.lang.String)",8,0,"private void handleSimLocked(int slotId, java.lang.String reason) { if (((com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]) != null) && (com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId].equals(com.android.internal.telephony.SubscriptionInfoUpdater.ICCID_STRING_FOR_NO_SIM))) { logd(((""SIM"" + (slotId + 1)) + "" hot plug in"")); com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = null; } java.lang.String iccId = com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId]; if (iccId == null) { com.android.internal.telephony.uicc.IccRecords records = com.android.internal.telephony.SubscriptionInfoUpdater.mPhone[slotId].getIccCard().getIccRecords(); if ((stripIccIdSuffix(records.getFullIccId())) == null) { logd(""handleSimLocked: IccID null""); return; } com.android.internal.telephony.SubscriptionInfoUpdater.mIccId[slotId] = stripIccIdSuffix(records.getFullIccId()); } else { logd((((""NOT Querying IccId its already set sIccid["" + slotId) + ""]="") + iccId)); } if (isAllIccIdQueryDone()) { updateSubscriptionInfoByIccId(); } updateCarrierServices(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED); broadcastSimStateChanged(slotId, IccCardConstants.INTENT_VALUE_ICC_LOCKED, reason); }",d332fe8f5b77b6545b60772d94cb0f0324dd8e88,"handleSimLocked(int,java.lang.String)",518998,357,389
22029,eclipse_plugins_com.android.ide.eclipse.tests_src_com_android_ide_eclipse_adt_internal_editors_layout_refactoring_ExtractStyleRefactoringTest.java,,,,"private void checkRefactoringByOffset(java.lang.String basename, java.lang.String styleFileName, java.lang.String newStyleName, boolean removeExtracted, boolean applyStyle, int expectedModifiedFileCount, java.lang.String beginCaretLocation, java.lang.String endCaretLocation) throws java.lang.Exception { org.eclipse.core.resources.IFile file = getLayoutFile(getProject(), basename); int beginOffset = getCaretOffset(file, beginCaretLocation); int endOffset = getCaretOffset(file, endCaretLocation); com.android.ide.eclipse.adt.internal.editors.layout.refactoring.TestContext info = setupTestContext(file, basename); com.android.ide.eclipse.adt.internal.editors.layout.refactoring.TestLayoutEditor layoutEditor = info.mLayoutEditor; org.eclipse.ui.IWorkbench workbench = org.eclipse.ui.PlatformUI.getWorkbench(); org.eclipse.ui.IWorkbenchWindow activeWorkbenchWindow = workbench.getActiveWorkbenchWindow(); org.eclipse.ui.IWorkbenchPage page = activeWorkbenchWindow.getActivePage(); org.eclipse.ui.ide.IDE.openEditor(page, file); org.eclipse.jface.text.ITextSelection selection = new org.eclipse.jface.text.TextSelection(beginOffset, (endOffset - beginOffset)); com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ExtractStyleRefactoring refactoring = new com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ExtractStyleRefactoring(file, layoutEditor, selection, null); refactoring.setStyleName(newStyleName); refactoring.setApplyStyle(applyStyle); refactoring.setRemoveExtracted(removeExtracted); refactoring.setStyleFileName(styleFileName); checkRefactoringt(basename, styleFileName, newStyleName, removeExtracted, applyStyle, expectedModifiedFileCount, file, refactoring); }",b15eebcf8ff0c2f75435c96f99bbf632dfddd145,,"checkRefactoringByOffset(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,int,java.lang.String,java.lang.String)",5,10,"private void checkRefactoringByOffset(java.lang.String basename, java.lang.String styleFileName, java.lang.String newStyleName, boolean removeExtracted, boolean applyStyle, java.lang.String parentStyle, int expectedModifiedFileCount, java.lang.String beginCaretLocation, java.lang.String endCaretLocation) throws java.lang.Exception { org.eclipse.core.resources.IFile file = getLayoutFile(getProject(), basename); int beginOffset = getCaretOffset(file, beginCaretLocation); int endOffset = getCaretOffset(file, endCaretLocation); com.android.ide.eclipse.adt.internal.editors.layout.refactoring.TestContext info = setupTestContext(file, basename); com.android.ide.eclipse.adt.internal.editors.layout.refactoring.TestLayoutEditor layoutEditor = info.mLayoutEditor; org.eclipse.ui.IWorkbench workbench = org.eclipse.ui.PlatformUI.getWorkbench(); org.eclipse.ui.IWorkbenchWindow activeWorkbenchWindow = workbench.getActiveWorkbenchWindow(); org.eclipse.ui.IWorkbenchPage page = activeWorkbenchWindow.getActivePage(); org.eclipse.ui.ide.IDE.openEditor(page, file); org.eclipse.jface.text.ITextSelection selection = new org.eclipse.jface.text.TextSelection(beginOffset, (endOffset - beginOffset)); com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ExtractStyleRefactoring refactoring = new com.android.ide.eclipse.adt.internal.editors.layout.refactoring.ExtractStyleRefactoring(file, layoutEditor, selection, null); checkRefactoring(basename, styleFileName, newStyleName, removeExtracted, applyStyle, parentStyle, expectedModifiedFileCount, file, refactoring); }",df93d1736be00896191759e172510c2c1808b906,"checkRefactoringByOffset(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,java.lang.String,int,java.lang.String,java.lang.String)",254114,434,409
245002,luni_src_test_java_libcore_java_net_AbstractCookiesTest.java,89.0,"public void testCookieStoreNullUris() { java.net.CookieStore cookieStore = new java.net.CookieManager(createCookieStore(), null).getCookieStore(); java.net.HttpCookie cookieA = libcore.java.net.AbstractCookiesTest.createCookie(""a"", ""android"", "".android.com"", ""/source""); java.net.HttpCookie cookieB = libcore.java.net.AbstractCookiesTest.createCookie(""b"", ""banana"", ""code.google.com"", ""/p/android""); try { cookieStore.add(null, cookieA); } catch (java.lang.NullPointerException expected) { expected.printStackTrace(); } assertEquals(java.util.Arrays.asList(cookieA), cookieStore.getCookies()); try { cookieStore.add(null, cookieB); } catch (java.lang.NullPointerException expected) { } assertEquals(java.util.Arrays.asList(cookieA, cookieB), cookieStore.getCookies()); try { cookieStore.get(null); fail(); } catch (java.lang.NullPointerException expected) { } assertEquals(java.util.Collections.<java.net.URI>emptyList(), cookieStore.getURIs()); assertTrue(cookieStore.remove(null, cookieA)); assertEquals(java.util.Arrays.asList(cookieB), cookieStore.getCookies()); assertTrue(cookieStore.removeAll()); assertEquals(java.util.Collections.<java.net.URI>emptyList(), cookieStore.getURIs()); assertEquals(java.util.Collections.<java.net.HttpCookie>emptyList(), cookieStore.getCookies()); }",deb6cf0b49b1a1feb2407396d4f0e1cabf2c9c70,"public void testCookieStoreNullUris() { java.net.CookieStore cookieStore = new java.net.CookieManager(createCookieStore(), null).getCookieStore(); java.net.HttpCookie cookieA = libcore.java.net.AbstractCookiesTest.createCookie(""a"", ""android"", "".android.com"", ""/source""); java.net.HttpCookie cookieB = libcore.java.net.AbstractCookiesTest.createCookie(""b"", ""banana"", ""code.google.com"", ""/p/android""); try { cookieStore.add(null, cookieA); fail(); } catch (java.lang.NullPointerException expected) { expected.printStackTrace(); } assertEquals(java.util.Arrays.asList(cookieA), cookieStore.getCookies()); try { cookieStore.add(null, cookieB); fail(); } catch (java.lang.NullPointerException expected) { } assertEquals(java.util.Arrays.asList(cookieA, cookieB), cookieStore.getCookies()); try { cookieStore.get(null); fail(); } catch (java.lang.NullPointerException expected) { } assertEquals(java.util.Collections.<java.net.URI>emptyList(), cookieStore.getURIs()); assertTrue(cookieStore.remove(null, cookieA)); assertEquals(java.util.Arrays.asList(cookieB), cookieStore.getCookies()); assertTrue(cookieStore.removeAll()); assertEquals(java.util.Collections.<java.net.URI>emptyList(), cookieStore.getURIs()); assertEquals(java.util.Collections.<java.net.HttpCookie>emptyList(), cookieStore.getCookies()); }",681b6228ca343ca80286c35597a4ed9e2f1db47d,testCookieStoreNullUris(),testCookieStoreNullUris(),3,89,"public void testCookieStoreNullUris() { java.net.CookieStore cookieStore = new java.net.CookieManager(createCookieStore(), null).getCookieStore(); java.net.HttpCookie cookieA = libcore.java.net.AbstractCookiesTest.createCookie(""a"", ""android"", "".android.com"", ""/source""); java.net.HttpCookie cookieB = libcore.java.net.AbstractCookiesTest.createCookie(""b"", ""banana"", ""code.google.com"", ""/p/android""); try { cookieStore.add(null, cookieA); } catch (java.lang.NullPointerException expected) { expected.printStackTrace(); } assertEquals(java.util.Arrays.asList(cookieA), cookieStore.getCookies()); try { cookieStore.add(null, cookieB); } catch (java.lang.NullPointerException expected) { } assertEquals(java.util.Arrays.asList(cookieA, cookieB), cookieStore.getCookies()); try { cookieStore.get(null); fail(); } catch (java.lang.NullPointerException expected) { } assertEquals(java.util.Collections.<java.net.URI>emptyList(), cookieStore.getURIs()); assertTrue(cookieStore.remove(null, cookieA)); assertEquals(java.util.Arrays.asList(cookieB), cookieStore.getCookies()); assertTrue(cookieStore.removeAll()); assertEquals(java.util.Collections.<java.net.URI>emptyList(), cookieStore.getURIs()); assertEquals(java.util.Collections.<java.net.HttpCookie>emptyList(), cookieStore.getCookies()); }",deb6cf0b49b1a1feb2407396d4f0e1cabf2c9c70,testCookieStoreNullUris(),447764,335,331
162048,luni_src_main_java_java_net_IDN.java,2.0,"public static java.lang.String toASCII(java.lang.String input, int flags) { return libcore.icu.NativeIDN.toASCII(input, flags); }",98b66ff1a67d2d62d9e224dddce60909529aba6a,"public static java.lang.String toASCII(java.lang.String input, int flags) { try { return com.ibm.icu.text.IDNA.convertIDNToASCII(input, flags).toString(); } catch (java.net.com.ibm e) { throw new java.lang.IllegalArgumentException((""Invalid input to toASCI: "" + input)); } }",411718ff7703d9dd88b97529370894b47bb05d3f,"toASCII(java.lang.String,int)","toASCII(java.lang.String,int)",6,4,"public static java.lang.String toASCII(java.lang.String input, int flags) { try { return com.ibm.icu.text.IDNA.convertIDNToASCII(input, flags).toString(); } catch (java.net.com.ibm e) { throw new java.lang.IllegalArgumentException((""Invalid input to toASCII: "" + input), e); } }",199c71109d099917942c35f964deb3a57c08343e,"toASCII(java.lang.String,int)",104116,83,84
298179,src_java_com_android_internal_telephony_RIL.java,77.0,"@java.lang.Override public void getIccCardStatus(android.os.Message result) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_GET_SIM_STATUS, result); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); send(rr); }",b7d60ff34800c39d67c952a8939a48b2541cf736,"@java.lang.Override public void getIccCardStatus(android.os.Message result) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_GET_SIM_STATUS, result); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); com.android.internal.telephony.IRadio radioProxy = getRadioProxy(); if (radioProxy != null) { acquireWakeLock(rr, com.android.internal.telephony.RIL.FOR_WAKELOCK); synchronized(mRequestList) { mRequestList.append(rr.mSerial, rr); } try { radioProxy.getIccCardStatus(mInstanceId, rr.mSerial); } catch (java.lang.Exception e) { riljLog((""getIccCardStatus: exception "" + e)); rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); rr.release(); } } else { rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); rr.release(); } }",0481692e7167e76645afffb1611b53a5527799ed,getIccCardStatus(android.os.Message),getIccCardStatus(android.os.Message),14,64,"@java.lang.Override public void getIccCardStatus(android.os.Message result) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_GET_SIM_STATUS, result); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(); if (radioProxy != null) { addRequest(rr); try { radioProxy.getIccCardStatus(rr.mSerial); } catch (java.lang.Exception e) { riljLoge(""getIccCardStatus"", e); rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); decrementWakeLock(rr); rr.release(); } } else { rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); rr.release(); } }",10f66e37b0761b46465da406ed3ea9332820c88d,getIccCardStatus(android.os.Message),44594,306,267
396032,services_core_java_com_android_server_connectivity_tethering_SimChangeListener.java,0.0,"public void stopListening() { if (com.android.server.connectivity.tethering.SimChangeListener.DBG) android.util.Log.d(com.android.server.connectivity.tethering.SimChangeListener.TAG, ""stopListening for SIM changes""); if ((mBroadcastReceiver) == null) return; mSimBcastGenerationNumber.incrementAndGet(); mContext.unregisterReceiver(mBroadcastReceiver); mBroadcastReceiver = null; }",0335b13e9c3ce837a57cc59fe6104b39dd8887a2,"public void stopListening() { mLog.log(""stopListening for SIM changes""); if ((mBroadcastReceiver) == null) return; mSimBcastGenerationNumber.incrementAndGet(); mContext.unregisterReceiver(mBroadcastReceiver); mBroadcastReceiver = null; }",cbd401f401a6844d2dd047937d31a9ccf1734903,stopListening(),stopListening(),10,0,"public void stopListening() { if (com.android.server.connectivity.tethering.SimChangeListener.DBG) android.util.Log.d(com.android.server.connectivity.tethering.SimChangeListener.TAG, ""stopListening for SIM changes""); if ((mBroadcastReceiver) == null) return; mSimBcastGenerationNumber.incrementAndGet(); mContext.unregisterReceiver(mBroadcastReceiver); mBroadcastReceiver = null; }",0335b13e9c3ce837a57cc59fe6104b39dd8887a2,stopListening(),12985,55,98
91995,luni_src_main_java_android_os_Os.java,,,,public static android.os.StructStatVfs fstatvfs(java.io.FileDescriptor fd) throws android.os.ErrnoException { return Libcore.os.fstatvfs(fd); },4b38113f67d165ae37d5a4e19579e8601fc61cff,,fstatvfs(java.io.FileDescriptor),3,92,public static android.system.StructStatVfs fstatvfs(java.io.FileDescriptor fd) throws android.system.ErrnoException { return Libcore.os.fstatvfs(fd); },5115aae518de69db499d5154f25a183f92e22d87,fstatvfs(java.io.FileDescriptor),169981,43,43
615187,luni_src_main_java_libcore_util_CountryZonesFinder.java,,,,public java.util.List<java.lang.String> getCountryIsoCodes() { java.util.List<java.lang.String> isoCodes = new java.util.ArrayList(countryTimeZonesList.size()); for (libcore.util.CountryTimeZones countryTimeZones : countryTimeZonesList) { isoCodes.add(countryTimeZones.getCountryIso()); } return java.util.Collections.unmodifiableList(isoCodes); },1d3d6299550f6f4bdb61bbf940dd40adef2dafda,,getCountryIsoCodes(),4,2,public java.util.List<java.lang.String> lookupAllCountryIsoCodes() { java.util.List<java.lang.String> isoCodes = new java.util.ArrayList(countryTimeZonesList.size()); for (libcore.util.CountryTimeZones countryTimeZones : countryTimeZonesList) { isoCodes.add(countryTimeZones.getCountryIso()); } return java.util.Collections.unmodifiableList(isoCodes); },fc1d75d4125dcb5d5a1d18cd7e81c294dbb047b9,lookupAllCountryIsoCodes(),53218,102,103
623700,src_java_com_android_ims_ImsManager.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void connect() { mRetryCount = 0; sendEmptyMessage(com.android.ims.ImsManager.Connector.EVENT_GET_IMS_SERVICE); },6e8ba7f331d087d92acc81e418c93495cd7a2135,,connect(),2,96,public void connect() { mRetryCount = 0; post(mGetServiceRunnable); },2157e4f07e7ac6b9f9a7e3ddb016e9cab6881fd6,connect(),229445,37,18
93166,lint_cli_src_test_java_com_android_tools_lint_checks_PreferenceActivityDetectorTest.java,,,,"public void testWarningWhenExplicitlyExportingPreferenceActivitySubclass() throws java.lang.Exception { assertEquals((""AndroidManifest.xml:28: Warning: PreferenceActivity subclass test.pkg.PreferenceActivitySubclass should not be exported [ExportedPreferenceActivity]\n"" + (("" <activity\n"" + "" ^\n"") + ""0 errors, 1 warnings\n"")), lintProject(""bytecode/.classpath=>.classpath"", ""bytecode/export_preference_activity_subclass_explicit.xml=>AndroidManifest.xml"", ""bytecode/PreferenceActivitySubclass.class.data=>bin/classes/test/pkg/PreferenceActivitySubclass.class"")); }",3c8f4cf6687a8d7d8cf0eadd62f8998e5d26c14a,,testWarningWhenExplicitlyExportingPreferenceActivitySubclass(),8,0,"public void testWarningWhenExplicitlyExportingPreferenceActivitySubclass() throws java.lang.Exception { assertEquals((""AndroidManifest.xml:28: Warning: PreferenceActivity subclass test.pkg.PreferenceActivitySubclass should not be exported [ExportedPreferenceActivity]\n"" + (("" <activity\n"" + "" ^\n"") + ""0 errors, 1 warnings\n"")), lintProject(""android/PreferenceActivity.java.txt=>src/android/app/PreferenceActivity.java"", ""src/test/pkg/PreferenceActivitySubclass.java.txt=>src/test/pkg/PreferenceActivitySubclass.java"", ""export_preference_activity_subclass_explicit.xml=>AndroidManifest.xml"")); }",9b671d27c6267ed7f5d1e385c320047cb1845378,testWarningWhenExplicitlyExportingPreferenceActivitySubclass(),293508,142,151
387095,src_com_android_bluetooth_avrcp_Avrcp.java,144.0,"@java.lang.Override public void onConnected() { android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, ((""BrowsablePlayerListBuilder: "" + (mCurrentPlayer.packageName)) + "" OK"")); mCurrentBrowser.disconnect(); mCurrentBrowser = null; mBrowsePlayerInfoList.add(mCurrentPlayer); com.android.bluetooth.avrcp.MediaPlayerInfo info = getMediaPlayerInfo(mCurrentPlayer.packageName); if (info != null) { com.android.bluetooth.avrcp.MediaController controller = info.getMediaController(); if (controller != null) { addMediaPlayerController(controller.getWrappedInstance()); } } else { addMediaPlayerPackage(mCurrentPlayer.packageName); } mPlayersChanged = true; connectNextPlayer(); }",737b10e6e5ea9217112c2305f16cea29c3890894,"@java.lang.Override public void onConnected() { android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, ((""BrowsablePlayerListBuilder: "" + (mCurrentPlayer.packageName)) + "" OK"")); mCurrentBrowser.disconnect(); mCurrentBrowser = null; synchronized(mBrowsePlayerInfoList) { mBrowsePlayerInfoList.add(mCurrentPlayer); } com.android.bluetooth.avrcp.MediaPlayerInfo info = getMediaPlayerInfo(mCurrentPlayer.packageName); com.android.bluetooth.avrcp.MediaController controller = (info == null) ? null : info.getMediaController(); if (controller != null) { addMediaPlayerController(controller.getWrappedInstance()); } else { addMediaPlayerPackage(mCurrentPlayer.packageName); } mPlayersChanged = true; connectNextPlayer(); }",4791c12e3d9ca76256017644a000d29e9e0501b8,onConnected(),onConnected(),5,144,"@java.lang.Override public void onConnected() { android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, ((""BrowsablePlayerListBuilder: "" + (mCurrentPlayer.packageName)) + "" OK"")); mCurrentBrowser.disconnect(); mCurrentBrowser = null; mBrowsePlayerInfoList.add(mCurrentPlayer); com.android.bluetooth.avrcp.MediaPlayerInfo info = getMediaPlayerInfo(mCurrentPlayer.packageName); com.android.bluetooth.avrcp.MediaController controller = (info == null) ? null : info.getMediaController(); if (controller != null) { addMediaPlayerController(controller.getWrappedInstance()); } else { addMediaPlayerPackage(mCurrentPlayer.packageName); } mPlayersChanged = true; connectNextPlayer(); }",5781b5a6f36784a197503752ceb64c73cc54d5e5,onConnected(),168988,179,170
269973,luni_src_test_java_org_apache_harmony_luni_tests_java_net_URLConnectionTest.java,7.0,"public void test_getDoInput() throws java.io.IOException { assertTrue(""Should be set to true by default"", uc.getDoInput()); fileURLCon.setDoInput(true); assertTrue(""Should have been set to true"", fileURLCon.getDoInput()); uc2.setDoInput(false); assertFalse(""Should have been set to false"", uc2.getDoInput()); fileURLCon.connect(); fileURLCon.getInputStream().close(); uc2.connect(); try { uc2.getInputStream(); } catch (java.lang.Throwable expected) { } }",4bd40dc90ccd698a3df9285be9c31291c1cdeec1,"public void test_getDoInput() throws java.io.IOException { assertTrue(""Should be set to true by default"", uc.getDoInput()); fileURLCon.setDoInput(true); assertTrue(""Should have been set to true"", fileURLCon.getDoInput()); uc2.setDoInput(false); assertFalse(""Should have been set to false"", uc2.getDoInput()); fileURLCon.connect(); fileURLCon.getInputStream().close(); uc2.connect(); try { uc2.getInputStream(); fail(""Should have thrown""); } catch (java.lang.Throwable expected) { } }",94805b6ca34b15605cb4b82a79b6c9243b3a550c,test_getDoInput(),test_getDoInput(),9,7,"public void test_getDoInput() throws java.io.IOException { assertTrue(""Should be set to true by default"", uc.getDoInput()); fileURLCon.setDoInput(true); assertTrue(""Should have been set to true"", fileURLCon.getDoInput()); uc2.setDoInput(false); assertFalse(""Should have been set to false"", uc2.getDoInput()); fileURLCon.connect(); fileURLCon.getInputStream().close(); uc2.connect(); try { uc2.getInputStream(); fail(); } catch (java.lang.Throwable expected) { } }",e76b4fbdec8a0af150c3acd065e29abca2dbe3ad,test_getDoInput(),50397,126,122
90965,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_EventModifiers_CountModifierTest.java,,,,"public void testFieldModification() { logWriter.println(""testFieldModification started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); logWriter.println(""=> Check capability: canWatchFieldModification""); if (!(debuggeeWrapper.vmMirror.canWatchFieldModification())) { logWriter.println(""##WARNING: this VM doesn't possess capability: canWatchFieldModification""); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); return; } org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.setCountableFieldModification(org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.DEBUGGEE_SIGNATURE, JDWPConstants.TypeTag.CLASS, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.WATCHED_FIELD_NAME, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.EVENT_COUNT); checkReplyPacket(reply, ""Failed to set FIELD_MODIFICATION with count modifier""); int requestID = reply.getNextValueAsInt(); assertAllDataRead(reply); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); waitForEvent(JDWPConstants.EventKind.FIELD_MODIFICATION, requestID); int count = getFieldReadWriteCount(); assertEquals(""Invalid event count"", org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.EVENT_COUNT, count); reply = debuggeeWrapper.vmMirror.clearEvent(JDWPConstants.EventKind.FIELD_MODIFICATION, requestID); checkReplyPacket(reply, (""Failed to clear event "" + requestID)); logWriter.println(""testFieldModification done""); }",f0fd03276d2d1d92bf7b2f5acf95c7947ae23a28,,testFieldModification(),3,9,"public void testFieldModification() { logWriter.println(""testFieldModification started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); if (!(canWatchFieldModificationCapability())) { synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); return; } org.apache.harmony.jpda.tests.framework.jdwp.EventBuilder builder = createFieldModificationEventBuilder(JDWPConstants.TypeTag.CLASS, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.DEBUGGEE_SIGNATURE, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.WATCHED_FIELD_NAME); testEventWithCountModifier(builder, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.FIELD_READ_WRITE_COUNT_FIELD_NAME); logWriter.println(""testFieldModification done""); }",d53fcb4208d41efedad75f20b52366c7c66d0618,testFieldModification(),127186,407,211
353609,src_com_android_bluetooth_gatt_AdvertiseManager.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void onAdvertisingSetStarted(int reg_id, int advertiser_id, int status) throws java.lang.Exception { if (com.android.bluetooth.gatt.AdvertiseManager.DBG) android.util.Log.d(com.android.bluetooth.gatt.AdvertiseManager.TAG, (((((""onAdvertisingSetStarted() - reg_id="" + reg_id) + "", advertiser_id="") + advertiser_id) + "", status="") + status)); java.util.Map.Entry<android.os.IBinder, com.android.bluetooth.gatt.AdvertiseManager.AdvertiserBag> entry = findAdvertiser(reg_id); if (entry == null) { android.util.Log.i(com.android.bluetooth.gatt.AdvertiseManager.TAG, (""onAdvertisingSetStarted() - no callback found for reg_id "" + reg_id)); stopAdvertisingSetNative(advertiser_id); return; } android.bluetooth.le.IAdvertisingSetCallback callback = entry.getValue().callback; if (status == 0) { entry.setValue(new com.android.bluetooth.gatt.AdvertiseManager.AdvertiserBag(advertiser_id, entry.getValue().deathRecipient, callback)); } else { android.os.IBinder binder = entry.getKey(); binder.unlinkToDeath(entry.getValue().deathRecipient, 0); mAdvertisers.remove(binder); } callback.onAdvertisingSetStarted(advertiser_id, status); }",2a5169e32871324c22d730ef4945dfc114a134a2,,"onAdvertisingSetStarted(int,int,int)",6,10,"void onAdvertisingSetStarted(int reg_id, int advertiser_id, int status) throws java.lang.Exception { if (com.android.bluetooth.gatt.AdvertiseManager.DBG) android.util.Log.d(com.android.bluetooth.gatt.AdvertiseManager.TAG, (((((""onAdvertisingSetStarted() - reg_id="" + reg_id) + "", advertiser_id="") + advertiser_id) + "", status="") + status)); java.util.Map.Entry<android.os.IBinder, com.android.bluetooth.gatt.AdvertiseManager.AdvertiserInfo> entry = findAdvertiser(reg_id); if (entry == null) { android.util.Log.i(com.android.bluetooth.gatt.AdvertiseManager.TAG, (""onAdvertisingSetStarted() - no callback found for reg_id "" + reg_id)); stopAdvertisingSetNative(advertiser_id); return; } android.bluetooth.le.IAdvertisingSetCallback callback = entry.getValue().callback; if (status == 0) { entry.setValue(new com.android.bluetooth.gatt.AdvertiseManager.AdvertiserInfo(advertiser_id, entry.getValue().deathRecipient, callback)); } else { android.os.IBinder binder = entry.getKey(); binder.unlinkToDeath(entry.getValue().deathRecipient, 0); mAdvertisers.remove(binder); } callback.onAdvertisingSetStarted(advertiser_id, status); }",c043d82a753a6942bb467b8cb385f473e7ec5f5c,"onAdvertisingSetStarted(int,int,int)",464335,340,340
153181,test_422-type-conversion_src_Main.java,30.0,static double $opt$IntToDouble(int a) { if (Main.doThrow) throw new java.lang.Error(); return ((double) (a)); },319d9a03a8d3040a1fd2b61ca5c58572b38aca43,static double $opt$noinline$IntToDouble(int a) { return ((double) (a)); },b3b766e6da80841e15acddfea726287031e5e2be,$opt$IntToDouble(int),$opt$noinline$IntToDouble(int),5,52,static double $opt$noinline$IntToDouble(int a) { if (Main.doThrow) throw new java.lang.Error(); return ((double) (a)); },805719b560f996c07ba1c07768dc59fa412c08be,$opt$noinline$IntToDouble(int),516539,26,40
252478,java_tests_RsTest_src_com_android_rs_test_UT_reduce.java,44.0,"private float[] createInputArrayFloat(int len, int seed) { return createInputArrayFloat(len, new java.util.Random(seed)); }",11695069089696348d48749cea34b24fc7f4bc1e,"private float[] createInputArrayFloat(int len, int seed) { java.util.Random rand = new java.util.Random(seed); float[] array = new float[len]; for (int i = 0; i < len; ++i) array[i] = rand.nextFloat(); return array; }",8c8e1138036db17319dc32ffaee3ccdba9626f35,"createInputArrayFloat(int,int)","createInputArrayFloat(int,int)",7,56,"private float[] createInputArrayFloat(int len, int seed) { return createInputArrayFloat(len, new java.util.Random(seed)); }",11695069089696348d48749cea34b24fc7f4bc1e,"createInputArrayFloat(int,int)",379385,66,33
589433,services_core_java_com_android_server_ConnectivityService.java,54.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void updateUids(com.android.server.connectivity.NetworkAgentInfo nai, android.net.NetworkCapabilities prevNc, android.net.NetworkCapabilities newNc) { final java.util.Set<android.net.UidRange> prevRanges = (null == prevNc) ? null : prevNc.getUids(); final java.util.Set<android.net.UidRange> newRanges = (null == newNc) ? null : newNc.getUids(); final java.util.ArrayList<android.net.UidRange> removedRanges; final java.util.ArrayList<android.net.UidRange> addedRanges; if (null == prevRanges) { if (null == newRanges) { return; } removedRanges = null; addedRanges = new java.util.ArrayList(newRanges); } else if (null == newNc) { removedRanges = new java.util.ArrayList(prevRanges); addedRanges = null; } else { removedRanges = new java.util.ArrayList(); addedRanges = new java.util.ArrayList(); for (final android.net.UidRange prevRange : prevRanges) { if (!(newRanges.contains(prevRange))) { removedRanges.add(prevRange); } } for (final android.net.UidRange newRange : newRanges) { if (!(prevRanges.contains(newRange))) { addedRanges.add(newRange); } } } try { if ((null != removedRanges) && (!(removedRanges.isEmpty()))) { final android.net.UidRange[] removedRangesArray = new android.net.UidRange[removedRanges.size()]; removedRanges.toArray(removedRangesArray); mNetd.removeVpnUidRanges(nai.network.netId, removedRangesArray); } if ((null != addedRanges) && (!(addedRanges.isEmpty()))) { final android.net.UidRange[] addedRangesArray = new android.net.UidRange[addedRanges.size()]; addedRanges.toArray(addedRangesArray); mNetd.addVpnUidRanges(nai.network.netId, addedRangesArray); } } catch (java.lang.Exception e) { com.android.server.ConnectivityService.loge((""Exception in updateUids: "" + e)); } }",b280075d5b696559a8f3e028a6416f7c1fc5ffcf,,"updateUids(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities,android.net.NetworkCapabilities)",8,200,"private void updateUids(com.android.server.connectivity.NetworkAgentInfo nai, android.net.NetworkCapabilities prevNc, android.net.NetworkCapabilities newNc) { java.util.Set<android.net.UidRange> prevRanges = (null == prevNc) ? null : prevNc.getUids(); java.util.Set<android.net.UidRange> newRanges = (null == newNc) ? null : newNc.getUids(); if (null == prevRanges) prevRanges = new android.util.ArraySet(); if (null == newRanges) newRanges = new android.util.ArraySet(); final java.util.Set<android.net.UidRange> prevRangesCopy = new android.util.ArraySet(prevRanges); prevRanges.removeAll(newRanges); newRanges.removeAll(prevRangesCopy); try { if (!(newRanges.isEmpty())) { final android.net.UidRange[] addedRangesArray = new android.net.UidRange[newRanges.size()]; newRanges.toArray(addedRangesArray); mNetd.addVpnUidRanges(nai.network.netId, addedRangesArray); } if (!(prevRanges.isEmpty())) { final android.net.UidRange[] removedRangesArray = new android.net.UidRange[prevRanges.size()]; prevRanges.toArray(removedRangesArray); mNetd.removeVpnUidRanges(nai.network.netId, removedRangesArray); } } catch (java.lang.Exception e) { com.android.server.ConnectivityService.loge((""Exception in updateUids: "" + e)); } }",9f923c10067b3effbb2ebd8c763f1756033da778,"updateUids(com.android.server.connectivity.NetworkAgentInfo,android.net.NetworkCapabilities,android.net.NetworkCapabilities)",166376,497,361
394692,core_java_com_android_internal_os_ZygoteConnection.java,9.0,"public static void applyInvokeWithSystemProperty(com.android.internal.os.ZygoteConnection.Arguments args) { if (((args.invokeWith) == null) && ((args.niceName) != null)) { java.lang.String property = ""wrap."" + (args.niceName); if ((property.length()) > 31) { if ((property.charAt(30)) != '.') { property = property.substring(0, 31); } else { property = property.substring(0, 30); } } args.invokeWith = android.os.SystemProperties.get(property); if (((args.invokeWith) != null) && ((args.invokeWith.length()) == 0)) { args.invokeWith = null; } } }",2db51cdf44179955b78c93f0fd04f7220ea61043,"public static void applyInvokeWithSystemProperty(com.android.internal.os.ZygoteConnection.Arguments args) { if (((args.invokeWith) == null) && ((args.niceName) != null)) { java.lang.String property = ""wrap."" + (args.niceName); args.invokeWith = android.os.SystemProperties.get(property); if (((args.invokeWith) != null) && ((args.invokeWith.length()) == 0)) { args.invokeWith = null; if ((property.length()) > 31) { if ((property.charAt(30)) != '.') { property = property.substring(0, 31); } else { property = property.substring(0, 30); } } args.invokeWith = android.os.SystemProperties.get(property); if (((args.invokeWith) != null) && ((args.invokeWith.length()) == 0)) { args.invokeWith = null; } } } }",9e472fd40ceabaa89681cf4424bb2a37e5b1da8e,applyInvokeWithSystemProperty(com.android.internal.os.ZygoteConnection$Arguments),applyInvokeWithSystemProperty(com.android.internal.os.ZygoteConnection$Arguments),2,9,"public static void applyInvokeWithSystemProperty(com.android.internal.os.ZygoteConnection.Arguments args) { if (((args.invokeWith) == null) && ((args.niceName) != null)) { java.lang.String property = ""wrap."" + (args.niceName); args.invokeWith = android.os.SystemProperties.get(property); if (((args.invokeWith) != null) && ((args.invokeWith.length()) == 0)) { args.invokeWith = null; } } }",77d608a6b01d22791bbd66d63c97d6c8207cc78a,applyInvokeWithSystemProperty(com.android.internal.os.ZygoteConnection$Arguments),464544,203,114
21807,tests_tests_location_src_android_location_cts_LocationTest.java,20.0,"@dalvik.annotation.TestTargetNew(level = dalvik.annotation.TestLevel.COMPLETE, method = ""convert"", args = { double.class, int.class }) public void testConvert_CoordinateToRepresentation() { java.lang.String result; result = android.location.Location.convert((-80.0), Location.FORMAT_DEGREES); assertEquals(""-80"", result); result = android.location.Location.convert((-80.085), Location.FORMAT_MINUTES); assertEquals(""-80:5.1"", result); result = android.location.Location.convert((-80), Location.FORMAT_MINUTES); assertEquals(""-80:0"", result); result = android.location.Location.convert((-80.075), Location.FORMAT_MINUTES); assertEquals(""-80:4.5"", result); result = android.location.Location.convert((-80.075), Location.FORMAT_DEGREES); assertEquals(""-80.075"", result); result = android.location.Location.convert((-80.075), Location.FORMAT_SECONDS); assertEquals(""-80:4:30"", result); try { android.location.Location.convert((-181), Location.FORMAT_SECONDS); fail(""should throw IllegalArgumentException.""); } catch (java.lang.IllegalArgumentException e) { } try { android.location.Location.convert(181, Location.FORMAT_SECONDS); fail(""should throw IllegalArgumentException.""); } catch (java.lang.IllegalArgumentException e) { } try { android.location.Location.convert((-80.075), (-1)); fail(""should throw IllegalArgumentException.""); } catch (java.lang.IllegalArgumentException e) { } }",9e6e0d53ebe58736b882e519f035e1d10293a7c6,"@dalvik.annotation.TestTargetNew(level = dalvik.annotation.TestLevel.COMPLETE, method = ""convert"", args = { double.class, int.class }) public void testConvert_CoordinateToRepresentation() { java.util.Locale defaultLocale = java.util.Locale.getDefault(); if (!(defaultLocale.equals(java.util.Locale.US))) { java.util.Locale.setDefault(java.util.Locale.US); } java.lang.String result; result = android.location.Location.convert((-80.0), Location.FORMAT_DEGREES); assertEquals(""-80"", result); result = android.location.Location.convert((-80.085), Location.FORMAT_MINUTES); assertEquals(""-80:5.1"", result); result = android.location.Location.convert((-80), Location.FORMAT_MINUTES); assertEquals(""-80:0"", result); result = android.location.Location.convert((-80.075), Location.FORMAT_MINUTES); assertEquals(""-80:4.5"", result); result = android.location.Location.convert((-80.075), Location.FORMAT_DEGREES); assertEquals(""-80.075"", result); result = android.location.Location.convert((-80.075), Location.FORMAT_SECONDS); assertEquals(""-80:4:30"", result); try { android.location.Location.convert((-181), Location.FORMAT_SECONDS); fail(""should throw IllegalArgumentException.""); } catch (java.lang.IllegalArgumentException e) { } try { android.location.Location.convert(181, Location.FORMAT_SECONDS); fail(""should throw IllegalArgumentException.""); } catch (java.lang.IllegalArgumentException e) { } try { android.location.Location.convert((-80.075), (-1)); fail(""should throw IllegalArgumentException.""); } catch (java.lang.IllegalArgumentException e) { } if (!(java.util.Locale.getDefault().equals(defaultLocale))) { java.util.Locale.setDefault(defaultLocale); } }",e3b2a0b284026fae7e8587bc11d276320a5035fc,testConvert_CoordinateToRepresentation(),testConvert_CoordinateToRepresentation(),2,20,"@dalvik.annotation.TestTargetNew(level = dalvik.annotation.TestLevel.COMPLETE, method = ""convert"", args = { double.class, int.class }) public void testConvert_CoordinateToRepresentation() { java.text.DecimalFormat df = new java.text.DecimalFormat(""###.#####""); java.lang.String result; result = android.location.Location.convert((-80.0), Location.FORMAT_DEGREES); assertEquals((""-"" + (df.format(80.0))), result); result = android.location.Location.convert((-80.085), Location.FORMAT_MINUTES); assertEquals((""-80:"" + (df.format(5.1))), result); result = android.location.Location.convert((-80), Location.FORMAT_MINUTES); assertEquals((""-80:"" + (df.format(0))), result); result = android.location.Location.convert((-80.075), Location.FORMAT_MINUTES); assertEquals((""-80:"" + (df.format(4.5))), result); result = android.location.Location.convert((-80.075), Location.FORMAT_DEGREES); assertEquals((""-"" + (df.format(80.075))), result); result = android.location.Location.convert((-80.075), Location.FORMAT_SECONDS); assertEquals(""-80:4:30"", result); try { android.location.Location.convert((-181), Location.FORMAT_SECONDS); fail(""should throw IllegalArgumentException.""); } catch (java.lang.IllegalArgumentException e) { } try { android.location.Location.convert(181, Location.FORMAT_SECONDS); fail(""should throw IllegalArgumentException.""); } catch (java.lang.IllegalArgumentException e) { } try { android.location.Location.convert((-80.075), (-1)); fail(""should throw IllegalArgumentException.""); } catch (java.lang.IllegalArgumentException e) { } }",4800b11523704d1513e0dc86d40465db917c0cac,testConvert_CoordinateToRepresentation(),11108,432,421
285003,tools_ahat_src_ObjectHandler.java,4.0,"private static void printArrayElements(com.android.ahat.Doc doc, com.android.ahat.Query query, com.android.ahat.AhatSnapshot snapshot, com.android.tools.perflib.heap.ArrayInstance array) { doc.section(""Array Elements""); doc.table(new com.android.ahat.Column(""Index"", Column.Align.RIGHT), new com.android.ahat.Column(""Value"")); java.util.List<java.lang.Object> elements = java.util.Arrays.asList(array.getValues()); com.android.ahat.SubsetSelector<java.lang.Object> selector = new com.android.ahat.SubsetSelector(query, com.android.ahat.ObjectHandler.ARRAY_ELEMENTS_ID, elements); int i = 0; for (java.lang.Object elem : selector.selected()) { doc.row(com.android.ahat.DocString.format(""%d"", i), com.android.ahat.Value.render(snapshot, elem)); i++; } doc.end(); selector.render(doc); }",ac2e499a7400c059be33ea14ba2cd888f457e5a5,"private static void printArrayElements(com.android.ahat.Doc doc, com.android.ahat.Query query, com.android.ahat.heapdump.AhatSnapshot snapshot, com.android.ahat.heapdump.AhatArrayInstance array) { doc.section(""Array Elements""); doc.table(new com.android.ahat.Column(""Index"", Column.Align.RIGHT), new com.android.ahat.Column(""Value"")); java.util.List<com.android.ahat.heapdump.Value> elements = java.util.Arrays.asList(array.getValues()); com.android.ahat.SubsetSelector<com.android.ahat.heapdump.Value> selector = new com.android.ahat.SubsetSelector(query, com.android.ahat.ObjectHandler.ARRAY_ELEMENTS_ID, elements); int i = 0; for (com.android.ahat.heapdump.Value elem : selector.selected()) { doc.row(com.android.ahat.DocString.format(""%d"", i), com.android.ahat.Summarizer.summarize(elem)); i++; } doc.end(); selector.render(doc); }",1b3c4de21e9b715535e03f43f8916185cf510244,"printArrayElements(com.android.ahat.Doc,com.android.ahat.Query,com.android.ahat.AhatSnapshot,com.android.tools.perflib.heap.ArrayInstance)","printArrayElements(com.android.ahat.Doc,com.android.ahat.Query,com.android.ahat.heapdump.AhatSnapshot,com.android.ahat.heapdump.AhatArrayInstance)",7,2,"private static void printArrayElements(com.android.ahat.Doc doc, com.android.ahat.Query query, com.android.ahat.heapdump.AhatArrayInstance array) { doc.section(""Array Elements""); doc.table(new com.android.ahat.Column(""Index"", Column.Align.RIGHT), new com.android.ahat.Column(""Value"")); java.util.List<com.android.ahat.heapdump.Value> elements = array.getValues(); com.android.ahat.SubsetSelector<com.android.ahat.heapdump.Value> selector = new com.android.ahat.SubsetSelector(query, com.android.ahat.ObjectHandler.ARRAY_ELEMENTS_ID, elements); int i = 0; for (com.android.ahat.heapdump.Value elem : selector.selected()) { doc.row(com.android.ahat.DocString.format(""%d"", i), com.android.ahat.Summarizer.summarize(elem)); i++; } doc.end(); selector.render(doc); }",991c1895da5363f5f60422a074627909e0d5b6e1,"printArrayElements(com.android.ahat.Doc,com.android.ahat.Query,com.android.ahat.heapdump.AhatArrayInstance)",183621,264,241
222751,luni_src_test_java_libcore_java_lang_IntegerTest.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testParseUnsignedInt() { int[] vals = new int[]{ 0, 1, 23, 456, 2147483647, -2147483648, -1 }; for (int val : vals) { assertEquals(val, java.lang.Integer.parseUnsignedInt(java.lang.Integer.toBinaryString(val), 2)); assertEquals(val, java.lang.Integer.parseUnsignedInt(java.lang.Integer.toOctalString(val), 8)); assertEquals(val, java.lang.Integer.parseUnsignedInt(java.lang.Integer.toUnsignedString(val))); assertEquals(val, java.lang.Integer.parseUnsignedInt(java.lang.Integer.toHexString(val), 16)); for (int radix = java.lang.Character.MIN_RADIX; radix < (java.lang.Character.MAX_RADIX); ++radix) { assertEquals(val, java.lang.Integer.parseUnsignedInt(java.lang.Integer.toUnsignedString(val, radix), radix)); } } try { java.lang.Integer.parseUnsignedInt(""-1""); } catch (java.lang.NumberFormatException expected) { } try { java.lang.Integer.parseUnsignedInt(""123"", 2); } catch (java.lang.NumberFormatException expected) { } }",c5764272045744a7f0cfb7c1770881ec8642a994,,testParseUnsignedInt(),5,3,"public void testParseUnsignedInt() { int[] vals = new int[]{ 0, 1, 23, 456, 2147483647, -2147483648, -1 }; for (int val : vals) { assertEquals(val, java.lang.Integer.parseUnsignedInt(java.lang.Integer.toBinaryString(val), 2)); assertEquals(val, java.lang.Integer.parseUnsignedInt(java.lang.Integer.toOctalString(val), 8)); assertEquals(val, java.lang.Integer.parseUnsignedInt(java.lang.Integer.toUnsignedString(val))); assertEquals(val, java.lang.Integer.parseUnsignedInt(java.lang.Integer.toHexString(val), 16)); for (int radix = java.lang.Character.MIN_RADIX; radix <= (java.lang.Character.MAX_RADIX); ++radix) { assertEquals(val, java.lang.Integer.parseUnsignedInt(java.lang.Integer.toUnsignedString(val, radix), radix)); } } try { java.lang.Integer.parseUnsignedInt(""-1""); fail(); } catch (java.lang.NumberFormatException expected) { } try { java.lang.Integer.parseUnsignedInt(""123"", 2); fail(); } catch (java.lang.NumberFormatException expected) { } try { java.lang.Integer.parseUnsignedInt(null); fail(); } catch (java.lang.NumberFormatException expected) { } try { java.lang.Integer.parseUnsignedInt(""0"", ((java.lang.Character.MAX_RADIX) + 1)); fail(); } catch (java.lang.NumberFormatException expected) { } try { java.lang.Integer.parseUnsignedInt(""0"", ((java.lang.Character.MIN_RADIX) - 1)); fail(); } catch (java.lang.NumberFormatException expected) { } }",ec37e24667ceabbe8facede7a80edfa0e6c51750,testParseUnsignedInt(),352565,256,370
119069,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_fixture_GradleTestProject.java,25.0,"public com.android.builder.model.AndroidProject executeAndReturnModel(java.lang.String... tasks) { return execute(java.util.Collections.<java.lang.String>emptyList(), true, tasks); }",7058f47f2c784a12c87080375e0dd3f4498e43d9,"@com.android.annotations.Nullable public com.android.builder.model.AndroidProject executeAndReturnModel(java.lang.String... tasks) { return execute(java.util.Collections.<java.lang.String>emptyList(), true, tasks); }",9a4d21c06300f759573a1a0eb89d1cf0d1ea7cee,executeAndReturnModel(java.lang.String[]),executeAndReturnModel(java.lang.String[]),3,23,"@com.android.annotations.NonNull public com.android.builder.model.AndroidProject executeAndReturnModel(java.lang.String... tasks) { return execute(java.util.Collections.<java.lang.String>emptyList(), true, tasks); }",5da24225cca25a72824d17f5cbf1f4e003ffb59c,executeAndReturnModel(java.lang.String[]),369701,55,55
134852,jack_src_com_android_jack_library_InputJackLibraryCodec.java,3.0,"@java.lang.Override public void checkValue(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull com.android.jack.library.InputJackLibrary data) { }",0e75a2defa9af0d3b47a5645424f5b859246a15c,"@java.lang.Override public void checkValue(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull com.android.jack.library.InputLibrary data) { }",863553b61c05bd46852abc72f02d096d60f9965d,"checkValue(com.android.sched.util.codec.CodecContext,com.android.jack.library.InputJackLibrary)","checkValue(com.android.sched.util.codec.CodecContext,com.android.jack.library.InputLibrary)",2,1,"@java.lang.Override public void checkValue(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull com.android.jack.library.InputJackLibrary data) { }",0e75a2defa9af0d3b47a5645424f5b859246a15c,"checkValue(com.android.sched.util.codec.CodecContext,com.android.jack.library.InputJackLibrary)",412597,50,51
636542,tzlookup_generator_src_main_java_com_android_libcore_timezone_tzlookup_zonetree_CountryZoneTree.java,,,,public void compressTree() { class CompressionVisitor implements com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNodeVisitor { @java.lang.Override public void visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode node) { if ((node.getParent()) == null) { return; } if ((node.getChildrenCount()) == 1) { com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode child = node.getChildren().iterator().next(); node.removeChild(child); int periodCountAdjustment = child.getPeriodCount(); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode descendant = child; while ((descendant.getChildrenCount()) == 1) { descendant = descendant.getChildren().iterator().next(); periodCountAdjustment += descendant.getPeriodCount(); } for (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode newChild : descendant.getChildren()) { node.addChild(newChild); } node.adjustPeriodCount(periodCountAdjustment); } } } root.visitSelfThenChildrenRecursive(new CompressionVisitor()); },aef2648046a074e184dde41ff1cafa78d3472436,,compressTree(),4,11,private static void compressTree(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode root) { class CompressionVisitor implements com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNodeVisitor { @java.lang.Override public void visit(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode node) { if (node.isRoot()) { return; } if ((node.getChildrenCount()) == 1) { com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode child = node.getChildren().iterator().next(); node.removeChild(child); int periodCountAdjustment = child.getPeriodCount(); com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode descendant = child; while ((descendant.getChildrenCount()) == 1) { descendant = descendant.getChildren().iterator().next(); periodCountAdjustment += descendant.getPeriodCount(); } for (com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree.ZoneNode newChild : descendant.getChildren()) { node.addChild(newChild); } node.adjustPeriodCount(periodCountAdjustment); } } } root.visitSelfThenChildrenRecursive(new CompressionVisitor()); },4451651b421b637e33708ede03d5e6d94367eb26,compressTree(com.android.libcore.timezone.tzlookup.zonetree.CountryZoneTree$ZoneNode),153178,280,303
70274,java_src_main_java_com_google_protobuf_nano_Extension.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"java.util.List<com.google.protobuf.nano.UnknownFieldData> setValueTo(T value, java.util.List<com.google.protobuf.nano.UnknownFieldData> unknownFields) { if (unknownFields != null) { for (int i = (unknownFields.size()) - 1; i >= 0; i--) { if ((unknownFields.get(i).tag) == (tag)) { unknownFields.remove(i); } } } if (value == null) { return unknownFields; } if (unknownFields == null) { unknownFields = new java.util.ArrayList<com.google.protobuf.nano.UnknownFieldData>(); } unknownFields.add(writeData(value)); return unknownFields; }",c8b8d032d1b67d96acfcc2f0f684c0465e3df2b2,,"setValueTo(java.lang.Object,java.util.List)",6,11,"final java.util.List<com.google.protobuf.nano.UnknownFieldData> setValueTo(T value, java.util.List<com.google.protobuf.nano.UnknownFieldData> unknownFields) { if (unknownFields != null) { for (int i = (unknownFields.size()) - 1; i >= 0; i--) { if (isMatch(unknownFields.get(i).tag)) { unknownFields.remove(i); } } } if (value != null) { if (unknownFields == null) { unknownFields = new java.util.ArrayList<com.google.protobuf.nano.UnknownFieldData>(); } if (repeated) { writeDataInto(value, unknownFields); } else { unknownFields.add(writeData(value)); } } return (unknownFields.size()) == 0 ? null : unknownFields; }",df8d553cd9ce3fc6646beaa001aa24d1be3a353b,"setValueTo(java.lang.Object,java.util.List)",250704,157,183
293986,telecomm_java_android_telecom_ConnectionService.java,13.0,"@java.lang.Override public void rejectWithMessage(java.lang.String callId, java.lang.String message) { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = message; mHandler.obtainMessage(android.telecom.ConnectionService.MSG_REJECT_WITH_MESSAGE, args).sendToTarget(); }",b422176dd78bc692dc58ad271d30cbe12779cdff,"@java.lang.Override public void rejectWithMessage(java.lang.String callId, java.lang.String message, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startExternalSession(sessionInfo, android.telecom.ConnectionService.SESSION_REJECT_MESSAGE); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = message; args.arg3 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_REJECT_WITH_MESSAGE, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }",96ea32324b4b892452cdab2e7ad2ec69731bb2cd,"rejectWithMessage(java.lang.String,java.lang.String)","rejectWithMessage(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)",8,2,"@java.lang.Override public void rejectWithMessage(java.lang.String callId, java.lang.String message, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startSession(sessionInfo, android.telecom.ConnectionService.SESSION_REJECT_MESSAGE); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = message; args.arg3 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_REJECT_WITH_MESSAGE, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }",110e8ca66c8fc721f8145dc93ccfc561c2d2e1bc,"rejectWithMessage(java.lang.String,java.lang.String,android.telecom.Logging.Session$Info)",425172,180,179
318329,tests_src_com_android_networkrecommendation_WifiWakeupControllerTest.java,,,,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mContentResolver = android.support.test.InstrumentationRegistry.getTargetContext().getContentResolver(); when(mContext.getContentResolver()).thenReturn(mContentResolver); Settings.Global.putInt(mContentResolver, Settings.Global.WIFI_WAKEUP_ENABLED, 1); mWifiWakeupController = new com.android.networkrecommendation.WifiWakeupController(mContext, android.os.Looper.getMainLooper()); }",dbaee3aaac89ad62fa9d579a562c5d70f5cae06a,,setUp(),11,0,"@org.junit.Before public void setUp() throws java.lang.Exception { org.mockito.MockitoAnnotations.initMocks(this); mContentResolver = android.support.test.InstrumentationRegistry.getTargetContext().getContentResolver(); mWifiWakeupEnabledOriginalValue = Settings.Global.getInt(mContentResolver, Settings.Global.WIFI_WAKEUP_ENABLED, 0); Settings.Global.putInt(mContentResolver, Settings.Global.WIFI_WAKEUP_ENABLED, 1); mWifiWakeupController = new com.android.networkrecommendation.WifiWakeupController(mContext, mContentResolver, android.os.Looper.getMainLooper()); mWifiWakeupController.start(); }",b20db97421473a57e672a18fe2838b7e457c9973,setUp(),10817,111,137
81416,tests_tests_renderscript_src_android_renderscript_cts_TestClz.java,,,,"private void verifyResultsClzInt2(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { int[] arrayInValue = new int[(INPUTSIZE) * 2]; inValue.copyTo(arrayInValue); int[] arrayOut = new int[(INPUTSIZE) * 2]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 2; j++) { android.renderscript.cts.TestClz.ArgumentsIntInt args = new android.renderscript.cts.TestClz.ArgumentsIntInt(); args.inValue = arrayInValue[((i * 2) + j)]; android.renderscript.cts.CoreMathVerifier.computeClz(args); int actualOut = arrayOut[((i * 2) + j)]; int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; float ulpf; ulpf = (java.lang.Math.ulp(args.out)) * ulf; assertEquals((((((((((((((((((""Incorrect output for checkClzInt2"" + (relaxed ? ""_relaxed"" : """")) + "" @["") + i) + "", "") + j) + ""] with ulf:"") + ulf) + "".\n"") + ""Input inValue:"") + (args.inValue)) + ""\n"") + ""Expected output out:"") + (args.out)) + ""\n"") + ""Actual output out:"") + actualOut) + ""\n""), args.out, actualOut, ulpf); } } }",a795bdbd60468172b326db1e1970aea0b5e133bb,,"verifyResultsClzInt2(android.renderscript.Allocation,android.renderscript.Allocation,boolean)",9,19,"private void verifyResultsClzInt2Int2(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { int[] arrayInValue = new int[(INPUTSIZE) * 2]; inValue.copyTo(arrayInValue); int[] arrayOut = new int[(INPUTSIZE) * 2]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 2; j++) { android.renderscript.cts.TestClz.ArgumentsIntInt args = new android.renderscript.cts.TestClz.ArgumentsIntInt(); args.inValue = arrayInValue[((i * 2) + j)]; android.renderscript.cts.CoreMathVerifier.computeClz(args); int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; boolean valid = true; int neededUlf = 0; if ((args.out) != (arrayOut[((i * 2) + j)])) { valid = false; } if (!valid) { java.lang.StringBuilder message = new java.lang.StringBuilder(); message.append(java.lang.String.format(""Input inValue: %d"", args.inValue)); message.append(""\n""); message.append(java.lang.String.format(""Expected output out: %d"", args.out)); message.append(""\n""); message.append(java.lang.String.format(""Actual output out: %d"", arrayOut[((i * 2) + j)])); if ((args.out) != (arrayOut[((i * 2) + j)])) { message.append("" FAIL""); } message.append(""\n""); assertTrue((((""Incorrect output for checkClzInt2Int2"" + (relaxed ? ""_relaxed"" : """")) + "":\n"") + (message.toString())), valid); } } } }",a7596d3e71b19fc1b574e68737f9d733d6fa2182,"verifyResultsClzInt2Int2(android.renderscript.Allocation,android.renderscript.Allocation,boolean)",143465,375,432
178730,tools_srcgen_currysrc_src_main_java_com_google_currysrc_api_transform_ast_EnumConstantLocater.java,,,,@java.lang.Override public com.google.currysrc.api.transform.ast.BodyDeclaration find(com.google.currysrc.api.transform.ast.CompilationUnit cu) { com.google.currysrc.api.transform.ast.AbstractTypeDeclaration typeDeclaration = enumTypeLocater.find(cu); if ((typeDeclaration == null) || (!(typeDeclaration instanceof com.google.currysrc.api.transform.ast.EnumDeclaration))) { return null; } for (com.google.currysrc.api.transform.ast.EnumConstantDeclaration enumConstantDeclaration : ((java.util.List<com.google.currysrc.api.transform.ast.EnumConstantDeclaration>) (((com.google.currysrc.api.transform.ast.EnumDeclaration) (typeDeclaration)).enumConstants()))) { if (enumConstantDeclaration.getName().getFullyQualifiedName().equals(constantName)) { return enumConstantDeclaration; } } return null; },9ed4a52d3b5ebd182eb2ab865134d06a2fb8eca3,,find(com.google.currysrc.api.transform.ast.CompilationUnit),4,2,@java.lang.Override public org.eclipse.jdt.core.dom.BodyDeclaration find(org.eclipse.jdt.core.dom.CompilationUnit cu) { org.eclipse.jdt.core.dom.AbstractTypeDeclaration typeDeclaration = enumTypeLocater.find(cu); if ((typeDeclaration == null) || (!(typeDeclaration instanceof org.eclipse.jdt.core.dom.EnumDeclaration))) { return null; } for (org.eclipse.jdt.core.dom.EnumConstantDeclaration enumConstantDeclaration : ((java.util.List<org.eclipse.jdt.core.dom.EnumConstantDeclaration>) (((org.eclipse.jdt.core.dom.EnumDeclaration) (typeDeclaration)).enumConstants()))) { if (enumConstantDeclaration.getName().getFullyQualifiedName().equals(constantName)) { return enumConstantDeclaration; } } return null; },b6783e0f7fb85398e6eb834a800b37bd552c48b6,find(org.eclipse.jdt.core.dom.CompilationUnit),403767,213,185
111283,build-system_project-test_src_main_java_com_android_build_tests_ProjectTest.java,0.0,"private static void searchForProject(junit.framework.TestSuite suite, java.io.File folder, java.io.File sdkFolder, java.io.File ndkFolder) { java.io.File buildGradle = new java.io.File(folder, ""build.gradle""); if (buildGradle.isFile()) { suite.addTest(com.android.build.tests.ProjectTest.createTest(folder, sdkFolder, ndkFolder)); } }",ef79cf439b49dfa4f8fd1d7a20dc2a59218e477d,"private static void searchForProject(junit.framework.TestSuite suite, java.io.File folder, java.io.File sdkFolder, java.io.File ndkFolder, java.lang.String taskName, java.util.List<java.lang.String> args) { java.io.File buildGradle = new java.io.File(folder, ""build.gradle""); if (buildGradle.isFile()) { suite.addTest(com.android.build.tests.ProjectTest.createTest(folder, sdkFolder, ndkFolder, taskName, args)); } }",abd4fb67759fe2718b21d5688b5bf49738729e4b,"searchForProject(junit.framework.TestSuite,java.io.File,java.io.File,java.io.File)","searchForProject(junit.framework.TestSuite,java.io.File,java.io.File,java.io.File,java.lang.String,java.util.List)",3,0,"private static void searchForProject(@com.android.annotations.NonNull junit.framework.TestSuite suite, @com.android.annotations.NonNull java.io.File folder, @com.android.annotations.NonNull java.io.File sdkFolder, @com.android.annotations.NonNull java.io.File ndkFolder, @com.android.annotations.NonNull java.lang.String taskName) { java.io.File buildGradle = new java.io.File(folder, ""build.gradle""); if (buildGradle.isFile()) { suite.addTest(com.android.build.tests.ProjectTest.createTest(folder, sdkFolder, ndkFolder, taskName)); } }",85651b684a5796efce0332cfb9f4e1b19ed4a075,"searchForProject(junit.framework.TestSuite,java.io.File,java.io.File,java.io.File,java.lang.String)",468256,126,149
533156,src_java_com_android_internal_telephony_ims_ImsResolver.java,11.0,"public com.android.ims.internal.IImsServiceController getImsServiceControllerAndListen(int slotId, int feature, com.android.ims.internal.IImsServiceFeatureListener callback) { if ((((slotId < 0) || (slotId >= (mNumSlots))) || (feature <= (android.telephony.ims.feature.ImsFeature.INVALID))) || (feature >= (android.telephony.ims.feature.ImsFeature.MAX))) { return null; } com.android.internal.telephony.ims.ImsServiceController controller; synchronized(mBoundServicesLock) { android.util.SparseArray<com.android.internal.telephony.ims.ImsServiceController> services = mBoundImsServicesByFeature.get(slotId); if (services == null) { return null; } controller = services.get(feature); } if (controller != null) { controller.addImsServiceFeatureListener(callback); return controller.getImsServiceController(); } return null; }",f30df0c34902b7e8c7f73758e23af3e7e5c10de4,"@com.android.internal.annotations.VisibleForTesting public com.android.internal.telephony.ims.ImsServiceController getImsServiceControllerAndListen(int slotId, int feature, com.android.ims.internal.IImsServiceFeatureListener callback) { if ((slotId < 0) || (slotId >= (mNumSlots))) { return null; } com.android.internal.telephony.ims.ImsServiceController controller; synchronized(mBoundServicesLock) { android.util.SparseArray<com.android.internal.telephony.ims.ImsServiceController> services = mBoundImsServicesByFeature.get(slotId); if (services == null) { return null; } controller = services.get(feature); } if (controller != null) { controller.addImsServiceFeatureListener(callback); return controller; } return null; }",cde93f8d46cfd87d1859ef782c8f1ef4063cefc8,"getImsServiceControllerAndListen(int,int,com.android.ims.internal.IImsServiceFeatureListener)","getImsServiceControllerAndListen(int,int,com.android.ims.internal.IImsServiceFeatureListener)",5,33,"@com.android.internal.annotations.VisibleForTesting public com.android.internal.telephony.ims.ImsServiceController getImsServiceControllerAndListen(int slotId, int feature, com.android.ims.internal.IImsServiceFeatureCallback callback) { if ((slotId < 0) || (slotId >= (mNumSlots))) { return null; } com.android.internal.telephony.ims.ImsServiceController controller; synchronized(mBoundServicesLock) { android.util.SparseArray<com.android.internal.telephony.ims.ImsServiceController> services = mBoundImsServicesByFeature.get(slotId); if (services == null) { return null; } controller = services.get(feature); } if (controller != null) { controller.addImsServiceFeatureListener(callback); return controller; } return null; }",1d9da17c64121b63ba7f87930ff947dd04829203,"getImsServiceControllerAndListen(int,int,com.android.ims.internal.IImsServiceFeatureCallback)",102763,189,189
441634,telephony_java_android_telephony_MbmsDownloadManager.java,14.0,"public static android.telephony.MbmsDownloadManager create(android.content.Context context, android.telephony.mbms.MbmsDownloadManagerCallback listener, int subscriptionId) throws android.telephony.mbms.MbmsException { android.telephony.MbmsDownloadManager mdm = new android.telephony.MbmsDownloadManager(context, listener, subscriptionId); mdm.bindAndInitialize(); return mdm; }",9b1e358f9b51a829744bd0fd80a96c6396f68915,"public static android.telephony.MbmsDownloadManager create(android.content.Context context, android.telephony.mbms.MbmsDownloadManagerCallback listener, int subscriptionId) throws android.telephony.mbms.MbmsException { if (android.telephony.MbmsDownloadManager.sIsInitialized) { throw new android.telephony.mbms.MbmsException(MbmsException.InitializationErrors.ERROR_DUPLICATE_INITIALIZE); } android.telephony.MbmsDownloadManager mdm = new android.telephony.MbmsDownloadManager(context, listener, subscriptionId); mdm.bindAndInitialize(); android.telephony.MbmsDownloadManager.sIsInitialized = true; return mdm; }",09b88b7859a4d831d109ad18fb9a35eaea5c2b58,"create(android.content.Context,android.telephony.mbms.MbmsDownloadManagerCallback,int)","create(android.content.Context,android.telephony.mbms.MbmsDownloadManagerCallback,int)",6,13,"public static android.telephony.MbmsDownloadManager create(android.content.Context context, android.telephony.mbms.MbmsDownloadManagerCallback listener, int subscriptionId) throws android.telephony.mbms.MbmsException { if (!(android.telephony.MbmsDownloadManager.sIsInitialized.compareAndSet(false, true))) { throw new android.telephony.mbms.MbmsException(MbmsException.InitializationErrors.ERROR_DUPLICATE_INITIALIZE); } android.telephony.MbmsDownloadManager mdm = new android.telephony.MbmsDownloadManager(context, listener, subscriptionId); try { mdm.bindAndInitialize(); } catch (android.telephony.mbms.MbmsException e) { android.telephony.MbmsDownloadManager.sIsInitialized.set(false); throw e; } return mdm; }",870befe1ac5dbff2dd49fe575c6880698df94ccc,"create(android.content.Context,android.telephony.mbms.MbmsDownloadManagerCallback,int)",409237,143,173
90965,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_EventModifiers_CountModifierTest.java,,,,"public void testFieldAccess() { logWriter.println(""testFieldAccess started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); logWriter.println(""=> Check capability: canWatchFieldAccess""); if (!(debuggeeWrapper.vmMirror.canWatchFieldAccess())) { logWriter.println(""##WARNING: this VM doesn't possess capability: canWatchFieldAccess""); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); return; } org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket reply = debuggeeWrapper.vmMirror.setCountableFieldAccess(org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.DEBUGGEE_SIGNATURE, JDWPConstants.TypeTag.CLASS, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.WATCHED_FIELD_NAME, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.EVENT_COUNT); checkReplyPacket(reply, ""Failed to set FIELD_ACCESS with count modifier""); int requestID = reply.getNextValueAsInt(); assertAllDataRead(reply); synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); waitForEvent(JDWPConstants.EventKind.FIELD_ACCESS, requestID); int count = getFieldReadWriteCount(); assertEquals(""Invalid event count"", org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.EVENT_COUNT, count); reply = debuggeeWrapper.vmMirror.clearEvent(JDWPConstants.EventKind.FIELD_ACCESS, requestID); checkReplyPacket(reply, (""Failed to clear event "" + requestID)); logWriter.println(""testFieldAccess done""); }",700be7c380178e9f97c323a339a094939dcbd64e,,testFieldAccess(),3,8,"public void testFieldAccess() { logWriter.println(""testFieldAccess started""); synchronizer.receiveMessage(JPDADebuggeeSynchronizer.SGNL_READY); if (!(canWatchFieldAccessCapability())) { synchronizer.sendMessage(JPDADebuggeeSynchronizer.SGNL_CONTINUE); return; } org.apache.harmony.jpda.tests.framework.jdwp.EventBuilder builder = createFieldAccessEventBuilder(JDWPConstants.TypeTag.CLASS, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.DEBUGGEE_SIGNATURE, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.WATCHED_FIELD_NAME); testEventWithCountModifier(builder, org.apache.harmony.jpda.tests.jdwp.EventModifiers.CountModifierTest.FIELD_READ_WRITE_COUNT_FIELD_NAME); logWriter.println(""testFieldAccess done""); }",5792b8788f1b00897fa7fcd9aa83209cddc516ca,testFieldAccess(),127179,397,206
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,,"@java.lang.Override public byte[] receive() throws java.io.IOException { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]; int bytesRead = 0; try { bytesRead = android.system.Os.read(mFd, in, 0, android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN); } catch (android.system.ErrnoException e) { e.rethrowAsIOException(); } return java.util.Arrays.copyOfRange(in, 0, bytesRead); }",3447456d8135b7831e05f30d0f695f8b46df5fc5,,receive(),15,20,"@java.lang.Override public byte[] receive() throws java.lang.Exception { byte[] in = new byte[android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN]; int bytesRead = android.system.Os.read(mFd, in, 0, android.net.cts.IpSecBaseTest.DATA_BUFFER_LEN); return java.util.Arrays.copyOfRange(in, 0, bytesRead); }",761ea10acc4a524e45186d2b974739cbec373045,receive(),381469,120,95
414159,dx_src_com_android_dx_dex_file_CallSiteIdItem.java,,,,"@java.lang.Override public void writeTo(com.android.dx.dex.file.DexFile file, com.android.dx.util.AnnotatedOutput out) { int offset = data.getAbsoluteOffset(); if (out.annotates()) { out.annotate(0, (((indexString()) + ' ') + (callSite.toString()))); out.annotate(4, (""call_site_off: "" + (com.android.dx.util.Hex.u4(offset)))); } out.writeInt(offset); }",d98dd48fb253cd9ec95dfb81bd26b2cc8f1d2df7,,"writeTo(com.android.dx.dex.file.DexFile,com.android.dx.util.AnnotatedOutput)",20,3,"@java.lang.Override public void writeTo(com.android.dx.dex.file.DexFile file, com.android.dx.util.AnnotatedOutput out) { int offset = data.getAbsoluteOffset(); if (out.annotates()) { out.annotate(0, (((indexString()) + ' ') + (invokeDynamicRef.toString()))); out.annotate(4, (""call_site_off: "" + (com.android.dx.util.Hex.u4(offset)))); } out.writeInt(offset); }",5f36aeb6e179935bdfbecc33c65738b77a32a0a6,"writeTo(com.android.dx.dex.file.DexFile,com.android.dx.util.AnnotatedOutput)",238717,113,114
252478,java_tests_RsTest_src_com_android_rs_test_UT_math_agree.java,21.0,"private com.android.rs.test.Short3 pack_s3(short[] val) { assert (val.length) == 3; return new com.android.rs.test.Short3(val[0], val[1], val[2]); }",44a81974ca13854b31fb8f0c90b5ba3093cf22df,"private android.renderscript.Short3 pack_s3(short[] val) { assert (val.length) == 3; return new android.renderscript.Short3(val[0], val[1], val[2]); }",a6a4de5790639b920edd2a188f030d28a5af6457,pack_s3(short[]),pack_s3(short[]),7,21,"private com.android.rs.test.Short3 pack_s3(short[] val) { assert (val.length) == 3; return new com.android.rs.test.Short3(val[0], val[1], val[2]); }",44a81974ca13854b31fb8f0c90b5ba3093cf22df,pack_s3(short[]),379469,43,49
627648,tests_robotests_src_com_android_settings_applications_PictureInPictureSettingsTest.java,0.0,"@org.junit.Test public void testCollectPipApps() { android.content.pm.PackageInfo primaryP1 = createPackage(""Calculator"", true); android.content.pm.PackageInfo primaryP2 = createPackage(""Clock"", false); android.content.pm.PackageInfo profileP1 = createPackage(""Calculator"", false); android.content.pm.PackageInfo profileP2 = createPackage(""Clock"", true); mPrimaryUserPackages.add(primaryP1); mPrimaryUserPackages.add(primaryP2); mProfileUserPackages.add(profileP1); mProfileUserPackages.add(profileP2); java.util.ArrayList<android.util.Pair<android.content.pm.ApplicationInfo, java.lang.Integer>> apps = mFragment.collectPipApps(com.android.settings.applications.PictureInPictureSettingsTest.PRIMARY_USER_ID); assertThat(containsPackages(apps, primaryP1, profileP2)).isTrue(); assertThat(containsPackages(apps, primaryP2, profileP1)).isFalse(); }",500f6029899a250058b881cd28988e558b945fac,"@com.android.settings.applications.Ignore(""b/73892555"") @org.junit.Test public void testCollectPipApps() { android.content.pm.PackageInfo primaryP1 = createPackage(""Calculator"", true); android.content.pm.PackageInfo primaryP2 = createPackage(""Clock"", false); android.content.pm.PackageInfo profileP1 = createPackage(""Calculator"", false); android.content.pm.PackageInfo profileP2 = createPackage(""Clock"", true); mPrimaryUserPackages.add(primaryP1); mPrimaryUserPackages.add(primaryP2); mProfileUserPackages.add(profileP1); mProfileUserPackages.add(profileP2); java.util.ArrayList<android.util.Pair<android.content.pm.ApplicationInfo, java.lang.Integer>> apps = mFragment.collectPipApps(com.android.settings.applications.PictureInPictureSettingsTest.PRIMARY_USER_ID); assertThat(containsPackages(apps, primaryP1, profileP2)).isTrue(); assertThat(containsPackages(apps, primaryP2, profileP1)).isFalse(); }",31dba6482e710a2284915e1ad471735596364345,testCollectPipApps(),testCollectPipApps(),2,0,"@org.junit.Ignore(""b/73892555"") @org.junit.Test public void testCollectPipApps() { android.content.pm.PackageInfo primaryP1 = createPackage(""Calculator"", true); android.content.pm.PackageInfo primaryP2 = createPackage(""Clock"", false); android.content.pm.PackageInfo profileP1 = createPackage(""Calculator"", false); android.content.pm.PackageInfo profileP2 = createPackage(""Clock"", true); mPrimaryUserPackages.add(primaryP1); mPrimaryUserPackages.add(primaryP2); mProfileUserPackages.add(profileP1); mProfileUserPackages.add(profileP2); java.util.ArrayList<android.util.Pair<android.content.pm.ApplicationInfo, java.lang.Integer>> apps = mFragment.collectPipApps(com.android.settings.applications.PictureInPictureSettingsTest.PRIMARY_USER_ID); assertThat(containsPackages(apps, primaryP1, profileP2)).isTrue(); assertThat(containsPackages(apps, primaryP2, profileP1)).isFalse(); }",9586d3902aadba308d9547f1858aadf9a5624b53,testCollectPipApps(),190911,238,233
298006,wifi_java_android_net_wifi_hotspot2_pps_HomeSP.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean validate() { if (((fqdn) == null) || (fqdn.isEmpty())) { android.util.Log.d(android.net.wifi.hotspot2.pps.HomeSP.TAG, ""Missing FQDN""); return false; } if (((friendlyName) == null) || (friendlyName.isEmpty())) { android.util.Log.d(android.net.wifi.hotspot2.pps.HomeSP.TAG, ""Missing friendly name""); return false; } return true; }",b8937e9c0ad1fe2ccebfd6fc6841e798d2d2fd89,,validate(),8,2,"public boolean validate() { if (android.text.TextUtils.isEmpty(fqdn)) { android.util.Log.d(android.net.wifi.hotspot2.pps.HomeSP.TAG, ""Missing FQDN""); return false; } if (android.text.TextUtils.isEmpty(friendlyName)) { android.util.Log.d(android.net.wifi.hotspot2.pps.HomeSP.TAG, ""Missing friendly name""); return false; } return true; }",9d2609caef2bc0a1a39559a8db78752ab4add6f2,validate(),484601,108,104
124160,sched_src_com_android_sched_vfs_MessageDigestFS.java,,,,@java.lang.Override @javax.annotation.Nonnull public com.android.sched.util.location.Location getLocation() { return vFile.getLocation(); },24fa24727c681351850d7a155344a5f9f2ebf11a,,getLocation(),5,16,@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.VPath getPath() { return wrappedFile.getPath(); },95847fa8b00e65fec44313c2b502328145f65478,getPath(),215270,35,34
243440,test_458-checker-instruction-simplification_src_Main.java,34.0,public static int booleanFieldEqualZero() { return (Main.booleanField) != (Main.$inline$false()) ? 13 : 54; },14e14346b1baf6e09985fd838d18a620716d5053,public static int booleanFieldEqualZero() { if (Main.doThrow) { throw new java.lang.Error(); } return (Main.booleanField) != (Main.$inline$false()) ? 13 : 54; },2ff318718a7781aaac2f7be53d788e5356bc7d20,booleanFieldEqualZero(),booleanFieldEqualZero(),3,8,public static int $noinline$booleanFieldEqualZero() { if (Main.doThrow) { throw new java.lang.Error(); } return (Main.booleanField) != (Main.$inline$false()) ? 13 : 54; },430cd504d39536f66f845a3cd0430e6da7af7999,$noinline$booleanFieldEqualZero(),118179,50,55
466677,services_core_java_com_android_server_IpSecService.java,51.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void checkInetAddressAndThrow(java.lang.String inetAddress) { try { java.net.InetAddress.getByName(inetAddress).getAddress(); } catch (java.net.UnknownHostException e) { throw new java.lang.IllegalArgumentException((""Invalid InetAddress: "" + inetAddress)); } }",fb34e57bfca0f6bbb4d065648831d3cb715fdfae,,checkInetAddressAndThrow(java.lang.String),17,10,"private static void checkInetAddress(java.lang.String inetAddress) { if (android.text.TextUtils.isEmpty(inetAddress)) { throw new java.lang.IllegalArgumentException(""Unspecified address""); } java.net.InetAddress checkAddr = android.net.NetworkUtils.numericToInetAddress(inetAddress); if (checkAddr.isAnyLocalAddress()) { throw new java.lang.IllegalArgumentException((""Inappropriate wildcard address: "" + inetAddress)); } }",1b016075cd5b70a4adda9d24415d6fe821343419,checkInetAddress(java.lang.String),176121,63,99
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,,byte[] receive() throws java.io.IOException;,5c910f6e78020a7a4639ee40ad4c5dce101161c5,,receive(),15,19,byte[] receive() throws java.lang.Exception;,0b1b2c49f6f12b1c70e43c0fb90baa23b7e03690,receive(),381470,11,11
180830,jack-tests_src_com_android_jack_test_toolchain_JackCliToolchain.java,4.0,"protected void libToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.lang.String classpath, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { boolean assertEnable = false; assert true == (assertEnable = true); args.add(""java""); args.add((assertEnable ? ""-ea"" : ""-da"")); args.add(""-jar""); args.add(jackPrebuilt.getAbsolutePath()); args.add(""--verbose""); args.add(verbosityLevel.name()); args.add(""--sanity-checks""); args.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { args.add(""--incremental-folder""); args.add(incrementalFolder.getAbsolutePath()); } for (java.io.File res : resImport) { args.add(""--import-resource""); args.add(res.getPath()); } for (java.io.File meta : metaImport) { args.add(""--import-meta""); args.add(meta.getPath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if (!(classpath.equals(""""))) { args.add(""--classpath""); args.add(classpath); } for (java.io.File jarjarFile : jarjarRules) { args.add(""--config-jarjar""); args.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add(""--config-proguard""); args.add(flags.getAbsolutePath()); } if (withDebugInfos) { args.add(""-g""); } libToImportStaticLibs(args, in); }",2a7a24bdea8f0be808231d4370cc47392529f43e,"protected void libToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> args, @javax.annotation.Nonnull java.lang.String classpath, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { boolean assertEnable = false; assert true == (assertEnable = true); args.add(""java""); args.add((assertEnable ? ""-ea"" : ""-da"")); args.add(""-jar""); args.add(jackPrebuilt.getAbsolutePath()); args.add(""--verbose""); args.add(verbosityLevel.name()); args.add(""--sanity-checks""); args.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { args.add(""--incremental-folder""); args.add(incrementalFolder.getAbsolutePath()); } for (java.io.File res : resImport) { args.add(""--import-resource""); args.add(res.getPath()); } for (java.io.File meta : metaImport) { args.add(""--import-meta""); args.add(meta.getPath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if (!(classpath.equals(""""))) { args.add(""--classpath""); args.add(classpath); } for (java.io.File jarjarFile : jarjarRules) { args.add(""--config-jarjar""); args.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add(""--config-proguard""); args.add(flags.getAbsolutePath()); } if ((outputJack) != null) { if (!(outputJack.isDirectory())) { args.add(""--output-jack""); } else { args.add(""--output-jack-dir""); } args.add(outputJack.getAbsolutePath()); } if (withDebugInfos) { args.add(""-g""); } libToImportStaticLibs(args, in); }",7c4650b97ee9e972734a4cc75c92be684778dcd8,"libToCommon(java.util.List,java.lang.String,java.io.File[])","libToCommon(java.util.List,java.lang.String,java.io.File[])",7,3,"protected void libToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> commandLine, @javax.annotation.Nonnull java.lang.String classpath, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { buildJackCall(commandLine); commandLine.add(""--verbose""); commandLine.add(verbosityLevel.name()); commandLine.add(""--sanity-checks""); commandLine.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { commandLine.add(""--incremental-folder""); commandLine.add(incrementalFolder.getAbsolutePath()); } for (java.io.File res : resImport) { commandLine.add(""--import-resource""); commandLine.add(res.getPath()); } for (java.io.File meta : metaImport) { commandLine.add(""--import-meta""); commandLine.add(meta.getPath()); } if ((outputJack) != null) { if (zipOutputJackFiles) { commandLine.add(""--output-jack""); } else { commandLine.add(""--output-jack-dir""); } commandLine.add(outputJack.getAbsolutePath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, commandLine); if (!(classpath.equals(""""))) { commandLine.add(""--classpath""); commandLine.add(classpath); } for (java.io.File jarjarFile : jarjarRules) { commandLine.add(""--config-jarjar""); commandLine.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { commandLine.add(""--config-proguard""); commandLine.add(flags.getAbsolutePath()); } if (withDebugInfos) { commandLine.add(""-g""); } libToImportStaticLibs(commandLine, in); }",d6c660176d757176d5e11bb7367968ebf4aa4714,"libToCommon(java.util.List,java.lang.String,java.io.File[])",45128,440,390
20713,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_sdk_AndroidTargetData.java,10.0,"public synchronized com.android.ide.common.rendering.LayoutLibrary getLayoutLibrary() { if (((mLayoutBridgeInit) == false) && ((mLayoutLibrary.getStatus()) == (com.android.ide.common.sdk.LoadStatus.LOADED))) { mLayoutLibrary.init(mTarget.getProperties(), new java.io.File(mTarget.getPath(IAndroidTarget.FONTS)), getEnumValueMap(), new com.android.ide.common.rendering.api.LayoutLog() { @java.lang.Override public void error(java.lang.String tag, java.lang.String message, java.lang.Throwable throwable, java.lang.Object data) { com.android.ide.eclipse.adt.AdtPlugin.log(throwable, message); } @java.lang.Override public void error(java.lang.String tag, java.lang.String message, java.lang.Object data) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, message); } @java.lang.Override public void warning(java.lang.String tag, java.lang.String message, java.lang.Object data) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.WARNING, message); } }); mLayoutBridgeInit = true; } return mLayoutLibrary; }",479e3a3ed862fd4111d079ad0fe4dfa8b9f49c93,"public synchronized com.android.ide.common.rendering.LayoutLibrary getLayoutLibrary() { if (((mLayoutBridgeInit) == false) && ((mLayoutLibrary.getStatus()) == (com.android.ide.common.sdk.LoadStatus.LOADED))) { boolean ok = mLayoutLibrary.init(mTarget.getProperties(), new java.io.File(mTarget.getPath(IAndroidTarget.FONTS)), getEnumValueMap(), new com.android.ide.common.rendering.api.LayoutLog() { @java.lang.Override public void error(java.lang.String tag, java.lang.String message, java.lang.Throwable throwable, java.lang.Object data) { com.android.ide.eclipse.adt.AdtPlugin.log(throwable, message); } @java.lang.Override public void error(java.lang.String tag, java.lang.String message, java.lang.Object data) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, message); } @java.lang.Override public void warning(java.lang.String tag, java.lang.String message, java.lang.Object data) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.WARNING, message); } }); if (!ok) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, ""LayoutLibrary initialization failed; did the init() signature change?""); } mLayoutBridgeInit = true; } return mLayoutLibrary; }",74e46289616edcffada1c93c3fb8c406f75c2fa6,getLayoutLibrary(),getLayoutLibrary(),2,10,"public synchronized com.android.ide.common.rendering.LayoutLibrary getLayoutLibrary() { if (((mLayoutBridgeInit) == false) && ((mLayoutLibrary.getStatus()) == (com.android.ide.common.sdk.LoadStatus.LOADED))) { boolean ok = mLayoutLibrary.init(mTarget.getProperties(), new java.io.File(mTarget.getPath(IAndroidTarget.FONTS)), getEnumValueMap(), new com.android.ide.common.rendering.api.LayoutLog() { @java.lang.Override public void error(java.lang.String tag, java.lang.String message, java.lang.Throwable throwable, java.lang.Object data) { com.android.ide.eclipse.adt.AdtPlugin.log(throwable, message); } @java.lang.Override public void error(java.lang.String tag, java.lang.String message, java.lang.Object data) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, message); } @java.lang.Override public void warning(java.lang.String tag, java.lang.String message, java.lang.Object data) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.WARNING, message); } }); if (!ok) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, ""LayoutLibrary initialization failed""); } mLayoutBridgeInit = true; } return mLayoutLibrary; }",0ee3032213d32ad97b7a6392042dcdad4578a653,getLayoutLibrary(),75343,345,338
101167,hierarchyviewer2_hierarchyviewer2lib_src_main_java_com_android_hierarchyviewerlib_device_DeviceBridge.java,5.0,"public static com.android.hierarchyviewerlib.models.ViewNode parseViewHierarchy(java.io.BufferedReader in, com.android.hierarchyviewerlib.models.Window window) { com.android.hierarchyviewerlib.models.ViewNode currentNode = null; int currentDepth = -1; java.lang.String line; try { while ((line = in.readLine()) != null) { if (""DONE."".equalsIgnoreCase(line)) { break; } int depth = 0; while ((line.charAt(depth)) == ' ') { depth++; } while (depth <= currentDepth) { if (currentNode != null) { currentNode = currentNode.parent; } currentDepth--; } currentNode = new com.android.hierarchyviewerlib.models.ViewNode(window, currentNode, line.substring(depth)); currentDepth = depth; } } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DeviceBridge.TAG, (""Error reading view hierarchy stream: "" + (e.getMessage()))); return null; } if (currentNode == null) { return null; } while ((currentNode.parent) != null) { currentNode = currentNode.parent; } return currentNode; }",51a49a473359684a9ac99e31324ad20e40acdaa1,"public static com.android.hierarchyviewerlib.models.ViewNode parseViewHierarchy(java.io.BufferedReader in, com.android.hierarchyviewerlib.models.Window window) { com.android.hierarchyviewerlib.models.ViewNode currentNode = null; int currentDepth = -1; java.lang.String line; try { while ((line = in.readLine()) != null) { if (""DONE."".equalsIgnoreCase(line)) { break; } int depth = 0; int lineLength = line.length(); while (((line.charAt(depth)) == ' ') && (depth < lineLength)) { depth++; } while (depth <= currentDepth) { if (currentNode != null) { currentNode = currentNode.parent; } currentDepth--; } currentNode = new com.android.hierarchyviewerlib.models.ViewNode(window, currentNode, line.substring(depth)); currentDepth = depth; } } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DeviceBridge.TAG, (""Error reading view hierarchy stream: "" + (e.getMessage()))); return null; } if (currentNode == null) { return null; } while ((currentNode.parent) != null) { currentNode = currentNode.parent; } return currentNode; }",d17f74be25f9fb0ca1664f170d9bfe4418adc037,"parseViewHierarchy(java.io.BufferedReader,com.android.hierarchyviewerlib.models.Window)","parseViewHierarchy(java.io.BufferedReader,com.android.hierarchyviewerlib.models.Window)",6,5,"public static com.android.hierarchyviewerlib.models.ViewNode parseViewHierarchy(java.io.BufferedReader in, com.android.hierarchyviewerlib.models.Window window) { com.android.hierarchyviewerlib.models.ViewNode currentNode = null; int currentDepth = -1; java.lang.String line; try { while ((line = in.readLine()) != null) { if (""DONE."".equalsIgnoreCase(line)) { break; } int depth = 0; while ((line.charAt(depth)) == ' ') { depth++; } while (depth <= currentDepth) { if (currentNode != null) { currentNode = currentNode.parent; } currentDepth--; } currentNode = new com.android.hierarchyviewerlib.models.ViewNode(window, currentNode, line.substring(depth)); currentDepth = depth; } } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.DeviceBridge.TAG, (""Error reading view hierarchy stream: "" + (e.getMessage()))); return null; } if (currentNode == null) { return null; } while ((currentNode.parent) != null) { currentNode = currentNode.parent; } return currentNode; }",51a49a473359684a9ac99e31324ad20e40acdaa1,"parseViewHierarchy(java.io.BufferedReader,com.android.hierarchyviewerlib.models.Window)",377112,282,268
21570,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_ui_ReferenceChooserDialog.java,16.0,"private void setupInitialSelection(com.android.resources.ResourceType resourceType, java.lang.String resourceName) { com.android.ide.eclipse.adt.internal.resources.ResourceItem[] resourceItems = mResources.getResources(resourceType); for (com.android.ide.eclipse.adt.internal.resources.ResourceItem resourceItem : resourceItems) { if (resourceName.equals(resourceItem.getName())) { org.eclipse.jface.viewers.TreePath treePath = new org.eclipse.jface.viewers.TreePath(new java.lang.Object[]{ resourceType, resourceItem }); mFilteredTree.getViewer().setSelection(new org.eclipse.jface.viewers.TreeSelection(treePath), true); return; } } org.eclipse.jface.viewers.TreePath treePath = new org.eclipse.jface.viewers.TreePath(new java.lang.Object[]{ resourceType }); mFilteredTree.getViewer().setSelection(new org.eclipse.jface.viewers.TreeSelection(treePath), true); mFilteredTree.getViewer().setExpandedState(resourceType, true); }",3c0703d31b25be0be0da6314b0648d95f5e1b50d,"private void setupInitialSelection(com.android.resources.ResourceType resourceType, java.lang.String resourceName) { com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem[] resourceItems = mProjectResources.getResources(resourceType); for (com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem resourceItem : resourceItems) { if (resourceName.equals(resourceItem.getName())) { org.eclipse.jface.viewers.TreePath treePath = new org.eclipse.jface.viewers.TreePath(new java.lang.Object[]{ resourceType, resourceItem }); mFilteredTree.getViewer().setSelection(new org.eclipse.jface.viewers.TreeSelection(treePath), true); return; } } org.eclipse.jface.viewers.TreePath treePath = new org.eclipse.jface.viewers.TreePath(new java.lang.Object[]{ resourceType }); mFilteredTree.getViewer().setSelection(new org.eclipse.jface.viewers.TreeSelection(treePath), true); mFilteredTree.getViewer().setExpandedState(resourceType, true); }",bc2602d0ba0998f6c04b0910cd6f9a7048f46324,"setupInitialSelection(com.android.resources.ResourceType,java.lang.String)","setupInitialSelection(com.android.resources.ResourceType,java.lang.String)",6,16,"private void setupInitialSelection(com.android.resources.ResourceType resourceType, java.lang.String resourceName) { java.util.Collection<com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem> resourceItems = mProjectResources.getResourceItemsOfType(resourceType); for (com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem resourceItem : resourceItems) { if (resourceName.equals(resourceItem.getName())) { org.eclipse.jface.viewers.TreePath treePath = new org.eclipse.jface.viewers.TreePath(new java.lang.Object[]{ resourceType, resourceItem }); mFilteredTree.getViewer().setSelection(new org.eclipse.jface.viewers.TreeSelection(treePath), true); return; } } org.eclipse.jface.viewers.TreePath treePath = new org.eclipse.jface.viewers.TreePath(new java.lang.Object[]{ resourceType }); mFilteredTree.getViewer().setSelection(new org.eclipse.jface.viewers.TreeSelection(treePath), true); mFilteredTree.getViewer().setExpandedState(resourceType, true); }",6a2ee7406b9861880757a82bf77076ccc3523682,"setupInitialSelection(com.android.resources.ResourceType,java.lang.String)",150642,246,254
175765,luni_src_main_java_java_math_BigInt.java,32.0,"void putDecString(java.lang.String original) { java.lang.String s = checkString(original, 10); this.makeValid(); int usedLen = java.math.NativeBN.BN_dec2bn(this.bignum, s); if (usedLen < (s.length())) { throw invalidBigInteger(original); } }",b0183818177960aabde4e018cde3549295091816,"void putDecString(java.lang.String original) { java.lang.String s = checkString(original, 10); this.makeValid(); int usedLen = java.math.NativeBN.BN_dec2bn(this.nativePtr, s); if (usedLen < (s.length())) { throw invalidBigInteger(original); } }",ffc27b8e80874326d1d4b5d39c387a8d77f124be,putDecString(java.lang.String),putDecString(java.lang.String),10,31,"void putDecString(java.lang.String original) { java.lang.String s = checkString(original, 10); this.makeValid(); int usedLen = java.math.NativeBN.BN_dec2bn(this.bignum, s); if (usedLen < (s.length())) { throw invalidBigInteger(original); } }",b0183818177960aabde4e018cde3549295091816,putDecString(java.lang.String),337168,78,78
148895,build-system_builder_src_main_java_com_android_builder_core_VariantConfiguration.java,20.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.io.File getJarJarRuleFile() { return getMergedFlavor().getJarJarRuleFile(); },9562513a0c80320d2f2a321b8f9da4ed6f951054,,getJarJarRuleFile(),5,23,public java.io.File getJarJarRuleFile() { return (mBuildType.getJarJarRuleFile()) != null ? mBuildType.getJarJarRuleFile() : getMergedFlavor().getJarJarRuleFile(); },fba0690a495897808ac53747df583d58214cca4d,getJarJarRuleFile(),194292,25,51
89051,luni_src_test_java_libcore_java_lang_LongTest.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test_ParseLong() throws java.lang.Exception { assertEquals(0, java.lang.Long.parseLong(""+0"", 10)); assertEquals(473, java.lang.Long.parseLong(""+473"", 10)); assertEquals(255, java.lang.Long.parseLong(""+FF"", 16)); assertEquals(102, java.lang.Long.parseLong(""+1100110"", 2)); assertEquals(2147483647, java.lang.Long.parseLong(""+2147483647"", 10)); assertEquals(411787, java.lang.Long.parseLong(""Kona"", 27)); assertEquals(411787, java.lang.Long.parseLong(""+Kona"", 27)); try { java.lang.Long.parseLong(""--1"", 10); fail(); } catch (java.lang.NumberFormatException e) { } try { java.lang.Long.parseLong(""++1"", 10); fail(); } catch (java.lang.NumberFormatException e) { } try { java.lang.Long.parseLong(""Kona"", 10); fail(); } catch (java.lang.NumberFormatException e) { } }",99ecb278c429b28c941091d5fff98985ce1d25cf,,test_ParseLong(),9,0,"public void testParseLong() throws java.lang.Exception { assertEquals(0, java.lang.Long.parseLong(""+0"", 10)); assertEquals(473, java.lang.Long.parseLong(""+473"", 10)); assertEquals(255, java.lang.Long.parseLong(""+FF"", 16)); assertEquals(102, java.lang.Long.parseLong(""+1100110"", 2)); assertEquals(java.lang.Long.MAX_VALUE, java.lang.Long.parseLong((""+"" + (java.lang.Long.MAX_VALUE)), 10)); assertEquals(411787, java.lang.Long.parseLong(""Kona"", 27)); assertEquals(411787, java.lang.Long.parseLong(""+Kona"", 27)); assertEquals((-145), java.lang.Long.parseLong(""-145"", 10)); try { java.lang.Long.parseLong(""--1"", 10); fail(); } catch (java.lang.NumberFormatException expected) { } try { java.lang.Long.parseLong(""++1"", 10); fail(); } catch (java.lang.NumberFormatException expected) { } try { java.lang.Long.parseLong(""Kona"", 10); fail(); } catch (java.lang.NumberFormatException expected) { } }",bf712a9d2bd9c6b1f2b9c9d99f27dfe95994ee3d,testParseLong(),345970,210,248
17516,tools_host_src_com_android_cts_TestSession.java,0.0,"private void displayTestResultSummary() { int passNum = mSessionLog.getTestList(CtsTestResult.CODE_PASS).size(); int failNum = mSessionLog.getTestList(CtsTestResult.CODE_FAIL).size(); int notExecutedNum = mSessionLog.getTestList(CtsTestResult.CODE_NOT_EXECUTED).size(); int timeOutNum = mSessionLog.getTestList(CtsTestResult.CODE_TIMEOUT).size(); int total = ((passNum + failNum) + notExecutedNum) + timeOutNum; println((((((((((""Test summary: pass="" + passNum) + "" fail="") + failNum) + "" timeOut="") + timeOutNum) + "" notExecuted="") + notExecutedNum) + "" Total="") + total)); }",3919c6ffe33f62cdab4d56ed526002ebdcd43844,"private void displayTestResultSummary() { int passNum = mSessionLog.getTestList(CtsTestResult.CODE_PASS).size(); int failNum = mSessionLog.getTestList(CtsTestResult.CODE_FAIL).size(); int skippedNum = mSessionLog.getTestList(CtsTestResult.CODE_SKIPPED).size(); int notExecutedNum = mSessionLog.getTestList(CtsTestResult.CODE_NOT_EXECUTED).size(); int timeOutNum = mSessionLog.getTestList(CtsTestResult.CODE_TIMEOUT).size(); int total = ((passNum + failNum) + notExecutedNum) + timeOutNum; println((((((((((((""Test summary: pass="" + passNum) + "" fail="") + failNum) + "" timeOut="") + timeOutNum) + "" skipped="") + skippedNum) + "" notExecuted="") + notExecutedNum) + "" Total="") + total)); }",63107a6dbe8f2f094abf41acd1757b440fe9f73f,displayTestResultSummary(),displayTestResultSummary(),2,0,"private void displayTestResultSummary() { int passNum = mSessionLog.getTestList(CtsTestResult.CODE_PASS).size(); int failNum = mSessionLog.getTestList(CtsTestResult.CODE_FAIL).size(); int omittedNum = mSessionLog.getTestList(CtsTestResult.CODE_OMITTED).size(); int notExecutedNum = mSessionLog.getTestList(CtsTestResult.CODE_NOT_EXECUTED).size(); int timeOutNum = mSessionLog.getTestList(CtsTestResult.CODE_TIMEOUT).size(); int total = ((passNum + failNum) + notExecutedNum) + timeOutNum; println((((((((((((""Test summary: pass="" + passNum) + "" fail="") + failNum) + "" timeOut="") + timeOutNum) + "" omitted="") + omittedNum) + "" notExecuted="") + notExecutedNum) + "" Total="") + total)); }",44680b69aa6a05b28b983fa8536e995b8a6f423f,displayTestResultSummary(),137485,216,216
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,23.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testAesGcm96Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.getKey(288), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }",13806a25f8dd5155d9a910602078cd9dbd31ecf9,,testAesGcm96Tcp4UdpEncap(),9,89,"public void testAesGcm96Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm authCrypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_CRYPT_AES_GCM, android.net.cts.IpSecManagerTest.AEAD_KEY, 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, null, null, authCrypt, true, 1, true); }",a338609986b4fdd9cee8333a091370e5e5c43d1e,testAesGcm96Tcp4UdpEncap(),1890,168,169
147786,build-system_builder_src_main_java_com_android_builder_core_AndroidBuilder.java,26.0,"public void setTargetInfo(@com.android.annotations.NonNull com.android.builder.sdk.SdkInfo sdkInfo, @com.android.annotations.NonNull com.android.builder.sdk.TargetInfo targetInfo) { mSdkInfo = sdkInfo; mTargetInfo = targetInfo; if ((mTargetInfo.getBuildTools().getRevision().compareTo(com.android.builder.core.AndroidBuilder.MIN_BUILD_TOOLS_REV)) < 0) { throw new java.lang.IllegalArgumentException(java.lang.String.format(""The SDK Build Tools revision (%1$s) is too low for project '%2$s'. Minimum required is %3$s"", mTargetInfo.getBuildTools().getRevision(), mProjectId, com.android.builder.core.AndroidBuilder.MIN_BUILD_TOOLS_REV)); } }",b38fe3c19472a0cff0e9dafa4723e13ccb77e912,"public void setTargetInfo(@com.android.annotations.NonNull com.android.builder.sdk.SdkInfo sdkInfo, @com.android.annotations.NonNull com.android.builder.sdk.TargetInfo targetInfo, @com.android.annotations.NonNull java.util.Collection<com.android.builder.core.UsedLibrary> libraries) { mSdkInfo = sdkInfo; mTargetInfo = targetInfo; if ((mTargetInfo.getBuildTools().getRevision().compareTo(com.android.builder.core.AndroidBuilder.MIN_BUILD_TOOLS_REV)) < 0) { throw new java.lang.IllegalArgumentException(java.lang.String.format(""The SDK Build Tools revision (%1$s) is too low for project '%2$s'. Minimum required is %3$s"", mTargetInfo.getBuildTools().getRevision(), mProjectId, com.android.builder.core.AndroidBuilder.MIN_BUILD_TOOLS_REV)); } mUsedLibraries = com.google.common.collect.ImmutableList.copyOf(libraries); }",34facdb369e6c68800b3cd09c7f8cca1bffd0c32,"setTargetInfo(com.android.builder.sdk.SdkInfo,com.android.builder.sdk.TargetInfo)","setTargetInfo(com.android.builder.sdk.SdkInfo,com.android.builder.sdk.TargetInfo,java.util.Collection)",6,17,"public void setTargetInfo(@com.android.annotations.NonNull com.android.builder.sdk.SdkInfo sdkInfo, @com.android.annotations.NonNull com.android.builder.sdk.TargetInfo targetInfo, @com.android.annotations.NonNull java.util.Collection<com.android.builder.core.LibraryRequest> libraryRequests) { mSdkInfo = sdkInfo; mTargetInfo = targetInfo; if ((mTargetInfo.getBuildTools().getRevision().compareTo(com.android.builder.core.AndroidBuilder.MIN_BUILD_TOOLS_REV)) < 0) { throw new java.lang.IllegalArgumentException(java.lang.String.format(""The SDK Build Tools revision (%1$s) is too low for project '%2$s'. Minimum required is %3$s"", mTargetInfo.getBuildTools().getRevision(), mProjectId, com.android.builder.core.AndroidBuilder.MIN_BUILD_TOOLS_REV)); } mLibraryRequests = com.google.common.collect.ImmutableList.copyOf(libraryRequests); }",833f9f9309d23b9a8fe357a164434c4169f2f943,"setTargetInfo(com.android.builder.sdk.SdkInfo,com.android.builder.sdk.TargetInfo,java.util.Collection)",400397,226,228
169083,luni_src_main_java_java_util_TimerTask.java,3.0,public long scheduledExecutionTime() { synchronized(lock) { return scheduledTime; } },e3efb20787a3c26f98240868b69c6b1ef5efdd5b,boolean isCancelled() { return cancelled[0]; },5dff99f5b8e8e785564b7a7ce4095e196a2c6abc,scheduledExecutionTime(),isCancelled(),9,0,boolean isCancelled() { synchronized(lock) { return cancelled; } },620f83df3df8780388e0c720a522598bca66f6f4,isCancelled(),146838,9,15
115825,luni_src_test_java_libcore_javax_net_ssl_DefaultHostnameVerifierTest.java,45.0,"public void testWildcardMatchingSubstring() { assertTrue(verifier.verifyHostName(""b.c.d"", ""b*.c.d"")); assertTrue(verifier.verifyHostName(""imap.google.com"", ""ima*.google.com"")); }",e9c90a036986b283b576060fddb892b80f6371b9,"public void testWildcardCharacterMustBeLeftMostLabelOnly() { assertFalse(verifier.verifyHostName(""test.www.example.com"", ""test.*.example.com"")); assertFalse(verifier.verifyHostName(""www.example.com"", ""www.*.com"")); assertFalse(verifier.verifyHostName(""www.example.com"", ""www.example.*"")); assertFalse(verifier.verifyHostName(""www.example.com"", ""*www.example.com"")); assertFalse(verifier.verifyHostName(""www.example.com"", ""*w.example.com"")); assertFalse(verifier.verifyHostName(""www.example.com"", ""w*w.example.com"")); assertFalse(verifier.verifyHostName(""www.example.com"", ""w*.example.com"")); assertFalse(verifier.verifyHostName(""www.example.com"", ""www*.example.com"")); }",cda066204e134c67d20a0b1793bfe6e4e1281308,testWildcardMatchingSubstring(),testWildcardCharacterMustBeLeftMostLabelOnly(),4,68,"public void testWildcardCharacterMustBeLeftMostLabelOnly() { assertFalse(verifyWithDomainNamePattern(""test.www.example.com"", ""test.*.example.com"")); assertFalse(verifyWithDomainNamePattern(""www.example.com"", ""www.*.com"")); assertFalse(verifyWithDomainNamePattern(""www.example.com"", ""www.example.*"")); assertFalse(verifyWithDomainNamePattern(""www.example.com"", ""*www.example.com"")); assertFalse(verifyWithDomainNamePattern(""www.example.com"", ""*w.example.com"")); assertFalse(verifyWithDomainNamePattern(""www.example.com"", ""w*w.example.com"")); assertFalse(verifyWithDomainNamePattern(""www.example.com"", ""w*.example.com"")); assertFalse(verifyWithDomainNamePattern(""www.example.com"", ""www*.example.com"")); }",b854167fb3f2d5f9a96e576470237d888c81eadf,testWildcardCharacterMustBeLeftMostLabelOnly(),163271,189,189
207219,services_core_java_com_android_server_audio_AudioService.java,208.0,"public void applyDeviceVolume_syncVSS(int device) { int index; if (mIsMuted) { index = 0; } else if (((device & (android.media.AudioSystem.DEVICE_OUT_ALL_A2DP)) != 0) && (mAvrcpAbsVolSupported)) { int i = ((getIndex(device)) + 5) / 10; if (i == 0) { index = 0; } else if (i == 1) { index = ((int) ((mIndexMax) * 0.5)) / 10; } else if (i == 2) { index = ((int) ((mIndexMax) * 0.75)) / 10; } else { index = ((mIndexMax) + 5) / 10; } } else if ((device & (mFullVolumeDevices)) != 0) { index = ((mIndexMax) + 5) / 10; } else { index = ((getIndex(device)) + 5) / 10; } android.media.AudioSystem.setStreamVolumeIndex(mStreamType, index, device); }",27decb56ecf4dd230343e9becda21f7d16f8cd92,"public void applyDeviceVolume_syncVSS(int device) { int index; if (mIsMuted) { index = 0; } else if (((device & (android.media.AudioSystem.DEVICE_OUT_ALL_A2DP)) != 0) && (mAvrcpAbsVolSupported)) { int i = ((getIndex(device)) + 5) / 10; if (i == 0) { index = 0; } else if (i == 1) { index = ((int) ((mIndexMax) * 0.5)) / 10; } else if (i == 2) { index = ((int) ((mIndexMax) * 0.7)) / 10; } else if (i == 3) { index = ((int) ((mIndexMax) * 0.85)) / 10; } else { index = ((mIndexMax) + 5) / 10; } } else if ((device & (mFullVolumeDevices)) != 0) { index = ((mIndexMax) + 5) / 10; } else { index = ((getIndex(device)) + 5) / 10; } android.media.AudioSystem.setStreamVolumeIndex(mStreamType, index, device); }",068821d846a205dd2daa87fb32095649c6b692d2,applyDeviceVolume_syncVSS(int),applyDeviceVolume_syncVSS(int),10,229,private int getAbsoluteVolumeIndex(int index) { if (index == 0) { index = 0; } else if (index == 1) { index = ((int) ((mIndexMax) * 0.5)) / 10; } else if (index == 2) { index = ((int) ((mIndexMax) * 0.7)) / 10; } else if (index == 3) { index = ((int) ((mIndexMax) * 0.85)) / 10; } else { index = ((mIndexMax) + 5) / 10; } return index; },00d9fb5614c3ee48101be4eb7703ef5248773340,getAbsoluteVolumeIndex(int),191215,252,121
79932,eclipse_plugins_com.android.ide.eclipse.tests_src_com_android_ide_eclipse_adt_internal_editors_manifest_ManifestInfoTest.java,40.0,"public void testGetActivityThemes3() throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo info = getManifestInfo((""<manifest xmlns:android=\'http://schemas.android.com/apk/res/android\'\n"" + (("" package=\'com.android.unittest\'>\n"" + "" <uses-sdk android:minSdkVersion=\'11\'/>\n"") + ""</manifest>\n""))); java.util.Map<java.lang.String, java.lang.String> map = info.getActivityThemes(); assertEquals(map.toString(), 0, map.size()); assertEquals(""com.android.unittest"", info.getPackage()); assertEquals(""Theme.Holo"", com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme(info.getDefaultTheme(null, com.android.ide.eclipse.adt.internal.editors.manifest.XLARGE))); assertEquals(""Theme"", com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme(info.getDefaultTheme(null, com.android.ide.eclipse.adt.internal.editors.manifest.NORMAL))); }",0a633489111d958579ece83eaed1a8366170c33d,"public void testGetActivityThemes3() throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo info = getManifestInfo((""<manifest xmlns:android=\'http://schemas.android.com/apk/res/android\'\n"" + (("" package=\'com.android.unittest\'>\n"" + "" <uses-sdk android:minSdkVersion=\'11\'/>\n"") + ""</manifest>\n""))); java.util.Map<java.lang.String, com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo.ActivityInfo> map = info.getActivityInfos(); assertEquals(map.toString(), 0, map.size()); assertEquals(""com.android.unittest"", info.getPackage()); assertEquals(""Theme.Holo"", com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme(info.getDefaultTheme(null, com.android.ide.eclipse.adt.internal.editors.manifest.XLARGE))); assertEquals(""Theme"", com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme(info.getDefaultTheme(null, com.android.ide.eclipse.adt.internal.editors.manifest.NORMAL))); }",44a59c75f5fdbc760f86c231a120eb0d2016b92f,testGetActivityThemes3(),testGetActivityThemes3(),4,40,"public void testGetActivityThemes3() throws java.lang.Exception { com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo info = getManifestInfo((""<manifest xmlns:android=\'http://schemas.android.com/apk/res/android\'\n"" + (("" package=\'com.android.unittest\'>\n"" + "" <uses-sdk android:minSdkVersion=\'11\'/>\n"") + ""</manifest>\n""))); java.util.Map<java.lang.String, com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo.ActivityAttributes> map = info.getActivityAttributesMap(); assertEquals(map.toString(), 0, map.size()); assertEquals(""com.android.unittest"", info.getPackage()); assertEquals(""Theme.Holo"", com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme(info.getDefaultTheme(null, com.android.ide.eclipse.adt.internal.editors.manifest.XLARGE))); assertEquals(""Theme"", com.android.ide.eclipse.adt.internal.resources.ResourceHelper.styleToTheme(info.getDefaultTheme(null, com.android.ide.eclipse.adt.internal.editors.manifest.NORMAL))); }",1873c38c455d70e191020a656bdcc6e0df1e3bd0,testGetActivityThemes3(),311211,287,288
146953,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_variant_BaseVariantData.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.Set<java.lang.String> getFilters(com.android.build.OutputFile.FilterType filterType) { switch (filterType) { case DENSITY : return densityFilters; case LANGUAGE : return languageFilters; case ABI : return abiFilters; default : throw new java.lang.RuntimeException(""Unhandled filter type""); } }",383cec9bd06c1edbe3f58a42bc99e77dc9377f8e,,getFilters(com.android.build.OutputFile$FilterType),6,9,"@com.android.annotations.NonNull public java.util.Set<java.lang.String> getFilters(com.android.build.OutputFile.FilterType filterType) { if ((((densityFilters) == null) || ((languageFilters) == null)) || ((abiFilters) == null)) { throw new java.lang.IllegalStateException(""calculateFilters method not called""); } switch (filterType) { case DENSITY : return densityFilters; case LANGUAGE : return languageFilters; case ABI : return abiFilters; default : throw new java.lang.RuntimeException(""Unhandled filter type""); } }",7e917711a6a9f4a61389d6c806d39bccde5fa80d,getFilters(com.android.build.OutputFile$FilterType),411215,83,136
174892,jack-tests_tests_com_android_jack_java8_gwt_test030_jack_Java8Test.java,,,,"default java.lang.String print() { return ""DefaultInterfaceSubType "" + (com.android.jack.java8.gwt.test030.jack.Java8Test.DefaultInterface.super.print()); }",1546d2ac2e4e837b136f512fcd0f1c5f95799e1b,,print(),7,10,"default java.lang.String print() { return ""DefaultInterfaceSubType "" + (com.android.jack.java8.gwt.test030.jack.DefaultInterface.super.print()); }",36c83238b875f00e7285fab6809d27465af4ddff,print(),261387,45,41
510195,test_959-invoke-polymorphic-accessors_src_Main.java,47.0,"static void setInt(java.lang.invoke.MethodHandle m, Main.ValueHolder v, int value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }",297129e9c957be24d8a0c35276e2863b498050e5,"static void setInt(java.lang.invoke.MethodHandle m, Main.ValueHolder v, int value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }",0e5ce056adf35a3525bde12cdd5405a1feb5bbe9,"setInt(java.lang.invoke.MethodHandle,Main$ValueHolder,int,boolean)","setInt(java.lang.invoke.MethodHandle,Main$ValueHolder,int,boolean)",3,45,"static void setInt(java.lang.invoke.MethodHandle m, Main.ValueHolder v, int value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEquals(exceptionThrown, expectFailure); }",1914d35b3a6f6a03f24166824f32e792e1940644,"setInt(java.lang.invoke.MethodHandle,Main$ValueHolder,int,boolean)",228880,104,103
104851,src_main_java_org_conscrypt_OpenSSLSocketImpl.java,33.0,"@java.lang.SuppressWarnings(""unused"") @java.lang.Override public void verifyCertificateChain(long sslSessionNativePtr, long[] certRefs, java.lang.String authMethod) throws java.security.cert.CertificateException { try { javax.net.ssl.X509TrustManager x509tm = sslParameters.getX509TrustManager(); if (x509tm == null) { throw new java.security.cert.CertificateException(""No X.509 TrustManager""); } if ((certRefs == null) || ((certRefs.length) == 0)) { throw new javax.net.ssl.SSLException(""Peer sent no certificate""); } org.conscrypt.OpenSSLX509Certificate[] peerCertChain = new org.conscrypt.OpenSSLX509Certificate[certRefs.length]; for (int i = 0; i < (certRefs.length); i++) { peerCertChain[i] = new org.conscrypt.OpenSSLX509Certificate(certRefs[i]); } handshakeSession = new org.conscrypt.OpenSSLSessionImpl(sslSessionNativePtr, null, peerCertChain, getPeerHostName(), getPeerPort(), null); boolean client = sslParameters.getUseClientMode(); if (client) { org.conscrypt.Platform.checkServerTrusted(x509tm, peerCertChain, authMethod, getPeerHostName()); } else { java.lang.String authType = peerCertChain[0].getPublicKey().getAlgorithm(); x509tm.checkClientTrusted(peerCertChain, authType); } } catch (java.security.cert.CertificateException e) { throw e; } catch (java.lang.Exception e) { throw new java.security.cert.CertificateException(e); } finally { handshakeSession = null; } }",a17250d4b4a079b3757fbec20b2a1d7fad8b0a35,"@java.lang.SuppressWarnings(""unused"") @java.lang.Override public void verifyCertificateChain(long sslSessionNativePtr, long[] certRefs, java.lang.String authMethod) throws java.security.cert.CertificateException { try { javax.net.ssl.X509TrustManager x509tm = sslParameters.getX509TrustManager(); if (x509tm == null) { throw new java.security.cert.CertificateException(""No X.509 TrustManager""); } if ((certRefs == null) || ((certRefs.length) == 0)) { throw new javax.net.ssl.SSLException(""Peer sent no certificate""); } org.conscrypt.OpenSSLX509Certificate[] peerCertChain = new org.conscrypt.OpenSSLX509Certificate[certRefs.length]; for (int i = 0; i < (certRefs.length); i++) { peerCertChain[i] = new org.conscrypt.OpenSSLX509Certificate(certRefs[i]); } handshakeSession = new org.conscrypt.OpenSSLSessionImpl(sslSessionNativePtr, null, peerCertChain, getHostname(), getPort(), null); boolean client = sslParameters.getUseClientMode(); if (client) { org.conscrypt.Platform.checkServerTrusted(x509tm, peerCertChain, authMethod, peerHostname); } else { java.lang.String authType = peerCertChain[0].getPublicKey().getAlgorithm(); x509tm.checkClientTrusted(peerCertChain, authType); } } catch (java.security.cert.CertificateException e) { throw e; } catch (java.lang.Exception e) { throw new java.security.cert.CertificateException(e); } finally { handshakeSession = null; } }",e7b97440ac8bd555224c777e5de4e7694dcf2b6c,"verifyCertificateChain(long,long[],java.lang.String)","verifyCertificateChain(long,long[],java.lang.String)",2,33,"@java.lang.SuppressWarnings(""unused"") @java.lang.Override public void verifyCertificateChain(long sslSessionNativePtr, long[] certRefs, java.lang.String authMethod) throws java.security.cert.CertificateException { try { javax.net.ssl.X509TrustManager x509tm = sslParameters.getX509TrustManager(); if (x509tm == null) { throw new java.security.cert.CertificateException(""No X.509 TrustManager""); } if ((certRefs == null) || ((certRefs.length) == 0)) { throw new javax.net.ssl.SSLException(""Peer sent no certificate""); } org.conscrypt.OpenSSLX509Certificate[] peerCertChain = new org.conscrypt.OpenSSLX509Certificate[certRefs.length]; for (int i = 0; i < (certRefs.length); i++) { peerCertChain[i] = new org.conscrypt.OpenSSLX509Certificate(certRefs[i]); } handshakeSession = new org.conscrypt.OpenSSLSessionImpl(sslSessionNativePtr, null, peerCertChain, getHostname(), getPort(), null); boolean client = sslParameters.getUseClientMode(); if (client) { org.conscrypt.Platform.checkServerTrusted(x509tm, peerCertChain, authMethod, getHostname()); } else { java.lang.String authType = peerCertChain[0].getPublicKey().getAlgorithm(); x509tm.checkClientTrusted(peerCertChain, authType); } } catch (java.security.cert.CertificateException e) { throw e; } catch (java.lang.Exception e) { throw new java.security.cert.CertificateException(e); } finally { handshakeSession = null; } }",daaf037e048e7996d1430c0521cc4fc7198b4792,"verifyCertificateChain(long,long[],java.lang.String)",492076,373,373
405397,src_java_com_android_internal_telephony_NetworkScanRequestTracker.java,,,,"private synchronized boolean startNewScan(com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo nsri) { if ((mLiveRequestInfo) == null) { mLiveRequestInfo = nsri; nsri.mPhone.startNetworkScan(mHandler.obtainMessage(com.android.internal.telephony.NetworkScanRequestTracker.EVENT_START_NETWORK_SCAN_DONE, nsri)); return true; } return false; }",0c09d517225eaa0b1d0db0cd107ca8249647d3e4,,startNewScan(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo),17,17,"private synchronized boolean startNewScan(com.android.internal.telephony.NetworkScanRequestTracker.NetworkScanRequestInfo nsri) { if ((mLiveRequestInfo) == null) { mLiveRequestInfo = nsri; nsri.mPhone.startNetworkScan(nsri.getRequest(), mHandler.obtainMessage(com.android.internal.telephony.NetworkScanRequestTracker.EVENT_START_NETWORK_SCAN_DONE, nsri)); return true; } return false; }",1d9c6f87e43e6a26f0de142e6d03636303aa6e43,startNewScan(com.android.internal.telephony.NetworkScanRequestTracker$NetworkScanRequestInfo),424555,95,99
144767,sdk-common_src_main_java_com_android_ide_common_repository_ResourceVisibilityLookup.java,,,,@java.lang.Override protected boolean isEmpty() { return (mPublic) == null; },041c9d25d0ef722033aeb964e338fee0319289e3,,isEmpty(),6,3,@java.lang.Override public boolean isEmpty() { return (mPublic) == null; },bb1e7d1d65faa2cdf8b13ed7491d409a6b279625,isEmpty(),353414,21,21
211850,ojluni_src_main_java_sun_security_jca_ProviderList.java,31.0,"public static sun.security.jca.ProviderList insertAt(sun.security.jca.ProviderList providerList, java.security.Provider p, int position) { if ((providerList.getProvider(p.getName())) != null) { return providerList; } java.util.List<sun.security.jca.ProviderConfig> list = new java.util.ArrayList<>(java.util.Arrays.asList(providerList.configs)); int n = list.size(); if ((position < 0) || (position > n)) { position = n; } list.add(position, new sun.security.jca.ProviderConfig(p)); return new sun.security.jca.ProviderList(list.toArray(sun.security.jca.ProviderList.PC0), true); }",1bc745d03c572c484a65212e96b829ae86575682,"public static sun.security.jca.ProviderList insertAt(sun.security.jca.ProviderList providerList, java.security.Provider p, int position) { if ((providerList.getProvider(p.getName())) != null) { return providerList; } java.util.ArrayList<sun.security.jca.ProviderConfig> list = new java.util.ArrayList<>(providerList.configs); int n = list.size(); if ((position < 0) || (position > n)) { position = n; } list.add(position, new sun.security.jca.ProviderConfig(p)); return new sun.security.jca.ProviderList(list, true); }",83cc0f2f9d15f03c061f0274d03da94a0fb56d05,"insertAt(sun.security.jca.ProviderList,java.security.Provider,int)","insertAt(sun.security.jca.ProviderList,java.security.Provider,int)",4,31,"public static sun.security.jca.ProviderList insertAt(sun.security.jca.ProviderList providerList, java.security.Provider p, int position) { if ((providerList.getProvider(p.getName())) != null) { return providerList; } java.util.List<sun.security.jca.ProviderConfig> list = new java.util.ArrayList<>(java.util.Arrays.asList(providerList.configs)); int n = list.size(); if ((position < 0) || (position > n)) { position = n; } list.add(position, new sun.security.jca.ProviderConfig(p)); return new sun.security.jca.ProviderList(list.toArray(sun.security.jca.ProviderList.PC0), true); }",1bc745d03c572c484a65212e96b829ae86575682,"insertAt(sun.security.jca.ProviderList,java.security.Provider,int)",291435,146,168
109101,build-system_gradle_src_main_groovy_com_android_build_gradle_internal_variant_BaseVariantOutputData.java,8.0,@com.android.annotations.NonNull public abstract java.io.File getOutputFile();,948fe14225fc6aff2c5a6a794ad72c727e536648,@java.lang.Override @com.android.annotations.NonNull public abstract java.io.File getOutputFile();,06d359ba186886e31b15fd2594f0f3acf4c29b99,getOutputFile(),getOutputFile(),10,11,@com.android.annotations.NonNull public abstract java.io.File getOutputFile();,948fe14225fc6aff2c5a6a794ad72c727e536648,getOutputFile(),362644,24,18
548365,src_java_com_android_internal_telephony_RIL.java,28.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void getIccSlotStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SLOT_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy.getIccCardStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getSlotStatus"", e); } } } }",6ecfd20511508f08e7ce74f04ad513d548833d1b,,getIccSlotStatus(android.os.Message),8,121,"@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SLOT_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.getSimSlotsStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getIccSlotStatus"", e); } } } }",87a9705b856960cf9693f876c96f62f70c4d5d3c,getIccSlotsStatus(android.os.Message),68664,311,313
524744,services_tests_servicestests_src_com_android_server_pm_dex_DexoptUtilsTest.java,,,,"@org.junit.Test public void testSplitChainWithNullPrimaryClassLoader() { android.content.pm.ApplicationInfo ai = createMockApplicationInfo(null, true, true); java.lang.String[] sharedLibrary = new java.lang.String[]{ ""a.dex"", ""b.dex"" }; java.lang.String[] contexts = com.android.server.pm.dex.DexoptUtils.getClassLoaderContexts(ai, sharedLibrary); assertEquals(7, contexts.length); assertEquals(""PCL[a.dex:b.dex]"", contexts[0]); assertEquals(""DLC[];DLC[base-2.dex];PCL[base-4.dex];PCL[a.dex:b.dex:base.dex]"", contexts[1]); assertEquals(""DLC[];PCL[base-4.dex];PCL[a.dex:b.dex:base.dex]"", contexts[2]); assertEquals(""PCL[];PCL[base-4.dex];PCL[a.dex:b.dex:base.dex]"", contexts[3]); assertEquals(""PCL[];PCL[a.dex:b.dex:base.dex]"", contexts[4]); assertEquals(""PCL[];PCL[a.dex:b.dex:base.dex]"", contexts[5]); assertEquals(""PCL[];PCL[base-5.dex];PCL[a.dex:b.dex:base.dex]"", contexts[6]); }",2b52f4efbcbe5afd0032580d50ebab34b29d8faf,,testSplitChainWithNullPrimaryClassLoader(),2,3,"@org.junit.Test public void testSplitChainWithNullPrimaryClassLoader() { android.content.pm.ApplicationInfo ai = createMockApplicationInfo(null, true, true); java.lang.String[] sharedLibrary = new java.lang.String[]{ ""a.dex"", ""b.dex"" }; java.lang.String[] contexts = com.android.server.pm.dex.DexoptUtils.getClassLoaderContexts(ai, sharedLibrary); assertEquals(7, contexts.length); assertEquals(""PCL[a.dex:b.dex]"", contexts[0]); assertEquals(""PCL[];PCL[base-2.dex];PCL[base-4.dex];PCL[a.dex:b.dex:base.dex]"", contexts[1]); assertEquals(""PCL[];PCL[base-4.dex];PCL[a.dex:b.dex:base.dex]"", contexts[2]); assertEquals(""PCL[];PCL[base-4.dex];PCL[a.dex:b.dex:base.dex]"", contexts[3]); assertEquals(""PCL[];PCL[a.dex:b.dex:base.dex]"", contexts[4]); assertEquals(""PCL[];PCL[a.dex:b.dex:base.dex]"", contexts[5]); assertEquals(""PCL[];PCL[base-5.dex];PCL[a.dex:b.dex:base.dex]"", contexts[6]); }",06ff9817b0a4f9fee5a68e96b59ce7ad88274609,testSplitChainWithNullPrimaryClassLoader(),275511,302,302
285003,tools_ahat_src_heapdump_AhatClassObj.java,,,,"@java.lang.Override void initialize(com.android.ahat.heapdump.InitializeHelper helper, com.android.tools.perflib.heap.Instance inst) { com.android.tools.perflib.heap.ClassObj classObj = ((com.android.tools.perflib.heap.ClassObj) (inst)); super.initialize(helper, classObj); mClassName = classObj.getClassName(); com.android.tools.perflib.heap.ClassObj superClassObj = classObj.getSuperClassObj(); if (superClassObj != null) { mSuperClassObj = helper.getClassObj(superClassObj.getId()); } com.android.tools.perflib.heap.Instance loader = classObj.getClassLoader(); if (loader != null) { mClassLoader = helper.getInstance(loader.getId()); } mStaticFieldValues = new java.util.ArrayList<com.android.ahat.heapdump.FieldValue>(); for (java.util.Map.Entry<com.android.tools.perflib.heap.Field, java.lang.Object> fields : classObj.getStaticFieldValues().entrySet()) { mStaticFieldValues.add(new com.android.ahat.heapdump.FieldValue(fields.getKey().getName(), fields.getKey().getType().toString(), helper.getValue(fields.getValue()))); } }",9d6daafc15e6d7d30dd596307c781b05eedadee2,,"initialize(com.android.ahat.heapdump.InitializeHelper,com.android.tools.perflib.heap.Instance)",7,5,"@java.lang.Override void initialize(com.android.ahat.heapdump.AhatSnapshot snapshot, com.android.tools.perflib.heap.Instance inst) { super.initialize(snapshot, inst); com.android.tools.perflib.heap.ClassObj classObj = ((com.android.tools.perflib.heap.ClassObj) (inst)); mClassName = classObj.getClassName(); com.android.tools.perflib.heap.ClassObj superClassObj = classObj.getSuperClassObj(); if (superClassObj != null) { mSuperClassObj = snapshot.findClassObj(superClassObj.getId()); } com.android.tools.perflib.heap.Instance loader = classObj.getClassLoader(); if (loader != null) { mClassLoader = snapshot.findInstance(loader.getId()); } java.util.Collection<java.util.Map.Entry<com.android.tools.perflib.heap.Field, java.lang.Object>> fieldValues = classObj.getStaticFieldValues().entrySet(); mStaticFieldValues = new com.android.ahat.heapdump.FieldValue[fieldValues.size()]; int index = 0; for (java.util.Map.Entry<com.android.tools.perflib.heap.Field, java.lang.Object> field : fieldValues) { java.lang.String name = field.getKey().getName(); java.lang.String type = field.getKey().getType().toString(); com.android.ahat.heapdump.Value value = snapshot.getValue(field.getValue()); mStaticFieldValues[(index++)] = new com.android.ahat.heapdump.FieldValue(name, type, value); if ((field.getValue()) instanceof com.android.tools.perflib.heap.Instance) { com.android.tools.perflib.heap.Instance ref = ((com.android.tools.perflib.heap.Instance) (field.getValue())); if ((ref.getNextInstanceToGcRoot()) == inst) { value.asAhatInstance().setNextInstanceToGcRoot(this, (""."" + name)); } } } }",e64f5101489e87032936cdc0ed1828c1e0705df5,"initialize(com.android.ahat.heapdump.AhatSnapshot,com.android.tools.perflib.heap.Instance)",183593,285,462
71191,services_java_com_android_server_pm_SELinuxMMAC.java,9.0,"public static void assignSeinfoValue(android.content.pm.PackageParser.Package pkg) { if ((((pkg.applicationInfo.flags) & (android.content.pm.ApplicationInfo.FLAG_SYSTEM)) != 0) || (((pkg.applicationInfo.flags) & (android.content.pm.ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != 0)) { for (android.content.pm.Signature s : pkg.mSignatures) { if (s == null) continue; if (com.android.server.pm.SELinuxMMAC.sSigSeinfo.containsKey(s)) { java.lang.String seinfo = pkg.applicationInfo.seinfo = com.android.server.pm.SELinuxMMAC.sSigSeinfo.get(s); if (com.android.server.pm.SELinuxMMAC.DEBUG_POLICY_INSTALL) android.util.Slog.i(com.android.server.pm.SELinuxMMAC.TAG, (((""package ("" + (pkg.packageName)) + "") labeled with seinfo="") + seinfo)); return; } } if (com.android.server.pm.SELinuxMMAC.sPackageSeinfo.containsKey(pkg.packageName)) { java.lang.String seinfo = pkg.applicationInfo.seinfo = com.android.server.pm.SELinuxMMAC.sPackageSeinfo.get(pkg.packageName); if (com.android.server.pm.SELinuxMMAC.DEBUG_POLICY_INSTALL) android.util.Slog.i(com.android.server.pm.SELinuxMMAC.TAG, (((""package ("" + (pkg.packageName)) + "") labeled with seinfo="") + seinfo)); return; } } java.lang.String seinfo = pkg.applicationInfo.seinfo = com.android.server.pm.SELinuxMMAC.sSigSeinfo.get(null); if (com.android.server.pm.SELinuxMMAC.DEBUG_POLICY_INSTALL) android.util.Slog.i(com.android.server.pm.SELinuxMMAC.TAG, (((""package ("" + (pkg.packageName)) + "") labeled with seinfo="") + (seinfo == null ? ""null"" : seinfo))); }",e74043bbb1a0731c73d47fb3ca9bdd412e860aca,"public static boolean assignSeinfoValue(android.content.pm.PackageParser.Package pkg) { if ((((pkg.applicationInfo.flags) & (android.content.pm.ApplicationInfo.FLAG_SYSTEM)) != 0) || (((pkg.applicationInfo.flags) & (android.content.pm.ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != 0)) { for (android.content.pm.Signature s : pkg.mSignatures) { if (s == null) continue; com.android.server.pm.SELinuxMMAC.Policy policy = com.android.server.pm.SELinuxMMAC.sSigSeinfo.get(s); if (policy != null) { java.lang.String seinfo = policy.checkPolicy(pkg.packageName); if (seinfo != null) { pkg.applicationInfo.seinfo = seinfo; if (com.android.server.pm.SELinuxMMAC.DEBUG_POLICY_INSTALL) android.util.Slog.i(com.android.server.pm.SELinuxMMAC.TAG, (((""package ("" + (pkg.packageName)) + "") labeled with seinfo="") + seinfo)); return true; } } } } pkg.applicationInfo.seinfo = com.android.server.pm.SELinuxMMAC.sDefaultSeinfo; if (com.android.server.pm.SELinuxMMAC.DEBUG_POLICY_INSTALL) android.util.Slog.i(com.android.server.pm.SELinuxMMAC.TAG, (((""package ("" + (pkg.packageName)) + "") labeled with seinfo="") + ((com.android.server.pm.SELinuxMMAC.sDefaultSeinfo) == null ? ""null"" : com.android.server.pm.SELinuxMMAC.sDefaultSeinfo))); return (com.android.server.pm.SELinuxMMAC.sDefaultSeinfo) != null ? true : false; }",4402b3a76295f86b7b6622e2e6599b6778bdf63b,assignSeinfoValue(android.content.pm.PackageParser$Package),assignSeinfoValue(android.content.pm.PackageParser$Package),3,5,"public static boolean assignSeinfoValue(android.content.pm.PackageParser.Package pkg) { if ((((pkg.applicationInfo.flags) & (android.content.pm.ApplicationInfo.FLAG_SYSTEM)) != 0) || (((pkg.applicationInfo.flags) & (android.content.pm.ApplicationInfo.FLAG_UPDATED_SYSTEM_APP)) != 0)) { for (android.content.pm.Signature s : pkg.mSignatures) { if (s == null) continue; com.android.server.pm.SELinuxMMAC.Policy policy = com.android.server.pm.SELinuxMMAC.sSigSeinfo.get(s); if (policy != null) { java.lang.String seinfo = policy.checkPolicy(pkg.packageName); if (seinfo != null) { pkg.applicationInfo.seinfo = seinfo; if (com.android.server.pm.SELinuxMMAC.DEBUG_POLICY_INSTALL) android.util.Slog.i(com.android.server.pm.SELinuxMMAC.TAG, (((""package ("" + (pkg.packageName)) + "") labeled with seinfo="") + seinfo)); return true; } } } } pkg.applicationInfo.seinfo = com.android.server.pm.SELinuxMMAC.sDefaultSeinfo; if (com.android.server.pm.SELinuxMMAC.DEBUG_POLICY_INSTALL) android.util.Slog.i(com.android.server.pm.SELinuxMMAC.TAG, (((""package ("" + (pkg.packageName)) + "") labeled with seinfo="") + ((com.android.server.pm.SELinuxMMAC.sDefaultSeinfo) == null ? ""null"" : com.android.server.pm.SELinuxMMAC.sDefaultSeinfo))); return (com.android.server.pm.SELinuxMMAC.sDefaultSeinfo) != null; }",6f34f2b05319362dfab026ea1cceda3cc03ecbf7,assignSeinfoValue(android.content.pm.PackageParser$Package),2073,439,434
207932,src_com_android_bluetooth_pbap_BluetoothPbapService.java,23.0,"private final synchronized void closeServerSocket() { if ((mServerSocket) != null) { try { mServerSocket.close(); mServerSocket = null; } catch (java.io.IOException ex) { android.util.Log.e(com.android.bluetooth.pbap.BluetoothPbapService.TAG, (""Close Server Socket error: "" + ex)); } } }",a58cae4b4139bc2195a5cb4af0883f2eee5bd73e,private final synchronized void closeServerSocket() { if ((mServerSockets) != null) { mServerSockets.shutdown(false); mServerSockets = null; } },cced29613d5d56bf7fecfd0d77519a4b13503542,closeServerSocket(),closeServerSocket(),30,1,"@java.lang.Override protected boolean start() { android.util.Log.v(com.android.bluetooth.pbap.BluetoothPbapService.TAG, ""start()""); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(BluetoothDevice.ACTION_CONNECTION_ACCESS_REPLY); filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED); filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_RESPONSE_ACTION); filter.addAction(com.android.bluetooth.pbap.BluetoothPbapService.AUTH_CANCELLED_ACTION); mInterrupted = false; com.android.bluetooth.pbap.BluetoothPbapConfig.init(this); mSessionStatusHandler.sendMessage(mSessionStatusHandler.obtainMessage(com.android.bluetooth.pbap.BluetoothPbapService.START_LISTENER)); if ((mContactChangeObserver) == null) { registerReceiver(mPbapReceiver, filter); mContactChangeObserver = new com.android.bluetooth.pbap.BluetoothPbapService.BluetoothPbapContentObserver(); getContentResolver().registerContentObserver(com.android.bluetooth.util.DevicePolicyUtils.getEnterprisePhoneUri(this), false, mContactChangeObserver); } return true; }",c1716347458e8207696bdced775c4d2136da7bc1,start(),297012,35,292
196553,luni_src_test_java_libcore_java_util_GregorianCalendarTest.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static int hours(double count) { return ((int) ((libcore.java.util.GregorianCalendarTest.HOUR_IN_MILLIS) * count)); },74686bfe27d77271dce7939aece4f35fbc9f33d0,,hours(double),2,2,"public void test_computeTime_enteringDst_TimeZone_LosAngeles_2014() { java.util.TimeZone timeZone = java.util.TimeZone.getTimeZone(""America/Los_Angeles""); checkDstLosAngeles2014(timeZone); }",e59440cbfc067836e39cfe5016b2a79f72a21f89,test_computeTime_enteringDst_TimeZone_LosAngeles_2014(),388460,37,63
102450,luni_src_main_java_javax_net_ssl_SSLSocketFactory.java,2.0,"public static synchronized javax.net.SocketFactory getDefault() { int newCacheVersion = org.apache.harmony.security.fortress.Services.getCacheVersion(); if ((javax.net.ssl.SSLSocketFactory.lastCacheVersion) != newCacheVersion) { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = null; javax.net.ssl.SSLSocketFactory.defaultName = null; javax.net.ssl.SSLSocketFactory.lastCacheVersion = newCacheVersion; } if ((javax.net.ssl.SSLSocketFactory.defaultSocketFactory) != null) { return javax.net.ssl.SSLSocketFactory.defaultSocketFactory; } if ((javax.net.ssl.SSLSocketFactory.defaultName) == null) { javax.net.ssl.SSLSocketFactory.defaultName = java.security.Security.getProperty(""ssl.SocketFactory.provider""); if ((javax.net.ssl.SSLSocketFactory.defaultName) != null) { java.lang.ClassLoader cl = java.lang.Thread.currentThread().getContextClassLoader(); if (cl == null) { cl = java.lang.ClassLoader.getSystemClassLoader(); } try { final java.lang.Class<?> sfc = java.lang.Class.forName(javax.net.ssl.SSLSocketFactory.defaultName, true, cl); javax.net.ssl.SSLSocketFactory.defaultSocketFactory = ((javax.net.SocketFactory) (sfc.newInstance())); } catch (java.lang.Exception e) { java.lang.System.logE((""Problem creating "" + (javax.net.ssl.SSLSocketFactory.defaultName)), e); } } } if ((javax.net.ssl.SSLSocketFactory.defaultSocketFactory) == null) { javax.net.ssl.SSLContext context; try { context = javax.net.ssl.SSLContext.getDefault(); } catch (java.security.NoSuchAlgorithmException e) { context = null; } if (context != null) { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = context.getSocketFactory(); } } if ((javax.net.ssl.SSLSocketFactory.defaultSocketFactory) == null) { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = new javax.net.ssl.DefaultSSLSocketFactory(""No SSLSocketFactory installed""); } return javax.net.ssl.SSLSocketFactory.defaultSocketFactory; }",e87fd1ad36537781346184f280a9304135d08abc,"public static synchronized javax.net.SocketFactory getDefault() { int newCacheVersion = org.apache.harmony.security.fortress.Services.getCacheVersion(); if (((javax.net.ssl.SSLSocketFactory.defaultSocketFactory) != null) && ((javax.net.ssl.SSLSocketFactory.lastCacheVersion) == newCacheVersion)) { return javax.net.ssl.SSLSocketFactory.defaultSocketFactory; } java.lang.String newName = java.security.Security.getProperty(""ssl.SocketFactory.provider""); if (newName != null) { if ((javax.net.ssl.SSLSocketFactory.defaultSocketFactory) != null) { if (newName.equals(javax.net.ssl.SSLSocketFactory.defaultSocketFactory.getClass().getName())) { return javax.net.ssl.SSLSocketFactory.defaultSocketFactory; } else { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = null; } } java.lang.ClassLoader cl = java.lang.Thread.currentThread().getContextClassLoader(); if (cl == null) { cl = java.lang.ClassLoader.getSystemClassLoader(); } try { final java.lang.Class<?> sfc = java.lang.Class.forName(newName, true, cl); javax.net.ssl.SSLSocketFactory.defaultSocketFactory = ((javax.net.SocketFactory) (sfc.newInstance())); } catch (java.lang.Exception e) { java.lang.System.logW((((((""Could not create "" + newName) + "" with ClassLoader "") + (cl.toString())) + "": "") + (e.getMessage()))); } } else { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = null; } if ((javax.net.ssl.SSLSocketFactory.defaultSocketFactory) == null) { javax.net.ssl.SSLContext context; try { context = javax.net.ssl.SSLContext.getDefault(); } catch (java.security.NoSuchAlgorithmException e) { context = null; } if (context != null) { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = context.getSocketFactory(); } } if ((javax.net.ssl.SSLSocketFactory.defaultSocketFactory) == null) { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = new javax.net.ssl.DefaultSSLSocketFactory(""No SSLSocketFactory installed""); } return javax.net.ssl.SSLSocketFactory.defaultSocketFactory; }",e944f4a740b9047161a4b6a85b09ca2dcdc2e2d9,getDefault(),getDefault(),2,2,"public static synchronized javax.net.SocketFactory getDefault() { int newCacheVersion = org.apache.harmony.security.fortress.Services.getCacheVersion(); if (((javax.net.ssl.SSLSocketFactory.defaultSocketFactory) != null) && ((javax.net.ssl.SSLSocketFactory.lastCacheVersion) == newCacheVersion)) { return javax.net.ssl.SSLSocketFactory.defaultSocketFactory; } javax.net.ssl.SSLSocketFactory.lastCacheVersion = newCacheVersion; java.lang.String newName = java.security.Security.getProperty(""ssl.SocketFactory.provider""); if (newName != null) { if ((javax.net.ssl.SSLSocketFactory.defaultSocketFactory) != null) { if (newName.equals(javax.net.ssl.SSLSocketFactory.defaultSocketFactory.getClass().getName())) { return javax.net.ssl.SSLSocketFactory.defaultSocketFactory; } else { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = null; } } java.lang.ClassLoader cl = java.lang.Thread.currentThread().getContextClassLoader(); if (cl == null) { cl = java.lang.ClassLoader.getSystemClassLoader(); } try { final java.lang.Class<?> sfc = java.lang.Class.forName(newName, true, cl); javax.net.ssl.SSLSocketFactory.defaultSocketFactory = ((javax.net.SocketFactory) (sfc.newInstance())); } catch (java.lang.Exception e) { java.lang.System.logW((((((""Could not create "" + newName) + "" with ClassLoader "") + (cl.toString())) + "": "") + (e.getMessage()))); } } else { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = null; } if ((javax.net.ssl.SSLSocketFactory.defaultSocketFactory) == null) { javax.net.ssl.SSLContext context; try { context = javax.net.ssl.SSLContext.getDefault(); } catch (java.security.NoSuchAlgorithmException e) { context = null; } if (context != null) { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = context.getSocketFactory(); } } if ((javax.net.ssl.SSLSocketFactory.defaultSocketFactory) == null) { javax.net.ssl.SSLSocketFactory.defaultSocketFactory = new javax.net.ssl.DefaultSSLSocketFactory(""No SSLSocketFactory installed""); } return javax.net.ssl.SSLSocketFactory.defaultSocketFactory; }",c26076c590396075c152361aee60ea4b49deb7fe,getDefault(),471199,489,505
57709,src_com_android_mms_ui_MessageUtils.java,26.0,"public static int getAttachmentType(com.android.mms.model.SlideshowModel model, com.google.android.mms.pdu.MultimediaMessagePdu mmp) { if (model == null) { return MessageItem.ATTACHMENT_TYPE_NOT_LOADED; } int numberOfSlides = model.size(); if (numberOfSlides > 1) { return com.android.mms.data.WorkingMessage.SLIDESHOW; } else if (numberOfSlides == 1) { com.android.mms.model.SlideModel slide = model.get(0); if (slide.hasVideo()) { return com.android.mms.data.WorkingMessage.VIDEO; } if ((slide.hasAudio()) && (slide.hasImage())) { return com.android.mms.data.WorkingMessage.SLIDESHOW; } if (slide.hasAudio()) { return com.android.mms.data.WorkingMessage.AUDIO; } if (slide.hasImage()) { return com.android.mms.data.WorkingMessage.IMAGE; } if (slide.hasText()) { return com.android.mms.data.WorkingMessage.TEXT; } if ((mmp != null) && (!(android.text.TextUtils.isEmpty(mmp.getSubject().getString())))) { return com.android.mms.data.WorkingMessage.TEXT; } } return MessageItem.ATTACHMENT_TYPE_NOT_LOADED; }",610a30ac3250bd63adcc6dc5ca40038c3c1dfccd,"public static int getAttachmentType(com.android.mms.model.SlideshowModel model, com.google.android.mms.pdu.MultimediaMessagePdu mmp) { if (model == null) { return MessageItem.ATTACHMENT_TYPE_NOT_LOADED; } int numberOfSlides = model.size(); if (numberOfSlides > 1) { return com.android.mms.data.WorkingMessage.SLIDESHOW; } else if (numberOfSlides == 1) { com.android.mms.model.SlideModel slide = model.get(0); if (slide.hasVideo()) { return com.android.mms.data.WorkingMessage.VIDEO; } if ((slide.hasAudio()) && (slide.hasImage())) { return com.android.mms.data.WorkingMessage.SLIDESHOW; } if (slide.hasAudio()) { return com.android.mms.data.WorkingMessage.AUDIO; } if (slide.hasImage()) { return com.android.mms.data.WorkingMessage.IMAGE; } if (slide.hasText()) { return com.android.mms.data.WorkingMessage.TEXT; } if (!(android.text.TextUtils.isEmpty(((mmp != null) && ((mmp.getSubject()) != null) ? mmp.getSubject().getString() : null)))) { return com.android.mms.data.WorkingMessage.TEXT; } } return MessageItem.ATTACHMENT_TYPE_NOT_LOADED; }",dc654b5f54841b4068afbb5bff28658bff74cf16,"getAttachmentType(com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.MultimediaMessagePdu)","getAttachmentType(com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.MultimediaMessagePdu)",2,26,"public static int getAttachmentType(com.android.mms.model.SlideshowModel model, com.google.android.mms.pdu.MultimediaMessagePdu mmp) { if ((model == null) || (mmp == null)) { return MessageItem.ATTACHMENT_TYPE_NOT_LOADED; } int numberOfSlides = model.size(); if (numberOfSlides > 1) { return com.android.mms.data.WorkingMessage.SLIDESHOW; } else if (numberOfSlides == 1) { com.android.mms.model.SlideModel slide = model.get(0); if (slide.hasVideo()) { return com.android.mms.data.WorkingMessage.VIDEO; } if ((slide.hasAudio()) && (slide.hasImage())) { return com.android.mms.data.WorkingMessage.SLIDESHOW; } if (slide.hasAudio()) { return com.android.mms.data.WorkingMessage.AUDIO; } if (slide.hasImage()) { return com.android.mms.data.WorkingMessage.IMAGE; } if (slide.hasText()) { return com.android.mms.data.WorkingMessage.TEXT; } java.lang.String subject = ((mmp.getSubject()) != null) ? mmp.getSubject().getString() : null; if (!(android.text.TextUtils.isEmpty(subject))) { return com.android.mms.data.WorkingMessage.TEXT; } } return MessageItem.ATTACHMENT_TYPE_NOT_LOADED; }",c520e2914118dbad75ce633b66545e76fe26dc49,"getAttachmentType(com.android.mms.model.SlideshowModel,com.google.android.mms.pdu.MultimediaMessagePdu)",42300,322,333
44385,sdk_common_src_com_android_ide_common_resources_ResourceRepository.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void clear() { mCleared = true; mFolderMap.clear(); mResourceMap.clear(); mReadOnlyListMap.clear(); },7023a9893a8cca9c4212d6d0b6a7a6c0a8dd28e2,,clear(),3,5,"public synchronized void clear() { mCleared = true; mFolderMap = new java.util.EnumMap<com.android.resources.ResourceFolderType, java.util.List<com.android.ide.common.resources.ResourceFolder>>(com.android.resources.ResourceFolderType.class); mResourceMap = new java.util.EnumMap<com.android.resources.ResourceType, java.util.Map<java.lang.String, com.android.ide.common.resources.ResourceItem>>(com.android.resources.ResourceType.class); mReadOnlyListMap = new java.util.IdentityHashMap<java.util.Map<java.lang.String, com.android.ide.common.resources.ResourceItem>, java.util.Collection<com.android.ide.common.resources.ResourceItem>>(); }",ed0a30aff270f0e2e8808d4594260b5cdef015ab,clear(),86356,31,181
18960,eclipse_plugins_com.android.ide.eclipse.tests_unittests_com_android_ide_eclipse_adt_internal_resources_AttrsXmlParserTest.java,0.0,"public final void testLoadViewAttributes() throws java.lang.Exception { mParser.preload(); com.android.ide.eclipse.adt.internal.resources.ViewClassInfo info = new com.android.ide.eclipse.adt.internal.resources.ViewClassInfo(false, ""mock_android.something.Theme"", ""Theme""); mParser.loadViewAttributes(info); assertEquals(""These are the standard attributes that make up a complete theme."", info.getJavaDoc()); com.android.ide.eclipse.adt.internal.resources.AttributeInfo[] attrs = info.getAttributes(); assertEquals(1, attrs.length); assertEquals(""scrollbarSize"", info.getAttributes()[0].getName()); assertEquals(1, info.getAttributes()[0].getFormats().length); assertEquals(Format.DIMENSION, info.getAttributes()[0].getFormats()[0]); }",aa345f9afc0e016ba7331cf14721bf34b593a795,"public final void testLoadViewAttributes() throws java.lang.Exception { mParser.preload(); com.android.ide.common.platformData.ViewClassInfo info = new com.android.ide.common.platformData.ViewClassInfo(false, ""mock_android.something.Theme"", ""Theme""); mParser.loadViewAttributes(info); assertEquals(""These are the standard attributes that make up a complete theme."", info.getJavaDoc()); com.android.ide.common.platformData.AttributeInfo[] attrs = info.getAttributes(); assertEquals(1, attrs.length); assertEquals(""scrollbarSize"", info.getAttributes()[0].getName()); assertEquals(1, info.getAttributes()[0].getFormats().length); assertEquals(Format.DIMENSION, info.getAttributes()[0].getFormats()[0]); }",38ee32544f698764109f7f712a49be0b3fe4be75,testLoadViewAttributes(),testLoadViewAttributes(),2,0,"public final void testLoadViewAttributes() throws java.lang.Exception { mParser.preload(); com.android.ide.common.resources.platform.ViewClassInfo info = new com.android.ide.common.resources.platform.ViewClassInfo(false, ""mock_android.something.Theme"", ""Theme""); mParser.loadViewAttributes(info); assertEquals(""These are the standard attributes that make up a complete theme."", info.getJavaDoc()); com.android.ide.common.resources.platform.AttributeInfo[] attrs = info.getAttributes(); assertEquals(1, attrs.length); assertEquals(""scrollbarSize"", info.getAttributes()[0].getName()); assertEquals(1, info.getAttributes()[0].getFormats().length); assertEquals(Format.DIMENSION, info.getAttributes()[0].getFormats()[0]); }",42989761e1eee36c99d8d89206f1db09bd40dc3d,testLoadViewAttributes(),136484,162,165
110691,src_com_google_gct_idea_appengine_validation_RestSignatureInspection.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.lang.String guessResourceName(com.intellij.openapi.project.Project project, com.google.gct.idea.appengine.validation.PsiMethod method) { return null; }",cf2d5f70f9217491b1ba5ebccb535c5922644451,,"guessResourceName(com.intellij.openapi.project.Project,com.google.gct.idea.appengine.validation.PsiMethod)",7,10,@java.lang.Override @org.jetbrains.annotations.Nullable public java.lang.String guessResourceName(com.google.gct.idea.appengine.validation.PsiMethod method) { return null; },483356bbb259c9b6b7cbc90d8bd7f63fbc072902,guessResourceName(com.google.gct.idea.appengine.validation.PsiMethod),375473,51,47
258590,luni_src_test_java_libcore_java_util_TreeMapTest.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test_entryCompatibility_compiletime() { java.lang.Class c = java.util.TreeMap.Entry.class; assertEquals(""java.util.Map$Entry"", c.getName()); assertEquals(java.util.Map.Entry.class, c); }",7fe646c48c639b66fcbc02cf09c5f60efd0c579c,,test_entryCompatibility_compiletime(),5,36,"public void test_entryCompatibility_compiletime() { assertEquals(java.util.Map.Entry.class, java.util.TreeMap.Entry.class); }",bbd950e94e1e9cb29027c6fb2b7bfa101d66fa44,test_entryCompatibility_compiletime(),289670,57,34
81324,luni_src_main_java_java_nio_MulticastMembershipHandler.java,,,,"public java.nio.MembershipKeyImpl addAnySourceMembership(java.net.NetworkInterface networkInterface, java.net.InetAddress groupAddress) throws java.net.SocketException { java.nio.MulticastMembershipHandler.validateMulticastGroupArgs(groupAddress, networkInterface); assertChannelOpen(); java.nio.MulticastMembershipHandler.Membership membership = memberships.get(new java.nio.MulticastMembershipHandler.Id(networkInterface, groupAddress)); if (membership != null) { return membership.getAnySourceMembershipKey(); } libcore.io.StructGroupReq groupReq = java.nio.MulticastMembershipHandler.makeGroupReq(groupAddress, networkInterface); libcore.io.IoBridge.setSocketOption(channel.getFD(), IoBridge.JAVA_MCAST_JOIN_GROUP, groupReq); membership = java.nio.MulticastMembershipHandler.Membership.createAnySource(channel, networkInterface, groupAddress); java.nio.MulticastMembershipHandler.Id id = new java.nio.MulticastMembershipHandler.Id(networkInterface, groupAddress); memberships.put(id, membership); return membership.getAnySourceMembershipKey(); }",f776393948cab13438c921a57f53a980e624eb94,,"addAnySourceMembership(java.net.NetworkInterface,java.net.InetAddress)",2,24,"public java.nio.MembershipKeyImpl addAnySourceMembership(java.net.NetworkInterface networkInterface, java.net.InetAddress groupAddress) throws java.net.SocketException { java.nio.MulticastMembershipHandler.validateMulticastGroupArgs(groupAddress, networkInterface); assertChannelOpen(); java.nio.MulticastMembershipHandler.Id id = new java.nio.MulticastMembershipHandler.Id(networkInterface, groupAddress); java.nio.MulticastMembershipHandler.Membership membership = memberships.get(id); if (membership != null) { return membership.getAnySourceMembershipKey(); } libcore.io.StructGroupReq groupReq = java.nio.MulticastMembershipHandler.makeGroupReq(groupAddress, networkInterface); libcore.io.IoBridge.setSocketOption(channel.getFD(), IoBridge.JAVA_MCAST_JOIN_GROUP, groupReq); membership = java.nio.MulticastMembershipHandler.Membership.createAnySource(channel, networkInterface, groupAddress); memberships.put(id, membership); return membership.getAnySourceMembershipKey(); }",684140887392bbe28540d11a12d8ac5ecd252161,"addAnySourceMembership(java.net.NetworkInterface,java.net.InetAddress)",119375,241,227
466677,core_java_android_net_IpSecConfig.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setRemoteAddress(java.net.InetAddress remoteAddress) { mRemoteAddress = remoteAddress; },9695709f9339886f9ca7086b988242ccc7d29fbc,,setRemoteAddress(java.net.InetAddress),17,6,"public void setRemoteAddress(java.lang.String remoteAddress) { if (remoteAddress == null) { throw new java.lang.IllegalArgumentException(""remoteAddress may not be null!""); } mRemoteAddress = remoteAddress; }",fe4653164ff83ef5e4e80cfcf359a120e9cd1108,setRemoteAddress(java.lang.String),176130,23,46
79530,luni_src_main_java_java_nio_SocketChannelImpl.java,20.0,@java.lang.Override protected synchronized void implCloseSelectableChannel() throws java.io.IOException { if ((status) != (java.nio.SocketChannelImpl.SOCKET_STATUS_CLOSED)) { status = java.nio.SocketChannelImpl.SOCKET_STATUS_CLOSED; if (((socket) != null) && (!(socket.isClosed()))) { socket.close(); } else { libcore.io.IoBridge.closeSocket(fd); } } },26326a4f58abe3ecabf07141f0174a7f07f38598,"public void initAccept(java.net.InetSocketAddress remoteAddress, boolean updateSocketState) { initBound(updateSocketState); initConnected(remoteAddress, java.nio.SocketChannelImpl.SOCKET_STATUS_CONNECTED, updateSocketState); }",15660e86832fab5f893f6e4907701dd7009b5ee3,implCloseSelectableChannel(),"initAccept(java.net.InetSocketAddress,boolean)",11,6,"public void onAccept(java.net.InetSocketAddress remoteAddress, boolean updateSocketState) { onBind(updateSocketState); onConnectStatusChanged(remoteAddress, java.nio.SocketChannelImpl.SOCKET_STATUS_CONNECTED, updateSocketState); }",2a9672c7b2075a4c31fbcf68efefcde6f3c9a8b1,"onAccept(java.net.InetSocketAddress,boolean)",511089,50,52
91995,luni_src_main_java_android_os_Os.java,,,,"public static void munmap(long address, long byteCount) throws android.os.ErrnoException { Libcore.os.munmap(address, byteCount); }",fc712cae9a4f6b142cc64202302b89de864a3f39,,"munmap(long,long)",3,57,"public static void munmap(long address, long byteCount) throws android.system.ErrnoException { Libcore.os.munmap(address, byteCount); }",2cfad04a13a3374d99bc97f2ad743f0ec646cf4e,"munmap(long,long)",169995,39,39
530666,tests_unit_src_com_android_bluetooth_a2dp_A2dpStateMachineTest.java,,,,"@org.junit.Test public void testIncomingPriorityReject() { when(mA2dpService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_OFF); com.android.bluetooth.a2dp.StackEvent connStCh = new com.android.bluetooth.a2dp.StackEvent(StackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); connStCh.valueInt = A2dpStateMachine.CONNECTION_STATE_CONNECTED; connStCh.device = mTestDevice; mA2dpStateMachine.sendMessage(A2dpStateMachine.STACK_EVENT, connStCh); verify(mA2dpService, never()).sendBroadcast(any(android.content.Intent.class), anyString()); org.junit.Assert.assertTrue(((mA2dpStateMachine.getCurrentState()) instanceof com.android.bluetooth.a2dp.A2dpStateMachine.Disconnected)); }",c454da2357de3e531cd31b2b33bbfac0575c430c,,testIncomingPriorityReject(),6,1,"@org.junit.Test public void testIncomingPriorityReject() { when(mA2dpService.getPriority(any(android.bluetooth.BluetoothDevice.class))).thenReturn(BluetoothProfile.PRIORITY_OFF); com.android.bluetooth.a2dp.A2dpStackEvent connStCh = new com.android.bluetooth.a2dp.A2dpStackEvent(A2dpStackEvent.EVENT_TYPE_CONNECTION_STATE_CHANGED); connStCh.valueInt = A2dpStateMachine.CONNECTION_STATE_CONNECTED; connStCh.device = mTestDevice; mA2dpStateMachine.sendMessage(A2dpStateMachine.STACK_EVENT, connStCh); verify(mA2dpService, after(com.android.bluetooth.a2dp.A2dpStateMachineTest.TIMEOUT_MS).never()).sendBroadcast(any(android.content.Intent.class), anyString()); org.junit.Assert.assertTrue(((mA2dpStateMachine.getCurrentState()) instanceof com.android.bluetooth.a2dp.A2dpStateMachine.Disconnected)); }",76ce29871ec651806025a1feaf3235d850db06c2,testIncomingPriorityReject(),280668,198,229
181700,benchmarks_src_benchmarks_ReferenceBenchmark.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override protected void finalize() { (count.value)++; },7b873e162d93c47a1a62b0e44b4aaf928d7868d2,,finalize(),6,3,@java.lang.Override protected void finalize() { count.incrementAndGet(); },f90a5c153ef4eb47bd15412a97e1e25122d417b2,finalize(),59406,18,16
110924,jack_tests_com_android_jack_multidex_MultiDexOverflowTests.java,4.0,"@org.junit.Test public void testMinimalMainDexOverflowWithMethods() throws java.lang.Exception { java.io.File srcFolder = com.android.jack.TestTools.createTempDir(""src"", ""dir""); java.io.File outFolder = com.android.jack.TestTools.createTempDir(""out"", ""dir""); int fileCount = 655; for (int fileIdx = 0; fileIdx < fileCount; fileIdx++) { generateJavaFileWithMethods(srcFolder, fileIdx, 100); } generateJavaFileWithMethods(srcFolder, fileCount, 36); com.android.jack.Options options = new com.android.jack.Options(); options.addProperty(MultiDexLegacy.MULTIDEX_LEGACY.getName(), ""true""); options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), ""minimal-multidex""); try { com.android.jack.TestTools.compileSourceToDex(options, srcFolder, com.android.jack.TestTools.getClasspathsAsString(com.android.jack.TestTools.getDefaultBootclasspath(), new java.io.File[]{ com.android.jack.multidex.MultiDexOverflowTests.annotations }), outFolder, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { java.lang.Throwable cause = e.getCause(); junit.framework.Assert.assertTrue((cause instanceof com.android.jack.backend.dex.DexWritingException)); junit.framework.Assert.assertTrue(((cause.getCause()) instanceof com.android.jack.backend.dex.MainDexOverflowException)); junit.framework.Assert.assertTrue(((cause.getCause().getCause()) instanceof com.android.jack.tools.merger.MethodIdOverflowException)); } }",ab4a8e695d6ce674e507e8f977a41672a238ab76,"@org.junit.Test public void testMinimalMainDexOverflowWithMethods() throws java.lang.Exception { java.io.File srcFolder = com.android.jack.TestTools.createTempDir(""src"", ""dir""); java.io.File outFolder = com.android.jack.TestTools.createTempDir(""out"", ""dir""); int fileCount = 655; for (int fileIdx = 0; fileIdx < fileCount; fileIdx++) { generateJavaFileWithMethods(srcFolder, fileIdx, 100); } generateJavaFileWithMethods(srcFolder, fileCount, 36); com.android.jack.Options options = new com.android.jack.Options(); options.addProperty(MultiDexLegacy.MULTIDEX_LEGACY.getName(), ""true""); options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), ""minimal-multidex""); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); java.io.PrintStream redirectStream = new java.io.PrintStream(baos); java.lang.System.setErr(redirectStream); try { com.android.jack.TestTools.compileSourceToDex(options, srcFolder, com.android.jack.TestTools.getClasspathsAsString(com.android.jack.TestTools.getDefaultBootclasspath(), new java.io.File[]{ com.android.jack.multidex.MultiDexOverflowTests.annotations }), outFolder, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { java.lang.Throwable cause = e.getCause(); junit.framework.Assert.assertTrue((cause instanceof com.android.jack.backend.dex.DexWritingException)); junit.framework.Assert.assertTrue(((cause.getCause()) instanceof com.android.jack.backend.dex.MainDexOverflowException)); junit.framework.Assert.assertTrue(((cause.getCause().getCause()) instanceof com.android.jack.tools.merger.MethodIdOverflowException)); junit.framework.Assert.assertTrue(baos.toString().contains(com.android.jack.multidex.MultiDexOverflowTests.expectedMessage)); } finally { redirectStream.close(); } }",87a1441f9471f780771e8fa3d0661fae81f2231b,testMinimalMainDexOverflowWithMethods(),testMinimalMainDexOverflowWithMethods(),2,4,"@org.junit.Test public void testMinimalMainDexOverflowWithMethods() throws java.lang.Exception { java.io.File srcFolder = com.android.jack.TestTools.createTempDir(""src"", ""dir""); java.io.File outFolder = com.android.jack.TestTools.createTempDir(""out"", ""dir""); int fileCount = 655; for (int fileIdx = 0; fileIdx < fileCount; fileIdx++) { generateJavaFileWithMethods(srcFolder, fileIdx, 100); } generateJavaFileWithMethods(srcFolder, fileCount, 36); com.android.jack.Options options = new com.android.jack.Options(); options.addProperty(MultiDexLegacy.MULTIDEX_LEGACY.getName(), ""true""); options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), ""minimal-multidex""); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); java.io.PrintStream redirectStream = new java.io.PrintStream(baos); java.lang.System.setErr(redirectStream); try { com.android.jack.TestTools.compileSourceToDex(options, srcFolder, com.android.jack.TestTools.getClasspathsAsString(com.android.jack.TestTools.getDefaultBootclasspath(), new java.io.File[]{ com.android.jack.multidex.MultiDexOverflowTests.annotations }), outFolder, false); junit.framework.Assert.fail(); } catch (com.android.jack.JackAbortException e) { java.lang.Throwable cause = e.getCause(); junit.framework.Assert.assertTrue((cause instanceof com.android.jack.backend.dex.DexWritingException)); junit.framework.Assert.assertTrue(((cause.getCause()) instanceof com.android.jack.backend.dex.MainDexOverflowException)); junit.framework.Assert.assertTrue(((cause.getCause().getCause()) instanceof com.android.jack.tools.merger.MethodIdOverflowException)); junit.framework.Assert.assertTrue(baos.toString().contains(com.android.jack.multidex.MultiDexOverflowTests.EXPECTED_MESSAGE)); } finally { redirectStream.close(); } }",a100077f25193aeb71f1307752cfc738984fae4f,testMinimalMainDexOverflowWithMethods(),356633,464,465
567897,telephony_java_android_telephony_euicc_EuiccManager.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.android.internal.telephony.euicc.IEuiccController getIEuiccController() { return IEuiccController.Stub.asInterface(android.os.ServiceManager.getService(""econtroller"")); }",bd77ad25c1192d3d37c0d10d2b78d0768fc72263,,getIEuiccController(),2,14,"private static com.android.internal.telephony.euicc.IEuiccController getIEuiccController() { return IEuiccController.Stub.asInterface(android.os.ServiceManager.getService(""econtroller"")); }",98fade2e62d661464782950b4ad9d9c81856b920,getIEuiccController(),377339,48,49
143261,src_com_google_gct_idea_samples_SampleBrowserStep.java,15.0,@java.lang.Override public javax.swing.JLabel getDescriptionText() { return myDescriptionLabel; },43ee9c5969fc2cab95268be443bf331c20cba964,@java.lang.Override public javax.swing.JLabel getDescriptionLabel() { return myDescriptionLabel; },28efbfb17c87cff90b72cf3d17704ed10c8b95b9,getDescriptionText(),getDescriptionLabel(),2,6,@java.lang.Override protected javax.swing.JLabel getDescriptionLabel() { return myDescriptionLabel; },09359366dc60fcf3a6fb784413945ba0a4591670,getDescriptionLabel(),39131,23,23
117753,jack-tests_tests_com_android_jack_opcodes_OpcodesTests.java,54.0,"@org.junit.Test public void monitor_enter() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(MONITOR_ENTER).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",9f5a5dee658737a96317955f6f9de4e8b652c2eb,"@org.junit.Test public void monitor_enter() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(MONITOR_ENTER).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",0cd63e9131c4112a87a7818ee66b3483cd5c641a,monitor_enter(),monitor_enter(),4,54,"@org.junit.Test public void monitor_enter() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(MONITOR_ENTER).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",93085ae17cfd6f199db3d616b96074f9f15939f5,monitor_enter(),418916,109,107
17090,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gle2_GraphicalEditorPart.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private void rescaleToReal() { float dpi = ((mConfigComposite.getXDpi()) + (mConfigComposite.getYDpi())) / 2.0F; },e2d5ebccac63a0f42ba013c4d9ec0325e9b47ee0,,rescaleToReal(),4,67,"private void rescaleToReal(boolean real) { if (real) { computeAndSetRealScale(true); } else { mCanvasViewer.getCanvas().setScale(1, true); } }",9aa27cec5c30dde23d5b76743f00623dac9f5f86,rescaleToReal(boolean),303590,38,39
408139,services_core_java_com_android_server_connectivity_tethering_OffloadController.java,3.0,public void setUpstreamLinkProperties(android.net.LinkProperties lp) { if (!(started())) return; mUpstreamLinkProperties = lp; },11d1d8ee8c8166b1478c63251d1bb2a6f0d45bbd,public void setUpstreamLinkProperties(android.net.LinkProperties lp) { if (!(started())) return; mUpstreamLinkProperties = (lp != null) ? new android.net.LinkProperties(lp) : null; setUpstreamParameters(); },55a0d4d240db595d690e8f1f66f1bd9fbe9d236d,setUpstreamLinkProperties(android.net.LinkProperties),setUpstreamLinkProperties(android.net.LinkProperties),5,2,public void setUpstreamLinkProperties(android.net.LinkProperties lp) { if (!(started())) return; mUpstreamLinkProperties = (lp != null) ? new android.net.LinkProperties(lp) : null; pushUpstreamParameters(); },fb6d274defba588cc8a1040e9cf91eb9b9549482,setUpstreamLinkProperties(android.net.LinkProperties),245087,52,52
360750,tests_wifitests_src_com_android_server_wifi_aware_WifiAwareDataPathStateManagerTest.java,23.0,"private void testDataPathInitiatorResponderMismatchUtility(boolean doPublish) throws java.lang.Exception { final int clientId = 123; final int pubSubId = 11234; final int ndpId = 2; final byte[] pmk = ""some bytes"".getBytes(); final android.net.wifi.aware.PeerHandle peerHandle = new android.net.wifi.aware.PeerHandle(1341234); final byte[] peerDiscoveryMac = libcore.util.HexEncoding.decode(""000102030405"".toCharArray(), false); org.mockito.InOrder inOrder = inOrder(mMockNative, mMockCm, mMockCallback, mMockSessionCallback); Pair<java.lang.Integer, Messenger> res = initDataPathEndPoint(clientId, pubSubId, peerHandle, peerDiscoveryMac, inOrder, doPublish); NetworkRequest nr = getSessionNetworkRequest(clientId, res.first, peerHandle, pmk, doPublish); JSONObject jsonObject = new JSONObject(((StringNetworkSpecifier) (nr.networkCapabilities.getNetworkSpecifier())).specifier); jsonObject.put(WifiAwareManager.NETWORK_SPECIFIER_KEY_ROLE, (1 - (jsonObject.getInt(WifiAwareManager.NETWORK_SPECIFIER_KEY_ROLE)))); nr.networkCapabilities.setNetworkSpecifier(new StringNetworkSpecifier(jsonObject.toString())); Message reqNetworkMsg = Message.obtain(); reqNetworkMsg.what = android.net.NetworkFactory.CMD_REQUEST_NETWORK; reqNetworkMsg.obj = nr; reqNetworkMsg.arg1 = 0; res.second.send(reqNetworkMsg); mMockLooper.dispatchAll(); if (doPublish) { mDut.onDataPathRequestNotification(pubSubId, peerDiscoveryMac, ndpId); mMockLooper.dispatchAll(); inOrder.verify(mMockNative).respondToDataPathRequest(anyShort(), eq(false), eq(ndpId), eq(""""), eq(null), eq(null), any()); } verifyNoMoreInteractions(mMockNative, mMockCm); }",cff450837043b534ba2fd3923c311678cc54d59a,"private void testDataPathInitiatorResponderMismatchUtility(boolean doPublish) throws java.lang.Exception { final int clientId = 123; final int pubSubId = 11234; final int ndpId = 2; final byte[] pmk = ""some bytes"".getBytes(); final android.net.wifi.aware.PeerHandle peerHandle = new android.net.wifi.aware.PeerHandle(1341234); final byte[] peerDiscoveryMac = libcore.util.HexEncoding.decode(""000102030405"".toCharArray(), false); org.mockito.InOrder inOrder = inOrder(mMockNative, mMockCm, mMockCallback, mMockSessionCallback); Pair<java.lang.Integer, Messenger> res = initDataPathEndPoint(clientId, pubSubId, peerHandle, peerDiscoveryMac, inOrder, doPublish); NetworkRequest nr = getSessionNetworkRequest(clientId, res.first, peerHandle, pmk, doPublish); WifiAwareNetworkSpecifier ns = ((WifiAwareNetworkSpecifier) (nr.networkCapabilities.getNetworkSpecifier())); ns.role = 1 - (ns.role); Message reqNetworkMsg = Message.obtain(); reqNetworkMsg.what = android.net.NetworkFactory.CMD_REQUEST_NETWORK; reqNetworkMsg.obj = nr; reqNetworkMsg.arg1 = 0; res.second.send(reqNetworkMsg); mMockLooper.dispatchAll(); if (doPublish) { mDut.onDataPathRequestNotification(pubSubId, peerDiscoveryMac, ndpId); mMockLooper.dispatchAll(); inOrder.verify(mMockNative).respondToDataPathRequest(anyShort(), eq(false), eq(ndpId), eq(""""), eq(null), eq(null), any()); } verifyNoMoreInteractions(mMockNative, mMockCm); }",64953c0eea32aed3c48437f7f49e0ef24abd5895,testDataPathInitiatorResponderMismatchUtility(boolean),testDataPathInitiatorResponderMismatchUtility(boolean),7,23,"private void testDataPathInitiatorResponderMismatchUtility(boolean doPublish) throws java.lang.Exception { final int clientId = 123; final int pubSubId = 11234; final int ndpId = 2; final byte[] pmk = ""some bytes"".getBytes(); final android.net.wifi.aware.PeerHandle peerHandle = new android.net.wifi.aware.PeerHandle(1341234); final byte[] peerDiscoveryMac = libcore.util.HexEncoding.decode(""000102030405"".toCharArray(), false); org.mockito.InOrder inOrder = inOrder(mMockNative, mMockCm, mMockCallback, mMockSessionCallback); Pair<java.lang.Integer, Messenger> res = initDataPathEndPoint(clientId, pubSubId, peerHandle, peerDiscoveryMac, inOrder, doPublish); NetworkRequest nr = getSessionNetworkRequest(clientId, res.first, peerHandle, pmk, doPublish); WifiAwareNetworkSpecifier ns = ((WifiAwareNetworkSpecifier) (nr.networkCapabilities.getNetworkSpecifier())); ns = new WifiAwareNetworkSpecifier(ns.type, (1 - (ns.role)), ns.clientId, ns.sessionId, ns.peerId, ns.peerMac, ns.pmk, ns.passphrase); nr.networkCapabilities.setNetworkSpecifier(ns); Message reqNetworkMsg = Message.obtain(); reqNetworkMsg.what = android.net.NetworkFactory.CMD_REQUEST_NETWORK; reqNetworkMsg.obj = nr; reqNetworkMsg.arg1 = 0; res.second.send(reqNetworkMsg); mMockLooper.dispatchAll(); if (doPublish) { mDut.onDataPathRequestNotification(pubSubId, peerDiscoveryMac, ndpId); mMockLooper.dispatchAll(); inOrder.verify(mMockNative).respondToDataPathRequest(anyShort(), eq(false), eq(ndpId), eq(""""), eq(null), eq(null), any()); } verifyNoMoreInteractions(mMockNative, mMockCm); }",90d20481aa6ad03aeccee53b3186d13f25434750,testDataPathInitiatorResponderMismatchUtility(boolean),10592,392,441
252478,java_tests_RsTest_src_com_android_rs_test_UT_reduce.java,42.0,"private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, final long[] javaResult, final long[] rsResult) { if ((javaResult.length) != (rsResult.length)) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((testName + "": java length "") + (javaResult.length)) + "", rs length "") + (rsResult.length)) + "": FAILED"")); return false; } for (int i = 0; i < (javaResult.length); ++i) { if ((javaResult[i]) != (rsResult[i])) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((((testName + ""["") + i) + ""]: java "") + (javaResult[i])) + "", rs "") + (rsResult[i])) + "": FAILED"")); return false; } } java.lang.String status = ""PASSED""; if (t != null) status += "" "" + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((testName + "": "") + status)); return true; }",e3e870f2f1e3ccd885d0e3f3d6147fb69f26e101,"private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, final long[] javaRslt, final long[] rsRslt) { if ((javaRslt.length) != (rsRslt.length)) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((testName + "": java length "") + (javaRslt.length)) + "", rs length "") + (rsRslt.length)) + "": FAILED"")); return false; } for (int i = 0; i < (javaRslt.length); ++i) { if ((javaRslt[i]) != (rsRslt[i])) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((((testName + ""["") + i) + ""]: java "") + (javaRslt[i])) + "", rs "") + (rsRslt[i])) + "": FAILED"")); return false; } } java.lang.String status = ""PASSED""; if (t != null) status += "" "" + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((testName + "": "") + status)); return true; }",7696d7125589381658a08b39b8ec563d0c7c4044,"result(java.lang.String,com.android.rs.test.UT_reduce$timing,long[],long[])","result(java.lang.String,com.android.rs.test.UT_reduce$timing,long[],long[])",7,54,"private boolean result(java.lang.String testName, final com.android.rs.test.UT_reduce.timing t, final long[] javaResult, final long[] rsResult) { if ((javaResult.length) != (rsResult.length)) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((testName + "": java length "") + (javaResult.length)) + "", rs length "") + (rsResult.length)) + "": FAILED"")); return false; } for (int i = 0; i < (javaResult.length); ++i) { if ((javaResult[i]) != (rsResult[i])) { android.util.Log.i(com.android.rs.test.UT_reduce.TAG, (((((((testName + ""["") + i) + ""]: java "") + (javaResult[i])) + "", rs "") + (rsResult[i])) + "": FAILED"")); return false; } } java.lang.String status = ""PASSED""; if (t != null) status += "" "" + (t.string()); android.util.Log.i(com.android.rs.test.UT_reduce.TAG, ((testName + "": "") + status)); return true; }",e3e870f2f1e3ccd885d0e3f3d6147fb69f26e101,"result(java.lang.String,com.android.rs.test.UT_reduce$timing,long[],long[])",379430,315,293
71270,gradle_src_main_groovy_com_android_build_gradle_internal_LintGradleProject.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public java.util.List<java.io.File> getJavaLibraries() { if ((mJavaLibraries) == null) { java.util.List<java.io.File> jars = mVariant.getMainArtifactInfo().getDependencies().getJars(); mJavaLibraries = com.google.common.collect.Lists.newArrayListWithExpectedSize(jars.size()); for (java.io.File jar : jars) { if (jar.exists()) { mJavaLibraries.add(jar); } } } return mJavaLibraries; },46fa3ec6863aa01a71f4b0847c4747b9f7e6ceab,,getJavaLibraries(),2,6,@java.lang.Override public java.util.List<java.io.File> getJavaLibraries() { if ((mJavaLibraries) == null) { java.util.Collection<java.io.File> jars = mVariant.getMainArtifact().getDependencies().getJars(); mJavaLibraries = com.google.common.collect.Lists.newArrayListWithExpectedSize(jars.size()); for (java.io.File jar : jars) { if (jar.exists()) { mJavaLibraries.add(jar); } } } return mJavaLibraries; },7a08b8644539a308f0ed13a3846ae059af6e4559,getJavaLibraries(),308776,122,121
107330,build-system_builder_src_main_java_com_android_builder_core_AndroidBuilder.java,32.0,"private static void setInjectableValues(com.android.manifmerger.ManifestMerger2.Invoker<?> invoker, java.lang.String packageOverride, int versionCode, java.lang.String versionName, @com.android.annotations.Nullable java.lang.String minSdkVersion, @com.android.annotations.Nullable java.lang.String targetSdkVersion) { if (!(com.google.common.base.Strings.isNullOrEmpty(packageOverride))) { invoker.setOverride(SystemProperty.PACKAGE, packageOverride); } if (versionCode > 0) { invoker.setOverride(SystemProperty.VERSION_CODE, java.lang.String.valueOf(versionCode)); } if (!(com.google.common.base.Strings.isNullOrEmpty(versionName))) { invoker.setOverride(SystemProperty.VERSION_NAME, versionName); } if (!(com.google.common.base.Strings.isNullOrEmpty(minSdkVersion))) { invoker.setOverride(SystemProperty.MIN_SDK_VERSION, minSdkVersion); } if (!(com.google.common.base.Strings.isNullOrEmpty(targetSdkVersion))) { invoker.setOverride(SystemProperty.TARGET_SDK_VERSION, targetSdkVersion); } }",192f58b7ad0465c79f7aec9be0a50dd15e83e216,"private static void setInjectableValues(com.android.manifmerger.ManifestMerger2.Invoker<?> invoker, java.lang.String packageOverride, int versionCode, java.lang.String versionName, @com.android.annotations.Nullable java.lang.String minSdkVersion, @com.android.annotations.Nullable java.lang.String targetSdkVersion, @com.android.annotations.Nullable java.lang.String maxSdkVersion) { if (!(com.google.common.base.Strings.isNullOrEmpty(packageOverride))) { invoker.setOverride(SystemProperty.PACKAGE, packageOverride); } if (versionCode > 0) { invoker.setOverride(SystemProperty.VERSION_CODE, java.lang.String.valueOf(versionCode)); } if (!(com.google.common.base.Strings.isNullOrEmpty(versionName))) { invoker.setOverride(SystemProperty.VERSION_NAME, versionName); } if (!(com.google.common.base.Strings.isNullOrEmpty(minSdkVersion))) { invoker.setOverride(SystemProperty.MIN_SDK_VERSION, minSdkVersion); } if (!(com.google.common.base.Strings.isNullOrEmpty(targetSdkVersion))) { invoker.setOverride(SystemProperty.TARGET_SDK_VERSION, targetSdkVersion); } if (!(com.google.common.base.Strings.isNullOrEmpty(maxSdkVersion))) { invoker.setOverride(SystemProperty.MAX_SDK_VERSION, maxSdkVersion); } }",2f22d9b9212bf8b0271e357ea2182d935c1fa74e,"setInjectableValues(com.android.manifmerger.ManifestMerger2$Invoker,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)","setInjectableValues(com.android.manifmerger.ManifestMerger2$Invoker,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",4,31,"private static void setInjectableValues(com.android.manifmerger.ManifestMerger2.Invoker<?> invoker, java.lang.String packageOverride, int versionCode, java.lang.String versionName, @com.android.annotations.Nullable java.lang.String minSdkVersion, @com.android.annotations.Nullable java.lang.String targetSdkVersion, @com.android.annotations.Nullable java.lang.Integer maxSdkVersion) { if (!(com.google.common.base.Strings.isNullOrEmpty(packageOverride))) { invoker.setOverride(SystemProperty.PACKAGE, packageOverride); } if (versionCode > 0) { invoker.setOverride(SystemProperty.VERSION_CODE, java.lang.String.valueOf(versionCode)); } if (!(com.google.common.base.Strings.isNullOrEmpty(versionName))) { invoker.setOverride(SystemProperty.VERSION_NAME, versionName); } if (!(com.google.common.base.Strings.isNullOrEmpty(minSdkVersion))) { invoker.setOverride(SystemProperty.MIN_SDK_VERSION, minSdkVersion); } if (!(com.google.common.base.Strings.isNullOrEmpty(targetSdkVersion))) { invoker.setOverride(SystemProperty.TARGET_SDK_VERSION, targetSdkVersion); } if (maxSdkVersion != null) { invoker.setOverride(SystemProperty.MAX_SDK_VERSION, maxSdkVersion.toString()); } }",d634f977b1a9710fa9e4eaa7675adb90e4e64340,"setInjectableValues(com.android.manifmerger.ManifestMerger2$Invoker,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.Integer)",63176,297,288
215877,test_570-checker-osr_src_Main.java,9.0,"public static void performTest() { new SubMain(); if ((Main.$noinline$returnInt()) != 53) { throw new java.lang.Error(""Unexpected return value""); } if ((Main.$noinline$returnFloat()) != 42.2F) { throw new java.lang.Error(""Unexpected return value""); } if ((Main.$noinline$returnDouble()) != (java.lang.Double.longBitsToDouble(-1152921504606842607L))) { throw new java.lang.Error(""Unexpected return value ""); } if ((Main.$noinline$returnLong()) != -281474976706287L) { throw new java.lang.Error(""Unexpected return value""); } try { Main.$noinline$deopt(); } catch (java.lang.Exception e) { } DeoptimizationController.stopDeoptimization(); Main.$noinline$inlineCache(new Main(), false); if ((Main.$noinline$inlineCache(new SubMain(), true)) != (SubMain.class)) { throw new java.lang.Error(""Unexpected return value""); } Main.$noinline$stackOverflow(new Main(), false); Main.$noinline$stackOverflow(new SubMain(), true); }",922d0a0d593f07528fd8b913a77adc9544e72a21,"public static void performTest() { new SubMain(); if ((Main.$noinline$returnInt()) != 53) { throw new java.lang.Error(""Unexpected return value""); } if ((Main.$noinline$returnFloat()) != 42.2F) { throw new java.lang.Error(""Unexpected return value""); } if ((Main.$noinline$returnDouble()) != (java.lang.Double.longBitsToDouble(-1152921504606842607L))) { throw new java.lang.Error(""Unexpected return value ""); } if ((Main.$noinline$returnLong()) != -281474976706287L) { throw new java.lang.Error(""Unexpected return value""); } try { Main.$noinline$deopt(); } catch (java.lang.Exception e) { } DeoptimizationController.stopDeoptimization(); Main.$noinline$inlineCache(new Main(), false); if ((Main.$noinline$inlineCache(new SubMain(), true)) != (SubMain.class)) { throw new java.lang.Error(""Unexpected return value""); } Main.$noinline$stackOverflow(new Main(), false); Main.$noinline$stackOverflow(new SubMain(), true); Main m1 = new Main(); while (!(Main.$opt$noinline$testOsrInlineLoop(null, m1, false))) { } java.lang.System.out.println(""b28210356 compiled""); Main m2 = new SubMain(); while (!(Main.$opt$noinline$testOsrInlineLoop(null, m2, true))) { } java.lang.System.out.println(""b28210356 osr""); }",e5f1279d3923a40379a5e099acccde876cf271d6,performTest(),performTest(),7,20,"public static void performTest() { new SubMain(); if ((Main.$noinline$returnInt()) != 53) { throw new java.lang.Error(""Unexpected return value""); } if ((Main.$noinline$returnFloat()) != 42.2F) { throw new java.lang.Error(""Unexpected return value""); } if ((Main.$noinline$returnDouble()) != (java.lang.Double.longBitsToDouble(-1152921504606842607L))) { throw new java.lang.Error(""Unexpected return value ""); } if ((Main.$noinline$returnLong()) != -281474976706287L) { throw new java.lang.Error(""Unexpected return value""); } try { Main.$noinline$deopt(); } catch (java.lang.Exception e) { } DeoptimizationController.stopDeoptimization(); Main.$noinline$inlineCache(new Main(), false); if ((Main.$noinline$inlineCache(new SubMain(), true)) != (SubMain.class)) { throw new java.lang.Error(""Unexpected return value""); } Main.$noinline$stackOverflow(new Main(), false); Main.$noinline$stackOverflow(new SubMain(), true); Main.$opt$noinline$testOsrInlineLoop(null); java.lang.System.out.println(""b28210356 passed.""); }",800391c3d0c2e3580a7285c061ab35e00b221f2f,performTest(),406589,367,303
41793,eclipse_plugins_com.android.ide.eclipse.base_src_com_android_ide_eclipse_base_InstallDetails.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static org.osgi.framework.Version getPlatformVersion() { return org.eclipse.core.runtime.Platform.getBundle(com.android.ide.eclipse.base.InstallDetails.ECLIPSE_PLATFORM_PLUGIN_ID).getVersion(); },63c178e1875825893454dba4ff92bb0a720ceaeb,,getPlatformVersion(),2,0,public static org.osgi.framework.Version getPlatformVersion() { org.osgi.framework.Bundle b = org.eclipse.core.runtime.Platform.getBundle(com.android.ide.eclipse.base.InstallDetails.ECLIPSE_PLATFORM_PLUGIN_ID); return b == null ? org.osgi.framework.Version.emptyVersion : b.getVersion(); },208daa25924c3f06991a11560b9dd5f51c3bd40b,getPlatformVersion(),373972,54,81
20472,tests_tests_net_src_android_net_cts_ConnectivityManagerTest.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private void enableWifi(final boolean enable) { assertTrue(mWifiManager.setWifiEnabled(enable)); new android.view.animation.cts.DelayedCheck() { protected boolean check() { return (mWifiManager.isWifiEnabled()) == enable; } }.run(); },bacb9300dd7cf64ce325da34b5834d81ce0969be,,enableWifi(boolean),5,5,"private void connectToWifi() throws java.lang.InterruptedException { android.net.cts.ConnectivityManagerTest.ConnectivityActionReceiver receiver = new android.net.cts.ConnectivityManagerTest.ConnectivityActionReceiver(android.net.ConnectivityManager.TYPE_WIFI); android.content.IntentFilter filter = new android.content.IntentFilter(); filter.addAction(ConnectivityManager.CONNECTIVITY_ACTION); mContext.registerReceiver(receiver, filter); assertTrue(mWifiManager.setWifiEnabled(true)); assertTrue(""Wifi must be configured to connect to an access point for this test."", receiver.waitForConnection()); mContext.unregisterReceiver(receiver); }",b7a9c8269d2bdcf78034a9fec4919cb7dd2e9b56,connectToWifi(),147651,58,133
144191,core_java_android_app_ActivityThread.java,24.0,"public final android.content.IContentProvider acquireProvider(android.content.Context c, java.lang.String auth, int userId, boolean stable) { final android.content.IContentProvider provider = acquireExistingProvider(c, auth, userId, stable); if (provider != null) { return provider; } android.app.IActivityManager.ContentProviderHolder holder = null; try { holder = android.app.ActivityManagerNative.getDefault().getContentProvider(getApplicationThread(), auth, userId, stable); } catch (android.os.RemoteException ex) { } if (holder == null) { android.util.Slog.e(android.app.ActivityThread.TAG, (""Failed to find provider info for "" + auth)); return null; } holder = installProvider(c, holder, holder.info, true, holder.noReleaseNeeded, stable); return holder.provider; }",f1c542463ee75c5fcd6d57f5f3ecc2a7aa64972a,"public final android.content.IContentProvider acquireProvider(android.content.Context c, java.lang.String auth, int userId, boolean stable) { final android.app.ActivityThread.ProviderKey key = new android.app.ActivityThread.ProviderKey(auth, userId); final android.content.IContentProvider provider = acquireExistingProvider(c, key, stable); if (provider != null) { return provider; } android.app.ActivityThread.AcquiringProviderRecord r; boolean first = false; synchronized(mAcquiringProviderMap) { r = mAcquiringProviderMap.get(key); if (r == null) { r = new android.app.ActivityThread.AcquiringProviderRecord(); mAcquiringProviderMap.put(key, r); first = true; } else { (r.request)++; } } android.app.IActivityManager.ContentProviderHolder holder = null; if (first) { try { holder = android.app.ActivityManagerNative.getDefault().getContentProvider(getApplicationThread(), auth, userId, stable); } catch (android.os.RemoteException ex) { } synchronized(r) { r.holder = holder; r.notifyAll(); } } else { synchronized(r) { while ((r.holder) == null) { try { r.wait(); } catch (java.lang.InterruptedException e) { } } holder = r.holder; } } synchronized(mAcquiringProviderMap) { if ((--(r.request)) == 0) { mAcquiringProviderMap.remove(key); } } if (holder == null) { android.util.Slog.e(android.app.ActivityThread.TAG, (""Failed to find provider info for "" + auth)); return null; } holder = installProvider(c, holder, holder.info, true, holder.noReleaseNeeded, stable); return holder.provider; }",90a9b1bd2088c972da29a2706c3494957be0d78b,"acquireProvider(android.content.Context,java.lang.String,int,boolean)","acquireProvider(android.content.Context,java.lang.String,int,boolean)",4,25,"public final android.content.IContentProvider acquireProvider(android.content.Context c, java.lang.String auth, int userId, boolean stable) { final android.app.ActivityThread.ProviderKey key = new android.app.ActivityThread.ProviderKey(auth, userId); final android.content.IContentProvider provider = acquireExistingProvider(c, key, stable); if (provider != null) { return provider; } android.app.ActivityThread.AcquiringProviderRecord r; boolean first = false; synchronized(mAcquiringProviderMap) { r = mAcquiringProviderMap.get(key); if (r == null) { r = new android.app.ActivityThread.AcquiringProviderRecord(); mAcquiringProviderMap.put(key, r); first = true; } else { (r.requests)++; } } android.app.IActivityManager.ContentProviderHolder holder = null; if (first) { try { holder = android.app.ActivityManagerNative.getDefault().getContentProvider(getApplicationThread(), auth, userId, stable); } catch (android.os.RemoteException ex) { } synchronized(r) { r.holder = holder; r.acquiring = false; r.notifyAll(); } } else { synchronized(r) { while (r.acquiring) { try { r.wait(); } catch (java.lang.InterruptedException e) { } } holder = r.holder; } } synchronized(mAcquiringProviderMap) { if ((--(r.requests)) == 0) { mAcquiringProviderMap.remove(key); } } if (holder == null) { android.util.Slog.e(android.app.ActivityThread.TAG, (""Failed to find provider info for "" + auth)); return null; } holder = installProvider(c, holder, holder.info, true, holder.noReleaseNeeded, stable); return holder.provider; }",d50484965f3566b404eb59a74c414efc00679f7b,"acquireProvider(android.content.Context,java.lang.String,int,boolean)",460634,413,421
252478,java_tests_RsTest_src_com_android_rs_test_UT_reduce_backward.java,1.0,"private boolean addint2D(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_reduce_backward s) { final int dimX = 450; final int dimY = 225; final int[] inputArray = createInputArrayInt((dimX * dimY), 1, (1 << 13)); com.android.rs.test.Type.Builder typeBuilder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.I32(RS)); typeBuilder.setX(dimX).setY(dimY); com.android.rs.test.Allocation inputAllocation = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); inputAllocation.copy2DRangeFrom(0, 0, dimX, dimY, inputArray); final int javaRslt = addint(inputArray); final int rsRslt = s.reduce_addint(inputAllocation).get(); return result(""addint2D"", javaRslt, rsRslt); }",c6ecf85c89c46c95166a92740a65e5e748da7651,"private boolean addint2D(android.renderscript.RenderScript RS, com.android.rs.test.ScriptC_reduce_backward s) { final int dimX = 450; final int dimY = 225; final int[] inputArray = createInputArrayInt((dimX * dimY), 1, (1 << 13)); android.renderscript.Type.Builder typeBuilder = new android.renderscript.Type.Builder(RS, android.renderscript.Element.I32(RS)); typeBuilder.setX(dimX).setY(dimY); android.renderscript.Allocation inputAllocation = android.renderscript.Allocation.createTyped(RS, typeBuilder.create()); inputAllocation.copy2DRangeFrom(0, 0, dimX, dimY, inputArray); final int javaRslt = addint(inputArray); final int rsRslt = s.reduce_addint(inputAllocation).get(); return result(""addint2D"", javaRslt, rsRslt); }",11df8b0b4acd349334869ff36ee8bf491e9b0402,"addint2D(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_reduce_backward)","addint2D(android.renderscript.RenderScript,com.android.rs.test.ScriptC_reduce_backward)",7,18,"private boolean addint2D(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_reduce_backward s) { final int dimX = 450; final int dimY = 225; final int[] inputArray = createInputArrayInt((dimX * dimY), 1, (1 << 13)); com.android.rs.test.Type.Builder typeBuilder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.I32(RS)); typeBuilder.setX(dimX).setY(dimY); com.android.rs.test.Allocation inputAllocation = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); inputAllocation.copy2DRangeFrom(0, 0, dimX, dimY, inputArray); final int javaRslt = addint(inputArray); final int rsRslt = s.reduce_addint(inputAllocation).get(); return result(""addint2D"", javaRslt, rsRslt); }",c6ecf85c89c46c95166a92740a65e5e748da7651,"addint2D(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_reduce_backward)",379350,219,237
358929,core_java_android_net_NetworkCapabilities.java,10.0,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeString(mNetworkSpecifier); dest.writeInt(mSignalStrength); }",9ea98b0a07f58196d1bc0058bd189342c97816e2,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), 0); dest.writeInt(mSignalStrength); }",1880d69a0de027d17aa44724276c22d8c49f2587,"writeToParcel(android.os.Parcel,int)","writeToParcel(android.os.Parcel,int)",13,10,"@java.lang.Override public void writeToParcel(android.os.Parcel dest, int flags) { dest.writeLong(mNetworkCapabilities); dest.writeLong(mTransportTypes); dest.writeInt(mLinkUpBandwidthKbps); dest.writeInt(mLinkDownBandwidthKbps); dest.writeParcelable(((android.os.Parcelable) (mNetworkSpecifier)), flags); dest.writeInt(mSignalStrength); }",f453dc9a6abdbfb3fa1313367422ceebd7ed461d,"writeToParcel(android.os.Parcel,int)",8168,86,87
242901,jack_src_com_android_jack_Options.java,37.0,"@javax.annotation.Nonnull public com.android.sched.util.config.GatherConfigBuilder getDefaultConfigBuilder() throws com.android.jack.IllegalOptionsException, java.io.IOException { ensurePluginManager(); com.android.sched.util.config.GatherConfigBuilder configBuilder = new com.android.sched.util.config.GatherConfigBuilder(sanityChecks, getPluginManager().getReflectionManager(com.android.sched.reflections.ReflectionFactory.getManager())); configBuilder.setCodecContext(codecContext); java.lang.String resourceName = ""/config.properties""; java.io.InputStream is = com.android.jack.Main.class.getResourceAsStream(resourceName); if (is != null) { try { configBuilder.load(is, new com.android.sched.util.location.StringLocation((""resource "" + resourceName))); } finally { is.close(); } } return configBuilder; }",7f8f75a09dc5b853eb868849cefc9034a8d8b824,"@javax.annotation.Nonnull @com.android.sched.util.findbugs.SuppressFBWarnings(""IS2_INCONSISTENT_SYNC"") public com.android.sched.util.config.GatherConfigBuilder getDefaultConfigBuilder() throws com.android.jack.IllegalOptionsException, java.io.IOException { ensurePluginManager(); com.android.sched.util.config.GatherConfigBuilder configBuilder = new com.android.sched.util.config.GatherConfigBuilder(sanityChecks, getPluginManager().getReflectionManager(com.android.sched.reflections.ReflectionFactory.getManager())); assert (codecContext) != null; configBuilder.setCodecContext(codecContext); java.lang.String resourceName = ""/config.properties""; java.io.InputStream is = com.android.jack.Main.class.getResourceAsStream(resourceName); if (is != null) { try { configBuilder.load(is, new com.android.sched.util.location.StringLocation((""resource "" + resourceName))); } finally { is.close(); } } return configBuilder; }",1d13f71e4b461ef71c9a0e270f58fc0c71a3ad8e,getDefaultConfigBuilder(),getDefaultConfigBuilder(),3,37,"@javax.annotation.Nonnull public com.android.sched.util.config.GatherConfigBuilder getDefaultConfigBuilder() throws com.android.jack.IllegalOptionsException, java.io.IOException { ensurePluginManager(); com.android.sched.util.config.GatherConfigBuilder configBuilder = new com.android.sched.util.config.GatherConfigBuilder(sanityChecks, getPluginManager().getReflectionManager(com.android.sched.reflections.ReflectionFactory.getManager())); assert (codecContext) != null; configBuilder.setCodecContext(codecContext); java.lang.String resourceName = ""/config.properties""; java.io.InputStream is = com.android.jack.Main.class.getResourceAsStream(resourceName); if (is != null) { try { configBuilder.load(is, new com.android.sched.util.location.StringLocation((""resource "" + resourceName))); } finally { is.close(); } } return configBuilder; }",1d743d5daa5af2e7244c757eb023f32970b1abe4,getDefaultConfigBuilder(),392885,231,205
36273,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_configuration_ConfigurationComposite.java,63.0,"private void onDeviceChange(boolean recomputeLayout) { if ((mDisableUpdates) > 0) { return; } java.lang.String newConfigName = null; int deviceIndex = mDeviceCombo.getSelectionIndex(); if (deviceIndex != (-1)) { if (deviceIndex == ((mDeviceCombo.getItemCount()) - 1)) { onCustomDeviceConfig(); return; } if ((mState.device) != null) { int index = mDeviceConfigCombo.getSelectionIndex(); if (index != (-1)) { com.android.ide.common.resources.configuration.FolderConfiguration oldConfig = mState.device.getFolderConfigByName(mDeviceConfigCombo.getItem(index)); com.android.ide.eclipse.adt.internal.sdk.LayoutDevice newDevice = mDeviceList.get(deviceIndex); newConfigName = getClosestMatch(oldConfig, newDevice.getConfigs()); } } mState.device = mDeviceList.get(deviceIndex); } else { mState.device = null; } fillConfigCombo(newConfigName); computeCurrentConfig(); if (recomputeLayout) { onDeviceConfigChange(); } }",ebf6a6a2e4057c48291ccc6ef095ee724e037d16,private void selectDeviceConfig(@com.android.annotations.Nullable com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig config) { mPortraitRadio.setData(config); com.android.ide.common.resources.configuration.ScreenOrientationQualifier qualifier = config.getConfig().getScreenOrientationQualifier(); com.android.resources.ScreenOrientation orientation = com.android.resources.ScreenOrientation.PORTRAIT; if (qualifier != null) { orientation = qualifier.getValue(); } try { (mDisableUpdates)++; if (orientation == (com.android.resources.ScreenOrientation.PORTRAIT)) { mPortraitRadio.setSelection(true); mLandscapeRadio.setSelection(false); mSquareRadio.setSelection(false); } else if (orientation == (com.android.resources.ScreenOrientation.LANDSCAPE)) { mPortraitRadio.setSelection(false); mLandscapeRadio.setSelection(true); mSquareRadio.setSelection(false); } else { assert orientation == (com.android.resources.ScreenOrientation.SQUARE); mPortraitRadio.setSelection(false); mLandscapeRadio.setSelection(false); mSquareRadio.setSelection(true); } } finally { (mDisableUpdates)--; } boolean hasSquare = false; com.android.ide.eclipse.adt.internal.sdk.LayoutDevice device = getSelectedDevice(); if (device != null) { for (com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig c : device.getConfigs()) { com.android.ide.common.resources.configuration.ScreenOrientationQualifier q = c.getConfig().getScreenOrientationQualifier(); if ((q != null) && (q.getValue().equals(ScreenOrientation.SQUARE))) { hasSquare = true; break; } } } mSquareRadio.setEnabled(hasSquare); },1b808cbb9a838edae8395353448270d969319706,onDeviceChange(boolean),selectDeviceConfig(com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig),6,13,"void selectDeviceConfig(@com.android.annotations.Nullable com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig config) { mOrientationCombo.setData(config); com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig nextConfig = getNextDeviceConfig(config); mOrientationCombo.setImage(getOrientationIcon(getOrientation(nextConfig), (nextConfig != config))); }",5ee4d70227a9acce26633e3f3c370b75115cc52f,selectDeviceConfig(com.android.ide.eclipse.adt.internal.sdk.LayoutDevice.DeviceConfig),295099,397,95
184087,src_vogar_Target.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.List<java.lang.String> commandLine() { java.lang.String grouped = vogar.Target.ScriptBuilder.SCRIPT_JOINER.join(quotedTokens); return new com.google.common.collect.ImmutableList.Builder<java.lang.String>().addAll(commandLinePrefix).add(grouped).build(); },90afc7b7a43a94d403a67a966ff94a40e58c00c4,,commandLine(),4,4,public java.util.List<java.lang.String> commandLine() { java.lang.String grouped = vogar.Target.ScriptBuilder.SCRIPT_JOINER.join(escapedTokens); return new com.google.common.collect.ImmutableList.Builder<java.lang.String>().addAll(commandLinePrefix).add(grouped).build(); },59b6e23a5799393ef7cff0a1a078b52a42c000b2,commandLine(),440847,76,76
553459,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerDisplayTests.java,3.0,"@android.platform.test.annotations.Presubmit public void testMoveTaskBetweenDisplays() throws java.lang.Exception { if (!(supportsMultiDisplay())) { return; } final android.server.cts.DisplayState newDisplay = new android.server.cts.VirtualDisplayBuilder(this).build(); mAmWmState.assertVisibility(android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY, true); mAmWmState.assertFocusedActivity(""Virtual display activity must be focused"", android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); final int defaultDisplayStackId = mAmWmState.getAmState().getFocusedStackId(); android.server.cts.ActivityManagerState.ActivityStack focusedStack = mAmWmState.getAmState().getStackById(defaultDisplayStackId); assertEquals(""Focus must remain on primary display"", android.server.cts.ActivityAndWindowManagersState.DEFAULT_DISPLAY_ID, focusedStack.mDisplayId); launchActivityOnDisplay(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, newDisplay.mDisplayId); mAmWmState.assertFocusedActivity(""Focus must be on secondary display"", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); int focusedStackId = mAmWmState.getAmState().getFocusedStackId(); focusedStack = mAmWmState.getAmState().getStackById(focusedStackId); assertEquals(""Focused stack must be on secondary display"", newDisplay.mDisplayId, focusedStack.mDisplayId); moveActivityToStack(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, defaultDisplayStackId); mAmWmState.waitForFocusedStack(mDevice, defaultDisplayStackId); mAmWmState.assertFocusedActivity(""Focus must be on moved activity"", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); focusedStackId = mAmWmState.getAmState().getFocusedStackId(); focusedStack = mAmWmState.getAmState().getStackById(focusedStackId); assertEquals(""Focus must return to primary display"", android.server.cts.ActivityAndWindowManagersState.DEFAULT_DISPLAY_ID, focusedStack.mDisplayId); }",b4cda5ef9d5c43fc0ad44f59d85f6a4c354d7b32,"@android.platform.test.annotations.Presubmit public void testMoveTaskBetweenDisplays() throws java.lang.Exception { if (!(supportsMultiDisplay())) { return; } final android.server.cts.DisplayState newDisplay = new android.server.cts.VirtualDisplayBuilder(this).build(); mAmWmState.assertVisibility(android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY, true); mAmWmState.assertFocusedActivity(""Virtual display activity must be focused"", android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); int displayId = (mVrHeadset) ? mVrVirtualDisplayId : android.server.cts.ActivityAndWindowManagersState.DEFAULT_DISPLAY_ID; final int defaultDisplayStackId = mAmWmState.getAmState().getFocusedStackId(); android.server.cts.ActivityManagerState.ActivityStack focusedStack = mAmWmState.getAmState().getStackById(defaultDisplayStackId); assertEquals(""Focus must remain on the correct display"", displayId, focusedStack.mDisplayId); launchActivityOnDisplay(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, newDisplay.mDisplayId); mAmWmState.assertFocusedActivity(""Focus must be on secondary display"", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); int focusedStackId = mAmWmState.getAmState().getFocusedStackId(); focusedStack = mAmWmState.getAmState().getStackById(focusedStackId); assertEquals(""Focused stack must be on secondary display"", newDisplay.mDisplayId, focusedStack.mDisplayId); moveActivityToStack(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, defaultDisplayStackId); mAmWmState.waitForFocusedStack(mDevice, defaultDisplayStackId); mAmWmState.assertFocusedActivity(""Focus must be on moved activity"", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); focusedStackId = mAmWmState.getAmState().getFocusedStackId(); focusedStack = mAmWmState.getAmState().getStackById(focusedStackId); assertEquals(""Focus must return to primary display"", displayId, focusedStack.mDisplayId); }",b9a90b650983126ece01eac96e9bc492e38df7cb,testMoveTaskBetweenDisplays(),testMoveTaskBetweenDisplays(),8,25,"@android.platform.test.annotations.Presubmit public void testMoveTaskBetweenDisplays() throws java.lang.Exception { if (!(supportsMultiDisplay())) { return; } final android.server.cts.DisplayState newDisplay = new android.server.cts.VirtualDisplayBuilder(this).build(); mAmWmState.assertVisibility(android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY, true); mAmWmState.assertFocusedActivity(""Virtual display activity must be focused"", android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); int displayId = getCurrentDefaultDisplayId(); final int defaultDisplayStackId = mAmWmState.getAmState().getFocusedStackId(); android.server.cts.ActivityManagerState.ActivityStack focusedStack = mAmWmState.getAmState().getStackById(defaultDisplayStackId); assertEquals(""Focus must remain on the correct display"", displayId, focusedStack.mDisplayId); launchActivityOnDisplay(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, newDisplay.mDisplayId); mAmWmState.assertFocusedActivity(""Focus must be on secondary display"", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); int focusedStackId = mAmWmState.getAmState().getFocusedStackId(); focusedStack = mAmWmState.getAmState().getStackById(focusedStackId); assertEquals(""Focused stack must be on secondary display"", newDisplay.mDisplayId, focusedStack.mDisplayId); moveActivityToStack(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, defaultDisplayStackId); mAmWmState.waitForFocusedStack(mDevice, defaultDisplayStackId); mAmWmState.assertFocusedActivity(""Focus must be on moved activity"", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); focusedStackId = mAmWmState.getAmState().getFocusedStackId(); focusedStack = mAmWmState.getAmState().getStackById(focusedStackId); assertEquals(""Focus must return to primary display"", displayId, focusedStack.mDisplayId); }",07781202b123a382a48744ae55f7e5cd334d2e38,testMoveTaskBetweenDisplays(),118141,507,477
35881,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_AdtUtils.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static java.lang.String stripFirst(@com.android.annotations.NonNull java.lang.String string, @com.android.annotations.NonNull java.lang.String strip) { int index = string.indexOf(strip); if (index != (-1)) { int length = strip.length(); if ((index + length) == (string.length())) { return string.substring(0, index); } else { return (string.substring(0, index)) + (string.substring((index + (strip.length())))); } } return string; }",d292baa3673a65f4cfb4f040db7906764574ae11,,"stripFirst(java.lang.String,java.lang.String)",3,10,"public static java.lang.String stripSuffix(@com.android.annotations.NonNull java.lang.String string, @com.android.annotations.NonNull java.lang.String suffix) { if (string.endsWith(suffix)) { return string.substring(0, ((string.length()) - (suffix.length()))); } return string; }",35bcf5908223799199a2af16e953510a9f1d1673,"stripSuffix(java.lang.String,java.lang.String)",273437,117,71
91995,luni_src_main_java_libcore_io_Os.java,78.0,public java.net.SocketAddress getsockname(java.io.FileDescriptor fd) throws libcore.io.ErrnoException;,edf2dc5b2dac3e72af89695a3734391dab38d2ab,public java.net.SocketAddress getsockname(java.io.FileDescriptor fd) throws android.os.ErrnoException;,e2b80067ef4f84e8f9587d39edb40d693a556e5c,getsockname(java.io.FileDescriptor),getsockname(java.io.FileDescriptor),3,77,public java.net.SocketAddress getsockname(java.io.FileDescriptor fd) throws android.system.ErrnoException;,1b15e1a96b8ab6acbec8c32580b089594f9fe883,getsockname(java.io.FileDescriptor),170268,26,26
617334,src_java_com_android_internal_telephony_RIL.java,187.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void setLinkCapacityReportingCriteria(int hysteresisMs, int hysteresisDlKbps, int hysteresisUlKbps, int[] thresholdsDlKbps, int[] thresholdsUlKbps, int ran, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { riljLoge(""Radio Proxy 1.2 is unsupported!""); return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LINK_CAPACITY_REPORTING_CRITERIA, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setLinkCapacityReportingCriteria(rr.mSerial, hysteresisMs, hysteresisDlKbps, hysteresisUlKbps, com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsDlKbps), com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsUlKbps), com.android.internal.telephony.RIL.convertRanToHalRan(ran)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setLinkCapacityReportingCriteria"", e); } } }",16acee2c0d1393688c20a0862947647394d07924,,"setLinkCapacityReportingCriteria(int,int,int,int[],int[],int,android.os.Message)",14,151,"@java.lang.Override public void setLinkCapacityReportingCriteria(int hysteresisMs, int hysteresisDlKbps, int hysteresisUlKbps, int[] thresholdsDlKbps, int[] thresholdsUlKbps, int ran, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { riljLoge(""setLinkCapacityReportingCriteria ignored. RadioProxy 1.2 is null!""); return; } com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_LINK_CAPACITY_REPORTING_CRITERIA, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.setLinkCapacityReportingCriteria(rr.mSerial, hysteresisMs, hysteresisDlKbps, hysteresisUlKbps, com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsDlKbps), com.android.internal.telephony.RIL.primitiveArrayToArrayList(thresholdsUlKbps), com.android.internal.telephony.RIL.convertRanToHalRan(ran)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setLinkCapacityReportingCriteria"", e); } } }",8d7ed4c2ff4df98c531105d8aad9ccef6627d69d,"setLinkCapacityReportingCriteria(int,int,int,int[],int[],int,android.os.Message)",514471,419,427
46650,sdkmanager_libs_sdklib_src_com_android_sdklib_devices_DeviceManager.java,2.0,"public void saveUserDevices() { synchronized(com.android.sdklib.devices.DeviceManager.sLock) { if (((com.android.sdklib.devices.DeviceManager.mUserDevices) != null) && ((com.android.sdklib.devices.DeviceManager.mUserDevices.size()) != 0)) { java.io.File userDevicesFile; try { userDevicesFile = new java.io.File(com.android.prefs.AndroidLocation.getFolder(), com.android.SdkConstants.FN_DEVICES_XML); com.android.sdklib.devices.DeviceWriter.writeToXml(new java.io.FileOutputStream(userDevicesFile), com.android.sdklib.devices.DeviceManager.mUserDevices); } catch (com.android.prefs.AndroidLocation.AndroidLocationException e) { mLog.warning(""Couldn't find user directory: %1$s"", e.getMessage()); } catch (java.io.FileNotFoundException e) { mLog.warning(""Couldn't open file: %1$s"", e.getMessage()); } catch (javax.xml.parsers.ParserConfigurationException e) { mLog.warning(""Error writing file: %1$s"", e.getMessage()); } catch (javax.xml.transform.TransformerFactoryConfigurationError e) { mLog.warning(""Error writing file: %1$s"", e.getMessage()); } catch (javax.xml.transform.TransformerException e) { mLog.warning(""Error writing file: %1$s"", e.getMessage()); } } } }",8605eeeacbf0dfde1db611ebcff0cbee7a937f20,"public void saveUserDevices() { synchronized(com.android.sdklib.devices.DeviceManager.sLock) { if ((com.android.sdklib.devices.DeviceManager.mUserDevices) != null) { java.io.File userDevicesFile; try { userDevicesFile = new java.io.File(com.android.prefs.AndroidLocation.getFolder(), com.android.SdkConstants.FN_DEVICES_XML); com.android.sdklib.devices.DeviceWriter.writeToXml(new java.io.FileOutputStream(userDevicesFile), com.android.sdklib.devices.DeviceManager.mUserDevices); } catch (com.android.prefs.AndroidLocation.AndroidLocationException e) { mLog.warning(""Couldn't find user directory: %1$s"", e.getMessage()); } catch (java.io.FileNotFoundException e) { mLog.warning(""Couldn't open file: %1$s"", e.getMessage()); } catch (javax.xml.parsers.ParserConfigurationException e) { mLog.warning(""Error writing file: %1$s"", e.getMessage()); } catch (javax.xml.transform.TransformerFactoryConfigurationError e) { mLog.warning(""Error writing file: %1$s"", e.getMessage()); } catch (javax.xml.transform.TransformerException e) { mLog.warning(""Error writing file: %1$s"", e.getMessage()); } } } }",5b2c50117147309fde857b0b8864dcebb3bae8d9,saveUserDevices(),saveUserDevices(),2,2,"public void saveUserDevices() { if ((com.android.sdklib.devices.DeviceManager.mUserDevices) == null) { return; } java.io.File userDevicesFile = null; try { userDevicesFile = new java.io.File(com.android.prefs.AndroidLocation.getFolder(), com.android.SdkConstants.FN_DEVICES_XML); } catch (com.android.prefs.AndroidLocation.AndroidLocationException e) { mLog.warning(""Couldn't find user directory: %1$s"", e.getMessage()); return; } if ((com.android.sdklib.devices.DeviceManager.mUserDevices.size()) == 0) { userDevicesFile.delete(); return; } synchronized(com.android.sdklib.devices.DeviceManager.sLock) { if ((com.android.sdklib.devices.DeviceManager.mUserDevices.size()) > 0) { try { com.android.sdklib.devices.DeviceWriter.writeToXml(new java.io.FileOutputStream(userDevicesFile), com.android.sdklib.devices.DeviceManager.mUserDevices); } catch (java.io.FileNotFoundException e) { mLog.warning(""Couldn't open file: %1$s"", e.getMessage()); } catch (javax.xml.parsers.ParserConfigurationException e) { mLog.warning(""Error writing file: %1$s"", e.getMessage()); } catch (javax.xml.transform.TransformerFactoryConfigurationError e) { mLog.warning(""Error writing file: %1$s"", e.getMessage()); } catch (javax.xml.transform.TransformerException e) { mLog.warning(""Error writing file: %1$s"", e.getMessage()); } } } }",a94579b87875be0f921666dc2827669ac8916414,saveUserDevices(),296834,316,386
41722,core_java_com_android_internal_os_ZygoteInit.java,13.0,"private static int preloadDrawables(dalvik.system.VMRuntime runtime, android.content.res.TypedArray ar) { int N = ar.length(); for (int i = 0; i < N; i++) { if ((android.os.Debug.getGlobalAllocSize()) > (com.android.internal.os.ZygoteInit.PRELOAD_GC_THRESHOLD)) { if (false) { android.util.Log.v(com.android.internal.os.ZygoteInit.TAG, ("" GC at "" + (android.os.Debug.getGlobalAllocSize()))); } java.lang.System.gc(); runtime.runFinalizationSync(); android.os.Debug.resetGlobalAllocSize(); } int id = ar.getResourceId(i, 0); if (false) { android.util.Log.v(com.android.internal.os.ZygoteInit.TAG, (""Preloading resource #"" + (java.lang.Integer.toHexString(id)))); } if (id != 0) { android.graphics.drawable.Drawable dr = com.android.internal.os.ZygoteInit.mResources.getDrawable(id); if (((dr.getChangingConfigurations()) & (~(android.content.pm.ActivityInfo.CONFIG_FONT_SCALE))) != 0) { android.util.Log.w(com.android.internal.os.ZygoteInit.TAG, ((((""Preloaded drawable resource #0x"" + (java.lang.Integer.toHexString(id))) + "" ("") + (ar.getString(i))) + "") that varies with configuration!!"")); } } } return N; }",2cab1d24492d7d3c538289a8b4dd4523d8cc94d7,"private static int preloadDrawables(dalvik.system.VMRuntime runtime, android.content.res.TypedArray ar) { int N = ar.length(); for (int i = 0; i < N; i++) { if ((android.os.Debug.getGlobalAllocSize()) > (com.android.internal.os.ZygoteInit.PRELOAD_GC_THRESHOLD)) { if (false) { android.util.Log.v(com.android.internal.os.ZygoteInit.TAG, ("" GC at "" + (android.os.Debug.getGlobalAllocSize()))); } java.lang.System.gc(); runtime.runFinalizationSync(); android.os.Debug.resetGlobalAllocSize(); } int id = ar.getResourceId(i, 0); if (false) { android.util.Log.v(com.android.internal.os.ZygoteInit.TAG, (""Preloading resource #"" + (java.lang.Integer.toHexString(id)))); } if (id != 0) { com.android.internal.os.Drawable dr = com.android.internal.os.ZygoteInit.mResources.getDrawable(id); if (((dr.getChangingConfigurations()) & (~(ActivityInfo.CONFIG_FONT_SCALE))) != 0) { android.util.Log.w(com.android.internal.os.ZygoteInit.TAG, ((((""Preloaded drawable resource #0x"" + (java.lang.Integer.toHexString(id))) + "" ("") + (ar.getString(i))) + "") that varies with configuration!!"")); } } } return N; }",cddd12e02dfb44895e4478d44a21910f37278f55,"preloadDrawables(dalvik.system.VMRuntime,android.content.res.TypedArray)","preloadDrawables(dalvik.system.VMRuntime,android.content.res.TypedArray)",2,13,"private static int preloadDrawables(dalvik.system.VMRuntime runtime, android.content.res.TypedArray ar) { int N = ar.length(); for (int i = 0; i < N; i++) { if ((android.os.Debug.getGlobalAllocSize()) > (com.android.internal.os.ZygoteInit.PRELOAD_GC_THRESHOLD)) { if (false) { android.util.Log.v(com.android.internal.os.ZygoteInit.TAG, ("" GC at "" + (android.os.Debug.getGlobalAllocSize()))); } java.lang.System.gc(); runtime.runFinalizationSync(); android.os.Debug.resetGlobalAllocSize(); } int id = ar.getResourceId(i, 0); if (false) { android.util.Log.v(com.android.internal.os.ZygoteInit.TAG, (""Preloading resource #"" + (java.lang.Integer.toHexString(id)))); } if (id != 0) { android.graphics.drawable.Drawable dr = com.android.internal.os.ZygoteInit.mResources.getDrawable(id); if (((dr.getChangingConfigurations()) & (~(android.content.pm.ActivityInfo.CONFIG_FONT_SCALE))) != 0) { android.util.Log.w(com.android.internal.os.ZygoteInit.TAG, ((((""Preloaded drawable resource #0x"" + (java.lang.Integer.toHexString(id))) + "" ("") + (ar.getString(i))) + "") that varies with configuration!!"")); } } } return N; }",2cab1d24492d7d3c538289a8b4dd4523d8cc94d7,"preloadDrawables(dalvik.system.VMRuntime,android.content.res.TypedArray)",174069,355,359
79815,build-system_builder_src_main_java_com_android_builder_internal_packaging_Packager.java,5.0,"public com.android.builder.internal.packaging.Packager.JarStatus addResourcesFromJar(java.io.File jarFile) throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SealedPackageException { if (mIsSealed) { throw new com.android.builder.packaging.SealedPackageException(""APK is already sealed""); } try { mLogger.verbose(""%s:"", jarFile); mFilter.reset(jarFile); java.io.FileInputStream fis = new java.io.FileInputStream(jarFile); mBuilder.writeZip(fis, mFilter); return new com.android.builder.internal.packaging.Packager.JarStatusImpl(mFilter.getNativeLibs(), mFilter.getNativeLibsConflict()); } catch (com.android.builder.packaging.DuplicateFileException e) { mBuilder.cleanUp(); throw e; } catch (java.lang.Exception e) { mBuilder.cleanUp(); throw new com.android.builder.packaging.PackagerException(e, ""Failed to add %s"", jarFile); } }",05372415e2dcfb100cf4ad1a3d5eca2f21385afc,"public com.android.builder.internal.packaging.Packager.JarStatus addResourcesFromJar(java.io.File jarFile) throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SealedPackageException { if (mIsSealed) { throw new com.android.builder.packaging.SealedPackageException(""APK is already sealed""); } java.io.FileInputStream fis = null; try { mLogger.verbose(""%s:"", jarFile); mFilter.reset(jarFile); fis = new java.io.FileInputStream(jarFile); mBuilder.writeZip(fis, mFilter); return new com.android.builder.internal.packaging.Packager.JarStatusImpl(mFilter.getNativeLibs(), mFilter.getNativeLibsConflict()); } catch (com.android.builder.packaging.DuplicateFileException e) { mBuilder.cleanUp(); throw e; } catch (java.lang.Exception e) { mBuilder.cleanUp(); throw new com.android.builder.packaging.PackagerException(e, ""Failed to add %s"", jarFile); } finally { if (fis != null) { com.google.common.io.Closeables.closeQuietly(fis); } } }",a73ad163797b22c0b78dd1797b352d741fcaed38,addResourcesFromJar(java.io.File),addResourcesFromJar(java.io.File),4,5,"public com.android.builder.internal.packaging.Packager.JarStatus addResourcesFromJar(java.io.File jarFile) throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SealedPackageException { if (mIsSealed) { throw new com.android.builder.packaging.SealedPackageException(""APK is already sealed""); } java.io.FileInputStream fis = null; try { mLogger.verbose(""%s:"", jarFile); mFilter.reset(jarFile); fis = new java.io.FileInputStream(jarFile); mBuilder.writeZip(fis, mFilter); return new com.android.builder.internal.packaging.Packager.JarStatusImpl(mFilter.getNativeLibs(), mFilter.getNativeLibsConflict()); } catch (com.android.builder.packaging.DuplicateFileException e) { mBuilder.cleanUp(); throw e; } catch (java.lang.Exception e) { mBuilder.cleanUp(); throw new com.android.builder.packaging.PackagerException(e, ""Failed to add %s"", jarFile); } finally { com.google.common.io.Closeables.closeQuietly(fis); } }",955e9758d2aa645a15a36a203ff4ea17f7e8ae4b,addResourcesFromJar(java.io.File),38328,276,268
209039,tests_tests_media_src_android_media_cts_DecoderTest.java,81.0,"public void testTunneledVideoPlayback() throws java.lang.Exception { if (!(isVideoFeatureSupported(MediaFormat.MIMETYPE_VIDEO_AVC, CodecCapabilities.FEATURE_TunneledPlayback))) { android.cts.util.MediaUtils.skipTest(android.media.cts.DecoderTest.TAG, ""No tunneled video playback codec found!""); return; } android.media.AudioManager am = ((android.media.AudioManager) (mContext.getSystemService(Context.AUDIO_SERVICE))); mMediaCodecPlayer = new android.media.cts.MediaCodecTunneledPlayer(getActivity().getSurfaceHolder(), true, am.generateAudioSessionId()); mMediaCodecPlayer.setAudioDataSource(android.media.cts.DecoderTest.AUDIO_URL, null); mMediaCodecPlayer.setVideoDataSource(android.media.cts.DecoderTest.VIDEO_URL, null); assertTrue(""MediaCodecPlayer.start() failed!"", mMediaCodecPlayer.start()); assertTrue(""MediaCodecPlayer.prepare() failed!"", mMediaCodecPlayer.prepare()); mMediaCodecPlayer.startThread(); long timeOut = (java.lang.System.currentTimeMillis()) + (4 * (android.media.cts.DecoderTest.PLAY_TIME_MS)); while ((timeOut > (java.lang.System.currentTimeMillis())) && (!(mMediaCodecPlayer.isEnded()))) { java.lang.Thread.sleep(android.media.cts.DecoderTest.SLEEP_TIME_MS); if ((mMediaCodecPlayer.getCurrentPosition()) >= (mMediaCodecPlayer.getDuration())) { android.util.Log.d(android.media.cts.DecoderTest.TAG, (((""testTunneledVideoPlayback -- current pos = "" + (mMediaCodecPlayer.getCurrentPosition())) + "">= duration = "") + (mMediaCodecPlayer.getDuration()))); break; } } assertTrue(""Tunneled video playback timeout exceeded!"", (timeOut > (java.lang.System.currentTimeMillis()))); android.util.Log.d(android.media.cts.DecoderTest.TAG, ""playVideo player.reset()""); mMediaCodecPlayer.reset(); }",e2ded04b3ca396eb3580c6a22cab7e1ed40cadfd,"public void testTunneledVideoPlayback() throws java.lang.Exception { if (!(isVideoFeatureSupported(MediaFormat.MIMETYPE_VIDEO_AVC, CodecCapabilities.FEATURE_TunneledPlayback))) { android.cts.util.MediaUtils.skipTest(android.media.cts.DecoderTest.TAG, ""No tunneled video playback codec found!""); return; } android.media.AudioManager am = ((android.media.AudioManager) (mContext.getSystemService(Context.AUDIO_SERVICE))); mMediaCodecPlayer = new android.media.cts.MediaCodecTunneledPlayer(getActivity().getSurfaceHolder(), true, am.generateAudioSessionId()); mMediaCodecPlayer.setAudioDataSource(android.media.cts.DecoderTest.AUDIO_URL, null); mMediaCodecPlayer.setVideoDataSource(android.media.cts.DecoderTest.VIDEO_URL, null); assertTrue(""MediaCodecPlayer.start() failed!"", mMediaCodecPlayer.start()); assertTrue(""MediaCodecPlayer.prepare() failed!"", mMediaCodecPlayer.prepare()); mMediaCodecPlayer.startThread(); final long durationMs = mMediaCodecPlayer.getDuration(); final long timeOutMs = ((java.lang.System.currentTimeMillis()) + durationMs) + (3 * (android.media.cts.DecoderTest.SLEEP_TIME_MS)); while (!(mMediaCodecPlayer.isEnded())) { assertTrue(""Tunneled video playback timeout exceeded"", (timeOutMs > (java.lang.System.currentTimeMillis()))); java.lang.Thread.sleep(android.media.cts.DecoderTest.SLEEP_TIME_MS); if ((mMediaCodecPlayer.getCurrentPosition()) >= (mMediaCodecPlayer.getDuration())) { android.util.Log.d(android.media.cts.DecoderTest.TAG, (((""testTunneledVideoPlayback -- current pos = "" + (mMediaCodecPlayer.getCurrentPosition())) + "">= duration = "") + (mMediaCodecPlayer.getDuration()))); break; } } }",dd718cc6b944c558a088aafd089365cd5753fc0b,testTunneledVideoPlayback(),testTunneledVideoPlayback(),4,81,"public void testTunneledVideoPlayback() throws java.lang.Exception { if (!(isVideoFeatureSupported(MediaFormat.MIMETYPE_VIDEO_AVC, CodecCapabilities.FEATURE_TunneledPlayback))) { android.cts.util.MediaUtils.skipTest(android.media.cts.DecoderTest.TAG, ""No tunneled video playback codec found!""); return; } android.media.AudioManager am = ((android.media.AudioManager) (mContext.getSystemService(Context.AUDIO_SERVICE))); mMediaCodecPlayer = new android.media.cts.MediaCodecTunneledPlayer(getActivity().getSurfaceHolder(), true, am.generateAudioSessionId()); mMediaCodecPlayer.setAudioDataSource(android.media.cts.DecoderTest.AUDIO_URL, null); mMediaCodecPlayer.setVideoDataSource(android.media.cts.DecoderTest.VIDEO_URL, null); assertTrue(""MediaCodecPlayer.start() failed!"", mMediaCodecPlayer.start()); assertTrue(""MediaCodecPlayer.prepare() failed!"", mMediaCodecPlayer.prepare()); mMediaCodecPlayer.startThread(); final long durationMs = mMediaCodecPlayer.getDuration(); final long timeOutMs = ((java.lang.System.currentTimeMillis()) + durationMs) + (5 * 1000); while (!(mMediaCodecPlayer.isEnded())) { assertTrue(""Tunneled video playback timeout exceeded"", (timeOutMs > (java.lang.System.currentTimeMillis()))); java.lang.Thread.sleep(android.media.cts.DecoderTest.SLEEP_TIME_MS); if ((mMediaCodecPlayer.getCurrentPosition()) >= (mMediaCodecPlayer.getDuration())) { android.util.Log.d(android.media.cts.DecoderTest.TAG, (((""testTunneledVideoPlayback -- current pos = "" + (mMediaCodecPlayer.getCurrentPosition())) + "">= duration = "") + (mMediaCodecPlayer.getDuration()))); break; } } }",35cdbad5bf3aef58ca4f5a42f59c431356bdb129,testTunneledVideoPlayback(),299013,431,415
196553,luni_src_test_java_libcore_java_util_GregorianCalendarTest.java,20.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test_computeTime_enteringDST_TimeZone_LosAngeles_2014() { java.util.TimeZone timeZone = java.util.TimeZone.getTimeZone(""America/Los_Angeles""); checkDSTLosAngeles2014(timeZone); }",42f18fbed1a644918609e050fba6f94fe2ea8402,,test_computeTime_enteringDST_TimeZone_LosAngeles_2014(),2,25,"public void test_computeTime_enteringDst_DelegatingTimeZone_LosAngeles_2014() { java.util.TimeZone timeZone = java.util.TimeZone.getTimeZone(""America/Los_Angeles""); timeZone = new libcore.java.util.GregorianCalendarTest.DelegatingTimeZone(timeZone); checkDstLosAngeles2014(timeZone); }",d76b9038c25c04c2333380d7a88a2aa66be81e7a,test_computeTime_enteringDst_DelegatingTimeZone_LosAngeles_2014(),388458,63,89
181343,core_java_android_security_net_config_XmlConfigSource.java,,,,"private void ensureInitialized() { synchronized(mLock) { if (mInitialized) { return; } } android.content.res.XmlResourceParser parser = null; try { parser = mContext.getResources().getXml(mResourceId); parseNetworkSecurityConfig(parser); mContext = null; mInitialized = true; } catch (android.content.res.Resources | org.xmlpull.v1.XmlPullParserException | java.io.IOException | android.security.net.config.XmlConfigSource.ParserException e) { throw new java.lang.RuntimeException(""Failed to parse Xml configuration"", e); } finally { if (parser != null) { parser.close(); } } }",dcda0cec0adee7ad1875021d30e044aa98a5d346,,ensureInitialized(),3,0,"private void ensureInitialized() { synchronized(mLock) { if (mInitialized) { return; } try (android.content.res.XmlResourceParser parser = mContext.getResources().getXml(mResourceId)) { parseNetworkSecurityConfig(parser); mContext = null; mInitialized = true; } catch (android.content.res.Resources | org.xmlpull.v1.XmlPullParserException | java.io.IOException | android.security.net.config.XmlConfigSource.ParserException e) { throw new java.lang.RuntimeException((""Failed to parse XML configuration from "" + (mContext.getResources().getResourceEntryName(mResourceId))), e); } } }",ddc37f409d7c43caaec1c03105e283c0365230fb,ensureInitialized(),216937,141,139
209091,src_com_android_bluetooth_gatt_GattService.java,8.0,"void readCharacteristic(int clientIf, java.lang.String address, int srvcType, int srvcInstanceId, java.util.UUID srvcUuid, int charInstanceId, java.util.UUID charUuid, int authReq) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if ((isRestrictedCharUuid(charUuid)) || (isRestrictedSrvcUuid(srvcUuid))) { enforcePrivilegedPermission(); } if (com.android.bluetooth.gatt.GattService.VDBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, (""readCharacteristic() - address="" + address)); java.lang.Integer connId = mClientMap.connIdByAddress(clientIf, address); if (connId != null) gattClientReadCharacteristicNative(connId, srvcType, srvcInstanceId, srvcUuid.getLeastSignificantBits(), srvcUuid.getMostSignificantBits(), charInstanceId, charUuid.getLeastSignificantBits(), charUuid.getMostSignificantBits(), authReq); else android.util.Log.e(com.android.bluetooth.gatt.GattService.TAG, ((""readCharacteristic() - No connection for "" + address) + ""..."")); }",251286eff8fa063e3ce6a4ada641809f01887518,"void readCharacteristic(int clientIf, java.lang.String address, int handle, int authReq) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.gatt.GattService.VDBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, (""readCharacteristic() - address="" + address)); java.lang.Integer connId = mClientMap.connIdByAddress(clientIf, address); if (connId != null) gattClientReadCharacteristicNative(connId, handle, authReq); else android.util.Log.e(com.android.bluetooth.gatt.GattService.TAG, ((""readCharacteristic() - No connection for "" + address) + ""..."")); }",ad1e63ea31c61febf7df1d44253749f883fb8787,"readCharacteristic(int,java.lang.String,int,int,java.util.UUID,int,java.util.UUID,int)","readCharacteristic(int,java.lang.String,int,int)",5,89,"void readCharacteristic(int clientIf, java.lang.String address, int handle, int authReq) { enforceCallingOrSelfPermission(com.android.bluetooth.gatt.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); if (com.android.bluetooth.gatt.GattService.VDBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, (""readCharacteristic() - address="" + address)); java.lang.Integer connId = mClientMap.connIdByAddress(clientIf, address); if (connId == null) { android.util.Log.e(com.android.bluetooth.gatt.GattService.TAG, ((""readCharacteristic() - No connection for "" + address) + ""..."")); return; } if (!(permissionCheck(connId, handle))) { if (com.android.bluetooth.gatt.GattService.VDBG) android.util.Log.d(com.android.bluetooth.gatt.GattService.TAG, ""readCharacteristic() - permission check failed!""); return; } gattClientReadCharacteristicNative(connId, handle, authReq); }",65b1288d07282f0446b810c66c073961c51a1b64,"readCharacteristic(int,java.lang.String,int,int)",291654,192,260
561294,hostsidetests_services_activityandwindowmanager_windowmanager_frametestapp_src_android_server_frametestapp_DialogTestActivity.java,0.0,private void testExplicitPositionMatchParent() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; params.x = 100; params.y = 100; }); },bf634d32e89212502d1f6de5355f03517dc1d73c,private void testExplicitPositionMatchParent() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; params.width = (100 - (mOutsets.left)) - (mOutsets.right); params.height = (100 - (mOutsets.bottom)) - (mOutsets.top); }); },a7798ef2c076adf5ef49142b3f006c814df3f4bd,testExplicitPositionMatchParent(),testExplicitPositionMatchParent(),5,0,private void testExplicitPositionMatchParent() { doLayoutParamTest((android.view.WindowManager.LayoutParams params) -> { params.width = WindowManager.LayoutParams.MATCH_PARENT; params.height = WindowManager.LayoutParams.MATCH_PARENT; }); },c7358f09c75ea2919ce2db7296657c4d2731bef9,testExplicitPositionMatchParent(),130200,102,54
16610,telephony_java_com_android_internal_telephony_WapPushOverSms.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void bindWapPushManager(boolean repeat) { if ((mWapPushMan) != null) return; final android.content.ServiceConnection wapPushConnection = this; if (repeat) { new java.lang.Thread() { public void run() { while ((mWapPushMan) == null) { mOwner.bindService(new android.content.Intent(com.android.internal.telephony.IWapPushManager.class.getName()), wapPushConnection, Context.BIND_AUTO_CREATE); try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException e) { if (android.util.Config.DEBUG) android.util.Log.v(com.android.internal.telephony.WapPushOverSms.LOG_TAG, ""sleep interrupted.""); } } } }.start(); } else { mOwner.bindService(new android.content.Intent(com.android.internal.telephony.IWapPushManager.class.getName()), wapPushConnection, Context.BIND_AUTO_CREATE); } }",b2c57b089713067bc3550f531d48617be8d2b642,,bindWapPushManager(boolean),7,5,"private void rebindWapPushManager() { if ((mWapPushMan) != null) return; final android.content.ServiceConnection wapPushConnection = this; new java.lang.Thread() { public void run() { while ((mWapPushMan) == null) { mOwner.bindService(new android.content.Intent(com.android.internal.telephony.IWapPushManager.class.getName()), wapPushConnection, Context.BIND_AUTO_CREATE); try { java.lang.Thread.sleep(BIND_RETRY_INTERVAL); } catch (java.lang.InterruptedException e) { if (android.util.Config.DEBUG) android.util.Log.v(com.android.internal.telephony.WapPushOverSms.LOG_TAG, ""sleep interrupted.""); } } } }.start(); }",5b141130bd53cc50a1f0a6538c6e7be85a8c2e71,rebindWapPushManager(),32685,238,187
79531,core_java_android_content_res_AssetManager.java,62.0,final void releaseTheme(int theme) { synchronized(this) { deleteTheme(theme); decRefsLocked(theme); } },f719090f1235bf2c98c6d458db336d97e8056c53,final void releaseTheme(long theme) { synchronized(this) { deleteTheme(theme); decRefsLocked(hashLongToInt(theme)); } },c96763db1a884e5c3a690296450f094893146be5,releaseTheme(int),releaseTheme(long),11,89,final void releaseTheme(long theme) { synchronized(this) { deleteTheme(theme); decRefsLocked(theme); } },64a063c21f0e2f50885e713ef37ffce199defd74,releaseTheme(long),431664,31,27
161350,jack-tests_tests_com_android_jack_switchstatement_SwitchstatementTests.java,39.0,"@org.junit.Test public void testCompile022() throws java.lang.Exception { properties.clear(); properties.put(""jack.optimization.enum.switch"", ""feedback""); java.lang.String packageName = ""com.android.jack.switchstatement.test022.jack""; java.lang.String classPrefix = (packageName.replace('.', '_')) + ""_""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put(""Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo(""java_lang_Thread$State"", true)); checkCompiledCode(packageName, input); }",0c4c852e643e1dcee7119b587acee46204605647,"@org.junit.Test public void testCompile022() throws java.lang.Exception { java.lang.String packageName = ""com.android.jack.switchstatement.test022.jack""; java.lang.String classPrefix = (packageName.replace('.', '_')) + ""_""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put(""Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo(""java_lang_Thread$State"", false)); input.put(""SyntheticSwitchmapClass-*"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo(""java_lang_Thread$State"", true)); checkCompiledCode(packageName, input); }",21b0c24d5d3249546e447a945771244e5f4f3f2a,testCompile022(),testCompile022(),4,37,"@org.junit.Test public void testCompile022() throws java.lang.Exception { java.lang.String packageName = ""com.android.jack.switchstatement.test022.jack""; java.lang.String classPrefix = (packageName.replace('.', '_')) + ""_""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put(""Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(true).specifyInfo(""java_lang_Thread$State"", true)); checkCompiledCode(packageName, input); }",7b1cefdfb90564424be155469f14da3bd38e89d6,testCompile022(),299230,193,149
253791,luni_src_main_java_libcore_io_Os.java,57.0,"public void setsockoptInt(java.io.FileDescriptor fd, int level, int option, int value) throws android.system.ErrnoException;",d680787f6f01ccc4f2f0a59b1dd7a039fc1690d9,"public void setsockoptInt(java.io.FileDescriptor fd, int level, int option, int value) throws libcore.io.ErrnoException;",f041c88483afbc19cbfe6a2afe139f2ba0cf887a,"setsockoptInt(java.io.FileDescriptor,int,int,int)","setsockoptInt(java.io.FileDescriptor,int,int,int)",8,53,"public void setsockoptInt(java.io.FileDescriptor fd, int level, int option, int value) throws android.system.ErrnoException;",d680787f6f01ccc4f2f0a59b1dd7a039fc1690d9,"setsockoptInt(java.io.FileDescriptor,int,int,int)",494668,33,32
347050,service_java_com_android_server_wifi_scanner_WificondWifiScannerImpl.java,31.0,"@java.lang.Override public void pauseBatchedScan() { synchronized(mSettingsLock) { if (com.android.server.wifi.scanner.SupplicantWifiScannerImpl.DBG) android.util.Log.d(com.android.server.wifi.scanner.SupplicantWifiScannerImpl.TAG, ""Pausing scan""); if ((mPendingBackgroundScanSettings) == null) { mPendingBackgroundScanSettings = mBackgroundScanSettings; mPendingBackgroundScanEventHandler = mBackgroundScanEventHandler; } mBackgroundScanSettings = null; mBackgroundScanEventHandler = null; mBackgroundScanPeriodPending = false; mBackgroundScanPaused = true; unscheduleScansLocked(); android.net.wifi.WifiScanner[] results = getLatestBatchedScanResults(true); if ((mPendingBackgroundScanEventHandler) != null) { mPendingBackgroundScanEventHandler.onScanPaused(results); } } processPendingScans(); }",ec58929e1ff45b62fa1e43e70d1f1fcb73601686,"@java.lang.Override public void pauseBatchedScan() { synchronized(mSettingsLock) { if (com.android.server.wifi.scanner.WificondWifiScannerImpl.DBG) android.util.Log.d(com.android.server.wifi.scanner.WificondWifiScannerImpl.TAG, ""Pausing scan""); if ((mPendingBackgroundScanSettings) == null) { mPendingBackgroundScanSettings = mBackgroundScanSettings; mPendingBackgroundScanEventHandler = mBackgroundScanEventHandler; } mBackgroundScanSettings = null; mBackgroundScanEventHandler = null; mBackgroundScanPeriodPending = false; mBackgroundScanPaused = true; unscheduleScansLocked(); android.net.wifi.WifiScanner[] results = getLatestBatchedScanResults(true); if ((mPendingBackgroundScanEventHandler) != null) { mPendingBackgroundScanEventHandler.onScanPaused(results); } } processPendingScans(); }",0c92256c25b45c60ceea5d45907b2d8e8f1a2e4d,pauseBatchedScan(),pauseBatchedScan(),12,33,"@java.lang.Override public void pauseBatchedScan() { synchronized(mSettingsLock) { if (com.android.server.wifi.scanner.WificondScannerImpl.DBG) android.util.Log.d(com.android.server.wifi.scanner.WificondScannerImpl.TAG, ""Pausing scan""); if ((mPendingBackgroundScanSettings) == null) { mPendingBackgroundScanSettings = mBackgroundScanSettings; mPendingBackgroundScanEventHandler = mBackgroundScanEventHandler; } mBackgroundScanSettings = null; mBackgroundScanEventHandler = null; mBackgroundScanPeriodPending = false; mBackgroundScanPaused = true; unscheduleScansLocked(); android.net.wifi.WifiScanner[] results = getLatestBatchedScanResults(true); if ((mPendingBackgroundScanEventHandler) != null) { mPendingBackgroundScanEventHandler.onScanPaused(results); } } processPendingScans(); }",95b3433f5c5b00b62d018d01f0d7ff5a9e632514,pauseBatchedScan(),82470,199,197
240700,luni_src_test_java_libcore_java_net_URLConnectionTest.java,167.0,"private void testConnectViaHttpProxyToHttps(libcore.java.net.URLConnectionTest.ProxyConfig proxyConfig) throws java.lang.Exception { TestSSLContext testSSLContext = TestSSLContext.create(); libcore.java.net.URLConnectionTest.RecordingHostnameVerifier hostnameVerifier = new libcore.java.net.URLConnectionTest.RecordingHostnameVerifier(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), true); server.enqueue(new com.google.mockwebserver.MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders()); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(""this response comes via a secure proxy"")); server.play(); java.net.URL url = new java.net.URL(""https://android.com/foo""); javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (proxyConfig.connect(server, url))); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); connection.setHostnameVerifier(hostnameVerifier); assertContent(""this response comes via a secure proxy"", connection); com.google.mockwebserver.RecordedRequest connect = server.takeRequest(); assertEquals(""Connect line failure on proxy"", ""CONNECT android.com:443 HTTP/1.1"", connect.getRequestLine()); assertContains(connect.getHeaders(), ""Host: android.com""); com.google.mockwebserver.RecordedRequest get = server.takeRequest(); assertEquals(""GET /foo HTTP/1.1"", get.getRequestLine()); assertContains(get.getHeaders(), ""Host: android.com""); assertEquals(java.util.Arrays.asList(""verify android.com""), hostnameVerifier.calls); }",7f513269dd50508aa78073afd86ecebb6b46b9c8,"private void testConnectViaHttpProxyToHttps(libcore.java.net.URLConnectionTest.ProxyConfig proxyConfig) throws java.lang.Exception { TestSSLContext testSSLContext = createTestSSLContext(); libcore.java.net.URLConnectionTest.RecordingHostnameVerifier hostnameVerifier = new libcore.java.net.URLConnectionTest.RecordingHostnameVerifier(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), true); server.enqueue(new com.google.mockwebserver.MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders()); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(""this response comes via a secure proxy"")); server.play(); java.net.URL url = new java.net.URL(""https://android.com/foo""); javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (proxyConfig.connect(server, url))); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); connection.setHostnameVerifier(hostnameVerifier); assertContent(""this response comes via a secure proxy"", connection); com.google.mockwebserver.RecordedRequest connect = server.takeRequest(); assertEquals(""Connect line failure on proxy"", ""CONNECT android.com:443 HTTP/1.1"", connect.getRequestLine()); assertContains(connect.getHeaders(), ""Host: android.com""); com.google.mockwebserver.RecordedRequest get = server.takeRequest(); assertEquals(""GET /foo HTTP/1.1"", get.getRequestLine()); assertContains(get.getHeaders(), ""Host: android.com""); assertEquals(java.util.Arrays.asList(""verify android.com""), hostnameVerifier.calls); }",ccd0b9341509baa37f5b5140fc498e9b69701e2e,testConnectViaHttpProxyToHttps(libcore.java.net.URLConnectionTest$ProxyConfig),testConnectViaHttpProxyToHttps(libcore.java.net.URLConnectionTest$ProxyConfig),4,165,"private void testConnectViaHttpProxyToHttps(libcore.java.net.URLConnectionTest.ProxyConfig proxyConfig) throws java.lang.Exception { TestSSLContext testSSLContext = createDefaultTestSSLContext(); libcore.java.net.URLConnectionTest.RecordingHostnameVerifier hostnameVerifier = new libcore.java.net.URLConnectionTest.RecordingHostnameVerifier(); server.useHttps(testSSLContext.serverContext.getSocketFactory(), true); server.enqueue(new com.google.mockwebserver.MockResponse().setSocketPolicy(SocketPolicy.UPGRADE_TO_SSL_AT_END).clearHeaders()); server.enqueue(new com.google.mockwebserver.MockResponse().setBody(""this response comes via a secure proxy"")); server.play(); java.net.URL url = new java.net.URL(""https://android.com/foo""); javax.net.ssl.HttpsURLConnection connection = ((javax.net.ssl.HttpsURLConnection) (proxyConfig.connect(server, url))); connection.setSSLSocketFactory(testSSLContext.clientContext.getSocketFactory()); connection.setHostnameVerifier(hostnameVerifier); assertContent(""this response comes via a secure proxy"", connection); com.google.mockwebserver.RecordedRequest connect = server.takeRequest(); assertEquals(""Connect line failure on proxy"", ""CONNECT android.com:443 HTTP/1.1"", connect.getRequestLine()); assertContains(connect.getHeaders(), ""Host: android.com""); com.google.mockwebserver.RecordedRequest get = server.takeRequest(); assertEquals(""GET /foo HTTP/1.1"", get.getRequestLine()); assertContains(get.getHeaders(), ""Host: android.com""); assertEquals(java.util.Arrays.asList(""verify android.com""), hostnameVerifier.calls); }",c2983879d28e3f97d89c30974cc6c68cee4eec52,testConnectViaHttpProxyToHttps(libcore.java.net.URLConnectionTest$ProxyConfig),274972,363,364
143322,sched_src_com_android_sched_vfs_InputStreamProvider.java,,,,@javax.annotation.Nonnull java.io.InputStream getInputStream() throws java.io.IOException;,92c925df9444081f97c9a6d36fe93390f5fb9be8,,getInputStream(),3,0,@javax.annotation.Nonnull java.io.InputStream getInputStream() throws com.android.sched.util.file.WrongPermissionException;,73c5069e15d3938fb905f45c02ec84db23e40f31,getInputStream(),382442,21,29
55075,services_java_com_android_server_pm_PackageManagerService.java,23.0,"private void removePackageDataLI(com.android.server.pm.PackageSetting ps, com.android.server.pm.PackageManagerService.PackageRemovedInfo outInfo, int flags, boolean writeSettings) { java.lang.String packageName = ps.name; removePackageLI(ps, ((flags & (com.android.server.pm.PackageManagerService.REMOVE_CHATTY)) != 0)); final com.android.server.pm.PackageSetting deletedPs; synchronized(mPackages) { deletedPs = mSettings.mPackages.get(packageName); if (outInfo != null) { outInfo.removedPackage = packageName; outInfo.removedUsers = (deletedPs != null) ? deletedPs.queryInstalledUsers(com.android.server.pm.PackageManagerService.sUserManager.getUserIds(), true) : null; } } if ((flags & (android.content.pm.PackageManager.DELETE_KEEP_DATA)) == 0) { removeDataDirsLI(packageName); schedulePackageCleaning(packageName, UserHandle.USER_ALL, true); } synchronized(mPackages) { if (deletedPs != null) { if ((flags & (android.content.pm.PackageManager.DELETE_KEEP_DATA)) == 0) { if (outInfo != null) { outInfo.removedAppId = mSettings.removePackageLPw(packageName); } if (deletedPs != null) { updatePermissionsLPw(deletedPs.name, null, 0); if ((deletedPs.sharedUser) != null) { mSettings.updateSharedUserPermsLPw(deletedPs, mGlobalGids); } } clearPackagePreferredActivitiesLPw(deletedPs.name, UserHandle.USER_ALL); } } if (writeSettings) { mSettings.writeLPr(); } } }",3363fb0925d783e02fca2747ea22b25a3ce097e8,"private void removePackageDataLI(com.android.server.pm.PackageSetting ps, com.android.server.pm.PackageManagerService.PackageRemovedInfo outInfo, int flags, boolean writeSettings) { java.lang.String packageName = ps.name; removePackageLI(ps, ((flags & (com.android.server.pm.PackageManagerService.REMOVE_CHATTY)) != 0)); final com.android.server.pm.PackageSetting deletedPs; synchronized(mPackages) { deletedPs = mSettings.mPackages.get(packageName); if (outInfo != null) { outInfo.removedPackage = packageName; outInfo.removedUsers = (deletedPs != null) ? deletedPs.queryInstalledUsers(com.android.server.pm.PackageManagerService.sUserManager.getUserIds(), true) : null; } } if ((flags & (android.content.pm.PackageManager.DELETE_KEEP_DATA)) == 0) { removeDataDirsLI(packageName); schedulePackageCleaning(packageName, UserHandle.USER_ALL, true); } synchronized(mPackages) { if (deletedPs != null) { if ((flags & (android.content.pm.PackageManager.DELETE_KEEP_DATA)) == 0) { if (outInfo != null) { outInfo.removedAppId = mSettings.removePackageLPw(packageName); } if (deletedPs != null) { updatePermissionsLPw(deletedPs.name, null, 0); if ((deletedPs.sharedUser) != null) { mSettings.updateSharedUserPermsLPw(deletedPs, mGlobalGids); } } clearPackagePreferredActivitiesLPw(deletedPs.name, UserHandle.USER_ALL); } } if (writeSettings) { mSettings.writeLPr(); } } final int appId = outInfo.removedAppId; if (appId != (-1)) { android.security.KeyStore keyStore = android.security.KeyStore.getInstance(); for (int userId : com.android.server.pm.PackageManagerService.sUserManager.getUserIds()) { int uid = android.os.UserHandle.getUid(userId, appId); keyStore.clearUid(uid); } } }",a78967c14d6589ed6f4f5279d79875f2492aad28,"removePackageDataLI(com.android.server.pm.PackageSetting,com.android.server.pm.PackageManagerService$PackageRemovedInfo,int,boolean)","removePackageDataLI(com.android.server.pm.PackageSetting,com.android.server.pm.PackageManagerService$PackageRemovedInfo,int,boolean)",3,23,"private void removePackageDataLI(com.android.server.pm.PackageSetting ps, com.android.server.pm.PackageManagerService.PackageRemovedInfo outInfo, int flags, boolean writeSettings) { java.lang.String packageName = ps.name; removePackageLI(ps, ((flags & (com.android.server.pm.PackageManagerService.REMOVE_CHATTY)) != 0)); final com.android.server.pm.PackageSetting deletedPs; synchronized(mPackages) { deletedPs = mSettings.mPackages.get(packageName); if (outInfo != null) { outInfo.removedPackage = packageName; outInfo.removedUsers = (deletedPs != null) ? deletedPs.queryInstalledUsers(com.android.server.pm.PackageManagerService.sUserManager.getUserIds(), true) : null; } } if ((flags & (android.content.pm.PackageManager.DELETE_KEEP_DATA)) == 0) { removeDataDirsLI(packageName); schedulePackageCleaning(packageName, UserHandle.USER_ALL, true); } synchronized(mPackages) { if (deletedPs != null) { if ((flags & (android.content.pm.PackageManager.DELETE_KEEP_DATA)) == 0) { if (outInfo != null) { outInfo.removedAppId = mSettings.removePackageLPw(packageName); } if (deletedPs != null) { updatePermissionsLPw(deletedPs.name, null, 0); if ((deletedPs.sharedUser) != null) { mSettings.updateSharedUserPermsLPw(deletedPs, mGlobalGids); } } clearPackagePreferredActivitiesLPw(deletedPs.name, UserHandle.USER_ALL); } } if (writeSettings) { mSettings.writeLPr(); } } final int appId = outInfo.removedAppId; if (appId != (-1)) { final android.security.KeyStore keyStore = android.security.KeyStore.getInstance(); if (keyStore != null) { for (final int userId : com.android.server.pm.PackageManagerService.sUserManager.getUserIds()) { keyStore.clearUid(android.os.UserHandle.getUid(userId, appId)); } } } }",e9e405d2a3751ffc07cf4b19ff5a37cdce81e91a,"removePackageDataLI(com.android.server.pm.PackageSetting,com.android.server.pm.PackageManagerService$PackageRemovedInfo,int,boolean)",335612,474,479
178479,services_core_java_com_android_server_am_ActivityStackSupervisor.java,113.0,"boolean finishDisabledPackageActivitiesLocked(java.lang.String packageName, java.util.Set<java.lang.String> filterByClasses, boolean doit, boolean evenPersistent, int userId) { boolean didSomething = false; for (int displayNdx = (mActivityDisplays.size()) - 1; displayNdx >= 0; --displayNdx) { final java.util.ArrayList<com.android.server.am.ActivityStack> stacks = mActivityDisplays.valueAt(displayNdx).mStacks; final int numStacks = stacks.size(); for (int stackNdx = 0; stackNdx < numStacks; ++stackNdx) { final com.android.server.am.ActivityStack stack = stacks.get(stackNdx); if (stack.finishDisabledPackageActivitiesLocked(packageName, filterByClasses, doit, evenPersistent, userId)) { didSomething = true; } } } return didSomething; }",536185cde0a061c9df7fd0ef8907568ef0d55095,"boolean finishDisabledPackageActivitiesLocked(java.lang.String packageName, java.util.Set<java.lang.String> filterByClasses, boolean doit, boolean evenPersistent, int userId) { boolean didSomething = false; for (int displayNdx = (mActivityDisplays.size()) - 1; displayNdx >= 0; --displayNdx) { final java.util.ArrayList<com.android.server.am.ActivityStack> stacks = mActivityDisplays.valueAt(displayNdx).mStacks; int stackNdx = (stacks.size()) - 1; while (stackNdx >= 0) { final com.android.server.am.ActivityStack stack = stacks.get(stackNdx); stackNdx--; if (stack.finishDisabledPackageActivitiesLocked(packageName, filterByClasses, doit, evenPersistent, userId)) { didSomething = true; } } } return didSomething; }",5e6151291d8bb0b9e8c25ec0fa9b89c9756297d7,"finishDisabledPackageActivitiesLocked(java.lang.String,java.util.Set,boolean,boolean,int)","finishDisabledPackageActivitiesLocked(java.lang.String,java.util.Set,boolean,boolean,int)",2,113,"boolean finishDisabledPackageActivitiesLocked(java.lang.String packageName, java.util.Set<java.lang.String> filterByClasses, boolean doit, boolean evenPersistent, int userId) { boolean didSomething = false; for (int displayNdx = (mActivityDisplays.size()) - 1; displayNdx >= 0; --displayNdx) { final java.util.ArrayList<com.android.server.am.ActivityStack> stacks = mActivityDisplays.valueAt(displayNdx).mStacks; for (int stackNdx = (stacks.size()) - 1; stackNdx >= 0; --stackNdx) { final com.android.server.am.ActivityStack stack = stacks.get(stackNdx); if (stack.finishDisabledPackageActivitiesLocked(packageName, filterByClasses, doit, evenPersistent, userId)) { didSomething = true; } } } return didSomething; }",895145b541b4381c9957c4251912f8fa55f7ab8c,"finishDisabledPackageActivitiesLocked(java.lang.String,java.util.Set,boolean,boolean,int)",241403,190,191
79091,luni_src_test_java_libcore_java_util_LocaleTest.java,28.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void test_serializedForm() { },11cc0a8baba1d87d93d8e714313fb825062ea280,,test_serializedForm(),3,11,"public void test_setLanguageTag_malformedTags() { java.util.Locale l = libcore.java.util.LocaleTest.fromLanguageTag(""a"", false); assertEquals("""", l.getLanguage()); assertEquals("""", l.getCountry()); assertEquals("""", l.getVariant()); assertEquals("""", l.getScript()); l = libcore.java.util.LocaleTest.fromLanguageTag(""en-US-BA"", false); assertEquals(""en"", l.getLanguage()); assertEquals(""US"", l.getCountry()); assertEquals("""", l.getVariant()); assertEquals("""", l.getScript()); l = libcore.java.util.LocaleTest.fromLanguageTag(""en-FOOOO-BA"", false); assertEquals(""en"", l.getLanguage()); assertEquals("""", l.getCountry()); assertEquals(""FOOOO"", l.getVariant()); assertEquals("""", l.getScript()); l = libcore.java.util.LocaleTest.fromLanguageTag(""en-US-POSIX-P2"", false); assertEquals(""en"", l.getLanguage()); assertEquals(""US"", l.getCountry()); assertEquals(""POSIX"", l.getVariant()); assertEquals("""", l.getScript()); l = libcore.java.util.LocaleTest.fromLanguageTag(""en-Latn-US-P2"", false); assertEquals(""en"", l.getLanguage()); assertEquals(""US"", l.getCountry()); assertEquals(""Latn"", l.getScript()); l = libcore.java.util.LocaleTest.fromLanguageTag(""en-f-f"", false); assertEquals(""en"", l.getLanguage()); assertEquals("""", l.getCountry()); assertEquals("""", l.getVariant()); assertEquals("""", l.getScript()); l = libcore.java.util.LocaleTest.fromLanguageTag(""en-f"", false); assertEquals(""en"", l.getLanguage()); assertEquals("""", l.getCountry()); assertEquals("""", l.getVariant()); assertEquals("""", l.getScript()); l = libcore.java.util.LocaleTest.fromLanguageTag(""en-f-fooobaaaz"", false); assertEquals(""en"", l.getLanguage()); assertEquals("""", l.getCountry()); assertEquals("""", l.getVariant()); assertEquals("""", l.getScript()); l = libcore.java.util.LocaleTest.fromLanguageTag(""en-9-baa"", false); assertEquals(""en"", l.getLanguage()); assertEquals("""", l.getCountry()); assertEquals("""", l.getVariant()); assertEquals("""", l.getScript()); }",97cc76310f5778d853ccd26ab4bacc4114c4944e,test_setLanguageTag_malformedTags(),40835,9,490
233727,jack_src_com_android_jack_optimizations_common_ConcurrentLiteralValueListTracker.java,,,,"@java.lang.Override void mergeWith(int index, @javax.annotation.CheckForNull com.android.jack.ir.ast.JValueLiteral literal) { if (literal != null) { values[index].markExpression(literal); } }",0154d6abe5a08e7512b0dfbffd4b829cde19b729,,"mergeWith(int,com.android.jack.ir.ast.JValueLiteral)",7,2,"@java.lang.Override void mergeWith(@javax.annotation.Nonnegative int index, @javax.annotation.CheckForNull com.android.jack.ir.ast.JValueLiteral literal) { if (literal != null) { values[index].markExpression(literal); } }",3fc402c7b38ebb9ff6f2c4d5eb1158ccdd7cd983,"mergeWith(int,com.android.jack.ir.ast.JValueLiteral)",438844,53,58
109884,build-system_gradle_src_main_groovy_com_android_build_gradle_internal_api_BaseVariantImpl.java,30.0,@java.lang.Override @com.android.annotations.NonNull public java.util.List<com.android.builder.core.DefaultProductFlavor> getProductFlavors() { return getVariantData().getVariantConfiguration().getFlavorConfigs(); },64cd0570afd7c07f56f27c70f18e66a702c2f8e0,@java.lang.Override @com.android.annotations.NonNull public java.util.List<com.android.build.gradle.internal.api.GroupableProductFlavor> getProductFlavors() { return getVariantData().getVariantConfiguration().getFlavorConfigs(); },9c088e6690f022a26027919e342cb856cb585929,getProductFlavors(),getProductFlavors(),8,30,"@java.lang.Override @com.android.annotations.NonNull public java.util.List<com.android.build.gradle.api.GroupableProductFlavor> getProductFlavors() { return new com.android.build.gradle.internal.api.ImmutableFlavorList(getVariantData().getVariantConfiguration().getProductFlavors(), readOnlyObjectProvider); }",0675c311f662c70c9784befadaba3a110fff9e95,getProductFlavors(),453074,58,78
15685,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_resources_configurations_DockModeQualifier.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean isBetterMatchThan(com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier compareTo, com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier reference) { if (compareTo == null) { return true; } com.android.ide.eclipse.adt.internal.resources.configurations.DockModeQualifier compareQualifier = ((com.android.ide.eclipse.adt.internal.resources.configurations.DockModeQualifier) (compareTo)); com.android.ide.eclipse.adt.internal.resources.configurations.DockModeQualifier referenceQualifier = ((com.android.ide.eclipse.adt.internal.resources.configurations.DockModeQualifier) (reference)); if ((compareQualifier.getValue()) == (referenceQualifier.getValue())) { return false; } else if ((mValue) == (com.android.sdklib.resources.DockMode.NONE)) { return true; } return false; }",655de18108754155b71920918e045b0c634c71b4,,"isBetterMatchThan(com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier,com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier)",4,7,"@java.lang.Override public boolean isBetterMatchThan(com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier compareTo, com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier reference) { if (compareTo == null) { return true; } com.android.ide.eclipse.adt.internal.resources.configurations.DockModeQualifier compareQualifier = ((com.android.ide.eclipse.adt.internal.resources.configurations.DockModeQualifier) (compareTo)); com.android.ide.eclipse.adt.internal.resources.configurations.DockModeQualifier referenceQualifier = ((com.android.ide.eclipse.adt.internal.resources.configurations.DockModeQualifier) (reference)); if ((compareQualifier.getValue()) == (referenceQualifier.getValue())) { return false; } else if ((mValue) == (com.android.sdklib.resources.DockMode.NONE)) { return true; } return false; }",074d573753ec536b22d391689835d045fd0b2dee,"isBetterMatchThan(com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier,com.android.ide.eclipse.adt.internal.resources.configurations.ResourceQualifier)",451872,217,223
253791,luni_src_main_java_libcore_io_Os.java,51.0,public void setuid(int uid) throws android.system.ErrnoException;,fd69fcb4b59a726d31bc39d815bf9e7c22763b0b,public void setuid(int uid) throws libcore.io.ErrnoException;,f81af546179383af5743bb0a41d1eacd2095202b,setuid(int),setuid(int),8,49,public void setuid(int uid) throws android.system.ErrnoException;,fd69fcb4b59a726d31bc39d815bf9e7c22763b0b,setuid(int),494694,18,17
194143,ojluni_src_main_java_java_util_TimeZone.java,5.0,"private static java.util.TimeZone getCustomTimeZone(java.lang.String id) { java.util.regex.Matcher m = java.util.TimeZone.CUSTOM_ZONE_ID_PATTERN.matcher(id); if (!(m.matches())) { return null; } int hour; int minute = 0; try { hour = java.lang.Integer.parseInt(m.group(1)); if ((m.group(3)) != null) { minute = java.lang.Integer.parseInt(m.group(3)); } } catch (java.lang.NumberFormatException impossible) { throw new java.lang.AssertionError(impossible); } if ((((hour < 0) || (hour > 23)) || (minute < 0)) || (minute > 59)) { return null; } char sign = id.charAt(3); int raw = (hour * 3600000) + (minute * 60000); if (sign == '-') { raw = -raw; } java.lang.String cleanId = java.lang.String.format(""GMT%c%02d:%02d"", sign, hour, minute); return new java.util.SimpleTimeZone(raw, cleanId); }",a7cd43e7f0a22efa295c7b391af02df0d5007ff6,"private static java.util.TimeZone getCustomTimeZone(java.lang.String id) { java.util.regex.Matcher m = java.util.TimeZone.CUSTOM_ZONE_ID_PATTERN.matcher(id); if (!(m.matches())) { return null; } int hour; int minute = 0; try { hour = java.lang.Integer.parseInt(m.group(1)); if ((m.group(3)) != null) { minute = java.lang.Integer.parseInt(m.group(3)); } } catch (java.lang.NumberFormatException impossible) { throw new java.lang.AssertionError(impossible); } if ((((hour < 0) || (hour > 23)) || (minute < 0)) || (minute > 59)) { return null; } char sign = id.charAt(3); int raw = (hour * 3600000) + (minute * 60000); if (sign == '-') { raw = -raw; } java.lang.String cleanId = (((((""GMT"" + sign) + (hour < 10 ? ""0"" : """")) + hour) + "":"") + (minute < 10 ? ""0"" : """")) + minute; return new java.util.SimpleTimeZone(raw, cleanId); }",ccb3db1ea999dc0f097f9a87f04d015be2141a9c,getCustomTimeZone(java.lang.String),getCustomTimeZone(java.lang.String),2,5,"private static java.util.TimeZone getCustomTimeZone(java.lang.String id) { java.util.regex.Matcher m = java.util.TimeZone.CUSTOM_ZONE_ID_PATTERN.matcher(id); if (!(m.matches())) { return null; } int hour; int minute = 0; try { hour = java.lang.Integer.parseInt(m.group(1)); if ((m.group(3)) != null) { minute = java.lang.Integer.parseInt(m.group(3)); } } catch (java.lang.NumberFormatException impossible) { throw new java.lang.AssertionError(impossible); } if ((((hour < 0) || (hour > 23)) || (minute < 0)) || (minute > 59)) { return null; } char sign = id.charAt(3); int raw = (hour * 3600000) + (minute * 60000); if (sign == '-') { raw = -raw; } java.lang.String cleanId = java.lang.String.format(java.util.Locale.ROOT, ""GMT%c%02d:%02d"", sign, hour, minute); return new java.util.SimpleTimeZone(raw, cleanId); }",821590d049945e7f99be52d09061ff1a6517935b,getCustomTimeZone(java.lang.String),70793,269,261
243440,test_458-checker-instruction-simplification_src_Main.java,58.0,"public static long AddNeg2(long arg1, long arg2) { long temp = -arg2; return (arg1 + temp) | (arg1 + temp); }",236d214faabd0af92ce3de289d7bf76bf9108194,"public static long AddNeg2(long arg1, long arg2) { if (Main.doThrow) { throw new java.lang.Error(); } long temp = -arg2; return (arg1 + temp) | (arg1 + temp); }",32004d004da7eab44a5aea514a401c461311ac4e,"AddNeg2(long,long)","AddNeg2(long,long)",3,49,"public static long $noinline$AddNeg2(long arg1, long arg2) { if (Main.doThrow) { throw new java.lang.Error(); } long temp = -arg2; return (arg1 + temp) | (arg1 + temp); }",832978741fa1d4b6a5617aa8db7c72a97cb16155,"$noinline$AddNeg2(long,long)",118257,51,56
394932,core_java_android_net_ConnectivityManager.java,34.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.lang.RuntimeException rethrowServiceException(android.os.ServiceSpecificException e) { switch (e.errorCode) { case android.net.ConnectivityManager.Errors.TOO_MANY_REQUESTS : return new android.net.ConnectivityManager.TooManyRequestsException(); default : android.util.Log.w(android.net.ConnectivityManager.TAG, (""Unknown service error code "" + (e.errorCode))); return new java.lang.RuntimeException(e); } }",c6e851bbcc70fc51e3a23523883e88a45d88a294,,rethrowServiceException(android.os.ServiceSpecificException),2,58,"private static java.lang.RuntimeException convertServiceException(android.os.ServiceSpecificException e) { switch (e.errorCode) { case android.net.ConnectivityManager.Errors.TOO_MANY_REQUESTS : return new android.net.ConnectivityManager.TooManyRequestsException(); default : android.util.Log.w(android.net.ConnectivityManager.TAG, (""Unknown service error code "" + (e.errorCode))); return new java.lang.RuntimeException(e); } }",d54c4f5a081b32efbe8f85d289da77e0ac93e9f3,convertServiceException(android.os.ServiceSpecificException),169170,104,104
41115,src_java_com_android_internal_telephony_UiccCardApplication.java,,,,"public void setIccLockEnabled(boolean enabled, java.lang.String password, android.os.Message onComplete) { int serviceClassX; serviceClassX = ((CommandsInterface.SERVICE_CLASS_VOICE) + (CommandsInterface.SERVICE_CLASS_DATA)) + (CommandsInterface.SERVICE_CLASS_FAX); mCi.setFacilityLockForApp(CommandsInterface.CB_FACILITY_BA_SIM, enabled, password, serviceClassX, mAid, onComplete); }",efff2f4826ba18695240278b42f5c1cafa5280b2,,"setIccLockEnabled(boolean,java.lang.String,android.os.Message)",22,30,"public void setIccLockEnabled(boolean enabled, java.lang.String password, android.os.Message onComplete) { synchronized(mLock) { int serviceClassX; serviceClassX = ((CommandsInterface.SERVICE_CLASS_VOICE) + (CommandsInterface.SERVICE_CLASS_DATA)) + (CommandsInterface.SERVICE_CLASS_FAX); mDesiredPinLocked = enabled; mCi.setFacilityLockForApp(CommandsInterface.CB_FACILITY_BA_SIM, enabled, password, serviceClassX, mAid, mHandler.obtainMessage(com.android.internal.telephony.UiccCardApplication.EVENT_CHANGE_FACILITY_LOCK_DONE, onComplete)); } }",ae8746cd58dbae4e4ef0b476157b65d2fe4acea0,"setIccLockEnabled(boolean,java.lang.String,android.os.Message)",499273,108,153
671699,src_com_android_bluetooth_a2dp_A2dpService.java,51.0,"@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : quiet mode enabled"")); return false; } if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : too many connected devices"")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); if ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (((((""okToConnect: cannot connect to "" + device) + "" : priority="") + priority) + "" bondState="") + bondState)); return false; } if (priority <= (android.bluetooth.BluetoothProfile.PRIORITY_OFF)) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, (((""okToConnect: cannot connect to "" + device) + "" : priority="") + priority)); return false; } return true; }",616f0618cabdec19b36ade995cc7114c304fe634,"@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : quiet mode enabled"")); return false; } if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : too many connected devices"")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); boolean isSdpPending = (priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && ((bondState == (android.bluetooth.BluetoothDevice.BOND_BONDING)) || (bondState == (android.bluetooth.BluetoothDevice.BOND_BONDED))); if (((!isSdpPending) && (priority != (android.bluetooth.BluetoothProfile.PRIORITY_ON))) && (priority != (android.bluetooth.BluetoothProfile.PRIORITY_AUTO_CONNECT))) { android.util.Log.w(com.android.bluetooth.a2dp.A2dpService.TAG, (((""okToAcceptConnection: return false, priority="" + priority) + "", bondState="") + bondState)); return false; } return true; }",903d8c003ae3a49be73eb12004ada2d275dc6b52,okToConnect(android.bluetooth.BluetoothDevice),okToConnect(android.bluetooth.BluetoothDevice),12,51,"@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public boolean okToConnect(android.bluetooth.BluetoothDevice device) { if (mAdapterService.isQuietModeEnabled()) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : quiet mode enabled"")); return false; } if (!(connectionAllowedCheckMaxDevices(device))) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""okToConnect: cannot connect to "" + device) + "" : too many connected devices"")); return false; } int priority = getPriority(device); int bondState = mAdapterService.getBondState(device); boolean serviceDiscoveryPending = (priority == (android.bluetooth.BluetoothProfile.PRIORITY_UNDEFINED)) && ((bondState == (android.bluetooth.BluetoothDevice.BOND_BONDING)) || (bondState == (android.bluetooth.BluetoothDevice.BOND_BONDED))); boolean isEnabled = ((priority == (android.bluetooth.BluetoothProfile.PRIORITY_ON)) || (priority == (android.bluetooth.BluetoothProfile.PRIORITY_AUTO_CONNECT))) && ((bondState == (android.bluetooth.BluetoothDevice.BOND_BONDED)) || (bondState == (android.bluetooth.BluetoothDevice.BOND_BONDING))); if ((!serviceDiscoveryPending) && (!isEnabled)) { android.util.Log.w(com.android.bluetooth.a2dp.A2dpService.TAG, (((""okToConnect: return false, priority="" + priority) + "", bondState="") + bondState)); return false; } return true; }",b180baabd718741f3a6fb19d8d0f92efdb93c296,okToConnect(android.bluetooth.BluetoothDevice),160459,350,393
95831,plugins_gradle_tooling-extension-api_src_org_jetbrains_plugins_gradle_model_ExtIdeaCompilerOutput.java,,,,java.io.File getResourcesDir();,c15845a68f0edb4241109129de91efbb76a15c9a,,getResourcesDir(),4,1,@org.gradle.api.Nullable java.io.File getMainResourcesDir();,f2671a971c9e8ffd90a742c715936ec662471a82,getMainResourcesDir(),439950,8,18
161070,jack_src_com_android_jack_jayce_v0003_io_JayceInputStream.java,,,,@java.lang.Override public java.lang.String readUTF() throws java.io.IOException { int length = readInt(); if (length == (-1)) { return null; } byte[] utf8String = new byte[length]; in.readFully(utf8String); return com.android.jack.util.StringUtils.utf8BytesToString(utf8String); },f30e786028ddd040af16cc0355ee98894373a9be,,readUTF(),6,5,@java.lang.Override public java.lang.String readUTF() throws java.io.IOException { int length = readInt(); if (length == (-1)) { return null; } byte[] utf8String = new byte[length]; in.readFully(utf8String); try { return com.android.jack.util.StringUtils.utf8BytesToString(utf8String); } catch (java.text.ParseException e) { throw new com.android.jack.jayce.v0003.io.ParseException(e); } },6c5fffe1391cb91ed4b158fa1800cfe855552e6b,readUTF(),441899,80,115
22268,monkeyrunner_src_com_android_monkeyrunner_core_MonkeyImageBase.java,,,,"public int getPixel(int x, int y) { java.awt.image.BufferedImage image = getBufferedImage(); return image.getRGB(x, y); }",66e1479ae38be10ea10874f47d716d12ac1a4194,,"getPixel(int,int)",8,3,"@java.lang.Override public int getPixel(int x, int y) { java.awt.image.BufferedImage image = getBufferedImage(); return image.getRGB(x, y); }",a76a71e6702bf2053fe97f9e6fb55e450f406835,"getPixel(int,int)",81232,34,40
188251,core_java_android_app_ActivityThread.java,101.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean needsToRegisterAppWithRuntime(android.content.pm.ApplicationInfo appInfo) { android.content.pm.IPackageManager pm = android.app.ActivityThread.getPackageManager(); android.content.pm.PackageInfo pi = null; try { pi = pm.getPackageInfo(appInfo.packageName, 0, android.os.UserHandle.myUserId()); } catch (android.os.RemoteException e) { } if (pi != null) { boolean sharedUserIdSet = (pi.sharedUserId) != null; boolean processNameNotDefault = ((pi.applicationInfo) != null) && (!(appInfo.packageName.equals(pi.applicationInfo.processName))); boolean sharable = sharedUserIdSet || processNameNotDefault; return !sharable; } return false; }",f609b0db194ef38d637da545efeaa695eb61ec7b,,needsToRegisterAppWithRuntime(android.content.pm.ApplicationInfo),10,11,"private static boolean isSharingRuntime(android.content.pm.ApplicationInfo appInfo) { android.content.pm.IPackageManager pm = android.app.ActivityThread.getPackageManager(); android.content.pm.PackageInfo pi = null; try { pi = pm.getPackageInfo(appInfo.packageName, 0, android.os.UserHandle.myUserId()); } catch (android.os.RemoteException e) { } if (pi != null) { boolean sharedUserIdSet = (pi.sharedUserId) != null; boolean processNameNotDefault = ((pi.applicationInfo) != null) && (!(appInfo.packageName.equals(pi.applicationInfo.processName))); boolean sharable = sharedUserIdSet || processNameNotDefault; return sharable; } return true; }",835c9e4271de97695b971459eb3d763b36b013f3,isSharingRuntime(android.content.pm.ApplicationInfo),416649,169,167
328259,jack_src_com_android_jack_debug_DebugVariableInfoMarker.java,1.0,@javax.annotation.Nonnull public com.android.jack.ir.ast.JType getType() { return type; },e2a7cc9b6bc3184c4ed5e584f4dafe3519f23957,@javax.annotation.Nonnull public com.android.jack.ir.ast.JType getType() { assert (type) != null; return type; },117283f9f7344df6b003dee3df8d1ed9cd157b75,getType(),getType(),6,1,@javax.annotation.CheckForNull public com.android.jack.ir.ast.JType getType() { return type; },d3fce1438a6740612da90eac60344035f89b1ad7,getType(),166838,34,27
37720,sdkmanager_libs_sdklib_src_com_android_sdklib_devices_Device.java,,,,public java.util.List<com.android.sdklib.devices.Device.Software> getAllSoftware() { return mSoftware; },ca4d2693e5aef39a137d08d3d8583d82684071d9,,getAllSoftware(),8,0,public java.util.List<com.android.sdklib.devices.Software> getAllSoftware() { return mSoftware; },bdf5fd2cbeff2df857e5abb5e104dfc9126fde0f,getAllSoftware(),17805,30,28
176131,dx_src_com_android_jack_dx_dex_code_form_Form35c.java,2.0,private static int wordCount(com.android.jack.dx.rop.code.RegisterSpecList regs) { int sz = regs.size(); if (sz > (com.android.jack.dx.dex.code.form.Form35c.MAX_NUM_OPS)) { return -1; } int result = 0; for (int i = 0; i < sz; i++) { com.android.jack.dx.rop.code.RegisterSpec one = regs.get(i); result += one.getCategory(); if (!(unsignedFitsInNibble((((one.getReg()) + (one.getCategory())) - 1)))) { return -1; } } return result <= (com.android.jack.dx.dex.code.form.Form35c.MAX_NUM_OPS) ? result : -1; },baec2d91298856cb15cf22a7d04d376040050be8,protected static int wordCount(com.android.jack.dx.rop.code.RegisterSpecList regs) { int sz = regs.size(); if (sz > (com.android.jack.dx.dex.code.form.Form35c.MAX_NUM_OPS)) { return -1; } int result = 0; for (int i = 0; i < sz; i++) { com.android.jack.dx.rop.code.RegisterSpec one = regs.get(i); result += one.getCategory(); if (!(unsignedFitsInNibble((((one.getReg()) + (one.getCategory())) - 1)))) { return -1; } } return result <= (com.android.jack.dx.dex.code.form.Form35c.MAX_NUM_OPS) ? result : -1; },c18d6dc55b49b930d7fdc310c1fbea836e5cd6c6,wordCount(com.android.jack.dx.rop.code.RegisterSpecList),wordCount(com.android.jack.dx.rop.code.RegisterSpecList),10,2,protected static int wordCount(com.android.jack.dx.rop.code.RegisterSpecList regs) { int sz = regs.size(); if (sz > (com.android.jack.dx.dex.code.form.Form35c.MAX_NUM_OPS)) { return -1; } int result = 0; for (int i = 0; i < sz; i++) { com.android.jack.dx.rop.code.RegisterSpec one = regs.get(i); if ((i == 0) && (one.isClosure())) { result += 1; } else { result += one.getCategory(); } if (!(unsignedFitsInNibble((((one.getReg()) + (one.getCategory())) - 1)))) { return -1; } } return result <= (com.android.jack.dx.dex.code.form.Form35c.MAX_NUM_OPS) ? result : -1; },1fdce6fc5d3833d0005dcce6e553a2776026f97a,wordCount(com.android.jack.dx.rop.code.RegisterSpecList),478902,180,201
417101,core_java_android_net_ConnectivityManager.java,116.0,"private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { android.net.ConnectivityManager.checkCallbackNotNull(callback); com.android.internal.util.Preconditions.checkArgument(((action == (android.net.ConnectivityManager.REQUEST)) || (need != null)), ""null NetworkCapabilities""); final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { if (callback.isRegistered()) { android.util.Log.e(android.net.ConnectivityManager.TAG, ""NetworkCallback was already registered""); } android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throw android.net.ConnectivityManager.convertServiceException(e); } return request; }",70be0d8fb7ce4f245ceea12ceb94ff9152b7348d,"private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { android.net.ConnectivityManager.checkCallbackNotNull(callback); com.android.internal.util.Preconditions.checkArgument(((action == (android.net.ConnectivityManager.REQUEST)) || (need != null)), ""null NetworkCapabilities""); final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { if (((callback.networkRequest) != null) && ((callback.networkRequest) != (android.net.ConnectivityManager.NOT_IN_USE))) { android.util.Log.e(android.net.ConnectivityManager.TAG, ""NetworkCallback was already registered""); } android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throw android.net.ConnectivityManager.convertServiceException(e); } return request; }",7cdf6689f71f73b933049f23bdf91aa28c0d2a5e,"sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)","sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)",4,116,"private android.net.NetworkRequest sendRequestForNetwork(android.net.NetworkCapabilities need, android.net.ConnectivityManager.NetworkCallback callback, int timeoutMs, int action, int legacyType, android.net.ConnectivityManager.CallbackHandler handler) { android.net.ConnectivityManager.checkCallbackNotNull(callback); com.android.internal.util.Preconditions.checkArgument(((action == (android.net.ConnectivityManager.REQUEST)) || (need != null)), ""null NetworkCapabilities""); final android.net.NetworkRequest request; try { synchronized(android.net.ConnectivityManager.sCallbacks) { if (((callback.networkRequest) != null) && ((callback.networkRequest) != (android.net.ConnectivityManager.ALREADY_UNREGISTERED))) { android.util.Log.e(android.net.ConnectivityManager.TAG, ""NetworkCallback was already registered""); } android.os.Messenger messenger = new android.os.Messenger(handler); android.os.Binder binder = new android.os.Binder(); if (action == (android.net.ConnectivityManager.LISTEN)) { request = mService.listenForNetwork(need, messenger, binder); } else { request = mService.requestNetwork(need, messenger, timeoutMs, binder, legacyType); } if (request != null) { android.net.ConnectivityManager.sCallbacks.put(request, callback); } callback.networkRequest = request; } } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throw android.net.ConnectivityManager.convertServiceException(e); } return request; }",e1828eee208d3ade695f813b05a1ef4526a49cc8,"sendRequestForNetwork(android.net.NetworkCapabilities,android.net.ConnectivityManager$NetworkCallback,int,int,int,android.net.ConnectivityManager$CallbackHandler)",95482,355,355
432981,luni_src_test_java_libcore_java_util_zip_ZipEntryTest.java,12.0,"private static void checkSetTime(long time) throws java.io.IOException { java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry(""x""); ze.setSize(0); ze.setTime(time); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(time, zipFile.getEntry(""x"").getTime()); zipFile.close(); }",9d1e3ac07070207271ebe1977310a505845cb29a,"private void checkSetTime(long time) throws java.io.IOException { java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(mFile); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry(""x""); ze.setSize(0); ze.setTime(time); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(mFile); assertEquals(time, zipFile.getEntry(""x"").getTime()); zipFile.close(); }",c2d5fb0b01914736ad30257c469c7aaf990b8203,checkSetTime(long),checkSetTime(long),3,11,"private void checkSetTime(long time) throws java.io.IOException { java.io.File f = createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry(""x""); ze.setSize(0); ze.setTime(time); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(time, zipFile.getEntry(""x"").getTime()); zipFile.close(); }",a30a12db475591a815382be0c9ff7a38aa086cba,checkSetTime(long),443133,135,145
252478,java_tests_RsTest_src_com_android_rs_test_UT_alloc.java,1.0,"public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_alloc s = new com.android.rs.test.ScriptC_alloc(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_root(s.get_aRaw()); s.invoke_alloc_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }",437077954b12cace26517a6b556add5cc04cd7aa,"public void run() { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create(mCtx); com.android.rs.test.ScriptC_alloc s = new com.android.rs.test.ScriptC_alloc(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_root(s.get_aRaw()); s.invoke_alloc_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }",b9ba59c38a95d5f7895c28cedebe64e897f7efa1,run(),run(),7,1,"public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_alloc s = new com.android.rs.test.ScriptC_alloc(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_root(s.get_aRaw()); s.invoke_alloc_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }",437077954b12cace26517a6b556add5cc04cd7aa,run(),379334,118,124
252341,jack-tests_src_com_android_jack_test_toolchain_JackCliToolchain.java,4.0,"protected void libToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> commandLine, @javax.annotation.Nonnull java.lang.String classpath, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { buildJackCall(commandLine); commandLine.add(""--verbose""); commandLine.add(verbosityLevel.name()); commandLine.add(""--sanity-checks""); commandLine.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { commandLine.add(""--incremental-folder""); commandLine.add(incrementalFolder.getAbsolutePath()); } for (java.io.File res : resImport) { commandLine.add(""--import-resource""); commandLine.add(res.getPath()); } for (java.io.File meta : metaImport) { commandLine.add(""--import-meta""); commandLine.add(meta.getPath()); } if ((outputJack) != null) { if (zipOutputJackFiles) { commandLine.add(""--output-jack""); } else { commandLine.add(""--output-jack-dir""); } commandLine.add(outputJack.getAbsolutePath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, commandLine); if (!(classpath.equals(""""))) { commandLine.add(""--classpath""); commandLine.add(classpath); } for (java.io.File jarjarFile : jarjarRules) { commandLine.add(""--config-jarjar""); commandLine.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { commandLine.add(""--config-proguard""); commandLine.add(flags.getAbsolutePath()); } if (withDebugInfos) { commandLine.add(""-g""); } addPluginPath(commandLine); addPluginNames(commandLine); libToImportStaticLibs(commandLine, in); }",8c49eca0ab3c73776a07bb57cc9209267b3c89b5,"protected void libToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> commandLine, @javax.annotation.Nonnull java.lang.String classpath, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { buildJackCall(commandLine); commandLine.add(""--verbose""); commandLine.add(verbosityLevel.name()); commandLine.add(""--sanity-checks""); commandLine.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { commandLine.add(""--incremental-folder""); commandLine.add(incrementalFolder.getAbsolutePath()); } for (java.io.File res : resImport) { commandLine.add(""--import-resource""); commandLine.add(res.getPath()); } for (java.io.File meta : metaImport) { commandLine.add(""--import-meta""); commandLine.add(meta.getPath()); } if ((outputJack) != null) { if (zipOutputJackFiles) { commandLine.add(""--output-jack""); commandLine.add(outputJack.getAbsolutePath()); } else { if ((incrementalFolder) != null) { throw new java.lang.UnsupportedOperationException(); } addPropertiesForOutputJackDir(commandLine, outputJack); } } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, commandLine); if (!(classpath.equals(""""))) { commandLine.add(""--classpath""); commandLine.add(classpath); } for (java.io.File jarjarFile : jarjarRules) { commandLine.add(""--config-jarjar""); commandLine.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { commandLine.add(""--config-proguard""); commandLine.add(flags.getAbsolutePath()); } if (withDebugInfos) { commandLine.add(""-g""); } addPluginPath(commandLine); addPluginNames(commandLine); libToImportStaticLibs(commandLine, in); }",bc6d0c01f3d1c81ce3b0968dcaa2ec075dff359a,"libToCommon(java.util.List,java.lang.String,java.io.File[])","libToCommon(java.util.List,java.lang.String,java.io.File[])",4,4,"protected void libToCommon(@javax.annotation.Nonnull java.util.List<java.lang.String> commandLine, @javax.annotation.Nonnull java.lang.String classpath, @javax.annotation.Nonnull java.io.File[] in) throws java.lang.Exception { buildJackCall(commandLine); commandLine.add(""--verbose""); commandLine.add(verbosityLevel.name()); commandLine.add(""--sanity-checks""); commandLine.add(java.lang.Boolean.toString(sanityChecks)); if ((incrementalFolder) != null) { commandLine.add(""--incremental-folder""); commandLine.add(incrementalFolder.getAbsolutePath()); } for (java.io.File res : resImport) { commandLine.add(""--import-resource""); commandLine.add(res.getPath()); } for (java.io.File meta : metaImport) { commandLine.add(""--import-meta""); commandLine.add(meta.getPath()); } if ((outputJack) != null) { addOutputJack(commandLine, outputJack, zipOutputJackFiles); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, commandLine); if (!(classpath.equals(""""))) { commandLine.add(""--classpath""); commandLine.add(classpath); } for (java.io.File jarjarFile : jarjarRules) { commandLine.add(""--config-jarjar""); commandLine.add(jarjarFile.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { commandLine.add(""--config-proguard""); commandLine.add(flags.getAbsolutePath()); } if (withDebugInfos) { commandLine.add(""-g""); } addPluginPath(commandLine); addPluginNames(commandLine); libToImportStaticLibs(commandLine, in); }",d2bd40b17ae5e6532cfad4cac43d8a8dc5f9891c,"libToCommon(java.util.List,java.lang.String,java.io.File[])",33733,425,377
109435,sdk-common_src_test_java_com_android_ide_common_build_SplitOutputMatcherTest.java,30.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.android.annotations.Nullable @java.lang.Override public java.lang.String getFilter(com.android.ide.common.build.FilterType filterType) { if (((densityFilter) != null) && (filterType == (FilterType.DENSITY))) { return densityFilter; } else if (((abiFilter) != null) && (filterType == (FilterType.ABI))) { return abiFilter; } return null; },5c1931e27599d130c4fae1126e543546239d1a48,,getFilter(com.android.ide.common.build.FilterType),15,30,@com.android.annotations.Nullable @java.lang.Override public java.lang.String getFilter(java.lang.String filterType) { if (((densityFilter) != null) && (filterType.equals(OutputFile.DENSITY))) { return densityFilter; } else if (((abiFilter) != null) && (filterType.equals(OutputFile.ABI))) { return abiFilter; } return null; },d138c57c011c08b1171fca031a9d5d5ea05eedf1,getFilter(java.lang.String),226326,98,91
17745,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_UpdaterData.java,31.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean loadRemoteAddonsList() { final boolean[] result = new boolean[]{ false }; mTaskFactory.start(""Load Add-ons List"", new com.android.sdklib.internal.repository.ITask() { public void run(com.android.sdklib.internal.repository.ITaskMonitor monitor) { java.lang.String url = java.lang.System.getenv(""SDK_UPDATER_ADDONS_LIST""); if (url == null) { url = com.android.sdklib.repository.SdkAddonsListConstants.URL_ADDON_LIST; } if (getSettingsController().getForceHttp()) { url = url.replaceAll(""https://"", ""http://""); } com.android.sdklib.internal.repository.AddonsListFetcher fetcher = new com.android.sdklib.internal.repository.AddonsListFetcher(); com.android.sdklib.internal.repository.AddonsListFetcher.Site[] sites = fetcher.fetch(monitor, url); if (sites != null) { mSources.removeAll(SdkSourceCategory.ADDONS_3RD_PARTY); for (com.android.sdklib.internal.repository.AddonsListFetcher.Site s : sites) { mSources.add(SdkSourceCategory.ADDONS_3RD_PARTY, new com.android.sdklib.internal.repository.SdkAddonSource(s.getUrl(), s.getUiName())); } result[0] = true; } } }); return result[0]; }",e603ec4b47e3aabd53780ebd4cc17af0130f40bd,,loadRemoteAddonsList(),3,37,"public void loadRemoteAddonsList() { if ((mStateFetchRemoteAddonsList) != 0) { return; } mTaskFactory.start(""Load Add-ons List"", new com.android.sdklib.internal.repository.ITask() { public void run(com.android.sdklib.internal.repository.ITaskMonitor monitor) { loadRemoteAddonsListInTask(monitor); } }); }",26228fb36bacc36afb12b6c6b028247b041df626,loadRemoteAddonsList(),435890,319,85
16553,hierarchyviewer2_libs_hierarchyviewerlib_src_com_android_hierarchyviewerlib_ui_TreeViewOverview.java,9.0,"public void paintControl(org.eclipse.swt.events.PaintEvent e) { synchronized(this) { if (((tree) != null) && ((viewport) != null)) { e.gc.setBackground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_WHITE)); e.gc.fillRectangle(0, 0, getBounds().width, getBounds().height); e.gc.setTransform(transform); org.eclipse.swt.graphics.Path connectionPath = new org.eclipse.swt.graphics.Path(org.eclipse.swt.widgets.Display.getDefault()); paintRecursive(e.gc, tree, connectionPath); e.gc.drawPath(connectionPath); connectionPath.dispose(); e.gc.setAlpha(80); e.gc.setBackground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_DARK_GRAY)); e.gc.fillRectangle(((int) (viewport.x)), ((int) (viewport.y)), ((int) (java.lang.Math.ceil(viewport.width))), ((int) (java.lang.Math.ceil(viewport.height)))); e.gc.setAlpha(255); e.gc.setForeground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_BLACK)); e.gc.setLineWidth(((int) (java.lang.Math.ceil((2 / (scale)))))); e.gc.drawRectangle(((int) (viewport.x)), ((int) (viewport.y)), ((int) (java.lang.Math.ceil(viewport.width))), ((int) (java.lang.Math.ceil(viewport.height)))); } } }",16d8ca8d6309394f1bc8a4fc2de21e376ff4be7a,"public void paintControl(org.eclipse.swt.events.PaintEvent e) { synchronized(this) { if (((tree) != null) && ((viewport) != null)) { e.gc.setBackground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_WHITE)); e.gc.fillRectangle(0, 0, getBounds().width, getBounds().height); e.gc.setTransform(transform); e.gc.setLineWidth(((int) (java.lang.Math.ceil((0.7 / (scale)))))); org.eclipse.swt.graphics.Path connectionPath = new org.eclipse.swt.graphics.Path(org.eclipse.swt.widgets.Display.getDefault()); paintRecursive(e.gc, tree, connectionPath); e.gc.drawPath(connectionPath); connectionPath.dispose(); e.gc.setAlpha(80); e.gc.setBackground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_DARK_GRAY)); e.gc.fillRectangle(((int) (viewport.x)), ((int) (viewport.y)), ((int) (java.lang.Math.ceil(viewport.width))), ((int) (java.lang.Math.ceil(viewport.height)))); e.gc.setAlpha(255); e.gc.setForeground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_BLACK)); e.gc.setLineWidth(((int) (java.lang.Math.ceil((2 / (scale)))))); e.gc.drawRectangle(((int) (viewport.x)), ((int) (viewport.y)), ((int) (java.lang.Math.ceil(viewport.width))), ((int) (java.lang.Math.ceil(viewport.height)))); } } }",d1b20ec3750d4e40f79705e40033b296e44ff58a,paintControl(org.eclipse.swt.events.PaintEvent),paintControl(org.eclipse.swt.events.PaintEvent),14,10,"public void paintControl(org.eclipse.swt.events.PaintEvent e) { synchronized(this) { if (((tree) != null) && ((viewport) != null)) { e.gc.setBackground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_BLACK)); e.gc.setForeground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_WHITE)); e.gc.fillRectangle(0, 0, getBounds().width, getBounds().height); e.gc.setTransform(transform); e.gc.setLineWidth(((int) (java.lang.Math.ceil((0.7 / (scale)))))); org.eclipse.swt.graphics.Path connectionPath = new org.eclipse.swt.graphics.Path(org.eclipse.swt.widgets.Display.getDefault()); paintRecursive(e.gc, tree, connectionPath); e.gc.drawPath(connectionPath); connectionPath.dispose(); e.gc.setAlpha(50); e.gc.setBackground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_WHITE)); e.gc.fillRectangle(((int) (viewport.x)), ((int) (viewport.y)), ((int) (java.lang.Math.ceil(viewport.width))), ((int) (java.lang.Math.ceil(viewport.height)))); e.gc.setAlpha(255); e.gc.setForeground(org.eclipse.swt.widgets.Display.getDefault().getSystemColor(SWT.COLOR_DARK_GRAY)); e.gc.setLineWidth(((int) (java.lang.Math.ceil((2 / (scale)))))); e.gc.drawRectangle(((int) (viewport.x)), ((int) (viewport.y)), ((int) (java.lang.Math.ceil(viewport.width))), ((int) (java.lang.Math.ceil(viewport.height)))); } } }",a23c84c310ccbc45e703ad3445d3abee9ee3d10e,paintControl(org.eclipse.swt.events.PaintEvent),450879,400,425
362753,tests_wifitests_src_com_android_server_wifi_WifiServiceImplTest.java,14.0,"@org.junit.Test public void testSetWifiDisabledSuccess() throws java.lang.Exception { when(mSettingsStore.handleWifiToggled(eq(false))).thenReturn(true); assertTrue(mWifiServiceImpl.setWifiEnabled(com.android.server.wifi.WifiServiceImplTest.TEST_PACKAGE_NAME, false)); verify(mWifiController).obtainMessageAndSend(eq(com.android.server.wifi.WifiController.CMD_WIFI_TOGGLED)); }",2f07140843009d443a87c91e2b9709310722620c,"@org.junit.Test public void testSetWifiDisabledSuccess() throws java.lang.Exception { when(mWifiStateMachine.syncGetWifiApState()).thenReturn(WifiManager.WIFI_AP_STATE_DISABLED); when(mSettingsStore.handleWifiToggled(eq(false))).thenReturn(true); assertTrue(mWifiServiceImpl.setWifiEnabled(com.android.server.wifi.WifiServiceImplTest.TEST_PACKAGE_NAME, false)); verify(mWifiController).obtainMessageAndSend(eq(com.android.server.wifi.WifiController.CMD_WIFI_TOGGLED)); }",eb1b740613e80b9c408223f95d8121880a85049c,testSetWifiDisabledSuccess(),testSetWifiDisabledSuccess(),3,14,"@org.junit.Test public void testSetWifiDisabledSuccess() throws java.lang.Exception { when(mWifiStateMachine.syncGetWifiApState()).thenReturn(WifiManager.WIFI_AP_STATE_DISABLED); when(mSettingsStore.handleWifiToggled(eq(false))).thenReturn(true); assertTrue(mWifiServiceImpl.setWifiEnabled(com.android.server.wifi.WifiServiceImplTest.TEST_PACKAGE_NAME, false)); verify(mWifiController).sendMessage(eq(com.android.server.wifi.WifiController.CMD_WIFI_TOGGLED)); }",e0e162dd656575b9417680df5bc3be62dc4c9342,testSetWifiDisabledSuccess(),288897,130,127
48537,builder_src_main_java_com_android_builder_resources_ResourceMerger.java,1.0,"public void writeBlobTo(java.io.File blobRootFolder) throws java.io.IOException { javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance(); factory.setNamespaceAware(true); factory.setValidating(false); factory.setIgnoringComments(true); javax.xml.parsers.DocumentBuilder builder; try { builder = factory.newDocumentBuilder(); org.w3c.dom.Document document = builder.newDocument(); org.w3c.dom.Node rootNode = document.createElement(com.android.builder.resources.ResourceMerger.NODE_MERGER); document.appendChild(rootNode); for (com.android.builder.resources.ResourceSet resourceSet : mResourceSets) { org.w3c.dom.Node resourceSetNode = document.createElement(com.android.builder.resources.ResourceMerger.NODE_RESOURCE_SET); rootNode.appendChild(resourceSetNode); resourceSet.appendToXml(resourceSetNode, document); } java.lang.String content = com.android.ide.common.xml.XmlPrettyPrinter.prettyPrint(document); blobRootFolder.mkdirs(); com.google.common.io.Files.write(content, new java.io.File(blobRootFolder, com.android.builder.resources.ResourceMerger.FN_MERGER_XML), Charsets.UTF_8); } catch (javax.xml.parsers.ParserConfigurationException e) { throw new java.io.IOException(e); } }",8d8e30426568eed3470d1e620b03b98efbb2e25e,"public void writeBlobTo(java.io.File blobRootFolder) throws java.io.IOException { javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance(); factory.setNamespaceAware(true); factory.setValidating(false); factory.setIgnoringComments(true); javax.xml.parsers.DocumentBuilder builder; try { builder = factory.newDocumentBuilder(); org.w3c.dom.Document document = builder.newDocument(); org.w3c.dom.Node rootNode = document.createElement(com.android.builder.resources.ResourceMerger.NODE_MERGER); document.appendChild(rootNode); for (com.android.builder.resources.ResourceSet resourceSet : mResourceSets) { org.w3c.dom.Node resourceSetNode = document.createElement(com.android.builder.resources.ResourceMerger.NODE_RESOURCE_SET); rootNode.appendChild(resourceSetNode); resourceSet.appendToXml(resourceSetNode, document); } java.lang.String content = com.android.ide.common.xml.XmlPrettyPrinter.prettyPrint(document); if (!(blobRootFolder.mkdirs())) { throw new java.io.IOException((""Failed to create directory "" + blobRootFolder)); } com.google.common.io.Files.write(content, new java.io.File(blobRootFolder, com.android.builder.resources.ResourceMerger.FN_MERGER_XML), Charsets.UTF_8); } catch (javax.xml.parsers.ParserConfigurationException e) { throw new java.io.IOException(e); } }",6fd15b337e71ae9f2e4f838d340bb5ce8935852c,writeBlobTo(java.io.File),writeBlobTo(java.io.File),4,1,"public void writeBlobTo(java.io.File blobRootFolder) throws java.io.IOException { javax.xml.parsers.DocumentBuilderFactory factory = javax.xml.parsers.DocumentBuilderFactory.newInstance(); factory.setNamespaceAware(true); factory.setValidating(false); factory.setIgnoringComments(true); javax.xml.parsers.DocumentBuilder builder; try { builder = factory.newDocumentBuilder(); org.w3c.dom.Document document = builder.newDocument(); org.w3c.dom.Node rootNode = document.createElement(com.android.builder.resources.ResourceMerger.NODE_MERGER); document.appendChild(rootNode); for (com.android.builder.resources.ResourceSet resourceSet : mResourceSets) { org.w3c.dom.Node resourceSetNode = document.createElement(com.android.builder.resources.ResourceMerger.NODE_RESOURCE_SET); rootNode.appendChild(resourceSetNode); resourceSet.appendToXml(resourceSetNode, document); } java.lang.String content = com.android.ide.common.xml.XmlPrettyPrinter.prettyPrint(document); com.android.builder.resources.ResourceMerger.createDir(blobRootFolder); com.google.common.io.Files.write(content, new java.io.File(blobRootFolder, com.android.builder.resources.ResourceMerger.FN_MERGER_XML), Charsets.UTF_8); } catch (javax.xml.parsers.ParserConfigurationException e) { throw new java.io.IOException(e); } }",a5337d451f264321dd559b52b4071ef2f679fd4b,writeBlobTo(java.io.File),464530,341,330
88585,luni_src_test_java_libcore_javax_net_ssl_SSLSocketTest.java,32.0,"public void test_SSLSocket_startHandshake() throws java.lang.Exception { final libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); SSLSocket client = ((SSLSocket) (c.clientContext.getSocketFactory().createSocket(c.host, c.port))); final SSLSocket server = ((SSLSocket) (c.serverSocket.accept())); java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newSingleThreadExecutor(); java.util.concurrent.Future<java.lang.Void> future = executor.submit(new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { server.startHandshake(); assertNotNull(server.getSession()); try { server.getSession().getPeerCertificates(); fail(); } catch (javax.net.ssl.SSLPeerUnverifiedException expected) { } java.security.cert.Certificate[] localCertificates = server.getSession().getLocalCertificates(); assertNotNull(localCertificates); libcore.java.security.TestKeyStore.assertChainLength(localCertificates); assertNotNull(localCertificates[0]); libcore.javax.net.ssl.TestSSLContext.assertServerCertificateChain(c.serverTrustManager, localCertificates); libcore.javax.net.ssl.TestSSLContext.assertCertificateInKeyStore(localCertificates[0], c.serverKeyStore); return null; } }); executor.shutdown(); client.startHandshake(); assertNotNull(client.getSession()); assertNull(client.getSession().getLocalCertificates()); java.security.cert.Certificate[] peerCertificates = client.getSession().getPeerCertificates(); assertNotNull(peerCertificates); libcore.java.security.TestKeyStore.assertChainLength(peerCertificates); assertNotNull(peerCertificates[0]); libcore.javax.net.ssl.TestSSLContext.assertServerCertificateChain(c.clientTrustManager, peerCertificates); libcore.javax.net.ssl.TestSSLContext.assertCertificateInKeyStore(peerCertificates[0], c.serverKeyStore); future.get(); client.close(); server.close(); c.close(); }",9c43061530eb4441ea93b01c6a39c49faf5b5c87,"public void test_SSLSocket_startHandshake() throws java.lang.Exception { final libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); SSLSocket client = ((SSLSocket) (c.clientContext.getSocketFactory().createSocket(c.host, c.port))); final SSLSocket server = ((SSLSocket) (c.serverSocket.accept())); java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newSingleThreadExecutor(); java.util.concurrent.Future<java.lang.Void> future = executor.submit(new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { server.startHandshake(); assertNotNull(server.getSession()); try { server.getSession().getPeerCertificates(); fail(); } catch (javax.net.ssl.SSLPeerUnverifiedException expected) { } java.security.cert.Certificate[] localCertificates = server.getSession().getLocalCertificates(); assertNotNull(localCertificates); libcore.java.security.TestKeyStore.assertChainLength(localCertificates); assertNotNull(localCertificates[0]); libcore.javax.net.ssl.TestSSLContext.assertServerCertificateChain(c.serverTrustManager, localCertificates, server); libcore.javax.net.ssl.TestSSLContext.assertCertificateInKeyStore(localCertificates[0], c.serverKeyStore); return null; } }); executor.shutdown(); client.startHandshake(); assertNotNull(client.getSession()); assertNull(client.getSession().getLocalCertificates()); java.security.cert.Certificate[] peerCertificates = client.getSession().getPeerCertificates(); assertNotNull(peerCertificates); libcore.java.security.TestKeyStore.assertChainLength(peerCertificates); assertNotNull(peerCertificates[0]); libcore.javax.net.ssl.TestSSLContext.assertServerCertificateChain(c.clientTrustManager, peerCertificates, client); libcore.javax.net.ssl.TestSSLContext.assertCertificateInKeyStore(peerCertificates[0], c.serverKeyStore); future.get(); client.close(); server.close(); c.close(); }",f5e787a7231218b68b952c4ec39317c1f86976d7,test_SSLSocket_startHandshake(),test_SSLSocket_startHandshake(),5,31,"public void test_SSLSocket_startHandshake() throws java.lang.Exception { final libcore.javax.net.ssl.TestSSLContext c = libcore.javax.net.ssl.TestSSLContext.create(); SSLSocket client = ((SSLSocket) (c.clientContext.getSocketFactory().createSocket(c.host, c.port))); final SSLSocket server = ((SSLSocket) (c.serverSocket.accept())); java.util.concurrent.ExecutorService executor = java.util.concurrent.Executors.newSingleThreadExecutor(); java.util.concurrent.Future<java.lang.Void> future = executor.submit(new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { server.startHandshake(); assertNotNull(server.getSession()); assertNull(server.getHandshakeSession()); try { server.getSession().getPeerCertificates(); fail(); } catch (javax.net.ssl.SSLPeerUnverifiedException expected) { } java.security.cert.Certificate[] localCertificates = server.getSession().getLocalCertificates(); assertNotNull(localCertificates); libcore.java.security.TestKeyStore.assertChainLength(localCertificates); assertNotNull(localCertificates[0]); libcore.javax.net.ssl.TestSSLContext.assertServerCertificateChain(c.serverTrustManager, localCertificates); libcore.javax.net.ssl.TestSSLContext.assertCertificateInKeyStore(localCertificates[0], c.serverKeyStore); return null; } }); executor.shutdown(); client.startHandshake(); assertNotNull(client.getSession()); assertNull(client.getSession().getLocalCertificates()); java.security.cert.Certificate[] peerCertificates = client.getSession().getPeerCertificates(); assertNotNull(peerCertificates); libcore.java.security.TestKeyStore.assertChainLength(peerCertificates); assertNotNull(peerCertificates[0]); libcore.javax.net.ssl.TestSSLContext.assertServerCertificateChain(c.clientTrustManager, peerCertificates); libcore.javax.net.ssl.TestSSLContext.assertCertificateInKeyStore(peerCertificates[0], c.serverKeyStore); future.get(); client.close(); server.close(); c.close(); }",b9673fba3c8cee6014594f3b5ab3b85682fad7ca,test_SSLSocket_startHandshake(),87480,447,452
32210,src_com_android_settings_SecuritySettings.java,9.0,"@java.lang.Override public void onResume() { super.onResume(); createPreferenceHierarchy(); final com.android.internal.widget.LockPatternUtils lockPatternUtils = mChooseLockSettingsHelper.utils(); if ((mVisiblePattern) != null) { mVisiblePattern.setChecked(lockPatternUtils.isVisiblePatternEnabled()); } if ((mTactileFeedback) != null) { mTactileFeedback.setChecked(lockPatternUtils.isTactileFeedbackEnabled()); } mShowPassword.setChecked(((Settings.System.getInt(getContentResolver(), Settings.System.TEXT_SHOW_PASSWORD, 1)) != 0)); android.security.KeyStore.State state = android.security.KeyStore.getInstance().state(); mResetCredentials.setEnabled((state != (KeyStore.State.UNINITIALIZED))); }",b41f9b73394781c855414e930f65b706e76b35e2,"@java.lang.Override public void onResume() { super.onResume(); createPreferenceHierarchy(); final com.android.internal.widget.LockPatternUtils lockPatternUtils = mChooseLockSettingsHelper.utils(); if ((mVisiblePattern) != null) { mVisiblePattern.setChecked(lockPatternUtils.isVisiblePatternEnabled()); } if ((mTactileFeedback) != null) { mTactileFeedback.setChecked(lockPatternUtils.isTactileFeedbackEnabled()); } mShowPassword.setChecked(((Settings.System.getInt(getContentResolver(), Settings.System.TEXT_SHOW_PASSWORD, 1)) != 0)); android.security.KeyStore.State state = android.security.KeyStore.getInstance().state(); mResetCredentials.setEnabled((state != (KeyStore.State.UNINITIALIZED))); if ((mSELinuxToggleEnforce) != null) { mSELinuxToggleEnforce.setChecked(android.os.SELinux.isSELinuxEnforced()); } }",d78305accfb24434ed2f4c16e7dc6c829f887abb,onResume(),onResume(),7,9,"@java.lang.Override public void onResume() { super.onResume(); createPreferenceHierarchy(); final com.android.internal.widget.LockPatternUtils lockPatternUtils = mChooseLockSettingsHelper.utils(); if ((mBiometricWeakLiveliness) != null) { mBiometricWeakLiveliness.setChecked(lockPatternUtils.isBiometricWeakLivelinessEnabled()); } if ((mVisiblePattern) != null) { mVisiblePattern.setChecked(lockPatternUtils.isVisiblePatternEnabled()); } if ((mTactileFeedback) != null) { mTactileFeedback.setChecked(lockPatternUtils.isTactileFeedbackEnabled()); } if ((mPowerButtonInstantlyLocks) != null) { mPowerButtonInstantlyLocks.setChecked(lockPatternUtils.getPowerButtonInstantlyLocks()); } if ((mShowPassword) != null) { mShowPassword.setChecked(((Settings.System.getInt(getContentResolver(), Settings.System.TEXT_SHOW_PASSWORD, 1)) != 0)); } android.security.KeyStore.State state = android.security.KeyStore.getInstance().state(); if ((mResetCredentials) != null) { mResetCredentials.setEnabled((state != (KeyStore.State.UNINITIALIZED))); } }",6b2f72c19910e0e0f17e4377bd55c1c67e2b012a,onResume(),482040,204,267
586717,src_com_android_bluetooth_hfpclient_NativeInterface.java,21.0,"private void onInBandRing(int inBand, byte[] address) { android.util.Log.w(com.android.bluetooth.hfpclient.NativeInterface.TAG, ""onInBandRing not supported""); }",4c0ab60a088dee7cb90d7375cbf8fea806853c51,"private void onInBandRing(int inBand, byte[] address) { com.android.bluetooth.hfpclient.StackEvent event = new com.android.bluetooth.hfpclient.StackEvent(StackEvent.EVENT_TYPE_IN_BAND_RINGTONE); event.valueInt = inBand; event.device = getDevice(address); if (com.android.bluetooth.hfpclient.NativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.NativeInterface.TAG, (((""onInBandRing: address "" + address) + "" event "") + event)); } com.android.bluetooth.hfpclient.HeadsetClientService service = com.android.bluetooth.hfpclient.HeadsetClientService.getHeadsetClientService(); if (service != null) { service.messageFromNative(event); } else { android.util.Log.w(com.android.bluetooth.hfpclient.NativeInterface.TAG, (""onSubscriberInfo: Ignoring message because service not available: "" + event)); } }",009ae51f9a0d3582a06b2cf51f2b2531abf57d7b,"onInBandRing(int,byte[])","onInBandRing(int,byte[])",3,21,"private void onInBandRing(int inBand, byte[] address) { com.android.bluetooth.hfpclient.StackEvent event = new com.android.bluetooth.hfpclient.StackEvent(StackEvent.EVENT_TYPE_IN_BAND_RINGTONE); event.valueInt = inBand; event.device = getDevice(address); if (com.android.bluetooth.hfpclient.NativeInterface.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.NativeInterface.TAG, (((""onInBandRing: address "" + address) + "" event "") + event)); } com.android.bluetooth.hfpclient.HeadsetClientService service = com.android.bluetooth.hfpclient.HeadsetClientService.getHeadsetClientService(); if (service != null) { service.messageFromNative(event); } else { android.util.Log.w(com.android.bluetooth.hfpclient.NativeInterface.TAG, (""onInBandRing: Ignoring message because service not available: "" + event)); } }",1912d480ef2c740e81fa712363220f0d065ffb71,"onInBandRing(int,byte[])",252754,236,237
222751,luni_src_test_java_libcore_java_lang_IntegerTest.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testDivideAndRemainderUnsigned() { long[] vals = new long[]{ 1L, 23L, 456L, 2147483647L, 2147483648L, 4294967295L }; for (long dividend : vals) { for (long divisor : vals) { int uq = java.lang.Integer.divideUnsigned(((int) (dividend)), ((int) (divisor))); int ur = java.lang.Integer.remainderUnsigned(((int) (dividend)), ((int) (divisor))); assertEquals(((int) (dividend / divisor)), uq); assertEquals(((int) (dividend % divisor)), ur); assertEquals(((int) (dividend)), ((uq * ((int) (divisor))) + ur)); } } for (long dividend : vals) { try { java.lang.Integer.divideUnsigned(((int) (dividend)), 0); } catch (java.lang.ArithmeticException expected) { } try { java.lang.Integer.remainderUnsigned(((int) (dividend)), 0); } catch (java.lang.ArithmeticException expected) { } } }",aa34ef2c20f7ce05d5ee68778b101312031c501a,,testDivideAndRemainderUnsigned(),5,11,"public void testDivideAndRemainderUnsigned() { long[] vals = new long[]{ 1L, 23L, 456L, 2147483647L, 2147483648L, 4294967295L }; for (long dividend : vals) { for (long divisor : vals) { int uq = java.lang.Integer.divideUnsigned(((int) (dividend)), ((int) (divisor))); int ur = java.lang.Integer.remainderUnsigned(((int) (dividend)), ((int) (divisor))); assertEquals(((int) (dividend / divisor)), uq); assertEquals(((int) (dividend % divisor)), ur); assertEquals(((int) (dividend)), ((uq * ((int) (divisor))) + ur)); } } for (long dividend : vals) { try { java.lang.Integer.divideUnsigned(((int) (dividend)), 0); fail(); } catch (java.lang.ArithmeticException expected) { } try { java.lang.Integer.remainderUnsigned(((int) (dividend)), 0); fail(); } catch (java.lang.ArithmeticException expected) { } } }",a93fda20393757a925c9f2f276105b584d90fe4b,testDivideAndRemainderUnsigned(),352564,248,252
107785,sdk-common_src_main_java_com_android_ide_common_build_SplitOutputMatcher.java,1.0,"@com.android.annotations.Nullable public static com.android.build.SplitOutput computeBestOutput(@com.android.annotations.NonNull java.util.List<? extends com.android.build.SplitOutput> outputs, int density, @com.android.annotations.NonNull java.util.List<java.lang.String> abis) { com.android.resources.Density densityEnum = com.android.resources.Density.getEnum(density); java.lang.String densityValue; if (densityEnum == null) { densityValue = null; } else { densityValue = densityEnum.getResourceValue(); } com.android.build.SplitOutput fullMatch = null; int fullMatchAbiLevel = java.lang.Integer.MAX_VALUE; com.android.build.SplitOutput universalMatch = null; com.android.build.SplitOutput universalDensityMatch = null; int densityMatchAbiLevel = java.lang.Integer.MAX_VALUE; com.android.build.SplitOutput universalAbiMatch = null; for (com.android.build.SplitOutput output : outputs) { java.lang.String densityFilter = output.getDensityFilter(); java.lang.String abiFilter = output.getAbiFilter(); boolean isUniversalDensityMatch = false; if (densityFilter != null) { if (!(densityFilter.equals(densityValue))) { continue; } } else { isUniversalDensityMatch = true; } if (abiFilter != null) { int levelMatch = abis.indexOf(abiFilter); if (levelMatch == (-1)) { levelMatch = java.lang.Integer.MAX_VALUE; } if (isUniversalDensityMatch) { if (levelMatch < densityMatchAbiLevel) { densityMatchAbiLevel = levelMatch; universalDensityMatch = output; } } else { if (levelMatch < fullMatchAbiLevel) { fullMatchAbiLevel = levelMatch; fullMatch = output; } } } else { if (isUniversalDensityMatch) { universalMatch = output; } else { universalAbiMatch = output; } } } if (fullMatch != null) { return fullMatch; } if (universalDensityMatch != null) { return universalDensityMatch; } if (universalAbiMatch != null) { return universalAbiMatch; } return universalMatch; }",5f62f53004e991c44dc2693fa98fb9bea4bec0b6,"@com.android.annotations.Nullable public static com.android.build.SplitOutput computeBestOutput(@com.android.annotations.NonNull java.util.List<? extends com.android.build.SplitOutput> outputs, int density, @com.android.annotations.NonNull java.util.List<java.lang.String> abis) { com.android.resources.Density densityEnum = com.android.resources.Density.getEnum(density); java.lang.String densityValue; if (densityEnum == null) { densityValue = null; } else { densityValue = densityEnum.getResourceValue(); } java.util.List<com.android.build.SplitOutput> matches = com.google.common.collect.Lists.newArrayListWithExpectedSize(outputs.size()); for (com.android.build.SplitOutput output : outputs) { java.lang.String densityFilter = output.getDensityFilter(); java.lang.String abiFilter = output.getAbiFilter(); if ((densityFilter != null) && (!(densityFilter.equals(densityValue)))) { continue; } if ((abiFilter != null) && (!(abis.contains(abiFilter)))) { continue; } matches.add(output); } if (matches.isEmpty()) { return null; } java.util.Collections.sort(matches, new java.util.Comparator<com.android.build.SplitOutput>() { @java.lang.Override public int compare(com.android.build.SplitOutput splitOutput, com.android.build.SplitOutput splitOutput2) { return (splitOutput2.getVersionCode()) - (splitOutput.getVersionCode()); } }); return matches.get(0); }",0a4924f1d039a73b3094e00ddc70eda2986d8803,"computeBestOutput(java.util.List,int,java.util.List)","computeBestOutput(java.util.List,int,java.util.List)",3,1,"@com.android.annotations.Nullable public static com.android.build.SplitOutput computeBestOutput(@com.android.annotations.NonNull java.util.List<? extends com.android.build.SplitOutput> outputs, int density, @com.android.annotations.NonNull java.util.List<java.lang.String> abis) { com.android.resources.Density densityEnum = com.android.resources.Density.getEnum(density); java.lang.String densityValue; if (densityEnum == null) { densityValue = null; } else { densityValue = densityEnum.getResourceValue(); } java.util.List<com.android.build.SplitOutput> matches = com.google.common.collect.Lists.newArrayListWithExpectedSize(outputs.size()); for (com.android.build.SplitOutput output : outputs) { java.lang.String densityFilter = output.getDensityFilter(); java.lang.String abiFilter = output.getAbiFilter(); if ((densityFilter != null) && (!(densityFilter.equals(densityValue)))) { continue; } if ((abiFilter != null) && (!(abis.contains(abiFilter)))) { continue; } matches.add(output); } if (matches.isEmpty()) { return null; } return java.util.Collections.max(matches, new java.util.Comparator<com.android.build.SplitOutput>() { @java.lang.Override public int compare(com.android.build.SplitOutput splitOutput, com.android.build.SplitOutput splitOutput2) { return (splitOutput.getVersionCode()) - (splitOutput2.getVersionCode()); } }); }",89cb4b72cac037fcb1e851cefba8156206917ffb,"computeBestOutput(java.util.List,int,java.util.List)",231563,362,358
162651,ddmlib_src_main_java_com_android_ddmlib_DeviceMonitor.java,28.0,"@java.lang.Override public void run() { do { if ((mAdbConnection) == null) { com.android.ddmlib.Log.d(""DeviceMonitor"", ""Opening adb connection""); mAdbConnection = com.android.ddmlib.DeviceMonitor.openAdbConnection(); if ((mAdbConnection) == null) { (mConnectionAttempt)++; com.android.ddmlib.Log.e(""DeviceMonitor"", (""Connection attempts: "" + (mConnectionAttempt))); if ((mConnectionAttempt) > 10) { if (!(mBridge.startAdb())) { (mRestartAttemptCount)++; com.android.ddmlib.Log.e(""DeviceMonitor"", (""adb restart attempts: "" + (mRestartAttemptCount))); } else { com.android.ddmlib.Log.i(""DeviceMonitor"", ""adb restarted""); mRestartAttemptCount = 0; } } com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly(1, java.util.concurrent.TimeUnit.SECONDS); } else { com.android.ddmlib.Log.d(""DeviceMonitor"", ""Connected to adb for device monitoring""); mConnectionAttempt = 0; } } try { if (((mAdbConnection) != null) && (!(mMonitoring))) { mMonitoring = sendDeviceListMonitoringRequest(); } if (mMonitoring) { int length = com.android.ddmlib.DeviceMonitor.readLength(mAdbConnection, mLengthBuffer); if (length >= 0) { processIncomingDeviceData(length); mInitialDeviceListDone = true; } } } catch (java.nio.channels.AsynchronousCloseException ace) { } catch (com.android.ddmlib.TimeoutException ioe) { handleExceptionInMonitorLoop(ioe); } catch (java.io.IOException ioe) { handleExceptionInMonitorLoop(ioe); } } while (!(mQuit) ); }",e11067d32fa98cba9dc0fd33d87b3af24df65902,"@java.lang.Override public void run() { do { if ((mAdbConnection) == null) { com.android.ddmlib.Log.d(""DeviceMonitor"", ""Opening adb connection""); mAdbConnection = com.android.ddmlib.DeviceMonitor.openAdbConnection(); if ((mAdbConnection) == null) { (mConnectionAttempt)++; com.android.ddmlib.Log.e(""DeviceMonitor"", (""Connection attempts: "" + (mConnectionAttempt))); if ((mConnectionAttempt) > 10) { if (!(mBridge.startAdb())) { (mRestartAttemptCount)++; com.android.ddmlib.Log.e(""DeviceMonitor"", (""adb restart attempts: "" + (mRestartAttemptCount))); } else { com.android.ddmlib.Log.i(""DeviceMonitor"", ""adb restarted""); mRestartAttemptCount = 0; } } com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly(1, java.util.concurrent.TimeUnit.SECONDS); } else { com.android.ddmlib.Log.d(""DeviceMonitor"", ""Connected to adb for device monitoring""); mConnectionAttempt = 0; } } try { if (((mAdbConnection) != null) && (!(mMonitoring))) { mMonitoring = sendDeviceListMonitoringRequest(); } if (mMonitoring) { int length = com.android.ddmlib.DeviceMonitor.readLength(mAdbConnection, mLengthBuffer); if (length >= 0) { processIncomingDeviceData(length); mInitialDeviceListDone = true; } } } catch (java.nio.channels.AsynchronousCloseException ace) { } catch (com.android.ddmlib.TimeoutException ioe) { handleExceptionInMonitorLoop(ioe); } catch (java.io.IOException ioe) { handleExceptionInMonitorLoop(ioe); } catch (java.lang.InterruptedException e) { handleExceptionInMonitorLoop(e); } } while (!(mQuit) ); }",59b2994224bd47d6bc031bcd5f24fef08f8c2217,run(),run(),4,28,"@java.lang.Override public void run() { do { if ((mAdbConnection) == null) { com.android.ddmlib.Log.d(""DeviceMonitor"", ""Opening adb connection""); mAdbConnection = com.android.ddmlib.DeviceMonitor.openAdbConnection(); if ((mAdbConnection) == null) { (mConnectionAttempt)++; com.android.ddmlib.Log.e(""DeviceMonitor"", (""Connection attempts: "" + (mConnectionAttempt))); if ((mConnectionAttempt) > 10) { if (!(mBridge.startAdb())) { (mRestartAttemptCount)++; com.android.ddmlib.Log.e(""DeviceMonitor"", (""adb restart attempts: "" + (mRestartAttemptCount))); } else { com.android.ddmlib.Log.i(""DeviceMonitor"", ""adb restarted""); mRestartAttemptCount = 0; } } com.google.common.util.concurrent.Uninterruptibles.sleepUninterruptibly(1, java.util.concurrent.TimeUnit.SECONDS); } else { com.android.ddmlib.Log.d(""DeviceMonitor"", ""Connected to adb for device monitoring""); mConnectionAttempt = 0; } } try { if (((mAdbConnection) != null) && (!(mMonitoring))) { mMonitoring = sendDeviceListMonitoringRequest(); } if (mMonitoring) { int length = com.android.ddmlib.DeviceMonitor.readLength(mAdbConnection, mLengthBuffer); if (length >= 0) { processIncomingDeviceData(length); mInitialDeviceListDone = true; } } } catch (java.nio.channels.AsynchronousCloseException ace) { } catch (com.android.ddmlib.TimeoutException ioe) { handleExceptionInMonitorLoop(ioe); } catch (java.io.IOException ioe) { handleExceptionInMonitorLoop(ioe); } } while (!(mQuit) ); }",e11067d32fa98cba9dc0fd33d87b3af24df65902,run(),353040,429,409
81416,tests_tests_renderscript_src_android_renderscript_cts_TestAtanh.java,,,,public void testAtanh() { checkAtanhFloat(); checkAtanhFloat2(); checkAtanhFloat3(); checkAtanhFloat4(); },fdd8df133769d4bf64384ea47cf4e8999119b464,,testAtanh(),9,0,public void testAtanh() { checkAtanhFloatFloat(); checkAtanhFloat2Float2(); checkAtanhFloat3Float3(); checkAtanhFloat4Float4(); },ab5e9d80bc815e454612fe915549c491066246c2,testAtanh(),142850,36,43
103652,sdkmanager_sdkuilib_src_main_java_com_android_sdkuilib_internal_widgets_AvdCreationSwtView.java,,,,@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent arg0) { boolean sizeMode = mRadioSdCardSize.getSelection(); mPresenter.enableSdCardWidgets(sizeMode); mPresenter.validatePage(); },b4ca8766678b9c2c3ba008484f177e78276aac6b,,widgetSelected(org.eclipse.swt.events.SelectionEvent),2,20,@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent arg0) { mPresenter.onRadioSdCardSizeChanged(); },b07492fea079cebf956e26da32808843936d5816,widgetSelected(org.eclipse.swt.events.SelectionEvent),67094,55,35
302816,test_956-methodhandles_src_Main.java,0.0,"public static void testAsType() throws java.lang.Throwable { java.lang.invoke.MethodHandle mh = java.lang.invoke.MethodHandles.lookup().findVirtual(java.lang.String.class, ""concat"", java.lang.invoke.MethodType.methodType(java.lang.String.class, java.lang.String.class)); java.lang.invoke.MethodHandle asType = mh.asType(java.lang.invoke.MethodType.methodType(java.lang.Object.class, java.lang.CharSequence.class, java.lang.String.class)); java.lang.Object obj = asType.invokeExact(((java.lang.CharSequence) (Main.getSequence())), ""bar""); Main.assertEquals(""foobar"", ((java.lang.String) (obj))); try { java.lang.String str = ((java.lang.String) (asType.invokeExact(((java.lang.CharSequence) (Main.getSequence())), ""bar""))); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } try { java.lang.String str = ((java.lang.String) (asType.invokeExact(""baz"", ""bar""))); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } try { mh.asType(java.lang.invoke.MethodType.methodType(int.class, java.lang.String.class, java.lang.String.class)); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } try { mh.asType(java.lang.invoke.MethodType.methodType(java.lang.String.class, int.class, java.lang.String.class)); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } }",7e3606405c6912e7b9bb0e063be7bded702c44fa,"public static void testAsType() throws java.lang.Throwable { java.lang.invoke.MethodHandle oh = java.lang.invoke.MethodHandles.lookup().findStatic(Main.class, ""frob"", java.lang.invoke.MethodType.methodType(void.class, boolean.class)); oh.invoke(java.lang.Boolean.TRUE); java.lang.invoke.MethodHandle mh = java.lang.invoke.MethodHandles.lookup().findVirtual(java.lang.String.class, ""concat"", java.lang.invoke.MethodType.methodType(java.lang.String.class, java.lang.String.class)); java.lang.invoke.MethodHandle asType = mh.asType(java.lang.invoke.MethodType.methodType(java.lang.Object.class, java.lang.CharSequence.class, java.lang.String.class)); java.lang.Object obj = asType.invokeExact(((java.lang.CharSequence) (Main.getSequence())), ""bar""); Main.assertEquals(""foobar"", ((java.lang.String) (obj))); try { java.lang.String str = ((java.lang.String) (asType.invokeExact(((java.lang.CharSequence) (Main.getSequence())), ""bar""))); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } try { java.lang.String str = ((java.lang.String) (asType.invokeExact(""baz"", ""bar""))); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } try { mh.asType(java.lang.invoke.MethodType.methodType(int.class, java.lang.String.class, java.lang.String.class)); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } try { mh.asType(java.lang.invoke.MethodType.methodType(java.lang.String.class, int.class, java.lang.String.class)); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } }",78d110b6e59951ece59bfb39033953687353392a,testAsType(),testAsType(),9,0,"public static void testAsType() throws java.lang.Throwable { java.lang.invoke.MethodHandle mh = java.lang.invoke.MethodHandles.lookup().findVirtual(java.lang.String.class, ""concat"", java.lang.invoke.MethodType.methodType(java.lang.String.class, java.lang.String.class)); java.lang.invoke.MethodHandle asType = mh.asType(java.lang.invoke.MethodType.methodType(java.lang.Object.class, java.lang.CharSequence.class, java.lang.String.class)); java.lang.Object obj = asType.invokeExact(((java.lang.CharSequence) (Main.getSequence())), ""bar""); Main.assertEquals(""foobar"", ((java.lang.String) (obj))); try { java.lang.String str = ((java.lang.String) (asType.invokeExact(((java.lang.CharSequence) (Main.getSequence())), ""bar""))); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } try { java.lang.String str = ((java.lang.String) (asType.invokeExact(""baz"", ""bar""))); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } try { mh.asType(java.lang.invoke.MethodType.methodType(int.class, java.lang.String.class, java.lang.String.class)); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } try { mh.asType(java.lang.invoke.MethodType.methodType(java.lang.String.class, int.class, java.lang.String.class)); Main.fail(); } catch (java.lang.invoke.WrongMethodTypeException expected) { } }",7e3606405c6912e7b9bb0e063be7bded702c44fa,testAsType(),305348,463,399
153151,jack_src_com_android_jack_ir_ast_JPackage.java,25.0,@java.lang.Override public void traverse(@javax.annotation.Nonnull com.android.jack.ir.ast.JVisitor visitor) { if (visitor.visit(this)) { if (visitor.needLoading()) { loadSubPackages(); loadClassesAndInterfaces(); } visitor.accept(subPackages); visitor.accept(declaredTypes); } visitor.endVisit(this); },4c4fd3c2a62736322d045c2f7a4ea1d457f87975,@java.lang.Override public void traverse(@javax.annotation.Nonnull com.android.jack.ir.ast.JVisitor visitor) { assert ((enclosingPackage) == null) || (!(enclosingPackage.deletedOrRenamedItems.contains(getName()))); if (visitor.visit(this)) { if (visitor.needLoading()) { loadSubPackages(); loadClassesAndInterfaces(); } visitor.accept(subPackages); visitor.accept(declaredTypes); } visitor.endVisit(this); },8c685532fe3f298293f767001280f8b567e75ea0,traverse(com.android.jack.ir.ast.JVisitor),traverse(com.android.jack.ir.ast.JVisitor),3,25,@java.lang.Override public void traverse(@javax.annotation.Nonnull com.android.jack.ir.ast.JVisitor visitor) { assert ((enclosingPackage) == null) || (!(enclosingPackage.deletedItems.contains(getName()))); if (visitor.visit(this)) { if (visitor.needLoading()) { loadSubPackages(); loadClassesAndInterfaces(); } visitor.accept(subPackages); visitor.accept(declaredTypes); } visitor.endVisit(this); },7d122072aa8b6be4d5b35cb9642eda1d2b9de791,traverse(com.android.jack.ir.ast.JVisitor),222637,104,101
108516,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,56.0,"public void test_SetRoundingMode_Ljava_math_RoundingMode() { java.text.DecimalFormat decimalFormat = ((java.text.DecimalFormat) (java.text.DecimalFormat.getInstance(java.util.Locale.US))); decimalFormat.setMaximumFractionDigits(0); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_DOWN); java.lang.String result = decimalFormat.format(11.3); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN"", ""11"", result); result = decimalFormat.format(11.5); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN"", ""11"", result); result = decimalFormat.format(11.6); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN"", ""12"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.CEILING); result = decimalFormat.format(11.3); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.CEILING"", ""12"", result); result = decimalFormat.format((-11.5)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.CEILING"", ""-11"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.DOWN); result = decimalFormat.format(11.3); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.DOWN"", ""11"", result); result = decimalFormat.format((-11.5)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.DOWN"", ""-11"", result); result = decimalFormat.format(0); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.DOWN"", ""0"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.FLOOR); result = decimalFormat.format(11.3); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.FLOOR"", ""11"", result); result = decimalFormat.format((-11.5)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.FLOOR"", ""-12"", result); result = decimalFormat.format(0); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.FLOOR"", ""0"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_EVEN); result = decimalFormat.format(5.5); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN"", ""6"", result); result = decimalFormat.format((-5.5)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN"", ""-6"", result); result = decimalFormat.format(0.2); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN"", ""0"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_UP); result = decimalFormat.format(5.5); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_UP"", ""6"", result); result = decimalFormat.format((-5.5)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_UP"", ""-6"", result); result = decimalFormat.format(0.2); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_UP"", ""0"", result); result = decimalFormat.format((-0.2)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_UP"", ""-0"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.UP); result = decimalFormat.format(5.5); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.UP"", ""6"", result); result = decimalFormat.format((-5.5)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.UP"", ""-6"", result); result = decimalFormat.format(0.2); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.UP"", ""1"", result); result = decimalFormat.format((-0.2)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.UP"", ""-1"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.UNNECESSARY); try { result = decimalFormat.format(5.5); fail(""ArithmeticException expected: RoundingMode.UNNECESSARY""); } catch (java.lang.ArithmeticException e) { } result = decimalFormat.format(1.0); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.UNNECESSARY"", ""1"", result); result = decimalFormat.format((-1.0)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.UNNECESSARY"", ""-1"", result); try { decimalFormat.setRoundingMode(null); fail(""NullPointerException expected""); } catch (java.lang.NullPointerException e) { } decimalFormat.setMaximumFractionDigits(3); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_DOWN); result = decimalFormat.format(11.5653); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN"", ""11.565"", result); result = decimalFormat.format(11.5655); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN"", ""11.565"", result); result = decimalFormat.format(11.5656); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN"", ""11.566"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.CEILING); result = decimalFormat.format(11.5653); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.CEILING"", ""11.566"", result); result = decimalFormat.format((-11.5653)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.CEILING"", ""-11.565"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.DOWN); result = decimalFormat.format(11.5653); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.DOWN"", ""11.565"", result); result = decimalFormat.format((-11.5653)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.DOWN"", ""-11.565"", result); result = decimalFormat.format(0); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.DOWN"", ""0"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.FLOOR); result = decimalFormat.format(11.5653); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.FLOOR"", ""11.565"", result); result = decimalFormat.format((-11.5655)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.FLOOR"", ""-11.566"", result); result = decimalFormat.format(0); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.FLOOR"", ""0"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_EVEN); result = decimalFormat.format(11.5653); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN"", ""11.565"", result); result = decimalFormat.format((-11.5655)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN"", ""-11.566"", result); result = decimalFormat.format(11.5656); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN"", ""11.566"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_UP); result = decimalFormat.format(11.5653); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_UP"", ""11.565"", result); result = decimalFormat.format((-11.5655)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_UP"", ""-11.566"", result); result = decimalFormat.format(11.5656); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_UP"", ""11.566"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.UP); result = decimalFormat.format(11.5653); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.UP"", ""11.566"", result); result = decimalFormat.format((-11.5655)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.UP"", ""-11.566"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.UNNECESSARY); result = decimalFormat.format((-11.565)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.UNNECESSARY"", ""-11.565"", result); result = decimalFormat.format(11.565); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.UNNECESSARY"", ""11.565"", result); decimalFormat.setMaximumFractionDigits((-2)); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_DOWN); result = decimalFormat.format(11.3); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN"", ""11"", result); result = decimalFormat.format(11.5); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN"", ""11"", result); result = decimalFormat.format(11.6); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_DOWN"", ""12"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.CEILING); result = decimalFormat.format(11.3); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.CEILING"", ""12"", result); result = decimalFormat.format((-11.5)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.CEILING"", ""-11"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.DOWN); result = decimalFormat.format(11.3); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.DOWN"", ""11"", result); result = decimalFormat.format((-11.5)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.DOWN"", ""-11"", result); result = decimalFormat.format(0); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.DOWN"", ""0"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.FLOOR); result = decimalFormat.format(11.3); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.FLOOR"", ""11"", result); result = decimalFormat.format((-11.5)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.FLOOR"", ""-12"", result); result = decimalFormat.format(0); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.FLOOR"", ""0"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_EVEN); result = decimalFormat.format(5.5); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN"", ""6"", result); result = decimalFormat.format((-5.5)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN"", ""-6"", result); result = decimalFormat.format(0.2); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_EVEN"", ""0"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_UP); result = decimalFormat.format(5.5); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_UP"", ""6"", result); result = decimalFormat.format((-5.5)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_UP"", ""-6"", result); result = decimalFormat.format(0.2); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_UP"", ""0"", result); result = decimalFormat.format((-0.2)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.HALF_UP"", ""-0"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.UP); result = decimalFormat.format(5.5); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.UP"", ""6"", result); result = decimalFormat.format((-5.5)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.UP"", ""-6"", result); result = decimalFormat.format(0.2); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.UP"", ""1"", result); result = decimalFormat.format((-0.2)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.UP"", ""-1"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.UNNECESSARY); result = decimalFormat.format(1.0); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.UNNECESSARY"", ""1"", result); result = decimalFormat.format((-1.0)); assertEquals(""Incorrect RoundingMode behavior: RoundingMode.UNNECESSARY"", ""-1"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_UP); decimalFormat.applyPattern("".##""); result = decimalFormat.format(0.125); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".13"", result); result = decimalFormat.format(0.255); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".26"", result); result = decimalFormat.format(0.732); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".73"", result); result = decimalFormat.format(0.467); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".47"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_DOWN); decimalFormat.applyPattern("".##""); result = decimalFormat.format(0.125); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".12"", result); result = decimalFormat.format(0.255); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".25"", result); result = decimalFormat.format(0.732); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".73"", result); result = decimalFormat.format(0.467); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".47"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.UP); decimalFormat.applyPattern("".##""); result = decimalFormat.format(0.125); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".13"", result); result = decimalFormat.format(0.255); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".26"", result); result = decimalFormat.format(0.732); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".74"", result); result = decimalFormat.format(0.467); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".47"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.DOWN); decimalFormat.applyPattern("".##""); result = decimalFormat.format(0.125); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".12"", result); result = decimalFormat.format(0.255); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".25"", result); result = decimalFormat.format(0.732); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".73"", result); result = decimalFormat.format(0.467); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".46"", result); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_EVEN); decimalFormat.applyPattern("".##""); result = decimalFormat.format(0.125); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".12"", result); result = decimalFormat.format(0.255); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".26"", result); result = decimalFormat.format(0.732); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".73"", result); result = decimalFormat.format(0.467); assertEquals(""Incorrect RoundingMode behavior after applyPattern"", "".47"", result); }",da492571aa4bd827d50b5672f5350b0a95a6747d,"public void testSetRoundingMode_null() { java.text.DecimalFormat decimalFormat = ((java.text.DecimalFormat) (java.text.DecimalFormat.getInstance(java.util.Locale.US))); try { decimalFormat.setRoundingMode(null); fail(""NullPointerException expected""); } catch (java.lang.NullPointerException e) { } }",b7a2ee481ed037329bc8b06fb4142e7214315c52,test_SetRoundingMode_Ljava_math_RoundingMode(),testSetRoundingMode_null(),2,58,"public void test_setRoundingMode_null() { java.text.DecimalFormat decimalFormat = ((java.text.DecimalFormat) (java.text.DecimalFormat.getInstance(java.util.Locale.US))); try { decimalFormat.setRoundingMode(null); fail(""NullPointerException expected""); } catch (java.lang.NullPointerException e) { } }",911d56627141a2c1bebdfa742d55d668e87073f4,test_setRoundingMode_null(),84432,72,73
91995,luni_src_main_java_libcore_io_Posix.java,63.0,"public native void munmap(long address, long byteCount) throws libcore.io.ErrnoException;",cd3151caae56147c0f1fbfca6d5af5d66f5a06cf,"public native void munmap(long address, long byteCount) throws android.os.ErrnoException;",c5c8f95f52964757bd8b47122e97235a38a1d651,"munmap(long,long)","munmap(long,long)",3,61,"public native void munmap(long address, long byteCount) throws android.system.ErrnoException;",bb36ab5829b2850b0d1ad4bd71c2f5309cfd567c,"munmap(long,long)",169838,23,23
91995,luni_src_main_java_libcore_io_ForwardingOs.java,48.0,"public void lchown(java.lang.String path, int uid, int gid) throws libcore.io.ErrnoException { os.lchown(path, uid, gid); }",6e9bcaa3ecbddbf1584bd9898bd70e42fd5cd5de,"public void lchown(java.lang.String path, int uid, int gid) throws android.os.ErrnoException { os.lchown(path, uid, gid); }",f769e2bf7c08e87d45c514f6d0210764eb71b2b5,"lchown(java.lang.String,int,int)","lchown(java.lang.String,int,int)",3,47,"public void lchown(java.lang.String path, int uid, int gid) throws android.system.ErrnoException { os.lchown(path, uid, gid); }",225a9b56a2e420585c2ed7be4ef89f8093531eb3,"lchown(java.lang.String,int,int)",170524,43,43
149926,luni_src_main_java_java_text_DecimalFormatSymbols.java,34.0,"private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException { java.io.ObjectInputStream.GetField fields = stream.readFields(); final int serialVersionOnStream = fields.get(""serialVersionOnStream"", 0); currencySymbol = ((java.lang.String) (fields.get(""currencySymbol"", """"))); setDecimalSeparator(fields.get(""decimalSeparator"", '.')); setDigit(fields.get(""digit"", '#')); setGroupingSeparator(fields.get(""groupingSeparator"", ',')); infinity = ((java.lang.String) (fields.get(""infinity"", """"))); intlCurrencySymbol = ((java.lang.String) (fields.get(""intlCurrencySymbol"", """"))); setMinusSign(fields.get(""minusSign"", '-')); NaN = ((java.lang.String) (fields.get(""NaN"", """"))); setPatternSeparator(fields.get(""patternSeparator"", ';')); setPercent(fields.get(""percent"", '%')); setPerMill(fields.get(""perMill"", '\u2030')); setZeroDigit(fields.get(""zeroDigit"", '0')); locale = ((java.util.Locale) (fields.get(""locale"", null))); if (serialVersionOnStream == 0) { setMonetaryDecimalSeparator(getDecimalSeparator()); } else { setMonetaryDecimalSeparator(fields.get(""monetarySeparator"", '.')); } if (serialVersionOnStream == 0) { exponentSeparator = ""E""; } else if (serialVersionOnStream < 3) { setExponentSeparator(java.lang.String.valueOf(fields.get(""exponential"", 'E'))); } else { setExponentSeparator(((java.lang.String) (fields.get(""exponentialSeparator"", ""E"")))); } try { currency = java.util.Currency.getInstance(intlCurrencySymbol); } catch (java.lang.IllegalArgumentException e) { currency = null; } }",6d1768738fc15836d7f76a6842545e95a96442ff,"private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException { java.io.ObjectInputStream.GetField fields = stream.readFields(); final int serialVersionOnStream = fields.get(""serialVersionOnStream"", 0); currencySymbol = ((java.lang.String) (fields.get(""currencySymbol"", """"))); setDecimalSeparator(fields.get(""decimalSeparator"", '.')); setDigit(fields.get(""digit"", '#')); setGroupingSeparator(fields.get(""groupingSeparator"", ',')); infinity = ((java.lang.String) (fields.get(""infinity"", """"))); intlCurrencySymbol = ((java.lang.String) (fields.get(""intlCurrencySymbol"", """"))); final java.lang.String minusSignStr = ((java.lang.String) (fields.get(""minusSignStr"", null))); if (minusSignStr != null) { minusSign = minusSignStr; } else { setMinusSign(fields.get(""minusSign"", '-')); } NaN = ((java.lang.String) (fields.get(""NaN"", """"))); setPatternSeparator(fields.get(""patternSeparator"", ';')); final java.lang.String percentStr = ((java.lang.String) (fields.get(""percentStr"", null))); if (percentStr != null) { percent = percentStr; } else { setPercent(fields.get(""percent"", '%')); } setPerMill(fields.get(""perMill"", '\u2030')); setZeroDigit(fields.get(""zeroDigit"", '0')); locale = ((java.util.Locale) (fields.get(""locale"", null))); if (serialVersionOnStream == 0) { setMonetaryDecimalSeparator(getDecimalSeparator()); } else { setMonetaryDecimalSeparator(fields.get(""monetarySeparator"", '.')); } if (serialVersionOnStream == 0) { exponentSeparator = ""E""; } else if (serialVersionOnStream < 3) { setExponentSeparator(java.lang.String.valueOf(fields.get(""exponential"", 'E'))); } else { setExponentSeparator(((java.lang.String) (fields.get(""exponentialSeparator"", ""E"")))); } try { currency = java.util.Currency.getInstance(intlCurrencySymbol); } catch (java.lang.IllegalArgumentException e) { currency = null; } }",40f96aed02878d3864951aa9ac7a6d1b7ffbce17,readObject(java.io.ObjectInputStream),readObject(java.io.ObjectInputStream),3,34,"private void readObject(java.io.ObjectInputStream stream) throws java.io.IOException, java.lang.ClassNotFoundException { java.io.ObjectInputStream.GetField fields = stream.readFields(); final int serialVersionOnStream = fields.get(""serialVersionOnStream"", 0); currencySymbol = ((java.lang.String) (fields.get(""currencySymbol"", """"))); setDecimalSeparator(fields.get(""decimalSeparator"", '.')); setDigit(fields.get(""digit"", '#')); setGroupingSeparator(fields.get(""groupingSeparator"", ',')); infinity = ((java.lang.String) (fields.get(""infinity"", """"))); intlCurrencySymbol = ((java.lang.String) (fields.get(""intlCurrencySymbol"", """"))); NaN = ((java.lang.String) (fields.get(""NaN"", """"))); setPatternSeparator(fields.get(""patternSeparator"", ';')); final java.lang.String minusSignStr = ((java.lang.String) (fields.get(""minusSignStr"", null))); if (minusSignStr != null) { minusSign = minusSignStr; } else { setMinusSign(fields.get(""minusSign"", '-')); } final java.lang.String percentStr = ((java.lang.String) (fields.get(""percentStr"", null))); if (percentStr != null) { percent = percentStr; } else { setPercent(fields.get(""percent"", '%')); } setPerMill(fields.get(""perMill"", '\u2030')); setZeroDigit(fields.get(""zeroDigit"", '0')); locale = ((java.util.Locale) (fields.get(""locale"", null))); if (serialVersionOnStream == 0) { setMonetaryDecimalSeparator(getDecimalSeparator()); } else { setMonetaryDecimalSeparator(fields.get(""monetarySeparator"", '.')); } if (serialVersionOnStream == 0) { exponentSeparator = ""E""; } else if (serialVersionOnStream < 3) { setExponentSeparator(java.lang.String.valueOf(fields.get(""exponential"", 'E'))); } else { setExponentSeparator(((java.lang.String) (fields.get(""exponentialSeparator"", ""E"")))); } try { currency = java.util.Currency.getInstance(intlCurrencySymbol); } catch (java.lang.IllegalArgumentException e) { currency = null; } }",e721aecb638361b1742c86021499e55ff18a896b,readObject(java.io.ObjectInputStream),101967,507,507
543157,src_com_android_server_telecom_CallLogManager.java,7.0,"private static int getCallFeatures(int videoState, boolean isPulledCall, boolean isStoreHd) { int features = 0; if (android.telecom.VideoProfile.isVideo(videoState)) { features |= android.provider.CallLog.Calls.FEATURES_VIDEO; } if (isPulledCall) { features |= android.provider.CallLog.Calls.FEATURES_PULLED_EXTERNALLY; } if (isStoreHd) { features |= android.provider.CallLog.Calls.FEATURES_HD_CALL; } return features; }",c4a175545aca42cad2207ad7eff0684a53df85d3,"private static int getCallFeatures(int videoState, boolean isPulledCall, boolean isStoreHd, boolean isRtt) { int features = 0; if (android.telecom.VideoProfile.isVideo(videoState)) { features |= android.provider.CallLog.Calls.FEATURES_VIDEO; } if (isPulledCall) { features |= android.provider.CallLog.Calls.FEATURES_PULLED_EXTERNALLY; } if (isStoreHd) { features |= android.provider.CallLog.Calls.FEATURES_HD_CALL; } if (isRtt) { features |= android.provider.CallLog.Calls.FEATURES_RTT; } return features; }",b4fb732218fafb1b150a17548036de7503ecb4bf,"getCallFeatures(int,boolean,boolean)","getCallFeatures(int,boolean,boolean,boolean)",4,7,"private static int getCallFeatures(int videoState, boolean isPulledCall, boolean isStoreHd, boolean isUsingAssistedDialing, boolean isRtt) { int features = 0; if (android.telecom.VideoProfile.isVideo(videoState)) { features |= android.provider.CallLog.Calls.FEATURES_VIDEO; } if (isPulledCall) { features |= android.provider.CallLog.Calls.FEATURES_PULLED_EXTERNALLY; } if (isStoreHd) { features |= android.provider.CallLog.Calls.FEATURES_HD_CALL; } if (isUsingAssistedDialing) { features |= android.provider.CallLog.Calls.FEATURES_ASSISTED_DIALING_USED; } if (isRtt) { features |= android.provider.CallLog.Calls.FEATURES_RTT; } return features; }",c270974193bca126e41996cf883eff514612745b,"getCallFeatures(int,boolean,boolean,boolean,boolean)",261070,154,195
237621,jack-tests_tests_com_android_jack_java8_DefaultMethodTest.java,5.0,@org.junit.Test public void testDefaultMethod007() throws java.lang.Exception { run(DEFAULTMETHOD007); },5bdf5299efca9b88c0d61555a7c7ee55630d8fd4,@org.junit.Test @java.lang.Runtime public void testDefaultMethod007() throws java.lang.Exception { run(DEFAULTMETHOD007); },cfa0c9797b05fc9bf16cd6abbd2cafd93e15d658,testDefaultMethod007(),testDefaultMethod007(),11,5,@org.junit.Test @java.lang.Runtime(from = RuntimeVersion.N) public void testDefaultMethod007() throws java.lang.Exception { run(DEFAULTMETHOD007); },c9ff0498a5a74242eec751d6fd523fcd86b30ce4,testDefaultMethod007(),273896,33,41
69360,luni_src_test_java_libcore_javax_net_ssl_SSLSocketTest.java,34.0,"public void test_SSLSocket_getSupportedCipherSuites_names() throws java.lang.Exception { javax.net.ssl.SSLSocketFactory sf = ((javax.net.ssl.SSLSocketFactory) (javax.net.ssl.SSLSocketFactory.getDefault())); javax.net.ssl.SSLSocket ssl = ((javax.net.ssl.SSLSocket) (sf.createSocket())); java.lang.String[] cipherSuites = ssl.getSupportedCipherSuites(); libcore.java.security.StandardNames.assertSupportedCipherSuites(cipherSuites); assertNotSame(cipherSuites, ssl.getSupportedCipherSuites()); }",c324c1b43be03fb718819598460eb9f25c9aebdc,"public void test_SSLSocket_getSupportedCipherSuitesReturnsCopies() throws java.lang.Exception { javax.net.ssl.SSLSocketFactory sf = ((javax.net.ssl.SSLSocketFactory) (javax.net.ssl.SSLSocketFactory.getDefault())); javax.net.ssl.SSLSocket ssl = ((javax.net.ssl.SSLSocket) (sf.createSocket())); assertNotSame(ssl.getSupportedCipherSuites(), ssl.getSupportedCipherSuites()); }",23a5c58dde7f80688d07d1858a8a4a6d244b58b9,test_SSLSocket_getSupportedCipherSuites_names(),test_SSLSocket_getSupportedCipherSuitesReturnsCopies(),3,32,"public void test_SSLSocket_getSupportedCipherSuites_returnsCopies() throws java.lang.Exception { javax.net.ssl.SSLSocketFactory sf = ((javax.net.ssl.SSLSocketFactory) (javax.net.ssl.SSLSocketFactory.getDefault())); javax.net.ssl.SSLSocket ssl = ((javax.net.ssl.SSLSocket) (sf.createSocket())); assertNotSame(ssl.getSupportedCipherSuites(), ssl.getSupportedCipherSuites()); }",347624039902300b7343bf31616235bbd7804708,test_SSLSocket_getSupportedCipherSuites_returnsCopies(),337908,90,91
110490,jack_src_com_android_jack_Jack.java,16.0,"@javax.annotation.Nonnull private static com.android.jack.backend.jayce.JayceFileImporter getJayceFileImporter(@javax.annotation.Nonnull java.util.List<java.io.File> jayceImport, @javax.annotation.Nonnull com.android.jack.ir.ast.JPackage rootPackage, @javax.annotation.Nonnull com.android.jack.lookup.JPhantomLookup phantomLookup, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks) throws com.android.jack.JackFileException { java.util.List<com.android.sched.vfs.InputVDir> jackFilesToImport = new java.util.ArrayList<com.android.sched.vfs.InputVDir>(jayceImport.size()); com.android.sched.util.config.ReflectFactory<com.android.jack.jayce.JaycePackageLoader> factory = com.android.sched.util.config.ThreadConfig.get(com.android.jack.Jack.IMPORT_POLICY); for (final java.io.File jackFile : jayceImport) { try { com.android.sched.vfs.InputVDir vDir = com.android.jack.Jack.wrapAsVDir(jackFile, hooks); jackFilesToImport.add(vDir); com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create(vDir, phantomLookup); rootPackage.addLoader(rootPLoader); } catch (java.io.IOException ioException) { throw new com.android.jack.JackFileException((""Error importing jack container: "" + (ioException.getMessage())), ioException); } } return new com.android.jack.backend.jayce.JayceFileImporter(jackFilesToImport); }",9ac69a092db94a6368e92156e9b5d235b7c5af8c,"@javax.annotation.Nonnull private static com.android.jack.backend.jayce.JayceFileImporter getJayceFileImporter(@javax.annotation.Nonnull java.util.List<java.io.File> jayceImport, @javax.annotation.Nonnull com.android.jack.ir.ast.JPackage rootPackage, @javax.annotation.Nonnull com.android.jack.lookup.JPhantomLookup phantomLookup, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks) throws com.android.jack.JackFileException { java.util.List<com.android.jack.library.JackLibrary> jackLibrariesToImport = new java.util.ArrayList<com.android.jack.library.JackLibrary>(jayceImport.size()); com.android.sched.util.config.ReflectFactory<com.android.jack.jayce.JaycePackageLoader> factory = com.android.sched.util.config.ThreadConfig.get(com.android.jack.Jack.IMPORT_POLICY); for (final java.io.File jackFile : jayceImport) { try { com.android.sched.vfs.InputRootVDir vDir = com.android.jack.Jack.wrapAsVDir(jackFile, hooks); com.android.jack.library.JackLibrary jackLibrary = new com.android.jack.library.JackLibrary(vDir); jackLibrariesToImport.add(jackLibrary); com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create(jackLibrary, phantomLookup); rootPackage.addLoader(rootPLoader); } catch (java.io.IOException ioException) { throw new com.android.jack.JackFileException((""Error importing jack container: "" + (ioException.getMessage())), ioException); } } return new com.android.jack.backend.jayce.JayceFileImporter(jackLibrariesToImport); }",c730e2187f571c32386e14c6b4ccac75df85fe0f,"getJayceFileImporter(java.util.List,com.android.jack.ir.ast.JPackage,com.android.jack.lookup.JPhantomLookup,com.android.sched.util.RunnableHooks)","getJayceFileImporter(java.util.List,com.android.jack.ir.ast.JPackage,com.android.jack.lookup.JPhantomLookup,com.android.sched.util.RunnableHooks)",4,16,"@javax.annotation.Nonnull private static com.android.jack.backend.jayce.JayceFileImporter getJayceFileImporter(@javax.annotation.Nonnull java.util.List<java.io.File> jayceImport, @javax.annotation.Nonnull com.android.jack.ir.ast.JPackage rootPackage, @javax.annotation.Nonnull com.android.jack.lookup.JPhantomLookup phantomLookup, @javax.annotation.Nonnull com.android.sched.util.RunnableHooks hooks) throws com.android.jack.JackFileException { java.util.List<com.android.jack.library.InputJackLibrary> inputJackLibraries = new java.util.ArrayList<com.android.jack.library.InputJackLibrary>(jayceImport.size()); com.android.sched.util.config.ReflectFactory<com.android.jack.jayce.JaycePackageLoader> factory = com.android.sched.util.config.ThreadConfig.get(com.android.jack.Jack.IMPORT_POLICY); for (final java.io.File jackFile : jayceImport) { try { com.android.sched.vfs.InputRootVDir vDir = com.android.jack.Jack.wrapAsVDir(jackFile, hooks); com.android.jack.library.InputJackLibrary inputJackLibrary = new com.android.jack.library.InputJackLibrary(vDir); inputJackLibraries.add(inputJackLibrary); com.android.jack.jayce.JaycePackageLoader rootPLoader = factory.create(inputJackLibrary, phantomLookup); rootPackage.addLoader(rootPLoader); } catch (java.io.IOException ioException) { throw new com.android.jack.JackFileException((""Error importing jack container: "" + (ioException.getMessage())), ioException); } } return new com.android.jack.backend.jayce.JayceFileImporter(inputJackLibraries); }",769dc79b9afcc61d50c9fa5efdc43c3d7d6a07af,"getJayceFileImporter(java.util.List,com.android.jack.ir.ast.JPackage,com.android.jack.lookup.JPhantomLookup,com.android.sched.util.RunnableHooks)",334761,442,443
588602,core_tests_hosttests_test-apps_MultiDexLegacyTestServicesTests2_src_com_android_framework_multidexlegacytestservices_test2_ServicesTests.java,,,,"private java.lang.String getServiceCompletionStatus(int serviceId) { java.io.File resultFile = new java.io.File(targetFilesDir, (""Service"" + serviceId)); if (!(resultFile.isFile())) { return (""Service"" + serviceId) + "" never completed.""; } if ((resultFile.length()) != 8) { return (""Service"" + serviceId) + "" was restarted.""; } return com.android.framework.multidexlegacytestservices.test2.ServicesTests.COMPLETION_SUCCESS; }",bb956b81b7e040db8f5fb7347973c71c3254056f,,getServiceCompletionStatus(int),7,21,"private java.lang.String getServiceCompletionStatus(int serviceId) { java.lang.String status = com.android.framework.multidexlegacytestservices.test2.ServicesTests.COMPLETION_SUCCESS; java.io.File resultFile = new java.io.File(targetFilesDir, (""Service"" + serviceId)); if (!(resultFile.isFile())) { status = (""Service"" + serviceId) + "" never completed.""; } else if ((resultFile.length()) != 8) { status = (""Service"" + serviceId) + "" was restarted.""; } android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, (((""Service "" + serviceId) + "" completion status: "") + status)); return status; }",c5541c13b60e635898b4ac89f378e969101c9754,getServiceCompletionStatus(int),443222,116,173
117753,jack-tests_tests_com_android_jack_opcodes_OpcodesTests.java,25.0,"@org.junit.Test public void mul_double() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(MUL_DOUBLE).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",5312131394fd73cf5dbde9c9aa73b00f7ff788ff,"@org.junit.Test public void mul_double() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(MUL_DOUBLE).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",82ff3209c36bdc46b6e98096fbe824d54a944d93,mul_double(),mul_double(),4,25,"@org.junit.Test public void mul_double() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(MUL_DOUBLE).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",08a4d087bf5825658efc1f065aedad88e38282d5,mul_double(),418868,110,108
103220,gradle-import_src_main_java_com_android_tools_gradle_eclipse_GradleImport.java,65.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void copyTextFile(@com.android.annotations.Nullable com.android.tools.gradle.eclipse.ImportModule module, @com.android.annotations.NonNull java.io.File source, @com.android.annotations.NonNull java.io.File dest) throws java.io.IOException { assert com.android.tools.gradle.eclipse.GradleImport.isTextFile(source) : source; java.nio.charset.Charset encoding = null; if (module != null) { encoding = module.getFileEncoding(source); if (encoding != null) { com.android.tools.gradle.eclipse.GradleImport.copyTextFileWithEncoding(source, dest, encoding); return; } encoding = module.getProjectEncoding(source); } if (encoding == null) { encoding = getEncodingFromWorkspaceSetting(); } if (com.android.utils.SdkUtils.endsWithIgnoreCase(source.getPath(), com.android.SdkConstants.DOT_XML)) { java.lang.String defaultCharset = (encoding != null) ? encoding.name() : com.android.SdkConstants.UTF_8; java.lang.String xml = com.android.utils.PositionXmlParser.getXmlString(com.google.common.io.Files.toByteArray(source), defaultCharset); com.google.common.io.Files.write(xml, dest, Charsets.UTF_8); } else if (encoding != null) { com.android.tools.gradle.eclipse.GradleImport.copyTextFileWithEncoding(source, dest, encoding); } else { com.google.common.io.Files.copy(source, dest); } }",7a96cccf1a469a66c036bc1eb34efc72bec7f7e7,,"copyTextFile(com.android.tools.gradle.eclipse.ImportModule,java.io.File,java.io.File)",3,83,"public void copyTextFile(@com.android.annotations.Nullable com.android.tools.gradle.eclipse.ImportModule module, @com.android.annotations.NonNull java.io.File source, @com.android.annotations.NonNull java.io.File dest) throws java.io.IOException { assert com.android.tools.gradle.eclipse.GradleImport.isTextFile(source) : source; java.nio.charset.Charset encoding = null; if (module != null) { encoding = module.getFileEncoding(source); if (encoding != null) { com.android.tools.gradle.eclipse.GradleImport.copyTextFileWithEncoding(source, dest, encoding); return; } encoding = module.getProjectEncoding(source); } if (encoding == null) { encoding = getEncodingFromWorkspaceSetting(); } if (com.android.utils.SdkUtils.endsWithIgnoreCase(source.getPath(), com.android.SdkConstants.DOT_XML)) { java.lang.String defaultCharset = (encoding != null) ? encoding.name() : com.android.SdkConstants.UTF_8; java.lang.String xml = com.android.utils.PositionXmlParser.getXmlString(com.google.common.io.Files.toByteArray(source), defaultCharset); if (xml.startsWith(""<?xml"")) { int prologueEnd = xml.indexOf(""?>""); if (prologueEnd != (-1)) { xml = ""<?xml version=\""1.0\"" encoding=\""utf-8\""?>"" + (xml.substring((prologueEnd + 2))); } } com.google.common.io.Files.write(xml, dest, Charsets.UTF_8); } else if (encoding != null) { com.android.tools.gradle.eclipse.GradleImport.copyTextFileWithEncoding(source, dest, encoding); } else { com.google.common.io.Files.copy(source, dest); } }",c3f5bae40f04f3b4b248d142aa6a63cd1b6e73f5,"copyTextFile(com.android.tools.gradle.eclipse.ImportModule,java.io.File,java.io.File)",317774,346,409
579565,src_java_com_android_internal_telephony_RIL.java,198.0,"@java.lang.Override public void setCallWaiting(boolean enable, int serviceClass, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_CALL_WAITING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" enable = "") + enable) + "" serviceClass = "") + serviceClass)); } try { radioProxy.setCallWaiting(rr.mSerial, enable, serviceClass); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setCallWaiting"", e); } } }",413d60cc6eb46c1820a83c8cdd51a2f2d3948aa8,"@java.lang.Override public void setCallWaiting(boolean enable, int serviceClass, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_SET_CALL_WAITING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" enable = "") + enable) + "" serviceClass = "") + serviceClass)); } try { radioProxy.setCallWaiting(rr.mSerial, enable, serviceClass); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setCallWaiting"", e); } } }",1ae110ccf250429a492834a83d0eb70cb3c0d11a,"setCallWaiting(boolean,int,android.os.Message)","setCallWaiting(boolean,int,android.os.Message)",3,198,"@java.lang.Override public void setCallWaiting(boolean enable, int serviceClass, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_SET_CALL_WAITING, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" enable = "") + enable) + "" serviceClass = "") + serviceClass)); } try { radioProxy.setCallWaiting(rr.mSerial, enable, serviceClass); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""setCallWaiting"", e); } } }",413d60cc6eb46c1820a83c8cdd51a2f2d3948aa8,"setCallWaiting(boolean,int,android.os.Message)",89290,241,237
121951,sdk-common_src_main_java_com_android_ide_common_process_ProcessInfoBuilder.java,,,,"@com.android.annotations.NonNull public com.android.ide.common.process.JavaProcessInfo createJavaProcess() { if ((mClasspath) == null) { throw new java.lang.IllegalStateException(""classpath is missing""); } if ((mMain) == null) { throw new java.lang.IllegalStateException(""main class is missing""); } return new com.android.ide.common.process.ProcessInfoBuilder.JavaProcessInfoImpl(mClasspath, mMain, com.google.common.collect.ImmutableList.copyOf(mArgs), com.google.common.collect.ImmutableMap.copyOf(mEnvironment), com.google.common.collect.ImmutableList.copyOf(mJvmArgs)); }",b9ffeb9d332c37135a3281e32f95d4ec93576521,,createJavaProcess(),6,5,"@com.android.annotations.NonNull public com.android.ide.common.process.JavaProcessInfo createJavaProcess() { checkNotNull(mClasspath, ""classpath is missing""); checkNotNull(mMain, ""main class is missing""); return new com.android.ide.common.process.ProcessInfoBuilder.JavaProcessInfoImpl(mClasspath, mMain, com.google.common.collect.ImmutableList.copyOf(mArgs), com.google.common.collect.ImmutableMap.copyOf(mEnvironment), com.google.common.collect.ImmutableList.copyOf(mJvmArgs)); }",66a5e3a815fe1e469414eaed9219798c4d9ad092,createJavaProcess(),265460,147,119
37720,sdkmanager_libs_sdklib_src_com_android_sdklib_devices_Device.java,,,,public void addState(com.android.sdklib.devices.Device.State state) { mState.add(state); },7c8c5862daa3330ea5ef7b4270b71f5b9d8a8943,,addState(com.android.sdklib.devices.Device$State),8,10,public void addState(com.android.sdklib.devices.State state) { mState.add(state); },366662c0fda960e8bea94eed264b31163f64c6a9,addState(com.android.sdklib.devices.State),17804,29,27
329338,tests_accessibilityservice_src_android_accessibilityservice_cts_AccessibilityEndToEndTest.java,26.0,"@java.lang.Override public void run() { getActivity().runOnUiThread(new java.lang.Runnable() { @java.lang.Override public void run() { android.app.NotificationManager notificationManager = ((android.app.NotificationManager) (getActivity().getSystemService(Service.NOTIFICATION_SERVICE))); notificationManager.notify(notificationId, notification); getActivity().finish(); } }); }",fb413e293c736c7c70df298c303828fd7c3b1b4e,"@java.lang.Override public void run() { getActivity().runOnUiThread(new java.lang.Runnable() { @java.lang.Override public void run() { android.app.NotificationManager notificationManager = ((android.app.NotificationManager) (getActivity().getSystemService(Service.NOTIFICATION_SERVICE))); notificationManager.notify(notificationId, notification); notificationManager.cancel(notificationId); getActivity().finish(); } }); }",bd10f026fa0d81d6c1c7ebea19e493028d70f551,run(),run(),3,15,"@java.lang.Override public void run() { getActivity().runOnUiThread(new java.lang.Runnable() { @java.lang.Override public void run() { notificationManager.notify(notificationId, notification); } }); }",1e81ebe539178004d8ebd27084cdae399aaef347,run(),33533,88,47
50690,ddmlib_src_main_java_com_android_ddmlib_HandleViewDebug.java,4.0,"@java.lang.Override public void handleChunk(com.android.ddmlib.Client client, int type, java.nio.ByteBuffer data, boolean isReply, int msgId) { }",ac5af1b19b9865ec860e1c9230f624a6f3bccfa9,"@java.lang.Override public void handleChunk(com.android.ddmlib.Client client, int type, java.nio.ByteBuffer data, boolean isReply, int msgId) { java.lang.System.out.println(""HandleViewDebug: handled chunk""); }",2f7965cd07b97b2cbf25ebc36ee85e0c56d021c5,"handleChunk(com.android.ddmlib.Client,int,java.nio.ByteBuffer,boolean,int)","handleChunk(com.android.ddmlib.Client,int,java.nio.ByteBuffer,boolean,int)",4,3,"@java.lang.Override public void handleChunk(com.android.ddmlib.Client client, int type, java.nio.ByteBuffer data, boolean isReply, int msgId) { }",ac5af1b19b9865ec860e1c9230f624a6f3bccfa9,"handleChunk(com.android.ddmlib.Client,int,java.nio.ByteBuffer,boolean,int)",317723,59,42
137133,jack-tests_src_com_android_jack_test_toolchain_AbstractTestTools.java,23.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.test.toolchain.JackApiBrestToolchain build() { return new com.android.jack.test.toolchain.JackApiBrestToolchain(com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt(""jack"")); }",9fda6e4b7de4e0bc9885d06e26bc0aff1789a502,,build(),14,28,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.test.toolchain.JackApiV01Toolchain build() { return new com.android.jack.test.toolchain.JackApiV01Toolchain(com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt(""jack"")); }",eb13489d2989166f5cb4f7ab33951c2a12452b01,build(),345798,72,72
111404,build-system_builder_src_main_java_com_android_builder_internal_packaging_Packager.java,3.0,"private void addDexFolder(@com.android.annotations.NonNull java.io.File dexFolder) throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SealedPackageException { java.io.File[] files = dexFolder.listFiles(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File file, java.lang.String name) { return name.endsWith(SdkConstants.DOT_DEX); } }); if ((files != null) && ((files.length) > 0)) { for (java.io.File file : files) { addFile(file, file.getName()); } } }",431764135fd25226b8935dea804a4a4d29c17ce5,"private void addDexFolder(@com.android.annotations.NonNull java.io.File dexFolder) throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SealedPackageException { java.io.File[] files = dexFolder.listFiles(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File file, java.lang.String name) { return name.endsWith(SdkConstants.DOT_DEX); } }); if ((files != null) && ((files.length) > 0)) { for (java.io.File file : files) { addFile(file, generateDexName()); } } }",f0a80676879cf540f22ee41e4d068e29e6b5ba5f,addDexFolder(java.io.File),addDexFolder(java.io.File),4,3,"private void addDexFolder(@com.android.annotations.NonNull java.io.File dexFolder) throws com.android.builder.packaging.DuplicateFileException, com.android.builder.packaging.PackagerException, com.android.builder.packaging.SealedPackageException { java.io.File[] files = dexFolder.listFiles(new java.io.FilenameFilter() { @java.lang.Override public boolean accept(java.io.File file, java.lang.String name) { return name.endsWith(SdkConstants.DOT_DEX); } }); if ((files != null) && ((files.length) > 0)) { for (java.io.File file : files) { addDexFile(file); } } }",46791098a0ecb3a7029f382fa0c5da3506dd3ea0,addDexFolder(java.io.File),211867,165,162
186130,jack-tests_tests_com_android_jack_java8_LambdaTest.java,2.0,"@org.junit.Test public void testLamba007() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA007).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",0509e96a5983c288dd5544de32c01dc50c8e7dbf,"@org.junit.Test public void testLamba007() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA007).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",25f07abe32a02c24975686b74d6a3ee6b90b49cb,testLamba007(),testLamba007(),7,2,@org.junit.Test public void testLamba007() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA007).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },3270472af9095ea7e7077cf584f5206cf6dcbcf5,testLamba007(),466355,81,55
162242,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_model_StandaloneNdkComponentModelPlugin.java,,,,"private static void createAssembleTask(@com.android.annotations.NonNull org.gradle.model.ModelMap<org.gradle.api.Task> tasks, @com.android.annotations.NonNull final org.gradle.api.Named dimension) { java.lang.String taskName = com.android.build.gradle.model.StandaloneNdkComponentModelPlugin.Rules.getAssembleTaskName(dimension); tasks.create(taskName, new org.gradle.api.Action<org.gradle.api.Task>() { @java.lang.Override public void execute(org.gradle.api.Task task) { task.setDescription(((""Assembles all "" + (dimension.getName())) + "" builds."")); task.setGroup(BasePlugin.BUILD_GROUP); } }); }",b376fffccd5830e92bd2d9488b2672c9e5b5a32d,,"createAssembleTask(org.gradle.model.ModelMap,org.gradle.api.Named)",5,3,"private static void createAssembleTaskForFlavorCombo(@com.android.annotations.NonNull org.gradle.model.ModelMap<org.gradle.api.Task> tasks, @com.android.annotations.NonNull final java.util.List<? extends org.gradle.api.Named> dimensions) { final java.lang.String flavorCombo = com.android.build.gradle.model.StandaloneNdkComponentModelPlugin.Rules.combineAsCamelCase(dimensions); java.lang.String taskName = com.android.build.gradle.model.StandaloneNdkComponentModelPlugin.Rules.getAssembleTaskName(dimensions); tasks.create(taskName, new org.gradle.api.Action<org.gradle.api.Task>() { @java.lang.Override public void execute(org.gradle.api.Task task) { task.setDescription((""Assembles all builds for flavor combination: "" + flavorCombo)); task.setGroup(BasePlugin.BUILD_GROUP); } }); }",dcebae222fabffc56ba14f24cbde3a3f5b6e926b,"createAssembleTaskForFlavorCombo(org.gradle.model.ModelMap,java.util.List)",161358,174,215
346028,src_com_android_music_MediaPlaybackService.java,26.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onMusicCatalogReady(boolean success) { android.util.Log.d(com.android.music.MediaPlaybackService.TAG, (""Received catalog result, success: "" + (java.lang.String.valueOf(success)))); if (success) { loadChildrenImpl(parentMediaId, result); } else { result.sendResult(java.util.Collections.emptyList()); } }",1cf8f58d6bbffad52a0d6619a2794a54ff18aa67,,onMusicCatalogReady(boolean),10,29,"@java.lang.Override public void onMusicCatalogReady(boolean success) { android.util.Log.d(com.android.music.MediaPlaybackService.TAG, (""Received catalog result, success: "" + (java.lang.String.valueOf(success)))); if (success) { onLoadChildren(parentMediaId, result); } else { result.sendResult(java.util.Collections.emptyList()); } }",a66f517be89e8764642b9c9bc2f4dbdf24a0b089,onMusicCatalogReady(boolean),372090,91,91
91995,luni_src_main_java_libcore_io_BlockGuardOs.java,23.0,"@java.lang.Override public void mkfifo(java.lang.String path, int mode) throws libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.mkfifo(path, mode); }",ea9de947530c764a48b4f42d9cb856d372877795,"@java.lang.Override public void mkfifo(java.lang.String path, int mode) throws android.os.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.mkfifo(path, mode); }",d8f377696b8860efe7a1e5d8540be5e9ad4557a1,"mkfifo(java.lang.String,int)","mkfifo(java.lang.String,int)",3,23,"@java.lang.Override public void mkfifo(java.lang.String path, int mode) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.mkfifo(path, mode); }",b40456f8b6a2267383fb618c7a00a02070076a6e,"mkfifo(java.lang.String,int)",170370,57,57
181862,jack_src_com_android_jack_meta_LibraryMetaWriter.java,0.0,"private void addMetaToOutputJackLib(com.android.jack.meta.Meta meta, com.android.jack.library.OutputJackLibrary ojl) throws java.io.IOException { com.android.sched.vfs.InputVFile inputFile = meta.getVFile(); com.android.sched.vfs.VPath path = meta.getPath(); com.android.sched.vfs.OutputVFile outputFile = ojl.createFile(FileType.JPP, path); java.io.InputStream is = null; try { is = inputFile.getInputStream(); com.android.sched.util.stream.ByteStreamSucker sucker = new com.android.sched.util.stream.ByteStreamSucker(is, outputFile.getOutputStream(), true); sucker.suck(); } finally { if (is != null) { is.close(); } } }",0e9bde5a14bd0b92c20f2ea64838e07c3e33e3c4,"private void addMetaToOutputJackLib(@javax.annotation.Nonnull com.android.jack.meta.Meta meta, @javax.annotation.Nonnull com.android.jack.library.OutputJackLibrary ojl) throws java.io.IOException { com.android.sched.vfs.InputVFile inputFile = meta.getVFile(); com.android.sched.vfs.VPath path = meta.getPath(); com.android.sched.vfs.OutputVFile outputFile = ojl.createFile(FileType.JPP, path); java.io.InputStream is = null; try { is = inputFile.getInputStream(); com.android.sched.util.stream.ByteStreamSucker sucker = new com.android.sched.util.stream.ByteStreamSucker(is, outputFile.getOutputStream(), true); sucker.suck(); } finally { if (is != null) { is.close(); } } }",5efdfbd678f66400dd842c82057592c04e382c0b,"addMetaToOutputJackLib(com.android.jack.meta.Meta,com.android.jack.library.OutputJackLibrary)","addMetaToOutputJackLib(com.android.jack.meta.Meta,com.android.jack.library.OutputJackLibrary)",5,0,"private void addMetaToOutputJackLib(@javax.annotation.Nonnull com.android.jack.meta.Meta meta, @javax.annotation.Nonnull com.android.jack.library.OutputJackLibrary ojl) throws java.io.IOException { com.android.sched.vfs.InputVFile inputFile = meta.getVFile(); com.android.sched.vfs.VPath path = meta.getPath(); com.android.sched.vfs.OutputVFile outputFile = ojl.createFile(FileType.META, path); java.io.InputStream is = null; try { is = inputFile.getInputStream(); com.android.sched.util.stream.ByteStreamSucker sucker = new com.android.sched.util.stream.ByteStreamSucker(is, outputFile.getOutputStream(), true); sucker.suck(); } finally { if (is != null) { is.close(); } } }",98281a73c4713bd0d3f167949a77c4f0ff5c2b3e,"addMetaToOutputJackLib(com.android.jack.meta.Meta,com.android.jack.library.OutputJackLibrary)",249612,200,199
91712,build-system_builder_src_main_java_com_android_builder_DefaultBuildType.java,9.0,public com.android.builder.DefaultBuildType initWith(com.android.builder.DefaultBuildType that) { _initWith(that); setDebuggable(that.isDebuggable()); setJniDebugBuild(that.isJniDebugBuild()); setRenderscriptDebugBuild(that.isRenderscriptDebugBuild()); setRenderscriptOptimLevel(that.getRenderscriptOptimLevel()); setPackageNameSuffix(that.getPackageNameSuffix()); setVersionNameSuffix(that.getVersionNameSuffix()); setRunProguard(that.isRunProguard()); setZipAlign(that.isZipAlign()); setSigningConfig(that.getSigningConfig()); return this; },bf6a92363f62fa278ea7bdf96849b595d4d30207,public com.android.builder.DefaultBuildType initWith(com.android.builder.DefaultBuildType that) { _initWith(that); setDebuggable(that.isDebuggable()); setInstrumented(that.isInstrumented()); setJniDebugBuild(that.isJniDebugBuild()); setRenderscriptDebugBuild(that.isRenderscriptDebugBuild()); setRenderscriptOptimLevel(that.getRenderscriptOptimLevel()); setPackageNameSuffix(that.getPackageNameSuffix()); setVersionNameSuffix(that.getVersionNameSuffix()); setRunProguard(that.isRunProguard()); setZipAlign(that.isZipAlign()); setSigningConfig(that.getSigningConfig()); return this; },f68634261b434835bcaf9500a4aa02329ef73ea1,initWith(com.android.builder.DefaultBuildType),initWith(com.android.builder.DefaultBuildType),6,7,public com.android.builder.DefaultBuildType initWith(com.android.builder.DefaultBuildType that) { _initWith(that); setDebuggable(that.isDebuggable()); setTestCoverageEnabled(that.isTestCoverageEnabled()); setJniDebugBuild(that.isJniDebugBuild()); setRenderscriptDebugBuild(that.isRenderscriptDebugBuild()); setRenderscriptOptimLevel(that.getRenderscriptOptimLevel()); setPackageNameSuffix(that.getPackageNameSuffix()); setVersionNameSuffix(that.getVersionNameSuffix()); setRunProguard(that.isRunProguard()); setZipAlign(that.isZipAlign()); setSigningConfig(that.getSigningConfig()); return this; },4b6fac4de62a1d667bc83f8a88273417b76057ab,initWith(com.android.builder.DefaultBuildType),289542,154,158
37986,anttasks_src_com_android_ant_DependencyHelper.java,2.0,"@java.lang.Override public void processLibrary(java.lang.String libRootPath) { mJars.add(new java.io.File(((((libRootPath + ""/"") + (com.android.sdklib.SdkConstants.FD_OUTPUT)) + ""/"") + (com.android.sdklib.SdkConstants.FN_CLASSES_JAR)))); java.io.File libsFolder = new java.io.File(libRootPath, com.android.sdklib.SdkConstants.FD_NATIVE_LIBS); java.io.File[] jarFiles = libsFolder.listFiles(mFilter); if (jarFiles != null) { for (java.io.File jarFile : jarFiles) { mJars.add(jarFile); } } }",2b5b29b3245f2fc57fc4846ac2ce445b87f14c46,"@java.lang.Override public void processLibrary(java.lang.String libRootPath) { java.lang.System.out.println((""PROCESSING "" + libRootPath)); mJars.add(new java.io.File(((((libRootPath + ""/"") + (com.android.sdklib.SdkConstants.FD_OUTPUT)) + ""/"") + (com.android.sdklib.SdkConstants.FN_CLASSES_JAR)))); java.io.File libsFolder = new java.io.File(libRootPath, com.android.sdklib.SdkConstants.FD_NATIVE_LIBS); java.io.File[] jarFiles = libsFolder.listFiles(mFilter); if (jarFiles != null) { for (java.io.File jarFile : jarFiles) { java.lang.System.out.println((""\t"" + jarFile)); mJars.add(jarFile); } } }",24b4ca9a9d2197d350a89c9d7821c67030c644ef,processLibrary(java.lang.String),processLibrary(java.lang.String),2,2,"@java.lang.Override public void processLibrary(java.lang.String libRootPath) { mJars.add(new java.io.File(((((libRootPath + ""/"") + (com.android.sdklib.SdkConstants.FD_OUTPUT)) + ""/"") + (com.android.sdklib.SdkConstants.FN_CLASSES_JAR)))); java.io.File libsFolder = new java.io.File(libRootPath, com.android.sdklib.SdkConstants.FD_NATIVE_LIBS); java.io.File[] jarFiles = libsFolder.listFiles(mFilter); if (jarFiles != null) { for (java.io.File jarFile : jarFiles) { mJars.add(jarFile); } } }",2b5b29b3245f2fc57fc4846ac2ce445b87f14c46,processLibrary(java.lang.String),349697,194,161
311525,tests_wifitests_src_com_android_server_wifi_WifiConnectivityManagerTest.java,17.0,"com.android.server.wifi.WifiConnectivityManager createConnectivityManager() { return new com.android.server.wifi.WifiConnectivityManager(mContext, mWifiStateMachine, mWifiScanner, mWifiConfigManager, mWifiInfo, mWifiNS, mScoreCache, mWifiLastResortWatchdog, mWifiMetrics, mLooper.getLooper(), mClock, true); }",e151b1a5b122cb5e0f2663b4d03111f5d6ba94aa,"com.android.server.wifi.WifiConnectivityManager createConnectivityManager() { return new com.android.server.wifi.WifiConnectivityManager(mContext, mWifiStateMachine, mWifiScanner, mWifiConfigManager, mWifiInfo, mWifiNS, mNetworkScoreManager, mScoreCache, mWifiLastResortWatchdog, mWifiMetrics, mLooper.getLooper(), mClock, true, mFrameworkFacade); }",2a9c8c1b349593f11216689254bc82cfc096700c,createConnectivityManager(),createConnectivityManager(),7,17,"com.android.server.wifi.WifiConnectivityManager createConnectivityManager() { return new com.android.server.wifi.WifiConnectivityManager(mContext, mWifiStateMachine, mWifiScanner, mWifiConfigManager, mWifiInfo, mWifiNS, mWifiLastResortWatchdog, mWifiMetrics, mLooper.getLooper(), mClock, true, mFrameworkFacade, null, null, null); }",3fd4b26cf00d46a8c4689c0a96f4eaeaf6d26824,createConnectivityManager(),180362,90,87
521435,src_main_java_com_android_apksig_internal_apk_v2_V2SchemeSigner.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static byte[] computeApkVerityDigest(com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd) throws java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.util.VerityTreeBuilder builder = new com.android.apksig.internal.util.VerityTreeBuilder(new byte[]{ 0, 0, 0, 0, 0, 0, 0, 0 }); return builder.generateVerityTreeRootHash(beforeCentralDir, centralDir, eocd); }",2813f022b80138a62d49e9f5a828124b0c69aa5a,,"computeApkVerityDigest(com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,com.android.apksig.util.DataSource)",13,1,"private static void computeApkVerityDigest(com.android.apksig.util.DataSource beforeCentralDir, com.android.apksig.util.DataSource centralDir, com.android.apksig.util.DataSource eocd, java.util.Map<com.android.apksig.internal.apk.v2.ContentDigestAlgorithm, byte[]> outputContentDigests) throws java.io.IOException, java.security.NoSuchAlgorithmException { com.android.apksig.internal.util.VerityTreeBuilder builder = new com.android.apksig.internal.util.VerityTreeBuilder(new byte[8]); outputContentDigests.put(ContentDigestAlgorithm.VERITY_CHUNKED_SHA256, builder.generateVerityTreeRootHash(beforeCentralDir, centralDir, eocd)); }",20b0d50922dee687a97da4dd59e71f3fcbf234d6,"computeApkVerityDigest(com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,com.android.apksig.util.DataSource,java.util.Map)",112386,132,173
657832,tests_unit_src_com_android_bluetooth_hfp_HeadsetPhoneStateTest.java,,,,"@org.junit.Test public void testListenForPhoneState_MultiDevice_AllUpAllDown() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); android.bluetooth.BluetoothDevice device2 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 2); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_IGNORE_SCREEN_OFF); mHeadsetPhoneState.listenForPhoneState(device2, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verifyNoMoreInteractions(mTelephonyManager); mHeadsetPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_NONE); verifyNoMoreInteractions(mTelephonyManager); mHeadsetPhoneState.listenForPhoneState(device2, PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).listen(any(), PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).setRadioIndicationUpdateMode(TelephonyManager.INDICATION_FILTER_SIGNAL_STRENGTH, TelephonyManager.INDICATION_UPDATE_MODE_NORMAL); verifyNoMoreInteractions(mTelephonyManager); }",4d0cb9ea4a444eeb2a9d8bb61b9ce2fd8647df4a,,testListenForPhoneState_MultiDevice_AllUpAllDown(),10,2,"@org.junit.Test public void testListenForPhoneState_MultiDevice_AllUpAllDown() { android.bluetooth.BluetoothDevice device1 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 1); android.bluetooth.BluetoothDevice device2 = com.android.bluetooth.TestUtils.getTestDevice(mAdapter, 2); mHeadsetPhoneState.listenForPhoneState(device1, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verify(mTelephonyManager).listen(any(), eq(((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS)))); verifyNoMoreInteractions(mTelephonyManager); mHeadsetPhoneState.listenForPhoneState(device2, ((android.telephony.PhoneStateListener.LISTEN_SERVICE_STATE) | (android.telephony.PhoneStateListener.LISTEN_SIGNAL_STRENGTHS))); verifyNoMoreInteractions(mTelephonyManager); mHeadsetPhoneState.listenForPhoneState(device1, PhoneStateListener.LISTEN_NONE); verifyNoMoreInteractions(mTelephonyManager); mHeadsetPhoneState.listenForPhoneState(device2, PhoneStateListener.LISTEN_NONE); verify(mTelephonyManager).listen(any(), eq(PhoneStateListener.LISTEN_NONE)); verifyNoMoreInteractions(mTelephonyManager); }",9fc3bf847702445791c2bac1eebbc722dda0ba45,testListenForPhoneState_MultiDevice_AllUpAllDown(),182341,389,314
316790,service_java_com_android_server_wifi_LogcatLog.java,0.0,"@java.lang.Override public com.android.server.wifi.LogMessage trace(java.lang.String format) { return makeLogMessage(Log.DEBUG, format); }",acd55befc1e27d8567f931cf03f917cdec68bc35,"@java.lang.Override public com.android.server.wifi.LogMessage trace(java.lang.String format) { return makeLogMessage(Log.VERBOSE, format); }",5ee5219cbc02c326d60f85b408692235e2871759,trace(java.lang.String),trace(java.lang.String),6,0,"@java.lang.Override public com.android.server.wifi.LogMessage trace(java.lang.String format) { return makeLogMessage(Log.DEBUG, format); }",acd55befc1e27d8567f931cf03f917cdec68bc35,trace(java.lang.String),14548,37,37
295313,hostsidetests_devicepolicy_app_ManagedProfile_src_com_android_cts_managedprofile_CameraPolicyTest.java,10.0,"public void testEnableCameraInManagedProfile() throws java.lang.Exception { mDevicePolicyManager.setCameraDisabled(mManagedProfileAdminComponent, false); assertFalse(mDevicePolicyManager.getCameraDisabled(mManagedProfileAdminComponent)); assertFalse(mDevicePolicyManager.getCameraDisabled(null)); checkCanOpenCamera(true); }",c370389cf02557a87dfaa5cb63a7fb9ad5f5cab8,"public void testEnableCameraInManagedProfile() throws java.lang.Exception { mDevicePolicyManager.setCameraDisabled(mManagedProfileAdminComponent, false); assertFalse(mDevicePolicyManager.getCameraDisabled(mManagedProfileAdminComponent)); assertFalse(mDevicePolicyManager.getCameraDisabled(null)); waitUntilCameraPolicyEnforced(true); checkCanOpenCamera(true); }",1a8354a760458e10887a6bab04de23dc5b5ec7b6,testEnableCameraInManagedProfile(),testEnableCameraInManagedProfile(),4,9,"public void testEnableCameraInManagedProfile() throws java.lang.Exception { mDevicePolicyManager.setCameraDisabled(mManagedProfileAdminComponent, false); assertFalse(mDevicePolicyManager.getCameraDisabled(mManagedProfileAdminComponent)); assertFalse(mDevicePolicyManager.getCameraDisabled(null)); checkCanOpenCamera(true); }",c370389cf02557a87dfaa5cb63a7fb9ad5f5cab8,testEnableCameraInManagedProfile(),28978,82,73
305789,packages_SystemUI_src_com_android_systemui_statusbar_SignalClusterView.java,1.0,"public boolean apply(boolean isSecondaryIcon) { if ((mMobileVisible) && (!(mIsAirplaneMode))) { if ((mLastMobileStrengthId) != (mMobileStrengthId)) { updateAnimatableIcon(mMobile, mMobileStrengthId); updateAnimatableIcon(mMobileDark, mMobileStrengthId); mLastMobileStrengthId = mMobileStrengthId; } if ((mLastMobileTypeId) != (mMobileTypeId)) { mMobileType.setImageResource(mMobileTypeId); mLastMobileTypeId = mMobileTypeId; } mMobileGroup.setContentDescription((((mMobileTypeDescription) + "" "") + (mMobileDescription))); mMobileGroup.setVisibility(View.VISIBLE); } else { mMobileGroup.setVisibility(View.GONE); } mMobileGroup.setPaddingRelative((isSecondaryIcon ? mSecondaryTelephonyPadding : 0), 0, 0, 0); mMobile.setPaddingRelative((mIsMobileTypeIconWide ? mWideTypeIconStartPadding : mMobileDataIconStartPadding), 0, 0, 0); mMobileDark.setPaddingRelative((mIsMobileTypeIconWide ? mWideTypeIconStartPadding : mMobileDataIconStartPadding), 0, 0, 0); if (com.android.systemui.statusbar.SignalClusterView.DEBUG) android.util.Log.d(com.android.systemui.statusbar.SignalClusterView.TAG, java.lang.String.format(""mobile: %s sig=%d typ=%d"", (mMobileVisible ? ""VISIBLE"" : ""GONE""), mMobileStrengthId, mMobileTypeId)); mMobileType.setVisibility(((mMobileTypeId) != 0 ? android.view.View.VISIBLE : android.view.View.GONE)); return mMobileVisible; }",e568e31c31b284debdf6681fe18d1285c7bb4d5c,"public boolean apply(boolean isSecondaryIcon) { if ((mMobileVisible) && (!(mIsAirplaneMode))) { if ((mLastMobileStrengthId) != (mMobileStrengthId)) { updateAnimatableIcon(mMobile, mMobileStrengthId); updateAnimatableIcon(mMobileDark, mMobileStrengthId); mLastMobileStrengthId = mMobileStrengthId; } if ((mLastMobileTypeId) != (mMobileTypeId)) { mMobileType.setImageResource(mMobileTypeId); mLastMobileTypeId = mMobileTypeId; } if ((mLastMobileActivityId) != (mMobileActivityId)) { mMobileActivity.setImageResource(mMobileActivityId); mLastMobileActivityId = mMobileActivityId; } mMobileGroup.setContentDescription((((mMobileTypeDescription) + "" "") + (mMobileDescription))); mMobileGroup.setVisibility(View.VISIBLE); } else { mMobileGroup.setVisibility(View.GONE); } mMobileGroup.setPaddingRelative((isSecondaryIcon ? mSecondaryTelephonyPadding : 0), 0, 0, 0); mMobile.setPaddingRelative((mIsMobileTypeIconWide ? mWideTypeIconStartPadding : mMobileDataIconStartPadding), 0, 0, 0); mMobileDark.setPaddingRelative((mIsMobileTypeIconWide ? mWideTypeIconStartPadding : mMobileDataIconStartPadding), 0, 0, 0); mMobileActivity.setPaddingRelative((mIsMobileTypeIconWide ? mWideTypeIconStartPadding : mMobileDataIconStartPadding), 0, 0, 0); if (com.android.systemui.statusbar.SignalClusterView.DEBUG) android.util.Log.d(com.android.systemui.statusbar.SignalClusterView.TAG, java.lang.String.format(""mobile: %s sig=%d typ=%d"", (mMobileVisible ? ""VISIBLE"" : ""GONE""), mMobileStrengthId, mMobileTypeId)); mMobileType.setVisibility(((mMobileTypeId) != 0 ? android.view.View.VISIBLE : android.view.View.GONE)); mMobileActivity.setVisibility(((mMobileActivityId) != 0 ? android.view.View.VISIBLE : android.view.View.GONE)); return mMobileVisible; }",95840f8b2a727b0b595dbff091f8031e097becb8,apply(boolean),apply(boolean),5,27,private int currentVpnIconId(boolean isBranded) { return isBranded ? R.drawable.stat_sys_branded_vpn : R.drawable.stat_sys_vpn_ic; },850baf3174621ff4e5850f344deefee8e8e6c4d2,currentVpnIconId(boolean),24865,478,46
570203,src_java_com_android_ims_ImsManager.java,23.0,"@java.lang.Override public void registrationConnectedWithRadioTech(int imsRadioTech) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log((""registrationConnectedWithRadioTech :: imsRadioTech="" + imsRadioTech)); } synchronized(mRegistrationListeners) { mRegistrationListeners.forEach(( l) -> l.onImsConnected(imsRadioTech)); } }",7fdb4858191687038cd1f856f63b01a8d78950cf,"@java.lang.Override public void onRegistered(int imsRadioTech) { if (com.android.ims.ImsManager.DBG) { com.android.ims.ImsManager.log(""onRegistered ::""); } synchronized(mRegistrationCallbacks) { mRegistrationCallbacks.forEach(( l) -> l.onRegistered(imsRadioTech)); } }",d445038a6e2187633514b8f73cf51697dd4a7594,registrationConnectedWithRadioTech(int),onRegistered(int),14,53,"@java.lang.Override public void onRegistered(int imsRadioTech) { if (com.android.ims.ImsManager.DBG) com.android.ims.ImsManager.log(""onRegistered ::""); synchronized(mRegistrationListeners) { mRegistrationListeners.forEach(( l) -> l.onRegistered(imsRadioTech)); } }",e5d4394c2e9304478787e793a792889178befde2,onRegistered(int),176907,83,81
185300,services_core_java_com_android_server_policy_PhoneWindowManager.java,49.0,"private void applyLidSwitchState() { if (((mLidState) == (android.view.WindowManagerPolicy.WindowManagerFuncs.LID_CLOSED)) && (mLidControlsSleep)) { mPowerManager.goToSleep(android.os.SystemClock.uptimeMillis(), PowerManager.GO_TO_SLEEP_REASON_LID_SWITCH, PowerManager.GO_TO_SLEEP_FLAG_NO_DOZE); } synchronized(mLock) { updateWakeGestureListenerLp(); } }",f3700e5fe908dbc1e3cf1af724922aecd14447fe,"private void applyLidSwitchState() { if (((mLidState) == (android.view.WindowManagerPolicy.WindowManagerFuncs.LID_CLOSED)) && (mLidControlsSleep)) { mPowerManager.goToSleep(android.os.SystemClock.uptimeMillis(), PowerManager.GO_TO_SLEEP_REASON_LID_SWITCH, PowerManager.GO_TO_SLEEP_FLAG_NO_DOZE); } else if (((mLidState) == (android.view.WindowManagerPolicy.WindowManagerFuncs.LID_CLOSED)) && (mLidControlsScreenLock)) { try { mWindowManager.lockNow(null); } catch (android.os.RemoteException e) { } } synchronized(mLock) { updateWakeGestureListenerLp(); } }",68e9df95fdd48c7211124eb795f7795a221bcc6e,applyLidSwitchState(),applyLidSwitchState(),4,49,"private void applyLidSwitchState() { if (((mLidState) == (android.view.WindowManagerPolicy.WindowManagerFuncs.LID_CLOSED)) && (mLidControlsSleep)) { mPowerManager.goToSleep(android.os.SystemClock.uptimeMillis(), PowerManager.GO_TO_SLEEP_REASON_LID_SWITCH, PowerManager.GO_TO_SLEEP_FLAG_NO_DOZE); } else if (((mLidState) == (android.view.WindowManagerPolicy.WindowManagerFuncs.LID_CLOSED)) && (mLidControlsScreenLock)) { mWindowManagerFuncs.lockDeviceNow(); } synchronized(mLock) { updateWakeGestureListenerLp(); } }",04847833e50db76f3a02f8c5ac6c4ea0ea5c4e0a,applyLidSwitchState(),24786,166,153
146882,keystore_tests_src_android_security_KeyPairGeneratorSpecTest.java,3.0,"public void testConstructor_NullEndDate_Failure() throws java.lang.Exception { try { new android.security.KeyPairGeneratorSpec(getContext(), android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1, ""RSA"", 1024, null, android.security.KeyPairGeneratorSpecTest.TEST_DN_1, android.security.KeyPairGeneratorSpecTest.SERIAL_1, android.security.KeyPairGeneratorSpecTest.NOW, null, 0); fail(""Should throw IllegalArgumentException when keystoreAlias is null""); } catch (java.lang.IllegalArgumentException success) { } }",35ac351892164f4cbee082afe0dbffd303772371,"public void testConstructor_NullEndDate_Failure() throws java.lang.Exception { android.security.KeyPairGeneratorSpec spec = new android.security.KeyPairGeneratorSpec(getContext(), android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1, ""RSA"", 1024, null, android.security.KeyPairGeneratorSpecTest.TEST_DN_1, android.security.KeyPairGeneratorSpecTest.SERIAL_1, android.security.KeyPairGeneratorSpecTest.NOW, null, 0); assertEquals(android.security.KeyPairGeneratorSpecTest.DEFAULT_CERT_NOT_AFTER, spec.getEndDate()); }",1d72c5058fc36bfb6b8aa01def7d7ffe9b79b106,testConstructor_NullEndDate_Failure(),testConstructor_NullEndDate_Failure(),3,7,"public void testConstructor_NullEndDate_Success() throws java.lang.Exception { android.security.KeyPairGeneratorSpec spec = new android.security.KeyPairGeneratorSpec(getContext(), android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1, ""RSA"", 1024, null, android.security.KeyPairGeneratorSpecTest.TEST_DN_1, android.security.KeyPairGeneratorSpecTest.SERIAL_1, android.security.KeyPairGeneratorSpecTest.NOW, null, 0); assertEquals(android.security.KeyPairGeneratorSpecTest.DEFAULT_CERT_NOT_AFTER, spec.getEndDate()); }",d5dfe1ed6aa39b77184a6eac6fd0488a09ea4f0a,testConstructor_NullEndDate_Success(),161601,113,113
81416,tests_tests_renderscript_src_android_renderscript_cts_TestPown.java,,,,"private void checkPownFloat2Int2() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inY, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testPownFloat2Int2(inX, out); verifyResultsPownFloat2Int2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testPownFloat2Int2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testPownFloat2Int2(inX, out); verifyResultsPownFloat2Int2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testPownFloat2Int2: "" + (e.toString()))); } }",1e861de8924cd98632ee60e30889510aa3d5d8e6,,checkPownFloat2Int2(),9,8,"private void checkPownFloat2Int2Float2() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -4000332856288343189L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.SIGNED_32, 2, -4000332856288343189L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testPownFloat2Int2Float2(inX, out); verifyResultsPownFloat2Int2Float2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testPownFloat2Int2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testPownFloat2Int2Float2(inX, out); verifyResultsPownFloat2Int2Float2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testPownFloat2Int2Float2: "" + (e.toString()))); } }",20d3097ff7e3d6816da540f0684dc796668ab5fc,checkPownFloat2Int2Float2(),143283,441,393
410059,services_core_java_com_android_server_connectivity_Tethering.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.android.server.connectivity.tethering.IControlsTethering makeControlCallback(java.lang.String ifname) { return new com.android.server.connectivity.tethering.IControlsTethering() { private final java.lang.String mIfName = ifname; @java.lang.Override public void updateInterfaceState(com.android.server.connectivity.tethering.TetherInterfaceStateMachine who, int state, int lastError) { notifyInterfaceStateChange(mIfName, who, state, lastError); } @java.lang.Override public void updateLinkProperties(com.android.server.connectivity.tethering.TetherInterfaceStateMachine who, android.net.LinkProperties newLp) { notifyLinkPropertiesChanged(mIfName, who, newLp); } }; }",81db32b69a2c5a410e6c3e5de867db0d0dd2484b,,makeControlCallback(java.lang.String),3,65,"private com.android.server.connectivity.tethering.IControlsTethering makeControlCallback(java.lang.String ifname) { return new com.android.server.connectivity.tethering.IControlsTethering() { @java.lang.Override public void updateInterfaceState(com.android.server.connectivity.tethering.TetherInterfaceStateMachine who, int state, int lastError) { notifyInterfaceStateChange(ifname, who, state, lastError); } @java.lang.Override public void updateLinkProperties(com.android.server.connectivity.tethering.TetherInterfaceStateMachine who, android.net.LinkProperties newLp) { notifyLinkPropertiesChanged(ifname, who, newLp); } }; }",7132477bc918d719ebc35a0f2d9be51aa96381bb,makeControlCallback(java.lang.String),255587,184,168
121951,build-system_builder_src_main_java_com_android_builder_png_QueuedCruncher.java,4.0,"@java.lang.Override public void crunchPng(@com.android.annotations.NonNull final java.io.File from, @com.android.annotations.NonNull final java.io.File to) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { final com.android.builder.tasks.Job<com.android.builder.png.AaptProcess> aaptProcessJob = new com.android.builder.tasks.Job<com.android.builder.png.AaptProcess>((""Cruncher "" + (from.getName())), new com.android.builder.tasks.Task<com.android.builder.png.AaptProcess>() { @java.lang.Override public void run(com.android.builder.tasks.Job<com.android.builder.png.AaptProcess> job, com.android.builder.tasks.JobContext<com.android.builder.png.AaptProcess> context) throws java.io.IOException { mLogger.verbose(""Thread(%1$s): begin executing job %2$s"", java.lang.Thread.currentThread().getName(), job.getJobTitle()); context.getPayload().crunch(from, to, job); mLogger.verbose(""Thread(%1$s): done executing job %2$s"", java.lang.Thread.currentThread().getName(), job.getJobTitle()); } }); mOutstandingJobs.add(aaptProcessJob); mCrunchingRequests.push(aaptProcessJob); }",d8ec02811f526fde7518d95fdab828b0ca6dd31f,"@java.lang.Override public void crunchPng(@com.android.annotations.NonNull final java.io.File from, @com.android.annotations.NonNull final java.io.File to) throws com.android.ide.common.internal.PngException { try { final com.android.builder.tasks.Job<com.android.builder.png.AaptProcess> aaptProcessJob = new com.android.builder.tasks.Job<com.android.builder.png.AaptProcess>((""Cruncher "" + (from.getName())), new com.android.builder.tasks.Task<com.android.builder.png.AaptProcess>() { @java.lang.Override public void run(com.android.builder.tasks.Job<com.android.builder.png.AaptProcess> job, com.android.builder.tasks.JobContext<com.android.builder.png.AaptProcess> context) throws java.io.IOException { mLogger.verbose(""Thread(%1$s): begin executing job %2$s"", java.lang.Thread.currentThread().getName(), job.getJobTitle()); context.getPayload().crunch(from, to, job); mLogger.verbose(""Thread(%1$s): done executing job %2$s"", java.lang.Thread.currentThread().getName(), job.getJobTitle()); } }); mOutstandingJobs.add(aaptProcessJob); mCrunchingRequests.push(aaptProcessJob); } catch (java.lang.InterruptedException e) { throw new com.android.ide.common.internal.PngException(e); } }",4cef6ee6453839d9f9679328a5603f5441ed6356,"crunchPng(java.io.File,java.io.File)","crunchPng(java.io.File,java.io.File)",6,4,"@java.lang.Override public void crunchPng(@com.android.annotations.NonNull final java.io.File from, @com.android.annotations.NonNull final java.io.File to) throws com.android.ide.common.internal.PngException { try { final com.android.builder.tasks.Job<com.android.builder.png.AaptProcess> aaptProcessJob = new com.android.builder.tasks.Job<com.android.builder.png.AaptProcess>((""Cruncher "" + (from.getName())), new com.android.builder.tasks.Task<com.android.builder.png.AaptProcess>() { @java.lang.Override public void run(com.android.builder.tasks.Job<com.android.builder.png.AaptProcess> job, com.android.builder.tasks.JobContext<com.android.builder.png.AaptProcess> context) throws java.io.IOException { mLogger.verbose(""Thread(%1$s): begin executing job %2$s"", java.lang.Thread.currentThread().getName(), job.getJobTitle()); context.getPayload().crunch(from, to, job); mLogger.verbose(""Thread(%1$s): done executing job %2$s"", java.lang.Thread.currentThread().getName(), job.getJobTitle()); } }); mOutstandingJobs.add(aaptProcessJob); mCrunchingRequests.push(aaptProcessJob); } catch (java.lang.InterruptedException e) { java.lang.Thread.currentThread().interrupt(); throw new com.android.ide.common.internal.PngException(e); } }",3ab67bc71590c5c18bcd9fa50ee38f00744e64ac,"crunchPng(java.io.File,java.io.File)",265555,356,366
316743,jack_src_com_android_jack_ir_impl_ReferenceMapper.java,23.0,"private void createParameters(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method, @javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration x, @javax.annotation.Nonnull com.android.jack.ir.impl.CudInfo cuInfo) throws com.android.jack.ir.ast.JTypeLookupException { if ((x.arguments) != null) { for (org.eclipse.jdt.internal.compiler.ast.Argument argument : x.arguments) { com.android.jack.ir.sourceinfo.SourceInfo info = com.android.jack.ir.impl.ReferenceMapper.makeSourceInfo(cuInfo, argument, sourceInfoFactory); org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding binding = argument.binding; createParameter(info, method, com.android.jack.ir.impl.ReferenceMapper.intern(binding.name), binding.type, getModifier(binding)); } } }",9f7a905109e282939cd2d7ff5ede0b93222cd1de,"private void createParameters(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method, @javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration x, @javax.annotation.Nonnull com.android.jack.ir.impl.CudInfo cuInfo) throws com.android.jack.ir.ast.JTypeLookupException { if ((x.arguments) != null) { for (org.eclipse.jdt.internal.compiler.ast.Argument argument : x.arguments) { com.android.jack.ir.sourceinfo.SourceInfo info = com.android.jack.ir.impl.ReferenceMapper.makeSourceInfo(cuInfo, argument, sourceInfoFactory); org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding binding = argument.binding; createParameter(info, method, com.android.jack.ir.impl.ReferenceMapper.intern(binding.name), binding.type, getFinalModifier(binding)); } } }",bcdb62e5a85150f1250b748866a29fcc19c19391,"createParameters(com.android.jack.ir.ast.JMethod,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,com.android.jack.ir.impl.CudInfo)","createParameters(com.android.jack.ir.ast.JMethod,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,com.android.jack.ir.impl.CudInfo)",16,24,"private void createParameters(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethod method, @javax.annotation.Nonnull org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration x, @javax.annotation.Nonnull com.android.jack.ir.impl.CudInfo cuInfo) throws com.android.jack.ir.ast.JTypeLookupException { if ((x.arguments) != null) { for (org.eclipse.jdt.internal.compiler.ast.Argument argument : x.arguments) { com.android.jack.ir.sourceinfo.SourceInfo info = com.android.jack.ir.impl.ReferenceMapper.makeSourceInfo(cuInfo, argument, sourceInfoFactory); org.eclipse.jdt.internal.compiler.lookup.LocalVariableBinding binding = argument.binding; createParameter(info, method, com.android.jack.ir.impl.ReferenceMapper.intern(binding.name), binding.type, ((getFinalModifier(binding)) | (com.android.jack.ir.ast.JModifier.NAME_PRESENT))); } } }",7d9fba1c945e69bc8fc44bde98f230d6e03e8c16,"createParameters(com.android.jack.ir.ast.JMethod,org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration,com.android.jack.ir.impl.CudInfo)",48757,219,240
39017,luni_src_main_java_java_io_File.java,62.0,public boolean mkdirs() { if (exists()) { return false; } if (mkdir()) { return true; } java.lang.String parentDir = getParent(); if (parentDir == null) { return false; } return (new java.io.File(parentDir).mkdirs()) && (mkdir()); },d9cfdbe01b0708c7d77604ac91c1a2c9148d168a,public boolean mkdirs() { if (exists()) { return false; } if (mkdir()) { return true; } makeParentDirectories(); return mkdir(); },e755bfd3c68f29c5efc9e4d4d708dca0314145a3,mkdirs(),mkdirs(),2,63,public boolean mkdirs() { return mkdirs(false); },97161007f4149b877a96abe1152aac7112070fe3,mkdirs(),124911,33,13
252478,java_tests_RsTest_src_com_android_rs_test_UT_math_agree.java,43.0,"private com.android.rs.test.Long4 pack_l4(long[] val) { assert (val.length) == 4; return new com.android.rs.test.Long4(val[0], val[1], val[2], val[3]); }",568426ec72991c9d0345b6bdad4ab9da59fce204,"private android.renderscript.Long4 pack_l4(long[] val) { assert (val.length) == 4; return new android.renderscript.Long4(val[0], val[1], val[2], val[3]); }",3fd325b3526b251c14d8c13e9c3726e01eaaa1fa,pack_l4(long[]),pack_l4(long[]),7,43,"private com.android.rs.test.Long4 pack_l4(long[] val) { assert (val.length) == 4; return new com.android.rs.test.Long4(val[0], val[1], val[2], val[3]); }",568426ec72991c9d0345b6bdad4ab9da59fce204,pack_l4(long[]),379468,45,51
18753,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gle2_Gesture.java,,,,void update(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint pos);,15c44cbb8b1b9567867b08cfdd51fc71a4e80218,,update(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint),4,4,public void update(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint pos) { },7cd40c6ff75a86cd187c1d91ab0801b0e1066683,update(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint),403711,27,30
584381,tests_tests_telephony_src_android_telephony_cts_TelephonyManagerTest.java,33.0,@org.junit.Before public void setUp() throws java.lang.Exception { mTelephonyManager = ((android.telephony.TelephonyManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.TELEPHONY_SERVICE))); android.telephony.cts.TelephonyManagerTest.mCm = ((android.net.ConnectivityManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); mPackageManager = android.telephony.cts.TelephonyManagerTest.getContext().getPackageManager(); },d084d58b195fbc3ec59933a30fcdcbf7ad31173c,@org.junit.Before public void setUp() throws java.lang.Exception { mTelephonyManager = ((android.telephony.TelephonyManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.TELEPHONY_SERVICE))); android.telephony.cts.TelephonyManagerTest.mCm = ((android.net.ConnectivityManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); mPackageManager = android.telephony.cts.TelephonyManagerTest.getContext().getPackageManager(); mNetworkScanStatus = android.telephony.cts.TelephonyManagerTest.EVENT_NETWORK_SCAN_COMPLETED; mTestHandlerThread = new android.telephony.cts.TelephonyManagerTest.NetworkScanHandlerThread(android.telephony.cts.TelephonyManagerTest.TAG); mTestHandlerThread.start(); },78182a0ee9a5ad833b428df18863fee51f001af0,setUp(),setUp(),10,28,@org.junit.Before public void setUp() throws java.lang.Exception { mTelephonyManager = ((android.telephony.TelephonyManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.TELEPHONY_SERVICE))); android.telephony.cts.TelephonyManagerTest.mCm = ((android.net.ConnectivityManager) (android.telephony.cts.TelephonyManagerTest.getContext().getSystemService(Context.CONNECTIVITY_SERVICE))); mPackageManager = android.telephony.cts.TelephonyManagerTest.getContext().getPackageManager(); },d084d58b195fbc3ec59933a30fcdcbf7ad31173c,setUp(),186380,179,116
70160,harmony-tests_src_test_java_org_apache_harmony_tests_java_nio_charset_CharsetEncoderTest.java,2.0,"public void test_EncodeLjava_nio_CharBuffer() throws java.lang.Exception { org.apache.harmony.nio_char.tests.java.nio.charset.CharsetEncoderTest.MockMalfunctionCharset cs = new org.apache.harmony.nio_char.tests.java.nio.charset.CharsetEncoderTest.MockMalfunctionCharset(""mock"", null); try { cs.encode(java.nio.CharBuffer.wrap(""AB"")); fail(""should throw CoderMalfunctionError""); } catch (java.nio.charset.CoderMalfunctionError e) { } }",cca903f83450d1c778d02565071f7e4a7bc34cb5,"public void test_EncodeLjava_nio_CharBuffer() throws java.lang.Exception { org.apache.harmony.tests.java.nio.charset.CharsetEncoderTest.MockMalfunctionCharset cs = new org.apache.harmony.tests.java.nio.charset.CharsetEncoderTest.MockMalfunctionCharset(""mock"", null); try { cs.encode(java.nio.CharBuffer.wrap(""AB"")); fail(""should throw CoderMalfunctionError""); } catch (java.nio.charset.CoderMalfunctionError e) { } }",f1fb22a861952d66c63d8bb31053d8cfa5628e5d,test_EncodeLjava_nio_CharBuffer(),test_EncodeLjava_nio_CharBuffer(),3,5,"public void testEncodeCharBuffer() throws java.nio.charset.CharacterCodingException { try { encoder.encode(null); fail(""should throw null pointer exception""); } catch (java.lang.NullPointerException e) { } java.nio.ByteBuffer out = encoder.encode(java.nio.CharBuffer.wrap("""")); assertEquals(out.position(), 0); assertByteArray(out, new byte[0]); out = encoder.encode(java.nio.CharBuffer.wrap(org.apache.harmony.tests.java.nio.charset.CharsetEncoderTest.unistr)); assertEquals(out.position(), 0); assertByteArray(out, addSurrogate(unibytes)); java.nio.charset.Charset cs = java.nio.charset.Charset.forName(""UTF-8""); java.nio.charset.CharsetEncoder encoder = cs.newEncoder(); encoder.onMalformedInput(java.nio.charset.CodingErrorAction.REPLACE); encoder = encoder.replaceWith(new byte[]{ ((byte) (239)), ((byte) (191)), ((byte) (189)) }); java.nio.CharBuffer in = java.nio.CharBuffer.wrap(""\ud800""); out = encoder.encode(in); assertNotNull(out); }",7596c8424e91ac6c548b5b2a03413089041aee20,testEncodeCharBuffer(),200496,118,254
129220,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_fixture_app_GradleModule.java,,,,public java.util.List<? extends com.android.build.gradle.integration.common.fixture.app.GradleModule> getProjectDeps() { return projectDeps; },e732a9780bae29a8b2381bed88ee2515ee11e700,,getProjectDeps(),8,2,@com.android.annotations.NonNull public java.util.List<? extends com.android.build.gradle.integration.common.fixture.app.GradleModule> getProjectDeps() { return projectDeps; },7627f1d8023f154578a8e8b13e0ebaf74a5f4dca,getProjectDeps(),14605,38,46
18615,core_java_android_server_BluetoothEventLoop.java,1.0,"private void onDiscoverServicesResult(java.lang.String deviceObjectPath, boolean result) { java.lang.String address = mBluetoothService.getAddressFromObjectPath(deviceObjectPath); if (result) { mBluetoothService.updateRemoteDevicePropertiesCache(address); } mBluetoothService.sendUuidIntent(address); mBluetoothService.makeServiceChannelCallbacks(address); }",aecae30fdf8f787698281d8e84c6c9510feeb528,"private void onDiscoverServicesResult(java.lang.String deviceObjectPath, boolean result) { java.lang.String address = mBluetoothService.getAddressFromObjectPath(deviceObjectPath); if (result) { mBluetoothService.updateRemoteDevicePropertiesCache(address); } if (address != null) { mBluetoothService.sendUuidIntent(address); } mBluetoothService.makeServiceChannelCallbacks(address); }",6829b2b7e80862aeabe608c00632777c96bb001f,"onDiscoverServicesResult(java.lang.String,boolean)","onDiscoverServicesResult(java.lang.String,boolean)",2,1,"private void onDiscoverServicesResult(java.lang.String deviceObjectPath, boolean result) { java.lang.String address = mBluetoothService.getAddressFromObjectPath(deviceObjectPath); if (address == null) return; if (result) { mBluetoothService.updateRemoteDevicePropertiesCache(address); } mBluetoothService.sendUuidIntent(address); mBluetoothService.makeServiceChannelCallbacks(address); }",8e1a4aa7f2ca3015e3c9495b2eb5e7cd7d478203,"onDiscoverServicesResult(java.lang.String,boolean)",317035,88,88
561230,core_java_android_service_euicc_EuiccProfileInfo.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public android.service.euicc.EuiccProfileInfo build() { if ((iccid) == null) { throw new java.lang.IllegalStateException(""ICCID must be set for a profile.""); } return new android.service.euicc.EuiccProfileInfo(iccid, accessRules, nickname, serviceProviderName, profileName, profileClass, state, operatorId, policyRules); }",61ca556ef13463fed251435f6f4ae7f0d1060506,,build(),8,23,"public android.service.euicc.EuiccProfileInfo build() { if ((iccid) == null) { throw new java.lang.IllegalStateException(""ICCID must be set for a profile.""); } return new android.service.euicc.EuiccProfileInfo(iccid, nickname, serviceProviderName, profileName, profileClass, state, carrierIdentifier, policyRules, accessRules); }",6242cf808bcc9242a3dea3a2bce531f69fa67aa7,build(),314741,92,94
303904,jack-tests_tests_com_android_jack_java7_invokecustom_test003_Tests.java,,,,"@org.junit.Test public void test() throws java.lang.Throwable { int resultInvokeCustomFromField = ((int) (com.android.jack.java7.invokecustom.test003.Tests.InvokeCustomFromMethodLinker().invokeExact(1, 2, 3, 4, 5, 6))); junit.framework.Assert.assertEquals(21, resultInvokeCustomFromField); }",07d4a5050cf14c36c37038c181ce54aca2f6a48b,,test(),5,2,"@org.junit.Test public void test() throws java.lang.Throwable { junit.framework.Assert.assertEquals(21, com.android.jack.java7.invokecustom.test003.Tests.add(1, 2, 3, 4, 5, 6)); }",5fecc04da902495ed94eb1495a3abe3def1ce35a,test(),272783,78,52
38083,anttasks_src_com_android_ant_GetLibraryPathTask.java,,,,"@java.lang.Override public void processLibrary(java.lang.String libRootPath, com.android.sdklib.internal.project.IPropertySource properties) { java.lang.StringBuilder sb = new java.lang.StringBuilder(libRootPath); for (java.lang.String segment : mLeafSegments) { sb.append('/'); java.util.regex.Matcher m = com.android.ant.GetLibraryPathTask.LeafProcessor.PH.matcher(segment); if (m.matches()) { java.lang.String value = properties.getProperty(m.group(1)); if (value == null) { value = com.android.ant.TaskHelper.getDefault(m.group(1)); } if (value == null) { throw new org.apache.tools.ant.BuildException((((""Failed to resolve '"" + (m.group(1))) + ""' for project "") + libRootPath)); } sb.append(value); } else { sb.append(segment); } } java.lang.System.out.println(("">>>> DEBUG: "" + (sb.toString()))); org.apache.tools.ant.types.Path.PathElement element = mPath.createPathElement(); element.setPath(sb.toString()); }",c8c642016d3827bfec72adc5b0a68a9baffe6ea1,,"processLibrary(java.lang.String,com.android.sdklib.internal.project.IPropertySource)",2,5,"@java.lang.Override public void processLibrary(java.lang.String libRootPath, com.android.sdklib.internal.project.IPropertySource properties) { java.lang.StringBuilder sb = new java.lang.StringBuilder(libRootPath); for (java.lang.String segment : mLeafSegments) { sb.append('/'); java.util.regex.Matcher m = com.android.ant.GetLibraryPathTask.LeafProcessor.PH.matcher(segment); if (m.matches()) { java.lang.String value = properties.getProperty(m.group(1)); if (value == null) { value = com.android.ant.TaskHelper.getDefault(m.group(1)); } if (value == null) { throw new org.apache.tools.ant.BuildException((((""Failed to resolve '"" + (m.group(1))) + ""' for project "") + libRootPath)); } sb.append(value); } else { sb.append(segment); } } org.apache.tools.ant.types.Path.PathElement element = mPath.createPathElement(); element.setPath(sb.toString()); }",2629ea516a35181ada7716969fb67a001b6cfe72,"processLibrary(java.lang.String,com.android.sdklib.internal.project.IPropertySource)",465790,261,239
584381,tests_tests_telephony_src_android_telephony_cts_TelephonyManagerTest.java,24.0,"@org.junit.After public void tearDown() throws java.lang.Exception { if ((mListener) != null) { mTelephonyManager.listen(mListener, PhoneStateListener.LISTEN_NONE); } }",ecd6dcb13046ac366009d165898d45505a8eb947,"@org.junit.After public void tearDown() throws java.lang.Exception { if ((mListener) != null) { mTelephonyManager.listen(mListener, PhoneStateListener.LISTEN_NONE); } mTestHandlerThread.quit(); }",278ff73c2a804c6e799f3cc566a0eea5e49f4c13,tearDown(),tearDown(),10,20,"@org.junit.After public void tearDown() throws java.lang.Exception { if ((mListener) != null) { mTelephonyManager.listen(mListener, PhoneStateListener.LISTEN_NONE); } }",ecd6dcb13046ac366009d165898d45505a8eb947,tearDown(),186386,52,45
13944,src_com_android_phone_CdmaSubscriptionListPreference.java,,,,"private void handleSetCdmaSubscriptionMode(android.os.Message msg) { mPhone = com.android.internal.telephony.PhoneFactory.getDefaultPhone(); android.os.AsyncResult ar = ((android.os.AsyncResult) (msg.obj)); if ((ar.exception) == null) { int cdmaSubscriptionMode = java.lang.Integer.valueOf(getValue()).intValue(); android.provider.Settings.Secure.putInt(mPhone.getContext().getContentResolver(), Secure.CDMA_SUBSCRIPTION_MODE, cdmaSubscriptionMode); } else { android.util.Log.e(com.android.phone.CdmaSubscriptionListPreference.LOG_TAG, ""Setting Cdma subscription source failed""); } }",bda32b614c00618e1ed16c337151a0f5ae9673bd,,handleSetCdmaSubscriptionMode(android.os.Message),13,4,"private void handleSetCdmaSubscriptionMode(android.os.Message msg) { mPhone = com.android.internal.telephony.PhoneFactory.getDefaultPhone(); android.os.AsyncResult ar = ((android.os.AsyncResult) (msg.obj)); if ((ar.exception) == null) { int cdmaSubscriptionMode = java.lang.Integer.valueOf(((java.lang.String) (ar.userObj))).intValue(); android.provider.Settings.Secure.putInt(mPhone.getContext().getContentResolver(), Secure.CDMA_SUBSCRIPTION_MODE, cdmaSubscriptionMode); } else { android.util.Log.e(com.android.phone.CdmaSubscriptionListPreference.LOG_TAG, ""Setting Cdma subscription source failed""); } }",edcd8517994a2cb392221e755e2b97c6c355c936,handleSetCdmaSubscriptionMode(android.os.Message),193331,157,167
142832,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_dsl_AaptOptions.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setAdditionalParameters(java.lang.String param) { additionalParameters = java.util.Collections.singletonList(param); },1d1ec61bd8de51158b4f907678b329cf018aa858,,setAdditionalParameters(java.lang.String),5,9,public void additionalParameters(@com.android.annotations.NonNull java.lang.String param) { additionalParameters = java.util.Collections.singletonList(param); },483ecb219007e68ff44bed35aadff87ecccb4771,additionalParameters(java.lang.String),431711,29,35
432981,luni_src_test_java_libcore_java_util_zip_ZipEntryTest.java,13.0,"public void testMaxLengthComment() throws java.lang.Exception { java.lang.String maxLengthComment = libcore.java.util.zip.ZipEntryTest.makeString(65535, ""z""); java.io.File f = libcore.java.util.zip.ZipEntryTest.createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry(""x""); ze.setComment(maxLengthComment); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(maxLengthComment, zipFile.getEntry(""x"").getComment()); zipFile.close(); }",338d97ac47d32398af236d659e5393e3c0b7e8a4,"public void testMaxLengthComment() throws java.lang.Exception { java.lang.String maxLengthComment = libcore.java.util.zip.ZipEntryTest.makeString(65535, ""z""); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(mFile); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry(""x""); ze.setComment(maxLengthComment); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(mFile); assertEquals(maxLengthComment, zipFile.getEntry(""x"").getComment()); zipFile.close(); }",d6629865513ca65beef420bc2730aeae134c040b,testMaxLengthComment(),testMaxLengthComment(),3,12,"public void testMaxLengthComment() throws java.lang.Exception { java.lang.String maxLengthComment = libcore.java.util.zip.ZipEntryTest.makeString(65535, ""z""); java.io.File f = createTemporaryZipFile(); java.util.zip.ZipOutputStream out = libcore.java.util.zip.ZipEntryTest.createZipOutputStream(f); java.util.zip.ZipEntry ze = new java.util.zip.ZipEntry(""x""); ze.setComment(maxLengthComment); out.putNextEntry(ze); out.closeEntry(); out.close(); java.util.zip.ZipFile zipFile = new java.util.zip.ZipFile(f); assertEquals(maxLengthComment, zipFile.getEntry(""x"").getComment()); zipFile.close(); }",288df90531df3d406f8952aae3afa450d7f51258,testMaxLengthComment(),443129,161,171
253791,luni_src_main_java_libcore_io_Posix.java,21.0,"public native void ftruncate(java.io.FileDescriptor fd, long length) throws android.system.ErrnoException;",477099f15b51a619cc1dea4f0b93b3fbb05e9630,"public native void ftruncate(java.io.FileDescriptor fd, long length) throws libcore.io.ErrnoException;",67c3b63afb0d033981fbd5fdea0a782367dd36fe,"ftruncate(java.io.FileDescriptor,long)","ftruncate(java.io.FileDescriptor,long)",8,19,"public native void ftruncate(java.io.FileDescriptor fd, long length) throws android.system.ErrnoException;",477099f15b51a619cc1dea4f0b93b3fbb05e9630,"ftruncate(java.io.FileDescriptor,long)",494547,26,25
269973,luni_src_test_java_libcore_javax_net_ssl_KeyStoreBuilderParametersTest.java,2.0,public void test_init_List_null() { try { new javax.net.ssl.KeyStoreBuilderParameters(((java.util.List) (null))); } catch (java.lang.NullPointerException expected) { } },33562426e8105d3de5b2eafe781d83a054eae35f,"public void test_init_List_null() { try { new javax.net.ssl.KeyStoreBuilderParameters(((java.util.List) (null))); fail(""Should have thrown""); } catch (java.lang.NullPointerException expected) { } }",c02beb66388ab0653bdd0d90d10b3c10eb7e8f21,test_init_List_null(),test_init_List_null(),9,2,public void test_init_List_null() { try { new javax.net.ssl.KeyStoreBuilderParameters(((java.util.List) (null))); fail(); } catch (java.lang.NullPointerException expected) { } },db28a54ea991effee26e7f54d68224d62f8f2cb1,test_init_List_null(),50339,53,49
36632,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_UpdaterData.java,29.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.android.annotations.VisibleForTesting(visibility = com.android.annotations.VisibleForTesting.Visibility.PRIVATE) protected com.android.sdkuilib.internal.repository.SettingsController initSettingsController() { com.android.sdkuilib.internal.repository.SettingsController settingsController = new com.android.sdkuilib.internal.repository.SettingsController(mSdkLog); settingsController.registerOnChangedListener(new com.android.sdkuilib.internal.repository.SettingsController.OnChangedListener() { @java.lang.Override public void onSettingsChanged(com.android.sdkuilib.internal.repository.SettingsController controller, com.android.sdkuilib.internal.repository.SettingsController.Settings oldSettings) { if ((mDownloadCache) != null) { if ((controller.getSettings().getUseDownloadCache()) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.FRESH_CACHE))) { mDownloadCache = null; } else if ((!(controller.getSettings().getUseDownloadCache())) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.DIRECT))) { mDownloadCache = null; } } if (((oldSettings.getForceHttp()) != (controller.getSettings().getForceHttp())) || ((oldSettings.getEnablePreviews()) != (controller.getSettings().getEnablePreviews()))) { refreshSources(false); } } }); return settingsController; }",f47a36b3b3a6f5ab3eb034812a8a8b5a17b96014,,initSettingsController(),5,3,"@com.android.annotations.VisibleForTesting(visibility = com.android.annotations.VisibleForTesting.Visibility.PRIVATE) protected com.android.sdkuilib.internal.repository.SettingsController initSettingsController() { com.android.sdkuilib.internal.repository.SettingsController settingsController = new com.android.sdkuilib.internal.repository.SettingsController(mSdkLog); settingsController.registerOnChangedListener(new com.android.sdkuilib.internal.repository.SettingsController.OnChangedListener() { @java.lang.Override public void onSettingsChanged(com.android.sdkuilib.internal.repository.SettingsController controller, com.android.sdkuilib.internal.repository.SettingsController.Settings oldSettings) { if ((mDownloadCache) != null) { if ((controller.getSettings().getUseDownloadCache()) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.FRESH_CACHE))) { mDownloadCache = null; } else if ((!(controller.getSettings().getUseDownloadCache())) && ((mDownloadCache.getStrategy()) != (DownloadCache.Strategy.DIRECT))) { mDownloadCache = null; } } } }); return settingsController; }",bb60607e1d4c377a73b97f9bd5a81240c21efbb1,initSettingsController(),92634,308,260
654568,src_com_android_bluetooth_hearingaid_HearingAidService.java,0.0,"@android.support.annotation.VisibleForTesting synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((((""connectionStateChanged: unexpected invocation. device="" + device) + "" fromState="") + fromState) + "" toState="") + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { setActiveDevice(device); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (getConnectedDevices().isEmpty())) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (device + "" is unbond. Remove state machine"")); } removeStateMachine(device); } } }",42d4d31c1b27ae688469e43712a28b81c9e62b7e,"@android.support.annotation.VisibleForTesting synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((((""connectionStateChanged: unexpected invocation. device="" + device) + "" fromState="") + fromState) + "" toState="") + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { setActiveDevice(device); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.HEARING_AID); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (getConnectedDevices().isEmpty())) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (device + "" is unbond. Remove state machine"")); } removeStateMachine(device); } } }",b7cf2b4e81eff1c7cde1e04ab4c74297f3016c90,"connectionStateChanged(android.bluetooth.BluetoothDevice,int,int)","connectionStateChanged(android.bluetooth.BluetoothDevice,int,int)",18,0,"@android.support.annotation.VisibleForTesting synchronized void connectionStateChanged(android.bluetooth.BluetoothDevice device, int fromState, int toState) { if ((device == null) || (fromState == toState)) { android.util.Log.e(com.android.bluetooth.hearingaid.HearingAidService.TAG, (((((""connectionStateChanged: unexpected invocation. device="" + device) + "" fromState="") + fromState) + "" toState="") + toState)); return; } if (toState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) { long myHiSyncId = getHiSyncId(device); if ((myHiSyncId == (android.bluetooth.BluetoothHearingAid.HI_SYNC_ID_INVALID)) || ((getConnectedPeerDevices(myHiSyncId).size()) == 1)) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.HEARING_AID); } setActiveDevice(device); } if ((fromState == (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (getConnectedDevices().isEmpty())) { setActiveDevice(null); } if (toState == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { int bondState = mAdapterService.getBondState(device); if (bondState == (android.bluetooth.BluetoothDevice.BOND_NONE)) { if (com.android.bluetooth.hearingaid.HearingAidService.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidService.TAG, (device + "" is unbond. Remove state machine"")); } removeStateMachine(device); } } }",10882fb6d69a250ca18ff50f6e2ffb8cd1f1b533,"connectionStateChanged(android.bluetooth.BluetoothDevice,int,int)",136140,321,379
466677,core_java_android_net_IpSecConfig.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setLocalAddress(java.net.InetAddress localAddress) { mLocalAddress = localAddress; },072626f9870026062e3644727664dfad549bd38e,,setLocalAddress(java.net.InetAddress),17,17,"public void setLocalAddress(java.lang.String localAddress) { if (localAddress == null) { throw new java.lang.IllegalArgumentException(""localAddress may not be null!""); } mLocalAddress = localAddress; }",3384453efb0dc54d9c13778468382cc77a845f80,setLocalAddress(java.lang.String),176125,23,46
270260,tests_tests_media_src_android_media_cts_EqualizerTest.java,19.0,"public void test1_0BandLevel() throws java.lang.Exception { getEqualizer(0); try { short numBands = mEqualizer.getNumberOfBands(); assertTrue(""not enough bands"", (numBands >= (android.media.cts.EqualizerTest.MIN_NUMBER_OF_BANDS))); short[] levelRange = mEqualizer.getBandLevelRange(); assertTrue(""min level too high"", ((levelRange[0]) <= (android.media.cts.EqualizerTest.MAX_LEVEL_RANGE_LOW))); assertTrue(""max level too low"", ((levelRange[1]) >= (android.media.cts.EqualizerTest.MIN_LEVEL_RANGE_HIGH))); mEqualizer.setBandLevel(((short) (0)), levelRange[1]); short level = mEqualizer.getBandLevel(((short) (0))); assertTrue(""setBandLevel failed"", ((level >= ((levelRange[1]) - (android.media.cts.EqualizerTest.TOLERANCE))) && (level <= ((levelRange[1]) + (android.media.cts.EqualizerTest.TOLERANCE))))); } catch (java.lang.IllegalArgumentException e) { fail(""Bad parameter value""); } catch (java.lang.UnsupportedOperationException e) { fail(""get parameter() rejected""); } catch (java.lang.IllegalStateException e) { fail(""get parameter() called in wrong state""); } finally { releaseEqualizer(); } }",8c58b2d7c0f073bb18989e35f26c3d753d969464,"public void test1_0BandLevel() throws java.lang.Exception { getEqualizer(1); try { short numBands = mEqualizer.getNumberOfBands(); assertTrue(""not enough bands"", (numBands >= (android.media.cts.EqualizerTest.MIN_NUMBER_OF_BANDS))); short[] levelRange = mEqualizer.getBandLevelRange(); assertTrue(""min level too high"", ((levelRange[0]) <= (android.media.cts.EqualizerTest.MAX_LEVEL_RANGE_LOW))); assertTrue(""max level too low"", ((levelRange[1]) >= (android.media.cts.EqualizerTest.MIN_LEVEL_RANGE_HIGH))); mEqualizer.setBandLevel(((short) (0)), levelRange[1]); short level = mEqualizer.getBandLevel(((short) (0))); assertTrue(""setBandLevel failed"", ((level >= ((levelRange[1]) - (android.media.cts.EqualizerTest.TOLERANCE))) && (level <= ((levelRange[1]) + (android.media.cts.EqualizerTest.TOLERANCE))))); } catch (java.lang.IllegalArgumentException e) { fail(""Bad parameter value""); } catch (java.lang.UnsupportedOperationException e) { fail(""get parameter() rejected""); } catch (java.lang.IllegalStateException e) { fail(""get parameter() called in wrong state""); } finally { releaseEqualizer(); } }",73eeeb487e9d0fa08f05036cea710697a9d36aed,test1_0BandLevel(),test1_0BandLevel(),5,19,"public void test1_0BandLevel() throws java.lang.Exception { getEqualizer(getSessionId()); try { short numBands = mEqualizer.getNumberOfBands(); assertTrue(""not enough bands"", (numBands >= (android.media.cts.EqualizerTest.MIN_NUMBER_OF_BANDS))); short[] levelRange = mEqualizer.getBandLevelRange(); assertTrue(""min level too high"", ((levelRange[0]) <= (android.media.cts.EqualizerTest.MAX_LEVEL_RANGE_LOW))); assertTrue(""max level too low"", ((levelRange[1]) >= (android.media.cts.EqualizerTest.MIN_LEVEL_RANGE_HIGH))); mEqualizer.setBandLevel(((short) (0)), levelRange[1]); short level = mEqualizer.getBandLevel(((short) (0))); assertTrue(""setBandLevel failed"", ((level >= ((levelRange[1]) - (android.media.cts.EqualizerTest.TOLERANCE))) && (level <= ((levelRange[1]) + (android.media.cts.EqualizerTest.TOLERANCE))))); } catch (java.lang.IllegalArgumentException e) { fail(""Bad parameter value""); } catch (java.lang.UnsupportedOperationException e) { fail(""get parameter() rejected""); } catch (java.lang.IllegalStateException e) { fail(""get parameter() called in wrong state""); } finally { releaseEqualizer(); } }",cae8aa9341ea4dca4f2b5ed70c44210b65d35520,test1_0BandLevel(),278731,306,308
89752,build-system_tests_localAarTest_app_src_androidTest_java_com_android_tests_libstest_app_MainActivityTest.java,2.0,"@android.test.suitebuilder.annotation.MediumTest public void testJavaStrings() { assertEquals(mAppTextView2.getText(), ""SUCCESS-APP""); assertEquals(mLib1TextView2.getText(), ""SUCCESS-LIB1""); assertEquals(mLib2TextView2.getText(), ""SUCCESS-LIB2""); assertEquals(mLib2bTextView2.getText(), ""SUCCESS-LIB2b""); assertEquals(mLibappTextView2.getText(), ""SUCCESS-LIBAPP""); }",241b905b7099faa7815a076872837fb5898cf8f7,"@android.test.suitebuilder.annotation.MediumTest public void testJavaStrings() { assertEquals(""SUCCESS-APP"", mAppTextView2.getText()); assertEquals(""SUCCESS-LIB1"", mLib1TextView2.getText()); assertEquals(""SUCCESS-LIB2"", mLib2TextView2.getText()); assertEquals(""SUCCESS-LIB2b"", mLib2bTextView2.getText()); assertEquals(""SUCCESS-LIBAPP"", mLibappTextView2.getText()); }",051a308eb3bbbfccae9fe27326e175a5a88c776f,testJavaStrings(),testJavaStrings(),2,2,"@android.test.suitebuilder.annotation.MediumTest public void testJavaStrings() { assertEquals(""SUCCESS-APP"", mAppTextView2.getText().toString()); assertEquals(""SUCCESS-LIB1"", mLib1TextView2.getText().toString()); assertEquals(""SUCCESS-LIB2"", mLib2TextView2.getText().toString()); assertEquals(""SUCCESS-LIB2b"", mLib2bTextView2.getText().toString()); assertEquals(""SUCCESS-LIBAPP"", mLibappTextView2.getText().toString()); }",9a76e4ecbef652b315f1862436833bd16c51ede2,testJavaStrings(),472756,89,99
211572,jack-tests_tests_com_android_jack_sourcepath_test001_SourcepathTests.java,,,,"@org.junit.Test public void test001_zip() throws java.lang.Exception { java.io.File testRootDir = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(""com.android.jack.sourcepath.test001""); java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> exclude = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(); exclude.add(com.android.jack.test.toolchain.JillBasedToolchain.class); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, exclude); java.io.File testOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); toolchain.addProperty(Options.SOURCE_PATH.getName(), new java.io.File(new java.io.File(testRootDir, ""lib""), ""sourcepath001lib.zip"").getPath()).addToClasspath(toolchain.getDefaultBootClasspath()).srcToLib(testOut, false, new java.io.File(testRootDir, ""jack"")); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(testOut); libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(""com/android/jack/sourcepath/test001/lib/Sourcepath001Lib"", '/')); try { libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(""com/android/jack/sourcepath/test001/lib/Sourcepath001UnusedLib"", '/')); org.junit.Assert.fail(); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { } }",3131ecbe6616660df221a14527d01172560d20ba,,test001_zip(),5,1,"@org.junit.Test public void test002() throws java.lang.Exception { java.io.File testRootDir = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(""com.android.jack.sourcepath.test002""); java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> exclude = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(); exclude.add(com.android.jack.test.toolchain.JillBasedToolchain.class); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, exclude); java.io.File testOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); toolchain.addProperty(Options.SOURCE_PATH.getName(), new java.io.File(new java.io.File(testRootDir, ""lib""), ""sourcepath002lib.zip"").getPath()).addToClasspath(toolchain.getDefaultBootClasspath()).srcToLib(testOut, false, new java.io.File(testRootDir, ""jack"")); com.android.jack.library.InputJackLibrary libOut = com.android.jack.test.toolchain.AbstractTestTools.getInputJackLibrary(testOut); libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(""com/android/jack/sourcepath/test002/lib/Sourcepath002Lib"", '/')); try { libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(""com/android/jack/sourcepath/test002/lib/Sourcepath002UnusedLib"", '/')); org.junit.Assert.fail(); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { } }",aaf73055a89917cf17b7b17ec5d5e0c699aa610b,test002(),352663,431,441
194748,ojluni_src_main_java_sun_nio_ch_SocketChannelImpl.java,24.0,"public int read(java.nio.ByteBuffer buf) throws java.io.IOException { if (buf == null) throw new java.lang.NullPointerException(); synchronized(readLock) { if (!(ensureReadOpen())) return -1; java.lang.Object traceContext = null; if (isBlocking()) { traceContext = sun.misc.IoTrace.socketReadBegin(); } int n = 0; try { begin(); synchronized(stateLock) { if (!(isOpen())) { return 0; } readerThread = sun.nio.ch.NativeThread.current(); } for (; ;) { n = sun.nio.ch.IOUtil.read(fd, buf, (-1), sun.nio.ch.SocketChannelImpl.nd); if ((n == (sun.nio.ch.IOStatus.INTERRUPTED)) && (isOpen())) { continue; } return sun.nio.ch.IOStatus.normalize(n); } } finally { readerCleanup(); if (isBlocking()) { sun.misc.IoTrace.socketReadEnd(traceContext, remoteAddress.getAddress(), remoteAddress.getPort(), 0, (n > 0 ? n : 0)); } end(((n > 0) || (n == (sun.nio.ch.IOStatus.UNAVAILABLE)))); synchronized(stateLock) { if ((n <= 0) && (!(isInputOpen))) return sun.nio.ch.IOStatus.EOF; } assert sun.nio.ch.IOStatus.check(n); } } }",efe6daf254573fe9e5788b1a2a57a7653b203e28,"public int read(java.nio.ByteBuffer buf) throws java.io.IOException { if (buf == null) throw new java.lang.NullPointerException(); synchronized(readLock) { if (!(ensureReadOpen())) return -1; java.lang.Object traceContext = null; if (isBlocking()) { traceContext = sun.misc.IoTrace.socketReadBegin(); } int n = 0; try { begin(); synchronized(stateLock) { if (!(isOpen())) { return 0; } readerThread = sun.nio.ch.NativeThread.current(); } dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); for (; ;) { n = sun.nio.ch.IOUtil.read(fd, buf, (-1), sun.nio.ch.SocketChannelImpl.nd); if ((n == (sun.nio.ch.IOStatus.INTERRUPTED)) && (isOpen())) { continue; } return sun.nio.ch.IOStatus.normalize(n); } } finally { readerCleanup(); if (isBlocking()) { sun.misc.IoTrace.socketReadEnd(traceContext, remoteAddress.getAddress(), remoteAddress.getPort(), 0, (n > 0 ? n : 0)); } end(((n > 0) || (n == (sun.nio.ch.IOStatus.UNAVAILABLE)))); synchronized(stateLock) { if ((n <= 0) && (!(isInputOpen))) return sun.nio.ch.IOStatus.EOF; } assert sun.nio.ch.IOStatus.check(n); } } }",cf2b696806b1179322f4ce01baacc5a59c736c26,read(java.nio.ByteBuffer),read(java.nio.ByteBuffer),3,24,"public int read(java.nio.ByteBuffer buf) throws java.io.IOException { if (buf == null) throw new java.lang.NullPointerException(); synchronized(readLock) { if (!(ensureReadOpen())) return -1; java.lang.Object traceContext = null; if (isBlocking()) { traceContext = sun.misc.IoTrace.socketReadBegin(); } int n = 0; try { begin(); synchronized(stateLock) { if (!(isOpen())) { return 0; } readerThread = sun.nio.ch.NativeThread.current(); } for (; ;) { n = sun.nio.ch.IOUtil.read(fd, buf, (-1), sun.nio.ch.SocketChannelImpl.nd); if ((n == (sun.nio.ch.IOStatus.INTERRUPTED)) && (isOpen())) { continue; } return sun.nio.ch.IOStatus.normalize(n); } } finally { readerCleanup(); if (isBlocking()) { sun.misc.IoTrace.socketReadEnd(traceContext, remoteAddress.getAddress(), remoteAddress.getPort(), 0, (n > 0 ? n : 0)); } end(((n > 0) || (n == (sun.nio.ch.IOStatus.UNAVAILABLE)))); synchronized(stateLock) { if ((n <= 0) && (!(isInputOpen))) return sun.nio.ch.IOStatus.EOF; } assert sun.nio.ch.IOStatus.check(n); } } }",efe6daf254573fe9e5788b1a2a57a7653b203e28,read(java.nio.ByteBuffer),15538,327,313
144767,sdk-common_src_main_java_com_android_ide_common_repository_ResourceVisibilityLookup.java,,,,"@java.lang.Override public boolean isPrivate(@com.android.annotations.NonNull com.android.resources.ResourceType type, @com.android.annotations.NonNull java.lang.String name) { for (int i = 0, n = mRepositories.size(); i < n; i++) { if (mRepositories.get(i).isPrivate(type, name)) { return true; } } return false; }",08fda47b88af728eead44d51e497e84ea2679ca3,,"isPrivate(com.android.resources.ResourceType,java.lang.String)",6,18,"@java.lang.Override public boolean isPrivate(@com.android.annotations.NonNull com.android.resources.ResourceType type, @com.android.annotations.NonNull java.lang.String name) { return false; }",4e9b7610fb9817028c7bf91176be60644e408271,"isPrivate(com.android.resources.ResourceType,java.lang.String)",353406,89,47
233160,espresso_core-tests_src_androidTest_java_android_support_test_espresso_base_EventInjectorTest.java,0.0,"@android.test.suitebuilder.annotation.LargeTest public void testInjectMotionEvent_upEventFailure() throws java.lang.InterruptedException { final java.util.concurrent.CountDownLatch activityStarted = new java.util.concurrent.CountDownLatch(1); android.support.test.runner.lifecycle.ActivityLifecycleCallback callback = new android.support.test.runner.lifecycle.ActivityLifecycleCallback() { @java.lang.Override public void onActivityLifecycleChanged(android.app.Activity activity, android.support.test.runner.lifecycle.Stage stage) { if (((android.support.test.runner.lifecycle.Stage.RESUMED) == stage) && (activity instanceof android.support.test.testapp.SendActivity)) { activityStarted.countDown(); } } }; android.support.test.runner.lifecycle.ActivityLifecycleMonitorRegistry.getInstance().addLifecycleCallback(callback); try { getActivity(); assertTrue(activityStarted.await(20, java.util.concurrent.TimeUnit.SECONDS)); final int[] xy = android.support.test.espresso.base.UiControllerImplIntegrationTest.getCoordinatesInMiddleOfSendButton(getActivity(), getInstrumentation()); getInstrumentation().runOnMainSync(new java.lang.Runnable() { @java.lang.Override public void run() { android.view.MotionEvent up = android.view.MotionEvent.obtain(android.os.SystemClock.uptimeMillis(), android.os.SystemClock.uptimeMillis(), MotionEvent.ACTION_UP, xy[0], xy[1], 0); try { injectEventWorked.set(injector.injectMotionEvent(up)); } catch (android.support.test.espresso.InjectEventSecurityException e) { android.util.Log.e(android.support.test.espresso.base.EventInjectorTest.TAG, ""injectEvent threw a SecurityException""); } up.recycle(); latch.countDown(); } }); latch.await(10, java.util.concurrent.TimeUnit.SECONDS); assertFalse(injectEventWorked.get()); } finally { android.support.test.runner.lifecycle.ActivityLifecycleMonitorRegistry.getInstance().removeLifecycleCallback(callback); } }",b71d5e6c5b76b9750c8e55b05f7fd0248ade69fa,"@android.test.suitebuilder.annotation.LargeTest @org.junit.Test public void injectMotionEvent_upEventFailure() throws java.lang.InterruptedException { final java.util.concurrent.CountDownLatch activityStarted = new java.util.concurrent.CountDownLatch(1); android.support.test.runner.lifecycle.ActivityLifecycleCallback callback = new android.support.test.runner.lifecycle.ActivityLifecycleCallback() { @java.lang.Override public void onActivityLifecycleChanged(android.app.Activity activity, android.support.test.runner.lifecycle.Stage stage) { if (((android.support.test.runner.lifecycle.Stage.RESUMED) == stage) && (activity instanceof android.support.test.testapp.SendActivity)) { activityStarted.countDown(); } } }; android.support.test.runner.lifecycle.ActivityLifecycleMonitorRegistry.getInstance().addLifecycleCallback(callback); try { rule.launchActivity(null); assertTrue(activityStarted.await(20, java.util.concurrent.TimeUnit.SECONDS)); final int[] xy = android.support.test.espresso.base.UiControllerImplIntegrationTest.getCoordinatesInMiddleOfSendButton(rule.getActivity(), android.support.test.InstrumentationRegistry.getInstrumentation()); android.support.test.InstrumentationRegistry.getInstrumentation().runOnMainSync(new java.lang.Runnable() { @java.lang.Override public void run() { android.view.MotionEvent up = android.view.MotionEvent.obtain(android.os.SystemClock.uptimeMillis(), android.os.SystemClock.uptimeMillis(), MotionEvent.ACTION_UP, xy[0], xy[1], 0); try { injectEventWorked.set(injector.injectMotionEvent(up)); } catch (android.support.test.espresso.InjectEventSecurityException e) { android.util.Log.e(android.support.test.espresso.base.EventInjectorTest.TAG, ""injectEvent threw a SecurityException""); } up.recycle(); latch.countDown(); } }); latch.await(10, java.util.concurrent.TimeUnit.SECONDS); assertFalse(injectEventWorked.get()); } finally { android.support.test.runner.lifecycle.ActivityLifecycleMonitorRegistry.getInstance().removeLifecycleCallback(callback); } }",2262e59d101a6bdb75427a4e6b142b4d1ee747b1,testInjectMotionEvent_upEventFailure(),injectMotionEvent_upEventFailure(),2,5,"@org.junit.Test public void injectMotionEvent_upEventFailure() throws java.lang.InterruptedException { final java.util.concurrent.CountDownLatch activityStarted = new java.util.concurrent.CountDownLatch(1); android.support.test.runner.lifecycle.ActivityLifecycleCallback callback = new android.support.test.runner.lifecycle.ActivityLifecycleCallback() { @java.lang.Override public void onActivityLifecycleChanged(android.app.Activity activity, android.support.test.runner.lifecycle.Stage stage) { if (((android.support.test.runner.lifecycle.Stage.RESUMED) == stage) && (activity instanceof android.support.test.testapp.SendActivity)) { activityStarted.countDown(); } } }; android.support.test.runner.lifecycle.ActivityLifecycleMonitorRegistry.getInstance().addLifecycleCallback(callback); try { rule.launchActivity(null); assertTrue(activityStarted.await(20, java.util.concurrent.TimeUnit.SECONDS)); final int[] xy = android.support.test.espresso.base.UiControllerImplIntegrationTest.getCoordinatesInMiddleOfSendButton(rule.getActivity(), android.support.test.InstrumentationRegistry.getInstrumentation()); android.support.test.InstrumentationRegistry.getInstrumentation().runOnMainSync(new java.lang.Runnable() { @java.lang.Override public void run() { android.view.MotionEvent up = android.view.MotionEvent.obtain(android.os.SystemClock.uptimeMillis(), android.os.SystemClock.uptimeMillis(), MotionEvent.ACTION_UP, xy[0], xy[1], 0); try { injectEventWorked.set(injector.injectMotionEvent(up)); } catch (android.support.test.espresso.InjectEventSecurityException e) { android.util.Log.e(android.support.test.espresso.base.EventInjectorTest.TAG, ""injectEvent threw a SecurityException""); } up.recycle(); latch.countDown(); } }); latch.await(10, java.util.concurrent.TimeUnit.SECONDS); assertFalse(injectEventWorked.get()); } finally { android.support.test.runner.lifecycle.ActivityLifecycleMonitorRegistry.getInstance().removeLifecycleCallback(callback); } }",8739a846a5531bfd95725790735e2d1378b05922,injectMotionEvent_upEventFailure(),234372,466,454
681003,src_com_android_bluetooth_newavrcp_MediaPlayerList.java,10.0,@android.annotation.NonNull com.android.bluetooth.avrcp.Metadata getCurrentSongInfo() { final com.android.bluetooth.avrcp.MediaPlayerWrapper player = getActivePlayer(); if (player == null) return com.android.bluetooth.avrcp.Util.empty_data(); return player.getCurrentMetadata(); },b3423466c5212583d04722257e1e17ba8ca6c0e3,"@android.annotation.NonNull com.android.bluetooth.avrcp.Metadata getCurrentSongInfo() { final com.android.bluetooth.avrcp.MediaPlayerWrapper player = getActivePlayer(); if (player == null) return com.android.bluetooth.avrcp.Util.empty_data(); if (!(getCurrentMediaId().equals(""""))) { for (com.android.bluetooth.avrcp.Metadata data : getNowPlayingList()) { if (data.mediaId.equals(getCurrentMediaId())) { return data.clone(); } } } return player.getCurrentMetadata(); }",9b7db1e2edb680fa98424ac767c4fdeeb6d07fb8,getCurrentSongInfo(),getCurrentSongInfo(),2,11,@android.annotation.NonNull com.android.bluetooth.avrcp.Metadata getCurrentSongInfo() { final com.android.bluetooth.avrcp.MediaPlayerWrapper player = getActivePlayer(); if (player == null) return com.android.bluetooth.avrcp.Util.empty_data(); return player.getCurrentMetadata(); },b3423466c5212583d04722257e1e17ba8ca6c0e3,getCurrentSongInfo(),176757,125,71
305308,jack_src_com_android_jack_jayce_v0002_nodes_NDeclaredType.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void setMethods(java.util.List<com.android.jack.jayce.v0002.nodes.NMethod> methods) { this.methods = new java.util.HashMap<java.lang.String, com.android.jack.jayce.v0002.nodes.NMethod>(((methods.size()) + 1), 1.0F); for (com.android.jack.jayce.v0002.nodes.NMethod nMethod : methods) { assert (nMethod.getName()) != null; java.lang.StringBuilder builder = new java.lang.StringBuilder(nMethod.getName()).append('('); for (com.android.jack.jayce.v0002.nodes.NParameter param : nMethod.getParameters()) { assert (param.type) != null; builder.append(param.type); } assert (nMethod.returnType) != null; builder.append(')').append(nMethod.returnType); java.lang.String id = builder.toString(); this.methods.put(id, nMethod); nMethod.setId(id); } }",c6755664b2ea2b4a4ccacbdb40c93229fca10bb9,,setMethods(java.util.List),2,4,"public void setMethods(@javax.annotation.Nonnull java.util.List<com.android.jack.jayce.v0002.nodes.NMethod> methods) { this.methods = new java.util.HashMap<java.lang.String, com.android.jack.jayce.v0002.nodes.NMethod>(((methods.size()) + 1), 1.0F); for (com.android.jack.jayce.v0002.nodes.NMethod nMethod : methods) { assert (nMethod.getName()) != null; java.lang.StringBuilder builder = new java.lang.StringBuilder(nMethod.getName()).append('('); for (com.android.jack.jayce.v0002.nodes.NParameter param : nMethod.getParameters()) { assert (param.type) != null; builder.append(param.type); } assert (nMethod.returnType) != null; builder.append(')').append(nMethod.returnType); java.lang.String id = builder.toString(); this.methods.put(id, nMethod); nMethod.setId(id); } }",dd3390fbd3fb67f31625d34947bf04792f2d6ab6,setMethods(java.util.List),33459,239,244
647205,tests_tests_net_src_android_net_cts_IpSecBaseTest.java,,,,"@java.lang.Override public void sendTo(byte[] data, java.net.InetAddress dstAddr, int port) throws java.io.IOException { mSocket.send(new java.net.DatagramPacket(data, data.length, dstAddr, port)); }",fa9c0d3d4322992f7335f377f899c883b9f6ad34,,"sendTo(byte[],java.net.InetAddress,int)",15,17,"@java.lang.Override public void sendTo(byte[] data, java.net.InetAddress dstAddr, int port) throws java.lang.Exception { mSocket.send(new java.net.DatagramPacket(data, data.length, dstAddr, port)); }",31c0b80289f9df3cbda26057ca023b189f6ff93f,"sendTo(byte[],java.net.InetAddress,int)",381448,58,58
70742,builder-model_src_main_java_com_android_builder_model_ArtifactSourceProviders.java,,,,@com.android.annotations.NonNull java.util.Collection<java.lang.String> getSourceProviders();,42e75d2579d5a4cc10c40c83d065da19acc2fdcc,,getSourceProviders(),8,1,@com.android.annotations.NonNull com.android.builder.model.SourceProvider getSourceProvider();,85c2aa21b17828db3dfff2eb89f886aeb27ecc2c,getSourceProvider(),456890,24,22
124160,sched_src_com_android_sched_vfs_MessageDigestFS.java,,,,"@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(@javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent, @javax.annotation.Nonnull java.lang.String name) { return null; }",610ad8ffe7a031f2478625a1b8800cebdd65c660,,"getVFileLocation(com.android.sched.vfs.BaseVDir,java.lang.String)",5,12,"@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(@javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent, @javax.annotation.Nonnull java.lang.String name) { return vfs.getVFileLocation(parent, name); }",7fa02bbf65e499f67c54278161f5914b57854af2,"getVFileLocation(com.android.sched.vfs.BaseVDir,java.lang.String)",215246,64,74
278609,telecomm_java_android_telecom_Log.java,26.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static void addRequestResponsePair(android.telecom.Logging.Events.TimedEventPair p) { android.telecom.Log.getEvents().addRequestResponsePair(p); },372041363e109e8e26b1a7b864d6babc921d1f8b,,addRequestResponsePair(android.telecom.Logging.Events$TimedEventPair),3,27,public static void addRequestResponsePair(android.telecom.Logging.EventManager.TimedEventPair p) { android.telecom.Log.getEventManager().addRequestResponsePair(p); },aebda2a8eac9dd9366f3625b0e120058d529ac6f,addRequestResponsePair(android.telecom.Logging.EventManager$TimedEventPair),122353,43,44
684217,harnesses_tradefed_src_com_android_tradefed_util_OutputUtil.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setAbiBitness(java.lang.String bitness) { mAbiBitness = bitness; },67732e438cb607237c70a381fe21a0bf54756ada,,setAbiBitness(java.lang.String),8,3,public void setAbiName(java.lang.String abiName) { mAbiName = abiName; },baddf4aa4d8b01a164a77f9e10e2006a92149fdd,setAbiName(java.lang.String),445732,27,27
414159,dx_src_com_android_dx_dex_code_form_Form3rc.java,0.0,@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.CstInsn)) { return false; } com.android.dx.dex.code.CstInsn ci = ((com.android.dx.dex.code.CstInsn) (insn)); int cpi = ci.getIndex(); com.android.dx.rop.cst.Constant cst = ci.getConstant(); if (!(unsignedFitsInShort(cpi))) { return false; } if (!((cst instanceof com.android.dx.rop.cst.CstMethodRef) || (cst instanceof com.android.dx.rop.cst.CstType))) { return false; } com.android.dx.rop.code.RegisterSpecList regs = ci.getRegisters(); int sz = regs.size(); return ((regs.size()) == 0) || (((isRegListSequential(regs)) && (unsignedFitsInShort(regs.get(0).getReg()))) && (unsignedFitsInByte(regs.getWordCount()))); },e36ff675540069d085a8ed81fb3eea636593d651,@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.CstInsn)) { return false; } com.android.dx.dex.code.CstInsn ci = ((com.android.dx.dex.code.CstInsn) (insn)); int cpi = ci.getIndex(); com.android.dx.rop.cst.Constant cst = ci.getConstant(); if (!(unsignedFitsInShort(cpi))) { return false; } if (!(((cst instanceof com.android.dx.rop.cst.CstMethodRef) || (cst instanceof com.android.dx.rop.cst.CstType)) || (cst instanceof com.android.dx.rop.cst.CstInvokeDynamic))) { return false; } com.android.dx.rop.code.RegisterSpecList regs = ci.getRegisters(); int sz = regs.size(); return ((regs.size()) == 0) || (((isRegListSequential(regs)) && (unsignedFitsInShort(regs.get(0).getReg()))) && (unsignedFitsInByte(regs.getWordCount()))); },973be2797896800133f82249310514a8215431f5,isCompatible(com.android.dx.dex.code.DalvInsn),isCompatible(com.android.dx.dex.code.DalvInsn),20,0,@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.CstInsn)) { return false; } com.android.dx.dex.code.CstInsn ci = ((com.android.dx.dex.code.CstInsn) (insn)); int cpi = ci.getIndex(); com.android.dx.rop.cst.Constant cst = ci.getConstant(); if (!(unsignedFitsInShort(cpi))) { return false; } if (!(((cst instanceof com.android.dx.rop.cst.CstMethodRef) || (cst instanceof com.android.dx.rop.cst.CstType)) || (cst instanceof com.android.dx.rop.cst.CstCallSiteRef))) { return false; } com.android.dx.rop.code.RegisterSpecList regs = ci.getRegisters(); int sz = regs.size(); return ((regs.size()) == 0) || (((isRegListSequential(regs)) && (unsignedFitsInShort(regs.get(0).getReg()))) && (unsignedFitsInByte(regs.getWordCount()))); },dfabe922163cab03894175e6beb5593c1330011e,isCompatible(com.android.dx.dex.code.DalvInsn),238673,284,285
41115,src_java_com_android_internal_telephony_IccCardProxy.java,,,,"public void supplyPin2(java.lang.String pin2, android.os.Message onComplete) { if ((mUiccApplication) != null) { mUiccApplication.supplyPin2(pin2, onComplete); } else if (onComplete != null) { java.lang.Exception e = new java.lang.RuntimeException(""ICC card is absent.""); android.os.AsyncResult.forMessage(onComplete).exception = e; onComplete.sendToTarget(); return; } }",8c6f6b39fd1d7a62fa9823a6cae1b1677a995c38,,"supplyPin2(java.lang.String,android.os.Message)",22,10,"@java.lang.Override public void supplyPin2(java.lang.String pin2, android.os.Message onComplete) { synchronized(mLock) { if ((mUiccApplication) != null) { mUiccApplication.supplyPin2(pin2, onComplete); } else if (onComplete != null) { java.lang.Exception e = new java.lang.RuntimeException(""ICC card is absent.""); android.os.AsyncResult.forMessage(onComplete).exception = e; onComplete.sendToTarget(); return; } } }",3db2c2e8509ef0ce3dd13fa457ef3c9e3a874e15,"supplyPin2(java.lang.String,android.os.Message)",499855,101,114
91995,luni_src_main_java_java_nio_FileChannelImpl.java,26.0,"public long transferTo(long position, long count, java.nio.channels.WritableByteChannel target) throws java.io.IOException { checkOpen(); if (!(target.isOpen())) { throw new java.nio.channels.ClosedChannelException(); } checkReadable(); if (target instanceof java.nio.FileChannelImpl) { ((java.nio.FileChannelImpl) (target)).checkWritable(); } if ((position < 0) || (count < 0)) { throw new java.lang.IllegalArgumentException((((""position="" + position) + "" count="") + count)); } if ((count == 0) || (position >= (size()))) { return 0; } count = java.lang.Math.min(count, ((size()) - position)); boolean completed = false; if (target instanceof java.nio.SocketChannelImpl) { java.io.FileDescriptor outFd = ((java.nio.SocketChannelImpl) (target)).getFD(); try { begin(); try { libcore.util.MutableLong offset = new libcore.util.MutableLong(position); long rc = Libcore.os.sendfile(outFd, fd, offset, count); completed = true; return rc; } catch (libcore.io.ErrnoException errnoException) { if (((errnoException.errno) != (ENOSYS)) && ((errnoException.errno) != (EINVAL))) { throw errnoException.rethrowAsIOException(); } } } finally { end(completed); } } java.nio.ByteBuffer buffer = null; try { buffer = map(java.nio.channels.FileChannel.MapMode.READ_ONLY, position, count); return target.write(buffer); } finally { java.nio.NioUtils.freeDirectBuffer(buffer); } }",54775304c698d72ac15444f69626af6616eac083,"public long transferTo(long position, long count, java.nio.channels.WritableByteChannel target) throws java.io.IOException { checkOpen(); if (!(target.isOpen())) { throw new java.nio.channels.ClosedChannelException(); } checkReadable(); if (target instanceof java.nio.FileChannelImpl) { ((java.nio.FileChannelImpl) (target)).checkWritable(); } if ((position < 0) || (count < 0)) { throw new java.lang.IllegalArgumentException((((""position="" + position) + "" count="") + count)); } if ((count == 0) || (position >= (size()))) { return 0; } count = java.lang.Math.min(count, ((size()) - position)); boolean completed = false; if (target instanceof java.nio.SocketChannelImpl) { java.io.FileDescriptor outFd = ((java.nio.SocketChannelImpl) (target)).getFD(); try { begin(); try { android.util.MutableLong offset = new android.util.MutableLong(position); long rc = Libcore.os.sendfile(outFd, fd, offset, count); completed = true; return rc; } catch (android.os.ErrnoException errnoException) { if (((errnoException.errno) != (ENOSYS)) && ((errnoException.errno) != (EINVAL))) { throw errnoException.rethrowAsIOException(); } } } finally { end(completed); } } java.nio.ByteBuffer buffer = null; try { buffer = map(java.nio.channels.FileChannel.MapMode.READ_ONLY, position, count); return target.write(buffer); } finally { java.nio.NioUtils.freeDirectBuffer(buffer); } }",d66ca43222e49613b72638c815a235f72409ebdb,"transferTo(long,long,java.nio.channels.WritableByteChannel)","transferTo(long,long,java.nio.channels.WritableByteChannel)",3,26,"public long transferTo(long position, long count, java.nio.channels.WritableByteChannel target) throws java.io.IOException { checkOpen(); if (!(target.isOpen())) { throw new java.nio.channels.ClosedChannelException(); } checkReadable(); if (target instanceof java.nio.FileChannelImpl) { ((java.nio.FileChannelImpl) (target)).checkWritable(); } if ((position < 0) || (count < 0)) { throw new java.lang.IllegalArgumentException((((""position="" + position) + "" count="") + count)); } if ((count == 0) || (position >= (size()))) { return 0; } count = java.lang.Math.min(count, ((size()) - position)); boolean completed = false; if (target instanceof java.nio.SocketChannelImpl) { java.io.FileDescriptor outFd = ((java.nio.SocketChannelImpl) (target)).getFD(); try { begin(); try { android.util.MutableLong offset = new android.util.MutableLong(position); long rc = Libcore.os.sendfile(outFd, fd, offset, count); completed = true; return rc; } catch (android.system.ErrnoException errnoException) { if (((errnoException.errno) != (ENOSYS)) && ((errnoException.errno) != (EINVAL))) { throw errnoException.rethrowAsIOException(); } } } finally { end(completed); } } java.nio.ByteBuffer buffer = null; try { buffer = map(java.nio.channels.FileChannel.MapMode.READ_ONLY, position, count); return target.write(buffer); } finally { java.nio.NioUtils.freeDirectBuffer(buffer); } }",1e6acab0919b75935b291671e115a20be135ddff,"transferTo(long,long,java.nio.channels.WritableByteChannel)",170150,375,375
629405,src_com_android_se_security_AccessControlEnforcer.java,12.0,"private synchronized com.android.se.security.ChannelAccess internal_setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag) { if ((packageName == null) || (packageName.isEmpty())) { throw new java.security.AccessControlException(""package names must be specified""); } try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw new java.security.AccessControlException(""Application certificates are invalid or do not exist.""); } if (checkRefreshTag) { updateAccessRuleIfNeed(); } return getAccessRule(aid, appCerts); } catch (java.lang.Throwable exp) { throw new java.security.AccessControlException(exp.getMessage()); } }",8907b690eca10b71b674c544f7a381430c485b8e,"private synchronized com.android.se.security.ChannelAccess internal_setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag) throws java.io.IOException { if ((packageName == null) || (packageName.isEmpty())) { throw new java.security.AccessControlException(""package names must be specified""); } try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw new java.security.AccessControlException(""Application certificates are invalid or do not exist.""); } if (checkRefreshTag) { updateAccessRuleIfNeed(true); } return getAccessRule(aid, appCerts); } catch (java.io.IOException e) { throw e; } catch (java.lang.Throwable exp) { throw new java.security.AccessControlException(exp.getMessage()); } }",1c970c36fcd240af6d2cdfb661fd25247deafd2b,"internal_setUpChannelAccess(byte[],java.lang.String,boolean)","internal_setUpChannelAccess(byte[],java.lang.String,boolean)",8,11,"private synchronized com.android.se.security.ChannelAccess internal_setUpChannelAccess(byte[] aid, java.lang.String packageName, boolean checkRefreshTag) throws java.io.IOException { if ((packageName == null) || (packageName.isEmpty())) { throw new java.security.AccessControlException(""package names must be specified""); } try { java.security.cert.Certificate[] appCerts = getAPPCerts(packageName); if ((appCerts == null) || ((appCerts.length) == 0)) { throw new java.security.AccessControlException(""Application certificates are invalid or do not exist.""); } if (checkRefreshTag) { updateAccessRuleIfNeed(); } return getAccessRule(aid, appCerts); } catch (java.io.IOException e) { throw e; } catch (java.lang.Throwable exp) { throw new java.security.AccessControlException(exp.getMessage()); } }",6f08e3c44670fbf600457f7f0582fac06c99c97e,"internal_setUpChannelAccess(byte[],java.lang.String,boolean)",115576,203,201
291327,luni_src_test_java_libcore_java_net_URLConnectionTest.java,239.0,"public void testSslFallback_defaultProtocols() throws java.lang.Exception { TestSSLContext testSSLContext = createDefaultTestSSLContext(); javax.net.ssl.SSLSocketFactory serverSocketFactory = testSSLContext.serverContext.getSocketFactory(); javax.net.ssl.SSLSocketFactory clientSocketFactoryDelegate = testSSLContext.clientContext.getSocketFactory(); checkSslFallback(serverSocketFactory, clientSocketFactoryDelegate); }",698a6db31a5ab8f05a6af08e4a3a375d6a978e12,"public void testSslFallback_defaultProtocols() throws java.lang.Exception { TestSSLContext testSSLContext = createDefaultTestSSLContext(); javax.net.ssl.SSLSocketFactory serverSocketFactory = testSSLContext.serverContext.getSocketFactory(); javax.net.ssl.SSLSocketFactory clientSocketFactoryDelegate = testSSLContext.clientContext.getSocketFactory(); checkNoFallbackOnFailedHandshake(serverSocketFactory, clientSocketFactoryDelegate); }",e3bb106668516a90c3ee5a9b4761b52e7fcea28a,testSslFallback_defaultProtocols(),testSslFallback_defaultProtocols(),6,211,"public void testNoSslFallback_defaultProtocols() throws java.lang.Exception { java.lang.String[] expectedEnabledProtocols = new java.lang.String[]{ ""TLSv1.2"", ""TLSv1.1"", ""TLSv1"" }; TestSSLContext testSSLContext = createDefaultTestSSLContext(); javax.net.ssl.SSLSocketFactory serverSocketFactory = testSSLContext.serverContext.getSocketFactory(); javax.net.ssl.SSLSocketFactory clientSocketFactory = testSSLContext.clientContext.getSocketFactory(); checkNoFallbackOnFailedHandshake(clientSocketFactory, serverSocketFactory, expectedEnabledProtocols); }",619b6011b0100f2a880b2f7062791a9b5aa85dda,testNoSslFallback_defaultProtocols(),494235,78,111
91995,luni_src_main_java_libcore_io_BlockGuardOs.java,19.0,@java.lang.Override public libcore.io.StructStatVfs statvfs(java.lang.String path) throws libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onReadFromDisk(); return os.statvfs(path); },153a6bb9d3f81e1dab05c7f089a113d37ef3eb71,@java.lang.Override public android.os.StructStatVfs statvfs(java.lang.String path) throws android.os.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onReadFromDisk(); return os.statvfs(path); },a21df04a7ec294ed6732872bab71291afc9c46c9,statvfs(java.lang.String),statvfs(java.lang.String),3,19,@java.lang.Override public android.system.StructStatVfs statvfs(java.lang.String path) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onReadFromDisk(); return os.statvfs(path); },624a21959488c1cbb227eba9f4cbd04bcd0ba524,statvfs(java.lang.String),170384,58,58
91891,ddmlib_src_main_java_com_android_ddmlib_EmulatorConsole.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public synchronized void close() { com.android.ddmlib.EmulatorConsole.removeConsole(mPort); try { if ((mSocketChannel) != null) { mSocketChannel.close(); } mSocketChannel = null; mPort = -1; } catch (java.io.IOException e) { com.android.ddmlib.Log.w(com.android.ddmlib.EmulatorConsole.LOG_TAG, ""Failed to close EmulatorConsole channel""); } }",8e1ba661165ccb580b3a9fbc939252dfe925d6b9,,close(),2,5,"public synchronized void close() { if ((mPort) == (-1)) { return; } com.android.ddmlib.EmulatorConsole.removeConsole(mPort); try { if ((mSocketChannel) != null) { mSocketChannel.close(); } mSocketChannel = null; mPort = -1; } catch (java.io.IOException e) { com.android.ddmlib.Log.w(com.android.ddmlib.EmulatorConsole.LOG_TAG, ""Failed to close EmulatorConsole channel""); } }",a82433ed37d1e251a30fd6a832a940982dd3f4e5,close(),354884,99,113
81416,tests_tests_renderscript_src_android_renderscript_cts_TestLdexp.java,,,,"private void checkLdexpFloat3Int() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inY, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testLdexpFloat3Int(inX, out); verifyResultsLdexpFloat3Int(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLdexpFloat3Int: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testLdexpFloat3Int(inX, out); verifyResultsLdexpFloat3Int(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLdexpFloat3Int: "" + (e.toString()))); } }",a94130731d2c06666530b8381d9c287f43e075cd,,checkLdexpFloat3Int(),9,13,"private void checkLdexpFloat3IntFloat3() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, -8057758006383532977L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.SIGNED_32, 1, -8057758006383532977L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testLdexpFloat3IntFloat3(inX, out); verifyResultsLdexpFloat3IntFloat3(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLdexpFloat3IntFloat3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testLdexpFloat3IntFloat3(inX, out); verifyResultsLdexpFloat3IntFloat3(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLdexpFloat3IntFloat3: "" + (e.toString()))); } }",eb5a589ffc1246689ec9e8a2b498b8f39644e216,checkLdexpFloat3IntFloat3(),142837,443,396
96228,build-system_builder_src_main_java_com_android_builder_core_AndroidBuilder.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void setInjectableValues(com.android.manifmerger.ManifestTask.Invoker<?> invoker, java.lang.String packageOverride, int versionCode, java.lang.String versionName, @com.android.annotations.Nullable java.lang.String minSdkVersion, @com.android.annotations.Nullable java.lang.String targetSdkVersion) { if (!(com.google.common.base.Strings.isNullOrEmpty(packageOverride))) { invoker.setOverride(SystemProperty.PACKAGE, packageOverride); } if (versionCode > 0) { invoker.setOverride(SystemProperty.VERSION_CODE, java.lang.String.valueOf(versionCode)); } if (!(com.google.common.base.Strings.isNullOrEmpty(versionName))) { invoker.setOverride(SystemProperty.VERSION_NAME, versionName); } if (!(com.google.common.base.Strings.isNullOrEmpty(minSdkVersion))) { invoker.setOverride(SystemProperty.MIN_SDK_VERSION, minSdkVersion); } if (!(com.google.common.base.Strings.isNullOrEmpty(targetSdkVersion))) { invoker.setOverride(SystemProperty.TARGET_SDK_VERSION, targetSdkVersion); } }",f2c00cefb6572a731ab8d40803edfdb8531f3182,,"setInjectableValues(com.android.manifmerger.ManifestTask$Invoker,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)",8,1,"private static void setInjectableValues(com.android.manifmerger.ManifestMerger2.Invoker<?> invoker, java.lang.String packageOverride, int versionCode, java.lang.String versionName, @com.android.annotations.Nullable java.lang.String minSdkVersion, @com.android.annotations.Nullable java.lang.String targetSdkVersion) { if (!(com.google.common.base.Strings.isNullOrEmpty(packageOverride))) { invoker.setOverride(SystemProperty.PACKAGE, packageOverride); } if (versionCode > 0) { invoker.setOverride(SystemProperty.VERSION_CODE, java.lang.String.valueOf(versionCode)); } if (!(com.google.common.base.Strings.isNullOrEmpty(versionName))) { invoker.setOverride(SystemProperty.VERSION_NAME, versionName); } if (!(com.google.common.base.Strings.isNullOrEmpty(minSdkVersion))) { invoker.setOverride(SystemProperty.MIN_SDK_VERSION, minSdkVersion); } if (!(com.google.common.base.Strings.isNullOrEmpty(targetSdkVersion))) { invoker.setOverride(SystemProperty.TARGET_SDK_VERSION, targetSdkVersion); } }",192f58b7ad0465c79f7aec9be0a50dd15e83e216,"setInjectableValues(com.android.manifmerger.ManifestMerger2$Invoker,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)",352481,242,242
114532,dx_src_com_android_dx_command_dexer_Main.java,36.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static boolean addClassToDex(java.lang.String name, com.android.dx.dex.file.ClassDefItem clazz) { synchronized(com.android.dx.command.dexer.Main.outputDex) { com.android.dx.command.dexer.Main.outputDex.add(clazz); } return true; }",e433de5eb8d70d6b649e4f16ed9629652203944e,,"addClassToDex(java.lang.String,com.android.dx.dex.file.ClassDefItem)",6,0,private static boolean addClassToDex(com.android.dx.dex.file.ClassDefItem clazz) { synchronized(com.android.dx.command.dexer.Main.outputDex) { com.android.dx.command.dexer.Main.outputDex.add(clazz); } return true; },bd167689ef8ae849e32d7e2241acef55de08ada7,addClassToDex(com.android.dx.dex.file.ClassDefItem),237101,75,68
150842,build-system_builder-model_src_main_java_com_android_builder_model_BaseConfig.java,1.0,@com.android.annotations.Nullable java.io.File getJarJarRuleFile();,05959f9cd011d234303767ad2546256ed778ea3e,@com.android.annotations.NonNull java.util.Collection<java.io.File> getJarJarRuleFiles();,82c655e1532edfd56d7475838d4baae70c038ea9,getJarJarRuleFile(),getJarJarRuleFiles(),3,2,@com.android.annotations.NonNull java.util.List<java.io.File> getJarJarRuleFiles();,a8c2739c3af7fa45b02dd41a798daf4f86552797,getJarJarRuleFiles(),80113,26,26
16828,core_java_android_preference_DialogPreference.java,15.0,private void requestInputMethod(android.app.Dialog dialog) { android.view.Window window = dialog.getWindow(); window.setSoftInputMode(((WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE) | (WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE))); },16b62f3505e9c322ae06c205f42a92f7b7af7e4a,private void requestInputMethod(android.app.Dialog dialog) { android.view.Window window = dialog.getWindow(); window.setSoftInputMode((((WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE) | (WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)) | (WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN))); },d39958020d32962ed3d55ac20ce046b0a0a9a67f,requestInputMethod(android.app.Dialog),requestInputMethod(android.app.Dialog),2,15,private void requestInputMethod(android.app.Dialog dialog) { android.view.Window window = dialog.getWindow(); window.setSoftInputMode(((WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE) | (WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN))); },8faeac50a03263ae7947443ab7ad76eee3b35a39,requestInputMethod(android.app.Dialog),163886,76,59
632132,src_com_android_bluetooth_hearingaid_HearingAidStateMachine.java,,,,"public void cleanup() { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (""cleanup for device "" + (mDevice))); } }",89bff0f5bbb02ab4ef99bb6573d49e9110e37fc4,,cleanup(),10,0,"public void cleanup() { log((""cleanup for device "" + (mDevice))); }",2b70e3bdb1ae092d4475f5fa53f5fa0e05f7c408,cleanup(),152154,68,18
22869,tests_tests_webkit_src_android_webkit_cts_WebViewTest.java,23.0,"@dalvik.annotation.TestTargetNew(level = dalvik.annotation.TestLevel.SUFFICIENT, method = ""findAll"", args = { java.lang.String.class }, notes = ""Cannot check highlighting"") @android.test.UiThreadTest public void testFindAll() throws java.lang.InterruptedException { java.lang.String p = ""<p>Find all instances of find on the page and highlight them.</p>""; mWebView.loadData(((""<html><body>"" + p) + ""</body></html>""), ""text/html"", ""UTF-8""); waitForLoadComplete(mWebView, android.webkit.cts.WebViewTest.TEST_TIMEOUT); assertEquals(2, mWebView.findAll(""find"")); }",dd3581afdfdc741a751215672587eb6a156cb464,"@dalvik.annotation.TestTargetNew(level = dalvik.annotation.TestLevel.SUFFICIENT, method = ""findAll"", args = { java.lang.String.class }, notes = ""Cannot check highlighting"") public void testFindAll() throws java.lang.Throwable { java.lang.String p = ""<p>Find all instances of find on the page and highlight them.</p>""; mWebView.loadData(((""<html><body>"" + p) + ""</body></html>""), ""text/html"", ""UTF-8""); waitForLoadComplete(mWebView, android.webkit.cts.WebViewTest.TEST_TIMEOUT); runTestOnUiThread(new java.lang.Runnable() { public void run() { assertEquals(2, mWebView.findAll(""find"")); } }); }",6c887c9941ae0842fd362c9f0d2aa8cf371f5519,testFindAll(),testFindAll(),2,23,"@dalvik.annotation.TestTargetNew(level = dalvik.annotation.TestLevel.SUFFICIENT, method = ""findAll"", args = { java.lang.String.class }, notes = ""Cannot check highlighting"") public void testFindAll() throws java.lang.Throwable { getActivity().runOnUiThread(new java.lang.Runnable() { public void run() { java.lang.String p = ""<p>Find all instances of find on the page and highlight them.</p>""; mWebView.loadData(((""<html><body>"" + p) + ""</body></html>""), ""text/html"", ""UTF-8""); } }); waitForLoadComplete(mWebView, android.webkit.cts.WebViewTest.TEST_TIMEOUT); runTestOnUiThread(new java.lang.Runnable() { public void run() { assertEquals(2, mWebView.findAll(""find"")); } }); }",fa9130b86b018efef7004e7708eb0b5fd739fde1,testFindAll(),443379,167,186
113821,src_com_google_gct_idea_git_GCPCheckoutProvider.java,,,,"@java.lang.Override public void run(@org.jetbrains.annotations.NotNull com.intellij.openapi.progress.ProgressIndicator indicator) { com.google.gct.idea.git.PantheonHttpAuthDataProvider.Context context = com.google.gct.idea.git.PantheonHttpAuthDataProvider.createContext(gcpUserName); try { cloneResult.set(com.google.gct.idea.git.GCPCheckoutProvider.doClone(project, indicator, git, directoryName, parentDirectory, sourceRepositoryURL)); } finally { context.Close(); } }",65c45b4820fc98d11266c8c4d22bf588f7f1ab17,,run(com.intellij.openapi.progress.ProgressIndicator),6,8,"@java.lang.Override public void run(@org.jetbrains.annotations.NotNull com.intellij.openapi.progress.ProgressIndicator indicator) { com.google.gct.idea.git.GcpHttpAuthDataProvider.Context context = com.google.gct.idea.git.GcpHttpAuthDataProvider.createContext(gcpUserName); try { cloneResult.set(com.google.gct.idea.git.GcpCheckoutProvider.doClone(project, indicator, git, directoryName, parentDirectory, sourceRepositoryURL)); } finally { context.Close(); } }",eb3d65e6c0eafb3227b6c88de28a6a538e414630,run(com.intellij.openapi.progress.ProgressIndicator),516047,128,126
349954,service_java_com_android_server_wifi_hotspot2_PasspointManager.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public android.net.wifi.WifiConfiguration getMatchingWifiConfig(android.net.wifi.ScanResult scanResult) { Pair<com.android.server.wifi.hotspot2.PasspointProvider, com.android.server.wifi.hotspot2.PasspointMatch> matchedProvider = matchProvider(scanResult); if (matchedProvider == null) { return null; } android.net.wifi.WifiConfiguration config = matchedProvider.first.getWifiConfig(); config.SSID = com.android.server.wifi.util.ScanResultUtil.createQuotedSSID(scanResult.SSID); return config; }",15ed28172d486394d096da0324e8008888828ed2,,getMatchingWifiConfig(android.net.wifi.ScanResult),5,5,"public android.net.wifi.WifiConfiguration getMatchingWifiConfig(android.net.wifi.ScanResult scanResult) { if (scanResult == null) { return null; } Pair<com.android.server.wifi.hotspot2.PasspointProvider, com.android.server.wifi.hotspot2.PasspointMatch> matchedProvider = matchProvider(scanResult); if (matchedProvider == null) { return null; } android.net.wifi.WifiConfiguration config = matchedProvider.first.getWifiConfig(); config.SSID = com.android.server.wifi.util.ScanResultUtil.createQuotedSSID(scanResult.SSID); return config; }",c7547b802a77742cd6d4c367f8046b078b485875,getMatchingWifiConfig(android.net.wifi.ScanResult),305432,123,134
237621,jack-tests_tests_com_android_jack_java8_DefaultMethodTest.java,10.0,@org.junit.Test public void testDefaultMethod015() throws java.lang.Exception { run(DEFAULTMETHOD015); },3fe6c4ecd3e4a805c69c21a36d74e90de6efb8a7,@org.junit.Test @java.lang.Runtime public void testDefaultMethod015() throws java.lang.Exception { run(DEFAULTMETHOD015); },7f9316de06ea7f1310c3901d7692be7650fe1664,testDefaultMethod015(),testDefaultMethod015(),11,10,@org.junit.Test @java.lang.Runtime(from = RuntimeVersion.N) public void testDefaultMethod015() throws java.lang.Exception { run(DEFAULTMETHOD015); },e923f8fb88173a26e372822afc7c2ac575ef350e,testDefaultMethod015(),273917,34,42
293986,telecomm_java_android_telecom_ConnectionService.java,22.0,"@java.lang.Override public void onCallAudioStateChanged(java.lang.String callId, android.telecom.CallAudioState callAudioState) { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = callAudioState; mHandler.obtainMessage(android.telecom.ConnectionService.MSG_ON_CALL_AUDIO_STATE_CHANGED, args).sendToTarget(); }",918be5261be3f2feb5c9d864ed957721f70b4ade,"@java.lang.Override public void onCallAudioStateChanged(java.lang.String callId, android.telecom.CallAudioState callAudioState, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startExternalSession(sessionInfo, android.telecom.ConnectionService.SESSION_CALL_AUDIO_SC); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = callAudioState; args.arg3 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_ON_CALL_AUDIO_STATE_CHANGED, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }",5717ae01bbbc3d78c3b1321118e89ab743e80b07,"onCallAudioStateChanged(java.lang.String,android.telecom.CallAudioState)","onCallAudioStateChanged(java.lang.String,android.telecom.CallAudioState,android.telecom.Logging.Session$Info)",8,33,"@java.lang.Override public void onCallAudioStateChanged(java.lang.String callId, android.telecom.CallAudioState callAudioState, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startSession(sessionInfo, android.telecom.ConnectionService.SESSION_CALL_AUDIO_SC); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = callAudioState; args.arg3 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_ON_CALL_AUDIO_STATE_CHANGED, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }",b213326c1e9ae0f249e1f81d2266bf390cd0a81e,"onCallAudioStateChanged(java.lang.String,android.telecom.CallAudioState,android.telecom.Logging.Session$Info)",425174,189,188
47508,luni_src_main_java_java_util_AbstractCollection.java,0.0,"@java.lang.SuppressWarnings(""unchecked"") public <T> T[] toArray(T[] contents) { int size = size(); int index = 0; if (size > (contents.length)) { java.lang.Class<?> ct = contents.getClass().getComponentType(); contents = ((T[]) (java.lang.reflect.Array.newInstance(ct, size))); } for (E entry : this) { contents[(index++)] = ((T) (entry)); } if (index < (contents.length)) { contents[index] = null; } return contents; }",eb7299c1e480c9dfa7a1b068c59299d553380879,"@java.lang.SuppressWarnings(""unchecked"") public <T> T[] toArray(T[] contents) { java.util.List<T> list = new java.util.ArrayList<T>(size()); for (E entry : this) { list.add(((T) (entry))); } return list.toArray(contents); }",e08fac1c11bd3e356521f8d20c9e5bc47f41b3b9,toArray(java.lang.Object[]),toArray(java.lang.Object[]),2,0,public <T> T[] toArray(T[] contents) { return toArrayList().toArray(contents); },bdd19d6d9aa0f6fcc9fa02c1507445ce87ab8abf,toArray(java.lang.Object[]),138431,72,23
152861,perflib_src_main_java_com_android_tools_perflib_heap_Snapshot.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void resolveReferences() { java.util.ArrayList<com.android.tools.perflib.heap.ClassObj> referenceSubclasses = new java.util.ArrayList<com.android.tools.perflib.heap.ClassObj>(); for (com.android.tools.perflib.heap.ClassObj referenceClass : mReferenceClasses) { referenceClass.setIsSoftReferenceType(); for (com.android.tools.perflib.heap.ClassObj subClass : referenceClass.getSubclasses()) { referenceSubclasses.add(subClass); subClass.setIsSoftReferenceType(); } } mReferenceClasses.addAll(referenceSubclasses); },316be031164cfa809f48fcacb9f61871c27335e1,,resolveReferences(),6,11,public void resolveReferences() { java.util.Stack<com.android.tools.perflib.heap.ClassObj> referenceSubclasses = new java.util.Stack<com.android.tools.perflib.heap.ClassObj>(); java.util.Collection<com.android.tools.perflib.heap.ClassObj> references = findClasses(com.android.tools.perflib.heap.ClassObj.getReferenceClassName()); for (com.android.tools.perflib.heap.ClassObj classObj : references) { referenceSubclasses.push(classObj); } while (!(referenceSubclasses.isEmpty())) { com.android.tools.perflib.heap.ClassObj classObj = referenceSubclasses.pop(); classObj.setIsSoftReference(); mReferenceClasses.add(classObj); for (com.android.tools.perflib.heap.ClassObj subClass : classObj.getSubclasses()) { referenceSubclasses.push(subClass); } } },9d891f4899d7d279e543065a3f04f1a490577b89,resolveReferences(),375572,137,210
452581,harnesses_tradefed_src_com_android_tradefed_targetprep_VtsPythonVirtualenvPreparer.java,0.0,"private void activate() { java.io.File binDir = new java.io.File(mVenvDir, (com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.isOnWindows() ? ""Scripts"" : ""bin"")); mRunUtil.setWorkingDir(binDir); java.lang.String path = java.lang.System.getenv(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH); mRunUtil.setEnvVariable(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH, ((binDir + (java.io.File.pathSeparator)) + path)); java.io.File pipFile = new java.io.File(binDir, com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PIP); pipFile.setExecutable(true); mPip = pipFile.getAbsolutePath(); }",f96cd098ad26673b893680641c160b6da5aea02d,"private void activate() { java.io.File binDir = new java.io.File(mVenvDir, (com.android.tradefed.util.VtsPythonUtil.isOnWindows() ? ""Scripts"" : ""bin"")); mRunUtil.setWorkingDir(binDir); java.lang.String path = java.lang.System.getenv(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH); mRunUtil.setEnvVariable(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH, ((binDir + (java.io.File.pathSeparator)) + path)); java.io.File pipFile = new java.io.File(binDir, com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PIP); pipFile.setExecutable(true); mPip = pipFile.getAbsolutePath(); }",d41f87830b96fc6c70371880ec6a83f04c25902c,activate(),activate(),12,0,"private void activate() { java.io.File binDir = new java.io.File(mVenvDir, (com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.isOnWindows() ? ""Scripts"" : ""bin"")); mRunUtil.setWorkingDir(binDir); java.lang.String path = java.lang.System.getenv(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH); mRunUtil.setEnvVariable(com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PATH, ((binDir + (java.io.File.pathSeparator)) + path)); java.io.File pipFile = new java.io.File(binDir, com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.PIP); pipFile.setExecutable(true); mPip = pipFile.getAbsolutePath(); }",f96cd098ad26673b893680641c160b6da5aea02d,activate(),400210,213,218
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,53.0,"public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, getAuthKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, false, 1, true); }",013348b9d8071705cd25f84b41f9a82734deaadf,"public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",38be14d67f47d528d47a75060452b5765789f55f,testAesCbcHmacMd5Tcp4(),testAesCbcHmacMd5Tcp4(),9,61,"public void testAesCbcHmacMd5Tcp4() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_MD5, android.net.cts.IpSecManagerTest.getKey(128), 96); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, false, 1, true); }",f0f5f9d41b02337713da6bc4f05a1aa9af2e67da,testAesCbcHmacMd5Tcp4(),1852,213,213
402813,tools_ahat_src_heapdump_Sort.java,4.0,"@java.lang.Override public int compare(com.android.ahat.heapdump.AhatInstance a, com.android.ahat.heapdump.AhatInstance b) { return java.lang.Long.compare(b.getRetainedSize(mHeap), a.getRetainedSize(mHeap)); }",3e0b78937cd96af26163a6bbd51a0c8d6c7576f1,"@java.lang.Override public int compare(com.android.ahat.heapdump.AhatInstance a, com.android.ahat.heapdump.AhatInstance b) { return java.lang.Long.compare(b.getRetainedSize(mHeap).getSize(), a.getRetainedSize(mHeap).getSize()); }",78d50646dbb81850655d82e12760e4ef41792a3b,"compare(com.android.ahat.heapdump.AhatInstance,com.android.ahat.heapdump.AhatInstance)","compare(com.android.ahat.heapdump.AhatInstance,com.android.ahat.heapdump.AhatInstance)",3,5,"@java.lang.Override public int compare(com.android.ahat.heapdump.AhatInstance a, com.android.ahat.heapdump.AhatInstance b) { return com.android.ahat.heapdump.Sort.SIZE_BY_SIZE.compare(b.getRetainedSize(mHeap), a.getRetainedSize(mHeap)); }",fc65d593a6855ff263c427f25312385ed2381bf4,"compare(com.android.ahat.heapdump.AhatInstance,com.android.ahat.heapdump.AhatInstance)",281064,75,87
131630,lint_libs_lint-api_src_main_java_com_android_tools_lint_detector_api_Detector.java,28.0,"@java.lang.SuppressWarnings(""javadoc"") public void visitMethod(@com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context, @com.android.annotations.Nullable lombok.ast.AstVisitor visitor, @com.android.annotations.NonNull lombok.ast.MethodInvocation node) { }",072d0dd63bcb3074a27bf8dd1de0b3cea61f3d66,"@java.lang.SuppressWarnings(""javadoc"") public void visitMethod(@com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context, @com.android.annotations.Nullable com.android.tools.lint.detector.api.AstVisitor visitor, @com.android.annotations.NonNull com.android.tools.lint.detector.api.MethodInvocation node) { }",fb22d912d05f7255e56f1f618225d5f9ebdc6d76,"visitMethod(com.android.tools.lint.detector.api.JavaContext,lombok.ast.AstVisitor,lombok.ast.MethodInvocation)","visitMethod(com.android.tools.lint.detector.api.JavaContext,com.android.tools.lint.detector.api.AstVisitor,com.android.tools.lint.detector.api.MethodInvocation)",2,38,"@java.lang.SuppressWarnings(""javadoc"") public void visitMethod(@com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context, @com.android.annotations.Nullable lombok.ast.AstVisitor visitor, @com.android.annotations.NonNull lombok.ast.MethodInvocation node) { }",072d0dd63bcb3074a27bf8dd1de0b3cea61f3d66,"visitMethod(com.android.tools.lint.detector.api.JavaContext,lombok.ast.AstVisitor,lombok.ast.MethodInvocation)",491689,93,73
39017,luni_src_test_java_libcore_java_io_FileTest.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test_mkdirs() throws java.lang.Exception { java.io.File base = libcore.java.io.FileTest.createTemporaryDirectory(); assertTrue(base.exists()); assertFalse(base.mkdirs()); java.io.File a = new java.io.File(base, ""a""); assertFalse(a.exists()); assertTrue(a.mkdirs()); assertTrue(a.exists()); java.io.File b = new java.io.File(a, ""b""); java.io.File c = new java.io.File(b, ""c""); java.io.File d = new java.io.File(c, ""d""); assertTrue(a.exists()); assertFalse(b.exists()); assertFalse(c.exists()); assertFalse(d.exists()); assertTrue(d.mkdirs()); assertTrue(a.exists()); assertTrue(b.exists()); assertTrue(c.exists()); assertTrue(d.exists()); }",6260e8ffcfe2dd652797619ccfbdb2e038ff683b,,test_mkdirs(),2,5,"public void test_mkdirs() throws java.lang.Exception { java.io.File base = libcore.java.io.FileTest.createTemporaryDirectory(); assertTrue(base.exists()); assertFalse(base.mkdirs()); java.io.File a = new java.io.File(base, ""a""); assertFalse(a.exists()); assertTrue(a.mkdirs()); assertTrue(a.exists()); java.io.File b = new java.io.File(a, ""b""); java.io.File c = new java.io.File(b, ""c""); java.io.File d = new java.io.File(c, ""d""); assertTrue(a.exists()); assertFalse(b.exists()); assertFalse(c.exists()); assertFalse(d.exists()); assertTrue(d.mkdirs()); assertTrue(a.exists()); assertTrue(b.exists()); assertTrue(c.exists()); assertTrue(d.exists()); java.io.File existsAsFile = new java.io.File(base, ""existsAsFile""); existsAsFile.createNewFile(); assertTrue(existsAsFile.exists()); assertFalse(existsAsFile.mkdirs()); java.io.File badParent = new java.io.File(existsAsFile, ""sub""); assertTrue(existsAsFile.exists()); assertFalse(badParent.exists()); assertFalse(badParent.mkdirs()); }",743f25148d59c4b828811caaae22e81d0f0106d4,test_mkdirs(),124942,201,293
17086,drm_java_android_drm_DrmManagerClient.java,36.0,"public void loadPlugIns() { if ((getState()) == (android.drm.DrmManagerClient.STATE_UNINITIALIZED)) { _loadPlugIns(mUniqueId, new java.lang.ref.WeakReference<android.drm.DrmManagerClient>(this)); mCurrentState = android.drm.DrmManagerClient.STATE_INITIALIZED; } }",e16dccb3c8cf85a0e2b1cd443c885b469a83c987,"public int loadPlugIns() { int result = android.drm.DrmManagerClient.ERROR_UNKNOWN; if ((android.drm.DrmManagerClient.STATE_UNINITIALIZED) == (getState())) { if (null != (mActionHandler)) { android.os.Message msg = mActionHandler.obtainMessage(android.drm.DrmManagerClient.ACTION_INITIALIZE, new java.lang.ref.WeakReference<android.drm.DrmManagerClient>(this)); result = (mActionHandler.sendMessage(msg)) ? android.drm.DrmManagerClient.ERROR_NONE : result; } } else { result = android.drm.DrmManagerClient.ERROR_NONE; } return result; }",c5083806f0297056d8e513acdf4a0f8d82bd2329,loadPlugIns(),loadPlugIns(),8,46,"public int loadPlugIns() { int result = android.drm.DrmManagerClient.ERROR_UNKNOWN; if ((android.drm.DrmManagerClient.STATE_UNINITIALIZED) == (getState())) { if (null != (mEventHandler)) { android.os.Message msg = mEventHandler.obtainMessage(android.drm.DrmManagerClient.ACTION_INITIALIZE, new java.lang.ref.WeakReference<android.drm.DrmManagerClient>(this)); result = (mEventHandler.sendMessage(msg)) ? android.drm.DrmManagerClient.ERROR_NONE : result; } } else { result = android.drm.DrmManagerClient.ERROR_NONE; } return result; }",0f1e3eba1e58b9a3b735d294586f46929b918589,loadPlugIns(),110589,160,157
59912,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_wizards_exportgradle_ProjectSelectionPage.java,15.0,"public static boolean hasCyclicDependency(org.eclipse.jdt.core.IJavaProject javaProject) throws org.eclipse.core.runtime.CoreException { org.eclipse.core.resources.IMarker[] markers = javaProject.getProject().findMarkers(IJavaModelMarker.BUILDPATH_PROBLEM_MARKER, false, IResource.DEPTH_ONE); for (int i = 0; i < (markers.length); i++) { org.eclipse.core.resources.IMarker marker = markers[i]; java.lang.String cycleAttr = ((java.lang.String) (marker.getAttribute(IJavaModelMarker.CYCLE_DETECTED))); if ((cycleAttr != null) && (cycleAttr.equals(""true""))) { return true; } } return false; }",406a346a955860fec7d9c405dca0b64a7f6e54cd,"private static boolean hasCyclicDependency(org.eclipse.jdt.core.IJavaProject javaProject) throws org.eclipse.core.runtime.CoreException { org.eclipse.core.resources.IMarker[] markers = javaProject.getProject().findMarkers(IJavaModelMarker.BUILDPATH_PROBLEM_MARKER, false, IResource.DEPTH_ONE); for (int i = 0; i < (markers.length); i++) { org.eclipse.core.resources.IMarker marker = markers[i]; java.lang.String cycleAttr = ((java.lang.String) (marker.getAttribute(IJavaModelMarker.CYCLE_DETECTED))); if ((cycleAttr != null) && (cycleAttr.equals(""true""))) { return true; } } return false; }",61a3270023b802836d25840d16a350e24f0ded28,hasCyclicDependency(org.eclipse.jdt.core.IJavaProject),hasCyclicDependency(org.eclipse.jdt.core.IJavaProject),8,9,"private static boolean hasCyclicDependency(org.eclipse.jdt.core.IJavaProject javaProject) throws org.eclipse.core.runtime.CoreException { org.eclipse.core.resources.IMarker[] markers = javaProject.getProject().findMarkers(IJavaModelMarker.BUILDPATH_PROBLEM_MARKER, false, IResource.DEPTH_ONE); for (org.eclipse.core.resources.IMarker marker : markers) { java.lang.String cycleAttr = ((java.lang.String) (marker.getAttribute(IJavaModelMarker.CYCLE_DETECTED))); if ((cycleAttr != null) && (cycleAttr.equals(""true""))) { return true; } } return false; }",701aca8afd28d97467621bdab51e056560b7ec50,hasCyclicDependency(org.eclipse.jdt.core.IJavaProject),424808,166,151
22841,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_UpdaterWindowImpl2.java,5.0,"public void onPreferencesMenuSelected() { org.eclipse.jface.dialogs.MessageDialog.openInformation(mShell, ""test"", ""on prefs""); }",1e55ff398253380eeaf09cce7833554559667bd9,public void onPreferencesMenuSelected() { showRegisteredPage(UpdaterPage.PURPOSE_SETTINGS); },9fc65f2ae30c6b31b6070b075e4be4d0d6d21219,onPreferencesMenuSelected(),onPreferencesMenuSelected(),3,8,public void onPreferencesMenuSelected() { showRegisteredPage(Purpose.SETTINGS); },a458538b3623d4049b65c7e31ddab94099b89ecc,onPreferencesMenuSelected(),413450,22,17
59526,luni_src_test_java_libcore_javax_crypto_SecretKeyFactoryTest.java,6.0,"public void test_PBKDF2_rfc3211_192() throws java.lang.Exception { char[] password = (""All n-entities must communicate with other "" + ""n-entities via n-1 entiteeheehees"").toCharArray(); byte[] salt = new byte[]{ ((byte) (18)), ((byte) (52)), ((byte) (86)), ((byte) (120)), ((byte) (120)), ((byte) (86)), ((byte) (52)), ((byte) (18)) }; int iterations = 500; int keyLength = 192; byte[] expected = new byte[]{ ((byte) (106)), ((byte) (137)), ((byte) (112)), ((byte) (191)), ((byte) (104)), ((byte) (201)), ((byte) (44)), ((byte) (174)), ((byte) (168)), ((byte) (74)), ((byte) (141)), ((byte) (242)), ((byte) (133)), ((byte) (16)), ((byte) (133)), ((byte) (134)), ((byte) (7)), ((byte) (18)), ((byte) (99)), ((byte) (128)), ((byte) (204)), ((byte) (71)), ((byte) (171)), ((byte) (45)) }; test_PBKDF2(password, salt, iterations, keyLength, expected); }",84c86b03e31cb21aee18e6a25c734a68ff9d0ae9,"public void test_PBKDF2_rfc3211_192() throws java.lang.Exception { char[] password = (""All n-entities must communicate with other "" + ""n-entities via n-1 entiteeheehees"").toCharArray(); byte[] salt = new byte[]{ ((byte) (18)), ((byte) (52)), ((byte) (86)), ((byte) (120)), ((byte) (120)), ((byte) (86)), ((byte) (52)), ((byte) (18)) }; int iterations = 500; int keyLength = 192; byte[] expected = new byte[]{ ((byte) (106)), ((byte) (137)), ((byte) (112)), ((byte) (191)), ((byte) (104)), ((byte) (201)), ((byte) (44)), ((byte) (174)), ((byte) (168)), ((byte) (74)), ((byte) (141)), ((byte) (242)), ((byte) (133)), ((byte) (16)), ((byte) (133)), ((byte) (134)), ((byte) (7)), ((byte) (18)), ((byte) (99)), ((byte) (128)), ((byte) (204)), ((byte) (71)), ((byte) (171)), ((byte) (45)) }; test_PBKDF2(password, salt, iterations, keyLength, expected); test_BrokenPBKDF2(password, salt, iterations, keyLength, expected); }",75eed239098acbe8d68a1ae1c9e04786c7689097,test_PBKDF2_rfc3211_192(),test_PBKDF2_rfc3211_192(),3,6,"public void test_PBKDF2_rfc3211_192() throws java.lang.Exception { char[] password = (""All n-entities must communicate with other "" + ""n-entities via n-1 entiteeheehees"").toCharArray(); byte[] salt = new byte[]{ ((byte) (18)), ((byte) (52)), ((byte) (86)), ((byte) (120)), ((byte) (120)), ((byte) (86)), ((byte) (52)), ((byte) (18)) }; int iterations = 500; int keyLength = 192; byte[] expected = new byte[]{ ((byte) (106)), ((byte) (137)), ((byte) (112)), ((byte) (191)), ((byte) (104)), ((byte) (201)), ((byte) (44)), ((byte) (174)), ((byte) (168)), ((byte) (74)), ((byte) (141)), ((byte) (242)), ((byte) (133)), ((byte) (16)), ((byte) (133)), ((byte) (134)), ((byte) (7)), ((byte) (18)), ((byte) (99)), ((byte) (128)), ((byte) (204)), ((byte) (71)), ((byte) (171)), ((byte) (45)) }; test_PBKDF2_UTF8(password, salt, iterations, keyLength, expected); test_PBKDF2_8BIT(password, salt, iterations, keyLength, expected); }",9e3c7e6f1ffeedca53da5b2408a3b9b58543d20f,test_PBKDF2_rfc3211_192(),108047,369,373
151030,tests_tests_tv_src_android_media_tv_cts_TvContractTest.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testProgramsGenresDecode() { java.util.List genres = java.util.Arrays.asList(android.media.tv.TvContract.Programs.Genres.decode(android.media.tv.cts.TvContractTest.ENCODED_GENRE_STRING)); assertTrue(genres.contains(Genres.ANIMAL_WILDLIFE)); assertTrue(genres.contains(Genres.COMEDY)); assertTrue(genres.contains(Genres.DRAMA)); assertTrue(genres.contains(Genres.EDUCATION)); assertTrue(genres.contains(Genres.FAMILY_KIDS)); assertTrue(genres.contains(Genres.GAMING)); assertTrue(genres.contains(Genres.MOVIES)); assertTrue(genres.contains(Genres.NEWS)); assertTrue(genres.contains(Genres.SHOPPING)); assertTrue(genres.contains(Genres.SPORTS)); assertTrue(genres.contains(Genres.TRAVEL)); assertFalse(genres.contains("","")); }",8a7bc73dcc800e9a97db32efe17d7130d203eba0,,testProgramsGenresDecode(),4,18,"public void testProgramsGenresDecode() { if (!(android.media.tv.cts.Utils.hasTvInputFramework(getContext()))) { return; } java.util.List genres = java.util.Arrays.asList(android.media.tv.TvContract.Programs.Genres.decode(android.media.tv.cts.TvContractTest.ENCODED_GENRE_STRING)); assertEquals(11, genres.size()); assertTrue(genres.contains(Genres.ANIMAL_WILDLIFE)); assertTrue(genres.contains(Genres.COMEDY)); assertTrue(genres.contains(Genres.DRAMA)); assertTrue(genres.contains(Genres.EDUCATION)); assertTrue(genres.contains(Genres.FAMILY_KIDS)); assertTrue(genres.contains(Genres.GAMING)); assertTrue(genres.contains(Genres.MOVIES)); assertTrue(genres.contains(Genres.NEWS)); assertTrue(genres.contains(Genres.SHOPPING)); assertTrue(genres.contains(Genres.SPORTS)); assertTrue(genres.contains(Genres.TRAVEL)); assertFalse(genres.contains("","")); }",a67f6c21af827b8ca3d872a1edc9ebb4643e8613,testProgramsGenresDecode(),36912,233,265
113353,jack_src_com_android_jack_library_JackLibraryFactory.java,5.0,"@javax.annotation.Nonnull private static java.lang.Object instantiateConstructorWithParameters(@javax.annotation.Nonnull com.android.sched.vfs.InputRootVDir vdir, @javax.annotation.Nonnull java.lang.String className, @javax.annotation.Nonnull java.lang.Class<?>[] parameterTypes, @javax.annotation.Nonnull java.lang.Object[] parameterInstances, @javax.annotation.Nonnull java.lang.String version) throws com.android.jack.library.LibraryVersionException { java.lang.Object constructorInstance = null; try { java.lang.Class<?> libraryReaderClass = java.lang.Class.forName(className); java.lang.reflect.Constructor<?> constructor = libraryReaderClass.getConstructor(parameterTypes); constructorInstance = constructor.newInstance(parameterInstances); } catch (java.lang.SecurityException e) { throw new java.lang.AssertionError(); } catch (java.lang.IllegalArgumentException e) { throw new java.lang.AssertionError((""Illegal argument for library constructor for version "" + version)); } catch (java.lang.ClassNotFoundException e) { throw new com.android.jack.library.LibraryVersionException((((""Library "" + vdir) + "" has an unsupported version "") + version)); } catch (java.lang.NoSuchMethodException e) { throw new java.lang.AssertionError((""Library constructor not found for version "" + version)); } catch (java.lang.InstantiationException e) { throw new java.lang.AssertionError((""Problem instantiating a library for version "" + version)); } catch (java.lang.IllegalAccessException e) { throw new java.lang.AssertionError((""Problem accessing library constructor for version "" + version)); } catch (java.lang.reflect.InvocationTargetException e) { throw new java.lang.RuntimeException(e.getCause()); } return constructorInstance; }",6ed5f8b1e3ae47096ff7814fbb940b90b385edec,"@javax.annotation.Nonnull private static java.lang.Object instantiateConstructorWithParameters(@javax.annotation.Nonnull com.android.sched.vfs.InputRootVDir vdir, @javax.annotation.Nonnull java.lang.String className, @javax.annotation.Nonnull java.lang.Class<?>[] parameterTypes, @javax.annotation.Nonnull java.lang.Object[] parameterInstances, @javax.annotation.Nonnull java.lang.String version) throws com.android.jack.library.LibraryVersionException { java.lang.Object constructorInstance = null; try { java.lang.Class<?> libraryReaderClass = java.lang.Class.forName(className); java.lang.reflect.Constructor<?> constructor = libraryReaderClass.getConstructor(parameterTypes); constructorInstance = constructor.newInstance(parameterInstances); } catch (java.lang.SecurityException e) { throw new java.lang.AssertionError(); } catch (java.lang.IllegalArgumentException e) { throw new java.lang.AssertionError((""Illegal argument for library constructor for version "" + version)); } catch (java.lang.ClassNotFoundException e) { throw new com.android.jack.library.LibraryVersionException((((""Library "" + vdir) + "" has an unsupported version "") + version)); } catch (java.lang.NoSuchMethodException e) { throw new java.lang.AssertionError((""Library constructor not found for version "" + version)); } catch (java.lang.InstantiationException e) { throw new java.lang.AssertionError((""Problem instantiating a library for version "" + version)); } catch (java.lang.IllegalAccessException e) { throw new java.lang.AssertionError((""Problem accessing library constructor for version "" + version)); } catch (java.lang.reflect.InvocationTargetException e) { if ((e.getCause()) instanceof com.android.jack.library.LibraryFormatException) { throw ((com.android.jack.library.LibraryFormatException) (e.getCause())); } else if ((e.getCause()) instanceof java.lang.RuntimeException) { throw ((java.lang.RuntimeException) (e.getCause())); } else if ((e.getCause()) instanceof java.lang.Error) { throw ((java.lang.Error) (e.getCause())); } throw new java.lang.AssertionError(e); } return constructorInstance; }",4b07e6b83cebc4f88c34c2f1e95f66da1e5d9d65,"instantiateConstructorWithParameters(com.android.sched.vfs.InputRootVDir,java.lang.String,java.lang.Class[],java.lang.Object[],java.lang.String)","instantiateConstructorWithParameters(com.android.sched.vfs.InputRootVDir,java.lang.String,java.lang.Class[],java.lang.Object[],java.lang.String)",2,5,"@javax.annotation.Nonnull private static java.lang.Object instantiateConstructorWithParameters(@javax.annotation.Nonnull com.android.sched.vfs.InputRootVDir vdir, @javax.annotation.Nonnull java.lang.String className, @javax.annotation.Nonnull java.lang.Class<?>[] parameterTypes, @javax.annotation.Nonnull java.lang.Object[] parameterInstances, @javax.annotation.Nonnull java.lang.String version) throws com.android.jack.library.LibraryVersionException { java.lang.Object constructorInstance = null; try { java.lang.Class<?> libraryReaderClass = java.lang.Class.forName(className); java.lang.reflect.Constructor<?> constructor = libraryReaderClass.getConstructor(parameterTypes); constructorInstance = constructor.newInstance(parameterInstances); } catch (java.lang.SecurityException e) { throw new java.lang.AssertionError(); } catch (java.lang.IllegalArgumentException e) { throw new java.lang.AssertionError((""Illegal argument for library constructor for version "" + version)); } catch (java.lang.ClassNotFoundException e) { throw new com.android.jack.library.LibraryVersionException((((""Library "" + vdir) + "" has an unsupported version "") + version)); } catch (java.lang.NoSuchMethodException e) { throw new java.lang.AssertionError((""Library constructor not found for version "" + version)); } catch (java.lang.InstantiationException e) { throw new java.lang.AssertionError((""Problem instantiating a library for version "" + version)); } catch (java.lang.IllegalAccessException e) { throw new java.lang.AssertionError((""Problem accessing library constructor for version "" + version)); } catch (java.lang.reflect.InvocationTargetException e) { java.lang.Throwable cause = e.getCause(); if (cause instanceof com.android.jack.library.LibraryFormatException) { throw ((com.android.jack.library.LibraryFormatException) (cause)); } else if (cause instanceof java.lang.RuntimeException) { throw ((java.lang.RuntimeException) (cause)); } else if (cause instanceof java.lang.Error) { throw ((java.lang.Error) (cause)); } throw new java.lang.AssertionError(cause); } return constructorInstance; }",0fc2eb55667ced864099b97ae9b54c908e9db868,"instantiateConstructorWithParameters(com.android.sched.vfs.InputRootVDir,java.lang.String,java.lang.Class[],java.lang.Object[],java.lang.String)",521940,488,481
97181,legacy_ant-tasks_src_main_java_com_android_ant_DexExecTask.java,9.0,"private java.lang.String getDexFileName(java.io.File inputFile) { java.lang.String name = inputFile.getName(); int pos = name.lastIndexOf('.'); if (pos != (-1)) { name = name.substring(0, pos); } com.google.common.hash.HashFunction hashFunction = com.google.common.hash.Hashing.md5(); com.google.common.hash.HashCode hashCode = hashFunction.hashString(inputFile.getAbsolutePath()); return ((name + ""-"") + (hashCode.toString())) + "".jar""; }",9ed008dd3c9adc8294f600ff8fbd7e0b945a8ea3,"private java.lang.String getDexFileName(java.io.File inputFile) { java.lang.String name = inputFile.getName(); int pos = name.lastIndexOf('.'); if (pos != (-1)) { name = name.substring(0, pos); } com.google.common.hash.HashFunction hashFunction = com.google.common.hash.Hashing.md5(); com.google.common.hash.HashCode hashCode = hashFunction.hashUnencodedChars(inputFile.getAbsolutePath()); return ((name + ""-"") + (hashCode.toString())) + "".jar""; }",6f8a8ba5bc1b81fe89b53d0dd65e8c3c100980cd,getDexFileName(java.io.File),getDexFileName(java.io.File),7,9,"private java.lang.String getDexFileName(java.io.File inputFile) { java.lang.String name = inputFile.getName(); int pos = name.lastIndexOf('.'); if (pos != (-1)) { name = name.substring(0, pos); } com.google.common.hash.HashFunction hashFunction = com.google.common.hash.Hashing.md5(); com.google.common.hash.HashCode hashCode = hashFunction.hashString(inputFile.getAbsolutePath(), Charsets.UTF_16LE); return ((name + ""-"") + (hashCode.toString())) + "".jar""; }",c952cac51fa7970ce9f83e9a1a201e956092f543,getDexFileName(java.io.File),35031,123,129
513800,src_main_java_com_android_apksig_internal_util_ChainedDataSource.java,,,,"@java.lang.Override public com.android.apksig.util.DataSource slice(long offset, long size) { throw new java.lang.UnsupportedOperationException(""Not implemented""); }",a51802cf812f16177043030f745082cad5ca669d,,"slice(long,long)",5,5,"@java.lang.Override public com.android.apksig.util.DataSource slice(long offset, long size) { com.android.apksig.internal.util.Pair<java.lang.Integer, java.lang.Long> firstSource = locateDataSource(offset); int beginIndex = firstSource.getFirst(); long beginLocalOffset = firstSource.getSecond(); com.android.apksig.util.DataSource beginSource = mSources[beginIndex]; if ((beginLocalOffset + size) <= (beginSource.size())) { return beginSource.slice(beginLocalOffset, size); } java.util.ArrayList<com.android.apksig.util.DataSource> sources = new java.util.ArrayList<>(); sources.add(beginSource.slice(beginLocalOffset, ((beginSource.size()) - beginLocalOffset))); com.android.apksig.internal.util.Pair<java.lang.Integer, java.lang.Long> lastSource = locateDataSource((offset + size)); int endIndex = lastSource.getFirst(); long endLocalOffset = lastSource.getSecond(); for (int i = beginIndex + 1; i < (endIndex - 1); i++) { sources.add(mSources[i]); } sources.add(mSources[endIndex].slice(0, endLocalOffset)); return new com.android.apksig.internal.util.ChainedDataSource(sources.toArray(new com.android.apksig.util.DataSource[0])); }",5f289f61d38164f887bd24f5c0f69b3eb7e124f6,"slice(long,long)",377652,39,305
591861,telephony_java_android_telephony_CellInfo.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public int getCellConnectionStatus() { return mCellConnectionStatus; },9e88413fea43c11ce0151352dd448d68b3c48737,,getCellConnectionStatus(),10,9,@android.telephony.CellInfo.CellConnectionStatus public int getCellConnectionStatus() { return mCellConnectionStatus; },577d644518a0ab845f09ddee894030a889963fcc,getCellConnectionStatus(),327778,15,26
639000,src_com_android_bluetooth_hearingaid_HearingAidService.java,31.0,"java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); return new java.util.ArrayList<>(); }",4d6d33037aaf1f8aedbc03af6e3a7f098de45a2e,"java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); java.util.Set<android.bluetooth.BluetoothDevice> bondedDevices = mAdapter.getBondedDevices(); for (android.bluetooth.BluetoothDevice device : bondedDevices) { android.os.ParcelUuid[] featureUuids = device.getUuids(); if (!(android.bluetooth.BluetoothUuid.isUuidPresent(featureUuids, BluetoothUuid.HearingAid))) { continue; } int connectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm != null) { connectionState = sm.getConnectionState(); } for (int i = 0; i < (states.length); i++) { if (connectionState == (states[i])) { devices.add(device); } } } return devices; } }",e9c3edf313813b6168a3e7d59b6146b812754b23,getDevicesMatchingConnectionStates(int[]),getDevicesMatchingConnectionStates(int[]),17,31,"java.util.List<android.bluetooth.BluetoothDevice> getDevicesMatchingConnectionStates(int[] states) { enforceCallingOrSelfPermission(com.android.bluetooth.hearingaid.BLUETOOTH_PERM, ""Need BLUETOOTH permission""); synchronized(mStateMachines) { java.util.List<android.bluetooth.BluetoothDevice> devices = new java.util.ArrayList<>(); java.util.Set<android.bluetooth.BluetoothDevice> bondedDevices = mAdapter.getBondedDevices(); for (android.bluetooth.BluetoothDevice device : bondedDevices) { android.os.ParcelUuid[] featureUuids = device.getUuids(); if (!(android.bluetooth.BluetoothUuid.isUuidPresent(featureUuids, BluetoothUuid.HearingAid))) { continue; } int connectionState = android.bluetooth.BluetoothProfile.STATE_DISCONNECTED; com.android.bluetooth.hearingaid.HearingAidStateMachine sm = mStateMachines.get(device); if (sm != null) { connectionState = sm.getConnectionState(); } for (int state : states) { if (connectionState == state) { devices.add(device); } } } return devices; } }",f2cabab619429afabf073672c9bce65fd7607ad1,getDevicesMatchingConnectionStates(int[]),484510,274,256
503001,src_java_com_android_ims_ImsUt.java,28.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onSupplementaryServiceIndication(com.android.ims.ImsSsData ssData) { if ((mSsIndicationRegistrant) != null) { mSsIndicationRegistrant.notifyRegistrant(new android.os.AsyncResult(null, ssData, null)); } }",04784771af9c902023cf8e5b208a5b7a3ed65949,,onSupplementaryServiceIndication(com.android.ims.ImsSsData),5,23,@java.lang.Override public void onSupplementaryServiceIndication(com.android.ims.ImsSsData ssData) { if ((mSsIndicationRegistrant) != null) { mSsIndicationRegistrant.notifyResult(ssData); } },a1f404332e15c16c2bebd800555c764e941bc59f,onSupplementaryServiceIndication(com.android.ims.ImsSsData),202838,78,65
202924,test_570-checker-osr_src_Main.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static native void ensureOsrCode();,7daf9a955c3181a0799ffeb9a20af3ab0e02a5ce,,ensureOsrCode(),4,4,public static native void ensureHasOsrCode();,4a77fda6dd58449a2f7feee87b83d5024ce4497a,ensureHasOsrCode(),53906,10,11
303277,dx_src_com_android_jack_dx_rop_cst_CstMethodHandleRef.java,,,,@java.lang.Override public final int hashCode() { return ((getKind().hashCode()) * 31) ^ (getMemberRef().hashCode()); },1f09bd721e1c6dec8f2c6bf1c45cf15305e66898,,hashCode(),5,6,@java.lang.Override public final int hashCode() { return ((kind.hashCode()) * 31) ^ (memberRef.hashCode()); },8097f32161a499c425b93e335647212917f2d5b8,hashCode(),74267,31,31
352844,hostsidetests_services_activitymanager_src_android_server_cts_ActivityManagerConfigChangeTests.java,0.0,"private void testRotation(java.lang.String activityName, int rotationStep, int numRelaunch, int numConfigChange) throws java.lang.Exception { executeShellCommand(getAmStartCmd(activityName)); final java.lang.String[] waitForActivitiesVisible = new java.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); mAmWmState.assertContainsStack(""Must contain fullscreen stack."", android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); setDeviceRotation((4 - rotationStep)); mAmWmState.computeState(mDevice, waitForActivitiesVisible); for (int rotation = 0; rotation < 4; rotation += rotationStep) { clearLogcat(); setDeviceRotation(rotation); mAmWmState.computeState(mDevice, waitForActivitiesVisible); assertRelaunchOrConfigChanged(activityName, numRelaunch, numConfigChange); } }",d3b8efe9dca6160ebfcfba50e1bce60869d04162,"private void testRotation(java.lang.String activityName, int rotationStep, int numRelaunch, int numConfigChange) throws java.lang.Exception { executeShellCommand(getAmStartCmd(activityName)); final java.lang.String[] waitForActivitiesVisible = new java.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); android.server.cts.ActivityManagerState mAmState = mAmWmState.getAmState(); android.server.cts.WindowManagerState mWmState = mAmWmState.getWmState(); if ((mAmState.containsStack(android.server.cts.FREEFORM_WORKSPACE_STACK_ID)) && (mWmState.containsStack(android.server.cts.FREEFORM_WORKSPACE_STACK_ID))) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, ""Skipping test: no rotation support""); return; } setDeviceRotation((4 - rotationStep)); mAmWmState.computeState(mDevice, waitForActivitiesVisible); for (int rotation = 0; rotation < 4; rotation += rotationStep) { clearLogcat(); setDeviceRotation(rotation); mAmWmState.computeState(mDevice, waitForActivitiesVisible); assertRelaunchOrConfigChanged(activityName, numRelaunch, numConfigChange); } }",c6dd28e240aa0f773e35fe847928ef398e94d3fe,"testRotation(java.lang.String,int,int,int)","testRotation(java.lang.String,int,int,int)",6,0,"private void testRotation(java.lang.String activityName, int rotationStep, int numRelaunch, int numConfigChange) throws java.lang.Exception { executeShellCommand(getAmStartCmd(activityName)); final java.lang.String[] waitForActivitiesVisible = new java.lang.String[]{ activityName }; mAmWmState.computeState(mDevice, waitForActivitiesVisible); final int initialRotation = 4 - rotationStep; setDeviceRotation(initialRotation); mAmWmState.computeState(mDevice, waitForActivitiesVisible); final int actualStackId = mAmWmState.getAmState().getTaskByActivityName(activityName).mStackId; final int displayId = mAmWmState.getAmState().getStackById(actualStackId).mDisplayId; final int newDeviceRotation = getDeviceRotation(displayId); if (newDeviceRotation == (INVALID_DEVICE_ROTATION)) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.WARN, (""Got an invalid device rotation value. "" + ""Continuing the test despite of that, but it is likely to fail."")); } else if (newDeviceRotation != initialRotation) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, (""This device doesn't support user rotation "" + ""mode. Not continuing the rotation checks."")); return; } for (int rotation = 0; rotation < 4; rotation += rotationStep) { clearLogcat(); setDeviceRotation(rotation); mAmWmState.computeState(mDevice, waitForActivitiesVisible); assertRelaunchOrConfigChanged(activityName, numRelaunch, numConfigChange); } }",47da8c12d85a43cc3249794bb53857216ff4e5b2,"testRotation(java.lang.String,int,int,int)",32819,308,376
419399,src_com_android_server_telecom_CallAudioRouteStateMachine.java,37.0,@java.lang.Override public boolean processMessage(android.os.Message msg) { if ((super.processMessage(msg)) == (HANDLED)) { return HANDLED; } switch (msg.what) { case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_WIRED_HEADSET : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_HEADSET); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_BLUETOOTH : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BASELINE_ROUTE); mWasOnSpeaker = false; return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_WIRED_HEADSET : updateSystemAudioState(); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_DOCK : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_DOCK : return HANDLED; default : return NOT_HANDLED; } },440971ea899e35d51e851e937c6f3b0975cf2085,"@java.lang.Override public boolean processMessage(android.os.Message msg) { if ((super.processMessage(msg)) == (HANDLED)) { return HANDLED; } switch (msg.what) { case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_WIRED_HEADSET : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_HEADSET); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_BLUETOOTH : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BASELINE_ROUTE, 0); mWasOnSpeaker = false; return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_WIRED_HEADSET : updateSystemAudioState(); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_DOCK : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_DOCK : return HANDLED; default : return NOT_HANDLED; } }",c9396c96eb925398dcc3410d3b6a031a1fefa0e1,processMessage(android.os.Message),processMessage(android.os.Message),3,37,"@java.lang.Override public boolean processMessage(android.os.Message msg) { if ((super.processMessage(msg)) == (HANDLED)) { return HANDLED; } switch (msg.what) { case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_WIRED_HEADSET : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_HEADSET); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_BLUETOOTH : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_BLUETOOTH : sendInternalMessage(com.android.server.telecom.CallAudioRouteStateMachine.SWITCH_BASELINE_ROUTE, com.android.server.telecom.CallAudioRouteStateMachine.NO_INCLUDE_BLUETOOTH_IN_BASELINE); mWasOnSpeaker = false; return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_WIRED_HEADSET : updateSystemAudioState(); return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.CONNECT_DOCK : return HANDLED; case com.android.server.telecom.CallAudioRouteStateMachine.DISCONNECT_DOCK : return HANDLED; default : return NOT_HANDLED; } }",a97ee0623a615e334489b8ce4a235a39c3e926bc,processMessage(android.os.Message),118695,297,324
241967,jack_src_com_android_jack_optimizations_inlining_InlineMarker.java,,,,public com.android.jack.ir.ast.JMethod getTarget() { return target; },912d0e6871ed1c0fd1a8f8408d062b4f78bd5ed3,,getTarget(),28,1,@javax.annotation.Nonnull public com.android.jack.ir.ast.JMethod getTarget() { return target; },c3346d08996dc15b5d45598577d1fd8a549c2720,getTarget(),487207,21,27
505857,services_core_java_com_android_server_connectivity_IpConnectivityEventBuilder.java,17.0,"private static void setDefaultNetworkEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent out, android.net.metrics.DefaultNetworkEvent in) { com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.DefaultNetworkEvent defaultNetworkEvent = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.DefaultNetworkEvent(); defaultNetworkEvent.networkId = com.android.server.connectivity.IpConnectivityEventBuilder.netIdOf(in.netId); defaultNetworkEvent.previousNetworkId = com.android.server.connectivity.IpConnectivityEventBuilder.netIdOf(in.prevNetId); defaultNetworkEvent.transportTypes = in.transportTypes; defaultNetworkEvent.previousNetworkIpSupport = com.android.server.connectivity.IpConnectivityEventBuilder.ipSupportOf(in); out.setDefaultNetworkEvent(defaultNetworkEvent); }",c1fd43a23e66e8b953ca3afe79882db2d9605caa,"public static com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent toProto(android.net.metrics.DefaultNetworkEvent in) { com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.DefaultNetworkEvent ev = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.DefaultNetworkEvent(); ev.finalScore = in.finalScore; ev.initialScore = in.initialScore; ev.ipSupport = com.android.server.connectivity.IpConnectivityEventBuilder.ipSupportOf(in); if ((in.netId) != (android.net.ConnectivityManager.NETID_UNSET)) { ev.defaultNetworkDurationMs = in.durationMs; ev.noDefaultNetworkDurationMs = 0; } else { ev.defaultNetworkDurationMs = 0; ev.noDefaultNetworkDurationMs = in.durationMs; } ev.validationDurationMs = in.validatedMs; ev.previousDefaultNetworkLinkLayer = com.android.server.connectivity.IpConnectivityEventBuilder.transportsToLinkLayer(in.previousTransports); final com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent out = com.android.server.connectivity.IpConnectivityEventBuilder.buildEvent(in.netId, in.transports, null); out.setDefaultNetworkEvent(ev); return out; }",251879f91a8b5158e54c2f75d5e258007ce261ba,"setDefaultNetworkEvent(com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent,android.net.metrics.DefaultNetworkEvent)",toProto(android.net.metrics.DefaultNetworkEvent),22,4,"public static com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent toProto(android.net.metrics.DefaultNetworkEvent in) { com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.DefaultNetworkEvent ev = new com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.DefaultNetworkEvent(); ev.finalScore = in.finalScore; ev.initialScore = in.initialScore; ev.ipSupport = com.android.server.connectivity.IpConnectivityEventBuilder.ipSupportOf(in); ev.defaultNetworkDurationMs = in.durationMs; ev.validationDurationMs = in.validatedMs; ev.previousDefaultNetworkLinkLayer = com.android.server.connectivity.IpConnectivityEventBuilder.transportsToLinkLayer(in.previousTransports); final com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent out = com.android.server.connectivity.IpConnectivityEventBuilder.buildEvent(in.netId, in.transports, null); if ((in.transports) == 0) { out.linkLayer = com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.NONE; } out.setDefaultNetworkEvent(ev); return out; }",9fc98ac4aed217b8c3dc142eed42d1fcf8209271,toProto(android.net.metrics.DefaultNetworkEvent),244243,308,288
623704,tests_unit_src_com_android_bluetooth_hfp_HeadsetServiceAndStateMachineTest.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void startVoiceRecognitionFromHf(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.hfp.HeadsetStackEvent startVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STARTED, device); mHeadsetService.messageFromNative(startVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).activateVoiceRecognition(); mHeadsetService.startVoiceRecognition(device); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters(""A2dpSuspended=true""); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_OK, 0); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectAudio(device); verifyNoMoreInteractions(mNativeInterface, after(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)); }",eef007d6be39272b222eeb65c1e4c75d71a3ca05,,startVoiceRecognitionFromHf(android.bluetooth.BluetoothDevice),36,22,"private void startVoiceRecognitionFromHf(android.bluetooth.BluetoothDevice device) { com.android.bluetooth.hfp.HeadsetStackEvent startVrEvent = new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_VR_STATE_CHANGED, HeadsetHalConstants.VR_STATE_STARTED, device); mHeadsetService.messageFromNative(startVrEvent); verify(mSystemInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).activateVoiceRecognition(); org.junit.Assert.assertTrue(mHeadsetService.startVoiceRecognition(device)); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).atResponseCode(device, HeadsetHalConstants.AT_RESPONSE_OK, 0); verify(mAudioManager, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).setParameters(""A2dpSuspended=true""); verify(mNativeInterface, timeout(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS)).connectAudio(device); waitAndVerifyAudioStateIntent(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS, device, BluetoothHeadset.STATE_AUDIO_CONNECTING, BluetoothHeadset.STATE_AUDIO_DISCONNECTED); mHeadsetService.messageFromNative(new com.android.bluetooth.hfp.HeadsetStackEvent(HeadsetStackEvent.EVENT_TYPE_AUDIO_STATE_CHANGED, HeadsetHalConstants.AUDIO_STATE_CONNECTED, device)); waitAndVerifyAudioStateIntent(com.android.bluetooth.hfp.HeadsetServiceAndStateMachineTest.ASYNC_CALL_TIMEOUT_MILLIS, device, BluetoothHeadset.STATE_AUDIO_CONNECTED, BluetoothHeadset.STATE_AUDIO_CONNECTING); verifyNoMoreInteractions(mNativeInterface); }",382a70dd94703042c5740659e67f49974b8d48bd,startVoiceRecognitionFromHf(android.bluetooth.BluetoothDevice),10681,311,455
114532,dx_src_com_android_dx_command_dexer_Main.java,38.0,private static void createDexFile() { if ((com.android.dx.command.dexer.Main.outputDex) != null) { com.android.dx.command.dexer.Main.dexOutputArrays.add(com.android.dx.command.dexer.Main.writeDex()); } com.android.dx.command.dexer.Main.outputDex = new com.android.dx.dex.file.DexFile(com.android.dx.command.dexer.Main.args.dexOptions); if ((com.android.dx.command.dexer.Main.args.dumpWidth) != 0) { com.android.dx.command.dexer.Main.outputDex.setDumpWidth(com.android.dx.command.dexer.Main.args.dumpWidth); } },56db8360e0c0bb300d3f979110c26a601ce623cd,private static void createDexFile() { final com.android.dx.dex.file.DexFile toWrite = com.android.dx.command.dexer.Main.outputDex; com.android.dx.command.dexer.Main.outputDex = new com.android.dx.dex.file.DexFile(com.android.dx.command.dexer.Main.args.dexOptions); if ((com.android.dx.command.dexer.Main.args.dumpWidth) != 0) { com.android.dx.command.dexer.Main.outputDex.setDumpWidth(com.android.dx.command.dexer.Main.args.dumpWidth); } if (toWrite != null) { if ((com.android.dx.command.dexer.Main.dexOutPool) != null) { com.android.dx.command.dexer.Main.dexOutputFutures.add(com.android.dx.command.dexer.Main.dexOutPool.submit(new com.android.dx.command.dexer.Main.DexWriter(toWrite))); } else { com.android.dx.command.dexer.Main.dexOutputArrays.add(com.android.dx.command.dexer.Main.writeDex(toWrite)); } } },3b611b6e92e63699c4760c53279178e29dd50ccf,createDexFile(),createDexFile(),6,30,private static void createDexFile() { com.android.dx.command.dexer.Main.outputDex = new com.android.dx.dex.file.DexFile(com.android.dx.command.dexer.Main.args.dexOptions); if ((com.android.dx.command.dexer.Main.args.dumpWidth) != 0) { com.android.dx.command.dexer.Main.outputDex.setDumpWidth(com.android.dx.command.dexer.Main.args.dumpWidth); } },cd13f1bf060c9cd205fbd62b9844eda74ada9a14,createDexFile(),237077,286,120
452581,harnesses_tradefed_src_com_android_tradefed_targetprep_VtsSancovPreparer.java,,,,"@java.lang.Override public void tearDown(com.android.tradefed.device.ITestDevice device, com.android.tradefed.build.IBuildInfo buildInfo, java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { if ((mCoverageDirectory) != null) { com.android.tradefed.util.FileUtil.recursiveDelete(mCoverageDirectory); device.executeShellCommand((""rm -r "" + (com.android.tradefed.targetprep.VtsSancovPreparer.SANCOV_CONFIGURE_DST))); } }",3afe480e723e99eafed7d2260aec5bf1a41e55fd,,"tearDown(com.android.tradefed.device.ITestDevice,com.android.tradefed.build.IBuildInfo,java.lang.Throwable)",12,0,"@java.lang.Override public void tearDown(com.android.tradefed.device.ITestDevice device, com.android.tradefed.build.IBuildInfo buildInfo, java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { if ((mDeviceInfoPath) != null) { com.android.tradefed.util.FileUtil.recursiveDelete(mDeviceInfoPath); device.executeShellCommand((""rm -r "" + (com.android.tradefed.targetprep.VtsSancovPreparer.SANCOV_CONFIGURE_DST))); } }",b423e7d3e30b3a18a2dd755fef03bc8f42f7fe27,"tearDown(com.android.tradefed.device.ITestDevice,com.android.tradefed.build.IBuildInfo,java.lang.Throwable)",400195,139,141
91995,luni_src_main_java_android_os_Os.java,,,,"public static void tcsendbreak(java.io.FileDescriptor fd, int duration) throws android.os.ErrnoException { Libcore.os.tcsendbreak(fd, duration); }",b87d9760d3b93d0b3b0c141838b0b21609459924,,"tcsendbreak(java.io.FileDescriptor,int)",3,24,"public static void tcsendbreak(java.io.FileDescriptor fd, int duration) throws android.system.ErrnoException { Libcore.os.tcsendbreak(fd, duration); }",1fbe50888544cd504f54a864e48945bf18275386,"tcsendbreak(java.io.FileDescriptor,int)",170038,41,41
64584,perflib_src_main_java_com_android_tools_perflib_vmtrace_viz_CallHierarchyRenderer.java,1.0,private java.awt.Color getFontColor(com.android.tools.perflib.vmtrace.Call c) { com.android.tools.perflib.vmtrace.MethodInfo info = mTraceData.getMethod(c.getMethodId()); int percent = quantize(info.getInclusiveThreadPercent()); return getFontColor(percent); },ff700b853c764f4c81ed3cb9a9ba16a374fcc4b7,private java.awt.Color getFontColor(com.android.tools.perflib.vmtrace.Call c) { com.android.tools.perflib.vmtrace.MethodInfo info = mTraceData.getMethod(c.getMethodId()); int percent = quantize(computeThreadPercentage(info)); return getFontColor(percent); },4b95b7ace9d93b71a4ca4d73faa1bd81e09a86a5,getFontColor(com.android.tools.perflib.vmtrace.Call),getFontColor(com.android.tools.perflib.vmtrace.Call),4,1,"private java.awt.Color getFontColor(com.android.tools.perflib.vmtrace.Call c) { int percent = quantize(getDurationPercentage(c, EXCLUSIVE_TIME_SELECTOR)); return getFontColor(percent); }",51189b70eef73c0fe42776e881c9e3385387edb7,getFontColor(com.android.tools.perflib.vmtrace.Call),111423,73,54
144781,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_scope_GlobalScope.java,,,,"public java.lang.String getDefaultApkLocation() { return (((getBuildDir()) + ""/"") + (FD_OUTPUTS)) + ""/apk""; }",683f45d6a6a8c77b90b5e4d8159ae23dcb859980,,getDefaultApkLocation(),6,3,"@com.android.annotations.NonNull public java.lang.String getDefaultApkLocation() { return (((getBuildDir()) + ""/"") + (FD_OUTPUTS)) + ""/apk""; }",45e6df37bee3b5719a4f4ad89fad807d7c5bc743,getDefaultApkLocation(),337603,31,39
684867,src_com_android_bluetooth_btservice_ActiveDeviceManager.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean isWiredHeadset(android.media.AudioDeviceInfo deviceInfo) { switch (deviceInfo.getType()) { case android.media.AudioDeviceInfo.TYPE_WIRED_HEADSET : case android.media.AudioDeviceInfo.TYPE_WIRED_HEADPHONES : case android.media.AudioDeviceInfo.TYPE_USB_HEADSET : return true; default : break; } return false; },bff25af51cc493b7a844df2c0d1231a04b74b13d,,isWiredHeadset(android.media.AudioDeviceInfo),6,2,private boolean isWiredAudioHeadset(android.media.AudioDeviceInfo deviceInfo) { switch (deviceInfo.getType()) { case android.media.AudioDeviceInfo.TYPE_WIRED_HEADSET : case android.media.AudioDeviceInfo.TYPE_WIRED_HEADPHONES : case android.media.AudioDeviceInfo.TYPE_USB_HEADSET : return true; default : break; } return false; },5a213cf33386e1526b7457038a84f455c4d85e8e,isWiredAudioHeadset(android.media.AudioDeviceInfo),400722,95,96
342670,luni_src_test_java_libcore_java_net_InetAddressTest.java,39.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.String[][] validAddressesAndStringRepresentation() { return new java.lang.String[][]{ new java.lang.String[]{ ""::1.2.3.4"", ""/::1.2.3.4"" }, new java.lang.String[]{ ""::"", ""/::"" }, new java.lang.String[]{ ""1::0"", ""/1::"" }, new java.lang.String[]{ ""1::"", ""/1::"" }, new java.lang.String[]{ ""::1"", ""/::1"" }, new java.lang.String[]{ ""FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF"", ""/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"" }, new java.lang.String[]{ ""FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:255.255.255.255"", ""/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"" }, new java.lang.String[]{ ""0:0:0:0:0:0:0:0"", ""/::"" }, new java.lang.String[]{ ""0:0:0:0:0:0:0.0.0.0"", ""/::"" } }; }",025595012be6ff9ddf349d92928eb21cf85512d0,,validAddressesAndStringRepresentation(),4,42,"public static java.lang.String[][] validAddressesAndStringRepresentation() { return new java.lang.String[][]{ new java.lang.String[]{ ""::1.2.3.4"", ""/::1.2.3.4"" }, new java.lang.String[]{ ""::"", ""/::"" }, new java.lang.String[]{ ""1::0"", ""/1::"" }, new java.lang.String[]{ ""1::"", ""/1::"" }, new java.lang.String[]{ ""::1"", ""/::1"" }, new java.lang.String[]{ ""FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF"", ""/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"" }, new java.lang.String[]{ ""FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:255.255.255.255"", ""/ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"" }, new java.lang.String[]{ ""0:0:0:0:0:0:0:0"", ""/::"" }, new java.lang.String[]{ ""0:0:0:0:0:0:0.0.0.0"", ""/::"" } }; }",ba87838f20c41aaef5a1b9ec70784edc55deab32,validAddressesAndStringRepresentation(),137298,239,240
183639,android_icu4j_src_main_java_android_icu_text_QuantityFormatter.java,8.0,"public android.icu.text.QuantityFormatter.Builder add(java.lang.String variant, java.lang.String template) { ensureCapacity(); java.lang.Integer idx = android.icu.text.QuantityFormatter.INDEX_MAP.get(variant); if (idx == null) { throw new java.lang.IllegalArgumentException(variant); } android.icu.impl.SimplePatternFormatter newT = android.icu.impl.SimplePatternFormatter.compile(template); if ((newT.getPlaceholderCount()) > 1) { throw new java.lang.IllegalArgumentException((""Extra placeholders: "" + template)); } templates[idx.intValue()] = newT; return this; }",ae9a3c7d863cca8d3b23e4bd175fd13240e94878,"public android.icu.text.QuantityFormatter.Builder add(java.lang.CharSequence variant, java.lang.String template) { int idx = android.icu.text.QuantityFormatter.getPluralIndex(variant); if (idx < 0) { throw new java.lang.IllegalArgumentException(variant.toString()); } android.icu.impl.SimplePatternFormatter newT = android.icu.impl.SimplePatternFormatter.compile(template); if ((newT.getPlaceholderCount()) > 1) { throw new java.lang.IllegalArgumentException((""Extra placeholders: "" + template)); } ensureCapacity(); templates[idx] = newT; return this; }",90c57775e818f1309db0c61fa0fd7116eb36df20,"add(java.lang.String,java.lang.String)","add(java.lang.CharSequence,java.lang.String)",6,5,"public void addIfAbsent(java.lang.CharSequence variant, java.lang.String template) { addIfAbsent(variant, template, null); }",617a6d5f08011bfe2b87de285308ca1a6beb6a33,"addIfAbsent(java.lang.CharSequence,java.lang.String)",60282,139,30
64463,luni_src_main_java_libcore_icu_NativeDecimalFormat.java,31.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.String toString() { return ((((((((((((((((((((((((((""NDF["" + (toPattern())) + "" "") + (isDecimalSeparatorAlwaysShown())) + "" "") + (getGroupingSize())) + "" "") + (getMultiplier())) + "" "") + (getNegativePrefix())) + "" "") + (getNegativeSuffix())) + "" "") + (getPositivePrefix())) + "" "") + (getPositiveSuffix())) + "" "") + (getMaximumIntegerDigits())) + "" "") + (getMaximumFractionDigits())) + "" "") + (getMinimumIntegerDigits())) + "" "") + (getMinimumFractionDigits())) + "" "") + (isGroupingUsed())) + "" "") + ""]""; }",e459b8f8c8a9d6072616ac6e845f21f4a8f60b6e,,toString(),6,5,"public java.lang.String toString() { return ((((((((((((((((((((((((((((getClass().getName()) + ""[\"""") + (toPattern())) + ""\"""") + "",isDecimalSeparatorAlwaysShown="") + (isDecimalSeparatorAlwaysShown())) + "",groupingSize="") + (getGroupingSize())) + "",multiplier="") + (getMultiplier())) + "",negativePrefix="") + (getNegativePrefix())) + "",negativeSuffix="") + (getNegativeSuffix())) + "",positivePrefix="") + (getPositivePrefix())) + "",positiveSuffix="") + (getPositiveSuffix())) + "",maxIntegerDigits="") + (getMaximumIntegerDigits())) + "",maxFractionDigits="") + (getMaximumFractionDigits())) + "",minIntegerDigits="") + (getMinimumIntegerDigits())) + "",minFractionDigits="") + (getMinimumFractionDigits())) + "",grouping="") + (isGroupingUsed())) + ""]""; }",446a451bf785e2c3353d14d39a96ba23d28a3d03,toString(),115820,154,198
466677,core_java_android_net_IpSecTransform.java,0.0,int getResourceId() { return mResourceId; },5eb1d3aa3132f7364948a6d5e9ff07880e58f544,@com.android.internal.annotations.VisibleForTesting int getResourceId() { return mResourceId; },8ed1e95e7cddfa1e9957370bbb36bd175c69049e,getResourceId(),getResourceId(),17,0,@com.android.internal.annotations.VisibleForTesting public int getResourceId() { return mResourceId; },c09558c01a0538ec953de0372f8c81a700ee8845,getResourceId(),176191,21,22
71270,gradle_src_main_groovy_com_android_build_gradle_internal_LintGradleProject.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.android.annotations.NonNull @java.lang.Override public java.util.List<java.io.File> getJavaClassFolders() { if ((mJavaClassFolders) == null) { mJavaClassFolders = new java.util.ArrayList<java.io.File>(1); java.io.File outputClassFolder = mVariant.getMainArtifactInfo().getClassesFolder(); if ((outputClassFolder != null) && (outputClassFolder.exists())) { mJavaClassFolders.add(outputClassFolder); } } return mJavaClassFolders; },52e8c01a2441d0aab750295a5e0286071d353cff,,getJavaClassFolders(),2,8,@com.android.annotations.NonNull @java.lang.Override public java.util.List<java.io.File> getJavaClassFolders() { if ((mJavaClassFolders) == null) { mJavaClassFolders = new java.util.ArrayList<java.io.File>(1); java.io.File outputClassFolder = mVariant.getMainArtifact().getClassesFolder(); if ((outputClassFolder != null) && (outputClassFolder.exists())) { mJavaClassFolders.add(outputClassFolder); } } return mJavaClassFolders; },2c763719cbbd4733a4f9dfaee84cf9722f7ef179,getJavaClassFolders(),308773,116,115
579565,src_java_com_android_internal_telephony_RIL.java,109.0,"@java.lang.Override public void sendEnvelopeWithStatus(java.lang.String contents, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STK_SEND_ENVELOPE_WITH_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" contents = "") + contents)); } try { radioProxy.sendEnvelopeWithStatus(rr.mSerial, convertNullToEmptyString(contents)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""sendEnvelopeWithStatus"", e); } } }",4ed35edb52b207159811607e6d5404d8314d7d63,"@java.lang.Override public void sendEnvelopeWithStatus(java.lang.String contents, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_STK_SEND_ENVELOPE_WITH_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" contents = "") + contents)); } try { radioProxy.sendEnvelopeWithStatus(rr.mSerial, convertNullToEmptyString(contents)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""sendEnvelopeWithStatus"", e); } } }",1af0d4746de5e69af8f66a082dc83cd5e651faad,"sendEnvelopeWithStatus(java.lang.String,android.os.Message)","sendEnvelopeWithStatus(java.lang.String,android.os.Message)",3,109,"@java.lang.Override public void sendEnvelopeWithStatus(java.lang.String contents, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STK_SEND_ENVELOPE_WITH_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" contents = "") + contents)); } try { radioProxy.sendEnvelopeWithStatus(rr.mSerial, convertNullToEmptyString(contents)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""sendEnvelopeWithStatus"", e); } } }",4ed35edb52b207159811607e6d5404d8314d7d63,"sendEnvelopeWithStatus(java.lang.String,android.os.Message)",89366,242,238
79091,luni_src_main_java_java_util_Locale.java,14.0,"public java.lang.String getDisplayLanguage(java.util.Locale locale) { if (languageCode.isEmpty()) { return """"; } java.lang.String localeString = toString(); if (languageCode.equals(""tl"")) { localeString = java.util.Locale.toNewString(""fil"", countryCode, variantCode); } java.lang.String result = libcore.icu.ICU.getDisplayLanguageNative(localeString, locale.toString()); if (result == null) { result = libcore.icu.ICU.getDisplayLanguageNative(localeString, java.util.Locale.getDefault().toString()); } return result; }",c7506c7cb4bb6b1728ddcca2690077e000e41eb7,"public java.lang.String getDisplayLanguage(java.util.Locale locale) { if (languageCode.isEmpty()) { return """"; } java.lang.String localeString = toString(); if (languageCode.equals(""tl"")) { localeString = toNewString(""fil"", countryCode, variantCode, null, null); } java.lang.String result = libcore.icu.ICU.getDisplayLanguageNative(localeString, locale.getIcuLocaleId()); if (result == null) { result = libcore.icu.ICU.getDisplayLanguageNative(localeString, java.util.Locale.getDefault().getIcuLocaleId()); } return result; }",351e97b52824a1b608306a44189b2b0625e807d3,getDisplayLanguage(java.util.Locale),getDisplayLanguage(java.util.Locale),3,13,"public java.lang.String getDisplayLanguage(java.util.Locale locale) { if (languageCode.isEmpty()) { return """"; } java.lang.String localeString = toString(); if (languageCode.equals(""tl"")) { localeString = java.util.Locale.toNewString(""fil"", countryCode, variantCode, scriptCode, extensions); } java.lang.String result = libcore.icu.ICU.getDisplayLanguageNative(localeString, locale.getIcuLocaleId()); if (result == null) { result = libcore.icu.ICU.getDisplayLanguageNative(localeString, java.util.Locale.getDefault().getIcuLocaleId()); } return result; }",75a9418c7f3373f72ba2ec18be3bf52380f979c3,getDisplayLanguage(java.util.Locale),40956,143,150
89820,build-system_manifest-merger_src_main_java_com_android_manifmerger_XmlDocument.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.common.base.Optional<org.w3c.dom.Element> addIfAbsent(com.android.manifmerger.ActionRecorder actionRecorder, com.android.manifmerger.ManifestModel.NodeTypes nodeType, java.lang.String keyValue, com.android.utils.Pair<java.lang.String, java.lang.String>... attributes) { com.google.common.base.Optional<com.android.manifmerger.XmlElement> xmlElementOptional = getByTypeAndKey(nodeType, keyValue); if (xmlElementOptional.isPresent()) { return com.google.common.base.Optional.absent(); } org.w3c.dom.Element elementNS = getXml().createElementNS(SdkConstants.ANDROID_URI, (""android:"" + (nodeType.toXmlName()))); com.google.common.collect.ImmutableList<java.lang.String> keyAttributesNames = nodeType.getNodeKeyResolver().getKeyAttributesNames(); if ((keyAttributesNames.size()) == 1) { elementNS.setAttributeNS(SdkConstants.ANDROID_URI, (""android:"" + (keyAttributesNames.get(0))), keyValue); } for (com.android.utils.Pair<java.lang.String, java.lang.String> attribute : attributes) { elementNS.setAttributeNS(SdkConstants.ANDROID_URI, (""android:"" + (attribute.getFirst())), attribute.getSecond()); } com.android.manifmerger.XmlElement xmlElement = new com.android.manifmerger.XmlElement(elementNS, this); actionRecorder.recordImpliedNodeAction(xmlElement); getRootNode().getXml().appendChild(elementNS); return com.google.common.base.Optional.of(elementNS); }",a44572f937e0780deaeb50a26f21147ce89fac9b,,"addIfAbsent(com.android.manifmerger.ActionRecorder,com.android.manifmerger.ManifestModel$NodeTypes,java.lang.String,com.android.utils.Pair[])",3,13,"private com.google.common.base.Optional<org.w3c.dom.Element> addIfAbsent(@com.android.annotations.NonNull com.android.manifmerger.ActionRecorder actionRecorder, @com.android.annotations.NonNull com.android.manifmerger.ManifestModel.NodeTypes nodeType, @com.android.annotations.Nullable java.lang.String keyValue, @com.android.annotations.Nullable com.android.utils.Pair<java.lang.String, java.lang.String>... attributes) { com.google.common.base.Optional<com.android.manifmerger.XmlElement> xmlElementOptional = getByTypeAndKey(nodeType, keyValue); if (xmlElementOptional.isPresent()) { return com.google.common.base.Optional.absent(); } org.w3c.dom.Element elementNS = getXml().createElementNS(SdkConstants.ANDROID_URI, (""android:"" + (nodeType.toXmlName()))); com.google.common.collect.ImmutableList<java.lang.String> keyAttributesNames = nodeType.getNodeKeyResolver().getKeyAttributesNames(); if ((keyAttributesNames.size()) == 1) { elementNS.setAttributeNS(SdkConstants.ANDROID_URI, (""android:"" + (keyAttributesNames.get(0))), keyValue); } if (attributes != null) { for (com.android.utils.Pair<java.lang.String, java.lang.String> attribute : attributes) { elementNS.setAttributeNS(SdkConstants.ANDROID_URI, (""android:"" + (attribute.getFirst())), attribute.getSecond()); } } com.android.manifmerger.XmlElement xmlElement = new com.android.manifmerger.XmlElement(elementNS, this); actionRecorder.recordImpliedNodeAction(xmlElement); getRootNode().getXml().appendChild(elementNS); return com.google.common.base.Optional.of(elementNS); }",cba8b8b5b92d445f72932215f1a4dab977bdad5b,"addIfAbsent(com.android.manifmerger.ActionRecorder,com.android.manifmerger.ManifestModel$NodeTypes,java.lang.String,com.android.utils.Pair[])",481907,382,421
152861,perflib_src_main_java_com_android_tools_perflib_heap_Instance.java,24.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean getIsSoftReferenceType() { return false; },ac969e6fb9354c822e969a2dcfb7c27990e014e7,,getIsSoftReferenceType(),6,7,public boolean getIsSoftReference() { return false; },b6a089e7f5057fd6075aaeb35b617f480ba620bf,getIsSoftReference(),375513,12,12
131660,jack-tests_src_com_android_jack_test_helper_IncrementalTestHelper.java,13.0,"public void incrementalBuildFromFolder(@javax.annotation.CheckForNull java.io.File[] classpath, @javax.annotation.Nonnull java.util.List<java.io.File> imports, @javax.annotation.Nonnull com.android.jack.test.toolchain.JackBasedToolchain.MultiDexKind multiDexKind) throws java.lang.Exception { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeList = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(1); excludeList.add(com.android.jack.test.toolchain.JillBasedToolchain.class); com.android.jack.test.toolchain.JackApiToolchain jackToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class, excludeList); jackToolchain.setIncrementalFolder(getCompilerStateFolder()); jackToolchain.addStaticLibs(imports.toArray(new java.io.File[imports.size()])); jackToolchain.setMultiDexKind(multiDexKind); jackToolchain.setOutputStream(out); jackToolchain.setErrorStream(err); java.io.File[] bootclasspath = jackToolchain.getDefaultBootClasspath(); jackToolchain.addToClasspath(bootclasspath); if (classpath != null) { jackToolchain.addToClasspath(classpath); } jackToolchain.srcToExe(dexOutDir, false, sourceFolder); java.lang.Thread.sleep(1000); }",a334b0c15fc0907d346ba8f4133fe873931b4168,"public void incrementalBuildFromFolder(@javax.annotation.CheckForNull java.io.File[] classpath, @javax.annotation.Nonnull java.util.List<java.io.File> imports, @javax.annotation.Nonnull com.android.jack.test.toolchain.JackBasedToolchain.MultiDexKind multiDexKind) throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain jackToolchain; if (isApiTest) { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeList = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(1); excludeList.add(com.android.jack.test.toolchain.JackCliToolchain.class); jackToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class, excludeList); } else { jackToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); } jackToolchain.setIncrementalFolder(getCompilerStateFolder()); jackToolchain.addStaticLibs(imports.toArray(new java.io.File[imports.size()])); jackToolchain.setMultiDexKind(multiDexKind); jackToolchain.setOutputStream(out); jackToolchain.setErrorStream(err); java.io.File[] bootclasspath = jackToolchain.getDefaultBootClasspath(); jackToolchain.addToClasspath(bootclasspath); if (classpath != null) { jackToolchain.addToClasspath(classpath); } jackToolchain.srcToExe(dexOutDir, false, sourceFolder); java.lang.Thread.sleep(1000); }",b716ecc7b54c2b6b9694808c477f25078d548818,"incrementalBuildFromFolder(java.io.File[],java.util.List,com.android.jack.test.toolchain.JackBasedToolchain.MultiDexKind)","incrementalBuildFromFolder(java.io.File[],java.util.List,com.android.jack.test.toolchain.JackBasedToolchain.MultiDexKind)",11,13,"public void incrementalBuildFromFolder(@javax.annotation.CheckForNull java.io.File[] classpath, @javax.annotation.Nonnull java.util.List<java.io.File> imports, @javax.annotation.Nonnull com.android.jack.test.toolchain.JackBasedToolchain.MultiDexKind multiDexKind) throws java.lang.Exception { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> excludeList = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(1); excludeList.add(com.android.jack.test.toolchain.LegacyJillToolchain.class); if (isApiTest) { excludeList.add(com.android.jack.test.toolchain.JackCliToolchain.class); } com.android.jack.test.toolchain.JackApiToolchainBase jackToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchainBase.class, excludeList); jackToolchain.setIncrementalFolder(getCompilerStateFolder()); jackToolchain.addStaticLibs(imports.toArray(new java.io.File[imports.size()])); jackToolchain.setMultiDexKind(multiDexKind); jackToolchain.setOutputStream(out); jackToolchain.setErrorStream(err); java.io.File[] bootclasspath = jackToolchain.getDefaultBootClasspath(); jackToolchain.addToClasspath(bootclasspath); if (classpath != null) { jackToolchain.addToClasspath(classpath); } jackToolchain.srcToExe(dexOutDir, false, sourceFolder); java.lang.Thread.sleep(1000); }",8fc6c35709df5bf1381e95be05ca5174d316d669,"incrementalBuildFromFolder(java.io.File[],java.util.List,com.android.jack.test.toolchain.JackBasedToolchain.MultiDexKind)",181555,417,394
307925,luni_src_test_java_libcore_util_ZoneInfoDBTest.java,12.0,"public void testGoodOverrideFile() throws java.lang.Exception { java.io.RandomAccessFile in = new java.io.RandomAccessFile(libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT, ""r""); byte[] content = new byte[((int) (in.length()))]; in.readFully(content); content[6] = '9'; content[7] = '9'; content[8] = '9'; content[9] = '9'; content[10] = 'z'; in.close(); libcore.util.ZoneInfoDB.TzData data = new libcore.util.ZoneInfoDB.TzData(libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT); java.lang.String goodFile = libcore.util.ZoneInfoDBTest.makeTemporaryFile(content); try { libcore.util.ZoneInfoDB.TzData dataWithOverride = new libcore.util.ZoneInfoDB.TzData(goodFile, libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT); assertEquals(""9999z"", dataWithOverride.getVersion()); assertEquals(data.getAvailableIDs().length, dataWithOverride.getAvailableIDs().length); } finally { new java.io.File(goodFile).delete(); } }",624d4506feb66a1d145748e0a292464a6710c68f,"public void testGoodOverrideFile() throws java.lang.Exception { java.io.RandomAccessFile in = new java.io.RandomAccessFile(libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT, ""r""); byte[] content = new byte[((int) (in.length()))]; in.readFully(content); content[6] = '9'; content[7] = '9'; content[8] = '9'; content[9] = '9'; content[10] = 'z'; in.close(); libcore.util.ZoneInfoDB.TzData data = new libcore.util.ZoneInfoDB.TzData(libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT); java.lang.String goodFile = libcore.util.ZoneInfoDBTest.makeTemporaryFile(content).getPath(); try { libcore.util.ZoneInfoDB.TzData dataWithOverride = new libcore.util.ZoneInfoDB.TzData(goodFile, libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT); assertEquals(""9999z"", dataWithOverride.getVersion()); assertEquals(data.getAvailableIDs().length, dataWithOverride.getAvailableIDs().length); } finally { new java.io.File(goodFile).delete(); } }",9f05b1ab00a1c463d88c389bf3a57557f565fb88,testGoodOverrideFile(),testGoodOverrideFile(),3,12,"public void testGoodOverrideFile() throws java.lang.Exception { java.io.RandomAccessFile in = new java.io.RandomAccessFile(libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT, ""r""); byte[] content = new byte[((int) (in.length()))]; in.readFully(content); content[6] = '9'; content[7] = '9'; content[8] = '9'; content[9] = '9'; content[10] = 'z'; in.close(); libcore.util.ZoneInfoDB.TzData data = new libcore.util.ZoneInfoDB.TzData(libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT); java.io.File goodFile = libcore.util.ZoneInfoDBTest.makeTemporaryFile(content); try { libcore.util.ZoneInfoDB.TzData dataWithOverride = new libcore.util.ZoneInfoDB.TzData(goodFile.getPath(), libcore.util.ZoneInfoDBTest.TZDATA_IN_ROOT); assertEquals(""9999z"", dataWithOverride.getVersion()); assertEquals(data.getAvailableIDs().length, dataWithOverride.getAvailableIDs().length); } finally { goodFile.delete(); } }",7fbea4443558808827fd83b0677de6bb8f857d5a,testGoodOverrideFile(),502717,295,288
663827,harnesses_tradefed_src_com_android_tradefed_targetprep_VtsPythonVirtualenvPreparer.java,12.0,"@java.lang.Override public void setUp(com.android.tradefed.invoker.IInvocationContext context) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { mBuildInfo = context.getBuildInfos().get(0); startVirtualenv(mBuildInfo); setLocalPypiPath(); installDeps(mBuildInfo); }",7bac8880bebf9a1359d31bf2fc53ab9f4660f8cc,"@java.lang.Override public synchronized void setUp(com.android.tradefed.invoker.IInvocationContext context) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { mBuildInfo = context.getBuildInfos().get(0); startVirtualenv(mBuildInfo); setLocalPypiPath(); installDeps(mBuildInfo); }",3e364b55fc7d3a111417d139f20ca6ab96df5c17,setUp(com.android.tradefed.invoker.IInvocationContext),setUp(com.android.tradefed.invoker.IInvocationContext),13,14,"@java.lang.Override public synchronized void setUp(com.android.tradefed.invoker.IInvocationContext context) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { ++(mNumOfInstances); mBuildInfo = context.getBuildInfos().get(0); if ((mNumOfInstances) == 1) { com.android.tradefed.device.ITestDevice device = context.getDevices().get(0); mDescriptor = device.getDeviceDescriptor(); createVirtualenv(mBuildInfo); setLocalPypiPath(); installDeps(); } addPathToBuild(mBuildInfo); }",6c9a5fae50a5fc764fe98d63642f5f8dd2aa1d61,setUp(com.android.tradefed.invoker.IInvocationContext),416306,106,158
583630,src_com_android_bips_LocalPrinter.java,11.0,"void requestCapabilities() { mPrintService.getCapabilitiesCache().request(mDiscoveredPrinter, mSession.isPriority(mPrinterId), this); }",8cf8d3027eda00b2c373aa1638e9f540cfaa3173,"@java.lang.Override public void onCapabilities(com.android.bips.jni.LocalPrinterCapabilities capabilities) { if ((mSession.isDestroyed()) || (!(mSession.isKnown(mPrinterId)))) return; if (capabilities == null) { if (com.android.bips.LocalPrinter.DEBUG) android.util.Log.d(com.android.bips.LocalPrinter.TAG, (""No capabilities so removing printer "" + (this))); mSession.removePrinters(java.util.Collections.singletonList(mPrinterId)); } else { mCapabilities = capabilities; mSession.handlePrinter(this); } }",20f64eb70979e2c651d5750fec4afb71de0a71ef,requestCapabilities(),onCapabilities(com.android.bips.jni.LocalPrinterCapabilities),4,14,"@java.lang.Override public void onCapabilities(com.android.bips.jni.LocalPrinterCapabilities capabilities) { if ((mSession.isDestroyed()) || (!(mSession.isKnown(mPrinterId)))) { return; } if (capabilities == null) { if (com.android.bips.LocalPrinter.DEBUG) android.util.Log.d(com.android.bips.LocalPrinter.TAG, (""No capabilities so removing printer "" + (this))); mSession.removePrinters(java.util.Collections.singletonList(mPrinterId)); } else { mCapabilities = capabilities; mSession.handlePrinter(this); } }",4b418f37da26fb2d21cc7e65eda3625c8e462f8c,onCapabilities(com.android.bips.jni.LocalPrinterCapabilities),33238,139,141
594260,telephony_java_android_telephony_euicc_EuiccManager.java,6.0,@android.annotation.SystemApi public int getOtaStatus() { if (!(isEnabled())) { return android.telephony.euicc.EuiccManager.EUICC_OTA_STATUS_UNAVAILABLE; } try { return android.telephony.euicc.EuiccManager.getIEuiccController().getOtaStatus(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },70ab61212280bdc0760836e721d917b0511c536e,@android.annotation.SystemApi public int getOtaStatus() { if (!(isEnabled())) { return android.telephony.euicc.EuiccManager.EUICC_OTA_STATUS_UNAVAILABLE; } com.android.internal.telephony.euicc.IEuiccController controller = getIEuiccController(); if (controller == null) return android.telephony.euicc.EuiccManager.EUICC_OTA_STATUS_UNAVAILABLE; try { return controller.getOtaStatus(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },0b446dad5463e0731cfb21c3867438bba6f55f8c,getOtaStatus(),getOtaStatus(),3,6,@android.annotation.SystemApi public int getOtaStatus() { if (!(isEnabled())) { return android.telephony.euicc.EuiccManager.EUICC_OTA_STATUS_UNAVAILABLE; } try { return getIEuiccController().getOtaStatus(); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } },a6b2519c620dcdf89c8f93735d4ea79e4d52f553,getOtaStatus(),409152,132,81
361230,luni_src_main_java_libcore_util_TimeZoneFinder.java,,,,private void initializeEmpty() { countryZones = java.util.Collections.emptyMap(); },1efef8ed2148d2d750870bff3e9cbfdcfc467d1f,,initializeEmpty(),8,9,"@java.lang.Override public boolean process(java.lang.String countryCode, java.util.List<java.lang.String> timeZoneIds, java.lang.String debugInfo) { if (!(countryCodeToMatch.equals(countryCode))) { return libcore.util.TimeZoneFinder.CountryZonesProcessor.CONTINUE; } java.util.List<android.icu.util.TimeZone> timeZones = new java.util.ArrayList<>(); for (java.lang.String zoneIdString : timeZoneIds) { android.icu.util.TimeZone tz = android.icu.util.TimeZone.getTimeZone(zoneIdString); if (tz.getID().equals(TimeZone.UNKNOWN_ZONE_ID)) { java.lang.System.logW((((""Skipping invalid zone: "" + zoneIdString) + "" at "") + debugInfo)); } else { timeZones.add(tz.freeze()); } } matchedZones = java.util.Collections.unmodifiableList(timeZones); return libcore.util.TimeZoneFinder.CountryZonesProcessor.HALT; }",09225b4302d1fa5fadc17b8cd50d9296e13795fb,"process(java.lang.String,java.util.List,java.lang.String)",429188,19,246
63538,sdklib_src_main_java_com_android_sdklib_build_RenderScriptChecker.java,,,,public java.util.List<java.io.File> getInputFiles() { return mInputFiles; },4a880d0a3d34bedad554b2c37bbb5c2af139aeef,,getInputFiles(),6,3,@com.android.annotations.Nullable public java.util.List<java.io.File> getInputFiles() { return mInputFiles; },c73bc835d00efcedd97db22d00e0ced73840c2bf,getInputFiles(),342423,24,32
117753,jack-tests_src_com_android_jack_test_toolchain_JackBasedToolchain.java,6.0,"@java.lang.Override @javax.annotation.Nonnull public java.io.File[] getDefaultBootClasspath() { return new java.io.File[]{ new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""toolchain/jack/jack-tests/libs/core-stubs-mini.jack""), new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""toolchain/jack/jack-tests/prebuilts/junit4-targetdex-jack.zip"") }; }",235aa47a680a5e21c3ed9169bbd8a26d64172c21,"@java.lang.Override @javax.annotation.Nonnull public java.io.File[] getDefaultBootClasspath() { return new java.io.File[]{ new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack/jack-tests/libs/core-stubs-mini.jack""), new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack/jack-tests/prebuilts/junit4-targetdex-jack.zip"") }; }",2c2860debde43670f2df35d84631b976df7ec574,getDefaultBootClasspath(),getDefaultBootClasspath(),4,6,"@java.lang.Override @javax.annotation.Nonnull public java.io.File[] getDefaultBootClasspath() { return new java.io.File[]{ new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack-tests/libs/core-stubs-mini.jack""), new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack-tests/prebuilts/junit4-targetdex-jack.zip"") }; }",d6e76b5e0a1b6114d158b07777c13d9fc6d89e19,getDefaultBootClasspath(),418960,125,121
212728,src_com_android_bluetooth_gatt_AppScanStats.java,2.0,"synchronized void recordScanStop() { if (!(isScanning)) return; (this.scansStopped)++; isScanning = false; stopTime = java.lang.System.currentTimeMillis(); long scanDuration = (stopTime) - (startTime); minScanTime = java.lang.Math.min(scanDuration, minScanTime); maxScanTime = java.lang.Math.max(scanDuration, maxScanTime); totalScanTime += scanDuration; com.android.bluetooth.gatt.AppScanStats.LastScan curr = lastScans.get(((lastScans.size()) - 1)); curr.duration = scanDuration; if ((lastScans.size()) > (com.android.bluetooth.gatt.AppScanStats.NUM_SCAN_DURATIONS_KEPT)) { lastScans.remove(0); } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_STOP); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setInitiator(appName); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); gattService.addScanEvent(scanEvent); }",f2e74349fdfb0516d5acff298bae636cc5b9a5a1,"synchronized void recordScanStop() { if (!(isScanning)) return; (this.scansStopped)++; isScanning = false; stopTime = java.lang.System.currentTimeMillis(); long scanDuration = (stopTime) - (startTime); minScanTime = java.lang.Math.min(scanDuration, minScanTime); maxScanTime = java.lang.Math.max(scanDuration, maxScanTime); totalScanTime += scanDuration; com.android.bluetooth.gatt.AppScanStats.LastScan curr = lastScans.get(((lastScans.size()) - 1)); curr.duration = scanDuration; if ((lastScans.size()) > (com.android.bluetooth.gatt.AppScanStats.NUM_SCAN_DURATIONS_KEPT)) { lastScans.remove(0); } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_STOP); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); java.lang.String initiator = appName; java.lang.String[] nameSplit = initiator.split(""\\.""); if ((nameSplit.length) > 3) { initiator = ((((nameSplit[0]) + ""."") + (nameSplit[1])) + ""."") + (nameSplit[2]); } scanEvent.setInitiator(initiator); gattService.addScanEvent(scanEvent); }",581aab891d70b5444006e10986556e418dc7c663,recordScanStop(),recordScanStop(),4,2,"synchronized void recordScanStop() { if (!(isScanning)) return; (this.scansStopped)++; isScanning = false; stopTime = java.lang.System.currentTimeMillis(); long scanDuration = (stopTime) - (startTime); minScanTime = java.lang.Math.min(scanDuration, minScanTime); maxScanTime = java.lang.Math.max(scanDuration, maxScanTime); totalScanTime += scanDuration; com.android.bluetooth.gatt.AppScanStats.LastScan curr = lastScans.get(((lastScans.size()) - 1)); curr.duration = scanDuration; if ((lastScans.size()) > (com.android.bluetooth.gatt.AppScanStats.NUM_SCAN_DURATIONS_KEPT)) { lastScans.remove(0); } com.android.bluetooth.btservice.BluetoothProto.ScanEvent scanEvent = new com.android.bluetooth.btservice.BluetoothProto.ScanEvent(); scanEvent.setScanEventType(BluetoothProto.ScanEvent.SCAN_EVENT_STOP); scanEvent.setScanTechnologyType(BluetoothProto.ScanEvent.SCAN_TECH_TYPE_LE); scanEvent.setEventTimeMillis(java.lang.System.currentTimeMillis()); scanEvent.setInitiator(truncateAppName(appName)); gattService.addScanEvent(scanEvent); }",4bdb4f52f585429ebd2776255d95d3795333e1fd,recordScanStop(),18047,352,292
40100,luni_src_main_java_java_lang_ref_FinalizerReference.java,5.0,"public static void finalizeAllEnqueued() throws java.lang.InterruptedException { java.lang.ref.FinalizerReference.Sentinel sentinel = new java.lang.ref.FinalizerReference.Sentinel(); java.lang.ref.FinalizerReference<java.lang.Object> reference = new java.lang.ref.FinalizerReference<java.lang.Object>(null, java.lang.ref.FinalizerReference.queue); reference.zombie = sentinel; reference.enqueueInternal(); sentinel.awaitFinalization(); }",ae2c0c482928a0de50086a53258ae87736848263,"public static void finalizeAllEnqueued() throws java.lang.InterruptedException { java.lang.ref.FinalizerReference.Sentinel sentinel = new java.lang.ref.FinalizerReference.Sentinel(); java.lang.ref.FinalizerReference<java.lang.Object> reference = new java.lang.ref.FinalizerReference<java.lang.Object>(null, java.lang.ref.FinalizerReference.queue); reference.zombie = sentinel; reference.isSentinel = true; reference.enqueueInternal(); sentinel.awaitFinalization(); }",aa7ce68372fb46d7fc3a36577a6136f11a459a33,finalizeAllEnqueued(),finalizeAllEnqueued(),4,6,public static void finalizeAllEnqueued() throws java.lang.InterruptedException { java.lang.ref.FinalizerReference.Sentinel sentinel = new java.lang.ref.FinalizerReference.Sentinel(); java.lang.ref.FinalizerReference.enqueueSentinelReference(sentinel); sentinel.awaitFinalization(); },65bdf9444474d00292d3b19275e4bc3073d3f225,finalizeAllEnqueued(),268623,116,64
253791,luni_src_main_java_libcore_io_Os.java,82.0,"public void listen(java.io.FileDescriptor fd, int backlog) throws android.system.ErrnoException;",a4c81dfbca5136f95cd7db91f2d49a13d58329d1,"public void listen(java.io.FileDescriptor fd, int backlog) throws libcore.io.ErrnoException;",d20a960b4e1364d96ba144e1caf4a8b9f26ae119,"listen(java.io.FileDescriptor,int)","listen(java.io.FileDescriptor,int)",8,79,"public void listen(java.io.FileDescriptor fd, int backlog) throws android.system.ErrnoException;",a4c81dfbca5136f95cd7db91f2d49a13d58329d1,"listen(java.io.FileDescriptor,int)",494646,25,24
65610,src_com_android_stk_StkDialogActivity.java,8.0,@java.lang.Override public void onResume() { super.onResume(); startTimeOut(mTextMsg.userClear); },cc2487e0d1faf631b62cf747ada8296a830ffe1d,"@java.lang.Override public void onResume() { super.onResume(); if (((!(mTextMsg.responseNeeded)) && ((com.android.stk.StkApp.calculateDurationInMilis(mTextMsg.duration)) == 0)) && (mTextMsg.userClear)) { com.android.stk.CatLog.d(this, ""User should clear text..show message for ever""); return; } startTimeOut(mTextMsg.userClear); }",bd3387b206f8d941dcdf00ed359639ba7182bcf8,onResume(),onResume(),8,8,"@java.lang.Override public void onResume() { super.onResume(); if (((!(mTextMsg.responseNeeded)) && ((com.android.stk.StkApp.calculateDurationInMilis(mTextMsg.duration)) == 0)) && (mTextMsg.userClear)) { com.android.internal.telephony.cat.CatLog.d(this, ""User should clear text..show message forever""); return; } startTimeOut(mTextMsg.userClear); }",2d18bd58ba873602597fc9416b259d82a5b82e84,onResume(),428200,106,108
101896,build-system_gradle_src_main_groovy_com_android_build_gradle_internal_variant_BaseVariantOutputData.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.android.annotations.NonNull public java.lang.String getBaseName() { if ((densityFilter) == null) { } return variantData.getVariantConfiguration().getBaseName(); },c5f08a31035a6d38058da7697dff74891d9a6003,,getBaseName(),4,1,@com.android.annotations.NonNull public java.lang.String getBaseName() { if ((densityFilter) == null) { return variantData.getVariantConfiguration().computeBaseNameWithSplits(com.android.build.gradle.internal.variant.BaseVariantOutputData.UNIVERSAL); } return variantData.getVariantConfiguration().computeBaseNameWithSplits(densityFilter); },89401043c95a1839a408c3515b3c3babcdf27f6d,getBaseName(),153852,42,84
442212,services_net_java_android_net_ip_IpReachabilityMonitor.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static int getInterfaceIndex(java.lang.String iface) { try { return java.net.NetworkInterface.getByName(iface).getIndex(); } catch (java.net.SocketException e) { throw new java.lang.IllegalArgumentException(((""invalid interface '"" + iface) + ""': ""), e); } }",c54df5b601183be26c5cb8021a198b11beb5a24c,,getInterfaceIndex(java.lang.String),4,1,"private static int getInterfaceIndex(java.lang.String ifname) { final java.net.NetworkInterface iface; try { iface = java.net.NetworkInterface.getByName(ifname); } catch (java.net.SocketException e) { throw new java.lang.IllegalArgumentException(((""invalid interface '"" + ifname) + ""': ""), e); } if (iface == null) { throw new java.lang.IllegalArgumentException((""NetworkInterface was null for "" + ifname)); } return iface.getIndex(); }",e7ae6266b30a56baa985ae678cee2205e31c0aed,getInterfaceIndex(java.lang.String),282916,71,114
158394,asset-studio_src_main_java_com_android_assetstudiolib_vectordrawable_Svg2Vector.java,3.0,"public static java.lang.String parseSvgToXml(java.io.File inputSVG, java.io.OutputStream outStream) { java.lang.String errorLog = null; try { com.android.assetstudiolib.vectordrawable.SvgTree svgTree = com.android.assetstudiolib.vectordrawable.Svg2Vector.parse(inputSVG); errorLog = svgTree.getErrorLog(); com.android.assetstudiolib.vectordrawable.Svg2Vector.writeFile(outStream, svgTree); } catch (java.lang.Exception e) { errorLog = ((""EXCEPTION in parsing "" + (inputSVG.getName())) + "":\n"") + (e.getMessage()); } return errorLog; }",985eb496d0098226c1d5903e4340250df0441728,"public static java.lang.String parseSvgToXml(java.io.File inputSVG, java.io.OutputStream outStream) { java.lang.String errorLog = null; try { com.android.assetstudiolib.vectordrawable.SvgTree svgTree = com.android.assetstudiolib.vectordrawable.Svg2Vector.parse(inputSVG); errorLog = svgTree.getErrorLog(); if ((svgTree.getRoot()) != null) { com.android.assetstudiolib.vectordrawable.Svg2Vector.writeFile(outStream, svgTree); } } catch (java.lang.Exception e) { errorLog = ((""EXCEPTION in parsing "" + (inputSVG.getName())) + "":\n"") + (e.getMessage()); } return errorLog; }",41ca541e8d5f277431429b32191d45daee71706f,"parseSvgToXml(java.io.File,java.io.OutputStream)","parseSvgToXml(java.io.File,java.io.OutputStream)",4,3,"public static java.lang.String parseSvgToXml(java.io.File inputSVG, java.io.OutputStream outStream) { java.lang.String errorLog = null; try { com.android.assetstudiolib.vectordrawable.SvgTree svgTree = com.android.assetstudiolib.vectordrawable.Svg2Vector.parse(inputSVG); errorLog = svgTree.getErrorLog(); if (svgTree.canConvertToVectorDrawable()) { com.android.assetstudiolib.vectordrawable.Svg2Vector.writeFile(outStream, svgTree); } } catch (java.lang.Exception e) { errorLog = ((""EXCEPTION in parsing "" + (inputSVG.getName())) + "":\n"") + (e.getMessage()); } return errorLog; }",956ef73629d8dd2c8a240a7716408daff0887bd4,"parseSvgToXml(java.io.File,java.io.OutputStream)",495380,169,169
625207,rcs_rcsservice_src_com_android_service_ims_RcsStackAdaptor.java,26.0,private void clearImsUceService() { synchronized(mSyncObj) { mImsUceManager = null; mStackService = null; mStackPresService = null; } },e5203638aa302e2c553b0f6f9d32b7b8dc97ef90,"private void clearImsUceService() { synchronized(mSyncObj) { try { if ((mStackService) != null) { mStackService.destroyPresenceService(mStackPresenceServiceHandle); } } catch (android.os.RemoteException e) { logger.warn(""clearImsUceService: Couldn't clean up stack service""); } mImsUceManager = null; mStackService = null; mStackPresService = null; } }",dd395d8cd5727f236181bd96668bc055b0ec09e5,clearImsUceService(),clearImsUceService(),2,26,"private void clearImsUceService() { synchronized(mSyncObj) { try { logger.info(""clearImsUceService: removing listener and presence service.""); if ((mStackPresService) != null) { mStackPresService.removeListener(mStackPresenceServiceHandle, mListenerHandle); } if ((mStackService) != null) { mStackService.destroyPresenceService(mStackPresenceServiceHandle); } } catch (android.os.RemoteException e) { logger.warn(""clearImsUceService: Couldn't clean up stack service""); } mImsUceManager = null; mStackService = null; mStackPresService = null; } }",0c3e55d3c1fcdc9251e2f80b9415be71282db468,clearImsUceService(),398442,102,151
640286,services_core_java_com_android_server_connectivity_Tethering.java,20.0,"private void handleUpstreamNetworkMonitorCallback(int arg1, java.lang.Object o) { if (arg1 == (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.NOTIFY_LOCAL_PREFIXES)) { mOffload.sendOffloadExemptPrefixes(((java.util.Set<android.net.IpPrefix>) (o))); return; } final android.net.NetworkState ns = ((android.net.NetworkState) (o)); if ((ns == null) || (!(pertainsToCurrentUpstream(ns)))) { if ((mCurrentUpstreamIface) == null) { chooseUpstreamType(false); } return; } switch (arg1) { case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_AVAILABLE : break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_CAPABILITIES : handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LINKPROPERTIES : setDnsForwarders(ns.network, ns.linkProperties); handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LOST : handleNewUpstreamNetworkState(null); break; default : mLog.e((""Unknown arg1 value: "" + arg1)); break; } }",4f56d3ef5ce62fa982d6b9324681410c3cef751e,"private void handleUpstreamNetworkMonitorCallback(int arg1, java.lang.Object o) { if (arg1 == (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.NOTIFY_LOCAL_PREFIXES)) { mOffload.sendOffloadExemptPrefixes(((java.util.Set<android.net.IpPrefix>) (o))); return; } final android.net.NetworkState ns = ((android.net.NetworkState) (o)); if ((ns == null) || (!(pertainsToCurrentUpstream(ns)))) { if ((mCurrentUpstreamIfaceSet) == null) { chooseUpstreamType(false); } return; } switch (arg1) { case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_AVAILABLE : break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_CAPABILITIES : handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LINKPROPERTIES : setDnsForwarders(ns.network, ns.linkProperties); handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LOST : handleNewUpstreamNetworkState(null); break; default : mLog.e((""Unknown arg1 value: "" + arg1)); break; } }",fe59e532098578bb9ae79e7e46a667ac4926de8e,"handleUpstreamNetworkMonitorCallback(int,java.lang.Object)","handleUpstreamNetworkMonitorCallback(int,java.lang.Object)",13,19,"private void handleUpstreamNetworkMonitorCallback(int arg1, java.lang.Object o) { if (arg1 == (com.android.server.connectivity.tethering.UpstreamNetworkMonitor.NOTIFY_LOCAL_PREFIXES)) { mOffload.sendOffloadExemptPrefixes(((java.util.Set<android.net.IpPrefix>) (o))); return; } final android.net.NetworkState ns = ((android.net.NetworkState) (o)); if ((ns == null) || (!(pertainsToCurrentUpstream(ns)))) { if ((mCurrentUpstreamIfaceSet) == null) { chooseUpstreamType(false); } return; } switch (arg1) { case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_AVAILABLE : break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_CAPABILITIES : handleNewUpstreamNetworkState(ns); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LINKPROPERTIES : chooseUpstreamType(false); break; case com.android.server.connectivity.tethering.UpstreamNetworkMonitor.EVENT_ON_LOST : handleNewUpstreamNetworkState(null); break; default : mLog.e((""Unknown arg1 value: "" + arg1)); break; } }",0f59c112eebb4dcf59da236cb85657069bbc6940,"handleUpstreamNetworkMonitorCallback(int,java.lang.Object)",512034,322,306
586125,services_core_java_com_android_server_connectivity_NetworkMonitor.java,42.0,"@java.lang.Override public void enter() { maybeLogEvaluationResult(networkEventType(validationStage(), com.android.server.connectivity.NetworkMonitor.EvaluationResult.VALIDATED)); mConnectivityServiceHandler.sendMessage(obtainMessage(com.android.server.connectivity.NetworkMonitor.EVENT_NETWORK_TESTED, com.android.server.connectivity.NetworkMonitor.NETWORK_TEST_RESULT_VALID, mNetId, null)); (mValidations)++; }",23e3f51365e71bd366ed3ac6d0703f28d70f371b,"@java.lang.Override public void enter() { maybeLogEvaluationResult(networkEventType(validationStage(), com.android.server.connectivity.NetworkMonitor.EvaluationResult.VALIDATED)); mConnectivityServiceHandler.sendMessage(obtainMessage(com.android.server.connectivity.NetworkMonitor.EVENT_NETWORK_TESTED, com.android.server.connectivity.NetworkMonitor.NETWORK_TEST_RESULT_VALID, mNetId, mPrivateDns)); (mValidations)++; }",4984236c1710bed71fd6b95f0ff2ec3007aab50b,enter(),enter(),12,47,"@java.lang.Override public void enter() { maybeLogEvaluationResult(networkEventType(validationStage(), com.android.server.connectivity.NetworkMonitor.EvaluationResult.VALIDATED)); mConnectivityServiceHandler.sendMessage(obtainMessage(com.android.server.connectivity.NetworkMonitor.EVENT_NETWORK_TESTED, com.android.server.connectivity.NetworkMonitor.NETWORK_TEST_RESULT_VALID, mNetId, mPrivateDnsCfg)); (mValidations)++; }",75bb0bcfc1c3eaf4a0968b6b806d6a33c8d54dcc,enter(),465509,104,105
14211,telephony_java_android_telephony_PhoneNumberUtils.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static int addPlusChar(java.lang.String number) { java.lang.String CLIR_OFF = ""#31#+""; java.lang.String CLIR_ON = ""*31#+""; int pos = -1; if (number.startsWith(CLIR_OFF)) { pos = (CLIR_OFF.length()) - 1; } if (number.startsWith(CLIR_ON)) { pos = (CLIR_ON.length()) - 1; } return pos; }",b37522d00c57178d0b41ff6a4f93f6612bbd5f7e,,addPlusChar(java.lang.String),5,54,private static int addPlusChar(java.lang.String number) { int pos = -1; if (number.startsWith(android.telephony.PhoneNumberUtils.CLIR_OFF)) { pos = (android.telephony.PhoneNumberUtils.CLIR_OFF.length()) - 1; } if (number.startsWith(android.telephony.PhoneNumberUtils.CLIR_ON)) { pos = (android.telephony.PhoneNumberUtils.CLIR_ON.length()) - 1; } return pos; },c6100829be2329f7b577871e0a6c1e70e93f7794,addPlusChar(java.lang.String),207370,105,101
507524,src_com_android_bluetooth_pbap_BluetoothPbapVcardManager.java,9.0,"private boolean isFilteredIn(com.android.bluetooth.pbap.BluetoothPbapVcardManager.VCardFilter.FilterBit bit, boolean vCardType21) { final int offset = ((bit.pos) / 8) + 1; final int bit_pos = (bit.pos) % 8; if ((!vCardType21) && (bit.onlyCheckV21)) return true; if (vCardType21 && (bit.excludeForV21)) return false; if (((filter) == null) || (offset >= (filter.length))) return true; return (((filter[((filter.length) - offset)]) >> bit_pos) & 1) != 0; }",981ec760fc46d2b2e2cbd841dbfa957210b9cf4f,"private boolean isFilteredIn(com.android.bluetooth.pbap.BluetoothPbapVcardManager.VCardFilter.FilterBit bit, boolean vCardType21) { final int offset = ((bit.pos) / 8) + 1; final int bit_pos = (bit.pos) % 8; if ((!vCardType21) && (bit.onlyCheckV21)) return true; if (vCardType21 && (bit.excludeForV21)) return false; if (((mFilter) == null) || (offset >= (mFilter.length))) return true; return (((mFilter[((mFilter.length) - offset)]) >> bit_pos) & 1) != 0; }",43b2bbf81fce346ae9ca5b8cd344b403165e3b08,"isFilteredIn(com.android.bluetooth.pbap.BluetoothPbapVcardManager$VCardFilter$FilterBit,boolean)","isFilteredIn(com.android.bluetooth.pbap.BluetoothPbapVcardManager$VCardFilter$FilterBit,boolean)",26,9,"private boolean isFilteredIn(com.android.bluetooth.pbap.BluetoothPbapVcardManager.VCardFilter.FilterBit bit, boolean vCardType21) { final int offset = ((bit.pos) / 8) + 1; final int bitPos = (bit.pos) % 8; if ((!vCardType21) && (bit.onlyCheckV21)) return true; if (vCardType21 && (bit.excludeForV21)) return false; if (((mFilter) == null) || (offset >= (mFilter.length))) return true; return (((mFilter[((mFilter.length) - offset)]) >> bitPos) & 1) != 0; }",b5db0918738d5092b495653ffc72300570445fd0,"isFilteredIn(com.android.bluetooth.pbap.BluetoothPbapVcardManager$VCardFilter$FilterBit,boolean)",155745,152,150
315564,test_953-invoke-polymorphic-compiler_src_Main.java,,,,"public static int Min2Print6(int a, int b, int c, int d, int e, int f) { int[] values = new int[]{ a, b, c, d, e, f }; java.lang.System.out.println(((""Running Main.Min2Print6("" + (java.util.Arrays.toString(values))) + "")"")); return a > b ? a : b; }",69d30a490f7f13ad6c5b908f00a2649b6a3aa10a,,"Min2Print6(int,int,int,int,int,int)",16,11,"public static int Min2Print6(int a, int b, int c, int d, int e, int f) { int[] values = new int[]{ a, b, c, d, e, f }; java.lang.System.err.println(((""Running Main.Min2Print6("" + (java.util.Arrays.toString(values))) + "")"")); return a > b ? a : b; }",c1e952ce8ca3ae8e710fdf8a97a57e8ce2c39b1f,"Min2Print6(int,int,int,int,int,int)",306326,98,98
18960,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_common_platformData_AttrsXmlParser.java,3.0,"private com.android.ide.eclipse.adt.internal.resources.DeclareStyleableInfo parseDeclaredStyleable(java.lang.String styleName, org.w3c.dom.Node declareStyleableNode) { java.util.ArrayList<com.android.ide.eclipse.adt.internal.resources.AttributeInfo> attrs = new java.util.ArrayList<com.android.ide.eclipse.adt.internal.resources.AttributeInfo>(); org.w3c.dom.Node lastComment = null; for (org.w3c.dom.Node node = declareStyleableNode.getFirstChild(); node != null; node = node.getNextSibling()) { switch (node.getNodeType()) { case org.w3c.dom.Node.COMMENT_NODE : lastComment = node; break; case org.w3c.dom.Node.ELEMENT_NODE : if (node.getNodeName().equals(""attr"")) { com.android.ide.eclipse.adt.internal.resources.AttributeInfo info = parseAttr(node, lastComment); if (info != null) { attrs.add(info); } } lastComment = null; break; } } return new com.android.ide.eclipse.adt.internal.resources.DeclareStyleableInfo(styleName, attrs.toArray(new com.android.ide.eclipse.adt.internal.resources.AttributeInfo[attrs.size()])); }",ea558d831b4b1414ec5e1c8f910807907d67026c,"private com.android.ide.common.platformData.DeclareStyleableInfo parseDeclaredStyleable(java.lang.String styleName, org.w3c.dom.Node declareStyleableNode) { java.util.ArrayList<com.android.ide.common.platformData.AttributeInfo> attrs = new java.util.ArrayList<com.android.ide.common.platformData.AttributeInfo>(); org.w3c.dom.Node lastComment = null; for (org.w3c.dom.Node node = declareStyleableNode.getFirstChild(); node != null; node = node.getNextSibling()) { switch (node.getNodeType()) { case org.w3c.dom.Node.COMMENT_NODE : lastComment = node; break; case org.w3c.dom.Node.ELEMENT_NODE : if (node.getNodeName().equals(""attr"")) { com.android.ide.common.platformData.AttributeInfo info = parseAttr(node, lastComment); if (info != null) { attrs.add(info); } } lastComment = null; break; } } return new com.android.ide.common.platformData.DeclareStyleableInfo(styleName, attrs.toArray(new com.android.ide.common.platformData.AttributeInfo[attrs.size()])); }",66fce5f81904b1165828c9f83bc8f171d0a0aab6,"parseDeclaredStyleable(java.lang.String,org.w3c.dom.Node)","parseDeclaredStyleable(java.lang.String,org.w3c.dom.Node)",2,4,"private com.android.ide.common.resources.platform.DeclareStyleableInfo parseDeclaredStyleable(java.lang.String styleName, org.w3c.dom.Node declareStyleableNode) { java.util.ArrayList<com.android.ide.common.resources.platform.AttributeInfo> attrs = new java.util.ArrayList<com.android.ide.common.resources.platform.AttributeInfo>(); org.w3c.dom.Node lastComment = null; for (org.w3c.dom.Node node = declareStyleableNode.getFirstChild(); node != null; node = node.getNextSibling()) { switch (node.getNodeType()) { case org.w3c.dom.Node.COMMENT_NODE : lastComment = node; break; case org.w3c.dom.Node.ELEMENT_NODE : if (node.getNodeName().equals(""attr"")) { com.android.ide.common.resources.platform.AttributeInfo info = parseAttr(node, lastComment); if (info != null) { attrs.add(info); } } lastComment = null; break; } } return new com.android.ide.common.resources.platform.DeclareStyleableInfo(styleName, attrs.toArray(new com.android.ide.common.resources.platform.AttributeInfo[attrs.size()])); }",abf4200442aa0a369cfa86a9298e6676a896d88e,"parseDeclaredStyleable(java.lang.String,org.w3c.dom.Node)",136469,281,287
144134,jack_src_com_android_jack_ir_impl_JackIrBuilder.java,58.0,"private void createTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration x) { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo(x); try { com.android.jack.ir.ast.JDefinedClassOrInterface type = ((com.android.jack.ir.ast.JDefinedClassOrInterface) (getTypeMap().get(x.binding))); newTypes.add(type); if ((x.memberTypes) != null) { for (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration memberType : x.memberTypes) { createTypes(memberType); } } } catch (com.android.jack.ir.ast.JTypeLookupException e) { throw translateException(x, e, info); } catch (java.lang.RuntimeException e) { throw translateException(x, e, info); } }",19f58be8918b92b849c7cba32cd6d5d78f12c6a6,"private void createTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration x) { com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo(x); if ((x.binding) == null) { return; } try { com.android.jack.ir.ast.JDefinedClassOrInterface type = ((com.android.jack.ir.ast.JDefinedClassOrInterface) (getTypeMap().get(x.binding))); newTypes.add(type); if ((x.memberTypes) != null) { for (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration memberType : x.memberTypes) { createTypes(memberType); } } } catch (com.android.jack.ir.ast.JTypeLookupException e) { throw translateException(x, e, info); } catch (java.lang.RuntimeException e) { throw translateException(x, e, info); } }",0797eabb604517579bdd58eb4c96a0aff0858db7,createTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration),createTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration),11,58,"private void createTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration x) { assert !(com.android.jack.ir.impl.JackIrBuilder.hasError(x)); com.android.jack.ir.sourceinfo.SourceInfo info = makeSourceInfo(x); try { com.android.jack.ir.ast.JDefinedClassOrInterface type = ((com.android.jack.ir.ast.JDefinedClassOrInterface) (getTypeMap().get(x.binding))); newTypes.add(type); if ((x.memberTypes) != null) { for (org.eclipse.jdt.internal.compiler.ast.TypeDeclaration memberType : x.memberTypes) { createTypes(memberType); } } } catch (com.android.jack.ir.ast.JTypeLookupException e) { throw translateException(x, e, info); } catch (java.lang.RuntimeException e) { throw translateException(x, e, info); } }",727a0184e3c697c9999b99924c6240e0f9471052,createTypes(org.eclipse.jdt.internal.compiler.ast.TypeDeclaration),375341,208,216
79932,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_manifest_ManifestInfo.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.lang.String getUiOptions() { return mUiOptions; },0ce6c60643c169c853f6fcfa660576bc709bc16a,,getUiOptions(),4,20,@com.android.annotations.Nullable public java.lang.String getUiOptions() { return mUiOptions; },6333fbc965d42cb58eb11e3a6ca8bdab97e31677,getUiOptions(),311276,17,25
79721,graphics_java_android_graphics_Canvas.java,92.0,"private static native void native_drawPaint(int nativeCanvas, int paint);",e49465177b276fa15a14001b156a24be54090664,"private static native void native_drawPaint(long nativeCanvas, long paint);",b6049365a6b108b4ec7369011c8d1d65d79e1e14,"native_drawPaint(int,int)","native_drawPaint(long,long)",6,74,"private static native void native_drawPaint(long nativeCanvas, long nativePaint);",9297ccc12e793e6d03a49134900d63b12f1fdee5,"native_drawPaint(long,long)",35661,16,17
544212,tests_telephonytests_src_com_android_internal_telephony_ims_ImsManagerTest.java,,,,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetValues() { com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, mPhoneId); imsManager.setWfcMode(ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_MODE), eq(""1"")); imsManager.setWfcMode(ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED, true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_ROAMING_MODE), eq(""1"")); imsManager.setVtSetting(false); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.VT_IMS_ENABLED), eq(""0"")); imsManager.setEnhanced4gLteModeSetting(true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.ENHANCED_4G_MODE_ENABLED), eq(""1"")); imsManager.setWfcSetting(true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_ENABLED), eq(""1"")); }",dc0b8058d9c479494b574b7202b44f1050d8ca5c,,testSetValues(),4,0,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testSetValues() { com.android.ims.ImsManager imsManager = com.android.ims.ImsManager.getInstance(mContext, mPhoneId); imsManager.setWfcMode(ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_MODE), eq(""1"")); imsManager.setWfcMode(ImsConfig.WfcModeFeatureValueConstants.CELLULAR_PREFERRED, true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_ROAMING_MODE), eq(""1"")); imsManager.setVtSetting(false); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.VT_IMS_ENABLED), eq(""0"")); mBundle.putBoolean(CarrierConfigManager.KEY_EDITABLE_ENHANCED_4G_LTE_BOOL, com.android.internal.telephony.ims.ImsManagerTest.ENHANCED_4G_MODE_EDITABLE); imsManager.setEnhanced4gLteModeSetting(true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.ENHANCED_4G_MODE_ENABLED), eq(""1"")); imsManager.setWfcSetting(true); verify(mSubscriptionController, times(1)).setSubscriptionProperty(eq(mSubId[0]), eq(SubscriptionManager.WFC_IMS_ENABLED), eq(""1"")); }",d9855229c66837c732d1c58f5e1aa743dc9caa47,testSetValues(),367120,336,392
91995,luni_src_main_java_libcore_io_ForwardingOs.java,49.0,"public void setsockoptInt(java.io.FileDescriptor fd, int level, int option, int value) throws libcore.io.ErrnoException { os.setsockoptInt(fd, level, option, value); }",17cf7ac5b7732c8fd99fa20cc8f61a024461c80b,"public void setsockoptInt(java.io.FileDescriptor fd, int level, int option, int value) throws android.os.ErrnoException { os.setsockoptInt(fd, level, option, value); }",f1b532c34e64507a43816aa026f0e3e2dbb141ec,"setsockoptInt(java.io.FileDescriptor,int,int,int)","setsockoptInt(java.io.FileDescriptor,int,int,int)",3,48,"public void setsockoptInt(java.io.FileDescriptor fd, int level, int option, int value) throws android.system.ErrnoException { os.setsockoptInt(fd, level, option, value); }",182bfa6f881b1d73e4d40175eaddf7fe38e9178c,"setsockoptInt(java.io.FileDescriptor,int,int,int)",170488,48,48
83684,harmony-tests_src_test_java_org_apache_harmony_tests_java_lang_StringBuilderTest.java,9.0,"public void test_ConstructorI() { java.lang.StringBuilder sb = new java.lang.StringBuilder(24); assertNotNull(sb); assertEquals(24, sb.capacity()); try { new java.lang.StringBuilder((-1)); fail(""no exception""); } catch (java.lang.NegativeArraySizeException e) { } assertNotNull(new java.lang.StringBuilder(0)); }",d09f3d496e48ee4cb38743d243dd9f812881548e,"public void test_ConstructorI() { java.lang.StringBuilder sb = new java.lang.StringBuilder(24); assertNotNull(sb); assertTrue((24 <= (sb.capacity()))); try { new java.lang.StringBuilder((-1)); fail(""no exception""); } catch (java.lang.NegativeArraySizeException e) { } assertNotNull(new java.lang.StringBuilder(0)); }",b1a9171e99be78b6ae543239a2b9dd60f88f9b85,test_ConstructorI(),test_ConstructorI(),4,9,"public void test_ConstructorI() { java.lang.StringBuilder sb = new java.lang.StringBuilder(24); assertNotNull(sb); assertEquals(24, sb.capacity()); try { new java.lang.StringBuilder((-1)); fail(""no exception""); } catch (java.lang.NegativeArraySizeException e) { } assertNotNull(new java.lang.StringBuilder(0)); }",d09f3d496e48ee4cb38743d243dd9f812881548e,test_ConstructorI(),242782,80,78
654568,src_com_android_bluetooth_pbap_PbapStateMachine.java,23.0,"@java.lang.Override public void enter() { try { startObexServerSession(); } catch (java.io.IOException ex) { android.util.Log.e(com.android.bluetooth.pbap.PbapStateMachine.TAG, (""Caught exception starting OBEX server session"" + (ex.toString()))); } broadcastStateTransitions(); }",927416ff9e334190029c4ac991f7db0dae876935,"@java.lang.Override public void enter() { try { startObexServerSession(); } catch (java.io.IOException ex) { android.util.Log.e(com.android.bluetooth.pbap.PbapStateMachine.TAG, (""Caught exception starting OBEX server session"" + (ex.toString()))); } broadcastStateTransitions(); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.PBAP); }",c9f2d77c3823300194f802a63fb0174f10b47e6d,enter(),enter(),18,23,"@java.lang.Override public void enter() { try { startObexServerSession(); } catch (java.io.IOException ex) { android.util.Log.e(com.android.bluetooth.pbap.PbapStateMachine.TAG, (""Caught exception starting OBEX server session"" + (ex.toString()))); } broadcastStateTransitions(); com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.PBAP); }",dbc05e4350ee91f765df2b6622be2bfefb41f248,enter(),135918,106,105
325465,tzdata_tools2_src_main_libcore_tzdata_update2_tools_TimeZoneBundleBuilder.java,1.0,public libcore.tzdata.update2.tools.TimeZoneBundleBuilder setAndroidRevision(java.lang.String androidRevision) { this.androidRevision = androidRevision; return this; },57401c4660ecc6cfe2d721c7405ef120b6be5bd1,public libcore.tzdata.update2.tools.TimeZoneBundleBuilder setRevision(java.lang.String revision) { this.revision = revision; return this; },6c6ca121c37a55dfce0bdedc8134c18e56ee5ce0,setAndroidRevision(java.lang.String),setRevision(java.lang.String),3,5,"public libcore.tzdata.update2.tools.TimeZoneBundleBuilder replaceFormatVersionForTests(int majorVersion, int minorVersion) { try { bundleVersion = new libcore.tzdata.update2.BundleVersion(majorVersion, minorVersion, bundleVersion.rulesVersion, bundleVersion.revision); } catch (libcore.tzdata.update2.BundleException e) { throw new java.lang.IllegalArgumentException(); } return this; }",656720ef144db44fdf8fedbe8110ffcaf885d4d8,"replaceFormatVersionForTests(int,int)",402119,37,95
378656,services_core_java_com_android_server_NsdService.java,39.0,"private void sendNsdStateChangeBroadcast(boolean enabled) { final android.content.Intent intent = new android.content.Intent(android.net.nsd.NsdManager.ACTION_NSD_STATE_CHANGED); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); if (enabled) { intent.putExtra(NsdManager.EXTRA_NSD_STATE, NsdManager.NSD_STATE_ENABLED); } else { intent.putExtra(NsdManager.EXTRA_NSD_STATE, NsdManager.NSD_STATE_DISABLED); } mContext.sendStickyBroadcastAsUser(intent, UserHandle.ALL); }",e530ee66ea02001586bd768012a0ac875d5a63a2,"private void sendNsdStateChangeBroadcast(boolean isEnabled) { final android.content.Intent intent = new android.content.Intent(android.net.nsd.NsdManager.ACTION_NSD_STATE_CHANGED); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); intent.putExtra(NsdManager.EXTRA_NSD_STATE, enabledMessage(isEnabled)); mContext.sendStickyBroadcastAsUser(intent, UserHandle.ALL); }",b8fb8c52d21704b8068bd67559021b5533f6ffba,sendNsdStateChangeBroadcast(boolean),sendNsdStateChangeBroadcast(boolean),7,38,"private void sendNsdStateChangeBroadcast(boolean isEnabled) { final android.content.Intent intent = new android.content.Intent(android.net.nsd.NsdManager.ACTION_NSD_STATE_CHANGED); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); int nsdState = (isEnabled) ? android.net.nsd.NsdManager.NSD_STATE_ENABLED : android.net.nsd.NsdManager.NSD_STATE_DISABLED; intent.putExtra(NsdManager.EXTRA_NSD_STATE, nsdState); mContext.sendStickyBroadcastAsUser(intent, UserHandle.ALL); }",b5ee388492c00e2fb28123e1ab5a8d6aee19956b,sendNsdStateChangeBroadcast(boolean),357928,104,149
395615,src_com_android_bluetooth_avrcp_BrowsedMediaPlayer.java,15.0,"public void getItemAttr(com.android.bluetooth.avrcp.AvrcpCmd.ItemAttrCmd itemAttr) { java.lang.String mediaID; if (com.android.bluetooth.avrcp.BrowsedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG, ""getItemAttr""); mItemAttrReqObj = itemAttr; mediaID = byteToString(itemAttr.mUid); if (mediaID == null) { android.util.Log.e(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG, ""uid is invalid""); mMediaInterface.getItemAttrRsp(mBDAddr, AvrcpConstants.RSP_INV_ITEM, null); return; } if ((itemAttr.mScope) != (AvrcpConstants.BTRC_SCOPE_FILE_SYSTEM)) { android.util.Log.e(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG, ""invalid scope""); mMediaInterface.getItemAttrRsp(mBDAddr, AvrcpConstants.RSP_INV_SCOPE, null); return; } if ((mMediaBrowser) == null) { android.util.Log.e(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG, ""mMediaBrowser is null""); mMediaInterface.getItemAttrRsp(mBDAddr, AvrcpConstants.RSP_INTERNAL_ERR, null); return; } mMediaBrowser.subscribe(mediaID, itemAttrCb); }",6d4bb22aa8cfbefe84fce5c7ca7f8b529d64630d,"public void getItemAttr(com.android.bluetooth.avrcp.AvrcpCmd.ItemAttrCmd itemAttr) { java.lang.String mediaID; if (com.android.bluetooth.avrcp.BrowsedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG, ""getItemAttr""); mItemAttrReqObj = itemAttr; mediaID = byteToString(itemAttr.mUid); if (mediaID == null) { android.util.Log.e(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG, ""uid is invalid""); mMediaInterface.getItemAttrRsp(mBDAddr, AvrcpConstants.RSP_INV_ITEM, null); return; } if ((itemAttr.mScope) != (AvrcpConstants.BTRC_SCOPE_FILE_SYSTEM)) { android.util.Log.e(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG, ""invalid scope""); mMediaInterface.getItemAttrRsp(mBDAddr, AvrcpConstants.RSP_INV_SCOPE, null); return; } if ((mMediaBrowser) == null) { android.util.Log.e(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG, ""mMediaBrowser is null""); mMediaInterface.getItemAttrRsp(mBDAddr, AvrcpConstants.RSP_INTERNAL_ERR, null); return; } mMediaIdForGetItemAttrib = mediaID; mMediaBrowser.subscribe(mPathStack.peek(), itemAttrCb); }",b60ff0107d1471ab4f550845dbe3838109a435b3,getItemAttr(com.android.bluetooth.avrcp.AvrcpCmd$ItemAttrCmd),getItemAttr(com.android.bluetooth.avrcp.AvrcpCmd$ItemAttrCmd),14,15,"public void getItemAttr(com.android.bluetooth.avrcp.AvrcpCmd.ItemAttrCmd itemAttr) { java.lang.String mediaID; if (com.android.bluetooth.avrcp.BrowsedMediaPlayer.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG, ""getItemAttr""); mediaID = byteToString(itemAttr.mUid); if (mediaID == null) { android.util.Log.e(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG, ""uid is invalid""); mMediaInterface.getItemAttrRsp(mBDAddr, AvrcpConstants.RSP_INV_ITEM, null); return; } if ((itemAttr.mScope) != (AvrcpConstants.BTRC_SCOPE_FILE_SYSTEM)) { android.util.Log.e(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG, ""invalid scope""); mMediaInterface.getItemAttrRsp(mBDAddr, AvrcpConstants.RSP_INV_SCOPE, null); return; } if ((mMediaBrowser) == null) { android.util.Log.e(com.android.bluetooth.avrcp.BrowsedMediaPlayer.TAG, ""mMediaBrowser is null""); mMediaInterface.getItemAttrRsp(mBDAddr, AvrcpConstants.RSP_INTERNAL_ERR, null); return; } mMediaBrowser.subscribe(mPathStack.peek(), new com.android.bluetooth.avrcp.BrowsedMediaPlayer.ItemAttribSubscriber(itemAttr, mediaID)); }",e95a7c1e0c40a79ebfca85ef7271bf55d915e416,getItemAttr(com.android.bluetooth.avrcp.AvrcpCmd$ItemAttrCmd),156102,356,356
49484,hierarchyviewer2_libs_hierarchyviewerlib_src_com_android_hierarchyviewerlib_HierarchyViewerDirector.java,44.0,"@java.lang.Override public void deviceConnected(final com.android.ddmlib.IDevice device) { executeInBackground(""Connecting device"", new java.lang.Runnable() { @java.lang.Override public void run() { if (com.android.hierarchyviewerlib.models.DeviceSelectionModel.getModel().containsDevice(device)) { windowsChanged(device); } else if (device.isOnline()) { com.android.hierarchyviewerlib.device.DeviceBridge.setupDeviceForward(device); if (!(com.android.hierarchyviewerlib.device.DeviceBridge.isViewServerRunning(device))) { if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { try { java.lang.Thread.sleep(2000); } catch (java.lang.InterruptedException e) { } if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, (""Unable to debug device "" + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); } else { loadViewServerInfoAndWindows(device); } return; } } loadViewServerInfoAndWindows(device); } } }); }",c2f53791507e829d615462396c09ffa2d92fb553,"@java.lang.Override public void deviceConnected(final com.android.ddmlib.IDevice device) { executeInBackground(""Connecting device"", new java.lang.Runnable() { @java.lang.Override public void run() { com.android.hierarchyviewerlib.device.IHvDevice hvDevice; synchronized(com.android.hierarchyviewerlib.HierarchyViewerDirector.mDevicesLock) { hvDevice = mDevices.get(device); if (hvDevice == null) { hvDevice = com.android.hierarchyviewerlib.HvDeviceFactory.create(device); hvDevice.initializeViewDebug(); mDevices.put(device, hvDevice); } } com.android.hierarchyviewerlib.models.DeviceSelectionModel.getModel().addDevice(hvDevice); } }); }",5c6d67eb4430dba873cf0f5f93d4212dec37a765,deviceConnected(com.android.ddmlib.IDevice),deviceConnected(com.android.ddmlib.IDevice),7,50,"@java.lang.Override public void deviceConnected(final com.android.ddmlib.IDevice device) { executeInBackground(""Connecting device"", new java.lang.Runnable() { @java.lang.Override public void run() { com.android.hierarchyviewerlib.device.IHvDevice hvDevice; synchronized(com.android.hierarchyviewerlib.HierarchyViewerDirector.mDevicesLock) { hvDevice = mDevices.get(device); if (hvDevice == null) { hvDevice = com.android.hierarchyviewerlib.device.HvDeviceFactory.create(device); hvDevice.initializeViewDebug(); hvDevice.addWindowChangeListener(com.android.hierarchyviewerlib.HierarchyViewerDirector.getDirector()); mDevices.put(device, hvDevice); } else { hvDevice.initializeViewDebug(); } } com.android.hierarchyviewerlib.models.DeviceSelectionModel.getModel().addDevice(hvDevice); focusChanged(device); } }); }",d12ca35385881ffd84b7d117d92ffd27b09c6419,deviceConnected(com.android.ddmlib.IDevice),75970,174,215
326591,web_dashboard_appengine_servlet_src_main_java_com_android_vts_util_PerformanceSummary.java,0.0,"public void addData(com.android.vts.proto.VtsReportMessage.TestReportMessage testReportMessage) { if (!(includeInSummary(testReportMessage))) return; for (com.android.vts.proto.VtsReportMessage.ProfilingReportMessage profilingReportMessage : testReportMessage.getProfilingList()) { if ((profilingReportMessage.getRegressionMode()) == (com.android.vts.proto.VtsReportMessage.VtsProfilingRegressionMode.VTS_REGRESSION_MODE_DISABLED)) { continue; } java.lang.String name = profilingReportMessage.getName().toStringUtf8(); java.lang.String optionSuffix = com.android.vts.util.PerformanceUtil.getOptionKeys(profilingReportMessage.getOptionsList(), optionSplitKeys); if (!(optionSuffix.equals(""""))) { name += ("" ("" + optionSuffix) + "")""; } switch (profilingReportMessage.getType()) { case UNKNOWN_VTS_PROFILING_TYPE : case VTS_PROFILING_TYPE_TIMESTAMP : com.android.vts.util.PerformanceSummary.logger.log(java.util.logging.Level.WARNING, (""Timestamp profiling data skipped : "" + name)); break; case VTS_PROFILING_TYPE_LABELED_VECTOR : if (((profilingReportMessage.getLabelList().size()) == 0) || ((profilingReportMessage.getLabelList().size()) != (profilingReportMessage.getValueList().size()))) { continue; } if (!(summaryMap.containsKey(name))) { summaryMap.put(name, new com.android.vts.util.ProfilingPointSummary()); } summaryMap.get(name).update(profilingReportMessage); break; case VTS_PROFILING_TYPE_UNLABELED_VECTOR : if ((profilingReportMessage.getValueList().size()) == 0) return; if (!(summaryMap.containsKey(name))) { summaryMap.put(name, new com.android.vts.util.ProfilingPointSummary()); } summaryMap.get(name).update(profilingReportMessage); default : break; } } }",0e495fec09ab30c3b7124e5902f4e167f98a00a0,"public void addData(com.android.vts.proto.VtsReportMessage.TestReportMessage testReportMessage) { if (!(includeInSummary(testReportMessage))) return; for (com.android.vts.proto.VtsReportMessage.ProfilingReportMessage profilingReportMessage : testReportMessage.getProfilingList()) { if ((profilingReportMessage.getRegressionMode()) == (com.android.vts.proto.VtsReportMessage.VtsProfilingRegressionMode.VTS_REGRESSION_MODE_DISABLED)) { continue; } java.lang.String name = profilingReportMessage.getName().toStringUtf8(); java.lang.String optionSuffix = com.android.vts.util.PerformanceUtil.getOptionKeys(profilingReportMessage.getOptionsList(), optionSplitKeys); switch (profilingReportMessage.getType()) { case UNKNOWN_VTS_PROFILING_TYPE : case VTS_PROFILING_TYPE_TIMESTAMP : com.android.vts.util.PerformanceSummary.logger.log(java.util.logging.Level.WARNING, (""Timestamp profiling data skipped : "" + name)); break; case VTS_PROFILING_TYPE_LABELED_VECTOR : if (((profilingReportMessage.getLabelList().size()) == 0) || ((profilingReportMessage.getLabelList().size()) != (profilingReportMessage.getValueList().size()))) { continue; } if (!(optionSuffix.equals(""""))) { name += ("" ("" + optionSuffix) + "")""; } if (!(summaryMap.containsKey(name))) { summaryMap.put(name, new com.android.vts.util.ProfilingPointSummary()); } summaryMap.get(name).update(profilingReportMessage); break; case VTS_PROFILING_TYPE_UNLABELED_VECTOR : if ((profilingReportMessage.getValueList().size()) == 0) return; if (!(summaryMap.containsKey(optionSuffix))) { summaryMap.put(optionSuffix, new com.android.vts.util.ProfilingPointSummary()); } summaryMap.get(optionSuffix).updateLabel(profilingReportMessage, profilingReportMessage.getName()); break; default : break; } } }",d3d1315af9535bd6d4787a372a85d73b31976c59,addData(com.android.vts.proto.VtsReportMessage.TestReportMessage),addData(com.android.vts.proto.VtsReportMessage.TestReportMessage),4,0,"public void addData(com.android.vts.proto.VtsReportMessage.TestReportMessage testReportMessage) { if (!(includeInSummary(testReportMessage))) return; for (com.android.vts.proto.VtsReportMessage.ProfilingReportMessage profilingReportMessage : testReportMessage.getProfilingList()) { if ((profilingReportMessage.getRegressionMode()) == (com.android.vts.proto.VtsReportMessage.VtsProfilingRegressionMode.VTS_REGRESSION_MODE_DISABLED)) { continue; } java.lang.String name = profilingReportMessage.getName().toStringUtf8(); java.lang.String optionSuffix = com.android.vts.util.PerformanceUtil.getOptionKeys(profilingReportMessage.getOptionsList(), optionSplitKeys); switch (profilingReportMessage.getType()) { case VTS_PROFILING_TYPE_TIMESTAMP : com.android.vts.util.PerformanceSummary.logger.log(java.util.logging.Level.WARNING, (""Timestamp profiling data skipped : "" + name)); break; case VTS_PROFILING_TYPE_LABELED_VECTOR : if (((profilingReportMessage.getLabelList().size()) == 0) || ((profilingReportMessage.getLabelList().size()) != (profilingReportMessage.getValueList().size()))) { break; } if (!(optionSuffix.equals(""""))) { name += ("" ("" + optionSuffix) + "")""; } if (!(summaryMap.containsKey(name))) { summaryMap.put(name, new com.android.vts.util.ProfilingPointSummary()); } summaryMap.get(name).update(profilingReportMessage); break; case VTS_PROFILING_TYPE_UNLABELED_VECTOR : if ((profilingReportMessage.getValueList().size()) == 0) { break; } if (!(summaryMap.containsKey(optionSuffix))) { summaryMap.put(optionSuffix, new com.android.vts.util.ProfilingPointSummary()); } summaryMap.get(optionSuffix).updateLabel(profilingReportMessage, profilingReportMessage.getName()); break; case UNKNOWN_VTS_PROFILING_TYPE : default : break; } } }",9a142d58815fcfeeffbdb448d38645fccbf46567,addData(com.android.vts.proto.VtsReportMessage.TestReportMessage),489199,500,502
81416,tests_tests_renderscript_src_android_renderscript_cts_TestLog.java,,,,"private void checkLogFloat() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testLogFloat(in, out); verifyResultsLogFloat(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLogFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLogFloat(in, out); verifyResultsLogFloat(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLogFloat: "" + (e.toString()))); } }",51b67475aa3cea20b3dabc150ab1f44899797ae4,,checkLogFloat(),9,2,"private void checkLogFloatFloat() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, 4717217505947643252L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); script.forEach_testLogFloatFloat(in, out); verifyResultsLogFloatFloat(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLogFloatFloat: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 1), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testLogFloatFloat(in, out); verifyResultsLogFloatFloat(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testLogFloatFloat: "" + (e.toString()))); } }",760d51ab69904b39a7733382d856dcd17d89daaf,checkLogFloatFloat(),143318,309,291
629126,src_com_android_se_security_arf_PKCS15_PKCS15Handler.java,1.0,"public synchronized boolean loadAccessControlRules(java.lang.String secureElement) { mSELabel = secureElement; android.util.Log.i(mTag, ((""- Loading "" + (mSELabel)) + "" rules..."")); try { initACEntryPoint(); return updateACRules(); } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { throw ((java.util.MissingResourceException) (e)); } android.util.Log.e(mTag, (((mSELabel) + "" rules not correctly initialized! "") + (e.getLocalizedMessage()))); throw new java.security.AccessControlException(e.getLocalizedMessage()); } finally { if ((mArfChannel) != null) mSEHandle.closeArfChannel(); } }",09aabb31cd2c2a96181c82260ad05149dedd2f0d,"public synchronized boolean loadAccessControlRules(java.lang.String secureElement) throws java.util.NoSuchElementException { mSELabel = secureElement; android.util.Log.i(mTag, ((""- Loading "" + (mSELabel)) + "" rules..."")); try { initACEntryPoint(); return updateACRules(); } catch (java.util.NoSuchElementException e) { throw e; } catch (java.lang.Exception e) { if (e instanceof java.util.MissingResourceException) { throw ((java.util.MissingResourceException) (e)); } android.util.Log.e(mTag, (((mSELabel) + "" rules not correctly initialized! "") + (e.getLocalizedMessage()))); throw new java.security.AccessControlException(e.getLocalizedMessage()); } finally { if ((mArfChannel) != null) mSEHandle.closeArfChannel(); } }",9b6f7ea7cffd689730822cf4a5922383244787d5,loadAccessControlRules(java.lang.String),loadAccessControlRules(java.lang.String),6,1,"public synchronized boolean loadAccessControlRules(java.lang.String secureElement) throws java.io.IOException, java.util.MissingResourceException, java.util.NoSuchElementException { mSELabel = secureElement; android.util.Log.i(mTag, ((""- Loading "" + (mSELabel)) + "" rules..."")); try { initACEntryPoint(); return updateACRules(); } catch (java.io.IOException e) { throw e; } catch (java.util.MissingResourceException e) { throw e; } catch (java.util.NoSuchElementException e) { throw e; } catch (java.lang.Exception e) { android.util.Log.e(mTag, (((mSELabel) + "" rules not correctly initialized! "") + (e.getLocalizedMessage()))); throw new java.security.AccessControlException(e.getLocalizedMessage()); } finally { if ((mArfChannel) != null) mSEHandle.closeArfChannel(); } }",d7cb5f591ed4cc79470ff65a1264f6425add06ea,loadAccessControlRules(java.lang.String),64750,192,208
112176,build-system_builder_src_main_java_com_android_builder_core_DefaultProductFlavor.java,12.0,public void setRenderscriptNdkMode(java.lang.Boolean renderscriptNdkMode) { mRenderscriptNdkMode = renderscriptNdkMode; },b7e20d0bd9fb0206e75803a571cf68d9b8d520be,public void setRenderscriptNdkModeEnabled(java.lang.Boolean renderscriptNdkMode) { mRenderscriptNdkMode = renderscriptNdkMode; },74e3e3ab72d36c61706f110ccb7bcd89de47c6ee,setRenderscriptNdkMode(java.lang.Boolean),setRenderscriptNdkModeEnabled(java.lang.Boolean),5,15,public com.android.builder.model.ProductFlavor setRenderscriptNdkModeEnabled(java.lang.Boolean renderscriptNdkMode) { mRenderscriptNdkModeEnabled = renderscriptNdkMode; return this; },20350c4c1dca4f27c494bae698dace42329dba41,setRenderscriptNdkModeEnabled(java.lang.Boolean),424226,36,49
159876,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_dsl_BuildType.java,13.0,void ndk(org.gradle.api.Action<com.android.build.gradle.internal.dsl.NdkOptions> action) { action.execute(ndkConfig); },303660c19734a6239d3581e0ef103c6aebdcd205,public void ndk(org.gradle.api.Action<com.android.build.gradle.internal.dsl.NdkOptions> action) { action.execute(ndkConfig); },3d42ca0d7cd6f26e9a8c9e7ab84936b3b55418f6,ndk(org.gradle.api.Action),ndk(org.gradle.api.Action),3,13,public void ndk(@com.android.annotations.NonNull org.gradle.api.Action<com.android.build.gradle.internal.dsl.NdkOptions> action) { action.execute(ndkConfig); },8b921cd8bafa1193f0519a0fdf0da4bbd890d129,ndk(org.gradle.api.Action),29515,40,47
40084,src_java_com_android_internal_telephony_uicc_IccCardProxy.java,35.0,"public void broadcastIccStateChangedIntent(java.lang.String value, java.lang.String reason) { if (mQuietMode) { log((((""QuietMode: NOT Broadcasting intent ACTION_SIM_STATE_CHANGED "" + value) + "" reason "") + reason)); return; } android.content.Intent intent = new android.content.Intent(TelephonyIntents.ACTION_SIM_STATE_CHANGED); intent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING); intent.putExtra(PhoneConstants.PHONE_NAME_KEY, ""Phone""); intent.putExtra(IccCardConstants.INTENT_KEY_ICC_STATE, value); intent.putExtra(IccCardConstants.INTENT_KEY_LOCKED_REASON, reason); if (com.android.internal.telephony.IccCardProxy.DBG) log((((""Broadcasting intent ACTION_SIM_STATE_CHANGED "" + value) + "" reason "") + reason)); android.app.ActivityManagerNative.broadcastStickyIntent(intent, android.Manifest.permission.READ_PHONE_STATE); }",4f7ecc0c5dda41662c95ddd1dcd3d246839584b7,"public void broadcastIccStateChangedIntent(java.lang.String value, java.lang.String reason) { if (mQuietMode) { log((((""QuietMode: NOT Broadcasting intent ACTION_SIM_STATE_CHANGED "" + value) + "" reason "") + reason)); return; } android.content.Intent intent = new android.content.Intent(com.android.internal.telephony.TelephonyIntents.ACTION_SIM_STATE_CHANGED); intent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING); intent.putExtra(PhoneConstants.PHONE_NAME_KEY, ""Phone""); intent.putExtra(IccCardConstants.INTENT_KEY_ICC_STATE, value); intent.putExtra(IccCardConstants.INTENT_KEY_LOCKED_REASON, reason); if (com.android.internal.telephony.uicc.IccCardProxy.DBG) log((((""Broadcasting intent ACTION_SIM_STATE_CHANGED "" + value) + "" reason "") + reason)); android.app.ActivityManagerNative.broadcastStickyIntent(intent, android.Manifest.permission.READ_PHONE_STATE); }",a82ac349656af6c5277515bc2bf398190f356b35,"broadcastIccStateChangedIntent(java.lang.String,java.lang.String)","broadcastIccStateChangedIntent(java.lang.String,java.lang.String)",27,36,"private void broadcastIccStateChangedIntent(java.lang.String value, java.lang.String reason) { synchronized(mLock) { if (mQuietMode) { log((((""QuietMode: NOT Broadcasting intent ACTION_SIM_STATE_CHANGED "" + value) + "" reason "") + reason)); return; } android.content.Intent intent = new android.content.Intent(com.android.internal.telephony.TelephonyIntents.ACTION_SIM_STATE_CHANGED); intent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING); intent.putExtra(PhoneConstants.PHONE_NAME_KEY, ""Phone""); intent.putExtra(IccCardConstants.INTENT_KEY_ICC_STATE, value); intent.putExtra(IccCardConstants.INTENT_KEY_LOCKED_REASON, reason); if (com.android.internal.telephony.uicc.IccCardProxy.DBG) log((((""Broadcasting intent ACTION_SIM_STATE_CHANGED "" + value) + "" reason "") + reason)); android.app.ActivityManagerNative.broadcastStickyIntent(intent, android.Manifest.permission.READ_PHONE_STATE, UserHandle.USER_ALL); } }",d97c5d8e5cb9187be115ec59deabc902553f9907,"broadcastIccStateChangedIntent(java.lang.String,java.lang.String)",174479,251,265
212127,test_564-checker-bitcount_src_Main.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static void testBitCountBoolean() { Main.expectEqualsInt(Main.bitCountBoolean(false), 0); Main.expectEqualsInt(Main.bitCountBoolean(true), 1); }",9cd6a0d03e6b1869784597a70550a512c806c29c,,testBitCountBoolean(),3,12,"public static void testBitCountBoolean() { Main.expectEqualsInt(Main.$noinline$BitCountBoolean(false), 0); Main.expectEqualsInt(Main.$noinline$BitCountBoolean(true), 1); }",1bbe45bc690e9d01f7c81510c46fc5e8edd084b8,testBitCountBoolean(),55336,38,48
116091,luni_src_test_java_libcore_javax_net_ssl_DefaultHostnameVerifierTest.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean verifyWithHostnamePattern(java.lang.String hostname, java.lang.String pattern) { libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession session = new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession(); session.peerCertificates = new java.security.cert.Certificate[]{ new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate((""cn="" + pattern)) }; boolean resultWhenPatternInCn = verifier.verify(hostname, session); session.peerCertificates = new java.security.cert.Certificate[]{ new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate(""ou=test"").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, pattern) }; boolean resultWhenPatternInSubjectAltName = verifier.verify(hostname, session); if (resultWhenPatternInCn != resultWhenPatternInSubjectAltName) { fail(((((((((""Different results between pattern in CN and SubjectAltName."" + "" hostname : "") + hostname) + "", pattern: "") + pattern) + "", when pattern in CN: "") + resultWhenPatternInCn) + "", when pattern in SubjectAltName: "") + resultWhenPatternInSubjectAltName)); } return resultWhenPatternInCn; }",812b5892e2afa9c2e96b76072ded6e12ea9575e2,,"verifyWithHostnamePattern(java.lang.String,java.lang.String)",3,21,"private boolean verifyWithDomainNamePattern(java.lang.String hostname, java.lang.String pattern) { libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession session = new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubSSLSession(); session.peerCertificates = new java.security.cert.Certificate[]{ new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate((""cn="" + pattern)) }; boolean resultWhenPatternInCn = verifier.verify(hostname, session); session.peerCertificates = new java.security.cert.Certificate[]{ new libcore.javax.net.ssl.DefaultHostnameVerifierTest.StubX509Certificate(""ou=test"").addSubjectAlternativeName(libcore.javax.net.ssl.DefaultHostnameVerifierTest.ALT_DNS_NAME, pattern) }; boolean resultWhenPatternInSubjectAltName = verifier.verify(hostname, session); if (resultWhenPatternInCn != resultWhenPatternInSubjectAltName) { fail(((((((((""Different results between pattern in CN and SubjectAltName."" + "" hostname : "") + hostname) + "", pattern: "") + pattern) + "", when pattern in CN: "") + resultWhenPatternInCn) + "", when pattern in SubjectAltName: "") + resultWhenPatternInSubjectAltName)); } return resultWhenPatternInCn; }",903d3be671281bf43c0c6ec03d09f305fa552aef,"verifyWithDomainNamePattern(java.lang.String,java.lang.String)",120877,304,304
39410,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_launch_junit_runtime_TestCollector.java,5.0,"@java.lang.Override public void testRunStarted(java.lang.String ignoredRunName, int testCount) { mTotalTestCount = testCount; }",3eed1ecf50c562936ddd62cdf0192360fd36a323,"@java.lang.Override public void testRunStarted(java.lang.String ignoredRunName, int testCount) { mTotalTestCount = testCount; java.lang.System.out.println((""test Run started, # of tests = "" + testCount)); }",8846a40bd006d9e7314f4e71b4b936f1790fb8ea,"testRunStarted(java.lang.String,int)","testRunStarted(java.lang.String,int)",3,5,"@java.lang.Override public void testRunStarted(java.lang.String ignoredRunName, int testCount) { mTotalTestCount = testCount; }",3eed1ecf50c562936ddd62cdf0192360fd36a323,"testRunStarted(java.lang.String,int)",292167,59,35
257520,jack_src_com_android_jack_cfg_CfgBuilder.java,12.0,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCaseStatement caseStatement) { if (!(currentStmts.isEmpty())) { com.android.jack.cfg.NormalBasicBlock caseBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(caseBlock); forwardBranchResolver.addNormalBasicBlock(caseBlock, caseStatement); } super.visit(caseStatement); return true; }",2ea2524b134db123bda9b3ab1f994788863278e8,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCaseStatement caseStatement) { if (!(currentStmts.isEmpty())) { com.android.jack.cfg.NormalBasicBlock caseBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); tracer.getStatistic(com.android.jack.cfg.CfgBuilder.CREATED_BASIC_BLOCK).incValue(); setBlockOfStatement(caseBlock); forwardBranchResolver.addNormalBasicBlock(caseBlock, caseStatement); } super.visit(caseStatement); return true; }",2ea7fb6e09723964e242710c1d6282dfce008e3d,visit(com.android.jack.ir.ast.JCaseStatement),visit(com.android.jack.ir.ast.JCaseStatement),5,12,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCaseStatement caseStatement) { if (!(currentStmts.isEmpty())) { com.android.jack.cfg.NormalBasicBlock caseBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(caseBlock); forwardBranchResolver.addNormalBasicBlock(caseBlock, caseStatement); } super.visit(caseStatement); return true; }",2ea2524b134db123bda9b3ab1f994788863278e8,visit(com.android.jack.ir.ast.JCaseStatement),94,138,113
633606,src_com_android_bluetooth_hearingaid_HearingAidNativeInterface.java,,,,public static void setVolume(int volume) { com.android.bluetooth.hearingaid.HearingAidNativeInterface.setVolumeNative(volume); },5542d50f7b07ca1d5a482d0eeca499d381b9d4df,,setVolume(int),34,3,@android.support.annotation.VisibleForTesting(otherwise = android.support.annotation.VisibleForTesting.PACKAGE_PRIVATE) public void setVolume(int volume) { setVolumeNative(volume); },b1632923208a72f450e33060771a3ec776a984d8,setVolume(int),484204,35,41
137966,jack-tests_tests_com_android_jack_error_CommandLineErrorTest.java,0.0,"@org.junit.Test public void testCommandLineError002() throws java.lang.Exception { com.android.jack.test.helper.ErrorTestHelper ite = new com.android.jack.test.helper.ErrorTestHelper(); com.android.jack.test.toolchain.JackApiToolchain jackApiToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); jackApiToolchain.setErrorStream(errOut); jackApiToolchain.setOutputStream(out); try { jackApiToolchain.addToClasspath(jackApiToolchain.getDefaultBootClasspath()).srcToExe(ite.getOutputDexFolder(), false, ite.getSourceFolder()); } finally { junit.framework.Assert.assertEquals("""", errOut.toString()); junit.framework.Assert.assertTrue(out.toString().contains(""Usage:"")); } }",2905ae645592e12fda3a56bfa4aff2d58d4996fc,"@org.junit.Test public void testCommandLineError002() throws java.lang.Exception { com.android.jack.test.helper.ErrorTestHelper ite = new com.android.jack.test.helper.ErrorTestHelper(); com.android.jack.test.toolchain.JackApiToolchain jackApiToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); jackApiToolchain.setErrorStream(errOut); jackApiToolchain.setOutputStream(out); try { jackApiToolchain.addToClasspath(jackApiToolchain.getDefaultBootClasspath()).srcToExe(ite.getOutputDexFolder(), false, ite.getSourceFolder()); } finally { junit.framework.Assert.assertEquals("""", errOut.toString()); java.lang.System.out.println(out.toString()); junit.framework.Assert.assertTrue(out.toString().contains(""Usage:"")); } }",cf0039270d0a36c729ed8bd090c88b6f79fbad93,testCommandLineError002(),testCommandLineError002(),3,0,"@org.junit.Test public void testCommandLineError002() throws java.lang.Exception { com.android.jack.test.helper.ErrorTestHelper ite = new com.android.jack.test.helper.ErrorTestHelper(); com.android.jack.test.toolchain.JackApiToolchainBase jackApiToolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchainBase.class); java.io.ByteArrayOutputStream errOut = new java.io.ByteArrayOutputStream(); java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); jackApiToolchain.setErrorStream(errOut); jackApiToolchain.setOutputStream(out); try { jackApiToolchain.addToClasspath(jackApiToolchain.getDefaultBootClasspath()).srcToExe(ite.getOutputDexFolder(), false, ite.getSourceFolder()); } finally { junit.framework.Assert.assertEquals("""", errOut.toString()); junit.framework.Assert.assertEquals("""", out.toString()); } }",15abf74bbacbd289c28f89a7d84dc77cd66d8559,testCommandLineError002(),337810,251,234
153181,test_422-type-conversion_src_Main.java,28.0,static short $opt$ByteToShort(byte a) { if (Main.doThrow) throw new java.lang.Error(); return ((short) (a)); },e5ca8e0495380930a87a84f91dfb78d18460842d,static short $opt$noinline$ByteToShort(byte a) { return ((short) (a)); },6554e8078b614f52d64696a18ba7ca0cbdccbc1a,$opt$ByteToShort(byte),$opt$noinline$ByteToShort(byte),5,8,static short $opt$noinline$ByteToShort(byte a) { if (Main.doThrow) throw new java.lang.Error(); return ((short) (a)); },8286740f6c6c4b25028260d26594743e9910cc96,$opt$noinline$ByteToShort(byte),516516,26,40
559061,tests_vr_src_android_vr_cts_VrSetFIFOThreadTest.java,0.0,"@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getTargetContext(); mOldVrListener = Settings.Secure.getString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS); }",2029777bb2d965effe151b9e8e308685c8a53e7f,"@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getTargetContext(); mOldVrListener = Settings.Secure.getString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS); mIsVrHeadset = (""1"".equals(android.os.SystemProperties.get(android.vr.cts.VrSetFIFOThreadTest.VR_STANDALONE_PROPERTY, ""0""))) ? true : false; }",ed361a9c015d48675205632095318ef79fb4cbf7,setUp(),setUp(),5,0,"@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); mContext = getInstrumentation().getTargetContext(); mOldVrListener = Settings.Secure.getString(mContext.getContentResolver(), android.vr.cts.VrSetFIFOThreadTest.ENABLED_VR_LISTENERS); java.lang.String result = com.android.compatibility.common.util.SystemUtil.runShellCommand(getInstrumentation(), android.vr.cts.VrSetFIFOThreadTest.DUMP_VRMANAGER); mDumpLines.clear(); java.util.Collections.addAll(mDumpLines, result.split(""\\n"")); if (""enabled"".equals(parseVrManagerDumpsys(mDumpLines))) { mPersistentVrModeEnabled = true; } }",d735de79218feed0ceddbff290ee460ceb76e08e,setUp(),502734,125,174
81416,tests_tests_renderscript_src_android_renderscript_cts_CoreMathVerifier.java,,,,public static void computeLength(android.renderscript.cts.TestLength.ArgumentsFloatNFloat args) { args.ulf = 4; args.ulfRelaxed = 12; double sum = 0.0F; for (int i = 0; i < (args.inV.length); i++) { sum += (args.inV[i]) * (args.inV[i]); } args.out = ((float) (java.lang.Math.sqrt(sum))); },57066a7a101abb6e3e0e2d887efc7ebcf91abbf6,,computeLength(android.renderscript.cts.TestLength$ArgumentsFloatNFloat),9,36,"public static void computeMax(android.renderscript.cts.TestMax.ArgumentsUcharUcharUchar args) { args.ulf = 0; args.ulfRelaxed = 0; args.out = ((byte) (java.lang.StrictMath.max(((args.inV1) & 255), ((args.inV2) & 255)))); }",f3ea37a85e7404af6db40939d54e01c74983b6b7,computeMax(android.renderscript.cts.TestMax$ArgumentsUcharUcharUchar),142529,104,79
373733,src_com_android_bluetooth_opp_BluetoothOppFileProvider.java,,,,"@java.lang.Override public void onReceive(final android.content.Context context, android.content.Intent intent) { synchronized(this) { android.telecom.Log.d(com.android.bluetooth.opp.BluetoothOppFileProvider.TAG, (""Received broadcast "" + (intent.getAction()))); mContext.unregisterReceiver(this); if (Intent.ACTION_USER_UNLOCKED.equals(intent.getAction())) { attachInfo(mContext, mProviderInfo); } } }",1dfec22f1bbc2b3bc1f3c7bd377344aad84795f6,,"onReceive(android.content.Context,android.content.Intent)",8,1,"@java.lang.Override public void onReceive(final android.content.Context context, android.content.Intent intent) { if (Intent.ACTION_USER_UNLOCKED.equals(intent.getAction())) { attachInfo(mContext, mProviderInfo); } }",040efb5160b20cedc945d74805d6ad025640ab91,"onReceive(android.content.Context,android.content.Intent)",412916,105,55
351441,src_java_com_android_internal_telephony_imsphone_ImsPhoneConnection.java,48.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setPreciseDisconnectCause(int cause) { mPreciseCause = cause; },2f241517ab26c659c6c177e824a13af25f709153,,setPreciseDisconnectCause(int),10,7,public void setPreciseDisconnectCause(int cause) { mPreciseDisconnectCause = cause; },77ad3d3f0260b6d0211d549046135c030d2a2dd6,setPreciseDisconnectCause(int),24149,20,21
340750,tests_wifitests_src_com_android_server_wifi_WifiNativeTest.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testbuildAnqpQueryCommandWithMixedTypes() { java.lang.String bssid = ""34:12:ac:45:21:12""; java.util.TreeSet<java.lang.Integer> anqpIds = new java.util.TreeSet<>(java.util.Arrays.asList(1, 2, 5)); java.util.TreeSet<java.lang.Integer> hs20Subtypes = new java.util.TreeSet<>(java.util.Arrays.asList(3, 7)); java.lang.String expectedCommand = (""ANQP_GET "" + bssid) + "" 1,2,5,hs20:3,hs20:7""; assertEquals(expectedCommand, com.android.server.wifi.WifiNative.buildAnqpQueryCommand(bssid, anqpIds, hs20Subtypes)); }",1fa3870138184279bf86e579b5ae7f0918a1abd8,,testbuildAnqpQueryCommandWithMixedTypes(),3,12,"@org.junit.Test public void testbuildAnqpQueryCommandWithMixedTypes() { java.lang.String bssid = ""34:12:ac:45:21:12""; java.util.Set<java.lang.Integer> anqpIds = new java.util.TreeSet<>(java.util.Arrays.asList(1, 2, 5)); java.util.Set<java.lang.Integer> hs20Subtypes = new java.util.TreeSet<>(java.util.Arrays.asList(3, 7)); java.lang.String expectedCommand = (""ANQP_GET "" + bssid) + "" 1,2,5,hs20:3,hs20:7""; assertEquals(expectedCommand, com.android.server.wifi.WifiNative.buildAnqpQueryCommand(bssid, anqpIds, hs20Subtypes)); }",5e82ae54989ba36ea892dc186046aee1458bf03e,testbuildAnqpQueryCommandWithMixedTypes(),328488,181,181
42594,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_ui_PackagesPageImpl.java,,,,"@java.lang.Override public boolean onUpdateSource(com.android.sdklib.internal.repository.sources.SdkSource source, java.lang.Package[] newPackages) { final boolean changed = mDiffLogic.updateSourcePackages(displaySortByApi, source, newPackages); if (!(mGroupPackages.isDisposed())) { mGroupPackages.getDisplay().syncExec(new java.lang.Runnable() { @java.lang.Override public void run() { if (changed || ((mTreeViewer.getInput()) != (mDiffLogic.getCategories(isSortByApi())))) { refreshViewerInput(); } } }); } return !(mGroupPackages.isDisposed()); }",298b52e8dc9d3fc7217b852ad024f2176e217ac3,,"onUpdateSource(com.android.sdklib.internal.repository.sources.SdkSource,java.lang.Package[])",8,15,"@java.lang.Override public boolean onUpdateSource(com.android.sdklib.internal.repository.sources.SdkSource source, java.lang.Package[] newPackages) { final boolean changed = mDiffLogic.updateSourcePackages(displaySortByApi, source, newPackages); syncExec(new java.lang.Runnable() { @java.lang.Override public void run() { if (changed || ((mITreeViewer.getInput()) != (mDiffLogic.getCategories(isSortByApi())))) { refreshViewerInput(); } } }); return !(isUiDisposed()); }",e84f2ad02279001a4b8a83ed7dec8f47fd2b01d5,"onUpdateSource(com.android.sdklib.internal.repository.sources.SdkSource,java.lang.Package[])",195197,143,127
155012,sched_src_com_android_sched_util_Version.java,,,,"@javax.annotation.Nonnull public java.lang.String getVerboseVersion() { return ((((((versionName) + "" '"") + (releaseName)) + ""' ("") + ((buildId) != null ? buildId : ""engineering"")) + ((codeBase) != null ? ' ' + (codeBase) : """")) + "")""; }",6665c811d83062cbda742ac568f9ba39f2911bb0,,getVerboseVersion(),14,13,"@javax.annotation.Nonnull public java.lang.String getVerboseVersion() { return ((((((version) + "" '"") + (releaseName)) + ""' ("") + ((buildId) != null ? buildId : ""engineering"")) + ((codeBase) != null ? ' ' + (codeBase) : """")) + "")""; }",b7d7eb7cf696969869674d654c272a22bb5ba359,getVerboseVersion(),215305,79,78
511478,harnesses_tradefed_src_com_android_tradefed_targetprep_VtsDeviceInfoCollector.java,1.0,"@java.lang.Override public void setUp(com.android.tradefed.device.ITestDevice device, com.android.tradefed.build.IBuildInfo buildInfo) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : com.android.tradefed.targetprep.VtsDeviceInfoCollector.BUILD_KEYS.entrySet()) { buildInfo.addBuildAttribute(entry.getKey(), com.android.tradefed.util.ArrayUtil.join("","", device.getProperty(entry.getValue()))); } }",0ad14a49161322beff5f7d38f0267df88ffbf2f5,"@java.lang.Override public void setUp(com.android.tradefed.device.ITestDevice device, com.android.tradefed.build.IBuildInfo buildInfo) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : com.android.tradefed.targetprep.VtsDeviceInfoCollector.BUILD_KEYS.entrySet()) { buildInfo.addBuildAttribute(entry.getKey(), com.android.tradefed.util.ArrayUtil.join("","", device.getProperty(entry.getValue()))); } device.executeShellCommand(""stop""); }",17c69596b4e29e2291e482c19022bae9914ec42f,"setUp(com.android.tradefed.device.ITestDevice,com.android.tradefed.build.IBuildInfo)","setUp(com.android.tradefed.device.ITestDevice,com.android.tradefed.build.IBuildInfo)",8,1,"@java.lang.Override public void setUp(com.android.tradefed.device.ITestDevice device, com.android.tradefed.build.IBuildInfo buildInfo) throws com.android.tradefed.device.DeviceNotAvailableException, com.android.tradefed.targetprep.BuildError, com.android.tradefed.targetprep.TargetSetupError { for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : com.android.tradefed.targetprep.VtsDeviceInfoCollector.BUILD_KEYS.entrySet()) { buildInfo.addBuildAttribute(entry.getKey(), com.android.tradefed.util.ArrayUtil.join("","", device.getProperty(entry.getValue()))); } device.executeShellCommand(""stop""); device.executeShellCommand(""setprop sys.boot_completed 0""); }",7d914f6522988f4ee56c47f3e5a0a8812c0036c7,"setUp(com.android.tradefed.device.ITestDevice,com.android.tradefed.build.IBuildInfo)",381428,182,197
219271,java_tests_RsTest_src_com_android_rs_test_UT_reduce.java,35.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean findMinAbs(com.android.rs.test.RenderScript RS, float[] inputArray, java.lang.String testName, com.android.rs.test.UT_reduce.ReduceFindMinAbs reduction) { final long javaTimeStart = java.lang.System.currentTimeMillis(); final float javaRslt = findMinAbs(inputArray); final long javaTimeEnd = java.lang.System.currentTimeMillis(); final long rsTimeStart = java.lang.System.currentTimeMillis(); com.android.rs.test.Allocation inputAllocation = com.android.rs.test.Allocation.createSized(RS, com.android.rs.test.Element.F32(RS), inputArray.length); final long copyTimeStart = java.lang.System.currentTimeMillis(); inputAllocation.copyFrom(inputArray); final long kernelTimeStart = java.lang.System.currentTimeMillis(); final float rsRslt = reduction.run(inputAllocation); final long rsTimeEnd = java.lang.System.currentTimeMillis(); final boolean success = result(testName, new com.android.rs.test.UT_reduce.timing(javaTimeStart, javaTimeEnd, rsTimeStart, copyTimeStart, kernelTimeStart, rsTimeEnd, inputAllocation), java.lang.Math.abs(javaRslt), java.lang.Math.abs(rsRslt)); inputAllocation.destroy(); return success; }",d6f41d0a8feac47c17ae1bc932a207e2d8a26c85,,"findMinAbs(com.android.rs.test.RenderScript,float[],java.lang.String,com.android.rs.test.UT_reduce$ReduceFindMinAbs)",2,68,"private boolean findMinAbs(com.android.rs.test.RenderScript RS, float[] inputArray, java.lang.String testName, com.android.rs.test.UT_reduce.ReduceFindMinAbs reduction) { final long javaTimeStart = java.lang.System.currentTimeMillis(); final float javaResult = findMinAbs(inputArray); final long javaTimeEnd = java.lang.System.currentTimeMillis(); final long rsTimeStart = java.lang.System.currentTimeMillis(); com.android.rs.test.Allocation inputAllocation = com.android.rs.test.Allocation.createSized(RS, com.android.rs.test.Element.F32(RS), inputArray.length); final long copyTimeStart = java.lang.System.currentTimeMillis(); inputAllocation.copyFrom(inputArray); final long kernelTimeStart = java.lang.System.currentTimeMillis(); final float rsResult = reduction.run(inputAllocation); final long rsTimeEnd = java.lang.System.currentTimeMillis(); final boolean success = result(testName, new com.android.rs.test.UT_reduce.timing(javaTimeStart, javaTimeEnd, rsTimeStart, copyTimeStart, kernelTimeStart, rsTimeEnd, inputAllocation), java.lang.Math.abs(javaResult), java.lang.Math.abs(rsResult)); inputAllocation.destroy(); return success; }",87da86733b71d1a39134c403ccf4e4ba9f816b40,"findMinAbs(com.android.rs.test.RenderScript,float[],java.lang.String,com.android.rs.test.UT_reduce$ReduceFindMinAbs)",305031,312,304
556766,tests_telephonytests_src_com_android_internal_telephony_ServiceStateTest.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@android.test.suitebuilder.annotation.SmallTest public void testConvertBearerBitmaskToNetworkTypeBitmask() { int networkTypeBitmask = 276600; int bearerBitmask = 276728; assertEquals(networkTypeBitmask, android.telephony.ServiceState.convertBearerBitmaskToNetworkTypeBitmask(bearerBitmask)); }",97be102d24c8a7aabc1d18977a471e25d77f39c4,,testConvertBearerBitmaskToNetworkTypeBitmask(),11,4,"@android.test.suitebuilder.annotation.SmallTest public void testConvertBearerBitmaskToNetworkTypeBitmask() { int networkTypeBitmask = 276600; int bearerBitmask = 276728; assertEquals(networkTypeBitmask, android.telephony.ServiceState.convertBearerBitmaskToNetworkTypeBitmask(bearerBitmask)); networkTypeBitmask = 0; bearerBitmask = 0; assertEquals(networkTypeBitmask, android.telephony.ServiceState.convertBearerBitmaskToNetworkTypeBitmask(bearerBitmask)); }",63d3943846e6c69d478e200e159ac348a58e1010,testConvertBearerBitmaskToNetworkTypeBitmask(),97744,75,115
183637,server_jack-server_src_com_android_jack_server_JackHttpServer.java,51.0,"@java.lang.Override public void onRemoval(@javax.annotation.Nonnull com.google.common.cache.RemovalNotification<com.android.jack.server.JackHttpServer.VersionKey, com.android.jack.server.JackHttpServer.Program<com.android.jack.api.JackProvider>> notification) { com.android.jack.server.JackHttpServer.Program<com.android.jack.api.JackProvider> program = notification.getValue(); com.android.jack.api.JackProvider provider = program.getLoadedProgram(); final java.io.File jar = program.getJar(); if (provider != null) { com.android.jack.server.JackHttpServer.logger.info(((""Queuing "" + (jar.getPath())) + "" for deletion"")); final java.io.File deleteMarker = new java.io.File(((jar.getPath()) + (com.android.jack.server.JackHttpServer.DELETED_SUFFIX))); try { if (!(deleteMarker.createNewFile())) { throw new java.io.IOException(""File already exists""); } } catch (java.io.IOException e) { com.android.jack.server.JackHttpServer.logger.log(java.util.logging.Level.SEVERE, ((""Failed to create delete file marker '"" + deleteMarker) + ""' aborting deletion by finalizer""), e); return; } getLauncherHandle().deleteFilesOnGarbage(new java.io.File[]{ deleteMarker, jar }, provider.getClass().getClassLoader()); deleteMarker.deleteOnExit(); jar.deleteOnExit(); } else { com.android.jack.server.JackHttpServer.logger.info(((""Deleting "" + (jar.getPath())) + "" immediatly"")); if (!(jar.delete())) { com.android.jack.server.JackHttpServer.logger.log(java.util.logging.Level.SEVERE, ((""Failed to delete file '"" + jar) + ""'"")); } } }",dba02b0af657386d296aec285285c4a47c6661a0,"@java.lang.Override public void onRemoval(@javax.annotation.Nonnull com.google.common.cache.RemovalNotification<com.android.jack.server.JackHttpServer.VersionKey, com.android.jack.server.JackHttpServer.Program<com.android.jack.api.JackProvider>> notification) { com.android.jack.server.JackHttpServer.Program<com.android.jack.api.JackProvider> program = notification.getValue(); com.android.jack.api.JackProvider provider = program.getLoadedProgram(); final java.io.File jar = program.getJar(); if (provider != null) { com.android.jack.server.JackHttpServer.logger.info(((""Queuing "" + (jar.getPath())) + "" for deletion"")); final java.io.File deleteMarker = new java.io.File(((jar.getPath()) + (com.android.jack.server.JackHttpServer.DELETED_SUFFIX))); try { if (!(deleteMarker.createNewFile())) { throw new java.io.IOException(""File already exists""); } } catch (java.io.IOException e) { com.android.jack.server.JackHttpServer.logger.log(java.util.logging.Level.SEVERE, ((""Failed to create delete file marker '"" + deleteMarker) + ""' aborting deletion by finalizer""), e); return; } finalizer.registerFinalizer(new com.android.jack.server.JackHttpServer.Deleter(new java.io.File[]{ deleteMarker, jar }), provider.getClass().getClassLoader()); deleteMarker.deleteOnExit(); jar.deleteOnExit(); } else { com.android.jack.server.JackHttpServer.logger.info(((""Deleting "" + (jar.getPath())) + "" immediatly"")); if (!(jar.delete())) { com.android.jack.server.JackHttpServer.logger.log(java.util.logging.Level.SEVERE, ((""Failed to delete file '"" + jar) + ""'"")); } } }",52c6684cab94867bf70475c7f365721c30665b40,onRemoval(com.google.common.cache.RemovalNotification),onRemoval(com.google.common.cache.RemovalNotification),2,50,"@java.lang.Override public void onRemoval(@javax.annotation.Nonnull com.google.common.cache.RemovalNotification<com.android.jack.server.JackHttpServer.VersionKey, com.android.jack.server.JackHttpServer.Program<com.android.jack.api.JackProvider>> notification) { com.android.jack.server.JackHttpServer.Program<com.android.jack.api.JackProvider> program = notification.getValue(); com.android.jack.api.JackProvider provider = program.getLoadedProgram(); final java.io.File jar = program.getJar(); if (provider != null) { com.android.jack.server.JackHttpServer.logger.info(((""Queuing "" + (jar.getPath())) + "" for deletion"")); final java.io.File deleteMarker = new java.io.File(((jar.getPath()) + (com.android.jack.server.JackHttpServer.DELETED_SUFFIX))); try { if (!(deleteMarker.createNewFile())) { throw new java.io.IOException(""File already exists""); } } catch (java.io.IOException e) { com.android.jack.server.JackHttpServer.logger.log(java.util.logging.Level.SEVERE, ((""Failed to create delete file marker '"" + deleteMarker) + ""' aborting deletion by finalizer""), e); return; } getLauncherHandle().deleteFilesOnGarbage(new java.io.File[]{ deleteMarker, jar }, provider.getClass().getClassLoader()); deleteMarker.deleteOnExit(); jar.deleteOnExit(); } else { com.android.jack.server.JackHttpServer.logger.info(((""Deleting "" + (jar.getPath())) + "" immediatly"")); if (!(jar.delete())) { com.android.jack.server.JackHttpServer.logger.log(java.util.logging.Level.SEVERE, ((""Failed to delete file '"" + jar) + ""'"")); } } }",dba02b0af657386d296aec285285c4a47c6661a0,onRemoval(com.google.common.cache.RemovalNotification),442269,423,414
146882,keystore_tests_src_android_security_KeyPairGeneratorSpecTest.java,7.0,"public void testConstructor_NullSubjectDN_Failure() throws java.lang.Exception { try { new android.security.KeyPairGeneratorSpec(getContext(), android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1, ""RSA"", 1024, null, null, android.security.KeyPairGeneratorSpecTest.SERIAL_1, android.security.KeyPairGeneratorSpecTest.NOW, android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS, 0); fail(""Should throw IllegalArgumentException when subjectDN is null""); } catch (java.lang.IllegalArgumentException success) { } }",d9203c05d2d0f29494157108a89e680100c2618a,"public void testConstructor_NullSubjectDN_Failure() throws java.lang.Exception { android.security.KeyPairGeneratorSpec spec = new android.security.KeyPairGeneratorSpec(getContext(), android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1, ""RSA"", 1024, null, null, android.security.KeyPairGeneratorSpecTest.SERIAL_1, android.security.KeyPairGeneratorSpecTest.NOW, android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS, 0); assertEquals(android.security.KeyPairGeneratorSpecTest.DEFAULT_CERT_SUBJECT, spec.getSubjectDN()); }",03e3d4d0d4042f47d6241ff7023dd9ac466fc22b,testConstructor_NullSubjectDN_Failure(),testConstructor_NullSubjectDN_Failure(),3,4,"public void testConstructor_NullSubjectDN_Success() throws java.lang.Exception { android.security.KeyPairGeneratorSpec spec = new android.security.KeyPairGeneratorSpec(getContext(), android.security.KeyPairGeneratorSpecTest.TEST_ALIAS_1, ""RSA"", 1024, null, null, android.security.KeyPairGeneratorSpecTest.SERIAL_1, android.security.KeyPairGeneratorSpecTest.NOW, android.security.KeyPairGeneratorSpecTest.NOW_PLUS_10_YEARS, 0); assertEquals(android.security.KeyPairGeneratorSpecTest.DEFAULT_CERT_SUBJECT, spec.getSubjectDN()); }",df59a5e25b376d8c01f5c6b1bf980ce3cafc8f79,testConstructor_NullSubjectDN_Success(),161605,117,117
170255,test_530-checker-lse_src_Main.java,,,,"static int test9(TestClass obj) { TestClass obj2 = new TestClass(); obj2.i = 1; obj.next = obj2; java.lang.System.out.println(""""); return obj2.i; }",d024d7b13906f4cfc1f3369e437c541992a7273c,,test9(TestClass),9,13,"static int test9(TestClass obj) { TestClass obj2 = new TestClass(); obj2.i = 1; obj.next = obj2; java.lang.System.out.print(""""); return obj2.i; }",c6a685fa676fbe2111d3b1c2660d91f341576967,test9(TestClass),419678,43,43
129220,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_fixture_app_AbstractAndroidTestApp.java,6.0,@java.lang.Override public void writeSources(java.io.File sourceDir) throws java.io.IOException { for (com.android.build.gradle.integration.common.fixture.app.TestSourceFile srcFile : getAllSourceFiles()) { srcFile.writeToDir(sourceDir); } },376533b555e178ea36a16265f80ec8e0a46fdc8d,"@java.lang.Override public void write(java.io.File projectDir, java.lang.String buildScriptContent) throws java.io.IOException { for (com.android.build.gradle.integration.common.fixture.app.TestSourceFile srcFile : getAllSourceFiles()) { srcFile.writeToDir(projectDir); } }",876ae89f57891be5485ce037f46a0de098cef9d2,writeSources(java.io.File),"write(java.io.File,java.lang.String)",8,6,"@java.lang.Override public void write(@com.android.annotations.NonNull java.io.File projectDir, @com.android.annotations.Nullable java.lang.String buildScriptContent) throws java.io.IOException { for (com.android.build.gradle.integration.common.fixture.app.TestSourceFile srcFile : getAllSourceFiles()) { srcFile.writeToDir(projectDir); } }",e4ad9efda4125881c1de6a8bbf013ed71eb798ef,"write(java.io.File,java.lang.String)",14592,74,89
91995,luni_src_main_java_libcore_io_BlockGuardOs.java,26.0,"private static boolean isLingerSocket(java.io.FileDescriptor fd) throws libcore.io.ErrnoException { libcore.io.StructLinger linger = Libcore.os.getsockoptLinger(fd, libcore.io.SOL_SOCKET, libcore.io.SO_LINGER); return (linger.isOn()) && ((linger.l_linger) > 0); }",353201fb79bd0319a4b562cb6f945997a04e59c0,"private static boolean isLingerSocket(java.io.FileDescriptor fd) throws android.os.ErrnoException { android.os.StructLinger linger = Libcore.os.getsockoptLinger(fd, libcore.io.SOL_SOCKET, libcore.io.SO_LINGER); return (linger.isOn()) && ((linger.l_linger) > 0); }",b440f24c8b4e5b83ea2b46c19beeadd350fbea35,isLingerSocket(java.io.FileDescriptor),isLingerSocket(java.io.FileDescriptor),3,27,"private static boolean isLingerSocket(java.io.FileDescriptor fd) throws android.system.ErrnoException { android.system.StructLinger linger = Libcore.os.getsockoptLinger(fd, libcore.io.SOL_SOCKET, libcore.io.SO_LINGER); return (linger.isOn()) && ((linger.l_linger) > 0); }",93d698bd5ca8708664e12d130b959281ca0a237c,isLingerSocket(java.io.FileDescriptor),170365,95,95
632132,src_com_android_bluetooth_hearingaid_HearingAidStateMachine.java,,,,"private void broadcastConnectionState(int newState, int prevState) { if (com.android.bluetooth.hearingaid.HearingAidStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hearingaid.HearingAidStateMachine.TAG, (((((""Connection state "" + (mDevice)) + "": "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.profileStateToString(prevState))) + ""->"") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.profileStateToString(newState)))); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND))); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }",9f4ba6143e5dd8100f77fbee29dd14889c1db626,,"broadcastConnectionState(int,int)",10,13,"private void broadcastConnectionState(int newState, int prevState) { log((((((""Connection state "" + (mDevice)) + "": "") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.profileStateToString(prevState))) + ""->"") + (com.android.bluetooth.hearingaid.HearingAidStateMachine.profileStateToString(newState)))); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHearingAid.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, newState); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(((android.content.Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT) | (android.content.Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND))); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }",1d982f2ba299a7f513ec4f7d4177288a0b4dc057,"broadcastConnectionState(int,int)",152148,273,224
17510,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_project_ExportHelper.java,0.0,"@java.lang.Override protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { try { com.android.ide.eclipse.adt.internal.project.ExportHelper.export(project, new java.io.File(saveLocation), null, null, monitor); com.android.ide.eclipse.adt.AdtPlugin.displayWarning(""Android IDE Plug-in"", java.lang.String.format((""An unsigned package of the application was saved at\n%1$s\n\n"" + ((((""Before publishing the application you will need to:\n"" + ""- Sign the application with your release key,\n"") + ""- run zipalign on the signed package. ZipAlign is located in <SDK>/tools/\n\n"") + ""Aligning applications allows Android to use application resources\n"") + ""more efficiently."")), saveLocation)); return org.eclipse.core.runtime.Status.OK_STATUS; } catch (org.eclipse.core.runtime.CoreException e) { return e.getStatus(); } }",90b93788f2a3a3f2a317dffd580cd18554734f73,"@java.lang.Override protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { try { com.android.ide.eclipse.adt.internal.project.ExportHelper.export(project, new java.io.File(saveLocation), null, null, monitor); com.android.ide.eclipse.adt.AdtPlugin.displayWarning(""Android IDE Plug-in"", java.lang.String.format((""An unsigned package of the application was saved at\n%1$s\n\n"" + ((((""Before publishing the application you will need to:\n"" + ""- Sign the application with your release key,\n"") + ""- run zipalign on the signed package. ZipAlign is located in <SDK>/tools/\n\n"") + ""Aligning applications allows Android to use application resources\n"") + ""more efficiently."")), saveLocation)); return org.eclipse.core.runtime.Status.OK_STATUS; } catch (org.eclipse.core.runtime.CoreException e) { com.android.ide.eclipse.adt.AdtPlugin.displayError(""Android IDE Plug-in"", java.lang.String.format(""Error exporting application:\n\n%1$s"", e.getMessage())); return e.getStatus(); } }",1f32b8333216133a94054db3d688b18db06fde1b,run(org.eclipse.core.runtime.IProgressMonitor),run(org.eclipse.core.runtime.IProgressMonitor),3,2,"@java.lang.Override protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { try { com.android.ide.eclipse.adt.internal.project.ExportHelper.exportReleaseApk(project, new java.io.File(saveLocation), null, null, monitor); com.android.ide.eclipse.adt.AdtPlugin.displayWarning(""Android IDE Plug-in"", java.lang.String.format((""An unsigned package of the application was saved at\n%1$s\n\n"" + ((((""Before publishing the application you will need to:\n"" + ""- Sign the application with your release key,\n"") + ""- run zipalign on the signed package. ZipAlign is located in <SDK>/tools/\n\n"") + ""Aligning applications allows Android to use application resources\n"") + ""more efficiently."")), saveLocation)); return org.eclipse.core.runtime.Status.OK_STATUS; } catch (org.eclipse.core.runtime.CoreException e) { com.android.ide.eclipse.adt.AdtPlugin.displayError(""Android IDE Plug-in"", java.lang.String.format(""Error exporting application:\n\n%1$s"", e.getMessage())); return e.getStatus(); } }",0ab8470f1e96be7d8cd4e3960fe615b22029a9a7,run(org.eclipse.core.runtime.IProgressMonitor),159831,292,294
379801,Common_src_com_googlecode_android_scripting_facade_bluetooth_BluetoothLeAdvertiseFacade.java,13.0,"@java.lang.Override public void shutdown() { if ((mBluetoothAdapter.getState()) == (android.bluetooth.BluetoothAdapter.STATE_ON)) { for (com.googlecode.android_scripting.facade.bluetooth.BluetoothLeAdvertiseFacade.myAdvertiseCallback mAdvertise : mAdvertiseCallbackList.values()) { if (mAdvertise != null) { try { mBluetoothAdapter.getBluetoothLeAdvertiser().stopAdvertising(mAdvertise); } catch (java.lang.NullPointerException e) { com.googlecode.android_scripting.Log.e(""Failed to stop ble advertising."", e); } } } } mAdvertiseCallbackList.clear(); mAdvertiseSettingsList.clear(); mAdvertiseDataList.clear(); }",31269aadb1324c48fb648d90b53453c2439cdf09,"@java.lang.Override public void shutdown() { if ((mBluetoothAdapter.getState()) == (android.bluetooth.BluetoothAdapter.STATE_ON)) { for (com.googlecode.android_scripting.facade.bluetooth.myAdvertiseCallback mAdvertise : mAdvertiseCallbackList.values()) { if (mAdvertise != null) { try { mBluetoothAdapter.getBluetoothLeAdvertiser().stopAdvertising(mAdvertise); } catch (java.lang.NullPointerException e) { com.googlecode.android_scripting.Log.e(""Failed to stop ble advertising."", e); } } } } mAdvertiseCallbackList.clear(); mAdvertiseSettingsList.clear(); mAdvertiseDataList.clear(); }",9ecd2f76791b8476d2e3a96f47ba684273dc6985,shutdown(),shutdown(),2,13,"@java.lang.Override public void shutdown() { if ((mBluetoothAdapter.getState()) == (android.bluetooth.BluetoothAdapter.STATE_ON)) { for (com.googlecode.android_scripting.facade.bluetooth.BluetoothLeAdvertiseFacade.MyAdvertiseCallback mAdvertise : mAdvertiseCallbackList.values()) { if (mAdvertise != null) { try { mBluetoothAdapter.getBluetoothLeAdvertiser().stopAdvertising(mAdvertise); } catch (java.lang.NullPointerException e) { com.googlecode.android_scripting.Log.e(""Failed to stop ble advertising."", e); } } } } mAdvertiseCallbackList.clear(); mAdvertiseSettingsList.clear(); mAdvertiseDataList.clear(); }",08284f7fdba1200c9b90c7de89a1efb1cf1b294a,shutdown(),491216,156,161
111082,build-system_builder_src_test_java_com_android_builder_internal_compiler_PreDexCacheTest.java,16.0,@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mBuildToolInfo = com.android.builder.internal.compiler.PreDexCacheTest.getBuildToolInfo(); },e0a3ac4acedc57def12c927584c1a25dcc610fdd,@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mBuildToolInfo = com.android.builder.internal.compiler.PreDexCacheTest.getBuildToolInfo(); mDxExe = new java.io.File(mBuildToolInfo.getPath(BuildToolInfo.PathId.DX)); },fc89c76591e299ac730873065f1680928e05dd7c,setUp(),setUp(),8,16,@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); mBuildToolInfo = com.android.builder.internal.compiler.PreDexCacheTest.getBuildToolInfo(); },e0a3ac4acedc57def12c927584c1a25dcc610fdd,setUp(),465074,76,47
150361,asset-studio_src_main_java_com_android_assetstudiolib_vectordrawable_Svg2Vector.java,1.0,"private static void parseTransformation(com.android.assetstudiolib.vectordrawable.SvgTree avg, org.w3c.dom.Node nNode) { org.w3c.dom.NamedNodeMap a = nNode.getAttributes(); int len = a.getLength(); for (int i = 0; i < len; i++) { org.w3c.dom.Node n = a.item(i); java.lang.String name = n.getNodeName(); java.lang.String value = n.getNodeValue(); if (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_TRANSFORM.equals(name)) { if (value.startsWith(""matrix("")) { value = value.substring(""matrix("".length(), ((value.length()) - 1)); java.lang.String[] sp = value.split("" ""); for (int j = 0; j < (sp.length); j++) { avg.matrix[j] = java.lang.Float.parseFloat(sp[j]); } } } else if (name.equals(""y"")) { java.lang.Float.parseFloat(value); } else if (name.equals(""x"")) { java.lang.Float.parseFloat(value); } } }",3b79f05fceb8d9871757287b1f6a18b287ef7975,"private static void parseTransformation(com.android.assetstudiolib.vectordrawable.SvgTree avg, org.w3c.dom.Node nNode) { org.w3c.dom.NamedNodeMap a = nNode.getAttributes(); int len = a.getLength(); for (int i = 0; i < len; i++) { org.w3c.dom.Node n = a.item(i); java.lang.String name = n.getNodeName(); java.lang.String value = n.getNodeValue(); if (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_TRANSFORM.equals(name)) { avg.logErrorLine(""<transfrom> in SVG is not supported yet"", n, SvgTree.SvgLogLevel.ERROR); if (value.startsWith(""matrix("")) { value = value.substring(""matrix("".length(), ((value.length()) - 1)); java.lang.String[] sp = value.split("" ""); for (int j = 0; j < (sp.length); j++) { avg.matrix[j] = java.lang.Float.parseFloat(sp[j]); } } } else if (name.equals(""y"")) { java.lang.Float.parseFloat(value); } else if (name.equals(""x"")) { java.lang.Float.parseFloat(value); } } }",30c8366190dc25d459af72202b85193afe5681f0,"parseTransformation(com.android.assetstudiolib.vectordrawable.SvgTree,org.w3c.dom.Node)","parseTransformation(com.android.assetstudiolib.vectordrawable.SvgTree,org.w3c.dom.Node)",6,1,"private static void parseTransformation(com.android.assetstudiolib.vectordrawable.SvgTree avg, org.w3c.dom.Node nNode) { org.w3c.dom.NamedNodeMap a = nNode.getAttributes(); int len = a.getLength(); for (int i = 0; i < len; i++) { org.w3c.dom.Node n = a.item(i); java.lang.String name = n.getNodeName(); java.lang.String value = n.getNodeValue(); if (com.android.assetstudiolib.vectordrawable.Svg2Vector.SVG_TRANSFORM.equals(name)) { if (value.startsWith(""matrix("")) { value = value.substring(""matrix("".length(), ((value.length()) - 1)); java.lang.String[] sp = value.split("" ""); for (int j = 0; j < (sp.length); j++) { avg.matrix[j] = java.lang.Float.parseFloat(sp[j]); } } } else if (name.equals(""y"")) { java.lang.Float.parseFloat(value); } else if (name.equals(""x"")) { java.lang.Float.parseFloat(value); } } }",3b79f05fceb8d9871757287b1f6a18b287ef7975,"parseTransformation(com.android.assetstudiolib.vectordrawable.SvgTree,org.w3c.dom.Node)",284695,288,262
410379,src_vogar_android_DeviceRuntime.java,4.0,"private vogar.tasks.Task newCreateDexJarTask(vogar.Classpath classpath, java.io.File classpathElement, java.lang.String name, vogar.Action action, java.io.File localDex) { vogar.tasks.Task dex; if (run.useJack) { dex = new vogar.android.JackDexTask(run, classpath, run.benchmark, name, classpathElement, action, localDex); } else { dex = new vogar.android.DexTask(run.androidSdk, classpath, run.benchmark, name, classpathElement, action, localDex, run.multidex); } return dex; }",f7d5f3ae543df0cf4243c471aadc8ddc76d68a50,"private vogar.tasks.Task newCreateDexJarTask(vogar.Classpath classpath, java.io.File classpathElement, java.lang.String name, vogar.Action action, java.io.File localDex, java.io.File localDesugarTempDir) { vogar.tasks.Task dex; if (run.useJack) { dex = new vogar.android.JackDexTask(run, classpath, run.benchmark, name, classpathElement, action, localDex); } else { dex = new vogar.android.DexTask(run.androidSdk, classpath, run.benchmark, name, classpathElement, action, localDex, localDesugarTempDir, run.multidex); } return dex; }",a37bd2b25fb32cdfbd00388299de289be4b9cde0,"newCreateDexJarTask(vogar.Classpath,java.io.File,java.lang.String,vogar.Action,java.io.File)","newCreateDexJarTask(vogar.Classpath,java.io.File,java.lang.String,vogar.Action,java.io.File,java.io.File)",6,4,"private vogar.tasks.Task newCreateDexJarTask(vogar.Classpath classpath, java.io.File classpathElement, java.lang.String name, vogar.Action action, java.io.File localDex, java.io.File localTempDir) { vogar.tasks.Task dex; if (run.useJack) { dex = new vogar.android.JackDexTask(run, classpath, run.benchmark, name, classpathElement, action, localDex); } else { dex = new vogar.android.DexTask(run.androidSdk, classpath, run.benchmark, name, classpathElement, action, localDex, localTempDir, run.multidex); } return dex; }",01b9cb0c4e583be6910638573c3326caf5f8da08,"newCreateDexJarTask(vogar.Classpath,java.io.File,java.lang.String,vogar.Action,java.io.File,java.io.File)",22769,163,159
343338,tests_wifitests_src_com_android_server_wifi_WifiNetworkSelectorTest.java,11.0,"@org.junit.Test public void filterOutBlacklistedBssid() { java.lang.String[] ssids = new java.lang.String[]{ ""\""test1\"""" }; java.lang.String[] bssids = new java.lang.String[]{ ""6c:f3:7f:ae:8c:f3"" }; int[] freqs = new int[]{ 5180 }; java.lang.String[] caps = new java.lang.String[]{ ""[WPA2-EAP-CCMP][ESS]"" }; int[] levels = new int[]{ (mThresholdQualifiedRssi5G) + 8 }; int[] securities = new int[]{ com.android.server.wifi.WifiConfigurationTestUtil.SECURITY_PSK }; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); for (int i = 0; i < (WifiNetworkSelector.BSSID_BLACKLIST_THRESHOLD); i++) { mWifiNetworkSelector.enableBssidForNetworkSelection(bssids[0], false, 1); } android.net.wifi.WifiConfiguration candidate = mWifiNetworkSelector.selectNetwork(scanDetails, mWifiInfo, false, true, false); assertEquals(""Expect null configuration"", null, candidate); }",002b2e61ddebe36397e6133b2bf71d4e50b30195,"@org.junit.Test public void filterOutBlacklistedBssid() { java.lang.String[] ssids = new java.lang.String[]{ ""\""test1\"""" }; java.lang.String[] bssids = new java.lang.String[]{ ""6c:f3:7f:ae:8c:f3"" }; int[] freqs = new int[]{ 5180 }; java.lang.String[] caps = new java.lang.String[]{ ""[WPA2-EAP-CCMP][ESS]"" }; int[] levels = new int[]{ (mThresholdQualifiedRssi5G) + 8 }; int[] securities = new int[]{ com.android.server.wifi.WifiConfigurationTestUtil.SECURITY_PSK }; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); java.util.ArrayList<java.lang.String> blacklist = new java.util.ArrayList<java.lang.String>(); blacklist.add(bssids[0]); android.net.wifi.WifiConfiguration candidate = mWifiNetworkSelector.selectNetwork(scanDetails, blacklist, mWifiInfo, false, true, false); assertEquals(""Expect null configuration"", null, candidate); }",7f6f49d83cb2697d9576ab9b138e8a787e352d3a,filterOutBlacklistedBssid(),filterOutBlacklistedBssid(),21,7,"@org.junit.Test public void filterOutBlacklistedBssid() { java.lang.String[] ssids = new java.lang.String[]{ ""\""test1\"""" }; java.lang.String[] bssids = new java.lang.String[]{ ""6c:f3:7f:ae:8c:f3"" }; int[] freqs = new int[]{ 5180 }; java.lang.String[] caps = new java.lang.String[]{ ""[WPA2-EAP-CCMP][ESS]"" }; int[] levels = new int[]{ (mThresholdQualifiedRssi5G) + 8 }; int[] securities = new int[]{ com.android.server.wifi.WifiConfigurationTestUtil.SECURITY_PSK }; com.android.server.wifi.WifiNetworkSelectorTestUtil.ScanDetailsAndWifiConfigs scanDetailsAndConfigs = com.android.server.wifi.WifiNetworkSelectorTestUtil.setupScanDetailsAndConfigStore(ssids, bssids, freqs, caps, levels, securities, mWifiConfigManager, mClock); java.util.List<com.android.server.wifi.ScanDetail> scanDetails = scanDetailsAndConfigs.getScanDetails(); java.util.HashSet<java.lang.String> blacklist = new java.util.HashSet<java.lang.String>(); blacklist.add(bssids[0]); android.net.wifi.WifiConfiguration candidate = mWifiNetworkSelector.selectNetwork(scanDetails, blacklist, mWifiInfo, false, true, false); assertEquals(""Expect null configuration"", null, candidate); }",8a41805b2c978feaa3a9808edbac737d6a185eb6,filterOutBlacklistedBssid(),525395,350,350
41115,src_java_com_android_internal_telephony_UiccCard.java,,,,public com.android.internal.telephony.IccCardStatus.CardState getCardState() { return mCardState; },4a16d4808f5573b84082d1b6946ca48ee41c8dc0,,getCardState(),22,7,public com.android.internal.telephony.IccCardStatus.CardState getCardState() { synchronized(mLock) { return mCardState; } },51ff30c6de6e3433bc7161b9610160e6987e7097,getCardState(),499303,27,34
301802,src_com_android_bluetooth_hfp_HeadsetStateMachine.java,92.0,private boolean isScoAcceptable() { return (mAudioRouteAllowed) && ((mVoiceRecognitionStarted) || (isInCall())); },898b9c45d4aa4e25324a0fce55c94db967585db5,private boolean isScoAcceptable() { return (mAudioRouteAllowed) && (((mVoiceRecognitionStarted) || (isInCall())) || (isRinging())); },e98379bb6cc9ffe5b6ba42099e4b4b68e4be299a,isScoAcceptable(),isScoAcceptable(),20,93,private boolean isScoAcceptable() { return (mAudioRouteAllowed) && (((mVoiceRecognitionStarted) || (isInCall())) || ((android.bluetooth.BluetoothHeadset.isInbandRingingSupported(mService)) && (isRinging()))); },f7a9f3850b7a11d1e1a31dbe46f2d0f4acb4107f,isScoAcceptable(),23751,34,54
233353,test_vogar_target_junit3_TestRunnerJUnit3Test.java,,,,"@vogar.target.TestRunnerProperties(testClass = vogar.target.mixture.junit3.JUnit3Test.class, runnerType = vogar.RunnerType.JUNIT) @org.junit.Test public void testConstructor_JUnit3Test_RunnerType_JUNIT() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().success(""testFoo"").completedNormally(); }",e37e771909b51b2ef50a5003d5cd3de42834e680,,testConstructor_JUnit3Test_RunnerType_JUNIT(),3,17,"@vogar.target.TestRunnerProperties(testClass = vogar.target.mixture.junit3.JUnit3Test.class, runnerType = vogar.RunnerType.JUNIT) @org.junit.Test public void testConstructor_JUnit3Test_RunnerType_JUNIT() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); expectedResults().success(""testFoo"").completedNormally(); }",4d65288ff0432242c819457a07597d28f975b468,testConstructor_JUnit3Test_RunnerType_JUNIT(),130760,104,103
200456,luni_src_test_java_libcore_util_ZoneInfoTest.java,4.0,"public void testMakeTimeZone_NoOffsets() throws java.lang.Exception { int[][] times = new int[][]{ }; int[][] offsets = new int[][]{ }; try { createZoneInfo(times, offsets); fail(""Did not detect no transitions""); } catch (java.lang.IllegalStateException expected) { } }",2f6eea89e16b0d9654a6156d95a0fcbd3c03f100,"public void testMakeTimeZone_NoOffsets() throws java.lang.Exception { int[][] times = new int[][]{ }; int[][] offsets = new int[][]{ }; try { createZoneInfo(getName(), times, offsets); fail(""Did not detect no transitions""); } catch (java.lang.IllegalStateException expected) { } }",3f87a0a6a2ee359dcae000fb2daf9c389c824b66,testMakeTimeZone_NoOffsets(),testMakeTimeZone_NoOffsets(),4,4,"public void testMakeTimeZone_NoOffsets() throws java.lang.Exception { int[][] times = new int[][]{ }; int[][] offsets = new int[][]{ }; try { createZoneInfo(times, offsets); fail(""Did not detect no transitions""); } catch (java.lang.IllegalStateException expected) { } }",2f6eea89e16b0d9654a6156d95a0fcbd3c03f100,testMakeTimeZone_NoOffsets(),421942,74,72
253791,luni_src_main_java_libcore_io_Os.java,34.0,"public int ioctlInt(java.io.FileDescriptor fd, int cmd, android.util.MutableInt arg) throws android.system.ErrnoException;",f09d6f3c385cef76d6e9324c93dad4d04c40f348,"public int ioctlInt(java.io.FileDescriptor fd, int cmd, android.util.MutableInt arg) throws libcore.io.ErrnoException;",c680e53b763e31cf512dcc991c6536d61149c8f3,"ioctlInt(java.io.FileDescriptor,int,android.util.MutableInt)","ioctlInt(java.io.FileDescriptor,int,android.util.MutableInt)",8,33,"public int ioctlInt(java.io.FileDescriptor fd, int cmd, android.util.MutableInt arg) throws android.system.ErrnoException;",f09d6f3c385cef76d6e9324c93dad4d04c40f348,"ioctlInt(java.io.FileDescriptor,int,android.util.MutableInt)",494638,35,34
16553,hierarchyviewer2_app_src_com_android_hierarchyviewer_HierarchyViewerApplication.java,26.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void showDeviceSelector() { org.eclipse.jface.action.MenuManager mm = getMenuBarManager(); mm.removeAll(); org.eclipse.jface.action.MenuManager file = new org.eclipse.jface.action.MenuManager(""&File""); mm.add(file); file.add(com.android.hierarchyviewer.actions.QuitAction.getAction()); org.eclipse.jface.action.MenuManager device = new org.eclipse.jface.action.MenuManager(""&Device""); mm.add(device); device.add(com.android.hierarchyviewer.actions.RefreshWindowsAction.getAction()); device.add(com.android.hierarchyviewer.actions.LoadViewHierarchyAction.getAction()); device.add(com.android.hierarchyviewer.actions.InspectScreenshotAction.getAction()); mm.updateAll(true); deviceViewButton.setSelection(true); deviceViewButton.setImage(deviceViewSelectedImage); treeViewButton.setSelection(false); treeViewButton.setImage(treeViewImage); pixelPerfectButton.setSelection(false); pixelPerfectButton.setImage(pixelPerfectImage); mainWindowStackLayout.topControl = deviceSelectorPanel; mainWindow.layout(); deviceSelector.setFocus(); }",f47a6caa4a784620b43092e7d3ac15284341ce65,,showDeviceSelector(),14,23,"public void showDeviceSelector() { org.eclipse.jface.action.MenuManager mm = getMenuBarManager(); mm.removeAll(); org.eclipse.jface.action.MenuManager file = new org.eclipse.jface.action.MenuManager(""&File""); mm.add(file); file.add(com.android.hierarchyviewer.actions.QuitAction.getAction()); org.eclipse.jface.action.MenuManager device = new org.eclipse.jface.action.MenuManager(""&Devices""); mm.add(device); device.add(com.android.hierarchyviewer.actions.RefreshWindowsAction.getAction()); device.add(com.android.hierarchyviewer.actions.LoadViewHierarchyAction.getAction()); device.add(com.android.hierarchyviewer.actions.InspectScreenshotAction.getAction()); org.eclipse.jface.action.MenuManager help = new org.eclipse.jface.action.MenuManager(""&Help""); mm.add(help); help.add(com.android.hierarchyviewer.actions.AboutAction.getAction(getShell())); mm.updateAll(true); deviceViewButton.setSelection(true); deviceViewButton.setImage(deviceViewSelectedImage); treeViewButton.setSelection(false); treeViewButton.setImage(treeViewImage); pixelPerfectButton.setSelection(false); pixelPerfectButton.setImage(pixelPerfectImage); mainWindowStackLayout.topControl = deviceSelectorPanel; mainWindow.layout(); deviceSelector.setFocus(); statusBarStackLayout.topControl = null; statusBarControlPanel.setVisible(false); statusBarControlPanel.layout(); }",feb2fb188b759b419dbd6c40f235d9ca4bd04199,showDeviceSelector(),450778,262,344
181856,luni_src_test_java_libcore_java_net_CookiesTest.java,27.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testCookieStoreEviction() throws java.lang.Exception { java.net.CookieStore cookieStore = new java.net.CookieManager().getCookieStore(); java.net.HttpCookie themeCookie = libcore.java.net.CookiesTest.createCookie(""theme"", ""light"", ""a.com"", ""/""); cookieStore.add(new java.net.URI(""http://a.com/""), themeCookie); java.net.HttpCookie sidCookie = libcore.java.net.CookiesTest.createCookie(""sid"", ""mysid"", ""a.com"", ""/""); cookieStore.add(new java.net.URI(""http://a.com/""), sidCookie); java.net.HttpCookie replacementThemeCookie = libcore.java.net.CookiesTest.createCookie(""theme"", ""dark"", ""a.com"", ""/""); cookieStore.add(new java.net.URI(""http://a.com/""), replacementThemeCookie); assertEquals(""[sid=\""mysid\"";$Path=\""/\"";$Domain=\""a.com\"", theme=\""dark\"";$Path=\""/\"";$Domain=\""a.com\""]"", cookieStore.get(new java.net.URI(""http://a.com/"")).toString()); java.net.HttpCookie replacementSidCookie = libcore.java.net.CookiesTest.createCookie(""sid"", ""mynewsid"", ""A.cOm"", ""/""); cookieStore.add(new java.net.URI(""http://a.com/""), replacementSidCookie); assertEquals(""[theme=\""dark\"";$Path=\""/\"";$Domain=\""a.com\"", sid=\""mynewsid\"";$Path=\""/\"";$Domain=\""a.com\""]"", cookieStore.get(new java.net.URI(""http://a.com/"")).toString()); }",7eeb3dd5d28ffdb49a7d7774c225599593c68021,,testCookieStoreEviction(),2,16,"public void testCookieStoreEviction() throws java.lang.Exception { java.net.CookieStore cookieStore = new java.net.CookieManager().getCookieStore(); java.net.HttpCookie themeCookie = libcore.java.net.CookiesTest.createCookie(""theme"", ""light"", ""a.com"", ""/""); cookieStore.add(new java.net.URI(""http://a.com/""), themeCookie); java.net.HttpCookie sidCookie = libcore.java.net.CookiesTest.createCookie(""sid"", ""mysid"", ""a.com"", ""/""); cookieStore.add(new java.net.URI(""http://a.com/""), sidCookie); java.net.HttpCookie replacementThemeCookie = libcore.java.net.CookiesTest.createCookie(""theme"", ""dark"", ""a.com"", ""/""); cookieStore.add(new java.net.URI(""http://a.com/""), replacementThemeCookie); assertEquals((""[sid=\""mysid\"";$Path=\""/\"";$Domain=\""a.com\"", "" + ""theme=\""dark\"";$Path=\""/\"";$Domain=\""a.com\""]""), cookieStore.get(new java.net.URI(""http://a.com/"")).toString()); java.net.HttpCookie replacementSidCookie = libcore.java.net.CookiesTest.createCookie(""sid"", ""mynewsid"", ""A.cOm"", ""/""); cookieStore.add(new java.net.URI(""http://a.com/""), replacementSidCookie); assertEquals((""[theme=\""dark\"";$Path=\""/\"";$Domain=\""a.com\"", "" + ""sid=\""mynewsid\"";$Path=\""/\"";$Domain=\""a.com\""]""), cookieStore.get(new java.net.URI(""http://a.com/"")).toString()); }",9d1005e68b8b03df5c16848daabc88956d5b3bc3,testCookieStoreEviction(),120475,394,401
97268,sdklib_src_main_java_com_android_sdklib_repository_local_LocalSdk.java,23.0,"@com.android.annotations.Nullable public com.android.sdklib.repository.local.LocalPkgInfo getPkgInfo(@com.android.annotations.NonNull com.android.sdklib.repository.descriptors.PkgType filter, @com.android.annotations.NonNull java.lang.String vendor, @com.android.annotations.NonNull java.lang.String path) { assert (filter == (com.android.sdklib.repository.descriptors.PkgType.PKG_EXTRAS)) || (filter == (com.android.sdklib.repository.descriptors.PkgType.PKG_ADDONS)); for (com.android.sdklib.repository.local.LocalPkgInfo pkg : getPkgsInfos(filter)) { com.android.sdklib.repository.descriptors.IPkgDesc d = pkg.getDesc(); if ((d.hasVendor()) && (vendor.equals(d.getVendor().getId()))) { if ((d.hasPath()) && (path.equals(d.getPath()))) { return pkg; } } } return null; }",dc5ae1211e37297fa17bbac0f1bc9dc2dada9f2c,"@com.android.annotations.Nullable public com.android.sdklib.repository.local.LocalPkgInfo getPkgInfo(@com.android.annotations.NonNull com.android.sdklib.repository.descriptors.PkgType filter, @com.android.annotations.NonNull java.lang.String vendor, @com.android.annotations.NonNull java.lang.String path) { assert (filter == (com.android.sdklib.repository.descriptors.PkgType.PKG_EXTRA)) || (filter == (com.android.sdklib.repository.descriptors.PkgType.PKG_ADDONS)); for (com.android.sdklib.repository.local.LocalPkgInfo pkg : getPkgsInfos(filter)) { com.android.sdklib.repository.descriptors.IPkgDesc d = pkg.getDesc(); if ((d.hasVendor()) && (vendor.equals(d.getVendor().getId()))) { if ((d.hasPath()) && (path.equals(d.getPath()))) { return pkg; } } } return null; }",65dd6862043f2200409a86f372c858a85027bf72,"getPkgInfo(com.android.sdklib.repository.descriptors.PkgType,java.lang.String,java.lang.String)","getPkgInfo(com.android.sdklib.repository.descriptors.PkgType,java.lang.String,java.lang.String)",3,23,"@com.android.annotations.Nullable public com.android.sdklib.repository.local.LocalPkgInfo getPkgInfo(@com.android.annotations.NonNull com.android.sdklib.repository.descriptors.PkgType filter, @com.android.annotations.NonNull java.lang.String vendor, @com.android.annotations.NonNull java.lang.String path) { assert (filter == (com.android.sdklib.repository.descriptors.PkgType.PKG_EXTRA)) || (filter == (com.android.sdklib.repository.descriptors.PkgType.PKG_ADDON)); for (com.android.sdklib.repository.local.LocalPkgInfo pkg : getPkgsInfos(filter)) { com.android.sdklib.repository.descriptors.IPkgDesc d = pkg.getDesc(); if ((d.hasVendor()) && (vendor.equals(d.getVendor().getId()))) { if ((d.hasPath()) && (path.equals(d.getPath()))) { return pkg; } } } return null; }",c1961f314cda22da3eb67ee1b7661a287c9d2a12,"getPkgInfo(com.android.sdklib.repository.descriptors.PkgType,java.lang.String,java.lang.String)",482599,234,233
503781,src_java_com_android_ims_ImsUt.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void queryCallBarring(int cbType, int serviceClass, android.os.Message result) { if (com.android.ims.ImsUt.DBG) { log((((((""queryCallBarring :: Ut="" + (miUt)) + "", cbType="") + cbType) + "", serviceClass="") + serviceClass)); } synchronized(mLockObj) { try { int id = miUt.queryCallBarringForServiceClass(cbType, serviceClass); if (id < 0) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); return; } mPendingCmds.put(java.lang.Integer.valueOf(id), result); } catch (android.os.RemoteException e) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); } } }",f349e0e6dca7b85edc480afd795e6cff98643af1,,"queryCallBarring(int,int,android.os.Message)",2,11,"@java.lang.Override public void queryCallBarring(int cbType, android.os.Message result, int serviceClass) { if (com.android.ims.ImsUt.DBG) { log((((((""queryCallBarring :: Ut="" + (miUt)) + "", cbType="") + cbType) + "", serviceClass="") + serviceClass)); } synchronized(mLockObj) { try { int id = miUt.queryCallBarringForServiceClass(cbType, serviceClass); if (id < 0) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); return; } mPendingCmds.put(java.lang.Integer.valueOf(id), result); } catch (android.os.RemoteException e) { sendFailureReport(result, new com.android.ims.ImsReasonInfo(ImsReasonInfo.CODE_UT_SERVICE_UNAVAILABLE, 0)); } } }",c23ef6839ed4548cb1d1a5b7c574efdf25fc4acc,"queryCallBarring(int,android.os.Message,int)",335130,228,228
595602,src_java_com_android_internal_telephony_uicc_UiccProfile.java,71.0,private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app != null) && (isSupportedApplication(app))) && (!(app.isReady()))) { return false; } } return (mUiccApplications[0]) != null; },737784f673bb016a4d19a267db3e9e785064af1d,"private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app != null) && (isSupportedApplication(app))) && (!(app.isReady()))) { log(""areAllApplicationsReady: return false""); return false; } } log((""areAllApplicationsReady: outside loop, return "" + ((mUiccApplications[0]) != null))); return (mUiccApplications[0]) != null; }",55d120bb956118bba7b0504e3b80b6b3e1cb4590,areAllApplicationsReady(),areAllApplicationsReady(),13,71,"private boolean areAllApplicationsReady() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (((app != null) && (isSupportedApplication(app))) && (!(app.isReady()))) { if (com.android.internal.telephony.uicc.UiccProfile.VDBG) log(""areAllApplicationsReady: return false""); return false; } } if (com.android.internal.telephony.uicc.UiccProfile.VDBG) { log((""areAllApplicationsReady: outside loop, return "" + ((mUiccApplications[0]) != null))); } return (mUiccApplications[0]) != null; }",086aaf3a75083320874edb9c45faad757759e4a9,areAllApplicationsReady(),424411,104,148
83326,luni_src_test_java_libcore_java_security_MessageDigestTest.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public java.lang.Void call() throws java.lang.Exception { latch.countDown(); for (int j = 0; j < 100; j++) { md.update(message); md.digest(); } return null; },e46a0a1f8cbc100453e111df3a8ed9a90cbe93d6,,call(),4,0,@java.lang.Override public java.lang.Void call() throws java.lang.Exception { latch.countDown(); latch.await(); for (int j = 0; j < 100; j++) { md.update(message); md.digest(); } return null; },62a7068e9424b0c00307ac02394fb92f2608e4cf,call(),350207,52,56
230812,ojluni_src_main_java_sun_nio_fs_DefaultFileSystemProvider.java,,,,"@java.lang.SuppressWarnings(""unchecked"") private static java.nio.file.spi.FileSystemProvider createProvider(final java.lang.String cn) { return java.security.AccessController.doPrivileged(new java.security.PrivilegedAction<java.nio.file.spi.FileSystemProvider>() { public java.nio.file.spi.FileSystemProvider run() { java.lang.Class<java.nio.file.spi.FileSystemProvider> c; try { c = ((java.lang.Class<java.nio.file.spi.FileSystemProvider>) (java.lang.Class.forName(cn, true, null))); } catch (java.lang.ClassNotFoundException x) { throw new java.lang.AssertionError(x); } try { return c.newInstance(); } catch (java.lang.IllegalAccessException x) { throw new java.lang.AssertionError(x); } catch (java.lang.InstantiationException x) { throw new java.lang.AssertionError(x); } } }); }",61f1d1751fe8ba28c0808af405bbad5c8526bcb9,,createProvider(java.lang.String),8,1,"@java.lang.SuppressWarnings(""unchecked"") private static java.nio.file.spi.FileSystemProvider createProvider(java.lang.String cn) { java.lang.Class<java.nio.file.spi.FileSystemProvider> c; try { c = ((java.lang.Class<java.nio.file.spi.FileSystemProvider>) (java.lang.Class.forName(cn))); } catch (java.lang.ClassNotFoundException x) { throw new java.lang.AssertionError(x); } try { return c.newInstance(); } catch (java.lang.IllegalAccessException | java.lang.InstantiationException x) { throw new java.lang.AssertionError(x); } }",e1df3266b16dfc132e55b7581dc2861a218ff1a7,createProvider(java.lang.String),119776,211,147
22268,monkeyrunner_src_com_android_monkeyrunner_recorder_actions_TouchAction.java,2.0,"@java.lang.Override public java.lang.String getDisplayName() { return java.lang.String.format(""%s touchscreen at (%d, %d)"", com.android.monkeyrunner.recorder.actions.TouchAction.DOWNUP_FLAG_MAP.get(direction), x, y); }",a6a24a16262ea2a1a420d4f1805b4208c4ce417a,"public java.lang.String getDisplayName() { return java.lang.String.format(""%s touchscreen at (%d, %d)"", com.android.monkeyrunner.recorder.actions.TouchAction.DOWNUP_FLAG_MAP.get(direction), x, y); }",8a8f663d89a52bf9044651fa069d5e93ba5e768f,getDisplayName(),getDisplayName(),8,2,"@java.lang.Override public java.lang.String getDisplayName() { return java.lang.String.format(""%s touchscreen at (%d, %d)"", com.android.monkeyrunner.recorder.actions.TouchAction.DOWNUP_FLAG_MAP.get(direction), x, y); }",a6a24a16262ea2a1a420d4f1805b4208c4ce417a,getDisplayName(),81325,61,67
45002,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_configuration_NestedConfiguration.java,27.0,"@com.android.annotations.NonNull public static com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration create(@com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration other, @com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration values, @com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration parent) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration configuration = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration(other.mConfigChooser, parent); configuration.setDisplayName(values.getDisplayName()); configuration.setActivity(values.getActivity()); configuration.mOverrideLocale = other.mOverrideLocale; if (configuration.mOverrideLocale) { configuration.setLocale(values.getLocale(), true); } configuration.mOverrideTarget = other.mOverrideTarget; if (configuration.mOverrideTarget) { configuration.setTarget(values.getTarget(), true); } configuration.mOverrideDevice = other.mOverrideDevice; configuration.mOverrideDeviceState = other.mOverrideDeviceState; if (configuration.mOverrideDevice) { configuration.setDevice(values.getDevice(), true); } if (configuration.mOverrideDeviceState) { configuration.setDeviceState(values.getDeviceState(), true); } configuration.mOverrideNightMode = other.mOverrideNightMode; if (configuration.mOverrideNightMode) { configuration.setNightMode(values.getNightMode(), true); } configuration.mOverrideUiMode = other.mOverrideUiMode; if (configuration.mOverrideUiMode) { configuration.setUiMode(values.getUiMode(), true); } return configuration; }",6cf8361235360d3d9a71117bbe7523e04a3f6a1c,"@com.android.annotations.NonNull public static com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration create(@com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration other, @com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration values, @com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration parent) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration configuration = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration(other.mConfigChooser, parent); configuration.mOverride = other.mOverride; configuration.setDisplayName(values.getDisplayName()); configuration.setActivity(values.getActivity()); if (configuration.isOverridingLocale()) { configuration.setLocale(values.getLocale(), true); } if (configuration.isOverridingTarget()) { configuration.setTarget(values.getTarget(), true); } if (configuration.isOverridingDevice()) { configuration.setDevice(values.getDevice(), true); } if (configuration.isOverridingDeviceState()) { configuration.setDeviceState(values.getDeviceState(), true); } if (configuration.isOverridingNightMode()) { configuration.setNightMode(values.getNightMode(), true); } if (configuration.isOverridingUiMode()) { configuration.setUiMode(values.getUiMode(), true); } configuration.syncFolderConfig(); return configuration; }",197de0242e73a3a991ac283ab69dd86a57d4de98,"create(com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration,com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration,com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration)","create(com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration,com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration,com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration)",5,28,"@com.android.annotations.NonNull public static com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration create(@com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration other, @com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration values, @com.android.annotations.NonNull com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration parent) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration configuration = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration(other.mConfigChooser, parent); com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration.initFrom(configuration, other, values, true); return configuration; }",e761176f7f3cba5e7f02c089da96ce8441b40b92,"create(com.android.ide.eclipse.adt.internal.editors.layout.configuration.NestedConfiguration,com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration,com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration)",187228,357,222
253791,luni_src_main_java_libcore_io_Posix.java,40.0,public native android.system.StructStat stat(java.lang.String path) throws android.system.ErrnoException;,480a2472e8290a11dd0cd7532f4c5c1bfd864b74,public native libcore.io.StructStat stat(java.lang.String path) throws libcore.io.ErrnoException;,08b95664b9551e7ad0d0cb9f067c5e68f7d10b1c,stat(java.lang.String),stat(java.lang.String),8,39,public native android.system.StructStat stat(java.lang.String path) throws android.system.ErrnoException;,480a2472e8290a11dd0cd7532f4c5c1bfd864b74,stat(java.lang.String),494450,28,26
186130,jack-tests_tests_com_android_jack_java8_LambdaTest.java,33.0,"@org.junit.Test public void testLamba029() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA029).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",a4477ed18151b153813e04aca2497d4e318b5b24,"@org.junit.Test public void testLamba029() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA029).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",80dca3643934ff2df99be918943d95fd3ac7611b,testLamba029(),testLamba029(),7,33,@org.junit.Test public void testLamba029() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA029).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },382780993f83737e62ff584d91781f0778e1aede,testLamba029(),466356,83,57
505857,services_core_java_com_android_server_ConnectivityService.java,64.0,"private void logDefaultNetworkEvent(com.android.server.connectivity.NetworkAgentInfo newNai, com.android.server.connectivity.NetworkAgentInfo prevNai) { int newNetid = NETID_UNSET; int prevNetid = NETID_UNSET; int[] transports = new int[0]; boolean hadIPv4 = false; boolean hadIPv6 = false; if (newNai != null) { newNetid = newNai.network.netId; transports = newNai.networkCapabilities.getTransportTypes(); } if (prevNai != null) { prevNetid = prevNai.network.netId; final android.net.LinkProperties lp = prevNai.linkProperties; hadIPv4 = (lp.hasIPv4Address()) && (lp.hasIPv4DefaultRoute()); hadIPv6 = (lp.hasGlobalIPv6Address()) && (lp.hasIPv6DefaultRoute()); } mMetricsLog.log(new android.net.metrics.DefaultNetworkEvent(newNetid, transports, prevNetid, hadIPv4, hadIPv6)); }",15fa1de561d41eb80a3553d35814fe77c49bf80f,"private IpConnectivityMetrics.Logger metricsLogger() { return checkNotNull(com.android.server.LocalServices.getService(IpConnectivityMetrics.Logger.class), ""no IpConnectivityMetrics service""); }",a7c691e983f129f2bdbc75870d02bf106c6b0552,"logDefaultNetworkEvent(com.android.server.connectivity.NetworkAgentInfo,com.android.server.connectivity.NetworkAgentInfo)",metricsLogger(),22,121,"@com.android.internal.annotations.VisibleForTesting protected IpConnectivityMetrics.Logger metricsLogger() { return checkNotNull(com.android.server.LocalServices.getService(IpConnectivityMetrics.Logger.class), ""no IpConnectivityMetrics service""); }",4c499d306c62c0e412cf0e87734998da9f04c8e4,metricsLogger(),244415,42,53
79932,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_configuration_Configuration.java,23.0,"@com.android.annotations.Nullable java.lang.String computePreferredTheme() { org.eclipse.core.resources.IProject project = mConfigChooser.getProject(); com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo manifest = com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo.get(project); com.android.resources.ScreenSize screenSize = null; com.android.sdklib.devices.Device device = getDevice(); if (device != null) { java.util.List<com.android.sdklib.devices.State> states = device.getAllStates(); for (com.android.sdklib.devices.State state : states) { com.android.ide.common.resources.configuration.FolderConfiguration folderConfig = com.android.ide.common.resources.configuration.DeviceConfigHelper.getFolderConfig(state); if (folderConfig != null) { com.android.ide.common.resources.configuration.ScreenSizeQualifier qualifier = folderConfig.getScreenSizeQualifier(); screenSize = qualifier.getValue(); break; } } } java.lang.String defaultTheme = manifest.getDefaultTheme(getTarget(), screenSize); java.lang.String preferred = defaultTheme; if ((getTheme()) == null) { java.lang.String activity = getActivity(); if (activity != null) { java.util.Map<java.lang.String, java.lang.String> activityThemes = manifest.getActivityThemes(); preferred = activityThemes.get(activity); } if (preferred == null) { preferred = defaultTheme; } setTheme(preferred); } return preferred; }",878b40fe032227126c960937eec624002768a485,"@com.android.annotations.Nullable java.lang.String computePreferredTheme() { org.eclipse.core.resources.IProject project = mConfigChooser.getProject(); com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo manifest = com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo.get(project); com.android.resources.ScreenSize screenSize = null; com.android.sdklib.devices.Device device = getDevice(); if (device != null) { java.util.List<com.android.sdklib.devices.State> states = device.getAllStates(); for (com.android.sdklib.devices.State state : states) { com.android.ide.common.resources.configuration.FolderConfiguration folderConfig = com.android.ide.common.resources.configuration.DeviceConfigHelper.getFolderConfig(state); if (folderConfig != null) { com.android.ide.common.resources.configuration.ScreenSizeQualifier qualifier = folderConfig.getScreenSizeQualifier(); screenSize = qualifier.getValue(); break; } } } java.lang.String defaultTheme = manifest.getDefaultTheme(getTarget(), screenSize); java.lang.String preferred = defaultTheme; if ((getTheme()) == null) { java.lang.String activity = getActivity(); if (activity != null) { preferred = manifest.getActivityInfos().get(activity).getTheme(); } if (preferred == null) { preferred = defaultTheme; } setTheme(preferred); } return preferred; }",1d8489781394df2ec0a3f973414e47519e622c47,computePreferredTheme(),computePreferredTheme(),4,23,"@com.android.annotations.Nullable java.lang.String computePreferredTheme() { org.eclipse.core.resources.IProject project = mConfigChooser.getProject(); com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo manifest = com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo.get(project); com.android.resources.ScreenSize screenSize = null; com.android.sdklib.devices.Device device = getDevice(); if (device != null) { java.util.List<com.android.sdklib.devices.State> states = device.getAllStates(); for (com.android.sdklib.devices.State state : states) { com.android.ide.common.resources.configuration.FolderConfiguration folderConfig = com.android.ide.common.resources.configuration.DeviceConfigHelper.getFolderConfig(state); if (folderConfig != null) { com.android.ide.common.resources.configuration.ScreenSizeQualifier qualifier = folderConfig.getScreenSizeQualifier(); screenSize = qualifier.getValue(); break; } } } java.lang.String defaultTheme = manifest.getDefaultTheme(getTarget(), screenSize); java.lang.String preferred = defaultTheme; if ((getTheme()) == null) { java.lang.String activity = getActivity(); if (activity != null) { com.android.ide.eclipse.adt.internal.editors.manifest.ManifestInfo.ActivityAttributes attributes = manifest.getActivityAttributes(activity); if (attributes != null) { preferred = attributes.getTheme(); } } if (preferred == null) { preferred = defaultTheme; } setTheme(preferred); } return preferred; }",72fbc084430fd88afd2496b01925637861411e97,computePreferredTheme(),311173,337,370
422459,services_core_java_com_android_server_connectivity_tethering_UpstreamNetworkMonitor.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.Set<android.net.IpPrefix> getLocalPrefixes() { return mLastLocalPrefixes; },41873669f9c4025a66f97146602654524c16ab2d,,getLocalPrefixes(),11,25,public java.util.Set<android.net.IpPrefix> getOffloadExemptPrefixes() { return ((java.util.Set<android.net.IpPrefix>) (mOffloadExemptPrefixes.clone())); },8d3997438577ee5728cf545c1454202d3b282963,getOffloadExemptPrefixes(),183013,26,52
325445,jack-samples_jack-transform-plugin_src_main_java_com_android_jack_sample_instrumentation_Instrumenter.java,2.0,"private com.android.jack.sample.instrumentation.JStatement createPrintlnStatement(@javax.annotation.Nonnull com.android.jack.sample.instrumentation.JMethod method) { com.android.jack.ir.sourceinfo.SourceInfo sourceInfo = com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN; java.lang.String methodName = getMethodName(method); com.android.jack.sample.instrumentation.JStringLiteral methodNameString = new com.android.jack.sample.instrumentation.JStringLiteral(sourceInfo, methodName); com.android.jack.sample.instrumentation.JFieldRef systemOutFieldAccess = new com.android.jack.sample.instrumentation.JFieldRef(sourceInfo, null, systemOutFieldId, javaLangSystemClass); com.android.jack.sample.instrumentation.JMethodCall methodCall = new com.android.jack.sample.instrumentation.JMethodCall(sourceInfo, systemOutFieldAccess, javaIoPrintStreamClass, printlnMethod.getMethodIdWide(), printlnMethod.getType(), true); methodCall.addArg(methodNameString); return new com.android.jack.sample.instrumentation.JExpressionStatement(methodCall.getSourceInfo(), methodCall); }",a3d5a2e793976c6107c4ffa8e37d0bf4eb387453,"private com.android.jack.sample.instrumentation.JStatement createPrintlnStatement(@javax.annotation.Nonnull com.android.jack.sample.instrumentation.JMethod method) { com.android.jack.ir.sourceinfo.SourceInfo sourceInfo = com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN; java.lang.String methodName = getMethodName(method); com.android.jack.sample.instrumentation.JStringLiteral methodNameString = new com.android.jack.sample.instrumentation.JStringLiteral(sourceInfo, methodName); com.android.jack.sample.instrumentation.JFieldRef systemOutFieldAccess = new com.android.jack.sample.instrumentation.JFieldRef(sourceInfo, null, systemOutFieldId, javaLangSystemClass); com.android.jack.sample.instrumentation.JMethodCall methodCall = new com.android.jack.sample.instrumentation.JMethodCall(sourceInfo, systemOutFieldAccess, javaIoPrintStreamClass, printlnMethod, true); methodCall.addArg(methodNameString); return new com.android.jack.sample.instrumentation.JExpressionStatement(methodCall.getSourceInfo(), methodCall); }",b3e597f7692139905dd522518f71d3ee302c4f29,createPrintlnStatement(com.android.jack.sample.instrumentation.JMethod),createPrintlnStatement(com.android.jack.sample.instrumentation.JMethod),2,2,"private com.android.jack.sample.instrumentation.JStatement createPrintlnStatement(@javax.annotation.Nonnull com.android.jack.sample.instrumentation.JMethod method) { com.android.jack.ir.sourceinfo.SourceInfo sourceInfo = com.android.jack.ir.sourceinfo.SourceInfo.UNKNOWN; java.lang.String methodName = getMethodName(method); com.android.jack.sample.instrumentation.JStringLiteral methodNameString = new com.android.jack.sample.instrumentation.JStringLiteral(sourceInfo, methodName); com.android.jack.sample.instrumentation.JFieldRef systemOutFieldAccess = new com.android.jack.sample.instrumentation.JFieldRef(sourceInfo, null, systemOutFieldId, javaLangSystemClass); com.android.jack.sample.instrumentation.JMethodCall methodCall = new com.android.jack.sample.instrumentation.JMethodCall(sourceInfo, systemOutFieldAccess, javaIoPrintStreamClass, printlnMethodId, true); methodCall.addArg(methodNameString); return new com.android.jack.sample.instrumentation.JExpressionStatement(methodCall.getSourceInfo(), methodCall); }",312f36ae99cf84bf0d647998d7c8281ccf30d2bf,createPrintlnStatement(com.android.jack.sample.instrumentation.JMethod),368588,246,247
317087,tests_net_java_com_android_server_ConnectivityServiceTest.java,15.0,"@android.test.suitebuilder.annotation.SmallTest public void testSatisfiedNetworkRequestDoesNotTriggerOnUnavailable() { android.net.NetworkRequest nr = new android.net.NetworkRequest.Builder().addTransportType(NetworkCapabilities.TRANSPORT_WIFI).build(); final com.android.server.ConnectivityServiceTest.TestNetworkCallback networkCallback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback(); mCm.requestNetwork(nr, networkCallback, 10); mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_WIFI); mWiFiNetworkAgent.connect(false); networkCallback.expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, mWiFiNetworkAgent); com.android.server.ConnectivityServiceTest.sleepFor(15); networkCallback.assertNoCallback(); }",993c92e15aac306bea0dc0d5cb8fd4e03b22195f,"@android.test.suitebuilder.annotation.SmallTest public void testSatisfiedNetworkRequestDoesNotTriggerOnUnavailable() { android.net.NetworkRequest nr = new android.net.NetworkRequest.Builder().addTransportType(NetworkCapabilities.TRANSPORT_WIFI).build(); final com.android.server.ConnectivityServiceTest.TestNetworkCallback networkCallback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback(); mCm.requestNetwork(nr, networkCallback, 150); mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_WIFI); mWiFiNetworkAgent.connect(false); networkCallback.expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, mWiFiNetworkAgent, 150); networkCallback.assertNoCallback(); }",ac4bbcf0c1462ac6f162a843118111d853b06b2d,testSatisfiedNetworkRequestDoesNotTriggerOnUnavailable(),testSatisfiedNetworkRequestDoesNotTriggerOnUnavailable(),5,15,"@android.test.suitebuilder.annotation.SmallTest public void testSatisfiedNetworkRequestDoesNotTriggerOnUnavailable() { android.net.NetworkRequest nr = new android.net.NetworkRequest.Builder().addTransportType(NetworkCapabilities.TRANSPORT_WIFI).build(); final com.android.server.ConnectivityServiceTest.TestNetworkCallback networkCallback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback(); final int timeoutMs = 150; mCm.requestNetwork(nr, networkCallback, timeoutMs); mWiFiNetworkAgent = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_WIFI); mWiFiNetworkAgent.connect(false); networkCallback.expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.AVAILABLE, mWiFiNetworkAgent, timeoutMs); networkCallback.assertNoCallback(); }",30c63add443dd51e2347beebc27fa9d10c0d5f79,testSatisfiedNetworkRequestDoesNotTriggerOnUnavailable(),7010,178,187
155834,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_ProductFlavorCombo.java,4.0,"private static void createProductFlavorCombinations(java.util.List<com.android.build.gradle.internal.ProductFlavorCombo> flavorGroups, com.android.builder.model.ProductFlavor[] group, int index, java.util.List<java.lang.String> flavorDimensionList, com.google.common.collect.ListMultimap<java.lang.String, com.android.builder.model.ProductFlavor> map) { if (index == (flavorDimensionList.size())) { flavorGroups.add(new com.android.build.gradle.internal.ProductFlavorCombo(com.android.build.gradle.internal.ProductFlavorCombo.filterNullFromArray(group))); return; } java.lang.String dimension = flavorDimensionList.get(index); java.util.List<com.android.builder.model.ProductFlavor> flavorList = map.get(dimension); if (flavorList.isEmpty()) { throw new java.lang.RuntimeException(java.lang.String.format(""No flavor is associated with flavor dimension '%1$s'."", dimension)); } else { for (com.android.builder.model.ProductFlavor flavor : flavorList) { group[index] = flavor; com.android.build.gradle.internal.ProductFlavorCombo.createProductFlavorCombinations(flavorGroups, group, (index + 1), flavorDimensionList, map); } } }",f25db9cd6d235bde6e887e9c0615391f738f5513,"private static <S extends com.android.builder.model.Groupable & org.gradle.api.Named> void createProductFlavorCombinations(java.util.List<com.android.build.gradle.internal.ProductFlavorCombo<S>> flavorGroups, java.util.List<S> group, int index, java.util.List<java.lang.String> flavorDimensionList, com.google.common.collect.ListMultimap<java.lang.String, S> map) { if (index == (flavorDimensionList.size())) { flavorGroups.add(new com.android.build.gradle.internal.ProductFlavorCombo<S>(com.google.common.collect.Iterables.filter(group, com.google.common.base.Predicates.notNull()))); return; } java.lang.String dimension = flavorDimensionList.get(index); java.util.List<S> flavorList = map.get(dimension); if (flavorList.isEmpty()) { throw new java.lang.RuntimeException(java.lang.String.format(""No flavor is associated with flavor dimension '%1$s'."", dimension)); } else { for (S flavor : flavorList) { group.add(flavor); com.android.build.gradle.internal.ProductFlavorCombo.createProductFlavorCombinations(flavorGroups, group, (index + 1), flavorDimensionList, map); group.remove(((group.size()) - 1)); } } }",aa51871e8a6c2f5fbbb59764178e621be931e3b2,"createProductFlavorCombinations(java.util.List,com.android.builder.model.ProductFlavor[],int,java.util.List,com.google.common.collect.ListMultimap)","createProductFlavorCombinations(java.util.List,java.util.List,int,java.util.List,com.google.common.collect.ListMultimap)",5,0,"private static <S extends com.android.builder.model.DimensionAware & org.gradle.api.Named> void createProductFlavorCombinations(java.util.List<com.android.build.gradle.internal.ProductFlavorCombo<S>> flavorGroups, java.util.List<S> group, int index, java.util.List<java.lang.String> flavorDimensionList, com.google.common.collect.ListMultimap<java.lang.String, S> map) { if (index == (flavorDimensionList.size())) { flavorGroups.add(new com.android.build.gradle.internal.ProductFlavorCombo<S>(com.google.common.collect.Iterables.filter(group, com.google.common.base.Predicates.notNull()))); return; } java.lang.String dimension = flavorDimensionList.get(index); java.util.List<S> flavorList = map.get(dimension); if (flavorList.isEmpty()) { throw new java.lang.RuntimeException(java.lang.String.format(""No flavor is associated with flavor dimension '%1$s'."", dimension)); } else { for (S flavor : flavorList) { group.add(flavor); com.android.build.gradle.internal.ProductFlavorCombo.createProductFlavorCombinations(flavorGroups, group, (index + 1), flavorDimensionList, map); group.remove(((group.size()) - 1)); } } }",46be43db70d07e2c298c9fb1a127dcd8b4d4cd65,"createProductFlavorCombinations(java.util.List,java.util.List,int,java.util.List,com.google.common.collect.ListMultimap)",84086,312,312
19021,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gle2_SwtUtils.java,5.0,"public static java.awt.image.BufferedImage convertToAwt(org.eclipse.swt.graphics.Image swtImage) { org.eclipse.swt.graphics.ImageData data = swtImage.getImageData(); java.awt.image.BufferedImage awtImage = new java.awt.image.BufferedImage(data.width, data.height, java.awt.image.BufferedImage.TYPE_INT_ARGB); org.eclipse.swt.graphics.PaletteData palette = data.palette; if (palette.isDirect) { for (int y = 0; y < (data.height); y++) { for (int x = 0; x < (data.width); x++) { int pixel = data.getPixel(x, y); awtImage.setRGB(x, y, (-16777216 | pixel)); } } } else { return null; } return awtImage; }",95b5f1202e638ccf2a19aab253951545d3d95fb6,"public static java.awt.image.BufferedImage convertToAwt(org.eclipse.swt.graphics.Image swtImage) { org.eclipse.swt.graphics.ImageData swtData = swtImage.getImageData(); java.awt.image.BufferedImage awtImage = new java.awt.image.BufferedImage(swtData.width, swtData.height, java.awt.image.BufferedImage.TYPE_INT_ARGB); org.eclipse.swt.graphics.PaletteData swtPal = swtData.palette; if (swtPal.isDirect) { org.eclipse.swt.graphics.PaletteData awtPal = com.android.ide.eclipse.adt.internal.editors.layout.gle2.SwtUtils.getAwtPaletteData(awtImage.getType()); if (swtPal.equals(awtPal)) { for (int y = 0; y < (swtData.height); y++) { for (int x = 0; x < (swtData.width); x++) { int pixel = swtData.getPixel(x, y); awtImage.setRGB(x, y, (-16777216 | pixel)); } } } else { int sr = (-(awtPal.redShift)) + (swtPal.redShift); int sg = (-(awtPal.greenShift)) + (swtPal.greenShift); int sb = (-(awtPal.blueShift)) + (swtPal.blueShift); for (int y = 0; y < (swtData.height); y++) { for (int x = 0; x < (swtData.width); x++) { int pixel = swtData.getPixel(x, y); int r = pixel & (swtPal.redMask); int g = pixel & (swtPal.greenMask); int b = pixel & (swtPal.blueMask); r = (sr < 0) ? r >>> (-sr) : r << sr; g = (sg < 0) ? g >>> (-sg) : g << sg; b = (sb < 0) ? b >>> (-sb) : b << sb; pixel = ((-16777216 | r) | g) | b; awtImage.setRGB(x, y, pixel); } } } } else { return null; } return awtImage; }",55f5548571da9900b7fc426237c4b6d38a1f2cf2,convertToAwt(org.eclipse.swt.graphics.Image),convertToAwt(org.eclipse.swt.graphics.Image),3,5,"public static java.awt.image.BufferedImage convertToAwt(org.eclipse.swt.graphics.Image swtImage) { org.eclipse.swt.graphics.ImageData swtData = swtImage.getImageData(); java.awt.image.BufferedImage awtImage = new java.awt.image.BufferedImage(swtData.width, swtData.height, java.awt.image.BufferedImage.TYPE_INT_ARGB); org.eclipse.swt.graphics.PaletteData swtPalette = swtData.palette; if (swtPalette.isDirect) { org.eclipse.swt.graphics.PaletteData awtPalette = com.android.ide.eclipse.adt.internal.editors.layout.gle2.SwtUtils.getAwtPaletteData(awtImage.getType()); if (swtPalette.equals(awtPalette)) { for (int y = 0; y < (swtData.height); y++) { for (int x = 0; x < (swtData.width); x++) { int pixel = swtData.getPixel(x, y); awtImage.setRGB(x, y, (-16777216 | pixel)); } } } else { int sr = (-(awtPalette.redShift)) + (swtPalette.redShift); int sg = (-(awtPalette.greenShift)) + (swtPalette.greenShift); int sb = (-(awtPalette.blueShift)) + (swtPalette.blueShift); for (int y = 0; y < (swtData.height); y++) { for (int x = 0; x < (swtData.width); x++) { int pixel = swtData.getPixel(x, y); int r = pixel & (swtPalette.redMask); int g = pixel & (swtPalette.greenMask); int b = pixel & (swtPalette.blueMask); r = (sr < 0) ? r >>> (-sr) : r << sr; g = (sg < 0) ? g >>> (-sg) : g << sg; b = (sb < 0) ? b >>> (-sb) : b << sb; pixel = ((-16777216 | r) | g) | b; awtImage.setRGB(x, y, pixel); } } } } else { return null; } return awtImage; }",dcff5394035043617836fe4935670626adeae0de,convertToAwt(org.eclipse.swt.graphics.Image),382464,503,503
654568,src_com_android_bluetooth_mapclient_MceStateMachine.java,3.0,"private void onConnectionStateChanged(int prevState, int state) { if ((mDevice) == null) { return; } if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, (((((""Connection state "" + (mDevice)) + "": "") + prevState) + ""->"") + state)); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothMapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }",c014228712a914ff4a1a054cb748f82dfca90170,"private void onConnectionStateChanged(int prevState, int state) { if ((mDevice) == null) { return; } if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, (((((""Connection state "" + (mDevice)) + "": "") + prevState) + ""->"") + state)); } if ((prevState != state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.BluetoothProfileId.MAP_CLIENT); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothMapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }",c3fab7fbde9c21aafdc75196b8ffdc1dcf718249,"onConnectionStateChanged(int,int)","onConnectionStateChanged(int,int)",18,3,"private void onConnectionStateChanged(int prevState, int state) { if ((mDevice) == null) { return; } if (com.android.bluetooth.mapclient.MceStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.mapclient.MceStateMachine.TAG, (((((""Connection state "" + (mDevice)) + "": "") + prevState) + ""->"") + state)); } if ((prevState != state) && (state == (android.bluetooth.BluetoothProfile.STATE_CONNECTED))) { com.android.bluetooth.btservice.MetricsLogger.logProfileConnectionEvent(BluetoothMetricsProto.ProfileId.MAP_CLIENT); } android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothMapClient.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, prevState); intent.putExtra(BluetoothProfile.EXTRA_STATE, state); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mDevice); intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT); mService.sendBroadcast(intent, ProfileService.BLUETOOTH_PERM); }",0e8e5e6eb80f1831fb3db505bb34da3ec483e8cd,"onConnectionStateChanged(int,int)",135666,263,262
65505,lint_libs_lint-api_src_main_java_com_android_tools_lint_detector_api_Project.java,40.0,private void addLibraryProjects(@com.android.annotations.NonNull java.util.Collection<com.android.tools.lint.detector.api.Project> collection) { for (com.android.tools.lint.detector.api.Project library : mDirectLibraries) { collection.add(library); library.addLibraryProjects(collection); } },773aab69f09fc7064f4508778657c2810b9460ec,"private void addLibraryProjects(@com.android.annotations.NonNull java.util.Collection<com.android.tools.lint.detector.api.Project> collection, @com.android.annotations.NonNull java.util.Set<com.android.tools.lint.detector.api.Project> seen) { for (com.android.tools.lint.detector.api.Project library : mDirectLibraries) { if (seen.contains(library)) { mClient.log(Severity.WARNING, null, ""Internal lint error: encountered %1$s more than once"", library); continue; } collection.add(library); seen.add(library); library.addLibraryProjects(collection, seen); } }",0be5c9070339518e3a114c5b3e98d54b9c793f23,addLibraryProjects(java.util.Collection),"addLibraryProjects(java.util.Collection,java.util.Set)",2,18,"private void addLibraryProjects(@com.android.annotations.NonNull java.util.Collection<com.android.tools.lint.detector.api.Project> collection, @com.android.annotations.NonNull java.util.Set<com.android.tools.lint.detector.api.Project> seen, @com.android.annotations.NonNull java.util.Set<com.android.tools.lint.detector.api.Project> path) { for (com.android.tools.lint.detector.api.Project library : mDirectLibraries) { if (seen.contains(library)) { if (path.contains(library)) { mClient.log(Severity.WARNING, null, ""Internal lint error: cyclic library dependency for %1$s"", library); } continue; } collection.add(library); seen.add(library); path.add(library); library.addLibraryProjects(collection, seen, path); path.remove(library); } }",7214de9a4c1654d919462c386caf000239eb3ccb,"addLibraryProjects(java.util.Collection,java.util.Set,java.util.Set)",253902,159,216
252478,java_tests_RsTest_src_com_android_rs_test_UT_reduce.java,38.0,"private boolean patternDuplicateAnonymousResult(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_reduce s) { boolean pass = true; final int inputSize = 1000; final int[] input = createInputArrayInt(149, ((java.lang.Integer.MAX_VALUE) / inputSize)); final int[] javaResultDec = sillySumIntoDecArray(input); final int[] rsResultDec = s.reduce_sillySumIntoDecArray(input).get(); pass &= result(""patternDuplicateAnonymousResult (Dec)"", new com.android.rs.test.UT_reduce.timing(inputSize), javaResultDec, rsResultDec); final int[] javaResultInc = sillySumIntoIncArray(input); final int[] rsResultInc = s.reduce_sillySumIntoIncArray(input).get(); pass &= result(""patternDuplicateAnonymousResult (Inc)"", new com.android.rs.test.UT_reduce.timing(inputSize), javaResultInc, rsResultInc); return pass; }",065d0e113bab2e0839ed8bf358ca59d8dee24032,"private boolean patternDuplicateAnonymousResult(android.renderscript.RenderScript RS, com.android.rs.test.ScriptC_reduce s) { boolean pass = true; final int inputSize = 1000; final int[] input = createInputArrayInt(149, ((java.lang.Integer.MAX_VALUE) / inputSize)); final int[] javaRsltDec = sillySumIntoDecArray(input); final int[] rsRsltDec = s.reduce_sillySumIntoDecArray(input).get(); pass &= result(""patternDuplicateAnonymousResult (Dec)"", new com.android.rs.test.UT_reduce.timing(inputSize), javaRsltDec, rsRsltDec); final int[] javaRsltInc = sillySumIntoIncArray(input); final int[] rsRsltInc = s.reduce_sillySumIntoIncArray(input).get(); pass &= result(""patternDuplicateAnonymousResult (Inc)"", new com.android.rs.test.UT_reduce.timing(inputSize), javaRsltInc, rsRsltInc); return pass; }",63c4581169e75c0eed660235e1c596a3984909a4,"patternDuplicateAnonymousResult(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_reduce)","patternDuplicateAnonymousResult(android.renderscript.RenderScript,com.android.rs.test.ScriptC_reduce)",7,14,"private boolean patternDuplicateAnonymousResult(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_reduce s) { boolean pass = true; final int inputSize = 1000; final int[] input = createInputArrayInt(149, ((java.lang.Integer.MAX_VALUE) / inputSize)); final int[] javaResultDec = sillySumIntoDecArray(input); final int[] rsResultDec = s.reduce_sillySumIntoDecArray(input).get(); pass &= result(""patternDuplicateAnonymousResult (Dec)"", new com.android.rs.test.UT_reduce.timing(inputSize), javaResultDec, rsResultDec); final int[] javaResultInc = sillySumIntoIncArray(input); final int[] rsResultInc = s.reduce_sillySumIntoIncArray(input).get(); pass &= result(""patternDuplicateAnonymousResult (Inc)"", new com.android.rs.test.UT_reduce.timing(inputSize), javaResultInc, rsResultInc); return pass; }",065d0e113bab2e0839ed8bf358ca59d8dee24032,"patternDuplicateAnonymousResult(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_reduce)",379399,247,234
14893,sdkmanager_libs_sdklib_tests_com_android_sdklib_xml_SupportsScreensTest.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testCompareTo() { com.android.sdklib.xml.ManifestData.SupportsScreens supportsS = new com.android.sdklib.xml.ManifestData.SupportsScreens(""false|false|true|false|false""); com.android.sdklib.xml.ManifestData.SupportsScreens supportsN = new com.android.sdklib.xml.ManifestData.SupportsScreens(""false|false|false|true|false""); com.android.sdklib.xml.ManifestData.SupportsScreens supportsL = new com.android.sdklib.xml.ManifestData.SupportsScreens(""false|false|false|false|true""); com.android.sdklib.xml.ManifestData.SupportsScreens supportsSN = new com.android.sdklib.xml.ManifestData.SupportsScreens(""false|false|true|true|false""); com.android.sdklib.xml.ManifestData.SupportsScreens supportsNL = new com.android.sdklib.xml.ManifestData.SupportsScreens(""false|false|false|true|true""); com.android.sdklib.xml.ManifestData.SupportsScreens supportsSL = new com.android.sdklib.xml.ManifestData.SupportsScreens(""false|false|true|false|true""); com.android.sdklib.xml.ManifestData.SupportsScreens supportsSNL = new com.android.sdklib.xml.ManifestData.SupportsScreens(""false|false|true|true|true""); assertEquals((-1), supportsS.compareTo(supportsN)); assertEquals(1, supportsN.compareTo(supportsS)); assertEquals((-1), supportsN.compareTo(supportsL)); assertEquals((-1), supportsS.compareTo(supportsL)); assertEquals((-1), supportsSN.compareTo(supportsNL)); assertEquals((-1), supportsSN.compareTo(supportsSNL)); try { supportsSL.compareTo(supportsN); fail(""Should have thrown IllegalArgumentException""); } catch (java.lang.IllegalArgumentException e) { } }",259767d88b7243c4885df25b2d8bd7f0725838ee,,testCompareTo(),7,4,"public void testCompareScreenSizesWith() { com.android.sdklib.xml.ManifestData.SupportsScreens supportsS = new com.android.sdklib.xml.ManifestData.SupportsScreens(""false|false|true|false|false""); com.android.sdklib.xml.ManifestData.SupportsScreens supportsN = new com.android.sdklib.xml.ManifestData.SupportsScreens(""false|false|false|true|false""); com.android.sdklib.xml.ManifestData.SupportsScreens supportsL = new com.android.sdklib.xml.ManifestData.SupportsScreens(""false|false|false|false|true""); com.android.sdklib.xml.ManifestData.SupportsScreens supportsSL = new com.android.sdklib.xml.ManifestData.SupportsScreens(""false|false|true|false|true""); assertEquals((-1), supportsS.compareScreenSizesWith(supportsN)); assertEquals(1, supportsN.compareScreenSizesWith(supportsS)); assertEquals((-1), supportsN.compareScreenSizesWith(supportsL)); assertEquals((-1), supportsS.compareScreenSizesWith(supportsL)); try { supportsSL.compareScreenSizesWith(supportsN); fail(""Should have thrown IllegalArgumentException""); } catch (java.lang.IllegalArgumentException e) { } try { supportsSL.compareScreenSizesWith(supportsS); fail(""Should have thrown IllegalArgumentException""); } catch (java.lang.IllegalArgumentException e) { } }",4302336fdb79fe39c8040c8a144e0d1dd52d969a,testCompareScreenSizesWith(),107116,445,327
340832,tests_src_com_android_server_telecom_tests_InCallServiceFixture.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onRttInitiationFailure(java.lang.String callId) throws android.os.RemoteException { },deced90d0bf87b658c3d5d864f675e899f0584d0,,onRttInitiationFailure(java.lang.String),8,0,"@java.lang.Override public void onRttInitiationFailure(java.lang.String callId, int reason) throws android.os.RemoteException { }",278c46264a79bb4bafd261f950243d29a7f7cd73,"onRttInitiationFailure(java.lang.String,int)",219758,31,34
110737,build-system_builder_src_main_java_com_android_builder_internal_compiler_PreDexCache.java,2.0,"public void preDexLibrary(@com.android.annotations.NonNull java.io.File inputFile, @com.android.annotations.NonNull java.io.File outFile, @com.android.annotations.NonNull com.android.builder.core.DexOptions dexOptions, @com.android.annotations.NonNull com.android.sdklib.BuildToolInfo buildToolInfo, boolean verbose, @com.android.annotations.NonNull com.android.ide.common.internal.CommandLineRunner commandLineRunner) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { com.android.utils.Pair<com.android.builder.internal.compiler.PreDexCache.Item, java.lang.Boolean> pair = getItem(inputFile, outFile, buildToolInfo, dexOptions); if (pair.getSecond()) { try { com.android.builder.core.AndroidBuilder.preDexLibrary(inputFile, outFile, dexOptions, buildToolInfo, verbose, commandLineRunner); synchronized(this) { (mMisses)++; } } catch (java.io.IOException exception) { outFile.delete(); throw exception; } catch (com.android.ide.common.internal.LoggedErrorException exception) { outFile.delete(); throw exception; } catch (java.lang.InterruptedException exception) { outFile.delete(); throw exception; } finally { pair.getFirst().getLatch().countDown(); } } else { pair.getFirst().getLatch().await(); java.io.File fromFile = pair.getFirst().getOutputFile(); if (fromFile.isFile()) { com.google.common.io.Files.copy(pair.getFirst().getOutputFile(), outFile); synchronized(this) { (mHits)++; } } } }",d611c61cb9b2df6c8624a51e70591a3ccc04fa56,"public void preDexLibrary(@com.android.annotations.NonNull java.io.File inputFile, @com.android.annotations.NonNull java.io.File outFile, @com.android.annotations.NonNull com.android.builder.core.DexOptions dexOptions, @com.android.annotations.NonNull com.android.sdklib.BuildToolInfo buildToolInfo, boolean verbose, @com.android.annotations.NonNull com.android.ide.common.internal.CommandLineRunner commandLineRunner) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { com.android.builder.internal.compiler.DexKey itemKey = com.android.builder.internal.compiler.DexKey.of(inputFile, buildToolInfo.getRevision(), dexOptions.getJumboMode()); com.android.utils.Pair<com.android.builder.internal.compiler.Item, java.lang.Boolean> pair = getItem(itemKey, inputFile, outFile); if (pair.getSecond()) { try { com.android.builder.core.AndroidBuilder.preDexLibrary(inputFile, outFile, dexOptions, buildToolInfo, verbose, commandLineRunner); synchronized(this) { (mMisses)++; } } catch (java.io.IOException exception) { outFile.delete(); throw exception; } catch (com.android.ide.common.internal.LoggedErrorException exception) { outFile.delete(); throw exception; } catch (java.lang.InterruptedException exception) { outFile.delete(); throw exception; } finally { pair.getFirst().getLatch().countDown(); } } else { pair.getFirst().getLatch().await(); java.io.File fromFile = pair.getFirst().getOutputFile(); if (fromFile.isFile()) { com.google.common.io.Files.copy(pair.getFirst().getOutputFile(), outFile); synchronized(this) { (mHits)++; } } } }",84ceb6e74d844e97df62b15857f5aee3b26dfd0b,"preDexLibrary(java.io.File,java.io.File,com.android.builder.core.DexOptions,com.android.sdklib.BuildToolInfo,boolean,com.android.ide.common.internal.CommandLineRunner)","preDexLibrary(java.io.File,java.io.File,com.android.builder.core.DexOptions,com.android.sdklib.BuildToolInfo,boolean,com.android.ide.common.internal.CommandLineRunner)",2,4,"public void preDexLibrary(@com.android.annotations.NonNull java.io.File inputFile, @com.android.annotations.NonNull java.io.File outFile, @com.android.annotations.NonNull com.android.builder.core.DexOptions dexOptions, @com.android.annotations.NonNull com.android.sdklib.BuildToolInfo buildToolInfo, boolean verbose, @com.android.annotations.NonNull com.android.ide.common.internal.CommandLineRunner commandLineRunner) throws com.android.ide.common.internal.LoggedErrorException, java.io.IOException, java.lang.InterruptedException { com.android.builder.internal.compiler.DexKey itemKey = com.android.builder.internal.compiler.DexKey.of(inputFile, buildToolInfo.getRevision(), dexOptions.getJumboMode()); com.android.utils.Pair<com.android.builder.internal.compiler.Item, java.lang.Boolean> pair = getItem(itemKey, inputFile, outFile); if (pair.getSecond()) { try { com.android.builder.core.AndroidBuilder.preDexLibrary(inputFile, outFile, dexOptions, buildToolInfo, verbose, commandLineRunner); incrementMisses(); } catch (java.io.IOException exception) { outFile.delete(); throw exception; } catch (com.android.ide.common.internal.LoggedErrorException exception) { outFile.delete(); throw exception; } catch (java.lang.InterruptedException exception) { outFile.delete(); throw exception; } finally { pair.getFirst().getLatch().countDown(); } } else { pair.getFirst().getLatch().await(); java.io.File fromFile = pair.getFirst().getOutputFile(); if (fromFile.isFile()) { com.google.common.io.Files.copy(pair.getFirst().getOutputFile(), outFile); incrementHits(); } } }",755669016b2910d3fde511b9cc54561ce05061c3,"preDexLibrary(java.io.File,java.io.File,com.android.builder.core.DexOptions,com.android.sdklib.BuildToolInfo,boolean,com.android.ide.common.internal.CommandLineRunner)",185030,421,405
146988,build-system_gradle-core_src_main_groovy_com_android_build_gradle_tasks_PreprocessResourcesTask.java,5.0,"@java.lang.Override protected void doFullTaskAction() { com.google.common.collect.SetMultimap<java.lang.String, java.lang.String> state = com.google.common.collect.HashMultimap.create(); emptyFolder(getOutputResDirectory()); emptyFolder(getGeneratedResDirectory()); emptyFolder(getIncrementalFolder()); try { for (java.io.File resourceFile : getProject().fileTree(getMergedResDirectory())) { handleFile(resourceFile, state); } saveState(state); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } }",f8d246e4712339216a877b6237939d47cf9048e2,"@java.lang.Override protected void doFullTaskAction() { com.google.common.collect.SetMultimap<java.io.File, java.io.File> generatedFiles = com.google.common.collect.HashMultimap.create(); emptyFolder(getOutputResDirectory()); emptyFolder(getGeneratedResDirectory()); emptyFolder(getIncrementalFolder()); com.android.ide.common.res2.PreprocessDataSet mergedSet = new com.android.ide.common.res2.PreprocessDataSet(getVariantName(), PreprocessDataSet.ResourcesDirectory.MERGED); mergedSet.addSource(getMergedResDirectory()); mergedSet.setMergedResDirectory(getMergedResDirectory()); com.android.ide.common.res2.PreprocessDataSet generatedSet = new com.android.ide.common.res2.PreprocessDataSet(getVariantName(), PreprocessDataSet.ResourcesDirectory.GENERATED); generatedSet.addSource(getMergedResDirectory()); generatedSet.setGeneratedResDirectory(getGeneratedResDirectory()); generatedSet.setGeneratedFiles(generatedFiles); try { for (java.io.File resourceFile : getProject().fileTree(getMergedResDirectory())) { handleFile(resourceFile, FileStatus.NEW, mergedSet, generatedSet, generatedFiles); } com.android.ide.common.res2.PreprocessResourcesMerger merger = new com.android.ide.common.res2.PreprocessResourcesMerger(); merger.addDataSet(generatedSet); merger.addDataSet(mergedSet); com.android.ide.common.res2.PreprocessResourcesWriter writer = new com.android.ide.common.res2.PreprocessResourcesWriter(getOutputResDirectory()); merger.mergeData(writer, true); merger.writeBlobTo(getIncrementalFolder(), writer); } catch (com.android.ide.common.res2.MergingException e) { throw new java.lang.RuntimeException(e); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } }",480f0faab829b3ad1460f51bb4bfccf4b368bbcd,doFullTaskAction(),doFullTaskAction(),7,7,"@java.lang.Override protected void doFullTaskAction() { com.google.common.collect.SetMultimap<java.io.File, java.io.File> generatedFiles = com.google.common.collect.HashMultimap.create(); emptyFolder(getOutputResDirectory()); emptyFolder(getGeneratedResDirectory()); emptyFolder(getIncrementalFolder()); com.android.ide.common.res2.PreprocessDataSet mergedSet = new com.android.ide.common.res2.PreprocessDataSet(getVariantName(), PreprocessDataSet.ResourcesDirectory.MERGED); mergedSet.addSource(getMergedResDirectory()); mergedSet.setMergedResDirectory(getMergedResDirectory()); com.android.ide.common.res2.PreprocessDataSet generatedSet = new com.android.ide.common.res2.PreprocessDataSet(getVariantName(), PreprocessDataSet.ResourcesDirectory.GENERATED); generatedSet.addSource(getMergedResDirectory()); generatedSet.setGeneratedResDirectory(getGeneratedResDirectory()); generatedSet.setGeneratedFiles(generatedFiles); try { for (java.io.File resourceFile : getProject().fileTree(getMergedResDirectory())) { handleFile(resourceFile, FileStatus.NEW, mergedSet, generatedSet, generatedFiles); } com.android.ide.common.res2.PreprocessResourcesMerger merger = new com.android.ide.common.res2.PreprocessResourcesMerger(); merger.addDataSet(generatedSet); merger.addDataSet(mergedSet); finalizeMerge(merger); } catch (com.android.ide.common.res2.MergingException e) { throw new java.lang.RuntimeException(e); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } }",fe6697016a2b4f170028b695c09c7a818c373634,doFullTaskAction(),266604,429,376
37380,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_launch_EmulatorConfigTab.java,15.0,"@java.lang.Override public void performApply(org.eclipse.debug.core.ILaunchConfigurationWorkingCopy configuration) { configuration.setAttribute(LaunchConfigDelegate.ATTR_TARGET_MODE, mAutoTargetButton.getSelection()); com.android.sdklib.internal.avd.AvdInfo avd = mPreferredAvdSelector.getSelected(); if (avd != null) { configuration.setAttribute(LaunchConfigDelegate.ATTR_AVD_NAME, avd.getName()); } else { configuration.setAttribute(LaunchConfigDelegate.ATTR_AVD_NAME, ((java.lang.String) (null))); } configuration.setAttribute(LaunchConfigDelegate.ATTR_SPEED, mSpeedCombo.getSelectionIndex()); configuration.setAttribute(LaunchConfigDelegate.ATTR_DELAY, mDelayCombo.getSelectionIndex()); configuration.setAttribute(LaunchConfigDelegate.ATTR_COMMANDLINE, mEmulatorCLOptions.getText()); configuration.setAttribute(LaunchConfigDelegate.ATTR_WIPE_DATA, mWipeDataButton.getSelection()); configuration.setAttribute(LaunchConfigDelegate.ATTR_NO_BOOT_ANIM, mNoBootAnimButton.getSelection()); }",dc3cdd1e3febfd68a1c54cdb59ddb4dc4b9ef261,"@java.lang.Override public void performApply(org.eclipse.debug.core.ILaunchConfigurationWorkingCopy configuration) { configuration.setAttribute(LaunchConfigDelegate.ATTR_TARGET_MODE, getCurrentTargetMode().ordinal()); com.android.sdklib.internal.avd.AvdInfo avd = mPreferredAvdSelector.getSelected(); if (avd != null) { configuration.setAttribute(LaunchConfigDelegate.ATTR_AVD_NAME, avd.getName()); } else { configuration.setAttribute(LaunchConfigDelegate.ATTR_AVD_NAME, ((java.lang.String) (null))); } configuration.setAttribute(LaunchConfigDelegate.ATTR_SPEED, mSpeedCombo.getSelectionIndex()); configuration.setAttribute(LaunchConfigDelegate.ATTR_DELAY, mDelayCombo.getSelectionIndex()); configuration.setAttribute(LaunchConfigDelegate.ATTR_COMMANDLINE, mEmulatorCLOptions.getText()); configuration.setAttribute(LaunchConfigDelegate.ATTR_WIPE_DATA, mWipeDataButton.getSelection()); configuration.setAttribute(LaunchConfigDelegate.ATTR_NO_BOOT_ANIM, mNoBootAnimButton.getSelection()); }",183417251a0c67d904a967b885e6fabe2a176945,performApply(org.eclipse.debug.core.ILaunchConfigurationWorkingCopy),performApply(org.eclipse.debug.core.ILaunchConfigurationWorkingCopy),4,15,"@java.lang.Override public void performApply(org.eclipse.debug.core.ILaunchConfigurationWorkingCopy configuration) { configuration.setAttribute(LaunchConfigDelegate.ATTR_TARGET_MODE, getCurrentTargetMode().toString()); com.android.sdklib.internal.avd.AvdInfo avd = mPreferredAvdSelector.getSelected(); if (avd != null) { configuration.setAttribute(LaunchConfigDelegate.ATTR_AVD_NAME, avd.getName()); } else { configuration.setAttribute(LaunchConfigDelegate.ATTR_AVD_NAME, ((java.lang.String) (null))); } configuration.setAttribute(LaunchConfigDelegate.ATTR_SPEED, mSpeedCombo.getSelectionIndex()); configuration.setAttribute(LaunchConfigDelegate.ATTR_DELAY, mDelayCombo.getSelectionIndex()); configuration.setAttribute(LaunchConfigDelegate.ATTR_COMMANDLINE, mEmulatorCLOptions.getText()); configuration.setAttribute(LaunchConfigDelegate.ATTR_WIPE_DATA, mWipeDataButton.getSelection()); configuration.setAttribute(LaunchConfigDelegate.ATTR_NO_BOOT_ANIM, mNoBootAnimButton.getSelection()); }",1833d0734cc832e73b71c180e342064fbe7a621c,performApply(org.eclipse.debug.core.ILaunchConfigurationWorkingCopy),3958,239,239
119516,build-system_gradle_src_main_groovy_com_android_build_gradle_internal_VariantManager.java,1.0,"public void createAndroidTasks(@com.android.annotations.Nullable com.android.builder.model.SigningConfig signingOverride) { variantFactory.validateModel(this); if (!(productFlavors.isEmpty())) { org.gradle.api.Task assembleTest = project.getTasks().create(""assembleAndroidTest""); assembleTest.setGroup(org.gradle.api.plugins.BasePlugin.BUILD_GROUP); assembleTest.setDescription(""Assembles all the Test applications""); basePlugin.setAssembleAndroidTest(assembleTest); } if (variantDataList.isEmpty()) { populateVariantDataList(signingOverride); } for (com.android.build.gradle.internal.variant.BaseVariantData variantData : variantDataList) { createTasksForVariantData(project.getTasks(), variantData); } basePlugin.createLintTasks(); basePlugin.createConnectedCheckTasks((!(productFlavors.isEmpty())), false); basePlugin.createUnitTestTasks(); createApiObjects(); }",9d244bffd889923c9aa13a2c71e6d82b596038b0,"public void createAndroidTasks(@com.android.annotations.Nullable com.android.builder.model.SigningConfig signingOverride) { variantFactory.validateModel(this); if (!(productFlavors.isEmpty())) { org.gradle.api.Task assembleTest = project.getTasks().create(""assembleAndroidTest""); assembleTest.setGroup(org.gradle.api.plugins.BasePlugin.BUILD_GROUP); assembleTest.setDescription(""Assembles all the Test applications""); basePlugin.setAssembleAndroidTest(assembleTest); } if (variantDataList.isEmpty()) { populateVariantDataList(signingOverride); } for (com.android.build.gradle.internal.variant.BaseVariantData variantData : variantDataList) { createTasksForVariantData(project.getTasks(), variantData); } taskManager.createLintTasks(); taskManager.createConnectedCheckTasks((!(productFlavors.isEmpty())), false); taskManager.createUnitTestTasks(); createApiObjects(); }",15057a4fbe592003b64f76685450e90d6b7b381d,createAndroidTasks(com.android.builder.model.SigningConfig),createAndroidTasks(com.android.builder.model.SigningConfig),11,1,"public void createAndroidTasks(@com.android.annotations.Nullable com.android.builder.model.SigningConfig signingOverride) { variantFactory.validateModel(this); taskManager.createAssembleAndroidTestTask(); if (variantDataList.isEmpty()) { populateVariantDataList(signingOverride); } for (com.android.build.gradle.internal.variant.BaseVariantData variantData : variantDataList) { createTasksForVariantData(project.getTasks(), variantData); } taskManager.createLintTasks(); taskManager.createConnectedCheckTasks((!(productFlavors.isEmpty())), false); taskManager.createUnitTestTasks(); createApiObjects(); }",47db6d6721d0b57d845199f4cf9b6433ba637742,createAndroidTasks(com.android.builder.model.SigningConfig),36305,216,147
236560,server_jack-server_src_com_android_jack_server_JackHttpServer.java,40.0,"private void loadConfig() throws com.android.sched.util.file.NotFileException, com.android.sched.util.file.WrongPermissionException, java.io.IOException { com.android.jack.server.JackHttpServer.logger.log(java.util.logging.Level.INFO, (""Loading config of jack server version: "" + (getVersion().getVerboseVersion()))); com.android.jack.server.ConfigFile config = new com.android.jack.server.ConfigFile(serverDir); checkAccess(config.getStorageFile(), java.util.EnumSet.of(java.nio.file.attribute.PosixFilePermission.OWNER_READ, java.nio.file.attribute.PosixFilePermission.OWNER_WRITE)); portService = config.getServicePort(); portAdmin = config.getAdminPort(); timeout = config.getTimeout(); maxJarSize = config.getMaxJarSize(); maxServices = config.getMaxServices(); java.util.List<com.android.sched.util.codec.PairCodec.Pair<java.lang.Integer, java.lang.Long>> maxServicesByMem = config.getMaxServiceByMem(); if (!(maxServicesByMem.isEmpty())) { long maxMemory = java.lang.Runtime.getRuntime().maxMemory(); for (com.android.sched.util.codec.PairCodec.Pair<java.lang.Integer, java.lang.Long> pair : maxServicesByMem) { if (maxMemory < (pair.getSecond().longValue())) { maxServices = java.lang.Math.min(pair.getFirst().intValue(), maxServices); } } } if ((config.isModified()) && ((config.getConfigVersion()) < (ConfigFile.CURRENT_CONFIG_VERSION))) { config.store(); } }",88c75251640b5b364fce4b4b51ab58fda0f519b8,"private void loadConfig() throws com.android.sched.util.file.NotFileException, com.android.sched.util.file.WrongPermissionException, java.io.IOException { com.android.jack.server.JackHttpServer.logger.log(java.util.logging.Level.INFO, (""Loading config of jack server version: "" + (getVersion().getVerboseVersion()))); com.android.jack.server.ConfigFile config = new com.android.jack.server.ConfigFile(serverDir); checkAccess(config.getStorageFile(), java.util.EnumSet.of(java.nio.file.attribute.PosixFilePermission.OWNER_READ, java.nio.file.attribute.PosixFilePermission.OWNER_WRITE)); portService = config.getServicePort(); portAdmin = config.getAdminPort(); maxJarSize = config.getMaxJarSize(); delayedTasks.clear(); int timeout = config.getTimeout(); if (timeout != (ConfigFile.TIME_DISABLED_VALUE)) { delayedTasks.add(new com.android.jack.server.JackHttpServer.DelayedTask((timeout * 1000L)) { @java.lang.Override public void run() { freeLoadedPrograms(); } }); } int idle = config.getIdleDelay(); if (idle != (ConfigFile.TIME_DISABLED_VALUE)) { delayedTasks.add(new com.android.jack.server.JackHttpServer.DelayedTask((idle * 1000L)) { @java.lang.Override public void run() { enterIdleMode(); } }); } maxServices = config.getMaxServices(); java.util.List<com.android.sched.util.codec.PairCodec.Pair<java.lang.Integer, java.lang.Long>> maxServicesByMem = config.getMaxServiceByMem(); if (!(maxServicesByMem.isEmpty())) { long maxMemory = java.lang.Runtime.getRuntime().maxMemory(); for (com.android.sched.util.codec.PairCodec.Pair<java.lang.Integer, java.lang.Long> pair : maxServicesByMem) { if (maxMemory < (pair.getSecond().longValue())) { maxServices = java.lang.Math.min(pair.getFirst().intValue(), maxServices); } } } if ((config.isModified()) && ((config.getConfigVersion()) < (ConfigFile.CURRENT_CONFIG_VERSION))) { config.store(); } }",f957385fd26f138f8fa66150487e104b109abb4a,loadConfig(),loadConfig(),13,46,"private void loadConfig() throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.NotFileException, com.android.sched.util.file.WrongPermissionException, java.io.IOException { com.android.jack.server.JackHttpServer.logger.log(java.util.logging.Level.INFO, (""Loading config of jack server version: "" + (getVersion().getVerboseVersion()))); com.android.jack.server.ConfigFile config = new com.android.jack.server.ConfigFile(serverDir); checkAccess(config.getStorageFile(), java.util.EnumSet.of(java.nio.file.attribute.PosixFilePermission.OWNER_READ, java.nio.file.attribute.PosixFilePermission.OWNER_WRITE)); portService = config.getServicePort(); portAdmin = config.getAdminPort(); maxJarSize = config.getMaxJarSize(); delayedModes.clear(); addServerMode(config.getIdleDelay(), ServerMode.IDLE); addServerMode(config.getDeepIdleDelay(), ServerMode.DEEP_IDLE); addServerMode(config.getTimeout(), ServerMode.SLEEP); maxServices = config.getMaxServices(); java.util.List<com.android.sched.util.codec.PairCodec.Pair<java.lang.Integer, java.lang.Long>> maxServicesByMem = config.getMaxServiceByMem(); if (!(maxServicesByMem.isEmpty())) { long maxMemory = java.lang.Runtime.getRuntime().maxMemory(); for (com.android.sched.util.codec.PairCodec.Pair<java.lang.Integer, java.lang.Long> pair : maxServicesByMem) { if (maxMemory < (pair.getSecond().longValue())) { maxServices = java.lang.Math.min(pair.getFirst().intValue(), maxServices); } } } if ((config.isModified()) && ((config.getConfigVersion()) < (ConfigFile.CURRENT_CONFIG_VERSION))) { config.store(); } }",7db16314fd3129a6363e98003683bd9fcb9c663f,loadConfig(),417473,506,434
81413,v8_renderscript_java_src_android_support_v8_renderscript_FieldPacker.java,20.0,"public void addU64(android.support.v8.renderscript.Long3 v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addU64(new android.renderscript.Long3(v.x, v.y, v.z)); return; } addU64(v.x); addU64(v.y); addU64(v.z); }",37354767f93449fc9b1e1164fb885291169c29d0,"public void addU64(android.support.v8.renderscript.Long3 v) { if (shouldThunk()) { mN.addU64(new android.renderscript.Long3(v.x, v.y, v.z)); return; } addU64(v.x); addU64(v.y); addU64(v.z); }",1a55c4d8c63d2b668e732e8233095b3f31b49ed0,addU64(android.support.v8.renderscript.Long3),addU64(android.support.v8.renderscript.Long3),5,19,"public void addU64(android.support.v8.renderscript.Long3 v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addU64(new android.renderscript.Long3(v.x, v.y, v.z)); return; } addU64(v.x); addU64(v.y); addU64(v.z); }",37354767f93449fc9b1e1164fb885291169c29d0,addU64(android.support.v8.renderscript.Long3),205182,80,93
52060,luni_src_main_java_org_apache_harmony_security_provider_cert_X509CertPathImpl.java,2.0,"public static org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance(java.io.InputStream in, java.lang.String encoding) throws java.security.cert.CertificateException { if (!(org.apache.harmony.security.provider.cert.X509CertPathImpl.encodings.contains(encoding))) { throw new java.security.cert.CertificateException(""Unsupported encoding""); } try { if (org.apache.harmony.security.provider.cert.X509CertPathImpl.encodingsArr[0].equals(encoding)) { return ((org.apache.harmony.security.provider.cert.X509CertPathImpl) (org.apache.harmony.security.provider.cert.X509CertPathImpl.ASN1.decode(in))); } else { org.apache.harmony.security.pkcs7.ContentInfo ci = ((org.apache.harmony.security.pkcs7.ContentInfo) (ContentInfo.ASN1.decode(in))); org.apache.harmony.security.pkcs7.SignedData sd = ci.getSignedData(); if (sd == null) { throw new java.security.cert.CertificateException(""Incorrect PKCS7 encoded form: missing signed data""); } java.util.List<org.apache.harmony.security.x509.Certificate> certs = sd.getCertificates(); if (certs == null) { certs = new java.util.ArrayList<org.apache.harmony.security.x509.Certificate>(); } java.util.List<org.apache.harmony.security.provider.cert.X509CertImpl> result = new java.util.ArrayList<org.apache.harmony.security.provider.cert.X509CertImpl>(); for (org.apache.harmony.security.x509.Certificate cert : certs) { result.add(new org.apache.harmony.security.provider.cert.X509CertImpl(cert)); } return new org.apache.harmony.security.provider.cert.X509CertPathImpl(result, org.apache.harmony.security.provider.cert.X509CertPathImpl.PKCS7, ci.getEncoded()); } } catch (java.io.IOException e) { throw new java.security.cert.CertificateException((""Incorrect encoded form: "" + (e.getMessage()))); } }",7e8fb77434d5ea4b30861bb93ea5958f6bf74965,"public static org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance(java.io.InputStream in, java.lang.String encoding) throws java.security.cert.CertificateException { try { if (org.apache.harmony.security.provider.cert.X509CertPathImpl.PKI_PATH_NAME.equals(encoding)) { return ((org.apache.harmony.security.provider.cert.X509CertPathImpl) (org.apache.harmony.security.provider.cert.X509CertPathImpl.ASN1.decode(in))); } else if (org.apache.harmony.security.provider.cert.X509CertPathImpl.PKCS7_NAME.equals(encoding)) { return org.apache.harmony.security.provider.cert.X509CertPathImpl.getCertPathFromContentInfo(((org.apache.harmony.security.pkcs7.ContentInfo) (ContentInfo.ASN1.decode(in)))); } else { throw new java.security.cert.CertificateException((""Unsupported encoding: "" + encoding)); } } catch (java.io.IOException e) { throw new java.security.cert.CertificateException(""Problem decoding CertPath"", e); } }",c13dc90aa478d47580859c809fdac8bac7cf2661,"getInstance(java.io.InputStream,java.lang.String)","getInstance(java.io.InputStream,java.lang.String)",7,2,"public static org.apache.harmony.security.provider.cert.X509CertPathImpl getInstance(java.io.InputStream in, java.lang.String encoding) throws java.security.cert.CertificateException { try { final org.apache.harmony.security.provider.cert.X509CertPathImpl.Encoding encType = org.apache.harmony.security.provider.cert.X509CertPathImpl.Encoding.findByApiName(encoding); if (encType == null) { throw new java.security.cert.CertificateException((""Unsupported encoding: "" + encoding)); } switch (encType) { case PKI_PATH : return ((org.apache.harmony.security.provider.cert.X509CertPathImpl) (org.apache.harmony.security.provider.cert.X509CertPathImpl.ASN1.decode(in))); case PKCS7 : return org.apache.harmony.security.provider.cert.X509CertPathImpl.getCertPathFromContentInfo(((org.apache.harmony.security.pkcs7.ContentInfo) (ContentInfo.ASN1.decode(in)))); default : throw new java.security.cert.CertificateException((""Unsupported encoding: "" + encoding)); } } catch (java.io.IOException e) { throw new java.security.cert.CertificateException(""Failed to decode CertPath"", e); } }",c7901ad3a57dc5eb3cd8afccb13b97bd88e3ec4d,"getInstance(java.io.InputStream,java.lang.String)",7396,276,309
338351,tests_telephonytests_src_com_android_internal_telephony_dataconnection_DataConnectionTest.java,10.0,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testModemSuggestNoRetry() throws java.lang.Exception { com.android.internal.telephony.dataconnection.DataCallResponse response = new com.android.internal.telephony.dataconnection.DataCallResponse(); response.suggestedRetryTime = java.lang.Integer.MAX_VALUE; android.os.AsyncResult ar = new android.os.AsyncResult(null, response, null); assertEquals(RetryManager.NO_RETRY, getSuggestedRetryDelay(ar)); }",e1288bb1060c2e26655c93814badf0d09160eb73,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testModemSuggestNoRetry() throws java.lang.Exception { com.android.internal.telephony.dataconnection.DataCallResponse response = new com.android.internal.telephony.dataconnection.DataCallResponse(0, java.lang.Integer.MAX_VALUE, 1, 2, ""IP"", ""rmnet_data7"", ""12.34.56.78"", ""98.76.54.32"", ""11.22.33.44"", """", 1440); android.os.AsyncResult ar = new android.os.AsyncResult(null, response, null); assertEquals(RetryManager.NO_RETRY, getSuggestedRetryDelay(ar)); }",63b2973c5407160523f9205637e0b70d0370ec11,testModemSuggestNoRetry(),testModemSuggestNoRetry(),9,10,"@org.junit.Test @android.test.suitebuilder.annotation.SmallTest public void testModemSuggestNoRetry() throws java.lang.Exception { com.android.internal.telephony.dataconnection.DataCallResponse response = new com.android.internal.telephony.dataconnection.DataCallResponse(0, java.lang.Integer.MAX_VALUE, 1, 2, ""IP"", com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_IFNAME, com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_ADDRESS, com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_DNS, com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_GATEWAY, com.android.internal.telephony.dataconnection.DcTrackerTest.FAKE_PCSCF_ADDRESS, 1440); android.os.AsyncResult ar = new android.os.AsyncResult(null, response, null); assertEquals(RetryManager.NO_RETRY, getSuggestedRetryDelay(ar)); }",45cb1ad5200f6dc4f7ed335b4538caa3f0cca725,testModemSuggestNoRetry(),145225,153,231
149502,test_442-checker-constant-folding_src_Main.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static long ShlLong33(long arg) { long imm = 33; return arg << imm; },552c2fdee505ba5b67240ecf43c43fd604dec0fd,,ShlLong33(long),9,6,public static boolean CmpFloatGreaterThanNaN(float arg) { return arg > (java.lang.Float.NaN); },0a66d2551f6c52c2fba6a1b11ccc054af2baed6c,CmpFloatGreaterThanNaN(float),431111,24,27
335587,service_java_com_android_server_wifi_WifiMonitor.java,8.0,"private boolean ensureConnectedLocked() { if (mConnected) { return true; } if (mVerboseLoggingEnabled) android.util.Log.d(com.android.server.wifi.WifiMonitor.TAG, ""connecting to supplicant""); int connectTries = 0; while (true) { if (mWifiNative.connectToSupplicant()) { mConnected = true; new com.android.server.wifi.WifiMonitor.MonitorThread(mWifiNative.getLocalLog()).start(); return true; } if ((connectTries++) < 5) { try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException ignore) { } } else { return false; } } }",0e04d8d6596821387019a1c3307a3442157c39bb,"private boolean ensureConnectedLocked(java.lang.String iface) { if (mConnected) { return true; } if (mVerboseLoggingEnabled) android.util.Log.d(com.android.server.wifi.WifiMonitor.TAG, ""connecting to supplicant""); int connectTries = 0; mWifiNative.initializeSupplicantHal(); while (true) { if (mWifiNative.connectToSupplicant()) { mConnected = true; new com.android.server.wifi.WifiMonitor.MonitorThread(mWifiNative.getLocalLog()).start(); return true; } if ((connectTries++) < 5) { try { java.lang.Thread.sleep(1000); } catch (java.lang.InterruptedException ignore) { } } else { return false; } } }",1ce299127fa7f2e69532fd39f2c30028cf176d4c,ensureConnectedLocked(),ensureConnectedLocked(java.lang.String),32,8,"public void broadcastNetworkConnectionEvent(java.lang.String iface, int networkId, java.lang.String bssid) { sendMessage(iface, com.android.server.wifi.WifiMonitor.NETWORK_CONNECTION_EVENT, networkId, 0, bssid); }",0ea27b78b2a84bd3fddea93440dd06c05a492d03,"broadcastNetworkConnectionEvent(java.lang.String,int,java.lang.String)",320134,174,59
18960,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_xml_descriptors_XmlDescriptors.java,18.0,"private com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor createSearchable(java.util.Map<java.lang.String, com.android.ide.eclipse.adt.internal.resources.DeclareStyleableInfo> searchableStyleMap, com.android.ide.eclipse.adt.internal.editors.descriptors.XmlnsAttributeDescriptor xmlns) { com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor action_key = createElement(searchableStyleMap, ""SearchableActionKey"", ""actionkey"", ""Action Key"", null, null, null, false); com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor searchable = createElement(searchableStyleMap, ""Searchable"", ""searchable"", ""Searchable"", null, xmlns, new com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor[]{ action_key }, false); return searchable; }",fbe4a8ce821cdf17ddda25858831c4b55289be44,"private com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor createSearchable(java.util.Map<java.lang.String, com.android.ide.common.platformData.DeclareStyleableInfo> searchableStyleMap, com.android.ide.eclipse.adt.internal.editors.descriptors.XmlnsAttributeDescriptor xmlns) { com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor action_key = createElement(searchableStyleMap, ""SearchableActionKey"", ""actionkey"", ""Action Key"", null, null, null, false); com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor searchable = createElement(searchableStyleMap, ""Searchable"", ""searchable"", ""Searchable"", null, xmlns, new com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor[]{ action_key }, false); return searchable; }",7a1180255d78465b35cedebe29052dd230ef40c2,"createSearchable(java.util.Map,com.android.ide.eclipse.adt.internal.editors.descriptors.XmlnsAttributeDescriptor)","createSearchable(java.util.Map,com.android.ide.eclipse.adt.internal.editors.descriptors.XmlnsAttributeDescriptor)",2,18,"private com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor createSearchable(java.util.Map<java.lang.String, com.android.ide.common.resources.platform.DeclareStyleableInfo> searchableStyleMap, com.android.ide.eclipse.adt.internal.editors.descriptors.XmlnsAttributeDescriptor xmlns) { com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor action_key = createElement(searchableStyleMap, ""SearchableActionKey"", ""actionkey"", ""Action Key"", null, null, null, false); com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor searchable = createElement(searchableStyleMap, ""Searchable"", ""searchable"", ""Searchable"", null, xmlns, new com.android.ide.eclipse.adt.internal.editors.descriptors.ElementDescriptor[]{ action_key }, false); return searchable; }",62f7807266fc8b4eb8cb5d48eae8d03f7d234a5e,"createSearchable(java.util.Map,com.android.ide.eclipse.adt.internal.editors.descriptors.XmlnsAttributeDescriptor)",136492,220,221
20902,eclipse_plugins_com.android.ide.eclipse.ddms_src_com_android_ide_eclipse_ddms_DdmsPlugin.java,36.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean launchTraceview(java.lang.String osPath) { if ((mTraceviewLaunchers) != null) { for (com.android.ide.eclipse.ddms.ITraceviewLauncher launcher : mTraceviewLaunchers) { try { if (launcher.openFile(osPath)) { return true; } } catch (java.lang.Throwable t) { t.printStackTrace(); } } } return false; },7d2ae74ee5b5afb36290c48002f72892a581a579,,launchTraceview(java.lang.String),4,36,public boolean launchTraceview(java.lang.String osPath) { if ((mTraceviewLaunchers) != null) { for (com.android.ide.eclipse.ddms.ITraceviewLauncher launcher : mTraceviewLaunchers) { try { if (launcher.openFile(osPath)) { return true; } } catch (java.lang.Throwable t) { } } } return false; },2e574e9fb75c7ca51f1e24008f16c47acba305d4,launchTraceview(java.lang.String),525634,96,91
114478,sched_src_com_android_sched_util_codec_OutputVDirCodec.java,3.0,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.OutputVDir parseString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) { try { return checkString(context, string); } catch (com.android.sched.util.codec.ParsingException e) { throw new com.android.sched.util.config.ConfigurationError(e); } }",d5799b50945be871d93cb30567c0993b878938ac,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.OutputRootVDir parseString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) { try { return checkString(context, string); } catch (com.android.sched.util.codec.ParsingException e) { throw new com.android.sched.util.config.ConfigurationError(e); } }",ff0d08bf540cb8cb501b96eb50055ae9cbab5628,"parseString(com.android.sched.util.codec.CodecContext,java.lang.String)","parseString(com.android.sched.util.codec.CodecContext,java.lang.String)",13,2,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.OutputVFS parseString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull java.lang.String string) { try { return checkString(context, string); } catch (com.android.sched.util.codec.ParsingException e) { throw new com.android.sched.util.config.ConfigurationError(e); } }",02f0391ea2cf444ca90017d009d00cd2ae60ccb6,"parseString(com.android.sched.util.codec.CodecContext,java.lang.String)",313007,107,105
108516,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,46.0,public void testSetDecimalFormatSymbolsAsNull() { java.text.DecimalFormat format = ((java.text.DecimalFormat) (java.text.DecimalFormat.getInstance())); format.setDecimalFormatSymbols(null); },aef420b2b586abf3b43174e761327db7c5a4504c,public void testSetDecimalFormatSymbolsAsNull() { java.text.DecimalFormat format = ((java.text.DecimalFormat) (java.text.NumberFormat.getInstance())); format.setDecimalFormatSymbols(null); },d8524119ef6ebe0eb01f4844733a08beadc39011,testSetDecimalFormatSymbolsAsNull(),testSetDecimalFormatSymbolsAsNull(),2,67,public void test_setDecimalFormatSymbolsAsNull() { java.text.DecimalFormat format = ((java.text.DecimalFormat) (java.text.NumberFormat.getInstance())); format.setDecimalFormatSymbols(null); },7525f25968ce350910c6f36a27b25173009d6718,test_setDecimalFormatSymbolsAsNull(),84383,43,44
520115,src_com_android_settings_wifi_WifiSettings.java,14.0,"private void updateAccessPointsDelayed() { if ((((getActivity()) != null) && (!(mIsRestricted))) && (mWifiManager.isWifiEnabled())) { setProgressBarVisible(true); getView().postDelayed(mUpdateAccessPointsRunnable, 300); } }",3eb364819587622b6b501865104a6ab12a67f751,"private void updateAccessPointsDelayed() { if ((((getActivity()) != null) && (!(mIsRestricted))) && (mWifiManager.isWifiEnabled())) { getView().removeCallbacks(mUpdateAccessPointsRunnable); setProgressBarVisible(true); getView().postDelayed(mUpdateAccessPointsRunnable, 300); } }",6622ae25503024d51fe8d9a7ca4189c33e04c5fe,updateAccessPointsDelayed(),updateAccessPointsDelayed(),4,14,"private void updateAccessPointsDelayed() { if ((((getActivity()) != null) && (!(mIsRestricted))) && (mWifiManager.isWifiEnabled())) { android.os.Handler handler = getView().getHandler(); if ((handler != null) && (handler.hasCallbacks(mUpdateAccessPointsRunnable))) { return; } setProgressBarVisible(true); getView().postDelayed(mUpdateAccessPointsRunnable, 300); } }",6f465976581cb8e265c8bedba99b09be14c09b3e,updateAccessPointsDelayed(),182587,61,87
23171,core_java_android_app_ContextImpl.java,201.0,"@java.lang.Override public java.util.List<android.content.pm.PackageInfo> getInstalledPackages(int flags) { try { return mPM.getInstalledPackages(flags); } catch (android.os.RemoteException e) { throw new java.lang.RuntimeException(""Package manager has died"", e); } }",89dd5c4b36340f90aff31a487c6b38c5ce67db1d,"@java.lang.Override public java.util.List<android.content.pm.PackageInfo> getInstalledPackages(int flags) { try { java.util.List<android.content.pm.PackageInfo> finalList; java.util.List<android.content.pm.PackageInfo> packages = mPM.getInstalledPackages((flags & (GET_UNINSTALLED_PACKAGES))); if ((flags == 0) || (flags == (GET_UNINSTALLED_PACKAGES))) { finalList = packages; } else { finalList = new java.util.LinkedList<android.content.pm.PackageInfo>(); for (android.content.pm.PackageInfo p : packages) { if ((p.applicationInfo) != null) { android.content.pm.PackageInfo pi = mPM.getPackageInfo(p.packageName, flags); if (pi != null) { finalList.add(pi); } } } } return finalList; } catch (android.os.RemoteException e) { throw new java.lang.RuntimeException(""Package manager has died"", e); } }",ba7b73a1da4078221215db45b7edd2d964b59654,getInstalledPackages(int),getInstalledPackages(int),3,15,public java.lang.Object createService(android.app.ContextImpl ctx) { return new android.media.AudioManager(ctx); },465dfafe7e593bbb1a9d1745c33797d32ba28f9e,createService(android.app.ContextImpl),232023,230,28
667841,mojo_public_java_bindings_src_org_chromium_mojo_bindings_Interface.java,5.0,"@java.lang.Override public void call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams response) { if (((response.output) != null) && ((response.output.which()) == (RunOutput.Tag.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } try { callback.call(mVersion); } catch (java.lang.RuntimeException e) { android.util.Log.wtf(""org.chromium.mojo.bindings.Interface"", ""Uncaught runtime exception"", e); } }",d7628005c06b13ae249a5a75d6a78ccaeeb229c1,@java.lang.Override public void call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams response) { if (((response.output) != null) && ((response.output.which()) == (RunOutput.Tag.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } callback.call(mVersion); },ea865b26ba2b9cd6564e566ac4ddddbc8e272041,call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams),call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams),5,5,"@java.lang.Override public void call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams response) { if (((response.output) != null) && ((response.output.which()) == (RunOutput.Tag.QueryVersionResult))) { mVersion = response.output.getQueryVersionResult().version; } try { callback.call(mVersion); } catch (java.lang.RuntimeException e) { android.util.Log.wtf(""org.chromium.mojo.bindings.Interface"", ""Uncaught runtime exception"", e); } }",d7628005c06b13ae249a5a75d6a78ccaeeb229c1,call(org.chromium.mojo.bindings.interfacecontrol.RunResponseMessageParams),25828,81,123
657062,test_src_com_google_android_gfx_benchmark_test_GraphicsBenchmarkTest.java,2.0,"@org.junit.Test public void testSniper3d() throws java.io.IOException, java.lang.InterruptedException { startApp(com.google.android.gfx.benchmark.test.GraphicsBenchmarkTest.App.SNIPER_3D); }",3dc7fe95b9b6bdd9c9466a9c67744aee1827ada3,"@org.junit.Test public void testSNIPER_3D() throws java.io.IOException, java.lang.InterruptedException { startApp(ApkInfo.SNIPER_3D); }",ff4ea640a16e0cb826fbb298cc8b4e0ba14dc0a5,testSniper3d(),testSNIPER_3D(),4,0,"@org.junit.Test public void run() throws java.io.IOException, java.lang.InterruptedException { startApp(apk); }",a29f29488b43e14725966bdc5358a250bd10e5b2,run(),521484,42,30
143727,tools_dexfuzz_src_dexfuzz_executors_Device.java,3.0,"public java.lang.String getName() { if (isLocal) { return ""LOCAL DEVICE""; } return deviceName; }",fbfea33a941987f000ac0763a23c1f03dab1b830,public java.lang.String getName() { assert !(isLocal); return deviceName; },5d0dc350d246aec17fbc2c60a9feb6fdbfce8642,getName(),getName(),5,4,public java.lang.String getName() { assert !(isHost); return deviceName; },e18980304e1e9bf1cc2dc67053a4b44e127b7cf2,getName(),76992,20,20
186130,jack-tests_tests_com_android_jack_java8_GwtTest.java,5.0,"@org.junit.Test public void testSuperReferenceExpressionWithVarArgs() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_18).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",22e9a900008b041b37ed54631c112114aa0e2cac,"@org.junit.Test public void testSuperReferenceExpressionWithVarArgs() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_18).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",4f948761f8b36ec989a25e823136a8c6163873b2,testSuperReferenceExpressionWithVarArgs(),testSuperReferenceExpressionWithVarArgs(),7,5,@org.junit.Test public void testSuperReferenceExpressionWithVarArgs() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_18).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },69913a22a39a0ce979e8e7ed6f2d852ce8171670,testSuperReferenceExpressionWithVarArgs(),466242,89,63
168922,tools_ahat_src_InstanceUtils.java,4.0,"public static java.lang.String asString(com.android.tools.perflib.heap.Instance inst) { if (!(com.android.ahat.InstanceUtils.isInstanceOfClass(inst, ""java.lang.String""))) { return null; } char[] value = com.android.ahat.InstanceUtils.getCharArrayField(inst, ""value""); return value == null ? null : new java.lang.String(value); }",bafb77f8a343cef21725f8566079554b5d1d3bbc,"public static java.lang.String asString(com.android.tools.perflib.heap.Instance inst) { if (!(com.android.ahat.InstanceUtils.isInstanceOfClass(inst, ""java.lang.String""))) { return null; } char[] value = com.android.ahat.InstanceUtils.getCharArrayField(inst, ""value""); if (value == null) { return null; } int offset = 0; int count = value.length; java.lang.Integer offsetField = com.android.ahat.InstanceUtils.getIntField(inst, ""offset""); if (offsetField != null) { offset = offsetField; } java.lang.Integer countField = com.android.ahat.InstanceUtils.getIntField(inst, ""count""); if (countField != null) { count = countField; } return value == null ? null : new java.lang.String(value, offset, count); }",ea9eb5317c62898f2040922024a122dce5ef98f6,asString(com.android.tools.perflib.heap.Instance),asString(com.android.tools.perflib.heap.Instance),2,4,"public static java.lang.String asString(com.android.tools.perflib.heap.Instance inst) { if (!(com.android.ahat.InstanceUtils.isInstanceOfClass(inst, ""java.lang.String""))) { return null; } java.lang.Object value = com.android.ahat.InstanceUtils.getField(inst, ""value""); if (!(value instanceof com.android.tools.perflib.heap.ArrayInstance)) { return null; } com.android.tools.perflib.heap.ArrayInstance chars = ((com.android.tools.perflib.heap.ArrayInstance) (value)); if ((chars.getArrayType()) != (com.android.tools.perflib.heap.Type.CHAR)) { return null; } int numChars = chars.getValues().length; int count = com.android.ahat.InstanceUtils.getIntField(inst, ""count"", numChars); int offset = com.android.ahat.InstanceUtils.getIntField(inst, ""offset"", 0); int end = (offset + count) - 1; if (count == 0) { return """"; } if ((((offset >= 0) && (offset < numChars)) && (end >= 0)) && (end < numChars)) { return new java.lang.String(chars.asCharArray(offset, count)); } return null; }",b64ccbe90c3d5c89d74e02b6b1c326d66a98083e,asString(com.android.tools.perflib.heap.Instance),518259,201,288
162651,ddmlib_src_main_java_com_android_ddmlib_AdbHelper.java,19.0,"static void read(java.nio.channels.SocketChannel chan, byte[] data) throws com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.AdbHelper.read(chan, data, (-1), com.android.ddmlib.DdmPreferences.getTimeOut()); }",1d74a6422a91cc7d8c2d4acb6504a6201512b812,"static void read(java.nio.channels.SocketChannel chan, byte[] data) throws com.android.ddmlib.TimeoutException, java.io.IOException, java.lang.InterruptedException { com.android.ddmlib.AdbHelper.read(chan, data, (-1), com.android.ddmlib.DdmPreferences.getTimeOut()); }",d686b3e41c713b0a26f0e1c002b8182349f6ccf7,"read(java.nio.channels.SocketChannel,byte[])","read(java.nio.channels.SocketChannel,byte[])",4,19,"static void read(java.nio.channels.SocketChannel chan, byte[] data) throws com.android.ddmlib.TimeoutException, java.io.IOException { com.android.ddmlib.AdbHelper.read(chan, data, (-1), com.android.ddmlib.DdmPreferences.getTimeOut()); }",1d74a6422a91cc7d8c2d4acb6504a6201512b812,"read(java.nio.channels.SocketChannel,byte[])",352965,79,72
342756,src_java_com_android_internal_telephony_DeviceStateMonitor.java,,,,private boolean shouldTurnOffFullNetworkUpdate() { return (mIsPowerSaveOn) || (((!(mIsCharging)) && (!(mIsInteractive))) && (!(mIsTetheringOn))); },3e6e68f447a1843e81c79236ce8183526f76acb2,,shouldTurnOffFullNetworkUpdate(),18,11,private boolean shouldTurnOffFullNetworkUpdate() { return (mIsPowerSaveOn) || (((!(mIsCharging)) && (!(mIsScreenStateOn))) && (!(mIsTetheringOn))); },5488902dabe09bbb9ad1029291c384c42e79c0ac,shouldTurnOffFullNetworkUpdate(),507381,44,46
620332,telephony_java_android_telephony_ims_stub_ImsSmsImplBase.java,2.0,"public final void onSmsStatusReportReceived(int token, int messageRef, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException(""Feature not ready.""); } try { mListener.onSmsStatusReportReceived(token, messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not process sms status report: "" + (e.getMessage()))); acknowledgeSmsReport(token, messageRef, android.telephony.ims.stub.ImsSmsImplBase.STATUS_REPORT_STATUS_ERROR); } } }",fb3449dea5cb7631fd67e6bc9470977669ed1133,"public final void onSmsStatusReportReceived(int token, int messageRef, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException(""Feature not ready.""); } try { mListener.onSmsStatusReportReceived(token, messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not process sms status report: "" + (e.getMessage()))); acknowledgeSmsReport(token, messageRef, android.telephony.ims.stub.STATUS_REPORT_STATUS_ERROR); } } }",dcbbc9c6b84fb9b8aa088456b08dc05ba0814243,"onSmsStatusReportReceived(int,int,java.lang.String,byte[])","onSmsStatusReportReceived(int,int,java.lang.String,byte[])",5,2,"public final void onSmsStatusReportReceived(int token, int messageRef, java.lang.String format, byte[] pdu) throws java.lang.RuntimeException { synchronized(mLock) { if ((mListener) == null) { throw new java.lang.RuntimeException(""Feature not ready.""); } try { mListener.onSmsStatusReportReceived(token, messageRef, format, pdu); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.ims.stub.ImsSmsImplBase.LOG_TAG, (""Can not process sms status report: "" + (e.getMessage()))); acknowledgeSmsReport(token, messageRef, android.telephony.ims.stub.ImsSmsImplBase.STATUS_REPORT_STATUS_ERROR); } } }",fb3449dea5cb7631fd67e6bc9470977669ed1133,"onSmsStatusReportReceived(int,int,java.lang.String,byte[])",146896,168,174
18611,services_java_com_android_server_am_ActivityManagerService.java,112.0,"public void serviceDoneExecutingLocked(com.android.server.am.ServiceRecord r, boolean inStopping) { (r.executeNesting)--; if (((r.executeNesting) <= 0) && ((r.app) != null)) { r.app.executingServices.remove(r); if ((r.app.executingServices.size()) == 0) { mHandler.removeMessages(com.android.server.am.ActivityManagerService.SERVICE_TIMEOUT_MSG, r.app); } if (inStopping) { mStoppingServices.remove(r); } updateOomAdjLocked(r.app); } }",7ccc213266e9ed5e04bc34253f4988b789757871,"public void serviceDoneExecutingLocked(com.android.server.am.ServiceRecord r, boolean inStopping) { (r.executeNesting)--; if (((r.executeNesting) <= 0) && ((r.app) != null)) { r.app.executingServices.remove(r); if ((r.app.executingServices.size()) == 0) { mHandler.removeMessages(com.android.server.am.ActivityManagerService.SERVICE_TIMEOUT_MSG, r.app); } if (inStopping) { mStoppingServices.remove(r); if ((r.bindings.size()) > 0) { java.util.Iterator<com.android.server.am.IntentBindRecord> it = r.bindings.values().iterator(); while (it.hasNext()) { com.android.server.am.IntentBindRecord record = it.next(); record.binder = null; record.requested = record.received = record.hasBound = false; } java.lang.System.gc(); } } updateOomAdjLocked(r.app); } }",e5c376e9f9b7c8f40123c9cf6c49b92ab47ae46b,"serviceDoneExecutingLocked(com.android.server.am.ServiceRecord,boolean)","serviceDoneExecutingLocked(com.android.server.am.ServiceRecord,boolean)",3,109,"public void serviceDoneExecutingLocked(com.android.server.am.ServiceRecord r, boolean inStopping) { if (com.android.server.am.ActivityManagerService.DEBUG_SERVICE) android.util.Slog.v(com.android.server.am.ActivityManagerService.TAG, (((((((""<<< DONE EXECUTING "" + r) + "": nesting="") + (r.executeNesting)) + "", inStopping="") + inStopping) + "", app="") + (r.app))); else if (com.android.server.am.ActivityManagerService.DEBUG_SERVICE_EXECUTING) android.util.Slog.v(com.android.server.am.ActivityManagerService.TAG, (""<<< DONE EXECUTING "" + (r.shortName))); (r.executeNesting)--; if (((r.executeNesting) <= 0) && ((r.app) != null)) { if (com.android.server.am.ActivityManagerService.DEBUG_SERVICE) android.util.Slog.v(com.android.server.am.ActivityManagerService.TAG, (""Nesting at 0 of "" + (r.shortName))); r.app.executingServices.remove(r); if ((r.app.executingServices.size()) == 0) { if ((com.android.server.am.ActivityManagerService.DEBUG_SERVICE) || (com.android.server.am.ActivityManagerService.DEBUG_SERVICE_EXECUTING)) android.util.Slog.v(com.android.server.am.ActivityManagerService.TAG, (""No more executingServices of "" + (r.shortName))); mHandler.removeMessages(com.android.server.am.ActivityManagerService.SERVICE_TIMEOUT_MSG, r.app); } if (inStopping) { if (com.android.server.am.ActivityManagerService.DEBUG_SERVICE) android.util.Slog.v(com.android.server.am.ActivityManagerService.TAG, (""doneExecuting remove stopping "" + r)); mStoppingServices.remove(r); r.bindings.clear(); } updateOomAdjLocked(r.app); } }",12eeeb9bd4ab2fc59a1370cbe87c00438b3cbb6a,"serviceDoneExecutingLocked(com.android.server.am.ServiceRecord,boolean)",163180,227,467
121782,jack_src_com_android_jack_tools_merger_JackMerger.java,4.0,"public void finish(@javax.annotation.Nonnull java.io.OutputStream out) throws java.io.IOException { dexResult.prepare(cstManager.getCstIndexMaps()); if (!(cstManager.validate(dexResult))) { throw new java.lang.AssertionError(); } dexResult.writeTo(out, null, false); finished = true; }",9b316da9ca09d1a9b13412f5f243f0ae51289484,"public void finish(@javax.annotation.Nonnull java.io.OutputStream out) throws java.io.IOException { cstManager.addNotRelocatableString(dexResult.getStringIds().intern(com.android.jack.tools.merger.JackMerger.getDexTag()).getValue()); dexResult.prepare(cstManager.getCstIndexMaps()); if (!(cstManager.validate(dexResult))) { throw new java.lang.AssertionError(); } dexResult.writeTo(out, null, false); finished = true; }",e4dcb4628d6f9b82cd758ed7ed6589b3c3cd00f4,finish(java.io.OutputStream),finish(java.io.OutputStream),6,3,"public void finish(@javax.annotation.Nonnull java.io.OutputStream out) throws java.io.IOException { dexResult.prepare(cstManager.getCstIndexMaps()); if (!(cstManager.validate(dexResult))) { throw new java.lang.AssertionError(); } dexResult.writeTo(out, null, false); finished = true; }",9b316da9ca09d1a9b13412f5f243f0ae51289484,finish(java.io.OutputStream),183399,117,77
102101,luni_src_main_java_java_util_Locale.java,16.0,"public java.lang.String getDisplayLanguage(java.util.Locale locale) { if (languageCode.isEmpty()) { return """"; } try { java.util.Locale.Builder.normalizeAndValidateLanguage(languageCode); } catch (java.util.IllformedLocaleException ex) { return languageCode; } java.lang.String result = libcore.icu.ICU.getDisplayLanguage(this, locale); if (result == null) { result = libcore.icu.ICU.getDisplayLanguage(this, java.util.Locale.getDefault()); } return result; }",735bf4542003547087264a330890eb70553c251c,"public java.lang.String getDisplayLanguage(java.util.Locale locale) { if (languageCode.isEmpty()) { return """"; } final java.lang.String normalizedLanguage = java.util.Locale.Builder.normalizeAndValidateLanguage(languageCode, false); if (""und"".equals(normalizedLanguage)) { return languageCode; } java.lang.String result = libcore.icu.ICU.getDisplayLanguage(this, locale); if (result == null) { result = libcore.icu.ICU.getDisplayLanguage(this, java.util.Locale.getDefault()); } return result; }",da44a3b60c8a848edea332463cf92ebdd555c606,getDisplayLanguage(java.util.Locale),getDisplayLanguage(java.util.Locale),4,15,"public java.lang.String getDisplayLanguage(java.util.Locale locale) { if (languageCode.isEmpty()) { return """"; } final java.lang.String normalizedLanguage = java.util.Locale.Builder.normalizeAndValidateLanguage(languageCode, false); if (java.util.Locale.UNDETERMINED_LANGUAGE.equals(normalizedLanguage)) { return languageCode; } java.lang.String result = libcore.icu.ICU.getDisplayLanguage(this, locale); if (result == null) { result = libcore.icu.ICU.getDisplayLanguage(this, java.util.Locale.getDefault()); } return result; }",6435b9bd66f308105f51331b64a11426a5da0703,getDisplayLanguage(java.util.Locale),85044,130,140
253791,luni_src_main_java_libcore_io_Posix.java,69.0,"public native int getsockoptByte(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException;",81c8c2e8f3fc0c1a7fe67696e91ffd6134276c3c,"public native int getsockoptByte(java.io.FileDescriptor fd, int level, int option) throws libcore.io.ErrnoException;",d3fac8a5e9dd06859ba8fd934fb1c017befa3e4e,"getsockoptByte(java.io.FileDescriptor,int,int)","getsockoptByte(java.io.FileDescriptor,int,int)",8,66,"public native int getsockoptByte(java.io.FileDescriptor fd, int level, int option) throws android.system.ErrnoException;",81c8c2e8f3fc0c1a7fe67696e91ffd6134276c3c,"getsockoptByte(java.io.FileDescriptor,int,int)",494491,31,30
237621,jack-tests_tests_com_android_jack_java8_DefaultMethodTest.java,13.0,@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testDefaultMethod006() throws java.lang.Exception { run(DEFAULTMETHOD006); },953d63ed268d7af5ced352f7890a71aa5c1e2b17,@org.junit.Test @java.lang.Runtime @com.android.jack.test.junit.KnownIssue public void testDefaultMethod006() throws java.lang.Exception { run(DEFAULTMETHOD006); },7451a81fc1bf0f707a7642e2b1f4e2b8d0e0b8a5,testDefaultMethod006(),testDefaultMethod006(),11,13,@org.junit.Test @java.lang.Runtime(from = RuntimeVersion.N) @com.android.jack.test.junit.KnownIssue public void testDefaultMethod006() throws java.lang.Exception { run(DEFAULTMETHOD006); },52368824ee2ccf36c7564052578c8026698f5fc1,testDefaultMethod006(),273912,46,54
376533,src_java_com_android_internal_telephony_InboundSmsHandler.java,25.0,"@java.lang.Override public boolean processMessage(android.os.Message msg) { log((""IdleState.processMessage:"" + (msg.what))); if (com.android.internal.telephony.InboundSmsHandler.DBG) log((""Idle state processing message type "" + (msg.what))); switch (msg.what) { case com.android.internal.telephony.InboundSmsHandler.EVENT_NEW_SMS : case com.android.internal.telephony.InboundSmsHandler.EVENT_INJECT_SMS : case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_SMS : deferMessage(msg); transitionTo(mDeliveringState); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_RELEASE_WAKELOCK : mWakeLock.release(); if (com.android.internal.telephony.InboundSmsHandler.DBG) { if (mWakeLock.isHeld()) { log(""mWakeLock is still held after release""); } else { log(""mWakeLock released""); } } return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE : return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_COMPLETE : case com.android.internal.telephony.InboundSmsHandler.EVENT_START_ACCEPTING_SMS : default : return NOT_HANDLED; } }",7dcc7ff21e86240999e88bf6d88f54b1bde233a4,"@java.lang.Override public boolean processMessage(android.os.Message msg) { log((""IdleState.processMessage:"" + (msg.what))); if (com.android.internal.telephony.InboundSmsHandler.DBG) log((""Idle state processing message type "" + (msg.what))); switch (msg.what) { case com.android.internal.telephony.InboundSmsHandler.EVENT_NEW_SMS : case com.android.internal.telephony.InboundSmsHandler.EVENT_INJECT_SMS : case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_SMS : deferMessage(msg); transitionTo(mDeliveringState); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE : return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_COMPLETE : case com.android.internal.telephony.InboundSmsHandler.EVENT_START_ACCEPTING_SMS : default : return NOT_HANDLED; } }",165fbe80bdc3b4fb2b28a530de80fc726e860fc4,processMessage(android.os.Message),processMessage(android.os.Message),3,25,"@java.lang.Override public boolean processMessage(android.os.Message msg) { log((""IdleState.processMessage:"" + (msg.what))); if (com.android.internal.telephony.InboundSmsHandler.DBG) log((""Idle state processing message type "" + (msg.what))); switch (msg.what) { case com.android.internal.telephony.InboundSmsHandler.EVENT_NEW_SMS : case com.android.internal.telephony.InboundSmsHandler.EVENT_INJECT_SMS : case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_SMS : deferMessage(msg); transitionTo(mDeliveringState); return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_RELEASE_WAKELOCK : mWakeLock.release(); if (com.android.internal.telephony.InboundSmsHandler.DBG) { if (mWakeLock.isHeld()) { log(""mWakeLock is still held after release""); } else { log(""mWakeLock released""); } } return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_RETURN_TO_IDLE : return HANDLED; case com.android.internal.telephony.InboundSmsHandler.EVENT_BROADCAST_COMPLETE : case com.android.internal.telephony.InboundSmsHandler.EVENT_START_ACCEPTING_SMS : default : return NOT_HANDLED; } }",7dcc7ff21e86240999e88bf6d88f54b1bde233a4,processMessage(android.os.Message),68450,233,314
188703,sched_src_com_android_sched_util_file_Files.java,1.0,"@javax.annotation.Nonnull public static java.io.File createTempFile(@javax.annotation.Nonnull java.lang.String prefix) throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotSetPermissionException, com.android.sched.util.file.WrongPermissionException { return com.android.sched.util.file.Files.createTempFile(prefix, """"); }",6ee4497324d14d6f08386976265df4fa7ddfba0a,"@javax.annotation.Nonnull public static java.io.File createTempFile(@javax.annotation.Nonnull java.lang.String prefix) throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotSetPermissionException, com.android.sched.util.file.CannotUnsetPermissionException { return com.android.sched.util.file.Files.createTempFile(prefix, """"); }",ad8b86cb5052683866fac9458559c4d5196945a1,createTempFile(java.lang.String),createTempFile(java.lang.String),3,1,"@javax.annotation.Nonnull public static java.io.File createTempFile(@javax.annotation.Nonnull java.lang.String prefix) throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotSetPermissionException { return com.android.sched.util.file.Files.createTempFile(prefix, """"); }",e08f2368c4f01891e50f714733e7c3c58d7c7f04,createTempFile(java.lang.String),89522,94,78
295946,sched_src_com_android_sched_util_VFSClassLoader.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void connect() throws java.io.IOException { try { is = vFile.getInputStream(); } catch (com.android.sched.util.file.WrongPermissionException e) { throw new java.io.IOException(e); } },cf2c370067a612298e7243cfa3a9a8e96d4f375d,,connect(),6,4,@java.lang.Override public synchronized void connect() throws java.io.IOException { if (!(connected)) { assert (is) == null; try { is = vFile.getInputStream(); } catch (com.android.sched.util.file.WrongPermissionException e) { throw new java.io.IOException(e); } connected = true; } },4e387a76fe3a08fefd1d2b5c335cdb29b2e6f68f,connect(),371856,57,75
196114,tests_tests_security_src_android_security_cts_EncryptionTest.java,5.0,"public void testConfig() throws java.lang.Exception { if (android.security.cts.EncryptionTest.cpuHasAes()) { assertTrue(((android.security.cts.EncryptionTest.crypto) + "" is missing xts-aes-ce""), hasKernelCrypto(""xts-aes-ce"")); } else if (android.security.cts.EncryptionTest.cpuHasNeon()) { assertTrue(((android.security.cts.EncryptionTest.crypto) + "" is missing xts-aes-neon (or xts-aes-neonbs)""), (((hasKernelCrypto(""xts-aes-neon"")) || (hasKernelCrypto(""xts-aes-neonbs""))) || (hasKernelCrypto(""aes-asm"")))); } if (android.security.cts.EncryptionTest.cpuHasNeon()) { assertTrue(""libcrypto must have NEON"", android.security.cts.EncryptionTest.neonIsEnabled()); } }",ae6d33d63e1983fe17632e7137a117349e9e0820,"public void testConfig() throws java.lang.Exception { if (android.security.cts.EncryptionTest.cpuHasAes()) { assertTrue(((android.security.cts.EncryptionTest.crypto) + "" is missing xts-aes-ce (or xts-aes-aesni)""), ((hasKernelCrypto(""xts-aes-ce"")) || (hasKernelCrypto(""xts-aes-aesni"")))); } else if (android.security.cts.EncryptionTest.cpuHasNeon()) { assertTrue(((android.security.cts.EncryptionTest.crypto) + "" is missing xts-aes-neon (or xts-aes-neonbs)""), (((hasKernelCrypto(""xts-aes-neon"")) || (hasKernelCrypto(""xts-aes-neonbs""))) || (hasKernelCrypto(""aes-asm"")))); } if (android.security.cts.EncryptionTest.cpuHasNeon()) { assertTrue(""libcrypto must have NEON"", android.security.cts.EncryptionTest.neonIsEnabled()); } }",81e970261fb40a2018f74bd9d959b91faefe7673,testConfig(),testConfig(),2,5,"public void testConfig() throws java.lang.Exception { if (android.security.cts.EncryptionTest.cpuHasAes()) { assertTrue(((android.security.cts.EncryptionTest.crypto) + "" is missing xts-aes-ce or xts-aes-aesni""), ((hasKernelCrypto(""xts-aes-ce"")) || (hasKernelCrypto(""xts-aes-aesni"")))); } else if (android.security.cts.EncryptionTest.cpuHasNeon()) { assertTrue(((android.security.cts.EncryptionTest.crypto) + "" is missing xts-aes-neon (or xts-aes-neonbs)""), (((hasKernelCrypto(""xts-aes-neon"")) || (hasKernelCrypto(""xts-aes-neonbs""))) || (hasKernelCrypto(""aes-asm"")))); } if (android.security.cts.EncryptionTest.cpuHasNeon()) { assertTrue(""libcrypto must have NEON"", android.security.cts.EncryptionTest.neonIsEnabled()); } }",38608bda56f643df873202d5ce6943105805f154,testConfig(),82725,256,254
180122,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_ClassType_NewInstanceStringTest.java,,,,"@java.lang.Override public void provideConstructorArguments(java.util.List<org.apache.harmony.jpda.tests.framework.jdwp.Value> constructorArguments) { long debuggeeClassId = getClassIDBySignature(getDebuggeeClassSignature()); long byteArrayFieldId = checkField(debuggeeClassId, ""BYTE_ARRAY""); long stringCharsetFieldId = checkField(debuggeeClassId, ""STRING_CHARSET""); org.apache.harmony.jpda.tests.framework.jdwp.Value byteArrayValue = debuggeeWrapper.vmMirror.getReferenceTypeValue(debuggeeClassId, byteArrayFieldId); org.apache.harmony.jpda.tests.framework.jdwp.Value stringCharsetValue = debuggeeWrapper.vmMirror.getReferenceTypeValue(debuggeeClassId, stringCharsetFieldId); constructorArguments.add(byteArrayValue); constructorArguments.add(stringCharsetValue); }",d54981873413b2ecad3bca2e5989d09193617969,,provideConstructorArguments(java.util.List),2,22,"@java.lang.Override public void provideConstructorArguments(java.util.List<org.apache.harmony.jpda.tests.framework.jdwp.Value> constructorArguments) { long debuggeeClassId = getClassIDBySignature(getDebuggeeClassSignature()); org.apache.harmony.jpda.tests.framework.jdwp.Value byteArrayValue = getStaticFieldValue(debuggeeClassId, ""BYTE_ARRAY""); org.apache.harmony.jpda.tests.framework.jdwp.Value stringCharsetValue = getStaticFieldValue(debuggeeClassId, ""STRING_CHARSET""); constructorArguments.add(byteArrayValue); constructorArguments.add(stringCharsetValue); }",0e7eec022215463c7833daf518caedc791fef06e,provideConstructorArguments(java.util.List),31346,206,152
315027,common_src_main_java_org_conscrypt_AbstractSessionContext.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void checkRemaining(java.io.DataInputStream in, int length) throws java.io.IOException { if (length < 0) { throw new java.io.IOException((""Length is negative: "" + length)); } if (length > (in.available())) { throw new java.io.IOException((((""Length of blob is longer than available: "" + length) + "" > "") + (in.available()))); } }",14b2d1597d0062759effc117158b88d2c435ee3f,,"checkRemaining(java.io.DataInputStream,int)",3,8,"private static void checkRemaining(java.nio.ByteBuffer buf, int length) throws java.io.IOException { if (length < 0) { throw new java.io.IOException((""Length is negative: "" + length)); } if (length > (buf.remaining())) { throw new java.io.IOException((((""Length of blob is longer than available: "" + length) + "" > "") + (buf.remaining()))); } }",5f1e001424c5001a9c8ab73d7aea2211de56dd23,"checkRemaining(java.nio.ByteBuffer,int)",449880,93,93
328878,jill_src_com_android_jill_frontend_java_MethodBodyWriter.java,63.0,"private void readStack(@javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame<org.objectweb.asm.tree.analysis.BasicValue> frame, int stackIdx) throws java.io.IOException, java.lang.IndexOutOfBoundsException { writeLocalRef(getStackVariable(frame, stackIdx)); }",2b8534324bb571f6fdd150b17366c3f5442bca4d,"private void readStack(@javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame<org.objectweb.asm.tree.analysis.BasicValue> frame, int stackIdx) throws java.io.IOException, java.lang.IndexOutOfBoundsException { com.android.jill.frontend.java.Variable stackVariable = getStackVariable(frame, stackIdx); java.lang.Object value = varWithCstValue.remove(stackVariable); if (value != null) { writeValue(value, currentClass, currentLine); } else { writeLocalRef(stackVariable); } }",cbd027c791a1358b2a77a3589ab6ee35a4e0ddb7,"readStack(org.objectweb.asm.tree.analysis.Frame,int)","readStack(org.objectweb.asm.tree.analysis.Frame,int)",4,65,"private void readStack(@javax.annotation.Nonnull org.objectweb.asm.tree.analysis.Frame<org.objectweb.asm.tree.analysis.BasicValue> frame, int stackIdx) throws java.io.IOException, java.lang.IndexOutOfBoundsException { com.android.jill.frontend.java.Variable stackVariable = getStackVariable(frame, stackIdx); if (varWithCstValue.containsKey(stackVariable)) { writeValue(varWithCstValue.remove(stackVariable), currentClass, currentLine); } else { writeLocalRef(stackVariable); } }",5c53ba7e4ee30bead96a20402c45cf0b35693901,"readStack(org.objectweb.asm.tree.analysis.Frame,int)",429570,130,128
81416,tests_tests_renderscript_src_android_renderscript_cts_TestPow.java,,,,"private void checkPowFloat2Float2() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testPowFloat2Float2(inX, out); verifyResultsPowFloat2Float2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testPowFloat2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testPowFloat2Float2(inX, out); verifyResultsPowFloat2Float2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testPowFloat2Float2: "" + (e.toString()))); } }",0bd505579cd265ec54c2430142f2e4820cb0cafc,,checkPowFloat2Float2(),9,1,"private void checkPowFloat2Float2Float2() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -4838634094653704778L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -4838634094653704778L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testPowFloat2Float2Float2(inX, out); verifyResultsPowFloat2Float2Float2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testPowFloat2Float2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testPowFloat2Float2Float2(inX, out); verifyResultsPowFloat2Float2Float2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testPowFloat2Float2Float2: "" + (e.toString()))); } }",675d386980d5ca443880048d6303b2a9390f3b66,checkPowFloat2Float2Float2(),143067,436,388
616958,core_java_com_android_internal_os_ZygoteServer.java,5.0,"void registerServerSocket(java.lang.String socketName) { if ((mServerSocket) == null) { int fileDesc; final java.lang.String fullSocketName = (com.android.internal.os.ZygoteServer.ANDROID_SOCKET_PREFIX) + socketName; try { java.lang.String env = java.lang.System.getenv(fullSocketName); fileDesc = java.lang.Integer.parseInt(env); } catch (java.lang.RuntimeException ex) { throw new java.lang.RuntimeException((fullSocketName + "" unset or invalid""), ex); } try { java.io.FileDescriptor fd = new java.io.FileDescriptor(); fd.setInt$(fileDesc); mServerSocket = new android.net.LocalServerSocket(fd); } catch (java.io.IOException ex) { throw new java.lang.RuntimeException(((""Error binding to local socket '"" + fileDesc) + ""'""), ex); } } }",7275abf1084174a4f6e448a8c51f0196c4f79c93,"void registerServerSocket(java.lang.String socketName) { if ((mServerSocket) == null) { int fileDesc; final java.lang.String fullSocketName = (com.android.internal.os.ZygoteServer.ANDROID_SOCKET_PREFIX) + socketName; try { java.lang.String env = java.lang.System.getenv(fullSocketName); fileDesc = java.lang.Integer.parseInt(env); } catch (java.lang.RuntimeException ex) { throw new java.lang.RuntimeException((fullSocketName + "" unset or invalid""), ex); } try { java.io.FileDescriptor fd = new java.io.FileDescriptor(); fd.setInt$(fileDesc); mServerSocket = new android.net.LocalServerSocket(fd); mCloseSocketFd = true; } catch (java.io.IOException ex) { throw new java.lang.RuntimeException(((""Error binding to local socket '"" + fileDesc) + ""'""), ex); } } }",46ed2db8f933b3576475028b15e59a9ccd24aa5f,registerServerSocket(java.lang.String),registerServerSocket(java.lang.String),5,7,"void registerServerSocketFromEnv(java.lang.String socketName) { if ((mServerSocket) == null) { int fileDesc; final java.lang.String fullSocketName = (com.android.internal.os.ZygoteServer.ANDROID_SOCKET_PREFIX) + socketName; try { java.lang.String env = java.lang.System.getenv(fullSocketName); fileDesc = java.lang.Integer.parseInt(env); } catch (java.lang.RuntimeException ex) { throw new java.lang.RuntimeException((fullSocketName + "" unset or invalid""), ex); } try { java.io.FileDescriptor fd = new java.io.FileDescriptor(); fd.setInt$(fileDesc); mServerSocket = new android.net.LocalServerSocket(fd); mCloseSocketFd = true; } catch (java.io.IOException ex) { throw new java.lang.RuntimeException(((""Error binding to local socket '"" + fileDesc) + ""'""), ex); } } }",c21ed2335f112659957c38beffbaa1b83d2db214,registerServerSocketFromEnv(java.lang.String),472811,213,215
149516,jack-tests_tests_com_android_jack_annotation_processor_AnnotationProcessorTests.java,7.0,@org.junit.BeforeClass public static void setupClass() throws com.android.sched.util.config.ConfigurationException { com.android.sched.util.config.ThreadConfig.setConfig(new com.android.sched.util.config.GatherConfigBuilder().build()); com.android.jack.annotation.processor.AnnotationProcessorTests.noConfigProcessors = null; com.android.jack.annotation.processor.AnnotationProcessorTests.autoProcessors = null; },cea72d799e84da791383bac90045767993e76f37,@org.junit.BeforeClass public static void setupClass() throws com.android.sched.util.config.ConfigurationException { com.android.jack.annotation.processor.AnnotationProcessorTests.noConfigProcessors = null; com.android.jack.annotation.processor.AnnotationProcessorTests.autoProcessors = null; },8effe55a03adf2ee868cbcce0d04d6e62919cd1f,setupClass(),setupClass(),7,10,@org.junit.BeforeClass public static void setupClass() { com.android.jack.annotation.processor.AnnotationProcessorTests.noConfigProcessors = null; com.android.jack.annotation.processor.AnnotationProcessorTests.autoProcessors = null; },044dc591ea3565daf2ffa6717dad803461eb52a9,setupClass(),36831,66,53
50372,luni_src_test_java_org_apache_harmony_xnet_provider_jsse_NativeCryptoTest.java,35.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void test_OpenSSLKey_toJava() throws java.lang.Exception { org.apache.harmony.xnet.provider.jsse.OpenSSLKey key1; java.math.BigInteger e = java.math.BigInteger.valueOf(65537); key1 = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.RSA_generate_key_ex(1048, e.toByteArray())); assertTrue(((key1.getPublicKey()) instanceof java.security.interfaces.RSAPublicKey)); key1 = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.DSA_generate_key(1024, null, null, null, null)); assertTrue(((key1.getPublicKey()) instanceof java.security.interfaces.DSAPublicKey)); int group1 = org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL; try { group1 = org.apache.harmony.xnet.provider.jsse.NativeCrypto.EC_GROUP_new_by_curve_name(""prime256v1""); key1 = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.EC_KEY_generate_key(group1)); } finally { if (group1 != (org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL)) { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EC_GROUP_clear_free(group1); } } assertTrue(((key1.getPublicKey()) instanceof java.security.interfaces.ECPublicKey)); }",480aa5d3eae44f677e6d1551d507ea9267e7e3b6,,test_OpenSSLKey_toJava(),5,36,"public void test_OpenSSLKey_toJava() throws java.lang.Exception { org.apache.harmony.xnet.provider.jsse.OpenSSLKey key1; java.math.BigInteger e = java.math.BigInteger.valueOf(65537); key1 = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.RSA_generate_key_ex(1024, e.toByteArray())); assertTrue(((key1.getPublicKey()) instanceof java.security.interfaces.RSAPublicKey)); key1 = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.DSA_generate_key(1024, null, null, null, null)); assertTrue(((key1.getPublicKey()) instanceof java.security.interfaces.DSAPublicKey)); int group1 = org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL; try { group1 = org.apache.harmony.xnet.provider.jsse.NativeCrypto.EC_GROUP_new_by_curve_name(""prime256v1""); assertTrue((group1 != (org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL))); key1 = new org.apache.harmony.xnet.provider.jsse.OpenSSLKey(org.apache.harmony.xnet.provider.jsse.NativeCrypto.EC_KEY_generate_key(group1)); } finally { if (group1 != (org.apache.harmony.xnet.provider.jsse.NativeCryptoTest.NULL)) { org.apache.harmony.xnet.provider.jsse.NativeCrypto.EC_GROUP_clear_free(group1); } } assertTrue(((key1.getPublicKey()) instanceof java.security.interfaces.ECPublicKey)); }",5184f5d3e581c8fe554b325d7db9871a99d1d385,test_OpenSSLKey_toJava(),391368,391,418
117319,sched_src_com_android_sched_util_config_cli_TokenIterator.java,7.0,"@javax.annotation.Nonnull private com.android.sched.util.config.cli.TokenIterator.Entry getNext() throws com.android.sched.util.file.CannotReadException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotFileOrDirectoryException, com.android.sched.util.file.WrongPermissionException, java.util.NoSuchElementException { while (true) { java.io.StreamTokenizer tokenizer = tokenizers.peek(); while (tokenizer != null) { try { if ((tokenizer.nextToken()) != (java.io.StreamTokenizer.TT_EOF)) { if ((allowFileRefInFile) && ((tokenizer.sval.charAt(0)) == (filePrefix))) { pushFileTokenizer(tokenizer.sval.substring(1)); tokenizer = tokenizers.peek(); continue; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(tokenizer.sval, new com.android.sched.util.location.LineLocation(locations.peek(), tokenizer.lineno())); } } } catch (java.io.IOException e) { tokenizers.clear(); tokenizers.push(null); index = args.length; throw new com.android.sched.util.file.CannotReadException(locations.peek()); } tokenizers.pop(); tokenizer = tokenizers.peek(); locations.pop(); } if ((index) >= (args.length)) { throw new java.util.NoSuchElementException(); } if ((allowFileRefInArray) && ((args[index].charAt(0)) == (filePrefix))) { pushFileTokenizer(args[index].substring(1)); (index)++; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(args[((index)++)], locations.peek()); } } }",cab1be138c9b00380fdf434cbda6cafd4a3f807a,"@javax.annotation.Nonnull private com.android.sched.util.config.cli.TokenIterator.Entry getNext() throws com.android.sched.util.file.CannotReadException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotFileOrDirectoryException, com.android.sched.util.file.WrongPermissionException, java.util.NoSuchElementException { while (true) { java.io.StreamTokenizer tokenizer = tokenizers.peek(); while (tokenizer != null) { try { if ((tokenizer.nextToken()) != (java.io.StreamTokenizer.TT_EOF)) { if ((allowFileRefInFile) && ((tokenizer.sval.charAt(0)) == (filePrefix))) { pushFileTokenizer(tokenizer.sval.substring(1)); tokenizer = tokenizers.peek(); continue; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(tokenizer.sval, new com.android.sched.util.location.LineLocation(locations.peek(), tokenizer.lineno())); } } } catch (java.io.IOException e) { tokenizers.clear(); tokenizers.push(null); index = args.length; throw new com.android.sched.util.file.CannotReadException(locations.peek()); } tokenizers.pop(); tokenizer = tokenizers.peek(); locations.pop(); } if ((index) >= (args.length)) { throw new java.util.NoSuchElementException(); } if (((allowFileRefInArray) && (!(args[index].isEmpty()))) && ((args[index].charAt(0)) == (filePrefix))) { pushFileTokenizer(args[index].substring(1)); (index)++; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(args[((index)++)], locations.peek()); } } }",ce3a12d49e4faf8d4ff53111923adbf99f9ad7d9,getNext(),getNext(),3,7,"@javax.annotation.Nonnull private com.android.sched.util.config.cli.TokenIterator.Entry getNext() throws com.android.sched.util.file.CannotReadException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotFileOrDirectoryException, com.android.sched.util.file.WrongPermissionException, java.util.NoSuchElementException { while (true) { java.io.StreamTokenizer tokenizer = tokenizers.peek(); while (tokenizer != null) { try { if ((tokenizer.nextToken()) != (java.io.StreamTokenizer.TT_EOF)) { if (((allowFileRefInFile) && (!(tokenizer.sval.isEmpty()))) && ((tokenizer.sval.charAt(0)) == (filePrefix))) { pushFileTokenizer(tokenizer.sval.substring(1)); tokenizer = tokenizers.peek(); continue; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(tokenizer.sval, new com.android.sched.util.location.LineLocation(locations.peek(), tokenizer.lineno())); } } } catch (java.io.IOException e) { tokenizers.clear(); tokenizers.push(null); index = args.length; throw new com.android.sched.util.file.CannotReadException(locations.peek()); } tokenizers.pop(); tokenizer = tokenizers.peek(); locations.pop(); } if ((index) >= (args.length)) { throw new java.util.NoSuchElementException(); } if (((allowFileRefInArray) && (!(args[index].isEmpty()))) && ((args[index].charAt(0)) == (filePrefix))) { pushFileTokenizer(args[index].substring(1)); (index)++; } else { return new com.android.sched.util.config.cli.TokenIterator.Entry(args[((index)++)], locations.peek()); } } }",56253d92551578cbb23dac06de9533fcde7d34a3,getNext(),412893,407,415
162651,ddmlib_src_main_java_com_android_ddmlib_SyncService.java,34.0,"public void push(java.lang.String[] local, com.android.ddmlib.FileListingService.FileEntry remote, com.android.ddmlib.SyncService.ISyncProgressMonitor monitor) throws com.android.ddmlib.SyncException, com.android.ddmlib.TimeoutException, java.io.IOException { if (!(remote.isDirectory())) { throw new com.android.ddmlib.SyncException(com.android.ddmlib.SyncException.SyncError.REMOTE_IS_FILE); } java.util.ArrayList<java.io.File> files = new java.util.ArrayList<java.io.File>(); for (java.lang.String path : local) { files.add(new java.io.File(path)); } java.io.File[] fileArray = files.toArray(new java.io.File[files.size()]); int total = getTotalLocalFileSize(fileArray); monitor.start(total); doPush(fileArray, remote.getFullPath(), monitor); monitor.stop(); }",276f06e49f04738b4aead46efc209424c1ecba62,"public void push(java.lang.String[] local, com.android.ddmlib.FileListingService.FileEntry remote, com.android.ddmlib.SyncService.ISyncProgressMonitor monitor) throws com.android.ddmlib.SyncException, com.android.ddmlib.TimeoutException, java.io.IOException, java.lang.InterruptedException { if (!(remote.isDirectory())) { throw new com.android.ddmlib.SyncException(com.android.ddmlib.SyncException.SyncError.REMOTE_IS_FILE); } java.util.ArrayList<java.io.File> files = new java.util.ArrayList<java.io.File>(); for (java.lang.String path : local) { files.add(new java.io.File(path)); } java.io.File[] fileArray = files.toArray(new java.io.File[files.size()]); int total = getTotalLocalFileSize(fileArray); monitor.start(total); doPush(fileArray, remote.getFullPath(), monitor); monitor.stop(); }",d6659e57fde9016c5b8fd79dfc56f08511a21fd1,"push(java.lang.String[],com.android.ddmlib.FileListingService.FileEntry,com.android.ddmlib.SyncService$ISyncProgressMonitor)","push(java.lang.String[],com.android.ddmlib.FileListingService.FileEntry,com.android.ddmlib.SyncService$ISyncProgressMonitor)",4,34,"public void push(java.lang.String[] local, com.android.ddmlib.FileListingService.FileEntry remote, com.android.ddmlib.SyncService.ISyncProgressMonitor monitor) throws com.android.ddmlib.SyncException, com.android.ddmlib.TimeoutException, java.io.IOException { if (!(remote.isDirectory())) { throw new com.android.ddmlib.SyncException(com.android.ddmlib.SyncException.SyncError.REMOTE_IS_FILE); } java.util.ArrayList<java.io.File> files = new java.util.ArrayList<java.io.File>(); for (java.lang.String path : local) { files.add(new java.io.File(path)); } java.io.File[] fileArray = files.toArray(new java.io.File[files.size()]); int total = getTotalLocalFileSize(fileArray); monitor.start(total); doPush(fileArray, remote.getFullPath(), monitor); monitor.stop(); }",276f06e49f04738b4aead46efc209424c1ecba62,"push(java.lang.String[],com.android.ddmlib.FileListingService.FileEntry,com.android.ddmlib.SyncService$ISyncProgressMonitor)",352863,233,226
203913,jack-jacoco-reporter_src_com_android_jack_tools_jacoco_JackCoverageAnalyzer.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void readMetadata(@javax.annotation.Nonnull com.google.gson.stream.JsonReader jsonReader) throws java.io.IOException { jsonReader.beginObject(); java.lang.String attributeName = jsonReader.nextName(); if (!(attributeName.equals(com.android.jack.tools.jacoco.JackCoverageAnalyzer.JSON_VERSION_ATTRIBUTE))) { throw new com.google.gson.JsonParseException(((""Expected '"" + (com.android.jack.tools.jacoco.JackCoverageAnalyzer.JSON_VERSION_ATTRIBUTE)) + ""' as first attribute"")); } java.lang.String version = jsonReader.nextString(); checkVersion(version); attributeName = jsonReader.nextName(); if (!(attributeName.equals(com.android.jack.tools.jacoco.JackCoverageAnalyzer.JSON_DATA_ATTRIBUTE))) { throw new com.google.gson.JsonParseException(((""Expected '"" + (com.android.jack.tools.jacoco.JackCoverageAnalyzer.JSON_DATA_ATTRIBUTE)) + ""' as second attribute"")); } readClasses(jsonReader); jsonReader.endObject(); }",77defe9b14a37d8b5f58b03330f34196e9d69c35,,readMetadata(com.google.gson.stream.JsonReader),2,8,private void readMetadata(@javax.annotation.Nonnull com.google.gson.stream.JsonReader jsonReader) throws java.io.IOException { jsonReader.beginObject(); java.lang.String version = null; while (jsonReader.hasNext()) { java.lang.String attributeName = jsonReader.nextName(); if (attributeName.equals(com.android.jack.tools.jacoco.JackCoverageAnalyzer.JSON_VERSION_ATTRIBUTE)) { version = jsonReader.nextString(); } else if (attributeName.equals(com.android.jack.tools.jacoco.JackCoverageAnalyzer.JSON_DATA_ATTRIBUTE)) { checkVersion(version); readClasses(jsonReader); } else { jsonReader.skipValue(); } } jsonReader.endObject(); },925f62a621a813a0ea8aeb84407e537e13fa1faa,readMetadata(com.google.gson.stream.JsonReader),488004,231,158
203176,src_com_android_bluetooth_btservice_AdapterService.java,185.0,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) > 0) { debugLog((""dumpsys arguments, skipping normal dumpsys: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].startsWith(""--proto"")) { dumpNative(fd, args); } return; } writer.println(""Bluetooth Status""); writer.println(("" enabled: "" + (isEnabled()))); writer.println(("" state: "" + (getState()))); writer.println(("" address: "" + (getAddress()))); writer.println((("" name: "" + (getName())) + ""\n"")); writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",d80e0c43d26e0ea738b960d05b12f7abc9eb0cdb,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) > 0) { debugLog((""dumpsys arguments, skipping normal dumpsys: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].startsWith(""--proto"")) { if (args[0].equals(""--proto-java-bin"")) { dumpJava(fd, writer, args); } else { dumpNative(fd, args); } } return; } writer.println(""Bluetooth Status""); writer.println(("" enabled: "" + (isEnabled()))); writer.println(("" state: "" + (getState()))); writer.println(("" address: "" + (getAddress()))); writer.println((("" name: "" + (getName())) + ""\n"")); writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",a450fc154a5f825e86491310f6899b8fa4edb3f2,"dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])","dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])",7,185,"@java.lang.Override protected void dump(java.io.FileDescriptor fd, java.io.PrintWriter writer, java.lang.String[] args) { enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, com.android.bluetooth.btservice.AdapterService.TAG); if ((args.length) > 0) { debugLog((""dumpsys arguments, skipping normal dumpsys: "" + (android.text.TextUtils.join("" "", args)))); if (args[0].startsWith(""--proto"")) { if (args[0].equals(""--proto-java-bin"")) { dumpJava(fd); } else { dumpNative(fd, args); } } return; } writer.println(""Bluetooth Status""); writer.println(("" enabled: "" + (isEnabled()))); writer.println(("" state: "" + (getState()))); writer.println(("" address: "" + (getAddress()))); writer.println((("" name: "" + (getName())) + ""\n"")); writer.println(""Bonded devices:""); for (android.bluetooth.BluetoothDevice device : getBondedDevices()) { writer.println(((((("" "" + (device.getAddress())) + "" ["") + (com.android.bluetooth.btservice.AdapterService.DEVICE_TYPE_NAMES[device.getType()])) + ""] "") + (device.getName()))); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); synchronized(mProfiles) { for (com.android.bluetooth.btservice.ProfileService profile : mProfiles) { profile.dump(sb); } } writer.write(sb.toString()); writer.flush(); dumpNative(fd, args); }",9ae9afdc5328a56d30781668cc2eabc89133bc6b,"dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])",175281,354,350
233353,test_vogar_target_junit3_TestRunnerJUnit3Test.java,,,,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.LazyTestCreationTest.class) @org.junit.Test public void testRunner_LazyTestCreationTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); checkFilteredOutput().success(""test1"", ""Creating: test1\n"").success(""test2"", ""Creating: test2\n"").completedNormally(); }",c457e978be0e0d955a147b31cdc583767e1f91e4,,testRunner_LazyTestCreationTest(),3,21,"@vogar.target.TestRunnerProperties(testClass = vogar.target.junit3.LazyTestCreationTest.class) @org.junit.Test public void testRunner_LazyTestCreationTest() throws java.lang.Exception { vogar.target.TestRunner runner = testRunnerRule.createTestRunner(); runner.run(); expectedResults().success(""test1"", ""Creating: test1\n"").success(""test2"", ""Creating: test2\n"").completedNormally(); }",bf69b5360e032b42fe695687d6463d1a3c9eee5e,testRunner_LazyTestCreationTest(),130772,101,100
342378,service_java_com_android_server_wifi_WifiNative.java,270.0,"public java.util.Map<java.lang.String, java.lang.String> getNetworkExtra(int netId, java.lang.String name) { final java.lang.String extraString = getNetworkVariable(netId, name); return com.android.server.wifi.WifiNative.parseNetworkExtra(extraString); }",cbb7ac70401f134b0fc8194a54b2d0c0bcb4ab09,"public java.util.Map<java.lang.String, java.lang.String> getNetworkExtra(int netId, java.lang.String name) { final java.lang.String extraString = getNetworkVariable(netId, name); if (((extraString == null) || (!(extraString.startsWith(""\"""")))) || (!(extraString.endsWith(""\"""")))) { return null; } return com.android.server.wifi.WifiNative.parseNetworkExtra(extraString.substring(1, ((extraString.length()) - 1))); }",38582f94f0c746bcf28ac6bee19c9cac6549eae5,"getNetworkExtra(int,java.lang.String)","getNetworkExtra(int,java.lang.String)",5,261,"public java.util.Map<java.lang.String, java.lang.String> getNetworkExtra(int netId, java.lang.String name) { final java.lang.String extraString = getNetworkVariable(netId, name); if (((extraString == null) || (!(extraString.startsWith(""\"""")))) || (!(extraString.endsWith(""\"""")))) { return null; } return com.android.server.wifi.WifiNative.parseNetworkExtra(com.android.server.wifi.util.NativeUtil.removeEnclosingQuotes(extraString)); }",c66bdea454344fae1bd968baef8317d47c66a674,"getNetworkExtra(int,java.lang.String)",336733,113,118
54932,core_java_android_net_http_HttpResponseCache.java,12.0,"@java.lang.Override public void update(java.net.CacheResponse conditionalCacheHit, java.net.HttpURLConnection connection) { delegate.update(conditionalCacheHit, connection); }",1f04a363180f32f777d56edce19a147dc186864c,"@java.lang.Override public void update(java.net.CacheResponse conditionalCacheHit, java.net.HttpURLConnection connection) throws java.io.IOException { super.delegate.update(conditionalCacheHit, connection); }",dfcc6a6298b91bd432707e15a4d7cf8c984b020c,"update(java.net.CacheResponse,java.net.HttpURLConnection)","update(java.net.CacheResponse,java.net.HttpURLConnection)",4,12,"@java.lang.Override public void update(java.net.CacheResponse conditionalCacheHit, java.net.HttpURLConnection connection) throws java.io.IOException { delegate.update(conditionalCacheHit, connection); }",247ccf67a123adc820326909c41cc3d5ca66ba6c,"update(java.net.CacheResponse,java.net.HttpURLConnection)",247558,48,46
81416,tests_tests_renderscript_src_android_renderscript_cts_TestNativeLog.java,,,,"private void checkNativeLogFloat2() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testNativeLogFloat2(inV, out); verifyResultsNativeLogFloat2(inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testNativeLogFloat2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testNativeLogFloat2(inV, out); verifyResultsNativeLogFloat2(inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testNativeLogFloat2: "" + (e.toString()))); } }",543ffa1e57d85cc2cfa7822d985a98f260496eba,,checkNativeLogFloat2(),9,5,"private void checkNativeLogFloat2Float2() { android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -7495822697870219919L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.forEach_testNativeLogFloat2Float2(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testNativeLogFloat2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testNativeLogFloat2Float2(inV, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testNativeLogFloat2Float2: "" + (e.toString()))); } }",4142a63dd5019de69b0aaefb0479405d67492568,checkNativeLogFloat2Float2(),143507,329,281
150175,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_model_NativeLibraryImpl.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.android.annotations.NonNull @java.lang.Override public java.util.List<java.io.File> getSolibSearchPath() { return solibSearchPaths; },22fea7db411b4a015926beeda5ef30eed88d6aba,,getSolibSearchPath(),5,10,@com.android.annotations.NonNull @java.lang.Override public java.util.List<java.io.File> getDebuggableLibraryFolders() { return debuggableLibraryFolders; },157740fba01894ceceb1251084eb36d449c0d8cc,getDebuggableLibraryFolders(),296450,41,43
660981,src_com_android_bluetooth_newavrcp_AvrcpTargetService.java,19.0,"@java.lang.Override protected void setUserUnlocked(int userId) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""User unlocked, initializing the service""); if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.AVRCP_ENABLE_PROPERTY, false))) { android.util.Log.w(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""Skipping initialization of the new AVRCP Target Service""); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = null; return; } init(); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = this; }",09e3c5e9a77f280b1eeedc4ea2fac283464d7fcf,"@java.lang.Override protected void setUserUnlocked(int userId) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""User unlocked, initializing the service""); if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.AVRCP_ENABLE_PROPERTY, false))) { android.util.Log.w(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""Skipping initialization of the new AVRCP Target Player List""); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = null; return; } mMediaPlayerList.init(new com.android.bluetooth.avrcp.AvrcpTargetService.ListCallback()); }",aa9282e4665a193e26bc49df93a36b0b5782fcbf,setUserUnlocked(int),setUserUnlocked(int),9,19,"@java.lang.Override protected void setUserUnlocked(int userId) { android.util.Log.i(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""User unlocked, initializing the service""); if (!(android.os.SystemProperties.getBoolean(com.android.bluetooth.avrcp.AvrcpTargetService.AVRCP_ENABLE_PROPERTY, false))) { android.util.Log.w(com.android.bluetooth.avrcp.AvrcpTargetService.TAG, ""Skipping initialization of the new AVRCP Target Player List""); com.android.bluetooth.avrcp.AvrcpTargetService.sInstance = null; return; } if ((mMediaPlayerList) != null) { mMediaPlayerList.init(new com.android.bluetooth.avrcp.AvrcpTargetService.ListCallback()); } }",7ac9e4a3f2f9398b08bc9422ff34996dee4d80d9,setUserUnlocked(int),35087,180,192
18753,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gle2_DropGesture.java,,,,void dropAccept(org.eclipse.swt.dnd.DropTargetEvent event);,90c03e682d0820094bc474cd61662296691cbe48,,dropAccept(org.eclipse.swt.dnd.DropTargetEvent),4,5,public void dropAccept(org.eclipse.swt.dnd.DropTargetEvent event) { },3039e3e95712e222cdfa5bd3b896c3979a00874f,dropAccept(org.eclipse.swt.dnd.DropTargetEvent),403535,17,20
281683,ojluni_src_main_java_java_io_ObjectInputStream.java,98.0,"private void readExternalData(java.io.Externalizable obj, java.io.ObjectStreamClass desc) throws java.io.IOException { java.io.SerialCallbackContext oldContext = curContext; curContext = null; try { boolean blocked = desc.hasBlockExternalData(); if (blocked) { bin.setBlockDataMode(true); } if (obj != null) { try { obj.readExternal(this); } catch (java.lang.ClassNotFoundException ex) { handles.markException(passHandle, ex); } } if (blocked) { skipCustomData(); } } finally { curContext = oldContext; } }",38b006ba54caa83040603cf7249f8ac84cc4da96,"private void readExternalData(java.io.Externalizable obj, java.io.ObjectStreamClass desc) throws java.io.IOException { java.io.SerialCallbackContext oldContext = curContext; if (oldContext != null) oldContext.check(); curContext = null; try { boolean blocked = desc.hasBlockExternalData(); if (blocked) { bin.setBlockDataMode(true); } if (obj != null) { try { obj.readExternal(this); } catch (java.lang.ClassNotFoundException ex) { handles.markException(passHandle, ex); } } if (blocked) { skipCustomData(); } } finally { if (oldContext != null) oldContext.check(); curContext = oldContext; } }",bca739efc13a3d4c16b518763da23a5ac9ce2661,"readExternalData(java.io.Externalizable,java.io.ObjectStreamClass)","readExternalData(java.io.Externalizable,java.io.ObjectStreamClass)",2,98,"private void readExternalData(java.io.Externalizable obj, java.io.ObjectStreamClass desc) throws java.io.IOException { java.io.SerialCallbackContext oldContext = curContext; curContext = null; try { boolean blocked = desc.hasBlockExternalData(); if (blocked) { bin.setBlockDataMode(true); } if (obj != null) { try { obj.readExternal(this); } catch (java.lang.ClassNotFoundException ex) { handles.markException(passHandle, ex); } } if (blocked) { skipCustomData(); } } finally { curContext = oldContext; } }",38b006ba54caa83040603cf7249f8ac84cc4da96,"readExternalData(java.io.Externalizable,java.io.ObjectStreamClass)",311414,158,134
163501,jack-server_src_com_android_jack_server_ServerLogConfiguration.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setLogFileCount(int logFileCount) { this.logFileCount = logFileCount; },3aa9730fb1e32940a8876e78cc84dc326af92627,,setLogFileCount(int),2,8,public void setLogFileCount(@javax.annotation.Nonnegative int logFileCount) { this.logFileCount = logFileCount; },0bf07e5ec6d29e1de0fd52cc463f6970ef113c32,setLogFileCount(int),314221,22,27
129550,lint_cli_src_test_java_com_android_tools_lint_checks_IconDetectorTest.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testClaimedSize() throws java.lang.Exception { mEnabled = java.util.Collections.singleton(IconDetector.ICON_DIP_SIZE); assertEquals(("""" + ((""res/drawable-xhdpi/foo_30dp.png: Warning: Suspicious file name foo_30dp.png: The implied 30 dp size does not match the actual dp size (pixel size 72 x 72 in a drawable-xhdpi folder computes to 36 x 36 dp) [IconDipSize]\n"" + ""res/drawable-mdpi/foo_80dp.png: Warning: Suspicious file name foo_80dp.png: The implied 80 dp size does not match the actual dp size (pixel size 72 x 72 in a drawable-mdpi folder computes to 72 x 72 dp) [IconDipSize]\n"") + ""0 errors, 2 warnings\n"")), lintProject(""res/drawable-hdpi/unrelated.png=>res/drawable-mdpi/foo_72dp.png"", ""res/drawable-hdpi/unrelated.png=>res/drawable-mdpi/foo_80dp.png"", ""res/drawable-hdpi/unrelated.png=>res/drawable-xhdpi/foo_36dp.png"", ""res/drawable-hdpi/unrelated.png=>res/drawable-xhdpi/foo_35dp.png"", ""res/drawable-hdpi/unrelated.png=>res/drawable-xhdpi/foo_30dp.png"")); }",43a1b0a6befa48fb7645840003d365074df931a0,,testClaimedSize(),2,24,"public void testClaimedSize() throws java.lang.Exception { mEnabled = java.util.Collections.singleton(IconDetector.ICON_DIP_SIZE); assertEquals(("""" + ((""res/drawable-xhdpi/foo_30dp.png: Warning: Suspicious file name foo_30dp.png: The implied 30 dp size does not match the actual dp size (pixel size 72\u00d772 in a drawable-xhdpi folder computes to 36\u00d736 dp) [IconDipSize]\n"" + ""res/drawable-mdpi/foo_80dp.png: Warning: Suspicious file name foo_80dp.png: The implied 80 dp size does not match the actual dp size (pixel size 72\u00d772 in a drawable-mdpi folder computes to 72\u00d772 dp) [IconDipSize]\n"") + ""0 errors, 2 warnings\n"")), lintProject(""res/drawable-hdpi/unrelated.png=>res/drawable-mdpi/foo_72dp.png"", ""res/drawable-hdpi/unrelated.png=>res/drawable-mdpi/foo_80dp.png"", ""res/drawable-hdpi/unrelated.png=>res/drawable-xhdpi/foo_36dp.png"", ""res/drawable-hdpi/unrelated.png=>res/drawable-xhdpi/foo_35dp.png"", ""res/drawable-hdpi/unrelated.png=>res/drawable-xhdpi/foo_30dp.png"")); }",95f85d925d3e5447d9bf9fa05d651f656dcd8c75,testClaimedSize(),86819,347,359
580354,src_java_com_android_internal_telephony_uicc_UiccProfile.java,75.0,"private void registerUiccCardEvents() { if ((mUiccApplication) != null) { mUiccApplication.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); mUiccApplication.registerForNetworkLocked(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_NETWORK_LOCKED, null); } if ((mIccRecords) != null) { mIccRecords.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); mIccRecords.registerForLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_LOCKED, null); mIccRecords.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } }",2bab0dfa941943b89b947fc76a469e8f1785296a,"private void registerUiccCardEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); app.registerForNetworkLocked(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_NETWORK_LOCKED, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir != null) { ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_LOCKED, null); ir.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } } } }",361706cf9a498247133bff5735bbcd264810d6c5,registerUiccCardEvents(),registerUiccCardEvents(),4,76,"private void registerUiccCardEvents() { for (com.android.internal.telephony.uicc.UiccCardApplication app : mUiccApplications) { if (app != null) { app.registerForReady(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_APP_READY, null); com.android.internal.telephony.uicc.IccRecords ir = app.getIccRecords(); if (ir != null) { ir.registerForRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_RECORDS_LOADED, null); ir.registerForRecordsEvents(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_RECORD_EVENTS, null); } } } if ((mIccRecords) != null) { mIccRecords.registerForLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_ICC_LOCKED, null); mIccRecords.registerForNetworkLockedRecordsLoaded(this, com.android.internal.telephony.uicc.UiccProfile.EVENT_NETWORK_LOCKED, null); } }",54b7b4311d6291505b2f43aadcdc3696b50e5927,registerUiccCardEvents(),200818,246,266
307871,service_java_com_android_server_wifi_WifiConfigManager.java,33.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void clearInternalUserData(int userId) { for (android.net.wifi.WifiConfiguration config : getInternalConfiguredNetworks()) { if ((!(config.shared)) && (com.android.server.wifi.WifiConfigurationUtil.doesUidBelongToAnyProfile(config.creatorUid, mUserManager.getProfiles(mCurrentUserId)))) { mConfiguredNetworks.remove(config.networkId); } } mDeletedEphemeralSSIDs.clear(); mScanDetailCaches.clear(); clearLastSelectedNetwork(); }",058adda6ae5abac7e886a53374020e8ed6d488be,,clearInternalUserData(int),6,39,"private void clearInternalUserData(int userId) { for (android.net.wifi.WifiConfiguration config : getInternalConfiguredNetworks()) { if ((!(config.shared)) && (com.android.server.wifi.WifiConfigurationUtil.doesUidBelongToAnyProfile(config.creatorUid, mUserManager.getProfiles(userId)))) { mConfiguredNetworks.remove(config.networkId); } } mDeletedEphemeralSSIDs.clear(); mScanDetailCaches.clear(); clearLastSelectedNetwork(); }",a3479f2e5dd16faa56c25fccecbd14c29104fda2,clearInternalUserData(int),465940,112,111
22397,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_wizards_newproject_NewProjectCreationPage.java,64.0,public void handleEvent(org.eclipse.swt.widgets.Event event) { if (!(mInternalApplicationNameUpdate)) { mApplicationNameModifiedByUser = true; } },30ddf4462b01c690d50923720648c677df2121fe,public void handleEvent(org.eclipse.swt.widgets.Event event) { if (!(mInternalApplicationNameUpdate)) { mApplicationNameModifiedByUser = true; if (!(mActivityNameModifiedByUser)) { java.lang.String name = com.android.ide.eclipse.adt.internal.editors.descriptors.DescriptorsUtils.capitalize(mApplicationNameField.getText()); try { mInternalActivityNameUpdate = true; mActivityNameField.setText((name + (com.android.ide.eclipse.adt.internal.wizards.newproject.NewProjectCreationPage.ACTIVITY_NAME_SUFFIX))); } finally { mInternalActivityNameUpdate = false; } } } },0672ae015a6299e842acf192ad0e76edcc5a6446,handleEvent(org.eclipse.swt.widgets.Event),handleEvent(org.eclipse.swt.widgets.Event),3,65,public void handleEvent(org.eclipse.swt.widgets.Event event) { onApplicationFieldModified(); },bbccc51f14964b65774e93ec0fd8316b21be3550,handleEvent(org.eclipse.swt.widgets.Event),166910,146,22
519549,tests_tests_telephony_src_android_telephony_embms_cts_MbmsDownloadSessionTest.java,,,,"public void testRequestUpdateDownloadServices() throws java.lang.Exception { java.util.List<java.lang.String> testClasses = java.util.Arrays.asList(""class1"", ""class2""); mDownloadSession.requestUpdateFileServices(testClasses); java.util.List<android.telephony.mbms.FileServiceInfo> serviceInfos = ((java.util.List<android.telephony.mbms.FileServiceInfo>) (mCallback.waitOnFileServicesUpdated().arg1)); assertEquals(CtsDownloadService.FILE_SERVICE_INFO, serviceInfos.get(0)); assertEquals(0, mCallback.getNumErrorCalls()); java.util.List<java.util.List<java.lang.Object>> requestDownloadServicesCalls = getMiddlewareCalls(CtsDownloadService.METHOD_REQUEST_UPDATE_FILE_SERVICES); assertEquals(1, requestDownloadServicesCalls.size()); assertEquals(3, requestDownloadServicesCalls.get(0).size()); java.util.List<java.lang.String> middlewareReceivedServiceClasses = ((java.util.List<java.lang.String>) (requestDownloadServicesCalls.get(0).get(2))); assertEquals(testClasses.size(), middlewareReceivedServiceClasses.size()); }",9c136881a5248526e6062dd2d01de02cc332a89e,,testRequestUpdateDownloadServices(),6,4,"public void testRequestUpdateDownloadServices() throws java.lang.Exception { java.util.List<java.lang.String> testClasses = java.util.Arrays.asList(""class1"", ""class2""); mDownloadSession.requestUpdateFileServices(testClasses); java.util.List<android.telephony.mbms.FileServiceInfo> serviceInfos = ((java.util.List<android.telephony.mbms.FileServiceInfo>) (mCallback.waitOnFileServicesUpdated().arg1)); assertEquals(CtsDownloadService.FILE_SERVICE_INFO, serviceInfos.get(0)); assertEquals(0, mCallback.getNumErrorCalls()); java.util.List<android.os.Bundle> requestDownloadServicesCalls = getMiddlewareCalls(CtsDownloadService.METHOD_REQUEST_UPDATE_FILE_SERVICES); assertEquals(1, requestDownloadServicesCalls.size()); java.util.List<java.lang.String> middlewareReceivedServiceClasses = requestDownloadServicesCalls.get(0).getStringArrayList(CtsDownloadService.ARGUMENT_SERVICE_CLASSES); assertEquals(testClasses.size(), middlewareReceivedServiceClasses.size()); for (int i = 0; i < (testClasses.size()); i++) { assertEquals(testClasses.get(i), middlewareReceivedServiceClasses.get(i)); } }",305a1c2c6b870227e4782470788de96c4fbd6428,testRequestUpdateDownloadServices(),1104,259,275
129912,luni_src_test_java_libcore_icu_RelativeDateTimeFormatterTest.java,,,,"public void test_getRelativeTimeSpanStringGerman() throws java.lang.Exception { java.util.Locale locale = java.util.Locale.GERMAN; final long now = java.lang.System.currentTimeMillis(); assertEquals(""vor 42 Minuten"", getRelativeTimeSpanString(locale, null, (now - (42 * (MINUTE_IN_MILLIS))), now, libcore.icu.MINUTE_IN_MILLIS, 0)); assertEquals(""in 42 Minuten"", getRelativeTimeSpanString(locale, null, (now + (42 * (MINUTE_IN_MILLIS))), now, libcore.icu.MINUTE_IN_MILLIS, 0)); assertEquals(""gestern"", getRelativeTimeSpanString(locale, null, (now - (DAY_IN_MILLIS)), now, libcore.icu.DAY_IN_MILLIS, 0)); assertEquals(""vorgestern"", getRelativeTimeSpanString(locale, null, (now - (2 * (DAY_IN_MILLIS))), now, libcore.icu.DAY_IN_MILLIS, 0)); assertEquals(""morgen"", getRelativeTimeSpanString(locale, null, (now + (DAY_IN_MILLIS)), now, libcore.icu.DAY_IN_MILLIS, 0)); assertEquals(""\u00fcbermorgen"", getRelativeTimeSpanString(locale, null, (now + (2 * (DAY_IN_MILLIS))), now, libcore.icu.DAY_IN_MILLIS, 0)); }",6be2964181cabe3b44407b9d87ac5b375e8ff429,,test_getRelativeTimeSpanStringGerman(),5,3,"public void test_getRelativeTimeSpanStringGerman() throws java.lang.Exception { java.util.Locale de_DE = new java.util.Locale(""de"", ""DE""); final long now = java.lang.System.currentTimeMillis(); java.util.TimeZone tz = java.util.TimeZone.getDefault(); assertEquals(""vor 42 Minuten"", libcore.icu.RelativeDateTimeFormatter.getRelativeTimeSpanString(de_DE, tz, (now - (42 * (libcore.icu.RelativeDateTimeFormatter.MINUTE_IN_MILLIS))), now, libcore.icu.RelativeDateTimeFormatter.MINUTE_IN_MILLIS, 0)); assertEquals(""in 42 Minuten"", libcore.icu.RelativeDateTimeFormatter.getRelativeTimeSpanString(de_DE, tz, (now + (42 * (libcore.icu.RelativeDateTimeFormatter.MINUTE_IN_MILLIS))), now, libcore.icu.RelativeDateTimeFormatter.MINUTE_IN_MILLIS, 0)); assertEquals(""Gestern"", libcore.icu.RelativeDateTimeFormatter.getRelativeTimeSpanString(de_DE, tz, (now - (libcore.icu.RelativeDateTimeFormatter.DAY_IN_MILLIS)), now, libcore.icu.RelativeDateTimeFormatter.DAY_IN_MILLIS, 0)); assertEquals(""Vorgestern"", libcore.icu.RelativeDateTimeFormatter.getRelativeTimeSpanString(de_DE, tz, (now - (2 * (libcore.icu.RelativeDateTimeFormatter.DAY_IN_MILLIS))), now, libcore.icu.RelativeDateTimeFormatter.DAY_IN_MILLIS, 0)); assertEquals(""Morgen"", libcore.icu.RelativeDateTimeFormatter.getRelativeTimeSpanString(de_DE, tz, (now + (libcore.icu.RelativeDateTimeFormatter.DAY_IN_MILLIS)), now, libcore.icu.RelativeDateTimeFormatter.DAY_IN_MILLIS, 0)); assertEquals(""Übermorgen"", libcore.icu.RelativeDateTimeFormatter.getRelativeTimeSpanString(de_DE, tz, (now + (2 * (libcore.icu.RelativeDateTimeFormatter.DAY_IN_MILLIS))), now, libcore.icu.RelativeDateTimeFormatter.DAY_IN_MILLIS, 0)); }",175d341834d6ffee06fcf385c7fe24389b94d767,test_getRelativeTimeSpanStringGerman(),23696,306,466
83276,src_main_java_org_conscrypt_OpenSSLMac.java,1.0,"@java.lang.Override protected void engineUpdate(byte[] input, int offset, int len) { org.conscrypt.NativeCrypto.EVP_DigestUpdate(ctx.getContext(), input, offset, len); }",394a4b6b6113e9193ac434292fab6cda6f28e6c6,"@java.lang.Override protected void engineUpdate(byte[] input, int offset, int len) { final org.conscrypt.OpenSSLDigestContext ctx = this.ctx; org.conscrypt.NativeCrypto.EVP_DigestUpdate(ctx.getContext(), input, offset, len); }",a672d936bd208bba9cd1d8f85d7b94aa32271520,"engineUpdate(byte[],int,int)","engineUpdate(byte[],int,int)",5,2,"@java.lang.Override protected void engineUpdate(byte[] input, int offset, int len) { final org.conscrypt.OpenSSLDigestContext ctxLocal = ctx; org.conscrypt.NativeCrypto.EVP_DigestUpdate(ctxLocal, input, offset, len); }",19300576bd5d21b3bc1ddd7a7bfaf73f7b235d32,"engineUpdate(byte[],int,int)",254426,65,63
465279,core_java_android_bluetooth_le_AdvertisingSet.java,7.0,"public void getOwnAddress() { try { gatt.getOwnAddress(this.advertiserId); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, ""remote exception - "", e); } }",f82b8611d1e0720aa9330848ed883e884103af7f,"public void getOwnAddress() { try { mGatt.getOwnAddress(this.mAdvertiserId); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, ""remote exception - "", e); } }",750666d92763e3c702a512d61a3abcca42918ddc,getOwnAddress(),getOwnAddress(),9,7,"public void getOwnAddress() { try { mGatt.getOwnAddress(mAdvertiserId); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.le.AdvertisingSet.TAG, ""remote exception - "", e); } }",1750fe7795462b3f7b5723cfe69cd85755c8b939,getOwnAddress(),2181,65,63
21570,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_resources_manager_ResourceRepository.java,,,,protected abstract com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem doCreateResourceItem(java.lang.String name);,3cb7eaa5e37293d3d7b6be32bec3b9ba9d857562,,doCreateResourceItem(java.lang.String),6,16,protected abstract com.android.ide.eclipse.adt.internal.resources.manager.ResourceItem createResourceItem(java.lang.String name);,babe3bdd66c361ca8140128e590518d3b8266d35,createResourceItem(java.lang.String),150581,33,32
356295,src_com_android_bluetooth_sap_SapRilReceiver.java,6.0,"private void notifyShutdown() { if (com.android.bluetooth.sap.SapRilReceiver.DEBUG) android.util.Log.i(com.android.bluetooth.sap.SapRilReceiver.TAG, ""notifyShutdown()""); synchronized(this) { if ((mSocket) != null) sendShutdownMessage(); } }",4921ed1ea82ea59b7b50503a3935b670f9562600,"void notifyShutdown() { if (com.android.bluetooth.sap.SapRilReceiver.DEBUG) android.util.Log.i(com.android.bluetooth.sap.SapRilReceiver.TAG, ""notifyShutdown()""); synchronized(this) { if ((mSapProxy) != null) sendShutdownMessage(); } }",bd3f77af5495e9d605b5829ef9664e43c675a8fb,notifyShutdown(),notifyShutdown(),7,7,"void notifyShutdown() { if (com.android.bluetooth.sap.SapRilReceiver.DEBUG) android.util.Log.i(com.android.bluetooth.sap.SapRilReceiver.TAG, ""notifyShutdown()""); synchronized(mSapProxyLock) { if ((mSapProxy) != null) sendShutdownMessage(); } }",7bd3cccd4efe576d68f082cf307930027681f16a,notifyShutdown(),88349,76,80
79721,graphics_java_android_graphics_Canvas.java,32.0,"private static native void nativeDrawBitmapMatrix(int nCanvas, int nBitmap, int nMatrix, int nPaint);",3cf94abf709e8e2dd2289c8fa7fb5031ea1f4982,"private static native void nativeDrawBitmapMatrix(long nCanvas, long nBitmap, long nMatrix, long nPaint);",138ea9c7b42d1e431ab39e7e9bb827e0b6cb16c3,"nativeDrawBitmapMatrix(int,int,int,int)","nativeDrawBitmapMatrix(long,long,long,long)",6,11,"private static native void nativeDrawBitmapMatrix(long nativeCanvas, long nativeBitmap, long nativeMatrix, long nativePaint);",f80d1b90d9b8f029313a9f353da3d9fd676cd113,"nativeDrawBitmapMatrix(long,long,long,long)",35593,25,25
274154,src_com_android_phone_GsmUmtsCallBarringOptions.java,,,,"@java.lang.Override protected void onSaveInstanceState(android.os.Bundle outState) { super.onSaveInstanceState(outState); for (com.android.phone.CallBarringEditPreference pref : mPreferences) { android.os.Bundle bundle = new android.os.Bundle(); bundle.putBoolean(com.android.phone.GsmUmtsCallBarringOptions.KEY_STATUS, pref.isActivated); outState.putParcelable(pref.getKey(), bundle); } outState.putInt(com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_STATE_KEY, mPwChangeState); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.OLD_PW_KEY, mOldPassword); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.NEW_PW_KEY, mNewPassword); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_MESSAGE_KEY, mButtonChangePW.getDialogMessage().toString()); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_PW_ENTRY_KEY, mButtonChangePW.getText()); }",89515d0bd97015d7a91c30a6d1b7f97f04e0fed3,,onSaveInstanceState(android.os.Bundle),5,5,"@java.lang.Override protected void onSaveInstanceState(android.os.Bundle outState) { super.onSaveInstanceState(outState); for (com.android.phone.CallBarringEditPreference pref : mPreferences) { android.os.Bundle bundle = new android.os.Bundle(); bundle.putBoolean(com.android.phone.GsmUmtsCallBarringOptions.KEY_STATUS, pref.mIsActivated); bundle.putBoolean(com.android.phone.GsmUmtsCallBarringOptions.PREFERENCE_ENABLED_KEY, pref.isEnabled()); bundle.putBoolean(com.android.phone.GsmUmtsCallBarringOptions.PREFERENCE_SHOW_PASSWORD_KEY, pref.needInputMethod()); outState.putParcelable(pref.getKey(), bundle); } outState.putInt(com.android.phone.GsmUmtsCallBarringOptions.PW_CHANGE_STATE_KEY, mPwChangeState); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.OLD_PW_KEY, mOldPassword); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.NEW_PW_KEY, mNewPassword); outState.putInt(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_MESSAGE_KEY, mPwChangeDialogStrId); outState.putString(com.android.phone.GsmUmtsCallBarringOptions.DIALOG_PW_ENTRY_KEY, mButtonChangePW.getText()); outState.putBoolean(com.android.phone.GsmUmtsCallBarringOptions.SAVED_BEFORE_LOAD_COMPLETED_KEY, (((mProgressDialog) != null) && (mProgressDialog.isShowing()))); }",d4012a5ca9067a8e65fc3f258bb46f62036f5d92,onSaveInstanceState(android.os.Bundle),437885,281,395
553459,hostsidetests_services_activityandwindowmanager_activitymanager_src_android_server_cts_ActivityManagerDisplayTests.java,17.0,"public void testStackFocusSwitchOnTouchEvent() throws java.lang.Exception { if (!(supportsMultiDisplay())) { return; } final android.server.cts.DisplayState newDisplay = new android.server.cts.VirtualDisplayBuilder(this).build(); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY }); mAmWmState.assertFocusedActivity(""Focus must be switched back to primary display"", android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); launchActivityOnDisplay(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, newDisplay.mDisplayId); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME }); mAmWmState.assertFocusedActivity(""Activity launched on secondary display must be focused"", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); final android.server.cts.ActivityManagerDisplayTests.ReportedDisplayMetrics displayMetrics = getDisplayMetrics(); final int width = displayMetrics.getWidth(); final int height = displayMetrics.getHeight(); executeShellCommand((((""input tap "" + (width / 2)) + "" "") + (height / 2))); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY }); mAmWmState.assertFocusedActivity(""Focus must be switched back to primary display"", android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); }",5ea8d15a46d59da3f3559f15cdee96945881b227,"public void testStackFocusSwitchOnTouchEvent() throws java.lang.Exception { if (!(supportsMultiDisplay())) { return; } final android.server.cts.DisplayState newDisplay = new android.server.cts.VirtualDisplayBuilder(this).build(); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY }); mAmWmState.assertFocusedActivity(""Focus must be switched back to primary display"", android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); launchActivityOnDisplay(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, newDisplay.mDisplayId); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME }); mAmWmState.assertFocusedActivity(""Activity launched on secondary display must be focused"", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); final android.server.cts.ActivityManagerDisplayTests.ReportedDisplayMetrics displayMetrics = getDisplayMetrics(); final int width = displayMetrics.getWidth(); final int height = displayMetrics.getHeight(); executeShellCommand((((""input tap "" + (width / 2)) + "" "") + (height / 2))); final java.lang.String activityName = (mVrHeadset) ? android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME : android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY; mAmWmState.computeState(mDevice, new java.lang.String[]{ activityName }); mAmWmState.assertFocusedActivity(""Focus must be switched back to the correct display"", activityName); }",c7b2fb3deb99bf5d403d53516e8776d559f703b2,testStackFocusSwitchOnTouchEvent(),testStackFocusSwitchOnTouchEvent(),8,31,"public void testStackFocusSwitchOnTouchEvent() throws java.lang.Exception { if (!(supportsMultiDisplay())) { return; } final android.server.cts.DisplayState newDisplay = new android.server.cts.VirtualDisplayBuilder(this).build(); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY }); mAmWmState.assertFocusedActivity(""Focus must be switched back to primary display"", android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); launchActivityOnDisplay(android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME, newDisplay.mDisplayId); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME }); mAmWmState.assertFocusedActivity(""Activity launched on secondary display must be focused"", android.server.cts.ActivityManagerDisplayTests.TEST_ACTIVITY_NAME); final android.server.cts.ActivityManagerDisplayTests.ReportedDisplayMetrics displayMetrics = getDisplayMetrics(); final int width = displayMetrics.getWidth(); final int height = displayMetrics.getHeight(); executeShellCommand((((""input tap "" + (width / 2)) + "" "") + (height / 2))); mAmWmState.computeState(mDevice, new java.lang.String[]{ android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY }); mAmWmState.assertFocusedActivity(""Focus must be switched back to primary display"", android.server.cts.ActivityManagerDisplayTests.VIRTUAL_DISPLAY_ACTIVITY); }",5ea8d15a46d59da3f3559f15cdee96945881b227,testStackFocusSwitchOnTouchEvent(),118125,391,366
91995,luni_src_main_java_libcore_io_Posix.java,12.0,"public int sendto(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, int flags, java.net.InetAddress inetAddress, int port) throws java.net.SocketException, libcore.io.ErrnoException { if (buffer.isDirect()) { return sendtoBytes(fd, buffer, buffer.position(), buffer.remaining(), flags, inetAddress, port); } else { return sendtoBytes(fd, java.nio.NioUtils.unsafeArray(buffer), ((java.nio.NioUtils.unsafeArrayOffset(buffer)) + (buffer.position())), buffer.remaining(), flags, inetAddress, port); } }",7ae235865105ac640ec50c8ca97bf6752413ee43,"public int sendto(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, int flags, java.net.InetAddress inetAddress, int port) throws android.os.ErrnoException, java.net.SocketException { if (buffer.isDirect()) { return sendtoBytes(fd, buffer, buffer.position(), buffer.remaining(), flags, inetAddress, port); } else { return sendtoBytes(fd, java.nio.NioUtils.unsafeArray(buffer), ((java.nio.NioUtils.unsafeArrayOffset(buffer)) + (buffer.position())), buffer.remaining(), flags, inetAddress, port); } }",235e46c252e95cd131fab07a78e6597a6b324d4a,"sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)","sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)",3,13,"public int sendto(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, int flags, java.net.InetAddress inetAddress, int port) throws android.system.ErrnoException, java.net.SocketException { if (buffer.isDirect()) { return sendtoBytes(fd, buffer, buffer.position(), buffer.remaining(), flags, inetAddress, port); } else { return sendtoBytes(fd, java.nio.NioUtils.unsafeArray(buffer), ((java.nio.NioUtils.unsafeArrayOffset(buffer)) + (buffer.position())), buffer.remaining(), flags, inetAddress, port); } }",4921bc5d7dd53e46cf44ae85c55f37bb34262de6,"sendto(java.io.FileDescriptor,java.nio.ByteBuffer,int,java.net.InetAddress,int)",169914,136,136
106684,perflib_src_test_java_com_android_tools_perflib_heap_analysis_DominatorsTest.java,2.0,"public void testCyclicGraph() { mSnapshot = new com.android.tools.perflib.heap.analysis.SnapshotBuilder(4).addReferences(1, 2, 3, 4).addReferences(2, 3).addReferences(3, 4).addReferences(4, 2).addRoot(1).getSnapshot(); mDominators = com.android.tools.perflib.heap.analysis.Dominators.getDominatorMap(mSnapshot); assertEquals(4, mDominators.size()); assertDominates(1, 2); assertDominates(1, 3); assertDominates(1, 4); }",1017862a66145bca006e7d6e9237138848b8f4dd,"public void testCyclicGraph() { mSnapshot = new com.android.tools.perflib.heap.analysis.SnapshotBuilder(4).addReferences(1, 2, 3, 4).addReferences(2, 3).addReferences(3, 4).addReferences(4, 2).addRoot(1).getSnapshot(); mDominators = mSnapshot.computeDominators(); assertEquals(4, mDominators.getReachableInstances().size()); assertDominates(1, 2); assertDominates(1, 3); assertDominates(1, 4); }",75e499dfa0059b9a85d3ff1570fde36e71ff18de,testCyclicGraph(),testCyclicGraph(),4,2,"public void testCyclicGraph() { mSnapshot = new com.android.tools.perflib.heap.analysis.SnapshotBuilder(4).addReferences(1, 2, 3, 4).addReferences(2, 3).addReferences(3, 4).addReferences(4, 2).addRoot(1).getSnapshot(); mSnapshot.computeDominators(); assertEquals(4, mSnapshot.getReachableInstances().size()); assertDominates(1, 2); assertDominates(1, 3); assertDominates(1, 4); }",f21f797c17d1aaf834ea7ed044c57d1384c7d347,testCyclicGraph(),495820,101,94
438759,services_core_java_com_android_server_pm_PackageManagerService.java,683.0,"private int performDexOptTraced(java.lang.String packageName, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete) { android.os.Trace.traceBegin(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER, ""dexopt""); try { return performDexOptInternal(packageName, checkProfiles, targetCompilerFilter, force, bootComplete); } finally { android.os.Trace.traceEnd(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER); } }",307e490805f1a30de47b96b0e4a2533da71f5ba1,"private int performDexOptTraced(java.lang.String packageName, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete) { android.os.Trace.traceBegin(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER, ""dexopt""); try { return performDexOptInternal(packageName, checkProfiles, targetCompilerFilter, force, bootComplete, false); } finally { android.os.Trace.traceEnd(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER); } }",6a61864725bf338851f965d35f9678f6e12cc56a,"performDexOptTraced(java.lang.String,boolean,java.lang.String,boolean,boolean)","performDexOptTraced(java.lang.String,boolean,java.lang.String,boolean,boolean)",3,683,"private int performDexOptTraced(java.lang.String packageName, boolean checkProfiles, java.lang.String targetCompilerFilter, boolean force, boolean bootComplete) { android.os.Trace.traceBegin(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER, ""dexopt""); try { return performDexOptInternal(packageName, checkProfiles, targetCompilerFilter, force, bootComplete); } finally { android.os.Trace.traceEnd(com.android.server.pm.TRACE_TAG_PACKAGE_MANAGER); } }",307e490805f1a30de47b96b0e4a2533da71f5ba1,"performDexOptTraced(java.lang.String,boolean,java.lang.String,boolean,boolean)",470596,119,117
54943,gradle_src_main_groovy_com_android_build_gradle_internal_variant_BaseVariantData.java,,,,@com.android.annotations.NonNull public java.lang.String getFlavorName() { if (variantConfiguration.hasFlavors()) { return getFlavoredName(true); } else { return com.android.build.gradle.internal.variant.BaseVariantData.capitalize(BuilderConstants.MAIN); } },2179ba4f7a8e343a618402ac396f5cc502325e4b,,getFlavorName(),4,1,@com.android.annotations.NonNull public java.lang.String getFlavorName() { if (variantConfiguration.hasFlavors()) { return getFlavoredName(true); } else { return com.android.build.gradle.internal.StringHelper.capitalize(BuilderConstants.MAIN); } },5bfb853674685ae9ecb9a6b4ac1b1fa1c383e11d,getFlavorName(),11014,66,63
510195,test_959-invoke-polymorphic-accessors_src_Main.java,18.0,"static void getLong(java.lang.invoke.MethodHandle m, Main.ValueHolder v, long value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final long got = (v == null) ? ((long) (m.invokeExact())) : ((long) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }",04abfb7363e5aefee98ffb640dfb0666a8103ecd,"static void getLong(java.lang.invoke.MethodHandle m, Main.ValueHolder v, long value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final long got = (v == null) ? ((long) (m.invokeExact())) : ((long) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }",a44c8c9a3b0e3379784fd683094df6e64d1616f4,"getLong(java.lang.invoke.MethodHandle,Main$ValueHolder,long,boolean)","getLong(java.lang.invoke.MethodHandle,Main$ValueHolder,long,boolean)",3,18,"static void getLong(java.lang.invoke.MethodHandle m, Main.ValueHolder v, long value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { final long got = (v == null) ? ((long) (m.invokeExact())) : ((long) (m.invokeExact(v))); Main.Tester.assertTrue((got == value)); } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEquals(exceptionThrown, expectFailure); }",65d20bcfc3cdef9c4de2821ce51499427152be73,"getLong(java.lang.invoke.MethodHandle,Main$ValueHolder,long,boolean)",228869,122,121
358197,src_com_android_bluetooth_avrcp_Avrcp.java,49.0,"private synchronized void initMediaPlayersInfoList() { mMediaPlayerInfoList.clear(); if ((mMediaSessionManager) == null) { if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.w(com.android.bluetooth.avrcp.Avrcp.TAG, ""initMediaPlayersInfoList: no media session manager!""); return; } java.util.List<android.media.session.MediaController> controllers = mMediaSessionManager.getActiveSessions(null); if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.v(com.android.bluetooth.avrcp.Avrcp.TAG, ((""initMediaPlayerInfoList: "" + (controllers.size())) + "" controllers"")); for (android.media.session.MediaController mediaController : controllers) { java.lang.String packageName = mediaController.getPackageName(); com.android.bluetooth.avrcp.MediaController controller = com.android.bluetooth.avrcp.MediaController.wrap(mediaController); com.android.bluetooth.avrcp.MediaPlayerInfo info = new com.android.bluetooth.avrcp.MediaPlayerInfo(packageName, AvrcpConstants.PLAYER_TYPE_AUDIO, AvrcpConstants.PLAYER_SUBTYPE_NONE, getPlayBackState(controller), getFeatureBitMask(packageName), getAppLabel(packageName), controller); if (com.android.bluetooth.avrcp.Avrcp.DEBUG) android.util.Log.d(com.android.bluetooth.avrcp.Avrcp.TAG, info.toString()); mMediaPlayerInfoList.add(info); } }",c8be33786602414bfedb3ff47acb67f8da148a18,private java.util.List<android.media.session.MediaController> getMediaControllers() { java.util.List<android.media.session.MediaController> controllers = new java.util.ArrayList<android.media.session.MediaController>(); for (com.android.bluetooth.avrcp.MediaPlayerInfo info : mMediaPlayerInfoList.values()) { controllers.add(info.getMediaController().getWrappedInstance()); } return controllers; },4cb1b10d2ce11766f432c6566d3c86f2ffc9ff34,initMediaPlayersInfoList(),getMediaControllers(),11,145,private java.util.List<android.media.session.MediaController> getMediaControllers() { java.util.List<android.media.session.MediaController> controllers = new java.util.ArrayList<android.media.session.MediaController>(); for (com.android.bluetooth.avrcp.MediaPlayerInfo info : mMediaPlayerInfoList.values()) { if ((info.getMediaController()) != null) { controllers.add(info.getMediaController().getWrappedInstance()); } } return controllers; },55224dd4f1bf92382fc84a6481d984b46d2693a7,getMediaControllers(),389400,96,109
237621,jack-tests_tests_com_android_jack_java8_DefaultMethodTest.java,20.0,@org.junit.Test public void testDefaultMethod013() throws java.lang.Exception { run(DEFAULTMETHOD013); },5f1756c077685b93f3a8feae28112880ca2f464e,@org.junit.Test @java.lang.Runtime public void testDefaultMethod013() throws java.lang.Exception { run(DEFAULTMETHOD013); },5c95c6491d521d6c1073d1dc50d7990e4aca6e5c,testDefaultMethod013(),testDefaultMethod013(),11,20,@org.junit.Test @java.lang.Runtime(from = RuntimeVersion.N) public void testDefaultMethod013() throws java.lang.Exception { run(DEFAULTMETHOD013); },cca12fac5c8659a268431ed0ea63515deeb36a1e,testDefaultMethod013(),273913,34,42
538036,src_com_android_bluetooth_opp_BluetoothOppNotification.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void cancelNotifications() { if (com.android.bluetooth.opp.BluetoothOppNotification.V) android.util.Log.v(com.android.bluetooth.opp.BluetoothOppNotification.TAG, ""cancelNotifications ""); mHandler.removeCallbacksAndMessages(null); mNotificationMgr.cancelAll(); }",078ba12bb02a8e4805dd43860f78e6ffe40376b7,,cancelNotifications(),4,1,"void cancelNotifications() { if (com.android.bluetooth.opp.BluetoothOppNotification.V) { android.util.Log.v(com.android.bluetooth.opp.BluetoothOppNotification.TAG, ""cancelNotifications ""); } mHandler.removeCallbacksAndMessages(null); mNotificationMgr.cancelAll(); }",6b78ba9e103916b616ea681563962af2303bb3a9,cancelNotifications(),202905,66,68
229489,jack_src_com_android_jack_plugin_v01_Plugin.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@javax.annotation.Nonnull com.android.sched.scheduler.ProductionSet getAddedProductions(@javax.annotation.Nonnull com.android.sched.util.config.Config config, @javax.annotation.Nonnull com.android.sched.scheduler.Scheduler scheduler);",1fc3ef949ead17cb05c24bcff62695f53743bf3c,,"getAddedProductions(com.android.sched.util.config.Config,com.android.sched.scheduler.Scheduler)",5,3,"@javax.annotation.Nonnull com.android.sched.scheduler.ProductionSet getProductions(@javax.annotation.Nonnull com.android.sched.util.config.Config config, @javax.annotation.Nonnull com.android.sched.scheduler.Scheduler scheduler);",2925985dab46e7ad537b1d15f7f9944574cd8536,"getProductions(com.android.sched.util.config.Config,com.android.sched.scheduler.Scheduler)",282332,56,55
440538,luni_src_test_java_libcore_java_text_DecimalFormatTest.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testLocaleGroupingSeparator() { int number = 1234; java.text.DecimalFormat df; java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(new java.util.Locale(""de"", ""AT"")); df = new java.text.DecimalFormat(""#,##0.00;-#,##0.00"", dfs); assertEquals(""1 234,00"", df.format(number)); df = new java.text.DecimalFormat(""¤#,##0.00;¤-#,##0.00"", dfs); assertEquals(""€1 234,00"", df.format(number)); }",c85d39b9479cc7c3ed95c9ad2685b02a2a5465e6,,testLocaleGroupingSeparator(),5,1,"public void testLocaleGroupingSeparator() { java.util.Locale locale = new java.util.Locale(""de"", ""AT""); android.icu.text.DecimalFormatSymbols icuDfs = new android.icu.text.DecimalFormatSymbols(locale); assertEquals(icuDfs.getGroupingSeparator(), '\u00a0'); assertEquals(icuDfs.getMonetaryGroupingSeparator(), '.'); java.text.DecimalFormatSymbols dfs = new java.text.DecimalFormatSymbols(locale); assertEquals(dfs.getGroupingSeparator(), '\u00a0'); assertEquals(""1\u00a0234,00"", new java.text.DecimalFormat(""#,##0.00"", dfs).format(1234)); assertEquals(""\u20ac1\u00a0234,00"", new java.text.DecimalFormat(""¤#,##0.00"", dfs).format(1234)); }",2e02b405cd2946270d3aa9be6b68d938e47c0d46,testLocaleGroupingSeparator(),409142,124,178
107453,lint_cli_src_test_java_com_android_tools_lint_checks_ApiDetectorTest.java,24.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testReflectiveOperationException() throws java.lang.Exception { assertEquals(("""" + (((""src/test/pkg/Java7API.java:8: Error: ReflectiveOperationException requires API level 19 (current min is 1) [NewApi]\n"" + "" } catch (ReflectiveOperationException e) {\n"") + "" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"") + ""1 errors, 0 warnings\n"")), lintProject(""apicheck/minsdk1.xml=>AndroidManifest.xml"", ""src/test/pkg/Java7API.java.txt=>src/test/pkg/Java7API.java"")); }",ab0cd31c93c53832551eb7dc3c878722a490bb72,,testReflectiveOperationException(),3,24,"public void testReflectiveOperationException() throws java.lang.Exception { assertEquals(("""" + ((((((""src/test/pkg/Java7API.java:8: Error: Class requires API level 19 (current min is 1): java.lang.ReflectiveOperationException [NewApi]\n"" + "" } catch (ReflectiveOperationException e) {\n"") + "" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"") + ""src/test/pkg/Java7API.java:9: Error: Call requires API level 19 (current min is 1): java.lang.ReflectiveOperationException#printStackTrace [NewApi]\n"") + "" e.printStackTrace();\n"") + "" ~~~~~~~~~~~~~~~\n"") + ""2 errors, 0 warnings\n"")), lintProject(""apicheck/minsdk1.xml=>AndroidManifest.xml"", ""src/test/pkg/Java7API.java.txt=>src/test/pkg/Java7API.java"", ""src/test/pkg/Java7API.class.data=>bin/classes/test/pkg/Java7API.class"")); }",5d1badb8e4137a83532f576ff494a543d530214f,testReflectiveOperationException(),224617,137,234
633866,core_java_android_net_NetworkStats.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void setValues(int i, android.net.NetworkStats.Entry values) { iface[i] = values.iface; uid[i] = values.uid; set[i] = values.set; tag[i] = values.tag; metered[i] = values.metered; roaming[i] = values.roaming; defaultNetwork[i] = values.defaultNetwork; rxBytes[i] = values.rxBytes; rxPackets[i] = values.rxPackets; txBytes[i] = values.txBytes; txPackets[i] = values.txPackets; operations[i] = values.operations; }",599409568b923f00bf05c605ba15a57ac3a83389,,"setValues(int,android.net.NetworkStats$Entry)",13,6,"private void setValues(int i, android.net.NetworkStats.Entry entry) { iface[i] = entry.iface; uid[i] = entry.uid; set[i] = entry.set; tag[i] = entry.tag; metered[i] = entry.metered; roaming[i] = entry.roaming; defaultNetwork[i] = entry.defaultNetwork; rxBytes[i] = entry.rxBytes; rxPackets[i] = entry.rxPackets; txBytes[i] = entry.txBytes; txPackets[i] = entry.txPackets; operations[i] = entry.operations; }",b28bd2f1426fb8030f2eda5fcd8fb31929229792,"setValues(int,android.net.NetworkStats$Entry)",90121,151,151
152041,tests_tests_media_src_android_media_cts_MediaBrowserServiceTest.java,,,,"public void testBrowserRoot() throws java.lang.Exception { android.service.media.MediaBrowserService.BrowserRoot browserRoot = StubMediaBrowserService.sBrowserRoot; assertEquals(StubMediaBrowserService.MEDIA_ID_ROOT, browserRoot.getRootId()); assertEquals(StubMediaBrowserService.EXTRAS_VALUE, browserRoot.getExtras().getString(StubMediaBrowserService.EXTRAS_KEY)); }",89ae6cff4510fae7cd658093b03e52689a434521,,testBrowserRoot(),12,6,"public void testGetSessionToken() { assertEquals(StubMediaBrowserService.sSession.getSessionToken(), mMediaBrowserService.getSessionToken()); }",5e93f445386e9713dd4a1af281ffdf4ffc70097d,testGetSessionToken(),138122,87,30
337409,luni_src_test_java_libcore_java_nio_file_Files2Test.java,31.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void test_newByteChannel() throws java.io.IOException { try (java.nio.channels.SeekableByteChannel sbc = java.nio.file.Files.newByteChannel(filesSetup.getTestPath())) { fail(); } catch (java.nio.file.NoSuchFileException expected) { } try (java.nio.channels.SeekableByteChannel sbc = java.nio.file.Files.newByteChannel(filesSetup.getDataFilePath())) { sbc.write(java.nio.ByteBuffer.allocate(10)); fail(); } catch (java.nio.channels.NonWritableChannelException expected) { } try (java.nio.channels.SeekableByteChannel sbc = java.nio.file.Files.newByteChannel(filesSetup.getDataFilePath())) { java.nio.ByteBuffer readBuffer = java.nio.ByteBuffer.allocate(10); int bytesReadCount = sbc.read(readBuffer); java.lang.String readData = new java.lang.String(java.util.Arrays.copyOf(readBuffer.array(), bytesReadCount), ""UTF-8""); assertEquals(libcore.java.nio.file.FilesSetup.TEST_FILE_DATA, readData); } }",754cd8594757c64e48bde2f86df79539d4754a09,,test_newByteChannel(),5,84,"@org.junit.Test public void test_newByteChannel() throws java.io.IOException { try (java.nio.channels.SeekableByteChannel sbc = java.nio.file.Files.newByteChannel(filesSetup.getTestPath())) { fail(); } catch (java.nio.file.NoSuchFileException expected) { } try (java.nio.channels.SeekableByteChannel sbc = java.nio.file.Files.newByteChannel(filesSetup.getDataFilePath())) { sbc.write(java.nio.ByteBuffer.allocate(10)); fail(); } catch (java.nio.channels.NonWritableChannelException expected) { } try (java.nio.channels.SeekableByteChannel sbc = java.nio.file.Files.newByteChannel(filesSetup.getDataFilePath())) { java.nio.ByteBuffer readBuffer = java.nio.ByteBuffer.allocate(10); int bytesReadCount = sbc.read(readBuffer); java.lang.String readData = new java.lang.String(java.util.Arrays.copyOf(readBuffer.array(), bytesReadCount), java.nio.charset.StandardCharsets.UTF_8); assertEquals(libcore.java.nio.file.FilesSetup.TEST_FILE_DATA, readData); } }",b9d78d9dce92d5522db022782d8b3cdb5696cb18,test_newByteChannel(),336370,249,256
577942,telecomm_java_android_telecom_ConnectionService.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void deflect(java.lang.String callId, java.lang.String number) { android.telecom.Log.d(this, ""deflect %s - %s"", callId, number); findConnectionForAction(callId, ""deflect"").onDeflect(number); }",3056d562e0751d29870a0e6926f0b8b7bd09477c,,"deflect(java.lang.String,java.lang.String)",7,52,"private void deflect(java.lang.String callId, android.net.Uri address) { android.telecom.Log.d(this, ""deflect %s"", callId); findConnectionForAction(callId, ""deflect"").onDeflect(address); }",9d79fdc45f9391abde9dbf1c7ebe79616397b8df,"deflect(java.lang.String,android.net.Uri)",200380,70,65
212127,test_564-checker-bitcount_src_Main.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static int bitCountLong(long x) { return java.lang.Long.bitCount(x); },c512f8eb401db9e489a22a6fa2c42038bad3dd6d,,bitCountLong(long),3,4,private static int $noinline$BitCountLong(long x) { if (Main.doThrow) { throw new java.lang.Error(); } return java.lang.Long.bitCount(x); },4a61f0bf1eac9ab3b6094f9788fe263a45aaa18f,$noinline$BitCountLong(long),55345,23,44
460596,core_java_android_bluetooth_BluetoothHeadset.java,13.0,"public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { if (android.bluetooth.BluetoothHeadset.VDBG) android.bluetooth.BluetoothHeadset.log(""getConnectedDevices()""); if (((mService) != null) && (isEnabled())) { try { return mService.getConnectedDevices(); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); } } if ((mService) == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, ""Proxy not attached to service""); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); }",b0e1aa1356abcd8d6ac143eb6eec008d8d48a163,"public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { if (android.bluetooth.BluetoothHeadset.VDBG) android.bluetooth.BluetoothHeadset.log(""getConnectedDevices()""); final android.bluetooth.IBluetoothHeadset service = mService; if ((service != null) && (isEnabled())) { try { return mService.getConnectedDevices(); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); } } if (service == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, ""Proxy not attached to service""); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); }",d9ece699243f0eb4093bb19415a40b212ea5a7d5,getConnectedDevices(),getConnectedDevices(),17,13,"@java.lang.Override public java.util.List<android.bluetooth.BluetoothDevice> getConnectedDevices() { if (android.bluetooth.BluetoothHeadset.VDBG) android.bluetooth.BluetoothHeadset.log(""getConnectedDevices()""); final android.bluetooth.IBluetoothHeadset service = mService; if ((service != null) && (isEnabled())) { try { return service.getConnectedDevices(); } catch (android.os.RemoteException e) { android.util.Log.e(android.bluetooth.BluetoothHeadset.TAG, android.util.Log.getStackTraceString(new java.lang.Throwable())); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); } } if (service == null) android.util.Log.w(android.bluetooth.BluetoothHeadset.TAG, ""Proxy not attached to service""); return new java.util.ArrayList<android.bluetooth.BluetoothDevice>(); }",d342c02c0f374d74a093c99347e45aaa2b91d17e,getConnectedDevices(),41172,190,195
89697,build-system_builder_src_main_java_com_android_builder_sdk_SdkLoader.java,,,,@com.android.annotations.NonNull java.util.List<java.io.File> getRepositories();,9ded965f49fdd90f63856e8562fef581e75357df,,getRepositories(),5,1,@com.android.annotations.NonNull com.google.common.collect.ImmutableList<java.io.File> getRepositories();,e4301d7e86ac2afe1aa3dba4a757f8ec3e2870a0,getRepositories(),206497,23,27
83824,chromium_java_com_android_webview_chromium_WebViewChromium.java,23.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean executeHardwareAction(java.lang.Runnable action) { return mWebView.executeHardwareAction(action); },39a52645bd1130d850dd497f1e438f9a1375cb89,,executeHardwareAction(java.lang.Runnable),4,40,public boolean executeHardwareAction(java.lang.Runnable action) { return mWebView.executeHardwareAction(action); },5c57b61a8d3fcd06a3200c2aad461d6216432286,executeHardwareAction(java.lang.Runnable),259462,30,24
160082,asset-studio_src_main_java_com_android_assetstudiolib_vectordrawable_VdOverrideInfo.java,,,,public void setWidth(int mWidth) { this.mWidth = mWidth; },4ce4adc4e564371ea9acb57dd96a3fe563cfc9f3,,setWidth(int),6,7,public void setWidth(int width) { mWidth = width; },8ce70e6b2b8b44b886f9534a634c5ba4c55a69eb,setWidth(int),410173,19,15
247700,services_core_java_com_android_server_MountService.java,133.0,"private void onCleanupUser(int userId) { android.util.Slog.d(com.android.server.MountService.TAG, (""onCleanupUser "" + userId)); try { mConnector.execute(""volume"", ""user_stopped"", userId); } catch (com.android.server.NativeDaemonConnectorException ignored) { } synchronized(mVolumes) { mStartedUsers = com.android.internal.util.ArrayUtils.removeInt(mStartedUsers, userId); } }",a48287ffc46a0bd4f79b4664a69aa50e3dd98a1b,"private void onCleanupUser(int userId) { android.util.Slog.d(com.android.server.MountService.TAG, (""onCleanupUser "" + userId)); try { mConnector.execute(""volume"", ""user_stopped"", userId); } catch (com.android.server.NativeDaemonConnectorException ignored) { } synchronized(mLock) { mStartedUsers = com.android.internal.util.ArrayUtils.removeInt(mStartedUsers, userId); } }",0c55bd4d7aac1e648f97c78440b9d5591427f458,onCleanupUser(int),onCleanupUser(int),5,148,"private void onCleanupUser(int userId) { android.util.Slog.d(com.android.server.MountService.TAG, (""onCleanupUser "" + userId)); try { mConnector.execute(""volume"", ""user_stopped"", userId); } catch (com.android.server.NativeDaemonConnectorException ignored) { } synchronized(mLock) { mSystemUnlockedUsers = com.android.internal.util.ArrayUtils.removeInt(mSystemUnlockedUsers, userId); } }",03ced156ae9de6167150c6e70de064c728333027,onCleanupUser(int),92336,104,108
186130,jack-tests_tests_com_android_jack_java8_GwtTest.java,3.0,"@org.junit.Test public void testDefaultInterfaceMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_28).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",0ca2e0ffc717142b5f8a8bce6daddbebacdd293e,"@org.junit.Test public void testDefaultInterfaceMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_28).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",21ea97bf45b2e1def54bfdb6b32a55f9bfd98c40,testDefaultInterfaceMethod(),testDefaultInterfaceMethod(),7,3,@org.junit.Test public void testDefaultInterfaceMethod() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_28).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },30c6467cec2f76e488bab0625ceb7f532b233186,testDefaultInterfaceMethod(),466254,86,60
325809,src_com_android_bluetooth_btservice_AdapterProperties.java,41.0,"void discoveryStateChangeCallback(int state) { infoLog((""Callback:discoveryStateChangeCallback with state:"" + state)); synchronized(mObject) { android.content.Intent intent; if (state == (AbstractionLayer.BT_DISCOVERY_STOPPED)) { mDiscovering = false; intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_FINISHED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } else if (state == (AbstractionLayer.BT_DISCOVERY_STARTED)) { mDiscovering = true; intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_STARTED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } } }",d36856ba5585a553edd61ed4819b891ba917694c,"void discoveryStateChangeCallback(int state) { infoLog((""Callback:discoveryStateChangeCallback with state:"" + state)); synchronized(mObject) { android.content.Intent intent; if (state == (AbstractionLayer.BT_DISCOVERY_STOPPED)) { mDiscovering = false; intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_FINISHED); } else if (state == (AbstractionLayer.BT_DISCOVERY_STARTED)) { mDiscovering = true; intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_STARTED); } mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } }",fdf47ff8dd3f4620b2775f890b1753ed923201fd,discoveryStateChangeCallback(int),discoveryStateChangeCallback(int),5,44,"void discoveryStateChangeCallback(int state) { infoLog((""Callback:discoveryStateChangeCallback with state:"" + state)); synchronized(mObject) { android.content.Intent intent; if (state == (AbstractionLayer.BT_DISCOVERY_STOPPED)) { mDiscovering = false; mDiscoveryEndMs = java.lang.System.currentTimeMillis(); intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_FINISHED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } else if (state == (AbstractionLayer.BT_DISCOVERY_STARTED)) { mDiscovering = true; mDiscoveryEndMs = (java.lang.System.currentTimeMillis()) + (com.android.bluetooth.btservice.AdapterProperties.DEFAULT_DISCOVERY_TIMEOUT_MS); intent = new android.content.Intent(android.bluetooth.BluetoothAdapter.ACTION_DISCOVERY_STARTED); mService.sendBroadcast(intent, mService.BLUETOOTH_PERM); } } }",f598a60c64bf38f6bf845d83283be2e9821772fe,discoveryStateChangeCallback(int),37731,159,231
588602,core_tests_hosttests_test-apps_MultiDexLegacyTestServicesTests2_src_com_android_framework_multidexlegacytestservices_test2_ServicesTests.java,,,,"private void tamperAllOdex() throws java.io.IOException { android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, (""Tamper extracted zip files by overwriting all content but the central directory"" + "" by \'\\0\'s."")); byte[] zeros = new byte[4 * 1024]; int savedSizeForOdexHeader = 80; for (java.io.File odex : getSecondaryFolder().listFiles(new com.android.framework.multidexlegacytestservices.test2.ServicesTests.ExtensionFilter("".dex""))) { long fileLength = odex.length(); junit.framework.Assert.assertTrue((fileLength > ((zeros.length) + savedSizeForOdexHeader))); odex.setWritable(true); java.io.RandomAccessFile raf = new java.io.RandomAccessFile(odex, ""rw""); try { raf.seek(savedSizeForOdexHeader); raf.write(zeros, 0, zeros.length); } finally { raf.close(); } } }",2d1645e266c4a60c05b47c84b4feb81ad688180b,,tamperAllOdex(),7,19,"private void tamperAllOdex() throws java.io.IOException { android.util.Log.i(com.android.framework.multidexlegacytestservices.test2.ServicesTests.TAG, ""Tamper odex files by overwriting some content by \'\\0\'s.""); byte[] zeros = new byte[4 * 1024]; int savedSizeForOdexHeader = 80; for (java.io.File odex : getSecondaryFolder().listFiles(new com.android.framework.multidexlegacytestservices.test2.ServicesTests.ExtensionFilter("".dex""))) { long fileLength = odex.length(); junit.framework.Assert.assertTrue((fileLength > ((zeros.length) + savedSizeForOdexHeader))); odex.setWritable(true); java.io.RandomAccessFile raf = new java.io.RandomAccessFile(odex, ""rw""); try { raf.seek(savedSizeForOdexHeader); raf.write(zeros, 0, zeros.length); } finally { raf.close(); } } }",2e43ff82e5c03db2dc60b676d954ee4e9098cd72,tamperAllOdex(),443231,230,222
122533,jack_src_com_android_jack_lookup_JPhantomLookup.java,12.0,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JAnnotation getAnnotation(@javax.annotation.Nonnull java.lang.String signature) { com.android.jack.ir.ast.JAnnotation type; try { type = jackLookup.getAnnotation(signature); assert !(doesCacheContain(annotationCache, signature)); } catch (com.android.jack.lookup.JLookupException e) { synchronized(annotationCache) { type = annotationCache.get(signature); if (type == null) { java.lang.String[] splitName = splitSignature(signature); com.android.jack.ir.ast.JPackage pack = getPackage(splitName); type = pack.getPhantomAnnotation(splitName[((splitName.length) - 1)]); annotationCache.put(signature, type); } } } return type; }",f275e29a9d070ecdba3a0b7bbfd7ceeca3bf3436,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JAnnotation getAnnotation(@javax.annotation.Nonnull java.lang.String signature) { return getTypeCommon(signature, annotationAdapter); }",78b6d91012e78d34ce3d2560d31c48aa848090a4,getAnnotation(java.lang.String),getAnnotation(java.lang.String),3,18,"@java.lang.Override @javax.annotation.Nonnull public com.android.jack.ir.ast.JAnnotation getAnnotation(@javax.annotation.Nonnull java.lang.String signature) { return getNonArrayType(signature, annotationAdapter); }",096c30d8ddc25bea3ac208eab860996ddd0b0483,getAnnotation(java.lang.String),272228,52,53
341683,jsr166-tests_src_test_java_jsr166_LinkedTransferQueueTest.java,10.0,"public void testInterruptedTimedPoll() throws java.lang.InterruptedException { final java.util.concurrent.BlockingQueue<java.lang.Integer> q = populatedQueue(jsr166.SIZE); final java.util.concurrent.CountDownLatch aboutToWait = new java.util.concurrent.CountDownLatch(1); java.lang.Thread t = newStartedThread(new jsr166.CheckedRunnable() { public void realRun() throws java.lang.InterruptedException { long startTime = java.lang.System.nanoTime(); for (int i = 0; i < (SIZE); ++i) assertEquals(i, ((int) (q.poll(jsr166.LONG_DELAY_MS, java.util.concurrent.TimeUnit.MILLISECONDS)))); aboutToWait.countDown(); try { q.poll(jsr166.LONG_DELAY_MS, java.util.concurrent.TimeUnit.MILLISECONDS); shouldThrow(); } catch (java.lang.InterruptedException success) { } assertTrue(((millisElapsedSince(startTime)) < (LONG_DELAY_MS))); } }); aboutToWait.await(); waitForThreadToEnterWaitState(t); t.interrupt(); awaitTermination(t); checkEmpty(q); }",8a53c2edcd1833ca353b43d71024c13f835855cc,"public void testInterruptedTimedPoll() throws java.lang.InterruptedException { final java.util.concurrent.BlockingQueue<java.lang.Integer> q = populatedQueue(jsr166.SIZE); final java.util.concurrent.CountDownLatch aboutToWait = new java.util.concurrent.CountDownLatch(1); java.lang.Thread t = newStartedThread(new jsr166.CheckedRunnable() { public void realRun() throws java.lang.InterruptedException { long startTime = java.lang.System.nanoTime(); for (int i = 0; i < (SIZE); ++i) assertEquals(i, ((int) (q.poll(jsr166.LONG_DELAY_MS, java.util.concurrent.TimeUnit.MILLISECONDS)))); aboutToWait.countDown(); try { q.poll(jsr166.LONG_DELAY_MS, java.util.concurrent.TimeUnit.MILLISECONDS); shouldThrow(); } catch (java.lang.InterruptedException success) { } assertTrue(((millisElapsedSince(startTime)) < (LONG_DELAY_MS))); } }); aboutToWait.await(); waitForThreadToEnterState(t, jsr166.LONG_DELAY_MS, java.lang.Thread.State.TIMED_WAITING); t.interrupt(); awaitTermination(t); checkEmpty(q); }",0cf478b86114563e55bdce9ed819773b1cdc0978,testInterruptedTimedPoll(),testInterruptedTimedPoll(),3,10,"public void testInterruptedTimedPoll() throws java.lang.InterruptedException { final java.util.concurrent.BlockingQueue<java.lang.Integer> q = populatedQueue(jsr166.SIZE); final java.util.concurrent.CountDownLatch aboutToWait = new java.util.concurrent.CountDownLatch(1); java.lang.Thread t = newStartedThread(new jsr166.CheckedRunnable() { public void realRun() throws java.lang.InterruptedException { long startTime = java.lang.System.nanoTime(); for (int i = 0; i < (SIZE); ++i) assertEquals(i, ((int) (q.poll(jsr166.LONG_DELAY_MS, java.util.concurrent.TimeUnit.MILLISECONDS)))); aboutToWait.countDown(); try { q.poll(jsr166.LONG_DELAY_MS, java.util.concurrent.TimeUnit.MILLISECONDS); shouldThrow(); } catch (java.lang.InterruptedException success) { } assertTrue(((millisElapsedSince(startTime)) < (LONG_DELAY_MS))); } }); aboutToWait.await(); waitForThreadToEnterWaitState(t); t.interrupt(); awaitTermination(t); checkEmpty(q); }",8a53c2edcd1833ca353b43d71024c13f835855cc,testInterruptedTimedPoll(),62885,274,252
249721,core_java_com_android_internal_os_RuntimeInit.java,16.0,"private static final void commonInit() { if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, ""Entered RuntimeInit!""); java.lang.Thread.setDefaultUncaughtExceptionHandler(new com.android.internal.os.RuntimeInit.UncaughtHandler()); org.apache.harmony.luni.internal.util.TimezoneGetter.setInstance(new org.apache.harmony.luni.internal.util.TimezoneGetter() { @java.lang.Override public java.lang.String getId() { return android.os.SystemProperties.get(""persist.sys.timezone""); } }); java.util.TimeZone.setDefault(null); java.util.logging.LogManager.getLogManager().reset(); new com.android.internal.logging.AndroidConfig(); java.lang.String userAgent = com.android.internal.os.RuntimeInit.getDefaultUserAgent(); java.lang.System.setProperty(""http.agent"", userAgent); com.android.server.NetworkManagementSocketTagger.install(); java.lang.String trace = android.os.SystemProperties.get(""ro.kernel.android.tracing""); if (trace.equals(""1"")) { android.util.Slog.i(com.android.internal.os.RuntimeInit.TAG, ""NOTE: emulator trace profiling enabled""); android.os.Debug.enableEmulatorTraceOutput(); } com.android.internal.os.RuntimeInit.initialized = true; }",0210cd3c763386abdedc741ac42ed808caf10a7b,"private static final void commonInit() { if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, ""Entered RuntimeInit!""); java.lang.Thread.setInitialUncaughtExceptionHandler(new com.android.internal.os.RuntimeInit.LoggingHandler()); java.lang.Thread.setDefaultUncaughtExceptionHandler(new com.android.internal.os.RuntimeInit.KillApplicationHandler()); org.apache.harmony.luni.internal.util.TimezoneGetter.setInstance(new org.apache.harmony.luni.internal.util.TimezoneGetter() { @java.lang.Override public java.lang.String getId() { return android.os.SystemProperties.get(""persist.sys.timezone""); } }); java.util.TimeZone.setDefault(null); java.util.logging.LogManager.getLogManager().reset(); new com.android.internal.logging.AndroidConfig(); java.lang.String userAgent = com.android.internal.os.RuntimeInit.getDefaultUserAgent(); java.lang.System.setProperty(""http.agent"", userAgent); com.android.server.NetworkManagementSocketTagger.install(); java.lang.String trace = android.os.SystemProperties.get(""ro.kernel.android.tracing""); if (trace.equals(""1"")) { android.util.Slog.i(com.android.internal.os.RuntimeInit.TAG, ""NOTE: emulator trace profiling enabled""); android.os.Debug.enableEmulatorTraceOutput(); } com.android.internal.os.RuntimeInit.initialized = true; }",4586552f2443097dcdf633c6b40ef65a0919a39a,commonInit(),commonInit(),8,16,"private static final void commonInit() { if (com.android.internal.os.RuntimeInit.DEBUG) android.util.Slog.d(com.android.internal.os.RuntimeInit.TAG, ""Entered RuntimeInit!""); java.lang.Thread.setUncaughtExceptionPreHandler(new com.android.internal.os.RuntimeInit.LoggingHandler()); java.lang.Thread.setDefaultUncaughtExceptionHandler(new com.android.internal.os.RuntimeInit.KillApplicationHandler()); org.apache.harmony.luni.internal.util.TimezoneGetter.setInstance(new org.apache.harmony.luni.internal.util.TimezoneGetter() { @java.lang.Override public java.lang.String getId() { return android.os.SystemProperties.get(""persist.sys.timezone""); } }); java.util.TimeZone.setDefault(null); java.util.logging.LogManager.getLogManager().reset(); new com.android.internal.logging.AndroidConfig(); java.lang.String userAgent = com.android.internal.os.RuntimeInit.getDefaultUserAgent(); java.lang.System.setProperty(""http.agent"", userAgent); com.android.server.NetworkManagementSocketTagger.install(); java.lang.String trace = android.os.SystemProperties.get(""ro.kernel.android.tracing""); if (trace.equals(""1"")) { android.util.Slog.i(com.android.internal.os.RuntimeInit.TAG, ""NOTE: emulator trace profiling enabled""); android.os.Debug.enableEmulatorTraceOutput(); } com.android.internal.os.RuntimeInit.initialized = true; }",23520912c2ba2564c5eeba6272c4b66c3e3b93dd,commonInit(),45708,352,354
91995,luni_src_main_java_libcore_io_Posix.java,8.0,"public native int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws java.io.InterruptedIOException, libcore.io.ErrnoException;",e3bf4520a5ac4d9a3cb9303c900ff356dc4838cc,"public native int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws android.os.ErrnoException, java.io.InterruptedIOException;",728db671a095234f74a4028b0c03fb2605e47aba,"writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])","writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])",3,9,"public native int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws android.system.ErrnoException, java.io.InterruptedIOException;",cc747d7896bc712fdccd38745ab3481328e892b6,"writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])",169888,46,46
123137,rs_java_android_renderscript_RenderScript.java,185.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"synchronized void nScriptIntrinsicBLAS_SGEMM(long id, int TransA, int TransB, int M, int N, int K, float alpha, long A, long B, float beta, long C) { validate(); rsnScriptIntrinsicBLAS_SGEMM(mContext, id, TransA, TransB, M, N, K, alpha, A, B, beta, C); }",f91d88b1b7159fc6dbca7f45f4076a08d010aec8,,"nScriptIntrinsicBLAS_SGEMM(long,int,int,int,int,int,float,long,long,float,long)",6,206,"synchronized void nScriptIntrinsicBLAS_Single(long id, int func, int TransA, int TransB, int Side, int Uplo, int Diag, int M, int N, int K, float alpha, long A, long B, float beta, long C, int incX, int incY, int KL, int KU) { validate(); rsnScriptIntrinsicBLAS_Single(mContext, id, func, TransA, TransB, Side, Uplo, Diag, M, N, K, alpha, A, B, beta, C, incX, incY, KL, KU); }",0c70d33f3392e65b62b116892b14e56f2dea0285,"nScriptIntrinsicBLAS_Single(long,int,int,int,int,int,int,int,int,int,float,long,long,float,long,int,int,int,int)",410031,92,146
43870,ddms_libs_ddmuilib_src_com_android_ddmuilib_logcat_LogCatPanel.java,86.0,@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { if (!(mAutoScrollLock)) { return; } boolean isAtBottom = ((vbar.getThumb()) + (vbar.getSelection())) == (vbar.getMaximum()); setScrollToLatestLog(isAtBottom); mScrollLockCheckBox.setSelection(isAtBottom); },8d1503600a966049a5988b254f580896b4406913,@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { if (!(mAutoScrollLock)) { return; } int diff = ((vbar.getThumb()) + (vbar.getSelection())) - (vbar.getMaximum()); boolean isAtBottom = (java.lang.Math.abs(diff)) < 100; if (isAtBottom != (mShouldScrollToLatestLog)) { setScrollToLatestLog(isAtBottom); mScrollLockCheckBox.setSelection(isAtBottom); } },ec44d378cc5a264b72502704cf25b4ea48098869,widgetSelected(org.eclipse.swt.events.SelectionEvent),widgetSelected(org.eclipse.swt.events.SelectionEvent),2,85,@java.lang.Override public void widgetSelected(org.eclipse.swt.events.SelectionEvent e) { if (!(mAutoScrollLock)) { return; } int diff = ((vbar.getThumb()) + (vbar.getSelection())) - (vbar.getMaximum()); boolean isAtBottom = (java.lang.Math.abs(diff)) < ((vbar.getThumb()) / 2); if (isAtBottom != (mShouldScrollToLatestLog)) { setScrollToLatestLog(isAtBottom); mScrollLockCheckBox.setSelection(isAtBottom); } },d06e8fd8e5e70211f99a5ad4897d95192724c466,widgetSelected(org.eclipse.swt.events.SelectionEvent),224066,115,125
118993,jack-tests_tests_com_android_jack_multidex_MultiDexTests.java,0.0,"@org.junit.Test public void legacyAppTest003() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder(""multidex/test003""); java.io.File out = com.android.jack.TestTools.createTempDir(""out"", """"); com.android.jack.Options appOptions = new com.android.jack.Options(); appOptions.addProperty(MultiDexLegacy.MULTIDEX_LEGACY.getName(), ""true""); appOptions.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), ""minimal-multidex""); com.android.jack.TestTools.compileSourceToDex(appOptions, testFolder, (((((com.android.jack.TestTools.getDefaultBootclasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.annotations.getPath())) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())), out, false); java.io.File outList = getListingOfDex(new java.io.File(out, ""classes.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-003-1.txt""), outList); java.io.File outList2 = getListingOfDex(new java.io.File(out, ""classes2.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-003-2.txt""), outList2); junit.framework.Assert.assertFalse(new java.io.File(out, ""classes3.dex"").exists()); return; }",6a5d8693a1368afd618175aaf0f88f9ac2352352,"@org.junit.Test public void legacyAppTest003() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder(""multidex/test003""); java.io.File out = com.android.jack.TestTools.createTempDir(""out"", """"); com.android.jack.Options appOptions = new com.android.jack.Options(); appOptions.addProperty(MultiDexLegacy.MULTIDEX_LEGACY.getName(), ""true""); appOptions.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), ""minimal-multidex""); com.android.jack.TestTools.compileSourceToDex(appOptions, testFolder, (((((com.android.jack.TestTools.getDefaultBootclasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.annotations.getPath())) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())), out, false); java.lang.String outList = getListingOfDex(new java.io.File(out, ""classes.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-003-1.txt""), outList); java.lang.String outList2 = getListingOfDex(new java.io.File(out, ""classes2.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-003-2.txt""), outList2); junit.framework.Assert.assertFalse(new java.io.File(out, ""classes3.dex"").exists()); return; }",1f3021663036d01ea7f3694e83aaa00ed70ad127,legacyAppTest003(),legacyAppTest003(),4,0,"@org.junit.Test public void annotatedTest003() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder(""multidex/test003""); java.io.File out = com.android.jack.TestTools.createTempDir(""out"", """"); com.android.jack.Options appOptions = new com.android.jack.Options(); appOptions.addProperty(MultiDexLegacy.MULTIDEX_LEGACY.getName(), ""true""); appOptions.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), ""minimal-multidex""); com.android.jack.TestTools.compileSourceToDex(appOptions, testFolder, (((((com.android.jack.TestTools.getDefaultClasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.annotations.getPath())) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())), out, false); java.lang.String outList = getListingOfDex(new java.io.File(out, ""classes.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-003-1.txt""), outList); java.lang.String outList2 = getListingOfDex(new java.io.File(out, ""classes2.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-003-2.txt""), outList2); junit.framework.Assert.assertFalse(new java.io.File(out, ""classes3.dex"").exists()); return; }",3cf130c8b746e0e354dd396e6b3ecfddc1e86008,annotatedTest003(),300022,392,390
131630,lint_libs_lint-api_src_main_java_com_android_tools_lint_detector_api_Detector.java,2.0,"public void checkClass(@com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context, @com.android.annotations.Nullable lombok.ast.ClassDeclaration declaration, @com.android.annotations.NonNull lombok.ast.Node node, @com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedClass resolvedClass) { }",7ab676259d8e159042663097cc00f76616c5f01b,"public void checkClass(@com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context, @com.android.annotations.Nullable com.android.tools.lint.detector.api.ClassDeclaration declaration, @com.android.annotations.NonNull com.android.tools.lint.detector.api.Node node, @com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedClass resolvedClass) { }",45d5eea4074eac5c377442b0af1d1cc050b138b4,"checkClass(com.android.tools.lint.detector.api.JavaContext,lombok.ast.ClassDeclaration,lombok.ast.Node,com.android.tools.lint.client.api.JavaParser.ResolvedClass)","checkClass(com.android.tools.lint.detector.api.JavaContext,com.android.tools.lint.detector.api.ClassDeclaration,com.android.tools.lint.detector.api.Node,com.android.tools.lint.client.api.JavaParser.ResolvedClass)",2,6,"public void checkClass(@com.android.annotations.NonNull com.android.tools.lint.detector.api.JavaContext context, @com.android.annotations.Nullable lombok.ast.ClassDeclaration declaration, @com.android.annotations.NonNull lombok.ast.Node node, @com.android.annotations.NonNull com.android.tools.lint.client.api.JavaParser.ResolvedClass resolvedClass) { }",7ab676259d8e159042663097cc00f76616c5f01b,"checkClass(com.android.tools.lint.detector.api.JavaContext,lombok.ast.ClassDeclaration,lombok.ast.Node,com.android.tools.lint.client.api.JavaParser.ResolvedClass)",491685,112,92
81416,tests_tests_renderscript_src_android_renderscript_cts_TestStep.java,,,,"private void checkStepFloat2Float2() { android.renderscript.Allocation inEdge = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inEdge, 35, 0.0F, 1.0F); android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInV(inV); script.forEach_testStepFloat2Float2(inEdge, out); verifyResultsStepFloat2Float2(inEdge, inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testStepFloat2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInV(inV); scriptRelaxed.forEach_testStepFloat2Float2(inEdge, out); verifyResultsStepFloat2Float2(inEdge, inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testStepFloat2Float2: "" + (e.toString()))); } }",ff64b45fd465c2d31cdd30dd59120a5345cd7ce2,,checkStepFloat2Float2(),9,14,"private void checkStepFloat2Float2Float2() { android.renderscript.Allocation inEdge = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 3276652331650944610L); android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, 3276652331650944610L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.set_gAllocInV(inV); script.forEach_testStepFloat2Float2Float2(inEdge, out); verifyResultsStepFloat2Float2Float2(inEdge, inV, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testStepFloat2Float2Float2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInV(inV); scriptRelaxed.forEach_testStepFloat2Float2Float2(inEdge, out); verifyResultsStepFloat2Float2Float2(inEdge, inV, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testStepFloat2Float2Float2: "" + (e.toString()))); } }",3042e33fec2e1836be9d48dae724c1c33b3ac5d4,checkStepFloat2Float2Float2(),143519,436,386
61665,gradle-model_src_test_java_com_android_build_gradle_model_AndroidProjectTest.java,34.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.Map<java.lang.String, com.android.build.gradle.model.AndroidProjectTest.ProjectData> getModelForMultiProject(java.lang.String projectName) throws java.lang.Exception { org.gradle.tooling.GradleConnector connector = org.gradle.tooling.GradleConnector.newConnector(); java.io.File projectDir = new java.io.File(getTestDir(), projectName); connector.forProjectDirectory(projectDir); java.util.Map<java.lang.String, com.android.build.gradle.model.AndroidProjectTest.ProjectData> map = com.google.common.collect.Maps.newHashMap(); org.gradle.tooling.ProjectConnection connection = connector.connect(); try { org.gradle.tooling.model.GradleProject model = connection.getModel(org.gradle.tooling.model.GradleProject.class); assertNotNull(""Model Object null-check"", model); for (org.gradle.tooling.model.GradleProject child : model.getChildren()) { java.lang.String path = child.getPath(); java.lang.String name = path.substring(1); java.io.File childDir = new java.io.File(projectDir, name); org.gradle.tooling.GradleConnector childConnector = org.gradle.tooling.GradleConnector.newConnector(); childConnector.forProjectDirectory(childDir); org.gradle.tooling.ProjectConnection childConnection = childConnector.connect(); try { com.android.build.gradle.model.AndroidProject androidProject = childConnection.getModel(com.android.build.gradle.model.AndroidProject.class); assertNotNull((""Model Object null-check for "" + path), androidProject); assertEquals((""Model Name for "" + path), name, androidProject.getName()); assertEquals(""Model version"", com.android.build.gradle.model.AndroidProjectTest.MODEL_VERSION, androidProject.getModelVersion()); map.put(path, com.android.build.gradle.model.AndroidProjectTest.ProjectData.create(childDir, androidProject)); } catch (org.gradle.tooling.UnknownModelException e) { } finally { childConnection.close(); } } } catch (java.lang.Exception e) { e.printStackTrace(); } finally { connection.close(); } return map; }",228ae6c3b8f5a4f3aa13a95e85529e1f4b8b6668,,getModelForMultiProject(java.lang.String),2,29,"private java.util.Map<java.lang.String, com.android.build.gradle.model.AndroidProjectTest.ProjectData> getModelForMultiProject(java.lang.String projectName) throws java.lang.Exception { org.gradle.tooling.GradleConnector connector = org.gradle.tooling.GradleConnector.newConnector(); java.io.File projectDir = new java.io.File(getTestDir(), projectName); connector.forProjectDirectory(projectDir); java.util.Map<java.lang.String, com.android.build.gradle.model.AndroidProjectTest.ProjectData> map = com.google.common.collect.Maps.newHashMap(); org.gradle.tooling.ProjectConnection connection = connector.connect(); try { org.gradle.tooling.model.GradleProject model = connection.getModel(org.gradle.tooling.model.GradleProject.class); assertNotNull(""Model Object null-check"", model); for (org.gradle.tooling.model.GradleProject child : model.getChildren()) { java.lang.String path = child.getPath(); java.lang.String name = path.substring(1); java.io.File childDir = new java.io.File(projectDir, name); org.gradle.tooling.GradleConnector childConnector = org.gradle.tooling.GradleConnector.newConnector(); childConnector.forProjectDirectory(childDir); org.gradle.tooling.ProjectConnection childConnection = childConnector.connect(); try { com.android.build.gradle.model.AndroidProject androidProject = childConnection.getModel(com.android.build.gradle.model.AndroidProject.class); assertNotNull((""Model Object null-check for "" + path), androidProject); assertEquals((""Model Name for "" + path), name, androidProject.getName()); assertEquals(""Model version"", com.android.build.gradle.model.AndroidProjectTest.MODEL_VERSION, androidProject.getModelVersion()); map.put(path, com.android.build.gradle.model.AndroidProjectTest.ProjectData.create(childDir, androidProject)); } catch (org.gradle.tooling.UnknownModelException e) { } finally { childConnection.close(); } } } finally { connection.close(); } return map; }",fb3da1fb3e39e9cc2a91ecaa53599c0b79c0b01f,getModelForMultiProject(java.lang.String),185779,503,488
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,33.0,"public void testAesCbcHmacSha512Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, getAuthKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",0005cab101697fd99c372092318ae9028ff211c2,"public void testAesCbcHmacSha512Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",099cf344b6d7abecfded0f86e59dedacdc6a34b2,testAesCbcHmacSha512Udp4UdpEncap(),testAesCbcHmacSha512Udp4UdpEncap(),9,35,"public void testAesCbcHmacSha512Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA512, android.net.cts.IpSecManagerTest.getKey(512), 256); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",97f7071706b79d3e3009b071999de756a0ad6523,testAesCbcHmacSha512Udp4UdpEncap(),1910,216,216
143278,luni_src_main_java_libcore_net_NetworkSecurityPolicy.java,,,,public static synchronized boolean isCleartextTrafficPermitted() { return libcore.net.NetworkSecurityPolicy.cleartextTrafficPermitted; },69cdb3a9abb01d645078d376dd247c034900cbc5,,isCleartextTrafficPermitted(),7,1,public static boolean isCleartextTrafficPermitted() { return libcore.net.NetworkSecurityPolicy.cleartextTrafficPermitted; },8d65168141daf8c33f083eae5ae85b03ac598a0e,isCleartextTrafficPermitted(),260519,26,25
43382,lint_libs_lint_checks_tests_src_com_android_tools_lint_checks_MissingClassDetectorTest.java,4.0,"public void testWrongSeparator2() throws java.lang.Exception { assertEquals((""AndroidManifest.xml:14: Error: Class referenced in the manifest, test.pkg.Foo.Bar, was not found in the project or the libraries [MissingRegistered]\n"" + ((((("" <activity\n"" + "" ^\n"") + ""AndroidManifest.xml:15: Warning: Use \'$\' instead of \'.\' for inner classes (or use only lowercase letters in package names) [InnerclassSeparator]\n"") + "" android:name=\"".Foo.Bar\""\n"") + "" ~~~~~~~~~~~~~~~~~~~~~~~\n"") + ""1 errors, 1 warnings\n"")), lintProject(""registration/AndroidManifestWrong2.xml=>AndroidManifest.xml"", ""bytecode/.classpath=>.classpath"", ""registration/Bar.java.txt=>src/test/pkg/Foo/Bar.java"")); }",193aeb8e111430de0a3fcfa0bb32f9256ebc52fb,"public void testWrongSeparator2() throws java.lang.Exception { assertEquals((""AndroidManifest.xml:14: Error: Class referenced in the manifest, test.pkg.Foo.Bar, was not found in the project or the libraries [MissingRegistered]\n"" + ((((("" <activity\n"" + "" ^\n"") + ""AndroidManifest.xml:15: Warning: Use \'$\' instead of \'.\' for inner classes (or use only lowercase letters in package names) [InnerclassSeparator]\n"") + "" android:name=\"".Foo.Bar\""\n"") + "" ~~~~~~~~~~~~~~~~~~~~~~~\n"") + ""1 errors, 1 warnings\n"")), lintProject(""registration/AndroidManifestWrong2.xml=>AndroidManifest.xml"", ""bytecode/.classpath=>.classpath"", ""apicheck/ApiCallTest.class.data=>bin/classes/foo/bar/ApiCallTest.class"", ""registration/Bar.java.txt=>src/test/pkg/Foo/Bar.java"")); }",1d62f5ec987651ba2ad8282933be4e8c430734d4,testWrongSeparator2(),testWrongSeparator2(),2,10,"public void testWrongSeparator2() throws java.lang.Exception { mScopes = null; assertEquals((""AndroidManifest.xml:14: Error: Class referenced in the manifest, test.pkg.Foo.Bar, was not found in the project or the libraries [MissingRegistered]\n"" + ((((("" <activity\n"" + "" ^\n"") + ""AndroidManifest.xml:15: Warning: Use \'$\' instead of \'.\' for inner classes (or use only lowercase letters in package names) [InnerclassSeparator]\n"") + "" android:name=\"".Foo.Bar\""\n"") + "" ~~~~~~~~~~~~~~~~~~~~~~~\n"") + ""1 errors, 1 warnings\n"")), lintProject(""registration/AndroidManifestWrong2.xml=>AndroidManifest.xml"", ""bytecode/.classpath=>.classpath"", ""apicheck/ApiCallTest.class.data=>bin/classes/foo/bar/ApiCallTest.class"", ""registration/Bar.java.txt=>src/test/pkg/Foo/Bar.java"")); }",3035a5bdcbca9fb8d2d4ec1e43df8d5a72e1636b,testWrongSeparator2(),76956,225,230
107813,jack_src_com_android_jack_ir_ast_JPrimitiveType.java,55.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean isValidParent(@javax.annotation.CheckForNull com.android.jack.ir.ast.JNode parent) { return ((((parent instanceof com.android.jack.ir.ast.JLocal) || (parent instanceof com.android.jack.ir.ast.JParameter)) || (parent instanceof com.android.jack.ir.ast.JMethod)) || (parent instanceof com.android.jack.ir.ast.JField)) || (parent instanceof com.android.jack.ir.ast.JCastOperation); },9b2337e944d05ceafe9f143b605337b1481dd0d7,,isValidParent(com.android.jack.ir.ast.JNode),6,0,"@java.lang.Override public void checkValidity() { if (!((((((parent) instanceof com.android.jack.ir.ast.JLocal) || ((parent) instanceof com.android.jack.ir.ast.JParameter)) || ((parent) instanceof com.android.jack.ir.ast.JMethod)) || ((parent) instanceof com.android.jack.ir.ast.JField)) || ((parent) instanceof com.android.jack.ir.ast.JCastOperation))) { throw new com.android.jack.ir.InternalCompilerException(this, ""Invalid parent""); } }",8deba94941b3586c8abbf4093e5e5ec781180280,checkValidity(),100898,119,133
174172,jack-tests_tests_com_android_jack_annotation_processor_AnnotationProcessorTests.java,2.0,"@org.junit.Test public void compileWithAnnotationProcessorNoAutoNoClasses_processorPath() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorPath(processors.getPath()); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); junit.framework.Assert.assertFalse(libOut.containsFileType(FileType.RSC)); try { libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(""Annotated2Duplicated"", '/')); junit.framework.Assert.fail(); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { } }",7333cfe642201cd13d35aaff8faff3f78815d658,"@org.junit.Test public void compileWithAnnotationProcessorNoAutoNoClasses_processorPath() throws java.lang.Exception { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> exclude = com.android.sched.util.collect.Lists.<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>create(com.android.jack.test.toolchain.JillBasedToolchain.class); com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, exclude); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorPath(processors.getPath()); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); junit.framework.Assert.assertFalse(libOut.containsFileType(FileType.RSC)); try { libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(""Annotated2Duplicated"", '/')); junit.framework.Assert.fail(); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { } }",3dc55f8808d4925e3727dc7035703d65963cb9c4,compileWithAnnotationProcessorNoAutoNoClasses_processorPath(),compileWithAnnotationProcessorNoAutoNoClasses_processorPath(),3,2,"@org.junit.Test public void compileWithAnnotationProcessorNoAutoNoClasses_processorPath() throws java.lang.Exception { java.util.List<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>> exclude = new java.util.ArrayList<java.lang.Class<? extends com.android.jack.test.toolchain.IToolchain>>(); exclude.add(com.android.jack.test.toolchain.JillBasedToolchain.class); com.android.jack.test.toolchain.JackBasedToolchain jack = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class, exclude); java.io.File jackOut = com.android.jack.test.toolchain.AbstractTestTools.createTempDir(); java.io.File processors = com.android.jack.annotation.processor.AnnotationProcessorTests.getNoConfigProcessors(); jack.setAnnotationProcessorPath(processors.getPath()); jack.addToClasspath(jack.getDefaultBootClasspath()); jack.srcToLib(jackOut, false, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATIONS_DIR, com.android.jack.annotation.processor.AnnotationProcessorTests.ANNOTATED_DIR); com.android.jack.library.InputJackLibrary libOut = openDirAsJackLibrary(jackOut); junit.framework.Assert.assertFalse(libOut.containsFileType(FileType.RSC)); try { libOut.getFile(FileType.JAYCE, new com.android.sched.vfs.VPath(""Annotated2Duplicated"", '/')); junit.framework.Assert.fail(); } catch (com.android.jack.library.FileTypeDoesNotExistException e) { } }",50c7de9a30ce42497d8c86115efaf60a1004e82c,compileWithAnnotationProcessorNoAutoNoClasses_processorPath(),251545,397,392
79530,luni_src_main_java_java_net_DatagramSocketImpl.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,protected void initClosed() { },b8b251d5cad60acca6bb45b966c362dfedaaf7c4,,initClosed(),11,18,protected void onClose() { },83774e1dba34d1afb800a3b70a3c746a13131407,onClose(),510833,7,7
501781,services_core_java_com_android_server_connectivity_NetdEventListenerService.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public synchronized void flushStatistics(java.util.List<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent> events) { for (int i = 0; i < (mNetworkMetrics.size()); i++) { android.net.metrics.ConnectStats stats = mNetworkMetrics.valueAt(i).connect; if ((stats.eventCount) == 0) { continue; } events.add(com.android.server.connectivity.IpConnectivityEventBuilder.toProto(stats)); } for (int i = 0; i < (mNetworkMetrics.size()); i++) { android.net.metrics.DnsEvent ev = mNetworkMetrics.valueAt(i).dns; if ((ev.eventCount) == 0) { continue; } events.add(com.android.server.connectivity.IpConnectivityEventBuilder.toProto(ev)); } for (int i = 0; i < (mWakeupStats.size()); i++) { events.add(com.android.server.connectivity.IpConnectivityEventBuilder.toProto(mWakeupStats.valueAt(i))); } mNetworkMetrics.clear(); mWakeupStats.clear(); },9a31064781d3ff0b4a7b2b2b57ab196a515dc35f,,flushStatistics(java.util.List),13,11,public synchronized void flushStatistics(java.util.List<com.android.server.connectivity.metrics.nano.IpConnectivityLogClass.IpConnectivityEvent> events) { for (int i = 0; i < (mNetworkMetrics.size()); i++) { android.net.metrics.ConnectStats stats = mNetworkMetrics.valueAt(i).connectMetrics; if ((stats.eventCount) == 0) { continue; } events.add(com.android.server.connectivity.IpConnectivityEventBuilder.toProto(stats)); } for (int i = 0; i < (mNetworkMetrics.size()); i++) { android.net.metrics.DnsEvent ev = mNetworkMetrics.valueAt(i).dnsMetrics; if ((ev.eventCount) == 0) { continue; } events.add(com.android.server.connectivity.IpConnectivityEventBuilder.toProto(ev)); } for (int i = 0; i < (mWakeupStats.size()); i++) { events.add(com.android.server.connectivity.IpConnectivityEventBuilder.toProto(mWakeupStats.valueAt(i))); } mNetworkMetrics.clear(); mWakeupStats.clear(); },ee1be9be8c87ad9a37a26ba328e677873d6bee89,flushStatistics(java.util.List),397649,256,258
252630,jack_src_com_android_jack_cfg_CfgBuilder.java,1.0,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JSwitchStatement switchStatement) { super.visit(switchStatement); com.android.jack.cfg.SwitchBasicBlock switchBlock = new com.android.jack.cfg.SwitchBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(switchBlock); java.util.List<com.android.jack.ir.ast.JCaseStatement> cases = switchStatement.getCases(); java.util.Collections.sort(cases, new com.android.jack.cfg.CfgBuilder.JCaseStatementComparator()); com.android.jack.ir.ast.JStatement defaultCase = switchStatement.getDefaultCase(); if (defaultCase == null) { defaultCase = com.android.jack.util.ControlFlowHelper.getNextStatement(switchStatement); } forwardBranchResolver.addSwitchBasicBlock(switchBlock, cases, defaultCase); return true; }",fc5ad80291e5bffa7dc357df2851708a55978eac,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JSwitchStatement switchStatement) { super.visit(switchStatement); com.android.jack.cfg.SwitchBasicBlock switchBlock = new com.android.jack.cfg.SwitchBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(switchBlock); java.util.List<com.android.jack.ir.ast.JCaseStatement> cases = switchStatement.getCases(); java.util.Collections.sort(cases, new com.android.jack.cfg.CfgBuilder.JCaseStatementComparator()); com.android.jack.ir.ast.JStatement defaultCase = switchStatement.getDefaultCase(); if (defaultCase == null) { defaultCase = com.android.jack.util.ControlFlowHelper.getNextStatement(switchStatement); assert defaultCase != null; } forwardBranchResolver.addSwitchBasicBlock(switchBlock, cases, defaultCase); return true; }",3b0850f636e1c1f2687d99d41b17d717ce50e7c0,visit(com.android.jack.ir.ast.JSwitchStatement),visit(com.android.jack.ir.ast.JSwitchStatement),3,1,"@java.lang.Override public boolean visit(@javax.annotation.Nonnull com.android.jack.ir.ast.JSwitchStatement switchStatement) { super.visit(switchStatement); com.android.jack.cfg.SwitchBasicBlock switchBlock = new com.android.jack.cfg.SwitchBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(switchBlock); java.util.List<com.android.jack.ir.ast.JCaseStatement> cases = switchStatement.getCases(); java.util.Collections.sort(cases, new com.android.jack.cfg.CfgBuilder.JCaseStatementComparator()); com.android.jack.ir.ast.JStatement defaultCase = switchStatement.getDefaultCase(); if (defaultCase == null) { defaultCase = com.android.jack.util.ControlFlowHelper.getNextStatement(switchStatement); } forwardBranchResolver.addSwitchBasicBlock(switchBlock, cases, defaultCase); return true; }",fc5ad80291e5bffa7dc357df2851708a55978eac,visit(com.android.jack.ir.ast.JSwitchStatement),524196,217,211
201522,test_com_google_doclava_StubsTest.java,,,,"public void testMultipleComments() throws java.io.IOException { assertEquals(""/*\n* Foo\n*/\n/*\n* Bar\n*/\n"", com.google.doclava.StubsTest.parseLicenseHeader(""/*"", "" * Foo"", "" */"", ""/*"", "" * Bar"", "" */"", ""package foo"")); }",c49a1eea8f13ecb41d2c78073b4182f76c720a31,,testMultipleComments(),5,0,"public void testMultipleComments() throws java.io.IOException { assertEquals(""/*\n* Foo\n*/\n/*\n* Bar\n*/\n"", com.google.doclava.StubsTest.parseLicenseHeader(""/*"", "" * Foo"", "" */"", ""/*"", "" * Bar"", "" */"", ""package foo"", """")); }",af68d5ecc63508f2eec6bf2800c94e4ab5aafa33,testMultipleComments(),116095,77,78
593287,services_core_java_com_android_server_IpSecService.java,27.0,"@java.lang.Override public synchronized void applyTunnelModeTransform(int direction, int transformResourceId, int tunnelResourceId) throws android.os.RemoteException { com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TransformRecord transformInfo = userRecord.mTransformRecords.getResourceOrThrow(transformResourceId); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); android.net.IpSecConfig c = transformInfo.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (android.net.IpSecTransform.MODE_TUNNEL)), ""Transform mode was not Tunnel mode; cannot be applied to a tunnel interface""); int[] keys = tunnelInterfaceInfo.getKeys(); }",6be466457cc205609f1529b9bdbbdfc69c865011,"@java.lang.Override public synchronized void applyTunnelModeTransform(int direction, int transformResourceId, int tunnelResourceId) throws android.os.RemoteException { com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TransformRecord transformInfo = userRecord.mTransformRecords.getResourceOrThrow(transformResourceId); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); android.net.IpSecConfig c = transformInfo.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (android.net.IpSecTransform.MODE_TUNNEL)), ""Transform mode was not Tunnel mode; cannot be applied to a tunnel interface""); int[] keys = tunnelInterfaceInfo.getKeys(); try { mSrvConfig.getNetdInstance().ipSecApplyTunnelModeTransform(direction, c.getSourceAddress(), c.getDestinationAddress(), transformInfo.getSpiRecord().getSpi(), keys[direction]); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (EINVAL)) { throw new java.lang.IllegalArgumentException(e.toString()); } else { throw e; } } }",b637ba67437ac9071f356e94996b0d9c5af459cc,"applyTunnelModeTransform(int,int,int)","applyTunnelModeTransform(int,int,int)",21,27,"@java.lang.Override public synchronized void applyTunnelModeTransform(int tunnelResourceId, int direction, int transformResourceId) throws android.os.RemoteException { com.android.server.IpSecService.checkDirection(direction); com.android.server.IpSecService.UserRecord userRecord = mUserResourceTracker.getUserRecord(android.os.Binder.getCallingUid()); com.android.server.IpSecService.TransformRecord transformInfo = userRecord.mTransformRecords.getResourceOrThrow(transformResourceId); com.android.server.IpSecService.TunnelInterfaceRecord tunnelInterfaceInfo = userRecord.mTunnelInterfaceRecords.getResourceOrThrow(tunnelResourceId); android.net.IpSecConfig c = transformInfo.getConfig(); com.android.internal.util.Preconditions.checkArgument(((c.getMode()) == (android.net.IpSecTransform.MODE_TUNNEL)), ""Transform mode was not Tunnel mode; cannot be applied to a tunnel interface""); com.android.server.IpSecService.EncapSocketRecord socketRecord = null; if ((c.getEncapType()) != (android.net.IpSecTransform.ENCAP_NONE)) { socketRecord = userRecord.mEncapSocketRecords.getResourceOrThrow(c.getEncapSocketResourceId()); } com.android.server.IpSecService.SpiRecord spiRecord = userRecord.mSpiRecords.getResourceOrThrow(c.getSpiResourceId()); int mark = (direction == (android.net.IpSecManager.DIRECTION_IN)) ? tunnelInterfaceInfo.getIkey() : tunnelInterfaceInfo.getOkey(); try { c.setMarkValue(mark); c.setMarkMask(-1); if (direction == (android.net.IpSecManager.DIRECTION_OUT)) { c.setNetwork(tunnelInterfaceInfo.getUnderlyingNetwork()); mSrvConfig.getNetdInstance().ipSecUpdateSecurityPolicy(0, direction, """", """", transformInfo.getSpiRecord().getSpi(), mark, -1); } createOrUpdateTransform(c, transformResourceId, spiRecord, socketRecord); } catch (android.os.ServiceSpecificException e) { if ((e.errorCode) == (EINVAL)) { throw new java.lang.IllegalArgumentException(e.toString()); } else { throw e; } } }",ec3b99fbefe8450570b2ee21cbd46759df882145,"applyTunnelModeTransform(int,int,int)",58173,309,487
91995,luni_src_main_java_android_os_Os.java,,,,"public static int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws android.os.ErrnoException, java.io.InterruptedIOException { return Libcore.os.writev(fd, buffers, offsets, byteCounts); }",242ee98638ca22365ebd7ead9fbb131d57f7fb8a,,"writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])",3,9,"public static int writev(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws android.system.ErrnoException, java.io.InterruptedIOException { return Libcore.os.writev(fd, buffers, offsets, byteCounts); }",21d1f503bdd9fc6da30844c7c01aae42baea2128,"writev(java.io.FileDescriptor,java.lang.Object[],int[],int[])",170022,66,66
149589,build-system_builder_src_main_java_com_android_builder_internal_packaging_Packager.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void checkMergingFolder(java.io.File file) throws com.android.builder.packaging.PackagerException { if (file.isFile()) { throw new com.android.builder.packaging.PackagerException(""%s is a file!"", file); } if (file.exists()) { if (!(file.canWrite())) { throw new com.android.builder.packaging.PackagerException(""Cannot write %s"", file); } } else { if (!(file.mkdirs())) { throw new com.android.builder.packaging.PackagerException(""Failed to create %s"", file); } } }",3fb9bd78d65399a7bcdf0fb318cd31ed709ee7dd,,checkMergingFolder(java.io.File),2,26,"private static void checkMergingFolder(java.io.File file) throws com.android.builder.packaging.PackagerException { if (file.isFile()) { throw new com.android.builder.packaging.PackagerException(""%s is a file!"", file); } if (file.exists()) { if (!(file.canWrite())) { throw new com.android.builder.packaging.PackagerException(""Cannot write %s"", file); } com.android.utils.FileUtils.deleteFolder(file); } if (!(file.mkdirs())) { throw new com.android.builder.packaging.PackagerException(""Failed to create %s"", file); } }",fbf2ce0b82d6c2359308620b1301e0878859ca9e,checkMergingFolder(java.io.File),333813,127,137
81416,tests_tests_renderscript_src_android_renderscript_cts_TestExp2.java,,,,"private void checkExp2Float3() { android.renderscript.Allocation in = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(in, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testExp2Float3(in, out); verifyResultsExp2Float3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testExp2Float3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testExp2Float3(in, out); verifyResultsExp2Float3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testExp2Float3: "" + (e.toString()))); } }",4336523b995c567e535378c266c4d80af55d508a,,checkExp2Float3(),9,6,"private void checkExp2Float3Float3() { android.renderscript.Allocation in = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 3, 4745438851469632836L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); script.forEach_testExp2Float3Float3(in, out); verifyResultsExp2Float3Float3(in, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testExp2Float3Float3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testExp2Float3Float3(in, out); verifyResultsExp2Float3Float3(in, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testExp2Float3Float3: "" + (e.toString()))); } }",d2de31aa587eb0b2ddcd32b3d52d769d8add17e8,checkExp2Float3Float3(),142659,324,310
321197,wifi_java_android_net_wifi_hotspot2_omadm_PPSMOParser.java,31.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static android.util.Pair<java.util.List<java.lang.Long>, java.util.List<java.lang.Long>> parseHomeOIList(android.net.wifi.hotspot2.omadm.PPSMOParser.PPSNode node) throws android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException { if (node.isLeaf()) throw new android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException(""Leaf node not expected for HomeOIList""); java.util.List<java.lang.Long> matchAllOIs = new java.util.ArrayList<java.lang.Long>(); java.util.List<java.lang.Long> matchAnyOIs = new java.util.ArrayList<java.lang.Long>(); for (android.net.wifi.hotspot2.omadm.PPSMOParser.PPSNode child : node.getChildren()) { android.util.Pair<java.lang.Long, java.lang.Boolean> homeOI = android.net.wifi.hotspot2.omadm.PPSMOParser.parseHomeOIInstance(child); if (homeOI.second.booleanValue()) matchAllOIs.add(homeOI.first); else matchAnyOIs.add(homeOI.first); } return new android.util.Pair<java.util.List<java.lang.Long>, java.util.List<java.lang.Long>>(matchAllOIs, matchAnyOIs); }",0e757537b77af229e2234deb2ea2751b7781bd27,,parseHomeOIList(android.net.wifi.hotspot2.omadm.PPSMOParser$PPSNode),5,30,"private static android.util.Pair<java.util.List<java.lang.Long>, java.util.List<java.lang.Long>> parseHomeOIList(android.net.wifi.hotspot2.omadm.PPSMOParser.PPSNode node) throws android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException { if (node.isLeaf()) { throw new android.net.wifi.hotspot2.omadm.PPSMOParser.ParsingException(""Leaf node not expected for HomeOIList""); } java.util.List<java.lang.Long> matchAllOIs = new java.util.ArrayList<java.lang.Long>(); java.util.List<java.lang.Long> matchAnyOIs = new java.util.ArrayList<java.lang.Long>(); for (android.net.wifi.hotspot2.omadm.PPSMOParser.PPSNode child : node.getChildren()) { android.util.Pair<java.lang.Long, java.lang.Boolean> homeOI = android.net.wifi.hotspot2.omadm.PPSMOParser.parseHomeOIInstance(child); if (homeOI.second.booleanValue()) { matchAllOIs.add(homeOI.first); } else { matchAnyOIs.add(homeOI.first); } } return new android.util.Pair<java.util.List<java.lang.Long>, java.util.List<java.lang.Long>>(matchAllOIs, matchAnyOIs); }",dd40d446c566ebdaa0882ae349eb22dacfd336ed,parseHomeOIList(android.net.wifi.hotspot2.omadm.PPSMOParser$PPSNode),417840,338,344
589613,core_java_android_net_NetworkStats.java,49.0,"@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, rxBytes, rxPackets, txBytes, txPackets, operations)); }",9d7029067cd237b37bcde556ce9ff865d47896fb,"@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int tag, int defaultNetwork, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, defaultNetwork, rxBytes, rxPackets, txBytes, txPackets, operations)); }",a25f26408927f6f07b0f91dc96301e11f10207c9,"addValues(java.lang.String,int,int,int,long,long,long,long,long)","addValues(java.lang.String,int,int,int,int,long,long,long,long,long)",6,53,"@com.android.internal.annotations.VisibleForTesting public android.net.NetworkStats addValues(java.lang.String iface, int uid, int set, int tag, long rxBytes, long rxPackets, long txBytes, long txPackets, long operations) { return addValues(new android.net.NetworkStats.Entry(iface, uid, set, tag, rxBytes, rxPackets, txBytes, txPackets, operations)); }",9d7029067cd237b37bcde556ce9ff865d47896fb,"addValues(java.lang.String,int,int,int,long,long,long,long,long)",53335,106,99
647221,services_core_java_com_android_server_am_ActivityManagerService.java,218.0,"private void update() { mBlacklistDisabled = ""*"".equals(Settings.Global.getString(mContext.getContentResolver(), Settings.Global.HIDDEN_API_BLACKLIST_EXEMPTIONS)); }",61545fac90eead5714b65d89d52537818b25e39b,"private void update() { java.lang.String exemptions = Settings.Global.getString(mContext.getContentResolver(), Settings.Global.HIDDEN_API_BLACKLIST_EXEMPTIONS); if (!(android.text.TextUtils.equals(exemptions, mExemptions))) { if (""*"".equals(exemptions)) { mBlacklistDisabled = true; mExemptions = null; } else { mBlacklistDisabled = false; mExemptions = exemptions; } zygoteProcess.setApiBlacklistExemptions(mExemptions); } }",7dba183a768ee40b9eed2f0b2cb6d48a32c7673c,update(),update(),3,218,"private void update() { java.lang.String exemptions = Settings.Global.getString(mContext.getContentResolver(), Settings.Global.HIDDEN_API_BLACKLIST_EXEMPTIONS); if (!(android.text.TextUtils.equals(exemptions, mExemptionsStr))) { mExemptionsStr = exemptions; if (""*"".equals(exemptions)) { mBlacklistDisabled = true; mExemptions = java.util.Collections.emptyList(); } else { mBlacklistDisabled = false; mExemptions = (android.text.TextUtils.isEmpty(exemptions)) ? java.util.Collections.emptyList() : java.util.Arrays.asList(exemptions.split("":"")); } zygoteProcess.setApiBlacklistExemptions(mExemptions); } }",ec02fbef82640796af51afb5175414a23bd002d1,update(),241116,134,189
216245,src_com_android_bluetooth_btservice_AdapterService.java,67.0,"public int getDiscoverableTimeout() { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ""getDiscoverableTimeout() - Not allowed for non-active user""); return 0; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return 0; return service.getDiscoverableTimeout(); }",189a9d982f1463fbe487ff0956e277c774c5aeb7,"public int getDiscoverableTimeout() { if (!(com.android.bluetooth.Utils.checkCallerAllowManagedProfiles(mService))) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ""getDiscoverableTimeout() - Not allowed for non-active user""); return 0; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return 0; return service.getDiscoverableTimeout(); }",22c119815d6155377924ce9c4f515903604f0a94,getDiscoverableTimeout(),getDiscoverableTimeout(),4,67,"public int getDiscoverableTimeout() { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ""getDiscoverableTimeout() - Not allowed for non-active user""); return 0; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return 0; return service.getDiscoverableTimeout(); }",189a9d982f1463fbe487ff0956e277c774c5aeb7,getDiscoverableTimeout(),248340,100,94
33231,core_java_android_widget_Spinner.java,43.0,"int measureContentWidth(android.widget.SpinnerAdapter adapter, android.graphics.drawable.Drawable background) { if (adapter == null) { return 0; } int width = 0; android.view.View itemView = null; int itemType = 0; final int widthMeasureSpec = android.widget.MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED); final int heightMeasureSpec = android.widget.MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED); int start = java.lang.Math.max(0, getSelectedItemPosition()); final int end = java.lang.Math.min(adapter.getCount(), (start + (android.widget.Spinner.MAX_ITEMS_MEASURED))); final int count = end - start; start = java.lang.Math.max(0, (start - ((android.widget.Spinner.MAX_ITEMS_MEASURED) - count))); for (int i = start; i < end; i++) { final int positionType = adapter.getItemViewType(i); if (positionType != itemType) { itemType = positionType; itemView = null; } itemView = adapter.getView(i, itemView, this); if ((itemView.getLayoutParams()) == null) { itemView.setLayoutParams(new android.view.ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT)); } itemView.measure(widthMeasureSpec, heightMeasureSpec); width = java.lang.Math.max(width, itemView.getMeasuredWidth()); } if (background != null) { background.getPadding(mTempRect); width += (mTempRect.left) + (mTempRect.right); } return width; }",cc1f2a26f97f95afe8bca9fac64c025e94ddc4e6,"int measureContentWidth(android.widget.SpinnerAdapter adapter, android.graphics.drawable.Drawable background) { if (adapter == null) { return 0; } int width = 0; android.view.View itemView = null; int itemType = 0; final int widthMeasureSpec = android.widget.MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED); final int heightMeasureSpec = android.widget.MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED); int start = java.lang.Math.max(0, getSelectedItemPosition()); final int end = java.lang.Math.min(adapter.getCount(), (start + (android.widget.Spinner.MAX_ITEMS_MEASURED))); final int count = end - start; start = java.lang.Math.max(0, (start - ((android.widget.Spinner.MAX_ITEMS_MEASURED) - count))); for (int i = start; i < end; i++) { final int positionType = adapter.getItemViewType(i); if (positionType != itemType) { itemType = positionType; itemView = null; } itemView = adapter.getView(i, itemView, this); if ((itemView.getLayoutParams()) == null) { itemView.setLayoutParams(new android.view.ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT)); } itemView.measure(widthMeasureSpec, heightMeasureSpec); width = java.lang.Math.max(width, itemView.getMeasuredWidth()); } if (background != null) { background.getPadding(mTempRect); width += (mTempRect.left) + (mTempRect.right); } int widthLimit = mContext.getResources().getDisplayMetrics().widthPixels; if ((mPopup) instanceof android.widget.Spinner.DropdownPopup) { final android.graphics.drawable.Drawable popupBackground = ((android.widget.Spinner.DropdownPopup) (mPopup)).getBackground(); if (popupBackground != null) { android.graphics.Rect tempRect = new android.graphics.Rect(); popupBackground.getPadding(tempRect); widthLimit = (widthLimit - (tempRect.left)) - (tempRect.right); } } if (width > widthLimit) { width = widthLimit; } return width; }",48e524c00d794e43b8f2a7fd64557cb723d8ff77,"measureContentWidth(android.widget.SpinnerAdapter,android.graphics.drawable.Drawable)","measureContentWidth(android.widget.SpinnerAdapter,android.graphics.drawable.Drawable)",6,43,"int measureContentWidth(android.widget.SpinnerAdapter adapter, android.graphics.drawable.Drawable background) { if (adapter == null) { return 0; } int width = 0; android.view.View itemView = null; int itemType = 0; final int widthMeasureSpec = android.widget.MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED); final int heightMeasureSpec = android.widget.MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED); int start = java.lang.Math.max(0, getSelectedItemPosition()); final int end = java.lang.Math.min(adapter.getCount(), (start + (android.widget.Spinner.MAX_ITEMS_MEASURED))); final int count = end - start; start = java.lang.Math.max(0, (start - ((android.widget.Spinner.MAX_ITEMS_MEASURED) - count))); for (int i = start; i < end; i++) { final int positionType = adapter.getItemViewType(i); if (positionType != itemType) { itemType = positionType; itemView = null; } itemView = adapter.getView(i, itemView, this); if ((itemView.getLayoutParams()) == null) { itemView.setLayoutParams(new android.view.ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT)); } itemView.measure(widthMeasureSpec, heightMeasureSpec); width = java.lang.Math.max(width, itemView.getMeasuredWidth()); } if (background != null) { background.getPadding(mTempRect); width += (mTempRect.left) + (mTempRect.right); } return width; }",cc1f2a26f97f95afe8bca9fac64c025e94ddc4e6,"measureContentWidth(android.widget.SpinnerAdapter,android.graphics.drawable.Drawable)",283572,474,345
123694,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_StackFrame_GetValues002Test.java,,,,"private org.apache.harmony.jpda.tests.jdwp.StackFrame.FrameInfo getFrameInfo(long threadID, long classID, long methodID) { int frameCount = jdwpGetFrameCount(threadID); assertTrue(""Not enough frames"", (frameCount > 2)); org.apache.harmony.jpda.tests.jdwp.StackFrame.FrameInfo[] frames = jdwpGetFrames(threadID, 0, frameCount); for (org.apache.harmony.jpda.tests.jdwp.StackFrame.FrameInfo frameInfo : frames) { if (((frameInfo.location.classID) == classID) && ((frameInfo.location.methodID) == methodID)) { return frameInfo; } } return null; }",7cc9f1d714b6e6b55ce4a2fdd8e83c5931946e1f,,"getFrameInfo(long,long,long)",8,5,"public void testGetValues015_ThreadGroup() { long classID = getClassIDBySignature(getDebuggeeClassSignature()); org.apache.harmony.jpda.tests.framework.jdwp.Value expectedValue = getStaticFieldValue(classID, ""THREAD_GROUP_PARAM_VALUE""); org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester tester = new org.apache.harmony.jpda.tests.jdwp.StackFrame.StackFrameTester(""breakpointThreadGroup"", StackTrace002Debuggee.THREAD_GROUP_SIGNAL); org.apache.harmony.jpda.tests.jdwp.StackFrame.MethodInfo methodInfo = tester.addTestMethod(""runBreakpointThreadGroup""); methodInfo.addVariable(""param"", expectedValue); runStackFrameTest(tester); }",b232aba27075117a69a9d7085cab7669c15cda3d,testGetValues015_ThreadGroup(),215696,167,181
111075,updater_src_com_intellij_updater_PatchAction.java,8.0,"protected com.intellij.updater.ValidationResult doValidateAccess(java.io.File toFile, com.intellij.updater.ValidationResult.Action action) { if (!(toFile.exists())) return null; if (toFile.isDirectory()) return null; com.intellij.updater.ValidationResult result = validateProcessLock(toFile, action); if (result != null) { return result; } if (((toFile.canRead()) && (toFile.canWrite())) && (isWritable(toFile))) return null; return new com.intellij.updater.ValidationResult(ValidationResult.Kind.ERROR, myPath, action, ValidationResult.ACCESS_DENIED_MESSAGE, ValidationResult.Option.IGNORE); }",77b010de993cf3aa31fcd86a56684a109751a15a,"protected com.intellij.updater.ValidationResult doValidateAccess(java.io.File toFile, com.intellij.updater.ValidationResult.Action action) { if (!(toFile.exists())) return null; if (toFile.isDirectory()) return null; com.intellij.updater.ValidationResult result = validateProcessLock(toFile, action); if (result != null) { return result; } if (((toFile.canRead()) && (toFile.canWrite())) && (isWritable(toFile))) return null; return new com.intellij.updater.ValidationResult(ValidationResult.Kind.ERROR, myPath, action, ValidationResult.ACCESS_DENIED_MESSAGE, (myPatch.isStrict ? ValidationResult.Option.NONE : ValidationResult.Option.IGNORE)); }",25ea059890308f72ce672ccf8659125e4710d24c,"doValidateAccess(java.io.File,com.intellij.updater.ValidationResult$Action)","doValidateAccess(java.io.File,com.intellij.updater.ValidationResult$Action)",7,8,"protected com.intellij.updater.ValidationResult doValidateAccess(java.io.File toFile, com.intellij.updater.ValidationResult.Action action) { if (!(toFile.exists())) return null; if (toFile.isDirectory()) return null; com.intellij.updater.ValidationResult result = validateProcessLock(toFile, action); if (result != null) { return result; } if (((toFile.canRead()) && (toFile.canWrite())) && (isWritable(toFile))) return null; return new com.intellij.updater.ValidationResult(ValidationResult.Kind.ERROR, myPath, action, ValidationResult.ACCESS_DENIED_MESSAGE, (myPatch.isStrict() ? ValidationResult.Option.NONE : ValidationResult.Option.IGNORE)); }",80dd272482a7f9666a6eb9dc5d83d19fb02a61c7,"doValidateAccess(java.io.File,com.intellij.updater.ValidationResult$Action)",121161,157,158
588944,src_com_android_bluetooth_map_BluetoothMapMasInstance.java,30.0,"public synchronized void startSocketListeners() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""Map Service startSocketListeners""); } if ((mServerSession) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""mServerSession exists - shutting it down...""); } mServerSession.close(); mServerSession = null; } if ((mObserver) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""mObserver exists - shutting it down...""); } mObserver.deinit(); mObserver = null; } closeConnectionSocket(); if ((mServerSockets) != null) { mServerSockets.prepareForNewConnect(); } else { mServerSockets = com.android.bluetooth.ObexServerSockets.create(this); if ((mServerSockets) == null) { android.util.Log.e(mTag, ""Failed to start the listeners""); return; } removeSdpRecord(); mSdpHandle = createMasSdpRecord(mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm()); if (com.android.bluetooth.map.BluetoothMapMasInstance.V) { android.util.Log.d(mTag, (((((""Creating new SDP record for MAS instance: "" + (mMasInstanceId)) + "" Object reference: "") + (this)) + ""SDP handle: "") + (mSdpHandle))); } updateDbIdentifier(); } }",6d04ca2d4b733288f6c51113f26fdb1eff703b7d,"public synchronized void startSocketListeners() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""Map Service startSocketListeners""); } if ((mServerSession) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""mServerSession exists - shutting it down...""); } mServerSession.close(); mServerSession = null; } if ((mObserver) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""mObserver exists - shutting it down...""); } mObserver.deinit(); mObserver = null; } closeConnectionSocket(); if ((mServerSockets) != null) { mAcceptNewConnect = true; } else { mServerSockets = com.android.bluetooth.ObexServerSockets.create(this); mAcceptNewConnect = true; if ((mServerSockets) == null) { android.util.Log.e(mTag, ""Failed to start the listeners""); return; } removeSdpRecord(); mSdpHandle = createMasSdpRecord(mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm()); if (com.android.bluetooth.map.BluetoothMapMasInstance.V) { android.util.Log.d(mTag, (((((""Creating new SDP record for MAS instance: "" + (mMasInstanceId)) + "" Object reference: "") + (this)) + ""SDP handle: "") + (mSdpHandle))); } updateDbIdentifier(); } }",2ac2f1ff6f2e1d61bb8bad7f3f78590214ba376f,startSocketListeners(),startSocketListeners(),6,30,"public synchronized void startSocketListeners() { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""Map Service startSocketListeners""); } if ((mServerSession) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""mServerSession exists - shutting it down...""); } mServerSession.close(); mServerSession = null; } if ((mObserver) != null) { if (com.android.bluetooth.map.BluetoothMapMasInstance.D) { android.util.Log.d(mTag, ""mObserver exists - shutting it down...""); } mObserver.deinit(); mObserver = null; } closeConnectionSocket(); if ((mServerSockets) != null) { mAcceptNewConnections = true; } else { mServerSockets = com.android.bluetooth.ObexServerSockets.create(this); mAcceptNewConnections = true; if ((mServerSockets) == null) { android.util.Log.e(mTag, ""Failed to start the listeners""); return; } removeSdpRecord(); mSdpHandle = createMasSdpRecord(mServerSockets.getRfcommChannel(), mServerSockets.getL2capPsm()); if (com.android.bluetooth.map.BluetoothMapMasInstance.V) { android.util.Log.d(mTag, (((((""Creating new SDP record for MAS instance: "" + (mMasInstanceId)) + "" Object reference: "") + (this)) + ""SDP handle: "") + (mSdpHandle))); } updateDbIdentifier(); } }",41be29ee7faac4533765975726392216d7e60a47,startSocketListeners(),339499,377,377
280491,service_java_com_android_server_wifi_SoftApManager.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void enter() { mIfaceIsUp = false; },91689c76ea1b4c5e778b98bcdfa0a1d2bbd06be7,,enter(),3,9,@java.lang.Override public void enter() { mIfaceIsUp = false; android.net.InterfaceConfiguration config = null; try { config = mNwService.getInterfaceConfig(mApInterface.getInterfaceName()); } catch (android.os.RemoteException e) { } if (config != null) { onUpChanged(config.isUp()); } },cbaf6e3591b4cfa870a29e76e4c4901b1574f37d,enter(),346643,20,81
302320,src_main_java_org_conscrypt_OpenSSLEngineImpl.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private int readPlaintextData(final java.nio.ByteBuffer dst) throws javax.net.ssl.SSLException { try { final int sslRead; final int pos = dst.position(); final int limit = dst.limit(); final int len = java.lang.Math.min(NativeConstants.SSL3_RT_MAX_PACKET_SIZE, (limit - pos)); if (dst.isDirect()) { long addr = (org.conscrypt.NativeCrypto.getDirectBufferAddress(dst)) + pos; sslRead = org.conscrypt.NativeCrypto.ENGINE_SSL_read_direct(sslNativePointer, addr, len, this); if (sslRead > 0) { dst.position((pos + sslRead)); } } else { sslRead = org.conscrypt.NativeCrypto.ENGINE_SSL_read_heap(sslNativePointer, dst.array(), ((dst.arrayOffset()) + pos), len, this); if (sslRead > 0) { dst.position((pos + sslRead)); } } return sslRead; } catch (java.io.IOException e) { throw new javax.net.ssl.SSLException(e); } }",5b226d328309fec6a04b5cde26d258be02292e02,,readPlaintextData(java.nio.ByteBuffer),23,31,"private int readPlaintextData(final java.nio.ByteBuffer dst) throws javax.net.ssl.SSLException { try { final int sslRead; final int pos = dst.position(); final int limit = dst.limit(); final int len = java.lang.Math.min(org.conscrypt.NativeConstants.SSL3_RT_MAX_PACKET_SIZE, (limit - pos)); if (dst.isDirect()) { long addr = (org.conscrypt.NativeCrypto.getDirectBufferAddress(dst)) + pos; sslRead = org.conscrypt.NativeCrypto.ENGINE_SSL_read_direct(sslNativePointer, addr, len, this); if (sslRead > 0) { dst.position((pos + sslRead)); } } else if (dst.hasArray()) { sslRead = org.conscrypt.NativeCrypto.ENGINE_SSL_read_heap(sslNativePointer, dst.array(), ((dst.arrayOffset()) + pos), len, this); if (sslRead > 0) { dst.position((pos + sslRead)); } } else { byte[] data = new byte[len]; sslRead = org.conscrypt.NativeCrypto.ENGINE_SSL_read_heap(sslNativePointer, data, 0, len, this); if (sslRead > 0) { dst.put(data, 0, sslRead); } } return sslRead; } catch (java.io.IOException e) { throw new javax.net.ssl.SSLException(e); } }",f86a051cc0c6c676dcde31c2d73d0ca1eca78c0d,readPlaintextData(java.nio.ByteBuffer),133794,254,329
328920,jack-tests_tests_com_android_jack_resource_ResourceTests.java,10.0,"@javax.annotation.Nonnull private java.io.File createJackArchiveWithResources() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File jackAr = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""resourcetestjack"", toolchain.getLibraryExtension()); toolchain.addResourceDir(new java.io.File(com.android.jack.resource.ResourceTests.FILE, ""rsc"")); toolchain.addToClasspath(toolchain.getDefaultBootClasspath()).srcToLib(jackAr, true, com.android.jack.resource.ResourceTests.FILE); return jackAr; }",d30df8882399ea192ddf4baf18f7107ace6d327c,"@javax.annotation.Nonnull private java.io.File createJackArchiveWithResources() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File jackAr = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""resourcetestjack"", toolchain.getLibraryExtension()); toolchain.addResourceDir(new java.io.File(com.android.jack.resource.ResourceTests.FILE, ""rsc"")); toolchain.addToClasspath(new java.io.File(""/usr/local/google/home/benoitlamarche/jacklibwithnojayce2.jack"")); toolchain.addToClasspath(toolchain.getDefaultBootClasspath()); toolchain.addProperty(""jack.import.resource.policy"", ""keep-first"").srcToLib(jackAr, true, com.android.jack.resource.ResourceTests.FILE); java.lang.System.out.println(jackAr.getAbsolutePath()); return jackAr; }",a2625a511dfa38a2ce97764153c7091ce6e24395,createJackArchiveWithResources(),createJackArchiveWithResources(),5,10,"@javax.annotation.Nonnull private java.io.File createJackArchiveWithResources() throws java.lang.Exception { com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File jackAr = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""resourcetestjack"", toolchain.getLibraryExtension()); toolchain.addResourceDir(new java.io.File(com.android.jack.resource.ResourceTests.FILE, ""rsc"")); toolchain.addToClasspath(toolchain.getDefaultBootClasspath()).srcToLib(jackAr, true, com.android.jack.resource.ResourceTests.FILE); return jackAr; }",d30df8882399ea192ddf4baf18f7107ace6d327c,createJackArchiveWithResources(),426564,255,185
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,28.0,"public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, getAuthKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",bd67adf701737f2df1b39237700bd1a4ffdba688,"public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",9f6958c2fed08e508fbb5ce2d80e7cf30f99e1a6,testAesCbcHmacSha1Udp6(),testAesCbcHmacSha1Udp6(),9,28,"public void testAesCbcHmacSha1Udp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA1, android.net.cts.IpSecManagerTest.getKey(160), 96); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",6624eaf2498bc012e0298e4092d218809c4e213a,testAesCbcHmacSha1Udp6(),1896,213,213
253791,luni_src_main_java_libcore_io_Posix.java,114.0,public native int setsid() throws android.system.ErrnoException;,a2c34a4ad08f6449cc730d3dbed3856ecf9357d6,public native int setsid() throws libcore.io.ErrnoException;,623a981622a6184d1d647cb8413f7f6e2ee19022,setsid(),setsid(),8,114,public native int setsid() throws android.system.ErrnoException;,a2c34a4ad08f6449cc730d3dbed3856ecf9357d6,setsid(),494515,16,15
325360,src_java_com_android_internal_telephony_sip_SipPhone.java,9.0,"@java.lang.Override public void onChanged(android.net.sip.SipAudioCall call) { synchronized(com.android.internal.telephony.sip.SipPhone.class) { com.android.internal.telephony.Call.State newState = com.android.internal.telephony.sip.SipPhone.getCallStateFrom(call); if ((mState) == newState) return; if (newState == (Call.State.INCOMING)) { setState(mOwner.getState()); } else { if ((mOwner) == (mRingingCall)) { if ((mRingingCall.getState()) == (Call.State.WAITING)) { try { switchHoldingAndActive(); } catch (com.android.internal.telephony.CallStateException e) { onCallEnded(DisconnectCause.LOCAL); return; } } mForegroundCall.switchWith(mRingingCall); } setState(newState); } mOwner.onConnectionStateChanged(this); if (com.android.internal.telephony.sip.SipPhone.SipConnection.SCN_DBG) log((((((""onChanged: "" + (mPeer.getUriString())) + "": "") + (mState)) + "" on phone "") + (getPhone()))); } }",551b75e1a71379e3ff996a625d3cef82f4cbbba0,"@java.lang.Override public void onChanged(android.net.sip.SipAudioCall call) { synchronized(com.android.internal.telephony.sip.SipPhone.class) { com.android.internal.telephony.Call.State newState = com.android.internal.telephony.sip.SipPhone.getCallStateFrom(call); if ((mState) == newState) return; if (newState == (Call.State.INCOMING)) { setState(mOwner.getState()); } else { if ((mOwner) == (mRingingCall)) { if ((mRingingCall.getState()) == (Call.State.WAITING)) { try { switchHoldingAndActive(); } catch (com.android.internal.telephony.CallStateException e) { onCallEnded(DisconnectCause.LOCAL); return; } } mForegroundCall.switchWith(mRingingCall); } setState(newState); } mOwner.onConnectionStateChanged(this); if (com.android.internal.telephony.sip.SipPhone.SipConnection.SCN_DBG) { if (com.android.internal.telephony.sip.SipPhone.DBG_BUILD) { log((((((""onChanged: "" + (mPeer.getUriString())) + "": "") + (mState)) + "" on phone "") + (getPhone()))); } else { log((((""onChanged: "" + (mState)) + "" on phone "") + (getPhone()))); } } } }",901e72e2a9dc31a0d1c9a3225bf444b3c63d542e,onChanged(android.net.sip.SipAudioCall),onChanged(android.net.sip.SipAudioCall),3,9,"@java.lang.Override public void onChanged(android.net.sip.SipAudioCall call) { synchronized(com.android.internal.telephony.sip.SipPhone.class) { com.android.internal.telephony.Call.State newState = com.android.internal.telephony.sip.SipPhone.getCallStateFrom(call); if ((mState) == newState) return; if (newState == (Call.State.INCOMING)) { setState(mOwner.getState()); } else { if ((mOwner) == (mRingingCall)) { if ((mRingingCall.getState()) == (Call.State.WAITING)) { try { switchHoldingAndActive(); } catch (com.android.internal.telephony.CallStateException e) { onCallEnded(DisconnectCause.LOCAL); return; } } mForegroundCall.switchWith(mRingingCall); } setState(newState); } mOwner.onConnectionStateChanged(this); if (com.android.internal.telephony.sip.SipPhone.SipConnection.SCN_DBG) { log((((((""onChanged: "" + (com.android.internal.telephony.sip.SipPhone.hidePii(mPeer.getUriString()))) + "": "") + (mState)) + "" on phone "") + (getPhone()))); } } }",30af2c30f61fd25c59d978cc0ae8f164cf6f1fe6,onChanged(android.net.sip.SipAudioCall),138516,326,295
589613,services_core_java_com_android_server_net_NetworkStatsService.java,63.0,"@java.lang.Override public void incrementOperationCount(int uid, int tag, int operationCount) { if ((android.os.Binder.getCallingUid()) != uid) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.UPDATE_DEVICE_STATS, com.android.server.net.NetworkStatsService.TAG); } if (operationCount < 0) { throw new java.lang.IllegalArgumentException(""operation count can only be incremented""); } if (tag == (android.net.NetworkStats.TAG_NONE)) { throw new java.lang.IllegalArgumentException(""operation count must have specific tag""); } synchronized(mStatsLock) { final int set = mActiveUidCounterSet.get(uid, android.net.NetworkStats.SET_DEFAULT); mUidOperations.combineValues(mActiveIface, uid, set, tag, 0L, 0L, 0L, 0L, operationCount); mUidOperations.combineValues(mActiveIface, uid, set, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L, operationCount); } }",378348f5708f9bc27ef625a95124b85817357459,"@java.lang.Override public void incrementOperationCount(int uid, int tag, int operationCount) { if ((android.os.Binder.getCallingUid()) != uid) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.UPDATE_DEVICE_STATS, com.android.server.net.NetworkStatsService.TAG); } if (operationCount < 0) { throw new java.lang.IllegalArgumentException(""operation count can only be incremented""); } if (tag == (android.net.NetworkStats.TAG_NONE)) { throw new java.lang.IllegalArgumentException(""operation count must have specific tag""); } synchronized(mStatsLock) { final int set = mActiveUidCounterSet.get(uid, android.net.NetworkStats.SET_DEFAULT); mUidOperations.combineValues(mActiveIface, uid, set, tag, android.net.NetworkStats.DEFAULT_NETWORK_YES, 0L, 0L, 0L, 0L, operationCount); mUidOperations.combineValues(mActiveIface, uid, set, android.net.NetworkStats.TAG_NONE, android.net.NetworkStats.DEFAULT_NETWORK_YES, 0L, 0L, 0L, 0L, operationCount); } }",c697eae5e50dec502af50921828ef9802e272085,"incrementOperationCount(int,int,int)","incrementOperationCount(int,int,int)",6,63,"@java.lang.Override public void incrementOperationCount(int uid, int tag, int operationCount) { if ((android.os.Binder.getCallingUid()) != uid) { mContext.enforceCallingOrSelfPermission(android.Manifest.permission.UPDATE_DEVICE_STATS, com.android.server.net.NetworkStatsService.TAG); } if (operationCount < 0) { throw new java.lang.IllegalArgumentException(""operation count can only be incremented""); } if (tag == (android.net.NetworkStats.TAG_NONE)) { throw new java.lang.IllegalArgumentException(""operation count must have specific tag""); } synchronized(mStatsLock) { final int set = mActiveUidCounterSet.get(uid, android.net.NetworkStats.SET_DEFAULT); mUidOperations.combineValues(mActiveIface, uid, set, tag, 0L, 0L, 0L, 0L, operationCount); mUidOperations.combineValues(mActiveIface, uid, set, android.net.NetworkStats.TAG_NONE, 0L, 0L, 0L, 0L, operationCount); } }",378348f5708f9bc27ef625a95124b85817357459,"incrementOperationCount(int,int,int)",53454,267,241
89697,build-system_builder_src_main_java_com_android_builder_AndroidBuilder.java,20.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.lang.String getTargetCodename() { return mTargetInfo.getTarget().getVersion().getCodename(); },5ebea90413062301148e1d5895cada25111e295e,,getTargetCodename(),5,1,"public java.lang.String getTargetCodename() { checkState(((mTargetInfo) != null), ""Cannot call getTargetCodename() before setTargetInfo() is called.""); return mTargetInfo.getTarget().getVersion().getCodename(); }",e32ce15600abae9db589ee8aebe4910e54427f19,getTargetCodename(),206517,25,51
510195,test_959-invoke-polymorphic-accessors_src_Main.java,49.0,"static void setShort(java.lang.invoke.MethodHandle m, Main.ValueHolder v, short value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }",d67438e1542d6adb3f2eb793439cd07c6003d967,"static void setShort(java.lang.invoke.MethodHandle m, Main.ValueHolder v, short value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }",70e89990c7cc56e010b78a06605b8e3368e564a7,"setShort(java.lang.invoke.MethodHandle,Main$ValueHolder,short,boolean)","setShort(java.lang.invoke.MethodHandle,Main$ValueHolder,short,boolean)",3,47,"static void setShort(java.lang.invoke.MethodHandle m, Main.ValueHolder v, short value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEquals(exceptionThrown, expectFailure); }",31ae0bf8df34ef5ac629ff005ea1cc84e4f0b57e,"setShort(java.lang.invoke.MethodHandle,Main$ValueHolder,short,boolean)",228913,104,103
330335,hostsidetests_services_activitymanager_src_android_server_cts_ActivityManagerAppConfigurationTests.java,0.0,"public void testConfigurationUpdatesWhenResizedFromDockedStack() throws java.lang.Exception { if (!(supportsMultiWindowMode())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, ""Skipping test: no multi-window support""); return; } launchActivityInStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); moveActivityToStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); android.server.cts.ActivityManagerAppConfigurationTests.assertSizesAreSane(fullscreenSizes, dockedSizes); }",153564a4485eb933ed1b8b018d7e025598a0dea6,"public void testConfigurationUpdatesWhenResizedFromDockedStack() throws java.lang.Exception { if ((!(supportsMultiWindowMode())) || (!(supportsSplitScreenMultiWindow()))) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, ""Skipping test: no multi-window support""); return; } launchActivityInStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); moveActivityToStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); android.server.cts.ActivityManagerAppConfigurationTests.assertSizesAreSane(fullscreenSizes, dockedSizes); }",75a2570eaedd246302900a638e8c6afea294dddc,testConfigurationUpdatesWhenResizedFromDockedStack(),testConfigurationUpdatesWhenResizedFromDockedStack(),2,0,"public void testConfigurationUpdatesWhenResizedFromDockedStack() throws java.lang.Exception { if (!(supportsSplitScreenMultiWindow())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, ""Skipping test: no multi-window support""); return; } launchActivityInStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); moveActivityToStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); android.server.cts.ActivityManagerAppConfigurationTests.assertSizesAreSane(fullscreenSizes, dockedSizes); }",6f96e48e0df6d3bf5b1c96370a9c2118c20ab30d,testConfigurationUpdatesWhenResizedFromDockedStack(),224253,297,288
154415,luni_src_main_java_libcore_io_ClassPathURLStreamHandler.java,2.0,"public java.net.URL getEntryUrlOrNull(java.lang.String entryName) { if ((jarFile.findEntry(entryName)) != null) { try { return new java.net.URL(""jar"", null, (-1), (((fileUri) + ""!/"") + entryName), this); } catch (java.net.MalformedURLException e) { throw new java.lang.RuntimeException(""Invalid entry name"", e); } } return null; }",e1712760028dbf5dd3e277eaf3c89aefe21e771f,public java.net.URL getEntryUrlOrNull(java.lang.String entryName) { if ((jarFile.findEntry(entryName)) != null) { return convertEntryToUrl(entryName); } return null; },29596d0cc7c074f808b8f6f8812deff98e69ef57,getEntryUrlOrNull(java.lang.String),getEntryUrlOrNull(java.lang.String),3,2,"public java.net.URL getEntryUrlOrNull(java.lang.String entryName) { if ((jarFile.findEntry(entryName)) != null) { try { return new java.net.URL(""jar"", null, (-1), (((fileUri) + ""!/"") + entryName), this); } catch (java.net.MalformedURLException e) { throw new java.lang.RuntimeException(""Invalid entry name"", e); } } return null; }",e1712760028dbf5dd3e277eaf3c89aefe21e771f,getEntryUrlOrNull(java.lang.String),463350,50,100
377238,Common_src_com_googlecode_android_scripting_facade_telephony_ImsManagerFacade.java,12.0,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Return True if Enhanced 4g Lte mode is enabled by user."") public boolean imsIsEnhanced4gLteModeSettingEnabledByUser() { return com.android.ims.ImsManager.isEnhanced4gLteModeSettingEnabledByUser(mContext); }",b58135732fad22ffdceee0ed49e0115cc5f0755d,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Return True if Enhanced 4g Lte mode is enabled by user."") public boolean imsIsEnhanced4gLteModeSettingEnabledByUser() { return com.android.ims.ImsManager.isEnhanced4gLteModeSettingEnabledByUserForSlot(); }",29c54304dc5ec2e7a12ffd42b3ded6d47f3ccb22,imsIsEnhanced4gLteModeSettingEnabledByUser(),imsIsEnhanced4gLteModeSettingEnabledByUser(),4,13,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Return True if Enhanced 4g Lte mode is enabled by user."") public boolean imsIsEnhanced4gLteModeSettingEnabledByUser() { return mImsManager.isEnhanced4gLteModeSettingEnabledByUserForSlot(); }",3be6900aae7acbe1b515a239126047ac2ef65717,imsIsEnhanced4gLteModeSettingEnabledByUser(),383420,76,70
143322,sched_src_com_android_sched_vfs_OutputStreamProvider.java,,,,@javax.annotation.Nonnull java.io.OutputStream getOutputStream() throws java.io.IOException;,59bb5d58030643254e192a612de819ca6263b5a2,,getOutputStream(),3,1,@javax.annotation.Nonnull java.io.OutputStream getOutputStream() throws com.android.sched.util.file.WrongPermissionException;,de6d1d58c53a69cd4dec2cf1a3c172b1c2e9967f,getOutputStream(),382425,21,29
540316,src_com_android_bluetooth_a2dp_A2dpService.java,24.0,"boolean disconnect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""disconnect(): "" + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } mStateMachine.sendMessage(A2dpStateMachine.DISCONNECT, device); return true; }",df9c46ac7706446745cae0d3e384c1b5ae5d04b8,"boolean disconnect(android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""disconnect(): "" + device)); } enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Ignored disconnect request for "" + device) + "" : no state machine"")); return false; } int connectionState = sm.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { return false; } sm.sendMessage(A2dpStateMachine.DISCONNECT); return true; } }",74b4092baf7efd23164b3438391524872310e241,disconnect(android.bluetooth.BluetoothDevice),disconnect(android.bluetooth.BluetoothDevice),9,30,"boolean disconnect(android.bluetooth.BluetoothDevice device) { enforceCallingOrSelfPermission(com.android.bluetooth.a2dp.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); if (com.android.bluetooth.a2dp.A2dpService.DBG) { android.util.Log.d(com.android.bluetooth.a2dp.A2dpService.TAG, (""disconnect(): "" + device)); } synchronized(mStateMachines) { com.android.bluetooth.a2dp.A2dpStateMachine sm = mStateMachines.get(device); if (sm == null) { android.util.Log.e(com.android.bluetooth.a2dp.A2dpService.TAG, ((""Ignored disconnect request for "" + device) + "" : no state machine"")); return false; } sm.sendMessage(A2dpStateMachine.DISCONNECT); return true; } }",544b23bc06fe8dd0cd1157851f8740363c3d6db2,disconnect(android.bluetooth.BluetoothDevice),280218,256,206
93693,sdk-common_src_main_java_com_android_ide_common_repository_GradleCoordinate.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean equals(java.lang.Object o) { return (o instanceof com.android.ide.common.repository.GradleCoordinate.ListComponent) && (((com.android.ide.common.repository.GradleCoordinate.ListComponent) (o)).myItems.equals(myItems)); },33541cfa60ece3e92ca71aa1a2f42ee0e3708906,,equals(java.lang.Object),2,3,@java.lang.Override public boolean equals(java.lang.Object o) { return (o instanceof com.android.ide.common.repository.GradleCoordinate.ListComponent) && (((com.android.ide.common.repository.GradleCoordinate.ListComponent) (o)).mItems.equals(mItems)); },be4942c2aad63d76b9a2d3e3bb65cc9e04c98559,equals(java.lang.Object),406793,70,70
117753,jack-tests_tests_com_android_jack_opcodes_OpcodesTests.java,60.0,"@org.junit.Test public void opc_goto() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(OPC_GOTO).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""toolchain/jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",4ea9cb2ecd2034f741c8bb94f3af8410e3e62b30,"@org.junit.Test public void opc_goto() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(OPC_GOTO).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack/jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",5110873b1d5b4af14a26ac5a75d9677823d1ddd8,opc_goto(),opc_goto(),4,60,"@org.junit.Test public void opc_goto() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(OPC_GOTO).setSrcDirName(""jm"").setRefDirName(""."").addReferenceExtraSources(new java.io.File(com.android.jack.test.toolchain.AbstractTestTools.getJackRootDir(), ""jack-tests/src/com/android/jack/DxTestCase.java"")).compileAndRunTest(); }",df3ae9a3e2bca49a330e13efc57c5747a011ad4e,opc_goto(),418880,112,110
353506,telephony_java_android_telephony_TelephonyManager.java,71.0,public int getDefaultSim() { return android.telephony.SubscriptionManager.getSlotId(android.telephony.SubscriptionManager.getDefaultSubscriptionId()); },1cfe867f53e879a8c1271352a4c06e3b255e7dd8,@com.android.internal.annotations.VisibleForTesting public int getDefaultSim() { int slotId = android.telephony.SubscriptionManager.getSlotId(android.telephony.SubscriptionManager.getDefaultSubscriptionId()); if (slotId == (SubscriptionManager.SIM_NOT_INSERTED)) { slotId = SubscriptionManager.DEFAULT_SIM_SLOT_INDEX; } return slotId; },df67de7caaf0773f210154d93c2921c509c1e3bf,getDefaultSim(),getDefaultSim(),4,69,@com.android.internal.annotations.VisibleForTesting public int getDefaultSim() { int slotIndex = android.telephony.SubscriptionManager.getSlotIndex(android.telephony.SubscriptionManager.getDefaultSubscriptionId()); if (slotIndex == (SubscriptionManager.SIM_NOT_INSERTED)) { slotIndex = SubscriptionManager.DEFAULT_SIM_SLOT_INDEX; } return slotIndex; },1d8986b87cc5194ba5d1074a04dd2b7264f58126,getDefaultSim(),486578,83,83
343029,dx_src_com_android_dx_dex_code_form_Form45cc.java,0.0,@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.CstInsn)) { return false; } com.android.dx.dex.code.CstInsn ci = ((com.android.dx.dex.code.CstInsn) (insn)); int cpi = ci.getIndex(); if (!(unsignedFitsInShort(cpi))) { return false; } com.android.dx.rop.cst.Constant cst = ci.getConstant(); if (!((cst instanceof com.android.dx.rop.cst.CstMethodRef) || (cst instanceof com.android.dx.rop.cst.CstType))) { return false; } com.android.dx.rop.code.RegisterSpecList regs = ci.getRegisters(); return (com.android.dx.dex.code.form.Form45cc.wordCount(regs)) >= 0; },f081b58a4d059f905e916db2625b25cf223099d4,@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.MultiCstInsn)) { return false; } com.android.dx.dex.code.MultiCstInsn mci = ((com.android.dx.dex.code.MultiCstInsn) (insn)); int methodIdx = mci.getIndex(0); int protoIdx = mci.getIndex(1); if ((!(unsignedFitsInShort(methodIdx))) || (!(unsignedFitsInShort(protoIdx)))) { return false; } com.android.dx.rop.cst.Constant methodRef = mci.getConstant(0); if (!(methodRef instanceof com.android.dx.rop.cst.CstMethodRef)) { return false; } com.android.dx.rop.cst.Constant protoRef = mci.getConstant(1); if (!(protoRef instanceof com.android.dx.rop.cst.CstProtoRef)) { return false; } com.android.dx.rop.code.RegisterSpecList regs = mci.getRegisters(); return (com.android.dx.dex.code.form.Form45cc.wordCount(regs)) >= 0; },551d5c63fd32017f26aff6bd8a5243da3e20827a,isCompatible(com.android.dx.dex.code.DalvInsn),isCompatible(com.android.dx.dex.code.DalvInsn),8,0,@java.lang.Override public boolean isCompatible(com.android.dx.dex.code.DalvInsn insn) { if (!(insn instanceof com.android.dx.dex.code.MultiCstInsn)) { return false; } com.android.dx.dex.code.MultiCstInsn mci = ((com.android.dx.dex.code.MultiCstInsn) (insn)); if ((mci.getNumberOfConstants()) != 2) { return false; } int methodIdx = mci.getIndex(0); int protoIdx = mci.getIndex(1); if ((!(unsignedFitsInShort(methodIdx))) || (!(unsignedFitsInShort(protoIdx)))) { return false; } com.android.dx.rop.cst.Constant methodRef = mci.getConstant(0); if (!(methodRef instanceof com.android.dx.rop.cst.CstMethodRef)) { return false; } com.android.dx.rop.cst.Constant protoRef = mci.getConstant(1); if (!(protoRef instanceof com.android.dx.rop.cst.CstProtoRef)) { return false; } com.android.dx.rop.code.RegisterSpecList regs = mci.getRegisters(); return (com.android.dx.dex.code.form.Form45cc.wordCount(regs)) >= 0; },ecb08e75b7f74ec87aded28c30b8a7aefbba4cc8,isCompatible(com.android.dx.dex.code.DalvInsn),417124,286,302
294688,service_java_com_android_server_wifi_WifiServiceImpl.java,41.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean addPasspointConfiguration(android.net.wifi.hotspot2.PasspointConfiguration config) { return false; },90996cc36d835390660a49907cc0248c54b684f2,,addPasspointConfiguration(android.net.wifi.hotspot2.PasspointConfiguration),3,82,@java.lang.Override public boolean addPasspointConfiguration(android.net.wifi.hotspot2.PasspointConfiguration config) { return true; },ab82b92b75de9e88283e7b22ebdf50f2314a314c,addPasspointConfiguration(android.net.wifi.hotspot2.PasspointConfiguration),64276,31,31
334106,service_java_com_android_server_wifi_WifiConfigManager.java,67.0,"public boolean saveToStore(boolean forceWrite) { java.util.ArrayList<android.net.wifi.WifiConfiguration> sharedConfigurations = new java.util.ArrayList<>(); java.util.ArrayList<android.net.wifi.WifiConfiguration> userConfigurations = new java.util.ArrayList<>(); for (android.net.wifi.WifiConfiguration config : mConfiguredNetworks.valuesForAllUsers()) { if ((!(config.ephemeral)) && (!(config.isPasspoint()))) { if ((config.shared) || (!(com.android.server.wifi.WifiConfigurationUtil.doesUidBelongToAnyProfile(config.creatorUid, mUserManager.getProfiles(mCurrentUserId))))) { sharedConfigurations.add(config); } else { userConfigurations.add(config); } } } com.android.server.wifi.WifiConfigStoreData storeData = new com.android.server.wifi.WifiConfigStoreData(sharedConfigurations, userConfigurations, mDeletedEphemeralSSIDs); try { mWifiConfigStore.write(forceWrite, storeData); } catch (java.io.IOException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG, ""Writing to store failed. Saved networks maybe lost!"", e); return false; } catch (org.xmlpull.v1.XmlPullParserException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG, ""XML serialization for store failed. Saved networks maybe lost!"", e); return false; } return true; }",161140ba4c3571ff3172c291c044180ae193b5b1,"public boolean saveToStore(boolean forceWrite) { java.util.ArrayList<android.net.wifi.WifiConfiguration> sharedConfigurations = new java.util.ArrayList<>(); java.util.ArrayList<android.net.wifi.WifiConfiguration> userConfigurations = new java.util.ArrayList<>(); for (android.net.wifi.WifiConfiguration config : mConfiguredNetworks.valuesForAllUsers()) { if ((!(config.ephemeral)) && (!(config.isPasspoint()))) { if ((config.shared) || (!(com.android.server.wifi.WifiConfigurationUtil.doesUidBelongToAnyProfile(config.creatorUid, mUserManager.getProfiles(mCurrentUserId))))) { sharedConfigurations.add(config); } else { userConfigurations.add(config); } } } mWifiNetworkListStoreData.setSharedConfigurations(sharedConfigurations); mWifiNetworkListStoreData.setUserConfigurations(userConfigurations); mDeletedEphemeralSsidsStoreData.setSsidList(mDeletedEphemeralSSIDs); try { mWifiConfigStore.write(forceWrite); } catch (java.io.IOException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG, ""Writing to store failed. Saved networks maybe lost!"", e); return false; } catch (org.xmlpull.v1.XmlPullParserException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG, ""XML serialization for store failed. Saved networks maybe lost!"", e); return false; } return true; }",6d9f06f055693970f083c8db7ab6d2ef6fc61a9b,saveToStore(boolean),saveToStore(boolean),5,67,"public boolean saveToStore(boolean forceWrite) { java.util.ArrayList<android.net.wifi.WifiConfiguration> sharedConfigurations = new java.util.ArrayList<>(); java.util.ArrayList<android.net.wifi.WifiConfiguration> userConfigurations = new java.util.ArrayList<>(); for (android.net.wifi.WifiConfiguration config : mConfiguredNetworks.valuesForAllUsers()) { if ((!(config.ephemeral)) && (!(config.isPasspoint()))) { if ((config.shared) || (!(com.android.server.wifi.WifiConfigurationUtil.doesUidBelongToAnyProfile(config.creatorUid, mUserManager.getProfiles(mCurrentUserId))))) { sharedConfigurations.add(config); } else { userConfigurations.add(config); } } } mNetworkListStoreData.setSharedConfigurations(sharedConfigurations); mNetworkListStoreData.setUserConfigurations(userConfigurations); mDeletedEphemeralSsidsStoreData.setSsidList(mDeletedEphemeralSSIDs); try { mWifiConfigStore.write(forceWrite); } catch (java.io.IOException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG, ""Writing to store failed. Saved networks maybe lost!"", e); return false; } catch (org.xmlpull.v1.XmlPullParserException e) { android.util.Log.wtf(com.android.server.wifi.WifiConfigManager.TAG, ""XML serialization for store failed. Saved networks maybe lost!"", e); return false; } return true; }",f8434929d6ab8656e3037fdfd7dc962191dc16ad,saveToStore(boolean),384276,342,340
45002,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_configuration_ConfigurationChooser.java,48.0,public void onAlternateLayoutCreated() { org.eclipse.core.resources.IFile best = com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher.getBestFileMatch(this); if ((best != null) && (!(best.equals(mEditedFile)))) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher matcher = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher(this); matcher.adaptConfigSelection(true); mConfiguration.syncFolderConfig(); if ((mClient) != null) { mClient.changed(com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationClient.CHANGED_ALL); } } },dc10a97afb14d4ebf7be2fbf852102b78e2b68be,public void onAlternateLayoutCreated() { org.eclipse.core.resources.IFile best = com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher.getBestFileMatch(this); if ((best != null) && (!(best.equals(mEditedFile)))) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher matcher = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher(this); matcher.adaptConfigSelection(true); mConfiguration.syncFolderConfig(); if ((mClient) != null) { mClient.changed(com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration.CFG_ALL); } } },cb91efc66ca625792050189099b2a88ee26110bf,onAlternateLayoutCreated(),onAlternateLayoutCreated(),5,52,public void onAlternateLayoutCreated() { org.eclipse.core.resources.IFile best = com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher.getBestFileMatch(this); if ((best != null) && (!(best.equals(mEditedFile)))) { com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher matcher = new com.android.ide.eclipse.adt.internal.editors.layout.configuration.ConfigurationMatcher(this); matcher.adaptConfigSelection(true); mConfiguration.syncFolderConfig(); if ((mClient) != null) { mClient.changed(com.android.ide.eclipse.adt.internal.editors.layout.configuration.Configuration.MASK_ALL); } } },1a4d8f47307e5ddda5e2e7fcd283668e348eb348,onAlternateLayoutCreated(),187124,177,177
252478,java_tests_RsTest_src_com_android_rs_test_UT_kernel2d_oldstyle.java,0.0,"public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_kernel2d_oldstyle s = new com.android.rs.test.ScriptC_kernel2d_oldstyle(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_init_vars(A); s.forEach_xform(A, B); s.invoke_verify_xform(); s.invoke_kernel_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }",39320cdf0ba5c5dbbd678eb6ff1ba6bddf7b6f51,"public void run() { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create(mCtx); com.android.rs.test.ScriptC_kernel2d_oldstyle s = new com.android.rs.test.ScriptC_kernel2d_oldstyle(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_init_vars(A); s.forEach_xform(A, B); s.invoke_verify_xform(); s.invoke_kernel_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }",6ccfd0aae33a314fb47a68da6165458a9cdfb9fc,run(),run(),7,1,"public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_kernel2d_oldstyle s = new com.android.rs.test.ScriptC_kernel2d_oldstyle(pRS); pRS.setMessageHandler(mRsMessage); initializeGlobals(pRS, s); s.forEach_init_vars(A); s.forEach_xform(A, B); s.invoke_verify_xform(); s.invoke_kernel_test(); pRS.finish(); waitForMessage(); pRS.destroy(); }",39320cdf0ba5c5dbbd678eb6ff1ba6bddf7b6f51,run(),379498,147,153
162651,ddmlib_src_main_java_com_android_ddmlib_IDevice.java,52.0,"void removeForward(int localPort, int remotePort) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException;",33e27906edef9ba4e6bde43a000f310f986226ee,"void removeForward(int localPort, int remotePort) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException, java.lang.InterruptedException;",17b5220bda651c75fb30ea7eed15b05eb466653d,"removeForward(int,int)","removeForward(int,int)",4,52,"void removeForward(int localPort, int remotePort) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.TimeoutException, java.io.IOException;",33e27906edef9ba4e6bde43a000f310f986226ee,"removeForward(int,int)",352894,50,43
46210,eclipse_plugins_com.android.ide.eclipse.tests_src_com_android_ide_eclipse_adt_internal_refactorings_core_RenameResourceParticipantTest.java,,,,"private void checkRefactoring(@com.android.annotations.NonNull java.lang.Object[] testData, @com.android.annotations.NonNull java.lang.Object resource, @com.android.annotations.NonNull java.lang.String newName, @com.android.annotations.NonNull java.lang.String expected) throws java.lang.Exception { org.eclipse.core.resources.IProject project = createProject(testData); checkRefactoring(project, resource, newName, expected); }",5322b5525b93d27aa50b6f2df0ab39e0e4cc88aa,,"checkRefactoring(java.lang.Object[],java.lang.Object,java.lang.String,java.lang.String)",7,2,"private void checkRefactoring(@com.android.annotations.NonNull java.lang.Object[] testData, @com.android.annotations.NonNull java.lang.Object resource, boolean updateReferences, @com.android.annotations.NonNull java.lang.String newName, @com.android.annotations.NonNull java.lang.String expected) throws java.lang.Exception { org.eclipse.core.resources.IProject project = createProject(testData); checkRefactoring(project, resource, updateReferences, newName, expected); }",5706272c04f9f3d4849adf9df8f52bd38f9be43b,"checkRefactoring(java.lang.Object[],java.lang.Object,boolean,java.lang.String,java.lang.String)",447548,109,116
183938,core_java_android_security_net_config_ManifestConfigSource.java,,,,"public java.util.Set<android.util.Pair<android.security.net.config.Domain, android.security.net.config.NetworkSecurityConfig>> getPerDomainConfigs() { ensureInitialized(); return mConfigSource.getPerDomainConfigs(); }",293becb1866066ea6c7417fa997ebc63a35ea159,,getPerDomainConfigs(),2,2,"@java.lang.Override public java.util.Set<android.util.Pair<android.security.net.config.Domain, android.security.net.config.NetworkSecurityConfig>> getPerDomainConfigs() { return getConfigSource().getPerDomainConfigs(); }",75844d8da2ca1f4661f2e549950862d71951e775,getPerDomainConfigs(),289970,54,57
193986,ojluni_src_main_java_java_nio_charset_Charset.java,14.0,"private static java.nio.charset.Charset lookup2(java.lang.String charsetName) { java.lang.Object[] a; if (((a = java.nio.charset.Charset.cache2) != null) && (charsetName.equals(a[0]))) { java.nio.charset.Charset.cache2 = java.nio.charset.Charset.cache1; java.nio.charset.Charset.cache1 = a; return ((java.nio.charset.Charset) (a[1])); } java.nio.charset.Charset cs; if (((cs = libcore.icu.NativeConverter.charsetForName(charsetName)) != null) || ((cs = java.nio.charset.Charset.lookupViaProviders(charsetName)) != null)) { java.nio.charset.Charset.cache(charsetName, cs); return cs; } java.nio.charset.Charset.checkName(charsetName); return null; }",df7921fa7b4ddb8a132b389957610266df0b9a43,"private static java.nio.charset.Charset lookup2(java.lang.String charsetName) { java.nio.charset.Charset cs; synchronized(java.nio.charset.Charset.cache2) { if ((cs = java.nio.charset.Charset.cache2.get(charsetName)) != null) { java.nio.charset.Charset.cache1 = new java.lang.Object[]{ charsetName, cs }; return cs; } } if (((cs = libcore.icu.NativeConverter.charsetForName(charsetName)) != null) || ((cs = java.nio.charset.Charset.lookupViaProviders(charsetName)) != null)) { java.nio.charset.Charset.cache(charsetName, cs); return cs; } java.nio.charset.Charset.checkName(charsetName); return null; }",8586982dcaf662511220221cade4afc38058f28d,lookup2(java.lang.String),lookup2(java.lang.String),6,14,"private static java.nio.charset.Charset lookup2(java.lang.String charsetName) { java.nio.charset.Charset cs; synchronized(java.nio.charset.Charset.cache2) { if ((cs = java.nio.charset.Charset.cache2.get(charsetName)) != null) { java.nio.charset.Charset.cache1 = new java.util.AbstractMap.SimpleImmutableEntry<>(charsetName, cs); return cs; } } if (((cs = libcore.icu.NativeConverter.charsetForName(charsetName)) != null) || ((cs = java.nio.charset.Charset.lookupViaProviders(charsetName)) != null)) { java.nio.charset.Charset.cache(charsetName, cs); return cs; } java.nio.charset.Charset.checkName(charsetName); return null; }",06ac78764199bfb394d0f1001aec7ab68190f9d7,lookup2(java.lang.String),388562,179,183
253791,luni_src_main_java_libcore_io_ForwardingOs.java,87.0,"public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException { return os.sendfile(outFd, inFd, inOffset, byteCount); }",25d7ecb072dfe11a484a21bb27083b3b9b6ce5d1,"public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.util.MutableLong inOffset, long byteCount) throws libcore.io.ErrnoException { return os.sendfile(outFd, inFd, inOffset, byteCount); }",ceda31ebbf3dd097dad6afa90bdeda688e665f69,"sendfile(java.io.FileDescriptor,java.io.FileDescriptor,android.util.MutableLong,long)","sendfile(java.io.FileDescriptor,java.io.FileDescriptor,android.util.MutableLong,long)",8,84,"public long sendfile(java.io.FileDescriptor outFd, java.io.FileDescriptor inFd, android.util.MutableLong inOffset, long byteCount) throws android.system.ErrnoException { return os.sendfile(outFd, inFd, inOffset, byteCount); }",25d7ecb072dfe11a484a21bb27083b3b9b6ce5d1,"sendfile(java.io.FileDescriptor,java.io.FileDescriptor,android.util.MutableLong,long)",494757,67,66
137351,rs_java_android_renderscript_RenderScript.java,8.0,"native void rsnAllocationData2D(long con, long id, int xoff, int yoff, int mip, int face, int w, int h, java.lang.Object d, int sizeBytes, int dt);",e7bf2b200139ac550cf28637e1b460cd3ba1cb70,"native void rsnAllocationData2D(long con, long id, int xoff, int yoff, int mip, int face, int w, int h, java.lang.Object d, int sizeBytes, int dt, int mSize, boolean usePadding, byte[] buffer);",42cc15e5a55c43cfba2da409803c0f1bca135b88,"rsnAllocationData2D(long,long,int,int,int,int,int,int,java.lang.Object,int,int)","rsnAllocationData2D(long,long,int,int,int,int,int,int,java.lang.Object,int,int,int,boolean,byte[])",5,86,"native void rsnAllocationData2D(long con, long id, int xoff, int yoff, int mip, int face, int w, int h, java.lang.Object d, int sizeBytes, int dt, int mSize, boolean usePadding);",56d6c69d4856a34ac51fe0003ba79587ff287af2,"rsnAllocationData2D(long,long,int,int,int,int,int,int,java.lang.Object,int,int,int,boolean)",432177,63,59
96685,build-system_gradle_src_fromGradle_groovy_com_android_build_gradle_internal_test_report_PageRenderer.java,8.0,"protected void addDeviceAndVariantTabs() { if ((results.getResultsPerDevices().size()) > 1) { addTab(""Devices"", new org.gradle.internal.ErroringAction<org.gradle.api.internal.html.SimpleHtmlWriter>() { @java.lang.Override public void doExecute(org.gradle.api.internal.html.SimpleHtmlWriter writer) throws java.io.IOException { renderCompositeResults(writer, results.getResultsPerDevices(), ""Devices""); } }); } if ((results.getResultsPerVariants().size()) > 1) { addTab(""Variants"", new org.gradle.internal.ErroringAction<org.gradle.api.internal.html.SimpleHtmlWriter>() { @java.lang.Override public void doExecute(org.gradle.api.internal.html.SimpleHtmlWriter writer) throws java.io.IOException { renderCompositeResults(writer, results.getResultsPerVariants(), ""Variants""); } }); } }",822aa15837b8ff02ccf69e1a2ddd9b1aa6bdd164,"protected void addDeviceAndVariantTabs() { if ((results.getResultsPerDevices().size()) > 1) { addTab(""Devices"", new org.gradle.internal.ErroringAction<com.android.build.gradle.internal.test.report.SimpleHtmlWriter>() { @java.lang.Override public void doExecute(com.android.build.gradle.internal.test.report.SimpleHtmlWriter writer) throws java.io.IOException { renderCompositeResults(writer, results.getResultsPerDevices(), ""Devices""); } }); } if ((results.getResultsPerVariants().size()) > 1) { addTab(""Variants"", new org.gradle.internal.ErroringAction<com.android.build.gradle.internal.test.report.SimpleHtmlWriter>() { @java.lang.Override public void doExecute(com.android.build.gradle.internal.test.report.SimpleHtmlWriter writer) throws java.io.IOException { renderCompositeResults(writer, results.getResultsPerVariants(), ""Variants""); } }); } }",95fda82b4fe08bf2c96e7628ac5cb21318453299,addDeviceAndVariantTabs(),addDeviceAndVariantTabs(),4,13,"protected void addDeviceAndVariantTabs() { if ((results.getResultsPerDevices().size()) > 1) { addTab(""Devices"", new com.android.build.gradle.internal.test.report.ErroringAction<com.android.build.gradle.internal.test.report.SimpleHtmlWriter>() { @java.lang.Override public void doExecute(com.android.build.gradle.internal.test.report.SimpleHtmlWriter writer) throws java.io.IOException { renderCompositeResults(writer, results.getResultsPerDevices(), ""Devices""); } }); } if ((results.getResultsPerVariants().size()) > 1) { addTab(""Variants"", new com.android.build.gradle.internal.test.report.ErroringAction<com.android.build.gradle.internal.test.report.SimpleHtmlWriter>() { @java.lang.Override public void doExecute(com.android.build.gradle.internal.test.report.SimpleHtmlWriter writer) throws java.io.IOException { renderCompositeResults(writer, results.getResultsPerVariants(), ""Variants""); } }); } }",69060a06be5cb6876b9d6c095c56e60cb4b795a0,addDeviceAndVariantTabs(),383486,220,236
50022,luni_src_main_java_org_apache_harmony_xnet_provider_jsse_NativeCrypto.java,107.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static native void SSL_use_OpenSSL_PrivateKey_for_tls_channel_id(int ssl, int pkey);",8cd36176d8edf35c2629d4aaa7a0c9eac19f36e0,,"SSL_use_OpenSSL_PrivateKey_for_tls_channel_id(int,int)",7,155,"public static native void SSL_use_OpenSSL_PrivateKey_for_tls_channel_id(int ssl, int pkey) throws javax.net.ssl.SSLException;",03c31a2a4eac3557bd6060a37f1a5e62f520387f,"SSL_use_OpenSSL_PrivateKey_for_tls_channel_id(int,int)",304079,28,38
91995,luni_src_main_java_libcore_io_Os.java,99.0,"public int readv(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws java.io.InterruptedIOException, libcore.io.ErrnoException;",1bb85d493c3755d8d2c2d623a193340fb2f50750,"public int readv(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws android.os.ErrnoException, java.io.InterruptedIOException;",f669620116d8d04a0c6914cb19cc338cc0c615b8,"readv(java.io.FileDescriptor,java.lang.Object[],int[],int[])","readv(java.io.FileDescriptor,java.lang.Object[],int[],int[])",3,99,"public int readv(java.io.FileDescriptor fd, java.lang.Object[] buffers, int[] offsets, int[] byteCounts) throws android.system.ErrnoException, java.io.InterruptedIOException;",28058d71fd2ca4b5732f441ec178d37ed481302b,"readv(java.io.FileDescriptor,java.lang.Object[],int[],int[])",170206,45,45
139143,jack-tests_tests_com_android_jack_shrob_ObfuscationWithoutMappingTests.java,1.0,"@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.lang.String testPackageName = ""com.android.jack.shrob.test"" + testNumber; java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(testPackageName); com.android.jack.test.toolchain.JackApiToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class); com.android.jack.shrob.spec.Flags flags = new com.android.jack.shrob.spec.Flags(); toolchain.setShrobFlags(flags); com.android.jack.shrob.proguard.GrammarActions.parse((""proguard.flags"" + flagNumber), testFolder.getAbsolutePath(), flags); java.io.File refFolder = new java.io.File(testFolder, ""refsObfuscationWithoutMapping""); toolchain.addProperty(NameProviderFactory.NAMEPROVIDER.getName(), ""rot13""); toolchain.addProperty(Options.METHOD_FILTER.getName(), ""supported-methods""); java.io.File candidateOutputMapping = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""mapping"", "".txt""); java.io.File refOutputMapping = new java.io.File(refFolder, ((""expected-"" + flagNumber) + "".txt"")); flags.setOutputMapping(candidateOutputMapping); flags.setPrintMapping(true); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, ""jack"")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorMapping(candidateOutputMapping, refOutputMapping)); }",3400afe20c9084eb8986ad5c034c067b7698d711,"@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.lang.String testPackageName = ""com.android.jack.shrob.test"" + testNumber; java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(testPackageName); com.android.jack.test.toolchain.JackApiToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class); java.io.File refFolder = new java.io.File(testFolder, ""refsObfuscationWithoutMapping""); toolchain.addProperty(NameProviderFactory.NAMEPROVIDER.getName(), ""rot13""); toolchain.addProperty(Options.METHOD_FILTER.getName(), ""supported-methods""); java.io.File candidateOutputMapping = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""mapping"", "".txt""); java.io.File refOutputMapping = new java.io.File(refFolder, ((""expected-"" + flagNumber) + "".txt"")); java.io.File proguardFlagsFile = addOptionsToFlagsFile(new java.io.File(testFolder, (""proguard.flags"" + flagNumber)), testFolder, ("" -printmapping "" + (candidateOutputMapping.getAbsolutePath()))); toolchain.addProguardFlags(proguardFlagsFile); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, ""jack"")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorMapping(candidateOutputMapping, refOutputMapping)); }",60a3cc9547dce0be4b25c59098cb919f837b029a,"runTest(java.lang.String,java.lang.String,java.lang.String)","runTest(java.lang.String,java.lang.String,java.lang.String)",5,1,"@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.lang.String testPackageName = ""com.android.jack.shrob.test"" + testNumber; java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir(testPackageName); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File refFolder = new java.io.File(testFolder, ""refsObfuscationWithoutMapping""); toolchain.addProperty(NameProviderFactory.NAMEPROVIDER.getName(), ""rot13""); toolchain.addProperty(Options.METHOD_FILTER.getName(), ""supported-methods""); java.io.File candidateOutputMapping = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""mapping"", "".txt""); java.io.File refOutputMapping = new java.io.File(refFolder, ((""expected-"" + flagNumber) + "".txt"")); java.io.File proguardFlagsFile = addOptionsToFlagsFile(new java.io.File(testFolder, (""proguard.flags"" + flagNumber)), testFolder, ("" -printmapping "" + (candidateOutputMapping.getAbsolutePath()))); toolchain.addProguardFlags(proguardFlagsFile); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, ""jack"")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorMapping(candidateOutputMapping, refOutputMapping)); }",bdefca4a814c3df18e71de3e44b41273412c666e,"runTest(java.lang.String,java.lang.String,java.lang.String)",414004,466,466
71102,src_com_android_mms_ui_ClassZeroActivity.java,1.0,"public void onClick(android.content.DialogInterface dialog, int whichButton) { dialog.dismiss(); finish(); }",1bf293f38445d5ac868f7e9c01dfb64bb9eece8f,"public void onClick(android.content.DialogInterface dialog, int whichButton) { dialog.dismiss(); messageQueue.remove(0); if ((messageQueue.size()) == 0) { finish(); } else { displayZeroMessage(messageQueue.get(0)); } }",577fe53f6d1123235d01691509f6c39b49ee9084,"onClick(android.content.DialogInterface,int)","onClick(android.content.DialogInterface,int)",7,2,"public void onClick(android.content.DialogInterface dialog, int whichButton) { dialog.dismiss(); processNextMessage(); }",bb5bad497bb6013847e7862a836be11d7d13c451,"onClick(android.content.DialogInterface,int)",361062,53,25
91995,luni_src_main_java_libcore_io_BlockGuardOs.java,43.0,"@java.lang.Override public void fchown(java.io.FileDescriptor fd, int uid, int gid) throws libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.fchown(fd, uid, gid); }",631748b025c98cf00fa3ce6e1d0e7c02dbf907d8,"@java.lang.Override public void fchown(java.io.FileDescriptor fd, int uid, int gid) throws android.os.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.fchown(fd, uid, gid); }",bdc4799f86f844207334bc52bb5878319b8f25e3,"fchown(java.io.FileDescriptor,int,int)","fchown(java.io.FileDescriptor,int,int)",3,43,"@java.lang.Override public void fchown(java.io.FileDescriptor fd, int uid, int gid) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.fchown(fd, uid, gid); }",6446c28ed2bc039b0fec99c5a02534fb21e00c12,"fchown(java.io.FileDescriptor,int,int)",170362,65,65
330971,service_java_com_android_server_wifi_hotspot2_PasspointEventHandler.java,2.0,"public void notifyANQPDone(long bssid, boolean success) { java.util.Map<com.android.server.wifi.hotspot2.anqp.Constants.ANQPElementType, com.android.server.wifi.hotspot2.anqp.ANQPElement> elements = null; if (success) { java.lang.String bssData = mSupplicantHook.scanResult(com.android.server.wifi.hotspot2.Utils.macToString(bssid)); try { elements = com.android.server.wifi.hotspot2.PasspointEventHandler.parseWPSData(bssData); android.util.Log.d(com.android.server.wifi.hotspot2.Utils.hs2LogTag(getClass()), java.lang.String.format(""Successful ANQP response for %012x: %s"", bssid, elements)); } catch (java.io.IOException | java.nio.BufferUnderflowException e) { android.util.Log.e(com.android.server.wifi.hotspot2.Utils.hs2LogTag(getClass()), (((""Failed to parse ANQP: "" + (e.toString())) + "": "") + bssData)); } } mCallbacks.onANQPResponse(bssid, elements); }",d65005456e6f7342cd46af828039c7fed8795e91,"public void notifyANQPDone(long bssid, boolean success) { java.util.Map<com.android.server.wifi.hotspot2.anqp.Constants.ANQPElementType, com.android.server.wifi.hotspot2.anqp.ANQPElement> elements = null; if (success) { java.lang.String bssData = """"; try { elements = com.android.server.wifi.hotspot2.PasspointEventHandler.parseWPSData(bssData); android.util.Log.d(com.android.server.wifi.hotspot2.Utils.hs2LogTag(getClass()), java.lang.String.format(""Successful ANQP response for %012x: %s"", bssid, elements)); } catch (java.io.IOException | java.nio.BufferUnderflowException e) { android.util.Log.e(com.android.server.wifi.hotspot2.Utils.hs2LogTag(getClass()), (((""Failed to parse ANQP: "" + (e.toString())) + "": "") + bssData)); } } mCallbacks.onANQPResponse(bssid, elements); }",fa87e30663e8dda7b929ad763c3d6f496554e4ce,"notifyANQPDone(long,boolean)","notifyANQPDone(long,boolean)",17,2,"public void notifyANQPDone(long bssid, boolean success) { java.util.Map<com.android.server.wifi.hotspot2.anqp.Constants.ANQPElementType, com.android.server.wifi.hotspot2.anqp.ANQPElement> elements = null; if (success) { java.lang.String bssData = mSupplicantHook.scanResult(com.android.server.wifi.hotspot2.Utils.macToString(bssid)); try { elements = com.android.server.wifi.hotspot2.PasspointEventHandler.parseWPSData(bssData); android.util.Log.d(com.android.server.wifi.hotspot2.Utils.hs2LogTag(getClass()), java.lang.String.format(""Successful ANQP response for %012x: %s"", bssid, elements)); } catch (java.io.IOException | java.nio.BufferUnderflowException e) { android.util.Log.e(com.android.server.wifi.hotspot2.Utils.hs2LogTag(getClass()), (((""Failed to parse ANQP: "" + (e.toString())) + "": "") + bssData)); } } mCallbacks.onANQPResponse(bssid, elements); }",d65005456e6f7342cd46af828039c7fed8795e91,"notifyANQPDone(long,boolean)",79629,260,287
233727,jack-tests_tests_com_android_jack_optimizations_valuepropagation_ValuePropagationTests.java,,,,"private com.android.jack.optimizations.valuepropagation.CompilationProperties defaultProperties() { return CompilationProperties.EMPTY.withPreserveJls(false).withPreserveReflections(false).with(Optimizations.FieldValuePropagation.ENABLE.getName(), true).with(Optimizations.ArgumentValuePropagation.ENABLE.getName(), true); }",7efc8ecf23a0af259783b1c4ec475a4d00e5f6b5,,defaultProperties(),7,10,"@javax.annotation.Nonnull private com.android.jack.optimizations.valuepropagation.CompilationProperties defaultProperties() { return CompilationProperties.EMPTY.excludeJillToolchain().withPreserveJls(false).withPreserveReflections(false).with(Optimizations.FieldValuePropagation.ENSURE_TYPE_INITIALIZERS.getName(), java.lang.Boolean.FALSE).with(Optimizations.FieldValuePropagation.REMOVE_NULL_CHECKS.getName(), java.lang.Boolean.TRUE).with(Optimizations.FieldValuePropagation.ENABLE.getName(), java.lang.Boolean.TRUE).with(Optimizations.ArgumentValuePropagation.ENABLE.getName(), java.lang.Boolean.TRUE); }",e0e6d824165f5665b8f086a56dbbd734fc7ed542,defaultProperties(),438867,70,148
528430,tests_src_com_android_bluetooth_btservice_PhonePolicyTest.java,2.0,"@org.junit.Test public void testReconnectOnPartialConnect() { android.bluetooth.BluetoothAdapter inst = android.bluetooth.BluetoothAdapter.getDefaultAdapter(); android.bluetooth.BluetoothDevice device = inst.getRemoteDevice(""00:01:02:03:04:05""); com.android.bluetooth.btservice.AdapterService mockAdapterService = mock(com.android.bluetooth.btservice.AdapterService.class); com.android.bluetooth.btservice.ServiceFactory mockServiceFactory = mock(com.android.bluetooth.btservice.ServiceFactory.class); com.android.bluetooth.hfp.HeadsetService mockHeadsetService = mock(com.android.bluetooth.hfp.HeadsetService.class); com.android.bluetooth.a2dp.A2dpService mockA2dpService = mock(com.android.bluetooth.a2dp.A2dpService.class); when(mockServiceFactory.getHeadsetService()).thenReturn(mockHeadsetService); when(mockServiceFactory.getA2dpService()).thenReturn(mockA2dpService); android.bluetooth.BluetoothDevice[] bondedDevices = new android.bluetooth.BluetoothDevice[1]; bondedDevices[0] = device; when(mockAdapterService.getBondedDevices()).thenReturn(bondedDevices); when(mockHeadsetService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mockA2dpService.getPriority(device)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mockAdapterService.getState()).thenReturn(BluetoothAdapter.STATE_ON); when(mockAdapterService.getMainLooper()).thenReturn(mHandlerThread.getLooper()); when(mockAdapterService.isMock()).thenReturn(true); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mockAdapterService, mockServiceFactory); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, BluetoothProfile.STATE_DISCONNECTED); intent.putExtra(BluetoothProfile.EXTRA_STATE, BluetoothProfile.STATE_CONNECTED); intent.addFlags(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND); injector.onReceive(null, intent); java.util.ArrayList<android.bluetooth.BluetoothDevice> hsConnectedDevices = new java.util.ArrayList<>(); hsConnectedDevices.add(device); when(mockHeadsetService.getConnectedDevices()).thenReturn(hsConnectedDevices); when(mockA2dpService.getConnectionState(device)).thenReturn(BluetoothProfile.STATE_DISCONNECTED); verify(mockA2dpService, timeout(com.android.bluetooth.btservice.PhonePolicyTest.RETRY_TIMEOUT).times(1)).connect(eq(device)); }",adbeb45b4c201ee0809505d03cbe6f3ce275c051,"@org.junit.Test public void testReconnectOnPartialConnect() { android.bluetooth.BluetoothDevice[] bondedDevices = new android.bluetooth.BluetoothDevice[1]; bondedDevices[0] = mTestDevice; when(mAdapterService.getBondedDevices()).thenReturn(bondedDevices); when(mHeadsetService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mA2dpService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mAdapterService.getState()).thenReturn(BluetoothAdapter.STATE_ON); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mAdapterService, mServiceFactory); java.util.ArrayList<android.bluetooth.BluetoothDevice> hsConnectedDevices = new java.util.ArrayList<>(); hsConnectedDevices.add(mTestDevice); when(mHeadsetService.getConnectedDevices()).thenReturn(hsConnectedDevices); when(mA2dpService.getConnectionState(mTestDevice)).thenReturn(BluetoothProfile.STATE_DISCONNECTED); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mTestDevice); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, BluetoothProfile.STATE_DISCONNECTED); intent.putExtra(BluetoothProfile.EXTRA_STATE, BluetoothProfile.STATE_CONNECTED); intent.addFlags(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND); injector.onReceive(null, intent); executeDelayedMessages(2); verify(mA2dpService, times(1)).connect(eq(mTestDevice)); }",8bf408ce5a85c548e5f5589d061739f26ebd6b06,testReconnectOnPartialConnect(),testReconnectOnPartialConnect(),4,2,"@org.junit.Test public void testReconnectOnPartialConnect() { android.bluetooth.BluetoothDevice[] bondedDevices = new android.bluetooth.BluetoothDevice[1]; bondedDevices[0] = mTestDevice; when(mAdapterService.getBondedDevices()).thenReturn(bondedDevices); when(mHeadsetService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mA2dpService.getPriority(mTestDevice)).thenReturn(BluetoothProfile.PRIORITY_AUTO_CONNECT); when(mAdapterService.getState()).thenReturn(BluetoothAdapter.STATE_ON); com.android.bluetooth.btservice.PhonePolicy phPol = new com.android.bluetooth.btservice.PhonePolicy(mAdapterService, mServiceFactory); java.util.ArrayList<android.bluetooth.BluetoothDevice> hsConnectedDevices = new java.util.ArrayList<>(); hsConnectedDevices.add(mTestDevice); when(mHeadsetService.getConnectedDevices()).thenReturn(hsConnectedDevices); when(mA2dpService.getConnectionState(mTestDevice)).thenReturn(BluetoothProfile.STATE_DISCONNECTED); android.content.BroadcastReceiver injector = phPol.getBroadcastReceiver(); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHeadset.ACTION_CONNECTION_STATE_CHANGED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, mTestDevice); intent.putExtra(BluetoothProfile.EXTRA_PREVIOUS_STATE, BluetoothProfile.STATE_DISCONNECTED); intent.putExtra(BluetoothProfile.EXTRA_STATE, BluetoothProfile.STATE_CONNECTED); intent.addFlags(Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND); injector.onReceive(null, intent); executePendingMessages(2); verify(mA2dpService, times(1)).connect(eq(mTestDevice)); }",dd2b7068f9160980d664a44673f6e76c6425bd6e,testReconnectOnPartialConnect(),227153,384,384
91995,luni_src_main_java_android_os_Os.java,,,,"public static void bind(java.io.FileDescriptor fd, java.net.InetAddress address, int port) throws android.os.ErrnoException, java.net.SocketException { Libcore.os.bind(fd, address, port); }",4734bf6a7828b5e96c92a578eff616a197e2a280,,"bind(java.io.FileDescriptor,java.net.InetAddress,int)",3,88,"public static void bind(java.io.FileDescriptor fd, java.net.InetAddress address, int port) throws android.system.ErrnoException, java.net.SocketException { Libcore.os.bind(fd, address, port); }",b7d68f5644d05601a047c894be9b6c8c56f57f5d,"bind(java.io.FileDescriptor,java.net.InetAddress,int)",170013,53,53
118413,jack-tests_src_com_android_jack_test_toolchain_JackCliToolchain.java,5.0,"@java.lang.Override @javax.annotation.Nonnull public void libToLib(@javax.annotation.Nonnull java.io.File[] in, @javax.annotation.Nonnull java.io.File out, boolean zipFiles) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(""java""); args.add(""-cp""); args.add(jackPrebuilt.getAbsolutePath()); if ((incrementalFolder) != null) { args.add(com.android.jack.experimental.incremental.Main.class.getName()); args.add(""--incremental-folder""); args.add(incrementalFolder.getAbsolutePath()); } else { args.add(com.android.jack.Main.class.getName()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if ((jarjarRules) != null) { args.add(""--config-jarjar""); args.add(jarjarRules.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add(""--config-proguard""); args.add(flags.getAbsolutePath()); } for (java.io.File staticlib : in) { args.add(""--import""); args.add(staticlib.getAbsolutePath()); } for (java.io.File staticLib : staticLibs) { args.add(""--import""); args.add(staticLib.getAbsolutePath()); } if (zipFiles) { args.add(""--output-jack""); } else { args.add(""--output-jack-dir""); } args.add(out.getAbsolutePath()); com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(outRedirectStream); exec.setOut(errRedirectStream); exec.setVerbose(true); if (!(exec.run())) { throw new java.lang.RuntimeException(""Jack compiler exited with an error""); } }",1e3cda4cdefe72a25ad098df3eb68915e5afab1b,"@java.lang.Override @javax.annotation.Nonnull public void libToLib(@javax.annotation.Nonnull java.io.File[] in, @javax.annotation.Nonnull java.io.File out, boolean zipFiles) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(""java""); args.add(""-cp""); args.add(jackPrebuilt.getAbsolutePath()); if ((incrementalFolder) != null) { args.add(com.android.jack.experimental.incremental.Main.class.getName()); args.add(""--incremental-folder""); args.add(incrementalFolder.getAbsolutePath()); } else { args.add(com.android.jack.Main.class.getName()); } for (java.io.File res : resImport) { args.add(""--import-res""); args.add(res.getPath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if ((jarjarRules) != null) { args.add(""--config-jarjar""); args.add(jarjarRules.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add(""--config-proguard""); args.add(flags.getAbsolutePath()); } for (java.io.File staticlib : in) { args.add(""--import""); args.add(staticlib.getAbsolutePath()); } for (java.io.File staticLib : staticLibs) { args.add(""--import""); args.add(staticLib.getAbsolutePath()); } if (zipFiles) { args.add(""--output-jack""); } else { args.add(""--output-jack-dir""); } args.add(out.getAbsolutePath()); com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(outRedirectStream); exec.setOut(errRedirectStream); exec.setVerbose(true); if (!(exec.run())) { throw new java.lang.RuntimeException(""Jack compiler exited with an error""); } }",e67f06df4263a124acaeab67be60e49432e03243,"libToLib(java.io.File[],java.io.File,boolean)","libToLib(java.io.File[],java.io.File,boolean)",6,5,"@java.lang.Override @javax.annotation.Nonnull public void libToLib(@javax.annotation.Nonnull java.io.File[] in, @javax.annotation.Nonnull java.io.File out, boolean zipFiles) throws java.lang.Exception { java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(""java""); args.add(""-cp""); args.add(jackPrebuilt.getAbsolutePath()); if ((incrementalFolder) != null) { args.add(""--incremental-folder""); args.add(incrementalFolder.getAbsolutePath()); } args.add(com.android.jack.Main.class.getName()); for (java.io.File res : resImport) { args.add(""--import-resource""); args.add(res.getPath()); } com.android.jack.test.toolchain.JackCliToolchain.addProperties(properties, args); if ((jarjarRules) != null) { args.add(""--config-jarjar""); args.add(jarjarRules.getAbsolutePath()); } for (java.io.File flags : proguardFlags) { args.add(""--config-proguard""); args.add(flags.getAbsolutePath()); } for (java.io.File staticlib : in) { args.add(""--import""); args.add(staticlib.getAbsolutePath()); } for (java.io.File staticLib : staticLibs) { args.add(""--import""); args.add(staticLib.getAbsolutePath()); } if (zipFiles) { args.add(""--output-jack""); } else { args.add(""--output-jack-dir""); } args.add(out.getAbsolutePath()); com.android.jack.util.ExecuteFile exec = new com.android.jack.util.ExecuteFile(args.toArray(new java.lang.String[args.size()])); exec.setErr(outRedirectStream); exec.setOut(errRedirectStream); exec.setVerbose(true); if (!(exec.run())) { throw new java.lang.RuntimeException(""Jack compiler exited with an error""); } }",32e64c85258d4c26483874059bf36dd87825fd37,"libToLib(java.io.File[],java.io.File,boolean)",70836,476,452
510195,test_959-invoke-polymorphic-accessors_src_Main.java,46.0,"static void setLong(java.lang.invoke.MethodHandle m, Main.ValueHolder v, long value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertActualAndExpectedMatch(exceptionThrown, expectFailure); }",d9dc9385601fac936c17a1ebb50a13c7351cdfc6,"static void setLong(java.lang.invoke.MethodHandle m, Main.ValueHolder v, long value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEqual(exceptionThrown, expectFailure); }",128d9383200343ba291cc0819ee96c71aaaf0f4c,"setLong(java.lang.invoke.MethodHandle,Main$ValueHolder,long,boolean)","setLong(java.lang.invoke.MethodHandle,Main$ValueHolder,long,boolean)",3,44,"static void setLong(java.lang.invoke.MethodHandle m, Main.ValueHolder v, long value, boolean expectFailure) throws java.lang.Throwable { boolean exceptionThrown = false; try { if (v == null) { m.invokeExact(value); } else { m.invokeExact(v, value); } } catch (java.lang.invoke.WrongMethodTypeException e) { exceptionThrown = true; } Main.Tester.assertEquals(exceptionThrown, expectFailure); }",7844b24cc7716417b16dcb282a7159b83e15f641,"setLong(java.lang.invoke.MethodHandle,Main$ValueHolder,long,boolean)",228875,104,103
81324,harmony-tests_src_test_java_org_apache_harmony_tests_java_net_MulticastSocketTest.java,17.0,"private void test_leaveGroupLjava_net_SocketAddressLjava_net_NetworkInterface(java.net.InetAddress group, java.net.InetAddress group2) throws java.lang.Exception { java.lang.String msg = null; java.net.SocketAddress groupSockAddr = null; java.net.SocketAddress groupSockAddr2 = null; java.net.MulticastSocket mss = new java.net.MulticastSocket(0); groupSockAddr = new java.net.InetSocketAddress(group, mss.getLocalPort()); mss.joinGroup(groupSockAddr, null); mss.leaveGroup(groupSockAddr, null); try { mss.leaveGroup(groupSockAddr, null); fail(""Did not get exception when trying to leave group that was already left""); } catch (java.io.IOException expected) { } groupSockAddr2 = new java.net.InetSocketAddress(group2, mss.getLocalPort()); mss.joinGroup(groupSockAddr, networkInterface1); try { mss.leaveGroup(groupSockAddr2, networkInterface1); fail(""Did not get exception when trying to leave group that was never joined""); } catch (java.io.IOException expected) { } mss.leaveGroup(groupSockAddr, networkInterface1); if (atLeastTwoInterfaces) { mss.joinGroup(groupSockAddr, networkInterface1); try { mss.leaveGroup(groupSockAddr, networkInterface2); fail((((((""Did not get exception when trying to leave group on wrong interface "" + ""joined on ["") + (networkInterface1)) + ""] left on ["") + (networkInterface2)) + ""]"")); } catch (java.io.IOException expected) { } } }",9d1303907615bd9ac56dd5c468f3de85fb4174da,"private void test_leaveGroupLjava_net_SocketAddressLjava_net_NetworkInterface(java.net.InetAddress group, java.net.InetAddress group2) throws java.lang.Exception { java.lang.String msg = null; java.net.SocketAddress groupSockAddr = null; java.net.SocketAddress groupSockAddr2 = null; java.net.MulticastSocket mss = new java.net.MulticastSocket(0); groupSockAddr = new java.net.InetSocketAddress(group, mss.getLocalPort()); mss.joinGroup(groupSockAddr, null); mss.leaveGroup(groupSockAddr, null); try { mss.leaveGroup(groupSockAddr, null); fail(""Did not get exception when trying to leave group that was already left""); } catch (java.io.IOException expected) { } groupSockAddr2 = new java.net.InetSocketAddress(group2, mss.getLocalPort()); mss.joinGroup(groupSockAddr, networkInterface1); try { mss.leaveGroup(groupSockAddr2, networkInterface1); fail(""Did not get exception when trying to leave group that was never joined""); } catch (java.io.IOException expected) { } mss.leaveGroup(groupSockAddr, networkInterface1); mss.joinGroup(groupSockAddr, networkInterface1); try { mss.leaveGroup(groupSockAddr, loopbackInterface); fail((((((""Did not get exception when trying to leave group on wrong interface "" + ""joined on ["") + (networkInterface1)) + ""] left on ["") + (loopbackInterface)) + ""]"")); } catch (java.io.IOException expected) { } }",3834882987940c9f6dd0497d0c08c7519eb19f96,"test_leaveGroupLjava_net_SocketAddressLjava_net_NetworkInterface(java.net.InetAddress,java.net.InetAddress)","test_leaveGroupLjava_net_SocketAddressLjava_net_NetworkInterface(java.net.InetAddress,java.net.InetAddress)",2,16,"private void test_leaveGroupLjava_net_SocketAddressLjava_net_NetworkInterface(java.net.InetAddress group, java.net.InetAddress group2) throws java.lang.Exception { java.net.SocketAddress groupSockAddr = null; java.net.SocketAddress groupSockAddr2 = null; java.net.MulticastSocket mss = new java.net.MulticastSocket(0); groupSockAddr = new java.net.InetSocketAddress(group, mss.getLocalPort()); mss.joinGroup(groupSockAddr, null); mss.leaveGroup(groupSockAddr, null); try { mss.leaveGroup(groupSockAddr, null); fail(""Did not get exception when trying to leave group that was already left""); } catch (java.io.IOException expected) { } groupSockAddr2 = new java.net.InetSocketAddress(group2, mss.getLocalPort()); mss.joinGroup(groupSockAddr, networkInterface1); try { mss.leaveGroup(groupSockAddr2, networkInterface1); fail(""Did not get exception when trying to leave group that was never joined""); } catch (java.io.IOException expected) { } mss.leaveGroup(groupSockAddr, networkInterface1); mss.joinGroup(groupSockAddr, networkInterface1); try { mss.leaveGroup(groupSockAddr, loopbackInterface); fail((((((""Did not get exception when trying to leave group on wrong interface "" + ""joined on ["") + (networkInterface1)) + ""] left on ["") + (loopbackInterface)) + ""]"")); } catch (java.io.IOException expected) { } }",7098e4888e6a9721976d9689bd4509bd4b59d74d,"test_leaveGroupLjava_net_SocketAddressLjava_net_NetworkInterface(java.net.InetAddress,java.net.InetAddress)",119432,349,340
342756,src_java_com_android_internal_telephony_DeviceStateMonitor.java,,,,"@java.lang.Override public void handleMessage(android.os.Message msg) { if (com.android.internal.telephony.DeviceStateMonitor.DBG) log((""handleMessage msg="" + msg)); switch (msg.what) { case com.android.internal.telephony.DeviceStateMonitor.EVENT_RIL_CONNECTED : onRilConnected(); break; default : updateDeviceState(msg.what, ((msg.arg1) != 0)); } }",ac28d6aa3e6ea1ca1c1c3a1ea0813790af3ece10,,handleMessage(android.os.Message),18,4,"@java.lang.Override public void handleMessage(android.os.Message msg) { log((""handleMessage msg="" + msg), false); switch (msg.what) { case com.android.internal.telephony.DeviceStateMonitor.EVENT_RIL_CONNECTED : onRilConnected(); break; default : updateDeviceState(msg.what, ((msg.arg1) != 0)); } }",4b26cd47dae875e7a046ebf5b56c4cf9d6192d15,handleMessage(android.os.Message),507385,102,87
258270,jack-tests_tests_com_android_jack_optimizations_valuepropagation_ValuePropagationTests.java,12.0,"@org.junit.Test @java.lang.Runtime public void test002() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.valuepropagation.test002""; java.lang.String aType = ""Lcom/android/jack/optimizations/valuepropagation/test002/jack/A;""; java.lang.String bType = ""Lcom/android/jack/optimizations/valuepropagation/test002/jack/B;""; java.lang.String cType = ""Lcom/android/jack/optimizations/valuepropagation/test002/jack/C;""; java.lang.String dType = ""Lcom/android/jack/optimizations/valuepropagation/test002/jack/D;""; compileAndValidate(test, defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""<init>(I)V"", dalvik(test, ""A.init.dalvik"")).andAlso(missing(""<clinit>()V""))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""<init>(I)V"", dalvik(test, ""B.init.dalvik"")).insert(""<clinit>()V"", dalvik(test, ""B.clinit.dalvik""))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""<init>()V"", dalvik(test, ""C.init.dalvik"")).insert(""foo()I"", dalvik(test, ""C.foo.dalvik""))).insert(dType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""foo()I"", dalvik(test, ""D.foo.dalvik"")))); }",efd78a6772e8dfc708a842416280733fba16fd82,"@org.junit.Test @java.lang.Runtime public void test002() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.valuepropagation.test002""; java.lang.String aType = ""Lcom/android/jack/optimizations/valuepropagation/test002/jack/A;""; java.lang.String bType = ""Lcom/android/jack/optimizations/valuepropagation/test002/jack/B;""; java.lang.String cType = ""Lcom/android/jack/optimizations/valuepropagation/test002/jack/C;""; java.lang.String dType = ""Lcom/android/jack/optimizations/valuepropagation/test002/jack/D;""; compileAndValidate(defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""<init>(I)V"", dalvik(test, ""A.init.dalvik"")).andAlso(missing(""<clinit>()V""))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""<init>(I)V"", dalvik(test, ""B.init.dalvik"")).insert(""<clinit>()V"", dalvik(test, ""B.clinit.dalvik""))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""<init>()V"", dalvik(test, ""C.init.dalvik"")).insert(""foo()I"", dalvik(test, ""C.foo.dalvik""))).insert(dType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""foo()I"", dalvik(test, ""D.foo.dalvik""))), test); }",0ee4eb93fbb59823cf789a14c2c08b631be7dcb7,test002(),test002(),5,12,"@org.junit.Test @java.lang.Runtime public void test002() throws java.lang.Exception { java.lang.String test = ""com.android.jack.optimizations.valuepropagation.test002""; java.lang.String aType = ""Lcom/android/jack/optimizations/valuepropagation/test002/jack/A;""; java.lang.String bType = ""Lcom/android/jack/optimizations/valuepropagation/test002/jack/B;""; java.lang.String cType = ""Lcom/android/jack/optimizations/valuepropagation/test002/jack/C;""; java.lang.String dType = ""Lcom/android/jack/optimizations/valuepropagation/test002/jack/D;""; compileAndValidate(test, defaultProperties(), new com.android.jack.test.dex.DexFileTypesValidator().insert(aType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""<init>(I)V"", dalvik(test, ""A.init.dalvik"")).andAlso(missing(""<clinit>()V""))).insert(bType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""<init>(I)V"", dalvik(test, ""B.init.dalvik"")).insert(""<clinit>()V"", dalvik(test, ""B.clinit.dalvik""))).insert(cType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""<init>()V"", dalvik(test, ""C.init.dalvik"")).insert(""foo()I"", dalvik(test, ""C.foo.dalvik""))).insert(dType, new com.android.jack.test.dex.DexTypeMethodsValidator().insert(""foo()I"", dalvik(test, ""D.foo.dalvik"")))); }",efd78a6772e8dfc708a842416280733fba16fd82,test002(),32051,405,405
73670,harmony-tests_src_test_java_org_apache_harmony_tests_java_net_DatagramSocketTest.java,20.0,"public void test_setSoTimeoutI() throws java.lang.Exception { java.net.DatagramSocket ds = new java.net.DatagramSocket(); ds.setSoTimeout(100); assertTrue(""Set incorrect timeout"", ((ds.getSoTimeout()) >= 100)); }",66175313d2e772ff8c7d79e0d81524ab59f5eae4,"public void test_bindLjava_net_SocketAddress() throws java.lang.Exception { int[] ports = tests.support.Support_PortManager.getNextPortsForUDP(3); int serverPortNumber = ports[1]; java.net.InetAddress localHost = java.net.InetAddress.getLocalHost(); java.net.InetSocketAddress localAddress1 = new java.net.InetSocketAddress(localHost, ports[0]); java.net.DatagramSocket theSocket = new java.net.DatagramSocket(localAddress1); assertEquals(localAddress1, theSocket.getLocalSocketAddress()); java.net.InetSocketAddress localAddress2 = new java.net.InetSocketAddress(localHost, ports[2]); java.net.DatagramSocket ds = new java.net.DatagramSocket(((java.net.SocketAddress) (null))); ds.bind(localAddress2); org.apache.harmony.tests.java.net.DatagramSocketTest.DatagramServer server = new org.apache.harmony.tests.java.net.DatagramSocketTest.DatagramServer(serverPortNumber, localHost); server.start(); java.lang.Thread.sleep(1000); ds.connect(new java.net.InetSocketAddress(localHost, serverPortNumber)); byte[] sendBytes = new byte[]{ 'T', 'e', 's', 't', 0 }; java.net.DatagramPacket send = new java.net.DatagramPacket(sendBytes, sendBytes.length); ds.send(send); java.lang.Thread.sleep(1000); ds.close(); assertEquals(localAddress2, server.rdp.getSocketAddress()); if (server != null) { server.stopServer(); } }",8cdf1ce405920046e270268c0b2618832b812683,test_setSoTimeoutI(),test_bindLjava_net_SocketAddress(),2,56,"public void testConnect_connectToSelf() throws java.lang.Exception { java.net.InetAddress localHost = java.net.InetAddress.getLocalHost(); final java.net.DatagramSocket ds = new java.net.DatagramSocket(0); ds.connect(localHost, ds.getLocalPort()); java.net.DatagramPacket send = new java.net.DatagramPacket(new byte[10], 10, localHost, ds.getLocalPort()); ds.send(send); java.net.DatagramPacket receive = new java.net.DatagramPacket(new byte[20], 20); ds.setSoTimeout(2000); ds.receive(receive); ds.close(); assertEquals(10, receive.getLength()); assertEquals(localHost, receive.getAddress()); }",c92b93aba11b680e736f4c4b9d1d23a1d6847783,testConnect_connectToSelf(),95945,345,146
508455,test_1939-proxy-frames_src_art_Test1939.java,,,,"public static void run() throws java.lang.Exception { art.Locals.EnableLocalVariableAccess(); final art.Test1939.TestCase[] MAIN_TEST_CASES = new art.Test1939.TestCase[]{ }; art.Test1939.TestCase test = new art.Test1939.TestCase(art.Test1939.getProxyObject(art.Test1939.Foo.class), art.Test1939.getMethod(art.Test1939.Foo.class, ""InterfaceProxyMethod"")); test.exec(art.Test1939.NamedGet(""This"", Locals::GetLocalInstance)); test.exec(art.Test1939.NamedGet(""LocalReference0"", ( t, d) -> art.Locals.GetLocalVariableObject(t, d, 0))); test.exec(art.Test1939.NamedGet(""ProxyFrameLocation"", ( t, d) -> java.lang.Long.valueOf(art.Test1939.GetFrameLocation(t, d)))); test.exec(art.Test1939.NamedGet(""ProxyFrameMethod"", art.Test1939::GetFrameMethod)); }",b3d8694be91280e823c5bc243eb330611541d58d,,run(),3,7,"public static void run() throws java.lang.Exception { art.Locals.EnableLocalVariableAccess(); art.Test1939.TestCase test = new art.Test1939.TestCase(art.Test1939.getProxyObject(art.Test1939.Foo.class), art.Test1939.getMethod(art.Test1939.Foo.class, ""InterfaceProxyMethod"")); test.exec(art.Test1939.NamedGet(""This"", Locals::GetLocalInstance)); test.exec(art.Test1939.NamedGet(""LocalReference0"", ( t, d) -> art.Locals.GetLocalVariableObject(t, d, 0))); test.exec(art.Test1939.NamedGet(""ProxyFrameLocation"", ( t, d) -> java.lang.Long.valueOf(art.Test1939.GetFrameLocation(t, d)))); test.exec(art.Test1939.NamedGet(""ProxyFrameMethod"", art.Test1939::GetFrameMethod)); }",6288be8604bb7e67d953dd7f56fe77a4a346df15,run(),348668,247,219
73831,core_java_android_os_Debug.java,77.0,"public static void startMethodTracing(java.lang.String traceName) { android.os.Debug.startMethodTracing(traceName, 0, 0); }",2d7f61873e0d9c6293baf1447c110b103330495e,"public static void startMethodTracing(java.lang.String traceName) { android.os.Debug.startMethodTracing(traceName, 0, 0, false, 0); }",972e13a6a073e4225dd41a43c8a94e168767803c,startMethodTracing(java.lang.String),startMethodTracing(java.lang.String),3,77,"public static void startMethodTracing(java.lang.String traceName) { android.os.Debug.startMethodTracing(traceName, 0, 0); }",2d7f61873e0d9c6293baf1447c110b103330495e,startMethodTracing(java.lang.String),235206,35,32
358929,core_java_android_net_NetworkRequest.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public android.net.NetworkRequest.Builder setNetworkSpecifier(java.lang.String networkSpecifier) { return setNetworkSpecifier(new android.net.StringNetworkSpecifier(networkSpecifier)); },a20a67ab80c88b6219961f5d6694d758721ae64a,,setNetworkSpecifier(java.lang.String),13,22,public android.net.NetworkRequest.Builder setNetworkSpecifier(java.lang.String networkSpecifier) { return setNetworkSpecifier((android.text.TextUtils.isEmpty(networkSpecifier) ? null : new android.net.StringNetworkSpecifier(networkSpecifier))); },6c68bc91b22163dc05cfb5d855cd298bec919c9c,setNetworkSpecifier(java.lang.String),8187,40,56
630846,src_java_com_android_internal_telephony_ims_ImsServiceFeatureQueryManager.java,,,,"public void startQuery(android.content.ComponentName name, java.lang.String intentFilter) { if (mActiveQueries.containsKey(name)) { return; } com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.ImsServiceFeatureQuery query = new com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.ImsServiceFeatureQuery(mContext, name, intentFilter); mActiveQueries.put(name, query); query.execute(); }",8727f61863207b5ac997a77bee673f5d1b5db772,,"startQuery(android.content.ComponentName,java.lang.String)",10,3,"public boolean startQuery(android.content.ComponentName name, java.lang.String intentFilter) { synchronized(mLock) { if (mActiveQueries.containsKey(name)) { return true; } com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.ImsServiceFeatureQuery query = new com.android.internal.telephony.ims.ImsServiceFeatureQueryManager.ImsServiceFeatureQuery(name, intentFilter); mActiveQueries.put(name, query); return query.start(); } }",7e6a58f260080642c424e731cc4ace1a81ecb43d,"startQuery(android.content.ComponentName,java.lang.String)",156093,107,114
183690,jack_src_com_android_jack_backend_dex_DalvikProtectedInnerChecker.java,,,,"@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JInstanceOf x) { check(x.getTestType(), x); }",54ca37fba9495238854a4c93e00a919b49e4b8eb,,endVisit(com.android.jack.ir.ast.JInstanceOf),13,2,"@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JInstanceOf instanceOf) { check(instanceOf.getTestType(), instanceOf); }",4448c4b41f86928e61adbb00cb4c58754ca519f6,endVisit(com.android.jack.ir.ast.JInstanceOf),213292,42,44
132745,sched_tests_com_android_sched_vfs_VFSTest.java,7.0,"@org.junit.Test public void testWriteZipVFS() throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotSetPermissionException, com.android.sched.util.file.FileAlreadyExistsException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotDirectoryException, com.android.sched.util.file.WrongPermissionException, java.io.IOException { java.io.File file = null; com.android.sched.vfs.InputOutputVFS outputZipVFS = null; com.android.sched.vfs.InputZipVFS inputZipVFS = null; try { file = java.io.File.createTempFile(""vfs"", "".zip""); java.lang.String path = file.getAbsolutePath(); outputZipVFS = new com.android.sched.vfs.GenericInputOutputVFS(new com.android.sched.vfs.WriteZipFS(new com.android.sched.util.file.OutputZipFile(path, null, com.android.sched.util.file.FileOrDirectory.Existence.MAY_EXIST, com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE))); testOutputVFS(outputZipVFS); outputZipVFS.close(); inputZipVFS = new com.android.sched.vfs.InputZipVFS(new com.android.sched.util.file.InputZipFile(path, null, com.android.sched.util.file.FileOrDirectory.Existence.MUST_EXIST, com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE)); testInputVFS(inputZipVFS); } finally { if (outputZipVFS != null) { outputZipVFS.close(); } if (inputZipVFS != null) { inputZipVFS.close(); } if (file != null) { junit.framework.Assert.assertTrue(file.delete()); } } }",03587012f2f9a822b3471f00b20f53454ddecc87,"@org.junit.Test public void testWriteZipVFS() throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotSetPermissionException, com.android.sched.util.file.FileAlreadyExistsException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotDirectoryException, com.android.sched.util.file.WrongPermissionException, java.io.IOException { java.io.File file = null; com.android.sched.vfs.InputOutputVFS ioVFS1 = null; com.android.sched.vfs.InputVFS iVFS2 = null; try { file = java.io.File.createTempFile(""vfs"", "".zip""); java.lang.String path = file.getAbsolutePath(); ioVFS1 = new com.android.sched.vfs.GenericInputOutputVFS(new com.android.sched.vfs.WriteZipFS(new com.android.sched.util.file.OutputZipFile(path, null, com.android.sched.util.file.FileOrDirectory.Existence.MAY_EXIST, com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE))); testOutputVFS(ioVFS1); ioVFS1.close(); iVFS2 = new com.android.sched.vfs.InputZipVFS(new com.android.sched.util.file.InputZipFile(path, null, com.android.sched.util.file.FileOrDirectory.Existence.MUST_EXIST, com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE)); testInputVFS(iVFS2); checkZipLocations(iVFS2); } finally { if (ioVFS1 != null) { ioVFS1.close(); } if (iVFS2 != null) { iVFS2.close(); } if (file != null) { junit.framework.Assert.assertTrue(file.delete()); } } }",ddba2522e809b1d656eeb67bb5dacd545bcfa258,testWriteZipVFS(),testWriteZipVFS(),2,7,"@org.junit.Test public void testWriteZipVFS() throws com.android.sched.util.file.CannotCreateFileException, com.android.sched.util.file.CannotSetPermissionException, com.android.sched.util.file.FileAlreadyExistsException, com.android.sched.util.file.NoSuchFileException, com.android.sched.util.file.NotDirectoryException, com.android.sched.util.file.WrongPermissionException, java.io.IOException { java.io.File file = null; com.android.sched.vfs.InputOutputVFS ioVFS1 = null; com.android.sched.vfs.InputVFS iVFS2 = null; try { file = java.io.File.createTempFile(""vfs"", "".zip""); java.lang.String path = file.getAbsolutePath(); ioVFS1 = new com.android.sched.vfs.GenericInputOutputVFS(new com.android.sched.vfs.WriteZipFS(new com.android.sched.util.file.OutputZipFile(path, null, com.android.sched.util.file.FileOrDirectory.Existence.MAY_EXIST, com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE))); testOutputVFS(ioVFS1); ioVFS1.close(); iVFS2 = new com.android.sched.vfs.GenericInputVFS(new com.android.sched.vfs.ReadZipFS(new com.android.sched.util.file.InputZipFile(path, null, com.android.sched.util.file.FileOrDirectory.Existence.MUST_EXIST, com.android.sched.util.file.FileOrDirectory.ChangePermission.NOCHANGE))); testInputVFS(iVFS2); checkZipLocations(iVFS2); } finally { if (ioVFS1 != null) { ioVFS1.close(); } if (iVFS2 != null) { iVFS2.close(); } if (file != null) { junit.framework.Assert.assertTrue(file.delete()); } } }",1814db41947322aeddc736314acae0a34d503e2f,testWriteZipVFS(),269220,432,445
650541,tests_telephonytests_src_com_android_internal_telephony_uicc_UiccSlotTest.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @android.support.test.filters.SmallTest public void testUpdateIccCardStatus() { int phoneId = 0; mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.update(mSimulatedCommands, mIccCardStatus, phoneId); verify(mSubInfoRecordUpdater, times(1)).updateInternalIccState(IccCardConstants.INTENT_VALUE_ICC_ABSENT, null, phoneId); assertEquals(IccCardStatus.CardState.CARDSTATE_ABSENT, mUiccSlot.getCardState()); assertEquals(null, mUiccSlot.getUiccCard()); mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_PRESENT; mUiccSlot.update(mSimulatedCommands, mIccCardStatus, phoneId); verify(mTelephonyComponentFactory, times(1)).makeUiccProfile(anyObject(), eq(mSimulatedCommands), eq(mIccCardStatus), anyInt(), anyObject()); assertEquals(IccCardStatus.CardState.CARDSTATE_PRESENT, mUiccSlot.getCardState()); assertTrue(((mUiccSlot.getUiccCard()) != null)); mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.update(mSimulatedCommands, mIccCardStatus, phoneId); verify(mSubInfoRecordUpdater, times(2)).updateInternalIccState(IccCardConstants.INTENT_VALUE_ICC_ABSENT, null, phoneId); verify(mUiccProfile, times(1)).dispose(); assertEquals(IccCardStatus.CardState.CARDSTATE_ABSENT, mUiccSlot.getCardState()); assertEquals(null, mUiccSlot.getUiccCard()); }",9635cf5c346a049a0a7ab33f518a23eef1c7cc34,,testUpdateIccCardStatus(),2,4,"@org.junit.Test @android.support.test.filters.SmallTest public void testUpdateAbsentState() { int phoneId = 0; mIccCardStatus.mCardState = IccCardStatus.CardState.CARDSTATE_ABSENT; mUiccSlot.update(mSimulatedCommands, mIccCardStatus, phoneId); verify(mSubInfoRecordUpdater).updateInternalIccState(IccCardConstants.INTENT_VALUE_ICC_ABSENT, null, phoneId); assertEquals(IccCardStatus.CardState.CARDSTATE_ABSENT, mUiccSlot.getCardState()); assertNull(mUiccSlot.getUiccCard()); }",5d3b0b394afeced9b99da68226a5ba1da537173c,testUpdateAbsentState(),403810,413,148
401516,src_com_android_cellbroadcastreceiver_CellBroadcastAlertDialog.java,2.0,"private void updateAlertText(android.telephony.CellBroadcastMessage message) { int titleId = com.android.cellbroadcastreceiver.CellBroadcastResources.getDialogTitleResource(getApplicationContext(), message); setTitle(titleId); ((android.widget.TextView) (findViewById(R.id.alertTitle))).setText(titleId); ((android.widget.TextView) (findViewById(R.id.message))).setText(message.getMessageBody()); if ((mMessageList.size()) > 1) { ((android.widget.TextView) (findViewById(R.id.dismissButton))).setText(((""OK (1/"" + (mMessageList.size())) + "")"")); } else if ((mMessageList.size()) == 1) { ((android.widget.TextView) (findViewById(R.id.dismissButton))).setText(""OK""); } com.android.cellbroadcastreceiver.CellBroadcastAlertReminder.queueAlertReminder(this, true); }",2c6d0674022350649d5e3bb32191726a35eadaa1,"private void updateAlertText(android.telephony.CellBroadcastMessage message) { int titleId = com.android.cellbroadcastreceiver.CellBroadcastResources.getDialogTitleResource(getApplicationContext(), message); java.lang.String title = getText(titleId).toString(); android.widget.TextView titleTextView = findViewById(R.id.alertTitle); if (getApplicationContext().getResources().getBoolean(R.bool.show_date_time_title)) { titleTextView.setSingleLine(false); title += ""\n"" + (message.getDateString(getApplicationContext())); } setTitle(title); titleTextView.setText(title); ((android.widget.TextView) (findViewById(R.id.message))).setText(message.getMessageBody()); if ((mMessageList.size()) > 1) { ((android.widget.TextView) (findViewById(R.id.dismissButton))).setText(((""OK (1/"" + (mMessageList.size())) + "")"")); } else if ((mMessageList.size()) == 1) { ((android.widget.TextView) (findViewById(R.id.dismissButton))).setText(""OK""); } com.android.cellbroadcastreceiver.CellBroadcastAlertReminder.queueAlertReminder(this, true); }",ba0fd64d76bc620cbebcf68435e4dd65114e8c87,updateAlertText(android.telephony.CellBroadcastMessage),updateAlertText(android.telephony.CellBroadcastMessage),2,2,"private void updateAlertText(android.telephony.CellBroadcastMessage message) { int titleId = com.android.cellbroadcastreceiver.CellBroadcastResources.getDialogTitleResource(getApplicationContext(), message); java.lang.String title = getText(titleId).toString(); android.widget.TextView titleTextView = ((android.widget.TextView) (findViewById(R.id.alertTitle))); if (getApplicationContext().getResources().getBoolean(R.bool.show_date_time_title)) { titleTextView.setSingleLine(false); title += ""\n"" + (message.getDateString(getApplicationContext())); } setTitle(title); titleTextView.setText(title); ((android.widget.TextView) (findViewById(R.id.message))).setText(message.getMessageBody()); if ((mMessageList.size()) > 1) { ((android.widget.TextView) (findViewById(R.id.dismissButton))).setText(((""OK (1/"" + (mMessageList.size())) + "")"")); } else if ((mMessageList.size()) == 1) { ((android.widget.TextView) (findViewById(R.id.dismissButton))).setText(""OK""); } com.android.cellbroadcastreceiver.CellBroadcastAlertReminder.queueAlertReminder(this, true); }",5af01d1eb2b088417364652c2f7d49dd7215a99f,updateAlertText(android.telephony.CellBroadcastMessage),95647,269,278
237621,jack-tests_tests_com_android_jack_java8_DefaultMethodTest.java,22.0,@org.junit.Test public void testDefaultMethod017() throws java.lang.Exception { run(DEFAULTMETHOD017); },df3806244abde5d0982cbeff20139a761e1efe98,@org.junit.Test @java.lang.Runtime public void testDefaultMethod017() throws java.lang.Exception { run(DEFAULTMETHOD017); },41a29713d9d26696e5d38c1c573db93870c9329c,testDefaultMethod017(),testDefaultMethod017(),11,22,@org.junit.Test @java.lang.Runtime(from = RuntimeVersion.N) public void testDefaultMethod017() throws java.lang.Exception { run(DEFAULTMETHOD017); },e04b9adada32eb66a4350532b909461c1d00fc0c,testDefaultMethod017(),273910,35,43
91995,luni_src_main_java_android_os_Os.java,,,,"public static void listen(java.io.FileDescriptor fd, int backlog) throws android.os.ErrnoException { Libcore.os.listen(fd, backlog); }",9f8b075021eec509c7b6ed62d90e63aacb10b890,,"listen(java.io.FileDescriptor,int)",3,72,"public static void listen(java.io.FileDescriptor fd, int backlog) throws android.system.ErrnoException { Libcore.os.listen(fd, backlog); }",da5c7b8c90fceced60eeaa3d4bd523b18cef935c,"listen(java.io.FileDescriptor,int)",170052,39,39
91995,luni_src_main_java_android_os_Os.java,,,,"public static void munlock(long address, long byteCount) throws android.os.ErrnoException { Libcore.os.munlock(address, byteCount); }",2931a28f0ec770858df1d980012643795b14bdd3,,"munlock(long,long)",3,110,"public static void munlock(long address, long byteCount) throws android.system.ErrnoException { Libcore.os.munlock(address, byteCount); }",aeb94168a07cbf3c36f9dcce84458529a1e9cd25,"munlock(long,long)",169975,37,37
583630,src_com_android_bips_BuiltInPrintService.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.String getDescription(DiscoveredPrinter printer) { if ((com.android.bips.p2p.P2pUtils.isP2p(printer)) || (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(this, printer))) { return getString(R.string.wifi_direct); } java.lang.String host = printer.path.getHost().replaceAll("":[0-9]+"", """"); if (!(android.text.TextUtils.isEmpty(printer.location))) { return getString(R.string.printer_description, host, printer.location); } else { return host; } }",d1fd42ae2fc258d9ebe9717aeae6ffa92aada5cd,,getDescription(com.android.bips.discovery.DiscoveredPrinter),4,8,"public java.lang.String getDescription(com.android.bips.discovery.DiscoveredPrinter printer) { if ((com.android.bips.p2p.P2pUtils.isP2p(printer)) || (com.android.bips.p2p.P2pUtils.isOnConnectedInterface(this, printer))) { return getString(R.string.wifi_direct); } java.lang.String host = printer.getHost(); if (!(android.text.TextUtils.isEmpty(printer.location))) { return getString(R.string.printer_description, host, printer.location); } else { return host; } }",cc619669b3cf4853ae6da2d5cbf585a1a8d720e1,getDescription(com.android.bips.discovery.DiscoveredPrinter),33285,144,145
153181,test_422-type-conversion_src_Main.java,29.0,static float $opt$IntToFloat(int a) { if (Main.doThrow) throw new java.lang.Error(); return ((float) (a)); },746f43a6813ed91e81cf8847e7a0a307dfbf2146,static float $opt$noinline$IntToFloat(int a) { return ((float) (a)); },b2452438e4ed4f58d19a2cd68e78de67b355e1d8,$opt$IntToFloat(int),$opt$noinline$IntToFloat(int),5,25,static float $opt$noinline$IntToFloat(int a) { if (Main.doThrow) throw new java.lang.Error(); return ((float) (a)); },040a9a623c35d9ab4648c4b71e97b7b9bda6c272,$opt$noinline$IntToFloat(int),516537,26,40
216245,src_com_android_bluetooth_btservice_AdapterService.java,154.0,"public boolean setRemoteAlias(android.bluetooth.BluetoothDevice device, java.lang.String name) { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ""setRemoteAlias() - Not allowed for non-active user""); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.setRemoteAlias(device, name); }",39d8c4f88291ae4283ae444e89379925f773fc4f,"public boolean setRemoteAlias(android.bluetooth.BluetoothDevice device, java.lang.String name) { if (!(com.android.bluetooth.Utils.checkCallerAllowManagedProfiles(mService))) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ""setRemoteAlias() - Not allowed for non-active user""); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.setRemoteAlias(device, name); }",33f3c538358f6824e53f94bcc35cbbdf6b1281cc,"setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)","setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)",4,153,"public boolean setRemoteAlias(android.bluetooth.BluetoothDevice device, java.lang.String name) { if (!(com.android.bluetooth.Utils.checkCaller())) { android.util.Log.w(com.android.bluetooth.btservice.AdapterService.TAG, ""setRemoteAlias() - Not allowed for non-active user""); return false; } com.android.bluetooth.btservice.AdapterService service = getService(); if (service == null) return false; return service.setRemoteAlias(device, name); }",39d8c4f88291ae4283ae444e89379925f773fc4f,"setRemoteAlias(android.bluetooth.BluetoothDevice,java.lang.String)",248501,117,111
581468,src_java_com_android_internal_telephony_RIL.java,12.0,"@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SLOT_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.getSimSlotsStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getIccSlotStatus"", e); } } } }",87a9705b856960cf9693f876c96f62f70c4d5d3c,"@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); riljLog(""getIccSlotsStatus""); if (radioProxy != null) { riljLog(""getIccSlotsStatus: radioProxy != null""); android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { riljLog(""getIccSlotsStatus: radioProxy12 == null""); if (result != null) { riljLog(""getIccSlotsStatus: result != null""); android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SLOT_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.getSimSlotsStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getIccSlotStatus"", e); } } } }",2ebe1bd39d0b63592cb96843c0999b5cd6c82868,getIccSlotsStatus(android.os.Message),getIccSlotsStatus(android.os.Message),7,12,"@java.lang.Override public void getIccSlotsStatus(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_2.IRadio radioProxy12 = android.hardware.radio.V1_2.IRadio.castFrom(radioProxy); if (radioProxy12 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_SLOT_STATUS, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy12.getSimSlotsStatus(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getIccSlotStatus"", e); } } } }",87a9705b856960cf9693f876c96f62f70c4d5d3c,getIccSlotsStatus(android.os.Message),456989,372,313
16621,apps_CtsVerifier_src_com_android_cts_verifier_PassFailButtonsClickHandlers.java,,,,"public static void setTestResultAndFinish(android.app.Activity activity, android.view.View target) { switch (target.getId()) { case R.id.pass_button : com.android.cts.verifier.TestResult.setPassedResult(activity); break; case R.id.fail_button : com.android.cts.verifier.TestResult.setFailedResult(activity); break; default : throw new java.lang.IllegalArgumentException((""Unknown id: "" + (target.getId()))); } activity.finish(); }",295b9f8a878b6d113ac98c7760b653f79f8b7bf4,,"setTestResultAndFinish(android.app.Activity,android.view.View)",2,0,"private static void setTestResultAndFinish(android.app.Activity activity, android.view.View target) { switch (target.getId()) { case R.id.pass_button : com.android.cts.verifier.TestResult.setPassedResult(activity); break; case R.id.fail_button : com.android.cts.verifier.TestResult.setFailedResult(activity); break; default : throw new java.lang.IllegalArgumentException((""Unknown id: "" + (target.getId()))); } activity.finish(); }",ae8417a066044a0a8b4b7f2a411f7a89d8ab2d5d,"setTestResultAndFinish(android.app.Activity,android.view.View)",457478,117,117
180122,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_ClassType_NewInstanceStringTest.java,,,,"@java.lang.Override public void provideConstructorArguments(java.util.List<org.apache.harmony.jpda.tests.framework.jdwp.Value> constructorArguments) { long debuggeeClassId = getClassIDBySignature(getDebuggeeClassSignature()); long byteArrayFieldId = checkField(debuggeeClassId, ""BYTE_ARRAY""); long charsetFieldId = checkField(debuggeeClassId, ""CHARSET""); org.apache.harmony.jpda.tests.framework.jdwp.Value byteArrayValue = debuggeeWrapper.vmMirror.getReferenceTypeValue(debuggeeClassId, byteArrayFieldId); org.apache.harmony.jpda.tests.framework.jdwp.Value charsetValue = debuggeeWrapper.vmMirror.getReferenceTypeValue(debuggeeClassId, charsetFieldId); constructorArguments.add(byteArrayValue); constructorArguments.add(new org.apache.harmony.jpda.tests.framework.jdwp.Value(0)); constructorArguments.add(new org.apache.harmony.jpda.tests.framework.jdwp.Value(1)); constructorArguments.add(charsetValue); }",2446b1e2a14bdf6df492705583967b7077aae7b5,,provideConstructorArguments(java.util.List),2,23,"@java.lang.Override public void provideConstructorArguments(java.util.List<org.apache.harmony.jpda.tests.framework.jdwp.Value> constructorArguments) { long debuggeeClassId = getClassIDBySignature(getDebuggeeClassSignature()); org.apache.harmony.jpda.tests.framework.jdwp.Value byteArrayValue = getStaticFieldValue(debuggeeClassId, ""BYTE_ARRAY""); org.apache.harmony.jpda.tests.framework.jdwp.Value charsetValue = getStaticFieldValue(debuggeeClassId, ""CHARSET""); constructorArguments.add(byteArrayValue); constructorArguments.add(new org.apache.harmony.jpda.tests.framework.jdwp.Value(0)); constructorArguments.add(new org.apache.harmony.jpda.tests.framework.jdwp.Value(1)); constructorArguments.add(charsetValue); }",0d1a6ca32199f648b9818d17393810226c241ac4,provideConstructorArguments(java.util.List),31343,250,198
106751,luni_src_test_java_libcore_java_util_CalendarTest.java,5.0,"public void test_nullLocale() { assertEquals(java.util.Calendar.getInstance(java.util.Locale.getDefault()), java.util.Calendar.getInstance(((java.util.Locale) (null)))); assertEquals(java.util.Calendar.getInstance(java.util.TimeZone.getDefault(), java.util.Locale.getDefault()), java.util.Calendar.getInstance(java.util.TimeZone.getDefault(), null)); assertEquals(new java.util.GregorianCalendar(java.util.Locale.getDefault()), new java.util.GregorianCalendar(((java.util.Locale) (null)))); }",948b51715766a1c75e4130c768a7a821fde66b49,"public void test_nullLocale() { assertCalendarEquals(java.util.Calendar.getInstance(java.util.Locale.getDefault()), java.util.Calendar.getInstance(((java.util.Locale) (null)))); assertCalendarEquals(java.util.Calendar.getInstance(java.util.TimeZone.getDefault(), java.util.Locale.getDefault()), java.util.Calendar.getInstance(java.util.TimeZone.getDefault(), null)); assertCalendarEquals(new java.util.GregorianCalendar(java.util.Locale.getDefault()), new java.util.GregorianCalendar(((java.util.Locale) (null)))); }",8abbcb6293fc514dc9d0529290373ed222de448f,test_nullLocale(),test_nullLocale(),2,5,"public void test_nullLocale() { assertCalendarConfigEquals(java.util.Calendar.getInstance(java.util.Locale.getDefault()), java.util.Calendar.getInstance(((java.util.Locale) (null)))); assertCalendarConfigEquals(java.util.Calendar.getInstance(java.util.TimeZone.getDefault(), java.util.Locale.getDefault()), java.util.Calendar.getInstance(java.util.TimeZone.getDefault(), null)); assertCalendarConfigEquals(new java.util.GregorianCalendar(java.util.Locale.getDefault()), new java.util.GregorianCalendar(((java.util.Locale) (null)))); }",79d1b82e58acd3d5f6f1bfe31cb21a807281681f,test_nullLocale(),173997,136,139
41166,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_AdtPlugin.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void refreshSdk() { com.android.ide.eclipse.adt.internal.sdk.Sdk sdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent(); if (sdk == null) { return; } boolean changed = ((sdk.getSdkLocation()) == null) || (!(sdk.getSdkLocation().equals(com.android.ide.eclipse.adt.internal.preferences.AdtPrefs.getPrefs().getOsSdkFolder()))); if (!changed) { changed = sdk.haveTargetsChanged(); if (changed) com.android.ide.eclipse.adt.AdtPlugin.printToConsole(""DEBUG"", ""sdk targets changed""); } if (changed) { reparseSdk(); } }",f96904febdaad66656b7cd1046666d7c5a6b9f87,,refreshSdk(),3,2,"public void refreshSdk() { final com.android.ide.eclipse.adt.internal.sdk.Sdk sdk = com.android.ide.eclipse.adt.internal.sdk.Sdk.getCurrent(); if (sdk == null) { return; } org.eclipse.core.runtime.jobs.Job job = new org.eclipse.core.runtime.jobs.Job(""Check Android SDK"") { @java.lang.Override protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { boolean changed = ((sdk.getSdkLocation()) == null) || (!(sdk.getSdkLocation().equals(com.android.ide.eclipse.adt.internal.preferences.AdtPrefs.getPrefs().getOsSdkFolder()))); if (!changed) { changed = sdk.haveTargetsChanged(); } if (changed) { monitor.setTaskName(""Reload Android SDK""); reparseSdk(); } monitor.done(); return org.eclipse.core.runtime.Status.OK_STATUS; } }; job.setPriority(Job.SHORT); job.schedule(); }",d9e07b8aee035aac13ce00dce78f0140f1e674c2,refreshSdk(),405164,160,237
210105,jack_src_com_android_jack_library_JackLibraryFactory.java,1.0,@javax.annotation.Nonnull private static java.util.Properties loadLibraryProperties(@javax.annotation.Nonnull com.android.sched.vfs.InputVFS vfs) throws com.android.jack.library.NotJackLibraryException { java.util.Properties libraryProperties = new java.util.Properties(); try { com.android.sched.vfs.InputVFile libProp = vfs.getRootInputVDir().getInputVFile(JackLibrary.LIBRARY_PROPERTIES_VPATH); libraryProperties.load(libProp.getInputStream()); } catch (java.io.IOException e) { throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } return libraryProperties; },df57229aa14044e64bd5f5fbba85a642072201fc,"@javax.annotation.Nonnull private static java.util.Properties loadLibraryProperties(@javax.annotation.Nonnull com.android.sched.vfs.InputVFS vfs) throws com.android.jack.library.NotJackLibraryException { java.util.Properties libraryProperties = new java.util.Properties(); try { com.android.sched.vfs.InputVFile libProp = vfs.getRootInputVDir().getInputVFile(JackLibrary.LIBRARY_PROPERTIES_VPATH); java.io.InputStream inputStream = null; try { inputStream = libProp.getInputStream(); libraryProperties.load(inputStream); } finally { if (inputStream != null) { try { inputStream.close(); } catch (java.io.IOException e) { com.android.jack.library.JackLibraryFactory.logger.log(java.util.logging.Level.WARNING, (""Failed to close "" + (libProp.getLocation().getDescription()))); } } } } catch (java.io.IOException e) { throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } return libraryProperties; }",3ab0857ce85a63f8b7948714f0927d53a5ad9e97,loadLibraryProperties(com.android.sched.vfs.InputVFS),loadLibraryProperties(com.android.sched.vfs.InputVFS),3,1,"@javax.annotation.Nonnull private static java.util.Properties loadLibraryProperties(@javax.annotation.Nonnull com.android.sched.vfs.InputVFS vfs) throws com.android.jack.library.NotJackLibraryException { java.util.Properties libraryProperties = new java.util.Properties(); try { com.android.sched.vfs.InputVFile libProp = vfs.getRootInputVDir().getInputVFile(JackLibrary.LIBRARY_PROPERTIES_VPATH); java.io.InputStream inputStream = null; try { inputStream = libProp.getInputStream(); libraryProperties.load(inputStream); } finally { if (inputStream != null) { try { inputStream.close(); } catch (java.io.IOException e) { com.android.jack.library.JackLibraryFactory.logger.log(java.util.logging.Level.WARNING, ""Failed to close ''{0}''"", libProp.getLocation().getDescription()); } } } } catch (java.io.IOException e) { throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } return libraryProperties; }",7834156c3d14087d3145d2933cbf45302364cd2d,loadLibraryProperties(com.android.sched.vfs.InputVFS),83986,234,237
202496,src_main_java_org_conscrypt_ServerSessionContext.java,1.0,"@java.lang.Override public javax.net.ssl.SSLSession getSession(byte[] sessionId) { javax.net.ssl.SSLSession session = super.getSession(sessionId); if (session != null) { return session; } if ((persistentCache) != null) { byte[] data = persistentCache.getSessionData(sessionId); if (data != null) { session = toSession(data, null, (-1)); if ((session != null) && (session.isValid())) { super.putSession(session); return session; } } } return null; }",94ccdbdfbb487531b49c63c76d9129ef235d156c,"@java.lang.Override public javax.net.ssl.SSLSession getSession(byte[] sessionId) { { javax.net.ssl.SSLSession session = super.getSession(sessionId); if (session != null) { return session; } } if ((persistentCache) != null) { byte[] data = persistentCache.getSessionData(sessionId); if (data != null) { org.conscrypt.OpenSSLSessionImpl session = toSession(data, null, (-1)); if ((session != null) && (session.isValid())) { super.putSession(session); return org.conscrypt.Platform.wrapSSLSession(session); } } } return null; }",774a253dfab6c2a779b2ab870504457d5f09cf32,getSession(byte[]),getSession(byte[]),4,1,"@java.lang.Override public javax.net.ssl.SSLSession getSession(byte[] sessionId) { javax.net.ssl.SSLSession cachedSession = super.getSession(sessionId); if (cachedSession != null) { return cachedSession; } if ((persistentCache) != null) { byte[] data = persistentCache.getSessionData(sessionId); if (data != null) { org.conscrypt.OpenSSLSessionImpl session = toSession(data, null, (-1)); if ((session != null) && (session.isValid())) { super.putSession(session); return org.conscrypt.Platform.wrapSSLSession(session); } } } return null; }",7a193d2bdcf9056ad47fcd0f93a8f7d5ccf480bf,getSession(byte[]),324695,145,146
22725,tests_core_runner_src_android_test_InstrumentationCtsTestRunner.java,7.0,"@java.lang.Override public void onCreate(android.os.Bundle arguments) { java.io.File cacheDir = getTargetContext().getCacheDir(); java.lang.System.setProperty(""user.language"", ""en""); java.lang.System.setProperty(""user.region"", ""US""); java.lang.System.setProperty(""java.home"", cacheDir.getAbsolutePath()); java.lang.System.setProperty(""user.home"", cacheDir.getAbsolutePath()); java.lang.System.setProperty(""java.io.tmpdir"", cacheDir.getAbsolutePath()); java.lang.System.setProperty(""user.dir"", cacheDir.getAbsolutePath()); java.lang.System.setProperty(""javax.net.ssl.trustStore"", ""/etc/security/cacerts.bks""); java.util.TimeZone.setDefault(java.util.TimeZone.getTimeZone(""GMT"")); if (arguments != null) { java.lang.String classArg = arguments.getString(android.test.ARGUMENT_TEST_CLASS); mSingleTest = (classArg != null) && (classArg.contains(""#"")); } if ((getContext().checkCallingOrSelfPermission(android.Manifest.permission.DISABLE_KEYGUARD)) == (android.content.pm.PackageManager.PERMISSION_GRANTED)) { android.util.Log.i(android.test.InstrumentationCtsTestRunner.TAG, ""Disabling keyguard""); android.app.KeyguardManager keyguardManager = ((android.app.KeyguardManager) (getContext().getSystemService(Context.KEYGUARD_SERVICE))); keyguardManager.newKeyguardLock(""cts"").disableKeyguard(); } else { android.util.Log.i(android.test.InstrumentationCtsTestRunner.TAG, (""Test lacks permission to disable keyguard. "" + ""UI based tests may fail if keyguard is up"")); } super.onCreate(arguments); }",1c020d4c43a2ddcf100372eb47fce98bf751824f,"@java.lang.Override public void onCreate(android.os.Bundle arguments) { java.io.File cacheDir = getTargetContext().getCacheDir(); java.lang.System.setProperty(""user.language"", ""en""); java.lang.System.setProperty(""user.region"", ""US""); java.lang.System.setProperty(""java.home"", cacheDir.getAbsolutePath()); java.lang.System.setProperty(""user.home"", cacheDir.getAbsolutePath()); java.lang.System.setProperty(""java.io.tmpdir"", cacheDir.getAbsolutePath()); java.lang.System.setProperty(""user.dir"", cacheDir.getAbsolutePath()); java.lang.System.setProperty(""javax.net.ssl.trustStore"", ""/etc/security/cacerts.bks""); java.util.TimeZone.setDefault(java.util.TimeZone.getTimeZone(""GMT"")); if (arguments != null) { java.lang.String classArg = arguments.getString(android.test.ARGUMENT_TEST_CLASS); mSingleTest = (classArg != null) && (classArg.contains(""#"")); java.lang.System.setProperty(""cts.telephoneNumber"", arguments.getString(android.test.InstrumentationCtsTestRunner.ARGUMENT_TELEPHONE_NUMBER)); } if ((getContext().checkCallingOrSelfPermission(android.Manifest.permission.DISABLE_KEYGUARD)) == (android.content.pm.PackageManager.PERMISSION_GRANTED)) { android.util.Log.i(android.test.InstrumentationCtsTestRunner.TAG, ""Disabling keyguard""); android.app.KeyguardManager keyguardManager = ((android.app.KeyguardManager) (getContext().getSystemService(Context.KEYGUARD_SERVICE))); keyguardManager.newKeyguardLock(""cts"").disableKeyguard(); } else { android.util.Log.i(android.test.InstrumentationCtsTestRunner.TAG, (""Test lacks permission to disable keyguard. "" + ""UI based tests may fail if keyguard is up"")); } super.onCreate(arguments); }",67dc2fef6cb329c2e9eefc81b6bb73e34eb26510,onCreate(android.os.Bundle),onCreate(android.os.Bundle),4,7,"@java.lang.Override public void onCreate(android.os.Bundle arguments) { java.io.File cacheDir = getTargetContext().getCacheDir(); java.lang.System.setProperty(""user.language"", ""en""); java.lang.System.setProperty(""user.region"", ""US""); java.lang.System.setProperty(""java.home"", cacheDir.getAbsolutePath()); java.lang.System.setProperty(""user.home"", cacheDir.getAbsolutePath()); java.lang.System.setProperty(""java.io.tmpdir"", cacheDir.getAbsolutePath()); java.lang.System.setProperty(""user.dir"", cacheDir.getAbsolutePath()); java.lang.System.setProperty(""javax.net.ssl.trustStore"", ""/etc/security/cacerts.bks""); java.util.TimeZone.setDefault(java.util.TimeZone.getTimeZone(""GMT"")); if (arguments != null) { java.lang.String classArg = arguments.getString(android.test.ARGUMENT_TEST_CLASS); mSingleTest = (classArg != null) && (classArg.contains(""#"")); java.lang.System.setProperty(""cts.phoneNumber"", arguments.getString(android.test.InstrumentationCtsTestRunner.ARGUMENT_PHONE_NUMBER)); } if ((getContext().checkCallingOrSelfPermission(android.Manifest.permission.DISABLE_KEYGUARD)) == (android.content.pm.PackageManager.PERMISSION_GRANTED)) { android.util.Log.i(android.test.InstrumentationCtsTestRunner.TAG, ""Disabling keyguard""); android.app.KeyguardManager keyguardManager = ((android.app.KeyguardManager) (getContext().getSystemService(Context.KEYGUARD_SERVICE))); keyguardManager.newKeyguardLock(""cts"").disableKeyguard(); } else { android.util.Log.i(android.test.InstrumentationCtsTestRunner.TAG, (""Test lacks permission to disable keyguard. "" + ""UI based tests may fail if keyguard is up"")); } super.onCreate(arguments); }",0297ccfa689e63c41e6ca4a628a67b3789a87777,onCreate(android.os.Bundle),390431,436,433
37720,sdkmanager_libs_sdklib_src_com_android_sdklib_devices_Device.java,,,,public void addSoftware(com.android.sdklib.devices.Device.Software sw) { mSoftware.add(sw); },9ffd22826e71126e9ffd33fefc1c58a767969048,,addSoftware(com.android.sdklib.devices.Device$Software),8,5,public void addSoftware(com.android.sdklib.devices.Software sw) { mSoftware.add(sw); },d1f446440e94944b947861ffe13226385f33127c,addSoftware(com.android.sdklib.devices.Software),17790,29,27
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,0.0,"public void testAesCbcHmacSha384Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",5422526cbf0ace330b55d1c37eb1a1729e32c6ed,"public void testAesCbcHmacSha384Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",5a13ba5810571678e7f3261978fff57a37837e72,testAesCbcHmacSha384Udp4UdpEncap(),testAesCbcHmacSha384Udp4UdpEncap(),9,0,"public void testAesCbcHmacSha384Udp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_UDP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",be78768e59e5506b2a908547796fb022fef41f22,testAesCbcHmacSha384Udp4UdpEncap(),1916,217,217
108170,login_src_com_google_gct_login_GoogleLogin.java,3.0,"private void logErrorAndDisplayDialog(@org.jetbrains.annotations.NotNull final java.lang.String title, @org.jetbrains.annotations.NotNull final java.lang.Exception exception) { if (com.intellij.openapi.application.ApplicationManager.getApplication().isDispatchThread()) { com.intellij.openapi.ui.Messages.showErrorDialog(exception.getMessage(), title); } else { com.intellij.openapi.application.ApplicationManager.getApplication().invokeLater(new java.lang.Runnable() { @java.lang.Override public void run() { com.intellij.openapi.ui.Messages.showErrorDialog(exception.getMessage(), title); } }, com.intellij.openapi.application.ModalityState.defaultModalityState()); } com.google.gct.login.GoogleLogin.GOOGLE_LOGIN_LOG.error(exception.getMessage(), exception); }",845e2f5a3102dc065e5065a30fbc2e364faa512a,"private void logErrorAndDisplayDialog(@org.jetbrains.annotations.NotNull final java.lang.String title, @org.jetbrains.annotations.NotNull final java.lang.Exception exception) { com.google.gct.login.GoogleLogin.GOOGLE_LOGIN_LOG.error(exception.getMessage(), exception); com.google.gct.login.GoogleLoginUtils.showErrorDialog(exception.getMessage(), title); }",4fb4831d9c3d5ad6c5fbedb15d46a007dcd191d6,"logErrorAndDisplayDialog(java.lang.String,java.lang.Exception)","logErrorAndDisplayDialog(java.lang.String,java.lang.Exception)",2,3,"private void logErrorAndDisplayDialog(@org.jetbrains.annotations.NotNull final java.lang.String title, @org.jetbrains.annotations.NotNull final java.lang.Exception exception) { com.google.gct.login.GoogleLogin.LOG.error(exception.getMessage(), exception); com.google.gct.login.GoogleLoginUtils.showErrorDialog(exception.getMessage(), title); }",5377d79f8689c8f23dee932810d5b2930b3bb10d,"logErrorAndDisplayDialog(java.lang.String,java.lang.Exception)",276212,90,86
298006,wifi_tests_src_android_net_wifi_hotspot2_pps_CredentialTest.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void validateSimCredentialWithEapAka() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential(); cred.realm = ""realm""; cred.simCredential = new android.net.wifi.hotspot2.pps.Credential.SimCredential(); cred.simCredential.imsi = ""imsi""; cred.simCredential.eapType = Credential.EAP_AKA; assertTrue(cred.validate()); }",0ba86ba6c390f5611271a06b3c4ce3ea8f66fee1,,validateSimCredentialWithEapAka(),8,11,"@org.junit.Test public void validateSimCredentialWithEapAka() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential(); cred.realm = ""realm""; cred.simCredential = new android.net.wifi.hotspot2.pps.Credential.SimCredential(); cred.simCredential.imsi = ""1234*""; cred.simCredential.eapType = android.net.wifi.EAPConstants.EAP_AKA; assertTrue(cred.validate()); }",862f87e6ba2450f534bd8b3f3a419ecefed6fa44,validateSimCredentialWithEapAka(),484613,124,129
249770,luni_src_test_java_libcore_java_net_DatagramSocketTest.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testSendWithoutConnection() throws java.io.IOException { final int port = 7; final java.lang.String to = ""001:db8:dead:beef::f00""; java.net.DatagramSocket s = new java.net.DatagramSocket(); s.connect(java.net.InetAddress.getByName(to), port); try { byte[] data = new byte[100]; java.net.DatagramPacket p = new java.net.DatagramPacket(data, data.length); s.send(p); fail(""Send succeeded unexpectedly""); } catch (java.lang.NullPointerException unexpected) { fail(""Send did not handle pending connection exception""); } catch (java.io.IOException expected) { } finally { s.close(); } }",66ea4d337da448ebbb57626819b18e5322467ac8,,testSendWithoutConnection(),6,0,"public void testPendingException() throws java.lang.Exception { final int port = 9999; try (java.net.DatagramSocket s = new java.net.DatagramSocket()) { s.connect(java.net.InetAddress.getLocalHost(), port); java.lang.reflect.Field pendingConnectException = s.getClass().getDeclaredField(""pendingConnectException""); pendingConnectException.setAccessible(true); pendingConnectException.set(s, new java.net.SocketException()); byte[] data = new byte[100]; java.net.DatagramPacket p = new java.net.DatagramPacket(data, data.length); try { s.send(p); fail(); } catch (java.net.SocketException expected) { } try { s.receive(p); fail(); } catch (java.net.SocketException expected) { } } }",e7bd8f1c4555d5da8d5416378c68f6b2f4a23ae0,testPendingException(),85698,162,180
346896,tests_tests_net_src_android_net_wifi_aware_cts_SingleDeviceTest.java,26.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private void processCallback(int callback) { if ((mCurrentWaitForCallback) == callback) { mBlocker.countDown(); } else { mCallbackQueue.addLast(callback); } },e966e92bfc8efc77aef4c3d64c0e1548ebfae95d,,processCallback(int),6,25,private void processCallback(int callback) { synchronized(mLocalLock) { if (((mBlocker) != null) && ((mCurrentWaitForCallback) == callback)) { mBlocker.countDown(); } else { mCallbackQueue.addLast(callback); } } },122404b80e8737dec4c32914bf2335c8d1e7d133,processCallback(int),186961,39,56
68295,ddmlib_src_main_java_com_android_ddmlib_Device.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.lang.Integer getBatteryLevel() { return mBatteryLevel; },dfd796a917cf080dada901838fd1b36bc5b61858,,getBatteryLevel(),4,44,@com.android.annotations.Nullable public java.lang.Integer getBatteryLevel() { return mBatteryLevel; },d5f46dc32d1dccabf4cc45b9714a7753b495c71b,getBatteryLevel(),515406,17,25
306251,tests_wifitests_src_com_android_server_wifi_hotspot2_DomainMatcherTest.java,,,,"@org.junit.Test public void matchNullDomain() throws java.lang.Exception { com.android.server.wifi.hotspot2.DomainMatcher domainMatcher = new com.android.server.wifi.hotspot2.DomainMatcher(com.android.server.wifi.hotspot2.DomainMatcherTest.PRIMARY_DOMAIN, java.util.Arrays.asList(com.android.server.wifi.hotspot2.DomainMatcherTest.SECONDARY_DOMAIN1, com.android.server.wifi.hotspot2.DomainMatcherTest.SECONDARY_DOMAIN2)); assertEquals(Match.None, domainMatcher.isSubDomain(null)); }",b80920c6ad9bb430d4df1a2c049320b825fe93ef,,matchNullDomain(),7,7,"@org.junit.Test public void matchNullDomain() throws java.lang.Exception { com.android.server.wifi.hotspot2.DomainMatcher domainMatcher = new com.android.server.wifi.hotspot2.DomainMatcher(com.android.server.wifi.hotspot2.DomainMatcherTest.PRIMARY_DOMAIN, java.util.Arrays.asList(com.android.server.wifi.hotspot2.DomainMatcherTest.SECONDARY_DOMAIN1, com.android.server.wifi.hotspot2.DomainMatcherTest.SECONDARY_DOMAIN2)); assertEquals(DomainMatcher.MATCH_NONE, domainMatcher.isSubDomain(null)); }",29a8e6e11f574620f0890add9ff43b87871a6ee1,matchNullDomain(),64463,126,129
110567,jack_src_com_android_jack_backend_dex_SingleDexWritingTool.java,0.0,"private void getAllDexFilesFromDir(@javax.annotation.Nonnull com.android.sched.vfs.InputVDir dexFileVDir, @javax.annotation.Nonnull java.util.List<com.android.sched.vfs.InputVFile> dexFiles) { for (com.android.sched.vfs.InputVElement subFile : dexFileVDir.list()) { if (subFile.isVDir()) { getAllDexFilesFromDir(((com.android.sched.vfs.InputVDir) (subFile)), dexFiles); } else if (subFile.getName().endsWith(DexFileWriter.DEX_FILE_EXTENSION)) { dexFiles.add(((com.android.sched.vfs.InputOutputVFile) (subFile))); } } }",295c022375aa129d81d8020d94527e743fe99291,"private void getAllDexFilesFromDir(@javax.annotation.Nonnull com.android.sched.vfs.InputVDir dexFileVDir, @javax.annotation.Nonnull java.util.List<com.android.sched.vfs.InputVFile> dexFiles) { for (com.android.sched.vfs.InputVElement subFile : dexFileVDir.list()) { if (subFile.isVDir()) { getAllDexFilesFromDir(((com.android.sched.vfs.InputVDir) (subFile)), dexFiles); } else if ((com.android.jack.library.BinaryKind.getBinaryKind(((com.android.sched.vfs.InputVFile) (subFile)))) == (com.android.jack.library.BinaryKind.DEX)) { dexFiles.add(((com.android.sched.vfs.InputOutputVFile) (subFile))); } } }",e231b2265b02912d38276a66f2404030982ecf75,"getAllDexFilesFromDir(com.android.sched.vfs.InputVDir,java.util.List)","getAllDexFilesFromDir(com.android.sched.vfs.InputVDir,java.util.List)",4,0,"private void getAllDexFilesFromDir(@javax.annotation.Nonnull com.android.sched.vfs.InputVDir dexFileVDir, @javax.annotation.Nonnull java.util.List<com.android.sched.vfs.InputVFile> dexFiles) { for (com.android.sched.vfs.InputVElement subFile : dexFileVDir.list()) { if (subFile.isVDir()) { getAllDexFilesFromDir(((com.android.sched.vfs.InputVDir) (subFile)), dexFiles); } else if (BinaryKind.DEX.isBinaryFile(((com.android.sched.vfs.InputVFile) (subFile)))) { dexFiles.add(((com.android.sched.vfs.InputOutputVFile) (subFile))); } } }",0f979cd18d2157c434bc3458721b6605cb3f0f38,"getAllDexFilesFromDir(com.android.sched.vfs.InputVDir,java.util.List)",267922,201,179
42196,eclipse_plugins_com.android.ide.eclipse.ddms_src_com_android_ide_eclipse_ddms_views_DeviceView.java,2.0,private void doSelectionChanged(com.android.ddmlib.IDevice selectedDevice) { mCaptureAction.setEnabled((selectedDevice != null)); mViewUiAutomatorHierarchyAction.setEnabled((selectedDevice != null)); },bdf98509518b04c24884c384d043681310db3673,private void doSelectionChanged(com.android.ddmlib.IDevice selectedDevice) { boolean validDevice = selectedDevice != null; mCaptureAction.setEnabled(validDevice); mViewUiAutomatorHierarchyAction.setEnabled(validDevice); },bf8a1eac5b509b0df645640240272e7c0d75221f,doSelectionChanged(com.android.ddmlib.IDevice),doSelectionChanged(com.android.ddmlib.IDevice),5,2,private void doSelectionChanged(com.android.ddmlib.IDevice selectedDevice) { boolean validDevice = selectedDevice != null; mCaptureAction.setEnabled(validDevice); mViewUiAutomatorHierarchyAction.setEnabled(validDevice); mSystraceAction.setEnabled(validDevice); },aced93e33e4995babfc90c1c57e3bcbcb1843273,doSelectionChanged(com.android.ddmlib.IDevice),11855,52,62
41115,src_java_com_android_internal_telephony_UiccCardApplication.java,,,,"public void registerForReady(android.os.Handler h, int what, java.lang.Object obj) { android.os.Registrant r = new android.os.Registrant(h, what, obj); mReadyRegistrants.add(r); notifyReadyRegistrantsIfNeeded(r); }",90ae85134eaaab2476d017cff0c9b91288aecb32,,"registerForReady(android.os.Handler,int,java.lang.Object)",22,26,"public void registerForReady(android.os.Handler h, int what, java.lang.Object obj) { synchronized(mLock) { android.os.Registrant r = new android.os.Registrant(h, what, obj); mReadyRegistrants.add(r); notifyReadyRegistrantsIfNeeded(r); } }",a0815944059daaa864376922df70b1b0012f97d6,"registerForReady(android.os.Handler,int,java.lang.Object)",499285,66,73
340832,testapps_src_com_android_server_telecom_testapps_TestConnectionService.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onStartRtt(com.android.server.telecom.testapps.RttTextStream textStream) { boolean doAccept = (java.lang.Math.random()) < 0.5; if (doAccept) { android.telecom.Log.i(this, ""Accepting RTT request.""); mRttChatbot = new com.android.server.telecom.testapps.RttChatbot(getApplicationContext(), textStream); mRttChatbot.start(); setConnectionProperties(((getConnectionProperties()) | (PROPERTY_IS_RTT))); sendRttConnectionSuccess(); } else { sendRttConnectionFailure(); } }",031ff06f414d0ba2772aac401e92cb012128c99d,,onStartRtt(com.android.server.telecom.testapps.RttTextStream),8,18,"@java.lang.Override public void onStartRtt(com.android.server.telecom.testapps.RttTextStream textStream) { boolean doAccept = (java.lang.Math.random()) < 0.5; if (doAccept) { android.telecom.Log.i(this, ""Accepting RTT request.""); mRttChatbot = new com.android.server.telecom.testapps.RttChatbot(getApplicationContext(), textStream); mRttChatbot.start(); setConnectionProperties(((getConnectionProperties()) | (PROPERTY_IS_RTT))); sendRttInitiationSuccess(); } else { sendRttInitiationFailure(RttModifyStatus.SESSION_MODIFY_REQUEST_FAIL); } }",47996ace1cd28bb296dcf11ee5035261c0f592d7,onStartRtt(com.android.server.telecom.testapps.RttTextStream),219677,147,162
198666,sched_src_com_android_sched_scheduler_SingleScheduleInstance.java,0.0,"@java.lang.Override @java.lang.SuppressWarnings({ ""rawtypes"", ""unchecked"" }) public <X extends com.android.sched.schedulable.VisitorSchedulable<T>, U extends com.android.sched.item.Component> void process(@javax.annotation.Nonnull T t) throws com.android.sched.scheduler.ProcessException { for (com.android.sched.scheduler.SchedStep step : steps) { com.android.sched.schedulable.Schedulable instance = step.getInstance(); com.android.sched.scheduler.ManagedSchedulable managedSchedulable = schedulableManager.getManagedSchedulable(instance.getClass()); if (instance instanceof com.android.sched.schedulable.AdapterSchedulable) { com.android.sched.scheduler.ScheduleInstance<U> subSchedInstance = ((com.android.sched.scheduler.ScheduleInstance<U>) (step.getSubSchedInstance())); assert subSchedInstance != null; java.util.Iterator<U> iterData = com.android.sched.scheduler.SingleScheduleInstance.adaptWithLog(((com.android.sched.schedulable.AdapterSchedulable<T, U>) (instance)), t); while (iterData.hasNext()) { subSchedInstance.process(iterData.next()); } } else if (instance instanceof com.android.sched.schedulable.RunnableSchedulable) { com.android.sched.scheduler.SingleScheduleInstance.runWithLog(((com.android.sched.schedulable.RunnableSchedulable) (instance)), t); } else if (instance instanceof com.android.sched.schedulable.VisitorSchedulable) { com.android.sched.scheduler.SingleScheduleInstance.visitWithLog(((com.android.sched.schedulable.VisitorSchedulable) (instance)), t); } } }",a3edb8f158b14aac3ee89c93f23ef75886767c26,"@java.lang.Override @java.lang.SuppressWarnings({ ""rawtypes"", ""unchecked"" }) public <X extends com.android.sched.schedulable.VisitorSchedulable<T>, U extends com.android.sched.item.Component> void process(@javax.annotation.Nonnull T t) throws com.android.sched.scheduler.ProcessException { com.android.sched.scheduler.SingleScheduleInstance.Worker worker = new com.android.sched.scheduler.SingleScheduleInstance.Worker(t); java.lang.Thread thread = new java.lang.Thread(null, worker, ((com.android.sched.util.config.ThreadConfig.getConfig().getName()) + ""-worker""), com.android.sched.util.config.ThreadConfig.get(ScheduleInstance.DEFAULT_STACK_SIZE).longValue()); thread.setDaemon(true); thread.start(); try { thread.join(); } catch (java.lang.InterruptedException e) { java.lang.Thread.currentThread().interrupt(); } worker.throwIfNecessary(); }",c013da7862a9788f6c07a4cb7b24e0d22a568b10,process(com.android.sched.item.Component),process(com.android.sched.item.Component),2,0,"@java.lang.Override @java.lang.SuppressWarnings({ ""rawtypes"", ""unchecked"" }) public <X extends com.android.sched.schedulable.VisitorSchedulable<T>, U extends com.android.sched.item.Component> void process(@javax.annotation.Nonnull T t) throws com.android.sched.scheduler.ProcessException { com.android.sched.scheduler.SingleScheduleInstance.Worker worker = new com.android.sched.scheduler.SingleScheduleInstance.Worker(t); java.lang.Thread thread = new java.lang.Thread(null, worker, ""worker"", com.android.sched.util.config.ThreadConfig.get(ScheduleInstance.DEFAULT_STACK_SIZE).longValue()); thread.setDaemon(true); thread.start(); try { thread.join(); } catch (java.lang.InterruptedException e) { java.lang.Thread.currentThread().interrupt(); } worker.throwIfNecessary(); }",1f395f48da430934d021c70fd0b2f5686609d64c,process(com.android.sched.item.Component),38669,226,205
316531,tests_wifitests_src_com_android_server_wifi_hotspot2_PasspointManagerTest.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void anqpResponseFailure() throws java.lang.Exception { com.android.server.wifi.hotspot2.ANQPNetworkKey anqpKey = com.android.server.wifi.hotspot2.ANQPNetworkKey.buildKey(com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_SSID, com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_BSSID, com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_HESSID, com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_ANQP_DOMAIN_ID); when(mAnqpRequestManager.onRequestCompleted(com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_BSSID, false)).thenReturn(anqpKey); mCallbacks.onANQPResponse(com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_BSSID, null); verify(mAnqpCache, never()).addEntry(any(com.android.server.wifi.hotspot2.ANQPNetworkKey.class), anyMap()); }",36452cfab17c219fb626bf92c6878eff74263026,,anqpResponseFailure(),9,4,"@org.junit.Test public void anqpResponseFailure() throws java.lang.Exception { com.android.server.wifi.hotspot2.ANQPNetworkKey anqpKey = com.android.server.wifi.hotspot2.ANQPNetworkKey.buildKey(com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_SSID, com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_BSSID, com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_HESSID, com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_ANQP_DOMAIN_ID); com.android.server.wifi.ScanDetail scanDetail = createMockScanDetail(); when(mAnqpRequestManager.onRequestCompleted(com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_BSSID, false)).thenReturn(scanDetail); mCallbacks.onANQPResponse(com.android.server.wifi.hotspot2.PasspointManagerTest.TEST_BSSID, null); verify(mAnqpCache, never()).addEntry(any(com.android.server.wifi.hotspot2.ANQPNetworkKey.class), anyMap()); }",050cfe10bd13f408552c35abbd1db205c084b761,anqpResponseFailure(),486466,256,272
544841,src_java_com_android_internal_telephony_GsmCdmaPhone.java,144.0,"private void logi(java.lang.String s) { android.telephony.Rlog.i(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, (""[GsmCdmaPhone] "" + s)); }",bd94218e205b883ef87c9135794cdaf404fa74ff,"private void logi(java.lang.String s) { android.telephony.Rlog.i(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, (((""[GsmCdmaPhone]["" + (getPhoneId())) + ""] "") + s)); }",48a4a6681859ca46f046009c727ae9829ebfc63a,logi(java.lang.String),logi(java.lang.String),9,148,"private void logi(java.lang.String s) { android.telephony.Rlog.i(com.android.internal.telephony.GsmCdmaPhone.LOG_TAG, (((""["" + (mPhoneId)) + ""] "") + s)); }",25dbc022859c3bd6f5aa5974e4a589b46284251a,logi(java.lang.String),5827,70,61
108485,jack_src_com_android_jack_backend_dex_DexFileWriter.java,0.0,@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws java.lang.Exception { com.android.jack.backend.dex.DexWritingTool writingTool = com.android.sched.util.config.ThreadConfig.get(com.android.jack.backend.dex.DexFileWriter.DEX_WRITING_POLICY); writingTool.write(outputVDir); },d6b191c95f78fafc9de2dd421c735729a21dff84,@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) { com.android.jack.backend.dex.DexWritingTool writingTool = com.android.sched.util.config.ThreadConfig.get(com.android.jack.backend.dex.DexFileWriter.DEX_WRITING_POLICY); try { writingTool.write(outputVDir); } catch (com.android.jack.backend.dex.DexWritingException e) { throw new com.android.jack.JackAbortException(e); } },adc6c20df9a6b2d3d0e6ee5ee2ec2472624a2aaf,run(com.android.jack.ir.ast.JSession),run(com.android.jack.ir.ast.JSession),10,0,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) { com.android.jack.backend.dex.DexWritingTool writingTool = com.android.sched.util.config.ThreadConfig.get(com.android.jack.backend.dex.DexFileWriter.DEX_WRITING_POLICY); try { writingTool.write(outputVDir); } catch (com.android.jack.backend.dex.DexWritingException e) { session.getReporter().report(Severity.FATAL, e); throw new com.android.jack.JackAbortException(e); } }",221f5cb4c544eb54967097cb7fbb5f6bf53ab2be,run(com.android.jack.ir.ast.JSession),227169,129,142
35472,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_preferences_AdtPrefs.java,18.0,"public void setLintOnExport(boolean on) { mLintOnExport = on; org.eclipse.jface.preference.IPreferenceStore store = com.android.ide.eclipse.adt.AdtPlugin.getDefault().getPreferenceStore(); store.setValue(com.android.ide.eclipse.adt.internal.preferences.AdtPrefs.PREFS_LINT_ON_EXPORT, on); }",35865ecabdd9bba0d9c6ae3d1c164ddd29f89ab6,"public void setLintOnExport(boolean on) { mLintOnExport = on; mStore.setValue(com.android.ide.eclipse.adt.internal.preferences.AdtPrefs.PREFS_LINT_ON_EXPORT, on); }",95268be7a0c6cdcdc1f400b1db5363e66a5765ab,setLintOnExport(boolean),setLintOnExport(boolean),4,18,"public void setLintOnExport(boolean on) { mLintOnExport = on; org.eclipse.jface.preference.IPreferenceStore store = com.android.ide.eclipse.adt.AdtPlugin.getDefault().getPreferenceStore(); store.setValue(com.android.ide.eclipse.adt.internal.preferences.AdtPrefs.PREFS_LINT_ON_EXPORT, on); }",35865ecabdd9bba0d9c6ae3d1c164ddd29f89ab6,setLintOnExport(boolean),32355,56,90
161052,sched_src_com_android_sched_vfs_UnionVFS.java,,,,@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.VPath getPathFromRoot(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVFile file) { return file.getWrappedFiles().get(0).getPathFromRoot(); },08f855ea37419f286c475e858e68584d0a217f30,,getPathFromRoot(com.android.sched.vfs.UnionVFS$UnionVFile),15,40,@java.lang.Override @javax.annotation.Nonnull com.android.sched.vfs.VPath getPathFromRoot(@javax.annotation.Nonnull com.android.sched.vfs.UnionVFS.UnionVFile file) { return file.getWrappedFile().getPathFromRoot(); },5f5f35bbfede130080787dc5af6572c927232be9,getPathFromRoot(com.android.sched.vfs.UnionVFS$UnionVFile),316807,62,60
298006,wifi_tests_src_android_net_wifi_hotspot2_pps_CredentialTest.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void validateSimCredentialWithEapSim() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential(); cred.realm = ""realm""; cred.simCredential = new android.net.wifi.hotspot2.pps.Credential.SimCredential(); cred.simCredential.imsi = ""imsi""; cred.simCredential.eapType = Credential.EAP_SIM; assertTrue(cred.validate()); }",5f5b10bdf36d484f10b29eb210021dbb91b35492,,validateSimCredentialWithEapSim(),8,7,"@org.junit.Test public void validateSimCredentialWithEapSim() throws java.lang.Exception { android.net.wifi.hotspot2.pps.Credential cred = new android.net.wifi.hotspot2.pps.Credential(); cred.realm = ""realm""; cred.simCredential = new android.net.wifi.hotspot2.pps.Credential.SimCredential(); cred.simCredential.imsi = ""1234*""; cred.simCredential.eapType = android.net.wifi.EAPConstants.EAP_SIM; assertTrue(cred.validate()); }",4a43e568352058b56b3f2fa64bbaa6c1485d8811,validateSimCredentialWithEapSim(),484611,123,128
91995,luni_src_main_java_libcore_io_Posix.java,62.0,"private native int recvfromBytes(java.io.FileDescriptor fd, java.lang.Object buffer, int byteOffset, int byteCount, int flags, java.net.InetSocketAddress srcAddress) throws java.net.SocketException, libcore.io.ErrnoException;",2f0fe3c824e3f98220eebd600ae2347362b513d5,"private native int recvfromBytes(java.io.FileDescriptor fd, java.lang.Object buffer, int byteOffset, int byteCount, int flags, java.net.InetSocketAddress srcAddress) throws android.os.ErrnoException, java.net.SocketException;",72270b7f22c7fc20fdfd6886bfecb99738d14459,"recvfromBytes(java.io.FileDescriptor,java.lang.Object,int,int,int,java.net.InetSocketAddress)","recvfromBytes(java.io.FileDescriptor,java.lang.Object,int,int,int,java.net.InetSocketAddress)",3,60,"private native int recvfromBytes(java.io.FileDescriptor fd, java.lang.Object buffer, int byteOffset, int byteCount, int flags, java.net.InetSocketAddress srcAddress) throws android.system.ErrnoException, java.net.SocketException;",208f85d080252dd8344ddbf1fb628e86df68dcd0,"recvfromBytes(java.io.FileDescriptor,java.lang.Object,int,int,int,java.net.InetSocketAddress)",169878,58,58
63253,perflib_src_main_java_com_android_tools_perflib_vmtrace_Call.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.Iterator<com.android.tools.perflib.vmtrace.Call> getCallHierarchyIterator() { return new com.android.tools.perflib.vmtrace.Call.CallHierarchyIterator(this); },16e57f89402095ade6978128d6eeba7579ac95aa,,getCallHierarchyIterator(),4,28,@com.android.annotations.NonNull public java.util.Iterator<com.android.tools.perflib.vmtrace.Call> getCallHierarchyIterator() { return new com.android.tools.perflib.vmtrace.Call.CallHierarchyIterator(this); },c1345b0caedc73b2bcef08250a9324176e2bf6b4,getCallHierarchyIterator(),126745,50,58
321166,src_com_android_networkrecommendation_WifiNotificationHelper.java,5.0,"android.graphics.Bitmap createNotificationBadgeBitmap(@android.annotation.NonNull android.net.wifi.WifiConfiguration config, @android.annotation.NonNull java.util.List<android.net.wifi.ScanResult> scanResults) { android.net.wifi.ScanResult matchingScanResult = findMatchingScanResult(scanResults, config); if (matchingScanResult == null) { return null; } int rssi = matchingScanResult.level; android.net.WifiKey wifiKey = new android.net.WifiKey(config.SSID, config.BSSID); android.net.ScoredNetwork scoredNetwork = mCachedScoredNetworkProvider.getCachedScoredNetwork(new android.net.NetworkKey(wifiKey)); if (scoredNetwork != null) { return getBadgedWifiBitmap(scoredNetwork.calculateBadge(rssi), rssi); } return null; }",fae1bf1e73446970a84c40cd651e2d25876dc6b7,"public android.graphics.Bitmap createNotificationBadgeBitmap(@android.annotation.NonNull android.net.wifi.WifiConfiguration config, @android.annotation.NonNull java.util.List<android.net.wifi.ScanResult> scanResults) { android.net.wifi.ScanResult matchingScanResult = findMatchingScanResult(scanResults, config); if (matchingScanResult == null) { return null; } int rssi = matchingScanResult.level; android.net.WifiKey wifiKey = new android.net.WifiKey(config.SSID, config.BSSID); android.net.ScoredNetwork scoredNetwork = mCachedScoredNetworkProvider.getCachedScoredNetwork(new android.net.NetworkKey(wifiKey)); if (scoredNetwork != null) { return getBadgedWifiBitmap(scoredNetwork.calculateBadge(rssi), rssi); } return null; }",7d374bb4b5c5a2cc6d1973c45d08d52599ea5dfe,"createNotificationBadgeBitmap(android.net.wifi.WifiConfiguration,java.util.List)","createNotificationBadgeBitmap(android.net.wifi.WifiConfiguration,java.util.List)",4,5,"public android.graphics.Bitmap createNotificationBadgeBitmap(@android.support.annotation.NonNull android.net.wifi.WifiConfiguration config, @android.support.annotation.NonNull java.util.List<android.net.wifi.ScanResult> scanResults) { android.net.wifi.ScanResult matchingScanResult = findMatchingScanResult(scanResults, config); if (matchingScanResult == null) { return null; } int rssi = matchingScanResult.level; android.net.WifiKey wifiKey = new android.net.WifiKey(config.SSID, config.BSSID); android.net.ScoredNetwork scoredNetwork = mCachedScoredNetworkProvider.getCachedScoredNetwork(new android.net.NetworkKey(wifiKey)); if (scoredNetwork != null) { return getBadgedWifiBitmap(scoredNetwork.calculateBadge(rssi), rssi); } return null; }",58cbd18a707dcb2028304cd456143bbedcb0173a,"createNotificationBadgeBitmap(android.net.wifi.WifiConfiguration,java.util.List)",524999,187,191
311993,src_java_com_android_internal_telephony_CarrierActionAgent.java,,,,"public void registerForCarrierAction(int action, android.os.Handler h, int what, java.lang.Object obj, boolean notifyNow) { synchronized(mLock) { android.os.RegistrantList list = getRegistrantsFromAction(action); if (list == null) return; android.os.Registrant r = new android.os.Registrant(h, what, obj); list.add(r); if (notifyNow) { java.lang.Object carrierAction = getCarrierAction(action); if (carrierAction == null) return; r.notifyRegistrant(new android.os.AsyncResult(null, carrierAction, null)); } } }",c1fff1cb442654538963170d2e6fbefd6b62bba0,,"registerForCarrierAction(int,android.os.Handler,int,java.lang.Object,boolean)",8,4,"public void registerForCarrierAction(int action, android.os.Handler h, int what, java.lang.Object obj, boolean notifyNow) { java.lang.Object carrierAction = getCarrierAction(action); if (carrierAction == null) { throw new java.lang.IllegalArgumentException((""invalid carrier action: "" + action)); } android.os.RegistrantList list = getRegistrantsFromAction(action); android.os.Registrant r = new android.os.Registrant(h, what, obj); list.add(r); if (notifyNow) { r.notifyRegistrant(new android.os.AsyncResult(null, carrierAction, null)); } }",e0a6550dc5eed895248ef09e312171ea6493f096,"registerForCarrierAction(int,android.os.Handler,int,java.lang.Object,boolean)",515231,149,154
89225,libart_src_main_java_java_lang_reflect_Field.java,20.0,"public native void setLong(java.lang.Object object, long value) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException;",1ed5175d9ce204ff581d90565c003d1bc8aa4c81,"public void setLong(java.lang.Object object, long value) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException { checkSetFinal(); checkAccess(object, getDeclaringClass(), getModifiers()); setLongNative(object, value); }",080981d293b966b2ecc3b140dd6fbbb20f2bde22,"setLong(java.lang.Object,long)","setLong(java.lang.Object,long)",2,17,"public void setLong(java.lang.Object object, long value) throws java.lang.IllegalAccessException, java.lang.IllegalArgumentException { setLong(object, value, isAccessible()); }",dee0fcf21e77c6c9ce0ad6ea0d0613f7c2b2ef23,"setLong(java.lang.Object,long)",134465,54,41
80962,src_java_com_android_internal_telephony_cat_CatService.java,17.0,public void dispose() { com.android.internal.telephony.cat.CatService.mIccRecords.unregisterForRecordsLoaded(this); mCmdIf.unSetOnCatSessionEnd(this); mCmdIf.unSetOnCatProactiveCmd(this); mCmdIf.unSetOnCatEvent(this); mCmdIf.unSetOnCatCallSetUp(this); removeCallbacksAndMessages(null); },981f91eae9a76107198d18b7c12f6a7449f86ad7,"public void dispose() { com.android.internal.telephony.cat.CatService.mIccRecords.unregisterForRecordsLoaded(this); broadcastCardStateAndIccRefreshResp(CardState.CARDSTATE_ABSENT, null); mCmdIf.unSetOnCatSessionEnd(this); mCmdIf.unSetOnCatProactiveCmd(this); mCmdIf.unSetOnCatEvent(this); mCmdIf.unSetOnCatCallSetUp(this); mCmdIf.unregisterForIccRefresh(this); if ((mUiccController) != null) { mUiccController.unregisterForIccChanged(this); mUiccController = null; } com.android.internal.telephony.cat.CatService.sInstance = null; com.android.internal.telephony.cat.CatService.mhandlerThread.quit(); com.android.internal.telephony.cat.CatService.mhandlerThread = null; removeCallbacksAndMessages(null); }",3515bb7ee260a7b65dc7bd264b427c3f98f25231,dispose(),dispose(),2,20,"public void dispose() { synchronized(com.android.internal.telephony.cat.CatService.sInstanceLock) { com.android.internal.telephony.cat.CatLog.d(this, ""Disposing CatService object""); com.android.internal.telephony.cat.CatService.mIccRecords.unregisterForRecordsLoaded(this); broadcastCardStateAndIccRefreshResp(CardState.CARDSTATE_ABSENT, null); mCmdIf.unSetOnCatSessionEnd(this); mCmdIf.unSetOnCatProactiveCmd(this); mCmdIf.unSetOnCatEvent(this); mCmdIf.unSetOnCatCallSetUp(this); mCmdIf.unregisterForIccRefresh(this); if ((mUiccController) != null) { mUiccController.unregisterForIccChanged(this); mUiccController = null; } if ((com.android.internal.telephony.cat.CatService.mUiccApplication) != null) { com.android.internal.telephony.cat.CatService.mUiccApplication.unregisterForReady(this); } mMsgDecoder.dispose(); mMsgDecoder = null; mHandlerThread.quit(); mHandlerThread = null; removeCallbacksAndMessages(null); com.android.internal.telephony.cat.CatService.sInstance = null; } }",ccbdb0c5c339af5b136d45f825b022ab3df37162,dispose(),179190,212,292
194746,ojluni_src_main_java_java_net_Inet6AddressImpl.java,4.0,public native java.lang.String getHostByAddr(byte[] addr) throws java.net.UnknownHostException;,0e2db6729e47bb7cdfeefc9c3a0a96e8534802a1,public java.lang.String getHostByAddr(byte[] addr) throws java.net.UnknownHostException { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); return getHostByAddr0(addr); },7ac557af18c4e31c9ffed0bd18e108ffbe12b892,getHostByAddr(byte[]),getHostByAddr(byte[]),6,5,@java.lang.Override public java.lang.String getHostByAddr(byte[] addr) throws java.net.UnknownHostException { dalvik.system.BlockGuard.getThreadPolicy().onNetwork(); return getHostByAddr0(addr); },6f9bc4279442ae962a8347d8df2d9675c8ac33d4,getHostByAddr(byte[]),161379,47,53
123954,sched_src_com_android_sched_vfs_DeflateFS.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(com.android.sched.vfs.BaseVDir parent, com.android.sched.vfs.VPath path) { return vfs.getVFileLocation(parent, path); }",4ce4d08cd5935ba6591a7a79f0df75e4493fce05,,"getVFileLocation(com.android.sched.vfs.BaseVDir,com.android.sched.vfs.VPath)",6,7,"@java.lang.Override @javax.annotation.Nonnull com.android.sched.util.location.Location getVFileLocation(@javax.annotation.Nonnull com.android.sched.vfs.BaseVDir parent, @javax.annotation.Nonnull com.android.sched.vfs.VPath path) { return vfs.getVFileLocation(parent, path); }",daff3b0427846956c40a30f846b525aef4105cd5,"getVFileLocation(com.android.sched.vfs.BaseVDir,com.android.sched.vfs.VPath)",516605,68,79
651742,tests_net_java_android_net_IpSecAlgorithmTest.java,4.0,"@org.junit.Test public void testDefaultTruncLen() throws java.lang.Exception { android.net.IpSecAlgorithm explicit = new android.net.IpSecAlgorithm(IpSecAlgorithm.AUTH_HMAC_SHA256, java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, (256 / 8)), 256); android.net.IpSecAlgorithm implicit = new android.net.IpSecAlgorithm(IpSecAlgorithm.AUTH_HMAC_SHA256, java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, (256 / 8))); assertTrue((((""Default Truncation Length Incorrect, Explicit: "" + explicit) + ""implicit: "") + implicit), android.net.IpSecAlgorithm.equals(explicit, implicit)); }",2160e1ccb166535eafd07db08e3f7c42aac51300,"@org.junit.Test public void testDefaultTruncLenAuth() throws java.lang.Exception { try { android.net.IpSecAlgorithm implicit = new android.net.IpSecAlgorithm(IpSecAlgorithm.AUTH_HMAC_SHA256, java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, (256 / 8))); fail(""Expected exception on unprovided auth trunclen""); } catch (java.lang.IllegalArgumentException expected) { } }",8db029749f58777f01b575a733a667001ce2c795,testDefaultTruncLen(),testDefaultTruncLenAuth(),6,2,"@org.junit.Test public void testNoTruncLen() throws java.lang.Exception { java.util.Map.Entry<java.lang.String, java.lang.Integer>[] authAndAeadList = new java.util.Map.Entry[]{ new java.util.AbstractMap.SimpleEntry(IpSecAlgorithm.AUTH_HMAC_MD5, 128), new java.util.AbstractMap.SimpleEntry(IpSecAlgorithm.AUTH_HMAC_SHA1, 160), new java.util.AbstractMap.SimpleEntry(IpSecAlgorithm.AUTH_HMAC_SHA256, 256), new java.util.AbstractMap.SimpleEntry(IpSecAlgorithm.AUTH_HMAC_SHA384, 384), new java.util.AbstractMap.SimpleEntry(IpSecAlgorithm.AUTH_HMAC_SHA512, 512), new java.util.AbstractMap.SimpleEntry(IpSecAlgorithm.AUTH_CRYPT_AES_GCM, 224) }; for (java.util.Map.Entry<java.lang.String, java.lang.Integer> algData : authAndAeadList) { try { new android.net.IpSecAlgorithm(algData.getKey(), java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, ((algData.getValue()) / 8))); fail(""Expected exception on unprovided auth trunclen""); } catch (java.lang.IllegalArgumentException expected) { } } new android.net.IpSecAlgorithm(IpSecAlgorithm.CRYPT_AES_CBC, java.util.Arrays.copyOf(android.net.IpSecAlgorithmTest.KEY_MATERIAL, (256 / 8))); }",843c8c1d1ba81e4cfeec20bec3a241a73030db4d,testNoTruncLen(),297752,110,362
101913,core_java_android_text_format_Time.java,42.0,"public boolean parse(java.lang.String s) { if (s == null) { throw new java.lang.NullPointerException(""time string is null""); } if (nativeParse(s)) { timezone = android.text.format.Time.TIMEZONE_UTC; return true; } return false; }",5ac712e171ab202cc2326115567b571f92fd4a6c,"public boolean parse(java.lang.String s) { if (s == null) { throw new java.lang.NullPointerException(""time string is null""); } if (parse2(s)) { timezone = android.text.format.Time.TIMEZONE_UTC; return true; } return false; }",0fb29a192433f0e7cc9549feebfc42233c849c7d,parse(java.lang.String),parse(java.lang.String),3,42,"public boolean parse(java.lang.String s) { if (s == null) { throw new java.lang.NullPointerException(""time string is null""); } if (parseInternal(s)) { timezone = android.text.format.Time.TIMEZONE_UTC; return true; } return false; }",32e7dffac61ea13b8e545d3d648c8edffaabcb80,parse(java.lang.String),441332,67,67
293986,telecomm_java_android_telecom_ConnectionService.java,32.0,"@java.lang.Override public void stopDtmfTone(java.lang.String callId) { mHandler.obtainMessage(android.telecom.ConnectionService.MSG_STOP_DTMF_TONE, callId).sendToTarget(); }",5d90bc4aac0f559469fc221848b6526ffa376eef,"@java.lang.Override public void stopDtmfTone(java.lang.String callId, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startExternalSession(sessionInfo, android.telecom.ConnectionService.SESSION_STOP_DTMF); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_STOP_DTMF_TONE, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }",24afdd09bb3de599af705e493960787e85d27a81,stopDtmfTone(java.lang.String),"stopDtmfTone(java.lang.String,android.telecom.Logging.Session$Info)",8,102,"@java.lang.Override public void stopDtmfTone(java.lang.String callId, android.telecom.Logging.Session.Info sessionInfo) { android.telecom.Log.startSession(sessionInfo, android.telecom.ConnectionService.SESSION_STOP_DTMF); try { com.android.internal.os.SomeArgs args = com.android.internal.os.SomeArgs.obtain(); args.arg1 = callId; args.arg2 = android.telecom.Log.createSubsession(); mHandler.obtainMessage(android.telecom.ConnectionService.MSG_STOP_DTMF_TONE, args).sendToTarget(); } finally { android.telecom.Log.endSession(); } }",e27a9e442999974b11684c3bb30b6a8a03b5332b,"stopDtmfTone(java.lang.String,android.telecom.Logging.Session$Info)",425117,166,165
220043,luni_src_test_java_libcore_java_math_BigDecimalTest.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testDivideAvoids64bitOverflow() throws java.lang.Exception { java.math.BigDecimal minLong = new java.math.BigDecimal(""-9223372036854775808""); assertEquals(""9223372036854775808/(-1)"", new java.math.BigDecimal(""9223372036854775808""), minLong.divide(new java.math.BigDecimal(""-1""), 0, java.math.RoundingMode.UNNECESSARY)); assertEquals(""9223372036854775808/(-1) with one decimal of precision"", new java.math.BigDecimal(""9223372036854775808.0""), minLong.divide(new java.math.BigDecimal(""-1""), 1, java.math.RoundingMode.UNNECESSARY)); assertEquals(""9223372036854775808/(-1.0)"", new java.math.BigDecimal(""9223372036854775808""), minLong.divide(new java.math.BigDecimal(""-1.0""), 0, java.math.RoundingMode.UNNECESSARY)); assertEquals(""922337203685477580.8/(-0.1)"", new java.math.BigDecimal(""9223372036854775808""), new java.math.BigDecimal(""-922337203685477580.8"").divide(new java.math.BigDecimal(""-0.1""), 0, java.math.RoundingMode.UNNECESSARY)); assertEquals(""92233720368547758080/(-1E+1)"", new java.math.BigDecimal(""9223372036854775808""), new java.math.BigDecimal(""-92233720368547758080"").divide(new java.math.BigDecimal(""-1E+1""), 0, java.math.RoundingMode.UNNECESSARY)); assertEquals(""9223372036854775808/(-1.0)"", new java.math.BigDecimal(""9223372036854775808.0""), minLong.divide(new java.math.BigDecimal(""-1.0""), 1, java.math.RoundingMode.UNNECESSARY)); }",299e66a7040873e35304d93e38a73e563d62a821,,testDivideAvoids64bitOverflow(),6,3,"public void testDivideAvoids64bitOverflow() throws java.lang.Exception { java.math.BigDecimal minLong = new java.math.BigDecimal(""-9223372036854775808""); assertEquals(""9223372036854775808/(-1)"", new java.math.BigDecimal(""9223372036854775808""), minLong.divide(new java.math.BigDecimal(""-1""), 0, java.math.RoundingMode.UNNECESSARY)); assertEquals(""922337203685477580.8/(-0.1)"", new java.math.BigDecimal(""9223372036854775808""), new java.math.BigDecimal(""-922337203685477580.8"").divide(new java.math.BigDecimal(""-0.1""), 0, java.math.RoundingMode.UNNECESSARY)); assertEquals(""92233720368547758080/(-1E+1)"", new java.math.BigDecimal(""9223372036854775808""), new java.math.BigDecimal(""-92233720368547758080"").divide(new java.math.BigDecimal(""-1E+1""), 0, java.math.RoundingMode.UNNECESSARY)); assertEquals(""9223372036854775808/(-10) with one decimal of precision"", new java.math.BigDecimal(""922337203685477580.8""), minLong.divide(new java.math.BigDecimal(""-1E+1""), 1, java.math.RoundingMode.UNNECESSARY)); assertEquals(""9223372036854775808/(-1) with one decimal of precision"", new java.math.BigDecimal(""9223372036854775808.0""), minLong.divide(new java.math.BigDecimal(""-1""), 1, java.math.RoundingMode.UNNECESSARY)); assertEquals(""9223372036854775808/(-1.0)"", new java.math.BigDecimal(""9223372036854775808""), minLong.divide(new java.math.BigDecimal(""-1.0""), 0, java.math.RoundingMode.UNNECESSARY)); assertEquals(""9223372036854775808/(-1.0) with one decimal of precision"", new java.math.BigDecimal(""9223372036854775808.0""), minLong.divide(new java.math.BigDecimal(""-1.0""), 1, java.math.RoundingMode.UNNECESSARY)); assertEquals(""4611686018427387904/(-5E-1)"", new java.math.BigDecimal(""9223372036854775808""), new java.math.BigDecimal(""-4611686018427387904"").divide(new java.math.BigDecimal(""-5E-1""), 0, java.math.RoundingMode.UNNECESSARY)); }",b96e74e6bc0643cbc7c54a37a8b6539fa5c742e2,testDivideAvoids64bitOverflow(),224152,342,470
54943,gradle_src_main_groovy_com_android_build_gradle_internal_variant_BaseVariantData.java,,,,@com.android.annotations.NonNull protected java.lang.String getFlavoredName(boolean capitalized) { java.lang.StringBuilder builder = new java.lang.StringBuilder(); for (com.android.builder.DefaultProductFlavor flavor : variantConfiguration.getFlavorConfigs()) { java.lang.String name = flavor.getName(); builder.append((capitalized ? com.android.build.gradle.internal.variant.BaseVariantData.capitalize(name) : name)); } return builder.toString(); },f13b0865d547fe9ae81b16e4707c9afa82c7a10f,,getFlavoredName(boolean),4,3,@com.android.annotations.NonNull protected java.lang.String getFlavoredName(boolean capitalized) { java.lang.StringBuilder builder = new java.lang.StringBuilder(); for (com.android.builder.DefaultProductFlavor flavor : variantConfiguration.getFlavorConfigs()) { java.lang.String name = flavor.getName(); builder.append((capitalized ? com.android.build.gradle.internal.StringHelper.capitalize(name) : name)); } return builder.toString(); },29081d9d6342b4f7816d2e1916218a5117a77209,getFlavoredName(boolean),11011,109,106
193988,ojluni_src_main_java_java_net_URI.java,73.0,"private int parseHostname(int start, int n) throws java.net.URISyntaxException { int p = start; int q; int l = -1; do { q = scan(p, n, java.net.URI.L_ALPHANUM, java.net.URI.H_ALPHANUM); if (q <= p) break; l = p; if (q > p) { p = q; q = scan(p, n, ((java.net.URI.L_ALPHANUM) | (java.net.URI.L_DASH)), ((java.net.URI.H_ALPHANUM) | (java.net.URI.H_DASH))); if (q > p) { if ((charAt((q - 1))) == '-') fail(""Illegal character in hostname"", (q - 1)); p = q; } } q = scan(p, n, '.'); if (q <= p) break; p = q; } while (p < n ); if ((p < n) && (!(at(p, n, ':')))) fail(""Illegal character in hostname"", p); if (l < 0) failExpecting(""hostname"", start); if ((l > start) && (!(java.net.URI.match(charAt(l), java.net.URI.L_ALPHA, java.net.URI.H_ALPHA)))) { fail(""Illegal character in hostname"", l); } host = substring(start, p); return p; }",3adebfc964e389de296a60bb3907442e41357f2e,"private int parseHostname(int start, int n) throws java.net.URISyntaxException { int p = start; int q; int l = -1; do { q = scan(p, n, java.net.URI.L_ALPHANUM, java.net.URI.H_ALPHANUM); if (q <= p) break; l = p; if (q > p) { p = q; q = scan(p, n, (((java.net.URI.L_ALPHANUM) | (java.net.URI.L_DASH)) | (java.net.URI.H_UNDERSCORE)), (((java.net.URI.H_ALPHANUM) | (java.net.URI.H_DASH)) | (java.net.URI.H_UNDERSCORE))); if (q > p) { if ((charAt((q - 1))) == '-') fail(""Illegal character in hostname"", (q - 1)); p = q; } } q = scan(p, n, '.'); if (q <= p) break; p = q; } while (p < n ); if ((p < n) && (!(at(p, n, ':')))) fail(""Illegal character in hostname"", p); if (l < 0) failExpecting(""hostname"", start); if ((l > start) && (!(java.net.URI.match(charAt(l), java.net.URI.L_ALPHA, java.net.URI.H_ALPHA)))) { fail(""Illegal character in hostname"", l); } host = substring(start, p); return p; }",5c4c6592b9c739ab2776b8d9f40c8dd7399386e3,"parseHostname(int,int)","parseHostname(int,int)",3,73,"private int parseHostname(int start, int n) throws java.net.URISyntaxException { int p = start; int q; int l = -1; do { q = scan(p, n, java.net.URI.L_ALPHANUM, java.net.URI.H_ALPHANUM); if (q <= p) break; l = p; if (q > p) { p = q; q = scan(p, n, (((java.net.URI.L_ALPHANUM) | (java.net.URI.L_DASH)) | (java.net.URI.L_UNDERSCORE)), (((java.net.URI.H_ALPHANUM) | (java.net.URI.H_DASH)) | (java.net.URI.H_UNDERSCORE))); if (q > p) { if ((charAt((q - 1))) == '-') fail(""Illegal character in hostname"", (q - 1)); p = q; } } q = scan(p, n, '.'); if (q <= p) break; p = q; } while (p < n ); if ((p < n) && (!(at(p, n, ':')))) fail(""Illegal character in hostname"", p); if (l < 0) failExpecting(""hostname"", start); if ((l > start) && (!(java.net.URI.match(charAt(l), java.net.URI.L_ALPHA, java.net.URI.H_ALPHA)))) { fail(""Illegal character in hostname"", l); } host = substring(start, p); return p; }",dbc0d1801416d6cdcbfffeda7009deedbf4a9524,"parseHostname(int,int)",363121,339,339
105273,ddmlib_src_main_java_com_android_ddmlib_PropertyFetcher.java,,,,public synchronized java.lang.String getProperty(java.lang.String name) { return mProperties.get(name); },171b4d5aff57a779726b51ec444e5899efb90762,,getProperty(java.lang.String),6,3,public synchronized java.util.concurrent.Future<java.lang.String> getProperty(@com.android.annotations.NonNull java.lang.String name) { com.google.common.util.concurrent.SettableFuture<java.lang.String> result; if (mCacheState.equals(com.android.ddmlib.PropertyFetcher.CacheState.FETCHING)) { result = addPendingRequest(name); } else if ((mCacheState.equals(com.android.ddmlib.PropertyFetcher.CacheState.UNPOPULATED)) || (!(isRoProp(name)))) { result = addPendingRequest(name); mCacheState = com.android.ddmlib.PropertyFetcher.CacheState.FETCHING; fetchPropertiesAsync(); } else { result = com.google.common.util.concurrent.SettableFuture.create(); result.set(mProperties.get(name)); } return result; },fdb0d23ab8267cc83dcec1bac33f2d860bc6b664,getProperty(java.lang.String),290223,27,200
529328,src_java_com_android_internal_telephony_uicc_IccRecords.java,40.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void registerForLockedRecordsLoaded(android.os.Handler h, int what, java.lang.Object obj) { if (mDestroyed.get()) { return; } android.os.Registrant r = new android.os.Registrant(h, what, obj); mLockedRecordsLoadedRegistrants.add(r); if (((mRecordsToLoad) == 0) && (mLockedRecordsRequested)) { r.notifyRegistrant(new android.os.AsyncResult(null, null, null)); } }",3d2f8526905ae297fa0b3dabd545075d54958ae9,,"registerForLockedRecordsLoaded(android.os.Handler,int,java.lang.Object)",8,15,"public void registerForLockedRecordsLoaded(android.os.Handler h, int what, java.lang.Object obj) { if (mDestroyed.get()) { return; } android.os.Registrant r = new android.os.Registrant(h, what, obj); mLockedRecordsLoadedRegistrants.add(r); if (getLockedRecordsLoaded()) { r.notifyRegistrant(new android.os.AsyncResult(null, null, null)); } }",396e6ebb3523a9cffff98b688e6b08b1fa4b5d35,"registerForLockedRecordsLoaded(android.os.Handler,int,java.lang.Object)",518889,108,100
358929,core_java_android_net_NetworkCapabilities.java,5.0,"private void combineSpecifiers(android.net.NetworkCapabilities nc) { java.lang.String otherSpecifier = nc.getNetworkSpecifier(); if (android.text.TextUtils.isEmpty(otherSpecifier)) return; if ((android.text.TextUtils.isEmpty(mNetworkSpecifier)) == false) { throw new java.lang.IllegalStateException(""Can't combine two networkSpecifiers""); } setNetworkSpecifier(otherSpecifier); }",9a5ff1ab446c0b46869bc0440404f98040f1110d,"private void combineSpecifiers(android.net.NetworkCapabilities nc) { if ((mNetworkSpecifier) != null) { throw new java.lang.IllegalStateException(""Can't combine two networkSpecifiers""); } setNetworkSpecifier(nc.getNetworkSpecifier()); }",5ee65e48e7ed1a0982da71e6fbff1306b09e3db8,combineSpecifiers(android.net.NetworkCapabilities),combineSpecifiers(android.net.NetworkCapabilities),13,5,"private void combineSpecifiers(android.net.NetworkCapabilities nc) { if (((mNetworkSpecifier) != null) && (!(mNetworkSpecifier.equals(nc.mNetworkSpecifier)))) { throw new java.lang.IllegalStateException(""Can't combine two networkSpecifiers""); } setNetworkSpecifier(nc.mNetworkSpecifier); }",2e880d0e4df826c7ee60e8ac2e7678caf61f0acd,combineSpecifiers(android.net.NetworkCapabilities),8126,56,70
22502,sdkmanager_app_tests_com_android_sdkmanager_AvdManagerTestCase.java,,,,public com.android.sdkmanager.AvdManagerTestCase.TmpAvdManager getAvdManager() { return mAvdManager; },b40bc20f7d906776cc7103db998bb7d719a0a1a1,,getAvdManager(),7,4,public com.android.sdkmanager.SdkManagerTestCase.TmpAvdManager getAvdManager() { return mAvdManager; },2858a1742fd6a7c61aebe5b635745f23464f1fd9,getAvdManager(),195288,30,29
81416,tests_tests_renderscript_src_android_renderscript_cts_TestClz.java,,,,"private void checkClzShort3() { android.renderscript.Allocation inValue = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I16_3(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inValue, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I16_3(mRS), android.renderscript.cts.INPUTSIZE); script.forEach_testClzShort3(inValue, out); verifyResultsClzShort3(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testClzShort3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I16_3(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testClzShort3(inValue, out); verifyResultsClzShort3(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testClzShort3: "" + (e.toString()))); } }",690b2f93fea3f2620d64b53f53dc226146112f98,,checkClzShort3(),9,27,"private void checkClzShort3Short3() { android.renderscript.Allocation inValue = CreateRandomAllocation(mRS, Element.DataType.SIGNED_16, 3, -5910533768474953078L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.SIGNED_16, 3), android.renderscript.cts.INPUTSIZE); script.forEach_testClzShort3Short3(inValue, out); verifyResultsClzShort3Short3(inValue, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testClzShort3Short3: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.SIGNED_16, 3), android.renderscript.cts.INPUTSIZE); scriptRelaxed.forEach_testClzShort3Short3(inValue, out); verifyResultsClzShort3Short3(inValue, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testClzShort3Short3: "" + (e.toString()))); } }",6db1f5f2ee047f404ba754f6520d7b0f83fc8cf7,checkClzShort3Short3(),143444,328,317
361230,luni_src_main_java_libcore_util_TimeZoneFinder.java,,,,"public static libcore.util.TimeZoneFinder createInstanceForTests(java.lang.String xml) throws java.io.IOException, org.xmlpull.v1.XmlPullParserException { libcore.util.TimeZoneFinder finder = new libcore.util.TimeZoneFinder(); finder.readXml(new java.io.StringReader(xml)); return finder; }",4135e505de4b076385cc79d795663112c90a887d,,createInstanceForTests(java.lang.String),8,1,public static libcore.util.TimeZoneFinder createInstanceForTests(java.lang.String xml) { return new libcore.util.TimeZoneFinder(libcore.util.TimeZoneFinder.ReaderSupplier.forString(xml)); },3f88a57d4b7c5c3b4985a84dd014be4378753763,createInstanceForTests(java.lang.String),429190,81,55
286959,services_tests_servicestests_src_com_android_server_connectivity_TetheringTest.java,,,,"private void setupForRequiredProvisioning() { when(mResources.getStringArray(com.android.internal.R.array.config_mobile_hotspot_provision_app)).thenReturn(com.android.server.connectivity.TetheringTest.PROVISIONING_APP_NAME); when(mSystemProperties.getBoolean(Tethering.DISABLE_PROVISIONING_SYSPROP_KEY, anyBoolean())).thenReturn(false); when(mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE)).thenReturn(mCarrierConfigManager); when(mCarrierConfigManager.getConfig()).thenReturn(mCarrierConfig); when(mCarrierConfig.getBoolean(CarrierConfigManager.KEY_REQUIRE_ENTITLEMENT_CHECKS_BOOL)).thenReturn(true); }",060a03f5076d1d873883552533a122f2db6e9ec7,,setupForRequiredProvisioning(),6,5,"private void setupForRequiredProvisioning() { when(mResources.getStringArray(com.android.internal.R.array.config_mobile_hotspot_provision_app)).thenReturn(com.android.server.connectivity.TetheringTest.PROVISIONING_APP_NAME); when(mSystemProperties.getBoolean(eq(Tethering.DISABLE_PROVISIONING_SYSPROP_KEY), anyBoolean())).thenReturn(false); when(mContext.getSystemService(Context.CARRIER_CONFIG_SERVICE)).thenReturn(mCarrierConfigManager); when(mCarrierConfigManager.getConfig()).thenReturn(mCarrierConfig); mCarrierConfig.putBoolean(CarrierConfigManager.KEY_REQUIRE_ENTITLEMENT_CHECKS_BOOL, true); }",dab075c835ff985a25a93f31e5ebaeea8c7a5ff6,setupForRequiredProvisioning(),288287,167,164
19300,sdkmanager_app_tests_com_android_sdkmanager_MainTest.java,,,,"@java.lang.Override public void setUp() throws java.lang.Exception { log = new com.android.sdkmanager.AvdManagerTest.MockLog(); fakeSdkDir = java.io.File.createTempFile((((this.getClass().getSimpleName()) + ""_"") + (this.getName())), null); fakeSdk = com.android.sdkmanager.AvdManagerTest.makeFakeSdk(fakeSdkDir); sdkManager = com.android.sdklib.SdkManager.createManager(fakeSdk.getAbsolutePath(), log); assertNotNull(""sdkManager location was invalid"", sdkManager); am = new com.android.sdklib.internal.avd.AvdManager(sdkManager, log); avdFolder = new java.io.File(fakeSdk, ""avdData""); v0_0 = sdkManager.getTargets()[0]; }",c2a896766dd19fcd9d78efb8f3d540747f7c509f,,setUp(),13,3,"@java.lang.Override public void setUp() throws java.lang.Exception { mLog = new com.android.sdkmanager.MockLog(); fakeSdkDir = java.io.File.createTempFile((((this.getClass().getSimpleName()) + ""_"") + (this.getName())), null); mFakeSdk = com.android.sdkmanager.SdkManagerTestUtil.makeFakeSdk(fakeSdkDir); mSdkManager = com.android.sdklib.SdkManager.createManager(mFakeSdk.getAbsolutePath(), mLog); assertNotNull(""sdkManager location was invalid"", mSdkManager); mAvdManager = new com.android.sdklib.internal.avd.AvdManager(mSdkManager, mLog); mAvdFolder = new java.io.File(mFakeSdk, ""avdData""); mTarget = mSdkManager.getTargets()[0]; }",dcde3fb86153580c24b58fe7195e7538ecd5207a,setUp(),29979,177,185
617010,services_core_java_com_android_server_am_ActivityManagerService.java,181.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"final com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo info, java.lang.String customProcess, boolean isolated, boolean noHiddenApiChecks, java.lang.String abiOverride) { com.android.server.am.ProcessRecord app; if (!isolated) { app = getProcessRecordLocked((customProcess != null ? customProcess : info.processName), info.uid, true); } else { app = null; } if (app == null) { app = newProcessRecordLocked(info, customProcess, isolated, 0); updateLruProcessLocked(app, false, null); updateOomAdjLocked(); } try { android.app.AppGlobals.getPackageManager().setPackageStoppedState(info.packageName, false, android.os.UserHandle.getUserId(app.uid)); } catch (android.os.RemoteException e) { } catch (java.lang.IllegalArgumentException e) { android.util.Slog.w(com.android.server.am.ActivityManagerService.TAG, (((""Failed trying to unstop package "" + (info.packageName)) + "": "") + e)); } if (((info.flags) & (com.android.server.am.ActivityManagerService.PERSISTENT_MASK)) == (com.android.server.am.ActivityManagerService.PERSISTENT_MASK)) { app.persistent = true; app.maxAdj = ProcessList.PERSISTENT_PROC_ADJ; } if (((app.thread) == null) && ((mPersistentStartingProcesses.indexOf(app)) < 0)) { mPersistentStartingProcesses.add(app); startProcessLocked(app, ""added application"", (customProcess != null ? customProcess : app.processName), abiOverride, null, null); } return app; }",ada8b4c8a340650eea3f01c12e9cc045a0c266c2,,"addAppLocked(android.content.pm.ApplicationInfo,java.lang.String,boolean,boolean,java.lang.String)",6,319,"final com.android.server.am.ProcessRecord addAppLocked(android.content.pm.ApplicationInfo info, java.lang.String customProcess, boolean isolated, boolean disableHiddenApiChecks, java.lang.String abiOverride) { com.android.server.am.ProcessRecord app; if (!isolated) { app = getProcessRecordLocked((customProcess != null ? customProcess : info.processName), info.uid, true); } else { app = null; } if (app == null) { app = newProcessRecordLocked(info, customProcess, isolated, 0); updateLruProcessLocked(app, false, null); updateOomAdjLocked(); } try { android.app.AppGlobals.getPackageManager().setPackageStoppedState(info.packageName, false, android.os.UserHandle.getUserId(app.uid)); } catch (android.os.RemoteException e) { } catch (java.lang.IllegalArgumentException e) { android.util.Slog.w(com.android.server.am.ActivityManagerService.TAG, (((""Failed trying to unstop package "" + (info.packageName)) + "": "") + e)); } if (((info.flags) & (com.android.server.am.ActivityManagerService.PERSISTENT_MASK)) == (com.android.server.am.ActivityManagerService.PERSISTENT_MASK)) { app.persistent = true; app.maxAdj = ProcessList.PERSISTENT_PROC_ADJ; } if (((app.thread) == null) && ((mPersistentStartingProcesses.indexOf(app)) < 0)) { mPersistentStartingProcesses.add(app); startProcessLocked(app, ""added application"", (customProcess != null ? customProcess : app.processName), disableHiddenApiChecks, abiOverride, null, null); } return app; }",2934cddb997e422f6c51761e28ad50c0df67af96,"addAppLocked(android.content.pm.ApplicationInfo,java.lang.String,boolean,boolean,java.lang.String)",520479,389,394
441634,telephony_java_android_telephony_MbmsDownloadManager.java,19.0,"public void dispose() { try { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { android.util.Log.i(android.telephony.MbmsDownloadManager.LOG_TAG, ""Service already dead""); return; } downloadService.dispose(mSubscriptionId); mService.set(null); } catch (android.os.RemoteException e) { android.util.Log.i(android.telephony.MbmsDownloadManager.LOG_TAG, ""Remote exception while disposing of service""); } }",71bac7f37ac71d1b8f95bd551ab7eb4e8453a3e9,"public void dispose() { try { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { android.util.Log.i(android.telephony.MbmsDownloadManager.LOG_TAG, ""Service already dead""); return; } downloadService.dispose(mSubscriptionId); } catch (android.os.RemoteException e) { android.util.Log.i(android.telephony.MbmsDownloadManager.LOG_TAG, ""Remote exception while disposing of service""); } finally { mService.set(null); android.telephony.MbmsDownloadManager.sIsInitialized = false; } }",01ef01239782000ddce9022e24bdfaf1efb0f5c7,dispose(),dispose(),6,19,"public void dispose() { try { android.telephony.mbms.vendor.IMbmsDownloadService downloadService = mService.get(); if (downloadService == null) { android.util.Log.i(android.telephony.MbmsDownloadManager.LOG_TAG, ""Service already dead""); return; } downloadService.dispose(mSubscriptionId); } catch (android.os.RemoteException e) { android.util.Log.i(android.telephony.MbmsDownloadManager.LOG_TAG, ""Remote exception while disposing of service""); } finally { mService.set(null); android.telephony.MbmsDownloadManager.sIsInitialized.set(false); } }",0a038c511f89960a67b00bd2fce291ae33495047,dispose(),409239,139,141
64584,perflib_src_test_java_com_android_tools_perflib_vmtrace_VmTraceParserTest.java,5.0,"@java.lang.Override public int compare(java.util.Map.Entry<java.lang.Long, com.android.tools.perflib.vmtrace.MethodInfo> o1, java.util.Map.Entry<java.lang.Long, com.android.tools.perflib.vmtrace.MethodInfo> o2) { long diff = (o2.getValue().getInclusiveThreadTimes()) - (o1.getValue().getInclusiveThreadTimes()); return com.google.common.primitives.Ints.saturatedCast(diff); }",e7f6eac14d4fe91fcc77bd4590c6dcb6a8af120b,"@java.lang.Override public int compare(java.util.Map.Entry<java.lang.Long, com.android.tools.perflib.vmtrace.MethodInfo> o1, java.util.Map.Entry<java.lang.Long, com.android.tools.perflib.vmtrace.MethodInfo> o2) { long diff = (o2.getValue().getInclusiveThreadTime(threadName)) - (o1.getValue().getInclusiveThreadTime(threadName)); return com.google.common.primitives.Ints.saturatedCast(diff); }",058db4b899aadefee84ed97365d5fd303882c3c1,"compare(java.util.Map$Entry,java.util.Map$Entry)","compare(java.util.Map$Entry,java.util.Map$Entry)",4,5,"@java.lang.Override public int compare(java.util.Map.Entry<java.lang.Long, com.android.tools.perflib.vmtrace.MethodInfo> o1, java.util.Map.Entry<java.lang.Long, com.android.tools.perflib.vmtrace.MethodInfo> o2) { long diff = (o2.getValue().getInclusiveTime(threadName, ClockType.THREAD)) - (o1.getValue().getInclusiveTime(threadName, ClockType.THREAD)); return com.google.common.primitives.Ints.saturatedCast(diff); }",c7a95b2da3e9dfabba5cbad60d5a3c4c18df6db2,"compare(java.util.Map$Entry,java.util.Map$Entry)",111448,120,128
186130,jack-tests_tests_com_android_jack_java8_LambdaTest.java,31.0,"@org.junit.Test public void testLamba001() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA001).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",ca5874a42000536b0bc3f98c09dc6bdb5ae70a3b,"@org.junit.Test public void testLamba001() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA001).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",9552392b369796fa56f9c84e706b2019b199fe47,testLamba001(),testLamba001(),7,31,@org.junit.Test public void testLamba001() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA001).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },55f09010f1e361fe20fd2ec62821f410aedd8035,testLamba001(),466341,81,55
579565,src_java_com_android_internal_telephony_RIL.java,102.0,"@java.lang.Override public void stopNetworkScan(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_1.IRadio radioProxy11 = android.hardware.radio.V1_1.IRadio.castFrom(radioProxy); if (radioProxy11 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STOP_NETWORK_SCAN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy11.stopNetworkScan(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""stopNetworkScan"", e); } } } }",28afa51d944c5a454619b8e7bcefaf41436065ae,"@java.lang.Override public void stopNetworkScan(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_1.IRadio radioProxy11 = android.hardware.radio.V1_1.IRadio.castFrom(radioProxy); if (radioProxy11 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.RILConstants.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_STOP_NETWORK_SCAN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy11.stopNetworkScan(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""stopNetworkScan"", e); } } } }",da70b5dacf51b928d245740a1517a809c91739a4,stopNetworkScan(android.os.Message),stopNetworkScan(android.os.Message),3,102,"@java.lang.Override public void stopNetworkScan(android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { android.hardware.radio.V1_1.IRadio radioProxy11 = android.hardware.radio.V1_1.IRadio.castFrom(radioProxy); if (radioProxy11 == null) { if (result != null) { android.os.AsyncResult.forMessage(result, null, com.android.internal.telephony.CommandException.fromRilErrno(com.android.internal.telephony.REQUEST_NOT_SUPPORTED)); result.sendToTarget(); } } else { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_STOP_NETWORK_SCAN, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); } try { radioProxy11.stopNetworkScan(rr.mSerial); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""stopNetworkScan"", e); } } } }",28afa51d944c5a454619b8e7bcefaf41436065ae,stopNetworkScan(android.os.Message),89174,314,306
578734,src_java_com_android_internal_telephony_RIL.java,168.0,"private static void writeToParcelForLte(android.os.Parcel p, int ci, int pci, int tac, int earfcn, java.lang.String mcc, java.lang.String mnc, java.lang.String al, java.lang.String as, int ss, int rsrp, int rsrq, int rssnr, int cqi, int ta) { p.writeInt(ci); p.writeInt(pci); p.writeInt(tac); p.writeInt(earfcn); p.writeString(mcc); p.writeString(mnc); p.writeString(al); p.writeString(as); p.writeInt(ss); p.writeInt(rsrp); p.writeInt(rsrq); p.writeInt(rssnr); p.writeInt(cqi); p.writeInt(ta); }",b502e4d40891086cbe54f176c507e3c4e67084ff,"private static void writeToParcelForLte(android.os.Parcel p, int ci, int pci, int tac, int earfcn, java.lang.String mcc, java.lang.String mnc, java.lang.String al, java.lang.String as, int ss, int rsrp, int rsrq, int rssnr, int cqi, int ta) { p.writeInt(CellIdentity.TYPE_LTE); p.writeInt(ci); p.writeInt(pci); p.writeInt(tac); p.writeInt(earfcn); p.writeString(mcc); p.writeString(mnc); p.writeString(al); p.writeString(as); p.writeInt(ss); p.writeInt(rsrp); p.writeInt(rsrq); p.writeInt(rssnr); p.writeInt(cqi); p.writeInt(ta); }",af69b5209f0ee4c25fb3ca9861c4d4677b7c0eb6,"writeToParcelForLte(android.os.Parcel,int,int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,int,int,int,int)","writeToParcelForLte(android.os.Parcel,int,int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,int,int,int,int)",5,171,"private static void writeToParcelForLte(android.os.Parcel p, int ci, int pci, int tac, int earfcn, java.lang.String mcc, java.lang.String mnc, java.lang.String al, java.lang.String as, int ss, int rsrp, int rsrq, int rssnr, int cqi, int ta) { p.writeInt(CellIdentity.TYPE_LTE); p.writeString(mcc); p.writeString(mnc); p.writeInt(ci); p.writeInt(pci); p.writeInt(tac); p.writeInt(earfcn); p.writeString(al); p.writeString(as); p.writeInt(ss); p.writeInt(rsrp); p.writeInt(rsrq); p.writeInt(rssnr); p.writeInt(cqi); p.writeInt(ta); }",635399f3250419b697d501ddb4a979144c71509a,"writeToParcelForLte(android.os.Parcel,int,int,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,int,int,int,int)",426346,201,201
144781,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_scope_GlobalScope.java,,,,public java.lang.String getApkLocation() { java.lang.String apkLocation = getDefaultApkLocation(); if (project.hasProperty(com.android.build.gradle.internal.scope.PROPERTY_APK_LOCATION)) { apkLocation = ((java.lang.String) (project.getProperties().get(com.android.build.gradle.internal.scope.PROPERTY_APK_LOCATION))); } return apkLocation; },62f3c2413720f45c51793b19c05023ab7d87be5a,,getApkLocation(),6,2,@com.android.annotations.NonNull public java.lang.String getApkLocation() { java.lang.String apkLocation = getDefaultApkLocation(); if (project.hasProperty(com.android.build.gradle.internal.scope.PROPERTY_APK_LOCATION)) { apkLocation = ((java.lang.String) (project.getProperties().get(com.android.build.gradle.internal.scope.PROPERTY_APK_LOCATION))); } return apkLocation; },d7ae275e2368fb2cf10b1f0e45b0443c604da7c3,getApkLocation(),337604,92,100
62820,builder_src_main_java_com_android_builder_DefaultBuildType.java,4.0,"@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add(""name"", mName).add(""debuggable"", mDebuggable).add(""jniDebugBuild"", mJniDebugBuild).add(""renderscriptDebugBuild"", mRenderscriptDebugBuild).add(""renderscriptOptimLevel"", mRenderscriptOptimLevel).add(""packageNameSuffix"", mPackageNameSuffix).add(""versionNameSuffix"", mVersionNameSuffix).add(""runProguard"", mRunProguard).add(""zipAlign"", mZipAlign).add(""signingConfig"", mSigningConfig).toString(); }",4987c2f4d919c5c4f094d391df22a269b978a364,"@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add(""name"", mName).add(""debuggable"", mDebuggable).add(""jniDebugBuild"", mJniDebugBuild).add(""renderscriptDebugBuild"", mRenderscriptDebugBuild).add(""renderscriptOptimLevel"", mRenderscriptOptimLevel).add(""packageNameSuffix"", mPackageNameSuffix).add(""versionNameSuffix"", mVersionNameSuffix).add(""runProguard"", mRunProguard).add(""zipAlign"", mZipAlign).add(""signingConfig"", mSigningConfig).add(""proguardRules"", mProguardRules).toString(); }",05358e2ec28d63af25fdd6f2029ad847422b22ee,toString(),toString(),9,7,"@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString() { return com.google.common.base.Objects.toStringHelper(this).add(""name"", mName).add(""debuggable"", mDebuggable).add(""jniDebugBuild"", mJniDebugBuild).add(""renderscriptDebugBuild"", mRenderscriptDebugBuild).add(""renderscriptOptimLevel"", mRenderscriptOptimLevel).add(""packageNameSuffix"", mPackageNameSuffix).add(""versionNameSuffix"", mVersionNameSuffix).add(""runProguard"", mRunProguard).add(""zipAlign"", mZipAlign).add(""signingConfig"", mSigningConfig).toString(); }",4987c2f4d919c5c4f094d391df22a269b978a364,toString(),105394,162,152
349918,core_java_android_net_IpSecTransform.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private android.net.IIpSecService getIpSecService() { if ((mContext) == null) { throw new java.lang.IllegalArgumentException(""Cannot get service from a null context!""); } android.os.IBinder b = android.os.ServiceManager.getService(android.net.IPSEC_SERVICE); if (b == null) { throw new android.os.RemoteException(""Failed to connect to IpSecService"").rethrowFromSystemServer(); } return IIpSecService.Stub.asInterface(b); }",4e1727ecbe098737942d597221b4fa28d76365f1,,getIpSecService(),17,4,"private android.net.IIpSecService getIpSecService() { android.os.IBinder b = android.os.ServiceManager.getService(android.content.Context.IPSEC_SERVICE); if (b == null) { throw new android.os.RemoteException(""Failed to connect to IpSecService"").rethrowAsRuntimeException(); } return IIpSecService.Stub.asInterface(b); }",ccb8473b33677ebed2601dfb5ded9a974d83fb4c,getIpSecService(),151041,112,86
270260,tests_tests_media_src_android_media_cts_BassBoostTest.java,15.0,"public void test1_2SetStrengthAfterRelease() throws java.lang.Exception { if (!(isBassBoostAvailable())) { return; } getBassBoost(0); mBassBoost.release(); try { mBassBoost.setStrength(android.media.cts.BassBoostTest.TEST_STRENGTH); fail(""setStrength() processed after release()""); } catch (java.lang.IllegalStateException e) { } finally { releaseBassBoost(); } }",93f6fb20a7ddbbf498493b4c3bb99cba2b3532ef,"public void test1_2SetStrengthAfterRelease() throws java.lang.Exception { if (!(isBassBoostAvailable())) { return; } getBassBoost(1); mBassBoost.release(); try { mBassBoost.setStrength(android.media.cts.BassBoostTest.TEST_STRENGTH); fail(""setStrength() processed after release()""); } catch (java.lang.IllegalStateException e) { } finally { releaseBassBoost(); } }",447fbc493598673f3675890023d090b211852c6c,test1_2SetStrengthAfterRelease(),test1_2SetStrengthAfterRelease(),5,15,"public void test1_2SetStrengthAfterRelease() throws java.lang.Exception { if (!(isBassBoostAvailable())) { return; } getBassBoost(getSessionId()); mBassBoost.release(); try { mBassBoost.setStrength(android.media.cts.BassBoostTest.TEST_STRENGTH); fail(""setStrength() processed after release()""); } catch (java.lang.IllegalStateException e) { } finally { releaseBassBoost(); } }",1920f4351126cce23603c2570259d1dc76c49420,test1_2SetStrengthAfterRelease(),278702,108,110
143360,services_core_java_com_android_server_wm_DimLayer.java,11.0,"void show(int layer, float alpha, long duration) { if (com.android.server.wm.DimLayer.DEBUG) android.util.Slog.v(com.android.server.wm.DimLayer.TAG, (((((""show: layer="" + layer) + "" alpha="") + alpha) + "" duration="") + duration)); if ((mDimSurface) == null) { android.util.Slog.e(com.android.server.wm.DimLayer.TAG, ""show: no Surface""); mTargetAlpha = mAlpha = 0; return; } if ((!(mLastBounds.equals(mBounds))) || ((mLayer) != layer)) { adjustSurface(layer, true); } long curTime = android.os.SystemClock.uptimeMillis(); final boolean animating = isAnimating(); if ((animating && (((mTargetAlpha) != alpha) || (durationEndsEarlier(duration)))) || ((!animating) && ((mAlpha) != alpha))) { if (duration <= 0) { setAlpha(alpha); } else { mStartAlpha = mAlpha; mStartTime = curTime; mDuration = duration; } } if (com.android.server.wm.DimLayer.DEBUG) android.util.Slog.v(com.android.server.wm.DimLayer.TAG, (((""show: mStartAlpha="" + (mStartAlpha)) + "" mStartTime="") + (mStartTime))); mTargetAlpha = alpha; }",e1414c55df371a2d99c20c878b32d2fe7fc70b54,"void show(int layer, float alpha, long duration) { if (com.android.server.wm.DimLayer.DEBUG) android.util.Slog.v(com.android.server.wm.DimLayer.TAG, (((((""show: layer="" + layer) + "" alpha="") + alpha) + "" duration="") + duration)); if ((mDimSurface) == null) { android.util.Slog.e(com.android.server.wm.DimLayer.TAG, ""show: no Surface""); mTargetAlpha = mAlpha = 0; return; } final boolean resized = !(mLastBounds.equals(mBounds)); if (resized || ((mLayer) != layer)) { adjustSurface(layer, true, resized); } long curTime = android.os.SystemClock.uptimeMillis(); final boolean animating = isAnimating(); if ((animating && (((mTargetAlpha) != alpha) || (durationEndsEarlier(duration)))) || ((!animating) && ((mAlpha) != alpha))) { if (duration <= 0) { setAlpha(alpha); } else { mStartAlpha = mAlpha; mStartTime = curTime; mDuration = duration; } } if (com.android.server.wm.DimLayer.DEBUG) android.util.Slog.v(com.android.server.wm.DimLayer.TAG, (((""show: mStartAlpha="" + (mStartAlpha)) + "" mStartTime="") + (mStartTime))); mTargetAlpha = alpha; }",6c6346c66a0c6b13e6fdf6385fb89b130e1a35eb,"show(int,float,long)","show(int,float,long)",4,11,"void show(int layer, float alpha, long duration) { if (com.android.server.wm.DimLayer.DEBUG) android.util.Slog.v(com.android.server.wm.DimLayer.TAG, (((((""show: layer="" + layer) + "" alpha="") + alpha) + "" duration="") + duration)); if ((mDimSurface) == null) { android.util.Slog.e(com.android.server.wm.DimLayer.TAG, ""show: no Surface""); mTargetAlpha = mAlpha = 0; return; } if (!(mLastBounds.equals(mBounds))) { adjustBounds(); } setLayer(layer); long curTime = android.os.SystemClock.uptimeMillis(); final boolean animating = isAnimating(); if ((animating && (((mTargetAlpha) != alpha) || (durationEndsEarlier(duration)))) || ((!animating) && ((mAlpha) != alpha))) { if (duration <= 0) { setAlpha(alpha); } else { mStartAlpha = mAlpha; mStartTime = curTime; mDuration = duration; } } if (com.android.server.wm.DimLayer.DEBUG) android.util.Slog.v(com.android.server.wm.DimLayer.TAG, (((""show: mStartAlpha="" + (mStartAlpha)) + "" mStartTime="") + (mStartTime))); mTargetAlpha = alpha; }",82340dbef43f2681c5c9a2f6c11db5b1a49f8daa,"show(int,float,long)",101630,331,314
82330,sdklib_src_main_java_com_android_sdklib_devices_DeviceManager.java,20.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean initSysImgDevices() { synchronized(mLock) { if ((mSysImgDevices) != null) { return false; } mSysImgDevices = new java.util.ArrayList<com.android.sdklib.devices.Device>(); if ((mOsSdkPath) == null) { return false; } com.android.sdklib.io.FileOp fop = new com.android.sdklib.io.FileOp(); java.io.File sysImgFolder = new java.io.File(mOsSdkPath, com.android.SdkConstants.FD_SYSTEM_IMAGES); for (java.io.File platformFolder : fop.listFiles(sysImgFolder)) { if (!(fop.isDirectory(platformFolder))) { continue; } for (java.io.File tagFolder : fop.listFiles(sysImgFolder)) { if (!(fop.isDirectory(tagFolder))) { continue; } for (java.io.File abiFolder : fop.listFiles(sysImgFolder)) { if (!(fop.isDirectory(abiFolder))) { continue; } java.io.File deviceXml = new java.io.File(abiFolder, com.android.SdkConstants.FN_DEVICES_XML); if (fop.isFile(deviceXml)) { mSysImgDevices.addAll(loadDevices(deviceXml)); } } } } return true; } }",3ff0779275b55a62509e25761600d0053d91d0bb,,initSysImgDevices(),2,12,"private boolean initSysImgDevices() { synchronized(mLock) { if ((mSysImgDevices) != null) { return false; } mSysImgDevices = new java.util.ArrayList<com.android.sdklib.devices.Device>(); if ((mOsSdkPath) == null) { return false; } com.android.sdklib.io.FileOp fop = new com.android.sdklib.io.FileOp(); java.io.File sysImgFolder = new java.io.File(mOsSdkPath, com.android.SdkConstants.FD_SYSTEM_IMAGES); for (java.io.File platformFolder : fop.listFiles(sysImgFolder)) { if (!(fop.isDirectory(platformFolder))) { continue; } for (java.io.File tagFolder : fop.listFiles(platformFolder)) { if (!(fop.isDirectory(tagFolder))) { continue; } for (java.io.File abiFolder : fop.listFiles(tagFolder)) { if (!(fop.isDirectory(abiFolder))) { continue; } java.io.File deviceXml = new java.io.File(abiFolder, com.android.SdkConstants.FN_DEVICES_XML); if (fop.isFile(deviceXml)) { mSysImgDevices.addAll(loadDevices(deviceXml)); } } } } return true; } }",13a2834c072b5e22e6dd860eafe655b7f499368b,initSysImgDevices(),214526,307,305
238602,jack_tests_com_android_jack_reporting_ReporterFormatTest.java,,,,"@org.junit.Before public void setUp() throws com.android.jack.IllegalOptionsException, com.android.sched.util.config.ConfigurationException, com.android.sched.util.file.CannotChangePermissionException, com.android.sched.util.file.CannotCreateFileException { com.android.jack.Options options = new com.android.jack.Options(); hooks = new com.android.sched.util.RunnableHooks(); reportFile = com.android.jack.TestTools.createTempFile(""reporter"", "".txt""); options.addProperty(Reporter.REPORTER_WRITER.getName(), reportFile.getPath()); options.checkValidity(hooks); com.android.sched.util.config.Config config = options.getConfig(); com.android.sched.util.config.ThreadConfig.setConfig(config); com.android.jack.Jack.getSession().setHooks(hooks); }",8db996d886f146212df903dfb71760890b29958f,,setUp(),3,4,"@org.junit.Before public void setUp() throws com.android.jack.IllegalOptionsException, com.android.sched.util.config.ConfigurationException, com.android.sched.util.file.CannotChangePermissionException, com.android.sched.util.file.CannotCreateFileException { com.android.sched.util.log.LoggerFactory.configure(new com.android.sched.util.log.LoggerConfiguration() { @java.lang.Override @javax.annotation.Nonnull public java.util.List<com.android.jack.reporting.PackageLevel> getLevels() { return java.util.Arrays.asList(new com.android.jack.reporting.PackageLevel("""", java.util.logging.Level.WARNING)); } @java.lang.Override @javax.annotation.Nonnull public java.util.Collection<java.util.logging.Handler> getHandlers() { java.util.logging.ConsoleHandler handler = new java.util.logging.ConsoleHandler(); handler.setFormatter(new com.android.sched.util.log.LogFormatter()); handler.setLevel(java.util.logging.Level.FINEST); return java.util.Collections.<java.util.logging.Handler>singletonList(handler); } }); com.android.jack.Options options = new com.android.jack.Options(); hooks = new com.android.sched.util.RunnableHooks(); reportFile = com.android.jack.TestTools.createTempFile(""reporter"", "".txt""); options.addProperty(Reporter.REPORTER_WRITER.getName(), reportFile.getPath()); options.checkValidity(hooks); com.android.sched.util.config.Config config = options.getConfig(); com.android.sched.util.config.ThreadConfig.setConfig(config); com.android.jack.Jack.getSession().setHooks(hooks); }",e7ac5437f72c1b59bc46ef8d27ad312a1d01554f,setUp(),8019,196,395
374866,telephony_java_android_telephony_TelephonyManager.java,282.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean isConcurrentVoiceAndDataSupported() { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); return telephony == null ? false : telephony.isConcurrentVoiceAndDataAllowed(getSubId()); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.TelephonyManager.TAG, ""Error calling ITelephony#isConcurrentVoiceAndDataAllowed"", e); } return false; }",70d642184bdee78f79fe7e3a79752a2a5ed932f1,,isConcurrentVoiceAndDataSupported(),3,51,"public boolean isConcurrentVoiceAndDataAllowed() { try { com.android.internal.telephony.ITelephony telephony = getITelephony(); return telephony == null ? false : telephony.isConcurrentVoiceAndDataAllowed(getSubId()); } catch (android.os.RemoteException e) { android.util.Log.e(android.telephony.TelephonyManager.TAG, ""Error calling ITelephony#isConcurrentVoiceAndDataAllowed"", e); } return false; }",32a6c240c4e4b8a1bf5dbc6b7cd7930199be7d1b,isConcurrentVoiceAndDataAllowed(),172324,107,107
340832,src_com_android_server_telecom_Call.java,113.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void onRttConnectionFailure() { setRttStreams(false); for (com.android.server.telecom.Call.Listener l : mListeners) { l.onRttConnectionFailure(this); } },05b252d3646c604ed22bf2d1b8c0da63db381402,,onRttConnectionFailure(),8,162,"public void onRttConnectionFailure(int reason) { setRttStreams(false); for (com.android.server.telecom.Call.Listener l : mListeners) { l.onRttInitiationFailure(this, reason); } }",9a4a3710dd801825442c5ae64bdeef4debc65558,onRttConnectionFailure(int),220104,50,56
665591,deviceside_src_com_android_graphics_benchmark_device_MetricsReporter.java,,,,public void startLoop(long timestampNsecs) { loopStartTimesNsecs.add(timestampNsecs); },da5396d2a9bcc2c8022d0f24c56bbd0372071ef1,,startLoop(long),2,0,public void startLoop(long timestampNsecs) { loopStartTimesMsecs.add(timestampNsecs); },a718f6f626267f0cc68112c712b3fc2a4f453794,startLoop(long),262389,24,24
525619,src_com_android_bluetooth_hfpclient_HeadsetClientStateMachine.java,51.0,"@java.lang.Override public void enter() { if (com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, (""Enter Connected: "" + (getCurrentMessage().what))); } mAudioWbs = false; mCommandedSpeakerVolume = -1; }",161f2b1336e741748c42cc13014ffc3f1cced71b,"@java.lang.Override public void enter() { if (com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, (""Enter Connected: "" + (getCurrentMessage().what))); } mAudioWbs = false; mCommandedSpeakerVolume = -1; if ((mPrevState) == (mConnecting)) { broadcastConnectionState(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_CONNECTING); } else if ((mPrevState) == (mDisconnected)) { broadcastConnectionState(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_DISCONNECTED); } }",f034e65da32ce5f923b7bfd1a4dcd0a5e057419e,enter(),enter(),4,51,"@java.lang.Override public void enter() { if (com.android.bluetooth.hfpclient.HeadsetClientStateMachine.DBG) { android.util.Log.d(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, (""Enter Connected: "" + (getCurrentMessage().what))); } mAudioWbs = false; mCommandedSpeakerVolume = -1; if ((mPrevState) == (mConnecting)) { broadcastConnectionState(mCurrentDevice, BluetoothProfile.STATE_CONNECTED, BluetoothProfile.STATE_CONNECTING); } else if ((mPrevState) != (mAudioOn)) { java.lang.String prevStateName = ((mPrevState) == null) ? ""null"" : mPrevState.getName(); android.util.Log.e(com.android.bluetooth.hfpclient.HeadsetClientStateMachine.TAG, (((""Connected: Illegal state transition from "" + prevStateName) + "" to Connecting, mCurrentDevice="") + (mCurrentDevice))); } }",9ad9697b942257b71b6d280d5a6e7a15f3af676b,enter(),72239,159,223
570203,src_java_com_android_ims_ImsServiceProxy.java,32.0,"@java.lang.Override public void imsFeatureRemoved(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((mIsAvailable) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(LOG_TAG, (((""Feature disabled on slotId: "" + slotId) + "" for feature: "") + feature)); mIsAvailable = false; } } }",991797ebbf96b4241a910d03def00b7fc9362735,"@java.lang.Override public void imsFeatureRemoved(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((mIsAvailable) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(com.android.ims.ImsServiceProxy.LOG_TAG, (((""Feature disabled on slotId: "" + slotId) + "" for feature: "") + feature)); mIsAvailable = false; } } }",d40c8311b50a699dbcf44622578632a1663e317d,"imsFeatureRemoved(int,int)","imsFeatureRemoved(int,int)",14,33,"@java.lang.Override public void imsFeatureRemoved(int slotId, int feature) throws android.os.RemoteException { synchronized(mLock) { if (((mIsAvailable) && ((mSlotId) == slotId)) && (feature == (mSupportedFeature))) { android.util.Log.i(com.android.ims.ImsServiceProxy.TAG, (((""Feature disabled on slotId: "" + slotId) + "" for feature: "") + feature)); mIsAvailable = false; if ((mStatusCallback) != null) { mStatusCallback.notifyUnavailable(); } } } }",506013ac6588e0ebda4eee06a27db8c54abc50bd,"imsFeatureRemoved(int,int)",176952,117,134
79530,luni_src_main_java_java_net_DatagramSocketImpl.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,protected void initDisconnected() { },8103c7dc42742f279b4cc95bd3c45aca5881a050,,initDisconnected(),11,8,protected void onDisconnect() { },7ee11fa1aa587d0409c9a92897e7760f649d9790,onDisconnect(),510834,7,7
137133,jack-tests_src_com_android_jack_test_toolchain_JackApiToolchainBase.java,,,,"protected com.android.jack.api.JackConfigProvider getConfigProvider(@javax.annotation.Nonnull java.io.File jackPrebuilt) throws java.lang.ClassNotFoundException, java.lang.IllegalAccessException, java.lang.IllegalArgumentException, java.lang.InstantiationException, java.lang.NoSuchMethodException, java.lang.SecurityException, java.lang.reflect.InvocationTargetException, java.net.MalformedURLException { java.lang.ClassLoader loader; com.android.jack.api.JackConfigProvider confProvider; loader = java.net.URLClassLoader.newInstance(new java.net.URL[]{ jackPrebuilt.toURI().toURL() }, com.android.jack.api.example.Main.class.getClassLoader()); java.lang.Class<? extends com.android.jack.api.JackConfigProvider> confProviderClass = java.lang.Class.forName(JackConfigProvider.CLASS_NAME, true, loader).asSubclass(com.android.jack.api.JackConfigProvider.class); com.android.jack.api.JackConfigProvider configProvider = confProviderClass.getConstructor().newInstance(); compilerCodeName = configProvider.getCompilerCodeName(); compilerVersion = configProvider.getCompilerVersion(); compilerBuildId = configProvider.getCompilerBuildId(); compilerCodeBase = configProvider.getCompilerCodeBase(); return confProviderClass.getConstructor().newInstance(); }",0ec8816b247cb3e7fee6a4569c81e3c6f89394d4,,getConfigProvider(java.io.File),14,4,@java.lang.Override @javax.annotation.Nonnull public com.android.jack.test.toolchain.JackApiToolchainBase setIncrementalFolder(@javax.annotation.Nonnull java.io.File incrementalFolder) { this.incrementalFolder = incrementalFolder; return this; },5f3f9c22c6b77ad5d8133e34e6148f5e82146d49,setIncrementalFolder(java.io.File),345767,290,59
328878,jack_src_com_android_jack_transformations_ast_string_parameterrefiners_GetMethodParameterRefiner.java,1.0,"@javax.annotation.CheckForNull private java.lang.String getMethodSignature(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call) { com.android.jack.ir.ast.JExpression instance = call.getInstance(); assert instance != null; java.util.List<com.android.jack.ir.ast.JExpression> args = call.getArgs(); assert (args.size()) == 2; com.android.jack.ir.ast.JExpression methodName = args.get(0); com.android.jack.ir.ast.JExpression parameters = args.get(1); if ((methodName instanceof com.android.jack.ir.ast.JStringLiteral) && (parameters instanceof com.android.jack.ir.ast.JNewArray)) { java.lang.StringBuilder sb = new java.lang.StringBuilder(((com.android.jack.ir.ast.JStringLiteral) (methodName)).getValue()); sb.append(""(""); for (com.android.jack.ir.ast.JExpression param : ((com.android.jack.ir.ast.JNewArray) (parameters)).getInitializers()) { if (param instanceof com.android.jack.ir.ast.JClassLiteral) { sb.append(com.android.jack.Jack.getLookupFormatter().getName(((com.android.jack.ir.ast.JClassLiteral) (param)).getRefType())); } else { return null; } } sb.append("")""); return sb.toString(); } return null; }",abe7b9a4a26eeabc0c2a27fe8a5e9ea81bbcbdb6,"@javax.annotation.CheckForNull private java.lang.String getMethodSignature(@javax.annotation.Nonnull java.lang.String methodName, @javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call) { com.android.jack.ir.ast.JExpression instance = call.getInstance(); assert instance != null; java.util.List<com.android.jack.ir.ast.JExpression> args = call.getArgs(); assert (args.size()) == 2; com.android.jack.ir.ast.JExpression parameters = args.get(1); if (parameters instanceof com.android.jack.ir.ast.JNewArray) { java.lang.StringBuilder sb = new java.lang.StringBuilder(methodName); sb.append(""(""); for (com.android.jack.ir.ast.JExpression param : ((com.android.jack.ir.ast.JNewArray) (parameters)).getInitializers()) { if (param instanceof com.android.jack.ir.ast.JClassLiteral) { sb.append(com.android.jack.Jack.getLookupFormatter().getName(((com.android.jack.ir.ast.JClassLiteral) (param)).getRefType())); } else { return null; } } sb.append("")""); return sb.toString(); } return null; }",e07b2cf1bbb2ff8642afd63e9654f777a3139f82,getMethodSignature(com.android.jack.ir.ast.JMethodCall),"getMethodSignature(java.lang.String,com.android.jack.ir.ast.JMethodCall)",4,2,"@javax.annotation.CheckForNull private java.lang.String getMethodSignature(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodCall call) { com.android.jack.ir.ast.JExpression instance = call.getInstance(); assert instance != null; java.util.List<com.android.jack.ir.ast.JExpression> args = call.getArgs(); assert (args.size()) == 2; com.android.jack.ir.ast.JExpression methodName = args.get(0); com.android.jack.ir.ast.JExpression parameters = args.get(1); if ((methodName instanceof com.android.jack.ir.ast.JStringLiteral) && (parameters instanceof com.android.jack.ir.ast.JNewArray)) { java.lang.StringBuilder sb = new java.lang.StringBuilder(((com.android.jack.ir.ast.JStringLiteral) (methodName)).getValue()); sb.append(""(""); for (com.android.jack.ir.ast.JExpression param : ((com.android.jack.ir.ast.JNewArray) (parameters)).getInitializers()) { if (param instanceof com.android.jack.ir.ast.JClassLiteral) { sb.append(com.android.jack.Jack.getLookupFormatter().getName(((com.android.jack.ir.ast.JClassLiteral) (param)).getRefType())); } else { return null; } } sb.append("")""); return sb.toString(); } return null; }",abe7b9a4a26eeabc0c2a27fe8a5e9ea81bbcbdb6,getMethodSignature(com.android.jack.ir.ast.JMethodCall),429614,289,331
41115,src_java_com_android_internal_telephony_IccCardProxy.java,,,,public boolean hasIccCard() { if (((mUiccCard) != null) && ((mUiccCard.getCardState()) != (com.android.internal.telephony.IccCardStatus.CardState.CARDSTATE_ABSENT))) { return true; } return false; },63ab661467a5f7c2a5b9036a34e273ffa98517e0,,hasIccCard(),22,36,@java.lang.Override public boolean isApplicationOnIcc(com.android.internal.telephony.IccCardApplicationStatus.AppType type) { synchronized(mLock) { java.lang.Boolean retValue = ((mUiccCard) != null) ? mUiccCard.isApplicationOnIcc(type) : false; return retValue; } },1c930587e2e17d706295a52db5151681247b5b45,isApplicationOnIcc(com.android.internal.telephony.IccCardApplicationStatus$AppType),499846,63,79
81416,tests_tests_renderscript_src_android_renderscript_cts_CoreMathVerifier.java,,,,public static void computeLength(android.renderscript.cts.TestLength.ArgumentsFloatFloat args) { args.ulf = 4; args.ulfRelaxed = 12; double sum = (args.inV) * (args.inV); args.out = ((float) (java.lang.Math.sqrt(sum))); },060c94ad2b0564e2417e12cee255b000d3e4af7e,,computeLength(android.renderscript.cts.TestLength$ArgumentsFloatFloat),9,38,"public static void computeMax(android.renderscript.cts.TestMax.ArgumentsCharCharChar args) { args.ulf = 0; args.ulfRelaxed = 0; args.out = ((byte) (java.lang.StrictMath.max(args.inV1, args.inV2))); }",ccf6a2b6f2af3a497d7b3b07d214c3530da45a6a,computeMax(android.renderscript.cts.TestMax$ArgumentsCharCharChar),142490,74,68
212323,core_java_android_bluetooth_BluetoothGattServer.java,7.0,"public void onCharacteristicReadRequest(java.lang.String address, int transId, int offset, boolean isLong, int srvcType, int srvcInstId, android.os.ParcelUuid srvcId, int charInstId, android.os.ParcelUuid charId) { java.util.UUID srvcUuid = srvcId.getUuid(); java.util.UUID charUuid = charId.getUuid(); if (android.bluetooth.BluetoothGattServer.VDBG) android.util.Log.d(android.bluetooth.BluetoothGattServer.TAG, ((((""onCharacteristicReadRequest() - "" + ""service="") + srvcUuid) + "", characteristic="") + charUuid)); android.bluetooth.BluetoothDevice device = mAdapter.getRemoteDevice(address); android.bluetooth.BluetoothGattService service = getService(srvcUuid, srvcInstId, srvcType); if (service == null) return; android.bluetooth.BluetoothGattCharacteristic characteristic = service.getCharacteristic(charUuid); if (characteristic == null) return; try { mCallback.onCharacteristicReadRequest(device, transId, offset, characteristic); } catch (java.lang.Exception ex) { android.util.Log.w(android.bluetooth.BluetoothGattServer.TAG, ""Unhandled exception in callback"", ex); } }",d92e780c594c89c9b4d65db1692d4e53d36344b2,"public void onCharacteristicReadRequest(java.lang.String address, int transId, int offset, boolean isLong, int handle) { if (android.bluetooth.BluetoothGattServer.VDBG) android.util.Log.d(android.bluetooth.BluetoothGattServer.TAG, (""onCharacteristicReadRequest() - handle="" + handle)); android.bluetooth.BluetoothDevice device = mAdapter.getRemoteDevice(address); android.bluetooth.BluetoothGattCharacteristic characteristic = getCharacteristicById(handle); if (characteristic == null) { android.util.Log.w(android.bluetooth.BluetoothGattServer.TAG, (""onCharacteristicReadRequest() no char for handle "" + handle)); return; } try { mCallback.onCharacteristicReadRequest(device, transId, offset, characteristic); } catch (java.lang.Exception ex) { android.util.Log.w(android.bluetooth.BluetoothGattServer.TAG, ""Unhandled exception in callback"", ex); } }",26d54c5c999405e3196b109b5645e09e8260050b,"onCharacteristicReadRequest(java.lang.String,int,int,boolean,int,int,android.os.ParcelUuid,int,android.os.ParcelUuid)","onCharacteristicReadRequest(java.lang.String,int,int,boolean,int)",12,9,"public void onCharacteristicReadRequest(java.lang.String address, int transId, int offset, boolean isLong, int handle) { if (android.bluetooth.BluetoothGattServer.VDBG) android.util.Log.d(android.bluetooth.BluetoothGattServer.TAG, (""onCharacteristicReadRequest() - handle="" + handle)); android.bluetooth.BluetoothDevice device = mAdapter.getRemoteDevice(address); android.bluetooth.BluetoothGattCharacteristic characteristic = getCharacteristicByHandle(handle); if (characteristic == null) { android.util.Log.w(android.bluetooth.BluetoothGattServer.TAG, (""onCharacteristicReadRequest() no char for handle "" + handle)); return; } try { mCallback.onCharacteristicReadRequest(device, transId, offset, characteristic); } catch (java.lang.Exception ex) { android.util.Log.w(android.bluetooth.BluetoothGattServer.TAG, ""Unhandled exception in callback"", ex); } }",07609526ba56bc77d6ff61eca8ea80ee6da1cb65,"onCharacteristicReadRequest(java.lang.String,int,int,boolean,int)",303295,201,202
92757,luni_src_main_java_java_nio_DirectByteBuffer.java,44.0,@java.lang.Override public final boolean isValid() { return !(freed); },f99540e554d1606e2181dcbd063ba6401a51eb02,@java.lang.Override public final boolean isValid() { return block.isValid(); },02d6ee26b1248efff7d95d071cbeffcc8d83e2a3,isValid(),isValid(),3,3,@java.lang.Override public final boolean isAccessible() { return !(block.isFreed()); },b75535e24eb791ebaa3cfd4c3c9c717c7a5502e9,isAccessible(),35220,18,22
570086,src_com_android_bluetooth_mapclient_MapClientService.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.android.internal.annotations.VisibleForTesting void removeUncleanAccounts() { if (com.android.bluetooth.mapclient.MapClientService.DBG) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); dump(sb); android.util.Log.d(com.android.bluetooth.mapclient.MapClientService.TAG, (""removeUncleanAccounts:InstanceMap end state: "" + (sb.toString()))); } java.util.Iterator iterator = mMapInstanceMap.entrySet().iterator(); while (iterator.hasNext()) { java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.mapclient.MceStateMachine> profileConnection = ((java.util.Map.Entry) (iterator.next())); if ((profileConnection.getValue().getState()) == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { iterator.remove(); } } if (com.android.bluetooth.mapclient.MapClientService.DBG) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); dump(sb); android.util.Log.d(com.android.bluetooth.mapclient.MapClientService.TAG, (""removeUncleanAccounts:InstanceMap end state: "" + (sb.toString()))); } }",9933549271c850fbfe634cf7ab4245bed23f9c70,,removeUncleanAccounts(),9,33,"@android.support.annotation.VisibleForTesting void removeUncleanAccounts() { if (com.android.bluetooth.mapclient.MapClientService.DBG) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); dump(sb); android.util.Log.d(com.android.bluetooth.mapclient.MapClientService.TAG, (""removeUncleanAccounts:InstanceMap end state: "" + (sb.toString()))); } java.util.Iterator iterator = mMapInstanceMap.entrySet().iterator(); while (iterator.hasNext()) { java.util.Map.Entry<android.bluetooth.BluetoothDevice, com.android.bluetooth.mapclient.MceStateMachine> profileConnection = ((java.util.Map.Entry) (iterator.next())); if ((profileConnection.getValue().getState()) == (android.bluetooth.BluetoothProfile.STATE_DISCONNECTED)) { iterator.remove(); } } if (com.android.bluetooth.mapclient.MapClientService.DBG) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); dump(sb); android.util.Log.d(com.android.bluetooth.mapclient.MapClientService.TAG, (""removeUncleanAccounts:InstanceMap end state: "" + (sb.toString()))); } }",1ecbe0ace9b08ccf0fe9b0cd5c1f0855d68773d6,removeUncleanAccounts(),29000,277,275
237621,jack-tests_tests_com_android_jack_java8_RetroLambdaTests.java,10.0,@org.junit.Test public void retroLambdaDefaultMethodsTest003() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_003); },ad5633b72bde479832540e3f1b1ba32b2cd5c40b,@org.junit.Test @java.lang.Runtime public void retroLambdaDefaultMethodsTest003() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_003); },f5b636c2387fdf5402f5c99500aebeae56f6257d,retroLambdaDefaultMethodsTest003(),retroLambdaDefaultMethodsTest003(),11,10,@org.junit.Test @java.lang.Runtime(from = RuntimeVersion.N) public void retroLambdaDefaultMethodsTest003() throws java.lang.Exception { run(RETROLAMBDA_DEFAULTMETHODS_003); },16e2b3ba05c663327e0ced305dc8247d5c4f265a,retroLambdaDefaultMethodsTest003(),273891,43,51
194745,jill_src_com_android_jill_frontend_java_JavaTransformer.java,12.0,"public void transform(@javax.annotation.Nonnull java.util.jar.JarFile jarFile) { java.util.zip.ZipOutputStream zos = null; try { if ((options.getOutputContainer()) == (com.android.jill.ContainerType.ZIP)) { zos = new java.util.zip.ZipOutputStream(new java.io.FileOutputStream(options.getOutput())); } transformJavaFiles(jarFile, zos); dumpJackLibraryProperties(zos); } catch (java.lang.Exception e) { throw new com.android.jill.JillException((""Failed to transform "" + (jarFile.getName())), e); } finally { if (zos != null) { try { zos.close(); } catch (java.io.IOException e) { throw new com.android.jill.JillException(""Error closing zip."", e); } } } }",b55a5d7eace188cc628af6e695aa384eeac9b18b,"public void transform(@javax.annotation.Nonnull java.util.jar.JarFile jarFile) { java.util.zip.ZipOutputStream zos = null; try { if ((options.getOutputContainer()) == (com.android.jill.ContainerType.ZIP)) { zos = new java.util.zip.ZipOutputStream(new java.io.FileOutputStream(options.getOutput())); } transformJavaFiles(jarFile, zos); dumpJackLibraryProperties(zos); } catch (java.lang.Exception e) { if (e instanceof com.android.jill.JillException) { throw ((com.android.jill.JillException) (e)); } throw new com.android.jill.JillException(e.getMessage(), e); } finally { if (zos != null) { try { zos.close(); } catch (java.io.IOException e) { throw new com.android.jill.JillException(""Error closing zip."", e); } } } }",a633b47e51111c2f74973fcc1e0d362899c157c6,transform(java.util.jar.JarFile),transform(java.util.jar.JarFile),2,12,"public void transform(@javax.annotation.Nonnull java.util.jar.JarFile jarFile) { java.util.zip.ZipOutputStream zos = null; try { if ((options.getOutputContainer()) == (com.android.jill.ContainerType.ZIP)) { zos = new java.util.zip.ZipOutputStream(new java.io.FileOutputStream(options.getOutput())); } transformJavaFiles(jarFile, zos); dumpJackLibraryProperties(zos); } catch (com.android.jill.JillException e) { throw e; } catch (java.lang.Exception e) { throw new com.android.jill.JillException(e.getMessage(), e); } finally { if (zos != null) { try { zos.close(); } catch (java.io.IOException e) { throw new com.android.jill.JillException(""Error closing zip."", e); } } } }",b0d9a2bbe1ec0f94ed555922c27ad0653e06b9e8,transform(java.util.jar.JarFile),98299,223,206
122533,jack_src_com_android_jack_lookup_JPhantomLookup.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@javax.annotation.Nonnull @java.lang.Override public com.android.jack.ir.ast.JAnnotation getPhantom(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage pack, @javax.annotation.Nonnull java.lang.String simpleName) { return pack.getPhantomAnnotation(simpleName); }",5d8456c7c1e30a6a8eef11939279101217554d4f,,"getPhantom(com.android.jack.ir.ast.JPackage,java.lang.String)",3,3,"@javax.annotation.Nonnull @java.lang.Override public com.android.jack.ir.ast.JAnnotation getType(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage pack, @javax.annotation.Nonnull java.lang.String simpleName) { return pack.getPhantomAnnotation(simpleName); }",31e7a95a0d200e24604de9bd74d8d87716739891,"getType(com.android.jack.ir.ast.JPackage,java.lang.String)",272235,72,72
336300,service_java_com_android_server_wifi_SupplicantStaIfaceHal.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean loadNetworks(java.util.Map<java.lang.String, android.net.wifi.WifiConfiguration> configs, android.util.SparseArray<java.util.Map<java.lang.String, java.lang.String>> networkExtras) { java.util.List<java.lang.Integer> networkIds = listNetworks(); if (networkIds == null) { android.util.Log.e(com.android.server.wifi.SupplicantStaIfaceHal.TAG, ""Failed to list networks""); return false; } for (java.lang.Integer networkId : networkIds) { com.android.server.wifi.SupplicantStaNetworkHal network = getNetwork(networkId); if (network == null) { android.util.Log.e(com.android.server.wifi.SupplicantStaIfaceHal.TAG, (""Failed to get network with ID: "" + networkId)); return false; } android.net.wifi.WifiConfiguration config = new android.net.wifi.WifiConfiguration(); java.util.Map<java.lang.String, java.lang.String> networkExtra = new java.util.HashMap<>(); if (!(network.loadWifiConfiguration(config, networkExtra))) { android.util.Log.e(com.android.server.wifi.SupplicantStaIfaceHal.TAG, (""Failed to load wifi configuration for network with ID: "" + networkId)); return false; } config.setIpAssignment(IpConfiguration.IpAssignment.DHCP); config.setProxySettings(IpConfiguration.ProxySettings.NONE); networkExtras.put(networkId, networkExtra); java.lang.String configKey = networkExtra.get(SupplicantStaNetworkHal.ID_STRING_KEY_CONFIG_KEY); final android.net.wifi.WifiConfiguration duplicateConfig = configs.put(configKey, config); if (duplicateConfig != null) { android.util.Log.i(com.android.server.wifi.SupplicantStaIfaceHal.TAG, (""Replacing duplicate network: "" + (duplicateConfig.networkId))); removeNetwork(duplicateConfig.networkId); } } return true; }",89438a3536761b96abee476841e8441db9672bf1,,"loadNetworks(java.util.Map,android.util.SparseArray)",7,39,"public boolean loadNetworks(java.util.Map<java.lang.String, android.net.wifi.WifiConfiguration> configs, android.util.SparseArray<java.util.Map<java.lang.String, java.lang.String>> networkExtras) { java.util.List<java.lang.Integer> networkIds = listNetworks(); if (networkIds == null) { android.util.Log.e(com.android.server.wifi.SupplicantStaIfaceHal.TAG, ""Failed to list networks""); return false; } for (java.lang.Integer networkId : networkIds) { com.android.server.wifi.SupplicantStaNetworkHal network = getNetwork(networkId); if (network == null) { android.util.Log.e(com.android.server.wifi.SupplicantStaIfaceHal.TAG, (""Failed to get network with ID: "" + networkId)); return false; } android.net.wifi.WifiConfiguration config = new android.net.wifi.WifiConfiguration(); java.util.Map<java.lang.String, java.lang.String> networkExtra = new java.util.HashMap<>(); if (!(network.loadWifiConfiguration(config, networkExtra))) { android.util.Log.e(com.android.server.wifi.SupplicantStaIfaceHal.TAG, (""Failed to load wifi configuration for network with ID: "" + networkId)); return false; } config.setIpAssignment(IpConfiguration.IpAssignment.DHCP); config.setProxySettings(IpConfiguration.ProxySettings.NONE); networkExtras.put(networkId, networkExtra); java.lang.String configKey = networkExtra.get(SupplicantStaNetworkHal.ID_STRING_KEY_CONFIG_KEY); final android.net.wifi.WifiConfiguration duplicateConfig = configs.put(configKey, config); if (duplicateConfig != null) { android.util.Log.i(com.android.server.wifi.SupplicantStaIfaceHal.TAG, (""Replacing duplicate network: "" + (duplicateConfig.networkId))); removeNetwork(duplicateConfig.networkId); networkExtras.remove(duplicateConfig.networkId); } } return true; }",7902583f7666b3984a8a123fba2e845b83332b2b,"loadNetworks(java.util.Map,android.util.SparseArray)",431450,486,498
100700,login_src_com_google_gct_login_CredentialedUserRoster.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void addLoginListener(com.google.gct.login.GoogleLoginListener listener) { synchronized(listeners) { listeners.add(listener); } },f726e014e174ca296fb5480821e423ec98233264,,addLoginListener(com.google.gct.login.GoogleLoginListener),3,10,void addLoginListener(com.google.gct.login.GoogleLoginListener listener) { synchronized(listeners) { listeners.add(listener); } },d91d50dddcfbdbd8388e33f7d93314121d2ebf92,addLoginListener(com.google.gct.login.GoogleLoginListener),144278,34,33
108516,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,1.0,"public void test_GetRoundingMode() { java.text.DecimalFormat decimalFormat = ((java.text.DecimalFormat) (java.text.DecimalFormat.getInstance(java.util.Locale.US))); assertEquals(""Incorrect default RoundingMode"", decimalFormat.getRoundingMode(), java.math.RoundingMode.HALF_EVEN); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_DOWN); assertEquals(""Returned incorrect RoundingMode"", decimalFormat.getRoundingMode(), java.math.RoundingMode.HALF_DOWN); }",fb37275a81c6690ce27a9ca111727bf3af6f29d0,"public void testGetRoundingMode() { java.text.DecimalFormat decimalFormat = ((java.text.DecimalFormat) (java.text.DecimalFormat.getInstance(java.util.Locale.US))); assertEquals(""Incorrect default RoundingMode"", decimalFormat.getRoundingMode(), java.math.RoundingMode.HALF_EVEN); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_DOWN); assertEquals(""Returned incorrect RoundingMode"", decimalFormat.getRoundingMode(), java.math.RoundingMode.HALF_DOWN); }",19f473843a498993400f7235d55612ed39dcb5de,test_GetRoundingMode(),testGetRoundingMode(),2,11,"public void test_getRoundingMode() { java.text.DecimalFormat decimalFormat = ((java.text.DecimalFormat) (java.text.DecimalFormat.getInstance(java.util.Locale.US))); assertEquals(""Incorrect default RoundingMode"", decimalFormat.getRoundingMode(), java.math.RoundingMode.HALF_EVEN); decimalFormat.setRoundingMode(java.math.RoundingMode.HALF_DOWN); assertEquals(""Returned incorrect RoundingMode"", decimalFormat.getRoundingMode(), java.math.RoundingMode.HALF_DOWN); }",f476aa870b75c979a5f5f38bba76d4394a96440a,test_getRoundingMode(),84394,101,102
81416,tests_tests_renderscript_src_android_renderscript_cts_TestRootn.java,,,,"private void checkRootnFloat4Int4() { android.renderscript.Allocation inV = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inV, 35, 0.0F, 1.0F); android.renderscript.Allocation inN = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.I32_4(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithInts(inN, 35, (-500), 400); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInN(inN); script.forEach_testRootnFloat4Int4(inV, out); verifyResultsRootnFloat4Int4(inV, inN, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRootnFloat4Int4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_4(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInN(inN); scriptRelaxed.forEach_testRootnFloat4Int4(inV, out); verifyResultsRootnFloat4Int4(inV, inN, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRootnFloat4Int4: "" + (e.toString()))); } }",c8595e2f473c3a5ea4349e311eda950c771f3d8d,,checkRootnFloat4Int4(),9,6,"private void checkRootnFloat4Int4Float4() { android.renderscript.Allocation inV = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 4, -7964324356488945337L); android.renderscript.Allocation inN = CreateRandomAllocation(mRS, Element.DataType.SIGNED_32, 4, -7964324356488945337L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); script.set_gAllocInN(inN); script.forEach_testRootnFloat4Int4Float4(inV, out); verifyResultsRootnFloat4Int4Float4(inV, inN, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRootnFloat4Int4Float4: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 4), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInN(inN); scriptRelaxed.forEach_testRootnFloat4Int4Float4(inV, out); verifyResultsRootnFloat4Int4Float4(inV, inN, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testRootnFloat4Int4Float4: "" + (e.toString()))); } }",99395ccd83f4d705ef57428c50aab8d207d090eb,checkRootnFloat4Int4Float4(),143397,448,398
79721,graphics_java_android_graphics_Matrix.java,9.0,"private static native boolean native_preConcat(int native_object, int other_matrix);",1d41c3754b4a508572f2e62e15a4391125e43f23,"private static native boolean native_preConcat(long native_object, long other_matrix);",d122fc8c2d772a13504413bfa808491fe2b8007f,"native_preConcat(int,int)","native_preConcat(long,long)",6,89,"private static native boolean native_preConcat(long native_object, long native_other_matrix);",4dd90a11dc2f90b46a1c3172052ced1cc131b321,"native_preConcat(long,long)",35503,19,21
17762,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_UpdaterData.java,9.0,"private void loadRemoteAddonsListInTask(com.android.sdklib.internal.repository.ITaskMonitor monitor) { mStateFetchRemoteAddonsList = -1; java.lang.String url = java.lang.System.getenv(""SDK_UPDATER_ADDONS_LIST""); if (url == null) { url = com.android.sdklib.repository.SdkAddonsListConstants.URL_ADDON_LIST; } if (getSettingsController().getForceHttp()) { url = url.replaceAll(""https://"", ""http://""); } com.android.sdklib.internal.repository.AddonsListFetcher fetcher = new com.android.sdklib.internal.repository.AddonsListFetcher(); com.android.sdklib.internal.repository.AddonsListFetcher.Site[] sites = fetcher.fetch(monitor, url); if (sites != null) { mSources.removeAll(SdkSourceCategory.ADDONS_3RD_PARTY); for (com.android.sdklib.internal.repository.AddonsListFetcher.Site s : sites) { mSources.add(SdkSourceCategory.ADDONS_3RD_PARTY, new com.android.sdklib.internal.repository.SdkAddonSource(s.getUrl(), s.getUiName())); } mStateFetchRemoteAddonsList = 1; } }",563e2d37c3ff70b72406725c96c538d8444368a7,"private void loadRemoteAddonsListInTask(com.android.sdklib.internal.repository.ITaskMonitor monitor) { mStateFetchRemoteAddonsList = -1; java.lang.String url = java.lang.System.getenv(""SDK_TEST_URLS""); if ((url == null) || ((url.length()) == 0)) { url = com.android.sdklib.repository.SdkAddonsListConstants.URL_ADDON_LIST; } else { if (url.endsWith(""/"")) { url += com.android.sdklib.repository.SdkAddonsListConstants.URL_DEFAULT_FILENAME; } else if (!(url.endsWith(SdkAddonsListConstants.URL_DEFAULT_FILENAME))) { url = null; } } if (url != null) { if (getSettingsController().getForceHttp()) { url = url.replaceAll(""https://"", ""http://""); } com.android.sdklib.internal.repository.AddonsListFetcher fetcher = new com.android.sdklib.internal.repository.AddonsListFetcher(); com.android.sdklib.internal.repository.AddonsListFetcher.Site[] sites = fetcher.fetch(monitor, url); if (sites != null) { mSources.removeAll(SdkSourceCategory.ADDONS_3RD_PARTY); for (com.android.sdklib.internal.repository.AddonsListFetcher.Site s : sites) { mSources.add(SdkSourceCategory.ADDONS_3RD_PARTY, new com.android.sdklib.internal.repository.SdkAddonSource(s.getUrl(), s.getUiName())); } mStateFetchRemoteAddonsList = 1; } } }",f6127e61f0b39d26413699486e15f5195f984658,loadRemoteAddonsListInTask(com.android.sdklib.internal.repository.ITaskMonitor),loadRemoteAddonsListInTask(com.android.sdklib.internal.repository.ITaskMonitor),4,9,"private void loadRemoteAddonsListInTask(com.android.sdklib.internal.repository.ITaskMonitor monitor) { mStateFetchRemoteAddonsList = -1; java.lang.String url = java.lang.System.getenv(""SDK_TEST_URLS""); if (url == null) { url = com.android.sdklib.repository.SdkAddonsListConstants.URL_ADDON_LIST; } else { java.lang.String[] urls = url.split("";""); url = null; for (java.lang.String u : urls) { u = u.trim(); if (u.endsWith(""/"")) { url = u + (com.android.sdklib.repository.SdkAddonsListConstants.URL_DEFAULT_FILENAME); break; } else if (u.endsWith(SdkAddonsListConstants.URL_DEFAULT_FILENAME)) { url = u; break; } } } if (url != null) { if (getSettingsController().getForceHttp()) { url = url.replaceAll(""https://"", ""http://""); } com.android.sdklib.internal.repository.AddonsListFetcher fetcher = new com.android.sdklib.internal.repository.AddonsListFetcher(); com.android.sdklib.internal.repository.AddonsListFetcher.Site[] sites = fetcher.fetch(monitor, url); if (sites != null) { mSources.removeAll(SdkSourceCategory.ADDONS_3RD_PARTY); for (com.android.sdklib.internal.repository.AddonsListFetcher.Site s : sites) { mSources.add(SdkSourceCategory.ADDONS_3RD_PARTY, new com.android.sdklib.internal.repository.SdkAddonSource(s.getUrl(), s.getUiName())); } mStateFetchRemoteAddonsList = 1; } } }",2f5c9b016212ae42e2a8936495a876e46f28110d,loadRemoteAddonsListInTask(com.android.sdklib.internal.repository.ITaskMonitor),239676,354,389
414159,dx_src_com_android_dx_dex_file_CallSiteIdsSection.java,,,,"public void intern(com.android.dx.rop.cst.CstCallSite callSite) { if (callSite == null) { throw new java.lang.NullPointerException(""callSite == null""); } throwIfPrepared(); com.android.dx.dex.file.CallSiteIdItem result = callSites.get(callSite); if (result == null) { result = new com.android.dx.dex.file.CallSiteIdItem(callSite); callSites.put(callSite, result); } }",8dbc7426b2c9088e3e667929956d51bb193ec26c,,intern(com.android.dx.rop.cst.CstCallSite),20,4,"public synchronized void intern(com.android.dx.rop.cst.CstCallSiteRef cstRef) { if (cstRef == null) { throw new java.lang.NullPointerException(""cstRef""); } throwIfPrepared(); com.android.dx.dex.file.CallSiteIdItem result = callSiteIds.get(cstRef); if (result == null) { result = new com.android.dx.dex.file.CallSiteIdItem(cstRef); callSiteIds.put(cstRef, result); } }",3f91e6a757b48a0d891b7bfe795cb605b3188808,intern(com.android.dx.rop.cst.CstCallSiteRef),238833,115,123
41115,src_java_com_android_internal_telephony_IccCardProxy.java,,,,"private void setExternalState(com.android.internal.telephony.IccCardConstants.State newState, boolean override) { if ((!override) && (newState == (mExternalState))) { return; } mExternalState = newState; android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_SIM_STATE, mExternalState.toString()); broadcastIccStateChangedIntent(mExternalState.getIntentString(), mExternalState.getReason()); }",a0fe915736172fee83622d6a062a27d92c97f14e,,"setExternalState(com.android.internal.telephony.IccCardConstants.State,boolean)",22,14,"private void setExternalState(com.android.internal.telephony.IccCardConstants.State newState, boolean override) { synchronized(mLock) { if ((!override) && (newState == (mExternalState))) { return; } mExternalState = newState; android.os.SystemProperties.set(com.android.internal.telephony.TelephonyProperties.PROPERTY_SIM_STATE, mExternalState.toString()); broadcastIccStateChangedIntent(getIccStateIntentString(mExternalState), getIccStateReason(mExternalState)); } }",76ab26b77712745708382b958a310e492802dbd2,"setExternalState(com.android.internal.telephony.IccCardConstants.State,boolean)",499829,109,123
452416,src_java_com_android_internal_telephony_imsphone_ImsPhoneMmiCode.java,49.0,"private void onQueryCfComplete(android.os.AsyncResult ar) { java.lang.StringBuilder sb = new java.lang.StringBuilder(getScString()); sb.append(""\n""); if ((ar.exception) != null) { mState = State.FAILED; if ((ar.exception) instanceof com.android.ims.ImsException) { com.android.ims.ImsException error = ((com.android.ims.ImsException) (ar.exception)); if ((error.getMessage()) != null) { sb.append(error.getMessage()); } else { sb.append(getErrorMessage(ar)); } } else { sb.append(getErrorMessage(ar)); } } else { com.android.internal.telephony.CallForwardInfo[] infos; infos = ((com.android.internal.telephony.CallForwardInfo[]) (ar.result)); if ((infos.length) == 0) { sb.append(mContext.getText(com.android.internal.R.string.serviceDisabled)); if ((mIccRecords) != null) { mPhone.setVoiceCallForwardingFlag(1, false, null); } } else { android.text.SpannableStringBuilder tb = new android.text.SpannableStringBuilder(); for (int serviceClassMask = 1; serviceClassMask <= (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_MAX); serviceClassMask <<= 1) { for (int i = 0, s = infos.length; i < s; i++) { if ((serviceClassMask & (infos[i].serviceClass)) != 0) { tb.append(makeCFQueryResultMessage(infos[i], serviceClassMask)); tb.append(""\n""); } } } sb.append(tb); } mState = State.COMPLETE; } mMessage = sb; mPhone.onMMIDone(this); }",137c751c915d0424993b3c4d71797c92f6a5004b,"private void onQueryCfComplete(android.os.AsyncResult ar) { java.lang.StringBuilder sb = new java.lang.StringBuilder(getScString()); sb.append(""\n""); if ((ar.exception) != null) { mState = State.FAILED; if ((ar.exception) instanceof com.android.ims.ImsException) { com.android.ims.ImsException error = ((com.android.ims.ImsException) (ar.exception)); if ((error.getCode()) == (com.android.ims.ImsReasonInfo.CODE_FDN_BLOCKED)) { sb.append(mContext.getText(com.android.internal.R.string.mmiFdnError)); } else if ((error.getMessage()) != null) { sb.append(error.getMessage()); } else { sb.append(getErrorMessage(ar)); } } else { sb.append(getErrorMessage(ar)); } } else { com.android.internal.telephony.CallForwardInfo[] infos; infos = ((com.android.internal.telephony.CallForwardInfo[]) (ar.result)); if ((infos.length) == 0) { sb.append(mContext.getText(com.android.internal.R.string.serviceDisabled)); if ((mIccRecords) != null) { mPhone.setVoiceCallForwardingFlag(1, false, null); } } else { android.text.SpannableStringBuilder tb = new android.text.SpannableStringBuilder(); for (int serviceClassMask = 1; serviceClassMask <= (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_MAX); serviceClassMask <<= 1) { for (int i = 0, s = infos.length; i < s; i++) { if ((serviceClassMask & (infos[i].serviceClass)) != 0) { tb.append(makeCFQueryResultMessage(infos[i], serviceClassMask)); tb.append(""\n""); } } } sb.append(tb); } mState = State.COMPLETE; } mMessage = sb; mPhone.onMMIDone(this); }",6c27c6f4ff744ec104ee7aac8a2045f3ac46664b,onQueryCfComplete(android.os.AsyncResult),onQueryCfComplete(android.os.AsyncResult),4,50,"private void onQueryCfComplete(android.os.AsyncResult ar) { java.lang.StringBuilder sb = new java.lang.StringBuilder(getScString()); sb.append(""\n""); if ((ar.exception) != null) { mState = State.FAILED; if ((ar.exception) instanceof com.android.ims.ImsException) { sb.append(getImsErrorMessage(ar)); } else { sb.append(getErrorMessage(ar)); } } else { com.android.internal.telephony.CallForwardInfo[] infos; infos = ((com.android.internal.telephony.CallForwardInfo[]) (ar.result)); if ((infos.length) == 0) { sb.append(mContext.getText(com.android.internal.R.string.serviceDisabled)); if ((mIccRecords) != null) { mPhone.setVoiceCallForwardingFlag(1, false, null); } } else { android.text.SpannableStringBuilder tb = new android.text.SpannableStringBuilder(); for (int serviceClassMask = 1; serviceClassMask <= (com.android.internal.telephony.CommandsInterface.SERVICE_CLASS_MAX); serviceClassMask <<= 1) { for (int i = 0, s = infos.length; i < s; i++) { if ((serviceClassMask & (infos[i].serviceClass)) != 0) { tb.append(makeCFQueryResultMessage(infos[i], serviceClassMask)); tb.append(""\n""); } } } sb.append(tb); } mState = State.COMPLETE; } mMessage = sb; android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhoneMmiCode.LOG_TAG, (""onQueryCfComplete: mmi="" + (this))); mPhone.onMMIDone(this); }",d1c9906168f5b43bb4ed3116d2864624323eb2e1,onQueryCfComplete(android.os.AsyncResult),14094,461,403
376972,test_986-native-method-bind_src_art_Test986.java,5.0,"public static void doTest() throws java.lang.Exception { java.lang.reflect.Method say_hi_method = art.Test986.Transform.class.getDeclaredMethod(""sayHi""); art.Main.bindAgentJNIForClass(art.Test986.Transform.class); art.Test986.Transform.sayHi(); art.Test986.setNativeTransform(say_hi_method, ""NoReallySayGoodbye""); art.Main.bindAgentJNIForClass(art.Test986.Transform.class); art.Test986.Transform.sayHi(); art.Main.bindAgentJNIForClass(art.Main.class); art.Main.bindAgentJNIForClass(art.Test986.class); }",35fdcd543854a1b07958c66323705b3e2037880a,"public static void doTest() throws java.lang.Exception { java.lang.reflect.Method say_hi_method = art.Test986.Transform.class.getDeclaredMethod(""sayHi""); art.Test986.Transform.sayHi2(); art.Test986.setNativeTransform(say_hi_method, ""NoReallySayGoodbye""); art.Test986.Transform.sayHi(); art.Test986.setNativeTransform(say_hi_method, ""Java_art_Test986_00024Transform_sayHi2""); art.Main.bindAgentJNIForClass(art.Test986.Transform.class); art.Test986.Transform.sayHi(); art.Test986.removeNativeTransform(say_hi_method); art.Main.bindAgentJNIForClass(art.Test986.Transform.class); art.Test986.Transform.sayHi(); art.Main.bindAgentJNIForClass(art.Main.class); art.Main.bindAgentJNIForClass(art.Test986.class); }",28cdc2e24bf36cfa1e30a250f0e2bd223601c0c9,doTest(),doTest(),8,4,"public static void doTest() throws java.lang.Exception { java.lang.reflect.Method say_hi_method = art.Test986.Transform.class.getDeclaredMethod(""sayHi""); art.Test986.Transform.sayHi2(); art.Test986.setNativeTransform(say_hi_method, ""NoReallySayGoodbye""); art.Test986.Transform.sayHi(); art.Test986.setNativeTransform(say_hi_method, ""Java_art_Test986_00024Transform_sayHi2""); art.Test986.rebindTransformClass(); art.Test986.Transform.sayHi(); art.Test986.removeNativeTransform(say_hi_method); art.Test986.rebindTransformClass(); art.Test986.Transform.sayHi(); }",dac474abe387ffa8e95f3e25500455031eb086f1,doTest(),426084,229,181
146178,build-system_gradle-core_src_main_groovy_com_android_build_gradle_tasks_GeneratePngsFromVectorDrawablesTask.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override protected void doIncrementalTaskAction(java.util.Map<java.io.File, com.android.ide.common.res2.FileStatus> changedInputs) { try { java.io.File stateFile = getStateFile(); if (!(stateFile.exists())) { doFullTaskAction(); } java.lang.String stateString = com.google.common.io.Files.toString(stateFile, Charsets.UTF_8); java.util.Map<java.lang.String, java.util.Collection<java.lang.String>> state = new com.google.gson.Gson().fromJson(stateString, com.android.build.gradle.tasks.GeneratePngsFromVectorDrawablesTask.TYPE_TOKEN); for (java.util.Map.Entry<java.io.File, com.android.ide.common.res2.FileStatus> entry : changedInputs.entrySet()) { switch (entry.getValue()) { case REMOVED : for (java.lang.String path : state.get(entry.getKey().getAbsolutePath())) { java.io.File file = new java.io.File(path); java.lang.System.out.println((""deleting "" + path)); file.delete(); } break; default : throw new java.lang.RuntimeException((""Unsupported operation "" + (entry.getValue()))); } } } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } }",a455cd1be987eddfa97dbd86d0411da8aefdf3ed,,doIncrementalTaskAction(java.util.Map),3,2,"@java.lang.Override protected void doIncrementalTaskAction(java.util.Map<java.io.File, com.android.ide.common.res2.FileStatus> changedInputs) { try { java.io.File stateFile = getStateFile(); if (!(stateFile.exists())) { doFullTaskAction(); } com.google.common.collect.SetMultimap<java.lang.String, java.lang.String> state = com.android.build.gradle.tasks.PreprocessResourcesTask.readState(stateFile); for (java.util.Map.Entry<java.io.File, com.android.ide.common.res2.FileStatus> entry : changedInputs.entrySet()) { switch (entry.getValue()) { case NEW : case CHANGED : handleFile(entry.getKey(), state); break; case REMOVED : for (java.lang.String path : state.get(entry.getKey().getAbsolutePath())) { java.io.File file = new java.io.File(path); file.delete(); } state.removeAll(entry.getKey()); break; default : throw new java.lang.RuntimeException((""Unsupported operation "" + (entry.getValue()))); } } saveState(state); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e); } }",0531b40e5a497e179608ffee3c018a6e3520d045,doIncrementalTaskAction(java.util.Map),320581,318,289
316830,tests_wifitests_src_com_android_server_wifi_RecommendedNetworkEvaluatorTest.java,10.0,"@org.junit.Test public void testEvaluateNetworks_recommendation_untrustedNetworksAllowed() { when(mWifiConfigManager.wasEphemeralNetworkDeleted(anyString())).thenReturn(false); when(mNetworkScoreManager.requestRecommendation(any(android.net.RecommendationRequest.class))).thenReturn(new android.net.RecommendationResult(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_WIFI_CONFIGURATION)); android.net.wifi.WifiConfiguration result = mRecommendedNetworkEvaluator.evaluateNetworks(com.google.android.collect.Lists.newArrayList(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL, com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL), null, null, false, true, null); assertEquals(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_WIFI_CONFIGURATION, result); verify(mNetworkScoreManager).requestRecommendation(mRecommendationRequestCaptor.capture()); assertEquals(2, mRecommendationRequestCaptor.getValue().getScanResults().length); assertEquals(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL.getScanResult(), mRecommendationRequestCaptor.getValue().getScanResults()[0]); assertEquals(com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL.getScanResult(), mRecommendationRequestCaptor.getValue().getScanResults()[1]); }",3451d6a90808d84ee7546529cad882fb2b097148,"@org.junit.Test public void testEvaluateNetworks_trustedRecommendation_untrustedNetworksAllowed() { when(mWifiConfigManager.wasEphemeralNetworkDeleted(anyString())).thenReturn(false); when(mNetworkScoreManager.requestRecommendation(any(android.net.RecommendationRequest.class))).thenReturn(new android.net.RecommendationResult(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_WIFI_CONFIGURATION)); android.net.wifi.WifiConfiguration result = mRecommendedNetworkEvaluator.evaluateNetworks(com.google.android.collect.Lists.newArrayList(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL, com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL), null, null, false, true, null); assertEquals(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_WIFI_CONFIGURATION, result); verify(mNetworkScoreManager).requestRecommendation(mRecommendationRequestCaptor.capture()); assertEquals(2, mRecommendationRequestCaptor.getValue().getScanResults().length); assertEquals(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL.getScanResult(), mRecommendationRequestCaptor.getValue().getScanResults()[0]); assertEquals(com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL.getScanResult(), mRecommendationRequestCaptor.getValue().getScanResults()[1]); verify(mWifiConfigManager).setNetworkCandidateScanResult(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_WIFI_CONFIGURATION.networkId, com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL.getScanResult(), 0); }",450dcc97924dfa9695edd78377ad270e0375b9e0,testEvaluateNetworks_recommendation_untrustedNetworksAllowed(),testEvaluateNetworks_trustedRecommendation_untrustedNetworksAllowed(),6,12,"@org.junit.Test public void testEvaluateNetworks_trustedRecommendation_untrustedNetworksAllowed() { when(mWifiConfigManager.wasEphemeralNetworkDeleted(anyString())).thenReturn(false); when(mNetworkScoreManager.requestRecommendation(any(android.net.RecommendationRequest.class))).thenReturn(android.net.RecommendationResult.createConnectRecommendation(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_WIFI_CONFIGURATION)); android.net.wifi.WifiConfiguration result = mRecommendedNetworkEvaluator.evaluateNetworks(com.google.android.collect.Lists.newArrayList(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL, com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL), null, null, false, true, null); assertEquals(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_WIFI_CONFIGURATION, result); verify(mNetworkScoreManager).requestRecommendation(mRecommendationRequestCaptor.capture()); assertEquals(2, mRecommendationRequestCaptor.getValue().getScanResults().length); assertEquals(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL.getScanResult(), mRecommendationRequestCaptor.getValue().getScanResults()[0]); assertEquals(com.android.server.wifi.RecommendedNetworkEvaluatorTest.UNTRUSTED_SCAN_DETAIL.getScanResult(), mRecommendationRequestCaptor.getValue().getScanResults()[1]); verify(mWifiConfigManager).setNetworkCandidateScanResult(com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_WIFI_CONFIGURATION.networkId, com.android.server.wifi.RecommendedNetworkEvaluatorTest.TRUSTED_SCAN_DETAIL.getScanResult(), 0); }",1424c7ed9ba3b4c322432e2c4d7adb4b174d5f23,testEvaluateNetworks_trustedRecommendation_untrustedNetworksAllowed(),434457,368,371
534821,tests_unit_src_com_android_bluetooth_hfp_HeadsetStateMachineTest.java,,,,"@org.junit.Test public void testStateTransition_AudioConnectingToConnected_Timeout() { setUpAudioConnectingState(); verify(mHeadsetStateMachine, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.CONNECT_TIMEOUT_TEST_WAIT_MILLIS)).transitionTo(any(HeadsetStateMachine.Connected.class)); verify(mHeadsetService).sendBroadcastAsUser(com.android.bluetooth.hfp.HeadsetStateMachineTest.getAudioStateBroadcastMatcher(mTestDevice, BluetoothHeadset.STATE_AUDIO_DISCONNECTED, BluetoothHeadset.STATE_AUDIO_CONNECTING), UserHandle.ALL, HeadsetService.BLUETOOTH_PERM); }",487678be83af5dbb6f877b03d7a3ab94e4251699,,testStateTransition_AudioConnectingToConnected_Timeout(),28,31,"@org.junit.Test public void testStateTransition_AudioConnectingToConnected_Timeout() { int numBroadcastsSent = setUpAudioConnectingState(); numBroadcastsSent++; verify(mHeadsetService, timeout(com.android.bluetooth.hfp.HeadsetStateMachineTest.CONNECT_TIMEOUT_TEST_WAIT_MILLIS).times(numBroadcastsSent)).sendBroadcastAsUser(mIntentArgument.capture(), eq(UserHandle.ALL), eq(HeadsetService.BLUETOOTH_PERM)); com.android.bluetooth.hfp.HeadsetStateMachineTest.verifyAudioStateBroadcast(mTestDevice, BluetoothHeadset.STATE_AUDIO_DISCONNECTED, BluetoothHeadset.STATE_AUDIO_CONNECTING, mIntentArgument.getValue()); org.junit.Assert.assertThat(mHeadsetStateMachine.getCurrentState(), org.hamcrest.core.IsInstanceOf.instanceOf(HeadsetStateMachine.Connected.class)); }",513e3c80a8d5348808ef35607018d93b712e38c3,testStateTransition_AudioConnectingToConnected_Timeout(),71059,148,195
257550,ojluni_src_main_java_java_lang_reflect_Proxy.java,13.0,"@sun.reflect.CallerSensitive public static java.lang.Object newProxyInstance(java.lang.ClassLoader loader, java.lang.Class<?>[] interfaces, java.lang.reflect.InvocationHandler h) throws java.lang.IllegalArgumentException { if (h == null) { throw new java.lang.NullPointerException(); } java.lang.Class<?> cl = java.lang.reflect.Proxy.getProxyClass0(loader, interfaces); try { final java.lang.reflect.Constructor<?> cons = cl.getConstructor(java.lang.reflect.Proxy.constructorParams); return java.lang.reflect.Proxy.newInstance(cons, h); } catch (java.lang.NoSuchMethodException e) { throw new java.lang.InternalError(e.toString()); } }",53196bf454d76c5a6659ca637955e99d2f3112bb,"@sun.reflect.CallerSensitive public static java.lang.Object newProxyInstance(java.lang.ClassLoader loader, java.lang.Class<?>[] interfaces, java.lang.reflect.InvocationHandler h) throws java.lang.IllegalArgumentException { java.util.Objects.requireNonNull(h); final java.lang.Class<?>[] intfs = interfaces.clone(); final java.lang.SecurityManager sm = java.lang.System.getSecurityManager(); java.lang.Class<?> cl = java.lang.reflect.Proxy.getProxyClass0(loader, intfs); try { final java.lang.reflect.Constructor<?> cons = cl.getConstructor(java.lang.reflect.Proxy.constructorParams); final java.lang.reflect.InvocationHandler ih = h; if (!(java.lang.reflect.Modifier.isPublic(cl.getModifiers()))) { java.security.AccessController.doPrivileged(new java.security.PrivilegedAction<java.lang.Void>() { public java.lang.Void run() { cons.setAccessible(true); return null; } }); } return cons.newInstance(new java.lang.Object[]{ h }); } catch (java.lang.IllegalAccessException | java.lang.InstantiationException e) { throw new java.lang.InternalError(e.toString(), e); } catch (java.lang.reflect.InvocationTargetException e) { java.lang.Throwable t = e.getCause(); if (t instanceof java.lang.RuntimeException) { throw ((java.lang.RuntimeException) (t)); } else { throw new java.lang.InternalError(t.toString(), t); } } catch (java.lang.NoSuchMethodException e) { throw new java.lang.InternalError(e.toString(), e); } }",bae6ef746800b9430608535f56a2a92a48b45204,"newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)","newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)",4,19,"@sun.reflect.CallerSensitive public static java.lang.Object newProxyInstance(java.lang.ClassLoader loader, java.lang.Class<?>[] interfaces, java.lang.reflect.InvocationHandler h) throws java.lang.IllegalArgumentException { java.util.Objects.requireNonNull(h); final java.lang.Class<?>[] intfs = interfaces.clone(); java.lang.Class<?> cl = java.lang.reflect.Proxy.getProxyClass0(loader, intfs); try { final java.lang.reflect.Constructor<?> cons = cl.getConstructor(java.lang.reflect.Proxy.constructorParams); final java.lang.reflect.InvocationHandler ih = h; if (!(java.lang.reflect.Modifier.isPublic(cl.getModifiers()))) { cons.setAccessible(true); } return cons.newInstance(new java.lang.Object[]{ h }); } catch (java.lang.IllegalAccessException | java.lang.InstantiationException e) { throw new java.lang.InternalError(e.toString(), e); } catch (java.lang.reflect.InvocationTargetException e) { java.lang.Throwable t = e.getCause(); if (t instanceof java.lang.RuntimeException) { throw ((java.lang.RuntimeException) (t)); } else { throw new java.lang.InternalError(t.toString(), t); } } catch (java.lang.NoSuchMethodException e) { throw new java.lang.InternalError(e.toString(), e); } }",f33c53d8bfe18646db363aba0ae76c07de03e991,"newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)",446302,361,308
20840,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_build_nonjava_JavaGenerator.java,,,,java.util.Collection<com.android.ide.eclipse.adt.internal.build.nonjava.NonJavaFileBundle> getBundles() { return mFiles.values(); },d0f3713f64034eee0da3ef8b88058ca1723788f4,,getBundles(),4,13,java.util.Collection<com.android.ide.eclipse.adt.internal.build.NonJavaFileBundle> getBundles() { return mFiles.values(); },7172a13fc1d9241182cf40d35c89fc505c2bca56,getBundles(),479527,41,38
347050,tests_wifitests_src_com_android_server_wifi_scanner_BaseWifiScannerImplTest.java,18.0,"@org.junit.Test public void singleScanFailOnTimeout() { com.android.server.wifi.WifiNative.ScanSettings settings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder().withBasePeriod(10000).withMaxApPerScan(10).addBucketWithBand(10000, WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN, WifiScanner.WIFI_BAND_24_GHZ).build(); com.android.server.wifi.WifiNative.ScanEventHandler eventHandler = mock(WifiNative.ScanEventHandler.class); com.android.server.wifi.ScanResults results = com.android.server.wifi.ScanResults.create(0, 2400, 2450, 2450); org.mockito.InOrder order = inOrder(eventHandler, mWifiNative); when(mWifiNative.scan(any(java.util.Set.class), any(java.util.Set.class))).thenReturn(true); assertTrue(mScanner.startSingleScan(settings, eventHandler)); mLooper.dispatchAll(); mAlarmManager.dispatch(SupplicantWifiScannerImpl.TIMEOUT_ALARM_TAG); mLooper.dispatchAll(); order.verify(eventHandler).onScanStatus(WifiNative.WIFI_SCAN_FAILED); verifyNoMoreInteractions(eventHandler); }",742b2011445fa2c117c2ea7fe3528802cd3ad12e,"@org.junit.Test public void singleScanFailOnTimeout() { com.android.server.wifi.WifiNative.ScanSettings settings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder().withBasePeriod(10000).withMaxApPerScan(10).addBucketWithBand(10000, WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN, WifiScanner.WIFI_BAND_24_GHZ).build(); com.android.server.wifi.WifiNative.ScanEventHandler eventHandler = mock(WifiNative.ScanEventHandler.class); com.android.server.wifi.ScanResults results = com.android.server.wifi.ScanResults.create(0, 2400, 2450, 2450); org.mockito.InOrder order = inOrder(eventHandler, mWifiNative); when(mWifiNative.scan(any(java.util.Set.class), any(java.util.Set.class))).thenReturn(true); assertTrue(mScanner.startSingleScan(settings, eventHandler)); mLooper.dispatchAll(); mAlarmManager.dispatch(WificondWifiScannerImpl.TIMEOUT_ALARM_TAG); mLooper.dispatchAll(); order.verify(eventHandler).onScanStatus(WifiNative.WIFI_SCAN_FAILED); verifyNoMoreInteractions(eventHandler); }",ce3fcca1520456636b0e1bf269a10b7de1308a2c,singleScanFailOnTimeout(),singleScanFailOnTimeout(),12,18,"@org.junit.Test public void singleScanFailOnTimeout() { com.android.server.wifi.WifiNative.ScanSettings settings = new com.android.server.wifi.ScanTestUtil.NativeScanSettingsBuilder().withBasePeriod(10000).withMaxApPerScan(10).addBucketWithBand(10000, WifiScanner.REPORT_EVENT_AFTER_EACH_SCAN, WifiScanner.WIFI_BAND_24_GHZ).build(); com.android.server.wifi.WifiNative.ScanEventHandler eventHandler = mock(WifiNative.ScanEventHandler.class); com.android.server.wifi.ScanResults results = com.android.server.wifi.ScanResults.create(0, 2400, 2450, 2450); org.mockito.InOrder order = inOrder(eventHandler, mWifiNative); when(mWifiNative.scan(any(java.util.Set.class), any(java.util.Set.class))).thenReturn(true); assertTrue(mScanner.startSingleScan(settings, eventHandler)); mLooper.dispatchAll(); mAlarmManager.dispatch(WificondScannerImpl.TIMEOUT_ALARM_TAG); mLooper.dispatchAll(); order.verify(eventHandler).onScanStatus(WifiNative.WIFI_SCAN_FAILED); verifyNoMoreInteractions(eventHandler); }",10003d6509bafd12fa36f35dc1f52342f5b9f2cc,singleScanFailOnTimeout(),82543,281,280
123159,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_truth_CollectionIssueSubject.java,,,,"@java.lang.SuppressWarnings(""NonBooleanMethodNameMayNotStartWithQuestion"") public void has(int severity, int type, java.lang.String data) { java.util.Collection<com.android.builder.model.SyncIssue> subject = getSubject(); for (com.android.builder.model.SyncIssue issue : subject) { if (((severity == (issue.getSeverity())) && (type == (issue.getType()))) && (data.equals(issue.getData()))) { return; } } failWithRawMessage(""'%s' does not contain <%s / %s / %s>"", getDisplaySubject(), severity, type, data); }",7cd586c8f36581a25071daa03c597f14ac7a74c5,,"has(int,int,java.lang.String)",4,3,"@java.lang.SuppressWarnings(""NonBooleanMethodNameMayNotStartWithQuestion"") public com.android.builder.model.SyncIssue has(int severity, int type, java.lang.String data) { java.util.Collection<com.android.builder.model.SyncIssue> subject = getSubject(); for (com.android.builder.model.SyncIssue issue : subject) { if (((severity == (issue.getSeverity())) && (type == (issue.getType()))) && (data.equals(issue.getData()))) { return issue; } } failWithRawMessage(""'%s' does not contain <%s / %s / %s>"", getDisplaySubject(), severity, type, data); return null; }",c7a4bd35abd9fb390b719f82c59517d59501ac79,"has(int,int,java.lang.String)",16519,143,156
537552,tests_net_java_com_android_server_IpSecServiceRefcountedResourceTest.java,,,,"@org.junit.Test public void fuzzTest() throws android.os.RemoteException { java.util.List<com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource>> resources = new java.util.ArrayList<>(); for (int i = 0; i < 100; i++) { int numDependencies = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, ((resources.size()) + 1)); java.util.Set<com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource>> dependencies = new java.util.HashSet<>(); for (int j = 0; j < numDependencies; j++) { int dependencyIndex = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, resources.size()); dependencies.add(resources.get(dependencyIndex)); } com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> newRefcountedResource = getTestRefcountedResource(dependencies.toArray(new com.android.server.IpSecService.RefcountedResource[dependencies.size()])); resources.add(newRefcountedResource); } java.util.List<com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource>> clonedResources = new java.util.ArrayList(resources); while (!(clonedResources.isEmpty())) { int index = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, clonedResources.size()); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = clonedResources.get(index); refcountedResource.cleanupAndRelease(); clonedResources.remove(index); } for (com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource : resources) { assertEquals((-1), refcountedResource.getReferenceCount()); } }",d6cfdea4d33eab4129312d2092311bb72976257d,,fuzzTest(),9,16,"@org.junit.Test public void fuzzTest() throws android.os.RemoteException { java.util.List<com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource>> resources = new java.util.ArrayList<>(); for (int i = 0; i < 100; i++) { int numChildren = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, ((resources.size()) + 1)); java.util.Set<com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource>> children = new java.util.HashSet<>(); for (int j = 0; j < numChildren; j++) { int childIndex = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, resources.size()); children.add(resources.get(childIndex)); } com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> newRefcountedResource = getTestRefcountedResource(children.toArray(new com.android.server.IpSecService.RefcountedResource[children.size()])); resources.add(newRefcountedResource); } java.util.List<com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource>> clonedResources = new java.util.ArrayList(resources); while (!(clonedResources.isEmpty())) { int index = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, clonedResources.size()); com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource = clonedResources.get(index); refcountedResource.userRelease(); clonedResources.remove(index); } for (com.android.server.IpSecService.RefcountedResource<com.android.server.IpSecService.IResource> refcountedResource : resources) { assertEquals((-1), refcountedResource.mRefCount); } }",3bb98c41d1b2fa3e49a5a25975f7b250f9728c42,fuzzTest(),78043,452,452
143589,luni_src_test_java_libcore_java_util_zip_Zip64FileTest.java,,,,"private java.io.File createZip32File(int numEntries, long entrySize, boolean setEntrySize) throws java.io.IOException { java.io.File file = createTemporaryZipFile(); java.util.zip.ZipOutputStream os = new java.util.zip.ZipOutputStream(new java.io.BufferedOutputStream(new java.io.FileOutputStream(file))); writeEntries(os, numEntries, entrySize, setEntrySize); return file; }",29377207ce112d3fb95f9bcd562b5a91d8e1ad44,,"createZip32File(int,long,boolean)",3,2,"private java.io.File createZipFile(int numEntries, long entrySize, boolean setEntrySize) throws java.io.IOException { java.io.File file = createTemporaryZipFile(); java.util.zip.ZipOutputStream os = new java.util.zip.ZipOutputStream(new java.io.BufferedOutputStream(new java.io.FileOutputStream(file))); writeEntries(os, numEntries, entrySize, setEntrySize); return file; }",7cb2bf1b8429f751d0f374f71c2d4c6337e2196b,"createZipFile(int,long,boolean)",496925,100,98
203176,src_com_android_bluetooth_gatt_ContextMap.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,void dumpProto(com.android.bluetooth.btservice.BluetoothProto.BluetoothLog proto) { proto.getScanEventList().addAll(mScanEvents); },b27d1740f3b79459487075cbbc99b5ef2aae85a8,,dumpProto(com.android.bluetooth.btservice.BluetoothProto$BluetoothLog),7,12,void dumpProto(com.android.bluetooth.btservice.BluetoothProto.BluetoothLog proto) { synchronized(mScanEvents) { for (com.android.bluetooth.btservice.BluetoothProto.ScanEvent event : mScanEvents) { proto.addScanEvent(event); } } },315690652ef4f98c4e0f2e8218f5bb1f56eced67,dumpProto(com.android.bluetooth.btservice.BluetoothProto$BluetoothLog),175260,35,63
69360,luni_src_test_java_libcore_javax_net_ssl_SSLServerSocketFactoryTest.java,0.0,public void testDefaultConfiguration() { javax.net.ssl.SSLServerSocketFactory socketFactory = ((javax.net.ssl.SSLServerSocketFactory) (javax.net.ssl.SSLServerSocketFactory.getDefault())); libcore.java.security.StandardNames.assertDefaultCipherSuites(socketFactory.getDefaultCipherSuites()); libcore.java.security.StandardNames.assertSupportedCipherSuites(socketFactory.getSupportedCipherSuites()); },5964928dfc97ad5e636f7fbda0a9ea789c2b5452,public void testDefaultConfiguration() { libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertSSLServerSocketFactory(((javax.net.ssl.SSLServerSocketFactory) (javax.net.ssl.SSLServerSocketFactory.getDefault()))); },eae8d2a7f972bc8a0ba1e80aab52baeb3fa827bf,testDefaultConfiguration(),testDefaultConfiguration(),3,0,public void testDefaultConfiguration() throws java.lang.Exception { libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertSSLServerSocketFactory(((javax.net.ssl.SSLServerSocketFactory) (javax.net.ssl.SSLServerSocketFactory.getDefault()))); },4f0e69045bf10e572dc0d93d4932375b429a0a42,testDefaultConfiguration(),337849,48,54
638866,harnesses_tradefed_tests_src_com_android_tradefed_util_VtsPythonRunnerHelperTest.java,,,,"public void testProcessRunSuccess() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.SUCCESS); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(mPythonCmd, commandResult, mTestTimeout); assertEquals(interruptMessage, null); assertEquals(commandResult.getStatus(), CommandStatus.SUCCESS); }",b4834f7b5c3f080f2b339175b19a52a1cd95469f,,testProcessRunSuccess(),7,14,"@org.junit.Test public void testProcessRunSuccess() { com.android.tradefed.util.CommandResult commandResult = new com.android.tradefed.util.CommandResult(); mProcessHelper = com.android.tradefed.util.VtsPythonRunnerHelperTest.createMockProcessHelper(CommandStatus.SUCCESS); java.lang.String interruptMessage = mVtsPythonRunnerHelper.runPythonRunner(com.android.tradefed.util.VtsPythonRunnerHelperTest.mPythonCmd, commandResult, com.android.tradefed.util.VtsPythonRunnerHelperTest.mTestTimeout); assertEquals(interruptMessage, null); assertEquals(commandResult.getStatus(), CommandStatus.SUCCESS); }",357ff557710901dd4c00ba51c823657a7a0118ba,testProcessRunSuccess(),88333,120,162
515836,src_com_android_stk_StkMenuActivity.java,19.0,"@java.lang.Override protected void onRestoreInstanceState(android.os.Bundle savedInstanceState) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (""onRestoreInstanceState: "" + (mSlotId))); mState = savedInstanceState.getInt(""STATE""); mStkMenu = savedInstanceState.getParcelable(""MENU""); mAcceptUsersInput = savedInstanceState.getBoolean(""ACCEPT_USERS_INPUT""); }",03d70651038f2d4e1a616824e903db0cf8bcb6b4,"@java.lang.Override protected void onRestoreInstanceState(android.os.Bundle savedInstanceState) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (""onRestoreInstanceState: "" + (mSlotId))); mState = savedInstanceState.getInt(com.android.stk.StkMenuActivity.STATE_KEY); mStkMenu = savedInstanceState.getParcelable(com.android.stk.StkMenuActivity.MENU_KEY); mAcceptUsersInput = savedInstanceState.getBoolean(com.android.stk.StkMenuActivity.ACCEPT_USERS_INPUT_KEY); mIsResponseSent = savedInstanceState.getBoolean(com.android.stk.StkMenuActivity.RESPONSE_SENT_KEY); }",289ae56c7e9e668b65f0b92f1a564a374b892fed,onRestoreInstanceState(android.os.Bundle),onRestoreInstanceState(android.os.Bundle),4,8,"@java.lang.Override protected void onRestoreInstanceState(android.os.Bundle savedInstanceState) { com.android.internal.telephony.cat.CatLog.d(com.android.stk.StkMenuActivity.LOG_TAG, (""onRestoreInstanceState: "" + (mSlotId))); mState = savedInstanceState.getInt(com.android.stk.StkMenuActivity.STATE_KEY); mStkMenu = savedInstanceState.getParcelable(com.android.stk.StkMenuActivity.MENU_KEY); mAcceptUsersInput = savedInstanceState.getBoolean(com.android.stk.StkMenuActivity.ACCEPT_USERS_INPUT_KEY); if (!(mAcceptUsersInput)) { if (((mState) == (com.android.stk.StkMenuActivity.STATE_MAIN)) && (appService.isMainMenuAvailable(mSlotId))) { mAcceptUsersInput = true; } else { showProgressBar(true); } } mIsResponseSent = savedInstanceState.getBoolean(com.android.stk.StkMenuActivity.RESPONSE_SENT_KEY); }",ba991acac628cdb095efadbff4df2b726f095394,onRestoreInstanceState(android.os.Bundle),361202,174,236
579565,src_java_com_android_internal_telephony_RIL.java,203.0,"@java.lang.Override public void getIMSIForApp(java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_IMSI, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" aid = "") + aid)); } try { radioProxy.getImsiForApp(rr.mSerial, convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getIMSIForApp"", e); } } }",aad0ce9743b38f464100deade2c576c5e556fd62,"@java.lang.Override public void getIMSIForApp(java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RILConstants.RIL_REQUEST_GET_IMSI, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" aid = "") + aid)); } try { radioProxy.getImsiForApp(rr.mSerial, convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getIMSIForApp"", e); } } }",abc193915a1eef71b0c7df7f487e5cc52c1123c1,"getIMSIForApp(java.lang.String,android.os.Message)","getIMSIForApp(java.lang.String,android.os.Message)",3,203,"@java.lang.Override public void getIMSIForApp(java.lang.String aid, android.os.Message result) { android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(result); if (radioProxy != null) { com.android.internal.telephony.RILRequest rr = obtainRequest(com.android.internal.telephony.RIL_REQUEST_GET_IMSI, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) { riljLog((((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest))) + "" aid = "") + aid)); } try { radioProxy.getImsiForApp(rr.mSerial, convertNullToEmptyString(aid)); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(rr, ""getIMSIForApp"", e); } } }",aad0ce9743b38f464100deade2c576c5e556fd62,"getIMSIForApp(java.lang.String,android.os.Message)",89178,241,237
306992,jack_src_com_android_jack_ir_ast_JMethodCall.java,2.0,"@java.lang.Override public boolean isCallToPolymorphicMethod() { return isCallToPolymorphicMethod(getReceiverType(), getMethodId(), getType()); }",ec2174c6b5c6920a6f2698503cdad55c75c4370c,"@java.lang.Override public boolean isCallToPolymorphicMethod() { return isCallToPolymorphicMethod(getReceiverType(), getMethodIdWide(), getType()); }",376814705cc8b5c43a6b51320acd033288a0e05b,isCallToPolymorphicMethod(),isCallToPolymorphicMethod(),4,2,"@java.lang.Override public boolean isCallToPolymorphicMethod() { return isCallToPolymorphicMethod(getReceiverType(), getMethodId()); }",808e2bc332de511191c847c97100dd80c1ee8b63,isCallToPolymorphicMethod(),245467,37,33
548206,src_com_android_bluetooth_hfp_HeadsetService.java,66.0,"private boolean bindResponse(int indId, boolean indStatus) { for (android.bluetooth.BluetoothDevice device : getConnectedDevices()) { int connectionState = mStateMachine.getConnectionState(device); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { continue; } if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(""Bind Response sent for"", device.getAddress()); } android.os.Message msg = mStateMachine.obtainMessage(HeadsetStateMachine.BIND_RESPONSE); msg.obj = device; msg.arg1 = indId; msg.arg2 = (indStatus) ? 1 : 0; mStateMachine.sendMessage(msg); return true; } return false; }",0cae295f53def35f14b4d0ac3cf20108815a4fa4,"private boolean bindResponse(int indId, boolean indStatus) { synchronized(mStateMachines) { for (com.android.bluetooth.hfp.HeadsetStateMachine stateMachine : mStateMachines.values()) { int connectionState = stateMachine.getConnectionState(); if ((connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTED)) && (connectionState != (android.bluetooth.BluetoothProfile.STATE_CONNECTING))) { continue; } if (com.android.bluetooth.hfp.HeadsetService.DBG) { android.util.Log.d(com.android.bluetooth.hfp.HeadsetService.TAG, (""bindResponse for"" + (stateMachine.getDevice()))); } stateMachine.sendMessage(HeadsetStateMachine.BIND_RESPONSE, indId, (indStatus ? 1 : 0)); return true; } } return false; }",abd8fa08691a326e04e51897fe50527dc3a4a420,"bindResponse(int,boolean)","bindResponse(int,boolean)",34,27,"@com.android.internal.annotations.VisibleForTesting public void onAudioStateChangedFromStateMachine(android.bluetooth.BluetoothDevice device, int fromState, int toState) { synchronized(mStateMachines) { if ((fromState != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED)) && (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_CONNECTED))) { } if ((fromState != (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED)) && (toState == (android.bluetooth.BluetoothHeadset.STATE_AUDIO_DISCONNECTED))) { if (((mActiveDevice) != null) && (!(mActiveDevice.equals(device)))) { if (!(connectAudio(mActiveDevice))) { android.util.Log.w(com.android.bluetooth.hfp.HeadsetService.TAG, (((((""onAudioStateChangedFromStateMachine, failed to connect to new "" + ""active device "") + (mActiveDevice)) + "", after "") + device) + "" is disconnected"")); setActiveDevice(null); } } } } }",e1a0c95f00542bef0bc0c6462c7ef78689947104,"onAudioStateChangedFromStateMachine(android.bluetooth.BluetoothDevice,int,int)",210683,188,234
252478,java_tests_RsTest_src_com_android_rs_test_UT_alloc.java,0.0,"private void initializeGlobals(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_alloc s) { com.android.rs.test.Type.Builder typeBuilder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.I32(RS)); int X = 5; int Y = 7; int Z = 0; s.set_dimX(X); s.set_dimY(Y); s.set_dimZ(Z); typeBuilder.setX(X); com.android.rs.test.Allocation A = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.bind_a(A); s.set_aRaw(A); typeBuilder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.I32(RS)); typeBuilder.setX(X).setY(Y).setFaces(true); com.android.rs.test.Allocation AFaces = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.set_aFaces(AFaces); typeBuilder.setFaces(false).setMipmaps(true); com.android.rs.test.Allocation ALOD = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.set_aLOD(ALOD); typeBuilder.setFaces(true).setMipmaps(true); com.android.rs.test.Allocation AFacesLOD = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.set_aFacesLOD(AFacesLOD); return; }",89bfadfbebffe5fbf704af47e3740d8c7c05697c,"private void initializeGlobals(android.renderscript.RenderScript RS, com.android.rs.test.ScriptC_alloc s) { android.renderscript.Type.Builder typeBuilder = new android.renderscript.Type.Builder(RS, android.renderscript.Element.I32(RS)); int X = 5; int Y = 7; int Z = 0; s.set_dimX(X); s.set_dimY(Y); s.set_dimZ(Z); typeBuilder.setX(X); android.renderscript.Allocation A = android.renderscript.Allocation.createTyped(RS, typeBuilder.create()); s.bind_a(A); s.set_aRaw(A); typeBuilder = new android.renderscript.Type.Builder(RS, android.renderscript.Element.I32(RS)); typeBuilder.setX(X).setY(Y).setFaces(true); android.renderscript.Allocation AFaces = android.renderscript.Allocation.createTyped(RS, typeBuilder.create()); s.set_aFaces(AFaces); typeBuilder.setFaces(false).setMipmaps(true); android.renderscript.Allocation ALOD = android.renderscript.Allocation.createTyped(RS, typeBuilder.create()); s.set_aLOD(ALOD); typeBuilder.setFaces(true).setMipmaps(true); android.renderscript.Allocation AFacesLOD = android.renderscript.Allocation.createTyped(RS, typeBuilder.create()); s.set_aFacesLOD(AFacesLOD); return; }",5ba85ae659a938ce288485ad524ce9ac4127237c,"initializeGlobals(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_alloc)","initializeGlobals(android.renderscript.RenderScript,com.android.rs.test.ScriptC_alloc)",7,0,"private void initializeGlobals(com.android.rs.test.RenderScript RS, com.android.rs.test.ScriptC_alloc s) { com.android.rs.test.Type.Builder typeBuilder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.I32(RS)); int X = 5; int Y = 7; int Z = 0; s.set_dimX(X); s.set_dimY(Y); s.set_dimZ(Z); typeBuilder.setX(X); com.android.rs.test.Allocation A = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.bind_a(A); s.set_aRaw(A); typeBuilder = new com.android.rs.test.Type.Builder(RS, com.android.rs.test.Element.I32(RS)); typeBuilder.setX(X).setY(Y).setFaces(true); com.android.rs.test.Allocation AFaces = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.set_aFaces(AFaces); typeBuilder.setFaces(false).setMipmaps(true); com.android.rs.test.Allocation ALOD = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.set_aLOD(ALOD); typeBuilder.setFaces(true).setMipmaps(true); com.android.rs.test.Allocation AFacesLOD = com.android.rs.test.Allocation.createTyped(RS, typeBuilder.create()); s.set_aFacesLOD(AFacesLOD); return; }",89bfadfbebffe5fbf704af47e3740d8c7c05697c,"initializeGlobals(com.android.rs.test.RenderScript,com.android.rs.test.ScriptC_alloc)",379335,357,399
118993,jack-tests_tests_com_android_jack_multidex_MultiDexTests.java,10.0,"@org.junit.Test public void versionedTest001a_withoutAnnotations() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder(""multidex/test001""); java.io.File out = com.android.jack.TestTools.createTempDir(""out"", """"); com.android.jack.Options app1Options = addCommonOptionsForMultiDex(new java.io.File(testFolder, ""config-001.jpp"")); app1Options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), ""multidex""); com.android.jack.TestTools.compileSourceToDex(app1Options, testFolder, (((com.android.jack.TestTools.getDefaultBootclasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())), out, false); java.io.File outList = getListingOfDex(new java.io.File(out, ""classes.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-001.txt""), outList); junit.framework.Assert.assertFalse(new java.io.File(out, ""classes2.dex"").exists()); return; }",07ccfd68621ac5c55e7b0028611e2f26feab8fc4,"@org.junit.Test public void versionedTest001a_withoutAnnotations() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder(""multidex/test001""); java.io.File out = com.android.jack.TestTools.createTempDir(""out"", """"); com.android.jack.Options app1Options = addCommonOptionsForMultiDex(new java.io.File(testFolder, ""config-001.jpp"")); app1Options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), ""multidex""); com.android.jack.TestTools.compileSourceToDex(app1Options, testFolder, (((com.android.jack.TestTools.getDefaultBootclasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())), out, false); java.lang.String outList = getListingOfDex(new java.io.File(out, ""classes.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-001.txt""), outList); junit.framework.Assert.assertFalse(new java.io.File(out, ""classes2.dex"").exists()); return; }",83df9f6dc0eca979fffc812e6a455bfd9f3b2afb,versionedTest001a_withoutAnnotations(),versionedTest001a_withoutAnnotations(),4,10,"@org.junit.Test public void versionedTest001a_withoutAnnotations() throws java.lang.Exception { java.io.File testFolder = com.android.jack.TestTools.getJackTestsWithJackFolder(""multidex/test001""); java.io.File out = com.android.jack.TestTools.createTempDir(""out"", """"); com.android.jack.Options app1Options = addCommonOptionsForMultiDex(new java.io.File(testFolder, ""config-001.jpp"")); app1Options.addProperty(DexFileWriter.DEX_WRITING_POLICY.getName(), ""multidex""); com.android.jack.TestTools.compileSourceToDex(app1Options, testFolder, (((com.android.jack.TestTools.getDefaultClasspathString()) + (java.io.File.pathSeparator)) + (com.android.jack.multidex.MultiDexTests.frameworks.getPath())), out, false); java.lang.String outList = getListingOfDex(new java.io.File(out, ""classes.dex"")); com.android.jack.shrob.ListingComparator.compare(new java.io.File(testFolder, ""ref-list-001.txt""), outList); junit.framework.Assert.assertFalse(new java.io.File(out, ""classes2.dex"").exists()); return; }",2796214ab9dacd0ffcc29c16025364444d544e7e,versionedTest001a_withoutAnnotations(),300021,293,292
44490,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_ui_DeviceManagerPage.java,,,,@java.lang.Override public void handleEvent(org.eclipse.swt.widgets.Event event) { if ((event.item) != null) { java.lang.Object info = event.item.getData(); if (info instanceof com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.CellInfo) { com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.CellInfo ci = ((com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.CellInfo) (info)); org.eclipse.swt.graphics.Rectangle bounds = ci.mBounds; if (bounds == null) { ci.mBounds = bounds = ci.mWidget.getBounds(); } event.width = (bounds.width) + 2; event.height = (bounds.height) + 2; } } },2bd3a80727ea9e83f4c20e89c5b6414d549a8b7e,,handleEvent(org.eclipse.swt.widgets.Event),5,22,@java.lang.Override public void handleEvent(org.eclipse.swt.widgets.Event event) { if ((event.item) != null) { java.lang.Object info = event.item.getData(); if (info instanceof com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.CellInfo) { com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.CellInfo ci = ((com.android.sdkuilib.internal.repository.ui.DeviceManagerPage.CellInfo) (info)); org.eclipse.swt.graphics.Rectangle bounds = ci.mBounds; if (bounds == null) { ci.mBounds = bounds = ci.mWidget.getBounds(); } event.width = (bounds.width) + 2; event.height = (bounds.height) + 4; } } },1cb9d0ed957b3726c197689b03b30a196520b846,handleEvent(org.eclipse.swt.widgets.Event),481179,183,183
202178,src_com_android_bluetooth_hfp_HeadsetStateMachine.java,46.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void processAtBiev(int ind_id, int ind_value, android.bluetooth.BluetoothDevice device) { if (com.android.bluetooth.hfp.HeadsetStateMachine.DBG) { log(((("" Process AT + BIEV Command : "" + ind_id) + "", "") + ind_value)); } java.lang.String ind_value_str = java.lang.Integer.toString(ind_value); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHeadset.ACTION_HF_INDICATORS_VALUE_CHANGED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); sendIndicatorIntent(device, ind_id, ind_value_str); }",e9f39adf358a1a0c776b76dea2f1f829deac3a47,,"processAtBiev(int,int,android.bluetooth.BluetoothDevice)",4,95,"private void processAtBiev(int ind_id, int ind_value, android.bluetooth.BluetoothDevice device) { log(((("" Process AT + BIEV Command : "" + ind_id) + "", "") + ind_value)); java.lang.String ind_value_str = java.lang.Integer.toString(ind_value); android.content.Intent intent = new android.content.Intent(android.bluetooth.BluetoothHeadset.ACTION_HF_INDICATORS_VALUE_CHANGED); intent.putExtra(BluetoothDevice.EXTRA_DEVICE, device); sendIndicatorIntent(device, ind_id, ind_value_str); }",0192bba68aabdd26eb6780d687e5d12532306571,"processAtBiev(int,int,android.bluetooth.BluetoothDevice)",23004,169,149
141531,hostsidetests_security_src_android_cts_security_SELinuxHostTest.java,37.0,"public void testServiceContexts() throws java.lang.Exception { java.lang.ProcessBuilder pb = new java.lang.ProcessBuilder(checkFc.getAbsolutePath(), ""-p"", devicePolicyFile.getAbsolutePath(), devicePcFile.getAbsolutePath()); pb.redirectOutput(java.lang.ProcessBuilder.Redirect.PIPE); pb.redirectErrorStream(true); java.lang.Process p = pb.start(); p.waitFor(); java.io.BufferedReader result = new java.io.BufferedReader(new java.io.InputStreamReader(p.getInputStream())); java.lang.String line; java.lang.StringBuilder errorString = new java.lang.StringBuilder(); while ((line = result.readLine()) != null) { errorString.append(line); errorString.append(""\n""); } assertTrue((""The service_contexts file was invalid:\n"" + errorString), ((errorString.length()) == 0)); }",bbc4fdf525daeaca1b91a8809a0749deb6baaa15,"public void testAOSPServiceContexts() throws java.lang.Exception { java.io.BufferedReader AOSPFile = new java.io.BufferedReader(new java.io.FileReader(AOSPSvcFile.getAbsolutePath())); java.io.BufferedReader deviceFile = new java.io.BufferedReader(new java.io.FileReader(deviceSvcFile.getAbsolutePath())); java.lang.String line1; java.lang.String line2; while ((line1 = AOSPFile.readLine()) != null) { line2 = deviceFile.readLine(); assertTrue(((((((""service_contexts does not include AOSP entries:\n"" + ""AOSP had:"") + line1) + ""\n"") + ""Device had:"") + line2) + ""\n""), line1.equals(line2)); } }",c50a80b1092857c0bbb074f73385eae43da2f950,testServiceContexts(),testAOSPServiceContexts(),2,28,"public void testAospServiceContexts() throws java.lang.Exception { assertFileStartsWith(aospSvcFile, deviceSvcFile); }",fd6c483619d2a7ef8d6faa75952602ab7a20f795,testAospServiceContexts(),225479,167,32
147875,luni_src_test_java_libcore_java_io_RandomAccessFileTest.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testCloseRafAndGetNewChannel_channelIsOpen() throws java.lang.Exception { java.io.RandomAccessFile raf = new java.io.RandomAccessFile(file, ""rw""); java.nio.channels.FileChannel fileChannelBeforeClosing = raf.getChannel(); raf.close(); assertFalse(fileChannelBeforeClosing.isOpen()); assertTrue(raf.getChannel().isOpen()); }",e98b76d22530512596dfd3212569a70e9d7c7e73,,testCloseRafAndGetNewChannel_channelIsOpen(),4,5,"public void testCloseRaf_channelIsClosed() throws java.lang.Exception { java.io.RandomAccessFile raf = new java.io.RandomAccessFile(file, ""rw""); java.nio.channels.FileChannel fileChannelBeforeClosing = raf.getChannel(); raf.close(); java.nio.channels.FileChannel fileChannelAfterClosing = raf.getChannel(); assertFalse(fileChannelBeforeClosing.isOpen()); }",02704dd7be97341679d76ec338fa757ee7bb5f4c,testCloseRaf_channelIsClosed(),19485,78,83
314124,sched_src_com_android_sched_marker_LocalMarkerManager.java,3.0,"@java.lang.SuppressWarnings(""unchecked"") @java.lang.Override @javax.annotation.CheckForNull public <T extends com.android.sched.marker.Marker> T addMarker(@javax.annotation.Nonnull T marker) { assert isValidMarker(marker) : (((""Marker '"" + (com.android.sched.item.Items.getName(marker.getClass()))) + ""' is not supported for class '"") + (this.getClass().getName())) + ""'""; ensureMap(); assert (markers) != null; return ((T) (markers.put(marker.getClass(), marker))); }",c177fe07b4511f6396659252aa386069d96de8ca,"@java.lang.SuppressWarnings(""unchecked"") @java.lang.Override @javax.annotation.CheckForNull public synchronized <T extends com.android.sched.marker.Marker> T addMarker(@javax.annotation.Nonnull T marker) { assert isValidMarker(marker) : (((""Marker '"" + (com.android.sched.item.Items.getName(marker.getClass()))) + ""' is not supported for class '"") + (this.getClass().getName())) + ""'""; ensureMap(); assert (markers) != null; return ((T) (markers.put(marker.getClass(), marker))); }",6aba5817d4ac94c8938312e58bf4d2e827bb6774,addMarker(com.android.sched.marker.Marker),addMarker(com.android.sched.marker.Marker),3,3,"@java.lang.SuppressWarnings(""unchecked"") @java.lang.Override @javax.annotation.CheckForNull public <T extends com.android.sched.marker.Marker> T addMarker(@javax.annotation.Nonnull T marker) { synchronized(lock) { assert isValidMarker(marker) : (((""Marker '"" + (com.android.sched.item.Items.getName(marker.getClass()))) + ""' is not supported for class '"") + (this.getClass().getName())) + ""'""; ensureMap(); assert (markers) != null; return ((T) (markers.put(marker.getClass(), marker))); } }",05ecfc1059955e01eda0e197fae79d4cd73322af,addMarker(com.android.sched.marker.Marker),451164,130,135
419439,src_com_android_bluetooth_btservice_RemoteDevices.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void onVendorSpecificHeadsetEvent(android.content.Intent intent) { android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); if (device == null) { android.util.Log.e(com.android.bluetooth.btservice.RemoteDevices.TAG, ""onVendorSpecificHeadsetEvent() remote device is null""); return; } java.lang.String cmd = intent.getStringExtra(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD); if (cmd == null) { android.util.Log.e(com.android.bluetooth.btservice.RemoteDevices.TAG, ""onVendorSpecificHeadsetEvent() command is null""); return; } int cmdType = intent.getIntExtra(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE, (-1)); if (cmdType != (android.bluetooth.BluetoothHeadset.AT_CMD_TYPE_SET)) { return; } java.lang.Object[] args = ((java.lang.Object[]) (intent.getExtras().get(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS))); if (args == null) { android.util.Log.e(com.android.bluetooth.btservice.RemoteDevices.TAG, ""onVendorSpecificHeadsetEvent() arguments are null""); return; } int batteryPercent = -1; switch (cmd) { case android.bluetooth.BluetoothHeadset.VENDOR_SPECIFIC_HEADSET_EVENT_CMD_XEVENT : batteryPercent = com.android.bluetooth.btservice.RemoteDevices.getBatteryLevelFromXEventVsc(args); break; } if (batteryPercent >= 0) { updateBatteryLevel(device, batteryPercent); com.android.bluetooth.btservice.RemoteDevices.infoLog(((((""Updated device "" + device) + "" battery level to "") + (java.lang.String.valueOf(batteryPercent))) + ""%"")); } }",c95d6b8457b74ff4014bd5ee91ccc757a462c37d,,onVendorSpecificHeadsetEvent(android.content.Intent),15,33,"@android.support.annotation.VisibleForTesting void onVendorSpecificHeadsetEvent(android.content.Intent intent) { android.bluetooth.BluetoothDevice device = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE); if (device == null) { android.util.Log.e(com.android.bluetooth.btservice.RemoteDevices.TAG, ""onVendorSpecificHeadsetEvent() remote device is null""); return; } java.lang.String cmd = intent.getStringExtra(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD); if (cmd == null) { android.util.Log.e(com.android.bluetooth.btservice.RemoteDevices.TAG, ""onVendorSpecificHeadsetEvent() command is null""); return; } int cmdType = intent.getIntExtra(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_CMD_TYPE, (-1)); if (cmdType != (android.bluetooth.BluetoothHeadset.AT_CMD_TYPE_SET)) { com.android.bluetooth.btservice.RemoteDevices.debugLog(""onVendorSpecificHeadsetEvent() only SET command is processed""); return; } java.lang.Object[] args = ((java.lang.Object[]) (intent.getExtras().get(BluetoothHeadset.EXTRA_VENDOR_SPECIFIC_HEADSET_EVENT_ARGS))); if (args == null) { android.util.Log.e(com.android.bluetooth.btservice.RemoteDevices.TAG, ""onVendorSpecificHeadsetEvent() arguments are null""); return; } int batteryPercent = android.bluetooth.BluetoothDevice.BATTERY_LEVEL_UNKNOWN; switch (cmd) { case android.bluetooth.BluetoothHeadset.VENDOR_SPECIFIC_HEADSET_EVENT_XEVENT : batteryPercent = com.android.bluetooth.btservice.RemoteDevices.getBatteryLevelFromXEventVsc(args); break; } if (batteryPercent != (android.bluetooth.BluetoothDevice.BATTERY_LEVEL_UNKNOWN)) { updateBatteryLevel(device, batteryPercent); com.android.bluetooth.btservice.RemoteDevices.infoLog(((((""Updated device "" + device) + "" battery level to "") + (java.lang.String.valueOf(batteryPercent))) + ""%"")); } }",af24cf0909ce6937807fbefc329e948460508e79,onVendorSpecificHeadsetEvent(android.content.Intent),81614,424,487
38215,lint_libs_lint_checks_tests_src_com_android_tools_lint_checks_TypoLookupTest.java,,,,"public void test1() { assertNull(mDb.getTypos(""hello"")); assertNull(mDb.getTypos(""this"")); assertNotNull(mDb.getTypos(""wiht"")); assertNotNull(mDb.getTypos(""woudl"")); assertEquals(""would"", mDb.getTypos(""woudl"").iterator().next()); java.util.Iterator<java.lang.String> typos = mDb.getTypos(""throught"").iterator(); assertEquals(""thought"", typos.next()); assertEquals(""through"", typos.next()); assertEquals(""throughout"", typos.next()); }",7beeada9d95eaf7d61597431d28e89579e812588,,test1(),3,0,"public void test1() { assertNull(mDb.getTypos(""hello"", 0, ""hello"".length())); assertNull(mDb.getTypos(""this"", 0, ""this"".length())); assertNotNull(mDb.getTypos(""wiht"", 0, ""wiht"".length())); assertNotNull(mDb.getTypos(""woudl"", 0, ""woudl"".length())); assertEquals(""would"", mDb.getTypos(""woudl"", 0, ""woudl"".length()).iterator().next()); assertEquals(""would"", mDb.getTypos("" woudl "", 2, 7).iterator().next()); assertNotNull(mDb.getTypos(""foo wiht bar"", 4, 8)); java.util.Iterator<java.lang.String> typos = mDb.getTypos(""throught"", 0, ""throught"".length()).iterator(); assertEquals(""thought"", typos.next()); assertEquals(""through"", typos.next()); assertEquals(""throughout"", typos.next()); assertNotNull(mDb.getTypos(""Woudl"", 0, ""Woudl"".length())); assertNotNull(mDb.getTypos(""Enlish"", 0, ""Enlish"".length())); assertNull(mDb.getTypos(""enlish"", 0, ""enlish"".length())); assertNotNull(mDb.getTypos(""ok"", 0, ""ok"".length())); assertNotNull(mDb.getTypos(""Ok"", 0, ""Ok"".length())); assertNull(mDb.getTypos(""OK"", 0, ""OK"".length())); }",f888da84becc3c568caeb373f6ba4740d45d0888,test1(),411544,130,339
42590,src_com_android_settings_DeviceInfoSettings.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static java.lang.String formatKernelVersion(java.lang.String rawKernelVersion) { final java.lang.String PROC_VERSION_REGEX = ""Linux version (\\S+) "" + ((((""\\((\\S+?)\\) "" + ""(?:\\(gcc.+? \\)) "") + ""(#\\d+) "") + ""(?:SMP )(?:PREEMPT )?"") + ""(.+)""); java.util.regex.Matcher m = java.util.regex.Pattern.compile(PROC_VERSION_REGEX).matcher(rawKernelVersion); if (!(m.matches())) { android.util.Log.e(com.android.settings.DeviceInfoSettings.LOG_TAG, (""Regex did not match on /proc/version: "" + rawKernelVersion)); return ""Unavailable""; } else if ((m.groupCount()) < 4) { android.util.Log.e(com.android.settings.DeviceInfoSettings.LOG_TAG, ((""Regex match on /proc/version only returned "" + (m.groupCount())) + "" groups"")); return ""Unavailable""; } return ((((((m.group(1)) + ""\n"") + (m.group(2))) + "" "") + (m.group(3))) + ""\n"") + (m.group(4)); }",6bbec33aa8ebc65338fa83901bce4bab61a6a395,,formatKernelVersion(java.lang.String),3,7,"public static java.lang.String formatKernelVersion(java.lang.String rawKernelVersion) { final java.lang.String PROC_VERSION_REGEX = ""Linux version (\\S+) "" + ((((""\\((\\S+?)\\) "" + ""(?:\\(gcc.+? \\)) "") + ""(#\\d+) "") + ""(?:.*?)?"") + ""((Sun|Mon|Tue|Wed|Thu|Fri|Sat).+)""); java.util.regex.Matcher m = java.util.regex.Pattern.compile(PROC_VERSION_REGEX).matcher(rawKernelVersion); if (!(m.matches())) { android.util.Log.e(com.android.settings.DeviceInfoSettings.LOG_TAG, (""Regex did not match on /proc/version: "" + rawKernelVersion)); return ""Unavailable""; } else if ((m.groupCount()) < 4) { android.util.Log.e(com.android.settings.DeviceInfoSettings.LOG_TAG, ((""Regex match on /proc/version only returned "" + (m.groupCount())) + "" groups"")); return ""Unavailable""; } return ((((((m.group(1)) + ""\n"") + (m.group(2))) + "" "") + (m.group(3))) + ""\n"") + (m.group(4)); }",18ad18bcb2652cfb8b5db3b64341e16e48e9c969,formatKernelVersion(java.lang.String),176574,277,285
353683,tests_tests_telephony_src_android_telephony_cts_TelephonyManagerTest.java,23.0,"private static void assertGsmDeviceId(java.lang.String deviceId) { java.lang.String imeiPattern = ""[0-9]{14,15}""; assertTrue((((""IMEI device id "" + deviceId) + "" does not match pattern "") + imeiPattern), java.util.regex.Pattern.matches(imeiPattern, deviceId)); if ((deviceId.length()) == 15) { android.telephony.cts.TelephonyManagerTest.assertImeiCheckDigit(deviceId); } }",1bd4dd4410e73cc49bd956c294f468abcb538ab7,"private static void assertImei(java.lang.String imei) { java.lang.String imeiPattern = ""[0-9]{14,15}""; assertTrue((((""IMEI "" + imei) + "" does not match pattern "") + imeiPattern), java.util.regex.Pattern.matches(imeiPattern, imei)); if ((imei.length()) == 15) { android.telephony.cts.TelephonyManagerTest.assertImeiCheckDigit(imei); } }",bad320f691389d6b56185f5d55257a52bd4af2d3,assertGsmDeviceId(java.lang.String),assertImei(java.lang.String),5,7,"private static void assertImei(java.lang.String id) { java.lang.String imeiPattern = ""[0-9]{14,15}""; assertTrue((((""IMEI "" + id) + "" does not match pattern "") + imeiPattern), java.util.regex.Pattern.matches(imeiPattern, id)); if ((id.length()) == 15) { android.telephony.cts.TelephonyManagerTest.assertImeiCheckDigit(id); } }",d794be7a41b64ca682d91a52cee33e3876460aea,assertImei(java.lang.String),166701,112,104
35611,eclipse_plugins_com.android.ide.eclipse.monitor_src_com_android_ide_eclipse_monitor_MonitorStartup.java,1.0,"@java.lang.Override public void earlyStartup() { org.eclipse.core.runtime.jobs.Job pingJob = new org.eclipse.core.runtime.jobs.Job(""Android SDK Ping"") { @java.lang.Override protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { com.android.sdkstats.SdkStatsService stats = new com.android.sdkstats.SdkStatsService(); java.lang.String toolsPath = new org.eclipse.core.runtime.Path(com.android.ide.eclipse.monitor.MonitorPlugin.getDefault().getSdkPath()).append(""tools"").toString(); com.android.ide.eclipse.monitor.MonitorStartup.ping(stats, toolsPath); return org.eclipse.core.runtime.Status.OK_STATUS; } }; pingJob.setPriority(Job.DECORATE); pingJob.schedule(); }",3ecc08a73236b5c0dd2daed253cfb16a208fa596,"@java.lang.Override public void earlyStartup() { org.eclipse.core.runtime.jobs.Job pingJob = new org.eclipse.core.runtime.jobs.Job(""Android SDK Ping"") { @java.lang.Override protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { com.android.sdkstats.SdkStatsService stats = new com.android.sdkstats.SdkStatsService(); java.lang.String sdkPath = com.android.ide.eclipse.monitor.MonitorPlugin.getDefault().getSdkPath(); if (sdkPath == null) { return org.eclipse.core.runtime.Status.OK_STATUS; } java.lang.String toolsPath = new org.eclipse.core.runtime.Path(sdkPath).append(""tools"").toString(); com.android.ide.eclipse.monitor.MonitorStartup.ping(stats, toolsPath); return org.eclipse.core.runtime.Status.OK_STATUS; } }; pingJob.setPriority(Job.DECORATE); pingJob.schedule(); }",dd03220533f53e6d5565bdd0324bd382bde53138,earlyStartup(),earlyStartup(),2,1,"@java.lang.Override public void earlyStartup() { org.eclipse.core.runtime.jobs.Job pingJob = new org.eclipse.core.runtime.jobs.Job(""Android SDK Ping"") { @java.lang.Override protected org.eclipse.core.runtime.IStatus run(org.eclipse.core.runtime.IProgressMonitor monitor) { com.android.sdkstats.SdkStatsService stats = new com.android.sdkstats.SdkStatsService(); java.lang.String sdkPath = com.android.ide.eclipse.monitor.MonitorPlugin.getDefault().getSdkPath(); if (sdkPath == null) { return org.eclipse.core.runtime.Status.OK_STATUS; } java.lang.String toolsPath = new org.eclipse.core.runtime.Path(sdkPath).append(SdkConstants.FD_TOOLS).toString(); com.android.ide.eclipse.monitor.MonitorStartup.ping(stats, toolsPath); return org.eclipse.core.runtime.Status.OK_STATUS; } }; pingJob.setPriority(Job.DECORATE); pingJob.schedule(); }",5c92406e358716364407c461990039b2532db925,earlyStartup(),209122,234,240
578733,telephony_java_android_telephony_CellIdentity.java,,,,"protected void writeToParcel(android.os.Parcel dest, int flags, int type) { dest.writeInt(type); }",46fe2d5582c0b4d25352092a771159f921b93f57,,"writeToParcel(android.os.Parcel,int,int)",11,4,"protected void log(java.lang.String s) { android.telephony.Rlog.w(mTag, s); }",8048818002fc48aa3b2682e93a119dba50ec9882,log(java.lang.String),60123,25,29
628390,core_java_com_android_internal_net_NetworkStatsFactory.java,6.0,"public android.net.NetworkStats readNetworkStatsDetail() throws java.io.IOException { return readNetworkStatsDetail(com.android.internal.net.UID_ALL, null, com.android.internal.net.TAG_ALL, null); }",a90fa3ccab6e92ab602d4f2298c24328db54eb23,"public android.net.NetworkStats readNetworkStatsDetail() throws java.io.IOException { return readNetworkStatsDetail(android.net.NetworkStats.UID_ALL, null, android.net.NetworkStats.TAG_ALL, null); }",ee5ff6e05b140568809c15bacbc0698e51d40c5e,readNetworkStatsDetail(),readNetworkStatsDetail(),11,6,"public android.net.NetworkStats readNetworkStatsDetail() throws java.io.IOException { return readNetworkStatsDetail(com.android.internal.net.UID_ALL, null, com.android.internal.net.TAG_ALL, null); }",a90fa3ccab6e92ab602d4f2298c24328db54eb23,readNetworkStatsDetail(),129348,52,54
456134,tests_net_java_com_android_server_IpSecServiceTest.java,17.0,"@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = buildIpSecConfig(); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceTest.DROID_SPI), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceTest.CRYPT_KEY), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceTest.DROID_SPI2), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceTest.CRYPT_KEY), anyInt(), anyInt(), anyInt(), anyInt()); }",0ab3f1fca456bcbf541669241ab8ba38f532e780,"@org.junit.Test public void testCreateTransportModeTransform() throws java.lang.Exception { android.net.IpSecConfig ipSecConfig = buildIpSecConfig(0); android.net.IpSecTransformResponse createTransformResp = mIpSecService.createTransportModeTransform(ipSecConfig, new android.os.Binder()); assertEquals(IpSecManager.Status.OK, createTransformResp.status); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_OUT), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceTest.DROID_SPI), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceTest.CRYPT_KEY), anyInt(), anyInt(), anyInt(), anyInt()); verify(mMockNetd).ipSecAddSecurityAssociation(eq(createTransformResp.resourceId), anyInt(), eq(IpSecTransform.DIRECTION_IN), anyString(), anyString(), anyLong(), eq(com.android.server.IpSecServiceTest.DROID_SPI2), eq(IpSecAlgorithm.AUTH_HMAC_SHA256), eq(com.android.server.IpSecServiceTest.AUTH_KEY), anyInt(), eq(IpSecAlgorithm.CRYPT_AES_CBC), eq(com.android.server.IpSecServiceTest.CRYPT_KEY), anyInt(), anyInt(), anyInt(), anyInt()); }",cc7ccd324b13c4f94ba24b3ba7f7bc530df4393f,testCreateTransportModeTransform(),testCreateTransportModeTransform(),16,1,"@org.junit.Test public void testValidateIpAddresses() throws java.lang.Exception { java.lang.String[] invalidAddresses = new java.lang.String[]{ ""www.google.com"", ""::"", ""2001::/64"", ""0.0.0.0"", """" }; for (java.lang.String address : invalidAddresses) { try { android.net.IpSecSpiResponse spiResp = mIpSecService.reserveSecurityParameterIndex(IpSecTransform.DIRECTION_OUT, address, com.android.server.IpSecServiceTest.DROID_SPI, new android.os.Binder()); fail((""Invalid address was passed through IpSecService validation: "" + address)); } catch (java.lang.IllegalArgumentException e) { } catch (java.lang.Exception e) { fail((((""Invalid InetAddress was not caught in validation: "" + address) + "", Exception: "") + e)); } } }",69889e639a57a148c29cf3d37ec26a4f47b84656,testValidateIpAddresses(),417411,358,200
70822,luni_src_main_java_java_nio_charset_CharsetDecoderICU.java,1.0,"@java.lang.Override protected final java.nio.charset.CoderResult implFlush(java.nio.CharBuffer out) { try { input = libcore.util.EmptyArray.BYTE; inEnd = 0; data[java.nio.charset.CharsetDecoderICU.INPUT_OFFSET] = 0; data[java.nio.charset.CharsetDecoderICU.OUTPUT_OFFSET] = getArray(out); data[java.nio.charset.CharsetDecoderICU.INVALID_BYTES] = 0; int error = libcore.icu.NativeConverter.decode(converterHandle, input, inEnd, output, outEnd, data, true); if (libcore.icu.ICU.U_FAILURE(error)) { if (error == (libcore.icu.ICU.U_BUFFER_OVERFLOW_ERROR)) { return java.nio.charset.CoderResult.OVERFLOW; } else if (error == (libcore.icu.ICU.U_TRUNCATED_CHAR_FOUND)) { if ((data[java.nio.charset.CharsetDecoderICU.INPUT_OFFSET]) > 0) { return java.nio.charset.CoderResult.malformedForLength(data[java.nio.charset.CharsetDecoderICU.INPUT_OFFSET]); } } } return java.nio.charset.CoderResult.UNDERFLOW; } finally { setPosition(out); implReset(); } }",765cbb997b5e97cf1b03ea234a117c381ac368d3,"@java.lang.Override protected final java.nio.charset.CoderResult implFlush(java.nio.CharBuffer out) { try { input = libcore.util.EmptyArray.BYTE; inEnd = 0; data[java.nio.charset.CharsetDecoderICU.INPUT_OFFSET] = 0; data[java.nio.charset.CharsetDecoderICU.OUTPUT_OFFSET] = getArray(out); data[java.nio.charset.CharsetDecoderICU.INVALID_BYTES] = 0; int error = libcore.icu.NativeConverter.decode(converterHandle, input, inEnd, output, outEnd, data, true); if (libcore.icu.ICU.U_FAILURE(error)) { if (error == (libcore.icu.ICU.U_BUFFER_OVERFLOW_ERROR)) { return java.nio.charset.CoderResult.OVERFLOW; } else if (error == (libcore.icu.ICU.U_TRUNCATED_CHAR_FOUND)) { if ((data[java.nio.charset.CharsetDecoderICU.INVALID_BYTES]) > 0) { return java.nio.charset.CoderResult.malformedForLength(data[java.nio.charset.CharsetDecoderICU.INVALID_BYTES]); } } } return java.nio.charset.CoderResult.UNDERFLOW; } finally { setPosition(out); implReset(); } }",7802d80c26cec272f8164592659ee22ccd4f3872,implFlush(java.nio.CharBuffer),implFlush(java.nio.CharBuffer),3,1,"@java.lang.Override protected final java.nio.charset.CoderResult implFlush(java.nio.CharBuffer out) { try { input = libcore.util.EmptyArray.BYTE; inEnd = 0; data[java.nio.charset.CharsetDecoderICU.INPUT_OFFSET] = 0; data[java.nio.charset.CharsetDecoderICU.OUTPUT_OFFSET] = getArray(out); data[java.nio.charset.CharsetDecoderICU.INVALID_BYTE_COUNT] = 0; int error = libcore.icu.NativeConverter.decode(converterHandle, input, inEnd, output, outEnd, data, true); if (libcore.icu.ICU.U_FAILURE(error)) { if (error == (libcore.icu.ICU.U_BUFFER_OVERFLOW_ERROR)) { return java.nio.charset.CoderResult.OVERFLOW; } else if (error == (libcore.icu.ICU.U_TRUNCATED_CHAR_FOUND)) { if ((data[java.nio.charset.CharsetDecoderICU.INVALID_BYTE_COUNT]) > 0) { return java.nio.charset.CoderResult.malformedForLength(data[java.nio.charset.CharsetDecoderICU.INVALID_BYTE_COUNT]); } } } return java.nio.charset.CoderResult.UNDERFLOW; } finally { setPosition(out); implReset(); } }",ba020e4ab7e1e94b1d9dab93106ec45ecad77f86,implFlush(java.nio.CharBuffer),178423,297,303
15949,ddms_libs_ddmlib_src_com_android_ddmlib_SyncService.java,1.0,"public com.android.ddmlib.SyncService.SyncResult pull(com.android.ddmlib.FileListingService.FileEntry[] entries, java.lang.String localPath, com.android.ddmlib.SyncService.ISyncProgressMonitor monitor) { java.io.File f = new java.io.File(localPath); if ((f.exists()) == false) { return new com.android.ddmlib.SyncService.SyncResult(com.android.ddmlib.SyncService.RESULT_NO_DIR_TARGET); } if ((f.isDirectory()) == false) { return new com.android.ddmlib.SyncService.SyncResult(com.android.ddmlib.SyncService.RESULT_TARGET_IS_FILE); } com.android.ddmlib.FileListingService fls = new com.android.ddmlib.FileListingService(mDevice); int total = getTotalRemoteFileSize(entries, fls); monitor.start(total); com.android.ddmlib.SyncService.SyncResult result = doPull(entries, localPath, fls, monitor); monitor.stop(); return result; }",3911392314d5a28dd6564dc185de1e5f931e3e29,"public void pull(com.android.ddmlib.FileListingService.FileEntry[] entries, java.lang.String localPath, com.android.ddmlib.SyncService.ISyncProgressMonitor monitor) throws com.android.ddmlib.SyncException, com.android.ddmlib.TimeoutException, java.io.FileNotFoundException, java.io.IOException { java.io.File f = new java.io.File(localPath); if ((f.exists()) == false) { throw new com.android.ddmlib.SyncException(SyncException.RESULT_NO_DIR_TARGET); } if ((f.isDirectory()) == false) { throw new com.android.ddmlib.SyncException(SyncException.RESULT_TARGET_IS_FILE); } com.android.ddmlib.FileListingService fls = new com.android.ddmlib.FileListingService(mDevice); int total = getTotalRemoteFileSize(entries, fls); monitor.start(total); doPull(entries, localPath, fls, monitor); monitor.stop(); }",1fb8a78a2da979f708ed27feb7d56fee34aa84ed,"pull(com.android.ddmlib.FileListingService.FileEntry[],java.lang.String,com.android.ddmlib.SyncService$ISyncProgressMonitor)","pull(com.android.ddmlib.FileListingService.FileEntry[],java.lang.String,com.android.ddmlib.SyncService$ISyncProgressMonitor)",6,1,"public void pull(com.android.ddmlib.FileListingService.FileEntry[] entries, java.lang.String localPath, com.android.ddmlib.SyncService.ISyncProgressMonitor monitor) throws com.android.ddmlib.SyncException, com.android.ddmlib.TimeoutException, java.io.FileNotFoundException, java.io.IOException { java.io.File f = new java.io.File(localPath); if ((f.exists()) == false) { throw new com.android.ddmlib.SyncException(com.android.ddmlib.SyncException.SyncError.NO_DIR_TARGET); } if ((f.isDirectory()) == false) { throw new com.android.ddmlib.SyncException(com.android.ddmlib.SyncException.SyncError.TARGET_IS_FILE); } com.android.ddmlib.FileListingService fls = new com.android.ddmlib.FileListingService(mDevice); int total = getTotalRemoteFileSize(entries, fls); monitor.start(total); doPull(entries, localPath, fls, monitor); monitor.stop(); }",66c1a4cba1cece78ab05c297cc7ab09f4d9dde7c,"pull(com.android.ddmlib.FileListingService.FileEntry[],java.lang.String,com.android.ddmlib.SyncService$ISyncProgressMonitor)",59905,239,257
91995,luni_src_main_java_libcore_io_Posix.java,52.0,"public native void setsockoptInt(java.io.FileDescriptor fd, int level, int option, int value) throws libcore.io.ErrnoException;",f2e1f690064d4bd21a22be7da5f8cae26db98463,"public native void setsockoptInt(java.io.FileDescriptor fd, int level, int option, int value) throws android.os.ErrnoException;",78eb6928956245a1c8ef18704542bbf8b7da577c,"setsockoptInt(java.io.FileDescriptor,int,int,int)","setsockoptInt(java.io.FileDescriptor,int,int,int)",3,51,"public native void setsockoptInt(java.io.FileDescriptor fd, int level, int option, int value) throws android.system.ErrnoException;",7386276b900fc590a44170fad0b9080aaa1b9064,"setsockoptInt(java.io.FileDescriptor,int,int,int)",169936,33,33
128670,src_com_android_nfc_cardemulation_RegisteredT3tIdentifiersCache.java,,,,"void generateT3tIdentifiersCacheLocked() { if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, ""generateT3tIdentifiersCacheLocked""); mT3tIdentifiersCache.clear(); java.lang.String componentString; for (java.lang.String key : com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.REGISTERED_COMPONENT_KEY_LIST) { componentString = Settings.Secure.getStringForUser(mContext.getContentResolver(), key, android.app.ActivityManager.getCurrentUser()); if (componentString != null) { for (android.nfc.cardemulation.NfcFServiceInfo service : mServices) { if (componentString.equals(service.getComponent().flattenToString())) { mT3tIdentifiersCache.put(service.getNfcid2(), service); } } } } if (com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.DBG) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, (""mT3tIdentifiersCache: size="" + (mT3tIdentifiersCache.size()))); for (java.util.Map.Entry<java.lang.String, android.nfc.cardemulation.NfcFServiceInfo> entry : mT3tIdentifiersCache.entrySet()) { android.util.Log.d(com.android.nfc.cardemulation.RegisteredT3tIdentifiersCache.TAG, ((("" "" + (entry.getKey())) + ""/"") + (entry.getValue().getComponent().toString()))); } } updateRoutingLocked(); }",7405f11f7d003502652d5d512b34daebc77566c1,,generateT3tIdentifiersCacheLocked(),10,8,@java.lang.Override public int hashCode() { int result = systemCode.hashCode(); result = (31 * result) + (nfcid2.hashCode()); return result; },373de8ab12a4f5794ff3adcc589aaa9af4a459d2,hashCode(),148741,394,37
186130,jack-tests_tests_com_android_jack_java8_RetroLambdaTests.java,8.0,"@org.junit.Test public void retroLambdaDefaultMethodsTest027() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_027).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }",5f4f075da83909b27c394e7fd4ec061e4978d501,"@org.junit.Test public void retroLambdaDefaultMethodsTest027() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_027).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); }",014367b7f91c78c631346b16add64312ca8326c5,retroLambdaDefaultMethodsTest027(),retroLambdaDefaultMethodsTest027(),7,8,@org.junit.Test public void retroLambdaDefaultMethodsTest027() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(RETROLAMBDA_DEFAULTMETHODS_027).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },345bcd6b1feba36780d4e404b44c1d26a20653b7,retroLambdaDefaultMethodsTest027(),466290,91,65
17174,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_sdk_Sdk.java,49.0,"private java.lang.String getLibraryVariableName(java.lang.String name) { return ""_android_"" + (name.replaceAll(""-"", ""_"")); }",ffa10cde8ceb75085cbe2333652eb51c45618a6b,"private java.lang.String getLibraryVariableName(java.lang.String name) { return ""_android_"" + (name.replaceAll(""[-. ]"", ""_"")); }",d5e619611d9141fb3d11e1083e353600067b2ca9,getLibraryVariableName(java.lang.String),getLibraryVariableName(java.lang.String),2,49,"private java.lang.String getLibraryVariableName(java.lang.String name) { java.lang.String validName = name.replaceAll(""[^0-9a-zA-Z]+"", ""_""); return ((""_android_"" + validName) + ""_"") + (java.lang.Integer.toString(name.hashCode())); }",b3cc00d8f5cbf6e6be31dd38f583c99162f14d28,getLibraryVariableName(java.lang.String),167490,38,70
507775,tests_net_java_android_net_NetworkStatsHistoryTest.java,0.0,"public void testRemove() throws java.lang.Exception { stats = new android.net.NetworkStatsHistory(HOUR_IN_MILLIS); stats.recordData(android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + (DAY_IN_MILLIS)), 24L, 24L); assertEquals(24, stats.size()); stats.removeBucketsBefore((0 - (DAY_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) - (YEAR_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (SECOND_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (HOUR_IN_MILLIS))); assertEquals(23, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (4 * (HOUR_IN_MILLIS)))); assertEquals(20, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (YEAR_IN_MILLIS))); assertEquals(0, stats.size()); }",83cd3a09f98d320da805035a8b08239302956fbe,"@org.junit.Test public void testRemove() throws java.lang.Exception { stats = new android.net.NetworkStatsHistory(HOUR_IN_MILLIS); stats.recordData(android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + (DAY_IN_MILLIS)), 24L, 24L); assertEquals(24, stats.size()); stats.removeBucketsBefore((0 - (DAY_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) - (YEAR_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (SECOND_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (HOUR_IN_MILLIS))); assertEquals(23, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (4 * (HOUR_IN_MILLIS)))); assertEquals(20, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (YEAR_IN_MILLIS))); assertEquals(0, stats.size()); }",91924d550780c0d333196fcbf2d24a5ec4d24272,testRemove(),testRemove(),6,0,"public void testRemove() throws java.lang.Exception { stats = new android.net.NetworkStatsHistory(HOUR_IN_MILLIS); stats.recordData(android.net.NetworkStatsHistoryTest.TEST_START, ((android.net.NetworkStatsHistoryTest.TEST_START) + (DAY_IN_MILLIS)), 24L, 24L); assertEquals(24, stats.size()); stats.removeBucketsBefore((0 - (DAY_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) - (YEAR_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (SECOND_IN_MILLIS))); assertEquals(24, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (HOUR_IN_MILLIS))); assertEquals(23, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (4 * (HOUR_IN_MILLIS)))); assertEquals(20, stats.size()); stats.removeBucketsBefore(((android.net.NetworkStatsHistoryTest.TEST_START) + (YEAR_IN_MILLIS))); assertEquals(0, stats.size()); }",83cd3a09f98d320da805035a8b08239302956fbe,testRemove(),392784,289,283
36507,sdkstats_src_com_android_sdkstats_SdkStatsService.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String normalizeAppName(java.lang.String app) { java.lang.String app2 = app.replaceAll(""\\W"", """"); if ((app.length()) == 0) { throw new java.lang.IllegalArgumentException((""Bad app name: "" + app)); } return app2; }",f111357b76256695342b310c5fd95e615d02a3cf,,normalizeAppName(java.lang.String),2,3,"protected java.lang.String normalizeAppName(java.lang.String app) { java.lang.String app2 = app.replaceAll(""\\W"", """"); if ((app.length()) == 0) { throw new java.lang.IllegalArgumentException((""Bad app name: "" + app)); } return app2; }",48e4d1e56ebd5151e26e5c62ad1031af0f09b534,normalizeAppName(java.lang.String),265238,65,65
107813,jack_src_com_android_jack_ir_ast_JLabel.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean isValidParent(@javax.annotation.CheckForNull com.android.jack.ir.ast.JNode parent) { return ((parent instanceof com.android.jack.ir.ast.JLabeledStatement) || (parent instanceof com.android.jack.ir.ast.JBreakStatement)) || (parent instanceof com.android.jack.ir.ast.JContinueStatement); },373c5cf2d81868a8187d4becc43be74fd37d5bbb,,isValidParent(com.android.jack.ir.ast.JNode),6,3,"@java.lang.Override public void checkValidity() { if (!((((parent) instanceof com.android.jack.ir.ast.JLabeledStatement) || ((parent) instanceof com.android.jack.ir.ast.JBreakStatement)) || ((parent) instanceof com.android.jack.ir.ast.JContinueStatement))) { throw new com.android.jack.ir.InternalCompilerException(this, ""Invalid parent""); } }",3225c5aea6728778a63265d81e4e4bbe9e5d059a,checkValidity(),100900,87,95
111361,src_com_google_gct_login_ui_UsersListCellRenderer.java,4.0,public boolean inLearnMoreUrl(java.awt.Point point) { double urlYStart = ((((com.google.gct.login.ui.UsersListCellRenderer.GOOGLE_IMAGE_NORTH) + (com.google.gct.login.ui.UsersListCellRenderer.GOOGLE_IMAGE_HEIGHT)) + (com.google.gct.login.ui.UsersListCellRenderer.WELCOME_LABEL_NORTH)) + ((myGeneralFontHeight) * 3)) + 3; double urlYEnd = urlYStart + (myLearnMoreLabelDimension.getHeight()); double urlXStart = com.google.gct.login.ui.UsersListCellRenderer.GOOGLE_IMAGE_WEST; double urlXEnd = urlXStart + (myLearnMoreLabelDimension.getWidth()); return ((((point.getX()) > urlXStart) && ((point.getX()) < urlXEnd)) && ((point.getY()) > urlYStart)) && ((point.getY()) < urlYEnd); },8a7cb5bea6301bb1ba6ff37eeef5e451ad79a6bd,public boolean inLearnMoreUrl(java.awt.Point point) { double urlYStart = ((((com.google.gct.login.ui.UsersListCellRenderer.GOOGLE_IMAGE_NORTH) + (mGoogleImageLabel.getIcon().getIconHeight())) + (com.google.gct.login.ui.UsersListCellRenderer.WELCOME_LABEL_NORTH)) + ((myGeneralFontHeight) * 3)) + 3; double urlYEnd = urlYStart + (myLearnMoreLabelDimension.getHeight()); double urlXStart = com.google.gct.login.ui.UsersListCellRenderer.GOOGLE_IMAGE_WEST; double urlXEnd = urlXStart + (myLearnMoreLabelDimension.getWidth()); return ((((point.getX()) > urlXStart) && ((point.getX()) < urlXEnd)) && ((point.getY()) > urlYStart)) && ((point.getY()) < urlYEnd); },fb87301569d1f14cbe913c6300d92449f6683934,inLearnMoreUrl(java.awt.Point),inLearnMoreUrl(java.awt.Point),4,4,public boolean inLearnMoreUrl(java.awt.Point point) { double urlYStart = ((((com.google.gct.login.ui.UsersListCellRenderer.GOOGLE_IMAGE_NORTH) + (myGoogleImageLabel.getIcon().getIconHeight())) + (com.google.gct.login.ui.UsersListCellRenderer.WELCOME_LABEL_NORTH)) + ((myGeneralFontHeight) * 3)) + 3; double urlYEnd = urlYStart + (myLearnMoreLabelDimension.getHeight()); double urlXStart = com.google.gct.login.ui.UsersListCellRenderer.GOOGLE_IMAGE_WEST; double urlXEnd = urlXStart + (myLearnMoreLabelDimension.getWidth()); return ((((point.getX()) > urlXStart) && ((point.getX()) < urlXEnd)) && ((point.getY()) > urlYStart)) && ((point.getY()) < urlYEnd); },ab2606a4a110e6ea20ebec6f7d2371e7db6946fd,inLearnMoreUrl(java.awt.Point),45979,207,207
143181,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_tasks_DependencyReportTask.java,,,,"@org.gradle.api.tasks.TaskAction public void generate() throws java.io.IOException { mRenderer.setOutput(getServices().get(org.gradle.logging.StyledTextOutputFactory.class).create(getClass())); java.util.SortedSet<com.android.build.gradle.internal.variant.BaseVariantData> sortedConfigurations = new java.util.TreeSet<com.android.build.gradle.internal.variant.BaseVariantData>(new java.util.Comparator<com.android.build.gradle.internal.variant.BaseVariantData>() { @java.lang.Override public int compare(com.android.build.gradle.internal.variant.BaseVariantData conf1, com.android.build.gradle.internal.variant.BaseVariantData conf2) { return conf1.getName().compareTo(conf2.getName()); } }); sortedConfigurations.addAll(getVariants()); for (com.android.build.gradle.internal.variant.BaseVariantData variant : sortedConfigurations) { mRenderer.startVariant(variant); mRenderer.render(variant); } }",c819b172cf51ce3196a511d2422b9cf67b9b150d,,generate(),8,0,"@org.gradle.api.tasks.TaskAction public void generate() throws java.io.IOException { renderer.setOutput(getServices().get(org.gradle.logging.StyledTextOutputFactory.class).create(getClass())); java.util.SortedSet<com.android.build.gradle.internal.variant.BaseVariantData> sortedConfigurations = new java.util.TreeSet<com.android.build.gradle.internal.variant.BaseVariantData>(new java.util.Comparator<com.android.build.gradle.internal.variant.BaseVariantData>() { @java.lang.Override public int compare(com.android.build.gradle.internal.variant.BaseVariantData conf1, com.android.build.gradle.internal.variant.BaseVariantData conf2) { return conf1.getName().compareTo(conf2.getName()); } }); sortedConfigurations.addAll(getVariants()); for (com.android.build.gradle.internal.variant.BaseVariantData variant : sortedConfigurations) { renderer.startVariant(variant); renderer.render(variant); } }",d9a868b96bb0bdb754bc84187c931b947e3fca52,generate(),512554,230,227
21853,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_descriptors_CustomViewDescriptorService.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public org.eclipse.swt.graphics.Image getGenericIcon() { return org.eclipse.jdt.ui.JavaUI.getSharedImages().getImage(ISharedImages.IMG_OBJS_CUNIT); },43068411154083e0947b881e37f21087163f128c,,getGenericIcon(),5,1,@java.lang.Override public org.eclipse.swt.graphics.Image getGenericIcon() { org.eclipse.jdt.ui.ISharedImages sharedImages = org.eclipse.jdt.ui.JavaUI.getSharedImages(); java.lang.String key = org.eclipse.jdt.ui.ISharedImages.IMG_OBJS_CUNIT; org.eclipse.jface.resource.ImageDescriptor descriptor = sharedImages.getImageDescriptor(key); return descriptor.createImage(); },16b3609e8a3eee9987d153c3a8b1d27e745ee32d,getGenericIcon(),270693,51,103
114587,jack_src_com_android_jack_preprocessor_PreProcessorApplier.java,1.0,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws java.lang.Exception { java.util.Collection<com.android.jack.preprocessor.Rule> rules = new java.util.ArrayList<com.android.jack.preprocessor.Rule>(); if (com.android.sched.util.config.ThreadConfig.get(PreProcessor.ENABLE).booleanValue()) { com.android.sched.util.file.InputStreamFile input = com.android.sched.util.config.ThreadConfig.get(PreProcessor.FILE); java.io.InputStream inputStream = input.getInputStream(); try { rules.addAll(parseRules(session, inputStream)); } finally { try { inputStream.close(); } catch (java.io.IOException e) { } } } for (java.util.Iterator<com.android.sched.vfs.InputRootVDir> iter = session.getPathSources(); iter.hasNext();) { com.android.sched.vfs.InputRootVDir dir = iter.next(); for (com.android.sched.vfs.InputVElement sub : dir.list()) { if ((sub.getName().equals(""JACK-INF"")) && (sub.isVDir())) { for (com.android.sched.vfs.InputVElement inf : ((com.android.sched.vfs.InputVDir) (sub)).list()) { if ((inf.getName().endsWith("".jpp"")) && (!(inf.isVDir()))) { java.io.InputStream inputStream = ((com.android.sched.vfs.InputVFile) (inf)).openRead(); try { rules.addAll(parseRules(session, inputStream)); } finally { try { inputStream.close(); } catch (java.io.IOException e) { } } } } break; } } } applyRules(rules, session); }",ce9c20fc73a36d88e43d329353dbfd4a8e2b00c9,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws java.lang.Exception { java.util.Collection<com.android.jack.preprocessor.Rule> rules = new java.util.ArrayList<com.android.jack.preprocessor.Rule>(); if (com.android.sched.util.config.ThreadConfig.get(PreProcessor.ENABLE).booleanValue()) { com.android.sched.util.file.InputStreamFile input = com.android.sched.util.config.ThreadConfig.get(PreProcessor.FILE); java.io.InputStream inputStream = input.getInputStream(); try { rules.addAll(parseRules(session, inputStream)); } finally { try { inputStream.close(); } catch (java.io.IOException e) { } } } for (com.android.jack.meta.Meta meta : session.getMetas()) { com.android.sched.vfs.InputVFile file = meta.getVFile(); if (file.getName().endsWith("".jpp"")) { java.io.InputStream inputStream = null; try { inputStream = file.openRead(); rules.addAll(parseRules(session, inputStream)); } finally { try { if (inputStream != null) { inputStream.close(); } } catch (java.io.IOException e) { } } } } applyRules(rules, session); }",7023387328754f50a87f73b7fb3e2773e71b607a,run(com.android.jack.ir.ast.JSession),run(com.android.jack.ir.ast.JSession),4,1,"@java.lang.Override public void run(@javax.annotation.Nonnull com.android.jack.ir.ast.JSession session) throws java.lang.Exception { java.util.Collection<com.android.jack.preprocessor.Rule> rules = new java.util.ArrayList<com.android.jack.preprocessor.Rule>(); if (com.android.sched.util.config.ThreadConfig.get(PreProcessor.ENABLE).booleanValue()) { com.android.sched.util.file.InputStreamFile input = com.android.sched.util.config.ThreadConfig.get(PreProcessor.FILE); java.io.InputStream inputStream = input.getInputStream(); try { rules.addAll(parseRules(session, inputStream)); } finally { try { inputStream.close(); } catch (java.io.IOException e) { } } } for (java.util.Iterator<com.android.sched.vfs.InputRootVDir> iter = session.getPathSources(); iter.hasNext();) { com.android.sched.vfs.InputRootVDir dir = iter.next(); for (com.android.sched.vfs.InputVElement sub : dir.list()) { if ((sub.getName().equals(""JACK-INF"")) && (sub.isVDir())) { for (com.android.sched.vfs.InputVElement inf : ((com.android.sched.vfs.InputVDir) (sub)).list()) { if ((inf.getName().endsWith("".jpp"")) && (!(inf.isVDir()))) { java.io.InputStream inputStream = ((com.android.sched.vfs.InputVFile) (inf)).openRead(); try { rules.addAll(parseRules(session, inputStream)); } finally { try { inputStream.close(); } catch (java.io.IOException e) { } } } } break; } } } applyRules(rules, session); }",ce9c20fc73a36d88e43d329353dbfd4a8e2b00c9,run(com.android.jack.ir.ast.JSession),25206,298,411
322567,core_java_android_bluetooth_le_ScanResult.java,5.0,"@java.lang.Override public java.lang.String toString() { return ((((((((""ScanResult{"" + ""mDevice="") + (mDevice)) + "", mScanRecord="") + (java.util.Objects.toString(mScanRecord))) + "", mRssi="") + (mRssi)) + "", mTimestampNanos="") + (mTimestampNanos)) + '}'; }",91db9a97f5f4a4a3bf8f554fff02ee42cb3fc679,"@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((""ScanResult{"" + ""mDevice="") + (mDevice)) + "", mScanRecord="") + (java.util.Objects.toString(mScanRecord))) + "", mRssi="") + (mRssi)) + "", mTimestampNanos="") + (mTimestampNanos)) + "", eventType="") + (mEventType)) + "", primaryPhy="") + (mPrimaryPhy)) + "", secondaryPhy="") + (mSecondaryPhy)) + "", advertisingSid="") + (mAdvertisingSid)) + "", txPower="") + (mTxPower)) + "", mPeriodicAdvertisingInterval="") + (mPeriodicAdvertisingInterval)) + '}'; }",aef38855469c49c46ef8f4cf49295cae85c13ec0,toString(),toString(),23,5,"@java.lang.Override public java.lang.String toString() { return ((((((((((((((((((((""ScanResult{"" + ""device="") + (mDevice)) + "", scanRecord="") + (java.util.Objects.toString(mScanRecord))) + "", rssi="") + (mRssi)) + "", timestampNanos="") + (mTimestampNanos)) + "", eventType="") + (mEventType)) + "", primaryPhy="") + (mPrimaryPhy)) + "", secondaryPhy="") + (mSecondaryPhy)) + "", advertisingSid="") + (mAdvertisingSid)) + "", txPower="") + (mTxPower)) + "", periodicAdvertisingInterval="") + (mPeriodicAdvertisingInterval)) + '}'; }",32a93c8dc6f88a84897fa0bc6672ff00e9a1fdb9,toString(),73553,184,180
322868,services_core_java_com_android_server_connectivity_Tethering.java,9.0,public java.lang.String[] getTetherableBluetoothRegexs() { return mTetherableBluetoothRegexs; },7ffa51ed22440b46370ecac01c69fdd0964c7591,"public java.lang.String[] getTetherableBluetoothRegexs() { final com.android.server.connectivity.Tethering.TetheringConfiguration ctx = mConfig; return java.util.Arrays.copyOf(ctx.tetherableBluetoothRegexs, ctx.tetherableBluetoothRegexs.length); }",13030f4f89d581988f75368e2cb4b81d58f265ee,getTetherableBluetoothRegexs(),getTetherableBluetoothRegexs(),9,11,public java.lang.String[] getTetherableBluetoothRegexs() { return com.android.server.connectivity.Tethering.copy(mConfig.tetherableBluetoothRegexs); },c407472350cff69e5e48e6ed27b3d6c74d37a355,getTetherableBluetoothRegexs(),405777,69,43
194173,src_com_android_bluetooth_btservice_AdapterService.java,78.0,"boolean createBond(android.bluetooth.BluetoothDevice device, int transport) { enforceCallingOrSelfPermission(com.android.bluetooth.btservice.AdapterService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); com.android.bluetooth.btservice.RemoteDevices.DeviceProperties deviceProp = mRemoteDevices.getDeviceProperties(device); if ((deviceProp != null) && ((deviceProp.getBondState()) != (android.bluetooth.BluetoothDevice.BOND_NONE))) { return false; } cancelDiscoveryNative(); android.os.Message msg = mBondStateMachine.obtainMessage(BondStateMachine.CREATE_BOND); msg.obj = device; msg.arg1 = transport; mBondStateMachine.sendMessage(msg); return true; }",d056d2ca163e8fb5df3eb0b8d5b2d8ed7355225e,"boolean createBond(android.bluetooth.BluetoothDevice device, int transport, android.bluetooth.OOBData oobData) { enforceCallingOrSelfPermission(com.android.bluetooth.btservice.AdapterService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); com.android.bluetooth.btservice.RemoteDevices.DeviceProperties deviceProp = mRemoteDevices.getDeviceProperties(device); if ((deviceProp != null) && ((deviceProp.getBondState()) != (android.bluetooth.BluetoothDevice.BOND_NONE))) { return false; } cancelDiscoveryNative(); android.os.Message msg = mBondStateMachine.obtainMessage(BondStateMachine.CREATE_BOND); msg.obj = device; msg.arg1 = transport; if (oobData != null) { android.os.Bundle oobDataBundle = new android.os.Bundle(); oobDataBundle.putParcelable(BondStateMachine.OOBDATA, oobData); msg.setData(oobDataBundle); } mBondStateMachine.sendMessage(msg); return true; }",ebbaf6b23008fa438637c1b94049cf03f3ac5f4d,"createBond(android.bluetooth.BluetoothDevice,int)","createBond(android.bluetooth.BluetoothDevice,int,android.bluetooth.OOBData)",5,90,"boolean createBond(android.bluetooth.BluetoothDevice device, int transport, android.bluetooth.OobData oobData) { enforceCallingOrSelfPermission(com.android.bluetooth.btservice.AdapterService.BLUETOOTH_ADMIN_PERM, ""Need BLUETOOTH ADMIN permission""); com.android.bluetooth.btservice.RemoteDevices.DeviceProperties deviceProp = mRemoteDevices.getDeviceProperties(device); if ((deviceProp != null) && ((deviceProp.getBondState()) != (android.bluetooth.BluetoothDevice.BOND_NONE))) { return false; } cancelDiscoveryNative(); android.os.Message msg = mBondStateMachine.obtainMessage(BondStateMachine.CREATE_BOND); msg.obj = device; msg.arg1 = transport; if (oobData != null) { android.os.Bundle oobDataBundle = new android.os.Bundle(); oobDataBundle.putParcelable(BondStateMachine.OOBDATA, oobData); msg.setData(oobDataBundle); } mBondStateMachine.sendMessage(msg); return true; }",62f6e8eb56167a281ab57b7a81c513bfc673c81c,"createBond(android.bluetooth.BluetoothDevice,int,android.bluetooth.OobData)",475031,230,230
14214,src_com_android_settings_Utils.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static boolean updatePreferenceToSpecificActivityFromMetaDataOrRemove(android.content.Context context, android.preference.PreferenceGroup parentPreferenceGroup, java.lang.String preferenceKey) { com.android.settings.IconPreferenceScreen preference = ((com.android.settings.IconPreferenceScreen) (parentPreferenceGroup.findPreference(preferenceKey))); if (preference == null) { return false; } android.content.Intent intent = preference.getIntent(); if (intent != null) { android.content.pm.PackageManager pm = context.getPackageManager(); java.util.List<android.content.pm.ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.GET_META_DATA); int listSize = list.size(); for (int i = 0; i < listSize; i++) { android.content.pm.ResolveInfo resolveInfo = list.get(i); if (((resolveInfo.activityInfo.applicationInfo.flags) & (android.content.pm.ApplicationInfo.FLAG_SYSTEM)) != 0) { android.graphics.drawable.Drawable icon = null; java.lang.String title = null; java.lang.String summary = null; try { android.content.res.Resources res = pm.getResourcesForApplication(resolveInfo.activityInfo.packageName); android.os.Bundle metaData = resolveInfo.activityInfo.metaData; if ((res != null) && (metaData != null)) { icon = res.getDrawable(metaData.getInt(com.android.settings.Utils.META_DATA_PREFERENCE_ICON)); title = res.getString(metaData.getInt(com.android.settings.Utils.META_DATA_PREFERENCE_TITLE)); summary = res.getString(metaData.getInt(com.android.settings.Utils.META_DATA_PREFERENCE_SUMMARY)); } } catch (android.content.pm.PackageManager.NameNotFoundException e) { } if (android.text.TextUtils.isEmpty(title)) { title = resolveInfo.loadLabel(pm).toString(); } preference.setIcon(icon); preference.setTitle(title); preference.setSummary(summary); preference.setIntent(new android.content.Intent().setClassName(resolveInfo.activityInfo.packageName, resolveInfo.activityInfo.name)); return true; } } } parentPreferenceGroup.removePreference(preference); return false; }",50aca04f7e388563e903b2394595f5b8065a7f6d,,"updatePreferenceToSpecificActivityFromMetaDataOrRemove(android.content.Context,android.preference.PreferenceGroup,java.lang.String)",4,1,"public static boolean updatePreferenceToSpecificActivityFromMetaDataOrRemove(android.content.Context context, android.preference.PreferenceGroup parentPreferenceGroup, java.lang.String preferenceKey) { com.android.settings.IconPreferenceScreen preference = ((com.android.settings.IconPreferenceScreen) (parentPreferenceGroup.findPreference(preferenceKey))); if (preference == null) { return false; } android.content.Intent intent = preference.getIntent(); if (intent != null) { android.content.pm.PackageManager pm = context.getPackageManager(); java.util.List<android.content.pm.ResolveInfo> list = pm.queryIntentActivities(intent, PackageManager.GET_META_DATA); int listSize = list.size(); for (int i = 0; i < listSize; i++) { android.content.pm.ResolveInfo resolveInfo = list.get(i); if (((resolveInfo.activityInfo.applicationInfo.flags) & (android.content.pm.ApplicationInfo.FLAG_SYSTEM)) != 0) { android.graphics.drawable.Drawable icon = null; java.lang.String title = null; java.lang.String summary = null; try { android.content.res.Resources res = pm.getResourcesForApplication(resolveInfo.activityInfo.packageName); android.os.Bundle metaData = resolveInfo.activityInfo.metaData; if ((res != null) && (metaData != null)) { icon = res.getDrawable(metaData.getInt(com.android.settings.Utils.META_DATA_PREFERENCE_ICON)); title = res.getString(metaData.getInt(com.android.settings.Utils.META_DATA_PREFERENCE_TITLE)); summary = res.getString(metaData.getInt(com.android.settings.Utils.META_DATA_PREFERENCE_SUMMARY)); } } catch (android.content.pm.PackageManager.NameNotFoundException e) { } catch (android.content.res.Resources.NotFoundException e) { } if (android.text.TextUtils.isEmpty(title)) { title = resolveInfo.loadLabel(pm).toString(); } preference.setIcon(icon); preference.setTitle(title); preference.setSummary(summary); preference.setIntent(new android.content.Intent().setClassName(resolveInfo.activityInfo.packageName, resolveInfo.activityInfo.name)); return true; } } } parentPreferenceGroup.removePreference(preference); return false; }",4a9f2b2fea6abfa94551c8638f3a7657714fd605,"updatePreferenceToSpecificActivityFromMetaDataOrRemove(android.content.Context,android.preference.PreferenceGroup,java.lang.String)",391661,494,510
331764,core_java_android_net_ConnectivityManager.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void requestNetwork(android.net.NetworkRequest request, android.net.ConnectivityManager.NetworkCallback networkCallback, int timeoutMs, int legacyType, android.os.Handler handler) { sendRequestForNetwork(request.networkCapabilities, networkCallback, timeoutMs, android.net.ConnectivityManager.REQUEST, legacyType, handler); }",ce224b71a832b50e5e941a4b72e0a0fa38dda800,,"requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,int,int,android.os.Handler)",12,132,"private void requestNetwork(android.net.NetworkRequest request, android.net.ConnectivityManager.NetworkCallback networkCallback, int timeoutMs, int legacyType, android.os.Handler handler) { android.net.ConnectivityManager.CallbackHandler cbHandler = new android.net.ConnectivityManager.CallbackHandler(handler); android.net.NetworkCapabilities nc = request.networkCapabilities; sendRequestForNetwork(nc, networkCallback, timeoutMs, android.net.ConnectivityManager.REQUEST, legacyType, cbHandler); }",a57777f477466a132ec775990605dc70a11c97b5,"requestNetwork(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback,int,int,android.os.Handler)",272851,72,107
18735,tools_vm-tests_src_dot_junit_opcodes_iget_short_Test_iget_short.java,16.0,"public void testVFE5() { try { java.lang.Class.forName(""dot.junit.opcodes.iget_short.d.T_iget_short_7""); fail(""expected a verification exception""); } catch (java.lang.Throwable t) { dot.junit.DxUtil.checkVerifyException(t); } }",0acb21853580bf413f8c75c6ed85bd76c1c6f35a,"public void testVFE5() { try { dot.junit.opcodes.iget_short.d.T_iget_short_7 t = new dot.junit.opcodes.iget_short.d.T_iget_short_7(); t.run(); fail(""expected a NoClassDefFoundError exception""); } catch (java.lang.NoClassDefFoundError e) { } }",f088a43e63e23fee2ca3020aab0717337c499b7c,testVFE5(),testVFE5(),2,16,"public void testVFE5() { try { new dot.junit.opcodes.iget_short.d.T_iget_short_7().run(); fail(""expected a NoClassDefFoundError exception""); } catch (java.lang.NoClassDefFoundError e) { } }",72770f7a3aa14e639797dba47a579c8bc04a4924,testVFE5(),456368,89,60
229824,system_image_uitests_app_src_androidTest_java_com_android_devtools_systemimage_uitest_smoke_NetworkIOTest.java,1.0,"public void testBrowserLoadsSite() throws java.lang.Exception { android.app.Instrumentation instrumentation = getInstrumentation(); android.support.test.uiautomator.UiDevice device = android.support.test.uiautomator.UiDevice.getInstance(instrumentation); com.android.devtools.systemimage.uitest.utils.TestUtils.disableHomeOverlayItems(device); if (com.android.devtools.systemimage.uitest.utils.TestUtils.verifyNetworkStatus(device)) { com.android.devtools.systemimage.uitest.utils.TestUtils.disableAppsOverlayItems(device); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""Browser""); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_URL_TEXT_FIELD)).click(); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_URL_TEXT_FIELD)).clearTextField(); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_URL_TEXT_FIELD)).setText(""google.com""); device.pressEnter(); device.registerWatcher(com.android.devtools.systemimage.uitest.watchers.BrowserPageLoadedWatcher.class.getName(), new com.android.devtools.systemimage.uitest.watchers.BrowserPageLoadedWatcher(device)); } }",b976a1dbb6052eda33a04630ebde884ed037d75b,"@org.junit.Test public void testBrowserLoadsSite() throws java.lang.Exception { mInstrumentation = testRule.getInstrumentation(); mDevice = testRule.getDevice(); if (com.android.devtools.systemimage.uitest.utils.NetworkUtil.verifyNetworkStatus(mDevice)) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Browser""); mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_URL_TEXT_FIELD)).click(); mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_URL_TEXT_FIELD)).clearTextField(); mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_URL_TEXT_FIELD)).setText(""google.com""); mDevice.pressEnter(); final android.support.test.uiautomator.UiObject progress = mDevice.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_SEARCH_ICON_RES)); boolean isSuccess = new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { return !(progress.exists()); } }); junit.framework.Assert.assertTrue(""Failed to dismiss the loading bar."", isSuccess); } }",c29f75313348375ff199d07c78b9efa4d4535fd8,testBrowserLoadsSite(),testBrowserLoadsSite(),5,0,"@org.junit.Test public void testBrowserLoadsSite() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); android.support.test.uiautomator.UiDevice device = testFramework.getDevice(); if (com.android.devtools.systemimage.uitest.utils.NetworkUtil.verifyNetworkStatus(device)) { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""Browser""); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_URL_TEXT_FIELD)).click(); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_URL_TEXT_FIELD)).clearTextField(); device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_URL_TEXT_FIELD)).setText(""google.com""); device.pressEnter(); final android.support.test.uiautomator.UiObject progress = device.findObject(new android.support.test.uiautomator.UiSelector().resourceId(com.android.devtools.systemimage.uitest.smoke.NetworkIOTest.BROWSER_SEARCH_ICON_RES)); org.junit.Assert.assertTrue(""Failed to find the loading bar."", progress.exists()); boolean isSuccess = new com.android.devtools.systemimage.uitest.utils.Wait().until(new com.android.devtools.systemimage.uitest.utils.Wait.ExpectedCondition() { @java.lang.Override public boolean isTrue() throws java.lang.Exception { return !(progress.exists()); } }); org.junit.Assert.assertTrue(""Failed to dismiss the loading bar."", isSuccess); } }",22ae52cccd52fe5e6d9286c23e4a2112db4faf62,testBrowserLoadsSite(),154714,422,451
285003,tools_ahat_src_heapdump_AhatClassObj.java,,,,public java.lang.String getClassName() { return mClassName; },9cf139462f689cc37d59d8d751d560d26e15c253,,getClassName(),7,0,public java.lang.String getName() { return mClassName; },98d9bc0c7cb9a3af0ddd61b56333475ed70696c7,getName(),183600,15,15
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,18.0,"public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, getAuthKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, false, 1, true); }",fb2d0f8d15aeb6b4e929f94c3979bc08d83f3d7e,"public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.getKey(256)); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",d92afaf1b5900cd3c0be7a05275fbd66f4e66cc5,testAesCbcHmacSha384Tcp6(),testAesCbcHmacSha384Tcp6(),9,20,"public void testAesCbcHmacSha384Tcp6() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA384, android.net.cts.IpSecManagerTest.getKey(384), 192); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV6_LOOPBACK, crypt, auth, null, false, 1, true); }",f38d4b05e2d48aaa585f6bdd738687e0aaffbae1,testAesCbcHmacSha384Tcp6(),1906,214,214
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,53.0,"public void testAesCbcHmacSha256Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IpSecManagerTest.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",262e827dd2b97a44f5f90afa19870fc0c82c7cae,"public void testAesCbcHmacSha256Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, android.net.cts.IpSecManagerTest.CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getAuthKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, true, 1, false); }",aa1c01f0aefd94687fa24b400891f9e4a0a2c214,testAesCbcHmacSha256Tcp4UdpEncap(),testAesCbcHmacSha256Tcp4UdpEncap(),15,80,"public void testAesCbcHmacSha256Tcp4UdpEncap() throws java.lang.Exception { android.net.IpSecAlgorithm crypt = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.CRYPT_AES_CBC, CRYPT_KEY); android.net.IpSecAlgorithm auth = new android.net.IpSecAlgorithm(android.net.IpSecAlgorithm.AUTH_HMAC_SHA256, getKey(256), 128); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, false); checkTransform(android.net.cts.IPPROTO_TCP, android.net.cts.IPV4_LOOPBACK, crypt, auth, null, true, 1, true); }",7bfe29933f977ea79fa05e74fcc8c51c54924449,testAesCbcHmacSha256Tcp4UdpEncap(),381492,153,184
647079,services_net_java_android_net_apf_ApfGenerator.java,50.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public android.net.apf.ApfGenerator addLoadData(android.net.apf.ApfGenerator.Register destinationRegister, int offset) throws android.net.apf.ApfGenerator.IllegalInstructionException { android.net.apf.ApfGenerator.Instruction instruction = new android.net.apf.ApfGenerator.Instruction(android.net.apf.ApfGenerator.Opcodes.LDDW, destinationRegister); instruction.setUnsignedImm(offset); addInstruction(instruction); return this; }",775be81eaaef61b6b1c375f77e94e2e4884f2605,,"addLoadData(android.net.apf.ApfGenerator$Register,int)",14,20,"public android.net.apf.ApfGenerator addLoadData(android.net.apf.ApfGenerator.Register destinationRegister, int offset) throws android.net.apf.ApfGenerator.IllegalInstructionException { requireApfVersion(3); android.net.apf.ApfGenerator.Instruction instruction = new android.net.apf.ApfGenerator.Instruction(android.net.apf.ApfGenerator.Opcodes.LDDW, destinationRegister); instruction.setUnsignedImm(offset); addInstruction(instruction); return this; }",6aef9665f9359e60a5d4b2c1a48b6bdafc735fd1,"addLoadData(android.net.apf.ApfGenerator$Register,int)",166331,115,120
502981,telephony_java_com_android_ims_ImsUtInterface.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void unSetSuppServiceIndication(android.os.Handler handler);,da53e5ee7c981fa8de20991b3558da41af06cd46,,unSetSuppServiceIndication(android.os.Handler),5,17,public void unregisterForSuppServiceIndication(android.os.Handler handler);,46b2293e084ca44ab81ec6154a70c5787ff20d33,unregisterForSuppServiceIndication(android.os.Handler),446159,17,17
144781,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_scope_AndroidTaskRegistry.java,,,,"public synchronized <U, T extends org.gradle.api.Task> com.android.build.gradle.internal.scope.AndroidTask<T> create(com.android.build.gradle.internal.TaskFactory collectionBuilder, java.lang.String taskName, java.lang.Class<T> taskClass, org.gradle.api.Action<T> configAction) { collectionBuilder.create(taskName, taskClass, configAction); final com.android.build.gradle.internal.scope.AndroidTask<T> newTask = new com.android.build.gradle.internal.scope.AndroidTask<T>(taskName, taskClass); tasks.put(taskName, newTask); return newTask; }",6fbfaaaaba3a19bb5b2e09acc87f357a854fa6b4,,"create(com.android.build.gradle.internal.TaskFactory,java.lang.String,java.lang.Class,org.gradle.api.Action)",6,0,"public <T extends org.gradle.api.Task> com.android.build.gradle.internal.scope.AndroidTask<T> create(com.android.build.gradle.internal.TaskFactory taskFactory, com.android.build.gradle.internal.scope.TaskConfigAction<T> configAction) { return create(taskFactory, configAction.getName(), configAction.getType(), configAction); }",e7fe5d994b057ec694deeb67eb56d5231c6a911f,"create(com.android.build.gradle.internal.TaskFactory,com.android.build.gradle.internal.scope.TaskConfigAction)",337608,157,88
315341,tests_src_com_android_networkrecommendation_DefaultNetworkRecommendationProviderTest.java,3.0,"@org.junit.Test public void basicRecommendation() throws java.lang.Exception { android.net.wifi.ScanResult[] scanResults = new android.net.wifi.ScanResult[6]; for (int i = 0; i < 3; i++) { scanResults[i] = com.android.networkrecommendation.Util.createMockScanResult(i); } mStorage.addScore(com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK); { android.net.wifi.ScanResult scanResult = new android.net.wifi.ScanResult(); scanResult.level = 115; scanResult.SSID = com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK_STRING_UNQUOTED; scanResult.wifiSsid = android.net.wifi.WifiSsid.createFromAsciiEncoded(com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK_STRING_UNQUOTED); scanResult.BSSID = com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK.networkKey.wifiKey.bssid; scanResult.capabilities = ""[ESS]""; scanResult.timestamp = (android.os.SystemClock.elapsedRealtime()) * 1000; scanResults[3] = scanResult; } for (int i = 4; i < 6; i++) { scanResults[i] = com.android.networkrecommendation.Util.createMockScanResult(i); } android.net.RecommendationRequest request = new android.net.RecommendationRequest.Builder().setScanResults(scanResults).setNetworkCapabilities(new android.net.NetworkCapabilities().removeCapability(NetworkCapabilities.NET_CAPABILITY_TRUSTED)).build(); android.net.RecommendationResult result = verifyAndCaptureResult(mProvider, request); assertEquals(com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK.networkKey.wifiKey.ssid, result.getWifiConfiguration().SSID); }",b767e5e0c45d34e06a8dd798cbb837fab3bdbe39,"@org.junit.Test public void basicRecommendation() throws java.lang.Exception { android.net.wifi.ScanResult[] scanResults = new android.net.wifi.ScanResult[6]; for (int i = 0; i < 3; i++) { scanResults[i] = com.android.networkrecommendation.Util.createMockScanResult(i); } mProvider.addScoreForTest(com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK); { android.net.wifi.ScanResult scanResult = new android.net.wifi.ScanResult(); scanResult.level = 115; scanResult.SSID = com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK_STRING_UNQUOTED; scanResult.wifiSsid = android.net.wifi.WifiSsid.createFromAsciiEncoded(com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK_STRING_UNQUOTED); scanResult.BSSID = com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK.networkKey.wifiKey.bssid; scanResult.capabilities = ""[ESS]""; scanResult.timestamp = (android.os.SystemClock.elapsedRealtime()) * 1000; scanResults[3] = scanResult; } for (int i = 4; i < 6; i++) { scanResults[i] = com.android.networkrecommendation.Util.createMockScanResult(i); } android.net.RecommendationRequest request = new android.net.RecommendationRequest.Builder().setScanResults(scanResults).setNetworkCapabilities(new android.net.NetworkCapabilities().removeCapability(NetworkCapabilities.NET_CAPABILITY_TRUSTED)).build(); android.net.RecommendationResult result = verifyAndCaptureResult(mProvider, request); assertEquals(com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK.networkKey.wifiKey.ssid, result.getWifiConfiguration().SSID); }",3c5de2bd0f7a52d9360b87078b33c89551ef4909,basicRecommendation(),basicRecommendation(),6,4,"@org.junit.Test public void basicRecommendation() throws java.lang.Exception { android.net.wifi.ScanResult[] scanResults = new android.net.wifi.ScanResult[6]; for (int i = 0; i < 3; i++) { scanResults[i] = com.android.networkrecommendation.Util.createMockScanResult(i); } mProvider.addScoreForTest(com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK); { android.net.wifi.ScanResult scanResult = new android.net.wifi.ScanResult(); scanResult.level = 115; scanResult.SSID = com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK_STRING_UNQUOTED; scanResult.wifiSsid = android.net.wifi.WifiSsid.createFromAsciiEncoded(com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK_STRING_UNQUOTED); scanResult.BSSID = com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK.networkKey.wifiKey.bssid; scanResult.capabilities = ""[ESS]""; scanResult.timestamp = (android.os.SystemClock.elapsedRealtime()) * 1000; scanResults[3] = scanResult; } for (int i = 4; i < 6; i++) { scanResults[i] = com.android.networkrecommendation.Util.createMockScanResult(i); } android.net.RecommendationRequest request = new android.net.RecommendationRequest.Builder().setScanResults(scanResults).setNetworkCapabilities(new android.net.NetworkCapabilities().removeCapability(NetworkCapabilities.NET_CAPABILITY_TRUSTED)).build(); android.net.RecommendationResult result = verifyAndCaptureResult(request); assertEquals(com.android.networkrecommendation.DefaultNetworkRecommendationProviderTest.GOOD_METERED_NETWORK.networkKey.wifiKey.ssid, result.getWifiConfiguration().SSID); }",4e53e8d6e763aed06de4987fd6f740eb44fabacb,basicRecommendation(),228970,442,439
123192,build-system_builder-test-api_src_main_java_com_android_builder_testing_api_DeviceConfig.java,,,,"@com.android.annotations.NonNull public java.lang.String getConfigForAllAbis() { java.lang.StringBuilder completeConfig = new java.lang.StringBuilder(); com.google.common.base.Optional<java.lang.String> config = getValue(com.android.builder.testing.api.DeviceConfig.Catetory.CONFIG); com.google.common.base.Optional<java.lang.String> abi = getValue(com.android.builder.testing.api.DeviceConfig.Catetory.ABI); if (config.isPresent()) { completeConfig.append(config.get()); if (abi.isPresent()) { completeConfig.append("":""); } } if (abi.isPresent()) { completeConfig.append(abi.get()); } return completeConfig.toString(); }",f3c8493f5e19fba8ccb30d60def73cea20b76a36,,getConfigForAllAbis(),4,4,"@java.lang.Override @com.android.annotations.NonNull public java.lang.String getConfigForAllAbis() { java.lang.StringBuilder completeConfig = new java.lang.StringBuilder(); com.google.common.base.Optional<java.lang.String> config = getValue(com.android.builder.testing.api.DeviceConfig.Catetory.CONFIG); com.google.common.base.Optional<java.lang.String> abi = getValue(com.android.builder.testing.api.DeviceConfig.Catetory.ABI); if (config.isPresent()) { completeConfig.append(config.get()); if (abi.isPresent()) { completeConfig.append("":""); } } if (abi.isPresent()) { completeConfig.append(abi.get()); } return completeConfig.toString(); }",41f2d57e5b2fda91d97db6c82e8c4318f9d21142,getConfigForAllAbis(),158975,175,181
199631,jack-tests_src_com_android_jack_test_toolchain_AbstractTestTools.java,19.0,"private static java.lang.String getVersion(@javax.annotation.Nonnull java.lang.String name) { java.io.File prebuilt = com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt(name); java.util.jar.JarFile jarFile = null; try { jarFile = new java.util.jar.JarFile(prebuilt); java.util.zip.ZipEntry entry = jarFile.getEntry((name + ""-version.properties"")); java.io.InputStream is = jarFile.getInputStream(entry); com.android.sched.util.Version version = new com.android.sched.util.Version(is); return version.getVerboseVersion(); } catch (java.io.IOException e) { throw new com.android.jack.test.TestConfigurationException(e); } finally { if (jarFile != null) { try { jarFile.close(); } catch (java.io.IOException e) { } } } }",d893a8cc1de0f06a64559636c714c1d7f121bd28,"private static java.lang.String getVersion(@javax.annotation.Nonnull java.lang.String name) { java.io.InputStream is; java.lang.String versionFileName = name + ""-version.properties""; java.util.jar.JarFile jarFile = null; try { if (com.android.jack.test.toolchain.AbstractTestTools.isPrebuiltAvailable(name)) { java.io.File prebuilt = com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt(name); jarFile = new java.util.jar.JarFile(prebuilt); java.util.zip.ZipEntry entry = jarFile.getEntry(versionFileName); return new com.android.sched.util.Version(jarFile.getInputStream(entry)).getVerboseVersion(); } else { is = com.android.jack.test.toolchain.AbstractTestTools.class.getClassLoader().getResourceAsStream(versionFileName); if (is == null) { throw new com.android.jack.test.TestConfigurationException(((""Could not find '"" + versionFileName) + ""'"")); } return (new com.android.sched.util.Version(is).getVerboseVersion()) + ""(found on classpath)""; } } catch (java.io.IOException e) { throw new com.android.jack.test.TestConfigurationException(e); } finally { if (jarFile != null) { try { jarFile.close(); } catch (java.io.IOException e) { } } } }",0b20a46618986e306d0e26642904f0a1b42a7d15,getVersion(java.lang.String),getVersion(java.lang.String),8,20,"@javax.annotation.Nonnull private static java.lang.String getVersion(@javax.annotation.Nonnull java.lang.String name) { java.lang.String versionFileName = name + ""-version.properties""; java.io.InputStream is = null; java.util.jar.JarFile jarFile = null; try { if (com.android.jack.test.toolchain.AbstractTestTools.isPrebuiltAvailable(name)) { java.io.File prebuilt = com.android.jack.test.toolchain.AbstractTestTools.getPrebuilt(name); if (prebuilt.getName().endsWith("".jar"")) { jarFile = new java.util.jar.JarFile(prebuilt); java.util.zip.ZipEntry entry = jarFile.getEntry((name + ""-version.properties"")); is = jarFile.getInputStream(entry); com.android.sched.util.Version version = new com.android.sched.util.Version(is); return version.getVerboseVersion(); } else if (prebuilt.getName().endsWith(""jack"")) { return com.android.jack.test.toolchain.AbstractTestTools.getServerJackVersion(prebuilt); } else { java.lang.System.err.println(((((""Could not fetch version of prebuilt '"" + name) + ""': '"") + (prebuilt.getName())) + ""'"")); return ""<unknown>""; } } else { is = com.android.jack.test.toolchain.AbstractTestTools.class.getClassLoader().getResourceAsStream(versionFileName); if (is == null) { throw new com.android.jack.test.TestConfigurationException(((""Could not find '"" + versionFileName) + ""'"")); } return (new com.android.sched.util.Version(is).getVerboseVersion()) + "" (found on classpath)""; } } catch (java.io.IOException e) { throw new com.android.jack.test.TestConfigurationException(e); } finally { if (is != null) { try { is.close(); } catch (java.io.IOException e) { } } if (jarFile != null) { try { jarFile.close(); } catch (java.io.IOException e) { } } } }",7d83f99309e54db34a33068dc5c70b5a1811f4fc,getVersion(java.lang.String),106464,317,468
91995,luni_src_main_java_java_nio_IoVec.java,0.0,"int doTransfer(java.io.FileDescriptor fd) throws java.io.IOException { try { if ((direction) == (java.nio.IoVec.Direction.READV)) { int result = Libcore.os.readv(fd, ioBuffers, offsets, byteCounts); if (result == 0) { result = -1; } return result; } else { return Libcore.os.writev(fd, ioBuffers, offsets, byteCounts); } } catch (libcore.io.ErrnoException errnoException) { throw errnoException.rethrowAsIOException(); } }",c705f1178d0f2dc95c71438c900a679c2bee4167,"int doTransfer(java.io.FileDescriptor fd) throws java.io.IOException { try { if ((direction) == (java.nio.IoVec.Direction.READV)) { int result = Libcore.os.readv(fd, ioBuffers, offsets, byteCounts); if (result == 0) { result = -1; } return result; } else { return Libcore.os.writev(fd, ioBuffers, offsets, byteCounts); } } catch (android.os.ErrnoException errnoException) { throw errnoException.rethrowAsIOException(); } }",6dc3194593309fc11f15b3709529036dd88522bc,doTransfer(java.io.FileDescriptor),doTransfer(java.io.FileDescriptor),3,0,"int doTransfer(java.io.FileDescriptor fd) throws java.io.IOException { try { if ((direction) == (java.nio.IoVec.Direction.READV)) { int result = Libcore.os.readv(fd, ioBuffers, offsets, byteCounts); if (result == 0) { result = -1; } return result; } else { return Libcore.os.writev(fd, ioBuffers, offsets, byteCounts); } } catch (android.system.ErrnoException errnoException) { throw errnoException.rethrowAsIOException(); } }",02c8bde5a7c520bf287ee7ad2562dca83efbd12b,doTransfer(java.io.FileDescriptor),169696,127,127
81791,sdkmanager_app_src_test_java_com_android_sdkmanager_SdkManagerTest.java,6.0,"public void testDisplayAvdList_OneSnapshot() { com.android.sdkmanager.Main main = new com.android.sdkmanager.Main(); main.setLogger(getLog()); getAvdManager().createAvd(mAvdFolder, this.getName(), mTarget, SystemImage.DEFAULT_TAG, SdkConstants.ABI_ARMEABI, null, null, null, true, false, false, getLog()); getLog().clear(); main.displayAvdList(getAvdManager()); assertEquals((((((((((((""[P Available Android Virtual Devices:\n"" + "", P Name: "") + (this.getName())) + ""\n"") + "", P Path: "") + (mAvdFolder)) + ""\n"") + "", P Target: Android 0.0 (API level 0)\n"") + "", P Tag/ABI: default/armeabi\n"") + "", P Skin: HVGA\n"") + "", P Snapshot: true\n"") + ""]""), getLog().toString()); }",01d8802e0b0209fca730127b825b3a931506a3ec,"public void testDisplayAvdList_OneSnapshot() { com.android.sdkmanager.Main main = new com.android.sdkmanager.Main(); main.setLogger(getLog()); getAvdManager().createAvd(mAvdFolder, this.getName(), mTarget, SystemImage.DEFAULT_TAG, SdkConstants.ABI_ARMEABI, null, null, null, null, true, false, false, getLog()); getLog().clear(); main.displayAvdList(getAvdManager()); assertEquals((((((((((((""[P Available Android Virtual Devices:\n"" + "", P Name: "") + (this.getName())) + ""\n"") + "", P Path: "") + (mAvdFolder)) + ""\n"") + "", P Target: Android 0.0 (API level 0)\n"") + "", P Tag/ABI: default/armeabi\n"") + "", P Skin: HVGA\n"") + "", P Snapshot: true\n"") + ""]""), getLog().toString()); }",1f4e11e7093f21864774000f5dddde456928fa4a,testDisplayAvdList_OneSnapshot(),testDisplayAvdList_OneSnapshot(),4,6,"public void testDisplayAvdList_OneSnapshot() { com.android.sdkmanager.Main main = new com.android.sdkmanager.Main(); main.setLogger(getLog()); getAvdManager().createAvd(mAvdFolder, this.getName(), mTarget, SystemImage.DEFAULT_TAG, SdkConstants.ABI_ARMEABI, null, null, null, null, true, false, false, getLog()); getLog().clear(); main.displayAvdList(getAvdManager()); assertEquals(((((((((((""P Available Android Virtual Devices:\n"" + ""P Name: "") + (this.getName())) + ""\n"") + ""P Path: "") + (mAvdFolder)) + ""\n"") + ""P Target: Android 0.0 (API level 0)\n"") + ""P Tag/ABI: default/armeabi\n"") + ""P Skin: HVGA\n"") + ""P Snapshot: true\n""), getLog().toString()); }",cb5fb75fd92a3585786894c24d6041f13a44938b,testDisplayAvdList_OneSnapshot(),302710,225,215
91995,luni_src_main_java_libcore_io_Os.java,40.0,"public int ioctlInt(java.io.FileDescriptor fd, int cmd, libcore.util.MutableInt arg) throws libcore.io.ErrnoException;",7752b67cdcde536a9fb8ec70aae06473f5d8ea64,"public int ioctlInt(java.io.FileDescriptor fd, int cmd, android.util.MutableInt arg) throws android.os.ErrnoException;",25864fa1387258c2ec862504a31785400ee3bc0f,"ioctlInt(java.io.FileDescriptor,int,libcore.util.MutableInt)","ioctlInt(java.io.FileDescriptor,int,android.util.MutableInt)",3,28,"public int ioctlInt(java.io.FileDescriptor fd, int cmd, android.util.MutableInt arg) throws android.system.ErrnoException;",f09d6f3c385cef76d6e9324c93dad4d04c40f348,"ioctlInt(java.io.FileDescriptor,int,android.util.MutableInt)",170235,34,34
162712,jack_src_com_android_jack_transformations_enums_OptimizationUtil.java,0.0,"@javax.annotation.Nonnull public static java.lang.String getSyntheticSwitchMapInitializerName(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedEnum enumType) { java.lang.String enumName = com.android.jack.util.NamingTools.getValidName(com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter().getName(enumType)); java.lang.String methodName = com.android.jack.util.NamingTools.getNonSourceConflictingName(((""get"" + enumName) + (com.android.jack.transformations.enums.OptimizationUtil.Suffix))); return methodName; }",4242269e31a1dde422bb1b2a886a0bbc3cc6ba40,"@javax.annotation.Nonnull public static java.lang.String getSyntheticSwitchMapInitializerName(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedEnum enumType) { java.lang.String enumName = com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter().getName(enumType); return ((com.android.jack.transformations.enums.OptimizationUtil.LongerPrefix) + (enumName.replace(""/"", com.android.jack.transformations.enums.OptimizationUtil.ShorterPrefix))) + (com.android.jack.transformations.enums.OptimizationUtil.Suffix); }",41df036563149a379efe45a207decbaccb42f62b,getSyntheticSwitchMapInitializerName(com.android.jack.ir.ast.JDefinedEnum),getSyntheticSwitchMapInitializerName(com.android.jack.ir.ast.JDefinedEnum),4,0,"@javax.annotation.Nonnull public static java.lang.String getSyntheticSwitchMapInitializerName(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedEnum enumType) { java.lang.String enumName = com.android.jack.ir.formatter.BinaryQualifiedNameFormatter.getFormatter().getName(enumType); return com.android.jack.util.NamingTools.getStrictNonSourceConflictingName(((""get"" + enumName) + (com.android.jack.transformations.enums.OptimizationUtil.Suffix))); }",8eb0511c59a70852bc0ba3297b10b7ddf64a8c38,getSyntheticSwitchMapInitializerName(com.android.jack.ir.ast.JDefinedEnum),482123,140,120
146403,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_model_AndroidConfig.java,,,,com.android.build.gradle.ndk.managed.NdkConfig getNdk();,fc2f32eec419f5619e25c65392baa818fc2ed8c1,,getNdk(),11,43,com.android.build.gradle.managed.NdkConfig getNdk();,a07c7abf5f4205ae2b78225c31542fd407442ddc,getNdk(),236496,19,17
81416,tests_tests_renderscript_src_android_renderscript_cts_TestDegrees.java,,,,public void testDegrees() { checkDegreesFloat(); checkDegreesFloat2(); checkDegreesFloat3(); checkDegreesFloat4(); },2a46b177005698a4af6532a44da30cb22cee23a9,,testDegrees(),9,6,public void testDegrees() { checkDegreesFloatFloat(); checkDegreesFloat2Float2(); checkDegreesFloat3Float3(); checkDegreesFloat4Float4(); },99ae0e5e8db1e37393e039fccc01d1c57c4c6e3d,testDegrees(),142629,26,33
98434,java_src_main_java_com_google_protobuf_nano_Extension.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean equals(java.lang.Object obj) { if (obj == (this)) { return true; } if ((obj == null) || (!(getClass().equals(obj.getClass())))) { return false; } com.google.protobuf.nano.Extension ext = ((com.google.protobuf.nano.Extension) (obj)); return ((((tag) == (ext.tag)) && ((type) == (ext.type))) && ((repeated) == (ext.repeated))) && ((clazz) == (ext.clazz)); },721b98034ce34b0be07aa41cd8027a624f9dddf6,,equals(java.lang.Object),12,8,"void writeTo(java.lang.Object value, com.google.protobuf.nano.CodedOutputByteBufferNano output) throws java.io.IOException { if (repeated) { writeRepeatedData(value, output); } else { writeSingularData(value, output); } }",b202562a980671d8f6dfc9eb122cb3e41ac764fc,"writeTo(java.lang.Object,com.google.protobuf.nano.CodedOutputByteBufferNano)",80913,127,60
171840,hostsidetests_theme_src_android_theme_cts_ComparisonTask.java,1.0,"private static boolean compare(java.awt.image.BufferedImage reference, java.awt.image.BufferedImage generated, int threshold) { final int w = generated.getWidth(); final int h = generated.getHeight(); if ((w != (reference.getWidth())) || (h != (reference.getHeight()))) { return false; } for (int i = 0; i < w; i++) { for (int j = 0; j < h; j++) { final int p1 = reference.getRGB(i, j); final int p2 = generated.getRGB(i, j); final int dr = (p1 & 255) - (p2 & 255); final int dg = ((p1 & 65280) - (p2 & 65280)) >> 8; final int db = ((p1 & 16711680) - (p2 & 16711680)) >> 16; final int da = ((p1 & -16777216) - (p2 & -16777216)) >> 24; if (((((java.lang.Math.abs(db)) > threshold) || ((java.lang.Math.abs(dg)) > threshold)) || ((java.lang.Math.abs(dr)) > threshold)) || ((java.lang.Math.abs(da)) > threshold)) { return false; } } } return true; }",adf9b387a818ba54771ed3632ff91cb22968e1bd,"private static boolean compare(java.awt.image.BufferedImage reference, java.awt.image.BufferedImage generated, int threshold) { final int w = generated.getWidth(); final int h = generated.getHeight(); if ((w != (reference.getWidth())) || (h != (reference.getHeight()))) { return false; } final int tolerance = ((int) ((w * h) * (android.theme.cts.ComparisonTask.DIFFS_RATE))); int diffs = 0; for (int i = 0; i < w; i++) { for (int j = 0; j < h; j++) { final int p1 = reference.getRGB(i, j); final int p2 = generated.getRGB(i, j); final int a1 = (p1 & -16777216) >>> 24; final int a2 = (p2 & -16777216) >>> 24; final int dr = (((p1 & 255) * a1) - ((p2 & 255) * a2)) / 255; final int dg = ((((p1 & 65280) >> 8) * a1) - (((p2 & 65280) >> 8) * a2)) / 255; final int db = ((((p1 & 16711680) >> 16) * a1) - (((p2 & 16711680) >> 16) * a2)) / 255; if ((((java.lang.Math.abs(db)) > threshold) || ((java.lang.Math.abs(dg)) > threshold)) || ((java.lang.Math.abs(dr)) > threshold)) { diffs++; } } } if (diffs > tolerance) { return false; } return true; }",dc50c908fd5d1e327bb8c7b5cfb4d477394abf07,"compare(java.awt.image.BufferedImage,java.awt.image.BufferedImage,int)","compare(java.awt.image.BufferedImage,java.awt.image.BufferedImage,int)",3,5,"private static boolean compare(java.awt.image.BufferedImage reference, java.awt.image.BufferedImage generated, int threshold) { final int w = generated.getWidth(); final int h = generated.getHeight(); if ((w != (reference.getWidth())) || (h != (reference.getHeight()))) { return false; } for (int i = 0; i < w; i++) { for (int j = 0; j < h; j++) { final int p1 = reference.getRGB(i, j); final int p2 = generated.getRGB(i, j); final int dr = (android.theme.cts.ComparisonTask.getAlphaScaledRed(p1)) - (android.theme.cts.ComparisonTask.getAlphaScaledRed(p2)); final int dg = (android.theme.cts.ComparisonTask.getAlphaScaledGreen(p1)) - (android.theme.cts.ComparisonTask.getAlphaScaledGreen(p2)); final int db = (android.theme.cts.ComparisonTask.getAlphaScaledBlue(p1)) - (android.theme.cts.ComparisonTask.getAlphaScaledBlue(p2)); if ((((java.lang.Math.abs(db)) > threshold) || ((java.lang.Math.abs(dg)) > threshold)) || ((java.lang.Math.abs(dr)) > threshold)) { return false; } } } return true; }",6759cebadfdaaa3c803d9a05661c13437806cf5e,"compare(java.awt.image.BufferedImage,java.awt.image.BufferedImage,int)",274720,367,307
14340,src_com_android_settings_wifi_AdvancedSettings.java,6.0,private void refreshMacAddress() { android.net.wifi.WifiManager wifiManager = ((android.net.wifi.WifiManager) (getSystemService(com.android.settings.wifi.WIFI_SERVICE))); android.net.wifi.WifiInfo wifiInfo = wifiManager.getConnectionInfo(); android.preference.Preference wifiMacAddressPref = findPreference(com.android.settings.wifi.AdvancedSettings.KEY_MAC_ADDRESS); java.lang.String macAddress = (wifiInfo == null) ? null : wifiInfo.getMacAddress(); wifiMacAddressPref.setSummary((!(android.text.TextUtils.isEmpty(macAddress)) ? macAddress : getString(R.string.status_unavailable))); },7ee38fc1c1ad7cf8c18dbec343b74260034fb23d,"private void refreshWifiInfo() { android.net.wifi.WifiManager wifiManager = ((android.net.wifi.WifiManager) (getSystemService(com.android.settings.wifi.WIFI_SERVICE))); android.net.wifi.WifiInfo wifiInfo = wifiManager.getConnectionInfo(); android.preference.Preference wifiMacAddressPref = findPreference(com.android.settings.wifi.AdvancedSettings.KEY_MAC_ADDRESS); java.lang.String macAddress = (wifiInfo == null) ? null : wifiInfo.getMacAddress(); wifiMacAddressPref.setSummary((!(android.text.TextUtils.isEmpty(macAddress)) ? macAddress : getString(R.string.status_unavailable))); android.preference.Preference wifiIpAddressPref = findPreference(com.android.settings.wifi.AdvancedSettings.KEY_CURRENT_IP_ADDRESS); java.lang.String ipAddress = null; if (wifiInfo != null) { long addr = wifiInfo.getIpAddress(); if (addr != 0) { if (addr < 0) addr += 4294967296L; ipAddress = java.lang.String.format(""%d.%d.%d.%d\n"", (addr & 255), ((addr >> 8) & 255), ((addr >> 16) & 255), ((addr >> 24) & 255)); } } wifiIpAddressPref.setSummary((ipAddress == null ? getString(R.string.status_unavailable) : ipAddress)); }",f157654009af49b5166acc4fb7db111dd74ba2f0,refreshMacAddress(),refreshWifiInfo(),2,0,"private void refreshWifiInfo() { android.net.wifi.WifiManager wifiManager = ((android.net.wifi.WifiManager) (getSystemService(com.android.settings.wifi.WIFI_SERVICE))); android.net.wifi.WifiInfo wifiInfo = wifiManager.getConnectionInfo(); android.preference.Preference wifiMacAddressPref = findPreference(com.android.settings.wifi.AdvancedSettings.KEY_MAC_ADDRESS); java.lang.String macAddress = (wifiInfo == null) ? null : wifiInfo.getMacAddress(); wifiMacAddressPref.setSummary((!(android.text.TextUtils.isEmpty(macAddress)) ? macAddress : getString(R.string.status_unavailable))); android.preference.Preference wifiIpAddressPref = findPreference(com.android.settings.wifi.AdvancedSettings.KEY_CURRENT_IP_ADDRESS); java.lang.String ipAddress = null; if (wifiInfo != null) { long addr = wifiInfo.getIpAddress(); if (addr != 0) { if (addr < 0) addr += 4294967296L; ipAddress = java.lang.String.format(""%d.%d.%d.%d"", (addr & 255), ((addr >> 8) & 255), ((addr >> 16) & 255), ((addr >> 24) & 255)); } } wifiIpAddressPref.setSummary((ipAddress == null ? getString(R.string.status_unavailable) : ipAddress)); }",a5f8485bb04f460bc883056779c2c4bcc3972ef7,refreshWifiInfo(),242966,317,315
397660,tests_net_java_com_android_server_IpSecServiceTest.java,,,,"public void ipSecDeleteSecurityAssociation(int transformId, int direction, java.lang.String localAddress, java.lang.String remoteAddress, int spi) { }",82e73b77f4b36cdc25a3599ff27594e6f718c356,,"ipSecDeleteSecurityAssociation(int,int,java.lang.String,java.lang.String,int)",50,12,"@org.junit.Test public void testDeleteInvalidTransportModeTransform() throws java.lang.Exception { try { mIpSecService.deleteTransportModeTransform(1); fail(""IllegalArgumentException not thrown""); } catch (java.lang.IllegalArgumentException e) { } }",15cf77271490c3a5bb4758b5ac8074d6512c0d7e,testDeleteInvalidTransportModeTransform(),118535,37,55
48537,builder_src_main_java_com_android_builder_resources_ResourceMerger.java,8.0,"private void writeResource(java.io.File rootFolder, com.google.common.collect.ListMultimap<java.lang.String, com.android.builder.resources.Resource> valuesResMap, com.android.builder.resources.Resource resource) throws java.io.IOException { com.android.builder.resources.ResourceFile.FileType type = resource.getSource().getType(); if (type == (ResourceFile.FileType.MULTI)) { java.lang.String qualifier = resource.getSource().getQualifiers(); if (qualifier == null) { qualifier = """"; } valuesResMap.put(qualifier, resource); } else { if (resource.isTouched()) { com.android.builder.resources.ResourceFile resourceFile = resource.getSource(); java.io.File file = resourceFile.getFile(); java.lang.String filename = file.getName(); java.lang.String folderName = resource.getType().getName(); java.lang.String qualifiers = resourceFile.getQualifiers(); if ((qualifiers != null) && ((qualifiers.length()) > 0)) { folderName = (folderName + (com.android.SdkConstants.RES_QUALIFIER_SEP)) + qualifiers; } java.io.File typeFolder = new java.io.File(rootFolder, folderName); if (!(typeFolder.isDirectory())) { typeFolder.mkdirs(); } java.io.File outFile = new java.io.File(typeFolder, filename); com.google.common.io.Files.copy(file, outFile); } } }",0dad490895f806d21ae4442aad6dc5014f4f4d4f,"private void writeResource(java.io.File rootFolder, com.google.common.collect.ListMultimap<java.lang.String, com.android.builder.resources.Resource> valuesResMap, com.android.builder.resources.Resource resource) throws java.io.IOException { com.android.builder.resources.ResourceFile.FileType type = resource.getSource().getType(); if (type == (ResourceFile.FileType.MULTI)) { java.lang.String qualifier = resource.getSource().getQualifiers(); if (qualifier == null) { qualifier = """"; } valuesResMap.put(qualifier, resource); } else { if (resource.isTouched()) { com.android.builder.resources.ResourceFile resourceFile = resource.getSource(); java.io.File file = resourceFile.getFile(); java.lang.String filename = file.getName(); java.lang.String folderName = resource.getType().getName(); java.lang.String qualifiers = resourceFile.getQualifiers(); if ((qualifiers != null) && ((qualifiers.length()) > 0)) { folderName = (folderName + (com.android.SdkConstants.RES_QUALIFIER_SEP)) + qualifiers; } java.io.File typeFolder = new java.io.File(rootFolder, folderName); if (!(typeFolder.isDirectory())) { if (!(typeFolder.mkdirs())) { throw new java.io.IOException((""Failed to create directory "" + typeFolder)); } } java.io.File outFile = new java.io.File(typeFolder, filename); com.google.common.io.Files.copy(file, outFile); } } }",98f326ba16109d3760af6b5e39402e3acd9fb579,"writeResource(java.io.File,com.google.common.collect.ListMultimap,com.android.builder.resources.Resource)","writeResource(java.io.File,com.google.common.collect.ListMultimap,com.android.builder.resources.Resource)",4,9,"private void writeResource(java.io.File rootFolder, com.google.common.collect.ListMultimap<java.lang.String, com.android.builder.resources.Resource> valuesResMap, com.android.builder.resources.Resource resource) throws java.io.IOException { com.android.builder.resources.ResourceFile.FileType type = resource.getSource().getType(); if (type == (ResourceFile.FileType.MULTI)) { java.lang.String qualifier = resource.getSource().getQualifiers(); if (qualifier == null) { qualifier = """"; } valuesResMap.put(qualifier, resource); } else { if (resource.isTouched()) { com.android.builder.resources.ResourceFile resourceFile = resource.getSource(); java.io.File file = resourceFile.getFile(); java.lang.String filename = file.getName(); java.lang.String folderName = resource.getType().getName(); java.lang.String qualifiers = resourceFile.getQualifiers(); if ((qualifiers != null) && ((qualifiers.length()) > 0)) { folderName = (folderName + (com.android.SdkConstants.RES_QUALIFIER_SEP)) + qualifiers; } java.io.File typeFolder = new java.io.File(rootFolder, folderName); com.android.builder.resources.ResourceMerger.createDir(typeFolder); java.io.File outFile = new java.io.File(typeFolder, filename); com.google.common.io.Files.copy(file, outFile); } } }",ba72b389c6991cb72044ef8eaa9b6759073bd7bc,"writeResource(java.io.File,com.google.common.collect.ListMultimap,com.android.builder.resources.Resource)",464529,352,333
321349,tools_dexfuzz_src_dexfuzz_fuzzers_Fuzzer.java,9.0,private boolean checkGoldenExecutorForSelfDivergence(java.lang.String programName) { java.lang.String seenOutput = null; for (int i = 0; i < 5; i++) { goldenExecutor.reset(); goldenExecutor.execute(programName); java.lang.String output = goldenExecutor.getResult().getFlattenedOutput(); if (seenOutput == null) { seenOutput = output; } else if (!(seenOutput.equals(output))) { return true; } } return false; },e586445ddc61ba2133297ba55693c7f0204ace93,private boolean checkGoldenExecutorForSelfDivergence(java.lang.String programName) { java.lang.String seenOutput = null; for (int i = 0; i < (dexfuzz.Options.divergenceRetry); i++) { goldenExecutor.reset(); goldenExecutor.execute(programName); java.lang.String output = goldenExecutor.getResult().getFlattenedOutput(); if (seenOutput == null) { seenOutput = output; } else if (!(seenOutput.equals(output))) { return true; } } return false; },009c08677c8adc3b112e1d5091550c6d0d42863c,checkGoldenExecutorForSelfDivergence(java.lang.String),checkGoldenExecutorForSelfDivergence(java.lang.String),2,9,private boolean checkGoldenExecutorForSelfDivergence(java.lang.String programName) { java.lang.String seenOutput = null; for (int i = 0; i < ((dexfuzz.Options.divergenceRetry) + 1); i++) { goldenExecutor.reset(); goldenExecutor.execute(programName); java.lang.String output = goldenExecutor.getResult().getFlattenedOutput(); if (seenOutput == null) { seenOutput = output; } else if (!(seenOutput.equals(output))) { return true; } } return false; },18df3172bf8f6626d0978c379b50ad7ed53cd84c,checkGoldenExecutorForSelfDivergence(java.lang.String),400684,125,128
107330,build-system_gradle_src_main_groovy_com_android_build_gradle_internal_model_ProductFlavorContainerImpl.java,1.0,"@com.android.annotations.NonNull static com.android.builder.model.ProductFlavorContainer createPFC(@com.android.annotations.NonNull com.android.build.gradle.internal.ProductFlavorData productFlavorData, @com.android.annotations.NonNull java.util.Collection<com.android.builder.model.SourceProviderContainer> sourceProviderContainers) { java.util.List<com.android.builder.model.SourceProviderContainer> clonedContainer = com.android.build.gradle.internal.model.SourceProviderContainerImpl.cloneCollection(sourceProviderContainers); com.android.builder.model.SourceProviderContainer testASP = com.android.build.gradle.internal.model.SourceProviderContainerImpl.create(com.android.build.gradle.internal.model.ARTIFACT_ANDROID_TEST, productFlavorData.getTestSourceSet()); clonedContainer.add(testASP); return new com.android.build.gradle.internal.model.ProductFlavorContainerImpl(com.android.build.gradle.internal.model.ProductFlavorImpl.cloneFlavor(productFlavorData.getProductFlavor(), null, null), com.android.build.gradle.internal.model.SourceProviderImpl.cloneProvider(productFlavorData.getSourceSet()), clonedContainer); }",c2cdb7014e19c285fa9f0ce06530a2bae613517d,"@com.android.annotations.NonNull static com.android.builder.model.ProductFlavorContainer createPFC(@com.android.annotations.NonNull com.android.build.gradle.internal.ProductFlavorData productFlavorData, @com.android.annotations.NonNull java.util.Collection<com.android.builder.model.SourceProviderContainer> sourceProviderContainers) { java.util.List<com.android.builder.model.SourceProviderContainer> clonedContainer = com.android.build.gradle.internal.model.SourceProviderContainerImpl.cloneCollection(sourceProviderContainers); com.android.builder.model.SourceProviderContainer testASP = com.android.build.gradle.internal.model.SourceProviderContainerImpl.create(com.android.build.gradle.internal.model.ARTIFACT_ANDROID_TEST, productFlavorData.getTestSourceSet()); clonedContainer.add(testASP); return new com.android.build.gradle.internal.model.ProductFlavorContainerImpl(com.android.build.gradle.internal.model.ProductFlavorImpl.cloneFlavor(productFlavorData.getProductFlavor(), null, null, null), com.android.build.gradle.internal.model.SourceProviderImpl.cloneProvider(productFlavorData.getSourceSet()), clonedContainer); }",10b51a0a21c025d4cb69fdff8e8ae2ad94255dbe,"createPFC(com.android.build.gradle.internal.ProductFlavorData,java.util.Collection)","createPFC(com.android.build.gradle.internal.ProductFlavorData,java.util.Collection)",4,1,"@com.android.annotations.NonNull static com.android.builder.model.ProductFlavorContainer createPFC(@com.android.annotations.NonNull com.android.build.gradle.internal.ProductFlavorData productFlavorData, @com.android.annotations.NonNull java.util.Collection<com.android.builder.model.SourceProviderContainer> sourceProviderContainers) { java.util.List<com.android.builder.model.SourceProviderContainer> clonedContainer = com.android.build.gradle.internal.model.SourceProviderContainerImpl.cloneCollection(sourceProviderContainers); com.android.builder.model.SourceProviderContainer testASP = com.android.build.gradle.internal.model.SourceProviderContainerImpl.create(com.android.build.gradle.internal.model.ARTIFACT_ANDROID_TEST, productFlavorData.getTestSourceSet()); clonedContainer.add(testASP); return new com.android.build.gradle.internal.model.ProductFlavorContainerImpl(com.android.build.gradle.internal.model.ProductFlavorImpl.cloneFlavor(productFlavorData.getProductFlavor(), null, null), com.android.build.gradle.internal.model.SourceProviderImpl.cloneProvider(productFlavorData.getSourceSet()), clonedContainer); }",c2cdb7014e19c285fa9f0ce06530a2bae613517d,"createPFC(com.android.build.gradle.internal.ProductFlavorData,java.util.Collection)",63172,276,274
48178,src_com_android_mms_ui_IconListAdapter.java,4.0,"@java.lang.Override public android.view.View getView(int position, android.view.View convertView, android.view.ViewGroup parent) { android.widget.TextView text; android.widget.ImageView image; android.view.View view; if (convertView == null) { view = mInflater.inflate(com.android.mms.ui.IconListAdapter.mResource, parent, false); } else { view = convertView; } text = ((android.widget.TextView) (view.findViewById(R.id.text1))); text.setText(getItem(position).getTitle()); image = ((android.widget.ImageView) (view.findViewById(R.id.icon))); image.setImageResource(getItem(position).getResource()); return view; }",05704df6a2a41610f402f15847258f12cee0aea2,"@java.lang.Override public android.view.View getView(int position, android.view.View convertView, android.view.ViewGroup parent) { android.view.View view; if (convertView == null) { view = mInflater.inflate(com.android.mms.ui.IconListAdapter.mResource, parent, false); holder = new com.android.mms.ui.IconListAdapter.ViewHolder(view); view.setTag(holder); } else { view = convertView; holder = ((com.android.mms.ui.IconListAdapter.ViewHolder) (view.getTag())); } android.widget.TextView text = holder.getTextView(); text.setText(getItem(position).getTitle()); android.widget.ImageView image = holder.getImageView(); image.setImageResource(getItem(position).getResource()); return view; }",3b1ba0970a7ebd51027302fbea1c51a7dc600d7b,"getView(int,android.view.View,android.view.ViewGroup)","getView(int,android.view.View,android.view.ViewGroup)",5,4,"@java.lang.Override public android.view.View getView(int position, android.view.View convertView, android.view.ViewGroup parent) { android.view.View view; if (convertView == null) { view = mInflater.inflate(com.android.mms.ui.IconListAdapter.mResource, parent, false); mViewHolder = new com.android.mms.ui.IconListAdapter.ViewHolder(view); view.setTag(mViewHolder); } else { view = convertView; mViewHolder = ((com.android.mms.ui.IconListAdapter.ViewHolder) (view.getTag())); } android.widget.TextView text = mViewHolder.getTextView(); text.setText(getItem(position).getTitle()); android.widget.ImageView image = mViewHolder.getImageView(); image.setImageResource(getItem(position).getResource()); return view; }",5de990b42f54df6cbfcd13bf98a348de9ef55b16,"getView(int,android.view.View,android.view.ViewGroup)",443864,176,181
684867,src_com_android_bluetooth_btservice_ActiveDeviceManager.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onAudioDevicesRemoved(android.media.AudioDeviceInfo[] removedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, ""onAudioDevicesRemoved""); } boolean wasWiredAudioDeviceRemoved = false; for (android.media.AudioDeviceInfo deviceInfo : removedDevices) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, (((""Audio device removed: "" + (deviceInfo.getProductName())) + "" type: "") + (deviceInfo.getType()))); } if (isWiredHeadset(deviceInfo)) { wasWiredAudioDeviceRemoved = true; break; } } if (!wasWiredAudioDeviceRemoved) { return; } boolean hasConnectedWiredDevice = false; android.media.AudioDeviceInfo[] devices = mAudioManager.getDevices(AudioManager.GET_DEVICES_OUTPUTS); for (android.media.AudioDeviceInfo deviceInfo : devices) { if (isWiredHeadset(deviceInfo)) { if (com.android.bluetooth.btservice.ActiveDeviceManager.DBG) { android.util.Log.d(com.android.bluetooth.btservice.ActiveDeviceManager.TAG, (((""Found connected wired device: "" + (deviceInfo.getProductName())) + "" type: "") + (deviceInfo.getType()))); } hasConnectedWiredDevice = true; break; } } if (!hasConnectedWiredDevice) { allWiredAudioDevicesDisconnected(); } }",1e935b11693569fc60f34f303058b2e41a49fe94,,onAudioDevicesRemoved(android.media.AudioDeviceInfo[]),6,12,@java.lang.Override public void onAudioDevicesRemoved(android.media.AudioDeviceInfo[] removedDevices) { },431b6ffc078cf2b46beb0369d2e302ef18e3883d,onAudioDevicesRemoved(android.media.AudioDeviceInfo[]),400715,378,26
81293,src_com_google_gct_intellij_endpoints_validation_ApiNamespaceInspection.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void addOwnerDomainAndNameAttributes(@org.jetbrains.annotations.NotNull final com.intellij.openapi.project.Project project) { new com.intellij.openapi.command.WriteCommandAction(project, annotation.getContainingFile()) { @java.lang.Override protected void run(final com.intellij.openapi.application.Result result) throws java.lang.Throwable { java.lang.String annotationString = (((((((""@A("" + (com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_NAME_ATTRIBUTE)) + "" = \"""") + (com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.MyQuickFix.SUGGESTED_OWNER_ATTRIBUTE)) + ""\"", "") + (com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_DOMAIN_ATTRIBUTE)) + "" = \"""") + ""your-company.com"") + ""\"")""; com.intellij.psi.PsiAnnotation newAnnotation = com.intellij.psi.JavaPsiFacade.getInstance(project).getElementFactory().createAnnotationFromText(annotationString, null); com.intellij.psi.PsiAnnotationMemberValue newDomainMemberValue = newAnnotation.findDeclaredAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_DOMAIN_ATTRIBUTE); com.intellij.psi.PsiAnnotationMemberValue newNameMemberValue = newAnnotation.findDeclaredAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_NAME_ATTRIBUTE); annotation.setDeclaredAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_NAME_ATTRIBUTE, newNameMemberValue); annotation.setDeclaredAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_DOMAIN_ATTRIBUTE, newDomainMemberValue); } }.execute(); }",580928c9a6ad5a998c2d9cf076191edf696c34f6,,addOwnerDomainAndNameAttributes(com.intellij.openapi.project.Project),2,3,"private void addOwnerDomainAndNameAttributes(@org.jetbrains.annotations.NotNull final com.intellij.openapi.project.Project project, final com.intellij.psi.PsiAnnotation annotation) { new com.intellij.openapi.command.WriteCommandAction(project, annotation.getContainingFile()) { @java.lang.Override protected void run(final com.intellij.openapi.application.Result result) throws java.lang.Throwable { java.lang.String annotationString = (((((((""@A("" + (com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_NAME_ATTRIBUTE)) + "" = \"""") + (com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.MyQuickFix.SUGGESTED_OWNER_ATTRIBUTE)) + ""\"", "") + (com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_DOMAIN_ATTRIBUTE)) + "" = \"""") + ""your-company.com"") + ""\"")""; com.intellij.psi.PsiAnnotation newAnnotation = com.intellij.psi.JavaPsiFacade.getInstance(project).getElementFactory().createAnnotationFromText(annotationString, null); com.intellij.psi.PsiAnnotationMemberValue newDomainMemberValue = newAnnotation.findDeclaredAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_DOMAIN_ATTRIBUTE); com.intellij.psi.PsiAnnotationMemberValue newNameMemberValue = newAnnotation.findDeclaredAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_NAME_ATTRIBUTE); annotation.setDeclaredAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_NAME_ATTRIBUTE, newNameMemberValue); annotation.setDeclaredAttributeValue(com.google.gct.intellij.endpoints.validation.ApiNamespaceInspection.API_NAMESPACE_DOMAIN_ATTRIBUTE, newDomainMemberValue); } }.execute(); }",9c0a90f1d73831dedd5720cb36571e36d0e19e93,"addOwnerDomainAndNameAttributes(com.intellij.openapi.project.Project,com.intellij.psi.PsiAnnotation)",24842,434,447
131660,jack-tests_tests_com_android_jack_shrob_ObfuscationWithMappingTests.java,1.0,"@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir((""com.android.jack.shrob.test"" + testNumber)); com.android.jack.test.toolchain.JackApiToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackApiToolchain.class); com.android.jack.shrob.spec.Flags flags = new com.android.jack.shrob.spec.Flags(); toolchain.setShrobFlags(flags); com.android.jack.shrob.proguard.GrammarActions.parse((""proguard.flags"" + flagNumber), testFolder.getAbsolutePath(), flags); java.io.File candidateOutputMapping = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""mapping"", "".txt""); java.io.File refFolder = new java.io.File(testFolder, ""refsObfuscationWithMapping""); java.io.File refOutputMapping = new java.io.File(refFolder, ((""expected-"" + flagNumber) + "".txt"")); flags.setOutputMapping(candidateOutputMapping); flags.setPrintMapping(true); java.io.File inputMapping = new java.io.File(testFolder, (((""proguard.flags"" + flagNumber) + "".mapping"") + mappingNumber)); if (inputMapping.exists()) { flags.setObfuscationMapping(inputMapping); } com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, ""jack"")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorMapping(candidateOutputMapping, refOutputMapping)); }",79fbec748264e476fb2f0f09c92d8457a49263a2,"@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir((""com.android.jack.shrob.test"" + testNumber)); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File candidateOutputMapping = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""mapping"", "".txt""); java.io.File refFolder = new java.io.File(testFolder, ""refsObfuscationWithMapping""); java.io.File refOutputMapping = new java.io.File(refFolder, ((""expected-"" + flagNumber) + "".txt"")); java.io.File inputMapping = new java.io.File(testFolder, (((""proguard.flags"" + flagNumber) + "".mapping"") + mappingNumber)); java.io.File proguardFlagsFile = addOptionsToFlagsFile(new java.io.File(testFolder, (""proguard.flags"" + flagNumber)), testFolder, (((""-printmapping "" + (candidateOutputMapping.getAbsolutePath())) + "" -applymapping "") + (inputMapping.getAbsolutePath()))); toolchain.addProguardFlags(proguardFlagsFile); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, ""jack"")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorMapping(candidateOutputMapping, refOutputMapping)); }",90ba7c99d5497c1b67ee2cedcaf1741828c8cb87,"runTest(java.lang.String,java.lang.String,java.lang.String)","runTest(java.lang.String,java.lang.String,java.lang.String)",11,1,"@java.lang.Override protected void runTest(@javax.annotation.Nonnull java.lang.String testNumber, @javax.annotation.Nonnull java.lang.String flagNumber, @javax.annotation.Nonnull java.lang.String mappingNumber) throws java.lang.Exception { java.io.File testFolder = com.android.jack.test.toolchain.AbstractTestTools.getTestRootDir((""com.android.jack.shrob.test"" + testNumber)); com.android.jack.test.toolchain.JackBasedToolchain toolchain = com.android.jack.test.toolchain.AbstractTestTools.getCandidateToolchain(com.android.jack.test.toolchain.JackBasedToolchain.class); java.io.File candidateOutputMapping = com.android.jack.test.toolchain.AbstractTestTools.createTempFile(""mapping"", "".txt""); java.io.File refFolder = new java.io.File(testFolder, ""refsObfuscationWithMapping""); java.io.File refOutputMapping = new java.io.File(refFolder, ((""expected-"" + flagNumber) + "".txt"")); java.io.File inputMapping = new java.io.File(testFolder, (((""proguard.flags"" + flagNumber) + "".mapping"") + mappingNumber)); java.lang.String extraOptions = "" -printmapping "" + (candidateOutputMapping.getAbsolutePath()); if (inputMapping.exists()) { extraOptions += "" -applymapping "" + (inputMapping.getAbsolutePath()); } java.io.File proguardFlagsFile = addOptionsToFlagsFile(new java.io.File(testFolder, (""proguard.flags"" + flagNumber)), testFolder, extraOptions); toolchain.addProguardFlags(proguardFlagsFile); com.android.jack.test.helper.SourceToDexComparisonTestHelper env = new com.android.jack.test.helper.SourceToDexComparisonTestHelper(new java.io.File(testFolder, ""jack"")); env.setCandidateTestTools(toolchain); env.setReferenceTestTools(new com.android.jack.test.toolchain.DummyToolchain()); env.runTest(new com.android.jack.test.comparator.ComparatorMapping(candidateOutputMapping, refOutputMapping)); }",c45864e0daaf7d23710d392ca5f5fbc55e6f7f0c,"runTest(java.lang.String,java.lang.String,java.lang.String)",181539,472,491
91995,luni_src_main_java_libcore_io_Os.java,29.0,"public void fchown(java.io.FileDescriptor fd, int uid, int gid) throws libcore.io.ErrnoException;",d2064ca01ba652909a21ca4e2a009890e6e81b31,"public void fchown(java.io.FileDescriptor fd, int uid, int gid) throws android.os.ErrnoException;",7df113af2c498a993c093ee88f800842a1080687,"fchown(java.io.FileDescriptor,int,int)","fchown(java.io.FileDescriptor,int,int)",3,27,"public void fchown(java.io.FileDescriptor fd, int uid, int gid) throws android.system.ErrnoException;",9dd5e0f1932d5b30f69c810635e776b43c79228e,"fchown(java.io.FileDescriptor,int,int)",170208,29,29
215173,sched_src_com_android_sched_util_file_ReaderFile.java,1.0,"@java.lang.Override @javax.annotation.Nonnull public synchronized com.android.sched.util.stream.ExtendedBufferedReader getBufferedReader() { wasUsed = true; if ((reader) == null) { clearRemover(); try { reader = new com.android.sched.util.stream.ExtendedBufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), charset), bufferSize); fromFile = true; } catch (java.io.FileNotFoundException e) { throw new com.android.sched.util.ConcurrentIOException(e); } } return reader; }",a0b205bea8ce7492da4ef7fff14423b0e028280b,"@java.lang.Override @javax.annotation.Nonnull public synchronized java.io.BufferedReader getBufferedReader() { wasUsed = true; if ((reader) == null) { clearRemover(); try { this.stream = new com.android.sched.util.stream.IsClosedInputStream(new java.io.FileInputStream(file)); this.reader = new java.io.BufferedReader(new java.io.InputStreamReader(((java.io.InputStream) (this.stream)), charset), bufferSize); } catch (java.io.FileNotFoundException e) { throw new com.android.sched.util.ConcurrentIOException(e); } } return reader; }",48b020a927126ab0f728c00a2fda7b63d43845d9,getBufferedReader(),getBufferedReader(),5,1,"@java.lang.Override @javax.annotation.Nonnull public synchronized java.io.BufferedReader getBufferedReader() { wasUsed = true; if ((reader) == null) { clearRemover(); try { this.stream = new com.android.sched.util.stream.QueryableInputStream(new java.io.FileInputStream(file)); this.reader = new java.io.BufferedReader(new java.io.InputStreamReader(((java.io.InputStream) (this.stream)), charset), bufferSize); } catch (java.io.FileNotFoundException e) { throw new com.android.sched.util.ConcurrentIOException(e); } } return reader; }",129bb388f74dea6ad21d90b81b26a84570b0b053,getBufferedReader(),66194,139,139
118981,jack_src_com_android_jack_incremental_IncrementalInputFilter.java,,,,@javax.annotation.Nonnull private java.util.Set<java.lang.String> getDeleteFileNames(@javax.annotation.Nonnull java.util.Set<java.lang.String> javaFileNames) { assert (fileDependencies) != null; java.util.Set<java.lang.String> deletedFileNames = new java.util.HashSet<java.lang.String>(); for (java.lang.String javaFileName : fileDependencies.getCompiledJavaFiles()) { if (!(javaFileNames.contains(javaFileName))) { deletedFileNames.add(javaFileName); } } return deletedFileNames; },c1cbd8cd44a10554cc689b27c674825dbc3a1e99,,getDeleteFileNames(java.util.Set),7,5,"@javax.annotation.Nonnull private com.android.jack.analysis.dependency.type.TypeDependencies getTypeDependencies(@javax.annotation.Nonnull com.android.jack.library.InputJackLibrary library) throws com.android.jack.library.FileTypeDoesNotExistException, com.android.sched.util.file.CannotReadException { com.android.sched.vfs.InputVFile typeDependenciesVFile = library.getFile(FileType.DEPENDENCIES, TypeDependencies.vpath); com.android.jack.analysis.dependency.type.TypeDependencies typeDependencies = new com.android.jack.analysis.dependency.type.TypeDependencies(); java.io.InputStreamReader fileReader = null; try { fileReader = new java.io.InputStreamReader(typeDependenciesVFile.openRead()); typeDependencies.read(fileReader); } catch (java.io.IOException e) { throw new com.android.sched.util.file.CannotReadException(typeDependenciesVFile.getLocation(), e); } finally { if (fileReader != null) { try { fileReader.close(); } catch (java.io.IOException e) { } } } return typeDependencies; }",bf50b32a6637e7fd35ec4b90b25dea5aa6200436,getTypeDependencies(com.android.jack.library.InputJackLibrary),148969,132,247
558960,src_java_com_android_internal_telephony_uicc_UiccProfile.java,9.0,public boolean areCarrierPriviligeRulesLoaded() { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return (carrierPrivilegeRules == null) || (carrierPrivilegeRules.areCarrierPriviligeRulesLoaded()); },5c007375bd682838fdb44fbe731805ed0bed1000,"public boolean areCarrierPriviligeRulesLoaded() { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); log((""carrierPrivilegeRules"" + carrierPrivilegeRules)); return (carrierPrivilegeRules == null) || (carrierPrivilegeRules.areCarrierPriviligeRulesLoaded()); }",8dcab33d9ad44e2baa767baffbb2a8c97d59cb15,areCarrierPriviligeRulesLoaded(),areCarrierPriviligeRulesLoaded(),8,9,public boolean areCarrierPriviligeRulesLoaded() { com.android.internal.telephony.uicc.UiccCarrierPrivilegeRules carrierPrivilegeRules = getCarrierPrivilegeRules(); return (carrierPrivilegeRules == null) || (carrierPrivilegeRules.areCarrierPriviligeRulesLoaded()); },5c007375bd682838fdb44fbe731805ed0bed1000,areCarrierPriviligeRulesLoaded(),47956,81,65
253791,luni_src_main_java_libcore_io_Os.java,41.0,"public void execve(java.lang.String filename, java.lang.String[] argv, java.lang.String[] envp) throws android.system.ErrnoException;",b63b64324c8d9c83a84c3c3f33ea322fa4cb0e91,"public void execve(java.lang.String filename, java.lang.String[] argv, java.lang.String[] envp) throws libcore.io.ErrnoException;",8bbb6a46e19beb6cc2b12637fb02acf4d9cbb721,"execve(java.lang.String,java.lang.String[],java.lang.String[])","execve(java.lang.String,java.lang.String[],java.lang.String[])",8,40,"public void execve(java.lang.String filename, java.lang.String[] argv, java.lang.String[] envp) throws android.system.ErrnoException;",b63b64324c8d9c83a84c3c3f33ea322fa4cb0e91,"execve(java.lang.String,java.lang.String[],java.lang.String[])",494634,39,38
91995,luni_src_main_java_libcore_io_Os.java,62.0,"public int pwrite(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, long offset) throws java.io.InterruptedIOException, libcore.io.ErrnoException;",29de3fa74b97e51e0258f97a32fb2deab7a45048,"public int pwrite(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, long offset) throws android.os.ErrnoException, java.io.InterruptedIOException;",da002d114b3708b548fe6c1c443033aa89c415fd,"pwrite(java.io.FileDescriptor,java.nio.ByteBuffer,long)","pwrite(java.io.FileDescriptor,java.nio.ByteBuffer,long)",3,61,"public int pwrite(java.io.FileDescriptor fd, java.nio.ByteBuffer buffer, long offset) throws android.system.ErrnoException, java.io.InterruptedIOException;",daaed9d524c4e192361bbe3b15c81a2df8cef99a,"pwrite(java.io.FileDescriptor,java.nio.ByteBuffer,long)",170172,38,38
73092,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_launch_AndroidLaunchController.java,36.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.android.annotations.Nullable public static com.android.ddmlib.IDevice getDeviceIfOnline(@com.android.annotations.Nullable java.lang.String serial, @com.sun.istack.internal.NotNull com.android.ddmlib.IDevice[] onlineDevices) { if (serial == null) { return null; } for (com.android.ddmlib.IDevice device : onlineDevices) { if ((serial.equals(device.getAvdName())) || (serial.equals(device.getSerialNumber()))) { return device; } } return null; }",5758384b00f766fdc464d802b3d3c395e2564906,,"getDeviceIfOnline(java.lang.String,com.android.ddmlib.IDevice[])",2,43,"@com.android.annotations.Nullable public static com.android.ddmlib.IDevice getDeviceIfOnline(@com.android.annotations.Nullable java.lang.String serial, @com.android.annotations.NonNull com.android.ddmlib.IDevice[] onlineDevices) { if (serial == null) { return null; } for (com.android.ddmlib.IDevice device : onlineDevices) { if ((serial.equals(device.getAvdName())) || (serial.equals(device.getSerialNumber()))) { return device; } } return null; }",2263b9fd5a32797e9314fa0df0b2f8fb9ce47941,"getDeviceIfOnline(java.lang.String,com.android.ddmlib.IDevice[])",454179,129,126
50953,sdklib_src_main_java_com_android_sdklib_internal_repository_packages_BuildToolPackage.java,,,,"@java.lang.Override public boolean sameItemAs(java.lang.Package pkg, boolean ignorePreviews) { if (pkg instanceof com.android.sdklib.internal.repository.packages.BuildToolPackage) { com.android.sdklib.internal.repository.packages.BuildToolPackage rhs = ((com.android.sdklib.internal.repository.packages.BuildToolPackage) (pkg)); return (rhs.getRevision().compareTo(getRevision(), ignorePreviews)) == 0; } return false; }",0a60986d2b7fb2e7e11346943dc9a0ab9439a4da,,"sameItemAs(java.lang.Package,boolean)",5,2,"@java.lang.Override public boolean sameItemAs(java.lang.Package pkg, com.android.sdklib.internal.repository.packages.FullRevision.PreviewComparison comparePreview) { if (pkg instanceof com.android.sdklib.internal.repository.packages.BuildToolPackage) { com.android.sdklib.internal.repository.packages.BuildToolPackage rhs = ((com.android.sdklib.internal.repository.packages.BuildToolPackage) (pkg)); return (rhs.getRevision().compareTo(getRevision(), comparePreview)) == 0; } return false; }",17b7a2a8e200ab97177fdf6ac589247c39a9242b,"sameItemAs(java.lang.Package,com.android.sdklib.internal.repository.packages.FullRevision.PreviewComparison)",222140,108,123
162651,ddmlib_src_main_java_com_android_ddmlib_IDevice.java,0.0,"void executeShellCommand(java.lang.String command, com.android.ddmlib.IShellOutputReceiver receiver) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException;",1d72590779cd8f957cdacef8b85d745446da2e03,"void executeShellCommand(java.lang.String command, com.android.ddmlib.IShellOutputReceiver receiver) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException, java.lang.InterruptedException;",7eeeeb0e78b56930aec85c47749a26136cdb91b9,"executeShellCommand(java.lang.String,com.android.ddmlib.IShellOutputReceiver)","executeShellCommand(java.lang.String,com.android.ddmlib.IShellOutputReceiver)",4,0,"void executeShellCommand(java.lang.String command, com.android.ddmlib.IShellOutputReceiver receiver) throws com.android.ddmlib.AdbCommandRejectedException, com.android.ddmlib.ShellCommandUnresponsiveException, com.android.ddmlib.TimeoutException, java.io.IOException;",1d72590779cd8f957cdacef8b85d745446da2e03,"executeShellCommand(java.lang.String,com.android.ddmlib.IShellOutputReceiver)",352923,79,72
273789,service_java_com_android_server_wifi_WifiNative.java,47.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public boolean equals(java.lang.Object otherObj) { if ((this) == otherObj) { return true; } else if ((otherObj == null) || ((getClass()) != (otherObj.getClass()))) { return false; } com.android.server.wifi.WifiNative.HiddenNetwork other = ((com.android.server.wifi.WifiNative.HiddenNetwork) (otherObj)); return (java.util.Objects.equals(ssid, other.ssid)) && ((priority) == (other.priority)); }",201f45b02fe570d7d6a3a28667276ae48b0e894e,,equals(java.lang.Object),8,36,"@java.lang.Override public boolean equals(java.lang.Object otherObj) { if ((this) == otherObj) { return true; } else if ((otherObj == null) || ((getClass()) != (otherObj.getClass()))) { return false; } com.android.server.wifi.WifiNative.HiddenNetwork other = ((com.android.server.wifi.WifiNative.HiddenNetwork) (otherObj)); return java.util.Objects.equals(ssid, other.ssid); }",6581eb1a4798ed533eee29f4ee7d44a393e0dcd2,equals(java.lang.Object),485627,127,115
521435,src_main_java_com_android_apksig_DefaultApkSignerEngine.java,38.0,"public com.android.apksig.DefaultApkSignerEngine build() throws java.security.InvalidKeyException { return new com.android.apksig.DefaultApkSignerEngine(mSignerConfigs, mMinSdkVersion, mV1SigningEnabled, mV2SigningEnabled, mOtherSignersSignaturesPreserved, mCreatedBy); }",f3da3874a5a17f4bf679b352aba353174b9e1034,"public com.android.apksig.DefaultApkSignerEngine build() throws java.security.InvalidKeyException { return new com.android.apksig.DefaultApkSignerEngine(mSignerConfigs, mMinSdkVersion, mMaxSdkVersion, mV1SigningEnabled, mV2SigningEnabled, mOtherSignersSignaturesPreserved, mCreatedBy); }",d4682ed913691c8f43d7c1e0598a05f0c371a74b,build(),build(),13,42,"public com.android.apksig.DefaultApkSignerEngine build() throws java.security.InvalidKeyException { return new com.android.apksig.DefaultApkSignerEngine(mSignerConfigs, mMinSdkVersion, mV1SigningEnabled, mV2SigningEnabled, mOtherSignersSignaturesPreserved, mCreatedBy); }",f3da3874a5a17f4bf679b352aba353174b9e1034,build(),112363,77,72
79530,luni_src_main_java_java_net_PlainSocketImpl.java,18.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void initConnected(java.net.InetAddress remoteAddress, int remotePort) { super.initConnected(remoteAddress, remotePort); address = remoteAddress; port = remotePort; }",f39076e0520caa731c847cfa53c8bc9c1647381c,,"initConnected(java.net.InetAddress,int)",11,32,"@java.lang.Override public void onConnect(java.net.InetAddress remoteAddress, int remotePort) { address = remoteAddress; port = remotePort; }",47a53cadc236571af2fb02490f366593c2f624c9,"onConnect(java.net.InetAddress,int)",511351,45,35
69617,luni_src_test_java_tests_api_java_util_ArraysTest.java,31.0,"public void test_sort$JII() { int startIndex = (tests.api.java.util.ArraysTest.arraySize) / 4; int endIndex = (3 * (tests.api.java.util.ArraysTest.arraySize)) / 4; long[] reversedArray = new long[tests.api.java.util.ArraysTest.arraySize]; long[] originalReversedArray = new long[tests.api.java.util.ArraysTest.arraySize]; for (int counter = 0; counter < (tests.api.java.util.ArraysTest.arraySize); counter++) { reversedArray[counter] = ((long) (((tests.api.java.util.ArraysTest.arraySize) - counter) - 1)); originalReversedArray[counter] = reversedArray[counter]; } java.util.Arrays.sort(reversedArray, startIndex, endIndex); for (int counter = 0; counter < startIndex; counter++) assertTrue(""Array modified outside of bounds"", ((reversedArray[counter]) == (originalReversedArray[counter]))); for (int counter = startIndex; counter < (endIndex - 1); counter++) assertTrue(""Array not sorted within bounds"", ((reversedArray[counter]) <= (reversedArray[(counter + 1)]))); for (int counter = endIndex; counter < (tests.api.java.util.ArraysTest.arraySize); counter++) assertTrue(""Array modified outside of bounds"", ((reversedArray[counter]) == (originalReversedArray[counter]))); try { java.util.Arrays.sort(reversedArray, (startIndex + 1), startIndex); fail(""IllegalArgumentException expected""); } catch (java.lang.IllegalArgumentException ignore) { } try { java.util.Arrays.sort(reversedArray, (-1), startIndex); fail(""ArrayIndexOutOfBoundsException expected (1)""); } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } try { java.util.Arrays.sort(reversedArray, startIndex, ((reversedArray.length) + 1)); fail(""ArrayIndexOutOfBoundsException expected (2)""); } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } }",6a29c98aaeccd4a22be1c94b5d0d982d5f9e9cc3,"public void test_sort$JII() { int startIndex = (tests.api.java.util.ArraysTest.arraySize) / 4; int endIndex = (3 * (tests.api.java.util.ArraysTest.arraySize)) / 4; long[] reversedArray = new long[tests.api.java.util.ArraysTest.arraySize]; long[] originalReversedArray = new long[tests.api.java.util.ArraysTest.arraySize]; for (int counter = 0; counter < (tests.api.java.util.ArraysTest.arraySize); counter++) { reversedArray[counter] = ((long) (((tests.api.java.util.ArraysTest.arraySize) - counter) - 1)); originalReversedArray[counter] = reversedArray[counter]; } java.util.Arrays.sort(reversedArray, startIndex, endIndex); for (int counter = 0; counter < startIndex; counter++) assertTrue(""Array modified outside of bounds"", ((reversedArray[counter]) == (originalReversedArray[counter]))); for (int counter = startIndex; counter < (endIndex - 1); counter++) assertTrue(""Array not sorted within bounds"", ((reversedArray[counter]) <= (reversedArray[(counter + 1)]))); for (int counter = endIndex; counter < (tests.api.java.util.ArraysTest.arraySize); counter++) assertTrue(""Array modified outside of bounds"", ((reversedArray[counter]) == (originalReversedArray[counter]))); try { java.util.Arrays.sort(reversedArray, (startIndex + 1), startIndex); fail(""IllegalArgumentException expected""); } catch (java.lang.IllegalArgumentException ignore) { } try { java.util.Arrays.sort(reversedArray, (-1), startIndex); fail(""ArrayIndexOutOfBoundsException expected (1)""); } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } try { java.util.Arrays.sort(reversedArray, startIndex, ((reversedArray.length) + 1)); fail(""ArrayIndexOutOfBoundsException expected (2)""); } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } try { java.util.Arrays.sort(new long[1], (startIndex + 1), startIndex); fail(""IllegalArgumentException expected""); } catch (java.lang.IllegalArgumentException ignore) { } }",02a01d5ac3eb5cb2364e274f45cb5a6c49be721e,test_sort$JII(),test_sort$JII(),6,38,"public void test_sort$JII() { int startIndex = (tests.api.java.util.ArraysTest.arraySize) / 4; int endIndex = (3 * (tests.api.java.util.ArraysTest.arraySize)) / 4; long[] reversedArray = new long[tests.api.java.util.ArraysTest.arraySize]; long[] originalReversedArray = new long[tests.api.java.util.ArraysTest.arraySize]; for (int counter = 0; counter < (tests.api.java.util.ArraysTest.arraySize); counter++) { reversedArray[counter] = ((long) (((tests.api.java.util.ArraysTest.arraySize) - counter) - 1)); originalReversedArray[counter] = reversedArray[counter]; } java.util.Arrays.sort(reversedArray, startIndex, endIndex); for (int counter = 0; counter < startIndex; counter++) assertTrue(""Array modified outside of bounds"", ((reversedArray[counter]) == (originalReversedArray[counter]))); for (int counter = startIndex; counter < (endIndex - 1); counter++) assertTrue(""Array not sorted within bounds"", ((reversedArray[counter]) <= (reversedArray[(counter + 1)]))); for (int counter = endIndex; counter < (tests.api.java.util.ArraysTest.arraySize); counter++) assertTrue(""Array modified outside of bounds"", ((reversedArray[counter]) == (originalReversedArray[counter]))); try { java.util.Arrays.sort(reversedArray, (startIndex + 1), startIndex); fail(""IllegalArgumentException expected""); } catch (java.lang.IllegalArgumentException ignore) { } try { java.util.Arrays.sort(reversedArray, (-1), startIndex); fail(""ArrayIndexOutOfBoundsException expected (1)""); } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } try { java.util.Arrays.sort(reversedArray, startIndex, ((reversedArray.length) + 1)); fail(""ArrayIndexOutOfBoundsException expected (2)""); } catch (java.lang.ArrayIndexOutOfBoundsException ignore) { } }",6a29c98aaeccd4a22be1c94b5d0d982d5f9e9cc3,test_sort$JII(),472479,477,438
159543,luni_src_main_java_java_text_Normalizer.java,0.0,"public static boolean isNormalized(java.lang.CharSequence src, java.text.Normalizer.Form form) { return libcore.icu.NativeNormalizer.isNormalized(src, form); }",1e72639c77363dfcd436a86ec7487949880fd8fe,"public static boolean isNormalized(java.lang.CharSequence src, java.text.Normalizer.Form form) { return java.text.com.ibm.icu.text.Normalizer.isNormalized(src.toString(), java.text.Normalizer.formToMode(form), 0); }",7b9f22e3ea3bb2d069c2328e62748e9d8bcd8746,"isNormalized(java.lang.CharSequence,java.text.Normalizer$Form)","isNormalized(java.lang.CharSequence,java.text.Normalizer$Form)",4,1,"public static boolean isNormalized(java.lang.CharSequence src, java.text.Normalizer.Form form) { return java.text.com.ibm.icu.text.Normalizer.isNormalized(src.toString(), form.getIcuForm(), 0); }",7e770faca43dac1fd75c043abec420d7febfc1a4,"isNormalized(java.lang.CharSequence,java.text.Normalizer$Form)",326500,59,54
42594,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_ui_PackagesPage.java,23.0,private void refreshViewerInput() { if (!(mGroupPackages.isDisposed())) { java.util.List<com.android.sdkuilib.internal.repository.core.PkgCategory> cats = mDiffLogic.getCategories(isSortByApi()); if ((mTreeViewer.getInput()) != cats) { mTreeViewer.setInput(cats); } else { mTreeViewer.refresh(); } expandInitial(mTreeViewer.getInput()); updateButtonsState(); updateMenuCheckmarks(); } },9aedf7a7e845d7cce0cf8dc5c391e3b232ddd9c6,private void refreshViewerInput() { if (!(mImpl.mGroupPackages.isDisposed())) { java.util.List<com.android.sdkuilib.internal.repository.core.PkgCategory> cats = mImpl.mDiffLogic.getCategories(isSortByApi()); if ((mImpl.mTreeViewer.getInput()) != cats) { mImpl.mTreeViewer.setInput(cats); } else { mImpl.mTreeViewer.refresh(); } expandInitial(mImpl.mTreeViewer.getInput()); updateButtonsState(); updateMenuCheckmarks(); } },542e0e54eeaed80367379493b6166031ecf757ec,refreshViewerInput(),refreshViewerInput(),8,20,private void refreshViewerInput() { if (!(mGroupPackages.isDisposed())) { try { mImpl.setViewerInput(); } catch (java.lang.Exception ignore) { } expandInitial(mTreeViewer.getInput()); updateButtonsState(); updateMenuCheckmarks(); } },fa0283f516d56e827d79d34d8c6b84af50eab409,refreshViewerInput(),195257,125,57
130960,build-system_builder_src_main_java_com_android_builder_sdk_DefaultSdkLoader.java,0.0,"public static synchronized com.android.builder.sdk.SdkLoader getLoader(@com.android.annotations.NonNull java.io.File sdkLocation) { if (((com.android.builder.sdk.DefaultSdkLoader.sLoader) != null) && (!(sdkLocation.equals(com.android.builder.sdk.DefaultSdkLoader.sLoader.mSdkLocation)))) { throw new java.lang.IllegalStateException(""Already created an SDK Loader with different SDK Path""); } return com.android.builder.sdk.DefaultSdkLoader.sLoader = new com.android.builder.sdk.DefaultSdkLoader(sdkLocation); }",138258175b034359d82ad9f269d4a100a1347b01,"public static synchronized com.android.builder.sdk.SdkLoader getLoader(@com.android.annotations.NonNull java.io.File sdkLocation) { if (((com.android.builder.sdk.DefaultSdkLoader.sLoader) != null) && (!(sdkLocation.equals(com.android.builder.sdk.DefaultSdkLoader.sLoader.mSdkLocation)))) { throw new java.lang.IllegalStateException(""Already created an SDK Loader with different SDK Path""); } if ((com.android.builder.sdk.DefaultSdkLoader.sLoader) == null) { com.android.builder.sdk.DefaultSdkLoader.sLoader = new com.android.builder.sdk.DefaultSdkLoader(sdkLocation); } return com.android.builder.sdk.DefaultSdkLoader.sLoader; }",caf0f9403b3fde27b36fbf7925dd1fc93157dd6d,getLoader(java.io.File),getLoader(java.io.File),2,0,"public static synchronized com.android.builder.sdk.SdkLoader getLoader(@com.android.annotations.NonNull java.io.File sdkLocation) { if ((com.android.builder.sdk.DefaultSdkLoader.sLoader) == null) { com.android.builder.sdk.DefaultSdkLoader.sLoader = new com.android.builder.sdk.DefaultSdkLoader(sdkLocation); } else if (!(sdkLocation.equals(com.android.builder.sdk.DefaultSdkLoader.sLoader.mSdkLocation))) { throw new java.lang.IllegalStateException(""Already created an SDK Loader with different SDK Path""); } return com.android.builder.sdk.DefaultSdkLoader.sLoader; }",c0077daddfd5793a08b34b78c840bb299f6e5e38,getLoader(java.io.File),151557,171,152
394932,core_java_android_net_ConnectivityManager.java,142.0,"public void requestNetwork(android.net.NetworkRequest request, android.app.PendingIntent operation) { checkPendingIntent(operation); try { mService.pendingRequestForNetwork(request.networkCapabilities, operation); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } }",291cc959bdb475aabc9d286d934ea5f25afb9c0a,"public void requestNetwork(android.net.NetworkRequest request, android.app.PendingIntent operation) { checkPendingIntent(operation); try { mService.pendingRequestForNetwork(request.networkCapabilities, operation); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throw android.net.ConnectivityManager.rethrowServiceException(e); } }",3f210ae5e2f3ece0f31dd4b8fade81a59414a5ec,"requestNetwork(android.net.NetworkRequest,android.app.PendingIntent)","requestNetwork(android.net.NetworkRequest,android.app.PendingIntent)",2,142,"public void requestNetwork(android.net.NetworkRequest request, android.app.PendingIntent operation) { checkPendingIntent(operation); try { mService.pendingRequestForNetwork(request.networkCapabilities, operation); } catch (android.os.RemoteException e) { throw e.rethrowFromSystemServer(); } catch (android.os.ServiceSpecificException e) { throw android.net.ConnectivityManager.convertServiceException(e); } }",f527d4525a9309823225d95c72023fe34c1c3110,"requestNetwork(android.net.NetworkRequest,android.app.PendingIntent)",169129,90,90
69177,src_main_java_org_conscrypt_SSLRecordProtocol.java,6.0,"protected byte[] wrap(byte content_type, org.conscrypt.DataStream dataStream) { byte[] fragment = dataStream.getData(org.conscrypt.SSLRecordProtocol.MAX_DATA_LENGTH); return wrap(content_type, fragment, 0, fragment.length); }",746435ba28ee703ebde76425516a5e1e1ae10bba,"protected byte[] wrap(byte content_type, org.conscrypt.DataStream dataStream) { final int dataLength; if ((((!(sentOutputData)) && ((session) != null)) && (((session.protocol) == (ProtocolVersion.SSLv3)) || ((session.protocol) == (ProtocolVersion.TLSv1)))) && (session.cipherSuite.isInitialRecordSplit())) { dataLength = 1; } else { dataLength = org.conscrypt.SSLRecordProtocol.MAX_DATA_LENGTH; } byte[] fragment = dataStream.getData(dataLength); return wrap(content_type, fragment, 0, fragment.length); }",121738a8560b04bdb2a13124365d62812feffb3c,"wrap(byte,org.conscrypt.DataStream)","wrap(byte,org.conscrypt.DataStream)",4,6,"protected byte[] wrap(byte content_type, org.conscrypt.DataStream dataStream) { if (((((content_type == (ContentType.APPLICATION_DATA)) && ((session) != null)) && (!(session.isServer))) && (((session.protocol) == (ProtocolVersion.SSLv3)) || ((session.protocol) == (ProtocolVersion.TLSv1)))) && (session.cipherSuite.isInitialRecordSplit())) { byte[] first = wrap(content_type, dataStream, 1); if (!(dataStream.hasData())) { return first; } byte[] second = wrap(content_type, dataStream, org.conscrypt.SSLRecordProtocol.MAX_DATA_LENGTH); byte[] output = new byte[(first.length) + (second.length)]; java.lang.System.arraycopy(first, 0, output, 0, first.length); java.lang.System.arraycopy(second, 0, output, first.length, second.length); return output; } else { return wrap(content_type, dataStream, org.conscrypt.SSLRecordProtocol.MAX_DATA_LENGTH); } }",7d3e83165e2a50a3d19a070c84133366457430d1,"wrap(byte,org.conscrypt.DataStream)",427673,136,239
252341,jack-tests_src_com_android_jack_test_toolchain_ExternalJillBasedToolchain.java,11.0,"@java.lang.Override public void libToLib(@javax.annotation.Nonnull java.io.File[] in, @javax.annotation.Nonnull java.io.File out, boolean zipFiles) throws java.lang.Exception { java.util.List<java.lang.String> commandLine = new java.util.ArrayList<java.lang.String>(); libToCommon(commandLine, convertClasspahtWithJillAsString(), in); if (zipFiles) { commandLine.add(""--output-jack""); } else { commandLine.add(""--output-jack-dir""); } commandLine.add(out.getAbsolutePath()); com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(commandLine.toArray(new java.lang.String[commandLine.size()])); exec.inheritEnvironment(); exec.setErr(errRedirectStream); exec.setOut(outRedirectStream); exec.setVerbose(isVerbose); if ((exec.run()) != 0) { throw new java.lang.RuntimeException(""Jack compiler exited with an error""); } }",fa7ebd41cc1acc91f06873884c18ba7a6f5ae39a,"@java.lang.Override public void libToLib(@javax.annotation.Nonnull java.io.File[] in, @javax.annotation.Nonnull java.io.File out, boolean zipFiles) throws java.lang.Exception { java.util.List<java.lang.String> commandLine = new java.util.ArrayList<java.lang.String>(); libToCommon(commandLine, convertClasspahtWithJillAsString(), in); if (zipFiles) { commandLine.add(""--output-jack""); commandLine.add(out.getAbsolutePath()); } else { if ((incrementalFolder) != null) { throw new java.lang.UnsupportedOperationException(); } addPropertiesForOutputJackDir(commandLine, out); } com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(commandLine.toArray(new java.lang.String[commandLine.size()])); exec.inheritEnvironment(); exec.setErr(errRedirectStream); exec.setOut(outRedirectStream); exec.setVerbose(isVerbose); if ((exec.run()) != 0) { throw new java.lang.RuntimeException(""Jack compiler exited with an error""); } }",2fff8278146b533490108c5ba491ee146c7d0c64,"libToLib(java.io.File[],java.io.File,boolean)","libToLib(java.io.File[],java.io.File,boolean)",4,11,"@java.lang.Override public void libToLib(@javax.annotation.Nonnull java.io.File[] in, @javax.annotation.Nonnull java.io.File out, boolean zipFiles) throws java.lang.Exception { java.util.List<java.lang.String> commandLine = new java.util.ArrayList<java.lang.String>(); libToCommon(commandLine, convertClasspahtWithJillAsString(), in); addOutputJack(commandLine, out, zipFiles); com.android.jack.test.util.ExecuteFile exec = new com.android.jack.test.util.ExecuteFile(commandLine.toArray(new java.lang.String[commandLine.size()])); exec.inheritEnvironment(); exec.setErr(errRedirectStream); exec.setOut(outRedirectStream); exec.setVerbose(isVerbose); if ((exec.run()) != 0) { throw new java.lang.RuntimeException(""Jack compiler exited with an error""); } }",d565008c399cdbdbdf4d64c3736d2d94a79f987b,"libToLib(java.io.File[],java.io.File,boolean)",33704,251,204
347313,tests_tests_telecom_src_android_telecom_cts_RttOperationsTest.java,,,,"private void placeRttCall(boolean incoming) { android.os.Bundle extras = new android.os.Bundle(); extras.putBoolean(TelecomManager.EXTRA_START_CALL_WITH_RTT, true); if (incoming) { addAndVerifyNewIncomingCall(createTestNumber(), extras); } else { placeAndVerifyCall(extras); } }",707219ac003e9dc628c16178069d5538e48ca0cd,,placeRttCall(boolean),6,10,"private void placeRttCall(boolean incoming) { android.os.Bundle extras = new android.os.Bundle(); extras.putBoolean(TelecomManager.EXTRA_START_CALL_WITH_RTT, true); if (incoming) { addAndVerifyNewIncomingCall(createTestNumber(), extras); } else { android.os.Bundle outgoingCallExtras = new android.os.Bundle(); outgoingCallExtras.putParcelable(TelecomManager.EXTRA_OUTGOING_CALL_EXTRAS, extras); placeAndVerifyCall(outgoingCallExtras); } }",d3435c384d23c0571354a0e7d8439abbedd01274,placeRttCall(boolean),327736,77,122
17297,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_build_builders_BaseBuilder.java,2.0,"private void removeDerivedResources(org.eclipse.core.resources.IResource rootResource, boolean deleteRoot, org.eclipse.core.runtime.IProgressMonitor monitor) throws org.eclipse.core.runtime.CoreException { if (rootResource.exists()) { if ((rootResource.getType()) == (org.eclipse.core.resources.IResource.FOLDER)) { org.eclipse.core.resources.IFolder folder = ((org.eclipse.core.resources.IFolder) (rootResource)); org.eclipse.core.resources.IResource[] members = folder.members(); for (org.eclipse.core.resources.IResource member : members) { removeDerivedResources(member, true, monitor); } } else if (rootResource.isDerived()) { rootResource.getLocation().toFile().delete(); } if (deleteRoot) { rootResource.getLocation().toFile().delete(); } } }",2f94113c1a2fe0d49abab2831795ac0e68999d4f,"private boolean removeDerivedResources(org.eclipse.core.resources.IResource rootResource, boolean deleteRoot, org.eclipse.core.runtime.IProgressMonitor monitor) throws org.eclipse.core.runtime.CoreException { if (rootResource.exists()) { if ((rootResource.getType()) == (org.eclipse.core.resources.IResource.FOLDER)) { org.eclipse.core.resources.IFolder folder = ((org.eclipse.core.resources.IFolder) (rootResource)); org.eclipse.core.resources.IResource[] members = folder.members(); boolean allMembersDeleted = true; for (org.eclipse.core.resources.IResource member : members) { allMembersDeleted &= removeDerivedResources(member, true, monitor); } if (deleteRoot && allMembersDeleted) { rootResource.getLocation().toFile().delete(); return true; } } if (rootResource.isDerived()) { rootResource.getLocation().toFile().delete(); return true; } } return false; }",be26debcab8d27ea0167bf27033745048dbfd4fa,"removeDerivedResources(org.eclipse.core.resources.IResource,boolean,org.eclipse.core.runtime.IProgressMonitor)","removeDerivedResources(org.eclipse.core.resources.IResource,boolean,org.eclipse.core.runtime.IProgressMonitor)",5,2,"private void removeDerivedResources(org.eclipse.core.resources.IResource rootResource, boolean deleteRoot, org.eclipse.core.runtime.IProgressMonitor monitor) throws org.eclipse.core.runtime.CoreException { if (rootResource.exists()) { if ((rootResource.getType()) == (org.eclipse.core.resources.IResource.FOLDER)) { org.eclipse.core.resources.IFolder folder = ((org.eclipse.core.resources.IFolder) (rootResource)); org.eclipse.core.resources.IResource[] members = folder.members(); boolean wasNotEmpty = (members.length) > 0; for (org.eclipse.core.resources.IResource member : members) { removeDerivedResources(member, true, monitor); } if ((deleteRoot && wasNotEmpty) && ((folder.members().length) == 0)) { rootResource.getLocation().toFile().delete(); } } if (rootResource.isDerived()) { rootResource.getLocation().toFile().delete(); } } }",047734b28bc2fd2fd6eabda5d500bbe716f02708,"removeDerivedResources(org.eclipse.core.resources.IResource,boolean,org.eclipse.core.runtime.IProgressMonitor)",56543,215,218
272714,luni_src_test_java_libcore_java_security_SignatureTest.java,38.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testSignature_updateArray_negativeOffset_throws() throws java.lang.Exception { try { java.security.Signature s = new libcore.java.security.SignatureTest.MySignature(""FOO""); s.update(new byte[4], (-1), 1); fail(); } catch (java.lang.IllegalArgumentException expected) { } }",ff479dff93ff78bb3cde1cf52d94bbae97a65f24,,testSignature_updateArray_negativeOffset_throws(),4,79,"public void testSignature_updateArray_negativeOffset_throws() throws java.lang.Exception { try { java.security.Signature s = new libcore.java.security.SignatureTest.MySignature(""FOO""); s.initVerify(libcore.java.security.SignatureTest.createPublicKey()); s.update(new byte[4], (-1), 1); fail(); } catch (java.lang.IllegalArgumentException expected) { } }",ceb567679a60e705e18aa051ab12d34052b567d0,testSignature_updateArray_negativeOffset_throws(),29374,75,94
439218,tools_ahat_src_heapdump_DominatorReferenceIterator.java,,,,@java.lang.Override public com.android.ahat.heapdump.AhatInstance next() { com.android.ahat.heapdump.AhatInstance next = mNext; mNext = null; return next; },b7b5f0935cb59612eeee85f5e2b32e3720b971eb,,next(),2,0,@java.lang.Override public com.android.ahat.heapdump.AhatInstance next() { if (hasNext()) { com.android.ahat.heapdump.AhatInstance next = mNext; mNext = null; return next; } throw new java.util.NoSuchElementException(); },5e5663271f845c3dd41e56572bb0f854167a58fb,next(),327885,50,65
346697,tests_wifitests_src_com_android_server_wifi_WifiNativeTest.java,9.0,"@org.junit.Test public void testSetupDriverForSoftApMode() { com.android.server.wifi.WificondControl wificondControl = mock(com.android.server.wifi.WificondControl.class); android.net.wifi.IWificond wificond = mock(android.net.wifi.IWificond.class); android.net.wifi.IApInterface apInterface = mock(android.net.wifi.IApInterface.class); when(wificondControl.setupDriverForSoftApMode()).thenReturn(apInterface); mWifiNative.setWificondControl(wificondControl); android.net.wifi.IApInterface returnedApInterface = mWifiNative.setupDriverForSoftApMode(); assertEquals(apInterface, returnedApInterface); verify(wificondControl).setupDriverForSoftApMode(); verify(mWifiNative).startHal(eq(false)); }",6d16a7eb0728a426435c9fc2a3fc7168d40259c9,"@org.junit.Test public void testSetupDriverForSoftApMode() { com.android.server.wifi.WificondControl wificondControl = mock(com.android.server.wifi.WificondControl.class); android.net.wifi.IWificond wificond = mock(android.net.wifi.IWificond.class); android.net.wifi.IApInterface apInterface = mock(android.net.wifi.IApInterface.class); when(wificondControl.setupDriverForSoftApMode()).thenReturn(apInterface); mWifiNative.setWificondControl(wificondControl); android.net.wifi.IApInterface returnedApInterface = mWifiNative.setupDriverForSoftApMode(); assertEquals(apInterface, returnedApInterface); verify(mWifiNative).startHal(eq(false)); verify(wificondControl).setupDriverForSoftApMode(); }",d52a1973fa4c437aa092409e9a79e5cf7922a4ce,testSetupDriverForSoftApMode(),testSetupDriverForSoftApMode(),9,10,"@org.junit.Test public void testSetupDriverForSoftApMode() { com.android.server.wifi.WificondControl wificondControl = mock(com.android.server.wifi.WificondControl.class); android.net.wifi.IWificond wificond = mock(android.net.wifi.IWificond.class); android.net.wifi.IApInterface apInterface = mock(android.net.wifi.IApInterface.class); when(wificondControl.setupDriverForSoftApMode()).thenReturn(apInterface); mWifiNative.setWificondControl(wificondControl); android.net.wifi.IApInterface returnedApInterface = mWifiNative.setupForSoftApMode(); assertEquals(apInterface, returnedApInterface); verify(mWifiNative).startHal(eq(false)); verify(wificondControl).setupDriverForSoftApMode(); }",7c147e990150a29d88cd5f4598154e0ddfe1abbc,testSetupDriverForSoftApMode(),217819,199,198
531698,core_java_android_bluetooth_BluetoothHidDeviceAppQosSettings.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public android.bluetooth.BluetoothHidDeviceAppQosSettings build() { return new android.bluetooth.BluetoothHidDeviceAppQosSettings(this); },b083524b9961a395e325742890cda10a9e9bb175,,build(),10,8,"public android.bluetooth.BluetoothHidDeviceAppQosSettings build() { return new android.bluetooth.BluetoothHidDeviceAppQosSettings(mServiceType, mTokenRate, mTokenBucketSize, mPeakBandwidth, mLatency, mDelayVariation); }",61be9ef5fc8b93d6d02e2463e7a33af2b4af3482,build(),27753,34,56
229824,system_image_uitests_app_src_androidTest_java_com_android_devtools_systemimage_uitest_unittest_utils_AppLauncherTest.java,0.0,"public void testAppLauncher() throws java.lang.Exception { com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Contacts""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Calendar""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Email""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Settings""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""API Demos""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Custom Locale""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Dev Tools""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Dev Settings""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Gestures Builder""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Widget Preview""); }",bc81387361fa9d19ddf489012f313825ba8940b4,"@org.junit.Test public void testAppLauncher() throws java.lang.Exception { mInstrumentation = testRule.getInstrumentation(); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Contacts""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Calendar""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Email""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Settings""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""API Demos""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Custom Locale""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Dev Tools""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Dev Settings""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Gestures Builder""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(mInstrumentation, ""Widget Preview""); }",f1c5d6917a3d35b8f7c659b34e2512f6fcfd2117,testAppLauncher(),testAppLauncher(),5,0,"@org.junit.Test public void testAppLauncher() throws java.lang.Exception { android.app.Instrumentation instrumentation = testFramework.getInstrumentation(); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""Contacts""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""Calendar""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""Email""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""Settings""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""API Demos""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""Custom Locale""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""Dev Tools""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""Dev Settings""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""Gestures Builder""); com.android.devtools.systemimage.uitest.utils.AppLauncher.launch(instrumentation, ""Widget Preview""); }",26a07359c40962c7994e5ad1e2b05446ba6a5caf,testAppLauncher(),154675,289,283
479697,dx_src_com_android_dx_util_ByteArray.java,18.0,"public com.android.dx.util.ByteArray slice(int start, int end) { checkOffsets(start, end); return new com.android.dx.util.ByteArray(bytes, (start + (this.start)), (end + (this.start))); }",3389f54607a272b1889acf79fb5edd089d913cf0,"public com.android.dx.util.ByteArray slice(int start, int end) { checkOffsets(start, end); byte[] slicedOut = new byte[end - start]; java.lang.System.arraycopy(bytes, start, slicedOut, 0, (end - start)); return new com.android.dx.util.ByteArray(slicedOut, 0, slicedOut.length); }",ba98a3a2649ae1868d0406fda4b33b33a2803827,"slice(int,int)","slice(int,int)",7,18,"public com.android.dx.util.ByteArray slice(int start, int end) { checkOffsets(start, end); byte[] slicedOut = java.util.Arrays.copyOfRange(bytes, start, end); return new com.android.dx.util.ByteArray(slicedOut); }",0b3d579188801e69d47c59243b0e86e1df574d76,"slice(int,int)",158978,85,63
407893,src_java_com_android_internal_telephony_SMSDispatcher.java,46.0,"protected com.android.internal.telephony.SMSDispatcher.SmsTracker getSmsTracker(java.util.HashMap<java.lang.String, java.lang.Object> data, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, java.lang.String format, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, com.android.internal.telephony.SmsHeader smsHeader, boolean isExpectMore, java.lang.String fullMessageText, boolean isText, boolean persistMessage) { android.content.pm.PackageManager pm = mContext.getPackageManager(); java.lang.String[] packageNames = pm.getPackagesForUid(android.os.Binder.getCallingUid()); final int userId = android.os.UserHandle.getCallingUserId(); android.content.pm.PackageInfo appInfo = null; if ((packageNames != null) && ((packageNames.length) > 0)) { try { appInfo = pm.getPackageInfoAsUser(packageNames[0], PackageManager.GET_SIGNATURES, userId); } catch (android.content.pm.PackageManager e) { } } java.lang.String destAddr = android.telephony.PhoneNumberUtils.extractNetworkPortion(((java.lang.String) (data.get(""destAddr"")))); return new com.android.internal.telephony.SMSDispatcher.SmsTracker(data, sentIntent, deliveryIntent, appInfo, destAddr, format, unsentPartCount, anyPartFailed, messageUri, smsHeader, isExpectMore, fullMessageText, getSubId(), isText, persistMessage, userId); }",b670f2b5558aca5c8923e728ed9e3e3d383cde77,"protected com.android.internal.telephony.SMSDispatcher.SmsTracker getSmsTracker(java.util.HashMap<java.lang.String, java.lang.Object> data, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, java.lang.String format, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, com.android.internal.telephony.SmsHeader smsHeader, boolean isExpectMore, java.lang.String fullMessageText, boolean isText, boolean persistMessage, int validityPeriod) { android.content.pm.PackageManager pm = mContext.getPackageManager(); java.lang.String[] packageNames = pm.getPackagesForUid(android.os.Binder.getCallingUid()); final int userId = android.os.UserHandle.getCallingUserId(); android.content.pm.PackageInfo appInfo = null; if ((packageNames != null) && ((packageNames.length) > 0)) { try { appInfo = pm.getPackageInfoAsUser(packageNames[0], PackageManager.GET_SIGNATURES, userId); } catch (android.content.pm.PackageManager e) { } } java.lang.String destAddr = android.telephony.PhoneNumberUtils.extractNetworkPortion(((java.lang.String) (data.get(""destAddr"")))); return new com.android.internal.telephony.SMSDispatcher.SmsTracker(data, sentIntent, deliveryIntent, appInfo, destAddr, format, unsentPartCount, anyPartFailed, messageUri, smsHeader, isExpectMore, fullMessageText, getSubId(), isText, persistMessage, userId, validityPeriod); }",e3824a254c7c6e43903874d1d744c2a72c57228e,"getSmsTracker(java.util.HashMap,android.app.PendingIntent,android.app.PendingIntent,java.lang.String,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicBoolean,android.net.Uri,com.android.internal.telephony.SmsHeader,boolean,java.lang.String,boolean,boolean)","getSmsTracker(java.util.HashMap,android.app.PendingIntent,android.app.PendingIntent,java.lang.String,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicBoolean,android.net.Uri,com.android.internal.telephony.SmsHeader,boolean,java.lang.String,boolean,boolean,int)",8,10,"protected com.android.internal.telephony.SMSDispatcher.SmsTracker getSmsTracker(java.util.HashMap<java.lang.String, java.lang.Object> data, android.app.PendingIntent sentIntent, android.app.PendingIntent deliveryIntent, java.lang.String format, java.util.concurrent.atomic.AtomicInteger unsentPartCount, java.util.concurrent.atomic.AtomicBoolean anyPartFailed, android.net.Uri messageUri, com.android.internal.telephony.SmsHeader smsHeader, boolean expectMore, java.lang.String fullMessageText, boolean isText, boolean persistMessage, int priority, int validityPeriod) { android.content.pm.PackageManager pm = mContext.getPackageManager(); java.lang.String[] packageNames = pm.getPackagesForUid(android.os.Binder.getCallingUid()); final int userId = android.os.UserHandle.getCallingUserId(); android.content.pm.PackageInfo appInfo = null; if ((packageNames != null) && ((packageNames.length) > 0)) { try { appInfo = pm.getPackageInfoAsUser(packageNames[0], PackageManager.GET_SIGNATURES, userId); } catch (android.content.pm.PackageManager e) { } } java.lang.String destAddr = android.telephony.PhoneNumberUtils.extractNetworkPortion(((java.lang.String) (data.get(""destAddr"")))); return new com.android.internal.telephony.SMSDispatcher.SmsTracker(data, sentIntent, deliveryIntent, appInfo, destAddr, format, unsentPartCount, anyPartFailed, messageUri, smsHeader, expectMore, fullMessageText, getSubId(), isText, persistMessage, userId, priority, validityPeriod); }",e89dcb8416ad4eee137772ccddb4e85760b1c72f,"getSmsTracker(java.util.HashMap,android.app.PendingIntent,android.app.PendingIntent,java.lang.String,java.util.concurrent.atomic.AtomicInteger,java.util.concurrent.atomic.AtomicBoolean,android.net.Uri,com.android.internal.telephony.SmsHeader,boolean,java.lang.String,boolean,boolean,int,int)",19960,367,370
395593,src_com_android_nfc_cardemulation_RegisteredAidCache.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static boolean isSubset(java.lang.String aid) { return aid.endsWith(""@""); }",2db16a741912d3e1a17923ba3d9df395ae561afb,,isSubset(java.lang.String),13,25,"static boolean isSubset(java.lang.String aid) { return aid.endsWith(""#""); }",585eda22d5a56a6327e4fbbcd22db77fdd96d374,isSubset(java.lang.String),227210,22,22
105901,build-system_gradle_src_main_groovy_com_android_build_gradle_model_DefaultAndroidComponentSpec.java,,,,@java.lang.Override public void setVariantManager(com.android.build.gradle.internal.VariantManager variantManager) { this.variantManager = variantManager; },bfe8bb109180f06e640f8a7b279d1d034b361267,,setVariantManager(com.android.build.gradle.internal.VariantManager),15,1,public com.android.builder.model.SigningConfig getSigningOverride() { return signingOverride; },7c814bf6b65766ba8c6f2721a38ff52ae73e588a,getSigningOverride(),513922,37,21
205336,jack_src_com_android_jack_library_v0002_InputJackLibraryImpl.java,15.0,"@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) { com.android.sched.vfs.InputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VFS prefixedInputVFS = null; try { prefixedInputVFS = new com.android.sched.vfs.PrefixedFS(vfs, com.android.jack.library.v0002.InputJackLibraryImpl.getSectionPath(fileType)); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.NotDirectoryException e) { throw new java.lang.AssertionError(e); } if (fileType == (com.android.jack.library.FileType.PREBUILT)) { try { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(new com.android.sched.vfs.MessageDigestFS(prefixedInputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO))); } catch (com.android.sched.vfs.WrongVFSFormatException e) { throw new java.lang.AssertionError(e); } } else { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(prefixedInputVFS); } sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }",aa511880824f3b9386653fcd00c100b37e7f97fc,"@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) { com.android.sched.vfs.InputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VFS prefixedInputVFS = null; try { prefixedInputVFS = new com.android.sched.vfs.PrefixedFS(vfs, com.android.jack.library.v0002.InputJackLibraryImpl.getSectionPath(fileType)); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.NotDirectoryException e) { throw new java.lang.AssertionError(e); } if (fileType == (com.android.jack.library.FileType.PREBUILT)) { try { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(new com.android.sched.vfs.DeflateFS(new com.android.sched.vfs.MessageDigestFS(prefixedInputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO)))); } catch (com.android.sched.vfs.WrongVFSFormatException e) { throw new java.lang.AssertionError(e); } } else { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(new com.android.sched.vfs.DeflateFS(prefixedInputVFS)); } sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }",8f7e17aa7404db75864e4040b2475f1dbcae7919,getSectionVFS(com.android.jack.library.FileType),getSectionVFS(com.android.jack.library.FileType),13,15,"@javax.annotation.Nonnull private synchronized com.android.sched.vfs.InputVFS getSectionVFS(@javax.annotation.Nonnull com.android.jack.library.FileType fileType) { com.android.sched.vfs.InputVFS currentSectionVFS; if (sectionVFS.containsKey(fileType)) { currentSectionVFS = sectionVFS.get(fileType); } else { com.android.sched.vfs.VFS prefixedInputVFS = null; try { prefixedInputVFS = new com.android.sched.vfs.PrefixedFS(vfs, com.android.jack.library.v0002.InputJackLibraryImpl.getSectionPath(fileType)); } catch (com.android.sched.util.file.CannotCreateFileException e) { throw new java.lang.AssertionError(e); } catch (com.android.sched.util.file.NotDirectoryException e) { throw new java.lang.AssertionError(e); } if (fileType == (com.android.jack.library.FileType.PREBUILT)) { try { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(new com.android.sched.vfs.MessageDigestFS(prefixedInputVFS, com.android.sched.util.config.ThreadConfig.get(JackLibraryFactory.MESSAGE_DIGEST_ALGO))); } catch (com.android.sched.vfs.WrongVFSFormatException e) { throw new java.lang.AssertionError(e); } } else { currentSectionVFS = new com.android.sched.vfs.GenericInputVFS(prefixedInputVFS); } sectionVFS.put(fileType, currentSectionVFS); } return currentSectionVFS; }",aa511880824f3b9386653fcd00c100b37e7f97fc,getSectionVFS(com.android.jack.library.FileType),282463,379,355
230812,ojluni_src_main_java_sun_nio_fs_UnixPath.java,,,,"int openForAttributeAccess(boolean followLinks) throws java.io.IOException { int flags = sun.nio.fs.UnixConstants.O_RDONLY; if (!followLinks) { if (!(supportsNoFollowLinks())) throw new java.io.IOException(""NOFOLLOW_LINKS is not supported on this platform""); flags |= sun.nio.fs.UnixConstants.O_NOFOLLOW; } try { return sun.nio.fs.UnixNativeDispatcher.open(this, flags, 0); } catch (sun.nio.fs.UnixException x) { if ((getFileSystem().isSolaris()) && ((x.errno()) == (sun.nio.fs.UnixConstants.EINVAL))) x.setError(sun.nio.fs.UnixConstants.ELOOP); if ((x.errno()) == (sun.nio.fs.UnixConstants.ELOOP)) throw new java.nio.file.FileSystemException(getPathForExceptionMessage(), null, ((x.getMessage()) + "" or unable to access attributes of symbolic link"")); x.rethrowAsIOException(this); return -1; } }",90e4eeacc3441c05bdc55bd47b3ae6d9e652e3b7,,openForAttributeAccess(boolean),8,35,"int openForAttributeAccess(boolean followLinks) throws java.io.IOException { int flags = sun.nio.fs.UnixConstants.O_RDONLY; if (!followLinks) { if ((sun.nio.fs.UnixConstants.O_NOFOLLOW) == 0) throw new java.io.IOException(""NOFOLLOW_LINKS is not supported on this platform""); flags |= sun.nio.fs.UnixConstants.O_NOFOLLOW; } try { return sun.nio.fs.UnixNativeDispatcher.open(this, flags, 0); } catch (sun.nio.fs.UnixException x) { if ((getFileSystem().isSolaris()) && ((x.errno()) == (sun.nio.fs.UnixConstants.EINVAL))) x.setError(sun.nio.fs.UnixConstants.ELOOP); if ((x.errno()) == (sun.nio.fs.UnixConstants.ELOOP)) throw new java.nio.file.FileSystemException(getPathForExceptionMessage(), null, ((x.getMessage()) + "" or unable to access attributes of symbolic link"")); x.rethrowAsIOException(this); return -1; } }",ae50bc7a3517ff8ab448c75da09b40e19c11fedb,openForAttributeAccess(boolean),120268,236,248
174892,jack-tests_tests_com_android_jack_java8_GwtTest.java,,,,"@org.junit.Test @com.android.jack.test.junit.KnownIssue public void testMultipleDefaults_fromInterfaces_right() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_48).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",5ec4733da6efff5ccc209ba0eac5a8dfbb1cb279,,testMultipleDefaults_fromInterfaces_right(),7,8,"@org.junit.Test public void testMultipleDefaults_fromInterfaces_right() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_48).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",c6bf638de46ec4f7bf991ee72e9119a7d22bfafe,testMultipleDefaults_fromInterfaces_right(),261314,108,95
333187,tests_wifitests_src_com_android_server_wifi_aware_WifiAwareStateManagerTest.java,45.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean answer(short transactionId, int pubSubId, int requestorInstanceId, byte[] dest, byte[] message, int messageId) throws java.lang.Exception { if (((mFailQueueCommandImmediately) != null) && (mFailQueueCommandImmediately.contains(messageId))) { return false; } if (((mFailQueueCommandLater) != null) && (mFailQueueCommandLater.contains(messageId))) { mDut.onMessageSendQueuedFailResponse(transactionId, NanStatusType.INTERNAL_FAILURE); } else { if ((mQueue.size()) <= (mMaxQueueDepth)) { mQueue.offer(transactionId); mMessageIdsByTid.put(transactionId, messageId); mDut.onMessageSendQueuedSuccessResponse(transactionId); } else { mDut.onMessageSendQueuedFailResponse(transactionId, NanStatusType.FOLLOWUP_TX_QUEUE_FULL); } } return true; }",4e8d758c594fd5c1b163c726adb0feae46089fc8,,"answer(short,int,int,byte[],byte[],int)",3,26,"public boolean answer(short transactionId, int pubSubId, int requestorInstanceId, byte[] dest, byte[] message, int messageId) throws java.lang.Exception { if (((mFailQueueCommandImmediately) != null) && (mFailQueueCommandImmediately.contains(messageId))) { return false; } if (((mFailQueueCommandLater) != null) && (mFailQueueCommandLater.contains(messageId))) { mDut.onMessageSendQueuedFailResponse(transactionId, NanStatusType.INTERNAL_FAILURE); } else { if ((mQueue.size()) <= (mMaxQueueDepth)) { mQueue.addLast(transactionId); mMessageIdsByTid.put(transactionId, messageId); mDut.onMessageSendQueuedSuccessResponse(transactionId); } else { mDut.onMessageSendQueuedFailResponse(transactionId, NanStatusType.FOLLOWUP_TX_QUEUE_FULL); } } return true; }",11ce541c334241b97891d6f2cd4021d00868f3b0,"answer(short,int,int,byte[],byte[],int)",164827,202,202
105901,build-system_gradle_src_main_groovy_com_android_build_gradle_model_DefaultAndroidComponentSpec.java,,,,@java.lang.Override public com.android.build.gradle.internal.SdkHandler getSdkHandler() { return sdkHandler; },ef5d19f76a3009e21740fa5113f643090a04f13b,,getSdkHandler(),15,5,public com.android.build.gradle.internal.VariantManager getVariantManager() { return variantManager; },667c38f9ab42b024f932989fc9e97ec3da3991fb,getVariantManager(),513919,29,23
335040,service_java_com_android_server_wifi_SupplicantP2pIfaceHal.java,46.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean setGroupIdle(java.lang.String groupIfName, int timeoutInSec) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure())) return false; if (timeoutInSec < 0) return false; com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult(((((""setGroupIdle("" + groupIfName) + "", "") + timeoutInSec) + "")"")); try { result.setResult(mISupplicantP2pIface.setGroupIdle(groupIfName, timeoutInSec)); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""ISupplicantP2pIface exception: "" + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }",50516e38e807ff867009da4f158a9b8a8ee05fd1,,"setGroupIdle(java.lang.String,int)",23,41,"public boolean setGroupIdle(java.lang.String groupIfName, int timeoutInSec) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure(""setGroupIdle""))) return false; if (timeoutInSec < 0) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""Invalid group timeout value "" + timeoutInSec)); return false; } com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.Void> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult(((((""setGroupIdle("" + groupIfName) + "", "") + timeoutInSec) + "")"")); try { result.setResult(mISupplicantP2pIface.setGroupIdle(groupIfName, timeoutInSec)); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""ISupplicantP2pIface exception: "" + e)); supplicantServiceDiedHandler(); } return result.isSuccess(); } }",e40b369722c44d50b1cb6829af469515698ea311,"setGroupIdle(java.lang.String,int)",258115,245,292
14918,media_java_android_media_MediaScanner.java,18.0,"public android.net.Uri scanSingleFile(java.lang.String path, java.lang.String volumeName, java.lang.String mimeType) { try { initialize(volumeName); prescan(path); java.io.File file = new java.io.File(path); return mClient.doScanFile(path, mimeType, file.lastModified(), file.length(), true); } catch (android.os.RemoteException e) { android.util.Log.e(android.media.MediaScanner.TAG, ""RemoteException in MediaScanner.scanFile()"", e); return null; } }",2ea00f5f00afd7689653461dbad1fd79ec24def6,"public android.net.Uri scanSingleFile(java.lang.String path, java.lang.String volumeName, java.lang.String mimeType) { try { initialize(volumeName); prescan(path); java.io.File file = new java.io.File(path); return mClient.doScanFile(path, mimeType, ((file.lastModified()) / 1000), file.length(), true); } catch (android.os.RemoteException e) { android.util.Log.e(android.media.MediaScanner.TAG, ""RemoteException in MediaScanner.scanFile()"", e); return null; } }",1e09dc1b440f17d1b05385d5792f16e874a72999,"scanSingleFile(java.lang.String,java.lang.String,java.lang.String)","scanSingleFile(java.lang.String,java.lang.String,java.lang.String)",5,18,"public android.net.Uri scanSingleFile(java.lang.String path, java.lang.String volumeName, java.lang.String mimeType) { try { initialize(volumeName); prescan(path); java.io.File file = new java.io.File(path); long lastModifiedSeconds = (file.lastModified()) / 1000; return mClient.doScanFile(path, mimeType, lastModifiedSeconds, file.length(), true); } catch (android.os.RemoteException e) { android.util.Log.e(android.media.MediaScanner.TAG, ""RemoteException in MediaScanner.scanFile()"", e); return null; } }",068ba075c62c03ce3586bb5f8ebf072e6cf519dd,"scanSingleFile(java.lang.String,java.lang.String,java.lang.String)",283107,134,139
162651,ddmlib_src_main_java_com_android_ddmlib_BatteryFetcher.java,5.0,"private void initiateBatteryQuery() { java.lang.String threadName = java.lang.String.format(""query-battery-%s"", mDevice.getSerialNumber()); java.lang.Thread fetchThread = new java.lang.Thread(threadName) { @java.lang.Override public void run() { java.lang.Exception exception = null; try { com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver sysBattReceiver = new com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver(); mDevice.executeShellCommand(""cat /sys/class/power_supply/*/capacity"", sysBattReceiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (!(setBatteryLevel(sysBattReceiver.getBatteryLevel()))) { com.android.ddmlib.BatteryFetcher.BatteryReceiver receiver = new com.android.ddmlib.BatteryFetcher.BatteryReceiver(); mDevice.executeShellCommand(""dumpsys battery"", receiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (setBatteryLevel(receiver.getBatteryLevel())) { return; } } exception = new java.io.IOException(""Unrecognized response to battery level queries""); } catch (com.android.ddmlib.TimeoutException e) { exception = e; } catch (com.android.ddmlib.AdbCommandRejectedException e) { exception = e; } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { exception = e; } catch (java.io.IOException e) { exception = e; } handleBatteryLevelFailure(exception); } }; fetchThread.setDaemon(true); fetchThread.start(); }",b2b41f7dc907bbb4f9c8ef44dc0362b1a62df0b9,"private void initiateBatteryQuery() { java.lang.String threadName = java.lang.String.format(""query-battery-%s"", mDevice.getSerialNumber()); java.lang.Thread fetchThread = new java.lang.Thread(threadName) { @java.lang.Override public void run() { java.lang.Exception exception = null; try { com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver sysBattReceiver = new com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver(); mDevice.executeShellCommand(""cat /sys/class/power_supply/*/capacity"", sysBattReceiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (!(setBatteryLevel(sysBattReceiver.getBatteryLevel()))) { com.android.ddmlib.BatteryFetcher.BatteryReceiver receiver = new com.android.ddmlib.BatteryFetcher.BatteryReceiver(); mDevice.executeShellCommand(""dumpsys battery"", receiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (setBatteryLevel(receiver.getBatteryLevel())) { return; } } exception = new java.io.IOException(""Unrecognized response to battery level queries""); } catch (com.android.ddmlib.TimeoutException e) { exception = e; } catch (com.android.ddmlib.AdbCommandRejectedException e) { exception = e; } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { exception = e; } catch (java.io.IOException e) { exception = e; } catch (java.lang.InterruptedException e) { exception = e; } handleBatteryLevelFailure(exception); } }; fetchThread.setDaemon(true); fetchThread.start(); }",c4d576332b6f3c795d42e72a9f8ba5a13f9e7b97,initiateBatteryQuery(),initiateBatteryQuery(),4,5,"private void initiateBatteryQuery() { java.lang.String threadName = java.lang.String.format(""query-battery-%s"", mDevice.getSerialNumber()); java.lang.Thread fetchThread = new java.lang.Thread(threadName) { @java.lang.Override public void run() { java.lang.Exception exception = null; try { com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver sysBattReceiver = new com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver(); mDevice.executeShellCommand(""cat /sys/class/power_supply/*/capacity"", sysBattReceiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (!(setBatteryLevel(sysBattReceiver.getBatteryLevel()))) { com.android.ddmlib.BatteryFetcher.BatteryReceiver receiver = new com.android.ddmlib.BatteryFetcher.BatteryReceiver(); mDevice.executeShellCommand(""dumpsys battery"", receiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (setBatteryLevel(receiver.getBatteryLevel())) { return; } } exception = new java.io.IOException(""Unrecognized response to battery level queries""); } catch (com.android.ddmlib.TimeoutException e) { exception = e; } catch (com.android.ddmlib.AdbCommandRejectedException e) { exception = e; } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { exception = e; } catch (java.io.IOException e) { exception = e; } handleBatteryLevelFailure(exception); } }; fetchThread.setDaemon(true); fetchThread.start(); }",b2b41f7dc907bbb4f9c8ef44dc0362b1a62df0b9,initiateBatteryQuery(),353054,414,398
91212,luni_src_test_java_tests_java_sql_SqlDateTest.java,,,,"public void testValueOfInvalidDate() { java.lang.String[] invalidDates = new java.lang.String[]{ ""+2001-12-31"", ""2001-+12-31"", ""2001-12-+31"", ""-2001-12-31"", ""2001--12-31"", ""2001-12--31"", ""2001--"", ""2001--31"", ""-12-31"", ""-12-"", ""--31"", ""2000000001-12-31"" }; for (java.lang.String date : invalidDates) { try { java.sql.Date.valueOf(date); fail(); } catch (java.lang.IllegalArgumentException expected) { } } }",cd6c1c4f02e0f845bdd3a3730fdad3374ec6e69a,,testValueOfInvalidDate(),7,0,"public void testValueOfInvalidDate() { java.lang.String[] invalidDates = new java.lang.String[]{ """", ""+2001-12-31"", ""2001-+12-31"", ""2001-12-+31"", ""-2001-12-31"", ""2001--12-31"", ""2001-12--31"", ""2001--"", ""2001--31"", ""-12-31"", ""-12-"", ""--31"", ""2000000001-12-31"" }; for (java.lang.String date : invalidDates) { try { java.sql.Date.valueOf(date); fail(); } catch (java.lang.IllegalArgumentException expected) { } } }",dbc084ced48e6a68a167978125f9ee0bfebf2740,testValueOfInvalidDate(),444799,127,128
91995,luni_src_main_java_libcore_io_ForwardingOs.java,96.0,public int setsid() throws libcore.io.ErrnoException { return os.setsid(); },7835323fdd6caefa817a163645f4234550e60e56,public int setsid() throws android.os.ErrnoException { return os.setsid(); },acab1b7863fd8c04d2d7fe8ac6b9db2840c2c3cb,setsid(),setsid(),3,96,public int setsid() throws android.system.ErrnoException { return os.setsid(); },f125be7a8032c1df3c70a884994db81f2a05f38f,setsid(),170490,22,22
142363,jack_src_com_android_jack_cfg_CfgBuilder.java,6.0,"@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock block) { assert (cfg) != null; com.android.jack.cfg.NormalBasicBlock endOfBlock = new com.android.jack.cfg.NormalBasicBlock(cfg, currentStmts); setBlockOfStatement(endOfBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(block); if (nextStatement != null) { forwardBranchResolver.addForwardBranch(ForwardBranchKind.BRANCH, endOfBlock, nextStatement); } }",752a0d9277baa0f4e4996baf12bf05c1f2b59eac,"@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock block) { assert (cfg) != null; com.android.jack.cfg.NormalBasicBlock endOfBlock = new com.android.jack.cfg.NormalBasicBlock(cfg, currentStmts); setBlockOfStatement(endOfBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(block); if (nextStatement != null) { forwardBranchResolver.addNormalBasicBlock(endOfBlock, nextStatement); } }",9437b4f9999c4bf4f5497ba69a6f550f43bad416,endVisit(com.android.jack.ir.ast.JCatchBlock),endVisit(com.android.jack.ir.ast.JCatchBlock),6,11,"@java.lang.Override public void endVisit(@javax.annotation.Nonnull com.android.jack.ir.ast.JCatchBlock block) { com.android.jack.cfg.NormalBasicBlock endOfBlock = new com.android.jack.cfg.NormalBasicBlock(((basicBlockId)++), currentStmts); setBlockOfStatement(endOfBlock); com.android.jack.ir.ast.JStatement nextStatement = com.android.jack.util.ControlFlowHelper.getNextStatement(block); if (nextStatement != null) { forwardBranchResolver.addNormalBasicBlock(endOfBlock, nextStatement); } }",88d89cae34f1d2c3bf439cb38d26fd0f207ca400,endVisit(com.android.jack.ir.ast.JCatchBlock),321122,138,135
152003,jdwp_src_test_java_org_apache_harmony_jpda_tests_jdwp_Events_BreakpointOnCatchTest.java,,,,"private int installBreakpointOnCatch(long classID, long methodID) { long lineCodeIndex = getCodeIndexForLineNumber(classID, methodID, BreakpointOnCatchDebuggee.BREAKPOINT_CATCH_LINE); org.apache.harmony.jpda.tests.framework.jdwp.Location location = new org.apache.harmony.jpda.tests.framework.jdwp.Location(JDWPConstants.TypeTag.CLASS, classID, methodID, lineCodeIndex); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket replyPacket = debuggeeWrapper.vmMirror.setBreakpoint(location); return replyPacket.getNextValueAsInt(); }",a4b333ff800b95b2ea7052b60c208020ebc86b7e,,"installBreakpointOnCatch(long,long)",4,2,"private int requestExceptionCaughtEvent() { java.lang.String exceptionSig = getClassSignature(BreakpointOnCatchDebuggee.BreakpointOnCatchDebuggeeException.class); org.apache.harmony.jpda.tests.framework.jdwp.ReplyPacket replyPacket = debuggeeWrapper.vmMirror.setException(exceptionSig, true, false); return replyPacket.getNextValueAsInt(); }",5cbd7a4050e72783e95842e8b8e66a73b62fe1eb,requestExceptionCaughtEvent(),441894,152,86
91995,luni_src_main_java_libcore_io_Os.java,96.0,public int setsid() throws libcore.io.ErrnoException;,150ffd0ff296e573e3fedee55787f5017d2c4974,public int setsid() throws android.os.ErrnoException;,d01a00f0674fb5f0ac26890cdbd951f30b67568e,setsid(),setsid(),3,96,public int setsid() throws android.system.ErrnoException;,85424017a7bd1d62496e7722135b62878a658ea0,setsid(),170214,14,14
81416,tests_tests_renderscript_src_android_renderscript_cts_TestClz.java,,,,"private void verifyResultsClzUchar2(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { byte[] arrayInValue = new byte[(INPUTSIZE) * 2]; inValue.copyTo(arrayInValue); byte[] arrayOut = new byte[(INPUTSIZE) * 2]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 2; j++) { android.renderscript.cts.TestClz.ArgumentsUcharUchar args = new android.renderscript.cts.TestClz.ArgumentsUcharUchar(); args.inValue = arrayInValue[((i * 2) + j)]; android.renderscript.cts.CoreMathVerifier.computeClz(args); byte actualOut = arrayOut[((i * 2) + j)]; int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; float ulpf; ulpf = (java.lang.Math.ulp(args.out)) * ulf; assertEquals((((((((((((((((((""Incorrect output for checkClzUchar2"" + (relaxed ? ""_relaxed"" : """")) + "" @["") + i) + "", "") + j) + ""] with ulf:"") + ulf) + "".\n"") + ""Input inValue:"") + (args.inValue)) + ""\n"") + ""Expected output out:"") + (args.out)) + ""\n"") + ""Actual output out:"") + actualOut) + ""\n""), args.out, actualOut, ulpf); } } }",195a989f67296e4f4cd4bba986eaf55d76b6e3fb,,"verifyResultsClzUchar2(android.renderscript.Allocation,android.renderscript.Allocation,boolean)",9,28,"private void verifyResultsClzUchar2Uchar2(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { byte[] arrayInValue = new byte[(INPUTSIZE) * 2]; inValue.copyTo(arrayInValue); byte[] arrayOut = new byte[(INPUTSIZE) * 2]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 2; j++) { android.renderscript.cts.TestClz.ArgumentsUcharUchar args = new android.renderscript.cts.TestClz.ArgumentsUcharUchar(); args.inValue = arrayInValue[((i * 2) + j)]; android.renderscript.cts.CoreMathVerifier.computeClz(args); int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; boolean valid = true; int neededUlf = 0; if ((args.out) != (arrayOut[((i * 2) + j)])) { valid = false; } if (!valid) { java.lang.StringBuilder message = new java.lang.StringBuilder(); message.append(java.lang.String.format(""Input inValue: %x"", args.inValue)); message.append(""\n""); message.append(java.lang.String.format(""Expected output out: %x"", args.out)); message.append(""\n""); message.append(java.lang.String.format(""Actual output out: %x"", arrayOut[((i * 2) + j)])); if ((args.out) != (arrayOut[((i * 2) + j)])) { message.append("" FAIL""); } message.append(""\n""); assertTrue((((""Incorrect output for checkClzUchar2Uchar2"" + (relaxed ? ""_relaxed"" : """")) + "":\n"") + (message.toString())), valid); } } } }",e40679c292c2961151c39f733348f58c531fed80,"verifyResultsClzUchar2Uchar2(android.renderscript.Allocation,android.renderscript.Allocation,boolean)",143456,381,440
79091,luni_src_test_java_libcore_java_util_LocaleTest.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void test_forLanguageTag() { },e6097ea818c71172ad61967037dd4d038e45cfbe,,test_forLanguageTag(),3,4,public void test_forLanguageTag() { test_setLanguageTag_wellFormedsingleSubtag(false); test_setLanguageTag_twoWellFormedSubtags(false); test_setLanguageTag_threeWellFormedSubtags(false); test_setLanguageTag_fourOrMoreWellFormedSubtags(false); test_setLanguageTag_withWellFormedExtensions(false); },a280f988045e7b1948584c69348dadf9e1c23180,test_forLanguageTag(),40855,10,86
152904,tests_tests_media_src_android_media_cts_MediaControllerTest.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testSendCommand() throws java.lang.Exception { mCallback.reset(); synchronized(mWaitLock) { final java.lang.String command = ""test-command""; final android.os.Bundle extras = new android.os.Bundle(); extras.putString(android.media.cts.MediaControllerTest.EXTRAS_KEY, android.media.cts.MediaControllerTest.EXTRAS_VALUE); mController.sendCommand(command, extras, new android.os.ResultReceiver(null)); mWaitLock.wait(android.media.cts.MediaControllerTest.TIME_OUT_MS); assertTrue(mCallback.mOnCommandCalled); assertNotNull(mCallback.mCommandCallback); assertEquals(android.media.cts.MediaControllerTest.EXTRAS_VALUE, mCallback.mExtras.getString(android.media.cts.MediaControllerTest.EXTRAS_KEY)); } }",030e585de822179739363e64e1e08b792dc30c99,,testSendCommand(),7,13,"public void testSendCommand() throws java.lang.Exception { synchronized(mWaitLock) { mCallback.reset(); final java.lang.String command = ""test-command""; final android.os.Bundle extras = new android.os.Bundle(); extras.putString(android.media.cts.MediaControllerTest.EXTRAS_KEY, android.media.cts.MediaControllerTest.EXTRAS_VALUE); mController.sendCommand(command, extras, new android.os.ResultReceiver(null)); mWaitLock.wait(android.media.cts.MediaControllerTest.TIME_OUT_MS); assertTrue(mCallback.mOnCommandCalled); assertNotNull(mCallback.mCommandCallback); assertEquals(command, mCallback.mCommand); assertEquals(android.media.cts.MediaControllerTest.EXTRAS_VALUE, mCallback.mExtras.getString(android.media.cts.MediaControllerTest.EXTRAS_KEY)); } }",23cafcdb15de5bfb5ddbd96b16b4e196a4ca244f,testSendCommand(),47358,196,206
13889,core_java_android_widget_DatePicker.java,17.0,"public void updateDate(int year, int monthOfYear, int dayOfMonth) { mYear = year; mMonth = monthOfYear; mDay = dayOfMonth; updateSpinners(); reorderPickers(new java.text.DateFormatSymbols().getShortMonths()); }",b7f058e5aa64e65df61c9adcc42b6e188bcfd19c,"public void updateDate(int year, int monthOfYear, int dayOfMonth) { mYear = year; mMonth = monthOfYear; mDay = dayOfMonth; updateSpinners(); reorderPickers(new java.text.DateFormatSymbols().getShortMonths()); notifyDateChanged(); }",5e2a6c448503ca4d2045e5b41d4bd4cca167b579,"updateDate(int,int,int)","updateDate(int,int,int)",2,17,"public void updateDate(int year, int monthOfYear, int dayOfMonth) { if ((((mYear) != year) || ((mMonth) != monthOfYear)) || ((mDay) != dayOfMonth)) { mYear = year; mMonth = monthOfYear; mDay = dayOfMonth; updateSpinners(); reorderPickers(new java.text.DateFormatSymbols().getShortMonths()); notifyDateChanged(); } }",54180f5a23c0a9f59f645c6929c003cf1548e14e,"updateDate(int,int,int)",438761,56,86
244263,sched_src_com_android_sched_vfs_MessageDigestFS.java,22.0,@java.lang.Override long getLastModified(@javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVFile file) { return vfs.getLastModified(file.getWrappedFile()); },f4fcfa95a557123d3a1ab52387eda4536c6eeccc,@java.lang.Override long getLastModified(@javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVFile file) throws com.android.sched.util.file.CannotReadException { return vfs.getLastModified(file.getWrappedFile()); },8f445208e985cfc209b58fefa1e9979e8628201b,getLastModified(com.android.sched.vfs.MessageDigestFS$MessageDigestVFile),getLastModified(com.android.sched.vfs.MessageDigestFS$MessageDigestVFile),3,22,@java.lang.Override @javax.annotation.Nonnull java.nio.file.attribute.FileTime getLastModified(@javax.annotation.Nonnull com.android.sched.vfs.MessageDigestFS.MessageDigestVFile file) throws com.android.sched.util.file.CannotGetModificationTimeException { return vfs.getLastModified(file.getWrappedFile()); },72b57b834df4d0ad55d9912ef6840ea64bcd0992,getLastModified(com.android.sched.vfs.MessageDigestFS$MessageDigestVFile),402864,58,75
92758,luni_src_main_java_java_nio_DirectByteBuffer.java,62.0,"@java.lang.Override public final int getInt(int index) { checkNotFreed(); checkIndex(index, SizeOf.INT); return this.block.peekInt(((offset) + index), order); }",fefcec50415d8ded746775acbef11e9f909ffcd1,"@java.lang.Override public final int getInt(int index) { checkCanAccess(); checkIndex(index, SizeOf.INT); return this.block.peekInt(((offset) + index), order); }",33910a34e12f4618a774a61df03993ca53e839ee,getInt(int),getInt(int),6,62,"@java.lang.Override public final int getInt(int index) { checkIsAccessible(); checkIndex(index, SizeOf.INT); return this.block.peekInt(((offset) + index), order); }",626656f10076d6f4673d1522db6d637897903ed2,getInt(int),45027,46,46
420239,distro_core_src_test_com_android_timezone_distro_TimeZoneDistroTest.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testSupplierConstructor() throws java.lang.Exception { com.android.timezone.distro.DistroVersion distroVersion = new com.android.timezone.distro.DistroVersion(DistroVersion.CURRENT_FORMAT_MAJOR_VERSION, DistroVersion.CURRENT_FORMAT_MINOR_VERSION, ""2016c"", 1); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); try (java.util.zip.ZipOutputStream zipOutputStream = new java.util.zip.ZipOutputStream(baos)) { com.android.timezone.distro.TimeZoneDistroTest.addZipEntry(zipOutputStream, TimeZoneDistro.DISTRO_VERSION_FILE_NAME, distroVersion.toBytes()); } byte[] bytes = baos.toByteArray(); com.android.timezone.distro.TimeZoneDistro distro = new com.android.timezone.distro.TimeZoneDistro(() -> new java.io.ByteArrayInputStream(bytes)); assertEquals(distroVersion, distro.getDistroVersion()); }",49491a2c471f600c450b34d94b2e44fc9cdd190f,,testSupplierConstructor(),2,0,"public void testGetDistroVersion_closesStream() throws java.lang.Exception { com.android.timezone.distro.DistroVersion distroVersion = new com.android.timezone.distro.DistroVersion(DistroVersion.CURRENT_FORMAT_MAJOR_VERSION, DistroVersion.CURRENT_FORMAT_MINOR_VERSION, ""2016c"", 1); java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream(); try (java.util.zip.ZipOutputStream zipOutputStream = new java.util.zip.ZipOutputStream(baos)) { com.android.timezone.distro.TimeZoneDistroTest.addZipEntry(zipOutputStream, TimeZoneDistro.DISTRO_VERSION_FILE_NAME, distroVersion.toBytes()); } byte[] bytes = baos.toByteArray(); com.android.timezone.distro.TimeZoneDistroTest.TestInputStreamSupplier inputStreamSupplier = new com.android.timezone.distro.TimeZoneDistroTest.TestInputStreamSupplier(bytes); com.android.timezone.distro.TimeZoneDistro distro = new com.android.timezone.distro.TimeZoneDistro(inputStreamSupplier); assertEquals(distroVersion, distro.getDistroVersion()); inputStreamSupplier.assertStreamCount(1); inputStreamSupplier.getInputStreamStream(0).assertClosed(); }",7f53ecbc55dc6a7dae22238e89cdc65354bb5eb6,testGetDistroVersion_closesStream(),46585,226,284
242280,test_004-ThreadStress_src_Main.java,20.0,"public void run() { try { if (Main.DEBUG) { java.lang.System.out.println((""Starting ThreadStress Daemon "" + (id))); } int i = 0; while (true) { Main.Operation operation = operations[i]; if (Main.DEBUG) { java.lang.System.out.println((((((""ThreadStress Daemon "" + (id)) + "" operation "") + i) + "" is "") + operation)); } operation.perform(); i = (i + 1) % (operations.length); } } catch (java.lang.OutOfMemoryError e) { } finally { if (Main.DEBUG) { java.lang.System.out.println((""Finishing ThreadStress Daemon for "" + (id))); } } }",065607ec2766b92e98e1b5e5732c82fa17c8d84b,"public void run() { try { if (Main.DEBUG) { java.lang.System.out.println((""Starting ThreadStress Daemon "" + (id))); } startBarrier.await(); try { int i = 0; while (running) { Main.Operation operation = operations[i]; if (Main.DEBUG) { java.lang.System.out.println((((((""ThreadStress Daemon "" + (id)) + "" operation "") + i) + "" is "") + operation)); } operation.perform(); i = (i + 1) % (operations.length); } } catch (java.lang.OutOfMemoryError e) { } if (Main.DEBUG) { java.lang.System.out.println((""Finishing ThreadStress Daemon for "" + (id))); } stopBarrier.await(); } catch (java.lang.Throwable t) { try { t.printStackTrace(); } catch (java.lang.Throwable ignored) { } mainThread.interrupt(); } }",06edc8e3de18dae228a32a7223ec0d0e0810e0ee,run(),run(),8,21,"public void run() { try { if (Main.DEBUG) { java.lang.System.out.println((""Starting ThreadStress Daemon "" + (id))); } startBarrier.await(); try { int i = 0; while (true) { Main.Operation operation = operations[i]; if (Main.DEBUG) { java.lang.System.out.println((((((""ThreadStress Daemon "" + (id)) + "" operation "") + i) + "" is "") + operation)); } operation.perform(); i = (i + 1) % (operations.length); } } catch (java.lang.OutOfMemoryError e) { } if (Main.DEBUG) { java.lang.System.out.println((""Finishing ThreadStress Daemon for "" + (id))); } } catch (java.lang.Throwable t) { Main.printThrowable(t); mainThread.interrupt(); } }",eb5e36de5bb765dd75bbd7a64b339a7075452bb4,run(),494017,213,196
139852,sched_src_com_android_sched_util_codec_DirectDirInputOutputVFSCodec.java,1.0,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.InputOutputVFS checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull final java.lang.String string) throws com.android.sched.util.codec.ParsingException { try { return new com.android.sched.vfs.GenericInputOutputVFS(new com.android.sched.vfs.CachedDirectFS(new com.android.sched.util.file.Directory(string, context.getRunnableHooks(), existence, permissions, change), permissions)); } catch (java.io.IOException e) { throw new com.android.sched.util.codec.ParsingException(e); } }",5a0ec85e6a5273e39088439fc427d3b72fc36bdc,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.InputOutputVFS checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull final java.lang.String string) throws com.android.sched.util.codec.ParsingException { java.io.File file; com.android.sched.util.location.DirectoryLocation location; com.android.sched.util.file.Directory workingDirectory = context.getWorkingDirectory(); if (workingDirectory != null) { file = new java.io.File(workingDirectory.getFile(), string); location = new com.android.sched.util.location.DirectoryLocation(string); } else { file = new java.io.File(string); location = new com.android.sched.util.location.DirectoryLocation(file); } try { return new com.android.sched.vfs.GenericInputOutputVFS(new com.android.sched.vfs.CachedDirectFS(new com.android.sched.util.file.Directory(file, location, context.getRunnableHooks(), existence, permissions, change), permissions)); } catch (java.io.IOException e) { throw new com.android.sched.util.codec.ParsingException(e); } }",6cbf90c51346329a6a7cf54c30f12ebf930421ae,"checkString(com.android.sched.util.codec.CodecContext,java.lang.String)","checkString(com.android.sched.util.codec.CodecContext,java.lang.String)",7,1,"@java.lang.Override @javax.annotation.Nonnull public com.android.sched.vfs.InputOutputVFS checkString(@javax.annotation.Nonnull com.android.sched.util.codec.CodecContext context, @javax.annotation.Nonnull final java.lang.String string) throws com.android.sched.util.codec.ParsingException { try { return new com.android.sched.vfs.GenericInputOutputVFS(new com.android.sched.vfs.CachedDirectFS(new com.android.sched.util.file.Directory(context.getWorkingDirectory(), string, context.getRunnableHooks(), existence, permissions, change), permissions)); } catch (java.io.IOException e) { throw new com.android.sched.util.codec.ParsingException(e); } }",3ad8db0ad03854398d5493bae831d9bbbec3e6ec,"checkString(com.android.sched.util.codec.CodecContext,java.lang.String)",303877,277,167
114459,jack_src_com_android_jack_jayce_JaycePackageLoader.java,3.0,@javax.annotation.Nonnull @java.lang.Override public java.util.Collection<java.lang.String> getSubPackageNames(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading) { java.util.List<java.lang.String> subs = new java.util.ArrayList<java.lang.String>(); for (com.android.sched.vfs.InputVElement sub : dir.list()) { if (sub.isVDir()) { subs.add(sub.getName()); } } return subs; },d270cebbd8751221beed2f0f90342d97a9322772,"@javax.annotation.Nonnull @java.lang.Override public java.util.Collection<java.lang.String> getSubPackageNames(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading) { java.util.List<java.lang.String> subs = new java.util.ArrayList<java.lang.String>(); try { for (com.android.sched.vfs.InputVElement sub : inputJackLibrary.getDir(FileType.JAYCE, ((packagePath) == null ? new com.android.sched.vfs.VPath("""", '/') : packagePath)).list()) { if (sub.isVDir()) { subs.add(sub.getName()); } } } catch (com.android.jack.library.FileTypeDoesNotExistException e) { } return subs; }",8f007d02266c191d6aa8418e242408f0ed640808,getSubPackageNames(com.android.jack.ir.ast.JPackage),getSubPackageNames(com.android.jack.ir.ast.JPackage),16,3,"@javax.annotation.Nonnull @java.lang.Override public java.util.Collection<java.lang.String> getSubPackageNames(@javax.annotation.Nonnull com.android.jack.ir.ast.JPackage loading) { java.util.List<java.lang.String> subs = new java.util.ArrayList<java.lang.String>(); try { for (com.android.sched.vfs.InputVElement sub : inputJackLibrary.getDir(FileType.JAYCE, ((packagePath) == null ? com.android.sched.vfs.VPath.ROOT : packagePath)).list()) { if (sub.isVDir()) { subs.add(sub.getName()); } } } catch (com.android.jack.library.FileTypeDoesNotExistException e) { throw new java.lang.AssertionError(); } return subs; }",75fa677a999332eba50a7bf4031994256e7229e6,getSubPackageNames(com.android.jack.ir.ast.JPackage),482765,182,189
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,20.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testRetrieveNotification() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses((""BF2B18A016"" + (""3014BF2F118001010C08736D64702E636F6D81020410"" + ""9000""))); com.android.internal.telephony.uicc.euicc.EuiccNotification result = mEuiccCard.retrieveNotification(5); assertEquals(new com.android.internal.telephony.uicc.euicc.EuiccNotification(1, ""smdp.com"", EuiccNotification.Event.DELETE, com.android.internal.telephony.uicc.euicc.Asn1Converter.hexToBytes(""3014BF2F118001010C08736D64702E636F6D81020410"")), result); verifyStoreData(channel, ""BF2B05A003800105""); }",12cc99fd962f0cdd995a700d611833e5f64918db,,testRetrieveNotification(),8,3,"@org.junit.Test public void testRetrieveNotification() { int channel = mockLogicalChannelResponses((""BF2B18A016"" + (""3014BF2F118001010C08736D64702E636F6D81020410"" + ""9000""))); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<android.telephony.euicc.EuiccNotification> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.retrieveNotification(5, resultCaptor, mHandler); resultCaptor.await(); assertEquals(new android.telephony.euicc.EuiccNotification(1, ""smdp.com"", android.telephony.euicc.EuiccNotification.EVENT_DELETE, com.android.internal.telephony.uicc.IccUtils.hexStringToBytes(""3014BF2F118001010C08736D64702E636F6D81020410"")), resultCaptor.result); verifyStoreData(channel, ""BF2B05A003800105""); }",535ab6f5d2ce85ee5ff07b2ca363b52e460a1ca1,testRetrieveNotification(),396888,243,256
23567,layoutlib_api_src_com_android_ide_common_rendering_api_DeclareStyleableResourceValue.java,,,,"public java.util.Map<java.lang.String, java.lang.Integer> getEnumValues(java.lang.String name) { if ((mEnumMap) != null) { return mEnumMap.get(name); } return null; }",5a3f29a46b973840c63b5d7f77b42c0b5aaf498b,,getEnumValues(java.lang.String),2,1,"public java.util.Map<java.lang.String, java.lang.Integer> getAttributeValues(java.lang.String name) { if ((mEnumMap) != null) { return mEnumMap.get(name); } return null; }",8221e80a8835eb8f65b252d0cadc1fd1a724a680,getAttributeValues(java.lang.String),511701,56,56
663827,harnesses_tradefed_src_com_android_tradefed_targetprep_VtsPythonVirtualenvPreparer.java,0.0,"@java.lang.Override public void tearDown(com.android.tradefed.invoker.IInvocationContext context, java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { if (((mVenvDir) != null) && (mIsDirCreator)) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete(mVenvDir.toPath()); com.android.tradefed.log.LogUtil.CLog.i(""Deleted the virtual env's temp working dir, %s."", mVenvDir); } catch (java.io.IOException exception) { com.android.tradefed.log.LogUtil.CLog.e(""Failed to delete %s: %s"", mVenvDir, exception); } mVenvDir = null; } }",3105103d95cd37e53bb356635d245793f674949e,"@java.lang.Override public synchronized void tearDown(com.android.tradefed.invoker.IInvocationContext context, java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { if (((mVenvDir) != null) && (mIsDirCreator)) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete(mVenvDir.toPath()); com.android.tradefed.log.LogUtil.CLog.i(""Deleted the virtual env's temp working dir, %s."", mVenvDir); } catch (java.io.IOException exception) { com.android.tradefed.log.LogUtil.CLog.e(""Failed to delete %s: %s"", mVenvDir, exception); } mVenvDir = null; } }",e6c68093e5319ed14c46805df3d9ab25724e9462,"tearDown(com.android.tradefed.invoker.IInvocationContext,java.lang.Throwable)","tearDown(com.android.tradefed.invoker.IInvocationContext,java.lang.Throwable)",13,1,"@java.lang.Override public synchronized void tearDown(com.android.tradefed.invoker.IInvocationContext context, java.lang.Throwable e) throws com.android.tradefed.device.DeviceNotAvailableException { --(mNumOfInstances); if ((mNumOfInstances) > 0) { return; } if (((mVenvDir) != null) && (mIsDirCreator)) { try { com.android.tradefed.targetprep.VtsPythonVirtualenvPreparer.recursiveDelete(mVenvDir.toPath()); com.android.tradefed.log.LogUtil.CLog.i(""Deleted the virtual env's temp working dir, %s."", mVenvDir); } catch (java.io.IOException exception) { com.android.tradefed.log.LogUtil.CLog.e(""Failed to delete %s: %s"", mVenvDir, exception); } mVenvDir = null; } }",99e065d67e9b22a31ba7806ebda56c183a4ca3c2,"tearDown(com.android.tradefed.invoker.IInvocationContext,java.lang.Throwable)",416311,192,212
70742,builder-model_src_main_java_com_android_builder_model_ArtifactMetaData.java,,,,@com.android.annotations.NonNull com.android.builder.model.ArtifactMetaData.ArtifactType getType();,610b018d9d3e00bea36c76d1d39dabad4d774646,,getType(),8,0,int getType();,83c77243b5cc693d984723bc93e62e627dd51b71,getType(),456924,24,4
335040,service_java_com_android_server_wifi_WifiNative.java,162.0,"public boolean p2pExtListen(boolean enable, int period, int interval) { if (enable && (interval < period)) { return false; } return doBooleanCommand((""P2P_EXT_LISTEN"" + (enable ? (("" "" + period) + "" "") + interval : """"))); }",11e68d5605c584d37782fa3fce1a3dba9c906dd2,"public boolean p2pExtListen(boolean enable, int period, int interval) { if (enable && (interval < period)) { return false; } if ((com.android.server.wifi.WifiNative.HIDL_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.configureExtListen(enable, period, interval); } else { return doBooleanCommand((""P2P_EXT_LISTEN"" + (enable ? (("" "" + period) + "" "") + interval : """"))); } }",bccc67d4900ce4674a5f3ab1d5e4d8bc01c6f7c3,"p2pExtListen(boolean,int,int)","p2pExtListen(boolean,int,int)",23,166,"public boolean p2pExtListen(boolean enable, int period, int interval) { if (enable && (interval < period)) { return false; } if ((com.android.server.wifi.WifiNative.HIDL_P2P_ENABLE) && ((mSupplicantP2pIfaceHal) != null)) { return mSupplicantP2pIfaceHal.configureExtListen(enable, period, interval); } else { return doBooleanCommand((""P2P_EXT_LISTEN"" + (enable ? (("" "" + period) + "" "") + interval : """"))); } }",5ec9f6b0496c604ce64b9b8a1f5a3f51b116ae6e,"p2pExtListen(boolean,int,int)",258285,132,136
479697,dx_src_com_android_dx_util_ByteArray.java,4.0,"@java.lang.Override public int read(byte[] arr, int offset, int length) { if ((offset + length) > (arr.length)) { length = (arr.length) - offset; } int maxLength = (size) - (cursor); if (length > maxLength) { length = maxLength; } java.lang.System.arraycopy(bytes, ((cursor) + (start)), arr, offset, length); cursor += length; return length; }",8b66c5a912334ed94f38a46d71fdf29efd7042ee,"public int read(byte[] arr, int offset, int length) { if ((offset + length) > (arr.length)) { length = (arr.length) - offset; } int maxLength = (size) - (cursor); if (length > maxLength) { length = maxLength; } java.lang.System.arraycopy(bytes, ((cursor) + (start)), arr, offset, length); cursor += length; return length; }",6a4775064438aa07b50c3ba514e155db4bfdfa0e,"read(byte[],int,int)","read(byte[],int,int)",7,4,"@java.lang.Override public int read(byte[] arr, int offset, int length) { if ((offset + length) > (arr.length)) { length = (arr.length) - offset; } int maxLength = (size) - (cursor); if (length > maxLength) { length = maxLength; } java.lang.System.arraycopy(bytes, ((cursor) + (start)), arr, offset, length); cursor += length; return length; }",8b66c5a912334ed94f38a46d71fdf29efd7042ee,"read(byte[],int,int)",158994,97,103
140231,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_ndk_ManagedNdkConfig.java,,,,@com.android.annotations.NonNull com.android.build.gradle.managed.ManagedPattern getCppFilePattern();,994ccd6f636e075dc0fc72f0ae2d680b2038c55d,,getCppFilePattern(),10,10,@com.android.annotations.NonNull com.android.build.gradle.managed.FilePattern getCppFilePattern();,168d313eced31c22831ca8d345b1cd2fda252d70,getCppFilePattern(),80772,25,25
628390,tests_net_java_com_android_internal_net_NetworkStatsFactoryTest.java,12.0,"@org.junit.Test public void testDoubleClatAccounting100MBDownload() throws java.lang.Exception { long appRxBytesBefore = 328684029L; long appRxBytesAfter = 439237478L; assertEquals(""App traffic should be ~100MB"", 110553449, (appRxBytesAfter - appRxBytesBefore)); long rootRxBytesBefore = 1394011L; long rootRxBytesAfter = 1398634L; assertEquals(""UID 0 traffic should be ~0"", 4623, (rootRxBytesAfter - rootRxBytesBefore)); com.android.internal.net.NetworkStatsFactory.noteStackedIface(""v4-wlan0"", ""wlan0""); android.net.NetworkStats stats; stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_before); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""v4-wlan0"", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesBefore, 5199872L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""wlan0"", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesBefore, 647888L); stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_after); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""v4-wlan0"", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesAfter, 7867488L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""wlan0"", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesAfter, 647587L); com.android.internal.net.NetworkStatsFactory.noteStackedIface(""v4-wlan0"", null); }",102cc236e46dde848a3bd78f1d85dfa6ac5d3a30,"@org.junit.Test public void testDoubleClatAccounting100MBDownload() throws java.lang.Exception { long appRxBytesBefore = 328684029L; long appRxBytesAfter = 439237478L; assertEquals(""App traffic should be ~100MB"", 110553449, (appRxBytesAfter - appRxBytesBefore)); long rootRxBytesBefore = 1394011L; long rootRxBytesAfter = 1398634L; assertEquals(""UID 0 traffic should be ~0"", 4623, (rootRxBytesAfter - rootRxBytesBefore)); android.util.ArrayMap<java.lang.String, java.lang.String> stackedIface = new android.util.ArrayMap(); stackedIface.put(""v4-wlan0"", ""wlan0""); android.net.NetworkStats stats; stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_before); stats.apply464xlatAdjustments(stackedIface); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""v4-wlan0"", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesBefore, 5199872L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""wlan0"", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesBefore, 647888L); stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_after); stats.apply464xlatAdjustments(stackedIface); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""v4-wlan0"", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesAfter, 7867488L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""wlan0"", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesAfter, 647587L); }",45d0e15b348d0ed2adfec3c4d6e93ca5a45d6fa6,testDoubleClatAccounting100MBDownload(),testDoubleClatAccounting100MBDownload(),11,12,"@org.junit.Test public void testDoubleClatAccounting100MBDownload() throws java.lang.Exception { long appRxBytesBefore = 328684029L; long appRxBytesAfter = 439237478L; assertEquals(""App traffic should be ~100MB"", 110553449, (appRxBytesAfter - appRxBytesBefore)); long rootRxBytesBefore = 1394011L; long rootRxBytesAfter = 1398634L; assertEquals(""UID 0 traffic should be ~0"", 4623, (rootRxBytesAfter - rootRxBytesBefore)); com.android.internal.net.NetworkStatsFactory.noteStackedIface(""v4-wlan0"", ""wlan0""); android.net.NetworkStats stats; stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_before); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""v4-wlan0"", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesBefore, 5199872L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""wlan0"", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesBefore, 647888L); stats = parseDetailedStats(R.raw.xt_qtaguid_with_clat_100mb_download_after); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""v4-wlan0"", 10106, com.android.internal.net.SET_FOREGROUND, 0, appRxBytesAfter, 7867488L); com.android.internal.net.NetworkStatsFactoryTest.assertStatsEntry(stats, ""wlan0"", 0, com.android.internal.net.SET_DEFAULT, 0, rootRxBytesAfter, 647587L); com.android.internal.net.NetworkStatsFactory.clearStackedIfaces(); }",78966cab0ab4b6fca34ccabbd5aab867d8a0ecc2,testDoubleClatAccounting100MBDownload(),129070,473,440
91995,luni_src_main_java_libcore_io_Posix.java,33.0,public native libcore.io.StructStat stat(java.lang.String path) throws libcore.io.ErrnoException;,08b95664b9551e7ad0d0cb9f067c5e68f7d10b1c,public native android.os.StructStat stat(java.lang.String path) throws android.os.ErrnoException;,bad43c57d972ddf5491c2e824994e9d37b91a483,stat(java.lang.String),stat(java.lang.String),3,32,public native android.system.StructStat stat(java.lang.String path) throws android.system.ErrnoException;,480a2472e8290a11dd0cd7532f4c5c1bfd864b74,stat(java.lang.String),169904,26,26
349918,services_core_java_com_android_server_IpSecService.java,20.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void deleteTransportModeTransform(int transformId) { },c2e3d99021c6a42e128f9cf703404d41165c6244,,deleteTransportModeTransform(int),17,10,"@java.lang.Override public void deleteTransportModeTransform(int resourceId) throws android.os.RemoteException { synchronized(mTransformRecords) { com.android.server.IpSecService.TransformRecord record; record = mTransformRecords.get(resourceId); if (record == null) { throw new java.lang.IllegalArgumentException(((""Transform "" + resourceId) + "" is not available to be deleted"")); } if (((record.pid) != (android.os.Binder.getCallingPid())) || ((record.uid) != (android.os.Binder.getCallingUid()))) { throw new java.lang.SecurityException(""Only the owner of an IpSec Transform may delete it!""); } record.releaseResources(); mTransformRecords.remove(resourceId); record.nullifyRecord(); } }",88433c957e0f1d0e28d76087ad623251b789ff73,deleteTransportModeTransform(int),151008,19,169
21802,tests_tests_text_src_android_text_method_cts_TimeKeyListenerTest.java,3.0,"public void testTimeKeyListener() { final android.text.method.TimeKeyListener timeKeyListener = android.text.method.TimeKeyListener.getInstance(); mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(timeKeyListener); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); assertEquals("""", mTextView.getText().toString()); mInstrumentation.sendStringSync(""1""); assertEquals(""1"", mTextView.getText().toString()); mInstrumentation.sendStringSync(""2""); assertEquals(""12"", mTextView.getText().toString()); mInstrumentation.sendStringSync(""a""); assertEquals(""12a"", mTextView.getText().toString()); int keyCode = android.text.method.cts.TextMethodUtils.getUnacceptedKeyCode(TimeKeyListener.CHARACTERS); if ((-1) != keyCode) { sendKeys(keyCode); assertEquals(""12a"", mTextView.getText().toString()); } mInstrumentation.sendStringSync(""m""); assertEquals(""12am"", mTextView.getText().toString()); mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(null); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); mInstrumentation.sendStringSync(""1""); assertEquals(""12am"", mTextView.getText().toString()); }",7f411d765183b00943c4ca5718fb09f7ed565cdf,"public void testTimeKeyListener() { final android.text.method.TimeKeyListener timeKeyListener = android.text.method.TimeKeyListener.getInstance(); mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(timeKeyListener); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); assertEquals("""", mTextView.getText().toString()); mInstrumentation.sendStringSync(""1""); assertEquals(""1"", mTextView.getText().toString()); mInstrumentation.sendStringSync(""2""); assertEquals(""12"", mTextView.getText().toString()); int keyCode = android.text.method.cts.TextMethodUtils.getUnacceptedKeyCode(TimeKeyListener.CHARACTERS); if ((-1) != keyCode) { sendKeys(keyCode); assertEquals(""12"", mTextView.getText().toString()); } mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(null); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); mInstrumentation.sendStringSync(""1""); assertEquals(""12"", mTextView.getText().toString()); }",fe2919a14c2aa5a22d9b416a3f19441b068d9dd5,testTimeKeyListener(),testTimeKeyListener(),2,3,"public void testTimeKeyListener() { final android.text.method.TimeKeyListener timeKeyListener = android.text.method.TimeKeyListener.getInstance(); java.lang.String expectedText = """"; mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(timeKeyListener); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); assertEquals(expectedText, mTextView.getText().toString()); mInstrumentation.sendStringSync(""1""); expectedText += ""1""; assertEquals(expectedText, mTextView.getText().toString()); mInstrumentation.sendStringSync(""2""); expectedText += ""2""; assertEquals(""12"", mTextView.getText().toString()); android.view.KeyCharacterMap kcm = android.view.KeyCharacterMap.load(KeyCharacterMap.BUILT_IN_KEYBOARD); if ('a' == (kcm.getMatch(KeyEvent.KEYCODE_A, TimeKeyListener.CHARACTERS))) { expectedText += ""a""; mInstrumentation.sendKeyDownUpSync(KeyEvent.KEYCODE_A); assertEquals(expectedText, mTextView.getText().toString()); } if ('p' == (kcm.getMatch(KeyEvent.KEYCODE_P, TimeKeyListener.CHARACTERS))) { expectedText += ""p""; mInstrumentation.sendKeyDownUpSync(KeyEvent.KEYCODE_P); assertEquals(expectedText, mTextView.getText().toString()); } if ('m' == (kcm.getMatch(KeyEvent.KEYCODE_M, TimeKeyListener.CHARACTERS))) { expectedText += ""m""; mInstrumentation.sendKeyDownUpSync(KeyEvent.KEYCODE_M); assertEquals(expectedText, mTextView.getText().toString()); } int keyCode = android.text.method.cts.TextMethodUtils.getUnacceptedKeyCode(TimeKeyListener.CHARACTERS); if ((-1) != keyCode) { sendKeys(keyCode); assertEquals(expectedText, mTextView.getText().toString()); } mActivity.runOnUiThread(new java.lang.Runnable() { public void run() { mTextView.setKeyListener(null); mTextView.requestFocus(); } }); mInstrumentation.waitForIdleSync(); mInstrumentation.sendStringSync(""1""); assertEquals(expectedText, mTextView.getText().toString()); }",f692a84d24ad961e7b184b9f39499133ed454886,testTimeKeyListener(),444813,232,472
16553,hierarchyviewer2_libs_hierarchyviewerlib_src_com_android_hierarchyviewerlib_HierarchyViewerDirector.java,21.0,"public void run() { try { java.lang.Thread.sleep(2000); } catch (java.lang.InterruptedException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, (""Unable to debug device "" + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); return; } if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, (""Unable to debug device "" + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); } else { loadViewServerInfoAndWindows(device); } }",8fa115f8d2d52c3d57ee3bcc2a04d06b490b6ca1,"public void run() { if (device.isOnline()) { com.android.hierarchyviewerlib.device.DeviceBridge.setupDeviceForward(device); if (!(com.android.hierarchyviewerlib.device.DeviceBridge.isViewServerRunning(device))) { if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { try { java.lang.Thread.sleep(2000); } catch (java.lang.InterruptedException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, (""Unable to debug device "" + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); return; } if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, (""Unable to debug device "" + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); } else { loadViewServerInfoAndWindows(device); } return; } } loadViewServerInfoAndWindows(device); } }",311c1c29361abd164a2fac10a5dccda3361593b6,run(),run(),14,11,"public void run() { if (device.isOnline()) { com.android.hierarchyviewerlib.device.DeviceBridge.setupDeviceForward(device); if (!(com.android.hierarchyviewerlib.device.DeviceBridge.isViewServerRunning(device))) { if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { try { java.lang.Thread.sleep(2000); } catch (java.lang.InterruptedException e) { } if (!(com.android.hierarchyviewerlib.device.DeviceBridge.startViewServer(device))) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.HierarchyViewerDirector.TAG, (""Unable to debug device "" + device)); com.android.hierarchyviewerlib.device.DeviceBridge.removeDeviceForward(device); } else { loadViewServerInfoAndWindows(device); } return; } } loadViewServerInfoAndWindows(device); } }",fae73005c2e1313778ae6d1991d6f806f28f1d36,run(),450803,262,205
422480,tests_net_java_com_android_server_ConnectivityServiceTest.java,136.0,"@android.test.suitebuilder.annotation.SmallTest public void testNetworkInfoOfTypeNone() { android.os.ConditionVariable broadcastCV = waitForConnectivityBroadcasts(1); verifyNoNetwork(); com.android.server.ConnectivityServiceTest.MockNetworkAgent lowpanNetwork = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_LOWPAN); assertNull(mCm.getActiveNetworkInfo()); lowpanNetwork.connect(true); waitForIdle(); verifyActiveNetwork(com.android.server.TRANSPORT_LOWPAN); assertEquals(1, mCm.getAllNetworks().length); android.net.NetworkInfo info = mCm.getActiveNetworkInfo(); android.net.Network network = mCm.getActiveNetwork(); com.android.server.NetworkCapabilities capabilities = mCm.getNetworkCapabilities(network); assertNotNull(info); assertNotNull(network); assertNotNull(capabilities); assertEquals(com.android.server.TYPE_NONE, info.getType()); assertTrue(capabilities.hasTransport(com.android.server.TRANSPORT_LOWPAN)); lowpanNetwork.disconnect(); waitForIdle(); verifyNoNetwork(); if (broadcastCV.block(10)) { fail(""expected no broadcast, but got CONNECTIVITY_ACTION broadcast""); } }",d8dc81712b580c29dcb6c2db2d0fc697fca6f242,"@android.test.suitebuilder.annotation.SmallTest public void testNetworkInfoOfTypeNone() { android.os.ConditionVariable broadcastCV = waitForConnectivityBroadcasts(1); verifyNoNetwork(); com.android.server.ConnectivityServiceTest.MockNetworkAgent lowpanNetwork = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_LOWPAN); assertNull(mCm.getActiveNetworkInfo()); lowpanNetwork.connect(true); waitForIdle(); verifyActiveNetwork(com.android.server.TRANSPORT_LOWPAN); com.android.server.ConnectivityServiceTest.assertLength(1, mCm.getAllNetworks()); android.net.NetworkInfo info = mCm.getActiveNetworkInfo(); android.net.Network network = mCm.getActiveNetwork(); com.android.server.NetworkCapabilities capabilities = mCm.getNetworkCapabilities(network); assertNotNull(info); assertNotNull(network); assertNotNull(capabilities); assertEquals(com.android.server.TYPE_NONE, info.getType()); assertTrue(capabilities.hasTransport(com.android.server.TRANSPORT_LOWPAN)); lowpanNetwork.disconnect(); waitForIdle(); verifyNoNetwork(); if (broadcastCV.block(10)) { fail(""expected no broadcast, but got CONNECTIVITY_ACTION broadcast""); } }",0eaefd4b3634075d71ebd4835494b79bee133590,testNetworkInfoOfTypeNone(),testNetworkInfoOfTypeNone(),4,140,"@android.test.suitebuilder.annotation.SmallTest public void testNetworkInfoOfTypeNone() { android.os.ConditionVariable broadcastCV = waitForConnectivityBroadcasts(1); verifyNoNetwork(); com.android.server.ConnectivityServiceTest.MockNetworkAgent lowpanNetwork = new com.android.server.ConnectivityServiceTest.MockNetworkAgent(TRANSPORT_LOWPAN); assertNull(mCm.getActiveNetworkInfo()); android.net.Network[] allNetworks = mCm.getAllNetworks(); com.android.server.ConnectivityServiceTest.assertLength(1, allNetworks); android.net.Network network = allNetworks[0]; com.android.server.NetworkCapabilities capabilities = mCm.getNetworkCapabilities(network); assertTrue(capabilities.hasTransport(com.android.server.TRANSPORT_LOWPAN)); final android.net.NetworkRequest request = new android.net.NetworkRequest.Builder().addTransportType(com.android.server.TRANSPORT_LOWPAN).build(); final com.android.server.ConnectivityServiceTest.TestNetworkCallback callback = new com.android.server.ConnectivityServiceTest.TestNetworkCallback(); mCm.registerNetworkCallback(request, callback); lowpanNetwork.connect(false, false); callback.expectAvailableCallbacks(lowpanNetwork); assertNull(mCm.getActiveNetworkInfo()); assertNull(mCm.getActiveNetwork()); lowpanNetwork.disconnect(); callback.expectCallback(com.android.server.ConnectivityServiceTest.CallbackState.LOST, lowpanNetwork); mCm.unregisterNetworkCallback(callback); verifyNoNetwork(); if (broadcastCV.block(10)) { fail(""expected no broadcast, but got CONNECTIVITY_ACTION broadcast""); } }",f151b58325912a14889e605b396c8839404dc747,testNetworkInfoOfTypeNone(),338474,262,356
149957,build-system_gradle-experimental_src_main_groovy_com_android_build_gradle_ndk_internal_NdkExtensionConvention.java,3.0,"public static void setExtensionDefault(com.android.build.gradle.managed.NdkConfig ndkConfig) { if (ndkConfig.getToolchain().isEmpty()) { ndkConfig.setToolchain(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN); } else { if ((!(ndkConfig.getToolchain().equals(""gcc""))) && (!(ndkConfig.getToolchain().equals(""clang"")))) { throw new org.gradle.api.InvalidUserDataException(java.lang.String.format(""Invalid toolchain '%s'. Supported toolchains are 'gcc' and 'clang'."", ndkConfig.getToolchain())); } } if (ndkConfig.getToolchainVersion().isEmpty()) { ndkConfig.setToolchainVersion(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN_VERSION); } ndkConfig.getCFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.c""); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.cpp""); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.cc""); } }); if (ndkConfig.getStl().isEmpty()) { ndkConfig.setStl(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_STL); } else { com.android.build.gradle.ndk.internal.StlConfiguration.checkStl(ndkConfig.getStl()); } }",8610c93fc2c6c607e4341180d103ce6e1569c5d5,"public static void setExtensionDefault(com.android.build.gradle.managed.NdkConfig ndkConfig) { if (ndkConfig.getToolchain().isEmpty()) { ndkConfig.setToolchain(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_TOOLCHAIN); } else { if ((!(ndkConfig.getToolchain().equals(""gcc""))) && (!(ndkConfig.getToolchain().equals(""clang"")))) { throw new org.gradle.api.InvalidUserDataException(java.lang.String.format(""Invalid toolchain '%s'. Supported toolchains are 'gcc' and 'clang'."", ndkConfig.getToolchain())); } } ndkConfig.getCFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.c""); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.cpp""); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.cc""); } }); if (ndkConfig.getStl().isEmpty()) { ndkConfig.setStl(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_STL); } else { com.android.build.gradle.ndk.internal.StlConfiguration.checkStl(ndkConfig.getStl()); } }",d26223a308cb8b36132817bd7c4fa27a130b5281,setExtensionDefault(com.android.build.gradle.managed.NdkConfig),setExtensionDefault(com.android.build.gradle.managed.NdkConfig),8,3,"public static void setExtensionDefault(com.android.build.gradle.managed.NdkConfig ndkConfig) { if (ndkConfig.getToolchain().isEmpty()) { ndkConfig.setToolchain(com.android.build.gradle.internal.core.Toolchain.getDefault().getName()); } else { if ((!(ndkConfig.getToolchain().equals(""gcc""))) && (!(ndkConfig.getToolchain().equals(""clang"")))) { throw new org.gradle.api.InvalidUserDataException(java.lang.String.format(""Invalid toolchain '%s'. Supported toolchains are 'gcc' and 'clang'."", ndkConfig.getToolchain())); } } ndkConfig.getCFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.c""); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.cpp""); } }); ndkConfig.getCppFilePattern().getIncludes().create(new org.gradle.api.Action<com.android.build.gradle.managed.ManagedString>() { @java.lang.Override public void execute(com.android.build.gradle.managed.ManagedString managedString) { managedString.setValue(""**/*.cc""); } }); if (ndkConfig.getStl().isEmpty()) { ndkConfig.setStl(com.android.build.gradle.ndk.internal.NdkExtensionConvention.DEFAULT_STL); } else { com.android.build.gradle.ndk.internal.StlConfiguration.checkStl(ndkConfig.getStl()); } }",deaa0d1537accac605e294e93466134a7e9ea4c3,setExtensionDefault(com.android.build.gradle.managed.NdkConfig),341051,451,448
202925,tools_vm-tests-tf_src_util_build_JillBuildStep.java,1.0,"@java.lang.Override boolean build() { if (super.build()) { java.io.File outDir = outputFile.fileName.getParentFile(); if ((!(outDir.exists())) && (!(outDir.mkdirs()))) { java.lang.System.err.println((""failed to create output dir: "" + (outDir.getAbsolutePath()))); return false; } int args = 3; java.lang.String[] commandLine = new java.lang.String[args]; commandLine[0] = ""--output""; commandLine[1] = outputFile.fileName.getAbsolutePath(); commandLine[2] = inputFile.fileName.getAbsolutePath(); try { com.android.jill.Options options = com.android.jill.Main.getOptions(commandLine); com.android.jill.Jill.process(options); } catch (java.lang.Throwable ex) { ex.printStackTrace(); return false; } return true; } return false; }",b2f824be56569c4e5665a6eda9c35109db716907,"@java.lang.Override boolean build() { if (super.build()) { java.io.File tmpInputJar = null; try { java.io.File outDir = outputFile.fileName.getParentFile(); if ((!(outDir.exists())) && (!(outDir.mkdirs()))) { java.lang.System.err.println((""failed to create output dir: "" + (outDir.getAbsolutePath()))); return false; } tmpInputJar = new java.io.File(((inputFile.fileName.getPath()) + "".jar"")); util.build.BuildStep.BuildFile tmInputJarBuildFile = new util.build.BuildStep.BuildFile(tmpInputJar); util.build.JarBuildStep jarStep = new util.build.JarBuildStep(inputFile, inputFile.fileName.getName(), tmInputJarBuildFile, false); if (!(jarStep.build())) { throw new java.io.IOException((""Failed to make jar: "" + (outputFile.getPath()))); } java.lang.String[] commandLine = new java.lang.String[]{ ""--import"", tmpInputJar.getAbsolutePath(), ""--output-jack"", outputFile.fileName.getAbsolutePath() }; util.build.ExecuteFile exec = new util.build.ExecuteFile(JackBuildDalvikSuite.JACK, commandLine); exec.setErr(java.lang.System.err); exec.setOut(java.lang.System.out); if (!(exec.run())) { return false; } return true; } catch (java.lang.Throwable ex) { java.lang.System.err.println((((""exception while making jack file from jar "" + (inputFile.fileName.getAbsolutePath())) + "" to "") + (outputFile.fileName.getAbsolutePath()))); ex.printStackTrace(); } finally { tmpInputJar.delete(); } } return false; }",f3b3fad6744d1355a75dea1f926676979b3a798d,build(),build(),2,1,"@java.lang.Override boolean build() { if (super.build()) { java.io.File tmpInputJar = new java.io.File(((inputFile.fileName.getPath()) + "".jar"")); try { java.io.File outDir = outputFile.fileName.getParentFile(); if ((!(outDir.exists())) && (!(outDir.mkdirs()))) { java.lang.System.err.println((""failed to create output dir: "" + (outDir.getAbsolutePath()))); return false; } util.build.JarBuildStep jarStep = new util.build.JarBuildStep(inputFile, inputFile.fileName.getName(), new util.build.BuildFile(tmpInputJar), false); if (!(jarStep.build())) { throw new java.io.IOException((""Failed to make jar: "" + (outputFile.getPath()))); } java.lang.String[] commandLine = new java.lang.String[]{ ""--verbose"", ""error"", ""--import"", tmpInputJar.getAbsolutePath(), ""--output-jack"", outputFile.fileName.getAbsolutePath() }; util.build.ExecuteFile exec = new util.build.ExecuteFile(JackBuildDalvikSuite.JACK, commandLine); exec.setErr(java.lang.System.err); exec.setOut(java.lang.System.out); if (!(exec.run())) { return false; } return true; } catch (java.lang.Throwable ex) { java.lang.System.err.println((((""exception while transforming jack file from jar "" + (inputFile.fileName.getAbsolutePath())) + "" to "") + (outputFile.fileName.getAbsolutePath()))); ex.printStackTrace(); } finally { tmpInputJar.delete(); } } return false; }",0eb67b1aa71e2da5693b170baeaec5c298536b02,build(),218848,387,362
44471,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_gle2_RenderPreviewManager.java,29.0,"public boolean click(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint mousePos) { com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreview preview = getPreview(mousePos); if (preview != null) { boolean handled = preview.click((((mousePos.x) - (getX())) - (preview.getX())), (((mousePos.y) - (getY())) - (preview.getY()))); if (handled) { moved(mousePos); return true; } } return false; }",1df2bfc04a947dbfa17ca604691b72e6b14e5cc4,"public boolean click(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint mousePos) { int x = getZoomX(); if (x > 0) { if (((mousePos.x) >= x) && ((mousePos.x) <= (x + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_WIDTH)))) { int y = getZoomY(); if (((mousePos.y) >= y) && ((mousePos.y) <= (y + (3 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))))) { if ((mousePos.y) < (y + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))) { zoomIn(); } else if ((mousePos.y) < (y + (2 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT)))) { zoomOut(); } else { zoomReset(); } } } } com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreview preview = getPreview(mousePos); if (preview != null) { boolean handled = preview.click((((mousePos.x) - (getX())) - (preview.getX())), (((mousePos.y) - (getY())) - (preview.getY()))); if (handled) { moved(mousePos); return true; } } return false; }",08f01caa5cb6419d9455e1b71b0da8b84a5921bc,click(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint),click(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint),5,30,"public boolean click(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint mousePos) { int x = getZoomX(); if (x > 0) { if (((mousePos.x) >= x) && ((mousePos.x) <= (x + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_WIDTH)))) { int y = getZoomY(); if (((mousePos.y) >= y) && ((mousePos.y) <= (y + (3 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))))) { if ((mousePos.y) < (y + (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT))) { zoomIn(); } else if ((mousePos.y) < (y + (2 * (com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreviewManager.ZOOM_ICON_HEIGHT)))) { zoomOut(); } else { zoomReset(); } } } return true; } com.android.ide.eclipse.adt.internal.editors.layout.gle2.RenderPreview preview = getPreview(mousePos); if (preview != null) { boolean handled = preview.click((((mousePos.x) - (getX())) - (preview.getX())), (((mousePos.y) - (getY())) - (preview.getY()))); if (handled) { moved(mousePos); return true; } } return false; }",b67c1777fb41d187c0f22cefe5a78d6854dd174b,click(com.android.ide.eclipse.adt.internal.editors.layout.gle2.ControlPoint),309902,375,378
17745,sdkmanager_libs_sdklib_src_com_android_sdklib_internal_repository_SdkSources.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.Set<com.android.sdklib.internal.repository.SdkSourceCategory> getCategories() { return java.util.Collections.unmodifiableSet(mSources.keySet()); },dd75d19a5ac5bb41a28a1c4a9552992aefe22cbf,,getCategories(),3,8,public com.android.sdklib.internal.repository.SdkSourceCategory[] getCategories() { java.util.ArrayList<com.android.sdklib.internal.repository.SdkSourceCategory> cats = new java.util.ArrayList<com.android.sdklib.internal.repository.SdkSourceCategory>(); for (com.android.sdklib.internal.repository.SdkSourceCategory cat : com.android.sdklib.internal.repository.SdkSourceCategory.values()) { if (cat.getAlwaysDisplay()) { cats.add(cat); } else { java.util.ArrayList<com.android.sdklib.internal.repository.SdkSource> list = mSources.get(cat); if ((list != null) && (!(list.isEmpty()))) { cats.add(cat); } } } return cats.toArray(new com.android.sdklib.internal.repository.SdkSourceCategory[cats.size()]); },adeb582f790227a14f50d8e49011c2a71b5b3d60,getCategories(),435922,41,203
330335,hostsidetests_services_activitymanager_src_android_server_cts_ActivityManagerAppConfigurationTests.java,15.0,"public void testConfigurationUpdatesWhenResizedFromFullscreen() throws java.lang.Exception { if (!(supportsMultiWindowMode())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, ""Skipping test: no multi-window support""); return; } launchActivityInStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); moveActivityToStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); android.server.cts.ActivityManagerAppConfigurationTests.assertSizesAreSane(fullscreenSizes, dockedSizes); }",9ce181df4b1bb77efe078a397d6dd95d630b9a14,"public void testConfigurationUpdatesWhenResizedFromFullscreen() throws java.lang.Exception { if ((!(supportsMultiWindowMode())) || (!(supportsSplitScreenMultiWindow()))) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, ""Skipping test: no multi-window support""); return; } launchActivityInStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); moveActivityToStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); android.server.cts.ActivityManagerAppConfigurationTests.assertSizesAreSane(fullscreenSizes, dockedSizes); }",912b327b84154a75c6fb85da34b384d089f57494,testConfigurationUpdatesWhenResizedFromFullscreen(),testConfigurationUpdatesWhenResizedFromFullscreen(),2,15,"public void testConfigurationUpdatesWhenResizedFromFullscreen() throws java.lang.Exception { if (!(supportsSplitScreenMultiWindow())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, ""Skipping test: no multi-window support""); return; } launchActivityInStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); final android.server.cts.ReportedSizes fullscreenSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.FULLSCREEN_WORKSPACE_STACK_ID); moveActivityToStack(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); final android.server.cts.ReportedSizes dockedSizes = getActivityDisplaySize(android.server.cts.ActivityManagerAppConfigurationTests.RESIZEABLE_ACTIVITY_NAME, android.server.cts.DOCKED_STACK_ID); android.server.cts.ActivityManagerAppConfigurationTests.assertSizesAreSane(fullscreenSizes, dockedSizes); }",d9104bc100a4bcd8a7b462c9ee5e2048a18d5aa8,testConfigurationUpdatesWhenResizedFromFullscreen(),224242,295,286
113523,java_tests_ImageProcessing2_src_com_android_rs_image_ImageProcessingActivity2.java,3.0,"@java.lang.Override public void handleMessage(android.os.Message msg) { if (mTestNameChanged) { getActionBar().setTitle((""IP-Compat test: "" + (mTestName))); } if ((mDisplayedBitmap) == 0) { mDisplayView.setImageBitmap(mBitmapOut1); } else { mDisplayView.setImageBitmap(mBitmapOut2); } mDisplayedBitmap ^= 1; mDisplayView.invalidate(); }",6d2121351ee267af716afc1445cf88f5afa279d9,"@java.lang.Override public void handleMessage(android.os.Message msg) { if (mTestNameChanged) { getActionBar().setTitle((""IP-Compat test: "" + (mTestName))); } if (!(mToggleIO)) { if ((mDisplayedBitmap) == 0) { mDisplayView.setImageBitmap(mBitmapOut1); } else { mDisplayView.setImageBitmap(mBitmapOut2); } mDisplayedBitmap ^= 1; mDisplayView.invalidate(); } else { synchronized(this) { if (((mRS) == null) || ((mOutPixelsAllocationIO) == null)) { return; } if ((mOutDisplayAllocationIO) != (mOutPixelsAllocationIO)) { mOutDisplayAllocationIO.copyFrom(mOutPixelsAllocationIO); } mOutDisplayAllocationIO.ioSend(); mDisplayViewIO.invalidate(); } } }",be08fa9a86ffe9f5dd05e271a1f981a22c900ec9,handleMessage(android.os.Message),handleMessage(android.os.Message),4,2,"@java.lang.Override public void handleMessage(android.os.Message msg) { if (mTestNameChanged) { getActionBar().setTitle((""IP-Compat test: "" + (mTestName))); } if (!(mToggleIO)) { if ((mDisplayedBitmap) == 0) { mDisplayView.setImageBitmap(mBitmapOut1); } else { mDisplayView.setImageBitmap(mBitmapOut2); } mDisplayedBitmap ^= 1; mDisplayView.invalidate(); } else { synchronized(this) { if (((mRS) == null) || ((mOutPixelsAllocationIO) == null)) { return; } if ((mOutDisplayAllocationIO) != (mOutPixelsAllocationIO)) { mOutDisplayAllocationIO.copyFrom(mOutPixelsAllocationIO); } mOutDisplayAllocationIO.ioSend(); } } }",cd52d5ad3747ee8104ed3a096334d7f30fada099,handleMessage(android.os.Message),189805,184,177
307603,hostsidetests_services_activitymanager_src_android_server_cts_ActivityManagerDockedStackTests.java,1.0,"public void testLaunchToSideSingleInstance() throws java.lang.Exception { launchTargetToSide(android.server.cts.ActivityManagerDockedStackTests.SINGLE_INSTANCE_ACTIVITY_NAME, false); }",88485a6fcd2936fa2af8f53bb369ab1c3d17deb7,"public void testLaunchToSideSingleInstance() throws java.lang.Exception { if (!(supportsMultiWindow())) { return; } launchTargetToSide(android.server.cts.ActivityManagerDockedStackTests.SINGLE_INSTANCE_ACTIVITY_NAME, false); }",dbf3310c36da1fbf3371eca847e0ab27c8a118d4,testLaunchToSideSingleInstance(),testLaunchToSideSingleInstance(),8,1,"public void testLaunchToSideSingleInstance() throws java.lang.Exception { if (!(supportsMultiWindowMode())) { com.android.tradefed.log.LogUtil.CLog.logAndDisplay(LogLevel.INFO, ""Skipping test: no multi-window support""); return; } launchTargetToSide(android.server.cts.ActivityManagerDockedStackTests.SINGLE_INSTANCE_ACTIVITY_NAME, false); }",95eee19de8f3c9964d3bd090e37634aba9420bc1,testLaunchToSideSingleInstance(),404076,55,90
99283,login_src_com_google_gct_login_ui_UsersListCellRenderer.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static boolean inPlayConsoleUrl(java.awt.Point point, int activeIndex) { int playYStart = 70 + (68 * activeIndex); int playYEnd = 89 + (68 * activeIndex); int playXStart = 116; int playXEnd = 116 + 188; if (((((point.getX()) > playXStart) && ((point.getX()) < playXEnd)) && ((point.getY()) > playYStart)) && ((point.getY()) < playYEnd)) { return true; } return false; }",68dbca1372563d9a5ca019da50451536bac6c7d3,,"inPlayConsoleUrl(java.awt.Point,int)",7,6,"public boolean inPlayConsoleUrl(java.awt.Point point, int activeIndex) { double playYStart = (((((VGAP) + (ACTIVE_IMAGE_HEIGHT)) - (PLAY_LABEL_DIMENSION.getHeight())) - (CLOUD_LABEL_DIMENSION.getHeight())) - 2) + ((MAIN_PANEL_DIMENSION.getHeight()) * activeIndex); double playYEnd = playYStart + (PLAY_LABEL_DIMENSION.getHeight()); double playXStart = ((ACTIVE_IMAGE_WIDTH) + (HGAP)) + (VGAP); double playXEnd = playXStart + (PLAY_LABEL_DIMENSION.getWidth()); if (((((point.getX()) > playXStart) && ((point.getX()) < playXEnd)) && ((point.getY()) > playYStart)) && ((point.getY()) < playYEnd)) { return true; } return false; }",db0804a2bc5e929be2972ce5e70cac68f0648f50,"inPlayConsoleUrl(java.awt.Point,int)",18950,126,194
243440,test_458-checker-instruction-simplification_src_Main.java,86.0,"public static long SubNeg3(long arg1, long arg2) { long res = 0; long temp = -arg1; for (long i = 0; i < 1; i++) { res += (temp - arg2) - i; } return res; }",3b54f2a84aa6b429a34c71fb668970847e525ebf,"public static long SubNeg3(long arg1, long arg2) { if (Main.doThrow) { throw new java.lang.Error(); } long res = 0; long temp = -arg1; for (long i = 0; i < 1; i++) { res += (temp - arg2) - i; } return res; }",e7a63e16f70330af618e4b085dbfe8da80acb110,"SubNeg3(long,long)","SubNeg3(long,long)",3,37,"public static long $noinline$SubNeg3(long arg1, long arg2) { if (Main.doThrow) { throw new java.lang.Error(); } long res = 0; long temp = -arg1; for (long i = 0; i < 1; i++) { res += (temp - arg2) - i; } return res; }",c6e574cbf333c00065852f4a854b2ba1d179cae5,"$noinline$SubNeg3(long,long)",118189,67,72
400497,org.jacoco.core_src_org_jacoco_core_matcher_IncludeExcludeMatcher.java,,,,public org.jacoco.core.matcher.IncludeExcludeMatcher Exclude(org.jacoco.core.matcher.Matcher<T> exclusion) { exclusions.add(exclusion); return this; },e005ca7bd2fd5b48cc5ea3052623c81e8605da39,,Exclude(org.jacoco.core.matcher.Matcher),10,2,public org.jacoco.core.matcher.IncludeExcludeMatcher exclude(org.jacoco.core.matcher.Predicate<T> exclusion) { exclusions.add(exclusion); return this; },1350795afdc7ed83ba5705d262f7c2dbb2d67ed0,exclude(org.jacoco.core.matcher.Predicate),46310,41,40
186130,jack-tests_tests_com_android_jack_java8_LambdaTest.java,7.0,"@org.junit.Test public void testLamba002() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA002).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",076955d823d8590573bcfc75aa4dcc8fdb987bfd,"@org.junit.Test public void testLamba002() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA002).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",6dd3edc1450be5aa51c4470258b5cec64f89e21f,testLamba002(),testLamba002(),7,7,@org.junit.Test public void testLamba002() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(LAMBDA002).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },1e449fa2487b7bf9d57502922df86d2470a667d7,testLamba002(),466346,81,55
51412,ddmlib_src_main_java_com_android_ddmlib_logcat_LogCatMessage.java,,,,public com.android.ddmlib.Log.LogLevel getLogLevel() { return mLogLevel; },4b030d89090a7421825e77490eea134ea683b8aa,,getLogLevel(),6,1,@com.android.annotations.NonNull public com.android.ddmlib.Log.LogLevel getLogLevel() { return mLogLevel; },e2e6c99bc074532f6acdcb1e7f6c39018ad12b2e,getLogLevel(),474554,21,29
42984,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_layout_configuration_ConfigurationChooser.java,,,,"private java.lang.String getDeviceLabel(@com.android.annotations.Nullable com.android.sdklib.devices.Device device, boolean brief) { if (device == null) { return """"; } java.lang.String name = device.getName(); if (brief) { int nexus = name.indexOf(""Nexus""); if (nexus != (-1)) { int begin = name.indexOf('('); if (begin != (-1)) { begin++; int end = name.indexOf(')', begin); if (end != (-1)) { return name.substring(begin, end).trim(); } } } } return name; }",5d5a682b4e250c109cb32a374de55b2f77e4615e,,"getDeviceLabel(com.android.sdklib.devices.Device,boolean)",2,43,"public static java.lang.String getDeviceLabel(@com.android.annotations.Nullable com.android.sdklib.devices.Device device, boolean brief) { if (device == null) { return """"; } java.lang.String name = device.getName(); if (brief) { int nexus = name.indexOf(""Nexus""); if (nexus != (-1)) { int begin = name.indexOf('('); if (begin != (-1)) { begin++; int end = name.indexOf(')', begin); if (end != (-1)) { return name.substring(begin, end).trim(); } } } } return name; }",2d67fc6df07cb5f0c0e37b46d4bdd421faa698b8,"getDeviceLabel(com.android.sdklib.devices.Device,boolean)",311778,140,141
128670,src_com_android_nfc_cardemulation_RegisteredNfcFServicesCache.java,,,,"private java.lang.String generateRandomNfcid2() { long min = 0L; long max = 281474976710655L; long randomNfcid2 = ((long) (java.lang.Math.floor(((java.lang.Math.random()) * ((max - min) + 1))))) + min; return java.lang.String.format(""02FE%02X%02X%02X%02X%02X%02X"", ((randomNfcid2 >> (8 * 5)) & 255), ((randomNfcid2 >> (8 * 4)) & 255), ((randomNfcid2 >> (8 * 3)) & 255), ((randomNfcid2 >> (8 * 2)) & 255), ((randomNfcid2 >> (8 * 1)) & 255), ((randomNfcid2 >> (8 * 0)) & 255)); }",3ff006c68499a1060a1fcb2260689e10f8eba52d,,generateRandomNfcid2(),10,4,"private java.lang.String generateRandomNfcid2() { long min = 0L; long max = 281474976710655L; long randomNfcid2 = ((long) (java.lang.Math.floor(((java.lang.Math.random()) * ((max - min) + 1))))) + min; return java.lang.String.format(""02FE%02X%02X%02X%02X%02X%02X"", ((randomNfcid2 >>> (8 * 5)) & 255), ((randomNfcid2 >>> (8 * 4)) & 255), ((randomNfcid2 >>> (8 * 3)) & 255), ((randomNfcid2 >>> (8 * 2)) & 255), ((randomNfcid2 >>> (8 * 1)) & 255), ((randomNfcid2 >>> (8 * 0)) & 255)); }",5150f5c0dd99542d4a96cbd95f2b17b03628e440,generateRandomNfcid2(),148769,196,190
318785,jack_src_com_android_jack_backend_dex_ClassDefItemBuilder.java,1.0,"@javax.annotation.Nonnull private com.android.jack.dx.dex.file.ClassDefItem createClassDefItem(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) throws com.android.jack.ir.ast.JTypeLookupException { com.android.jack.dx.rop.cst.CstType thisClass = com.android.jack.backend.dex.rop.RopHelper.getCstType(type); com.android.jack.dx.rop.cst.CstType superclassType = com.android.jack.backend.dex.ClassDefItemBuilder.createSuperClass(type); int accessFlags = getDxAccessFlagsForType(type); com.android.jack.dx.rop.type.TypeList interfaces = com.android.jack.backend.dex.ClassDefItemBuilder.createInterfacesList(type); com.android.jack.dx.rop.cst.CstString sourceFile = null; if (emitSourceFileInfo) { sourceFile = com.android.jack.backend.dex.ClassDefItemBuilder.createSourceFile(type); } com.android.jack.dx.dex.file.ClassDefItem classDefItem = new com.android.jack.dx.dex.file.ClassDefItem(thisClass, accessFlags, superclassType, interfaces, sourceFile); return classDefItem; }",ebf6a846957b8bcfadef262c0cf84c97ec2928ff,"@javax.annotation.Nonnull private com.android.jack.dx.dex.file.ClassDefItem createClassDefItem(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) throws com.android.jack.ir.ast.JTypeLookupException { com.android.jack.dx.rop.type.Type thisClass = com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx(type); com.android.jack.dx.rop.type.Type superclassType = com.android.jack.backend.dex.ClassDefItemBuilder.createSuperClass(type); int accessFlags = getDxAccessFlagsForType(type); com.android.jack.dx.rop.type.TypeList interfaces = com.android.jack.backend.dex.ClassDefItemBuilder.createInterfacesList(type); com.android.jack.dx.rop.cst.CstString sourceFile = null; if (emitSourceFileInfo) { sourceFile = com.android.jack.backend.dex.ClassDefItemBuilder.createSourceFile(type); } com.android.jack.dx.dex.file.ClassDefItem classDefItem = new com.android.jack.dx.dex.file.ClassDefItem(thisClass, accessFlags, superclassType, interfaces, sourceFile); return classDefItem; }",0e548baa8f68f0f116fd1947bc69817afb8ed4ed,createClassDefItem(com.android.jack.ir.ast.JDefinedClassOrInterface),createClassDefItem(com.android.jack.ir.ast.JDefinedClassOrInterface),4,1,"@javax.annotation.Nonnull private com.android.jack.dx.dex.file.ClassDefItem createClassDefItem(@javax.annotation.Nonnull com.android.jack.ir.ast.JDefinedClassOrInterface type) throws com.android.jack.ir.ast.JTypeLookupException { com.android.jack.dx.rop.cst.CstString sourceFile = null; if (emitSourceFileInfo) { sourceFile = com.android.jack.backend.dex.ClassDefItemBuilder.createSourceFile(type); } return new com.android.jack.dx.dex.file.ClassDefItem(com.android.jack.backend.dex.rop.RopHelper.convertTypeToDx(type), getDxAccessFlagsForType(type), com.android.jack.backend.dex.ClassDefItemBuilder.createSuperClass(type), com.android.jack.backend.dex.ClassDefItemBuilder.createInterfacesList(type), sourceFile); }",1e5810388410229fd962c9b027f84bad4e4011f5,createClassDefItem(com.android.jack.ir.ast.JDefinedClassOrInterface),439801,301,212
273789,service_java_com_android_server_wifi_WifiNative.java,36.0,"@java.lang.Override public boolean equals(java.lang.Object otherObj) { if ((this) == otherObj) { return true; } else if ((otherObj == null) || ((getClass()) != (otherObj.getClass()))) { return false; } com.android.server.wifi.WifiNative.PnoNetwork other = ((com.android.server.wifi.WifiNative.PnoNetwork) (otherObj)); return ((((java.util.Objects.equals(ssid, other.ssid)) && ((networkId) == (other.networkId))) && ((priority) == (other.priority))) && ((flags) == (other.flags))) && ((auth_bit_field) == (other.auth_bit_field)); }",3a544d682d1245cd888aba43d82654e4329cd4da,"@java.lang.Override public boolean equals(java.lang.Object otherObj) { if ((this) == otherObj) { return true; } else if ((otherObj == null) || ((getClass()) != (otherObj.getClass()))) { return false; } com.android.server.wifi.WifiNative.PnoNetwork other = ((com.android.server.wifi.WifiNative.PnoNetwork) (otherObj)); return (((java.util.Objects.equals(ssid, other.ssid)) && ((priority) == (other.priority))) && ((flags) == (other.flags))) && ((auth_bit_field) == (other.auth_bit_field)); }",88e13cc77841ba98ab56f96a67eead13dc027a45,equals(java.lang.Object),equals(java.lang.Object),8,37,"@java.lang.Override public boolean equals(java.lang.Object otherObj) { if ((this) == otherObj) { return true; } else if ((otherObj == null) || ((getClass()) != (otherObj.getClass()))) { return false; } com.android.server.wifi.WifiNative.PnoNetwork other = ((com.android.server.wifi.WifiNative.PnoNetwork) (otherObj)); return ((java.util.Objects.equals(ssid, other.ssid)) && ((flags) == (other.flags))) && ((auth_bit_field) == (other.auth_bit_field)); }",5f3cad3677885664b12d15efec48d3df97205ad9,equals(java.lang.Object),485471,159,149
252478,java_tests_RsTest_src_com_android_rs_test_UT_array_alloc.java,0.0,"public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_array_alloc s = new com.android.rs.test.ScriptC_array_alloc(pRS); pRS.setMessageHandler(mRsMessage); int dimX = s.get_dimX(); com.android.rs.test.Allocation[] Arr = new com.android.rs.test.Allocation[dimX]; com.android.rs.test.Type.Builder typeBuilder = new com.android.rs.test.Type.Builder(pRS, com.android.rs.test.Element.I32(pRS)); com.android.rs.test.Type T = typeBuilder.setX(1).create(); for (int i = 0; i < dimX; i++) { com.android.rs.test.Allocation A = com.android.rs.test.Allocation.createTyped(pRS, T); Arr[i] = A; } s.set_a(Arr); s.invoke_array_alloc_test(); pRS.finish(); waitForMessage(); pRS.destroy(); passTest(); }",1b9cccbb198c14de5aed0369c25e962fd6c86024,"public void run() { android.renderscript.RenderScript pRS = android.renderscript.RenderScript.create(mCtx); com.android.rs.test.ScriptC_array_alloc s = new com.android.rs.test.ScriptC_array_alloc(pRS); pRS.setMessageHandler(mRsMessage); int dimX = s.get_dimX(); android.renderscript.Allocation[] Arr = new android.renderscript.Allocation[dimX]; android.renderscript.Type.Builder typeBuilder = new android.renderscript.Type.Builder(pRS, android.renderscript.Element.I32(pRS)); android.renderscript.Type T = typeBuilder.setX(1).create(); for (int i = 0; i < dimX; i++) { android.renderscript.Allocation A = android.renderscript.Allocation.createTyped(pRS, T); Arr[i] = A; } s.set_a(Arr); s.invoke_array_alloc_test(); pRS.finish(); waitForMessage(); pRS.destroy(); passTest(); }",f07fa583e109a9977188103f9cc3f0f5348b6836,run(),run(),7,0,"public void run() { com.android.rs.test.RenderScript pRS = com.android.rs.test.RenderScript.create(mCtx); com.android.rs.test.ScriptC_array_alloc s = new com.android.rs.test.ScriptC_array_alloc(pRS); pRS.setMessageHandler(mRsMessage); int dimX = s.get_dimX(); com.android.rs.test.Allocation[] Arr = new com.android.rs.test.Allocation[dimX]; com.android.rs.test.Type.Builder typeBuilder = new com.android.rs.test.Type.Builder(pRS, com.android.rs.test.Element.I32(pRS)); com.android.rs.test.Type T = typeBuilder.setX(1).create(); for (int i = 0; i < dimX; i++) { com.android.rs.test.Allocation A = com.android.rs.test.Allocation.createTyped(pRS, T); Arr[i] = A; } s.set_a(Arr); s.invoke_array_alloc_test(); pRS.finish(); waitForMessage(); pRS.destroy(); passTest(); }",1b9cccbb198c14de5aed0369c25e962fd6c86024,run(),379512,243,273
20831,src_com_android_mms_model_ImageModel.java,1.0,"@java.lang.Override protected void resizeMedia(int byteLimit, long messageId) throws com.google.android.mms.MmsException { com.android.mms.ui.UriImage image = new com.android.mms.ui.UriImage(mContext, getUri()); if (image == null) { throw new com.android.mms.ExceedMessageSizeException((""No room to resize picture: "" + (getUri()))); } com.google.android.mms.pdu.PduPart part = image.getResizedImageAsPart(com.android.mms.MmsConfig.getMaxImageWidth(), com.android.mms.MmsConfig.getMaxImageHeight(), byteLimit); if (part == null) { throw new com.android.mms.ExceedMessageSizeException((""Not enough memory to turn image into part: "" + (getUri()))); } com.google.android.mms.pdu.PduPersister persister = com.google.android.mms.pdu.PduPersister.getPduPersister(mContext); this.mSize = part.getData().length; android.net.Uri newUri = persister.persistPart(part, messageId); setUri(newUri); }",b143fe61057d1698ee41dda4da472e38233d19d1,"@java.lang.Override protected void resizeMedia(int byteLimit, long messageId) throws com.google.android.mms.MmsException { com.android.mms.ui.UriImage image = new com.android.mms.ui.UriImage(mContext, getUri()); if (image == null) { throw new com.android.mms.ExceedMessageSizeException((""No room to resize picture: "" + (getUri()))); } com.google.android.mms.pdu.PduPart part = image.getResizedImageAsPart(com.android.mms.MmsConfig.getMaxImageWidth(), com.android.mms.MmsConfig.getMaxImageHeight(), byteLimit); if (part == null) { throw new com.android.mms.ExceedMessageSizeException((""Not enough memory to turn image into part: "" + (getUri()))); } java.lang.String src = getSrc(); byte[] srcBytes = src.getBytes(); part.setContentLocation(srcBytes); int period = src.lastIndexOf("".""); byte[] contentId = (period != (-1)) ? src.substring(0, period).getBytes() : srcBytes; part.setContentId(contentId); com.google.android.mms.pdu.PduPersister persister = com.google.android.mms.pdu.PduPersister.getPduPersister(mContext); this.mSize = part.getData().length; android.net.Uri newUri = persister.persistPart(part, messageId); setUri(newUri); }",67c54bc1f2d2feabccc205309095f1712f865839,"resizeMedia(int,long)","resizeMedia(int,long)",6,1,"@java.lang.Override protected void resizeMedia(int byteLimit, long messageId) throws com.google.android.mms.MmsException { com.android.mms.ui.UriImage image = new com.android.mms.ui.UriImage(mContext, getUri()); if (image == null) { throw new com.android.mms.ExceedMessageSizeException((""No room to resize picture: "" + (getUri()))); } com.google.android.mms.pdu.PduPart part = image.getResizedImageAsPart(com.android.mms.MmsConfig.getMaxImageWidth(), com.android.mms.MmsConfig.getMaxImageHeight(), byteLimit); if (part == null) { throw new com.android.mms.ExceedMessageSizeException((""Not enough memory to turn image into part: "" + (getUri()))); } com.google.android.mms.pdu.PduPersister persister = com.google.android.mms.pdu.PduPersister.getPduPersister(mContext); this.mSize = part.getData().length; android.net.Uri newUri = persister.persistPart(part, messageId); setUri(newUri); }",b143fe61057d1698ee41dda4da472e38233d19d1,"resizeMedia(int,long)",296219,339,270
349432,service_java_com_android_server_wifi_SupplicantP2pIfaceHal.java,43.0,"public java.lang.String startWpsPinDisplay(java.lang.String groupIfName, java.lang.String bssid) { synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure(""startWpsPinDisplay""))) return null; if (groupIfName == null) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ""Group name required when requesting WPS KEYPAD.""); return null; } byte[] macAddress = null; if (bssid != null) { try { macAddress = com.android.server.wifi.util.NativeUtil.macAddressToByteArray(bssid); } catch (java.lang.Exception e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ""Could not parse BSSID."", e); return null; } } com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.String> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult(((((""startWpsPinDisplay("" + groupIfName) + "", "") + bssid) + "")"")); try { mISupplicantP2pIface.startWpsPinDisplay(groupIfName, macAddress, (android.hardware.wifi.supplicant.V1_0.SupplicantStatus status,java.lang.String generatedPin) -> { result.setResult(status, generatedPin); }); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""ISupplicantP2pIface exception: "" + e)); supplicantServiceDiedHandler(); } return result.getResult(); } }",eff1b63b0e6ede889a43d684d509d444e9e8881d,"public java.lang.String startWpsPinDisplay(java.lang.String groupIfName, java.lang.String bssid) { if ((android.text.TextUtils.isEmpty(groupIfName)) || (android.text.TextUtils.isEmpty(bssid))) return """"; synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure(""startWpsPinDisplay""))) return null; if (groupIfName == null) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ""Group name required when requesting WPS KEYPAD.""); return null; } byte[] macAddress = null; if (bssid != null) { try { macAddress = com.android.server.wifi.util.NativeUtil.macAddressToByteArray(bssid); } catch (java.lang.Exception e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ""Could not parse BSSID."", e); return null; } } com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.String> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult(((((""startWpsPinDisplay("" + groupIfName) + "", "") + bssid) + "")"")); try { mISupplicantP2pIface.startWpsPinDisplay(groupIfName, macAddress, (android.hardware.wifi.supplicant.V1_0.SupplicantStatus status,java.lang.String generatedPin) -> { result.setResult(status, generatedPin); }); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""ISupplicantP2pIface exception: "" + e)); supplicantServiceDiedHandler(); } return result.getResult(); } }",ac347ca071962a9ed0e67815d9a5f10d9a6cac9f,"startWpsPinDisplay(java.lang.String,java.lang.String)","startWpsPinDisplay(java.lang.String,java.lang.String)",17,42,"public java.lang.String startWpsPinDisplay(java.lang.String groupIfName, java.lang.String bssid) { if ((android.text.TextUtils.isEmpty(groupIfName)) || (android.text.TextUtils.isEmpty(bssid))) return null; synchronized(mLock) { if (!(checkSupplicantP2pIfaceAndLogFailure(""startWpsPinDisplay""))) return null; if (groupIfName == null) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ""Group name required when requesting WPS KEYPAD.""); return null; } byte[] macAddress = null; if (bssid != null) { try { macAddress = com.android.server.wifi.util.NativeUtil.macAddressToByteArray(bssid); } catch (java.lang.Exception e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, ""Could not parse BSSID."", e); return null; } } com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult<java.lang.String> result = new com.android.server.wifi.SupplicantP2pIfaceHal.SupplicantResult(((((""startWpsPinDisplay("" + groupIfName) + "", "") + bssid) + "")"")); try { mISupplicantP2pIface.startWpsPinDisplay(groupIfName, macAddress, (android.hardware.wifi.supplicant.V1_0.SupplicantStatus status,java.lang.String generatedPin) -> { result.setResult(status, generatedPin); }); } catch (android.os.RemoteException e) { android.util.Log.e(com.android.server.wifi.SupplicantP2pIfaceHal.TAG, (""ISupplicantP2pIface exception: "" + e)); supplicantServiceDiedHandler(); } return result.getResult(); } }",e7381b96377ac2911d77df6f1034a39176d53378,"startWpsPinDisplay(java.lang.String,java.lang.String)",6610,474,475
591196,tests_telephonytests_src_com_android_internal_telephony_uicc_euicc_EuiccCardTest.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test(expected = com.android.internal.telephony.uicc.euicc.EuiccCardErrorException.class) public void testDeleteProfile_Error() throws com.android.internal.telephony.uicc.euicc.EuiccCardException, com.android.internal.telephony.uicc.euicc.UiccChannelException { int channel = mockLogicalChannelResponses((""BF2D26A024"" + ((""E3105A0A896700000000004523019F700100"" + ""E3105A0A896700000000004523029F700101"") + ""9000"")), ""BF33038001039000""); try { mEuiccCard.deleteProfile(""98760000000000543210""); } catch (com.android.internal.telephony.uicc.euicc.EuiccCardErrorException e) { assertEquals(3, e.getErrorCode()); verifyStoreData(channel, ""BF330C5A0A89670000000000452301""); throw e; } }",8043f3ab9a5bade2cae735021d8403388642d5e3,,testDeleteProfile_Error(),8,32,"@org.junit.Test public void testDeleteProfile_Error() { int channel = mockLogicalChannelResponses(""BF33038001039000""); com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<java.lang.Void> resultCaptor = new com.android.internal.telephony.uicc.euicc.EuiccCardTest.ResultCaptor<>(); mEuiccCard.deleteProfile(""98760000000000543210"", resultCaptor, mHandler); resultCaptor.await(); assertEquals(3, ((com.android.internal.telephony.uicc.euicc.EuiccCardErrorException) (resultCaptor.exception)).getErrorCode()); verifyStoreData(channel, ""BF330C5A0A89670000000000452301""); }",f790df75ce88276eeaa8170a1e5b7875b4edd230,testDeleteProfile_Error(),396904,224,169
143713,build-system_gradle-core_src_main_groovy_com_android_build_gradle_internal_core_MergedNdkConfig.java,7.0,"public void append(@com.android.annotations.NonNull com.android.build.gradle.internal.core.NdkConfig ndkConfig) { if ((ndkConfig.getModuleName()) != null) { moduleName = ndkConfig.getModuleName(); } if ((ndkConfig.getStl()) != null) { stl = ndkConfig.getStl(); } if ((ndkConfig.getAbiFilters()) != null) { if ((abiFilters) == null) { abiFilters = com.google.common.collect.Sets.newHashSetWithExpectedSize(ndkConfig.getAbiFilters().size()); } else { abiFilters.clear(); } abiFilters.addAll(ndkConfig.getAbiFilters()); } if ((cFlags) == null) { cFlags = ndkConfig.getcFlags(); } else if ((ndkConfig.getcFlags()) != null) { cFlags = ((cFlags) + "" "") + (ndkConfig.getcFlags()); } if ((ndkConfig.getLdLibs()) != null) { if ((ldLibs) == null) { ldLibs = com.google.common.collect.Lists.newArrayListWithCapacity(ndkConfig.getLdLibs().size()); } else { ldLibs.clear(); } ldLibs.addAll(ndkConfig.getLdLibs()); } }",957c90ca7f7f32eccc8958238aa6d2298cb369fb,"public void append(@com.android.annotations.NonNull com.android.build.gradle.internal.core.NdkConfig ndkConfig) { if ((ndkConfig.getModuleName()) != null) { moduleName = ndkConfig.getModuleName(); } if ((ndkConfig.getStl()) != null) { stl = ndkConfig.getStl(); } if ((ndkConfig.getParallelJobs()) != null) { parallelJobs = ndkConfig.getParallelJobs(); } if ((ndkConfig.getAbiFilters()) != null) { if ((abiFilters) == null) { abiFilters = com.google.common.collect.Sets.newHashSetWithExpectedSize(ndkConfig.getAbiFilters().size()); } else { abiFilters.clear(); } abiFilters.addAll(ndkConfig.getAbiFilters()); } if ((cFlags) == null) { cFlags = ndkConfig.getcFlags(); } else if ((ndkConfig.getcFlags()) != null) { cFlags = ((cFlags) + "" "") + (ndkConfig.getcFlags()); } if ((ndkConfig.getLdLibs()) != null) { if ((ldLibs) == null) { ldLibs = com.google.common.collect.Lists.newArrayListWithCapacity(ndkConfig.getLdLibs().size()); } else { ldLibs.clear(); } ldLibs.addAll(ndkConfig.getLdLibs()); } }",10d942e2e6c1b2e5f508578e046e5baa5d9d2be1,append(com.android.build.gradle.internal.core.NdkConfig),append(com.android.build.gradle.internal.core.NdkConfig),2,7,"public void append(@com.android.annotations.NonNull com.android.build.gradle.internal.core.NdkConfig ndkConfig) { if ((ndkConfig.getModuleName()) != null) { moduleName = ndkConfig.getModuleName(); } if ((ndkConfig.getStl()) != null) { stl = ndkConfig.getStl(); } if ((ndkConfig.getJobs()) != null) { jobs = ndkConfig.getJobs(); } if ((ndkConfig.getAbiFilters()) != null) { if ((abiFilters) == null) { abiFilters = com.google.common.collect.Sets.newHashSetWithExpectedSize(ndkConfig.getAbiFilters().size()); } else { abiFilters.clear(); } abiFilters.addAll(ndkConfig.getAbiFilters()); } if ((cFlags) == null) { cFlags = ndkConfig.getcFlags(); } else if ((ndkConfig.getcFlags()) != null) { cFlags = ((cFlags) + "" "") + (ndkConfig.getcFlags()); } if ((ndkConfig.getLdLibs()) != null) { if ((ldLibs) == null) { ldLibs = com.google.common.collect.Lists.newArrayListWithCapacity(ndkConfig.getLdLibs().size()); } else { ldLibs.clear(); } ldLibs.addAll(ndkConfig.getLdLibs()); } }",df7c7269d64f0a223d0b21bfa85ddb99f431d73b,append(com.android.build.gradle.internal.core.NdkConfig),237512,325,322
69830,gradle_src_main_groovy_com_android_build_gradle_internal_dsl_NdkConfigDsl.java,,,,"@com.android.annotations.NonNull public com.android.build.gradle.internal.dsl.NdkConfigDsl abiFilters(java.lang.String... filters) { java.util.Collections.addAll(abiFilters, filters); return this; }",372b0dc4d19471b3b48231e20f2c462af3ea77c4,,abiFilters(java.lang.String[]),4,10,"@com.android.annotations.NonNull public com.android.build.gradle.internal.dsl.NdkConfigDsl abiFilters(java.lang.String... filters) { if ((abiFilters) == null) { abiFilters = com.google.common.collect.Sets.newHashSetWithExpectedSize(2); } java.util.Collections.addAll(abiFilters, filters); return this; }",7751b11853cd73787a9eea4e1a905e2a9d96711f,abiFilters(java.lang.String[]),518029,56,87
606338,core_java_android_net_NetworkCapabilities.java,61.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void addUnwantedCapability(@android.net.NetworkCapabilities.NetCapability int capability) { checkCapabilityRange(capability); mUnwantedNetworkCapabilities |= 1 << capability; removeCapability(capability); },2c01406ad1f13a67f5b85d0aaebf22e6cc0faf88,,addUnwantedCapability(int),14,23,public void addUnwantedCapability(@android.net.NetworkCapabilities.NetCapability int capability) { android.net.NetworkCapabilities.checkValidCapability(capability); mUnwantedNetworkCapabilities |= 1 << capability; mNetworkCapabilities &= ~(1 << capability); },254d20bf752e0d2270c9d81b15b3305a57254815,addUnwantedCapability(int),372192,42,54
328671,service_java_com_android_server_wifi_WificondControl.java,,,,"public android.net.wifi.IApInterface setupDriverForSoftApMode(android.net.wifi.IWificond wificond) { if (wificond == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Failed to get reference to wificond""); return null; } android.net.wifi.IApInterface apInterface = null; try { apInterface = wificond.createApInterface(); } catch (android.os.RemoteException e1) { } if (apInterface == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Could not get IApInterface instance from wificond""); return null; } else { android.os.Binder.allowBlocking(apInterface.asBinder()); } mWificond = wificond; mApInterface = apInterface; return apInterface; }",227c414c3d55c5a22b45ead17cf8cd772bf51ca0,,setupDriverForSoftApMode(android.net.wifi.IWificond),22,4,"public android.net.wifi.IApInterface setupDriverForSoftApMode() { mWificond = mWifiInjector.makeWificond(); if ((mWificond) == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Failed to get reference to wificond""); return null; } android.net.wifi.IApInterface apInterface = null; try { apInterface = mWificond.createApInterface(); } catch (android.os.RemoteException e1) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Failed to get IApInterface due to remote exception""); return null; } if (apInterface == null) { android.util.Log.e(com.android.server.wifi.WificondControl.TAG, ""Could not get IApInterface instance from wificond""); return null; } android.os.Binder.allowBlocking(apInterface.asBinder()); mApInterface = apInterface; return apInterface; }",110e9fa016a8eed69a2a79b20e3d629f2a7992e7,setupDriverForSoftApMode(),28399,202,234
647205,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,25.0,"public void testIkeOverUdpEncapSocket() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IpSecManagerTest.IPV4_LOOPBACK); android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker(); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket()) { int localPort = android.net.cts.IpSecManagerTest.getPort(encapSocket.getSocket()); byte[] dataWithEspHeader = new byte[(android.net.cts.IpSecManagerTest.TEST_DATA.length) + 8]; java.lang.System.arraycopy(android.net.cts.IpSecManagerTest.TEST_DATA, 0, dataWithEspHeader, 8, android.net.cts.IpSecManagerTest.TEST_DATA.length); byte[] in = new byte[dataWithEspHeader.length]; android.system.Os.sendto(encapSocket.getSocket(), dataWithEspHeader, 0, dataWithEspHeader.length, 0, local, localPort); android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertArrayEquals(""Encapsulated data did not match."", dataWithEspHeader, in); int ipHdrLen = (local instanceof java.net.Inet6Address) ? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int expectedPacketSize = ((dataWithEspHeader.length) + (android.net.cts.IpSecManagerTest.UDP_HDRLEN)) + ipHdrLen; android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); } }",e751681793535dbf0d77c5724d993fbb6b15f3ce,"public void testIkeOverUdpEncapSocket() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker(); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket()) { int localPort = getPort(encapSocket.getSocket()); byte[] dataWithEspHeader = new byte[(TEST_DATA.length) + 8]; java.lang.System.arraycopy(android.net.cts.TEST_DATA, 0, dataWithEspHeader, 8, TEST_DATA.length); byte[] in = new byte[dataWithEspHeader.length]; android.system.Os.sendto(encapSocket.getSocket(), dataWithEspHeader, 0, dataWithEspHeader.length, 0, local, localPort); android.system.Os.read(encapSocket.getSocket(), in, 0, in.length); assertArrayEquals(""Encapsulated data did not match."", dataWithEspHeader, in); int ipHdrLen = (local instanceof java.net.Inet6Address) ? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int expectedPacketSize = ((dataWithEspHeader.length) + (android.net.cts.IpSecManagerTest.UDP_HDRLEN)) + ipHdrLen; android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); } }",c2743ae28bd7506d8b7c16ffee4e1c5f08496018,testIkeOverUdpEncapSocket(),testIkeOverUdpEncapSocket(),15,37,"public void testIkeOverUdpEncapSocket() throws java.lang.Exception { java.net.InetAddress local = java.net.InetAddress.getByName(android.net.cts.IPV4_LOOPBACK); android.net.cts.IpSecManagerTest.StatsChecker.initStatsChecker(); try (android.net.IpSecManager.UdpEncapsulationSocket encapSocket = mISM.openUdpEncapsulationSocket()) { int localPort = getPort(encapSocket.getFileDescriptor()); byte[] dataWithEspHeader = new byte[(TEST_DATA.length) + 8]; java.lang.System.arraycopy(android.net.cts.TEST_DATA, 0, dataWithEspHeader, 8, TEST_DATA.length); byte[] in = new byte[dataWithEspHeader.length]; android.system.Os.sendto(encapSocket.getFileDescriptor(), dataWithEspHeader, 0, dataWithEspHeader.length, 0, local, localPort); android.system.Os.read(encapSocket.getFileDescriptor(), in, 0, in.length); assertArrayEquals(""Encapsulated data did not match."", dataWithEspHeader, in); int ipHdrLen = (local instanceof java.net.Inet6Address) ? android.net.cts.IpSecManagerTest.IP6_HDRLEN : android.net.cts.IpSecManagerTest.IP4_HDRLEN; int expectedPacketSize = ((dataWithEspHeader.length) + (android.net.cts.IpSecManagerTest.UDP_HDRLEN)) + ipHdrLen; android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedPacketSize, 1, expectedPacketSize, 1); } }",8b245ef2b308e08f83398825ff4fb5c8fd2eed11,testIkeOverUdpEncapSocket(),381484,420,420
87558,luni_src_main_java_java_util_zip_ZipInputStream.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String readString(int byteLength, java.nio.charset.Charset charset) throws java.io.IOException { if (byteLength > (stringBytesBuf.length)) { stringBytesBuf = new byte[byteLength]; stringCharBuf = new char[byteLength]; } libcore.io.Streams.readFully(in, stringBytesBuf, 0, byteLength); java.lang.String name; if (charset == (java.nio.charset.StandardCharsets.UTF_8)) { name = java.nio.charset.ModifiedUtf8.decode(stringBytesBuf, stringCharBuf, 0, byteLength); } else { name = new java.lang.String(stringBytesBuf, 0, byteLength, charset); } return name; }",531159c1e304bb6a3f5e30532b712a9a7266afa8,,"readString(int,java.nio.charset.Charset)",4,8,"private java.lang.String readString(int byteLength, java.nio.charset.Charset charset) throws java.io.IOException { if (byteLength > (stringBytesBuf.length)) { stringBytesBuf = new byte[byteLength]; } libcore.io.Streams.readFully(in, stringBytesBuf, 0, byteLength); if (charset == (java.nio.charset.StandardCharsets.UTF_8)) { if (byteLength > (stringCharBuf.length)) { stringCharBuf = new char[byteLength]; } return java.nio.charset.ModifiedUtf8.decode(stringBytesBuf, stringCharBuf, 0, byteLength); } else { return new java.lang.String(stringBytesBuf, 0, byteLength, charset); } }",c6314c1be766c759ae327ee687a16382cb761115,"readString(int,java.nio.charset.Charset)",466792,159,162
101914,benchmarks_src_benchmarks_regression_MathBenchmark.java,26.0,public void timeSinh(int reps) { for (int rep = 0; rep < reps; ++rep) { java.lang.Math.sinh(d); } },4cb74c54033f7ad031ef9b739b7225d2c73f91b5,public void timeSinh(int reps) { double result = d; for (int rep = 0; rep < reps; ++rep) { result = java.lang.Math.sinh(d); } return result; },b55040dc017eec0dd5c305010ea4b8e5ca3627d7,timeSinh(int),timeSinh(int),3,26,public double timeSinh(int reps) { double result = d; for (int rep = 0; rep < reps; ++rep) { result = java.lang.Math.sinh(d); } return result; },459ddd827c1dec84c9a33e1c01d3261f8be4e385,timeSinh(int),214707,51,51
101914,benchmarks_src_benchmarks_regression_MathBenchmark.java,37.0,public void timeSignumF(int reps) { for (int rep = 0; rep < reps; ++rep) { java.lang.Math.signum(f); } },e5a3436cda789daac81758b940a45406de221c05,public void timeSignumF(int reps) { float result = f; for (int rep = 0; rep < reps; ++rep) { result = java.lang.Math.signum(f); } return result; },c4ca56dbbe7eaf3bd37c39d53fe69d12a250c74d,timeSignumF(int),timeSignumF(int),3,37,public float timeSignumF(int reps) { float result = f; for (int rep = 0; rep < reps; ++rep) { result = java.lang.Math.signum(f); } return result; },c8cd1ecb38725645d60d7a7daa187c96d7b7af0a,timeSignumF(int),214676,49,49
19545,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_editors_ui_GridDataHelper.java,,,,public com.android.ide.eclipse.adt.internal.editors.ui.GridDataHelper wHint(int w) { mGD.widthHint = w; return this; },1811b3d197a5871d53f1828b3c07a7c22e71e44a,,wHint(int),3,3,public com.android.ide.eclipse.adt.internal.editors.ui.GridDataBuilder wHint(int w) { mGD.widthHint = w; return this; },e64498a3d612a65c53be5b84e90e65dddd2bc02e,wHint(int),105465,42,42
587834,src_main_java_com_android_apksig_DefaultApkSignerEngine.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.android.apksig.DefaultApkSignerEngine.SignerConfig.Builder setApkSignerLineage(com.android.apksig.ApkSignerLineage apkSignerLineage) { throw new sun.reflect.generics.reflectiveObjects.NotImplementedException(); },2c03230642cccf32b30fb32ccb2712e018699009,,setApkSignerLineage(com.android.apksig.ApkSignerLineage),10,57,public com.android.apksig.DefaultApkSignerEngine.SignerConfig.Builder setSigningCertificateLineage(com.android.apksig.SigningCertificateLineage signingCertificateLineage) { throw new java.lang.UnsupportedOperationException(); },9ca0418e1d82a55a9e8e06f355c75ba4cb0fff32,setSigningCertificateLineage(com.android.apksig.SigningCertificateLineage),471859,57,50
136790,services_core_java_com_android_server_updates_SELinuxPolicyInstallReceiver.java,4.0,"private void applyUpdate() throws android.system.ErrnoException, java.io.IOException { android.util.Slog.i(com.android.server.updates.SELinuxPolicyInstallReceiver.TAG, ""Applying SELinux policy""); java.io.File contexts = new java.io.File(updateDir.getParentFile(), ""contexts""); java.io.File current = new java.io.File(updateDir.getParentFile(), ""current""); java.io.File update = new java.io.File(updateDir.getParentFile(), ""update""); java.io.File tmp = new java.io.File(updateDir.getParentFile(), ""tmp""); if (current.exists()) { android.system.Os.symlink(updateDir.getPath(), update.getPath()); android.system.Os.rename(update.getPath(), current.getPath()); } else { android.system.Os.symlink(updateDir.getPath(), current.getPath()); } contexts.mkdirs(); backupContexts(contexts); copyUpdate(contexts); android.system.Os.symlink(contexts.getPath(), tmp.getPath()); android.system.Os.rename(tmp.getPath(), current.getPath()); android.os.SystemProperties.set(""selinux.reload_policy"", ""1""); }",b0f51ec64e7d3e8895604bb87c3a41dcdc03b7d1,"private void applyUpdate() throws android.system.ErrnoException, java.io.IOException { android.util.Slog.i(com.android.server.updates.SELinuxPolicyInstallReceiver.TAG, ""Applying SELinux policy""); java.io.File backup = new java.io.File(updateDir.getParentFile(), ""backup""); java.io.File current = new java.io.File(updateDir.getParentFile(), ""current""); java.io.File tmp = new java.io.File(updateDir.getParentFile(), ""tmp""); if (current.exists()) { deleteRecursive(backup); android.system.Os.rename(current.getPath(), backup.getPath()); } android.system.Os.rename(tmp.getPath(), current.getPath()); android.os.SystemProperties.set(""selinux.reload_policy"", ""1""); }",2fd84ce7173bb336b483c8bc4e39e85defed7347,applyUpdate(),applyUpdate(),3,4,"private void applyUpdate() throws android.system.ErrnoException, java.io.IOException { android.util.Slog.i(com.android.server.updates.SELinuxPolicyInstallReceiver.TAG, ""Applying SELinux policy""); java.io.File backup = new java.io.File(updateDir.getParentFile(), ""backup""); java.io.File current = new java.io.File(updateDir.getParentFile(), ""current""); java.io.File tmp = new java.io.File(updateDir.getParentFile(), ""tmp""); if (current.exists()) { deleteRecursive(backup); android.system.Os.rename(current.getPath(), backup.getPath()); } try { android.system.Os.rename(tmp.getPath(), current.getPath()); android.os.SystemProperties.set(""selinux.reload_policy"", ""1""); } catch (android.system.ErrnoException e) { android.util.Slog.e(com.android.server.updates.SELinuxPolicyInstallReceiver.TAG, ""Could not update selinux policy: "", e); if (backup.exists()) { android.system.Os.rename(backup.getPath(), current.getPath()); } } }",fc8d07c01735337a279369ec0bd029a6748a346c,applyUpdate(),32253,186,266
148495,asset-studio_src_main_java_com_android_assetstudiolib_vectordrawable_vg_VDParser.java,,,,"@java.lang.Override public void parse(com.android.assetstudiolib.vectordrawable.vg.VDTree tree, org.xml.sax.Attributes attributes) { parseSize(tree, attributes); }",b7e435fa378208c4bb8b5727c39c800a40c0d373,,"parse(com.android.assetstudiolib.vectordrawable.vg.VDTree,org.xml.sax.Attributes)",11,23,"@java.lang.Override public void parse(com.android.assetstudiolib.vectordrawable.VdTree tree, org.xml.sax.Attributes attributes) { parseSize(tree, attributes); }",ffaf01d48024b44e0b6d9bfd04ae9816a7c20421,"parse(com.android.assetstudiolib.vectordrawable.VdTree,org.xml.sax.Attributes)",5095,47,44
253791,luni_src_main_java_libcore_io_ForwardingOs.java,77.0,public android.system.StructPasswd getpwnam(java.lang.String name) throws android.system.ErrnoException { return os.getpwnam(name); },df585c5047408b06adf5836fe7d4b51e4dd8a049,public libcore.io.StructPasswd getpwnam(java.lang.String name) throws libcore.io.ErrnoException { return os.getpwnam(name); },7ce5cf725cb0f4591e9e6fb5bcb56a65674e8534,getpwnam(java.lang.String),getpwnam(java.lang.String),8,74,public android.system.StructPasswd getpwnam(java.lang.String name) throws android.system.ErrnoException { return os.getpwnam(name); },df585c5047408b06adf5836fe7d4b51e4dd8a049,getpwnam(java.lang.String),494821,40,38
108516,harmony-tests_src_test_java_org_apache_harmony_tests_java_text_DecimalFormatTest.java,18.0,"public void test_getPositiveSuffix() { java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setPositiveSuffix(""%""); assertTrue(""Incorrect positive prefix"", df.getPositiveSuffix().equals(""%"")); }",33f3ee0880c5aa9ce31f352fa20844ba39f69574,"public void testGetPositiveSuffix() { java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setPositiveSuffix(""%""); assertTrue(""Incorrect positive prefix"", df.getPositiveSuffix().equals(""%"")); }",8a369616aa91a9dd814a3e5046c127f30483920b,test_getPositiveSuffix(),testGetPositiveSuffix(),2,48,"public void test_getPositiveSuffix() { java.text.DecimalFormat df = new java.text.DecimalFormat(); df.setPositiveSuffix(""%""); assertTrue(""Incorrect positive prefix"", df.getPositiveSuffix().equals(""%"")); }",33f3ee0880c5aa9ce31f352fa20844ba39f69574,test_getPositiveSuffix(),84406,45,46
18735,tools_vm-tests_src_dot_junit_opcodes_iget_wide_Test_iget_wide.java,0.0,"public void testVFE16() { try { java.lang.Class.forName(""dot.junit.opcodes.iget_wide.d.T_iget_wide_5""); fail(""expected a verification exception""); } catch (java.lang.Throwable t) { dot.junit.DxUtil.checkVerifyException(t); } }",818817bcbeb9818d1ead8971ff80d7edcd885743,"public void testVFE16() { try { dot.junit.opcodes.iget_wide.d.T_iget_wide_5 t = new dot.junit.opcodes.iget_wide.d.T_iget_wide_5(); t.run(); fail(""expected a IncompatibleClassChangeError exception""); } catch (java.lang.IncompatibleClassChangeError e) { } }",5a8e081f1292c50766ac414722d034c9392e37f5,testVFE16(),testVFE16(),2,0,"public void testVFE16() { try { new dot.junit.opcodes.iget_wide.d.T_iget_wide_5().run(); fail(""expected a IncompatibleClassChangeError exception""); } catch (java.lang.IncompatibleClassChangeError e) { } }",1cc06bdca9f36d1c2b895f69ed4254ba31f4af66,testVFE16(),456412,93,64
81416,tests_tests_renderscript_src_android_renderscript_cts_TestFmax.java,,,,"private void checkFmaxFloat2Float() { android.renderscript.Allocation inX = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inX, 35, 0.0F, 1.0F); android.renderscript.Allocation inY = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32(mRS), android.renderscript.cts.INPUTSIZE); RandomizeWithFloats(inY, 35, 0.0F, 1.0F); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testFmaxFloat2Float(inX, out); verifyResultsFmaxFloat2Float(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFmaxFloat2Float: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, android.renderscript.Element.F32_2(mRS), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testFmaxFloat2Float(inX, out); verifyResultsFmaxFloat2Float(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFmaxFloat2Float: "" + (e.toString()))); } }",5261759d9400694488f0a79892005d37bccf28be,,checkFmaxFloat2Float(),9,10,"private void checkFmaxFloat2FloatFloat2() { android.renderscript.Allocation inX = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 2, -6213853512911014340L); android.renderscript.Allocation inY = CreateRandomAllocation(mRS, Element.DataType.FLOAT_32, 1, -6213853512911014340L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); script.set_gAllocInY(inY); script.forEach_testFmaxFloat2FloatFloat2(inX, out); verifyResultsFmaxFloat2FloatFloat2(inX, inY, out, false); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFmaxFloat2FloatFloat2: "" + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, GetElement(mRS, Element.DataType.FLOAT_32, 2), android.renderscript.cts.INPUTSIZE); scriptRelaxed.set_gAllocInY(inY); scriptRelaxed.forEach_testFmaxFloat2FloatFloat2(inX, out); verifyResultsFmaxFloat2FloatFloat2(inX, inY, out, true); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException((""RenderScript. Can't invoke forEach_testFmaxFloat2FloatFloat2: "" + (e.toString()))); } }",e0240a7ed19e61c194c8d4a94ca087af0adcef3b,checkFmaxFloat2FloatFloat2(),143271,438,386
162651,ddmlib_src_main_java_com_android_ddmlib_BatteryFetcher.java,6.0,"@java.lang.Override public void run() { java.lang.Exception exception = null; try { com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver sysBattReceiver = new com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver(); mDevice.executeShellCommand(""cat /sys/class/power_supply/*/capacity"", sysBattReceiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (!(setBatteryLevel(sysBattReceiver.getBatteryLevel()))) { com.android.ddmlib.BatteryFetcher.BatteryReceiver receiver = new com.android.ddmlib.BatteryFetcher.BatteryReceiver(); mDevice.executeShellCommand(""dumpsys battery"", receiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (setBatteryLevel(receiver.getBatteryLevel())) { return; } } exception = new java.io.IOException(""Unrecognized response to battery level queries""); } catch (com.android.ddmlib.TimeoutException e) { exception = e; } catch (com.android.ddmlib.AdbCommandRejectedException e) { exception = e; } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { exception = e; } catch (java.io.IOException e) { exception = e; } handleBatteryLevelFailure(exception); }",b317b4940bfc5ac57e741015af0919d52a65ea62,"@java.lang.Override public void run() { java.lang.Exception exception = null; try { com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver sysBattReceiver = new com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver(); mDevice.executeShellCommand(""cat /sys/class/power_supply/*/capacity"", sysBattReceiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (!(setBatteryLevel(sysBattReceiver.getBatteryLevel()))) { com.android.ddmlib.BatteryFetcher.BatteryReceiver receiver = new com.android.ddmlib.BatteryFetcher.BatteryReceiver(); mDevice.executeShellCommand(""dumpsys battery"", receiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (setBatteryLevel(receiver.getBatteryLevel())) { return; } } exception = new java.io.IOException(""Unrecognized response to battery level queries""); } catch (com.android.ddmlib.TimeoutException e) { exception = e; } catch (com.android.ddmlib.AdbCommandRejectedException e) { exception = e; } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { exception = e; } catch (java.io.IOException e) { exception = e; } catch (java.lang.InterruptedException e) { exception = e; } handleBatteryLevelFailure(exception); }",0931361001312fd80b441777a030083b0655896d,run(),run(),4,6,"@java.lang.Override public void run() { java.lang.Exception exception = null; try { com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver sysBattReceiver = new com.android.ddmlib.BatteryFetcher.SysFsBatteryLevelReceiver(); mDevice.executeShellCommand(""cat /sys/class/power_supply/*/capacity"", sysBattReceiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (!(setBatteryLevel(sysBattReceiver.getBatteryLevel()))) { com.android.ddmlib.BatteryFetcher.BatteryReceiver receiver = new com.android.ddmlib.BatteryFetcher.BatteryReceiver(); mDevice.executeShellCommand(""dumpsys battery"", receiver, com.android.ddmlib.BatteryFetcher.BATTERY_TIMEOUT, java.util.concurrent.TimeUnit.MILLISECONDS); if (setBatteryLevel(receiver.getBatteryLevel())) { return; } } exception = new java.io.IOException(""Unrecognized response to battery level queries""); } catch (com.android.ddmlib.TimeoutException e) { exception = e; } catch (com.android.ddmlib.AdbCommandRejectedException e) { exception = e; } catch (com.android.ddmlib.ShellCommandUnresponsiveException e) { exception = e; } catch (java.io.IOException e) { exception = e; } handleBatteryLevelFailure(exception); }",b317b4940bfc5ac57e741015af0919d52a65ea62,run(),353055,342,326
115033,luni_src_test_java_libcore_javax_net_ssl_SSLContextTest.java,28.0,"public void test_SSLContext_defaultConfiguration() throws java.lang.Exception { libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertSSLContext(javax.net.ssl.SSLContext.getDefault()); for (java.lang.String protocol : libcore.java.security.StandardNames.SSL_CONTEXT_PROTOCOLS) { javax.net.ssl.SSLContext sslContext = javax.net.ssl.SSLContext.getInstance(protocol); if (!(protocol.equals(StandardNames.SSL_CONTEXT_PROTOCOLS_DEFAULT))) { sslContext.init(null, null, null); } libcore.javax.net.ssl.SSLDefaultConfigurationAsserts.assertSSLContext(sslContext); } }",6704466a703c4f5fd711d38028fbc14eb61f0eed,"public void test_SSLContext_defaultConfiguration() throws java.lang.Exception { libcore.javax.net.ssl.SSLConfigurationAsserts.assertSSLContextDefaultConfigurationRecursive(javax.net.ssl.SSLContext.getDefault()); for (java.lang.String protocol : libcore.java.security.StandardNames.SSL_CONTEXT_PROTOCOLS) { javax.net.ssl.SSLContext sslContext = javax.net.ssl.SSLContext.getInstance(protocol); if (!(protocol.equals(StandardNames.SSL_CONTEXT_PROTOCOLS_DEFAULT))) { sslContext.init(null, null, null); } libcore.javax.net.ssl.SSLConfigurationAsserts.assertSSLContextDefaultConfigurationRecursive(sslContext); } }",79495b87880b57c3a8286f972b97baf058af9b35,test_SSLContext_defaultConfiguration(),test_SSLContext_defaultConfiguration(),3,28,"public void test_SSLContext_defaultConfiguration() throws java.lang.Exception { libcore.javax.net.ssl.SSLConfigurationAsserts.assertSSLContextDefaultConfiguration(javax.net.ssl.SSLContext.getDefault()); for (java.lang.String protocol : libcore.java.security.StandardNames.SSL_CONTEXT_PROTOCOLS) { javax.net.ssl.SSLContext sslContext = javax.net.ssl.SSLContext.getInstance(protocol); if (!(protocol.equals(StandardNames.SSL_CONTEXT_PROTOCOLS_DEFAULT))) { sslContext.init(null, null, null); } libcore.javax.net.ssl.SSLConfigurationAsserts.assertSSLContextDefaultConfiguration(sslContext); } }",7a070ef1b5e2a38ec43e55250a7a5e5506db422a,test_SSLContext_defaultConfiguration(),241690,149,147
159280,build-system_profile_src_main_java_com_android_builder_profile_ProcessRecorderFactory.java,10.0,"public static void shutdown() throws java.lang.InterruptedException { synchronized(com.android.builder.profile.ProcessRecorderFactory.LOCK) { java.util.List<java.lang.management.GarbageCollectorMXBean> garbageCollectorMXBeans = java.lang.management.ManagementFactory.getGarbageCollectorMXBeans(); com.android.builder.profile.ThreadRecorder.get().record(ExecutionType.FINAL_METADATA, Recorder.EmptyBlock, new com.android.builder.profile.Recorder.Property(""build_time"", java.lang.Long.toString(((java.lang.System.currentTimeMillis()) - (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.startTime)))), new com.android.builder.profile.Recorder.Property(""gc_count"", java.lang.Long.toString(((garbageCollectorMXBeans.get(0).getCollectionCount()) - (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.gcCountAtStart)))), new com.android.builder.profile.Recorder.Property(""gc_time"", java.lang.Long.toString(((garbageCollectorMXBeans.get(0).getCollectionTime()) - (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.gcTimeAtStart))))); if (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.isInitialized()) { com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.get().finish(); com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.uploadData(); } com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.processRecorder = null; } }",254e51a0e5d31939761f0e4ae93defef102b16a5,"public static void shutdown() throws java.lang.InterruptedException { synchronized(com.android.builder.profile.ProcessRecorderFactory.LOCK) { java.util.List<java.lang.management.GarbageCollectorMXBean> garbageCollectorMXBeans = java.lang.management.ManagementFactory.getGarbageCollectorMXBeans(); com.android.builder.profile.ThreadRecorder.get().record(ExecutionType.FINAL_METADATA, Recorder.EmptyBlock, new com.android.builder.profile.Recorder.Property(""build_time"", java.lang.Long.toString(((java.lang.System.currentTimeMillis()) - (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.startTime)))), new com.android.builder.profile.Recorder.Property(""gc_count"", java.lang.Long.toString(((garbageCollectorMXBeans.get(0).getCollectionCount()) - (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.gcCountAtStart)))), new com.android.builder.profile.Recorder.Property(""gc_time"", java.lang.Long.toString(((garbageCollectorMXBeans.get(0).getCollectionTime()) - (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.gcTimeAtStart))))); if (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.isInitialized()) { com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.get().finish(); com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.uploadData(); } com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.processRecorder = null; com.android.builder.profile.ProcessRecorderFactory.sENABLED = false; } }",e52df2b2458ce79db2518b0bcbd016feed12d280,shutdown(),shutdown(),2,10,"public static void shutdown() throws java.lang.InterruptedException { synchronized(com.android.builder.profile.ProcessRecorderFactory.LOCK) { java.util.List<java.lang.management.GarbageCollectorMXBean> garbageCollectorMXBeans = java.lang.management.ManagementFactory.getGarbageCollectorMXBeans(); com.android.builder.profile.ThreadRecorder.get().record(ExecutionType.FINAL_METADATA, Recorder.EmptyBlock, new com.android.builder.profile.Recorder.Property(""build_time"", java.lang.Long.toString(((java.lang.System.currentTimeMillis()) - (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.startTime)))), new com.android.builder.profile.Recorder.Property(""gc_count"", java.lang.Long.toString(((garbageCollectorMXBeans.get(0).getCollectionCount()) - (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.gcCountAtStart)))), new com.android.builder.profile.Recorder.Property(""gc_time"", java.lang.Long.toString(((garbageCollectorMXBeans.get(0).getCollectionTime()) - (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.gcTimeAtStart))))); if (com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.isInitialized()) { com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.get().finish(); com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.uploadData(); } com.android.builder.profile.ProcessRecorderFactory.sINSTANCE.processRecorder = null; } }",254e51a0e5d31939761f0e4ae93defef102b16a5,shutdown(),177954,365,348
355691,tests_wifitests_src_com_android_server_wifi_WifiServiceImplTest.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testWifiStartsWhenDeviceIsDecryptedAtBootWithWifiEnabled() { when(mPropertyService.get(eq(""vold.decrypt""), anyString())).thenReturn(""""); when(mSettingsStore.handleWifiToggled(true)).thenReturn(true); when(mSettingsStore.isWifiToggleEnabled()).thenReturn(true); when(mWifiStateMachine.syncGetWifiState()).thenReturn(com.android.server.wifi.WIFI_STATE_DISABLED); mWifiServiceImpl.checkAndStartWifi(); verify(mWifiController).start(); verify(mWifiController).sendMessage(com.android.server.wifi.WifiController.CMD_WIFI_TOGGLED); }",db02ab98978c2824b4e00b88c55e1f76fff5678d,,testWifiStartsWhenDeviceIsDecryptedAtBootWithWifiEnabled(),7,11,@org.junit.Test public void testWifiFullyStartsWhenDeviceIsDecryptedAtBootWithWifiEnabled() { when(mFrameworkFacade.inStorageManagerCryptKeeperBounce()).thenReturn(false); when(mSettingsStore.handleWifiToggled(true)).thenReturn(true); when(mSettingsStore.isWifiToggleEnabled()).thenReturn(true); when(mWifiStateMachine.syncGetWifiState()).thenReturn(com.android.server.wifi.WIFI_STATE_DISABLED); mWifiServiceImpl.checkAndStartWifi(); verify(mWifiController).start(); verify(mWifiController).sendMessage(com.android.server.wifi.WifiController.CMD_WIFI_TOGGLED); },92aa6c82560d80041cec89aa876dbb0195f057bf,testWifiFullyStartsWhenDeviceIsDecryptedAtBootWithWifiEnabled(),444152,152,150
91995,luni_src_main_java_java_net_PlainDatagramSocketImpl.java,11.0,"@java.lang.Override public void disconnect() { try { Libcore.os.connect(fd, UNSPECIFIED, 0); } catch (libcore.io.ErrnoException errnoException) { throw new java.lang.AssertionError(errnoException); } catch (java.net.SocketException ignored) { } connectedPort = -1; connectedAddress = null; isNativeConnected = false; }",d5009113c19248bb6a219a80f45fccfd9f3076b9,"@java.lang.Override public void disconnect() { try { Libcore.os.connect(fd, UNSPECIFIED, 0); } catch (android.os.ErrnoException errnoException) { throw new java.lang.AssertionError(errnoException); } catch (java.net.SocketException ignored) { } connectedPort = -1; connectedAddress = null; isNativeConnected = false; }",eb1d330e53a573fc34b4207596baaccb029dd734,disconnect(),disconnect(),3,11,"@java.lang.Override public void disconnect() { try { Libcore.os.connect(fd, UNSPECIFIED, 0); } catch (android.system.ErrnoException errnoException) { throw new java.lang.AssertionError(errnoException); } catch (java.net.SocketException ignored) { } connectedPort = -1; connectedAddress = null; isNativeConnected = false; }",d0b289cd9a5e3dd052ab5e9b7fbb2a289438035e,disconnect(),170279,83,83
49484,hierarchyviewer2_libs_hierarchyviewerlib_src_com_android_hierarchyviewerlib_device_AbstractHvDevice.java,,,,"@java.lang.Override public org.eclipse.swt.graphics.Image getScreenshotImage() { com.android.ddmlib.IDevice device = getDevice(); try { final com.android.ddmlib.RawImage screenshot = device.getScreenshot(); if (screenshot == null) { return null; } class ImageContainer { public org.eclipse.swt.graphics.Image image; } final ImageContainer imageContainer = new ImageContainer(); org.eclipse.swt.widgets.Display.getDefault().syncExec(new java.lang.Runnable() { @java.lang.Override public void run() { org.eclipse.swt.graphics.ImageData imageData = new org.eclipse.swt.graphics.ImageData(screenshot.width, screenshot.height, screenshot.bpp, new org.eclipse.swt.graphics.PaletteData(screenshot.getRedMask(), screenshot.getGreenMask(), screenshot.getBlueMask()), 1, screenshot.data); imageContainer.image = new org.eclipse.swt.graphics.Image(org.eclipse.swt.widgets.Display.getDefault(), imageData); } }); return imageContainer.image; } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.AbstractHvDevice.TAG, (""Unable to load screenshot from device "" + (device.getName()))); } catch (com.android.ddmlib.TimeoutException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.AbstractHvDevice.TAG, (""Timeout loading screenshot from device "" + (device.getName()))); } catch (com.android.ddmlib.AdbCommandRejectedException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.AbstractHvDevice.TAG, (""Adb rejected command to load screenshot from device "" + (device.getName()))); } return null; }",03c51a0698b0d17cf0567cef81041939375be42d,,getScreenshotImage(),7,0,"@java.lang.Override public org.eclipse.swt.graphics.Image getScreenshotImage() { com.android.ddmlib.IDevice device = getDevice(); final java.util.concurrent.atomic.AtomicReference<org.eclipse.swt.graphics.Image> imageRef = new java.util.concurrent.atomic.AtomicReference<org.eclipse.swt.graphics.Image>(); try { final com.android.ddmlib.RawImage screenshot = device.getScreenshot(); if (screenshot == null) { return null; } org.eclipse.swt.widgets.Display.getDefault().syncExec(new java.lang.Runnable() { @java.lang.Override public void run() { org.eclipse.swt.graphics.ImageData imageData = new org.eclipse.swt.graphics.ImageData(screenshot.width, screenshot.height, screenshot.bpp, new org.eclipse.swt.graphics.PaletteData(screenshot.getRedMask(), screenshot.getGreenMask(), screenshot.getBlueMask()), 1, screenshot.data); imageRef.set(new org.eclipse.swt.graphics.Image(org.eclipse.swt.widgets.Display.getDefault(), imageData)); } }); return imageRef.get(); } catch (java.io.IOException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.AbstractHvDevice.TAG, (""Unable to load screenshot from device "" + (device.getName()))); } catch (com.android.ddmlib.TimeoutException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.AbstractHvDevice.TAG, (""Timeout loading screenshot from device "" + (device.getName()))); } catch (com.android.ddmlib.AdbCommandRejectedException e) { com.android.ddmlib.Log.e(com.android.hierarchyviewerlib.device.AbstractHvDevice.TAG, (""Adb rejected command to load screenshot from device "" + (device.getName()))); } return null; }",afcdfd7c601f2dfde39dfd40b7fa2a6c17ac6119,getScreenshotImage(),75911,422,442
125016,build-system_integration-test_src_test_groovy_com_android_build_gradle_integration_common_fixture_GradleTestProject.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.android.annotations.NonNull public java.util.Map<java.lang.String, com.android.builder.model.AndroidProject> executeAndReturnMultiModel(boolean emulateOlderIde, java.lang.String... tasks) { org.gradle.tooling.ProjectConnection connection = getProjectConnection(); try { executeBuild(java.util.Collections.<java.lang.String>emptyList(), connection, tasks); return com.android.build.gradle.integration.common.fixture.GradleTestProject.buildModel(connection, emulateOlderIde); } finally { connection.close(); } }",3a6046906d72b78c6408022e70da7ff6c5539147,,"executeAndReturnMultiModel(boolean,java.lang.String[])",3,1,"@com.android.annotations.NonNull public java.util.Map<java.lang.String, com.android.builder.model.AndroidProject> executeAndReturnMultiModel(boolean emulateStudio_1_0, java.lang.String... tasks) { org.gradle.tooling.ProjectConnection connection = getProjectConnection(); try { executeBuild(java.util.Collections.<java.lang.String>emptyList(), connection, tasks); return com.android.build.gradle.integration.common.fixture.GradleTestProject.buildModel(connection, emulateStudio_1_0); } finally { connection.close(); } }",09cf50947fa5e54989da12a417d97dd38e983f43,"executeAndReturnMultiModel(boolean,java.lang.String[])",253453,130,128
335906,src_java_com_android_internal_telephony_RIL.java,30.0,"@java.lang.Override public void supplyIccPuk2ForApp(java.lang.String puk, java.lang.String newPin2, java.lang.String aid, android.os.Message result) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_ENTER_SIM_PUK2, result); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(); if (radioProxy != null) { addRequest(rr); try { radioProxy.supplyIccPuk2ForApp(rr.mSerial, (puk != null ? puk : """"), (newPin2 != null ? newPin2 : """"), (aid != null ? aid : """")); } catch (java.lang.Exception e) { riljLoge(""supplyIccPuk2ForApp"", e); rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); decrementWakeLock(rr); rr.release(); } } else { rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); rr.release(); } }",c4000ae4d64bc5cb13f87db44eb2a3c40d2a2ed3,"@java.lang.Override public void supplyIccPuk2ForApp(java.lang.String puk, java.lang.String newPin2, java.lang.String aid, android.os.Message result) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_ENTER_SIM_PUK2, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(); if (radioProxy != null) { addRequest(rr); try { radioProxy.supplyIccPuk2ForApp(rr.mSerial, (puk != null ? puk : """"), (newPin2 != null ? newPin2 : """"), (aid != null ? aid : """")); } catch (java.lang.Exception e) { riljLoge(""supplyIccPuk2ForApp"", e); rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); decrementWakeLock(rr); rr.release(); } } else { rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); rr.release(); } }",06304b18305468a38b07dcc847546854af0496f2,"supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)","supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)",5,30,"@java.lang.Override public void supplyIccPuk2ForApp(java.lang.String puk, java.lang.String newPin2, java.lang.String aid, android.os.Message result) { com.android.internal.telephony.RILRequest rr = com.android.internal.telephony.RILRequest.obtain(com.android.internal.telephony.RIL_REQUEST_ENTER_SIM_PUK2, result, mRILDefaultWorkSource); if (com.android.internal.telephony.RIL.RILJ_LOGD) riljLog((((rr.serialString()) + ""> "") + (com.android.internal.telephony.RIL.requestToString(rr.mRequest)))); android.hardware.radio.V1_0.IRadio radioProxy = getRadioProxy(); if (radioProxy != null) { addRequest(rr); try { radioProxy.supplyIccPuk2ForApp(rr.mSerial, (puk != null ? puk : """"), (newPin2 != null ? newPin2 : """"), (aid != null ? aid : """")); } catch (android.os.RemoteException | java.lang.RuntimeException e) { handleRadioProxyExceptionForRR(""supplyIccPuk2ForApp"", e, rr); } } else { rr.onError(com.android.internal.telephony.RADIO_NOT_AVAILABLE, null); rr.release(); } }",2127782518e60ca808b5952b8a2d59deb07c63a0,"supplyIccPuk2ForApp(java.lang.String,java.lang.String,java.lang.String,android.os.Message)",449479,347,325
377238,Common_src_com_googlecode_android_scripting_facade_telephony_ImsManagerFacade.java,13.0,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Return True if WiFi Calling is enabled during roaming."") public boolean imsIsWfcRoamingEnabledByUser() { return com.android.ims.ImsManager.isWfcRoamingEnabledByUser(mContext); }",2af05b8ac9c35aa373836862a476b5c0b6cccb2c,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Return True if WiFi Calling is enabled during roaming."") public boolean imsIsWfcRoamingEnabledByUser() { return com.android.ims.ImsManager.isWfcEnabledByPlatformForSlot(); }",9b1d13a7fc24ad0ca46f72320026583f367ac955,imsIsWfcRoamingEnabledByUser(),imsIsWfcRoamingEnabledByUser(),4,14,"@com.googlecode.android_scripting.rpc.Rpc(description = ""Return True if WiFi Calling is enabled during roaming."") public boolean imsIsWfcRoamingEnabledByUser() { return mImsManager.isWfcEnabledByPlatformForSlot(); }",d46afe7213bb6c508f1a20c6b9f14327235aeab5,imsIsWfcRoamingEnabledByUser(),383414,67,61
81416,tests_tests_renderscript_src_android_renderscript_cts_TestClz.java,,,,"private void verifyResultsClzInt4(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { int[] arrayInValue = new int[(INPUTSIZE) * 4]; inValue.copyTo(arrayInValue); int[] arrayOut = new int[(INPUTSIZE) * 4]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 4; j++) { android.renderscript.cts.TestClz.ArgumentsIntInt args = new android.renderscript.cts.TestClz.ArgumentsIntInt(); args.inValue = arrayInValue[((i * 4) + j)]; android.renderscript.cts.CoreMathVerifier.computeClz(args); int actualOut = arrayOut[((i * 4) + j)]; int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; float ulpf; ulpf = (java.lang.Math.ulp(args.out)) * ulf; assertEquals((((((((((((((((((""Incorrect output for checkClzInt4"" + (relaxed ? ""_relaxed"" : """")) + "" @["") + i) + "", "") + j) + ""] with ulf:"") + ulf) + "".\n"") + ""Input inValue:"") + (args.inValue)) + ""\n"") + ""Expected output out:"") + (args.out)) + ""\n"") + ""Actual output out:"") + actualOut) + ""\n""), args.out, actualOut, ulpf); } } }",f29c46747861816d273bdbacb254ef07e788c53e,,"verifyResultsClzInt4(android.renderscript.Allocation,android.renderscript.Allocation,boolean)",9,34,"private void verifyResultsClzInt4Int4(android.renderscript.Allocation inValue, android.renderscript.Allocation out, boolean relaxed) { int[] arrayInValue = new int[(INPUTSIZE) * 4]; inValue.copyTo(arrayInValue); int[] arrayOut = new int[(INPUTSIZE) * 4]; out.copyTo(arrayOut); for (int i = 0; i < (INPUTSIZE); i++) { for (int j = 0; j < 4; j++) { android.renderscript.cts.TestClz.ArgumentsIntInt args = new android.renderscript.cts.TestClz.ArgumentsIntInt(); args.inValue = arrayInValue[((i * 4) + j)]; android.renderscript.cts.CoreMathVerifier.computeClz(args); int ulf = (relaxed) ? args.ulfRelaxed : args.ulf; boolean valid = true; int neededUlf = 0; if ((args.out) != (arrayOut[((i * 4) + j)])) { valid = false; } if (!valid) { java.lang.StringBuilder message = new java.lang.StringBuilder(); message.append(java.lang.String.format(""Input inValue: %d"", args.inValue)); message.append(""\n""); message.append(java.lang.String.format(""Expected output out: %d"", args.out)); message.append(""\n""); message.append(java.lang.String.format(""Actual output out: %d"", arrayOut[((i * 4) + j)])); if ((args.out) != (arrayOut[((i * 4) + j)])) { message.append("" FAIL""); } message.append(""\n""); assertTrue((((""Incorrect output for checkClzInt4Int4"" + (relaxed ? ""_relaxed"" : """")) + "":\n"") + (message.toString())), valid); } } } }",83124d90cb5e5aaeec3b002801f7d25aedd30fd5,"verifyResultsClzInt4Int4(android.renderscript.Allocation,android.renderscript.Allocation,boolean)",143460,376,433
572011,telephony_java_android_telephony_LocationAccessPolicy.java,,,,"private static boolean isLegacyForeground(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.lang.String pkgName, int uid) { return (android.telephony.LocationAccessPolicy.isLegacyVersion(context, pkgName)) && (android.telephony.LocationAccessPolicy.isForegroundApp(context, uid)); }",01298cddd7b4bb9d05f08225913004651d09294b,,"isLegacyForeground(android.content.Context,java.lang.String,int)",10,1,"private static boolean isLegacyForeground(@android.annotation.NonNull android.content.Context context, @android.annotation.NonNull java.lang.String pkgName, int uid) { long token = android.os.Binder.clearCallingIdentity(); try { return (android.telephony.LocationAccessPolicy.isLegacyVersion(context, pkgName)) && (android.telephony.LocationAccessPolicy.isForegroundApp(context, uid)); } finally { android.os.Binder.restoreCallingIdentity(token); } }",677017c410d1d035a84ba8e7010e69976fa49483,"isLegacyForeground(android.content.Context,java.lang.String,int)",361081,75,106
253791,luni_src_main_java_libcore_io_ForwardingOs.java,108.0,"public int fcntlInt(java.io.FileDescriptor fd, int cmd, int arg) throws android.system.ErrnoException { return os.fcntlInt(fd, cmd, arg); }",9c27eb7d745a90e4ce421d99e527581eb1d4a087,"public int fcntlInt(java.io.FileDescriptor fd, int cmd, int arg) throws libcore.io.ErrnoException { return os.fcntlInt(fd, cmd, arg); }",74f18e6347105185b85be1885bb8745f395c2d8c,"fcntlInt(java.io.FileDescriptor,int,int)","fcntlInt(java.io.FileDescriptor,int,int)",8,108,"public int fcntlInt(java.io.FileDescriptor fd, int cmd, int arg) throws android.system.ErrnoException { return os.fcntlInt(fd, cmd, arg); }",9c27eb7d745a90e4ce421d99e527581eb1d4a087,"fcntlInt(java.io.FileDescriptor,int,int)",494787,45,44
47287,eclipse_plugins_com.android.ide.eclipse.adt_src_com_android_ide_eclipse_adt_internal_refactorings_core_RefactoringUtil.java,2.0,"public static void logError(java.lang.String message) { com.android.ide.eclipse.adt.AdtPlugin.log(IStatus.ERROR, AdtPlugin.PLUGIN_ID, message); }",82ea5aa2a8ff46bca0dc57b2cbe4eb21c66b6c16,"public static boolean isManifestClassAttribute(@com.android.annotations.NonNull org.w3c.dom.Attr attribute) { java.lang.String name = attribute.getLocalName(); if (name == null) { return false; } if (((((name.equals(com.android.SdkConstants.ATTR_NAME)) || (name.equals(com.android.ide.eclipse.adt.internal.refactorings.core.ATTRIBUTE_TARGET_ACTIVITY))) || (name.equals(com.android.ide.eclipse.adt.internal.refactorings.core.ATTRIBUTE_MANAGE_SPACE_ACTIVITY))) || (name.equals(""backupAgent""))) || (name.equals(""parentActivityName""))) { return com.android.SdkConstants.ANDROID_URI.equals(attribute.getNamespaceURI()); } return false; }",64a7506f1759c95eb0895e55a328dc83fe586adf,logError(java.lang.String),isManifestClassAttribute(org.w3c.dom.Attr),2,1,public static boolean isManifestClassAttribute(@com.android.annotations.NonNull org.w3c.dom.Attr attribute) { java.lang.String name = attribute.getLocalName(); if (name == null) { return false; } if (((((name.equals(com.android.SdkConstants.ATTR_NAME)) || (name.equals(com.android.ide.eclipse.adt.internal.refactorings.core.ATTRIBUTE_TARGET_ACTIVITY))) || (name.equals(com.android.ide.eclipse.adt.internal.refactorings.core.ATTRIBUTE_MANAGE_SPACE_ACTIVITY))) || (name.equals(com.android.ide.eclipse.adt.internal.refactorings.core.ATTRIBUTE_BACKUP_AGENT))) || (name.equals(com.android.ide.eclipse.adt.internal.refactorings.core.ATTRIBUTE_PARENT_ACTIVITY_NAME))) { return com.android.SdkConstants.ANDROID_URI.equals(attribute.getNamespaceURI()); } return false; },d18936dce336ec041c2d4d6304dc598503c49597,isManifestClassAttribute(org.w3c.dom.Attr),20460,177,224
91995,luni_src_main_java_libcore_io_BlockGuardOs.java,27.0,"@java.lang.Override public void lchown(java.lang.String path, int uid, int gid) throws libcore.io.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.lchown(path, uid, gid); }",4aa55f9be01a8bc5d47397f95ee051274c1364e3,"@java.lang.Override public void lchown(java.lang.String path, int uid, int gid) throws android.os.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.lchown(path, uid, gid); }",20f006756888abbd877dc5ba7c237bcf7749839f,"lchown(java.lang.String,int,int)","lchown(java.lang.String,int,int)",3,28,"@java.lang.Override public void lchown(java.lang.String path, int uid, int gid) throws android.system.ErrnoException { dalvik.system.BlockGuard.getThreadPolicy().onWriteToDisk(); os.lchown(path, uid, gid); }",50b87361774bdb8739abada2f3d87bbaf9a71a22,"lchown(java.lang.String,int,int)",170376,65,65
640427,tests_tests_net_src_android_net_cts_IpSecManagerTest.java,36.0,"private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int truncLenBits) throws java.lang.Exception { int innerPacketSize = ((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateAesCbcEspPacketSizeWithAuth(((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen), truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateAesCbcEspPacketSizeWithAuth(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, truncLenBits); sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (udpEncapLen != 0) { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } }",c4ac9f3e3cf855b34bc45ecc81c8027c8c27caa1,"private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int ivLen, int blkSize, int truncLenBits) throws java.lang.Exception { int innerPacketSize = ((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateEspPacketSize(((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen), ivLen, blkSize, truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateEspPacketSize(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, ivLen, blkSize, truncLenBits); sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { if (udpEncapLen != 0) { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } } }",7636e8654461fb44db474689cf2fe77b9f1c11d4,"checkStatsChecker(int,int,int,int,int,int)","checkStatsChecker(int,int,int,int,int,int,int,int)",9,84,"private void checkStatsChecker(int protocol, int ipHdrLen, int transportHdrLen, int udpEncapLen, int sendCount, int ivLen, int blkSize, int truncLenBits) throws java.lang.Exception { int innerPacketSize = ((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen) + ipHdrLen; int outerPacketSize = ((calculateEspPacketSize(((android.net.cts.IpSecManagerTest.TEST_DATA.length) + transportHdrLen), ivLen, blkSize, truncLenBits)) + udpEncapLen) + ipHdrLen; int expectedOuterBytes = outerPacketSize * sendCount; int expectedInnerBytes = innerPacketSize * sendCount; int expectedPackets = sendCount; if (protocol == (IPPROTO_TCP)) { int encryptedTcpPktSize = calculateEspPacketSize(android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS, ivLen, blkSize, truncLenBits); sendCount *= 2; expectedOuterBytes *= 2; expectedInnerBytes *= 2; expectedPackets *= 2; expectedOuterBytes += ((encryptedTcpPktSize + udpEncapLen) + ipHdrLen) * sendCount; expectedInnerBytes += ((android.net.cts.IpSecManagerTest.TCP_HDRLEN_WITH_OPTIONS) + ipHdrLen) * sendCount; expectedPackets += sendCount; } android.net.cts.IpSecManagerTest.StatsChecker.waitForNumPackets(expectedPackets); if (udpEncapLen != 0) { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } else { android.net.cts.IpSecManagerTest.StatsChecker.assertUidStatsDelta(expectedOuterBytes, expectedPackets, expectedInnerBytes, expectedPackets); } if (sendCount >= 1000) { android.net.cts.IpSecManagerTest.StatsChecker.assertIfaceStatsDelta(expectedOuterBytes, expectedPackets, expectedOuterBytes, expectedPackets); } }",c624523a080e9b4b849a99907f58cb50813f21c0,"checkStatsChecker(int,int,int,int,int,int,int,int)",1863,486,483
124774,jack_src_com_android_jack_library_JackLibraryFactory.java,2.0,"@javax.annotation.Nonnull private static java.util.Properties loadLibraryProperties(@javax.annotation.Nonnull com.android.sched.vfs.InputVFS vfs) throws com.android.jack.library.NotJackLibraryException { java.util.Properties libraryProperties = new java.util.Properties(); try { com.android.sched.vfs.InputVFile libProp = vfs.getRootInputVDir().getInputVFile(JackLibrary.LIBRARY_PROPERTIES_VPATH); libraryProperties.load(libProp.openRead()); } catch (java.io.IOException e) { com.android.jack.library.JackLibraryFactory.logger.log(java.util.logging.Level.SEVERE, (((""Fails to read "" + (JackLibrary.LIBRARY_PROPERTIES_VPATH.getPathAsString('/'))) + "" from "") + vfs), e); throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } return libraryProperties; }",134757d447cd7ca62dd5280435846453917e7d46,"@javax.annotation.Nonnull private static java.util.Properties loadLibraryProperties(@javax.annotation.Nonnull com.android.sched.vfs.InputVFS vfs) throws com.android.jack.library.NotJackLibraryException { java.util.Properties libraryProperties = new java.util.Properties(); try { com.android.sched.vfs.InputVFile libProp = vfs.getRootInputVDir().getInputVFile(JackLibrary.LIBRARY_PROPERTIES_VPATH); libraryProperties.load(libProp.openRead()); } catch (java.io.IOException e) { com.android.jack.library.JackLibraryFactory.logger.log(java.util.logging.Level.FINE, (((""Fails to read "" + (JackLibrary.LIBRARY_PROPERTIES_VPATH.getPathAsString('/'))) + "" from "") + vfs), e); throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } return libraryProperties; }",563b226a8b81853562a019d047ad04c09981da07,loadLibraryProperties(com.android.sched.vfs.InputVFS),loadLibraryProperties(com.android.sched.vfs.InputVFS),3,2,@javax.annotation.Nonnull private static java.util.Properties loadLibraryProperties(@javax.annotation.Nonnull com.android.sched.vfs.InputVFS vfs) throws com.android.jack.library.NotJackLibraryException { java.util.Properties libraryProperties = new java.util.Properties(); try { com.android.sched.vfs.InputVFile libProp = vfs.getRootInputVDir().getInputVFile(JackLibrary.LIBRARY_PROPERTIES_VPATH); libraryProperties.load(libProp.openRead()); } catch (java.io.IOException e) { throw new com.android.jack.library.NotJackLibraryException(vfs.getLocation()); } return libraryProperties; },7152f2d9d9e63473a0ce582706df9886cd346c9d,loadLibraryProperties(com.android.sched.vfs.InputVFS),478631,210,149
199633,sched_src_com_android_sched_util_Version.java,14.0,"@javax.annotation.Nonnull public java.lang.String getVerboseVersion() { return ((((((version) + "" '"") + (releaseName)) + ""' ("") + ((buildId) != null ? buildId : ""engineering"")) + ((codeBase) != null ? ' ' + (codeBase) : """")) + "")""; }",b7d7eb7cf696969869674d654c272a22bb5ba359,"@javax.annotation.Nonnull public java.lang.String getVerboseVersion() { java.lang.String str; str = version; if ((subReleaseKind) == (SubReleaseKind.ENGINEERING)) { str += ""-eng""; } str += ("" '"" + (releaseName)) + ""'""; if (((buildId) != null) || ((codeBase) != null)) { str += "" (""; if ((buildId) != null) { str += buildId; if ((codeBase) != null) { str += "" ""; } } if ((codeBase) != null) { str += codeBase; } str += ')'; } return str; }",9a8b270b8488f31c72ed1aff036c255272018cd5,getVerboseVersion(),getVerboseVersion(),17,15,"@javax.annotation.Nonnull public java.lang.String getVerboseVersion() { java.lang.String str; str = (((getVersion()) + "" '"") + (releaseName)) + ""'""; if ((releaser) != null) { str += "" (""; if ((buildId) != null) { str += buildId; if ((codeBase) != null) { str += "" ""; } } if ((codeBase) != null) { str += codeBase; } str += ("" by "" + (releaser)) + ')'; } return str; }",e1fa808ff7568fa10f65bf1206d84802070bac78,getVerboseVersion(),286259,147,124
354498,services_core_java_com_android_server_connectivity_Tethering.java,71.0,"public int setUsbTethering(boolean enable) { if (com.android.server.connectivity.Tethering.VDBG) android.util.Log.d(com.android.server.connectivity.Tethering.TAG, ((""setUsbTethering("" + enable) + "")"")); android.hardware.usb.UsbManager usbManager = mContext.getSystemService(android.hardware.usb.UsbManager.class); synchronized(mPublicSync) { if (enable) { if (mRndisEnabled) { final long ident = android.os.Binder.clearCallingIdentity(); try { tetherMatchingInterfaces(true, ConnectivityManager.TETHERING_USB); } finally { android.os.Binder.restoreCallingIdentity(ident); } } else { mUsbTetherRequested = true; usbManager.setCurrentFunction(UsbManager.USB_FUNCTION_RNDIS, false); } } else { final long ident = android.os.Binder.clearCallingIdentity(); try { tetherMatchingInterfaces(false, ConnectivityManager.TETHERING_USB); } finally { android.os.Binder.restoreCallingIdentity(ident); } if (mRndisEnabled) { usbManager.setCurrentFunction(null, false); } mUsbTetherRequested = false; } } return android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR; }",24f2b9e46c27447fc6946db4d655c7215d69bab8,"public int setUsbTethering(boolean enable) { if (com.android.server.connectivity.Tethering.VDBG) android.util.Log.d(com.android.server.connectivity.Tethering.TAG, ((""setUsbTethering("" + enable) + "")"")); android.hardware.usb.UsbManager usbManager = mContext.getSystemService(android.hardware.usb.UsbManager.class); synchronized(mPublicSync) { if (enable) { if (mRndisEnabled) { final long ident = android.os.Binder.clearCallingIdentity(); try { tetherMatchingInterfaces(com.android.server.connectivity.Tethering.Mode.TETHERING, ConnectivityManager.TETHERING_USB); } finally { android.os.Binder.restoreCallingIdentity(ident); } } else { mUsbTetherRequested = true; usbManager.setCurrentFunction(UsbManager.USB_FUNCTION_RNDIS, false); } } else { final long ident = android.os.Binder.clearCallingIdentity(); try { tetherMatchingInterfaces(com.android.server.connectivity.Tethering.Mode.IDLE, ConnectivityManager.TETHERING_USB); } finally { android.os.Binder.restoreCallingIdentity(ident); } if (mRndisEnabled) { usbManager.setCurrentFunction(null, false); } mUsbTetherRequested = false; } } return android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR; }",789425c8a077273fc28c75600eaa4aa90c7566fe,setUsbTethering(boolean),setUsbTethering(boolean),14,74,"public int setUsbTethering(boolean enable) { if (com.android.server.connectivity.Tethering.VDBG) android.util.Log.d(com.android.server.connectivity.Tethering.TAG, ((""setUsbTethering("" + enable) + "")"")); android.hardware.usb.UsbManager usbManager = mContext.getSystemService(android.hardware.usb.UsbManager.class); synchronized(mPublicSync) { if (enable) { if (mRndisEnabled) { final long ident = android.os.Binder.clearCallingIdentity(); try { tetherMatchingInterfaces(IControlsTethering.STATE_TETHERED, ConnectivityManager.TETHERING_USB); } finally { android.os.Binder.restoreCallingIdentity(ident); } } else { mUsbTetherRequested = true; usbManager.setCurrentFunction(UsbManager.USB_FUNCTION_RNDIS, false); } } else { final long ident = android.os.Binder.clearCallingIdentity(); try { tetherMatchingInterfaces(IControlsTethering.STATE_AVAILABLE, ConnectivityManager.TETHERING_USB); } finally { android.os.Binder.restoreCallingIdentity(ident); } if (mRndisEnabled) { usbManager.setCurrentFunction(null, false); } mUsbTetherRequested = false; } } return android.net.ConnectivityManager.TETHER_ERROR_NO_ERROR; }",0468f02587dc45e94038613966e3d27481d9adbc,setUsbTethering(boolean),125066,336,322
230812,ojluni_src_main_java_sun_nio_fs_UnixMountEntry.java,,,,java.lang.String fstype() { if ((fstypeAsString) == null) fstypeAsString = new java.lang.String(fstype); return fstypeAsString; },b9a111527f5e68f035632398b7f0960a67d794b8,,fstype(),8,0,java.lang.String fstype() { if ((fstypeAsString) == null) fstypeAsString = sun.nio.fs.Util.toString(fstype); return fstypeAsString; },49b66d2db9d9e542fff563e32ed85d0544c4e5d0,fstype(),120231,39,42
16154,hierarchyviewer2_app_src_com_android_hierarchyviewer_HierarchyViewerApplicationDirector.java,3.0,public void run() { task.run(); },9fb14d2d914aa38e7d5e787923a316118f6e4774,"public void run() { java.lang.System.out.println(""STARTING TASK""); task.run(); java.lang.System.out.println(""ENDING TASK""); }",6259159e32d9b109ec9e7fc6d2a25de90e25f7eb,run(),run(),5,3,public void run() { task.run(); },9fb14d2d914aa38e7d5e787923a316118f6e4774,run(),443982,39,10
296409,service_java_com_android_server_wifi_util_InformationElementUtil.java,0.0,"private static java.lang.String parseWpaOneElement(android.net.wifi.ScanResult.InformationElement ie) { java.nio.ByteBuffer buf = java.nio.ByteBuffer.wrap(ie.bytes).order(java.nio.ByteOrder.LITTLE_ENDIAN); try { buf.getInt(); java.lang.String security = ""[WPA""; if ((buf.getShort()) != (com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_VENDOR_OUI_VERSION)) { return null; } buf.getInt(); short cipherCount = buf.getShort(); for (int i = 0; i < cipherCount; i++) { buf.getInt(); } short akmCount = buf.getShort(); if (akmCount == 0) { security += ""-EAP""; } boolean found = false; for (int i = 0; i < akmCount; i++) { int akm = buf.getInt(); switch (akm) { case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_AKM_EAP : security += (found ? ""+"" : ""-"") + ""EAP""; found = true; break; case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_AKM_PSK : security += (found ? ""+"" : ""-"") + ""PSK""; found = true; break; default : break; } } security += ""]""; return security; } catch (java.nio.BufferUnderflowException e) { android.util.Log.e(""IE_Capabilities"", ""Couldn't parse type 1 WPA, buffer underflow""); return null; } }",cdd3f53611073cbd3014c61a20f857e8f7d5a091,"private static java.lang.String parseWpaOneElement(android.net.wifi.ScanResult.InformationElement ie) { java.nio.ByteBuffer buf = java.nio.ByteBuffer.wrap(ie.bytes).order(java.nio.ByteOrder.LITTLE_ENDIAN); try { buf.getInt(); java.lang.String security = ""[WPA""; if ((buf.getShort()) != (com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_VENDOR_OUI_VERSION)) { return null; } security += ""-GROUP_"" + (com.android.server.wifi.util.InformationElementUtil.Capabilities.wpaCipherToString(buf.getInt())); short cipherCount = buf.getShort(); for (int i = 0; i < cipherCount; i++) { security += (i == 0) ? ""-"" : ""+""; security += ""PAIRWISE_"" + (com.android.server.wifi.util.InformationElementUtil.Capabilities.wpaCipherToString(buf.getInt())); } short akmCount = buf.getShort(); if (akmCount == 0) { security += ""-EAP""; } boolean found = false; for (int i = 0; i < akmCount; i++) { int akm = buf.getInt(); switch (akm) { case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_AKM_EAP : security += (found ? ""+"" : ""-"") + ""EAP""; found = true; break; case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_AKM_PSK : security += (found ? ""+"" : ""-"") + ""PSK""; found = true; break; default : break; } } security += ""]""; return security; } catch (java.nio.BufferUnderflowException e) { android.util.Log.e(""IE_Capabilities"", ""Couldn't parse type 1 WPA, buffer underflow""); return null; } }",c4a9bccb0c1fdff98c4f33cec6f378d3a98a751b,parseWpaOneElement(android.net.wifi.ScanResult.InformationElement),parseWpaOneElement(android.net.wifi.ScanResult.InformationElement),7,0,"private void parseWpaOneElement(android.net.wifi.ScanResult.InformationElement ie) { java.nio.ByteBuffer buf = java.nio.ByteBuffer.wrap(ie.bytes).order(java.nio.ByteOrder.LITTLE_ENDIAN); try { buf.getInt(); if ((buf.getShort()) != (com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_VENDOR_OUI_VERSION)) { return; } protocol = ""WPA""; groupCipher = com.android.server.wifi.util.InformationElementUtil.Capabilities.wpaCipherToString(buf.getInt()); short cipherCount = buf.getShort(); for (int i = 0; i < cipherCount; i++) { pairwiseCipher.add(com.android.server.wifi.util.InformationElementUtil.Capabilities.wpaCipherToString(buf.getInt())); } short akmCount = buf.getShort(); for (int i = 0; i < akmCount; i++) { int akm = buf.getInt(); switch (akm) { case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_AKM_EAP : keyManagement.add(""EAP""); break; case com.android.server.wifi.util.InformationElementUtil.Capabilities.WPA_AKM_PSK : keyManagement.add(""PSK""); break; default : break; } } if (keyManagement.isEmpty()) { keyManagement.add(""EAP""); } } catch (java.nio.BufferUnderflowException e) { android.util.Log.e(""IE_Capabilities"", ""Couldn't parse type 1 WPA, buffer underflow""); } }",04260cbe2e155abd1fc3f1f7c5ad1bf496912cd0,parseWpaOneElement(android.net.wifi.ScanResult.InformationElement),155959,432,362
403693,src_main_java_junitparams_JUnitParamsRunner.java,1.0,"@java.lang.Override protected org.junit.runners.model.Statement methodInvoker(org.junit.runners.model.FrameworkMethod method, java.lang.Object test) { org.junit.runners.model.Statement methodInvoker = parameterisedRunner.parameterisedMethodInvoker(method, test); if (methodInvoker == null) methodInvoker = super.methodInvoker(method, test); return methodInvoker; }",f53ce825acb7940ee9469672e48cd1f8f43ff316,"@java.lang.Override protected org.junit.runners.model.Statement methodInvoker(org.junit.runners.model.FrameworkMethod method, java.lang.Object test) { if (method instanceof junitparams.internal.InvokableFrameworkMethod) { return ((junitparams.internal.InvokableFrameworkMethod) (method)).getInvokeStatement(test); } else { throw new java.lang.IllegalStateException(((""Unsupported FrameworkMethod class: "" + (method.getClass())) + "", expected an InvokableFrameworkMethod subclass"")); } }",3737609f03f673960545de06f1bd15dc845f9457,"methodInvoker(org.junit.runners.model.FrameworkMethod,java.lang.Object)","methodInvoker(org.junit.runners.model.FrameworkMethod,java.lang.Object)",3,1,"@java.lang.Override protected org.junit.runners.model.Statement methodInvoker(org.junit.runners.model.FrameworkMethod method, java.lang.Object test) { if (method instanceof junitparams.internal.InvokableFrameworkMethod) { return ((junitparams.internal.InvokableFrameworkMethod) (method)).getInvokeStatement(test); } throw new java.lang.IllegalStateException(((""Unsupported FrameworkMethod class: "" + (method.getClass())) + "", expected an InvokableFrameworkMethod subclass"")); }",34a75eb8c02ca7ec95fe5da41ad001604db7b63d,"methodInvoker(org.junit.runners.model.FrameworkMethod,java.lang.Object)",130975,122,119
186130,jack-tests_tests_com_android_jack_java8_GwtTest.java,39.0,"@org.junit.Test public void testLambdaNestingInMultipleMixedAnonymousCaptureLocal_withInterference() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_44).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_TO_ANONYMOUS_CONVERTER.getName(), java.lang.Boolean.TRUE.toString()).compileAndRunTest(); }",7c1e9858ec41ff3571634dbf1100250806e3b14e,"@org.junit.Test public void testLambdaNestingInMultipleMixedAnonymousCaptureLocal_withInterference() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_44).setSourceLevel(SourceLevel.JAVA_8).addProperty(Options.LAMBDA_MODE.getName(), Options.LambdaMode.LEGACY.toString()).compileAndRunTest(); }",7ba054f84e6fd0350051eb38155db74c79e0039a,testLambdaNestingInMultipleMixedAnonymousCaptureLocal_withInterference(),testLambdaNestingInMultipleMixedAnonymousCaptureLocal_withInterference(),7,39,@org.junit.Test public void testLambdaNestingInMultipleMixedAnonymousCaptureLocal_withInterference() throws java.lang.Exception { new com.android.jack.test.helper.RuntimeTestHelper(GWT_LAMBDA_TEST_44).setSourceLevel(SourceLevel.JAVA_8).compileAndRunTest(); },cb0d78bde47b5a3106283e7f81bab9f9af0cd9ed,testLambdaNestingInMultipleMixedAnonymousCaptureLocal_withInterference(),466244,95,69
91995,luni_src_main_java_libcore_io_Os.java,74.0,"public void listen(java.io.FileDescriptor fd, int backlog) throws libcore.io.ErrnoException;",d20a960b4e1364d96ba144e1caf4a8b9f26ae119,"public void listen(java.io.FileDescriptor fd, int backlog) throws android.os.ErrnoException;",38ada2566f0d611452f2f7ffc814ecc203dee460,"listen(java.io.FileDescriptor,int)","listen(java.io.FileDescriptor,int)",3,72,"public void listen(java.io.FileDescriptor fd, int backlog) throws android.system.ErrnoException;",a4c81dfbca5136f95cd7db91f2d49a13d58329d1,"listen(java.io.FileDescriptor,int)",170250,24,24
389292,src_com_android_services_telephony_TelephonyConnectionService.java,15.0,"private android.util.Pair<java.lang.ref.WeakReference<com.android.services.telephony.TelephonyConnection>, java.util.List<com.android.internal.telephony.Phone>> makeCachedConnectionPhonePair(com.android.services.telephony.TelephonyConnection c) { java.util.List<com.android.internal.telephony.Phone> phones = new java.util.ArrayList(java.util.Arrays.asList(com.android.internal.telephony.PhoneFactory.getPhones())); return new android.util.Pair(new java.lang.ref.WeakReference(c), phones); }",b83b27e37f189b80ed771ae3d3696638b000c6b4,"private android.util.Pair<java.lang.ref.WeakReference<com.android.services.telephony.TelephonyConnection>, java.util.List<com.android.internal.telephony.Phone>> makeCachedConnectionPhonePair(com.android.services.telephony.TelephonyConnection c) { java.util.List<com.android.internal.telephony.Phone> phones = new java.util.ArrayList(android.telephony.TelephonyManager.getDefault().getPhoneCount()); for (com.android.internal.telephony.Phone phone : com.android.internal.telephony.PhoneFactory.getPhones()) { if ((mIsPermDiscCauseReceived[phone.getPhoneId()]) == false) { phones.add(phone); } } return new android.util.Pair(new java.lang.ref.WeakReference(c), phones); }",ecb5e704985873da05e500720c1e3fba0da3462f,makeCachedConnectionPhonePair(com.android.services.telephony.TelephonyConnection),makeCachedConnectionPhonePair(com.android.services.telephony.TelephonyConnection),8,41,"private android.util.Pair<java.lang.ref.WeakReference<com.android.services.telephony.TelephonyConnection>, java.util.List<com.android.internal.telephony.Phone>> makeCachedConnectionPhonePair(com.android.services.telephony.TelephonyConnection c) { java.util.List<com.android.internal.telephony.Phone> phones = new java.util.ArrayList(java.util.Arrays.asList(mPhoneFactoryProxy.getPhones())); return new android.util.Pair(new java.lang.ref.WeakReference(c), phones); }",51b22638170102f0fa14e3d1774a21990b72f00d,makeCachedConnectionPhonePair(com.android.services.telephony.TelephonyConnection),294706,186,132
206563,jack_src_com_android_jack_shrob_obfuscation_NewMethodSignatureMarker.java,,,,@javax.annotation.Nonnull public java.lang.String getNewSignature(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodId id) { return newMethodSignatures.get(id); },7c82e749ca00f6a687764bab76104f5b407ef6f4,,getNewSignature(com.android.jack.ir.ast.JMethodId),4,0,@javax.annotation.Nonnull public java.lang.String getNewSignature(@javax.annotation.Nonnull com.android.jack.ir.ast.JMethodIdWide id) { return newMethodSignatures.get(id); },158f0d7bb80f8984eaa49b5cb6b8bd0177fb2f44,getNewSignature(com.android.jack.ir.ast.JMethodIdWide),450601,47,48
146696,jack_src_com_android_jack_LogLevel.java,,,,"@java.lang.Override public java.util.List<com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>> getLevels() { java.util.List<com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>> setup = new java.util.ArrayList<com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>>(); setup.add(new com.android.sched.util.codec.PairCodec.Pair<java.lang.String, java.util.logging.Level>("""", java.util.logging.Level.WARNING)); return setup; }",ae3643c200a1b52f74bb919a0d68f15158937ee4,,getLevels(),17,2,"@java.lang.Override public java.util.List<com.android.jack.test.toolchain.PackageLevel> getLevels() { java.util.List<com.android.jack.test.toolchain.PackageLevel> setup = new java.util.ArrayList<com.android.jack.test.toolchain.PackageLevel>(); setup.add(new com.android.jack.test.toolchain.PackageLevel("""", java.util.logging.Level.WARNING)); return setup; }",e669c07f6a50753cc27b4d24ac2906eab669d8ec,getLevels(),89152,168,103
251892,ojluni_src_main_java_java_lang_Character.java,89.0,public static int toLowerCase(int codePoint) { return java.lang.Character.toLowerCaseImpl(codePoint); },b38e534fafab6a8a9bca53e933cc08fb3de76d7c,public static int toLowerCase(int codePoint) { if ((codePoint >= 'A') && (codePoint <= 'Z')) { return codePoint + ('a' - 'A'); } if (codePoint <= 128) { return codePoint; } return java.lang.Character.toLowerCaseImpl(codePoint); },46d5a60827f274ec52773fe7d65fa08f713d902b,toLowerCase(int),toLowerCase(int),3,89,public static int toLowerCase(int codePoint) { if ((codePoint >= 'A') && (codePoint <= 'Z')) { return codePoint + ('a' - 'A'); } if (codePoint < 128) { return codePoint; } return java.lang.Character.toLowerCaseImpl(codePoint); },16ec9e30db4fdd8658c24b12f09818dddaa0b8ba,toLowerCase(int),416257,71,71
544841,src_java_com_android_internal_telephony_imsphone_ImsPhoneCallTracker.java,133.0,"@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, (""[ImsPhoneCallTracker] "" + msg)); }",1485fb6efe276f2d4d9976a6184a400d9f7fb006,"@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, (((""[ImsPhoneCallTracker]["" + (mPhone.getPhoneId())) + ""] "") + msg)); }",81db6a44e0ca59f2e3105d47f34e87f3ce331743,log(java.lang.String),log(java.lang.String),9,144,"@java.lang.Override protected void log(java.lang.String msg) { android.telephony.Rlog.d(com.android.internal.telephony.imsphone.ImsPhoneCallTracker.LOG_TAG, (((""["" + (mPhone.getPhoneId())) + ""] "") + msg)); }",59ce8b62af5a9f74525db018a70711e1da79a799,log(java.lang.String),5572,76,69
81413,v8_renderscript_java_src_android_support_v8_renderscript_FieldPacker.java,35.0,"public void addU32(android.support.v8.renderscript.Long4 v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addU32(new android.renderscript.Long4(v.x, v.y, v.z, v.w)); return; } addU32(v.x); addU32(v.y); addU32(v.z); addU32(v.w); }",35fdbf59603667bb468094e6375ae4d4d98d7153,"public void addU32(android.support.v8.renderscript.Long4 v) { if (shouldThunk()) { mN.addU32(new android.renderscript.Long4(v.x, v.y, v.z, v.w)); return; } addU32(v.x); addU32(v.y); addU32(v.z); addU32(v.w); }",19070ec578aea24b62513b3976b783892b4dba78,addU32(android.support.v8.renderscript.Long4),addU32(android.support.v8.renderscript.Long4),5,34,"public void addU32(android.support.v8.renderscript.Long4 v) { if (android.support.v8.renderscript.RenderScript.shouldThunk()) { mN.addU32(new android.renderscript.Long4(v.x, v.y, v.z, v.w)); return; } addU32(v.x); addU32(v.y); addU32(v.z); addU32(v.w); }",35fdbf59603667bb468094e6375ae4d4d98d7153,addU32(android.support.v8.renderscript.Long4),205177,97,110
163082,jack-tests_tests_com_android_jack_switchstatement_SwitchstatementTests.java,27.0,"@org.junit.Test public void testCompile017() throws java.lang.Exception { java.lang.String packageName = ""com.android.jack.switchstatement.test017.jack""; java.lang.String classPrefix = (packageName.replace('.', '-')) + ""-""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); { input.put(""Enum1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input.put(""Enum1$Enum1_"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input.put(""Enum1$Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), true)); } checkCompiledCode(packageName, input); }",a351c008e0e154c79d3d57235a0d15bc55c2d216,"@org.junit.Test public void testCompile017() throws java.lang.Exception { java.lang.String packageName = ""com.android.jack.switchstatement.test017.jack""; java.lang.String classPrefix = (packageName.replace('.', '-')) + ""-""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input1 = com.google.common.collect.Maps.newHashMap(); { input1.put(""Enum1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input1.put(""Enum1$Enum1_"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input1.put(""Enum1$Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), true)); } java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input2 = com.google.common.collect.Maps.newHashMap(); { input2.put(""Enum1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input2.put(""Enum1$Enum1_"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input2.put(""Enum1$Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), true)); } compileCode(packageName, input1, input2); }",d361f3dbb908a36d87b8df89713d71930b05635c,testCompile017(),testCompile017(),5,65,"@org.junit.Test public void testCompile017a() throws java.lang.Exception { java.lang.String packageName = ""com.android.jack.switchstatement.test017.jack""; java.lang.String classPrefix = (packageName.replace('.', '-')) + ""-""; java.util.Map<java.lang.String, com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo> input = com.google.common.collect.Maps.newHashMap(); input.put(""Enum1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input.put(""Enum1$Enum1_"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), false)); input.put(""Enum1$Switch1"", new com.android.jack.switchstatement.SwitchstatementTests.VerifierInfo(false).specifyInfo((classPrefix + ""Enum1$Enum1_""), true)); compileCode(packageName, input); }",57dc398f1901465ecc711062acd4929926796ac2,testCompile017a(),137821,427,244
155012,sched_src_com_android_sched_util_Version.java,,,,@java.lang.Override public final int hashCode() { return ((((((versionName.hashCode()) ^ (releaseName.hashCode())) ^ ((releaseCode) << 16)) ^ (subReleaseCode)) ^ (subReleaseKind.hashCode())) ^ ((buildId) != null ? buildId.hashCode() : 0)) ^ ((codeBase) != null ? codeBase.hashCode() : 0); },8ad3485ffad7c6093ddb27f6392775532023f625,,hashCode(),14,6,@java.lang.Override public final int hashCode() { return ((((((version.hashCode()) ^ (releaseName.hashCode())) ^ ((releaseCode) * 7)) ^ ((subReleaseCode) * 17)) ^ (subReleaseKind.hashCode())) ^ ((buildId) != null ? buildId.hashCode() : 0)) ^ ((codeBase) != null ? codeBase.hashCode() : 0); },d89a866e6a27133592ff8394b4e8ba2ce6a4d1f9,hashCode(),215296,91,94
21795,sdkmanager_libs_sdkuilib_src_com_android_sdkuilib_internal_repository_AddonSitesDialog.java,,,,private void on_ButtonDelete_widgetSelected(org.eclipse.swt.events.SelectionEvent e) { mChanged = true; },088ad2cb9e22c0c314a7c5e7bf0c5b64e33b5f30,,on_ButtonDelete_widgetSelected(org.eclipse.swt.events.SelectionEvent),4,13,"private void on_ButtonDelete_widgetSelected(org.eclipse.swt.events.SelectionEvent e) { org.eclipse.jface.viewers.IStructuredSelection sel = ((org.eclipse.jface.viewers.IStructuredSelection) (mTableViewer.getSelection())); java.lang.String selectedUrl = (sel.isEmpty()) ? null : sel.getFirstElement().toString(); if (selectedUrl == null) { return; } org.eclipse.swt.widgets.MessageBox mb = new org.eclipse.swt.widgets.MessageBox(mShell, ((((org.eclipse.swt.SWT.YES) | (org.eclipse.swt.SWT.NO)) | (org.eclipse.swt.SWT.ICON_QUESTION)) | (org.eclipse.swt.SWT.APPLICATION_MODAL))); mb.setText(""Delete add-on site""); mb.setMessage(java.lang.String.format(""Do you want to delete the URL %1$s?"", selectedUrl)); if ((mb.open()) == (org.eclipse.swt.SWT.YES)) { com.android.sdklib.internal.repository.SdkSources sources = mUpdaterData.getSources(); for (com.android.sdklib.internal.repository.SdkSource source : sources.getSources(SdkSourceCategory.USER_ADDONS)) { if (selectedUrl.equals(source.getUrl())) { sources.remove(source); mChanged = true; loadList(); } } } }",b7d873c5fe78b713632ef0ccd4f6bb55b5c9d118,on_ButtonDelete_widgetSelected(org.eclipse.swt.events.SelectionEvent),244704,28,320
175765,luni_src_main_java_java_math_BigInt.java,11.0,"static java.math.BigInt gcd(java.math.BigInt a, java.math.BigInt b) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_gcd(r.bignum, a.bignum, b.bignum); return r; }",f753de3808d92440834c24e45823780d167bad21,"static java.math.BigInt gcd(java.math.BigInt a, java.math.BigInt b) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_gcd(r.nativePtr, a.nativePtr, b.nativePtr); return r; }",f3dc8e936683c91dd5b3c3b8e132dcaf807622db,"gcd(java.math.BigInt,java.math.BigInt)","gcd(java.math.BigInt,java.math.BigInt)",10,11,"static java.math.BigInt gcd(java.math.BigInt a, java.math.BigInt b) { java.math.BigInt r = java.math.BigInt.newBigInt(); java.math.NativeBN.BN_gcd(r.bignum, a.bignum, b.bignum); return r; }",f753de3808d92440834c24e45823780d167bad21,"gcd(java.math.BigInt,java.math.BigInt)",337181,72,72
